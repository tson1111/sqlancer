--java.lang.AssertionError: the size of the result sets mismatch (4 and 11)!
---- SELECT * FROM vt0, t1 WHERE ((~ ((((t1.c3, vt0.c0))<((vt0.c1, vt0.c1))))));
---- cardinality: 4
---- SELECT ALL * FROM vt0, t1 WHERE ((~ ((((t1.c3, vt0.c0))<>((vt0.c1, vt0.c1))))));
---- cardinality: 11
--	at sqlancer.ComparatorHelper.assumeResultSetsAreSubset(ComparatorHelper.java:126)
--	at sqlancer.sqlite3.oracle.SQLite3SubsetOracle.checkSubsetQuery(SQLite3SubsetOracle.java:244)
--	at sqlancer.sqlite3.oracle.SQLite3SubsetOracle.check(SQLite3SubsetOracle.java:111)
--	at sqlancer.ProviderAdapter.generateAndTestDatabase(ProviderAdapter.java:49)
--	at sqlancer.Main$DBMSExecutor.run(Main.java:323)
--	at sqlancer.Main$2.run(Main.java:507)
--	at sqlancer.Main$2.runThread(Main.java:485)
--	at sqlancer.Main$2.run(Main.java:475)
--	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
--	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
--	at java.base/java.lang.Thread.run(Thread.java:831)
---- Time: 2021/05/21 16:42:54
-- Database: database10
-- Database version: 3.34.0
-- seed value: 1621586090164
PRAGMA cache_size = 50000;
PRAGMA temp_store=MEMORY;
PRAGMA synchronous=off;
CREATE VIRTUAL TABLE vt0 USING fts4(c0 UNINDEXED, c1);
CREATE TEMPORARY TABLE IF NOT EXISTS t1 (c0 BLOB , c1 INT , c2 INTEGER , c3 INTEGER );
REINDEX BINARY;
ANALYZE vt0;
INSERT OR IGNORE INTO t1(c1, c2) VALUES (0.2782746084952842, x'df54');
INSERT INTO vt0(vt0) VALUES('rebuild');
COMMIT TRANSACTION;
PRAGMA reverse_unordered_selects;
INSERT OR IGNORE INTO t1(c3, c0, c1, c2) VALUES ('0.2782746084952842', 0.45646947876831967, 0x4f327efa, '1328709370'), (1.32870937E9, x'', NULL, '1357026707');
END;
ANALYZE;
COMMIT;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 14);
INSERT INTO vt0(vt0) VALUES('rebuild');
INSERT OR IGNORE INTO vt0 VALUES (x'41', 0.2782746084952842);
INSERT OR ROLLBACK INTO t1(c0, c2) VALUES (x'', 0.5445412819257869);
END;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 12);
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 334071944);
INSERT INTO vt0(vt0) VALUES('rebuild');
COMMIT TRANSACTION;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '22424');
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 6);
INSERT INTO vt0(vt0) VALUES('integrity-check');
REINDEX;
BEGIN DEFERRED TRANSACTION;
INSERT OR IGNORE INTO t1(c2, c3) VALUES (x'', NULL), (NULL, 0Xffffffffdda8fef2), ('w)', x'0080');
INSERT OR REPLACE INTO t1(c1, c0) VALUES (0.4768598418322937, 0.46026309011276667), (NULL, ''), ('^', '');
BEGIN IMMEDIATE TRANSACTION;
END TRANSACTION;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 7);
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '29441');
INSERT INTO vt0(vt0) VALUES('automerge=2');
INSERT INTO vt0(vt0) VALUES('rebuild');
CREATE INDEX i66 ON t1(json_insert((((c2, c0))!=((c0, c0))), c0, ((c0) BETWEEN (c3) AND (c1)), CAST(x'd3' AS NUMERIC)) COLLATE RTRIM,((((((((c3)OR(c2)))OR(c0)))AND(c3))) IS TRUE) COLLATE RTRIM,((c0) NOT BETWEEN ((('a') BETWEEN (c2) AND (c0))) AND ((((c3, c3, c0)) BETWEEN ((c2, x'35', c0)) AND ((c3, x'ef51', c1))))) ASC,'1328709370' DESC) WHERE ((((((((((((((NULL) IS FALSE))OR(CAST(c1 AS TEXT))))OR(((c1)OR(0.242077511698371)))))OR(c1 COLLATE BINARY)))OR(((c3)<('')))))AND((- (x'')))))AND(((c3)>(c0))));
CREATE INDEX IF NOT EXISTS i94 ON t1((c0 IN (HEX(c3))) COLLATE NOCASE ASC,json_remove(CAST(c0 AS NUMERIC), x'bbbc') ASC,CASE WHEN ((((c3)AND(c2)))AND(c1)) THEN c3 WHEN c0 THEN ((c0)<<(c2)) WHEN (+ (c2)) THEN LOWER(c0) ELSE (+ (c0)) END DESC,(((1.357026707E9, c2)) NOT BETWEEN ((x'edad60', (c0 IN ()))) AND ((CAST(x'46bf51d2e1' AS TEXT), ((c2) IS FALSE)))) DESC) WHERE CAST(((c1)&(c0)) AS REAL);
REINDEX;
ANALYZE temp;
REINDEX RTRIM;
INSERT OR IGNORE INTO t1(c2, c0) VALUES (x'ab2f', 0.9908012559274089);
INSERT INTO vt0(vt0) VALUES('automerge=0');
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 4);
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '56032');
INSERT INTO vt0(vt0) VALUES('integrity-check');
PRAGMA temp.journal_mode;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '23177');
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 967304387);
INSERT INTO vt0(vt0) VALUES('merge=-576127246,3');
;
INSERT INTO vt0(vt0) VALUES('optimize');
INSERT INTO vt0(vt0) VALUES('rebuild');
PRAGMA application_id;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2);
INSERT INTO vt0(vt0) VALUES('rebuild');
INSERT OR ROLLBACK INTO vt0 VALUES ('w)', NULL), ('', '-1054374321'), ('-_9ul7Pzr', NULL), ('y', x'');
INSERT OR IGNORE INTO t1(c0, c3, c1, c2) VALUES (0.45766865809517476, '1357026707', x'', 0.2782746084952842), ('-1054374321', 1.32870937E9, '-576127246', x'b6'), (0Xffffffffc127864f, '', 'a', 0Xffffffffdb1c68f2), (x'', x'', '', 1.357026707E9);
INSERT OR ABORT INTO vt0 VALUES ('', 2139530694);
INSERT OR IGNORE INTO t1(c0, c3) VALUES ('9+', 'qOb6'), (NULL, 0.5575343703322929);
VACUUM;
VACUUM main;
VACUUM main;
VACUUM;
VACUUM;
VACUUM;
VACUUM;
VACUUM main;
VACUUM temp;
ANALYZE;
ROLLBACK TRANSACTION;
PRAGMA wal_checkpoint(TRUNCATE);
PRAGMA main.secure_delete;
INSERT INTO vt0(vt0) VALUES('merge=-1361763210,11');
;
INSERT INTO vt0(vt0) VALUES('optimize');
ANALYZE;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0) VALUES('merge=1357026707,7');
;
INSERT OR ABORT INTO vt0(c0, c1) VALUES ('114852131', 0.08002706310712748), (0x42d262df, 'N⑶tL뙣5F\'), (NULL, '0.5445412819257869');
BEGIN EXCLUSIVE TRANSACTION;
INSERT INTO vt0(vt0, rank) VALUES('merge', -1025532310);
;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1157105020);
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 9);
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 13);
INSERT INTO vt0(vt0) VALUES('rebuild');
INSERT OR IGNORE INTO t1(c1, c0, c2, c3) VALUES ('-_9u.7Pzr', -773158433, 0.6952349321973157, x'f239'), ('Hy', 0.24147987980831687, NULL, '9H_BA?');
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 226687101);
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 11);
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 8);
INSERT INTO vt0(vt0, rank) VALUES('automerge', 13);
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0, rank) VALUES('merge', 1554513733);
;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0) VALUES('optimize');
REINDEX RTRIM;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0) VALUES('integrity-check');
PRAGMA shrink_memory;
REINDEX  vt0;
CREATE INDEX IF NOT EXISTS i40 ON t1(((CASE WHEN c0 THEN c3 WHEN c3 THEN c3 ELSE c0 END)AND((c2 IN (c2)))) COLLATE BINARY DESC,RTRIM((- (c1))) COLLATE BINARY,(((((c1, c3, c0))<=((c1, c0, c3))))>=(((-1.054374321E9)LIKE(c1)))) COLLATE BINARY,((c0 COLLATE BINARY)&(CAST(c3 AS INTEGER)))) WHERE c3;
BEGIN  TRANSACTION;
ANALYZE;
INSERT OR REPLACE INTO vt0(c0) VALUES (NULL), ('1089783809'), ('-1025532310'), ('?'), (x'');
ANALYZE;
INSERT OR IGNORE INTO vt0 VALUES ('F', x'bb');
ROLLBACK TRANSACTION;
INSERT OR IGNORE INTO t1(c3, c1) VALUES (x'', 0xfffffffffa395bf9);
INSERT INTO vt0(vt0) VALUES('optimize');
INSERT OR IGNORE INTO t1(c3, c1, c2) VALUES (0.5494385313037036, -9.6904199E7, ',EWcO');
REINDEX NOCASE;
ANALYZE i94;
INSERT OR REPLACE INTO t1(c3, c0, c2) VALUES (x'e9', 1328709370, NULL), (0.06992712286904945, '&lNakp', NULL), (x'1794', ((((x'fd9e26')OR(x'')))OR(0Xffffffffceb5d2fb)) COLLATE BINARY, x''), (1.357026707E9, NULL, 0.9293551133666357);
INSERT INTO vt0(vt0, rank) VALUES('automerge', 5);
INSERT INTO vt0(vt0) VALUES('rebuild');
END;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)');
INSERT INTO vt0(vt0) VALUES('automerge=0');
ROLLBACK TRANSACTION;
CREATE UNIQUE INDEX i85 ON t1(CAST(c0 AS INTEGER) COLLATE RTRIM,c3,((0X7989ff0c) IS TRUE) COLLATE NOCASE DESC,((((c1) NOT NULL)) IS TRUE));
INSERT INTO vt0(vt0) VALUES('optimize');
PRAGMA cache_size;
ANALYZE;
COMMIT TRANSACTION;
COMMIT;
ROLLBACK TRANSACTION;
-- SELECT * FROM vt0, t1 WHERE ((~ ((((t1.c3, vt0.c0))<((vt0.c1, vt0.c1))))));
-- cardinality: 4
-- SELECT ALL * FROM vt0, t1 WHERE ((~ ((((t1.c3, vt0.c0))<>((vt0.c1, vt0.c1))))));
-- cardinality: 11

--java.lang.AssertionError: the size of the result sets mismatch (0 and 3)!
---- SELECT * FROM t0 WHERE ((~ ((((t0.c1, t0.c1))>((NULL, t0.c0))))));
---- cardinality: 0
---- SELECT DISTINCT * FROM t0 WHERE ((~ ((((t0.c1, t0.c1))!=((NULL, t0.c0)))))) ORDER BY (NOT (CASE t0.c2  WHEN t0.c1 THEN t0.c2 WHEN t0.c2 THEN t0.c1 WHEN '932171410' THEN t0.c1 WHEN t0.c0 THEN t0.c0 END)), ((((((((t0.c0)AND(t0.c2)))AND(t0.c2)))AND(t0.c0))) NOT BETWEEN (((t0.c0) NOT BETWEEN (t0.c0) AND (t0.c1))) AND ((((t0.c1)) BETWEEN ((t0.c1)) AND ((t0.c0)))))  NULLS FIRST LIMIT 0x3;
---- cardinality: 3
--	at sqlancer.ComparatorHelper.assumeResultSetsAreSubset(ComparatorHelper.java:126)
--	at sqlancer.sqlite3.oracle.SQLite3SubsetOracle.checkSubsetQuery(SQLite3SubsetOracle.java:244)
--	at sqlancer.sqlite3.oracle.SQLite3SubsetOracle.check(SQLite3SubsetOracle.java:111)
--	at sqlancer.ProviderAdapter.generateAndTestDatabase(ProviderAdapter.java:49)
--	at sqlancer.Main$DBMSExecutor.run(Main.java:323)
--	at sqlancer.Main$2.run(Main.java:507)
--	at sqlancer.Main$2.runThread(Main.java:485)
--	at sqlancer.Main$2.run(Main.java:475)
--	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
--	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
--	at java.base/java.lang.Thread.run(Thread.java:831)
---- Time: 2021/05/21 16:40:19
-- Database: database4
-- Database version: 3.34.0
-- seed value: 1621586090158
PRAGMA cache_size = 50000;
PRAGMA temp_store=MEMORY;
PRAGMA synchronous=off;
PRAGMA case_sensitive_like=ON;
PRAGMA encoding = 'UTF-16';
CREATE TABLE t0 (c0 BLOB , c1 REAL , c2 BLOB );
INSERT OR IGNORE INTO t0 VALUES ('-708089866', '0j', NULL), ('-708089866', 0.6662245629804913, x''), ('Cy%{|ws', x'e65e', ''), (NULL, '*?Md', '[ZSKJ~?^');
END;
INSERT OR IGNORE INTO t0(c2, c0) VALUES ('-708089866', '-1127925229'), (0xffffffffd5cb67f6, NULL), (0.4515776184340161, '1154301341'), (0.1488174965255772, NULL);
UPDATE OR IGNORE t0 SET (c0)=(x'');
ROLLBACK TRANSACTION;
VACUUM main;
INSERT OR IGNORE INTO t0 VALUES ('434236708', x'', x'4b0052');
COMMIT TRANSACTION;
PRAGMA automatic_index = false;
INSERT OR IGNORE INTO t0(c0, c2, c1) VALUES (NULL, x'', 0Xffffffffdacfeccb) ON CONFLICT(c2, c0, c1) DO NOTHING;
INSERT OR ROLLBACK INTO t0(c2, c1) VALUES (-7.08089866E8, NULL), (NULL, x'');
INSERT OR IGNORE INTO t0 VALUES (1.154301341E9, x'', ')YL');
ANALYZE sqlite_master;
DELETE FROM sqlite_stat1;
BEGIN  TRANSACTION;
COMMIT TRANSACTION;
UPDATE t0 SET c1 = x'', c0 = NULL, c1 = '1154301341';
UPDATE t0 SET c2 = x'3c' WHERE t0.c2;
REINDEX  t0;
INSERT OR IGNORE INTO t0(c2) VALUES (NULL);
COMMIT TRANSACTION;
PRAGMA main.optimize;
COMMIT TRANSACTION;
UPDATE OR IGNORE t0 SET c2 = -1441146124, c1 = 0.21091696082691114, c1 = 'v}uVn' WHERE (((+ (t0.c1)))GLOB(((t0.c1)&(t0.c1))));
REINDEX;
CREATE TEMP VIEW  IF NOT EXISTS v0(c0) AS SELECT ALL CASE WHEN (+ (t0.c0)) THEN ((NULL)||(t0.c1)) WHEN ((t0.c0) ISNULL) THEN CAST(t0.c2 AS INTEGER) WHEN ((t0.c1) BETWEEN (t0.c0) AND (t0.c2)) THEN (((t0.c2, t0.c2, t0.c2, t0.c1)) BETWEEN ((t0.c0, t0.c2, t0.c0, t0.c1)) AND ((t0.c1, t0.c1, 0.1488174965255772, t0.c1))) ELSE (((t0.c2, t0.c2))=((t0.c2, t0.c1))) END FROM t0 WHERE (CASE WHEN ((((x'75')AND(0Xffffffffd4cde28c)))AND(x'9040')) THEN (NULL IN (x'')) WHEN (0X7ff33516 IN ('377594249')) THEN CASE WHEN 0X264e9050 THEN NULL WHEN NULL THEN NULL END WHEN (((')YL')) NOT BETWEEN (('')) AND ((x'7b'))) THEN ((0.36624654258546374)||(NULL)) END);
INSERT OR IGNORE INTO t0(c0, c2) VALUES (NULL, x''), (2.14664527E9, -7.08089866E8), ('434236708', x'f277');
END TRANSACTION;
INSERT OR IGNORE INTO t0(c1) VALUES (0.5107673226622762), (NULL);
INSERT OR IGNORE INTO t0(c2, c1) VALUES (x'3e', x'63'), ('', x'a0'), (x'6c', '');
ROLLBACK TRANSACTION;
UPDATE OR ABORT t0 SET (c2, c1, c2)=(NULL, 0.471636695860277, NULL) WHERE (((NOT (t0.c2)))+(t0.c2 COLLATE NOCASE));
INSERT OR ABORT INTO t0(c2) VALUES (-1127925229);
INSERT OR ABORT INTO t0(c2, c1, c0) VALUES (NULL, 0.062191895747425674, x'17e1'), (-2119173932, '-1630837328', x'c1f7d2d548');
COMMIT;
INSERT OR IGNORE INTO t0(c0) VALUES (0xffffffffc4b8ebb0), (0.5107673226622762);
INSERT OR FAIL INTO t0(c2, c1) VALUES ('*㳂', x'');
COMMIT TRANSACTION;
BEGIN  TRANSACTION;
UPDATE OR IGNORE t0 SET (c2)=(NULL);
INSERT OR IGNORE INTO t0(c0) VALUES (x'');
UPDATE OR IGNORE t0 SET c0 = NULL, c2 = '-994514000';
ROLLBACK TRANSACTION;
ROLLBACK TRANSACTION;
REINDEX;
BEGIN  TRANSACTION;
UPDATE OR IGNORE t0 SET (c2, c0)=(-26733166, NULL) WHERE ((CASE WHEN t0.c2 THEN t0.c1 WHEN t0.c1 THEN t0.c1 END) IS FALSE);
UPDATE t0 SET (c0)=(NULL) WHERE ((NULL COLLATE RTRIM) NOT BETWEEN (((((((((t0.c2)OR(t0.c2)))OR(t0.c0)))OR(-1334791809)))AND(t0.c1))) AND (t0.c0));
UPDATE OR IGNORE t0 SET (c1, c2)=(x'ae', 'L');
REINDEX  t0;
UPDATE OR IGNORE t0 SET c2 = 0xbe87cff, c2 = '-994514000';
INSERT OR ROLLBACK INTO t0(c0, c1) VALUES ('-630128840', 115620958);
INSERT OR IGNORE INTO t0(c1, c2) VALUES ('*?Md', 0.5107673226622762), ('E', '[]');
PRAGMA main.soft_heap_limit = 8162232346237343003;
UPDATE OR IGNORE t0 SET (c0)=(1311423549) WHERE (((t0.c0, t0.c1)) NOT BETWEEN ((((t0.c0)LIKE(t0.c2)), ((t0.c2)||(t0.c1)))) AND ((ABS(DISTINCT t0.c1), ((t0.c2) NOTNULL))));
INSERT OR FAIL INTO t0 VALUES (0.36624654258546374, -1.334791809E9, x'2d');
ROLLBACK TRANSACTION;
INSERT OR IGNORE INTO t0(c0, c2) VALUES (-155909782, NULL);
UPDATE OR IGNORE t0 SET (c2, c0, c0)=(0X729d81a1, 0.062191895747425674, '魼}zP]R') WHERE ((((t0.c2)AND(t0.c1)))AND(((t0.c2)<=(x''))));
COMMIT TRANSACTION;
ROLLBACK TRANSACTION;
-- SELECT * FROM t0 WHERE ((~ ((((t0.c1, t0.c1))>((NULL, t0.c0))))));
-- cardinality: 0
-- SELECT DISTINCT * FROM t0 WHERE ((~ ((((t0.c1, t0.c1))!=((NULL, t0.c0)))))) ORDER BY (NOT (CASE t0.c2  WHEN t0.c1 THEN t0.c2 WHEN t0.c2 THEN t0.c1 WHEN '932171410' THEN t0.c1 WHEN t0.c0 THEN t0.c0 END)), ((((((((t0.c0)AND(t0.c2)))AND(t0.c2)))AND(t0.c0))) NOT BETWEEN (((t0.c0) NOT BETWEEN (t0.c0) AND (t0.c1))) AND ((((t0.c1)) BETWEEN ((t0.c1)) AND ((t0.c0)))))  NULLS FIRST LIMIT 0x3;
-- cardinality: 3

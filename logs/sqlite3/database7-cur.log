-- Time: 2021/05/19 01:09:32
-- Database: database7
-- Database version: 3.34.0
-- seed value: 1621357771651
PRAGMA cache_size = 50000; -- 0ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
PRAGMA encoding = 'UTF-16le'; -- 1ms;
CREATE VIRTUAL TABLE vt0 USING fts4(c0, c1, c2); -- 1ms;
REINDEX; -- 1ms;
END TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt0(c2) VALUES ('-1967540600'); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1172413877); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 8); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2); -- 0ms;
INSERT INTO vt0(vt0) VALUES('automerge=4'); -- 1ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
ANALYZE main; -- 1ms;
INSERT OR IGNORE INTO vt0(c0) VALUES (x''), (NULL); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '45940'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
PRAGMA temp.cache_spill = false; -- 0ms;
PRAGMA main.stats; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', 2140979552);
; -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1300144971); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
INSERT OR ROLLBACK INTO vt0(c2, c0, c1) VALUES (NULL, '', x'339f'), (NULL, '1329406373', -2089230563); -- 1ms;
INSERT OR ROLLBACK INTO vt0(c2, c0) VALUES (0.7680747728768222, '-1967540600'), (NULL, 0.2972661114812368), ('閻}5	4D', NULL); -- 1ms;
ANALYZE; -- 1ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT OR REPLACE INTO vt0(c1, c0, c2) VALUES (x'', '2140979552', x''); -- 1ms;
INSERT OR ROLLBACK INTO vt0(c2, c1, c0) VALUES (NULL, '', -1967540600); -- 1ms;
PRAGMA temp.auto_vacuum = NONE; -- 0ms;
INSERT OR IGNORE INTO vt0(c1, c0) VALUES (0Xffffffff83d3bf08, x'03'), (NULL, 0.8921289453853108), (0.5639060842173054, 0x613fc026); -- 0ms;
INSERT OR ABORT INTO vt0(c2, c1) VALUES (0.30094832946631667, 0Xffffffff8378df1d), ('HS', 0.7680747728768222); -- 1ms;
REINDEX  vt0; -- 0ms;
PRAGMA default_cache_size = -1513578280; -- 1ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1694856133); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
INSERT OR FAIL INTO vt0(c1, c0) VALUES ('-1239890065', '-1210018373'), (NULL, NULL), (x'47d3324e', 'heଟQ億Gu]'); -- 0ms;
COMMIT; -- 0ms;
COMMIT; -- 1ms;
INSERT OR ABORT INTO vt0(c1, c0) VALUES ('-935251765', x''); -- 1ms;
UPDATE vt0 SET c1 = x'', c0 = '-805618941' WHERE (((CAST(vt0.c1 AS INTEGER), ((((((((((vt0.c0)OR(vt0.c2)))AND(vt0.c1)))OR('-2083275000')))AND(vt0.c0)))OR(vt0.c1))))==((((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)), CAST(vt0.c1 AS BLOB)))); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 805705895); -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 1ms;
INSERT OR ABORT INTO vt0 VALUES (NULL, -662124599, NULL); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '61231'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 1ms;
ANALYZE main; -- 1ms;
INSERT OR FAIL INTO vt0(c2, c0) VALUES ('Vaわ꓀yሎV', x''); -- 1ms;
REINDEX; -- 1ms;
ROLLBACK TRANSACTION; -- 1ms;
PRAGMA reverse_unordered_selects; -- 0ms;
INSERT OR ROLLBACK INTO vt0(c1) VALUES ('438110496'); -- 1ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 1ms;
INSERT OR FAIL INTO vt0(c2, c0) VALUES (0.8921289453853108, 617402341), ('aPR', '-114564719'); -- 1ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
PRAGMA temp.incremental_vacuum; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('automerge=12'); -- 1ms;
PRAGMA ignore_check_constraints = false; -- 0ms;
VACUUM temp; -- 0ms;
INSERT OR IGNORE INTO vt0(c2) VALUES (NULL); -- 0ms;
INSERT OR IGNORE INTO vt0(c1, c2, c0) VALUES ('-1239890065', NULL, x''); -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt0 SET c1 = 0.026677829472838477, c2 = 0xffffffff83f170e7 WHERE ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)))<>(0.08455677317875987)); -- 0ms;
INSERT OR IGNORE INTO vt0(c2) VALUES ('-639748023'), (0.8921289453853108), ('917511139'), ('0.08455677317875987'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 10); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
UPDATE OR IGNORE vt0 SET c0 = '-1967540600', c2 = '-1383487729'; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 10); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '8307'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', 1253537794);
; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1252555031); -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 1ms;
UPDATE OR FAIL vt0 SET c2 = 0.22898423394128609 WHERE ((CAST(vt0.c2 AS REAL))||(((vt0.c2) ISNULL))); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 648655195); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1767791401); -- 0ms;
INSERT INTO vt0(vt0) VALUES('merge=1993734216,15');
; -- 0ms;
UPDATE OR FAIL vt0 SET c1 = NULL WHERE vt0.c1; -- 0ms;
END TRANSACTION; -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '25641'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 7); -- 1ms;
INSERT INTO vt0(vt0) VALUES('automerge=1'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '17831'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 3); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '34730'); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '24737'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
PRAGMA shrink_memory; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt0(c2, c1) VALUES (x'', -1.396787381E9), ('-2089230563', NULL), (NULL, '1349972028'), (1.993734216E9, NULL); -- 1ms;
REINDEX; -- 0ms;
INSERT OR REPLACE INTO vt0(c2) VALUES ('-353614591'), ('-1383487729'), ('w*DuZꦯ2R'); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt0(c1, c0, c2) VALUES ('Vaわ꓀yሎV', 0.12017461669268459, x'58525079f7'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('automerge=6'); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR ROLLBACK INTO vt0(c2, c1, c0) VALUES (x'', x'', 'A'), (NULL, x'11', ''); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 959837130); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 15); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 1ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 1ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
INSERT OR ABORT INTO vt0 VALUES (-1922456384, x'', NULL), (-8.95481057E8, NULL, x''); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
COMMIT TRANSACTION; -- 0ms;
PRAGMA main.ignore_check_constraints = false; -- 1ms;
REINDEX; -- 0ms;
PRAGMA journal_mode = MEMORY; -- 0ms;
END; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 11); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 13); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1301619251); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', 653599662);
; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 3); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 13); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1526743299); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT OR ABORT INTO vt0(c0) VALUES ('z'), ('21801391'); -- 0ms;
INSERT OR REPLACE INTO vt0(c2, c0, c1) VALUES ('-1289337866', 0.6818725949059139, 1329406373); -- 0ms;
INSERT INTO vt0(vt0) VALUES('automerge=1'); -- 0ms;
COMMIT TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY ((vt0.c2 IN (vt0.c2, vt0.c0)) IN ())  NULLS FIRST, (~ ((((vt0.c1)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c2)))));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY ((x'') NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND (((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c2)))) DESC  NULLS LAST, CASE WHEN ((vt0.c0)OR(-1922456384)) THEN ((vt0.c0) NOTNULL) ELSE vt0.c0 COLLATE RTRIM END DESC  NULLS LAST, CAST((~ (vt0.c2)) AS BLOB)  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (0.567095513064274) ORDER BY (((0.1775453689608517))>=((((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)<<((vt0.c1 IN (vt0.c0)))) ASC  NULLS LAST, vt0.c0;
SELECT COUNT(*) FROM vt0 NOT INDEXED WHERE (((0.567095513064274)AND(((((((vt0.c2)AND(vt0.c2)))AND(vt0.c1)))OR(((vt0.c0)<<(vt0.c1))))))) ORDER BY ((NULL)GLOB(CAST(vt0.c1 AS TEXT))) DESC INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((+ (vt0.c1 COLLATE RTRIM))) ORDER BY ((NULL)GLOB(CAST(vt0.c1 AS TEXT))) DESC;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c0)||(vt0.c0)) IN ()));
SELECT MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c0)||(vt0.c0)) IN ())) ORDER BY (vt0.c1 IN ()) DESC  NULLS LAST, '-114564719', vt0.c0;
SELECT ALL COUNT(*) FROM vt0 WHERE (CAST(((vt0.c0)-(vt0.c0)) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST(((vt0.c0)-(vt0.c0)) AS NUMERIC))AND((((x'e6', vt0.c1)) NOT BETWEEN ((((vt0.c2)/(vt0.c0)), ((('0'))<>((vt0.c2))))) AND ((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c0)), vt0.c1 COLLATE RTRIM)))))) LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (HEX(((vt0.c1)GLOB(vt0.c0)))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((NOT ((NOT (vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((NOT ((NOT (vt0.c2)))))AND(((vt0.c2)IS(vt0.c0)) COLLATE RTRIM))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((NOT ((NOT (vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((NOT ((NOT (vt0.c2)))))AND(((vt0.c2)IS(vt0.c0)) COLLATE RTRIM))) LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (((((0Xffffffffcaa00b1f) NOTNULL))>(((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)))OR(vt0.c0)))));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((0xffffffffcaa00b1f) NOTNULL))>(((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)))OR(vt0.c0)))))AND(LENGTH(((vt0.c1)|(vt0.c2)))))) ORDER BY CAST((- (vt0.c2)) AS TEXT) ASC, (- (((vt0.c2)OR(vt0.c1)))) LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt0 WHERE (((vt0.c1)AND(vt0.c0))) ORDER BY CAST((- (vt0.c2)) AS TEXT) ASC, (- (((vt0.c2)OR(vt0.c1)))) LIMIT 0;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))AND(vt0.c1)))AND((vt0.c0 IN ()))))AND(((vt0.c0) NOTNULL))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((((((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))AND(vt0.c1)))AND((vt0.c0 IN ()))))AND(((vt0.c0) NOTNULL))))AND((((((((('-935251765')+(vt0.c0)))OR((vt0.c0 IN (vt0.c0)))))AND(CAST(vt0.c1 AS REAL))))AND(((vt0.c0) IS FALSE))))));
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY ((((vt0.c0)AND(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END)))OR(((vt0.c2)>=(vt0.c2)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2)AND(vt0.c2))) ORDER BY ((((vt0.c0)AND(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END)))OR(((vt0.c2)>=(vt0.c2)))) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY ((((vt0.c0)AND(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END)))OR(((vt0.c2)>=(vt0.c2)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2)AND(vt0.c2))) ORDER BY ((((vt0.c0)AND(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END)))OR(((vt0.c2)>=(vt0.c2)))) DESC  NULLS FIRST;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((LIKELY(vt0.c0))==(CAST(vt0.c0 AS BLOB)))) ORDER BY ((vt0.c1)IS(vt0.c2)) COLLATE NOCASE ASC;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((((LIKELY(vt0.c0))=(CAST(vt0.c0 AS BLOB))))AND((((((vt0.c1)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))>=(((0.9653939396665848)!=(vt0.c2))))))) ORDER BY ((vt0.c1)IS(vt0.c2)) COLLATE NOCASE ASC;
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c0, CASE WHEN vt0.c0 THEN 's>l' END))<((((vt0.c0)&(NULL)), vt0.c0 COLLATE RTRIM)))) ORDER BY CAST('0.567095513064274' AS INTEGER);
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c0, CASE WHEN vt0.c0 THEN 's>l' END))<((((vt0.c0)&(NULL)), vt0.c0 COLLATE RTRIM)))) ORDER BY ((LOWER(vt0.c0))||(((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)))) DESC  NULLS FIRST, CASE WHEN ((vt0.c1)&(480946256)) THEN (vt0.c2 IN (vt0.c2)) WHEN (x'' IN (vt0.c0)) THEN vt0.c1 COLLATE NOCASE WHEN vt0.c2 THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)) WHEN CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 WHEN '-81538456' THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END THEN vt0.c0 ELSE CAST(vt0.c2 AS NUMERIC) END;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c1 AS BLOB)) NOT BETWEEN (vt0.c1) AND (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((CAST(vt0.c1 AS BLOB)) NOT BETWEEN (vt0.c1) AND (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)))))AND(CASE WHEN (('-1820249969') IS FALSE) THEN ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2)) ELSE '/2' END))) ORDER BY '-1536972838' LIMIT 0X2;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c1)LIKE(vt0.c1))) ISNULL) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c1)LIKE(vt0.c1))) ISNULL) DESC  NULLS LAST;
SELECT MAX(vt0.c1) FROM vt0 NOT INDEXED WHERE (((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c0))) ISNULL));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c0))) ISNULL))AND(CAST(vt0.c1 AS REAL) COLLATE RTRIM))) LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (NULL) LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c0)GLOB(vt0.c0)) IN ()));
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((vt0.c0)GLOB(vt0.c0)) IN ()))AND(CAST(((((vt0.c2)OR(vt0.c0)))AND(vt0.c2)) AS INTEGER)))) INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (TRIM(DISTINCT vt0.c2, (((vt0.c2, vt0.c0)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c0)))));
SELECT ALL * FROM vt0 WHERE (((CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 ELSE '-1880625023' END)||(0.8921289453853108))) ORDER BY CAST(((((vt0.c2)OR(vt0.c1)))AND(vt0.c2)) AS REAL), ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) COLLATE NOCASE;
SELECT * FROM vt0 WHERE (((((CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 ELSE '-1880625023' END)||(0.8921289453853108)))AND(CASE WHEN ((vt0.c1) IS FALSE) THEN (NOT (vt0.c2)) ELSE (NOT (vt0.c1)) END))) ORDER BY CAST(((((vt0.c2)OR(vt0.c1)))AND(vt0.c2)) AS REAL), ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) COLLATE NOCASE LIMIT 0X3;
SELECT ALL * FROM vt0 WHERE (((CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 ELSE '-1880625023' END)||(0.8921289453853108))) ORDER BY CAST(((((vt0.c2)OR(vt0.c1)))AND(vt0.c2)) AS REAL), ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) COLLATE NOCASE;
SELECT * FROM vt0 WHERE (((((CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 ELSE '-1880625023' END)||(0.8921289453853108)))AND(CASE WHEN ((vt0.c1) IS FALSE) THEN (NOT (vt0.c2)) ELSE (NOT (vt0.c1)) END))) ORDER BY CAST(((((vt0.c2)OR(vt0.c1)))AND(vt0.c2)) AS REAL), ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) COLLATE NOCASE LIMIT 0X3;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((vt0.c0)AND((((((vt0.c1)|(vt0.c1))))=(((vt0.c2 IN (vt0.c1, vt0.c2)))))))) LIMIT 0;
SELECT MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c0)IS(vt0.c0)))AND(((vt0.c1)GLOB(vt0.c0)))));
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c0)IS(vt0.c0)))AND(((vt0.c1)GLOB(vt0.c0))))) ORDER BY ((((vt0.c1)>(vt0.c1))) BETWEEN ((((vt0.c2))>((vt0.c0)))) AND ('-895481057')) DESC  NULLS FIRST, ((TYPEOF(DISTINCT vt0.c1)) NOT NULL) DESC, (((vt0.c2 IN (vt0.c0))) ISNULL) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2))) IS FALSE)) ORDER BY vt0.c0 DESC  NULLS FIRST, (((vt0.c1 IN (vt0.c2, vt0.c0)))>=(((vt0.c1) NOT NULL)))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2))) IS FALSE))AND(0.6393047758352024))) ORDER BY vt0.c0 DESC  NULLS FIRST, (((vt0.c1 IN (vt0.c2, vt0.c0)))>=(((vt0.c1) NOT NULL)))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2))) IS FALSE)) ORDER BY vt0.c0 DESC  NULLS FIRST, (((vt0.c1 IN (vt0.c2, vt0.c0)))>=(((vt0.c1) NOT NULL)))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2))) IS FALSE))AND(0.6393047758352024))) ORDER BY vt0.c0 DESC  NULLS FIRST, (((vt0.c1 IN (vt0.c2, vt0.c0)))>=(((vt0.c1) NOT NULL)))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((-8.95481057E8 IN ('')));
SELECT * FROM vt0 NOT INDEXED WHERE ((-8.95481057E8 IN (''))) ORDER BY (((vt0.c2 IN ()))LIKE(CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST, ((((((vt0.c2)AND(vt0.c1)))OR(vt0.c2)))IS NOT(CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END)) ASC LIMIT 0X0 INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c0) NOT NULL) IN (((vt0.c0)<=(vt0.c0)), (+ (vt0.c2))))) ORDER BY (((vt0.c2 IN ()))LIKE(CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST, ((((((vt0.c2)AND(vt0.c1)))OR(vt0.c2)))IS NOT(CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END)) ASC LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE ((-8.95481057E8 IN ('')));
SELECT * FROM vt0 NOT INDEXED WHERE ((-8.95481057E8 IN (''))) ORDER BY (((vt0.c2 IN ()))LIKE(CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST, ((((((vt0.c2)AND(vt0.c1)))OR(vt0.c2)))IS NOT(CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END)) ASC LIMIT 0X0 INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c0) NOT NULL) IN (((vt0.c0)<=(vt0.c0)), (+ (vt0.c2))))) ORDER BY (((vt0.c2 IN ()))LIKE(CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST, ((((((vt0.c2)AND(vt0.c1)))OR(vt0.c2)))IS NOT(CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END)) ASC LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (CAST(NULL COLLATE NOCASE AS INTEGER)) ORDER BY ((vt0.c0)IS(vt0.c0)) COLLATE BINARY ASC, NULL DESC;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(NULL COLLATE NOCASE AS INTEGER))AND(vt0.c2))) ORDER BY ((vt0.c0)IS(vt0.c0)) COLLATE BINARY ASC, NULL DESC;
SELECT ALL * FROM vt0 WHERE (CAST(NULL COLLATE NOCASE AS INTEGER)) ORDER BY ((vt0.c0)IS(vt0.c0)) COLLATE BINARY ASC, NULL DESC;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(NULL COLLATE NOCASE AS INTEGER))AND(vt0.c2))) ORDER BY ((vt0.c0)IS(vt0.c0)) COLLATE BINARY ASC, NULL DESC;
SELECT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c2)<<(vt0.c2)) IN ())) ORDER BY (((vt0.c2) NOT BETWEEN (vt0.c1) AND ('0.6393047758352024')) IN ('s>l' COLLATE RTRIM)) ASC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c2)<<(vt0.c2)) IN ())) ORDER BY (((vt0.c2) NOT BETWEEN (vt0.c1) AND ('0.6393047758352024')) IN ('s>l' COLLATE RTRIM)) ASC;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (IFNULL(NULL, CAST(vt0.c2 AS NUMERIC)));
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((IFNULL(NULL, CAST(vt0.c2 AS NUMERIC)))AND((HEX(vt0.c0) IN (vt0.c2)))));
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY CASE WHEN ((vt0.c2) IS TRUE) THEN vt0.c1 COLLATE BINARY WHEN (~ ('1617089569')) THEN CHAR(vt0.c1) END  NULLS FIRST, (((((vt0.c2 IN ()))AND((NOT (vt0.c1)))))AND(LOWER(vt0.c2))) ASC  NULLS LAST, (((vt0.c1 IN ())) ISNULL) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2)AND(CAST(json_quote(vt0.c1) AS REAL)))) ORDER BY CASE WHEN ((vt0.c2) IS TRUE) THEN vt0.c1 COLLATE BINARY WHEN (~ ('1617089569')) THEN CHAR(vt0.c1) END  NULLS FIRST, (((((vt0.c2 IN ()))AND((NOT (vt0.c1)))))AND(LOWER(vt0.c2))) ASC  NULLS LAST, (((vt0.c1 IN ())) ISNULL) DESC;
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY CASE WHEN ((vt0.c2) IS TRUE) THEN vt0.c1 COLLATE BINARY WHEN (~ ('1617089569')) THEN CHAR(vt0.c1) END  NULLS FIRST, (((((vt0.c2 IN ()))AND((NOT (vt0.c1)))))AND(LOWER(vt0.c2))) ASC  NULLS LAST, (((vt0.c1 IN ())) ISNULL) DESC;
SELECT * FROM vt0 WHERE (json_valid(vt0.c0 COLLATE NOCASE));
SELECT DISTINCT * FROM vt0 WHERE (((json_valid(vt0.c0 COLLATE NOCASE))AND((~ ((vt0.c0 IN (vt0.c0, vt0.c2))))))) ORDER BY (- ('.N.TX|z騤\')) ASC  NULLS LAST, ((CASE WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END) IS FALSE) ASC LIMIT 0;
SELECT * FROM vt0 WHERE (json_valid(vt0.c0 COLLATE NOCASE));
SELECT DISTINCT * FROM vt0 WHERE (((json_valid(vt0.c0 COLLATE NOCASE))AND((~ ((vt0.c0 IN (vt0.c0, vt0.c2))))))) ORDER BY (- ('.N.TX|z騤\')) ASC  NULLS LAST, ((CASE WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END) IS FALSE) ASC LIMIT 0;
SELECT MIN(vt0.c1) FROM vt0 WHERE (vt0.c1);
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((vt0.c1)AND(((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) COLLATE BINARY))) LIMIT 0X0;
SELECT * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))IS NOT(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c2 END))) ORDER BY (((+ (vt0.c2)))IS((((vt0.c0)) BETWEEN ((vt0.c2)) AND ((vt0.c0))))) DESC;
SELECT * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))IS NOT(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c2 END))) ORDER BY (((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c0))))>((CAST(vt0.c2 AS REAL)))) DESC  NULLS FIRST, (CAST(vt0.c0 AS INTEGER) IN ())  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (CASE (((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))  WHEN vt0.c1 COLLATE RTRIM THEN ((x'') NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN CAST(vt0.c2 AS REAL) THEN (((vt0.c1, vt0.c0, vt0.c0))>=((vt0.c1, vt0.c0, vt0.c2))) END) ORDER BY (((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c0))))>((CAST(vt0.c2 AS REAL)))) DESC  NULLS FIRST, (CAST(vt0.c0 AS INTEGER) IN ())  NULLS LAST;
SELECT * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))IS NOT(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c2 END))) ORDER BY (((+ (vt0.c2)))IS((((vt0.c0)) BETWEEN ((vt0.c2)) AND ((vt0.c0))))) DESC;
SELECT * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))IS NOT(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c2 END))) ORDER BY (((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c0))))>((CAST(vt0.c2 AS REAL)))) DESC  NULLS FIRST, (CAST(vt0.c0 AS INTEGER) IN ())  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (CASE (((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))  WHEN vt0.c1 COLLATE RTRIM THEN ((x'') NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN CAST(vt0.c2 AS REAL) THEN (((vt0.c1, vt0.c0, vt0.c0))>=((vt0.c1, vt0.c0, vt0.c2))) END) ORDER BY (((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c0))))>((CAST(vt0.c2 AS REAL)))) DESC  NULLS FIRST, (CAST(vt0.c0 AS INTEGER) IN ())  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c0) ISNULL) IN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)), x'42ba')));
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((vt0.c0) ISNULL) IN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)), x'42ba')))AND(x''))) ORDER BY ((CASE WHEN vt0.c0 THEN vt0.c1 WHEN 'N' THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 END)LIKE(CAST('Vaわ꓀yሎV' AS INTEGER))) ASC, (((vt0.c2) IS FALSE) IN (((vt0.c2) IS FALSE))) LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt0 WHERE (CASE '-895481057'  WHEN ((vt0.c1)>(vt0.c2)) THEN ((vt0.c1) NOT BETWEEN (vt0.c0) AND (NULL)) ELSE ((NULL) BETWEEN (vt0.c1) AND (vt0.c0)) END) ORDER BY ((CASE WHEN vt0.c0 THEN vt0.c1 WHEN 'N' THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 END)LIKE(CAST('Vaわ꓀yሎV' AS INTEGER))) ASC, (((vt0.c2) IS FALSE) IN (((vt0.c2) IS FALSE))) LIMIT 0X0;
SELECT * FROM vt0 WHERE (((vt0.c0)==(0Xffffffffa91046f5)) COLLATE RTRIM) ORDER BY CAST(((vt0.c0) ISNULL) AS NUMERIC)  NULLS LAST, (((('?A')&(vt0.c2))) BETWEEN (((((((vt0.c1)OR(vt0.c1)))AND(vt0.c1)))AND('-935251765'))) AND (((0.8241269695323763)*(vt0.c0)))), (CASE x'54f5bb'  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END IN (CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN x'c5ad84fd' ELSE vt0.c2 END));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)==(-1458551051)) COLLATE RTRIM)AND((((((vt0.c2)OR(vt0.c0)))AND(vt0.c0)) IN (vt0.c1 COLLATE RTRIM, ((((vt0.c2)AND(vt0.c0)))OR(vt0.c2))))))) ORDER BY -2032011166 ASC LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)AND(vt0.c1)))OR(vt0.c2))) BETWEEN (((vt0.c2)LIKE(vt0.c2))) AND (json_array_length(vt0.c1, vt0.c1)))) ORDER BY 0Xffffffff86e1f862 ASC LIMIT 0X1;
SELECT * FROM vt0 WHERE (((vt0.c0)==(0Xffffffffa91046f5)) COLLATE RTRIM) ORDER BY CAST(((vt0.c0) ISNULL) AS NUMERIC)  NULLS LAST, (((('?A')&(vt0.c2))) BETWEEN (((((((vt0.c1)OR(vt0.c1)))AND(vt0.c1)))AND('-935251765'))) AND (((0.8241269695323763)*(vt0.c0)))), (CASE x'54f5bb'  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END IN (CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN x'c5ad84fd' ELSE vt0.c2 END));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)==(-1458551051)) COLLATE RTRIM)AND((((((vt0.c2)OR(vt0.c0)))AND(vt0.c0)) IN (vt0.c1 COLLATE RTRIM, ((((vt0.c2)AND(vt0.c0)))OR(vt0.c2))))))) ORDER BY -2032011166 ASC LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)AND(vt0.c1)))OR(vt0.c2))) BETWEEN (((vt0.c2)LIKE(vt0.c2))) AND (json_array_length(vt0.c1, vt0.c1)))) ORDER BY 0Xffffffff86e1f862 ASC LIMIT 0X1;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((x'38'))=((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))) ORDER BY CAST(CAST(vt0.c2 AS TEXT) AS NUMERIC) ASC;
SELECT MIN(vt0.c2) FROM vt0 WHERE ((((((x'38'))==((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0))))))AND(CAST(CAST(0.42393097764992516 AS INTEGER) AS NUMERIC)))) ORDER BY CAST(CAST(vt0.c2 AS TEXT) AS NUMERIC) ASC LIMIT 1 INTERSECT SELECT MIN(vt0.c2) FROM vt0 NOT INDEXED WHERE ((((0.5410454381210258, vt0.c2)) NOT BETWEEN (((vt0.c0 IN ()), (vt0.c2 IN ()))) AND (((vt0.c0 IN (vt0.c2)), (((vt0.c0, vt0.c2))>=((vt0.c2, vt0.c1))))))) ORDER BY CAST(CAST(vt0.c2 AS TEXT) AS NUMERIC) ASC LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((((((CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END)AND(vt0.c2)))AND(((vt0.c2)>=(vt0.c2)))))OR(vt0.c2 COLLATE RTRIM))) ORDER BY (vt0.c1 COLLATE NOCASE IN ())  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((((CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END)AND(vt0.c2)))AND(((vt0.c2)==(vt0.c2)))))OR(vt0.c2 COLLATE RTRIM))) ORDER BY (vt0.c1 COLLATE NOCASE IN ())  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((((((CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END)AND(vt0.c2)))AND(((vt0.c2)>=(vt0.c2)))))OR(vt0.c2 COLLATE RTRIM))) ORDER BY (vt0.c1 COLLATE NOCASE IN ())  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (NULL);
SELECT ALL COUNT(*) FROM vt0 WHERE (((NULL)AND(((((((SQLITE_SOURCE_ID())OR((((vt0.c2, vt0.c2)) BETWEEN ((x'60', vt0.c1)) AND ((vt0.c0, vt0.c1))))))OR(((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))))OR(vt0.c2 COLLATE NOCASE))))) LIMIT 0X0;
SELECT * FROM vt0 WHERE (((x'')-(NULL))) ORDER BY vt0.c2 ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((x'')-(NULL)))AND(((vt0.c1 COLLATE BINARY)<<(((((vt0.c2)OR(vt0.c2)))AND(vt0.c1))))))) ORDER BY CASE ((vt0.c2) IS TRUE)  WHEN '-1278163370' THEN vt0.c0 COLLATE BINARY WHEN (- (vt0.c2)) THEN ((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)) ELSE CAST(vt0.c2 AS NUMERIC) END  NULLS FIRST, (((((((+ (vt0.c1)))AND(LTRIM(vt0.c2))))AND(CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END)))AND(((vt0.c2)>=(vt0.c0)))) ASC, (((vt0.c0)) NOT BETWEEN (((((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) AND ((0.4657703713196094))) INTERSECT SELECT * FROM vt0 WHERE (CAST(((((vt0.c0)OR(vt0.c2)))OR(vt0.c2)) AS INTEGER)) ORDER BY CASE ((vt0.c2) IS TRUE)  WHEN '-1278163370' THEN vt0.c0 COLLATE BINARY WHEN (- (vt0.c2)) THEN ((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)) ELSE CAST(vt0.c2 AS NUMERIC) END  NULLS FIRST, (((((((+ (vt0.c1)))AND(LTRIM(vt0.c2))))AND(CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END)))AND(((vt0.c2)>=(vt0.c0)))) ASC, (((vt0.c0)) NOT BETWEEN (((((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) AND ((0.4657703713196094)));
SELECT * FROM vt0 WHERE (((x'')-(NULL))) ORDER BY vt0.c2 ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((x'')-(NULL)))AND(((vt0.c1 COLLATE BINARY)<<(((((vt0.c2)OR(vt0.c2)))AND(vt0.c1))))))) ORDER BY CASE ((vt0.c2) IS TRUE)  WHEN '-1278163370' THEN vt0.c0 COLLATE BINARY WHEN (- (vt0.c2)) THEN ((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)) ELSE CAST(vt0.c2 AS NUMERIC) END  NULLS FIRST, (((((((+ (vt0.c1)))AND(LTRIM(vt0.c2))))AND(CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END)))AND(((vt0.c2)>=(vt0.c0)))) ASC, (((vt0.c0)) NOT BETWEEN (((((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) AND ((0.4657703713196094))) INTERSECT SELECT * FROM vt0 WHERE (CAST(((((vt0.c0)OR(vt0.c2)))OR(vt0.c2)) AS INTEGER)) ORDER BY CASE ((vt0.c2) IS TRUE)  WHEN '-1278163370' THEN vt0.c0 COLLATE BINARY WHEN (- (vt0.c2)) THEN ((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)) ELSE CAST(vt0.c2 AS NUMERIC) END  NULLS FIRST, (((((((+ (vt0.c1)))AND(LTRIM(vt0.c2))))AND(CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END)))AND(((vt0.c2)>=(vt0.c0)))) ASC, (((vt0.c0)) NOT BETWEEN (((((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) AND ((0.4657703713196094)));
SELECT ALL * FROM vt0 WHERE ((~ (CASE vt0.c1  WHEN '-1477752068' THEN vt0.c0 WHEN vt0.c0 THEN x'9e3cca' END))) ORDER BY (LAST_INSERT_ROWID() IN ()) DESC;
SELECT * FROM vt0 WHERE ((((~ (CASE vt0.c1  WHEN '-1477752068' THEN vt0.c0 WHEN vt0.c0 THEN x'9e3cca' END)))AND((- (CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END))))) ORDER BY vt0.c1  NULLS LAST, ((((CAST(vt0.c0 AS INTEGER))AND(vt0.c2)))OR((vt0.c2 IN (vt0.c1))));
SELECT ALL * FROM vt0 WHERE ((~ (CASE vt0.c1  WHEN '-1477752068' THEN vt0.c0 WHEN vt0.c0 THEN x'9e3cca' END))) ORDER BY (LAST_INSERT_ROWID() IN ()) DESC;
SELECT ALL * FROM vt0 WHERE (vt0.c1 COLLATE RTRIM);
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1 COLLATE RTRIM) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ('X');
SELECT ALL * FROM vt0 WHERE (vt0.c1 COLLATE RTRIM);
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1 COLLATE RTRIM) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ('X');
SELECT ALL * FROM vt0 WHERE (vt0.c0) ORDER BY 'w*DuZꦯ2R';
SELECT ALL * FROM vt0 WHERE (((vt0.c0)AND((((vt0.c1 IN ())) BETWEEN ((vt0.c0 IN (vt0.c0))) AND (((vt0.c0) IS FALSE)))))) ORDER BY 'w*DuZꦯ2R' LIMIT 0x4 INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)) IN ())) ORDER BY 'w*DuZꦯ2R' LIMIT 0x4;
SELECT ALL * FROM vt0 WHERE (vt0.c0) ORDER BY 'w*DuZꦯ2R';
SELECT ALL * FROM vt0 WHERE (((vt0.c0)AND((((vt0.c1 IN ())) BETWEEN ((vt0.c0 IN (vt0.c0))) AND (((vt0.c0) IS FALSE)))))) ORDER BY 'w*DuZꦯ2R' LIMIT 0x4 INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)) IN ())) ORDER BY 'w*DuZꦯ2R' LIMIT 0x4;
SELECT COUNT(*) FROM vt0 WHERE (CASE WHEN CAST(vt0.c1 AS TEXT) THEN (~ (vt0.c1)) WHEN CAST(vt0.c0 AS TEXT) THEN ((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1)))OR(vt0.c1)))OR(vt0.c0)) END) ORDER BY (((((vt0.c1))<((vt0.c2))))>=(((((vt0.c1)OR(vt0.c0)))AND(vt0.c2)))) DESC  NULLS FIRST, (((vt0.c0, vt0.c2, x'9a')) BETWEEN ((vt0.c0, ((((vt0.c0)OR(vt0.c2)))OR(vt0.c1)), ((((((((((((vt0.c2)OR(vt0.c1)))AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c0)))OR(x'')))) AND ((((vt0.c2) NOTNULL), (((vt0.c1))>=((vt0.c0))), ((vt0.c1)IS(vt0.c1)))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((CASE WHEN CAST(vt0.c1 AS TEXT) THEN (~ (vt0.c1)) WHEN CAST(vt0.c0 AS TEXT) THEN ((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1)))OR(vt0.c1)))OR(vt0.c0)) END)AND(('71103973' IN ())))) ORDER BY (((((vt0.c1))<((vt0.c2))))>=(((((vt0.c1)OR(vt0.c0)))AND(vt0.c2)))) DESC  NULLS FIRST, (((vt0.c0, vt0.c2, x'9a')) BETWEEN ((vt0.c0, ((((vt0.c0)OR(vt0.c2)))OR(vt0.c1)), ((((((((((((vt0.c2)OR(vt0.c1)))AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c0)))OR(x'')))) AND ((((vt0.c2) NOTNULL), (((vt0.c1))>=((vt0.c0))), ((vt0.c1)IS(vt0.c1)))))  NULLS FIRST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY (((NOT (-2.032011166E9))) NOT NULL);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c0)AND((((vt0.c0, vt0.c0)) BETWEEN ((COALESCE(vt0.c0, vt0.c0, vt0.c1, vt0.c0), vt0.c2 COLLATE RTRIM)) AND ((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1)), CASE vt0.c1  WHEN NULL THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END)))))) ORDER BY (((NOT (-2.032011166E9))) NOT NULL) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CAST(((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c1)) AS BLOB)) ORDER BY (((NOT (-2.032011166E9))) NOT NULL) LIMIT 1;
SELECT MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0))) NOT NULL));
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0))) NOT NULL)) ORDER BY json_object(((vt0.c2) NOT NULL), vt0.c2, CAST(vt0.c0 AS TEXT)), vt0.c1  NULLS FIRST, x'' LIMIT 0 INTERSECT SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((vt0.c2)!=(((vt0.c0)LIKE(vt0.c2))))) ORDER BY json_object(((vt0.c2) NOT NULL), vt0.c2, CAST(vt0.c0 AS TEXT)), vt0.c1  NULLS FIRST, x'' LIMIT 0;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)))IS(0.9820639131566157)));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)))IS(0.9820639131566157))) ORDER BY ((((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c1))) IN (vt0.c2 COLLATE NOCASE)) ASC, (vt0.c2 IN (vt0.c2)) ASC INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c2)+(vt0.c1)) COLLATE RTRIM) ORDER BY ((((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c1))) IN (vt0.c2 COLLATE NOCASE)) ASC, (vt0.c2 IN (vt0.c2)) ASC;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (HEX(TYPEOF(vt0.c1)));
SELECT MAX(vt0.c1) FROM vt0 WHERE (HEX(TYPEOF(vt0.c1))) LIMIT 0 INTERSECT SELECT MAX(vt0.c1) FROM vt0 WHERE ('1631567910') LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((vt0.c1)LIKE(vt0.c2)) IN (CAST(vt0.c1 AS REAL), CAST(vt0.c0 AS REAL), ((((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))OR(vt0.c1)))AND('tc')))AND(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c1)LIKE(vt0.c2)) IN (CAST(vt0.c1 AS REAL))))AND((~ (vt0.c1))))) ORDER BY NULL DESC, (CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END IN (0xfffffffff251a08f)) ASC LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE ((((vt0.c1)LIKE(vt0.c2)) IN (CAST(vt0.c1 AS REAL), CAST(vt0.c0 AS REAL), ((((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))OR(vt0.c1)))AND('tc')))AND(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c1)LIKE(vt0.c2)) IN (CAST(vt0.c1 AS REAL))))AND((~ (vt0.c1))))) ORDER BY NULL DESC, (CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END IN (0xfffffffff251a08f)) ASC LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c2)))OR(((vt0.c1)>=(vt0.c2))))) ORDER BY NULLIF(DISTINCT ((vt0.c1)*(vt0.c1)), ((((vt0.c0)AND(vt0.c2)))OR(vt0.c1)))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c2)))OR(((vt0.c1)>(vt0.c2))))) ORDER BY ((vt0.c2)/(vt0.c1)) COLLATE BINARY  NULLS LAST, ((((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(NULL)))AND(vt0.c0))) IS FALSE), ((((vt0.c2)<=(vt0.c0))) BETWEEN (((((vt0.c1)AND(vt0.c0)))AND(vt0.c0))) AND (LTRIM(vt0.c0))) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE WHEN vt0.c2 THEN x'' ELSE LIKELY(vt0.c2) END) ORDER BY ((vt0.c2)/(vt0.c1)) COLLATE BINARY  NULLS LAST, ((((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(NULL)))AND(vt0.c0))) IS FALSE), ((((vt0.c2)<=(vt0.c0))) BETWEEN (((((vt0.c1)AND(vt0.c0)))AND(vt0.c0))) AND (LTRIM(vt0.c0))) DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE ((((((0.05447752435722886)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) BETWEEN (vt0.c0 COLLATE RTRIM) AND (NULL)));
SELECT DISTINCT * FROM vt0 WHERE ((((((((0.05447752435722886)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) BETWEEN (vt0.c0 COLLATE RTRIM) AND (NULL)))AND((~ (((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c1))))))) ORDER BY (NOT (CAST(vt0.c0 AS TEXT))) DESC LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((((((0.05447752435722886)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) BETWEEN (vt0.c0 COLLATE RTRIM) AND (NULL)));
SELECT DISTINCT * FROM vt0 WHERE ((((((((0.05447752435722886)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) BETWEEN (vt0.c0 COLLATE RTRIM) AND (NULL)))AND((~ (((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c1))))))) ORDER BY (NOT (CAST(vt0.c0 AS TEXT))) DESC LIMIT 1;
SELECT ALL COUNT(*) FROM vt0 WHERE (CAST(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 END AS BLOB)) ORDER BY UNLIKELY(NULL) COLLATE BINARY  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 END AS BLOB))AND(((CAST(vt0.c1 AS REAL))<(json_insert(1.63156791E9, vt0.c2, vt0.c2, 'gk+Q뜈2', '퐡', x'95', vt0.c2, vt0.c0)))))) ORDER BY ((CAST(vt0.c0 AS INTEGER)) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END) AND (((vt0.c1)AND(vt0.c1)))) DESC  NULLS FIRST, vt0.c0 ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (0X4ab77802) ORDER BY (~ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END)) ASC;
SELECT DISTINCT * FROM vt0 WHERE (0x4ab77802) ORDER BY (~ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END)) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (UNLIKELY((((vt0.c0, vt0.c0))>=((vt0.c0, vt0.c2))))) ORDER BY (~ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END)) ASC;
SELECT * FROM vt0 WHERE (0X4ab77802) ORDER BY (~ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END)) ASC;
SELECT DISTINCT * FROM vt0 WHERE (0x4ab77802) ORDER BY (~ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END)) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (UNLIKELY((((vt0.c0, vt0.c0))>=((vt0.c0, vt0.c2))))) ORDER BY (~ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END)) ASC;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN '2096113889' WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END)) AND (((vt0.c1 IN ()))))) ORDER BY CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 END COLLATE BINARY COLLATE BINARY ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN '2096113889' WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END)) AND (((vt0.c1 IN ()))))) ORDER BY LOWER((vt0.c0 IN (vt0.c2))), CAST((('bTm5t')|(vt0.c1)) AS BLOB) DESC  NULLS LAST, CASE WHEN vt0.c1 THEN vt0.c2 ELSE -1861244521 END DESC LIMIT 1 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2) ISNULL))+((((vt0.c0, x'', vt0.c2))>((NULL, vt0.c2, vt0.c1)))))) ORDER BY LOWER((vt0.c0 IN (vt0.c2))), CAST((('bTm5t')|(vt0.c1)) AS BLOB) DESC  NULLS LAST, CASE WHEN vt0.c1 THEN vt0.c2 ELSE 0xffffffff910fa997 END DESC LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN '2096113889' WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END)) AND (((vt0.c1 IN ()))))) ORDER BY CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 END COLLATE BINARY COLLATE BINARY ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN '2096113889' WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END)) AND (((vt0.c1 IN ()))))) ORDER BY LOWER((vt0.c0 IN (vt0.c2))), CAST((('bTm5t')|(vt0.c1)) AS BLOB) DESC  NULLS LAST, CASE WHEN vt0.c1 THEN vt0.c2 ELSE -1861244521 END DESC LIMIT 1 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2) ISNULL))+((((vt0.c0, x'', vt0.c2))>((NULL, vt0.c2, vt0.c1)))))) ORDER BY LOWER((vt0.c0 IN (vt0.c2))), CAST((('bTm5t')|(vt0.c1)) AS BLOB) DESC  NULLS LAST, CASE WHEN vt0.c1 THEN vt0.c2 ELSE 0xffffffff910fa997 END DESC LIMIT 0X1;
SELECT ALL * FROM vt0 NOT INDEXED WHERE (vt0.c2);
SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (('' IN ((((vt0.c2, vt0.c1))>=((vt0.c2, vt0.c0)))))) LIMIT 0x1;
SELECT ALL * FROM vt0 NOT INDEXED WHERE (vt0.c2);
SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (('' IN ((((vt0.c2, vt0.c1))>=((vt0.c2, vt0.c0)))))) LIMIT 0x1;
SELECT * FROM vt0 WHERE (COALESCE(DISTINCT (vt0.c1 IN ()), vt0.c1)) ORDER BY (((((vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c1))<((vt0.c2, vt0.c1, '-1720589556', vt0.c2, vt0.c1)))) NOTNULL)  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (COALESCE(DISTINCT (vt0.c1 IN ()), vt0.c1)) ORDER BY (((((vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c1))<((vt0.c2, vt0.c1, '-1720589556', vt0.c2, vt0.c1)))) NOTNULL)  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE (COALESCE(DISTINCT (vt0.c1 IN ()), vt0.c1)) ORDER BY (((((vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c1))<((vt0.c2, vt0.c1, '-1720589556', vt0.c2, vt0.c1)))) NOTNULL)  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (COALESCE(DISTINCT (vt0.c1 IN ()), vt0.c1)) ORDER BY (((((vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c1))<((vt0.c2, vt0.c1, '-1720589556', vt0.c2, vt0.c1)))) NOTNULL)  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (((((((((vt0.c0)OR(vt0.c1)))OR(x'4f')))OR((vt0.c0 IN ()))))OR(CASE vt0.c1  WHEN 'FYmx' THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END))) ORDER BY (~ (vt0.c2)) ASC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((((((vt0.c0)OR(vt0.c1)))OR(x'4f')))OR((vt0.c0 IN ()))))OR(CASE vt0.c1  WHEN 'FYmx' THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END)))AND(NULL COLLATE BINARY))) ORDER BY (0.19868999037484258 IN ()) DESC;
SELECT * FROM vt0 WHERE ((((x'')>=(vt0.c0)) IN ())) ORDER BY CASE WHEN '-353614591' THEN (vt0.c2 IN (vt0.c2)) ELSE ((vt0.c2)<=(vt0.c0)) END  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((x'')>=(vt0.c0)) IN ())) ORDER BY CASE WHEN '-353614591' THEN (vt0.c2 IN (vt0.c2)) ELSE ((vt0.c2)<=(vt0.c0)) END  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((x'')>=(vt0.c0)) IN ())) ORDER BY CASE WHEN '-353614591' THEN (vt0.c2 IN (vt0.c2)) ELSE ((vt0.c2)<=(vt0.c0)) END  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((x'')>=(vt0.c0)) IN ())) ORDER BY CASE WHEN '-353614591' THEN (vt0.c2 IN (vt0.c2)) ELSE ((vt0.c2)<=(vt0.c0)) END  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (NULLIF((NOT (vt0.c2)), vt0.c0 COLLATE NOCASE));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((NULLIF((NOT (vt0.c2)), vt0.c0 COLLATE NOCASE))AND(vt0.c0))) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE)>=(PRINTF(NULL, vt0.c0, vt0.c1, vt0.c2)))) LIMIT 2;
SELECT ALL * FROM vt0 WHERE (((vt0.c1 COLLATE BINARY)IS(((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c0)))));
SELECT DISTINCT * FROM vt0 NOT INDEXED WHERE (((vt0.c1 COLLATE BINARY)IS(((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c0))))) LIMIT 3;
SELECT ALL * FROM vt0 WHERE (((vt0.c1 COLLATE BINARY)IS(((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c0)))));
SELECT DISTINCT * FROM vt0 NOT INDEXED WHERE (((vt0.c1 COLLATE BINARY)IS(((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c0))))) LIMIT 3;
SELECT * FROM vt0 WHERE (((((((((((vt0.c0 COLLATE NOCASE)AND(((vt0.c2) IS FALSE))))OR(vt0.c1)))OR((((vt0.c0, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c1, vt0.c2))))))AND(((((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c2)))))AND((((((((((((('c7.#')AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(NULL)))OR(vt0.c0))))) ORDER BY vt0.c0 DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c0 COLLATE NOCASE)AND(((vt0.c2) IS FALSE))))OR(vt0.c1)))OR((((vt0.c0, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c1, vt0.c2))))))AND(((((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c2)))))AND((((((((((((('c7.#')AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(NULL)))OR(vt0.c0))))) ORDER BY DATE(((vt0.c2) NOTNULL), (vt0.c1 IN (vt0.c0, vt0.c0)), NULL, (vt0.c1 IN ()), CAST(vt0.c1 AS TEXT), ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)), ((vt0.c1)AND(vt0.c1)), ((vt0.c0)GLOB(vt0.c2))) ASC  NULLS FIRST, NULLIF(DISTINCT ((((((vt0.c2)AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)), ((vt0.c2) IS FALSE)) ASC LIMIT 0x1;
SELECT * FROM vt0 WHERE (((((((((((vt0.c0 COLLATE NOCASE)AND(((vt0.c2) IS FALSE))))OR(vt0.c1)))OR((((vt0.c0, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c1, vt0.c2))))))AND(((((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c2)))))AND((((((((((((('c7.#')AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(NULL)))OR(vt0.c0))))) ORDER BY vt0.c0 DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c0 COLLATE NOCASE)AND(((vt0.c2) IS FALSE))))OR(vt0.c1)))OR((((vt0.c0, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c1, vt0.c2))))))AND(((((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c2)))))AND((((((((((((('c7.#')AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(NULL)))OR(vt0.c0))))) ORDER BY DATE(((vt0.c2) NOTNULL), (vt0.c1 IN (vt0.c0, vt0.c0)), NULL, (vt0.c1 IN ()), CAST(vt0.c1 AS TEXT), ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)), ((vt0.c1)AND(vt0.c1)), ((vt0.c0)GLOB(vt0.c2))) ASC  NULLS FIRST, NULLIF(DISTINCT ((((((vt0.c2)AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)), ((vt0.c2) IS FALSE)) ASC LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((vt0.c1) BETWEEN (((vt0.c0)>>(vt0.c2))) AND (((vt0.c1) NOTNULL))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1) BETWEEN (((vt0.c0)>>(vt0.c2))) AND (((vt0.c1) NOTNULL)))) ORDER BY x'b1' COLLATE NOCASE ASC, (((vt0.c1)&(vt0.c1)) IN ()) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((vt0.c1) BETWEEN (((vt0.c0)>>(vt0.c2))) AND (((vt0.c1) NOTNULL))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1) BETWEEN (((vt0.c0)>>(vt0.c2))) AND (((vt0.c1) NOTNULL)))) ORDER BY x'b1' COLLATE NOCASE ASC, (((vt0.c1)&(vt0.c1)) IN ()) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((CAST(vt0.c2 AS REAL)) IS TRUE)) ORDER BY ((HEX(vt0.c0))<<(((vt0.c1)GLOB(vt0.c0))));
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c2 AS REAL)) IS TRUE))AND(CAST(((vt0.c1) IS TRUE) AS REAL)))) ORDER BY ((vt0.c0 COLLATE NOCASE)&(vt0.c0 COLLATE RTRIM)) ASC, (((((((vt0.c1 IN (vt0.c2, vt0.c2)))OR(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN 0.9962231516290762 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 END)))OR(((vt0.c2)IS NOT(vt0.c2)))))AND(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)) INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c0) ORDER BY ((vt0.c0 COLLATE NOCASE)&(vt0.c0 COLLATE RTRIM)) ASC, (((((((vt0.c1 IN (vt0.c2, vt0.c2)))OR(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN 0.9962231516290762 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 END)))OR(((vt0.c2)IS NOT(vt0.c2)))))AND(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END));
SELECT ALL * FROM vt0 WHERE (((CAST(vt0.c2 AS REAL)) IS TRUE)) ORDER BY ((HEX(vt0.c0))<<(((vt0.c1)GLOB(vt0.c0))));
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c2 AS REAL)) IS TRUE))AND(CAST(((vt0.c1) IS TRUE) AS REAL)))) ORDER BY ((vt0.c0 COLLATE NOCASE)&(vt0.c0 COLLATE RTRIM)) ASC, (((((((vt0.c1 IN (vt0.c2, vt0.c2)))OR(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN 0.9962231516290762 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 END)))OR(((vt0.c2)IS NOT(vt0.c2)))))AND(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)) INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c0) ORDER BY ((vt0.c0 COLLATE NOCASE)&(vt0.c0 COLLATE RTRIM)) ASC, (((((((vt0.c1 IN (vt0.c2, vt0.c2)))OR(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN 0.9962231516290762 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 END)))OR(((vt0.c2)IS NOT(vt0.c2)))))AND(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END));
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (CASE WHEN ((vt0.c1) BETWEEN (vt0.c2) AND ('-297004530')) THEN CASE vt0.c0  WHEN vt0.c1 THEN '' END END) ORDER BY ((((((((vt0.c0)>(vt0.c2)))AND(vt0.c2 COLLATE RTRIM)))OR(vt0.c1)))OR(highlight(vt0.c1, vt0.c1, vt0.c2, vt0.c2)));
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((CASE WHEN ((vt0.c1) BETWEEN (vt0.c2) AND ('-297004530')) THEN CASE vt0.c0  WHEN vt0.c1 THEN '' END END)AND(((CAST(vt0.c0 AS NUMERIC))AND(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 END))))) ORDER BY ((((((((vt0.c0)>(vt0.c2)))AND(vt0.c2 COLLATE RTRIM)))OR(vt0.c1)))OR(highlight(vt0.c1, vt0.c1, vt0.c2, vt0.c2))) INTERSECT SELECT MAX(vt0.c1) FROM vt0 WHERE (669789269) ORDER BY ((((((((vt0.c0)>(vt0.c2)))AND(vt0.c2 COLLATE RTRIM)))OR(vt0.c1)))OR(highlight(vt0.c1, vt0.c1, vt0.c2, vt0.c2)));
SELECT ALL COUNT(*) FROM vt0 WHERE ((TOTAL_CHANGES() IN (((vt0.c2)|(vt0.c1))))) ORDER BY (((0.15122221143630732)) BETWEEN ((CAST(vt0.c2 AS INTEGER))) AND ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.6701943446054793)))))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((TOTAL_CHANGES() IN (((vt0.c2)|(vt0.c1))))) ORDER BY (((0.15122221143630732)) BETWEEN ((CAST(vt0.c2 AS INTEGER))) AND ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.6701943446054793)))))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((vt0.c1, vt0.c2))>((vt0.c2, vt0.c0))))||(LOWER(vt0.c1)))) ORDER BY (((0.15122221143630732)) BETWEEN ((CAST(vt0.c2 AS INTEGER))) AND ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.6701943446054793)))))  NULLS LAST;
SELECT MIN(vt0.c1) FROM vt0 WHERE (((~ (vt0.c2)) IN ())) ORDER BY TRIM(CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN x'' ELSE vt0.c2 END)  NULLS LAST;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((((~ (vt0.c2)) IN ()))AND((((~ (vt0.c0))) IS FALSE)))) ORDER BY ((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c1)))AND(vt0.c1))) NOT NULL), ((UNICODE(vt0.c2)) IS TRUE) DESC;
SELECT * FROM vt0 WHERE (((LTRIM(vt0.c1, vt0.c2)) NOT NULL));
SELECT DISTINCT * FROM vt0 WHERE (((((LTRIM(vt0.c1, vt0.c2)) NOT NULL))AND(json_type(((vt0.c2) IS TRUE)))));
SELECT * FROM vt0 WHERE (((LTRIM(vt0.c1, vt0.c2)) NOT NULL));
SELECT DISTINCT * FROM vt0 WHERE (((((LTRIM(vt0.c1, vt0.c2)) NOT NULL))AND(json_type(((vt0.c2) IS TRUE)))));
SELECT ALL COUNT(*) FROM vt0 WHERE (((CAST(vt0.c0 AS TEXT))/(((vt0.c1)<=(vt0.c0)))));
SELECT COUNT(*) FROM vt0 WHERE (((((CAST(vt0.c0 AS TEXT))/(((vt0.c1)<=(vt0.c0)))))AND(((((vt0.c1) NOT NULL)) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (((vt0.c0)>(vt0.c0))))))) LIMIT 0x1 INTERSECT SELECT COUNT(*) FROM vt0 WHERE (vt0.c2 COLLATE NOCASE COLLATE BINARY) LIMIT 0x1;
SELECT MIN(vt0.c2) FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN '0.19868999037484258' END) IS FALSE));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((((CASE WHEN vt0.c0 THEN '0.19868999037484258' END) IS FALSE))AND(((((vt0.c0) IS TRUE))+(((((((x'')OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c2))))))) ORDER BY ((((vt0.c0)AND(vt0.c0)))=((((vt0.c0)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) ASC INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((NULL)+(((((((((vt0.c1)OR(vt0.c1)))AND(vt0.c2)))OR(-353614591)))OR(vt0.c1))))) ORDER BY ((((vt0.c0)AND(vt0.c0)))=((((vt0.c0)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) ASC;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))=(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1)))));
SELECT COUNT(*) FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))=(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1))))) ORDER BY (~ (CAST(vt0.c2 AS BLOB))) DESC  NULLS FIRST, ((((((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))&(((vt0.c0) NOT NULL))) DESC, ((((((((((vt0.c0)OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c2))) NOT BETWEEN (((0.33571056218694384) NOT NULL)) AND (CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN 0.19222936152202408 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END))  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (CASE CAST(vt0.c1 AS NUMERIC)  WHEN TRIM(vt0.c2, vt0.c0) THEN vt0.c1 COLLATE BINARY END) ORDER BY (~ (CAST(vt0.c2 AS BLOB))) DESC  NULLS FIRST, ((((((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))&(((vt0.c0) NOT NULL))) DESC, ((((((((((vt0.c0)OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c2))) NOT BETWEEN (((0.33571056218694384) NOT NULL)) AND (CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN 0.19222936152202408 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((ABS(DISTINCT vt0.c2)) IS TRUE));
SELECT ALL * FROM vt0 WHERE (((((ABS(DISTINCT vt0.c2)) IS TRUE))AND(((((vt0.c2) NOT NULL))GLOB(vt0.c0 COLLATE NOCASE))))) ORDER BY ((vt0.c0 COLLATE BINARY) IS TRUE) DESC  NULLS LAST, CAST(vt0.c1 AS INTEGER) COLLATE RTRIM DESC;
SELECT ALL * FROM vt0 WHERE (((ABS(DISTINCT vt0.c2)) IS TRUE));
SELECT ALL * FROM vt0 WHERE (((((ABS(DISTINCT vt0.c2)) IS TRUE))AND(((((vt0.c2) NOT NULL))GLOB(vt0.c0 COLLATE NOCASE))))) ORDER BY ((vt0.c0 COLLATE BINARY) IS TRUE) DESC  NULLS LAST, CAST(vt0.c1 AS INTEGER) COLLATE RTRIM DESC;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((((((((vt0.c0)AND('-1880625023')))OR(0.36224214601003146)))AND(vt0.c1))) NOT NULL)) ORDER BY (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c2)) IN ())  NULLS FIRST, ((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1))) BETWEEN (CASE WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END) AND (((((vt0.c2)OR(vt0.c0)))AND(vt0.c2)))), ((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c0))) NOT BETWEEN ((((vt0.c1)) BETWEEN ((vt0.c2)) AND ((vt0.c0)))) AND (NULL)) DESC;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((((((vt0.c0)AND('-1880625023')))OR(0.36224214601003146)))AND(vt0.c1))) NOT NULL)) ORDER BY x'a8870c76' COLLATE BINARY, LTRIM(((((vt0.c0)OR(-693457325)))AND(vt0.c2))) INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((vt0.c2) IS FALSE)) ISNULL)) ORDER BY x'a8870c76' COLLATE BINARY, LTRIM(((((vt0.c0)OR(-693457325)))AND(vt0.c2)));
SELECT ALL * FROM vt0 WHERE (GLOB(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)))) ORDER BY ((((((((HEX(DISTINCT vt0.c1))AND((- (vt0.c0)))))AND(((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c2)))))OR(((vt0.c0) NOTNULL))))OR(x'0d79')) ASC  NULLS FIRST, CASE NULL  WHEN ((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c2)) THEN CAST(vt0.c0 AS REAL) WHEN ((vt0.c1)GLOB(vt0.c0)) THEN vt0.c2 COLLATE NOCASE WHEN x'' THEN vt0.c1 END  NULLS LAST;
SELECT * FROM vt0 WHERE (GLOB(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)))) ORDER BY (+ (vt0.c1)) COLLATE NOCASE LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (GLOB(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)))) ORDER BY ((((((((HEX(DISTINCT vt0.c1))AND((- (vt0.c0)))))AND(((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c2)))))OR(((vt0.c0) NOTNULL))))OR(x'0d79')) ASC  NULLS FIRST, CASE NULL  WHEN ((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c2)) THEN CAST(vt0.c0 AS REAL) WHEN ((vt0.c1)GLOB(vt0.c0)) THEN vt0.c2 COLLATE NOCASE WHEN x'' THEN vt0.c1 END  NULLS LAST;
SELECT * FROM vt0 WHERE (GLOB(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)))) ORDER BY (+ (vt0.c1)) COLLATE NOCASE LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt0 WHERE (json_insert((vt0.c2 IN ()), ((((((vt0.c1)OR(vt0.c2)))AND(vt0.c1)))OR('#(')), ((vt0.c2)&(vt0.c0)), (((vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c0, vt0.c2)))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((json_insert((vt0.c2 IN ()), ((((((vt0.c1)OR(vt0.c2)))AND(vt0.c1)))OR('#(')), ((vt0.c2)&(vt0.c0)), (((vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c0, vt0.c2)))))AND(((((vt0.c1)GLOB(vt0.c1)))&(CAST(vt0.c1 AS BLOB)))))) LIMIT 4;
SELECT ALL * FROM vt0 WHERE ((((vt0.c1)=(vt0.c1)) IN ()));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1)==(vt0.c1)) IN ()))AND((((x''))>=(((((vt0.c2))>((vt0.c2))))))))) ORDER BY CASE WHEN -426815184 THEN vt0.c0 COLLATE RTRIM WHEN NULL THEN ((vt0.c0)AND(vt0.c1)) END DESC, CASE vt0.c1  WHEN vt0.c0 COLLATE BINARY THEN x'ee30' WHEN ((vt0.c0)GLOB(vt0.c0)) THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END WHEN ((vt0.c2) IS TRUE) THEN CASE vt0.c1  WHEN vt0.c2 THEN 'h' WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END WHEN LOWER(vt0.c2) THEN ((((((vt0.c0)AND(vt0.c0)))OR('1098133784')))AND(vt0.c0)) ELSE NULL END DESC;
SELECT ALL * FROM vt0 WHERE ((((vt0.c1)=(vt0.c1)) IN ()));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1)==(vt0.c1)) IN ()))AND((((x''))>=(((((vt0.c2))>((vt0.c2))))))))) ORDER BY CASE WHEN -426815184 THEN vt0.c0 COLLATE RTRIM WHEN NULL THEN ((vt0.c0)AND(vt0.c1)) END DESC, CASE vt0.c1  WHEN vt0.c0 COLLATE BINARY THEN x'ee30' WHEN ((vt0.c0)GLOB(vt0.c0)) THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END WHEN ((vt0.c2) IS TRUE) THEN CASE vt0.c1  WHEN vt0.c2 THEN 'h' WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END WHEN LOWER(vt0.c2) THEN ((((((vt0.c0)AND(vt0.c0)))OR('1098133784')))AND(vt0.c0)) ELSE NULL END DESC;
SELECT ALL * FROM vt0 WHERE (((vt0.c2)*(vt0.c0)) COLLATE NOCASE) ORDER BY CAST(NULLIF(vt0.c2, vt0.c1) AS REAL) ASC;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)*(vt0.c0)) COLLATE NOCASE)AND(json_extract(CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c2)%(vt0.c2)), (vt0.c1 IN ()), ((vt0.c0)-(vt0.c1)), CAST(vt0.c0 AS TEXT))))) ORDER BY CAST(NULLIF(vt0.c2, vt0.c1) AS REAL) ASC LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, vt0.c1, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c1, 0.22898423394128609)) AND ((vt0.c0, vt0.c0, vt0.c1))))IS(((x'3c') IS FALSE)))) ORDER BY CAST(NULLIF(vt0.c2, vt0.c1) AS REAL) ASC LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((vt0.c2)*(vt0.c0)) COLLATE NOCASE) ORDER BY CAST(NULLIF(vt0.c2, vt0.c1) AS REAL) ASC;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)*(vt0.c0)) COLLATE NOCASE)AND(json_extract(CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c2)%(vt0.c2)), (vt0.c1 IN ()), ((vt0.c0)-(vt0.c1)), CAST(vt0.c0 AS TEXT))))) ORDER BY CAST(NULLIF(vt0.c2, vt0.c1) AS REAL) ASC LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, vt0.c1, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c1, 0.22898423394128609)) AND ((vt0.c0, vt0.c0, vt0.c1))))IS(((x'3c') IS FALSE)))) ORDER BY CAST(NULLIF(vt0.c2, vt0.c1) AS REAL) ASC LIMIT 0x1;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (CASE WHEN ((vt0.c1)*(vt0.c1)) THEN ((vt0.c1)<=(x'')) END);
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (CASE WHEN ((vt0.c1)*(vt0.c1)) THEN ((vt0.c1)<(x'')) END) INTERSECT SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (CAST(x'ec9f' AS INTEGER) COLLATE BINARY);
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (TYPEOF(((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0)))) ORDER BY (((vt0.c2 COLLATE BINARY, (vt0.c1 IN (vt0.c0)), ((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c1)))AND(x''))))<=((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN 1.63156791E9 ELSE vt0.c1 END, (+ (vt0.c2)), vt0.c2)));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (TYPEOF(((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0)))) ORDER BY CASE ((vt0.c0) IS TRUE)  WHEN CAST(vt0.c1 AS REAL) THEN vt0.c2 COLLATE BINARY WHEN ((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c1)) THEN vt0.c0 END ASC LIMIT 0;
SELECT * FROM vt0 NOT INDEXED WHERE (((LTRIM(vt0.c0, vt0.c2))<>(vt0.c1 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt0 WHERE (((LTRIM(vt0.c0, vt0.c2))!=(vt0.c1 COLLATE NOCASE))) ORDER BY ((((0.33571056218694384)OR(vt0.c2 COLLATE BINARY)))AND('<R^'));
SELECT * FROM vt0 NOT INDEXED WHERE (((LTRIM(vt0.c0, vt0.c2))<>(vt0.c1 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt0 WHERE (((LTRIM(vt0.c0, vt0.c2))!=(vt0.c1 COLLATE NOCASE))) ORDER BY ((((0.33571056218694384)OR(vt0.c2 COLLATE BINARY)))AND('<R^'));
SELECT ALL * FROM vt0 WHERE ((vt0.c0 IN ())) ORDER BY vt0.c0;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0 IN ()))AND((((~ (vt0.c2)))<=(((((((vt0.c2)OR(vt0.c0)))OR(NULL)))AND(vt0.c0))))))) ORDER BY vt0.c0;
SELECT ALL * FROM vt0 WHERE ((vt0.c0 IN ())) ORDER BY vt0.c0;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0 IN ()))AND((((~ (vt0.c2)))<=(((((((vt0.c2)OR(vt0.c0)))OR(NULL)))AND(vt0.c0))))))) ORDER BY vt0.c0;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (CASE (vt0.c2 IN ())  WHEN CAST(vt0.c1 AS TEXT) THEN (vt0.c0 IN ()) END);
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((CASE (vt0.c2 IN ())  WHEN CAST(vt0.c1 AS TEXT) THEN (vt0.c0 IN ()) END)AND(0Xffffffff8fe7f081))) ORDER BY (vt0.c0 IN ()) COLLATE NOCASE DESC, vt0.c2 COLLATE BINARY ASC  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c2))) NOT BETWEEN ((+ (vt0.c1))) AND (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c2))) NOT BETWEEN ((+ (vt0.c1))) AND (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (((('348431335') NOT NULL))<=(((vt0.c2)<<('1631567910')))) DESC, vt0.c1 ASC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (((((((((((((vt0.c0)%(vt0.c2)))AND((NOT (vt0.c1)))))OR((+ (vt0.c0)))))OR((((vt0.c0, vt0.c0))==((vt0.c2, vt0.c0))))))AND(TRIM(vt0.c0, vt0.c2))))OR(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c2 END))) ORDER BY (((('348431335') NOT NULL))<=(((vt0.c2)<<('1631567910')))) DESC, vt0.c1 ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c2))) NOT BETWEEN ((+ (vt0.c1))) AND (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c2))) NOT BETWEEN ((+ (vt0.c1))) AND (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (((('348431335') NOT NULL))<=(((vt0.c2)<<('1631567910')))) DESC, vt0.c1 ASC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (((((((((((((vt0.c0)%(vt0.c2)))AND((NOT (vt0.c1)))))OR((+ (vt0.c0)))))OR((((vt0.c0, vt0.c0))==((vt0.c2, vt0.c0))))))AND(TRIM(vt0.c0, vt0.c2))))OR(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c2 END))) ORDER BY (((('348431335') NOT NULL))<=(((vt0.c2)<<('1631567910')))) DESC, vt0.c1 ASC  NULLS LAST;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c1)) BETWEEN ((((vt0.c1)IS NOT(vt0.c2)))) AND (((((vt0.c1, '-895481057', vt0.c1, vt0.c1))>((vt0.c1, vt0.c1, vt0.c2, vt0.c2))))))) ORDER BY CAST((NOT (vt0.c1)) AS NUMERIC)  NULLS FIRST;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c1)) BETWEEN ((((vt0.c1)IS NOT(vt0.c2)))) AND (((((vt0.c1, '-895481057', vt0.c1, vt0.c1))>((vt0.c1, vt0.c1, vt0.c2, vt0.c2))))))) ORDER BY CAST((NOT (vt0.c1)) AS NUMERIC)  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CASE CAST(x'3d' AS BLOB)  WHEN vt0.c1 COLLATE RTRIM THEN ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) WHEN ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2)) THEN ((x'')<>(vt0.c2)) ELSE ((((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) END);
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CASE CAST(x'3d' AS BLOB)  WHEN vt0.c1 COLLATE RTRIM THEN ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) WHEN ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2)) THEN ((x'')!=(vt0.c2)) ELSE ((((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) END) LIMIT 0x4;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((CASE WHEN 0.7802662137874288 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN x'f2bc' THEN vt0.c2 END)>(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((CASE WHEN 0.7802662137874288 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN x'f2bc' THEN vt0.c2 END)>(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0)))))AND((CAST(vt0.c1 AS TEXT) IN ())))) ORDER BY ((((((vt0.c1 COLLATE RTRIM)AND(((vt0.c1)>=(vt0.c1)))))AND((+ ('/')))))OR(vt0.c2 COLLATE BINARY))  NULLS FIRST, ((CAST(vt0.c1 AS NUMERIC)) NOT BETWEEN (NULL) AND ((((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c1))))) DESC LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((~ ('㒟숏
HXACbK'))) ORDER BY ((((((vt0.c1 COLLATE RTRIM)AND(((vt0.c1)>=(vt0.c1)))))AND((+ ('/')))))OR(vt0.c2 COLLATE BINARY))  NULLS FIRST, ((CAST(vt0.c1 AS NUMERIC)) NOT BETWEEN (NULL) AND ((((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c1))))) DESC LIMIT 0;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CAST(((((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)) AS TEXT)) ORDER BY ((NULL)||(CAST(NULL AS TEXT))) ASC, CASE WHEN ((NULL)>>(vt0.c0)) THEN ((vt0.c0)IS NOT(vt0.c2)) END  NULLS LAST;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (CAST(((((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)) AS TEXT)) ORDER BY vt0.c1  NULLS FIRST, IFNULL(vt0.c1, (((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c2, x'37d7')) AND ((vt0.c0, vt0.c1)))), CASE WHEN vt0.c2 THEN 0.7802662137874288 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c2 END COLLATE BINARY ASC, ((((CAST(vt0.c0 AS TEXT))AND(CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END)))AND(((vt0.c1)/(vt0.c2)))) LIMIT 0X4 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((((((vt0.c2) NOT BETWEEN (vt0.c0) AND (x'6b')))AND(((vt0.c0) BETWEEN (NULL) AND (vt0.c1)))))OR(vt0.c1)))AND('438110496'))) ORDER BY vt0.c1  NULLS FIRST, IFNULL(vt0.c1, (((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c2, x'37d7')) AND ((vt0.c0, vt0.c1)))), CASE WHEN vt0.c2 THEN 0.7802662137874288 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c2 END COLLATE BINARY ASC, ((((CAST(vt0.c0 AS TEXT))AND(CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END)))AND(((vt0.c1)/(vt0.c2)))) LIMIT 4;
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE BINARY)LIKE(((((((((((vt0.c1)AND(vt0.c1)))AND(2074797880)))AND(NULL)))AND(vt0.c2)))OR(vt0.c0)))));
SELECT ALL * FROM vt0 WHERE (((vt0.c0 COLLATE BINARY)LIKE(((((((((((vt0.c1)AND(vt0.c1)))AND(0X7baae738)))AND(NULL)))AND(vt0.c2)))OR(vt0.c0))))) ORDER BY ((((vt0.c0 IN (vt0.c0)), ((vt0.c2)AND(vt0.c1)), ((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c1)), vt0.c2))==((((vt0.c0)+(vt0.c2)), 0Xffffffffd0b86499, ((vt0.c1) IS TRUE), ((vt0.c0) BETWEEN (0.3271575880554718) AND (vt0.c2))))), ((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c2)))-((- (vt0.c0))))  NULLS FIRST, (NOT ((((0.6235000268949388, vt0.c0))<=((vt0.c0, vt0.c2)))))  NULLS LAST, ((((vt0.c1)<>('1562432259'))) NOT NULL) ASC  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE BINARY)LIKE(((((((((((vt0.c1)AND(vt0.c1)))AND(2074797880)))AND(NULL)))AND(vt0.c2)))OR(vt0.c0)))));
SELECT ALL * FROM vt0 WHERE (((vt0.c0 COLLATE BINARY)LIKE(((((((((((vt0.c1)AND(vt0.c1)))AND(0X7baae738)))AND(NULL)))AND(vt0.c2)))OR(vt0.c0))))) ORDER BY ((((vt0.c0 IN (vt0.c0)), ((vt0.c2)AND(vt0.c1)), ((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c1)), vt0.c2))==((((vt0.c0)+(vt0.c2)), 0Xffffffffd0b86499, ((vt0.c1) IS TRUE), ((vt0.c0) BETWEEN (0.3271575880554718) AND (vt0.c2))))), ((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c2)))-((- (vt0.c0))))  NULLS FIRST, (NOT ((((0.6235000268949388, vt0.c0))<=((vt0.c0, vt0.c2)))))  NULLS LAST, ((((vt0.c1)<>('1562432259'))) NOT NULL) ASC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt0 WHERE (TRIM(DISTINCT CAST(vt0.c1 AS NUMERIC))) ORDER BY (NOT ((- (vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (TRIM(DISTINCT CAST(vt0.c1 AS NUMERIC))) ORDER BY (((((((((NOT (vt0.c2)))OR(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(((vt0.c1)&(vt0.c2)))))AND(((vt0.c2)<=(vt0.c1)))))OR(((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))), NULL ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((~ (vt0.c1)) COLLATE NOCASE) ORDER BY (((((((((NOT (vt0.c2)))OR(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(((vt0.c1)&(vt0.c2)))))AND(((vt0.c2)<=(vt0.c1)))))OR(((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))), NULL ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (TRIM(DISTINCT CAST(vt0.c1 AS NUMERIC))) ORDER BY (NOT ((- (vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (TRIM(DISTINCT CAST(vt0.c1 AS NUMERIC))) ORDER BY (((((((((NOT (vt0.c2)))OR(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(((vt0.c1)&(vt0.c2)))))AND(((vt0.c2)<=(vt0.c1)))))OR(((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))), NULL ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((~ (vt0.c1)) COLLATE NOCASE) ORDER BY (((((((((NOT (vt0.c2)))OR(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(((vt0.c1)&(vt0.c2)))))AND(((vt0.c2)<=(vt0.c1)))))OR(((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))), NULL ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE (NULL COLLATE BINARY) ORDER BY ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END)>(vt0.c1))  NULLS FIRST, ((((x'')>(vt0.c1)))<((((vt0.c1))<((vt0.c2))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((NULL COLLATE BINARY)AND((((((x'', vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c0, 296343744, vt0.c0)) AND ((vt0.c0, vt0.c2, x'39274b')))) IS TRUE)))) ORDER BY CASE 298697454  WHEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END THEN (NOT (vt0.c2)) ELSE CAST(vt0.c1 AS TEXT) END, CAST(((vt0.c0) NOT NULL) AS TEXT) DESC  NULLS LAST LIMIT 0x2;
SELECT * FROM vt0 WHERE (NULL COLLATE BINARY) ORDER BY ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END)>(vt0.c1))  NULLS FIRST, ((((x'')>(vt0.c1)))<((((vt0.c1))<((vt0.c2))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((NULL COLLATE BINARY)AND((((((x'', vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c0, 296343744, vt0.c0)) AND ((vt0.c0, vt0.c2, x'39274b')))) IS TRUE)))) ORDER BY CASE 298697454  WHEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END THEN (NOT (vt0.c2)) ELSE CAST(vt0.c1 AS TEXT) END, CAST(((vt0.c0) NOT NULL) AS TEXT) DESC  NULLS LAST LIMIT 0x2;
SELECT * FROM vt0 WHERE (((CASE vt0.c2  WHEN 0.9960005719254752 THEN '6*ᯣ]	1,Od' WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 END) BETWEEN (UNLIKELY('JW~p&!౓qy')) AND (CAST(vt0.c0 AS BLOB))));
SELECT * FROM vt0 WHERE (((CASE vt0.c2  WHEN 0.9960005719254752 THEN '6*ᯣ]	1,Od' WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 END) BETWEEN (UNLIKELY('JW~p&!౓qy')) AND (CAST(vt0.c0 AS BLOB)))) ORDER BY json_patch(vt0.c2 COLLATE NOCASE, 0.29904746403598303) DESC LIMIT 0;
SELECT * FROM vt0 WHERE (((CASE vt0.c2  WHEN 0.9960005719254752 THEN '6*ᯣ]	1,Od' WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 END) BETWEEN (UNLIKELY('JW~p&!౓qy')) AND (CAST(vt0.c0 AS BLOB))));
SELECT * FROM vt0 WHERE (((CASE vt0.c2  WHEN 0.9960005719254752 THEN '6*ᯣ]	1,Od' WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 END) BETWEEN (UNLIKELY('JW~p&!౓qy')) AND (CAST(vt0.c0 AS BLOB)))) ORDER BY json_patch(vt0.c2 COLLATE NOCASE, 0.29904746403598303) DESC LIMIT 0;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((vt0.c1, vt0.c2, '-1396787381')) NOT BETWEEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c2)), (((NULL, vt0.c1))<>((vt0.c1, vt0.c2))), CAST(NULL AS BLOB))) AND (('41A%Fa', CAST(vt0.c1 AS BLOB), ((vt0.c2)OR(vt0.c0))))));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((((vt0.c1, vt0.c2, '-1396787381')) NOT BETWEEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c2)), (((NULL, vt0.c1))!=((vt0.c1, vt0.c2))), CAST(NULL AS BLOB))) AND (('41A%Fa', CAST(vt0.c1 AS BLOB), ((vt0.c2)OR(vt0.c0))))))AND(((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))==(HEX(vt0.c2)))))) LIMIT 0X0;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c2)OR(vt0.c1))) BETWEEN (vt0.c2 COLLATE NOCASE) AND (vt0.c0))  NULLS FIRST, ((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(-1.536972838E9)))OR(vt0.c0)))<=(vt0.c2))  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (0X5904131d);
SELECT COUNT(*) FROM vt0 WHERE (((1493439261)AND((((vt0.c0)) NOT BETWEEN ((((vt0.c1)*(NULL)))) AND ((((((vt0.c0)OR(vt0.c1)))AND('')))))))) LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (UPPER(((((vt0.c2)OR(vt0.c2)))OR(vt0.c1)))) LIMIT 0X1;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c1)<(vt0.c2))) NOT BETWEEN ((((vt0.c0))<((vt0.c2)))) AND (ABS(vt0.c2)))) ORDER BY ((LIKE(vt0.c0, vt0.c0, '.')) IS TRUE) DESC, CASE WHEN ((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN vt0.c2 COLLATE RTRIM ELSE ((vt0.c2)-(vt0.c0)) END  NULLS FIRST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((((vt0.c1)<=(vt0.c2))) NOT BETWEEN ((((vt0.c0))!=((vt0.c2)))) AND (ABS(vt0.c2))))AND((((((((vt0.c0, vt0.c0))==((vt0.c2, '382587228'))))AND(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 END)))AND((+ (vt0.c1))))))) ORDER BY (((vt0.c0, vt0.c1, vt0.c0, vt0.c0, vt0.c0, vt0.c1))>(('-1727102346', 0X1f884325, vt0.c1, NULL, vt0.c2, vt0.c1))) COLLATE NOCASE ASC  NULLS FIRST, (((((vt0.c0))>=((vt0.c1))))IS(((vt0.c1)<(vt0.c1)))), (('634127358')||(((((((vt0.c2)OR(vt0.c1)))OR(vt0.c0)))AND(NULL)))) LIMIT 0;
SELECT * FROM vt0 WHERE ((((((((vt0.c1, vt0.c2))>((vt0.c2, vt0.c1))))AND(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))))AND(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))));
SELECT ALL * FROM vt0 WHERE ((((((((vt0.c1, vt0.c2))>((vt0.c2, vt0.c1))))AND(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))))AND(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))));
SELECT * FROM vt0 WHERE ((((((((vt0.c1, vt0.c2))>((vt0.c2, vt0.c1))))AND(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))))AND(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))));
SELECT ALL * FROM vt0 WHERE ((((((((vt0.c1, vt0.c2))>((vt0.c2, vt0.c1))))AND(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))))AND(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))));
SELECT ALL * FROM vt0 NOT INDEXED WHERE (((('1812974822') NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((((('1812974822') NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (vt0.c0)))AND(vt0.c1)));
SELECT ALL * FROM vt0 NOT INDEXED WHERE (((('1812974822') NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((((('1812974822') NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (vt0.c0)))AND(vt0.c1)));
SELECT MAX(vt0.c0) FROM vt0 NOT INDEXED WHERE ((((((x''))!=((vt0.c1)))) NOT BETWEEN (NULL) AND ((+ (vt0.c2)))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((x''))!=((vt0.c1)))) NOT BETWEEN (NULL) AND ((+ (vt0.c2))))) ORDER BY CAST(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) AS TEXT), (vt0.c2 IN (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0)))) LIMIT 0X0;
SELECT * FROM vt0 WHERE (INSTR(CASE 'ᎆ'  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END, CASE WHEN vt0.c0 THEN '-359981107' WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c1 END)) ORDER BY (NOT (vt0.c0));
SELECT * FROM vt0 WHERE (INSTR(CASE 'ᎆ'  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END, CASE WHEN vt0.c0 THEN '-359981107' WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c1 END)) ORDER BY (((vt0.c1, vt0.c2, vt0.c1)) NOT BETWEEN ((((vt0.c1) IS FALSE), ((vt0.c1)*(vt0.c1)), (((vt0.c1)) BETWEEN ((0.3271575880554718)) AND ((vt0.c1))))) AND (((vt0.c1 IN ()), (vt0.c1 IN ()), CASE WHEN -1210018373 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END))) ASC, CAST((((vt0.c2, vt0.c1, vt0.c0))==((vt0.c1, vt0.c0, vt0.c0))) AS NUMERIC) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (INSTR(CASE 'ᎆ'  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END, CASE WHEN vt0.c0 THEN '-359981107' WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c1 END)) ORDER BY (NOT (vt0.c0));
SELECT * FROM vt0 WHERE (INSTR(CASE 'ᎆ'  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END, CASE WHEN vt0.c0 THEN '-359981107' WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c1 END)) ORDER BY (((vt0.c1, vt0.c2, vt0.c1)) NOT BETWEEN ((((vt0.c1) IS FALSE), ((vt0.c1)*(vt0.c1)), (((vt0.c1)) BETWEEN ((0.3271575880554718)) AND ((vt0.c1))))) AND (((vt0.c1 IN ()), (vt0.c1 IN ()), CASE WHEN -1210018373 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END))) ASC, CAST((((vt0.c2, vt0.c1, vt0.c0))==((vt0.c1, vt0.c0, vt0.c0))) AS NUMERIC) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((vt0.c2 COLLATE NOCASE)IS(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2 COLLATE NOCASE)IS(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))));
SELECT ALL * FROM vt0 WHERE (((vt0.c2 COLLATE NOCASE)IS(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2 COLLATE NOCASE)IS(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0)|(vt0.c1))) IS TRUE)) ORDER BY ((CASE vt0.c1  WHEN vt0.c2 THEN 0x2724ad52 WHEN x'18' THEN vt0.c1 END) NOTNULL) DESC;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((vt0.c0)|(vt0.c1))) IS TRUE))AND((x'' IN (((vt0.c0) NOTNULL)))))) ORDER BY vt0.c0  NULLS LAST INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c2 IN (vt0.c0, vt0.c1, vt0.c0)))IS NOT(COALESCE(-1, vt0.c2, vt0.c1, vt0.c0)))) ORDER BY vt0.c0  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((vt0.c2)=(vt0.c0)) COLLATE BINARY);
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)=(vt0.c0)) COLLATE BINARY)AND((((('Og')=(vt0.c1)))IS(vt0.c1))))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1)) NOT BETWEEN ((((vt0.c1)+(vt0.c1)))) AND (((vt0.c2 IN (vt0.c1)))))) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((vt0.c2)=(vt0.c0)) COLLATE BINARY);
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)=(vt0.c0)) COLLATE BINARY)AND((((('Og')=(vt0.c1)))IS(vt0.c1))))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1)) NOT BETWEEN ((((vt0.c1)+(vt0.c1)))) AND (((vt0.c2 IN (vt0.c1)))))) LIMIT 0x0;
SELECT * FROM vt0 WHERE (((((IFNULL(DISTINCT 0x76d5f848, '917511139'))OR(('PhVYIp' IN (x'51')))))OR((((vt0.c2, vt0.c0, vt0.c1))!=((vt0.c1, NULL, vt0.c0))))));
SELECT * FROM vt0 WHERE (((((((IFNULL(DISTINCT 0X76d5f848, '917511139'))OR(('PhVYIp' IN (x'51')))))OR((((vt0.c2, vt0.c0, vt0.c1))!=((vt0.c1, NULL, vt0.c0))))))AND(CASE (((vt0.c1, vt0.c2))<=((vt0.c0, vt0.c1)))  WHEN ((((vt0.c0)AND(vt0.c2)))OR(vt0.c1)) THEN ((vt0.c1)%(vt0.c1)) WHEN (NOT (vt0.c0)) THEN NULLIF(vt0.c2, vt0.c2) END))) ORDER BY ((((((NULL)AND('1424276739')))AND(vt0.c1)))GLOB(-2.29531505E8 COLLATE NOCASE)) ASC  NULLS FIRST, json_array_length(vt0.c0 COLLATE NOCASE) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE ((((NULL) BETWEEN (vt0.c1) AND (vt0.c1)) IN ())) ORDER BY ((((((NULL)AND('1424276739')))AND(vt0.c1)))GLOB(-2.29531505E8 COLLATE NOCASE)) ASC  NULLS FIRST, json_array_length(vt0.c0 COLLATE NOCASE) DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE (((((IFNULL(DISTINCT 0x76d5f848, '917511139'))OR(('PhVYIp' IN (x'51')))))OR((((vt0.c2, vt0.c0, vt0.c1))!=((vt0.c1, NULL, vt0.c0))))));
SELECT * FROM vt0 WHERE (((((((IFNULL(DISTINCT 0X76d5f848, '917511139'))OR(('PhVYIp' IN (x'51')))))OR((((vt0.c2, vt0.c0, vt0.c1))!=((vt0.c1, NULL, vt0.c0))))))AND(CASE (((vt0.c1, vt0.c2))<=((vt0.c0, vt0.c1)))  WHEN ((((vt0.c0)AND(vt0.c2)))OR(vt0.c1)) THEN ((vt0.c1)%(vt0.c1)) WHEN (NOT (vt0.c0)) THEN NULLIF(vt0.c2, vt0.c2) END))) ORDER BY ((((((NULL)AND('1424276739')))AND(vt0.c1)))GLOB(-2.29531505E8 COLLATE NOCASE)) ASC  NULLS FIRST, json_array_length(vt0.c0 COLLATE NOCASE) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE ((((NULL) BETWEEN (vt0.c1) AND (vt0.c1)) IN ())) ORDER BY ((((((NULL)AND('1424276739')))AND(vt0.c1)))GLOB(-2.29531505E8 COLLATE NOCASE)) ASC  NULLS FIRST, json_array_length(vt0.c0 COLLATE NOCASE) DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((x'') IS TRUE)) ORDER BY ((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2))) BETWEEN ((((vt0.c0))!=((vt0.c2)))) AND (vt0.c1 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((x'') IS TRUE)) ORDER BY ((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2))) BETWEEN ((((vt0.c0))<>((vt0.c2)))) AND (vt0.c1 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((x'') IS TRUE)) ORDER BY ((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2))) BETWEEN ((((vt0.c0))!=((vt0.c2)))) AND (vt0.c1 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((x'') IS TRUE)) ORDER BY ((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2))) BETWEEN ((((vt0.c0))<>((vt0.c2)))) AND (vt0.c1 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (UNICODE(MIN(vt0.c2, vt0.c2))) ORDER BY ((((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))>=(highlight(vt0.c2, vt0.c0, vt0.c0, vt0.c2)));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (UNICODE(MIN(vt0.c2, vt0.c2))) ORDER BY ((vt0.c2 IN (vt0.c0, vt0.c0)) IN (((((((vt0.c1)OR(vt0.c1)))AND('7敹\ଟ䄉>W')))OR(vt0.c2))))  NULLS LAST, (NOT ((((x'8c', vt0.c2, vt0.c1, vt0.c1))>((NULL, x'', vt0.c1, vt0.c0))))), ((CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN 'X' WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END) BETWEEN (((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2))) AND ((vt0.c2 IN ()))) LIMIT 0x2;
SELECT * FROM vt0 WHERE (((((LOWER(DISTINCT vt0.c1))AND(vt0.c2)))OR(x'6e' COLLATE BINARY))) ORDER BY (((((((((('-353614591')AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))<<(CAST(vt0.c0 AS REAL))) DESC, (vt0.c2 COLLATE RTRIM IN ()) ASC  NULLS FIRST, ((vt0.c2)>>(vt0.c1)) COLLATE NOCASE;
SELECT DISTINCT * FROM vt0 WHERE (((((LOWER(DISTINCT vt0.c1))AND(vt0.c2)))OR(x'6e' COLLATE BINARY))) ORDER BY (((((vt0.c2)=(vt0.c0))))>=((vt0.c1))) DESC  NULLS LAST, 0.3309650893358512 DESC, ((vt0.c2 COLLATE NOCASE) IS TRUE) DESC  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2 COLLATE BINARY)=(vt0.c0))) ORDER BY (((((vt0.c2)==(vt0.c0))))>=((vt0.c1))) DESC  NULLS LAST, 0.3309650893358512 DESC, ((vt0.c2 COLLATE NOCASE) IS TRUE) DESC  NULLS LAST LIMIT 2;
SELECT * FROM vt0 WHERE (((((LOWER(DISTINCT vt0.c1))AND(vt0.c2)))OR(x'6e' COLLATE BINARY))) ORDER BY (((((((((('-353614591')AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))<<(CAST(vt0.c0 AS REAL))) DESC, (vt0.c2 COLLATE RTRIM IN ()) ASC  NULLS FIRST, ((vt0.c2)>>(vt0.c1)) COLLATE NOCASE;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (LIKE(((vt0.c1) IS TRUE), vt0.c1));
SELECT MAX(vt0.c2) FROM vt0 WHERE (LIKE(((vt0.c1) IS TRUE), vt0.c1)) ORDER BY (((((vt0.c1) NOT BETWEEN (vt0.c2) AND (x''))))>((vt0.c2)))  NULLS LAST, (((vt0.c0)) BETWEEN (((vt0.c1 IN (vt0.c2, NULL)))) AND ((((vt0.c1) NOT NULL))))  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (vt0.c1) ORDER BY (((((vt0.c1) NOT BETWEEN (vt0.c2) AND (x''))))>((vt0.c2)))  NULLS LAST, (((vt0.c0)) BETWEEN (((vt0.c1 IN (vt0.c2, NULL)))) AND ((((vt0.c1) NOT NULL))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0 WHERE (TRIM(vt0.c0) COLLATE BINARY) ORDER BY CASE ((vt0.c1)|(vt0.c2))  WHEN ((vt0.c1)>>(vt0.c0)) THEN CASE WHEN vt0.c0 THEN -2089230563 ELSE vt0.c1 END END ASC;
SELECT DISTINCT * FROM vt0 WHERE (((TRIM(vt0.c0) COLLATE BINARY)AND(vt0.c1))) ORDER BY TIME((((vt0.c0))=((vt0.c0))), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END, ((vt0.c0)>(0.36751075777811737)), HEX(DISTINCT vt0.c2)) ASC, ((0.2114151880638413)IS NOT(0.04467337641290792)) DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST((vt0.c0 IN (vt0.c1)) AS BLOB)) ORDER BY TIME((((vt0.c0))==((vt0.c0))), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END, ((vt0.c0)>(0.36751075777811737)), HEX(DISTINCT vt0.c2)) ASC, ((0.2114151880638413)IS NOT(0.04467337641290792)) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0 WHERE (TRIM(vt0.c0) COLLATE BINARY) ORDER BY CASE ((vt0.c1)|(vt0.c2))  WHEN ((vt0.c1)>>(vt0.c0)) THEN CASE WHEN vt0.c0 THEN -2089230563 ELSE vt0.c1 END END ASC;
SELECT DISTINCT * FROM vt0 WHERE (((TRIM(vt0.c0) COLLATE BINARY)AND(vt0.c1))) ORDER BY TIME((((vt0.c0))=((vt0.c0))), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END, ((vt0.c0)>(0.36751075777811737)), HEX(DISTINCT vt0.c2)) ASC, ((0.2114151880638413)IS NOT(0.04467337641290792)) DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST((vt0.c0 IN (vt0.c1)) AS BLOB)) ORDER BY TIME((((vt0.c0))==((vt0.c0))), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END, ((vt0.c0)>(0.36751075777811737)), HEX(DISTINCT vt0.c2)) ASC, ((0.2114151880638413)IS NOT(0.04467337641290792)) DESC  NULLS FIRST LIMIT 0;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c1, vt0.c0, vt0.c0)) NOT BETWEEN ((((((vt0.c1)OR(vt0.c0)))AND(0.1823103336252373)), (~ (vt0.c2)), CAST(vt0.c2 AS INTEGER))) AND (((((vt0.c0, vt0.c2))!=((NULL, vt0.c2))), ((NULL)|(0x7b113a6b)), (vt0.c2 IN ())))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c1, vt0.c0, vt0.c0)) NOT BETWEEN ((((((vt0.c1)OR(vt0.c0)))AND(0.1823103336252373)), (~ (vt0.c2)), CAST(vt0.c2 AS INTEGER))) AND (((((vt0.c0, vt0.c2))!=((NULL, vt0.c2))), ((NULL)|(0X7b113a6b)), (vt0.c2 IN ())))));
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c2 COLLATE BINARY AS NUMERIC)) ORDER BY vt0.c0 ASC  NULLS LAST, x'5f'  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c2 COLLATE BINARY AS NUMERIC)) ORDER BY vt0.c0 ASC  NULLS LAST, x'5f'  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c2 COLLATE BINARY AS NUMERIC)) ORDER BY vt0.c0 ASC  NULLS LAST, x'5f'  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c2 COLLATE BINARY AS NUMERIC)) ORDER BY vt0.c0 ASC  NULLS LAST, x'5f'  NULLS LAST;
SELECT MAX(vt0.c2) FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (vt0.c0) INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (vt0.c1 COLLATE NOCASE);
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((((vt0.c1) ISNULL))<=((vt0.c0 IN (vt0.c1)))));
SELECT MIN(vt0.c2) FROM vt0 WHERE (((((vt0.c1) ISNULL))==((vt0.c0 IN (vt0.c1))))) LIMIT 0;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CAST(vt0.c0 AS REAL) COLLATE RTRIM) ORDER BY (vt0.c0 IN ()) ASC  NULLS FIRST;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CAST(vt0.c0 AS REAL) COLLATE RTRIM) ORDER BY (vt0.c0 IN ()) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2)) COLLATE BINARY) ORDER BY (vt0.c0 IN ()) ASC  NULLS FIRST LIMIT 1;
SELECT MIN(vt0.c1) FROM vt0 WHERE (NULLIF(DISTINCT ((vt0.c2) BETWEEN ('5C O7ﺮN') AND (vt0.c0)), ((vt0.c2)=(vt0.c0)))) ORDER BY (CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN 0.031800797359361366 ELSE vt0.c1 END IN (((vt0.c0)||(vt0.c1))))  NULLS FIRST, (vt0.c2 IN (vt0.c1)), ((((((((((((CASE WHEN vt0.c1 THEN vt0.c0 END)AND(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))))AND(((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c0)))OR(vt0.c2)))OR(vt0.c1)))))AND(CAST(vt0.c2 AS TEXT))))AND(CAST(vt0.c1 AS TEXT))))AND(CAST(vt0.c0 AS REAL))))AND((((vt0.c0, vt0.c2, vt0.c2, vt0.c0, x'', vt0.c1)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c2, '-891722830', vt0.c1, '-593233478')) AND ((vt0.c2, vt0.c1, vt0.c2, vt0.c1, vt0.c0, vt0.c2))))) ASC  NULLS FIRST;
SELECT MIN(vt0.c1) FROM vt0 WHERE (((NULLIF(DISTINCT ((vt0.c2) BETWEEN ('5C O7ﺮN') AND (vt0.c0)), ((vt0.c2)=(vt0.c0))))AND(((NULL)GLOB(((((vt0.c1)OR(vt0.c2)))OR(vt0.c0))))))) ORDER BY (CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN 0.031800797359361366 ELSE vt0.c1 END IN (((vt0.c0)||(vt0.c1))))  NULLS FIRST, (vt0.c2 IN (vt0.c1)), ((((((((((((CASE WHEN vt0.c1 THEN vt0.c0 END)AND(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))))AND(((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c0)))OR(vt0.c2)))OR(vt0.c1)))))AND(CAST(vt0.c2 AS TEXT))))AND(CAST(vt0.c1 AS TEXT))))AND(CAST(vt0.c0 AS REAL))))AND((((vt0.c0, vt0.c2, vt0.c2, vt0.c0, x'', vt0.c1)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c2, '-891722830', vt0.c1, '-593233478')) AND ((vt0.c2, vt0.c1, vt0.c2, vt0.c1, vt0.c0, vt0.c2))))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE (((((((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c2))) BETWEEN (3.82587228E8) AND (((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) ORDER BY CASE ((vt0.c0)<>(vt0.c1))  WHEN ((vt0.c1)IS('K湢O')) THEN CAST(vt0.c2 AS BLOB) WHEN CAST(vt0.c0 AS BLOB) THEN ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END DESC, (NOT ((- (vt0.c2))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c2))) BETWEEN (3.82587228E8) AND (((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)))))AND(-1.477752068E9))) ORDER BY CASE ((vt0.c0)<>(vt0.c1))  WHEN ((vt0.c1)IS('K湢O')) THEN CAST(vt0.c2 AS BLOB) WHEN CAST(vt0.c0 AS BLOB) THEN ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END DESC, (NOT ((- (vt0.c2))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE)*(((vt0.c1)!=(vt0.c2))))) ORDER BY CASE ((vt0.c0)<>(vt0.c1))  WHEN ((vt0.c1)IS('K湢O')) THEN CAST(vt0.c2 AS BLOB) WHEN CAST(vt0.c0 AS BLOB) THEN ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END DESC, (NOT ((- (vt0.c2))))  NULLS LAST;
SELECT * FROM vt0 WHERE (((((((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c2))) BETWEEN (3.82587228E8) AND (((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) ORDER BY CASE ((vt0.c0)<>(vt0.c1))  WHEN ((vt0.c1)IS('K湢O')) THEN CAST(vt0.c2 AS BLOB) WHEN CAST(vt0.c0 AS BLOB) THEN ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END DESC, (NOT ((- (vt0.c2))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c2))) BETWEEN (3.82587228E8) AND (((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)))))AND(-1.477752068E9))) ORDER BY CASE ((vt0.c0)<>(vt0.c1))  WHEN ((vt0.c1)IS('K湢O')) THEN CAST(vt0.c2 AS BLOB) WHEN CAST(vt0.c0 AS BLOB) THEN ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END DESC, (NOT ((- (vt0.c2))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE)*(((vt0.c1)!=(vt0.c2))))) ORDER BY CASE ((vt0.c0)<>(vt0.c1))  WHEN ((vt0.c1)IS('K湢O')) THEN CAST(vt0.c2 AS BLOB) WHEN CAST(vt0.c0 AS BLOB) THEN ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END DESC, (NOT ((- (vt0.c2))))  NULLS LAST;
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY (((vt0.c0 IN (vt0.c1)))-((NOT (vt0.c1))));
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY (((vt0.c0 IN (vt0.c1)))-((NOT (vt0.c1)))) LIMIT 0x0;
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY (((vt0.c0 IN (vt0.c1)))-((NOT (vt0.c1))));
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY (((vt0.c0 IN (vt0.c1)))-((NOT (vt0.c1)))) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (CAST((('[') NOT BETWEEN (vt0.c1) AND (vt0.c1)) AS REAL));
SELECT DISTINCT * FROM vt0 WHERE (CAST((('[') NOT BETWEEN (vt0.c1) AND (vt0.c1)) AS REAL)) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (HEX(vt0.c1) COLLATE RTRIM) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (CAST((('[') NOT BETWEEN (vt0.c1) AND (vt0.c1)) AS REAL));
SELECT DISTINCT * FROM vt0 WHERE (CAST((('[') NOT BETWEEN (vt0.c1) AND (vt0.c1)) AS REAL)) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (HEX(vt0.c1) COLLATE RTRIM) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (x'7af8');
SELECT DISTINCT * FROM vt0 WHERE (((x'7af8')AND(json_object((vt0.c2 IN (vt0.c1, vt0.c0)), (vt0.c0 IN (vt0.c2, vt0.c1, vt0.c0)))))) ORDER BY (((((((vt0.c2)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) IN ((vt0.c0 IN (vt0.c2)), '461008101')) DESC  NULLS FIRST, ((DATE(vt0.c2, vt0.c0, vt0.c2, vt0.c2))&(((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c0))));
SELECT ALL * FROM vt0 WHERE (x'7af8');
SELECT DISTINCT * FROM vt0 WHERE (((x'7af8')AND(json_object((vt0.c2 IN (vt0.c1, vt0.c0)), (vt0.c0 IN (vt0.c2, vt0.c1, vt0.c0)))))) ORDER BY (((((((vt0.c2)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) IN ((vt0.c0 IN (vt0.c2)), '461008101')) DESC  NULLS FIRST, ((DATE(vt0.c2, vt0.c0, vt0.c2, vt0.c2))&(((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c0))));
SELECT MIN(vt0.c0) FROM vt0 WHERE ((((CAST('BQMz' AS REAL)))!=((CAST(vt0.c2 AS BLOB)))));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((((CAST('BQMz' AS REAL)))<((CAST(vt0.c2 AS BLOB)))))AND(((((vt0.c1)>>(vt0.c1)))IS(((vt0.c1)||(vt0.c0))))))) LIMIT 0x2 INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((((((((((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)))AND(vt0.c0)))AND(((((((vt0.c2)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))))AND((- (vt0.c2)))))AND(vt0.c0 COLLATE RTRIM)))AND(CAST(vt0.c1 AS TEXT)))) LIMIT 0x2;
SELECT MIN(vt0.c2) FROM vt0 WHERE ((((CAST(vt0.c1 AS BLOB), ((0.9535738761866759)|(vt0.c2))))==((vt0.c0 COLLATE RTRIM, ((vt0.c2) NOTNULL)))));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((CAST(vt0.c1 AS BLOB), ((0.9535738761866759)|(vt0.c2))))=((vt0.c0 COLLATE RTRIM, ((vt0.c2) NOTNULL))))) INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c0) NOT NULL) AS INTEGER));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((vt0.c1) NOT NULL));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c1) NOT NULL))AND(LIKELIHOOD(DISTINCT ((vt0.c1)-(vt0.c1)), ((NULL) NOT NULL))))) LIMIT 0x0;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((vt0.c1)IS NOT(vt0.c2)) COLLATE RTRIM) ORDER BY CASE (((NULL, vt0.c0, vt0.c1))=((vt0.c1, vt0.c2, vt0.c1)))  WHEN ((vt0.c1) NOT NULL) THEN CAST(vt0.c1 AS BLOB) WHEN ((vt0.c0)IS(vt0.c0)) THEN '0.026677829472838477' ELSE ((((((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)))AND(vt0.c0)) END, (((vt0.c2 IN (vt0.c2))) BETWEEN ((- (vt0.c1))) AND (vt0.c0 COLLATE BINARY)), ((((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c1)))IS(vt0.c2 COLLATE RTRIM));
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c1)IS NOT(vt0.c2)) COLLATE RTRIM)AND(((((0X4a46418a)%(vt0.c2)))&(((vt0.c0)AND(vt0.c1))))))) ORDER BY ((((vt0.c1)>>(vt0.c2))) NOT BETWEEN (vt0.c2) AND ((((vt0.c1, vt0.c2, vt0.c1)) NOT BETWEEN ((x'fd', vt0.c2, 0.9800206860763748)) AND ((vt0.c0, vt0.c1, vt0.c2))))), ABS(vt0.c2) DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (json_insert((NOT (vt0.c2)), (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))), vt0.c1)) ORDER BY ((((vt0.c1)>>(vt0.c2))) NOT BETWEEN (vt0.c2) AND ((((vt0.c1, vt0.c2, vt0.c1)) NOT BETWEEN ((x'fd', vt0.c2, 0.9800206860763748)) AND ((vt0.c0, vt0.c1, vt0.c2))))), ABS(vt0.c2) DESC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (CASE WHEN NULLIF(DISTINCT vt0.c2, vt0.c1) THEN vt0.c1 COLLATE RTRIM END);
SELECT ALL COUNT(*) FROM vt0 WHERE (((CASE WHEN NULLIF(DISTINCT vt0.c2, vt0.c1) THEN vt0.c1 COLLATE RTRIM END)AND(CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN '?A' THEN vt0.c0 WHEN 0.6624198747339932 THEN vt0.c1 ELSE x'41b8a704931394' END COLLATE RTRIM))) LIMIT 0x1 INTERSECT SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c1 IN ())) BETWEEN (x'') AND (((((((vt0.c0)AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c1))))) LIMIT 1;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((x'a2') BETWEEN (((vt0.c1)<=(vt0.c0))) AND (CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 END))) ORDER BY IFNULL(((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2)), (+ (vt0.c0))) ASC, CASE ((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2))  WHEN ((vt0.c0) IS FALSE) THEN CAST(vt0.c2 AS NUMERIC) WHEN ((vt0.c1)<=(0.9421326971323795)) THEN ((vt0.c2)/('Pd촏')) ELSE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)) END  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((x'a2') BETWEEN (((vt0.c1)<=(vt0.c0))) AND (CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 END))) ORDER BY IFNULL(((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2)), (+ (vt0.c0))) ASC, CASE ((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2))  WHEN ((vt0.c0) IS FALSE) THEN CAST(vt0.c2 AS NUMERIC) WHEN ((vt0.c1)<=(0.9421326971323795)) THEN ((vt0.c2)/('Pd촏')) ELSE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)) END  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (vt0.c2);
SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY x'1592', ((CASE WHEN vt0.c0 THEN vt0.c2 END) ISNULL), (+ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN 'j2' ELSE vt0.c2 END)) DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY x'1592', ((CASE WHEN vt0.c0 THEN vt0.c2 END) ISNULL), (+ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN 'j2' ELSE vt0.c2 END)) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (vt0.c2);
SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY x'1592', ((CASE WHEN vt0.c0 THEN vt0.c2 END) ISNULL), (+ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN 'j2' ELSE vt0.c2 END)) DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY x'1592', ((CASE WHEN vt0.c0 THEN vt0.c2 END) ISNULL), (+ (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN 'j2' ELSE vt0.c2 END)) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0 WHERE ('0.9960005719254752');
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((('0.9960005719254752')AND(vt0.c0))) LIMIT 0x1;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c1) NOTNULL))+(((vt0.c1)>(vt0.c1)))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c1) NOTNULL))+(((vt0.c1)>(vt0.c1))))) LIMIT 2 INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((((((1957825316)OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c0)))AND(vt0.c0)) IN (CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 END))) LIMIT 0X2;
SELECT COUNT(*) FROM vt0 WHERE (((CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END) IS FALSE)) ORDER BY CAST(((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)) AS INTEGER)  NULLS FIRST, CASE WHEN '-1318887227' THEN CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END WHEN ((vt0.c0) NOT NULL) THEN CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END ELSE ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c0)) END DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END) IS FALSE)) ORDER BY CAST(((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)) AS INTEGER)  NULLS FIRST, CASE WHEN '-1318887227' THEN CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END WHEN ((vt0.c0) NOT NULL) THEN CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END ELSE ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c0)) END DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((CAST(vt0.c2 AS REAL)) ISNULL)) ORDER BY CAST(((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)) AS INTEGER)  NULLS FIRST, CASE WHEN '-1318887227' THEN CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END WHEN ((vt0.c0) NOT NULL) THEN CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END ELSE ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c0)) END DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE (LIKE(CAST(0Xffffffffcf25840b AS REAL), vt0.c0));
SELECT * FROM vt0 WHERE (LIKE(CAST(0xffffffffcf25840b AS REAL), vt0.c0)) ORDER BY highlight(vt0.c2, (vt0.c1 IN ()), CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END, vt0.c1 COLLATE RTRIM)  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE ((+ ((((vt0.c2))>(('656715090')))))) ORDER BY highlight(vt0.c2, (vt0.c1 IN ()), CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END, vt0.c1 COLLATE RTRIM)  NULLS FIRST;
SELECT * FROM vt0 WHERE (LIKE(CAST(0Xffffffffcf25840b AS REAL), vt0.c0));
SELECT * FROM vt0 WHERE (LIKE(CAST(0xffffffffcf25840b AS REAL), vt0.c0)) ORDER BY highlight(vt0.c2, (vt0.c1 IN ()), CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END, vt0.c1 COLLATE RTRIM)  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE ((+ ((((vt0.c2))>(('656715090')))))) ORDER BY highlight(vt0.c2, (vt0.c1 IN ()), CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END, vt0.c1 COLLATE RTRIM)  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c2 AS NUMERIC))OR(((((vt0.c1)AND(vt0.c0)))OR(vt0.c2)))))OR(((vt0.c2) BETWEEN (NULL) AND (vt0.c2)))));
SELECT * FROM vt0 WHERE (((((CAST(vt0.c2 AS NUMERIC))OR(((((vt0.c1)AND(vt0.c0)))OR(vt0.c2)))))OR(((vt0.c2) BETWEEN (NULL) AND (vt0.c2))))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c2 AS NUMERIC))OR(((((vt0.c1)AND(vt0.c0)))OR(vt0.c2)))))OR(((vt0.c2) BETWEEN (NULL) AND (vt0.c2)))));
SELECT * FROM vt0 WHERE (((((CAST(vt0.c2 AS NUMERIC))OR(((((vt0.c1)AND(vt0.c0)))OR(vt0.c2)))))OR(((vt0.c2) BETWEEN (NULL) AND (vt0.c2))))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((CAST(vt0.c1 AS BLOB))IS(((vt0.c1) NOT NULL)))) ORDER BY ((CAST(NULL AS REAL))<(((vt0.c1)<<(vt0.c0)))), NULL  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c1 AS BLOB))IS(((vt0.c1) NOT NULL))))AND(vt0.c0))) ORDER BY ((CAST(NULL AS REAL))<(((vt0.c1)<<(vt0.c0)))), NULL  NULLS FIRST LIMIT 0X3;
SELECT ALL * FROM vt0 WHERE (((CAST(vt0.c1 AS BLOB))IS(((vt0.c1) NOT NULL)))) ORDER BY ((CAST(NULL AS REAL))<(((vt0.c1)<<(vt0.c0)))), NULL  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c1 AS BLOB))IS(((vt0.c1) NOT NULL))))AND(vt0.c0))) ORDER BY ((CAST(NULL AS REAL))<(((vt0.c1)<<(vt0.c0)))), NULL  NULLS FIRST LIMIT 0X3;
SELECT * FROM vt0 WHERE ((- (TRIM(vt0.c0)))) ORDER BY ((((((vt0.c0 COLLATE BINARY)OR(((NULL) NOT BETWEEN (vt0.c2) AND (NULL)))))AND(((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))))OR(((((((vt0.c0)OR(vt0.c0)))AND(0.4423751635926221)))AND(vt0.c1)))) DESC, ((vt0.c1)+(vt0.c2)) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((- (TRIM(vt0.c0)))) ORDER BY CAST(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN '!dV' END AS BLOB) DESC  NULLS LAST, (('n_' COLLATE NOCASE)==(vt0.c1 COLLATE NOCASE))  NULLS FIRST, vt0.c0 DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2))) NOT BETWEEN (((vt0.c2) NOT NULL)) AND (((vt0.c0)-(vt0.c2))))) ORDER BY CAST(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN '!dV' END AS BLOB) DESC  NULLS LAST, (('n_' COLLATE NOCASE)==(vt0.c1 COLLATE NOCASE))  NULLS FIRST, vt0.c0 DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0 WHERE ((- (TRIM(vt0.c0)))) ORDER BY ((((((vt0.c0 COLLATE BINARY)OR(((NULL) NOT BETWEEN (vt0.c2) AND (NULL)))))AND(((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))))OR(((((((vt0.c0)OR(vt0.c0)))AND(0.4423751635926221)))AND(vt0.c1)))) DESC, ((vt0.c1)+(vt0.c2)) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((- (TRIM(vt0.c0)))) ORDER BY CAST(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN '!dV' END AS BLOB) DESC  NULLS LAST, (('n_' COLLATE NOCASE)==(vt0.c1 COLLATE NOCASE))  NULLS FIRST, vt0.c0 DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2))) NOT BETWEEN (((vt0.c2) NOT NULL)) AND (((vt0.c0)-(vt0.c2))))) ORDER BY CAST(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN '!dV' END AS BLOB) DESC  NULLS LAST, (('n_' COLLATE NOCASE)==(vt0.c1 COLLATE NOCASE))  NULLS FIRST, vt0.c0 DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (('0.9962231516290762' IN ((((vt0.c1)) BETWEEN ((NULL)) AND ((vt0.c2))))));
SELECT DISTINCT * FROM vt0 WHERE (('0.9962231516290762' IN ((((vt0.c1)) BETWEEN ((NULL)) AND ((vt0.c2)))))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULLIF(vt0.c2, ((vt0.c0)>(vt0.c2)))) LIMIT 2;
SELECT ALL * FROM vt0 WHERE (('0.9962231516290762' IN ((((vt0.c1)) BETWEEN ((NULL)) AND ((vt0.c2))))));
SELECT DISTINCT * FROM vt0 WHERE (('0.9962231516290762' IN ((((vt0.c1)) BETWEEN ((NULL)) AND ((vt0.c2)))))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULLIF(vt0.c2, ((vt0.c0)>(vt0.c2)))) LIMIT 2;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0)))IS(((vt0.c2)IS NOT(vt0.c1)))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0)))IS(((vt0.c2)IS NOT(vt0.c1)))));
SELECT * FROM vt0 WHERE (0.9962231516290762);
SELECT DISTINCT * FROM vt0 WHERE (0.9962231516290762);
SELECT * FROM vt0 WHERE (0.9962231516290762);
SELECT DISTINCT * FROM vt0 WHERE (0.9962231516290762);
SELECT ALL * FROM vt0 WHERE (INSTR(vt0.c0 COLLATE BINARY, NULL));
SELECT * FROM vt0 WHERE (INSTR(vt0.c0 COLLATE BINARY, NULL)) ORDER BY (('') NOT BETWEEN ((~ (vt0.c2))) AND (LIKELIHOOD(DISTINCT vt0.c0, vt0.c2)));
SELECT ALL * FROM vt0 WHERE (INSTR(vt0.c0 COLLATE BINARY, NULL));
SELECT * FROM vt0 WHERE (INSTR(vt0.c0 COLLATE BINARY, NULL)) ORDER BY (('') NOT BETWEEN ((~ (vt0.c2))) AND (LIKELIHOOD(DISTINCT vt0.c0, vt0.c2)));
SELECT MAX(vt0.c1) FROM vt0 WHERE (CASE WHEN ((vt0.c2) ISNULL) THEN ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c0)) END);
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (CASE WHEN ((vt0.c2) ISNULL) THEN ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c0)) END) LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))) NOT BETWEEN (((vt0.c2)>>(vt0.c0))) AND (((((vt0.c0)AND(vt0.c2)))AND(vt0.c0))))) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((vt0.c2 COLLATE BINARY) NOT BETWEEN (((vt0.c1)GLOB(vt0.c2))) AND (((((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)))AND(vt0.c2))))) ORDER BY ((((((((((0X77f70298)%(vt0.c0)))AND(CAST(vt0.c1 AS BLOB))))AND(UPPER(vt0.c1))))OR(CAST(vt0.c1 AS NUMERIC))))OR(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2 COLLATE BINARY) NOT BETWEEN (((vt0.c1)GLOB(vt0.c2))) AND (((((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)))AND(vt0.c2)))))AND(((INSTR(vt0.c1, vt0.c1)) IS FALSE)))) ORDER BY ((((((((((0x77f70298)%(vt0.c0)))AND(CAST(vt0.c1 AS BLOB))))AND(UPPER(vt0.c1))))OR(CAST(vt0.c1 AS NUMERIC))))OR(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c2 COLLATE NOCASE)AND((- (vt0.c0)))))OR(((vt0.c2) ISNULL))))AND((((vt0.c0))==((vt0.c1))))))AND(CAST(vt0.c0 AS BLOB)))) ORDER BY ((((((((((0X77f70298)%(vt0.c0)))AND(CAST(vt0.c1 AS BLOB))))AND(UPPER(vt0.c1))))OR(CAST(vt0.c1 AS NUMERIC))))OR(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))) DESC;
SELECT ALL * FROM vt0 WHERE (((vt0.c2 COLLATE BINARY) NOT BETWEEN (((vt0.c1)GLOB(vt0.c2))) AND (((((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)))AND(vt0.c2))))) ORDER BY ((((((((((0X77f70298)%(vt0.c0)))AND(CAST(vt0.c1 AS BLOB))))AND(UPPER(vt0.c1))))OR(CAST(vt0.c1 AS NUMERIC))))OR(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2 COLLATE BINARY) NOT BETWEEN (((vt0.c1)GLOB(vt0.c2))) AND (((((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)))AND(vt0.c2)))))AND(((INSTR(vt0.c1, vt0.c1)) IS FALSE)))) ORDER BY ((((((((((0x77f70298)%(vt0.c0)))AND(CAST(vt0.c1 AS BLOB))))AND(UPPER(vt0.c1))))OR(CAST(vt0.c1 AS NUMERIC))))OR(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c2 COLLATE NOCASE)AND((- (vt0.c0)))))OR(((vt0.c2) ISNULL))))AND((((vt0.c0))==((vt0.c1))))))AND(CAST(vt0.c0 AS BLOB)))) ORDER BY ((((((((((0X77f70298)%(vt0.c0)))AND(CAST(vt0.c1 AS BLOB))))AND(UPPER(vt0.c1))))OR(CAST(vt0.c1 AS NUMERIC))))OR(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))) DESC;
SELECT * FROM vt0 WHERE (DATETIME(LIKELY(DISTINCT vt0.c0), ((vt0.c0) IS TRUE), (- (vt0.c2)))) ORDER BY 'nLTIb&' DESC  NULLS FIRST, ((((vt0.c2 COLLATE RTRIM)AND(CASE WHEN NULL THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 END)))OR(((vt0.c2)||(vt0.c2)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (DATETIME(LIKELY(DISTINCT vt0.c0), ((vt0.c0) IS TRUE), (- (vt0.c2)))) ORDER BY vt0.c2 DESC, ((((vt0.c1) NOT NULL)) BETWEEN (((vt0.c2) ISNULL)) AND (vt0.c0))  NULLS LAST LIMIT 0X2;
SELECT * FROM vt0 WHERE (DATETIME(LIKELY(DISTINCT vt0.c0), ((vt0.c0) IS TRUE), (- (vt0.c2)))) ORDER BY 'nLTIb&' DESC  NULLS FIRST, ((((vt0.c2 COLLATE RTRIM)AND(CASE WHEN NULL THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 END)))OR(((vt0.c2)||(vt0.c2)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (DATETIME(LIKELY(DISTINCT vt0.c0), ((vt0.c0) IS TRUE), (- (vt0.c2)))) ORDER BY vt0.c2 DESC, ((((vt0.c1) NOT NULL)) BETWEEN (((vt0.c2) ISNULL)) AND (vt0.c0))  NULLS LAST LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN ((+ (vt0.c0))) AND (CAST(vt0.c1 AS REAL))));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN ((+ (vt0.c0))) AND (CAST(vt0.c1 AS REAL))))AND(COALESCE(vt0.c2, 0.7802662137874288)))) INTERSECT SELECT COUNT(*) FROM vt0 WHERE (CAST(((vt0.c2) BETWEEN (1957825316) AND (vt0.c2)) AS REAL));
SELECT MIN(vt0.c2) FROM vt0 WHERE (((- (vt0.c0)) IN ()));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((((- (vt0.c0)) IN ()))AND((((((((vt0.c2 IN ()))AND(((vt0.c1)-(-605607680)))))OR(((vt0.c1) IS FALSE))))AND(((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c2)))))));
SELECT * FROM vt0 WHERE (((((x'')+(vt0.c0)))IS NOT(((vt0.c1)LIKE(NULL))))) ORDER BY ((NULL)GLOB(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS LAST, ((((vt0.c2)==(vt0.c0)))-(CAST(vt0.c0 AS BLOB))) DESC;
SELECT ALL * FROM vt0 WHERE (((((x'')+(vt0.c0)))IS NOT(((vt0.c1)LIKE(NULL))))) ORDER BY ((NULL)GLOB(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS LAST, ((((vt0.c2)==(vt0.c0)))-(CAST(vt0.c0 AS BLOB))) DESC INTERSECT SELECT ALL * FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((((vt0.c2)<<(vt0.c0)))) AND ((vt0.c1 COLLATE BINARY)))) ORDER BY ((NULL)GLOB(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS LAST, ((((vt0.c2)=(vt0.c0)))-(CAST(vt0.c0 AS BLOB))) DESC;
SELECT * FROM vt0 WHERE (((((x'')+(vt0.c0)))IS NOT(((vt0.c1)LIKE(NULL))))) ORDER BY ((NULL)GLOB(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS LAST, ((((vt0.c2)==(vt0.c0)))-(CAST(vt0.c0 AS BLOB))) DESC;
SELECT ALL * FROM vt0 WHERE (((((x'')+(vt0.c0)))IS NOT(((vt0.c1)LIKE(NULL))))) ORDER BY ((NULL)GLOB(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS LAST, ((((vt0.c2)==(vt0.c0)))-(CAST(vt0.c0 AS BLOB))) DESC INTERSECT SELECT ALL * FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((((vt0.c2)<<(vt0.c0)))) AND ((vt0.c1 COLLATE BINARY)))) ORDER BY ((NULL)GLOB(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS LAST, ((((vt0.c2)=(vt0.c0)))-(CAST(vt0.c0 AS BLOB))) DESC;
SELECT MIN(vt0.c2) FROM vt0 WHERE (((vt0.c0 COLLATE RTRIM) ISNULL)) ORDER BY CAST(vt0.c1 COLLATE RTRIM AS BLOB)  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((vt0.c0 COLLATE RTRIM) ISNULL)) ORDER BY CAST(vt0.c1 COLLATE RTRIM AS BLOB)  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((vt0.c0 COLLATE RTRIM IN (x''))) ORDER BY CAST(vt0.c1 COLLATE RTRIM AS BLOB)  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE (vt0.c1);
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY vt0.c1 ASC  NULLS LAST, LIKELIHOOD(((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)), (((vt0.c1, vt0.c2))>=((vt0.c0, vt0.c0))))  NULLS LAST, (((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c0, vt0.c2, vt0.c2)) AND ((vt0.c2, vt0.c1, 0.3750532704878874, vt0.c1, vt0.c2))))>>(((((((((((0.005201264278129614)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c1)))) DESC, CAST(CAST(vt0.c0 AS INTEGER) AS REAL) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (CASE WHEN UNLIKELY(DISTINCT vt0.c2) THEN ((vt0.c2)OR(vt0.c0)) ELSE (((vt0.c1)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c0))) END) ORDER BY vt0.c1 ASC  NULLS LAST, LIKELIHOOD(((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)), (((vt0.c1, vt0.c2))>=((vt0.c0, vt0.c0))))  NULLS LAST, (((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c0, vt0.c2, vt0.c2)) AND ((vt0.c2, vt0.c1, 0.3750532704878874, vt0.c1, vt0.c2))))>>(((((((((((0.005201264278129614)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c1)))) DESC, CAST(CAST(vt0.c0 AS INTEGER) AS REAL) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (vt0.c1);
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY vt0.c1 ASC  NULLS LAST, LIKELIHOOD(((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)), (((vt0.c1, vt0.c2))>=((vt0.c0, vt0.c0))))  NULLS LAST, (((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c0, vt0.c2, vt0.c2)) AND ((vt0.c2, vt0.c1, 0.3750532704878874, vt0.c1, vt0.c2))))>>(((((((((((0.005201264278129614)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c1)))) DESC, CAST(CAST(vt0.c0 AS INTEGER) AS REAL) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (CASE WHEN UNLIKELY(DISTINCT vt0.c2) THEN ((vt0.c2)OR(vt0.c0)) ELSE (((vt0.c1)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c0))) END) ORDER BY vt0.c1 ASC  NULLS LAST, LIKELIHOOD(((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)), (((vt0.c1, vt0.c2))>=((vt0.c0, vt0.c0))))  NULLS LAST, (((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c0, vt0.c2, vt0.c2)) AND ((vt0.c2, vt0.c1, 0.3750532704878874, vt0.c1, vt0.c2))))>>(((((((((((0.005201264278129614)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c1)))) DESC, CAST(CAST(vt0.c0 AS INTEGER) AS REAL) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (json('1187240662'));
SELECT COUNT(*) FROM vt0 WHERE (json('1187240662')) LIMIT 2;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c0)=(vt0.c2)))OR(((((((vt0.c1)AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c2))))) ORDER BY ((CAST(vt0.c2 AS REAL)) IS FALSE), (((((vt0.c1)&(vt0.c2))))<((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN x'7575f5d1' END))) ASC  NULLS LAST;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c0)==(vt0.c2)))OR(((((((vt0.c1)AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c2))))) ORDER BY ((CAST(vt0.c2 AS REAL)) IS FALSE), (((((vt0.c1)&(vt0.c2))))<((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN x'7575f5d1' END))) ASC  NULLS LAST LIMIT 0X2;
SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((vt0.c0)AND((LOWER(DISTINCT vt0.c2) IN (CASE WHEN vt0.c0 THEN NULL WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END, vt0.c1 COLLATE RTRIM))))) LIMIT 3 INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((x'ef3a12')GLOB(vt0.c2)) IN (((('73653392', vt0.c1, vt0.c1))!=((vt0.c0, vt0.c1, vt0.c2)))))) LIMIT 0X3;
SELECT ALL * FROM vt0 WHERE ((((((((((((((vt0.c1, vt0.c0, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c1, vt0.c1, x'de7c6a')) AND (('-765618178', vt0.c2, vt0.c0, vt0.c1))))OR(((vt0.c0)AND(vt0.c2)))))OR(CAST(vt0.c0 AS NUMERIC))))OR(-819624949 COLLATE NOCASE)))OR((+ (vt0.c1)))))OR(((vt0.c1)>=(vt0.c1))))) ORDER BY (+ (-1)) COLLATE BINARY COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((((((((((((vt0.c1, vt0.c0, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c1, vt0.c1, x'de7c6a')) AND (('-765618178', vt0.c2, vt0.c0, vt0.c1))))OR(((vt0.c0)AND(vt0.c2)))))OR(CAST(vt0.c0 AS NUMERIC))))OR(0Xffffffffcf25840b COLLATE NOCASE)))OR((+ (vt0.c1)))))OR(((vt0.c1)=(vt0.c1))))) ORDER BY (+ (0xffffffffffffffff)) COLLATE BINARY COLLATE RTRIM DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((((((((((((((vt0.c1, vt0.c0, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c1, vt0.c1, x'de7c6a')) AND (('-765618178', vt0.c2, vt0.c0, vt0.c1))))OR(((vt0.c0)AND(vt0.c2)))))OR(CAST(vt0.c0 AS NUMERIC))))OR(-819624949 COLLATE NOCASE)))OR((+ (vt0.c1)))))OR(((vt0.c1)>=(vt0.c1))))) ORDER BY (+ (-1)) COLLATE BINARY COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((+ (vt0.c0))) BETWEEN (json_extract(vt0.c1, vt0.c1, vt0.c2)) AND (((vt0.c0)|(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((((+ (vt0.c0))) BETWEEN (json_extract(vt0.c1, vt0.c1, vt0.c2)) AND (((vt0.c0)|(vt0.c2)))))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c2)) COLLATE BINARY))) ORDER BY CAST(((vt0.c1)AND(NULL)) AS BLOB) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c0)AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c2))) BETWEEN ((~ (vt0.c1))) AND (CAST(vt0.c1 AS INTEGER)))) ORDER BY CAST(((vt0.c1)AND(NULL)) AS BLOB);
SELECT ALL * FROM vt0 WHERE ((((+ (vt0.c0))) BETWEEN (json_extract(vt0.c1, vt0.c1, vt0.c2)) AND (((vt0.c0)|(vt0.c2)))));
SELECT * FROM vt0 WHERE ((((vt0.c2, 0.3377109241018583)) NOT BETWEEN (((vt0.c1 IN (vt0.c1, x'd708')), vt0.c2 COLLATE BINARY)) AND ((vt0.c1 COLLATE BINARY, ((vt0.c1)<(vt0.c1)))))) ORDER BY -1.820249969E9 ASC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2, 0.3377109241018583)) NOT BETWEEN (((vt0.c1 IN (vt0.c1, x'd708')), vt0.c2 COLLATE BINARY)) AND ((vt0.c1 COLLATE BINARY, ((vt0.c1)<=(vt0.c1)))))) ORDER BY -1.820249969E9 ASC LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE x''  WHEN (((vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1)) AND ((vt0.c2, vt0.c0))) THEN CAST(vt0.c0 AS INTEGER) END) ORDER BY -1.820249969E9 ASC LIMIT 1;
SELECT * FROM vt0 WHERE ((((vt0.c2, 0.3377109241018583)) NOT BETWEEN (((vt0.c1 IN (vt0.c1, x'd708')), vt0.c2 COLLATE BINARY)) AND ((vt0.c1 COLLATE BINARY, ((vt0.c1)<(vt0.c1)))))) ORDER BY -1.820249969E9 ASC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2, 0.3377109241018583)) NOT BETWEEN (((vt0.c1 IN (vt0.c1, x'd708')), vt0.c2 COLLATE BINARY)) AND ((vt0.c1 COLLATE BINARY, ((vt0.c1)<=(vt0.c1)))))) ORDER BY -1.820249969E9 ASC LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE x''  WHEN (((vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1)) AND ((vt0.c2, vt0.c0))) THEN CAST(vt0.c0 AS INTEGER) END) ORDER BY -1.820249969E9 ASC LIMIT 1;
SELECT * FROM vt0 WHERE (CASE WHEN ((vt0.c1)*(vt0.c2)) THEN (vt0.c0 IN (0X248723ec)) WHEN ((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)) THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)) END) ORDER BY CAST(vt0.c1 AS BLOB) DESC  NULLS FIRST, (HEX(DISTINCT vt0.c2) IN (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)), ((vt0.c0)LIKE(vt0.c2)))) DESC, CAST(vt0.c1 AS TEXT) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c1)*(vt0.c2)) THEN (vt0.c0 IN (0x248723ec)) WHEN ((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)) THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)) END) ORDER BY CAST(vt0.c1 AS BLOB) DESC  NULLS FIRST, (HEX(DISTINCT vt0.c2) IN (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)), ((vt0.c0)LIKE(vt0.c2)))) DESC, CAST(vt0.c1 AS TEXT) COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (((vt0.c1)>(((vt0.c0) BETWEEN (vt0.c0) AND (0.24781645365156368))))) ORDER BY CAST(vt0.c1 AS BLOB) DESC  NULLS FIRST, (HEX(DISTINCT vt0.c2) IN (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)), ((vt0.c0)LIKE(vt0.c2)))) DESC, CAST(vt0.c1 AS TEXT) COLLATE BINARY ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (CASE WHEN ((vt0.c1)*(vt0.c2)) THEN (vt0.c0 IN (0X248723ec)) WHEN ((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)) THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)) END) ORDER BY CAST(vt0.c1 AS BLOB) DESC  NULLS FIRST, (HEX(DISTINCT vt0.c2) IN (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)), ((vt0.c0)LIKE(vt0.c2)))) DESC, CAST(vt0.c1 AS TEXT) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c1)*(vt0.c2)) THEN (vt0.c0 IN (0x248723ec)) WHEN ((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)) THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)) END) ORDER BY CAST(vt0.c1 AS BLOB) DESC  NULLS FIRST, (HEX(DISTINCT vt0.c2) IN (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)), ((vt0.c0)LIKE(vt0.c2)))) DESC, CAST(vt0.c1 AS TEXT) COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (((vt0.c1)>(((vt0.c0) BETWEEN (vt0.c0) AND (0.24781645365156368))))) ORDER BY CAST(vt0.c1 AS BLOB) DESC  NULLS FIRST, (HEX(DISTINCT vt0.c2) IN (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)), ((vt0.c0)LIKE(vt0.c2)))) DESC, CAST(vt0.c1 AS TEXT) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)>(vt0.c2))) BETWEEN (vt0.c1 COLLATE RTRIM) AND (((vt0.c2)>=(vt0.c0))))) ORDER BY ((((((((((vt0.c1)OR(vt0.c2)))OR(vt0.c2)))AND((NOT (vt0.c2)))))OR(((vt0.c2)>=(vt0.c1)))))OR(STRFTIME(vt0.c2, vt0.c1, vt0.c1)))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((((vt0.c0)>(vt0.c2))) BETWEEN (vt0.c1 COLLATE RTRIM) AND (((vt0.c2)>=(vt0.c0)))))AND((- (vt0.c2)) COLLATE NOCASE))) ORDER BY (CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END IN ()), ((CAST(vt0.c2 AS REAL)) BETWEEN ((vt0.c2 IN (vt0.c0))) AND (((vt0.c0) IS FALSE))) ASC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)>(vt0.c2))) BETWEEN (vt0.c1 COLLATE RTRIM) AND (((vt0.c2)>=(vt0.c0))))) ORDER BY ((((((((((vt0.c1)OR(vt0.c2)))OR(vt0.c2)))AND((NOT (vt0.c2)))))OR(((vt0.c2)>=(vt0.c1)))))OR(STRFTIME(vt0.c2, vt0.c1, vt0.c1)))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((((vt0.c0)>(vt0.c2))) BETWEEN (vt0.c1 COLLATE RTRIM) AND (((vt0.c2)>=(vt0.c0)))))AND((- (vt0.c2)) COLLATE NOCASE))) ORDER BY (CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END IN ()), ((CAST(vt0.c2 AS REAL)) BETWEEN ((vt0.c2 IN (vt0.c0))) AND (((vt0.c0) IS FALSE))) ASC  NULLS FIRST LIMIT 1;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((~ (vt0.c0 COLLATE NOCASE))) ORDER BY ((((vt0.c1)<(vt0.c1))) NOT NULL)  NULLS FIRST, ((((vt0.c2)>=(vt0.c2)))==(((((((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c1)))AND('1056033120')))OR(vt0.c2)))) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ((((~ (vt0.c0 COLLATE NOCASE)))AND((((0.6624198747339932 IN (vt0.c0)))!=(vt0.c2 COLLATE BINARY))))) ORDER BY ((((vt0.c1)<(vt0.c1))) NOT NULL)  NULLS FIRST, ((((vt0.c2)>=(vt0.c2)))==(((((((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c1)))AND('1056033120')))OR(vt0.c2)))) DESC  NULLS LAST;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((vt0.c0)|(UPPER(DISTINCT vt0.c1))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((vt0.c0)|(UPPER(DISTINCT vt0.c1)))) ORDER BY ((vt0.c2) NOT BETWEEN (0.49390007126825086) AND (vt0.c0)), ((((vt0.c1)<<(vt0.c1))) NOT BETWEEN ((NOT (vt0.c2))) AND (LIKELIHOOD(vt0.c1, vt0.c1)))  NULLS LAST, ((LIKELY(DISTINCT vt0.c1))/(((vt0.c0) IS TRUE))) DESC  NULLS FIRST;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((- (vt0.c1)));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((- (vt0.c1)))AND((CAST(vt0.c2 AS REAL) IN ((((vt0.c0, vt0.c1, vt0.c2))>((vt0.c1, vt0.c0, vt0.c1)))))))) ORDER BY CASE vt0.c0 COLLATE NOCASE  WHEN ((((((vt0.c0)AND(vt0.c1)))AND(0.5020372325967561)))AND(vt0.c1)) THEN '868781362' WHEN CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END THEN CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c1 END ELSE (- (vt0.c0)) END ASC, (((+ (vt0.c1)))<<(((vt0.c1)<=(vt0.c0)))) INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c1)||(vt0.c0)) AS TEXT)) ORDER BY CASE vt0.c0 COLLATE NOCASE  WHEN ((((((vt0.c0)AND(vt0.c1)))AND(0.5020372325967561)))AND(vt0.c1)) THEN '868781362' WHEN CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END THEN CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c1 END ELSE (- (vt0.c0)) END ASC, (((+ (vt0.c1)))<<(((vt0.c1)<=(vt0.c0))));
SELECT * FROM vt0 WHERE (x'');
SELECT * FROM vt0 WHERE (((x'')AND(((CAST(vt0.c0 AS BLOB))!=(vt0.c2))))) ORDER BY (~ (((vt0.c1) NOT NULL)))  NULLS LAST, ((vt0.c2) NOT NULL) ASC LIMIT 0X1 INTERSECT SELECT * FROM vt0 WHERE (CAST((((vt0.c0, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c0)) AND (('-242731873', vt0.c0))) AS REAL)) ORDER BY (~ (((vt0.c1) NOT NULL)))  NULLS LAST, ((vt0.c2) NOT NULL) ASC LIMIT 1;
SELECT * FROM vt0 WHERE (x'');
SELECT * FROM vt0 WHERE (((x'')AND(((CAST(vt0.c0 AS BLOB))!=(vt0.c2))))) ORDER BY (~ (((vt0.c1) NOT NULL)))  NULLS LAST, ((vt0.c2) NOT NULL) ASC LIMIT 0X1 INTERSECT SELECT * FROM vt0 WHERE (CAST((((vt0.c0, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c0)) AND (('-242731873', vt0.c0))) AS REAL)) ORDER BY (~ (((vt0.c1) NOT NULL)))  NULLS LAST, ((vt0.c2) NOT NULL) ASC LIMIT 1;
SELECT * FROM vt0 WHERE ((((vt0.c1, 1957825316)) BETWEEN ((CAST(1551872895 AS NUMERIC), x'2614')) AND ((vt0.c0 COLLATE RTRIM, CAST(vt0.c2 AS BLOB))))) ORDER BY (((vt0.c1 IN ()))OR(((vt0.c0)>=(vt0.c0)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c1, 0x74b20b24)) BETWEEN ((CAST(0X5c7fb37f AS NUMERIC), x'2614')) AND ((vt0.c0 COLLATE RTRIM, CAST(vt0.c2 AS BLOB)))))AND('0.9421326971323795'))) ORDER BY (((vt0.c1 IN ()))OR(((vt0.c0)>=(vt0.c0)))) ASC;
SELECT * FROM vt0 WHERE ((((vt0.c1, 1957825316)) BETWEEN ((CAST(1551872895 AS NUMERIC), x'2614')) AND ((vt0.c0 COLLATE RTRIM, CAST(vt0.c2 AS BLOB))))) ORDER BY (((vt0.c1 IN ()))OR(((vt0.c0)>=(vt0.c0)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c1, 0x74b20b24)) BETWEEN ((CAST(0X5c7fb37f AS NUMERIC), x'2614')) AND ((vt0.c0 COLLATE RTRIM, CAST(vt0.c2 AS BLOB)))))AND('0.9421326971323795'))) ORDER BY (((vt0.c1 IN ()))OR(((vt0.c0)>=(vt0.c0)))) ASC;
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE) IS TRUE));
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE) IS TRUE)) LIMIT 3;
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE) IS TRUE));
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE) IS TRUE)) LIMIT 3;
SELECT COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)))+(0.9875194355112784)), (vt0.c2 IN ()) ASC, vt0.c1;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c0))) IN (x'df')) DESC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (CAST((NOT (vt0.c2)) AS BLOB));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST((NOT (vt0.c2)) AS BLOB))AND(((vt0.c2) NOTNULL)))) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))AND(((vt0.c2) IS FALSE))))OR(((vt0.c1)GLOB(vt0.c2))))) LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY 'n&'  NULLS FIRST, (((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)), (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))), ((vt0.c1)==(vt0.c2))))!=(((vt0.c0 IN ()), ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), (+ (vt0.c1)))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY 'n&'  NULLS FIRST, (((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)), (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))), ((vt0.c1)=(vt0.c2))))!=(((vt0.c0 IN ()), ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), (+ (vt0.c1)))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)IS NOT(vt0.c0))) NOT NULL)) ORDER BY 'n&'  NULLS FIRST, (((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)), (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))), ((vt0.c1)==(vt0.c2))))!=(((vt0.c0 IN ()), ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), (+ (vt0.c1)))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY 'n&'  NULLS FIRST, (((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)), (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))), ((vt0.c1)==(vt0.c2))))!=(((vt0.c0 IN ()), ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), (+ (vt0.c1)))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY 'n&'  NULLS FIRST, (((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)), (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))), ((vt0.c1)=(vt0.c2))))!=(((vt0.c0 IN ()), ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), (+ (vt0.c1)))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)IS NOT(vt0.c0))) NOT NULL)) ORDER BY 'n&'  NULLS FIRST, (((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)), (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))), ((vt0.c1)==(vt0.c2))))!=(((vt0.c0 IN ()), ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), (+ (vt0.c1)))))  NULLS LAST;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) AS BLOB)) ORDER BY (- (((vt0.c2) NOT NULL)))  NULLS LAST, (((- (vt0.c0))) ISNULL) DESC  NULLS FIRST;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) AS BLOB)) ORDER BY ((highlight(vt0.c0, vt0.c1, vt0.c2, '錓')) ISNULL) LIMIT 0x1 INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (CAST((+ (vt0.c2)) AS TEXT)) ORDER BY ((highlight(vt0.c0, vt0.c1, vt0.c2, '錓')) ISNULL) LIMIT 1;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CASE WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN CASE -118678222  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END THEN (((vt0.c1, vt0.c0, vt0.c1, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c2, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c2, vt0.c1, vt0.c1))) ELSE (vt0.c2 IN (vt0.c1)) END) ORDER BY ((json(vt0.c0)) IS FALSE) ASC  NULLS FIRST;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((CASE WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN CASE -118678222  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END THEN (((vt0.c1, vt0.c0, vt0.c1, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c2, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c2, vt0.c1, vt0.c1))) ELSE (vt0.c2 IN (vt0.c1)) END)AND(LIKE(((((((((((vt0.c0)AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c2)))AND(vt0.c1)), (vt0.c1 IN (0.03017855399583358)), 'O')))) ORDER BY (('168265404') NOT BETWEEN (((vt0.c0)LIKE(vt0.c2))) AND (((vt0.c0) ISNULL))), ((((((((vt0.c2) NOT NULL))OR((+ (vt0.c2)))))AND((vt0.c1 IN (vt0.c2)))))OR(((('')) NOT BETWEEN ((vt0.c2)) AND ((0Xffffffffa7eb4afc))))), vt0.c1 ASC INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c2) NOT NULL)) BETWEEN (x'fc2e') AND ((+ (vt0.c2))))) ORDER BY (('168265404') NOT BETWEEN (((vt0.c0)LIKE(vt0.c2))) AND (((vt0.c0) ISNULL))), ((((((((vt0.c2) NOT NULL))OR((+ (vt0.c2)))))AND((vt0.c1 IN (vt0.c2)))))OR(((('')) NOT BETWEEN ((vt0.c2)) AND ((-1477752068))))), vt0.c1 ASC;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c0) NOTNULL))AND((((vt0.c1, vt0.c0))>((vt0.c0, vt0.c2))))))AND(0xffffffffdca3f9ba COLLATE NOCASE)))OR(CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END))) ORDER BY ((CAST(vt0.c2 AS INTEGER)) IS TRUE) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c0) NOTNULL))AND((((vt0.c1, vt0.c0))>((vt0.c0, vt0.c2))))))AND(-593233478 COLLATE NOCASE)))OR(CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END)))AND(TRIM((vt0.c0 IN (vt0.c2, vt0.c0)), (+ (vt0.c2)))))) ORDER BY (NOT (UNLIKELY(vt0.c0))) DESC LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c0) NOTNULL))AND((((vt0.c1, vt0.c0))>((vt0.c0, vt0.c2))))))AND(0xffffffffdca3f9ba COLLATE NOCASE)))OR(CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END))) ORDER BY ((CAST(vt0.c2 AS INTEGER)) IS TRUE) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c0) NOTNULL))AND((((vt0.c1, vt0.c0))>((vt0.c0, vt0.c2))))))AND(-593233478 COLLATE NOCASE)))OR(CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END)))AND(TRIM((vt0.c0 IN (vt0.c2, vt0.c0)), (+ (vt0.c2)))))) ORDER BY (NOT (UNLIKELY(vt0.c0))) DESC LIMIT 1;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (TYPEOF(DISTINCT vt0.c1)) ORDER BY ((((vt0.c1) NOT NULL))AND(x''))  NULLS LAST;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((TYPEOF(DISTINCT vt0.c1))AND(HEX(CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END)))) ORDER BY ((((vt0.c1) NOT NULL))AND(x''))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)) THEN ((vt0.c2)>(vt0.c0)) WHEN ((vt0.c2)-(vt0.c0)) THEN (0.679530167802179 IN (vt0.c2)) WHEN (('-2007656163')GLOB(vt0.c2)) THEN ((vt0.c0)GLOB(vt0.c1)) ELSE vt0.c0 COLLATE NOCASE END) ORDER BY (((vt0.c2)AND(vt0.c1)) IN (((vt0.c0) IS FALSE), ((vt0.c0)==(vt0.c2))));
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN ((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)) THEN ((vt0.c2)>(vt0.c0)) WHEN ((vt0.c2)-(vt0.c0)) THEN (0.679530167802179 IN (vt0.c2)) WHEN (('-2007656163')GLOB(vt0.c2)) THEN ((vt0.c0)GLOB(vt0.c1)) ELSE vt0.c0 COLLATE NOCASE END)AND((((- (vt0.c0)))%(''))))) ORDER BY 0.5473388122698563 DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)) THEN ((vt0.c2)>(vt0.c0)) WHEN ((vt0.c2)-(vt0.c0)) THEN (0.679530167802179 IN (vt0.c2)) WHEN (('-2007656163')GLOB(vt0.c2)) THEN ((vt0.c0)GLOB(vt0.c1)) ELSE vt0.c0 COLLATE NOCASE END) ORDER BY (((vt0.c2)AND(vt0.c1)) IN (((vt0.c0) IS FALSE), ((vt0.c0)==(vt0.c2))));
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN ((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)) THEN ((vt0.c2)>(vt0.c0)) WHEN ((vt0.c2)-(vt0.c0)) THEN (0.679530167802179 IN (vt0.c2)) WHEN (('-2007656163')GLOB(vt0.c2)) THEN ((vt0.c0)GLOB(vt0.c1)) ELSE vt0.c0 COLLATE NOCASE END)AND((((- (vt0.c0)))%(''))))) ORDER BY 0.5473388122698563 DESC  NULLS FIRST;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CASE vt0.c0 COLLATE BINARY  WHEN (((vt0.c2, NULL, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c2, vt0.c2)) AND ((vt0.c0, vt0.c2, vt0.c0))) THEN vt0.c1 WHEN (vt0.c2 IN ()) THEN ((vt0.c1)||(vt0.c0)) ELSE (+ (NULL)) END);
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (CASE vt0.c0 COLLATE BINARY  WHEN (((vt0.c2, NULL, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c2, vt0.c2)) AND ((vt0.c0, vt0.c2, vt0.c0))) THEN vt0.c1 WHEN (vt0.c2 IN ()) THEN ((vt0.c1)||(vt0.c0)) ELSE (+ (NULL)) END) INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((~ (vt0.c1)));
SELECT ALL * FROM vt0 WHERE (STRFTIME(((vt0.c2) ISNULL), (vt0.c2 IN (vt0.c1, vt0.c0)), (~ (vt0.c0)), CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END)) ORDER BY ((((vt0.c1)) BETWEEN ((vt0.c2)) AND ((vt0.c1))) IN ())  NULLS FIRST, (x'407f0f5c' IN ()) ASC;
SELECT ALL * FROM vt0 WHERE (STRFTIME(((vt0.c2) ISNULL), (vt0.c2 IN (vt0.c1, vt0.c0)), (~ (vt0.c0)), CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END)) ORDER BY (((- (vt0.c1)))<=((vt0.c2 IN (vt0.c1)))) DESC  NULLS FIRST, (((vt0.c2, vt0.c2, vt0.c1)) NOT BETWEEN (((vt0.c2 IN (vt0.c1)), ((((((vt0.c2)OR(vt0.c1)))OR(x'')))OR(vt0.c0)), (vt0.c0 IN (vt0.c1)))) AND ((CAST(vt0.c2 AS TEXT), NULL, (('-693784724') BETWEEN (-2.42731873E8) AND (NULL))))) ASC LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE ((((((vt0.c2, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1)) AND ((vt0.c1, '-222011921')))) NOT BETWEEN (((vt0.c2)GLOB(vt0.c0))) AND (((((vt0.c1)OR(vt0.c1)))AND(vt0.c0))))) ORDER BY (((- (vt0.c1)))<=((vt0.c2 IN (vt0.c1)))) DESC  NULLS FIRST, (((vt0.c2, vt0.c2, vt0.c1)) NOT BETWEEN (((vt0.c2 IN (vt0.c1)), ((((((vt0.c2)OR(vt0.c1)))OR(x'')))OR(vt0.c0)), (vt0.c0 IN (vt0.c1)))) AND ((CAST(vt0.c2 AS TEXT), NULL, (('-693784724') BETWEEN (-2.42731873E8) AND (NULL))))) ASC LIMIT 0;
SELECT ALL * FROM vt0 WHERE (STRFTIME(((vt0.c2) ISNULL), (vt0.c2 IN (vt0.c1, vt0.c0)), (~ (vt0.c0)), CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END)) ORDER BY ((((vt0.c1)) BETWEEN ((vt0.c2)) AND ((vt0.c1))) IN ())  NULLS FIRST, (x'407f0f5c' IN ()) ASC;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM) BETWEEN (CAST(vt0.c1 AS BLOB)) AND ((vt0.c2 IN (vt0.c0))))) ORDER BY ((vt0.c1)GLOB((vt0.c0 IN ()))), (- (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2))))  NULLS FIRST, vt0.c1 ASC  NULLS FIRST;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM) BETWEEN (CAST(vt0.c1 AS BLOB)) AND ((vt0.c2 IN (vt0.c0))))) ORDER BY ((vt0.c1)GLOB((vt0.c0 IN ()))), (- (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2))))  NULLS FIRST, vt0.c1 ASC  NULLS FIRST INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (LOWER(CASE WHEN vt0.c1 THEN vt0.c1 WHEN '1617089569' THEN 0.7431055384992047 ELSE vt0.c2 END)) ORDER BY ((vt0.c1)GLOB((vt0.c0 IN ()))), (- (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2))))  NULLS FIRST, vt0.c1 ASC  NULLS FIRST;
SELECT MAX(vt0.c1) FROM vt0 NOT INDEXED WHERE ((((((x'9d79', vt0.c2))<=((vt0.c0, vt0.c1)))) NOT BETWEEN (vt0.c1) AND (x'')));
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((((((x'9d79', vt0.c2))<=((vt0.c0, vt0.c1)))) NOT BETWEEN (vt0.c1) AND (x''))) ORDER BY ((((vt0.c0)|(vt0.c0))) NOTNULL), CASE vt0.c2 COLLATE BINARY  WHEN CAST(vt0.c0 AS BLOB) THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)) THEN vt0.c1 END ASC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT MAX(vt0.c1) FROM vt0 WHERE (CAST(x'20' AS BLOB) COLLATE BINARY) ORDER BY ((((vt0.c0)|(vt0.c0))) NOTNULL), CASE vt0.c2 COLLATE BINARY  WHEN CAST(vt0.c0 AS BLOB) THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)) THEN vt0.c1 END ASC  NULLS FIRST LIMIT 0x1;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CASE CASE vt0.c1  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END  WHEN TYPEOF(0.10732310129434719) THEN ((vt0.c1)&(vt0.c1)) WHEN x'c44e' THEN (((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c0, vt0.c2)) AND ((vt0.c1, vt0.c2, vt0.c2))) WHEN ((((vt0.c0)OR(vt0.c2)))AND(vt0.c2)) THEN ((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c2)))OR('')) ELSE x'' COLLATE BINARY END) ORDER BY ((CASE vt0.c2  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 END) NOTNULL) DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (CASE CASE vt0.c1  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END  WHEN TYPEOF(0.10732310129434719) THEN ((vt0.c1)&(vt0.c1)) WHEN x'c44e' THEN (((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c0, vt0.c2)) AND ((vt0.c1, vt0.c2, vt0.c2))) WHEN ((((vt0.c0)OR(vt0.c2)))AND(vt0.c2)) THEN ((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c2)))OR('')) ELSE x'' COLLATE BINARY END) ORDER BY (((vt0.c0 IN ())) BETWEEN ((vt0.c2 IN (vt0.c0))) AND (((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c0)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c1)LIKE(x'')))==(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN 'kg''韾1' THEN vt0.c0 END))) ORDER BY (((((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1)) AND ((x'28d4', 0.7696220480686069)))) IS TRUE) DESC, ((((CAST(vt0.c0 AS REAL))OR(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(SQLITE_VERSION()));
SELECT ALL * FROM vt0 WHERE (((((vt0.c1)LIKE(x'')))=(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN 'kg''韾1' THEN vt0.c0 END))) ORDER BY CAST((vt0.c2 IN (vt0.c1, vt0.c2)) AS NUMERIC)  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((((vt0.c1)LIKE(x'')))==(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN 'kg''韾1' THEN vt0.c0 END))) ORDER BY (((((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1)) AND ((x'28d4', 0.7696220480686069)))) IS TRUE) DESC, ((((CAST(vt0.c0 AS REAL))OR(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(SQLITE_VERSION()));
SELECT ALL * FROM vt0 WHERE (((((vt0.c1)LIKE(x'')))=(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN 'kg''韾1' THEN vt0.c0 END))) ORDER BY CAST((vt0.c2 IN (vt0.c1, vt0.c2)) AS NUMERIC)  NULLS FIRST LIMIT 0x0;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (x'') ORDER BY (CAST(vt0.c0 AS REAL) IN ((((vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))), NULL)), ((((((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1)))OR(0.9960005719254752)))OR(((vt0.c0) NOT NULL))))AND(((vt0.c2)||(vt0.c1)))) ASC  NULLS LAST;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((x'')AND(CAST(((vt0.c0) IS FALSE) AS INTEGER)))) ORDER BY vt0.c0 DESC  NULLS FIRST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c2 COLLATE BINARY);
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (vt0.c2 COLLATE BINARY);
SELECT * FROM vt0 WHERE (LOWER(vt0.c0));
SELECT DISTINCT * FROM vt0 WHERE (((LOWER(vt0.c0))AND(((((vt0.c2)>(vt0.c2))) NOTNULL)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULL) LIMIT 1;
SELECT * FROM vt0 WHERE (LOWER(vt0.c0));
SELECT DISTINCT * FROM vt0 WHERE (((LOWER(vt0.c0))AND(((((vt0.c2)>(vt0.c2))) NOTNULL)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULL) LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((1.617089569E9 COLLATE NOCASE)) AND ((((((vt0.c0)OR(vt0.c1)))OR('299343851')))))) ORDER BY CAST(vt0.c0 COLLATE BINARY AS INTEGER) DESC  NULLS LAST, vt0.c2, ((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c0)) COLLATE BINARY DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((1.617089569E9 COLLATE NOCASE)) AND ((((((vt0.c0)OR(vt0.c1)))OR('299343851')))))) ORDER BY (((vt0.c2 IN ()))<>(LIKELY(vt0.c1)))  NULLS LAST, (NOT (((vt0.c0)/(vt0.c1)))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULLIF(0.5873235446897689, (((vt0.c2, vt0.c1))=((vt0.c0, vt0.c1))))) ORDER BY (((vt0.c2 IN ()))!=(LIKELY(vt0.c1)))  NULLS LAST, (NOT (((vt0.c0)/(vt0.c1)))) LIMIT 0x2;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((1.617089569E9 COLLATE NOCASE)) AND ((((((vt0.c0)OR(vt0.c1)))OR('299343851')))))) ORDER BY CAST(vt0.c0 COLLATE BINARY AS INTEGER) DESC  NULLS LAST, vt0.c2, ((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c0)) COLLATE BINARY DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((1.617089569E9 COLLATE NOCASE)) AND ((((((vt0.c0)OR(vt0.c1)))OR('299343851')))))) ORDER BY (((vt0.c2 IN ()))<>(LIKELY(vt0.c1)))  NULLS LAST, (NOT (((vt0.c0)/(vt0.c1)))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULLIF(0.5873235446897689, (((vt0.c2, vt0.c1))=((vt0.c0, vt0.c1))))) ORDER BY (((vt0.c2 IN ()))!=(LIKELY(vt0.c1)))  NULLS LAST, (NOT (((vt0.c0)/(vt0.c1)))) LIMIT 0x2;
SELECT ALL * FROM vt0 WHERE (((((((TRIM(vt0.c2))AND(vt0.c1)))OR(((vt0.c0)/(vt0.c0)))))AND(((vt0.c0)<<(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((TRIM(vt0.c2))AND(vt0.c1)))OR(((vt0.c0)/(vt0.c0)))))AND(((vt0.c0)<<(vt0.c0))))) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((((((TRIM(vt0.c2))AND(vt0.c1)))OR(((vt0.c0)/(vt0.c0)))))AND(((vt0.c0)<<(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((TRIM(vt0.c2))AND(vt0.c1)))OR(((vt0.c0)/(vt0.c0)))))AND(((vt0.c0)<<(vt0.c0))))) LIMIT 0x1;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(STRFTIME(((((((0.822698702934329)OR(vt0.c0)))AND(vt0.c2)))AND(vt0.c1)), vt0.c2, ((vt0.c0) ISNULL), CAST(vt0.c1 AS NUMERIC), (vt0.c2 IN ()))))) ORDER BY vt0.c2  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE TRIM(vt0.c0, vt0.c2)  WHEN CAST(vt0.c0 AS REAL) THEN (((NULL, vt0.c0))==((NULL, vt0.c2))) WHEN vt0.c0 COLLATE RTRIM THEN '4[~S' END) ORDER BY vt0.c2  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(STRFTIME(((((((0.822698702934329)OR(vt0.c0)))AND(vt0.c2)))AND(vt0.c1)), vt0.c2, ((vt0.c0) ISNULL), CAST(vt0.c1 AS NUMERIC), (vt0.c2 IN ()))))) ORDER BY vt0.c2  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE TRIM(vt0.c0, vt0.c2)  WHEN CAST(vt0.c0 AS REAL) THEN (((NULL, vt0.c0))==((NULL, vt0.c2))) WHEN vt0.c0 COLLATE RTRIM THEN '4[~S' END) ORDER BY vt0.c2  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY ((vt0.c2)GLOB(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)))), ((((vt0.c0) NOT NULL)) NOTNULL) DESC, (~ (vt0.c2)) ASC  NULLS LAST, ((LOWER(x'cdd4'))<(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END));
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY ((vt0.c2)GLOB(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)))), ((((vt0.c0) NOT NULL)) NOTNULL) DESC, (~ (vt0.c2)) ASC  NULLS LAST, ((LOWER(x'cdd4'))<(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END)) LIMIT 0;
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY ((vt0.c2)GLOB(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)))), ((((vt0.c0) NOT NULL)) NOTNULL) DESC, (~ (vt0.c2)) ASC  NULLS LAST, ((LOWER(x'cdd4'))<(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END));
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY ((vt0.c2)GLOB(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)))), ((((vt0.c0) NOT NULL)) NOTNULL) DESC, (~ (vt0.c2)) ASC  NULLS LAST, ((LOWER(x'cdd4'))<(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END)) LIMIT 0;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c2)>=(vt0.c2)) IN (0xffffffff8c753236, vt0.c2 COLLATE BINARY, CAST(vt0.c1 AS REAL)))) ORDER BY ((((((((vt0.c1)AND(vt0.c1)))OR(((vt0.c1)>=(vt0.c0)))))AND(CAST(vt0.c1 AS REAL))))AND((- (vt0.c2)))) ASC;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c2)>=(vt0.c2)) IN (0Xffffffff8c753236, vt0.c2 COLLATE BINARY, CAST(vt0.c1 AS REAL)))) ORDER BY ((CAST(vt0.c2 AS NUMERIC))!=((NOT (vt0.c1))))  NULLS LAST, 0x0  NULLS FIRST, ((((vt0.c0) IS FALSE)) BETWEEN (-1.51357828E9) AND (((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))) INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((~ (CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN NULL THEN vt0.c2 WHEN 0.2647732474009391 THEN vt0.c0 ELSE vt0.c0 END))) ORDER BY ((CAST(vt0.c2 AS NUMERIC))<>((NOT (vt0.c1))))  NULLS LAST, 0X0  NULLS FIRST, ((((vt0.c0) IS FALSE)) BETWEEN (-1.51357828E9) AND (((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (vt0.c0) ORDER BY ((CASE NULL  WHEN vt0.c0 THEN '73653392' ELSE vt0.c1 END) ISNULL) DESC  NULLS FIRST, (((vt0.c0)) NOT BETWEEN (((((vt0.c1, vt0.c2))>=((vt0.c1, vt0.c2))))) AND ((vt0.c2))) DESC, ((((vt0.c1) IS FALSE))<(json_array_length(vt0.c0, vt0.c2)));
SELECT MIN(vt0.c0) FROM vt0 WHERE (vt0.c0) ORDER BY ((CASE NULL  WHEN vt0.c0 THEN '73653392' ELSE vt0.c1 END) ISNULL) DESC  NULLS FIRST, (((vt0.c0)) NOT BETWEEN (((((vt0.c1, vt0.c2))>=((vt0.c1, vt0.c2))))) AND ((vt0.c2))) DESC, ((((vt0.c1) IS FALSE))<(json_array_length(vt0.c0, vt0.c2))) LIMIT 0x1;
SELECT * FROM vt0 WHERE ((~ (NULLIF(vt0.c2, vt0.c2)))) ORDER BY NULLIF(0.15707578346992346, (((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((~ (NULLIF(vt0.c2, vt0.c2)))) ORDER BY NULLIF(0.15707578346992346, (((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULL) ORDER BY NULLIF(0.15707578346992346, (((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((~ (NULLIF(vt0.c2, vt0.c2)))) ORDER BY NULLIF(0.15707578346992346, (((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((~ (NULLIF(vt0.c2, vt0.c2)))) ORDER BY NULLIF(0.15707578346992346, (((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULL) ORDER BY NULLIF(0.15707578346992346, (((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE WHEN ((((((((vt0.c2)AND(vt0.c0)))OR(x'65dc')))OR(vt0.c2)))AND(vt0.c0)) THEN ((vt0.c1) NOT NULL) WHEN ((vt0.c2)IS(vt0.c0)) THEN ((vt0.c1)<=(x'25fd28')) ELSE CASE 0.43653007467692306  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END END) ORDER BY (- (((vt0.c1)=(NULL)))) ASC  NULLS LAST, CAST(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 END AS INTEGER) DESC, ((((((((((vt0.c2)OR(vt0.c0)))OR(vt0.c1)))AND(vt0.c2)))AND(vt0.c0))) BETWEEN (vt0.c2 COLLATE NOCASE) AND ((vt0.c2 IN (vt0.c2, vt0.c1)))) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CASE WHEN ((((((((vt0.c2)AND(vt0.c0)))OR(x'65dc')))OR(vt0.c2)))AND(vt0.c0)) THEN ((vt0.c1) NOT NULL) WHEN ((vt0.c2)IS(vt0.c0)) THEN ((vt0.c1)<=(x'25fd28')) ELSE CASE 0.43653007467692306  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END END)AND(vt0.c2))) ORDER BY '%쳦l' DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (x'0b') ORDER BY '&v', CASE WHEN ((((((((((vt0.c1)AND(0.28357082356139385)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)) THEN ((vt0.c0) NOT NULL) ELSE CASE WHEN vt0.c1 THEN vt0.c1 WHEN 0X2bad3db9 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END END DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((x'0b')AND(SQLITE_SOURCE_ID() COLLATE BINARY))) ORDER BY '&v', CASE WHEN ((((((((((vt0.c1)AND(0.28357082356139385)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)) THEN ((vt0.c0) NOT NULL) ELSE CASE WHEN vt0.c1 THEN vt0.c1 WHEN 732773817 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END END DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE ((((- (vt0.c1)))>>(((((vt0.c0)AND(vt0.c0)))OR(vt0.c1))))) ORDER BY '&v', CASE WHEN ((((((((((vt0.c1)AND(0.28357082356139385)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)) THEN ((vt0.c0) NOT NULL) ELSE CASE WHEN vt0.c1 THEN vt0.c1 WHEN 732773817 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END END DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (x'0b') ORDER BY '&v', CASE WHEN ((((((((((vt0.c1)AND(0.28357082356139385)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)) THEN ((vt0.c0) NOT NULL) ELSE CASE WHEN vt0.c1 THEN vt0.c1 WHEN 0X2bad3db9 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END END DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((x'0b')AND(SQLITE_SOURCE_ID() COLLATE BINARY))) ORDER BY '&v', CASE WHEN ((((((((((vt0.c1)AND(0.28357082356139385)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)) THEN ((vt0.c0) NOT NULL) ELSE CASE WHEN vt0.c1 THEN vt0.c1 WHEN 732773817 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END END DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE ((((- (vt0.c1)))>>(((((vt0.c0)AND(vt0.c0)))OR(vt0.c1))))) ORDER BY '&v', CASE WHEN ((((((((((vt0.c1)AND(0.28357082356139385)))AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)) THEN ((vt0.c0) NOT NULL) ELSE CASE WHEN vt0.c1 THEN vt0.c1 WHEN 732773817 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END END DESC  NULLS LAST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (0.9535738761866759) ORDER BY ((((((((vt0.c2)OR(NULL)))AND(vt0.c1)))OR(vt0.c2))) BETWEEN (0.005384718066741789) AND (vt0.c0))  NULLS LAST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (0.9535738761866759) ORDER BY ((((((((vt0.c2)OR(NULL)))AND(vt0.c1)))OR(vt0.c2))) BETWEEN (0.005384718066741789) AND (vt0.c0))  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE WHEN (vt0.c0 IN ()) THEN (NOT (vt0.c0)) ELSE (0.8587068464651193 IN ()) END);
SELECT ALL COUNT(*) FROM vt0 WHERE (((CASE WHEN (vt0.c0 IN ()) THEN (NOT (vt0.c0)) ELSE (0.8587068464651193 IN ()) END)AND(((COALESCE(vt0.c1, vt0.c1))>=(((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))))))) ORDER BY ((vt0.c0) NOT NULL) ASC  NULLS LAST LIMIT 0X2 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((TRIM(DISTINCT vt0.c1, vt0.c2))) AND ((((vt0.c1)GLOB(vt0.c2)))))) ORDER BY ((vt0.c0) NOT NULL) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((+ ((- (vt0.c0))))) ORDER BY LIKELIHOOD(vt0.c0, vt0.c0) COLLATE RTRIM, CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 END COLLATE BINARY;
SELECT * FROM vt0 WHERE ((+ ((- (vt0.c0))))) ORDER BY LIKELIHOOD(vt0.c0, vt0.c0) COLLATE RTRIM, CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 END COLLATE BINARY LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((+ ((- (vt0.c0))))) ORDER BY LIKELIHOOD(vt0.c0, vt0.c0) COLLATE RTRIM, CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 END COLLATE BINARY;
SELECT MAX(vt0.c2) FROM vt0 WHERE ((((((vt0.c0)AND('lVg扑07vzZ')))OR(vt0.c1)) IN (((vt0.c1)<<(vt0.c2))))) ORDER BY CASE WHEN '1221732791' THEN CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN '' WHEN vt0.c2 THEN vt0.c0 END WHEN (vt0.c2 IN ()) THEN ((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c0)) WHEN (((vt0.c1, vt0.c2, vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2, vt0.c2, vt0.c2)) AND ((vt0.c0, vt0.c1, vt0.c0, vt0.c1))) THEN CAST(vt0.c0 AS REAL) WHEN ((vt0.c2)>>(vt0.c1)) THEN ((((vt0.c1)AND(x'')))OR(vt0.c1)) ELSE '1493439261' END ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((((((vt0.c0)AND('lVg扑07vzZ')))OR(vt0.c1)) IN (((vt0.c1)<<(vt0.c2)))))AND(vt0.c2 COLLATE NOCASE COLLATE RTRIM))) ORDER BY (((0xffffffff81dd859a, '-517194034')) BETWEEN ((((vt0.c1)<=(vt0.c1)), ((((((NULL)OR(vt0.c1)))OR(vt0.c0)))AND(vt0.c0)))) AND ((((vt0.c1)AND(vt0.c2)), (((x'fe'))=((vt0.c1))))))  NULLS LAST, (((vt0.c0 IN (vt0.c2))) NOTNULL) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((~ (vt0.c1)))/(vt0.c0 COLLATE NOCASE))) ORDER BY (((0Xffffffff81dd859a, '-517194034')) BETWEEN ((((vt0.c1)<=(vt0.c1)), ((((((NULL)OR(vt0.c1)))OR(vt0.c0)))AND(vt0.c0)))) AND ((((vt0.c1)AND(vt0.c2)), (((x'fe'))=((vt0.c1))))))  NULLS LAST, (((vt0.c0 IN (vt0.c2))) NOTNULL) ASC LIMIT 0;
SELECT MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c0 COLLATE RTRIM))=((vt0.c0 COLLATE NOCASE)))) ORDER BY ((((vt0.c2)&(vt0.c2))) NOT NULL), ((((((0.5004523555497318) ISNULL))OR(NULL)))OR(CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 END)) DESC, ((MIN(vt0.c2, vt0.c1)) NOTNULL)  NULLS LAST;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE ((((((vt0.c0 COLLATE RTRIM))==((vt0.c0 COLLATE NOCASE))))AND((CAST(vt0.c1 AS TEXT) IN ())))) ORDER BY ((((vt0.c2)&(vt0.c2))) NOT NULL), ((((((0.5004523555497318) ISNULL))OR(NULL)))OR(CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 END)) DESC, ((MIN(vt0.c2, vt0.c1)) NOTNULL)  NULLS LAST LIMIT 1;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c0)) AS TEXT));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((CAST(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c0)) AS TEXT))AND(((- (vt0.c2)) IN ())))) ORDER BY ((((((vt0.c0)AND(vt0.c2)))OR(((((((vt0.c0)OR(200142515)))OR(vt0.c2)))OR(-1.485171834E9)))))AND(vt0.c2)) ASC  NULLS FIRST, load_extension(((((((vt0.c0)AND(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)), (((vt0.c2, vt0.c1, vt0.c1))>((vt0.c1, vt0.c0, vt0.c2)))) DESC  NULLS LAST, (((~ (vt0.c2)))<(vt0.c0))  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((vt0.c1)!=(vt0.c0)) COLLATE RTRIM) ORDER BY ((((((vt0.c0)AND(vt0.c2)))OR(((((((vt0.c0)OR(0xbedeeb3)))OR(vt0.c2)))OR(-1.485171834E9)))))AND(vt0.c2)) ASC  NULLS FIRST, load_extension(((((((vt0.c0)AND(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)), (((vt0.c2, vt0.c1, vt0.c1))>((vt0.c1, vt0.c0, vt0.c2)))) DESC  NULLS LAST, (((~ (vt0.c2)))<(vt0.c0))  NULLS FIRST LIMIT 0;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1))) BETWEEN (((NULL) NOT BETWEEN (vt0.c2) AND (x'cd3444eb7f'))) AND (((vt0.c2)<<('')))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1))) BETWEEN (((NULL) NOT BETWEEN (vt0.c2) AND (x'cd3444eb7f'))) AND (((vt0.c2)<<(''))))) LIMIT 3 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((TRIM(vt0.c1, vt0.c0)) ISNULL)) LIMIT 3;
SELECT ALL * FROM vt0 WHERE (((vt0.c1) ISNULL)) ORDER BY (((((vt0.c1) BETWEEN (vt0.c1) AND ('Uw<U3\'' ')), (~ (vt0.c0))))=((CAST(vt0.c0 AS BLOB), ((vt0.c1) IS TRUE)))), '822375506' DESC;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1) ISNULL)) ORDER BY (((((vt0.c1) BETWEEN (vt0.c1) AND ('Uw<U3\'' ')), (~ (vt0.c0))))=((CAST(vt0.c0 AS BLOB), ((vt0.c1) IS TRUE)))), '822375506' DESC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) ORDER BY (((((vt0.c1) BETWEEN (vt0.c1) AND ('Uw<U3\'' ')), (~ (vt0.c0))))=((CAST(vt0.c0 AS BLOB), ((vt0.c1) IS TRUE)))), '822375506' DESC LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (((vt0.c1) ISNULL)) ORDER BY (((((vt0.c1) BETWEEN (vt0.c1) AND ('Uw<U3\'' ')), (~ (vt0.c0))))=((CAST(vt0.c0 AS BLOB), ((vt0.c1) IS TRUE)))), '822375506' DESC;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1) ISNULL)) ORDER BY (((((vt0.c1) BETWEEN (vt0.c1) AND ('Uw<U3\'' ')), (~ (vt0.c0))))=((CAST(vt0.c0 AS BLOB), ((vt0.c1) IS TRUE)))), '822375506' DESC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) ORDER BY (((((vt0.c1) BETWEEN (vt0.c1) AND ('Uw<U3\'' ')), (~ (vt0.c0))))=((CAST(vt0.c0 AS BLOB), ((vt0.c1) IS TRUE)))), '822375506' DESC LIMIT 0X1;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((vt0.c1 IN (vt0.c1)) IN (((vt0.c0) IS TRUE)))) ORDER BY (NULLIF(vt0.c2, vt0.c1) IN (vt0.c1)) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c1 IN (vt0.c1)) IN (((vt0.c0) IS TRUE))))AND((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN (((+ (vt0.c2)), vt0.c0 COLLATE BINARY, (((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c0, vt0.c2))))) AND ((CAST(vt0.c0 AS REAL), ((vt0.c1)+(vt0.c0)), CAST(vt0.c0 AS TEXT))))))) ORDER BY (NULLIF(vt0.c2, vt0.c1) IN (vt0.c1)) DESC  NULLS LAST LIMIT 0;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (0.6704669330579802) ORDER BY ((CAST(vt0.c1 AS BLOB))%(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)))) ASC;
SELECT MIN(vt0.c2) FROM vt0 WHERE (0.6704669330579802) ORDER BY 0.5070238009219727;
SELECT * FROM vt0 WHERE ((((vt0.c1, vt0.c2, vt0.c0, vt0.c0)) BETWEEN ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 END, CASE x''  WHEN vt0.c1 THEN vt0.c2 END, CAST(vt0.c2 AS REAL), ((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))) AND ((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)), CASE WHEN 0.04382143161763363 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END, IFNULL(DISTINCT vt0.c2, vt0.c2)))));
SELECT * FROM vt0 WHERE ((((((vt0.c1, vt0.c2, vt0.c0, vt0.c0)) BETWEEN ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 END, CASE x''  WHEN vt0.c1 THEN vt0.c2 END, CAST(vt0.c2 AS REAL), ((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))) AND ((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)), CASE WHEN 0.04382143161763363 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END, IFNULL(DISTINCT vt0.c2, vt0.c2)))))AND(vt0.c0))) ORDER BY ((((vt0.c0)&(vt0.c2)))>>(((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2))));
SELECT * FROM vt0 WHERE ((((vt0.c1, vt0.c2, vt0.c0, vt0.c0)) BETWEEN ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 END, CASE x''  WHEN vt0.c1 THEN vt0.c2 END, CAST(vt0.c2 AS REAL), ((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))) AND ((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)), CASE WHEN 0.04382143161763363 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END, IFNULL(DISTINCT vt0.c2, vt0.c2)))));
SELECT * FROM vt0 WHERE ((((((vt0.c1, vt0.c2, vt0.c0, vt0.c0)) BETWEEN ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 END, CASE x''  WHEN vt0.c1 THEN vt0.c2 END, CAST(vt0.c2 AS REAL), ((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))) AND ((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 END, ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)), CASE WHEN 0.04382143161763363 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END, IFNULL(DISTINCT vt0.c2, vt0.c2)))))AND(vt0.c0))) ORDER BY ((((vt0.c0)&(vt0.c2)))>>(((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2))));
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c2 COLLATE RTRIM AS NUMERIC)) ORDER BY (((((0.7431055384992047, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c2, 0.8478734563850294)))) BETWEEN (((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0))) AND (CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN x'a29c13' END))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c2 COLLATE RTRIM AS NUMERIC)) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))&(CAST(NULL AS REAL))) ASC, json_extract(((vt0.c2)IS NOT(vt0.c0)), (vt0.c0 IN (vt0.c2)), ((x'') NOT BETWEEN (vt0.c0) AND (vt0.c1))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT * FROM vt0 WHERE ((- (((vt0.c1) NOTNULL)))) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))&(CAST(NULL AS REAL))) ASC, json_extract(((vt0.c2)IS NOT(vt0.c0)), (vt0.c0 IN (vt0.c2)), ((x'') NOT BETWEEN (vt0.c0) AND (vt0.c1))) ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c2 COLLATE RTRIM AS NUMERIC)) ORDER BY (((((0.7431055384992047, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c2, 0.8478734563850294)))) BETWEEN (((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0))) AND (CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN x'a29c13' END))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c2 COLLATE RTRIM AS NUMERIC)) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))&(CAST(NULL AS REAL))) ASC, json_extract(((vt0.c2)IS NOT(vt0.c0)), (vt0.c0 IN (vt0.c2)), ((x'') NOT BETWEEN (vt0.c0) AND (vt0.c1))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT * FROM vt0 WHERE ((- (((vt0.c1) NOTNULL)))) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))&(CAST(NULL AS REAL))) ASC, json_extract(((vt0.c2)IS NOT(vt0.c0)), (vt0.c0 IN (vt0.c2)), ((x'') NOT BETWEEN (vt0.c0) AND (vt0.c1))) ASC  NULLS FIRST LIMIT 0X0;
SELECT MAX(vt0.c1) FROM vt0 WHERE (((((((((((((((((((x'f62af8')OR(json_valid(vt0.c1))))OR((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c0))))))AND(CASE WHEN vt0.c0 THEN vt0.c0 END)))AND(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(((((((vt0.c1)AND(vt0.c2)))OR(NULL)))OR(vt0.c0)))))AND(CAST(vt0.c2 AS BLOB))))OR(LIKELY(vt0.c2))))OR(vt0.c2)))AND(((vt0.c0) IS TRUE)))) ORDER BY vt0.c2 ASC  NULLS FIRST, ((CAST(vt0.c2 AS NUMERIC))>=(((vt0.c0)IS(vt0.c0))))  NULLS LAST;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((((((((((((((((((x'f62af8')OR(json_valid(vt0.c1))))OR((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c0))))))AND(CASE WHEN vt0.c0 THEN vt0.c0 END)))AND(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(((((((vt0.c1)AND(vt0.c2)))OR(NULL)))OR(vt0.c0)))))AND(CAST(vt0.c2 AS BLOB))))OR(LIKELY(vt0.c2))))OR(vt0.c2)))AND(((vt0.c0) IS TRUE))))AND(((((((((vt0.c0)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1))) ISNULL)))) ORDER BY CAST(vt0.c1 AS BLOB) ASC  NULLS LAST, ((vt0.c2 COLLATE NOCASE) BETWEEN (((vt0.c2) NOTNULL)) AND (((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c2 COLLATE RTRIM);
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c2 COLLATE RTRIM) INTERSECT SELECT COUNT(*) FROM vt0 WHERE (x'61');
SELECT ALL * FROM vt0 WHERE ((((vt0.c2) IS FALSE) IN ())) ORDER BY ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c2) IS FALSE) IN ()))AND(((CAST(vt0.c1 AS NUMERIC)) IS FALSE)))) ORDER BY (((vt0.c2 IN (vt0.c2, vt0.c1, vt0.c0))) NOTNULL) DESC INTERSECT SELECT * FROM vt0 WHERE (CAST(((vt0.c0)&(vt0.c0)) AS REAL)) ORDER BY (((vt0.c2 IN (vt0.c2, vt0.c1, vt0.c0))) NOTNULL) DESC;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2) IS FALSE) IN ())) ORDER BY ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c2) IS FALSE) IN ()))AND(((CAST(vt0.c1 AS NUMERIC)) IS FALSE)))) ORDER BY (((vt0.c2 IN (vt0.c2, vt0.c1, vt0.c0))) NOTNULL) DESC INTERSECT SELECT * FROM vt0 WHERE (CAST(((vt0.c0)&(vt0.c0)) AS REAL)) ORDER BY (((vt0.c2 IN (vt0.c2, vt0.c1, vt0.c0))) NOTNULL) DESC;
SELECT ALL * FROM vt0 WHERE ((+ (((vt0.c2) IS TRUE))));
SELECT ALL * FROM vt0 WHERE ((+ (((vt0.c2) IS TRUE)))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((+ (((vt0.c2) IS TRUE))));
SELECT ALL * FROM vt0 WHERE ((+ (((vt0.c2) IS TRUE)))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (vt0.c2);
SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY (((0.1276639066378763))!=(((((vt0.c2, 0.3386605867003496, vt0.c1))>((vt0.c1, vt0.c0, vt0.c2)))))) ASC, (- (((((((vt0.c2)OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c2))));
SELECT ALL * FROM vt0 WHERE (vt0.c2);
SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY (((0.1276639066378763))!=(((((vt0.c2, 0.3386605867003496, vt0.c1))>((vt0.c1, vt0.c0, vt0.c2)))))) ASC, (- (((((((vt0.c2)OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c2))));
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(vt0.c1))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((NULL)IS(((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c0))))) LIMIT 0X0;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(vt0.c1))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((NULL)IS(((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c0))))) LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (((CAST(vt0.c1 AS NUMERIC))||(((vt0.c1) ISNULL)))) ORDER BY ((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 END)>((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))) DESC, CAST(CAST(vt0.c1 AS NUMERIC) AS INTEGER) ASC  NULLS FIRST, (((((((vt0.c1 IN (vt0.c0)))AND(((vt0.c1) NOT NULL))))OR(CAST(vt0.c1 AS REAL))))OR((NOT (vt0.c0))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c1 AS NUMERIC))||(((vt0.c1) ISNULL))))AND((NOT (((vt0.c1) NOT NULL)))))) ORDER BY ((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 END)>((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))) DESC, CAST(CAST(vt0.c1 AS NUMERIC) AS INTEGER) ASC  NULLS FIRST, (((((((vt0.c1 IN (vt0.c0)))AND(((vt0.c1) NOT NULL))))OR(CAST(vt0.c1 AS REAL))))OR((NOT (vt0.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt0 WHERE ((+ (CASE WHEN vt0.c1 THEN x'' ELSE vt0.c0 END))) ORDER BY ((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 END)>((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))) DESC, CAST(CAST(vt0.c1 AS NUMERIC) AS INTEGER) ASC  NULLS FIRST, (((((((vt0.c1 IN (vt0.c0)))AND(((vt0.c1) NOT NULL))))OR(CAST(vt0.c1 AS REAL))))OR((NOT (vt0.c0))))  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((CAST(vt0.c1 AS NUMERIC))||(((vt0.c1) ISNULL)))) ORDER BY ((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 END)>((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))) DESC, CAST(CAST(vt0.c1 AS NUMERIC) AS INTEGER) ASC  NULLS FIRST, (((((((vt0.c1 IN (vt0.c0)))AND(((vt0.c1) NOT NULL))))OR(CAST(vt0.c1 AS REAL))))OR((NOT (vt0.c0))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c1 AS NUMERIC))||(((vt0.c1) ISNULL))))AND((NOT (((vt0.c1) NOT NULL)))))) ORDER BY ((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 END)>((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))) DESC, CAST(CAST(vt0.c1 AS NUMERIC) AS INTEGER) ASC  NULLS FIRST, (((((((vt0.c1 IN (vt0.c0)))AND(((vt0.c1) NOT NULL))))OR(CAST(vt0.c1 AS REAL))))OR((NOT (vt0.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt0 WHERE ((+ (CASE WHEN vt0.c1 THEN x'' ELSE vt0.c0 END))) ORDER BY ((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 END)>((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))) DESC, CAST(CAST(vt0.c1 AS NUMERIC) AS INTEGER) ASC  NULLS FIRST, (((((((vt0.c1 IN (vt0.c0)))AND(((vt0.c1) NOT NULL))))OR(CAST(vt0.c1 AS REAL))))OR((NOT (vt0.c0))))  NULLS LAST LIMIT 0x1;
SELECT * FROM vt0 WHERE ((((vt0.c2) NOT NULL) IN ((((vt0.c1, vt0.c2, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c0, 0.08317223945000918)) AND ((vt0.c1, vt0.c1, 'n_', vt0.c1))), ((vt0.c2) IS TRUE))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2) NOT NULL) IN ((((vt0.c1, vt0.c2, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c0, 0.08317223945000918)) AND ((vt0.c1, vt0.c1, 'n_', vt0.c1))), ((vt0.c2) IS TRUE)))) ORDER BY ((((vt0.c2) NOT NULL)) NOT BETWEEN (((vt0.c2)LIKE(vt0.c1))) AND (((vt0.c0)=(vt0.c2)))) ASC, (NOT (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE ((((vt0.c2) NOT NULL) IN ((((vt0.c1, vt0.c2, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c0, 0.08317223945000918)) AND ((vt0.c1, vt0.c1, 'n_', vt0.c1))), ((vt0.c2) IS TRUE))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2) NOT NULL) IN ((((vt0.c1, vt0.c2, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c0, 0.08317223945000918)) AND ((vt0.c1, vt0.c1, 'n_', vt0.c1))), ((vt0.c2) IS TRUE)))) ORDER BY ((((vt0.c2) NOT NULL)) NOT BETWEEN (((vt0.c2)LIKE(vt0.c1))) AND (((vt0.c0)=(vt0.c2)))) ASC, (NOT (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c1)<<(ABS(vt0.c0)))) ORDER BY (CAST(vt0.c1 AS REAL) IN (((vt0.c1)>=(vt0.c1)))), vt0.c2 DESC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((vt0.c1)<<(ABS(vt0.c0))))AND((0.13016233224665485 IN ())))) ORDER BY (CAST(vt0.c1 AS REAL) IN (((vt0.c1)>=(vt0.c1)))), vt0.c2 DESC LIMIT 2;
SELECT MIN(vt0.c0) FROM vt0 WHERE ((vt0.c0 IN (vt0.c0, vt0.c0)) COLLATE NOCASE);
SELECT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0, vt0.c0)) COLLATE NOCASE)AND((((vt0.c1)) NOT BETWEEN ((((vt0.c0) IS TRUE))) AND ((((vt0.c1) IS TRUE))))))) LIMIT 0 INTERSECT SELECT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c0) IS TRUE) COLLATE BINARY) LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY vt0.c2 COLLATE NOCASE ASC;
SELECT ALL * FROM vt0 WHERE (((vt0.c1)AND((((vt0.c2 IN (vt0.c1)))==(CAST(vt0.c1 AS BLOB)))))) ORDER BY vt0.c2 COLLATE NOCASE ASC;
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY vt0.c2 COLLATE NOCASE ASC;
SELECT ALL * FROM vt0 WHERE (((vt0.c1)AND((((vt0.c2 IN (vt0.c1)))==(CAST(vt0.c1 AS BLOB)))))) ORDER BY vt0.c2 COLLATE NOCASE ASC;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((~ (vt0.c1)))|((vt0.c0 IN (vt0.c2)))));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((((~ (vt0.c1)))|((vt0.c0 IN (vt0.c2)))))AND((((((((vt0.c1 IN (vt0.c1, vt0.c1)))AND(CASE WHEN 0.5081933395376785 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END)))OR(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)))))AND(vt0.c2 COLLATE NOCASE))))) LIMIT 1;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN '0.42393097764992516' ELSE vt0.c1 END) NOT BETWEEN (((vt0.c1) BETWEEN (vt0.c2) AND (0xffffffffa6f1ef42))) AND (((vt0.c0)*(vt0.c1))))) ORDER BY NULL COLLATE NOCASE, CAST(((vt0.c0)/(vt0.c0)) AS NUMERIC) ASC  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN '0.42393097764992516' ELSE vt0.c1 END) NOT BETWEEN (((vt0.c1) BETWEEN (vt0.c2) AND (0Xffffffffa6f1ef42))) AND (((vt0.c0)*(vt0.c1)))))AND(((vt0.c1 IN (vt0.c0)) IN ((((vt0.c1, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c1)))))))) ORDER BY NULL COLLATE NOCASE, CAST(((vt0.c0)/(vt0.c0)) AS NUMERIC) ASC  NULLS LAST LIMIT 0X1;
SELECT COUNT(*) FROM vt0 WHERE (SQLITE_VERSION()) ORDER BY ABS(DISTINCT (((vt0.c1, vt0.c1))>((vt0.c0, vt0.c0)))) DESC  NULLS FIRST, (((vt0.c0, vt0.c2, vt0.c0, vt0.c0)) BETWEEN ((vt0.c1, NULL, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c1, vt0.c1, vt0.c0))) COLLATE NOCASE ASC;
SELECT ALL COUNT(*) FROM vt0 WHERE (((SQLITE_VERSION())AND((vt0.c2 IN (vt0.c2)) COLLATE NOCASE))) ORDER BY ABS(DISTINCT (((vt0.c1, vt0.c1))>((vt0.c0, vt0.c0)))) DESC  NULLS FIRST, (((vt0.c0, vt0.c2, vt0.c0, vt0.c0)) BETWEEN ((vt0.c1, NULL, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c1, vt0.c1, vt0.c0))) COLLATE NOCASE ASC;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN ()));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN ()))AND(vt0.c0))) INTERSECT SELECT ALL * FROM vt0 WHERE (CASE vt0.c1 COLLATE BINARY  WHEN vt0.c1 COLLATE RTRIM THEN ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(0.567095513064274)) WHEN ((vt0.c0)=(vt0.c1)) THEN CAST(vt0.c2 AS BLOB) END);
SELECT ALL * FROM vt0 WHERE ((((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN ()));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN ()))AND(vt0.c0))) INTERSECT SELECT ALL * FROM vt0 WHERE (CASE vt0.c1 COLLATE BINARY  WHEN vt0.c1 COLLATE RTRIM THEN ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(0.567095513064274)) WHEN ((vt0.c0)=(vt0.c1)) THEN CAST(vt0.c2 AS BLOB) END);
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1, vt0.c0, vt0.c1, vt0.c0)) BETWEEN ((vt0.c0, 4.38110496E8, vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c1))))||('-1577471228'))) ORDER BY ((((0X22128e4b)AND(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c2 END)))AND(CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN 'C6d6᛭Aj' END)) DESC;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1, vt0.c0, vt0.c1, vt0.c0)) BETWEEN ((vt0.c0, 4.38110496E8, vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c1))))||('-1577471228'))) ORDER BY ((NOT (vt0.c2)) IN (vt0.c2 COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1, vt0.c0, vt0.c1, vt0.c0)) BETWEEN ((vt0.c0, 4.38110496E8, vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c1))))||('-1577471228'))) ORDER BY ((((0X22128e4b)AND(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c2 END)))AND(CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN 'C6d6᛭Aj' END)) DESC;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1, vt0.c0, vt0.c1, vt0.c0)) BETWEEN ((vt0.c0, 4.38110496E8, vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c1))))||('-1577471228'))) ORDER BY ((NOT (vt0.c2)) IN (vt0.c2 COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0 WHERE (((((((((((vt0.c2)AND((~ (NULL)))))OR(((vt0.c1) NOTNULL))))OR(vt0.c1 COLLATE BINARY)))AND((vt0.c2 IN (vt0.c1, vt0.c1)))))OR('-1581179737')));
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c2)AND((~ (NULL)))))OR(((vt0.c1) NOTNULL))))OR(vt0.c1 COLLATE BINARY)))AND((vt0.c2 IN (vt0.c1, vt0.c1)))))OR('-1581179737'))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2) ISNULL) IN ()));
SELECT * FROM vt0 WHERE (((((((((((vt0.c2)AND((~ (NULL)))))OR(((vt0.c1) NOTNULL))))OR(vt0.c1 COLLATE BINARY)))AND((vt0.c2 IN (vt0.c1, vt0.c1)))))OR('-1581179737')));
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c2)AND((~ (NULL)))))OR(((vt0.c1) NOTNULL))))OR(vt0.c1 COLLATE BINARY)))AND((vt0.c2 IN (vt0.c1, vt0.c1)))))OR('-1581179737'))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2) ISNULL) IN ()));
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c2 IN ())) NOT NULL)) ORDER BY ((((((x'')OR(x'c7d4')))OR((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c0)) BETWEEN ((vt0.c2, vt0.c1, 'rX8-4', vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1, vt0.c1, vt0.c0))))))OR(((((vt0.c2)OR(x'cee0')))AND(vt0.c1))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((vt0.c2 IN ())) NOT NULL))AND((vt0.c1 IN (vt0.c2)) COLLATE BINARY COLLATE BINARY))) ORDER BY ((((((x'')OR(x'c7d4')))OR((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c0)) BETWEEN ((vt0.c2, vt0.c1, 'rX8-4', vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1, vt0.c1, vt0.c0))))))OR(((((vt0.c2)OR(x'cee0')))AND(vt0.c1))))  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((vt0.c1 IN (vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END, ((vt0.c0)==(vt0.c2))))<=(((vt0.c0 IN (vt0.c1)), ((vt0.c1) NOTNULL), CAST(vt0.c1 AS TEXT))))) ORDER BY ((((((x'')OR(x'c7d4')))OR((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c0)) BETWEEN ((vt0.c2, vt0.c1, 'rX8-4', vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1, vt0.c1, vt0.c0))))))OR(((((vt0.c2)OR(x'cee0')))AND(vt0.c1))))  NULLS FIRST LIMIT 0x2;
SELECT ALL COUNT(*) FROM vt0 WHERE (COALESCE(DISTINCT vt0.c1, vt0.c2) COLLATE NOCASE COLLATE RTRIM) ORDER BY ((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))) NOT BETWEEN (json_type(vt0.c1)) AND (((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0)))) ASC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (COALESCE(DISTINCT vt0.c1, vt0.c2) COLLATE NOCASE COLLATE RTRIM) ORDER BY NULLIF(vt0.c0, vt0.c2) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CAST((+ (vt0.c1)) AS TEXT)) ORDER BY NULLIF(vt0.c0, vt0.c2);
SELECT ALL * FROM vt0 WHERE (((((NULL) NOTNULL))/(vt0.c1 COLLATE BINARY))) ORDER BY CAST(((vt0.c1) IS TRUE) AS REAL)  NULLS FIRST, ((((((((CASE vt0.c2  WHEN vt0.c2 THEN 0Xffffffffcc600db9 WHEN vt0.c0 THEN '617402341' WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)OR(((((((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c1)))AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c0)))))AND(vt0.c1 COLLATE BINARY)))AND((+ (vt0.c0)))))AND((((vt0.c2, vt0.c0))<((vt0.c2, vt0.c1))))), 0.516731353303703 DESC;
SELECT ALL * FROM vt0 WHERE (((((NULL) NOTNULL))/(vt0.c1 COLLATE BINARY))) ORDER BY CAST(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END AS REAL) ASC  NULLS FIRST, (((((vt0.c1))<>((vt0.c1))))<((((vt0.c1, vt0.c2))<=((vt0.c2, vt0.c2))))) ASC  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE ((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2))))<>(((((NULL, vt0.c2))>=((vt0.c1, vt0.c0))))))) ORDER BY CAST(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END AS REAL) ASC  NULLS FIRST, (((((vt0.c1))<>((vt0.c1))))<((((vt0.c1, vt0.c2))<=((vt0.c2, vt0.c2))))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((NULL) NOTNULL))/(vt0.c1 COLLATE BINARY))) ORDER BY CAST(((vt0.c1) IS TRUE) AS REAL)  NULLS FIRST, ((((((((CASE vt0.c2  WHEN vt0.c2 THEN 0Xffffffffcc600db9 WHEN vt0.c0 THEN '617402341' WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)OR(((((((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c1)))AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c0)))))AND(vt0.c1 COLLATE BINARY)))AND((+ (vt0.c0)))))AND((((vt0.c2, vt0.c0))<((vt0.c2, vt0.c1))))), 0.516731353303703 DESC;
SELECT ALL * FROM vt0 WHERE (((((NULL) NOTNULL))/(vt0.c1 COLLATE BINARY))) ORDER BY CAST(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END AS REAL) ASC  NULLS FIRST, (((((vt0.c1))<>((vt0.c1))))<((((vt0.c1, vt0.c2))<=((vt0.c2, vt0.c2))))) ASC  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE ((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2))))<>(((((NULL, vt0.c2))>=((vt0.c1, vt0.c0))))))) ORDER BY CAST(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END AS REAL) ASC  NULLS FIRST, (((((vt0.c1))<>((vt0.c1))))<((((vt0.c1, vt0.c2))<=((vt0.c2, vt0.c2))))) ASC  NULLS FIRST;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c1)))AND((- (vt0.c1))))) ORDER BY '';
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c1)))AND((- (vt0.c1))))) ORDER BY vt0.c0  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((0.0823963537078346 IN (((x'') IS TRUE)))) ORDER BY ((DATE(vt0.c0, vt0.c1, vt0.c1, vt0.c1))|(((vt0.c2)>(vt0.c2)))) ASC, ((((((((((vt0.c1)OR(vt0.c2)))OR('lvg扑07vzz')))OR(vt0.c2)))OR(vt0.c0)))>>((vt0.c2 IN ())));
SELECT ALL * FROM vt0 WHERE ((0.0823963537078346 IN (((x'') IS TRUE)))) ORDER BY ((DATE(vt0.c0, vt0.c1, vt0.c1, vt0.c1))|(((vt0.c2)>(vt0.c2)))) ASC, ((((((((((vt0.c1)OR(vt0.c2)))OR('lvg扑07vzz')))OR(vt0.c2)))OR(vt0.c0)))>>((vt0.c2 IN ()))) LIMIT 3 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2)AND(vt0.c0))) NOT BETWEEN (CAST(vt0.c1 AS INTEGER)) AND (vt0.c2))) ORDER BY ((DATE(vt0.c0, vt0.c1, vt0.c1, vt0.c1))|(((vt0.c2)>(vt0.c2)))) ASC, ((((((((((vt0.c1)OR(vt0.c2)))OR('lvg扑07vzz')))OR(vt0.c2)))OR(vt0.c0)))>>((vt0.c2 IN ()))) LIMIT 3;
SELECT ALL * FROM vt0 WHERE ((0.0823963537078346 IN (((x'') IS TRUE)))) ORDER BY ((DATE(vt0.c0, vt0.c1, vt0.c1, vt0.c1))|(((vt0.c2)>(vt0.c2)))) ASC, ((((((((((vt0.c1)OR(vt0.c2)))OR('lvg扑07vzz')))OR(vt0.c2)))OR(vt0.c0)))>>((vt0.c2 IN ())));
SELECT ALL * FROM vt0 WHERE ((0.0823963537078346 IN (((x'') IS TRUE)))) ORDER BY ((DATE(vt0.c0, vt0.c1, vt0.c1, vt0.c1))|(((vt0.c2)>(vt0.c2)))) ASC, ((((((((((vt0.c1)OR(vt0.c2)))OR('lvg扑07vzz')))OR(vt0.c2)))OR(vt0.c0)))>>((vt0.c2 IN ()))) LIMIT 3 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2)AND(vt0.c0))) NOT BETWEEN (CAST(vt0.c1 AS INTEGER)) AND (vt0.c2))) ORDER BY ((DATE(vt0.c0, vt0.c1, vt0.c1, vt0.c1))|(((vt0.c2)>(vt0.c2)))) ASC, ((((((((((vt0.c1)OR(vt0.c2)))OR('lvg扑07vzz')))OR(vt0.c2)))OR(vt0.c0)))>>((vt0.c2 IN ()))) LIMIT 3;
SELECT * FROM vt0 WHERE ((((x'')) BETWEEN ((vt0.c1)) AND (((vt0.c1 IN ()))))) ORDER BY ((vt0.c0) ISNULL) COLLATE RTRIM DESC;
SELECT * FROM vt0 WHERE ((((((x'')) BETWEEN ((vt0.c1)) AND (((vt0.c1 IN ())))))AND(((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c0 END) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND ((('37pi3
!Y') BETWEEN (vt0.c2) AND (vt0.c0))))))) ORDER BY (((vt0.c2, vt0.c0, vt0.c1))<>((vt0.c2, vt0.c2, vt0.c2))) COLLATE RTRIM;
SELECT * FROM vt0 WHERE ((((x'')) BETWEEN ((vt0.c1)) AND (((vt0.c1 IN ()))))) ORDER BY ((vt0.c0) ISNULL) COLLATE RTRIM DESC;
SELECT * FROM vt0 WHERE ((((((x'')) BETWEEN ((vt0.c1)) AND (((vt0.c1 IN ())))))AND(((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c0 END) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND ((('37pi3
!Y') BETWEEN (vt0.c2) AND (vt0.c0))))))) ORDER BY (((vt0.c2, vt0.c0, vt0.c1))<>((vt0.c2, vt0.c2, vt0.c2))) COLLATE RTRIM;
SELECT * FROM vt0 WHERE ((((vt0.c1 IN (NULL)))OR((vt0.c1 IN (vt0.c2))))) ORDER BY TRIM(DISTINCT ((vt0.c0)GLOB(vt0.c0)))  NULLS LAST, (vt0.c1 IN (((vt0.c2)<<(vt0.c0)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1 IN (NULL)))OR((vt0.c1 IN (vt0.c2))))) ORDER BY (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)) IN (((vt0.c0)&(vt0.c2)))) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE ((((vt0.c1 IN (NULL)))OR((vt0.c1 IN (vt0.c2))))) ORDER BY TRIM(DISTINCT ((vt0.c0)GLOB(vt0.c0)))  NULLS LAST, (vt0.c1 IN (((vt0.c2)<<(vt0.c0)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1 IN (NULL)))OR((vt0.c1 IN (vt0.c2))))) ORDER BY (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)) IN (((vt0.c0)&(vt0.c2)))) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((((vt0.c0 IN (vt0.c2, vt0.c1)), CASE vt0.c0  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END, vt0.c1 COLLATE NOCASE, ((vt0.c1)+(vt0.c0))))!=(((((vt0.c0, x'')) BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c2))), (vt0.c2 IN ()), ((vt0.c1)<(vt0.c0)), LIKELIHOOD(vt0.c0, vt0.c2))))) ORDER BY (((vt0.c1, vt0.c2)) BETWEEN (((('pd촏') NOT NULL), (vt0.c1 IN ()))) AND ((CASE WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END, ((vt0.c0) IS FALSE)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0 IN (vt0.c2, vt0.c1)), CASE vt0.c0  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END, vt0.c1 COLLATE NOCASE, ((vt0.c1)+(vt0.c0))))>(((((vt0.c0, x'')) BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c2))), (vt0.c2 IN ()), ((vt0.c1)<(vt0.c0)), LIKELIHOOD(vt0.c0, vt0.c2))))) ORDER BY (((vt0.c1, vt0.c2)) BETWEEN (((('pd촏') NOT NULL), (vt0.c1 IN ()))) AND ((CASE WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END, ((vt0.c0) IS FALSE)))) ASC LIMIT 0X1;
SELECT * FROM vt0 WHERE (((((vt0.c0 IN (vt0.c2, vt0.c1)), CASE vt0.c0  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END, vt0.c1 COLLATE NOCASE, ((vt0.c1)+(vt0.c0))))!=(((((vt0.c0, x'')) BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c2))), (vt0.c2 IN ()), ((vt0.c1)<(vt0.c0)), LIKELIHOOD(vt0.c0, vt0.c2))))) ORDER BY (((vt0.c1, vt0.c2)) BETWEEN (((('pd촏') NOT NULL), (vt0.c1 IN ()))) AND ((CASE WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END, ((vt0.c0) IS FALSE)))) ASC;
SELECT * FROM vt0 WHERE (((((NULL) NOT BETWEEN (vt0.c2) AND (vt0.c2))) BETWEEN (LOWER(DISTINCT vt0.c0)) AND (CAST(vt0.c2 AS REAL))));
SELECT DISTINCT * FROM vt0 WHERE (((((NULL) NOT BETWEEN (vt0.c2) AND (vt0.c2))) BETWEEN (LOWER(DISTINCT vt0.c0)) AND (CAST(vt0.c2 AS REAL)))) ORDER BY (NOT (LENGTH(vt0.c0)))  NULLS LAST, ((vt0.c0 COLLATE RTRIM) BETWEEN (((vt0.c2) IS TRUE)) AND (CAST(vt0.c0 AS NUMERIC))) ASC;
SELECT * FROM vt0 WHERE (((((NULL) NOT BETWEEN (vt0.c2) AND (vt0.c2))) BETWEEN (LOWER(DISTINCT vt0.c0)) AND (CAST(vt0.c2 AS REAL))));
SELECT DISTINCT * FROM vt0 WHERE (((((NULL) NOT BETWEEN (vt0.c2) AND (vt0.c2))) BETWEEN (LOWER(DISTINCT vt0.c0)) AND (CAST(vt0.c2 AS REAL)))) ORDER BY (NOT (LENGTH(vt0.c0)))  NULLS LAST, ((vt0.c0 COLLATE RTRIM) BETWEEN (((vt0.c2) IS TRUE)) AND (CAST(vt0.c0 AS NUMERIC))) ASC;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((vt0.c2, vt0.c1, vt0.c1, vt0.c2, vt0.c1))>=((vt0.c0, '
', vt0.c1, vt0.c1, vt0.c0))))/((vt0.c1 IN (vt0.c0))))) ORDER BY vt0.c1 DESC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((((vt0.c2, vt0.c1, vt0.c1, vt0.c2, vt0.c1))>=((vt0.c0, '
', vt0.c1, vt0.c1, vt0.c0))))/((vt0.c1 IN (vt0.c0)))))AND(vt0.c2))) ORDER BY vt0.c1 DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE WHEN vt0.c1 COLLATE NOCASE THEN ((vt0.c2)>>(vt0.c1)) ELSE '2079898264' END) ORDER BY vt0.c1 DESC;
SELECT * FROM vt0 WHERE ((- ((vt0.c2 IN (vt0.c0))))) ORDER BY (((vt0.c1, vt0.c0, vt0.c0))<((vt0.c1, vt0.c2, vt0.c0))) COLLATE NOCASE;
SELECT * FROM vt0 WHERE ((((- ((vt0.c2 IN (vt0.c0)))))AND(UNLIKELY(DISTINCT CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c1 END)))) ORDER BY (((vt0.c1, vt0.c0, vt0.c0))<((vt0.c1, vt0.c2, vt0.c0))) COLLATE NOCASE;
SELECT * FROM vt0 WHERE ((- ((vt0.c2 IN (vt0.c0))))) ORDER BY (((vt0.c1, vt0.c0, vt0.c0))<((vt0.c1, vt0.c2, vt0.c0))) COLLATE NOCASE;
SELECT * FROM vt0 WHERE ((((- ((vt0.c2 IN (vt0.c0)))))AND(UNLIKELY(DISTINCT CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c1 END)))) ORDER BY (((vt0.c1, vt0.c0, vt0.c0))<((vt0.c1, vt0.c2, vt0.c0))) COLLATE NOCASE;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((((((vt0.c2, vt0.c0, vt0.c2, vt0.c2)) BETWEEN ((vt0.c0, vt0.c2, vt0.c2, x'')) AND ((vt0.c2, vt0.c1, vt0.c2, vt0.c1)))))<=((vt0.c1 COLLATE RTRIM)))) ORDER BY CASE WHEN vt0.c0 COLLATE RTRIM THEN (((vt0.c1, vt0.c0))>((vt0.c2, vt0.c2))) WHEN CAST(vt0.c1 AS NUMERIC) THEN TIME(vt0.c2, vt0.c1, vt0.c0, vt0.c1) END ASC  NULLS LAST, (('9t?+
eK4햀') NOT BETWEEN (vt0.c0) AND (vt0.c1)) COLLATE NOCASE  NULLS LAST, (('1056033120')-(vt0.c0)) ASC  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((((((((vt0.c2, vt0.c0, vt0.c2, vt0.c2)) BETWEEN ((vt0.c0, vt0.c2, vt0.c2, x'')) AND ((vt0.c2, vt0.c1, vt0.c2, vt0.c1)))))<((vt0.c1 COLLATE RTRIM))))AND((((((vt0.c0 IN ()))AND(((((((((vt0.c0)OR(vt0.c1)))OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c0)))))AND(((((((vt0.c0)OR(vt0.c0)))OR(x'6d')))OR(vt0.c1))))))) ORDER BY ((((((vt0.c1)AND(vt0.c2)))AND(((vt0.c2)||(vt0.c2)))))OR(vt0.c1))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END)|(((vt0.c1) IS FALSE)))) ORDER BY ((((((vt0.c1)AND(vt0.c2)))AND(((vt0.c2)||(vt0.c2)))))OR(vt0.c1))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CASE vt0.c0  WHEN (vt0.c2 IN ()) THEN CAST(vt0.c0 AS NUMERIC) ELSE (vt0.c0 IN ()) END) ORDER BY 0.0036187144534084448;
SELECT DISTINCT * FROM vt0 WHERE (CASE vt0.c0  WHEN (vt0.c2 IN ()) THEN CAST(vt0.c0 AS NUMERIC) ELSE (vt0.c0 IN ()) END) ORDER BY 0.0036187144534084448 LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END, CASE WHEN vt0.c0 THEN vt0.c2 END, ((((vt0.c2)OR(vt0.c1)))AND(vt0.c0)), vt0.c1 COLLATE BINARY))<((vt0.c2, (x'1b' IN (vt0.c1)), CAST(vt0.c1 AS TEXT), (- (vt0.c1)))))) ORDER BY 0.0036187144534084448 LIMIT 3;
SELECT ALL * FROM vt0 WHERE (CASE vt0.c0  WHEN (vt0.c2 IN ()) THEN CAST(vt0.c0 AS NUMERIC) ELSE (vt0.c0 IN ()) END) ORDER BY 0.0036187144534084448;
SELECT DISTINCT * FROM vt0 WHERE (CASE vt0.c0  WHEN (vt0.c2 IN ()) THEN CAST(vt0.c0 AS NUMERIC) ELSE (vt0.c0 IN ()) END) ORDER BY 0.0036187144534084448 LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END, CASE WHEN vt0.c0 THEN vt0.c2 END, ((((vt0.c2)OR(vt0.c1)))AND(vt0.c0)), vt0.c1 COLLATE BINARY))<((vt0.c2, (x'1b' IN (vt0.c1)), CAST(vt0.c1 AS TEXT), (- (vt0.c1)))))) ORDER BY 0.0036187144534084448 LIMIT 3;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((((vt0.c2) NOT NULL))IS NOT(((vt0.c1) IS TRUE))));
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((((((vt0.c2) NOT NULL))IS NOT(((vt0.c1) IS TRUE))))AND(((((((((CASE WHEN '[{eQEeD!K' THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN NULL WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 END)AND((((vt0.c2, vt0.c0, vt0.c1, vt0.c1)) NOT BETWEEN ((vt0.c2, -8.9172283E8, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c2, vt0.c2, vt0.c1))))))AND(((vt0.c0)IS NOT('-D')))))AND((((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c0, vt0.c2))))))AND(0.22137530896621738))))) LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c2) IS TRUE) COLLATE BINARY) ORDER BY (('612836332') NOT BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END) AND ((~ (vt0.c0))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c2) IS TRUE) COLLATE BINARY) ORDER BY -1.383487729E9 COLLATE NOCASE ASC  NULLS LAST, ((((rtreenode(vt0.c2, vt0.c1))OR(((vt0.c2) IS TRUE))))AND(LIKELY(vt0.c2))) DESC, ((TRIM(vt0.c1, vt0.c2)) NOT BETWEEN (((vt0.c2)>(vt0.c1))) AND (((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 NOT INDEXED WHERE (((SQLITE_SOURCE_ID()) BETWEEN ((vt0.c1 IN (vt0.c0))) AND (vt0.c1 COLLATE RTRIM))) ORDER BY -1.383487729E9 COLLATE NOCASE ASC  NULLS LAST, ((((rtreenode(vt0.c2, vt0.c1))OR(((vt0.c2) IS TRUE))))AND(LIKELY(vt0.c2))) DESC, ((TRIM(vt0.c1, vt0.c2)) NOT BETWEEN (((vt0.c2)>(vt0.c1))) AND (((((vt0.c0)AND(vt0.c2)))AND(vt0.c1))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c1) IS TRUE))>>(((vt0.c0) ISNULL))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c1) IS TRUE))>>(((vt0.c0) ISNULL)))) ORDER BY ((NULL)&(NULL)) ASC  NULLS FIRST, (- (((vt0.c2) IS TRUE)))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((((vt0.c1) IS TRUE))>>(((vt0.c0) ISNULL))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c1) IS TRUE))>>(((vt0.c0) ISNULL)))) ORDER BY ((NULL)&(NULL)) ASC  NULLS FIRST, (- (((vt0.c2) IS TRUE)))  NULLS FIRST LIMIT 0x1;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((CAST(vt0.c2 AS INTEGER))=(CAST(vt0.c1 AS NUMERIC))));
SELECT MIN(vt0.c2) FROM vt0 WHERE (((((CAST(vt0.c2 AS INTEGER))==(CAST(vt0.c1 AS NUMERIC))))AND((+ (TRIM(DISTINCT vt0.c1, vt0.c0)))))) INTERSECT SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((vt0.c0) IS FALSE) IN (((vt0.c2)AND(vt0.c2)))));
SELECT * FROM vt0 WHERE (CASE vt0.c0  WHEN LOWER(DISTINCT vt0.c1) THEN ((vt0.c1)<(vt0.c2)) WHEN ((vt0.c1)<<(vt0.c1)) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c2) IS FALSE) END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE vt0.c0  WHEN LOWER(DISTINCT vt0.c1) THEN ((vt0.c1)<(vt0.c2)) WHEN ((vt0.c1)<<(vt0.c1)) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c2) IS FALSE) END)AND(((('1364044755', vt0.c2)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, x'3e')) AND (((((vt0.c0, vt0.c1, x'b3')) BETWEEN ((vt0.c2, vt0.c1, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c1))), ((vt0.c1) IS FALSE))))))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ('') LIMIT 2;
SELECT * FROM vt0 WHERE (CASE vt0.c0  WHEN LOWER(DISTINCT vt0.c1) THEN ((vt0.c1)<(vt0.c2)) WHEN ((vt0.c1)<<(vt0.c1)) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c2) IS FALSE) END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE vt0.c0  WHEN LOWER(DISTINCT vt0.c1) THEN ((vt0.c1)<(vt0.c2)) WHEN ((vt0.c1)<<(vt0.c1)) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c2) IS FALSE) END)AND(((('1364044755', vt0.c2)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, x'3e')) AND (((((vt0.c0, vt0.c1, x'b3')) BETWEEN ((vt0.c2, vt0.c1, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c1))), ((vt0.c1) IS FALSE))))))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ('') LIMIT 2;
SELECT MIN(vt0.c1) FROM vt0 WHERE (TOTAL_CHANGES());
SELECT MIN(vt0.c1) FROM vt0 WHERE (((TOTAL_CHANGES())AND(CASE vt0.c0 COLLATE NOCASE  WHEN (((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))) THEN ((vt0.c0)<>(vt0.c2)) WHEN CAST(vt0.c1 AS BLOB) THEN CAST(0.10404896032411848 AS INTEGER) WHEN vt0.c2 THEN ((vt0.c2) IS TRUE) WHEN 0X11a91a51 THEN (vt0.c1 IN ()) END))) ORDER BY (NOT (vt0.c0 COLLATE BINARY)), (((NOT (vt0.c0)))/(((vt0.c2)AND(vt0.c2))))  NULLS FIRST;
SELECT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))) COLLATE RTRIM) ORDER BY CAST((vt0.c1 IN ()) AS REAL)  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))) COLLATE RTRIM) ORDER BY (((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2))))<>(('774345212'))) DESC, (((vt0.c2)) BETWEEN (('-891722830')) AND (((vt0.c1 IN ())))) DESC  NULLS FIRST, (NOT (vt0.c2 COLLATE NOCASE)) ASC LIMIT 0;
SELECT * FROM vt0 WHERE (CAST(((vt0.c0) NOTNULL) AS NUMERIC)) ORDER BY 0X598f6521, ((ROUND(vt0.c1, vt0.c1))IS(((vt0.c2)=(vt0.c2))))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((CAST(((vt0.c0) NOTNULL) AS NUMERIC))AND(-1.820249969E9))) ORDER BY 1502569761, ((ROUND(vt0.c1, vt0.c1))IS(((vt0.c2)=(vt0.c2))))  NULLS FIRST;
SELECT * FROM vt0 WHERE (CAST(((vt0.c0) NOTNULL) AS NUMERIC)) ORDER BY 0X598f6521, ((ROUND(vt0.c1, vt0.c1))IS(((vt0.c2)=(vt0.c2))))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (CASE ((vt0.c0) IS FALSE)  WHEN vt0.c2 THEN ((vt0.c2)IS NOT(vt0.c2)) WHEN (~ (vt0.c1)) THEN ((vt0.c0) NOT BETWEEN ('?j))6	-뱋C') AND (vt0.c0)) WHEN ((vt0.c1)/(vt0.c1)) THEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) WHEN CAST(vt0.c1 AS BLOB) THEN CAST(vt0.c1 AS REAL) ELSE CASE vt0.c1  WHEN vt0.c2 THEN NULL WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE ((vt0.c0) IS FALSE)  WHEN vt0.c2 THEN ((vt0.c2)IS NOT(vt0.c2)) WHEN (~ (vt0.c1)) THEN ((vt0.c0) NOT BETWEEN ('?j))6	-뱋C') AND (vt0.c0)) WHEN ((vt0.c1)/(vt0.c1)) THEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) WHEN CAST(vt0.c1 AS BLOB) THEN CAST(vt0.c1 AS REAL) ELSE CASE vt0.c1  WHEN vt0.c2 THEN NULL WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END END)AND((((NOT (x'49'))) BETWEEN (vt0.c1) AND ((+ (vt0.c1))))))) ORDER BY ((vt0.c1)*(((vt0.c1)<(vt0.c1)))) ASC  NULLS LAST, ((((((((CASE WHEN vt0.c0 THEN vt0.c1 END)AND((vt0.c1 IN ()))))AND(((vt0.c0)=(vt0.c1)))))OR(((vt0.c2)>=(vt0.c0)))))AND(vt0.c2 COLLATE BINARY)) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 END, CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 END, COALESCE(vt0.c1, vt0.c1, vt0.c1)))>((((vt0.c0) IS FALSE), SQLITE_COMPILEOPTION_USED(vt0.c1), (~ (0xd8e916e)))))) ORDER BY ((vt0.c1)*(((vt0.c1)<(vt0.c1)))) ASC  NULLS LAST, ((((((((CASE WHEN vt0.c0 THEN vt0.c1 END)AND((vt0.c1 IN ()))))AND(((vt0.c0)==(vt0.c1)))))OR(((vt0.c2)>=(vt0.c0)))))AND(vt0.c2 COLLATE BINARY)) ASC;
SELECT ALL * FROM vt0 WHERE (CASE ((vt0.c0) IS FALSE)  WHEN vt0.c2 THEN ((vt0.c2)IS NOT(vt0.c2)) WHEN (~ (vt0.c1)) THEN ((vt0.c0) NOT BETWEEN ('?j))6	-뱋C') AND (vt0.c0)) WHEN ((vt0.c1)/(vt0.c1)) THEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) WHEN CAST(vt0.c1 AS BLOB) THEN CAST(vt0.c1 AS REAL) ELSE CASE vt0.c1  WHEN vt0.c2 THEN NULL WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE ((vt0.c0) IS FALSE)  WHEN vt0.c2 THEN ((vt0.c2)IS NOT(vt0.c2)) WHEN (~ (vt0.c1)) THEN ((vt0.c0) NOT BETWEEN ('?j))6	-뱋C') AND (vt0.c0)) WHEN ((vt0.c1)/(vt0.c1)) THEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) WHEN CAST(vt0.c1 AS BLOB) THEN CAST(vt0.c1 AS REAL) ELSE CASE vt0.c1  WHEN vt0.c2 THEN NULL WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END END)AND((((NOT (x'49'))) BETWEEN (vt0.c1) AND ((+ (vt0.c1))))))) ORDER BY ((vt0.c1)*(((vt0.c1)<(vt0.c1)))) ASC  NULLS LAST, ((((((((CASE WHEN vt0.c0 THEN vt0.c1 END)AND((vt0.c1 IN ()))))AND(((vt0.c0)=(vt0.c1)))))OR(((vt0.c2)>=(vt0.c0)))))AND(vt0.c2 COLLATE BINARY)) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 END, CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 END, COALESCE(vt0.c1, vt0.c1, vt0.c1)))>((((vt0.c0) IS FALSE), SQLITE_COMPILEOPTION_USED(vt0.c1), (~ (0xd8e916e)))))) ORDER BY ((vt0.c1)*(((vt0.c1)<(vt0.c1)))) ASC  NULLS LAST, ((((((((CASE WHEN vt0.c0 THEN vt0.c1 END)AND((vt0.c1 IN ()))))AND(((vt0.c0)==(vt0.c1)))))OR(((vt0.c2)>=(vt0.c0)))))AND(vt0.c2 COLLATE BINARY)) ASC;
SELECT * FROM vt0 WHERE ((((vt0.c0, vt0.c2)) NOT BETWEEN ((((vt0.c0) IS FALSE), (vt0.c0 IN (vt0.c0)))) AND ((vt0.c2 COLLATE BINARY, CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)))) ORDER BY json_insert(((vt0.c2)+(vt0.c0)), (vt0.c1 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (x'08'))) DESC  NULLS FIRST, CASE WHEN ((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)) THEN ((vt0.c0)IS NOT(vt0.c2)) WHEN (~ (vt0.c0)) THEN ((vt0.c0)-(vt0.c2)) END;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c2)) NOT BETWEEN ((((vt0.c0) IS FALSE), (vt0.c0 IN (vt0.c0)))) AND ((vt0.c2 COLLATE BINARY, CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)))) ORDER BY json_insert(((vt0.c2)+(vt0.c0)), (vt0.c1 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (x'08'))) DESC  NULLS FIRST, CASE WHEN ((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)) THEN ((vt0.c0)IS NOT(vt0.c2)) WHEN (~ (vt0.c0)) THEN ((vt0.c0)-(vt0.c2)) END LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1 COLLATE BINARY)>=(((('-953432850')) NOT BETWEEN ((vt0.c1)) AND ((vt0.c0)))))) ORDER BY json_insert(((vt0.c2)+(vt0.c0)), (vt0.c1 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (x'08'))) DESC  NULLS FIRST, CASE WHEN ((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)) THEN ((vt0.c0)IS NOT(vt0.c2)) WHEN (~ (vt0.c0)) THEN ((vt0.c0)-(vt0.c2)) END LIMIT 0X0;
SELECT * FROM vt0 WHERE ((((vt0.c0, vt0.c2)) NOT BETWEEN ((((vt0.c0) IS FALSE), (vt0.c0 IN (vt0.c0)))) AND ((vt0.c2 COLLATE BINARY, CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)))) ORDER BY json_insert(((vt0.c2)+(vt0.c0)), (vt0.c1 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (x'08'))) DESC  NULLS FIRST, CASE WHEN ((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)) THEN ((vt0.c0)IS NOT(vt0.c2)) WHEN (~ (vt0.c0)) THEN ((vt0.c0)-(vt0.c2)) END;
SELECT * FROM vt0 WHERE (((vt0.c2) IS TRUE) COLLATE BINARY COLLATE RTRIM);
SELECT * FROM vt0 WHERE (((((vt0.c2) IS TRUE) COLLATE BINARY COLLATE RTRIM)AND(x''))) ORDER BY (((('-513932245') BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND ((((vt0.c1, vt0.c1, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c2, vt0.c2, vt0.c0)) AND ((x'', vt0.c1, vt0.c1, vt0.c2))))) ASC  NULLS LAST, vt0.c1 DESC LIMIT 0X0;
SELECT * FROM vt0 WHERE (((vt0.c2) IS TRUE) COLLATE BINARY COLLATE RTRIM);
SELECT * FROM vt0 WHERE (((((vt0.c2) IS TRUE) COLLATE BINARY COLLATE RTRIM)AND(x''))) ORDER BY (((('-513932245') BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND ((((vt0.c1, vt0.c1, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c2, vt0.c2, vt0.c0)) AND ((x'', vt0.c1, vt0.c1, vt0.c2))))) ASC  NULLS LAST, vt0.c1 DESC LIMIT 0X0;
SELECT * FROM vt0 WHERE (((((vt0.c2 COLLATE RTRIM)AND(((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)))))AND(((vt0.c2)|(vt0.c2))))) ORDER BY ((((((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c2)))OR(vt0.c0)))AND(TRIM(DISTINCT vt0.c1, vt0.c2))))AND(((((((((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c1)))OR(vt0.c0)))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2 COLLATE RTRIM)AND(((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)))))AND(((vt0.c2)|(vt0.c2))))) ORDER BY ((((((CAST(vt0.c0 AS BLOB))AND(NULL)))AND(((vt0.c2) IS FALSE))))AND(((-653479658) IS FALSE))) DESC  NULLS FIRST LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ('-2081328921') ORDER BY ((((((CAST(vt0.c0 AS BLOB))AND(NULL)))AND(((vt0.c2) IS FALSE))))AND(((-653479658) IS FALSE))) DESC  NULLS FIRST LIMIT 3;
SELECT * FROM vt0 WHERE (((((vt0.c2 COLLATE RTRIM)AND(((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)))))AND(((vt0.c2)|(vt0.c2))))) ORDER BY ((((((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c2)))OR(vt0.c0)))AND(TRIM(DISTINCT vt0.c1, vt0.c2))))AND(((((((((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c1)))OR(vt0.c0)))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2 COLLATE RTRIM)AND(((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)))))AND(((vt0.c2)|(vt0.c2))))) ORDER BY ((((((CAST(vt0.c0 AS BLOB))AND(NULL)))AND(((vt0.c2) IS FALSE))))AND(((-653479658) IS FALSE))) DESC  NULLS FIRST LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ('-2081328921') ORDER BY ((((((CAST(vt0.c0 AS BLOB))AND(NULL)))AND(((vt0.c2) IS FALSE))))AND(((-653479658) IS FALSE))) DESC  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt0 WHERE (((vt0.c0) BETWEEN (((((vt0.c1)OR(vt0.c0)))OR(vt0.c0))) AND (((vt0.c1)!=(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0) BETWEEN (((((vt0.c1)OR(vt0.c0)))OR(vt0.c0))) AND (((vt0.c1)!=(vt0.c1))))) ORDER BY ((((((vt0.c0)OR(CAST(vt0.c1 AS BLOB))))AND('71103973')))AND(NULL)) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((vt0.c0) BETWEEN (((((vt0.c1)OR(vt0.c0)))OR(vt0.c0))) AND (((vt0.c1)!=(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0) BETWEEN (((((vt0.c1)OR(vt0.c0)))OR(vt0.c0))) AND (((vt0.c1)!=(vt0.c1))))) ORDER BY ((((((vt0.c0)OR(CAST(vt0.c1 AS BLOB))))AND('71103973')))AND(NULL)) ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE ((- (((vt0.c2)+(vt0.c2))))) ORDER BY (NOT (((vt0.c1)%(vt0.c1)))) DESC  NULLS FIRST, vt0.c0  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((((- (((vt0.c2)+(vt0.c2)))))AND(vt0.c2))) ORDER BY '䳆k'  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt0 WHERE ((- (((vt0.c2)+(vt0.c2))))) ORDER BY (NOT (((vt0.c1)%(vt0.c1)))) DESC  NULLS FIRST, vt0.c0  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((((- (((vt0.c2)+(vt0.c2)))))AND(vt0.c2))) ORDER BY '䳆k'  NULLS FIRST LIMIT 0X1;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c1 IN (vt0.c2)), ((((vt0.c2)AND('0.08455677317875987')))OR(vt0.c1))))<=((CAST(vt0.c1 AS BLOB), (vt0.c0 IN (vt0.c1))))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c1 IN (vt0.c2)), ((((vt0.c2)AND('0.08455677317875987')))OR(vt0.c1))))<((CAST(vt0.c1 AS BLOB), (vt0.c0 IN (vt0.c1)))))) INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c1, vt0.c0, NULL)) NOT BETWEEN ((vt0.c0, vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c1, vt0.c2))))<((vt0.c0 IN (vt0.c1)))));
SELECT COUNT(*) FROM vt0 WHERE (((((vt0.c1)>(vt0.c2))) NOT BETWEEN (CAST(vt0.c2 AS REAL)) AND ((((vt0.c1, vt0.c0, vt0.c1))==((vt0.c1, 0.08455677317875987, vt0.c2)))))) ORDER BY (((vt0.c0) IS FALSE) IN ((((vt0.c0, vt0.c2)) BETWEEN ((NULL, vt0.c1)) AND ((vt0.c2, vt0.c0))))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((vt0.c1)<>(vt0.c2))) NOT BETWEEN (CAST(vt0.c2 AS REAL)) AND ((((vt0.c1, vt0.c0, vt0.c1))==((vt0.c1, 0.08455677317875987, vt0.c2))))))AND((((((((((vt0.c0, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c0))))OR(json_array_length(vt0.c2, vt0.c0))))AND(CASE WHEN ').' THEN vt0.c1 END)))OR(SQLITE_COMPILEOPTION_GET(vt0.c0)))))) ORDER BY LIKELY(((vt0.c2)=(vt0.c0))) DESC  NULLS LAST, ((((vt0.c1) ISNULL)) NOT BETWEEN (((vt0.c2)|(vt0.c0))) AND (((NULL) NOT BETWEEN (vt0.c1) AND (vt0.c1))))  NULLS LAST;
SELECT * FROM vt0 WHERE (CASE ((((((vt0.c0)OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c0))  WHEN CASE 'HEଟQ億GU]'  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END THEN ((vt0.c1)==(vt0.c1)) WHEN json_object(vt0.c1, vt0.c0, vt0.c2) THEN CAST(vt0.c1 AS REAL) END);
SELECT ALL * FROM vt0 WHERE (CASE ((((((vt0.c0)OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c0))  WHEN CASE 'HEଟQ億GU]'  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END THEN ((vt0.c1)==(vt0.c1)) WHEN json_object(vt0.c1, vt0.c0, vt0.c2) THEN CAST(vt0.c1 AS REAL) END) INTERSECT SELECT * FROM vt0 WHERE (((x'b3') NOT NULL));
SELECT * FROM vt0 WHERE (CASE ((((((vt0.c0)OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c0))  WHEN CASE 'HEଟQ億GU]'  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END THEN ((vt0.c1)==(vt0.c1)) WHEN json_object(vt0.c1, vt0.c0, vt0.c2) THEN CAST(vt0.c1 AS REAL) END);
SELECT * FROM vt0 WHERE ((((vt0.c1)AND(vt0.c0)) IN (0Xffffffffcc70858f)));
SELECT ALL * FROM vt0 WHERE ((((vt0.c1)AND(vt0.c0)) IN (0Xffffffffcc70858f))) ORDER BY (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (((vt0.c2)+(vt0.c0)))) DESC, ((((((((((((((vt0.c1)>(vt0.c2)))OR(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))))AND(((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c1)))))OR(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 END)))AND(((vt0.c1)>=(vt0.c1)))))OR(CAST('.W\O(' AS REAL))))AND(CAST(vt0.c1 AS BLOB))) ASC  NULLS LAST LIMIT 4;
SELECT * FROM vt0 WHERE ((((vt0.c1)AND(vt0.c0)) IN (0Xffffffffcc70858f)));
SELECT ALL * FROM vt0 WHERE ((((vt0.c1)AND(vt0.c0)) IN (0Xffffffffcc70858f))) ORDER BY (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (((vt0.c2)+(vt0.c0)))) DESC, ((((((((((((((vt0.c1)>(vt0.c2)))OR(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))))AND(((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c1)))))OR(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 END)))AND(((vt0.c1)>=(vt0.c1)))))OR(CAST('.W\O(' AS REAL))))AND(CAST(vt0.c1 AS BLOB))) ASC  NULLS LAST LIMIT 4;
SELECT ALL * FROM vt0 WHERE (CAST('Wvz' AS TEXT)) ORDER BY vt0.c1 ASC  NULLS LAST, (vt0.c1 IN ()) ASC;
SELECT ALL * FROM vt0 WHERE (((CAST('Wvz' AS TEXT))AND(0.2327913260445229))) ORDER BY vt0.c1 ASC  NULLS LAST, (vt0.c1 IN ()) ASC LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (CAST('Wvz' AS TEXT)) ORDER BY vt0.c1 ASC  NULLS LAST, (vt0.c1 IN ()) ASC;
SELECT MAX(vt0.c0) FROM vt0 WHERE (COALESCE(MIN(vt0.c2, vt0.c1), ((vt0.c1)-(vt0.c0))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (COALESCE(MIN(vt0.c2, vt0.c1), ((vt0.c1)-(vt0.c0)))) INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE ((((- (vt0.c1))) BETWEEN (((vt0.c0) IS FALSE)) AND ((NOT (vt0.c2)))));
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((((((vt0.c1 COLLATE BINARY)OR((+ (vt0.c2)))))AND(vt0.c0 COLLATE NOCASE)))OR(x'e9')))OR(CASE WHEN vt0.c0 THEN NULL ELSE vt0.c1 END)));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((((((vt0.c1 COLLATE BINARY)OR((+ (vt0.c2)))))AND(vt0.c0 COLLATE NOCASE)))OR(x'e9')))OR(CASE WHEN vt0.c0 THEN NULL ELSE vt0.c1 END))) INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((CAST(NULL AS BLOB))OR(vt0.c2 COLLATE RTRIM)))OR(vt0.c1 COLLATE BINARY)));
SELECT * FROM vt0 WHERE (CASE vt0.c2  WHEN '1159486624' THEN vt0.c1 WHEN vt0.c1 THEN 1.349972028E9 ELSE vt0.c0 END COLLATE RTRIM) ORDER BY (NOT (UNLIKELY(DISTINCT vt0.c0))) ASC, (((vt0.c2) NOT NULL) IN ())  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CASE vt0.c2  WHEN '1159486624' THEN vt0.c1 WHEN vt0.c1 THEN 1.349972028E9 ELSE vt0.c0 END COLLATE RTRIM) ORDER BY ((((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c2)))OR(vt0.c2))) NOT BETWEEN (CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN 0.4951799806416233 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END) AND (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)))), ((((((((vt0.c1)IS(vt0.c1)))OR((~ (vt0.c1)))))AND((((NULL, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c2, vt0.c1))))))AND(LIKELIHOOD(DISTINCT vt0.c0, vt0.c0))) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE ((vt0.c1 COLLATE NOCASE IN ())) ORDER BY ((((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c2)))OR(vt0.c2))) NOT BETWEEN (CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN 0.4951799806416233 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END) AND (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)))), ((((((((vt0.c1)IS(vt0.c1)))OR((~ (vt0.c1)))))AND((((NULL, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c2, vt0.c1))))))AND(LIKELIHOOD(DISTINCT vt0.c0, vt0.c0))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (CASE vt0.c2  WHEN '1159486624' THEN vt0.c1 WHEN vt0.c1 THEN 1.349972028E9 ELSE vt0.c0 END COLLATE RTRIM) ORDER BY (NOT (UNLIKELY(DISTINCT vt0.c0))) ASC, (((vt0.c2) NOT NULL) IN ())  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1)))OR('2140979552')))AND(vt0.c0 COLLATE BINARY))) ORDER BY (- (((vt0.c0) IS TRUE)))  NULLS FIRST, CAST(((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0)) AS TEXT)  NULLS LAST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((((((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1)))OR('2140979552')))AND(vt0.c0 COLLATE BINARY)))AND(((((NULL)<(vt0.c0)))&(CASE vt0.c1  WHEN '%S%2e^ky' THEN vt0.c0 ELSE vt0.c1 END))))) ORDER BY (- (((vt0.c0) IS TRUE)))  NULLS FIRST, CAST(((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0)) AS TEXT)  NULLS LAST LIMIT 0;
SELECT MAX(vt0.c0) FROM vt0 WHERE (LOWER(DISTINCT (((('1220376426')AND(vt0.c1)))AND(vt0.c0))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (LOWER(DISTINCT (((('1220376426')AND(vt0.c1)))AND(vt0.c0))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c1, vt0.c2)) BETWEEN ((NULL, ((vt0.c0) IS FALSE))) AND ((((vt0.c2)-(vt0.c2)), vt0.c1 COLLATE BINARY))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c1, vt0.c2)) BETWEEN ((NULL, ((vt0.c0) IS FALSE))) AND ((((vt0.c2)-(vt0.c2)), vt0.c1 COLLATE BINARY))))AND(x'6270'))) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE ((((vt0.c1, vt0.c2)) BETWEEN ((NULL, ((vt0.c0) IS FALSE))) AND ((((vt0.c2)-(vt0.c2)), vt0.c1 COLLATE BINARY))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c1, vt0.c2)) BETWEEN ((NULL, ((vt0.c0) IS FALSE))) AND ((((vt0.c2)-(vt0.c2)), vt0.c1 COLLATE BINARY))))AND(x'6270'))) LIMIT 0x1;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((vt0.c2)AND(vt0.c1)))OR('i')))<=((vt0.c0 IN ())))) ORDER BY ((x'43') NOTNULL) ASC  NULLS LAST, ((((((ABS(DISTINCT ''))AND(((vt0.c1)&(1e500)))))OR((NOT (vt0.c2)))))AND(vt0.c0)), UPPER(DISTINCT (+ (vt0.c2)))  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c2)AND(vt0.c1)))OR('i')))<=((vt0.c0 IN ()))))AND((+ (((vt0.c2)<<(vt0.c0))))))) ORDER BY ((((((CASE vt0.c2  WHEN x'a0' THEN vt0.c2 ELSE vt0.c2 END)AND((0.9766274805027967 IN (vt0.c1)))))AND(('317613952' IN ()))))OR((vt0.c0 IN ()))) ASC LIMIT 1;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((((vt0.c2, vt0.c2, vt0.c0, vt0.c1, vt0.c0, vt0.c1)) BETWEEN ((vt0.c1, vt0.c1, vt0.c2, vt0.c0, vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1, vt0.c2, vt0.c0, vt0.c2)))) IS FALSE));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((((((vt0.c2, vt0.c2, vt0.c0, vt0.c1, vt0.c0, vt0.c1)) BETWEEN ((vt0.c1, vt0.c1, vt0.c2, vt0.c0, vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1, vt0.c2, vt0.c0, vt0.c2)))) IS FALSE))AND(((vt0.c2)!=(((vt0.c0)LIKE(vt0.c1))))))) ORDER BY ((vt0.c2 COLLATE RTRIM)AND(vt0.c2)) ASC LIMIT 1 INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE ((~ (CASE WHEN vt0.c0 THEN vt0.c1 END))) ORDER BY ((vt0.c2 COLLATE RTRIM)AND(vt0.c2)) ASC LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE ((((CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c0 END, NULLIF(vt0.c2, vt0.c0), ((vt0.c2)IS(vt0.c0)), ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2))))>=((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1)), vt0.c0 COLLATE RTRIM, '-1278163370', vt0.c0 COLLATE RTRIM))));
SELECT * FROM vt0 WHERE ((((((CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c0 END, NULLIF(vt0.c2, vt0.c0), ((vt0.c2)IS(vt0.c0)), ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2))))==((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1)), vt0.c0 COLLATE RTRIM, '-1278163370', vt0.c0 COLLATE RTRIM))))AND(vt0.c0))) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE ((((CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c0 END, NULLIF(vt0.c2, vt0.c0), ((vt0.c2)IS(vt0.c0)), ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2))))>=((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1)), vt0.c0 COLLATE RTRIM, '-1278163370', vt0.c0 COLLATE RTRIM))));
SELECT * FROM vt0 WHERE ((((((CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c0 END, NULLIF(vt0.c2, vt0.c0), ((vt0.c2)IS(vt0.c0)), ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2))))==((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1)), vt0.c0 COLLATE RTRIM, '-1278163370', vt0.c0 COLLATE RTRIM))))AND(vt0.c0))) LIMIT 0x1;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0) NOTNULL)) ORDER BY ((((((CAST(NULL AS BLOB))OR(((vt0.c2)<<(vt0.c2)))))OR(((vt0.c0) IS FALSE))))OR(((vt0.c1) IS TRUE)))  NULLS LAST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0) NOTNULL))AND('n{id!n-'))) ORDER BY (((vt0.c2)<(vt0.c2)) IN ((+ (vt0.c0))))  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (((((((((((((vt0.c2)>(vt0.c2)))OR(vt0.c2 COLLATE RTRIM)))AND(vt0.c0 COLLATE NOCASE)))OR(CHAR(7.01719929E8))))OR(vt0.c0 COLLATE BINARY)))OR(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1)))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((((((((((vt0.c2)>(vt0.c2)))OR(vt0.c2 COLLATE RTRIM)))AND(vt0.c0 COLLATE NOCASE)))OR(CHAR(7.01719929E8))))OR(vt0.c0 COLLATE BINARY)))OR(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c1)))))AND(((((vt0.c0) NOT NULL))*(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))))))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 END)>=(((vt0.c0) IS FALSE))));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((((vt0.c2, x'', vt0.c1, vt0.c1)) NOT BETWEEN ((vt0.c1 COLLATE BINARY, ((vt0.c0)=(vt0.c0)), NULL, vt0.c0 COLLATE RTRIM)) AND (((+ (vt0.c1)), ((vt0.c1)OR(vt0.c1)), ((vt0.c0) NOTNULL), ((vt0.c2)/(vt0.c1)))))) ORDER BY CASE (+ (vt0.c1))  WHEN vt0.c2 COLLATE BINARY THEN LOWER(vt0.c2) WHEN x'' THEN vt0.c1 ELSE ((vt0.c1)%(vt0.c1)) END, x'f3cd' DESC;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((((((vt0.c2, x'', vt0.c1, vt0.c1)) NOT BETWEEN ((vt0.c1 COLLATE BINARY, ((vt0.c0)==(vt0.c0)), NULL, vt0.c0 COLLATE RTRIM)) AND (((+ (vt0.c1)), ((vt0.c1)OR(vt0.c1)), ((vt0.c0) NOTNULL), ((vt0.c2)/(vt0.c1))))))AND((((NOT (vt0.c1))) IS TRUE)))) ORDER BY ((UPPER(DISTINCT vt0.c0)) NOT BETWEEN (vt0.c2) AND (vt0.c2)) DESC, (- (CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END)) DESC  NULLS LAST INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (((((NULL)OR(vt0.c0))) IS FALSE)) ORDER BY ((UPPER(DISTINCT vt0.c0)) NOT BETWEEN (vt0.c2) AND (vt0.c2)) DESC, (- (CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END)) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (json_patch(x'2794f3', 0.29904746403598303));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((json_patch(x'2794f3', 0.29904746403598303))AND((vt0.c2 IN (vt0.c2)) COLLATE RTRIM))) ORDER BY (((vt0.c2)) BETWEEN ((' t')) AND ((vt0.c2))) COLLATE NOCASE  NULLS FIRST, CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END COLLATE BINARY COLLATE NOCASE ASC  NULLS FIRST, CAST(((vt0.c1) IS TRUE) AS INTEGER) ASC LIMIT 0X2;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE ((+ ('461008101')));
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE ((((+ ('461008101')))AND(((((vt0.c0)AND(0.9140077620861801))) IS FALSE)))) ORDER BY (((~ (vt0.c2)))>(vt0.c2 COLLATE BINARY)) LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (CAST((vt0.c0 IN (vt0.c0, vt0.c1, vt0.c0)) AS TEXT)) ORDER BY (((~ (vt0.c2)))>(vt0.c2 COLLATE BINARY)) LIMIT 0X1;
SELECT MAX(vt0.c2) FROM vt0 WHERE (UPPER(((((vt0.c2)OR(vt0.c1)))OR(vt0.c2))));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((UPPER(((((vt0.c2)OR(vt0.c1)))OR(vt0.c2))))AND(LOWER(DISTINCT vt0.c2) COLLATE NOCASE))) ORDER BY ((vt0.c2 IN ()) IN (vt0.c1 COLLATE RTRIM)) DESC  NULLS LAST, CASE WHEN ((((vt0.c2)OR(vt0.c0)))AND(vt0.c0)) THEN (((vt0.c1)) BETWEEN ((NULL)) AND ((vt0.c0))) ELSE ((vt0.c0)>(vt0.c0)) END ASC  NULLS FIRST INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (((((((((0Xffffffffcffb3b03)OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c0)))>=(((((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c1)))OR(vt0.c0)))AND(vt0.c2))))) ORDER BY ((vt0.c2 IN ()) IN (vt0.c1 COLLATE RTRIM)) DESC  NULLS LAST, CASE WHEN ((((vt0.c2)OR(vt0.c0)))AND(vt0.c0)) THEN (((vt0.c1)) BETWEEN ((NULL)) AND ((vt0.c0))) ELSE ((vt0.c0)>(vt0.c0)) END ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (x'27') ORDER BY (- (TRIM(vt0.c2))) ASC;
SELECT * FROM vt0 WHERE (((x'27')AND(CASE ((((vt0.c2)OR(vt0.c1)))OR(vt0.c0))  WHEN vt0.c0 COLLATE BINARY THEN '0.9535738761866759' ELSE 872284812 END))) ORDER BY ((CAST(vt0.c2 AS REAL))||(0.8300895292439142));
SELECT ALL * FROM vt0 WHERE (x'27') ORDER BY (- (TRIM(vt0.c2))) ASC;
SELECT * FROM vt0 WHERE (((x'27')AND(CASE ((((vt0.c2)OR(vt0.c1)))OR(vt0.c0))  WHEN vt0.c0 COLLATE BINARY THEN '0.9535738761866759' ELSE 872284812 END))) ORDER BY ((CAST(vt0.c2 AS REAL))||(0.8300895292439142));
SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c2)-(vt0.c1)) COLLATE NOCASE);
SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c2)-(vt0.c1)) COLLATE NOCASE);
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (vt0.c0) ORDER BY (((vt0.c0 COLLATE BINARY))>((((vt0.c0)&(vt0.c0))))) DESC, ((((vt0.c0)-(-725002539))) NOT BETWEEN ((vt0.c2 IN (vt0.c2, vt0.c2))) AND (SQLITE_VERSION())) ASC;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((vt0.c0)AND(((vt0.c1)>>((NOT (vt0.c0))))))) ORDER BY (((vt0.c0 COLLATE BINARY))>((((vt0.c0)&(vt0.c0))))) DESC, ((((vt0.c0)-(-725002539))) NOT BETWEEN ((vt0.c2 IN (vt0.c2, vt0.c2))) AND (SQLITE_VERSION())) ASC;
SELECT * FROM vt0 WHERE (CAST('F)*xIb' AS INTEGER)) ORDER BY CASE ((vt0.c2)<>(vt0.c0))  WHEN '-603422523' THEN ((vt0.c0) IS TRUE) END  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (CAST('F)*xIb' AS INTEGER)) ORDER BY CASE ((vt0.c2)!=(vt0.c0))  WHEN '-603422523' THEN ((vt0.c0) IS TRUE) END  NULLS FIRST;
SELECT * FROM vt0 WHERE (CAST('F)*xIb' AS INTEGER)) ORDER BY CASE ((vt0.c2)<>(vt0.c0))  WHEN '-603422523' THEN ((vt0.c0) IS TRUE) END  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (CAST('F)*xIb' AS INTEGER)) ORDER BY CASE ((vt0.c2)!=(vt0.c0))  WHEN '-603422523' THEN ((vt0.c0) IS TRUE) END  NULLS FIRST;
SELECT MIN(vt0.c0) FROM vt0 WHERE (NULL);
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((NULL)AND((- (CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 END))))) ORDER BY 0.7013063038809562  NULLS FIRST, 0.4574025462483372  NULLS LAST;
SELECT MIN(vt0.c1) FROM vt0 WHERE ((((((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND (('680413302'))))*(((((((x'')OR(vt0.c1)))AND(vt0.c2)))AND(-604958403)))));
SELECT MIN(vt0.c1) FROM vt0 WHERE ((((((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND (('680413302'))))*(((((((x'')OR(vt0.c1)))AND(vt0.c2)))AND(-604958403))))) ORDER BY ((((vt0.c2) NOT NULL))&(CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END)), (((((0.11397833306749194))<>((vt0.c1))))%(TYPEOF(vt0.c2)))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (IFNULL(DISTINCT CAST(vt0.c0 AS NUMERIC), NULL));
SELECT * FROM vt0 WHERE (IFNULL(DISTINCT CAST(vt0.c0 AS NUMERIC), NULL)) ORDER BY ((CAST(0.2647732474009391 AS REAL)) NOT NULL), (((vt0.c1)) NOT BETWEEN ((((vt0.c0) IS TRUE))) AND ((vt0.c2))) DESC LIMIT 0X3;
SELECT ALL * FROM vt0 WHERE (IFNULL(DISTINCT CAST(vt0.c0 AS NUMERIC), NULL));
SELECT * FROM vt0 WHERE (IFNULL(DISTINCT CAST(vt0.c0 AS NUMERIC), NULL)) ORDER BY ((CAST(0.2647732474009391 AS REAL)) NOT NULL), (((vt0.c1)) NOT BETWEEN ((((vt0.c0) IS TRUE))) AND ((vt0.c2))) DESC LIMIT 0X3;
SELECT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c0, vt0.c1, vt0.c1))<=((vt0.c2, vt0.c0, NULL))) COLLATE BINARY) ORDER BY (((vt0.c0 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS TEXT)) AND (vt0.c0)) ASC  NULLS FIRST, (((vt0.c1 IN (vt0.c0, vt0.c0))) IS TRUE) ASC  NULLS LAST, ((TRIM(DISTINCT vt0.c1))/((~ (vt0.c1)))) ASC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c0, vt0.c1, vt0.c1))=((vt0.c2, vt0.c0, NULL))) COLLATE BINARY) ORDER BY (((vt0.c0 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS TEXT)) AND (vt0.c0)) ASC  NULLS FIRST, (((vt0.c1 IN (vt0.c0, vt0.c0))) IS TRUE) ASC  NULLS LAST, ((TRIM(DISTINCT vt0.c1))/((~ (vt0.c1)))) ASC LIMIT 0x1 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (x'') ORDER BY (((vt0.c0 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS TEXT)) AND (vt0.c0)) ASC  NULLS FIRST, (((vt0.c1 IN (vt0.c0, vt0.c0))) IS TRUE) ASC  NULLS LAST, ((TRIM(DISTINCT vt0.c1))/((~ (vt0.c1)))) ASC LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((((((0.5667958780424336)OR(vt0.c1)))OR(vt0.c2)) IN (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT ALL * FROM vt0 WHERE ((((((((0.5667958780424336)OR(vt0.c1)))OR(vt0.c2)) IN (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(load_extension(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)), x'6aab15'))));
SELECT ALL * FROM vt0 WHERE ((((((0.5667958780424336)OR(vt0.c1)))OR(vt0.c2)) IN (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT ALL * FROM vt0 WHERE ((((((((0.5667958780424336)OR(vt0.c1)))OR(vt0.c2)) IN (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(load_extension(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)), x'6aab15'))));
SELECT * FROM vt0 WHERE (((vt0.c2) ISNULL) COLLATE BINARY);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2) ISNULL) COLLATE BINARY) ORDER BY CASE WHEN ((vt0.c0) NOT NULL) THEN ((vt0.c2) ISNULL) WHEN ((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)) THEN ((vt0.c1)/(vt0.c2)) ELSE (+ (vt0.c1)) END ASC, ((((vt0.c2) NOT NULL)) BETWEEN (((vt0.c0)-(vt0.c0))) AND (x'')) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c2) ISNULL) COLLATE BINARY);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2) ISNULL) COLLATE BINARY) ORDER BY CASE WHEN ((vt0.c0) NOT NULL) THEN ((vt0.c2) ISNULL) WHEN ((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)) THEN ((vt0.c1)/(vt0.c2)) ELSE (+ (vt0.c1)) END ASC, ((((vt0.c2) NOT NULL)) BETWEEN (((vt0.c0)-(vt0.c0))) AND (x'')) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY CAST(((((((vt0.c2)OR(vt0.c0)))OR('')))AND('-765618178')) AS BLOB);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c0)AND(CAST((+ (vt0.c1)) AS TEXT)))) ORDER BY CAST(((((((vt0.c2)OR(vt0.c0)))OR('')))AND('-765618178')) AS BLOB) LIMIT 0x3 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((vt0.c2) ISNULL)) NOT BETWEEN (((vt0.c2) IS TRUE)) AND ((~ (vt0.c1))))) ORDER BY CAST(((((((vt0.c2)OR(vt0.c0)))OR('')))AND('-765618178')) AS BLOB) LIMIT 3;
SELECT * FROM vt0 WHERE ((((vt0.c1)) BETWEEN ((x'')) AND ((CAST(vt0.c2 AS INTEGER))))) ORDER BY ((CAST(vt0.c0 AS INTEGER)) IS TRUE);
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1)) BETWEEN ((x'')) AND ((CAST(vt0.c2 AS INTEGER)))))AND(HEX(DISTINCT ((((((vt0.c2)OR(vt0.c2)))AND(NULL)))AND(vt0.c2)))))) ORDER BY ((CAST(vt0.c0 AS INTEGER)) IS TRUE) INTERSECT SELECT * FROM vt0 WHERE (CAST(((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0)) AS NUMERIC)) ORDER BY ((CAST(vt0.c0 AS INTEGER)) IS TRUE);
SELECT * FROM vt0 WHERE ((((vt0.c1)) BETWEEN ((x'')) AND ((CAST(vt0.c2 AS INTEGER))))) ORDER BY ((CAST(vt0.c0 AS INTEGER)) IS TRUE);
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1)) BETWEEN ((x'')) AND ((CAST(vt0.c2 AS INTEGER)))))AND(HEX(DISTINCT ((((((vt0.c2)OR(vt0.c2)))AND(NULL)))AND(vt0.c2)))))) ORDER BY ((CAST(vt0.c0 AS INTEGER)) IS TRUE) INTERSECT SELECT * FROM vt0 WHERE (CAST(((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0)) AS NUMERIC)) ORDER BY ((CAST(vt0.c0 AS INTEGER)) IS TRUE);
SELECT * FROM vt0 WHERE (((((((vt0.c2) IS FALSE))OR((+ (vt0.c1)))))AND(((vt0.c0)GLOB(vt0.c1))))) ORDER BY (NOT ((((NULL))>=((vt0.c1)))))  NULLS FIRST, (NOT ('-2007656163' COLLATE RTRIM)) ASC, vt0.c1 ASC  NULLS FIRST, (- (((vt0.c2)*(vt0.c0))))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((((((vt0.c2) IS FALSE))OR((+ (vt0.c1)))))AND(((vt0.c0)GLOB(vt0.c1)))))AND(NULL))) ORDER BY (((vt0.c2)) NOT BETWEEN (((vt0.c0 IN (vt0.c0)))) AND ((json_valid(vt0.c2)))) ASC, 0Xffffffffa77a1386  NULLS LAST;
SELECT * FROM vt0 WHERE (((((((vt0.c2) IS FALSE))OR((+ (vt0.c1)))))AND(((vt0.c0)GLOB(vt0.c1))))) ORDER BY (NOT ((((NULL))>=((vt0.c1)))))  NULLS FIRST, (NOT ('-2007656163' COLLATE RTRIM)) ASC, vt0.c1 ASC  NULLS FIRST, (- (((vt0.c2)*(vt0.c0))))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((((((vt0.c2) IS FALSE))OR((+ (vt0.c1)))))AND(((vt0.c0)GLOB(vt0.c1)))))AND(NULL))) ORDER BY (((vt0.c2)) NOT BETWEEN (((vt0.c0 IN (vt0.c0)))) AND ((json_valid(vt0.c2)))) ASC, 0Xffffffffa77a1386  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((vt0.c2))<((vt0.c0))))GLOB(0x46c3dad6))) ORDER BY CAST(((0x199ddecd) NOTNULL) AS BLOB) ASC  NULLS LAST, '1349972028' COLLATE BINARY  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((((vt0.c2))<((vt0.c0))))GLOB(1187240662)))AND(((((((vt0.c1)<>(vt0.c1)))AND((+ (vt0.c1)))))AND(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0))))))) ORDER BY CAST(((0x199ddecd) NOTNULL) AS BLOB) ASC  NULLS LAST, '1349972028' COLLATE BINARY  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (1.246118282E9) ORDER BY CAST(((429776589) NOTNULL) AS BLOB) ASC  NULLS LAST, '1349972028' COLLATE BINARY  NULLS LAST LIMIT 0;
SELECT MAX(vt0.c1) FROM vt0 WHERE ((((vt0.c1, vt0.c1)) BETWEEN (((NOT (vt0.c2)), vt0.c1 COLLATE NOCASE)) AND ((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)), vt0.c2))));
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((((((vt0.c1, vt0.c1)) BETWEEN (((NOT (vt0.c2)), vt0.c1 COLLATE NOCASE)) AND ((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)), vt0.c2))))AND(TRIM((- (vt0.c2))))));
SELECT * FROM vt0 WHERE (((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c0)))AND((('S')=(vt0.c0)))))OR(CAST(vt0.c0 AS REAL))));
SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c0)))AND((('S')==(vt0.c0)))))OR(CAST(vt0.c0 AS REAL))));
SELECT * FROM vt0 WHERE (((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c0)))AND((('S')=(vt0.c0)))))OR(CAST(vt0.c0 AS REAL))));
SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c0)))AND((('S')==(vt0.c0)))))OR(CAST(vt0.c0 AS REAL))));
SELECT * FROM vt0 WHERE ('480946256');
SELECT DISTINCT * FROM vt0 WHERE ('480946256') ORDER BY (((x'2c', vt0.c0, vt0.c0)) BETWEEN ((0.8873760599833322, vt0.c0, (('1106108857') BETWEEN (vt0.c0) AND (vt0.c2)))) AND (((((vt0.c1, vt0.c2, vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c1, 0X44e6bb1, vt0.c1)) AND ((vt0.c0, vt0.c1, vt0.c1, vt0.c1))), (('R') NOT BETWEEN (vt0.c1) AND (vt0.c0)), (vt0.c0 IN (vt0.c0))))) DESC, ((TRIM(DISTINCT vt0.c1)) BETWEEN ((((vt0.c2, 'NO''TsI/x', vt0.c1))<((vt0.c2, vt0.c0, vt0.c0)))) AND (GLOB(vt0.c0, vt0.c0))) LIMIT 1;
SELECT * FROM vt0 WHERE ('480946256');
SELECT DISTINCT * FROM vt0 WHERE ('480946256') ORDER BY (((x'2c', vt0.c0, vt0.c0)) BETWEEN ((0.8873760599833322, vt0.c0, (('1106108857') BETWEEN (vt0.c0) AND (vt0.c2)))) AND (((((vt0.c1, vt0.c2, vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c1, 0X44e6bb1, vt0.c1)) AND ((vt0.c0, vt0.c1, vt0.c1, vt0.c1))), (('R') NOT BETWEEN (vt0.c1) AND (vt0.c0)), (vt0.c0 IN (vt0.c0))))) DESC, ((TRIM(DISTINCT vt0.c1)) BETWEEN ((((vt0.c2, 'NO''TsI/x', vt0.c1))<((vt0.c2, vt0.c0, vt0.c0)))) AND (GLOB(vt0.c0, vt0.c0))) LIMIT 1;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((~ (vt0.c1))) NOTNULL));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((~ (vt0.c1))) NOTNULL)) ORDER BY ((((x'43') IS TRUE))||(((vt0.c2) NOT NULL)))  NULLS FIRST INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ('-1513578280') ORDER BY ((((x'43') IS TRUE))||(((vt0.c2) NOT NULL)))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((- (((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))));
SELECT * FROM vt0 WHERE ((((- (((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))))AND(((((vt0.c1) NOTNULL)) IS FALSE)))) LIMIT 0x2 INTERSECT SELECT ALL * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c0))) BETWEEN (((vt0.c2)LIKE(vt0.c0))) AND (((((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c1)))AND(NULL)))OR('z^*')))AND(vt0.c0))))) LIMIT 0x2;
SELECT ALL * FROM vt0 WHERE ((- (((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))));
SELECT * FROM vt0 WHERE ((((- (((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))))AND(((((vt0.c1) NOTNULL)) IS FALSE)))) LIMIT 0x2 INTERSECT SELECT ALL * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c0))) BETWEEN (((vt0.c2)LIKE(vt0.c0))) AND (((((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c1)))AND(NULL)))OR('z^*')))AND(vt0.c0))))) LIMIT 0x2;
SELECT ALL * FROM vt0 WHERE ((((((~ (0.30094832946631667)))AND(CAST(vt0.c2 AS INTEGER))))OR(TRIM(DISTINCT vt0.c0, vt0.c1))));
SELECT DISTINCT * FROM vt0 WHERE ((((((((~ (0.30094832946631667)))AND(CAST(vt0.c2 AS INTEGER))))OR(TRIM(DISTINCT vt0.c0, vt0.c1))))AND(((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))) ISNULL)))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((NULL IN ()) COLLATE RTRIM) LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((((((~ (0.30094832946631667)))AND(CAST(vt0.c2 AS INTEGER))))OR(TRIM(DISTINCT vt0.c0, vt0.c1))));
SELECT DISTINCT * FROM vt0 WHERE ((((((((~ (0.30094832946631667)))AND(CAST(vt0.c2 AS INTEGER))))OR(TRIM(DISTINCT vt0.c0, vt0.c1))))AND(((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))) ISNULL)))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((NULL IN ()) COLLATE RTRIM) LIMIT 2;
SELECT * FROM vt0 WHERE ((CASE vt0.c2  WHEN vt0.c2 THEN NULL ELSE 0.24617848059316372 END IN ()));
SELECT * FROM vt0 WHERE ((CASE vt0.c2  WHEN vt0.c2 THEN NULL ELSE 0.24617848059316372 END IN ())) ORDER BY ((((((((vt0.c1) NOT BETWEEN ('*8n撙') AND (vt0.c0)))OR((NOT (vt0.c2)))))OR(((((((vt0.c1)OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c1)))))AND(((vt0.c2) NOT NULL))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))GLOB((~ (vt0.c1))))) ORDER BY ((((((((vt0.c1) NOT BETWEEN ('*8n撙') AND (vt0.c0)))OR((NOT (vt0.c2)))))OR(((((((vt0.c1)OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c1)))))AND(((vt0.c2) NOT NULL))) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((CASE vt0.c2  WHEN vt0.c2 THEN NULL ELSE 0.24617848059316372 END IN ()));
SELECT * FROM vt0 WHERE ((CASE vt0.c2  WHEN vt0.c2 THEN NULL ELSE 0.24617848059316372 END IN ())) ORDER BY ((((((((vt0.c1) NOT BETWEEN ('*8n撙') AND (vt0.c0)))OR((NOT (vt0.c2)))))OR(((((((vt0.c1)OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c1)))))AND(((vt0.c2) NOT NULL))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))GLOB((~ (vt0.c1))))) ORDER BY ((((((((vt0.c1) NOT BETWEEN ('*8n撙') AND (vt0.c0)))OR((NOT (vt0.c2)))))OR(((((((vt0.c1)OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c1)))))AND(((vt0.c2) NOT NULL))) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (CAST(json_patch(vt0.c1, vt0.c0) AS NUMERIC)) ORDER BY CAST(((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)) AS TEXT)  NULLS FIRST;
SELECT * FROM vt0 WHERE (CAST(json_patch(vt0.c1, vt0.c0) AS NUMERIC)) ORDER BY (NOT ((~ (vt0.c2)))) INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))) IS FALSE)) ORDER BY (NOT ((~ (vt0.c2))));
SELECT * FROM vt0 WHERE (CAST(json_patch(vt0.c1, vt0.c0) AS NUMERIC)) ORDER BY CAST(((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)) AS TEXT)  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2) NOT NULL) IN (((vt0.c0)<=(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2) NOT NULL) IN (((vt0.c0)==(vt0.c2))))) ORDER BY SQLITE_COMPILEOPTION_GET(((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0))) ASC  NULLS LAST, '-353232237';
SELECT ALL * FROM vt0 WHERE ((((vt0.c2) NOT NULL) IN (((vt0.c0)<=(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2) NOT NULL) IN (((vt0.c0)==(vt0.c2))))) ORDER BY SQLITE_COMPILEOPTION_GET(((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0))) ASC  NULLS LAST, '-353232237';
SELECT * FROM vt0 WHERE ((((vt0.c1, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c1, vt0.c0))) COLLATE RTRIM);
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c1, vt0.c0))) COLLATE RTRIM)AND(((((((((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)))AND((- (0.8727362633353547)))))OR(((((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))))OR('z5t''Y'))))) LIMIT 3;
SELECT * FROM vt0 WHERE ((((vt0.c1, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c1, vt0.c0))) COLLATE RTRIM);
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c1)) AND ((vt0.c2, vt0.c1, vt0.c0))) COLLATE RTRIM)AND(((((((((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)))AND((- (0.8727362633353547)))))OR(((((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))))OR('z5t''Y'))))) LIMIT 3;
SELECT ALL * FROM vt0 WHERE ((0.8153985657540177 IN (vt0.c1)));
SELECT ALL * FROM vt0 WHERE ((0.8153985657540177 IN (vt0.c1))) ORDER BY NULL DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((0.8153985657540177 IN (vt0.c1)));
SELECT ALL * FROM vt0 WHERE ((0.8153985657540177 IN (vt0.c1))) ORDER BY NULL DESC  NULLS LAST LIMIT 0X1;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c1) NOTNULL)) BETWEEN (vt0.c1) AND (CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN '1e500' END)));
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((((vt0.c1) NOTNULL)) BETWEEN (vt0.c1) AND (CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN '1e500' END)))AND((((vt0.c2)) NOT BETWEEN ((vt0.c2)) AND ((CASE WHEN vt0.c1 THEN vt0.c2 END))))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c1) BETWEEN (0.02723861726624699) AND (vt0.c0)) COLLATE NOCASE);
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c1) BETWEEN (0.02723861726624699) AND (vt0.c0)) COLLATE NOCASE);
SELECT MIN(vt0.c2) FROM vt0 WHERE ((((CAST(x'' AS TEXT), 'g', ((vt0.c1) NOT BETWEEN (NULL) AND (NULL)), NULL))<((vt0.c2 COLLATE BINARY, ((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)), ((vt0.c0)&(vt0.c0)), (((vt0.c0, vt0.c0))<((vt0.c1, vt0.c0))))))) ORDER BY (((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((((vt0.c2)<<(vt0.c0)), ((vt0.c2) ISNULL), (((vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))))) AND ((((vt0.c2)|(vt0.c1)), ((((((0.9171860282041395)AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c1)), (- (0.0))))) DESC;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((CAST(x'' AS TEXT), 'g', ((vt0.c1) NOT BETWEEN (NULL) AND (NULL)), NULL))<((vt0.c2 COLLATE BINARY, ((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)), ((vt0.c0)&(vt0.c0)), (((vt0.c0, vt0.c0))<((vt0.c1, vt0.c0))))))) ORDER BY (((vt0.c0 IN (vt0.c1, vt0.c0)))<((((0.07897161631746963, vt0.c1, vt0.c1, vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c2, vt0.c0, vt0.c2, x'')) AND ((vt0.c2, vt0.c1, vt0.c2, vt0.c1, vt0.c0))))) ASC LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE ((((((((~ (vt0.c2)))AND((NOT ('-359981107')))))AND((((vt0.c2)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c2))))))AND(x'c817e933')));
SELECT * FROM vt0 WHERE ((((((((~ (vt0.c2)))AND((NOT ('-359981107')))))AND((((vt0.c2)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c2))))))AND(x'c817e933'))) ORDER BY CAST((NOT (vt0.c2)) AS TEXT), LIKELY(vt0.c2), LIKELIHOOD(((((NULL)OR(vt0.c0)))OR(vt0.c2)), vt0.c2 COLLATE NOCASE) DESC  NULLS LAST LIMIT 0X2 INTERSECT SELECT ALL * FROM vt0 WHERE (TRIM(LIKELY(vt0.c2))) ORDER BY CAST((NOT (vt0.c2)) AS TEXT), LIKELY(vt0.c2), LIKELIHOOD(((((NULL)OR(vt0.c0)))OR(vt0.c2)), vt0.c2 COLLATE NOCASE) DESC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((((((((~ (vt0.c2)))AND((NOT ('-359981107')))))AND((((vt0.c2)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c2))))))AND(x'c817e933')));
SELECT * FROM vt0 WHERE ((((((((~ (vt0.c2)))AND((NOT ('-359981107')))))AND((((vt0.c2)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c2))))))AND(x'c817e933'))) ORDER BY CAST((NOT (vt0.c2)) AS TEXT), LIKELY(vt0.c2), LIKELIHOOD(((((NULL)OR(vt0.c0)))OR(vt0.c2)), vt0.c2 COLLATE NOCASE) DESC  NULLS LAST LIMIT 0X2 INTERSECT SELECT ALL * FROM vt0 WHERE (TRIM(LIKELY(vt0.c2))) ORDER BY CAST((NOT (vt0.c2)) AS TEXT), LIKELY(vt0.c2), LIKELIHOOD(((((NULL)OR(vt0.c0)))OR(vt0.c2)), vt0.c2 COLLATE NOCASE) DESC  NULLS LAST LIMIT 2;
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY (((((((((vt0.c1 IN (vt0.c1, vt0.c0)))OR(CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)))OR(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 END)))OR(CAST(vt0.c1 AS REAL))))OR(((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))) DESC  NULLS LAST, CASE WHEN ((vt0.c1)OR(x'2f')) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)) WHEN (vt0.c2 IN (vt0.c2)) THEN NULL WHEN ((vt0.c2) IS TRUE) THEN ((vt0.c1)<<(vt0.c1)) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1)AND(vt0.c2))) ORDER BY (((((((((vt0.c1 IN (vt0.c1, vt0.c0)))OR(CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)))OR(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 END)))OR(CAST(vt0.c1 AS REAL))))OR(((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))) DESC  NULLS LAST, CASE WHEN ((vt0.c1)OR(x'2f')) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)) WHEN (vt0.c2 IN (vt0.c2)) THEN NULL WHEN ((vt0.c2) IS TRUE) THEN ((vt0.c1)<<(vt0.c1)) END DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY (((((((((vt0.c1 IN (vt0.c1, vt0.c0)))OR(CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)))OR(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 END)))OR(CAST(vt0.c1 AS REAL))))OR(((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))) DESC  NULLS LAST, CASE WHEN ((vt0.c1)OR(x'2f')) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)) WHEN (vt0.c2 IN (vt0.c2)) THEN NULL WHEN ((vt0.c2) IS TRUE) THEN ((vt0.c1)<<(vt0.c1)) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1)AND(vt0.c2))) ORDER BY (((((((((vt0.c1 IN (vt0.c1, vt0.c0)))OR(CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)))OR(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 END)))OR(CAST(vt0.c1 AS REAL))))OR(((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))) DESC  NULLS LAST, CASE WHEN ((vt0.c1)OR(x'2f')) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)) WHEN (vt0.c2 IN (vt0.c2)) THEN NULL WHEN ((vt0.c2) IS TRUE) THEN ((vt0.c1)<<(vt0.c1)) END DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY (((vt0.c2 IN ()))%(UNLIKELY(DISTINCT vt0.c0))) ASC  NULLS FIRST, 'z즏'  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY (((vt0.c2 IN ()))%(UNLIKELY(DISTINCT vt0.c0))) ASC  NULLS FIRST, 'z즏'  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)-(vt0.c0)))>=(vt0.c2))) ORDER BY (((vt0.c2 IN ()))%(UNLIKELY(DISTINCT vt0.c0))) ASC  NULLS FIRST, 'z즏'  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY (((vt0.c2 IN ()))%(UNLIKELY(DISTINCT vt0.c0))) ASC  NULLS FIRST, 'z즏'  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY (((vt0.c2 IN ()))%(UNLIKELY(DISTINCT vt0.c0))) ASC  NULLS FIRST, 'z즏'  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)-(vt0.c0)))>=(vt0.c2))) ORDER BY (((vt0.c2 IN ()))%(UNLIKELY(DISTINCT vt0.c0))) ASC  NULLS FIRST, 'z즏'  NULLS LAST LIMIT 1;
SELECT MAX(vt0.c0) FROM vt0 WHERE (CASE ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))  WHEN (((vt0.c2, vt0.c1))<>((vt0.c1, vt0.c2))) THEN TYPEOF(DISTINCT vt0.c0) WHEN 0.27566555134475823 THEN CAST(vt0.c1 AS TEXT) WHEN ((((((vt0.c0)AND('Y')))AND(x'45')))AND(vt0.c1)) THEN vt0.c2 END);
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((CASE ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))  WHEN (((vt0.c2, vt0.c1))>((vt0.c1, vt0.c2))) THEN TYPEOF(DISTINCT vt0.c0) WHEN 0.27566555134475823 THEN CAST(vt0.c1 AS TEXT) WHEN ((((((vt0.c0)AND('Y')))AND(x'45')))AND(vt0.c1)) THEN vt0.c2 END)AND(CAST((vt0.c2 IN ()) AS REAL)))) LIMIT 0x1;
SELECT * FROM vt0 WHERE ((((vt0.c2)) BETWEEN ((x'360f')) AND ((LIKELIHOOD(vt0.c2, vt0.c0))))) ORDER BY ((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)))IS NOT(((vt0.c2)LIKE(vt0.c1)))) DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c2)) BETWEEN ((x'360f')) AND ((LIKELIHOOD(vt0.c2, vt0.c0)))))AND(((CASE WHEN vt0.c0 THEN vt0.c1 WHEN -2130451094 THEN vt0.c1 END) ISNULL)))) ORDER BY ((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)))IS NOT(((vt0.c2)LIKE(vt0.c1)))) DESC LIMIT 2;
SELECT * FROM vt0 WHERE ((((vt0.c2)) BETWEEN ((x'360f')) AND ((LIKELIHOOD(vt0.c2, vt0.c0))))) ORDER BY ((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)))IS NOT(((vt0.c2)LIKE(vt0.c1)))) DESC;
SELECT ALL * FROM vt0 WHERE ((~ ((vt0.c1 IN ()))));
SELECT DISTINCT * FROM vt0 WHERE ((~ ((vt0.c1 IN ())))) LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((~ ((vt0.c1 IN ()))));
SELECT DISTINCT * FROM vt0 WHERE ((~ ((vt0.c1 IN ())))) LIMIT 2;
SELECT COUNT(*) FROM vt0 WHERE (CAST(LIKELIHOOD(vt0.c0, vt0.c1) AS REAL)) ORDER BY (CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END IN (((vt0.c2) IS FALSE))) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (CAST(LIKELIHOOD(vt0.c0, vt0.c1) AS REAL)) ORDER BY (CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END IN (((vt0.c2) IS FALSE))) DESC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((NULL)=(((vt0.c2)>>(vt0.c0))))) ORDER BY (CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END IN (((vt0.c2) IS FALSE))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0)))!=(((vt0.c0) NOT NULL))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0)))<>(((vt0.c0) NOT NULL))));
SELECT * FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0)))!=(((vt0.c0) NOT NULL))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0)))<>(((vt0.c0) NOT NULL))));
SELECT * FROM vt0 WHERE (((((vt0.c2)IS NOT(vt0.c1))) NOT BETWEEN ((((vt0.c2, vt0.c0))<=((vt0.c2, vt0.c1)))) AND (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c2)IS NOT(vt0.c1))) NOT BETWEEN ((((vt0.c2, vt0.c0))<=((vt0.c2, vt0.c1)))) AND (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)))AND(CASE ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2))  WHEN vt0.c1 COLLATE BINARY THEN vt0.c2 WHEN CAST(vt0.c1 AS INTEGER) THEN ((vt0.c2)==(vt0.c2)) END))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((- (ABS(DISTINCT vt0.c1)))) LIMIT 1;
SELECT * FROM vt0 WHERE (((((vt0.c2)IS NOT(vt0.c1))) NOT BETWEEN ((((vt0.c2, vt0.c0))<=((vt0.c2, vt0.c1)))) AND (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c2)IS NOT(vt0.c1))) NOT BETWEEN ((((vt0.c2, vt0.c0))<=((vt0.c2, vt0.c1)))) AND (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)))AND(CASE ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2))  WHEN vt0.c1 COLLATE BINARY THEN vt0.c2 WHEN CAST(vt0.c1 AS INTEGER) THEN ((vt0.c2)==(vt0.c2)) END))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((- (ABS(DISTINCT vt0.c1)))) LIMIT 1;
SELECT COUNT(*) FROM vt0 WHERE ((((((((('1329406373')IS NOT(vt0.c1)))AND(CAST(vt0.c1 AS REAL))))OR(((vt0.c0) IS FALSE))))OR((NOT (vt0.c2)))));
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((((((('1329406373')IS NOT(vt0.c1)))AND(CAST(vt0.c1 AS REAL))))OR(((vt0.c0) IS FALSE))))OR((NOT (vt0.c2)))))AND((((vt0.c1) NOT BETWEEN (vt0.c0) AND (NULL)) IN ())))) ORDER BY vt0.c1  NULLS LAST, CASE CASE WHEN vt0.c1 THEN 974229126 ELSE vt0.c0 END  WHEN (('%vl') BETWEEN (vt0.c0) AND (vt0.c0)) THEN (vt0.c2 IN (x'6d86', vt0.c0)) END, (((- (NULL)))OR(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END)) ASC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((CASE vt0.c2  WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c1 END IN ())) ORDER BY vt0.c1  NULLS LAST, CASE CASE WHEN vt0.c1 THEN 974229126 ELSE vt0.c0 END  WHEN (('%vl') BETWEEN (vt0.c0) AND (vt0.c0)) THEN (vt0.c2 IN (x'6d86', vt0.c0)) END, (((- (NULL)))OR(CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END)) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((((vt0.c0)IS(vt0.c0)))<=(((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)IS(vt0.c0)))==(((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1))))) ORDER BY (((vt0.c1)|(vt0.c2)) IN ())  NULLS LAST, ((((((((x'4985' COLLATE NOCASE)AND(((vt0.c1)>=(vt0.c0)))))OR(NULL)))OR((+ (vt0.c1)))))AND(vt0.c2)), ((((vt0.c1))!=((vt0.c1))) IN ((((vt0.c1, vt0.c2))<((vt0.c2, vt0.c2))))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULL) ORDER BY (((vt0.c1)|(vt0.c2)) IN ())  NULLS LAST, ((((((((x'4985' COLLATE NOCASE)AND(((vt0.c1)>=(vt0.c0)))))OR(NULL)))OR((+ (vt0.c1)))))AND(vt0.c2)), ((((vt0.c1))<>((vt0.c1))) IN ((((vt0.c1, vt0.c2))<((vt0.c2, vt0.c2))))) DESC;
SELECT * FROM vt0 WHERE (((((vt0.c0)IS(vt0.c0)))<=(((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)IS(vt0.c0)))==(((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1))))) ORDER BY (((vt0.c1)|(vt0.c2)) IN ())  NULLS LAST, ((((((((x'4985' COLLATE NOCASE)AND(((vt0.c1)>=(vt0.c0)))))OR(NULL)))OR((+ (vt0.c1)))))AND(vt0.c2)), ((((vt0.c1))!=((vt0.c1))) IN ((((vt0.c1, vt0.c2))<((vt0.c2, vt0.c2))))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULL) ORDER BY (((vt0.c1)|(vt0.c2)) IN ())  NULLS LAST, ((((((((x'4985' COLLATE NOCASE)AND(((vt0.c1)>=(vt0.c0)))))OR(NULL)))OR((+ (vt0.c1)))))AND(vt0.c2)), ((((vt0.c1))<>((vt0.c1))) IN ((((vt0.c1, vt0.c2))<((vt0.c2, vt0.c2))))) DESC;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((('-662124599'))!=((((vt0.c1)>=(vt0.c0))))));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((('-662124599'))<((((vt0.c1)>(vt0.c0))))));
SELECT MAX(vt0.c1) FROM vt0 WHERE (vt0.c2);
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((vt0.c2)AND(((- (vt0.c2)) IN (((vt0.c2)AND(vt0.c0)), ((((((((((((NULL)OR(NULL)))AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c0)))OR(vt0.c2)))))));
SELECT * FROM vt0 WHERE (x'');
SELECT DISTINCT * FROM vt0 WHERE (x'') LIMIT 1;
SELECT * FROM vt0 WHERE (x'');
SELECT DISTINCT * FROM vt0 WHERE (x'') LIMIT 1;
SELECT COUNT(*) FROM vt0 WHERE (((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END) NOTNULL));
SELECT COUNT(*) FROM vt0 WHERE (((((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END) NOTNULL))AND((vt0.c1 IN (vt0.c2, vt0.c2)) COLLATE RTRIM COLLATE BINARY))) LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt0 WHERE ('Hgx?
{㬃L_') LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((vt0.c1) IS FALSE) COLLATE NOCASE) ORDER BY 0.6701943446054793 COLLATE NOCASE  NULLS LAST, ((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))*(LIKELIHOOD(vt0.c0, vt0.c2)));
SELECT ALL * FROM vt0 WHERE (((vt0.c1) IS FALSE) COLLATE NOCASE) ORDER BY 0.6701943446054793 COLLATE NOCASE  NULLS LAST, ((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))*(LIKELIHOOD(vt0.c0, vt0.c2))) INTERSECT SELECT ALL * FROM vt0 WHERE (((('398391064') BETWEEN (vt0.c1) AND (vt0.c0)) IN ((~ (vt0.c2))))) ORDER BY 0.6701943446054793 COLLATE NOCASE  NULLS LAST, ((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))*(LIKELIHOOD(vt0.c0, vt0.c2)));
SELECT ALL * FROM vt0 WHERE (((vt0.c1) IS FALSE) COLLATE NOCASE) ORDER BY 0.6701943446054793 COLLATE NOCASE  NULLS LAST, ((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))*(LIKELIHOOD(vt0.c0, vt0.c2)));
SELECT ALL * FROM vt0 NOT INDEXED WHERE (((CAST(vt0.c2 AS TEXT))!=(vt0.c2)));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c2 AS TEXT))<>(vt0.c2))) ORDER BY x'a4'  NULLS FIRST;
SELECT ALL * FROM vt0 NOT INDEXED WHERE (((CAST(vt0.c2 AS TEXT))!=(vt0.c2)));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c2 AS TEXT))<>(vt0.c2))) ORDER BY x'a4'  NULLS FIRST;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (CASE vt0.c0 COLLATE RTRIM  WHEN (((vt0.c1, vt0.c2, vt0.c0, vt0.c2)) BETWEEN ((vt0.c0, vt0.c0, vt0.c1, vt0.c0)) AND ((vt0.c0, 0.9001426024420578, vt0.c1, vt0.c1))) THEN ((vt0.c0) NOTNULL) END);
SELECT MIN(vt0.c1) FROM vt0 WHERE (((CASE vt0.c0 COLLATE RTRIM  WHEN (((vt0.c1, vt0.c2, vt0.c0, vt0.c2)) BETWEEN ((vt0.c0, vt0.c0, vt0.c1, vt0.c0)) AND ((vt0.c0, 0.9001426024420578, vt0.c1, vt0.c1))) THEN ((vt0.c0) NOTNULL) END)AND(((vt0.c2) NOT BETWEEN ((((vt0.c1)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c1)))) AND (((vt0.c0)&(vt0.c2))))))) ORDER BY (((vt0.c1, vt0.c0, vt0.c1, vt0.c0)) BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END, (NOT (vt0.c1)), CAST(vt0.c2 AS INTEGER), (('1420460419') NOTNULL))) AND ((-1750434015 COLLATE BINARY, (vt0.c0 IN (vt0.c2)), ((((((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)), ((((((((((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c0)))AND(NULL)))AND(vt0.c1)))))  NULLS FIRST, ((STRFTIME(vt0.c2, vt0.c2, vt0.c2, vt0.c0)) NOTNULL) DESC  NULLS FIRST, HEX(((vt0.c1)!=(vt0.c1))) LIMIT 1 INTERSECT SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((CHAR(vt0.c1))>(((vt0.c0)-(vt0.c2))))) ORDER BY (((vt0.c1, vt0.c0, vt0.c1, vt0.c0)) BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END, (NOT (vt0.c1)), CAST(vt0.c2 AS INTEGER), (('1420460419') NOTNULL))) AND ((0xffffffff97aa7f21 COLLATE BINARY, (vt0.c0 IN (vt0.c2)), ((((((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)), ((((((((((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c0)))AND(NULL)))AND(vt0.c1)))))  NULLS FIRST, ((STRFTIME(vt0.c2, vt0.c2, vt0.c2, vt0.c0)) NOTNULL) DESC  NULLS FIRST, HEX(((vt0.c1)!=(vt0.c1))) LIMIT 0X1;
SELECT MAX(vt0.c1) FROM vt0 WHERE ((~ (0.49607205335512083))) ORDER BY CAST(((vt0.c0) IS FALSE) AS INTEGER), (((((((vt0.c0, vt0.c0, vt0.c1, vt0.c2, vt0.c1, vt0.c0)) BETWEEN ((vt0.c2, vt0.c0, vt0.c2, vt0.c1, vt0.c0, vt0.c1)) AND ((vt0.c1, vt0.c1, vt0.c1, vt0.c1, vt0.c1, vt0.c0))))OR(vt0.c2 COLLATE BINARY)))OR(((vt0.c2) ISNULL))) ASC  NULLS LAST;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ((~ (0.49607205335512083))) ORDER BY CAST(((vt0.c0) IS FALSE) AS INTEGER), (((((((vt0.c0, vt0.c0, vt0.c1, vt0.c2, vt0.c1, vt0.c0)) BETWEEN ((vt0.c2, vt0.c0, vt0.c2, vt0.c1, vt0.c0, vt0.c1)) AND ((vt0.c1, vt0.c1, vt0.c1, vt0.c1, vt0.c1, vt0.c0))))OR(vt0.c2 COLLATE BINARY)))OR(((vt0.c2) ISNULL))) ASC  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) AS TEXT)) ORDER BY '2097735588'  NULLS FIRST, ((CAST(vt0.c1 AS INTEGER))IS((NOT (vt0.c2)))), CAST(vt0.c1 AS REAL) DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((CAST(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) AS TEXT))AND(vt0.c2))) ORDER BY (((vt0.c1 IN ()))>=(CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)), (((((vt0.c1, vt0.c2, vt0.c1, vt0.c1, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0, vt0.c2, vt0.c0, vt0.c1, vt0.c1)) AND ((vt0.c1, '946905741', vt0.c0, vt0.c0, vt0.c2, vt0.c1, vt0.c1))))||(((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)))) ASC;
SELECT * FROM vt0 WHERE (-1045705496);
SELECT ALL * FROM vt0 WHERE (((-1045705496)AND((((vt0.c0)IS(vt0.c1)) IN ((vt0.c2 IN (vt0.c2)), ((((((((vt0.c2)OR(0.9496658808825288)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c0))))))) ORDER BY vt0.c1 DESC INTERSECT SELECT * FROM vt0 WHERE ((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))OR(0.6237609235810323)) IN (vt0.c1 COLLATE NOCASE))) ORDER BY vt0.c1 DESC;
SELECT * FROM vt0 WHERE (-1045705496);
SELECT ALL * FROM vt0 WHERE (((-1045705496)AND((((vt0.c0)IS(vt0.c1)) IN ((vt0.c2 IN (vt0.c2)), ((((((((vt0.c2)OR(0.9496658808825288)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c0))))))) ORDER BY vt0.c1 DESC INTERSECT SELECT * FROM vt0 WHERE ((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))OR(0.6237609235810323)) IN (vt0.c1 COLLATE NOCASE))) ORDER BY vt0.c1 DESC;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY IFNULL(((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c2)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c2)))  NULLS LAST, ((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c2)))AND(vt0.c2)))<<(((vt0.c2)IS(vt0.c0))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c0)AND(CAST(0x11a6bbf2 AS BLOB)))) ORDER BY IFNULL(((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c2)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c2)))  NULLS LAST, ((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c2)))AND(vt0.c2)))<<(((vt0.c2)IS(vt0.c0))))  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (QUOTE(vt0.c1)) ORDER BY IFNULL(((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c2)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c2)))  NULLS LAST, ((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c2)))AND(vt0.c2)))<<(((vt0.c2)IS(vt0.c0))))  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE ((((vt0.c0)*(x'8cf1a0')) IN ())) ORDER BY ((((vt0.c1, vt0.c0)) BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c0))) IN ()), ((((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1)))>=((((vt0.c0, vt0.c2, vt0.c2, vt0.c0, vt0.c1, vt0.c0, x'')) NOT BETWEEN ((vt0.c0, vt0.c1, vt0.c2, NULL, '|0灌43\P', vt0.c1, vt0.c2)) AND ((NULL, vt0.c2, vt0.c2, vt0.c1, vt0.c1, vt0.c1, vt0.c2))))), (((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)), ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1))))>=((rtreenode(vt0.c2, vt0.c1), ((vt0.c0) IS FALSE)))) DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0)*(x'8cf1a0')) IN ())) ORDER BY ((((vt0.c1) NOT NULL)) NOT NULL) LIMIT 0X0;
SELECT * FROM vt0 WHERE ((((vt0.c0)*(x'8cf1a0')) IN ())) ORDER BY ((((vt0.c1, vt0.c0)) BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c0))) IN ()), ((((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1)))>=((((vt0.c0, vt0.c2, vt0.c2, vt0.c0, vt0.c1, vt0.c0, x'')) NOT BETWEEN ((vt0.c0, vt0.c1, vt0.c2, NULL, '|0灌43\P', vt0.c1, vt0.c2)) AND ((NULL, vt0.c2, vt0.c2, vt0.c1, vt0.c1, vt0.c1, vt0.c2))))), (((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)), ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1))))>=((rtreenode(vt0.c2, vt0.c1), ((vt0.c0) IS FALSE)))) DESC;
SELECT * FROM vt0 WHERE (CAST(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END AS TEXT)) ORDER BY vt0.c2 ASC;
SELECT ALL * FROM vt0 WHERE (((CAST(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END AS TEXT))AND(json(((vt0.c0) NOT NULL))))) ORDER BY ('' IN ())  NULLS LAST, (((((vt0.c2, vt0.c0))<>((vt0.c0, vt0.c1)))) BETWEEN (vt0.c2 COLLATE BINARY) AND (vt0.c2)) LIMIT 0x1 INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c2 IN ()))<=((((vt0.c0, vt0.c1, vt0.c1))=((vt0.c0, vt0.c2, vt0.c2)))))) ORDER BY ('' IN ())  NULLS LAST, (((((vt0.c2, vt0.c0))!=((vt0.c0, vt0.c1)))) BETWEEN (vt0.c2 COLLATE BINARY) AND (vt0.c2)) LIMIT 1;
SELECT * FROM vt0 WHERE (CAST(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END AS TEXT)) ORDER BY vt0.c2 ASC;
SELECT ALL * FROM vt0 WHERE (((CAST(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END AS TEXT))AND(json(((vt0.c0) NOT NULL))))) ORDER BY ('' IN ())  NULLS LAST, (((((vt0.c2, vt0.c0))<>((vt0.c0, vt0.c1)))) BETWEEN (vt0.c2 COLLATE BINARY) AND (vt0.c2)) LIMIT 0x1 INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c2 IN ()))<=((((vt0.c0, vt0.c1, vt0.c1))=((vt0.c0, vt0.c2, vt0.c2)))))) ORDER BY ('' IN ())  NULLS LAST, (((((vt0.c2, vt0.c0))!=((vt0.c0, vt0.c1)))) BETWEEN (vt0.c2 COLLATE BINARY) AND (vt0.c2)) LIMIT 1;
SELECT * FROM vt0 WHERE (ROUND(vt0.c0, ((vt0.c1) NOT NULL))) ORDER BY (((~ (vt0.c1)))GLOB(((vt0.c0)&(vt0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (ROUND(vt0.c0, ((vt0.c1) NOT NULL))) ORDER BY (((~ (vt0.c1)))GLOB(((vt0.c0)&(vt0.c0))))  NULLS FIRST;
SELECT * FROM vt0 WHERE (ROUND(vt0.c0, ((vt0.c1) NOT NULL))) ORDER BY (((~ (vt0.c1)))GLOB(((vt0.c0)&(vt0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (ROUND(vt0.c0, ((vt0.c1) NOT NULL))) ORDER BY (((~ (vt0.c1)))GLOB(((vt0.c0)&(vt0.c0))))  NULLS FIRST;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((('-1008708845'))==((((vt0.c1) NOTNULL))))) ORDER BY (~ (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((('-1008708845'))==((((vt0.c1) NOTNULL)))))AND((((vt0.c1)) BETWEEN ((((vt0.c0) IS TRUE))) AND (((NOT (vt0.c0)))))))) ORDER BY (~ (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)))) INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((vt0.c2 COLLATE RTRIM))<=((UNLIKELY(vt0.c0))))) ORDER BY (~ (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1))));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((((((json(vt0.c1))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c2)))))AND((vt0.c2 IN (vt0.c0, vt0.c2)))))OR((((vt0.c1))<=((vt0.c2))))));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((((((json(vt0.c1))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c2)))))AND((vt0.c2 IN (vt0.c0, vt0.c2)))))OR((((vt0.c1))<=((vt0.c2)))))) INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (vt0.c2);
SELECT ALL * FROM vt0 WHERE (NULLIF(DISTINCT ((vt0.c2)*(vt0.c2)), (((vt0.c1, vt0.c2)) BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE (((NULLIF(DISTINCT ((vt0.c2)*(vt0.c2)), (((vt0.c1, vt0.c2)) BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c2)))))AND(((((vt0.c0 IN (vt0.c0)), vt0.c1, (vt0.c2 IN (vt0.c2, vt0.c0, '-1063489752')), (vt0.c1 IN (NULL))))<=((CAST(vt0.c0 AS INTEGER), ((('PmV
i旅')) BETWEEN ((vt0.c2)) AND ((vt0.c1))), (((vt0.c0)) BETWEEN ((vt0.c1)) AND ((x''))), ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c2)))))))) ORDER BY '-1651656952'  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE WHEN '' THEN ((vt0.c0) ISNULL) WHEN CAST(vt0.c0 AS TEXT) THEN ((vt0.c1)GLOB(vt0.c2)) WHEN CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 END THEN (((vt0.c0, vt0.c2, vt0.c0, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c0, vt0.c1, vt0.c2))) END) ORDER BY '-1651656952'  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (NULLIF(DISTINCT ((vt0.c2)*(vt0.c2)), (((vt0.c1, vt0.c2)) BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE (((NULLIF(DISTINCT ((vt0.c2)*(vt0.c2)), (((vt0.c1, vt0.c2)) BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c2)))))AND(((((vt0.c0 IN (vt0.c0)), vt0.c1, (vt0.c2 IN (vt0.c2, vt0.c0, '-1063489752')), (vt0.c1 IN (NULL))))<=((CAST(vt0.c0 AS INTEGER), ((('PmV
i旅')) BETWEEN ((vt0.c2)) AND ((vt0.c1))), (((vt0.c0)) BETWEEN ((vt0.c1)) AND ((x''))), ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c2)))))))) ORDER BY '-1651656952'  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE WHEN '' THEN ((vt0.c0) ISNULL) WHEN CAST(vt0.c0 AS TEXT) THEN ((vt0.c1)GLOB(vt0.c2)) WHEN CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 END THEN (((vt0.c0, vt0.c2, vt0.c0, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c0, vt0.c1, vt0.c2))) END) ORDER BY '-1651656952'  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c2)||((NOT (vt0.c2))))) ORDER BY vt0.c0;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2)||((NOT (vt0.c2))))) ORDER BY vt0.c0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (UNLIKELY(DISTINCT (((vt0.c2, vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c1, vt0.c1)) AND ((vt0.c0, -8.1538456E7, vt0.c2))))) ORDER BY vt0.c0;
SELECT * FROM vt0 WHERE (((vt0.c2)||((NOT (vt0.c2))))) ORDER BY vt0.c0;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2)||((NOT (vt0.c2))))) ORDER BY vt0.c0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (UNLIKELY(DISTINCT (((vt0.c2, vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c1, vt0.c1)) AND ((vt0.c0, -8.1538456E7, vt0.c2))))) ORDER BY vt0.c0;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((((((vt0.c1)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)) THEN (- (vt0.c0)) WHEN vt0.c0 COLLATE NOCASE THEN (((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt0.c1))) END);
SELECT * FROM vt0 WHERE (CASE WHEN ((((((vt0.c1)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)) THEN (- (vt0.c0)) WHEN vt0.c0 COLLATE NOCASE THEN (((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt0.c1))) END);
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((((((vt0.c1)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)) THEN (- (vt0.c0)) WHEN vt0.c0 COLLATE NOCASE THEN (((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt0.c1))) END);
SELECT * FROM vt0 WHERE (CASE WHEN ((((((vt0.c1)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)) THEN (- (vt0.c0)) WHEN vt0.c0 COLLATE NOCASE THEN (((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt0.c1))) END);
SELECT * FROM vt0 WHERE (((((vt0.c2)&(vt0.c2)))>>(CAST(vt0.c2 AS TEXT)))) ORDER BY ((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))-(((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))) DESC;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c2)&(vt0.c2)))>>(CAST(vt0.c2 AS TEXT))))AND(((((NULL) NOT BETWEEN (NULL) AND (vt0.c0))) IS FALSE)))) ORDER BY ((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))-(((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))) DESC INTERSECT SELECT * FROM vt0 WHERE (((vt0.c0)IS NOT(((vt0.c2)IS(vt0.c2))))) ORDER BY ((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))-(((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))) DESC;
SELECT * FROM vt0 WHERE (((((vt0.c2)&(vt0.c2)))>>(CAST(vt0.c2 AS TEXT)))) ORDER BY ((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))-(((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))) DESC;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c2)&(vt0.c2)))>>(CAST(vt0.c2 AS TEXT))))AND(((((NULL) NOT BETWEEN (NULL) AND (vt0.c0))) IS FALSE)))) ORDER BY ((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))-(((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))) DESC INTERSECT SELECT * FROM vt0 WHERE (((vt0.c0)IS NOT(((vt0.c2)IS(vt0.c2))))) ORDER BY ((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))-(((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))) DESC;
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE CAST(vt0.c2 AS BLOB)  WHEN ((((vt0.c1)OR(vt0.c2)))AND(vt0.c0)) THEN ((vt0.c1) ISNULL) WHEN CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 END THEN ((vt0.c1) ISNULL) WHEN ((vt0.c1) ISNULL) THEN CAST(vt0.c2 AS INTEGER) WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN QUOTE(vt0.c0) ELSE (((vt0.c0))>((vt0.c1))) END) ORDER BY (NOT (((((((vt0.c0)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c1)))) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE CAST(vt0.c2 AS BLOB)  WHEN ((((vt0.c1)OR(vt0.c2)))AND(vt0.c0)) THEN ((vt0.c1) ISNULL) WHEN CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 END THEN ((vt0.c1) ISNULL) WHEN ((vt0.c1) ISNULL) THEN CAST(vt0.c2 AS INTEGER) WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN QUOTE(vt0.c0) ELSE (((vt0.c0))>((vt0.c1))) END) ORDER BY (NOT (((((((vt0.c0)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c1)))) DESC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c1) NOT NULL)) NOT BETWEEN (((vt0.c0)/(vt0.c0))) AND (x''))) ORDER BY (NOT (((((((vt0.c0)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c1)))) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0))) BETWEEN (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 WHEN 'KMOh-eJm7' THEN vt0.c1 WHEN x'' THEN vt0.c1 END) AND ((+ (vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0))) BETWEEN (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 WHEN 'KMOh-eJm7' THEN vt0.c1 WHEN x'' THEN vt0.c1 END) AND ((+ (vt0.c2))))) ORDER BY (((((vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c0, vt0.c2)) BETWEEN ((vt0.c1, vt0.c0, vt0.c1, vt0.c0, 0.21104177705698624, vt0.c0)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c0, vt0.c0, vt0.c0)))) NOT BETWEEN ((NOT (vt0.c0))) AND (((vt0.c2)-(vt0.c0))))  NULLS LAST, (((CASE WHEN vt0.c2 THEN '-1967540600' ELSE x'5d' END))<=((((vt0.c1) IS FALSE)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0))) BETWEEN (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 WHEN 'KMOh-eJm7' THEN vt0.c1 WHEN x'' THEN vt0.c1 END) AND ((+ (vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0))) BETWEEN (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 WHEN 'KMOh-eJm7' THEN vt0.c1 WHEN x'' THEN vt0.c1 END) AND ((+ (vt0.c2))))) ORDER BY (((((vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c0, vt0.c2)) BETWEEN ((vt0.c1, vt0.c0, vt0.c1, vt0.c0, 0.21104177705698624, vt0.c0)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c0, vt0.c0, vt0.c0)))) NOT BETWEEN ((NOT (vt0.c0))) AND (((vt0.c2)-(vt0.c0))))  NULLS LAST, (((CASE WHEN vt0.c2 THEN '-1967540600' ELSE x'5d' END))<=((((vt0.c1) IS FALSE)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) NOT NULL))|(LIKELY(DISTINCT vt0.c0))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) NOT NULL))|(LIKELY(DISTINCT vt0.c0)))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE (('3')||(vt0.c0))  WHEN vt0.c0 THEN CASE vt0.c0  WHEN vt0.c0 THEN NULL ELSE vt0.c0 END WHEN (vt0.c0 IN (vt0.c1)) THEN (~ (vt0.c0)) WHEN ((((vt0.c0)OR(vt0.c2)))AND(vt0.c1)) THEN (vt0.c1 IN (vt0.c0)) WHEN -8.05618941E8 THEN ((vt0.c1)IS(vt0.c2)) END) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) NOT NULL))|(LIKELY(DISTINCT vt0.c0))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) NOT NULL))|(LIKELY(DISTINCT vt0.c0)))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE (('3')||(vt0.c0))  WHEN vt0.c0 THEN CASE vt0.c0  WHEN vt0.c0 THEN NULL ELSE vt0.c0 END WHEN (vt0.c0 IN (vt0.c1)) THEN (~ (vt0.c0)) WHEN ((((vt0.c0)OR(vt0.c2)))AND(vt0.c1)) THEN (vt0.c1 IN (vt0.c0)) WHEN -8.05618941E8 THEN ((vt0.c1)IS(vt0.c2)) END) LIMIT 0;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (CAST((((vt0.c0, vt0.c1))<>((0.2978551533492191, vt0.c2))) AS BLOB)) ORDER BY ((vt0.c0)!=(((vt0.c1)<<(vt0.c1))))  NULLS LAST, ((((((vt0.c2)||(vt0.c0)))OR((- (vt0.c1)))))AND(((vt0.c1) ISNULL)));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((CAST((((vt0.c0, vt0.c1))<>((0.2978551533492191, vt0.c2))) AS BLOB))AND(CASE ((((((vt0.c0)OR('ᎆ')))AND(vt0.c2)))AND(vt0.c1))  WHEN (((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c0))) THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN 0.1723282748632149 WHEN 'd' THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END WHEN TYPEOF(DISTINCT vt0.c0) THEN ((vt0.c2)>(vt0.c1)) ELSE ((((vt0.c1)AND(vt0.c2)))OR(vt0.c0)) END))) ORDER BY ((vt0.c0)<>(((vt0.c1)<<(vt0.c1))))  NULLS LAST, ((((((vt0.c2)||(vt0.c0)))OR((- (vt0.c1)))))AND(((vt0.c1) ISNULL))) LIMIT 0x2 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (UNLIKELY(((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))) ORDER BY ((vt0.c0)!=(((vt0.c1)<<(vt0.c1))))  NULLS LAST, ((((((vt0.c2)||(vt0.c0)))OR((- (vt0.c1)))))AND(((vt0.c1) ISNULL))) LIMIT 0X2;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((LIKELY(DISTINCT vt0.c2))IS((vt0.c2 IN ()))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((LIKELY(DISTINCT vt0.c2))IS((vt0.c2 IN ()))))AND(((CASE WHEN vt0.c0 THEN vt0.c0 END) IS FALSE)))) INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((((((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))AND((NOT (vt0.c2)))))OR(LIKELY(vt0.c1))))AND(((vt0.c0) NOTNULL))))OR(((vt0.c0)>(vt0.c2)))))OR(((vt0.c0)<>(vt0.c1)))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (SQLITE_VERSION());
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (SQLITE_VERSION()) LIMIT 0X1;
SELECT * FROM vt0 WHERE (((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))%(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END)));
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))%(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END)))AND(((CAST(vt0.c0 AS BLOB))=(((vt0.c1)>=('.>bQHM9i'))))))) ORDER BY (((vt0.c1)) BETWEEN ((((vt0.c1)IS NOT(vt0.c0)))) AND ((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))%(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END)));
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))%(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END)))AND(((CAST(vt0.c0 AS BLOB))=(((vt0.c1)>=('.>bQHM9i'))))))) ORDER BY (((vt0.c1)) BETWEEN ((((vt0.c1)IS NOT(vt0.c0)))) AND ((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))))  NULLS FIRST;
SELECT * FROM vt0 WHERE (0.3823040419132159 COLLATE RTRIM) ORDER BY (- (((vt0.c1)IS NOT(vt0.c2))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (0.3823040419132159 COLLATE RTRIM) ORDER BY (- (((vt0.c1)IS NOT(vt0.c2))))  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0)<>(vt0.c1)))<>(((vt0.c1)<<(vt0.c1))))) ORDER BY (- (((vt0.c1)IS NOT(vt0.c2))))  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE (0.3823040419132159 COLLATE RTRIM) ORDER BY (- (((vt0.c1)IS NOT(vt0.c2))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (0.3823040419132159 COLLATE RTRIM) ORDER BY (- (((vt0.c1)IS NOT(vt0.c2))))  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0)<>(vt0.c1)))<>(((vt0.c1)<<(vt0.c1))))) ORDER BY (- (((vt0.c1)IS NOT(vt0.c2))))  NULLS LAST LIMIT 0;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS INTEGER)) BETWEEN (IFNULL(vt0.c2, vt0.c0)) AND ((('461008101') NOT BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY (- (vt0.c1 COLLATE RTRIM)) ASC, NULL;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS INTEGER)) BETWEEN (IFNULL(vt0.c2, vt0.c0)) AND ((('461008101') NOT BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY (- (vt0.c1 COLLATE RTRIM)) ASC, NULL INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (CASE (vt0.c1 IN (vt0.c2))  WHEN ((527111402)+(vt0.c1)) THEN IFNULL(vt0.c2, vt0.c2) ELSE ((vt0.c2)>=(vt0.c2)) END) ORDER BY (- (vt0.c1 COLLATE RTRIM)) ASC, NULL;
SELECT ALL * FROM vt0 WHERE ((((vt0.c1) ISNULL) IN (((vt0.c1)GLOB(0.5667958780424336)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1) ISNULL) IN (((vt0.c1)GLOB(0.5667958780424336))))) ORDER BY (((((vt0.c1)>(vt0.c1))))>((((vt0.c1)IS NOT(vt0.c1))))), ((x'')|(((((vt0.c2)OR(vt0.c0)))OR('%s%2e^ky')))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((vt0.c0 IN (((((vt0.c2)AND(NULL)))OR(vt0.c1)), ((vt0.c1)<(vt0.c1))))) ORDER BY (((((vt0.c1)>(vt0.c1))))>((((vt0.c1)IS NOT(vt0.c1))))), ((x'')|(((((vt0.c2)OR(vt0.c0)))OR('%s%2e^ky'))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c1) ISNULL) IN (((vt0.c1)GLOB(0.5667958780424336)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1) ISNULL) IN (((vt0.c1)GLOB(0.5667958780424336))))) ORDER BY (((((vt0.c1)>(vt0.c1))))>((((vt0.c1)IS NOT(vt0.c1))))), ((x'')|(((((vt0.c2)OR(vt0.c0)))OR('%s%2e^ky')))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((vt0.c0 IN (((((vt0.c2)AND(NULL)))OR(vt0.c1)), ((vt0.c1)<(vt0.c1))))) ORDER BY (((((vt0.c1)>(vt0.c1))))>((((vt0.c1)IS NOT(vt0.c1))))), ((x'')|(((((vt0.c2)OR(vt0.c0)))OR('%s%2e^ky'))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (((0.32207580723770834)<>('')));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((0.32207580723770834)<('')))AND(((((vt0.c1) NOT NULL))LIKE(CAST(vt0.c0 AS TEXT)))))) LIMIT 0X3 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (vt0.c1) LIMIT 3;
SELECT ALL * FROM vt0 WHERE (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) COLLATE RTRIM) ORDER BY ((((((((((HEX(vt0.c0))AND(('-605607680' IN (vt0.c0, vt0.c1)))))AND(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))))OR(((vt0.c0)<>(vt0.c1)))))OR((- (vt0.c2)))))OR(vt0.c0)) ASC  NULLS LAST, CASE ((vt0.c0)||(vt0.c0))  WHEN ((((((((vt0.c2)OR(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))OR(x'')) THEN ((vt0.c2)>>(vt0.c0)) ELSE 0X2a5169f9 END  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) COLLATE RTRIM)AND((((vt0.c1, vt0.c2, vt0.c2, vt0.c2)) BETWEEN ((((vt0.c0) ISNULL), ((vt0.c0) NOT NULL), 0.10358006720515045 COLLATE RTRIM, vt0.c0 COLLATE RTRIM)) AND ((((vt0.c1)!=(vt0.c1)), ((vt0.c2)IS NOT(vt0.c0)), vt0.c1 COLLATE RTRIM, CAST(vt0.c2 AS TEXT))))))) ORDER BY CASE WHEN STRFTIME(vt0.c2, vt0.c0, vt0.c2) THEN CASE WHEN vt0.c2 THEN vt0.c1 END WHEN CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN NULL THEN vt0.c2 WHEN x'' THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END THEN vt0.c2 WHEN ((vt0.c0) ISNULL) THEN ((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)) END, CAST('-2032011166' AS TEXT)  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE (((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 END) BETWEEN ((- (vt0.c1))) AND (((((((vt0.c0)AND(vt0.c0)))AND(vt0.c1)))OR(0.6415799564365186))))) ORDER BY CASE WHEN STRFTIME(vt0.c2, vt0.c0, vt0.c2) THEN CASE WHEN vt0.c2 THEN vt0.c1 END WHEN CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN NULL THEN vt0.c2 WHEN x'' THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END THEN vt0.c2 WHEN ((vt0.c0) ISNULL) THEN ((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)) END, CAST('-2032011166' AS TEXT)  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) COLLATE RTRIM) ORDER BY ((((((((((HEX(vt0.c0))AND(('-605607680' IN (vt0.c0, vt0.c1)))))AND(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))))OR(((vt0.c0)<>(vt0.c1)))))OR((- (vt0.c2)))))OR(vt0.c0)) ASC  NULLS LAST, CASE ((vt0.c0)||(vt0.c0))  WHEN ((((((((vt0.c2)OR(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))OR(x'')) THEN ((vt0.c2)>>(vt0.c0)) ELSE 0X2a5169f9 END  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) COLLATE RTRIM)AND((((vt0.c1, vt0.c2, vt0.c2, vt0.c2)) BETWEEN ((((vt0.c0) ISNULL), ((vt0.c0) NOT NULL), 0.10358006720515045 COLLATE RTRIM, vt0.c0 COLLATE RTRIM)) AND ((((vt0.c1)!=(vt0.c1)), ((vt0.c2)IS NOT(vt0.c0)), vt0.c1 COLLATE RTRIM, CAST(vt0.c2 AS TEXT))))))) ORDER BY CASE WHEN STRFTIME(vt0.c2, vt0.c0, vt0.c2) THEN CASE WHEN vt0.c2 THEN vt0.c1 END WHEN CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN NULL THEN vt0.c2 WHEN x'' THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END THEN vt0.c2 WHEN ((vt0.c0) ISNULL) THEN ((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)) END, CAST('-2032011166' AS TEXT)  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE (((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 END) BETWEEN ((- (vt0.c1))) AND (((((((vt0.c0)AND(vt0.c0)))AND(vt0.c1)))OR(0.6415799564365186))))) ORDER BY CASE WHEN STRFTIME(vt0.c2, vt0.c0, vt0.c2) THEN CASE WHEN vt0.c2 THEN vt0.c1 END WHEN CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN NULL THEN vt0.c2 WHEN x'' THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END THEN vt0.c2 WHEN ((vt0.c0) ISNULL) THEN ((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)) END, CAST('-2032011166' AS TEXT)  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c2))<>((vt0.c2)))) IS FALSE));
SELECT DISTINCT * FROM vt0 WHERE ((((((((vt0.c2))!=((vt0.c2)))) IS FALSE))AND((((vt0.c2 IN (vt0.c1))) BETWEEN ((NOT (vt0.c0))) AND (((vt0.c2) IS FALSE)))))) ORDER BY (((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) IN ())  NULLS LAST, (- (((vt0.c1) IS FALSE))), (((vt0.c1 IN ())) IS FALSE)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c1))))|(((((((vt0.c0)OR(vt0.c0)))AND(x'')))OR(vt0.c2))))) ORDER BY (((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) IN ())  NULLS LAST, (- (((vt0.c1) IS FALSE))), (((vt0.c1 IN ())) IS FALSE)  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c2))<>((vt0.c2)))) IS FALSE));
SELECT DISTINCT * FROM vt0 WHERE ((((((((vt0.c2))!=((vt0.c2)))) IS FALSE))AND((((vt0.c2 IN (vt0.c1))) BETWEEN ((NOT (vt0.c0))) AND (((vt0.c2) IS FALSE)))))) ORDER BY (((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) IN ())  NULLS LAST, (- (((vt0.c1) IS FALSE))), (((vt0.c1 IN ())) IS FALSE)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c1))))|(((((((vt0.c0)OR(vt0.c0)))AND(x'')))OR(vt0.c2))))) ORDER BY (((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) IN ())  NULLS LAST, (- (((vt0.c1) IS FALSE))), (((vt0.c1 IN ())) IS FALSE)  NULLS FIRST;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((- (vt0.c0))) NOT NULL));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((((- (vt0.c0))) NOT NULL))AND(((((vt0.c1)=(vt0.c0))) BETWEEN (highlight(vt0.c0, vt0.c1, vt0.c2, vt0.c2)) AND (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END))))) LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (LOWER(CASE WHEN NULL THEN vt0.c1 ELSE vt0.c2 END)) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((NULL)%((vt0.c2 IN (vt0.c0, vt0.c2))))) ORDER BY IFNULL(DISTINCT CAST(vt0.c1 AS BLOB), ((vt0.c0)%(vt0.c1))) ASC  NULLS LAST, ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (NULL))) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND ((vt0.c0 IN (vt0.c1))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((NULL)%((vt0.c2 IN (vt0.c0, vt0.c2))))) ORDER BY ((((0.013296509154812619)%(vt0.c2))) ISNULL) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((NULL)%((vt0.c2 IN (vt0.c0, vt0.c2))))) ORDER BY IFNULL(DISTINCT CAST(vt0.c1 AS BLOB), ((vt0.c0)%(vt0.c1))) ASC  NULLS LAST, ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (NULL))) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND ((vt0.c0 IN (vt0.c1))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((NULL)%((vt0.c2 IN (vt0.c0, vt0.c2))))) ORDER BY ((((0.013296509154812619)%(vt0.c2))) ISNULL) ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY x'' DESC;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY x'' DESC;
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY x'' DESC;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY x'' DESC;
SELECT MAX(vt0.c2) FROM vt0 WHERE (CAST((vt0.c2 IN (vt0.c2)) AS TEXT)) ORDER BY CHAR('1177810310') DESC  NULLS LAST, (((~ (0.42293784154252034)))IS(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2))));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((CAST((vt0.c2 IN (vt0.c2)) AS TEXT))AND((- ((((vt0.c0)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c0)))))))) ORDER BY CHAR('1177810310') DESC  NULLS LAST, (((~ (0.42293784154252034)))IS(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)))) INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (COALESCE('' COLLATE RTRIM, x'', json_object(vt0.c1, vt0.c0, vt0.c0, vt0.c0), ((0.08381278736530173)/(vt0.c2)))) ORDER BY CHAR('1177810310') DESC  NULLS LAST, (((~ (0.42293784154252034)))IS(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2))));
SELECT ALL COUNT(*) FROM vt0 WHERE (((CAST(vt0.c2 AS TEXT))<=((~ (vt0.c1)))));
SELECT COUNT(*) FROM vt0 WHERE (((((CAST(vt0.c2 AS TEXT))<((~ (vt0.c1)))))AND(((((vt0.c2) ISNULL))>((((NULL, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c0)))))))) ORDER BY (vt0.c0 IN ((- (vt0.c0)))) INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ('') ORDER BY (vt0.c0 IN ((- (vt0.c0))));
SELECT * FROM vt0 WHERE (x'a01a7448');
SELECT ALL * FROM vt0 WHERE (x'a01a7448') ORDER BY (('~,') IS TRUE)  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (CAST((vt0.c1 IN ()) AS INTEGER)) ORDER BY (('~,') IS TRUE)  NULLS LAST LIMIT 0x0;
SELECT * FROM vt0 WHERE (x'a01a7448');
SELECT ALL * FROM vt0 WHERE (x'a01a7448') ORDER BY (('~,') IS TRUE)  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (CAST((vt0.c1 IN ()) AS INTEGER)) ORDER BY (('~,') IS TRUE)  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0 WHERE (TYPEOF(DISTINCT CASE WHEN vt0.c1 THEN vt0.c1 WHEN x'' THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)) ORDER BY 0.5460121319307509 ASC  NULLS LAST, ((((((((((((((vt0.c1)OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)))OR(((vt0.c2) IS FALSE))))OR(CASE WHEN vt0.c0 THEN vt0.c2 END)) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (TYPEOF(DISTINCT CASE WHEN vt0.c1 THEN vt0.c1 WHEN x'' THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)) ORDER BY (((- (''))) BETWEEN (((vt0.c0)+(vt0.c0))) AND (((vt0.c2) NOT BETWEEN (vt0.c2) AND (''))))  NULLS LAST, CAST((0.026677829472838477 IN (vt0.c2)) AS BLOB) ASC  NULLS LAST, CASE vt0.c0 COLLATE NOCASE  WHEN CAST(vt0.c1 AS TEXT) THEN ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)) END  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST(vt0.c1 AS TEXT))==(((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) ORDER BY (((- (''))) BETWEEN (((vt0.c0)+(vt0.c0))) AND (((vt0.c2) NOT BETWEEN (vt0.c2) AND (''))))  NULLS LAST, CAST((0.026677829472838477 IN (vt0.c2)) AS BLOB) ASC  NULLS LAST, CASE vt0.c0 COLLATE NOCASE  WHEN CAST(vt0.c1 AS TEXT) THEN ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)) END  NULLS FIRST;
SELECT MAX(vt0.c2) FROM vt0 WHERE ((((COALESCE(vt0.c0, vt0.c1, vt0.c1, 0X7d058c63), (vt0.c0 IN ())))=((((((vt0.c2)AND(vt0.c2)))AND(vt0.c1)), (- (vt0.c1))))));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((((((COALESCE(vt0.c0, vt0.c1, vt0.c1, 2097515619), (vt0.c0 IN ())))==((((((vt0.c2)AND(vt0.c2)))AND(vt0.c1)), (- (vt0.c1))))))AND(NULL)));
SELECT ALL * FROM vt0 WHERE ((LTRIM(vt0.c2, vt0.c2) IN ())) ORDER BY ((((vt0.c0) IS TRUE))-((vt0.c1 IN (vt0.c2))))  NULLS LAST, ((TRIM(DISTINCT vt0.c2))>=(((vt0.c2)|(vt0.c2)))) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((LTRIM(vt0.c2, vt0.c2) IN ()))AND(((CASE WHEN vt0.c1 THEN x'ab' WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END)>(CAST(vt0.c0 AS NUMERIC)))))) ORDER BY ((((vt0.c0) IS TRUE))-((vt0.c1 IN (vt0.c2))))  NULLS LAST, ((TRIM(DISTINCT vt0.c2))>=(((vt0.c2)|(vt0.c2)))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((LTRIM(vt0.c2, vt0.c2) IN ())) ORDER BY ((((vt0.c0) IS TRUE))-((vt0.c1 IN (vt0.c2))))  NULLS LAST, ((TRIM(DISTINCT vt0.c2))>=(((vt0.c2)|(vt0.c2)))) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((LTRIM(vt0.c2, vt0.c2) IN ()))AND(((CASE WHEN vt0.c1 THEN x'ab' WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END)>(CAST(vt0.c0 AS NUMERIC)))))) ORDER BY ((((vt0.c0) IS TRUE))-((vt0.c1 IN (vt0.c2))))  NULLS LAST, ((TRIM(DISTINCT vt0.c2))>=(((vt0.c2)|(vt0.c2)))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c1 COLLATE BINARY);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c1 COLLATE BINARY)AND(((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c2))) IS TRUE)))) ORDER BY ((vt0.c1)*(vt0.c0)) COLLATE BINARY DESC  NULLS FIRST, (~ (json_extract(vt0.c2, vt0.c0))) ASC LIMIT 0x2;
SELECT ALL * FROM vt0 WHERE ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END IN ()));
SELECT * FROM vt0 WHERE ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END IN ())) ORDER BY CAST((vt0.c2 IN ()) AS INTEGER) ASC, CASE ((vt0.c1) NOT NULL)  WHEN (~ (vt0.c0)) THEN vt0.c0 WHEN vt0.c0 THEN (((vt0.c1, 0.36224214601003146, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c2, vt0.c2, vt0.c0, '2064726635', vt0.c2)) AND ((0.0014502232478735833, vt0.c1, vt0.c0, vt0.c1, vt0.c1))) ELSE ((vt0.c2)|(vt0.c2)) END, (((((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) IS TRUE) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 END) NOT BETWEEN (CAST(vt0.c2 AS INTEGER)) AND ((vt0.c2 IN (vt0.c1))))) ORDER BY CAST((vt0.c2 IN ()) AS INTEGER) ASC, CASE ((vt0.c1) NOT NULL)  WHEN (~ (vt0.c0)) THEN vt0.c0 WHEN vt0.c0 THEN (((vt0.c1, 0.36224214601003146, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c2, vt0.c2, vt0.c0, '2064726635', vt0.c2)) AND ((0.0014502232478735833, vt0.c1, vt0.c0, vt0.c1, vt0.c1))) ELSE ((vt0.c2)|(vt0.c2)) END, (((((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) IS TRUE) ASC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END IN ()));
SELECT * FROM vt0 WHERE ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END IN ())) ORDER BY CAST((vt0.c2 IN ()) AS INTEGER) ASC, CASE ((vt0.c1) NOT NULL)  WHEN (~ (vt0.c0)) THEN vt0.c0 WHEN vt0.c0 THEN (((vt0.c1, 0.36224214601003146, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c2, vt0.c2, vt0.c0, '2064726635', vt0.c2)) AND ((0.0014502232478735833, vt0.c1, vt0.c0, vt0.c1, vt0.c1))) ELSE ((vt0.c2)|(vt0.c2)) END, (((((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) IS TRUE) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 END) NOT BETWEEN (CAST(vt0.c2 AS INTEGER)) AND ((vt0.c2 IN (vt0.c1))))) ORDER BY CAST((vt0.c2 IN ()) AS INTEGER) ASC, CASE ((vt0.c1) NOT NULL)  WHEN (~ (vt0.c0)) THEN vt0.c0 WHEN vt0.c0 THEN (((vt0.c1, 0.36224214601003146, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c2, vt0.c2, vt0.c0, '2064726635', vt0.c2)) AND ((0.0014502232478735833, vt0.c1, vt0.c0, vt0.c1, vt0.c1))) ELSE ((vt0.c2)|(vt0.c2)) END, (((((vt0.c0, vt0.c0))<((vt0.c2, vt0.c2)))) IS TRUE) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt0 WHERE ((((((vt0.c1)OR(vt0.c2)))OR(vt0.c0)) IN (((vt0.c1) IS TRUE), TRIM(0.3999011143725897, x'')))) ORDER BY 0.07283531813560207 DESC;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1)OR(vt0.c2)))OR(vt0.c0)) IN (((vt0.c1) IS TRUE)))) ORDER BY 'o[tV', (((((vt0.c1)AND(vt0.c0)))AND(vt0.c0)) IN ())  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 WHERE ((NOT (((x'') BETWEEN (vt0.c0) AND (vt0.c2))))) ORDER BY 'o[tV', (((((vt0.c1)AND(vt0.c0)))AND(vt0.c0)) IN ())  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE ((((((vt0.c1)OR(vt0.c2)))OR(vt0.c0)) IN (((vt0.c1) IS TRUE), TRIM(0.3999011143725897, x'')))) ORDER BY 0.07283531813560207 DESC;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1)OR(vt0.c2)))OR(vt0.c0)) IN (((vt0.c1) IS TRUE)))) ORDER BY 'o[tV', (((((vt0.c1)AND(vt0.c0)))AND(vt0.c0)) IN ())  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 WHERE ((NOT (((x'') BETWEEN (vt0.c0) AND (vt0.c2))))) ORDER BY 'o[tV', (((((vt0.c1)AND(vt0.c0)))AND(vt0.c0)) IN ())  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE ((vt0.c2 COLLATE BINARY IN (((vt0.c2)||(vt0.c0)), ((vt0.c1)&(vt0.c2))))) ORDER BY ((RTRIM(vt0.c0))|(vt0.c0));
SELECT ALL * FROM vt0 WHERE ((((vt0.c2 COLLATE BINARY IN (((vt0.c2)||(vt0.c0)), ((vt0.c1)&(vt0.c2)))))AND(IFNULL(DISTINCT ((vt0.c2) NOT BETWEEN (2.1801391E7) AND (0.9766274805027967)), ((NULL)OR(vt0.c0)))))) ORDER BY ((RTRIM(vt0.c0))|(vt0.c0)) INTERSECT SELECT * FROM vt0 WHERE (CASE WHEN CASE WHEN vt0.c1 THEN vt0.c1 END THEN vt0.c0 COLLATE RTRIM WHEN vt0.c0 THEN x'' ELSE LIKELY(DISTINCT vt0.c0) END) ORDER BY ((RTRIM(vt0.c0))|(vt0.c0));
SELECT * FROM vt0 WHERE ((vt0.c2 COLLATE BINARY IN (((vt0.c2)||(vt0.c0)), ((vt0.c1)&(vt0.c2))))) ORDER BY ((RTRIM(vt0.c0))|(vt0.c0));
SELECT ALL * FROM vt0 WHERE ((((vt0.c2 COLLATE BINARY IN (((vt0.c2)||(vt0.c0)), ((vt0.c1)&(vt0.c2)))))AND(IFNULL(DISTINCT ((vt0.c2) NOT BETWEEN (2.1801391E7) AND (0.9766274805027967)), ((NULL)OR(vt0.c0)))))) ORDER BY ((RTRIM(vt0.c0))|(vt0.c0)) INTERSECT SELECT * FROM vt0 WHERE (CASE WHEN CASE WHEN vt0.c1 THEN vt0.c1 END THEN vt0.c0 COLLATE RTRIM WHEN vt0.c0 THEN x'' ELSE LIKELY(DISTINCT vt0.c0) END) ORDER BY ((RTRIM(vt0.c0))|(vt0.c0));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c0)))AND(vt0.c1)) COLLATE NOCASE) ORDER BY ((((((0.23207024785892572)OR(((vt0.c2)<<(NULL)))))OR(NULL)))OR(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)))) ASC, (~ ((vt0.c0 IN (4.80946256E8, vt0.c1)))), CASE WHEN (((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))) THEN ((vt0.c2) ISNULL) END ASC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c0)))AND(vt0.c1)) COLLATE NOCASE)AND(CAST((((vt0.c0, vt0.c2, vt0.c0, vt0.c0)) BETWEEN ((vt0.c1, vt0.c1, vt0.c1, NULL)) AND ((vt0.c0, vt0.c1, vt0.c0, NULL))) AS BLOB)))) ORDER BY ((((((0.23207024785892572)OR(((vt0.c2)<<(NULL)))))OR(NULL)))OR(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)))) ASC, (~ ((vt0.c0 IN (4.80946256E8, vt0.c1)))), CASE WHEN (((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))) THEN ((vt0.c2) ISNULL) END ASC;
SELECT ALL * FROM vt0 WHERE ((((((((((('')OR(vt0.c0)))OR(vt0.c1)))OR(vt0.c0)))AND(vt0.c2)))IS(((((vt0.c0)AND(vt0.c0)))OR(vt0.c1)))));
SELECT * FROM vt0 WHERE ((((((((((((('')OR(vt0.c0)))OR(vt0.c1)))OR(vt0.c0)))AND(vt0.c2)))IS(((((vt0.c0)AND(vt0.c0)))OR(vt0.c1)))))AND(CAST(((vt0.c1)IS NOT(vt0.c2)) AS INTEGER))));
SELECT ALL * FROM vt0 WHERE ((((((((((('')OR(vt0.c0)))OR(vt0.c1)))OR(vt0.c0)))AND(vt0.c2)))IS(((((vt0.c0)AND(vt0.c0)))OR(vt0.c1)))));
SELECT * FROM vt0 WHERE ((((((((((((('')OR(vt0.c0)))OR(vt0.c1)))OR(vt0.c0)))AND(vt0.c2)))IS(((((vt0.c0)AND(vt0.c0)))OR(vt0.c1)))))AND(CAST(((vt0.c1)IS NOT(vt0.c2)) AS INTEGER))));
SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS TEXT))OR(CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END))) ORDER BY ((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c2))) NOT BETWEEN (CAST(vt0.c0 AS TEXT)) AND (((vt0.c2) BETWEEN (vt0.c1) AND ('-891722830')))) ASC  NULLS FIRST, ((vt0.c1)<>(((vt0.c1)+(-3.45306029E8))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c0 AS TEXT))OR(CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END)))AND(0x54e4bd03))) ORDER BY ((((((vt0.c2)AND(vt0.c0)))OR(vt0.c1))) NOT NULL), ((TYPEOF(vt0.c2)) NOT BETWEEN ('-895481057') AND ((((vt0.c0))==((vt0.c2)))))  NULLS LAST LIMIT 0x1;
SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS TEXT))OR(CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END))) ORDER BY ((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c2))) NOT BETWEEN (CAST(vt0.c0 AS TEXT)) AND (((vt0.c2) BETWEEN (vt0.c1) AND ('-891722830')))) ASC  NULLS FIRST, ((vt0.c1)<>(((vt0.c1)+(-3.45306029E8))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c0 AS TEXT))OR(CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 END)))AND(0x54e4bd03))) ORDER BY ((((((vt0.c2)AND(vt0.c0)))OR(vt0.c1))) NOT NULL), ((TYPEOF(vt0.c2)) NOT BETWEEN ('-895481057') AND ((((vt0.c0))==((vt0.c2)))))  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (json_object(((vt0.c2) IS FALSE), x'a3132cfb', ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)), 1796907394, CASE WHEN vt0.c1 THEN -1861244521 WHEN NULL THEN vt0.c0 ELSE vt0.c2 END)) ORDER BY ((((vt0.c0) NOT NULL))+(((0.9171007972904743) NOTNULL))), NULLIF(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c1)), ((vt0.c0) BETWEEN (vt0.c0) AND (NULL)));
SELECT * FROM vt0 WHERE (json_object(((vt0.c2) IS FALSE), x'a3132cfb', ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)), 0x6b1aa182, CASE WHEN vt0.c1 THEN 0Xffffffff910fa997 WHEN NULL THEN vt0.c0 ELSE vt0.c2 END)) ORDER BY ((((vt0.c0) NOT NULL))+(((0.9171007972904743) NOTNULL))), NULLIF(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c1)), ((vt0.c0) BETWEEN (vt0.c0) AND (NULL))) LIMIT 3;
SELECT ALL * FROM vt0 WHERE (json_object(((vt0.c2) IS FALSE), x'a3132cfb', ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)), 1796907394, CASE WHEN vt0.c1 THEN -1861244521 WHEN NULL THEN vt0.c0 ELSE vt0.c2 END)) ORDER BY ((((vt0.c0) NOT NULL))+(((0.9171007972904743) NOTNULL))), NULLIF(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c1)), ((vt0.c0) BETWEEN (vt0.c0) AND (NULL)));
SELECT MIN(vt0.c2) FROM vt0 WHERE (CASE WHEN (- (vt0.c0)) THEN ((vt0.c1)||(vt0.c2)) WHEN (~ (vt0.c1)) THEN (NOT (vt0.c1)) WHEN ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)) THEN (vt0.c1 IN (vt0.c1, vt0.c0)) ELSE ((vt0.c0) NOT NULL) END) ORDER BY ((NULL) NOT BETWEEN (((vt0.c1)OR(vt0.c2))) AND (CHANGES())) ASC, vt0.c2 ASC;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((CASE WHEN (- (vt0.c0)) THEN ((vt0.c1)||(vt0.c2)) WHEN (~ (vt0.c1)) THEN (NOT (vt0.c1)) WHEN ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)) THEN (vt0.c1 IN (vt0.c1, vt0.c0)) ELSE ((vt0.c0) NOT NULL) END)AND(0.5510515675185628 COLLATE NOCASE))) ORDER BY CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN -615203911 WHEN vt0.c0 THEN vt0.c0 END COLLATE NOCASE  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (NULL) ORDER BY CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN -615203911 WHEN vt0.c0 THEN vt0.c0 END COLLATE NOCASE  NULLS LAST;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((+ (((vt0.c0)>>(vt0.c2))))) ORDER BY ((NULL)||(CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c2 END)) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((+ (((vt0.c0)>>(vt0.c2)))))AND(((((CAST(vt0.c2 AS NUMERIC))OR((((vt0.c0, vt0.c1)) BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c2))))))AND(json_array_length(vt0.c0)))))) ORDER BY ((NULL)||(CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c2 END)) DESC  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)%(vt0.c1)))GLOB(COALESCE(vt0.c1, vt0.c1, vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)%(vt0.c1)))GLOB(COALESCE(vt0.c1, vt0.c1, vt0.c0)))) ORDER BY ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2)) COLLATE NOCASE ASC  NULLS LAST, ((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)>((((vt0.c0, 0.22137530896621738)) NOT BETWEEN ((vt0.c2, x'2163c3')) AND ((x'', vt0.c0)))))  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)%(vt0.c1)))GLOB(COALESCE(vt0.c1, vt0.c1, vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)%(vt0.c1)))GLOB(COALESCE(vt0.c1, vt0.c1, vt0.c0)))) ORDER BY ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2)) COLLATE NOCASE ASC  NULLS LAST, ((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)>((((vt0.c0, 0.22137530896621738)) NOT BETWEEN ((vt0.c2, x'2163c3')) AND ((x'', vt0.c0)))))  NULLS FIRST LIMIT 0X1;
SELECT MAX(vt0.c2) FROM vt0 WHERE ((((vt0.c0)|(NULL)) IN ())) ORDER BY ((('' IN (vt0.c0))) NOT NULL) ASC;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((((vt0.c0)|(NULL)) IN ()))AND((((- (vt0.c0)))==(NULL))))) ORDER BY vt0.c0 ASC;
SELECT * FROM vt0 WHERE (((((vt0.c1)AND(vt0.c0)))AND((vt0.c2 IN (vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c1)AND(vt0.c0)))AND((vt0.c2 IN (vt0.c2))))) LIMIT 0X2;
SELECT * FROM vt0 WHERE (((((vt0.c1)AND(vt0.c0)))AND((vt0.c2 IN (vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c1)AND(vt0.c0)))AND((vt0.c2 IN (vt0.c2))))) LIMIT 0X2;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c2) NOTNULL))IS NOT(CAST(vt0.c0 AS INTEGER)))) ORDER BY 'A}', ((vt0.c1)==(((vt0.c1)=(vt0.c0)))) ASC  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c2) NOTNULL))IS NOT(CAST(vt0.c0 AS INTEGER)))) ORDER BY vt0.c2 DESC LIMIT 0x1 INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (TRIM(DISTINCT CASE vt0.c2  WHEN vt0.c1 THEN 868781362 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END)) ORDER BY vt0.c2 DESC LIMIT 0X1;
SELECT * FROM vt0 WHERE (LOWER(x'93b5a5') COLLATE RTRIM) ORDER BY vt0.c0 DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (LOWER(x'93b5a5') COLLATE RTRIM) ORDER BY vt0.c0 DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2) IS TRUE))/(((vt0.c0)/(vt0.c1))))) ORDER BY vt0.c0 DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (LOWER(x'93b5a5') COLLATE RTRIM) ORDER BY vt0.c0 DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (LOWER(x'93b5a5') COLLATE RTRIM) ORDER BY vt0.c0 DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2) IS TRUE))/(((vt0.c0)/(vt0.c1))))) ORDER BY vt0.c0 DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (x'') ORDER BY (~ (((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((x'')AND(777723765))) ORDER BY CASE WHEN vt0.c2 THEN vt0.c1 WHEN 0.4875960583562906 THEN vt0.c0 COLLATE RTRIM END LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c2, vt0.c0, vt0.c1, vt0.c1, 'X-Kuᄜ쐷'))>=((vt0.c1, vt0.c0, vt0.c0, vt0.c0, vt0.c2)))) NOTNULL)) ORDER BY CASE WHEN vt0.c2 THEN vt0.c1 WHEN 0.4875960583562906 THEN vt0.c0 COLLATE RTRIM END LIMIT 0;
SELECT * FROM vt0 WHERE (x'') ORDER BY (~ (((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((x'')AND(777723765))) ORDER BY CASE WHEN vt0.c2 THEN vt0.c1 WHEN 0.4875960583562906 THEN vt0.c0 COLLATE RTRIM END LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c2, vt0.c0, vt0.c1, vt0.c1, 'X-Kuᄜ쐷'))>=((vt0.c1, vt0.c0, vt0.c0, vt0.c0, vt0.c2)))) NOTNULL)) ORDER BY CASE WHEN vt0.c2 THEN vt0.c1 WHEN 0.4875960583562906 THEN vt0.c0 COLLATE RTRIM END LIMIT 0;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE ((vt0.c0) NOT NULL)  WHEN ((vt0.c2)>(vt0.c0)) THEN ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) WHEN vt0.c0 COLLATE RTRIM THEN vt0.c0 WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN ((vt0.c0)*(vt0.c0)) WHEN ((NULL) NOTNULL) THEN ((vt0.c2) NOT NULL) END  NULLS LAST, CASE CAST(vt0.c0 AS REAL)  WHEN CAST(vt0.c1 AS NUMERIC) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c1)OR(vt0.c1)) END, ((((vt0.c2) NOT NULL)) BETWEEN ((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1)))) AND (('-793221991' IN (vt0.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE ((vt0.c0) NOT NULL)  WHEN ((vt0.c2)>(vt0.c0)) THEN ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) WHEN vt0.c0 COLLATE RTRIM THEN vt0.c0 WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN ((vt0.c0)*(vt0.c0)) WHEN ((NULL) NOTNULL) THEN ((vt0.c2) NOT NULL) END  NULLS LAST, CASE CAST(vt0.c0 AS REAL)  WHEN CAST(vt0.c1 AS NUMERIC) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c1)OR(vt0.c1)) END, ((((vt0.c2) NOT NULL)) BETWEEN ((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1)))) AND (('-793221991' IN (vt0.c0))))  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE ((vt0.c0) NOT NULL)  WHEN ((vt0.c2)>(vt0.c0)) THEN ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) WHEN vt0.c0 COLLATE RTRIM THEN vt0.c0 WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN ((vt0.c0)*(vt0.c0)) WHEN ((NULL) NOTNULL) THEN ((vt0.c2) NOT NULL) END  NULLS LAST, CASE CAST(vt0.c0 AS REAL)  WHEN CAST(vt0.c1 AS NUMERIC) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c1)OR(vt0.c1)) END, ((((vt0.c2) NOT NULL)) BETWEEN ((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1)))) AND (('-793221991' IN (vt0.c0))))  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE ((vt0.c0) NOT NULL)  WHEN ((vt0.c2)>(vt0.c0)) THEN ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) WHEN vt0.c0 COLLATE RTRIM THEN vt0.c0 WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN ((vt0.c0)*(vt0.c0)) WHEN ((NULL) NOTNULL) THEN ((vt0.c2) NOT NULL) END  NULLS LAST, CASE CAST(vt0.c0 AS REAL)  WHEN CAST(vt0.c1 AS NUMERIC) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c1)OR(vt0.c1)) END, ((((vt0.c2) NOT NULL)) BETWEEN ((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1)))) AND (('-793221991' IN (vt0.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE ((vt0.c0) NOT NULL)  WHEN ((vt0.c2)>(vt0.c0)) THEN ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) WHEN vt0.c0 COLLATE RTRIM THEN vt0.c0 WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN ((vt0.c0)*(vt0.c0)) WHEN ((NULL) NOTNULL) THEN ((vt0.c2) NOT NULL) END  NULLS LAST, CASE CAST(vt0.c0 AS REAL)  WHEN CAST(vt0.c1 AS NUMERIC) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c1)OR(vt0.c1)) END, ((((vt0.c2) NOT NULL)) BETWEEN ((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1)))) AND (('-793221991' IN (vt0.c0))))  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE ((vt0.c0) NOT NULL)  WHEN ((vt0.c2)>(vt0.c0)) THEN ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) WHEN vt0.c0 COLLATE RTRIM THEN vt0.c0 WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN ((vt0.c0)*(vt0.c0)) WHEN ((NULL) NOTNULL) THEN ((vt0.c2) NOT NULL) END  NULLS LAST, CASE CAST(vt0.c0 AS REAL)  WHEN CAST(vt0.c1 AS NUMERIC) THEN CAST(vt0.c0 AS NUMERIC) ELSE ((vt0.c1)OR(vt0.c1)) END, ((((vt0.c2) NOT NULL)) BETWEEN ((((vt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1)))) AND (('-793221991' IN (vt0.c0))))  NULLS FIRST LIMIT 1;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((((vt0.c2)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c1))) IN (((vt0.c1)==(0x3959313)), (+ (vt0.c2)))));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((vt0.c2)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c1))) IN (((vt0.c1)==(0X3959313)), (+ (vt0.c2))))) LIMIT 0;
SELECT * FROM vt0 WHERE ((((vt0.c2)) BETWEEN ((((vt0.c1) IS TRUE))) AND ((((vt0.c1)AND('-219496959')))))) ORDER BY -492354772 ASC  NULLS FIRST, ((CAST(vt0.c1 AS NUMERIC))=(vt0.c1 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2)) BETWEEN ((((vt0.c1) IS TRUE))) AND ((((vt0.c1)AND('-219496959')))))) ORDER BY -492354772 ASC  NULLS FIRST, ((CAST(vt0.c1 AS NUMERIC))==(vt0.c1 COLLATE RTRIM)) DESC  NULLS LAST LIMIT 0x3;
SELECT * FROM vt0 WHERE ((((vt0.c2)) BETWEEN ((((vt0.c1) IS TRUE))) AND ((((vt0.c1)AND('-219496959')))))) ORDER BY -492354772 ASC  NULLS FIRST, ((CAST(vt0.c1 AS NUMERIC))=(vt0.c1 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((NOT (''))) ORDER BY CASE vt0.c1 COLLATE RTRIM  WHEN vt0.c2 COLLATE RTRIM THEN ((vt0.c0)OR(vt0.c0)) END  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((NOT (''))) ORDER BY CASE vt0.c1 COLLATE RTRIM  WHEN vt0.c2 COLLATE RTRIM THEN ((vt0.c0)OR(vt0.c0)) END  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((NOT (''))) ORDER BY CASE vt0.c1 COLLATE RTRIM  WHEN vt0.c2 COLLATE RTRIM THEN ((vt0.c0)OR(vt0.c0)) END  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((NOT (''))) ORDER BY CASE vt0.c1 COLLATE RTRIM  WHEN vt0.c2 COLLATE RTRIM THEN ((vt0.c0)OR(vt0.c0)) END  NULLS FIRST LIMIT 1;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 END IN ((+ (vt0.c2)), CAST(vt0.c0 AS BLOB))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 END IN ((+ (vt0.c2)), CAST(vt0.c0 AS BLOB)))) ORDER BY ((CASE WHEN vt0.c2 THEN vt0.c0 WHEN NULL THEN vt0.c2 ELSE vt0.c0 END) BETWEEN ((- (vt0.c0))) AND (CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END)), ((((((((((((((((vt0.c0)AND(vt0.c1)))OR(vt0.c0)))OR(CAST(NULL AS NUMERIC))))AND(((vt0.c0)<<(vt0.c1)))))AND('0.005201264278129614')))AND((vt0.c1 IN ()))))OR(((x'66')>=(vt0.c1)))))OR((vt0.c1 IN (vt0.c1)))) ASC, (+ (((vt0.c2)>(vt0.c0))))  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ('-108816318') ORDER BY ((CASE WHEN vt0.c2 THEN vt0.c0 WHEN NULL THEN vt0.c2 ELSE vt0.c0 END) BETWEEN ((- (vt0.c0))) AND (CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END)), ((((((((((((((((vt0.c0)AND(vt0.c1)))OR(vt0.c0)))OR(CAST(NULL AS NUMERIC))))AND(((vt0.c0)<<(vt0.c1)))))AND('0.005201264278129614')))AND((vt0.c1 IN ()))))OR(((x'66')>=(vt0.c1)))))OR((vt0.c1 IN (vt0.c1)))) ASC, (+ (((vt0.c2)>(vt0.c0))))  NULLS LAST;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CAST(0.8798475064025234 COLLATE RTRIM AS REAL));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CAST(0.8798475064025234 COLLATE RTRIM AS REAL)) LIMIT 0;
SELECT MIN(vt0.c2) FROM vt0 WHERE ((((((+ (vt0.c2)))OR(((vt0.c0)%(vt0.c0)))))AND(vt0.c2 COLLATE NOCASE)));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((((+ (vt0.c2)))OR(((vt0.c0)%(vt0.c0)))))AND(vt0.c2 COLLATE NOCASE))) ORDER BY ((((0.24781645365156368) BETWEEN (vt0.c1) AND (vt0.c0))) BETWEEN (((vt0.c0) NOTNULL)) AND (vt0.c2))  NULLS LAST, '15936948', (((vt0.c1)) BETWEEN (((- (vt0.c0)))) AND ((((vt0.c2)<<(vt0.c0))))) ASC  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM vt0 WHERE ((((('苞93(첝w읯f君') NOT BETWEEN (vt0.c2) AND (vt0.c1)))=((NOT (vt0.c2))))) ORDER BY ABS(DISTINCT CAST(vt0.c0 AS BLOB)) DESC, vt0.c1 COLLATE NOCASE;
SELECT DISTINCT * FROM vt0 WHERE ((((((('苞93(첝w읯f君') NOT BETWEEN (vt0.c2) AND (vt0.c1)))=((NOT (vt0.c2)))))AND(CAST(((((((((vt0.c0)OR(vt0.c1)))AND(NULL)))AND(vt0.c2)))OR(vt0.c2)) AS TEXT)))) ORDER BY ((((((vt0.c1)GLOB(vt0.c0)))AND((vt0.c2 IN ()))))OR(((vt0.c1)<=(vt0.c2)))) ASC LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1)>(((1.551872895E9)GLOB(vt0.c2))))) ORDER BY ((((((vt0.c1)GLOB(vt0.c0)))AND((vt0.c2 IN ()))))OR(((vt0.c1)<=(vt0.c2)))) ASC LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((((('苞93(첝w읯f君') NOT BETWEEN (vt0.c2) AND (vt0.c1)))=((NOT (vt0.c2))))) ORDER BY ABS(DISTINCT CAST(vt0.c0 AS BLOB)) DESC, vt0.c1 COLLATE NOCASE;
SELECT DISTINCT * FROM vt0 WHERE ((((((('苞93(첝w읯f君') NOT BETWEEN (vt0.c2) AND (vt0.c1)))=((NOT (vt0.c2)))))AND(CAST(((((((((vt0.c0)OR(vt0.c1)))AND(NULL)))AND(vt0.c2)))OR(vt0.c2)) AS TEXT)))) ORDER BY ((((((vt0.c1)GLOB(vt0.c0)))AND((vt0.c2 IN ()))))OR(((vt0.c1)<=(vt0.c2)))) ASC LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1)>(((1.551872895E9)GLOB(vt0.c2))))) ORDER BY ((((((vt0.c1)GLOB(vt0.c0)))AND((vt0.c2 IN ()))))OR(((vt0.c1)<=(vt0.c2)))) ASC LIMIT 2;
SELECT * FROM vt0 WHERE (TRIM(DISTINCT CAST(x'9c' AS BLOB), ((vt0.c0)<(vt0.c2))));
SELECT DISTINCT * FROM vt0 WHERE (((TRIM(DISTINCT CAST(x'9c' AS BLOB), ((vt0.c0)<(vt0.c2))))AND((vt0.c2 COLLATE BINARY IN ())))) ORDER BY vt0.c2 DESC;
SELECT * FROM vt0 WHERE (TRIM(DISTINCT CAST(x'9c' AS BLOB), ((vt0.c0)<(vt0.c2))));
SELECT DISTINCT * FROM vt0 WHERE (((TRIM(DISTINCT CAST(x'9c' AS BLOB), ((vt0.c0)<(vt0.c2))))AND((vt0.c2 COLLATE BINARY IN ())))) ORDER BY vt0.c2 DESC;
SELECT MAX(vt0.c1) FROM vt0 WHERE (CAST(CAST(vt0.c1 AS INTEGER) AS NUMERIC));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (CAST(CAST(vt0.c1 AS INTEGER) AS NUMERIC)) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (CASE vt0.c2 COLLATE NOCASE  WHEN ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2)) THEN x'b4' END) ORDER BY SQLITE_VERSION();
SELECT ALL * FROM vt0 WHERE (((CASE vt0.c2 COLLATE NOCASE  WHEN ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2)) THEN x'b4' END)AND(CAST(vt0.c1 AS INTEGER)))) ORDER BY ((0.40741369423685403)OR((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c1 COLLATE NOCASE)AND(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(CAST(vt0.c1 AS REAL)))) ORDER BY ((0.40741369423685403)OR((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (CASE vt0.c2 COLLATE NOCASE  WHEN ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2)) THEN x'b4' END) ORDER BY SQLITE_VERSION();
SELECT ALL * FROM vt0 WHERE (((CASE vt0.c2 COLLATE NOCASE  WHEN ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2)) THEN x'b4' END)AND(CAST(vt0.c1 AS INTEGER)))) ORDER BY ((0.40741369423685403)OR((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c1 COLLATE NOCASE)AND(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(CAST(vt0.c1 AS REAL)))) ORDER BY ((0.40741369423685403)OR((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))))) DESC  NULLS FIRST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c0) ISNULL) AS REAL));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((CAST(((vt0.c0) ISNULL) AS REAL))AND(((((((((vt0.c0) NOT BETWEEN (2.07479788E9) AND (vt0.c0)))AND((vt0.c1 IN (vt0.c0)))))OR((((vt0.c2))=((vt0.c2))))))AND(vt0.c2))))) ORDER BY vt0.c0 COLLATE NOCASE, vt0.c2  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (0x44109bfb) ORDER BY vt0.c0 COLLATE NOCASE, vt0.c2  NULLS FIRST;
SELECT * FROM vt0 WHERE (CAST(((vt0.c2)IS(vt0.c2)) AS INTEGER)) ORDER BY ((((((vt0.c1)GLOB(vt0.c2)))AND(((vt0.c1)LIKE(vt0.c0)))))AND(vt0.c2 COLLATE NOCASE))  NULLS LAST, ((((vt0.c0)==(vt0.c2))) NOT NULL)  NULLS LAST, CASE WHEN vt0.c1 THEN ((((vt0.c1)AND(vt0.c0)))AND(vt0.c2)) END DESC;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(((vt0.c2)IS(vt0.c2)) AS INTEGER))AND((+ (((vt0.c0)/(vt0.c2))))))) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS INTEGER) ASC, CAST(CAST(vt0.c1 AS NUMERIC) AS TEXT) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (CAST(((vt0.c2)IS(vt0.c2)) AS INTEGER)) ORDER BY ((((((vt0.c1)GLOB(vt0.c2)))AND(((vt0.c1)LIKE(vt0.c0)))))AND(vt0.c2 COLLATE NOCASE))  NULLS LAST, ((((vt0.c0)==(vt0.c2))) NOT NULL)  NULLS LAST, CASE WHEN vt0.c1 THEN ((((vt0.c1)AND(vt0.c0)))AND(vt0.c2)) END DESC;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(((vt0.c2)IS(vt0.c2)) AS INTEGER))AND((+ (((vt0.c0)/(vt0.c2))))))) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS INTEGER) ASC, CAST(CAST(vt0.c1 AS NUMERIC) AS TEXT) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN 0.6833358352345154 THEN vt0.c0 END)|(json_array_length(vt0.c0)))) ORDER BY (((+ (vt0.c2)))IS NOT((vt0.c2 IN (vt0.c1))))  NULLS LAST, '{y*膒Dᱽ
~q' DESC;
SELECT * FROM vt0 WHERE (((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN 0.6833358352345154 THEN vt0.c0 END)|(json_array_length(vt0.c0)))) ORDER BY (((NOT (vt0.c1)))==((- (vt0.c0)))) ASC, '1493439261'  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt0 WHERE (((vt0.c1) IS TRUE) COLLATE RTRIM) ORDER BY (((NOT (vt0.c1)))=((- (vt0.c0)))) ASC, '1493439261'  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE (((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN 0.6833358352345154 THEN vt0.c0 END)|(json_array_length(vt0.c0)))) ORDER BY (((+ (vt0.c2)))IS NOT((vt0.c2 IN (vt0.c1))))  NULLS LAST, '{y*膒Dᱽ
~q' DESC;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (1.187240662E9) ORDER BY (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((((vt0.c1)AND(vt0.c0)), CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END, ((vt0.c0)-(vt0.c2)))) AND ((vt0.c1 COLLATE NOCASE, ((x'ae')IS(vt0.c2)), TRIM(vt0.c1)))) ASC, (vt0.c1 IN (vt0.c1)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (1.187240662E9) ORDER BY (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((((vt0.c1)AND(vt0.c0)), CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END, ((vt0.c0)-(vt0.c2)))) AND ((vt0.c1 COLLATE NOCASE, ((x'ae')IS(vt0.c2)), TRIM(vt0.c1)))) ASC, (vt0.c1 IN (vt0.c1)) COLLATE RTRIM ASC  NULLS FIRST INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((((vt0.c1)AND(vt0.c0)), CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END, ((vt0.c0)-(vt0.c2)))) AND ((vt0.c1 COLLATE NOCASE, ((x'ae')IS(vt0.c2)), TRIM(vt0.c1)))) ASC, (vt0.c1 IN (vt0.c1)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE ((((((NOT (vt0.c0)))AND((vt0.c0 IN ()))))OR((~ (x'')))));
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((NOT (vt0.c0)))AND((vt0.c0 IN ()))))OR((~ (x''))))) LIMIT 0 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((- (1389214743))) LIMIT 0x0;
SELECT * FROM vt0 WHERE ((~ (((vt0.c0)<=(x''))))) ORDER BY ((((vt0.c2) BETWEEN (vt0.c1) AND (0x3cc6d543))) NOT BETWEEN ((NOT (vt0.c2))) AND (((vt0.c0)<=(x'')))) ASC;
SELECT DISTINCT * FROM vt0 WHERE ((((~ (((vt0.c0)=(x'')))))AND((((((vt0.c1)&(vt0.c2)), x''))==(((((vt0.c0)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c2))), (vt0.c0 IN ()))))))) ORDER BY ((CAST(vt0.c0 AS REAL))&(((vt0.c0)<<(vt0.c2))))  NULLS FIRST, (0.36224214601003146 COLLATE RTRIM IN (((vt0.c1) IS FALSE))) DESC, CASE WHEN ((vt0.c1) ISNULL) THEN vt0.c1 COLLATE BINARY WHEN vt0.c0 COLLATE NOCASE THEN LTRIM(vt0.c1) ELSE (vt0.c0 IN (vt0.c0)) END  NULLS LAST LIMIT 0x0;
SELECT * FROM vt0 WHERE ((~ (((vt0.c0)<=(x''))))) ORDER BY ((((vt0.c2) BETWEEN (vt0.c1) AND (0x3cc6d543))) NOT BETWEEN ((NOT (vt0.c2))) AND (((vt0.c0)<=(x'')))) ASC;
SELECT DISTINCT * FROM vt0 WHERE ((((~ (((vt0.c0)=(x'')))))AND((((((vt0.c1)&(vt0.c2)), x''))==(((((vt0.c0)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c2))), (vt0.c0 IN ()))))))) ORDER BY ((CAST(vt0.c0 AS REAL))&(((vt0.c0)<<(vt0.c2))))  NULLS FIRST, (0.36224214601003146 COLLATE RTRIM IN (((vt0.c1) IS FALSE))) DESC, CASE WHEN ((vt0.c1) ISNULL) THEN vt0.c1 COLLATE BINARY WHEN vt0.c0 COLLATE NOCASE THEN LTRIM(vt0.c1) ELSE (vt0.c0 IN (vt0.c0)) END  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c2 IN (vt0.c2, vt0.c1)) IN ('0.12017461669268459')));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c2 IN (vt0.c2, vt0.c1)) IN ('0.12017461669268459')))AND('Vo|qE'')↥'))) LIMIT 0x0;
SELECT * FROM vt0 WHERE ((((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c2, 1329406373))) COLLATE NOCASE);
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c2, 1329406373))) COLLATE NOCASE);
SELECT * FROM vt0 WHERE ((((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c2, 1329406373))) COLLATE NOCASE);
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c2, 1329406373))) COLLATE NOCASE);
SELECT ALL * FROM vt0 WHERE (((vt0.c0) BETWEEN (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c2))) AND ((vt0.c2 IN (vt0.c0, '1957825316')))));
SELECT ALL * FROM vt0 WHERE (((vt0.c0) BETWEEN (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c2))) AND ((vt0.c2 IN (vt0.c0, '1957825316'))))) ORDER BY TRIM((~ (vt0.c2)))  NULLS LAST, ((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))IS NOT(CAST(vt0.c1 AS BLOB)))  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE (((json_patch(0Xffffffff8378df1d, vt0.c0)) NOT BETWEEN (((vt0.c0)OR(vt0.c1))) AND (CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END))) ORDER BY TRIM((~ (vt0.c2)))  NULLS LAST, ((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))IS NOT(CAST(vt0.c1 AS BLOB)))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((vt0.c0) BETWEEN (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c2))) AND ((vt0.c2 IN (vt0.c0, '1957825316')))));
SELECT ALL * FROM vt0 WHERE (((vt0.c0) BETWEEN (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c2))) AND ((vt0.c2 IN (vt0.c0, '1957825316'))))) ORDER BY TRIM((~ (vt0.c2)))  NULLS LAST, ((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))IS NOT(CAST(vt0.c1 AS BLOB)))  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE (((json_patch(0Xffffffff8378df1d, vt0.c0)) NOT BETWEEN (((vt0.c0)OR(vt0.c1))) AND (CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END))) ORDER BY TRIM((~ (vt0.c2)))  NULLS LAST, ((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))IS NOT(CAST(vt0.c1 AS BLOB)))  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (TRIM(((vt0.c0) IS TRUE), CASE WHEN vt0.c2 THEN vt0.c1 WHEN '-1651656952' THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 END)) ORDER BY ((x'11') NOT BETWEEN (vt0.c0) AND (vt0.c2)) COLLATE RTRIM ASC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (TRIM(((vt0.c0) IS TRUE), CASE WHEN vt0.c2 THEN vt0.c1 WHEN '-1651656952' THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 END)) ORDER BY ((x'11') NOT BETWEEN (vt0.c0) AND (vt0.c2)) COLLATE RTRIM ASC;
SELECT ALL * FROM vt0 WHERE (((+ (vt0.c2)) IN ('778358031')));
SELECT DISTINCT * FROM vt0 WHERE (((+ (vt0.c2)) IN ('778358031'))) ORDER BY ((((vt0.c2) IS TRUE)) NOT BETWEEN ('1821782275' COLLATE NOCASE) AND (CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END)) ASC  NULLS FIRST LIMIT 0x5;
SELECT ALL * FROM vt0 WHERE (((+ (vt0.c2)) IN ('778358031')));
SELECT DISTINCT * FROM vt0 WHERE (((+ (vt0.c2)) IN ('778358031'))) ORDER BY ((((vt0.c2) IS TRUE)) NOT BETWEEN ('1821782275' COLLATE NOCASE) AND (CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END)) ASC  NULLS FIRST LIMIT 0x5;
SELECT MIN(vt0.c2) FROM vt0 WHERE (TYPEOF(DISTINCT ((vt0.c2) NOTNULL)));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((TYPEOF(DISTINCT ((vt0.c2) NOTNULL)))AND(((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))GLOB(((((vt0.c2)OR(vt0.c2)))OR(vt0.c0))))))) ORDER BY ((+ (vt0.c1)) IN (((vt0.c1)%(1551872895)), '1617089569')) DESC LIMIT 0x2;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((((((('ws' COLLATE RTRIM)AND(CAST(NULL AS INTEGER))))AND(vt0.c2 COLLATE BINARY)))OR(CASE 0.5357679884206289  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END)))OR(((vt0.c2)>>(vt0.c2)))))AND(CAST(vt0.c2 AS BLOB))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((((((((('ws' COLLATE RTRIM)AND(CAST(NULL AS INTEGER))))AND(vt0.c2 COLLATE BINARY)))OR(CASE 0.5357679884206289  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END)))OR(((vt0.c2)>>(vt0.c2)))))AND(CAST(vt0.c2 AS BLOB))))AND(LIKELIHOOD(DISTINCT ((((vt0.c2)AND(vt0.c0)))OR(vt0.c0)), CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)))) ORDER BY (vt0.c1 IN ((vt0.c2 IN (vt0.c2, vt0.c1, vt0.c1)), NULL))  NULLS FIRST, (((((((((NULL IN ()))AND(ROUND(vt0.c2, vt0.c0))))AND((((vt0.c1))<>((vt0.c0))))))AND((+ (vt0.c0)))))OR(vt0.c2 COLLATE NOCASE)) DESC LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0 WHERE (x'34');
SELECT ALL COUNT(*) FROM vt0 WHERE (x'34') ORDER BY ((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)))+(((vt0.c0)%(vt0.c2))))  NULLS FIRST, (((vt0.c1 IN (vt0.c0)))%(((vt0.c0)>>(vt0.c1)))), (NOT (((vt0.c2)IS NOT(vt0.c1))))  NULLS FIRST LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt0 WHERE (((vt0.c2) BETWEEN (x'7919') AND (((vt0.c2)IS NOT(vt0.c2))))) ORDER BY ((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)))+(((vt0.c0)%(vt0.c2))))  NULLS FIRST, (((vt0.c1 IN (vt0.c0)))%(((vt0.c0)>>(vt0.c1)))), (NOT (((vt0.c2)IS NOT(vt0.c1))))  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE (((json_type(vt0.c2)) NOTNULL)) ORDER BY (((vt0.c1)|(vt0.c0)) IN ()) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((json_type(vt0.c2)) NOTNULL)) ORDER BY ((((vt0.c1)/(NULL))) BETWEEN ((+ (vt0.c1))) AND (x'')) DESC  NULLS FIRST, CAST((vt0.c2 IN (vt0.c0)) AS INTEGER)  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0 WHERE (((json_type(vt0.c2)) NOTNULL)) ORDER BY (((vt0.c1)|(vt0.c0)) IN ()) ASC;
SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS TEXT)) ORDER BY vt0.c2 DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c0 AS TEXT)) ORDER BY vt0.c2 DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS TEXT)) ORDER BY vt0.c2 DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c0 AS TEXT)) ORDER BY vt0.c2 DESC  NULLS LAST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c2)OR(vt0.c2 COLLATE RTRIM)))OR(vt0.c2 COLLATE BINARY)))AND((((vt0.c1, vt0.c0)) BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c1))))))OR(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((((((vt0.c2)OR(vt0.c2 COLLATE RTRIM)))OR(vt0.c2 COLLATE BINARY)))AND((((vt0.c1, vt0.c0)) BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c1))))))OR(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)))))AND(LOWER(((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))))) ORDER BY ((CAST(vt0.c0 AS REAL))<=(CASE WHEN vt0.c0 THEN vt0.c1 END))  NULLS LAST, CASE JULIANDAY(vt0.c0, vt0.c0, vt0.c2)  WHEN CASE WHEN 0.6258274776331338 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 END THEN ((vt0.c1)|(vt0.c0)) WHEN ((vt0.c2) NOT NULL) THEN ((vt0.c2)>=(vt0.c1)) ELSE vt0.c0 END DESC  NULLS FIRST INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c2 AS TEXT))>(vt0.c0 COLLATE RTRIM))) ORDER BY ((CAST(vt0.c0 AS REAL))<=(CASE WHEN vt0.c0 THEN vt0.c1 END))  NULLS LAST, CASE JULIANDAY(vt0.c0, vt0.c0, vt0.c2)  WHEN CASE WHEN 0.6258274776331338 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 END THEN ((vt0.c1)|(vt0.c0)) WHEN ((vt0.c2) NOT NULL) THEN ((vt0.c2)>=(vt0.c1)) ELSE vt0.c0 END DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (((((((CAST(vt0.c1 AS INTEGER))AND(((vt0.c0) IS TRUE))))AND(COALESCE(DISTINCT vt0.c2, vt0.c2))))AND(((((((vt0.c1)OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2))))) ORDER BY ((TYPEOF(DISTINCT vt0.c1)) NOT BETWEEN (json_array(vt0.c1, vt0.c0, vt0.c0)) AND (((((((vt0.c0)AND(vt0.c1)))OR('
D㜄R畸.z')))AND(vt0.c0))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((CAST(vt0.c1 AS INTEGER))AND(((vt0.c0) IS TRUE))))AND(COALESCE(DISTINCT vt0.c2, vt0.c2))))AND(((((((vt0.c1)OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2))))) ORDER BY ((TYPEOF(DISTINCT vt0.c1)) NOT BETWEEN (json_array(vt0.c1, vt0.c0, vt0.c0)) AND (((((((vt0.c0)AND(vt0.c1)))OR('
D㜄R畸.z')))AND(vt0.c0))))  NULLS FIRST LIMIT 0X2 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (CAST(((vt0.c0)LIKE(vt0.c0)) AS NUMERIC)) ORDER BY ((TYPEOF(DISTINCT vt0.c1)) NOT BETWEEN (json_array(vt0.c1, vt0.c0, vt0.c0)) AND (((((((vt0.c0)AND(vt0.c1)))OR('
D㜄R畸.z')))AND(vt0.c0))))  NULLS FIRST LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c1)IS NOT(vt0.c0)) IN ())) ORDER BY ((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END) NOT BETWEEN (CAST(vt0.c0 AS INTEGER)) AND ((~ (vt0.c0)))) DESC;
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c1)IS NOT(vt0.c0)) IN ())) ORDER BY ((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END) NOT BETWEEN (CAST(vt0.c0 AS INTEGER)) AND ((~ (vt0.c0)))) DESC LIMIT 1 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((COALESCE(DISTINCT vt0.c2, vt0.c2))LIKE(CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END))) ORDER BY ((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END) NOT BETWEEN (CAST(vt0.c0 AS INTEGER)) AND ((~ (vt0.c0)))) DESC LIMIT 1;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0)<<(vt0.c1)))<(((vt0.c1) IS TRUE)))) ORDER BY SQLITE_VERSION() ASC  NULLS LAST, CASE ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0))  WHEN ((vt0.c0)>(vt0.c2)) THEN (+ (vt0.c1)) WHEN (((vt0.c0, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0)) AND ((vt0.c2, vt0.c1, '-1820249969'))) THEN (vt0.c2 IN (vt0.c0, vt0.c1)) ELSE -1861244521 END;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0)<<(vt0.c1)))<(((vt0.c1) IS TRUE)))) ORDER BY ((vt0.c2) BETWEEN (vt0.c0) AND (0x6062d421)) COLLATE NOCASE, ((load_extension(vt0.c1, vt0.c1)) BETWEEN (IFNULL(0.5248313836355003, vt0.c0)) AND (MIN(vt0.c0, vt0.c2, vt0.c1, vt0.c1, vt0.c2))) DESC, ((NULL)||(vt0.c1)) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)))OR('0.4657703713196094')))<(((vt0.c1)OR(vt0.c0)))));
SELECT * FROM vt0 WHERE (((((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)))OR('0.4657703713196094')))<(((vt0.c1)OR(vt0.c0)))))AND(((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END) IS FALSE)))) ORDER BY (~ (((((vt0.c0)OR(vt0.c2)))AND(vt0.c1)))) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt0 WHERE (x'85') ORDER BY (~ (((((vt0.c0)OR(vt0.c2)))AND(vt0.c1)))) ASC  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)))OR('0.4657703713196094')))<(((vt0.c1)OR(vt0.c0)))));
SELECT * FROM vt0 WHERE (((((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c1)))OR('0.4657703713196094')))<(((vt0.c1)OR(vt0.c0)))))AND(((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END) IS FALSE)))) ORDER BY (~ (((((vt0.c0)OR(vt0.c2)))AND(vt0.c1)))) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt0 WHERE (x'85') ORDER BY (~ (((((vt0.c0)OR(vt0.c2)))AND(vt0.c1)))) ASC  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE ((((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c1 COLLATE NOCASE, ((vt0.c2)AND(vt0.c2)))) AND ((IFNULL(vt0.c0, vt0.c0), vt0.c1 COLLATE BINARY)))) ORDER BY (((((((((((('[	fnt዆_%')AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))AND(((vt0.c2)+(vt0.c0)))))OR(vt0.c2))  NULLS FIRST, (((((vt0.c1) IS TRUE), ((vt0.c2)/(vt0.c2))))>=((HEX(vt0.c2), (NOT (vt0.c0))))), CAST((+ (vt0.c0)) AS REAL) ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c1 COLLATE NOCASE, ((vt0.c2)AND(vt0.c2)))) AND ((IFNULL(vt0.c0, vt0.c0), vt0.c1 COLLATE BINARY))))AND(((highlight(vt0.c0, vt0.c2, x'', vt0.c1))+(CAST(vt0.c1 AS REAL)))))) ORDER BY (((((((((((('[	fnt዆_%')AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))AND(((vt0.c2)+(vt0.c0)))))OR(vt0.c2))  NULLS FIRST, (((((vt0.c1) IS TRUE), ((vt0.c2)/(vt0.c2))))>=((HEX(vt0.c2), (NOT (vt0.c0))))), CAST((+ (vt0.c0)) AS REAL) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE ((((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c1 COLLATE NOCASE, ((vt0.c2)AND(vt0.c2)))) AND ((IFNULL(vt0.c0, vt0.c0), vt0.c1 COLLATE BINARY)))) ORDER BY (((((((((((('[	fnt዆_%')AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))AND(((vt0.c2)+(vt0.c0)))))OR(vt0.c2))  NULLS FIRST, (((((vt0.c1) IS TRUE), ((vt0.c2)/(vt0.c2))))>=((HEX(vt0.c2), (NOT (vt0.c0))))), CAST((+ (vt0.c0)) AS REAL) ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c1 COLLATE NOCASE, ((vt0.c2)AND(vt0.c2)))) AND ((IFNULL(vt0.c0, vt0.c0), vt0.c1 COLLATE BINARY))))AND(((highlight(vt0.c0, vt0.c2, x'', vt0.c1))+(CAST(vt0.c1 AS REAL)))))) ORDER BY (((((((((((('[	fnt዆_%')AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))AND(((vt0.c2)+(vt0.c0)))))OR(vt0.c2))  NULLS FIRST, (((((vt0.c1) IS TRUE), ((vt0.c2)/(vt0.c2))))>=((HEX(vt0.c2), (NOT (vt0.c0))))), CAST((+ (vt0.c0)) AS REAL) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c0 IN (vt0.c2))) IS TRUE));
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c0 IN (vt0.c2))) IS TRUE)) ORDER BY ((((((((vt0.c2)OR(vt0.c1)))AND(vt0.c1)))OR(vt0.c2)))AND(vt0.c0)) COLLATE BINARY, ((TRIM(vt0.c0)) NOT BETWEEN ((- (vt0.c2))) AND (526699389)) DESC LIMIT 0x2;
SELECT MAX(vt0.c2) FROM vt0 WHERE (COALESCE(DISTINCT (vt0.c0 IN (vt0.c1)), CASE WHEN vt0.c2 THEN vt0.c1 END));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (COALESCE(DISTINCT (vt0.c0 IN (vt0.c1)), CASE WHEN vt0.c2 THEN vt0.c1 END)) LIMIT 1 INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (JULIANDAY(((vt0.c2) IS TRUE), CAST(vt0.c2 AS TEXT), ((vt0.c0) NOT BETWEEN (x'dfcc30') AND (vt0.c0)))) LIMIT 1;
SELECT * FROM vt0 WHERE ((((~ (vt0.c1))) NOTNULL)) ORDER BY (((+ (vt0.c0))) BETWEEN ((NOT (vt0.c1))) AND (((186094552)%(vt0.c1)))), ((((vt0.c2) IS FALSE))>=(x'9f')) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((((~ (vt0.c1))) NOTNULL))AND((~ ((- (vt0.c2))))))) ORDER BY (+ ((vt0.c2 IN (vt0.c0, vt0.c0)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, '0')) BETWEEN ((-3.53614591E8, vt0.c0)) AND ((vt0.c0, vt0.c0))) COLLATE RTRIM) ORDER BY (+ ((vt0.c2 IN (vt0.c0, vt0.c0)))) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((~ (vt0.c1))) NOTNULL)) ORDER BY (((+ (vt0.c0))) BETWEEN ((NOT (vt0.c1))) AND (((186094552)%(vt0.c1)))), ((((vt0.c2) IS FALSE))>=(x'9f')) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((((~ (vt0.c1))) NOTNULL))AND((~ ((- (vt0.c2))))))) ORDER BY (+ ((vt0.c2 IN (vt0.c0, vt0.c0)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, '0')) BETWEEN ((-3.53614591E8, vt0.c0)) AND ((vt0.c0, vt0.c0))) COLLATE RTRIM) ORDER BY (+ ((vt0.c2 IN (vt0.c0, vt0.c0)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (CAST((((x'')) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))) AS REAL)) ORDER BY (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (((vt0.c2)<=(vt0.c2))))  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((CAST((((x'')) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))) AS REAL))AND(CAST(((vt0.c0)IS NOT(vt0.c1)) AS TEXT)))) ORDER BY (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (((vt0.c2)<=(vt0.c2))))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (CAST((((x'')) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))) AS REAL)) ORDER BY (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (((vt0.c2)<=(vt0.c2))))  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((CAST((((x'')) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))) AS REAL))AND(CAST(((vt0.c0)IS NOT(vt0.c1)) AS TEXT)))) ORDER BY (((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)) IN (((vt0.c2)<=(vt0.c2))))  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (((((+ (vt0.c0)), vt0.c1 COLLATE BINARY, CAST(vt0.c2 AS BLOB)))=((COALESCE(DISTINCT vt0.c0, vt0.c2, vt0.c2, vt0.c1), x'', ((vt0.c2) IS FALSE)))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((+ (vt0.c0)), vt0.c1 COLLATE BINARY, CAST(vt0.c2 AS BLOB)))==((COALESCE(DISTINCT vt0.c0, vt0.c2, vt0.c2, vt0.c1), x'', ((vt0.c2) IS FALSE)))))AND(json_insert((NOT (vt0.c1)), ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c0)), 'm')))) LIMIT 0x1;
SELECT MIN(vt0.c2) FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) NOTNULL)) ORDER BY ((((vt0.c0)AND(vt0.c2)))AND(vt0.c2)) COLLATE NOCASE;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) NOTNULL))AND(((GLOB(0.8300895292439142, vt0.c2))<(((vt0.c2) IS TRUE)))))) ORDER BY CAST((vt0.c2 IN ()) AS BLOB) DESC  NULLS LAST, ((((vt0.c2)*(vt0.c2)))>=(CAST(vt0.c0 AS TEXT))) DESC;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c2)/(vt0.c1)))OR(((vt0.c1) ISNULL))))AND(vt0.c1)))OR(PRINTF(0.9875194355112784, vt0.c1, vt0.c1)))) ORDER BY vt0.c0  NULLS FIRST, UNICODE((((vt0.c0, vt0.c1, vt0.c0))<>((vt0.c1, vt0.c0, vt0.c2)))), (CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END IN ())  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c2)/(vt0.c1)))OR(((vt0.c1) ISNULL))))AND(vt0.c1)))OR(PRINTF(0.9875194355112784, vt0.c1, vt0.c1)))) ORDER BY vt0.c0  NULLS FIRST, UNICODE((((vt0.c0, vt0.c1, vt0.c0))!=((vt0.c1, vt0.c0, vt0.c2)))), (CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END IN ())  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY vt0.c0  NULLS FIRST, UNICODE((((vt0.c0, vt0.c1, vt0.c0))<>((vt0.c1, vt0.c0, vt0.c2)))), (CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END IN ())  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c2)/(vt0.c1)))OR(((vt0.c1) ISNULL))))AND(vt0.c1)))OR(PRINTF(0.9875194355112784, vt0.c1, vt0.c1)))) ORDER BY vt0.c0  NULLS FIRST, UNICODE((((vt0.c0, vt0.c1, vt0.c0))<>((vt0.c1, vt0.c0, vt0.c2)))), (CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END IN ())  NULLS LAST;
SELECT * FROM vt0 WHERE (json_valid(0.40673538500249173)) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, ((vt0.c0) IS FALSE), ((0.6548495665122432) IS TRUE))) AND ((CAST(vt0.c0 AS INTEGER), CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, 0.7696220480686069)))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (json_valid(0.40673538500249173)) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, ((vt0.c0) IS FALSE), ((0.6548495665122432) IS TRUE))) AND ((CAST(vt0.c0 AS INTEGER), CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, 0.7696220480686069)))  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c2 IN ())) NOT NULL)) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, ((vt0.c0) IS FALSE), ((0.6548495665122432) IS TRUE))) AND ((CAST(vt0.c0 AS INTEGER), CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, 0.7696220480686069)))  NULLS FIRST;
SELECT * FROM vt0 WHERE (json_valid(0.40673538500249173)) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, ((vt0.c0) IS FALSE), ((0.6548495665122432) IS TRUE))) AND ((CAST(vt0.c0 AS INTEGER), CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, 0.7696220480686069)))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (json_valid(0.40673538500249173)) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, ((vt0.c0) IS FALSE), ((0.6548495665122432) IS TRUE))) AND ((CAST(vt0.c0 AS INTEGER), CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, 0.7696220480686069)))  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c2 IN ())) NOT NULL)) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, ((vt0.c0) IS FALSE), ((0.6548495665122432) IS TRUE))) AND ((CAST(vt0.c0 AS INTEGER), CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, 0.7696220480686069)))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((UPPER(x''))&(((vt0.c1)/(vt0.c1))))) ORDER BY CAST(vt0.c1 AS REAL) COLLATE BINARY ASC;
SELECT * FROM vt0 WHERE (((((UPPER(x''))&(((vt0.c1)/(vt0.c1)))))AND((('1562432259')&(CAST(vt0.c2 AS REAL)))))) ORDER BY ((((vt0.c2)OR(vt0.c0))) BETWEEN (((vt0.c1)!=('1187793300'))) AND ((((vt0.c1, vt0.c1, vt0.c1))>((vt0.c2, vt0.c1, vt0.c0))))) ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt0 WHERE (((UPPER(x''))&(((vt0.c1)/(vt0.c1))))) ORDER BY CAST(vt0.c1 AS REAL) COLLATE BINARY ASC;
SELECT * FROM vt0 WHERE (((((UPPER(x''))&(((vt0.c1)/(vt0.c1)))))AND((('1562432259')&(CAST(vt0.c2 AS REAL)))))) ORDER BY ((((vt0.c2)OR(vt0.c0))) BETWEEN (((vt0.c1)!=('1187793300'))) AND ((((vt0.c1, vt0.c1, vt0.c1))>((vt0.c2, vt0.c1, vt0.c0))))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE ('-359981107');
SELECT DISTINCT * FROM vt0 WHERE ((('-359981107')AND(((((vt0.c1)AND(vt0.c0)))>=(vt0.c0))))) ORDER BY (((((vt0.c0)LIKE(vt0.c1))))<((CAST(vt0.c1 AS BLOB)))) ASC LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE ('-359981107');
SELECT DISTINCT * FROM vt0 WHERE ((('-359981107')AND(((((vt0.c1)AND(vt0.c0)))>=(vt0.c0))))) ORDER BY (((((vt0.c0)LIKE(vt0.c1))))<((CAST(vt0.c1 AS BLOB)))) ASC LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((vt0.c2 COLLATE BINARY) NOTNULL)) ORDER BY vt0.c1, vt0.c0, LAST_INSERT_ROWID();
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2 COLLATE BINARY) NOTNULL))AND(CAST(CAST(vt0.c2 AS INTEGER) AS TEXT)))) ORDER BY ((((vt0.c0) NOT NULL)) NOT NULL)  NULLS FIRST, NULL  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((vt0.c2 COLLATE BINARY) NOTNULL)) ORDER BY vt0.c1, vt0.c0, LAST_INSERT_ROWID();
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2 COLLATE BINARY) NOTNULL))AND(CAST(CAST(vt0.c2 AS INTEGER) AS TEXT)))) ORDER BY ((((vt0.c0) NOT NULL)) NOT NULL)  NULLS FIRST, NULL  NULLS LAST;
SELECT * FROM vt0 WHERE (((((((CHAR(-597042380))AND(((vt0.c2)%(vt0.c2)))))AND((vt0.c0 IN (vt0.c1)))))OR(CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN 0.1494917335963335 THEN 0.7673812067806389 END)));
SELECT * FROM vt0 WHERE (((((((((CHAR(-597042380))AND(((vt0.c2)%(vt0.c2)))))AND((vt0.c0 IN (vt0.c1)))))OR(CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN 0.1494917335963335 THEN 0.7673812067806389 END)))AND((+ (((vt0.c0) BETWEEN (vt0.c0) AND (0.061048066162266545))))))) ORDER BY vt0.c0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE WHEN ((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c0)) THEN ((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c0)) END) ORDER BY vt0.c0;
SELECT * FROM vt0 WHERE (((((((CHAR(-597042380))AND(((vt0.c2)%(vt0.c2)))))AND((vt0.c0 IN (vt0.c1)))))OR(CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN 0.1494917335963335 THEN 0.7673812067806389 END)));
SELECT * FROM vt0 WHERE (((((((((CHAR(-597042380))AND(((vt0.c2)%(vt0.c2)))))AND((vt0.c0 IN (vt0.c1)))))OR(CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN 0.1494917335963335 THEN 0.7673812067806389 END)))AND((+ (((vt0.c0) BETWEEN (vt0.c0) AND (0.061048066162266545))))))) ORDER BY vt0.c0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE WHEN ((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c0)) THEN ((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c0)) END) ORDER BY vt0.c0;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (json_array_length('143158882', ((vt0.c1)*(vt0.c1))));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((json_array_length('143158882', ((vt0.c1)*(vt0.c1))))AND(((vt0.c1) NOT BETWEEN (NULL) AND (CAST(vt0.c1 AS INTEGER)))))) LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ((CAST(x'' AS INTEGER) IN (((vt0.c2) ISNULL), ((vt0.c2) BETWEEN (x'b75b') AND (vt0.c0))))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (CASE WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END THEN CAST(vt0.c0 AS TEXT) WHEN ((vt0.c1)||(0.9820639131566157)) THEN (((vt0.c2, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c1)) AND ((vt0.c1, vt0.c2, vt0.c2))) ELSE ((vt0.c1) ISNULL) END) ORDER BY vt0.c0 DESC, ((+ (vt0.c0)) IN (0.519466275990341 COLLATE NOCASE)) ASC, ((((vt0.c2)<(vt0.c1)))GLOB(json(vt0.c0))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((CASE WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END THEN CAST(vt0.c0 AS TEXT) WHEN ((vt0.c1)||(0.9820639131566157)) THEN (((vt0.c2, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c1)) AND ((vt0.c1, vt0.c2, vt0.c2))) ELSE ((vt0.c1) ISNULL) END)AND(((((((((vt0.c0)%(vt0.c1)))AND(vt0.c1)))AND((((vt0.c0))<(('	!r䆊'))))))AND((+ (vt0.c1))))))) ORDER BY NULL ASC, ((((((((((CAST(vt0.c2 AS INTEGER))AND('217801708')))OR(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))AND(CAST(vt0.c0 AS BLOB))))OR(NULL)))AND(vt0.c2)) ASC LIMIT 2;
SELECT ALL * FROM vt0 WHERE (CASE WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END THEN CAST(vt0.c0 AS TEXT) WHEN ((vt0.c1)||(0.9820639131566157)) THEN (((vt0.c2, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c1)) AND ((vt0.c1, vt0.c2, vt0.c2))) ELSE ((vt0.c1) ISNULL) END) ORDER BY vt0.c0 DESC, ((+ (vt0.c0)) IN (0.519466275990341 COLLATE NOCASE)) ASC, ((((vt0.c2)<(vt0.c1)))GLOB(json(vt0.c0))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((CASE WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END THEN CAST(vt0.c0 AS TEXT) WHEN ((vt0.c1)||(0.9820639131566157)) THEN (((vt0.c2, vt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c1)) AND ((vt0.c1, vt0.c2, vt0.c2))) ELSE ((vt0.c1) ISNULL) END)AND(((((((((vt0.c0)%(vt0.c1)))AND(vt0.c1)))AND((((vt0.c0))<(('	!r䆊'))))))AND((+ (vt0.c1))))))) ORDER BY NULL ASC, ((((((((((CAST(vt0.c2 AS INTEGER))AND('217801708')))OR(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))AND(CAST(vt0.c0 AS BLOB))))OR(NULL)))AND(vt0.c2)) ASC LIMIT 2;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c2)AND(vt0.c1)))>>(((vt0.c2) BETWEEN (NULL) AND (vt0.c2)))));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((((((vt0.c2)AND(vt0.c1)))>>(((vt0.c2) BETWEEN (NULL) AND (vt0.c2)))))AND(CAST((vt0.c2 IN ()) AS INTEGER)))) LIMIT 0X1 INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE ((+ (CASE ''  WHEN NULL THEN vt0.c0 ELSE NULL END))) LIMIT 1;
SELECT MAX(vt0.c1) FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 END)+(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT MAX(vt0.c1) FROM vt0 WHERE (((((CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 END)+(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))))AND((NOT (((vt0.c2)&(vt0.c2))))))) ORDER BY ((vt0.c1 COLLATE RTRIM) ISNULL) ASC, (- ((vt0.c1 IN (vt0.c0)))) DESC INTERSECT SELECT MAX(vt0.c1) FROM vt0 WHERE (MIN((vt0.c2 IN (vt0.c2)), CASE vt0.c1  WHEN vt0.c2 THEN '8 Iy1Xpm' ELSE vt0.c0 END, LIKELIHOOD('73653392', vt0.c2))) ORDER BY ((vt0.c1 COLLATE RTRIM) ISNULL) ASC, (- ((vt0.c1 IN (vt0.c0)))) DESC;
SELECT * FROM vt0 WHERE ((((((vt0.c2 IN ()))AND((vt0.c1 IN (vt0.c2, vt0.c2, vt0.c2)))))OR((NOT (vt0.c1)))));
SELECT * FROM vt0 WHERE ((((((((vt0.c2 IN ()))AND((vt0.c1 IN (vt0.c2, vt0.c2, vt0.c2)))))OR((NOT (vt0.c1)))))AND((((0xffffffff9373cbb0, ((vt0.c1)||(vt0.c0))))==(((~ (1056033120)), CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END)))))) LIMIT 2;
SELECT * FROM vt0 WHERE ((((((vt0.c2 IN ()))AND((vt0.c1 IN (vt0.c2, vt0.c2, vt0.c2)))))OR((NOT (vt0.c1)))));
SELECT * FROM vt0 WHERE ((((((((vt0.c2 IN ()))AND((vt0.c1 IN (vt0.c2, vt0.c2, vt0.c2)))))OR((NOT (vt0.c1)))))AND((((0xffffffff9373cbb0, ((vt0.c1)||(vt0.c0))))==(((~ (1056033120)), CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END)))))) LIMIT 2;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (x'b6');
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (x'b6') LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (CHANGES()) ORDER BY (((- (vt0.c1))) NOT BETWEEN (((vt0.c1)*(vt0.c0))) AND (vt0.c0)) ASC  NULLS LAST, ((vt0.c1)>=(vt0.c1)) COLLATE RTRIM;
SELECT ALL * FROM vt0 WHERE (((CHANGES())AND(((((((((x'a0')OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c2)))IS(vt0.c1))))) ORDER BY ((((((((((NULL)OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)))AND(vt0.c1))) BETWEEN (((vt0.c0)+(vt0.c2))) AND (((((vt0.c0)OR(vt0.c2)))AND(vt0.c0))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CHANGES()) ORDER BY (((- (vt0.c1))) NOT BETWEEN (((vt0.c1)*(vt0.c0))) AND (vt0.c0)) ASC  NULLS LAST, ((vt0.c1)>=(vt0.c1)) COLLATE RTRIM;
SELECT ALL * FROM vt0 WHERE (((CHANGES())AND(((((((((x'a0')OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c2)))IS(vt0.c1))))) ORDER BY ((((((((((NULL)OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)))AND(vt0.c1))) BETWEEN (((vt0.c0)+(vt0.c2))) AND (((((vt0.c0)OR(vt0.c2)))AND(vt0.c0))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0) NOTNULL), LIKELIHOOD(vt0.c2, vt0.c0)))<=((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)), x'')))) ORDER BY vt0.c2 DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((((((vt0.c0) NOTNULL), LIKELIHOOD(vt0.c2, vt0.c0)))<=((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)), x''))))AND(((vt0.c0)IS NOT(1.253537794E9)) COLLATE BINARY))) ORDER BY 'i*Yl' ASC, ((((vt0.c2) ISNULL)) NOT NULL)  NULLS FIRST, -9.35251765E8 ASC, (((vt0.c0 IN ()))-((NOT (vt0.c2)))) INTERSECT SELECT * FROM vt0 WHERE (CAST(vt0.c2 COLLATE RTRIM AS TEXT)) ORDER BY 'i*Yl' ASC, ((((vt0.c2) ISNULL)) NOT NULL)  NULLS FIRST, -9.35251765E8 ASC, (((vt0.c0 IN ()))-((NOT (vt0.c2))));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0) NOTNULL), LIKELIHOOD(vt0.c2, vt0.c0)))<=((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2)), x'')))) ORDER BY vt0.c2 DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c2) BETWEEN ((vt0.c0 IN (vt0.c0))) AND (UPPER(DISTINCT vt0.c2)))) ORDER BY (+ (((vt0.c0) NOTNULL)))  NULLS FIRST, TYPEOF(DISTINCT (vt0.c2 IN (vt0.c1, vt0.c2)))  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2) BETWEEN ((vt0.c0 IN (vt0.c0))) AND (UPPER(DISTINCT vt0.c2)))) ORDER BY (+ (((vt0.c0) NOTNULL)))  NULLS FIRST, TYPEOF(DISTINCT (vt0.c2 IN (vt0.c1, vt0.c2)))  NULLS FIRST LIMIT 0x3;
SELECT * FROM vt0 WHERE (((vt0.c2) BETWEEN ((vt0.c0 IN (vt0.c0))) AND (UPPER(DISTINCT vt0.c2)))) ORDER BY (+ (((vt0.c0) NOTNULL)))  NULLS FIRST, TYPEOF(DISTINCT (vt0.c2 IN (vt0.c1, vt0.c2)))  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2) BETWEEN ((vt0.c0 IN (vt0.c0))) AND (UPPER(DISTINCT vt0.c2)))) ORDER BY (+ (((vt0.c0) NOTNULL)))  NULLS FIRST, TYPEOF(DISTINCT (vt0.c2 IN (vt0.c1, vt0.c2)))  NULLS FIRST LIMIT 0x3;
SELECT COUNT(*) FROM vt0 WHERE (LTRIM(CAST(vt0.c2 AS NUMERIC))) ORDER BY ((((((((vt0.c0)OR(vt0.c1)))AND(vt0.c0)))AND(vt0.c0)))IS NOT(((((((((vt0.c2)AND(vt0.c1)))AND('298697454')))OR(vt0.c1)))OR(vt0.c0))))  NULLS FIRST, (+ (((((((vt0.c0)AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (LTRIM(CAST(vt0.c2 AS NUMERIC))) ORDER BY CASE CAST(vt0.c1 AS BLOB)  WHEN vt0.c2 THEN (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))) ELSE ((vt0.c1)IS(vt0.c2)) END  NULLS LAST, (+ (NULL)) ASC;
SELECT * FROM vt0 WHERE (CASE vt0.c2  WHEN ((vt0.c2)LIKE(vt0.c0)) THEN ((((((vt0.c1)AND(0.6392025830878062)))OR(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c1) NOTNULL) THEN (vt0.c2 IN (vt0.c1, x'4d')) ELSE ((NULL) BETWEEN (vt0.c2) AND (x'')) END) ORDER BY ((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1))) ISNULL) DESC  NULLS FIRST, ((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN -8.19624949E8 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN 0.22137530896621738 ELSE vt0.c0 END) BETWEEN (((x'')>(vt0.c2))) AND (vt0.c1));
SELECT DISTINCT * FROM vt0 WHERE (CASE vt0.c2  WHEN ((vt0.c2)LIKE(vt0.c0)) THEN ((((((vt0.c1)AND(0.6392025830878062)))OR(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c1) NOTNULL) THEN (vt0.c2 IN (vt0.c1, x'4d')) ELSE ((NULL) BETWEEN (vt0.c2) AND (x'')) END) ORDER BY vt0.c0, '' DESC  NULLS FIRST, (((vt0.c0)==(vt0.c0)) IN ()) ASC LIMIT 0X0;
SELECT * FROM vt0 WHERE (CASE vt0.c2  WHEN ((vt0.c2)LIKE(vt0.c0)) THEN ((((((vt0.c1)AND(0.6392025830878062)))OR(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c1) NOTNULL) THEN (vt0.c2 IN (vt0.c1, x'4d')) ELSE ((NULL) BETWEEN (vt0.c2) AND (x'')) END) ORDER BY ((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1))) ISNULL) DESC  NULLS FIRST, ((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN -8.19624949E8 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN 0.22137530896621738 ELSE vt0.c0 END) BETWEEN (((x'')>(vt0.c2))) AND (vt0.c1));
SELECT DISTINCT * FROM vt0 WHERE (CASE vt0.c2  WHEN ((vt0.c2)LIKE(vt0.c0)) THEN ((((((vt0.c1)AND(0.6392025830878062)))OR(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c1) NOTNULL) THEN (vt0.c2 IN (vt0.c1, x'4d')) ELSE ((NULL) BETWEEN (vt0.c2) AND (x'')) END) ORDER BY vt0.c0, '' DESC  NULLS FIRST, (((vt0.c0)==(vt0.c0)) IN ()) ASC LIMIT 0X0;
SELECT * FROM vt0 WHERE (CAST(CAST('-849136304' AS TEXT) AS INTEGER)) ORDER BY LENGTH(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (CAST(CAST('-849136304' AS TEXT) AS INTEGER)) ORDER BY LENGTH(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY LENGTH(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1))) DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0 WHERE (CAST(CAST('-849136304' AS TEXT) AS INTEGER)) ORDER BY LENGTH(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (CAST(CAST('-849136304' AS TEXT) AS INTEGER)) ORDER BY LENGTH(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c1) ORDER BY LENGTH(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1))) DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((NOT (vt0.c0))) NOT BETWEEN (CAST(x'745c' AS TEXT)) AND (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY (((((vt0.c1, vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c2, vt0.c1, vt0.c2)))) NOT BETWEEN ((~ (vt0.c2))) AND (((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))), CAST((~ (vt0.c1)) AS TEXT) ASC  NULLS LAST, (('^5hLN)ck') NOT BETWEEN (((NULL)IS NOT(vt0.c0))) AND ((- (vt0.c2))))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((NOT (vt0.c0))) NOT BETWEEN (CAST(x'745c' AS TEXT)) AND (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY (((((vt0.c1, vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c2, vt0.c1, vt0.c2)))) NOT BETWEEN ((~ (vt0.c2))) AND (((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))), CAST((~ (vt0.c1)) AS TEXT) ASC  NULLS LAST, (('^5hLN)ck') NOT BETWEEN (((NULL)IS NOT(vt0.c0))) AND ((- (vt0.c2))))  NULLS LAST LIMIT 5;
SELECT * FROM vt0 WHERE (((vt0.c1)IS NOT(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT * FROM vt0 WHERE (((vt0.c1)IS NOT(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (~ (((vt0.c1) IS TRUE))) ASC LIMIT 0X1;
SELECT * FROM vt0 WHERE (((vt0.c1)IS NOT(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT * FROM vt0 WHERE (((vt0.c1)IS NOT(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (~ (((vt0.c1) IS TRUE))) ASC LIMIT 0X1;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (CAST(((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)) AS BLOB));
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((CAST(((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)) AS BLOB))AND(((vt0.c1 COLLATE RTRIM) BETWEEN (vt0.c2 COLLATE RTRIM) AND (vt0.c2 COLLATE NOCASE))))) ORDER BY 0.5550856374734621 ASC  NULLS LAST, ((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c1)))AND(vt0.c1))) BETWEEN (x'c9b59fbe') AND ((vt0.c0 IN ()))) DESC  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY (((((((((('-59417439')OR((NOT (vt0.c1)))))AND((vt0.c1 IN (vt0.c0, vt0.c0)))))AND(((((vt0.c2)OR(0.5128467654827641)))OR(vt0.c2)))))AND(((vt0.c0) NOTNULL))))AND(TYPEOF(DISTINCT vt0.c2))) ASC  NULLS FIRST, (('v') NOT NULL) ASC;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) ORDER BY HEX(CAST(vt0.c0 AS BLOB)) LIMIT 0x2;
SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY (((((((((('-59417439')OR((NOT (vt0.c1)))))AND((vt0.c1 IN (vt0.c0, vt0.c0)))))AND(((((vt0.c2)OR(0.5128467654827641)))OR(vt0.c2)))))AND(((vt0.c0) NOTNULL))))AND(TYPEOF(DISTINCT vt0.c2))) ASC  NULLS FIRST, (('v') NOT NULL) ASC;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) ORDER BY HEX(CAST(vt0.c0 AS BLOB)) LIMIT 0x2;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c1)>(-390512875))))<=((vt0.c1 COLLATE BINARY)))) ORDER BY (- (vt0.c0)) ASC  NULLS LAST, (((+ (vt0.c2)))>>(((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2)))) DESC  NULLS FIRST, IFNULL(vt0.c1, ((((vt0.c1)AND(vt0.c1)))OR(vt0.c2))) ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c1)>(-390512872))))<=((vt0.c1 COLLATE BINARY)))) ORDER BY (('-693457325')IS(((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((NOT (vt0.c0)) COLLATE BINARY) ORDER BY (('-693457325')IS(((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)))) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c1)LIKE(vt0.c2)))OR(((vt0.c1) NOT NULL))))OR(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c1)LIKE(vt0.c2)))OR(((vt0.c1) NOT NULL))))OR(vt0.c0)))AND(CASE (vt0.c0 IN ())  WHEN vt0.c0 COLLATE BINARY THEN (NOT (vt0.c0)) WHEN vt0.c2 COLLATE RTRIM THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c2 END WHEN (((vt0.c1, NULL))<((vt0.c0, vt0.c1))) THEN COALESCE(DISTINCT vt0.c0, vt0.c0, vt0.c1, vt0.c1, vt0.c2) END))) ORDER BY ((((-1555521436 COLLATE BINARY)AND(((vt0.c2) NOTNULL))))OR(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))) ASC  NULLS LAST, ((vt0.c0)<=(vt0.c2)) COLLATE NOCASE ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((ABS(vt0.c2)) IS TRUE)) ORDER BY ((((-1555521436 COLLATE BINARY)AND(((vt0.c2) NOTNULL))))OR(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))) ASC  NULLS LAST, ((vt0.c0)<=(vt0.c2)) COLLATE NOCASE ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c1)LIKE(vt0.c2)))OR(((vt0.c1) NOT NULL))))OR(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((((((((vt0.c1)LIKE(vt0.c2)))OR(((vt0.c1) NOT NULL))))OR(vt0.c0)))AND(CASE (vt0.c0 IN ())  WHEN vt0.c0 COLLATE BINARY THEN (NOT (vt0.c0)) WHEN vt0.c2 COLLATE RTRIM THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c2 END WHEN (((vt0.c1, NULL))<((vt0.c0, vt0.c1))) THEN COALESCE(DISTINCT vt0.c0, vt0.c0, vt0.c1, vt0.c1, vt0.c2) END))) ORDER BY ((((-1555521436 COLLATE BINARY)AND(((vt0.c2) NOTNULL))))OR(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))) ASC  NULLS LAST, ((vt0.c0)<=(vt0.c2)) COLLATE NOCASE ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((ABS(vt0.c2)) IS TRUE)) ORDER BY ((((-1555521436 COLLATE BINARY)AND(((vt0.c2) NOTNULL))))OR(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))) ASC  NULLS LAST, ((vt0.c0)<=(vt0.c2)) COLLATE NOCASE ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0 WHERE ((~ (((vt0.c2)GLOB(0.48336589204813407))))) ORDER BY CAST(((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0)) AS BLOB)  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((~ (((vt0.c2)GLOB(0.48336589204813407))))) ORDER BY CAST(((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0)) AS BLOB)  NULLS FIRST LIMIT 0X0;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (UNLIKELY(DISTINCT (vt0.c2 IN (vt0.c2)))) ORDER BY vt0.c0 DESC  NULLS LAST, (CASE x'80'  WHEN 0.8053731660089664 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c2 END IN (((vt0.c0)>=(vt0.c0)), TRIM(DISTINCT x'ad49')))  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((UNLIKELY(DISTINCT (vt0.c2 IN (vt0.c2))))AND(((((((((vt0.c0)OR(vt0.c1)))OR(vt0.c2)))OR(((vt0.c2)<(vt0.c1)))))AND(CAST(vt0.c2 AS BLOB)))))) ORDER BY ((((((vt0.c2 COLLATE RTRIM)AND(vt0.c1 COLLATE NOCASE)))AND((~ (vt0.c2)))))OR(((vt0.c0)/(vt0.c0)))) DESC, vt0.c0 LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((vt0.c1 IN (vt0.c0, vt0.c2)) IN (CASE WHEN 0Xffffffffb1b1cfd5 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY ((((((vt0.c2 COLLATE RTRIM)AND(vt0.c1 COLLATE NOCASE)))AND((~ (vt0.c2)))))OR(((vt0.c0)/(vt0.c0)))) DESC, vt0.c0 LIMIT 0;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))IS NOT((vt0.c2 IN (vt0.c1))))) ORDER BY (~ (((vt0.c0)<<(vt0.c2)))) ASC  NULLS FIRST;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))IS NOT((vt0.c2 IN (vt0.c1)))))AND(((((CAST(vt0.c1 AS TEXT))OR(-1832423598)))OR(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))))) ORDER BY ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END) NOT NULL) INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0)) BETWEEN ((vt0.c2)) AND ((vt0.c0))) IN ())) ORDER BY ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END) NOT NULL);
SELECT COUNT(*) FROM vt0 WHERE (CASE TRIM(vt0.c2)  WHEN ((NULL)-(vt0.c0)) THEN vt0.c1 COLLATE NOCASE WHEN CAST(vt0.c2 AS BLOB) THEN DATETIME(vt0.c0, vt0.c2, vt0.c1, vt0.c0) WHEN (~ (vt0.c2)) THEN NULL COLLATE BINARY ELSE CAST(vt0.c1 AS INTEGER) END);
SELECT COUNT(*) FROM vt0 WHERE (((CASE TRIM(vt0.c2)  WHEN ((NULL)-(vt0.c0)) THEN vt0.c1 COLLATE NOCASE WHEN CAST(vt0.c2 AS BLOB) THEN DATETIME(vt0.c0, vt0.c2, vt0.c1, vt0.c0) WHEN (~ (vt0.c2)) THEN NULL COLLATE BINARY ELSE CAST(vt0.c1 AS INTEGER) END)AND((((- (vt0.c1))) NOT NULL)))) ORDER BY ((CAST(vt0.c0 AS TEXT))<=(vt0.c2))  NULLS LAST, vt0.c1 DESC, (((vt0.c2)OR(vt0.c2)) IN ((vt0.c0 IN (vt0.c2, vt0.c2)), ((((((x'be')OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2)))) DESC LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt0 WHERE ('FALSE' COLLATE BINARY) ORDER BY ((CAST(vt0.c0 AS TEXT))<=(vt0.c2))  NULLS LAST, vt0.c1 DESC, (((vt0.c2)OR(vt0.c2)) IN ((vt0.c0 IN (vt0.c2, vt0.c2)), ((((((x'be')OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2)))) DESC LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (CASE WHEN highlight(vt0.c0, vt0.c2, vt0.c0, vt0.c2) THEN ((vt0.c1)!=(vt0.c0)) END) ORDER BY ((vt0.c0 COLLATE NOCASE) ISNULL);
SELECT DISTINCT * FROM vt0 WHERE (CASE WHEN highlight(vt0.c0, vt0.c2, vt0.c0, vt0.c2) THEN ((vt0.c1)!=(vt0.c0)) END) ORDER BY ((vt0.c0 COLLATE NOCASE) ISNULL);
SELECT ALL * FROM vt0 WHERE (CASE WHEN highlight(vt0.c0, vt0.c2, vt0.c0, vt0.c2) THEN ((vt0.c1)!=(vt0.c0)) END) ORDER BY ((vt0.c0 COLLATE NOCASE) ISNULL);
SELECT ALL * FROM vt0 WHERE (CAST((+ (vt0.c0)) AS REAL));
SELECT DISTINCT * FROM vt0 WHERE (((CAST((+ (vt0.c0)) AS REAL))AND(CAST(((vt0.c2)>=(vt0.c0)) AS TEXT)))) ORDER BY CASE WHEN (((((('i*yl')AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c1)) THEN ((vt0.c0)IS NOT(vt0.c1)) WHEN CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END THEN vt0.c0 WHEN json(vt0.c2) THEN vt0.c1 COLLATE BINARY WHEN 0xffffffffb16360c5 THEN (((vt0.c1))==((vt0.c0))) ELSE ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) END, (+ (((((vt0.c2)AND(vt0.c2)))AND(vt0.c2)))) ASC  NULLS LAST, ((ABS(vt0.c1)) NOT NULL) ASC, ((CASE 0.5634048098712778  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END) BETWEEN (((vt0.c2)<(vt0.c2))) AND (vt0.c2)) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS NUMERIC)) BETWEEN (LIKELIHOOD('y', vt0.c0)) AND (((vt0.c1) BETWEEN (vt0.c1) AND (''))))) ORDER BY CASE WHEN (((((('i*yl')AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c1)) THEN ((vt0.c0)IS NOT(vt0.c1)) WHEN CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END THEN vt0.c0 WHEN json(vt0.c2) THEN vt0.c1 COLLATE BINARY WHEN 0xffffffffb16360c5 THEN (((vt0.c1))=((vt0.c0))) ELSE ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) END, (+ (((((vt0.c2)AND(vt0.c2)))AND(vt0.c2)))) ASC  NULLS LAST, ((ABS(vt0.c1)) NOT NULL) ASC, ((CASE 0.5634048098712778  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END) BETWEEN (((vt0.c2)<(vt0.c2))) AND (vt0.c2)) DESC;
SELECT ALL * FROM vt0 WHERE (CAST((+ (vt0.c0)) AS REAL));
SELECT DISTINCT * FROM vt0 WHERE (((CAST((+ (vt0.c0)) AS REAL))AND(CAST(((vt0.c2)>=(vt0.c0)) AS TEXT)))) ORDER BY CASE WHEN (((((('i*yl')AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c1)) THEN ((vt0.c0)IS NOT(vt0.c1)) WHEN CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END THEN vt0.c0 WHEN json(vt0.c2) THEN vt0.c1 COLLATE BINARY WHEN 0xffffffffb16360c5 THEN (((vt0.c1))==((vt0.c0))) ELSE ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) END, (+ (((((vt0.c2)AND(vt0.c2)))AND(vt0.c2)))) ASC  NULLS LAST, ((ABS(vt0.c1)) NOT NULL) ASC, ((CASE 0.5634048098712778  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END) BETWEEN (((vt0.c2)<(vt0.c2))) AND (vt0.c2)) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS NUMERIC)) BETWEEN (LIKELIHOOD('y', vt0.c0)) AND (((vt0.c1) BETWEEN (vt0.c1) AND (''))))) ORDER BY CASE WHEN (((((('i*yl')AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c1)) THEN ((vt0.c0)IS NOT(vt0.c1)) WHEN CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END THEN vt0.c0 WHEN json(vt0.c2) THEN vt0.c1 COLLATE BINARY WHEN 0xffffffffb16360c5 THEN (((vt0.c1))=((vt0.c0))) ELSE ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) END, (+ (((((vt0.c2)AND(vt0.c2)))AND(vt0.c2)))) ASC  NULLS LAST, ((ABS(vt0.c1)) NOT NULL) ASC, ((CASE 0.5634048098712778  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END) BETWEEN (((vt0.c2)<(vt0.c2))) AND (vt0.c2)) DESC;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY ((CAST(vt0.c2 AS REAL)) NOT BETWEEN (NULLIF(DISTINCT vt0.c1, vt0.c0)) AND (((vt0.c1)GLOB(vt0.c0)))) DESC, ((((0.2845074523875971) ISNULL)) NOTNULL)  NULLS FIRST, (((vt0.c0 IN (vt0.c0))) BETWEEN ((~ (vt0.c2))) AND (vt0.c1))  NULLS FIRST;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((vt0.c0)AND(CAST(NULL AS BLOB)))) ORDER BY ((CAST(vt0.c2 AS REAL)) NOT BETWEEN (NULLIF(DISTINCT vt0.c1, vt0.c0)) AND (((vt0.c1)GLOB(vt0.c0)))) DESC, ((((0.2845074523875971) ISNULL)) NOTNULL)  NULLS FIRST, (((vt0.c0 IN (vt0.c0))) BETWEEN ((~ (vt0.c2))) AND (vt0.c1))  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c2) NOT BETWEEN (((vt0.c1) IS TRUE)) AND (((vt0.c0)>=(vt0.c0))))) ORDER BY (NOT (vt0.c0)) COLLATE BINARY COLLATE RTRIM DESC, ((((vt0.c2)*(vt0.c0)))LIKE((NOT (vt0.c0))));
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c2) NOT BETWEEN (((vt0.c1) IS TRUE)) AND (((vt0.c0)>=(vt0.c0))))) ORDER BY CAST(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN x'' THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END AS INTEGER) DESC, ((((vt0.c1 IN ('0.49390007126825086'))))!=((((-192593557)|(vt0.c2))))) DESC  NULLS FIRST, (- (((((((vt0.c0)AND(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)))) DESC INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((- (x'5deb'))) ORDER BY CAST(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN x'' THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END AS INTEGER) DESC, ((((vt0.c1 IN ('0.49390007126825086'))))!=((((-192593557)|(vt0.c2))))) DESC  NULLS FIRST, (- (((((((vt0.c0)AND(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)))) DESC;
SELECT ALL * FROM vt0 WHERE (vt0.c2);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2)AND(NULLIF((- (vt0.c1)), (vt0.c2 IN (vt0.c2)))))) ORDER BY vt0.c1 LIMIT 0x2;
SELECT ALL * FROM vt0 WHERE (vt0.c2);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c2)AND(NULLIF((- (vt0.c1)), (vt0.c2 IN (vt0.c2)))))) ORDER BY vt0.c1 LIMIT 0x2;
SELECT * FROM vt0 WHERE ((NOT (vt0.c0))) ORDER BY (((vt0.c0)GLOB(vt0.c2)) IN ()), ((((vt0.c1) NOTNULL))<=(CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((NOT (vt0.c0)))AND(((LIKELIHOOD(vt0.c1, vt0.c1)) NOTNULL)))) ORDER BY x''  NULLS FIRST, (+ ((NOT (vt0.c2))))  NULLS LAST, (((vt0.c0) NOTNULL) IN (vt0.c0 COLLATE NOCASE)) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c1 THEN vt0.c1 END)==(''))) ORDER BY x''  NULLS FIRST, (+ ((NOT (vt0.c2))))  NULLS LAST, (((vt0.c0) NOTNULL) IN (vt0.c0 COLLATE NOCASE));
SELECT * FROM vt0 WHERE ((NOT (vt0.c0))) ORDER BY (((vt0.c0)GLOB(vt0.c2)) IN ()), ((((vt0.c1) NOTNULL))<=(CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE)) ORDER BY UPPER(CAST(vt0.c2 AS TEXT)) ASC;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE))AND(vt0.c2))) ORDER BY (((((x'cd', vt0.c1, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c1, x'8286', vt0.c0)) AND ((vt0.c1, vt0.c0, vt0.c2, vt0.c1)))) BETWEEN ((vt0.c2 IN (vt0.c0))) AND ((NOT (vt0.c2)))) DESC LIMIT 3 INTERSECT SELECT * FROM vt0 WHERE (json_valid(((((((((((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)))AND(vt0.c0)))AND(NULL)))OR(vt0.c2)))OR(vt0.c1)))) ORDER BY (((((x'cd', vt0.c1, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c1, x'8286', vt0.c0)) AND ((vt0.c1, vt0.c0, vt0.c2, vt0.c1)))) BETWEEN ((vt0.c2 IN (vt0.c0))) AND ((NOT (vt0.c2)))) DESC LIMIT 3;
SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE)) ORDER BY UPPER(CAST(vt0.c2 AS TEXT)) ASC;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE))AND(vt0.c2))) ORDER BY (((((x'cd', vt0.c1, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c1, x'8286', vt0.c0)) AND ((vt0.c1, vt0.c0, vt0.c2, vt0.c1)))) BETWEEN ((vt0.c2 IN (vt0.c0))) AND ((NOT (vt0.c2)))) DESC LIMIT 3 INTERSECT SELECT * FROM vt0 WHERE (json_valid(((((((((((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)))AND(vt0.c0)))AND(NULL)))OR(vt0.c2)))OR(vt0.c1)))) ORDER BY (((((x'cd', vt0.c1, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c1, x'8286', vt0.c0)) AND ((vt0.c1, vt0.c0, vt0.c2, vt0.c1)))) BETWEEN ((vt0.c2 IN (vt0.c0))) AND ((NOT (vt0.c2)))) DESC LIMIT 3;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((vt0.c1) NOT BETWEEN (((((((((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c2))) AND (vt0.c0)));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((vt0.c1) NOT BETWEEN (((((((((((vt0.c1)AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c2))) AND (vt0.c0))) ORDER BY ((HEX(DISTINCT vt0.c0))<<(((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))) DESC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (CASE ((vt0.c0)AND(vt0.c1))  WHEN vt0.c0 THEN (((vt0.c2, vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c2, vt0.c1))) WHEN (~ (NULL)) THEN (NOT (vt0.c2)) END);
SELECT COUNT(*) FROM vt0 WHERE (((CASE ((vt0.c0)AND(vt0.c1))  WHEN vt0.c0 THEN (((vt0.c2, vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c2, vt0.c1))) WHEN (~ (NULL)) THEN (NOT (vt0.c2)) END)AND(((((((((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c2)))OR(((vt0.c0) NOT NULL))))OR((0X11cdc2ee IN (vt0.c1)))))AND(vt0.c1 COLLATE NOCASE)))AND((NOT (vt0.c2))))))) ORDER BY (((vt0.c0)) BETWEEN ((((vt0.c0)/(vt0.c0)))) AND ((((vt0.c1)&(vt0.c0))))) ASC, (~ (CAST(vt0.c2 AS NUMERIC))) DESC  NULLS FIRST, ((((0x122cae6d)OR(vt0.c1))) ISNULL) INTERSECT SELECT COUNT(*) FROM vt0 WHERE (CASE ((vt0.c1) IS TRUE)  WHEN (NOT (vt0.c1)) THEN ((((((((vt0.c1)OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c2)))AND(vt0.c2)) WHEN ((((vt0.c2)OR(vt0.c1)))AND(vt0.c0)) THEN -6.75065596E8 WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN ')D煆L.깓I1' END THEN ((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)) WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (x'')) THEN CAST(vt0.c0 AS NUMERIC) ELSE 0.2657914934254304 END) ORDER BY (((vt0.c0)) BETWEEN ((((vt0.c0)/(vt0.c0)))) AND ((((vt0.c1)&(vt0.c0))))) ASC, (~ (CAST(vt0.c2 AS NUMERIC))) DESC  NULLS FIRST, ((((304918125)OR(vt0.c1))) ISNULL);
SELECT COUNT(*) FROM vt0 WHERE (vt0.c0);
SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c0)AND((((((((+ (vt0.c0)))AND(((0.9937973807984188) NOTNULL))))OR(x'06')))OR(json_patch(vt0.c0, vt0.c0)))))) INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c1) BETWEEN (((vt0.c1)*(vt0.c0))) AND ((- (vt0.c1)))));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c2, vt0.c2))<=((vt0.c0, vt0.c1))))>=((((vt0.c2, vt0.c1))<>((vt0.c1, vt0.c0)))))) ORDER BY NULL  NULLS FIRST, (('-2143298109')GLOB(IFNULL(vt0.c1, vt0.c2)))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c2, vt0.c2))<=((vt0.c0, vt0.c1))))==((((vt0.c2, vt0.c1))>((vt0.c1, vt0.c0)))))) ORDER BY NULL  NULLS FIRST, (('-2143298109')GLOB(IFNULL(vt0.c1, vt0.c2)))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c2, vt0.c2))<=((vt0.c0, vt0.c1))))>=((((vt0.c2, vt0.c1))<>((vt0.c1, vt0.c0)))))) ORDER BY NULL  NULLS FIRST, (('-2143298109')GLOB(IFNULL(vt0.c1, vt0.c2)))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c2, vt0.c2))<=((vt0.c0, vt0.c1))))==((((vt0.c2, vt0.c1))>((vt0.c1, vt0.c0)))))) ORDER BY NULL  NULLS FIRST, (('-2143298109')GLOB(IFNULL(vt0.c1, vt0.c2)))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((- ((~ (vt0.c1))))) ORDER BY CAST((NOT (vt0.c0)) AS BLOB) DESC;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((- ((~ (vt0.c1)))))AND((((((vt0.c1, vt0.c1, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c1, vt0.c1)))) NOT BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY CAST((NOT (vt0.c0)) AS BLOB) DESC;
SELECT * FROM vt0 WHERE ((((((vt0.c2, 0.1808316252710489, vt0.c0)) BETWEEN ((vt0.c1, 0.5357186200566326, 0Xffffffffab6a0dff)) AND ((vt0.c2, vt0.c0, vt0.c2))))>=(((vt0.c2)LIKE(vt0.c0)))));
SELECT ALL * FROM vt0 WHERE ((((((((vt0.c2, 0.1808316252710489, vt0.c0)) BETWEEN ((vt0.c1, 0.5357186200566326, -1419112961)) AND ((vt0.c2, vt0.c0, vt0.c2))))==(((vt0.c2)LIKE(vt0.c0)))))AND((((vt0.c0)) NOT BETWEEN ((x'')) AND ((((vt0.c2) NOTNULL))))))) ORDER BY (((vt0.c2)GLOB(vt0.c2)) IN (vt0.c1 COLLATE NOCASE)) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY (((vt0.c2)GLOB(vt0.c2)) IN (vt0.c1 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((((vt0.c2, 0.1808316252710489, vt0.c0)) BETWEEN ((vt0.c1, 0.5357186200566326, 0Xffffffffab6a0dff)) AND ((vt0.c2, vt0.c0, vt0.c2))))>=(((vt0.c2)LIKE(vt0.c0)))));
SELECT ALL * FROM vt0 WHERE ((((((((vt0.c2, 0.1808316252710489, vt0.c0)) BETWEEN ((vt0.c1, 0.5357186200566326, -1419112961)) AND ((vt0.c2, vt0.c0, vt0.c2))))==(((vt0.c2)LIKE(vt0.c0)))))AND((((vt0.c0)) NOT BETWEEN ((x'')) AND ((((vt0.c2) NOTNULL))))))) ORDER BY (((vt0.c2)GLOB(vt0.c2)) IN (vt0.c1 COLLATE NOCASE)) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY (((vt0.c2)GLOB(vt0.c2)) IN (vt0.c1 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT MAX(vt0.c1) FROM vt0 WHERE ((((((vt0.c0)OR(0.15119326210161488)), ((vt0.c0) NOT NULL), vt0.c1))>((((vt0.c1)%(vt0.c0)), (('O')==(vt0.c0)), CAST(vt0.c2 AS TEXT))))) ORDER BY NULLIF(vt0.c0, vt0.c0) COLLATE NOCASE  NULLS LAST, (((CAST(vt0.c1 AS INTEGER), (((vt0.c1, vt0.c1, vt0.c1, vt0.c0, vt0.c1))<((vt0.c2, vt0.c0, vt0.c1, NULL, vt0.c1))), vt0.c0 COLLATE RTRIM, (~ (vt0.c2)), (((vt0.c2))<((vt0.c1))), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END))>((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN '-1383487729' ELSE vt0.c1 END, CAST(0.6818725949059139 AS BLOB), CAST(vt0.c1 AS BLOB), ((((vt0.c1)AND(vt0.c0)))AND(vt0.c0)), (vt0.c2 IN (vt0.c1))))) ASC, CAST(((vt0.c1)==(vt0.c1)) AS NUMERIC);
SELECT MAX(vt0.c1) FROM vt0 WHERE ((((((vt0.c0)OR(0.15119326210161488)), ((vt0.c0) NOT NULL), vt0.c1))>((((vt0.c1)%(vt0.c0)), (('O')==(vt0.c0)), CAST(vt0.c2 AS TEXT))))) ORDER BY NULLIF(vt0.c0, vt0.c0) COLLATE NOCASE  NULLS LAST, (((CAST(vt0.c1 AS INTEGER), (((vt0.c1, vt0.c1, vt0.c1, vt0.c0, vt0.c1))<((vt0.c2, vt0.c0, vt0.c1, NULL, vt0.c1))), vt0.c0 COLLATE RTRIM, (~ (vt0.c2)), (((vt0.c2))<((vt0.c1))), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END))>((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN '-1383487729' ELSE vt0.c1 END, CAST(0.6818725949059139 AS BLOB), CAST(vt0.c1 AS BLOB), ((((vt0.c1)AND(vt0.c0)))AND(vt0.c0)), (vt0.c2 IN (vt0.c1))))) ASC, CAST(((vt0.c1)==(vt0.c1)) AS NUMERIC) INTERSECT SELECT MAX(vt0.c1) FROM vt0 WHERE (vt0.c1) ORDER BY NULLIF(vt0.c0, vt0.c0) COLLATE NOCASE  NULLS LAST, (((CAST(vt0.c1 AS INTEGER), (((vt0.c1, vt0.c1, vt0.c1, vt0.c0, vt0.c1))<((vt0.c2, vt0.c0, vt0.c1, NULL, vt0.c1))), vt0.c0 COLLATE RTRIM, (~ (vt0.c2)), (((vt0.c2))<((vt0.c1))), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END))>((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN '-1383487729' ELSE vt0.c1 END, CAST(0.6818725949059139 AS BLOB), CAST(vt0.c1 AS BLOB), ((((vt0.c1)AND(vt0.c0)))AND(vt0.c0)), (vt0.c2 IN (vt0.c1))))) ASC, CAST(((vt0.c1)=(vt0.c1)) AS NUMERIC);
SELECT MAX(vt0.c0) FROM vt0 WHERE ((NOT (vt0.c1))) ORDER BY ((((((vt0.c1)>=(vt0.c2)))AND(vt0.c1)))OR((+ (vt0.c1)))), NULL;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((NOT (vt0.c1)))AND((((NULL)IS('lL')) IN (CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END))))) ORDER BY -1.820249969E9 ASC INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c1) NOTNULL)) ORDER BY -1.820249969E9 ASC;
SELECT * FROM vt0 WHERE (((((vt0.c1) IS FALSE))AND(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN x'52e3f2' THEN vt0.c0 END)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c1) IS FALSE))AND(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN x'52e3f2' THEN vt0.c0 END)))AND(((((vt0.c0)AND(vt0.c1)))AND('-294520665')) COLLATE NOCASE))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (x'3f');
SELECT * FROM vt0 WHERE (((((vt0.c1) IS FALSE))AND(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN x'52e3f2' THEN vt0.c0 END)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c1) IS FALSE))AND(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN x'52e3f2' THEN vt0.c0 END)))AND(((((vt0.c0)AND(vt0.c1)))AND('-294520665')) COLLATE NOCASE))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (x'3f');
SELECT * FROM vt0 WHERE (((((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))<=(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END)));
SELECT * FROM vt0 WHERE (((((((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))<(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END)))AND(CAST(x'' AS NUMERIC) COLLATE BINARY))) LIMIT 0;
SELECT * FROM vt0 WHERE (((((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))<=(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END)));
SELECT * FROM vt0 WHERE (((((((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))<(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END)))AND(CAST(x'' AS NUMERIC) COLLATE BINARY))) LIMIT 0;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c1)<(vt0.c2)) AS REAL)) ORDER BY CAST((- ('&^)I')) AS NUMERIC) ASC;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c1)<(vt0.c2)) AS REAL)) ORDER BY HEX(DISTINCT ((vt0.c0)|(vt0.c2))), (((((((((vt0.c1 IN ()))OR(CAST(vt0.c0 AS INTEGER))))AND((vt0.c0 IN (vt0.c0)))))OR(vt0.c1 COLLATE NOCASE)))OR(CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END)) LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END COLLATE RTRIM COLLATE NOCASE) ORDER BY HEX(DISTINCT ((vt0.c0)|(vt0.c2))), (((((((((vt0.c1 IN ()))OR(CAST(vt0.c0 AS INTEGER))))AND((vt0.c0 IN (vt0.c0)))))OR(vt0.c1 COLLATE NOCASE)))OR(CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END)) LIMIT 0;
SELECT * FROM vt0 WHERE ((NOT ((- (vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE ((((NOT ((- (vt0.c1)))))AND((((vt0.c2)>=(vt0.c0)) IN ((vt0.c2 IN (vt0.c1))))))) ORDER BY ((((vt0.c0)GLOB(vt0.c2)))>(((0.4202042555698514) NOT BETWEEN (vt0.c1) AND (vt0.c2)))) DESC, ((((vt0.c1)<=(vt0.c0)))>>(((vt0.c2)AND(NULL)))), LIKE(CAST(vt0.c2 AS TEXT), (((vt0.c1, vt0.c1))==((vt0.c2, '')))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END, ((vt0.c0)<=(vt0.c1)), CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END)) AND ((SQLITE_COMPILEOPTION_GET(vt0.c0), 138626946 COLLATE NOCASE, ((((((vt0.c1)AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c1)))))) ORDER BY ((((vt0.c0)GLOB(vt0.c2)))>(((0.4202042555698514) NOT BETWEEN (vt0.c1) AND (vt0.c2)))) DESC, ((((vt0.c1)<=(vt0.c0)))>>(((vt0.c2)AND(NULL)))), LIKE(CAST(vt0.c2 AS TEXT), (((vt0.c1, vt0.c1))==((vt0.c2, '')))) DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE ((NOT ((- (vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE ((((NOT ((- (vt0.c1)))))AND((((vt0.c2)>=(vt0.c0)) IN ((vt0.c2 IN (vt0.c1))))))) ORDER BY ((((vt0.c0)GLOB(vt0.c2)))>(((0.4202042555698514) NOT BETWEEN (vt0.c1) AND (vt0.c2)))) DESC, ((((vt0.c1)<=(vt0.c0)))>>(((vt0.c2)AND(NULL)))), LIKE(CAST(vt0.c2 AS TEXT), (((vt0.c1, vt0.c1))==((vt0.c2, '')))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END, ((vt0.c0)<=(vt0.c1)), CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END)) AND ((SQLITE_COMPILEOPTION_GET(vt0.c0), 138626946 COLLATE NOCASE, ((((((vt0.c1)AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c1)))))) ORDER BY ((((vt0.c0)GLOB(vt0.c2)))>(((0.4202042555698514) NOT BETWEEN (vt0.c1) AND (vt0.c2)))) DESC, ((((vt0.c1)<=(vt0.c0)))>>(((vt0.c2)AND(NULL)))), LIKE(CAST(vt0.c2 AS TEXT), (((vt0.c1, vt0.c1))==((vt0.c2, '')))) DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM)|(((vt0.c1) IS FALSE))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM)|(((vt0.c1) IS FALSE)))) ORDER BY (((+ (vt0.c1))) NOT BETWEEN (((x'd4ce') BETWEEN (vt0.c1) AND (vt0.c0))) AND ((((vt0.c0, vt0.c2)) BETWEEN ((0x36b01be3, vt0.c2)) AND ((vt0.c2, vt0.c0)))))  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM)|(((vt0.c1) IS FALSE))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM)|(((vt0.c1) IS FALSE)))) ORDER BY (((+ (vt0.c1))) NOT BETWEEN (((x'd4ce') BETWEEN (vt0.c1) AND (vt0.c0))) AND ((((vt0.c0, vt0.c2)) BETWEEN ((0x36b01be3, vt0.c2)) AND ((vt0.c2, vt0.c0)))))  NULLS LAST;
SELECT * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1))) NOT BETWEEN ((vt0.c1 IN (vt0.c1, vt0.c2))) AND (CAST(vt0.c2 AS REAL)))) ORDER BY ((((((((((vt0.c2)<<(vt0.c2)))AND(CASE WHEN NULL THEN vt0.c1 END)))OR(json(vt0.c0))))OR(((vt0.c2) NOT BETWEEN (vt0.c0) AND (NULL)))))OR(((vt0.c0)>=(vt0.c0)))) DESC;
SELECT * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1))) NOT BETWEEN ((vt0.c1 IN (vt0.c1, vt0.c2))) AND (CAST(vt0.c2 AS REAL)))) ORDER BY ((((((((((vt0.c2)<<(vt0.c2)))AND(CASE WHEN NULL THEN vt0.c1 END)))OR(json(vt0.c0))))OR(((vt0.c2) NOT BETWEEN (vt0.c0) AND (NULL)))))OR(((vt0.c0)>=(vt0.c0)))) DESC LIMIT 0X1;
SELECT * FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1))) NOT BETWEEN ((vt0.c1 IN (vt0.c1, vt0.c2))) AND (CAST(vt0.c2 AS REAL)))) ORDER BY ((((((((((vt0.c2)<<(vt0.c2)))AND(CASE WHEN NULL THEN vt0.c1 END)))OR(json(vt0.c0))))OR(((vt0.c2) NOT BETWEEN (vt0.c0) AND (NULL)))))OR(((vt0.c0)>=(vt0.c0)))) DESC;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c2) NOT NULL)) ORDER BY (((((((((((((((vt0.c2)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)))OR(0.588142811403767)), CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 END, CAST(vt0.c2 AS TEXT)))>=((((vt0.c0) ISNULL), CAST(vt0.c2 AS NUMERIC), TRIM(x'f1461f'))))  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c2) NOT NULL)) ORDER BY CAST(((NULL)||(vt0.c2)) AS NUMERIC) DESC  NULLS FIRST, ((((vt0.c0)OR(vt0.c0)))OR(x'')) COLLATE RTRIM INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS REAL))/(((vt0.c2)||(vt0.c2))))) ORDER BY CAST(((NULL)||(vt0.c2)) AS NUMERIC) DESC  NULLS FIRST, ((((vt0.c0)OR(vt0.c0)))OR(x'')) COLLATE RTRIM;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (vt0.c2 COLLATE RTRIM COLLATE NOCASE) ORDER BY (- ((((vt0.c2, vt0.c1))<>((vt0.c0, vt0.c0)))))  NULLS FIRST, json_array_length((vt0.c1 IN (vt0.c1)), (vt0.c0 IN (vt0.c0)))  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((vt0.c2 COLLATE RTRIM COLLATE NOCASE)AND(((SUBSTR(vt0.c2, vt0.c0))-((vt0.c1 IN ())))))) ORDER BY '-1592164916' ASC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE ((((((((((vt0.c1, x'f59c', vt0.c1)) BETWEEN ((vt0.c2, vt0.c0, '1865946627')) AND ((vt0.c1, vt0.c2, vt0.c0))))OR(vt0.c2 COLLATE NOCASE)))AND(((vt0.c2) NOT NULL))))AND(((((vt0.c0)AND(vt0.c1)))OR(vt0.c1))))) ORDER BY ((vt0.c2 COLLATE NOCASE) IS TRUE), '-1278163370'  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((((((vt0.c1, x'f59c', vt0.c1)) BETWEEN ((vt0.c2, vt0.c0, '1865946627')) AND ((vt0.c1, vt0.c2, vt0.c0))))OR(vt0.c2 COLLATE NOCASE)))AND(((vt0.c2) NOT NULL))))AND(((((vt0.c0)AND(vt0.c1)))OR(vt0.c1))))) ORDER BY ((vt0.c2 COLLATE NOCASE) IS TRUE), '-1278163370'  NULLS FIRST;
SELECT * FROM vt0 WHERE (ABS(((vt0.c2)>(vt0.c0)))) ORDER BY (((((((((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))OR(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))))AND(((vt0.c1)%(vt0.c0)))))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 END)))AND(MIN(vt0.c2, vt0.c1))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (ABS(((vt0.c2)>(vt0.c0)))) ORDER BY (((vt0.c2, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOTNULL), (((vt0.c1, vt0.c1))>=((vt0.c1, vt0.c2))))) AND ((LIKELY(vt0.c0), CAST(NULL AS BLOB))))  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (((ABS(DISTINCT vt0.c2)) NOTNULL)) ORDER BY (((vt0.c2, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOTNULL), (((vt0.c1, vt0.c1))>=((vt0.c1, vt0.c2))))) AND ((LIKELY(vt0.c0), CAST(NULL AS BLOB))))  NULLS LAST;
SELECT * FROM vt0 WHERE (ABS(((vt0.c2)>(vt0.c0)))) ORDER BY (((((((((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))OR(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2)))))AND(((vt0.c1)%(vt0.c0)))))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 END)))AND(MIN(vt0.c2, vt0.c1))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (ABS(((vt0.c2)>(vt0.c0)))) ORDER BY (((vt0.c2, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOTNULL), (((vt0.c1, vt0.c1))>=((vt0.c1, vt0.c2))))) AND ((LIKELY(vt0.c0), CAST(NULL AS BLOB))))  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (((ABS(DISTINCT vt0.c2)) NOTNULL)) ORDER BY (((vt0.c2, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOTNULL), (((vt0.c1, vt0.c1))>=((vt0.c1, vt0.c2))))) AND ((LIKELY(vt0.c0), CAST(NULL AS BLOB))))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c0 IN ()))||((((vt0.c2, vt0.c0, '-1986688488', vt0.c2))<=((x'ec', x'', vt0.c2, vt0.c2)))))) ORDER BY (('-765618178') BETWEEN (((vt0.c1) NOTNULL)) AND ((((0xffffffffb16360c5, vt0.c0))>((vt0.c0, vt0.c0))))) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((vt0.c0 IN ()))||((((vt0.c2, vt0.c0, '-1986688488', vt0.c2))<=((x'ec', x'', vt0.c2, vt0.c2)))))) ORDER BY SUBSTR(CASE vt0.c1  WHEN vt0.c2 THEN 'F)*xIb' END, vt0.c2 COLLATE BINARY)  NULLS LAST, ((LOWER(vt0.c0)) ISNULL), vt0.c2 DESC  NULLS LAST LIMIT 0x2;
SELECT MIN(vt0.c2) FROM vt0 WHERE (((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN '1245896973' WHEN vt0.c1 THEN vt0.c1 END) NOTNULL));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN '1245896973' WHEN vt0.c1 THEN vt0.c1 END) NOTNULL));
SELECT COUNT(*) FROM vt0 WHERE (IFNULL(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)), vt0.c1 COLLATE BINARY)) ORDER BY ABS(DISTINCT (vt0.c1 IN ())) DESC, ((((((((((((((((((0Xffffffff9480e98e)AND(0X3799d86b)))AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c2)))AND(((vt0.c0)|(vt0.c2)))))OR(((vt0.c1)IS NOT(vt0.c2)))))OR(x'dd136e')))AND(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END));
SELECT COUNT(*) FROM vt0 WHERE (IFNULL(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)), vt0.c1 COLLATE BINARY)) ORDER BY vt0.c1 ASC  NULLS FIRST, (((vt0.c0)<(vt0.c2)) IN (vt0.c2 COLLATE RTRIM, x'961d2c', ((vt0.c0)<=(vt0.c1)))) DESC  NULLS FIRST, ((((vt0.c2) NOT BETWEEN (-1295987166) AND (vt0.c0)))<<(LOWER(vt0.c0))) ASC;
SELECT * FROM vt0 WHERE (((((vt0.c0) IS TRUE)) BETWEEN (((vt0.c0) NOTNULL)) AND (NULL)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0) IS TRUE)) BETWEEN (((vt0.c0) NOTNULL)) AND (NULL)))AND(((((vt0.c1)<(vt0.c2)))IS(UPPER(vt0.c1)))))) ORDER BY CASE WHEN (((vt0.c2, vt0.c0, vt0.c2))<((vt0.c0, NULL, vt0.c0))) THEN TRIM(DISTINCT vt0.c0) END  NULLS FIRST, ((((((vt0.c0)AND('K')))OR(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM DESC, x''  NULLS LAST LIMIT 0X2;
SELECT * FROM vt0 WHERE (((((vt0.c0) IS TRUE)) BETWEEN (((vt0.c0) NOTNULL)) AND (NULL)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0) IS TRUE)) BETWEEN (((vt0.c0) NOTNULL)) AND (NULL)))AND(((((vt0.c1)<(vt0.c2)))IS(UPPER(vt0.c1)))))) ORDER BY CASE WHEN (((vt0.c2, vt0.c0, vt0.c2))<((vt0.c0, NULL, vt0.c0))) THEN TRIM(DISTINCT vt0.c0) END  NULLS FIRST, ((((((vt0.c0)AND('K')))OR(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM DESC, x''  NULLS LAST LIMIT 0X2;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((NOT (vt0.c2 COLLATE BINARY))) ORDER BY vt0.c1  NULLS FIRST, (((('-230514929')*(vt0.c2))) BETWEEN ((vt0.c2 IN (vt0.c2, vt0.c2, vt0.c2))) AND (((vt0.c2) NOT NULL))) ASC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((NOT (vt0.c2 COLLATE BINARY))) ORDER BY '168265404'  NULLS LAST, NULLIF(DISTINCT (((vt0.c2))>=((vt0.c2))), CAST(vt0.c1 AS INTEGER)) ASC INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((CASE vt0.c0  WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END)IS NOT(((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))))) ORDER BY '168265404'  NULLS LAST, NULLIF(DISTINCT (((vt0.c2))>=((vt0.c2))), CAST(vt0.c1 AS INTEGER)) ASC;
SELECT ALL * FROM vt0 WHERE (CAST(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END AS REAL));
SELECT * FROM vt0 WHERE (((CAST(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END AS REAL))AND(LIKELIHOOD(CAST(vt0.c1 AS BLOB), -891722830)))) LIMIT 0X1 INTERSECT SELECT ALL * FROM vt0 WHERE ((((('蚼') ISNULL)) NOT BETWEEN (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END) AND ((((vt0.c2, vt0.c0))<=((vt0.c0, x'')))))) LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (CAST(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END AS REAL));
SELECT * FROM vt0 WHERE (((CAST(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END AS REAL))AND(LIKELIHOOD(CAST(vt0.c1 AS BLOB), -891722830)))) LIMIT 0X1 INTERSECT SELECT ALL * FROM vt0 WHERE ((((('蚼') ISNULL)) NOT BETWEEN (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END) AND ((((vt0.c2, vt0.c0))<=((vt0.c0, x'')))))) LIMIT 0X1;
SELECT * FROM vt0 WHERE ((((CASE WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END, (+ (vt0.c2))))>=((((vt0.c0)>>(vt0.c2)), CASE WHEN vt0.c1 THEN vt0.c0 ELSE NULL END))));
SELECT DISTINCT * FROM vt0 WHERE ((((CASE WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END, (+ (vt0.c2))))>=((((vt0.c0)>>(vt0.c2)), CASE WHEN vt0.c1 THEN vt0.c0 ELSE NULL END)))) ORDER BY HEX(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END) ASC, ((((vt0.c2)IS(vt0.c1))) ISNULL) ASC  NULLS FIRST, ((vt0.c2)<>(CASE vt0.c1  WHEN x'' THEN vt0.c0 END)) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c2 AS INTEGER)) ORDER BY HEX(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END) ASC, ((((vt0.c2)IS(vt0.c1))) ISNULL) ASC  NULLS FIRST, ((vt0.c2)!=(CASE vt0.c1  WHEN x'' THEN vt0.c0 END));
SELECT * FROM vt0 WHERE ((((CASE WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END, (+ (vt0.c2))))>=((((vt0.c0)>>(vt0.c2)), CASE WHEN vt0.c1 THEN vt0.c0 ELSE NULL END))));
SELECT DISTINCT * FROM vt0 WHERE ((((CASE WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END, (+ (vt0.c2))))>=((((vt0.c0)>>(vt0.c2)), CASE WHEN vt0.c1 THEN vt0.c0 ELSE NULL END)))) ORDER BY HEX(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END) ASC, ((((vt0.c2)IS(vt0.c1))) ISNULL) ASC  NULLS FIRST, ((vt0.c2)<>(CASE vt0.c1  WHEN x'' THEN vt0.c0 END)) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c2 AS INTEGER)) ORDER BY HEX(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END) ASC, ((((vt0.c2)IS(vt0.c1))) ISNULL) ASC  NULLS FIRST, ((vt0.c2)!=(CASE vt0.c1  WHEN x'' THEN vt0.c0 END));
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c0))) BETWEEN ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c1)))) AND (MAX(vt0.c2, vt0.c2, vt0.c2, x'')))) ORDER BY ((((((vt0.c2)IS NOT(vt0.c2)))AND((NOT (vt0.c2)))))AND((((vt0.c0, vt0.c2)) BETWEEN ((vt0.c0, vt0.c1)) AND ((NULL, vt0.c2))))) ASC, ((((vt0.c2)LIKE(vt0.c0)))||((vt0.c2 IN ()))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c0))) BETWEEN ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c1)))) AND (MAX(vt0.c2, vt0.c2, vt0.c2, x''))))AND(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END COLLATE RTRIM))) ORDER BY ((((((((((NULL)OR(NULL)))OR(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))<((((vt0.c0))<((vt0.c2))))) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)*(vt0.c2)))>(CAST(vt0.c0 AS NUMERIC)))) ORDER BY ((((((((((NULL)OR(NULL)))OR(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))<((((vt0.c0))<((vt0.c2))))) ASC LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c0))) BETWEEN ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c1)))) AND (MAX(vt0.c2, vt0.c2, vt0.c2, x'')))) ORDER BY ((((((vt0.c2)IS NOT(vt0.c2)))AND((NOT (vt0.c2)))))AND((((vt0.c0, vt0.c2)) BETWEEN ((vt0.c0, vt0.c1)) AND ((NULL, vt0.c2))))) ASC, ((((vt0.c2)LIKE(vt0.c0)))||((vt0.c2 IN ()))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))AND(vt0.c0))) BETWEEN ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c1)))) AND (MAX(vt0.c2, vt0.c2, vt0.c2, x''))))AND(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 END COLLATE RTRIM))) ORDER BY ((((((((((NULL)OR(NULL)))OR(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))<((((vt0.c0))<((vt0.c2))))) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)*(vt0.c2)))>(CAST(vt0.c0 AS NUMERIC)))) ORDER BY ((((((((((NULL)OR(NULL)))OR(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))<((((vt0.c0))<((vt0.c2))))) ASC LIMIT 0;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((NOT (x'8570')));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ((((NOT (x'8570')))AND((vt0.c1 IN (((((((((0.5890935267980316)AND(vt0.c2)))OR(vt0.c0)))OR(vt0.c2)))OR(vt0.c0))))))) ORDER BY (+ ((vt0.c2 IN (vt0.c1, vt0.c0)))) DESC  NULLS FIRST, ((((((((((((vt0.c1)AND(vt0.c1)))OR('1705467419')))OR(x'8e5111')))OR(vt0.c2)))AND(NULL COLLATE RTRIM)))OR(((((((vt0.c0)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c1)))), x'0a' INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ((('-612100335')&(((vt0.c2)|(vt0.c2))))) ORDER BY (+ ((vt0.c2 IN (vt0.c1, vt0.c0)))) DESC  NULLS FIRST, ((((((((((((vt0.c1)AND(vt0.c1)))OR('1705467419')))OR(x'8e5111')))OR(vt0.c2)))AND(NULL COLLATE RTRIM)))OR(((((((vt0.c0)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c1)))), x'0a';
SELECT * FROM vt0 WHERE (((((((vt0.c1) ISNULL))OR(vt0.c1)))OR(((((x'2b')AND('&')))OR(vt0.c1))))) ORDER BY ((UPPER(DISTINCT vt0.c1)) NOTNULL) DESC;
SELECT * FROM vt0 WHERE (((((((vt0.c1) ISNULL))OR(vt0.c1)))OR(((((x'2b')AND('&')))OR(vt0.c1))))) ORDER BY ((UPPER(DISTINCT vt0.c1)) NOTNULL) DESC INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY ((UPPER(DISTINCT vt0.c1)) NOTNULL) DESC;
SELECT * FROM vt0 WHERE (((((((vt0.c1) ISNULL))OR(vt0.c1)))OR(((((x'2b')AND('&')))OR(vt0.c1))))) ORDER BY ((UPPER(DISTINCT vt0.c1)) NOTNULL) DESC;
SELECT * FROM vt0 WHERE (((((((vt0.c1) ISNULL))OR(vt0.c1)))OR(((((x'2b')AND('&')))OR(vt0.c1))))) ORDER BY ((UPPER(DISTINCT vt0.c1)) NOTNULL) DESC INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c2) ORDER BY ((UPPER(DISTINCT vt0.c1)) NOTNULL) DESC;
SELECT ALL * FROM vt0 WHERE (vt0.c1 COLLATE BINARY) ORDER BY 1.329406373E9;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1 COLLATE BINARY) ORDER BY 1.329406373E9;
SELECT ALL * FROM vt0 WHERE (vt0.c1 COLLATE BINARY) ORDER BY 1.329406373E9;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c1 COLLATE BINARY) ORDER BY 1.329406373E9;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((((((vt0.c0)AND('|L4')))OR(vt0.c2)))AND('-1880625023')))&((vt0.c1 IN ())))) ORDER BY CAST((vt0.c2 IN ()) AS TEXT)  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((((((vt0.c0)AND('|L4')))OR(vt0.c2)))AND('-1880625023')))&((vt0.c1 IN ())))) ORDER BY ((0x1d29feae) BETWEEN ((vt0.c2 IN (vt0.c1, vt0.c1))) AND (0.31854442659318283)) DESC  NULLS LAST, (((((vt0.c1, vt0.c1, vt0.c1, vt0.c2)) BETWEEN ((vt0.c0, vt0.c0, NULL, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c1))))OR(vt0.c0 COLLATE NOCASE)) ASC  NULLS LAST, '0', ((((LOWER(DISTINCT x''))AND(CASE vt0.c1  WHEN 0.6844250251021909 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END)))AND(((vt0.c1)IS(vt0.c2)))) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c0))<((vt0.c2))) IN ((((vt0.c2, x'e0', vt0.c1, vt0.c1))<((vt0.c2, vt0.c2, vt0.c1, vt0.c0))), ((vt0.c0)>>(vt0.c1))))) ORDER BY ((0x1d29feae) BETWEEN ((vt0.c2 IN (vt0.c1, vt0.c1))) AND (0.31854442659318283)) DESC  NULLS LAST, (((((vt0.c1, vt0.c1, vt0.c1, vt0.c2)) BETWEEN ((vt0.c0, vt0.c0, NULL, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c1))))OR(vt0.c0 COLLATE NOCASE)) ASC  NULLS LAST, '0', ((((LOWER(DISTINCT x''))AND(CASE vt0.c1  WHEN 0.6844250251021909 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END)))AND(((vt0.c1)IS(vt0.c2)))) LIMIT 0X0;
SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c1);
SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c1) ORDER BY (- (vt0.c2)) ASC  NULLS LAST, 'goiY}S' COLLATE NOCASE ASC  NULLS FIRST, CAST((vt0.c1 IN (vt0.c1)) AS NUMERIC)  NULLS LAST INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (((NULLIF(DISTINCT vt0.c1, vt0.c0)) IS FALSE)) ORDER BY (- (vt0.c2)) ASC  NULLS LAST, 'goiY}S' COLLATE NOCASE ASC  NULLS FIRST, CAST((vt0.c1 IN (vt0.c1)) AS NUMERIC)  NULLS LAST;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (CAST(vt0.c0 AS BLOB));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((CAST(vt0.c0 AS BLOB))AND((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c1)) IN ((vt0.c0 IN (vt0.c0)))))));
SELECT ALL * FROM vt0 WHERE ((CASE vt0.c0  WHEN vt0.c0 THEN NULL ELSE vt0.c2 END IN ((~ (vt0.c2)), vt0.c1)));
SELECT DISTINCT * FROM vt0 WHERE ((((CASE vt0.c0  WHEN vt0.c0 THEN NULL ELSE vt0.c2 END IN ((~ (vt0.c2)))))AND((((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)) IN ())))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2) IS FALSE))||(CASE WHEN NULL THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN 0.020539919617684976 THEN vt0.c2 END)));
SELECT ALL * FROM vt0 WHERE ((CASE vt0.c0  WHEN vt0.c0 THEN NULL ELSE vt0.c2 END IN ((~ (vt0.c2)), vt0.c1)));
SELECT DISTINCT * FROM vt0 WHERE ((((CASE vt0.c0  WHEN vt0.c0 THEN NULL ELSE vt0.c2 END IN ((~ (vt0.c2)))))AND((((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)) IN ())))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2) IS FALSE))||(CASE WHEN NULL THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN 0.020539919617684976 THEN vt0.c2 END)));
SELECT ALL * FROM vt0 WHERE (TYPEOF(DISTINCT ((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)))) ORDER BY (((vt0.c0, vt0.c2)) NOT BETWEEN ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c0, vt0.c0, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c0))))) AND ((((vt0.c0)OR(vt0.c1)), ((vt0.c0)/(vt0.c0))))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (TYPEOF(DISTINCT ((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)))) ORDER BY (((vt0.c0, vt0.c2)) NOT BETWEEN ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c0, vt0.c0, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c0))))) AND ((((vt0.c0)OR(vt0.c1)), ((vt0.c0)/(vt0.c0))))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST((~ (vt0.c0)) AS REAL)) ORDER BY (((vt0.c0, vt0.c2)) NOT BETWEEN ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c0, vt0.c0, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c0))))) AND ((((vt0.c0)OR(vt0.c1)), ((vt0.c0)/(vt0.c0))))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (TYPEOF(DISTINCT ((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)))) ORDER BY (((vt0.c0, vt0.c2)) NOT BETWEEN ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c0, vt0.c0, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c0))))) AND ((((vt0.c0)OR(vt0.c1)), ((vt0.c0)/(vt0.c0))))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (TYPEOF(DISTINCT ((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)))) ORDER BY (((vt0.c0, vt0.c2)) NOT BETWEEN ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c0, vt0.c0, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c0))))) AND ((((vt0.c0)OR(vt0.c1)), ((vt0.c0)/(vt0.c0))))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST((~ (vt0.c0)) AS REAL)) ORDER BY (((vt0.c0, vt0.c2)) NOT BETWEEN ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END, (((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c0, vt0.c0, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c0))))) AND ((((vt0.c0)OR(vt0.c1)), ((vt0.c0)/(vt0.c0))))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((CASE 0.5733124233159774  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END)OR((vt0.c1 IN ()))))AND(x'ccc7')));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((CASE 0.5733124233159774  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END)OR((vt0.c1 IN ()))))AND(x'ccc7')));
SELECT COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 END IN ()) DESC  NULLS FIRST, ((((vt0.c1)|(vt0.c0))) NOT BETWEEN (CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN x'' THEN vt0.c2 ELSE vt0.c1 END) AND ((((vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c0)))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY CAST((((vt0.c2))>=((vt0.c2))) AS BLOB) DESC LIMIT 0X2;
SELECT ALL * FROM vt0 WHERE (((((((((((((((CASE WHEN NULL THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END)AND(vt0.c1)))OR(CAST('634127358' AS TEXT))))OR(CAST(vt0.c0 AS NUMERIC))))OR(((((vt0.c1)AND(vt0.c2)))AND(vt0.c0)))))OR(CAST(vt0.c2 AS BLOB))))OR(CAST(vt0.c1 AS INTEGER))))OR(((vt0.c1) NOTNULL)))) ORDER BY vt0.c1 DESC  NULLS LAST, vt0.c2;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((((((((CASE WHEN NULL THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END)AND(vt0.c1)))OR(CAST('634127358' AS TEXT))))OR(CAST(vt0.c0 AS NUMERIC))))OR(((((vt0.c1)AND(vt0.c2)))AND(vt0.c0)))))OR(CAST(vt0.c2 AS BLOB))))OR(CAST(vt0.c1 AS INTEGER))))OR(((vt0.c1) NOTNULL))))AND(x''))) ORDER BY UPPER(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END) DESC, ((((vt0.c1) NOT BETWEEN (vt0.c0) AND (NULL)))AND(vt0.c0)) ASC LIMIT 5;
SELECT ALL * FROM vt0 WHERE (((((((((((((((CASE WHEN NULL THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END)AND(vt0.c1)))OR(CAST('634127358' AS TEXT))))OR(CAST(vt0.c0 AS NUMERIC))))OR(((((vt0.c1)AND(vt0.c2)))AND(vt0.c0)))))OR(CAST(vt0.c2 AS BLOB))))OR(CAST(vt0.c1 AS INTEGER))))OR(((vt0.c1) NOTNULL)))) ORDER BY vt0.c1 DESC  NULLS LAST, vt0.c2;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((((((((CASE WHEN NULL THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END)AND(vt0.c1)))OR(CAST('634127358' AS TEXT))))OR(CAST(vt0.c0 AS NUMERIC))))OR(((((vt0.c1)AND(vt0.c2)))AND(vt0.c0)))))OR(CAST(vt0.c2 AS BLOB))))OR(CAST(vt0.c1 AS INTEGER))))OR(((vt0.c1) NOTNULL))))AND(x''))) ORDER BY UPPER(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END) DESC, ((((vt0.c1) NOT BETWEEN (vt0.c0) AND (NULL)))AND(vt0.c0)) ASC LIMIT 5;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1, vt0.c0)) BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c0, vt0.c2)))) BETWEEN (TRIM(DISTINCT vt0.c2, vt0.c1)) AND (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))OR(vt0.c1))))) ORDER BY ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY  NULLS FIRST, vt0.c1  NULLS FIRST, ((((vt0.c2) ISNULL))OR(((vt0.c1) ISNULL))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((((((vt0.c1, vt0.c0)) BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c0, vt0.c2)))) BETWEEN (TRIM(DISTINCT vt0.c2, vt0.c1)) AND (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))OR(vt0.c1)))))AND(((vt0.c0) ISNULL) COLLATE BINARY))) ORDER BY CAST(vt0.c1 COLLATE BINARY AS REAL)  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c1, vt0.c0)) BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c0, vt0.c2)))) BETWEEN (TRIM(DISTINCT vt0.c2, vt0.c1)) AND (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))OR(vt0.c1))))) ORDER BY ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY  NULLS FIRST, vt0.c1  NULLS FIRST, ((((vt0.c2) ISNULL))OR(((vt0.c1) ISNULL))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((((((vt0.c1, vt0.c0)) BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c0, vt0.c2)))) BETWEEN (TRIM(DISTINCT vt0.c2, vt0.c1)) AND (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))OR(vt0.c1)))))AND(((vt0.c0) ISNULL) COLLATE BINARY))) ORDER BY CAST(vt0.c1 COLLATE BINARY AS REAL)  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c2)) BETWEEN ((((vt0.c2) BETWEEN (887480835) AND (vt0.c2)))) AND ((((vt0.c1) IS FALSE)))));
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((vt0.c2)) BETWEEN ((((vt0.c2) BETWEEN (887480835) AND (vt0.c2)))) AND ((((vt0.c1) IS FALSE)))))AND(vt0.c2))) ORDER BY NULLIF(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 END, (+ (vt0.c0))) ASC, (CAST(vt0.c1 AS REAL) IN ()) DESC  NULLS FIRST, (((vt0.c1)/(vt0.c1)) IN ()) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (CAST(vt0.c0 AS NUMERIC) COLLATE RTRIM) ORDER BY NULLIF(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 END, (+ (vt0.c0))) ASC, (CAST(vt0.c1 AS REAL) IN ()) DESC  NULLS FIRST, (((vt0.c1)/(vt0.c1)) IN ()) DESC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt0 WHERE ((vt0.c1 IN ()));
SELECT DISTINCT * FROM vt0 WHERE ((vt0.c1 IN ())) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c2 COLLATE BINARY) LIMIT 0X0;
SELECT * FROM vt0 WHERE ((vt0.c1 IN ()));
SELECT DISTINCT * FROM vt0 WHERE ((vt0.c1 IN ())) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c2 COLLATE BINARY) LIMIT 0X0;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((CASE vt0.c2  WHEN '-852679607' THEN vt0.c2 ELSE vt0.c2 END)==(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((CASE vt0.c2  WHEN '-852679607' THEN vt0.c2 ELSE vt0.c2 END)==(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2))))) LIMIT 0X1 INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE ((((x'04', vt0.c2)) NOT BETWEEN ((((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c1)), (- (vt0.c0)))) AND (((('634127358') NOT NULL), ((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))) LIMIT 0x1;
SELECT MIN(vt0.c2) FROM vt0 WHERE (((json_extract(vt0.c0, vt0.c0, vt0.c2)) BETWEEN (vt0.c2) AND ((~ (vt0.c2))))) ORDER BY SUBSTR(((((vt0.c2)OR(vt0.c1)))AND(vt0.c2)), vt0.c1), (~ (CAST(vt0.c1 AS NUMERIC))) DESC  NULLS LAST;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((json_extract(vt0.c0, vt0.c0, vt0.c2)) BETWEEN (vt0.c2) AND ((~ (vt0.c2))))) ORDER BY '778358031'  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((((vt0.c0)<(vt0.c2)))) AND ((CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c0 END)))) ORDER BY '778358031'  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (NULLIF(DISTINCT ((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c2)), (((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c2, vt0.c0)))));
SELECT * FROM vt0 WHERE (((NULLIF(DISTINCT ((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c2)), (((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c2, vt0.c0)))))AND(((vt0.c2)<=(vt0.c2)) COLLATE NOCASE))) ORDER BY ((((((vt0.c0)OR(vt0.c2)))AND(vt0.c0))) BETWEEN (((vt0.c0) IS FALSE)) AND (CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 END))  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 WHERE (((TRIM(vt0.c0, vt0.c2)) BETWEEN (vt0.c2 COLLATE BINARY) AND (CASE WHEN vt0.c1 THEN vt0.c1 END))) ORDER BY ((((((vt0.c0)OR(vt0.c2)))AND(vt0.c0))) BETWEEN (((vt0.c0) IS FALSE)) AND (CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 END))  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (NULLIF(DISTINCT ((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c2)), (((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c2, vt0.c0)))));
SELECT * FROM vt0 WHERE (((NULLIF(DISTINCT ((((((vt0.c2)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c2)), (((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c2, vt0.c0)))))AND(((vt0.c2)<=(vt0.c2)) COLLATE NOCASE))) ORDER BY ((((((vt0.c0)OR(vt0.c2)))AND(vt0.c0))) BETWEEN (((vt0.c0) IS FALSE)) AND (CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 END))  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 WHERE (((TRIM(vt0.c0, vt0.c2)) BETWEEN (vt0.c2 COLLATE BINARY) AND (CASE WHEN vt0.c1 THEN vt0.c1 END))) ORDER BY ((((((vt0.c0)OR(vt0.c2)))AND(vt0.c0))) BETWEEN (((vt0.c0) IS FALSE)) AND (CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 END))  NULLS LAST LIMIT 0x1;
SELECT MAX(vt0.c2) FROM vt0 WHERE (NULL COLLATE NOCASE) ORDER BY vt0.c2  NULLS LAST, vt0.c1 ASC;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((NULL COLLATE NOCASE)AND((((vt0.c1, vt0.c1, vt0.c1)) NOT BETWEEN ((vt0.c0 COLLATE RTRIM, CASE vt0.c2  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END, ((((vt0.c1)AND(vt0.c0)))AND(vt0.c1)))) AND ((((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c2)))OR('<_H9dfj
')))AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c0)), ((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c1)), TYPEOF(vt0.c1))))))) ORDER BY vt0.c2  NULLS LAST, vt0.c1 ASC LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((vt0.c1) NOT BETWEEN (CAST('''' AS TEXT)) AND (CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END))) ORDER BY vt0.c2  NULLS LAST, vt0.c1 ASC LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((vt0.c2 IN ()));
SELECT * FROM vt0 WHERE ((vt0.c2 IN ())) ORDER BY CASE CAST(vt0.c2 AS NUMERIC)  WHEN (0Xffffffffd050f084 IN ()) THEN vt0.c2 COLLATE RTRIM END ASC, ((((((vt0.c2))<((vt0.c1)))))>((vt0.c0 COLLATE NOCASE))) ASC  NULLS FIRST, ((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))OR('-1500966859'))) ISNULL) DESC LIMIT 3 INTERSECT SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY CASE CAST(vt0.c2 AS NUMERIC)  WHEN (-800001916 IN ()) THEN vt0.c2 COLLATE RTRIM END ASC, ((((((vt0.c2))<((vt0.c1)))))>((vt0.c0 COLLATE NOCASE))) ASC  NULLS FIRST, ((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))OR('-1500966859'))) ISNULL) DESC LIMIT 3;
SELECT ALL * FROM vt0 WHERE ((vt0.c2 IN ()));
SELECT * FROM vt0 WHERE ((vt0.c2 IN ())) ORDER BY CASE CAST(vt0.c2 AS NUMERIC)  WHEN (0Xffffffffd050f084 IN ()) THEN vt0.c2 COLLATE RTRIM END ASC, ((((((vt0.c2))<((vt0.c1)))))>((vt0.c0 COLLATE NOCASE))) ASC  NULLS FIRST, ((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))OR('-1500966859'))) ISNULL) DESC LIMIT 3 INTERSECT SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY CASE CAST(vt0.c2 AS NUMERIC)  WHEN (-800001916 IN ()) THEN vt0.c2 COLLATE RTRIM END ASC, ((((((vt0.c2))<((vt0.c1)))))>((vt0.c0 COLLATE NOCASE))) ASC  NULLS FIRST, ((((((((vt0.c1)AND(vt0.c1)))AND(vt0.c0)))OR('-1500966859'))) ISNULL) DESC LIMIT 3;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2))<=((vt0.c1))) COLLATE RTRIM COLLATE RTRIM);
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c2))==((vt0.c1))) COLLATE RTRIM COLLATE RTRIM)AND(((vt0.c2)>(vt0.c1)) COLLATE NOCASE))) LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2))<=((vt0.c1))) COLLATE RTRIM COLLATE RTRIM);
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c2))==((vt0.c1))) COLLATE RTRIM COLLATE RTRIM)AND(((vt0.c2)>(vt0.c1)) COLLATE NOCASE))) LIMIT 0X1;
SELECT * FROM vt0 WHERE (((((vt0.c2)<=(vt0.c0)))GLOB(((vt0.c0)>=(vt0.c1))))) ORDER BY ((CAST(vt0.c2 AS INTEGER))GLOB((- (vt0.c0))))  NULLS LAST, ((((((((((((((x'7b')AND('298697454')))OR(((vt0.c2)+(vt0.c1)))))OR(UNLIKELY(vt0.c0))))AND(MIN(vt0.c1, vt0.c2, vt0.c2))))OR((((vt0.c1, vt0.c0))<((vt0.c2, vt0.c2))))))OR(((vt0.c2) IS FALSE))))AND((((vt0.c1))<>((vt0.c2))))) DESC;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)<=(vt0.c0)))GLOB(((vt0.c0)>=(vt0.c1))))) ORDER BY ((('R')/(vt0.c2)) IN (((vt0.c1) NOTNULL)))  NULLS LAST, ((vt0.c2)<(vt0.c2)) COLLATE BINARY COLLATE BINARY DESC, (((vt0.c2)) BETWEEN ((((vt0.c2) NOTNULL))) AND ((vt0.c2))) ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((vt0.c2)<=(vt0.c0)))GLOB(((vt0.c0)>=(vt0.c1))))) ORDER BY ((CAST(vt0.c2 AS INTEGER))GLOB((- (vt0.c0))))  NULLS LAST, ((((((((((((((x'7b')AND('298697454')))OR(((vt0.c2)+(vt0.c1)))))OR(UNLIKELY(vt0.c0))))AND(MIN(vt0.c1, vt0.c2, vt0.c2))))OR((((vt0.c1, vt0.c0))<((vt0.c2, vt0.c2))))))OR(((vt0.c2) IS FALSE))))AND((((vt0.c1))<>((vt0.c2))))) DESC;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)<=(vt0.c0)))GLOB(((vt0.c0)>=(vt0.c1))))) ORDER BY ((('R')/(vt0.c2)) IN (((vt0.c1) NOTNULL)))  NULLS LAST, ((vt0.c2)<(vt0.c2)) COLLATE BINARY COLLATE BINARY DESC, (((vt0.c2)) BETWEEN ((((vt0.c2) NOTNULL))) AND ((vt0.c2))) ASC  NULLS FIRST;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((((((vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c1, vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c2))))/(vt0.c2))) ORDER BY ((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END) IS FALSE), UNLIKELY(((vt0.c2)|(0.037071199408750255)))  NULLS LAST;
SELECT MAX(vt0.c1) FROM vt0 WHERE ((((((((vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c1, vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c2))))/(vt0.c2)))AND(vt0.c0))) ORDER BY ((UPPER(DISTINCT vt0.c2))IS NOT(((vt0.c2)=(vt0.c2)))) DESC, (NOT ((((vt0.c2, x'7ceb77', vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c0, vt0.c2)) AND ((vt0.c1, vt0.c0, vt0.c2))))) ASC  NULLS LAST LIMIT 0x2;
SELECT * FROM vt0 WHERE (((((vt0.c0)>(vt0.c0))) BETWEEN (vt0.c1 COLLATE NOCASE) AND (CAST(vt0.c1 AS TEXT))));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)>(vt0.c0))) BETWEEN (vt0.c1 COLLATE NOCASE) AND (CAST(vt0.c1 AS TEXT))))AND('z'))) ORDER BY vt0.c2 ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((CAST('H6WONd' AS INTEGER))!=((+ (vt0.c2))))) ORDER BY vt0.c2 ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((((vt0.c0)>(vt0.c0))) BETWEEN (vt0.c1 COLLATE NOCASE) AND (CAST(vt0.c1 AS TEXT))));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)>(vt0.c0))) BETWEEN (vt0.c1 COLLATE NOCASE) AND (CAST(vt0.c1 AS TEXT))))AND('z'))) ORDER BY vt0.c2 ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((CAST('H6WONd' AS INTEGER))!=((+ (vt0.c2))))) ORDER BY vt0.c2 ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2) NOT NULL))OR((~ (vt0.c2)))));
SELECT * FROM vt0 WHERE (((((((vt0.c2) NOT NULL))OR((~ (vt0.c2)))))AND((((('-819624949')AND(vt0.c1)))OR((vt0.c1 IN ())))))) ORDER BY '' COLLATE NOCASE  NULLS LAST, ((((vt0.c1)*(vt0.c2)))+((((vt0.c1)) BETWEEN (('37pi3
!Y')) AND ((vt0.c2)))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c2) NOT NULL))OR((~ (vt0.c2)))));
SELECT * FROM vt0 WHERE (((((((vt0.c2) NOT NULL))OR((~ (vt0.c2)))))AND((((('-819624949')AND(vt0.c1)))OR((vt0.c1 IN ())))))) ORDER BY '' COLLATE NOCASE  NULLS LAST, ((((vt0.c1)*(vt0.c2)))+((((vt0.c1)) BETWEEN (('37pi3
!Y')) AND ((vt0.c2)))));
SELECT * FROM vt0 WHERE (((((NULL)IS(vt0.c1))) NOT BETWEEN (((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0))) AND ((((-1.9675406E9)) BETWEEN ((vt0.c2)) AND ((vt0.c1))))));
SELECT * FROM vt0 WHERE (((((NULL)IS(vt0.c1))) NOT BETWEEN (((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0))) AND ((((-1.9675406E9)) BETWEEN ((vt0.c2)) AND ((vt0.c1)))))) ORDER BY (((((vt0.c1)<=(NULL)), (+ (vt0.c0))))<=((vt0.c1, vt0.c1))) ASC, ((ROUND(vt0.c0, vt0.c2)) IS FALSE)  NULLS LAST, COALESCE(LIKE(vt0.c2, vt0.c1, 'M'), ((vt0.c2) NOT NULL)) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((((NULL)IS(vt0.c1))) NOT BETWEEN (((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0))) AND ((((-1.9675406E9)) BETWEEN ((vt0.c2)) AND ((vt0.c1))))));
SELECT * FROM vt0 WHERE (((((NULL)IS(vt0.c1))) NOT BETWEEN (((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0))) AND ((((-1.9675406E9)) BETWEEN ((vt0.c2)) AND ((vt0.c1)))))) ORDER BY (((((vt0.c1)<=(NULL)), (+ (vt0.c0))))<=((vt0.c1, vt0.c1))) ASC, ((ROUND(vt0.c0, vt0.c2)) IS FALSE)  NULLS LAST, COALESCE(LIKE(vt0.c2, vt0.c1, 'M'), ((vt0.c2) NOT NULL)) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c2 COLLATE NOCASE THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END WHEN vt0.c0 THEN '1630574481' WHEN CASE vt0.c1  WHEN vt0.c0 THEN 0.690633740198386 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END THEN ((vt0.c2) NOT NULL) WHEN (- (vt0.c1)) THEN CAST(vt0.c0 AS REAL) END) ORDER BY CASE WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN vt0.c1 COLLATE NOCASE WHEN vt0.c0 THEN CAST(vt0.c0 AS TEXT) WHEN ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c0)) THEN ((vt0.c1) NOT NULL) END ASC, ((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1))) BETWEEN (((NULL) ISNULL)) AND ((+ (vt0.c1)))) ASC, vt0.c0  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c2 COLLATE NOCASE THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END WHEN vt0.c0 THEN '1630574481' WHEN CASE vt0.c1  WHEN vt0.c0 THEN 0.690633740198386 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END THEN ((vt0.c2) NOT NULL) WHEN (- (vt0.c1)) THEN CAST(vt0.c0 AS REAL) END)AND(((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2))) NOT NULL)))) ORDER BY ((((vt0.c0) IS TRUE))IS((NOT (vt0.c1)))) DESC  NULLS LAST, ((CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END) IS TRUE) ASC, ((((vt0.c0)GLOB(vt0.c2)))<<(-1408985292)) DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c2 COLLATE NOCASE THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END WHEN vt0.c0 THEN '1630574481' WHEN CASE vt0.c1  WHEN vt0.c0 THEN 0.690633740198386 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END THEN ((vt0.c2) NOT NULL) WHEN (- (vt0.c1)) THEN CAST(vt0.c0 AS REAL) END) ORDER BY CASE WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN vt0.c1 COLLATE NOCASE WHEN vt0.c0 THEN CAST(vt0.c0 AS TEXT) WHEN ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c0)) THEN ((vt0.c1) NOT NULL) END ASC, ((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1))) BETWEEN (((NULL) ISNULL)) AND ((+ (vt0.c1)))) ASC, vt0.c0  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c2 COLLATE NOCASE THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END WHEN vt0.c0 THEN '1630574481' WHEN CASE vt0.c1  WHEN vt0.c0 THEN 0.690633740198386 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END THEN ((vt0.c2) NOT NULL) WHEN (- (vt0.c1)) THEN CAST(vt0.c0 AS REAL) END)AND(((((((vt0.c1)AND(vt0.c2)))AND(vt0.c2))) NOT NULL)))) ORDER BY ((((vt0.c0) IS TRUE))IS((NOT (vt0.c1)))) DESC  NULLS LAST, ((CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END) IS TRUE) ASC, ((((vt0.c0)GLOB(vt0.c2)))<<(-1408985292)) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (((vt0.c0)>(vt0.c2))) ORDER BY ((vt0.c1) BETWEEN (vt0.c2) AND (((vt0.c1) IS TRUE)))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((vt0.c0)>(vt0.c2))) ORDER BY CASE WHEN CAST(vt0.c1 AS INTEGER) THEN (((vt0.c2))>=((vt0.c2))) WHEN ((vt0.c1)&(vt0.c2)) THEN NULL COLLATE RTRIM WHEN (vt0.c0 IN (vt0.c2, 0.21657750830435007)) THEN x'02' END;
SELECT * FROM vt0 WHERE (((vt0.c0)>(vt0.c2))) ORDER BY ((vt0.c1) BETWEEN (vt0.c2) AND (((vt0.c1) IS TRUE)))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((vt0.c0)>(vt0.c2))) ORDER BY CASE WHEN CAST(vt0.c1 AS INTEGER) THEN (((vt0.c2))>=((vt0.c2))) WHEN ((vt0.c1)&(vt0.c2)) THEN NULL COLLATE RTRIM WHEN (vt0.c0 IN (vt0.c2, 0.21657750830435007)) THEN x'02' END;
SELECT COUNT(*) FROM vt0 WHERE (LIKELIHOOD(DISTINCT '7e' COLLATE RTRIM, (vt0.c1 IN (vt0.c0)))) ORDER BY (vt0.c2 IN (((vt0.c1)=(vt0.c0)))) DESC  NULLS FIRST, ((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (json_insert(vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c1 IN (vt0.c1))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((LIKELIHOOD(DISTINCT '7e' COLLATE RTRIM, (vt0.c1 IN (vt0.c0))))AND(LOWER(ABS(DISTINCT vt0.c1))))) ORDER BY (vt0.c2 IN (((vt0.c1)=(vt0.c0)))) DESC  NULLS FIRST, ((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (json_insert(vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c1 IN (vt0.c1)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY (vt0.c2 IN (((vt0.c1)=(vt0.c0)))) DESC  NULLS FIRST, ((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (json_insert(vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c1 IN (vt0.c1))));
SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS BLOB)) ORDER BY (((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)) IN ())  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS BLOB))AND(CAST((((vt0.c0, vt0.c1))<>((vt0.c0, vt0.c0))) AS REAL)))) ORDER BY ((((((vt0.c0)AND('')))AND(vt0.c0)))OR(vt0.c2)) COLLATE RTRIM DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((((vt0.c0)AND('')))AND(vt0.c0)))OR(vt0.c2)) COLLATE RTRIM DESC;
SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS BLOB)) ORDER BY (((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)) IN ())  NULLS LAST;
SELECT * FROM vt0 WHERE (((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))OR(vt0.c1)))&((vt0.c1 IN ('d/%4Rm Bf', vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))OR(vt0.c1)))&((vt0.c1 IN ('d/%4Rm Bf', vt0.c0)))))AND(CASE ((vt0.c1)LIKE(vt0.c1))  WHEN ((vt0.c2) NOT NULL) THEN (~ (vt0.c0)) ELSE CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END END))) ORDER BY COALESCE(((2.1801391E7)IS NOT(vt0.c1)), ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)), CAST(vt0.c1 AS INTEGER)), (vt0.c2 IN (vt0.c1)) COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2 IN (vt0.c1)), (vt0.c2 IN (vt0.c1))))<=((vt0.c2, ('-2077038808' IN (vt0.c2)))))) ORDER BY COALESCE(((2.1801391E7)IS NOT(vt0.c1)), ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)), CAST(vt0.c1 AS INTEGER)), (vt0.c2 IN (vt0.c1)) COLLATE NOCASE;
SELECT * FROM vt0 WHERE (((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))OR(vt0.c1)))&((vt0.c1 IN ('d/%4Rm Bf', vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))OR(vt0.c1)))&((vt0.c1 IN ('d/%4Rm Bf', vt0.c0)))))AND(CASE ((vt0.c1)LIKE(vt0.c1))  WHEN ((vt0.c2) NOT NULL) THEN (~ (vt0.c0)) ELSE CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END END))) ORDER BY COALESCE(((2.1801391E7)IS NOT(vt0.c1)), ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)), CAST(vt0.c1 AS INTEGER)), (vt0.c2 IN (vt0.c1)) COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2 IN (vt0.c1)), (vt0.c2 IN (vt0.c1))))<=((vt0.c2, ('-2077038808' IN (vt0.c2)))))) ORDER BY COALESCE(((2.1801391E7)IS NOT(vt0.c1)), ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)), CAST(vt0.c1 AS INTEGER)), (vt0.c2 IN (vt0.c1)) COLLATE NOCASE;
SELECT ALL * FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM)>=(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY vt0.c1 DESC, CAST(((vt0.c0)OR(vt0.c2)) AS NUMERIC) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM)>=(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY ((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))-(((vt0.c1)%(0.7431055384992047)))) ASC, CAST(0x46d807e COLLATE BINARY AS TEXT) LIMIT 0X0 INTERSECT SELECT * FROM vt0 WHERE (CHANGES()) ORDER BY ((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))-(((vt0.c1)%(0.7431055384992047)))) ASC, CAST(0X46d807e COLLATE BINARY AS TEXT) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM)>=(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY vt0.c1 DESC, CAST(((vt0.c0)OR(vt0.c2)) AS NUMERIC) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c1 COLLATE RTRIM)>=(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY ((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))-(((vt0.c1)%(0.7431055384992047)))) ASC, CAST(0x46d807e COLLATE BINARY AS TEXT) LIMIT 0X0 INTERSECT SELECT * FROM vt0 WHERE (CHANGES()) ORDER BY ((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))-(((vt0.c1)%(0.7431055384992047)))) ASC, CAST(0X46d807e COLLATE BINARY AS TEXT) LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (vt0.c2) ORDER BY ((UPPER(vt0.c1))IS NOT(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END)), 0.3692665542350029 ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c2)AND(((x'') ISNULL)))) ORDER BY (((LIKE(vt0.c2, vt0.c0, '*'), CASE WHEN vt0.c0 THEN vt0.c2 END))<=((vt0.c0, ((vt0.c2)&(NULL)))))  NULLS FIRST, ((((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0)))-(((vt0.c0) ISNULL)))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((vt0.c1) IS FALSE))IS NOT(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c1) IS FALSE))IS NOT(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)))))AND(CAST(CASE WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END AS REAL)))) ORDER BY ((((((((0.5293511575017714)AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c0)))>=((((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c2, NULL)) AND ((vt0.c2, '0.42393097764992516')))))  NULLS LAST, CASE vt0.c2 COLLATE NOCASE  WHEN CAST(vt0.c1 AS REAL) THEN vt0.c0 COLLATE NOCASE WHEN ((vt0.c1)%(vt0.c1)) THEN (((vt0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c1))) WHEN (- (vt0.c2)) THEN vt0.c1 WHEN (((vt0.c2, vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2, vt0.c0)) AND ((vt0.c0, vt0.c1, vt0.c2))) THEN ((vt0.c2)||(vt0.c0)) ELSE '8' END  NULLS LAST LIMIT 0X2;
SELECT * FROM vt0 WHERE (((((vt0.c1) IS FALSE))IS NOT(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c1) IS FALSE))IS NOT(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)))))AND(CAST(CASE WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END AS REAL)))) ORDER BY ((((((((0.5293511575017714)AND(vt0.c1)))OR(vt0.c2)))OR(vt0.c0)))>=((((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c2, NULL)) AND ((vt0.c2, '0.42393097764992516')))))  NULLS LAST, CASE vt0.c2 COLLATE NOCASE  WHEN CAST(vt0.c1 AS REAL) THEN vt0.c0 COLLATE NOCASE WHEN ((vt0.c1)%(vt0.c1)) THEN (((vt0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c1))) WHEN (- (vt0.c2)) THEN vt0.c1 WHEN (((vt0.c2, vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2, vt0.c0)) AND ((vt0.c0, vt0.c1, vt0.c2))) THEN ((vt0.c2)||(vt0.c0)) ELSE '8' END  NULLS LAST LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt0 WHERE (NULL) ORDER BY ((((vt0.c1)+(vt0.c0))) NOT BETWEEN (NULL) AND (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))) ASC;
SELECT COUNT(*) FROM vt0 WHERE (NULL) ORDER BY ((((vt0.c1)+(vt0.c0))) NOT BETWEEN (NULL) AND (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))) ASC LIMIT 2 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((((+ (vt0.c2))) ISNULL)) ORDER BY ((((vt0.c1)+(vt0.c0))) NOT BETWEEN (NULL) AND (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))) ASC LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((+ (((((((((vt0.c1)AND(x'')))OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))));
SELECT * FROM vt0 WHERE ((((+ (((((((((vt0.c1)AND(x'')))OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))))AND((~ (((((vt0.c0)OR(vt0.c0)))AND(vt0.c1))))))) ORDER BY CASE vt0.c1  WHEN vt0.c2 THEN 'apr' WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END COLLATE BINARY, (((((vt0.c0, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1, vt0.c1, NULL)) AND ((x'35a4', vt0.c1, vt0.c2, vt0.c1))))<>(vt0.c0)) ASC INTERSECT SELECT * FROM vt0 WHERE (CAST(((1338291693) BETWEEN (vt0.c1) AND (vt0.c2)) AS NUMERIC)) ORDER BY CASE vt0.c1  WHEN vt0.c2 THEN 'apr' WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END COLLATE BINARY, (((((vt0.c0, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1, vt0.c1, NULL)) AND ((x'35a4', vt0.c1, vt0.c2, vt0.c1))))<>(vt0.c0)) ASC;
SELECT ALL * FROM vt0 WHERE ((+ (((((((((vt0.c1)AND(x'')))OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))));
SELECT * FROM vt0 WHERE ((((+ (((((((((vt0.c1)AND(x'')))OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))))AND((~ (((((vt0.c0)OR(vt0.c0)))AND(vt0.c1))))))) ORDER BY CASE vt0.c1  WHEN vt0.c2 THEN 'apr' WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END COLLATE BINARY, (((((vt0.c0, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1, vt0.c1, NULL)) AND ((x'35a4', vt0.c1, vt0.c2, vt0.c1))))<>(vt0.c0)) ASC INTERSECT SELECT * FROM vt0 WHERE (CAST(((1338291693) BETWEEN (vt0.c1) AND (vt0.c2)) AS NUMERIC)) ORDER BY CASE vt0.c1  WHEN vt0.c2 THEN 'apr' WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END COLLATE BINARY, (((((vt0.c0, vt0.c0, vt0.c1, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1, vt0.c1, NULL)) AND ((x'35a4', vt0.c1, vt0.c2, vt0.c1))))<>(vt0.c0)) ASC;
SELECT * FROM vt0 WHERE ((- (x'55'))) ORDER BY NULL DESC, (((((((((('C')OR(x'78')))OR(vt0.c0)))AND(vt0.c2)))OR(vt0.c1)))<>(TRIM(vt0.c1, vt0.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((- (x'55'))) ORDER BY ((CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END) BETWEEN (CASE vt0.c2  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END) AND (CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN NULL WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END)) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((- (x'55'))) ORDER BY NULL DESC, (((((((((('C')OR(x'78')))OR(vt0.c0)))AND(vt0.c2)))OR(vt0.c1)))<>(TRIM(vt0.c1, vt0.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((- (x'55'))) ORDER BY ((CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END) BETWEEN (CASE vt0.c2  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END) AND (CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN NULL WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END)) DESC  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((((+ (vt0.c1)))AND(((vt0.c0) ISNULL))))OR(((vt0.c0)OR(vt0.c0))))) ORDER BY ((vt0.c1)<=(vt0.c1)) COLLATE NOCASE, (((vt0.c1, vt0.c0)) BETWEEN ((((vt0.c1)*(vt0.c2)), 0.43653007467692306)) AND ((vt0.c0, ((vt0.c0) NOT BETWEEN ('1812974822') AND (vt0.c2)))))  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((+ (vt0.c1)))AND(((vt0.c0) ISNULL))))OR(((vt0.c0)OR(vt0.c0))))) ORDER BY CAST(CAST(vt0.c2 AS REAL) AS INTEGER) DESC, vt0.c0  NULLS LAST, CAST(((vt0.c0)>>(vt0.c0)) AS BLOB) DESC;
SELECT * FROM vt0 WHERE (TYPEOF(DISTINCT (((vt0.c0))<=((vt0.c1)))));
SELECT * FROM vt0 WHERE (((TYPEOF(DISTINCT (((vt0.c0))<=((vt0.c1)))))AND(vt0.c1 COLLATE BINARY))) ORDER BY CAST(CAST(vt0.c0 AS BLOB) AS INTEGER) ASC;
SELECT * FROM vt0 WHERE (TYPEOF(DISTINCT (((vt0.c0))<=((vt0.c1)))));
SELECT * FROM vt0 WHERE (((TYPEOF(DISTINCT (((vt0.c0))<=((vt0.c1)))))AND(vt0.c1 COLLATE BINARY))) ORDER BY CAST(CAST(vt0.c0 AS BLOB) AS INTEGER) ASC;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (vt0.c2) ORDER BY (((NULL IN (vt0.c0, vt0.c2)))+((0.6951671214147984 IN (vt0.c2)))) ASC  NULLS LAST, (((CAST(vt0.c1 AS NUMERIC)))==(((((x'', vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c1, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c1)))))) DESC  NULLS LAST;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (vt0.c2) ORDER BY (((NULL IN (vt0.c0, vt0.c2)))+((0.6951671214147984 IN (vt0.c2)))) ASC  NULLS LAST, (((CAST(vt0.c1 AS NUMERIC)))=(((((x'', vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c1, vt0.c1)) AND ((vt0.c2, vt0.c0, vt0.c1)))))) DESC  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (NULL);
SELECT MIN(vt0.c0) FROM vt0 WHERE (NULL);
SELECT MIN(vt0.c1) FROM vt0 WHERE (vt0.c1 COLLATE NOCASE);
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((vt0.c1 COLLATE NOCASE)AND(((CAST(vt0.c1 AS INTEGER)) NOT BETWEEN (vt0.c0) AND (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END))))) ORDER BY ((vt0.c1 COLLATE BINARY)<=(vt0.c2 COLLATE NOCASE)) ASC  NULLS FIRST, (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END IN ()) ASC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0 WHERE ((NOT (((vt0.c0)<=(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE ((NOT (((vt0.c0)<=(vt0.c1))))) LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((((((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c1)))) AND ((((0xffffffffdec7777c)>(vt0.c1)))))) LIMIT 0X3;
SELECT * FROM vt0 WHERE ((NOT (((vt0.c0)<=(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE ((NOT (((vt0.c0)<=(vt0.c1))))) LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((((((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c1)))) AND ((((0xffffffffdec7777c)>(vt0.c1)))))) LIMIT 0X3;
SELECT COUNT(*) FROM vt0 WHERE (LIKELY(((((((((((((vt0.c1)OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c2)))) ORDER BY CAST(vt0.c0 COLLATE NOCASE AS INTEGER) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((LIKELY(((((((((((((vt0.c1)OR(vt0.c2)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c2))))AND(((((((((vt0.c1)AND(vt0.c2)))AND(0.2327913260445229)))OR(vt0.c0))) NOTNULL)))) ORDER BY CAST(vt0.c0 COLLATE NOCASE AS INTEGER) ASC  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((0.7696220480686069 COLLATE BINARY IN (((vt0.c0) NOT NULL)))) ORDER BY CAST(vt0.c0 COLLATE NOCASE AS INTEGER) ASC  NULLS FIRST;
SELECT MIN(vt0.c1) FROM vt0 WHERE (CASE ((((((vt0.c1)OR('.n.tx|z騤\')))OR(vt0.c0)))AND(vt0.c2))  WHEN (((vt0.c1, vt0.c1))>((vt0.c2, vt0.c0))) THEN ((0Xffffffff9aad78aa) NOT BETWEEN (vt0.c0) AND (vt0.c1)) WHEN NULL THEN CAST(vt0.c0 AS NUMERIC) ELSE (vt0.c0 IN (vt0.c2, vt0.c2)) END) ORDER BY vt0.c0  NULLS LAST, (- (((vt0.c0) NOT BETWEEN (x'') AND (vt0.c1))));
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (CASE ((((((vt0.c1)OR('.n.tx|z騤\')))OR(vt0.c0)))AND(vt0.c2))  WHEN (((vt0.c1, vt0.c1))>((vt0.c2, vt0.c0))) THEN ((-1699907414) NOT BETWEEN (vt0.c0) AND (vt0.c1)) WHEN NULL THEN CAST(vt0.c0 AS NUMERIC) ELSE (vt0.c0 IN (vt0.c2, vt0.c2)) END) ORDER BY vt0.c0  NULLS LAST, (- (((vt0.c0) NOT BETWEEN (x'') AND (vt0.c1)))) LIMIT 0x1;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN ())) ISNULL)) ORDER BY ((LTRIM(vt0.c2))%((NOT (vt0.c0))))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN ())) ISNULL)) ORDER BY highlight(vt0.c1, TRIM(vt0.c2), ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c2)), ((vt0.c1) NOT NULL)) DESC, CASE WHEN ((vt0.c2)|(vt0.c2)) THEN ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2)) WHEN (((vt0.c0, vt0.c1, '565257689', vt0.c1, vt0.c2))>=((vt0.c1, 0.624194991334468, 0.6157768138813213, vt0.c1, vt0.c2))) THEN (((vt0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN ((vt0.c0)IS NOT(vt0.c2)) THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN x'6b' END WHEN ((vt0.c0)<>(vt0.c2)) THEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END END ASC  NULLS LAST, CAST(((vt0.c0)<=(vt0.c0)) AS INTEGER)  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN ())) ISNULL)) ORDER BY ((LTRIM(vt0.c2))%((NOT (vt0.c0))))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN ())) ISNULL)) ORDER BY highlight(vt0.c1, TRIM(vt0.c2), ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c2)), ((vt0.c1) NOT NULL)) DESC, CASE WHEN ((vt0.c2)|(vt0.c2)) THEN ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2)) WHEN (((vt0.c0, vt0.c1, '565257689', vt0.c1, vt0.c2))>=((vt0.c1, 0.624194991334468, 0.6157768138813213, vt0.c1, vt0.c2))) THEN (((vt0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN ((vt0.c0)IS NOT(vt0.c2)) THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN x'6b' END WHEN ((vt0.c0)<>(vt0.c2)) THEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END END ASC  NULLS LAST, CAST(((vt0.c0)<=(vt0.c0)) AS INTEGER)  NULLS FIRST LIMIT 1;
SELECT MIN(vt0.c0) FROM vt0 WHERE (CASE ((vt0.c2)|(vt0.c0))  WHEN (((vt0.c1)) BETWEEN ((vt0.c0)) AND ((vt0.c1))) THEN vt0.c1 END) ORDER BY 0.5081600497887616 ASC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (CASE ((vt0.c2)|(vt0.c0))  WHEN (((vt0.c1)) BETWEEN ((vt0.c0)) AND ((vt0.c1))) THEN vt0.c1 END) ORDER BY 0.5081600497887616 ASC INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c2) IS FALSE))-(((((((vt0.c0)OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c0))))) ORDER BY 0.5081600497887616 ASC;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (CASE WHEN (('-793221991') IS FALSE) THEN ((vt0.c0)<>(vt0.c1)) WHEN (vt0.c1 IN ('IEP4IjYb')) THEN ((((((vt0.c0)OR(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)) WHEN (vt0.c1 IN ()) THEN ((vt0.c1)>(vt0.c1)) ELSE (('-1880625023') IS TRUE) END) ORDER BY ((((CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END)AND(CAST(vt0.c1 AS BLOB))))AND(((((((((vt0.c1)OR(vt0.c2)))AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c2))))  NULLS FIRST, (NOT (CAST(vt0.c1 AS NUMERIC))) ASC;
SELECT MAX(vt0.c1) FROM vt0 WHERE (((CASE WHEN (('-793221991') IS FALSE) THEN ((vt0.c0)<>(vt0.c1)) WHEN (vt0.c1 IN ('IEP4IjYb')) THEN ((((((vt0.c0)OR(vt0.c2)))AND(vt0.c0)))AND(vt0.c2)) WHEN (vt0.c1 IN ()) THEN ((vt0.c1)>(vt0.c1)) ELSE (('-1880625023') IS TRUE) END)AND(vt0.c0))) ORDER BY ((((((((vt0.c1)||(vt0.c0)))OR(json_patch(vt0.c1, vt0.c0))))AND(vt0.c1 COLLATE NOCASE)))AND((NOT (vt0.c0)))), (((vt0.c0 IN (vt0.c0)))+(TRIM(DISTINCT NULL, NULL))) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (CAST('C' COLLATE BINARY AS NUMERIC));
SELECT COUNT(*) FROM vt0 WHERE (CAST('C' COLLATE BINARY AS NUMERIC));
SELECT MIN(vt0.c2) FROM vt0 WHERE ((((- (vt0.c2)))IS NOT(NULL))) ORDER BY (CAST(vt0.c0 AS BLOB) IN (vt0.c2 COLLATE NOCASE)) ASC  NULLS FIRST;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((((- (vt0.c2)))IS NOT(NULL)))AND((((TYPEOF(vt0.c1), LIKELIHOOD(NULL, vt0.c0), CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 END))>=(((((NULL)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))), ((vt0.c2)|(vt0.c1)), ((vt0.c1)GLOB(vt0.c0)))))))) ORDER BY ((((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c2)))AND((vt0.c0 IN ()))))AND(((vt0.c0)>>(vt0.c1)))))AND((NOT (vt0.c0))))  NULLS LAST INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE ((((((vt0.c2, vt0.c2, vt0.c0)) NOT BETWEEN ((NULL, vt0.c2, vt0.c2)) AND ((vt0.c0, vt0.c1, vt0.c0))))!=(((vt0.c1)>=(x'b7'))))) ORDER BY ((((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c2)))AND((vt0.c0 IN ()))))AND(((vt0.c0)>>(vt0.c1)))))AND((NOT (vt0.c0))))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((vt0.c2) NOTNULL));
SELECT * FROM vt0 WHERE (((((vt0.c2) NOTNULL))AND((((((((vt0.c0))>=((vt0.c1))))OR(((vt0.c0)OR(vt0.c2)))))AND(((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0))))))) ORDER BY ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN '-1967540600' THEN vt0.c1 ELSE vt0.c1 END) NOT BETWEEN (NULL) AND (vt0.c2)), NULL DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((vt0.c2) NOTNULL));
SELECT * FROM vt0 WHERE (((((vt0.c2) NOTNULL))AND((((((((vt0.c0))>=((vt0.c1))))OR(((vt0.c0)OR(vt0.c2)))))AND(((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0))))))) ORDER BY ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN '-1967540600' THEN vt0.c1 ELSE vt0.c1 END) NOT BETWEEN (NULL) AND (vt0.c2)), NULL DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END IN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END IN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0))))) ORDER BY (NOT (((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))OR('-1658856734')))), (NOT (0.7426640031695493 COLLATE BINARY)) LIMIT 3;
SELECT ALL * FROM vt0 WHERE ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END IN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END IN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0))))) ORDER BY (NOT (((((((vt0.c1)OR(vt0.c0)))OR(vt0.c0)))OR('-1658856734')))), (NOT (0.7426640031695493 COLLATE BINARY)) LIMIT 3;
SELECT ALL COUNT(*) FROM vt0 WHERE (json_remove(vt0.c2 COLLATE NOCASE, ((vt0.c0)IS NOT(vt0.c2)), ((vt0.c0)-(vt0.c1)))) ORDER BY (+ ((NULL IN (vt0.c1)))) DESC  NULLS FIRST, ((((vt0.c2) NOT BETWEEN (vt0.c2) AND ('r*m5K(j')))-((((vt0.c1))<((vt0.c0))))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (json_remove(vt0.c2 COLLATE NOCASE, ((vt0.c0)IS NOT(vt0.c2)), ((vt0.c0)-(vt0.c1)))) ORDER BY 0.8892753446580393 DESC  NULLS LAST LIMIT 3;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c1 IN ())) BETWEEN (((vt0.c1)&(vt0.c1))) AND ((((vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND (('O[TV', vt0.c1)))))) ORDER BY LOWER(((vt0.c2)<<(vt0.c1)));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((vt0.c1 IN ())) BETWEEN (((vt0.c1)&(vt0.c1))) AND ((((vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND (('O[TV', vt0.c1)))))) ORDER BY (- (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)))) DESC  NULLS LAST, ((((((((((vt0.c0)GLOB(vt0.c1)))OR(((vt0.c0) NOT NULL))))OR(((vt0.c1)==(vt0.c1)))))OR(vt0.c0 COLLATE NOCASE)))AND(DATETIME(vt0.c2, vt0.c0, vt0.c1)))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((+ (vt0.c0))))<>((json_valid(vt0.c2))))) ORDER BY (- (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)))) DESC  NULLS LAST, ((((((((((vt0.c0)GLOB(vt0.c1)))OR(((vt0.c0) NOT NULL))))OR(((vt0.c1)==(vt0.c1)))))OR(vt0.c0 COLLATE NOCASE)))AND(DATETIME(vt0.c2, vt0.c0, vt0.c1)))  NULLS LAST;
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY ((((CASE WHEN vt0.c2 THEN vt0.c0 END)AND(-2.089230563E9)))OR(''))  NULLS LAST, (((vt0.c0 COLLATE BINARY))<(('1246118282'))), (((((((vt0.c1 IN (vt0.c0, vt0.c1, vt0.c1)))AND(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 ELSE 0xffffffffc2a672fa END)))AND(vt0.c0 COLLATE BINARY)))AND(CASE WHEN vt0.c1 THEN vt0.c0 WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)) ASC;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) ORDER BY ((0.12017461669268459)+((NOT (vt0.c1))))  NULLS LAST;
SELECT * FROM vt0 WHERE (vt0.c2) ORDER BY ((((CASE WHEN vt0.c2 THEN vt0.c0 END)AND(-2.089230563E9)))OR(''))  NULLS LAST, (((vt0.c0 COLLATE BINARY))<(('1246118282'))), (((((((vt0.c1 IN (vt0.c0, vt0.c1, vt0.c1)))AND(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 ELSE 0xffffffffc2a672fa END)))AND(vt0.c0 COLLATE BINARY)))AND(CASE WHEN vt0.c1 THEN vt0.c0 WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)) ASC;
SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) ORDER BY ((0.12017461669268459)+((NOT (vt0.c1))))  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c1 IN (vt0.c1)))>>(((vt0.c2)IS(vt0.c1)))));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((((vt0.c1 IN (vt0.c1)))>>(((vt0.c2)IS(vt0.c1)))))AND(((vt0.c2 IN (vt0.c2)) IN ())))) INTERSECT SELECT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c0 IN ()))|((+ (vt0.c1)))));
SELECT ALL * FROM vt0 WHERE (((((0X5d20d303) IS FALSE))||(((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c2))))) ORDER BY ((((vt0.c2)<<(vt0.c2))) NOT NULL);
SELECT * FROM vt0 WHERE (((((((0X5d20d303) IS FALSE))||(((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c2)))))AND((((vt0.c1 IN (vt0.c1)))LIKE(vt0.c2 COLLATE RTRIM))))) ORDER BY x'0b'  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((0X5d20d303) IS FALSE))||(((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c2))))) ORDER BY ((((vt0.c2)<<(vt0.c2))) NOT NULL);
SELECT * FROM vt0 WHERE (((((((0X5d20d303) IS FALSE))||(((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c2)))))AND((((vt0.c1 IN (vt0.c1)))LIKE(vt0.c2 COLLATE RTRIM))))) ORDER BY x'0b'  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((NOT (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) ORDER BY '~'  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((NOT (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) ORDER BY CAST(vt0.c0 AS REAL) COLLATE NOCASE LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((NOT (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) ORDER BY '~'  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((NOT (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) ORDER BY CAST(vt0.c0 AS REAL) COLLATE NOCASE LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (CASE WHEN ((x'') IS TRUE) THEN ((vt0.c2) ISNULL) WHEN LIKELIHOOD(DISTINCT vt0.c0, vt0.c1) THEN ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)) ELSE ((vt0.c0) ISNULL) END) ORDER BY (((vt0.c2 IN (vt0.c1)))|((((vt0.c0, vt0.c1, vt0.c0))<=((vt0.c0, vt0.c1, 0Xffffffffa99862eb))))) DESC;
SELECT ALL COUNT(*) FROM vt0 WHERE (((CASE WHEN ((x'') IS TRUE) THEN ((vt0.c2) ISNULL) WHEN LIKELIHOOD(DISTINCT vt0.c0, vt0.c1) THEN ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)) ELSE ((vt0.c0) ISNULL) END)AND(CASE ((vt0.c1) NOT BETWEEN (vt0.c0) AND (NULL))  WHEN load_extension(NULL) THEN ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c1)) ELSE vt0.c0 END))) ORDER BY ((((vt0.c0) IS TRUE))=(((vt0.c2) NOT NULL)))  NULLS LAST, ((CAST(vt0.c1 AS BLOB)) NOT BETWEEN ('-380520943') AND (((((vt0.c1)OR(vt0.c2)))AND(vt0.c1)))) ASC;
SELECT MIN(vt0.c2) FROM vt0 WHERE (CASE vt0.c1 COLLATE BINARY  WHEN vt0.c2 COLLATE BINARY THEN ((vt0.c1)OR(vt0.c2)) WHEN ((((vt0.c2)AND(vt0.c2)))AND(vt0.c2)) THEN ((vt0.c1)<=(vt0.c0)) WHEN vt0.c2 COLLATE RTRIM THEN ((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c2)) END);
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((CASE vt0.c1 COLLATE BINARY  WHEN vt0.c2 COLLATE BINARY THEN ((vt0.c1)OR(vt0.c2)) WHEN ((((vt0.c2)AND(vt0.c2)))AND(vt0.c2)) THEN ((vt0.c1)<=(vt0.c0)) WHEN vt0.c2 COLLATE RTRIM THEN ((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c2)) END)AND((((vt0.c1 IN ()))>(((vt0.c0) NOT BETWEEN (vt0.c2) AND (0.005384718066741789))))))) LIMIT 0x1;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (CASE WHEN ((vt0.c2)AND(vt0.c1)) THEN x'fb' WHEN ((vt0.c1)-(vt0.c0)) THEN CAST(vt0.c1 AS BLOB) ELSE 0.9525255272456572 END) ORDER BY '-1727102346' ASC  NULLS FIRST, ((((((((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c2 END)AND(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)))))OR(vt0.c0)))AND(vt0.c0)))AND(LIKELIHOOD(DISTINCT vt0.c1, vt0.c0))))AND(((((vt0.c1)AND(vt0.c2)))OR(0.8994982973062274))))  NULLS FIRST;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((CASE WHEN ((vt0.c2)AND(vt0.c1)) THEN x'fb' WHEN ((vt0.c1)-(vt0.c0)) THEN CAST(vt0.c1 AS BLOB) ELSE 0.9525255272456572 END)AND(((CASE vt0.c2  WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 ELSE 'U&' END) NOT BETWEEN (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))) AND (CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN 0.28357082356139385 THEN vt0.c1 ELSE vt0.c1 END))))) ORDER BY CAST(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN 0.8994175168209757 THEN vt0.c2 END AS INTEGER)  NULLS FIRST LIMIT 1;
SELECT MIN(vt0.c2) FROM vt0 WHERE ((json_quote(vt0.c0) IN (CASE WHEN vt0.c2 THEN vt0.c0 END)));
SELECT MIN(vt0.c2) FROM vt0 WHERE ((json_quote(vt0.c0) IN (CASE WHEN vt0.c2 THEN vt0.c0 END))) ORDER BY CASE vt0.c0 COLLATE BINARY  WHEN ((vt0.c1)-(vt0.c2)) THEN LOWER(vt0.c0) WHEN (vt0.c0 IN (0X508202af)) THEN ((((((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c0)) ELSE LENGTH('-1318887227') END ASC, ((CAST(vt0.c0 AS NUMERIC))IS((NOT (vt0.c0))))  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM vt0 WHERE (ABS(((vt0.c1)>=('eJlXy6}2')))) ORDER BY ((((((((((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))OR(((vt0.c2)||(vt0.c0)))))AND(((vt0.c2)<>(vt0.c2)))))AND((((vt0.c0, x'')) NOT BETWEEN ((0.33667613200348856, vt0.c1)) AND ((vt0.c2, vt0.c2))))))OR((((vt0.c0))<((vt0.c0))))))AND((- (vt0.c1)))) ASC  NULLS LAST, ((0.4788783665314901)IS NOT(rtreenode(vt0.c0, vt0.c1)));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (ABS(((vt0.c1)>=('eJlXy6}2')))) ORDER BY ((((((((((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)))OR(((vt0.c2)||(vt0.c0)))))AND(((vt0.c2)!=(vt0.c2)))))AND((((vt0.c0, x'')) NOT BETWEEN ((0.33667613200348856, vt0.c1)) AND ((vt0.c2, vt0.c2))))))OR((((vt0.c0))<((vt0.c0))))))AND((- (vt0.c1)))) ASC  NULLS LAST, ((0.4788783665314901)IS NOT(rtreenode(vt0.c0, vt0.c1))) LIMIT 0X3;
SELECT * FROM vt0 WHERE ((load_extension(vt0.c1) IN ())) ORDER BY CASE LIKELIHOOD(vt0.c1, vt0.c0)  WHEN (~ (vt0.c2)) THEN ((vt0.c2) NOT NULL) WHEN ((vt0.c2)<(vt0.c1)) THEN IFNULL(DISTINCT vt0.c2, vt0.c0) WHEN vt0.c0 COLLATE RTRIM THEN ((('%')) BETWEEN ((vt0.c1)) AND ((0.9001206397750453))) ELSE ((vt0.c1)*(vt0.c2)) END ASC  NULLS FIRST, CASE WHEN NULL THEN ((vt0.c1)||(vt0.c1)) ELSE ((x'2af48304f2') NOT NULL) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((((load_extension(vt0.c1) IN ()))AND((((vt0.c0 IN (vt0.c1))) IS FALSE)))) ORDER BY 0.8436902289407069 ASC  NULLS LAST, CAST(((((((vt0.c2)OR(vt0.c1)))AND(vt0.c2)))AND(vt0.c0)) AS BLOB) ASC, (LIKELIHOOD(DISTINCT vt0.c0, vt0.c1) IN (TRIM(vt0.c0, vt0.c2))) ASC, ((((UNLIKELY(DISTINCT vt0.c1))OR(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN '' THEN vt0.c2 ELSE x'a7' END)))AND((((vt0.c2))<((vt0.c2))))) ASC LIMIT 1;
SELECT * FROM vt0 WHERE ((load_extension(vt0.c1) IN ())) ORDER BY CASE LIKELIHOOD(vt0.c1, vt0.c0)  WHEN (~ (vt0.c2)) THEN ((vt0.c2) NOT NULL) WHEN ((vt0.c2)<(vt0.c1)) THEN IFNULL(DISTINCT vt0.c2, vt0.c0) WHEN vt0.c0 COLLATE RTRIM THEN ((('%')) BETWEEN ((vt0.c1)) AND ((0.9001206397750453))) ELSE ((vt0.c1)*(vt0.c2)) END ASC  NULLS FIRST, CASE WHEN NULL THEN ((vt0.c1)||(vt0.c1)) ELSE ((x'2af48304f2') NOT NULL) END DESC  NULLS FIRST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (CASE CAST(vt0.c0 AS BLOB)  WHEN ((vt0.c1) BETWEEN (x'fc') AND (vt0.c0)) THEN (vt0.c2 IN (vt0.c1)) ELSE HEX(DISTINCT vt0.c2) END);
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((CASE CAST(vt0.c0 AS BLOB)  WHEN ((vt0.c1) BETWEEN (x'fc') AND (vt0.c0)) THEN (vt0.c2 IN (vt0.c1)) ELSE HEX(DISTINCT vt0.c2) END)AND((((vt0.c1, 'Z5T''Y', vt0.c2)) BETWEEN ((((vt0.c0) ISNULL), CAST(NULL AS NUMERIC), LIKELIHOOD(vt0.c0, vt0.c2))) AND ((NULL, (vt0.c1 IN ()), CAST(vt0.c2 AS NUMERIC))))))) INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0) IS TRUE) AS TEXT));
SELECT ALL * FROM vt0 WHERE (CASE (((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((0Xffffffff9baee708)))  WHEN (('242458992')*(vt0.c0)) THEN vt0.c0 COLLATE RTRIM WHEN CAST(vt0.c0 AS NUMERIC) THEN (((vt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c2))) END);
SELECT * FROM vt0 WHERE (CASE (((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((-1683036408)))  WHEN (('242458992')*(vt0.c0)) THEN vt0.c0 COLLATE RTRIM WHEN CAST(vt0.c0 AS NUMERIC) THEN (((vt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c2))) END) ORDER BY (((vt0.c0 IN (vt0.c1))) IS FALSE) LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY (((vt0.c0 IN (vt0.c1))) IS FALSE) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CASE (((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((0Xffffffff9baee708)))  WHEN (('242458992')*(vt0.c0)) THEN vt0.c0 COLLATE RTRIM WHEN CAST(vt0.c0 AS NUMERIC) THEN (((vt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c2))) END);
SELECT * FROM vt0 WHERE (CASE (((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((-1683036408)))  WHEN (('242458992')*(vt0.c0)) THEN vt0.c0 COLLATE RTRIM WHEN CAST(vt0.c0 AS NUMERIC) THEN (((vt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c2))) END) ORDER BY (((vt0.c0 IN (vt0.c1))) IS FALSE) LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY (((vt0.c0 IN (vt0.c1))) IS FALSE) LIMIT 1;
SELECT * FROM vt0 WHERE (((((((((CHAR(vt0.c2))OR((NOT (vt0.c1)))))OR((vt0.c0 IN (vt0.c2)))))AND('1697174845')))OR(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT * FROM vt0 WHERE (((((((((CHAR(vt0.c2))OR((NOT (vt0.c1)))))OR((vt0.c0 IN (vt0.c2)))))AND('1697174845')))OR(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0))))) INTERSECT SELECT * FROM vt0 WHERE (-1925739396);
SELECT * FROM vt0 WHERE (((((((((CHAR(vt0.c2))OR((NOT (vt0.c1)))))OR((vt0.c0 IN (vt0.c2)))))AND('1697174845')))OR(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT * FROM vt0 WHERE (((((((((CHAR(vt0.c2))OR((NOT (vt0.c1)))))OR((vt0.c0 IN (vt0.c2)))))AND('1697174845')))OR(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0))))) INTERSECT SELECT * FROM vt0 WHERE (-1925739396);
SELECT COUNT(*) FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c0)AND(((CAST(vt0.c1 AS REAL))-(SQLITE_COMPILEOPTION_USED(vt0.c2)))))) LIMIT 0X1;
SELECT * FROM vt0 WHERE ((((vt0.c2 IN (vt0.c2)))!=(LENGTH(vt0.c0))));
SELECT * FROM vt0 WHERE ((((((vt0.c2 IN (vt0.c2)))!=(LENGTH(vt0.c0))))AND(QUOTE(((NULL) ISNULL))))) ORDER BY json_array_length(vt0.c0 COLLATE RTRIM) DESC, (((highlight(vt0.c0, 'i', vt0.c1, vt0.c0), (('C?/')-(vt0.c0))))<((vt0.c0, (((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1))))))  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (((vt0.c2) NOT BETWEEN (((vt0.c1)<=(vt0.c1))) AND (((vt0.c2)GLOB(vt0.c1))))) ORDER BY json_array_length(vt0.c0 COLLATE RTRIM) DESC, (((highlight(vt0.c0, 'i', vt0.c1, vt0.c0), (('C?/')-(vt0.c0))))<((vt0.c0, (((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1))))))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((vt0.c2 IN (vt0.c2)))!=(LENGTH(vt0.c0))));
SELECT * FROM vt0 WHERE ((((((vt0.c2 IN (vt0.c2)))!=(LENGTH(vt0.c0))))AND(QUOTE(((NULL) ISNULL))))) ORDER BY json_array_length(vt0.c0 COLLATE RTRIM) DESC, (((highlight(vt0.c0, 'i', vt0.c1, vt0.c0), (('C?/')-(vt0.c0))))<((vt0.c0, (((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1))))))  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (((vt0.c2) NOT BETWEEN (((vt0.c1)<=(vt0.c1))) AND (((vt0.c2)GLOB(vt0.c1))))) ORDER BY json_array_length(vt0.c0 COLLATE RTRIM) DESC, (((highlight(vt0.c0, 'i', vt0.c1, vt0.c0), (('C?/')-(vt0.c0))))<((vt0.c0, (((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1))))))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((NULL IN (vt0.c1, vt0.c2))) ISNULL));
SELECT DISTINCT * FROM vt0 WHERE ((((((NULL IN (vt0.c1))) ISNULL))AND(((((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 END)OR((((vt0.c0, vt0.c2))!=((vt0.c0, vt0.c1))))))AND(vt0.c2 COLLATE NOCASE))))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((vt0.c0 IN ()) COLLATE NOCASE) LIMIT 2;
SELECT * FROM vt0 WHERE ((((NULL IN (vt0.c1, vt0.c2))) ISNULL));
SELECT DISTINCT * FROM vt0 WHERE ((((((NULL IN (vt0.c1))) ISNULL))AND(((((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 END)OR((((vt0.c0, vt0.c2))!=((vt0.c0, vt0.c1))))))AND(vt0.c2 COLLATE NOCASE))))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((vt0.c0 IN ()) COLLATE NOCASE) LIMIT 2;
SELECT * FROM vt0 WHERE ((((((vt0.c0, vt0.c2, vt0.c0))>((vt0.c0, vt0.c2, vt0.c1))))*(((vt0.c0) IS TRUE)))) ORDER BY ((CASE vt0.c0  WHEN '1242591938' THEN vt0.c2 WHEN 7.1103973E7 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END)|(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END)) DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((((((vt0.c0, vt0.c2, vt0.c0))>((vt0.c0, vt0.c2, vt0.c1))))*(((vt0.c0) IS TRUE))))AND(CASE LOWER(DISTINCT vt0.c0)  WHEN (((vt0.c1, vt0.c1, vt0.c0)) BETWEEN ((vt0.c1, vt0.c0, vt0.c0)) AND ((vt0.c2, vt0.c1, vt0.c2))) THEN (NOT (vt0.c0)) WHEN ((vt0.c1)>>(vt0.c1)) THEN (- (vt0.c1)) END))) ORDER BY NULL DESC, vt0.c0 LIMIT 2;
SELECT * FROM vt0 WHERE ((((((vt0.c0, vt0.c2, vt0.c0))>((vt0.c0, vt0.c2, vt0.c1))))*(((vt0.c0) IS TRUE)))) ORDER BY ((CASE vt0.c0  WHEN '1242591938' THEN vt0.c2 WHEN 7.1103973E7 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END)|(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END)) DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((((((vt0.c0, vt0.c2, vt0.c0))>((vt0.c0, vt0.c2, vt0.c1))))*(((vt0.c0) IS TRUE))))AND(CASE LOWER(DISTINCT vt0.c0)  WHEN (((vt0.c1, vt0.c1, vt0.c0)) BETWEEN ((vt0.c1, vt0.c0, vt0.c0)) AND ((vt0.c2, vt0.c1, vt0.c2))) THEN (NOT (vt0.c0)) WHEN ((vt0.c1)>>(vt0.c1)) THEN (- (vt0.c1)) END))) ORDER BY NULL DESC, vt0.c0 LIMIT 2;
SELECT * FROM vt0 WHERE ('');
SELECT ALL * FROM vt0 WHERE ('');
SELECT * FROM vt0 WHERE ('');
SELECT ALL * FROM vt0 WHERE ('');
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c1) ORDER BY (~ (((((((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c1))))  NULLS LAST, (((((((((vt0.c0 IN (vt0.c0)))AND(vt0.c1)))AND(((vt0.c2) IS FALSE))))AND('<')))OR(((vt0.c2) IS FALSE)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c1) ORDER BY (~ (((((((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c1))))  NULLS LAST, (((((((((vt0.c0 IN (vt0.c0)))AND(vt0.c1)))AND(((vt0.c2) IS FALSE))))AND('<')))OR(((vt0.c2) IS FALSE)))  NULLS FIRST LIMIT 2 INTERSECT SELECT COUNT(*) FROM vt0 WHERE (CAST(((vt0.c2)<(vt0.c1)) AS TEXT)) ORDER BY (~ (((((((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)))AND(vt0.c2)))OR(vt0.c1))))  NULLS LAST, (((((((((vt0.c0 IN (vt0.c0)))AND(vt0.c1)))AND(((vt0.c2) IS FALSE))))AND('<')))OR(((vt0.c2) IS FALSE)))  NULLS FIRST LIMIT 2;
SELECT * FROM vt0 WHERE (ROUND(CAST(vt0.c1 AS TEXT), 0X77f70298)) ORDER BY ((((vt0.c1)==(vt0.c2)))IS NOT(vt0.c1 COLLATE BINARY)) DESC  NULLS FIRST, CASE WHEN (vt0.c1 IN ()) THEN CAST(vt0.c1 AS INTEGER) WHEN ((((((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)))AND(NULL)))AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c2)) THEN (+ (vt0.c2)) ELSE (+ (vt0.c1)) END  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (ROUND(CAST(vt0.c1 AS TEXT), 0x77f70298)) ORDER BY ((('#')OR(vt0.c0)) IN ()) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (LOWER((((vt0.c1))>((vt0.c2))))) ORDER BY ((('#')OR(vt0.c0)) IN ()) ASC LIMIT 0;
SELECT * FROM vt0 WHERE (ROUND(CAST(vt0.c1 AS TEXT), 0X77f70298)) ORDER BY ((((vt0.c1)==(vt0.c2)))IS NOT(vt0.c1 COLLATE BINARY)) DESC  NULLS FIRST, CASE WHEN (vt0.c1 IN ()) THEN CAST(vt0.c1 AS INTEGER) WHEN ((((((((((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)))AND(NULL)))AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c2)) THEN (+ (vt0.c2)) ELSE (+ (vt0.c1)) END  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (ROUND(CAST(vt0.c1 AS TEXT), 0x77f70298)) ORDER BY ((('#')OR(vt0.c0)) IN ()) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (LOWER((((vt0.c1))>((vt0.c2))))) ORDER BY ((('#')OR(vt0.c0)) IN ()) ASC LIMIT 0;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((~ (CAST(vt0.c0 AS REAL))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((~ (CAST(vt0.c0 AS REAL))))AND(vt0.c2))) LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((('{ pb1浪xCr', vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c2, vt0.c1)))) NOT BETWEEN (vt0.c2) AND (((vt0.c1)LIKE(vt0.c1))))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)))AND(x'ea')))LIKE(((vt0.c2) IS FALSE)))) ORDER BY ((((vt0.c0, vt0.c1, vt0.c2))<((vt0.c2, vt0.c2, vt0.c1))) IN (CAST(vt0.c2 AS TEXT))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)))AND(x'ea')))LIKE(((vt0.c2) IS FALSE)))) ORDER BY ((((vt0.c0, vt0.c1, vt0.c2))<((vt0.c2, vt0.c2, vt0.c1))) IN (CAST(vt0.c2 AS TEXT))) DESC LIMIT 2;
SELECT ALL * FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)))AND(x'ea')))LIKE(((vt0.c2) IS FALSE)))) ORDER BY ((((vt0.c0, vt0.c1, vt0.c2))<((vt0.c2, vt0.c2, vt0.c1))) IN (CAST(vt0.c2 AS TEXT))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)))AND(x'ea')))LIKE(((vt0.c2) IS FALSE)))) ORDER BY ((((vt0.c0, vt0.c1, vt0.c2))<((vt0.c2, vt0.c2, vt0.c1))) IN (CAST(vt0.c2 AS TEXT))) DESC LIMIT 2;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (LIKE((vt0.c0 IN (vt0.c1)), TIME(vt0.c0, -1.477752068E9, vt0.c1, vt0.c0), 'O')) ORDER BY 'UW<U3\'' ', (((vt0.c1 IN (vt0.c2)))<(((vt0.c0)==(vt0.c0)))) ASC, ((((0Xffffffffb8d274f7)AND((- (vt0.c2)))))AND((~ (vt0.c0))))  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((LIKE((vt0.c0 IN (vt0.c1)), TIME(vt0.c0, -1.477752068E9, vt0.c1, vt0.c0), 'O'))AND(((((((vt0.c1)OR(vt0.c2)))AND(vt0.c2)))AND(vt0.c2)) COLLATE BINARY))) ORDER BY (vt0.c1 COLLATE RTRIM IN (((vt0.c0) ISNULL))), ((((vt0.c0 IN (vt0.c2, vt0.c2))))<(((vt0.c0 IN ()))))  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (((((((vt0.c1)AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c1)) COLLATE RTRIM) ORDER BY (((vt0.c1, vt0.c2)) BETWEEN ((((vt0.c0) NOT BETWEEN (NULL) AND (vt0.c1)), (((vt0.c1)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c0))))) AND ((((vt0.c1) IS TRUE), ((((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c0)))OR('3[^S.Xs')))AND(vt0.c2)))OR(vt0.c0)))));
SELECT COUNT(*) FROM vt0 WHERE (((((((vt0.c1)AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c1)) COLLATE RTRIM) ORDER BY (((vt0.c1, vt0.c2)) BETWEEN ((((vt0.c0) NOT BETWEEN (NULL) AND (vt0.c1)), (((vt0.c1)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c0))))) AND ((((vt0.c1) IS TRUE), ((((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c0)))OR('3[^S.Xs')))AND(vt0.c2)))OR(vt0.c0))))) LIMIT 0 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c1)/((((vt0.c0))<((vt0.c1)))))) ORDER BY (((vt0.c1, vt0.c2)) BETWEEN ((((vt0.c0) NOT BETWEEN (NULL) AND (vt0.c1)), (((vt0.c1)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c0))))) AND ((((vt0.c1) IS TRUE), ((((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c0)))OR('3[^S.Xs')))AND(vt0.c2)))OR(vt0.c0))))) LIMIT 0;
SELECT * FROM vt0 WHERE ('917511139') ORDER BY (((vt0.c1, vt0.c0, vt0.c0)) BETWEEN ((((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)), 0.5810496360974969, ((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c2)))) AND ((CAST(vt0.c2 AS REAL), vt0.c0 COLLATE NOCASE, (((vt0.c0, vt0.c1))>((vt0.c0, vt0.c2)))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE ((('917511139')AND(CAST(((vt0.c1)-(vt0.c1)) AS TEXT)))) ORDER BY ((IFNULL(vt0.c2, vt0.c0))<<(CAST(vt0.c1 AS INTEGER)));
SELECT * FROM vt0 WHERE ('917511139') ORDER BY (((vt0.c1, vt0.c0, vt0.c0)) BETWEEN ((((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c2)), 0.5810496360974969, ((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c2)))) AND ((CAST(vt0.c2 AS REAL), vt0.c0 COLLATE NOCASE, (((vt0.c0, vt0.c1))>((vt0.c0, vt0.c2)))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE ((('917511139')AND(CAST(((vt0.c1)-(vt0.c1)) AS TEXT)))) ORDER BY ((IFNULL(vt0.c2, vt0.c0))<<(CAST(vt0.c1 AS INTEGER)));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((((CAST(0.1080319578956207 AS BLOB))AND(vt0.c1)))AND(0.10567659838878563)))OR((((vt0.c1, vt0.c0))<=((vt0.c2, vt0.c1))))))OR(vt0.c2)));
SELECT COUNT(*) FROM vt0 WHERE (((((((((((CAST(0.1080319578956207 AS BLOB))AND(vt0.c1)))AND(0.10567659838878563)))OR((((vt0.c1, vt0.c0))==((vt0.c2, vt0.c1))))))OR(vt0.c2)))AND(((vt0.c2 COLLATE RTRIM) BETWEEN (((vt0.c0)LIKE(vt0.c2))) AND (((vt0.c2) IS FALSE))))));
SELECT * FROM vt0 WHERE ((('JKb뉥<U+%')=(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (((~ (vt0.c0))) NOT BETWEEN ((vt0.c2 IN (vt0.c1))) AND (((vt0.c1)-(vt0.c2)))) ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((('JKb뉥<U+%')==(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(0.018310912277826774))) ORDER BY (((~ (vt0.c0))) NOT BETWEEN ((vt0.c2 IN (vt0.c1))) AND (((vt0.c1)-(vt0.c2)))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE ((((vt0.c1, vt0.c1, vt0.c0, vt0.c0, vt0.c1)) BETWEEN ((((vt0.c0) NOTNULL), ((vt0.c2) NOT NULL), (((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c0, vt0.c2))), ((vt0.c1)<<(vt0.c0)), ((-6.75065596E8) NOT NULL))) AND ((((vt0.c0)OR(vt0.c1)), ((vt0.c1)IS(vt0.c1)), (((vt0.c2, vt0.c1))!=((vt0.c0, vt0.c2))), 'gsKy- ', UNLIKELY(vt0.c0))))) ORDER BY (((~ (vt0.c0))) NOT BETWEEN ((vt0.c2 IN (vt0.c1))) AND (((vt0.c1)-(vt0.c2)))) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE ((('JKb뉥<U+%')=(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (((~ (vt0.c0))) NOT BETWEEN ((vt0.c2 IN (vt0.c1))) AND (((vt0.c1)-(vt0.c2)))) ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((('JKb뉥<U+%')==(((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(0.018310912277826774))) ORDER BY (((~ (vt0.c0))) NOT BETWEEN ((vt0.c2 IN (vt0.c1))) AND (((vt0.c1)-(vt0.c2)))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE ((((vt0.c1, vt0.c1, vt0.c0, vt0.c0, vt0.c1)) BETWEEN ((((vt0.c0) NOTNULL), ((vt0.c2) NOT NULL), (((vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c0, vt0.c2))), ((vt0.c1)<<(vt0.c0)), ((-6.75065596E8) NOT NULL))) AND ((((vt0.c0)OR(vt0.c1)), ((vt0.c1)IS(vt0.c1)), (((vt0.c2, vt0.c1))!=((vt0.c0, vt0.c2))), 'gsKy- ', UNLIKELY(vt0.c0))))) ORDER BY (((~ (vt0.c0))) NOT BETWEEN ((vt0.c2 IN (vt0.c1))) AND (((vt0.c1)-(vt0.c2)))) ASC  NULLS LAST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (((((((((vt0.c1 COLLATE BINARY)AND(vt0.c1)))OR(vt0.c1)))OR(((((((vt0.c1)AND(NULL)))OR(vt0.c1)))OR(vt0.c0)))))AND(((vt0.c1) NOTNULL))));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((((((((((vt0.c1 COLLATE BINARY)AND(vt0.c1)))OR(vt0.c1)))OR(((((((vt0.c1)AND(NULL)))OR(vt0.c1)))OR(vt0.c0)))))AND(((vt0.c1) NOTNULL))))AND(((NULL)&(vt0.c2 COLLATE NOCASE))))) LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((CAST('-1610130480' AS REAL)) ISNULL)) LIMIT 0x0;
SELECT MIN(vt0.c1) FROM vt0 WHERE (((NULL) BETWEEN (((((vt0.c0)OR(vt0.c0)))AND(vt0.c0))) AND ((vt0.c1 IN ())))) ORDER BY (((vt0.c0, vt0.c0, vt0.c2, vt0.c1, vt0.c2)) BETWEEN (((((vt0.c1, 0.7609004300838976, vt0.c0)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0)) AND ((vt0.c2, vt0.c2, vt0.c1))), CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END, ((vt0.c0) ISNULL), 0.25428351780017244 COLLATE RTRIM, vt0.c1 COLLATE RTRIM)) AND (((vt0.c2 IN (vt0.c1, vt0.c0)), ((vt0.c0) NOT NULL), ((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN x'' THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ASC  NULLS FIRST, vt0.c2  NULLS FIRST, ((((vt0.c1)>=(vt0.c0)))IS(((vt0.c2) ISNULL))) DESC;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((((NULL) BETWEEN (((((vt0.c0)OR(vt0.c0)))AND(vt0.c0))) AND ((vt0.c1 IN ()))))AND(x'ab'))) ORDER BY vt0.c2;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((0.6674072141955223) BETWEEN ((vt0.c0 IN ())) AND (((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((0.6674072141955223) BETWEEN ((vt0.c0 IN ())) AND (((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2))))) ORDER BY NULL ASC, ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2 COLLATE BINARY)) LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY NULL ASC, ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2 COLLATE BINARY)) LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END COLLATE BINARY) ORDER BY LTRIM(((vt0.c2)<<(vt0.c1)), ((((((vt0.c1)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c0))) ASC, (- ('-1033948522')) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END COLLATE BINARY)AND((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 END IN ((((vt0.c1, vt0.c0, vt0.c0, vt0.c1, vt0.c0))<=((NULL, vt0.c2, vt0.c0, 0.9766274805027967, vt0.c0)))))))) ORDER BY NULL LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END COLLATE BINARY) ORDER BY LTRIM(((vt0.c2)<<(vt0.c1)), ((((((vt0.c1)AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c0))) ASC, (- ('-1033948522')) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END COLLATE BINARY)AND((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 END IN ((((vt0.c1, vt0.c0, vt0.c0, vt0.c1, vt0.c0))<=((NULL, vt0.c2, vt0.c0, 0.9766274805027967, vt0.c0)))))))) ORDER BY NULL LIMIT 0x0;
SELECT * FROM vt0 WHERE (CASE ((vt0.c0)-(vt0.c1))  WHEN json_extract(vt0.c1, vt0.c0) THEN vt0.c1 COLLATE RTRIM WHEN ((vt0.c1) NOT BETWEEN (NULL) AND (vt0.c1)) THEN -693784724 ELSE ((x'84dea7')LIKE(vt0.c2)) END) ORDER BY (((vt0.c1 IN ()))LIKE((((vt0.c0, vt0.c2))=((vt0.c0, vt0.c0)))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((CASE ((vt0.c0)-(vt0.c1))  WHEN json_extract(vt0.c1, vt0.c0) THEN vt0.c1 COLLATE RTRIM WHEN ((vt0.c1) NOT BETWEEN (NULL) AND (vt0.c1)) THEN 0xffffffffd6a5af6c ELSE ((x'84dea7')LIKE(vt0.c2)) END)AND(((((vt0.c0)OR(vt0.c1)))<=(CAST(vt0.c2 AS NUMERIC)))))) ORDER BY (((vt0.c1 IN ()))LIKE((((vt0.c0, vt0.c2))==((vt0.c0, vt0.c0)))))  NULLS LAST LIMIT 0x0;
SELECT * FROM vt0 WHERE (CASE ((vt0.c0)-(vt0.c1))  WHEN json_extract(vt0.c1, vt0.c0) THEN vt0.c1 COLLATE RTRIM WHEN ((vt0.c1) NOT BETWEEN (NULL) AND (vt0.c1)) THEN -693784724 ELSE ((x'84dea7')LIKE(vt0.c2)) END) ORDER BY (((vt0.c1 IN ()))LIKE((((vt0.c0, vt0.c2))=((vt0.c0, vt0.c0)))))  NULLS LAST;
SELECT * FROM vt0 WHERE (CASE WHEN TOTAL_CHANGES() THEN (vt0.c1 IN ()) END);
SELECT * FROM vt0 WHERE (CASE WHEN TOTAL_CHANGES() THEN (vt0.c1 IN ()) END);
SELECT * FROM vt0 WHERE (CASE WHEN TOTAL_CHANGES() THEN (vt0.c1 IN ()) END);
SELECT * FROM vt0 WHERE (CASE WHEN TOTAL_CHANGES() THEN (vt0.c1 IN ()) END);
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE ((vt0.c2)IS NOT(vt0.c0))  WHEN (vt0.c2 IN (vt0.c0)) THEN (((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN (((vt0.c2))<>((vt0.c2))) THEN vt0.c2 WHEN ((vt0.c2)||(vt0.c0)) THEN x'6a45' WHEN 1246118282 THEN vt0.c1 ELSE (vt0.c1 IN ('7')) END) ORDER BY ((vt0.c0) NOTNULL)  NULLS FIRST, ((((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))-((vt0.c2 IN (vt0.c0)))) ASC;
SELECT COUNT(*) FROM vt0 WHERE (CASE ((vt0.c2)IS NOT(vt0.c0))  WHEN (vt0.c2 IN (vt0.c0)) THEN (((vt0.c2)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN (((vt0.c2))<>((vt0.c2))) THEN vt0.c2 WHEN ((vt0.c2)||(vt0.c0)) THEN x'6a45' WHEN 1246118282 THEN vt0.c1 ELSE (vt0.c1 IN ('7')) END) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2))) BETWEEN (((0.8300895292439142)+(vt0.c0))) AND ((vt0.c0 IN (vt0.c0, vt0.c1))))  NULLS LAST LIMIT 0x1 INTERSECT SELECT COUNT(*) FROM vt0 WHERE ((~ (((vt0.c2)>(vt0.c1))))) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2))) BETWEEN (((0.8300895292439142)+(vt0.c0))) AND ((vt0.c0 IN (vt0.c0, vt0.c1))))  NULLS LAST LIMIT 0x1;
SELECT MIN(vt0.c1) FROM vt0 WHERE (((vt0.c2 IN (vt0.c0)) IN (vt0.c1)));
SELECT MIN(vt0.c1) FROM vt0 WHERE (((vt0.c2 IN (vt0.c0)) IN (vt0.c1))) ORDER BY '-222011921', x''  NULLS FIRST INTERSECT SELECT MIN(vt0.c1) FROM vt0 WHERE ((vt0.c0 COLLATE RTRIM IN (CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c2 END, ((vt0.c2) IS FALSE)))) ORDER BY '-222011921', x''  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c2, vt0.c1))=((vt0.c2, vt0.c0)))) IS FALSE));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c2, vt0.c1))=((vt0.c2, vt0.c0)))) IS FALSE)) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c0 COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c0 COLLATE RTRIM AS NUMERIC)) ORDER BY CAST(CAST(vt0.c2 AS BLOB) AS NUMERIC) DESC  NULLS FIRST, CAST((((vt0.c0, vt0.c2, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c1, vt0.c1)) AND ((vt0.c0, vt0.c2, vt0.c2, vt0.c2))) AS BLOB) LIMIT 3;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c0 COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c0 COLLATE RTRIM AS NUMERIC)) ORDER BY CAST(CAST(vt0.c2 AS BLOB) AS NUMERIC) DESC  NULLS FIRST, CAST((((vt0.c0, vt0.c2, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2, vt0.c1, vt0.c1)) AND ((vt0.c0, vt0.c2, vt0.c2, vt0.c2))) AS BLOB) LIMIT 3;
SELECT ALL * FROM vt0 WHERE (((vt0.c0)%((((vt0.c1, vt0.c0))=((vt0.c0, '656715090'))))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)%((((vt0.c1, vt0.c0))==((vt0.c0, '656715090'))))))AND(((CAST(vt0.c1 AS TEXT)) BETWEEN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0))) AND ((~ (vt0.c1))))))) ORDER BY TRIM(DISTINCT vt0.c1 COLLATE RTRIM) DESC, vt0.c2 DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (CAST(CASE vt0.c0  WHEN 'MC6g!6R' THEN '/歇' WHEN x'ae' THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END AS REAL)) ORDER BY TRIM(DISTINCT vt0.c1 COLLATE RTRIM) DESC, vt0.c2 DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((vt0.c0)%((((vt0.c1, vt0.c0))=((vt0.c0, '656715090'))))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)%((((vt0.c1, vt0.c0))==((vt0.c0, '656715090'))))))AND(((CAST(vt0.c1 AS TEXT)) BETWEEN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0))) AND ((~ (vt0.c1))))))) ORDER BY TRIM(DISTINCT vt0.c1 COLLATE RTRIM) DESC, vt0.c2 DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (CAST(CASE vt0.c0  WHEN 'MC6g!6R' THEN '/歇' WHEN x'ae' THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END AS REAL)) ORDER BY TRIM(DISTINCT vt0.c1 COLLATE RTRIM) DESC, vt0.c2 DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))OR(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)))OR((vt0.c0 IN (vt0.c0))))) ORDER BY ((x'3c') NOT BETWEEN (((vt0.c0)<=(vt0.c2))) AND (((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1)))), (((vt0.c2 IN ())) IS FALSE)  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))OR(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)))OR((vt0.c0 IN (vt0.c0))))) ORDER BY CAST((- (vt0.c0)) AS NUMERIC) ASC  NULLS FIRST, ((((vt0.c0)<=(vt0.c1))) BETWEEN (((vt0.c1)OR(vt0.c2))) AND (((((vt0.c1)AND(vt0.c2)))OR(vt0.c0)))) LIMIT 1;
SELECT * FROM vt0 WHERE (((((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))OR(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)))OR((vt0.c0 IN (vt0.c0))))) ORDER BY ((x'3c') NOT BETWEEN (((vt0.c0)<=(vt0.c2))) AND (((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1)))), (((vt0.c2 IN ())) IS FALSE)  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)))OR(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)))OR((vt0.c0 IN (vt0.c0))))) ORDER BY CAST((- (vt0.c0)) AS NUMERIC) ASC  NULLS FIRST, ((((vt0.c0)<=(vt0.c1))) BETWEEN (((vt0.c1)OR(vt0.c2))) AND (((((vt0.c1)AND(vt0.c2)))OR(vt0.c0)))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c2) NOT NULL) THEN ((0.8060927868682781) NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN vt0.c1 THEN ((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)) WHEN ((vt0.c0) IS FALSE) THEN ((NULL)%(vt0.c1)) WHEN CASE 0.3377109241018583  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c2 END THEN ((vt0.c2)!=(vt0.c2)) END) ORDER BY (((vt0.c2) IS TRUE) IN (((((vt0.c0)AND(vt0.c0)))AND('-1')), ((NULL) IS FALSE)))  NULLS LAST, 0.8603098394370516;
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN ((vt0.c2) NOT NULL) THEN ((0.8060927868682781) NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN vt0.c1 THEN ((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)) WHEN ((vt0.c0) IS FALSE) THEN ((NULL)%(vt0.c1)) WHEN CASE 0.3377109241018583  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c2 END THEN ((vt0.c2)>(vt0.c2)) END)AND((((QUOTE(vt0.c2), ((vt0.c2)<<(vt0.c2))))>(((((vt0.c1, vt0.c0))<=((vt0.c1, vt0.c0))), CAST(vt0.c0 AS REAL))))))) ORDER BY -156674035 COLLATE BINARY DESC  NULLS FIRST, vt0.c2, ((vt0.c1) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (LIKE(vt0.c2, vt0.c0))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2)) IN ())) ORDER BY -156674035 COLLATE BINARY DESC  NULLS FIRST, vt0.c2, ((vt0.c1) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (LIKE(vt0.c2, vt0.c0))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c2) NOT NULL) THEN ((0.8060927868682781) NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN vt0.c1 THEN ((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)) WHEN ((vt0.c0) IS FALSE) THEN ((NULL)%(vt0.c1)) WHEN CASE 0.3377109241018583  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c2 END THEN ((vt0.c2)!=(vt0.c2)) END) ORDER BY (((vt0.c2) IS TRUE) IN (((((vt0.c0)AND(vt0.c0)))AND('-1')), ((NULL) IS FALSE)))  NULLS LAST, 0.8603098394370516;
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN ((vt0.c2) NOT NULL) THEN ((0.8060927868682781) NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN vt0.c1 THEN ((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)) WHEN ((vt0.c0) IS FALSE) THEN ((NULL)%(vt0.c1)) WHEN CASE 0.3377109241018583  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c2 END THEN ((vt0.c2)>(vt0.c2)) END)AND((((QUOTE(vt0.c2), ((vt0.c2)<<(vt0.c2))))>(((((vt0.c1, vt0.c0))<=((vt0.c1, vt0.c0))), CAST(vt0.c0 AS REAL))))))) ORDER BY -156674035 COLLATE BINARY DESC  NULLS FIRST, vt0.c2, ((vt0.c1) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (LIKE(vt0.c2, vt0.c0))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c2)) IN ())) ORDER BY -156674035 COLLATE BINARY DESC  NULLS FIRST, vt0.c2, ((vt0.c1) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (LIKE(vt0.c2, vt0.c0))) LIMIT 1;
SELECT ALL COUNT(*) FROM vt0 WHERE (CAST(CAST(vt0.c0 AS NUMERIC) AS BLOB)) ORDER BY (~ ('-vYv퉨L]a(')) ASC  NULLS FIRST, (NOT (((((vt0.c1)OR(x'581a32')))AND(vt0.c0)))) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (CAST(CAST(vt0.c0 AS NUMERIC) AS BLOB)) ORDER BY (~ ('-vYv퉨L]a(')) ASC  NULLS FIRST, (NOT (((((vt0.c1)OR(x'581a32')))AND(vt0.c0)))) DESC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c2) ORDER BY (~ ('-vYv퉨L]a(')) ASC  NULLS FIRST, (NOT (((((vt0.c1)OR(x'581a32')))AND(vt0.c0)))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c1))) BETWEEN (((vt0.c2) NOTNULL)) AND (CASE WHEN vt0.c0 THEN NULL WHEN 'kGE4kI' THEN vt0.c0 ELSE vt0.c1 END))) ORDER BY HEX(vt0.c1) COLLATE NOCASE DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c1))) BETWEEN (((vt0.c2) NOTNULL)) AND (CASE WHEN vt0.c0 THEN NULL WHEN 'kGE4kI' THEN vt0.c0 ELSE vt0.c1 END)))AND(CAST((NOT (vt0.c1)) AS NUMERIC)))) ORDER BY HEX(vt0.c1) COLLATE NOCASE DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))  WHEN ((vt0.c0)<(x'5448')) THEN ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1)) WHEN ((('-2007656163', vt0.c2, vt0.c0))<=((vt0.c0, vt0.c0, vt0.c0))) THEN (+ (vt0.c0)) END) ORDER BY HEX(vt0.c1) COLLATE NOCASE DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c1))) BETWEEN (((vt0.c2) NOTNULL)) AND (CASE WHEN vt0.c0 THEN NULL WHEN 'kGE4kI' THEN vt0.c0 ELSE vt0.c1 END))) ORDER BY HEX(vt0.c1) COLLATE NOCASE DESC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c1))) BETWEEN (((vt0.c2) NOTNULL)) AND (CASE WHEN vt0.c0 THEN NULL WHEN 'kGE4kI' THEN vt0.c0 ELSE vt0.c1 END)))AND(CAST((NOT (vt0.c1)) AS NUMERIC)))) ORDER BY HEX(vt0.c1) COLLATE NOCASE DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))  WHEN ((vt0.c0)<(x'5448')) THEN ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1)) WHEN ((('-2007656163', vt0.c2, vt0.c0))<=((vt0.c0, vt0.c0, vt0.c0))) THEN (+ (vt0.c0)) END) ORDER BY HEX(vt0.c1) COLLATE NOCASE DESC  NULLS FIRST LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (((('' IN ()))<=(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 END))) ORDER BY ((((vt0.c2)<<(vt0.c0))) BETWEEN (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END) AND (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c1)))), NULL, (((((vt0.c1, vt0.c2))==((vt0.c2, vt0.c2))))IS NOT(vt0.c1));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((('' IN ()))<(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c1 END)))AND(((('x>K', ((vt0.c2)GLOB(vt0.c2))))=((vt0.c2 COLLATE NOCASE, (((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c1, vt0.c1))))))))) ORDER BY CASE WHEN vt0.c2 COLLATE NOCASE THEN vt0.c2 COLLATE NOCASE WHEN ((0.98913677724792)-(vt0.c1)) THEN CASE WHEN vt0.c0 THEN x'939e' WHEN vt0.c2 THEN vt0.c0 END WHEN CAST(vt0.c1 AS NUMERIC) THEN ((vt0.c1) NOT NULL) WHEN vt0.c2 THEN ABS(vt0.c1) ELSE CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 END END DESC, (~ ((((vt0.c2))<=((vt0.c0))))) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (COALESCE(((vt0.c2)>>(vt0.c2)), ((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c2)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END)) ORDER BY CASE WHEN vt0.c2 COLLATE NOCASE THEN vt0.c2 COLLATE NOCASE WHEN ((0.98913677724792)-(vt0.c1)) THEN CASE WHEN vt0.c0 THEN x'939e' WHEN vt0.c2 THEN vt0.c0 END WHEN CAST(vt0.c1 AS NUMERIC) THEN ((vt0.c1) NOT NULL) WHEN vt0.c2 THEN ABS(vt0.c1) ELSE CASE vt0.c2  WHEN vt0.c0 THEN vt0.c0 END END DESC, (~ ((((vt0.c2))<=((vt0.c0))))) DESC;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (LOWER(((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((LOWER(((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0))))AND(ABS(DISTINCT (NOT (vt0.c1)))))) LIMIT 0x2 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((NOT (((vt0.c1) NOTNULL)))) LIMIT 2;
SELECT MAX(vt0.c2) FROM vt0 WHERE ('1379687995');
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ('1379687995') ORDER BY ((((vt0.c2) IS TRUE))<((((vt0.c0, vt0.c0, 'Z', vt0.c2)) BETWEEN ((vt0.c1, 0.9094425716423093, vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c1, vt0.c2, vt0.c2))))) DESC  NULLS LAST, (((CAST(vt0.c1 AS BLOB), UNICODE(vt0.c1), (vt0.c0 IN ())))<(((((vt0.c1))>=((x'57'))), (vt0.c0 IN ()), ((vt0.c0)IS NOT(x'5467'))))) DESC LIMIT 0x1;
SELECT * FROM vt0 WHERE (LTRIM(x'', vt0.c0 COLLATE NOCASE)) ORDER BY (('y')>(((((vt0.c2)OR(x'')))AND(vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (((LTRIM(x'', vt0.c0 COLLATE NOCASE))AND(LOWER(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))) ORDER BY (((((vt0.c2, vt0.c1, vt0.c1))<((0.9339882262354644, vt0.c0, vt0.c1))))<=(CAST(vt0.c2 AS REAL)))  NULLS FIRST, NULL  NULLS LAST, (((CAST(vt0.c0 AS TEXT), (((vt0.c2)) BETWEEN ((vt0.c0)) AND ((vt0.c2))), 0.689199140797152, CAST(vt0.c2 AS REAL)))>=(((~ (vt0.c0)), ((((vt0.c2)AND(vt0.c0)))AND(0.2662822200768149)), vt0.c2 COLLATE RTRIM, (vt0.c0 IN ()))))  NULLS LAST;
SELECT * FROM vt0 WHERE (LTRIM(x'', vt0.c0 COLLATE NOCASE)) ORDER BY (('y')>(((((vt0.c2)OR(x'')))AND(vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (((LTRIM(x'', vt0.c0 COLLATE NOCASE))AND(LOWER(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))) ORDER BY (((((vt0.c2, vt0.c1, vt0.c1))<((0.9339882262354644, vt0.c0, vt0.c1))))<=(CAST(vt0.c2 AS REAL)))  NULLS FIRST, NULL  NULLS LAST, (((CAST(vt0.c0 AS TEXT), (((vt0.c2)) BETWEEN ((vt0.c0)) AND ((vt0.c2))), 0.689199140797152, CAST(vt0.c2 AS REAL)))>=(((~ (vt0.c0)), ((((vt0.c2)AND(vt0.c0)))AND(0.2662822200768149)), vt0.c2 COLLATE RTRIM, (vt0.c0 IN ()))))  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (((((((LIKE(-5.93233478E8, vt0.c2, 'q'))AND(((vt0.c0)GLOB(vt0.c0)))))AND(vt0.c2 COLLATE BINARY)))AND(((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c1)))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((LIKE(-5.93233478E8, vt0.c2, 'q'))AND(((vt0.c0)GLOB(vt0.c0)))))AND(vt0.c2 COLLATE BINARY)))AND(((((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c1))))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE ('1');
SELECT * FROM vt0 NOT INDEXED WHERE (((((vt0.c0)LIKE(vt0.c2))) NOT BETWEEN (((((vt0.c1)AND(vt0.c2)))OR(vt0.c1))) AND ((vt0.c0 IN (vt0.c2))))) ORDER BY ''  NULLS LAST, SUBSTR(((vt0.c2) IS TRUE), (- (vt0.c1))) DESC, CASE WHEN COALESCE(DISTINCT vt0.c0, vt0.c2) THEN ((vt0.c2)GLOB(vt0.c0)) END  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)LIKE(vt0.c2))) NOT BETWEEN (((((vt0.c1)AND(vt0.c2)))OR(vt0.c1))) AND ((vt0.c0 IN (vt0.c2))))) ORDER BY ((CASE vt0.c1  WHEN vt0.c2 THEN '755139830' WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END)<((((0.7117868708622139, vt0.c1, vt0.c2, vt0.c2))==((vt0.c2, vt0.c0, vt0.c1, vt0.c1))))) ASC, ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.08317223945000918)))IS((('1315151292')|(756892767))))  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))<(((((vt0.c1)OR(x'eb')))OR(vt0.c0))))) ORDER BY ((CASE vt0.c1  WHEN vt0.c2 THEN '755139830' WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END)<((((0.7117868708622139, vt0.c1, vt0.c2, vt0.c2))==((vt0.c2, vt0.c0, vt0.c1, vt0.c1))))) ASC, ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.08317223945000918)))IS((('1315151292')|(0x2d1d445f))))  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0 NOT INDEXED WHERE (((((vt0.c0)LIKE(vt0.c2))) NOT BETWEEN (((((vt0.c1)AND(vt0.c2)))OR(vt0.c1))) AND ((vt0.c0 IN (vt0.c2))))) ORDER BY ''  NULLS LAST, SUBSTR(((vt0.c2) IS TRUE), (- (vt0.c1))) DESC, CASE WHEN COALESCE(DISTINCT vt0.c0, vt0.c2) THEN ((vt0.c2)GLOB(vt0.c0)) END  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)LIKE(vt0.c2))) NOT BETWEEN (((((vt0.c1)AND(vt0.c2)))OR(vt0.c1))) AND ((vt0.c0 IN (vt0.c2))))) ORDER BY ((CASE vt0.c1  WHEN vt0.c2 THEN '755139830' WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END)<((((0.7117868708622139, vt0.c1, vt0.c2, vt0.c2))==((vt0.c2, vt0.c0, vt0.c1, vt0.c1))))) ASC, ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.08317223945000918)))IS((('1315151292')|(756892767))))  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))<(((((vt0.c1)OR(x'eb')))OR(vt0.c0))))) ORDER BY ((CASE vt0.c1  WHEN vt0.c2 THEN '755139830' WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END)<((((0.7117868708622139, vt0.c1, vt0.c2, vt0.c2))==((vt0.c2, vt0.c0, vt0.c1, vt0.c1))))) ASC, ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.08317223945000918)))IS((('1315151292')|(0x2d1d445f))))  NULLS FIRST LIMIT 0X0;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((((vt0.c1)IS(vt0.c0)) IN (((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1))))) ORDER BY CASE WHEN (- (vt0.c0)) THEN (vt0.c2 IN ()) WHEN CASE WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN vt0.c2 END THEN ((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c0)) END, vt0.c1 DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ((((vt0.c1)IS(vt0.c0)) IN (((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1))))) ORDER BY CASE WHEN (- (vt0.c0)) THEN (vt0.c2 IN ()) WHEN CASE WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN vt0.c2 END THEN ((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c0)) END, vt0.c1 DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ('&77v䮂d') ORDER BY CASE WHEN (- (vt0.c0)) THEN (vt0.c2 IN ()) WHEN CASE WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN vt0.c2 END THEN ((((((vt0.c1)AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c0)) END, vt0.c1 DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((LAST_INSERT_ROWID())OR((((vt0.c1)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))))AND(((vt0.c1) ISNULL)))) ORDER BY vt0.c1 DESC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((LAST_INSERT_ROWID())OR((((vt0.c1)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))))AND(((vt0.c1) ISNULL))))AND(((((((((NULLIF(vt0.c2, NULL))OR(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END)))OR(CAST(vt0.c2 AS INTEGER))))OR((vt0.c1 IN ()))))OR(((vt0.c2)GLOB(vt0.c0))))))) ORDER BY ((((((vt0.c2)OR(vt0.c1)))OR(vt0.c1)))OR(((vt0.c1)IS(-2083275000)))) DESC  NULLS LAST, (((((vt0.c1, vt0.c2))>((vt0.c0, vt0.c1))))*((vt0.c0 IN (vt0.c1))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (-2021119798);
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((-2021119798)AND(((((((((vt0.c2)<<(')붌')))AND((((0x74b20b24, vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c2, vt0.c1, '')) AND ((vt0.c1, vt0.c0, vt0.c0))))))AND(LIKE(vt0.c0, vt0.c2, '|'))))OR(((vt0.c1) ISNULL)))))) ORDER BY CAST(CASE WHEN '0.6393047758352024' THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END AS INTEGER) DESC  NULLS FIRST, CAST(vt0.c0 AS INTEGER);
SELECT MIN(vt0.c2) FROM vt0 WHERE ((+ (NULLIF(vt0.c0, vt0.c1)))) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((((('-1025210939')) NOT BETWEEN ((vt0.c1)) AND ((0.1757652444912008))), vt0.c1 COLLATE NOCASE, '')) AND (((NOT ('-1191484573')), TRIM(vt0.c1, vt0.c0), ((((vt0.c0)OR(vt0.c2)))OR(vt0.c0)))));
SELECT MIN(vt0.c2) FROM vt0 WHERE ((+ (NULLIF(vt0.c0, vt0.c1)))) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((((('-1025210939')) NOT BETWEEN ((vt0.c1)) AND ((0.1757652444912008))), vt0.c1 COLLATE NOCASE, '')) AND (((NOT ('-1191484573')), TRIM(vt0.c1, vt0.c0), ((((vt0.c0)OR(vt0.c2)))OR(vt0.c0))))) INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE ((((((vt0.c2)||(vt0.c2)), CASE 0.9706296686450746  WHEN vt0.c1 THEN vt0.c1 WHEN NULL THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 END, ((vt0.c2) NOT BETWEEN (x'') AND (vt0.c1)), CAST(vt0.c0 AS TEXT)))<((((vt0.c0)|(vt0.c0)), ((vt0.c2)>>(vt0.c0)), (((vt0.c1))<((vt0.c0))), vt0.c1 COLLATE RTRIM)))) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((((('-1025210939')) NOT BETWEEN ((vt0.c1)) AND ((0.1757652444912008))), vt0.c1 COLLATE NOCASE, '')) AND (((NOT ('-1191484573')), TRIM(vt0.c1, vt0.c0), ((((vt0.c0)OR(vt0.c2)))OR(vt0.c0)))));
SELECT MIN(vt0.c2) FROM vt0 WHERE (((vt0.c0 COLLATE BINARY) IS FALSE)) ORDER BY CASE (vt0.c0 IN (vt0.c2, vt0.c0))  WHEN (('TRUE') BETWEEN (vt0.c2) AND (vt0.c2)) THEN CAST(vt0.c2 AS NUMERIC) ELSE ((vt0.c1) NOT NULL) END  NULLS FIRST, '1269070344' DESC;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((vt0.c0 COLLATE BINARY) IS FALSE)) ORDER BY CASE (vt0.c0 IN (vt0.c2, vt0.c0))  WHEN (('TRUE') BETWEEN (vt0.c2) AND (vt0.c2)) THEN CAST(vt0.c2 AS NUMERIC) ELSE ((vt0.c1) NOT NULL) END  NULLS FIRST, '1269070344' DESC INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((vt0.c2 COLLATE NOCASE)LIKE((((vt0.c1)) BETWEEN ((vt0.c2)) AND ((vt0.c2)))))) ORDER BY CASE (vt0.c0 IN (vt0.c2, vt0.c0))  WHEN (('TRUE') BETWEEN (vt0.c2) AND (vt0.c2)) THEN CAST(vt0.c2 AS NUMERIC) ELSE ((vt0.c1) NOT NULL) END  NULLS FIRST, '1269070344' DESC;
SELECT * FROM vt0 WHERE ((((+ (vt0.c1))) NOT BETWEEN (NULL) AND (((1.43158882E8) NOT BETWEEN (vt0.c2) AND (vt0.c1)))));
SELECT ALL * FROM vt0 WHERE ((((+ (vt0.c1))) NOT BETWEEN (NULL) AND (((1.43158882E8) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) LIMIT 0X2;
SELECT * FROM vt0 WHERE ((((+ (vt0.c1))) NOT BETWEEN (NULL) AND (((1.43158882E8) NOT BETWEEN (vt0.c2) AND (vt0.c1)))));
SELECT ALL * FROM vt0 WHERE ((((+ (vt0.c1))) NOT BETWEEN (NULL) AND (((1.43158882E8) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) LIMIT 0X2;
SELECT * FROM vt0 WHERE (((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt0.c2 COLLATE BINARY)))AND((((vt0.c0, x''))>((vt0.c1, vt0.c1))))));
SELECT * FROM vt0 WHERE (((((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt0.c2 COLLATE BINARY)))AND((((vt0.c0, x''))>((vt0.c1, vt0.c1))))))AND(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END COLLATE RTRIM))) LIMIT 0X2 INTERSECT SELECT ALL * FROM vt0 WHERE (json_array_length(LAST_INSERT_ROWID())) LIMIT 0X2;
SELECT * FROM vt0 WHERE (((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt0.c2 COLLATE BINARY)))AND((((vt0.c0, x''))>((vt0.c1, vt0.c1))))));
SELECT * FROM vt0 WHERE (((((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt0.c2 COLLATE BINARY)))AND((((vt0.c0, x''))>((vt0.c1, vt0.c1))))))AND(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END COLLATE RTRIM))) LIMIT 0X2 INTERSECT SELECT ALL * FROM vt0 WHERE (json_array_length(LAST_INSERT_ROWID())) LIMIT 0X2;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)OR(((vt0.c1)=(vt0.c2)))))AND(((vt0.c2)IS(vt0.c2))))) ORDER BY ((((((vt0.c1)AND(TYPEOF(DISTINCT vt0.c2))))AND('-612613323')))OR(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END))  NULLS FIRST, json_quote(CASE WHEN vt0.c2 THEN 0.8206332982192345 ELSE vt0.c1 END);
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)OR(((vt0.c1)==(vt0.c2)))))AND(((vt0.c2)IS(vt0.c2))))) ORDER BY ((CAST(vt0.c0 AS BLOB)) IS TRUE) DESC  NULLS LAST, HEX(((vt0.c1)+(vt0.c1))) ASC, 'c!' ASC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c2) ORDER BY ((CAST(vt0.c0 AS BLOB)) IS TRUE) DESC  NULLS LAST, HEX(((vt0.c1)+(vt0.c1))) ASC, 'c!' ASC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)OR(((vt0.c1)=(vt0.c2)))))AND(((vt0.c2)IS(vt0.c2))))) ORDER BY ((((((vt0.c1)AND(TYPEOF(DISTINCT vt0.c2))))AND('-612613323')))OR(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c1 END))  NULLS FIRST, json_quote(CASE WHEN vt0.c2 THEN 0.8206332982192345 ELSE vt0.c1 END);
SELECT ALL * FROM vt0 WHERE (vt0.c1);
SELECT * FROM vt0 WHERE (((vt0.c1)AND(((((((vt0.c0 COLLATE BINARY)OR(((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))AND(((vt0.c2) BETWEEN (x'') AND (vt0.c2)))))AND(LAST_INSERT_ROWID()))))) LIMIT 0x0 INTERSECT SELECT ALL * FROM vt0 WHERE (((vt0.c2 IN (vt0.c2)) IN ())) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (vt0.c1);
SELECT * FROM vt0 WHERE (((vt0.c1)AND(((((((vt0.c0 COLLATE BINARY)OR(((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))AND(((vt0.c2) BETWEEN (x'') AND (vt0.c2)))))AND(LAST_INSERT_ROWID()))))) LIMIT 0x0 INTERSECT SELECT ALL * FROM vt0 WHERE (((vt0.c2 IN (vt0.c2)) IN ())) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (0.10732310129434719) ORDER BY ((IFNULL(vt0.c0, vt0.c2)) NOTNULL) ASC;
SELECT * FROM vt0 WHERE (0.10732310129434719) ORDER BY ((IFNULL(vt0.c0, vt0.c2)) NOTNULL) ASC;
SELECT ALL * FROM vt0 WHERE (0.10732310129434719) ORDER BY ((IFNULL(vt0.c0, vt0.c2)) NOTNULL) ASC;
SELECT * FROM vt0 WHERE (0.10732310129434719) ORDER BY ((IFNULL(vt0.c0, vt0.c2)) NOTNULL) ASC;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (vt0.c2);
SELECT MAX(vt0.c2) FROM vt0 WHERE (vt0.c2) LIMIT 0 INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE ('447954577') LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE ((('X') NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (('-1037703831' IN (vt0.c0))))) ORDER BY ((NOT (vt0.c0)) IN (((vt0.c1)LIKE(vt0.c2)), (vt0.c0 IN (vt0.c2)))) ASC, ((((+ (vt0.c0)), NULL, ((vt0.c0)AND(vt0.c2))))<=((UNLIKELY(DISTINCT vt0.c2), (((NULL))!=((vt0.c2))), (('㒟숏
HXACbK') IS FALSE)))), 0x413e498d DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((('X') NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (('-1037703831' IN (vt0.c0))))) ORDER BY ((NOT (vt0.c0)) IN (((vt0.c1)LIKE(vt0.c2)), (vt0.c0 IN (vt0.c2)))) ASC, ((((+ (vt0.c0)), NULL, ((vt0.c0)AND(vt0.c2))))<=((UNLIKELY(DISTINCT vt0.c2), (((NULL))!=((vt0.c2))), (('㒟숏
HXACbK') IS FALSE)))), 1094601101 DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((('X') NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (('-1037703831' IN (vt0.c0))))) ORDER BY ((NOT (vt0.c0)) IN (((vt0.c1)LIKE(vt0.c2)), (vt0.c0 IN (vt0.c2)))) ASC, ((((+ (vt0.c0)), NULL, ((vt0.c0)AND(vt0.c2))))<=((UNLIKELY(DISTINCT vt0.c2), (((NULL))!=((vt0.c2))), (('㒟숏
HXACbK') IS FALSE)))), 0x413e498d DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((('-359981107' IN (vt0.c1)), CAST(vt0.c0 AS BLOB)))<=((CAST(vt0.c2 AS REAL), CAST(vt0.c1 AS TEXT)))));
SELECT DISTINCT * FROM vt0 WHERE ((((((('-359981107' IN (vt0.c1)), CAST(vt0.c0 AS BLOB)))<=((CAST(vt0.c2 AS REAL), CAST(vt0.c1 AS TEXT)))))AND(vt0.c1))) LIMIT 0X1;
SELECT * FROM vt0 WHERE ((((('-359981107' IN (vt0.c1)), CAST(vt0.c0 AS BLOB)))<=((CAST(vt0.c2 AS REAL), CAST(vt0.c1 AS TEXT)))));
SELECT DISTINCT * FROM vt0 WHERE ((((((('-359981107' IN (vt0.c1)), CAST(vt0.c0 AS BLOB)))<=((CAST(vt0.c2 AS REAL), CAST(vt0.c1 AS TEXT)))))AND(vt0.c1))) LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c1) IS FALSE)) ORDER BY CASE WHEN (- (vt0.c1)) THEN ((vt0.c2) ISNULL) WHEN NULL THEN ((x'07e2bc') IS TRUE) WHEN ((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c1)) THEN vt0.c1 COLLATE RTRIM END  NULLS LAST, ''  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c1) IS FALSE)) ORDER BY CASE WHEN (- (vt0.c1)) THEN ((vt0.c2) ISNULL) WHEN NULL THEN ((x'07e2bc') IS TRUE) WHEN ((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c1)) THEN vt0.c1 COLLATE RTRIM END  NULLS LAST, ''  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c1)IS(vt0.c1)) AS TEXT)) ORDER BY (((- (vt0.c2))) NOT BETWEEN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2))) AND (CAST(vt0.c2 AS INTEGER))), (+ (CASE WHEN vt0.c1 THEN x'4e3e' END))  NULLS LAST, CASE WHEN CAST(vt0.c2 AS INTEGER) THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END WHEN (vt0.c2 IN ()) THEN CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 ELSE NULL END ELSE ((vt0.c0) NOT NULL) END;
SELECT ALL * FROM vt0 WHERE (((CAST(((vt0.c1)IS(vt0.c1)) AS TEXT))AND(((NULL COLLATE NOCASE)<>((vt0.c2 IN (vt0.c1))))))) ORDER BY (NOT (NULLIF(DISTINCT vt0.c0, vt0.c2))) ASC LIMIT 0X2 INTERSECT SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS NUMERIC))<(((vt0.c0)<(vt0.c1))))) ORDER BY (NOT (NULLIF(DISTINCT vt0.c0, vt0.c2))) ASC LIMIT 2;
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c1)IS(vt0.c1)) AS TEXT)) ORDER BY (((- (vt0.c2))) NOT BETWEEN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2))) AND (CAST(vt0.c2 AS INTEGER))), (+ (CASE WHEN vt0.c1 THEN x'4e3e' END))  NULLS LAST, CASE WHEN CAST(vt0.c2 AS INTEGER) THEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END WHEN (vt0.c2 IN ()) THEN CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 ELSE NULL END ELSE ((vt0.c0) NOT NULL) END;
SELECT ALL * FROM vt0 WHERE (((CAST(((vt0.c1)IS(vt0.c1)) AS TEXT))AND(((NULL COLLATE NOCASE)<>((vt0.c2 IN (vt0.c1))))))) ORDER BY (NOT (NULLIF(DISTINCT vt0.c0, vt0.c2))) ASC LIMIT 0X2 INTERSECT SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS NUMERIC))<(((vt0.c0)<(vt0.c1))))) ORDER BY (NOT (NULLIF(DISTINCT vt0.c0, vt0.c2))) ASC LIMIT 2;
SELECT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0)<=('1924625993')) AS REAL)) ORDER BY CAST(((vt0.c0)OR(vt0.c0)) AS REAL)  NULLS LAST, (LIKELIHOOD(vt0.c1, vt0.c1) IN (((vt0.c1) IS FALSE))) DESC;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((CAST(((vt0.c0)<=('1924625993')) AS REAL))AND((((vt0.c1 IN (vt0.c2))) ISNULL)))) ORDER BY CAST(((vt0.c0)OR(vt0.c0)) AS REAL)  NULLS LAST, (LIKELIHOOD(vt0.c1, vt0.c1) IN (((vt0.c1) IS FALSE))) DESC;
SELECT COUNT(*) FROM vt0 WHERE (((((((vt0.c0)AND(NULL)))AND(vt0.c1))) ISNULL));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((((vt0.c0)AND(NULL)))AND(vt0.c1))) ISNULL))AND(CASE ((vt0.c0)&(vt0.c0))  WHEN vt0.c0 THEN CASE WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END ELSE (vt0.c1 IN (vt0.c2, vt0.c1)) END))) ORDER BY ((vt0.c0) BETWEEN (LIKELY(vt0.c1)) AND (('-81538456' IN ())))  NULLS FIRST, (((vt0.c1 IN ()))>(((vt0.c0)>>(vt0.c1)))) DESC  NULLS FIRST, TIME(((vt0.c0) BETWEEN (vt0.c0) AND ('-2081328921')), vt0.c1 COLLATE RTRIM, CAST(vt0.c0 AS TEXT));
SELECT ALL * FROM vt0 WHERE (((vt0.c0 IN (vt0.c2, vt0.c0)) IN (SUBSTR(x'', vt0.c2)))) ORDER BY ((CAST(vt0.c2 AS NUMERIC)) NOTNULL) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0 IN (vt0.c2, vt0.c0)) IN (SUBSTR(x'', vt0.c2))))AND(vt0.c2))) ORDER BY CAST(vt0.c2 COLLATE NOCASE AS BLOB), CAST(vt0.c1 AS TEXT) COLLATE NOCASE DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((CASE vt0.c2  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END IN ())) ORDER BY CAST(vt0.c2 COLLATE NOCASE AS BLOB), CAST(vt0.c1 AS TEXT) COLLATE NOCASE DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((vt0.c0 IN (vt0.c2, vt0.c0)) IN (SUBSTR(x'', vt0.c2)))) ORDER BY ((CAST(vt0.c2 AS NUMERIC)) NOTNULL) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0 IN (vt0.c2, vt0.c0)) IN (SUBSTR(x'', vt0.c2))))AND(vt0.c2))) ORDER BY CAST(vt0.c2 COLLATE NOCASE AS BLOB), CAST(vt0.c1 AS TEXT) COLLATE NOCASE DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((CASE vt0.c2  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END IN ())) ORDER BY CAST(vt0.c2 COLLATE NOCASE AS BLOB), CAST(vt0.c1 AS TEXT) COLLATE NOCASE DESC  NULLS LAST LIMIT 0;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c2)>(vt0.c1))) BETWEEN (DATETIME(vt0.c0, vt0.c1, vt0.c0)) AND (vt0.c1 COLLATE RTRIM)));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c2)>(vt0.c1))) BETWEEN (DATETIME(vt0.c0, vt0.c1, vt0.c0)) AND (vt0.c1 COLLATE RTRIM))) INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (json_array_length(((vt0.c2)AND(vt0.c2)), (vt0.c1 IN (').'))));
SELECT * FROM vt0 WHERE ((((vt0.c2 COLLATE NOCASE))<>(((x'c2ae' IN ())))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2 COLLATE NOCASE))<>(((x'c2ae' IN ()))))) ORDER BY (((vt0.c1)IS(vt0.c1)) IN ())  NULLS LAST, ((CASE WHEN vt0.c0 THEN '' WHEN vt0.c0 THEN vt0.c1 END) BETWEEN (vt0.c1) AND (TYPEOF(vt0.c0))) ASC;
SELECT * FROM vt0 WHERE ((((vt0.c2 COLLATE NOCASE))<>(((x'c2ae' IN ())))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c2 COLLATE NOCASE))<>(((x'c2ae' IN ()))))) ORDER BY (((vt0.c1)IS(vt0.c1)) IN ())  NULLS LAST, ((CASE WHEN vt0.c0 THEN '' WHEN vt0.c0 THEN vt0.c1 END) BETWEEN (vt0.c1) AND (TYPEOF(vt0.c0))) ASC;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((((NOT (vt0.c1))) NOTNULL)) ORDER BY ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END) NOT BETWEEN (-1.861244521E9) AND (((vt0.c1)>(vt0.c2)))) ASC, (+ (((NULL)<<(-1.727102346E9))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((NOT (vt0.c1))) NOTNULL)) ORDER BY ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END) NOT BETWEEN (-1.861244521E9) AND (((vt0.c1)>(vt0.c2)))) ASC, (+ (((NULL)<<(-1.727102346E9)))) INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (CAST(CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c2 END AS INTEGER)) ORDER BY ((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c2 END) NOT BETWEEN (-1.861244521E9) AND (((vt0.c1)>(vt0.c2)))) ASC, (+ (((NULL)<<(-1.727102346E9))));
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c1 COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c1 COLLATE RTRIM AS NUMERIC))AND(CASE WHEN ((vt0.c0) ISNULL) THEN (vt0.c2 IN ()) WHEN 0.7625664846138631 THEN vt0.c2 COLLATE NOCASE WHEN (vt0.c0 IN (vt0.c2)) THEN (vt0.c2 IN ('_i<萋Wa')) ELSE ((vt0.c2) IS FALSE) END))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1, vt0.c1)) NOT BETWEEN (((((vt0.c0, vt0.c2))>((vt0.c2, vt0.c2))), (((vt0.c0))>((vt0.c1))))) AND (((vt0.c0 IN (vt0.c0)), (((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2)))))));
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c1 COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c1 COLLATE RTRIM AS NUMERIC))AND(CASE WHEN ((vt0.c0) ISNULL) THEN (vt0.c2 IN ()) WHEN 0.7625664846138631 THEN vt0.c2 COLLATE NOCASE WHEN (vt0.c0 IN (vt0.c2)) THEN (vt0.c2 IN ('_i<萋Wa')) ELSE ((vt0.c2) IS FALSE) END))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1, vt0.c1)) NOT BETWEEN (((((vt0.c0, vt0.c2))>((vt0.c2, vt0.c2))), (((vt0.c0))>((vt0.c1))))) AND (((vt0.c0 IN (vt0.c0)), (((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2)))))));
SELECT * FROM vt0 WHERE (LIKELY(DISTINCT (((vt0.c2, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c1, vt0.c0)) AND ((vt0.c1, '?r펆
', vt0.c1, vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((LIKELY(DISTINCT (((vt0.c2, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c1, vt0.c0)) AND ((vt0.c1, '?r펆
', vt0.c1, vt0.c1)))))AND((((vt0.c0 IN (vt0.c0))) NOT BETWEEN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2))) AND ((((vt0.c1, vt0.c1))<>((vt0.c2, vt0.c0)))))))) ORDER BY ((((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 END)AND(((vt0.c2)LIKE(vt0.c1)))))AND((- (vt0.c1))))  NULLS FIRST, (((vt0.c1 IN ())) BETWEEN ((((vt0.c1, vt0.c2, vt0.c0, vt0.c0, '1617089569', vt0.c1, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c2, vt0.c1)) AND ((0X3d4893af, vt0.c1, vt0.c2, vt0.c1, vt0.c1, vt0.c1, vt0.c0)))) AND ((((vt0.c2, vt0.c1)) BETWEEN ((167540610, NULL)) AND ((vt0.c0, vt0.c2))))) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1, vt0.c1)) BETWEEN ((0.740236527996769, (('21801391') NOTNULL))) AND ((CAST(vt0.c1 AS REAL), ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))) ORDER BY ((((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 END)AND(((vt0.c2)LIKE(vt0.c1)))))AND((- (vt0.c1))))  NULLS FIRST, (((vt0.c1 IN ())) BETWEEN ((((vt0.c1, vt0.c2, vt0.c0, vt0.c0, '1617089569', vt0.c1, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c2, vt0.c1)) AND ((1028166575, vt0.c1, vt0.c2, vt0.c1, vt0.c1, vt0.c1, vt0.c0)))) AND ((((vt0.c2, vt0.c1)) BETWEEN ((167540610, NULL)) AND ((vt0.c0, vt0.c2))))) ASC;
SELECT * FROM vt0 WHERE (LIKELY(DISTINCT (((vt0.c2, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c1, vt0.c0)) AND ((vt0.c1, '?r펆
', vt0.c1, vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((LIKELY(DISTINCT (((vt0.c2, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c1, vt0.c0)) AND ((vt0.c1, '?r펆
', vt0.c1, vt0.c1)))))AND((((vt0.c0 IN (vt0.c0))) NOT BETWEEN (((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2))) AND ((((vt0.c1, vt0.c1))<>((vt0.c2, vt0.c0)))))))) ORDER BY ((((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 END)AND(((vt0.c2)LIKE(vt0.c1)))))AND((- (vt0.c1))))  NULLS FIRST, (((vt0.c1 IN ())) BETWEEN ((((vt0.c1, vt0.c2, vt0.c0, vt0.c0, '1617089569', vt0.c1, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c2, vt0.c1)) AND ((0X3d4893af, vt0.c1, vt0.c2, vt0.c1, vt0.c1, vt0.c1, vt0.c0)))) AND ((((vt0.c2, vt0.c1)) BETWEEN ((167540610, NULL)) AND ((vt0.c0, vt0.c2))))) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1, vt0.c1)) BETWEEN ((0.740236527996769, (('21801391') NOTNULL))) AND ((CAST(vt0.c1 AS REAL), ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))) ORDER BY ((((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c2 END)AND(((vt0.c2)LIKE(vt0.c1)))))AND((- (vt0.c1))))  NULLS FIRST, (((vt0.c1 IN ())) BETWEEN ((((vt0.c1, vt0.c2, vt0.c0, vt0.c0, '1617089569', vt0.c1, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1, vt0.c2, vt0.c2, vt0.c2, vt0.c2, vt0.c1)) AND ((1028166575, vt0.c1, vt0.c2, vt0.c1, vt0.c1, vt0.c1, vt0.c0)))) AND ((((vt0.c2, vt0.c1)) BETWEEN ((167540610, NULL)) AND ((vt0.c0, vt0.c2))))) ASC;
SELECT MIN(vt0.c2) FROM vt0 WHERE ((((NOT (0.418377645790023))) NOT BETWEEN (0.3300459805920405) AND (((vt0.c2)LIKE(x'e629')))));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE ((((NOT (0.418377645790023))) NOT BETWEEN (0.3300459805920405) AND (((vt0.c2)LIKE(x'e629'))))) LIMIT 0 INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (((0.9419892507103622) NOT BETWEEN (LOWER(vt0.c0)) AND (CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c2 END))) LIMIT 0X0;
SELECT MIN(vt0.c0) FROM vt0 WHERE ((- ((vt0.c2 IN (vt0.c2, vt0.c0)))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((- ((vt0.c2 IN (vt0.c2, vt0.c0)))))AND((((((vt0.c2, vt0.c1, '491686016')) NOT BETWEEN ((vt0.c2, vt0.c2, vt0.c0)) AND ((vt0.c1, vt0.c0, vt0.c1)))) BETWEEN (vt0.c2 COLLATE RTRIM) AND (vt0.c0 COLLATE NOCASE)))));
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c2) ORDER BY (+ (CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END)) DESC, ((((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1))) NOT BETWEEN ((vt0.c2 IN ())) AND (ABS(vt0.c0)));
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c2)AND(((((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0)))>=(x'' COLLATE NOCASE))))) ORDER BY (+ (CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c2 END)) DESC, ((((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c1))) NOT BETWEEN ((vt0.c2 IN ())) AND (ABS(vt0.c0)));
SELECT ALL * FROM vt0 WHERE ((((vt0.c2 IN (vt0.c2, vt0.c0)))<<('1056033120')));
SELECT ALL * FROM vt0 WHERE ((((vt0.c2 IN (vt0.c2)))<<('1056033120'))) ORDER BY ((vt0.c1) IS TRUE) ASC, (((vt0.c0)) NOT BETWEEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))) AND ((((vt0.c0) ISNULL)))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE ((- (vt0.c1)) COLLATE NOCASE COLLATE RTRIM) ORDER BY ((vt0.c1) IS TRUE) ASC, (((vt0.c0)) NOT BETWEEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))) AND ((((vt0.c0) ISNULL)))) ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c2 IN (vt0.c2, vt0.c0)))<<('1056033120')));
SELECT ALL * FROM vt0 WHERE ((((vt0.c2 IN (vt0.c2)))<<('1056033120'))) ORDER BY ((vt0.c1) IS TRUE) ASC, (((vt0.c0)) NOT BETWEEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))) AND ((((vt0.c0) ISNULL)))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE ((- (vt0.c1)) COLLATE NOCASE COLLATE RTRIM) ORDER BY ((vt0.c1) IS TRUE) ASC, (((vt0.c0)) NOT BETWEEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c2)))) AND ((((vt0.c0) ISNULL)))) ASC  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY ((CAST(-1.262403319E9 AS BLOB)) NOT NULL) DESC  NULLS LAST, ((vt0.c2) ISNULL), (+ (PRINTF(vt0.c0, NULL))) ASC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY ((CAST(-1.262403319E9 AS BLOB)) NOT NULL) DESC  NULLS LAST, ((vt0.c2) ISNULL), (+ (PRINTF(vt0.c0, NULL))) ASC LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((NULL)OR(vt0.c1)))OR(vt0.c0)))OR(vt0.c0)) COLLATE BINARY) ORDER BY ((CAST(-1.262403319E9 AS BLOB)) NOT NULL) DESC  NULLS LAST, ((vt0.c2) ISNULL), (+ (PRINTF(vt0.c0, NULL))) ASC LIMIT 1;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (CAST(rtreenode(vt0.c1, vt0.c2) AS TEXT));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((CAST(rtreenode(vt0.c1, vt0.c2) AS TEXT))AND(CASE vt0.c0  WHEN ((vt0.c1) NOTNULL) THEN (+ (vt0.c1)) END))) LIMIT 2 INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ((((x'e2')IS NOT(vt0.c2)) IN (vt0.c0))) LIMIT 2;
SELECT * FROM vt0 WHERE (((((vt0.c2) NOTNULL))=(((vt0.c1)<<(vt0.c0))))) ORDER BY (- (((((((((((vt0.c1)OR(0.8655626593798772)))OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))) DESC, ((('|K!-Mp'))>=((vt0.c2))) COLLATE RTRIM DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2) NOTNULL))==(((vt0.c1)<<(vt0.c0))))) ORDER BY ((((((((vt0.c0)AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c2)))OR(vt0.c1)) COLLATE BINARY COLLATE BINARY ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c2)))) NOT NULL)) ORDER BY ((((((((vt0.c0)AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c2)))OR(vt0.c1)) COLLATE BINARY COLLATE BINARY ASC;
SELECT * FROM vt0 WHERE (((((vt0.c2) NOTNULL))=(((vt0.c1)<<(vt0.c0))))) ORDER BY (- (((((((((((vt0.c1)OR(0.8655626593798772)))OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c2)))) DESC, ((('|K!-Mp'))>=((vt0.c2))) COLLATE RTRIM DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2) NOTNULL))==(((vt0.c1)<<(vt0.c0))))) ORDER BY ((((((((vt0.c0)AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c2)))OR(vt0.c1)) COLLATE BINARY COLLATE BINARY ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c2)))) NOT NULL)) ORDER BY ((((((((vt0.c0)AND(vt0.c2)))OR(vt0.c1)))AND(vt0.c2)))OR(vt0.c1)) COLLATE BINARY COLLATE BINARY ASC;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((((((((0.05447752435722886)LIKE(vt0.c1)))AND(CAST(vt0.c1 AS TEXT))))AND(CAST(vt0.c0 AS NUMERIC))))AND((+ (vt0.c0)))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((((((((0.05447752435722886)LIKE(vt0.c1)))AND(CAST(vt0.c1 AS TEXT))))AND(CAST(vt0.c0 AS NUMERIC))))AND((+ (vt0.c0)))))AND(((((CASE WHEN vt0.c1 THEN vt0.c2 END)OR((- (vt0.c0)))))AND(((x'7670')!=(vt0.c1))))))) ORDER BY ('298697454' IN ()), vt0.c1 DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (NULLIF((vt0.c2 IN (vt0.c2, NULL)), (vt0.c0 IN (vt0.c2))));
SELECT * FROM vt0 WHERE (((NULLIF((vt0.c2 IN (vt0.c2, NULL)), (vt0.c0 IN (vt0.c2))))AND(((((((((((((vt0.c2)OR(0X784de90b)))OR(vt0.c0)))AND(vt0.c2)))AND(vt0.c0)))AND(((vt0.c2)&(vt0.c0)))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (x'861dac'))))))) INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c2, vt0.c2, vt0.c0)) NOT BETWEEN (('-1239890065', CAST(vt0.c0 AS INTEGER), CASE WHEN vt0.c0 THEN 0.3309650893358512 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE 0x6cfadea9 END)) AND ((0xffffffffe68f5130, vt0.c1, ''))));
SELECT * FROM vt0 WHERE (NULLIF((vt0.c2 IN (vt0.c2, NULL)), (vt0.c0 IN (vt0.c2))));
SELECT * FROM vt0 WHERE (((NULLIF((vt0.c2 IN (vt0.c2, NULL)), (vt0.c0 IN (vt0.c2))))AND(((((((((((((vt0.c2)OR(0X784de90b)))OR(vt0.c0)))AND(vt0.c2)))AND(vt0.c0)))AND(((vt0.c2)&(vt0.c0)))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (x'861dac'))))))) INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c2, vt0.c2, vt0.c0)) NOT BETWEEN (('-1239890065', CAST(vt0.c0 AS INTEGER), CASE WHEN vt0.c0 THEN 0.3309650893358512 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE 0x6cfadea9 END)) AND ((0xffffffffe68f5130, vt0.c1, ''))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c2))>((x'8fab84'))) IN ())) ORDER BY (((((((((vt0.c0, NULL)) BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c2))))AND(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))))OR(CASE vt0.c2  WHEN '' THEN NULL END)))OR(COALESCE(DISTINCT vt0.c1, vt0.c1, vt0.c2)))  NULLS FIRST, ((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))LIKE((vt0.c1 IN (vt0.c1))));
SELECT ALL * FROM vt0 WHERE (((((((vt0.c2))>((x'8fab84'))) IN ()))AND((((NOT (vt0.c0))) IS FALSE)))) ORDER BY (((((((((vt0.c0, NULL)) BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c2))))AND(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))))OR(CASE vt0.c2  WHEN '' THEN NULL END)))OR(COALESCE(DISTINCT vt0.c1, vt0.c1, vt0.c2)))  NULLS FIRST, ((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))LIKE((vt0.c1 IN (vt0.c1)))) LIMIT 2 INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c1)LIKE(vt0.c2)))GLOB(CAST(vt0.c0 AS REAL)))) ORDER BY (((((((((vt0.c0, NULL)) BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c2))))AND(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))))OR(CASE vt0.c2  WHEN '' THEN NULL END)))OR(COALESCE(DISTINCT vt0.c1, vt0.c1, vt0.c2)))  NULLS FIRST, ((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))LIKE((vt0.c1 IN (vt0.c1)))) LIMIT 0X2;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2))>((x'8fab84'))) IN ())) ORDER BY (((((((((vt0.c0, NULL)) BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c2))))AND(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))))OR(CASE vt0.c2  WHEN '' THEN NULL END)))OR(COALESCE(DISTINCT vt0.c1, vt0.c1, vt0.c2)))  NULLS FIRST, ((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))LIKE((vt0.c1 IN (vt0.c1))));
SELECT ALL * FROM vt0 WHERE (((((((vt0.c2))>((x'8fab84'))) IN ()))AND((((NOT (vt0.c0))) IS FALSE)))) ORDER BY (((((((((vt0.c0, NULL)) BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c2))))AND(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))))OR(CASE vt0.c2  WHEN '' THEN NULL END)))OR(COALESCE(DISTINCT vt0.c1, vt0.c1, vt0.c2)))  NULLS FIRST, ((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))LIKE((vt0.c1 IN (vt0.c1)))) LIMIT 2 INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c1)LIKE(vt0.c2)))GLOB(CAST(vt0.c0 AS REAL)))) ORDER BY (((((((((vt0.c0, NULL)) BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c2))))AND(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))))OR(CASE vt0.c2  WHEN '' THEN NULL END)))OR(COALESCE(DISTINCT vt0.c1, vt0.c1, vt0.c2)))  NULLS FIRST, ((((((((vt0.c1)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))LIKE((vt0.c1 IN (vt0.c1)))) LIMIT 0X2;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((0.7155269818443248) BETWEEN (vt0.c2) AND (0Xffffffffa0bc937b)));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((0.7155269818443248) BETWEEN (vt0.c2) AND (-1598254213))) LIMIT 0;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((((0.19419564781558885)AND(INSTR(vt0.c1, vt0.c0))))OR((((vt0.c1, vt0.c2, vt0.c2, vt0.c1)) NOT BETWEEN ((NULL, vt0.c0, vt0.c2, vt0.c1)) AND ((vt0.c0, '-319391023', vt0.c0, vt0.c2))))))AND(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 ELSE 0.665774035205422 END)))OR(0.1276639066378763 COLLATE BINARY)));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((((((0.19419564781558885)AND(INSTR(vt0.c1, vt0.c0))))OR((((vt0.c1, vt0.c2, vt0.c2, vt0.c1)) NOT BETWEEN ((NULL, vt0.c0, vt0.c2, vt0.c1)) AND ((vt0.c0, '-319391023', vt0.c0, vt0.c2))))))AND(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 ELSE 0.665774035205422 END)))OR(0.1276639066378763 COLLATE BINARY))) INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (CAST((NOT (vt0.c1)) AS REAL));
SELECT * FROM vt0 WHERE ((CAST(vt0.c0 AS TEXT) IN ((((vt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c0))))));
SELECT DISTINCT * FROM vt0 WHERE ((((CAST(vt0.c0 AS TEXT) IN ((((vt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c0))))))AND(HEX(DISTINCT (NOT (vt0.c0)))))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0) NOTNULL))>=('%')));
SELECT * FROM vt0 WHERE ((CAST(vt0.c0 AS TEXT) IN ((((vt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c0))))));
SELECT DISTINCT * FROM vt0 WHERE ((((CAST(vt0.c0 AS TEXT) IN ((((vt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c0))))))AND(HEX(DISTINCT (NOT (vt0.c0)))))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0) NOTNULL))>=('%')));
SELECT COUNT(*) FROM vt0 WHERE (((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))&(((vt0.c1)>>(vt0.c1)))));
SELECT DISTINCT COUNT(*) FROM vt0 NOT INDEXED WHERE (((((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))&(((vt0.c1)>>(vt0.c1))))) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))/((vt0.c1 IN (vt0.c0, vt0.c1, vt0.c1)))), ((vt0.c1) IS FALSE) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE CAST(vt0.c1 AS NUMERIC)  WHEN CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END THEN CAST(vt0.c2 AS TEXT) WHEN '41A%
a' THEN CAST(vt0.c0 AS BLOB) WHEN (vt0.c0 IN ()) THEN (((vt0.c2, vt0.c2, vt0.c1, vt0.c1))==((vt0.c1, vt0.c1, vt0.c2, vt0.c0))) END) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))/((vt0.c1 IN (vt0.c0, vt0.c1, vt0.c1)))), ((vt0.c1) IS FALSE) ASC;
SELECT ALL * FROM vt0 WHERE ((NOT (TRIM(vt0.c1)))) ORDER BY TRIM(vt0.c0, (vt0.c1 IN (vt0.c1))) ASC, (NOT ((vt0.c0 IN (vt0.c0))))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((NOT (TRIM(vt0.c1))))AND(((CASE WHEN -181727494 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) NOT NULL)))) ORDER BY TRIM(vt0.c0, (vt0.c1 IN (vt0.c1))) ASC, (NOT ((vt0.c0 IN (vt0.c0))))  NULLS LAST LIMIT 0x1 INTERSECT SELECT * FROM vt0 NOT INDEXED WHERE ((NOT (((x'f400') NOT BETWEEN (vt0.c0) AND (0.04382143161763363))))) ORDER BY TRIM(vt0.c0, (vt0.c1 IN (vt0.c1))) ASC, (NOT ((vt0.c0 IN (vt0.c0))))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((NOT (TRIM(vt0.c1)))) ORDER BY TRIM(vt0.c0, (vt0.c1 IN (vt0.c1))) ASC, (NOT ((vt0.c0 IN (vt0.c0))))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((NOT (TRIM(vt0.c1))))AND(((CASE WHEN -181727494 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) NOT NULL)))) ORDER BY TRIM(vt0.c0, (vt0.c1 IN (vt0.c1))) ASC, (NOT ((vt0.c0 IN (vt0.c0))))  NULLS LAST LIMIT 0x1 INTERSECT SELECT * FROM vt0 NOT INDEXED WHERE ((NOT (((x'f400') NOT BETWEEN (vt0.c0) AND (0.04382143161763363))))) ORDER BY TRIM(vt0.c0, (vt0.c1 IN (vt0.c1))) ASC, (NOT ((vt0.c0 IN (vt0.c0))))  NULLS LAST LIMIT 0X1;
SELECT MAX(vt0.c1) FROM vt0 WHERE (((((~ (vt0.c2)), (NOT (vt0.c1))))<(((NOT (vt0.c1)), ((vt0.c2) ISNULL))))) ORDER BY vt0.c0 ASC;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((((((~ (vt0.c2)), (NOT (vt0.c1))))<(((NOT (vt0.c1)), ((vt0.c2) ISNULL)))))AND(((CAST(vt0.c2 AS REAL)) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (vt0.c0))))) ORDER BY vt0.c0 ASC;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0)GLOB(vt0.c2)), ((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)), ((vt0.c1)<<(NULL))))>=((json_patch(vt0.c1, vt0.c0), CAST(vt0.c0 AS TEXT), CAST(vt0.c2 AS REAL)))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0)GLOB(vt0.c2)), ((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)), ((vt0.c1)<<(NULL))))=((json_patch(vt0.c1, vt0.c0), CAST(vt0.c0 AS TEXT), CAST(vt0.c2 AS REAL)))));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0)GLOB(vt0.c2)), ((((((vt0.c2)AND(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)), ((vt0.c1)<<(NULL))))>=((json_patch(vt0.c1, vt0.c0), CAST(vt0.c0 AS TEXT), CAST(vt0.c2 AS REAL)))));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((+ (((vt0.c2)GLOB(vt0.c2)))));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((+ (((vt0.c2)GLOB(vt0.c2))))) INTERSECT SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (CASE ((vt0.c0) ISNULL)  WHEN ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)) THEN ((vt0.c0) ISNULL) END);
SELECT ALL * FROM vt0 WHERE ((((0.18316273162743524 IN ())) BETWEEN (((vt0.c1)>=(vt0.c0))) AND (NULL)));
SELECT DISTINCT * FROM vt0 WHERE ((((0.18316273162743524 IN ())) BETWEEN (((vt0.c1)>=(vt0.c0))) AND (NULL))) ORDER BY (((+ (vt0.c1)))||(vt0.c0)) LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((0.18316273162743524 IN ())) BETWEEN (((vt0.c1)>=(vt0.c0))) AND (NULL)));
SELECT DISTINCT * FROM vt0 WHERE ((((0.18316273162743524 IN ())) BETWEEN (((vt0.c1)>=(vt0.c0))) AND (NULL))) ORDER BY (((+ (vt0.c1)))||(vt0.c0)) LIMIT 0;
SELECT * FROM vt0 WHERE (CAST(json_type(vt0.c2) AS TEXT)) ORDER BY (NOT (CAST(vt0.c1 AS TEXT))) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (CAST(json_type(vt0.c2) AS TEXT)) ORDER BY (NOT (CAST(vt0.c1 AS TEXT))) DESC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt0 WHERE (CAST(json_type(vt0.c2) AS TEXT)) ORDER BY (NOT (CAST(vt0.c1 AS TEXT))) DESC  NULLS FIRST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (((((((((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c1)))AND(((vt0.c1)>(vt0.c0)))))AND('S䉵K9' COLLATE BINARY)))AND((+ (vt0.c0))))) ORDER BY ((((vt0.c2) IS FALSE))*(((vt0.c1)IS NOT(vt0.c2))))  NULLS LAST, vt0.c0 ASC  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((((((((((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c1)))AND(((vt0.c1)>(vt0.c0)))))AND('S䉵K9' COLLATE BINARY)))AND((+ (vt0.c0)))))AND((((vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c2, ((vt0.c0)<<(vt0.c2)))) AND ((((vt0.c2)IS NOT(vt0.c0)), ((((vt0.c2)OR(vt0.c0)))OR(vt0.c0)))))))) ORDER BY ((((vt0.c2) IS FALSE))*(((vt0.c1)IS NOT(vt0.c2))))  NULLS LAST, vt0.c0 ASC  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (vt0.c0);
SELECT MAX(vt0.c0) FROM vt0 WHERE (vt0.c0) INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE ((((+ ('356680473'))) IS TRUE));
SELECT * FROM vt0 WHERE (CASE (('i籼r퀓7,>RI') ISNULL)  WHEN (vt0.c0 IN (vt0.c1)) THEN CAST(vt0.c2 AS INTEGER) END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE (('i籼r퀓7,>RI') ISNULL)  WHEN (vt0.c0 IN (vt0.c1)) THEN CAST(vt0.c2 AS INTEGER) END)AND(((((vt0.c1) ISNULL)) IS TRUE)))) LIMIT 0X1;
SELECT * FROM vt0 WHERE (CASE (('i籼r퀓7,>RI') ISNULL)  WHEN (vt0.c0 IN (vt0.c1)) THEN CAST(vt0.c2 AS INTEGER) END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE (('i籼r퀓7,>RI') ISNULL)  WHEN (vt0.c0 IN (vt0.c1)) THEN CAST(vt0.c2 AS INTEGER) END)AND(((((vt0.c1) ISNULL)) IS TRUE)))) LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c1)>>(vt0.c0)))|(((((vt0.c2)AND('/H')))AND(vt0.c0)))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((vt0.c1)>>(vt0.c0)))|(((((vt0.c2)AND('/H')))AND(vt0.c0))))) LIMIT 1;
SELECT * FROM vt0 WHERE (1098133784);
SELECT ALL * FROM vt0 WHERE (1098133784);
SELECT * FROM vt0 WHERE (1098133784);
SELECT ALL * FROM vt0 WHERE (1098133784);
SELECT * FROM vt0 WHERE ((((- (vt0.c0)))GLOB(((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)))));
SELECT * FROM vt0 WHERE ((((((- (vt0.c0)))GLOB(((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)))))AND((CAST(vt0.c0 AS NUMERIC) IN (CAST(vt0.c0 AS TEXT), (((vt0.c0, vt0.c0, vt0.c1, vt0.c1)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0, vt0.c0)) AND ((NULL, vt0.c2, vt0.c1, vt0.c0)))))))) ORDER BY ((vt0.c1 COLLATE RTRIM) NOT BETWEEN (vt0.c0) AND ((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c1) NOT NULL))%(vt0.c0 COLLATE NOCASE))) ORDER BY ((vt0.c1 COLLATE RTRIM) NOT BETWEEN (vt0.c0) AND ((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE ((((- (vt0.c0)))GLOB(((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)))));
SELECT * FROM vt0 WHERE ((((((- (vt0.c0)))GLOB(((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)))))AND((CAST(vt0.c0 AS NUMERIC) IN (CAST(vt0.c0 AS TEXT), (((vt0.c0, vt0.c0, vt0.c1, vt0.c1)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0, vt0.c0)) AND ((NULL, vt0.c2, vt0.c1, vt0.c0)))))))) ORDER BY ((vt0.c1 COLLATE RTRIM) NOT BETWEEN (vt0.c0) AND ((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c1) NOT NULL))%(vt0.c0 COLLATE NOCASE))) ORDER BY ((vt0.c1 COLLATE RTRIM) NOT BETWEEN (vt0.c0) AND ((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c2 IN (vt0.c2)))IS NOT((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0)))))) ORDER BY (((vt0.c1)) BETWEEN (((~ (vt0.c1)))) AND ((((vt0.c1)>>(vt0.c1))))) DESC, vt0.c2 ASC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((vt0.c2 IN (vt0.c2)))IS NOT((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))))AND(((CAST(NULL AS TEXT))-(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 END))))) ORDER BY LOWER(vt0.c2 COLLATE BINARY)  NULLS FIRST, LIKELY(0.6043733979055806)  NULLS FIRST LIMIT 0X3;
SELECT * FROM vt0 WHERE (((((((vt0.c0)/(vt0.c0)))AND(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))AND(((vt0.c1)IS NOT(vt0.c0)))));
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c0)/(vt0.c0)))AND(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))AND(((vt0.c1)IS NOT(vt0.c0)))))AND(((CASE WHEN vt0.c2 THEN vt0.c2 END) NOT BETWEEN ((((vt0.c2))==((x'2bdf')))) AND (vt0.c2))))) INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c1, vt0.c2, vt0.c2, vt0.c1)) AND ((vt0.c1, 0.6239370828700521, vt0.c2, vt0.c0, vt0.c2))) IN ((vt0.c2 IN ()), ((vt0.c0) NOTNULL))));
SELECT * FROM vt0 WHERE (((((((vt0.c0)/(vt0.c0)))AND(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))AND(((vt0.c1)IS NOT(vt0.c0)))));
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c0)/(vt0.c0)))AND(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)))))AND(((vt0.c1)IS NOT(vt0.c0)))))AND(((CASE WHEN vt0.c2 THEN vt0.c2 END) NOT BETWEEN ((((vt0.c2))==((x'2bdf')))) AND (vt0.c2))))) INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0, vt0.c1, vt0.c0, vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c2, vt0.c1, vt0.c2, vt0.c2, vt0.c1)) AND ((vt0.c1, 0.6239370828700521, vt0.c2, vt0.c0, vt0.c2))) IN ((vt0.c2 IN ()), ((vt0.c0) NOTNULL))));
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE vt0.c1  WHEN vt0.c1 COLLATE BINARY THEN (('[	fnt዆_%')!=(vt0.c1)) WHEN (vt0.c0 IN ()) THEN CAST(vt0.c1 AS TEXT) WHEN (0xffffffffa287948c IN (vt0.c2)) THEN '' ELSE ((vt0.c1) IS TRUE) END);
SELECT COUNT(*) FROM vt0 WHERE (((CASE vt0.c1  WHEN vt0.c1 COLLATE BINARY THEN (('[	fnt዆_%')>(vt0.c1)) WHEN (vt0.c0 IN ()) THEN CAST(vt0.c1 AS TEXT) WHEN (0xffffffffa287948c IN (vt0.c2)) THEN '' ELSE ((vt0.c1) IS TRUE) END)AND((((NOT ('E')))+(CAST(vt0.c1 AS TEXT)))))) ORDER BY CASE WHEN vt0.c1 THEN ((((vt0.c2)AND(vt0.c2)))OR(vt0.c0)) WHEN CASE 0.2688403478737973  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN 0.7668701230075815 END THEN CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN '' THEN x'' ELSE vt0.c1 END WHEN vt0.c1 THEN CASE WHEN vt0.c1 THEN vt0.c2 END WHEN ((vt0.c2)<(vt0.c0)) THEN NULL ELSE (('&㨸') IS TRUE) END  NULLS LAST, TRIM((('-1396787381')||(vt0.c2)), ((vt0.c0)LIKE(vt0.c2))) ASC  NULLS FIRST, CASE SQLITE_VERSION()  WHEN vt0.c1 THEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c0)) WHEN ((vt0.c2)>(vt0.c2)) THEN (vt0.c1 IN (vt0.c2)) WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN CAST(vt0.c0 AS INTEGER) WHEN vt0.c0 THEN (vt0.c2 IN ()) WHEN CASE vt0.c1  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 ELSE 0x7f9cc160 END THEN ((vt0.c0)>(vt0.c2)) WHEN CAST(vt0.c0 AS NUMERIC) THEN SQLITE_COMPILEOPTION_GET(vt0.c2) END DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE WHEN ((vt0.c2)IS(vt0.c1)) THEN (vt0.c0 IN (vt0.c2)) END);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CASE WHEN ((vt0.c2)IS(vt0.c1)) THEN (vt0.c0 IN (vt0.c2)) END)AND(vt0.c1))) LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE WHEN CAST(vt0.c2 AS REAL) THEN CAST(vt0.c0 AS NUMERIC) WHEN ((vt0.c1) IS FALSE) THEN ((vt0.c0)*(vt0.c1)) ELSE (vt0.c0 IN ()) END) LIMIT 0x0;
SELECT * FROM vt0 WHERE (((((vt0.c0)!=(vt0.c0))) BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND ((vt0.c1 IN ()))));
SELECT * FROM vt0 WHERE (((((vt0.c0)<(vt0.c0))) BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND ((vt0.c1 IN ())))) INTERSECT SELECT ALL * FROM vt0 WHERE (CAST(vt0.c1 AS REAL));
SELECT * FROM vt0 WHERE (((((vt0.c0)!=(vt0.c0))) BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND ((vt0.c1 IN ()))));
SELECT * FROM vt0 WHERE (((((vt0.c0)<(vt0.c0))) BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND ((vt0.c1 IN ())))) INTERSECT SELECT ALL * FROM vt0 WHERE (CAST(vt0.c1 AS REAL));
SELECT * FROM vt0 WHERE (((((((((((CASE WHEN x'3fcc' THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)OR(0.19222936152202408)))OR(((vt0.c1)>(vt0.c2)))))OR(((vt0.c1)>(vt0.c1)))))OR(((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))))AND(x'')));
SELECT DISTINCT * FROM vt0 WHERE (((((((((((CASE WHEN x'3fcc' THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)OR(0.19222936152202408)))OR(((vt0.c1)>(vt0.c2)))))OR(((vt0.c1)>(vt0.c1)))))OR(((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))))AND(x''))) LIMIT 0X1;
SELECT * FROM vt0 WHERE (((((((((((CASE WHEN x'3fcc' THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)OR(0.19222936152202408)))OR(((vt0.c1)>(vt0.c2)))))OR(((vt0.c1)>(vt0.c1)))))OR(((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))))AND(x'')));
SELECT DISTINCT * FROM vt0 WHERE (((((((((((CASE WHEN x'3fcc' THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)OR(0.19222936152202408)))OR(((vt0.c1)>(vt0.c2)))))OR(((vt0.c1)>(vt0.c1)))))OR(((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))))AND(x''))) LIMIT 0X1;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((LIKELY(vt0.c0))-(CAST(vt0.c1 AS INTEGER))));
SELECT MIN(vt0.c1) FROM vt0 WHERE (((LIKELY(vt0.c0))-(CAST(vt0.c1 AS INTEGER)))) ORDER BY ((((((((((((((vt0.c2)AND(vt0.c0)))OR(NULL)))AND(vt0.c2)))OR(vt0.c2 COLLATE BINARY)))OR(HEX(DISTINCT vt0.c0))))AND(CAST(vt0.c2 AS BLOB))))AND(((vt0.c0)+(vt0.c0))))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE ((~ (vt0.c2)) COLLATE RTRIM);
SELECT DISTINCT * FROM vt0 WHERE ((((~ (vt0.c2)) COLLATE RTRIM)AND('0.6235000268949388'))) ORDER BY ((((((((vt0.c0) ISNULL))AND((vt0.c0 IN ()))))OR((vt0.c0 IN ()))))AND((((vt0.c2, vt0.c0, vt0.c1))>=((vt0.c1, vt0.c2, vt0.c0))))) ASC  NULLS FIRST, 0.19402833967687438 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)))%(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END))) ORDER BY ((((((((vt0.c0) ISNULL))AND((vt0.c0 IN ()))))OR((vt0.c0 IN ()))))AND((((vt0.c2, vt0.c0, vt0.c1))>=((vt0.c1, vt0.c2, vt0.c0))))) ASC  NULLS FIRST, 0.19402833967687438;
SELECT ALL * FROM vt0 WHERE ((~ (vt0.c2)) COLLATE RTRIM);
SELECT DISTINCT * FROM vt0 WHERE ((((~ (vt0.c2)) COLLATE RTRIM)AND('0.6235000268949388'))) ORDER BY ((((((((vt0.c0) ISNULL))AND((vt0.c0 IN ()))))OR((vt0.c0 IN ()))))AND((((vt0.c2, vt0.c0, vt0.c1))>=((vt0.c1, vt0.c2, vt0.c0))))) ASC  NULLS FIRST, 0.19402833967687438 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)))%(CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 END))) ORDER BY ((((((((vt0.c0) ISNULL))AND((vt0.c0 IN ()))))OR((vt0.c0 IN ()))))AND((((vt0.c2, vt0.c0, vt0.c1))>=((vt0.c1, vt0.c2, vt0.c0))))) ASC  NULLS FIRST, 0.19402833967687438;
SELECT MAX(vt0.c1) FROM vt0 WHERE (CASE vt0.c2  WHEN ((vt0.c0)<(vt0.c0)) THEN vt0.c0 COLLATE NOCASE ELSE CAST(vt0.c1 AS REAL) END);
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((CASE vt0.c2  WHEN ((vt0.c0)<(vt0.c0)) THEN vt0.c0 COLLATE NOCASE ELSE CAST(vt0.c1 AS REAL) END)AND(((vt0.c2)LIKE(CASE WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END))))) ORDER BY CAST(vt0.c0 AS BLOB) COLLATE NOCASE  NULLS LAST, vt0.c2 ASC LIMIT 0X0;
SELECT * FROM vt0 NOT INDEXED WHERE (((CAST(vt0.c2 AS REAL))>>(((((NULL)AND(vt0.c0)))OR('-891722830')))));
SELECT * FROM vt0 WHERE (((((CAST(vt0.c2 AS REAL))>>(((((NULL)AND(vt0.c0)))OR('-891722830')))))AND((((vt0.c1 IN (vt0.c1)))<=(0.7696813034384814)))));
SELECT * FROM vt0 NOT INDEXED WHERE (((CAST(vt0.c2 AS REAL))>>(((((NULL)AND(vt0.c0)))OR('-891722830')))));
SELECT * FROM vt0 WHERE (((((CAST(vt0.c2 AS REAL))>>(((((NULL)AND(vt0.c0)))OR('-891722830')))))AND((((vt0.c1 IN (vt0.c1)))<=(0.7696813034384814)))));
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c2 IN (vt0.c1))) NOTNULL)) ORDER BY (((vt0.c0 IN ())) NOT BETWEEN (vt0.c0 COLLATE BINARY) AND (((((((((vt0.c2)OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c0)))) DESC, LOWER(DISTINCT (vt0.c1 IN (vt0.c0)))  NULLS LAST;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c2 IN (vt0.c1))) NOTNULL)) ORDER BY CAST(vt0.c0 AS TEXT) ASC  NULLS LAST LIMIT 2;
SELECT COUNT(*) FROM vt0 WHERE (((CAST(NULL AS REAL)) NOT BETWEEN ((((vt0.c1, vt0.c0, vt0.c0))==((NULL, 2.140979552E9, vt0.c2)))) AND (UPPER(vt0.c2)))) ORDER BY CASE (vt0.c2 IN (vt0.c0))  WHEN ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2)) THEN ((vt0.c0) ISNULL) WHEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END THEN CASE vt0.c1  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN 0.5067149724407262 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c0 END WHEN ((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)) THEN CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN NULL THEN vt0.c1 ELSE vt0.c0 END WHEN ((vt0.c1) IS FALSE) THEN (((vt0.c2, 2009428954, vt0.c2, vt0.c2, vt0.c0))<((x'35', vt0.c2, vt0.c2, vt0.c0, vt0.c1))) WHEN vt0.c2 COLLATE BINARY THEN CASE vt0.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END END  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (((CAST(NULL AS REAL)) NOT BETWEEN ((((vt0.c1, vt0.c0, vt0.c0))>=((NULL, 2.140979552E9, vt0.c2)))) AND (UPPER(vt0.c2)))) ORDER BY ((((((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR((vt0.c0 IN ()))))AND(((vt0.c0) IS FALSE))) ASC  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE ((vt0.c1 IN ()));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1 IN ()))AND(x'86fc'))) ORDER BY ((NULLIF(DISTINCT vt0.c1, vt0.c1))&(CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN '-385172483' END)) ASC, TRIM(((vt0.c2)<=(vt0.c0)))  NULLS LAST, (~ (vt0.c0)) COLLATE BINARY COLLATE BINARY  NULLS LAST, 'o[tV' ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE ((vt0.c1 IN ()));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1 IN ()))AND(x'86fc'))) ORDER BY ((NULLIF(DISTINCT vt0.c1, vt0.c1))&(CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN '-385172483' END)) ASC, TRIM(((vt0.c2)<=(vt0.c0)))  NULLS LAST, (~ (vt0.c0)) COLLATE BINARY COLLATE BINARY  NULLS LAST, 'o[tV' ASC  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((((((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2)))OR(((vt0.c0) NOTNULL))))AND(CASE vt0.c2  WHEN 0.52325166136672 THEN '620177035' END)))OR('529023781')))AND((vt0.c2 IN ()))))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1))))) ORDER BY (((((((((('+Z') BETWEEN (vt0.c0) AND (vt0.c1)))OR(vt0.c0 COLLATE BINARY)))AND(((((((vt0.c2)AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c0)))))OR(UPPER(vt0.c1))))AND((((vt0.c2, 3.48431335E8)) NOT BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c1)))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((((((((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2)))OR(((vt0.c0) NOTNULL))))AND(CASE vt0.c2  WHEN 0.52325166136672 THEN '620177035' END)))OR('529023781')))AND((vt0.c2 IN ()))))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1))))) ORDER BY (((((((((('+Z') BETWEEN (vt0.c0) AND (vt0.c1)))OR(vt0.c0 COLLATE BINARY)))AND(((((((vt0.c2)AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c0)))))OR(UPPER(vt0.c1))))AND((((vt0.c2, 3.48431335E8)) NOT BETWEEN ((vt0.c1, vt0.c2)) AND ((vt0.c0, vt0.c1)))));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((((vt0.c0)>=(vt0.c0))) ISNULL));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((((((vt0.c0)=(vt0.c0))) ISNULL))AND(((MIN(vt0.c1, vt0.c1, vt0.c2, 0X29e77052))>=((~ (vt0.c1))))))) INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (CASE WHEN 1.098133784E9 THEN (NOT ('-166187581')) WHEN (((x'', vt0.c1, vt0.c1))>=((vt0.c0, vt0.c1, vt0.c1))) THEN ((vt0.c2) NOTNULL) ELSE (vt0.c1 IN (vt0.c0)) END);
SELECT ALL * FROM vt0 WHERE (load_extension(CASE WHEN vt0.c2 THEN vt0.c2 END, ((vt0.c2)*(vt0.c2)))) ORDER BY (((CAST(vt0.c2 AS REAL)))>((((((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c1)))AND('382587228')))OR(vt0.c2))))) DESC  NULLS FIRST, x'5642'  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (load_extension(CASE WHEN vt0.c2 THEN vt0.c2 END, ((vt0.c2)*(vt0.c2)))) ORDER BY ((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c1 END)||(((vt0.c0) NOT NULL))) DESC  NULLS FIRST, CAST((vt0.c1 IN (NULL, vt0.c2)) AS NUMERIC);
SELECT ALL * FROM vt0 WHERE (load_extension(CASE WHEN vt0.c2 THEN vt0.c2 END, ((vt0.c2)*(vt0.c2)))) ORDER BY (((CAST(vt0.c2 AS REAL)))>((((((((((((vt0.c2)AND(vt0.c2)))AND(vt0.c0)))AND(vt0.c1)))AND('382587228')))OR(vt0.c2))))) DESC  NULLS FIRST, x'5642'  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 END)>>(((vt0.c0)+(x'f6d1')))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((CASE vt0.c1  WHEN vt0.c2 THEN vt0.c0 END)>>(((vt0.c0)+(x'f6d1')))))AND(LTRIM(vt0.c0, vt0.c1) COLLATE BINARY))) ORDER BY (CAST(vt0.c1 AS INTEGER) IN ())  NULLS LAST, ((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2))) ISNULL)  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CAST(((vt0.c1)>(vt0.c1)) AS INTEGER)) ORDER BY (CAST(vt0.c1 AS INTEGER) IN ())  NULLS LAST, ((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c2))) ISNULL)  NULLS FIRST LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt0 WHERE (json_type(vt0.c0)) ORDER BY ((CAST(vt0.c1 AS TEXT))<<(((((NULL)OR(vt0.c2)))AND(vt0.c1)))) ASC  NULLS FIRST, ((((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c0)))OR(IFNULL(vt0.c1, vt0.c0))))AND(((vt0.c2)LIKE(vt0.c1)))) ASC  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (((json_type(vt0.c0))AND(((vt0.c1 COLLATE RTRIM) BETWEEN ('1042807666') AND ((vt0.c0 IN ())))))) ORDER BY vt0.c1 DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)GLOB(vt0.c1))) BETWEEN (json_object(vt0.c1, vt0.c0)) AND (((vt0.c1)IS(vt0.c2)))));
SELECT ALL * FROM vt0 WHERE (((((((vt0.c2)GLOB(vt0.c1))) BETWEEN (json_object(vt0.c1, vt0.c0)) AND (((vt0.c1)IS(vt0.c2)))))AND((((vt0.c2 IN (vt0.c1)))OR(((vt0.c2) IS TRUE)))))) LIMIT 4;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)GLOB(vt0.c1))) BETWEEN (json_object(vt0.c1, vt0.c0)) AND (((vt0.c1)IS(vt0.c2)))));
SELECT * FROM vt0 WHERE ('207534036');
SELECT * FROM vt0 WHERE ('207534036') LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE ((((x'459d8801' COLLATE BINARY))>((vt0.c0)))) LIMIT 0X0;
SELECT * FROM vt0 WHERE ('207534036');
SELECT * FROM vt0 WHERE ('207534036') LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE ((((x'459d8801' COLLATE BINARY))>((vt0.c0)))) LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(CAST(vt0.c1 AS REAL)))) ORDER BY vt0.c2 DESC  NULLS FIRST, CASE (~ (vt0.c1))  WHEN ((vt0.c1)||(vt0.c2)) THEN (((vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c2))) END DESC  NULLS FIRST, (((- (vt0.c2)))|(NULL)) DESC;
SELECT ALL * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(CAST(vt0.c1 AS REAL)))) ORDER BY vt0.c2 DESC  NULLS FIRST, CASE (~ (vt0.c1))  WHEN ((vt0.c1)||(vt0.c2)) THEN (((vt0.c2, vt0.c0)) NOT BETWEEN ((vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c2))) END DESC  NULLS FIRST, (((- (vt0.c2)))|(NULL)) DESC;
SELECT MAX(vt0.c1) FROM vt0 WHERE ((CASE WHEN vt0.c0 THEN vt0.c2 WHEN x'd1e7' THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN '617402341' THEN 'Lua{uT|<J' ELSE vt0.c1 END IN ())) ORDER BY CAST((NOT (vt0.c1)) AS INTEGER) ASC  NULLS FIRST, (NOT (((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1))));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE ((((CASE WHEN vt0.c0 THEN vt0.c2 WHEN x'd1e7' THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN '617402341' THEN 'Lua{uT|<J' ELSE vt0.c1 END IN ()))AND(((ROUND(vt0.c2, '617402341')) IS TRUE)))) ORDER BY (- (vt0.c1)) ASC  NULLS LAST, (CASE WHEN vt0.c1 THEN vt0.c0 END IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) DESC INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (CASE (NOT ('-1763340520'))  WHEN CAST('-150641148' AS REAL) THEN ((vt0.c1) IS TRUE) WHEN ((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)) THEN ((vt0.c0) BETWEEN (-1050285751) AND (vt0.c0)) ELSE ((vt0.c1)OR(0.01133244941741074)) END) ORDER BY (- (vt0.c1)) ASC  NULLS LAST, (CASE WHEN vt0.c1 THEN vt0.c0 END IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) DESC;
SELECT MIN(vt0.c2) FROM vt0 WHERE ((vt0.c2 IN (vt0.c1)) COLLATE BINARY);
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE ((((vt0.c2 IN (vt0.c1)) COLLATE BINARY)AND(((CASE vt0.c0  WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END)=(vt0.c0))))) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS NUMERIC) DESC, ((RTRIM(x'8f')) NOTNULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (CAST(((vt0.c0)AND(vt0.c0)) AS TEXT)) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS NUMERIC) DESC, ((RTRIM(x'8f')) NOTNULL) ASC  NULLS LAST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (-1.880625023E9);
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (-1.880625023E9) ORDER BY MIN(((vt0.c2)<<(vt0.c1)), vt0.c0, ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0)), (vt0.c1 IN (vt0.c2, vt0.c0))) DESC LIMIT 0x1;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE ((vt0.c0 COLLATE RTRIM IN ())) ORDER BY ((CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)+(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c2))))  NULLS FIRST, CAST(((vt0.c0) NOT NULL) AS INTEGER) DESC;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE ((vt0.c0 COLLATE RTRIM IN ())) ORDER BY ((CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)+(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c2))))  NULLS FIRST, CAST(((vt0.c0) NOT NULL) AS INTEGER) DESC;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c0) NOT BETWEEN (vt0.c2) AND (x'')))AND((((vt0.c1, vt0.c1)) NOT BETWEEN ((NULL, vt0.c2)) AND ((vt0.c2, vt0.c0))))))AND(CAST(vt0.c1 AS BLOB)))) ORDER BY ((((vt0.c0) IS FALSE)) IS TRUE)  NULLS LAST, CAST(COALESCE(DISTINCT vt0.c2, vt0.c1, vt0.c1, vt0.c2) AS NUMERIC)  NULLS LAST, SUBSTR(((vt0.c1) NOT NULL), ((0.17920082099106682) IS TRUE))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c0) NOT BETWEEN (vt0.c2) AND (x'')))AND((((vt0.c1, vt0.c1)) NOT BETWEEN ((NULL, vt0.c2)) AND ((vt0.c2, vt0.c0))))))AND(CAST(vt0.c1 AS BLOB))))AND(((((vt0.c0)%(vt0.c0))) NOTNULL)))) ORDER BY ((((vt0.c0) IS FALSE)) IS TRUE)  NULLS LAST, CAST(COALESCE(DISTINCT vt0.c2, vt0.c1, vt0.c1, vt0.c2) AS NUMERIC)  NULLS LAST, SUBSTR(((vt0.c1) NOT NULL), ((0.17920082099106682) IS TRUE))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c0) NOT BETWEEN (vt0.c2) AND (x'')))AND((((vt0.c1, vt0.c1)) NOT BETWEEN ((NULL, vt0.c2)) AND ((vt0.c2, vt0.c0))))))AND(CAST(vt0.c1 AS BLOB)))) ORDER BY ((((vt0.c0) IS FALSE)) IS TRUE)  NULLS LAST, CAST(COALESCE(DISTINCT vt0.c2, vt0.c1, vt0.c1, vt0.c2) AS NUMERIC)  NULLS LAST, SUBSTR(((vt0.c1) NOT NULL), ((0.17920082099106682) IS TRUE))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c0) NOT BETWEEN (vt0.c2) AND (x'')))AND((((vt0.c1, vt0.c1)) NOT BETWEEN ((NULL, vt0.c2)) AND ((vt0.c2, vt0.c0))))))AND(CAST(vt0.c1 AS BLOB))))AND(((((vt0.c0)%(vt0.c0))) NOTNULL)))) ORDER BY ((((vt0.c0) IS FALSE)) IS TRUE)  NULLS LAST, CAST(COALESCE(DISTINCT vt0.c2, vt0.c1, vt0.c1, vt0.c2) AS NUMERIC)  NULLS LAST, SUBSTR(((vt0.c1) NOT NULL), ((0.17920082099106682) IS TRUE))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c1)GLOB(vt0.c1)))>>(((NULL) BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY vt0.c2;
SELECT * FROM vt0 WHERE (((((vt0.c1)GLOB(vt0.c1)))>>(((NULL) BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY vt0.c2 LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (((((vt0.c1)GLOB(vt0.c1)))>>(((NULL) BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY vt0.c2;
SELECT * FROM vt0 WHERE (((((vt0.c1)GLOB(vt0.c1)))>>(((NULL) BETWEEN (vt0.c2) AND (vt0.c0))))) ORDER BY vt0.c2 LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, vt0.c2))<>((vt0.c2, vt0.c1)))) NOT NULL)) ORDER BY (~ ((NOT (vt0.c0)))) ASC;
SELECT ALL * FROM vt0 WHERE ((((((((vt0.c0, vt0.c2))<>((vt0.c2, vt0.c1)))) NOT NULL))AND(CASE WHEN ((vt0.c0)>(vt0.c0)) THEN ((vt0.c2)+(vt0.c1)) WHEN (((vt0.c2))>((NULL))) THEN CAST(vt0.c2 AS TEXT) WHEN vt0.c2 COLLATE BINARY THEN ((vt0.c0)IS NOT(vt0.c2)) WHEN ((vt0.c0) NOTNULL) THEN ((vt0.c1)=(vt0.c2)) WHEN ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) THEN ((vt0.c1)>=(vt0.c2)) ELSE ((vt0.c1)%(vt0.c0)) END))) ORDER BY (~ ((NOT (vt0.c0)))) ASC INTERSECT SELECT * FROM vt0 WHERE ((((((((+ ('-2081328921')))OR(((vt0.c0)IS NOT(vt0.c0)))))AND(((vt0.c2) ISNULL))))AND((vt0.c1 IN ())))) ORDER BY (~ ((NOT (vt0.c0)))) ASC;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, vt0.c2))<>((vt0.c2, vt0.c1)))) NOT NULL)) ORDER BY (~ ((NOT (vt0.c0)))) ASC;
SELECT ALL * FROM vt0 WHERE ((((((((vt0.c0, vt0.c2))<>((vt0.c2, vt0.c1)))) NOT NULL))AND(CASE WHEN ((vt0.c0)>(vt0.c0)) THEN ((vt0.c2)+(vt0.c1)) WHEN (((vt0.c2))>((NULL))) THEN CAST(vt0.c2 AS TEXT) WHEN vt0.c2 COLLATE BINARY THEN ((vt0.c0)IS NOT(vt0.c2)) WHEN ((vt0.c0) NOTNULL) THEN ((vt0.c1)=(vt0.c2)) WHEN ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) THEN ((vt0.c1)>=(vt0.c2)) ELSE ((vt0.c1)%(vt0.c0)) END))) ORDER BY (~ ((NOT (vt0.c0)))) ASC INTERSECT SELECT * FROM vt0 WHERE ((((((((+ ('-2081328921')))OR(((vt0.c0)IS NOT(vt0.c0)))))AND(((vt0.c2) ISNULL))))AND((vt0.c1 IN ())))) ORDER BY (~ ((NOT (vt0.c0)))) ASC;
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c2) NOTNULL) AS INTEGER)) ORDER BY ((((((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c0)))AND(vt0.c1)))OR((vt0.c0 IN (vt0.c1, vt0.c0)))))AND(('1631567910' IN ()))))OR(ABS(DISTINCT vt0.c1)));
SELECT DISTINCT * FROM vt0 WHERE (CAST(((vt0.c2) NOTNULL) AS INTEGER)) ORDER BY (((((((((((NULL)) NOT BETWEEN ((NULL)) AND ((vt0.c1))))OR((((vt0.c0))>((vt0.c0))))))OR((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c2, vt0.c1))))))AND('0.7680747728768222')))OR(((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1, vt0.c0 COLLATE NOCASE, (~ (vt0.c0)), CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN 0.13224500319434163 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c1 END))!=((CASE x''  WHEN vt0.c1 THEN vt0.c2 ELSE '' END, (vt0.c2 IN ()), ((vt0.c1)*(vt0.c0)), vt0.c1 COLLATE NOCASE)))) ORDER BY (((((((((((NULL)) NOT BETWEEN ((NULL)) AND ((vt0.c1))))OR((((vt0.c0))>((vt0.c0))))))OR((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c2, vt0.c1))))))AND('0.7680747728768222')))OR(((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c2) NOTNULL) AS INTEGER)) ORDER BY ((((((((((((vt0.c2)OR(vt0.c2)))AND(vt0.c0)))AND(vt0.c1)))OR((vt0.c0 IN (vt0.c1, vt0.c0)))))AND(('1631567910' IN ()))))OR(ABS(DISTINCT vt0.c1)));
SELECT DISTINCT * FROM vt0 WHERE (CAST(((vt0.c2) NOTNULL) AS INTEGER)) ORDER BY (((((((((((NULL)) NOT BETWEEN ((NULL)) AND ((vt0.c1))))OR((((vt0.c0))>((vt0.c0))))))OR((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c2, vt0.c1))))))AND('0.7680747728768222')))OR(((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1, vt0.c0 COLLATE NOCASE, (~ (vt0.c0)), CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN 0.13224500319434163 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c1 END))!=((CASE x''  WHEN vt0.c1 THEN vt0.c2 ELSE '' END, (vt0.c2 IN ()), ((vt0.c1)*(vt0.c0)), vt0.c1 COLLATE NOCASE)))) ORDER BY (((((((((((NULL)) NOT BETWEEN ((NULL)) AND ((vt0.c1))))OR((((vt0.c0))>((vt0.c0))))))OR((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c2, vt0.c1))))))AND('0.7680747728768222')))OR(((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1))))  NULLS FIRST;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (CASE WHEN ((((vt0.c2)AND(NULL)))OR(vt0.c0)) THEN (('9ӔQ2䤙?MJ')OR(vt0.c1)) WHEN JULIANDAY(vt0.c2, vt0.c1, vt0.c1, vt0.c1) THEN ((vt0.c1)IS NOT(vt0.c1)) END) ORDER BY CASE WHEN CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END THEN vt0.c1 WHEN (+ (vt0.c2)) THEN CAST(vt0.c0 AS TEXT) WHEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END THEN (((x'')) BETWEEN ((vt0.c2)) AND ((vt0.c1))) ELSE ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1)) END;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 NOT INDEXED WHERE (((CASE WHEN ((((vt0.c2)AND(NULL)))OR(vt0.c0)) THEN (('9ӔQ2䤙?MJ')OR(vt0.c1)) WHEN JULIANDAY(vt0.c2, vt0.c1, vt0.c1, vt0.c1) THEN ((vt0.c1)IS NOT(vt0.c1)) END)AND((vt0.c2 IN ((((vt0.c2))>((vt0.c0)))))))) ORDER BY CASE WHEN CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END THEN vt0.c1 WHEN (+ (vt0.c2)) THEN CAST(vt0.c0 AS TEXT) WHEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c2 END THEN (((x'')) BETWEEN ((vt0.c2)) AND ((vt0.c1))) ELSE ((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1)) END LIMIT 1;
SELECT COUNT(*) FROM vt0 WHERE (vt0.c1);
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c1)AND((NOT (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 END))))) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (CAST((('3^') NOT BETWEEN (vt0.c2) AND (vt0.c1)) AS TEXT));
SELECT DISTINCT * FROM vt0 WHERE (CAST((('3^') NOT BETWEEN (vt0.c2) AND (vt0.c1)) AS TEXT)) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CAST((('3^') NOT BETWEEN (vt0.c2) AND (vt0.c1)) AS TEXT));
SELECT DISTINCT * FROM vt0 WHERE (CAST((('3^') NOT BETWEEN (vt0.c2) AND (vt0.c1)) AS TEXT)) LIMIT 1;
SELECT * FROM vt0 WHERE (x'') ORDER BY (~ (vt0.c2)) COLLATE BINARY DESC, (~ (NULL))  NULLS FIRST, CAST((((vt0.c2, vt0.c0))<>((vt0.c1, vt0.c1))) AS REAL)  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (x'') ORDER BY (~ (vt0.c2)) COLLATE BINARY DESC, (~ (NULL))  NULLS FIRST, CAST((((vt0.c2, vt0.c0))!=((vt0.c1, vt0.c1))) AS REAL)  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (((((((vt0.c0, vt0.c0, vt0.c2))<((vt0.c0, x'ec2ebc', '1549494775'))), (((vt0.c1, '*')) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((x'5771', vt0.c1)))))<((((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c2)))AND(vt0.c2)))AND(vt0.c1)), ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)))))) ORDER BY (~ (vt0.c2)) COLLATE BINARY DESC, (~ (NULL))  NULLS FIRST, CAST((((vt0.c2, vt0.c0))!=((vt0.c1, vt0.c1))) AS REAL)  NULLS LAST;
SELECT * FROM vt0 WHERE (x'') ORDER BY (~ (vt0.c2)) COLLATE BINARY DESC, (~ (NULL))  NULLS FIRST, CAST((((vt0.c2, vt0.c0))<>((vt0.c1, vt0.c1))) AS REAL)  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (x'') ORDER BY (~ (vt0.c2)) COLLATE BINARY DESC, (~ (NULL))  NULLS FIRST, CAST((((vt0.c2, vt0.c0))!=((vt0.c1, vt0.c1))) AS REAL)  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (((((((vt0.c0, vt0.c0, vt0.c2))<((vt0.c0, x'ec2ebc', '1549494775'))), (((vt0.c1, '*')) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((x'5771', vt0.c1)))))<((((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c2)))AND(vt0.c2)))AND(vt0.c1)), ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)))))) ORDER BY (~ (vt0.c2)) COLLATE BINARY DESC, (~ (NULL))  NULLS FIRST, CAST((((vt0.c2, vt0.c0))!=((vt0.c1, vt0.c1))) AS REAL)  NULLS LAST;
SELECT * FROM vt0 WHERE ((+ (CAST(vt0.c1 AS INTEGER))));
SELECT DISTINCT * FROM vt0 WHERE ((((+ (CAST(vt0.c1 AS INTEGER))))AND((((vt0.c1))!=((NULL))) COLLATE NOCASE)));
SELECT * FROM vt0 WHERE ((+ (CAST(vt0.c1 AS INTEGER))));
SELECT DISTINCT * FROM vt0 WHERE ((((+ (CAST(vt0.c1 AS INTEGER))))AND((((vt0.c1))!=((NULL))) COLLATE NOCASE)));
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((~ (vt0.c0)))OR((((vt0.c2))=((vt0.c0))))))OR(((0X65da756c) NOTNULL))));
SELECT COUNT(*) FROM vt0 WHERE ((((((~ (vt0.c0)))OR((((vt0.c2))=((vt0.c0))))))OR(((0X65da756c) NOTNULL)))) ORDER BY CASE WHEN ((vt0.c0) IS FALSE) THEN vt0.c1 COLLATE RTRIM WHEN json_array(x'e3', vt0.c2) THEN ((vt0.c0) BETWEEN ('X*渴') AND (vt0.c0)) WHEN CASE vt0.c0  WHEN x'03' THEN vt0.c1 ELSE vt0.c0 END THEN vt0.c2 COLLATE NOCASE END ASC  NULLS FIRST LIMIT 1;
SELECT MAX(vt0.c1) FROM vt0 WHERE ((((vt0.c1 IN (vt0.c0))) IS TRUE)) ORDER BY CASE (vt0.c0 IN ())  WHEN ((vt0.c0)<=(vt0.c1)) THEN (vt0.c1 IN (vt0.c1)) WHEN vt0.c2 THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)) WHEN ((vt0.c2)<<(vt0.c2)) THEN ((vt0.c1)*(vt0.c2)) ELSE 0.2114151880638413 END DESC;
SELECT MAX(vt0.c1) FROM vt0 WHERE ((((vt0.c1 IN (vt0.c0))) IS TRUE)) ORDER BY CASE (vt0.c0 IN ())  WHEN ((vt0.c0)<=(vt0.c1)) THEN (vt0.c1 IN (vt0.c1)) WHEN vt0.c2 THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)) WHEN ((vt0.c2)<<(vt0.c2)) THEN ((vt0.c1)*(vt0.c2)) ELSE 0.2114151880638413 END DESC LIMIT 3;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)))<>(json_type(vt0.c1)))) ORDER BY ((vt0.c2)==(vt0.c1)) COLLATE RTRIM, vt0.c1 COLLATE BINARY;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)))>(json_type(vt0.c1)))) ORDER BY ((vt0.c2)=(vt0.c1)) COLLATE RTRIM, vt0.c1 COLLATE BINARY LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)))<>(json_type(vt0.c1)))) ORDER BY ((vt0.c2)==(vt0.c1)) COLLATE RTRIM, vt0.c1 COLLATE BINARY;
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c2) NOTNULL) AS INTEGER));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(((vt0.c2) NOTNULL) AS INTEGER))AND(vt0.c0 COLLATE RTRIM))) ORDER BY CAST(CASE vt0.c2  WHEN x'7635fc' THEN vt0.c1 END AS BLOB) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((NOT (vt0.c2)))IS NOT(CAST(vt0.c0 AS BLOB)))) ORDER BY CAST(CASE vt0.c2  WHEN x'7635fc' THEN vt0.c1 END AS BLOB) ASC;
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c2) NOTNULL) AS INTEGER));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(((vt0.c2) NOTNULL) AS INTEGER))AND(vt0.c0 COLLATE RTRIM))) ORDER BY CAST(CASE vt0.c2  WHEN x'7635fc' THEN vt0.c1 END AS BLOB) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((NOT (vt0.c2)))IS NOT(CAST(vt0.c0 AS BLOB)))) ORDER BY CAST(CASE vt0.c2  WHEN x'7635fc' THEN vt0.c1 END AS BLOB) ASC;
SELECT * FROM vt0 WHERE (((vt0.c2)==(vt0.c2 COLLATE BINARY))) ORDER BY ((((vt0.c0)OR(vt0.c1)))OR(vt0.c0)) COLLATE NOCASE COLLATE BINARY, (((CAST(vt0.c2 AS REAL), CASE WHEN vt0.c2 THEN NULL WHEN vt0.c0 THEN vt0.c2 END))!=((vt0.c1, CAST(vt0.c0 AS INTEGER))));
SELECT ALL * FROM vt0 WHERE (((vt0.c2)=(vt0.c2 COLLATE BINARY))) ORDER BY ((((vt0.c0)OR(vt0.c1)))OR(vt0.c0)) COLLATE NOCASE COLLATE BINARY, (((CAST(vt0.c2 AS REAL), CASE WHEN vt0.c2 THEN NULL WHEN vt0.c0 THEN vt0.c2 END))!=((vt0.c1, CAST(vt0.c0 AS INTEGER)))) LIMIT 0;
SELECT * FROM vt0 WHERE (((vt0.c2)==(vt0.c2 COLLATE BINARY))) ORDER BY ((((vt0.c0)OR(vt0.c1)))OR(vt0.c0)) COLLATE NOCASE COLLATE BINARY, (((CAST(vt0.c2 AS REAL), CASE WHEN vt0.c2 THEN NULL WHEN vt0.c0 THEN vt0.c2 END))!=((vt0.c1, CAST(vt0.c0 AS INTEGER))));
SELECT ALL * FROM vt0 WHERE (((vt0.c2)=(vt0.c2 COLLATE BINARY))) ORDER BY ((((vt0.c0)OR(vt0.c1)))OR(vt0.c0)) COLLATE NOCASE COLLATE BINARY, (((CAST(vt0.c2 AS REAL), CASE WHEN vt0.c2 THEN NULL WHEN vt0.c0 THEN vt0.c2 END))!=((vt0.c1, CAST(vt0.c0 AS INTEGER)))) LIMIT 0;
SELECT ALL MIN(vt0.c2) FROM vt0 NOT INDEXED WHERE (x'52bb1e4e');
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (((x'52bb1e4e')AND(((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 END)*(CASE vt0.c0  WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END))))) INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (CASE WHEN ((vt0.c0)OR(vt0.c0)) THEN vt0.c2 WHEN vt0.c1 THEN (((vt0.c2, 0xffffffff904fae97)) NOT BETWEEN ((vt0.c2, vt0.c2)) AND ((vt0.c0, vt0.c2))) ELSE (vt0.c0 IN (vt0.c0)) END);
SELECT * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c2)))==(((vt0.c1)-(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c2)))==(((vt0.c1)-(vt0.c2))))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((0.47909991920100703)%(((vt0.c0)+(vt0.c2)))));
SELECT * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c2)))==(((vt0.c1)-(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1 IN (vt0.c2)))==(((vt0.c1)-(vt0.c2))))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((0.47909991920100703)%(((vt0.c0)+(vt0.c2)))));
SELECT * FROM vt0 WHERE (NULLIF(0.9512266293003905, vt0.c0));
SELECT ALL * FROM vt0 WHERE (((NULLIF(0.9512266293003905, vt0.c0))AND(((((vt0.c1) ISNULL)) ISNULL)))) LIMIT 0x0;
SELECT * FROM vt0 WHERE (NULLIF(0.9512266293003905, vt0.c0));
SELECT ALL * FROM vt0 WHERE (((NULLIF(0.9512266293003905, vt0.c0))AND(((((vt0.c1) ISNULL)) ISNULL)))) LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((- (NULL))) IS FALSE)) ORDER BY vt0.c1  NULLS LAST, ((((((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0)))OR(((vt0.c1) NOT NULL))))AND((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1))))), 'GR.8a' ASC  NULLS LAST, ((((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c1))) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 END) AND (((vt0.c1) NOTNULL))) ASC;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((- (NULL))) IS FALSE)) ORDER BY vt0.c1  NULLS LAST, ((((((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0)))OR(((vt0.c1) NOT NULL))))AND((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1))))), 'GR.8a' ASC  NULLS LAST, ((((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c1))) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 END) AND (((vt0.c1) NOTNULL))) ASC LIMIT 5;
SELECT COUNT(*) FROM vt0 WHERE (x'2e9f837c') ORDER BY vt0.c1 DESC, CASE vt0.c2  WHEN vt0.c1 THEN NULL WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 ELSE vt0.c1 END COLLATE NOCASE DESC, CAST(CAST(vt0.c2 AS INTEGER) AS TEXT) DESC;
SELECT COUNT(*) FROM vt0 WHERE (x'2e9f837c') ORDER BY (+ (((0x1f214f9f)-(NULL)))) DESC LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt0 WHERE (CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c0 END COLLATE BINARY) ORDER BY (+ (((522276767)-(NULL)))) DESC LIMIT 1;
SELECT MAX(vt0.c1) FROM vt0 WHERE (CAST(((vt0.c0)*(vt0.c2)) AS INTEGER)) ORDER BY (((vt0.c1 IN ())) IS TRUE), NULL  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (CAST(((vt0.c0)*(vt0.c2)) AS INTEGER)) ORDER BY (((vt0.c1 IN ())) IS TRUE), NULL  NULLS FIRST INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (vt0.c1) ORDER BY (((vt0.c1 IN ())) IS TRUE), NULL  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((((vt0.c2)OR(vt0.c2)))AND(vt0.c1))) ISNULL));
SELECT * FROM vt0 WHERE (((((((vt0.c2)OR(vt0.c2)))AND(vt0.c1))) ISNULL)) INTERSECT SELECT * FROM vt0 WHERE (CASE (((vt0.c1, vt0.c0)) NOT BETWEEN ((vt0.c0, NULL)) AND ((vt0.c2, vt0.c0)))  WHEN CAST(vt0.c1 AS TEXT) THEN ((vt0.c2)IS NOT(vt0.c1)) WHEN (+ (-1.14564719E8)) THEN (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))) WHEN ABS(DISTINCT vt0.c0) THEN vt0.c2 COLLATE NOCASE ELSE TRIM(vt0.c1, vt0.c2) END);
SELECT * FROM vt0 WHERE (((((((vt0.c2)OR(vt0.c2)))AND(vt0.c1))) ISNULL));
SELECT * FROM vt0 WHERE (((((((vt0.c2)OR(vt0.c2)))AND(vt0.c1))) ISNULL)) INTERSECT SELECT * FROM vt0 WHERE (CASE (((vt0.c1, vt0.c0)) NOT BETWEEN ((vt0.c0, NULL)) AND ((vt0.c2, vt0.c0)))  WHEN CAST(vt0.c1 AS TEXT) THEN ((vt0.c2)IS NOT(vt0.c1)) WHEN (+ (-1.14564719E8)) THEN (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))) WHEN ABS(DISTINCT vt0.c0) THEN vt0.c2 COLLATE NOCASE ELSE TRIM(vt0.c1, vt0.c2) END);
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((vt0.c2) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((- (vt0.c2)))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c2) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((- (vt0.c2)))))AND(((((LIKELY(vt0.c2))AND(((0X21adae73)>=(vt0.c2)))))OR(vt0.c1))))) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2))) ISNULL)) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((((x'fe9413')OR((vt0.c0 IN (vt0.c2, vt0.c1)))))AND(CASE WHEN '1253537794' THEN vt0.c0 END))) ORDER BY ((CASE WHEN vt0.c1 THEN 0xffffffffa463a7da END)>=(0.0))  NULLS FIRST, (~ ((((vt0.c1))>((vt0.c2)))));
SELECT * FROM vt0 WHERE (((((((x'fe9413')OR((vt0.c0 IN (vt0.c2, vt0.c1)))))AND(CASE WHEN '1253537794' THEN vt0.c0 END)))AND(((((((((CASE WHEN vt0.c1 THEN vt0.c1 END)AND(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)))))AND(((vt0.c1)AND(vt0.c1)))))OR(HEX(vt0.c2))))AND(((vt0.c1)=(vt0.c2))))))) ORDER BY ((CASE WHEN vt0.c1 THEN 0xffffffffa463a7da END)>=(0.0))  NULLS FIRST, (~ ((((vt0.c1))>((vt0.c2)))));
SELECT ALL * FROM vt0 WHERE (((((x'fe9413')OR((vt0.c0 IN (vt0.c2, vt0.c1)))))AND(CASE WHEN '1253537794' THEN vt0.c0 END))) ORDER BY ((CASE WHEN vt0.c1 THEN 0xffffffffa463a7da END)>=(0.0))  NULLS FIRST, (~ ((((vt0.c1))>((vt0.c2)))));
SELECT * FROM vt0 WHERE (((((((x'fe9413')OR((vt0.c0 IN (vt0.c2, vt0.c1)))))AND(CASE WHEN '1253537794' THEN vt0.c0 END)))AND(((((((((CASE WHEN vt0.c1 THEN vt0.c1 END)AND(((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c1)))))AND(((vt0.c1)AND(vt0.c1)))))OR(HEX(vt0.c2))))AND(((vt0.c1)=(vt0.c2))))))) ORDER BY ((CASE WHEN vt0.c1 THEN 0xffffffffa463a7da END)>=(0.0))  NULLS FIRST, (~ ((((vt0.c1))>((vt0.c2)))));
SELECT * FROM vt0 WHERE (((CASE 'Z'  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)<>(((vt0.c1)/(vt0.c1))))) ORDER BY CAST((~ (vt0.c1)) AS BLOB) DESC  NULLS LAST, ((((+ (vt0.c1))))==((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((CASE 'Z'  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)>(((vt0.c1)/(vt0.c1))))) ORDER BY CAST((~ (vt0.c1)) AS BLOB) DESC  NULLS LAST, ((((+ (vt0.c1))))==((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c2 AS NUMERIC)) ORDER BY CAST((~ (vt0.c1)) AS BLOB) DESC  NULLS LAST, ((((+ (vt0.c1))))==((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))))) DESC;
SELECT * FROM vt0 WHERE (((CASE 'Z'  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)<>(((vt0.c1)/(vt0.c1))))) ORDER BY CAST((~ (vt0.c1)) AS BLOB) DESC  NULLS LAST, ((((+ (vt0.c1))))==((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((CASE 'Z'  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END)>(((vt0.c1)/(vt0.c1))))) ORDER BY CAST((~ (vt0.c1)) AS BLOB) DESC  NULLS LAST, ((((+ (vt0.c1))))==((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c2 AS NUMERIC)) ORDER BY CAST((~ (vt0.c1)) AS BLOB) DESC  NULLS LAST, ((((+ (vt0.c1))))==((((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2))))) DESC;
SELECT ALL MIN(vt0.c0) FROM vt0 NOT INDEXED WHERE ((((vt0.c0)>(vt0.c0)) IN ())) ORDER BY (- (((vt0.c1)IS NOT(vt0.c1))));
SELECT MIN(vt0.c0) FROM vt0 WHERE ((((((vt0.c0)>(vt0.c0)) IN ()))AND(((((vt0.c2) BETWEEN (0.5899273001149093) AND (vt0.c0)))AND((NOT (vt0.c2))))))) ORDER BY (- (((vt0.c1)IS NOT(vt0.c1)))) LIMIT 0X1 INTERSECT SELECT MIN(vt0.c0) FROM vt0 WHERE (INSTR(vt0.c1, (vt0.c2 IN ()))) ORDER BY (- (((vt0.c1)IS NOT(vt0.c1)))) LIMIT 0X1;
SELECT * FROM vt0 WHERE (CAST(CAST(vt0.c2 AS INTEGER) AS TEXT));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(CAST(vt0.c2 AS INTEGER) AS TEXT))AND(((LTRIM(vt0.c1, vt0.c1))<<(vt0.c2))))) ORDER BY ((vt0.c0 COLLATE RTRIM)=(((vt0.c2)>=(vt0.c2))))  NULLS LAST, (((((x'e9') NOT BETWEEN (vt0.c2) AND (-1970643487))))>=((0xffffffffc428174d))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE CASE WHEN vt0.c1 THEN vt0.c1 END  WHEN ((vt0.c0)%(vt0.c2)) THEN (~ (vt0.c0)) WHEN LIKELIHOOD(vt0.c0, vt0.c2) THEN LIKELIHOOD(vt0.c2, vt0.c1) WHEN PRINTF(vt0.c2) THEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END WHEN TYPEOF(DISTINCT vt0.c2) THEN CAST(vt0.c0 AS TEXT) END) ORDER BY ((vt0.c0 COLLATE RTRIM)==(((vt0.c2)>=(vt0.c2))))  NULLS LAST, (((((x'e9') NOT BETWEEN (vt0.c2) AND (-1970643487))))>=((0Xffffffffc428174d))) ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE (CAST(CAST(vt0.c2 AS INTEGER) AS TEXT));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(CAST(vt0.c2 AS INTEGER) AS TEXT))AND(((LTRIM(vt0.c1, vt0.c1))<<(vt0.c2))))) ORDER BY ((vt0.c0 COLLATE RTRIM)=(((vt0.c2)>=(vt0.c2))))  NULLS LAST, (((((x'e9') NOT BETWEEN (vt0.c2) AND (-1970643487))))>=((0xffffffffc428174d))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE CASE WHEN vt0.c1 THEN vt0.c1 END  WHEN ((vt0.c0)%(vt0.c2)) THEN (~ (vt0.c0)) WHEN LIKELIHOOD(vt0.c0, vt0.c2) THEN LIKELIHOOD(vt0.c2, vt0.c1) WHEN PRINTF(vt0.c2) THEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END WHEN TYPEOF(DISTINCT vt0.c2) THEN CAST(vt0.c0 AS TEXT) END) ORDER BY ((vt0.c0 COLLATE RTRIM)==(((vt0.c2)>=(vt0.c2))))  NULLS LAST, (((((x'e9') NOT BETWEEN (vt0.c2) AND (-1970643487))))>=((0Xffffffffc428174d))) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((~ (vt0.c2)) COLLATE RTRIM) ORDER BY ROUND((('') NOT BETWEEN (vt0.c1) AND (vt0.c1)), ((((x'')AND(vt0.c0)))OR(vt0.c2)));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((~ (vt0.c2)) COLLATE RTRIM)AND(UPPER('NG #B\(')))) ORDER BY ROUND((('') NOT BETWEEN (vt0.c1) AND (vt0.c1)), ((((x'')AND(vt0.c0)))OR(vt0.c2)));
SELECT * FROM vt0 WHERE ((+ (vt0.c1 COLLATE NOCASE)));
SELECT * FROM vt0 WHERE ((((+ (vt0.c1 COLLATE NOCASE)))AND((((vt0.c1)<(vt0.c1)) IN ())))) ORDER BY ((0Xffffffffd6a5af6c)|((((('')AND(vt0.c0)))OR(NULL))))  NULLS FIRST, ((vt0.c0) IS TRUE) DESC  NULLS LAST LIMIT 0X2;
SELECT * FROM vt0 WHERE ((+ (vt0.c1 COLLATE NOCASE)));
SELECT * FROM vt0 WHERE ((((+ (vt0.c1 COLLATE NOCASE)))AND((((vt0.c1)<(vt0.c1)) IN ())))) ORDER BY ((0Xffffffffd6a5af6c)|((((('')AND(vt0.c0)))OR(NULL))))  NULLS FIRST, ((vt0.c0) IS TRUE) DESC  NULLS LAST LIMIT 0X2;
SELECT COUNT(*) FROM vt0 WHERE (json_remove(((((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)))AND(vt0.c1)))OR(x'')), ((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)), vt0.c2, (- (vt0.c0))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((json_remove(((((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)))AND(vt0.c1)))OR(x'')), ((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)), vt0.c2, (- (vt0.c0))))AND((((((vt0.c2)||(vt0.c2)), (NOT (vt0.c0))))>((((NULL)-('z^*')), x'f366058fdf')))))) ORDER BY (((((vt0.c0))>((vt0.c1))))>(((vt0.c1) IS FALSE))) ASC, ((((vt0.c0) NOTNULL)) ISNULL) ASC  NULLS LAST, NULLIF(DISTINCT (((vt0.c1, vt0.c0, vt0.c2, vt0.c0))<((vt0.c1, vt0.c2, vt0.c2, vt0.c0))), ((vt0.c0)GLOB('+[?]5iY|膐'))) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE ('c') ORDER BY (((((vt0.c0))>((vt0.c1))))>(((vt0.c1) IS FALSE))) ASC, ((((vt0.c0) NOTNULL)) ISNULL) ASC  NULLS LAST, NULLIF(DISTINCT (((vt0.c1, vt0.c0, vt0.c2, vt0.c0))<((vt0.c1, vt0.c2, vt0.c2, vt0.c0))), ((vt0.c0)GLOB('+[?]5iY|膐'))) LIMIT 1;
SELECT * FROM vt0 WHERE ((((((vt0.c2, vt0.c2))<((vt0.c2, vt0.c1))))>(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN 'Pn>ND' END)));
SELECT * FROM vt0 WHERE ((((((((vt0.c2, vt0.c2))<((vt0.c2, vt0.c1))))>(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN 'Pn>ND' END)))AND(((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2)) COLLATE BINARY))) ORDER BY ((((vt0.c0 COLLATE BINARY)OR((- (vt0.c1)))))AND(((vt0.c0)=(vt0.c1)))), ((vt0.c2 COLLATE NOCASE)IS NOT(CAST(vt0.c2 AS BLOB))) ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt0 WHERE ((((((vt0.c2, vt0.c2))<((vt0.c2, vt0.c1))))>(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN 'Pn>ND' END)));
SELECT * FROM vt0 WHERE ((((((((vt0.c2, vt0.c2))<((vt0.c2, vt0.c1))))>(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN 'Pn>ND' END)))AND(((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2)) COLLATE BINARY))) ORDER BY ((((vt0.c0 COLLATE BINARY)OR((- (vt0.c1)))))AND(((vt0.c0)=(vt0.c1)))), ((vt0.c2 COLLATE NOCASE)IS NOT(CAST(vt0.c2 AS BLOB))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY ((CAST(x'' AS BLOB)) NOT BETWEEN (((((vt0.c0)OR(vt0.c2)))AND(vt0.c0))) AND (CASE 0xffffffffd7c35104  WHEN vt0.c1 THEN vt0.c1 END))  NULLS LAST, (- (((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c2)))) ASC;
SELECT * FROM vt0 WHERE (((NULL)AND(vt0.c0))) ORDER BY (~ (NULL)) COLLATE NOCASE COLLATE RTRIM DESC  NULLS LAST, CASE WHEN ((vt0.c0) IS FALSE) THEN CAST(vt0.c2 AS INTEGER) WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN x'91' THEN vt0.c2 ELSE vt0.c2 END THEN LOWER(vt0.c0) WHEN CAST(vt0.c1 AS NUMERIC) THEN STRFTIME(vt0.c0, '~.uIy5LX', vt0.c1) WHEN ((vt0.c0)AND(vt0.c1)) THEN load_extension(x'188f') END ASC LIMIT 2 INTERSECT SELECT * FROM vt0 WHERE (((CAST(vt0.c2 AS TEXT))%(x''))) ORDER BY (~ (NULL)) COLLATE NOCASE COLLATE RTRIM DESC  NULLS LAST, CASE WHEN ((vt0.c0) IS FALSE) THEN CAST(vt0.c2 AS INTEGER) WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN x'91' THEN vt0.c2 ELSE vt0.c2 END THEN LOWER(vt0.c0) WHEN CAST(vt0.c1 AS NUMERIC) THEN STRFTIME(vt0.c0, '~.uIy5LX', vt0.c1) WHEN ((vt0.c0)AND(vt0.c1)) THEN load_extension(x'188f') END ASC LIMIT 0X2;
SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY ((CAST(x'' AS BLOB)) NOT BETWEEN (((((vt0.c0)OR(vt0.c2)))AND(vt0.c0))) AND (CASE 0xffffffffd7c35104  WHEN vt0.c1 THEN vt0.c1 END))  NULLS LAST, (- (((vt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c2)))) ASC;
SELECT * FROM vt0 WHERE (((NULL)AND(vt0.c0))) ORDER BY (~ (NULL)) COLLATE NOCASE COLLATE RTRIM DESC  NULLS LAST, CASE WHEN ((vt0.c0) IS FALSE) THEN CAST(vt0.c2 AS INTEGER) WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN x'91' THEN vt0.c2 ELSE vt0.c2 END THEN LOWER(vt0.c0) WHEN CAST(vt0.c1 AS NUMERIC) THEN STRFTIME(vt0.c0, '~.uIy5LX', vt0.c1) WHEN ((vt0.c0)AND(vt0.c1)) THEN load_extension(x'188f') END ASC LIMIT 2 INTERSECT SELECT * FROM vt0 WHERE (((CAST(vt0.c2 AS TEXT))%(x''))) ORDER BY (~ (NULL)) COLLATE NOCASE COLLATE RTRIM DESC  NULLS LAST, CASE WHEN ((vt0.c0) IS FALSE) THEN CAST(vt0.c2 AS INTEGER) WHEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN x'91' THEN vt0.c2 ELSE vt0.c2 END THEN LOWER(vt0.c0) WHEN CAST(vt0.c1 AS NUMERIC) THEN STRFTIME(vt0.c0, '~.uIy5LX', vt0.c1) WHEN ((vt0.c0)AND(vt0.c1)) THEN load_extension(x'188f') END ASC LIMIT 0X2;
SELECT * FROM vt0 WHERE (CAST(vt0.c2 AS TEXT) COLLATE BINARY) ORDER BY (((vt0.c2 COLLATE NOCASE))>(((NOT (vt0.c1))))), TRIM(((vt0.c1)<<(vt0.c1))) DESC;
SELECT * FROM vt0 WHERE (((CAST(vt0.c2 AS TEXT) COLLATE BINARY)AND((((CAST(vt0.c0 AS NUMERIC), ((vt0.c2) IS FALSE)))<(((vt0.c0 IN (vt0.c2, vt0.c1)), CAST(vt0.c0 AS NUMERIC))))))) ORDER BY (((vt0.c2 COLLATE NOCASE))>(((NOT (vt0.c1))))), TRIM(((vt0.c1)<<(vt0.c1))) DESC INTERSECT SELECT * FROM vt0 WHERE (((((((((((((vt0.c2)AND(((vt0.c1)AND(0.8621592256463396)))))OR(vt0.c0)))AND(vt0.c0)))OR(((vt0.c0)<<(vt0.c1)))))OR((((vt0.c0, x'2ebe2f', vt0.c2))!=((vt0.c1, vt0.c2, vt0.c0))))))AND(vt0.c0))) ORDER BY (((vt0.c2 COLLATE NOCASE))>(((NOT (vt0.c1))))), TRIM(((vt0.c1)<<(vt0.c1))) DESC;
SELECT * FROM vt0 WHERE (CAST(vt0.c2 AS TEXT) COLLATE BINARY) ORDER BY (((vt0.c2 COLLATE NOCASE))>(((NOT (vt0.c1))))), TRIM(((vt0.c1)<<(vt0.c1))) DESC;
SELECT * FROM vt0 WHERE (((CAST(vt0.c2 AS TEXT) COLLATE BINARY)AND((((CAST(vt0.c0 AS NUMERIC), ((vt0.c2) IS FALSE)))<(((vt0.c0 IN (vt0.c2, vt0.c1)), CAST(vt0.c0 AS NUMERIC))))))) ORDER BY (((vt0.c2 COLLATE NOCASE))>(((NOT (vt0.c1))))), TRIM(((vt0.c1)<<(vt0.c1))) DESC INTERSECT SELECT * FROM vt0 WHERE (((((((((((((vt0.c2)AND(((vt0.c1)AND(0.8621592256463396)))))OR(vt0.c0)))AND(vt0.c0)))OR(((vt0.c0)<<(vt0.c1)))))OR((((vt0.c0, x'2ebe2f', vt0.c2))!=((vt0.c1, vt0.c2, vt0.c0))))))AND(vt0.c0))) ORDER BY (((vt0.c2 COLLATE NOCASE))>(((NOT (vt0.c1))))), TRIM(((vt0.c1)<<(vt0.c1))) DESC;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((CAST(vt0.c2 AS REAL)))>=((NULL))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((CAST(vt0.c2 AS REAL)))>=((NULL)))) ORDER BY (((NULL)=(vt0.c1)) IN ()) ASC  NULLS FIRST, vt0.c1 ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c2 IN (vt0.c0))) NOT NULL));
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((vt0.c2 IN (vt0.c0))) NOT NULL))AND((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 END IN ())))) ORDER BY (~ (vt0.c0)) COLLATE BINARY  NULLS LAST INTERSECT SELECT COUNT(*) FROM vt0 WHERE (CAST(vt0.c2 AS TEXT)) ORDER BY (~ (vt0.c0)) COLLATE BINARY  NULLS LAST;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((UPPER(vt0.c1)) NOT BETWEEN (((vt0.c0) NOT NULL)) AND ((((vt0.c0, vt0.c0, vt0.c2))<>((vt0.c1, vt0.c0, vt0.c0))))));
SELECT MAX(vt0.c1) FROM vt0 WHERE (((((UPPER(vt0.c1)) NOT BETWEEN (((vt0.c0) NOT NULL)) AND ((((vt0.c0, vt0.c0, vt0.c2))!=((vt0.c1, vt0.c0, vt0.c0))))))AND((~ (CAST(vt0.c0 AS BLOB)))))) ORDER BY CASE WHEN TYPEOF(DISTINCT vt0.c2) THEN ((vt0.c1)-(vt0.c1)) WHEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 END THEN ((vt0.c1)IS(vt0.c0)) WHEN CAST('298697454' AS INTEGER) THEN 0.9125130451526043 COLLATE NOCASE WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN ((vt0.c0) NOTNULL) ELSE IFNULL(vt0.c2, vt0.c0) END LIMIT 3 INTERSECT SELECT MAX(vt0.c1) FROM vt0 WHERE ((((((((((+ (vt0.c2)))OR(CASE WHEN vt0.c0 THEN vt0.c0 END)))OR(((vt0.c2) ISNULL))))AND(((vt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)))))OR(((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c2))))) ORDER BY CASE WHEN TYPEOF(DISTINCT vt0.c2) THEN ((vt0.c1)-(vt0.c1)) WHEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 END THEN ((vt0.c1)IS(vt0.c0)) WHEN CAST('298697454' AS INTEGER) THEN 0.9125130451526043 COLLATE NOCASE WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN ((vt0.c0) NOTNULL) ELSE IFNULL(vt0.c2, vt0.c0) END LIMIT 0X3;
SELECT * FROM vt0 WHERE ((((((~ (vt0.c1)))AND((- (0.5020372325967561)))))OR(vt0.c0 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt0 WHERE ((((((((~ (vt0.c1)))AND((- (0.5020372325967561)))))OR(vt0.c0 COLLATE NOCASE)))AND(CAST(((vt0.c0)<>(vt0.c2)) AS REAL)))) LIMIT 0X2;
SELECT * FROM vt0 WHERE ((((((~ (vt0.c1)))AND((- (0.5020372325967561)))))OR(vt0.c0 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt0 WHERE ((((((((~ (vt0.c1)))AND((- (0.5020372325967561)))))OR(vt0.c0 COLLATE NOCASE)))AND(CAST(((vt0.c0)<>(vt0.c2)) AS REAL)))) LIMIT 0X2;
SELECT COUNT(*) FROM vt0 WHERE (((UNLIKELY(DISTINCT NULL))||(((vt0.c2)<=(vt0.c2))))) ORDER BY CAST(vt0.c2 AS NUMERIC) COLLATE BINARY COLLATE NOCASE ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((UNLIKELY(DISTINCT NULL))||(((vt0.c2)<(vt0.c2)))))AND(SQLITE_VERSION()))) ORDER BY CAST(vt0.c2 AS NUMERIC) COLLATE BINARY COLLATE NOCASE ASC  NULLS FIRST LIMIT 0x0;
SELECT MIN(vt0.c1) FROM vt0 WHERE (vt0.c1);
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (vt0.c1);
SELECT ALL * FROM vt0 WHERE ((((~ (vt0.c2)))<=((vt0.c0 IN (vt0.c1, 0.6237609235810323)))));
SELECT * FROM vt0 WHERE ((((((~ (vt0.c2)))<((vt0.c0 IN (vt0.c1, 0.6237609235810323)))))AND(('-935251765' IN (x'e7', (- (vt0.c1))))))) ORDER BY ((((((((vt0.c0)>=(vt0.c2)))OR(((vt0.c2) BETWEEN ('-687749424') AND ('<2m\Z')))))AND(((vt0.c1)IS NOT(vt0.c0)))))AND(CAST(vt0.c2 AS NUMERIC))), ((vt0.c1)GLOB(x'')) DESC, (~ (LTRIM(vt0.c0, vt0.c2))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((~ (vt0.c2)))<=((vt0.c0 IN (vt0.c1, 0.6237609235810323)))));
SELECT * FROM vt0 WHERE ((((((~ (vt0.c2)))<((vt0.c0 IN (vt0.c1, 0.6237609235810323)))))AND(('-935251765' IN (x'e7', (- (vt0.c1))))))) ORDER BY ((((((((vt0.c0)>=(vt0.c2)))OR(((vt0.c2) BETWEEN ('-687749424') AND ('<2m\Z')))))AND(((vt0.c1)IS NOT(vt0.c0)))))AND(CAST(vt0.c2 AS NUMERIC))), ((vt0.c1)GLOB(x'')) DESC, (~ (LTRIM(vt0.c0, vt0.c2))) LIMIT 0;
SELECT MAX(vt0.c2) FROM vt0 WHERE (vt0.c0);
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (vt0.c0) LIMIT 0x0 INTERSECT SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((~ ((+ (vt0.c2))))) LIMIT 0x0;
SELECT MIN(vt0.c2) FROM vt0 NOT INDEXED WHERE (((CAST(vt0.c1 AS NUMERIC))IS(vt0.c0 COLLATE NOCASE)));
SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (((((CAST(vt0.c1 AS NUMERIC))IS(vt0.c0 COLLATE NOCASE)))AND(vt0.c0 COLLATE BINARY))) INTERSECT SELECT DISTINCT MIN(vt0.c2) FROM vt0 WHERE (vt0.c1);
SELECT ALL * FROM vt0 WHERE (((((vt0.c1) NOT NULL))+(vt0.c0 COLLATE BINARY)));
SELECT * FROM vt0 WHERE (((((((vt0.c1) NOT NULL))+(vt0.c0 COLLATE BINARY)))AND((((vt0.c1 IN (vt0.c0))) IS TRUE)))) ORDER BY ((vt0.c1 COLLATE NOCASE)<(CAST(vt0.c0 AS TEXT))), ((((((((NULL)AND(vt0.c2)))AND((((x'a5e0', vt0.c2, vt0.c0))<((vt0.c0, vt0.c2, vt0.c0))))))OR(vt0.c2 COLLATE NOCASE)))OR((+ (vt0.c0)))) ASC LIMIT 1 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2)IS('-906429029'))) ISNULL)) ORDER BY ((vt0.c1 COLLATE NOCASE)<(CAST(vt0.c0 AS TEXT))), ((((((((NULL)AND(vt0.c2)))AND((((x'a5e0', vt0.c2, vt0.c0))<((vt0.c0, vt0.c2, vt0.c0))))))OR(vt0.c2 COLLATE NOCASE)))OR((+ (vt0.c0)))) ASC LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((((vt0.c1) NOT NULL))+(vt0.c0 COLLATE BINARY)));
SELECT * FROM vt0 WHERE (((((((vt0.c1) NOT NULL))+(vt0.c0 COLLATE BINARY)))AND((((vt0.c1 IN (vt0.c0))) IS TRUE)))) ORDER BY ((vt0.c1 COLLATE NOCASE)<(CAST(vt0.c0 AS TEXT))), ((((((((NULL)AND(vt0.c2)))AND((((x'a5e0', vt0.c2, vt0.c0))<((vt0.c0, vt0.c2, vt0.c0))))))OR(vt0.c2 COLLATE NOCASE)))OR((+ (vt0.c0)))) ASC LIMIT 1 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c2)IS('-906429029'))) ISNULL)) ORDER BY ((vt0.c1 COLLATE NOCASE)<(CAST(vt0.c0 AS TEXT))), ((((((((NULL)AND(vt0.c2)))AND((((x'a5e0', vt0.c2, vt0.c0))<((vt0.c0, vt0.c2, vt0.c0))))))OR(vt0.c2 COLLATE NOCASE)))OR((+ (vt0.c0)))) ASC LIMIT 0x1;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((LIKELY(DISTINCT vt0.c0))=(INSTR(vt0.c2, '-1669779933'))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((LIKELY(DISTINCT vt0.c0))==(INSTR(vt0.c2, '-1669779933'))))AND((((vt0.c0 COLLATE BINARY, ((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c1)), vt0.c0 COLLATE RTRIM, ((vt0.c2) BETWEEN (-2.22011921E8) AND (vt0.c1))))<((CAST(vt0.c2 AS NUMERIC), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)), vt0.c0 COLLATE RTRIM, (((vt0.c0)) NOT BETWEEN ((x'c8')) AND ((vt0.c1))))))))) LIMIT 1;
SELECT MAX(vt0.c2) FROM vt0 WHERE (((CAST('1187240662' AS INTEGER)) IS TRUE));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((((CAST('1187240662' AS INTEGER)) IS TRUE))AND((+ (''))))) ORDER BY CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 END COLLATE NOCASE  NULLS LAST INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (((((((((vt0.c1) NOT NULL))AND(vt0.c1 COLLATE BINARY)))AND((- (vt0.c1)))))AND(((0Xffffffffdc92966a)>(vt0.c2))))) ORDER BY CASE vt0.c2  WHEN vt0.c2 THEN vt0.c0 END COLLATE NOCASE  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE ('-970592367');
SELECT ALL COUNT(*) FROM vt0 WHERE ('-970592367') INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((((0.39813615389123636, ((x'20') IS TRUE)))!=((((vt0.c0)<=(vt0.c0)), vt0.c1 COLLATE BINARY))));
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((~ (vt0.c2)) IN (CAST(vt0.c2 AS NUMERIC))));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((~ (vt0.c2)) IN (CAST(vt0.c2 AS NUMERIC))))AND(CAST((- (vt0.c0)) AS REAL)))) ORDER BY CASE ((((((vt0.c0)OR(vt0.c2)))AND(vt0.c1)))OR(vt0.c2))  WHEN ((vt0.c1) IS TRUE) THEN ((vt0.c2) ISNULL) WHEN ((vt0.c1)IS(vt0.c2)) THEN TRIM(vt0.c2) ELSE CAST(vt0.c0 AS INTEGER) END DESC LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c1) ISNULL)) NOT BETWEEN ((((vt0.c1)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c0)))) AND (NULLIF(vt0.c2, vt0.c1))));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c1) ISNULL)) NOT BETWEEN ((((vt0.c1)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c0)))) AND (NULLIF(vt0.c2, vt0.c1)))) ORDER BY (vt0.c0 IN (vt0.c2, vt0.c0, vt0.c0)) COLLATE NOCASE DESC  NULLS LAST LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt0 WHERE ((((((vt0.c2)LIKE(vt0.c0))))>=((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 END)))) ORDER BY (vt0.c0 IN (vt0.c2, vt0.c0, vt0.c0)) COLLATE NOCASE DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE (CAST((((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c1, vt0.c0))) AS TEXT));
SELECT DISTINCT * FROM vt0 WHERE (CAST((((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c1, vt0.c0))) AS TEXT)) ORDER BY ((NULLIF(vt0.c2, vt0.c0))|(vt0.c2)), ((0.0330687504914724)>(vt0.c1)) ASC LIMIT 1;
SELECT * FROM vt0 WHERE (CAST((((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c1, vt0.c0))) AS TEXT));
SELECT DISTINCT * FROM vt0 WHERE (CAST((((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c2, vt0.c0)) AND ((vt0.c1, vt0.c0))) AS TEXT)) ORDER BY ((NULLIF(vt0.c2, vt0.c0))|(vt0.c2)), ((0.0330687504914724)>(vt0.c1)) ASC LIMIT 1;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (vt0.c1) ORDER BY UNLIKELY('-675065596')  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((vt0.c1)AND(((((vt0.c1)+(vt0.c1)))LIKE(((vt0.c2)||(vt0.c1))))))) ORDER BY UNLIKELY('-675065596')  NULLS FIRST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c0);
SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c0);
SELECT MAX(vt0.c0) FROM vt0 WHERE (json_extract(NULL COLLATE NOCASE, (vt0.c0 IN (vt0.c2)), QUOTE('')));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((json_extract(NULL COLLATE NOCASE, (vt0.c0 IN (vt0.c2)), QUOTE('')))AND(((((((vt0.c2)&(vt0.c2)))AND(((vt0.c1) NOT BETWEEN (vt0.c2) AND ('1895829030')))))AND(((vt0.c1) IS TRUE)))))) ORDER BY vt0.c2 DESC  NULLS LAST, (((((vt0.c1, vt0.c1, vt0.c0, vt0.c0))>((vt0.c2, vt0.c2, vt0.c1, vt0.c0))))OR((~ (vt0.c0)))) DESC  NULLS LAST;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((('pc쥠S]9V') NOT BETWEEN (((vt0.c0)|(vt0.c1))) AND ((('s\') NOTNULL)))) ORDER BY CAST(x'' AS REAL);
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((('pc쥠S]9V') NOT BETWEEN (((vt0.c0)|(vt0.c1))) AND ((('s\') NOTNULL))))AND(CASE WHEN ((vt0.c0)=(vt0.c0)) THEN ((((((((((vt0.c1)AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)))AND(vt0.c0)))AND(vt0.c0)) WHEN ((vt0.c2)<(vt0.c1)) THEN ((((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c1)))AND(345496306)))AND(NULL)))OR(vt0.c1)) WHEN ((vt0.c0) NOT BETWEEN (NULL) AND (vt0.c1)) THEN ((NULL) BETWEEN (vt0.c0) AND (vt0.c0)) ELSE x'05' END))) ORDER BY CAST(x'' AS REAL) LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c1)/(x''))) ISNULL)) ORDER BY CAST(x'' AS REAL) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c0)) THEN (- (vt0.c1)) WHEN NULL THEN ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN ((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)) THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c1)) WHEN (- (vt0.c1)) THEN vt0.c1 ELSE (vt0.c2 IN (vt0.c0)) END);
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c0)) THEN (- (vt0.c1)) WHEN NULL THEN ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN ((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)) THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c1)) WHEN (- (vt0.c1)) THEN vt0.c1 ELSE (vt0.c2 IN (vt0.c0)) END) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c0)) THEN (- (vt0.c1)) WHEN NULL THEN ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN ((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)) THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c1)) WHEN (- (vt0.c1)) THEN vt0.c1 ELSE (vt0.c2 IN (vt0.c0)) END);
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c0)) THEN (- (vt0.c1)) WHEN NULL THEN ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) WHEN ((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)) THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c1)) WHEN (- (vt0.c1)) THEN vt0.c1 ELSE (vt0.c2 IN (vt0.c0)) END) LIMIT 1;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY ((((x'e5')+(vt0.c0)))IS(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END)) DESC  NULLS FIRST, (vt0.c0 COLLATE RTRIM IN ()) DESC  NULLS LAST, (+ ((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))))) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c0)AND(CAST(((vt0.c1)%(vt0.c0)) AS REAL)))) ORDER BY ((((x'e5')+(vt0.c0)))IS(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c0 END)) DESC  NULLS FIRST, (vt0.c0 COLLATE RTRIM IN ()) DESC  NULLS LAST, (+ ((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c2))))) ASC  NULLS FIRST;
SELECT MIN(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY vt0.c1;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (vt0.c0) ORDER BY (x'' IN (((vt0.c2)>(vt0.c1)))), CASE (((vt0.c0, vt0.c1))==((vt0.c2, vt0.c0)))  WHEN ((vt0.c1)IS NOT(vt0.c1)) THEN CASE WHEN 'heEL+K' THEN vt0.c2 WHEN vt0.c1 THEN 'f3KsM<' ELSE vt0.c0 END WHEN ((((((((vt0.c2)AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c0)) THEN (((vt0.c1, vt0.c1)) NOT BETWEEN ((vt0.c2, 0.026677829472838477)) AND ((vt0.c0, vt0.c2))) END INTERSECT SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (CASE WHEN CAST(vt0.c1 AS BLOB) THEN NULL WHEN vt0.c2 COLLATE NOCASE THEN NULL ELSE (~ (vt0.c2)) END) ORDER BY (x'' IN (((vt0.c2)>(vt0.c1)))), CASE (((vt0.c0, vt0.c1))=((vt0.c2, vt0.c0)))  WHEN ((vt0.c1)IS NOT(vt0.c1)) THEN CASE WHEN 'heEL+K' THEN vt0.c2 WHEN vt0.c1 THEN 'f3KsM<' ELSE vt0.c0 END WHEN ((((((((vt0.c2)AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c1)))OR(vt0.c0)) THEN (((vt0.c1, vt0.c1)) NOT BETWEEN ((vt0.c2, 0.026677829472838477)) AND ((vt0.c0, vt0.c2))) END;
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE CASE WHEN vt0.c2 THEN vt0.c1 WHEN 0xffffffff934fd4b3 THEN vt0.c1 END  WHEN CAST(vt0.c2 AS TEXT) THEN (vt0.c1 IN (NULL)) WHEN CASE vt0.c0  WHEN vt0.c2 THEN vt0.c2 END THEN vt0.c0 COLLATE BINARY WHEN vt0.c0 COLLATE NOCASE THEN CAST(vt0.c1 AS NUMERIC) ELSE '1904115945' END);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CASE CASE WHEN vt0.c2 THEN vt0.c1 WHEN -1823484749 THEN vt0.c1 END  WHEN CAST(vt0.c2 AS TEXT) THEN (vt0.c1 IN (NULL)) WHEN CASE vt0.c0  WHEN vt0.c2 THEN vt0.c2 END THEN vt0.c0 COLLATE BINARY WHEN vt0.c0 COLLATE NOCASE THEN CAST(vt0.c1 AS NUMERIC) ELSE '1904115945' END)AND((((0.023481222384139522 IN (vt0.c1))) IS FALSE)))) ORDER BY CASE WHEN (((vt0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c2))) THEN (((vt0.c1))==((vt0.c2))) ELSE ((vt0.c1)<<(vt0.c2)) END DESC  NULLS FIRST, (((x'6ee8' IN ()))<<((~ (vt0.c2)))) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST(vt0.c0 AS TEXT)) NOT BETWEEN (vt0.c0) AND (0.9594270540946891))) ORDER BY CASE WHEN (((vt0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c2))) THEN (((vt0.c1))=((vt0.c2))) ELSE ((vt0.c1)<<(vt0.c2)) END DESC  NULLS FIRST, (((x'6ee8' IN ()))<<((~ (vt0.c2)))) DESC;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((x'45' IN ()));
SELECT MAX(vt0.c1) FROM vt0 WHERE ((((x'45' IN ()))AND(CAST(((vt0.c2)/(x'd13a')) AS REAL))));
SELECT COUNT(*) FROM vt0 WHERE (highlight((vt0.c0 IN (vt0.c0)), (((vt0.c1, NULL))<((vt0.c1, vt0.c1))), (vt0.c0 IN (vt0.c1)), (((vt0.c1, vt0.c0, vt0.c0))==((vt0.c2, vt0.c0, vt0.c1))))) ORDER BY (((LIKELY(vt0.c2), vt0.c1 COLLATE BINARY, ((((((vt0.c1)OR(0.999410209286046)))AND(vt0.c0)))OR('-1041332778'))))!=((((vt0.c1)OR(vt0.c1)), vt0.c2, (~ (vt0.c2))))), NULLIF(((vt0.c0)*('AठznY5+')), ((((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)))AND('_Z!'))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (highlight((vt0.c0 IN (vt0.c0)), (((vt0.c1, NULL))<((vt0.c1, vt0.c1))), (vt0.c0 IN (vt0.c1)), (((vt0.c1, vt0.c0, vt0.c0))==((vt0.c2, vt0.c0, vt0.c1))))) ORDER BY (((LIKELY(vt0.c2), vt0.c1 COLLATE BINARY, ((((((vt0.c1)OR(0.999410209286046)))AND(vt0.c0)))OR('-1041332778'))))!=((((vt0.c1)OR(vt0.c1)), vt0.c2, (~ (vt0.c2))))), NULLIF(((vt0.c0)*('AठznY5+')), ((((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))OR(vt0.c2)))AND(vt0.c2)))AND('_Z!'))) ASC  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE (CASE WHEN vt0.c0 THEN ((vt0.c0) IS TRUE) WHEN TRIM(DISTINCT vt0.c1, vt0.c1) THEN CAST(vt0.c1 AS REAL) WHEN LOWER(vt0.c1) THEN ((((((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c0)) END) ORDER BY ((vt0.c2)<<(vt0.c0)) COLLATE BINARY ASC;
SELECT DISTINCT * FROM vt0 WHERE (CASE WHEN vt0.c0 THEN ((vt0.c0) IS TRUE) WHEN TRIM(DISTINCT vt0.c1, vt0.c1) THEN CAST(vt0.c1 AS REAL) WHEN LOWER(vt0.c1) THEN ((((((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c0)) END) ORDER BY (CAST(vt0.c2 AS BLOB) IN (((0.04852331096900275)||(vt0.c0)))) DESC, vt0.c2 ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((- (vt0.c2)))<(vt0.c2 COLLATE BINARY))) ORDER BY (CAST(vt0.c2 AS BLOB) IN (((0.04852331096900275)||(vt0.c0)))) DESC, vt0.c2 ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (CASE WHEN vt0.c0 THEN ((vt0.c0) IS TRUE) WHEN TRIM(DISTINCT vt0.c1, vt0.c1) THEN CAST(vt0.c1 AS REAL) WHEN LOWER(vt0.c1) THEN ((((((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c0)) END) ORDER BY ((vt0.c2)<<(vt0.c0)) COLLATE BINARY ASC;
SELECT DISTINCT * FROM vt0 WHERE (CASE WHEN vt0.c0 THEN ((vt0.c0) IS TRUE) WHEN TRIM(DISTINCT vt0.c1, vt0.c1) THEN CAST(vt0.c1 AS REAL) WHEN LOWER(vt0.c1) THEN ((((((((((vt0.c1)OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c0)) END) ORDER BY (CAST(vt0.c2 AS BLOB) IN (((0.04852331096900275)||(vt0.c0)))) DESC, vt0.c2 ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((- (vt0.c2)))<(vt0.c2 COLLATE BINARY))) ORDER BY (CAST(vt0.c2 AS BLOB) IN (((0.04852331096900275)||(vt0.c0)))) DESC, vt0.c2 ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c2)IS NOT(vt0.c1)) COLLATE NOCASE) ORDER BY (+ (((((((((vt0.c1)OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))) ASC  NULLS FIRST, CASE WHEN ((((((((vt0.c0)OR(vt0.c2)))OR(0.43653007467692306)))AND(x'13')))AND(vt0.c0)) THEN ((NULL)AND(NULL)) WHEN CAST(vt0.c0 AS REAL) THEN (((vt0.c1, vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1, '1484000752'))) END ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)IS NOT(vt0.c1)) COLLATE NOCASE)AND(vt0.c2))) ORDER BY ((((((vt0.c1)OR(vt0.c2)))AND(vt0.c0))) BETWEEN ((vt0.c1 IN (vt0.c0))) AND (((vt0.c2)==(vt0.c1))))  NULLS LAST, ((ABS(DISTINCT vt0.c0))>(CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c2)IS NOT(vt0.c1)) COLLATE NOCASE) ORDER BY (+ (((((((((vt0.c1)OR(vt0.c2)))OR(vt0.c2)))OR(vt0.c2)))AND(vt0.c1)))) ASC  NULLS FIRST, CASE WHEN ((((((((vt0.c0)OR(vt0.c2)))OR(0.43653007467692306)))AND(x'13')))AND(vt0.c0)) THEN ((NULL)AND(NULL)) WHEN CAST(vt0.c0 AS REAL) THEN (((vt0.c1, vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c2, vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1, '1484000752'))) END ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)IS NOT(vt0.c1)) COLLATE NOCASE)AND(vt0.c2))) ORDER BY ((((((vt0.c1)OR(vt0.c2)))AND(vt0.c0))) BETWEEN ((vt0.c1 IN (vt0.c0))) AND (((vt0.c2)==(vt0.c1))))  NULLS LAST, ((ABS(DISTINCT vt0.c0))>(CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END)) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (CASE WHEN ((vt0.c1) ISNULL) THEN vt0.c1 COLLATE NOCASE WHEN CAST(vt0.c0 AS TEXT) THEN (vt0.c2 IN ()) END);
SELECT * FROM vt0 WHERE (CASE WHEN ((vt0.c1) ISNULL) THEN vt0.c1 COLLATE NOCASE WHEN CAST(vt0.c0 AS TEXT) THEN (vt0.c2 IN ()) END) ORDER BY UNLIKELY((vt0.c2 IN (vt0.c2))), ((vt0.c0)&(vt0.c1 COLLATE NOCASE)) LIMIT 0X3;
SELECT * FROM vt0 WHERE (CASE WHEN ((vt0.c1) ISNULL) THEN vt0.c1 COLLATE NOCASE WHEN CAST(vt0.c0 AS TEXT) THEN (vt0.c2 IN ()) END);
SELECT * FROM vt0 WHERE (CASE WHEN ((vt0.c1) ISNULL) THEN vt0.c1 COLLATE NOCASE WHEN CAST(vt0.c0 AS TEXT) THEN (vt0.c2 IN ()) END) ORDER BY UNLIKELY((vt0.c2 IN (vt0.c2))), ((vt0.c0)&(vt0.c1 COLLATE NOCASE)) LIMIT 0X3;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c1)>=(vt0.c2))) BETWEEN (NULL COLLATE BINARY) AND ((((vt0.c0, vt0.c2, vt0.c2)) BETWEEN ((vt0.c0, vt0.c1, vt0.c2)) AND (('GH掲', vt0.c1, vt0.c2))))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((vt0.c1)>=(vt0.c2))) BETWEEN (NULL COLLATE BINARY) AND ((((vt0.c0, vt0.c2, vt0.c2)) BETWEEN ((vt0.c0, vt0.c1, vt0.c2)) AND (('GH掲', vt0.c1, vt0.c2))))))AND((NOT ((+ (vt0.c0))))))) INTERSECT SELECT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c2)OR((~ (vt0.c0)))))AND(ABS(vt0.c1))));
SELECT * FROM vt0 WHERE (((vt0.c2) IS FALSE));
SELECT * FROM vt0 WHERE (((vt0.c2) IS FALSE)) ORDER BY ((((+ (vt0.c0)), vt0.c2 COLLATE NOCASE))>=((CAST(vt0.c2 AS TEXT), ((vt0.c0)-(vt0.c2))))) LIMIT 1;
SELECT * FROM vt0 WHERE (((vt0.c2) IS FALSE));
SELECT * FROM vt0 WHERE (((vt0.c2) IS FALSE)) ORDER BY ((((+ (vt0.c0)), vt0.c2 COLLATE NOCASE))>=((CAST(vt0.c2 AS TEXT), ((vt0.c0)-(vt0.c2))))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((((((x'')) BETWEEN ((vt0.c0)) AND ((vt0.c0))))<<((NULL IN ()))));
SELECT * FROM vt0 WHERE ((((((((x'')) BETWEEN ((vt0.c0)) AND ((vt0.c0))))<<((NULL IN ()))))AND((((NOT (vt0.c1))) NOT BETWEEN (((vt0.c2)LIKE(vt0.c2))) AND ((((vt0.c0, vt0.c1))>=((vt0.c2, vt0.c0)))))))) ORDER BY ((((vt0.c2)>(vt0.c0))) NOT NULL)  NULLS LAST, (((vt0.c2)) NOT BETWEEN ((((vt0.c0)/(vt0.c2)))) AND ((rtreenode(vt0.c0, vt0.c2))))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((((x'')) BETWEEN ((vt0.c0)) AND ((vt0.c0))))<<((NULL IN ()))));
SELECT * FROM vt0 WHERE ((((((((x'')) BETWEEN ((vt0.c0)) AND ((vt0.c0))))<<((NULL IN ()))))AND((((NOT (vt0.c1))) NOT BETWEEN (((vt0.c2)LIKE(vt0.c2))) AND ((((vt0.c0, vt0.c1))>=((vt0.c2, vt0.c0)))))))) ORDER BY ((((vt0.c2)>(vt0.c0))) NOT NULL)  NULLS LAST, (((vt0.c2)) NOT BETWEEN ((((vt0.c0)/(vt0.c2)))) AND ((rtreenode(vt0.c0, vt0.c2))))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END) BETWEEN ((- (vt0.c0))) AND (((vt0.c0) NOT BETWEEN (vt0.c2) AND (''))))) ORDER BY UPPER(DISTINCT CAST(vt0.c1 AS BLOB)) ASC  NULLS LAST, ((((vt0.c0) IS FALSE))AND(((vt0.c1)>>(vt0.c0)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END) BETWEEN ((- (vt0.c0))) AND (((vt0.c0) NOT BETWEEN (vt0.c2) AND ('')))))AND((((vt0.c2)) BETWEEN (((- (vt0.c1)))) AND ((vt0.c1 COLLATE BINARY)))))) ORDER BY UPPER(DISTINCT CAST(vt0.c1 AS BLOB)) ASC  NULLS LAST, ((((vt0.c0) IS FALSE))AND(((vt0.c1)>>(vt0.c0)))) ASC;
SELECT ALL * FROM vt0 WHERE (((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END) BETWEEN ((- (vt0.c0))) AND (((vt0.c0) NOT BETWEEN (vt0.c2) AND (''))))) ORDER BY UPPER(DISTINCT CAST(vt0.c1 AS BLOB)) ASC  NULLS LAST, ((((vt0.c0) IS FALSE))AND(((vt0.c1)>>(vt0.c0)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((((CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 ELSE vt0.c0 END) BETWEEN ((- (vt0.c0))) AND (((vt0.c0) NOT BETWEEN (vt0.c2) AND ('')))))AND((((vt0.c2)) BETWEEN (((- (vt0.c1)))) AND ((vt0.c1 COLLATE BINARY)))))) ORDER BY UPPER(DISTINCT CAST(vt0.c1 AS BLOB)) ASC  NULLS LAST, ((((vt0.c0) IS FALSE))AND(((vt0.c1)>>(vt0.c0)))) ASC;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c2 THEN vt0.c0 WHEN 0.7746128906325562 THEN x'56' WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END COLLATE RTRIM) ORDER BY (CASE vt0.c1  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 END IN (TYPEOF(DISTINCT vt0.c0)))  NULLS FIRST, (((NULL)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))) COLLATE BINARY  NULLS FIRST, (((((vt0.c1, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c2, vt0.c1))))|(-6.75065596E8)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c2 THEN vt0.c0 WHEN 0.7746128906325562 THEN x'56' WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END COLLATE RTRIM)AND(CASE WHEN (- (vt0.c0)) THEN ((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)) WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN ((((((vt0.c2)OR(vt0.c2)))AND(NULL)))OR(vt0.c0)) WHEN (vt0.c1 IN (vt0.c1, vt0.c1)) THEN json_valid(vt0.c0) END))) ORDER BY vt0.c1;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c2 THEN vt0.c0 WHEN 0.7746128906325562 THEN x'56' WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END COLLATE RTRIM) ORDER BY (CASE vt0.c1  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 END IN (TYPEOF(DISTINCT vt0.c0)))  NULLS FIRST, (((NULL)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))) COLLATE BINARY  NULLS FIRST, (((((vt0.c1, vt0.c1)) BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c2, vt0.c1))))|(-6.75065596E8)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c2 THEN vt0.c0 WHEN 0.7746128906325562 THEN x'56' WHEN vt0.c1 THEN vt0.c2 ELSE vt0.c1 END COLLATE RTRIM)AND(CASE WHEN (- (vt0.c0)) THEN ((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c1)) WHEN ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)) THEN ((((((vt0.c2)OR(vt0.c2)))AND(NULL)))OR(vt0.c0)) WHEN (vt0.c1 IN (vt0.c1, vt0.c1)) THEN json_valid(vt0.c0) END))) ORDER BY vt0.c1;
SELECT ALL COUNT(*) FROM vt0 WHERE ('0.29904746403598303');
SELECT ALL COUNT(*) FROM vt0 WHERE ((('0.29904746403598303')AND(CASE CAST(vt0.c1 AS TEXT)  WHEN vt0.c2 THEN 0.8437692392912819 WHEN vt0.c1 THEN vt0.c1 WHEN json_patch(vt0.c0, vt0.c2) THEN (vt0.c0 IN ()) WHEN ((vt0.c0) NOTNULL) THEN (((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c1))) ELSE (vt0.c1 IN (vt0.c2, vt0.c0)) END))) LIMIT 0X1;
SELECT * FROM vt0 WHERE ((((vt0.c1)AND(vt0.c2)) IN ())) ORDER BY ((DATE(vt0.c1, vt0.c1, vt0.c1, vt0.c0, vt0.c2, vt0.c1)) BETWEEN ((~ (vt0.c2))) AND (((('-1820249969')) NOT BETWEEN ((vt0.c0)) AND ((vt0.c2))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1)AND(vt0.c2)) IN ())) ORDER BY ((((((((((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)))AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c2))) ISNULL), '|-l*<V?iM' ASC  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE ((((vt0.c1)AND(vt0.c2)) IN ())) ORDER BY ((DATE(vt0.c1, vt0.c1, vt0.c1, vt0.c0, vt0.c2, vt0.c1)) BETWEEN ((~ (vt0.c2))) AND (((('-1820249969')) NOT BETWEEN ((vt0.c0)) AND ((vt0.c2))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1)AND(vt0.c2)) IN ())) ORDER BY ((((((((((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)))AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c2))) ISNULL), '|-l*<V?iM' ASC  NULLS LAST LIMIT 1;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((CASE WHEN vt0.c1 THEN '㌊Ick' WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN '' THEN vt0.c2 END) NOT BETWEEN (((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c0))) AND (vt0.c1 COLLATE BINARY)));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((CASE WHEN vt0.c1 THEN '㌊Ick' WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c2 WHEN '' THEN vt0.c2 END) NOT BETWEEN (((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c2)))AND(vt0.c1)))AND(vt0.c1)))AND(vt0.c0))) AND (vt0.c1 COLLATE BINARY)))AND((+ (vt0.c2))))) ORDER BY ((CAST(vt0.c2 AS INTEGER))LIKE(vt0.c2)) ASC  NULLS FIRST INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((NOT (vt0.c2 COLLATE BINARY))) ORDER BY ((CAST(vt0.c2 AS INTEGER))LIKE(vt0.c2)) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c0)GLOB(CAST(vt0.c2 AS BLOB))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((vt0.c0)GLOB(CAST(vt0.c2 AS BLOB))))AND(CASE ((vt0.c2) NOT NULL)  WHEN ((vt0.c1) IS FALSE) THEN vt0.c0 WHEN (NOT (vt0.c1)) THEN '-291626983' WHEN (~ (vt0.c1)) THEN CASE vt0.c2  WHEN 0.3665427329783967 THEN vt0.c1 ELSE vt0.c1 END ELSE (vt0.c1 IN (vt0.c2)) END))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)OR((- (vt0.c1)))))OR((((vt0.c0)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c1))))))AND(0.29099755821449536)))OR(((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c2)))AND(NULL)))));
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c1 COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c1 COLLATE RTRIM AS NUMERIC)) ORDER BY ((NULL IN ()) IN ()) DESC, ((CAST(vt0.c0 AS BLOB))<<(((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))) ASC, '790808592' DESC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c1 COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c1 COLLATE RTRIM AS NUMERIC)) ORDER BY ((NULL IN ()) IN ()) DESC, ((CAST(vt0.c0 AS BLOB))<<(((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))) ASC, '790808592' DESC  NULLS LAST LIMIT 2;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (NULL) ORDER BY (((vt0.c2))<=((vt0.c0 COLLATE RTRIM))) ASC  NULLS FIRST, ((((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))AND((('TῬ׎7퐡I')<<(vt0.c0)))))AND(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END)) ASC  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((NULL)AND(TRIM(DISTINCT CAST(vt0.c1 AS NUMERIC))))) ORDER BY (((vt0.c2))<=((vt0.c0 COLLATE RTRIM))) ASC  NULLS FIRST, ((((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))AND((('TῬ׎7퐡I')<<(vt0.c0)))))AND(CASE vt0.c1  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END)) ASC  NULLS FIRST LIMIT 0;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((((NOT (vt0.c0)), ((vt0.c0)||(vt0.c1)), CASE WHEN vt0.c1 THEN vt0.c1 END))<((((vt0.c0)OR(vt0.c2)), (x'' IN (vt0.c0)), (vt0.c0 IN (vt0.c2)))))) ORDER BY CASE WHEN CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END THEN CAST(vt0.c0 AS INTEGER) ELSE (+ (vt0.c2)) END ASC, CAST((((vt0.c2))<((vt0.c2))) AS REAL) DESC  NULLS FIRST;
SELECT MAX(vt0.c1) FROM vt0 WHERE (((((NOT (vt0.c0)), ((vt0.c0)||(vt0.c1)), CASE WHEN vt0.c1 THEN vt0.c1 END))<((((vt0.c0)OR(vt0.c2)), (x'' IN (vt0.c0)), (vt0.c0 IN (vt0.c2)))))) ORDER BY CASE WHEN CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END THEN CAST(vt0.c0 AS INTEGER) ELSE (+ (vt0.c2)) END ASC, CAST((((vt0.c2))<((vt0.c2))) AS REAL) DESC  NULLS FIRST INTERSECT SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((- (x'da'))) ORDER BY CASE WHEN CASE WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c2 END THEN CAST(vt0.c0 AS INTEGER) ELSE (+ (vt0.c2)) END ASC, CAST((((vt0.c2))<((vt0.c2))) AS REAL) DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (CASE vt0.c1  WHEN ((vt0.c1) IS FALSE) THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) ELSE vt0.c2 END) ORDER BY (((((((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)), (((vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))), UPPER(vt0.c0)))!=((CASE vt0.c1  WHEN 0.33571056218694384 THEN vt0.c1 ELSE vt0.c1 END, (vt0.c2 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (0.08086640309137427))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((CASE vt0.c1  WHEN ((vt0.c1) IS FALSE) THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) ELSE vt0.c2 END)AND((('2140979552')IS NOT((NOT (vt0.c1))))))) ORDER BY (((((((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)), (((vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))), UPPER(vt0.c0)))!=((CASE vt0.c1  WHEN 0.33571056218694384 THEN vt0.c1 ELSE vt0.c1 END, (vt0.c2 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (0.08086640309137427))))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (0.007533940610712997) ORDER BY (((((((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)), (((vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))), UPPER(vt0.c0)))!=((CASE vt0.c1  WHEN 0.33571056218694384 THEN vt0.c1 ELSE vt0.c1 END, (vt0.c2 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (0.08086640309137427))))) DESC;
SELECT * FROM vt0 WHERE (CASE vt0.c1  WHEN ((vt0.c1) IS FALSE) THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) ELSE vt0.c2 END) ORDER BY (((((((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)), (((vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))), UPPER(vt0.c0)))!=((CASE vt0.c1  WHEN 0.33571056218694384 THEN vt0.c1 ELSE vt0.c1 END, (vt0.c2 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (0.08086640309137427))))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((CASE vt0.c1  WHEN ((vt0.c1) IS FALSE) THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) ELSE vt0.c2 END)AND((('2140979552')IS NOT((NOT (vt0.c1))))))) ORDER BY (((((((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)), (((vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))), UPPER(vt0.c0)))!=((CASE vt0.c1  WHEN 0.33571056218694384 THEN vt0.c1 ELSE vt0.c1 END, (vt0.c2 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (0.08086640309137427))))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (0.007533940610712997) ORDER BY (((((((((((((vt0.c1)AND(NULL)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c2)))OR(vt0.c0)), (((vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c1))), UPPER(vt0.c0)))!=((CASE vt0.c1  WHEN 0.33571056218694384 THEN vt0.c1 ELSE vt0.c1 END, (vt0.c2 IN ()), ((vt0.c1) NOT BETWEEN (vt0.c1) AND (0.08086640309137427))))) DESC;
SELECT * FROM vt0 WHERE (((((vt0.c1)GLOB(vt0.c0))) IS FALSE));
SELECT * FROM vt0 WHERE (((((((vt0.c1)GLOB(vt0.c0))) IS FALSE))AND(((CAST(vt0.c1 AS INTEGER)) NOT BETWEEN (((('-765618178', vt0.c2, vt0.c1))>((vt0.c2, vt0.c2, vt0.c1)))) AND (((vt0.c2)%(vt0.c0))))))) ORDER BY CAST(((vt0.c2) ISNULL) AS INTEGER), (- (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)) ASC, ((((vt0.c1)&(vt0.c1)))IS(((vt0.c1)IS NOT(vt0.c1)))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE ((((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c2)) IN (vt0.c1 COLLATE RTRIM, x'b441'))) ORDER BY CAST(((vt0.c2) ISNULL) AS INTEGER), (- (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)) ASC, ((((vt0.c1)&(vt0.c1)))IS(((vt0.c1)IS NOT(vt0.c1)))) LIMIT 0X0;
SELECT * FROM vt0 WHERE (((((vt0.c1)GLOB(vt0.c0))) IS FALSE));
SELECT * FROM vt0 WHERE (((((((vt0.c1)GLOB(vt0.c0))) IS FALSE))AND(((CAST(vt0.c1 AS INTEGER)) NOT BETWEEN (((('-765618178', vt0.c2, vt0.c1))>((vt0.c2, vt0.c2, vt0.c1)))) AND (((vt0.c2)%(vt0.c0))))))) ORDER BY CAST(((vt0.c2) ISNULL) AS INTEGER), (- (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)) ASC, ((((vt0.c1)&(vt0.c1)))IS(((vt0.c1)IS NOT(vt0.c1)))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE ((((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c1)))AND(vt0.c2)) IN (vt0.c1 COLLATE RTRIM, x'b441'))) ORDER BY CAST(((vt0.c2) ISNULL) AS INTEGER), (- (CASE vt0.c2  WHEN vt0.c1 THEN vt0.c1 END)) ASC, ((((vt0.c1)&(vt0.c1)))IS(((vt0.c1)IS NOT(vt0.c1)))) LIMIT 0X0;
SELECT COUNT(*) FROM vt0 WHERE ((vt0.c1 IN (ABS(DISTINCT vt0.c1)))) ORDER BY 0.38042554246225946 DESC, ((vt0.c1) NOT BETWEEN ((~ (vt0.c2))) AND (((vt0.c2)|(vt0.c2)))) ASC, (((((vt0.c1)AND(vt0.c1)))OR(vt0.c0)) IN ()) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((vt0.c1 IN (ABS(DISTINCT vt0.c1)))) ORDER BY 0.38042554246225946 DESC, ((vt0.c1) NOT BETWEEN ((~ (vt0.c2))) AND (((vt0.c2)|(vt0.c2)))) ASC, (((((vt0.c1)AND(vt0.c1)))OR(vt0.c0)) IN ()) DESC  NULLS LAST LIMIT 0x2;
SELECT MAX(vt0.c2) FROM vt0 WHERE (CAST(vt0.c0 AS INTEGER) COLLATE NOCASE) ORDER BY (NOT (vt0.c1)) COLLATE BINARY;
SELECT MAX(vt0.c2) FROM vt0 WHERE (CAST(vt0.c0 AS INTEGER) COLLATE NOCASE) ORDER BY ('-1513578280' IN ()), 0.07897161631746963  NULLS LAST INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE ((((x'87d6')) BETWEEN ((0.32653273509833314)) AND ((((((vt0.c0)AND(vt0.c2)))AND('')))))) ORDER BY ('-1513578280' IN ()), 0.07897161631746963  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)LIKE(vt0.c2))) BETWEEN (((((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c2))) AND ((vt0.c1 IN ())))) ORDER BY (~ ((vt0.c0 IN ()))), ((~ (vt0.c2)) IN (CAST(vt0.c1 AS NUMERIC), ((vt0.c2) NOT NULL)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c2)LIKE(vt0.c2))) BETWEEN (((((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c2))) AND ((vt0.c1 IN ()))))AND(((((((LOWER(DISTINCT vt0.c2))AND(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))))AND(((vt0.c1)AND(vt0.c2)))))AND(((((vt0.c1)AND(vt0.c0)))OR(vt0.c2))))))) ORDER BY (~ ((vt0.c0 IN ()))), ((~ (vt0.c2)) IN (CAST(vt0.c1 AS NUMERIC), ((vt0.c2) NOT NULL))) INTERSECT SELECT DISTINCT * FROM vt0 NOT INDEXED WHERE (((((((((vt0.c2)OR(vt0.c0)))AND((vt0.c1 IN (vt0.c1)))))AND((+ (NULL)))))AND(vt0.c0))) ORDER BY (~ ((vt0.c0 IN ()))), ((~ (vt0.c2)) IN (CAST(vt0.c1 AS NUMERIC), ((vt0.c2) NOT NULL)));
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)LIKE(vt0.c2))) BETWEEN (((((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c2))) AND ((vt0.c1 IN ())))) ORDER BY (~ ((vt0.c0 IN ()))), ((~ (vt0.c2)) IN (CAST(vt0.c1 AS NUMERIC), ((vt0.c2) NOT NULL)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c2)LIKE(vt0.c2))) BETWEEN (((((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c0)))OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c2))) AND ((vt0.c1 IN ()))))AND(((((((LOWER(DISTINCT vt0.c2))AND(((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)))))AND(((vt0.c1)AND(vt0.c2)))))AND(((((vt0.c1)AND(vt0.c0)))OR(vt0.c2))))))) ORDER BY (~ ((vt0.c0 IN ()))), ((~ (vt0.c2)) IN (CAST(vt0.c1 AS NUMERIC), ((vt0.c2) NOT NULL))) INTERSECT SELECT DISTINCT * FROM vt0 NOT INDEXED WHERE (((((((((vt0.c2)OR(vt0.c0)))AND((vt0.c1 IN (vt0.c1)))))AND((+ (NULL)))))AND(vt0.c0))) ORDER BY (~ ((vt0.c0 IN ()))), ((~ (vt0.c2)) IN (CAST(vt0.c1 AS NUMERIC), ((vt0.c2) NOT NULL)));
SELECT MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c1)>=(vt0.c2)))%(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN NULL THEN vt0.c1 ELSE vt0.c0 END))) ORDER BY ((HEX(vt0.c1))&((vt0.c0 IN ()))), LOWER(DISTINCT ((vt0.c2)<=(vt0.c0))) ASC;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((((((vt0.c1)>=(vt0.c2)))%(CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN NULL THEN vt0.c1 ELSE vt0.c0 END)))AND(SQLITE_COMPILEOPTION_GET((- (vt0.c1)))))) ORDER BY ((HEX(vt0.c1))&((vt0.c0 IN ()))), LOWER(DISTINCT ((vt0.c2)<=(vt0.c0))) ASC;
SELECT * FROM vt0 WHERE ((((('617402341') BETWEEN (vt0.c0) AND (vt0.c1)))OR(((vt0.c2) IS TRUE))));
SELECT ALL * FROM vt0 WHERE ((((('617402341') BETWEEN (vt0.c0) AND (vt0.c1)))OR(((vt0.c2) IS TRUE)))) ORDER BY NULLIF(((((((((vt0.c0)AND(1424276739)))OR(vt0.c0)))AND(vt0.c2)))OR(vt0.c2)), vt0.c1), DATE(CAST(vt0.c0 AS REAL), CAST(vt0.c1 AS BLOB), (- (vt0.c0))) LIMIT 0x0;
SELECT * FROM vt0 WHERE ((((('617402341') BETWEEN (vt0.c0) AND (vt0.c1)))OR(((vt0.c2) IS TRUE))));
SELECT ALL * FROM vt0 WHERE ((((('617402341') BETWEEN (vt0.c0) AND (vt0.c1)))OR(((vt0.c2) IS TRUE)))) ORDER BY NULLIF(((((((((vt0.c0)AND(1424276739)))OR(vt0.c0)))AND(vt0.c2)))OR(vt0.c2)), vt0.c1), DATE(CAST(vt0.c0 AS REAL), CAST(vt0.c1 AS BLOB), (- (vt0.c0))) LIMIT 0x0;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) COLLATE BINARY);
SELECT MAX(vt0.c1) FROM vt0 WHERE (((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) COLLATE BINARY)AND(((vt0.c1 COLLATE BINARY)*(vt0.c1))))) LIMIT 0x1;
SELECT * FROM vt0 WHERE (CASE CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END  WHEN ((vt0.c1)<=(vt0.c1)) THEN SQLITE_SOURCE_ID() WHEN CAST(vt0.c0 AS REAL) THEN TYPEOF(DISTINCT vt0.c2) ELSE NULL END);
SELECT ALL * FROM vt0 WHERE (((CASE CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END  WHEN ((vt0.c1)<=(vt0.c1)) THEN SQLITE_SOURCE_ID() WHEN CAST(vt0.c0 AS REAL) THEN TYPEOF(DISTINCT vt0.c2) ELSE NULL END)AND(0.1425051279698707))) INTERSECT SELECT ALL * FROM vt0 WHERE (((((((((((((vt0.c0)OR(NULL)))AND(vt0.c2)))OR('-2081328921')))OR(vt0.c0)))OR(vt0.c0))) IS FALSE));
SELECT * FROM vt0 WHERE (CASE CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END  WHEN ((vt0.c1)<=(vt0.c1)) THEN SQLITE_SOURCE_ID() WHEN CAST(vt0.c0 AS REAL) THEN TYPEOF(DISTINCT vt0.c2) ELSE NULL END);
SELECT ALL * FROM vt0 WHERE (((CASE CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END  WHEN ((vt0.c1)<=(vt0.c1)) THEN SQLITE_SOURCE_ID() WHEN CAST(vt0.c0 AS REAL) THEN TYPEOF(DISTINCT vt0.c2) ELSE NULL END)AND(0.1425051279698707))) INTERSECT SELECT ALL * FROM vt0 WHERE (((((((((((((vt0.c0)OR(NULL)))AND(vt0.c2)))OR('-2081328921')))OR(vt0.c0)))OR(vt0.c0))) IS FALSE));
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (CAST('Zx\' COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (CAST('Zx\' COLLATE RTRIM AS NUMERIC)) LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (CASE CAST(vt0.c0 AS NUMERIC)  WHEN (((vt0.c2))>((vt0.c0))) THEN (NOT (vt0.c1)) WHEN CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN '\H&' THEN vt0.c0 ELSE vt0.c2 END THEN CAST(vt0.c1 AS NUMERIC) END) LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (vt0.c2);
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c2) INTERSECT SELECT COUNT(*) FROM vt0 WHERE (CAST(LIKE(-480765989, vt0.c1, ' ') AS BLOB));
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY (((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END))>((((vt0.c1)>=(vt0.c1))))) DESC  NULLS LAST, ((CAST(vt0.c2 AS TEXT))&(((vt0.c2)%(vt0.c2))));
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY (((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END))>((((vt0.c1)>=(vt0.c1))))) DESC  NULLS LAST, ((CAST(vt0.c2 AS TEXT))&(((vt0.c2)%(vt0.c2))));
SELECT * FROM vt0 WHERE (vt0.c1) ORDER BY (((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END))>((((vt0.c1)>=(vt0.c1))))) DESC  NULLS LAST, ((CAST(vt0.c2 AS TEXT))&(((vt0.c2)%(vt0.c2))));
SELECT ALL * FROM vt0 WHERE (vt0.c1) ORDER BY (((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c0 END))>((((vt0.c1)>=(vt0.c1))))) DESC  NULLS LAST, ((CAST(vt0.c2 AS TEXT))&(((vt0.c2)%(vt0.c2))));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0)IS(vt0.c1))) BETWEEN ((vt0.c2 IN ())) AND ((~ (vt0.c1)))));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((((vt0.c0)IS(vt0.c1))) BETWEEN ((vt0.c2 IN ())) AND ((~ (vt0.c1)))))AND((((vt0.c1 IN (vt0.c1)))=(vt0.c0 COLLATE NOCASE))))) ORDER BY (~ (((((vt0.c2)OR(vt0.c2)))OR(vt0.c2)))) DESC INTERSECT SELECT MIN(vt0.c0) FROM vt0 WHERE (CAST((((vt0.c1))<=((vt0.c1))) AS TEXT)) ORDER BY (~ (((((vt0.c2)OR(vt0.c2)))OR(vt0.c2)))) DESC;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((vt0.c2)>=(vt0.c2)) COLLATE NOCASE) ORDER BY (((NOT (vt0.c2))) BETWEEN (x'fa16') AND (((vt0.c2)%(vt0.c1)))), ((((vt0.c1) IS TRUE))IS NOT((- (vt0.c1))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c2)=(vt0.c2)) COLLATE NOCASE) ORDER BY (((NOT (vt0.c2))) BETWEEN (x'fa16') AND (((vt0.c2)%(vt0.c1)))), ((((vt0.c1) IS TRUE))IS NOT((- (vt0.c1)))) INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c2)<<(''))) NOTNULL)) ORDER BY (((NOT (vt0.c2))) BETWEEN (x'fa16') AND (((vt0.c2)%(vt0.c1)))), ((((vt0.c1) IS TRUE))IS NOT((- (vt0.c1))));
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (CASE WHEN COALESCE(DISTINCT vt0.c2, vt0.c0) THEN x'e608cff1a4' WHEN (vt0.c2 IN (vt0.c0)) THEN vt0.c0 WHEN CASE WHEN x'21c1' THEN vt0.c0 WHEN -1383487729 THEN vt0.c1 END THEN json_array(vt0.c1, vt0.c2) END) ORDER BY CASE (+ (vt0.c2))  WHEN ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)) THEN ((vt0.c0)IS NOT(0.7679946663797352)) WHEN (vt0.c0 IN ('2130670552')) THEN (('閻}5	4d')&(vt0.c1)) ELSE NULL END  NULLS LAST, ((((vt0.c2)>(vt0.c2))) ISNULL), ((json_patch(vt0.c2, vt0.c1)) IS TRUE);
SELECT MIN(vt0.c2) FROM vt0 WHERE (((CASE WHEN COALESCE(DISTINCT vt0.c2, vt0.c0) THEN x'e608cff1a4' WHEN (vt0.c2 IN (vt0.c0)) THEN vt0.c0 WHEN CASE WHEN x'21c1' THEN vt0.c0 WHEN 0xffffffffad89a70f THEN vt0.c1 END THEN json_array(vt0.c1, vt0.c2) END)AND(CAST(vt0.c0 AS TEXT)))) ORDER BY CASE (+ (vt0.c2))  WHEN ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)) THEN ((vt0.c0)IS NOT(0.7679946663797352)) WHEN (vt0.c0 IN ('2130670552')) THEN (('閻}5	4d')&(vt0.c1)) ELSE NULL END  NULLS LAST, ((((vt0.c2)>(vt0.c2))) ISNULL), ((json_patch(vt0.c2, vt0.c1)) IS TRUE) INTERSECT SELECT MIN(vt0.c2) FROM vt0 WHERE (NULL) ORDER BY CASE (+ (vt0.c2))  WHEN ((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c1)) THEN ((vt0.c0)IS NOT(0.7679946663797352)) WHEN (vt0.c0 IN ('2130670552')) THEN (('閻}5	4d')&(vt0.c1)) ELSE NULL END  NULLS LAST, ((((vt0.c2)>(vt0.c2))) ISNULL), ((json_patch(vt0.c2, vt0.c1)) IS TRUE);
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c0)=(vt0.c0))) NOT BETWEEN (((NULL)AND(vt0.c1))) AND (CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE 'Jj_V' END))) ORDER BY CASE WHEN ((vt0.c0)IS(vt0.c1)) THEN vt0.c1 WHEN ((vt0.c0) IS FALSE) THEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END WHEN ((vt0.c2)||(vt0.c2)) THEN '-1296960579' WHEN (- (vt0.c0)) THEN vt0.c1 COLLATE NOCASE END ASC;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c0)>=(vt0.c0))) NOT BETWEEN (((NULL)AND(vt0.c1))) AND (CASE vt0.c1  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 ELSE 'Jj_V' END))) ORDER BY CASE WHEN ((vt0.c0)IS(vt0.c1)) THEN vt0.c1 WHEN ((vt0.c0) IS FALSE) THEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END WHEN ((vt0.c2)||(vt0.c2)) THEN '-1296960579' WHEN (- (vt0.c0)) THEN vt0.c1 COLLATE NOCASE END ASC LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((((vt0.c2)AND(vt0.c0)))OR(x'')) COLLATE RTRIM) ORDER BY CASE WHEN ((vt0.c0)IS(vt0.c1)) THEN vt0.c1 WHEN ((vt0.c0) IS FALSE) THEN CASE WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END WHEN ((vt0.c2)||(vt0.c2)) THEN '-1296960579' WHEN (- (vt0.c0)) THEN vt0.c1 COLLATE NOCASE END ASC LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c2, vt0.c1))!=((vt0.c0, vt0.c1)))))>((vt0.c1))));
SELECT * FROM vt0 WHERE (((((((vt0.c2, vt0.c1))!=((vt0.c0, vt0.c1)))))>((vt0.c1)))) ORDER BY ((((NULL)==(vt0.c0))) IS FALSE) ASC, ((((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)))|((((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, vt0.c0, vt0.c0)) AND ((vt0.c2, vt0.c1, vt0.c2))))) LIMIT 2;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c2, vt0.c1))!=((vt0.c0, vt0.c1)))))>((vt0.c1))));
SELECT * FROM vt0 WHERE (((((((vt0.c2, vt0.c1))!=((vt0.c0, vt0.c1)))))>((vt0.c1)))) ORDER BY ((((NULL)==(vt0.c0))) IS FALSE) ASC, ((((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)))|((((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, vt0.c0, vt0.c0)) AND ((vt0.c2, vt0.c1, vt0.c2))))) LIMIT 2;
SELECT * FROM vt0 WHERE ((((vt0.c0)>>(vt0.c2)) IN (((vt0.c1)%(vt0.c2)), (((vt0.c2))>((vt0.c0))))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c0)>>(vt0.c2)) IN (((vt0.c1)%(vt0.c2)), (((vt0.c2))>((vt0.c0)))))) LIMIT 2;
SELECT * FROM vt0 WHERE ((((vt0.c0)>>(vt0.c2)) IN (((vt0.c1)%(vt0.c2)), (((vt0.c2))>((vt0.c0))))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c0)>>(vt0.c2)) IN (((vt0.c1)%(vt0.c2)), (((vt0.c2))>((vt0.c0)))))) LIMIT 2;
SELECT * FROM vt0 WHERE (((vt0.c2) IS TRUE));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2) IS TRUE))AND(CAST(vt0.c1 AS BLOB))));
SELECT * FROM vt0 WHERE (((vt0.c2) IS TRUE));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2) IS TRUE))AND(CAST(vt0.c1 AS BLOB))));
SELECT ALL * FROM vt0 WHERE (980902564);
SELECT DISTINCT * FROM vt0 WHERE (0X3a7762a4) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (980902564);
SELECT DISTINCT * FROM vt0 WHERE (0X3a7762a4) LIMIT 0;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c1) ORDER BY (- (LOWER(x'8e')))  NULLS LAST, (- (vt0.c0 COLLATE NOCASE));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c1)AND(vt0.c2))) ORDER BY (- (LOWER(x'8e')))  NULLS LAST, (- (vt0.c0 COLLATE NOCASE));
SELECT * FROM vt0 WHERE (0.4423751635926221);
SELECT DISTINCT * FROM vt0 WHERE (0.4423751635926221) LIMIT 0x1;
SELECT * FROM vt0 WHERE (0.4423751635926221);
SELECT DISTINCT * FROM vt0 WHERE (0.4423751635926221) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)>=(vt0.c2)))-(UPPER(vt0.c1)))) ORDER BY 1195523580 COLLATE NOCASE;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c2)==(vt0.c2)))-(UPPER(vt0.c1)))) ORDER BY (((((((vt0.c2)AND(vt0.c2)))AND(vt0.c2)), ((vt0.c0)!=(vt0.c0))))<((((vt0.c2) IS TRUE), SUBSTR(vt0.c2, vt0.c1)))) ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c2)>=(vt0.c2)))-(UPPER(vt0.c1)))) ORDER BY 1195523580 COLLATE NOCASE;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))OR(vt0.c2))) IS FALSE)) ORDER BY json_insert(((0.16016498012628866)LIKE(vt0.c2)), '-558923485', (((vt0.c0, vt0.c1, vt0.c0, vt0.c0)) BETWEEN ((vt0.c1, vt0.c1, '1993734216', vt0.c0)) AND ((vt0.c2, vt0.c2, vt0.c0, vt0.c1))))  NULLS LAST, (((+ (vt0.c2))) NOT BETWEEN ((((vt0.c2, vt0.c2))<=((vt0.c0, vt0.c1)))) AND (vt0.c2));
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))OR(vt0.c2))) IS FALSE)) ORDER BY json_insert(((0.16016498012628866)LIKE(vt0.c2)), '-558923485', (((vt0.c0, vt0.c1, vt0.c0, vt0.c0)) BETWEEN ((vt0.c1, vt0.c1, '1993734216', vt0.c0)) AND ((vt0.c2, vt0.c2, vt0.c0, vt0.c1))))  NULLS LAST, (((+ (vt0.c2))) NOT BETWEEN ((((vt0.c2, vt0.c2))<=((vt0.c0, vt0.c1)))) AND (vt0.c2)) INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE (((NULLIF(DISTINCT NULL, vt0.c0))<=(vt0.c0))) ORDER BY json_insert(((0.16016498012628866)LIKE(vt0.c2)), '-558923485', (((vt0.c0, vt0.c1, vt0.c0, vt0.c0)) BETWEEN ((vt0.c1, vt0.c1, '1993734216', vt0.c0)) AND ((vt0.c2, vt0.c2, vt0.c0, vt0.c1))))  NULLS LAST, (((+ (vt0.c2))) NOT BETWEEN ((((vt0.c2, vt0.c2))<=((vt0.c0, vt0.c1)))) AND (vt0.c2));
SELECT COUNT(*) FROM vt0 WHERE (CASE WHEN vt0.c1 THEN CAST(vt0.c0 AS BLOB) WHEN NULL THEN SQLITE_COMPILEOPTION_USED(vt0.c2) END) ORDER BY CAST((('-1262403319')||('-353614591')) AS TEXT), ((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c1))) NOTNULL)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE WHEN vt0.c1 THEN CAST(vt0.c0 AS BLOB) WHEN NULL THEN SQLITE_COMPILEOPTION_USED(vt0.c2) END) ORDER BY ((((0.5070238009219727)>=(vt0.c1))) NOT NULL) ASC LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CAST(vt0.c0 AS INTEGER)) ORDER BY ((((0.5070238009219727)>=(vt0.c1))) NOT NULL) ASC LIMIT 0;
SELECT ALL MIN(vt0.c2) FROM vt0 WHERE (CAST(NULL AS BLOB));
SELECT MIN(vt0.c2) FROM vt0 WHERE (CAST(NULL AS BLOB)) ORDER BY CAST(CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c1 END AS TEXT);
SELECT ALL COUNT(*) FROM vt0 WHERE ((+ (vt0.c2 COLLATE RTRIM))) ORDER BY ((vt0.c2 COLLATE RTRIM) BETWEEN ((((vt0.c1))>=((-1.318887227E9)))) AND (NULL)) ASC;
SELECT COUNT(*) FROM vt0 NOT INDEXED WHERE ((+ (vt0.c2 COLLATE RTRIM))) ORDER BY (((0.4904196474527932, NULL))<((NULL, ((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2))))) ASC  NULLS FIRST, CASE WHEN x'3ab0ed' THEN CASE WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END ELSE (vt0.c1 IN (vt0.c1, vt0.c0)) END, (CAST(vt0.c2 AS NUMERIC) IN ())  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c2)AND(vt0.c2)) COLLATE NOCASE) ORDER BY (((0.4904196474527932, NULL))<((NULL, ((vt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2))))) ASC  NULLS FIRST, CASE WHEN x'3ab0ed' THEN CASE WHEN vt0.c2 THEN vt0.c2 ELSE vt0.c1 END ELSE (vt0.c1 IN (vt0.c1, vt0.c0)) END, (CAST(vt0.c2 AS NUMERIC) IN ())  NULLS LAST LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt0 WHERE (CAST(((vt0.c1)||(vt0.c0)) AS TEXT));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST(((vt0.c1)||(vt0.c0)) AS TEXT))AND((((vt0.c2, vt0.c2, vt0.c2, x'f070', vt0.c2)) NOT BETWEEN ((vt0.c0, vt0.c1, vt0.c1, vt0.c1, vt0.c2)) AND ((vt0.c1, vt0.c1, vt0.c1, vt0.c0, vt0.c2))) COLLATE BINARY))) ORDER BY (((((vt0.c0)OR(vt0.c2)))OR(vt0.c0)) IN ()) DESC, ((((((UNLIKELY(vt0.c1))AND(vt0.c2)))AND(((vt0.c2) NOTNULL))))OR((- (vt0.c0))))  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST(vt0.c0 AS INTEGER)) NOT BETWEEN (vt0.c2 COLLATE RTRIM) AND (NULL))) ORDER BY (((((vt0.c0)OR(vt0.c2)))OR(vt0.c0)) IN ()) DESC, ((((((UNLIKELY(vt0.c1))AND(vt0.c2)))AND(((vt0.c2) NOTNULL))))OR((- (vt0.c0))))  NULLS LAST LIMIT 0;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (LIKE(LOWER(vt0.c1), ((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (LIKE(LOWER(vt0.c1), ((((((((vt0.c2)AND(vt0.c1)))OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c2)))) ORDER BY ((CAST(vt0.c0 AS NUMERIC))/(TRIM(DISTINCT vt0.c0, NULL))) ASC, (- (UNICODE(vt0.c1))) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c2 COLLATE NOCASE THEN vt0.c1 COLLATE BINARY WHEN ((vt0.c2) NOT NULL) THEN ((((((((vt0.c1)AND(vt0.c1)))OR(vt0.c1)))OR(x'')))OR(vt0.c2)) ELSE ((((((1.7976931348623157E308)AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c2)) END) ORDER BY ((((1671601185)/(vt0.c0))) IS FALSE)  NULLS LAST;
SELECT * FROM vt0 WHERE (((CASE WHEN vt0.c2 COLLATE NOCASE THEN vt0.c1 COLLATE BINARY WHEN ((vt0.c2) NOT NULL) THEN ((((((((vt0.c1)AND(vt0.c1)))OR(vt0.c1)))OR(x'')))OR(vt0.c2)) ELSE ((((((1.7976931348623157E308)AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c2)) END)AND(CAST(vt0.c2 AS NUMERIC)))) ORDER BY ((((0X63a29c21)/(vt0.c0))) IS FALSE)  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (((vt0.c1)LIKE(vt0.c1)) COLLATE BINARY) ORDER BY ((((1671601185)/(vt0.c0))) IS FALSE)  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c2 COLLATE NOCASE THEN vt0.c1 COLLATE BINARY WHEN ((vt0.c2) NOT NULL) THEN ((((((((vt0.c1)AND(vt0.c1)))OR(vt0.c1)))OR(x'')))OR(vt0.c2)) ELSE ((((((1.7976931348623157E308)AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c2)) END) ORDER BY ((((1671601185)/(vt0.c0))) IS FALSE)  NULLS LAST;
SELECT * FROM vt0 WHERE (((CASE WHEN vt0.c2 COLLATE NOCASE THEN vt0.c1 COLLATE BINARY WHEN ((vt0.c2) NOT NULL) THEN ((((((((vt0.c1)AND(vt0.c1)))OR(vt0.c1)))OR(x'')))OR(vt0.c2)) ELSE ((((((1.7976931348623157E308)AND(vt0.c1)))OR(vt0.c0)))OR(vt0.c2)) END)AND(CAST(vt0.c2 AS NUMERIC)))) ORDER BY ((((0X63a29c21)/(vt0.c0))) IS FALSE)  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (((vt0.c1)LIKE(vt0.c1)) COLLATE BINARY) ORDER BY ((((1671601185)/(vt0.c0))) IS FALSE)  NULLS LAST;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (CAST(x'' AS NUMERIC));
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (((CAST(x'' AS NUMERIC))AND((NOT (((vt0.c1) IS FALSE)))))) INTERSECT SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (CAST(TRIM(DISTINCT vt0.c0, vt0.c2) AS INTEGER));
SELECT * FROM vt0 WHERE ((+ (((vt0.c2)&(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE ((((+ (((vt0.c2)&(vt0.c1)))))AND((- ((vt0.c0 IN (vt0.c0))))))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((vt0.c2 IN ((((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c1, vt0.c2))))));
SELECT * FROM vt0 WHERE ((+ (((vt0.c2)&(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE ((((+ (((vt0.c2)&(vt0.c1)))))AND((- ((vt0.c0 IN (vt0.c0))))))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((vt0.c2 IN ((((vt0.c2, vt0.c1)) NOT BETWEEN ((vt0.c0, vt0.c2)) AND ((vt0.c1, vt0.c2))))));
SELECT * FROM vt0 WHERE (((((vt0.c0)%(vt0.c2))) NOT BETWEEN (vt0.c0 COLLATE RTRIM) AND (((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)%(vt0.c2))) NOT BETWEEN (vt0.c0 COLLATE RTRIM) AND (((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)))))AND(CASE WHEN ((vt0.c0)>=(vt0.c1)) THEN CAST(vt0.c2 AS INTEGER) WHEN 2.99343851E8 COLLATE BINARY THEN '[' END))) LIMIT 3;
SELECT * FROM vt0 WHERE (((((vt0.c0)%(vt0.c2))) NOT BETWEEN (vt0.c0 COLLATE RTRIM) AND (((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)))));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)%(vt0.c2))) NOT BETWEEN (vt0.c0 COLLATE RTRIM) AND (((((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)))OR(vt0.c2)))))AND(CASE WHEN ((vt0.c0)>=(vt0.c1)) THEN CAST(vt0.c2 AS INTEGER) WHEN 2.99343851E8 COLLATE BINARY THEN '[' END))) LIMIT 3;
SELECT MIN(vt0.c0) FROM vt0 WHERE ((+ (CAST(vt0.c1 AS INTEGER))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((+ (CAST(vt0.c1 AS INTEGER)))) ORDER BY ((UNLIKELY(vt0.c1)) NOTNULL), vt0.c2  NULLS LAST, ((vt0.c0 COLLATE NOCASE)OR((((vt0.c2, vt0.c0))>((vt0.c2, vt0.c1))))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)) COLLATE RTRIM) ORDER BY 'cCm햦tJVwO' COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)) COLLATE RTRIM) ORDER BY ((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))<(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1))))  NULLS LAST, ((vt0.c0 IN ('', vt0.c0)) IN (((vt0.c2)<=(vt0.c2)), ((vt0.c2)<(vt0.c1)), (((vt0.c2))>(('298697454'))))) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))<(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1))))  NULLS LAST, ((vt0.c0 IN ('', vt0.c0)) IN (((vt0.c2)<=(vt0.c2)), ((vt0.c2)<(vt0.c1)), (((vt0.c2))>(('298697454'))))) ASC;
SELECT ALL * FROM vt0 WHERE (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)) COLLATE RTRIM) ORDER BY 'cCm햦tJVwO' COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c2)) COLLATE RTRIM) ORDER BY ((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))<(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1))))  NULLS LAST, ((vt0.c0 IN ('', vt0.c0)) IN (((vt0.c2)<=(vt0.c2)), ((vt0.c2)<(vt0.c1)), (((vt0.c2))>(('298697454'))))) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c0)))<(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1))))  NULLS LAST, ((vt0.c0 IN ('', vt0.c0)) IN (((vt0.c2)<=(vt0.c2)), ((vt0.c2)<(vt0.c1)), (((vt0.c2))>(('298697454'))))) ASC;
SELECT * FROM vt0 WHERE ((((vt0.c2 IN ())) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND (vt0.c1))) ORDER BY (((((vt0.c1))<=((vt0.c0))))>=(((vt0.c2)OR(vt0.c0))))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((((vt0.c2 IN ())) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND (vt0.c1)))AND(x'5b' COLLATE BINARY))) ORDER BY (((((vt0.c1))<=((vt0.c0))))>=(((vt0.c2)OR(vt0.c0))))  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt0 WHERE (((ABS(vt0.c0))>=(vt0.c2 COLLATE RTRIM))) ORDER BY (((((vt0.c1))<=((vt0.c0))))>=(((vt0.c2)OR(vt0.c0))))  NULLS LAST LIMIT 0x0;
SELECT * FROM vt0 WHERE ((((vt0.c2 IN ())) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND (vt0.c1))) ORDER BY (((((vt0.c1))<=((vt0.c0))))>=(((vt0.c2)OR(vt0.c0))))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((((vt0.c2 IN ())) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2))) AND (vt0.c1)))AND(x'5b' COLLATE BINARY))) ORDER BY (((((vt0.c1))<=((vt0.c0))))>=(((vt0.c2)OR(vt0.c0))))  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt0 WHERE (((ABS(vt0.c0))>=(vt0.c2 COLLATE RTRIM))) ORDER BY (((((vt0.c1))<=((vt0.c0))))>=(((vt0.c2)OR(vt0.c0))))  NULLS LAST LIMIT 0x0;
SELECT COUNT(*) FROM vt0 WHERE (vt0.c0);
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c0) ORDER BY (((vt0.c0, vt0.c0)) BETWEEN (((- (vt0.c1)), CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN 0.72202826552575 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END)) AND (((((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))), NULL))) ASC  NULLS LAST, (+ ((vt0.c2 IN (vt0.c1, vt0.c2)))) DESC  NULLS LAST, ((((((vt0.c2)AND(vt0.c2)))AND(NULLIF(0.8688205317459026, '917511139'))))AND(vt0.c0 COLLATE BINARY));
SELECT MAX(vt0.c2) FROM vt0 WHERE (CASE WHEN CAST(vt0.c2 AS INTEGER) THEN vt0.c1 ELSE ((((((((((vt0.c0)OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c0)) END) ORDER BY ((0.4888897351822453)GLOB(NULL))  NULLS LAST;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((CASE WHEN CAST(vt0.c2 AS INTEGER) THEN vt0.c1 ELSE ((((((((((vt0.c0)OR(vt0.c1)))OR(vt0.c1)))AND(vt0.c1)))AND(vt0.c0)))OR(vt0.c0)) END)AND((((vt0.c0)) NOT BETWEEN ((CASE vt0.c2  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END)) AND ((((vt0.c0) IS TRUE))))))) ORDER BY UNLIKELY(DISTINCT ((vt0.c1) IS FALSE)), (((vt0.c2)*(vt0.c0)) IN ()) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)) COLLATE NOCASE) ORDER BY UNLIKELY(DISTINCT ((vt0.c1) IS FALSE)), (((vt0.c2)*(vt0.c0)) IN ()) DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((((vt0.c0)) NOT BETWEEN ((((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))) AND (((('701719929')GLOB(NULL)))))) ORDER BY 0.47884575479517444;
SELECT MAX(vt0.c2) FROM vt0 WHERE ((((vt0.c0)) NOT BETWEEN ((((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)))) AND (((('701719929')GLOB(NULL)))))) ORDER BY 0.47884575479517444 INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (CASE WHEN ((vt0.c0)LIKE(vt0.c2)) THEN (((vt0.c2, vt0.c1, vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((NULL, vt0.c1, vt0.c1, vt0.c1, NULL)) AND ((vt0.c0, vt0.c2, vt0.c2, vt0.c0, vt0.c0))) ELSE (vt0.c0 IN (vt0.c2)) END) ORDER BY 0.47884575479517444;
SELECT * FROM vt0 WHERE (CAST(((((vt0.c2)AND(vt0.c0)))OR(vt0.c1)) AS INTEGER)) ORDER BY (((((vt0.c2)) BETWEEN ((x'')) AND ((vt0.c2)))) NOT NULL)  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (CAST(((((vt0.c2)AND(vt0.c0)))OR(vt0.c1)) AS INTEGER)) ORDER BY (((((vt0.c2)) BETWEEN ((x'')) AND ((vt0.c2)))) NOT NULL)  NULLS LAST;
SELECT * FROM vt0 WHERE (CAST(((((vt0.c2)AND(vt0.c0)))OR(vt0.c1)) AS INTEGER)) ORDER BY (((((vt0.c2)) BETWEEN ((x'')) AND ((vt0.c2)))) NOT NULL)  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (CAST(((((vt0.c2)AND(vt0.c0)))OR(vt0.c1)) AS INTEGER)) ORDER BY (((((vt0.c2)) BETWEEN ((x'')) AND ((vt0.c2)))) NOT NULL)  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (0.055686972641487475);
SELECT ALL COUNT(*) FROM vt0 WHERE (0.055686972641487475) LIMIT 0X5;
SELECT ALL * FROM vt0 WHERE ((NOT (vt0.c0)) COLLATE NOCASE) ORDER BY ((CASE WHEN vt0.c2 THEN vt0.c2 WHEN NULL THEN vt0.c2 END)|((vt0.c0 IN ()))), vt0.c0, (((NOT (vt0.c1))) BETWEEN ((vt0.c2 IN ())) AND (CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)) DESC;
SELECT ALL * FROM vt0 WHERE ((NOT (vt0.c0)) COLLATE NOCASE) ORDER BY (vt0.c0 COLLATE RTRIM IN (0.4592441918929189, vt0.c0)) DESC  NULLS LAST, ((vt0.c2)*(vt0.c2)) COLLATE RTRIM LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((NOT (vt0.c0)) COLLATE NOCASE) ORDER BY ((CASE WHEN vt0.c2 THEN vt0.c2 WHEN NULL THEN vt0.c2 END)|((vt0.c0 IN ()))), vt0.c0, (((NOT (vt0.c1))) BETWEEN ((vt0.c2 IN ())) AND (CASE WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c0 END)) DESC;
SELECT ALL * FROM vt0 WHERE ((NOT (vt0.c0)) COLLATE NOCASE) ORDER BY (vt0.c0 COLLATE RTRIM IN (0.4592441918929189, vt0.c0)) DESC  NULLS LAST, ((vt0.c2)*(vt0.c2)) COLLATE RTRIM LIMIT 0;
SELECT ALL * FROM vt0 NOT INDEXED WHERE (((CAST(vt0.c1 AS NUMERIC)) NOT BETWEEN ((+ (x'77'))) AND (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c1 AS NUMERIC)) NOT BETWEEN ((+ (x'77'))) AND (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1))))) ORDER BY ((((((((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c0)))OR(CASE WHEN vt0.c1 THEN vt0.c1 END)))OR(IFNULL(vt0.c0, vt0.c1))))OR(vt0.c1 COLLATE BINARY)))AND(CASE WHEN vt0.c1 THEN vt0.c1 WHEN 0.822698702934329 THEN vt0.c0 WHEN vt0.c1 THEN '㖹y' END)) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((+ (vt0.c1)) IN (LIKELIHOOD(vt0.c0, vt0.c0), CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c2 END))) ORDER BY ((((((((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c0)))OR(CASE WHEN vt0.c1 THEN vt0.c1 END)))OR(IFNULL(vt0.c0, vt0.c1))))OR(vt0.c1 COLLATE BINARY)))AND(CASE WHEN vt0.c1 THEN vt0.c1 WHEN 0.822698702934329 THEN vt0.c0 WHEN vt0.c1 THEN '㖹y' END));
SELECT ALL * FROM vt0 NOT INDEXED WHERE (((CAST(vt0.c1 AS NUMERIC)) NOT BETWEEN ((+ (x'77'))) AND (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c1 AS NUMERIC)) NOT BETWEEN ((+ (x'77'))) AND (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1))))) ORDER BY ((((((((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c0)))OR(CASE WHEN vt0.c1 THEN vt0.c1 END)))OR(IFNULL(vt0.c0, vt0.c1))))OR(vt0.c1 COLLATE BINARY)))AND(CASE WHEN vt0.c1 THEN vt0.c1 WHEN 0.822698702934329 THEN vt0.c0 WHEN vt0.c1 THEN '㖹y' END)) INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((+ (vt0.c1)) IN (LIKELIHOOD(vt0.c0, vt0.c0), CASE WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c2 END))) ORDER BY ((((((((((vt0.c0) BETWEEN (vt0.c2) AND (vt0.c0)))OR(CASE WHEN vt0.c1 THEN vt0.c1 END)))OR(IFNULL(vt0.c0, vt0.c1))))OR(vt0.c1 COLLATE BINARY)))AND(CASE WHEN vt0.c1 THEN vt0.c1 WHEN 0.822698702934329 THEN vt0.c0 WHEN vt0.c1 THEN '㖹y' END));
SELECT MIN(vt0.c0) FROM vt0 WHERE ((+ (((vt0.c0)||(vt0.c2))))) ORDER BY vt0.c2  NULLS FIRST, (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) IN ()), vt0.c2;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((+ (((vt0.c0)||(vt0.c2)))))AND(SQLITE_COMPILEOPTION_GET(vt0.c0)))) ORDER BY vt0.c2  NULLS FIRST, (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) IN ()), vt0.c2 INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0)GLOB(vt0.c1))) BETWEEN (vt0.c0) AND ((- (x'3140e994'))))) ORDER BY vt0.c2  NULLS FIRST, (((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c2)) IN ()), vt0.c2;
SELECT ALL * FROM vt0 WHERE (0X57caa235) ORDER BY ((((vt0.c1)AND(((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))))OR((((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) DESC  NULLS FIRST, ((vt0.c1 COLLATE BINARY)LIKE(((vt0.c0)==(vt0.c1)))), CAST((((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((NULL, NULL, vt0.c0)) AND ((vt0.c2, vt0.c1, '-1278163370'))) AS BLOB) DESC;
SELECT DISTINCT * FROM vt0 WHERE (1472897589) ORDER BY ((((vt0.c1)AND(((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))))OR((((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) DESC  NULLS FIRST, ((vt0.c1 COLLATE BINARY)LIKE(((vt0.c0)==(vt0.c1)))), CAST((((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((NULL, NULL, vt0.c0)) AND ((vt0.c2, vt0.c1, '-1278163370'))) AS BLOB) DESC LIMIT 2;
SELECT ALL * FROM vt0 WHERE (0X57caa235) ORDER BY ((((vt0.c1)AND(((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))))OR((((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) DESC  NULLS FIRST, ((vt0.c1 COLLATE BINARY)LIKE(((vt0.c0)==(vt0.c1)))), CAST((((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((NULL, NULL, vt0.c0)) AND ((vt0.c2, vt0.c1, '-1278163370'))) AS BLOB) DESC;
SELECT DISTINCT * FROM vt0 WHERE (1472897589) ORDER BY ((((vt0.c1)AND(((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))))OR((((vt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c2))))) DESC  NULLS FIRST, ((vt0.c1 COLLATE BINARY)LIKE(((vt0.c0)==(vt0.c1)))), CAST((((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((NULL, NULL, vt0.c0)) AND ((vt0.c2, vt0.c1, '-1278163370'))) AS BLOB) DESC LIMIT 2;
SELECT COUNT(*) FROM vt0 WHERE (CASE WHEN ((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)) THEN vt0.c0 WHEN vt0.c0 COLLATE BINARY THEN HEX(vt0.c0) WHEN ((vt0.c1)IS NOT(vt0.c2)) THEN ((vt0.c0)>(vt0.c1)) ELSE (vt0.c0 IN ()) END) ORDER BY ((NULLIF(vt0.c0, vt0.c2))>=((vt0.c0 IN (vt0.c0, vt0.c1))))  NULLS LAST, (NOT (HEX(DISTINCT vt0.c0))) ASC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE WHEN ((((vt0.c2)AND(vt0.c1)))AND(vt0.c1)) THEN vt0.c0 WHEN vt0.c0 COLLATE BINARY THEN HEX(vt0.c0) WHEN ((vt0.c1)IS NOT(vt0.c2)) THEN ((vt0.c0)>(vt0.c1)) ELSE (vt0.c0 IN ()) END) ORDER BY ((NULLIF(vt0.c0, vt0.c2))>=((vt0.c0 IN (vt0.c0, vt0.c1))))  NULLS LAST, (NOT (HEX(DISTINCT vt0.c0))) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((vt0.c0) IS TRUE))LIKE(LIKE(vt0.c1, vt0.c0, '!')))) ORDER BY ((NULLIF(vt0.c0, vt0.c2))>=((vt0.c0 IN (vt0.c0, vt0.c1))))  NULLS LAST, (NOT (HEX(DISTINCT vt0.c0))) ASC;
SELECT ALL * FROM vt0 WHERE (((vt0.c1) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c2))) AND ((vt0.c2 IN ()))));
SELECT * FROM vt0 WHERE (((((vt0.c1) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c2))) AND ((vt0.c2 IN ()))))AND(CASE WHEN ((vt0.c0)<(vt0.c2)) THEN ((vt0.c0)<=(vt0.c1)) ELSE CAST(vt0.c1 AS TEXT) END))) INTERSECT SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c0 THEN ((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))AND(vt0.c0)) WHEN '&V' THEN vt0.c2 END);
SELECT ALL * FROM vt0 WHERE (((vt0.c1) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c2))) AND ((vt0.c2 IN ()))));
SELECT * FROM vt0 WHERE (((((vt0.c1) NOT BETWEEN (((vt0.c2) BETWEEN (vt0.c2) AND (vt0.c2))) AND ((vt0.c2 IN ()))))AND(CASE WHEN ((vt0.c0)<(vt0.c2)) THEN ((vt0.c0)<=(vt0.c1)) ELSE CAST(vt0.c1 AS TEXT) END))) INTERSECT SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c0 THEN ((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))AND(vt0.c0)) WHEN '&V' THEN vt0.c2 END);
SELECT COUNT(*) FROM vt0 WHERE (CASE WHEN ((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))OR(0.13133076409084565)) THEN ((vt0.c0)LIKE(vt0.c0)) WHEN (- (0.035990783775274426)) THEN CAST(vt0.c2 AS REAL) ELSE DATETIME(vt0.c0, x'', vt0.c2) END);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE WHEN ((((((vt0.c1)AND(vt0.c0)))OR(vt0.c1)))OR(0.13133076409084565)) THEN ((vt0.c0)LIKE(vt0.c0)) WHEN (- (0.035990783775274426)) THEN CAST(vt0.c2 AS REAL) ELSE DATETIME(vt0.c0, x'', vt0.c2) END) ORDER BY (- (((vt0.c2)==(vt0.c0)))) ASC, ((+ (vt0.c2)) IN (((vt0.c2) NOTNULL))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((((vt0.c2)AND(vt0.c2)))OR(vt0.c2)))OR(vt0.c2)))+(vt0.c1))) ORDER BY (- (((vt0.c2)==(vt0.c0)))) ASC, ((+ (vt0.c2)) IN (((vt0.c2) NOTNULL))) ASC  NULLS LAST LIMIT 0X0;
SELECT COUNT(*) FROM vt0 WHERE ((((((vt0.c0, -110904835)) NOT BETWEEN ((vt0.c2, 'xJa|C착oW')) AND ((vt0.c1, vt0.c0)))) NOTNULL)) ORDER BY ((((((vt0.c0) NOT NULL))AND(vt0.c1 COLLATE BINARY)))OR(((vt0.c1)IS(vt0.c0)))), vt0.c2 DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((((vt0.c0, -110904835)) NOT BETWEEN ((vt0.c2, 'xJa|C착oW')) AND ((vt0.c1, vt0.c0)))) NOTNULL))AND(((vt0.c0)*((vt0.c0 IN (vt0.c1, vt0.c2))))))) ORDER BY (((vt0.c2, vt0.c0, vt0.c1)) NOT BETWEEN ((x'dea6', CAST(vt0.c2 AS NUMERIC), (NOT (vt0.c1)))) AND ((vt0.c1 COLLATE NOCASE, (((vt0.c1, vt0.c1))!=((vt0.c2, '71103973'))), json_type(vt0.c0))))  NULLS FIRST, (~ ('529023781')) LIMIT 2;
SELECT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN (((NOT (vt0.c2)))) AND ((json(vt0.c1)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN (((NOT (vt0.c2)))) AND ((json(vt0.c1)))));
SELECT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN (((NOT (vt0.c2)))) AND ((json(vt0.c1)))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0)IS NOT(vt0.c2))) ISNULL)) ORDER BY (NOT (vt0.c2 COLLATE BINARY))  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((vt0.c0)IS NOT(vt0.c2))) ISNULL))AND((~ (((vt0.c1)>=(vt0.c2))))))) ORDER BY (NOT (vt0.c2 COLLATE BINARY))  NULLS LAST LIMIT 2 INTERSECT SELECT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0)|(vt0.c2))) BETWEEN ((('F17x')IS(vt0.c1))) AND (LOWER(vt0.c1)))) ORDER BY (NOT (vt0.c2 COLLATE BINARY))  NULLS LAST LIMIT 2;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (NULL) ORDER BY ((CAST(vt0.c1 AS REAL)) NOT BETWEEN (((((((vt0.c2)AND(vt0.c0)))AND(0.6158325736615435)))AND(vt0.c2))) AND ((- (vt0.c0))))  NULLS FIRST, ((((')') NOT NULL))>=((NOT (vt0.c0))));
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (NULL) ORDER BY ((CAST(vt0.c1 AS REAL)) NOT BETWEEN (((((((vt0.c2)AND(vt0.c0)))AND(0.6158325736615435)))AND(vt0.c2))) AND ((- (vt0.c0))))  NULLS FIRST, ((((')') NOT NULL))>=((NOT (vt0.c0)))) INTERSECT SELECT ALL MAX(vt0.c1) FROM vt0 WHERE ((vt0.c1 COLLATE RTRIM IN ((vt0.c0 IN (vt0.c2)), (vt0.c0 IN (vt0.c0))))) ORDER BY ((CAST(vt0.c1 AS REAL)) NOT BETWEEN (((((((vt0.c2)AND(vt0.c0)))AND(0.6158325736615435)))AND(vt0.c2))) AND ((- (vt0.c0))))  NULLS FIRST, ((((')') NOT NULL))>=((NOT (vt0.c0))));
SELECT * FROM vt0 WHERE ('ꁉYD') ORDER BY ((vt0.c0 IN ()) IN (vt0.c0 COLLATE BINARY, (('-52688390') IS TRUE))) DESC, vt0.c2;
SELECT DISTINCT * FROM vt0 WHERE ('ꁉYD') ORDER BY ((vt0.c0 IN ()) IN (vt0.c0 COLLATE BINARY, (('-52688390') IS TRUE))) DESC, vt0.c2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((0.21033411993038587 IN ())) ORDER BY ((vt0.c0 IN ()) IN (vt0.c0 COLLATE BINARY, (('-52688390') IS TRUE))) DESC, vt0.c2;
SELECT * FROM vt0 WHERE ('ꁉYD') ORDER BY ((vt0.c0 IN ()) IN (vt0.c0 COLLATE BINARY, (('-52688390') IS TRUE))) DESC, vt0.c2;
SELECT DISTINCT * FROM vt0 WHERE ('ꁉYD') ORDER BY ((vt0.c0 IN ()) IN (vt0.c0 COLLATE BINARY, (('-52688390') IS TRUE))) DESC, vt0.c2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((0.21033411993038587 IN ())) ORDER BY ((vt0.c0 IN ()) IN (vt0.c0 COLLATE BINARY, (('-52688390') IS TRUE))) DESC, vt0.c2;
SELECT MAX(vt0.c1) FROM vt0 WHERE (CAST((((vt0.c2, vt0.c0, vt0.c0, vt0.c2, NULL))<=((vt0.c1, vt0.c2, vt0.c2, vt0.c2, x''))) AS REAL)) ORDER BY ((((((vt0.c1)OR(vt0.c2)))AND('917511139')))IS(vt0.c1)), CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END COLLATE RTRIM DESC  NULLS LAST;
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (CAST((((vt0.c2, vt0.c0, vt0.c0, vt0.c2, NULL))=((vt0.c1, vt0.c2, vt0.c2, vt0.c2, x''))) AS REAL)) ORDER BY ((((((vt0.c1)OR(vt0.c2)))AND('917511139')))IS(vt0.c1)), CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END COLLATE RTRIM DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (CAST('-2083275000' AS NUMERIC)) ORDER BY ((((((vt0.c1)OR(vt0.c2)))AND('917511139')))IS(vt0.c1)), CASE WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 END COLLATE RTRIM DESC  NULLS LAST LIMIT 0x0;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((((NOT (vt0.c0)), ABS(vt0.c0)))<((-1.9675406E9, ((vt0.c0)%(vt0.c1)))))) ORDER BY NULL  NULLS FIRST;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (((((((NOT (vt0.c0)), ABS(vt0.c0)))<((-1.9675406E9, ((vt0.c0)%(vt0.c1))))))AND((((vt0.c1))>((vt0.c2))) COLLATE NOCASE COLLATE BINARY))) ORDER BY NULL  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((CASE NULL  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 END)!=(TYPEOF(vt0.c2))));
SELECT * FROM vt0 WHERE (((CASE NULL  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 END)<>(TYPEOF(vt0.c2)))) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((CASE NULL  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 END)!=(TYPEOF(vt0.c2))));
SELECT * FROM vt0 WHERE (((CASE NULL  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c0 END)<>(TYPEOF(vt0.c2)))) LIMIT 0x0;
SELECT * FROM vt0 WHERE ((((vt0.c1, vt0.c2, vt0.c2)) NOT BETWEEN ((((vt0.c0)>=(vt0.c0)), ((vt0.c2)AND(vt0.c0)), (- (vt0.c0)))) AND (((((vt0.c0, vt0.c2, vt0.c0, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, '-624484909', vt0.c2, vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1, 0.9001426024420578, vt0.c0, vt0.c0))), ((vt0.c0)IS(vt0.c1)), vt0.c0 COLLATE BINARY)))) ORDER BY CASE WHEN (((vt0.c0, vt0.c2, 0.6331349116421147))>=((vt0.c1, vt0.c2, vt0.c1))) THEN NULL WHEN ((vt0.c1) BETWEEN (NULL) AND (vt0.c1)) THEN (vt0.c0 IN (vt0.c1, vt0.c1)) END;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1, vt0.c2, vt0.c2)) NOT BETWEEN ((((vt0.c0)>=(vt0.c0)), ((vt0.c2)AND(vt0.c0)), (- (vt0.c0)))) AND (((((vt0.c0, vt0.c2, vt0.c0, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, '-624484909', vt0.c2, vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1, 0.9001426024420578, vt0.c0, vt0.c0))), ((vt0.c0)IS(vt0.c1)), vt0.c0 COLLATE BINARY)))) ORDER BY vt0.c2 DESC  NULLS LAST, vt0.c2 LIMIT 0;
SELECT * FROM vt0 WHERE ((((vt0.c1, vt0.c2, vt0.c2)) NOT BETWEEN ((((vt0.c0)>=(vt0.c0)), ((vt0.c2)AND(vt0.c0)), (- (vt0.c0)))) AND (((((vt0.c0, vt0.c2, vt0.c0, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, '-624484909', vt0.c2, vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1, 0.9001426024420578, vt0.c0, vt0.c0))), ((vt0.c0)IS(vt0.c1)), vt0.c0 COLLATE BINARY)))) ORDER BY CASE WHEN (((vt0.c0, vt0.c2, 0.6331349116421147))>=((vt0.c1, vt0.c2, vt0.c1))) THEN NULL WHEN ((vt0.c1) BETWEEN (NULL) AND (vt0.c1)) THEN (vt0.c0 IN (vt0.c1, vt0.c1)) END;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c1, vt0.c2, vt0.c2)) NOT BETWEEN ((((vt0.c0)>=(vt0.c0)), ((vt0.c2)AND(vt0.c0)), (- (vt0.c0)))) AND (((((vt0.c0, vt0.c2, vt0.c0, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, '-624484909', vt0.c2, vt0.c2, vt0.c2)) AND ((vt0.c1, vt0.c1, 0.9001426024420578, vt0.c0, vt0.c0))), ((vt0.c0)IS(vt0.c1)), vt0.c0 COLLATE BINARY)))) ORDER BY vt0.c2 DESC  NULLS LAST, vt0.c2 LIMIT 0;
SELECT ALL MIN(vt0.c1) FROM vt0 WHERE (LIKELIHOOD(((vt0.c1)%(vt0.c1)), ((vt0.c1) IS FALSE))) ORDER BY (((('-878902700')==(vt0.c2))) IS FALSE) ASC  NULLS LAST, CAST(vt0.c2 AS NUMERIC) COLLATE NOCASE DESC;
SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE (LIKELIHOOD(((vt0.c1)%(vt0.c1)), ((vt0.c1) IS FALSE))) ORDER BY (((('-878902700')==(vt0.c2))) IS FALSE) ASC  NULLS LAST, CAST(vt0.c2 AS NUMERIC) COLLATE NOCASE DESC INTERSECT SELECT DISTINCT MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c2 IN ())) NOTNULL)) ORDER BY (((('-878902700')==(vt0.c2))) IS FALSE) ASC  NULLS LAST, CAST(vt0.c2 AS NUMERIC) COLLATE NOCASE DESC;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((((vt0.c1)<<(vt0.c2)) IN ())) ORDER BY CAST((vt0.c1 IN ()) AS NUMERIC)  NULLS FIRST, NULL DESC  NULLS LAST, (~ (((vt0.c2)<(vt0.c2))))  NULLS LAST;
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE ((((vt0.c1)<<(vt0.c2)) IN ())) ORDER BY CAST((vt0.c1 IN ()) AS NUMERIC)  NULLS FIRST, NULL DESC  NULLS LAST, (~ (((vt0.c2)<(vt0.c2))))  NULLS LAST LIMIT 0x2;
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (((((vt0.c2) IS TRUE))<=((- (vt0.c1)))));
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((((vt0.c2) IS TRUE))<=((- (vt0.c1)))))AND('-1861244521' COLLATE NOCASE))) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (vt0.c0) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c0)))AND((((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c1, vt0.c0))))))OR(((vt0.c1)AND(vt0.c0)))))OR(vt0.c2 COLLATE BINARY)))OR((NOT (vt0.c2))))) ORDER BY (((vt0.c0 IN (vt0.c0, vt0.c2, vt0.c2))) IS FALSE)  NULLS LAST, CAST(CAST(vt0.c0 AS INTEGER) AS NUMERIC) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c0)))AND((((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c1, vt0.c0))))))OR(((vt0.c1)AND(vt0.c0)))))OR(vt0.c2 COLLATE BINARY)))OR((NOT (vt0.c2)))))AND(0.3386605867003496))) ORDER BY ((((((((((vt0.c0)IS(vt0.c1)))AND(x'30')))AND((((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0)) AND ((vt0.c2, vt0.c0, vt0.c2))))))OR(vt0.c0)))AND(CAST(vt0.c1 AS INTEGER))) DESC, CASE 0.7511012949347037  WHEN (vt0.c1 IN (vt0.c1)) THEN ((vt0.c2) IS TRUE) WHEN ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c1)) THEN CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END WHEN IFNULL(vt0.c2, vt0.c0) THEN ((vt0.c2)==(vt0.c0)) WHEN (((vt0.c2))>((vt0.c1))) THEN CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END WHEN (('0.36751075777811737')==(vt0.c0)) THEN ((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)) ELSE ((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))AND('n]{,gu	')) END DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((NOT (((vt0.c1)||(vt0.c0))))) ORDER BY ((((((((((vt0.c0)IS(vt0.c1)))AND(x'30')))AND((((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0)) AND ((vt0.c2, vt0.c0, vt0.c2))))))OR(vt0.c0)))AND(CAST(vt0.c1 AS INTEGER))) DESC, CASE 0.7511012949347037  WHEN (vt0.c1 IN (vt0.c1)) THEN ((vt0.c2) IS TRUE) WHEN ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c1)) THEN CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END WHEN IFNULL(vt0.c2, vt0.c0) THEN ((vt0.c2)=(vt0.c0)) WHEN (((vt0.c2))>((vt0.c1))) THEN CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END WHEN (('0.36751075777811737')=(vt0.c0)) THEN ((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)) ELSE ((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))AND('n]{,gu	')) END DESC;
SELECT ALL * FROM vt0 WHERE (((((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c0)))AND((((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c1, vt0.c0))))))OR(((vt0.c1)AND(vt0.c0)))))OR(vt0.c2 COLLATE BINARY)))OR((NOT (vt0.c2))))) ORDER BY (((vt0.c0 IN (vt0.c0, vt0.c2, vt0.c2))) IS FALSE)  NULLS LAST, CAST(CAST(vt0.c0 AS INTEGER) AS NUMERIC) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((((((((((((((vt0.c2)OR(vt0.c1)))OR(vt0.c0)))AND((((vt0.c1, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c1, vt0.c1, vt0.c0)) AND ((vt0.c1, vt0.c1, vt0.c0))))))OR(((vt0.c1)AND(vt0.c0)))))OR(vt0.c2 COLLATE BINARY)))OR((NOT (vt0.c2)))))AND(0.3386605867003496))) ORDER BY ((((((((((vt0.c0)IS(vt0.c1)))AND(x'30')))AND((((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0)) AND ((vt0.c2, vt0.c0, vt0.c2))))))OR(vt0.c0)))AND(CAST(vt0.c1 AS INTEGER))) DESC, CASE 0.7511012949347037  WHEN (vt0.c1 IN (vt0.c1)) THEN ((vt0.c2) IS TRUE) WHEN ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c1)) THEN CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END WHEN IFNULL(vt0.c2, vt0.c0) THEN ((vt0.c2)==(vt0.c0)) WHEN (((vt0.c2))>((vt0.c1))) THEN CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END WHEN (('0.36751075777811737')==(vt0.c0)) THEN ((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)) ELSE ((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))AND('n]{,gu	')) END DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((NOT (((vt0.c1)||(vt0.c0))))) ORDER BY ((((((((((vt0.c0)IS(vt0.c1)))AND(x'30')))AND((((vt0.c2, vt0.c2, vt0.c1)) BETWEEN ((vt0.c1, vt0.c2, vt0.c0)) AND ((vt0.c2, vt0.c0, vt0.c2))))))OR(vt0.c0)))AND(CAST(vt0.c1 AS INTEGER))) DESC, CASE 0.7511012949347037  WHEN (vt0.c1 IN (vt0.c1)) THEN ((vt0.c2) IS TRUE) WHEN ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c1)) THEN CASE vt0.c2  WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c0 END WHEN IFNULL(vt0.c2, vt0.c0) THEN ((vt0.c2)=(vt0.c0)) WHEN (((vt0.c2))>((vt0.c1))) THEN CASE vt0.c1  WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c2 END WHEN (('0.36751075777811737')=(vt0.c0)) THEN ((((vt0.c1)OR(vt0.c2)))OR(vt0.c1)) ELSE ((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))AND('n]{,gu	')) END DESC;
SELECT MIN(vt0.c1) FROM vt0 WHERE (((json(vt0.c0)) BETWEEN (CAST(vt0.c1 AS NUMERIC)) AND (((vt0.c2)>(vt0.c0))))) ORDER BY x'';
SELECT MIN(vt0.c1) FROM vt0 WHERE (((((json(vt0.c0)) BETWEEN (CAST(vt0.c1 AS NUMERIC)) AND (((vt0.c2)>(vt0.c0)))))AND((((vt0.c0, x'41', vt0.c2)) BETWEEN ((((vt0.c1) NOT NULL), CASE vt0.c1  WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 WHEN vt0.c0 THEN vt0.c1 END, (~ (vt0.c2)))) AND (('2078226788', (vt0.c1 IN ()), ('-1485171834' IN (vt0.c1)))))))) ORDER BY x'' INTERSECT SELECT ALL MIN(vt0.c1) FROM vt0 WHERE ((((vt0.c1)=(vt0.c1)) IN (vt0.c1 COLLATE NOCASE))) ORDER BY x'';
SELECT ALL MAX(vt0.c1) FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (vt0.c0) INTERSECT SELECT DISTINCT MAX(vt0.c1) FROM vt0 WHERE (((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c2)))AND(vt0.c2))) NOT BETWEEN (vt0.c2 COLLATE BINARY) AND ((- (vt0.c2)))));
SELECT * FROM vt0 WHERE (((vt0.c0) NOT BETWEEN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.6624198747339932))) AND ((NOT (NULL))))) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS BLOB)  NULLS FIRST, ((vt0.c2) NOT NULL) COLLATE BINARY ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0) NOT BETWEEN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.6624198747339932))) AND ((NOT (NULL))))) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS BLOB)  NULLS FIRST, ((vt0.c2) NOT NULL) COLLATE BINARY ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(CAST(vt0.c0 AS BLOB) AS INTEGER)) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS BLOB)  NULLS FIRST, ((vt0.c2) NOT NULL) COLLATE BINARY ASC  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 WHERE (((vt0.c0) NOT BETWEEN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.6624198747339932))) AND ((NOT (NULL))))) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS BLOB)  NULLS FIRST, ((vt0.c2) NOT NULL) COLLATE BINARY ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0) NOT BETWEEN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.6624198747339932))) AND ((NOT (NULL))))) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS BLOB)  NULLS FIRST, ((vt0.c2) NOT NULL) COLLATE BINARY ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(CAST(vt0.c0 AS BLOB) AS INTEGER)) ORDER BY CAST(vt0.c2 COLLATE RTRIM AS BLOB)  NULLS FIRST, ((vt0.c2) NOT NULL) COLLATE BINARY ASC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0 WHERE (json_extract(((((vt0.c2)OR(vt0.c2)))AND(vt0.c1)), ((vt0.c0) NOT NULL), COALESCE(vt0.c2, vt0.c0, vt0.c2, vt0.c1), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END));
SELECT DISTINCT * FROM vt0 WHERE (json_extract(((((vt0.c2)OR(vt0.c2)))AND(vt0.c1)), ((vt0.c0) NOT NULL), COALESCE(vt0.c2, vt0.c0, vt0.c2, vt0.c1), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (json_extract(((((vt0.c2)OR(vt0.c2)))AND(vt0.c1)), ((vt0.c0) NOT NULL), COALESCE(vt0.c2, vt0.c0, vt0.c2, vt0.c1), CASE WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END));
SELECT COUNT(*) FROM vt0 WHERE (((((vt0.c0 COLLATE NOCASE)OR(((vt0.c0) NOTNULL))))AND(json_extract(vt0.c1, vt0.c2, vt0.c1, vt0.c1)))) ORDER BY (((NOT (vt0.c0)))OR((vt0.c1 IN (vt0.c1)))) ASC  NULLS LAST, ((vt0.c1) BETWEEN (((vt0.c0)<(NULL))) AND ('-1383487729'))  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE (((((vt0.c0 COLLATE NOCASE)OR(((vt0.c0) NOTNULL))))AND(json_extract(vt0.c1, vt0.c2, vt0.c1, vt0.c1)))) ORDER BY (((NOT (vt0.c0)))OR((vt0.c1 IN (vt0.c1)))) ASC  NULLS LAST, ((vt0.c1) BETWEEN (((vt0.c0)<(NULL))) AND ('-1383487729'))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((LOWER(vt0.c2))IS(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c0)))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((LOWER(vt0.c2))IS(((((((vt0.c2)AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c0))))) ORDER BY ((IFNULL(vt0.c0, vt0.c1))|((((vt0.c1, vt0.c2))=((vt0.c0, vt0.c1))))) DESC  NULLS LAST, ((((- (vt0.c2))))==((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN 0.27923574839926213 ELSE vt0.c2 END))), CAST(vt0.c1 AS INTEGER) COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((vt0.c0 IN (vt0.c2))) IS TRUE)) ORDER BY ((IFNULL(vt0.c0, vt0.c1))|((((vt0.c1, vt0.c2))==((vt0.c0, vt0.c1))))) DESC  NULLS LAST, ((((- (vt0.c2))))==((CASE vt0.c0  WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN 0.27923574839926213 ELSE vt0.c2 END))), CAST(vt0.c1 AS INTEGER) COLLATE BINARY ASC  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE ((- ((vt0.c0 IN (vt0.c1)))));
SELECT COUNT(*) FROM vt0 WHERE ((((- ((vt0.c0 IN (vt0.c1)))))AND(((((((((((vt0.c2) NOTNULL))AND((NOT (vt0.c0)))))OR(vt0.c1 COLLATE RTRIM)))AND(CASE WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c2 END)))AND(((vt0.c0)<>(vt0.c2)))))));
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE (((((((((vt0.c0)-(vt0.c0)))OR(SQLITE_COMPILEOPTION_GET(vt0.c2))))OR(load_extension(vt0.c2, vt0.c1))))OR(((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))));
SELECT DISTINCT MAX(vt0.c2) FROM vt0 WHERE (((((((((((vt0.c0)-(vt0.c0)))OR(SQLITE_COMPILEOPTION_GET(vt0.c2))))OR(load_extension(vt0.c2, vt0.c1))))OR(((((vt0.c2)OR(vt0.c0)))OR(vt0.c2)))))AND(((0.37840507822849834 COLLATE NOCASE) IS TRUE)))) LIMIT 4;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (LTRIM('P)', vt0.c2 COLLATE RTRIM)) ORDER BY ((((vt0.c0) ISNULL))OR(((vt0.c2)OR(vt0.c0)))) ASC, CAST((((vt0.c1, vt0.c2))>((vt0.c2, vt0.c2))) AS INTEGER) DESC  NULLS FIRST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((LTRIM('P)', vt0.c2 COLLATE RTRIM))AND(CASE WHEN CASE WHEN vt0.c1 THEN vt0.c2 WHEN vt0.c2 THEN vt0.c1 END THEN (vt0.c0 IN (vt0.c1, vt0.c1)) WHEN (vt0.c2 IN (vt0.c2)) THEN ((vt0.c2)-(vt0.c0)) ELSE ((((((NULL)AND(vt0.c2)))OR(NULL)))AND(vt0.c2)) END))) ORDER BY ((((vt0.c0) ISNULL))OR(((vt0.c2)OR(vt0.c0)))) ASC, CAST((((vt0.c1, vt0.c2))>((vt0.c2, vt0.c2))) AS INTEGER) DESC  NULLS FIRST INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (PRINTF((((vt0.c0))<=((vt0.c2))), ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c2)))) ORDER BY ((((vt0.c0) ISNULL))OR(((vt0.c2)OR(vt0.c0)))) ASC, CAST((((vt0.c1, vt0.c2))>((vt0.c2, vt0.c2))) AS INTEGER) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE ((+ (((NULL) ISNULL)))) ORDER BY ((((+ (0xffffffff8251e4bb))))!=((CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 END)))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((+ (((NULL) ISNULL)))) ORDER BY ((((((((HEX(vt0.c1))OR(CAST(vt0.c0 AS NUMERIC))))AND((NOT (vt0.c2)))))OR((~ (vt0.c0)))))AND((NOT (vt0.c1))))  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((((((((((vt0.c2)AND(vt0.c0)))OR('[0>m뜈jO,')))AND(vt0.c1)))OR(vt0.c0)))AND(vt0.c1)), (((vt0.c1, vt0.c2))<>((vt0.c0, vt0.c2))), x'd6', (+ (vt0.c1))))<=((((((vt0.c2)OR(vt0.c1)))OR(0.4249328138784435)), '&#U|蚼D', ((((vt0.c1)AND(vt0.c1)))OR(vt0.c2)), ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)))))) ORDER BY (vt0.c0 IN ()), x'ac207e' ASC  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((((((((((vt0.c2)AND(vt0.c0)))OR('[0>m뜈jO,')))AND(vt0.c1)))OR(vt0.c0)))AND(vt0.c1)), (((vt0.c1, vt0.c2))>((vt0.c0, vt0.c2))), x'd6', (+ (vt0.c1))))<((((((vt0.c2)OR(vt0.c1)))OR(0.4249328138784435)), '&#U|蚼D', ((((vt0.c1)AND(vt0.c1)))OR(vt0.c2)), ((vt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)))))) ORDER BY (vt0.c0 IN ()), x'ac207e' ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c0, vt0.c0, vt0.c2, vt0.c2)) BETWEEN ((vt0.c2, vt0.c0, vt0.c2, vt0.c1)) AND ((vt0.c1, vt0.c2, vt0.c2, vt0.c1)))) NOTNULL)) ORDER BY (vt0.c0 IN ()), x'ac207e' ASC  NULLS FIRST LIMIT 0;
SELECT ALL MAX(vt0.c2) FROM vt0 WHERE ((((1.43158882E8, ((vt0.c2)GLOB(vt0.c1))))=((((((0.08158424304064293)AND(vt0.c1)))OR(vt0.c2)), vt0.c2)))) ORDER BY (((NULLIF(vt0.c2, vt0.c0), CAST(vt0.c0 AS BLOB), ((vt0.c2)GLOB(vt0.c1))))<=((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)), (vt0.c0 IN ()), vt0.c2 COLLATE RTRIM))) DESC;
SELECT MAX(vt0.c2) FROM vt0 WHERE ((((((1.43158882E8, ((vt0.c2)GLOB(vt0.c1))))=((((((0.08158424304064293)AND(vt0.c1)))OR(vt0.c2)), vt0.c2))))AND(((((vt0.c2) BETWEEN (0xfffffffff74ad346) AND (x''))) BETWEEN (NULLIF(vt0.c1, vt0.c2)) AND ((vt0.c0 IN ())))))) ORDER BY (((NULLIF(vt0.c2, vt0.c0), CAST(vt0.c0 AS BLOB), ((vt0.c2)GLOB(vt0.c1))))<=((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)), (vt0.c0 IN ()), vt0.c2 COLLATE RTRIM))) DESC INTERSECT SELECT MAX(vt0.c2) FROM vt0 WHERE (UNLIKELY(vt0.c0)) ORDER BY (((NULLIF(vt0.c2, vt0.c0), CAST(vt0.c0 AS BLOB), ((vt0.c2)GLOB(vt0.c1))))<=((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)), (vt0.c0 IN ()), vt0.c2 COLLATE RTRIM))) DESC;
SELECT ALL * FROM vt0 WHERE (0.48650245178842355) ORDER BY ((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c1)))>=(TYPEOF(vt0.c1))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((0.48650245178842355)AND(0X7baae738))) ORDER BY ((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c1)))>=(TYPEOF(vt0.c1))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) AS BLOB)) ORDER BY ((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c1)))>=(TYPEOF(vt0.c1))) DESC;
SELECT ALL * FROM vt0 WHERE (0.48650245178842355) ORDER BY ((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c1)))>=(TYPEOF(vt0.c1))) DESC;
SELECT DISTINCT * FROM vt0 WHERE (((0.48650245178842355)AND(0X7baae738))) ORDER BY ((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c1)))>=(TYPEOF(vt0.c1))) DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c2)) AS BLOB)) ORDER BY ((((((((vt0.c0)AND(vt0.c1)))AND(vt0.c2)))AND(vt0.c1)))>=(TYPEOF(vt0.c1))) DESC;
SELECT ALL * FROM vt0 WHERE (CASE ((vt0.c0)IS(vt0.c1))  WHEN ((vt0.c2)<=(vt0.c1)) THEN (~ (vt0.c1)) WHEN x'' THEN vt0.c1 COLLATE RTRIM WHEN vt0.c2 COLLATE NOCASE THEN ((vt0.c0) NOT NULL) WHEN ((vt0.c1)AND(vt0.c1)) THEN vt0.c2 COLLATE RTRIM WHEN HEX(vt0.c0) THEN '2074797880' ELSE CAST(vt0.c0 AS BLOB) END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE ((vt0.c0)IS(vt0.c1))  WHEN ((vt0.c2)<(vt0.c1)) THEN (~ (vt0.c1)) WHEN x'' THEN vt0.c1 COLLATE RTRIM WHEN vt0.c2 COLLATE NOCASE THEN ((vt0.c0) NOT NULL) WHEN ((vt0.c1)AND(vt0.c1)) THEN vt0.c2 COLLATE RTRIM WHEN HEX(vt0.c0) THEN '2074797880' ELSE CAST(vt0.c0 AS BLOB) END)AND(((((vt0.c0)*(vt0.c1))) IS FALSE))));
SELECT ALL * FROM vt0 WHERE (CASE ((vt0.c0)IS(vt0.c1))  WHEN ((vt0.c2)<=(vt0.c1)) THEN (~ (vt0.c1)) WHEN x'' THEN vt0.c1 COLLATE RTRIM WHEN vt0.c2 COLLATE NOCASE THEN ((vt0.c0) NOT NULL) WHEN ((vt0.c1)AND(vt0.c1)) THEN vt0.c2 COLLATE RTRIM WHEN HEX(vt0.c0) THEN '2074797880' ELSE CAST(vt0.c0 AS BLOB) END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE ((vt0.c0)IS(vt0.c1))  WHEN ((vt0.c2)<(vt0.c1)) THEN (~ (vt0.c1)) WHEN x'' THEN vt0.c1 COLLATE RTRIM WHEN vt0.c2 COLLATE NOCASE THEN ((vt0.c0) NOT NULL) WHEN ((vt0.c1)AND(vt0.c1)) THEN vt0.c2 COLLATE RTRIM WHEN HEX(vt0.c0) THEN '2074797880' ELSE CAST(vt0.c0 AS BLOB) END)AND(((((vt0.c0)*(vt0.c1))) IS FALSE))));

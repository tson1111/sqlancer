-- Time: 2021/05/19 01:09:37
-- Database: database19
-- Database version: 3.34.0
-- seed value: 1621357771663
PRAGMA cache_size = 50000; -- 0ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
PRAGMA encoding = 'UTF-16'; -- 0ms;
CREATE VIRTUAL TABLE rt0 USING rtree_i32(c0, c1, c2, +c3 REAL ); -- 1ms;
CREATE VIRTUAL TABLE vt1 USING fts5(c0); -- 1ms;
INSERT OR REPLACE INTO rt0(c0) VALUES ('-1532470271'); -- 1ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 1ms;
INSERT OR ROLLBACK INTO vt1(c0) VALUES (0Xffffffffbf1e9a52); -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 1ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE OR IGNORE rt0 SET c0 = '', c0 = 1 WHERE -2041558609; -- 0ms;
END TRANSACTION; -- 0ms;
ANALYZE rt0; -- 0ms;
VACUUM; -- 2ms;
PRAGMA temp.secure_delete = false; -- 0ms;
INSERT OR FAIL INTO vt1 VALUES (x''); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
REINDEX; -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '16709'); -- 1ms;
REINDEX; -- 1ms;
UPDATE OR IGNORE vt1 SET c0 = -2115833049, c0 = 0.7654783778594165; -- 1ms;
INSERT INTO vt1(vt1) VALUES('merge=-2115833049,12');
; -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 1ms;
INSERT OR IGNORE INTO rt0(c1, c3, c0) VALUES (NULL, NULL, 0.6251736134456705); -- 1ms;
UPDATE OR IGNORE vt1 SET (c0, c0, c0)=('!', NULL, '-58887415'); -- 1ms;
INSERT OR REPLACE INTO rt0(c3) VALUES (NULL), (-2004012966), (NULL); -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES ('-2041558609'), (0X1b2a4980), (NULL); -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
REINDEX; -- 1ms;
REINDEX RTRIM; -- 0ms;
PRAGMA cell_size_check; -- 0ms;
PRAGMA temp.reverse_unordered_selects = false; -- 0ms;
INSERT OR FAIL INTO rt0(c2, c0, c3) VALUES ('-2004012966', NULL, 4.5575616E8), (1466001721, x'', x''), ('1466001721', x'10', NULL), (x'37', NULL, '886179703'); -- 0ms;
INSERT OR ABORT INTO vt1 VALUES (0.6890160182444096); -- 1ms;
UPDATE OR IGNORE vt1 SET (c0)=(NULL); -- 1ms;
ANALYZE; -- 1ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 1ms;
INSERT OR ROLLBACK INTO rt0(c2, c0, c3) VALUES ('**xk?', NULL, 0.21452648222791482), ('1422900229', '-1532470271', 0.04157587481795155), (0.6251736134456705, NULL, NULL); -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (0.46812638111186833), (NULL); -- 1ms;
INSERT OR IGNORE INTO rt0(c3, c2, c1, c0) VALUES (x'626d', 4.5575616E8, x'', NULL), (NULL, 0.21452648222791482, x'46', 0x18e9775e), ('', '1', '0.0', '-1532470271'); -- 0ms;
INSERT OR REPLACE INTO rt0(c0) VALUES ('-1088513454'); -- 0ms;
INSERT OR IGNORE INTO rt0 VALUES ('417953630', '2042696920', '-1834146775', '**xk?'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
ANALYZE vt1; -- 1ms;
INSERT OR ROLLBACK INTO vt1(c0) VALUES (0.7153513000693227), (NULL); -- 0ms;
END; -- 1ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE vt1 SET c0 = 0.24376662247593572; -- 1ms;
INSERT OR IGNORE INTO rt0(c3, c1, c0) VALUES (-1.532470271E9, '-2004012966', x''), (NULL, NULL, 0.04157587481795155); -- 0ms;
PRAGMA main.short_column_names; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
REINDEX; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR FAIL rt0 SET (c3, c2, c0)=(NULL, 0.24376662247593572, -2051742299); -- 1ms;
UPDATE vt1 SET c0 = NULL, c0 = '1299452316', c0 = '-1862126037' WHERE vt1.c0 COLLATE BINARY; -- 1ms;
END TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt1 SET c0 = NULL, c0 = x'cad29070'; -- 0ms;
UPDATE vt1 SET c0 = '-1088513454', c0 = x'7a'; -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 2); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (''); -- 0ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 0ms;
PRAGMA temp.default_cache_size; -- 0ms;
UPDATE vt1 SET c0 = NULL, c0 = NULL WHERE ((((((((((((((vt1.c0) IS TRUE))OR(vt1.c0)))OR(((vt1.c0)LIKE(vt1.c0)))))AND(vt1.c0 COLLATE BINARY)))AND(vt1.c0)))OR(LOWER(vt1.c0))))OR(NULL)); -- 0ms;
PRAGMA temp.secure_delete; -- 0ms;
PRAGMA main.short_column_names; -- 0ms;
INSERT OR IGNORE INTO vt1 VALUES (0.540962669160635); -- 1ms;
ANALYZE rt0; -- 0ms;
INSERT OR ABORT INTO rt0(c3) VALUES (x'2a0cc3'), ('**xk?'), (-2095099121), (8.86179703E8); -- 1ms;
UPDATE OR REPLACE vt1 SET c0 = NULL, c0 = -2.041558609E9; -- 1ms;
INSERT OR REPLACE INTO vt1 VALUES (0.07620996165240967); -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 1); -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1) VALUES('automerge=7'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 2); -- 1ms;
INSERT OR IGNORE INTO vt1 VALUES ('-647783693'), (0.1286444337000554), ('1422900229'); -- 0ms;
INSERT OR IGNORE INTO rt0(c3, c1) VALUES (NULL, 0.3131613657923358), (0.09514720601543125, ''); -- 0ms;
ROLLBACK TRANSACTION; -- 1ms;
REINDEX; -- 0ms;
ANALYZE; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR ABORT INTO rt0(c0) VALUES (0Xffffffff9a585a29), ('-2004012966'), ('S'), (0.7358545891830578), (NULL); -- 1ms;
INSERT OR ABORT INTO rt0(c0, c1, c2) VALUES ('', x'65', x'f8d8'), ('206543958', ((((CAST(NULL AS REAL))AND(ABS(DISTINCT 0X2cc8dded))))AND((('-2095099121') ISNULL))), x''); -- 0ms;
INSERT OR IGNORE INTO rt0(c2, c0) VALUES (0.5551252374330624, 4.1795363E8), (x'', x'52'); -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
UPDATE OR IGNORE rt0 SET (c3)=('-732813397'); -- 0ms;
PRAGMA auto_vacuum; -- 0ms;
INSERT OR ABORT INTO vt1(c0) VALUES (0.23994291176300608), (0.7358545891830578); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 6); -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (NULL), (4.5575616E8); -- 1ms;
INSERT INTO vt1(vt1) VALUES('merge=1508769651,3');
; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
COMMIT TRANSACTION; -- 0ms;
ANALYZE sqlite_master; -- 0ms;
ANALYZE sqlite_master; -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 1ms;
INSERT OR FAIL INTO rt0(c0, c3, c1) VALUES (NULL, '-548393973', 'yG芓Gn'), (x'', 0Xffffffff93f3c9f6, 0.7267813554985081); -- 0ms;
INSERT OR ROLLBACK INTO rt0(c0, c1, c2, c3) VALUES (0.964813790745092, 0.36377367176431163, NULL, NULL); -- 0ms;
INSERT OR IGNORE INTO rt0 VALUES (0.6411476110727201, 0.315848055336596, x'647a81', 0.6890160182444096), (0Xfffffffff9f0a8f5, x'e5', 'Z{)XnzpH{', '1466001721'), (NULL, NULL, 0.21452648222791482, x'6b'); -- 0ms;
VACUUM temp; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
UPDATE OR IGNORE rt0 SET (c3)=(NULL); -- 1ms;
PRAGMA recursive_triggers; -- 0ms;
COMMIT; -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('merge=-722615761,12');
; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
PRAGMA temp.checkpoint_fullfsync = true; -- 0ms;
ANALYZE; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
COMMIT TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '47505'); -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
COMMIT; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT ALL * FROM vt1 WHERE (((((((((((vt1.c0)/(vt1.c0)))OR(vt1.c0)))AND(CAST('-2051742299' AS REAL))))AND(((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))))OR(CAST(vt1.c0 AS NUMERIC))));
SELECT ALL * FROM vt1 WHERE (((((((((((((vt1.c0)/(vt1.c0)))OR(vt1.c0)))AND(CAST('-2051742299' AS REAL))))AND(((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))))OR(CAST(vt1.c0 AS NUMERIC))))AND(json_valid(CASE vt1.c0  WHEN vt1.c0 THEN x'12ee6f90' WHEN vt1.c0 THEN vt1.c0 END)))) LIMIT 0X1 INTERSECT SELECT ALL * FROM vt1 WHERE (((x'')&(vt1.c0 COLLATE NOCASE))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (((((((((((vt1.c0)/(vt1.c0)))OR(vt1.c0)))AND(CAST('-2051742299' AS REAL))))AND(((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))))OR(CAST(vt1.c0 AS NUMERIC))));
SELECT ALL * FROM vt1 WHERE (((((((((((((vt1.c0)/(vt1.c0)))OR(vt1.c0)))AND(CAST('-2051742299' AS REAL))))AND(((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))))OR(CAST(vt1.c0 AS NUMERIC))))AND(json_valid(CASE vt1.c0  WHEN vt1.c0 THEN x'12ee6f90' WHEN vt1.c0 THEN vt1.c0 END)))) LIMIT 0X1 INTERSECT SELECT ALL * FROM vt1 WHERE (((x'')&(vt1.c0 COLLATE NOCASE))) LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (CAST((rt0.c3 IN (rt0.c3)) AS NUMERIC));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST((rt0.c3 IN (rt0.c3)) AS NUMERIC))AND((((-5.48393973E8, vt1.c0, NULL, rt0.c3)) NOT BETWEEN (((rt0.c0 IN (rt0.c3)), (NOT (rt0.c0)), ((rt0.c0) IS FALSE), (~ (rt0.c3)))) AND ((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 END, json_type(rt0.c2), LTRIM(vt1.c0), rt0.c0 COLLATE BINARY)))))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((((((vt1.c0)AND(-2115833049)))AND(NULL)))AND(0xffffffffdf502c0b)) WHEN ((rt0.c3)OR(rt0.c0)) THEN (((rt0.c0))<>((rt0.c2))) WHEN vt1.c0 THEN rt0.c0 WHEN (rt0.c3 IN ()) THEN (NOT (rt0.c0)) ELSE 0.3225145650989357 COLLATE BINARY END);
SELECT ALL * FROM vt1, rt0 WHERE (CAST((rt0.c3 IN (rt0.c3)) AS NUMERIC));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST((rt0.c3 IN (rt0.c3)) AS NUMERIC))AND((((-5.48393973E8, vt1.c0, NULL, rt0.c3)) NOT BETWEEN (((rt0.c0 IN (rt0.c3)), (NOT (rt0.c0)), ((rt0.c0) IS FALSE), (~ (rt0.c3)))) AND ((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 END, json_type(rt0.c2), LTRIM(vt1.c0), rt0.c0 COLLATE BINARY)))))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((((((vt1.c0)AND(-2115833049)))AND(NULL)))AND(0xffffffffdf502c0b)) WHEN ((rt0.c3)OR(rt0.c0)) THEN (((rt0.c0))<>((rt0.c2))) WHEN vt1.c0 THEN rt0.c0 WHEN (rt0.c3 IN ()) THEN (NOT (rt0.c0)) ELSE 0.3225145650989357 COLLATE BINARY END);
SELECT ALL MAX(vt1.c0) FROM rt0 CROSS JOIN vt1 ON (((ROUND(rt0.c0, rt0.c2), ((vt1.c0)>>(vt1.c0)), ((rt0.c1)||(rt0.c0))))<((((((((((rt0.c3)AND('I')))OR(x'')))OR(rt0.c3)))AND(rt0.c1)), CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c0 END, (+ (rt0.c1))))) WHERE ((UPPER(DISTINCT rt0.c0) IN ()));
SELECT MAX(vt1.c0) FROM rt0 CROSS JOIN vt1 ON (((ROUND(rt0.c0, rt0.c2), ((vt1.c0)>>(vt1.c0)), ((rt0.c1)||(rt0.c0))))<((((((((((rt0.c3)AND('I')))OR(x'')))OR(rt0.c3)))AND(rt0.c1)), CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c0 END, (+ (rt0.c1))))) WHERE ((UPPER(DISTINCT rt0.c0) IN ())) INTERSECT SELECT ALL MAX(vt1.c0) FROM rt0 CROSS JOIN vt1 ON (((ROUND(rt0.c0, rt0.c2), ((vt1.c0)>>(vt1.c0)), ((rt0.c1)||(rt0.c0))))<((((((((((rt0.c3)AND('I')))OR(x'')))OR(rt0.c3)))AND(rt0.c1)), CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c0 END, (+ (rt0.c1))))) WHERE (((LOWER(vt1.c0)) BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c0))) AND (x'c919')));
SELECT ALL * FROM rt0 WHERE (((((CASE WHEN '466069271' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END)AND(((((rt0.c2)AND(rt0.c2)))AND(rt0.c1)))))OR(((rt0.c1) ISNULL)))) ORDER BY CASE ((((rt0.c2)AND(rt0.c3)))OR(rt0.c3))  WHEN ((NULL) NOT NULL) THEN CASE WHEN 'ﰎ' THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 END WHEN rt0.c2 THEN (((rt0.c2, rt0.c1))<=((rt0.c1, rt0.c3))) ELSE (((rt0.c1, rt0.c2, rt0.c2))<((rt0.c3, rt0.c1, rt0.c1))) END DESC, (- (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3))));
SELECT DISTINCT * FROM rt0 WHERE (((((((CASE WHEN '466069271' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END)AND(((((rt0.c2)AND(rt0.c2)))AND(rt0.c1)))))OR(((rt0.c1) ISNULL))))AND(x'd56009'))) ORDER BY CASE ((((rt0.c2)AND(rt0.c3)))OR(rt0.c3))  WHEN ((NULL) NOT NULL) THEN CASE WHEN 'ﰎ' THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 END WHEN rt0.c2 THEN (((rt0.c2, rt0.c1))<=((rt0.c1, rt0.c3))) ELSE (((rt0.c1, rt0.c2, rt0.c2))<((rt0.c3, rt0.c1, rt0.c1))) END DESC, (- (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((rt0.c0)<<(rt0.c3)) COLLATE NOCASE) ORDER BY CASE ((((rt0.c2)AND(rt0.c3)))OR(rt0.c3))  WHEN ((NULL) NOT NULL) THEN CASE WHEN 'ﰎ' THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 END WHEN rt0.c2 THEN (((rt0.c2, rt0.c1))<=((rt0.c1, rt0.c3))) ELSE (((rt0.c1, rt0.c2, rt0.c2))<((rt0.c3, rt0.c1, rt0.c1))) END DESC, (- (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((((CASE WHEN '466069271' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END)AND(((((rt0.c2)AND(rt0.c2)))AND(rt0.c1)))))OR(((rt0.c1) ISNULL)))) ORDER BY CASE ((((rt0.c2)AND(rt0.c3)))OR(rt0.c3))  WHEN ((NULL) NOT NULL) THEN CASE WHEN 'ﰎ' THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 END WHEN rt0.c2 THEN (((rt0.c2, rt0.c1))<=((rt0.c1, rt0.c3))) ELSE (((rt0.c1, rt0.c2, rt0.c2))<((rt0.c3, rt0.c1, rt0.c1))) END DESC, (- (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3))));
SELECT DISTINCT * FROM rt0 WHERE (((((((CASE WHEN '466069271' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END)AND(((((rt0.c2)AND(rt0.c2)))AND(rt0.c1)))))OR(((rt0.c1) ISNULL))))AND(x'd56009'))) ORDER BY CASE ((((rt0.c2)AND(rt0.c3)))OR(rt0.c3))  WHEN ((NULL) NOT NULL) THEN CASE WHEN 'ﰎ' THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 END WHEN rt0.c2 THEN (((rt0.c2, rt0.c1))<=((rt0.c1, rt0.c3))) ELSE (((rt0.c1, rt0.c2, rt0.c2))<((rt0.c3, rt0.c1, rt0.c1))) END DESC, (- (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((rt0.c0)<<(rt0.c3)) COLLATE NOCASE) ORDER BY CASE ((((rt0.c2)AND(rt0.c3)))OR(rt0.c3))  WHEN ((NULL) NOT NULL) THEN CASE WHEN 'ﰎ' THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 END WHEN rt0.c2 THEN (((rt0.c2, rt0.c1))<=((rt0.c1, rt0.c3))) ELSE (((rt0.c1, rt0.c2, rt0.c2))<((rt0.c3, rt0.c1, rt0.c1))) END DESC, (- (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)))) LIMIT 0;
SELECT ALL * FROM vt1 WHERE ((+ (((x'c7')<(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((+ (((x'c7')<(vt1.c0)))))AND(CASE WHEN MIN(vt1.c0, '-1955672256', vt1.c0, vt1.c0, vt1.c0) THEN CAST(vt1.c0 AS INTEGER) WHEN (NOT (vt1.c0)) THEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END END))) ORDER BY ((- (vt1.c0)) IN (vt1.c0)) DESC, ((TRIM(DISTINCT vt1.c0)) BETWEEN ((+ (vt1.c0))) AND (((vt1.c0)GLOB('LP')))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((0Xa0f2d7e)>>(vt1.c0))) NOT BETWEEN (((vt1.c0)>>(vt1.c0))) AND ((vt1.c0 IN ())))) ORDER BY ((- (vt1.c0)) IN (vt1.c0)) DESC, ((TRIM(DISTINCT vt1.c0)) BETWEEN ((+ (vt1.c0))) AND (((vt1.c0)GLOB('LP')))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((+ (((x'c7')<(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((+ (((x'c7')<(vt1.c0)))))AND(CASE WHEN MIN(vt1.c0, '-1955672256', vt1.c0, vt1.c0, vt1.c0) THEN CAST(vt1.c0 AS INTEGER) WHEN (NOT (vt1.c0)) THEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END END))) ORDER BY ((- (vt1.c0)) IN (vt1.c0)) DESC, ((TRIM(DISTINCT vt1.c0)) BETWEEN ((+ (vt1.c0))) AND (((vt1.c0)GLOB('LP')))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((0Xa0f2d7e)>>(vt1.c0))) NOT BETWEEN (((vt1.c0)>>(vt1.c0))) AND ((vt1.c0 IN ())))) ORDER BY ((- (vt1.c0)) IN (vt1.c0)) DESC, ((TRIM(DISTINCT vt1.c0)) BETWEEN ((+ (vt1.c0))) AND (((vt1.c0)GLOB('LP')))) DESC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ('i4]}픍');
SELECT * FROM vt1, rt0 WHERE ('i4]}픍') ORDER BY ((((rt0.c3)>>(rt0.c2)))-(rt0.c2)) ASC  NULLS FIRST INTERSECT SELECT * FROM vt1, rt0 NOT INDEXED WHERE (((CAST(rt0.c3 AS REAL))+(((vt1.c0)OR(rt0.c0))))) ORDER BY ((((rt0.c3)>>(rt0.c2)))-(rt0.c2)) ASC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ('i4]}픍');
SELECT * FROM vt1, rt0 WHERE ('i4]}픍') ORDER BY ((((rt0.c3)>>(rt0.c2)))-(rt0.c2)) ASC  NULLS FIRST INTERSECT SELECT * FROM vt1, rt0 NOT INDEXED WHERE (((CAST(rt0.c3 AS REAL))+(((vt1.c0)OR(rt0.c0))))) ORDER BY ((((rt0.c3)>>(rt0.c2)))-(rt0.c2)) ASC  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE ((- (HEX(rt0.c3)))) ORDER BY (NOT (UNLIKELY(vt1.c0)))  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE ((- (HEX(rt0.c3)))) ORDER BY (NOT (UNLIKELY(vt1.c0)))  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE ((((vt1.c0, NULL)) NOT BETWEEN ((('-1870541080' IN ()), ((rt0.c2) BETWEEN (vt1.c0) AND (vt1.c0)))) AND (('u', rt0.c0)))) ORDER BY (NOT (UNLIKELY(vt1.c0)))  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (((rt0.c0)AND((((rt0.c3 IN ()))<((rt0.c1 IN (rt0.c0))))))) ORDER BY ((CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c2 END) IS TRUE) ASC LIMIT 0;
SELECT ALL * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (((rt0.c0)AND((((rt0.c3 IN ()))<((rt0.c1 IN (rt0.c0))))))) ORDER BY ((CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c2 END) IS TRUE) ASC LIMIT 0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) IS FALSE));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0))) IS FALSE))AND(CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0.6552312870348684 ELSE 'J.F' END THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)%(vt1.c0)) WHEN ((vt1.c0)==(vt1.c0)) THEN vt1.c0 ELSE (vt1.c0 IN (vt1.c0, vt1.c0)) END))) ORDER BY ((((vt1.c0 COLLATE RTRIM)AND(vt1.c0)))OR(vt1.c0 COLLATE NOCASE)) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) IS FALSE));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0))) IS FALSE))AND(CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0.6552312870348684 ELSE 'J.F' END THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)%(vt1.c0)) WHEN ((vt1.c0)==(vt1.c0)) THEN vt1.c0 ELSE (vt1.c0 IN (vt1.c0, vt1.c0)) END))) ORDER BY ((((vt1.c0 COLLATE RTRIM)AND(vt1.c0)))OR(vt1.c0 COLLATE NOCASE)) ASC  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((NOT (x'f9')) IN (vt1.c0 COLLATE NOCASE)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((NOT (x'f9')) IN (vt1.c0 COLLATE NOCASE)));
SELECT COUNT(*) FROM vt1, rt0 WHERE ((((vt1.c0 IN ()))>=((x'9d0c' IN (rt0.c0, rt0.c0))))) ORDER BY ((((rt0.c1)OR(rt0.c3)))<<(TRIM(rt0.c2)))  NULLS LAST, ((vt1.c0)LIKE(rt0.c3)) COLLATE NOCASE DESC  NULLS FIRST, (+ (((rt0.c2)LIKE(rt0.c1)))) DESC;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((((vt1.c0 IN ()))==((x'9d0c' IN (rt0.c0)))))AND(-7.32813397E8))) ORDER BY ((((rt0.c1)OR(rt0.c3)))<<(TRIM(rt0.c2)))  NULLS LAST, ((vt1.c0)LIKE(rt0.c3)) COLLATE NOCASE DESC  NULLS FIRST, (+ (((rt0.c2)LIKE(rt0.c1)))) DESC LIMIT 2 INTERSECT SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (CAST(((((rt0.c0)AND(rt0.c2)))AND(vt1.c0)) AS TEXT)) ORDER BY ((((rt0.c1)OR(rt0.c3)))<<(TRIM(rt0.c2)))  NULLS LAST, ((vt1.c0)LIKE(rt0.c3)) COLLATE NOCASE DESC  NULLS FIRST, (+ (((rt0.c2)LIKE(rt0.c1)))) DESC LIMIT 2;
SELECT MAX(rt0.c0) FROM rt0 WHERE ((((rt0.c0))!=(('nL<'))) COLLATE BINARY);
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE ((((((rt0.c0))<>(('nL<'))) COLLATE BINARY)AND(CAST(((rt0.c3)=(rt0.c2)) AS BLOB))));
SELECT ALL * FROM vt1, rt0 WHERE ((((((((((((rt0.c3 IN ()))OR(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(rt0.c3 COLLATE BINARY)))OR(((rt0.c3) IS TRUE))))AND(((0.8537939938741533)AND(rt0.c1)))))OR(NULL))) ORDER BY (((CAST(rt0.c3 AS TEXT)))<=((((((rt0.c0)AND('-1066686250')))OR(rt0.c0))))), ((((rt0.c2)AND(rt0.c1))) NOT NULL)  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((((((((rt0.c3 IN ()))OR(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(rt0.c3 COLLATE BINARY)))OR(((rt0.c3) IS TRUE))))AND(((0.8537939938741533)AND(rt0.c1)))))OR(NULL))) ORDER BY (((CAST(rt0.c3 AS TEXT)))<=((((((rt0.c0)AND('-1066686250')))OR(rt0.c0))))), ((((rt0.c2)AND(rt0.c1))) NOT NULL)  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((((((rt0.c3 IN ()))OR(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(rt0.c3 COLLATE BINARY)))OR(((rt0.c3) IS TRUE))))AND(((0.8537939938741533)AND(rt0.c1)))))OR(NULL))) ORDER BY (((CAST(rt0.c3 AS TEXT)))<=((((((rt0.c0)AND('-1066686250')))OR(rt0.c0))))), ((((rt0.c2)AND(rt0.c1))) NOT NULL)  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((((((((rt0.c3 IN ()))OR(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(rt0.c3 COLLATE BINARY)))OR(((rt0.c3) IS TRUE))))AND(((0.8537939938741533)AND(rt0.c1)))))OR(NULL))) ORDER BY (((CAST(rt0.c3 AS TEXT)))<=((((((rt0.c0)AND('-1066686250')))OR(rt0.c0))))), ((((rt0.c2)AND(rt0.c1))) NOT NULL)  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE ((0.544233763561105) NOT BETWEEN (vt1.c0) AND (vt1.c0))  WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN (+ (vt1.c0)) WHEN CAST(vt1.c0 AS TEXT) THEN vt1.c0 COLLATE RTRIM ELSE ((((((((vt1.c0)AND(NULL)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) END) ORDER BY (- (LTRIM(vt1.c0, x'a5c3'))) ASC  NULLS FIRST, ((((((HEX(vt1.c0))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(vt1.c0)))OR(((vt1.c0)AND(NULL)))) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE ((0.544233763561105) NOT BETWEEN (vt1.c0) AND (vt1.c0))  WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN (+ (vt1.c0)) WHEN CAST(vt1.c0 AS TEXT) THEN vt1.c0 COLLATE RTRIM ELSE ((((((((vt1.c0)AND(NULL)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) END) ORDER BY (- (LTRIM(vt1.c0, x'a5c3'))) ASC  NULLS FIRST, ((((((HEX(vt1.c0))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(vt1.c0)))OR(((vt1.c0)AND(NULL)))) DESC LIMIT 1;
SELECT * FROM rt0 WHERE ('C''t\E');
SELECT ALL * FROM rt0 WHERE ('C''t\E') INTERSECT SELECT * FROM rt0 WHERE (CAST('' AS TEXT));
SELECT * FROM rt0 WHERE ('C''t\E');
SELECT ALL * FROM rt0 WHERE ('C''t\E') INTERSECT SELECT * FROM rt0 WHERE (CAST('' AS TEXT));
SELECT ALL * FROM rt0 WHERE (0.6251736134456705) ORDER BY CASE WHEN 0.0 THEN (((rt0.c1, rt0.c2))>=((rt0.c3, rt0.c3))) ELSE NULLIF(DISTINCT rt0.c3, rt0.c2) END DESC, (((((1663299610, '441814537')) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, x'f1ef'))))!=(((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c0))));
SELECT ALL * FROM rt0 WHERE (((0.6251736134456705)AND(CAST((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c3))) AS TEXT)))) ORDER BY CASE WHEN 0.0 THEN (((rt0.c1, rt0.c2))>=((rt0.c3, rt0.c3))) ELSE NULLIF(DISTINCT rt0.c3, rt0.c2) END DESC, (((((1663299610, '441814537')) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, x'f1ef'))))!=(((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c0)))) LIMIT 0x1 INTERSECT SELECT ALL * FROM rt0 WHERE (NULL) ORDER BY CASE WHEN 0.0 THEN (((rt0.c1, rt0.c2))>=((rt0.c3, rt0.c3))) ELSE NULLIF(DISTINCT rt0.c3, rt0.c2) END DESC, (((((0X6323f01a, '441814537')) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, x'f1ef'))))!=(((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c0)))) LIMIT 1;
SELECT ALL * FROM rt0 WHERE (0.6251736134456705) ORDER BY CASE WHEN 0.0 THEN (((rt0.c1, rt0.c2))>=((rt0.c3, rt0.c3))) ELSE NULLIF(DISTINCT rt0.c3, rt0.c2) END DESC, (((((1663299610, '441814537')) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, x'f1ef'))))!=(((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c0))));
SELECT ALL * FROM rt0 WHERE (((0.6251736134456705)AND(CAST((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c3))) AS TEXT)))) ORDER BY CASE WHEN 0.0 THEN (((rt0.c1, rt0.c2))>=((rt0.c3, rt0.c3))) ELSE NULLIF(DISTINCT rt0.c3, rt0.c2) END DESC, (((((1663299610, '441814537')) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, x'f1ef'))))!=(((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c0)))) LIMIT 0x1 INTERSECT SELECT ALL * FROM rt0 WHERE (NULL) ORDER BY CASE WHEN 0.0 THEN (((rt0.c1, rt0.c2))>=((rt0.c3, rt0.c3))) ELSE NULLIF(DISTINCT rt0.c3, rt0.c2) END DESC, (((((0X6323f01a, '441814537')) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, x'f1ef'))))!=(((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c0)))) LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (0.09514720601543125);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((0.09514720601543125)AND((('')+((vt1.c0 IN (vt1.c0)))))));
SELECT * FROM rt0 WHERE (LOWER((rt0.c2 IN (rt0.c0)))) ORDER BY (((((((rt0.c2)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)) IN ()) ASC  NULLS FIRST, json('0.3131613657923358') DESC;
SELECT DISTINCT * FROM rt0 WHERE (((LOWER((rt0.c2 IN (rt0.c0))))AND(LIKELIHOOD(((rt0.c2)!=(rt0.c3)), ((((((rt0.c0)OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c1)))))) ORDER BY QUOTE(((rt0.c3) ISNULL)) ASC INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c3, rt0.c1)) NOT BETWEEN ((((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c1)), (rt0.c0 IN ()))) AND ((NULL, ((rt0.c1) ISNULL))))) ORDER BY QUOTE(((rt0.c3) ISNULL)) ASC;
SELECT * FROM rt0 WHERE (LOWER((rt0.c2 IN (rt0.c0)))) ORDER BY (((((((rt0.c2)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)) IN ()) ASC  NULLS FIRST, json('0.3131613657923358') DESC;
SELECT ALL * FROM vt1 WHERE ((NOT (vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE ((((NOT (vt1.c0)))AND(vt1.c0))) ORDER BY ((CASE WHEN vt1.c0 THEN x'88' ELSE vt1.c0 END) NOT BETWEEN ((NOT (vt1.c0))) AND (UNICODE(NULL))) DESC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1 WHERE ((NOT (vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE ((((NOT (vt1.c0)))AND(vt1.c0))) ORDER BY ((CASE WHEN vt1.c0 THEN x'88' ELSE vt1.c0 END) NOT BETWEEN ((NOT (vt1.c0))) AND (UNICODE(NULL))) DESC  NULLS FIRST LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (((((rt0.c2)<<(rt0.c3))) BETWEEN ((rt0.c1 IN ())) AND ((- (rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c2)<<(rt0.c3))) BETWEEN ((rt0.c1 IN ())) AND ((- (rt0.c1))))) ORDER BY ((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN '55232972' ELSE rt0.c1 END)/((rt0.c1 IN (rt0.c1)))) ASC  NULLS LAST, CAST((((rt0.c0, vt1.c0))<=((rt0.c2, rt0.c0))) AS TEXT)  NULLS LAST, ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)) COLLATE NOCASE ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY ((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN '55232972' ELSE rt0.c1 END)/((rt0.c1 IN (rt0.c1)))) ASC  NULLS LAST, CAST((((rt0.c0, vt1.c0))<=((rt0.c2, rt0.c0))) AS TEXT)  NULLS LAST, ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)) COLLATE NOCASE ASC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (((((rt0.c2)<<(rt0.c3))) BETWEEN ((rt0.c1 IN ())) AND ((- (rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c2)<<(rt0.c3))) BETWEEN ((rt0.c1 IN ())) AND ((- (rt0.c1))))) ORDER BY ((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN '55232972' ELSE rt0.c1 END)/((rt0.c1 IN (rt0.c1)))) ASC  NULLS LAST, CAST((((rt0.c0, vt1.c0))<=((rt0.c2, rt0.c0))) AS TEXT)  NULLS LAST, ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)) COLLATE NOCASE ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY ((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN '55232972' ELSE rt0.c1 END)/((rt0.c1 IN (rt0.c1)))) ASC  NULLS LAST, CAST((((rt0.c0, vt1.c0))<=((rt0.c2, rt0.c0))) AS TEXT)  NULLS LAST, ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)) COLLATE NOCASE ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (CAST(((vt1.c0) NOT NULL) AS NUMERIC)) ORDER BY -1.955672256E9 ASC;
SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) NOT NULL) AS NUMERIC)) ORDER BY -1.955672256E9 ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) IS FALSE)) ORDER BY -1.955672256E9 ASC;
SELECT * FROM vt1 WHERE (CAST(((vt1.c0) NOT NULL) AS NUMERIC)) ORDER BY -1.955672256E9 ASC;
SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) NOT NULL) AS NUMERIC)) ORDER BY -1.955672256E9 ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) IS FALSE)) ORDER BY -1.955672256E9 ASC;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c3)))LIKE((~ (rt0.c1)))) WHERE ((((vt1.c0)) BETWEEN ((CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END)) AND ((COALESCE(rt0.c2, rt0.c1, rt0.c2, rt0.c1, rt0.c2)))));
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c3)))LIKE((~ (rt0.c1)))) WHERE ((((((vt1.c0)) BETWEEN ((CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END)) AND ((COALESCE(rt0.c2, rt0.c1, rt0.c2, rt0.c1, rt0.c2)))))AND(NULL))) ORDER BY ((((((((((((((((((vt1.c0)+(rt0.c2)))OR(vt1.c0)))OR((('') NOT BETWEEN (rt0.c2) AND (rt0.c2)))))OR(((vt1.c0) NOTNULL))))AND(((rt0.c1)IS(rt0.c2)))))OR(((((vt1.c0)OR(rt0.c3)))AND(vt1.c0)))))OR(rt0.c3 COLLATE RTRIM)))AND(((vt1.c0) NOTNULL))))OR(('-1834146775' IN ()))), ((('EPto芓5E6'))>((rt0.c0 COLLATE BINARY))) ASC  NULLS FIRST;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c3)))LIKE((~ (rt0.c1)))) WHERE ((((vt1.c0)) BETWEEN ((CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END)) AND ((COALESCE(rt0.c2, rt0.c1, rt0.c2, rt0.c1, rt0.c2)))));
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c3)))LIKE((~ (rt0.c1)))) WHERE ((((((vt1.c0)) BETWEEN ((CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END)) AND ((COALESCE(rt0.c2, rt0.c1, rt0.c2, rt0.c1, rt0.c2)))))AND(NULL))) ORDER BY ((((((((((((((((((vt1.c0)+(rt0.c2)))OR(vt1.c0)))OR((('') NOT BETWEEN (rt0.c2) AND (rt0.c2)))))OR(((vt1.c0) NOTNULL))))AND(((rt0.c1)IS(rt0.c2)))))OR(((((vt1.c0)OR(rt0.c3)))AND(vt1.c0)))))OR(rt0.c3 COLLATE RTRIM)))AND(((vt1.c0) NOTNULL))))OR(('-1834146775' IN ()))), ((('EPto芓5E6'))>((rt0.c0 COLLATE BINARY))) ASC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (highlight(((vt1.c0)<(vt1.c0)), (vt1.c0 IN (vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE vt1.c0 END, CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) ORDER BY ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) IN ());
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((highlight(((vt1.c0)<(vt1.c0)), (vt1.c0 IN (vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE vt1.c0 END, CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))AND('0.0'))) ORDER BY ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) IN ()) LIMIT 0X1;
SELECT * FROM vt1 INNER JOIN rt0 ON ((((CASE WHEN rt0.c0 THEN rt0.c0 END)OR(ABS(rt0.c1))))OR(((rt0.c2) IS TRUE))) WHERE (CAST(CAST(rt0.c0 AS BLOB) AS REAL)) ORDER BY (+ (rt0.c3 COLLATE NOCASE)), (((((rt0.c3, rt0.c2, vt1.c0, vt1.c0)) NOT BETWEEN ((rt0.c1, vt1.c0, vt1.c0, rt0.c2)) AND (('I', rt0.c1, 'nL<', rt0.c0))))GLOB(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END)) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON ((((CASE WHEN rt0.c0 THEN rt0.c0 END)OR(ABS(rt0.c1))))OR(((rt0.c2) IS TRUE))) WHERE (((CAST(CAST(rt0.c0 AS BLOB) AS REAL))AND(((((((CAST(rt0.c1 AS INTEGER))OR(((rt0.c0)OR(rt0.c2)))))OR(((((NULL)OR(rt0.c2)))AND(rt0.c3)))))AND(rt0.c0))))) ORDER BY ((vt1.c0 COLLATE NOCASE) ISNULL);
SELECT * FROM vt1 INNER JOIN rt0 ON ((((CASE WHEN rt0.c0 THEN rt0.c0 END)OR(ABS(rt0.c1))))OR(((rt0.c2) IS TRUE))) WHERE (CAST(CAST(rt0.c0 AS BLOB) AS REAL)) ORDER BY (+ (rt0.c3 COLLATE NOCASE)), (((((rt0.c3, rt0.c2, vt1.c0, vt1.c0)) NOT BETWEEN ((rt0.c1, vt1.c0, vt1.c0, rt0.c2)) AND (('I', rt0.c1, 'nL<', rt0.c0))))GLOB(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END)) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON ((((CASE WHEN rt0.c0 THEN rt0.c0 END)OR(ABS(rt0.c1))))OR(((rt0.c2) IS TRUE))) WHERE (((CAST(CAST(rt0.c0 AS BLOB) AS REAL))AND(((((((CAST(rt0.c1 AS INTEGER))OR(((rt0.c0)OR(rt0.c2)))))OR(((((NULL)OR(rt0.c2)))AND(rt0.c3)))))AND(rt0.c0))))) ORDER BY ((vt1.c0 COLLATE NOCASE) ISNULL);
SELECT ALL * FROM rt0 WHERE ((((NOT (rt0.c0))) NOT BETWEEN (CAST(rt0.c2 AS NUMERIC)) AND (CAST(rt0.c0 AS REAL))));
SELECT DISTINCT * FROM rt0 WHERE ((((NOT (rt0.c0))) NOT BETWEEN (CAST(rt0.c2 AS NUMERIC)) AND (CAST(rt0.c0 AS REAL)))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((CAST('953433735' AS NUMERIC))OR(rt0.c2)))OR((rt0.c1 IN ()))))AND((- (rt0.c0)))))AND((((rt0.c1, rt0.c3, rt0.c1))<((rt0.c3, rt0.c1, rt0.c1))))));
SELECT ALL * FROM rt0 WHERE ((((NOT (rt0.c0))) NOT BETWEEN (CAST(rt0.c2 AS NUMERIC)) AND (CAST(rt0.c0 AS REAL))));
SELECT DISTINCT * FROM rt0 WHERE ((((NOT (rt0.c0))) NOT BETWEEN (CAST(rt0.c2 AS NUMERIC)) AND (CAST(rt0.c0 AS REAL)))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((CAST('953433735' AS NUMERIC))OR(rt0.c2)))OR((rt0.c1 IN ()))))AND((- (rt0.c0)))))AND((((rt0.c1, rt0.c3, rt0.c1))<((rt0.c3, rt0.c1, rt0.c1))))));
SELECT ALL COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (CASE WHEN ((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c0)) THEN ((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)) WHEN ((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) THEN ((rt0.c3) IS TRUE) WHEN CAST(rt0.c0 AS NUMERIC) THEN (rt0.c2 IN ()) WHEN (rt0.c2 IN ()) THEN -182911986 ELSE 'c''t\e' COLLATE BINARY END);
SELECT ALL COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((CASE WHEN ((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c0)) THEN ((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)) WHEN ((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) THEN ((rt0.c3) IS TRUE) WHEN CAST(rt0.c0 AS NUMERIC) THEN (rt0.c2 IN ()) WHEN (rt0.c2 IN ()) THEN -182911986 ELSE 'c''t\e' COLLATE BINARY END)AND(((CAST(vt1.c0 AS INTEGER)) NOT BETWEEN (NULL) AND (TIME(rt0.c2, rt0.c3, rt0.c2))))));
SELECT MAX(rt0.c0) FROM vt1 CROSS JOIN rt0 ON (((((rt0.c0) IS FALSE)))>=((rt0.c0))) WHERE ((((rt0.c1, rt0.c0)) BETWEEN (((vt1.c0 IN ()), ((rt0.c1) IS FALSE))) AND ((((((-1733680795)OR(rt0.c2)))AND(rt0.c3)), CAST(rt0.c1 AS INTEGER)))));
SELECT DISTINCT MAX(rt0.c0) FROM vt1 CROSS JOIN rt0 ON (((((rt0.c0) IS FALSE)))>=((rt0.c0))) WHERE ((((rt0.c1, rt0.c0)) BETWEEN (((vt1.c0 IN ()), ((rt0.c1) IS FALSE))) AND ((((((-1733680795)OR(rt0.c2)))AND(rt0.c3)), CAST(rt0.c1 AS INTEGER))))) ORDER BY ((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c3 END)LIKE((0X317c8293 IN ()))) ASC  NULLS LAST INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM vt1 CROSS JOIN rt0 ON (((((rt0.c0) IS FALSE)))>=((rt0.c0))) WHERE (((rt0.c0)<>(vt1.c0)) COLLATE RTRIM) ORDER BY ((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c3 END)LIKE((830243475 IN ()))) ASC  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((((((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR(CHANGES())))OR((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, 1304629726, vt1.c0, vt1.c0))))))OR(((vt1.c0)<(vt1.c0))))) ORDER BY (~ ((vt1.c0 IN ())))  NULLS FIRST, ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(x'57f8')))AND('-182911986')))AND(vt1.c0)) COLLATE BINARY;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((((((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR(CHANGES())))OR((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, 0X4dc311de, vt1.c0, vt1.c0))))))OR(((vt1.c0)<(vt1.c0)))))AND(CAST(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) AS INTEGER)))) ORDER BY CAST(((vt1.c0)%(vt1.c0)) AS INTEGER)  NULLS FIRST, json_valid(CASE WHEN vt1.c0 THEN vt1.c0 ELSE '-101668619' END) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((vt1.c0)>=(vt1.c0)) COLLATE RTRIM) ORDER BY CAST(((vt1.c0)%(vt1.c0)) AS INTEGER)  NULLS FIRST, json_valid(CASE WHEN vt1.c0 THEN vt1.c0 ELSE '-101668619' END);
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((((((((CAST(0.12794404513750668 AS TEXT))OR(((vt1.c0) BETWEEN (0.8267627164915583) AND (vt1.c0)))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))OR((~ (vt1.c0)))))AND(CAST(vt1.c0 AS TEXT))))OR(((vt1.c0)LIKE(vt1.c0)))))AND(((vt1.c0)+(0.5480066150155817))))) ORDER BY ((((vt1.c0)+(vt1.c0))) NOT NULL) ASC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((((((((((CAST(0.12794404513750668 AS TEXT))OR(((vt1.c0) BETWEEN (0.8267627164915583) AND (vt1.c0)))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))OR((~ (vt1.c0)))))AND(CAST(vt1.c0 AS TEXT))))OR(((vt1.c0)LIKE(vt1.c0)))))AND(((vt1.c0)+(0.5480066150155817)))))AND((~ (STRFTIME(vt1.c0, x'ded63ba28f', vt1.c0)))))) ORDER BY 0.6552312870348684;
SELECT ALL * FROM vt1 WHERE ((((- (vt1.c0)))LIKE((+ (vt1.c0))))) ORDER BY '99367454', ((((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CAST(x'' AS REAL))))OR(CAST(vt1.c0 AS NUMERIC))) DESC;
SELECT DISTINCT * FROM vt1 WHERE ((((((- (vt1.c0)))LIKE((+ (vt1.c0)))))AND((((- (vt1.c0))) IS TRUE)))) ORDER BY '99367454', ((((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CAST(x'' AS REAL))))OR(CAST(vt1.c0 AS NUMERIC))) DESC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)<(vt1.c0))) IS TRUE)) ORDER BY '99367454', ((((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CAST(x'' AS REAL))))OR(CAST(vt1.c0 AS NUMERIC))) DESC LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((- (vt1.c0)))LIKE((+ (vt1.c0))))) ORDER BY '99367454', ((((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CAST(x'' AS REAL))))OR(CAST(vt1.c0 AS NUMERIC))) DESC;
SELECT DISTINCT * FROM vt1 WHERE ((((((- (vt1.c0)))LIKE((+ (vt1.c0)))))AND((((- (vt1.c0))) IS TRUE)))) ORDER BY '99367454', ((((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CAST(x'' AS REAL))))OR(CAST(vt1.c0 AS NUMERIC))) DESC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)<(vt1.c0))) IS TRUE)) ORDER BY '99367454', ((((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CAST(x'' AS REAL))))OR(CAST(vt1.c0 AS NUMERIC))) DESC LIMIT 0x0;
SELECT ALL * FROM rt0, vt1 WHERE (x'd2c58d') ORDER BY CASE ((0x2e2833dc)!=(rt0.c0))  WHEN '**xk?' THEN ((((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(x'3d088649')))OR(vt1.c0)))AND(rt0.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END THEN vt1.c0 END  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (x'd2c58d') ORDER BY CASE ((774386652)<>(rt0.c0))  WHEN '**xk?' THEN ((((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(x'3d088649')))OR(vt1.c0)))AND(rt0.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END THEN vt1.c0 END  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE vt1.c0  WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END)AND(((rt0.c3)IS(rt0.c3))))) ORDER BY CASE ((774386652)!=(rt0.c0))  WHEN '**xk?' THEN ((((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(x'3d088649')))OR(vt1.c0)))AND(rt0.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END THEN vt1.c0 END  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE (x'd2c58d') ORDER BY CASE ((0x2e2833dc)!=(rt0.c0))  WHEN '**xk?' THEN ((((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(x'3d088649')))OR(vt1.c0)))AND(rt0.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END THEN vt1.c0 END  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (x'd2c58d') ORDER BY CASE ((774386652)<>(rt0.c0))  WHEN '**xk?' THEN ((((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(x'3d088649')))OR(vt1.c0)))AND(rt0.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END THEN vt1.c0 END  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE vt1.c0  WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END)AND(((rt0.c3)IS(rt0.c3))))) ORDER BY CASE ((774386652)!=(rt0.c0))  WHEN '**xk?' THEN ((((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(x'3d088649')))OR(vt1.c0)))AND(rt0.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END THEN vt1.c0 END  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON rt0.c1 WHERE ('**xk?');
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON rt0.c1 WHERE ('**xk?');
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON rt0.c1 WHERE ('**xk?');
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON rt0.c1 WHERE ('**xk?');
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c3, rt0.c2))>=((rt0.c0, rt0.c2))) IN ()));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c3, rt0.c2))>=((rt0.c0, rt0.c2))) IN ())) ORDER BY rt0.c1 DESC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c3, rt0.c2))>=((rt0.c0, rt0.c2))) IN ()));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c3, rt0.c2))>=((rt0.c0, rt0.c2))) IN ())) ORDER BY rt0.c1 DESC  NULLS LAST LIMIT 0X0;
SELECT MAX(rt0.c3) FROM rt0 WHERE ((((rt0.c0, rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c1 COLLATE NOCASE, CAST('0.8267627164915583' AS BLOB), ((rt0.c1)<=(1082644571)))) AND ((((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c0)), ((rt0.c2) IS FALSE), (- (rt0.c1))))));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((((((rt0.c0, rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c1 COLLATE NOCASE, CAST('0.8267627164915583' AS BLOB), ((rt0.c1)<=(1082644573)))) AND ((((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c0)), ((rt0.c2) IS FALSE), (- (rt0.c1))))))AND((((x'33', rt0.c1, rt0.c1)) NOT BETWEEN ((CASE rt0.c0  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c0 END, ((x'')==(rt0.c1)), ((rt0.c0)IS NOT(rt0.c2)))) AND (((((rt0.c2))>((0.1479873907414725))), (- (rt0.c3)), ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1)))))))) LIMIT 0X1 INTERSECT SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (CASE '-1812739594'  WHEN (- (rt0.c2)) THEN json_array_length(rt0.c1, rt0.c2) WHEN 0.8621966180103493 THEN CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END WHEN ((rt0.c3) IS FALSE) THEN ((1.299452316E9) NOT NULL) ELSE ((rt0.c1) IS FALSE) END) LIMIT 0x1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0 COLLATE BINARY);
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0 COLLATE BINARY) LIMIT 0x1 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))AND('-1253896892')))<('-781367930'))) LIMIT 1;
SELECT ALL * FROM rt0 WHERE ((((~ (rt0.c1))) NOTNULL));
SELECT DISTINCT * FROM rt0 WHERE ((((~ (rt0.c1))) NOTNULL)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((CAST(rt0.c3 AS REAL))AND(((rt0.c1)|(rt0.c3))))) LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE ((((~ (rt0.c1))) NOTNULL));
SELECT DISTINCT * FROM rt0 WHERE ((((~ (rt0.c1))) NOTNULL)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((CAST(rt0.c3 AS REAL))AND(((rt0.c1)|(rt0.c3))))) LIMIT 0x0;
SELECT * FROM vt1 WHERE (x'');
SELECT DISTINCT * FROM vt1 WHERE (x'') LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0))!=((vt1.c0))))<<(CAST(vt1.c0 AS NUMERIC)))) LIMIT 0;
SELECT * FROM vt1 WHERE (x'');
SELECT DISTINCT * FROM vt1 WHERE (x'') LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0))!=((vt1.c0))))<<(CAST(vt1.c0 AS NUMERIC)))) LIMIT 0;
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE ((((rt0.c1, '-262715540', ((x'7c6587')LIKE(rt0.c3))))!=(((((rt0.c1)) BETWEEN ((rt0.c0)) AND ((vt1.c0))), ((rt0.c2)|(1.466001721E9)), (NULL IN (rt0.c2)))))) ORDER BY ((rt0.c1) BETWEEN (rt0.c3) AND (vt1.c0)) COLLATE RTRIM ASC  NULLS LAST, NULL COLLATE NOCASE ASC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE ((((((rt0.c1, '-262715540', ((x'7c6587')LIKE(rt0.c3))))<(((((rt0.c1)) BETWEEN ((rt0.c0)) AND ((vt1.c0))), ((rt0.c2)|(1.466001721E9)), (NULL IN (rt0.c2))))))AND(vt1.c0))) ORDER BY (x'02da0d' IN ()) DESC INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE ('kns4BC') ORDER BY (x'02da0d' IN ()) DESC;
SELECT ALL * FROM vt1, rt0 WHERE ((rt0.c3 IN ()) COLLATE NOCASE) ORDER BY CASE ((rt0.c1) NOTNULL)  WHEN CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 ELSE '**xk?' END THEN (('426117718')-(vt1.c0)) END, 0X41a6b2f6 ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c3 IN ()) COLLATE NOCASE)AND((- (vt1.c0 COLLATE RTRIM))))) ORDER BY ((CASE rt0.c0  WHEN rt0.c3 THEN rt0.c0 END) IS FALSE) DESC, ((CAST(rt0.c0 AS BLOB))>(((rt0.c2)>=(NULL)))) LIMIT 0X2;
SELECT ALL * FROM vt1, rt0 WHERE ((rt0.c3 IN ()) COLLATE NOCASE) ORDER BY CASE ((rt0.c1) NOTNULL)  WHEN CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 ELSE '**xk?' END THEN (('426117718')-(vt1.c0)) END, 0X41a6b2f6 ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((- (CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 WHEN 'GNWe4&0!' THEN vt1.c0 WHEN rt0.c3 THEN vt1.c0 END)));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((- (CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 WHEN 'GNWe4&0!' THEN vt1.c0 WHEN rt0.c3 THEN vt1.c0 END))) INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (CAST(((vt1.c0)>=(rt0.c3)) AS INTEGER));
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0 COLLATE RTRIM)OR((1965182289 IN (vt1.c0)))))OR(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND((((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0 COLLATE RTRIM)OR((1965182289 IN (vt1.c0)))))OR(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND((((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0)))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0) IS TRUE));
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0 COLLATE RTRIM)OR((1965182289 IN (vt1.c0)))))OR(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND((((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0 COLLATE RTRIM)OR((1965182289 IN (vt1.c0)))))OR(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND((((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0)))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0) IS TRUE));
SELECT * FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)AND(CASE WHEN vt1.c0 THEN vt1.c0 END)))OR(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)AND(CASE WHEN vt1.c0 THEN vt1.c0 END)))OR(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))))AND(((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))>>((+ ('53ずxL'))))))) LIMIT 0X3;
SELECT * FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)AND(CASE WHEN vt1.c0 THEN vt1.c0 END)))OR(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)AND(CASE WHEN vt1.c0 THEN vt1.c0 END)))OR(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))))AND(((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))>>((+ ('53ずxL'))))))) LIMIT 0X3;
SELECT ALL COUNT(*) FROM rt0 WHERE (((((((((((((((1.7976931348623157E308)AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c0)))AND(CAST(rt0.c1 AS TEXT))))AND(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 END))) ORDER BY ((((((((((((rt0.c1)AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))AND(x'')))OR(rt0.c3)))!=((((rt0.c3, rt0.c1))>=((rt0.c1, x''))))) ASC, CASE NULLIF(rt0.c3, rt0.c2)  WHEN ('
b6T	R|' IN ()) THEN rt0.c3 WHEN ((rt0.c2)*(rt0.c1)) THEN (~ (rt0.c1)) END  NULLS LAST, ((((((((((CAST(rt0.c3 AS INTEGER))AND(((((rt0.c1)AND(rt0.c1)))AND(rt0.c1)))))OR(((rt0.c0) IS TRUE))))AND(((rt0.c1) ISNULL))))OR((rt0.c0 IN (rt0.c3, rt0.c3)))))OR(rt0.c0)) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((((((((((((((((1.7976931348623157E308)AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c0)))AND(CAST(rt0.c1 AS TEXT))))AND(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 END)))AND(CAST(CAST(rt0.c2 AS INTEGER) AS REAL)))) ORDER BY ((((((((((((rt0.c1)AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))AND(x'')))OR(rt0.c3)))<>((((rt0.c3, rt0.c1))>=((rt0.c1, x''))))) ASC, CASE NULLIF(rt0.c3, rt0.c2)  WHEN ('
b6T	R|' IN ()) THEN rt0.c3 WHEN ((rt0.c2)*(rt0.c1)) THEN (~ (rt0.c1)) END  NULLS LAST, ((((((((((CAST(rt0.c3 AS INTEGER))AND(((((rt0.c1)AND(rt0.c1)))AND(rt0.c1)))))OR(((rt0.c0) IS TRUE))))AND(((rt0.c1) ISNULL))))OR((rt0.c0 IN (rt0.c3, rt0.c3)))))OR(rt0.c0)) ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((((((((((x'3421')OR(TRIM(rt0.c1))))OR(((rt0.c2) NOT NULL))))OR(CAST(rt0.c0 AS BLOB))))OR((NOT (rt0.c3)))))AND(CASE WHEN rt0.c0 THEN rt0.c0 END))) ORDER BY ((((((((((((rt0.c1)AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))AND(x'')))OR(rt0.c3)))<>((((rt0.c3, rt0.c1))>=((rt0.c1, x''))))) ASC, CASE NULLIF(rt0.c3, rt0.c2)  WHEN ('
b6T	R|' IN ()) THEN rt0.c3 WHEN ((rt0.c2)*(rt0.c1)) THEN (~ (rt0.c1)) END  NULLS LAST, ((((((((((CAST(rt0.c3 AS INTEGER))AND(((((rt0.c1)AND(rt0.c1)))AND(rt0.c1)))))OR(((rt0.c0) IS TRUE))))AND(((rt0.c1) ISNULL))))OR((rt0.c0 IN (rt0.c3, rt0.c3)))))OR(rt0.c0)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (((((((NULL) BETWEEN (rt0.c0) AND (rt0.c2)))AND(((rt0.c1)>=(rt0.c0)))))OR(rt0.c1 COLLATE BINARY))) ORDER BY ('1101443830' IN (((vt1.c0)IS(rt0.c0)))) DESC, (((rt0.c1))<=((rt0.c1))) COLLATE BINARY  NULLS LAST, ((CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END) ISNULL);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((NULL) BETWEEN (rt0.c0) AND (rt0.c2)))AND(((rt0.c1)>=(rt0.c0)))))OR(rt0.c1 COLLATE BINARY)))AND((((+ (rt0.c2)))|(((rt0.c3)IS(rt0.c0))))))) ORDER BY (((((((((vt1.c0)OR(rt0.c1)))AND(rt0.c3)))AND(vt1.c0)))AND(vt1.c0)) IN ((- (x''))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (-2.004012966E9) ORDER BY (((((((((vt1.c0)OR(rt0.c1)))AND(rt0.c3)))AND(vt1.c0)))AND(vt1.c0)) IN ((- (x''))))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (((((((NULL) BETWEEN (rt0.c0) AND (rt0.c2)))AND(((rt0.c1)>=(rt0.c0)))))OR(rt0.c1 COLLATE BINARY))) ORDER BY ('1101443830' IN (((vt1.c0)IS(rt0.c0)))) DESC, (((rt0.c1))<=((rt0.c1))) COLLATE BINARY  NULLS LAST, ((CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END) ISNULL);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((NULL) BETWEEN (rt0.c0) AND (rt0.c2)))AND(((rt0.c1)>=(rt0.c0)))))OR(rt0.c1 COLLATE BINARY)))AND((((+ (rt0.c2)))|(((rt0.c3)IS(rt0.c0))))))) ORDER BY (((((((((vt1.c0)OR(rt0.c1)))AND(rt0.c3)))AND(vt1.c0)))AND(vt1.c0)) IN ((- (x''))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (-2.004012966E9) ORDER BY (((((((((vt1.c0)OR(rt0.c1)))AND(rt0.c3)))AND(vt1.c0)))AND(vt1.c0)) IN ((- (x''))))  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (((COALESCE(vt1.c0, vt1.c0, rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN (vt1.c0) AND ((vt1.c0 IN (rt0.c2)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((COALESCE(vt1.c0, vt1.c0, rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN (vt1.c0) AND ((vt1.c0 IN (rt0.c2)))))AND(CASE WHEN (- (rt0.c0)) THEN ((((rt0.c2)AND(rt0.c3)))AND(rt0.c2)) WHEN CASE rt0.c0  WHEN rt0.c2 THEN '-116899011' WHEN '-1066686250' THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 END THEN (+ (rt0.c1)) WHEN vt1.c0 COLLATE BINARY THEN (('774386652')<=(rt0.c2)) WHEN ((rt0.c0)OR(rt0.c2)) THEN ((rt0.c3) NOT BETWEEN ('-97448687') AND (rt0.c2)) ELSE IFNULL(rt0.c3, rt0.c3) END)));
SELECT * FROM vt1, rt0 WHERE (((COALESCE(vt1.c0, vt1.c0, rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN (vt1.c0) AND ((vt1.c0 IN (rt0.c2)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((COALESCE(vt1.c0, vt1.c0, rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN (vt1.c0) AND ((vt1.c0 IN (rt0.c2)))))AND(CASE WHEN (- (rt0.c0)) THEN ((((rt0.c2)AND(rt0.c3)))AND(rt0.c2)) WHEN CASE rt0.c0  WHEN rt0.c2 THEN '-116899011' WHEN '-1066686250' THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 END THEN (+ (rt0.c1)) WHEN vt1.c0 COLLATE BINARY THEN (('774386652')<=(rt0.c2)) WHEN ((rt0.c0)OR(rt0.c2)) THEN ((rt0.c3) NOT BETWEEN ('-97448687') AND (rt0.c2)) ELSE IFNULL(rt0.c3, rt0.c3) END)));
SELECT ALL COUNT(*) FROM rt0 WHERE (CAST(((rt0.c0) IS FALSE) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CAST(((rt0.c0) IS FALSE) AS NUMERIC)) ORDER BY CAST((rt0.c1 IN (rt0.c3)) AS TEXT), ((CAST('1082644571' AS REAL))GLOB((+ ('也')))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (TRIM(CASE rt0.c0  WHEN rt0.c0 THEN NULL ELSE rt0.c1 END)) ORDER BY CAST((rt0.c1 IN (rt0.c3)) AS TEXT), ((CAST('1082644571' AS REAL))GLOB((+ ('也')))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0)))<=(((vt1.c0)GLOB(vt1.c0))))) ORDER BY ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))IS(((vt1.c0)IS(vt1.c0)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0)))<(((vt1.c0)GLOB(vt1.c0))))) ORDER BY UPPER(((vt1.c0) NOT NULL)) DESC, (vt1.c0 IN (vt1.c0)) COLLATE BINARY  NULLS LAST INTERSECT SELECT * FROM vt1 WHERE (((((0.8709225950019939) ISNULL)) IS TRUE)) ORDER BY UPPER(((vt1.c0) NOT NULL)) DESC, (vt1.c0 IN (vt1.c0)) COLLATE BINARY  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0)))<=(((vt1.c0)GLOB(vt1.c0))))) ORDER BY ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))IS(((vt1.c0)IS(vt1.c0)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0)))<(((vt1.c0)GLOB(vt1.c0))))) ORDER BY UPPER(((vt1.c0) NOT NULL)) DESC, (vt1.c0 IN (vt1.c0)) COLLATE BINARY  NULLS LAST INTERSECT SELECT * FROM vt1 WHERE (((((0.8709225950019939) ISNULL)) IS TRUE)) ORDER BY UPPER(((vt1.c0) NOT NULL)) DESC, (vt1.c0 IN (vt1.c0)) COLLATE BINARY  NULLS LAST;
SELECT * FROM rt0 WHERE (CAST(rt0.c2 COLLATE BINARY AS TEXT));
SELECT * FROM rt0 WHERE (CAST(rt0.c2 COLLATE BINARY AS TEXT)) ORDER BY (((rt0.c0 IN (rt0.c3))) NOT BETWEEN ('160429264') AND (('78570941' IN (rt0.c1)))) DESC LIMIT 0X1 INTERSECT SELECT ALL * FROM rt0 WHERE (IFNULL(rt0.c3 COLLATE BINARY, CAST(0.2795279676558975 AS TEXT))) ORDER BY (((rt0.c0 IN (rt0.c3))) NOT BETWEEN ('160429264') AND (('78570941' IN (rt0.c1)))) DESC LIMIT 0x1;
SELECT * FROM rt0 WHERE (CAST(rt0.c2 COLLATE BINARY AS TEXT));
SELECT * FROM rt0 WHERE (CAST(rt0.c2 COLLATE BINARY AS TEXT)) ORDER BY (((rt0.c0 IN (rt0.c3))) NOT BETWEEN ('160429264') AND (('78570941' IN (rt0.c1)))) DESC LIMIT 0X1 INTERSECT SELECT ALL * FROM rt0 WHERE (IFNULL(rt0.c3 COLLATE BINARY, CAST(0.2795279676558975 AS TEXT))) ORDER BY (((rt0.c0 IN (rt0.c3))) NOT BETWEEN ('160429264') AND (('78570941' IN (rt0.c1)))) DESC LIMIT 0x1;
SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE ((((rt0.c2 IN ())) BETWEEN ((((rt0.c2, rt0.c2, rt0.c1, rt0.c3, vt1.c0, vt1.c0))==((rt0.c0, '3X,2O', rt0.c3, rt0.c0, rt0.c3, rt0.c0)))) AND (HEX(vt1.c0)))) ORDER BY ((((rt0.c1) BETWEEN (rt0.c2) AND (vt1.c0)))<<(0.35795302195238243))  NULLS LAST;
SELECT MAX(rt0.c3) FROM rt0, vt1 WHERE ((((rt0.c2 IN ())) BETWEEN ((((rt0.c2, rt0.c2, rt0.c1, rt0.c3, vt1.c0, vt1.c0))=((rt0.c0, '3X,2O', rt0.c3, rt0.c0, rt0.c3, rt0.c0)))) AND (HEX(vt1.c0)))) ORDER BY ((((rt0.c1) BETWEEN (rt0.c2) AND (vt1.c0)))<<(0.35795302195238243))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (CASE (NOT (rt0.c1))  WHEN (~ (vt1.c0)) THEN 0x4fddd72b END);
SELECT ALL * FROM vt1, rt0 WHERE (CASE (NOT (rt0.c1))  WHEN (~ (vt1.c0)) THEN 1339938603 END) ORDER BY ((((((((rt0.c3 COLLATE BINARY)AND(0.8735340297327784 COLLATE BINARY)))OR(((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c3)))))OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN 0.8938055664288324 END)))OR(CASE WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END)) ASC, ((CAST(rt0.c1 AS REAL))-(rt0.c1)), UPPER(((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c0))) DESC INTERSECT SELECT * FROM vt1, rt0 WHERE (((UPPER(DISTINCT rt0.c2))GLOB((- (rt0.c3))))) ORDER BY ((((((((rt0.c3 COLLATE BINARY)AND(0.8735340297327784 COLLATE BINARY)))OR(((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c3)))))OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN 0.8938055664288324 END)))OR(CASE WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END)) ASC, ((CAST(rt0.c1 AS REAL))-(rt0.c1)), UPPER(((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c0))) DESC;
SELECT ALL * FROM vt1, rt0 WHERE (CASE (NOT (rt0.c1))  WHEN (~ (vt1.c0)) THEN 0x4fddd72b END);
SELECT ALL * FROM vt1, rt0 WHERE (CASE (NOT (rt0.c1))  WHEN (~ (vt1.c0)) THEN 1339938603 END) ORDER BY ((((((((rt0.c3 COLLATE BINARY)AND(0.8735340297327784 COLLATE BINARY)))OR(((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c3)))))OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN 0.8938055664288324 END)))OR(CASE WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END)) ASC, ((CAST(rt0.c1 AS REAL))-(rt0.c1)), UPPER(((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c0))) DESC INTERSECT SELECT * FROM vt1, rt0 WHERE (((UPPER(DISTINCT rt0.c2))GLOB((- (rt0.c3))))) ORDER BY ((((((((rt0.c3 COLLATE BINARY)AND(0.8735340297327784 COLLATE BINARY)))OR(((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c3)))))OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN 0.8938055664288324 END)))OR(CASE WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END)) ASC, ((CAST(rt0.c1 AS REAL))-(rt0.c1)), UPPER(((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c0))) DESC;
SELECT * FROM vt1, rt0 WHERE (CASE ((rt0.c2)&(rt0.c1))  WHEN (rt0.c1 IN ()) THEN ((0.8302506324692878) NOTNULL) WHEN rt0.c0 THEN ((rt0.c1)==(rt0.c1)) END);
SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE ((rt0.c2)&(rt0.c1))  WHEN (rt0.c1 IN ()) THEN ((0.8302506324692878) NOTNULL) WHEN rt0.c0 THEN ((rt0.c1)=(rt0.c1)) END) ORDER BY (((((rt0.c3) NOT NULL)))<=((COALESCE(rt0.c1, rt0.c1)))) ASC, (~ (rt0.c3))  NULLS FIRST, (((rt0.c1 IN ()))>=(CAST(vt1.c0 AS TEXT))) DESC INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((CAST(vt1.c0 AS BLOB))AND((((rt0.c1))>((vt1.c0))))))AND(rt0.c2)))OR(((rt0.c1)IS(rt0.c3)))))AND(((rt0.c2) IS TRUE))))AND(-6.47783693E8 COLLATE RTRIM))) ORDER BY (((((rt0.c3) NOT NULL)))<=((COALESCE(rt0.c1, rt0.c1)))) ASC, (~ (rt0.c3))  NULLS FIRST, (((rt0.c1 IN ()))>=(CAST(vt1.c0 AS TEXT))) DESC;
SELECT * FROM vt1, rt0 WHERE (CASE ((rt0.c2)&(rt0.c1))  WHEN (rt0.c1 IN ()) THEN ((0.8302506324692878) NOTNULL) WHEN rt0.c0 THEN ((rt0.c1)==(rt0.c1)) END);
SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE ((rt0.c2)&(rt0.c1))  WHEN (rt0.c1 IN ()) THEN ((0.8302506324692878) NOTNULL) WHEN rt0.c0 THEN ((rt0.c1)=(rt0.c1)) END) ORDER BY (((((rt0.c3) NOT NULL)))<=((COALESCE(rt0.c1, rt0.c1)))) ASC, (~ (rt0.c3))  NULLS FIRST, (((rt0.c1 IN ()))>=(CAST(vt1.c0 AS TEXT))) DESC INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((CAST(vt1.c0 AS BLOB))AND((((rt0.c1))>((vt1.c0))))))AND(rt0.c2)))OR(((rt0.c1)IS(rt0.c3)))))AND(((rt0.c2) IS TRUE))))AND(-6.47783693E8 COLLATE RTRIM))) ORDER BY (((((rt0.c3) NOT NULL)))<=((COALESCE(rt0.c1, rt0.c1)))) ASC, (~ (rt0.c3))  NULLS FIRST, (((rt0.c1 IN ()))>=(CAST(vt1.c0 AS TEXT))) DESC;
SELECT COUNT(*) FROM vt1, rt0 WHERE (CAST(UPPER(rt0.c2) AS REAL)) ORDER BY (('2Hq4[') BETWEEN (((0x3a904f7d) IS FALSE)) AND (((vt1.c0)*(NULL))));
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((CAST(UPPER(rt0.c2) AS REAL))AND(CASE WHEN ((vt1.c0)-('O0K')) THEN CASE rt0.c2  WHEN rt0.c0 THEN '' WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c1 END END))) ORDER BY (('2Hq4[') BETWEEN (((982536061) IS FALSE)) AND (((vt1.c0)*(NULL)))) LIMIT 0x2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (CASE UNLIKELY(DISTINCT rt0.c1)  WHEN NULL THEN rt0.c1 COLLATE RTRIM END) ORDER BY (('2Hq4[') BETWEEN (((982536061) IS FALSE)) AND (((vt1.c0)*(NULL)))) LIMIT 2;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE ((((((((rt0.c1)AND(vt1.c0)))AND(rt0.c3)))OR(vt1.c0)) IN (((rt0.c0) NOTNULL), (+ (rt0.c2))))) ORDER BY ((rt0.c3) ISNULL) ASC  NULLS LAST, LIKE(rt0.c3 COLLATE BINARY, '-567182715', '+')  NULLS FIRST;
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE ((((((((rt0.c1)AND(vt1.c0)))AND(rt0.c3)))OR(vt1.c0)) IN (((rt0.c0) NOTNULL), (+ (rt0.c2))))) ORDER BY ((rt0.c3) ISNULL) ASC  NULLS LAST, LIKE(rt0.c3 COLLATE BINARY, '-567182715', '+')  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE (((((rt0.c1)OR(vt1.c0)))AND(rt0.c1)) COLLATE RTRIM) ORDER BY ((rt0.c3) ISNULL) ASC  NULLS LAST, LIKE(rt0.c3 COLLATE BINARY, '-567182715', '+')  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (((vt1.c0)AND(((((((((0.9538844828764038)OR((NOT (vt1.c0)))))OR((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, x'e1', vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))))))OR(NULL)))AND(((vt1.c0)-(vt1.c0)))))));
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (((vt1.c0)AND(((((((((0.9538844828764038)OR((NOT (vt1.c0)))))OR((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, x'e1', vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))))))OR(NULL)))AND(((vt1.c0)-(vt1.c0)))))));
SELECT ALL * FROM vt1, rt0 WHERE (0.28860935593752846);
SELECT * FROM vt1, rt0 WHERE (((0.28860935593752846)AND('\Q'))) ORDER BY HEX(DISTINCT CAST(rt0.c0 AS NUMERIC)) ASC, (+ (CAST(rt0.c3 AS INTEGER))) DESC LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (0.28860935593752846);
SELECT * FROM vt1, rt0 WHERE (((0.28860935593752846)AND('\Q'))) ORDER BY HEX(DISTINCT CAST(rt0.c0 AS NUMERIC)) ASC, (+ (CAST(rt0.c3 AS INTEGER))) DESC LIMIT 0;
SELECT COUNT(*) FROM rt0 WHERE (((CASE WHEN rt0.c3 THEN 'R{' WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c2 END) ISNULL)) ORDER BY x'e5f3ce' COLLATE BINARY COLLATE NOCASE ASC, (((rt0.c1 IN ()))/(((rt0.c3)==(rt0.c2)))) ASC;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((((CASE WHEN rt0.c3 THEN 'R{' WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c2 END) ISNULL))AND((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c3)) IN ((((rt0.c0, rt0.c2, rt0.c0)) BETWEEN ((rt0.c1, rt0.c3, rt0.c0)) AND ((rt0.c0, rt0.c1, rt0.c1)))))))) ORDER BY x'e5f3ce' COLLATE BINARY COLLATE NOCASE ASC, (((rt0.c1 IN ()))/(((rt0.c3)=(rt0.c2)))) ASC LIMIT 3 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((0.09514720601543125) IS TRUE)) ORDER BY x'e5f3ce' COLLATE BINARY COLLATE NOCASE ASC, (((rt0.c1 IN ()))/(((rt0.c3)=(rt0.c2)))) ASC LIMIT 0x3;
SELECT ALL * FROM rt0, vt1 WHERE ((NOT (((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c1))))) ORDER BY ((+ (0.49119171848561916)) IN (((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c1)))) ASC, 0.1479873907414725 ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c1)))))AND(CASE ((((rt0.c3)OR(rt0.c3)))AND(NULL))  WHEN ((rt0.c2)>(rt0.c0)) THEN ((vt1.c0) IS FALSE) END))) ORDER BY MIN(TRIM(rt0.c3, 'i'), (((-379422826, rt0.c1))<>((rt0.c2, rt0.c3))), CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 END) DESC  NULLS LAST, ((CAST(vt1.c0 AS REAL)) BETWEEN (rt0.c1) AND (((rt0.c1)<<(rt0.c1))))  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c0)>(rt0.c0)))<=(CAST(vt1.c0 AS REAL)))) ORDER BY MIN(TRIM(rt0.c3, 'i'), (((-379422826, rt0.c1))!=((rt0.c2, rt0.c3))), CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 END) DESC  NULLS LAST, ((CAST(vt1.c0 AS REAL)) BETWEEN (rt0.c1) AND (((rt0.c1)<<(rt0.c1))))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE ((NOT (((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c1))))) ORDER BY ((+ (0.49119171848561916)) IN (((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c1)))) ASC, 0.1479873907414725 ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c1)))))AND(CASE ((((rt0.c3)OR(rt0.c3)))AND(NULL))  WHEN ((rt0.c2)>(rt0.c0)) THEN ((vt1.c0) IS FALSE) END))) ORDER BY MIN(TRIM(rt0.c3, 'i'), (((-379422826, rt0.c1))<>((rt0.c2, rt0.c3))), CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 END) DESC  NULLS LAST, ((CAST(vt1.c0 AS REAL)) BETWEEN (rt0.c1) AND (((rt0.c1)<<(rt0.c1))))  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c0)>(rt0.c0)))<=(CAST(vt1.c0 AS REAL)))) ORDER BY MIN(TRIM(rt0.c3, 'i'), (((-379422826, rt0.c1))!=((rt0.c2, rt0.c3))), CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 END) DESC  NULLS LAST, ((CAST(vt1.c0 AS REAL)) BETWEEN (rt0.c1) AND (((rt0.c1)<<(rt0.c1))))  NULLS FIRST LIMIT 0x1;
SELECT MAX(rt0.c0) FROM rt0, vt1 WHERE (x'');
SELECT ALL MAX(rt0.c0) FROM rt0, vt1 WHERE (x'') LIMIT 0 INTERSECT SELECT ALL MAX(rt0.c0) FROM rt0, vt1 WHERE (((((((((((UNICODE('b?'))AND((rt0.c2 IN ()))))OR(CAST(rt0.c3 AS INTEGER))))AND(CASE rt0.c3  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END)))OR(((vt1.c0)LIKE(vt1.c0)))))AND(rt0.c1))) LIMIT 0X0;
SELECT ALL * FROM rt0 WHERE (CASE WHEN rt0.c2 COLLATE RTRIM THEN UNLIKELY(rt0.c1) WHEN (NOT (rt0.c0)) THEN rt0.c1 COLLATE RTRIM ELSE (+ (rt0.c0)) END);
SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN rt0.c2 COLLATE RTRIM THEN UNLIKELY(rt0.c1) WHEN (NOT (rt0.c0)) THEN rt0.c1 COLLATE RTRIM ELSE (+ (rt0.c0)) END) LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c2) LIMIT 2;
SELECT ALL * FROM rt0 WHERE (CASE WHEN rt0.c2 COLLATE RTRIM THEN UNLIKELY(rt0.c1) WHEN (NOT (rt0.c0)) THEN rt0.c1 COLLATE RTRIM ELSE (+ (rt0.c0)) END);
SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN rt0.c2 COLLATE RTRIM THEN UNLIKELY(rt0.c1) WHEN (NOT (rt0.c0)) THEN rt0.c1 COLLATE RTRIM ELSE (+ (rt0.c0)) END) LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c2) LIMIT 2;
SELECT MAX(rt0.c2) FROM rt0 WHERE ('v');
SELECT MAX(rt0.c2) FROM rt0 WHERE ('v') ORDER BY RTRIM(((rt0.c1)!=(rt0.c2))) LIMIT 0;
SELECT MAX(rt0.c3) FROM rt0 WHERE (CAST(CASE WHEN rt0.c1 THEN 0.5236024968549693 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c3 END AS BLOB));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (CAST(CASE WHEN rt0.c1 THEN 0.5236024968549693 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c3 END AS BLOB)) INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE ('-262715540');
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))))=((x'f6'))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((((rt0.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))))=((x'f6'))))AND((~ (rt0.c1)) COLLATE NOCASE)));
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))))=((x'f6'))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((((rt0.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))))=((x'f6'))))AND((~ (rt0.c1)) COLLATE NOCASE)));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE);
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE)AND((CASE WHEN vt1.c0 THEN vt1.c0 WHEN -1.06668625E9 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END IN ())))) INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))>=((((0.8458136832775563)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((- ((vt1.c0 IN ())))) ORDER BY ((((vt1.c0) BETWEEN ('^&6Du%V3''') AND (vt1.c0)))/((- (vt1.c0)))), (~ (vt1.c0)) ASC  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((- ((vt1.c0 IN ())))) ORDER BY json_array(IFNULL(DISTINCT x'f20d', 0X19660a56), (~ (vt1.c0))), (NOT ((vt1.c0 IN ()))) ASC  NULLS FIRST;
SELECT MAX(rt0.c0) FROM rt0, vt1 WHERE (CAST(vt1.c0 AS BLOB) COLLATE RTRIM);
SELECT ALL MAX(rt0.c0) FROM rt0, vt1 WHERE (CAST(vt1.c0 AS BLOB) COLLATE RTRIM);
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE ((((rt0.c3 IN ()))/(((0.9607073496388701)==('a'))))) ORDER BY json_quote(CASE rt0.c1  WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c1 END), (CAST(rt0.c0 AS NUMERIC) IN ()), CASE WHEN rt0.c2 THEN ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c2)) ELSE CASE rt0.c1  WHEN rt0.c2 THEN rt0.c3 END END;
SELECT MIN(rt0.c2) FROM vt1, rt0 NOT INDEXED WHERE ((((((rt0.c3 IN ()))/(((0.9607073496388701)==('a')))))AND(((IFNULL(DISTINCT rt0.c2, rt0.c0))<>(rt0.c0 COLLATE NOCASE))))) ORDER BY json_quote(CASE rt0.c1  WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c1 END), (CAST(rt0.c0 AS NUMERIC) IN ()), CASE WHEN rt0.c2 THEN ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c2)) ELSE CASE rt0.c1  WHEN rt0.c2 THEN rt0.c3 END END;
SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE ((NOT (((rt0.c1) NOT NULL))));
SELECT MAX(rt0.c3) FROM rt0, vt1 WHERE ((((NOT (((rt0.c1) NOT NULL))))AND(CAST((vt1.c0 IN ()) AS TEXT)))) ORDER BY ((((rt0.c3)>=(rt0.c3))) ISNULL) ASC, UNLIKELY(DISTINCT ((rt0.c1) IS TRUE))  NULLS FIRST INTERSECT SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE (CASE WHEN (~ (rt0.c1)) THEN ((vt1.c0) BETWEEN (rt0.c2) AND (vt1.c0)) END) ORDER BY ((((rt0.c3)>=(rt0.c3))) ISNULL) ASC, UNLIKELY(DISTINCT ((rt0.c1) IS TRUE))  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN ())) IS FALSE)) ORDER BY CAST(vt1.c0 AS TEXT) DESC  NULLS FIRST, (NOT (((vt1.c0) ISNULL))) ASC;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN ())) IS FALSE)) ORDER BY (+ (vt1.c0)) COLLATE BINARY  NULLS FIRST, (((vt1.c0, vt1.c0)) BETWEEN ((((vt1.c0)<<(NULL)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN x'e5cfb0' WHEN vt1.c0 THEN vt1.c0 END)) AND ((json_remove(x'', vt1.c0), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((x'0b')))))), (((x'5e')) BETWEEN ((vt1.c0)) AND ((vt1.c0))) COLLATE RTRIM LIMIT 1;
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE ((((rt0.c3) ISNULL) IN (((rt0.c1)<(rt0.c1)))));
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE ((((rt0.c3) ISNULL) IN (((rt0.c1)<(rt0.c1))))) ORDER BY ((((rt0.c1)=(rt0.c3)))>((~ (rt0.c1)))) ASC  NULLS LAST LIMIT 2 INTERSECT SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (((CAST(rt0.c0 AS NUMERIC))+(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1))))) ORDER BY ((((rt0.c1)==(rt0.c3)))>((~ (rt0.c1)))) ASC  NULLS LAST LIMIT 0x2;
SELECT COUNT(*) FROM rt0, vt1 WHERE (((rt0.c1 COLLATE NOCASE) NOT BETWEEN (((((((rt0.c0)AND(rt0.c2)))OR(rt0.c2)))OR(vt1.c0))) AND (HEX(DISTINCT vt1.c0)))) ORDER BY rt0.c2 DESC  NULLS FIRST, CASE WHEN ((vt1.c0)IS NOT(rt0.c1)) THEN rt0.c1 COLLATE BINARY ELSE ((rt0.c3)<(rt0.c0)) END ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((rt0.c1 COLLATE NOCASE) NOT BETWEEN (((((((rt0.c0)AND(rt0.c2)))OR(rt0.c2)))OR(vt1.c0))) AND (HEX(DISTINCT vt1.c0)))) ORDER BY CASE json_type(rt0.c3)  WHEN ((rt0.c1) NOT NULL) THEN vt1.c0 ELSE ((((vt1.c0)AND(rt0.c1)))AND(rt0.c2)) END DESC  NULLS FIRST, (((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c0))) COLLATE NOCASE LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c3 IN (rt0.c3))) NOT BETWEEN (((rt0.c2) NOTNULL)) AND ((+ (rt0.c0))))) ORDER BY CASE json_type(rt0.c3)  WHEN ((rt0.c1) NOT NULL) THEN vt1.c0 ELSE ((((vt1.c0)AND(rt0.c1)))AND(rt0.c2)) END DESC  NULLS FIRST, (((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c0))) COLLATE NOCASE LIMIT 0x2;
SELECT ALL * FROM vt1, rt0 WHERE (0Xffffffffeaf3b771);
SELECT ALL * FROM vt1, rt0 WHERE (-353126543) LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE (0Xffffffffeaf3b771);
SELECT ALL * FROM vt1, rt0 WHERE (-353126543) LIMIT 2;
SELECT ALL * FROM rt0 WHERE (((((((((rt0.c0) NOTNULL))OR(((rt0.c1)-(rt0.c0)))))AND(((rt0.c3)AND(rt0.c0)))))AND(((((rt0.c1)AND(rt0.c2)))OR(rt0.c1)))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c0) NOTNULL))OR(((rt0.c1)-(rt0.c0)))))AND(((rt0.c3)AND(rt0.c0)))))AND(((((rt0.c1)AND(rt0.c2)))OR(rt0.c1)))))AND(((((((((((rt0.c2) IS FALSE))AND(((rt0.c0)>>(rt0.c1)))))OR((- (rt0.c0)))))AND((- (rt0.c1)))))AND(((rt0.c0)||(rt0.c2))))))) LIMIT 1;
SELECT ALL * FROM rt0 WHERE (((((((((rt0.c0) NOTNULL))OR(((rt0.c1)-(rt0.c0)))))AND(((rt0.c3)AND(rt0.c0)))))AND(((((rt0.c1)AND(rt0.c2)))OR(rt0.c1)))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c0) NOTNULL))OR(((rt0.c1)-(rt0.c0)))))AND(((rt0.c3)AND(rt0.c0)))))AND(((((rt0.c1)AND(rt0.c2)))OR(rt0.c1)))))AND(((((((((((rt0.c2) IS FALSE))AND(((rt0.c0)>>(rt0.c1)))))OR((- (rt0.c0)))))AND((- (rt0.c1)))))AND(((rt0.c0)||(rt0.c2))))))) LIMIT 1;
SELECT * FROM vt1 WHERE (((('hs', 0.9607073496388701)) NOT BETWEEN ((CASE vt1.c0  WHEN x'' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) AND ((vt1.c0, (+ (vt1.c0)))))) ORDER BY (+ (x''));
SELECT ALL * FROM vt1 WHERE (((((('hs', 0.9607073496388701)) NOT BETWEEN ((CASE vt1.c0  WHEN x'' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) AND ((vt1.c0, (+ (vt1.c0))))))AND((((((((0.9518663784616157 IN (vt1.c0, vt1.c0)))AND(vt1.c0 COLLATE BINARY)))OR(((vt1.c0)IS NOT(vt1.c0)))))AND(vt1.c0))))) ORDER BY (+ (x''));
SELECT * FROM vt1 WHERE (((('hs', 0.9607073496388701)) NOT BETWEEN ((CASE vt1.c0  WHEN x'' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) AND ((vt1.c0, (+ (vt1.c0)))))) ORDER BY (+ (x''));
SELECT ALL * FROM vt1 WHERE (((((('hs', 0.9607073496388701)) NOT BETWEEN ((CASE vt1.c0  WHEN x'' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) AND ((vt1.c0, (+ (vt1.c0))))))AND((((((((0.9518663784616157 IN (vt1.c0, vt1.c0)))AND(vt1.c0 COLLATE BINARY)))OR(((vt1.c0)IS NOT(vt1.c0)))))AND(vt1.c0))))) ORDER BY (+ (x''));
SELECT ALL COUNT(*) FROM vt1 WHERE (((NULL) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND (((vt1.c0)<>(vt1.c0))))) ORDER BY (0.7153513000693227 IN ()), (~ (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)), TOTAL_CHANGES() ASC  NULLS LAST;
SELECT COUNT(*) FROM vt1 NOT INDEXED WHERE (((((NULL) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND (((vt1.c0)<>(vt1.c0)))))AND(((vt1.c0) NOT NULL)))) ORDER BY (0.7153513000693227 IN ()), (~ (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)), TOTAL_CHANGES() ASC  NULLS LAST LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt1 WHERE ((('')+(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (0.7153513000693227 IN ()), (~ (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)), TOTAL_CHANGES() ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1 WHERE ((((vt1.c0)<=(vt1.c0)) IN ())) ORDER BY ((((((vt1.c0)-(vt1.c0)))OR(CAST(vt1.c0 AS BLOB))))AND(vt1.c0)) ASC, (((NOT (vt1.c0)))GLOB(CASE WHEN vt1.c0 THEN vt1.c0 END))  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)=(vt1.c0)) IN ()))AND((((('W-InfinityB') IS FALSE))IS((~ (vt1.c0))))))) ORDER BY ((((((((vt1.c0)<<(vt1.c0)))OR(0.9784363207493714)))AND(((vt1.c0)+(vt1.c0)))))OR(((vt1.c0) NOTNULL))) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL) ORDER BY ((((((((vt1.c0)<<(vt1.c0)))OR(0.9784363207493714)))AND(((vt1.c0)+(vt1.c0)))))OR(((vt1.c0) NOTNULL))) ASC LIMIT 0;
SELECT * FROM vt1 WHERE ((((vt1.c0)<=(vt1.c0)) IN ())) ORDER BY ((((((vt1.c0)-(vt1.c0)))OR(CAST(vt1.c0 AS BLOB))))AND(vt1.c0)) ASC, (((NOT (vt1.c0)))GLOB(CASE WHEN vt1.c0 THEN vt1.c0 END))  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)=(vt1.c0)) IN ()))AND((((('W-InfinityB') IS FALSE))IS((~ (vt1.c0))))))) ORDER BY ((((((((vt1.c0)<<(vt1.c0)))OR(0.9784363207493714)))AND(((vt1.c0)+(vt1.c0)))))OR(((vt1.c0) NOTNULL))) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL) ORDER BY ((((((((vt1.c0)<<(vt1.c0)))OR(0.9784363207493714)))AND(((vt1.c0)+(vt1.c0)))))OR(((vt1.c0) NOTNULL))) ASC LIMIT 0;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0)<(vt1.c0)))IS(((vt1.c0)/(''))))) ORDER BY ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM, ((CAST(vt1.c0 AS NUMERIC)) ISNULL) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE (((((((vt1.c0)<(vt1.c0)))IS(((vt1.c0)/('')))))AND(((((vt1.c0)OR((((vt1.c0, vt1.c0))>((vt1.c0, vt1.c0))))))AND(((vt1.c0)+(x'ad'))))))) ORDER BY ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM, ((CAST(vt1.c0 AS NUMERIC)) ISNULL) DESC INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (((vt1.c0)IS(vt1.c0)) COLLATE NOCASE COLLATE NOCASE) ORDER BY ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM, ((CAST(vt1.c0 AS NUMERIC)) ISNULL) DESC;
SELECT MIN(rt0.c2) FROM rt0 WHERE ((((rt0.c2 COLLATE RTRIM, ((rt0.c2) ISNULL)))>=((rt0.c3 COLLATE NOCASE, (+ (rt0.c0)))))) ORDER BY (((+ (rt0.c2))) NOT NULL), (~ (CAST(rt0.c2 AS NUMERIC))) ASC, ''  NULLS FIRST;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE ((((rt0.c2 COLLATE RTRIM, ((rt0.c2) ISNULL)))>((rt0.c3 COLLATE NOCASE, (+ (rt0.c0)))))) ORDER BY (((+ (rt0.c2))) NOT NULL), (~ (CAST(rt0.c2 AS NUMERIC))) ASC, ''  NULLS FIRST INTERSECT SELECT MIN(rt0.c2) FROM rt0 WHERE (((NULL) BETWEEN (rt0.c2 COLLATE RTRIM) AND ((+ (rt0.c2))))) ORDER BY (((+ (rt0.c2))) NOT NULL), (~ (CAST(rt0.c2 AS NUMERIC))) ASC, ''  NULLS FIRST;
SELECT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c0)>>(rt0.c0))) NOT BETWEEN ((NOT (NULL))) AND (((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0))))) ORDER BY ((((vt1.c0)&(rt0.c0))) NOT NULL)  NULLS FIRST, (((~ (rt0.c3))) BETWEEN (((rt0.c1)<<(rt0.c2))) AND (('対a' IN ())))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((((((rt0.c0)>>(rt0.c0))) NOT BETWEEN ((NOT (NULL))) AND (((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0)))))AND(CAST((((rt0.c3, rt0.c0, rt0.c0))<((rt0.c3, rt0.c2, vt1.c0))) AS REAL)))) ORDER BY ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c0))) BETWEEN (((rt0.c3)+(rt0.c2))) AND (-732813397))  NULLS FIRST, COALESCE(DISTINCT (vt1.c0 IN ()), rt0.c1)  NULLS LAST LIMIT 0X2 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((CAST(rt0.c3 AS TEXT)) IS TRUE)) ORDER BY ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c0))) BETWEEN (((rt0.c3)+(rt0.c2))) AND (-732813397))  NULLS FIRST, COALESCE(DISTINCT (vt1.c0 IN ()), rt0.c1)  NULLS LAST LIMIT 2;
SELECT ALL * FROM rt0, vt1 WHERE (((((((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)))AND(rt0.c0)))>(rt0.c0 COLLATE NOCASE)));
SELECT ALL * FROM rt0, vt1 WHERE (((((((((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)))AND(rt0.c0)))>(rt0.c0 COLLATE NOCASE)))AND((((vt1.c0 IN (vt1.c0, vt1.c0)))<(((rt0.c3)<=(rt0.c2))))))) ORDER BY CAST(((vt1.c0) NOTNULL) AS NUMERIC) ASC, (+ (IFNULL(DISTINCT rt0.c2, '礹VY숯Vs'))) INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (rt0.c2) ORDER BY CAST(((vt1.c0) NOTNULL) AS NUMERIC) ASC, (+ (IFNULL(DISTINCT rt0.c2, '礹VY숯Vs')));
SELECT ALL * FROM rt0, vt1 WHERE (((((((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)))AND(rt0.c0)))>(rt0.c0 COLLATE NOCASE)));
SELECT ALL * FROM rt0, vt1 WHERE (((((((((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)))AND(rt0.c0)))>(rt0.c0 COLLATE NOCASE)))AND((((vt1.c0 IN (vt1.c0, vt1.c0)))<(((rt0.c3)<=(rt0.c2))))))) ORDER BY CAST(((vt1.c0) NOTNULL) AS NUMERIC) ASC, (+ (IFNULL(DISTINCT rt0.c2, '礹VY숯Vs'))) INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (rt0.c2) ORDER BY CAST(((vt1.c0) NOTNULL) AS NUMERIC) ASC, (+ (IFNULL(DISTINCT rt0.c2, '礹VY숯Vs')));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)==(vt1.c0))) ISNULL)) ORDER BY ((vt1.c0) IS FALSE) COLLATE NOCASE DESC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)==(vt1.c0))) ISNULL))AND(vt1.c0))) ORDER BY ((vt1.c0) IS FALSE) COLLATE NOCASE DESC LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN CAST(vt1.c0 AS REAL) THEN ((vt1.c0)||(vt1.c0)) WHEN ((vt1.c0) NOT BETWEEN (x'') AND (vt1.c0)) THEN vt1.c0 END) ORDER BY ((vt1.c0) IS FALSE) COLLATE NOCASE DESC LIMIT 0;
SELECT ALL * FROM rt0 WHERE (CAST(((rt0.c3) ISNULL) AS INTEGER));
SELECT * FROM rt0 WHERE (((CAST(((rt0.c3) ISNULL) AS INTEGER))AND(CAST(CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END AS REAL))));
SELECT ALL * FROM rt0 WHERE (CAST(((rt0.c3) ISNULL) AS INTEGER));
SELECT * FROM rt0 WHERE (((CAST(((rt0.c3) ISNULL) AS INTEGER))AND(CAST(CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END AS REAL))));
SELECT ALL * FROM rt0, vt1 WHERE ((rt0.c2 IN ((NOT (x'85'))))) ORDER BY rt0.c1 COLLATE BINARY ASC;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((rt0.c2 IN ((NOT (x'85'))))) ORDER BY rt0.c1 COLLATE BINARY ASC INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN rt0.c2 COLLATE NOCASE THEN vt1.c0 COLLATE NOCASE WHEN ((rt0.c0)==(rt0.c3)) THEN ((((vt1.c0)AND(7.09578335E8)))OR(vt1.c0)) END) ORDER BY rt0.c1 COLLATE BINARY ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((rt0.c2 IN ((NOT (x'85'))))) ORDER BY rt0.c1 COLLATE BINARY ASC;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((rt0.c2 IN ((NOT (x'85'))))) ORDER BY rt0.c1 COLLATE BINARY ASC INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN rt0.c2 COLLATE NOCASE THEN vt1.c0 COLLATE NOCASE WHEN ((rt0.c0)==(rt0.c3)) THEN ((((vt1.c0)AND(7.09578335E8)))OR(vt1.c0)) END) ORDER BY rt0.c1 COLLATE BINARY ASC;
SELECT ALL * FROM vt1, rt0 WHERE (rt0.c3) ORDER BY ((((((vt1.c0 COLLATE RTRIM)OR(rt0.c2)))AND(((rt0.c0)==(rt0.c1)))))OR(NULL)), (+ (((x'60')-(rt0.c1)))) DESC, '+dA+' ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c3) ORDER BY ((((((vt1.c0 COLLATE RTRIM)OR(rt0.c2)))AND(((rt0.c0)==(rt0.c1)))))OR(NULL)), (+ (((x'60')-(rt0.c1)))) DESC, '+dA+' ASC LIMIT 4;
SELECT ALL * FROM vt1, rt0 WHERE (rt0.c3) ORDER BY ((((((vt1.c0 COLLATE RTRIM)OR(rt0.c2)))AND(((rt0.c0)==(rt0.c1)))))OR(NULL)), (+ (((x'60')-(rt0.c1)))) DESC, '+dA+' ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c3) ORDER BY ((((((vt1.c0 COLLATE RTRIM)OR(rt0.c2)))AND(((rt0.c0)==(rt0.c1)))))OR(NULL)), (+ (((x'60')-(rt0.c1)))) DESC, '+dA+' ASC LIMIT 4;
SELECT ALL MAX(rt0.c1) FROM vt1 LEFT OUTER JOIN rt0 ON (rt0.c2 COLLATE BINARY IN (CASE WHEN rt0.c1 THEN NULL WHEN rt0.c0 THEN rt0.c2 END)) WHERE (((((rt0.c2) IS TRUE))!=((+ (rt0.c0))))) ORDER BY UPPER(DISTINCT SQLITE_SOURCE_ID()) ASC  NULLS LAST, json_valid((~ (vt1.c0)));
SELECT DISTINCT MAX(rt0.c1) FROM vt1 LEFT OUTER JOIN rt0 ON (rt0.c2 COLLATE BINARY IN (CASE WHEN rt0.c1 THEN NULL WHEN rt0.c0 THEN rt0.c2 END)) WHERE (((((rt0.c2) IS TRUE))>((+ (rt0.c0))))) ORDER BY UPPER(DISTINCT SQLITE_SOURCE_ID()) ASC  NULLS LAST, json_valid((~ (vt1.c0))) LIMIT 2;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (((((((UPPER(DISTINCT rt0.c2))AND(((rt0.c1)<>(rt0.c2)))))OR(((vt1.c0) NOT NULL))))OR((vt1.c0 IN ())))) ORDER BY CAST(rt0.c1 AS BLOB) COLLATE RTRIM DESC, '0.46812638111186833' DESC;
SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (((((((UPPER(DISTINCT rt0.c2))AND(((rt0.c1)>(rt0.c2)))))OR(((vt1.c0) NOT NULL))))OR((vt1.c0 IN ())))) ORDER BY ((((((((((rt0.c2 COLLATE NOCASE)OR(((rt0.c1) NOT BETWEEN (rt0.c0) AND (vt1.c0)))))OR(CAST(rt0.c3 AS INTEGER))))OR(rt0.c3)))AND((((rt0.c0, rt0.c2)) BETWEEN ((rt0.c0, rt0.c0)) AND ((vt1.c0, rt0.c1))))))OR(0.44055376076628094)), (((vt1.c0 IN (rt0.c3)))|(((vt1.c0)*(rt0.c1))))  NULLS FIRST, ((rt0.c2 COLLATE NOCASE)<(((rt0.c1) NOTNULL))) DESC, (((((rt0.c1)IS NOT(vt1.c0))))<((((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (((((((((rt0.c3)!=(rt0.c2)))OR(((vt1.c0)>>(rt0.c3)))))AND(NULL)))OR((NOT (rt0.c2))))) ORDER BY ((((((((((rt0.c2 COLLATE NOCASE)OR(((rt0.c1) NOT BETWEEN (rt0.c0) AND (vt1.c0)))))OR(CAST(rt0.c3 AS INTEGER))))OR(rt0.c3)))AND((((rt0.c0, rt0.c2)) BETWEEN ((rt0.c0, rt0.c0)) AND ((vt1.c0, rt0.c1))))))OR(0.44055376076628094)), (((vt1.c0 IN (rt0.c3)))|(((vt1.c0)*(rt0.c1))))  NULLS FIRST, ((rt0.c2 COLLATE NOCASE)<(((rt0.c1) NOTNULL))) DESC, (((((rt0.c1)IS NOT(vt1.c0))))<((((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)))))  NULLS LAST LIMIT 1;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c2 IN (rt0.c3, vt1.c0, rt0.c3)))IS NOT(426117718 COLLATE NOCASE))) ORDER BY (((- (rt0.c1)))|(json_patch(rt0.c1, rt0.c2))) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c2 IN (rt0.c3)))IS NOT(426117718 COLLATE NOCASE))) ORDER BY (((- (rt0.c1)))|(json_patch(rt0.c1, rt0.c2))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt1, rt0 WHERE (((CAST(rt0.c0 AS TEXT))%(CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN NULL WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN '0.544233763561105' THEN rt0.c1 END))) ORDER BY (((- (rt0.c1)))|(json_patch(rt0.c1, rt0.c2))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c2 IN (rt0.c3, vt1.c0, rt0.c3)))IS NOT(426117718 COLLATE NOCASE))) ORDER BY (((- (rt0.c1)))|(json_patch(rt0.c1, rt0.c2))) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c2 IN (rt0.c3)))IS NOT(426117718 COLLATE NOCASE))) ORDER BY (((- (rt0.c1)))|(json_patch(rt0.c1, rt0.c2))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt1, rt0 WHERE (((CAST(rt0.c0 AS TEXT))%(CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN NULL WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN '0.544233763561105' THEN rt0.c1 END))) ORDER BY (((- (rt0.c1)))|(json_patch(rt0.c1, rt0.c2))) ASC  NULLS LAST LIMIT 0;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE ((((- (rt0.c1))) NOT NULL));
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE ((((- (rt0.c1))) NOT NULL)) LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (LIKELIHOOD(rt0.c2, rt0.c3) COLLATE RTRIM) LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt1 WHERE (NULL);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((NULL)AND((+ (CAST(vt1.c0 AS TEXT)))))) ORDER BY vt1.c0 COLLATE RTRIM  NULLS LAST, NULL  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((vt1.c0)GLOB(vt1.c0)))-(DATETIME(vt1.c0, vt1.c0, vt1.c0, vt1.c0)))) ORDER BY vt1.c0 COLLATE RTRIM  NULLS LAST, NULL  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) ISNULL)) ORDER BY ((CASE WHEN vt1.c0 THEN '' END)<(load_extension(vt1.c0)));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0 COLLATE NOCASE) ISNULL))AND(x''))) ORDER BY ((CASE WHEN vt1.c0 THEN '' END)<(load_extension(vt1.c0))) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN ((vt1.c0) NOTNULL) THEN vt1.c0 COLLATE BINARY ELSE ((vt1.c0)*(vt1.c0)) END) ORDER BY ((CASE WHEN vt1.c0 THEN '' END)<(load_extension(vt1.c0)));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))&((vt1.c0 IN ()))));
SELECT * FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))&((vt1.c0 IN ()))))AND(((((vt1.c0)<<(vt1.c0)))<(((vt1.c0) IS TRUE)))))) LIMIT 0 INTERSECT SELECT * FROM vt1 WHERE (DATETIME(0.3830453520030095, vt1.c0 COLLATE NOCASE, TRIM(vt1.c0, vt1.c0))) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))&((vt1.c0 IN ()))));
SELECT * FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))&((vt1.c0 IN ()))))AND(((((vt1.c0)<<(vt1.c0)))<(((vt1.c0) IS TRUE)))))) LIMIT 0 INTERSECT SELECT * FROM vt1 WHERE (DATETIME(0.3830453520030095, vt1.c0 COLLATE NOCASE, TRIM(vt1.c0, vt1.c0))) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS NUMERIC));
SELECT * FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS NUMERIC)) ORDER BY ((ABS(-379422826))%(vt1.c0 COLLATE BINARY)) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS NUMERIC));
SELECT * FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS NUMERIC)) ORDER BY ((ABS(-379422826))%(vt1.c0 COLLATE BINARY)) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((- (((0.47544679518541666) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((- (((0.47544679518541666) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (+ ((NOT (vt1.c0)))) ASC, CAST('' AS NUMERIC) DESC  NULLS LAST, 0.12794404513750668 ASC, NULL ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0)))AND(CAST(vt1.c0 AS BLOB))))OR((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, 0.5592552979202217)) AND ((vt1.c0, vt1.c0)))))) ORDER BY (+ ((NOT (vt1.c0)))) ASC, CAST('' AS NUMERIC) DESC  NULLS LAST, 0.12794404513750668 ASC, NULL ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((- (((0.47544679518541666) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((- (((0.47544679518541666) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (+ ((NOT (vt1.c0)))) ASC, CAST('' AS NUMERIC) DESC  NULLS LAST, 0.12794404513750668 ASC, NULL ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0)))AND(CAST(vt1.c0 AS BLOB))))OR((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, 0.5592552979202217)) AND ((vt1.c0, vt1.c0)))))) ORDER BY (+ ((NOT (vt1.c0)))) ASC, CAST('' AS NUMERIC) DESC  NULLS LAST, 0.12794404513750668 ASC, NULL ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE ((((rt0.c1, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c2 COLLATE NOCASE, ((rt0.c1)*(rt0.c0)), ((((((0.4636220470083813)AND(rt0.c1)))OR(rt0.c3)))AND(1.508769651E9)))) AND (((rt0.c1 IN ()), rt0.c0, ((rt0.c3)+(rt0.c2))))));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c1, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c2 COLLATE NOCASE, ((rt0.c1)*(rt0.c0)), ((((((0.4636220470083813)AND(rt0.c1)))OR(rt0.c3)))AND(1.508769651E9)))) AND (((rt0.c1 IN ()), rt0.c0, ((rt0.c3)+(rt0.c2))))))AND(((((((rt0.c1) NOT NULL))AND(CAST(rt0.c0 AS INTEGER))))OR(CAST(rt0.c3 AS BLOB)))))) ORDER BY (((((NOT (rt0.c3)))OR(CAST(rt0.c2 AS NUMERIC))))AND('0.7267813554985081')) DESC  NULLS FIRST, (((rt0.c1, rt0.c2)) NOT BETWEEN ((((0.7153513000693227)IS(rt0.c2)), (((((('umonthsa')AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)))) AND ((((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c2)), (+ (rt0.c1)))))  NULLS LAST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST(rt0.c2 COLLATE BINARY AS NUMERIC)) ORDER BY (((((NOT (rt0.c3)))OR(CAST(rt0.c2 AS NUMERIC))))AND('0.7267813554985081')) DESC  NULLS FIRST, (((rt0.c1, rt0.c2)) NOT BETWEEN ((((0.7153513000693227)IS(rt0.c2)), (((((('umonthsa')AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)))) AND ((((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c2)), (+ (rt0.c1)))))  NULLS LAST LIMIT 0x3;
SELECT * FROM rt0 WHERE ((((rt0.c1, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c2 COLLATE NOCASE, ((rt0.c1)*(rt0.c0)), ((((((0.4636220470083813)AND(rt0.c1)))OR(rt0.c3)))AND(1.508769651E9)))) AND (((rt0.c1 IN ()), rt0.c0, ((rt0.c3)+(rt0.c2))))));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c1, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c2 COLLATE NOCASE, ((rt0.c1)*(rt0.c0)), ((((((0.4636220470083813)AND(rt0.c1)))OR(rt0.c3)))AND(1.508769651E9)))) AND (((rt0.c1 IN ()), rt0.c0, ((rt0.c3)+(rt0.c2))))))AND(((((((rt0.c1) NOT NULL))AND(CAST(rt0.c0 AS INTEGER))))OR(CAST(rt0.c3 AS BLOB)))))) ORDER BY (((((NOT (rt0.c3)))OR(CAST(rt0.c2 AS NUMERIC))))AND('0.7267813554985081')) DESC  NULLS FIRST, (((rt0.c1, rt0.c2)) NOT BETWEEN ((((0.7153513000693227)IS(rt0.c2)), (((((('umonthsa')AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)))) AND ((((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c2)), (+ (rt0.c1)))))  NULLS LAST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST(rt0.c2 COLLATE BINARY AS NUMERIC)) ORDER BY (((((NOT (rt0.c3)))OR(CAST(rt0.c2 AS NUMERIC))))AND('0.7267813554985081')) DESC  NULLS FIRST, (((rt0.c1, rt0.c2)) NOT BETWEEN ((((0.7153513000693227)IS(rt0.c2)), (((((('umonthsa')AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)))) AND ((((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c2)), (+ (rt0.c1)))))  NULLS LAST LIMIT 0x3;
SELECT MAX(rt0.c0) FROM rt0 WHERE (((rt0.c0)+(rt0.c1)) COLLATE BINARY);
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (((((rt0.c0)+(rt0.c1)) COLLATE BINARY)AND((((('㖯7EJrC龗') NOT NULL)) NOT BETWEEN (((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) AND ((((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c2)))))))) LIMIT 0 INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE ((rt0.c3 IN ())) LIMIT 0x0;
SELECT * FROM vt1 WHERE (CAST(((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) AS TEXT)) ORDER BY ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 END) AND (-722615761)), ((((vt1.c0)||(vt1.c0)))+(((vt1.c0) NOT NULL))) ASC;
SELECT DISTINCT * FROM vt1 WHERE (CAST(((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) AS TEXT)) ORDER BY ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 END) AND (-722615761)), ((((vt1.c0)||(vt1.c0)))+(((vt1.c0) NOT NULL))) ASC;
SELECT * FROM vt1 WHERE (CAST(((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) AS TEXT)) ORDER BY ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 END) AND (-722615761)), ((((vt1.c0)||(vt1.c0)))+(((vt1.c0) NOT NULL))) ASC;
SELECT DISTINCT * FROM vt1 WHERE (CAST(((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) AS TEXT)) ORDER BY ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 END) AND (-722615761)), ((((vt1.c0)||(vt1.c0)))+(((vt1.c0) NOT NULL))) ASC;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((+ (((0.6552312870348684) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))<((8.30243475E8)));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((+ (((0.6552312870348684) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(x'2e'))) ORDER BY (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))<((8.30243475E8)));
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN x'c6' THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN 'FX' THEN rt0.c3 END) NOT BETWEEN ((((rt0.c1, rt0.c0, -9.7448687E7))<=((vt1.c0, rt0.c3, NULL)))) AND (TRIM(DISTINCT rt0.c1))));
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN x'c6' THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN 'FX' THEN rt0.c3 END) NOT BETWEEN ((((rt0.c1, rt0.c0, -9.7448687E7))<=((vt1.c0, rt0.c3, NULL)))) AND (TRIM(DISTINCT rt0.c1))))AND(CAST(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)) AS BLOB)))) ORDER BY (rt0.c3 IN ((rt0.c1 IN ()))), 0.8895009993640729 COLLATE RTRIM INTERSECT SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c0))=((rt0.c3)))) ISNULL)) ORDER BY (rt0.c3 IN ((rt0.c1 IN ()))), 0.8895009993640729 COLLATE RTRIM;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN x'c6' THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN 'FX' THEN rt0.c3 END) NOT BETWEEN ((((rt0.c1, rt0.c0, -9.7448687E7))<=((vt1.c0, rt0.c3, NULL)))) AND (TRIM(DISTINCT rt0.c1))));
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN x'c6' THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN 'FX' THEN rt0.c3 END) NOT BETWEEN ((((rt0.c1, rt0.c0, -9.7448687E7))<=((vt1.c0, rt0.c3, NULL)))) AND (TRIM(DISTINCT rt0.c1))))AND(CAST(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)) AS BLOB)))) ORDER BY (rt0.c3 IN ((rt0.c1 IN ()))), 0.8895009993640729 COLLATE RTRIM INTERSECT SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c0))=((rt0.c3)))) ISNULL)) ORDER BY (rt0.c3 IN ((rt0.c1 IN ()))), 0.8895009993640729 COLLATE RTRIM;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)) BETWEEN (('-1955672256')) AND ((vt1.c0))), ((vt1.c0) NOT BETWEEN ('/0~g') AND (NULL))))>((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)), ((vt1.c0) IS TRUE)))));
SELECT * FROM vt1 WHERE (((((((((vt1.c0)) BETWEEN (('-1955672256')) AND ((vt1.c0))), ((vt1.c0) NOT BETWEEN ('/0~g') AND (NULL))))>((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)), ((vt1.c0) IS TRUE)))))AND((((((vt1.c0, vt1.c0, vt1.c0))>((0.5465196597386172, vt1.c0, vt1.c0))))-((+ (vt1.c0))))))) ORDER BY CASE x''  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE RTRIM ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)) BETWEEN (('-1955672256')) AND ((vt1.c0))), ((vt1.c0) NOT BETWEEN ('/0~g') AND (NULL))))>((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)), ((vt1.c0) IS TRUE)))));
SELECT * FROM vt1 WHERE (((((((((vt1.c0)) BETWEEN (('-1955672256')) AND ((vt1.c0))), ((vt1.c0) NOT BETWEEN ('/0~g') AND (NULL))))>((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)), ((vt1.c0) IS TRUE)))))AND((((((vt1.c0, vt1.c0, vt1.c0))>((0.5465196597386172, vt1.c0, vt1.c0))))-((+ (vt1.c0))))))) ORDER BY CASE x''  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE RTRIM ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((+ ((vt1.c0 IN ()))));
SELECT DISTINCT * FROM vt1 WHERE ((+ ((vt1.c0 IN ())))) ORDER BY NULL ASC;
SELECT ALL * FROM vt1 WHERE ((+ ((vt1.c0 IN ()))));
SELECT DISTINCT * FROM vt1 WHERE ((+ ((vt1.c0 IN ())))) ORDER BY NULL ASC;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))<=(highlight(vt1.c0, vt1.c0, vt1.c0, vt1.c0)))) ORDER BY (((0.20155901645647345, HEX(vt1.c0)))>((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0.22958343493802713 END, (((vt1.c0, vt1.c0)) NOT BETWEEN ((NULL, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) DESC;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))<(highlight(vt1.c0, vt1.c0, vt1.c0, vt1.c0)))) ORDER BY ((((((vt1.c0)OR('-1834146775')))AND(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE ASC  NULLS LAST, (((vt1.c0)-(vt1.c0)) IN (vt1.c0 COLLATE RTRIM, ((vt1.c0)&(vt1.c0)), vt1.c0 COLLATE RTRIM)) ASC LIMIT 3 INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (((((vt1.c0)==(vt1.c0))) NOT BETWEEN (vt1.c0 COLLATE NOCASE) AND (CAST(1.508769651E9 AS INTEGER)))) ORDER BY ((((((vt1.c0)OR('-1834146775')))AND(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE ASC  NULLS LAST, (((vt1.c0)-(vt1.c0)) IN (vt1.c0 COLLATE RTRIM, ((vt1.c0)&(vt1.c0)), vt1.c0 COLLATE RTRIM)) ASC LIMIT 3;
SELECT ALL COUNT(*) FROM vt1 WHERE (CAST(((vt1.c0) NOT NULL) AS INTEGER));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((CAST(((vt1.c0) NOT NULL) AS INTEGER))AND((((((vt1.c0)OR(vt1.c0)), ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))))<((TRIM(DISTINCT vt1.c0, vt1.c0), (('襭') BETWEEN (vt1.c0) AND (vt1.c0)))))))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CASE WHEN ((vt1.c0) NOT NULL) THEN CASE WHEN vt1.c0 THEN vt1.c0 END WHEN UNLIKELY(vt1.c0) THEN (NOT (vt1.c0)) ELSE ((0.9918359539233562)/(vt1.c0)) END);
SELECT ALL COUNT(*) FROM rt0 WHERE (rt0.c3);
SELECT COUNT(*) FROM rt0 WHERE (((rt0.c3)AND((UNLIKELY(DISTINCT rt0.c2) IN (CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN NULL WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c1 END))))) LIMIT 0 INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE ((('N')AND(CAST(rt0.c0 AS NUMERIC)))) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (CASE WHEN NULL THEN (- (vt1.c0)) WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 COLLATE NOCASE THEN ((vt1.c0)<=(vt1.c0)) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN NULL THEN (- (vt1.c0)) WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 COLLATE NOCASE THEN ((vt1.c0)<=(vt1.c0)) END) ORDER BY ((vt1.c0 COLLATE NOCASE) NOTNULL)  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (CASE WHEN NULL THEN (- (vt1.c0)) WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 COLLATE NOCASE THEN ((vt1.c0)<=(vt1.c0)) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN NULL THEN (- (vt1.c0)) WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 COLLATE NOCASE THEN ((vt1.c0)<=(vt1.c0)) END) ORDER BY ((vt1.c0 COLLATE NOCASE) NOTNULL)  NULLS LAST;
SELECT * FROM rt0 WHERE (((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 END)<<(((rt0.c3) IS FALSE))));
SELECT DISTINCT * FROM rt0 WHERE (((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 END)<<(((rt0.c3) IS FALSE)))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (MIN((rt0.c0 IN (rt0.c3)), CAST(rt0.c2 AS NUMERIC), ((rt0.c1)>(rt0.c0)), CAST(rt0.c2 AS TEXT)));
SELECT * FROM rt0 WHERE (((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 END)<<(((rt0.c3) IS FALSE))));
SELECT DISTINCT * FROM rt0 WHERE (((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 END)<<(((rt0.c3) IS FALSE)))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (MIN((rt0.c0 IN (rt0.c3)), CAST(rt0.c2 AS NUMERIC), ((rt0.c1)>(rt0.c0)), CAST(rt0.c2 AS TEXT)));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((((((rt0.c3)OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c1))) BETWEEN (((rt0.c3) IS FALSE)) AND (rt0.c1 COLLATE BINARY)));
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((((((rt0.c3)OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c1))) BETWEEN (((rt0.c3) IS FALSE)) AND (rt0.c1 COLLATE BINARY))) ORDER BY CASE ((rt0.c1) BETWEEN (rt0.c2) AND (vt1.c0))  WHEN (NOT (rt0.c1)) THEN (((rt0.c0, rt0.c0, rt0.c1))<((vt1.c0, rt0.c1, rt0.c0))) WHEN json_valid(NULL) THEN (- (rt0.c1)) WHEN CAST(rt0.c2 AS TEXT) THEN rt0.c0 COLLATE BINARY END DESC LIMIT 1;
SELECT * FROM vt1 CROSS JOIN rt0 ON '>7e' WHERE (CASE RTRIM(rt0.c0)  WHEN (vt1.c0 IN (vt1.c0)) THEN rt0.c1 WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c1 END THEN ((vt1.c0) IS FALSE) ELSE NULL END) ORDER BY (((rt0.c1, vt1.c0)) NOT BETWEEN ((CAST(rt0.c3 AS TEXT), ((rt0.c3)IS(rt0.c1)))) AND ((0.3347139097428101, x'')))  NULLS LAST, ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3))) NOT BETWEEN (((rt0.c2) ISNULL)) AND (((rt0.c3) IS TRUE)))  NULLS LAST;
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON '>7e' WHERE (((CASE RTRIM(rt0.c0)  WHEN (vt1.c0 IN (vt1.c0)) THEN rt0.c1 WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c1 END THEN ((vt1.c0) IS FALSE) ELSE NULL END)AND(CASE (vt1.c0 IN (x'e8'))  WHEN ((rt0.c3)|(rt0.c1)) THEN CAST('N' AS REAL) ELSE ((rt0.c0) BETWEEN (NULL) AND (rt0.c0)) END))) ORDER BY ((rt0.c0) IS TRUE) COLLATE RTRIM, rt0.c2  NULLS FIRST LIMIT 0x2;
SELECT * FROM vt1 CROSS JOIN rt0 ON '>7e' WHERE (CASE RTRIM(rt0.c0)  WHEN (vt1.c0 IN (vt1.c0)) THEN rt0.c1 WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c1 END THEN ((vt1.c0) IS FALSE) ELSE NULL END) ORDER BY (((rt0.c1, vt1.c0)) NOT BETWEEN ((CAST(rt0.c3 AS TEXT), ((rt0.c3)IS(rt0.c1)))) AND ((0.3347139097428101, x'')))  NULLS LAST, ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3))) NOT BETWEEN (((rt0.c2) ISNULL)) AND (((rt0.c3) IS TRUE)))  NULLS LAST;
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON '>7e' WHERE (((CASE RTRIM(rt0.c0)  WHEN (vt1.c0 IN (vt1.c0)) THEN rt0.c1 WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c1 END THEN ((vt1.c0) IS FALSE) ELSE NULL END)AND(CASE (vt1.c0 IN (x'e8'))  WHEN ((rt0.c3)|(rt0.c1)) THEN CAST('N' AS REAL) ELSE ((rt0.c0) BETWEEN (NULL) AND (rt0.c0)) END))) ORDER BY ((rt0.c0) IS TRUE) COLLATE RTRIM, rt0.c2  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM vt1 WHERE (NULL);
SELECT DISTINCT * FROM vt1 WHERE (((NULL)AND((+ (vt1.c0)) COLLATE NOCASE))) ORDER BY (((vt1.c0 IN (vt1.c0, vt1.c0)))>=(((x'') NOT BETWEEN (vt1.c0) AND (vt1.c0)))), (((vt1.c0 IN ())) NOT NULL) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1 WHERE (NULL);
SELECT DISTINCT * FROM vt1 WHERE (((NULL)AND((+ (vt1.c0)) COLLATE NOCASE))) ORDER BY (((vt1.c0 IN (vt1.c0, vt1.c0)))>=(((x'') NOT BETWEEN (vt1.c0) AND (vt1.c0)))), (((vt1.c0 IN ())) NOT NULL) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM rt0 WHERE ((((~ (rt0.c0)))>>(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 END)));
SELECT * FROM rt0 WHERE ((((~ (rt0.c0)))>>(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 END))) INTERSECT SELECT * FROM rt0 WHERE ((((- (rt0.c1)))%(((rt0.c1)GLOB(rt0.c1)))));
SELECT ALL * FROM rt0 WHERE ((((~ (rt0.c0)))>>(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 END)));
SELECT * FROM rt0 WHERE ((((~ (rt0.c0)))>>(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 END))) INTERSECT SELECT * FROM rt0 WHERE ((((- (rt0.c1)))%(((rt0.c1)GLOB(rt0.c1)))));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((rt0.c0)>>(rt0.c1))) NOT BETWEEN (((rt0.c2) IS TRUE)) AND (SQLITE_COMPILEOPTION_GET(rt0.c2))) WHERE (((HEX(DISTINCT -924501417))<>(CAST(223131609 AS INTEGER)))) ORDER BY CASE WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 END COLLATE RTRIM DESC;
SELECT * FROM vt1 CROSS JOIN rt0 ON ((((rt0.c0)>>(rt0.c1))) NOT BETWEEN (((rt0.c2) IS TRUE)) AND (SQLITE_COMPILEOPTION_GET(rt0.c2))) WHERE (((((HEX(DISTINCT -924501417))>(CAST(223131609 AS INTEGER))))AND(((((((rt0.c1)OR(rt0.c3)))OR('')))*(CASE WHEN rt0.c3 THEN rt0.c2 ELSE vt1.c0 END))))) ORDER BY rt0.c0 INTERSECT SELECT * FROM vt1 CROSS JOIN rt0 ON ((((rt0.c0)>>(rt0.c1))) NOT BETWEEN (((rt0.c2) IS TRUE)) AND (SQLITE_COMPILEOPTION_GET(rt0.c2))) WHERE (((((((((((rt0.c1)AND(rt0.c0)))AND(rt0.c3)))OR(0.8709225950019939)))AND(rt0.c3))) ISNULL)) ORDER BY rt0.c0;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((rt0.c0)>>(rt0.c1))) NOT BETWEEN (((rt0.c2) IS TRUE)) AND (SQLITE_COMPILEOPTION_GET(rt0.c2))) WHERE (((HEX(DISTINCT -924501417))<>(CAST(223131609 AS INTEGER)))) ORDER BY CASE WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 END COLLATE RTRIM DESC;
SELECT * FROM vt1 CROSS JOIN rt0 ON ((((rt0.c0)>>(rt0.c1))) NOT BETWEEN (((rt0.c2) IS TRUE)) AND (SQLITE_COMPILEOPTION_GET(rt0.c2))) WHERE (((((HEX(DISTINCT -924501417))>(CAST(223131609 AS INTEGER))))AND(((((((rt0.c1)OR(rt0.c3)))OR('')))*(CASE WHEN rt0.c3 THEN rt0.c2 ELSE vt1.c0 END))))) ORDER BY rt0.c0 INTERSECT SELECT * FROM vt1 CROSS JOIN rt0 ON ((((rt0.c0)>>(rt0.c1))) NOT BETWEEN (((rt0.c2) IS TRUE)) AND (SQLITE_COMPILEOPTION_GET(rt0.c2))) WHERE (((((((((((rt0.c1)AND(rt0.c0)))AND(rt0.c3)))OR(0.8709225950019939)))AND(rt0.c3))) ISNULL)) ORDER BY rt0.c0;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)) IN (((rt0.c0) IS TRUE))));
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)) IN (((rt0.c0) IS TRUE))))AND((((rt0.c1)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1))) COLLATE BINARY))) INTERSECT SELECT * FROM vt1, rt0 WHERE (vt1.c0);
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)) IN (((rt0.c0) IS TRUE))));
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)) IN (((rt0.c0) IS TRUE))))AND((((rt0.c1)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1))) COLLATE BINARY))) INTERSECT SELECT * FROM vt1, rt0 WHERE (vt1.c0);
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (CAST(((((((rt0.c2)AND(rt0.c1)))OR(rt0.c3)))OR(NULL)) AS NUMERIC));
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE (CAST(((((((rt0.c2)AND(rt0.c1)))OR(rt0.c3)))OR(NULL)) AS NUMERIC)) LIMIT 0x0;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (rt0.c0) ORDER BY CAST((+ (rt0.c1)) AS REAL) DESC  NULLS LAST, (NULLIF(rt0.c2, rt0.c3) IN (CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 END));
SELECT DISTINCT MIN(rt0.c3) FROM rt0 WHERE (rt0.c0) ORDER BY CAST((+ (rt0.c1)) AS REAL) DESC  NULLS LAST, (NULLIF(rt0.c2, rt0.c3) IN (CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 END)) LIMIT 0x0;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (((((rt0.c3) NOT NULL)) BETWEEN (CAST(rt0.c3 AS TEXT)) AND ((vt1.c0 IN (rt0.c2, rt0.c0)))));
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (((((rt0.c3) NOT NULL)) BETWEEN (CAST(rt0.c3 AS TEXT)) AND ((vt1.c0 IN (rt0.c2))))) ORDER BY ((CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 END)>(((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c3)))) LIMIT 0X0 INTERSECT SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (((rt0.c1)/(rt0.c3)) COLLATE NOCASE) ORDER BY ((CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 END)>(((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c3)))) LIMIT 0;
SELECT MIN(rt0.c0) FROM vt1 CROSS JOIN rt0 ON ((((rt0.c3)>(rt0.c0))) NOT BETWEEN (((rt0.c3)GLOB(rt0.c1))) AND (CAST(rt0.c0 AS TEXT))) WHERE ((((((rt0.c3))>((rt0.c0)))) NOT NULL));
SELECT DISTINCT MIN(rt0.c0) FROM vt1 CROSS JOIN rt0 ON ((((rt0.c3)>(rt0.c0))) NOT BETWEEN (((rt0.c3)GLOB(rt0.c1))) AND (CAST(rt0.c0 AS TEXT))) WHERE ((((((rt0.c3))>((rt0.c0)))) NOT NULL));
SELECT COUNT(*) FROM rt0, vt1 WHERE (((((((((rt0.c2) ISNULL))OR(((((((((((((((rt0.c2)OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)))OR(vt1.c0)))OR(rt0.c0)))))OR(CAST(rt0.c3 AS INTEGER))))OR(0x4d74119c))) ORDER BY ((~ (0.4162970666403598)) IN ((((vt1.c0, NULL)) NOT BETWEEN ((vt1.c0, rt0.c2)) AND ((rt0.c2, rt0.c1))))) DESC, (((rt0.c0 IN ()))+(((rt0.c3) IS FALSE)));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((((((((rt0.c2) ISNULL))OR(((((((((((((((rt0.c2)OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)))OR(vt1.c0)))OR(rt0.c0)))))OR(CAST(rt0.c3 AS INTEGER))))OR(0X4d74119c)))AND(((((rt0.c1) IS FALSE)) BETWEEN (((x'04a31468') NOTNULL)) AND ((vt1.c0 IN ())))))) ORDER BY CAST(((vt1.c0) IS TRUE) AS TEXT) ASC  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c2 IN (rt0.c0))) IS FALSE)) ORDER BY CAST(((vt1.c0) IS TRUE) AS TEXT) ASC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((x'c9') BETWEEN (-695584596) AND (vt1.c0)) COLLATE RTRIM);
SELECT * FROM rt0, vt1 WHERE (((((x'c9') BETWEEN (-695584596) AND (vt1.c0)) COLLATE RTRIM)AND((UNLIKELY(vt1.c0) IN ())))) ORDER BY ((ABS(DISTINCT rt0.c3)) ISNULL)  NULLS FIRST, ((~ (x'')) IN (rt0.c3))  NULLS FIRST, (((((vt1.c0)GLOB(rt0.c2))))<((CAST(rt0.c1 AS INTEGER)))) ASC LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE (((x'c9') BETWEEN (-695584596) AND (vt1.c0)) COLLATE RTRIM);
SELECT * FROM rt0, vt1 WHERE (((((x'c9') BETWEEN (-695584596) AND (vt1.c0)) COLLATE RTRIM)AND((UNLIKELY(vt1.c0) IN ())))) ORDER BY ((ABS(DISTINCT rt0.c3)) ISNULL)  NULLS FIRST, ((~ (x'')) IN (rt0.c3))  NULLS FIRST, (((((vt1.c0)GLOB(rt0.c2))))<((CAST(rt0.c1 AS INTEGER)))) ASC LIMIT 0x0;
SELECT * FROM rt0 WHERE (rt0.c3) ORDER BY (((rt0.c0)) NOT BETWEEN (((+ (rt0.c0)))) AND ((rt0.c1 COLLATE BINARY))) ASC  NULLS FIRST, 0.8620100687232414 ASC;
SELECT ALL * FROM rt0 WHERE (((rt0.c3)AND((((NOT (rt0.c3))) NOT BETWEEN (((((((rt0.c2)AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c2))) AND ((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3)))))))) ORDER BY (((rt0.c0)) NOT BETWEEN (((+ (rt0.c0)))) AND ((rt0.c1 COLLATE BINARY))) ASC  NULLS FIRST, 0.8620100687232414 ASC;
SELECT * FROM rt0 WHERE (rt0.c3) ORDER BY (((rt0.c0)) NOT BETWEEN (((+ (rt0.c0)))) AND ((rt0.c1 COLLATE BINARY))) ASC  NULLS FIRST, 0.8620100687232414 ASC;
SELECT ALL * FROM rt0 WHERE (((rt0.c3)AND((((NOT (rt0.c3))) NOT BETWEEN (((((((rt0.c2)AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c2))) AND ((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3)))))))) ORDER BY (((rt0.c0)) NOT BETWEEN (((+ (rt0.c0)))) AND ((rt0.c1 COLLATE BINARY))) ASC  NULLS FIRST, 0.8620100687232414 ASC;
SELECT ALL MIN(rt0.c1) FROM vt1 NATURAL JOIN rt0 WHERE ((((((((((0x59a700df, rt0.c1, rt0.c2)) BETWEEN ((NULL, rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c3, rt0.c2))))OR(rt0.c3 COLLATE NOCASE)))OR(NULL)))AND(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)))));
SELECT DISTINCT MIN(rt0.c1) FROM vt1 NATURAL JOIN rt0 WHERE ((((((((((((0X59a700df, rt0.c1, rt0.c2)) BETWEEN ((NULL, rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c3, rt0.c2))))OR(rt0.c3 COLLATE NOCASE)))OR(NULL)))AND(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)))))AND((~ (rt0.c1))))) LIMIT 0X2 INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM vt1 NATURAL JOIN rt0 WHERE (TYPEOF(DISTINCT vt1.c0)) LIMIT 0x2;
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE ((- ((((rt0.c2))<=((rt0.c1))))));
SELECT MIN(rt0.c1) FROM rt0 WHERE ((- ((((rt0.c2))<=((rt0.c1)))))) ORDER BY (((rt0.c2 IN (rt0.c2, rt0.c0, rt0.c1)))%(((((((rt0.c0)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c2)))) DESC  NULLS FIRST, (~ ((rt0.c2 IN (rt0.c2, rt0.c1))))  NULLS FIRST, 1.66329961E9 ASC  NULLS FIRST;
SELECT ALL MIN(rt0.c3) FROM vt1 INNER JOIN rt0 ON CAST(vt1.c0 COLLATE NOCASE AS NUMERIC) WHERE (CASE WHEN (((vt1.c0, rt0.c1)) BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c2, NULL))) THEN ((x'be5e')>>(rt0.c1)) WHEN ((((((((rt0.c1)OR(x'01')))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)) THEN rt0.c0 COLLATE RTRIM ELSE rt0.c0 COLLATE NOCASE END) ORDER BY CAST(((((((((vt1.c0)AND(x'')))AND(rt0.c0)))AND(rt0.c0)))AND(rt0.c0)) AS NUMERIC)  NULLS FIRST, ((CAST(rt0.c1 AS TEXT)) IS FALSE) DESC  NULLS LAST, (((rt0.c2 IN (vt1.c0, rt0.c2, '-262715540'))) IS TRUE) ASC;
SELECT DISTINCT MIN(rt0.c3) FROM vt1 INNER JOIN rt0 ON CAST(vt1.c0 COLLATE NOCASE AS NUMERIC) WHERE (((CASE WHEN (((vt1.c0, rt0.c1)) BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c2, NULL))) THEN ((x'be5e')>>(rt0.c1)) WHEN ((((((((rt0.c1)OR(x'01')))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)) THEN rt0.c0 COLLATE RTRIM ELSE rt0.c0 COLLATE NOCASE END)AND(((((((((((NULL)AND(((rt0.c2)&('{W')))))OR(NULL)))AND('82635964')))OR(((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))OR(((rt0.c0)AND(rt0.c2))))))) ORDER BY CAST(((((((((vt1.c0)AND(x'')))AND(rt0.c0)))AND(rt0.c0)))AND(rt0.c0)) AS NUMERIC)  NULLS FIRST, ((CAST(rt0.c1 AS TEXT)) IS FALSE) DESC  NULLS LAST, (((rt0.c2 IN (vt1.c0, rt0.c2, '-262715540'))) IS TRUE) ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((((((((((('722345103')OR(CASE rt0.c1  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN NULL END)))OR(((((((rt0.c2)OR(0xffffffffa87cb4c1)))OR(vt1.c0)))OR(rt0.c1)))))AND(CAST(vt1.c0 AS NUMERIC))))AND(((((rt0.c2)AND(rt0.c2)))OR(rt0.c3)))))OR(((rt0.c2)>>(rt0.c3)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((((((('722345103')OR(CASE rt0.c1  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN NULL END)))OR(((((((rt0.c2)OR(0Xffffffffa87cb4c1)))OR(vt1.c0)))OR(rt0.c1)))))AND(CAST(vt1.c0 AS NUMERIC))))AND(((((rt0.c2)AND(rt0.c2)))OR(rt0.c3)))))OR(((rt0.c2)>>(rt0.c3))))) ORDER BY ((((rt0.c0)||(rt0.c1))) NOT BETWEEN (vt1.c0) AND (((vt1.c0) ISNULL))) LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE ((((((((((('722345103')OR(CASE rt0.c1  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN NULL END)))OR(((((((rt0.c2)OR(0xffffffffa87cb4c1)))OR(vt1.c0)))OR(rt0.c1)))))AND(CAST(vt1.c0 AS NUMERIC))))AND(((((rt0.c2)AND(rt0.c2)))OR(rt0.c3)))))OR(((rt0.c2)>>(rt0.c3)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((((((('722345103')OR(CASE rt0.c1  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN NULL END)))OR(((((((rt0.c2)OR(0Xffffffffa87cb4c1)))OR(vt1.c0)))OR(rt0.c1)))))AND(CAST(vt1.c0 AS NUMERIC))))AND(((((rt0.c2)AND(rt0.c2)))OR(rt0.c3)))))OR(((rt0.c2)>>(rt0.c3))))) ORDER BY ((((rt0.c0)||(rt0.c1))) NOT BETWEEN (vt1.c0) AND (((vt1.c0) ISNULL))) LIMIT 1;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0)&(vt1.c0)))!=((vt1.c0 IN ()))));
SELECT ALL COUNT(*) FROM vt1 WHERE (((((((vt1.c0)&(vt1.c0)))<((vt1.c0 IN ()))))AND(LIKELY(LIKELY(DISTINCT vt1.c0))))) ORDER BY (('c''t\e') ISNULL) ASC LIMIT 0X2;
SELECT * FROM vt1, rt0 WHERE ('cᜢ');
SELECT DISTINCT * FROM vt1, rt0 WHERE ('cᜢ');
SELECT * FROM vt1, rt0 WHERE ('cᜢ');
SELECT DISTINCT * FROM vt1, rt0 WHERE ('cᜢ');
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((CAST(vt1.c0 AS NUMERIC) IN ((vt1.c0 IN (vt1.c0))))) ORDER BY ((((((vt1.c0)OR('0.8458136832775563')))AND(vt1.c0)))OR(TRIM(DISTINCT vt1.c0))) ASC, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)&((NOT (vt1.c0)))) DESC  NULLS FIRST, CASE ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))  WHEN CAST(vt1.c0 AS BLOB) THEN ((vt1.c0)LIKE(vt1.c0)) WHEN NULLIF(DISTINCT vt1.c0, vt1.c0) THEN '206543958' COLLATE BINARY ELSE (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) END  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((CAST(vt1.c0 AS NUMERIC) IN ((vt1.c0 IN (vt1.c0)))))AND((((vt1.c0 IN (vt1.c0)))==(vt1.c0 COLLATE NOCASE))))) ORDER BY vt1.c0 ASC  NULLS FIRST, CASE WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0)*(vt1.c0)) WHEN (vt1.c0 IN (vt1.c0, vt1.c0, x'')) THEN ((vt1.c0)<>(vt1.c0)) WHEN ((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0) NOT NULL) WHEN CAST(vt1.c0 AS REAL) THEN ((vt1.c0) IS FALSE) ELSE json_type(vt1.c0) END DESC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (CASE WHEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END THEN ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c3)) WHEN (rt0.c3 IN (rt0.c2)) THEN -924501417 WHEN NULLIF(DISTINCT rt0.c2, rt0.c3) THEN rt0.c3 WHEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN x'c2d321' WHEN rt0.c1 THEN rt0.c1 END THEN ((rt0.c3) IS TRUE) WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN (+ (rt0.c2)) END) ORDER BY CASE ((rt0.c2) IS FALSE)  WHEN ((rt0.c2)/(rt0.c2)) THEN (+ (rt0.c1)) END ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END THEN ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c3)) WHEN (rt0.c3 IN (rt0.c2)) THEN -924501417 WHEN NULLIF(DISTINCT rt0.c2, rt0.c3) THEN rt0.c3 WHEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN x'c2d321' WHEN rt0.c1 THEN rt0.c1 END THEN ((rt0.c3) IS TRUE) WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN (+ (rt0.c2)) END)AND(CAST((((rt0.c2, rt0.c3, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c2)) AND ((rt0.c0, rt0.c3, rt0.c3))) AS BLOB)))) ORDER BY ((((rt0.c0)IS NOT(rt0.c0))) BETWEEN (((rt0.c2) NOT BETWEEN (0.33530788234020314) AND (rt0.c3))) AND (rt0.c2 COLLATE RTRIM)) DESC INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c2, rt0.c0, rt0.c1, rt0.c3))=((0Xffffffff98aa2165, NULL, rt0.c3, rt0.c0))) COLLATE RTRIM) ORDER BY ((((rt0.c0)IS NOT(rt0.c0))) BETWEEN (((rt0.c2) NOT BETWEEN (0.33530788234020314) AND (rt0.c3))) AND (rt0.c2 COLLATE RTRIM)) DESC;
SELECT ALL * FROM rt0 WHERE (CASE WHEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END THEN ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c3)) WHEN (rt0.c3 IN (rt0.c2)) THEN -924501417 WHEN NULLIF(DISTINCT rt0.c2, rt0.c3) THEN rt0.c3 WHEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN x'c2d321' WHEN rt0.c1 THEN rt0.c1 END THEN ((rt0.c3) IS TRUE) WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN (+ (rt0.c2)) END) ORDER BY CASE ((rt0.c2) IS FALSE)  WHEN ((rt0.c2)/(rt0.c2)) THEN (+ (rt0.c1)) END ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END THEN ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c3)) WHEN (rt0.c3 IN (rt0.c2)) THEN -924501417 WHEN NULLIF(DISTINCT rt0.c2, rt0.c3) THEN rt0.c3 WHEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN x'c2d321' WHEN rt0.c1 THEN rt0.c1 END THEN ((rt0.c3) IS TRUE) WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN (+ (rt0.c2)) END)AND(CAST((((rt0.c2, rt0.c3, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c2)) AND ((rt0.c0, rt0.c3, rt0.c3))) AS BLOB)))) ORDER BY ((((rt0.c0)IS NOT(rt0.c0))) BETWEEN (((rt0.c2) NOT BETWEEN (0.33530788234020314) AND (rt0.c3))) AND (rt0.c2 COLLATE RTRIM)) DESC INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c2, rt0.c0, rt0.c1, rt0.c3))=((0Xffffffff98aa2165, NULL, rt0.c3, rt0.c0))) COLLATE RTRIM) ORDER BY ((((rt0.c0)IS NOT(rt0.c0))) BETWEEN (((rt0.c2) NOT BETWEEN (0.33530788234020314) AND (rt0.c3))) AND (rt0.c2 COLLATE RTRIM)) DESC;
SELECT MIN(rt0.c1) FROM rt0 WHERE (((rt0.c0)==(((rt0.c0)IS(rt0.c2)))));
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (((rt0.c0)==(((rt0.c0)IS(rt0.c2))))) ORDER BY CAST(((rt0.c0)GLOB(rt0.c1)) AS REAL) INTERSECT SELECT MIN(rt0.c1) FROM rt0 WHERE (CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c1 END COLLATE RTRIM) ORDER BY CAST(((rt0.c0)GLOB(rt0.c1)) AS REAL);
SELECT ALL * FROM vt1, rt0 WHERE ((((((((NOT (rt0.c3)))OR((rt0.c3 IN ()))))OR(((vt1.c0) IS TRUE))))OR(vt1.c0 COLLATE BINARY)));
SELECT ALL * FROM vt1, rt0 WHERE ((((((((NOT (rt0.c3)))OR((rt0.c3 IN ()))))OR(((vt1.c0) IS TRUE))))OR(vt1.c0 COLLATE BINARY))) ORDER BY (NOT ((((rt0.c1))>((rt0.c1))))) DESC  NULLS FIRST, (- ((((rt0.c2))>=((rt0.c0))))) DESC  NULLS FIRST, (('Pr') IS TRUE);
SELECT ALL * FROM vt1, rt0 WHERE ((((((((NOT (rt0.c3)))OR((rt0.c3 IN ()))))OR(((vt1.c0) IS TRUE))))OR(vt1.c0 COLLATE BINARY)));
SELECT ALL * FROM vt1, rt0 WHERE ((((((((NOT (rt0.c3)))OR((rt0.c3 IN ()))))OR(((vt1.c0) IS TRUE))))OR(vt1.c0 COLLATE BINARY))) ORDER BY (NOT ((((rt0.c1))>((rt0.c1))))) DESC  NULLS FIRST, (- ((((rt0.c2))>=((rt0.c0))))) DESC  NULLS FIRST, (('Pr') IS TRUE);
SELECT ALL COUNT(*) FROM rt0 WHERE (HEX(SQLITE_SOURCE_ID())) ORDER BY ((CAST(rt0.c1 AS REAL)) NOT NULL)  NULLS LAST, ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c3))) BETWEEN (((rt0.c3) NOT NULL)) AND ((((rt0.c2))!=((rt0.c0)))))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (HEX(SQLITE_SOURCE_ID())) ORDER BY ((CAST(rt0.c1 AS REAL)) NOT NULL)  NULLS LAST, ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c3))) BETWEEN (((rt0.c3) NOT NULL)) AND ((((rt0.c2))<>((rt0.c0)))))  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (rt0.c0) ORDER BY ((CAST(rt0.c1 AS REAL)) NOT NULL)  NULLS LAST, ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c3))) BETWEEN (((rt0.c3) NOT NULL)) AND ((((rt0.c2))<>((rt0.c0)))))  NULLS LAST LIMIT 0;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (CASE rt0.c0  WHEN (rt0.c0 IN (rt0.c0)) THEN x'' ELSE HEX(DISTINCT rt0.c2) END);
SELECT MIN(rt0.c2) FROM rt0 WHERE (((CASE rt0.c0  WHEN (rt0.c0 IN (rt0.c0)) THEN x'' ELSE HEX(DISTINCT rt0.c2) END)AND(NULLIF((~ (rt0.c2)), NULL))));
SELECT * FROM rt0, vt1 WHERE ((((rt0.c1, vt1.c0)) NOT BETWEEN ((((vt1.c0) IS TRUE), (+ (rt0.c0)))) AND (((('y/D]i*Z')<(vt1.c0)), ((((((vt1.c0)AND(vt1.c0)))AND(-1.01668619E8)))OR('-1484881467')))))) ORDER BY (('' IN ()) IN (((0.6251736134456705) BETWEEN (NULL) AND (rt0.c2))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c1, vt1.c0)) NOT BETWEEN ((((vt1.c0) IS TRUE), (+ (rt0.c0)))) AND (((('y/D]i*Z')<=(vt1.c0)), ((((((vt1.c0)AND(vt1.c0)))AND(-1.01668619E8)))OR('-1484881467'))))))AND((NOT ((rt0.c0 IN (rt0.c3))))))) ORDER BY ((rt0.c3)||(rt0.c1 COLLATE BINARY)), UPPER(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c0)))  NULLS LAST, ((CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN NULL WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 END) BETWEEN (((vt1.c0) IS FALSE)) AND ((- (rt0.c3))));
SELECT * FROM rt0, vt1 WHERE ((((rt0.c1, vt1.c0)) NOT BETWEEN ((((vt1.c0) IS TRUE), (+ (rt0.c0)))) AND (((('y/D]i*Z')<(vt1.c0)), ((((((vt1.c0)AND(vt1.c0)))AND(-1.01668619E8)))OR('-1484881467')))))) ORDER BY (('' IN ()) IN (((0.6251736134456705) BETWEEN (NULL) AND (rt0.c2))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c1, vt1.c0)) NOT BETWEEN ((((vt1.c0) IS TRUE), (+ (rt0.c0)))) AND (((('y/D]i*Z')<=(vt1.c0)), ((((((vt1.c0)AND(vt1.c0)))AND(-1.01668619E8)))OR('-1484881467'))))))AND((NOT ((rt0.c0 IN (rt0.c3))))))) ORDER BY ((rt0.c3)||(rt0.c1 COLLATE BINARY)), UPPER(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c0)))  NULLS LAST, ((CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN NULL WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 END) BETWEEN (((vt1.c0) IS FALSE)) AND ((- (rt0.c3))));
SELECT * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND ((~ (vt1.c0)))));
SELECT * FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND ((~ (vt1.c0)))))AND(((((vt1.c0)|(vt1.c0))) BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((vt1.c0) NOTNULL)))))) INTERSECT SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) BETWEEN (((((0.7709294528049235, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))) AND (('-1633712743'))));
SELECT * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND ((~ (vt1.c0)))));
SELECT * FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND ((~ (vt1.c0)))))AND(((((vt1.c0)|(vt1.c0))) BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((vt1.c0) NOTNULL)))))) INTERSECT SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) BETWEEN (((((0.7709294528049235, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))) AND (('-1633712743'))));
SELECT ALL MIN(vt1.c0) FROM vt1 LEFT OUTER JOIN rt0 ON ((rt0.c3)IS NOT(rt0.c1)) COLLATE BINARY WHERE ((((rt0.c2 COLLATE RTRIM))>=((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))))));
SELECT ALL MIN(vt1.c0) FROM vt1 LEFT OUTER JOIN rt0 ON ((rt0.c3)IS NOT(rt0.c1)) COLLATE BINARY WHERE ((((((rt0.c2 COLLATE RTRIM))>((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))))))AND(CASE (((rt0.c0)) BETWEEN ((rt0.c2)) AND ((rt0.c2)))  WHEN ((rt0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN CASE WHEN rt0.c3 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END WHEN CASE WHEN 0.030873476882137485 THEN vt1.c0 WHEN rt0.c1 THEN vt1.c0 END THEN CASE WHEN rt0.c2 THEN rt0.c0 ELSE 1.965182289E9 END WHEN ((((rt0.c3)AND(vt1.c0)))AND('/0~g')) THEN CAST(rt0.c2 AS REAL) WHEN IFNULL(rt0.c1, rt0.c1) THEN ((((((((((NULL)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c0)) WHEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END THEN (((rt0.c2, rt0.c2, rt0.c1, rt0.c2)) BETWEEN ((rt0.c0, rt0.c2, rt0.c3, vt1.c0)) AND ((rt0.c2, rt0.c1, rt0.c1, vt1.c0))) WHEN 0xffffffff89d6559a THEN (((rt0.c1))<((''))) ELSE LIKELIHOOD(rt0.c0, rt0.c2) END))) ORDER BY (+ (CAST(rt0.c0 AS BLOB)));
SELECT ALL * FROM rt0 WHERE (((((((((CAST(rt0.c0 AS TEXT))OR((~ (rt0.c0)))))OR(((((((rt0.c1)OR(rt0.c3)))AND(rt0.c3)))OR(rt0.c2)))))AND((- (rt0.c3)))))OR(((rt0.c2) NOTNULL)))) ORDER BY NULL, (((((((((((rt0.c3)AND(rt0.c0)))AND(rt0.c2)))OR(-1.82911986E8)))OR(rt0.c3))))<=((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))));
SELECT * FROM rt0 WHERE (((((((((((CAST(rt0.c0 AS TEXT))OR((~ (rt0.c0)))))OR(((((((rt0.c1)OR(rt0.c3)))AND(rt0.c3)))OR(rt0.c2)))))AND((- (rt0.c3)))))OR(((rt0.c2) NOTNULL))))AND(((8.15593498E8)%(((rt0.c1) IS FALSE)))))) ORDER BY NULL, (((((((((((rt0.c3)AND(rt0.c0)))AND(rt0.c2)))OR(-1.82911986E8)))OR(rt0.c3))))<=((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0))))) LIMIT 0x0 INTERSECT SELECT * FROM rt0 WHERE (CAST(((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c1)) AS BLOB)) ORDER BY NULL, (((((((((((rt0.c3)AND(rt0.c0)))AND(rt0.c2)))OR(-1.82911986E8)))OR(rt0.c3))))<=((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0))))) LIMIT 0X0;
SELECT ALL * FROM rt0 WHERE (((((((((CAST(rt0.c0 AS TEXT))OR((~ (rt0.c0)))))OR(((((((rt0.c1)OR(rt0.c3)))AND(rt0.c3)))OR(rt0.c2)))))AND((- (rt0.c3)))))OR(((rt0.c2) NOTNULL)))) ORDER BY NULL, (((((((((((rt0.c3)AND(rt0.c0)))AND(rt0.c2)))OR(-1.82911986E8)))OR(rt0.c3))))<=((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))));
SELECT * FROM rt0 WHERE (((((((((((CAST(rt0.c0 AS TEXT))OR((~ (rt0.c0)))))OR(((((((rt0.c1)OR(rt0.c3)))AND(rt0.c3)))OR(rt0.c2)))))AND((- (rt0.c3)))))OR(((rt0.c2) NOTNULL))))AND(((8.15593498E8)%(((rt0.c1) IS FALSE)))))) ORDER BY NULL, (((((((((((rt0.c3)AND(rt0.c0)))AND(rt0.c2)))OR(-1.82911986E8)))OR(rt0.c3))))<=((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0))))) LIMIT 0x0 INTERSECT SELECT * FROM rt0 WHERE (CAST(((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c1)) AS BLOB)) ORDER BY NULL, (((((((((((rt0.c3)AND(rt0.c0)))AND(rt0.c2)))OR(-1.82911986E8)))OR(rt0.c3))))<=((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0))))) LIMIT 0X0;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((NOT (rt0.c2)))>>((+ (vt1.c0)))) WHERE (rt0.c1) ORDER BY (((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c0)))OR(rt0.c3)))OR(vt1.c0)), ((rt0.c0)LIKE(vt1.c0))))<((((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)), rt0.c2 COLLATE NOCASE))), ((x'') IS FALSE);
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (((NOT (rt0.c2)))>>((+ (vt1.c0)))) WHERE (((rt0.c1)AND(((((rt0.c2, rt0.c2))>=((rt0.c2, vt1.c0))) IN ())))) ORDER BY ((rt0.c3)GLOB(rt0.c0)) COLLATE BINARY  NULLS FIRST INTERSECT SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((NOT (rt0.c2)))>>((+ (vt1.c0)))) WHERE ('982536061') ORDER BY ((rt0.c3)GLOB(rt0.c0)) COLLATE BINARY  NULLS FIRST;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((NOT (rt0.c2)))>>((+ (vt1.c0)))) WHERE (rt0.c1) ORDER BY (((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c0)))OR(rt0.c3)))OR(vt1.c0)), ((rt0.c0)LIKE(vt1.c0))))<((((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)), rt0.c2 COLLATE NOCASE))), ((x'') IS FALSE);
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (((NOT (rt0.c2)))>>((+ (vt1.c0)))) WHERE (((rt0.c1)AND(((((rt0.c2, rt0.c2))>=((rt0.c2, vt1.c0))) IN ())))) ORDER BY ((rt0.c3)GLOB(rt0.c0)) COLLATE BINARY  NULLS FIRST INTERSECT SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((NOT (rt0.c2)))>>((+ (vt1.c0)))) WHERE ('982536061') ORDER BY ((rt0.c3)GLOB(rt0.c0)) COLLATE BINARY  NULLS FIRST;
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE (CASE WHEN LOWER('') THEN '5%d.' COLLATE NOCASE WHEN CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 END THEN 0xffffffffdd7e6b1a WHEN CAST(vt1.c0 AS NUMERIC) THEN rt0.c2 ELSE rt0.c1 END);
SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((CASE WHEN LOWER('') THEN '5%d.' COLLATE NOCASE WHEN CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 END THEN 0xffffffffdd7e6b1a WHEN CAST(vt1.c0 AS NUMERIC) THEN rt0.c2 ELSE rt0.c1 END)AND((((('짶[
D(') IS FALSE)) IS FALSE))));
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((NULL IN (rt0.c1))) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND (0.3691813671262443)) WHERE ((+ (((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c2))))) ORDER BY ((rt0.c1)+(rt0.c3 COLLATE BINARY)) ASC, CAST(((rt0.c1)+(rt0.c3)) AS BLOB) DESC;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((NULL IN (rt0.c1))) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND (0.3691813671262443)) WHERE ((+ (((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c2))))) ORDER BY (~ ((vt1.c0 IN (vt1.c0, rt0.c1)))) DESC  NULLS LAST, CASE WHEN json_array_length(rt0.c1, '1663299610') THEN CAST(rt0.c2 AS INTEGER) WHEN rt0.c3 THEN CAST(vt1.c0 AS REAL) WHEN 0.5439443282875409 THEN ((rt0.c0)<(rt0.c3)) WHEN '-1329493880' THEN ((rt0.c0)==(rt0.c2)) END ASC LIMIT 0X2;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((NULL IN (rt0.c1))) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND (0.3691813671262443)) WHERE ((+ (((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c2))))) ORDER BY ((rt0.c1)+(rt0.c3 COLLATE BINARY)) ASC, CAST(((rt0.c1)+(rt0.c3)) AS BLOB) DESC;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((NULL IN (rt0.c1))) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND (0.3691813671262443)) WHERE ((+ (((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c2))))) ORDER BY (~ ((vt1.c0 IN (vt1.c0, rt0.c1)))) DESC  NULLS LAST, CASE WHEN json_array_length(rt0.c1, '1663299610') THEN CAST(rt0.c2 AS INTEGER) WHEN rt0.c3 THEN CAST(vt1.c0 AS REAL) WHEN 0.5439443282875409 THEN ((rt0.c0)<(rt0.c3)) WHEN '-1329493880' THEN ((rt0.c0)==(rt0.c2)) END ASC LIMIT 0X2;
SELECT * FROM vt1 WHERE (((UNLIKELY(DISTINCT vt1.c0))/(vt1.c0))) ORDER BY (((NOT (vt1.c0)))IS NOT(((vt1.c0)>(vt1.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((UNLIKELY(DISTINCT vt1.c0))/(vt1.c0))) ORDER BY (((NOT (vt1.c0)))IS NOT(((vt1.c0)>(vt1.c0))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) BETWEEN (UPPER(vt1.c0)) AND ((vt1.c0 IN ())))) ORDER BY (((NOT (vt1.c0)))IS NOT(((vt1.c0)>(vt1.c0))))  NULLS FIRST;
SELECT * FROM vt1 WHERE (((UNLIKELY(DISTINCT vt1.c0))/(vt1.c0))) ORDER BY (((NOT (vt1.c0)))IS NOT(((vt1.c0)>(vt1.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((UNLIKELY(DISTINCT vt1.c0))/(vt1.c0))) ORDER BY (((NOT (vt1.c0)))IS NOT(((vt1.c0)>(vt1.c0))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) BETWEEN (UPPER(vt1.c0)) AND ((vt1.c0 IN ())))) ORDER BY (((NOT (vt1.c0)))IS NOT(((vt1.c0)>(vt1.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ('xvQᄾ' COLLATE NOCASE) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c3 THEN x'' ELSE rt0.c0 END AS REAL)  NULLS LAST, RTRIM(CAST(rt0.c3 AS REAL)) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((('xvQᄾ' COLLATE NOCASE)AND((((0.964813790745092)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))) COLLATE RTRIM))) ORDER BY CAST(CAST('' AS TEXT) AS NUMERIC) ASC  NULLS FIRST, (CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN x'' THEN rt0.c0 END IN ((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, rt0.c2))))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY CAST(CAST('' AS TEXT) AS NUMERIC) ASC  NULLS FIRST, (CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN x'' THEN rt0.c0 END IN ((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, rt0.c2))))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ('xvQᄾ' COLLATE NOCASE) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c3 THEN x'' ELSE rt0.c0 END AS REAL)  NULLS LAST, RTRIM(CAST(rt0.c3 AS REAL)) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((('xvQᄾ' COLLATE NOCASE)AND((((0.964813790745092)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))) COLLATE RTRIM))) ORDER BY CAST(CAST('' AS TEXT) AS NUMERIC) ASC  NULLS FIRST, (CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN x'' THEN rt0.c0 END IN ((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, rt0.c2))))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY CAST(CAST('' AS TEXT) AS NUMERIC) ASC  NULLS FIRST, (CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN x'' THEN rt0.c0 END IN ((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, rt0.c2))))) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY NULL DESC  NULLS FIRST, rtreenode('z*o', CAST(rt0.c3 AS TEXT))  NULLS FIRST;
SELECT * FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY (((rt0.c3)) BETWEEN (((rt0.c0 IN (rt0.c2, rt0.c2)))) AND ((((rt0.c0)-(rt0.c3))))) ASC, rt0.c2 DESC  NULLS FIRST, (((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c3)), ((((rt0.c3)AND(rt0.c1)))OR(rt0.c2))))!=((rt0.c3, IFNULL(DISTINCT rt0.c0, rt0.c0)))) DESC;
SELECT * FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY NULL DESC  NULLS FIRST, rtreenode('z*o', CAST(rt0.c3 AS TEXT))  NULLS FIRST;
SELECT * FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY (((rt0.c3)) BETWEEN (((rt0.c0 IN (rt0.c2, rt0.c2)))) AND ((((rt0.c0)-(rt0.c3))))) ASC, rt0.c2 DESC  NULLS FIRST, (((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c3)), ((((rt0.c3)AND(rt0.c1)))OR(rt0.c2))))!=((rt0.c3, IFNULL(DISTINCT rt0.c0, rt0.c0)))) DESC;
SELECT * FROM vt1, rt0 WHERE (HEX(((rt0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY 'S' COLLATE NOCASE COLLATE RTRIM  NULLS LAST, ((((((((CAST(vt1.c0 AS TEXT))OR((rt0.c2 IN (rt0.c2)))))OR(CAST(vt1.c0 AS BLOB))))AND('0.8620100687232414')))AND(rt0.c2 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (((HEX(((rt0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c0))))AND('q'))) ORDER BY 'S' COLLATE NOCASE COLLATE RTRIM  NULLS LAST, ((((((((CAST(vt1.c0 AS TEXT))OR((rt0.c2 IN (rt0.c2)))))OR(CAST(vt1.c0 AS BLOB))))AND('0.8620100687232414')))AND(rt0.c2 COLLATE RTRIM)) ASC  NULLS LAST LIMIT 3 INTERSECT SELECT * FROM vt1, rt0 WHERE ((((rt0.c3) NOT NULL) IN (((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0))))) ORDER BY 'S' COLLATE NOCASE COLLATE RTRIM  NULLS LAST, ((((((((CAST(vt1.c0 AS TEXT))OR((rt0.c2 IN (rt0.c2)))))OR(CAST(vt1.c0 AS BLOB))))AND('0.8620100687232414')))AND(rt0.c2 COLLATE RTRIM)) ASC  NULLS LAST LIMIT 0X3;
SELECT * FROM vt1, rt0 WHERE (HEX(((rt0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY 'S' COLLATE NOCASE COLLATE RTRIM  NULLS LAST, ((((((((CAST(vt1.c0 AS TEXT))OR((rt0.c2 IN (rt0.c2)))))OR(CAST(vt1.c0 AS BLOB))))AND('0.8620100687232414')))AND(rt0.c2 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (((HEX(((rt0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c0))))AND('q'))) ORDER BY 'S' COLLATE NOCASE COLLATE RTRIM  NULLS LAST, ((((((((CAST(vt1.c0 AS TEXT))OR((rt0.c2 IN (rt0.c2)))))OR(CAST(vt1.c0 AS BLOB))))AND('0.8620100687232414')))AND(rt0.c2 COLLATE RTRIM)) ASC  NULLS LAST LIMIT 3 INTERSECT SELECT * FROM vt1, rt0 WHERE ((((rt0.c3) NOT NULL) IN (((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0))))) ORDER BY 'S' COLLATE NOCASE COLLATE RTRIM  NULLS LAST, ((((((((CAST(vt1.c0 AS TEXT))OR((rt0.c2 IN (rt0.c2)))))OR(CAST(vt1.c0 AS BLOB))))AND('0.8620100687232414')))AND(rt0.c2 COLLATE RTRIM)) ASC  NULLS LAST LIMIT 0X3;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c2 COLLATE BINARY);
SELECT DISTINCT * FROM rt0, vt1 WHERE (rt0.c2 COLLATE BINARY) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN (rt0.c1 IN (rt0.c0, rt0.c1)) THEN CASE rt0.c0  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN '' WHEN NULL THEN rt0.c2 ELSE rt0.c1 END WHEN rt0.c1 COLLATE RTRIM THEN CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN x'' END END);
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c2 COLLATE BINARY);
SELECT DISTINCT * FROM rt0, vt1 WHERE (rt0.c2 COLLATE BINARY) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN (rt0.c1 IN (rt0.c0, rt0.c1)) THEN CASE rt0.c0  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN '' WHEN NULL THEN rt0.c2 ELSE rt0.c1 END WHEN rt0.c1 COLLATE RTRIM THEN CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN x'' END END);
SELECT ALL * FROM rt0 WHERE ((NOT (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN NULL ELSE rt0.c3 END))) ORDER BY (+ (((rt0.c0)/(rt0.c1)))) DESC, ((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3)) COLLATE RTRIM  NULLS FIRST;
SELECT * FROM rt0 WHERE ((NOT (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN NULL ELSE rt0.c3 END))) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 END)>((rt0.c0 IN (rt0.c3, '-1127236167'))))  NULLS LAST, CASE ((((((((rt0.c2)AND(rt0.c3)))AND(rt0.c2)))OR(rt0.c3)))AND(rt0.c0))  WHEN 0.9411611907217905 THEN (('1350128228')%(rt0.c3)) WHEN (- (NULL)) THEN ((rt0.c3)>(rt0.c1)) ELSE CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c2 WHEN x'' THEN rt0.c2 END END  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((NOT (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN NULL ELSE rt0.c3 END))) ORDER BY (+ (((rt0.c0)/(rt0.c1)))) DESC, ((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3)) COLLATE RTRIM  NULLS FIRST;
SELECT * FROM rt0 WHERE ((NOT (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN NULL ELSE rt0.c3 END))) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 END)>((rt0.c0 IN (rt0.c3, '-1127236167'))))  NULLS LAST, CASE ((((((((rt0.c2)AND(rt0.c3)))AND(rt0.c2)))OR(rt0.c3)))AND(rt0.c0))  WHEN 0.9411611907217905 THEN (('1350128228')%(rt0.c3)) WHEN (- (NULL)) THEN ((rt0.c3)>(rt0.c1)) ELSE CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c2 WHEN x'' THEN rt0.c2 END END  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)=(vt1.c0))) BETWEEN (0x50795264) AND (TYPEOF(DISTINCT vt1.c0)))) ORDER BY x'd85c'  NULLS LAST, SQLITE_SOURCE_ID() COLLATE RTRIM  NULLS FIRST, ((((vt1.c0)+(vt1.c0))) NOT BETWEEN (TRIM(DISTINCT vt1.c0)) AND (((vt1.c0)==(vt1.c0)))) ASC;
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)==(vt1.c0))) BETWEEN (1350128228) AND (TYPEOF(DISTINCT vt1.c0)))) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN ((vt1.c0)>(vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0) IS FALSE) WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN vt1.c0 END ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (LOWER(((vt1.c0) ISNULL))) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN ((vt1.c0)>(vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0) IS FALSE) WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN vt1.c0 END ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)=(vt1.c0))) BETWEEN (0x50795264) AND (TYPEOF(DISTINCT vt1.c0)))) ORDER BY x'd85c'  NULLS LAST, SQLITE_SOURCE_ID() COLLATE RTRIM  NULLS FIRST, ((((vt1.c0)+(vt1.c0))) NOT BETWEEN (TRIM(DISTINCT vt1.c0)) AND (((vt1.c0)==(vt1.c0)))) ASC;
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)==(vt1.c0))) BETWEEN (1350128228) AND (TYPEOF(DISTINCT vt1.c0)))) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN ((vt1.c0)>(vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0) IS FALSE) WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN vt1.c0 END ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (LOWER(((vt1.c0) ISNULL))) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN ((vt1.c0)>(vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0) IS FALSE) WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN vt1.c0 END ASC  NULLS FIRST;
SELECT COUNT(*) FROM rt0 WHERE (LIKELIHOOD(((rt0.c1) NOTNULL), ((rt0.c3)!=(rt0.c3)))) ORDER BY INSTR(((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)), ((rt0.c1)=(rt0.c0)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0 WHERE (((LIKELIHOOD(((rt0.c1) NOTNULL), ((rt0.c3)>(rt0.c3))))AND(NULLIF(rt0.c2, ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0)))))) ORDER BY INSTR(((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)), ((rt0.c1)=(rt0.c0)))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON (~ (-1.468222271E9)) WHERE ((((NOT (rt0.c0)))&(json_patch(rt0.c1, rt0.c1))));
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON (~ (-1.468222271E9)) WHERE ((((NOT (rt0.c0)))&(json_patch(rt0.c1, rt0.c1)))) ORDER BY rt0.c3  NULLS LAST, (((((rt0.c3, rt0.c2))<=((rt0.c3, rt0.c1)))) NOT NULL) LIMIT 0x0;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON (~ (-1.468222271E9)) WHERE ((((NOT (rt0.c0)))&(json_patch(rt0.c1, rt0.c1))));
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON (~ (-1.468222271E9)) WHERE ((((NOT (rt0.c0)))&(json_patch(rt0.c1, rt0.c1)))) ORDER BY rt0.c3  NULLS LAST, (((((rt0.c3, rt0.c2))<=((rt0.c3, rt0.c1)))) NOT NULL) LIMIT 0x0;
SELECT ALL COUNT(*) FROM rt0 WHERE ((((((rt0.c3)AND(rt0.c3)))AND(rt0.c1)) IN (((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c3))))) ORDER BY ((LIKELY(rt0.c3))-(x'7b75'))  NULLS LAST, ((((rt0.c0) IS FALSE))LIKE(CASE WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 END)) DESC;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((((rt0.c3)AND(rt0.c3)))AND(rt0.c1)) IN (((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c3))))) ORDER BY (((rt0.c1, rt0.c2, rt0.c2, rt0.c2)) BETWEEN ((rt0.c1, rt0.c0, rt0.c1, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c0, rt0.c3))) COLLATE RTRIM LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE (CAST((((rt0.c1)) BETWEEN ((NULL)) AND ((rt0.c0))) AS BLOB)) ORDER BY CAST(((((((rt0.c3)AND(rt0.c1)))OR(vt1.c0)))OR(x'')) AS INTEGER), rt0.c1;
SELECT * FROM rt0, vt1 WHERE (((CAST((((rt0.c1)) BETWEEN ((NULL)) AND ((rt0.c0))) AS BLOB))AND(vt1.c0))) ORDER BY (+ (vt1.c0 COLLATE RTRIM)) DESC  NULLS LAST, rt0.c2;
SELECT * FROM rt0, vt1 WHERE (CAST((((rt0.c1)) BETWEEN ((NULL)) AND ((rt0.c0))) AS BLOB)) ORDER BY CAST(((((((rt0.c3)AND(rt0.c1)))OR(vt1.c0)))OR(x'')) AS INTEGER), rt0.c1;
SELECT * FROM rt0, vt1 WHERE (((CAST((((rt0.c1)) BETWEEN ((NULL)) AND ((rt0.c0))) AS BLOB))AND(vt1.c0))) ORDER BY (+ (vt1.c0 COLLATE RTRIM)) DESC  NULLS LAST, rt0.c2;
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) IN ('613419071'))  NULLS LAST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) IN ('613419071'))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT)) BETWEEN (LIKELY(vt1.c0)) AND (((vt1.c0)IS(vt1.c0))))) ORDER BY ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) IN ('613419071'))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1, rt0 WHERE ((NOT (rt0.c0 COLLATE RTRIM)));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((NOT (rt0.c0 COLLATE RTRIM)))AND(CASE (((rt0.c2, vt1.c0, rt0.c1))<=((rt0.c3, rt0.c2, rt0.c3)))  WHEN ((rt0.c3)%(rt0.c3)) THEN ((rt0.c0) NOTNULL) WHEN (rt0.c0 IN ()) THEN LAST_INSERT_ROWID() END))) ORDER BY ((((rt0.c3, rt0.c0, rt0.c3))>=((rt0.c3, rt0.c3, vt1.c0))) IN (CASE WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 END)), ((((((((((rt0.c3)<<(rt0.c3)))AND(NULL)))OR(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)))))AND(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c1)))))OR(((vt1.c0)|(rt0.c0)))) DESC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((~ (rt0.c3))) ORDER BY ((((rt0.c3, rt0.c0, rt0.c3))>=((rt0.c3, rt0.c3, vt1.c0))) IN (CASE WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 END)), ((((((((((rt0.c3)<<(rt0.c3)))AND(NULL)))OR(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)))))AND(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c1)))))OR(((vt1.c0)|(rt0.c0)))) DESC LIMIT 0x2;
SELECT ALL * FROM vt1, rt0 WHERE ((NOT (rt0.c0 COLLATE RTRIM)));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((NOT (rt0.c0 COLLATE RTRIM)))AND(CASE (((rt0.c2, vt1.c0, rt0.c1))<=((rt0.c3, rt0.c2, rt0.c3)))  WHEN ((rt0.c3)%(rt0.c3)) THEN ((rt0.c0) NOTNULL) WHEN (rt0.c0 IN ()) THEN LAST_INSERT_ROWID() END))) ORDER BY ((((rt0.c3, rt0.c0, rt0.c3))>=((rt0.c3, rt0.c3, vt1.c0))) IN (CASE WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 END)), ((((((((((rt0.c3)<<(rt0.c3)))AND(NULL)))OR(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)))))AND(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c1)))))OR(((vt1.c0)|(rt0.c0)))) DESC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((~ (rt0.c3))) ORDER BY ((((rt0.c3, rt0.c0, rt0.c3))>=((rt0.c3, rt0.c3, vt1.c0))) IN (CASE WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 END)), ((((((((((rt0.c3)<<(rt0.c3)))AND(NULL)))OR(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)))))AND(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c1)))))OR(((vt1.c0)|(rt0.c0)))) DESC LIMIT 0x2;
SELECT ALL * FROM vt1, rt0 WHERE (((((rt0.c2)||('-1705485783'))) NOTNULL));
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (((((((rt0.c2)||('-1705485783'))) NOTNULL))AND(vt1.c0))) ORDER BY ((((((rt0.c0)OR(rt0.c3)))AND(rt0.c0))) NOT BETWEEN ((((-1.812739594E9))>=((rt0.c2)))) AND (rt0.c2 COLLATE BINARY))  NULLS FIRST, ((((((((((((((rt0.c3) IS FALSE))AND(CASE WHEN rt0.c1 THEN rt0.c1 ELSE 1.60429264E8 END)))OR((rt0.c2 IN (rt0.c1)))))AND((rt0.c1 IN (rt0.c0)))))AND((rt0.c1 IN ()))))AND(rt0.c2)))OR(((rt0.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))))  NULLS LAST LIMIT 3 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (0.24376662247593572) ORDER BY ((((((rt0.c0)OR(rt0.c3)))AND(rt0.c0))) NOT BETWEEN ((((-1.812739594E9))>=((rt0.c2)))) AND (rt0.c2 COLLATE BINARY))  NULLS FIRST, ((((((((((((((rt0.c3) IS FALSE))AND(CASE WHEN rt0.c1 THEN rt0.c1 ELSE 1.60429264E8 END)))OR((rt0.c2 IN (rt0.c1)))))AND((rt0.c1 IN (rt0.c0)))))AND((rt0.c1 IN ()))))AND(rt0.c2)))OR(((rt0.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))))  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt1, rt0 WHERE (((((rt0.c2)||('-1705485783'))) NOTNULL));
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (((((((rt0.c2)||('-1705485783'))) NOTNULL))AND(vt1.c0))) ORDER BY ((((((rt0.c0)OR(rt0.c3)))AND(rt0.c0))) NOT BETWEEN ((((-1.812739594E9))>=((rt0.c2)))) AND (rt0.c2 COLLATE BINARY))  NULLS FIRST, ((((((((((((((rt0.c3) IS FALSE))AND(CASE WHEN rt0.c1 THEN rt0.c1 ELSE 1.60429264E8 END)))OR((rt0.c2 IN (rt0.c1)))))AND((rt0.c1 IN (rt0.c0)))))AND((rt0.c1 IN ()))))AND(rt0.c2)))OR(((rt0.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))))  NULLS LAST LIMIT 3 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (0.24376662247593572) ORDER BY ((((((rt0.c0)OR(rt0.c3)))AND(rt0.c0))) NOT BETWEEN ((((-1.812739594E9))>=((rt0.c2)))) AND (rt0.c2 COLLATE BINARY))  NULLS FIRST, ((((((((((((((rt0.c3) IS FALSE))AND(CASE WHEN rt0.c1 THEN rt0.c1 ELSE 1.60429264E8 END)))OR((rt0.c2 IN (rt0.c1)))))AND((rt0.c1 IN (rt0.c0)))))AND((rt0.c1 IN ()))))AND(rt0.c2)))OR(((rt0.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))))  NULLS LAST LIMIT 3;
SELECT ALL MAX(vt1.c0) FROM vt1, rt0 WHERE (CAST(((vt1.c0)>>(rt0.c3)) AS TEXT)) ORDER BY SQLITE_SOURCE_ID();
SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE (CAST(((vt1.c0)>>(rt0.c3)) AS TEXT)) ORDER BY SQLITE_SOURCE_ID();
SELECT ALL * FROM rt0 WHERE (json_patch(rt0.c1 COLLATE BINARY, (NOT (rt0.c0))));
SELECT DISTINCT * FROM rt0 WHERE (((json_patch(rt0.c1 COLLATE BINARY, (NOT (rt0.c0))))AND(CASE (~ (NULL))  WHEN (NOT (rt0.c3)) THEN ((rt0.c2) IS TRUE) END))) ORDER BY ((((((x'4df937')OR(LOWER(rt0.c1))))OR(((rt0.c1) NOT NULL))))OR(LIKELIHOOD(DISTINCT rt0.c0, rt0.c2))) DESC LIMIT 0;
SELECT ALL * FROM rt0 WHERE (json_patch(rt0.c1 COLLATE BINARY, (NOT (rt0.c0))));
SELECT DISTINCT * FROM rt0 WHERE (((json_patch(rt0.c1 COLLATE BINARY, (NOT (rt0.c0))))AND(CASE (~ (NULL))  WHEN (NOT (rt0.c3)) THEN ((rt0.c2) IS TRUE) END))) ORDER BY ((((((x'4df937')OR(LOWER(rt0.c1))))OR(((rt0.c1) NOT NULL))))OR(LIKELIHOOD(DISTINCT rt0.c0, rt0.c2))) DESC LIMIT 0;
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (CAST(CAST(rt0.c1 AS INTEGER) AS INTEGER));
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (CAST(CAST(rt0.c1 AS INTEGER) AS INTEGER)) LIMIT 2;
SELECT * FROM vt1 WHERE (((('886179703' COLLATE BINARY, (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, '982536061', vt1.c0))), ((vt1.c0)%(vt1.c0))))>(((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))), CASE WHEN vt1.c0 THEN vt1.c0 ELSE x'888885' END, (((vt1.c0, vt1.c0, vt1.c0))<((NULL, vt1.c0, vt1.c0)))))));
SELECT DISTINCT * FROM vt1 WHERE (((('886179703' COLLATE BINARY, (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, '982536061', vt1.c0))), ((vt1.c0)%(vt1.c0))))>(((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))), CASE WHEN vt1.c0 THEN vt1.c0 ELSE x'888885' END, (((vt1.c0, vt1.c0, vt1.c0))<((NULL, vt1.c0, vt1.c0))))))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) BETWEEN (vt1.c0) AND (CAST(x'' AS BLOB)))) LIMIT 0x2;
SELECT * FROM vt1 WHERE (((('886179703' COLLATE BINARY, (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, '982536061', vt1.c0))), ((vt1.c0)%(vt1.c0))))>(((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))), CASE WHEN vt1.c0 THEN vt1.c0 ELSE x'888885' END, (((vt1.c0, vt1.c0, vt1.c0))<((NULL, vt1.c0, vt1.c0)))))));
SELECT DISTINCT * FROM vt1 WHERE (((('886179703' COLLATE BINARY, (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, '982536061', vt1.c0))), ((vt1.c0)%(vt1.c0))))>(((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))), CASE WHEN vt1.c0 THEN vt1.c0 ELSE x'888885' END, (((vt1.c0, vt1.c0, vt1.c0))<((NULL, vt1.c0, vt1.c0))))))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) BETWEEN (vt1.c0) AND (CAST(x'' AS BLOB)))) LIMIT 0x2;
SELECT ALL * FROM rt0 WHERE (((((((((rt0.c2)OR('-924501417')))AND(rt0.c2)))OR(rt0.c0))) IS TRUE)) ORDER BY (((rt0.c3, rt0.c1)) NOT BETWEEN (((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((rt0.c0, rt0.c2, rt0.c0)) AND ((rt0.c0, rt0.c1, rt0.c0))), ((rt0.c1)IS(0X79c114d8)))) AND ((IFNULL(DISTINCT rt0.c3, rt0.c2), ((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)))))  NULLS LAST, json_array_length(CASE WHEN rt0.c3 THEN x'' ELSE rt0.c2 END) ASC, rt0.c3 ASC;
SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c2)OR('-924501417')))AND(rt0.c2)))OR(rt0.c0))) IS TRUE)) ORDER BY ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1))) NOT NULL);
SELECT ALL * FROM rt0 WHERE (((((((((rt0.c2)OR('-924501417')))AND(rt0.c2)))OR(rt0.c0))) IS TRUE)) ORDER BY (((rt0.c3, rt0.c1)) NOT BETWEEN (((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((rt0.c0, rt0.c2, rt0.c0)) AND ((rt0.c0, rt0.c1, rt0.c0))), ((rt0.c1)IS(0X79c114d8)))) AND ((IFNULL(DISTINCT rt0.c3, rt0.c2), ((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)))))  NULLS LAST, json_array_length(CASE WHEN rt0.c3 THEN x'' ELSE rt0.c2 END) ASC, rt0.c3 ASC;
SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c2)OR('-924501417')))AND(rt0.c2)))OR(rt0.c0))) IS TRUE)) ORDER BY ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1))) NOT NULL);
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (CASE WHEN CASE rt0.c1  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END THEN -1316183660 END);
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (CASE WHEN CASE rt0.c1  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END THEN 0Xffffffffb18ca194 END) LIMIT 0x1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), ((vt1.c0) IS TRUE), vt1.c0 COLLATE BINARY, ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), json_remove(vt1.c0, vt1.c0, vt1.c0, vt1.c0)))<=((NULLIF(DISTINCT vt1.c0, vt1.c0), (vt1.c0 IN (vt1.c0)), ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), ((vt1.c0)GLOB(x'f7921a')), vt1.c0))));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), ((vt1.c0) IS TRUE), vt1.c0 COLLATE BINARY, ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), json_remove(vt1.c0, vt1.c0, vt1.c0, vt1.c0)))<=((NULLIF(DISTINCT vt1.c0, vt1.c0), (vt1.c0 IN (vt1.c0)), ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), ((vt1.c0)GLOB(x'f7921a')), vt1.c0))))AND((((((((((vt1.c0))>((vt1.c0))))AND(LOWER(DISTINCT vt1.c0))))OR(((vt1.c0)=(vt1.c0)))))OR(vt1.c0))))) ORDER BY ((((((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE 1893300537 END)AND(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))OR(CASE vt1.c0  WHEN 'cᜢ' THEN vt1.c0 END)))AND(CASE vt1.c0  WHEN vt1.c0 THEN '0.2795279676558975' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))OR(0xffffffff9a585a29)) INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((((vt1.c0)<(vt1.c0)))) AND ((((vt1.c0)GLOB(vt1.c0)))))) ORDER BY ((((((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE 1893300537 END)AND(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))OR(CASE vt1.c0  WHEN 'cᜢ' THEN vt1.c0 END)))AND(CASE vt1.c0  WHEN vt1.c0 THEN '0.2795279676558975' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))OR(-1705485783));
SELECT * FROM vt1, rt0 WHERE ((((((vt1.c0 IN (vt1.c0)))OR(((rt0.c0) NOTNULL))))AND((rt0.c1 IN (rt0.c3, rt0.c3))))) ORDER BY LIKELY(DISTINCT (((vt1.c0, rt0.c2)) BETWEEN ((rt0.c1, vt1.c0)) AND ((rt0.c1, rt0.c2)))) ASC, CASE QUOTE(vt1.c0)  WHEN ((rt0.c2)LIKE(x'85b1f521')) THEN ABS(DISTINCT rt0.c2) WHEN ((((((((((rt0.c2)AND(rt0.c1)))AND(rt0.c0)))OR(rt0.c1)))OR(rt0.c0)))OR(0.838036884513789)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (0.43834110262542436)) ELSE (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((rt0.c0))) END  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ((((((((vt1.c0 IN (vt1.c0)))OR(((rt0.c0) NOTNULL))))AND((rt0.c1 IN (rt0.c3, rt0.c3)))))AND(CASE rt0.c2  WHEN (- (rt0.c1)) THEN (vt1.c0 IN (rt0.c2)) ELSE ((((rt0.c1)OR(rt0.c1)))AND('0.28860935593752846')) END))) ORDER BY (NOT (rt0.c2))  NULLS LAST, json_array(CASE WHEN '' THEN rt0.c1 END, (- (vt1.c0)), ((rt0.c0)GLOB(vt1.c0)), rt0.c0) ASC INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (rt0.c0) ORDER BY (NOT (rt0.c2))  NULLS LAST, json_array(CASE WHEN '' THEN rt0.c1 END, (- (vt1.c0)), ((rt0.c0)GLOB(vt1.c0)), rt0.c0) ASC;
SELECT * FROM vt1, rt0 WHERE ((((((vt1.c0 IN (vt1.c0)))OR(((rt0.c0) NOTNULL))))AND((rt0.c1 IN (rt0.c3, rt0.c3))))) ORDER BY LIKELY(DISTINCT (((vt1.c0, rt0.c2)) BETWEEN ((rt0.c1, vt1.c0)) AND ((rt0.c1, rt0.c2)))) ASC, CASE QUOTE(vt1.c0)  WHEN ((rt0.c2)LIKE(x'85b1f521')) THEN ABS(DISTINCT rt0.c2) WHEN ((((((((((rt0.c2)AND(rt0.c1)))AND(rt0.c0)))OR(rt0.c1)))OR(rt0.c0)))OR(0.838036884513789)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (0.43834110262542436)) ELSE (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((rt0.c0))) END  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ((((((((vt1.c0 IN (vt1.c0)))OR(((rt0.c0) NOTNULL))))AND((rt0.c1 IN (rt0.c3, rt0.c3)))))AND(CASE rt0.c2  WHEN (- (rt0.c1)) THEN (vt1.c0 IN (rt0.c2)) ELSE ((((rt0.c1)OR(rt0.c1)))AND('0.28860935593752846')) END))) ORDER BY (NOT (rt0.c2))  NULLS LAST, json_array(CASE WHEN '' THEN rt0.c1 END, (- (vt1.c0)), ((rt0.c0)GLOB(vt1.c0)), rt0.c0) ASC INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (rt0.c0) ORDER BY (NOT (rt0.c2))  NULLS LAST, json_array(CASE WHEN '' THEN rt0.c1 END, (- (vt1.c0)), ((rt0.c0)GLOB(vt1.c0)), rt0.c0) ASC;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (((UNLIKELY(DISTINCT rt0.c2)) ISNULL));
SELECT DISTINCT MIN(rt0.c1) FROM rt0, vt1 WHERE (((((UNLIKELY(DISTINCT rt0.c2)) ISNULL))AND((((rt0.c0)) BETWEEN ((((rt0.c2) ISNULL))) AND ((((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c2)))))))) ORDER BY ((((((((CAST(vt1.c0 AS INTEGER))AND(JULIANDAY(vt1.c0, rt0.c2, vt1.c0, vt1.c0, '~G'))))OR(((rt0.c1)/(vt1.c0)))))AND((((rt0.c0, vt1.c0))<=((rt0.c2, NULL))))))OR(CASE rt0.c1  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 END)) DESC, ((rt0.c0)AND(((rt0.c3)/(rt0.c1))))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c1))) ISNULL));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c1))) ISNULL))AND(CAST(vt1.c0 COLLATE NOCASE AS INTEGER)))) ORDER BY 464024925  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c1))) ISNULL));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c1))) ISNULL))AND(CAST(vt1.c0 COLLATE NOCASE AS INTEGER)))) ORDER BY 464024925  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (LIKELIHOOD(DISTINCT (+ (vt1.c0)), LIKELIHOOD(vt1.c0, vt1.c0))) ORDER BY (CAST(vt1.c0 AS REAL) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, highlight((((vt1.c0)) BETWEEN ((0.9607073496388701)) AND ((vt1.c0))), CAST(vt1.c0 AS TEXT), ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), ((vt1.c0)<<(vt1.c0)))  NULLS LAST, ((((vt1.c0))<>((vt1.c0))) IN ()) ASC;
SELECT DISTINCT * FROM vt1 WHERE (LIKELIHOOD(DISTINCT (+ (vt1.c0)), LIKELIHOOD(vt1.c0, vt1.c0))) ORDER BY (CAST(vt1.c0 AS REAL) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, highlight((((vt1.c0)) BETWEEN ((0.9607073496388701)) AND ((vt1.c0))), CAST(vt1.c0 AS TEXT), ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), ((vt1.c0)<<(vt1.c0)))  NULLS LAST, ((((vt1.c0))<>((vt1.c0))) IN ()) ASC LIMIT 5 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ())) NOT BETWEEN (vt1.c0) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE NULL END))) ORDER BY (CAST(vt1.c0 AS REAL) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, highlight((((vt1.c0)) BETWEEN ((0.9607073496388701)) AND ((vt1.c0))), CAST(vt1.c0 AS TEXT), ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), ((vt1.c0)<<(vt1.c0)))  NULLS LAST, ((((vt1.c0))!=((vt1.c0))) IN ()) ASC LIMIT 5;
SELECT ALL * FROM vt1 WHERE (LIKELIHOOD(DISTINCT (+ (vt1.c0)), LIKELIHOOD(vt1.c0, vt1.c0))) ORDER BY (CAST(vt1.c0 AS REAL) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, highlight((((vt1.c0)) BETWEEN ((0.9607073496388701)) AND ((vt1.c0))), CAST(vt1.c0 AS TEXT), ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), ((vt1.c0)<<(vt1.c0)))  NULLS LAST, ((((vt1.c0))<>((vt1.c0))) IN ()) ASC;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND(((vt1.c0)&(vt1.c0))))) ORDER BY 0.35626400596658003 DESC, ((((((((vt1.c0)AND(vt1.c0)))AND((NOT (vt1.c0)))))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST, (((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))) BETWEEN ((- (vt1.c0))) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((CAST(vt1.c0 AS REAL))AND('626381757')))AND(TRIM(vt1.c0))))AND(((('i', vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) ORDER BY 0.35626400596658003 DESC, ((((((((vt1.c0)AND(vt1.c0)))AND((NOT (vt1.c0)))))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST, (((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))) BETWEEN ((- (vt1.c0))) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) ASC;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND(((vt1.c0)&(vt1.c0))))) ORDER BY 0.35626400596658003 DESC, ((((((((vt1.c0)AND(vt1.c0)))AND((NOT (vt1.c0)))))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST, (((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))) BETWEEN ((- (vt1.c0))) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((CAST(vt1.c0 AS REAL))AND('626381757')))AND(TRIM(vt1.c0))))AND(((('i', vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) ORDER BY 0.35626400596658003 DESC, ((((((((vt1.c0)AND(vt1.c0)))AND((NOT (vt1.c0)))))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST, (((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))) BETWEEN ((- (vt1.c0))) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) ASC;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3, rt0.c2)) BETWEEN ((((rt0.c2) NOT NULL), rt0.c2 COLLATE NOCASE)) AND ((CASE rt0.c2  WHEN rt0.c2 THEN x'' WHEN rt0.c1 THEN NULL ELSE rt0.c3 END, (((1339938603))<((rt0.c0)))))));
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c3, rt0.c2)) BETWEEN ((((rt0.c2) NOT NULL), rt0.c2 COLLATE NOCASE)) AND ((CASE rt0.c2  WHEN rt0.c2 THEN x'' WHEN rt0.c1 THEN NULL ELSE rt0.c3 END, (((0x4fddd72b))<((rt0.c0))))))) ORDER BY rt0.c1, (NULL IN (CASE rt0.c0  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END, rt0.c1 COLLATE BINARY))  NULLS FIRST, 1.299452316E9 DESC LIMIT 5;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3, rt0.c2)) BETWEEN ((((rt0.c2) NOT NULL), rt0.c2 COLLATE NOCASE)) AND ((CASE rt0.c2  WHEN rt0.c2 THEN x'' WHEN rt0.c1 THEN NULL ELSE rt0.c3 END, (((1339938603))<((rt0.c0)))))));
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c3, rt0.c2)) BETWEEN ((((rt0.c2) NOT NULL), rt0.c2 COLLATE NOCASE)) AND ((CASE rt0.c2  WHEN rt0.c2 THEN x'' WHEN rt0.c1 THEN NULL ELSE rt0.c3 END, (((0x4fddd72b))<((rt0.c0))))))) ORDER BY rt0.c1, (NULL IN (CASE rt0.c0  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END, rt0.c1 COLLATE BINARY))  NULLS FIRST, 1.299452316E9 DESC LIMIT 5;
SELECT * FROM vt1 WHERE ('t');
SELECT DISTINCT * FROM vt1 WHERE ((('t')AND(TRIM(DISTINCT ((vt1.c0)/(vt1.c0)))))) ORDER BY (+ (TRIM(DISTINCT vt1.c0))) ASC;
SELECT * FROM vt1 WHERE ('t');
SELECT DISTINCT * FROM vt1 WHERE ((('t')AND(TRIM(DISTINCT ((vt1.c0)/(vt1.c0)))))) ORDER BY (+ (TRIM(DISTINCT vt1.c0))) ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ((((vt1.c0))!=((rt0.c2))))));
SELECT ALL * FROM rt0, vt1 WHERE ((((((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ((((vt1.c0))<>((rt0.c2))))))AND(((((((IFNULL(DISTINCT rt0.c2, rt0.c0))OR(LIKELY(NULL))))AND(CAST(rt0.c2 AS BLOB))))OR((((vt1.c0, rt0.c1, vt1.c0, rt0.c1, rt0.c0))>((rt0.c1, rt0.c0, rt0.c0, rt0.c0, rt0.c0)))))))) LIMIT 0x3;
SELECT ALL * FROM rt0, vt1 WHERE ((((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ((((vt1.c0))!=((rt0.c2))))));
SELECT ALL * FROM rt0, vt1 WHERE ((((((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ((((vt1.c0))<>((rt0.c2))))))AND(((((((IFNULL(DISTINCT rt0.c2, rt0.c0))OR(LIKELY(NULL))))AND(CAST(rt0.c2 AS BLOB))))OR((((vt1.c0, rt0.c1, vt1.c0, rt0.c1, rt0.c0))>((rt0.c1, rt0.c0, rt0.c0, rt0.c0, rt0.c0)))))))) LIMIT 0x3;
SELECT ALL * FROM rt0 WHERE (((((((((((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)))OR(rt0.c3)))AND(CASE WHEN x'7cf95dfb' THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c1 END)))OR((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))))))AND(rt0.c1))) ORDER BY ((((rt0.c3)+(x'ca76'))) IS TRUE) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)))OR(rt0.c3)))AND(CASE WHEN x'7cf95dfb' THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c1 END)))OR((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))))))AND(rt0.c1))) ORDER BY NULL;
SELECT ALL * FROM rt0 WHERE (((((((((((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)))OR(rt0.c3)))AND(CASE WHEN x'7cf95dfb' THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c1 END)))OR((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))))))AND(rt0.c1))) ORDER BY ((((rt0.c3)+(x'ca76'))) IS TRUE) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)))OR(rt0.c3)))AND(CASE WHEN x'7cf95dfb' THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c1 END)))OR((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))))))AND(rt0.c1))) ORDER BY NULL;
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (((((rt0.c3) NOT NULL)) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 WHEN x'' THEN rt0.c2 ELSE rt0.c3 END))) ORDER BY rt0.c3  NULLS LAST, ((((rt0.c3) IS TRUE))IS((((rt0.c3)) NOT BETWEEN ((rt0.c3)) AND ((vt1.c0)))))  NULLS LAST;
SELECT DISTINCT MIN(rt0.c0) FROM rt0, vt1 WHERE (((((((rt0.c3) NOT NULL)) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 WHEN x'' THEN rt0.c2 ELSE rt0.c3 END)))AND(CAST((~ (rt0.c3)) AS TEXT)))) ORDER BY rt0.c3  NULLS LAST, ((((rt0.c3) IS TRUE))IS((((rt0.c3)) NOT BETWEEN ((rt0.c3)) AND ((vt1.c0)))))  NULLS LAST LIMIT 1;
SELECT * FROM rt0, vt1 WHERE (rt0.c2);
SELECT DISTINCT * FROM rt0, vt1 WHERE (rt0.c2) LIMIT 0x3;
SELECT * FROM rt0, vt1 WHERE (rt0.c2);
SELECT DISTINCT * FROM rt0, vt1 WHERE (rt0.c2) LIMIT 0x3;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((((vt1.c0) ISNULL))OR(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))OR(json_object(rt0.c3, rt0.c1, rt0.c3, rt0.c2))));
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((((vt1.c0) ISNULL))OR(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))OR(json_object(rt0.c3, rt0.c1, rt0.c3, rt0.c2)))) ORDER BY ((x'99') BETWEEN ((- (rt0.c1))) AND ((((1504116959))>=((vt1.c0)))))  NULLS FIRST LIMIT 0X0;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 END)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 END))) LIMIT 0x1 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (LOWER((+ (vt1.c0)))) LIMIT 1;
SELECT ALL COUNT(*) FROM rt0 WHERE ((rt0.c1 COLLATE NOCASE IN (LOWER(DISTINCT rt0.c1)))) ORDER BY ((rt0.c1) IS TRUE) COLLATE RTRIM ASC  NULLS FIRST, ((((SQLITE_COMPILEOPTION_USED(rt0.c2))OR(0.8123495707067668)))OR((rt0.c0 IN ()))) DESC;
SELECT ALL COUNT(*) FROM rt0 WHERE ((((rt0.c1 COLLATE NOCASE IN (LOWER(DISTINCT rt0.c1))))AND(CAST(((rt0.c2) NOT BETWEEN (rt0.c2) AND (8.15593498E8)) AS BLOB)))) ORDER BY ((rt0.c2 COLLATE RTRIM) NOT NULL) ASC, CASE (rt0.c0 IN ())  WHEN 0.35626400596658003 THEN '-2095099121' WHEN ((rt0.c1)=(rt0.c0)) THEN (((rt0.c1))<=((rt0.c3))) WHEN (rt0.c0 IN ('875598938')) THEN (~ (rt0.c0)) WHEN CAST(rt0.c3 AS NUMERIC) THEN (NOT (rt0.c3)) END ASC, (((((rt0.c3)) BETWEEN ((rt0.c0)) AND ((rt0.c1))))LIKE(0X3202743d))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((json_patch(rt0.c0, rt0.c2)) NOT BETWEEN (rt0.c0) AND (((vt1.c0) ISNULL)))) ORDER BY ((((rt0.c0, rt0.c1, rt0.c3)) BETWEEN ((rt0.c2, rt0.c2, rt0.c1)) AND ((rt0.c2, vt1.c0, rt0.c3))) IN ()) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt1, rt0 WHERE (((((json_patch(rt0.c0, rt0.c2)) NOT BETWEEN (rt0.c0) AND (((vt1.c0) ISNULL))))AND((((rt0.c2)) BETWEEN (((((rt0.c1, -1806375176)) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((vt1.c0, vt1.c0))))) AND (((NOT (rt0.c2)))))))) ORDER BY ((((rt0.c0, rt0.c1, rt0.c3)) BETWEEN ((rt0.c2, rt0.c2, rt0.c1)) AND ((rt0.c2, vt1.c0, rt0.c3))) IN ()) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE ((~ (LOWER(DISTINCT rt0.c1))));
SELECT * FROM rt0 WHERE ((~ (LOWER(DISTINCT rt0.c1)))) ORDER BY '-1127236167', ((((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)))OR(rt0.c2)))OR(rt0.c1))) ISNULL) DESC  NULLS LAST, ((((rt0.c0)>=(rt0.c1))) NOT BETWEEN ((((0Xffffffffc2b68122, rt0.c0))<>((rt0.c2, rt0.c1)))) AND (CAST(rt0.c1 AS REAL))) ASC LIMIT 0X1 INTERSECT SELECT * FROM rt0 WHERE (CAST('z' AS TEXT)) ORDER BY '-1127236167', ((((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)))OR(rt0.c2)))OR(rt0.c1))) ISNULL) DESC  NULLS LAST, ((((rt0.c0)>=(rt0.c1))) NOT BETWEEN ((((0xffffffffc2b68122, rt0.c0))<>((rt0.c2, rt0.c1)))) AND (CAST(rt0.c1 AS REAL))) ASC LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE ((~ (LOWER(DISTINCT rt0.c1))));
SELECT * FROM rt0 WHERE ((~ (LOWER(DISTINCT rt0.c1)))) ORDER BY '-1127236167', ((((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)))OR(rt0.c2)))OR(rt0.c1))) ISNULL) DESC  NULLS LAST, ((((rt0.c0)>=(rt0.c1))) NOT BETWEEN ((((0Xffffffffc2b68122, rt0.c0))<>((rt0.c2, rt0.c1)))) AND (CAST(rt0.c1 AS REAL))) ASC LIMIT 0X1 INTERSECT SELECT * FROM rt0 WHERE (CAST('z' AS TEXT)) ORDER BY '-1127236167', ((((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)))OR(rt0.c2)))OR(rt0.c1))) ISNULL) DESC  NULLS LAST, ((((rt0.c0)>=(rt0.c1))) NOT BETWEEN ((((0xffffffffc2b68122, rt0.c0))<>((rt0.c2, rt0.c1)))) AND (CAST(rt0.c1 AS REAL))) ASC LIMIT 0X1;
SELECT COUNT(*) FROM vt1 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS REAL));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS REAL)) ORDER BY ((vt1.c0)-(vt1.c0)) COLLATE RTRIM  NULLS LAST;
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE (GLOB(((vt1.c0)AND(rt0.c3)), ((((rt0.c2)AND(rt0.c3)))AND(rt0.c1))));
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (((GLOB(((vt1.c0)AND(rt0.c3)), ((((rt0.c2)AND(rt0.c3)))AND(rt0.c1))))AND(CASE WHEN (rt0.c2 IN (rt0.c2)) THEN rt0.c2 END))) INTERSECT SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE ((+ (((rt0.c3)=(x'2d66')))));
SELECT ALL * FROM vt1, rt0 WHERE ((((((x'')) BETWEEN ((rt0.c1)) AND ((rt0.c0))))||(CAST(rt0.c0 AS REAL)))) ORDER BY (((rt0.c0, vt1.c0)) BETWEEN ((CAST(rt0.c3 AS INTEGER), ROUND(vt1.c0, rt0.c1))) AND (('Vk' COLLATE RTRIM, UNLIKELY(rt0.c1)))) ASC;
SELECT ALL * FROM vt1, rt0 WHERE ((((((x'')) BETWEEN ((rt0.c1)) AND ((rt0.c0))))||(CAST(rt0.c0 AS REAL)))) ORDER BY (((rt0.c0 IN (rt0.c2, rt0.c3))) IS FALSE) DESC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE ((((((x'')) BETWEEN ((rt0.c1)) AND ((rt0.c0))))||(CAST(rt0.c0 AS REAL)))) ORDER BY (((rt0.c0, vt1.c0)) BETWEEN ((CAST(rt0.c3 AS INTEGER), ROUND(vt1.c0, rt0.c1))) AND (('Vk' COLLATE RTRIM, UNLIKELY(rt0.c1)))) ASC;
SELECT ALL * FROM vt1, rt0 WHERE ((((((x'')) BETWEEN ((rt0.c1)) AND ((rt0.c0))))||(CAST(rt0.c0 AS REAL)))) ORDER BY (((rt0.c0 IN (rt0.c2, rt0.c3))) IS FALSE) DESC  NULLS LAST LIMIT 2;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)*(NULL)))IS(UNLIKELY(DISTINCT vt1.c0))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)*(NULL)))IS(UNLIKELY(DISTINCT vt1.c0)))) ORDER BY (((vt1.c0 COLLATE RTRIM))>=((((765064518)||(vt1.c0))))), vt1.c0 DESC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (SQLITE_SOURCE_ID()) ORDER BY (((vt1.c0 COLLATE RTRIM))>=((((765064518)||(vt1.c0))))), vt1.c0 DESC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM rt0 WHERE (((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c3)) COLLATE NOCASE);
SELECT * FROM rt0 WHERE (((((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c3)) COLLATE NOCASE)AND((('-1469812196') NOT BETWEEN (rt0.c2) AND (rt0.c0))))) ORDER BY CASE rt0.c3  WHEN ((((((((rt0.c3)OR(rt0.c1)))OR(rt0.c2)))AND(rt0.c0)))OR(rt0.c1)) THEN CAST(rt0.c1 AS INTEGER) END DESC  NULLS FIRST, (((((rt0.c3, x'1b')) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c2, rt0.c1)))) IS FALSE) ASC LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c3)) COLLATE NOCASE);
SELECT * FROM rt0 WHERE (((((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c3)) COLLATE NOCASE)AND((('-1469812196') NOT BETWEEN (rt0.c2) AND (rt0.c0))))) ORDER BY CASE rt0.c3  WHEN ((((((((rt0.c3)OR(rt0.c1)))OR(rt0.c2)))AND(rt0.c0)))OR(rt0.c1)) THEN CAST(rt0.c1 AS INTEGER) END DESC  NULLS FIRST, (((((rt0.c3, x'1b')) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c2, rt0.c1)))) IS FALSE) ASC LIMIT 0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE RTRIM)) AND ((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))) ORDER BY (((((((vt1.c0 IN (vt1.c0)))OR(((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND(TYPEOF(vt1.c0))))AND(((vt1.c0)IS(vt1.c0)))) ASC  NULLS LAST, CASE vt1.c0 COLLATE RTRIM  WHEN ((vt1.c0) NOTNULL) THEN ((((((vt1.c0)OR(0.08557058442453591)))AND(vt1.c0)))OR(vt1.c0)) ELSE ((vt1.c0)AND(vt1.c0)) END;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE RTRIM)) AND ((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))))))AND((((+ (vt1.c0)))&(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))))) ORDER BY (vt1.c0 IN (vt1.c0)), ((vt1.c0) NOT BETWEEN ((vt1.c0 IN (-2115833049))) AND (vt1.c0 COLLATE BINARY)) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((NOT (CAST(vt1.c0 AS REAL)))) ORDER BY (vt1.c0 IN (vt1.c0)), ((vt1.c0) NOT BETWEEN ((vt1.c0 IN (0xffffffff81e2f327))) AND (vt1.c0 COLLATE BINARY));
SELECT ALL COUNT(*) FROM rt0 WHERE (((((CAST(0.2559815148994955 AS NUMERIC))AND(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)))))AND(rt0.c0 COLLATE NOCASE)));
SELECT ALL COUNT(*) FROM rt0 WHERE (((((CAST(0.2559815148994955 AS NUMERIC))AND(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)))))AND(rt0.c0 COLLATE NOCASE))) INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE ((((rt0.c0 IN ()))>>(rt0.c2)));
SELECT ALL MIN(vt1.c0) FROM rt0, vt1 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3))) IS FALSE));
SELECT DISTINCT MIN(vt1.c0) FROM rt0, vt1 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3))) IS FALSE)) ORDER BY (((~ (rt0.c3)))/(((vt1.c0)>=(rt0.c2)))) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM rt0, vt1 WHERE ((((rt0.c0, rt0.c3, rt0.c1)) BETWEEN ((vt1.c0, NULL, vt1.c0)) AND ((rt0.c0, rt0.c2, rt0.c2))) COLLATE RTRIM COLLATE BINARY) ORDER BY (((~ (rt0.c3)))/(((vt1.c0)>=(rt0.c2))));
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE (((rt0.c3)>>((vt1.c0 IN (rt0.c2)))));
SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE (((rt0.c3)>>((vt1.c0 IN (rt0.c2))))) INTERSECT SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE (IFNULL(DISTINCT CAST(0.022128182064032997 AS INTEGER), (~ (rt0.c1))));
SELECT ALL * FROM rt0 WHERE (((rt0.c2)&(CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c1 END)));
SELECT ALL * FROM rt0 WHERE (((((rt0.c2)&(CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c1 END)))AND((+ (CAST(rt0.c3 AS TEXT)))))) ORDER BY ((CAST(rt0.c3 AS INTEGER))>=(COALESCE(rt0.c2, rt0.c2, '')))  NULLS LAST LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((rt0.c2)&(CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c1 END)));
SELECT ALL * FROM rt0 WHERE (((((rt0.c2)&(CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c1 END)))AND((+ (CAST(rt0.c3 AS TEXT)))))) ORDER BY ((CAST(rt0.c3 AS INTEGER))>=(COALESCE(rt0.c2, rt0.c2, '')))  NULLS LAST LIMIT 0;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((IFNULL(DISTINCT vt1.c0, vt1.c0)) IS TRUE)) ORDER BY ((vt1.c0 COLLATE NOCASE) IS FALSE), vt1.c0 ASC  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((IFNULL(DISTINCT vt1.c0, vt1.c0)) IS TRUE))AND(((CAST(vt1.c0 AS REAL))>=((((vt1.c0))>=((vt1.c0)))))))) ORDER BY ((vt1.c0 COLLATE NOCASE) IS FALSE), vt1.c0 ASC  NULLS LAST LIMIT 0X3 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)>=(vt1.c0))) ORDER BY ((vt1.c0 COLLATE NOCASE) IS FALSE), vt1.c0 ASC  NULLS LAST LIMIT 0x3;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 AS REAL))IS('-647783693' COLLATE BINARY))) ORDER BY CAST(vt1.c0 AS INTEGER) ASC  NULLS FIRST, ((vt1.c0) BETWEEN (((vt1.c0) ISNULL)) AND (vt1.c0 COLLATE RTRIM)) ASC;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((CAST(vt1.c0 AS REAL))IS('-647783693' COLLATE BINARY)))AND(((((vt1.c0) IS FALSE))>((((vt1.c0))>((vt1.c0)))))))) ORDER BY CAST(vt1.c0 AS INTEGER) ASC  NULLS FIRST, ((vt1.c0) BETWEEN (((vt1.c0) ISNULL)) AND (vt1.c0 COLLATE RTRIM)) ASC LIMIT 1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOTNULL)) ORDER BY vt1.c0 ASC, vt1.c0, CASE ((vt1.c0)<<(vt1.c0))  WHEN NULLIF(DISTINCT vt1.c0, vt1.c0) THEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) WHEN ((('1251045505', NULL, vt1.c0, vt1.c0))>(('-499619510', vt1.c0, vt1.c0, vt1.c0))) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((('-732813397', vt1.c0)) BETWEEN (('-792507701', vt1.c0)) AND ((vt1.c0, vt1.c0))) THEN LIKELY(DISTINCT -5.8887415E7) ELSE (- (vt1.c0)) END  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOTNULL)) ORDER BY ((vt1.c0) ISNULL) COLLATE RTRIM  NULLS FIRST, CASE vt1.c0 COLLATE RTRIM  WHEN CAST(vt1.c0 AS INTEGER) THEN TOTAL_CHANGES() WHEN ((0.9273801907456247) NOTNULL) THEN ((vt1.c0)&(x'f5e7')) WHEN vt1.c0 COLLATE RTRIM THEN ((vt1.c0)<=(vt1.c0)) END DESC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (((((rt0.c3)IS(rt0.c1))) ISNULL)) ORDER BY (((rt0.c2 IN (rt0.c1)))||(rt0.c0 COLLATE BINARY));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((rt0.c3)IS(rt0.c1))) ISNULL))AND((NOT (LTRIM(NULL, rt0.c3)))))) ORDER BY ((((rt0.c1)<(rt0.c3))) ISNULL) ASC LIMIT 0X2;
SELECT * FROM vt1, rt0 WHERE (((((rt0.c3)IS(rt0.c1))) ISNULL)) ORDER BY (((rt0.c2 IN (rt0.c1)))||(rt0.c0 COLLATE BINARY));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((rt0.c3)IS(rt0.c1))) ISNULL))AND((NOT (LTRIM(NULL, rt0.c3)))))) ORDER BY ((((rt0.c1)<(rt0.c3))) ISNULL) ASC LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE (CASE ((vt1.c0)>(vt1.c0))  WHEN vt1.c0 THEN vt1.c0 WHEN ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) THEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) WHEN ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0)||(vt1.c0)) THEN ((vt1.c0)/(vt1.c0)) ELSE ((vt1.c0) ISNULL) END) ORDER BY vt1.c0 ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((CASE ((vt1.c0)>(vt1.c0))  WHEN vt1.c0 THEN vt1.c0 WHEN ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) THEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) WHEN ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0)||(vt1.c0)) THEN ((vt1.c0)/(vt1.c0)) ELSE ((vt1.c0) ISNULL) END)AND(((((((x'f1', vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((0.3206640652508097, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0))), ((vt1.c0)+(vt1.c0)), ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))))!=((((vt1.c0)|(vt1.c0)), CAST(vt1.c0 AS INTEGER), (((vt1.c0, NULL, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0))))))))) ORDER BY vt1.c0 ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE (x'f4') ORDER BY vt1.c0 ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (CASE ((vt1.c0)>(vt1.c0))  WHEN vt1.c0 THEN vt1.c0 WHEN ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) THEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) WHEN ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0)||(vt1.c0)) THEN ((vt1.c0)/(vt1.c0)) ELSE ((vt1.c0) ISNULL) END) ORDER BY vt1.c0 ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((CASE ((vt1.c0)>(vt1.c0))  WHEN vt1.c0 THEN vt1.c0 WHEN ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) THEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) WHEN ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0)||(vt1.c0)) THEN ((vt1.c0)/(vt1.c0)) ELSE ((vt1.c0) ISNULL) END)AND(((((((x'f1', vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((0.3206640652508097, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0))), ((vt1.c0)+(vt1.c0)), ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))))!=((((vt1.c0)|(vt1.c0)), CAST(vt1.c0 AS INTEGER), (((vt1.c0, NULL, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0))))))))) ORDER BY vt1.c0 ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE (x'f4') ORDER BY vt1.c0 ASC  NULLS LAST;
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (PRINTF(((('-618343155', rt0.c1, rt0.c2, rt0.c0))<=((rt0.c3, '-1302896843', rt0.c2, vt1.c0))), rt0.c1)) ORDER BY (((rt0.c3, rt0.c2, rt0.c2, rt0.c3)) NOT BETWEEN ((((vt1.c0)==(vt1.c0)), vt1.c0, CASE WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN 0.5424920228405733 END, RTRIM(rt0.c1))) AND ((((vt1.c0)<>(vt1.c0)), CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN NULL WHEN '?' THEN rt0.c0 ELSE vt1.c0 END, CAST(rt0.c2 AS REAL), (((rt0.c2, rt0.c1))>=((rt0.c3, vt1.c0)))))) DESC  NULLS LAST;
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (((PRINTF(((('-618343155', rt0.c1, rt0.c2, rt0.c0))<=((rt0.c3, '-1302896843', rt0.c2, vt1.c0))), rt0.c1))AND(((CASE rt0.c2  WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END)GLOB(CAST(vt1.c0 AS INTEGER)))))) ORDER BY x'7e' INTERSECT SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (CAST(((((((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)))OR(vt1.c0)))OR(rt0.c2)) AS BLOB)) ORDER BY x'7e';
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c3)<>(vt1.c0)) COLLATE NOCASE) ORDER BY SQLITE_VERSION(), x'b4' DESC;
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c3)<(vt1.c0)) COLLATE NOCASE) ORDER BY ((((((((((((((vt1.c0)OR(vt1.c0)))OR(rt0.c2)))OR(NULL)))AND(vt1.c0)))AND(rt0.c1)))OR((((rt0.c1, rt0.c3, vt1.c0)) NOT BETWEEN ((rt0.c2, rt0.c2, vt1.c0)) AND ((vt1.c0, rt0.c0, vt1.c0))))))OR(TRIM(DISTINCT rt0.c0)))  NULLS LAST, rt0.c3 DESC;
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE (((NULL)<>(((((rt0.c3)OR(rt0.c3)))OR(rt0.c1)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE (((NULL)>(((((rt0.c3)OR(rt0.c3)))OR(rt0.c1))))) ORDER BY CASE WHEN CASE WHEN rt0.c0 THEN x'' END THEN (+ (vt1.c0)) ELSE -1.127236167E9 END  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE ((+ ('2042696920'))) ORDER BY CASE WHEN CASE WHEN rt0.c0 THEN x'' END THEN (+ (vt1.c0)) ELSE -1.127236167E9 END  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((((NULL)IS NOT(rt0.c3)))AND(((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(CAST(rt0.c0 AS TEXT))) WHERE (((((((((NULL)OR(rt0.c3)))AND('?')))OR(rtreenode(rt0.c0, NULL))))AND(((rt0.c2)<=(rt0.c2)))));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((((NULL)IS NOT(rt0.c3)))AND(((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(CAST(rt0.c0 AS TEXT))) WHERE (((((((((((NULL)OR(rt0.c3)))AND('?')))OR(rtreenode(rt0.c0, NULL))))AND(((rt0.c2)<=(rt0.c2)))))AND(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c0 END COLLATE BINARY)));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((((NULL)IS NOT(rt0.c3)))AND(((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(CAST(rt0.c0 AS TEXT))) WHERE (((((((((NULL)OR(rt0.c3)))AND('?')))OR(rtreenode(rt0.c0, NULL))))AND(((rt0.c2)<=(rt0.c2)))));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((((NULL)IS NOT(rt0.c3)))AND(((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(CAST(rt0.c0 AS TEXT))) WHERE (((((((((((NULL)OR(rt0.c3)))AND('?')))OR(rtreenode(rt0.c0, NULL))))AND(((rt0.c2)<=(rt0.c2)))))AND(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c0 END COLLATE BINARY)));
SELECT COUNT(*) FROM rt0, vt1 WHERE (((CASE WHEN rt0.c1 THEN NULL WHEN rt0.c1 THEN rt0.c3 END)LIKE(((rt0.c0)<<(vt1.c0)))));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((CASE WHEN rt0.c1 THEN NULL WHEN rt0.c1 THEN rt0.c3 END)LIKE(((rt0.c0)<<(vt1.c0)))))AND(((rt0.c2 COLLATE NOCASE)>(((rt0.c1)<=(rt0.c0))))))) LIMIT 0;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE ((((rt0.c1, rt0.c0))<((rt0.c1, rt0.c1))) COLLATE NOCASE);
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE ((((rt0.c1, rt0.c0))<((rt0.c1, rt0.c1))) COLLATE NOCASE) ORDER BY (((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 END, (NOT (x'544548')), CASE NULL  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END, CAST(rt0.c2 AS TEXT), CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END))!=((((0.9918359539233562)LIKE(rt0.c0)), NULL, vt1.c0 COLLATE BINARY, NULL, (((rt0.c2, rt0.c3))<((rt0.c0, vt1.c0)))))) DESC, ((CASE WHEN NULL THEN rt0.c2 END) IS TRUE) INTERSECT SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (CASE rt0.c3  WHEN vt1.c0 THEN x'b5' WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 ELSE x'' END COLLATE NOCASE COLLATE RTRIM) ORDER BY (((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 END, (NOT (x'544548')), CASE NULL  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END, CAST(rt0.c2 AS TEXT), CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END))<>((((0.9918359539233562)LIKE(rt0.c0)), NULL, vt1.c0 COLLATE BINARY, NULL, (((rt0.c2, rt0.c3))<((rt0.c0, vt1.c0)))))) DESC, ((CASE WHEN NULL THEN rt0.c2 END) IS TRUE);
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE ((((rt0.c1, rt0.c0))<((rt0.c1, rt0.c1))) COLLATE NOCASE);
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE ((((rt0.c1, rt0.c0))<((rt0.c1, rt0.c1))) COLLATE NOCASE) ORDER BY (((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 END, (NOT (x'544548')), CASE NULL  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END, CAST(rt0.c2 AS TEXT), CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END))!=((((0.9918359539233562)LIKE(rt0.c0)), NULL, vt1.c0 COLLATE BINARY, NULL, (((rt0.c2, rt0.c3))<((rt0.c0, vt1.c0)))))) DESC, ((CASE WHEN NULL THEN rt0.c2 END) IS TRUE) INTERSECT SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (CASE rt0.c3  WHEN vt1.c0 THEN x'b5' WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 ELSE x'' END COLLATE NOCASE COLLATE RTRIM) ORDER BY (((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 END, (NOT (x'544548')), CASE NULL  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END, CAST(rt0.c2 AS TEXT), CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END))<>((((0.9918359539233562)LIKE(rt0.c0)), NULL, vt1.c0 COLLATE BINARY, NULL, (((rt0.c2, rt0.c3))<((rt0.c0, vt1.c0)))))) DESC, ((CASE WHEN NULL THEN rt0.c2 END) IS TRUE);
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2)) IN ((((rt0.c1, rt0.c2))=((x'72a8637a', rt0.c2)))))) ORDER BY CAST(((vt1.c0)AND(rt0.c2)) AS INTEGER)  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2)) IN ((((rt0.c1, rt0.c2))=((x'72a8637a', rt0.c2))))))AND(((((((CAST(rt0.c1 AS INTEGER))AND(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 END)))AND(rt0.c3)))OR(rt0.c2))))) ORDER BY CAST(((vt1.c0)AND(rt0.c2)) AS INTEGER)  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2)) IN ((((rt0.c1, rt0.c2))=((x'72a8637a', rt0.c2)))))) ORDER BY CAST(((vt1.c0)AND(rt0.c2)) AS INTEGER)  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2)) IN ((((rt0.c1, rt0.c2))=((x'72a8637a', rt0.c2))))))AND(((((((CAST(rt0.c1 AS INTEGER))AND(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 END)))AND(rt0.c3)))OR(rt0.c2))))) ORDER BY CAST(((vt1.c0)AND(rt0.c2)) AS INTEGER)  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)IS(vt1.c0 COLLATE NOCASE))) ORDER BY '774386652' ASC;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)IS(vt1.c0 COLLATE NOCASE))) ORDER BY ((((~ (vt1.c0))))>((CAST(vt1.c0 AS BLOB)))) ASC;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)IS(vt1.c0 COLLATE NOCASE))) ORDER BY '774386652' ASC;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)IS(vt1.c0 COLLATE NOCASE))) ORDER BY ((((~ (vt1.c0))))>((CAST(vt1.c0 AS BLOB)))) ASC;
SELECT ALL * FROM vt1, rt0 WHERE (((((CAST(rt0.c0 AS TEXT))OR(CASE WHEN rt0.c3 THEN vt1.c0 END)))OR(NULL COLLATE BINARY)));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((CAST(rt0.c0 AS TEXT))OR(CASE WHEN rt0.c3 THEN vt1.c0 END)))OR(NULL COLLATE BINARY)))AND(rt0.c3)));
SELECT ALL * FROM vt1, rt0 WHERE (((((CAST(rt0.c0 AS TEXT))OR(CASE WHEN rt0.c3 THEN vt1.c0 END)))OR(NULL COLLATE BINARY)));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((CAST(rt0.c0 AS TEXT))OR(CASE WHEN rt0.c3 THEN vt1.c0 END)))OR(NULL COLLATE BINARY)))AND(rt0.c3)));
SELECT MAX(rt0.c1) FROM rt0 WHERE (rt0.c1);
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (((rt0.c1)AND((+ (CASE WHEN rt0.c0 THEN rt0.c1 END))))) ORDER BY CAST((((x'a842', rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c1)) AND ((rt0.c3, rt0.c3))) AS BLOB) ASC, ((((((rt0.c1)%(rt0.c0)))AND(rt0.c3)))OR((rt0.c3 IN (rt0.c3))))  NULLS LAST LIMIT 0x1;
SELECT ALL COUNT(*) FROM rt0 WHERE (CAST(((rt0.c3)>=(rt0.c3)) AS INTEGER)) ORDER BY ((CAST(rt0.c0 AS BLOB))>>(82635964)) DESC, ((((rt0.c0)=(rt0.c2)))>>(rt0.c3)) ASC;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((CAST(((rt0.c3)>(rt0.c3)) AS INTEGER))AND(((((((((((CASE rt0.c2  WHEN '-1688611678' THEN rt0.c3 ELSE rt0.c0 END)OR(((rt0.c1)%(0.5987249856645107)))))OR(CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN 0.3110504564435408 ELSE rt0.c0 END)))AND(((rt0.c1)/(rt0.c2)))))AND((((rt0.c0, 0.6044970158940646, rt0.c3))<((rt0.c2, rt0.c2, rt0.c1))))))OR(TRIM('也')))))) ORDER BY ((CAST(rt0.c0 AS BLOB))>>(0x4ececbc)) DESC, ((((rt0.c0)==(rt0.c2)))>>(rt0.c3)) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (rt0.c3) ORDER BY ((CAST(rt0.c0 AS BLOB))>>(0x4ececbc)) DESC, ((((rt0.c0)==(rt0.c2)))>>(rt0.c3)) ASC LIMIT 0X0;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'00b8' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '-1982442086' END)<=((~ (NULL))))) ORDER BY vt1.c0 DESC, ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC  NULLS LAST, ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) NOT NULL)  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'00b8' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '-1982442086' END)<=((~ (NULL)))))AND(TYPEOF(vt1.c0) COLLATE NOCASE))) ORDER BY vt1.c0 DESC, ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC  NULLS LAST, ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) NOT NULL)  NULLS FIRST LIMIT 1 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((('448047733')>>(((vt1.c0) IS TRUE)))) ORDER BY vt1.c0 DESC, ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC  NULLS LAST, ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) NOT NULL)  NULLS FIRST LIMIT 0X1;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE ((((rt0.c1)<=(rt0.c2)) IN (CAST(rt0.c2 AS NUMERIC))));
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE ((((rt0.c1)<=(rt0.c2)) IN (CAST(rt0.c2 AS NUMERIC)))) INTERSECT SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (((((((vt1.c0)OR(rt0.c1)))OR(vt1.c0)))-(((rt0.c3)IS(rt0.c0)))));
SELECT MAX(rt0.c0) FROM rt0 WHERE (((CASE rt0.c3  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN x'6e' WHEN rt0.c3 THEN NULL ELSE rt0.c2 END)==(CAST(rt0.c1 AS REAL)))) ORDER BY ((NULL)LIKE(CASE WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c3 END))  NULLS LAST, (((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)) IN ()) ASC;
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (((((CASE rt0.c3  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN x'6e' WHEN rt0.c3 THEN NULL ELSE rt0.c2 END)=(CAST(rt0.c1 AS REAL))))AND((((rt0.c2)) BETWEEN (('t<J')) AND ((((rt0.c3)IS NOT(rt0.c1)))))))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c2)))=(((((((((((((((rt0.c3)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c2)))AND(0X798b8289)))OR('-1060138128')))AND(rt0.c2)))AND(rt0.c2)))) ASC  NULLS FIRST, ((((((((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)))OR(((rt0.c2) ISNULL))))AND(rt0.c2 COLLATE RTRIM)))OR(rt0.c0 COLLATE RTRIM)))OR(NULLIF(rt0.c2, rt0.c1))) ASC INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (((('-519497950' IN ())) BETWEEN (rt0.c2) AND ((rt0.c1 IN ())))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c2)))==(((((((((((((((rt0.c3)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c2)))AND(2039186057)))OR('-1060138128')))AND(rt0.c2)))AND(rt0.c2)))) ASC  NULLS FIRST, ((((((((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)))OR(((rt0.c2) ISNULL))))AND(rt0.c2 COLLATE RTRIM)))OR(rt0.c0 COLLATE RTRIM)))OR(NULLIF(rt0.c2, rt0.c1))) ASC;
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE (((CAST(rt0.c3 AS NUMERIC)) ISNULL));
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE (((((CAST(rt0.c3 AS NUMERIC)) ISNULL))AND(CAST(((((((vt1.c0)AND(rt0.c3)))OR(vt1.c0)))AND(rt0.c2)) AS TEXT)))) INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE (((((((((x'2e83')OR(CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN rt0.c3 END)))OR(CASE NULL  WHEN rt0.c1 THEN rt0.c3 END)))OR(rt0.c2 COLLATE RTRIM)))OR((rt0.c2 IN (x'c354')))));
SELECT * FROM vt1, rt0 WHERE ('-849916073') ORDER BY ((((~ (rt0.c1)), x'', 0.8050360704466362 COLLATE BINARY))==((((rt0.c2) NOT BETWEEN (rt0.c1) AND (NULL)), ((rt0.c3)-(rt0.c0)), 0Xffffffffef20bd88))) DESC  NULLS FIRST, ((((((((rt0.c1)OR(vt1.c0)))AND(rt0.c2)))AND(rt0.c3))) NOT BETWEEN (((rt0.c3) NOTNULL)) AND ((((rt0.c1, rt0.c1, rt0.c3))<=((rt0.c2, rt0.c3, rt0.c0))))), CASE WHEN ((rt0.c0)/(vt1.c0)) THEN (('-1028226782') BETWEEN (rt0.c0) AND (vt1.c0)) WHEN ((rt0.c3) BETWEEN (rt0.c2) AND (vt1.c0)) THEN ((rt0.c0) IS FALSE) WHEN ((rt0.c3) IS FALSE) THEN ((rt0.c0)>(rt0.c2)) WHEN ((rt0.c0) ISNULL) THEN rt0.c1 COLLATE BINARY END ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ('-849916073') ORDER BY ((((~ (rt0.c1)), x'', 0.8050360704466362 COLLATE BINARY))==((((rt0.c2) NOT BETWEEN (rt0.c1) AND (NULL)), ((rt0.c3)-(rt0.c0)), -283067000))) DESC  NULLS FIRST, ((((((((rt0.c1)OR(vt1.c0)))AND(rt0.c2)))AND(rt0.c3))) NOT BETWEEN (((rt0.c3) NOTNULL)) AND ((((rt0.c1, rt0.c1, rt0.c3))<=((rt0.c2, rt0.c3, rt0.c0))))), CASE WHEN ((rt0.c0)/(vt1.c0)) THEN (('-1028226782') BETWEEN (rt0.c0) AND (vt1.c0)) WHEN ((rt0.c3) BETWEEN (rt0.c2) AND (vt1.c0)) THEN ((rt0.c0) IS FALSE) WHEN ((rt0.c3) IS FALSE) THEN ((rt0.c0)>(rt0.c2)) WHEN ((rt0.c0) ISNULL) THEN rt0.c1 COLLATE BINARY END ASC LIMIT 0X0;
SELECT * FROM vt1, rt0 WHERE ('-849916073') ORDER BY ((((~ (rt0.c1)), x'', 0.8050360704466362 COLLATE BINARY))==((((rt0.c2) NOT BETWEEN (rt0.c1) AND (NULL)), ((rt0.c3)-(rt0.c0)), 0Xffffffffef20bd88))) DESC  NULLS FIRST, ((((((((rt0.c1)OR(vt1.c0)))AND(rt0.c2)))AND(rt0.c3))) NOT BETWEEN (((rt0.c3) NOTNULL)) AND ((((rt0.c1, rt0.c1, rt0.c3))<=((rt0.c2, rt0.c3, rt0.c0))))), CASE WHEN ((rt0.c0)/(vt1.c0)) THEN (('-1028226782') BETWEEN (rt0.c0) AND (vt1.c0)) WHEN ((rt0.c3) BETWEEN (rt0.c2) AND (vt1.c0)) THEN ((rt0.c0) IS FALSE) WHEN ((rt0.c3) IS FALSE) THEN ((rt0.c0)>(rt0.c2)) WHEN ((rt0.c0) ISNULL) THEN rt0.c1 COLLATE BINARY END ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ('-849916073') ORDER BY ((((~ (rt0.c1)), x'', 0.8050360704466362 COLLATE BINARY))==((((rt0.c2) NOT BETWEEN (rt0.c1) AND (NULL)), ((rt0.c3)-(rt0.c0)), -283067000))) DESC  NULLS FIRST, ((((((((rt0.c1)OR(vt1.c0)))AND(rt0.c2)))AND(rt0.c3))) NOT BETWEEN (((rt0.c3) NOTNULL)) AND ((((rt0.c1, rt0.c1, rt0.c3))<=((rt0.c2, rt0.c3, rt0.c0))))), CASE WHEN ((rt0.c0)/(vt1.c0)) THEN (('-1028226782') BETWEEN (rt0.c0) AND (vt1.c0)) WHEN ((rt0.c3) BETWEEN (rt0.c2) AND (vt1.c0)) THEN ((rt0.c0) IS FALSE) WHEN ((rt0.c3) IS FALSE) THEN ((rt0.c0)>(rt0.c2)) WHEN ((rt0.c0) ISNULL) THEN rt0.c1 COLLATE BINARY END ASC LIMIT 0X0;
SELECT MIN(rt0.c2) FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c0 THEN NULL ELSE rt0.c3 END)>=((rt0.c2 IN ()))));
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c0 THEN NULL ELSE rt0.c3 END)>((rt0.c2 IN ())))) ORDER BY CASE CAST(rt0.c1 AS TEXT)  WHEN CASE rt0.c3  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN NULL WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 END THEN rt0.c1 ELSE ((x'ff') IS TRUE) END  NULLS FIRST INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((((rt0.c2) NOT NULL)) NOT NULL)) ORDER BY CASE CAST(rt0.c1 AS TEXT)  WHEN CASE rt0.c3  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN NULL WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 END THEN rt0.c1 ELSE ((x'ff') IS TRUE) END  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (UNLIKELY((((vt1.c0))<=(('613419071'))))) ORDER BY TRIM(DISTINCT (vt1.c0 IN ()), (~ (vt1.c0))) DESC, ((vt1.c0 COLLATE RTRIM)IS(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((UNLIKELY((((vt1.c0))<=(('613419071')))))AND(CASE ((vt1.c0) IS TRUE)  WHEN ((vt1.c0) NOTNULL) THEN ((vt1.c0)GLOB(NULL)) END))) ORDER BY (vt1.c0 COLLATE NOCASE IN ());
SELECT ALL * FROM vt1 WHERE (UNLIKELY((((vt1.c0))<=(('613419071'))))) ORDER BY TRIM(DISTINCT (vt1.c0 IN ()), (~ (vt1.c0))) DESC, ((vt1.c0 COLLATE RTRIM)IS(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((UNLIKELY((((vt1.c0))<=(('613419071')))))AND(CASE ((vt1.c0) IS TRUE)  WHEN ((vt1.c0) NOTNULL) THEN ((vt1.c0)GLOB(NULL)) END))) ORDER BY (vt1.c0 COLLATE NOCASE IN ());
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (((((vt1.c0 COLLATE BINARY)OR((+ (rt0.c2)))))OR(((rt0.c2)|(rt0.c1)))));
SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (((((((vt1.c0 COLLATE BINARY)OR((+ (rt0.c2)))))OR(((rt0.c2)|(rt0.c1)))))AND(((((((vt1.c0 COLLATE RTRIM)OR(vt1.c0)))AND(rt0.c1 COLLATE BINARY)))AND(((((((rt0.c3)OR(rt0.c1)))OR(rt0.c3)))AND(rt0.c0))))))) INTERSECT SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (((NULL)>=((~ (rt0.c0)))));
SELECT MIN(rt0.c1) FROM rt0 WHERE (CAST(696743305 AS REAL));
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE (CAST(0x29877589 AS REAL)) ORDER BY ((((((((((((NULL)AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c3)))/(json_type(rt0.c1))) DESC  NULLS LAST LIMIT 2;
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE (COALESCE(rt0.c1 COLLATE BINARY, ((0.6005947234803297)>(rt0.c3)), vt1.c0 COLLATE NOCASE, ((vt1.c0)<>(rt0.c1))));
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (((COALESCE(rt0.c1 COLLATE BINARY, ((0.6005947234803297)>(rt0.c3)), vt1.c0 COLLATE NOCASE, ((vt1.c0)!=(rt0.c1))))AND('~L'))) INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (((LIKELIHOOD(rt0.c0, NULL)) BETWEEN ((rt0.c3 IN ())) AND ((((rt0.c3)) BETWEEN ((rt0.c3)) AND ((rt0.c2))))));
SELECT ALL COUNT(*) FROM rt0 INNER JOIN vt1 ON CAST(rt0.c2 COLLATE RTRIM AS REAL) WHERE (((x'd3') BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c0))) AND (IFNULL(rt0.c2, rt0.c1)))) ORDER BY vt1.c0 DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0 INNER JOIN vt1 ON CAST(rt0.c2 COLLATE RTRIM AS REAL) WHERE (((((x'd3') BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c0))) AND (IFNULL(rt0.c2, rt0.c1))))AND((((rt0.c3, rt0.c2)) NOT BETWEEN (((- (rt0.c1)), ((((((((vt1.c0)OR(rt0.c2)))AND(rt0.c0)))OR(rt0.c1)))OR(rt0.c0)))) AND ((LIKELY(rt0.c3), ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c2)))))))) ORDER BY vt1.c0 DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM rt0 INNER JOIN vt1 ON CAST(rt0.c2 COLLATE RTRIM AS REAL) WHERE (((json_array_length(rt0.c1, vt1.c0))|(CAST(rt0.c0 AS BLOB)))) ORDER BY vt1.c0 DESC  NULLS FIRST LIMIT 0x0;
SELECT * FROM rt0 WHERE ((((NOT (rt0.c3))) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND (((((rt0.c1)OR(rt0.c2)))AND(rt0.c1)))));
SELECT ALL * FROM rt0 WHERE ((((((NOT (rt0.c3))) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND (((((rt0.c1)OR(rt0.c2)))AND(rt0.c1)))))AND(CAST((((rt0.c1)) BETWEEN ((-6.18343155E8)) AND ((rt0.c2))) AS NUMERIC)))) ORDER BY ((((rt0.c2)AND(rt0.c0))) IS TRUE) ASC, ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c0)) COLLATE RTRIM LIMIT 0X1 INTERSECT SELECT * FROM rt0 WHERE (rt0.c1 COLLATE RTRIM COLLATE BINARY) ORDER BY ((((rt0.c2)AND(rt0.c0))) IS TRUE) ASC, ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c0)) COLLATE RTRIM LIMIT 1;
SELECT * FROM rt0 WHERE ((((NOT (rt0.c3))) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND (((((rt0.c1)OR(rt0.c2)))AND(rt0.c1)))));
SELECT ALL * FROM rt0 WHERE ((((((NOT (rt0.c3))) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND (((((rt0.c1)OR(rt0.c2)))AND(rt0.c1)))))AND(CAST((((rt0.c1)) BETWEEN ((-6.18343155E8)) AND ((rt0.c2))) AS NUMERIC)))) ORDER BY ((((rt0.c2)AND(rt0.c0))) IS TRUE) ASC, ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c0)) COLLATE RTRIM LIMIT 0X1 INTERSECT SELECT * FROM rt0 WHERE (rt0.c1 COLLATE RTRIM COLLATE BINARY) ORDER BY ((((rt0.c2)AND(rt0.c0))) IS TRUE) ASC, ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c0)) COLLATE RTRIM LIMIT 1;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((((rt0.c0) IS FALSE))LIKE(((rt0.c2) NOTNULL))));
SELECT MAX(rt0.c2) FROM rt0 WHERE (((((((rt0.c0) IS FALSE))LIKE(((rt0.c2) NOTNULL))))AND((((rt0.c3)>=(rt0.c0)) IN (((rt0.c2)|(rt0.c1)), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (NULL))))))) INTERSECT SELECT MAX(rt0.c2) FROM rt0 WHERE (((CAST(rt0.c2 AS REAL))==(0.540962669160635)));
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((vt1.c0)) NOT BETWEEN ((((rt0.c3) NOT NULL))) AND ((CHANGES()))) WHERE (TRIM(((rt0.c0) ISNULL))) ORDER BY json_array_length(((rt0.c1)AND(rt0.c3)), (+ (0xffffffffc5dd618f)))  NULLS LAST, ((((((rt0.c2)OR(rt0.c1)))OR(0.5286762140952553)))OR(rt0.c2)) COLLATE RTRIM DESC;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON (((vt1.c0)) NOT BETWEEN ((((rt0.c3) NOT NULL))) AND ((CHANGES()))) WHERE (((TRIM(((rt0.c0) ISNULL)))AND((NOT (((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c1))))))) ORDER BY json_array_length(((rt0.c1)AND(rt0.c3)), (+ (-975347313)))  NULLS LAST, ((((((rt0.c2)OR(rt0.c1)))OR(0.5286762140952553)))OR(rt0.c2)) COLLATE RTRIM DESC INTERSECT SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((vt1.c0)) NOT BETWEEN ((((rt0.c3) NOT NULL))) AND ((CHANGES()))) WHERE ((((rt0.c0, rt0.c1)) BETWEEN ((rt0.c1, (- (rt0.c3)))) AND ((CAST(rt0.c3 AS INTEGER), ((((((rt0.c1)AND(rt0.c0)))AND(vt1.c0)))OR(rt0.c3)))))) ORDER BY json_array_length(((rt0.c1)AND(rt0.c3)), (+ (-975347313)))  NULLS LAST, ((((((rt0.c2)OR(rt0.c1)))OR(0.5286762140952553)))OR(rt0.c2)) COLLATE RTRIM DESC;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((vt1.c0)) NOT BETWEEN ((((rt0.c3) NOT NULL))) AND ((CHANGES()))) WHERE (TRIM(((rt0.c0) ISNULL))) ORDER BY json_array_length(((rt0.c1)AND(rt0.c3)), (+ (0xffffffffc5dd618f)))  NULLS LAST, ((((((rt0.c2)OR(rt0.c1)))OR(0.5286762140952553)))OR(rt0.c2)) COLLATE RTRIM DESC;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON (((vt1.c0)) NOT BETWEEN ((((rt0.c3) NOT NULL))) AND ((CHANGES()))) WHERE (((TRIM(((rt0.c0) ISNULL)))AND((NOT (((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c1))))))) ORDER BY json_array_length(((rt0.c1)AND(rt0.c3)), (+ (-975347313)))  NULLS LAST, ((((((rt0.c2)OR(rt0.c1)))OR(0.5286762140952553)))OR(rt0.c2)) COLLATE RTRIM DESC INTERSECT SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((vt1.c0)) NOT BETWEEN ((((rt0.c3) NOT NULL))) AND ((CHANGES()))) WHERE ((((rt0.c0, rt0.c1)) BETWEEN ((rt0.c1, (- (rt0.c3)))) AND ((CAST(rt0.c3 AS INTEGER), ((((((rt0.c1)AND(rt0.c0)))AND(vt1.c0)))OR(rt0.c3)))))) ORDER BY json_array_length(((rt0.c1)AND(rt0.c3)), (+ (-975347313)))  NULLS LAST, ((((((rt0.c2)OR(rt0.c1)))OR(0.5286762140952553)))OR(rt0.c2)) COLLATE RTRIM DESC;
SELECT ALL * FROM vt1 WHERE (((((((((((json_array(vt1.c0, vt1.c0, vt1.c0))AND((vt1.c0 IN (vt1.c0)))))AND(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)))AND(vt1.c0)))OR('#9{_''')))AND(CAST(NULL AS BLOB)))) ORDER BY CASE (vt1.c0 IN ())  WHEN ((vt1.c0)>(vt1.c0)) THEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) ELSE ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END ASC  NULLS LAST, CASE WHEN (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN UNLIKELY(DISTINCT vt1.c0) THEN ((vt1.c0)=(vt1.c0)) ELSE (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) END DESC, ((((((((vt1.c0) ISNULL))AND((~ (vt1.c0)))))AND(((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(x'37778bfb')))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))OR(vt1.c0 COLLATE BINARY));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((((json_array(vt1.c0, vt1.c0, vt1.c0))AND((vt1.c0 IN (vt1.c0)))))AND(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)))AND(vt1.c0)))OR('#9{_''')))AND(CAST(NULL AS BLOB))))AND(vt1.c0))) ORDER BY (((vt1.c0) BETWEEN (NULL) AND (vt1.c0)) IN (((vt1.c0) NOTNULL))) DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((CAST(vt1.c0 AS REAL)))<>((((vt1.c0) BETWEEN (vt1.c0) AND (0X2a79b0ad)))))) ORDER BY (((vt1.c0) BETWEEN (NULL) AND (vt1.c0)) IN (((vt1.c0) NOTNULL))) DESC;
SELECT ALL * FROM vt1 WHERE (((((((((((json_array(vt1.c0, vt1.c0, vt1.c0))AND((vt1.c0 IN (vt1.c0)))))AND(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)))AND(vt1.c0)))OR('#9{_''')))AND(CAST(NULL AS BLOB)))) ORDER BY CASE (vt1.c0 IN ())  WHEN ((vt1.c0)>(vt1.c0)) THEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) ELSE ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END ASC  NULLS LAST, CASE WHEN (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN UNLIKELY(DISTINCT vt1.c0) THEN ((vt1.c0)=(vt1.c0)) ELSE (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) END DESC, ((((((((vt1.c0) ISNULL))AND((~ (vt1.c0)))))AND(((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(x'37778bfb')))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))OR(vt1.c0 COLLATE BINARY));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((((json_array(vt1.c0, vt1.c0, vt1.c0))AND((vt1.c0 IN (vt1.c0)))))AND(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)))AND(vt1.c0)))OR('#9{_''')))AND(CAST(NULL AS BLOB))))AND(vt1.c0))) ORDER BY (((vt1.c0) BETWEEN (NULL) AND (vt1.c0)) IN (((vt1.c0) NOTNULL))) DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((CAST(vt1.c0 AS REAL)))<>((((vt1.c0) BETWEEN (vt1.c0) AND (0X2a79b0ad)))))) ORDER BY (((vt1.c0) BETWEEN (NULL) AND (vt1.c0)) IN (((vt1.c0) NOTNULL))) DESC;
SELECT ALL MAX(vt1.c0) FROM vt1 LEFT OUTER JOIN rt0 ON ((rt0.c0 IN ()) IN (LIKELY(rt0.c1))) WHERE ((((vt1.c0)IS NOT(rt0.c2)) IN (((rt0.c0) IS FALSE))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 INNER JOIN rt0 ON ((rt0.c0 IN ()) IN (LIKELY(rt0.c1))) WHERE ((((vt1.c0)IS NOT(rt0.c2)) IN (((rt0.c0) IS FALSE)))) ORDER BY (((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3)) IN (rt0.c2 COLLATE NOCASE)) ASC  NULLS LAST, ((CASE WHEN rt0.c0 THEN vt1.c0 WHEN x'18' THEN '02~' WHEN rt0.c3 THEN rt0.c3 END) NOT BETWEEN ((- (vt1.c0))) AND (((vt1.c0)LIKE(vt1.c0)))) DESC;
SELECT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY CASE vt1.c0 COLLATE NOCASE  WHEN NULLIF(vt1.c0, vt1.c0) THEN ((vt1.c0) IS FALSE) WHEN SQLITE_VERSION() THEN 0.3318669429754192 WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN (vt1.c0 IN ()) END  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY CAST(json_patch(vt1.c0, vt1.c0) AS BLOB) ASC  NULLS FIRST, ((((((((((vt1.c0)AND(0.7241807467882587)))AND('1911980812')))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (UNICODE(vt1.c0)) ORDER BY CAST(json_patch(vt1.c0, vt1.c0) AS BLOB) ASC  NULLS FIRST, ((((((((((vt1.c0)AND(0.7241807467882587)))AND('1911980812')))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((-331876554) BETWEEN ((((vt1.c0))=((vt1.c0)))) AND (((vt1.c0) ISNULL)))) ORDER BY LIKELIHOOD(((vt1.c0)OR(vt1.c0)), vt1.c0);
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((-331876554) BETWEEN ((((vt1.c0))==((vt1.c0)))) AND (((vt1.c0) ISNULL)))) ORDER BY (NOT (((vt1.c0) NOT BETWEEN (vt1.c0) AND (x'')))), CAST(vt1.c0 COLLATE NOCASE AS REAL)  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CASE ((((-427357237)OR(vt1.c0)))OR(vt1.c0))  WHEN CASE vt1.c0  WHEN vt1.c0 THEN '1208182202' END THEN (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) END) ORDER BY (NOT (((vt1.c0) NOT BETWEEN (vt1.c0) AND (x'')))), CAST(vt1.c0 COLLATE NOCASE AS REAL)  NULLS FIRST LIMIT 0X0;
SELECT * FROM rt0 NOT INDEXED NATURAL JOIN vt1 WHERE ((0.26159960435746465 IN ((NOT ('892794502'))))) ORDER BY ((CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 END) BETWEEN (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2))) AND (((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2))))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE ((((0.26159960435746465 IN ((NOT ('892794502')))))AND('569458400'))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))) IS FALSE), CASE ((vt1.c0) IS TRUE)  WHEN ((vt1.c0)IS NOT(rt0.c1)) THEN CASE x'22'  WHEN rt0.c3 THEN rt0.c3 ELSE vt1.c0 END WHEN CAST(rt0.c1 AS INTEGER) THEN (rt0.c2 IN ()) END ASC, CASE CASE WHEN 'w' THEN rt0.c1 END  WHEN vt1.c0 COLLATE BINARY THEN (- (rt0.c1)) WHEN CASE rt0.c2  WHEN rt0.c0 THEN 0.846768583026729 ELSE rt0.c1 END THEN (rt0.c0 IN ()) WHEN rt0.c3 COLLATE RTRIM THEN rt0.c3 WHEN ((((((((rt0.c1)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c3)) THEN ((rt0.c3)GLOB('NU')) ELSE CASE WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c2 WHEN NULL THEN rt0.c0 END END ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM rt0 NOT INDEXED NATURAL JOIN vt1 WHERE ((0.26159960435746465 IN ((NOT ('892794502'))))) ORDER BY ((CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 END) BETWEEN (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2))) AND (((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2))))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE ((((0.26159960435746465 IN ((NOT ('892794502')))))AND('569458400'))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))) IS FALSE), CASE ((vt1.c0) IS TRUE)  WHEN ((vt1.c0)IS NOT(rt0.c1)) THEN CASE x'22'  WHEN rt0.c3 THEN rt0.c3 ELSE vt1.c0 END WHEN CAST(rt0.c1 AS INTEGER) THEN (rt0.c2 IN ()) END ASC, CASE CASE WHEN 'w' THEN rt0.c1 END  WHEN vt1.c0 COLLATE BINARY THEN (- (rt0.c1)) WHEN CASE rt0.c2  WHEN rt0.c0 THEN 0.846768583026729 ELSE rt0.c1 END THEN (rt0.c0 IN ()) WHEN rt0.c3 COLLATE RTRIM THEN rt0.c3 WHEN ((((((((rt0.c1)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c3)) THEN ((rt0.c3)GLOB('NU')) ELSE CASE WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c2 WHEN NULL THEN rt0.c0 END END ASC  NULLS LAST LIMIT 0X0;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (CASE WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3)) THEN CASE WHEN 0Xffffffff831f530f THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END WHEN CAST(0x11a018dd AS NUMERIC) THEN (NOT (NULL)) ELSE NULL END) ORDER BY ((((((((0Xffffffff92ad2429)OR(rt0.c2)))OR(CAST(rt0.c2 AS INTEGER))))AND(((rt0.c0)>=(rt0.c3)))))OR(rt0.c3)) ASC, (((((rt0.c1) ISNULL), rt0.c0, ((rt0.c1) NOT NULL), 'bGW'))==((x'', rt0.c2 COLLATE NOCASE, (((rt0.c1, rt0.c0, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c1, rt0.c0)) AND ((rt0.c3, rt0.c3, rt0.c2))), (((rt0.c2, x'', rt0.c0))<=((rt0.c1, rt0.c1, rt0.c1))))));
SELECT MIN(rt0.c2) FROM rt0 WHERE (CASE WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3)) THEN CASE WHEN -2095099121 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END WHEN CAST(295704797 AS NUMERIC) THEN (NOT (NULL)) ELSE NULL END) ORDER BY ((((((((-1834146775)OR(rt0.c2)))OR(CAST(rt0.c2 AS INTEGER))))AND(((rt0.c0)>=(rt0.c3)))))OR(rt0.c3)) ASC, (((((rt0.c1) ISNULL), rt0.c0, ((rt0.c1) NOT NULL), 'bGW'))==((x'', rt0.c2 COLLATE NOCASE, (((rt0.c1, rt0.c0, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c1, rt0.c0)) AND ((rt0.c3, rt0.c3, rt0.c2))), (((rt0.c2, x'', rt0.c0))<=((rt0.c1, rt0.c1, rt0.c1)))))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE ('-1158966801');
SELECT * FROM vt1 WHERE ('-1158966801') ORDER BY ((CAST(vt1.c0 AS TEXT)) ISNULL), ((vt1.c0 COLLATE RTRIM)|(((vt1.c0)<=(vt1.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ('-1158966801');
SELECT * FROM vt1 WHERE ('-1158966801') ORDER BY ((CAST(vt1.c0 AS TEXT)) ISNULL), ((vt1.c0 COLLATE RTRIM)|(((vt1.c0)<=(vt1.c0))))  NULLS FIRST;
SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (TYPEOF(rt0.c2 COLLATE BINARY));
SELECT DISTINCT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (TYPEOF(rt0.c2 COLLATE BINARY)) ORDER BY (((~ (rt0.c2)))!=(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c1 WHEN x'c0' THEN rt0.c3 END)) DESC  NULLS LAST, ((((rt0.c1)>(rt0.c3))) NOTNULL)  NULLS FIRST, ((((rt0.c0) NOT NULL)) NOT BETWEEN ((rt0.c0 IN (rt0.c3))) AND ((rt0.c2 IN (rt0.c1)))) ASC LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (((((rt0.c1 IN ()), ((rt0.c3)<(rt0.c0)), ('1096699645' IN ()), rt0.c2 COLLATE RTRIM, vt1.c0))<((((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c0)), CASE vt1.c0  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 END, '2a', (rt0.c2 IN (rt0.c2, rt0.c1)), ((rt0.c3) IS TRUE))))) ORDER BY (((~ (rt0.c2)))<>(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c1 WHEN x'c0' THEN rt0.c3 END)) DESC  NULLS LAST, ((((rt0.c1)>(rt0.c3))) NOTNULL)  NULLS FIRST, ((((rt0.c0) NOT NULL)) NOT BETWEEN ((rt0.c0 IN (rt0.c3))) AND ((rt0.c2 IN (rt0.c1)))) ASC LIMIT 0x0;
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0, NULL, rt0.c3, rt0.c3, rt0.c2)) NOT BETWEEN ((((((rt0.c2)OR(rt0.c3)))AND(rt0.c2)), ((((((rt0.c3)AND(NULL)))OR('] ')))AND(vt1.c0)), x'c6', ((rt0.c2) IS TRUE), rt0.c1 COLLATE NOCASE)) AND ((CAST(rt0.c1 AS BLOB), (((rt0.c0))>((vt1.c0))), ((('982536061')) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))), rt0.c0, rt0.c2)))) ORDER BY (rt0.c0 IN (rt0.c2)) COLLATE BINARY ASC, TRIM(((rt0.c3) IS FALSE), 0.0324024560960251) ASC;
SELECT ALL * FROM vt1, rt0 WHERE ((((((vt1.c0, NULL, rt0.c3, rt0.c3, rt0.c2)) NOT BETWEEN ((((((rt0.c2)OR(rt0.c3)))AND(rt0.c2)), ((((((rt0.c3)AND(NULL)))OR('] ')))AND(vt1.c0)), x'c6', ((rt0.c2) IS TRUE), rt0.c1 COLLATE NOCASE)) AND ((CAST(rt0.c1 AS BLOB), (((rt0.c0))>((vt1.c0))), ((('982536061')) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))), rt0.c0, rt0.c2))))AND(((((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c3, rt0.c3))) IN (rt0.c3, rt0.c3))))) ORDER BY ((((rt0.c0) ISNULL))>(rt0.c0 COLLATE BINARY)), (((rt0.c3)) NOT BETWEEN ((((rt0.c1) IS TRUE))) AND ((CAST(vt1.c0 AS TEXT)))) DESC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0, NULL, rt0.c3, rt0.c3, rt0.c2)) NOT BETWEEN ((((((rt0.c2)OR(rt0.c3)))AND(rt0.c2)), ((((((rt0.c3)AND(NULL)))OR('] ')))AND(vt1.c0)), x'c6', ((rt0.c2) IS TRUE), rt0.c1 COLLATE NOCASE)) AND ((CAST(rt0.c1 AS BLOB), (((rt0.c0))>((vt1.c0))), ((('982536061')) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))), rt0.c0, rt0.c2)))) ORDER BY (rt0.c0 IN (rt0.c2)) COLLATE BINARY ASC, TRIM(((rt0.c3) IS FALSE), 0.0324024560960251) ASC;
SELECT ALL * FROM vt1, rt0 WHERE ((((((vt1.c0, NULL, rt0.c3, rt0.c3, rt0.c2)) NOT BETWEEN ((((((rt0.c2)OR(rt0.c3)))AND(rt0.c2)), ((((((rt0.c3)AND(NULL)))OR('] ')))AND(vt1.c0)), x'c6', ((rt0.c2) IS TRUE), rt0.c1 COLLATE NOCASE)) AND ((CAST(rt0.c1 AS BLOB), (((rt0.c0))>((vt1.c0))), ((('982536061')) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))), rt0.c0, rt0.c2))))AND(((((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c3, rt0.c3))) IN (rt0.c3, rt0.c3))))) ORDER BY ((((rt0.c0) ISNULL))>(rt0.c0 COLLATE BINARY)), (((rt0.c3)) NOT BETWEEN ((((rt0.c1) IS TRUE))) AND ((CAST(vt1.c0 AS TEXT)))) DESC  NULLS LAST;
SELECT COUNT(*) FROM rt0 WHERE ((((((((rt0.c2)OR(rt0.c2)))AND(rt0.c1)), CASE WHEN rt0.c1 THEN -1.955672256E9 WHEN rt0.c3 THEN x'' END, ((rt0.c3) IS FALSE)))>(((rt0.c0 IN (rt0.c2)), ((rt0.c1)>>(rt0.c1)), rt0.c0)))) ORDER BY ((((rt0.c3 COLLATE BINARY)AND(CASE '7h'  WHEN rt0.c0 THEN '\' ELSE rt0.c0 END)))AND((((0xffffffffeca89199, rt0.c1))>=(('V
', rt0.c0))))) DESC;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((((((rt0.c2)OR(rt0.c2)))AND(rt0.c1)), CASE WHEN rt0.c1 THEN -1.955672256E9 WHEN rt0.c3 THEN x'' END, ((rt0.c3) IS FALSE)))>(((rt0.c0 IN (rt0.c2)), ((rt0.c1)>>(rt0.c1)), rt0.c0)))) ORDER BY (((- (rt0.c3)))IS NOT(CAST(rt0.c1 AS TEXT))) DESC;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((NOT (rtreenode(rt0.c2, rt0.c3)))) ORDER BY ((((rt0.c2)IS NOT(rt0.c2)))GLOB(ABS(DISTINCT rt0.c1)))  NULLS LAST, LIKELY(CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 END)  NULLS FIRST, rt0.c3 ASC  NULLS FIRST, CAST(rt0.c1 AS TEXT) COLLATE RTRIM;
SELECT COUNT(*) FROM rt0, vt1 WHERE ((((NOT (rtreenode(rt0.c2, rt0.c3))))AND(((CAST(rt0.c1 AS TEXT)) IS FALSE)))) ORDER BY ((((rt0.c2)IS NOT(rt0.c2)))GLOB(ABS(DISTINCT rt0.c1)))  NULLS LAST, LIKELY(CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 END)  NULLS FIRST, rt0.c3 ASC  NULLS FIRST, CAST(rt0.c1 AS TEXT) COLLATE RTRIM LIMIT 4;
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE (CASE ((((rt0.c1)AND(rt0.c2)))OR(rt0.c0))  WHEN (((vt1.c0))<((rt0.c3))) THEN ((rt0.c0)<=(rt0.c0)) WHEN '0.04157587481795155' THEN ((((((vt1.c0)OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c2)) WHEN (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c0))) THEN ((rt0.c1) IS FALSE) ELSE CAST(vt1.c0 AS REAL) END);
SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE (((CASE ((((rt0.c1)AND(rt0.c2)))OR(rt0.c0))  WHEN (((vt1.c0))<((rt0.c3))) THEN ((rt0.c0)<(rt0.c0)) WHEN '0.04157587481795155' THEN ((((((vt1.c0)OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c2)) WHEN (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c0))) THEN ((rt0.c1) IS FALSE) ELSE CAST(vt1.c0 AS REAL) END)AND(((NULL)=(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN x'' WHEN rt0.c2 THEN rt0.c3 END))))) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE (((((((vt1.c0)OR(rt0.c2)))OR(0.8778789546857406)))AND(vt1.c0)));
SELECT * FROM rt0 WHERE (((((rt0.c3) NOT NULL)) NOT NULL));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3) NOT NULL)) NOT NULL))AND((~ (((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3))))))) LIMIT 0x0;
SELECT * FROM rt0 WHERE (((((rt0.c3) NOT NULL)) NOT NULL));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3) NOT NULL)) NOT NULL))AND((~ (((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3))))))) LIMIT 0x0;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((0.404592676535915, vt1.c0, 'H')) NOT BETWEEN ((((vt1.c0)==(vt1.c0)), '+t誣', CAST(vt1.c0 AS BLOB))) AND ((((((((((((NULL)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(NULL)), ((vt1.c0)>=(vt1.c0)), CAST(vt1.c0 AS NUMERIC)))));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((0.404592676535915, vt1.c0, 'H')) NOT BETWEEN ((((vt1.c0)<=(vt1.c0)), '+t誣', CAST(vt1.c0 AS BLOB))) AND ((((((((((((NULL)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(NULL)), ((vt1.c0)>=(vt1.c0)), CAST(vt1.c0 AS NUMERIC)))))AND(CASE CASE WHEN vt1.c0 THEN vt1.c0 END  WHEN ((vt1.c0)||(vt1.c0)) THEN ((vt1.c0)*(vt1.c0)) WHEN ((vt1.c0) NOT BETWEEN (NULL) AND (vt1.c0)) THEN (((0.5418603602380118, vt1.c0))>=((vt1.c0, vt1.c0))) END))) LIMIT 0x1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CASE vt1.c0  WHEN ((((((vt1.c0)AND(vt1.c0)))OR(0.20992926829841863)))AND(vt1.c0)) THEN ((vt1.c0) ISNULL) ELSE (~ (vt1.c0)) END);
SELECT MAX(vt1.c0) FROM vt1 WHERE (((CASE vt1.c0  WHEN ((((((vt1.c0)AND(vt1.c0)))OR(0.20992926829841863)))AND(vt1.c0)) THEN ((vt1.c0) ISNULL) ELSE (~ (vt1.c0)) END)AND(((NULL) NOTNULL)))) ORDER BY ((((vt1.c0)+(vt1.c0)))>(vt1.c0)) ASC  NULLS FIRST INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))OR(((vt1.c0)OR(vt1.c0))))) ORDER BY ((((vt1.c0)+(vt1.c0)))>(vt1.c0)) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON ((CAST(rt0.c3 AS REAL)) ISNULL) WHERE ((((((rt0.c1 IN (x'43')))OR(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(rt0.c1)))))AND(CAST(rt0.c3 AS TEXT)))) ORDER BY ((((((((((((rt0.c1)AND(rt0.c1)))AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c1)))OR(vt1.c0)))>=(UNLIKELY(rt0.c0))), rt0.c3  NULLS FIRST, (rt0.c0 COLLATE BINARY IN (((vt1.c0) NOT BETWEEN (x'3c') AND (rt0.c2)))) DESC, (- (CAST(rt0.c1 AS BLOB)));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((CAST(rt0.c3 AS REAL)) ISNULL) WHERE ((((((((rt0.c1 IN (x'43')))OR(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(rt0.c1)))))AND(CAST(rt0.c3 AS TEXT))))AND(((CAST(rt0.c1 AS NUMERIC))<(UNLIKELY(rt0.c1)))))) ORDER BY (((((vt1.c0, rt0.c0, rt0.c1, vt1.c0))!=((vt1.c0, rt0.c0, rt0.c2, rt0.c2)))) IS TRUE) INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((CAST(rt0.c3 AS REAL)) ISNULL) WHERE (((((rt0.c3)AND(rt0.c3)))>>(((rt0.c1)==(rt0.c2))))) ORDER BY (((((vt1.c0, rt0.c0, rt0.c1, vt1.c0))!=((vt1.c0, rt0.c0, rt0.c2, rt0.c2)))) IS TRUE);
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON ((CAST(rt0.c3 AS REAL)) ISNULL) WHERE ((((((rt0.c1 IN (x'43')))OR(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(rt0.c1)))))AND(CAST(rt0.c3 AS TEXT)))) ORDER BY ((((((((((((rt0.c1)AND(rt0.c1)))AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c1)))OR(vt1.c0)))>=(UNLIKELY(rt0.c0))), rt0.c3  NULLS FIRST, (rt0.c0 COLLATE BINARY IN (((vt1.c0) NOT BETWEEN (x'3c') AND (rt0.c2)))) DESC, (- (CAST(rt0.c1 AS BLOB)));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((CAST(rt0.c3 AS REAL)) ISNULL) WHERE ((((((((rt0.c1 IN (x'43')))OR(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(rt0.c1)))))AND(CAST(rt0.c3 AS TEXT))))AND(((CAST(rt0.c1 AS NUMERIC))<(UNLIKELY(rt0.c1)))))) ORDER BY (((((vt1.c0, rt0.c0, rt0.c1, vt1.c0))!=((vt1.c0, rt0.c0, rt0.c2, rt0.c2)))) IS TRUE) INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((CAST(rt0.c3 AS REAL)) ISNULL) WHERE (((((rt0.c3)AND(rt0.c3)))>>(((rt0.c1)==(rt0.c2))))) ORDER BY (((((vt1.c0, rt0.c0, rt0.c1, vt1.c0))!=((vt1.c0, rt0.c0, rt0.c2, rt0.c2)))) IS TRUE);
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (((LOWER(rt0.c2))/((NOT (NULL)))));
SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((LOWER(rt0.c2))/((NOT (NULL))))) LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c2))) BETWEEN (((((((((((rt0.c3)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c3)))OR(vt1.c0)))AND(rt0.c1))) AND ((rt0.c0 IN (rt0.c0))))) LIMIT 0X1;
SELECT * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0)))>(((0X26118826)IS(0.7597608600456579)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))>(((0X26118826)IS(0.7597608600456579)))))AND((((~ (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (vt1.c0 COLLATE RTRIM))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) IN (((vt1.c0)%(vt1.c0)))));
SELECT * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0)))>(((0X26118826)IS(0.7597608600456579)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))>(((0X26118826)IS(0.7597608600456579)))))AND((((~ (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (vt1.c0 COLLATE RTRIM))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) IN (((vt1.c0)%(vt1.c0)))));
SELECT ALL COUNT(*) FROM rt0 WHERE (((LOWER(DISTINCT rt0.c3))+(((rt0.c2)LIKE(rt0.c3)))));
SELECT ALL COUNT(*) FROM rt0 WHERE (((((LOWER(DISTINCT rt0.c3))+(((rt0.c2)LIKE(rt0.c3)))))AND(0.7551738705132669))) ORDER BY ((rt0.c3)OR(NULLIF(DISTINCT rt0.c3, rt0.c1)))  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE (rt0.c1) ORDER BY ((rt0.c3)OR(NULLIF(DISTINCT rt0.c3, rt0.c1)))  NULLS FIRST;
SELECT * FROM rt0 WHERE ((((rt0.c2) IS FALSE) IN ()));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c2) IS FALSE) IN ()))AND(((0Xffffffffaa229f97)LIKE(rt0.c3)) COLLATE NOCASE))) ORDER BY NULL DESC, DATE(rt0.c1, ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)), (((rt0.c2)) BETWEEN ((rt0.c1)) AND ((NULL)))) ASC;
SELECT * FROM rt0 WHERE ((((rt0.c2) IS FALSE) IN ()));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c2) IS FALSE) IN ()))AND(((0Xffffffffaa229f97)LIKE(rt0.c3)) COLLATE NOCASE))) ORDER BY NULL DESC, DATE(rt0.c1, ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)), (((rt0.c2)) BETWEEN ((rt0.c1)) AND ((NULL)))) ASC;
SELECT * FROM rt0 CROSS JOIN vt1 ON 0.97130683161993 WHERE ((json_array_length(rt0.c1) IN ()));
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON 0.97130683161993 WHERE ((json_array_length(rt0.c1) IN ())) INTERSECT SELECT * FROM rt0 CROSS JOIN vt1 ON 0.97130683161993 WHERE (rt0.c0);
SELECT * FROM rt0 CROSS JOIN vt1 ON 0.97130683161993 WHERE ((json_array_length(rt0.c1) IN ()));
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON 0.97130683161993 WHERE ((json_array_length(rt0.c1) IN ())) INTERSECT SELECT * FROM rt0 CROSS JOIN vt1 ON 0.97130683161993 WHERE (rt0.c0);
SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON (- ((- (vt1.c0)))) WHERE ('426117718');
SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON (- ((- (vt1.c0)))) WHERE ('426117718') ORDER BY (((((((('-548393973')AND(CAST(rt0.c1 AS REAL))))OR(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c3)))))AND(((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c3)))))AND(((rt0.c2)>(rt0.c0)))) LIMIT 0x1;
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT))IS(((vt1.c0) ISNULL))));
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT))IS(((vt1.c0) ISNULL)))) LIMIT 2 INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c0) LIMIT 2;
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT))IS(((vt1.c0) ISNULL))));
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT))IS(((vt1.c0) ISNULL)))) LIMIT 2 INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c0) LIMIT 2;
SELECT * FROM vt1 WHERE (970547608) ORDER BY (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN (((vt1.c0) NOTNULL))) DESC  NULLS LAST, (((vt1.c0)*(vt1.c0)) IN ()) ASC;
SELECT DISTINCT * FROM vt1 WHERE (0X39d96198) ORDER BY HEX(0.022128182064032997) DESC, (((((vt1.c0))<((vt1.c0))))>(((vt1.c0)>=(vt1.c0))))  NULLS LAST;
SELECT * FROM vt1 WHERE (970547608) ORDER BY (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN (((vt1.c0) NOTNULL))) DESC  NULLS LAST, (((vt1.c0)*(vt1.c0)) IN ()) ASC;
SELECT * FROM vt1, rt0 WHERE ((('UK')-(x'd7'))) ORDER BY rt0.c1 ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((('UK')-(x'd7')))AND((((vt1.c0 IN (rt0.c2)))>=(((((((rt0.c0)AND(rt0.c0)))AND(rt0.c0)))AND(vt1.c0))))))) ORDER BY rt0.c1 ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c0 IN (vt1.c0)))>(((rt0.c1)|(rt0.c2))))) ORDER BY rt0.c1 ASC LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((('UK')-(x'd7'))) ORDER BY rt0.c1 ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((('UK')-(x'd7')))AND((((vt1.c0 IN (rt0.c2)))>=(((((((rt0.c0)AND(rt0.c0)))AND(rt0.c0)))AND(vt1.c0))))))) ORDER BY rt0.c1 ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c0 IN (vt1.c0)))>(((rt0.c1)|(rt0.c2))))) ORDER BY rt0.c1 ASC LIMIT 0;
SELECT MIN(vt1.c0) FROM vt1 WHERE (1.304629726E9) ORDER BY 0.9411611907217905 ASC, CAST(vt1.c0 AS INTEGER) COLLATE RTRIM;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((1.304629726E9)AND((((vt1.c0, -1806150393)) BETWEEN ((((vt1.c0)*(vt1.c0)), (vt1.c0 IN (vt1.c0)))) AND ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE BINARY)))))) ORDER BY CAST((('萺sn{L	t') ISNULL) AS BLOB) DESC  NULLS FIRST INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (((((NULL)>=(vt1.c0)))>(((vt1.c0)IS(vt1.c0))))) ORDER BY CAST((('萺sn{L	t') ISNULL) AS BLOB) DESC  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0) NOTNULL))IS NOT(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0) NOTNULL))IS NOT(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND((((- (vt1.c0))) IS TRUE)))) INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (((((NULL) NOT BETWEEN (vt1.c0) AND ('p#BbIM퇑Qi'))) IS FALSE));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((LIKELY(vt1.c0) IN ()));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((LIKELY(vt1.c0) IN ()))AND(((TRIM(vt1.c0))||(x'cd1c'))))) ORDER BY CAST(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '	' WHEN vt1.c0 THEN vt1.c0 END AS REAL)  NULLS FIRST, (((vt1.c0))>=((vt1.c0))) ASC  NULLS LAST, CAST(CAST(vt1.c0 AS REAL) AS REAL) ASC  NULLS LAST INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((TRIM(vt1.c0, vt1.c0)) NOT NULL)) ORDER BY CAST(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '	' WHEN vt1.c0 THEN vt1.c0 END AS REAL)  NULLS FIRST, (((vt1.c0))>=((vt1.c0))) ASC  NULLS LAST, CAST(CAST(vt1.c0 AS REAL) AS REAL) ASC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (((('W輿L*~'))<((rt0.c1))) COLLATE BINARY);
SELECT * FROM vt1, rt0 WHERE (((('W輿L*~'))<((rt0.c1))) COLLATE BINARY) ORDER BY ((rt0.c2 IN ()) IN ()) ASC  NULLS LAST, (rt0.c3 IN (rt0.c0, rt0.c1)) COLLATE RTRIM COLLATE RTRIM DESC  NULLS LAST INTERSECT SELECT * FROM vt1, rt0 WHERE ((- ('-1688611678'))) ORDER BY ((rt0.c2 IN ()) IN ()) ASC  NULLS LAST, (rt0.c3 IN (rt0.c0, rt0.c1)) COLLATE RTRIM COLLATE RTRIM DESC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (((('W輿L*~'))<((rt0.c1))) COLLATE BINARY);
SELECT * FROM vt1, rt0 WHERE (((('W輿L*~'))<((rt0.c1))) COLLATE BINARY) ORDER BY ((rt0.c2 IN ()) IN ()) ASC  NULLS LAST, (rt0.c3 IN (rt0.c0, rt0.c1)) COLLATE RTRIM COLLATE RTRIM DESC  NULLS LAST INTERSECT SELECT * FROM vt1, rt0 WHERE ((- ('-1688611678'))) ORDER BY ((rt0.c2 IN ()) IN ()) ASC  NULLS LAST, (rt0.c3 IN (rt0.c0, rt0.c1)) COLLATE RTRIM COLLATE RTRIM DESC  NULLS LAST;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (CAST(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) AS INTEGER));
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (CAST(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) AS INTEGER)) INTERSECT SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE ((~ (((((rt0.c0)OR(rt0.c2)))OR(rt0.c2)))));
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (CAST(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) AS INTEGER));
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (CAST(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) AS INTEGER)) INTERSECT SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE ((~ (((((rt0.c0)OR(rt0.c2)))OR(rt0.c2)))));
SELECT MAX(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON (2.65752894E8 IN ()) WHERE ((((rt0.c0)|(vt1.c0)) IN (((rt0.c3)*(rt0.c1))))) ORDER BY CAST(CAST(rt0.c1 AS REAL) AS TEXT) ASC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON (2.65752894E8 IN ()) WHERE ((((((rt0.c0)|(vt1.c0)) IN (((rt0.c3)*(rt0.c1)))))AND(INSTR((- (rt0.c3)), CAST(rt0.c3 AS REAL))))) ORDER BY IFNULL(((((rt0.c1)OR(rt0.c0)))OR(rt0.c3)), ((((rt0.c0)AND(vt1.c0)))AND(rt0.c3))) ASC  NULLS FIRST, ((rt0.c3) IS FALSE) ASC, (((((((x'9a', vt1.c0))!=((rt0.c0, rt0.c0))))AND(((rt0.c0)||(rt0.c2)))))AND(((((((((x'85')OR(rt0.c3)))AND(rt0.c3)))AND(rt0.c3)))AND(vt1.c0)))) ASC LIMIT 0x1 INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON (2.65752894E8 IN ()) WHERE (((((((((rt0.c2)AND(vt1.c0)))AND('')))OR(rt0.c2)))GLOB((((rt0.c0)) NOT BETWEEN ((rt0.c2)) AND ((vt1.c0)))))) ORDER BY IFNULL(((((rt0.c1)OR(rt0.c0)))OR(rt0.c3)), ((((rt0.c0)AND(vt1.c0)))AND(rt0.c3))) ASC  NULLS FIRST, ((rt0.c3) IS FALSE) ASC, (((((((x'9a', vt1.c0))<>((rt0.c0, rt0.c0))))AND(((rt0.c0)||(rt0.c2)))))AND(((((((((x'85')OR(rt0.c3)))AND(rt0.c3)))AND(rt0.c3)))AND(vt1.c0)))) ASC LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (((rt0.c0)IS NOT((~ (rt0.c0))))) ORDER BY (((((rt0.c1)||(rt0.c1)), rt0.c1, CASE WHEN rt0.c1 THEN rt0.c3 END))<=((UPPER(DISTINCT vt1.c0), ((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c2)), rt0.c1 COLLATE RTRIM))) ASC  NULLS FIRST, vt1.c0 ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c0)IS NOT((~ (rt0.c0)))))AND(((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END)<(NULL))))) ORDER BY (((((rt0.c1)||(rt0.c1)), rt0.c1, CASE WHEN rt0.c1 THEN rt0.c3 END))<=((UPPER(DISTINCT vt1.c0), ((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c2)), rt0.c1 COLLATE RTRIM))) ASC  NULLS FIRST, vt1.c0 ASC;
SELECT * FROM vt1, rt0 WHERE (((rt0.c0)IS NOT((~ (rt0.c0))))) ORDER BY (((((rt0.c1)||(rt0.c1)), rt0.c1, CASE WHEN rt0.c1 THEN rt0.c3 END))<=((UPPER(DISTINCT vt1.c0), ((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c2)), rt0.c1 COLLATE RTRIM))) ASC  NULLS FIRST, vt1.c0 ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c0)IS NOT((~ (rt0.c0)))))AND(((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END)<(NULL))))) ORDER BY (((((rt0.c1)||(rt0.c1)), rt0.c1, CASE WHEN rt0.c1 THEN rt0.c3 END))<=((UPPER(DISTINCT vt1.c0), ((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c2)), rt0.c1 COLLATE RTRIM))) ASC  NULLS FIRST, vt1.c0 ASC;
SELECT COUNT(*) FROM rt0 WHERE (((((((((((((NULL)AND(rt0.c2)))OR(rt0.c1)))AND(CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END)))OR(rt0.c2 COLLATE RTRIM)))OR(((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1)))))AND((+ (rt0.c0))))) ORDER BY (CAST(rt0.c0 AS BLOB) IN ()), (- (CAST(rt0.c3 AS REAL))) ASC  NULLS FIRST, (((0.03371136291115384 IN (rt0.c0)))|(((rt0.c3)IS NOT(rt0.c3))))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((((((((((((NULL)AND(rt0.c2)))OR(rt0.c1)))AND(CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END)))OR(rt0.c2 COLLATE RTRIM)))OR(((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1)))))AND((+ (rt0.c0))))) ORDER BY (CAST(rt0.c0 AS BLOB) IN ()), (- (CAST(rt0.c3 AS REAL))) ASC  NULLS FIRST, (((0.03371136291115384 IN (rt0.c0)))|(((rt0.c3)IS NOT(rt0.c3))))  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ((+ (((rt0.c0)&(rt0.c2))))) ORDER BY ((((x'') IS TRUE))/(rt0.c1 COLLATE NOCASE)) ASC, (((~ (vt1.c0)))IS NOT(((rt0.c3)LIKE(rt0.c1))))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((+ (((rt0.c0)&(rt0.c2))))) ORDER BY (+ (rt0.c2)) COLLATE BINARY  NULLS FIRST, (- (CAST(vt1.c0 AS INTEGER))) DESC  NULLS LAST, load_extension((('')>(vt1.c0)))  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt1, rt0 WHERE ((((((((((rt0.c3, rt0.c0, rt0.c0))!=((rt0.c1, rt0.c0, vt1.c0))))OR(((vt1.c0)>(rt0.c1)))))AND(((rt0.c0) NOT NULL))))OR((((rt0.c3, vt1.c0))=((vt1.c0, vt1.c0)))))) ORDER BY (+ (rt0.c2)) COLLATE BINARY  NULLS FIRST, (- (CAST(vt1.c0 AS INTEGER))) DESC  NULLS LAST, load_extension((('')>(vt1.c0)))  NULLS LAST LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((+ (((rt0.c0)&(rt0.c2))))) ORDER BY ((((x'') IS TRUE))/(rt0.c1 COLLATE NOCASE)) ASC, (((~ (vt1.c0)))IS NOT(((rt0.c3)LIKE(rt0.c1))))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((+ (((rt0.c0)&(rt0.c2))))) ORDER BY (+ (rt0.c2)) COLLATE BINARY  NULLS FIRST, (- (CAST(vt1.c0 AS INTEGER))) DESC  NULLS LAST, load_extension((('')>(vt1.c0)))  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt1, rt0 WHERE ((((((((((rt0.c3, rt0.c0, rt0.c0))!=((rt0.c1, rt0.c0, vt1.c0))))OR(((vt1.c0)>(rt0.c1)))))AND(((rt0.c0) NOT NULL))))OR((((rt0.c3, vt1.c0))=((vt1.c0, vt1.c0)))))) ORDER BY (+ (rt0.c2)) COLLATE BINARY  NULLS FIRST, (- (CAST(vt1.c0 AS INTEGER))) DESC  NULLS LAST, load_extension((('')>(vt1.c0)))  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN (((((vt1.c0))==((vt1.c0))), (vt1.c0 IN (vt1.c0)), NULL, ((vt1.c0)IS(vt1.c0)), (('-1705485783') ISNULL))) AND ((vt1.c0, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0, ((('o0k', x'', vt1.c0))>((vt1.c0, vt1.c0, vt1.c0))), (+ (vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN (((((vt1.c0))<=((vt1.c0))), (vt1.c0 IN (vt1.c0)), NULL, ((vt1.c0)IS(vt1.c0)), (('-1705485783') ISNULL))) AND ((vt1.c0, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0, ((('o0k', x'', vt1.c0))>((vt1.c0, vt1.c0, vt1.c0))), (+ (vt1.c0))))))AND((- ((((vt1.c0, vt1.c0, vt1.c0, '-341597553', vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)))))))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((- (CAST(0.898194171623319 AS INTEGER)))) LIMIT 2;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN (((((vt1.c0))==((vt1.c0))), (vt1.c0 IN (vt1.c0)), NULL, ((vt1.c0)IS(vt1.c0)), (('-1705485783') ISNULL))) AND ((vt1.c0, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0, ((('o0k', x'', vt1.c0))>((vt1.c0, vt1.c0, vt1.c0))), (+ (vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN (((((vt1.c0))<=((vt1.c0))), (vt1.c0 IN (vt1.c0)), NULL, ((vt1.c0)IS(vt1.c0)), (('-1705485783') ISNULL))) AND ((vt1.c0, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0, ((('o0k', x'', vt1.c0))>((vt1.c0, vt1.c0, vt1.c0))), (+ (vt1.c0))))))AND((- ((((vt1.c0, vt1.c0, vt1.c0, '-341597553', vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)))))))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((- (CAST(0.898194171623319 AS INTEGER)))) LIMIT 2;
SELECT ALL * FROM rt0, vt1 WHERE ((vt1.c0 IN ())) ORDER BY 0.6453502077412708  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((vt1.c0 IN ()))AND(CAST(CAST(rt0.c3 AS BLOB) AS BLOB)))) ORDER BY 0.6453502077412708  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE (((rt0.c0)) BETWEEN ((rt0.c2)) AND ((rt0.c2)))  WHEN 0.8374026694610095 THEN CAST(rt0.c1 AS BLOB) WHEN (('1933596360') NOTNULL) THEN vt1.c0 COLLATE RTRIM WHEN CAST(rt0.c1 AS NUMERIC) THEN (((rt0.c3)) BETWEEN ((rt0.c1)) AND ((rt0.c3))) WHEN ((0.466917341151566) IS TRUE) THEN rt0.c2 ELSE (((rt0.c0, rt0.c3, vt1.c0))>=((rt0.c2, rt0.c3, rt0.c1))) END) ORDER BY 0.6453502077412708  NULLS LAST LIMIT 2;
SELECT ALL * FROM rt0, vt1 WHERE ((vt1.c0 IN ())) ORDER BY 0.6453502077412708  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((vt1.c0 IN ()))AND(CAST(CAST(rt0.c3 AS BLOB) AS BLOB)))) ORDER BY 0.6453502077412708  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE (((rt0.c0)) BETWEEN ((rt0.c2)) AND ((rt0.c2)))  WHEN 0.8374026694610095 THEN CAST(rt0.c1 AS BLOB) WHEN (('1933596360') NOTNULL) THEN vt1.c0 COLLATE RTRIM WHEN CAST(rt0.c1 AS NUMERIC) THEN (((rt0.c3)) BETWEEN ((rt0.c1)) AND ((rt0.c3))) WHEN ((0.466917341151566) IS TRUE) THEN rt0.c2 ELSE (((rt0.c0, rt0.c3, vt1.c0))>=((rt0.c2, rt0.c3, rt0.c1))) END) ORDER BY 0.6453502077412708  NULLS LAST LIMIT 2;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0) IS TRUE))IS(NULL)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0) IS TRUE))IS(NULL)))AND(PRINTF(((x'') NOT NULL), ((((((NULL)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))) ORDER BY (NULL IN (CAST(vt1.c0 AS INTEGER), (vt1.c0 IN (vt1.c0)))), CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN UPPER(vt1.c0) WHEN CASE WHEN vt1.c0 THEN vt1.c0 END THEN UPPER(vt1.c0) WHEN ((x'6419') IS TRUE) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0) NOT NULL) THEN LIKELY(vt1.c0) WHEN vt1.c0 THEN ((vt1.c0)<=('0.36377367176431163')) ELSE ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) END;
SELECT ALL * FROM rt0 WHERE (((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) NOTNULL));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) NOTNULL))AND(ABS(((rt0.c3) IS TRUE))))) ORDER BY LOWER(rt0.c2 COLLATE BINARY), CASE 0.21473199742024995  WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c2)<>(rt0.c3)) END  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((((((((rt0.c0))>=((rt0.c1))))OR((rt0.c3 IN (rt0.c2)))))AND(rt0.c2 COLLATE NOCASE)))OR((~ (rt0.c3))))) ORDER BY LOWER(rt0.c2 COLLATE BINARY), CASE 0.21473199742024995  WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c2)!=(rt0.c3)) END  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) NOTNULL));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) NOTNULL))AND(ABS(((rt0.c3) IS TRUE))))) ORDER BY LOWER(rt0.c2 COLLATE BINARY), CASE 0.21473199742024995  WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c2)<>(rt0.c3)) END  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((((((((rt0.c0))>=((rt0.c1))))OR((rt0.c3 IN (rt0.c2)))))AND(rt0.c2 COLLATE NOCASE)))OR((~ (rt0.c3))))) ORDER BY LOWER(rt0.c2 COLLATE BINARY), CASE 0.21473199742024995  WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c2)!=(rt0.c3)) END  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (((((((((vt1.c0) ISNULL))OR((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))))AND(ABS(vt1.c0))))OR((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0, vt1.c0, 0.032065654398831245))))));
SELECT COUNT(*) FROM vt1 WHERE (((((((((vt1.c0) ISNULL))OR((((vt1.c0, vt1.c0))==((vt1.c0, vt1.c0))))))AND(ABS(vt1.c0))))OR((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0, vt1.c0, 0.032065654398831245)))))) ORDER BY vt1.c0, ((vt1.c0 COLLATE NOCASE)||((+ (vt1.c0)))) DESC LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE (((((((CASE WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END)AND(rt0.c2 COLLATE RTRIM)))OR(((((rt0.c2)AND(rt0.c3)))AND(rt0.c0)))))AND(TRIM(rt0.c3))));
SELECT ALL * FROM rt0, vt1 WHERE (((((((((CASE WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END)AND(rt0.c2 COLLATE RTRIM)))OR(((((rt0.c2)AND(rt0.c3)))AND(rt0.c0)))))AND(TRIM(rt0.c3))))AND(CASE ((vt1.c0) ISNULL)  WHEN CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 WHEN vt1.c0 THEN 'HDMZ뙁\' ELSE rt0.c1 END THEN CASE vt1.c0  WHEN rt0.c0 THEN 0.43769968171286733 END WHEN ((((((NULL)AND(NULL)))OR(rt0.c3)))OR(rt0.c1)) THEN (NOT (rt0.c1)) END))) ORDER BY SQLITE_SOURCE_ID() COLLATE RTRIM ASC INTERSECT SELECT * FROM rt0, vt1 WHERE (((((rt0.c1)>>(rt0.c2)))AND(((((x'')AND(rt0.c2)))AND(rt0.c3))))) ORDER BY SQLITE_SOURCE_ID() COLLATE RTRIM ASC;
SELECT * FROM rt0, vt1 WHERE (((((((CASE WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END)AND(rt0.c2 COLLATE RTRIM)))OR(((((rt0.c2)AND(rt0.c3)))AND(rt0.c0)))))AND(TRIM(rt0.c3))));
SELECT ALL * FROM rt0, vt1 WHERE (((((((((CASE WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END)AND(rt0.c2 COLLATE RTRIM)))OR(((((rt0.c2)AND(rt0.c3)))AND(rt0.c0)))))AND(TRIM(rt0.c3))))AND(CASE ((vt1.c0) ISNULL)  WHEN CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 WHEN vt1.c0 THEN 'HDMZ뙁\' ELSE rt0.c1 END THEN CASE vt1.c0  WHEN rt0.c0 THEN 0.43769968171286733 END WHEN ((((((NULL)AND(NULL)))OR(rt0.c3)))OR(rt0.c1)) THEN (NOT (rt0.c1)) END))) ORDER BY SQLITE_SOURCE_ID() COLLATE RTRIM ASC INTERSECT SELECT * FROM rt0, vt1 WHERE (((((rt0.c1)>>(rt0.c2)))AND(((((x'')AND(rt0.c2)))AND(rt0.c3))))) ORDER BY SQLITE_SOURCE_ID() COLLATE RTRIM ASC;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0))>=((json_array_length(vt1.c0, vt1.c0)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0))>((json_array_length(vt1.c0, vt1.c0))))) LIMIT 1 INTERSECT SELECT * FROM vt1 WHERE ((((vt1.c0))>=((vt1.c0))) COLLATE NOCASE) LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0))>=((json_array_length(vt1.c0, vt1.c0)))));
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c3) ORDER BY 0.08557058442453591  NULLS LAST, ((CASE rt0.c1  WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END) ISNULL) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c3)AND(CASE WHEN (((rt0.c3, rt0.c3, x'6ac4'))>((rt0.c3, vt1.c0, rt0.c3))) THEN x'' ELSE (NOT (vt1.c0)) END))) ORDER BY ('-1440571497' IN ((((((((('!')AND(-1116565927)))AND(rt0.c2)))AND(NULL)))AND(rt0.c3))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((((rt0.c3)AND(((((((vt1.c0)AND(rt0.c2)))OR(rt0.c3)))AND(rt0.c2)))))OR(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3)))))AND(CAST(rt0.c2 AS INTEGER))))AND(((vt1.c0)OR(rt0.c3))))) ORDER BY ('-1440571497' IN ((((((((('!')AND(0xffffffffbd728e59)))AND(rt0.c2)))AND(NULL)))AND(rt0.c3))))  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c3) ORDER BY 0.08557058442453591  NULLS LAST, ((CASE rt0.c1  WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END) ISNULL) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c3)AND(CASE WHEN (((rt0.c3, rt0.c3, x'6ac4'))>((rt0.c3, vt1.c0, rt0.c3))) THEN x'' ELSE (NOT (vt1.c0)) END))) ORDER BY ('-1440571497' IN ((((((((('!')AND(-1116565927)))AND(rt0.c2)))AND(NULL)))AND(rt0.c3))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((((rt0.c3)AND(((((((vt1.c0)AND(rt0.c2)))OR(rt0.c3)))AND(rt0.c2)))))OR(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3)))))AND(CAST(rt0.c2 AS INTEGER))))AND(((vt1.c0)OR(rt0.c3))))) ORDER BY ('-1440571497' IN ((((((((('!')AND(0xffffffffbd728e59)))AND(rt0.c2)))AND(NULL)))AND(rt0.c3))))  NULLS LAST LIMIT 0x1;
SELECT MAX(rt0.c1) FROM rt0 WHERE ((((((0.732684964996441, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c1))))LIKE(((((((((rt0.c1)AND(rt0.c1)))OR(rt0.c0)))AND(rt0.c2)))OR(rt0.c1))))) ORDER BY (NOT ((((rt0.c3, rt0.c2, rt0.c2)) BETWEEN ((rt0.c1, rt0.c1, rt0.c0)) AND ((rt0.c2, rt0.c2, rt0.c3))))) ASC  NULLS LAST, (- ((rt0.c3 IN ()))) DESC  NULLS LAST, CAST(CAST(rt0.c2 AS INTEGER) AS BLOB) DESC, TYPEOF(x'') ASC;
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE ((((((0.732684964996441, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c1))))LIKE(((((((((rt0.c1)AND(rt0.c1)))OR(rt0.c0)))AND(rt0.c2)))OR(rt0.c1))))) ORDER BY (NOT (rt0.c3)) COLLATE BINARY DESC INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (ABS(DISTINCT SQLITE_COMPILEOPTION_USED(rt0.c0))) ORDER BY (NOT (rt0.c3)) COLLATE BINARY DESC;
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (CAST(HEX(DISTINCT rt0.c3) AS NUMERIC));
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (CAST(HEX(DISTINCT rt0.c3) AS NUMERIC)) LIMIT 1 INTERSECT SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (rt0.c0) LIMIT 1;
SELECT ALL * FROM rt0 WHERE (((((rt0.c2) IS FALSE))>(((rt0.c2)/(rt0.c2))))) ORDER BY ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)) COLLATE NOCASE  NULLS LAST, (((((((rt0.c0 IN (rt0.c1)))AND(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 ELSE x'42' END)))OR(x'')))OR('] '));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c2) IS FALSE))>(((rt0.c2)/(rt0.c2)))))AND(((HEX(DISTINCT rt0.c2)) ISNULL)))) ORDER BY ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)) COLLATE NOCASE  NULLS LAST, (((((((rt0.c0 IN (rt0.c1)))AND(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 ELSE x'42' END)))OR(x'')))OR('] '));
SELECT ALL * FROM rt0 WHERE (((((rt0.c2) IS FALSE))>(((rt0.c2)/(rt0.c2))))) ORDER BY ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)) COLLATE NOCASE  NULLS LAST, (((((((rt0.c0 IN (rt0.c1)))AND(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 ELSE x'42' END)))OR(x'')))OR('] '));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c2) IS FALSE))>(((rt0.c2)/(rt0.c2)))))AND(((HEX(DISTINCT rt0.c2)) ISNULL)))) ORDER BY ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)) COLLATE NOCASE  NULLS LAST, (((((((rt0.c0 IN (rt0.c1)))AND(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 ELSE x'42' END)))OR(x'')))OR('] '));
SELECT ALL MAX(rt0.c0) FROM rt0 CROSS JOIN vt1 ON ((LTRIM(vt1.c0)) NOT BETWEEN (((rt0.c2) IS FALSE)) AND (NULL)) WHERE (CAST(((rt0.c1) IS TRUE) AS TEXT)) ORDER BY ((TRIM(rt0.c3, rt0.c2))<<(rt0.c3 COLLATE BINARY)) ASC  NULLS LAST, ((((((rt0.c1)AND(rt0.c1)))OR(rt0.c0)))OR(rt0.c0)) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT MAX(rt0.c0) FROM rt0 CROSS JOIN vt1 ON ((LTRIM(vt1.c0)) NOT BETWEEN (((rt0.c2) IS FALSE)) AND (NULL)) WHERE (((CAST(((rt0.c1) IS TRUE) AS TEXT))AND(CASE rt0.c1  WHEN x'' THEN CASE WHEN 'v0//O' THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 END ELSE vt1.c0 END))) ORDER BY (((rt0.c3 IN (rt0.c1))) NOT BETWEEN (((rt0.c2)GLOB(vt1.c0))) AND ('259252199'))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((rt0.c1) IS FALSE)) ORDER BY ((NULL) IS FALSE) ASC;
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((rt0.c1) IS FALSE))AND(0.47806599245149595))) ORDER BY (((rt0.c1, rt0.c3)) BETWEEN ((rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c1))) COLLATE NOCASE ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c3) BETWEEN (rt0.c0) AND (vt1.c0)) THEN ((vt1.c0)/(rt0.c2)) END) ORDER BY (((rt0.c1, rt0.c3)) BETWEEN ((rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c1))) COLLATE NOCASE ASC  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0)/(vt1.c0)) AS REAL));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0)/(vt1.c0)) AS REAL)) ORDER BY CASE x'd94337'  WHEN CAST(vt1.c0 AS REAL) THEN (vt1.c0 IN (NULL)) ELSE ((((((vt1.c0)AND(vt1.c0)))OR(NULL)))AND(vt1.c0)) END DESC  NULLS FIRST INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN 0.5361173862426383 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)IS NOT(UNICODE(vt1.c0)))) ORDER BY CASE x'd94337'  WHEN CAST(vt1.c0 AS REAL) THEN (vt1.c0 IN (NULL)) ELSE ((((((vt1.c0)AND(vt1.c0)))OR(NULL)))AND(vt1.c0)) END DESC  NULLS FIRST;
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (((((rt0.c2)OR(rt0.c3)))OR(rt0.c2)) COLLATE BINARY);
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (((((rt0.c2)OR(rt0.c3)))OR(rt0.c2)) COLLATE BINARY) INTERSECT SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((('765064518')||(((rt0.c1)IS NOT(vt1.c0)))));
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((rt0.c2 COLLATE RTRIM IN (rt0.c2 COLLATE BINARY)));
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((rt0.c2 COLLATE RTRIM IN (rt0.c2 COLLATE BINARY)));
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE ((((((((+ (vt1.c0)))OR(rt0.c3)))AND(CAST(rt0.c0 AS REAL))))OR(TRIM(rt0.c0, vt1.c0)))) ORDER BY (- (((((rt0.c1)AND(rt0.c1)))AND(vt1.c0))));
SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE ((((((((+ (vt1.c0)))OR(rt0.c3)))AND(CAST(rt0.c0 AS REAL))))OR(TRIM(rt0.c0, vt1.c0)))) ORDER BY (- (((((rt0.c1)AND(rt0.c1)))AND(vt1.c0)))) INTERSECT SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE (((vt1.c0 COLLATE RTRIM)&((- (vt1.c0))))) ORDER BY (- (((((rt0.c1)AND(rt0.c1)))AND(vt1.c0))));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c3 IN (rt0.c1)))<=(((rt0.c0)>=(rt0.c3)))));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((((rt0.c3 IN (rt0.c1)))<(((rt0.c0)>(rt0.c3)))))AND(CAST(rt0.c1 COLLATE BINARY AS INTEGER)))) ORDER BY (vt1.c0 IN (rt0.c3)) COLLATE BINARY  NULLS FIRST INTERSECT SELECT COUNT(*) FROM rt0, vt1 WHERE ((((((rt0.c2)<(rt0.c1)), ((rt0.c3)|(rt0.c3)), CASE WHEN rt0.c3 THEN rt0.c0 END, TRIM(rt0.c1, vt1.c0)))<>((vt1.c0 COLLATE BINARY, CAST(rt0.c0 AS BLOB), (NOT (rt0.c0)), ((rt0.c3) NOTNULL))))) ORDER BY (vt1.c0 IN (rt0.c3)) COLLATE BINARY  NULLS FIRST;
SELECT * FROM rt0 WHERE (CAST(rt0.c3 AS REAL) COLLATE BINARY);
SELECT * FROM rt0 WHERE (CAST(rt0.c3 AS REAL) COLLATE BINARY);
SELECT * FROM rt0 WHERE (CAST(rt0.c3 AS REAL) COLLATE BINARY);
SELECT * FROM rt0 WHERE (CAST(rt0.c3 AS REAL) COLLATE BINARY);
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))) NOT NULL));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))) NOT NULL)) ORDER BY CAST((((x''))>(('-2095099121'))) AS NUMERIC) LIMIT 0;
SELECT ALL * FROM rt0 WHERE (' +aE');
SELECT ALL * FROM rt0 WHERE (' +aE') ORDER BY ((json_type(rt0.c2))=(((rt0.c3)%(rt0.c0))))  NULLS FIRST, (CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c1 END IN (CAST(rt0.c0 AS TEXT))) ASC;
SELECT ALL * FROM rt0 WHERE (' +aE');
SELECT ALL * FROM rt0 WHERE (' +aE') ORDER BY ((json_type(rt0.c2))=(((rt0.c3)%(rt0.c0))))  NULLS FIRST, (CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c1 END IN (CAST(rt0.c0 AS TEXT))) ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END IN (((((rt0.c3)OR(rt0.c0)))AND(rt0.c3)), rt0.c1, NULL))) ORDER BY (((0.46790440483780515, vt1.c0, rt0.c2)) BETWEEN ((((rt0.c3)AND(rt0.c1)), rt0.c0 COLLATE BINARY, rt0.c0 COLLATE NOCASE)) AND (((vt1.c0 IN (vt1.c0, rt0.c2)), ((rt0.c0)IS(rt0.c0)), ((rt0.c3) NOTNULL)))), CASE ((((rt0.c3)OR(vt1.c0)))AND(NULL))  WHEN NULLIF(DISTINCT rt0.c2, rt0.c2) THEN ((x'023d')AND(rt0.c0)) ELSE rt0.c1 COLLATE RTRIM END;
SELECT * FROM rt0, vt1 WHERE ((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END IN (((((rt0.c3)OR(rt0.c0)))AND(rt0.c3)), rt0.c1, NULL))) ORDER BY ((((rt0.c0)>(rt0.c3)))<<(((rt0.c3)GLOB(rt0.c3)))) INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((rtreenode(rt0.c2, rt0.c0) IN (rt0.c0, (vt1.c0 IN ())))) ORDER BY ((((rt0.c0)>(rt0.c3)))<<(((rt0.c3)GLOB(rt0.c3))));
SELECT ALL * FROM rt0, vt1 WHERE ((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END IN (((((rt0.c3)OR(rt0.c0)))AND(rt0.c3)), rt0.c1, NULL))) ORDER BY (((0.46790440483780515, vt1.c0, rt0.c2)) BETWEEN ((((rt0.c3)AND(rt0.c1)), rt0.c0 COLLATE BINARY, rt0.c0 COLLATE NOCASE)) AND (((vt1.c0 IN (vt1.c0, rt0.c2)), ((rt0.c0)IS(rt0.c0)), ((rt0.c3) NOTNULL)))), CASE ((((rt0.c3)OR(vt1.c0)))AND(NULL))  WHEN NULLIF(DISTINCT rt0.c2, rt0.c2) THEN ((x'023d')AND(rt0.c0)) ELSE rt0.c1 COLLATE RTRIM END;
SELECT * FROM rt0, vt1 WHERE ((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END IN (((((rt0.c3)OR(rt0.c0)))AND(rt0.c3)), rt0.c1, NULL))) ORDER BY ((((rt0.c0)>(rt0.c3)))<<(((rt0.c3)GLOB(rt0.c3)))) INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((rtreenode(rt0.c2, rt0.c0) IN (rt0.c0, (vt1.c0 IN ())))) ORDER BY ((((rt0.c0)>(rt0.c3)))<<(((rt0.c3)GLOB(rt0.c3))));
SELECT COUNT(*) FROM vt1, rt0 WHERE (CASE WHEN CAST(rt0.c0 AS NUMERIC) THEN ((rt0.c0)*(rt0.c3)) WHEN TYPEOF(rt0.c2) THEN (((rt0.c0, rt0.c0))>((rt0.c1, rt0.c2))) WHEN CAST(rt0.c2 AS TEXT) THEN rt0.c0 ELSE rt0.c3 END);
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (CASE WHEN CAST(rt0.c0 AS NUMERIC) THEN ((rt0.c0)*(rt0.c3)) WHEN TYPEOF(rt0.c2) THEN (((rt0.c0, rt0.c0))>((rt0.c1, rt0.c2))) WHEN CAST(rt0.c2 AS TEXT) THEN rt0.c0 ELSE rt0.c3 END);
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((NOT (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY TYPEOF(DISTINCT x'12') ASC  NULLS LAST, ((vt1.c0)&(vt1.c0)) COLLATE RTRIM ASC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((NOT (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND((('w-infinityb')OR(((vt1.c0)>>(vt1.c0))))))) ORDER BY (('\zN|')IS NOT(CAST(vt1.c0 AS NUMERIC)))  NULLS FIRST, vt1.c0 ASC  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((- (((vt1.c0)||(vt1.c0))))) ORDER BY (('\zN|')IS NOT(CAST(vt1.c0 AS NUMERIC)))  NULLS FIRST, vt1.c0 ASC  NULLS LAST LIMIT 0X2;
SELECT * FROM rt0 WHERE (0.8895009993640729) ORDER BY 0.09388480227731166, ABS(DISTINCT (rt0.c0 IN (rt0.c0, rt0.c0))) DESC;
SELECT * FROM rt0 WHERE (((0.8895009993640729)AND((((+ (rt0.c0))) BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY 0.09388480227731166, ABS(DISTINCT (rt0.c0 IN (rt0.c0, rt0.c0))) DESC;
SELECT * FROM rt0 WHERE (0.8895009993640729) ORDER BY 0.09388480227731166, ABS(DISTINCT (rt0.c0 IN (rt0.c0, rt0.c0))) DESC;
SELECT * FROM rt0 WHERE (((0.8895009993640729)AND((((+ (rt0.c0))) BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY 0.09388480227731166, ABS(DISTINCT (rt0.c0 IN (rt0.c0, rt0.c0))) DESC;
SELECT ALL * FROM vt1, rt0 NOT INDEXED WHERE ((((vt1.c0)IS(rt0.c2)) IN (CASE WHEN rt0.c2 THEN rt0.c1 WHEN NULL THEN NULL WHEN rt0.c3 THEN rt0.c0 ELSE 0xffffffff85b4e5a5 END))) ORDER BY ((((rt0.c2) ISNULL))>=(((0.03196369631227758) NOTNULL)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((vt1.c0)IS(rt0.c2)) IN (CASE WHEN rt0.c2 THEN rt0.c1 WHEN NULL THEN NULL WHEN rt0.c3 THEN rt0.c0 ELSE 0Xffffffff85b4e5a5 END)))AND((+ (((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c2))))))) ORDER BY ((((rt0.c2) ISNULL))>=(((0.03196369631227758) NOTNULL)))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((~ (UPPER(rt0.c3)))) ORDER BY ((((rt0.c2) ISNULL))>=(((0.03196369631227758) NOTNULL)))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 NOT INDEXED WHERE ((((vt1.c0)IS(rt0.c2)) IN (CASE WHEN rt0.c2 THEN rt0.c1 WHEN NULL THEN NULL WHEN rt0.c3 THEN rt0.c0 ELSE 0xffffffff85b4e5a5 END))) ORDER BY ((((rt0.c2) ISNULL))>=(((0.03196369631227758) NOTNULL)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((vt1.c0)IS(rt0.c2)) IN (CASE WHEN rt0.c2 THEN rt0.c1 WHEN NULL THEN NULL WHEN rt0.c3 THEN rt0.c0 ELSE 0Xffffffff85b4e5a5 END)))AND((+ (((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c2))))))) ORDER BY ((((rt0.c2) ISNULL))>=(((0.03196369631227758) NOTNULL)))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((~ (UPPER(rt0.c3)))) ORDER BY ((((rt0.c2) ISNULL))>=(((0.03196369631227758) NOTNULL)))  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((INSTR(rt0.c3, vt1.c0))>(CAST(rt0.c2 AS REAL)))) ORDER BY ((((rt0.c0)IS(vt1.c0))) ISNULL)  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE (((((INSTR(rt0.c3, vt1.c0))>(CAST(rt0.c2 AS REAL))))AND(CASE WHEN CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 END THEN 0.6890160182444096 WHEN (- (vt1.c0)) THEN TRIM(rt0.c3, rt0.c1) END))) ORDER BY ((((rt0.c0)IS(vt1.c0))) ISNULL)  NULLS FIRST LIMIT 1;
SELECT * FROM rt0, vt1 WHERE (((INSTR(rt0.c3, vt1.c0))>(CAST(rt0.c2 AS REAL)))) ORDER BY ((((rt0.c0)IS(vt1.c0))) ISNULL)  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE (((((INSTR(rt0.c3, vt1.c0))>(CAST(rt0.c2 AS REAL))))AND(CASE WHEN CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 END THEN 0.6890160182444096 WHEN (- (vt1.c0)) THEN TRIM(rt0.c3, rt0.c1) END))) ORDER BY ((((rt0.c0)IS(vt1.c0))) ISNULL)  NULLS FIRST LIMIT 1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS TEXT)) ORDER BY '' DESC, (((+ (vt1.c0)))!=((((x'10'))==((vt1.c0)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS TEXT))AND(((CAST(vt1.c0 AS BLOB))||((vt1.c0 IN (vt1.c0))))))) ORDER BY '' DESC, (((+ (vt1.c0)))<>((((x'10'))=((vt1.c0))))) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CAST(vt1.c0 AS NUMERIC) COLLATE RTRIM) ORDER BY '' DESC, (((+ (vt1.c0)))<>((((x'10'))==((vt1.c0)))));
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (~ ((((rt0.c2, rt0.c0, rt0.c0, rt0.c2))>((rt0.c0, rt0.c1, rt0.c1, rt0.c0))))) WHERE (((7.74386652E8) BETWEEN (((((((rt0.c2)AND(rt0.c1)))OR(x'06')))OR(rt0.c1))) AND (((((rt0.c3)AND(rt0.c0)))AND(rt0.c1))))) ORDER BY ((((rt0.c2 IN ()), ((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0)), '-627658879', ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)), ((rt0.c0) NOT BETWEEN (x'79e8f4') AND (vt1.c0))))<(('u', (rt0.c3 IN (rt0.c3)), (((NULL))=((rt0.c0))), (NULL IN (rt0.c0)), '-626160847'))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (~ ((((rt0.c2, rt0.c0, rt0.c0, rt0.c2))>((rt0.c0, rt0.c1, rt0.c1, rt0.c0))))) WHERE (((7.74386652E8) BETWEEN (((((((rt0.c2)AND(rt0.c1)))OR(x'06')))OR(rt0.c1))) AND (((((rt0.c3)AND(rt0.c0)))AND(rt0.c1))))) ORDER BY CAST(CAST(rt0.c1 AS NUMERIC) AS REAL);
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (~ ((((rt0.c2, rt0.c0, rt0.c0, rt0.c2))>((rt0.c0, rt0.c1, rt0.c1, rt0.c0))))) WHERE (((7.74386652E8) BETWEEN (((((((rt0.c2)AND(rt0.c1)))OR(x'06')))OR(rt0.c1))) AND (((((rt0.c3)AND(rt0.c0)))AND(rt0.c1))))) ORDER BY ((((rt0.c2 IN ()), ((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0)), '-627658879', ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)), ((rt0.c0) NOT BETWEEN (x'79e8f4') AND (vt1.c0))))<(('u', (rt0.c3 IN (rt0.c3)), (((NULL))=((rt0.c0))), (NULL IN (rt0.c0)), '-626160847'))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (~ ((((rt0.c2, rt0.c0, rt0.c0, rt0.c2))>((rt0.c0, rt0.c1, rt0.c1, rt0.c0))))) WHERE (((7.74386652E8) BETWEEN (((((((rt0.c2)AND(rt0.c1)))OR(x'06')))OR(rt0.c1))) AND (((((rt0.c3)AND(rt0.c0)))AND(rt0.c1))))) ORDER BY CAST(CAST(rt0.c1 AS NUMERIC) AS REAL);
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (((CAST(vt1.c0 AS TEXT), rt0.c3))>=((rt0.c1, ((vt1.c0)<=(rt0.c2))))) WHERE (CAST(vt1.c0 AS NUMERIC) COLLATE RTRIM) ORDER BY HEX(DISTINCT ((rt0.c2) NOT NULL)) ASC;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (((CAST(vt1.c0 AS TEXT), rt0.c3))>=((rt0.c1, ((vt1.c0)<=(rt0.c2))))) WHERE (((CAST(vt1.c0 AS NUMERIC) COLLATE RTRIM)AND(CASE WHEN (6.13419071E8 IN ()) THEN CAST(x'' AS NUMERIC) ELSE (((rt0.c2, rt0.c0, rt0.c1))>((rt0.c1, rt0.c2, 'gz'))) END))) ORDER BY (('722345103' COLLATE NOCASE)>>((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3))))) DESC LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (((CAST(vt1.c0 AS TEXT), rt0.c3))>=((rt0.c1, ((vt1.c0)<=(rt0.c2))))) WHERE (((rt0.c2 COLLATE NOCASE) NOTNULL)) ORDER BY (('722345103' COLLATE NOCASE)>>((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3))))) DESC LIMIT 0x1;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (((CAST(vt1.c0 AS TEXT), rt0.c3))>=((rt0.c1, ((vt1.c0)<=(rt0.c2))))) WHERE (CAST(vt1.c0 AS NUMERIC) COLLATE RTRIM) ORDER BY HEX(DISTINCT ((rt0.c2) NOT NULL)) ASC;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (((CAST(vt1.c0 AS TEXT), rt0.c3))>=((rt0.c1, ((vt1.c0)<=(rt0.c2))))) WHERE (((CAST(vt1.c0 AS NUMERIC) COLLATE RTRIM)AND(CASE WHEN (6.13419071E8 IN ()) THEN CAST(x'' AS NUMERIC) ELSE (((rt0.c2, rt0.c0, rt0.c1))>((rt0.c1, rt0.c2, 'gz'))) END))) ORDER BY (('722345103' COLLATE NOCASE)>>((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3))))) DESC LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (((CAST(vt1.c0 AS TEXT), rt0.c3))>=((rt0.c1, ((vt1.c0)<=(rt0.c2))))) WHERE (((rt0.c2 COLLATE NOCASE) NOTNULL)) ORDER BY (('722345103' COLLATE NOCASE)>>((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3))))) DESC LIMIT 0x1;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT NULL) WHERE ((((- (rt0.c3))) IS FALSE)) ORDER BY x'30963005' DESC  NULLS LAST, ((((rt0.c0)>=(rt0.c2)))<<((rt0.c1 IN (vt1.c0, rt0.c1))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT NULL) WHERE ((((- (rt0.c3))) IS FALSE)) ORDER BY (~ (((((vt1.c0)OR(rt0.c2)))OR(rt0.c0))))  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT NULL) WHERE (((TRIM(DISTINCT rt0.c3)) NOTNULL)) ORDER BY (~ (((((vt1.c0)OR(rt0.c2)))OR(rt0.c0))))  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT NULL) WHERE ((((- (rt0.c3))) IS FALSE)) ORDER BY x'30963005' DESC  NULLS LAST, ((((rt0.c0)>=(rt0.c2)))<<((rt0.c1 IN (vt1.c0, rt0.c1))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT NULL) WHERE ((((- (rt0.c3))) IS FALSE)) ORDER BY (~ (((((vt1.c0)OR(rt0.c2)))OR(rt0.c0))))  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT NULL) WHERE (((TRIM(DISTINCT rt0.c3)) NOTNULL)) ORDER BY (~ (((((vt1.c0)OR(rt0.c2)))OR(rt0.c0))))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE ((NOT (x''))) ORDER BY (+ (LOWER(DISTINCT rt0.c0))) ASC  NULLS FIRST, CAST(NULL AS REAL) COLLATE BINARY  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((NOT (x'')))AND(((((rt0.c3)==(rt0.c2))) ISNULL)))) ORDER BY CAST(CAST(rt0.c1 AS BLOB) AS REAL) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM rt0 WHERE (((+ (rt0.c1)) IN ())) ORDER BY CAST(CAST(rt0.c1 AS BLOB) AS REAL) ASC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((NOT (x''))) ORDER BY (+ (LOWER(DISTINCT rt0.c0))) ASC  NULLS FIRST, CAST(NULL AS REAL) COLLATE BINARY  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((NOT (x'')))AND(((((rt0.c3)==(rt0.c2))) ISNULL)))) ORDER BY CAST(CAST(rt0.c1 AS BLOB) AS REAL) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM rt0 WHERE (((+ (rt0.c1)) IN ())) ORDER BY CAST(CAST(rt0.c1 AS BLOB) AS REAL) ASC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS BLOB)) ORDER BY CAST(CASE WHEN NULL THEN vt1.c0 END AS TEXT) DESC  NULLS LAST, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)<<(CASE WHEN x'3920' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS BLOB)) ORDER BY ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE LIMIT 0x0;
SELECT MAX(rt0.c1) FROM rt0 LEFT OUTER JOIN vt1 ON 0.5465196597386172 COLLATE NOCASE WHERE ('') ORDER BY (((rt0.c1)) NOT BETWEEN ((((vt1.c0) ISNULL))) AND ((0.6397892377392089 COLLATE RTRIM))) DESC;
SELECT DISTINCT MAX(rt0.c1) FROM rt0 LEFT OUTER JOIN vt1 ON 0.5465196597386172 COLLATE NOCASE WHERE ((('')AND(CAST(rt0.c2 COLLATE RTRIM AS NUMERIC)))) ORDER BY ((NOT ('-1028226782')) IN ()) INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0 LEFT OUTER JOIN vt1 ON 0.5465196597386172 COLLATE NOCASE WHERE (((rt0.c1 COLLATE BINARY) IS FALSE)) ORDER BY ((NOT ('-1028226782')) IN ());
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (CAST(rt0.c1 AS INTEGER));
SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(rt0.c1 AS INTEGER)) ORDER BY TYPEOF(vt1.c0) DESC  NULLS FIRST, ROUND(CAST(rt0.c0 AS NUMERIC), HEX(DISTINCT vt1.c0));
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (CAST(rt0.c1 AS INTEGER));
SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(rt0.c1 AS INTEGER)) ORDER BY TYPEOF(vt1.c0) DESC  NULLS FIRST, ROUND(CAST(rt0.c0 AS NUMERIC), HEX(DISTINCT vt1.c0));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN (((- (vt1.c0)), ((vt1.c0) NOTNULL))) AND ((TYPEOF(vt1.c0), (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN (((- (vt1.c0)), ((vt1.c0) NOTNULL))) AND ((TYPEOF(vt1.c0), (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))))) ORDER BY CASE vt1.c0  WHEN ((vt1.c0) IS TRUE) THEN (((0.8466754036037584)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) WHEN NULLIF(DISTINCT vt1.c0, 722345103) THEN vt1.c0 WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END END  NULLS FIRST;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (+ (rt0.c0)) WHERE (((((UNLIKELY(vt1.c0))OR(vt1.c0 COLLATE BINARY)))AND(((rt0.c3) IS FALSE))));
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON (+ (rt0.c0)) WHERE (((((((UNLIKELY(vt1.c0))OR(vt1.c0 COLLATE BINARY)))AND(((rt0.c3) IS FALSE))))AND(((((vt1.c0)*(vt1.c0)))IS NOT(((x'f8e2')IS NOT(''))))))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON (+ (rt0.c0)) WHERE (((((vt1.c0) IS FALSE)) NOTNULL)) LIMIT 0X2;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (+ (rt0.c0)) WHERE (((((UNLIKELY(vt1.c0))OR(vt1.c0 COLLATE BINARY)))AND(((rt0.c3) IS FALSE))));
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON (+ (rt0.c0)) WHERE (((((((UNLIKELY(vt1.c0))OR(vt1.c0 COLLATE BINARY)))AND(((rt0.c3) IS FALSE))))AND(((((vt1.c0)*(vt1.c0)))IS NOT(((x'f8e2')IS NOT(''))))))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON (+ (rt0.c0)) WHERE (((((vt1.c0) IS FALSE)) NOTNULL)) LIMIT 0X2;
SELECT * FROM rt0 WHERE (TRIM(rt0.c0 COLLATE NOCASE)) ORDER BY ((((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3))) NOTNULL)  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((TRIM(rt0.c0 COLLATE NOCASE))AND((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)) IN (CASE rt0.c0  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c1 END))))) ORDER BY LOWER(DISTINCT (- (rt0.c0))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((x'df')>>(rt0.c0))) NOT BETWEEN (((rt0.c2) IS FALSE)) AND (CAST(rt0.c0 AS INTEGER)))) ORDER BY LOWER(DISTINCT (- (rt0.c0)));
SELECT * FROM rt0 WHERE (TRIM(rt0.c0 COLLATE NOCASE)) ORDER BY ((((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3))) NOTNULL)  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((TRIM(rt0.c0 COLLATE NOCASE))AND((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)) IN (CASE rt0.c0  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c1 END))))) ORDER BY LOWER(DISTINCT (- (rt0.c0))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((x'df')>>(rt0.c0))) NOT BETWEEN (((rt0.c2) IS FALSE)) AND (CAST(rt0.c0 AS INTEGER)))) ORDER BY LOWER(DISTINCT (- (rt0.c0)));
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3)) IN ())) ORDER BY rt0.c2, ((rt0.c0)!=(((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c2)))), LOWER(((rt0.c1)IS NOT(rt0.c1)));
SELECT MIN(rt0.c2) FROM rt0 WHERE ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3)) IN ())) ORDER BY rt0.c2, ((rt0.c0)!=(((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c2)))), LOWER(((rt0.c1)IS NOT(rt0.c1))) INTERSECT SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (((((rt0.c0)>(rt0.c1))) NOTNULL)) ORDER BY rt0.c2, ((rt0.c0)<>(((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c2)))), LOWER(((rt0.c1)IS NOT(rt0.c1)));
SELECT MAX(rt0.c0) FROM rt0, vt1 WHERE (CASE WHEN NULLIF(DISTINCT vt1.c0, rt0.c1) THEN ((vt1.c0)<>(rt0.c0)) WHEN (rt0.c0 IN ()) THEN ((rt0.c3) NOT NULL) END) ORDER BY rt0.c1 ASC  NULLS FIRST, ((((rt0.c0)GLOB(rt0.c3))) NOTNULL)  NULLS FIRST;
SELECT MAX(rt0.c0) FROM rt0, vt1 WHERE (CASE WHEN NULLIF(DISTINCT vt1.c0, rt0.c1) THEN ((vt1.c0)!=(rt0.c0)) WHEN (rt0.c0 IN ()) THEN ((rt0.c3) NOT NULL) END) ORDER BY rt0.c1 ASC  NULLS FIRST, ((((rt0.c0)GLOB(rt0.c3))) NOTNULL)  NULLS FIRST;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((rt0.c1)IS NOT(rt0.c0)) IN ()) WHERE ('q');
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((rt0.c1)IS NOT(rt0.c0)) IN ()) WHERE ((('q')AND(TOTAL_CHANGES() COLLATE RTRIM))) LIMIT 0;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((rt0.c1)IS NOT(rt0.c0)) IN ()) WHERE ('q');
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((rt0.c1)IS NOT(rt0.c0)) IN ()) WHERE ((('q')AND(TOTAL_CHANGES() COLLATE RTRIM))) LIMIT 0;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c3)<>(rt0.c1)) THEN rt0.c0 COLLATE RTRIM WHEN ((vt1.c0)>>(0.4011295587787269)) THEN ((((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)))AND(rt0.c3)) WHEN rt0.c2 COLLATE BINARY THEN (+ (vt1.c0)) END) ORDER BY (+ (((rt0.c3)<('-1570791567')))) ASC, (((rt0.c2, 0.30264545345381044, vt1.c0)) NOT BETWEEN ((rt0.c2, 'f(*', rt0.c2)) AND ((vt1.c0, rt0.c1, rt0.c3))) COLLATE RTRIM ASC, (((('-1688611678') BETWEEN (rt0.c2) AND (rt0.c0))) NOT BETWEEN (((rt0.c2)/(rt0.c3))) AND (TYPEOF(rt0.c1))), CAST((NOT (rt0.c1)) AS REAL) ASC;
SELECT ALL * FROM vt1, rt0 WHERE (((CASE WHEN ((rt0.c3)<>(rt0.c1)) THEN rt0.c0 COLLATE RTRIM WHEN ((vt1.c0)>>(0.4011295587787269)) THEN ((((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)))AND(rt0.c3)) WHEN rt0.c2 COLLATE BINARY THEN (+ (vt1.c0)) END)AND(((NULL) NOT BETWEEN (((NULL) ISNULL)) AND ('1344574141'))))) ORDER BY (((rt0.c3 COLLATE BINARY))>(((- (rt0.c1)))))  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (('999695506' IN (((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2))))) ORDER BY (((rt0.c3 COLLATE BINARY))>(((- (rt0.c1)))))  NULLS LAST LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c3)<>(rt0.c1)) THEN rt0.c0 COLLATE RTRIM WHEN ((vt1.c0)>>(0.4011295587787269)) THEN ((((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)))AND(rt0.c3)) WHEN rt0.c2 COLLATE BINARY THEN (+ (vt1.c0)) END) ORDER BY (+ (((rt0.c3)<('-1570791567')))) ASC, (((rt0.c2, 0.30264545345381044, vt1.c0)) NOT BETWEEN ((rt0.c2, 'f(*', rt0.c2)) AND ((vt1.c0, rt0.c1, rt0.c3))) COLLATE RTRIM ASC, (((('-1688611678') BETWEEN (rt0.c2) AND (rt0.c0))) NOT BETWEEN (((rt0.c2)/(rt0.c3))) AND (TYPEOF(rt0.c1))), CAST((NOT (rt0.c1)) AS REAL) ASC;
SELECT ALL * FROM vt1, rt0 WHERE (((CASE WHEN ((rt0.c3)<>(rt0.c1)) THEN rt0.c0 COLLATE RTRIM WHEN ((vt1.c0)>>(0.4011295587787269)) THEN ((((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)))AND(rt0.c3)) WHEN rt0.c2 COLLATE BINARY THEN (+ (vt1.c0)) END)AND(((NULL) NOT BETWEEN (((NULL) ISNULL)) AND ('1344574141'))))) ORDER BY (((rt0.c3 COLLATE BINARY))>(((- (rt0.c1)))))  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (('999695506' IN (((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2))))) ORDER BY (((rt0.c3 COLLATE BINARY))>(((- (rt0.c1)))))  NULLS LAST LIMIT 1;
SELECT * FROM rt0 WHERE (((((((((((CAST(rt0.c3 AS INTEGER))AND(NULL)))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))))AND(((rt0.c2)==(rt0.c2)))))OR((- (rt0.c3)))))OR(((rt0.c3) NOT NULL))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((((CAST(rt0.c3 AS INTEGER))AND(NULL)))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))))AND(((rt0.c2)==(rt0.c2)))))OR((- (rt0.c3)))))OR(((rt0.c3) NOT NULL))))AND(CASE ((rt0.c2)!=(rt0.c1))  WHEN rt0.c0 THEN ((rt0.c1) NOT BETWEEN (0.47885571110003355) AND (rt0.c0)) WHEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((rt0.c3)!=('1965182289')) ELSE CAST(rt0.c0 AS TEXT) END))) ORDER BY IFNULL(((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c3)), ((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c1)))OR(NULL)));
SELECT * FROM rt0 WHERE (((((((((((CAST(rt0.c3 AS INTEGER))AND(NULL)))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))))AND(((rt0.c2)==(rt0.c2)))))OR((- (rt0.c3)))))OR(((rt0.c3) NOT NULL))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((((CAST(rt0.c3 AS INTEGER))AND(NULL)))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))))AND(((rt0.c2)==(rt0.c2)))))OR((- (rt0.c3)))))OR(((rt0.c3) NOT NULL))))AND(CASE ((rt0.c2)!=(rt0.c1))  WHEN rt0.c0 THEN ((rt0.c1) NOT BETWEEN (0.47885571110003355) AND (rt0.c0)) WHEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((rt0.c3)!=('1965182289')) ELSE CAST(rt0.c0 AS TEXT) END))) ORDER BY IFNULL(((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c3)), ((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c1)))OR(NULL)));
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (((((((((((rt0.c0)OR(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)))AND(CASE rt0.c1  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c0 END)))AND(((vt1.c0)IS(rt0.c1)))));
SELECT MIN(rt0.c0) FROM vt1, rt0 WHERE (((((((((((((rt0.c0)OR(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)))AND(CASE rt0.c1  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c0 END)))AND(((vt1.c0)IS(rt0.c1)))))AND(x'fc'))) LIMIT 0 INTERSECT SELECT MIN(rt0.c0) FROM vt1, rt0 WHERE (CASE WHEN LOWER(rt0.c2) THEN ((rt0.c3) NOT BETWEEN (NULL) AND (rt0.c2)) WHEN NULL THEN ((rt0.c1)<=(rt0.c1)) WHEN 0.09514720601543125 THEN (((NULL))>((vt1.c0))) WHEN ((rt0.c2)LIKE(vt1.c0)) THEN (- (vt1.c0)) END) LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3)) NOT BETWEEN ((0.6328378967826082 COLLATE BINARY)) AND ((rt0.c0))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((rt0.c3)) NOT BETWEEN ((0.6328378967826082 COLLATE BINARY)) AND ((rt0.c0)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(CASE rt0.c1  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 END AS NUMERIC));
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3)) NOT BETWEEN ((0.6328378967826082 COLLATE BINARY)) AND ((rt0.c0))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((rt0.c3)) NOT BETWEEN ((0.6328378967826082 COLLATE BINARY)) AND ((rt0.c0)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(CASE rt0.c1  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 END AS NUMERIC));
SELECT * FROM rt0 CROSS JOIN vt1 ON NULL WHERE ((((((rt0.c2, rt0.c2))<((rt0.c1, rt0.c3))))/(CASE rt0.c2  WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END)));
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON NULL WHERE ((((((rt0.c2, rt0.c2))<((rt0.c1, rt0.c3))))/(CASE rt0.c2  WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END))) ORDER BY rt0.c0, CAST((~ (NULL)) AS REAL), (((rt0.c2, rt0.c2, rt0.c1, x'f807', rt0.c2)) BETWEEN ((rt0.c0 COLLATE NOCASE, CASE vt1.c0  WHEN vt1.c0 THEN rt0.c3 ELSE NULL END, COALESCE(DISTINCT rt0.c1, rt0.c0, rt0.c0, 0.7654783778594165), (((NULL, vt1.c0, rt0.c0, rt0.c3))=((vt1.c0, rt0.c0, rt0.c2, '-716538394'))), (((rt0.c2, vt1.c0, rt0.c1))>((rt0.c0, rt0.c0, rt0.c3))))) AND ((LTRIM(rt0.c0), rt0.c2 COLLATE RTRIM, vt1.c0, ((rt0.c0)=(rt0.c3)), CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 END))) ASC  NULLS FIRST LIMIT 0X0;
SELECT * FROM rt0 CROSS JOIN vt1 ON NULL WHERE ((((((rt0.c2, rt0.c2))<((rt0.c1, rt0.c3))))/(CASE rt0.c2  WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END)));
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON NULL WHERE ((((((rt0.c2, rt0.c2))<((rt0.c1, rt0.c3))))/(CASE rt0.c2  WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END))) ORDER BY rt0.c0, CAST((~ (NULL)) AS REAL), (((rt0.c2, rt0.c2, rt0.c1, x'f807', rt0.c2)) BETWEEN ((rt0.c0 COLLATE NOCASE, CASE vt1.c0  WHEN vt1.c0 THEN rt0.c3 ELSE NULL END, COALESCE(DISTINCT rt0.c1, rt0.c0, rt0.c0, 0.7654783778594165), (((NULL, vt1.c0, rt0.c0, rt0.c3))=((vt1.c0, rt0.c0, rt0.c2, '-716538394'))), (((rt0.c2, vt1.c0, rt0.c1))>((rt0.c0, rt0.c0, rt0.c3))))) AND ((LTRIM(rt0.c0), rt0.c2 COLLATE RTRIM, vt1.c0, ((rt0.c0)=(rt0.c3)), CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 END))) ASC  NULLS FIRST LIMIT 0X0;
SELECT COUNT(*) FROM vt1, rt0 WHERE ((~ (JULIANDAY(rt0.c2, vt1.c0, vt1.c0)))) ORDER BY (+ (((vt1.c0) ISNULL))) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE ((~ (JULIANDAY(rt0.c2, vt1.c0, vt1.c0)))) ORDER BY (+ (((vt1.c0) ISNULL))) ASC  NULLS FIRST LIMIT 4 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((rt0.c0)<=(rt0.c2)) COLLATE RTRIM COLLATE BINARY) ORDER BY (+ (((vt1.c0) ISNULL))) ASC  NULLS FIRST LIMIT 4;
SELECT ALL * FROM rt0 WHERE (CASE WHEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((((rt0.c3)AND(rt0.c0)))OR(rt0.c1)) ELSE NULL END);
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((((rt0.c3)AND(rt0.c0)))OR(rt0.c1)) ELSE NULL END)AND(x''))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((+ ((((rt0.c2))<>((rt0.c1))))));
SELECT ALL * FROM rt0 WHERE (CASE WHEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((((rt0.c3)AND(rt0.c0)))OR(rt0.c1)) ELSE NULL END);
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((((rt0.c3)AND(rt0.c0)))OR(rt0.c1)) ELSE NULL END)AND(x''))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((+ ((((rt0.c2))<>((rt0.c1))))));
SELECT * FROM rt0, vt1 WHERE ((((((((((((((((((((vt1.c0)AND(rt0.c0)))AND(rt0.c2)))AND(vt1.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)), (NOT (rt0.c3))))>((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 ELSE 'W' END, (rt0.c1 IN (rt0.c2, rt0.c1))))));
SELECT ALL * FROM rt0, vt1 WHERE ((((((((((((((((((((vt1.c0)AND(rt0.c0)))AND(rt0.c2)))AND(vt1.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)), (NOT (rt0.c3))))>((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 ELSE 'W' END, (rt0.c1 IN (rt0.c2)))))) ORDER BY ((LTRIM(rt0.c3, rt0.c3))<(CASE 0.9179041186773454  WHEN rt0.c1 THEN rt0.c2 ELSE vt1.c0 END))  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((((((vt1.c0, rt0.c2))!=((rt0.c2, rt0.c2)))) BETWEEN (((rt0.c1) NOT BETWEEN ('1874888233') AND (vt1.c0))) AND (IFNULL(rt0.c1, vt1.c0)))) ORDER BY ((LTRIM(rt0.c3, rt0.c3))<(CASE 0.9179041186773454  WHEN rt0.c1 THEN rt0.c2 ELSE vt1.c0 END))  NULLS FIRST LIMIT 1;
SELECT * FROM rt0, vt1 WHERE ((((((((((((((((((((vt1.c0)AND(rt0.c0)))AND(rt0.c2)))AND(vt1.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)), (NOT (rt0.c3))))>((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 ELSE 'W' END, (rt0.c1 IN (rt0.c2, rt0.c1))))));
SELECT ALL * FROM rt0, vt1 WHERE ((((((((((((((((((((vt1.c0)AND(rt0.c0)))AND(rt0.c2)))AND(vt1.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)), (NOT (rt0.c3))))>((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 ELSE 'W' END, (rt0.c1 IN (rt0.c2)))))) ORDER BY ((LTRIM(rt0.c3, rt0.c3))<(CASE 0.9179041186773454  WHEN rt0.c1 THEN rt0.c2 ELSE vt1.c0 END))  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((((((vt1.c0, rt0.c2))!=((rt0.c2, rt0.c2)))) BETWEEN (((rt0.c1) NOT BETWEEN ('1874888233') AND (vt1.c0))) AND (IFNULL(rt0.c1, vt1.c0)))) ORDER BY ((LTRIM(rt0.c3, rt0.c3))<(CASE 0.9179041186773454  WHEN rt0.c1 THEN rt0.c2 ELSE vt1.c0 END))  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM rt0 WHERE (CASE WHEN (rt0.c3 IN (rt0.c3)) THEN (- (rt0.c0)) WHEN ((rt0.c1) ISNULL) THEN (~ (NULL)) END) ORDER BY (((rt0.c0 IN ())) NOT BETWEEN ((- (rt0.c3))) AND (rt0.c1)) DESC, ((((rt0.c1)IS NOT(rt0.c1))) NOT BETWEEN (rt0.c2) AND (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c3 END));
SELECT COUNT(*) FROM rt0 WHERE (CASE WHEN (rt0.c3 IN (rt0.c3)) THEN (- (rt0.c0)) WHEN ((rt0.c1) ISNULL) THEN (~ (NULL)) END) ORDER BY ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c0)) COLLATE NOCASE ASC  NULLS LAST, ((rtreenode(rt0.c0, '&S'))AND(rt0.c0)) DESC, (((~ (rt0.c2)))*(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c2)))) DESC  NULLS LAST LIMIT 0;
SELECT * FROM rt0 WHERE (CASE ((rt0.c0)%(rt0.c3))  WHEN TYPEOF(rt0.c2) THEN ((rt0.c2)-(rt0.c0)) END);
SELECT DISTINCT * FROM rt0 WHERE (CASE ((rt0.c0)%(rt0.c3))  WHEN TYPEOF(rt0.c2) THEN ((rt0.c2)-(rt0.c0)) END) ORDER BY rt0.c2 ASC  NULLS FIRST LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c3) ORDER BY rt0.c2 ASC  NULLS FIRST LIMIT 4;
SELECT * FROM rt0 WHERE (CASE ((rt0.c0)%(rt0.c3))  WHEN TYPEOF(rt0.c2) THEN ((rt0.c2)-(rt0.c0)) END);
SELECT DISTINCT * FROM rt0 WHERE (CASE ((rt0.c0)%(rt0.c3))  WHEN TYPEOF(rt0.c2) THEN ((rt0.c2)-(rt0.c0)) END) ORDER BY rt0.c2 ASC  NULLS FIRST LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c3) ORDER BY rt0.c2 ASC  NULLS FIRST LIMIT 4;
SELECT ALL * FROM rt0, vt1 WHERE ((((UNLIKELY(rt0.c1), (((rt0.c3, '1996674499', rt0.c3))>=((rt0.c3, vt1.c0, rt0.c1))), ((rt0.c3)GLOB(rt0.c1))))<((((rt0.c1)&(rt0.c1)), ((rt0.c2)AND(rt0.c0)), ((((vt1.c0)OR(rt0.c3)))AND(rt0.c0)))))) ORDER BY CAST((+ (rt0.c0)) AS INTEGER) DESC  NULLS FIRST, CAST((0Xffffffff9454e6f8 IN ()) AS BLOB) DESC;
SELECT ALL * FROM rt0, vt1 WHERE ((((UNLIKELY(rt0.c1), (((rt0.c3, '1996674499', rt0.c3))>((rt0.c3, vt1.c0, rt0.c1))), ((rt0.c3)GLOB(rt0.c1))))<((((rt0.c1)&(rt0.c1)), ((rt0.c2)AND(rt0.c0)), ((((vt1.c0)OR(rt0.c3)))AND(rt0.c0)))))) ORDER BY CAST((+ (rt0.c0)) AS INTEGER) DESC  NULLS FIRST, CAST((0xffffffff9454e6f8 IN ()) AS BLOB) DESC LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE ((((UNLIKELY(rt0.c1), (((rt0.c3, '1996674499', rt0.c3))>=((rt0.c3, vt1.c0, rt0.c1))), ((rt0.c3)GLOB(rt0.c1))))<((((rt0.c1)&(rt0.c1)), ((rt0.c2)AND(rt0.c0)), ((((vt1.c0)OR(rt0.c3)))AND(rt0.c0)))))) ORDER BY CAST((+ (rt0.c0)) AS INTEGER) DESC  NULLS FIRST, CAST((0Xffffffff9454e6f8 IN ()) AS BLOB) DESC;
SELECT ALL * FROM rt0, vt1 WHERE ((((UNLIKELY(rt0.c1), (((rt0.c3, '1996674499', rt0.c3))>((rt0.c3, vt1.c0, rt0.c1))), ((rt0.c3)GLOB(rt0.c1))))<((((rt0.c1)&(rt0.c1)), ((rt0.c2)AND(rt0.c0)), ((((vt1.c0)OR(rt0.c3)))AND(rt0.c0)))))) ORDER BY CAST((+ (rt0.c0)) AS INTEGER) DESC  NULLS FIRST, CAST((0xffffffff9454e6f8 IN ()) AS BLOB) DESC LIMIT 0;
SELECT * FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)) COLLATE RTRIM);
SELECT ALL * FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)) COLLATE RTRIM) LIMIT 0x0 INTERSECT SELECT * FROM rt0 WHERE (((((x'be4b')AND((rt0.c0 IN (x'94')))))AND(((((((rt0.c2)OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c1))))) LIMIT 0;
SELECT * FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)) COLLATE RTRIM);
SELECT ALL * FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)) COLLATE RTRIM) LIMIT 0x0 INTERSECT SELECT * FROM rt0 WHERE (((((x'be4b')AND((rt0.c0 IN (x'94')))))AND(((((((rt0.c2)OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c1))))) LIMIT 0;
SELECT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) ISNULL));
SELECT DISTINCT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) ISNULL)) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))<>((~ (vt1.c0)))) DESC, PRINTF(CASE vt1.c0  WHEN NULL THEN vt1.c0 ELSE vt1.c0 END, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) LIMIT 1;
SELECT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) ISNULL));
SELECT DISTINCT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) ISNULL)) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))<>((~ (vt1.c0)))) DESC, PRINTF(CASE vt1.c0  WHEN NULL THEN vt1.c0 ELSE vt1.c0 END, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) LIMIT 1;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((~ (vt1.c0)))LIKE(((vt1.c0) IS FALSE)))) ORDER BY ((vt1.c0) IS FALSE) COLLATE BINARY  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE ((((~ (vt1.c0)))LIKE(((vt1.c0) IS FALSE)))) ORDER BY ((vt1.c0) IS FALSE) COLLATE BINARY  NULLS FIRST LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM vt1 WHERE (CAST((NOT (vt1.c0)) AS TEXT)) ORDER BY ((vt1.c0) IS FALSE) COLLATE BINARY  NULLS FIRST LIMIT 0X0;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (((CASE WHEN 0Xffffffff9e9f8599 THEN x'' END) BETWEEN (NULL) AND (((rt0.c3) ISNULL))));
SELECT MIN(rt0.c2) FROM rt0 WHERE (((CASE WHEN 0xffffffff9e9f8599 THEN x'' END) BETWEEN (NULL) AND (((rt0.c3) ISNULL)))) INTERSECT SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (((LOWER(rt0.c1)) NOT BETWEEN ((rt0.c0 IN (rt0.c2))) AND ((~ (rt0.c3)))));
SELECT * FROM vt1 WHERE ((((CAST(vt1.c0 AS NUMERIC), ((vt1.c0) IS TRUE), vt1.c0 COLLATE RTRIM))>=((NULL, (NOT (vt1.c0)), ((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))) ORDER BY CASE (vt1.c0 IN ())  WHEN vt1.c0 THEN vt1.c0 WHEN (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))) THEN (((vt1.c0, vt1.c0, vt1.c0))!=((vt1.c0, vt1.c0, vt1.c0))) WHEN NULL THEN (- (vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN CAST(vt1.c0 AS NUMERIC) ELSE ((vt1.c0)-(vt1.c0)) END ASC  NULLS FIRST, ((('974917948', vt1.c0)) BETWEEN ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE BINARY)) AND (((vt1.c0 IN ()), ((vt1.c0)LIKE(vt1.c0))))) ASC;
SELECT DISTINCT * FROM vt1 WHERE ((((CAST(vt1.c0 AS NUMERIC), ((vt1.c0) IS TRUE), vt1.c0 COLLATE RTRIM))>=((NULL, (NOT (vt1.c0)), ((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))) ORDER BY (~ (LTRIM(vt1.c0, vt1.c0))), 0.4204707601844997 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (0X1c3773a9) ORDER BY (~ (LTRIM(vt1.c0, vt1.c0))), 0.4204707601844997;
SELECT * FROM vt1 WHERE ((((CAST(vt1.c0 AS NUMERIC), ((vt1.c0) IS TRUE), vt1.c0 COLLATE RTRIM))>=((NULL, (NOT (vt1.c0)), ((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))) ORDER BY CASE (vt1.c0 IN ())  WHEN vt1.c0 THEN vt1.c0 WHEN (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))) THEN (((vt1.c0, vt1.c0, vt1.c0))!=((vt1.c0, vt1.c0, vt1.c0))) WHEN NULL THEN (- (vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN CAST(vt1.c0 AS NUMERIC) ELSE ((vt1.c0)-(vt1.c0)) END ASC  NULLS FIRST, ((('974917948', vt1.c0)) BETWEEN ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE BINARY)) AND (((vt1.c0 IN ()), ((vt1.c0)LIKE(vt1.c0))))) ASC;
SELECT DISTINCT * FROM vt1 WHERE ((((CAST(vt1.c0 AS NUMERIC), ((vt1.c0) IS TRUE), vt1.c0 COLLATE RTRIM))>=((NULL, (NOT (vt1.c0)), ((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))) ORDER BY (~ (LTRIM(vt1.c0, vt1.c0))), 0.4204707601844997 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (0X1c3773a9) ORDER BY (~ (LTRIM(vt1.c0, vt1.c0))), 0.4204707601844997;
SELECT MAX(rt0.c2) FROM rt0 WHERE ((- (rt0.c2 COLLATE BINARY))) ORDER BY CASE WHEN CAST(rt0.c3 AS NUMERIC) THEN ((rt0.c0)<<(rt0.c0)) WHEN rt0.c0 THEN x'a64f' WHEN rt0.c3 COLLATE BINARY THEN (((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c1))) WHEN rt0.c2 COLLATE RTRIM THEN NULL WHEN '0.3225145650989357' THEN ((rt0.c0)+(rt0.c0)) ELSE LAST_INSERT_ROWID() END;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE ((((- (rt0.c2 COLLATE BINARY)))AND(rt0.c0))) ORDER BY ((rt0.c3) ISNULL) COLLATE NOCASE DESC, ((((rt0.c3 IN ())))==((rt0.c1))) DESC  NULLS LAST, (((rt0.c1 IN ()))<>((((''))==((rt0.c1)))))  NULLS FIRST, ((((((((UPPER(DISTINCT rt0.c3))OR(rt0.c1 COLLATE NOCASE)))AND((((rt0.c0, NULL))==((rt0.c3, '441814537'))))))AND(rt0.c2 COLLATE NOCASE)))OR(rt0.c0))  NULLS LAST INTERSECT SELECT MAX(rt0.c2) FROM rt0 WHERE (rt0.c2) ORDER BY ((rt0.c3) ISNULL) COLLATE NOCASE DESC, ((((rt0.c3 IN ())))==((rt0.c1))) DESC  NULLS LAST, (((rt0.c1 IN ()))<>((((''))=((rt0.c1)))))  NULLS FIRST, ((((((((UPPER(DISTINCT rt0.c3))OR(rt0.c1 COLLATE NOCASE)))AND((((rt0.c0, NULL))=((rt0.c3, '441814537'))))))AND(rt0.c2 COLLATE NOCASE)))OR(rt0.c0))  NULLS LAST;
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE (vt1.c0);
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE (vt1.c0) ORDER BY CAST(rt0.c2 AS NUMERIC)  NULLS LAST, rt0.c1 COLLATE NOCASE DESC  NULLS FIRST INTERSECT SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE ((NOT ((+ (rt0.c1))))) ORDER BY CAST(rt0.c2 AS NUMERIC)  NULLS LAST, rt0.c1 COLLATE NOCASE DESC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((CASE WHEN 0.29648758882551696 THEN rt0.c2 END)IS(CAST(rt0.c0 AS TEXT))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((CASE WHEN 0.29648758882551696 THEN rt0.c2 END)IS(CAST(rt0.c0 AS TEXT))))AND(rt0.c1))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((NOT (rt0.c2 COLLATE RTRIM))) LIMIT 0x2;
SELECT * FROM rt0, vt1 WHERE (((CASE WHEN 0.29648758882551696 THEN rt0.c2 END)IS(CAST(rt0.c0 AS TEXT))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((CASE WHEN 0.29648758882551696 THEN rt0.c2 END)IS(CAST(rt0.c0 AS TEXT))))AND(rt0.c1))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((NOT (rt0.c2 COLLATE RTRIM))) LIMIT 0x2;
SELECT * FROM rt0 WHERE (rt0.c2);
SELECT DISTINCT * FROM rt0 WHERE (rt0.c2) ORDER BY CASE SQLITE_VERSION()  WHEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c2 END THEN ((rt0.c0) NOT NULL) WHEN CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END THEN ((rt0.c2) IS FALSE) ELSE ((0.8592240962770722) IS FALSE) END  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c2)OR(-1.16899011E8)))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)) COLLATE NOCASE) ORDER BY CASE SQLITE_VERSION()  WHEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c2 END THEN ((rt0.c0) NOT NULL) WHEN CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END THEN ((rt0.c2) IS FALSE) ELSE ((0.8592240962770722) IS FALSE) END  NULLS LAST LIMIT 0x2;
SELECT * FROM rt0 WHERE (rt0.c2);
SELECT DISTINCT * FROM rt0 WHERE (rt0.c2) ORDER BY CASE SQLITE_VERSION()  WHEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c2 END THEN ((rt0.c0) NOT NULL) WHEN CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END THEN ((rt0.c2) IS FALSE) ELSE ((0.8592240962770722) IS FALSE) END  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c2)OR(-1.16899011E8)))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)) COLLATE NOCASE) ORDER BY CASE SQLITE_VERSION()  WHEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c2 END THEN ((rt0.c0) NOT NULL) WHEN CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END THEN ((rt0.c2) IS FALSE) ELSE ((0.8592240962770722) IS FALSE) END  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((rt0.c2, rt0.c3, rt0.c1)) BETWEEN ((rt0.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, rt0.c1, vt1.c0))) IN ((((rt0.c3, 0.5557361175215085))<=((vt1.c0, rt0.c3))))) WHERE (((CAST(vt1.c0 AS NUMERIC)) IS TRUE)) ORDER BY CASE CAST(rt0.c3 AS INTEGER)  WHEN (((((((((('1418917777')AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c1)))AND(rt0.c0)))AND(rt0.c0)) THEN CAST(vt1.c0 AS NUMERIC) WHEN NULL THEN CASE WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END WHEN NULL THEN ((rt0.c0)/(rt0.c3)) WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0)) END ASC, (- (0Xc64f6d0)) DESC  NULLS FIRST, (NOT (rt0.c1)) COLLATE NOCASE ASC, ((((vt1.c0, rt0.c0))<=((rt0.c1, vt1.c0))) IN ((+ (vt1.c0))))  NULLS FIRST, ((((((((((rt0.c1) IS TRUE))AND(((rt0.c1) NOT NULL))))OR((x'e07d76' IN (rt0.c1, 0.964813790745092)))))OR((((rt0.c2, rt0.c2, '', rt0.c3, rt0.c3))<=((rt0.c1, rt0.c3, rt0.c1, rt0.c2, rt0.c0))))))OR(((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))) ASC;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((rt0.c2, rt0.c3, rt0.c1)) BETWEEN ((rt0.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, rt0.c1, vt1.c0))) IN ((((rt0.c3, 0.5557361175215085))<=((vt1.c0, rt0.c3))))) WHERE (((CAST(vt1.c0 AS NUMERIC)) IS TRUE)) ORDER BY (((rt0.c1)) NOT BETWEEN ((((rt0.c0)*(rt0.c2)))) AND ((json_valid(rt0.c0))))  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON ((((rt0.c2, rt0.c3, rt0.c1)) BETWEEN ((rt0.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, rt0.c1, vt1.c0))) IN ((((rt0.c3, 0.5557361175215085))<=((vt1.c0, rt0.c3))))) WHERE (0.8380444901397164) ORDER BY (((rt0.c1)) NOT BETWEEN ((((rt0.c0)*(rt0.c2)))) AND ((json_valid(rt0.c0))))  NULLS LAST LIMIT 0;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((rt0.c2, rt0.c3, rt0.c1)) BETWEEN ((rt0.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, rt0.c1, vt1.c0))) IN ((((rt0.c3, 0.5557361175215085))<=((vt1.c0, rt0.c3))))) WHERE (((CAST(vt1.c0 AS NUMERIC)) IS TRUE)) ORDER BY CASE CAST(rt0.c3 AS INTEGER)  WHEN (((((((((('1418917777')AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c1)))AND(rt0.c0)))AND(rt0.c0)) THEN CAST(vt1.c0 AS NUMERIC) WHEN NULL THEN CASE WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END WHEN NULL THEN ((rt0.c0)/(rt0.c3)) WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0)) END ASC, (- (0Xc64f6d0)) DESC  NULLS FIRST, (NOT (rt0.c1)) COLLATE NOCASE ASC, ((((vt1.c0, rt0.c0))<=((rt0.c1, vt1.c0))) IN ((+ (vt1.c0))))  NULLS FIRST, ((((((((((rt0.c1) IS TRUE))AND(((rt0.c1) NOT NULL))))OR((x'e07d76' IN (rt0.c1, 0.964813790745092)))))OR((((rt0.c2, rt0.c2, '', rt0.c3, rt0.c3))<=((rt0.c1, rt0.c3, rt0.c1, rt0.c2, rt0.c0))))))OR(((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))) ASC;
SELECT ALL COUNT(*) FROM rt0 WHERE ((+ (((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0))))) ORDER BY (~ (rt0.c3)) DESC  NULLS FIRST, (NULL IN (rt0.c0)) COLLATE BINARY;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((+ (((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0))))) ORDER BY rt0.c2 ASC  NULLS LAST;
SELECT * FROM vt1 CROSS JOIN rt0 ON (((rt0.c1) NOTNULL) IN ()) WHERE ((((rt0.c0)AND(x'')) IN (json_array_length(rt0.c3))));
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON (((rt0.c1) NOTNULL) IN ()) WHERE ((((rt0.c0)AND(x'')) IN (json_array_length(rt0.c3)))) ORDER BY ((((rt0.c2) ISNULL)) ISNULL) DESC LIMIT 0;
SELECT * FROM vt1 CROSS JOIN rt0 ON (((rt0.c1) NOTNULL) IN ()) WHERE ((((rt0.c0)AND(x'')) IN (json_array_length(rt0.c3))));
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON (((rt0.c1) NOTNULL) IN ()) WHERE ((((rt0.c0)AND(x'')) IN (json_array_length(rt0.c3)))) ORDER BY ((((rt0.c2) ISNULL)) ISNULL) DESC LIMIT 0;
SELECT ALL * FROM rt0 WHERE (LOWER(DISTINCT TYPEOF(rt0.c3))) ORDER BY CAST(rt0.c0 COLLATE RTRIM AS NUMERIC) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((LOWER(DISTINCT TYPEOF(rt0.c3)))AND(((rt0.c2)LIKE(rt0.c3)) COLLATE BINARY))) ORDER BY ((((rt0.c2) BETWEEN (',') AND (rt0.c0)))<=(INSTR(rt0.c1, rt0.c0))) DESC, ((((rt0.c0)IS(rt0.c2))) NOT NULL) ASC  NULLS LAST, (((rt0.c1, x'eb', rt0.c0, rt0.c2)) NOT BETWEEN ((TRIM('e#lN椥om', rt0.c1), (((rt0.c0, rt0.c3, rt0.c1))<((rt0.c1, rt0.c0, rt0.c2))), (+ (rt0.c1)), (- (rt0.c0)))) AND ((((rt0.c0) NOT BETWEEN (0.9606158766991397) AND (rt0.c1)), (+ (rt0.c0)), (rt0.c3 IN (rt0.c2)), DATE(x'aa7de1', rt0.c3, rt0.c3, rt0.c3, rt0.c1, rt0.c1, rt0.c2)))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (NULL) ORDER BY ((((rt0.c2) BETWEEN (',') AND (rt0.c0)))<=(INSTR(rt0.c1, rt0.c0))) DESC, ((((rt0.c0)IS(rt0.c2))) NOT NULL) ASC  NULLS LAST, (((rt0.c1, x'eb', rt0.c0, rt0.c2)) NOT BETWEEN ((TRIM('e#lN椥om', rt0.c1), (((rt0.c0, rt0.c3, rt0.c1))<((rt0.c1, rt0.c0, rt0.c2))), (+ (rt0.c1)), (- (rt0.c0)))) AND ((((rt0.c0) NOT BETWEEN (0.9606158766991397) AND (rt0.c1)), (+ (rt0.c0)), (rt0.c3 IN (rt0.c2)), DATE(x'aa7de1', rt0.c3, rt0.c3, rt0.c3, rt0.c1, rt0.c1, rt0.c2)))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0 WHERE (LOWER(DISTINCT TYPEOF(rt0.c3))) ORDER BY CAST(rt0.c0 COLLATE RTRIM AS NUMERIC) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((LOWER(DISTINCT TYPEOF(rt0.c3)))AND(((rt0.c2)LIKE(rt0.c3)) COLLATE BINARY))) ORDER BY ((((rt0.c2) BETWEEN (',') AND (rt0.c0)))<=(INSTR(rt0.c1, rt0.c0))) DESC, ((((rt0.c0)IS(rt0.c2))) NOT NULL) ASC  NULLS LAST, (((rt0.c1, x'eb', rt0.c0, rt0.c2)) NOT BETWEEN ((TRIM('e#lN椥om', rt0.c1), (((rt0.c0, rt0.c3, rt0.c1))<((rt0.c1, rt0.c0, rt0.c2))), (+ (rt0.c1)), (- (rt0.c0)))) AND ((((rt0.c0) NOT BETWEEN (0.9606158766991397) AND (rt0.c1)), (+ (rt0.c0)), (rt0.c3 IN (rt0.c2)), DATE(x'aa7de1', rt0.c3, rt0.c3, rt0.c3, rt0.c1, rt0.c1, rt0.c2)))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (NULL) ORDER BY ((((rt0.c2) BETWEEN (',') AND (rt0.c0)))<=(INSTR(rt0.c1, rt0.c0))) DESC, ((((rt0.c0)IS(rt0.c2))) NOT NULL) ASC  NULLS LAST, (((rt0.c1, x'eb', rt0.c0, rt0.c2)) NOT BETWEEN ((TRIM('e#lN椥om', rt0.c1), (((rt0.c0, rt0.c3, rt0.c1))<((rt0.c1, rt0.c0, rt0.c2))), (+ (rt0.c1)), (- (rt0.c0)))) AND ((((rt0.c0) NOT BETWEEN (0.9606158766991397) AND (rt0.c1)), (+ (rt0.c0)), (rt0.c3 IN (rt0.c2)), DATE(x'aa7de1', rt0.c3, rt0.c3, rt0.c3, rt0.c1, rt0.c1, rt0.c2)))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((TRIM(DISTINCT rt0.c3, rt0.c3))|(QUOTE(rt0.c3)))) ORDER BY CASE rt0.c2  WHEN ((rt0.c3) IS TRUE) THEN CAST(rt0.c3 AS NUMERIC) WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 END THEN LIKELIHOOD(rt0.c0, rt0.c2) WHEN LIKELIHOOD(rt0.c3, rt0.c2) THEN load_extension(rt0.c3) ELSE rt0.c3 COLLATE NOCASE END;
SELECT ALL * FROM rt0 WHERE (((TRIM(DISTINCT rt0.c3, rt0.c3))|(QUOTE(rt0.c3)))) ORDER BY CASE rt0.c2  WHEN ((rt0.c3) IS TRUE) THEN CAST(rt0.c3 AS NUMERIC) WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 END THEN LIKELIHOOD(rt0.c0, rt0.c2) WHEN LIKELIHOOD(rt0.c3, rt0.c2) THEN load_extension(rt0.c3) ELSE rt0.c3 COLLATE NOCASE END;
SELECT ALL * FROM rt0 WHERE (((TRIM(DISTINCT rt0.c3, rt0.c3))|(QUOTE(rt0.c3)))) ORDER BY CASE rt0.c2  WHEN ((rt0.c3) IS TRUE) THEN CAST(rt0.c3 AS NUMERIC) WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 END THEN LIKELIHOOD(rt0.c0, rt0.c2) WHEN LIKELIHOOD(rt0.c3, rt0.c2) THEN load_extension(rt0.c3) ELSE rt0.c3 COLLATE NOCASE END;
SELECT COUNT(*) FROM vt1, rt0 WHERE (((x'') NOT BETWEEN (((x'')-(vt1.c0))) AND (((rt0.c2)IS('-2041558609'))))) ORDER BY CAST(LIKELIHOOD(DISTINCT vt1.c0, rt0.c0) AS REAL) DESC  NULLS FIRST, CAST(((rt0.c1)|(rt0.c3)) AS TEXT);
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((x'') NOT BETWEEN (((x'')-(vt1.c0))) AND (((rt0.c2)IS('-2041558609'))))) ORDER BY CAST(LIKELIHOOD(DISTINCT vt1.c0, rt0.c0) AS REAL) DESC  NULLS FIRST, CAST(((rt0.c1)|(rt0.c3)) AS TEXT) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((rt0.c0 COLLATE NOCASE)!=((rt0.c0 IN (rt0.c0))))) ORDER BY CAST(LIKELIHOOD(DISTINCT vt1.c0, rt0.c0) AS REAL) DESC  NULLS FIRST, CAST(((rt0.c1)|(rt0.c3)) AS TEXT) LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (CAST(IFNULL(DISTINCT vt1.c0, vt1.c0) AS REAL)) ORDER BY (~ ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))), ((CAST(vt1.c0 AS INTEGER))>=(((vt1.c0)*(vt1.c0)))) DESC  NULLS LAST, (((+ (0.12794404513750668)))LIKE(((vt1.c0) ISNULL)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((CAST(IFNULL(DISTINCT vt1.c0, vt1.c0) AS REAL))AND((((((vt1.c0)%(-1.834146775E9))))>((ABS(vt1.c0))))))) ORDER BY (~ ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))), ((CAST(vt1.c0 AS INTEGER))>=(((vt1.c0)*(vt1.c0)))) DESC  NULLS LAST, (((+ (0.12794404513750668)))LIKE(((vt1.c0) ISNULL)))  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt1 WHERE (CAST(IFNULL(DISTINCT vt1.c0, vt1.c0) AS REAL)) ORDER BY (~ ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))), ((CAST(vt1.c0 AS INTEGER))>=(((vt1.c0)*(vt1.c0)))) DESC  NULLS LAST, (((+ (0.12794404513750668)))LIKE(((vt1.c0) ISNULL)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((CAST(IFNULL(DISTINCT vt1.c0, vt1.c0) AS REAL))AND((((((vt1.c0)%(-1.834146775E9))))>((ABS(vt1.c0))))))) ORDER BY (~ ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))), ((CAST(vt1.c0 AS INTEGER))>=(((vt1.c0)*(vt1.c0)))) DESC  NULLS LAST, (((+ (0.12794404513750668)))LIKE(((vt1.c0) ISNULL)))  NULLS FIRST LIMIT 3;
SELECT * FROM vt1, rt0 WHERE (rt0.c2);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c2)AND(((CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END) NOT BETWEEN (CAST(rt0.c2 AS INTEGER)) AND (((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2))))))) LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (LIKELIHOOD(PRINTF(rt0.c2, vt1.c0, rt0.c2), rt0.c2)) LIMIT 4;
SELECT * FROM vt1, rt0 WHERE (rt0.c2);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c2)AND(((CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END) NOT BETWEEN (CAST(rt0.c2 AS INTEGER)) AND (((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2))))))) LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (LIKELIHOOD(PRINTF(rt0.c2, vt1.c0, rt0.c2), rt0.c2)) LIMIT 4;
SELECT * FROM rt0 WHERE (((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c2)))/(((rt0.c0) ISNULL))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c2)))/(((rt0.c0) ISNULL))))AND(SQLITE_COMPILEOPTION_GET(CASE WHEN rt0.c0 THEN -1497009272 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 END)))) LIMIT 0x0;
SELECT * FROM rt0 WHERE (((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c2)))/(((rt0.c0) ISNULL))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c2)))/(((rt0.c0) ISNULL))))AND(SQLITE_COMPILEOPTION_GET(CASE WHEN rt0.c0 THEN -1497009272 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 END)))) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((- (((vt1.c0)+(vt1.c0))))) ORDER BY vt1.c0  NULLS LAST, ((TRIM(DISTINCT NULL, vt1.c0))GLOB(TRIM(vt1.c0, vt1.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((((- (((vt1.c0)+(vt1.c0)))))AND(LOWER(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY vt1.c0  NULLS LAST, ((TRIM(DISTINCT NULL, vt1.c0))GLOB(TRIM(vt1.c0, vt1.c0)))  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (UPPER(vt1.c0)) ORDER BY vt1.c0  NULLS LAST, ((TRIM(DISTINCT NULL, vt1.c0))GLOB(TRIM(vt1.c0, vt1.c0)))  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM vt1 WHERE ((- (((vt1.c0)+(vt1.c0))))) ORDER BY vt1.c0  NULLS LAST, ((TRIM(DISTINCT NULL, vt1.c0))GLOB(TRIM(vt1.c0, vt1.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((((- (((vt1.c0)+(vt1.c0)))))AND(LOWER(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY vt1.c0  NULLS LAST, ((TRIM(DISTINCT NULL, vt1.c0))GLOB(TRIM(vt1.c0, vt1.c0)))  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (UPPER(vt1.c0)) ORDER BY vt1.c0  NULLS LAST, ((TRIM(DISTINCT NULL, vt1.c0))GLOB(TRIM(vt1.c0, vt1.c0)))  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM vt1 WHERE ((~ (((-0.0) IS TRUE)))) ORDER BY (- (vt1.c0 COLLATE NOCASE)) DESC, (NOT ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, '168766846'))>=((vt1.c0, 1661646815, vt1.c0, vt1.c0, vt1.c0))))) ASC;
SELECT * FROM vt1 WHERE ((((~ (((-0.0) IS TRUE))))AND(((((vt1.c0)/(vt1.c0)))+(((x'21') NOT BETWEEN (vt1.c0) AND (vt1.c0))))))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)=(((vt1.c0) NOTNULL)))  NULLS FIRST, (- ('1466001721')) ASC  NULLS FIRST, (NOT ((NOT (vt1.c0)))), (((+ (vt1.c0))) IS FALSE) ASC  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS NUMERIC)) BETWEEN ((vt1.c0 IN (vt1.c0))) AND (json(vt1.c0)))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)==(((vt1.c0) NOTNULL)))  NULLS FIRST, (- ('1466001721')) ASC  NULLS FIRST, (NOT ((NOT (vt1.c0)))), (((+ (vt1.c0))) IS FALSE) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((~ (((-0.0) IS TRUE)))) ORDER BY (- (vt1.c0 COLLATE NOCASE)) DESC, (NOT ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, '168766846'))>=((vt1.c0, 1661646815, vt1.c0, vt1.c0, vt1.c0))))) ASC;
SELECT * FROM vt1 WHERE ((((~ (((-0.0) IS TRUE))))AND(((((vt1.c0)/(vt1.c0)))+(((x'21') NOT BETWEEN (vt1.c0) AND (vt1.c0))))))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)=(((vt1.c0) NOTNULL)))  NULLS FIRST, (- ('1466001721')) ASC  NULLS FIRST, (NOT ((NOT (vt1.c0)))), (((+ (vt1.c0))) IS FALSE) ASC  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS NUMERIC)) BETWEEN ((vt1.c0 IN (vt1.c0))) AND (json(vt1.c0)))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)==(((vt1.c0) NOTNULL)))  NULLS FIRST, (- ('1466001721')) ASC  NULLS FIRST, (NOT ((NOT (vt1.c0)))), (((+ (vt1.c0))) IS FALSE) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND((- ((~ (vt1.c0))))))) ORDER BY CASE WHEN vt1.c0 COLLATE BINARY THEN x'1a' WHEN ((vt1.c0)*(vt1.c0)) THEN vt1.c0 ELSE ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((x'')OR(((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR('I')))AND(-2.051742299E9)))))OR(CAST(vt1.c0 AS REAL))))OR(((vt1.c0)GLOB(vt1.c0))))) ORDER BY CASE WHEN vt1.c0 COLLATE BINARY THEN x'1a' WHEN ((vt1.c0)*(vt1.c0)) THEN vt1.c0 ELSE ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND((- ((~ (vt1.c0))))))) ORDER BY CASE WHEN vt1.c0 COLLATE BINARY THEN x'1a' WHEN ((vt1.c0)*(vt1.c0)) THEN vt1.c0 ELSE ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((x'')OR(((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR('I')))AND(-2.051742299E9)))))OR(CAST(vt1.c0 AS REAL))))OR(((vt1.c0)GLOB(vt1.c0))))) ORDER BY CASE WHEN vt1.c0 COLLATE BINARY THEN x'1a' WHEN ((vt1.c0)*(vt1.c0)) THEN vt1.c0 ELSE ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((- (vt1.c0)) IN (0.17639923010048475)));
SELECT DISTINCT * FROM vt1 WHERE (((- (vt1.c0)) IN (0.17639923010048475))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) NOTNULL) AS NUMERIC)) LIMIT 3;
SELECT ALL * FROM vt1 WHERE (((- (vt1.c0)) IN (0.17639923010048475)));
SELECT DISTINCT * FROM vt1 WHERE (((- (vt1.c0)) IN (0.17639923010048475))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) NOTNULL) AS NUMERIC)) LIMIT 3;
SELECT ALL MAX(rt0.c2) FROM vt1, rt0 WHERE (CASE WHEN (~ (rt0.c0)) THEN CAST(rt0.c0 AS INTEGER) END) ORDER BY TYPEOF(((((((((((rt0.c3)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c0))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(rt0.c2) FROM vt1, rt0 WHERE (((CASE WHEN (~ (rt0.c0)) THEN CAST(rt0.c0 AS INTEGER) END)AND(CASE ((((((rt0.c0)AND(rt0.c3)))AND(NULL)))AND(0X98ff4d0))  WHEN ((rt0.c3)GLOB(rt0.c3)) THEN ((rt0.c1) IS FALSE) WHEN UPPER(DISTINCT rt0.c2) THEN (vt1.c0 IN ()) WHEN CASE WHEN rt0.c3 THEN vt1.c0 END THEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) ELSE CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c1 THEN vt1.c0 END END))) ORDER BY ((((((rt0.c1)AND(((rt0.c3)*(rt0.c2)))))OR(LTRIM(vt1.c0))))OR((((rt0.c3, rt0.c3, rt0.c3))>=((rt0.c3, vt1.c0, vt1.c0)))))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM vt1, rt0 WHERE (((((rt0.c1)*('C'))) BETWEEN ((NOT (rt0.c1))) AND (CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END))) ORDER BY ((((((rt0.c1)AND(((rt0.c3)*(rt0.c2)))))OR(LTRIM(vt1.c0))))OR((((rt0.c3, rt0.c3, rt0.c3))>=((rt0.c3, vt1.c0, vt1.c0)))))  NULLS FIRST LIMIT 1;
SELECT ALL COUNT(*) FROM rt0 WHERE (CASE WHEN CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c3 END THEN (((rt0.c3))<>((rt0.c2))) WHEN CAST(rt0.c0 AS NUMERIC) THEN (((rt0.c0))!=((rt0.c2))) WHEN (NOT (rt0.c0)) THEN (rt0.c2 IN ()) WHEN CAST(-921574261 AS INTEGER) THEN CAST(rt0.c3 AS REAL) END) ORDER BY ((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c2)))>>((- (rt0.c3))))  NULLS LAST, CHAR((NOT (rt0.c3)), rt0.c3, ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1)))  NULLS FIRST, 0.12004018176217035 ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((CASE WHEN CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c3 END THEN (((rt0.c3))!=((rt0.c2))) WHEN CAST(rt0.c0 AS NUMERIC) THEN (((rt0.c0))!=((rt0.c2))) WHEN (NOT (rt0.c0)) THEN (rt0.c2 IN ()) WHEN CAST(0Xffffffffc911e48b AS INTEGER) THEN CAST(rt0.c3 AS REAL) END)AND(553861326))) ORDER BY ((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c2)))>>((- (rt0.c3))))  NULLS LAST, CHAR((NOT (rt0.c3)), rt0.c3, ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1)))  NULLS FIRST, 0.12004018176217035 ASC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((- (rt0.c1))) NOT BETWEEN (rt0.c1) AND (((x'') NOT BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY (((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0)))) NOT BETWEEN (x'dc' COLLATE BINARY) AND (rt0.c2 COLLATE BINARY)) ASC, ((((((rtreenode(rt0.c0, rt0.c3))AND(((((((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c1)))))AND((~ (vt1.c0)))))OR(rt0.c3 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((- (rt0.c1))) NOT BETWEEN (rt0.c1) AND (((x'') NOT BETWEEN (vt1.c0) AND (rt0.c3)))))AND((('.')<(((NULL) NOT BETWEEN (rt0.c3) AND (rt0.c0))))))) ORDER BY (((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0)))) NOT BETWEEN (x'dc' COLLATE BINARY) AND (rt0.c2 COLLATE BINARY)) ASC, ((((((rtreenode(rt0.c0, rt0.c3))AND(((((((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c1)))))AND((~ (vt1.c0)))))OR(rt0.c3 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((- (rt0.c1))) NOT BETWEEN (rt0.c1) AND (((x'') NOT BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY (((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0)))) NOT BETWEEN (x'dc' COLLATE BINARY) AND (rt0.c2 COLLATE BINARY)) ASC, ((((((rtreenode(rt0.c0, rt0.c3))AND(((((((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c1)))))AND((~ (vt1.c0)))))OR(rt0.c3 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((- (rt0.c1))) NOT BETWEEN (rt0.c1) AND (((x'') NOT BETWEEN (vt1.c0) AND (rt0.c3)))))AND((('.')<(((NULL) NOT BETWEEN (rt0.c3) AND (rt0.c0))))))) ORDER BY (((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0)))) NOT BETWEEN (x'dc' COLLATE BINARY) AND (rt0.c2 COLLATE BINARY)) ASC, ((((((rtreenode(rt0.c0, rt0.c3))AND(((((((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c1)))))AND((~ (vt1.c0)))))OR(rt0.c3 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT COUNT(*) FROM rt0 WHERE (((((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c1))) NOTNULL)) ORDER BY load_extension(rt0.c3, (((rt0.c1))==((rt0.c0)))) DESC;
SELECT COUNT(*) FROM rt0 WHERE (((((((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c1))) NOTNULL))AND((0.9189827489577672 IN (((rt0.c0) NOT BETWEEN (0.5106461438613215) AND (rt0.c3)), '-96944352'))))) ORDER BY ((((rt0.c0)>=(rt0.c3))) NOT BETWEEN ((NOT (rt0.c1))) AND (CAST(rt0.c0 AS TEXT))), 0.8682244478477968 DESC LIMIT 2;
SELECT MAX(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE ('-182911986');
SELECT MAX(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE ((('-182911986')AND(((x'') NOT BETWEEN (MAX(rt0.c3, vt1.c0, rt0.c0, vt1.c0, rt0.c3, rt0.c3)) AND (HEX(DISTINCT rt0.c0)))))) ORDER BY (((((0X4d51583f, vt1.c0))<=((vt1.c0, rt0.c0))))<>(((rt0.c2) NOTNULL)));
SELECT * FROM vt1 WHERE (0.03413882794445389);
SELECT DISTINCT * FROM vt1 WHERE (((0.03413882794445389)AND(CASE (vt1.c0 IN ())  WHEN vt1.c0 THEN ((vt1.c0)<(vt1.c0)) WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN -1186726494 WHEN (- (vt1.c0)) THEN ((((((NULL)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) NOT BETWEEN ('}') AND (vt1.c0)) END)));
SELECT * FROM vt1 WHERE (0.03413882794445389);
SELECT DISTINCT * FROM vt1 WHERE (((0.03413882794445389)AND(CASE (vt1.c0 IN ())  WHEN vt1.c0 THEN ((vt1.c0)<(vt1.c0)) WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN -1186726494 WHEN (- (vt1.c0)) THEN ((((((NULL)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) NOT BETWEEN ('}') AND (vt1.c0)) END)));
SELECT COUNT(*) FROM rt0 LEFT OUTER JOIN vt1 ON ((NULL)||((NOT (rt0.c3)))) WHERE ((rt0.c2 IN (CAST(rt0.c2 AS BLOB)))) ORDER BY (((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c2))))<((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1))))) DESC, (- (((rt0.c2)/(rt0.c1))));
SELECT ALL COUNT(*) FROM rt0 LEFT OUTER JOIN vt1 ON ((NULL)||((NOT (rt0.c3)))) WHERE ((((rt0.c2 IN (CAST(rt0.c2 AS BLOB))))AND((+ (COALESCE(rt0.c0, rt0.c2, vt1.c0, rt0.c3)))))) ORDER BY (+ ((~ (rt0.c1)))), '-777205006' DESC LIMIT 0;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((+ ((NOT (rt0.c2)))));
SELECT DISTINCT MIN(rt0.c3) FROM rt0 WHERE ((((+ ((NOT (rt0.c2)))))AND((NOT (rt0.c2))))) LIMIT 0x3;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (0Xffffffff938eadf3) ORDER BY CASE ((rt0.c2)||(rt0.c1))  WHEN (((vt1.c0))=((rt0.c0))) THEN '' WHEN CAST(rt0.c3 AS BLOB) THEN x'099f' WHEN (rt0.c1 IN (rt0.c2)) THEN (+ (rt0.c2)) WHEN (~ (vt1.c0)) THEN (rt0.c2 IN (rt0.c0, rt0.c1)) WHEN CAST(rt0.c1 AS NUMERIC) THEN CAST(rt0.c2 AS TEXT) END  NULLS LAST, ((((rt0.c1) NOT NULL)) NOT NULL) ASC  NULLS LAST;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (-1819365901) ORDER BY CASE ((rt0.c2)||(rt0.c1))  WHEN (((vt1.c0))==((rt0.c0))) THEN '' WHEN CAST(rt0.c3 AS BLOB) THEN x'099f' WHEN (rt0.c1 IN (rt0.c2)) THEN (+ (rt0.c2)) WHEN (~ (vt1.c0)) THEN (rt0.c2 IN (rt0.c0, rt0.c1)) WHEN CAST(rt0.c1 AS NUMERIC) THEN CAST(rt0.c2 AS TEXT) END  NULLS LAST, ((((rt0.c1) NOT NULL)) NOT NULL) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ('-618343155') ORDER BY CASE ((rt0.c2)||(rt0.c1))  WHEN (((vt1.c0))==((rt0.c0))) THEN '' WHEN CAST(rt0.c3 AS BLOB) THEN x'099f' WHEN (rt0.c1 IN (rt0.c2)) THEN (+ (rt0.c2)) WHEN (~ (vt1.c0)) THEN (rt0.c2 IN (rt0.c0, rt0.c1)) WHEN CAST(rt0.c1 AS NUMERIC) THEN CAST(rt0.c2 AS TEXT) END  NULLS LAST, ((((rt0.c1) NOT NULL)) NOT NULL) ASC  NULLS LAST LIMIT 0;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (0Xffffffff938eadf3) ORDER BY CASE ((rt0.c2)||(rt0.c1))  WHEN (((vt1.c0))=((rt0.c0))) THEN '' WHEN CAST(rt0.c3 AS BLOB) THEN x'099f' WHEN (rt0.c1 IN (rt0.c2)) THEN (+ (rt0.c2)) WHEN (~ (vt1.c0)) THEN (rt0.c2 IN (rt0.c0, rt0.c1)) WHEN CAST(rt0.c1 AS NUMERIC) THEN CAST(rt0.c2 AS TEXT) END  NULLS LAST, ((((rt0.c1) NOT NULL)) NOT NULL) ASC  NULLS LAST;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (-1819365901) ORDER BY CASE ((rt0.c2)||(rt0.c1))  WHEN (((vt1.c0))==((rt0.c0))) THEN '' WHEN CAST(rt0.c3 AS BLOB) THEN x'099f' WHEN (rt0.c1 IN (rt0.c2)) THEN (+ (rt0.c2)) WHEN (~ (vt1.c0)) THEN (rt0.c2 IN (rt0.c0, rt0.c1)) WHEN CAST(rt0.c1 AS NUMERIC) THEN CAST(rt0.c2 AS TEXT) END  NULLS LAST, ((((rt0.c1) NOT NULL)) NOT NULL) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ('-618343155') ORDER BY CASE ((rt0.c2)||(rt0.c1))  WHEN (((vt1.c0))==((rt0.c0))) THEN '' WHEN CAST(rt0.c3 AS BLOB) THEN x'099f' WHEN (rt0.c1 IN (rt0.c2)) THEN (+ (rt0.c2)) WHEN (~ (vt1.c0)) THEN (rt0.c2 IN (rt0.c0, rt0.c1)) WHEN CAST(rt0.c1 AS NUMERIC) THEN CAST(rt0.c2 AS TEXT) END  NULLS LAST, ((((rt0.c1) NOT NULL)) NOT NULL) ASC  NULLS LAST LIMIT 0;
SELECT MIN(rt0.c0) FROM vt1, rt0 WHERE (((((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3)))OR(vt1.c0)))OR((NOT (rt0.c1))))) ORDER BY ((CAST(rt0.c0 AS NUMERIC)) NOT NULL) DESC  NULLS FIRST, (+ (((rt0.c1) BETWEEN (rt0.c3) AND (vt1.c0))))  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3)))OR(vt1.c0)))OR((NOT (rt0.c1))))) ORDER BY ((CAST(rt0.c0 AS NUMERIC)) NOT NULL) DESC  NULLS FIRST, (+ (((rt0.c1) BETWEEN (rt0.c3) AND (vt1.c0))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0 WHERE ((((rt0.c1 IN (rt0.c3, rt0.c2)))|(((((((((rt0.c2)OR(rt0.c1)))OR(x'')))OR(rt0.c0)))OR(rt0.c0)))));
SELECT * FROM rt0 WHERE ((((((rt0.c1 IN (rt0.c3, rt0.c2)))|(((((((((rt0.c2)OR(rt0.c1)))OR(x'')))OR(rt0.c0)))OR(rt0.c0)))))AND((~ (CAST(rt0.c3 AS INTEGER)))))) ORDER BY (((x'5b', rt0.c2))!=((rt0.c1, rt0.c1))) COLLATE NOCASE LIMIT 2;
SELECT ALL * FROM rt0 WHERE ((((rt0.c1 IN (rt0.c3, rt0.c2)))|(((((((((rt0.c2)OR(rt0.c1)))OR(x'')))OR(rt0.c0)))OR(rt0.c0)))));
SELECT * FROM rt0 WHERE ((((((rt0.c1 IN (rt0.c3, rt0.c2)))|(((((((((rt0.c2)OR(rt0.c1)))OR(x'')))OR(rt0.c0)))OR(rt0.c0)))))AND((~ (CAST(rt0.c3 AS INTEGER)))))) ORDER BY (((x'5b', rt0.c2))!=((rt0.c1, rt0.c1))) COLLATE NOCASE LIMIT 2;
SELECT * FROM vt1, rt0 WHERE ((((NOT (rt0.c2))) BETWEEN (CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c3 END) AND ((~ (rt0.c0)))));
SELECT ALL * FROM vt1, rt0 WHERE ((((((NOT (rt0.c2))) BETWEEN (CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c3 END) AND ((~ (rt0.c0)))))AND(((CAST(0.4398267392627091 AS BLOB)) IS FALSE)))) ORDER BY (~ (CASE rt0.c0  WHEN rt0.c1 THEN 'k\k.~sE' END)) DESC, ((LIKELY(vt1.c0)) IS TRUE) LIMIT 0x2;
SELECT * FROM vt1, rt0 WHERE ((((NOT (rt0.c2))) BETWEEN (CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c3 END) AND ((~ (rt0.c0)))));
SELECT ALL * FROM vt1, rt0 WHERE ((((((NOT (rt0.c2))) BETWEEN (CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c3 END) AND ((~ (rt0.c0)))))AND(((CAST(0.4398267392627091 AS BLOB)) IS FALSE)))) ORDER BY (~ (CASE rt0.c0  WHEN rt0.c1 THEN 'k\k.~sE' END)) DESC, ((LIKELY(vt1.c0)) IS TRUE) LIMIT 0x2;
SELECT ALL MAX(rt0.c2) FROM vt1, rt0 WHERE ((((+ (rt0.c1)))-(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c0)))));
SELECT DISTINCT MAX(rt0.c2) FROM vt1, rt0 WHERE ((((+ (rt0.c1)))-(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c0)))));
SELECT * FROM vt1, rt0 WHERE (CASE ((rt0.c1) BETWEEN (rt0.c0) AND (vt1.c0))  WHEN ((vt1.c0)=(rt0.c1)) THEN x'' END);
SELECT ALL * FROM vt1, rt0 WHERE (((CASE ((rt0.c1) BETWEEN (rt0.c0) AND (vt1.c0))  WHEN ((vt1.c0)==(rt0.c1)) THEN x'' END)AND(CASE TRIM(vt1.c0)  WHEN CAST(vt1.c0 AS NUMERIC) THEN rt0.c1 WHEN ((rt0.c3)-(vt1.c0)) THEN rt0.c0 COLLATE RTRIM WHEN ((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN COALESCE(rt0.c1, rt0.c1, 0.702512335758948, vt1.c0, rt0.c2) END))) ORDER BY (((rt0.c2)) BETWEEN (((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((rt0.c2))))) AND (((((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND (('540720839')))))) ASC LIMIT 0X0;
SELECT * FROM vt1, rt0 WHERE (CASE ((rt0.c1) BETWEEN (rt0.c0) AND (vt1.c0))  WHEN ((vt1.c0)=(rt0.c1)) THEN x'' END);
SELECT ALL * FROM vt1, rt0 WHERE (((CASE ((rt0.c1) BETWEEN (rt0.c0) AND (vt1.c0))  WHEN ((vt1.c0)==(rt0.c1)) THEN x'' END)AND(CASE TRIM(vt1.c0)  WHEN CAST(vt1.c0 AS NUMERIC) THEN rt0.c1 WHEN ((rt0.c3)-(vt1.c0)) THEN rt0.c0 COLLATE RTRIM WHEN ((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN COALESCE(rt0.c1, rt0.c1, 0.702512335758948, vt1.c0, rt0.c2) END))) ORDER BY (((rt0.c2)) BETWEEN (((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((rt0.c2))))) AND (((((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND (('540720839')))))) ASC LIMIT 0X0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (LIKELIHOOD(DISTINCT ((vt1.c0) BETWEEN (vt1.c0) AND (0.9574340312267023)), ((vt1.c0)OR(vt1.c0)))) ORDER BY vt1.c0 DESC  NULLS FIRST, (((((x'', vt1.c0, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0)))) BETWEEN (x'df') AND ((vt1.c0 IN ()))), (+ (x'c0'))  NULLS LAST, ((((((((NULL)AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((vt1.c0) NOT NULL))))AND(((NULL) IS TRUE))))OR(((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))))  NULLS FIRST, NULLIF(DISTINCT (vt1.c0 IN (vt1.c0, vt1.c0)), vt1.c0 COLLATE NOCASE)  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((LIKELIHOOD(DISTINCT ((vt1.c0) BETWEEN (vt1.c0) AND (0.9574340312267023)), ((vt1.c0)OR(vt1.c0))))AND(((((((((vt1.c0)OR(vt1.c0)))AND(CAST(vt1.c0 AS NUMERIC))))AND((vt1.c0 IN (vt1.c0, vt1.c0)))))OR(NULL))))) ORDER BY vt1.c0 DESC  NULLS FIRST, (((((x'', vt1.c0, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0)))) BETWEEN (x'df') AND ((vt1.c0 IN ()))), (+ (x'c0'))  NULLS LAST, ((((((((NULL)AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((vt1.c0) NOT NULL))))AND(((NULL) IS TRUE))))OR(((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))))  NULLS FIRST, NULLIF(DISTINCT (vt1.c0 IN (vt1.c0, vt1.c0)), vt1.c0 COLLATE NOCASE)  NULLS LAST LIMIT 0X2 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)|(vt1.c0)))<((('-1688611678')|(vt1.c0))))) ORDER BY vt1.c0 DESC  NULLS FIRST, (((((x'', vt1.c0, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0)))) BETWEEN (x'df') AND ((vt1.c0 IN ()))), (+ (x'c0'))  NULLS LAST, ((((((((NULL)AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((vt1.c0) NOT NULL))))AND(((NULL) IS TRUE))))OR(((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))))  NULLS FIRST, NULLIF(DISTINCT (vt1.c0 IN (vt1.c0, vt1.c0)), vt1.c0 COLLATE NOCASE)  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON '886179703' WHERE (((CASE WHEN rt0.c1 THEN vt1.c0 ELSE rt0.c2 END) IS TRUE)) ORDER BY (- (CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 END)), (((NULL IN (rt0.c1, rt0.c3))) NOT BETWEEN (x'e9') AND ((((rt0.c3))==((rt0.c2))))) ASC  NULLS LAST, ((((rt0.c0) IS TRUE)) NOT BETWEEN ((vt1.c0 IN (rt0.c0, vt1.c0))) AND ((vt1.c0 IN (rt0.c3)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON '886179703' WHERE (((CASE WHEN rt0.c1 THEN vt1.c0 ELSE rt0.c2 END) IS TRUE)) ORDER BY (- (CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 END)), (((NULL IN (rt0.c1, rt0.c3))) NOT BETWEEN (x'e9') AND ((((rt0.c3))=((rt0.c2))))) ASC  NULLS LAST, ((((rt0.c0) IS TRUE)) NOT BETWEEN ((vt1.c0 IN (rt0.c0, vt1.c0))) AND ((vt1.c0 IN (rt0.c3)))) ASC  NULLS LAST;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON '886179703' WHERE (((CASE WHEN rt0.c1 THEN vt1.c0 ELSE rt0.c2 END) IS TRUE)) ORDER BY (- (CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 END)), (((NULL IN (rt0.c1, rt0.c3))) NOT BETWEEN (x'e9') AND ((((rt0.c3))==((rt0.c2))))) ASC  NULLS LAST, ((((rt0.c0) IS TRUE)) NOT BETWEEN ((vt1.c0 IN (rt0.c0, vt1.c0))) AND ((vt1.c0 IN (rt0.c3)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON '886179703' WHERE (((CASE WHEN rt0.c1 THEN vt1.c0 ELSE rt0.c2 END) IS TRUE)) ORDER BY (- (CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 END)), (((NULL IN (rt0.c1, rt0.c3))) NOT BETWEEN (x'e9') AND ((((rt0.c3))=((rt0.c2))))) ASC  NULLS LAST, ((((rt0.c0) IS TRUE)) NOT BETWEEN ((vt1.c0 IN (rt0.c0, vt1.c0))) AND ((vt1.c0 IN (rt0.c3)))) ASC  NULLS LAST;
SELECT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((((((vt1.c0)AND(rt0.c1)))OR(rt0.c1)))OR(x'')) IN (CASE WHEN vt1.c0 THEN rt0.c3 END)));
SELECT DISTINCT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((((((vt1.c0)AND(rt0.c1)))OR(rt0.c1)))OR(x'')) IN (CASE WHEN vt1.c0 THEN rt0.c3 END)));
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0, x''))==((rt0.c0, rt0.c1))) COLLATE RTRIM) ORDER BY SQLITE_SOURCE_ID()  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((vt1.c0, x''))=((rt0.c0, rt0.c1))) COLLATE RTRIM) ORDER BY SQLITE_SOURCE_ID()  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0, x''))==((rt0.c0, rt0.c1))) COLLATE RTRIM) ORDER BY SQLITE_SOURCE_ID()  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((vt1.c0, x''))=((rt0.c0, rt0.c1))) COLLATE RTRIM) ORDER BY SQLITE_SOURCE_ID()  NULLS FIRST;
SELECT MAX(rt0.c3) FROM rt0 WHERE (LOWER(DISTINCT ((((((rt0.c1)AND(rt0.c2)))AND('-2054769504')))OR(rt0.c0))));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (LOWER(DISTINCT ((((((rt0.c1)AND(rt0.c2)))AND('-2054769504')))OR(rt0.c0)))) LIMIT 0X1;
SELECT COUNT(*) FROM vt1 WHERE ((UNLIKELY(vt1.c0) IN (((vt1.c0)&(vt1.c0)), vt1.c0 COLLATE NOCASE))) ORDER BY CAST(('1560564265' IN ()) AS TEXT), IFNULL(LIKELY(DISTINCT vt1.c0), (NOT (vt1.c0)))  NULLS LAST, (~ ((((vt1.c0))>((vt1.c0))))) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((UNLIKELY(vt1.c0) IN (((vt1.c0)&(vt1.c0)), vt1.c0 COLLATE NOCASE)))AND(vt1.c0))) ORDER BY vt1.c0  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (0.28929296602717525) ORDER BY (((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c0)) IN ()) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((0.28929296602717525)AND(x''))) ORDER BY ((x'71d0f5' COLLATE BINARY) IS FALSE) ASC, (+ (rt0.c1 COLLATE NOCASE))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 NOT INDEXED, rt0 WHERE (((((SQLITE_COMPILEOPTION_USED(rt0.c3))AND(LIKELIHOOD(DISTINCT rt0.c1, vt1.c0))))OR((rt0.c0 IN (rt0.c0))))) ORDER BY ((x'71d0f5' COLLATE BINARY) IS FALSE) ASC, (+ (rt0.c1 COLLATE NOCASE))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (0.28929296602717525) ORDER BY (((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c0)) IN ()) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (rt0.c2 COLLATE NOCASE) ORDER BY ((((rt0.c1)<(vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (0.8895009993640729)), (NOT (((vt1.c0)>>(vt1.c0))))  NULLS FIRST, (((NOT (0Xffffffff93b644ef)))GLOB(((vt1.c0) IS TRUE)))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (((rt0.c2 COLLATE NOCASE)AND('Z/'))) ORDER BY ((((rt0.c1)<(vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (0.8895009993640729)), (NOT (((vt1.c0)>>(vt1.c0))))  NULLS FIRST, (((NOT (-1816771345)))GLOB(((vt1.c0) IS TRUE)))  NULLS LAST INTERSECT SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE ((~ (CAST(vt1.c0 AS BLOB)))) ORDER BY ((((rt0.c1)<(vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (0.8895009993640729)), (NOT (((vt1.c0)>>(vt1.c0))))  NULLS FIRST, (((NOT (-1816771345)))GLOB(((vt1.c0) IS TRUE)))  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (STRFTIME(vt1.c0 COLLATE NOCASE, (~ (vt1.c0)), ((vt1.c0)||(vt1.c0)), CAST(vt1.c0 AS BLOB))) ORDER BY ((8.39021629E8)&(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))) DESC;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (STRFTIME(vt1.c0 COLLATE NOCASE, (~ (vt1.c0)), ((vt1.c0)||(vt1.c0)), CAST(vt1.c0 AS BLOB))) ORDER BY ((json(vt1.c0)) IS TRUE)  NULLS LAST, ((((vt1.c0)==(vt1.c0))) BETWEEN (((vt1.c0)|(vt1.c0))) AND ((- (vt1.c0))))  NULLS LAST, (vt1.c0 IN ()), 0.23947245180739274 COLLATE BINARY ASC;
SELECT ALL * FROM vt1, rt0 WHERE (((464024925) NOTNULL));
SELECT ALL * FROM vt1, rt0 WHERE (((464024925) NOTNULL)) LIMIT 1 INTERSECT SELECT * FROM vt1, rt0 WHERE (rt0.c0) LIMIT 0X1;
SELECT ALL * FROM vt1, rt0 WHERE (((464024925) NOTNULL));
SELECT ALL * FROM vt1, rt0 WHERE (((464024925) NOTNULL)) LIMIT 1 INTERSECT SELECT * FROM vt1, rt0 WHERE (rt0.c0) LIMIT 0X1;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE ((((rt0.c3)) BETWEEN ((((((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2)))AND(rt0.c1)))OR(rt0.c3)))) AND ((((rt0.c3)GLOB(rt0.c1))))));
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE ((((((rt0.c3)) BETWEEN ((((((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2)))AND(rt0.c1)))OR(rt0.c3)))) AND ((((rt0.c3)GLOB(rt0.c1))))))AND((((~ (rt0.c3))) NOT BETWEEN ((~ (rt0.c3))) AND (((x'') NOT BETWEEN (rt0.c2) AND (rt0.c3))))))) ORDER BY ((((rt0.c0 IN (rt0.c1, rt0.c3)), (rt0.c2 IN (rt0.c3, rt0.c1))))<((rt0.c2 COLLATE RTRIM, ((((rt0.c3)OR(rt0.c3)))AND('0.1286444337000554'))))) ASC  NULLS FIRST, ((((rt0.c2)<=('(A'))) NOT BETWEEN ((+ (rt0.c3))) AND ((rt0.c2 IN ()))) DESC  NULLS FIRST, ((((((rt0.c0 COLLATE BINARY)OR(((rt0.c3)>=(rt0.c2)))))OR(rt0.c1)))AND(((rt0.c3)<(rt0.c2)))) ASC;
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE ((NOT (((((rt0.c2)OR(rt0.c0)))AND(rt0.c1)))));
SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE ((NOT (((((rt0.c2)OR(rt0.c0)))AND(rt0.c1)))));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((((((((CAST(vt1.c0 AS TEXT))OR(('-519497950' IN ()))))OR(NULL)))AND((((rt0.c3))<((rt0.c1))))))OR(((((((((((((vt1.c0)OR(rt0.c2)))OR(rt0.c3)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(rt0.c0))))) ORDER BY CAST(((rt0.c3) NOT BETWEEN (rt0.c2) AND (vt1.c0)) AS TEXT) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((((((((CAST(vt1.c0 AS TEXT))OR(('-519497950' IN ()))))OR(NULL)))AND((((rt0.c3))<((rt0.c1))))))OR(((((((((((((vt1.c0)OR(rt0.c2)))OR(rt0.c3)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(rt0.c0)))))AND(((((rt0.c0) BETWEEN (rt0.c0) AND (vt1.c0)))>((vt1.c0 IN ())))))) ORDER BY UNICODE(x'39') DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c0)) NOT BETWEEN ((((rt0.c3)OR(rt0.c0)))) AND ((((rt0.c3) IS TRUE))))) ORDER BY UNICODE(x'39') DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt1 WHERE ((~ ((~ (vt1.c0))))) ORDER BY LIKE(vt1.c0, vt1.c0, 'm') COLLATE NOCASE DESC  NULLS LAST, (+ ((((vt1.c0)) NOT BETWEEN ((x'')) AND ((vt1.c0)))))  NULLS FIRST;
SELECT * FROM vt1 WHERE ((~ ((~ (vt1.c0))))) ORDER BY LIKE(vt1.c0, vt1.c0, 'm') COLLATE NOCASE DESC  NULLS LAST, (+ ((((vt1.c0)) NOT BETWEEN ((x'')) AND ((vt1.c0)))))  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt1 WHERE ((~ ((~ (vt1.c0))))) ORDER BY LIKE(vt1.c0, vt1.c0, 'm') COLLATE NOCASE DESC  NULLS LAST, (+ ((((vt1.c0)) NOT BETWEEN ((x'')) AND ((vt1.c0)))))  NULLS FIRST;
SELECT * FROM vt1 WHERE ((~ ((~ (vt1.c0))))) ORDER BY LIKE(vt1.c0, vt1.c0, 'm') COLLATE NOCASE DESC  NULLS LAST, (+ ((((vt1.c0)) NOT BETWEEN ((x'')) AND ((vt1.c0)))))  NULLS FIRST LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE ((((('E')|(rt0.c1)))==(rt0.c0))) ORDER BY rt0.c0 ASC, CASE rt0.c1 COLLATE NOCASE  WHEN ((rt0.c1)LIKE(vt1.c0)) THEN JULIANDAY(vt1.c0, rt0.c2, rt0.c3, rt0.c2, rt0.c2) WHEN CASE WHEN rt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN '-242034396' END THEN (((rt0.c3))!=((rt0.c1))) WHEN (~ (rt0.c1)) THEN CAST(rt0.c3 AS TEXT) ELSE ((((rt0.c0)OR(rt0.c3)))AND(rt0.c0)) END ASC  NULLS LAST, ((((0.8800707639360296)OR(rt0.c0)))&(((rt0.c1) NOT NULL)));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((('E')|(rt0.c1)))==(rt0.c0)))AND((((((((rt0.c2 IN (rt0.c1, rt0.c0)))AND(rt0.c0 COLLATE RTRIM)))OR(rt0.c3 COLLATE RTRIM)))AND(((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2))))))) ORDER BY rt0.c0 ASC, CASE rt0.c1 COLLATE NOCASE  WHEN ((rt0.c1)LIKE(vt1.c0)) THEN JULIANDAY(vt1.c0, rt0.c2, rt0.c3, rt0.c2, rt0.c2) WHEN CASE WHEN rt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN '-242034396' END THEN (((rt0.c3))!=((rt0.c1))) WHEN (~ (rt0.c1)) THEN CAST(rt0.c3 AS TEXT) ELSE ((((rt0.c0)OR(rt0.c3)))AND(rt0.c0)) END ASC  NULLS LAST, ((((0.8800707639360296)OR(rt0.c0)))&(((rt0.c1) NOT NULL))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1)))) NOT BETWEEN (1.965182289E9) AND (0.8886769480980475))) ORDER BY rt0.c0 ASC, CASE rt0.c1 COLLATE NOCASE  WHEN ((rt0.c1)LIKE(vt1.c0)) THEN JULIANDAY(vt1.c0, rt0.c2, rt0.c3, rt0.c2, rt0.c2) WHEN CASE WHEN rt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN '-242034396' END THEN (((rt0.c3))!=((rt0.c1))) WHEN (~ (rt0.c1)) THEN CAST(rt0.c3 AS TEXT) ELSE ((((rt0.c0)OR(rt0.c3)))AND(rt0.c0)) END ASC  NULLS LAST, ((((0.8800707639360296)OR(rt0.c0)))&(((rt0.c1) NOT NULL)));
SELECT * FROM rt0, vt1 WHERE ((((('E')|(rt0.c1)))==(rt0.c0))) ORDER BY rt0.c0 ASC, CASE rt0.c1 COLLATE NOCASE  WHEN ((rt0.c1)LIKE(vt1.c0)) THEN JULIANDAY(vt1.c0, rt0.c2, rt0.c3, rt0.c2, rt0.c2) WHEN CASE WHEN rt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN '-242034396' END THEN (((rt0.c3))!=((rt0.c1))) WHEN (~ (rt0.c1)) THEN CAST(rt0.c3 AS TEXT) ELSE ((((rt0.c0)OR(rt0.c3)))AND(rt0.c0)) END ASC  NULLS LAST, ((((0.8800707639360296)OR(rt0.c0)))&(((rt0.c1) NOT NULL)));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((('E')|(rt0.c1)))==(rt0.c0)))AND((((((((rt0.c2 IN (rt0.c1, rt0.c0)))AND(rt0.c0 COLLATE RTRIM)))OR(rt0.c3 COLLATE RTRIM)))AND(((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2))))))) ORDER BY rt0.c0 ASC, CASE rt0.c1 COLLATE NOCASE  WHEN ((rt0.c1)LIKE(vt1.c0)) THEN JULIANDAY(vt1.c0, rt0.c2, rt0.c3, rt0.c2, rt0.c2) WHEN CASE WHEN rt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN '-242034396' END THEN (((rt0.c3))!=((rt0.c1))) WHEN (~ (rt0.c1)) THEN CAST(rt0.c3 AS TEXT) ELSE ((((rt0.c0)OR(rt0.c3)))AND(rt0.c0)) END ASC  NULLS LAST, ((((0.8800707639360296)OR(rt0.c0)))&(((rt0.c1) NOT NULL))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1)))) NOT BETWEEN (1.965182289E9) AND (0.8886769480980475))) ORDER BY rt0.c0 ASC, CASE rt0.c1 COLLATE NOCASE  WHEN ((rt0.c1)LIKE(vt1.c0)) THEN JULIANDAY(vt1.c0, rt0.c2, rt0.c3, rt0.c2, rt0.c2) WHEN CASE WHEN rt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN '-242034396' END THEN (((rt0.c3))!=((rt0.c1))) WHEN (~ (rt0.c1)) THEN CAST(rt0.c3 AS TEXT) ELSE ((((rt0.c0)OR(rt0.c3)))AND(rt0.c0)) END ASC  NULLS LAST, ((((0.8800707639360296)OR(rt0.c0)))&(((rt0.c1) NOT NULL)));
SELECT * FROM rt0, vt1 WHERE (((((rt0.c1)&(vt1.c0)))==(CASE WHEN rt0.c3 THEN rt0.c0 WHEN NULL THEN rt0.c0 END)));
SELECT * FROM rt0 NOT INDEXED, vt1 WHERE (((((rt0.c1)&(vt1.c0)))==(CASE WHEN rt0.c3 THEN rt0.c0 WHEN NULL THEN rt0.c0 END))) ORDER BY ((CASE rt0.c1  WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c2 END)GLOB((- (rt0.c1))))  NULLS FIRST, ABS(((rt0.c0)-(rt0.c3))) ASC  NULLS FIRST LIMIT 3;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c1)&(vt1.c0)))==(CASE WHEN rt0.c3 THEN rt0.c0 WHEN NULL THEN rt0.c0 END)));
SELECT * FROM rt0 NOT INDEXED, vt1 WHERE (((((rt0.c1)&(vt1.c0)))==(CASE WHEN rt0.c3 THEN rt0.c0 WHEN NULL THEN rt0.c0 END))) ORDER BY ((CASE rt0.c1  WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c2 END)GLOB((- (rt0.c1))))  NULLS FIRST, ABS(((rt0.c0)-(rt0.c3))) ASC  NULLS FIRST LIMIT 3;
SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON rt0.c2 WHERE ((~ (((rt0.c2) NOT NULL))));
SELECT DISTINCT COUNT(*) FROM rt0 CROSS JOIN vt1 ON rt0.c2 WHERE ((((~ (((rt0.c2) NOT NULL))))AND(((((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c3))) NOT NULL)))) ORDER BY ((((((((((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c2)))AND(vt1.c0)))OR(CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c1 END)))OR((((vt1.c0, rt0.c1))<((rt0.c3, vt1.c0))))))OR((rt0.c2 IN ()))) ASC  NULLS FIRST, x'51'  NULLS LAST, CAST(CASE rt0.c0  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 END AS REAL) DESC LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 CROSS JOIN vt1 ON rt0.c2 WHERE (0Xffffffffb6368974) ORDER BY ((((((((((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c2)))AND(vt1.c0)))OR(CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c1 END)))OR((((vt1.c0, rt0.c1))<((rt0.c3, vt1.c0))))))OR((rt0.c2 IN ()))) ASC  NULLS FIRST, x'51'  NULLS LAST, CAST(CASE rt0.c0  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 END AS REAL) DESC LIMIT 0;
SELECT * FROM rt0 CROSS JOIN vt1 ON ((((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2))) BETWEEN ((((vt1.c0))!=((rt0.c3)))) AND (vt1.c0 COLLATE BINARY)) WHERE (CAST(CAST(rt0.c1 AS NUMERIC) AS TEXT));
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON ((((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2))) BETWEEN ((((vt1.c0))<>((rt0.c3)))) AND (vt1.c0 COLLATE BINARY)) WHERE (CAST(CAST(rt0.c1 AS NUMERIC) AS TEXT)) ORDER BY HEX(DISTINCT ((((((((((0.7692607829548722)AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))OR(rt0.c3)))AND(rt0.c1))), ((rt0.c0 COLLATE RTRIM) IS TRUE) DESC;
SELECT * FROM rt0 CROSS JOIN vt1 ON ((((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2))) BETWEEN ((((vt1.c0))!=((rt0.c3)))) AND (vt1.c0 COLLATE BINARY)) WHERE (CAST(CAST(rt0.c1 AS NUMERIC) AS TEXT));
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON ((((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2))) BETWEEN ((((vt1.c0))<>((rt0.c3)))) AND (vt1.c0 COLLATE BINARY)) WHERE (CAST(CAST(rt0.c1 AS NUMERIC) AS TEXT)) ORDER BY HEX(DISTINCT ((((((((((0.7692607829548722)AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))OR(rt0.c3)))AND(rt0.c1))), ((rt0.c0 COLLATE RTRIM) IS TRUE) DESC;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON (~ (CAST(rt0.c3 AS REAL))) WHERE (LIKELIHOOD('0.20155901645647345', CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 END)) ORDER BY ((rt0.c2) BETWEEN (rt0.c1) AND (('733657130' IN (rt0.c1, vt1.c0))))  NULLS LAST;
SELECT DISTINCT * FROM vt1 LEFT OUTER JOIN rt0 ON (~ (CAST(rt0.c3 AS REAL))) WHERE (((LIKELIHOOD('0.20155901645647345', CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 END))AND(NULL))) ORDER BY ((rt0.c2) BETWEEN (rt0.c1) AND (('733657130' IN (rt0.c1, vt1.c0))))  NULLS LAST LIMIT 2;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON (~ (CAST(rt0.c3 AS REAL))) WHERE (LIKELIHOOD('0.20155901645647345', CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 END)) ORDER BY ((rt0.c2) BETWEEN (rt0.c1) AND (('733657130' IN (rt0.c1, vt1.c0))))  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND('t 
-g~b')) AS BLOB)) ORDER BY (((vt1.c0)) NOT BETWEEN ((((vt1.c0) ISNULL))) AND (((vt1.c0 IN (vt1.c0, vt1.c0))))) ASC  NULLS LAST, 206543958 DESC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST(((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND('t 
-g~b')) AS BLOB))AND(((TRIM(DISTINCT vt1.c0, vt1.c0)) BETWEEN (NULL) AND (((vt1.c0) NOT NULL)))))) ORDER BY ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0 IN (0.8580757811844044))) IS FALSE)) ORDER BY ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE ASC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT NULL));
SELECT ALL * FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT NULL))AND(vt1.c0 COLLATE RTRIM))) LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT NULL));
SELECT ALL * FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT NULL))AND(vt1.c0 COLLATE RTRIM))) LIMIT 0X2;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c1);
SELECT * FROM rt0, vt1 WHERE (rt0.c1) ORDER BY ((vt1.c0)+(rtreenode(rt0.c2, rt0.c2))) INTERSECT SELECT * FROM rt0, vt1 WHERE (((rt0.c3)>>(((rt0.c2) IS TRUE)))) ORDER BY ((vt1.c0)+(rtreenode(rt0.c2, rt0.c2)));
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c1);
SELECT * FROM rt0, vt1 WHERE (rt0.c1) ORDER BY ((vt1.c0)+(rtreenode(rt0.c2, rt0.c2))) INTERSECT SELECT * FROM rt0, vt1 WHERE (((rt0.c3)>>(((rt0.c2) IS TRUE)))) ORDER BY ((vt1.c0)+(rtreenode(rt0.c2, rt0.c2)));
SELECT MAX(rt0.c1) FROM vt1, rt0 NOT INDEXED WHERE (((LIKELIHOOD(0.6317295070124067, rt0.c1)) NOT BETWEEN ((((rt0.c3))>((rt0.c1)))) AND (TRIM(DISTINCT rt0.c1))));
SELECT DISTINCT MAX(rt0.c1) FROM vt1, rt0 WHERE (((((LIKELIHOOD(0.6317295070124067, rt0.c1)) NOT BETWEEN ((((rt0.c3))!=((rt0.c1)))) AND (TRIM(DISTINCT rt0.c1))))AND(((((rt0.c0))<=((rt0.c2))) IN ())))) ORDER BY (CASE WHEN rt0.c0 THEN 'gC?&L&脢}' WHEN rt0.c3 THEN rt0.c3 END IN (((((rt0.c2)AND(rt0.c2)))OR(rt0.c1)), ((rt0.c0)/(vt1.c0)))), (~ ((NOT (NULL)))) DESC, ((rt0.c1 IN (vt1.c0)) IN (CASE WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN vt1.c0 END))  NULLS LAST;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (((((((((rt0.c1)&(rt0.c3)))OR((((rt0.c1, rt0.c1, rt0.c1))<((rt0.c3, rt0.c0, rt0.c0))))))OR(((rt0.c0)>>(NULL)))))AND(CAST(rt0.c2 AS INTEGER))));
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((((((((rt0.c1)&(rt0.c3)))OR((((rt0.c1, rt0.c1, rt0.c1))<((rt0.c3, rt0.c0, rt0.c0))))))OR(((rt0.c0)>>(NULL)))))AND(CAST(rt0.c2 AS INTEGER))))AND((((((((((-6.95584596E8, rt0.c1))<>((rt0.c3, rt0.c2))))OR(LAST_INSERT_ROWID())))AND(((rt0.c3) NOT NULL))))OR(rt0.c3 COLLATE RTRIM))))) LIMIT 0X3 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE ((0.7968905808254434 IN ())) LIMIT 0x3;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0) NOTNULL) IN ()));
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0) NOTNULL) IN ()))AND((((((('-379422826')OR(vt1.c0)))AND(vt1.c0)))!=(CASE WHEN vt1.c0 THEN vt1.c0 END)))));
SELECT MAX(rt0.c1) FROM rt0 WHERE (((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 ELSE x'1b' END) NOT BETWEEN (((rt0.c0)LIKE(rt0.c3))) AND ((+ (rt0.c1)))));
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 ELSE x'1b' END) NOT BETWEEN (((rt0.c0)LIKE(rt0.c3))) AND ((+ (rt0.c1)))));
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE (vt1.c0 IN ())  WHEN -1.688611678E9 THEN CAST(vt1.c0 AS REAL) END) ORDER BY CASE WHEN TRIM(DISTINCT vt1.c0, vt1.c0) THEN 0.2455152193017085 END  NULLS LAST, (+ (((vt1.c0)>=(vt1.c0))))  NULLS LAST, (((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, '-86516757', vt1.c0, vt1.c0))))OR(x'fa')))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((CASE (vt1.c0 IN ())  WHEN -1.688611678E9 THEN CAST(vt1.c0 AS REAL) END)AND(CHANGES()))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, '%	O_ｳC', vt1.c0)) AND ((vt1.c0, NULL, vt1.c0, vt1.c0))) COLLATE BINARY, CASE CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END  WHEN (- (vt1.c0)) THEN (+ (vt1.c0)) WHEN ((vt1.c0)<(vt1.c0)) THEN ((vt1.c0) IS FALSE) ELSE ((vt1.c0) ISNULL) END  NULLS FIRST INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (CAST((NOT (vt1.c0)) AS REAL)) ORDER BY (((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, '%	O_ｳC', vt1.c0)) AND ((vt1.c0, NULL, vt1.c0, vt1.c0))) COLLATE BINARY, CASE CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END  WHEN (- (vt1.c0)) THEN (+ (vt1.c0)) WHEN ((vt1.c0)<(vt1.c0)) THEN ((vt1.c0) IS FALSE) ELSE ((vt1.c0) ISNULL) END  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c2 AS BLOB)) ORDER BY ((((rt0.c2)IS NOT(rt0.c0)))|((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((vt1.c0))))), ((((rt0.c0)AND(NULL)))IS NOT(rt0.c1)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(rt0.c2 AS BLOB))AND((((rt0.c0 IN (rt0.c0))) IS FALSE)))) ORDER BY (((rt0.c2) NOT BETWEEN ('-1153288785') AND (vt1.c0)) IN ())  NULLS FIRST, IFNULL(CAST(rt0.c1 AS NUMERIC), rt0.c0)  NULLS FIRST, INSTR(('J' IN ()), ((rt0.c0)GLOB(rt0.c1))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((+ (((rt0.c3)=(rt0.c0))))) ORDER BY (((rt0.c2) NOT BETWEEN ('-1153288785') AND (vt1.c0)) IN ())  NULLS FIRST, IFNULL(CAST(rt0.c1 AS NUMERIC), rt0.c0)  NULLS FIRST, INSTR(('J' IN ()), ((rt0.c0)GLOB(rt0.c1)));
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c2 AS BLOB)) ORDER BY ((((rt0.c2)IS NOT(rt0.c0)))|((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((vt1.c0))))), ((((rt0.c0)AND(NULL)))IS NOT(rt0.c1)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(rt0.c2 AS BLOB))AND((((rt0.c0 IN (rt0.c0))) IS FALSE)))) ORDER BY (((rt0.c2) NOT BETWEEN ('-1153288785') AND (vt1.c0)) IN ())  NULLS FIRST, IFNULL(CAST(rt0.c1 AS NUMERIC), rt0.c0)  NULLS FIRST, INSTR(('J' IN ()), ((rt0.c0)GLOB(rt0.c1))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((+ (((rt0.c3)=(rt0.c0))))) ORDER BY (((rt0.c2) NOT BETWEEN ('-1153288785') AND (vt1.c0)) IN ())  NULLS FIRST, IFNULL(CAST(rt0.c1 AS NUMERIC), rt0.c0)  NULLS FIRST, INSTR(('J' IN ()), ((rt0.c0)GLOB(rt0.c1)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((+ (((vt1.c0)!=(NULL)))));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((+ (((vt1.c0)<>(NULL)))));
SELECT MAX(rt0.c0) FROM rt0 WHERE (CASE CAST(rt0.c3 AS REAL)  WHEN (NOT (rt0.c1)) THEN ((x'eefd15')LIKE(rt0.c3)) WHEN ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c3)) THEN rt0.c0 COLLATE NOCASE ELSE ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c2)) END);
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (((CASE CAST(rt0.c3 AS REAL)  WHEN (NOT (rt0.c1)) THEN ((x'eefd15')LIKE(rt0.c3)) WHEN ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c3)) THEN rt0.c0 COLLATE NOCASE ELSE ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c2)) END)AND((x'd682' IN ())))) ORDER BY HEX((((x'b2', rt0.c2, rt0.c2, rt0.c3))<((rt0.c2, rt0.c0, rt0.c1, rt0.c0)))) DESC, (464024925 IN ())  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (UNLIKELY((((rt0.c2, rt0.c0))<((rt0.c2, rt0.c0))))) ORDER BY HEX((((x'b2', rt0.c2, rt0.c2, rt0.c3))<((rt0.c2, rt0.c0, rt0.c1, rt0.c0)))) DESC, (0X1ba8755d IN ())  NULLS LAST LIMIT 0x1;
SELECT MAX(rt0.c2) FROM rt0 WHERE (((rt0.c1)||(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2)))));
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((rt0.c1)||(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2))))) LIMIT 0X0 INTERSECT SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((('1339938603', (NOT ('E')), ((((((rt0.c0)OR(rt0.c2)))AND('v')))AND(rt0.c3))))=(((rt0.c2 IN ()), ((rt0.c2)>>(rt0.c2)), (+ (rt0.c0)))))) LIMIT 0X0;
SELECT COUNT(*) FROM rt0 WHERE (CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN 0.5145541253940139 END COLLATE RTRIM) ORDER BY CAST(DATETIME(rt0.c1, rt0.c1, '-781367930') AS INTEGER) DESC, ((x'7a')>=(rt0.c0 COLLATE NOCASE));
SELECT ALL COUNT(*) FROM rt0 WHERE (CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN 0.5145541253940139 END COLLATE RTRIM) ORDER BY (((((((rt0.c3)AND(rt0.c1)))OR('471476195')), (0.7190586505149263 IN (rt0.c1))))<((((((((((rt0.c3)OR(rt0.c3)))AND(rt0.c0)))OR(rt0.c0)))OR(rt0.c3)), CASE WHEN rt0.c1 THEN rt0.c2 END))) ASC, x'' ASC;
SELECT ALL * FROM rt0 WHERE ((((rt0.c0)>=(rt0.c3)) IN ()));
SELECT ALL * FROM rt0 WHERE ((((((rt0.c0)>(rt0.c3)) IN ()))AND(rt0.c2))) ORDER BY ((rt0.c0 COLLATE BINARY) NOT BETWEEN ((((x'', rt0.c3, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c1, x'c4')) AND ((rt0.c1, rt0.c0, rt0.c2, rt0.c3)))) AND (MAX(rt0.c1, rt0.c1, rt0.c0))) DESC  NULLS FIRST, ((CASE WHEN rt0.c1 THEN rt0.c1 END)>=((rt0.c3 IN (rt0.c0)))) ASC  NULLS LAST INTERSECT SELECT * FROM rt0 WHERE ((NOT (CAST(rt0.c3 AS REAL)))) ORDER BY ((rt0.c0 COLLATE BINARY) NOT BETWEEN ((((x'', rt0.c3, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c1, x'c4')) AND ((rt0.c1, rt0.c0, rt0.c2, rt0.c3)))) AND (MAX(rt0.c1, rt0.c1, rt0.c0))) DESC  NULLS FIRST, ((CASE WHEN rt0.c1 THEN rt0.c1 END)>=((rt0.c3 IN (rt0.c0)))) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((rt0.c0)>=(rt0.c3)) IN ()));
SELECT ALL * FROM rt0 WHERE ((((((rt0.c0)>(rt0.c3)) IN ()))AND(rt0.c2))) ORDER BY ((rt0.c0 COLLATE BINARY) NOT BETWEEN ((((x'', rt0.c3, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c1, x'c4')) AND ((rt0.c1, rt0.c0, rt0.c2, rt0.c3)))) AND (MAX(rt0.c1, rt0.c1, rt0.c0))) DESC  NULLS FIRST, ((CASE WHEN rt0.c1 THEN rt0.c1 END)>=((rt0.c3 IN (rt0.c0)))) ASC  NULLS LAST INTERSECT SELECT * FROM rt0 WHERE ((NOT (CAST(rt0.c3 AS REAL)))) ORDER BY ((rt0.c0 COLLATE BINARY) NOT BETWEEN ((((x'', rt0.c3, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c1, x'c4')) AND ((rt0.c1, rt0.c0, rt0.c2, rt0.c3)))) AND (MAX(rt0.c1, rt0.c1, rt0.c0))) DESC  NULLS FIRST, ((CASE WHEN rt0.c1 THEN rt0.c1 END)>=((rt0.c3 IN (rt0.c0)))) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE ((+ (((0Xffffffffc3a88e1e)>=(rt0.c3))))) ORDER BY ((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c0)))<<(rt0.c0)), ((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0))) BETWEEN (((rt0.c2)IS(rt0.c3))) AND (((rt0.c1) IS TRUE)))  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((+ (((0Xffffffffc3a88e1e)>=(rt0.c3))))) ORDER BY CASE WHEN ((((709578335)OR(rt0.c2)))AND(rt0.c2)) THEN ((rt0.c0)>=(rt0.c3)) END  NULLS LAST, SQLITE_VERSION() DESC  NULLS LAST INTERSECT SELECT * FROM rt0 WHERE (CAST(CAST(rt0.c0 AS INTEGER) AS BLOB)) ORDER BY CASE WHEN ((((709578335)OR(rt0.c2)))AND(rt0.c2)) THEN ((rt0.c0)>=(rt0.c3)) END  NULLS LAST, SQLITE_VERSION() DESC  NULLS LAST;
SELECT * FROM rt0 WHERE ((+ (((0Xffffffffc3a88e1e)>=(rt0.c3))))) ORDER BY ((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c0)))<<(rt0.c0)), ((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0))) BETWEEN (((rt0.c2)IS(rt0.c3))) AND (((rt0.c1) IS TRUE)))  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((+ (((0Xffffffffc3a88e1e)>=(rt0.c3))))) ORDER BY CASE WHEN ((((709578335)OR(rt0.c2)))AND(rt0.c2)) THEN ((rt0.c0)>=(rt0.c3)) END  NULLS LAST, SQLITE_VERSION() DESC  NULLS LAST INTERSECT SELECT * FROM rt0 WHERE (CAST(CAST(rt0.c0 AS INTEGER) AS BLOB)) ORDER BY CASE WHEN ((((709578335)OR(rt0.c2)))AND(rt0.c2)) THEN ((rt0.c0)>=(rt0.c3)) END  NULLS LAST, SQLITE_VERSION() DESC  NULLS LAST;
SELECT * FROM rt0 NOT INDEXED WHERE ((- ((+ (rt0.c1))))) ORDER BY ((0.6280878352423527) IS TRUE)  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((((- ((+ (rt0.c1)))))AND(((JULIANDAY(rt0.c3, x'b034', rt0.c1, x'f0')) BETWEEN (((-1.834146775E9) BETWEEN (rt0.c0) AND (rt0.c0))) AND (((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2))))))) ORDER BY (((+ (rt0.c2))) BETWEEN ((+ (rt0.c1))) AND (rt0.c1 COLLATE BINARY)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((rt0.c2 COLLATE RTRIM IN (TIME(NULL, rt0.c1, rt0.c2, rt0.c3, rt0.c0, rt0.c2, rt0.c3), (rt0.c3 IN ())))) ORDER BY (((+ (rt0.c2))) BETWEEN ((+ (rt0.c1))) AND (rt0.c1 COLLATE BINARY)) LIMIT 0x1;
SELECT * FROM rt0 NOT INDEXED WHERE ((- ((+ (rt0.c1))))) ORDER BY ((0.6280878352423527) IS TRUE)  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((((- ((+ (rt0.c1)))))AND(((JULIANDAY(rt0.c3, x'b034', rt0.c1, x'f0')) BETWEEN (((-1.834146775E9) BETWEEN (rt0.c0) AND (rt0.c0))) AND (((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2))))))) ORDER BY (((+ (rt0.c2))) BETWEEN ((+ (rt0.c1))) AND (rt0.c1 COLLATE BINARY)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((rt0.c2 COLLATE RTRIM IN (TIME(NULL, rt0.c1, rt0.c2, rt0.c3, rt0.c0, rt0.c2, rt0.c3), (rt0.c3 IN ())))) ORDER BY (((+ (rt0.c2))) BETWEEN ((+ (rt0.c1))) AND (rt0.c1 COLLATE BINARY)) LIMIT 0x1;
SELECT COUNT(*) FROM vt1 NOT INDEXED WHERE (((NOT (vt1.c0)) IN ()));
SELECT COUNT(*) FROM vt1 WHERE (((((NOT (vt1.c0)) IN ()))AND((((- (vt1.c0)))||(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))));
SELECT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (vt1.c0) LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (((TRIM(DISTINCT vt1.c0)) NOT BETWEEN ('NU') AND (vt1.c0 COLLATE BINARY))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (vt1.c0) LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (((TRIM(DISTINCT vt1.c0)) NOT BETWEEN ('NU') AND (vt1.c0 COLLATE BINARY))) LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE (CASE WHEN NULL THEN CAST(rt0.c0 AS INTEGER) END) ORDER BY (((rt0.c2, rt0.c2, rt0.c2, vt1.c0, vt1.c0)) BETWEEN (((('Hw') NOT BETWEEN (rt0.c1) AND (rt0.c3)), (rt0.c1 IN (rt0.c1)), ((rt0.c0)GLOB(rt0.c0)), ((rt0.c3)LIKE(rt0.c3)), 1050893604)) AND ((((rt0.c2)IS(rt0.c2)), CASE rt0.c0  WHEN NULL THEN x'90e29e01' WHEN vt1.c0 THEN vt1.c0 END, (+ (rt0.c3)), CAST(rt0.c3 AS REAL), ((vt1.c0)IS(rt0.c0)))))  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE WHEN NULL THEN CAST(rt0.c0 AS INTEGER) END)AND(((((((((((((((rt0.c3 COLLATE BINARY)AND(((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)))))AND(JULIANDAY(0xffffffff865049af, rt0.c2, rt0.c1))))AND(LIKE(rt0.c1, rt0.c1, 'X'))))AND(rt0.c2)))OR(((((((((((((vt1.c0)OR(rt0.c0)))AND('')))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c3)))))AND((rt0.c0 IN (rt0.c2)))))OR(((vt1.c0) BETWEEN (rt0.c2) AND (NULL))))))) ORDER BY (((rt0.c2, rt0.c2, rt0.c2, vt1.c0, vt1.c0)) BETWEEN (((('Hw') NOT BETWEEN (rt0.c1) AND (rt0.c3)), (rt0.c1 IN (rt0.c1)), ((rt0.c0)GLOB(rt0.c0)), ((rt0.c3)LIKE(rt0.c3)), 0X3ea35d24)) AND ((((rt0.c2)IS(rt0.c2)), CASE rt0.c0  WHEN NULL THEN x'90e29e01' WHEN vt1.c0 THEN vt1.c0 END, (+ (rt0.c3)), CAST(rt0.c3 AS REAL), ((vt1.c0)IS(rt0.c0)))))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (CASE WHEN NULL THEN CAST(rt0.c0 AS INTEGER) END) ORDER BY (((rt0.c2, rt0.c2, rt0.c2, vt1.c0, vt1.c0)) BETWEEN (((('Hw') NOT BETWEEN (rt0.c1) AND (rt0.c3)), (rt0.c1 IN (rt0.c1)), ((rt0.c0)GLOB(rt0.c0)), ((rt0.c3)LIKE(rt0.c3)), 1050893604)) AND ((((rt0.c2)IS(rt0.c2)), CASE rt0.c0  WHEN NULL THEN x'90e29e01' WHEN vt1.c0 THEN vt1.c0 END, (+ (rt0.c3)), CAST(rt0.c3 AS REAL), ((vt1.c0)IS(rt0.c0)))))  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE WHEN NULL THEN CAST(rt0.c0 AS INTEGER) END)AND(((((((((((((((rt0.c3 COLLATE BINARY)AND(((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)))))AND(JULIANDAY(0xffffffff865049af, rt0.c2, rt0.c1))))AND(LIKE(rt0.c1, rt0.c1, 'X'))))AND(rt0.c2)))OR(((((((((((((vt1.c0)OR(rt0.c0)))AND('')))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c3)))))AND((rt0.c0 IN (rt0.c2)))))OR(((vt1.c0) BETWEEN (rt0.c2) AND (NULL))))))) ORDER BY (((rt0.c2, rt0.c2, rt0.c2, vt1.c0, vt1.c0)) BETWEEN (((('Hw') NOT BETWEEN (rt0.c1) AND (rt0.c3)), (rt0.c1 IN (rt0.c1)), ((rt0.c0)GLOB(rt0.c0)), ((rt0.c3)LIKE(rt0.c3)), 0X3ea35d24)) AND ((((rt0.c2)IS(rt0.c2)), CASE rt0.c0  WHEN NULL THEN x'90e29e01' WHEN vt1.c0 THEN vt1.c0 END, (+ (rt0.c3)), CAST(rt0.c3 AS REAL), ((vt1.c0)IS(rt0.c0)))))  NULLS LAST;
SELECT * FROM vt1 INNER JOIN rt0 ON CAST((NOT (rt0.c2)) AS INTEGER) WHERE (rt0.c0);
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CAST((NOT (rt0.c2)) AS INTEGER) WHERE (rt0.c0);
SELECT * FROM vt1 INNER JOIN rt0 ON CAST((NOT (rt0.c2)) AS INTEGER) WHERE (rt0.c0);
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CAST((NOT (rt0.c2)) AS INTEGER) WHERE (rt0.c0);
SELECT * FROM rt0, vt1 WHERE ((+ (((((((rt0.c0)OR(vt1.c0)))AND('s1<Nw^B컇')))OR(rt0.c1))))) ORDER BY CAST((((rt0.c2, rt0.c3, vt1.c0))!=((vt1.c0, vt1.c0, 'e1XN%H麛['))) AS NUMERIC)  NULLS LAST, ((((((rt0.c3)!=(rt0.c1)))OR(((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)))))AND(rt0.c3 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((+ (((((((rt0.c0)OR(vt1.c0)))AND('s1<Nw^B컇')))OR(rt0.c1))))) ORDER BY CAST((((rt0.c2, rt0.c3, vt1.c0))<>((vt1.c0, vt1.c0, 'e1XN%H麛['))) AS NUMERIC)  NULLS LAST, ((((((rt0.c3)!=(rt0.c1)))OR(((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)))))AND(rt0.c3 COLLATE NOCASE)) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((((((rt0.c0)OR(rt0.c3)))AND(rt0.c1)))AND(rt0.c2)))+((rt0.c3 IN ())))) ORDER BY CAST((((rt0.c2, rt0.c3, vt1.c0))!=((vt1.c0, vt1.c0, 'e1XN%H麛['))) AS NUMERIC)  NULLS LAST, ((((((rt0.c3)<>(rt0.c1)))OR(((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)))))AND(rt0.c3 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE ((+ (((((((rt0.c0)OR(vt1.c0)))AND('s1<Nw^B컇')))OR(rt0.c1))))) ORDER BY CAST((((rt0.c2, rt0.c3, vt1.c0))!=((vt1.c0, vt1.c0, 'e1XN%H麛['))) AS NUMERIC)  NULLS LAST, ((((((rt0.c3)!=(rt0.c1)))OR(((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)))))AND(rt0.c3 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((+ (((((((rt0.c0)OR(vt1.c0)))AND('s1<Nw^B컇')))OR(rt0.c1))))) ORDER BY CAST((((rt0.c2, rt0.c3, vt1.c0))<>((vt1.c0, vt1.c0, 'e1XN%H麛['))) AS NUMERIC)  NULLS LAST, ((((((rt0.c3)!=(rt0.c1)))OR(((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)))))AND(rt0.c3 COLLATE NOCASE)) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((((((rt0.c0)OR(rt0.c3)))AND(rt0.c1)))AND(rt0.c2)))+((rt0.c3 IN ())))) ORDER BY CAST((((rt0.c2, rt0.c3, vt1.c0))!=((vt1.c0, vt1.c0, 'e1XN%H麛['))) AS NUMERIC)  NULLS LAST, ((((((rt0.c3)<>(rt0.c1)))OR(((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)))))AND(rt0.c3 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt1, rt0 WHERE (CASE WHEN ((NULL) NOTNULL) THEN (NULL IN ()) WHEN (~ (vt1.c0)) THEN LIKELY(rt0.c3) ELSE rt0.c0 END);
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (CASE WHEN ((NULL) NOTNULL) THEN (NULL IN ()) WHEN (~ (vt1.c0)) THEN LIKELY(rt0.c3) ELSE rt0.c0 END) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE ((((rt0.c2 COLLATE BINARY, STRFTIME(rt0.c2, rt0.c1, x'', vt1.c0, rt0.c0, rt0.c3)))<=((((x'78')|(rt0.c3)), ((rt0.c0) NOT NULL)))));
SELECT ALL * FROM vt1, rt0 WHERE (CAST(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c3 END AS TEXT)) ORDER BY rt0.c3, (((rt0.c1, ((rt0.c1)AND(rt0.c1))))>=(((vt1.c0 IN (vt1.c0, vt1.c0)), (vt1.c0 IN (NULL, rt0.c3))))) DESC  NULLS FIRST;
SELECT * FROM vt1 NOT INDEXED, rt0 WHERE (((CAST(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c3 END AS TEXT))AND(((vt1.c0) NOT BETWEEN (((rt0.c3) NOTNULL)) AND (rt0.c3))))) ORDER BY ((rt0.c2 IN (vt1.c0)) IN ()) DESC LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c3 END AS TEXT)) ORDER BY rt0.c3, (((rt0.c1, ((rt0.c1)AND(rt0.c1))))>=(((vt1.c0 IN (vt1.c0, vt1.c0)), (vt1.c0 IN (NULL, rt0.c3))))) DESC  NULLS FIRST;
SELECT * FROM vt1 NOT INDEXED, rt0 WHERE (((CAST(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c3 END AS TEXT))AND(((vt1.c0) NOT BETWEEN (((rt0.c3) NOTNULL)) AND (rt0.c3))))) ORDER BY ((rt0.c2 IN (vt1.c0)) IN ()) DESC LIMIT 0;
SELECT * FROM vt1, rt0 WHERE (HEX((((vt1.c0, rt0.c3))<=((vt1.c0, rt0.c1))))) ORDER BY (vt1.c0 IN ()), NULL  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 NOT INDEXED WHERE (((HEX((((vt1.c0, rt0.c3))<=((vt1.c0, rt0.c1)))))AND(((((rt0.c3) IS TRUE))<<(rt0.c1 COLLATE RTRIM))))) ORDER BY (vt1.c0 IN ()), NULL  NULLS LAST LIMIT 0x2;
SELECT * FROM vt1, rt0 WHERE (HEX((((vt1.c0, rt0.c3))<=((vt1.c0, rt0.c1))))) ORDER BY (vt1.c0 IN ()), NULL  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((0X38598fc3) NOTNULL));
SELECT * FROM rt0, vt1 WHERE (((((945393603) NOTNULL))AND(CAST(CAST(rt0.c2 AS REAL) AS INTEGER)))) INTERSECT SELECT * FROM rt0, vt1 WHERE ((((CAST(rt0.c3 AS NUMERIC)))<=((((rt0.c1)OR(NULL))))));
SELECT ALL * FROM rt0, vt1 WHERE (((0X38598fc3) NOTNULL));
SELECT * FROM rt0, vt1 WHERE (((((945393603) NOTNULL))AND(CAST(CAST(rt0.c2 AS REAL) AS INTEGER)))) INTERSECT SELECT * FROM rt0, vt1 WHERE ((((CAST(rt0.c3 AS NUMERIC)))<=((((rt0.c1)OR(NULL))))));
SELECT ALL * FROM vt1 WHERE ((vt1.c0 IN ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) COLLATE BINARY ASC, COALESCE(NULLIF(vt1.c0, vt1.c0), ((vt1.c0)>=(vt1.c0)), ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE ((vt1.c0 IN ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) ORDER BY vt1.c0 DESC;
SELECT ALL * FROM vt1 WHERE ((vt1.c0 IN ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) COLLATE BINARY ASC, COALESCE(NULLIF(vt1.c0, vt1.c0), ((vt1.c0)>=(vt1.c0)), ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE ((vt1.c0 IN ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) ORDER BY vt1.c0 DESC;
SELECT ALL * FROM rt0 WHERE (((LTRIM(rt0.c3, rt0.c1))LIKE(CAST(rt0.c1 AS BLOB)))) ORDER BY (((rt0.c0 IN (rt0.c1, rt0.c2))) ISNULL) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((LTRIM(rt0.c3, rt0.c1))LIKE(CAST(rt0.c1 AS BLOB))))AND(((((((rt0.c0)||(rt0.c1)))AND((rt0.c2 IN (rt0.c3, rt0.c3)))))AND(CAST(0.977892014343128 AS INTEGER)))))) ORDER BY (((((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))))GLOB(((rt0.c3)=(rt0.c2))))  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE (((LTRIM(rt0.c3, rt0.c1))LIKE(CAST(rt0.c1 AS BLOB)))) ORDER BY (((rt0.c0 IN (rt0.c1, rt0.c2))) ISNULL) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((LTRIM(rt0.c3, rt0.c1))LIKE(CAST(rt0.c1 AS BLOB))))AND(((((((rt0.c0)||(rt0.c1)))AND((rt0.c2 IN (rt0.c3, rt0.c3)))))AND(CAST(0.977892014343128 AS INTEGER)))))) ORDER BY (((((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))))GLOB(((rt0.c3)=(rt0.c2))))  NULLS FIRST LIMIT 0x0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE);
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE)AND(CAST(vt1.c0 AS TEXT) COLLATE RTRIM))) ORDER BY '?'  NULLS FIRST, (((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, NULL)) AND ((vt1.c0, vt1.c0)))) BETWEEN (886179703) AND ((NOT (vt1.c0))))  NULLS FIRST, TRIM(((vt1.c0)IS NOT(vt1.c0)))  NULLS LAST INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CASE (+ (vt1.c0))  WHEN (((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))) THEN CAST('0.7153513000693227' AS TEXT) END) ORDER BY '?'  NULLS FIRST, (((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, NULL)) AND ((vt1.c0, vt1.c0)))) BETWEEN (886179703) AND ((NOT (vt1.c0))))  NULLS FIRST, TRIM(((vt1.c0)IS NOT(vt1.c0)))  NULLS LAST;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (CHANGES()) ORDER BY CAST(CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 ELSE NULL END AS REAL)  NULLS FIRST, CAST(rt0.c3 AS INTEGER) COLLATE RTRIM, x'ea' DESC;
SELECT MAX(rt0.c1) FROM rt0 WHERE (((CHANGES())AND(((((rt0.c1)<>(rt0.c1)))+(((rt0.c0) ISNULL)))))) ORDER BY CASE WHEN (NULL IN (rt0.c2)) THEN (((rt0.c0, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c2, rt0.c3))) WHEN ((0.9918359539233562)-(rt0.c3)) THEN CAST(rt0.c0 AS BLOB) END INTERSECT SELECT MAX(rt0.c1) FROM rt0 WHERE ((NOT (rt0.c2))) ORDER BY CASE WHEN (NULL IN (rt0.c2)) THEN (((rt0.c0, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c2, rt0.c3))) WHEN ((0.9918359539233562)-(rt0.c3)) THEN CAST(rt0.c0 AS BLOB) END;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))<(rt0.c3)));
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))<(rt0.c3)))AND((((x'99')) BETWEEN ((((rt0.c1)AND(rt0.c2)))) AND ((rt0.c2 COLLATE RTRIM)))))) ORDER BY (+ (rt0.c1))  NULLS LAST, (((rt0.c3, rt0.c0)) BETWEEN (((NOT (rt0.c0)), CAST(rt0.c1 AS INTEGER))) AND ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)), ((((((rt0.c3)OR(rt0.c2)))AND(rt0.c2)))OR(rt0.c2))))), 'nG,NF 닶' COLLATE NOCASE COLLATE RTRIM LIMIT 0x1;
SELECT COUNT(*) FROM vt1, rt0 WHERE (CASE ((rt0.c0) ISNULL)  WHEN (NOT (rt0.c0)) THEN ((rt0.c0)=(rt0.c2)) END);
SELECT COUNT(*) FROM vt1, rt0 WHERE (CASE ((rt0.c0) ISNULL)  WHEN (NOT (rt0.c0)) THEN ((rt0.c0)==(rt0.c2)) END) ORDER BY rt0.c2, (((rt0.c3, rt0.c0, rt0.c1, rt0.c3)) BETWEEN ((rt0.c0 COLLATE BINARY, (+ (vt1.c0)), (((rt0.c0))>((rt0.c1))), rt0.c2)) AND ((((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c3)), CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 END, (rt0.c2 IN ()), ((rt0.c3) BETWEEN (rt0.c2) AND (x'69')))))  NULLS FIRST LIMIT 0x0;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE ((((rt0.c0, rt0.c3)) BETWEEN ((rt0.c2 COLLATE RTRIM, rt0.c3 COLLATE RTRIM)) AND ((rt0.c2, ((rt0.c3)&(rt0.c3))))));
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE ((((rt0.c0, rt0.c3)) BETWEEN ((rt0.c2 COLLATE RTRIM, rt0.c3 COLLATE RTRIM)) AND ((rt0.c2, ((rt0.c3)&(rt0.c3)))))) INTERSECT SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (((rt0.c2 COLLATE BINARY)<=((~ (0.10218444356922274)))));
SELECT ALL * FROM vt1, rt0 WHERE ('1251045505') ORDER BY ((((((vt1.c0)OR(((((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c2)))OR(NULL)))OR(rt0.c1)))))OR(rt0.c2)))AND(((rt0.c1) NOT BETWEEN (rt0.c3) AND (0.8267627164915583)))), ((CAST(rt0.c3 AS TEXT))AND(((rt0.c3) NOT NULL))) ASC  NULLS LAST, rt0.c0 ASC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ('1251045505') ORDER BY ((((((vt1.c0)OR(((((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c2)))OR(NULL)))OR(rt0.c1)))))OR(rt0.c2)))AND(((rt0.c1) NOT BETWEEN (rt0.c3) AND (0.8267627164915583)))), ((CAST(rt0.c3 AS TEXT))AND(((rt0.c3) NOT NULL))) ASC  NULLS LAST, rt0.c0 ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (((JULIANDAY(vt1.c0, rt0.c0, '2042696920', 0.4471503330099622, vt1.c0)) NOT NULL)) ORDER BY ((((((vt1.c0)OR(((((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c2)))OR(NULL)))OR(rt0.c1)))))OR(rt0.c2)))AND(((rt0.c1) NOT BETWEEN (rt0.c3) AND (0.8267627164915583)))), ((CAST(rt0.c3 AS TEXT))AND(((rt0.c3) NOT NULL))) ASC  NULLS LAST, rt0.c0 ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt1, rt0 WHERE ('1251045505') ORDER BY ((((((vt1.c0)OR(((((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c2)))OR(NULL)))OR(rt0.c1)))))OR(rt0.c2)))AND(((rt0.c1) NOT BETWEEN (rt0.c3) AND (0.8267627164915583)))), ((CAST(rt0.c3 AS TEXT))AND(((rt0.c3) NOT NULL))) ASC  NULLS LAST, rt0.c0 ASC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ('1251045505') ORDER BY ((((((vt1.c0)OR(((((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c2)))OR(NULL)))OR(rt0.c1)))))OR(rt0.c2)))AND(((rt0.c1) NOT BETWEEN (rt0.c3) AND (0.8267627164915583)))), ((CAST(rt0.c3 AS TEXT))AND(((rt0.c3) NOT NULL))) ASC  NULLS LAST, rt0.c0 ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (((JULIANDAY(vt1.c0, rt0.c0, '2042696920', 0.4471503330099622, vt1.c0)) NOT NULL)) ORDER BY ((((((vt1.c0)OR(((((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c2)))OR(NULL)))OR(rt0.c1)))))OR(rt0.c2)))AND(((rt0.c1) NOT BETWEEN (rt0.c3) AND (0.8267627164915583)))), ((CAST(rt0.c3 AS TEXT))AND(((rt0.c3) NOT NULL))) ASC  NULLS LAST, rt0.c0 ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC)) ORDER BY CAST(((vt1.c0)<>(vt1.c0)) AS TEXT), json(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))) DESC, vt1.c0 ASC  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC)) ORDER BY CAST(((vt1.c0)!=(vt1.c0)) AS TEXT), json(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))) DESC, vt1.c0 ASC  NULLS FIRST INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))) AND (((vt1.c0)>=(vt1.c0))))) ORDER BY CAST(((vt1.c0)<>(vt1.c0)) AS TEXT), json(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))) DESC, vt1.c0 ASC  NULLS FIRST;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (CAST(rt0.c3 AS INTEGER) COLLATE BINARY) ORDER BY ((((rt0.c2)*(rt0.c2)))GLOB(CASE WHEN rt0.c3 THEN rt0.c2 END))  NULLS FIRST, (((((((((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c3))))OR((~ (rt0.c1)))))AND(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c1 END)))AND(((rt0.c3)IS(rt0.c0)))))OR(((rt0.c2)|(rt0.c3))));
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (CAST(rt0.c3 AS INTEGER) COLLATE BINARY) ORDER BY ((((rt0.c2)*(rt0.c2)))GLOB(CASE WHEN rt0.c3 THEN rt0.c2 END))  NULLS FIRST, (((((((((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c3))))OR((~ (rt0.c1)))))AND(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c1 END)))AND(((rt0.c3)IS(rt0.c0)))))OR(((rt0.c2)|(rt0.c3)))) LIMIT 2 INTERSECT SELECT MAX(rt0.c0) FROM rt0 WHERE (CAST(((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c2)) AS REAL)) ORDER BY ((((rt0.c2)*(rt0.c2)))GLOB(CASE WHEN rt0.c3 THEN rt0.c2 END))  NULLS FIRST, (((((((((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c3))))OR((~ (rt0.c1)))))AND(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c1 END)))AND(((rt0.c3)IS(rt0.c0)))))OR(((rt0.c2)|(rt0.c3)))) LIMIT 0X2;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c0 AS REAL) COLLATE BINARY) ORDER BY (((rt0.c1 IN ()))|(((vt1.c0) ISNULL))) ASC  NULLS FIRST, TYPEOF(CAST(NULL AS REAL)) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(rt0.c0 AS REAL) COLLATE BINARY)AND(LOWER(TRIM(DISTINCT rt0.c2, rt0.c1))))) ORDER BY (((rt0.c1 IN ()))|(((vt1.c0) ISNULL))) ASC  NULLS FIRST, TYPEOF(CAST(NULL AS REAL)) DESC;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c0 AS REAL) COLLATE BINARY) ORDER BY (((rt0.c1 IN ()))|(((vt1.c0) ISNULL))) ASC  NULLS FIRST, TYPEOF(CAST(NULL AS REAL)) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(rt0.c0 AS REAL) COLLATE BINARY)AND(LOWER(TRIM(DISTINCT rt0.c2, rt0.c1))))) ORDER BY (((rt0.c1 IN ()))|(((vt1.c0) ISNULL))) ASC  NULLS FIRST, TYPEOF(CAST(NULL AS REAL)) DESC;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((rt0.c2)OR(rt0.c0)))AND(rt0.c0)) COLLATE NOCASE);
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((rt0.c2)OR(rt0.c0)))AND(rt0.c0)) COLLATE NOCASE) ORDER BY ((vt1.c0 IN (rt0.c3)) IN ()), ((((x'aaf8b2') NOT NULL))GLOB(rt0.c0)) ASC  NULLS FIRST, ((((((rt0.c0)OR(rt0.c0 COLLATE NOCASE)))AND(vt1.c0)))AND('1251045505')) DESC LIMIT 0X2 INTERSECT SELECT COUNT(*) FROM vt1, rt0 WHERE ((((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c2)) IN ())) ORDER BY ((vt1.c0 IN (rt0.c3)) IN ()), ((((x'aaf8b2') NOT NULL))GLOB(rt0.c0)) ASC  NULLS FIRST, ((((((rt0.c0)OR(rt0.c0 COLLATE NOCASE)))AND(vt1.c0)))AND('1251045505')) DESC LIMIT 2;
SELECT ALL * FROM vt1 WHERE (DATETIME((vt1.c0 IN (vt1.c0)), ((vt1.c0) NOT NULL), vt1.c0, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0));
SELECT DISTINCT * FROM vt1 WHERE (DATETIME((vt1.c0 IN (vt1.c0)), ((vt1.c0) NOT NULL), vt1.c0, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((+ (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT ALL * FROM vt1 WHERE (DATETIME((vt1.c0 IN (vt1.c0)), ((vt1.c0) NOT NULL), vt1.c0, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0));
SELECT DISTINCT * FROM vt1 WHERE (DATETIME((vt1.c0 IN (vt1.c0)), ((vt1.c0) NOT NULL), vt1.c0, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((+ (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT ALL * FROM rt0, vt1 WHERE (CASE rt0.c2  WHEN CAST(rt0.c0 AS BLOB) THEN (((rt0.c3, 0.0626361263107964)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, rt0.c1))) ELSE ((rt0.c2)*(rt0.c3)) END);
SELECT * FROM rt0, vt1 WHERE (((CASE rt0.c2  WHEN CAST(rt0.c0 AS BLOB) THEN (((rt0.c3, 0.0626361263107964)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, rt0.c1))) ELSE ((rt0.c2)*(rt0.c3)) END)AND((((vt1.c0)) NOT BETWEEN ((TRIM(rt0.c1, rt0.c0))) AND (((NOT (rt0.c2)))))))) ORDER BY rt0.c3;
SELECT ALL * FROM rt0, vt1 WHERE (CASE rt0.c2  WHEN CAST(rt0.c0 AS BLOB) THEN (((rt0.c3, 0.0626361263107964)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, rt0.c1))) ELSE ((rt0.c2)*(rt0.c3)) END);
SELECT * FROM rt0, vt1 WHERE (((CASE rt0.c2  WHEN CAST(rt0.c0 AS BLOB) THEN (((rt0.c3, 0.0626361263107964)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, rt0.c1))) ELSE ((rt0.c2)*(rt0.c3)) END)AND((((vt1.c0)) NOT BETWEEN ((TRIM(rt0.c1, rt0.c0))) AND (((NOT (rt0.c2)))))))) ORDER BY rt0.c3;
SELECT ALL COUNT(*) FROM rt0 WHERE ((0.06723570791441968 IN ())) ORDER BY ((((((((-371019248)GLOB(rt0.c0)))AND((((rt0.c0, rt0.c2, rt0.c0, rt0.c0)) BETWEEN ((rt0.c3, rt0.c0, rt0.c0, rt0.c0)) AND ((rt0.c0, rt0.c1, rt0.c0, rt0.c3))))))OR((((rt0.c0, rt0.c0))>((rt0.c3, rt0.c2))))))OR(CAST(rt0.c1 AS BLOB))) ASC  NULLS FIRST, ((CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN 0.4823394143354902 END) NOT BETWEEN (((rt0.c3)*(rt0.c0))) AND (rt0.c1 COLLATE RTRIM));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((0.06723570791441968 IN ()))AND(((rt0.c3 COLLATE NOCASE)/('-116899011'))))) ORDER BY ((((((((-371019248)GLOB(rt0.c0)))AND((((rt0.c0, rt0.c2, rt0.c0, rt0.c0)) BETWEEN ((rt0.c3, rt0.c0, rt0.c0, rt0.c0)) AND ((rt0.c0, rt0.c1, rt0.c0, rt0.c3))))))OR((((rt0.c0, rt0.c0))>((rt0.c3, rt0.c2))))))OR(CAST(rt0.c1 AS BLOB))) ASC  NULLS FIRST, ((CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN 0.4823394143354902 END) NOT BETWEEN (((rt0.c3)*(rt0.c0))) AND (rt0.c1 COLLATE RTRIM)) INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c3)) THEN (rt0.c3 IN ()) ELSE rt0.c2 COLLATE BINARY END) ORDER BY ((((((((-371019248)GLOB(rt0.c0)))AND((((rt0.c0, rt0.c2, rt0.c0, rt0.c0)) BETWEEN ((rt0.c3, rt0.c0, rt0.c0, rt0.c0)) AND ((rt0.c0, rt0.c1, rt0.c0, rt0.c3))))))OR((((rt0.c0, rt0.c0))>((rt0.c3, rt0.c2))))))OR(CAST(rt0.c1 AS BLOB))) ASC  NULLS FIRST, ((CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN 0.4823394143354902 END) NOT BETWEEN (((rt0.c3)*(rt0.c0))) AND (rt0.c1 COLLATE RTRIM));
SELECT ALL COUNT(*) FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)-(((('.9', vt1.c0)) NOT BETWEEN ((vt1.c0, 259252199)) AND ((vt1.c0, vt1.c0))))));
SELECT ALL COUNT(*) FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)-(((('.9', vt1.c0)) NOT BETWEEN ((vt1.c0, 259252199)) AND ((vt1.c0, vt1.c0)))))) ORDER BY ((((((vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0))), ')J*_O', ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))>=((TRIM(DISTINCT vt1.c0, vt1.c0), (~ (vt1.c0)), (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, 0.02416497679369345)))))) DESC LIMIT 1;
SELECT * FROM vt1 WHERE (CASE WHEN ((((0.6453502077412708)OR(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0)>>('22855576')) WHEN NULL THEN ((vt1.c0) IS FALSE) WHEN ((vt1.c0) ISNULL) THEN vt1.c0 COLLATE NOCASE WHEN x'74' THEN CAST(vt1.c0 AS BLOB) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN ((((0.6453502077412708)OR(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0)>>('22855576')) WHEN NULL THEN ((vt1.c0) IS FALSE) WHEN ((vt1.c0) ISNULL) THEN vt1.c0 COLLATE NOCASE WHEN x'74' THEN CAST(vt1.c0 AS BLOB) END) ORDER BY (((vt1.c0)>=(vt1.c0)) IN ()) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)<<(vt1.c0))) ORDER BY (((vt1.c0)>=(vt1.c0)) IN ()) LIMIT 0x1;
SELECT * FROM vt1 WHERE (CASE WHEN ((((0.6453502077412708)OR(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0)>>('22855576')) WHEN NULL THEN ((vt1.c0) IS FALSE) WHEN ((vt1.c0) ISNULL) THEN vt1.c0 COLLATE NOCASE WHEN x'74' THEN CAST(vt1.c0 AS BLOB) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN ((((0.6453502077412708)OR(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0)>>('22855576')) WHEN NULL THEN ((vt1.c0) IS FALSE) WHEN ((vt1.c0) ISNULL) THEN vt1.c0 COLLATE NOCASE WHEN x'74' THEN CAST(vt1.c0 AS BLOB) END) ORDER BY (((vt1.c0)>=(vt1.c0)) IN ()) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)<<(vt1.c0))) ORDER BY (((vt1.c0)>=(vt1.c0)) IN ()) LIMIT 0x1;
SELECT MAX(rt0.c3) FROM rt0 WHERE ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1)) IN (((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c2)))));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE ((((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1)) IN (((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(('1663299610' IN ())))) ORDER BY (((((((((NOT (rt0.c2)))OR(x'4a')))OR(0.04157587481795155)))OR((rt0.c3 IN (rt0.c1)))))OR(CAST(NULL AS INTEGER))) DESC  NULLS LAST, ((((((((((((rt0.c0)+(rt0.c2)))OR(CAST(rt0.c1 AS NUMERIC))))AND(((rt0.c2) BETWEEN (x'b6') AND (rt0.c3)))))AND(CAST(rt0.c3 AS REAL))))AND((rt0.c1 IN (rt0.c3)))))OR((((rt0.c0))=((rt0.c2))))) DESC  NULLS LAST LIMIT 0X3;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (rt0.c1);
SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (rt0.c1) ORDER BY NULLIF(TOTAL_CHANGES(), ((rt0.c1)LIKE(rt0.c2))) DESC LIMIT 0 INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (CAST(((((rt0.c0)OR(1.7976931348623157E308)))AND(rt0.c2)) AS BLOB)) ORDER BY NULLIF(TOTAL_CHANGES(), ((rt0.c1)LIKE(rt0.c2))) DESC LIMIT 0;
SELECT COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c0 IN ()))-((((rt0.c0))=((-667601033))))));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((((((rt0.c0 IN ()))-((((rt0.c0))==((-667601033))))))AND(LIKELIHOOD(NULL, (vt1.c0 IN (rt0.c2)))))) ORDER BY ((CAST(rt0.c3 AS TEXT))>>(NULL)), ((rt0.c3)AND(rt0.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (CAST(CAST(vt1.c0 AS BLOB) AS TEXT)) ORDER BY ((CAST(rt0.c3 AS TEXT))>>(NULL)), ((rt0.c3)AND(rt0.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 0X2;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((((rt0.c0)&('XVQᄾ'))) IS FALSE)) ORDER BY UPPER(DISTINCT CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c1 END) DESC  NULLS FIRST, (- (((rt0.c3)-('0.8537939938741533')))) DESC, CASE WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c2 END COLLATE NOCASE ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((((rt0.c0)&('XVQᄾ'))) IS FALSE))AND((((rt0.c1) ISNULL) IN ())))) ORDER BY ((vt1.c0 COLLATE BINARY) NOT NULL), (((0Xffffffffdb0f4946 IN (rt0.c3))) BETWEEN (CASE WHEN rt0.c1 THEN vt1.c0 END) AND (((rt0.c1) NOT NULL))) ASC LIMIT 0x2;
SELECT ALL * FROM rt0 WHERE ((((+ (0.3448536713897056)))IS(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0)))));
SELECT DISTINCT * FROM rt0 WHERE ((((+ (0.3448536713897056)))IS(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0))))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((~ ((NOT (rt0.c2)))));
SELECT ALL * FROM rt0 WHERE ((((+ (0.3448536713897056)))IS(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0)))));
SELECT DISTINCT * FROM rt0 WHERE ((((+ (0.3448536713897056)))IS(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0))))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((~ ((NOT (rt0.c2)))));
SELECT * FROM vt1 WHERE ((('99367454')/(((vt1.c0) NOTNULL))));
SELECT * FROM vt1 WHERE ((('99367454')/(((vt1.c0) NOTNULL)))) INTERSECT SELECT * FROM vt1 WHERE (x'ccf745');
SELECT * FROM vt1 WHERE ((('99367454')/(((vt1.c0) NOTNULL))));
SELECT * FROM vt1 WHERE ((('99367454')/(((vt1.c0) NOTNULL)))) INTERSECT SELECT * FROM vt1 WHERE (x'ccf745');
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (((((-2108855611) BETWEEN (rt0.c2) AND (rt0.c1))) IS FALSE)) ORDER BY (NOT (RTRIM('-720149343'))) DESC  NULLS LAST;
SELECT MIN(rt0.c1) FROM rt0 WHERE (((((-2108855611) BETWEEN (rt0.c2) AND (rt0.c1))) IS FALSE)) ORDER BY (NOT (RTRIM('-720149343'))) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0 WHERE (((rt0.c2) IS FALSE) COLLATE RTRIM);
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((rt0.c2) IS FALSE) COLLATE RTRIM) ORDER BY ((rt0.c3)!=(((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c0)))) DESC  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE (CASE WHEN rt0.c3 COLLATE BINARY THEN ((rt0.c0) NOTNULL) END);
SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE (((CASE WHEN rt0.c3 COLLATE BINARY THEN ((rt0.c0) NOTNULL) END)AND(((((((((((((rt0.c3)AND('')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) ISNULL)))) LIMIT 2 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE (((rt0.c0)>((rt0.c2 IN (rt0.c3))))) LIMIT 0X2;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON NULL WHERE (MIN(CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 END, CAST(rt0.c1 AS TEXT))) ORDER BY (((vt1.c0)>=(rt0.c3)) IN ())  NULLS LAST;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON NULL WHERE (((MIN(CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 END, CAST(rt0.c1 AS TEXT)))AND(((rt0.c2 COLLATE NOCASE) IS TRUE)))) ORDER BY TRIM(DISTINCT CASE WHEN rt0.c0 THEN rt0.c3 END, (~ (rt0.c2))) DESC;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON NULL WHERE (MIN(CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 END, CAST(rt0.c1 AS TEXT))) ORDER BY (((vt1.c0)>=(rt0.c3)) IN ())  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((x''))>=((((rt0.c2) BETWEEN ('') AND (rt0.c0)))))) ORDER BY ((json_object('', rt0.c1, rt0.c3)) ISNULL)  NULLS FIRST, ((((rt0.c1)LIKE(vt1.c0)))==(MIN(rt0.c1, rt0.c3))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((x''))>((((rt0.c2) BETWEEN ('') AND (rt0.c0))))))AND(CASE WHEN LOWER(DISTINCT rt0.c2) THEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c1)) END))) ORDER BY NULL DESC LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE ((((x''))>=((((rt0.c2) BETWEEN ('') AND (rt0.c0)))))) ORDER BY ((json_object('', rt0.c1, rt0.c3)) ISNULL)  NULLS FIRST, ((((rt0.c1)LIKE(vt1.c0)))==(MIN(rt0.c1, rt0.c3))) ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((((((((((((((vt1.c0)>>(vt1.c0)))AND(((vt1.c0) IS FALSE))))OR(0.404592676535915)))AND(vt1.c0 COLLATE RTRIM)))AND(((vt1.c0) BETWEEN (0.44038743620825993) AND (vt1.c0)))))AND(((((vt1.c0)AND(vt1.c0)))OR(-1527979861)))))OR(((vt1.c0)IS NOT(vt1.c0))))) ORDER BY x''  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((((((((((((vt1.c0)>>(vt1.c0)))AND(((vt1.c0) IS FALSE))))OR(0.404592676535915)))AND(vt1.c0 COLLATE RTRIM)))AND(((vt1.c0) BETWEEN (0.44038743620825993) AND (vt1.c0)))))AND(((((vt1.c0)AND(vt1.c0)))OR(0Xffffffffa4ece0ab)))))OR(((vt1.c0)IS NOT(vt1.c0))))) ORDER BY x''  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS BLOB)) NOT BETWEEN (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(NULL))) AND (CAST(vt1.c0 AS NUMERIC)))) ORDER BY x''  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((((((((((((vt1.c0)>>(vt1.c0)))AND(((vt1.c0) IS FALSE))))OR(0.404592676535915)))AND(vt1.c0 COLLATE RTRIM)))AND(((vt1.c0) BETWEEN (0.44038743620825993) AND (vt1.c0)))))AND(((((vt1.c0)AND(vt1.c0)))OR(-1527979861)))))OR(((vt1.c0)IS NOT(vt1.c0))))) ORDER BY x''  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((((((((((((vt1.c0)>>(vt1.c0)))AND(((vt1.c0) IS FALSE))))OR(0.404592676535915)))AND(vt1.c0 COLLATE RTRIM)))AND(((vt1.c0) BETWEEN (0.44038743620825993) AND (vt1.c0)))))AND(((((vt1.c0)AND(vt1.c0)))OR(0Xffffffffa4ece0ab)))))OR(((vt1.c0)IS NOT(vt1.c0))))) ORDER BY x''  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS BLOB)) NOT BETWEEN (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(NULL))) AND (CAST(vt1.c0 AS NUMERIC)))) ORDER BY x''  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (CAST(((vt1.c0)>=(rt0.c3)) AS BLOB)) ORDER BY (((CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 ELSE vt1.c0 END, rt0.c3 COLLATE RTRIM, 0.4162970666403598))==((((((((rt0.c0)AND(rt0.c0)))OR(rt0.c2)))AND(rt0.c3)), CASE WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c3 END, (rt0.c2 IN ())))) DESC, ((((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(CAST(vt1.c0 AS NUMERIC))))OR(COALESCE(DISTINCT rt0.c0, rt0.c2, rt0.c3, rt0.c1, rt0.c2)))  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(((vt1.c0)>(rt0.c3)) AS BLOB)) ORDER BY ((rt0.c0 COLLATE RTRIM) BETWEEN (rt0.c2 COLLATE RTRIM) AND (''))  NULLS LAST, (((((((((((rt0.c1, '-711372649', rt0.c0)) NOT BETWEEN ((x'e0', rt0.c2, rt0.c2)) AND ((rt0.c1, rt0.c0, rt0.c1))))AND(NULL COLLATE BINARY)))AND((rt0.c3 IN (vt1.c0)))))AND((('t 
-g~b') ISNULL))))OR(((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c2))))  NULLS LAST, (NOT (4.41814537E8)) ASC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (CAST(((vt1.c0)>=(rt0.c3)) AS BLOB)) ORDER BY (((CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 ELSE vt1.c0 END, rt0.c3 COLLATE RTRIM, 0.4162970666403598))==((((((((rt0.c0)AND(rt0.c0)))OR(rt0.c2)))AND(rt0.c3)), CASE WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c3 END, (rt0.c2 IN ())))) DESC, ((((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(CAST(vt1.c0 AS NUMERIC))))OR(COALESCE(DISTINCT rt0.c0, rt0.c2, rt0.c3, rt0.c1, rt0.c2)))  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(((vt1.c0)>(rt0.c3)) AS BLOB)) ORDER BY ((rt0.c0 COLLATE RTRIM) BETWEEN (rt0.c2 COLLATE RTRIM) AND (''))  NULLS LAST, (((((((((((rt0.c1, '-711372649', rt0.c0)) NOT BETWEEN ((x'e0', rt0.c2, rt0.c2)) AND ((rt0.c1, rt0.c0, rt0.c1))))AND(NULL COLLATE BINARY)))AND((rt0.c3 IN (vt1.c0)))))AND((('t 
-g~b') ISNULL))))OR(((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c2))))  NULLS LAST, (NOT (4.41814537E8)) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) BETWEEN (vt1.c0) AND (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))) ORDER BY (((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))>=(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) BETWEEN (vt1.c0) AND (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))) ORDER BY (((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))>=(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((vt1.c0 IN (vt1.c0))) ORDER BY (((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))>=(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) BETWEEN (vt1.c0) AND (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))) ORDER BY (((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))>=(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) BETWEEN (vt1.c0) AND (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))) ORDER BY (((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))>=(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((vt1.c0 IN (vt1.c0))) ORDER BY (((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))>=(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT * FROM vt1 WHERE ((+ (((vt1.c0)*(vt1.c0))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))+(vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((+ (((vt1.c0)*(vt1.c0))))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((HEX(vt1.c0), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0)) AND ((((vt1.c0)OR(vt1.c0)), ((vt1.c0) IS TRUE), ((vt1.c0) ISNULL)))) INTERSECT SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((HEX(vt1.c0), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0)) AND ((((vt1.c0)OR(vt1.c0)), ((vt1.c0) IS TRUE), ((vt1.c0) ISNULL))));
SELECT * FROM vt1 WHERE ((+ (((vt1.c0)*(vt1.c0))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))+(vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((+ (((vt1.c0)*(vt1.c0))))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((HEX(vt1.c0), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0)) AND ((((vt1.c0)OR(vt1.c0)), ((vt1.c0) IS TRUE), ((vt1.c0) ISNULL)))) INTERSECT SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((HEX(vt1.c0), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0)) AND ((((vt1.c0)OR(vt1.c0)), ((vt1.c0) IS TRUE), ((vt1.c0) ISNULL))));
SELECT COUNT(*) FROM rt0 WHERE (((((((CAST(rt0.c1 AS NUMERIC))AND(CAST(rt0.c2 AS NUMERIC))))AND(rt0.c2 COLLATE RTRIM)))OR(rt0.c1 COLLATE BINARY))) ORDER BY ((rt0.c1)>>(rt0.c3)) COLLATE RTRIM;
SELECT COUNT(*) FROM rt0 WHERE (((((((CAST(rt0.c1 AS NUMERIC))AND(CAST(rt0.c2 AS NUMERIC))))AND(rt0.c2 COLLATE RTRIM)))OR(rt0.c1 COLLATE BINARY))) ORDER BY ((((NULL)AND((- (x'')))))AND(CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END)) ASC  NULLS FIRST, (rt0.c0 COLLATE NOCASE IN (((rt0.c1)IS(rt0.c3))))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((- (((((rt0.c1)OR('0.46812638111186833')))OR(rt0.c0))))) ORDER BY CASE WHEN CAST(NULL AS NUMERIC) THEN SQLITE_VERSION() END ASC  NULLS LAST, ((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c2))) BETWEEN (CASE vt1.c0  WHEN x'93' THEN rt0.c2 ELSE vt1.c0 END) AND (((rt0.c1)>(rt0.c3)))) DESC;
SELECT * FROM rt0, vt1 WHERE ((((- (((((rt0.c1)OR('0.46812638111186833')))OR(rt0.c0)))))AND(((CASE rt0.c1  WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END) NOT BETWEEN ((+ (rt0.c1))) AND ((rt0.c2 IN ())))))) ORDER BY (((NOT (rt0.c0))) BETWEEN ((rt0.c0 IN (vt1.c0))) AND (((rt0.c1)>(rt0.c3)))) DESC, (rt0.c0 IN (rt0.c2, rt0.c1, rt0.c0)) COLLATE RTRIM DESC INTERSECT SELECT * FROM rt0, vt1 WHERE ((+ (vt1.c0))) ORDER BY (((NOT (rt0.c0))) BETWEEN ((rt0.c0 IN (vt1.c0))) AND (((rt0.c1)>(rt0.c3)))) DESC, (rt0.c0 IN (rt0.c2, rt0.c1, rt0.c0)) COLLATE RTRIM DESC;
SELECT * FROM rt0, vt1 WHERE ((- (((((rt0.c1)OR('0.46812638111186833')))OR(rt0.c0))))) ORDER BY CASE WHEN CAST(NULL AS NUMERIC) THEN SQLITE_VERSION() END ASC  NULLS LAST, ((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c2))) BETWEEN (CASE vt1.c0  WHEN x'93' THEN rt0.c2 ELSE vt1.c0 END) AND (((rt0.c1)>(rt0.c3)))) DESC;
SELECT * FROM rt0, vt1 WHERE ((((- (((((rt0.c1)OR('0.46812638111186833')))OR(rt0.c0)))))AND(((CASE rt0.c1  WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END) NOT BETWEEN ((+ (rt0.c1))) AND ((rt0.c2 IN ())))))) ORDER BY (((NOT (rt0.c0))) BETWEEN ((rt0.c0 IN (vt1.c0))) AND (((rt0.c1)>(rt0.c3)))) DESC, (rt0.c0 IN (rt0.c2, rt0.c1, rt0.c0)) COLLATE RTRIM DESC INTERSECT SELECT * FROM rt0, vt1 WHERE ((+ (vt1.c0))) ORDER BY (((NOT (rt0.c0))) BETWEEN ((rt0.c0 IN (vt1.c0))) AND (((rt0.c1)>(rt0.c3)))) DESC, (rt0.c0 IN (rt0.c2, rt0.c1, rt0.c0)) COLLATE RTRIM DESC;
SELECT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (vt1.c0 COLLATE NOCASE) ORDER BY ((((rt0.c2)/(NULL)))/(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)))) DESC, ((CAST(rt0.c1 AS REAL)) IS TRUE) ASC, ((((rt0.c2)LIKE(vt1.c0))) NOT NULL);
SELECT ALL COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((vt1.c0 COLLATE NOCASE)AND(INSTR((- (rt0.c2)), ((rt0.c2)<(rt0.c1)))))) ORDER BY ((((rt0.c2)/(NULL)))/(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)))) DESC, ((CAST(rt0.c1 AS REAL)) IS TRUE) ASC, ((((rt0.c2)LIKE(vt1.c0))) NOT NULL) INTERSECT SELECT ALL COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (0.568180219787997) ORDER BY ((((rt0.c2)/(NULL)))/(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)))) DESC, ((CAST(rt0.c1 AS REAL)) IS TRUE) ASC, ((((rt0.c2)LIKE(vt1.c0))) NOT NULL);
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE ((((((9.9367454E7, rt0.c0, NULL, 0.5681213329515241)) BETWEEN ((rt0.c2, rt0.c2, rt0.c2, rt0.c3)) AND ((0.06177358570364566, rt0.c1, rt0.c2, rt0.c2))))>((((rt0.c1, rt0.c1, rt0.c3))>((rt0.c3, rt0.c3, 0.8297077789913208)))))) ORDER BY (((rt0.c1 IN (rt0.c3)))>(rt0.c2))  NULLS FIRST, (((((((((((rt0.c3)AND(rt0.c1)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c1)), 1.304629726E9, (((rt0.c1, rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c0)) AND ((rt0.c1, NULL, rt0.c3)))))!=((rt0.c1, ((((((((rt0.c2)AND(rt0.c2)))AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c0)), rt0.c2 COLLATE RTRIM))) DESC  NULLS LAST, (((rt0.c1 IN ())) IS FALSE) DESC;
SELECT MIN(rt0.c0) FROM rt0 WHERE ((((((9.9367454E7, rt0.c0, NULL, 0.5681213329515241)) BETWEEN ((rt0.c2, rt0.c2, rt0.c2, rt0.c3)) AND ((0.06177358570364566, rt0.c1, rt0.c2, rt0.c2))))>((((rt0.c1, rt0.c1, rt0.c3))>((rt0.c3, rt0.c3, 0.8297077789913208)))))) ORDER BY (~ (RTRIM(rt0.c1)))  NULLS LAST;
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE ((((- (rt0.c2))) IS FALSE));
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE ((((- (rt0.c2))) IS FALSE)) LIMIT 2;
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (NULL);
SELECT DISTINCT MIN(rt0.c0) FROM rt0, vt1 WHERE (((NULL)AND((~ ((((vt1.c0, rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c0, rt0.c1, vt1.c0)) AND ((rt0.c3, rt0.c0, rt0.c3)))))))) ORDER BY 'j&nO~>寽', ((((rt0.c0)%(rt0.c0))) BETWEEN (((rt0.c3)GLOB(vt1.c0))) AND (vt1.c0)) ASC, ((x'e3')<<(rt0.c3)) COLLATE BINARY DESC  NULLS FIRST, (rt0.c3 IN (rt0.c0)) COLLATE NOCASE DESC  NULLS FIRST;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON DATE(rt0.c2, rt0.c1, rt0.c3) COLLATE BINARY WHERE ((((rt0.c2)>(rt0.c1)) IN ())) ORDER BY rt0.c1 DESC, (((rt0.c3, ((rt0.c3) IS FALSE)))!=((((((-875007003)OR(rt0.c1)))OR(rt0.c3)), ((vt1.c0)*(vt1.c0))))) ASC;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON DATE(rt0.c2, rt0.c1, rt0.c3) COLLATE BINARY WHERE ((((((rt0.c2)>(rt0.c1)) IN ()))AND(NULL))) ORDER BY rt0.c1 DESC, (((rt0.c3, ((rt0.c3) IS FALSE)))!=((((((0Xffffffffcbd873e5)OR(rt0.c1)))OR(rt0.c3)), ((vt1.c0)*(vt1.c0))))) ASC LIMIT 0;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON DATE(rt0.c2, rt0.c1, rt0.c3) COLLATE BINARY WHERE ((((rt0.c2)>(rt0.c1)) IN ())) ORDER BY rt0.c1 DESC, (((rt0.c3, ((rt0.c3) IS FALSE)))!=((((((-875007003)OR(rt0.c1)))OR(rt0.c3)), ((vt1.c0)*(vt1.c0))))) ASC;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON DATE(rt0.c2, rt0.c1, rt0.c3) COLLATE BINARY WHERE ((((((rt0.c2)>(rt0.c1)) IN ()))AND(NULL))) ORDER BY rt0.c1 DESC, (((rt0.c3, ((rt0.c3) IS FALSE)))!=((((((0Xffffffffcbd873e5)OR(rt0.c1)))OR(rt0.c3)), ((vt1.c0)*(vt1.c0))))) ASC LIMIT 0;
SELECT COUNT(*) FROM rt0, vt1 WHERE (((((vt1.c0)>(rt0.c3))) IS FALSE));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((((((vt1.c0)>(rt0.c3))) IS FALSE))AND(rt0.c3))) ORDER BY ((((rt0.c1)GLOB('-61664571'))) BETWEEN (rt0.c1 COLLATE NOCASE) AND (rt0.c2 COLLATE BINARY)) INTERSECT SELECT COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c1)-(rt0.c3)) IN ())) ORDER BY ((((rt0.c1)GLOB('-61664571'))) BETWEEN (rt0.c1 COLLATE NOCASE) AND (rt0.c2 COLLATE BINARY));
SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOTNULL))|(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY ('982536061' IN ())  NULLS LAST, CAST(vt1.c0 AS TEXT) COLLATE NOCASE ASC;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0) NOTNULL))|(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((('') ISNULL) IN (CAST(vt1.c0 AS REAL)))))) ORDER BY ('982536061' IN ())  NULLS LAST, CAST(vt1.c0 AS TEXT) COLLATE NOCASE ASC INTERSECT SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0))) BETWEEN (((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) AND (((vt1.c0)>(vt1.c0))))) ORDER BY ('982536061' IN ())  NULLS LAST, CAST(vt1.c0 AS TEXT) COLLATE NOCASE ASC;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOTNULL))|(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY ('982536061' IN ())  NULLS LAST, CAST(vt1.c0 AS TEXT) COLLATE NOCASE ASC;
SELECT ALL * FROM vt1, rt0 WHERE (((((rt0.c2) NOT NULL))IS NOT(((rt0.c3) IS FALSE))));
SELECT * FROM vt1, rt0 WHERE (((((rt0.c2) NOT NULL))IS NOT(((rt0.c3) IS FALSE))));
SELECT ALL * FROM vt1, rt0 WHERE (((((rt0.c2) NOT NULL))IS NOT(((rt0.c3) IS FALSE))));
SELECT * FROM vt1, rt0 WHERE (((((rt0.c2) NOT NULL))IS NOT(((rt0.c3) IS FALSE))));
SELECT ALL * FROM vt1 WHERE (((vt1.c0) NOT BETWEEN ((((vt1.c0))>((vt1.c0)))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN ((((vt1.c0))<>((vt1.c0)))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((((CAST(vt1.c0 AS TEXT))OR(vt1.c0 COLLATE RTRIM)))OR(DATETIME(vt1.c0, vt1.c0, vt1.c0, vt1.c0))))AND(CASE WHEN vt1.c0 THEN vt1.c0 END))))) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((vt1.c0) NOT BETWEEN ((((vt1.c0))>((vt1.c0)))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN ((((vt1.c0))<>((vt1.c0)))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((((CAST(vt1.c0 AS TEXT))OR(vt1.c0 COLLATE RTRIM)))OR(DATETIME(vt1.c0, vt1.c0, vt1.c0, vt1.c0))))AND(CASE WHEN vt1.c0 THEN vt1.c0 END))))) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN '596915156' THEN vt1.c0 ELSE vt1.c0 END) NOT BETWEEN (vt1.c0 COLLATE NOCASE) AND (CASE WHEN vt1.c0 THEN 0.46938949593902846 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE vt1.c0 END)));
SELECT * FROM vt1 WHERE (((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN '596915156' THEN vt1.c0 ELSE vt1.c0 END) NOT BETWEEN (vt1.c0 COLLATE NOCASE) AND (CASE WHEN vt1.c0 THEN 0.46938949593902846 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE vt1.c0 END)))AND(vt1.c0))) ORDER BY (((((vt1.c0)IS NOT(vt1.c0)), CAST(vt1.c0 AS BLOB), 0.7698182525923454, vt1.c0))>=((((NULL) BETWEEN ('-1834146775') AND (vt1.c0)), ((((vt1.c0)AND('-732813397')))AND(vt1.c0)), ((vt1.c0)GLOB(vt1.c0)), json_type(vt1.c0)))) ASC, ((x'6b23')>>(((vt1.c0) NOTNULL))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN '596915156' THEN vt1.c0 ELSE vt1.c0 END) NOT BETWEEN (vt1.c0 COLLATE NOCASE) AND (CASE WHEN vt1.c0 THEN 0.46938949593902846 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE vt1.c0 END)));
SELECT * FROM vt1 WHERE (((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN '596915156' THEN vt1.c0 ELSE vt1.c0 END) NOT BETWEEN (vt1.c0 COLLATE NOCASE) AND (CASE WHEN vt1.c0 THEN 0.46938949593902846 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE vt1.c0 END)))AND(vt1.c0))) ORDER BY (((((vt1.c0)IS NOT(vt1.c0)), CAST(vt1.c0 AS BLOB), 0.7698182525923454, vt1.c0))>=((((NULL) BETWEEN ('-1834146775') AND (vt1.c0)), ((((vt1.c0)AND('-732813397')))AND(vt1.c0)), ((vt1.c0)GLOB(vt1.c0)), json_type(vt1.c0)))) ASC, ((x'6b23')>>(((vt1.c0) NOTNULL))) LIMIT 1;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (NULL) ORDER BY ((((rt0.c2) NOT NULL))GLOB(LIKE(NULL, rt0.c2, 'p'))) DESC  NULLS LAST;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (NULL) ORDER BY (NOT (((rt0.c3)LIKE(rt0.c1))))  NULLS FIRST, rt0.c3 ASC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c2, vt1.c0, rt0.c1))<(('5%d.', rt0.c2, '?&.rUn(')))) BETWEEN (((rt0.c1)||(rt0.c3))) AND ((vt1.c0 IN (rt0.c1, vt1.c0))))) ORDER BY x''  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c2, vt1.c0, rt0.c1))<(('5%d.', rt0.c2, '?&.rUn(')))) BETWEEN (((rt0.c1)||(rt0.c3))) AND ((vt1.c0 IN (rt0.c1, vt1.c0))))) ORDER BY x''  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c2, vt1.c0, rt0.c1))<(('5%d.', rt0.c2, '?&.rUn(')))) BETWEEN (((rt0.c1)||(rt0.c3))) AND ((vt1.c0 IN (rt0.c1, vt1.c0))))) ORDER BY x''  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c2, vt1.c0, rt0.c1))<(('5%d.', rt0.c2, '?&.rUn(')))) BETWEEN (((rt0.c1)||(rt0.c3))) AND ((vt1.c0 IN (rt0.c1, vt1.c0))))) ORDER BY x''  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ('蒈RQ!hp-f') ORDER BY (((rt0.c3 IN ()))<(NULL)) ASC  NULLS FIRST, ((((rt0.c3) NOT BETWEEN (vt1.c0) AND (-214415456)))GLOB((+ (rt0.c2))))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((('蒈RQ!hp-f')AND((((rt0.c3) NOT NULL) IN (((rt0.c3)GLOB(rt0.c1))))))) ORDER BY CASE (rt0.c3 IN (rt0.c0, rt0.c1))  WHEN rt0.c1 THEN ((rt0.c0)>=(rt0.c1)) WHEN ((rt0.c3) NOTNULL) THEN ((vt1.c0) NOTNULL) ELSE ((vt1.c0) IS TRUE) END  NULLS LAST, (((rt0.c1) BETWEEN (rt0.c1) AND (vt1.c0)) IN (((((rt0.c1)AND(rt0.c1)))OR(rt0.c1)), ((vt1.c0)IS NOT(rt0.c2)))) DESC, ((((((vt1.c0)AND('-1752463336')))OR('(~{&wT'))) NOTNULL) ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((NOT ('464024925'))) ORDER BY CASE (rt0.c3 IN (rt0.c0, rt0.c1))  WHEN rt0.c1 THEN ((rt0.c0)>=(rt0.c1)) WHEN ((rt0.c3) NOTNULL) THEN ((vt1.c0) NOTNULL) ELSE ((vt1.c0) IS TRUE) END  NULLS LAST, (((rt0.c1) BETWEEN (rt0.c1) AND (vt1.c0)) IN (((((rt0.c1)AND(rt0.c1)))OR(rt0.c1)), ((vt1.c0)IS NOT(rt0.c2)))) DESC, ((((((vt1.c0)AND('-1752463336')))OR('(~{&wT'))) NOTNULL) ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE ('蒈RQ!hp-f') ORDER BY (((rt0.c3 IN ()))<(NULL)) ASC  NULLS FIRST, ((((rt0.c3) NOT BETWEEN (vt1.c0) AND (-214415456)))GLOB((+ (rt0.c2))))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((('蒈RQ!hp-f')AND((((rt0.c3) NOT NULL) IN (((rt0.c3)GLOB(rt0.c1))))))) ORDER BY CASE (rt0.c3 IN (rt0.c0, rt0.c1))  WHEN rt0.c1 THEN ((rt0.c0)>=(rt0.c1)) WHEN ((rt0.c3) NOTNULL) THEN ((vt1.c0) NOTNULL) ELSE ((vt1.c0) IS TRUE) END  NULLS LAST, (((rt0.c1) BETWEEN (rt0.c1) AND (vt1.c0)) IN (((((rt0.c1)AND(rt0.c1)))OR(rt0.c1)), ((vt1.c0)IS NOT(rt0.c2)))) DESC, ((((((vt1.c0)AND('-1752463336')))OR('(~{&wT'))) NOTNULL) ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((NOT ('464024925'))) ORDER BY CASE (rt0.c3 IN (rt0.c0, rt0.c1))  WHEN rt0.c1 THEN ((rt0.c0)>=(rt0.c1)) WHEN ((rt0.c3) NOTNULL) THEN ((vt1.c0) NOTNULL) ELSE ((vt1.c0) IS TRUE) END  NULLS LAST, (((rt0.c1) BETWEEN (rt0.c1) AND (vt1.c0)) IN (((((rt0.c1)AND(rt0.c1)))OR(rt0.c1)), ((vt1.c0)IS NOT(rt0.c2)))) DESC, ((((((vt1.c0)AND('-1752463336')))OR('(~{&wT'))) NOTNULL) ASC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM rt0, vt1 WHERE (LENGTH((- (rt0.c0)))) ORDER BY LIKELY((+ (rt0.c2))) DESC  NULLS LAST, CAST(rt0.c0 AS REAL) COLLATE NOCASE COLLATE RTRIM  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((LENGTH((- (rt0.c0))))AND(json_array(0.47571482131783827, rt0.c1 COLLATE NOCASE)))) ORDER BY LIKELY((+ (rt0.c2))) DESC  NULLS LAST, CAST(rt0.c0 AS REAL) COLLATE NOCASE COLLATE RTRIM  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE (LENGTH((- (rt0.c0)))) ORDER BY LIKELY((+ (rt0.c2))) DESC  NULLS LAST, CAST(rt0.c0 AS REAL) COLLATE NOCASE COLLATE RTRIM  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((LENGTH((- (rt0.c0))))AND(json_array(0.47571482131783827, rt0.c1 COLLATE NOCASE)))) ORDER BY LIKELY((+ (rt0.c2))) DESC  NULLS LAST, CAST(rt0.c0 AS REAL) COLLATE NOCASE COLLATE RTRIM  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (((rt0.c0)>>('0.7358545891830578')));
SELECT ALL * FROM vt1, rt0 WHERE (((((rt0.c0)>>('0.7358545891830578')))AND(0.7776727441395261))) LIMIT 2 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (('-494499788' IN ())) LIMIT 0x2;
SELECT * FROM vt1, rt0 WHERE (((rt0.c0)>>('0.7358545891830578')));
SELECT ALL * FROM vt1, rt0 WHERE (((((rt0.c0)>>('0.7358545891830578')))AND(0.7776727441395261))) LIMIT 2 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (('-494499788' IN ())) LIMIT 0x2;
SELECT ALL * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE BINARY) IS FALSE));
SELECT ALL * FROM rt0, vt1 NOT INDEXED WHERE (((((vt1.c0 COLLATE BINARY) IS FALSE))AND((((~ (rt0.c2))) NOT BETWEEN (((vt1.c0)=(rt0.c2))) AND (CAST(rt0.c2 AS BLOB)))))) ORDER BY CASE WHEN ((vt1.c0)LIKE(rt0.c2)) THEN ((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c1)) WHEN ((vt1.c0)|(rt0.c2)) THEN CAST(rt0.c0 AS REAL) ELSE ((rt0.c3) IS TRUE) END  NULLS FIRST, CAST(rt0.c1 AS TEXT);
SELECT ALL * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE BINARY) IS FALSE));
SELECT ALL * FROM rt0, vt1 NOT INDEXED WHERE (((((vt1.c0 COLLATE BINARY) IS FALSE))AND((((~ (rt0.c2))) NOT BETWEEN (((vt1.c0)=(rt0.c2))) AND (CAST(rt0.c2 AS BLOB)))))) ORDER BY CASE WHEN ((vt1.c0)LIKE(rt0.c2)) THEN ((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c1)) WHEN ((vt1.c0)|(rt0.c2)) THEN CAST(rt0.c0 AS REAL) ELSE ((rt0.c3) IS TRUE) END  NULLS FIRST, CAST(rt0.c1 AS TEXT);
SELECT ALL COUNT(*) FROM rt0 WHERE ((rt0.c1 COLLATE BINARY IN ()));
SELECT COUNT(*) FROM rt0 WHERE ((((rt0.c1 COLLATE BINARY IN ()))AND((((rt0.c1, rt0.c3, rt0.c0, rt0.c3)) BETWEEN ((((rt0.c2) IS FALSE), ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c0)), rt0.c3, rt0.c3 COLLATE NOCASE)) AND ((rt0.c1 COLLATE RTRIM, rt0.c2, (('-116899011')-(rt0.c2)), ((rt0.c3)AND(rt0.c2)))))))) ORDER BY ((CASE rt0.c1  WHEN rt0.c1 THEN x'5175' WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END)%(((rt0.c0)LIKE(rt0.c2)))) ASC LIMIT 0X2 INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE ('') ORDER BY ((CASE rt0.c1  WHEN rt0.c1 THEN x'5175' WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END)%(((rt0.c0)LIKE(rt0.c2)))) ASC LIMIT 0X2;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON CAST(CASE rt0.c3  WHEN x'e6' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 END AS TEXT) WHERE (LENGTH(((rt0.c3)<=(rt0.c3)))) ORDER BY ((((((((ROUND(x'5f47', rt0.c0))AND(rt0.c1 COLLATE RTRIM)))AND((x'0d' IN (rt0.c2)))))OR(rt0.c0)))AND(((rt0.c2) BETWEEN (NULL) AND (rt0.c3)))), (('953433735') NOT BETWEEN (0.7724843485442568) AND (0.19824373681737983)) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CAST(CASE rt0.c3  WHEN x'e6' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 END AS TEXT) WHERE (LENGTH(((rt0.c3)==(rt0.c3)))) ORDER BY ((((((((ROUND(x'5f47', rt0.c0))AND(rt0.c1 COLLATE RTRIM)))AND((x'0d' IN (rt0.c2)))))OR(rt0.c0)))AND(((rt0.c2) BETWEEN (NULL) AND (rt0.c3)))), (('953433735') NOT BETWEEN (0.7724843485442568) AND (0.19824373681737983)) COLLATE BINARY  NULLS LAST;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON CAST(CASE rt0.c3  WHEN x'e6' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 END AS TEXT) WHERE (LENGTH(((rt0.c3)<=(rt0.c3)))) ORDER BY ((((((((ROUND(x'5f47', rt0.c0))AND(rt0.c1 COLLATE RTRIM)))AND((x'0d' IN (rt0.c2)))))OR(rt0.c0)))AND(((rt0.c2) BETWEEN (NULL) AND (rt0.c3)))), (('953433735') NOT BETWEEN (0.7724843485442568) AND (0.19824373681737983)) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CAST(CASE rt0.c3  WHEN x'e6' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 END AS TEXT) WHERE (LENGTH(((rt0.c3)==(rt0.c3)))) ORDER BY ((((((((ROUND(x'5f47', rt0.c0))AND(rt0.c1 COLLATE RTRIM)))AND((x'0d' IN (rt0.c2)))))OR(rt0.c0)))AND(((rt0.c2) BETWEEN (NULL) AND (rt0.c3)))), (('953433735') NOT BETWEEN (0.7724843485442568) AND (0.19824373681737983)) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt1 WHERE ((((((((((~ (vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CASE WHEN x'' THEN x'' WHEN vt1.c0 THEN vt1.c0 ELSE x'd17b42' END)))AND((NOT (vt1.c0)))))AND(((vt1.c0) IS TRUE))));
SELECT ALL * FROM vt1 WHERE ((((((((((((~ (vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CASE WHEN x'' THEN x'' WHEN vt1.c0 THEN vt1.c0 ELSE x'd17b42' END)))AND((NOT (vt1.c0)))))AND(((vt1.c0) IS TRUE))))AND(vt1.c0))) ORDER BY HEX(DISTINCT (vt1.c0 IN (vt1.c0, vt1.c0))) DESC, LIKELIHOOD(DISTINCT ((vt1.c0) IS TRUE), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) DESC, ((+ ('gm')) IN ((~ (vt1.c0)))) DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE ((((((((((~ (vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CASE WHEN x'' THEN x'' WHEN vt1.c0 THEN vt1.c0 ELSE x'd17b42' END)))AND((NOT (vt1.c0)))))AND(((vt1.c0) IS TRUE))));
SELECT ALL * FROM vt1 WHERE ((((((((((((~ (vt1.c0)))OR((((vt1.c0))<((vt1.c0))))))OR(CASE WHEN x'' THEN x'' WHEN vt1.c0 THEN vt1.c0 ELSE x'd17b42' END)))AND((NOT (vt1.c0)))))AND(((vt1.c0) IS TRUE))))AND(vt1.c0))) ORDER BY HEX(DISTINCT (vt1.c0 IN (vt1.c0, vt1.c0))) DESC, LIKELIHOOD(DISTINCT ((vt1.c0) IS TRUE), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) DESC, ((+ ('gm')) IN ((~ (vt1.c0)))) DESC  NULLS LAST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (((rt0.c1 IN ()) IN ()));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c1 IN ()) IN ()))AND(((CAST(rt0.c1 AS NUMERIC)) BETWEEN ((rt0.c1 IN (rt0.c1))) AND (((vt1.c0) ISNULL)))))) ORDER BY ((((rt0.c3)-(NULL))) NOT BETWEEN (rt0.c3) AND (COALESCE(DISTINCT vt1.c0, rt0.c0, NULL, vt1.c0))), rt0.c1  NULLS LAST LIMIT 2;
SELECT * FROM rt0, vt1 WHERE (((rt0.c1 IN ()) IN ()));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c1 IN ()) IN ()))AND(((CAST(rt0.c1 AS NUMERIC)) BETWEEN ((rt0.c1 IN (rt0.c1))) AND (((vt1.c0) ISNULL)))))) ORDER BY ((((rt0.c3)-(NULL))) NOT BETWEEN (rt0.c3) AND (COALESCE(DISTINCT vt1.c0, rt0.c0, NULL, vt1.c0))), rt0.c1  NULLS LAST LIMIT 2;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (rt0.c1 COLLATE BINARY);
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 NOT INDEXED WHERE (rt0.c1 COLLATE BINARY) INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE ((rt0.c1 COLLATE RTRIM IN (((rt0.c3) NOT NULL))));
SELECT ALL * FROM vt1 WHERE (0x3ecc4444) ORDER BY (- (NULLIF(DISTINCT vt1.c0, vt1.c0)))  NULLS LAST;
SELECT * FROM vt1 WHERE (0x3ecc4444) ORDER BY (- (NULLIF(DISTINCT vt1.c0, vt1.c0)))  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1 WHERE (0x3ecc4444) ORDER BY (- (NULLIF(DISTINCT vt1.c0, vt1.c0)))  NULLS LAST;
SELECT * FROM vt1 WHERE (0x3ecc4444) ORDER BY (- (NULLIF(DISTINCT vt1.c0, vt1.c0)))  NULLS LAST LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (((((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN NULL THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c3 END)OR((rt0.c3 IN (vt1.c0)))))AND(rt0.c0)));
SELECT * FROM vt1, rt0 WHERE (((((((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN NULL THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c3 END)OR((rt0.c3 IN (vt1.c0)))))AND(rt0.c0)))AND((((((((('1877556264')AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c0))) NOT BETWEEN ('1523054234') AND ((((rt0.c3, rt0.c3, NULL))>((rt0.c0, vt1.c0, rt0.c3)))))))) LIMIT 0x3;
SELECT * FROM vt1, rt0 WHERE (((((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN NULL THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c3 END)OR((rt0.c3 IN (vt1.c0)))))AND(rt0.c0)));
SELECT * FROM vt1, rt0 WHERE (((((((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN NULL THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c3 END)OR((rt0.c3 IN (vt1.c0)))))AND(rt0.c0)))AND((((((((('1877556264')AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c0))) NOT BETWEEN ('1523054234') AND ((((rt0.c3, rt0.c3, NULL))>((rt0.c0, vt1.c0, rt0.c3)))))))) LIMIT 0x3;
SELECT COUNT(*) FROM rt0 WHERE (((((((rt0.c1)AND(rt0.c3)))AND(((rt0.c2)+(rt0.c2)))))OR((((rt0.c0)) BETWEEN ((0.9726148089364538)) AND ((rt0.c2))))));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((((((((rt0.c1)AND(rt0.c3)))AND(((rt0.c2)+(rt0.c2)))))OR((((rt0.c0)) BETWEEN ((0.9726148089364538)) AND ((rt0.c2))))))AND(((((((((((((((rt0.c3)LIKE(0.4536639414200365)))OR(((rt0.c1)OR(rt0.c0)))))OR(((rt0.c2)==(rt0.c3)))))OR((NOT (rt0.c1)))))OR(((rt0.c3) IS TRUE))))AND(((rt0.c0) NOT NULL))))AND(((rt0.c0) NOT NULL)))))) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((CASE rt0.c1  WHEN x'b62202' THEN rt0.c1 ELSE rt0.c1 END) NOTNULL)) LIMIT 2;
SELECT MAX(rt0.c0) FROM rt0, vt1 WHERE (rt0.c1) ORDER BY CASE WHEN ((vt1.c0)!=(rt0.c2)) THEN (rt0.c1 IN ()) ELSE ((rt0.c0) NOT NULL) END;
SELECT DISTINCT MAX(rt0.c0) FROM rt0, vt1 WHERE (rt0.c1) ORDER BY CASE WHEN ((vt1.c0)!=(rt0.c2)) THEN (rt0.c1 IN ()) ELSE ((rt0.c0) NOT NULL) END LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0, vt1 WHERE ((((rt0.c1 IN ())) IS TRUE)) ORDER BY CASE WHEN ((vt1.c0)<>(rt0.c2)) THEN (rt0.c1 IN ()) ELSE ((rt0.c0) NOT NULL) END LIMIT 2;
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE ((((rt0.c2 IN ('82635964')))>>(NULLIF(rt0.c1, vt1.c0))));
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((((rt0.c2 IN ('82635964')))>>(NULLIF(rt0.c1, vt1.c0))))AND(((((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c3))) BETWEEN (((rt0.c2)>(rt0.c0))) AND ((+ (rt0.c3))))))) LIMIT 0;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((((((((((rt0.c2 IN (rt0.c1, rt0.c2)))OR(((vt1.c0) NOT NULL))))AND(-2.051742299E9)))AND(((rt0.c0) NOTNULL))))OR(CASE rt0.c2  WHEN rt0.c0 THEN NULL ELSE rt0.c2 END))) ORDER BY CASE rt0.c1 COLLATE NOCASE  WHEN 0x786d6dd4 COLLATE RTRIM THEN rt0.c0 COLLATE RTRIM END  NULLS LAST, CAST(rt0.c0 AS BLOB), CASE WHEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN ((vt1.c0) ISNULL) WHEN ((rt0.c1)AND(rt0.c1)) THEN rt0.c0 COLLATE RTRIM ELSE ((vt1.c0) NOT BETWEEN ('-1329493880') AND (rt0.c2)) END;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((((((((((((rt0.c2 IN (rt0.c1, rt0.c2)))OR(((vt1.c0) NOT NULL))))AND(-2.051742299E9)))AND(((rt0.c0) NOTNULL))))OR(CASE rt0.c2  WHEN rt0.c0 THEN NULL ELSE rt0.c2 END)))AND(CASE WHEN CASE WHEN vt1.c0 THEN rt0.c3 ELSE '1504116959' END THEN ((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))OR(vt1.c0)))OR(rt0.c0)) WHEN json_array_length(rt0.c3) THEN (((vt1.c0, rt0.c1))<>((rt0.c3, rt0.c2))) WHEN (rt0.c0 IN ()) THEN (((rt0.c1, vt1.c0, rt0.c2))=((rt0.c1, rt0.c2, vt1.c0))) WHEN ((x'') BETWEEN (vt1.c0) AND (rt0.c1)) THEN rt0.c0 WHEN RTRIM(rt0.c3) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE vt1.c0 END ELSE ((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)) END))) ORDER BY CASE rt0.c1 COLLATE NOCASE  WHEN 0x786d6dd4 COLLATE RTRIM THEN rt0.c0 COLLATE RTRIM END  NULLS LAST, CAST(rt0.c0 AS BLOB), CASE WHEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN ((vt1.c0) ISNULL) WHEN ((rt0.c1)AND(rt0.c1)) THEN rt0.c0 COLLATE RTRIM ELSE ((vt1.c0) NOT BETWEEN ('-1329493880') AND (rt0.c2)) END LIMIT 0x3;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((((((((((rt0.c2 IN (rt0.c1, rt0.c2)))OR(((vt1.c0) NOT NULL))))AND(-2.051742299E9)))AND(((rt0.c0) NOTNULL))))OR(CASE rt0.c2  WHEN rt0.c0 THEN NULL ELSE rt0.c2 END))) ORDER BY CASE rt0.c1 COLLATE NOCASE  WHEN 0x786d6dd4 COLLATE RTRIM THEN rt0.c0 COLLATE RTRIM END  NULLS LAST, CAST(rt0.c0 AS BLOB), CASE WHEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN ((vt1.c0) ISNULL) WHEN ((rt0.c1)AND(rt0.c1)) THEN rt0.c0 COLLATE RTRIM ELSE ((vt1.c0) NOT BETWEEN ('-1329493880') AND (rt0.c2)) END;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((((((((((((rt0.c2 IN (rt0.c1, rt0.c2)))OR(((vt1.c0) NOT NULL))))AND(-2.051742299E9)))AND(((rt0.c0) NOTNULL))))OR(CASE rt0.c2  WHEN rt0.c0 THEN NULL ELSE rt0.c2 END)))AND(CASE WHEN CASE WHEN vt1.c0 THEN rt0.c3 ELSE '1504116959' END THEN ((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))OR(vt1.c0)))OR(rt0.c0)) WHEN json_array_length(rt0.c3) THEN (((vt1.c0, rt0.c1))<>((rt0.c3, rt0.c2))) WHEN (rt0.c0 IN ()) THEN (((rt0.c1, vt1.c0, rt0.c2))=((rt0.c1, rt0.c2, vt1.c0))) WHEN ((x'') BETWEEN (vt1.c0) AND (rt0.c1)) THEN rt0.c0 WHEN RTRIM(rt0.c3) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE vt1.c0 END ELSE ((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)) END))) ORDER BY CASE rt0.c1 COLLATE NOCASE  WHEN 0x786d6dd4 COLLATE RTRIM THEN rt0.c0 COLLATE RTRIM END  NULLS LAST, CAST(rt0.c0 AS BLOB), CASE WHEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN ((vt1.c0) ISNULL) WHEN ((rt0.c1)AND(rt0.c1)) THEN rt0.c0 COLLATE RTRIM ELSE ((vt1.c0) NOT BETWEEN ('-1329493880') AND (rt0.c2)) END LIMIT 0x3;
SELECT * FROM vt1, rt0 WHERE ((~ (rt0.c3))) ORDER BY rt0.c2 ASC  NULLS FIRST, (((((((((rt0.c3 IN (rt0.c1)))AND(rt0.c0)))OR((rt0.c1 IN ()))))OR(CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt1.c0 END)))AND(NULL)) DESC  NULLS FIRST, ((((rt0.c0)||(vt1.c0))) IS TRUE)  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((~ (rt0.c3))) ORDER BY rt0.c2 ASC  NULLS FIRST, (((((((((rt0.c3 IN (rt0.c1)))AND(rt0.c0)))OR((rt0.c1 IN ()))))OR(CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt1.c0 END)))AND(NULL)) DESC  NULLS FIRST, ((((rt0.c0)||(vt1.c0))) IS TRUE)  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ((~ (rt0.c3))) ORDER BY rt0.c2 ASC  NULLS FIRST, (((((((((rt0.c3 IN (rt0.c1)))AND(rt0.c0)))OR((rt0.c1 IN ()))))OR(CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt1.c0 END)))AND(NULL)) DESC  NULLS FIRST, ((((rt0.c0)||(vt1.c0))) IS TRUE)  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((~ (rt0.c3))) ORDER BY rt0.c2 ASC  NULLS FIRST, (((((((((rt0.c3 IN (rt0.c1)))AND(rt0.c0)))OR((rt0.c1 IN ()))))OR(CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt1.c0 END)))AND(NULL)) DESC  NULLS FIRST, ((((rt0.c0)||(vt1.c0))) IS TRUE)  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0)) IN ((rt0.c3 IN (rt0.c2)))));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0)) IN ((rt0.c3 IN (rt0.c2)))))AND((NOT ((((rt0.c0, rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c2)) AND ((rt0.c0, rt0.c2, rt0.c3)))))))) ORDER BY '-28317505';
SELECT ALL * FROM rt0 WHERE ((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0)) IN ((rt0.c3 IN (rt0.c2)))));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0)) IN ((rt0.c3 IN (rt0.c2)))))AND((NOT ((((rt0.c0, rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c2)) AND ((rt0.c0, rt0.c2, rt0.c3)))))))) ORDER BY '-28317505';
SELECT ALL COUNT(*) FROM vt1 WHERE (SQLITE_COMPILEOPTION_GET(0Xffffffffb5430d44)) ORDER BY (+ (((vt1.c0) NOT NULL)))  NULLS LAST, (SQLITE_COMPILEOPTION_USED(7.51361517E8) IN ()) ASC, (vt1.c0 IN (IFNULL(vt1.c0, vt1.c0)));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((SQLITE_COMPILEOPTION_GET(0Xffffffffb5430d44))AND(IFNULL(DISTINCT IFNULL(vt1.c0, vt1.c0), ((vt1.c0) BETWEEN (x'') AND (vt1.c0)))))) ORDER BY CAST(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) AS NUMERIC) LIMIT 0X0;
SELECT * FROM rt0 WHERE (((((rt0.c1)/(rt0.c3))) IS FALSE));
SELECT * FROM rt0 WHERE (((((((rt0.c1)/(rt0.c3))) IS FALSE))AND(((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c2)))AND(CAST(rt0.c2 AS INTEGER))))OR(((rt0.c2)||(rt0.c3))))))) INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1))) BETWEEN (((rt0.c0)/(rt0.c0))) AND (HEX(rt0.c0))));
SELECT * FROM rt0 WHERE (((((rt0.c1)/(rt0.c3))) IS FALSE));
SELECT * FROM rt0 WHERE (((((((rt0.c1)/(rt0.c3))) IS FALSE))AND(((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c2)))AND(CAST(rt0.c2 AS INTEGER))))OR(((rt0.c2)||(rt0.c3))))))) INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1))) BETWEEN (((rt0.c0)/(rt0.c0))) AND (HEX(rt0.c0))));
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE ((- ((rt0.c2 IN (vt1.c0, rt0.c3)))));
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((- ((rt0.c2 IN (vt1.c0, rt0.c3)))))AND((((((rt0.c3)LIKE(rt0.c1)), CAST(rt0.c3 AS REAL)))=(((~ (rt0.c3)), ((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c1)))))))) INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((+ ((rt0.c2 IN (-1623548794)))));
SELECT * FROM rt0, vt1 WHERE ((NOT ((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((vt1.c0, rt0.c1, NULL)) AND ((rt0.c3, rt0.c2, rt0.c2))))));
SELECT * FROM rt0, vt1 WHERE ((NOT ((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((vt1.c0, rt0.c1, NULL)) AND ((rt0.c3, rt0.c2, rt0.c2)))))) LIMIT 2 INTERSECT SELECT * FROM rt0, vt1 WHERE ((((rt0.c1)) BETWEEN ((0.5610584203708594)) AND (((((vt1.c0, NULL, rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c0, rt0.c2)) AND ((rt0.c2, vt1.c0, rt0.c1, rt0.c3))))))) LIMIT 2;
SELECT * FROM rt0, vt1 WHERE ((NOT ((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((vt1.c0, rt0.c1, NULL)) AND ((rt0.c3, rt0.c2, rt0.c2))))));
SELECT * FROM rt0, vt1 WHERE ((NOT ((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((vt1.c0, rt0.c1, NULL)) AND ((rt0.c3, rt0.c2, rt0.c2)))))) LIMIT 2 INTERSECT SELECT * FROM rt0, vt1 WHERE ((((rt0.c1)) BETWEEN ((0.5610584203708594)) AND (((((vt1.c0, NULL, rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c0, rt0.c2)) AND ((rt0.c2, vt1.c0, rt0.c1, rt0.c3))))))) LIMIT 2;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((NULL) IS FALSE));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((NULL) IS FALSE)) ORDER BY ((((vt1.c0)>=(vt1.c0)))GLOB((~ (vt1.c0))));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((((rt0.c1, rt0.c0))<((rt0.c3, rt0.c0))), CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 END, UPPER(DISTINCT rt0.c3)))<((rt0.c1, json_type(vt1.c0), ((((',')AND(rt0.c0)))OR(rt0.c0)))))) ORDER BY 0x17dd796a DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((((((rt0.c1, rt0.c0))<((rt0.c3, rt0.c0))), CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 END, UPPER(DISTINCT rt0.c3)))<((rt0.c1, json_type(vt1.c0), ((((',')AND(rt0.c0)))OR(rt0.c0))))))AND(TRIM(((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))) ORDER BY 0X17dd796a DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (rt0.c2) ORDER BY 400390506 DESC  NULLS FIRST LIMIT 0X0;
SELECT MAX(rt0.c2) FROM rt0 WHERE ((((((((rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c3, rt0.c3))))OR(CASE WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END)))AND((~ (NULL)))));
SELECT DISTINCT MAX(rt0.c2) FROM rt0 WHERE ((((((((((rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c3, rt0.c3))))OR(CASE WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END)))AND((~ (NULL)))))AND(((((rt0.c2)&(rt0.c3)))%(CASE WHEN 'Z/' THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c3 END))))) ORDER BY rt0.c2, CAST((~ (rt0.c1)) AS BLOB) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM rt0 WHERE ((((((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)), (rt0.c3 IN (rt0.c1))))>=(((rt0.c0 IN ()), (rt0.c2 IN (rt0.c0, rt0.c0)))))) ORDER BY rt0.c2, CAST((~ (rt0.c1)) AS BLOB) DESC  NULLS FIRST;
SELECT COUNT(*) FROM rt0 WHERE ((((((rt0.c0)AND(rt0.c3)))AND(rt0.c0)) IN ((rt0.c0 IN (rt0.c1)), ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0))))) ORDER BY '*BS)' DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0 WHERE ((((((rt0.c0)AND(rt0.c3)))AND(rt0.c0)) IN ((rt0.c0 IN (rt0.c1)), ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0))))) ORDER BY '*BS)' DESC  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM rt0 WHERE (SQLITE_VERSION()) ORDER BY NULL  NULLS FIRST, (((rt0.c3 IN ()))||(CAST(rt0.c2 AS TEXT)));
SELECT DISTINCT * FROM rt0 WHERE (((SQLITE_VERSION())AND(TRIM(DISTINCT ((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c3)), CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c3 END)))) ORDER BY NULL  NULLS FIRST, (((rt0.c3 IN ()))||(CAST(rt0.c2 AS TEXT))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE (SQLITE_VERSION()) ORDER BY NULL  NULLS FIRST, (((rt0.c3 IN ()))||(CAST(rt0.c2 AS TEXT)));
SELECT DISTINCT * FROM rt0 WHERE (((SQLITE_VERSION())AND(TRIM(DISTINCT ((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c3)), CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c3 END)))) ORDER BY NULL  NULLS FIRST, (((rt0.c3 IN ()))||(CAST(rt0.c2 AS TEXT))) LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (json_array_length(UNLIKELY(rt0.c1), ((((rt0.c2)AND(rt0.c1)))OR(rt0.c2)))) ORDER BY (((- (rt0.c0))) NOT BETWEEN (((rt0.c0)/(rt0.c2))) AND (((vt1.c0)<(rt0.c3)))) ASC;
SELECT ALL * FROM vt1, rt0 WHERE (((json_array_length(UNLIKELY(rt0.c1), ((((rt0.c2)AND(rt0.c1)))OR(rt0.c2))))AND(TYPEOF(DISTINCT (NOT (rt0.c3)))))) ORDER BY (((rt0.c3, rt0.c0)) BETWEEN (((- (rt0.c3)), ((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))) AND ((0.447155358187142, CASE WHEN x'5114' THEN rt0.c1 END)))  NULLS FIRST, (NOT ((rt0.c0 IN ())))  NULLS LAST INTERSECT SELECT * FROM vt1 NOT INDEXED, rt0 WHERE ((((((((rt0.c1)AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c2)) IN (rt0.c1))) ORDER BY (((rt0.c3, rt0.c0)) BETWEEN (((- (rt0.c3)), ((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))) AND ((0.447155358187142, CASE WHEN x'5114' THEN rt0.c1 END)))  NULLS FIRST, (NOT ((rt0.c0 IN ())))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (json_array_length(UNLIKELY(rt0.c1), ((((rt0.c2)AND(rt0.c1)))OR(rt0.c2)))) ORDER BY (((- (rt0.c0))) NOT BETWEEN (((rt0.c0)/(rt0.c2))) AND (((vt1.c0)<(rt0.c3)))) ASC;
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE ((((rt0.c2 IN (vt1.c0))) BETWEEN (NULL) AND (((((((((vt1.c0)OR(rt0.c1)))OR(vt1.c0)))AND(0.315848055336596)))OR(rt0.c2)))));
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE ((((((rt0.c2 IN (vt1.c0))) BETWEEN (NULL) AND (((((((((vt1.c0)OR(rt0.c1)))OR(vt1.c0)))AND(0.315848055336596)))OR(rt0.c2)))))AND((- ((rt0.c2 IN (vt1.c0, rt0.c2)))))));
SELECT * FROM rt0 WHERE ((((((rt0.c3)|(rt0.c1)), ((rt0.c1)+(rt0.c3)), (((rt0.c2, rt0.c0, rt0.c2))<=((rt0.c1, rt0.c3, rt0.c0)))))>((CAST(rt0.c2 AS NUMERIC), CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END, rt0.c2))));
SELECT DISTINCT * FROM rt0 WHERE ((((((((rt0.c3)|(rt0.c1)), ((rt0.c1)+(rt0.c3)), (((rt0.c2, rt0.c0, rt0.c2))==((rt0.c1, rt0.c3, rt0.c0)))))>((CAST(rt0.c2 AS NUMERIC), CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END, rt0.c2))))AND(((rt0.c2 IN (rt0.c0)) IN ()))));
SELECT * FROM rt0 WHERE ((((((rt0.c3)|(rt0.c1)), ((rt0.c1)+(rt0.c3)), (((rt0.c2, rt0.c0, rt0.c2))<=((rt0.c1, rt0.c3, rt0.c0)))))>((CAST(rt0.c2 AS NUMERIC), CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END, rt0.c2))));
SELECT DISTINCT * FROM rt0 WHERE ((((((((rt0.c3)|(rt0.c1)), ((rt0.c1)+(rt0.c3)), (((rt0.c2, rt0.c0, rt0.c2))==((rt0.c1, rt0.c3, rt0.c0)))))>((CAST(rt0.c2 AS NUMERIC), CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END, rt0.c2))))AND(((rt0.c2 IN (rt0.c0)) IN ()))));
SELECT ALL COUNT(*) FROM rt0 WHERE (((CASE WHEN NULL THEN x'' ELSE rt0.c1 END)GLOB(rt0.c2))) ORDER BY CASE ((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0))  WHEN ((rt0.c2) ISNULL) THEN SQLITE_VERSION() WHEN 0.7330398538921844 THEN (NOT (rt0.c3)) WHEN (((rt0.c2)) BETWEEN ((rt0.c3)) AND ((rt0.c1))) THEN CASE WHEN rt0.c0 THEN rt0.c3 ELSE 0.4479150686815925 END ELSE ((rt0.c2)*(rt0.c3)) END DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0 WHERE (((CASE WHEN NULL THEN x'' ELSE rt0.c1 END)GLOB(rt0.c2))) ORDER BY rt0.c2 ASC  NULLS LAST LIMIT 0;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((CASE WHEN rt0.c0 THEN rt0.c2 END) NOTNULL));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((CASE WHEN rt0.c0 THEN rt0.c2 END) NOTNULL)) LIMIT 0x1 INTERSECT SELECT COUNT(*) FROM vt1, rt0 WHERE ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)) IN (json_object(vt1.c0, rt0.c3)))) LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (rt0.c3 COLLATE RTRIM COLLATE BINARY COLLATE RTRIM);
SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c3 COLLATE RTRIM COLLATE BINARY COLLATE RTRIM) ORDER BY json(((((rt0.c1)AND(vt1.c0)))OR(rt0.c0))) DESC, (vt1.c0 IN ()) COLLATE NOCASE ASC LIMIT 0x1;
SELECT ALL * FROM vt1, rt0 WHERE (rt0.c3 COLLATE RTRIM COLLATE BINARY COLLATE RTRIM);
SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c3 COLLATE RTRIM COLLATE BINARY COLLATE RTRIM) ORDER BY json(((((rt0.c1)AND(vt1.c0)))OR(rt0.c0))) DESC, (vt1.c0 IN ()) COLLATE NOCASE ASC LIMIT 0x1;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((((((rt0.c3) ISNULL))OR(((rt0.c2) NOT NULL))))OR(((vt1.c0)|(rt0.c3)))))OR(0.6969516560723027)))OR(NULL)))OR((+ (rt0.c3))))) ORDER BY '襭' DESC  NULLS FIRST, ((rt0.c2)||(rt0.c0)) COLLATE NOCASE ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((((((rt0.c3) ISNULL))OR(((rt0.c2) NOT NULL))))OR(((vt1.c0)|(rt0.c3)))))OR(0.6969516560723027)))OR(NULL)))OR((+ (rt0.c3)))))AND(((CAST(vt1.c0 AS NUMERIC)) NOT BETWEEN (((vt1.c0) BETWEEN (NULL) AND (rt0.c1))) AND (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c3))))))) ORDER BY '襭' DESC  NULLS FIRST, ((rt0.c2)||(rt0.c0)) COLLATE NOCASE ASC INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (0X44d16f8a) ORDER BY '襭' DESC  NULLS FIRST, ((rt0.c2)||(rt0.c0)) COLLATE NOCASE ASC;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((((((rt0.c3) ISNULL))OR(((rt0.c2) NOT NULL))))OR(((vt1.c0)|(rt0.c3)))))OR(0.6969516560723027)))OR(NULL)))OR((+ (rt0.c3))))) ORDER BY '襭' DESC  NULLS FIRST, ((rt0.c2)||(rt0.c0)) COLLATE NOCASE ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((((((rt0.c3) ISNULL))OR(((rt0.c2) NOT NULL))))OR(((vt1.c0)|(rt0.c3)))))OR(0.6969516560723027)))OR(NULL)))OR((+ (rt0.c3)))))AND(((CAST(vt1.c0 AS NUMERIC)) NOT BETWEEN (((vt1.c0) BETWEEN (NULL) AND (rt0.c1))) AND (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c3))))))) ORDER BY '襭' DESC  NULLS FIRST, ((rt0.c2)||(rt0.c0)) COLLATE NOCASE ASC INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (0X44d16f8a) ORDER BY '襭' DESC  NULLS FIRST, ((rt0.c2)||(rt0.c0)) COLLATE NOCASE ASC;
SELECT ALL COUNT(*) FROM rt0 WHERE ((rt0.c1 IN (((((0xffffffff968934b4)OR(rt0.c1)))OR(rt0.c3)))));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((rt0.c1 IN (((((-1769392972)OR(rt0.c1)))OR(rt0.c3))))) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (json_patch(LOWER(rt0.c3), ((((rt0.c2)AND(rt0.c0)))AND(rt0.c3)))) LIMIT 1;
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((-722615761, ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c2)), (NOT (vt1.c0)), (rt0.c2 IN ()), 'jd)uQUx-'))<=((((rt0.c3) BETWEEN (rt0.c3) AND (vt1.c0)), ((rt0.c2)GLOB(rt0.c1)), (vt1.c0 IN (rt0.c0)), '223131609', ((rt0.c2)||(rt0.c2)))))) ORDER BY rt0.c3 COLLATE NOCASE ASC, (((vt1.c0)||(rt0.c3)) IN (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)), ((((((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(rt0.c0)))OR(vt1.c0))))  NULLS LAST;
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((-722615761, ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c2)), (NOT (vt1.c0)), (rt0.c2 IN ()), 'jd)uQUx-'))==((((rt0.c3) BETWEEN (rt0.c3) AND (vt1.c0)), ((rt0.c2)GLOB(rt0.c1)), (vt1.c0 IN (rt0.c0)), '223131609', ((rt0.c2)||(rt0.c2)))))) ORDER BY rt0.c3 COLLATE NOCASE ASC, (((vt1.c0)||(rt0.c3)) IN (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)), ((((((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(rt0.c0)))OR(vt1.c0))))  NULLS LAST LIMIT 0X3;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (LIKELY((((rt0.c3, rt0.c0, rt0.c1, vt1.c0, rt0.c0))=((rt0.c2, vt1.c0, vt1.c0, rt0.c1, rt0.c1))))) ORDER BY TRIM(DISTINCT rt0.c2 COLLATE RTRIM) DESC, ((((rt0.c0) BETWEEN (rt0.c3) AND (vt1.c0))) NOT NULL) DESC;
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (((LIKELY((((rt0.c3, rt0.c0, rt0.c1, vt1.c0, rt0.c0))=((rt0.c2, vt1.c0, vt1.c0, rt0.c1, rt0.c1)))))AND((vt1.c0 IN (vt1.c0, vt1.c0)) COLLATE RTRIM))) ORDER BY TRIM(DISTINCT rt0.c2 COLLATE RTRIM) DESC, ((((rt0.c0) BETWEEN (rt0.c3) AND (vt1.c0))) NOT NULL) DESC INTERSECT SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE ((((vt1.c0, rt0.c1, NULL)) BETWEEN ((rt0.c0, CAST(rt0.c0 AS TEXT), '-1484881467')) AND (((((rt0.c2)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c2))), ((rt0.c0)OR(rt0.c1)), CAST(vt1.c0 AS NUMERIC))))) ORDER BY TRIM(DISTINCT rt0.c2 COLLATE RTRIM) DESC, ((((rt0.c0) BETWEEN (rt0.c3) AND (vt1.c0))) NOT NULL) DESC;
SELECT * FROM rt0 WHERE ((('IjW')LIKE((rt0.c2 IN (rt0.c0)))));
SELECT * FROM rt0 WHERE ((('IjW')LIKE((rt0.c2 IN (rt0.c0))))) LIMIT 0X1 INTERSECT SELECT ALL * FROM rt0 WHERE (x'23') LIMIT 0X1;
SELECT * FROM rt0 WHERE ((('IjW')LIKE((rt0.c2 IN (rt0.c0)))));
SELECT * FROM rt0 WHERE ((('IjW')LIKE((rt0.c2 IN (rt0.c0))))) LIMIT 0X1 INTERSECT SELECT ALL * FROM rt0 WHERE (x'23') LIMIT 0X1;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c1) AND (x''))) BETWEEN (((rt0.c2) IS TRUE)) AND (CASE rt0.c0  WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN x'' END))) ORDER BY ((x'6e')%(NULLIF(rt0.c2, rt0.c0))) ASC  NULLS LAST, (CAST(vt1.c0 AS REAL) IN (((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c0)))) DESC  NULLS FIRST;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c1) AND (x''))) BETWEEN (((rt0.c2) IS TRUE)) AND (CASE rt0.c0  WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN x'' END))) ORDER BY (- (CAST(vt1.c0 AS REAL))) ASC  NULLS FIRST, HEX(DISTINCT rt0.c0) COLLATE NOCASE  NULLS LAST;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c1) AND (x''))) BETWEEN (((rt0.c2) IS TRUE)) AND (CASE rt0.c0  WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN x'' END))) ORDER BY ((x'6e')%(NULLIF(rt0.c2, rt0.c0))) ASC  NULLS LAST, (CAST(vt1.c0 AS REAL) IN (((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c0)))) DESC  NULLS FIRST;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c1) AND (x''))) BETWEEN (((rt0.c2) IS TRUE)) AND (CASE rt0.c0  WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN x'' END))) ORDER BY (- (CAST(vt1.c0 AS REAL))) ASC  NULLS FIRST, HEX(DISTINCT rt0.c0) COLLATE NOCASE  NULLS LAST;
SELECT MAX(rt0.c3) FROM vt1 CROSS JOIN rt0 ON (((rt0.c2)<=(x'd224')) IN (STRFTIME(vt1.c0, rt0.c2, rt0.c1))) WHERE (CASE vt1.c0  WHEN rt0.c0 THEN vt1.c0 WHEN 2.59252199E8 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 ELSE 0xffffffffed479a92 END COLLATE NOCASE);
SELECT MAX(rt0.c3) FROM vt1 CROSS JOIN rt0 ON (((rt0.c2)<=(x'd224')) IN (STRFTIME(vt1.c0, rt0.c2, rt0.c1))) WHERE (((CASE vt1.c0  WHEN rt0.c0 THEN vt1.c0 WHEN 2.59252199E8 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 ELSE 0Xffffffffed479a92 END COLLATE NOCASE)AND((((vt1.c0)) NOT BETWEEN ((((((rt0.c3)AND(rt0.c1)))OR(rt0.c2)))) AND (((+ (rt0.c1))))))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0, vt1.c0, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0))) IN ()));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0, vt1.c0, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0))) IN ()))AND(CAST(1.504116959E9 AS TEXT) COLLATE RTRIM))) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) ISNULL));
SELECT ALL * FROM rt0 NOT INDEXED, vt1 WHERE (-2.004012966E9) ORDER BY ((((rt0.c0, vt1.c0))>((rt0.c0, rt0.c3))) IN ())  NULLS LAST, CASE WHEN rt0.c2 COLLATE RTRIM THEN (((0.8341402900252932))=((rt0.c3))) WHEN rt0.c1 COLLATE RTRIM THEN rt0.c3 COLLATE BINARY END DESC, CAST(rt0.c0 COLLATE BINARY AS INTEGER), CASE vt1.c0 COLLATE NOCASE  WHEN json_remove(vt1.c0, rt0.c1) THEN ((rt0.c3)!=(rt0.c1)) WHEN (+ ('175258204')) THEN ((((((((rt0.c3)AND(rt0.c3)))OR(vt1.c0)))AND(rt0.c2)))AND(rt0.c2)) END DESC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (-2.004012966E9) ORDER BY (+ (953433735)) INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))OR((((rt0.c1)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))))AND(((rt0.c0)>=(rt0.c1)))))OR(((rt0.c1) ISNULL)))) ORDER BY (+ (953433735));
SELECT ALL * FROM rt0 NOT INDEXED, vt1 WHERE (-2.004012966E9) ORDER BY ((((rt0.c0, vt1.c0))>((rt0.c0, rt0.c3))) IN ())  NULLS LAST, CASE WHEN rt0.c2 COLLATE RTRIM THEN (((0.8341402900252932))=((rt0.c3))) WHEN rt0.c1 COLLATE RTRIM THEN rt0.c3 COLLATE BINARY END DESC, CAST(rt0.c0 COLLATE BINARY AS INTEGER), CASE vt1.c0 COLLATE NOCASE  WHEN json_remove(vt1.c0, rt0.c1) THEN ((rt0.c3)!=(rt0.c1)) WHEN (+ ('175258204')) THEN ((((((((rt0.c3)AND(rt0.c3)))OR(vt1.c0)))AND(rt0.c2)))AND(rt0.c2)) END DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE ('441814537');
SELECT ALL * FROM rt0 WHERE ('441814537') ORDER BY ((((rt0.c2)-(rt0.c2)))>=((rt0.c3 IN (rt0.c2)))) INTERSECT SELECT ALL * FROM rt0 WHERE ((((rt0.c1) IS TRUE) IN ())) ORDER BY ((((rt0.c2)-(rt0.c2)))>=((rt0.c3 IN (rt0.c2))));
SELECT * FROM rt0 WHERE ('441814537');
SELECT ALL * FROM rt0 WHERE ('441814537') ORDER BY ((((rt0.c2)-(rt0.c2)))>=((rt0.c3 IN (rt0.c2)))) INTERSECT SELECT ALL * FROM rt0 WHERE ((((rt0.c1) IS TRUE) IN ())) ORDER BY ((((rt0.c2)-(rt0.c2)))>=((rt0.c3 IN (rt0.c2))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN (('1e500')) AND ((((vt1.c0)+(vt1.c0)))))) ORDER BY (0x0 IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) DESC, ((((((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) NOT NULL), vt1.c0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN (('1e500')) AND ((((vt1.c0)+(vt1.c0)))))) ORDER BY ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(0xffffffff836fc364))) NOT NULL), rtreenode(DATE(vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0), '1111080148' COLLATE BINARY) LIMIT 0X3;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN (('1e500')) AND ((((vt1.c0)+(vt1.c0)))))) ORDER BY (0x0 IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) DESC, ((((((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) NOT NULL), vt1.c0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN (('1e500')) AND ((((vt1.c0)+(vt1.c0)))))) ORDER BY ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(0xffffffff836fc364))) NOT NULL), rtreenode(DATE(vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0), '1111080148' COLLATE BINARY) LIMIT 0X3;
SELECT * FROM rt0, vt1 WHERE (((((((rt0.c3)OR(rt0.c3)))OR(rt0.c0))) NOT BETWEEN (CAST(vt1.c0 AS BLOB)) AND ((((vt1.c0, vt1.c0)) BETWEEN ((rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c2))))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c3)OR(rt0.c3)))OR(rt0.c0))) NOT BETWEEN (CAST(vt1.c0 AS BLOB)) AND ((((vt1.c0, vt1.c0)) BETWEEN ((rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c2)))))) ORDER BY ((((((((((rt0.c3)OR(vt1.c0)))AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c0))) BETWEEN ((NOT (vt1.c0))) AND (((rt0.c0)<>(0.5001184216789452)))) ASC LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE (((((((rt0.c3)OR(rt0.c3)))OR(rt0.c0))) NOT BETWEEN (CAST(vt1.c0 AS BLOB)) AND ((((vt1.c0, vt1.c0)) BETWEEN ((rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c2))))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c3)OR(rt0.c3)))OR(rt0.c0))) NOT BETWEEN (CAST(vt1.c0 AS BLOB)) AND ((((vt1.c0, vt1.c0)) BETWEEN ((rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c2)))))) ORDER BY ((((((((((rt0.c3)OR(vt1.c0)))AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c0))) BETWEEN ((NOT (vt1.c0))) AND (((rt0.c0)<>(0.5001184216789452)))) ASC LIMIT 0x1;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON ((((vt1.c0)&(rt0.c3))) IS FALSE) WHERE (vt1.c0) ORDER BY (((vt1.c0)) BETWEEN ((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END)) AND ((rt0.c3))) ASC;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON ((((vt1.c0)&(rt0.c3))) IS FALSE) WHERE (vt1.c0) ORDER BY (((vt1.c0)) BETWEEN ((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END)) AND ((rt0.c3))) ASC LIMIT 0x4;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON ((((vt1.c0)&(rt0.c3))) IS FALSE) WHERE (vt1.c0) ORDER BY (((vt1.c0)) BETWEEN ((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END)) AND ((rt0.c3))) ASC;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON ((((vt1.c0)&(rt0.c3))) IS FALSE) WHERE (vt1.c0) ORDER BY (((vt1.c0)) BETWEEN ((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END)) AND ((rt0.c3))) ASC LIMIT 0x4;
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE ((((rt0.c0 IN (rt0.c2)))&(((((((rt0.c1)AND(rt0.c0)))AND(x'48')))OR(vt1.c0)))));
SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE ((((((rt0.c0 IN (rt0.c2)))&(((((((rt0.c1)AND(rt0.c0)))AND(x'48')))OR(vt1.c0)))))AND(rt0.c0))) ORDER BY (((rt0.c0 IN (rt0.c0, rt0.c1)))|((((rt0.c1, rt0.c3, rt0.c0)) BETWEEN ((0.6462437187601052, vt1.c0, NULL)) AND (('1?', rt0.c0, rt0.c2))))) DESC  NULLS FIRST LIMIT 0X6;
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE ((((+ (rt0.c1))) NOT BETWEEN (CASE WHEN rt0.c0 THEN rt0.c0 END) AND (0.8647737448442423))) ORDER BY (((rt0.c3 IN ())) NOTNULL) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE ((((((+ (rt0.c1))) NOT BETWEEN (CASE WHEN rt0.c0 THEN rt0.c0 END) AND (0.8647737448442423)))AND(((((((((NULL) BETWEEN (rt0.c1) AND (rt0.c2)))OR(TRIM(rt0.c2))))AND(LIKELIHOOD(rt0.c1, rt0.c2))))AND(rt0.c3 COLLATE RTRIM))))) ORDER BY (((rt0.c3 IN ())) NOTNULL) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE ((((((rt0.c2, rt0.c1, rt0.c1))>((rt0.c2, rt0.c2, rt0.c2)))) NOT BETWEEN (((vt1.c0)-(rt0.c0))) AND ((~ (NULL))))) ORDER BY (((rt0.c3 IN ())) NOTNULL) DESC  NULLS FIRST LIMIT 0;
SELECT COUNT(*) FROM rt0 INNER JOIN vt1 ON '1508769651' WHERE (CAST(CAST(rt0.c1 AS REAL) AS BLOB)) ORDER BY ((((((((((((((UNLIKELY(DISTINCT rt0.c1))AND((rt0.c3 IN ('tBe', rt0.c3)))))AND((NOT (rt0.c2)))))AND(((rt0.c2)*(rt0.c0)))))AND(vt1.c0)))AND(((rt0.c3)LIKE(rt0.c2)))))AND((((rt0.c3)) NOT BETWEEN ((1504116959)) AND (('I?첲>qI%'))))))OR(CAST(NULL AS BLOB))), CAST(((rt0.c1)==(vt1.c0)) AS REAL) DESC, -7.22615761E8  NULLS FIRST;
SELECT COUNT(*) FROM rt0 INNER JOIN vt1 ON '1508769651' WHERE (CAST(CAST(rt0.c1 AS REAL) AS BLOB)) ORDER BY vt1.c0  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM rt0 INNER JOIN vt1 ON '1508769651' WHERE (NULLIF(((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c1)), ((rt0.c3) IS FALSE))) ORDER BY vt1.c0  NULLS LAST;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (((rt0.c2) IS FALSE));
SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((rt0.c2) IS FALSE)) LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (CAST(vt1.c0 AS INTEGER) COLLATE RTRIM) LIMIT 0X1;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c3 END)AND(((((vt1.c0)AND(rt0.c0)))AND(rt0.c1)))))OR(0.08595274403988884)))OR(TRIM(DISTINCT vt1.c0))))OR(((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c3)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c3 END)AND(((((vt1.c0)AND(rt0.c0)))AND(rt0.c1)))))OR(0.08595274403988884)))OR(TRIM(DISTINCT vt1.c0))))OR(((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c3))))) ORDER BY ((rt0.c0) NOTNULL) COLLATE BINARY, rt0.c3, ((CAST(rt0.c3 AS NUMERIC))GLOB(((rt0.c3) IS FALSE)))  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((rt0.c1 IN ()) COLLATE RTRIM) ORDER BY ((rt0.c0) NOTNULL) COLLATE BINARY, rt0.c3, ((CAST(rt0.c3 AS NUMERIC))GLOB(((rt0.c3) IS FALSE)))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c3 END)AND(((((vt1.c0)AND(rt0.c0)))AND(rt0.c1)))))OR(0.08595274403988884)))OR(TRIM(DISTINCT vt1.c0))))OR(((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c3)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c3 END)AND(((((vt1.c0)AND(rt0.c0)))AND(rt0.c1)))))OR(0.08595274403988884)))OR(TRIM(DISTINCT vt1.c0))))OR(((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c3))))) ORDER BY ((rt0.c0) NOTNULL) COLLATE BINARY, rt0.c3, ((CAST(rt0.c3 AS NUMERIC))GLOB(((rt0.c3) IS FALSE)))  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((rt0.c1 IN ()) COLLATE RTRIM) ORDER BY ((rt0.c0) NOTNULL) COLLATE BINARY, rt0.c3, ((CAST(rt0.c3 AS NUMERIC))GLOB(((rt0.c3) IS FALSE)))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt1, rt0 WHERE (((rt0.c0 COLLATE NOCASE)AND(((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c0 COLLATE NOCASE)AND(((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY ((rt0.c2)AND((((vt1.c0))>(('709578335'))))), (((((rt0.c0)OR(rt0.c2)))OR(vt1.c0)) IN ()) LIMIT 0X0;
SELECT ALL * FROM vt1, rt0 WHERE (((rt0.c0 COLLATE NOCASE)AND(((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c0 COLLATE NOCASE)AND(((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY ((rt0.c2)AND((((vt1.c0))>(('709578335'))))), (((((rt0.c0)OR(rt0.c2)))OR(vt1.c0)) IN ()) LIMIT 0X0;
SELECT * FROM vt1 WHERE (NULL) ORDER BY ((((((((vt1.c0) BETWEEN (vt1.c0) AND (NULL)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(0.1961427882346971)))))AND((vt1.c0 IN ()))), CASE WHEN ((vt1.c0)||('-1705485783')) THEN (vt1.c0 IN ()) END;
SELECT ALL * FROM vt1 WHERE (NULL) ORDER BY ((((((((vt1.c0) BETWEEN (vt1.c0) AND (NULL)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(0.1961427882346971)))))AND((vt1.c0 IN ()))), CASE WHEN ((vt1.c0)||('-1705485783')) THEN (vt1.c0 IN ()) END INTERSECT SELECT ALL * FROM vt1 WHERE (SQLITE_COMPILEOPTION_GET(vt1.c0)) ORDER BY ((((((((vt1.c0) BETWEEN (vt1.c0) AND (NULL)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(0.1961427882346971)))))AND((vt1.c0 IN ()))), CASE WHEN ((vt1.c0)||('-1705485783')) THEN (vt1.c0 IN ()) END;
SELECT * FROM vt1 WHERE (NULL) ORDER BY ((((((((vt1.c0) BETWEEN (vt1.c0) AND (NULL)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(0.1961427882346971)))))AND((vt1.c0 IN ()))), CASE WHEN ((vt1.c0)||('-1705485783')) THEN (vt1.c0 IN ()) END;
SELECT * FROM rt0, vt1 WHERE (CASE WHEN (+ (rt0.c2)) THEN ((0.15158022463354637) NOT NULL) END) ORDER BY (((vt1.c0)) NOT BETWEEN ((rt0.c3)) AND ((vt1.c0))) COLLATE NOCASE ASC, ((rt0.c1) NOTNULL) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE WHEN (+ (rt0.c2)) THEN ((0.15158022463354637) NOT NULL) END)AND(((CAST(rt0.c2 AS BLOB)) IS FALSE)))) ORDER BY (- (((rt0.c0) IS FALSE))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ('') ORDER BY (- (((rt0.c0) IS FALSE)));
SELECT * FROM rt0, vt1 WHERE (CASE WHEN (+ (rt0.c2)) THEN ((0.15158022463354637) NOT NULL) END) ORDER BY (((vt1.c0)) NOT BETWEEN ((rt0.c3)) AND ((vt1.c0))) COLLATE NOCASE ASC, ((rt0.c1) NOTNULL) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE WHEN (+ (rt0.c2)) THEN ((0.15158022463354637) NOT NULL) END)AND(((CAST(rt0.c2 AS BLOB)) IS FALSE)))) ORDER BY (- (((rt0.c0) IS FALSE))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ('') ORDER BY (- (((rt0.c0) IS FALSE)));
SELECT * FROM rt0, vt1 WHERE ((- ('1056095428')));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((- ('1056095428')))AND(((rt0.c0)|((~ (vt1.c0))))))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((- (((8.39021629E8)LIKE(NULL)))));
SELECT * FROM rt0, vt1 WHERE ((- ('1056095428')));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((- ('1056095428')))AND(((rt0.c0)|((~ (vt1.c0))))))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((- (((8.39021629E8)LIKE(NULL)))));
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (NULL);
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((NULL)AND(((((STRFTIME('-1302896843', NULL, NULL, rt0.c0, NULL))AND(((rt0.c3) ISNULL))))OR((- (rt0.c0))))))) ORDER BY 0.08412666871253838, TRIM(((rt0.c1)<(rt0.c1)), ((rt0.c2)=(rt0.c0))) ASC  NULLS FIRST, CASE ((rt0.c1)>(rt0.c2))  WHEN x'3db6' THEN TRIM('', rt0.c2) WHEN (rt0.c0 IN ()) THEN (((rt0.c0))>((0.20306138232707216))) WHEN CASE WHEN NULL THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 END THEN 0.08376976849755813 ELSE rt0.c2 END  NULLS LAST, (~ (CASE rt0.c3  WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END)) DESC INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((rt0.c3)OR((((rt0.c1))!=((rt0.c0)))))) ORDER BY 0.08412666871253838, TRIM(((rt0.c1)<(rt0.c1)), ((rt0.c2)=(rt0.c0))) ASC  NULLS FIRST, CASE ((rt0.c1)>(rt0.c2))  WHEN x'3db6' THEN TRIM('', rt0.c2) WHEN (rt0.c0 IN ()) THEN (((rt0.c0))>((0.20306138232707216))) WHEN CASE WHEN NULL THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 END THEN 0.08376976849755813 ELSE rt0.c2 END  NULLS LAST, (~ (CASE rt0.c3  WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END)) DESC;
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)<(((vt1.c0)*(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)<(((vt1.c0)*(vt1.c0)))));
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)<(((vt1.c0)*(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)<(((vt1.c0)*(vt1.c0)))));
SELECT MAX(vt1.c0) FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)<=(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)=(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) LIMIT 0X1 INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END IN ((~ (vt1.c0)), vt1.c0))) LIMIT 1;
SELECT MIN(rt0.c1) FROM rt0 WHERE ((((- (rt0.c1)))/((rt0.c2 IN (rt0.c1))))) ORDER BY LIKELIHOOD(((rt0.c1)IS(rt0.c1)), (('626381757') ISNULL)) DESC;
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE ((((- (rt0.c1)))/((rt0.c2 IN (rt0.c1))))) ORDER BY CAST((((rt0.c1, rt0.c3)) BETWEEN ((rt0.c1, rt0.c1)) AND ((rt0.c3, rt0.c1))) AS TEXT), (((rt0.c1)>(rt0.c0)) IN ((('g') BETWEEN (rt0.c2) AND (rt0.c2)))) ASC  NULLS LAST LIMIT 0X2;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((NOT (vt1.c0 COLLATE RTRIM)));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((NOT (vt1.c0 COLLATE RTRIM)))AND(((vt1.c0 IN (vt1.c0, vt1.c0)) IN ((NOT (x''))))))) LIMIT 0X2;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE ((- (((rt0.c2) NOTNULL))));
SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE ((((- (((rt0.c2) NOTNULL))))AND(((TRIM(rt0.c3))GLOB(rt0.c2))))) ORDER BY ((((((((vt1.c0)OR(vt1.c0)))OR(NULL)))AND(rt0.c2))) BETWEEN ((- (rt0.c1))) AND ('/')) ASC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (CAST(CASE WHEN rt0.c3 THEN rt0.c2 END AS BLOB)) ORDER BY ((((((((vt1.c0)OR(vt1.c0)))OR(NULL)))AND(rt0.c2))) BETWEEN ((- (rt0.c1))) AND ('/')) ASC  NULLS FIRST;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (((((((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c3)))OR(rt0.c2 COLLATE BINARY)))OR(CAST(vt1.c0 AS NUMERIC)))) ORDER BY CAST((vt1.c0 IN (vt1.c0)) AS BLOB), (((((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c1, rt0.c1)) AND ((vt1.c0, rt0.c2)))) IS FALSE) ASC;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (((((((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c3)))OR(rt0.c2 COLLATE BINARY)))OR(CAST(vt1.c0 AS NUMERIC)))) ORDER BY ((((((CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END)OR(TRIM(DISTINCT rt0.c1))))OR(NULL)))AND((~ (rt0.c2)))) ASC LIMIT 0X4;
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON (NOT (NULL)) WHERE (((((((((((CASE WHEN rt0.c3 THEN rt0.c1 END)AND(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END)))OR(vt1.c0)))OR(CAST(rt0.c3 AS NUMERIC))))AND((((vt1.c0))=((rt0.c3))))))AND(NULL)));
SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN rt0 ON (NOT (NULL)) WHERE (((((((((((((CASE WHEN rt0.c3 THEN rt0.c1 END)AND(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END)))OR(vt1.c0)))OR(CAST(rt0.c3 AS NUMERIC))))AND((((vt1.c0))=((rt0.c3))))))AND(NULL)))AND(rt0.c3)));
SELECT MAX(rt0.c3) FROM rt0 WHERE ((((~ (rt0.c0))) IS TRUE)) ORDER BY HEX(DISTINCT ((rt0.c3) ISNULL))  NULLS LAST, (0.5480066150155817 IN ('2055361177', rt0.c3));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE ((((~ (rt0.c0))) IS TRUE)) ORDER BY (((((rt0.c3, rt0.c0, rt0.c1))<=((x'64', rt0.c3, rt0.c3)))) IS FALSE)  NULLS FIRST;
SELECT * FROM vt1 WHERE ((~ ((vt1.c0 IN (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((~ ((vt1.c0 IN (vt1.c0))))) ORDER BY (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), (vt1.c0 IN (vt1.c0))))>((((NULL) ISNULL), (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) ASC, TYPEOF(NULL) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((('613419071') IS TRUE)) ORDER BY (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), (vt1.c0 IN (vt1.c0))))>((((NULL) ISNULL), (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) ASC, TYPEOF(NULL) ASC;
SELECT * FROM vt1 WHERE ((~ ((vt1.c0 IN (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((~ ((vt1.c0 IN (vt1.c0))))) ORDER BY (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), (vt1.c0 IN (vt1.c0))))>((((NULL) ISNULL), (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) ASC, TYPEOF(NULL) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((('613419071') IS TRUE)) ORDER BY (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), (vt1.c0 IN (vt1.c0))))>((((NULL) ISNULL), (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) ASC, TYPEOF(NULL) ASC;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((~ (vt1.c0)))-(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN '' THEN vt1.c0 END)));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((((~ (vt1.c0)))-(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN '' THEN vt1.c0 END)))AND(((vt1.c0)AND(vt1.c0)) COLLATE NOCASE))) ORDER BY 'xvQᄾ' DESC, ((vt1.c0) NOT NULL) COLLATE BINARY COLLATE NOCASE, (((vt1.c0)) NOT BETWEEN ((((vt1.c0)IS NOT(vt1.c0)))) AND (((('j.f') BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((vt1.c0 IN ()))*(vt1.c0 COLLATE NOCASE)));
SELECT * FROM vt1 WHERE ((((vt1.c0 IN ()))*(vt1.c0 COLLATE NOCASE))) ORDER BY ((vt1.c0 COLLATE BINARY)||(CASE WHEN vt1.c0 THEN vt1.c0 END)) ASC INTERSECT SELECT ALL * FROM vt1 WHERE (((+ (vt1.c0)) IN (vt1.c0))) ORDER BY ((vt1.c0 COLLATE BINARY)||(CASE WHEN vt1.c0 THEN vt1.c0 END)) ASC;
SELECT * FROM vt1 WHERE ((((vt1.c0 IN ()))*(vt1.c0 COLLATE NOCASE)));
SELECT * FROM vt1 WHERE ((((vt1.c0 IN ()))*(vt1.c0 COLLATE NOCASE))) ORDER BY ((vt1.c0 COLLATE BINARY)||(CASE WHEN vt1.c0 THEN vt1.c0 END)) ASC INTERSECT SELECT ALL * FROM vt1 WHERE (((+ (vt1.c0)) IN (vt1.c0))) ORDER BY ((vt1.c0 COLLATE BINARY)||(CASE WHEN vt1.c0 THEN vt1.c0 END)) ASC;
SELECT * FROM vt1, rt0 WHERE ((CASE 0.311181017044191  WHEN rt0.c2 THEN rt0.c1 END IN (((((((((rt0.c1)OR(rt0.c1)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((CASE 0.311181017044191  WHEN rt0.c2 THEN rt0.c1 END IN (((((((((rt0.c1)OR(rt0.c1)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c1)))))AND(((TRIM(vt1.c0, vt1.c0))>(((rt0.c3)>>(rt0.c3))))))) LIMIT 1;
SELECT * FROM vt1, rt0 WHERE ((CASE 0.311181017044191  WHEN rt0.c2 THEN rt0.c1 END IN (((((((((rt0.c1)OR(rt0.c1)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((CASE 0.311181017044191  WHEN rt0.c2 THEN rt0.c1 END IN (((((((((rt0.c1)OR(rt0.c1)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c1)))))AND(((TRIM(vt1.c0, vt1.c0))>(((rt0.c3)>>(rt0.c3))))))) LIMIT 1;
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (CAST(CASE rt0.c1  WHEN vt1.c0 THEN rt0.c2 WHEN 0xfffffffffa310d11 THEN rt0.c3 ELSE 0X38d43e87 END AS INTEGER));
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (CAST(CASE rt0.c1  WHEN vt1.c0 THEN rt0.c2 WHEN -97448687 THEN rt0.c3 ELSE 0x38d43e87 END AS INTEGER)) INTERSECT SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((((rt0.c3, vt1.c0, x'f0')) BETWEEN ((((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3)), ((rt0.c3) NOT BETWEEN (vt1.c0) AND (NULL)), CAST(rt0.c2 AS TEXT))) AND (((rt0.c0 IN ()), CASE WHEN x'' THEN rt0.c2 WHEN rt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN '-621937747' END, (((rt0.c3))>=((rt0.c3)))))));
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE (((((((rt0.c3)OR(rt0.c3)))OR(vt1.c0)))*(CASE WHEN '/~s' THEN NULL WHEN rt0.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 ELSE '#,GN<sE' END))) ORDER BY (((((vt1.c0))>((vt1.c0))))-(((((((rt0.c0)OR(0.45733682065490733)))OR(rt0.c0)))AND(rt0.c2)))), CAST(CASE WHEN vt1.c0 THEN vt1.c0 END AS INTEGER);
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (((((((((rt0.c3)OR(rt0.c3)))OR(vt1.c0)))*(CASE WHEN '/~s' THEN NULL WHEN rt0.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 ELSE '#,GN<sE' END)))AND((((+ (rt0.c1))) NOTNULL)))) ORDER BY (((((vt1.c0))>((vt1.c0))))-(((((((rt0.c0)OR(0.45733682065490733)))OR(rt0.c0)))AND(rt0.c2)))), CAST(CASE WHEN vt1.c0 THEN vt1.c0 END AS INTEGER) LIMIT 0X0;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE ((~ (CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c1 END))) ORDER BY rt0.c2  NULLS LAST;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE ((((~ (CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c1 END)))AND(CAST(CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 ELSE x'c635e3' END AS INTEGER)))) ORDER BY (NOT ((((rt0.c1, rt0.c2, rt0.c1)) BETWEEN ((rt0.c2, rt0.c0, vt1.c0)) AND ((vt1.c0, rt0.c0, rt0.c2)))))  NULLS LAST LIMIT 0x1 INTERSECT SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE ('-1414367090') ORDER BY (NOT ((((rt0.c1, rt0.c2, rt0.c1)) BETWEEN ((rt0.c2, rt0.c0, vt1.c0)) AND ((vt1.c0, rt0.c0, rt0.c2)))))  NULLS LAST LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((- (((vt1.c0)<>(vt1.c0))))) ORDER BY CASE ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))  WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN 0.3131613657923358 WHEN vt1.c0 THEN (vt1.c0 IN (vt1.c0)) WHEN TRIM(DISTINCT vt1.c0) THEN NULL ELSE CASE WHEN vt1.c0 THEN vt1.c0 END END DESC  NULLS FIRST, ((((((((vt1.c0 COLLATE NOCASE)OR(((vt1.c0)<(vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(CAST('0.04157587481795155' AS REAL))))OR(CAST(vt1.c0 AS INTEGER))) ASC  NULLS LAST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((- (((vt1.c0)<(vt1.c0))))) ORDER BY CASE ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))  WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN 0.3131613657923358 WHEN vt1.c0 THEN (vt1.c0 IN (vt1.c0)) WHEN TRIM(DISTINCT vt1.c0) THEN NULL ELSE CASE WHEN vt1.c0 THEN vt1.c0 END END DESC  NULLS FIRST, ((((((((vt1.c0 COLLATE NOCASE)OR(((vt1.c0)<(vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(CAST('0.04157587481795155' AS REAL))))OR(CAST(vt1.c0 AS INTEGER))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (TRIM(UNLIKELY(DISTINCT NULL))) ORDER BY CAST(0.21473199742024995 AS BLOB) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (((TRIM(UNLIKELY(DISTINCT NULL)))AND((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c3)), x'5c' COLLATE NOCASE, ((rt0.c1)>(rt0.c0))))<=((NULLIF(DISTINCT rt0.c0, rt0.c3), (((rt0.c3, rt0.c3))>((rt0.c2, rt0.c2))), ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)))))))) ORDER BY CASE (((rt0.c1))>=((rt0.c1)))  WHEN CASE rt0.c2  WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END THEN CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c3 END ELSE ((vt1.c0) NOTNULL) END, ((CASE '328749208'  WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN NULL END)<>(CASE vt1.c0  WHEN x'65' THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 END)) DESC  NULLS FIRST INTERSECT SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (CAST(((rt0.c2)>(vt1.c0)) AS BLOB)) ORDER BY CASE (((rt0.c1))>=((rt0.c1)))  WHEN CASE rt0.c2  WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END THEN CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c3 END ELSE ((vt1.c0) NOTNULL) END, ((CASE '328749208'  WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN NULL END)!=(CASE vt1.c0  WHEN x'65' THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 END)) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (TRIM(UNLIKELY(DISTINCT NULL))) ORDER BY CAST(0.21473199742024995 AS BLOB) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (((TRIM(UNLIKELY(DISTINCT NULL)))AND((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c3)), x'5c' COLLATE NOCASE, ((rt0.c1)>(rt0.c0))))<=((NULLIF(DISTINCT rt0.c0, rt0.c3), (((rt0.c3, rt0.c3))>((rt0.c2, rt0.c2))), ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)))))))) ORDER BY CASE (((rt0.c1))>=((rt0.c1)))  WHEN CASE rt0.c2  WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END THEN CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c3 END ELSE ((vt1.c0) NOTNULL) END, ((CASE '328749208'  WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN NULL END)<>(CASE vt1.c0  WHEN x'65' THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 END)) DESC  NULLS FIRST INTERSECT SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (CAST(((rt0.c2)>(vt1.c0)) AS BLOB)) ORDER BY CASE (((rt0.c1))>=((rt0.c1)))  WHEN CASE rt0.c2  WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END THEN CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c3 END ELSE ((vt1.c0) NOTNULL) END, ((CASE '328749208'  WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN NULL END)!=(CASE vt1.c0  WHEN x'65' THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 END)) DESC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((8.30243475E8)%(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY COALESCE(DISTINCT CASE 0xd4cb7d9  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE x'' END, CAST(vt1.c0 AS INTEGER), (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))), CAST(vt1.c0 AS TEXT), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL ELSE vt1.c0 END);
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((8.30243475E8)%(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY ((0.34616743235905245)IS(((vt1.c0) NOTNULL))) ASC, ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))>=(-1.127236167E9)), '1105121225' LIMIT 0;
SELECT * FROM rt0 WHERE (((rt0.c0 COLLATE RTRIM)<>(CASE WHEN '722345103' THEN rt0.c3 WHEN 0.6697033820501275 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END))) ORDER BY CASE WHEN (rt0.c3 IN (NULL)) THEN (rt0.c3 IN ()) ELSE ((0.706287286886635) BETWEEN (rt0.c3) AND (rt0.c3)) END;
SELECT ALL * FROM rt0 WHERE (((rt0.c0 COLLATE RTRIM)>(CASE WHEN '722345103' THEN rt0.c3 WHEN 0.6697033820501275 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END))) ORDER BY CASE WHEN (rt0.c3 IN (NULL)) THEN (rt0.c3 IN ()) ELSE ((0.706287286886635) BETWEEN (rt0.c3) AND (rt0.c3)) END;
SELECT * FROM rt0 WHERE (((rt0.c0 COLLATE RTRIM)<>(CASE WHEN '722345103' THEN rt0.c3 WHEN 0.6697033820501275 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END))) ORDER BY CASE WHEN (rt0.c3 IN (NULL)) THEN (rt0.c3 IN ()) ELSE ((0.706287286886635) BETWEEN (rt0.c3) AND (rt0.c3)) END;
SELECT ALL * FROM rt0 WHERE (((rt0.c0 COLLATE RTRIM)>(CASE WHEN '722345103' THEN rt0.c3 WHEN 0.6697033820501275 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END))) ORDER BY CASE WHEN (rt0.c3 IN (NULL)) THEN (rt0.c3 IN ()) ELSE ((0.706287286886635) BETWEEN (rt0.c3) AND (rt0.c3)) END;
SELECT ALL COUNT(*) FROM vt1 WHERE ((- (TRIM(DISTINCT vt1.c0, vt1.c0)))) ORDER BY json_array_length(vt1.c0 COLLATE NOCASE, CAST(vt1.c0 AS BLOB)) DESC  NULLS LAST, ((vt1.c0 COLLATE BINARY) ISNULL) ASC, (((((vt1.c0 IN (vt1.c0)))AND(CAST(vt1.c0 AS TEXT))))OR(1.60429264E8))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((- (TRIM(DISTINCT vt1.c0, vt1.c0)))) ORDER BY TRIM(DISTINCT CAST(vt1.c0 AS BLOB), ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) ASC, ((((vt1.c0))<=((vt1.c0))) IN ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, 1641769291)) AND ((NULL, vt1.c0))))) ASC  NULLS LAST, vt1.c0  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((0Xffffffffe1091722) ISNULL)) ORDER BY ((rt0.c3 COLLATE RTRIM) NOT BETWEEN ((rt0.c2 IN ())) AND (((((rt0.c1)OR(rt0.c2)))AND(rt0.c3)))) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((-519497950) ISNULL)) ORDER BY CAST(HEX(DISTINCT rt0.c0) AS TEXT)  NULLS FIRST, ((((rt0.c1) IS TRUE)) ISNULL) DESC  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE (((CAST(x'' AS BLOB))%(rt0.c3))) ORDER BY CAST(HEX(DISTINCT rt0.c0) AS TEXT)  NULLS FIRST, ((((rt0.c1) IS TRUE)) ISNULL) DESC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((0Xffffffffe1091722) ISNULL)) ORDER BY ((rt0.c3 COLLATE RTRIM) NOT BETWEEN ((rt0.c2 IN ())) AND (((((rt0.c1)OR(rt0.c2)))AND(rt0.c3)))) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((-519497950) ISNULL)) ORDER BY CAST(HEX(DISTINCT rt0.c0) AS TEXT)  NULLS FIRST, ((((rt0.c1) IS TRUE)) ISNULL) DESC  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE (((CAST(x'' AS BLOB))%(rt0.c3))) ORDER BY CAST(HEX(DISTINCT rt0.c0) AS TEXT)  NULLS FIRST, ((((rt0.c1) IS TRUE)) ISNULL) DESC  NULLS LAST;
SELECT * FROM rt0 WHERE ((rt0.c3 IN (rt0.c2)) COLLATE NOCASE) ORDER BY (+ (rt0.c0 COLLATE BINARY)) DESC  NULLS LAST, (((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c0)) IN (CAST(rt0.c3 AS REAL)));
SELECT ALL * FROM rt0 WHERE ((((rt0.c3 IN (rt0.c2)) COLLATE NOCASE)AND(((((((rt0.c1)OR(rt0.c3)))AND(rt0.c3))) NOT BETWEEN (1) AND (NULL))))) ORDER BY ((((4.1795363E8) NOTNULL)) BETWEEN ((NULL IN (rt0.c0))) AND (((rt0.c2)<<(rt0.c1)))) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM rt0 WHERE (CAST(CAST(rt0.c0 AS NUMERIC) AS BLOB)) ORDER BY ((((4.1795363E8) NOTNULL)) BETWEEN ((NULL IN (rt0.c0))) AND (((rt0.c2)<<(rt0.c1)))) ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM rt0 WHERE ((rt0.c3 IN (rt0.c2)) COLLATE NOCASE) ORDER BY (+ (rt0.c0 COLLATE BINARY)) DESC  NULLS LAST, (((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c0)) IN (CAST(rt0.c3 AS REAL)));
SELECT ALL * FROM rt0 WHERE ((((rt0.c3 IN (rt0.c2)) COLLATE NOCASE)AND(((((((rt0.c1)OR(rt0.c3)))AND(rt0.c3))) NOT BETWEEN (1) AND (NULL))))) ORDER BY ((((4.1795363E8) NOTNULL)) BETWEEN ((NULL IN (rt0.c0))) AND (((rt0.c2)<<(rt0.c1)))) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM rt0 WHERE (CAST(CAST(rt0.c0 AS NUMERIC) AS BLOB)) ORDER BY ((((4.1795363E8) NOTNULL)) BETWEEN ((NULL IN (rt0.c0))) AND (((rt0.c2)<<(rt0.c1)))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE (CASE ((rt0.c0)+(rt0.c0))  WHEN LIKELIHOOD(rt0.c2, rt0.c0) THEN ABS(rt0.c3) WHEN ((vt1.c0) IS TRUE) THEN (((rt0.c3)) BETWEEN ((vt1.c0)) AND ((rt0.c3))) WHEN ((rt0.c1)/(rt0.c3)) THEN rtreenode(rt0.c2, vt1.c0) END) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c3 ELSE vt1.c0 END)*((+ (vt1.c0)))) ASC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((CASE ((rt0.c0)+(rt0.c0))  WHEN LIKELIHOOD(rt0.c2, rt0.c0) THEN ABS(rt0.c3) WHEN ((vt1.c0) IS TRUE) THEN (((rt0.c3)) BETWEEN ((vt1.c0)) AND ((rt0.c3))) WHEN ((rt0.c1)/(rt0.c3)) THEN rtreenode(rt0.c2, vt1.c0) END)AND(0.4851122654388752))) ORDER BY CASE (NOT (rt0.c3))  WHEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 END THEN (rt0.c0 IN (rt0.c1)) WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 END THEN ((((rt0.c2)OR(rt0.c1)))OR(rt0.c1)) WHEN ('/B9' IN (rt0.c1)) THEN ((vt1.c0) IS TRUE) WHEN (((0Xffffffffa125161a, rt0.c2, rt0.c2, rt0.c2, rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c0, rt0.c1, vt1.c0, rt0.c2, rt0.c0)) AND ((rt0.c3, vt1.c0, vt1.c0, vt1.c0, vt1.c0, rt0.c0))) THEN ((rt0.c1)/(x'')) ELSE rt0.c1 COLLATE BINARY END  NULLS FIRST INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((CASE WHEN rt0.c0 THEN vt1.c0 END)<(CASE WHEN rt0.c2 THEN x'' WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 END))) ORDER BY CASE (NOT (rt0.c3))  WHEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 END THEN (rt0.c0 IN (rt0.c1)) WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 END THEN ((((rt0.c2)OR(rt0.c1)))OR(rt0.c1)) WHEN ('/B9' IN (rt0.c1)) THEN ((vt1.c0) IS TRUE) WHEN (((-1591405030, rt0.c2, rt0.c2, rt0.c2, rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c0, rt0.c1, vt1.c0, rt0.c2, rt0.c0)) AND ((rt0.c3, vt1.c0, vt1.c0, vt1.c0, vt1.c0, rt0.c0))) THEN ((rt0.c1)/(x'')) ELSE rt0.c1 COLLATE BINARY END  NULLS FIRST;
SELECT * FROM rt0 WHERE ((((((rt0.c0, '0.7551738705132669')) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((-244857703, rt0.c1)))) NOT BETWEEN (CAST(rt0.c3 AS NUMERIC)) AND (((rt0.c1) ISNULL)))) ORDER BY (('a,hB') NOTNULL)  NULLS FIRST, CASE rt0.c0  WHEN rt0.c0 COLLATE NOCASE THEN (((rt0.c3)) BETWEEN ((rt0.c3)) AND ((NULL))) WHEN 0.34872186042004094 COLLATE BINARY THEN (('') BETWEEN (0xffffffff9dbf87e1) AND (rt0.c3)) ELSE rt0.c0 COLLATE BINARY END;
SELECT * FROM rt0 WHERE ((((((rt0.c0, '0.7551738705132669')) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((0xfffffffff167c499, rt0.c1)))) NOT BETWEEN (CAST(rt0.c3 AS NUMERIC)) AND (((rt0.c1) ISNULL)))) ORDER BY (('a,hB') NOTNULL)  NULLS FIRST, CASE rt0.c0  WHEN rt0.c0 COLLATE NOCASE THEN (((rt0.c3)) BETWEEN ((rt0.c3)) AND ((NULL))) WHEN 0.34872186042004094 COLLATE BINARY THEN (('') BETWEEN (-1648392223) AND (rt0.c3)) ELSE rt0.c0 COLLATE BINARY END LIMIT 3 INTERSECT SELECT * FROM rt0 WHERE (((CAST(0X552dba8e AS REAL))IS NOT(0.6017220361261298))) ORDER BY (('a,hB') NOTNULL)  NULLS FIRST, CASE rt0.c0  WHEN rt0.c0 COLLATE NOCASE THEN (((rt0.c3)) BETWEEN ((rt0.c3)) AND ((NULL))) WHEN 0.34872186042004094 COLLATE BINARY THEN (('') BETWEEN (0Xffffffff9dbf87e1) AND (rt0.c3)) ELSE rt0.c0 COLLATE BINARY END LIMIT 0x3;
SELECT * FROM rt0 WHERE ((((((rt0.c0, '0.7551738705132669')) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((-244857703, rt0.c1)))) NOT BETWEEN (CAST(rt0.c3 AS NUMERIC)) AND (((rt0.c1) ISNULL)))) ORDER BY (('a,hB') NOTNULL)  NULLS FIRST, CASE rt0.c0  WHEN rt0.c0 COLLATE NOCASE THEN (((rt0.c3)) BETWEEN ((rt0.c3)) AND ((NULL))) WHEN 0.34872186042004094 COLLATE BINARY THEN (('') BETWEEN (0xffffffff9dbf87e1) AND (rt0.c3)) ELSE rt0.c0 COLLATE BINARY END;
SELECT * FROM rt0 WHERE ((((((rt0.c0, '0.7551738705132669')) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((0xfffffffff167c499, rt0.c1)))) NOT BETWEEN (CAST(rt0.c3 AS NUMERIC)) AND (((rt0.c1) ISNULL)))) ORDER BY (('a,hB') NOTNULL)  NULLS FIRST, CASE rt0.c0  WHEN rt0.c0 COLLATE NOCASE THEN (((rt0.c3)) BETWEEN ((rt0.c3)) AND ((NULL))) WHEN 0.34872186042004094 COLLATE BINARY THEN (('') BETWEEN (-1648392223) AND (rt0.c3)) ELSE rt0.c0 COLLATE BINARY END LIMIT 3 INTERSECT SELECT * FROM rt0 WHERE (((CAST(0X552dba8e AS REAL))IS NOT(0.6017220361261298))) ORDER BY (('a,hB') NOTNULL)  NULLS FIRST, CASE rt0.c0  WHEN rt0.c0 COLLATE NOCASE THEN (((rt0.c3)) BETWEEN ((rt0.c3)) AND ((NULL))) WHEN 0.34872186042004094 COLLATE BINARY THEN (('') BETWEEN (0Xffffffff9dbf87e1) AND (rt0.c3)) ELSE rt0.c0 COLLATE BINARY END LIMIT 0x3;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0, ((vt1.c0) IS TRUE)))<>((((vt1.c0) NOTNULL), (((0.0966553585091916, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, x''))))))) ORDER BY (((((NULL))>=((vt1.c0)))) NOT BETWEEN (((vt1.c0)-(vt1.c0))) AND ((NOT (vt1.c0)))) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((((vt1.c0, ((vt1.c0) IS TRUE)))<>((((vt1.c0) NOTNULL), (((0.0966553585091916, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, x'')))))))AND(CAST(((NULL)<<(vt1.c0)) AS BLOB)))) ORDER BY (((((NULL))>=((vt1.c0)))) NOT BETWEEN (((vt1.c0)-(vt1.c0))) AND ((NOT (vt1.c0)))) ASC  NULLS FIRST LIMIT 4 INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE ((QUOTE(vt1.c0) IN ((~ (vt1.c0)), (NOT (vt1.c0))))) ORDER BY (((((NULL))>=((vt1.c0)))) NOT BETWEEN (((vt1.c0)-(vt1.c0))) AND ((NOT (vt1.c0)))) ASC  NULLS FIRST LIMIT 0X4;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((+ (rt0.c1)))/(CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c1 END)) WHERE (0.7777959335659675);
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((+ (rt0.c1)))/(CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c1 END)) WHERE (0.7777959335659675) INTERSECT SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON (((+ (rt0.c1)))/(CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c1 END)) WHERE (((((((vt1.c0)||(rt0.c2)))AND(CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c3 END)))OR(CASE vt1.c0  WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((+ (rt0.c1)))/(CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c1 END)) WHERE (0.7777959335659675);
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (((+ (rt0.c1)))/(CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c1 END)) WHERE (0.7777959335659675) INTERSECT SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON (((+ (rt0.c1)))/(CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c1 END)) WHERE (((((((vt1.c0)||(rt0.c2)))AND(CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c3 END)))OR(CASE vt1.c0  WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON ((((((((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c1)))OR(rt0.c2)))OR(TRIM(rt0.c2))))AND((+ (rt0.c2)))))AND(((rt0.c3) NOT NULL))))OR(((rt0.c3)OR(rt0.c1)))) WHERE (rt0.c2 COLLATE BINARY) ORDER BY ((((rt0.c0)AND(0.5812025536927014)))>>(rt0.c1 COLLATE NOCASE)), ((0.3287363519853398 IN (vt1.c0)) IN ((((rt0.c1, x'', rt0.c2))<>((rt0.c1, rt0.c0, rt0.c0))))) ASC  NULLS LAST;
SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON ((((((((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c1)))OR(rt0.c2)))OR(TRIM(rt0.c2))))AND((+ (rt0.c2)))))AND(((rt0.c3) NOT NULL))))OR(((rt0.c3)OR(rt0.c1)))) WHERE (rt0.c2 COLLATE BINARY) ORDER BY (((CAST(rt0.c0 AS BLOB), ((((((vt1.c0)OR(rt0.c2)))OR(rt0.c1)))AND(vt1.c0))))!=((((rt0.c2)||(rt0.c0)), STRFTIME(vt1.c0, rt0.c0, rt0.c3, 0.377218065780887)))) DESC  NULLS FIRST, ((rt0.c2) BETWEEN (rt0.c1) AND ('169100963')) COLLATE RTRIM  NULLS LAST, ((((vt1.c0)&(rt0.c0))) NOT BETWEEN ((NOT (rt0.c0))) AND ((+ (rt0.c2)))) INTERSECT SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON ((((((((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c1)))OR(rt0.c2)))OR(TRIM(rt0.c2))))AND((+ (rt0.c2)))))AND(((rt0.c3) NOT NULL))))OR(((rt0.c3)OR(rt0.c1)))) WHERE ((((((rt0.c2)*(rt0.c0)), ((rt0.c1)||(rt0.c2)), ((((rt0.c0)OR(rt0.c1)))OR('1166297056'))))<>((rt0.c3 COLLATE BINARY, CAST(vt1.c0 AS BLOB), TRIM('0.97130683161993'))))) ORDER BY (((CAST(rt0.c0 AS BLOB), ((((((vt1.c0)OR(rt0.c2)))OR(rt0.c1)))AND(vt1.c0))))<>((((rt0.c2)||(rt0.c0)), STRFTIME(vt1.c0, rt0.c0, rt0.c3, 0.377218065780887)))) DESC  NULLS FIRST, ((rt0.c2) BETWEEN (rt0.c1) AND ('169100963')) COLLATE RTRIM  NULLS LAST, ((((vt1.c0)&(rt0.c0))) NOT BETWEEN ((NOT (rt0.c0))) AND ((+ (rt0.c2))));
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (((((((((((rt0.c3)AND((('')AND(rt0.c3)))))OR((- (rt0.c0)))))AND(((vt1.c0)-(vt1.c0)))))AND((rt0.c0 IN (vt1.c0, NULL)))))OR((+ (rt0.c3))))) ORDER BY 0X5bf36b85  NULLS FIRST, (CASE WHEN rt0.c1 THEN 0.20347321760312675 END IN (rt0.c0 COLLATE BINARY))  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c3) FROM vt1, rt0 WHERE (((((((((((((rt0.c3)AND((('')AND(rt0.c3)))))OR((- (rt0.c0)))))AND(((vt1.c0)-(vt1.c0)))))AND((rt0.c0 IN (vt1.c0, NULL)))))OR((+ (rt0.c3)))))AND((((((rt0.c1))<>((vt1.c0)))) BETWEEN (vt1.c0 COLLATE NOCASE) AND (rt0.c0))))) ORDER BY 1542679429  NULLS FIRST, (CASE WHEN rt0.c1 THEN 0.20347321760312675 END IN (rt0.c0 COLLATE BINARY))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MIN(rt0.c3) FROM vt1, rt0 WHERE (((((((CASE WHEN rt0.c1 THEN rt0.c2 END)AND((((rt0.c2, rt0.c1))>=((rt0.c1, rt0.c0))))))AND((((rt0.c0, vt1.c0))!=((rt0.c3, vt1.c0))))))OR(CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 ELSE '-1302896843' END))) ORDER BY 0x5bf36b85  NULLS FIRST, (CASE WHEN rt0.c1 THEN 0.20347321760312675 END IN (rt0.c0 COLLATE BINARY))  NULLS FIRST LIMIT 0x1;
SELECT COUNT(*) FROM vt1, rt0 WHERE ((((((vt1.c0, rt0.c3, rt0.c0, '8'))==((rt0.c2, rt0.c2, rt0.c2, vt1.c0)))) NOT NULL)) ORDER BY ((((((DATETIME(rt0.c2, rt0.c2, vt1.c0, vt1.c0))OR(((rt0.c2)!=(rt0.c2)))))AND(CASE rt0.c0  WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c0 END)))OR((NOT (vt1.c0)))), CASE (((rt0.c2, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c2, vt1.c0)))  WHEN ((rt0.c3) BETWEEN ('2') AND (rt0.c2)) THEN CAST(rt0.c1 AS BLOB) ELSE (rt0.c0 IN (0.7153513000693227)) END ASC;
SELECT COUNT(*) FROM vt1, rt0 WHERE ((((((vt1.c0, rt0.c3, rt0.c0, '8'))==((rt0.c2, rt0.c2, rt0.c2, vt1.c0)))) NOT NULL)) ORDER BY ((((((DATETIME(rt0.c2, rt0.c2, vt1.c0, vt1.c0))OR(((rt0.c2)!=(rt0.c2)))))AND(CASE rt0.c0  WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c0 END)))OR((NOT (vt1.c0)))), CASE (((rt0.c2, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c2, vt1.c0)))  WHEN ((rt0.c3) BETWEEN ('2') AND (rt0.c2)) THEN CAST(rt0.c1 AS BLOB) ELSE (rt0.c0 IN (0.7153513000693227)) END ASC LIMIT 2;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((x'')-(vt1.c0)))AND(vt1.c0 COLLATE RTRIM)))AND(CAST(vt1.c0 AS BLOB)))) ORDER BY ((x'') IS TRUE), 0xffffffffa0311e97 ASC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((((x'')-(vt1.c0)))AND(vt1.c0 COLLATE RTRIM)))AND(CAST(vt1.c0 AS BLOB))))AND(0x53c41a72))) ORDER BY ((x'') IS TRUE), 0Xffffffffa0311e97 ASC  NULLS LAST LIMIT 0x2;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (json_valid(TRIM(DISTINCT rt0.c1))) ORDER BY (((((x'd5', rt0.c2))<=((rt0.c2, rt0.c1)))) NOT BETWEEN (((rt0.c2) NOTNULL)) AND (((rt0.c1) ISNULL)))  NULLS LAST, '^'  NULLS LAST;
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((json_valid(TRIM(DISTINCT rt0.c1)))AND(rt0.c0))) ORDER BY (((((x'd5', rt0.c2))<=((rt0.c2, rt0.c1)))) NOT BETWEEN (((rt0.c2) NOTNULL)) AND (((rt0.c1) ISNULL)))  NULLS LAST, '^'  NULLS LAST INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (rt0.c2) ORDER BY (((((x'd5', rt0.c2))<=((rt0.c2, rt0.c1)))) NOT BETWEEN (((rt0.c2) NOTNULL)) AND (((rt0.c1) ISNULL)))  NULLS LAST, '^'  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (vt1.c0);
SELECT ALL * FROM vt1, rt0 WHERE (((vt1.c0)AND(rt0.c0))) LIMIT 0x1 INTERSECT SELECT * FROM vt1, rt0 WHERE (((((((vt1.c0)) NOT BETWEEN (('#')) AND ((rt0.c3)))))<((LAST_INSERT_ROWID())))) LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (vt1.c0);
SELECT ALL * FROM vt1, rt0 WHERE (((vt1.c0)AND(rt0.c0))) LIMIT 0x1 INTERSECT SELECT * FROM vt1, rt0 WHERE (((((((vt1.c0)) NOT BETWEEN (('#')) AND ((rt0.c3)))))<((LAST_INSERT_ROWID())))) LIMIT 1;
SELECT ALL MAX(rt0.c0) FROM rt0, vt1 WHERE (((((((((((((((((vt1.c0)OR(vt1.c0)))OR('-853528778')))OR(vt1.c0)))OR(rt0.c1)))OR(rt0.c3)))AND(rt0.c2)))OR(rt0.c3)))>(TIME(rt0.c0, rt0.c2, rt0.c2, rt0.c3)))) ORDER BY SQLITE_COMPILEOPTION_USED(((((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c1)))OR(-1.16899011E8)))OR(rt0.c2)))AND(rt0.c3))), ((vt1.c0 COLLATE BINARY) NOTNULL) ASC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c0) FROM rt0, vt1 WHERE (((((((((((((((((vt1.c0)OR(vt1.c0)))OR('-853528778')))OR(vt1.c0)))OR(rt0.c1)))OR(rt0.c3)))AND(rt0.c2)))OR(rt0.c3)))>(TIME(rt0.c0, rt0.c2, rt0.c2, rt0.c3)))) ORDER BY TRIM(x'40' COLLATE NOCASE) ASC  NULLS LAST, (CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END IN ()) DESC  NULLS LAST INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0, vt1 WHERE (((((rt0.c3, vt1.c0, rt0.c1))>((rt0.c3, rt0.c2, vt1.c0))) IN ((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c0)))))) ORDER BY TRIM(x'40' COLLATE NOCASE) ASC  NULLS LAST, (CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END IN ()) DESC  NULLS LAST;
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE (NULL COLLATE RTRIM);
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (NULL COLLATE RTRIM) ORDER BY TRIM(DISTINCT rt0.c2)  NULLS FIRST INTERSECT SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (CAST(CAST(rt0.c1 AS REAL) AS INTEGER)) ORDER BY TRIM(DISTINCT rt0.c2)  NULLS FIRST;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((ABS(rt0.c2)) NOTNULL) WHERE ((TRIM(DISTINCT rt0.c1, NULL) IN ()));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((ABS(rt0.c2)) NOTNULL) WHERE ((TRIM(DISTINCT rt0.c1, NULL) IN ())) ORDER BY CASE ((((rt0.c1)OR(rt0.c0)))OR(rt0.c1))  WHEN CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END THEN ((rt0.c1) NOTNULL) WHEN ((((((((rt0.c2)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c1)) THEN '-353126543' WHEN (((vt1.c0, rt0.c2, rt0.c0, rt0.c1, rt0.c1))<=((rt0.c2, rt0.c2, vt1.c0, rt0.c0, rt0.c0))) THEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)) WHEN ((((((vt1.c0)AND(vt1.c0)))AND(rt0.c1)))OR(rt0.c3)) THEN ((rt0.c2) IS TRUE) ELSE ((((((((vt1.c0)OR(rt0.c0)))AND(NULL)))OR(vt1.c0)))OR(rt0.c3)) END INTERSECT SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((ABS(rt0.c2)) NOTNULL) WHERE ((((rt0.c1 COLLATE RTRIM))=((IFNULL(rt0.c0, rt0.c0))))) ORDER BY CASE ((((rt0.c1)OR(rt0.c0)))OR(rt0.c1))  WHEN CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END THEN ((rt0.c1) NOTNULL) WHEN ((((((((rt0.c2)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c1)) THEN '-353126543' WHEN (((vt1.c0, rt0.c2, rt0.c0, rt0.c1, rt0.c1))<=((rt0.c2, rt0.c2, vt1.c0, rt0.c0, rt0.c0))) THEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)) WHEN ((((((vt1.c0)AND(vt1.c0)))AND(rt0.c1)))OR(rt0.c3)) THEN ((rt0.c2) IS TRUE) ELSE ((((((((vt1.c0)OR(rt0.c0)))AND(NULL)))OR(vt1.c0)))OR(rt0.c3)) END;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((ABS(rt0.c2)) NOTNULL) WHERE ((TRIM(DISTINCT rt0.c1, NULL) IN ()));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((ABS(rt0.c2)) NOTNULL) WHERE ((TRIM(DISTINCT rt0.c1, NULL) IN ())) ORDER BY CASE ((((rt0.c1)OR(rt0.c0)))OR(rt0.c1))  WHEN CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END THEN ((rt0.c1) NOTNULL) WHEN ((((((((rt0.c2)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c1)) THEN '-353126543' WHEN (((vt1.c0, rt0.c2, rt0.c0, rt0.c1, rt0.c1))<=((rt0.c2, rt0.c2, vt1.c0, rt0.c0, rt0.c0))) THEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)) WHEN ((((((vt1.c0)AND(vt1.c0)))AND(rt0.c1)))OR(rt0.c3)) THEN ((rt0.c2) IS TRUE) ELSE ((((((((vt1.c0)OR(rt0.c0)))AND(NULL)))OR(vt1.c0)))OR(rt0.c3)) END INTERSECT SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((ABS(rt0.c2)) NOTNULL) WHERE ((((rt0.c1 COLLATE RTRIM))=((IFNULL(rt0.c0, rt0.c0))))) ORDER BY CASE ((((rt0.c1)OR(rt0.c0)))OR(rt0.c1))  WHEN CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END THEN ((rt0.c1) NOTNULL) WHEN ((((((((rt0.c2)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c1)) THEN '-353126543' WHEN (((vt1.c0, rt0.c2, rt0.c0, rt0.c1, rt0.c1))<=((rt0.c2, rt0.c2, vt1.c0, rt0.c0, rt0.c0))) THEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)) WHEN ((((((vt1.c0)AND(vt1.c0)))AND(rt0.c1)))OR(rt0.c3)) THEN ((rt0.c2) IS TRUE) ELSE ((((((((vt1.c0)OR(rt0.c0)))AND(NULL)))OR(vt1.c0)))OR(rt0.c3)) END;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (CASE WHEN (vt1.c0 IN (rt0.c1, rt0.c2)) THEN (~ ('\zN|')) ELSE CAST(rt0.c1 AS NUMERIC) END) ORDER BY rt0.c3  NULLS FIRST, 0.6931445457786564 ASC, (((rt0.c3)) NOT BETWEEN (((((rt0.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))) AND ((((rt0.c0)&(rt0.c1)))));
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (CASE WHEN (vt1.c0 IN (rt0.c1, rt0.c2)) THEN (~ ('\zN|')) ELSE CAST(rt0.c1 AS NUMERIC) END) ORDER BY (+ (((rt0.c1)|(rt0.c2)))) DESC  NULLS FIRST, (+ (rt0.c0)) COLLATE BINARY  NULLS LAST LIMIT 1 INTERSECT SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c2 COLLATE RTRIM) ISNULL)) ORDER BY (+ (((rt0.c1)|(rt0.c2)))) DESC  NULLS FIRST, (+ (rt0.c0)) COLLATE BINARY  NULLS LAST LIMIT 0x1;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((((CAST(rt0.c2 AS REAL))OR('V')))AND(((0.032065654398831245)/(vt1.c0))))) ORDER BY (((CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c3 END, '-1844867370'))>=((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)), CAST(rt0.c3 AS NUMERIC))))  NULLS LAST, ((LIKELIHOOD(DISTINCT vt1.c0, rt0.c3)) IS TRUE) ASC;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (((((CAST(rt0.c2 AS REAL))OR('V')))AND(((0.032065654398831245)/(vt1.c0))))) ORDER BY (~ (((rt0.c0) NOT NULL))), x'' DESC  NULLS FIRST, '0.7241807467882587' ASC LIMIT 0x0;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((((CAST(rt0.c2 AS REAL))OR('V')))AND(((0.032065654398831245)/(vt1.c0))))) ORDER BY (((CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c3 END, '-1844867370'))>=((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)), CAST(rt0.c3 AS NUMERIC))))  NULLS LAST, ((LIKELIHOOD(DISTINCT vt1.c0, rt0.c3)) IS TRUE) ASC;
SELECT * FROM vt1, rt0 WHERE (((((rt0.c0) ISNULL)) IS FALSE));
SELECT ALL * FROM vt1, rt0 WHERE (((((rt0.c0) ISNULL)) IS FALSE)) ORDER BY 0.9760697057998399, CASE WHEN ((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)) THEN ((rt0.c3) NOT NULL) END ASC LIMIT 0X1 INTERSECT SELECT * FROM vt1, rt0 WHERE ((vt1.c0 COLLATE BINARY IN (((((rt0.c0)OR(rt0.c1)))OR(rt0.c1))))) ORDER BY 0.9760697057998399, CASE WHEN ((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)) THEN ((rt0.c3) NOT NULL) END ASC LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE (((((rt0.c0) ISNULL)) IS FALSE));
SELECT ALL * FROM vt1, rt0 WHERE (((((rt0.c0) ISNULL)) IS FALSE)) ORDER BY 0.9760697057998399, CASE WHEN ((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)) THEN ((rt0.c3) NOT NULL) END ASC LIMIT 0X1 INTERSECT SELECT * FROM vt1, rt0 WHERE ((vt1.c0 COLLATE BINARY IN (((((rt0.c0)OR(rt0.c1)))OR(rt0.c1))))) ORDER BY 0.9760697057998399, CASE WHEN ((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)) THEN ((rt0.c3) NOT NULL) END ASC LIMIT 0X1;
SELECT * FROM rt0 WHERE ((~ (LIKELIHOOD(DISTINCT rt0.c2, '8508746')))) ORDER BY ((((rt0.c3)>(rt0.c3))) NOT NULL), (((((((('1860310119')AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c0))) ISNULL) DESC;
SELECT DISTINCT * FROM rt0 WHERE ((~ (LIKELIHOOD(DISTINCT rt0.c2, '8508746')))) ORDER BY ((((rt0.c3)>(rt0.c3))) NOT NULL), (((((((('1860310119')AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c0))) ISNULL) DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (0.22854080981359326) ORDER BY ((((rt0.c3)>(rt0.c3))) NOT NULL), (((((((('1860310119')AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c0))) ISNULL) DESC LIMIT 0x0;
SELECT * FROM rt0 WHERE ((~ (LIKELIHOOD(DISTINCT rt0.c2, '8508746')))) ORDER BY ((((rt0.c3)>(rt0.c3))) NOT NULL), (((((((('1860310119')AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c0))) ISNULL) DESC;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE ((- (((rt0.c3) BETWEEN (rt0.c1) AND (vt1.c0)))));
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE ((- (((rt0.c3) BETWEEN (rt0.c1) AND (vt1.c0))))) ORDER BY (((((rt0.c1, rt0.c0))=((rt0.c2, rt0.c2)))) NOT BETWEEN ((((rt0.c0, rt0.c3, rt0.c3))>=((vt1.c0, vt1.c0, rt0.c3)))) AND ((rt0.c0 IN (rt0.c1)))) DESC INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE (SQLITE_COMPILEOPTION_USED(((NULL) NOT BETWEEN (0.9784363207493714) AND (rt0.c3)))) ORDER BY (((((rt0.c1, rt0.c0))==((rt0.c2, rt0.c2)))) NOT BETWEEN ((((rt0.c0, rt0.c3, rt0.c3))>=((vt1.c0, vt1.c0, rt0.c3)))) AND ((rt0.c0 IN (rt0.c1)))) DESC;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) ISNULL)) ORDER BY (((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOT BETWEEN ((NOT (vt1.c0))) AND (CAST(vt1.c0 AS TEXT)))  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) ISNULL)) ORDER BY (((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOT BETWEEN ((NOT (vt1.c0))) AND (CAST(vt1.c0 AS TEXT)))  NULLS LAST LIMIT 0X0;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) ISNULL)) ORDER BY (((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOT BETWEEN ((NOT (vt1.c0))) AND (CAST(vt1.c0 AS TEXT)))  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) ISNULL)) ORDER BY (((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOT BETWEEN ((NOT (vt1.c0))) AND (CAST(vt1.c0 AS TEXT)))  NULLS LAST LIMIT 0X0;
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((((rt0.c3, rt0.c1, rt0.c2)) BETWEEN ((((rt0.c3) IS TRUE), ((rt0.c1) IS FALSE), CAST(rt0.c3 AS INTEGER))) AND ((CAST(rt0.c0 AS REAL), ((((((((((((0.4653069591959631)AND(x'84')))AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c3)))OR(rt0.c2)))OR(vt1.c0)), ((((((((rt0.c0)AND(rt0.c3)))AND(rt0.c3)))OR(rt0.c1)))OR(x''))))));
SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE ((((((rt0.c3, rt0.c1, rt0.c2)) BETWEEN ((((rt0.c3) IS TRUE), ((rt0.c1) IS FALSE), CAST(rt0.c3 AS INTEGER))) AND ((CAST(rt0.c0 AS REAL), ((((((((((((0.4653069591959631)AND(x'84')))AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c3)))OR(rt0.c2)))OR(vt1.c0)), ((((((((rt0.c0)AND(rt0.c3)))AND(rt0.c3)))OR(rt0.c1)))OR(x''))))))AND(((((((rt0.c3)OR(rt0.c0)))AND(rt0.c0)))AND(-978227590))))) LIMIT 0x2 INTERSECT SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE ((((rt0.c2 IN (rt0.c0, vt1.c0)))LIKE((~ (rt0.c3))))) LIMIT 2;
SELECT ALL * FROM vt1 WHERE ((+ (((x'')<=(vt1.c0))))) ORDER BY (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE NOCASE, ((vt1.c0)-(vt1.c0)))) AND ((((vt1.c0)%(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)));
SELECT ALL * FROM vt1 WHERE ((((+ (((x'')==(vt1.c0)))))AND(x'e6ff' COLLATE BINARY))) ORDER BY (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE NOCASE, ((vt1.c0)-(vt1.c0)))) AND ((((vt1.c0)%(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) LIMIT 0X1 INTERSECT SELECT * FROM vt1 WHERE (SUBSTR((NOT (vt1.c0)), ((NULL) NOT NULL))) ORDER BY (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE NOCASE, ((vt1.c0)-(vt1.c0)))) AND ((((vt1.c0)%(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE ((+ (((x'')<=(vt1.c0))))) ORDER BY (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE NOCASE, ((vt1.c0)-(vt1.c0)))) AND ((((vt1.c0)%(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)));
SELECT ALL * FROM vt1 WHERE ((((+ (((x'')==(vt1.c0)))))AND(x'e6ff' COLLATE BINARY))) ORDER BY (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE NOCASE, ((vt1.c0)-(vt1.c0)))) AND ((((vt1.c0)%(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) LIMIT 0X1 INTERSECT SELECT * FROM vt1 WHERE (SUBSTR((NOT (vt1.c0)), ((NULL) NOT NULL))) ORDER BY (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE NOCASE, ((vt1.c0)-(vt1.c0)))) AND ((((vt1.c0)%(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE ((- (((vt1.c0)>=(vt1.c0)))));
SELECT * FROM rt0, vt1 WHERE ((((- (((vt1.c0)=(vt1.c0)))))AND((((~ (rt0.c2))) NOT BETWEEN (((rt0.c3) BETWEEN ('-101668619') AND (NULL))) AND (CAST(rt0.c1 AS NUMERIC)))))) LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE ((((rt0.c2))==((((vt1.c0)||(vt1.c0)))))) LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE ((- (((vt1.c0)>=(vt1.c0)))));
SELECT * FROM rt0, vt1 WHERE ((((- (((vt1.c0)=(vt1.c0)))))AND((((~ (rt0.c2))) NOT BETWEEN (((rt0.c3) BETWEEN ('-101668619') AND (NULL))) AND (CAST(rt0.c1 AS NUMERIC)))))) LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE ((((rt0.c2))==((((vt1.c0)||(vt1.c0)))))) LIMIT 0x0;
SELECT ALL COUNT(*) FROM rt0 WHERE (((((rt0.c3)GLOB(rt0.c0)))<=(CHAR(rt0.c2, rt0.c1, rt0.c1)))) ORDER BY 'bGW' ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((((((rt0.c3)GLOB(rt0.c0)))==(CHAR(rt0.c2, rt0.c1, rt0.c1))))AND(((CASE rt0.c1  WHEN rt0.c0 THEN 1.68766846E8 END) NOTNULL)))) ORDER BY LOWER(DISTINCT rt0.c0), rt0.c2 DESC LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (rt0.c2) ORDER BY LOWER(DISTINCT rt0.c0), rt0.c2 DESC LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((CASE WHEN rt0.c2 THEN 0.23778741143008364 WHEN rt0.c2 THEN 'IBpw' END IN (vt1.c0 COLLATE NOCASE)));
SELECT * FROM rt0, vt1 WHERE ((((CASE WHEN rt0.c2 THEN 0.23778741143008364 WHEN rt0.c2 THEN 'IBpw' END IN (vt1.c0 COLLATE NOCASE)))AND(vt1.c0))) LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((CASE WHEN rt0.c2 THEN 0.23778741143008364 WHEN rt0.c2 THEN 'IBpw' END IN (vt1.c0 COLLATE NOCASE)));
SELECT * FROM rt0, vt1 WHERE ((((CASE WHEN rt0.c2 THEN 0.23778741143008364 WHEN rt0.c2 THEN 'IBpw' END IN (vt1.c0 COLLATE NOCASE)))AND(vt1.c0))) LIMIT 0;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON (((rt0.c3 IN (rt0.c1)))<<('W+	')) WHERE (((rt0.c3)&(rt0.c0)) COLLATE BINARY COLLATE NOCASE);
SELECT ALL * FROM vt1 NOT INDEXED CROSS JOIN rt0 ON (((rt0.c3 IN (rt0.c1)))<<('W+	')) WHERE (((rt0.c3)&(rt0.c0)) COLLATE BINARY COLLATE NOCASE) LIMIT 0x2 INTERSECT SELECT ALL * FROM vt1 CROSS JOIN rt0 ON (((rt0.c3 IN (rt0.c1)))<<('W+	')) WHERE (((((rt0.c3)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1))) IN ())) LIMIT 0X2;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON (((rt0.c3 IN (rt0.c1)))<<('W+	')) WHERE (((rt0.c3)&(rt0.c0)) COLLATE BINARY COLLATE NOCASE);
SELECT ALL * FROM vt1 NOT INDEXED CROSS JOIN rt0 ON (((rt0.c3 IN (rt0.c1)))<<('W+	')) WHERE (((rt0.c3)&(rt0.c0)) COLLATE BINARY COLLATE NOCASE) LIMIT 0x2 INTERSECT SELECT ALL * FROM vt1 CROSS JOIN rt0 ON (((rt0.c3 IN (rt0.c1)))<<('W+	')) WHERE (((((rt0.c3)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1))) IN ())) LIMIT 0X2;
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (((((((((rt0.c0)AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c2))) NOTNULL)) ORDER BY CAST((((rt0.c1, rt0.c2, rt0.c3))<((rt0.c0, rt0.c0, vt1.c0))) AS TEXT);
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (((((((((((rt0.c0)AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c2))) NOTNULL))AND((- (CAST(rt0.c1 AS TEXT)))))) ORDER BY ((CAST(rt0.c2 AS INTEGER)) NOTNULL) ASC  NULLS FIRST LIMIT 0X0;
SELECT COUNT(*) FROM vt1 WHERE (((((((((0.008663898852498964)>>(vt1.c0)))OR(((vt1.c0) IS FALSE))))AND(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))AND(((vt1.c0) IS FALSE))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((((((0.008663898852498964)>>(vt1.c0)))OR(((vt1.c0) IS FALSE))))AND(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))AND(((vt1.c0) IS FALSE)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(0.5424920228405733)))OR(((vt1.c0)*(vt1.c0)))))OR(((vt1.c0)|(vt1.c0)))));
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((NULL, vt1.c0)))) NOTNULL)) ORDER BY (NOT (vt1.c0)) COLLATE RTRIM DESC, ((vt1.c0)OR((((vt1.c0, vt1.c0)) NOT BETWEEN ((0xffffffffb0ebe309, vt1.c0)) AND ((vt1.c0, vt1.c0))))) DESC;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((NULL, vt1.c0)))) NOTNULL))AND(0X23613604))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) BETWEEN (((x'd058')==(vt1.c0))) AND (((vt1.c0) NOT NULL)))  NULLS LAST, ((CAST(vt1.c0 AS INTEGER)) NOT BETWEEN ((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0)))) AND ((vt1.c0 IN (vt1.c0, vt1.c0)))) LIMIT 0x2;
SELECT ALL MAX(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON ((x'6b') NOT BETWEEN ((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0)))) AND ((('D.') ISNULL))) WHERE (CAST(((rt0.c1)GLOB(rt0.c1)) AS NUMERIC));
SELECT DISTINCT MAX(rt0.c2) FROM vt1 INNER JOIN rt0 ON ((x'6b') NOT BETWEEN ((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0)))) AND ((('D.') ISNULL))) WHERE (CAST(((rt0.c1)GLOB(rt0.c1)) AS NUMERIC)) ORDER BY (((rt0.c1)LIKE(rt0.c1)) IN (CAST(rt0.c2 AS NUMERIC))) ASC  NULLS LAST LIMIT 3 INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM vt1 INNER JOIN rt0 ON ((x'6b') NOT BETWEEN ((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0)))) AND ((('D.') ISNULL))) WHERE (LIKELY((~ (rt0.c2)))) ORDER BY (((rt0.c1)LIKE(rt0.c1)) IN (CAST(rt0.c2 AS NUMERIC))) ASC  NULLS LAST LIMIT 3;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (CAST(rt0.c0 AS NUMERIC) COLLATE BINARY COLLATE NOCASE) ORDER BY (((rt0.c3 COLLATE BINARY, (~ (0.5876883186990538)), ((((((((rt0.c1)OR(rt0.c0)))OR(rt0.c2)))AND(rt0.c0)))OR(rt0.c1)), ((NULL) ISNULL), 0.37589023437167446))<>((((rt0.c3)LIKE(rt0.c2)), ABS(DISTINCT rt0.c3), CAST(0X2a4b4e5f AS NUMERIC), rt0.c1, CAST(rt0.c0 AS NUMERIC)))), NULL;
SELECT MAX(rt0.c3) FROM rt0 WHERE (((CAST(rt0.c0 AS NUMERIC) COLLATE BINARY COLLATE NOCASE)AND((((((((((rt0.c2))<((rt0.c3))))OR(CAST(rt0.c2 AS BLOB))))OR(((x'') NOT BETWEEN (rt0.c2) AND (rt0.c2)))))OR(rt0.c1))))) ORDER BY rt0.c2 ASC  NULLS FIRST, rt0.c1;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (vt1.c0)))|(((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY ((((((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c1)))AND((rt0.c2 IN (rt0.c1, rt0.c2)))))AND(x'')), (((vt1.c0 COLLATE BINARY, rt0.c1 COLLATE BINARY))>((rt0.c1, (rt0.c1 IN ())))) ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (vt1.c0)))|(((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY ((((((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c1)))AND((rt0.c2 IN (rt0.c1, rt0.c2)))))AND(x'')), (((vt1.c0 COLLATE BINARY, rt0.c1 COLLATE BINARY))>((rt0.c1, (rt0.c1 IN ())))) ASC LIMIT 0X0;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (vt1.c0)))|(((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY ((((((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c1)))AND((rt0.c2 IN (rt0.c1, rt0.c2)))))AND(x'')), (((vt1.c0 COLLATE BINARY, rt0.c1 COLLATE BINARY))>((rt0.c1, (rt0.c1 IN ())))) ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (vt1.c0)))|(((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY ((((((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c1)))AND((rt0.c2 IN (rt0.c1, rt0.c2)))))AND(x'')), (((vt1.c0 COLLATE BINARY, rt0.c1 COLLATE BINARY))>((rt0.c1, (rt0.c1 IN ())))) ASC LIMIT 0X0;
SELECT ALL * FROM rt0 WHERE ('0.3110504564435408');
SELECT DISTINCT * FROM rt0 WHERE ('0.3110504564435408') LIMIT 3 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (NULL) LIMIT 0X3;
SELECT ALL * FROM rt0 WHERE ('0.3110504564435408');
SELECT DISTINCT * FROM rt0 WHERE ('0.3110504564435408') LIMIT 3 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (NULL) LIMIT 0X3;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)) COLLATE RTRIM) ORDER BY 8.15593498E8 DESC  NULLS FIRST;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)) COLLATE RTRIM) ORDER BY '-499619510' ASC  NULLS FIRST, GLOB((((rt0.c0))<=((rt0.c3))), ((rt0.c2) ISNULL)), HEX(rt0.c1 COLLATE RTRIM) ASC, ((((((CASE WHEN rt0.c2 THEN rt0.c2 END)AND((~ (rt0.c3)))))OR((NOT (0.18689037570935108)))))AND(((rt0.c3)IS NOT(rt0.c2)))) LIMIT 0X1;
SELECT ALL * FROM vt1, rt0 WHERE (((((((rt0.c3)/(vt1.c0)))AND((+ (rt0.c0)))))OR(((vt1.c0) ISNULL)))) ORDER BY CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE NULL END COLLATE RTRIM DESC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (((((((rt0.c3)/(vt1.c0)))AND((+ (rt0.c0)))))OR(((vt1.c0) ISNULL)))) ORDER BY CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE NULL END COLLATE RTRIM DESC  NULLS FIRST LIMIT 0X3 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (NULL) ORDER BY CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE NULL END COLLATE RTRIM DESC  NULLS FIRST LIMIT 0X3;
SELECT ALL * FROM vt1, rt0 WHERE (((((((rt0.c3)/(vt1.c0)))AND((+ (rt0.c0)))))OR(((vt1.c0) ISNULL)))) ORDER BY CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE NULL END COLLATE RTRIM DESC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (((((((rt0.c3)/(vt1.c0)))AND((+ (rt0.c0)))))OR(((vt1.c0) ISNULL)))) ORDER BY CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE NULL END COLLATE RTRIM DESC  NULLS FIRST LIMIT 0X3 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (NULL) ORDER BY CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE NULL END COLLATE RTRIM DESC  NULLS FIRST LIMIT 0X3;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((((vt1.c0)AND(rt0.c1)))AND(rt0.c0)))OR(vt1.c0))))>=((1581940286)))) ORDER BY ((LIKELIHOOD(rt0.c3, rt0.c3))%('99367454')), CASE WHEN (((rt0.c1, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, 0.10675050878372638))) THEN rt0.c3 COLLATE RTRIM END DESC, CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 WHEN 'now ' THEN rt0.c0 WHEN rt0.c2 THEN vt1.c0 END COLLATE NOCASE COLLATE BINARY  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((((vt1.c0)AND(rt0.c1)))AND(rt0.c0)))OR(vt1.c0))))>=((1581940286)))) ORDER BY ((LIKELIHOOD(rt0.c3, rt0.c3))%('99367454')), CASE WHEN (((rt0.c1, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, 0.10675050878372638))) THEN rt0.c3 COLLATE RTRIM END DESC, CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 WHEN 'now ' THEN rt0.c0 WHEN rt0.c2 THEN vt1.c0 END COLLATE NOCASE COLLATE BINARY  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((((vt1.c0)AND(rt0.c1)))AND(rt0.c0)))OR(vt1.c0))))>=((1581940286)))) ORDER BY ((LIKELIHOOD(rt0.c3, rt0.c3))%('99367454')), CASE WHEN (((rt0.c1, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c0, 0.10675050878372638))) THEN rt0.c3 COLLATE RTRIM END DESC, CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 WHEN 'now ' THEN rt0.c0 WHEN rt0.c2 THEN vt1.c0 END COLLATE NOCASE COLLATE BINARY  NULLS FIRST;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON ((CAST(NULL AS TEXT)) NOT BETWEEN ((vt1.c0 IN ())) AND (((rt0.c3) IS FALSE))) WHERE (((((vt1.c0)||(rt0.c0)))OR(CAST(vt1.c0 AS TEXT))));
SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON ((CAST(NULL AS TEXT)) NOT BETWEEN ((vt1.c0 IN ())) AND (((rt0.c3) IS FALSE))) WHERE (((((((vt1.c0)||(rt0.c0)))OR(CAST(vt1.c0 AS TEXT))))AND(CAST(((((rt0.c2)OR(rt0.c2)))AND(rt0.c2)) AS NUMERIC)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON ((CAST(NULL AS TEXT)) NOT BETWEEN ((vt1.c0 IN ())) AND (((rt0.c3) IS FALSE))) WHERE (CASE WHEN rt0.c0 THEN vt1.c0 END COLLATE BINARY) LIMIT 0X1;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON ((CAST(NULL AS TEXT)) NOT BETWEEN ((vt1.c0 IN ())) AND (((rt0.c3) IS FALSE))) WHERE (((((vt1.c0)||(rt0.c0)))OR(CAST(vt1.c0 AS TEXT))));
SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON ((CAST(NULL AS TEXT)) NOT BETWEEN ((vt1.c0 IN ())) AND (((rt0.c3) IS FALSE))) WHERE (((((((vt1.c0)||(rt0.c0)))OR(CAST(vt1.c0 AS TEXT))))AND(CAST(((((rt0.c2)OR(rt0.c2)))AND(rt0.c2)) AS NUMERIC)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON ((CAST(NULL AS TEXT)) NOT BETWEEN ((vt1.c0 IN ())) AND (((rt0.c3) IS FALSE))) WHERE (CASE WHEN rt0.c0 THEN vt1.c0 END COLLATE BINARY) LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)<<(vt1.c0)) COLLATE NOCASE);
SELECT * FROM vt1 WHERE (((vt1.c0)<<(vt1.c0)) COLLATE NOCASE) ORDER BY ((QUOTE(vt1.c0))OR(((vt1.c0)&(vt1.c0)))) DESC LIMIT 2;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)<<(vt1.c0)) COLLATE NOCASE);
SELECT * FROM vt1 WHERE (((vt1.c0)<<(vt1.c0)) COLLATE NOCASE) ORDER BY ((QUOTE(vt1.c0))OR(((vt1.c0)&(vt1.c0)))) DESC LIMIT 2;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (JULIANDAY(0.6758348513450284, IFNULL(rt0.c0, rt0.c0), ((NULL)>(rt0.c0)), load_extension(rt0.c2, rt0.c1), ((((((((-1.16899011E8)OR(rt0.c1)))OR(rt0.c3)))AND(rt0.c2)))OR(rt0.c1)))) ORDER BY CASE WHEN TRIM(rt0.c0, rt0.c0) THEN 'nF' WHEN (rt0.c0 IN (rt0.c3)) THEN CAST(rt0.c1 AS BLOB) WHEN (NOT (x'78')) THEN ((((((rt0.c3)AND(rt0.c1)))AND(rt0.c0)))AND(rt0.c1)) END, 0.9807729550884466 DESC  NULLS FIRST, ((((((((((((rt0.c0)<=(rt0.c0)))OR(rt0.c2 COLLATE NOCASE)))OR((NOT (rt0.c0)))))AND(((rt0.c1)IS NOT(rt0.c0)))))OR(CAST(rt0.c1 AS BLOB))))OR((rt0.c3 IN ()))), UNLIKELY(((rt0.c3)>>(rt0.c3))) DESC  NULLS FIRST;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (JULIANDAY(0.6758348513450284, IFNULL(rt0.c0, rt0.c0), ((NULL)>(rt0.c0)), load_extension(rt0.c2, rt0.c1), ((((((((-1.16899011E8)OR(rt0.c1)))OR(rt0.c3)))AND(rt0.c2)))OR(rt0.c1)))) ORDER BY (((((rt0.c1, rt0.c1)) BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c1, rt0.c2)))) NOT BETWEEN (x'02') AND (((rt0.c0)&(rt0.c2)))) ASC, rt0.c1 COLLATE NOCASE  NULLS FIRST, x'1a83' COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (CAST(((rt0.c3)IS(rt0.c0)) AS NUMERIC)) ORDER BY (CAST(rt0.c0 AS REAL) IN ()) ASC;
SELECT * FROM rt0 WHERE (((CAST(((rt0.c3)IS(rt0.c0)) AS NUMERIC))AND((((rt0.c1, rt0.c1, rt0.c2)) NOT BETWEEN ((NULL, rt0.c0 COLLATE RTRIM, (rt0.c3 IN ()))) AND ((((rt0.c1)|(rt0.c3)), rt0.c2, rt0.c2 COLLATE RTRIM)))))) ORDER BY (CAST(rt0.c0 AS REAL) IN ()) ASC LIMIT 1;
SELECT ALL * FROM rt0 WHERE (CAST(((rt0.c3)IS(rt0.c0)) AS NUMERIC)) ORDER BY (CAST(rt0.c0 AS REAL) IN ()) ASC;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((vt1.c0)>(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((vt1.c0)>(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0;
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0))=((rt0.c3))) COLLATE NOCASE);
SELECT ALL * FROM vt1, rt0 WHERE ((((((vt1.c0))==((rt0.c3))) COLLATE NOCASE)AND(((((rt0.c2) IS FALSE)) NOT BETWEEN ((((rt0.c3, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c0, vt1.c0)))) AND (''))))) ORDER BY (((((- (rt0.c2)))AND(((rt0.c2)*(rt0.c2)))))AND(CAST('' AS INTEGER))) ASC, ((((((CAST(rt0.c2 AS REAL))AND(CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 END)))OR(rt0.c1)))AND(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c1)))) LIMIT 0x1 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((+ (vt1.c0)) COLLATE RTRIM) ORDER BY (((((- (rt0.c2)))AND(((rt0.c2)*(rt0.c2)))))AND(CAST('' AS INTEGER))) ASC, ((((((CAST(rt0.c2 AS REAL))AND(CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 END)))OR(rt0.c1)))AND(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c1)))) LIMIT 1;
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0))=((rt0.c3))) COLLATE NOCASE);
SELECT ALL * FROM vt1, rt0 WHERE ((((((vt1.c0))==((rt0.c3))) COLLATE NOCASE)AND(((((rt0.c2) IS FALSE)) NOT BETWEEN ((((rt0.c3, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c0, vt1.c0)))) AND (''))))) ORDER BY (((((- (rt0.c2)))AND(((rt0.c2)*(rt0.c2)))))AND(CAST('' AS INTEGER))) ASC, ((((((CAST(rt0.c2 AS REAL))AND(CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 END)))OR(rt0.c1)))AND(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c1)))) LIMIT 0x1 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((+ (vt1.c0)) COLLATE RTRIM) ORDER BY (((((- (rt0.c2)))AND(((rt0.c2)*(rt0.c2)))))AND(CAST('' AS INTEGER))) ASC, ((((((CAST(rt0.c2 AS REAL))AND(CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 END)))OR(rt0.c1)))AND(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c1)))) LIMIT 1;
SELECT MAX(rt0.c1) FROM rt0 WHERE (((((((rt0.c3)OR(rt0.c1)))OR(rt0.c0))) IS FALSE));
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (((((((((rt0.c3)OR(rt0.c1)))OR(rt0.c0))) IS FALSE))AND(((CAST(rt0.c2 AS INTEGER)) BETWEEN ('455756160' COLLATE BINARY) AND (((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3))))))) ORDER BY ((((- (rt0.c0)), ((rt0.c1) IS TRUE)))>=((rt0.c1, rt0.c0 COLLATE NOCASE))) DESC;
SELECT ALL * FROM rt0, vt1 WHERE (((rt0.c0) BETWEEN ((rt0.c2 IN (vt1.c0, rt0.c1))) AND ((rt0.c0 IN (rt0.c3)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c0) BETWEEN ((rt0.c2 IN (vt1.c0, rt0.c1))) AND ((rt0.c0 IN (rt0.c3))))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ((rt0.c2)>=(rt0.c0))  WHEN CAST(rt0.c0 AS REAL) THEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c2 END WHEN (0x3202743d IN (rt0.c3)) THEN vt1.c0 ELSE rt0.c2 END);
SELECT ALL * FROM rt0, vt1 WHERE (((rt0.c0) BETWEEN ((rt0.c2 IN (vt1.c0, rt0.c1))) AND ((rt0.c0 IN (rt0.c3)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c0) BETWEEN ((rt0.c2 IN (vt1.c0, rt0.c1))) AND ((rt0.c0 IN (rt0.c3))))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ((rt0.c2)>=(rt0.c0))  WHEN CAST(rt0.c0 AS REAL) THEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c2 END WHEN (0x3202743d IN (rt0.c3)) THEN vt1.c0 ELSE rt0.c2 END);
SELECT * FROM rt0, vt1 WHERE (((CAST(vt1.c0 AS BLOB))LIKE(SQLITE_COMPILEOPTION_GET(rt0.c1)))) ORDER BY CASE WHEN (((-548393973, rt0.c2))=((rt0.c2, rt0.c1))) THEN (((rt0.c1, vt1.c0, rt0.c2))<((rt0.c2, x'fdef0c', vt1.c0))) END ASC  NULLS FIRST, ((((CAST(rt0.c0 AS BLOB))AND(((rt0.c2)OR(0.5519315973659021)))))OR(CAST(rt0.c2 AS TEXT))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((CAST(vt1.c0 AS BLOB))LIKE(SQLITE_COMPILEOPTION_GET(rt0.c1))))AND(CASE WHEN LIKELIHOOD(DISTINCT rt0.c0, vt1.c0) THEN ((x'62') NOT BETWEEN (rt0.c3) AND (rt0.c2)) WHEN ((rt0.c2) NOT NULL) THEN (rt0.c2 IN ()) ELSE rt0.c2 END))) ORDER BY ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c2)) COLLATE BINARY ASC  NULLS LAST, (((- (rt0.c1))) NOT BETWEEN (IFNULL(DISTINCT rt0.c2, rt0.c2)) AND (x'd4')) ASC LIMIT 0X0;
SELECT * FROM rt0, vt1 WHERE (((CAST(vt1.c0 AS BLOB))LIKE(SQLITE_COMPILEOPTION_GET(rt0.c1)))) ORDER BY CASE WHEN (((-548393973, rt0.c2))=((rt0.c2, rt0.c1))) THEN (((rt0.c1, vt1.c0, rt0.c2))<((rt0.c2, x'fdef0c', vt1.c0))) END ASC  NULLS FIRST, ((((CAST(rt0.c0 AS BLOB))AND(((rt0.c2)OR(0.5519315973659021)))))OR(CAST(rt0.c2 AS TEXT))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((CAST(vt1.c0 AS BLOB))LIKE(SQLITE_COMPILEOPTION_GET(rt0.c1))))AND(CASE WHEN LIKELIHOOD(DISTINCT rt0.c0, vt1.c0) THEN ((x'62') NOT BETWEEN (rt0.c3) AND (rt0.c2)) WHEN ((rt0.c2) NOT NULL) THEN (rt0.c2 IN ()) ELSE rt0.c2 END))) ORDER BY ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c2)) COLLATE BINARY ASC  NULLS LAST, (((- (rt0.c1))) NOT BETWEEN (IFNULL(DISTINCT rt0.c2, rt0.c2)) AND (x'd4')) ASC LIMIT 0X0;
SELECT * FROM rt0 WHERE ((((rt0.c0)IS(rt0.c1)) IN ()));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c0)IS(rt0.c1)) IN ()))AND((('T')>(CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END))))) ORDER BY rt0.c0 COLLATE NOCASE COLLATE BINARY ASC  NULLS LAST;
SELECT * FROM rt0 WHERE ((((rt0.c0)IS(rt0.c1)) IN ()));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c0)IS(rt0.c1)) IN ()))AND((('T')>(CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END))))) ORDER BY rt0.c0 COLLATE NOCASE COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON load_extension(TRIM(vt1.c0, rt0.c3), ((rt0.c0) NOT BETWEEN (rt0.c0) AND (NULL))) WHERE (((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c3))) NOTNULL));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON load_extension(TRIM(vt1.c0, rt0.c3), ((rt0.c0) NOT BETWEEN (rt0.c0) AND (NULL))) WHERE (((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c3))) NOTNULL)) ORDER BY (((('z*o')||(rt0.c0)))LIKE(vt1.c0)) ASC, rt0.c0 DESC  NULLS FIRST, ((json_valid(rt0.c0))/(NULL)) ASC LIMIT 0;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON load_extension(TRIM(vt1.c0, rt0.c3), ((rt0.c0) NOT BETWEEN (rt0.c0) AND (NULL))) WHERE (((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c3))) NOTNULL));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON load_extension(TRIM(vt1.c0, rt0.c3), ((rt0.c0) NOT BETWEEN (rt0.c0) AND (NULL))) WHERE (((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c3))) NOTNULL)) ORDER BY (((('z*o')||(rt0.c0)))LIKE(vt1.c0)) ASC, rt0.c0 DESC  NULLS FIRST, ((json_valid(rt0.c0))/(NULL)) ASC LIMIT 0;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (CAST('206543958' AS REAL)) ORDER BY (rt0.c3 IN ()) COLLATE RTRIM DESC;
SELECT DISTINCT MAX(rt0.c3) FROM vt1 NOT INDEXED, rt0 WHERE (((CAST('206543958' AS REAL))AND(((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR('-913974696')))AND(rt0.c0)))OR(rt0.c3)) COLLATE BINARY))) ORDER BY CAST(rt0.c3 AS NUMERIC) LIMIT 1;
SELECT * FROM rt0 CROSS JOIN vt1 ON 0.3002839395146273 WHERE ((+ (rt0.c2 COLLATE BINARY))) ORDER BY CAST(CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END AS INTEGER) ASC  NULLS FIRST, CASE WHEN CASE vt1.c0  WHEN vt1.c0 THEN rt0.c2 END THEN ((rt0.c2)AND(rt0.c3)) WHEN ((rt0.c3) IS TRUE) THEN ((rt0.c1) IS FALSE) END ASC  NULLS LAST, ((((((((vt1.c0) ISNULL))OR(((rt0.c2) NOT BETWEEN ('-876079603') AND (rt0.c3)))))OR(-1.812739594E9)))OR(((x'd42a')/(x'b985ef87')))) DESC;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON 0.3002839395146273 WHERE ((+ (rt0.c2 COLLATE BINARY))) ORDER BY IFNULL((+ (rt0.c1)), ((((rt0.c3)OR(rt0.c3)))AND(rt0.c1))) ASC, (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c1 COLLATE BINARY)))  NULLS FIRST, (((rt0.c0 IN (rt0.c2)))<=((((rt0.c0))<((rt0.c0))))) LIMIT 1 INTERSECT SELECT * FROM rt0 CROSS JOIN vt1 ON 0.3002839395146273 WHERE ((+ ((NOT (0.9146884083772261))))) ORDER BY IFNULL((+ (rt0.c1)), ((((rt0.c3)OR(rt0.c3)))AND(rt0.c1))) ASC, (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c1 COLLATE BINARY)))  NULLS FIRST, (((rt0.c0 IN (rt0.c2)))<=((((rt0.c0))<((rt0.c0))))) LIMIT 0x1;
SELECT * FROM rt0 CROSS JOIN vt1 ON 0.3002839395146273 WHERE ((+ (rt0.c2 COLLATE BINARY))) ORDER BY CAST(CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END AS INTEGER) ASC  NULLS FIRST, CASE WHEN CASE vt1.c0  WHEN vt1.c0 THEN rt0.c2 END THEN ((rt0.c2)AND(rt0.c3)) WHEN ((rt0.c3) IS TRUE) THEN ((rt0.c1) IS FALSE) END ASC  NULLS LAST, ((((((((vt1.c0) ISNULL))OR(((rt0.c2) NOT BETWEEN ('-876079603') AND (rt0.c3)))))OR(-1.812739594E9)))OR(((x'd42a')/(x'b985ef87')))) DESC;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON 0.3002839395146273 WHERE ((+ (rt0.c2 COLLATE BINARY))) ORDER BY IFNULL((+ (rt0.c1)), ((((rt0.c3)OR(rt0.c3)))AND(rt0.c1))) ASC, (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c1 COLLATE BINARY)))  NULLS FIRST, (((rt0.c0 IN (rt0.c2)))<=((((rt0.c0))<((rt0.c0))))) LIMIT 1 INTERSECT SELECT * FROM rt0 CROSS JOIN vt1 ON 0.3002839395146273 WHERE ((+ ((NOT (0.9146884083772261))))) ORDER BY IFNULL((+ (rt0.c1)), ((((rt0.c3)OR(rt0.c3)))AND(rt0.c1))) ASC, (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c1 COLLATE BINARY)))  NULLS FIRST, (((rt0.c0 IN (rt0.c2)))<=((((rt0.c0))<((rt0.c0))))) LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c2, rt0.c1))>=((vt1.c0, rt0.c3))), TOTAL_CHANGES(), ((rt0.c2)>>(rt0.c2)), (rt0.c3 IN ())))<((COALESCE(rt0.c3, rt0.c3, rt0.c1), vt1.c0, ((rt0.c2)|(rt0.c1)), CASE rt0.c3  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END)))) ORDER BY ((rt0.c2 COLLATE NOCASE) NOT BETWEEN ((- (rt0.c1))) AND (((rt0.c1)+(vt1.c0))))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((((rt0.c2, rt0.c1))>((vt1.c0, rt0.c3))), TOTAL_CHANGES(), ((rt0.c2)>>(rt0.c2)), (rt0.c3 IN ())))<((COALESCE(rt0.c3, rt0.c3, rt0.c1), vt1.c0, ((rt0.c2)|(rt0.c1)), CASE rt0.c3  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END)))) ORDER BY ((rt0.c2 COLLATE NOCASE) NOT BETWEEN ((- (rt0.c1))) AND (((rt0.c1)+(vt1.c0))))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c2, rt0.c1))>=((vt1.c0, rt0.c3))), TOTAL_CHANGES(), ((rt0.c2)>>(rt0.c2)), (rt0.c3 IN ())))<((COALESCE(rt0.c3, rt0.c3, rt0.c1), vt1.c0, ((rt0.c2)|(rt0.c1)), CASE rt0.c3  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END)))) ORDER BY ((rt0.c2 COLLATE NOCASE) NOT BETWEEN ((- (rt0.c1))) AND (((rt0.c1)+(vt1.c0))))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((((rt0.c2, rt0.c1))>((vt1.c0, rt0.c3))), TOTAL_CHANGES(), ((rt0.c2)>>(rt0.c2)), (rt0.c3 IN ())))<((COALESCE(rt0.c3, rt0.c3, rt0.c1), vt1.c0, ((rt0.c2)|(rt0.c1)), CASE rt0.c3  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END)))) ORDER BY ((rt0.c2 COLLATE NOCASE) NOT BETWEEN ((- (rt0.c1))) AND (((rt0.c1)+(vt1.c0))))  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)AND(((vt1.c0)OR(vt1.c0)))))OR(((vt1.c0)||(vt1.c0)))))AND(((vt1.c0)>(vt1.c0)))))AND(((vt1.c0) NOT NULL))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)AND(((vt1.c0)OR(vt1.c0)))))OR(((vt1.c0)||(vt1.c0)))))AND(((vt1.c0)>(vt1.c0)))))AND(((vt1.c0) NOT NULL)))) ORDER BY CASE WHEN (((vt1.c0))<=(('y'))) THEN CASE WHEN vt1.c0 THEN vt1.c0 END END  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0, vt1.c0)))<=((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))!=((vt1.c0, vt1.c0, vt1.c0, vt1.c0)))))) ORDER BY CASE WHEN (((vt1.c0))<=(('y'))) THEN CASE WHEN vt1.c0 THEN vt1.c0 END END  NULLS FIRST LIMIT 1;
SELECT * FROM rt0 WHERE (CASE ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3))  WHEN (rt0.c1 IN (rt0.c0)) THEN (NULL IN ()) WHEN CAST(rt0.c0 AS INTEGER) THEN x'e6ed' END) ORDER BY (~ (CASE 0.4440984994127104  WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c3 END));
SELECT ALL * FROM rt0 WHERE (((CASE ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3))  WHEN (rt0.c1 IN (rt0.c0)) THEN (NULL IN ()) WHEN CAST(rt0.c0 AS INTEGER) THEN x'e6ed' END)AND((~ ('-695584596')) COLLATE RTRIM))) ORDER BY ((rt0.c3)<=(rt0.c1)) COLLATE BINARY  NULLS LAST LIMIT 1;
SELECT * FROM rt0 WHERE (CASE ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3))  WHEN (rt0.c1 IN (rt0.c0)) THEN (NULL IN ()) WHEN CAST(rt0.c0 AS INTEGER) THEN x'e6ed' END) ORDER BY (~ (CASE 0.4440984994127104  WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c3 END));
SELECT ALL * FROM rt0 WHERE (((CASE ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3))  WHEN (rt0.c1 IN (rt0.c0)) THEN (NULL IN ()) WHEN CAST(rt0.c0 AS INTEGER) THEN x'e6ed' END)AND((~ ('-695584596')) COLLATE RTRIM))) ORDER BY ((rt0.c3)<=(rt0.c1)) COLLATE BINARY  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (NOT (vt1.c0 COLLATE RTRIM)) DESC  NULLS FIRST, ((((vt1.c0)&(vt1.c0))) NOT BETWEEN (TRIM(vt1.c0, vt1.c0)) AND (((vt1.c0) ISNULL))) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (NOT (vt1.c0 COLLATE RTRIM)) DESC  NULLS FIRST, ((((vt1.c0)&(vt1.c0))) NOT BETWEEN (TRIM(vt1.c0, vt1.c0)) AND (((vt1.c0) ISNULL))) ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS REAL)) IS TRUE)) ORDER BY (NOT (vt1.c0 COLLATE RTRIM)) DESC  NULLS FIRST, ((((vt1.c0)&(vt1.c0))) NOT BETWEEN (TRIM(vt1.c0, vt1.c0)) AND (((vt1.c0) ISNULL))) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (NOT (vt1.c0 COLLATE RTRIM)) DESC  NULLS FIRST, ((((vt1.c0)&(vt1.c0))) NOT BETWEEN (TRIM(vt1.c0, vt1.c0)) AND (((vt1.c0) ISNULL))) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (NOT (vt1.c0 COLLATE RTRIM)) DESC  NULLS FIRST, ((((vt1.c0)&(vt1.c0))) NOT BETWEEN (TRIM(vt1.c0, vt1.c0)) AND (((vt1.c0) ISNULL))) ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS REAL)) IS TRUE)) ORDER BY (NOT (vt1.c0 COLLATE RTRIM)) DESC  NULLS FIRST, ((((vt1.c0)&(vt1.c0))) NOT BETWEEN (TRIM(vt1.c0, vt1.c0)) AND (((vt1.c0) ISNULL))) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (((TOTAL_CHANGES())IS NOT(CASE WHEN vt1.c0 THEN vt1.c0 WHEN -2056718198 THEN vt1.c0 END)));
SELECT DISTINCT * FROM vt1 WHERE (((TOTAL_CHANGES())IS NOT(CASE WHEN vt1.c0 THEN vt1.c0 WHEN 0xffffffff8568f88a THEN vt1.c0 END))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM)-((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))));
SELECT ALL * FROM vt1 WHERE (((TOTAL_CHANGES())IS NOT(CASE WHEN vt1.c0 THEN vt1.c0 WHEN -2056718198 THEN vt1.c0 END)));
SELECT DISTINCT * FROM vt1 WHERE (((TOTAL_CHANGES())IS NOT(CASE WHEN vt1.c0 THEN vt1.c0 WHEN 0xffffffff8568f88a THEN vt1.c0 END))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM)-((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))));
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (NULL);
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (NULL) ORDER BY x'' ASC, ((((((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c0)))AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c1)) COLLATE RTRIM ASC INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (CASE WHEN ((rt0.c1)IS NOT(rt0.c0)) THEN (NOT ('')) ELSE 0.8331212026283341 END) ORDER BY x'' ASC, ((((((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c0)))AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c1)) COLLATE RTRIM ASC;
SELECT ALL MAX(vt1.c0) FROM vt1, rt0 WHERE (NULL);
SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE (NULL) ORDER BY (0.490943024471467 COLLATE NOCASE IN (rt0.c2 COLLATE RTRIM, ((rt0.c0)IS(rt0.c1)))) LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE (((((vt1.c0, vt1.c0))!=((x'b5', '-1733680795'))) IN ())) ORDER BY (0.490943024471467 COLLATE NOCASE IN (rt0.c2 COLLATE RTRIM, ((rt0.c0)IS(rt0.c1)))) LIMIT 1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST('464146102' AS NUMERIC)) ORDER BY vt1.c0  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST('464146102' AS NUMERIC))AND((((((((((((((vt1.c0))>((vt1.c0))))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))OR(((vt1.c0) NOTNULL))))AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(vt1.c0)))OR(vt1.c0 COLLATE RTRIM))))) ORDER BY ((((((NULL)AND(vt1.c0 COLLATE NOCASE)))OR(vt1.c0)))OR(((vt1.c0) BETWEEN (vt1.c0) AND ('뛱4z NJn'))))  NULLS LAST, ((((vt1.c0) NOTNULL))+(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) DESC  NULLS FIRST, (((vt1.c0 IN (vt1.c0))) NOTNULL)  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN (x''))) NOT BETWEEN (((vt1.c0) BETWEEN (NULL) AND (vt1.c0))) AND (CAST(vt1.c0 AS TEXT)))) ORDER BY ((((((CASE WHEN vt1.c0 THEN vt1.c0 END)AND(vt1.c0)))OR((((vt1.c0, 'i]'))<=((vt1.c0, NULL))))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, ((vt1.c0)-(vt1.c0)) COLLATE NOCASE DESC, ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))/(((vt1.c0)IS NOT(vt1.c0)))), ((CAST(vt1.c0 AS TEXT)) NOT BETWEEN (((vt1.c0) IS FALSE)) AND (-1793100658)) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN (x''))) NOT BETWEEN (((vt1.c0) BETWEEN (NULL) AND (vt1.c0))) AND (CAST(vt1.c0 AS TEXT)))) ORDER BY ((((((CASE WHEN vt1.c0 THEN vt1.c0 END)AND(vt1.c0)))OR((((vt1.c0, 'i]'))<=((vt1.c0, NULL))))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, ((vt1.c0)-(vt1.c0)) COLLATE NOCASE DESC, ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))/(((vt1.c0)IS NOT(vt1.c0)))), ((CAST(vt1.c0 AS TEXT)) NOT BETWEEN (((vt1.c0) IS FALSE)) AND (-1793100658)) ASC  NULLS FIRST LIMIT 5 INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (((((((((vt1.c0)*(vt1.c0)))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND ('j ')))))AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND((vt1.c0 IN (vt1.c0))))) ORDER BY ((((((CASE WHEN vt1.c0 THEN vt1.c0 END)AND(vt1.c0)))OR((((vt1.c0, 'i]'))<=((vt1.c0, NULL))))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, ((vt1.c0)-(vt1.c0)) COLLATE NOCASE DESC, ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))/(((vt1.c0)IS NOT(vt1.c0)))), ((CAST(vt1.c0 AS TEXT)) NOT BETWEEN (((vt1.c0) IS FALSE)) AND (0Xffffffff951f748e)) ASC  NULLS FIRST LIMIT 5;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (rt0.c1) ORDER BY 0.9269781556589975 DESC  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE (((rt0.c1)AND(((CAST(rt0.c2 AS TEXT))<=(((vt1.c0)>=(rt0.c2))))))) ORDER BY 0.9269781556589975 DESC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE (((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 END)!=(rt0.c1))) ORDER BY 0.9269781556589975 DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT BETWEEN (HEX(DISTINCT vt1.c0)) AND ((+ (vt1.c0))))) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT BETWEEN (HEX(DISTINCT vt1.c0)) AND ((+ (vt1.c0))))) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c0)==(vt1.c0)) AS BLOB)) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT BETWEEN (HEX(DISTINCT vt1.c0)) AND ((+ (vt1.c0))))) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT BETWEEN (HEX(DISTINCT vt1.c0)) AND ((+ (vt1.c0))))) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c0)==(vt1.c0)) AS BLOB)) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC) DESC  NULLS FIRST;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (CAST((rt0.c0 IN (rt0.c2)) AS INTEGER)) ORDER BY rt0.c2, (((vt1.c0 IN ()))==(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 END)) DESC  NULLS LAST;
SELECT DISTINCT MIN(rt0.c1) FROM rt0, vt1 WHERE (CAST((rt0.c0 IN (rt0.c2)) AS INTEGER)) ORDER BY rt0.c2, (((vt1.c0 IN ()))=(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 END)) DESC  NULLS LAST LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0, vt1 WHERE ((((vt1.c0 IN (vt1.c0))) BETWEEN ((((rt0.c2, rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c2, rt0.c2)) AND ((rt0.c0, rt0.c2, rt0.c2)))) AND (((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3))))) ORDER BY rt0.c2, (((vt1.c0 IN ()))==(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 END)) DESC  NULLS LAST LIMIT 1;
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (GLOB((+ (0.523149387453121)), ((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c0))));
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE (GLOB((+ (0.523149387453121)), ((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c0)))) ORDER BY CAST((~ (rt0.c1)) AS NUMERIC) DESC  NULLS LAST, ((CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN vt1.c0 ELSE vt1.c0 END)LIKE((rt0.c2 IN (rt0.c0)))) DESC  NULLS FIRST LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY (((NOT (vt1.c0)))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))), ((((vt1.c0)AND((vt1.c0 IN (vt1.c0)))))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))), vt1.c0 DESC;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((vt1.c0) IS TRUE) COLLATE NOCASE, (vt1.c0 IN ((NOT (vt1.c0)))) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (ABS(DISTINCT (+ (vt1.c0)))) ORDER BY ((vt1.c0) IS TRUE) COLLATE NOCASE, (vt1.c0 IN ((NOT (vt1.c0)))) ASC  NULLS LAST LIMIT 0X2;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON CASE WHEN rt0.c2 COLLATE NOCASE THEN ((((rt0.c1)OR(rt0.c1)))OR('-1153288785')) WHEN ((((((rt0.c3)OR('55232972')))OR(NULL)))OR(rt0.c2)) THEN ((rt0.c3)AND('U')) ELSE ((rt0.c1) ISNULL) END WHERE (vt1.c0) ORDER BY ((rt0.c0) IS TRUE) COLLATE BINARY  NULLS LAST, (TRIM(DISTINCT rt0.c2, rt0.c3) IN (((rt0.c2) NOT BETWEEN (rt0.c2) AND ('-1134419037')), ((rt0.c1) ISNULL)));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON CASE WHEN rt0.c2 COLLATE NOCASE THEN ((((rt0.c1)OR(rt0.c1)))OR('-1153288785')) WHEN ((((((rt0.c3)OR('55232972')))OR(NULL)))OR(rt0.c2)) THEN ((rt0.c3)AND('U')) ELSE ((rt0.c1) ISNULL) END WHERE (vt1.c0) ORDER BY ((rt0.c2) ISNULL) COLLATE RTRIM, CASE WHEN '' THEN ((x'fa0451')|(rt0.c3)) WHEN ((rt0.c2)%(rt0.c2)) THEN CASE WHEN rt0.c0 THEN 0.9292078423180651 WHEN rt0.c3 THEN '2	(tLp.' WHEN rt0.c1 THEN NULL WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END WHEN ((rt0.c3) NOTNULL) THEN ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c2)) ELSE COALESCE(DISTINCT rt0.c1, rt0.c0, rt0.c1) END ASC  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON CASE WHEN rt0.c2 COLLATE NOCASE THEN ((((rt0.c1)OR(rt0.c1)))OR('-1153288785')) WHEN ((((((rt0.c3)OR('55232972')))OR(NULL)))OR(rt0.c2)) THEN ((rt0.c3)AND('U')) ELSE ((rt0.c1) ISNULL) END WHERE (vt1.c0) ORDER BY ((rt0.c0) IS TRUE) COLLATE BINARY  NULLS LAST, (TRIM(DISTINCT rt0.c2, rt0.c3) IN (((rt0.c2) NOT BETWEEN (rt0.c2) AND ('-1134419037')), ((rt0.c1) ISNULL)));
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON CASE WHEN rt0.c2 COLLATE NOCASE THEN ((((rt0.c1)OR(rt0.c1)))OR('-1153288785')) WHEN ((((((rt0.c3)OR('55232972')))OR(NULL)))OR(rt0.c2)) THEN ((rt0.c3)AND('U')) ELSE ((rt0.c1) ISNULL) END WHERE (vt1.c0) ORDER BY ((rt0.c2) ISNULL) COLLATE RTRIM, CASE WHEN '' THEN ((x'fa0451')|(rt0.c3)) WHEN ((rt0.c2)%(rt0.c2)) THEN CASE WHEN rt0.c0 THEN 0.9292078423180651 WHEN rt0.c3 THEN '2	(tLp.' WHEN rt0.c1 THEN NULL WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END WHEN ((rt0.c3) NOTNULL) THEN ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c2)) ELSE COALESCE(DISTINCT rt0.c1, rt0.c0, rt0.c1) END ASC  NULLS LAST LIMIT 3;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0)/(vt1.c0)) AS INTEGER));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0)/(vt1.c0)) AS INTEGER)) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (UPPER('-1151652889'));
SELECT * FROM rt0, vt1 WHERE (CASE WHEN ((rt0.c3)&(rt0.c2)) THEN (- (rt0.c0)) END) ORDER BY '0.23994291176300608' ASC;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN ((rt0.c3)&(rt0.c2)) THEN (- (rt0.c0)) END) ORDER BY '0.23994291176300608' ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (NULL) ORDER BY '0.23994291176300608' ASC LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (CASE WHEN ((rt0.c3)&(rt0.c2)) THEN (- (rt0.c0)) END) ORDER BY '0.23994291176300608' ASC;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN ((rt0.c3)&(rt0.c2)) THEN (- (rt0.c0)) END) ORDER BY '0.23994291176300608' ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (NULL) ORDER BY '0.23994291176300608' ASC LIMIT 0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c0 END AS BLOB));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c0 END AS BLOB)) ORDER BY ((((vt1.c0)IS NOT(vt1.c0))) NOT NULL) ASC, ((((vt1.c0)/(vt1.c0)))|(((vt1.c0)||(vt1.c0)))) ASC  NULLS FIRST LIMIT 0x3 INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((x'70' IN ())) ORDER BY ((((vt1.c0)IS NOT(vt1.c0))) NOT NULL) ASC, ((((vt1.c0)/(vt1.c0)))|(((vt1.c0)||(vt1.c0)))) ASC  NULLS FIRST LIMIT 0X3;
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE (CASE ((((0Xffffffffc3f40850)AND(rt0.c3)))OR(rt0.c1))  WHEN TYPEOF(rt0.c0) THEN ((x'')<>(rt0.c2)) WHEN ((rt0.c3)<(rt0.c2)) THEN ((rt0.c1)>=(rt0.c0)) WHEN ((((((((rt0.c1)AND(NULL)))AND(vt1.c0)))OR(vt1.c0)))AND(rt0.c0)) THEN (~ (rt0.c1)) ELSE ((rt0.c0) IS TRUE) END) ORDER BY (+ ((((rt0.c2, rt0.c0)) BETWEEN ((rt0.c2, vt1.c0)) AND (('1304629726', '-0.0'))))), ((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) NOTNULL)  NULLS LAST, ABS(DISTINCT ((rt0.c2)/(rt0.c0))), (rt0.c3 IN (rt0.c0, rt0.c2)) COLLATE BINARY;
SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE (((CASE ((((0xffffffffc3f40850)AND(rt0.c3)))OR(rt0.c1))  WHEN TYPEOF(rt0.c0) THEN ((x'')<>(rt0.c2)) WHEN ((rt0.c3)<(rt0.c2)) THEN ((rt0.c1)==(rt0.c0)) WHEN ((((((((rt0.c1)AND(NULL)))AND(vt1.c0)))OR(vt1.c0)))AND(rt0.c0)) THEN (~ (rt0.c1)) ELSE ((rt0.c0) IS TRUE) END)AND((((((rt0.c1)&(rt0.c3)), rt0.c1, ((rt0.c2)IS NOT(rt0.c3))))<=((IFNULL(DISTINCT rt0.c3, rt0.c0), ((rt0.c3)+(rt0.c3)), '-567182715')))))) ORDER BY ((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c3))) NOT NULL)  NULLS LAST, ((((((((vt1.c0)OR('Y| TP}H#')))OR(vt1.c0)))AND(rt0.c3))) IS TRUE) DESC LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE ((((((((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1))))OR(NULL)))OR((((vt1.c0, rt0.c0)) BETWEEN ((x'2c3816', rt0.c0)) AND ((rt0.c0, rt0.c1))))))OR(CASE WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c2 END))) ORDER BY ((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c3))) NOT NULL)  NULLS LAST, ((((((((vt1.c0)OR('Y| TP}H#')))OR(vt1.c0)))AND(rt0.c3))) IS TRUE) DESC LIMIT 0x1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((('5Fg') NOT BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE) ORDER BY (x'b1a6' IN (((vt1.c0) ISNULL), '', (NULL IN (vt1.c0)))), (((vt1.c0, '1', vt1.c0, vt1.c0)) BETWEEN ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)), (vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)), (vt1.c0 IN ()), ((((((((((((vt1.c0)OR('1508769651')))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))) AND ((((vt1.c0) ISNULL), (((vt1.c0, vt1.c0, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0))), ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)), (((vt1.c0))==((vt1.c0))))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((('5Fg') NOT BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE)AND(TRIM(DISTINCT vt1.c0) COLLATE RTRIM))) ORDER BY ((vt1.c0)>(vt1.c0)) COLLATE BINARY COLLATE NOCASE, CASE ((vt1.c0)GLOB(vt1.c0))  WHEN (vt1.c0 IN ()) THEN ((vt1.c0) NOT NULL) ELSE vt1.c0 COLLATE RTRIM END DESC;
SELECT ALL * FROM rt0 WHERE (CASE WHEN TYPEOF(DISTINCT rt0.c0) THEN ((rt0.c1)&(rt0.c3)) WHEN (((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c1))) THEN ((rt0.c3)OR(rt0.c3)) ELSE (NOT (rt0.c1)) END);
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN TYPEOF(DISTINCT rt0.c0) THEN ((rt0.c1)&(rt0.c3)) WHEN (((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c1))) THEN ((rt0.c3)OR(rt0.c3)) ELSE (NOT (rt0.c1)) END)AND(0.003195286354983118))) ORDER BY ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))==(((rt0.c3) NOT NULL)))  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (CASE WHEN TYPEOF(DISTINCT rt0.c0) THEN ((rt0.c1)&(rt0.c3)) WHEN (((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c1))) THEN ((rt0.c3)OR(rt0.c3)) ELSE (NOT (rt0.c1)) END);
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN TYPEOF(DISTINCT rt0.c0) THEN ((rt0.c1)&(rt0.c3)) WHEN (((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c1))) THEN ((rt0.c3)OR(rt0.c3)) ELSE (NOT (rt0.c1)) END)AND(0.003195286354983118))) ORDER BY ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))==(((rt0.c3) NOT NULL)))  NULLS FIRST;
SELECT * FROM rt0 WHERE (((((((CAST(rt0.c0 AS INTEGER))OR(((NULL) BETWEEN (rt0.c0) AND (rt0.c0)))))AND(rt0.c2 COLLATE BINARY)))AND((NOT (rt0.c0))))) ORDER BY ((((((((0.16250259020462765)OR('B5,梌')))AND(rt0.c2)))OR(rt0.c0)))==(LIKELIHOOD(rt0.c3, rt0.c0)));
SELECT * FROM rt0 WHERE (((((((CAST(rt0.c0 AS INTEGER))OR(((NULL) BETWEEN (rt0.c0) AND (rt0.c0)))))AND(rt0.c2 COLLATE BINARY)))AND((NOT (rt0.c0))))) ORDER BY ((rt0.c1 IN ()) IN (CAST(rt0.c0 AS BLOB))) ASC, ((((((((rt0.c0)>(rt0.c1)))OR(x'3247')))OR(((((((((rt0.c1)AND(NULL)))OR(rt0.c1)))AND(rt0.c1)))OR(rt0.c2)))))AND(CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c1 END))  NULLS FIRST, (((rt0.c2 IN ()))>>('-1733680795'))  NULLS LAST;
SELECT * FROM rt0 WHERE (((((((CAST(rt0.c0 AS INTEGER))OR(((NULL) BETWEEN (rt0.c0) AND (rt0.c0)))))AND(rt0.c2 COLLATE BINARY)))AND((NOT (rt0.c0))))) ORDER BY ((((((((0.16250259020462765)OR('B5,梌')))AND(rt0.c2)))OR(rt0.c0)))==(LIKELIHOOD(rt0.c3, rt0.c0)));
SELECT MAX(rt0.c3) FROM rt0, vt1 WHERE ('1082644571') ORDER BY vt1.c0 ASC, '1777122654' ASC, CAST(rt0.c3 AS BLOB)  NULLS LAST, ((((rt0.c3)IS NOT(rt0.c2)))<(((rt0.c0)LIKE(vt1.c0)))) ASC;
SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE ('1082644571') ORDER BY vt1.c0 ASC, '1777122654' ASC, CAST(rt0.c3 AS BLOB)  NULLS LAST, ((((rt0.c3)IS NOT(rt0.c2)))<(((rt0.c0)LIKE(vt1.c0)))) ASC INTERSECT SELECT MAX(rt0.c3) FROM rt0, vt1 WHERE (CAST(((((((((((((((rt0.c3)AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c1)))AND(x'')))OR(rt0.c1)))OR(rt0.c0)))AND(0.7576714852445148)) AS BLOB)) ORDER BY vt1.c0 ASC, '1777122654' ASC, CAST(rt0.c3 AS BLOB)  NULLS LAST, ((((rt0.c3)IS NOT(rt0.c2)))<(((rt0.c0)LIKE(vt1.c0)))) ASC;
SELECT ALL * FROM vt1 NOT INDEXED WHERE (0.5103129362434395);
SELECT ALL * FROM vt1 WHERE (0.5103129362434395) LIMIT 0;
SELECT ALL * FROM vt1 NOT INDEXED WHERE (0.5103129362434395);
SELECT ALL * FROM vt1 WHERE (0.5103129362434395) LIMIT 0;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((((0.0839390163351208)OR(vt1.c0)))OR(vt1.c0)), (+ (vt1.c0)), vt1.c0 COLLATE BINARY)) AND ((((-601719745) ISNULL), json_array_length(vt1.c0, vt1.c0), (~ (vt1.c0))))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((((0.0839390163351208)OR(vt1.c0)))OR(vt1.c0)), (+ (vt1.c0)), vt1.c0 COLLATE BINARY)) AND ((((-601719745) ISNULL), json_array_length(vt1.c0, vt1.c0), (~ (vt1.c0)))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((vt1.c0) IS TRUE))) AND ((((vt1.c0) IS TRUE)))) DESC, LOWER(DISTINCT NULL) ASC  NULLS LAST, (((((vt1.c0)) BETWEEN ((x'')) AND ((vt1.c0)))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST LIMIT 0x2;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((((0.0839390163351208)OR(vt1.c0)))OR(vt1.c0)), (+ (vt1.c0)), vt1.c0 COLLATE BINARY)) AND ((((-601719745) ISNULL), json_array_length(vt1.c0, vt1.c0), (~ (vt1.c0))))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((((0.0839390163351208)OR(vt1.c0)))OR(vt1.c0)), (+ (vt1.c0)), vt1.c0 COLLATE BINARY)) AND ((((-601719745) ISNULL), json_array_length(vt1.c0, vt1.c0), (~ (vt1.c0)))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((vt1.c0) IS TRUE))) AND ((((vt1.c0) IS TRUE)))) DESC, LOWER(DISTINCT NULL) ASC  NULLS LAST, (((((vt1.c0)) BETWEEN ((x'')) AND ((vt1.c0)))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM vt1, rt0 WHERE (CASE rt0.c2 COLLATE BINARY  WHEN NULL THEN ((rt0.c1) NOT NULL) WHEN rt0.c3 THEN 0.43834110262542436 WHEN (rt0.c3 IN ()) THEN CAST(rt0.c2 AS BLOB) END);
SELECT ALL * FROM vt1, rt0 WHERE (((CASE rt0.c2 COLLATE BINARY  WHEN NULL THEN ((rt0.c1) NOT NULL) WHEN rt0.c3 THEN 0.43834110262542436 WHEN (rt0.c3 IN ()) THEN CAST(rt0.c2 AS BLOB) END)AND(((rt0.c3) BETWEEN ('8n' COLLATE BINARY) AND (((rt0.c3)LIKE(rt0.c1))))))) INTERSECT SELECT * FROM vt1, rt0 WHERE (rt0.c3);
SELECT ALL * FROM vt1, rt0 WHERE (CASE rt0.c2 COLLATE BINARY  WHEN NULL THEN ((rt0.c1) NOT NULL) WHEN rt0.c3 THEN 0.43834110262542436 WHEN (rt0.c3 IN ()) THEN CAST(rt0.c2 AS BLOB) END);
SELECT ALL * FROM vt1, rt0 WHERE (((CASE rt0.c2 COLLATE BINARY  WHEN NULL THEN ((rt0.c1) NOT NULL) WHEN rt0.c3 THEN 0.43834110262542436 WHEN (rt0.c3 IN ()) THEN CAST(rt0.c2 AS BLOB) END)AND(((rt0.c3) BETWEEN ('8n' COLLATE BINARY) AND (((rt0.c3)LIKE(rt0.c1))))))) INTERSECT SELECT * FROM vt1, rt0 WHERE (rt0.c3);
SELECT ALL * FROM vt1, rt0 WHERE (CASE WHEN HEX(vt1.c0) THEN (NOT (rt0.c3)) WHEN CAST(rt0.c3 AS NUMERIC) THEN (((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))) ELSE (rt0.c3 IN ()) END);
SELECT ALL * FROM vt1, rt0 WHERE (((CASE WHEN HEX(vt1.c0) THEN (NOT (rt0.c3)) WHEN CAST(rt0.c3 AS NUMERIC) THEN (((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))) ELSE (rt0.c3 IN ()) END)AND((((((rt0.c0, '0.838036884513789', vt1.c0, 0.9526927321568549, rt0.c2))>((rt0.c2, rt0.c2, vt1.c0, rt0.c0, rt0.c2)))) BETWEEN ((rt0.c3 IN ())) AND (UPPER(rt0.c2)))))) LIMIT 1 INTERSECT SELECT * FROM vt1, rt0 WHERE (((CAST(rt0.c3 AS BLOB)) BETWEEN ((rt0.c1 IN (rt0.c0, rt0.c2, rt0.c1))) AND (((rt0.c0)>=(rt0.c1))))) LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (CASE WHEN HEX(vt1.c0) THEN (NOT (rt0.c3)) WHEN CAST(rt0.c3 AS NUMERIC) THEN (((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))) ELSE (rt0.c3 IN ()) END);
SELECT ALL * FROM vt1, rt0 WHERE (((CASE WHEN HEX(vt1.c0) THEN (NOT (rt0.c3)) WHEN CAST(rt0.c3 AS NUMERIC) THEN (((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))) ELSE (rt0.c3 IN ()) END)AND((((((rt0.c0, '0.838036884513789', vt1.c0, 0.9526927321568549, rt0.c2))>((rt0.c2, rt0.c2, vt1.c0, rt0.c0, rt0.c2)))) BETWEEN ((rt0.c3 IN ())) AND (UPPER(rt0.c2)))))) LIMIT 1 INTERSECT SELECT * FROM vt1, rt0 WHERE (((CAST(rt0.c3 AS BLOB)) BETWEEN ((rt0.c1 IN (rt0.c0, rt0.c2, rt0.c1))) AND (((rt0.c0)>=(rt0.c1))))) LIMIT 1;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((- (((((rt0.c0)OR(rt0.c1)))AND(rt0.c2)))));
SELECT COUNT(*) FROM vt1, rt0 WHERE ((((- (((((rt0.c0)OR(rt0.c1)))AND(rt0.c2)))))AND(CASE WHEN ((((((((((((rt0.c1)AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))OR('')) THEN (rt0.c1 IN (rt0.c3)) END))) ORDER BY CASE WHEN CASE WHEN rt0.c2 THEN rt0.c2 ELSE NULL END THEN ((rt0.c1)>(rt0.c0)) WHEN ((rt0.c3) NOT NULL) THEN NULL WHEN ((vt1.c0)LIKE(rt0.c3)) THEN IFNULL(rt0.c3, rt0.c1) END  NULLS FIRST, CASE 'T'  WHEN ((x'd3bfd712')LIKE(rt0.c0)) THEN CAST(rt0.c0 AS INTEGER) WHEN ((rt0.c0)OR(NULL)) THEN ((rt0.c0) IS TRUE) ELSE ((rt0.c0)%(rt0.c3)) END LIMIT 0x2 INTERSECT SELECT COUNT(*) FROM vt1, rt0 WHERE (vt1.c0 COLLATE RTRIM) ORDER BY CASE WHEN CASE WHEN rt0.c2 THEN rt0.c2 ELSE NULL END THEN ((rt0.c1)>(rt0.c0)) WHEN ((rt0.c3) NOT NULL) THEN NULL WHEN ((vt1.c0)LIKE(rt0.c3)) THEN IFNULL(rt0.c3, rt0.c1) END  NULLS FIRST, CASE 'T'  WHEN ((x'd3bfd712')LIKE(rt0.c0)) THEN CAST(rt0.c0 AS INTEGER) WHEN ((rt0.c0)OR(NULL)) THEN ((rt0.c0) IS TRUE) ELSE ((rt0.c0)%(rt0.c3)) END LIMIT 2;
SELECT COUNT(*) FROM rt0 LEFT OUTER JOIN vt1 ON ((((vt1.c0) NOTNULL))=(((rt0.c0) NOT NULL))) WHERE (((((rt0.c0) BETWEEN (rt0.c1) AND (vt1.c0))) BETWEEN ((- (vt1.c0))) AND (vt1.c0))) ORDER BY ((rt0.c1 COLLATE BINARY)IS(CASE rt0.c0  WHEN rt0.c1 THEN rt0.c0 END)), (- (rt0.c3 COLLATE BINARY))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 INNER JOIN vt1 ON ((((vt1.c0) NOTNULL))==(((rt0.c0) NOT NULL))) WHERE (((((((rt0.c0) BETWEEN (rt0.c1) AND (vt1.c0))) BETWEEN ((- (vt1.c0))) AND (vt1.c0)))AND((~ (rt0.c1)) COLLATE BINARY))) ORDER BY ((((((((((((-9.24501417E8)AND(rt0.c0 COLLATE NOCASE)))AND(CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)))OR(((vt1.c0) BETWEEN ('1756464459') AND (rt0.c2)))))OR(((vt1.c0) NOT NULL))))OR(((0.5439443282875409) NOTNULL))))OR(vt1.c0 COLLATE BINARY)) DESC, 0.7900346292401668, (~ (rt0.c0)) COLLATE BINARY ASC LIMIT 5 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 INNER JOIN vt1 ON ((((vt1.c0) NOTNULL))==(((rt0.c0) NOT NULL))) WHERE (((vt1.c0 IN ()) IN ())) ORDER BY ((((((((((((-9.24501417E8)AND(rt0.c0 COLLATE NOCASE)))AND(CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)))OR(((vt1.c0) BETWEEN ('1756464459') AND (rt0.c2)))))OR(((vt1.c0) NOT NULL))))OR(((0.5439443282875409) NOTNULL))))OR(vt1.c0 COLLATE BINARY)) DESC, 0.7900346292401668, (~ (rt0.c0)) COLLATE BINARY ASC LIMIT 5;
SELECT * FROM rt0 WHERE (-8.6516757E7) ORDER BY TRIM((~ (rt0.c0)))  NULLS FIRST, CASE WHEN LIKELY(DISTINCT 0.9454788352794674) THEN ((((((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c0)) ELSE TRIM(rt0.c0) END DESC;
SELECT * FROM rt0 WHERE (-8.6516757E7) ORDER BY rt0.c2, CASE WHEN CASE WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c0 END THEN TRIM(rt0.c2, rt0.c3) END  NULLS FIRST, rt0.c0  NULLS LAST LIMIT 0;
SELECT * FROM rt0 WHERE (-8.6516757E7) ORDER BY TRIM((~ (rt0.c0)))  NULLS FIRST, CASE WHEN LIKELY(DISTINCT 0.9454788352794674) THEN ((((((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c0)) ELSE TRIM(rt0.c0) END DESC;
SELECT * FROM rt0 WHERE (-8.6516757E7) ORDER BY rt0.c2, CASE WHEN CASE WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c0 END THEN TRIM(rt0.c2, rt0.c3) END  NULLS FIRST, rt0.c0  NULLS LAST LIMIT 0;
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE (((CASE WHEN vt1.c0 THEN 0.7709294528049235 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c3 END) IS TRUE));
SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE (((CASE WHEN vt1.c0 THEN 0.7709294528049235 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c3 END) IS TRUE)) LIMIT 0;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (STRFTIME(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3)), ((rt0.c1) IS FALSE), (0.7654783778594165 IN (rt0.c2, rt0.c0)), (((rt0.c1, rt0.c2))<((rt0.c0, rt0.c1))))) ORDER BY (+ (rt0.c2)) COLLATE NOCASE DESC  NULLS FIRST, (((~ (rt0.c2))) NOT BETWEEN (CASE rt0.c3  WHEN rt0.c1 THEN rt0.c1 END) AND (CAST(rt0.c1 AS TEXT))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (((STRFTIME(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3)), ((rt0.c1) IS FALSE), (0.7654783778594165 IN (rt0.c2, rt0.c0)), (((rt0.c1, rt0.c2))<((rt0.c0, rt0.c1)))))AND(CASE ((622119115)|(rt0.c2))  WHEN CASE rt0.c0  WHEN -1376029169 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN '' WHEN rt0.c0 THEN rt0.c2 END THEN 0.42869296420588476 END))) ORDER BY rtreenode(CAST(rt0.c3 AS REAL), ((((rt0.c3)OR(0.8078556266812057)))AND(rt0.c0)))  NULLS LAST, (((rt0.c3)) BETWEEN ((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c0 END)) AND (('-262715540'))) DESC  NULLS FIRST;
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE ((((((((((rt0.c2)AND(rt0.c0)))OR(rt0.c0)))OR(rt0.c2)))OR(rt0.c0)) IN ())) ORDER BY SQLITE_COMPILEOPTION_USED(CAST(vt1.c0 AS NUMERIC)) ASC  NULLS LAST, ((rt0.c3)OR(rt0.c0)) COLLATE NOCASE  NULLS LAST;
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE ((((((((((rt0.c2)AND(rt0.c0)))OR(rt0.c0)))OR(rt0.c2)))OR(rt0.c0)) IN ())) ORDER BY (CASE WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END IN (0.8839716198282203)) INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (((x'bb') NOT BETWEEN ((NOT (rt0.c3))) AND (NULL))) ORDER BY (CASE WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END IN (0.8839716198282203));
SELECT MAX(rt0.c0) FROM rt0 WHERE (('320869286' IN (CAST(rt0.c2 AS REAL), (0X234e8ff1 IN (rt0.c2, rt0.c2))))) ORDER BY (rt0.c0 COLLATE RTRIM IN ());
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (('320869286' IN (CAST(rt0.c2 AS REAL)))) ORDER BY ((((rt0.c0)AND(((rt0.c3)<<(rt0.c2)))))AND(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2)))), CAST(((rt0.c2)*('-')) AS NUMERIC);
SELECT * FROM vt1 WHERE (((((TRIM(DISTINCT vt1.c0, vt1.c0))AND(((((((vt1.c0)OR(x'f9fad8')))OR(vt1.c0)))OR(vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c0 END)));
SELECT ALL * FROM vt1 WHERE (((((TRIM(DISTINCT vt1.c0, vt1.c0))AND(((((((vt1.c0)OR(x'f9fad8')))OR(vt1.c0)))OR(vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c0 END))) INTERSECT SELECT * FROM vt1 WHERE (((vt1.c0)/(vt1.c0)) COLLATE RTRIM);
SELECT * FROM vt1 WHERE (((((TRIM(DISTINCT vt1.c0, vt1.c0))AND(((((((vt1.c0)OR(x'f9fad8')))OR(vt1.c0)))OR(vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c0 END)));
SELECT ALL * FROM vt1 WHERE (((((TRIM(DISTINCT vt1.c0, vt1.c0))AND(((((((vt1.c0)OR(x'f9fad8')))OR(vt1.c0)))OR(vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c0 END))) INTERSECT SELECT * FROM vt1 WHERE (((vt1.c0)/(vt1.c0)) COLLATE RTRIM);
SELECT * FROM rt0 WHERE (CASE ((rt0.c2)>(rt0.c3))  WHEN ((((((rt0.c2)AND('')))OR(rt0.c0)))AND(rt0.c0)) THEN rt0.c0 WHEN (NOT (rt0.c0)) THEN (~ (rt0.c3)) END) ORDER BY (- (CASE WHEN rt0.c0 THEN rt0.c1 END)) DESC  NULLS FIRST, CAST(0.673218879654065 AS INTEGER) DESC  NULLS LAST, ((rt0.c3 COLLATE RTRIM)>=(((rt0.c0) NOTNULL))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE ((rt0.c2)>(rt0.c3))  WHEN ((((((rt0.c2)AND('')))OR(rt0.c0)))AND(rt0.c0)) THEN rt0.c0 WHEN (NOT (rt0.c0)) THEN (~ (rt0.c3)) END)AND((+ (CAST(rt0.c1 AS BLOB)))))) ORDER BY (- (CASE WHEN rt0.c0 THEN rt0.c1 END)) DESC  NULLS FIRST, CAST(0.673218879654065 AS INTEGER) DESC  NULLS LAST, ((rt0.c3 COLLATE RTRIM)>=(((rt0.c0) NOTNULL))) ASC  NULLS FIRST LIMIT 0x1;
SELECT * FROM rt0 WHERE (CASE ((rt0.c2)>(rt0.c3))  WHEN ((((((rt0.c2)AND('')))OR(rt0.c0)))AND(rt0.c0)) THEN rt0.c0 WHEN (NOT (rt0.c0)) THEN (~ (rt0.c3)) END) ORDER BY (- (CASE WHEN rt0.c0 THEN rt0.c1 END)) DESC  NULLS FIRST, CAST(0.673218879654065 AS INTEGER) DESC  NULLS LAST, ((rt0.c3 COLLATE RTRIM)>=(((rt0.c0) NOTNULL))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE ((rt0.c2)>(rt0.c3))  WHEN ((((((rt0.c2)AND('')))OR(rt0.c0)))AND(rt0.c0)) THEN rt0.c0 WHEN (NOT (rt0.c0)) THEN (~ (rt0.c3)) END)AND((+ (CAST(rt0.c1 AS BLOB)))))) ORDER BY (- (CASE WHEN rt0.c0 THEN rt0.c1 END)) DESC  NULLS FIRST, CAST(0.673218879654065 AS INTEGER) DESC  NULLS LAST, ((rt0.c3 COLLATE RTRIM)>=(((rt0.c0) NOTNULL))) ASC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt1 WHERE (x'') ORDER BY (NOT ((+ (vt1.c0)))) DESC, (NOT ((vt1.c0 IN (vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE (x'') ORDER BY (NOT ((+ (vt1.c0)))) DESC, (NOT ((vt1.c0 IN (vt1.c0)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((0X54fd2ca8 IN (vt1.c0, vt1.c0, vt1.c0))) NOT NULL)) ORDER BY (NOT ((+ (vt1.c0)))) DESC, (NOT ((vt1.c0 IN (vt1.c0))));
SELECT * FROM vt1 WHERE (x'') ORDER BY (NOT ((+ (vt1.c0)))) DESC, (NOT ((vt1.c0 IN (vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE (x'') ORDER BY (NOT ((+ (vt1.c0)))) DESC, (NOT ((vt1.c0 IN (vt1.c0)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((0X54fd2ca8 IN (vt1.c0, vt1.c0, vt1.c0))) NOT NULL)) ORDER BY (NOT ((+ (vt1.c0)))) DESC, (NOT ((vt1.c0 IN (vt1.c0))));
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE ((((rt0.c0 IN (rt0.c2, vt1.c0)))AND(((NULL)IS NOT(rt0.c0)))));
SELECT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((((rt0.c0 IN (rt0.c2, vt1.c0)))AND(((NULL)IS NOT(rt0.c0)))))AND(CAST(rt0.c2 AS INTEGER) COLLATE BINARY))) INTERSECT SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (rt0.c2);
SELECT * FROM vt1 WHERE ((((- (vt1.c0))) NOTNULL));
SELECT ALL * FROM vt1 WHERE ((((((- (vt1.c0))) NOTNULL))AND(((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) IS TRUE))));
SELECT * FROM vt1 WHERE ((((- (vt1.c0))) NOTNULL));
SELECT ALL * FROM vt1 WHERE ((((((- (vt1.c0))) NOTNULL))AND(((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) IS TRUE))));
SELECT MIN(rt0.c2) FROM rt0 WHERE (CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END COLLATE BINARY);
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END COLLATE BINARY) ORDER BY CAST(((rt0.c1)==(rt0.c0)) AS INTEGER)  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE (json_array_length(vt1.c0 COLLATE NOCASE, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) ORDER BY ((load_extension(vt1.c0, vt1.c0))<(SQLITE_VERSION()));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (json_array_length(vt1.c0 COLLATE NOCASE, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) ORDER BY (+ (CAST(vt1.c0 AS BLOB)))  NULLS LAST, (((((((((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR('-116899011')))OR(vt1.c0)))AND(vt1.c0)))OR(-184920496)))AND(vt1.c0)) IN (((vt1.c0) NOT BETWEEN ('-2014048793') AND (0.315848055336596))))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (CAST((((rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((vt1.c0, rt0.c1))) AS NUMERIC));
SELECT ALL * FROM vt1, rt0 WHERE (CAST((((rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((vt1.c0, rt0.c1))) AS NUMERIC)) LIMIT 2 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((('1101443830') NOTNULL)) LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE (CAST((((rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((vt1.c0, rt0.c1))) AS NUMERIC));
SELECT ALL * FROM vt1, rt0 WHERE (CAST((((rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((vt1.c0, rt0.c1))) AS NUMERIC)) LIMIT 2 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((('1101443830') NOTNULL)) LIMIT 2;
SELECT ALL COUNT(*) FROM vt1 WHERE (CAST((vt1.c0 IN (vt1.c0)) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((CAST((vt1.c0 IN (vt1.c0)) AS NUMERIC))AND((LIKE(vt1.c0, vt1.c0) IN ())))) ORDER BY '' COLLATE NOCASE COLLATE BINARY  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((((((((vt1.c0)AND(DATETIME(vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))AND(vt1.c0 COLLATE NOCASE)))OR((- (vt1.c0)))))AND((((vt1.c0, NULL))<((vt1.c0, vt1.c0))))))AND(((('-1862126037')) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) ORDER BY '' COLLATE NOCASE COLLATE BINARY  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (CAST((vt1.c0 IN (vt1.c0)) AS REAL));
SELECT DISTINCT * FROM vt1 WHERE (((CAST((vt1.c0 IN (vt1.c0)) AS REAL))AND(vt1.c0))) LIMIT 0x3;
SELECT ALL * FROM vt1 WHERE (CAST((vt1.c0 IN (vt1.c0)) AS REAL));
SELECT DISTINCT * FROM vt1 WHERE (((CAST((vt1.c0 IN (vt1.c0)) AS REAL))AND(vt1.c0))) LIMIT 0x3;
SELECT ALL * FROM rt0, vt1 WHERE ((+ (rt0.c3)) COLLATE BINARY);
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((+ (rt0.c3)) COLLATE BINARY)AND(((((rt0.c1)OR(rt0.c3)))AND(rt0.c0)) COLLATE RTRIM COLLATE BINARY))) ORDER BY (((rt0.c3 COLLATE BINARY))==((CAST(rt0.c3 AS INTEGER)))) DESC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((+ (rt0.c3)) COLLATE BINARY);
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((+ (rt0.c3)) COLLATE BINARY)AND(((((rt0.c1)OR(rt0.c3)))AND(rt0.c0)) COLLATE RTRIM COLLATE BINARY))) ORDER BY (((rt0.c3 COLLATE BINARY))==((CAST(rt0.c3 AS INTEGER)))) DESC  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((json_object(vt1.c0, vt1.c0, vt1.c0))*(((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0)AND((((NOT (vt1.c0))) IS TRUE)))) ORDER BY ((((1463734533)-(vt1.c0)))<(((vt1.c0)||(vt1.c0)))) ASC  NULLS FIRST, ((((((CAST(vt1.c0 AS NUMERIC))AND((vt1.c0 IN (vt1.c0, vt1.c0)))))AND((((vt1.c0))!=((vt1.c0))))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)), 'h' ASC INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((((CAST(vt1.c0 AS TEXT)))<>((DATE(vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))) ORDER BY ((((1463734533)-(vt1.c0)))<(((vt1.c0)||(vt1.c0)))) ASC  NULLS FIRST, ((((((CAST(vt1.c0 AS NUMERIC))AND((vt1.c0 IN (vt1.c0, vt1.c0)))))AND((((vt1.c0))<>((vt1.c0))))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)), 'h' ASC;
SELECT * FROM rt0 WHERE (json_valid(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END)) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END) NOT NULL) DESC, (((rt0.c3, x'', x'914bae', rt0.c2)) BETWEEN ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((rt0.c0) IS TRUE), NULL, CASE WHEN x'7c32cb' THEN rt0.c2 ELSE rt0.c1 END)) AND ((((((((rt0.c3)OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)), ((rt0.c0) IS TRUE), (((rt0.c3, '3508589'))<=((rt0.c2, rt0.c2))), (((NULL)) BETWEEN ((rt0.c1)) AND ((0X8f533b)))))) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((json_valid(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END))AND(((((rt0.c3)) BETWEEN ((rt0.c2)) AND ((rt0.c1))) IN ((('1151493384') BETWEEN (rt0.c2) AND (rt0.c1))))))) ORDER BY CASE (~ (rt0.c2))  WHEN ((x'e849') NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((rt0.c3)&(rt0.c2)) WHEN (rt0.c3 IN (rt0.c3)) THEN '' ELSE ((rt0.c1) NOT NULL) END  NULLS FIRST, CAST(x'35' AS BLOB) ASC  NULLS LAST, '1605415635' ASC;
SELECT * FROM rt0 WHERE (json_valid(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END)) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END) NOT NULL) DESC, (((rt0.c3, x'', x'914bae', rt0.c2)) BETWEEN ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((rt0.c0) IS TRUE), NULL, CASE WHEN x'7c32cb' THEN rt0.c2 ELSE rt0.c1 END)) AND ((((((((rt0.c3)OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)), ((rt0.c0) IS TRUE), (((rt0.c3, '3508589'))<=((rt0.c2, rt0.c2))), (((NULL)) BETWEEN ((rt0.c1)) AND ((0X8f533b)))))) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((json_valid(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END))AND(((((rt0.c3)) BETWEEN ((rt0.c2)) AND ((rt0.c1))) IN ((('1151493384') BETWEEN (rt0.c2) AND (rt0.c1))))))) ORDER BY CASE (~ (rt0.c2))  WHEN ((x'e849') NOT BETWEEN (rt0.c2) AND (rt0.c1)) THEN ((rt0.c3)&(rt0.c2)) WHEN (rt0.c3 IN (rt0.c3)) THEN '' ELSE ((rt0.c1) NOT NULL) END  NULLS FIRST, CAST(x'35' AS BLOB) ASC  NULLS LAST, '1605415635' ASC;
SELECT ALL * FROM vt1 WHERE ('也>') ORDER BY ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(0Xa0f2d7e)))OR(vt1.c0))) BETWEEN (((vt1.c0)/(vt1.c0))) AND (CASE WHEN '248790647' THEN vt1.c0 END));
SELECT * FROM vt1 WHERE ('也>') ORDER BY ((IFNULL(DISTINCT vt1.c0, vt1.c0))-(((vt1.c0) IS TRUE))), vt1.c0  NULLS FIRST, (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT * FROM vt1 WHERE (CAST(x'11750f5e' AS REAL)) ORDER BY ((IFNULL(DISTINCT vt1.c0, vt1.c0))-(((vt1.c0) IS TRUE))), vt1.c0  NULLS FIRST, (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ('也>') ORDER BY ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(0Xa0f2d7e)))OR(vt1.c0))) BETWEEN (((vt1.c0)/(vt1.c0))) AND (CASE WHEN '248790647' THEN vt1.c0 END));
SELECT * FROM vt1 WHERE ('也>') ORDER BY ((IFNULL(DISTINCT vt1.c0, vt1.c0))-(((vt1.c0) IS TRUE))), vt1.c0  NULLS FIRST, (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT * FROM vt1 WHERE (CAST(x'11750f5e' AS REAL)) ORDER BY ((IFNULL(DISTINCT vt1.c0, vt1.c0))-(((vt1.c0) IS TRUE))), vt1.c0  NULLS FIRST, (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) COLLATE BINARY ASC  NULLS LAST;
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((rt0.c2, rt0.c0))<((rt0.c1, '萺sH{!	t'))) IN ()));
SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((((rt0.c2, rt0.c0))<((rt0.c1, '萺sH{!	t'))) IN ()))AND((((rt0.c1)) BETWEEN ((CAST(rt0.c0 AS REAL))) AND ((CAST(rt0.c1 AS INTEGER))))))) INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((rt0.c1)/(rt0.c2)) COLLATE RTRIM);
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE (((rt0.c1)=((rt0.c0 IN (rt0.c1, rt0.c0))))) ORDER BY (+ (rt0.c0 COLLATE NOCASE)) ASC, rt0.c3  NULLS FIRST, CAST((((vt1.c0, rt0.c0))<=((rt0.c2, rt0.c1))) AS NUMERIC)  NULLS LAST;
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE (((((rt0.c1)==((rt0.c0 IN (rt0.c1, rt0.c0)))))AND(CASE WHEN TYPEOF(DISTINCT rt0.c2) THEN CAST(vt1.c0 AS INTEGER) WHEN (((rt0.c3, rt0.c2))!=((vt1.c0, vt1.c0))) THEN ((((((rt0.c1)AND(vt1.c0)))OR(rt0.c1)))AND(rt0.c3)) WHEN ((rt0.c3)IS NOT(x'')) THEN CASE WHEN rt0.c1 THEN rt0.c2 END END))) ORDER BY (+ (rt0.c0 COLLATE NOCASE)) ASC, rt0.c3  NULLS FIRST, CAST((((vt1.c0, rt0.c0))<=((rt0.c2, rt0.c1))) AS NUMERIC)  NULLS LAST;
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE ((((((((((((((rt0.c0 IN ()))OR(((x'dc')<=(vt1.c0)))))AND(((rt0.c0)%(rt0.c2)))))OR(CAST(rt0.c1 AS REAL))))AND(rt0.c2)))OR(((vt1.c0) ISNULL))))AND(((rt0.c3)IS(rt0.c2))))) ORDER BY ((CAST(vt1.c0 AS REAL)) NOT BETWEEN (vt1.c0) AND (((((((((rt0.c3)AND(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)))) ASC;
SELECT DISTINCT MIN(rt0.c0) FROM rt0, vt1 WHERE ((((((((((((((((rt0.c0 IN ()))OR(((x'dc')=(vt1.c0)))))AND(((rt0.c0)%(rt0.c2)))))OR(CAST(rt0.c1 AS REAL))))AND(rt0.c2)))OR(((vt1.c0) ISNULL))))AND(((rt0.c3)IS(rt0.c2)))))AND(((IFNULL(rt0.c2, rt0.c2)) IS FALSE)))) ORDER BY NULL DESC  NULLS LAST, (~ (((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c1)))) ASC  NULLS LAST, CAST((((rt0.c3, vt1.c0, rt0.c3))>((vt1.c0, vt1.c0, rt0.c1))) AS BLOB)  NULLS FIRST, (((('VK')AND(rt0.c3)))OR(rt0.c0)) COLLATE BINARY DESC LIMIT 1 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM rt0, vt1 WHERE (LTRIM(CAST(rt0.c0 AS BLOB), CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 END)) ORDER BY NULL DESC  NULLS LAST, (~ (((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c1)))) ASC  NULLS LAST, CAST((((rt0.c3, vt1.c0, rt0.c3))>((vt1.c0, vt1.c0, rt0.c1))) AS BLOB)  NULLS FIRST, (((('VK')AND(rt0.c3)))OR(rt0.c0)) COLLATE BINARY DESC LIMIT 1;
SELECT * FROM rt0 WHERE (((rt0.c2)AND(rt0.c3)) COLLATE NOCASE) ORDER BY LOWER((((rt0.c1, rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c2, rt0.c0)))) ASC, (~ (json_insert(rt0.c1, rt0.c0, rt0.c1, rt0.c2, rt0.c2))) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c2)AND(rt0.c3)) COLLATE NOCASE) ORDER BY CAST(((rt0.c2) NOT NULL) AS TEXT) DESC  NULLS FIRST, rt0.c3 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((CAST(rt0.c0 AS TEXT), (((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3))), (((rt0.c2, rt0.c3, rt0.c2)) BETWEEN ((rt0.c1, rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c0, rt0.c2)))))<=((rt0.c0, LIKELIHOOD(rt0.c0, rt0.c2), CAST(rt0.c2 AS NUMERIC))))) ORDER BY CAST(((rt0.c2) NOT NULL) AS TEXT) DESC  NULLS FIRST, rt0.c3;
SELECT * FROM rt0 WHERE (((rt0.c2)AND(rt0.c3)) COLLATE NOCASE) ORDER BY LOWER((((rt0.c1, rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c2, rt0.c0)))) ASC, (~ (json_insert(rt0.c1, rt0.c0, rt0.c1, rt0.c2, rt0.c2))) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c2)AND(rt0.c3)) COLLATE NOCASE) ORDER BY CAST(((rt0.c2) NOT NULL) AS TEXT) DESC  NULLS FIRST, rt0.c3 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((CAST(rt0.c0 AS TEXT), (((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3))), (((rt0.c2, rt0.c3, rt0.c2)) BETWEEN ((rt0.c1, rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c0, rt0.c2)))))<=((rt0.c0, LIKELIHOOD(rt0.c0, rt0.c2), CAST(rt0.c2 AS NUMERIC))))) ORDER BY CAST(((rt0.c2) NOT NULL) AS TEXT) DESC  NULLS FIRST, rt0.c3;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY NULL ASC  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c1) FROM rt0, vt1 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY NULL ASC  NULLS FIRST LIMIT 4 INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c3)AND(rt0.c2)) COLLATE BINARY) ORDER BY NULL ASC  NULLS FIRST LIMIT 0x4;
SELECT ALL * FROM rt0 WHERE (((rt0.c3) NOT NULL) COLLATE BINARY) ORDER BY ((CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 ELSE ')s' END)OR((((rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c0, rt0.c2)) AND (('&(', rt0.c2))))) ASC, ((((rt0.c1)*(rt0.c2))) NOT BETWEEN (((((((((((((x'')AND(rt0.c3)))AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c3))) AND (NULL COLLATE RTRIM)) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((rt0.c3) NOT NULL) COLLATE BINARY) ORDER BY UNLIKELY((+ (rt0.c3)))  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((rt0.c3) NOT NULL) COLLATE BINARY) ORDER BY ((CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 ELSE ')s' END)OR((((rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c0, rt0.c2)) AND (('&(', rt0.c2))))) ASC, ((((rt0.c1)*(rt0.c2))) NOT BETWEEN (((((((((((((x'')AND(rt0.c3)))AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c3))) AND (NULL COLLATE RTRIM)) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((rt0.c3) NOT NULL) COLLATE BINARY) ORDER BY UNLIKELY((+ (rt0.c3)))  NULLS FIRST;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (NULL);
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (NULL) ORDER BY (NOT (CAST(rt0.c1 AS NUMERIC))), ((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN '喚ᙛ' WHEN vt1.c0 THEN vt1.c0 END) IS FALSE) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (NULL);
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (NULL) ORDER BY (NOT (CAST(rt0.c1 AS NUMERIC))), ((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN '喚ᙛ' WHEN vt1.c0 THEN vt1.c0 END) IS FALSE) ASC  NULLS LAST LIMIT 0X0;
SELECT MAX(rt0.c3) FROM rt0 WHERE ((('1759223285')>>((rt0.c2 IN ('-1532470271', rt0.c2)))));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((('1759223285')>>((rt0.c2 IN ('-1532470271', rt0.c2))))) ORDER BY '53xRB' DESC, rt0.c0  NULLS FIRST, CASE WHEN (- (rt0.c0)) THEN (rt0.c1 IN ()) WHEN ((rt0.c0)<<(rt0.c1)) THEN ((rt0.c2) NOT NULL) WHEN CAST(rt0.c0 AS INTEGER) THEN rt0.c1 WHEN ((rt0.c0)<=(rt0.c2)) THEN rt0.c1 COLLATE NOCASE WHEN ((0.0381973490235431) NOT NULL) THEN (((rt0.c2, rt0.c2, NULL, rt0.c1))<((rt0.c2, rt0.c1, rt0.c0, rt0.c3))) WHEN ((rt0.c1) IS FALSE) THEN LTRIM(rt0.c1) ELSE ((rt0.c3)|(rt0.c0)) END  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM rt0 WHERE (((((rt0.c3))>=((1350128228))) IN (TRIM(rt0.c2), (+ (rt0.c3))))) ORDER BY ((((rt0.c3) ISNULL)) BETWEEN (CAST(rt0.c2 AS TEXT)) AND (CAST(rt0.c3 AS TEXT)));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3))==((1350128228))) IN (TRIM(rt0.c2))))AND(CASE CASE rt0.c1  WHEN 0.009424738000537669 THEN rt0.c1 ELSE rt0.c1 END  WHEN ((rt0.c2)IS(rt0.c0)) THEN rt0.c2 COLLATE RTRIM WHEN '9i?H*NbF' THEN CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c0 END END))) ORDER BY ((((rt0.c1)OR((((rt0.c3, x''))>=((rt0.c2, rt0.c0))))))OR(CASE rt0.c1  WHEN NULL THEN rt0.c1 ELSE rt0.c1 END)) LIMIT 0x2;
SELECT ALL * FROM rt0 WHERE (((((rt0.c3))>=((1350128228))) IN (TRIM(rt0.c2), (+ (rt0.c3))))) ORDER BY ((((rt0.c3) ISNULL)) BETWEEN (CAST(rt0.c2 AS TEXT)) AND (CAST(rt0.c3 AS TEXT)));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3))==((1350128228))) IN (TRIM(rt0.c2))))AND(CASE CASE rt0.c1  WHEN 0.009424738000537669 THEN rt0.c1 ELSE rt0.c1 END  WHEN ((rt0.c2)IS(rt0.c0)) THEN rt0.c2 COLLATE RTRIM WHEN '9i?H*NbF' THEN CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c0 END END))) ORDER BY ((((rt0.c1)OR((((rt0.c3, x''))>=((rt0.c2, rt0.c0))))))OR(CASE rt0.c1  WHEN NULL THEN rt0.c1 ELSE rt0.c1 END)) LIMIT 0x2;
SELECT * FROM rt0 WHERE (((((((((rt0.c1)|(rt0.c1)))AND(((rt0.c0)IS NOT(rt0.c3)))))AND((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c0))))))AND(((rt0.c2)=(rt0.c2))))) ORDER BY CASE NULL  WHEN (((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c1, rt0.c3))) THEN (((rt0.c0, rt0.c3, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c2, x'', rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c3, rt0.c0, NULL))) WHEN rt0.c3 THEN rt0.c2 END  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c1)|(rt0.c1)))AND(((rt0.c0)IS NOT(rt0.c3)))))AND((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c0))))))AND(((rt0.c2)==(rt0.c2)))))AND((- ((((rt0.c3, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c2, rt0.c0)))))))) ORDER BY CASE NULL  WHEN (((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c1, rt0.c3))) THEN (((rt0.c0, rt0.c3, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c2, x'', rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c3, rt0.c0, NULL))) WHEN rt0.c3 THEN rt0.c2 END  NULLS LAST;
SELECT * FROM rt0 WHERE (((((((((rt0.c1)|(rt0.c1)))AND(((rt0.c0)IS NOT(rt0.c3)))))AND((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c0))))))AND(((rt0.c2)=(rt0.c2))))) ORDER BY CASE NULL  WHEN (((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c1, rt0.c3))) THEN (((rt0.c0, rt0.c3, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c2, x'', rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c3, rt0.c0, NULL))) WHEN rt0.c3 THEN rt0.c2 END  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c1)|(rt0.c1)))AND(((rt0.c0)IS NOT(rt0.c3)))))AND((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c0))))))AND(((rt0.c2)==(rt0.c2)))))AND((- ((((rt0.c3, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c2, rt0.c0)))))))) ORDER BY CASE NULL  WHEN (((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c1, rt0.c3))) THEN (((rt0.c0, rt0.c3, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c2, x'', rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c3, rt0.c0, NULL))) WHEN rt0.c3 THEN rt0.c2 END  NULLS LAST;
SELECT ALL MAX(rt0.c3) FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3))))%((('1040801235') IS TRUE))));
SELECT ALL MAX(rt0.c3) FROM rt0 NATURAL JOIN vt1 WHERE ((((((((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3))))%((('1040801235') IS TRUE))))AND(CASE WHEN ((rt0.c2)IS(vt1.c0)) THEN LIKELY('{JCo') WHEN ((0.26159960435746465) BETWEEN (rt0.c3) AND (rt0.c0)) THEN ((rt0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)) WHEN LIKELIHOOD(DISTINCT rt0.c2, rt0.c0) THEN CAST(rt0.c3 AS REAL) ELSE JULIANDAY(vt1.c0, rt0.c0, rt0.c0, rt0.c0, rt0.c0) END))) LIMIT 0x0 INTERSECT SELECT MAX(rt0.c3) FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c3, vt1.c0, vt1.c0)) BETWEEN ((rt0.c3, rt0.c3, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c2))) IN (((((rt0.c0)AND(vt1.c0)))AND(rt0.c0))))) LIMIT 0X0;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (((((rt0.c1 COLLATE NOCASE)AND(((rt0.c0)<(vt1.c0)))))OR(CASE vt1.c0  WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END)));
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE (((((((rt0.c1 COLLATE NOCASE)AND(((rt0.c0)<(vt1.c0)))))OR(CASE vt1.c0  WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END)))AND(json_array_length(CAST(rt0.c2 AS TEXT))))) INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE ((rt0.c2 IN ()));
SELECT ALL * FROM rt0 WHERE (((~ (rt0.c1)) IN ())) ORDER BY ((((((rt0.c3) ISNULL))AND(((rt0.c3)>>(rt0.c0)))))AND(CAST(rt0.c2 AS NUMERIC))), (((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c0)))) ISNULL) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((~ (rt0.c1)) IN ())) ORDER BY ((((((rt0.c3) ISNULL))AND(((rt0.c3)>>(rt0.c0)))))AND(CAST(rt0.c2 AS NUMERIC))), (((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c0)))) ISNULL) ASC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN (rt0.c3 IN ()) THEN rt0.c3 COLLATE BINARY WHEN rt0.c1 THEN ((rt0.c3)!=(rt0.c0)) WHEN NULL COLLATE NOCASE THEN ((((rt0.c2)OR(rt0.c2)))AND(rt0.c2)) WHEN rt0.c2 THEN HEX(rt0.c1) ELSE CAST(rt0.c2 AS INTEGER) END) ORDER BY ((((((rt0.c3) ISNULL))AND(((rt0.c3)>>(rt0.c0)))))AND(CAST(rt0.c2 AS NUMERIC))), (((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c0)))) ISNULL) ASC;
SELECT ALL * FROM rt0 WHERE (((~ (rt0.c1)) IN ())) ORDER BY ((((((rt0.c3) ISNULL))AND(((rt0.c3)>>(rt0.c0)))))AND(CAST(rt0.c2 AS NUMERIC))), (((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c0)))) ISNULL) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((~ (rt0.c1)) IN ())) ORDER BY ((((((rt0.c3) ISNULL))AND(((rt0.c3)>>(rt0.c0)))))AND(CAST(rt0.c2 AS NUMERIC))), (((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c0)))) ISNULL) ASC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN (rt0.c3 IN ()) THEN rt0.c3 COLLATE BINARY WHEN rt0.c1 THEN ((rt0.c3)!=(rt0.c0)) WHEN NULL COLLATE NOCASE THEN ((((rt0.c2)OR(rt0.c2)))AND(rt0.c2)) WHEN rt0.c2 THEN HEX(rt0.c1) ELSE CAST(rt0.c2 AS INTEGER) END) ORDER BY ((((((rt0.c3) ISNULL))AND(((rt0.c3)>>(rt0.c0)))))AND(CAST(rt0.c2 AS NUMERIC))), (((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c0)))) ISNULL) ASC;
SELECT * FROM vt1, rt0 WHERE (IFNULL(DISTINCT rt0.c2, rt0.c1) COLLATE RTRIM);
SELECT ALL * FROM vt1, rt0 WHERE (((IFNULL(DISTINCT rt0.c2, rt0.c1) COLLATE RTRIM)AND((((rt0.c3)LIKE(rt0.c1)) IN (NULL))))) ORDER BY ((rt0.c1 COLLATE RTRIM) NOT BETWEEN (((rt0.c0)IS(rt0.c1))) AND ((~ (vt1.c0)))) ASC  NULLS FIRST, (((+ (rt0.c2)))>>(CAST('4nbh{' AS TEXT))) DESC  NULLS FIRST, ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0))) IS FALSE) DESC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (IFNULL(DISTINCT rt0.c2, rt0.c1) COLLATE RTRIM);
SELECT ALL * FROM vt1, rt0 WHERE (((IFNULL(DISTINCT rt0.c2, rt0.c1) COLLATE RTRIM)AND((((rt0.c3)LIKE(rt0.c1)) IN (NULL))))) ORDER BY ((rt0.c1 COLLATE RTRIM) NOT BETWEEN (((rt0.c0)IS(rt0.c1))) AND ((~ (vt1.c0)))) ASC  NULLS FIRST, (((+ (rt0.c2)))>>(CAST('4nbh{' AS TEXT))) DESC  NULLS FIRST, ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0))) IS FALSE) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((NULL) NOT BETWEEN (((vt1.c0)<<(vt1.c0))) AND (((vt1.c0)<=('-2117830978'))))) ORDER BY ((vt1.c0) IS TRUE) COLLATE BINARY DESC  NULLS FIRST, CAST((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0, vt1.c0))) AS BLOB) DESC  NULLS FIRST, (((vt1.c0)) NOT BETWEEN (((NOT (vt1.c0)))) AND ((((vt1.c0)/(vt1.c0)))))  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (((NULL) NOT BETWEEN (((vt1.c0)<<(vt1.c0))) AND (((vt1.c0)<=('-2117830978'))))) ORDER BY ((vt1.c0) IS TRUE) COLLATE BINARY DESC  NULLS FIRST, CAST((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0, vt1.c0))) AS BLOB) DESC  NULLS FIRST, (((vt1.c0)) NOT BETWEEN (((NOT (vt1.c0)))) AND ((((vt1.c0)/(vt1.c0)))))  NULLS FIRST LIMIT 0X3;
SELECT MAX(rt0.c2) FROM rt0 WHERE (CASE ((((((((rt0.c1)OR(rt0.c1)))AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c2))  WHEN CASE rt0.c3  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN x'4f' ELSE rt0.c0 END THEN ((rt0.c1) IS FALSE) ELSE 'mZL' END);
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((CASE ((((((((rt0.c1)OR(rt0.c1)))AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c2))  WHEN CASE rt0.c3  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN x'4f' ELSE rt0.c0 END THEN ((rt0.c1) IS FALSE) ELSE 'mZL' END)AND(CAST((('-1127236167') ISNULL) AS REAL)))) INTERSECT SELECT MAX(rt0.c2) FROM rt0 WHERE (HEX(DISTINCT rt0.c3));
SELECT * FROM rt0 WHERE (x'3d1e');
SELECT * FROM rt0 WHERE (((x'3d1e')AND(((((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c1)))||(rt0.c0))))) ORDER BY (('-1894143475')/(((rt0.c2)-(rt0.c3)))), (((((rt0.c0, rt0.c1, rt0.c2))<=((rt0.c2, rt0.c1, rt0.c0))))/(((rt0.c0) IS FALSE))) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (x'3d1e');
SELECT * FROM rt0 WHERE (((x'3d1e')AND(((((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c1)))||(rt0.c0))))) ORDER BY (('-1894143475')/(((rt0.c2)-(rt0.c3)))), (((((rt0.c0, rt0.c1, rt0.c2))<=((rt0.c2, rt0.c1, rt0.c0))))/(((rt0.c0) IS FALSE))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((+ (((vt1.c0) IS TRUE)))) ORDER BY ((rt0.c1 COLLATE NOCASE)<=(((((((((rt0.c2)AND(rt0.c0)))AND(vt1.c0)))AND(rt0.c0)))AND(rt0.c0)))) ASC  NULLS FIRST, '690931282' DESC;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((+ (((vt1.c0) IS TRUE))))AND(((((NULL)-(rt0.c3)))IS(((((vt1.c0)OR(rt0.c2)))OR(rt0.c0))))))) ORDER BY LOWER(rt0.c3), (CAST(rt0.c0 AS REAL) IN ((rt0.c1 IN ()), NULL)) LIMIT 0X1 INTERSECT SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((((((((((((vt1.c0)LIKE(0.6448294834851097)))AND(((rt0.c3)!=(rt0.c0)))))OR(CASE rt0.c0  WHEN NULL THEN rt0.c2 WHEN rt0.c3 THEN vt1.c0 END)))AND(((((rt0.c3)OR(rt0.c3)))OR(rt0.c3)))))OR(LIKELY(vt1.c0))))AND(((((((((((rt0.c3)AND(NULL)))OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c1)))))AND((((('-853887973')OR(rt0.c1)))AND(rt0.c1))))) ORDER BY LOWER(rt0.c3), (CAST(rt0.c0 AS REAL) IN ((rt0.c1 IN ()), NULL)) LIMIT 1;
SELECT * FROM rt0 WHERE (CASE WHEN ((rt0.c1)<>(rt0.c0)) THEN rt0.c3 COLLATE RTRIM ELSE ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c1)) END) ORDER BY LIKELIHOOD((rt0.c1 IN (x'413f', rt0.c0)), ((((rt0.c0)OR(rt0.c1)))OR(rt0.c3))) DESC, CASE WHEN CAST(rt0.c0 AS TEXT) THEN rt0.c0 WHEN SUBSTR(rt0.c3, rt0.c3) THEN CAST(rt0.c0 AS INTEGER) WHEN (~ (rt0.c3)) THEN rt0.c0 COLLATE BINARY ELSE '-97448687' END DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN ((rt0.c1)!=(rt0.c0)) THEN rt0.c3 COLLATE RTRIM ELSE ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c1)) END)AND(CAST(rt0.c3 AS TEXT)))) ORDER BY LIKELIHOOD((rt0.c1 IN (x'413f', rt0.c0)), ((((rt0.c0)OR(rt0.c1)))OR(rt0.c3))) DESC, CASE WHEN CAST(rt0.c0 AS TEXT) THEN rt0.c0 WHEN SUBSTR(rt0.c3, rt0.c3) THEN CAST(rt0.c0 AS INTEGER) WHEN (~ (rt0.c3)) THEN rt0.c0 COLLATE BINARY ELSE '-97448687' END DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM rt0 WHERE (CASE WHEN ((rt0.c1)<>(rt0.c0)) THEN rt0.c3 COLLATE RTRIM ELSE ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c1)) END) ORDER BY LIKELIHOOD((rt0.c1 IN (x'413f', rt0.c0)), ((((rt0.c0)OR(rt0.c1)))OR(rt0.c3))) DESC, CASE WHEN CAST(rt0.c0 AS TEXT) THEN rt0.c0 WHEN SUBSTR(rt0.c3, rt0.c3) THEN CAST(rt0.c0 AS INTEGER) WHEN (~ (rt0.c3)) THEN rt0.c0 COLLATE BINARY ELSE '-97448687' END DESC  NULLS LAST;
SELECT COUNT(*) FROM rt0 WHERE ('-1002960745');
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ('-1002960745') ORDER BY CAST(rt0.c3 COLLATE NOCASE AS BLOB)  NULLS LAST, (((NOT (rt0.c2))) IS TRUE) LIMIT 0;
SELECT ALL COUNT(*) FROM rt0 WHERE ((((((rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c1, rt0.c1)))) NOT BETWEEN ((rt0.c1 IN (rt0.c2))) AND (SQLITE_VERSION()))) ORDER BY NULL COLLATE RTRIM  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((((rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c1, rt0.c1)))) NOT BETWEEN ((rt0.c1 IN (rt0.c2))) AND (SQLITE_VERSION()))) ORDER BY NULL COLLATE RTRIM  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (CAST(ABS(vt1.c0) AS REAL)) ORDER BY vt1.c0 DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (CAST(ABS(vt1.c0) AS REAL)) ORDER BY vt1.c0 DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1 WHERE ((((TRIM(DISTINCT vt1.c0, vt1.c0), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))>=(('-609049879', ((vt1.c0)OR(vt1.c0)))))) ORDER BY vt1.c0 DESC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (CAST(ABS(vt1.c0) AS REAL)) ORDER BY vt1.c0 DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (CAST(ABS(vt1.c0) AS REAL)) ORDER BY vt1.c0 DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1 WHERE ((((TRIM(DISTINCT vt1.c0, vt1.c0), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))>=(('-609049879', ((vt1.c0)OR(vt1.c0)))))) ORDER BY vt1.c0 DESC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1 WHERE (((0X615d2914)LIKE((NOT (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((0x615d2914)LIKE((NOT (vt1.c0))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN ((vt1.c0) IS TRUE) THEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) WHEN ((vt1.c0) ISNULL) THEN CAST(vt1.c0 AS INTEGER) END) LIMIT 0;
SELECT * FROM vt1 WHERE (((0X615d2914)LIKE((NOT (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((0x615d2914)LIKE((NOT (vt1.c0))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN ((vt1.c0) IS TRUE) THEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) WHEN ((vt1.c0) ISNULL) THEN CAST(vt1.c0 AS INTEGER) END) LIMIT 0;
SELECT MAX(rt0.c2) FROM rt0 LEFT OUTER JOIN vt1 ON rt0.c0 WHERE (CAST(((((((((((vt1.c0)AND(vt1.c0)))OR(NULL)))AND(rt0.c2)))AND(-2007699474)))OR(rt0.c0)) AS REAL)) ORDER BY ((((((x'')AND(CASE WHEN rt0.c2 THEN rt0.c3 END)))OR(vt1.c0 COLLATE RTRIM)))OR((((rt0.c2, rt0.c1))>=((rt0.c0, NULL)))));
SELECT DISTINCT MAX(rt0.c2) FROM rt0 LEFT OUTER JOIN vt1 ON rt0.c0 WHERE (CAST(((((((((((vt1.c0)AND(vt1.c0)))OR(NULL)))AND(rt0.c2)))AND(-2007699474)))OR(rt0.c0)) AS REAL)) ORDER BY rt0.c1 INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM rt0 LEFT OUTER JOIN vt1 ON rt0.c0 WHERE ((+ (CASE vt1.c0  WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c0 END))) ORDER BY rt0.c1;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON (- (CAST(rt0.c1 AS INTEGER))) WHERE ((((0.6814387237029428, rt0.c3)) BETWEEN ((CAST(rt0.c2 AS NUMERIC), CASE WHEN rt0.c2 THEN rt0.c2 END)) AND (((((rt0.c3)) NOT BETWEEN (('0.6453502077412708')) AND ((rt0.c2))), (+ (rt0.c1)))))) ORDER BY (+ ((rt0.c3 IN ()))), rt0.c1  NULLS LAST, (((rt0.c0, vt1.c0)) NOT BETWEEN (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c0))), CAST(rt0.c1 AS REAL))) AND ((CAST('fx' AS REAL), 513171419)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON (- (CAST(rt0.c1 AS INTEGER))) WHERE ((((0.6814387237029428, rt0.c3)) BETWEEN ((CAST(rt0.c2 AS NUMERIC), CASE WHEN rt0.c2 THEN rt0.c2 END)) AND (((((rt0.c3)) NOT BETWEEN (('0.6453502077412708')) AND ((rt0.c2))), (+ (rt0.c1)))))) ORDER BY (+ ((rt0.c3 IN ()))), rt0.c1  NULLS LAST, (((rt0.c0, vt1.c0)) NOT BETWEEN (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c0))), CAST(rt0.c1 AS REAL))) AND ((CAST('fx' AS REAL), 0x1e965fdb)))  NULLS FIRST;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON (- (CAST(rt0.c1 AS INTEGER))) WHERE ((((0.6814387237029428, rt0.c3)) BETWEEN ((CAST(rt0.c2 AS NUMERIC), CASE WHEN rt0.c2 THEN rt0.c2 END)) AND (((((rt0.c3)) NOT BETWEEN (('0.6453502077412708')) AND ((rt0.c2))), (+ (rt0.c1)))))) ORDER BY (+ ((rt0.c3 IN ()))), rt0.c1  NULLS LAST, (((rt0.c0, vt1.c0)) NOT BETWEEN (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c0))), CAST(rt0.c1 AS REAL))) AND ((CAST('fx' AS REAL), 513171419)))  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE ((~ (((0.5281073587143161) NOT NULL)))) ORDER BY ((((((vt1.c0)AND(rt0.c1)))AND(rt0.c2))) IS TRUE) DESC;
SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE ((~ (((0.5281073587143161) NOT NULL)))) ORDER BY ((((((vt1.c0)AND(rt0.c1)))AND(rt0.c2))) IS TRUE) DESC LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE ((NOT (((rt0.c1)>=(rt0.c0))))) ORDER BY ((((((vt1.c0)AND(rt0.c1)))AND(rt0.c2))) IS TRUE) DESC LIMIT 0;
SELECT MIN(rt0.c1) FROM vt1, rt0 NOT INDEXED WHERE (((rt0.c2) ISNULL)) ORDER BY CASE WHEN vt1.c0 THEN ((vt1.c0) NOTNULL) WHEN ((rt0.c2)IS(rt0.c1)) THEN (- (rt0.c3)) WHEN x'a81aa57a' THEN ((vt1.c0)AND(rt0.c3)) END  NULLS FIRST, ((((rt0.c2) NOT BETWEEN (rt0.c0) AND ('-136887350'))) NOT BETWEEN ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) AND (CAST(rt0.c3 AS INTEGER)));
SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (((rt0.c2) ISNULL)) ORDER BY CASE CASE vt1.c0  WHEN rt0.c1 THEN rt0.c0 END  WHEN ((rt0.c2)GLOB(rt0.c2)) THEN (((rt0.c0))<>((vt1.c0))) ELSE ((rt0.c2)>(rt0.c2)) END;
SELECT * FROM rt0, vt1 WHERE (UNLIKELY(DISTINCT ((vt1.c0)<(rt0.c1))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (UNLIKELY(DISTINCT ((vt1.c0)<(rt0.c1)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c2, rt0.c3))!=((rt0.c2, rt0.c0)))))<>((((rt0.c2) NOT BETWEEN (rt0.c2) AND (vt1.c0))))));
SELECT * FROM rt0, vt1 WHERE (UNLIKELY(DISTINCT ((vt1.c0)<(rt0.c1))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (UNLIKELY(DISTINCT ((vt1.c0)<(rt0.c1)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c2, rt0.c3))!=((rt0.c2, rt0.c0)))))<>((((rt0.c2) NOT BETWEEN (rt0.c2) AND (vt1.c0))))));
SELECT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((((rt0.c1, rt0.c1, rt0.c0, vt1.c0))>=((vt1.c0, rt0.c0, rt0.c2, 0.36973883036893695)))) BETWEEN ((((rt0.c0, rt0.c2, vt1.c0, vt1.c0, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c3, rt0.c1, vt1.c0, rt0.c2)) AND ((rt0.c3, rt0.c0, rt0.c2, rt0.c3, rt0.c3)))) AND (rt0.c0 COLLATE BINARY)));
SELECT DISTINCT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((((rt0.c1, rt0.c1, rt0.c0, vt1.c0))>((vt1.c0, rt0.c0, rt0.c2, 0.36973883036893695)))) BETWEEN ((((rt0.c0, rt0.c2, vt1.c0, vt1.c0, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c3, rt0.c1, vt1.c0, rt0.c2)) AND ((rt0.c3, rt0.c0, rt0.c2, rt0.c3, rt0.c3)))) AND (rt0.c0 COLLATE BINARY))) LIMIT 0X1;
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((CAST(rt0.c2 AS BLOB) IN ()));
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((((CAST(rt0.c2 AS BLOB) IN ()))AND(((('709578335', rt0.c2)) BETWEEN ((rt0.c0, rt0.c0)) AND ((rt0.c0, rt0.c1))) COLLATE NOCASE))) ORDER BY rt0.c1 ASC;
SELECT * FROM rt0, vt1 WHERE (DATE(((rt0.c1)||(vt1.c0)), vt1.c0, (((x'e9'))>((vt1.c0))), ((('1374415605', rt0.c0, rt0.c3))==((rt0.c2, vt1.c0, rt0.c3))), CAST(vt1.c0 AS TEXT))) ORDER BY (('1082644571')GLOB(((rt0.c1) IS FALSE)));
SELECT DISTINCT * FROM rt0, vt1 WHERE (DATE(((rt0.c1)||(vt1.c0)), vt1.c0, (((x'e9'))>((vt1.c0))), ((('1374415605', rt0.c0, rt0.c3))==((rt0.c2, vt1.c0, rt0.c3))), CAST(vt1.c0 AS TEXT))) ORDER BY (('1082644571')GLOB(((rt0.c1) IS FALSE))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((vt1.c0 IN (rt0.c0 COLLATE NOCASE, ((rt0.c1) IS FALSE)))) ORDER BY (('1082644571')GLOB(((rt0.c1) IS FALSE))) LIMIT 2;
SELECT * FROM rt0, vt1 WHERE (DATE(((rt0.c1)||(vt1.c0)), vt1.c0, (((x'e9'))>((vt1.c0))), ((('1374415605', rt0.c0, rt0.c3))==((rt0.c2, vt1.c0, rt0.c3))), CAST(vt1.c0 AS TEXT))) ORDER BY (('1082644571')GLOB(((rt0.c1) IS FALSE)));
SELECT DISTINCT * FROM rt0, vt1 WHERE (DATE(((rt0.c1)||(vt1.c0)), vt1.c0, (((x'e9'))>((vt1.c0))), ((('1374415605', rt0.c0, rt0.c3))==((rt0.c2, vt1.c0, rt0.c3))), CAST(vt1.c0 AS TEXT))) ORDER BY (('1082644571')GLOB(((rt0.c1) IS FALSE))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((vt1.c0 IN (rt0.c0 COLLATE NOCASE, ((rt0.c1) IS FALSE)))) ORDER BY (('1082644571')GLOB(((rt0.c1) IS FALSE))) LIMIT 2;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (LOWER(DISTINCT (((rt0.c0, rt0.c0, rt0.c2))!=((rt0.c1, rt0.c0, rt0.c3))))) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c0)))<('1438979497')) DESC, CASE WHEN rt0.c1 THEN NULL WHEN ((rt0.c3)>=(rt0.c2)) THEN rt0.c0 WHEN (('t') BETWEEN (rt0.c3) AND (rt0.c3)) THEN CASE rt0.c1  WHEN rt0.c2 THEN rt0.c3 END ELSE rt0.c3 END, (((rt0.c3, rt0.c1)) NOT BETWEEN (((((rt0.c2, NULL))=((rt0.c3, rt0.c3))), (rt0.c0 IN (rt0.c1, rt0.c1, rt0.c3)))) AND (((((rt0.c3)) BETWEEN ((rt0.c3)) AND ((rt0.c1))), ((((((rt0.c3)AND(rt0.c1)))AND(rt0.c0)))OR(rt0.c3))))) ASC, (((CAST(rt0.c3 AS REAL)))<((rt0.c3))) ASC;
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((LOWER(DISTINCT (((rt0.c0, rt0.c0, rt0.c2))!=((rt0.c1, rt0.c0, rt0.c3)))))AND(((((rt0.c1)IS(rt0.c1)))<<(((((((((rt0.c3)OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c3)))AND(NULL))))))) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c0)))<('1438979497')) DESC, CASE WHEN rt0.c1 THEN NULL WHEN ((rt0.c3)>=(rt0.c2)) THEN rt0.c0 WHEN (('t') BETWEEN (rt0.c3) AND (rt0.c3)) THEN CASE rt0.c1  WHEN rt0.c2 THEN rt0.c3 END ELSE rt0.c3 END, (((rt0.c3, rt0.c1)) NOT BETWEEN (((((rt0.c2, NULL))=((rt0.c3, rt0.c3))), (rt0.c0 IN (rt0.c1, rt0.c1, rt0.c3)))) AND (((((rt0.c3)) BETWEEN ((rt0.c3)) AND ((rt0.c1))), ((((((rt0.c3)AND(rt0.c1)))AND(rt0.c0)))OR(rt0.c3))))) ASC, (((CAST(rt0.c3 AS REAL)))<((rt0.c3))) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((CASE WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END)AND(((rt0.c3)<(rt0.c3)))))AND(((rt0.c3)>(rt0.c1))))) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c0)))<('1438979497')) DESC, CASE WHEN rt0.c1 THEN NULL WHEN ((rt0.c3)>=(rt0.c2)) THEN rt0.c0 WHEN (('t') BETWEEN (rt0.c3) AND (rt0.c3)) THEN CASE rt0.c1  WHEN rt0.c2 THEN rt0.c3 END ELSE rt0.c3 END, (((rt0.c3, rt0.c1)) NOT BETWEEN (((((rt0.c2, NULL))==((rt0.c3, rt0.c3))), (rt0.c0 IN (rt0.c1, rt0.c1, rt0.c3)))) AND (((((rt0.c3)) BETWEEN ((rt0.c3)) AND ((rt0.c1))), ((((((rt0.c3)AND(rt0.c1)))AND(rt0.c0)))OR(rt0.c3))))) ASC, (((CAST(rt0.c3 AS REAL)))<((rt0.c3))) ASC LIMIT 0;
SELECT ALL * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (((rt0.c0)AND((~ (((rt0.c1)>>(rt0.c3))))))) ORDER BY CAST(load_extension(rt0.c3, rt0.c2) AS BLOB) DESC, ((((((NULL)AND(rt0.c2)))AND(rt0.c3)))GLOB(CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END))  NULLS FIRST, CAST(rt0.c3 COLLATE NOCASE AS REAL) DESC;
SELECT ALL * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (((rt0.c0)AND((~ (((rt0.c1)>>(rt0.c3))))))) ORDER BY CAST(load_extension(rt0.c3, rt0.c2) AS BLOB) DESC, ((((((NULL)AND(rt0.c2)))AND(rt0.c3)))GLOB(CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END))  NULLS FIRST, CAST(rt0.c3 COLLATE NOCASE AS REAL) DESC;
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE (CAST((((x'737c', rt0.c3))<((rt0.c0, rt0.c0))) AS INTEGER));
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE (CAST((((x'737c', rt0.c3))<((rt0.c0, rt0.c0))) AS INTEGER));
SELECT ALL COUNT(*) FROM rt0 CROSS JOIN vt1 ON UPPER(rt0.c3) COLLATE BINARY WHERE (LIKELY(((rt0.c2)AND(rt0.c3))));
SELECT DISTINCT COUNT(*) FROM rt0 CROSS JOIN vt1 ON UPPER(rt0.c3) COLLATE BINARY WHERE (LIKELY(((rt0.c2)AND(rt0.c3)))) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 CROSS JOIN vt1 ON UPPER(rt0.c3) COLLATE BINARY WHERE (((NULL) BETWEEN (((rt0.c1)+(rt0.c2))) AND (((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c3))))) LIMIT 2;
SELECT * FROM vt1 WHERE (((CASE NULL  WHEN vt1.c0 THEN vt1.c0 END)AND(vt1.c0)));
SELECT * FROM vt1 WHERE (((CASE NULL  WHEN vt1.c0 THEN vt1.c0 END)AND(vt1.c0))) ORDER BY ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) COLLATE BINARY ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((CASE NULL  WHEN vt1.c0 THEN vt1.c0 END)AND(vt1.c0)));
SELECT * FROM vt1 WHERE (((CASE NULL  WHEN vt1.c0 THEN vt1.c0 END)AND(vt1.c0))) ORDER BY ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) COLLATE BINARY ASC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((((((x'b883')AND((+ (rt0.c2)))))OR(vt1.c0 COLLATE NOCASE)))AND('99367454'))) ORDER BY ((((((rt0.c0)AND(rt0.c0)))AND(rt0.c1)))*(((vt1.c0) IS FALSE)))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((((x'b883')AND((+ (rt0.c2)))))OR(vt1.c0 COLLATE NOCASE)))AND('99367454'))) ORDER BY ((((((rt0.c0)AND(rt0.c0)))AND(rt0.c1)))*(((vt1.c0) IS FALSE)))  NULLS LAST LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE (((((((x'b883')AND((+ (rt0.c2)))))OR(vt1.c0 COLLATE NOCASE)))AND('99367454'))) ORDER BY ((((((rt0.c0)AND(rt0.c0)))AND(rt0.c1)))*(((vt1.c0) IS FALSE)))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((((x'b883')AND((+ (rt0.c2)))))OR(vt1.c0 COLLATE NOCASE)))AND('99367454'))) ORDER BY ((((((rt0.c0)AND(rt0.c0)))AND(rt0.c1)))*(((vt1.c0) IS FALSE)))  NULLS LAST LIMIT 0x0;
SELECT MAX(vt1.c0) FROM vt1 WHERE (HEX(DISTINCT '-478659586')) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))*(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(NULL)))), ((((((((((((vt1.c0)<=(vt1.c0)))OR(ABS(DISTINCT vt1.c0))))AND(((vt1.c0) NOT NULL))))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND((~ (vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) DESC;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (HEX(DISTINCT '-478659586')) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))*(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(NULL)))), ((((((((((((vt1.c0)<=(vt1.c0)))OR(ABS(DISTINCT vt1.c0))))AND(((vt1.c0) NOT NULL))))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND((~ (vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) DESC LIMIT 4;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE ((+ (LTRIM(rt0.c1))));
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE ((+ (LTRIM(rt0.c1)))) INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (GLOB(((rt0.c0) IS FALSE), CASE NULL  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c3 WHEN -1348616264 THEN rt0.c1 WHEN rt0.c2 THEN '-6367359' WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c3 THEN 0.6262554950954902 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c3 END));
SELECT * FROM vt1, rt0 WHERE ((CAST(rt0.c1 AS BLOB) IN (rt0.c0)));
SELECT ALL * FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS BLOB) IN (rt0.c0)))AND(CAST(CAST(vt1.c0 AS NUMERIC) AS INTEGER)))) ORDER BY (((((((1.10144383E9, rt0.c3, rt0.c2))>=((vt1.c0, rt0.c1, rt0.c1))))OR(rt0.c1)))AND(0xfffffffff8560bd5)) LIMIT 0x4 INTERSECT SELECT * FROM vt1, rt0 WHERE (((rt0.c2)GLOB(rt0.c1)) COLLATE BINARY) ORDER BY (((((((1.10144383E9, rt0.c3, rt0.c2))>=((vt1.c0, rt0.c1, rt0.c1))))OR(rt0.c1)))AND(0Xfffffffff8560bd5)) LIMIT 0X4;
SELECT * FROM vt1, rt0 WHERE ((CAST(rt0.c1 AS BLOB) IN (rt0.c0)));
SELECT ALL * FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS BLOB) IN (rt0.c0)))AND(CAST(CAST(vt1.c0 AS NUMERIC) AS INTEGER)))) ORDER BY (((((((1.10144383E9, rt0.c3, rt0.c2))>=((vt1.c0, rt0.c1, rt0.c1))))OR(rt0.c1)))AND(0xfffffffff8560bd5)) LIMIT 0x4 INTERSECT SELECT * FROM vt1, rt0 WHERE (((rt0.c2)GLOB(rt0.c1)) COLLATE BINARY) ORDER BY (((((((1.10144383E9, rt0.c3, rt0.c2))>=((vt1.c0, rt0.c1, rt0.c1))))OR(rt0.c1)))AND(0Xfffffffff8560bd5)) LIMIT 0X4;
SELECT ALL * FROM rt0, vt1 WHERE (json(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c1))));
SELECT ALL * FROM rt0, vt1 WHERE (json(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c1)))) ORDER BY (((((((vt1.c0)AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)) IN ()) DESC, (+ (rt0.c0 COLLATE BINARY)), (((+ (rt0.c2)))LIKE(((rt0.c2)+(rt0.c1))))  NULLS FIRST, CAST(((rt0.c3)&(rt0.c3)) AS NUMERIC) DESC;
SELECT ALL * FROM rt0, vt1 WHERE (json(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c1))));
SELECT ALL * FROM rt0, vt1 WHERE (json(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c1)))) ORDER BY (((((((vt1.c0)AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)) IN ()) DESC, (+ (rt0.c0 COLLATE BINARY)), (((+ (rt0.c2)))LIKE(((rt0.c2)+(rt0.c1))))  NULLS FIRST, CAST(((rt0.c3)&(rt0.c3)) AS NUMERIC) DESC;
SELECT ALL MAX(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE (NULL) ORDER BY ((rt0.c2)<<(CAST(rt0.c0 AS BLOB))), (UPPER(vt1.c0) IN ());
SELECT DISTINCT MAX(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE (((NULL)AND(CAST((rt0.c0 IN ()) AS NUMERIC)))) ORDER BY ((rt0.c2)<<(CAST(rt0.c0 AS BLOB))), (UPPER(vt1.c0) IN ());
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON ((((((((rt0.c1)OR(rt0.c0)))OR(vt1.c0)))AND(CASE WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 END)))OR((- (rt0.c1)))) WHERE (((((((rt0.c1))>=((rt0.c0))), ((rt0.c3) NOT BETWEEN ('1892931174') AND (rt0.c3)), (NOT (vt1.c0)), rt0.c3, 0.4828609310595049, CAST(rt0.c2 AS INTEGER), vt1.c0 COLLATE NOCASE))>=((((rt0.c0) NOT NULL), rt0.c1 COLLATE RTRIM, ((vt1.c0) NOT NULL), ((vt1.c0) ISNULL), (((rt0.c3, rt0.c0)) BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c3, rt0.c1))), (((rt0.c3, rt0.c0, rt0.c3)) BETWEEN ((rt0.c1, rt0.c2, vt1.c0)) AND ((rt0.c0, NULL, rt0.c3))), (rt0.c0 IN ())))));
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON ((((((((rt0.c1)OR(rt0.c0)))OR(vt1.c0)))AND(CASE WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 END)))OR((- (rt0.c1)))) WHERE (((((((((rt0.c1))>((rt0.c0))), ((rt0.c3) NOT BETWEEN ('1892931174') AND (rt0.c3)), (NOT (vt1.c0)), rt0.c3, 0.4828609310595049, CAST(rt0.c2 AS INTEGER), vt1.c0 COLLATE NOCASE))==((((rt0.c0) NOT NULL), rt0.c1 COLLATE RTRIM, ((vt1.c0) NOT NULL), ((vt1.c0) ISNULL), (((rt0.c3, rt0.c0)) BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c3, rt0.c1))), (((rt0.c3, rt0.c0, rt0.c3)) BETWEEN ((rt0.c1, rt0.c2, vt1.c0)) AND ((rt0.c0, NULL, rt0.c3))), (rt0.c0 IN ())))))AND(((((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN vt1.c0 END)OR(SQLITE_COMPILEOPTION_USED(rt0.c1))))OR(((((((((((rt0.c2)OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c3)))OR(rt0.c3)))OR(vt1.c0)))))));
SELECT * FROM rt0 WHERE (((((rt0.c3)%(rt0.c3)))*(((rt0.c0)>(rt0.c1))))) ORDER BY ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)))-(IFNULL(rt0.c0, rt0.c3))) DESC  NULLS LAST, ((rt0.c3 COLLATE RTRIM) NOT BETWEEN (rt0.c1) AND (((rt0.c3)-(rt0.c1)))), ((((((((rt0.c3)+(rt0.c1)))OR(rt0.c1 COLLATE NOCASE)))OR(((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c2)))))AND(((rt0.c3)IS(rt0.c2))));
SELECT * FROM rt0 WHERE (((((((rt0.c3)%(rt0.c3)))*(((rt0.c0)>(rt0.c1)))))AND((((rt0.c3, ((rt0.c1) ISNULL)))<=((CAST(rt0.c1 AS TEXT), (('-1870541080')*(rt0.c2)))))))) ORDER BY ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)))-(IFNULL(rt0.c0, rt0.c3))) DESC  NULLS LAST, ((rt0.c3 COLLATE RTRIM) NOT BETWEEN (rt0.c1) AND (((rt0.c3)-(rt0.c1)))), ((((((((rt0.c3)+(rt0.c1)))OR(rt0.c1 COLLATE NOCASE)))OR(((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c2)))))AND(((rt0.c3)IS(rt0.c2))));
SELECT * FROM rt0 WHERE (((((rt0.c3)%(rt0.c3)))*(((rt0.c0)>(rt0.c1))))) ORDER BY ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)))-(IFNULL(rt0.c0, rt0.c3))) DESC  NULLS LAST, ((rt0.c3 COLLATE RTRIM) NOT BETWEEN (rt0.c1) AND (((rt0.c3)-(rt0.c1)))), ((((((((rt0.c3)+(rt0.c1)))OR(rt0.c1 COLLATE NOCASE)))OR(((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c2)))))AND(((rt0.c3)IS(rt0.c2))));
SELECT * FROM rt0 WHERE (((((((rt0.c3)%(rt0.c3)))*(((rt0.c0)>(rt0.c1)))))AND((((rt0.c3, ((rt0.c1) ISNULL)))<=((CAST(rt0.c1 AS TEXT), (('-1870541080')*(rt0.c2)))))))) ORDER BY ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)))-(IFNULL(rt0.c0, rt0.c3))) DESC  NULLS LAST, ((rt0.c3 COLLATE RTRIM) NOT BETWEEN (rt0.c1) AND (((rt0.c3)-(rt0.c1)))), ((((((((rt0.c3)+(rt0.c1)))OR(rt0.c1 COLLATE NOCASE)))OR(((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c2)))))AND(((rt0.c3)IS(rt0.c2))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0) ISNULL) IN (vt1.c0))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, 0.9607073496388701, vt1.c0)) BETWEEN ((vt1.c0, ((vt1.c0) NOTNULL), vt1.c0, ((vt1.c0)|(vt1.c0)), COALESCE(DISTINCT vt1.c0, vt1.c0), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((CAST(vt1.c0 AS TEXT), 7.74386652E8 COLLATE BINARY, 'L5' COLLATE NOCASE, ((x'3e')/(vt1.c0)), CAST(vt1.c0 AS BLOB), ((vt1.c0)IS NOT(vt1.c0))))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0) ISNULL) IN (vt1.c0))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, 0.9607073496388701, vt1.c0)) BETWEEN ((vt1.c0, ((vt1.c0) NOTNULL), vt1.c0, ((vt1.c0)|(vt1.c0)), COALESCE(DISTINCT vt1.c0, vt1.c0), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((CAST(vt1.c0 AS TEXT), 7.74386652E8 COLLATE BINARY, 'L5' COLLATE NOCASE, ((x'3e')/(vt1.c0)), CAST(vt1.c0 AS BLOB), ((vt1.c0)IS NOT(vt1.c0))))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0) ISNULL) IN (vt1.c0))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, 0.9607073496388701, vt1.c0)) BETWEEN ((vt1.c0, ((vt1.c0) NOTNULL), vt1.c0, ((vt1.c0)|(vt1.c0)), COALESCE(DISTINCT vt1.c0, vt1.c0), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((CAST(vt1.c0 AS TEXT), 7.74386652E8 COLLATE BINARY, 'L5' COLLATE NOCASE, ((x'3e')/(vt1.c0)), CAST(vt1.c0 AS BLOB), ((vt1.c0)IS NOT(vt1.c0))))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0) ISNULL) IN (vt1.c0))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, 0.9607073496388701, vt1.c0)) BETWEEN ((vt1.c0, ((vt1.c0) NOTNULL), vt1.c0, ((vt1.c0)|(vt1.c0)), COALESCE(DISTINCT vt1.c0, vt1.c0), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((CAST(vt1.c0 AS TEXT), 7.74386652E8 COLLATE BINARY, 'L5' COLLATE NOCASE, ((x'3e')/(vt1.c0)), CAST(vt1.c0 AS BLOB), ((vt1.c0)IS NOT(vt1.c0))))) DESC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE ((~ ((rt0.c3 IN ())))) ORDER BY x'c5aab8' ASC  NULLS FIRST, (((rt0.c0 IN (rt0.c0)))<=(rt0.c3 COLLATE RTRIM)) DESC;
SELECT * FROM rt0 NOT INDEXED, vt1 WHERE ((((~ ((rt0.c3 IN ()))))AND(UNLIKELY((rt0.c0 IN (rt0.c0, rt0.c3, rt0.c1)))))) ORDER BY (- (rt0.c1)) COLLATE BINARY INTERSECT SELECT * FROM rt0, vt1 WHERE ((((vt1.c0 IN (rt0.c1))) NOTNULL)) ORDER BY (- (rt0.c1)) COLLATE BINARY;
SELECT * FROM rt0, vt1 WHERE ((~ ((rt0.c3 IN ())))) ORDER BY x'c5aab8' ASC  NULLS FIRST, (((rt0.c0 IN (rt0.c0)))<=(rt0.c3 COLLATE RTRIM)) DESC;
SELECT * FROM rt0 NOT INDEXED, vt1 WHERE ((((~ ((rt0.c3 IN ()))))AND(UNLIKELY((rt0.c0 IN (rt0.c0, rt0.c3, rt0.c1)))))) ORDER BY (- (rt0.c1)) COLLATE BINARY INTERSECT SELECT * FROM rt0, vt1 WHERE ((((vt1.c0 IN (rt0.c1))) NOTNULL)) ORDER BY (- (rt0.c1)) COLLATE BINARY;
SELECT MAX(rt0.c2) FROM rt0 WHERE (CAST((rt0.c1 IN ()) AS REAL)) ORDER BY (((rt0.c1, rt0.c3)) BETWEEN ((IFNULL(rt0.c1, rt0.c1), (rt0.c1 IN (rt0.c2)))) AND (((rt0.c1 IN (NULL)), TYPEOF(rt0.c3))))  NULLS FIRST;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((CAST((rt0.c1 IN ()) AS REAL))AND(rt0.c3))) ORDER BY (((rt0.c1, rt0.c3)) BETWEEN ((IFNULL(rt0.c1, rt0.c1), (rt0.c1 IN (rt0.c2)))) AND (((rt0.c1 IN (NULL)), TYPEOF(rt0.c3))))  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (CHANGES()) ORDER BY (((rt0.c1, rt0.c3)) BETWEEN ((IFNULL(rt0.c1, rt0.c1), (rt0.c1 IN (rt0.c2)))) AND (((rt0.c1 IN (NULL)), TYPEOF(rt0.c3))))  NULLS FIRST LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (((((rt0.c2)<<(vt1.c0)))IS(((((((((((rt0.c1)AND(vt1.c0)))OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c2)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((rt0.c2)<<(vt1.c0)))IS(((((((((((rt0.c1)AND(vt1.c0)))OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c2)))))AND((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN (rt0.c2))))) ORDER BY (((~ (rt0.c3))) BETWEEN (((rt0.c1)<(vt1.c0))) AND ((NOT (rt0.c1)))) DESC  NULLS FIRST, (((rt0.c3)) NOT BETWEEN (((((vt1.c0))>((rt0.c2))))) AND ((CAST(NULL AS REAL)))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((CASE vt1.c0  WHEN 'TRUE' THEN vt1.c0 END)AND(CAST(vt1.c0 AS INTEGER))))AND(CAST(vt1.c0 AS INTEGER))))AND(vt1.c0))) ORDER BY (((~ (rt0.c3))) BETWEEN (((rt0.c1)<(vt1.c0))) AND ((NOT (rt0.c1)))) DESC  NULLS FIRST, (((rt0.c3)) NOT BETWEEN (((((vt1.c0))>((rt0.c2))))) AND ((CAST(NULL AS REAL)))) ASC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (((((rt0.c2)<<(vt1.c0)))IS(((((((((((rt0.c1)AND(vt1.c0)))OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c2)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((rt0.c2)<<(vt1.c0)))IS(((((((((((rt0.c1)AND(vt1.c0)))OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c2)))))AND((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN (rt0.c2))))) ORDER BY (((~ (rt0.c3))) BETWEEN (((rt0.c1)<(vt1.c0))) AND ((NOT (rt0.c1)))) DESC  NULLS FIRST, (((rt0.c3)) NOT BETWEEN (((((vt1.c0))>((rt0.c2))))) AND ((CAST(NULL AS REAL)))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((CASE vt1.c0  WHEN 'TRUE' THEN vt1.c0 END)AND(CAST(vt1.c0 AS INTEGER))))AND(CAST(vt1.c0 AS INTEGER))))AND(vt1.c0))) ORDER BY (((~ (rt0.c3))) BETWEEN (((rt0.c1)<(vt1.c0))) AND ((NOT (rt0.c1)))) DESC  NULLS FIRST, (((rt0.c3)) NOT BETWEEN (((((vt1.c0))>((rt0.c2))))) AND ((CAST(NULL AS REAL)))) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (CAST(vt1.c0 AS INTEGER));
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER))AND(0xfffffffff2e4f849))) LIMIT 0;
SELECT * FROM vt1 WHERE (CAST(vt1.c0 AS INTEGER));
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER))AND(0xfffffffff2e4f849))) LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2)>=(rt0.c3)))>(JULIANDAY(rt0.c1, vt1.c0, rt0.c3)))) ORDER BY (NOT ((('j''')OR(rt0.c2)))) ASC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2)==(rt0.c3)))>(JULIANDAY(rt0.c1, vt1.c0, rt0.c3)))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)))|((('') BETWEEN (rt0.c3) AND (rt0.c2)))), (((vt1.c0 IN (rt0.c1, rt0.c1)))<<(rt0.c1 COLLATE BINARY)) ASC;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2)>=(rt0.c3)))>(JULIANDAY(rt0.c1, vt1.c0, rt0.c3)))) ORDER BY (NOT ((('j''')OR(rt0.c2)))) ASC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2)==(rt0.c3)))>(JULIANDAY(rt0.c1, vt1.c0, rt0.c3)))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)))|((('') BETWEEN (rt0.c3) AND (rt0.c2)))), (((vt1.c0 IN (rt0.c1, rt0.c1)))<<(rt0.c1 COLLATE BINARY)) ASC;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (rt0.c2 COLLATE BINARY);
SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((rt0.c2 COLLATE BINARY)AND(((LOWER(DISTINCT vt1.c0)) NOTNULL)))) LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE ((((rt0.c0, rt0.c1, vt1.c0)) BETWEEN ((((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c0)), ((rt0.c3)==(vt1.c0)), (+ (NULL)))) AND ((CHAR(NULL, vt1.c0), ((rt0.c3)<(vt1.c0)), CAST(rt0.c1 AS BLOB))))) LIMIT 0;
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (NULL);
SELECT DISTINCT MIN(rt0.c0) FROM rt0, vt1 WHERE (((NULL)AND((((CAST(rt0.c1 AS NUMERIC), CASE rt0.c1  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END, (~ (rt0.c2)), CHANGES()))<=((CAST(vt1.c0 AS NUMERIC), ((rt0.c2)>=(rt0.c2)), CAST(rt0.c0 AS TEXT), (- (vt1.c0)))))))) LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((rt0.c0)OR((rt0.c1 IN ()))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(((rt0.c3)LIKE(x'')))))OR(((rt0.c1) NOT BETWEEN (x'cb') AND (rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((rt0.c0)OR((rt0.c1 IN ()))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(((rt0.c3)LIKE(x'')))))OR(((rt0.c1) NOT BETWEEN (x'cb') AND (rt0.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (SQLITE_COMPILEOPTION_GET(('' IN ('-1611846516')))) LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((rt0.c0)OR((rt0.c1 IN ()))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(((rt0.c3)LIKE(x'')))))OR(((rt0.c1) NOT BETWEEN (x'cb') AND (rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((rt0.c0)OR((rt0.c1 IN ()))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(((rt0.c3)LIKE(x'')))))OR(((rt0.c1) NOT BETWEEN (x'cb') AND (rt0.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (SQLITE_COMPILEOPTION_GET(('' IN ('-1611846516')))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE (NULL);
SELECT ALL * FROM rt0 WHERE (((NULL)AND(((CAST(rt0.c1 AS INTEGER))LIKE((~ (x''))))))) ORDER BY (((((rt0.c2))>=((rt0.c0))))>=((rt0.c0 IN ()))) ASC  NULLS FIRST, ((((rt0.c0)IS NOT(rt0.c0))) NOT NULL) DESC  NULLS FIRST, CASE WHEN CASE WHEN x'' THEN rt0.c3 ELSE rt0.c1 END THEN ((((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c3)))AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c0)) WHEN (((rt0.c0, rt0.c3, rt0.c1))==((0xffffffffd64ef82c, rt0.c1, rt0.c2))) THEN '681990' END  NULLS LAST, ((STRFTIME(rt0.c2, rt0.c1, rt0.c2, rt0.c1))/(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 END)) DESC  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE (NULL);
SELECT ALL * FROM rt0 WHERE (((NULL)AND(((CAST(rt0.c1 AS INTEGER))LIKE((~ (x''))))))) ORDER BY (((((rt0.c2))>=((rt0.c0))))>=((rt0.c0 IN ()))) ASC  NULLS FIRST, ((((rt0.c0)IS NOT(rt0.c0))) NOT NULL) DESC  NULLS FIRST, CASE WHEN CASE WHEN x'' THEN rt0.c3 ELSE rt0.c1 END THEN ((((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c3)))AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c0)) WHEN (((rt0.c0, rt0.c3, rt0.c1))==((0xffffffffd64ef82c, rt0.c1, rt0.c2))) THEN '681990' END  NULLS LAST, ((STRFTIME(rt0.c2, rt0.c1, rt0.c2, rt0.c1))/(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 END)) DESC  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) COLLATE BINARY) ORDER BY (((vt1.c0)%(vt1.c0)) IN (CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((x'55b7', vt1.c0)))))  NULLS LAST;
SELECT * FROM vt1 WHERE ((((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) COLLATE BINARY)AND(vt1.c0))) ORDER BY CAST((((vt1.c0))>=((vt1.c0))) AS REAL)  NULLS LAST, CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS TEXT) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) COLLATE BINARY) ORDER BY (((vt1.c0)%(vt1.c0)) IN (CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((x'55b7', vt1.c0)))))  NULLS LAST;
SELECT * FROM vt1 WHERE ((((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) COLLATE BINARY)AND(vt1.c0))) ORDER BY CAST((((vt1.c0))>=((vt1.c0))) AS REAL)  NULLS LAST, CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS TEXT) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL MAX(rt0.c0) FROM rt0 CROSS JOIN vt1 ON 'rgറ' WHERE ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)) IN (CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 END))) ORDER BY SQLITE_VERSION();
SELECT MAX(rt0.c0) FROM rt0 CROSS JOIN vt1 ON 'rgറ' WHERE ((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)) IN (CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 END))) ORDER BY SQLITE_VERSION() LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE (CAST((((rt0.c2, 0.13401104315181467, rt0.c3)) BETWEEN ((rt0.c2, rt0.c3, rt0.c1)) AND ((rt0.c2, rt0.c3, vt1.c0))) AS NUMERIC)) ORDER BY (((DATETIME(rt0.c3, rt0.c1, rt0.c0)))>=(((((rt0.c0, rt0.c0)) NOT BETWEEN ((vt1.c0, rt0.c2)) AND ((rt0.c3, rt0.c0)))))) ASC  NULLS LAST, ((rt0.c2)+(rt0.c3)) COLLATE RTRIM, x'1a75' DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CAST((((rt0.c2, 0.13401104315181467, rt0.c3)) BETWEEN ((rt0.c2, rt0.c3, rt0.c1)) AND ((rt0.c2, rt0.c3, vt1.c0))) AS NUMERIC))AND(NULL))) ORDER BY MAX(((vt1.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)), rt0.c3, ((rt0.c2) IS TRUE), vt1.c0 COLLATE RTRIM, ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c1))) BETWEEN ((~ (vt1.c0))) AND (0X2555d3bd))) ORDER BY MAX(((vt1.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)), rt0.c3, ((rt0.c2) IS TRUE), vt1.c0 COLLATE RTRIM, ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1))) LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE (CAST((((rt0.c2, 0.13401104315181467, rt0.c3)) BETWEEN ((rt0.c2, rt0.c3, rt0.c1)) AND ((rt0.c2, rt0.c3, vt1.c0))) AS NUMERIC)) ORDER BY (((DATETIME(rt0.c3, rt0.c1, rt0.c0)))>=(((((rt0.c0, rt0.c0)) NOT BETWEEN ((vt1.c0, rt0.c2)) AND ((rt0.c3, rt0.c0)))))) ASC  NULLS LAST, ((rt0.c2)+(rt0.c3)) COLLATE RTRIM, x'1a75' DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CAST((((rt0.c2, 0.13401104315181467, rt0.c3)) BETWEEN ((rt0.c2, rt0.c3, rt0.c1)) AND ((rt0.c2, rt0.c3, vt1.c0))) AS NUMERIC))AND(NULL))) ORDER BY MAX(((vt1.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)), rt0.c3, ((rt0.c2) IS TRUE), vt1.c0 COLLATE RTRIM, ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c1))) BETWEEN ((~ (vt1.c0))) AND (0X2555d3bd))) ORDER BY MAX(((vt1.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)), rt0.c3, ((rt0.c2) IS TRUE), vt1.c0 COLLATE RTRIM, ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1))) LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c3, vt1.c0, rt0.c3))==((rt0.c0, rt0.c0, vt1.c0))) IN ())) ORDER BY rt0.c1 DESC, (vt1.c0 IN ()) COLLATE NOCASE, 0.3942664222111937 ASC, ((((rt0.c2) BETWEEN (rt0.c1) AND (vt1.c0))) NOT BETWEEN (((rt0.c1) NOT BETWEEN (rt0.c0) AND (vt1.c0))) AND (((vt1.c0)=(rt0.c3)))) DESC, (((rt0.c1 IN (rt0.c1))) BETWEEN ((vt1.c0 IN (NULL))) AND ((~ (vt1.c0)))) ASC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c3, vt1.c0, rt0.c3))==((rt0.c0, rt0.c0, vt1.c0))) IN ()))AND(CAST((((rt0.c0)) BETWEEN ((vt1.c0)) AND ((rt0.c0))) AS TEXT)))) ORDER BY rt0.c1 DESC, (vt1.c0 IN ()) COLLATE NOCASE, 0.3942664222111937 ASC, ((((rt0.c2) BETWEEN (rt0.c1) AND (vt1.c0))) NOT BETWEEN (((rt0.c1) NOT BETWEEN (rt0.c0) AND (vt1.c0))) AND (((vt1.c0)=(rt0.c3)))) DESC, (((rt0.c1 IN (rt0.c1))) BETWEEN ((vt1.c0 IN (NULL))) AND ((~ (vt1.c0)))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (CASE ((vt1.c0)+(rt0.c1))  WHEN (rt0.c2 IN (x'ab', rt0.c2)) THEN ((vt1.c0)<=(rt0.c0)) WHEN rt0.c0 THEN ((((((((rt0.c3)OR(rt0.c0)))AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c1)) END) ORDER BY rt0.c1 DESC, (vt1.c0 IN ()) COLLATE NOCASE, 0.3942664222111937 ASC, ((((rt0.c2) BETWEEN (rt0.c1) AND (vt1.c0))) NOT BETWEEN (((rt0.c1) NOT BETWEEN (rt0.c0) AND (vt1.c0))) AND (((vt1.c0)=(rt0.c3)))) DESC, (((rt0.c1 IN (rt0.c1))) BETWEEN ((vt1.c0 IN (NULL))) AND ((~ (vt1.c0)))) ASC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c3, vt1.c0, rt0.c3))==((rt0.c0, rt0.c0, vt1.c0))) IN ())) ORDER BY rt0.c1 DESC, (vt1.c0 IN ()) COLLATE NOCASE, 0.3942664222111937 ASC, ((((rt0.c2) BETWEEN (rt0.c1) AND (vt1.c0))) NOT BETWEEN (((rt0.c1) NOT BETWEEN (rt0.c0) AND (vt1.c0))) AND (((vt1.c0)=(rt0.c3)))) DESC, (((rt0.c1 IN (rt0.c1))) BETWEEN ((vt1.c0 IN (NULL))) AND ((~ (vt1.c0)))) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (CAST(rt0.c0 AS TEXT) COLLATE NOCASE) ORDER BY (((((rt0.c1)AND(rt0.c3)))AND(rt0.c0)) IN (((rt0.c3)>>(rt0.c1))));
SELECT * FROM rt0 WHERE (((CAST(rt0.c0 AS TEXT) COLLATE NOCASE)AND(((((((rt0.c2) NOTNULL))OR(LIKELY(rt0.c0))))OR(((rt0.c1)>(rt0.c3))))))) ORDER BY ((x'') NOT NULL) DESC  NULLS FIRST, (((((((((((rt0.c1, rt0.c2))>((x'bd22', rt0.c1))))AND(((rt0.c1)-(rt0.c1)))))AND(((rt0.c0)+(rt0.c1)))))OR(((((((rt0.c3)OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c0)))))AND((((rt0.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))))) DESC LIMIT 0;
SELECT * FROM rt0 WHERE (CAST(rt0.c0 AS TEXT) COLLATE NOCASE) ORDER BY (((((rt0.c1)AND(rt0.c3)))AND(rt0.c0)) IN (((rt0.c3)>>(rt0.c1))));
SELECT * FROM rt0 WHERE (((CAST(rt0.c0 AS TEXT) COLLATE NOCASE)AND(((((((rt0.c2) NOTNULL))OR(LIKELY(rt0.c0))))OR(((rt0.c1)>(rt0.c3))))))) ORDER BY ((x'') NOT NULL) DESC  NULLS FIRST, (((((((((((rt0.c1, rt0.c2))>((x'bd22', rt0.c1))))AND(((rt0.c1)-(rt0.c1)))))AND(((rt0.c0)+(rt0.c1)))))OR(((((((rt0.c3)OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c0)))))AND((((rt0.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))))) DESC LIMIT 0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) NOT NULL));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) NOT NULL)) ORDER BY 0x52cb7fdd ASC  NULLS LAST, vt1.c0 COLLATE BINARY COLLATE BINARY COLLATE NOCASE DESC, (((((vt1.c0)AND(vt1.c0)))AND(0.838036884513789)) IN ()) DESC LIMIT 0x1;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((- (vt1.c0)) COLLATE NOCASE COLLATE RTRIM);
SELECT MAX(vt1.c0) FROM vt1 WHERE ((- (vt1.c0)) COLLATE NOCASE COLLATE RTRIM) ORDER BY CASE WHEN (((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))) THEN (NOT (vt1.c0)) WHEN CAST(vt1.c0 AS BLOB) THEN (~ (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN vt1.c0 END END  NULLS FIRST;
SELECT MAX(rt0.c1) FROM rt0 WHERE (CASE rt0.c1 COLLATE RTRIM  WHEN (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c0))) THEN (((rt0.c3)) BETWEEN ((x'')) AND ((rt0.c1))) END) ORDER BY TRIM((rt0.c3 IN (rt0.c2))) DESC  NULLS FIRST, (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c2)))) BETWEEN (rt0.c1 COLLATE NOCASE) AND ((((rt0.c1, rt0.c2, rt0.c3, rt0.c2)) BETWEEN ((rt0.c1, rt0.c2, rt0.c2, rt0.c2)) AND ((rt0.c1, rt0.c3, rt0.c2, rt0.c2))))) DESC  NULLS FIRST;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (CASE rt0.c1 COLLATE RTRIM  WHEN (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c0))) THEN (((rt0.c3)) BETWEEN ((x'')) AND ((rt0.c1))) END) ORDER BY TRIM((rt0.c3 IN (rt0.c2))) DESC  NULLS FIRST, (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c2)))) BETWEEN (rt0.c1 COLLATE NOCASE) AND ((((rt0.c1, rt0.c2, rt0.c3, rt0.c2)) BETWEEN ((rt0.c1, rt0.c2, rt0.c2, rt0.c2)) AND ((rt0.c1, rt0.c3, rt0.c2, rt0.c2))))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0) NOTNULL) IN ()));
SELECT COUNT(*) FROM vt1 WHERE ((((((vt1.c0) NOTNULL) IN ()))AND(((((vt1.c0) NOTNULL)) NOT BETWEEN (vt1.c0) AND (TRIM(DISTINCT vt1.c0)))))) ORDER BY ((((((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND(vt1.c0)))AND(((vt1.c0)||(vt1.c0)))))AND((NOT (vt1.c0)))))AND((((vt1.c0))>((vt1.c0)))))  NULLS LAST, (((((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0))))%(MAX(vt1.c0, '-732813397', vt1.c0, vt1.c0))) ASC, ((vt1.c0)<>(CAST(vt1.c0 AS INTEGER))) DESC, '0.47544679518541666' ASC LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS BLOB)) NOT BETWEEN ((((((('-1862126037')AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) AND (((0xa9551c4) NOT NULL)))) ORDER BY ((((((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND(vt1.c0)))AND(((vt1.c0)||(vt1.c0)))))AND((NOT (vt1.c0)))))AND((((vt1.c0))>((vt1.c0)))))  NULLS LAST, (((((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0))))%(MAX(vt1.c0, '-732813397', vt1.c0, vt1.c0))) ASC, ((vt1.c0)!=(CAST(vt1.c0 AS INTEGER))) DESC, '0.47544679518541666' ASC LIMIT 1;
SELECT COUNT(*) FROM vt1 WHERE (CASE ((vt1.c0)|(vt1.c0))  WHEN 0.7153513000693227 THEN ((vt1.c0)>>(vt1.c0)) WHEN ((vt1.c0)IS NOT(0.3225145650989357)) THEN ((vt1.c0)-(vt1.c0)) END) ORDER BY 0.4384117548541836  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((CASE ((vt1.c0)|(vt1.c0))  WHEN 0.7153513000693227 THEN ((vt1.c0)>>(vt1.c0)) WHEN ((vt1.c0)IS NOT(0.3225145650989357)) THEN ((vt1.c0)-(vt1.c0)) END)AND(CAST((('%IMibc5') NOTNULL) AS REAL)))) ORDER BY NULL  NULLS LAST LIMIT 3 INTERSECT SELECT COUNT(*) FROM vt1 WHERE (((((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND((((vt1.c0))<=((vt1.c0))))))AND(((vt1.c0)|(vt1.c0)))))OR(LOWER(vt1.c0)))) ORDER BY NULL  NULLS LAST LIMIT 0X3;
SELECT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, '0.732684964996441', vt1.c0))))IS NOT(((vt1.c0)IS(vt1.c0)))));
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, '0.732684964996441', vt1.c0))))IS NOT(((vt1.c0)IS(vt1.c0))))) LIMIT 0;
SELECT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, '0.732684964996441', vt1.c0))))IS NOT(((vt1.c0)IS(vt1.c0)))));
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, '0.732684964996441', vt1.c0))))IS NOT(((vt1.c0)IS(vt1.c0))))) LIMIT 0;
SELECT COUNT(*) FROM rt0 WHERE (((((((((((((((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c0)))AND((rt0.c0 IN (rt0.c2)))))AND(rt0.c3)))AND(((rt0.c1) IS TRUE))))OR(CAST(0.34827269538417605 AS NUMERIC))))AND(((((rt0.c1)AND(rt0.c3)))AND(rt0.c0)))))OR(NULL))) ORDER BY ((rt0.c0 COLLATE NOCASE) ISNULL), ((((rt0.c3, rt0.c3, rt0.c2, 'v0//o'))<((0.22195837723884027, x'', rt0.c2, rt0.c3))) IN ());
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((((((((((((((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c0)))AND((rt0.c0 IN (rt0.c2)))))AND(rt0.c3)))AND(((rt0.c1) IS TRUE))))OR(CAST(0.34827269538417605 AS NUMERIC))))AND(((((rt0.c1)AND(rt0.c3)))AND(rt0.c0)))))OR(NULL))) ORDER BY ((rt0.c0 COLLATE NOCASE) ISNULL), ((((rt0.c3, rt0.c3, rt0.c2, 'v0//o'))<((0.22195837723884027, x'', rt0.c2, rt0.c3))) IN ()) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((((rt0.c3) NOTNULL), rt0.c1 COLLATE BINARY))<=((CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 END, CAST(rt0.c1 AS TEXT))))) ORDER BY ((rt0.c0 COLLATE NOCASE) ISNULL), ((((rt0.c3, rt0.c3, rt0.c2, 'v0//o'))<((0.22195837723884027, x'', rt0.c2, rt0.c3))) IN ()) LIMIT 0X1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((- (vt1.c0)) IN ())) ORDER BY (((((((vt1.c0)AND(vt1.c0)))AND(NULL)))OR(vt1.c0)) IN (CHAR(vt1.c0, vt1.c0), TRIM(DISTINCT vt1.c0)))  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((- (vt1.c0)) IN ()))AND((NOT (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END))))) ORDER BY (((vt1.c0)) NOT BETWEEN (('')) AND ((TRIM(vt1.c0))))  NULLS FIRST INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (INSTR(0.2795033838247616 COLLATE BINARY, ABS(vt1.c0))) ORDER BY (((vt1.c0)) NOT BETWEEN (('')) AND ((TRIM(vt1.c0))))  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (rt0.c2);
SELECT ALL * FROM vt1, rt0 WHERE (rt0.c2) ORDER BY 'OPP5'  NULLS LAST, '] '  NULLS FIRST LIMIT 2;
SELECT * FROM vt1, rt0 WHERE (rt0.c2);
SELECT ALL * FROM vt1, rt0 WHERE (rt0.c2) ORDER BY 'OPP5'  NULLS LAST, '] '  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c2, rt0.c1)) BETWEEN (('q', CAST(rt0.c1 AS BLOB))) AND ((((rt0.c1) NOT BETWEEN ('-989346505') AND (880496111)), rt0.c3)))) ORDER BY ((CAST(rt0.c1 AS INTEGER)) BETWEEN ((('-1088513454')&(rt0.c2))) AND (((((((((rt0.c3)OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c0)))OR(rt0.c0))))  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c2, rt0.c1)) BETWEEN (('q', CAST(rt0.c1 AS BLOB))) AND ((((rt0.c1) NOT BETWEEN ('-989346505') AND (0x347b4def)), rt0.c3)))) ORDER BY (+ ((((rt0.c1))==((rt0.c2))))) LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c1 IN ('Y?N')) IN ())) ORDER BY (+ ((((rt0.c1))=((rt0.c2))))) LIMIT 0X1;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c2, rt0.c1)) BETWEEN (('q', CAST(rt0.c1 AS BLOB))) AND ((((rt0.c1) NOT BETWEEN ('-989346505') AND (880496111)), rt0.c3)))) ORDER BY ((CAST(rt0.c1 AS INTEGER)) BETWEEN ((('-1088513454')&(rt0.c2))) AND (((((((((rt0.c3)OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c0)))OR(rt0.c0))))  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c2, rt0.c1)) BETWEEN (('q', CAST(rt0.c1 AS BLOB))) AND ((((rt0.c1) NOT BETWEEN ('-989346505') AND (0x347b4def)), rt0.c3)))) ORDER BY (+ ((((rt0.c1))==((rt0.c2))))) LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c1 IN ('Y?N')) IN ())) ORDER BY (+ ((((rt0.c1))=((rt0.c2))))) LIMIT 0X1;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE ((rt0.c3 COLLATE RTRIM IN (((vt1.c0) ISNULL)))) ORDER BY (((((((vt1.c0, vt1.c0))>((rt0.c3, 0X0))))AND(CAST('-603741144' AS REAL))))AND((~ (rt0.c3)))) DESC  NULLS FIRST, ((((((((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)))OR(rt0.c2)))OR(((((((((rt0.c3)AND(rt0.c1)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c2)))))OR(((rt0.c0)OR(rt0.c3))))  NULLS LAST, ((rt0.c2) ISNULL)  NULLS FIRST;
SELECT MIN(rt0.c0) FROM vt1, rt0 WHERE ((((rt0.c3 COLLATE RTRIM IN (((vt1.c0) ISNULL))))AND(rt0.c2))) ORDER BY CASE WHEN ((rt0.c3)-(rt0.c0)) THEN ((rt0.c3) IS TRUE) ELSE (x'd1' IN (vt1.c0)) END ASC, (((((((((((((rt0.c3, vt1.c0, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c3, rt0.c1)) AND ((0.9776704536722444, rt0.c3, rt0.c1))))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND ('C*')))))OR(((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c2)))))AND(NULLIF(NULL, rt0.c1))))OR(((rt0.c2) IS FALSE))))OR(rt0.c2 COLLATE BINARY)) DESC LIMIT 0x1 INTERSECT SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (rt0.c0) ORDER BY CASE WHEN ((rt0.c3)-(rt0.c0)) THEN ((rt0.c3) IS TRUE) ELSE (x'd1' IN (vt1.c0)) END ASC, (((((((((((((rt0.c3, vt1.c0, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c3, rt0.c1)) AND ((0.9776704536722444, rt0.c3, rt0.c1))))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND ('C*')))))OR(((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c2)))))AND(NULLIF(NULL, rt0.c1))))OR(((rt0.c2) IS FALSE))))OR(rt0.c2 COLLATE BINARY)) DESC LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE ((+ (NULL)));
SELECT ALL * FROM rt0 WHERE ((+ (NULL))) LIMIT 0 INTERSECT SELECT ALL * FROM rt0 WHERE ((((((rt0.c1, rt0.c2))>((0.5526477634763385, rt0.c2))))IS NOT(((((((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c2))))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE ((+ (NULL)));
SELECT ALL * FROM rt0 WHERE ((+ (NULL))) LIMIT 0 INTERSECT SELECT ALL * FROM rt0 WHERE ((((((rt0.c1, rt0.c2))>((0.5526477634763385, rt0.c2))))IS NOT(((((((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c2))))) LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE ('-548393973');
SELECT DISTINCT * FROM vt1, rt0 WHERE ((('-548393973')AND(rt0.c0))) ORDER BY (((rt0.c0, 0xffffffff89d6559a))<((((rt0.c3) IS FALSE), ((rt0.c1)<<(rt0.c0))))), ((((0.023389545244486998)<>(rt0.c1))) BETWEEN (1299452316) AND (((rt0.c1)AND(rt0.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ('-548393973');
SELECT DISTINCT * FROM vt1, rt0 WHERE ((('-548393973')AND(rt0.c0))) ORDER BY (((rt0.c0, 0xffffffff89d6559a))<((((rt0.c3) IS FALSE), ((rt0.c1)<<(rt0.c0))))), ((((0.023389545244486998)<>(rt0.c1))) BETWEEN (1299452316) AND (((rt0.c1)AND(rt0.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((((((((IFNULL(rt0.c0, rt0.c0))OR(CAST(rt0.c2 AS BLOB))))AND(((((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)))))AND((('0.6411476110727201') ISNULL))))OR(((rt0.c0)IS NOT(rt0.c1))))) ORDER BY ((((((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 END)AND(NULL)))OR(rt0.c2)))AND(CASE rt0.c0  WHEN rt0.c2 THEN rt0.c0 END)) ASC  NULLS LAST, CASE CAST(rt0.c1 AS NUMERIC)  WHEN rt0.c1 COLLATE BINARY THEN CASE WHEN 0.2795279676558975 THEN '430427600' END ELSE ((rt0.c0)||(rt0.c3)) END;
SELECT ALL * FROM rt0 WHERE (((((((((((IFNULL(rt0.c0, rt0.c0))OR(CAST(rt0.c2 AS BLOB))))AND(((((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)))))AND((('0.6411476110727201') ISNULL))))OR(((rt0.c0)IS NOT(rt0.c1)))))AND((- (((rt0.c3)/(rt0.c3))))))) ORDER BY (((rt0.c0))<=((rt0.c3))) COLLATE RTRIM DESC, rt0.c0, '-1806375176' DESC;
SELECT ALL * FROM rt0 WHERE (((((((((IFNULL(rt0.c0, rt0.c0))OR(CAST(rt0.c2 AS BLOB))))AND(((((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)))))AND((('0.6411476110727201') ISNULL))))OR(((rt0.c0)IS NOT(rt0.c1))))) ORDER BY ((((((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 END)AND(NULL)))OR(rt0.c2)))AND(CASE rt0.c0  WHEN rt0.c2 THEN rt0.c0 END)) ASC  NULLS LAST, CASE CAST(rt0.c1 AS NUMERIC)  WHEN rt0.c1 COLLATE BINARY THEN CASE WHEN 0.2795279676558975 THEN '430427600' END ELSE ((rt0.c0)||(rt0.c3)) END;
SELECT ALL * FROM rt0 WHERE (((((((((((IFNULL(rt0.c0, rt0.c0))OR(CAST(rt0.c2 AS BLOB))))AND(((((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)))))AND((('0.6411476110727201') ISNULL))))OR(((rt0.c0)IS NOT(rt0.c1)))))AND((- (((rt0.c3)/(rt0.c3))))))) ORDER BY (((rt0.c0))<=((rt0.c3))) COLLATE RTRIM DESC, rt0.c0, '-1806375176' DESC;
SELECT MIN(rt0.c1) FROM rt0 WHERE ((+ (CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN 0.1286444337000554 END))) ORDER BY CAST(((rt0.c0) IS FALSE) AS BLOB) ASC, ((rt0.c1)|((rt0.c0 IN (-262715540))));
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE ((((+ (CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN 0.1286444337000554 END)))AND(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)) COLLATE RTRIM))) ORDER BY CAST(((rt0.c0) IS FALSE) AS BLOB) ASC, ((rt0.c1)|((rt0.c0 IN (0Xfffffffff057476c)))) LIMIT 2 INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE ((- (rt0.c1))) ORDER BY CAST(((rt0.c0) IS FALSE) AS BLOB) ASC, ((rt0.c1)|((rt0.c0 IN (-262715540)))) LIMIT 0x2;
SELECT ALL MAX(vt1.c0) FROM vt1, rt0 WHERE ((((((rt0.c0, 0.20155901645647345)) BETWEEN ((rt0.c2, vt1.c0)) AND ((vt1.c0, vt1.c0))))>=(CAST(rt0.c2 AS REAL))));
SELECT ALL MAX(vt1.c0) FROM vt1, rt0 WHERE ((((((((rt0.c0, 0.20155901645647345)) BETWEEN ((rt0.c2, vt1.c0)) AND ((vt1.c0, vt1.c0))))>=(CAST(rt0.c2 AS REAL))))AND((((rt0.c1, rt0.c1, rt0.c3)) NOT BETWEEN ((vt1.c0, ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c3)), (2087685100 IN ()))) AND ((((((((((rt0.c0)AND(vt1.c0)))OR(rt0.c2)))OR(vt1.c0)))AND(rt0.c0)), '0.08557058442453591', rt0.c3)))))) ORDER BY (rt0.c0 IN ()) COLLATE BINARY ASC INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1, rt0 WHERE ((((rt0.c1)<=(rt0.c3)) IN ())) ORDER BY (rt0.c0 IN ()) COLLATE BINARY ASC;
SELECT COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON rt0.c0 WHERE ((((CAST(rt0.c2 AS REAL), ((((rt0.c3)AND(0.6727536050894678)))OR(rt0.c3))))>(((((rt0.c2, rt0.c1, rt0.c2))==((vt1.c0, rt0.c3, vt1.c0))), rt0.c0 COLLATE RTRIM))));
SELECT COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON rt0.c0 WHERE ((((CAST(rt0.c2 AS REAL), ((((rt0.c3)AND(0.6727536050894678)))OR(rt0.c3))))>(((((rt0.c2, rt0.c1, rt0.c2))=((vt1.c0, rt0.c3, vt1.c0))), rt0.c0 COLLATE RTRIM)))) ORDER BY (CASE WHEN rt0.c1 THEN vt1.c0 END IN ()) ASC;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, NULL, vt1.c0, 0.9105308513994742, vt1.c0))) COLLATE BINARY, IFNULL(DISTINCT vt1.c0 COLLATE BINARY, CAST(vt1.c0 AS BLOB)) ASC, ((((COALESCE(vt1.c0, vt1.c0))AND(((vt1.c0) NOT NULL))))AND((+ (vt1.c0)))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0) ISNULL) COLLATE RTRIM) ORDER BY (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, NULL, vt1.c0, 0.9105308513994742, vt1.c0))) COLLATE BINARY, IFNULL(DISTINCT vt1.c0 COLLATE BINARY, CAST(vt1.c0 AS BLOB)) ASC, ((((COALESCE(vt1.c0, vt1.c0))AND(((vt1.c0) NOT NULL))))AND((+ (vt1.c0)))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c1 AS TEXT) COLLATE BINARY);
SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(rt0.c1 AS TEXT) COLLATE BINARY) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c3) LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c1 AS TEXT) COLLATE BINARY);
SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(rt0.c1 AS TEXT) COLLATE BINARY) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c3) LIMIT 0;
SELECT COUNT(*) FROM rt0 NOT INDEXED WHERE (('y' IN (ABS(DISTINCT rt0.c2))));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (('y' IN (ABS(DISTINCT rt0.c2)))) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((- (((rt0.c0)||(rt0.c2))))) LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE (CASE WHEN CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 END THEN vt1.c0 COLLATE NOCASE END) ORDER BY (((vt1.c0)>=(rt0.c0)) IN (((rt0.c3) IS FALSE), ((rt0.c2) IS TRUE))) ASC, ((((rt0.c1)*(rt0.c3))) BETWEEN (rt0.c2) AND (ABS(rt0.c1)))  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((CASE WHEN CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 END THEN vt1.c0 COLLATE NOCASE END)AND(vt1.c0))) ORDER BY (((NOT (rt0.c1))) IS FALSE) DESC  NULLS LAST LIMIT 3;
SELECT * FROM rt0, vt1 WHERE (CASE WHEN CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 END THEN vt1.c0 COLLATE NOCASE END) ORDER BY (((vt1.c0)>=(rt0.c0)) IN (((rt0.c3) IS FALSE), ((rt0.c2) IS TRUE))) ASC, ((((rt0.c1)*(rt0.c3))) BETWEEN (rt0.c2) AND (ABS(rt0.c1)))  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((CASE WHEN CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 END THEN vt1.c0 COLLATE NOCASE END)AND(vt1.c0))) ORDER BY (((NOT (rt0.c1))) IS FALSE) DESC  NULLS LAST LIMIT 3;
SELECT ALL * FROM rt0, vt1 WHERE (((((x'7f', rt0.c2))<((rt0.c0, rt0.c0))) IN (CAST(rt0.c1 AS NUMERIC))));
SELECT ALL * FROM rt0, vt1 WHERE (((((((x'7f', rt0.c2))<((rt0.c0, rt0.c0))) IN (CAST(rt0.c1 AS NUMERIC))))AND(0.13911010002434))) ORDER BY ((vt1.c0 IN ()) IN ()) ASC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE  NULLS LAST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((((((rt0.c1)OR(rt0.c3)))AND(rt0.c1)))AND(rt0.c2)))GLOB(rt0.c1))) ORDER BY ((vt1.c0 IN ()) IN ()) ASC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((x'7f', rt0.c2))<((rt0.c0, rt0.c0))) IN (CAST(rt0.c1 AS NUMERIC))));
SELECT ALL * FROM rt0, vt1 WHERE (((((((x'7f', rt0.c2))<((rt0.c0, rt0.c0))) IN (CAST(rt0.c1 AS NUMERIC))))AND(0.13911010002434))) ORDER BY ((vt1.c0 IN ()) IN ()) ASC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE  NULLS LAST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((((((rt0.c1)OR(rt0.c3)))AND(rt0.c1)))AND(rt0.c2)))GLOB(rt0.c1))) ORDER BY ((vt1.c0 IN ()) IN ()) ASC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (NULL)))AND(vt1.c0))) ORDER BY (((((((((((((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))OR((NOT (vt1.c0)))))AND(vt1.c0)))AND((vt1.c0 IN (vt1.c0)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0))>((vt1.c0, vt1.c0))))))OR(vt1.c0))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (NULL)))AND(vt1.c0))) ORDER BY (((((((((((((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))OR((NOT (vt1.c0)))))AND(vt1.c0)))AND((vt1.c0 IN (vt1.c0)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0))>((vt1.c0, vt1.c0))))))OR(vt1.c0))  NULLS FIRST INTERSECT SELECT COUNT(*) FROM vt1 WHERE ((NOT ((+ (vt1.c0))))) ORDER BY (((((((((((((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))OR((NOT (vt1.c0)))))AND(vt1.c0)))AND((vt1.c0 IN (vt1.c0)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0))>((vt1.c0, vt1.c0))))))OR(vt1.c0))  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0 WHERE (((CAST(rt0.c0 AS INTEGER)) ISNULL));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((CAST(rt0.c0 AS INTEGER)) ISNULL)) ORDER BY (((((('0.466917341151566')AND(rt0.c0)))AND((((rt0.c3, rt0.c2)) BETWEEN ((rt0.c2, rt0.c1)) AND ((rt0.c1, rt0.c0))))))AND(((rt0.c2) BETWEEN (rt0.c3) AND (958363671)))), CAST(CAST(rt0.c2 AS INTEGER) AS BLOB) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (x'0d0970') ORDER BY (((((('0.466917341151566')AND(rt0.c0)))AND((((rt0.c3, rt0.c2)) BETWEEN ((rt0.c2, rt0.c1)) AND ((rt0.c1, rt0.c0))))))AND(((rt0.c2) BETWEEN (rt0.c3) AND (958363671)))), CAST(CAST(rt0.c2 AS INTEGER) AS BLOB) DESC;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (CASE (rt0.c2 IN ())  WHEN ((rt0.c2) BETWEEN (rt0.c1) AND (vt1.c0)) THEN ((rt0.c3)GLOB(rt0.c3)) WHEN rt0.c2 THEN rt0.c2 ELSE vt1.c0 COLLATE BINARY END) ORDER BY (((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END, CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c3 THEN vt1.c0 END, CAST(rt0.c3 AS INTEGER), '-V封
'))>=((((rt0.c3)>=(rt0.c0)), INSTR(rt0.c2, vt1.c0), ((((((((rt0.c3)AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)), ((rt0.c2)<=(rt0.c0))))) DESC, TYPEOF(DISTINCT CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c0 END) ASC  NULLS LAST;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 NOT INDEXED WHERE (((CASE (rt0.c2 IN ())  WHEN ((rt0.c2) BETWEEN (rt0.c1) AND (vt1.c0)) THEN ((rt0.c3)GLOB(rt0.c3)) WHEN rt0.c2 THEN rt0.c2 ELSE vt1.c0 COLLATE BINARY END)AND(((((vt1.c0)=(rt0.c1)))%(CASE WHEN vt1.c0 THEN rt0.c1 ELSE rt0.c3 END))))) ORDER BY (((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END, CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c3 THEN vt1.c0 END, CAST(rt0.c3 AS INTEGER), '-V封
'))>=((((rt0.c3)>=(rt0.c0)), INSTR(rt0.c2, vt1.c0), ((((((((rt0.c3)AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)), ((rt0.c2)<=(rt0.c0))))) DESC, TYPEOF(DISTINCT CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c0 END) ASC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE ((- (((vt1.c0) NOT NULL)))) ORDER BY (((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END, CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c3 THEN vt1.c0 END, CAST(rt0.c3 AS INTEGER), '-V封
'))>=((((rt0.c3)>=(rt0.c0)), INSTR(rt0.c2, vt1.c0), ((((((((rt0.c3)AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)), ((rt0.c2)<=(rt0.c0))))) DESC, TYPEOF(DISTINCT CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c0 END) ASC  NULLS LAST LIMIT 0x1;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (((((rt0.c1)%(rt0.c2)))+(((rt0.c1)<>(rt0.c1))))) ORDER BY CASE ((((((rt0.c1)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c3))  WHEN UPPER(DISTINCT rt0.c3) THEN (((rt0.c2))<=((rt0.c0))) WHEN ((rt0.c3)AND(rt0.c0)) THEN ((rt0.c1)|(rt0.c1)) WHEN (((rt0.c1, '427186309')) BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c1, rt0.c0))) THEN ((((((rt0.c0)AND(rt0.c0)))OR(rt0.c3)))AND(rt0.c0)) END  NULLS FIRST;
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (((((rt0.c1)%(rt0.c2)))+(((rt0.c1)!=(rt0.c1))))) ORDER BY CASE ((((((rt0.c1)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c3))  WHEN UPPER(DISTINCT rt0.c3) THEN (((rt0.c2))<=((rt0.c0))) WHEN ((rt0.c3)AND(rt0.c0)) THEN ((rt0.c1)|(rt0.c1)) WHEN (((rt0.c1, '427186309')) BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c1, rt0.c0))) THEN ((((((rt0.c0)AND(rt0.c0)))OR(rt0.c3)))AND(rt0.c0)) END  NULLS FIRST LIMIT 3;
SELECT MAX(rt0.c2) FROM rt0 WHERE ((((+ (',#iꃞI''7|'))) NOT BETWEEN ('h<.' COLLATE BINARY) AND (0.7075565108362429))) ORDER BY ((((((((((rt0.c3)OR(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c1)))))AND(CAST(rt0.c2 AS NUMERIC))))OR((- (rt0.c0)))))AND(((rt0.c2) ISNULL))))AND((((rt0.c1, rt0.c0, NULL, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c0, rt0.c1, x'a2')) AND ((rt0.c3, rt0.c3, rt0.c0, rt0.c0))))), (((((((((((((rt0.c0 IN ()))OR((((rt0.c3, rt0.c0, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c2, rt0.c0)) AND ((rt0.c0, rt0.c3, rt0.c3, rt0.c2))))))OR(((((rt0.c2)OR(rt0.c3)))OR(rt0.c2)))))OR(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 END)))AND((((rt0.c3))<>((rt0.c2))))))AND(CAST(rt0.c3 AS NUMERIC))))AND(json_valid(-1944068797)))  NULLS FIRST, CASE ((rt0.c2)=(rt0.c0))  WHEN ((rt0.c1)AND(rt0.c3)) THEN LIKELY(rt0.c2) WHEN (~ (rt0.c2)) THEN NULL WHEN (rt0.c2 IN ()) THEN rt0.c0 ELSE QUOTE(rt0.c0) END;
SELECT DISTINCT MAX(rt0.c2) FROM rt0 WHERE ((((((+ (',#iꃞI''7|'))) NOT BETWEEN ('h<.' COLLATE BINARY) AND (0.7075565108362429)))AND((((((((((((+ (rt0.c2)))AND(SQLITE_SOURCE_ID())))OR(((rt0.c2)/(NULL)))))OR(rt0.c3)))OR(rt0.c3 COLLATE BINARY)))AND(((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0))))))) ORDER BY ((((((((((rt0.c3)OR(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c1)))))AND(CAST(rt0.c2 AS NUMERIC))))OR((- (rt0.c0)))))AND(((rt0.c2) ISNULL))))AND((((rt0.c1, rt0.c0, NULL, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c0, rt0.c1, x'a2')) AND ((rt0.c3, rt0.c3, rt0.c0, rt0.c0))))), (((((((((((((rt0.c0 IN ()))OR((((rt0.c3, rt0.c0, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c2, rt0.c0)) AND ((rt0.c0, rt0.c3, rt0.c3, rt0.c2))))))OR(((((rt0.c2)OR(rt0.c3)))OR(rt0.c2)))))OR(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 END)))AND((((rt0.c3))<>((rt0.c2))))))AND(CAST(rt0.c3 AS NUMERIC))))AND(json_valid(0xffffffff8c1fdd43)))  NULLS FIRST, CASE ((rt0.c2)=(rt0.c0))  WHEN ((rt0.c1)AND(rt0.c3)) THEN LIKELY(rt0.c2) WHEN (~ (rt0.c2)) THEN NULL WHEN (rt0.c2 IN ()) THEN rt0.c0 ELSE QUOTE(rt0.c0) END;
SELECT ALL * FROM rt0 WHERE ((9.82536061E8 IN (((((((rt0.c3)AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c1)), ((rt0.c3) NOTNULL))));
SELECT ALL * FROM rt0 WHERE ((((9.82536061E8 IN (((((((rt0.c3)AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c1)))))AND(CASE (((rt0.c2, rt0.c1, rt0.c1, rt0.c3, rt0.c0)) NOT BETWEEN (('-1688611678', rt0.c3, rt0.c1, rt0.c2, NULL)) AND ((rt0.c2, rt0.c1, rt0.c3, rt0.c2, rt0.c2)))  WHEN ((rt0.c2) NOT NULL) THEN ((rt0.c2)<(rt0.c1)) WHEN CAST(rt0.c3 AS REAL) THEN (rt0.c0 IN ('7s')) WHEN ((rt0.c0) NOT BETWEEN (rt0.c0) AND (NULL)) THEN rt0.c3 END))) INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c2, rt0.c3))>((rt0.c0, 0.04687595847608095))) IN ((rt0.c3 IN ()))));
SELECT ALL * FROM rt0 WHERE ((9.82536061E8 IN (((((((rt0.c3)AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c1)), ((rt0.c3) NOTNULL))));
SELECT ALL * FROM rt0 WHERE ((((9.82536061E8 IN (((((((rt0.c3)AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c1)))))AND(CASE (((rt0.c2, rt0.c1, rt0.c1, rt0.c3, rt0.c0)) NOT BETWEEN (('-1688611678', rt0.c3, rt0.c1, rt0.c2, NULL)) AND ((rt0.c2, rt0.c1, rt0.c3, rt0.c2, rt0.c2)))  WHEN ((rt0.c2) NOT NULL) THEN ((rt0.c2)<(rt0.c1)) WHEN CAST(rt0.c3 AS REAL) THEN (rt0.c0 IN ('7s')) WHEN ((rt0.c0) NOT BETWEEN (rt0.c0) AND (NULL)) THEN rt0.c3 END))) INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c2, rt0.c3))>((rt0.c0, 0.04687595847608095))) IN ((rt0.c3 IN ()))));
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE ((((NULL IN (vt1.c0, rt0.c2)))>(((230946623)-(rt0.c2))))) ORDER BY NULLIF(DISTINCT (((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))), vt1.c0), (NOT ((rt0.c1 IN (rt0.c0)))) DESC, ((((rt0.c2)&(rt0.c2)))OR((vt1.c0 IN (265752894))))  NULLS LAST;
SELECT DISTINCT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((NULL IN (vt1.c0, rt0.c2)))>(((0Xdc3f73f)-(rt0.c2))))) ORDER BY NULLIF(DISTINCT (((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))), vt1.c0), (NOT ((rt0.c1 IN (rt0.c0)))) DESC, ((((rt0.c2)&(rt0.c2)))OR((vt1.c0 IN (265752894))))  NULLS LAST LIMIT 0x2;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((rt0.c3, vt1.c0)) BETWEEN (((rt0.c0 IN (rt0.c2)), CAST(rt0.c2 AS INTEGER))) AND ((((rt0.c0)AND('-182911986')), (vt1.c0 IN ())))) WHERE (((TYPEOF(vt1.c0)) BETWEEN (((((((rt0.c1)AND(rt0.c2)))OR(rt0.c2)))OR(0.29080941988868614))) AND (CAST(rt0.c3 AS NUMERIC))));
SELECT * FROM rt0 NOT INDEXED LEFT OUTER JOIN vt1 ON (((rt0.c3, vt1.c0)) BETWEEN (((rt0.c0 IN (rt0.c2)), CAST(rt0.c2 AS INTEGER))) AND ((((rt0.c0)AND('-182911986')), (vt1.c0 IN ())))) WHERE (((TYPEOF(vt1.c0)) BETWEEN (((((((rt0.c1)AND(rt0.c2)))OR(rt0.c2)))OR(0.29080941988868614))) AND (CAST(rt0.c3 AS NUMERIC)))) ORDER BY CAST((((rt0.c1, rt0.c2)) BETWEEN (('815593498', rt0.c3)) AND ((rt0.c3, x'd4526e'))) AS INTEGER);
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((rt0.c3, vt1.c0)) BETWEEN (((rt0.c0 IN (rt0.c2)), CAST(rt0.c2 AS INTEGER))) AND ((((rt0.c0)AND('-182911986')), (vt1.c0 IN ())))) WHERE (((TYPEOF(vt1.c0)) BETWEEN (((((((rt0.c1)AND(rt0.c2)))OR(rt0.c2)))OR(0.29080941988868614))) AND (CAST(rt0.c3 AS NUMERIC))));
SELECT * FROM rt0 NOT INDEXED LEFT OUTER JOIN vt1 ON (((rt0.c3, vt1.c0)) BETWEEN (((rt0.c0 IN (rt0.c2)), CAST(rt0.c2 AS INTEGER))) AND ((((rt0.c0)AND('-182911986')), (vt1.c0 IN ())))) WHERE (((TYPEOF(vt1.c0)) BETWEEN (((((((rt0.c1)AND(rt0.c2)))OR(rt0.c2)))OR(0.29080941988868614))) AND (CAST(rt0.c3 AS NUMERIC)))) ORDER BY CAST((((rt0.c1, rt0.c2)) BETWEEN (('815593498', rt0.c3)) AND ((rt0.c3, x'd4526e'))) AS INTEGER);
SELECT * FROM rt0, vt1 WHERE (((rt0.c1)<<(x'd9')) COLLATE RTRIM COLLATE NOCASE) ORDER BY ((rt0.c3)-(vt1.c0 COLLATE BINARY)) DESC  NULLS LAST, (TRIM(DISTINCT rt0.c3) IN (0Xffffffff8283f103, ((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c0))))  NULLS LAST, json_array_length((((rt0.c2, '1e500'))>(('455756160', rt0.c3))), ((((vt1.c0)AND(vt1.c0)))AND(rt0.c0)))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c1)<<(x'd9')) COLLATE RTRIM COLLATE NOCASE)AND((((RTRIM(x'0d8b170a'), ((rt0.c3)AND(vt1.c0))))!=(((rt0.c3 IN (vt1.c0)), (vt1.c0 IN ()))))))) ORDER BY (- (LTRIM(rt0.c2, rt0.c0))) DESC, CAST(rt0.c0 AS NUMERIC) COLLATE RTRIM COLLATE NOCASE ASC LIMIT 1 INTERSECT SELECT * FROM rt0, vt1 WHERE (((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c1 END)IS NOT(CAST(rt0.c3 AS BLOB)))) ORDER BY (- (LTRIM(rt0.c2, rt0.c0))) DESC, CAST(rt0.c0 AS NUMERIC) COLLATE RTRIM COLLATE NOCASE ASC LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE (((rt0.c1)<<(x'd9')) COLLATE RTRIM COLLATE NOCASE) ORDER BY ((rt0.c3)-(vt1.c0 COLLATE BINARY)) DESC  NULLS LAST, (TRIM(DISTINCT rt0.c3) IN (0Xffffffff8283f103, ((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c0))))  NULLS LAST, json_array_length((((rt0.c2, '1e500'))>(('455756160', rt0.c3))), ((((vt1.c0)AND(vt1.c0)))AND(rt0.c0)))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c1)<<(x'd9')) COLLATE RTRIM COLLATE NOCASE)AND((((RTRIM(x'0d8b170a'), ((rt0.c3)AND(vt1.c0))))!=(((rt0.c3 IN (vt1.c0)), (vt1.c0 IN ()))))))) ORDER BY (- (LTRIM(rt0.c2, rt0.c0))) DESC, CAST(rt0.c0 AS NUMERIC) COLLATE RTRIM COLLATE NOCASE ASC LIMIT 1 INTERSECT SELECT * FROM rt0, vt1 WHERE (((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c1 END)IS NOT(CAST(rt0.c3 AS BLOB)))) ORDER BY (- (LTRIM(rt0.c2, rt0.c0))) DESC, CAST(rt0.c0 AS NUMERIC) COLLATE RTRIM COLLATE NOCASE ASC LIMIT 0x1;
SELECT COUNT(*) FROM vt1 WHERE ((- (vt1.c0 COLLATE RTRIM))) ORDER BY (NOT (((vt1.c0)>(vt1.c0)))) DESC  NULLS FIRST, CAST((vt1.c0 IN ()) AS REAL) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE ((- (vt1.c0 COLLATE RTRIM))) ORDER BY (NOT (((vt1.c0)>(vt1.c0)))) DESC  NULLS FIRST, CAST((vt1.c0 IN ()) AS REAL) DESC;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (((vt1.c0)AND(((vt1.c0)&(vt1.c0)) COLLATE BINARY)));
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (((vt1.c0)AND(((vt1.c0)&(vt1.c0)) COLLATE BINARY)));
SELECT ALL * FROM vt1 WHERE ((NOT (vt1.c0)) COLLATE BINARY);
SELECT ALL * FROM vt1 WHERE ((((NOT (vt1.c0)) COLLATE BINARY)AND(vt1.c0))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOTNULL) ASC LIMIT 0x3 INTERSECT SELECT * FROM vt1 NOT INDEXED WHERE ((((((((((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))AND('613419071')))AND(HEX(vt1.c0))))OR((vt1.c0 IN (vt1.c0, vt1.c0)))))OR(CAST(vt1.c0 AS TEXT)))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOTNULL) ASC LIMIT 3;
SELECT ALL * FROM vt1 WHERE ((NOT (vt1.c0)) COLLATE BINARY);
SELECT ALL * FROM vt1 WHERE ((((NOT (vt1.c0)) COLLATE BINARY)AND(vt1.c0))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOTNULL) ASC LIMIT 0x3 INTERSECT SELECT * FROM vt1 NOT INDEXED WHERE ((((((((((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))AND('613419071')))AND(HEX(vt1.c0))))OR((vt1.c0 IN (vt1.c0, vt1.c0)))))OR(CAST(vt1.c0 AS TEXT)))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOTNULL) ASC LIMIT 3;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (NULL) ORDER BY vt1.c0 ASC;
SELECT MAX(vt1.c0) FROM vt1 WHERE (NULL) ORDER BY (((((NULL)<(vt1.c0))))>((((vt1.c0)<(vt1.c0))))) DESC  NULLS FIRST, ((0.47544679518541666) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM LIMIT 1;
SELECT ALL COUNT(*) FROM rt0 WHERE ((((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c2)) IN ()));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c2)) IN ()));
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (CAST('<SK' AS BLOB)) ORDER BY ((((((rt0.c1)AND(rt0.c3)))OR(rt0.c0))) BETWEEN (((rt0.c3)LIKE(rt0.c1))) AND (CASE WHEN rt0.c3 THEN rt0.c0 ELSE NULL END)), 0.48567108421658245  NULLS LAST;
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((CAST('<SK' AS BLOB))AND(((rt0.c1) IS FALSE) COLLATE BINARY))) ORDER BY ((((((rt0.c1)AND(rt0.c3)))OR(rt0.c0))) BETWEEN (((rt0.c3)LIKE(rt0.c1))) AND (CASE WHEN rt0.c3 THEN rt0.c0 ELSE NULL END)), 0.48567108421658245  NULLS LAST LIMIT 4 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE ((((CAST(rt0.c0 AS INTEGER), ((rt0.c0) IS TRUE)))=((CAST(rt0.c3 AS INTEGER), rt0.c2)))) ORDER BY ((((((rt0.c1)AND(rt0.c3)))OR(rt0.c0))) BETWEEN (((rt0.c3)LIKE(rt0.c1))) AND (CASE WHEN rt0.c3 THEN rt0.c0 ELSE NULL END)), 0.48567108421658245  NULLS LAST LIMIT 0X4;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c2 COLLATE BINARY) IS TRUE)) ORDER BY (~ (((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c0))))  NULLS FIRST, (+ (json_object(-874560101, rt0.c1))) ASC  NULLS FIRST;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c2 COLLATE BINARY) IS TRUE)) ORDER BY ((NULLIF(vt1.c0, rt0.c2)) BETWEEN (SQLITE_COMPILEOPTION_GET(vt1.c0)) AND (CAST(rt0.c1 AS NUMERIC))) ASC  NULLS FIRST, ((((rt0.c3, NULL)) BETWEEN ((rt0.c0, rt0.c1)) AND ((rt0.c1, vt1.c0))) IN ((~ (rt0.c2)), ((((rt0.c3)OR(rt0.c2)))OR(rt0.c1)))) ASC INTERSECT SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (x'51' COLLATE NOCASE) ORDER BY ((NULLIF(vt1.c0, rt0.c2)) BETWEEN (SQLITE_COMPILEOPTION_GET(vt1.c0)) AND (CAST(rt0.c1 AS NUMERIC))) ASC  NULLS FIRST, ((((rt0.c3, NULL)) BETWEEN ((rt0.c0, rt0.c1)) AND ((rt0.c1, vt1.c0))) IN ((~ (rt0.c2)), ((((rt0.c3)OR(rt0.c2)))OR(rt0.c1)))) ASC;
SELECT * FROM rt0 WHERE ((((((rt0.c0) IS FALSE), HEX(rt0.c2)))>=((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END, ((rt0.c1) BETWEEN ('27434235') AND (rt0.c3))))));
SELECT DISTINCT * FROM rt0 WHERE ((((((((rt0.c0) IS FALSE), HEX(rt0.c2)))>=((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END, ((rt0.c1) BETWEEN ('27434235') AND (rt0.c3))))))AND(CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 WHEN '-499619510' THEN rt0.c3 ELSE rt0.c2 END COLLATE BINARY))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((x'c8e7') ISNULL)) LIMIT 0;
SELECT * FROM rt0 WHERE ((((((rt0.c0) IS FALSE), HEX(rt0.c2)))>=((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END, ((rt0.c1) BETWEEN ('27434235') AND (rt0.c3))))));
SELECT DISTINCT * FROM rt0 WHERE ((((((((rt0.c0) IS FALSE), HEX(rt0.c2)))>=((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END, ((rt0.c1) BETWEEN ('27434235') AND (rt0.c3))))))AND(CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 WHEN '-499619510' THEN rt0.c3 ELSE rt0.c2 END COLLATE BINARY))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((x'c8e7') ISNULL)) LIMIT 0;
SELECT * FROM vt1 WHERE (CASE vt1.c0  WHEN NULL THEN ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) WHEN LAST_INSERT_ROWID() THEN ((0.15266885040834854)IS(vt1.c0)) ELSE ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) END) ORDER BY (((NOT (0Xffffffff89d6559a)))OR(((('', vt1.c0))==((0.9607073496388701, vt1.c0))))) ASC  NULLS LAST, ((-1440571497) NOT BETWEEN (vt1.c0) AND (0.9197680110989576))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((CASE vt1.c0  WHEN NULL THEN ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) WHEN LAST_INSERT_ROWID() THEN ((0.15266885040834854)IS(vt1.c0)) ELSE ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) END)AND(((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))-(((vt1.c0)<<(vt1.c0))))))) ORDER BY CAST(vt1.c0 AS BLOB) COLLATE RTRIM DESC  NULLS LAST, ((((vt1.c0)<=(vt1.c0))) NOT BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(x'8398bc'))))  NULLS LAST;
SELECT * FROM vt1 WHERE (CASE vt1.c0  WHEN NULL THEN ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) WHEN LAST_INSERT_ROWID() THEN ((0.15266885040834854)IS(vt1.c0)) ELSE ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) END) ORDER BY (((NOT (0Xffffffff89d6559a)))OR(((('', vt1.c0))==((0.9607073496388701, vt1.c0))))) ASC  NULLS LAST, ((-1440571497) NOT BETWEEN (vt1.c0) AND (0.9197680110989576))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((CASE vt1.c0  WHEN NULL THEN ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) WHEN LAST_INSERT_ROWID() THEN ((0.15266885040834854)IS(vt1.c0)) ELSE ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) END)AND(((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))-(((vt1.c0)<<(vt1.c0))))))) ORDER BY CAST(vt1.c0 AS BLOB) COLLATE RTRIM DESC  NULLS LAST, ((((vt1.c0)<=(vt1.c0))) NOT BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(x'8398bc'))))  NULLS LAST;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (~ ((('mhhi^k') IS TRUE))) WHERE ((((((((((((((vt1.c0, vt1.c0, rt0.c2, -1.82911986E8)) NOT BETWEEN ((rt0.c3, rt0.c1, vt1.c0, rt0.c0)) AND ((rt0.c3, rt0.c0, rt0.c1, rt0.c1))))OR(LIKELY(rt0.c3))))AND(LENGTH(rt0.c2))))OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 END)))OR(UPPER(NULL))))OR((- (rt0.c0)))));
SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON (~ ((('mhhi^k') IS TRUE))) WHERE ((((((((((((((vt1.c0, vt1.c0, rt0.c2, -1.82911986E8)) NOT BETWEEN ((rt0.c3, rt0.c1, vt1.c0, rt0.c0)) AND ((rt0.c3, rt0.c0, rt0.c1, rt0.c1))))OR(LIKELY(rt0.c3))))AND(LENGTH(rt0.c2))))OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 END)))OR(UPPER(NULL))))OR((- (rt0.c0))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON (~ ((('mhhi^k') IS TRUE))) WHERE (((((((((LENGTH(rt0.c2))AND(LIKELY(DISTINCT rt0.c1))))OR(((vt1.c0)-(vt1.c0)))))AND((NOT (rt0.c3)))))AND(((vt1.c0) NOT BETWEEN (rt0.c0) AND (0.1735866659367964))))) LIMIT 0x0;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (~ ((('mhhi^k') IS TRUE))) WHERE ((((((((((((((vt1.c0, vt1.c0, rt0.c2, -1.82911986E8)) NOT BETWEEN ((rt0.c3, rt0.c1, vt1.c0, rt0.c0)) AND ((rt0.c3, rt0.c0, rt0.c1, rt0.c1))))OR(LIKELY(rt0.c3))))AND(LENGTH(rt0.c2))))OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 END)))OR(UPPER(NULL))))OR((- (rt0.c0)))));
SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON (~ ((('mhhi^k') IS TRUE))) WHERE ((((((((((((((vt1.c0, vt1.c0, rt0.c2, -1.82911986E8)) NOT BETWEEN ((rt0.c3, rt0.c1, vt1.c0, rt0.c0)) AND ((rt0.c3, rt0.c0, rt0.c1, rt0.c1))))OR(LIKELY(rt0.c3))))AND(LENGTH(rt0.c2))))OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 END)))OR(UPPER(NULL))))OR((- (rt0.c0))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON (~ ((('mhhi^k') IS TRUE))) WHERE (((((((((LENGTH(rt0.c2))AND(LIKELY(DISTINCT rt0.c1))))OR(((vt1.c0)-(vt1.c0)))))AND((NOT (rt0.c3)))))AND(((vt1.c0) NOT BETWEEN (rt0.c0) AND (0.1735866659367964))))) LIMIT 0x0;
SELECT ALL COUNT(*) FROM rt0 CROSS JOIN vt1 ON ((CASE WHEN rt0.c3 THEN rt0.c3 END) IS TRUE) WHERE (((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2)))<<(vt1.c0))) ORDER BY 775702361 COLLATE NOCASE ASC  NULLS FIRST;
SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON ((CASE WHEN rt0.c3 THEN rt0.c3 END) IS TRUE) WHERE (((((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2)))<<(vt1.c0)))AND('Ⅵ'))) ORDER BY '-672301627' DESC, ((CAST(rt0.c0 AS TEXT)) NOTNULL) ASC  NULLS LAST LIMIT 0X4 INTERSECT SELECT ALL COUNT(*) FROM rt0 CROSS JOIN vt1 ON ((CASE WHEN rt0.c3 THEN rt0.c3 END) IS TRUE) WHERE ((+ (((rt0.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))))) ORDER BY '-672301627' DESC, ((CAST(rt0.c0 AS TEXT)) NOTNULL) ASC  NULLS LAST LIMIT 0x4;
SELECT * FROM rt0 WHERE ((((x'5a95'))!=((((rt0.c2)+(rt0.c0)))))) ORDER BY CAST(((rt0.c2)|(rt0.c0)) AS TEXT) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((((((x'5a95'))<((((rt0.c2)+(rt0.c0))))))AND(((NULL IN (rt0.c2)) IN ())))) ORDER BY CAST(((rt0.c2)|(rt0.c0)) AS TEXT) DESC  NULLS FIRST LIMIT 0X2;
SELECT * FROM rt0 WHERE ((((x'5a95'))!=((((rt0.c2)+(rt0.c0)))))) ORDER BY CAST(((rt0.c2)|(rt0.c0)) AS TEXT) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((((((x'5a95'))<((((rt0.c2)+(rt0.c0))))))AND(((NULL IN (rt0.c2)) IN ())))) ORDER BY CAST(((rt0.c2)|(rt0.c0)) AS TEXT) DESC  NULLS FIRST LIMIT 0X2;
SELECT MAX(rt0.c3) FROM rt0 LEFT OUTER JOIN vt1 ON CAST(vt1.c0 AS BLOB) COLLATE RTRIM WHERE ((~ (CAST(rt0.c2 AS TEXT))));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON CAST(vt1.c0 AS BLOB) COLLATE RTRIM WHERE ((~ (CAST(rt0.c2 AS TEXT)))) ORDER BY ((((((rt0.c3)OR(rt0.c0)))AND(vt1.c0)))LIKE(SQLITE_COMPILEOPTION_USED(rt0.c0)))  NULLS FIRST, ((((((((((CAST(vt1.c0 AS BLOB))AND(((((((((rt0.c0)AND(rt0.c2)))OR(rt0.c1)))AND(NULL)))AND(rt0.c0)))))AND((- (rt0.c3)))))AND((((rt0.c3)) NOT BETWEEN ((rt0.c3)) AND ((vt1.c0))))))AND('55232972')))OR('XFi[9๳8')), (((rt0.c1)) BETWEEN ((CAST(rt0.c0 AS TEXT))) AND ((((vt1.c0)GLOB(rt0.c1))))) DESC  NULLS FIRST LIMIT 1;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (((((((((((((rt0.c3)OR(((rt0.c0)>=(rt0.c0)))))OR(((rt0.c2)>(vt1.c0)))))OR(((rt0.c2)/(rt0.c3)))))OR(CASE vt1.c0  WHEN rt0.c0 THEN rt0.c1 END)))AND(CAST(vt1.c0 AS BLOB))))AND(((((rt0.c1)AND(rt0.c1)))OR(259252199))))) ORDER BY ((((rt0.c3) NOT NULL))OR('1490123922')) DESC, CAST((+ (rt0.c2)) AS INTEGER);
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (((((((((((((rt0.c3)OR(((rt0.c0)=(rt0.c0)))))OR(((rt0.c2)>(vt1.c0)))))OR(((rt0.c2)/(rt0.c3)))))OR(CASE vt1.c0  WHEN rt0.c0 THEN rt0.c1 END)))AND(CAST(vt1.c0 AS BLOB))))AND(((((rt0.c1)AND(rt0.c1)))OR(0xf73dfe7))))) ORDER BY CASE rt0.c2  WHEN vt1.c0 THEN rt0.c2 END COLLATE BINARY ASC  NULLS LAST, (((rt0.c3)) BETWEEN ((((rt0.c0) BETWEEN (rt0.c3) AND ('82635964')))) AND ((CAST(rt0.c0 AS BLOB))))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c2)))OR((rt0.c3 IN (NULL, rt0.c1)))))AND(''))) ORDER BY ((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c0))) NOT NULL) DESC, rt0.c2;
SELECT ALL * FROM rt0, vt1 WHERE (((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c2)))OR((rt0.c3 IN (NULL, rt0.c1)))))AND('')))AND((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c2)) IN (rt0.c0))))) ORDER BY ((CASE vt1.c0  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 END)<=(json_remove(rt0.c3, rt0.c0, rt0.c3))), NULL ASC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE (((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c2)))OR((rt0.c3 IN (NULL, rt0.c1)))))AND(''))) ORDER BY ((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c0))) NOT NULL) DESC, rt0.c2;
SELECT ALL * FROM rt0, vt1 WHERE (((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c2)))OR((rt0.c3 IN (NULL, rt0.c1)))))AND('')))AND((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c2)) IN (rt0.c0))))) ORDER BY ((CASE vt1.c0  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 END)<=(json_remove(rt0.c3, rt0.c0, rt0.c3))), NULL ASC  NULLS FIRST LIMIT 1;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (rt0.c3) ORDER BY NULL;
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((rt0.c3)AND(((((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c3)))OR(rt0.c2))) BETWEEN (CASE rt0.c2  WHEN rt0.c2 THEN rt0.c0 END) AND (((rt0.c3)/(rt0.c3))))))) ORDER BY (((rt0.c1)) BETWEEN ((((rt0.c1)>=(rt0.c1)))) AND ((((rt0.c2)IS(rt0.c3))))) DESC  NULLS LAST, (((rt0.c3 IN (rt0.c3, rt0.c1))) IS FALSE) DESC INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE ((~ (TRIM(DISTINCT rt0.c0)))) ORDER BY (((rt0.c1)) BETWEEN ((((rt0.c1)>=(rt0.c1)))) AND ((((rt0.c2)IS(rt0.c3))))) DESC  NULLS LAST, (((rt0.c3 IN (rt0.c3, rt0.c1))) IS FALSE) DESC;
SELECT MIN(rt0.c3) FROM rt0 WHERE ((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)) IN ())) ORDER BY CASE ((rt0.c1) BETWEEN ('-1834146775') AND (rt0.c1))  WHEN ((rt0.c3)|(rt0.c1)) THEN (rt0.c2 IN ('-625867527', rt0.c0)) WHEN ((rt0.c3) IS TRUE) THEN (- (rt0.c3)) END ASC  NULLS LAST, 0X34ac9cc;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)) IN ()))AND((((rt0.c1, rt0.c1)) NOT BETWEEN (((~ (rt0.c3)), CAST(rt0.c2 AS TEXT))) AND ((json_extract(rt0.c1, rt0.c2), ((rt0.c3) NOTNULL))))))) ORDER BY CASE ((rt0.c1) BETWEEN ('-1834146775') AND (rt0.c1))  WHEN ((rt0.c3)|(rt0.c1)) THEN (rt0.c2 IN ('-625867527', rt0.c0)) WHEN ((rt0.c3) IS TRUE) THEN (- (rt0.c3)) END ASC  NULLS LAST, 0X34ac9cc LIMIT 0X1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (COALESCE(((vt1.c0) IS FALSE), UNLIKELY(DISTINCT vt1.c0), (vt1.c0 IN (vt1.c0)), ((vt1.c0)IS(vt1.c0))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((COALESCE(((vt1.c0) IS FALSE), UNLIKELY(DISTINCT vt1.c0), (vt1.c0 IN (vt1.c0)), ((vt1.c0)IS(vt1.c0))))AND(((vt1.c0)<>((((NULL))<>((vt1.c0)))))))) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))AND(LIKELIHOOD(vt1.c0, vt1.c0))))AND(4.64024925E8)), (((NOT (vt1.c0))) ISNULL) DESC;
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) ORDER BY (((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))AND(LIKELIHOOD(vt1.c0, vt1.c0))))AND(4.64024925E8)), (((NOT (vt1.c0))) ISNULL) DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)>>(vt1.c0))) NOTNULL)) ORDER BY (((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))AND(LIKELIHOOD(vt1.c0, vt1.c0))))AND(4.64024925E8)), (((NOT (vt1.c0))) ISNULL) DESC;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (((((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))AND(LIKELIHOOD(vt1.c0, vt1.c0))))AND(4.64024925E8)), (((NOT (vt1.c0))) ISNULL) DESC;
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE ((((((rt0.c2, rt0.c0, vt1.c0))>((rt0.c0, rt0.c3, rt0.c0)))) ISNULL));
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE ((((((((rt0.c2, rt0.c0, vt1.c0))>((rt0.c0, rt0.c3, rt0.c0)))) ISNULL))AND(CAST(((rt0.c1)*(vt1.c0)) AS INTEGER)))) ORDER BY (((rt0.c3)) BETWEEN (((+ (rt0.c3)))) AND ((((rt0.c0)IS NOT(rt0.c3))))) LIMIT 1 INTERSECT SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (((((rt0.c2)>=(rt0.c0)))<(HEX(rt0.c3)))) ORDER BY (((rt0.c3)) BETWEEN (((+ (rt0.c3)))) AND ((((rt0.c0)IS NOT(rt0.c3))))) LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE ('W!Sm!?ᄾ') ORDER BY ((rt0.c2 COLLATE BINARY) NOTNULL);
SELECT DISTINCT * FROM rt0, vt1 WHERE ('W!Sm!?ᄾ') ORDER BY ((((rt0.c0)<=(rt0.c2))) BETWEEN (CASE WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END) AND ((((rt0.c1, rt0.c2)) BETWEEN ((rt0.c1, x'30b13a')) AND ((rt0.c2, vt1.c0)))))  NULLS FIRST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ('W!Sm!?ᄾ') ORDER BY ((rt0.c2 COLLATE BINARY) NOTNULL);
SELECT DISTINCT * FROM rt0, vt1 WHERE ('W!Sm!?ᄾ') ORDER BY ((((rt0.c0)<=(rt0.c2))) BETWEEN (CASE WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END) AND ((((rt0.c1, rt0.c2)) BETWEEN ((rt0.c1, x'30b13a')) AND ((rt0.c2, vt1.c0)))))  NULLS FIRST LIMIT 0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0 LIMIT 3;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0 LIMIT 3;
SELECT ALL COUNT(*) FROM rt0 WHERE ((~ (((((((rt0.c0)AND(rt0.c2)))OR(rt0.c3)))OR(rt0.c1)))));
SELECT DISTINCT COUNT(*) FROM rt0 NOT INDEXED WHERE ((((~ (((((((rt0.c0)AND(rt0.c2)))OR(rt0.c3)))OR(rt0.c1)))))AND(x'e220'))) ORDER BY json_quote((rt0.c1 IN (rt0.c0)))  NULLS FIRST, (((0.9155168706675, rt0.c2, rt0.c1)) NOT BETWEEN ((((rt0.c0)==(rt0.c2)), CASE rt0.c0  WHEN NULL THEN rt0.c1 ELSE rt0.c2 END, NULLIF(DISTINCT rt0.c3, rt0.c1))) AND ((((rt0.c1) NOTNULL), (((rt0.c1, rt0.c3, rt0.c2)) BETWEEN ((rt0.c3, rt0.c0, rt0.c1)) AND ((rt0.c2, rt0.c0, rt0.c2))), ((((((((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c2)))OR(rt0.c0)))AND(rt0.c0)))AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c2))))) LIMIT 0;
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE (rt0.c3) ORDER BY vt1.c0 ASC, ROUND(NULL, rt0.c0) ASC, rt0.c1 DESC;
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE (((rt0.c3)AND(((((rt0.c0)*(rt0.c3))) BETWEEN (((rt0.c3) NOT BETWEEN (NULL) AND (vt1.c0))) AND (((rt0.c2) NOTNULL)))))) ORDER BY CASE WHEN ((0.7936534359856536) NOT BETWEEN (rt0.c2) AND (rt0.c2)) THEN (~ (rt0.c3)) WHEN 0.4642021810344702 THEN (((rt0.c2))=((vt1.c0))) END  NULLS LAST, JULIANDAY(((rt0.c2)=(vt1.c0)), CAST(rt0.c0 AS TEXT), (rt0.c0 IN ())) DESC  NULLS FIRST, rt0.c1 DESC;
SELECT * FROM vt1 WHERE (CAST((+ (x'fc')) AS INTEGER));
SELECT * FROM vt1 WHERE (((CAST((+ (x'fc')) AS INTEGER))AND(CAST(vt1.c0 COLLATE NOCASE AS BLOB)))) LIMIT 0X3 INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c0)IS(vt1.c0))) BETWEEN (0.35370524403905157) AND (CAST(NULL AS NUMERIC)))) LIMIT 0X3;
SELECT * FROM vt1 WHERE (CAST((+ (x'fc')) AS INTEGER));
SELECT * FROM vt1 WHERE (((CAST((+ (x'fc')) AS INTEGER))AND(CAST(vt1.c0 COLLATE NOCASE AS BLOB)))) LIMIT 0X3 INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c0)IS(vt1.c0))) BETWEEN (0.35370524403905157) AND (CAST(NULL AS NUMERIC)))) LIMIT 0X3;
SELECT ALL * FROM rt0, vt1 WHERE ((((1.339938603E9 IN (rt0.c3)))>=((NOT (rt0.c1))))) ORDER BY CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 WHEN '54_' THEN rt0.c3 ELSE rt0.c0 END COLLATE RTRIM ASC  NULLS LAST, CHANGES()  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE ((((1.339938603E9 IN (rt0.c3)))>=((NOT (rt0.c1))))) ORDER BY CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 WHEN '54_' THEN rt0.c3 ELSE rt0.c0 END COLLATE RTRIM ASC  NULLS LAST, CHANGES()  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((x'')AND(vt1.c0))) NOT BETWEEN (json_type(rt0.c1)) AND (CAST(rt0.c1 AS BLOB)))) ORDER BY CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 WHEN '54_' THEN rt0.c3 ELSE rt0.c0 END COLLATE RTRIM ASC  NULLS LAST, CHANGES()  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM rt0, vt1 WHERE ((((1.339938603E9 IN (rt0.c3)))>=((NOT (rt0.c1))))) ORDER BY CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 WHEN '54_' THEN rt0.c3 ELSE rt0.c0 END COLLATE RTRIM ASC  NULLS LAST, CHANGES()  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE ((((1.339938603E9 IN (rt0.c3)))>=((NOT (rt0.c1))))) ORDER BY CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 WHEN '54_' THEN rt0.c3 ELSE rt0.c0 END COLLATE RTRIM ASC  NULLS LAST, CHANGES()  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((x'')AND(vt1.c0))) NOT BETWEEN (json_type(rt0.c1)) AND (CAST(rt0.c1 AS BLOB)))) ORDER BY CASE rt0.c0  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 WHEN '54_' THEN rt0.c3 ELSE rt0.c0 END COLLATE RTRIM ASC  NULLS LAST, CHANGES()  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt1 INNER JOIN rt0 ON (((rt0.c2 IN ())) BETWEEN (NULL) AND ((~ ('0.6411476110727201')))) WHERE ((((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))AND(0.009033792572999855)))AND(vt1.c0))))>=((CAST(rt0.c1 AS BLOB)))));
SELECT * FROM vt1 INNER JOIN rt0 ON (((rt0.c2 IN ())) BETWEEN (NULL) AND ((~ ('0.6411476110727201')))) WHERE ((((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))AND(0.009033792572999855)))AND(vt1.c0))))>=((CAST(rt0.c1 AS BLOB))))) INTERSECT SELECT * FROM vt1 INNER JOIN rt0 ON (((rt0.c2 IN ())) BETWEEN (NULL) AND ((~ ('0.6411476110727201')))) WHERE (rt0.c3);
SELECT * FROM vt1 INNER JOIN rt0 ON (((rt0.c2 IN ())) BETWEEN (NULL) AND ((~ ('0.6411476110727201')))) WHERE ((((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))AND(0.009033792572999855)))AND(vt1.c0))))>=((CAST(rt0.c1 AS BLOB)))));
SELECT * FROM vt1 INNER JOIN rt0 ON (((rt0.c2 IN ())) BETWEEN (NULL) AND ((~ ('0.6411476110727201')))) WHERE ((((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))AND(0.009033792572999855)))AND(vt1.c0))))>=((CAST(rt0.c1 AS BLOB))))) INTERSECT SELECT * FROM vt1 INNER JOIN rt0 ON (((rt0.c2 IN ())) BETWEEN (NULL) AND ((~ ('0.6411476110727201')))) WHERE (rt0.c3);
SELECT ALL * FROM rt0, vt1 WHERE (((rt0.c3) BETWEEN (rt0.c1) AND (LIKELY(DISTINCT vt1.c0)))) ORDER BY ((((rt0.c3)OR(rt0.c0)))==((NOT (rt0.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c3) BETWEEN (rt0.c1) AND (LIKELY(DISTINCT vt1.c0))))AND(x''))) ORDER BY ((((((vt1.c0, rt0.c0))<((rt0.c3, -182911986))), NULLIF(DISTINCT rt0.c0, rt0.c2), LIKELY(rt0.c3)))>(((vt1.c0 IN ()), ((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)), ((((vt1.c0)OR(rt0.c3)))OR(rt0.c2))))) ASC  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c0)GLOB((rt0.c3 IN (rt0.c3))))) ORDER BY ((((((vt1.c0, rt0.c0))<((rt0.c3, 0xfffffffff518fc0e))), NULLIF(DISTINCT rt0.c0, rt0.c2), LIKELY(rt0.c3)))>(((vt1.c0 IN ()), ((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)), ((((vt1.c0)OR(rt0.c3)))OR(rt0.c2))))) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM rt0, vt1 WHERE (((rt0.c3) BETWEEN (rt0.c1) AND (LIKELY(DISTINCT vt1.c0)))) ORDER BY ((((rt0.c3)OR(rt0.c0)))==((NOT (rt0.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c3) BETWEEN (rt0.c1) AND (LIKELY(DISTINCT vt1.c0))))AND(x''))) ORDER BY ((((((vt1.c0, rt0.c0))<((rt0.c3, -182911986))), NULLIF(DISTINCT rt0.c0, rt0.c2), LIKELY(rt0.c3)))>(((vt1.c0 IN ()), ((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)), ((((vt1.c0)OR(rt0.c3)))OR(rt0.c2))))) ASC  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c0)GLOB((rt0.c3 IN (rt0.c3))))) ORDER BY ((((((vt1.c0, rt0.c0))<((rt0.c3, 0xfffffffff518fc0e))), NULLIF(DISTINCT rt0.c0, rt0.c2), LIKELY(rt0.c3)))>(((vt1.c0 IN ()), ((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)), ((((vt1.c0)OR(rt0.c3)))OR(rt0.c2))))) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt1 WHERE (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE) ORDER BY ((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)OR(LIKELIHOOD(vt1.c0, vt1.c0))))OR(((vt1.c0)%(vt1.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE) ORDER BY ((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)OR(LIKELIHOOD(vt1.c0, vt1.c0))))OR(((vt1.c0)%(vt1.c0))))  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE (~ (vt1.c0))  WHEN ((x'589035') BETWEEN ('-1302896843') AND (vt1.c0)) THEN (((0.7158835694229143, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) WHEN NULL THEN ((vt1.c0)>>(vt1.c0)) END) ORDER BY ((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)OR(LIKELIHOOD(vt1.c0, vt1.c0))))OR(((vt1.c0)%(vt1.c0))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE NOCASE) ORDER BY ((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)OR(LIKELIHOOD(vt1.c0, vt1.c0))))OR(((vt1.c0)%(vt1.c0))))  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c0 COLLATE NOCASE))>=((((vt1.c0)GLOB(rt0.c0)))))) ORDER BY CAST((('-732813397') BETWEEN (rt0.c1) AND (rt0.c0)) AS INTEGER) DESC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c0 COLLATE NOCASE))=((((vt1.c0)GLOB(rt0.c0))))))AND(rt0.c0))) ORDER BY '-924501417' ASC  NULLS LAST, CASE WHEN '626381757' COLLATE RTRIM THEN vt1.c0 COLLATE BINARY END  NULLS FIRST LIMIT 0X1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((NOT (rt0.c0))) ORDER BY '-924501417' ASC  NULLS LAST, CASE WHEN '626381757' COLLATE RTRIM THEN vt1.c0 COLLATE BINARY END  NULLS FIRST LIMIT 1;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c0 COLLATE NOCASE))>=((((vt1.c0)GLOB(rt0.c0)))))) ORDER BY CAST((('-732813397') BETWEEN (rt0.c1) AND (rt0.c0)) AS INTEGER) DESC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c0 COLLATE NOCASE))=((((vt1.c0)GLOB(rt0.c0))))))AND(rt0.c0))) ORDER BY '-924501417' ASC  NULLS LAST, CASE WHEN '626381757' COLLATE RTRIM THEN vt1.c0 COLLATE BINARY END  NULLS FIRST LIMIT 0X1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((NOT (rt0.c0))) ORDER BY '-924501417' ASC  NULLS LAST, CASE WHEN '626381757' COLLATE RTRIM THEN vt1.c0 COLLATE BINARY END  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM vt1 WHERE (vt1.c0);
SELECT ALL COUNT(*) FROM vt1 WHERE (vt1.c0) ORDER BY CASE (vt1.c0 IN (NULL, vt1.c0))  WHEN COALESCE(vt1.c0, vt1.c0, vt1.c0) THEN vt1.c0 COLLATE NOCASE END ASC  NULLS LAST, (+ (vt1.c0)) COLLATE NOCASE  NULLS LAST, (- ((vt1.c0 IN (vt1.c0))))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (rt0.c1) ORDER BY (+ (((((((((rt0.c3)AND(rt0.c1)))AND('e谻?I')))AND(vt1.c0)))AND(rt0.c2))));
SELECT * FROM rt0, vt1 WHERE (rt0.c1) ORDER BY ((ABS(rt0.c0)) ISNULL) ASC, CAST(((rt0.c1)AND(rt0.c2)) AS REAL);
SELECT * FROM rt0, vt1 WHERE (rt0.c1) ORDER BY (+ (((((((((rt0.c3)AND(rt0.c1)))AND('e谻?I')))AND(vt1.c0)))AND(rt0.c2))));
SELECT * FROM rt0, vt1 WHERE (rt0.c1) ORDER BY ((ABS(rt0.c0)) ISNULL) ASC, CAST(((rt0.c1)AND(rt0.c2)) AS REAL);
SELECT * FROM rt0, vt1 WHERE ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 END IN (((rt0.c0) NOTNULL))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((CASE WHEN rt0.c2 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 END IN (((rt0.c0) NOTNULL))))AND(((x'0012')||(0.09252562573472356))))) ORDER BY ((((((rt0.c0)|(rt0.c3)))OR(CASE rt0.c3  WHEN rt0.c3 THEN 0.6097015945849833 WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 END)))AND((((vt1.c0, vt1.c0))<=((1641687455, rt0.c0))))) ASC, (((((rt0.c0))=((1.10144383E9)))) NOT BETWEEN (CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c3 END) AND (((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c1)))) ASC LIMIT 1;
SELECT * FROM rt0, vt1 WHERE ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 END IN (((rt0.c0) NOTNULL))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((CASE WHEN rt0.c2 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 END IN (((rt0.c0) NOTNULL))))AND(((x'0012')||(0.09252562573472356))))) ORDER BY ((((((rt0.c0)|(rt0.c3)))OR(CASE rt0.c3  WHEN rt0.c3 THEN 0.6097015945849833 WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 END)))AND((((vt1.c0, vt1.c0))<=((1641687455, rt0.c0))))) ASC, (((((rt0.c0))=((1.10144383E9)))) NOT BETWEEN (CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c3 END) AND (((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c1)))) ASC LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(vt1.c0 AS NUMERIC));
SELECT * FROM vt1, rt0 WHERE (((CAST(vt1.c0 AS NUMERIC))AND(((((((((((((rt0.c3)AND(vt1.c0)))AND(rt0.c0)))AND(((rt0.c1)LIKE(rt0.c0)))))OR((+ (rt0.c2)))))AND('')))AND('2038313441')))));
SELECT ALL * FROM vt1, rt0 WHERE (CAST(vt1.c0 AS NUMERIC));
SELECT * FROM vt1, rt0 WHERE (((CAST(vt1.c0 AS NUMERIC))AND(((((((((((((rt0.c3)AND(vt1.c0)))AND(rt0.c0)))AND(((rt0.c1)LIKE(rt0.c0)))))OR((+ (rt0.c2)))))AND('')))AND('2038313441')))));
SELECT ALL * FROM rt0 WHERE ((~ (rt0.c1)) COLLATE NOCASE);
SELECT DISTINCT * FROM rt0 WHERE ((((~ (rt0.c1)) COLLATE NOCASE)AND(rt0.c1))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE ((~ (rt0.c1)) COLLATE NOCASE);
SELECT DISTINCT * FROM rt0 WHERE ((((~ (rt0.c1)) COLLATE NOCASE)AND(rt0.c1))) LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE ((+ (((rt0.c1)AND(rt0.c0)))));
SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE ((+ (((rt0.c1)AND(rt0.c0))))) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE ((((rt0.c3 IN (rt0.c0)))/(((vt1.c0) NOT NULL))));
SELECT * FROM vt1 WHERE (((((((((vt1.c0)IS NOT(vt1.c0)))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, 0.23771197496701413, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, NULL))))))OR((+ (vt1.c0))))) ORDER BY CASE WHEN (vt1.c0 IN ()) THEN ((((NULL)AND(vt1.c0)))OR(vt1.c0)) ELSE -268734591 COLLATE NOCASE END ASC, CASE WHEN '-262715540' THEN (vt1.c0 IN (vt1.c0)) WHEN vt1.c0 THEN ((vt1.c0)LIKE(NULL)) WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)>>(vt1.c0)) WHEN ((vt1.c0)*(vt1.c0)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END WHEN (((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((x'3a', vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))) THEN vt1.c0 END DESC;
SELECT DISTINCT * FROM vt1 WHERE (((((((((((vt1.c0)IS NOT(vt1.c0)))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, 0.23771197496701413, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, NULL))))))OR((+ (vt1.c0)))))AND(((((vt1.c0 IN (vt1.c0))))<=((vt1.c0)))))) ORDER BY '-1789753103' ASC  NULLS FIRST, ((((('0.5465196597386172', vt1.c0))<=((vt1.c0, vt1.c0)))) NOT NULL)  NULLS LAST LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0) NOT NULL))|(SQLITE_SOURCE_ID()))) ORDER BY '-1789753103' ASC  NULLS FIRST, ((((('0.5465196597386172', vt1.c0))<=((vt1.c0, vt1.c0)))) NOT NULL)  NULLS LAST LIMIT 3;
SELECT * FROM vt1 WHERE (((((((((vt1.c0)IS NOT(vt1.c0)))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, 0.23771197496701413, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, NULL))))))OR((+ (vt1.c0))))) ORDER BY CASE WHEN (vt1.c0 IN ()) THEN ((((NULL)AND(vt1.c0)))OR(vt1.c0)) ELSE -268734591 COLLATE NOCASE END ASC, CASE WHEN '-262715540' THEN (vt1.c0 IN (vt1.c0)) WHEN vt1.c0 THEN ((vt1.c0)LIKE(NULL)) WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)>>(vt1.c0)) WHEN ((vt1.c0)*(vt1.c0)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END WHEN (((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((x'3a', vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))) THEN vt1.c0 END DESC;
SELECT DISTINCT * FROM vt1 WHERE (((((((((((vt1.c0)IS NOT(vt1.c0)))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, 0.23771197496701413, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, NULL))))))OR((+ (vt1.c0)))))AND(((((vt1.c0 IN (vt1.c0))))<=((vt1.c0)))))) ORDER BY '-1789753103' ASC  NULLS FIRST, ((((('0.5465196597386172', vt1.c0))<=((vt1.c0, vt1.c0)))) NOT NULL)  NULLS LAST LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0) NOT NULL))|(SQLITE_SOURCE_ID()))) ORDER BY '-1789753103' ASC  NULLS FIRST, ((((('0.5465196597386172', vt1.c0))<=((vt1.c0, vt1.c0)))) NOT NULL)  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY CASE WHEN ((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0) NOTNULL) END ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((vt1.c0)AND(((NULL) IS TRUE)))) ORDER BY CAST(((vt1.c0)&(vt1.c0)) AS TEXT), ((((vt1.c0)>=(vt1.c0)))/(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))) DESC, CAST(((vt1.c0)>(vt1.c0)) AS INTEGER)  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (NULLIF(vt1.c0, vt1.c0)) ORDER BY CAST(((vt1.c0)&(vt1.c0)) AS TEXT), ((((vt1.c0)>=(vt1.c0)))/(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))) DESC, CAST(((vt1.c0)>(vt1.c0)) AS INTEGER)  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY CASE WHEN ((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0) NOTNULL) END ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((vt1.c0)AND(((NULL) IS TRUE)))) ORDER BY CAST(((vt1.c0)&(vt1.c0)) AS TEXT), ((((vt1.c0)>=(vt1.c0)))/(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))) DESC, CAST(((vt1.c0)>(vt1.c0)) AS INTEGER)  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (NULLIF(vt1.c0, vt1.c0)) ORDER BY CAST(((vt1.c0)&(vt1.c0)) AS TEXT), ((((vt1.c0)>=(vt1.c0)))/(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))) DESC, CAST(((vt1.c0)>(vt1.c0)) AS INTEGER)  NULLS FIRST;
SELECT MIN(rt0.c1) FROM vt1, rt0 NOT INDEXED WHERE ((((+ (rt0.c2)))<(((rt0.c3) IS FALSE)))) ORDER BY (~ (rt0.c2)) COLLATE RTRIM  NULLS LAST, (((vt1.c0) IS TRUE) IN (CAST(vt1.c0 AS NUMERIC)))  NULLS LAST;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE ((((((+ (rt0.c2)))<(((rt0.c3) IS FALSE))))AND((~ ('709578335'))))) ORDER BY 0x4dc311de DESC, rt0.c3 COLLATE RTRIM  NULLS LAST;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (((((x'')OR(((rt0.c1)GLOB(rt0.c3)))))OR(CAST(rt0.c3 AS NUMERIC)))) ORDER BY 0.1725784439027328  NULLS FIRST, CAST(((rt0.c2)%(rt0.c3)) AS BLOB), ((NULL)&((((vt1.c0, vt1.c0, rt0.c0))<=((rt0.c0, rt0.c2, rt0.c2)))))  NULLS LAST;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((((((x'')OR(((rt0.c1)GLOB(rt0.c3)))))OR(CAST(rt0.c3 AS NUMERIC))))AND(CASE WHEN CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 END THEN rt0.c3 COLLATE BINARY END))) ORDER BY 0.1725784439027328  NULLS FIRST, CAST(((rt0.c2)%(rt0.c3)) AS BLOB), ((NULL)&((((vt1.c0, vt1.c0, rt0.c0))<=((rt0.c0, rt0.c2, rt0.c2)))))  NULLS LAST INTERSECT SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (TRIM(DISTINCT (+ (rt0.c0)), (((rt0.c0, rt0.c3))>=((rt0.c0, vt1.c0))))) ORDER BY 0.1725784439027328  NULLS FIRST, CAST(((rt0.c2)%(rt0.c3)) AS BLOB), ((NULL)&((((vt1.c0, vt1.c0, rt0.c0))<=((rt0.c0, rt0.c2, rt0.c2)))))  NULLS LAST;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (((((x'')OR(((rt0.c1)GLOB(rt0.c3)))))OR(CAST(rt0.c3 AS NUMERIC)))) ORDER BY 0.1725784439027328  NULLS FIRST, CAST(((rt0.c2)%(rt0.c3)) AS BLOB), ((NULL)&((((vt1.c0, vt1.c0, rt0.c0))<=((rt0.c0, rt0.c2, rt0.c2)))))  NULLS LAST;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((((((x'')OR(((rt0.c1)GLOB(rt0.c3)))))OR(CAST(rt0.c3 AS NUMERIC))))AND(CASE WHEN CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 END THEN rt0.c3 COLLATE BINARY END))) ORDER BY 0.1725784439027328  NULLS FIRST, CAST(((rt0.c2)%(rt0.c3)) AS BLOB), ((NULL)&((((vt1.c0, vt1.c0, rt0.c0))<=((rt0.c0, rt0.c2, rt0.c2)))))  NULLS LAST INTERSECT SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (TRIM(DISTINCT (+ (rt0.c0)), (((rt0.c0, rt0.c3))>=((rt0.c0, vt1.c0))))) ORDER BY 0.1725784439027328  NULLS FIRST, CAST(((rt0.c2)%(rt0.c3)) AS BLOB), ((NULL)&((((vt1.c0, vt1.c0, rt0.c0))<=((rt0.c0, rt0.c2, rt0.c2)))))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((('4QKn
z<TM') ISNULL)) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))) NOT NULL) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((('4QKn
z<TM') ISNULL)) ORDER BY (((CASE WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c0 END, CAST(rt0.c1 AS BLOB), '1466001721'))>((vt1.c0, ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c0)), (NOT (rt0.c3)))))  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM vt1, rt0 WHERE ((('4QKn
z<TM') ISNULL)) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))) NOT NULL) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((('4QKn
z<TM') ISNULL)) ORDER BY (((CASE WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c0 END, CAST(rt0.c1 AS BLOB), '1466001721'))>((vt1.c0, ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c0)), (NOT (rt0.c3)))))  NULLS FIRST LIMIT 0X2;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (((((((((((((CASE WHEN 0.1286444337000554 THEN rt0.c1 WHEN rt0.c0 THEN x'1f1af910' WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c1 END)AND(((((((rt0.c0)OR(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)))))OR(((0Xffffffffd0c34acb)OR(rt0.c0)))))AND((rt0.c3 IN (rt0.c0, rt0.c3)))))AND(CAST(rt0.c1 AS INTEGER))))AND((((rt0.c1)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))))AND(NULL))) ORDER BY json_array_length((NOT (rt0.c0)), rt0.c0 COLLATE BINARY)  NULLS LAST;
SELECT MAX(rt0.c3) FROM rt0 WHERE (((((((((((((CASE WHEN 0.1286444337000554 THEN rt0.c1 WHEN rt0.c0 THEN x'1f1af910' WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c1 END)AND(((((((rt0.c0)OR(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)))))OR(((0Xffffffffd0c34acb)OR(rt0.c0)))))AND((rt0.c3 IN (rt0.c0, rt0.c3)))))AND(CAST(rt0.c1 AS INTEGER))))AND((((rt0.c1)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))))AND(NULL))) ORDER BY json_array_length((NOT (rt0.c0)), rt0.c0 COLLATE BINARY)  NULLS LAST LIMIT 0X4 INTERSECT SELECT MAX(rt0.c3) FROM rt0 WHERE ((((rt0.c0, rt0.c2, '-2095099121'))!=((rt0.c0, rt0.c0, rt0.c2))) COLLATE NOCASE) ORDER BY json_array_length((NOT (rt0.c0)), rt0.c0 COLLATE BINARY)  NULLS LAST LIMIT 4;
SELECT ALL * FROM vt1, rt0 WHERE (NULLIF(DISTINCT ((rt0.c1)%(rt0.c3)), ((vt1.c0)<=(vt1.c0))));
SELECT * FROM vt1, rt0 WHERE (((NULLIF(DISTINCT ((rt0.c1)%(rt0.c3)), ((vt1.c0)<=(vt1.c0))))AND(rt0.c1 COLLATE BINARY)));
SELECT ALL * FROM vt1, rt0 WHERE (NULLIF(DISTINCT ((rt0.c1)%(rt0.c3)), ((vt1.c0)<=(vt1.c0))));
SELECT * FROM vt1, rt0 WHERE (((NULLIF(DISTINCT ((rt0.c1)%(rt0.c3)), ((vt1.c0)<=(vt1.c0))))AND(rt0.c1 COLLATE BINARY)));
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0);
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0);
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0);
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0);
SELECT MAX(vt1.c0) FROM vt1 NOT INDEXED WHERE (SUBSTR(NULL, TRIM(DISTINCT vt1.c0)));
SELECT MAX(vt1.c0) FROM vt1 WHERE (((SUBSTR(NULL, TRIM(DISTINCT vt1.c0)))AND((- (vt1.c0 COLLATE NOCASE))))) INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) COLLATE RTRIM COLLATE NOCASE);
SELECT * FROM vt1, rt0 WHERE ((((CAST(vt1.c0 AS TEXT), ((rt0.c2) NOT NULL), rt0.c0 COLLATE RTRIM, (((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((x'')))))<=(((((x'85', vt1.c0, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c1, rt0.c0))), (NOT ('滽g ')), (rt0.c1 IN ()), CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 END))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((CAST(vt1.c0 AS TEXT), ((rt0.c2) NOT NULL), rt0.c0 COLLATE RTRIM, (((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((x'')))))<=(((((x'85', vt1.c0, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c1, rt0.c0))), (NOT ('滽g ')), (rt0.c1 IN ()), CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 END))))AND(((rt0.c0) NOTNULL) COLLATE NOCASE))) ORDER BY ((((((x'908002ac')OR(rt0.c1)))AND(rt0.c0)))==('o')) DESC LIMIT 0x0;
SELECT * FROM vt1, rt0 WHERE ((((CAST(vt1.c0 AS TEXT), ((rt0.c2) NOT NULL), rt0.c0 COLLATE RTRIM, (((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((x'')))))<=(((((x'85', vt1.c0, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c1, rt0.c0))), (NOT ('滽g ')), (rt0.c1 IN ()), CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 END))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((CAST(vt1.c0 AS TEXT), ((rt0.c2) NOT NULL), rt0.c0 COLLATE RTRIM, (((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((x'')))))<=(((((x'85', vt1.c0, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c1, rt0.c0))), (NOT ('滽g ')), (rt0.c1 IN ()), CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 END))))AND(((rt0.c0) NOTNULL) COLLATE NOCASE))) ORDER BY ((((((x'908002ac')OR(rt0.c1)))AND(rt0.c0)))==('o')) DESC LIMIT 0x0;
SELECT * FROM vt1 WHERE ('') ORDER BY ((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))AND(vt1.c0 COLLATE BINARY)))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ('') ORDER BY ((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))AND(vt1.c0 COLLATE BINARY)))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))  NULLS FIRST LIMIT 1;
SELECT * FROM vt1 WHERE ('') ORDER BY ((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))AND(vt1.c0 COLLATE BINARY)))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ('') ORDER BY ((((((LOWER(DISTINCT vt1.c0))AND(vt1.c0)))AND(vt1.c0 COLLATE BINARY)))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))  NULLS FIRST LIMIT 1;
SELECT MAX(rt0.c0) FROM rt0 WHERE (((((rt0.c0 COLLATE BINARY)AND(rt0.c3 COLLATE BINARY)))AND((~ (rt0.c0)))));
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (((((((rt0.c0 COLLATE BINARY)AND(rt0.c3 COLLATE BINARY)))AND((~ (rt0.c0)))))AND(rt0.c2))) LIMIT 1 INTERSECT SELECT MAX(rt0.c0) FROM rt0 WHERE (((((rt0.c3) ISNULL)) IS FALSE)) LIMIT 0X1;
SELECT COUNT(*) FROM rt0 WHERE (CAST((((rt0.c3, rt0.c1, rt0.c3, rt0.c2)) BETWEEN ((rt0.c0, rt0.c2, rt0.c2, rt0.c1)) AND ((rt0.c1, rt0.c1, rt0.c1, rt0.c0))) AS REAL)) ORDER BY rt0.c3  NULLS LAST, ((((((rt0.c2)OR(rt0.c3)))AND(rt0.c1))) BETWEEN (((((((((rt0.c1)AND(rt0.c1)))AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c0))) AND ((((rt0.c2, rt0.c1, rt0.c3))<=((rt0.c1, rt0.c3, x'bc'))))) ASC  NULLS LAST, ((((((((rt0.c3)OR(rt0.c1)))AND('-618343155')))OR(json_valid(x''))))AND(((rt0.c2) ISNULL))) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CAST((((rt0.c3, rt0.c1, rt0.c3, rt0.c2)) BETWEEN ((rt0.c0, rt0.c2, rt0.c2, rt0.c1)) AND ((rt0.c1, rt0.c1, rt0.c1, rt0.c0))) AS REAL)) ORDER BY (~ ((((rt0.c0, rt0.c1, rt0.c1, rt0.c0, rt0.c0))<=((rt0.c1, x'58', rt0.c2, rt0.c0, rt0.c1))))) ASC  NULLS FIRST;
SELECT ALL MAX(rt0.c1) FROM vt1, rt0 WHERE ((((((((rt0.c3)OR(vt1.c0)))AND('1414079628'))))<>((((vt1.c0) NOTNULL)))));
SELECT DISTINCT MAX(rt0.c1) FROM vt1, rt0 WHERE ((((((((((rt0.c3)OR(vt1.c0)))AND('1414079628'))))<>((((vt1.c0) NOTNULL)))))AND(((rt0.c2 IN ()) IN ())))) LIMIT 0x1 INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM vt1, rt0 WHERE (vt1.c0) LIMIT 0X1;
SELECT * FROM rt0 WHERE (((((((rt0.c0)<>(rt0.c1)))OR(0X61dd7fb6)))AND(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN 'g' ELSE rt0.c2 END))) ORDER BY ((((rt0.c3) ISNULL)) ISNULL) DESC, ((((~ (rt0.c0)), CASE 8.75598938E8  WHEN NULL THEN '722345103' WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END, rt0.c2))>((((((((rt0.c1)OR(rt0.c3)))AND(rt0.c2)))AND(-1218772869)), CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN '䭗' WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c1 END, rt0.c0)));
SELECT * FROM rt0 WHERE (((((((rt0.c0)!=(rt0.c1)))OR(1641906102)))AND(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN 'g' ELSE rt0.c2 END))) ORDER BY ((((rt0.c3) ISNULL)) ISNULL) DESC, ((((~ (rt0.c0)), CASE 8.75598938E8  WHEN NULL THEN '722345103' WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END, rt0.c2))>((((((((rt0.c1)OR(rt0.c3)))AND(rt0.c2)))AND(0Xffffffffb75b007b)), CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN '䭗' WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c1 END, rt0.c0))) LIMIT 0;
SELECT * FROM rt0 WHERE (((((((rt0.c0)<>(rt0.c1)))OR(0X61dd7fb6)))AND(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN 'g' ELSE rt0.c2 END))) ORDER BY ((((rt0.c3) ISNULL)) ISNULL) DESC, ((((~ (rt0.c0)), CASE 8.75598938E8  WHEN NULL THEN '722345103' WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END, rt0.c2))>((((((((rt0.c1)OR(rt0.c3)))AND(rt0.c2)))AND(-1218772869)), CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN '䭗' WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c1 END, rt0.c0)));
SELECT * FROM rt0 WHERE (((((((rt0.c0)!=(rt0.c1)))OR(1641906102)))AND(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN 'g' ELSE rt0.c2 END))) ORDER BY ((((rt0.c3) ISNULL)) ISNULL) DESC, ((((~ (rt0.c0)), CASE 8.75598938E8  WHEN NULL THEN '722345103' WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END, rt0.c2))>((((((((rt0.c1)OR(rt0.c3)))AND(rt0.c2)))AND(0Xffffffffb75b007b)), CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN '䭗' WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c1 END, rt0.c0))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)) COLLATE NOCASE) ORDER BY CASE WHEN rt0.c2 THEN ((rt0.c3) IS FALSE) WHEN NULL THEN rt0.c1 COLLATE BINARY END, load_extension(rt0.c3 COLLATE NOCASE, ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2))) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)) COLLATE NOCASE) ORDER BY CAST(-822492459 AS NUMERIC)  NULLS FIRST, SQLITE_COMPILEOPTION_GET(((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c1))), (((rt0.c1 IN (rt0.c3))) NOTNULL) ASC, ((CAST(rt0.c2 AS NUMERIC))IS NOT(CASE WHEN rt0.c3 THEN rt0.c1 END))  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE ((((~ (rt0.c0)))|(((((rt0.c1)AND(rt0.c2)))AND(rt0.c2))))) ORDER BY CAST(-822492459 AS NUMERIC)  NULLS FIRST, SQLITE_COMPILEOPTION_GET(((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c1))), (((rt0.c1 IN (rt0.c3))) NOTNULL) ASC, ((CAST(rt0.c2 AS NUMERIC))IS NOT(CASE WHEN rt0.c3 THEN rt0.c1 END))  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)) COLLATE NOCASE) ORDER BY CASE WHEN rt0.c2 THEN ((rt0.c3) IS FALSE) WHEN NULL THEN rt0.c1 COLLATE BINARY END, load_extension(rt0.c3 COLLATE NOCASE, ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2))) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)) COLLATE NOCASE) ORDER BY CAST(-822492459 AS NUMERIC)  NULLS FIRST, SQLITE_COMPILEOPTION_GET(((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c1))), (((rt0.c1 IN (rt0.c3))) NOTNULL) ASC, ((CAST(rt0.c2 AS NUMERIC))IS NOT(CASE WHEN rt0.c3 THEN rt0.c1 END))  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE ((((~ (rt0.c0)))|(((((rt0.c1)AND(rt0.c2)))AND(rt0.c2))))) ORDER BY CAST(-822492459 AS NUMERIC)  NULLS FIRST, SQLITE_COMPILEOPTION_GET(((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c1))), (((rt0.c1 IN (rt0.c3))) NOTNULL) ASC, ((CAST(rt0.c2 AS NUMERIC))IS NOT(CASE WHEN rt0.c3 THEN rt0.c1 END))  NULLS LAST;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (+ (((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)))) WHERE (((((vt1.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0))) IN ((NOT (rt0.c2))))) ORDER BY ((rt0.c0 COLLATE NOCASE)IS(json(rt0.c3)))  NULLS LAST, UPPER(DISTINCT rt0.c2) DESC;
SELECT * FROM rt0 INNER JOIN vt1 ON (+ (((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)))) WHERE (((((((vt1.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0))) IN ((NOT (rt0.c2)))))AND((((((((((((rt0.c2 IN (rt0.c1)))OR(((x'')>(rt0.c1)))))AND(((rt0.c2)!=(x'14')))))AND(rt0.c2)))AND((((rt0.c1, vt1.c0))>(('-695584596', rt0.c0))))))AND(CAST(NULL AS INTEGER)))))) ORDER BY CASE ((rt0.c2)<<(rt0.c1))  WHEN ((rt0.c1)GLOB(rt0.c0)) THEN (((rt0.c2, rt0.c1))<((rt0.c2, rt0.c0))) WHEN ((rt0.c1)<<(vt1.c0)) THEN x'c3' ELSE ((rt0.c1)AND('')) END DESC, ((rt0.c2 COLLATE NOCASE)*(((((((((vt1.c0)AND(rt0.c3)))OR(rt0.c3)))AND(vt1.c0)))OR('-1955672256')))) DESC, TRIM(DISTINCT ((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c3)), UNICODE(rt0.c0)) LIMIT 0X0;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (+ (((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)))) WHERE (((((vt1.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0))) IN ((NOT (rt0.c2))))) ORDER BY ((rt0.c0 COLLATE NOCASE)IS(json(rt0.c3)))  NULLS LAST, UPPER(DISTINCT rt0.c2) DESC;
SELECT * FROM rt0 INNER JOIN vt1 ON (+ (((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)))) WHERE (((((((vt1.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0))) IN ((NOT (rt0.c2)))))AND((((((((((((rt0.c2 IN (rt0.c1)))OR(((x'')>(rt0.c1)))))AND(((rt0.c2)!=(x'14')))))AND(rt0.c2)))AND((((rt0.c1, vt1.c0))>(('-695584596', rt0.c0))))))AND(CAST(NULL AS INTEGER)))))) ORDER BY CASE ((rt0.c2)<<(rt0.c1))  WHEN ((rt0.c1)GLOB(rt0.c0)) THEN (((rt0.c2, rt0.c1))<((rt0.c2, rt0.c0))) WHEN ((rt0.c1)<<(vt1.c0)) THEN x'c3' ELSE ((rt0.c1)AND('')) END DESC, ((rt0.c2 COLLATE NOCASE)*(((((((((vt1.c0)AND(rt0.c3)))OR(rt0.c3)))AND(vt1.c0)))OR('-1955672256')))) DESC, TRIM(DISTINCT ((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c3)), UNICODE(rt0.c0)) LIMIT 0X0;
SELECT ALL * FROM rt0, vt1 WHERE (0.23689664159758295);
SELECT DISTINCT * FROM rt0, vt1 WHERE (0.23689664159758295) ORDER BY ((((((((((((NULL)OR(rt0.c3)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)))OR(x'89'))) BETWEEN (rt0.c0 COLLATE RTRIM) AND (CAST(rt0.c2 AS BLOB))) ASC  NULLS FIRST, 0xffffffffde317a85 ASC  NULLS FIRST LIMIT 3;
SELECT ALL * FROM rt0, vt1 WHERE (0.23689664159758295);
SELECT DISTINCT * FROM rt0, vt1 WHERE (0.23689664159758295) ORDER BY ((((((((((((NULL)OR(rt0.c3)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)))OR(x'89'))) BETWEEN (rt0.c0 COLLATE RTRIM) AND (CAST(rt0.c2 AS BLOB))) ASC  NULLS FIRST, 0xffffffffde317a85 ASC  NULLS FIRST LIMIT 3;
SELECT ALL COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS REAL)) NOT NULL)) ORDER BY ((((vt1.c0)/(vt1.c0)))OR(vt1.c0)) DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((CAST(vt1.c0 AS REAL)) NOT NULL))AND(((vt1.c0) BETWEEN (vt1.c0) AND (0.3225145650989357)) COLLATE BINARY))) ORDER BY ((((vt1.c0)/(vt1.c0)))OR(vt1.c0)) DESC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE ((((json_quote(0xffffffffea28a99f), ((((((rt0.c2)OR(vt1.c0)))AND(rt0.c1)))OR(rt0.c1)), ((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0))))>=(((((vt1.c0, rt0.c0, vt1.c0))<((NULL, rt0.c2, rt0.c2))), rt0.c2 COLLATE RTRIM, ((rt0.c1) NOT NULL))))) ORDER BY (((CAST(rt0.c3 AS INTEGER)))=((CAST(rt0.c3 AS TEXT)))) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((json_quote(-366433889), ((((((rt0.c2)OR(vt1.c0)))AND(rt0.c1)))OR(rt0.c1)), ((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0))))=(((((vt1.c0, rt0.c0, vt1.c0))<((NULL, rt0.c2, rt0.c2))), rt0.c2 COLLATE RTRIM, ((rt0.c1) NOT NULL)))))AND(rt0.c3))) ORDER BY CAST(((vt1.c0)<=(rt0.c3)) AS TEXT) ASC, (((CAST(rt0.c3 AS TEXT), ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c0))))<(((vt1.c0 IN ()), rt0.c3 COLLATE NOCASE))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)))<<(((((((((rt0.c3)OR(rt0.c3)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0))))) ORDER BY CAST(((vt1.c0)<=(rt0.c3)) AS TEXT) ASC, (((CAST(rt0.c3 AS TEXT), ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c0))))<(((vt1.c0 IN ()), rt0.c3 COLLATE NOCASE))) LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE ((((json_quote(0xffffffffea28a99f), ((((((rt0.c2)OR(vt1.c0)))AND(rt0.c1)))OR(rt0.c1)), ((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0))))>=(((((vt1.c0, rt0.c0, vt1.c0))<((NULL, rt0.c2, rt0.c2))), rt0.c2 COLLATE RTRIM, ((rt0.c1) NOT NULL))))) ORDER BY (((CAST(rt0.c3 AS INTEGER)))=((CAST(rt0.c3 AS TEXT)))) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((json_quote(-366433889), ((((((rt0.c2)OR(vt1.c0)))AND(rt0.c1)))OR(rt0.c1)), ((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0))))=(((((vt1.c0, rt0.c0, vt1.c0))<((NULL, rt0.c2, rt0.c2))), rt0.c2 COLLATE RTRIM, ((rt0.c1) NOT NULL)))))AND(rt0.c3))) ORDER BY CAST(((vt1.c0)<=(rt0.c3)) AS TEXT) ASC, (((CAST(rt0.c3 AS TEXT), ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c0))))<(((vt1.c0 IN ()), rt0.c3 COLLATE NOCASE))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)))<<(((((((((rt0.c3)OR(rt0.c3)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0))))) ORDER BY CAST(((vt1.c0)<=(rt0.c3)) AS TEXT) ASC, (((CAST(rt0.c3 AS TEXT), ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c0))))<(((vt1.c0 IN ()), rt0.c3 COLLATE NOCASE))) LIMIT 0;
SELECT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))GLOB(vt1.c0 COLLATE BINARY))) ORDER BY (vt1.c0 IN (NULL)) COLLATE NOCASE  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))GLOB(vt1.c0 COLLATE BINARY)))AND(LOWER(((vt1.c0)-('')))))) ORDER BY (vt1.c0 IN (NULL)) COLLATE NOCASE  NULLS LAST;
SELECT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))GLOB(vt1.c0 COLLATE BINARY))) ORDER BY (vt1.c0 IN (NULL)) COLLATE NOCASE  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))GLOB(vt1.c0 COLLATE BINARY)))AND(LOWER(((vt1.c0)-('')))))) ORDER BY (vt1.c0 IN (NULL)) COLLATE NOCASE  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL END COLLATE NOCASE);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL END COLLATE NOCASE) LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE ((NOT (((rt0.c1)>=(rt0.c0))))) ORDER BY ((((((((rt0.c3) NOTNULL))OR(((rt0.c0)IS(rt0.c0)))))AND(CAST(rt0.c1 AS TEXT))))AND(rt0.c0 COLLATE NOCASE)) ASC  NULLS LAST, (~ (rt0.c2 COLLATE RTRIM)) ASC;
SELECT * FROM rt0, vt1 WHERE ((((NOT (((rt0.c1)>=(rt0.c0)))))AND((+ ((NOT (vt1.c0))))))) ORDER BY ((((((((rt0.c3) NOTNULL))OR(((rt0.c0)IS(rt0.c0)))))AND(CAST(rt0.c1 AS TEXT))))AND(rt0.c0 COLLATE NOCASE)) ASC  NULLS LAST, (~ (rt0.c2 COLLATE RTRIM)) ASC LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE ((NOT (((rt0.c1)>=(rt0.c0))))) ORDER BY ((((((((rt0.c3) NOTNULL))OR(((rt0.c0)IS(rt0.c0)))))AND(CAST(rt0.c1 AS TEXT))))AND(rt0.c0 COLLATE NOCASE)) ASC  NULLS LAST, (~ (rt0.c2 COLLATE RTRIM)) ASC;
SELECT * FROM rt0, vt1 WHERE ((((NOT (((rt0.c1)>=(rt0.c0)))))AND((+ ((NOT (vt1.c0))))))) ORDER BY ((((((((rt0.c3) NOTNULL))OR(((rt0.c0)IS(rt0.c0)))))AND(CAST(rt0.c1 AS TEXT))))AND(rt0.c0 COLLATE NOCASE)) ASC  NULLS LAST, (~ (rt0.c2 COLLATE RTRIM)) ASC LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE (CASE WHEN CAST(rt0.c3 AS INTEGER) THEN rt0.c2 WHEN ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)) THEN (('-781367930') NOT NULL) WHEN NULL THEN ((rt0.c3)||(rt0.c3)) ELSE (rt0.c0 IN (rt0.c0, rt0.c0)) END) ORDER BY CASE CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 END  WHEN ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)) THEN rt0.c2 WHEN CAST(rt0.c2 AS REAL) THEN (+ (rt0.c3)) END DESC;
SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN CAST(rt0.c3 AS INTEGER) THEN rt0.c2 WHEN ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)) THEN (('-781367930') NOT NULL) WHEN NULL THEN ((rt0.c3)||(rt0.c3)) ELSE (rt0.c0 IN (rt0.c0, rt0.c0)) END) ORDER BY CASE CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 END  WHEN ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)) THEN rt0.c2 WHEN CAST(rt0.c2 AS REAL) THEN (+ (rt0.c3)) END DESC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((('?')IS NOT(rt0.c0)))OR(((9.9367454E7)>=(rt0.c0))))) ORDER BY CASE CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 END  WHEN ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)) THEN rt0.c2 WHEN CAST(rt0.c2 AS REAL) THEN (+ (rt0.c3)) END DESC LIMIT 0;
SELECT ALL * FROM rt0 WHERE (CASE WHEN CAST(rt0.c3 AS INTEGER) THEN rt0.c2 WHEN ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)) THEN (('-781367930') NOT NULL) WHEN NULL THEN ((rt0.c3)||(rt0.c3)) ELSE (rt0.c0 IN (rt0.c0, rt0.c0)) END) ORDER BY CASE CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 END  WHEN ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)) THEN rt0.c2 WHEN CAST(rt0.c2 AS REAL) THEN (+ (rt0.c3)) END DESC;
SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN CAST(rt0.c3 AS INTEGER) THEN rt0.c2 WHEN ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)) THEN (('-781367930') NOT NULL) WHEN NULL THEN ((rt0.c3)||(rt0.c3)) ELSE (rt0.c0 IN (rt0.c0, rt0.c0)) END) ORDER BY CASE CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 END  WHEN ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)) THEN rt0.c2 WHEN CAST(rt0.c2 AS REAL) THEN (+ (rt0.c3)) END DESC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((('?')IS NOT(rt0.c0)))OR(((9.9367454E7)>=(rt0.c0))))) ORDER BY CASE CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 END  WHEN ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)) THEN rt0.c2 WHEN CAST(rt0.c2 AS REAL) THEN (+ (rt0.c3)) END DESC LIMIT 0;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (CAST(x'' AS REAL));
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((CAST(x'' AS REAL))AND(CAST(-1048344249 AS REAL)))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c3)))+(rt0.c1 COLLATE BINARY)), (((((((~ (rt0.c1)))OR((+ (0.07876206171925404)))))AND(rt0.c1)))OR('0.5987249856645107')) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (NULL) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c3)))+(rt0.c1 COLLATE BINARY)), (((((((~ (rt0.c1)))OR((+ (0.07876206171925404)))))AND(rt0.c1)))OR('0.5987249856645107')) ASC;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CAST((vt1.c0 IN ()) AS TEXT));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((CAST((vt1.c0 IN ()) AS TEXT))AND(((426117718) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM))) ORDER BY CASE WHEN (- (vt1.c0)) THEN (vt1.c0 IN (vt1.c0)) WHEN vt1.c0 COLLATE RTRIM THEN (NOT (vt1.c0)) END LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS BLOB))*(vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c0 AS BLOB))*(vt1.c0))) ORDER BY vt1.c0  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS BLOB))*(vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c0 AS BLOB))*(vt1.c0))) ORDER BY vt1.c0  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0) NOT NULL));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0) NOT NULL))AND(((NULL)<=(IFNULL(vt1.c0, vt1.c0)))))) ORDER BY ((CASE WHEN '-1302896843' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)IS NOT(vt1.c0 COLLATE NOCASE)) ASC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE (vt1.c0) ORDER BY (NOT (rt0.c3)) ASC  NULLS FIRST, '-2051742299'  NULLS LAST, ((NULL) IS TRUE) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((vt1.c0)AND(CASE rt0.c0 COLLATE BINARY  WHEN 0.35795302195238243 COLLATE RTRIM THEN ((rt0.c2) NOTNULL) WHEN rt0.c3 THEN CAST(vt1.c0 AS REAL) WHEN ((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)) THEN '0.5286762140952553' WHEN CASE vt1.c0  WHEN '875598938' THEN rt0.c1 ELSE rt0.c2 END THEN (rt0.c3 IN (rt0.c1)) WHEN ((rt0.c3) NOT NULL) THEN ((rt0.c0) BETWEEN (NULL) AND (rt0.c2)) ELSE rt0.c0 COLLATE NOCASE END))) ORDER BY (vt1.c0 IN (rt0.c0)) COLLATE BINARY ASC  NULLS FIRST, ((CASE 0.17504510710642862  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END) NOT NULL) DESC;
SELECT ALL * FROM rt0, vt1 WHERE (vt1.c0) ORDER BY (NOT (rt0.c3)) ASC  NULLS FIRST, '-2051742299'  NULLS LAST, ((NULL) IS TRUE) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((vt1.c0)AND(CASE rt0.c0 COLLATE BINARY  WHEN 0.35795302195238243 COLLATE RTRIM THEN ((rt0.c2) NOTNULL) WHEN rt0.c3 THEN CAST(vt1.c0 AS REAL) WHEN ((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)) THEN '0.5286762140952553' WHEN CASE vt1.c0  WHEN '875598938' THEN rt0.c1 ELSE rt0.c2 END THEN (rt0.c3 IN (rt0.c1)) WHEN ((rt0.c3) NOT NULL) THEN ((rt0.c0) BETWEEN (NULL) AND (rt0.c2)) ELSE rt0.c0 COLLATE NOCASE END))) ORDER BY (vt1.c0 IN (rt0.c0)) COLLATE BINARY ASC  NULLS FIRST, ((CASE 0.17504510710642862  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END) NOT NULL) DESC;
SELECT MIN(vt1.c0) FROM rt0, vt1 WHERE (((((((((((((NULL)AND(0Xfffffffffc7d7309)))AND(rt0.c1)))AND(rt0.c2)))OR('875598938')))OR(CAST(rt0.c3 AS REAL))))OR(rt0.c0)));
SELECT ALL MIN(vt1.c0) FROM rt0, vt1 WHERE (((((((((((((((NULL)AND(0xfffffffffc7d7309)))AND(rt0.c1)))AND(rt0.c2)))OR('875598938')))OR(CAST(rt0.c3 AS REAL))))OR(rt0.c0)))AND((- (rt0.c3)) COLLATE NOCASE))) ORDER BY CAST(((rt0.c0)GLOB(rt0.c1)) AS TEXT) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON ((CAST(rt0.c3 AS REAL))<(rt0.c0)) WHERE (NULL);
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON ((CAST(rt0.c3 AS REAL))<(rt0.c0)) WHERE (NULL) ORDER BY ((vt1.c0 COLLATE BINARY)IS(CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN '-1834146775' WHEN vt1.c0 THEN rt0.c1 END))  NULLS LAST, rt0.c0 DESC, ((vt1.c0 IN ()) IN ()) ASC  NULLS FIRST;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON ((CAST(rt0.c3 AS REAL))<(rt0.c0)) WHERE (NULL);
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON ((CAST(rt0.c3 AS REAL))<(rt0.c0)) WHERE (NULL) ORDER BY ((vt1.c0 COLLATE BINARY)IS(CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN '-1834146775' WHEN vt1.c0 THEN rt0.c1 END))  NULLS LAST, rt0.c0 DESC, ((vt1.c0 IN ()) IN ()) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0)||(vt1.c0))) NOT BETWEEN (((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR('&pFBmR#i')))OR(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (~ (CAST(vt1.c0 AS TEXT)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((((((vt1.c0)||(vt1.c0))) NOT BETWEEN (((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR('&pFBmR#i')))OR(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND((CASE vt1.c0  WHEN x'e0' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END IN (vt1.c0))))) ORDER BY (~ (CAST(vt1.c0 AS TEXT)))  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0))<((vt1.c0))) COLLATE RTRIM) ORDER BY (~ (CAST(vt1.c0 AS TEXT)))  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c0 IN ()))LIKE(((rt0.c0) IS TRUE))));
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c0 IN ()))LIKE(((rt0.c0) IS TRUE))))AND(CASE ((vt1.c0)GLOB(rt0.c3))  WHEN CASE WHEN rt0.c1 THEN rt0.c1 END THEN (+ (rt0.c0)) WHEN json_remove(rt0.c3, rt0.c3, rt0.c2, rt0.c3) THEN CAST(0.030873476882137485 AS TEXT) WHEN (((rt0.c2))!=((vt1.c0))) THEN ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c0)) END))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3))) NOT BETWEEN (((NULL)<(rt0.c2))) AND (CAST(rt0.c2 AS BLOB))) ASC  NULLS FIRST, CAST(((rt0.c3) IS FALSE) AS NUMERIC)  NULLS LAST INTERSECT SELECT * FROM rt0, vt1 WHERE (CAST((NOT (NULL)) AS INTEGER)) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3))) NOT BETWEEN (((NULL)<(rt0.c2))) AND (CAST(rt0.c2 AS BLOB))) ASC  NULLS FIRST, CAST(((rt0.c3) IS FALSE) AS NUMERIC)  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c0 IN ()))LIKE(((rt0.c0) IS TRUE))));
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c0 IN ()))LIKE(((rt0.c0) IS TRUE))))AND(CASE ((vt1.c0)GLOB(rt0.c3))  WHEN CASE WHEN rt0.c1 THEN rt0.c1 END THEN (+ (rt0.c0)) WHEN json_remove(rt0.c3, rt0.c3, rt0.c2, rt0.c3) THEN CAST(0.030873476882137485 AS TEXT) WHEN (((rt0.c2))!=((vt1.c0))) THEN ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c0)) END))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3))) NOT BETWEEN (((NULL)<(rt0.c2))) AND (CAST(rt0.c2 AS BLOB))) ASC  NULLS FIRST, CAST(((rt0.c3) IS FALSE) AS NUMERIC)  NULLS LAST INTERSECT SELECT * FROM rt0, vt1 WHERE (CAST((NOT (NULL)) AS INTEGER)) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3))) NOT BETWEEN (((NULL)<(rt0.c2))) AND (CAST(rt0.c2 AS BLOB))) ASC  NULLS FIRST, CAST(((rt0.c3) IS FALSE) AS NUMERIC)  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (CASE WHEN CAST(vt1.c0 AS TEXT) THEN 0.23400613461588715 WHEN CAST(vt1.c0 AS BLOB) THEN ((vt1.c0)IS NOT(vt1.c0)) ELSE CAST(vt1.c0 AS REAL) END);
SELECT * FROM vt1 WHERE (CASE WHEN CAST(vt1.c0 AS TEXT) THEN 0.23400613461588715 WHEN CAST(vt1.c0 AS BLOB) THEN ((vt1.c0)IS NOT(vt1.c0)) ELSE CAST(vt1.c0 AS REAL) END) ORDER BY (- ((- (0.28690491463226675)))) ASC;
SELECT ALL * FROM vt1 WHERE (CASE WHEN CAST(vt1.c0 AS TEXT) THEN 0.23400613461588715 WHEN CAST(vt1.c0 AS BLOB) THEN ((vt1.c0)IS NOT(vt1.c0)) ELSE CAST(vt1.c0 AS REAL) END);
SELECT * FROM vt1 WHERE (CASE WHEN CAST(vt1.c0 AS TEXT) THEN 0.23400613461588715 WHEN CAST(vt1.c0 AS BLOB) THEN ((vt1.c0)IS NOT(vt1.c0)) ELSE CAST(vt1.c0 AS REAL) END) ORDER BY (- ((- (0.28690491463226675)))) ASC;
SELECT * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0))) IS FALSE)) ORDER BY ((((vt1.c0)IS NOT(vt1.c0))) IS TRUE) ASC  NULLS LAST, ((((vt1.c0)|(vt1.c0)))<(vt1.c0 COLLATE RTRIM)) ASC;
SELECT * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0))) IS FALSE)) ORDER BY (((((vt1.c0)>(vt1.c0)), CAST(vt1.c0 AS TEXT), (+ (vt1.c0))))>=((CASE '-300182293'  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 WHEN '0' THEN vt1.c0 END, CAST(vt1.c0 AS TEXT), ((vt1.c0) IS FALSE)))) ASC LIMIT 0x1;
SELECT * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0))) IS FALSE)) ORDER BY ((((vt1.c0)IS NOT(vt1.c0))) IS TRUE) ASC  NULLS LAST, ((((vt1.c0)|(vt1.c0)))<(vt1.c0 COLLATE RTRIM)) ASC;
SELECT * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0))) IS FALSE)) ORDER BY (((((vt1.c0)>(vt1.c0)), CAST(vt1.c0 AS TEXT), (+ (vt1.c0))))>=((CASE '-300182293'  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 WHEN '0' THEN vt1.c0 END, CAST(vt1.c0 AS TEXT), ((vt1.c0) IS FALSE)))) ASC LIMIT 0x1;
SELECT MIN(rt0.c3) FROM rt0 WHERE ((((rt0.c0, rt0.c0)) NOT BETWEEN (((((rt0.c1, rt0.c1, rt0.c0, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c1, 0.7806448447175139, rt0.c1)) AND ((rt0.c1, rt0.c2, rt0.c0, rt0.c3))), ((NULL)<=(rt0.c2)))) AND ((((((rt0.c2)OR(rt0.c1)))AND(rt0.c1)), 0.8331459420889951))));
SELECT DISTINCT MIN(rt0.c3) FROM rt0 WHERE ((((((rt0.c0, rt0.c0)) NOT BETWEEN (((((rt0.c1, rt0.c1, rt0.c0, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c1, 0.7806448447175139, rt0.c1)) AND ((rt0.c1, rt0.c2, rt0.c0, rt0.c3))), ((NULL)<=(rt0.c2)))) AND ((((((rt0.c2)OR(rt0.c1)))AND(rt0.c1)), 0.8331459420889951))))AND((((rt0.c1 IN (rt0.c0))) BETWEEN (rt0.c3) AND (CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c2 END))))) ORDER BY ((rt0.c0)GLOB(rt0.c0)) COLLATE NOCASE DESC  NULLS FIRST;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))||(((vt1.c0) ISNULL))) WHERE (((NULLIF(rt0.c3, rt0.c0)) BETWEEN (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 WHEN vt1.c0 THEN 0x358995e6 END) AND ((~ (rt0.c3))))) ORDER BY CAST(rt0.c3 COLLATE NOCASE AS BLOB) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON ((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))||(((vt1.c0) ISNULL))) WHERE (((NULLIF(rt0.c3, rt0.c0)) BETWEEN (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 WHEN vt1.c0 THEN 0X358995e6 END) AND ((~ (rt0.c3))))) ORDER BY ((CAST(vt1.c0 AS REAL))-(((((rt0.c1)AND(vt1.c0)))AND(rt0.c1)))) DESC, (NOT (CAST(vt1.c0 AS BLOB)));
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))||(((vt1.c0) ISNULL))) WHERE (((NULLIF(rt0.c3, rt0.c0)) BETWEEN (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 WHEN vt1.c0 THEN 0x358995e6 END) AND ((~ (rt0.c3))))) ORDER BY CAST(rt0.c3 COLLATE NOCASE AS BLOB) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 LEFT OUTER JOIN vt1 ON ((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))||(((vt1.c0) ISNULL))) WHERE (((NULLIF(rt0.c3, rt0.c0)) BETWEEN (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 WHEN vt1.c0 THEN 0X358995e6 END) AND ((~ (rt0.c3))))) ORDER BY ((CAST(vt1.c0 AS REAL))-(((((rt0.c1)AND(vt1.c0)))AND(rt0.c1)))) DESC, (NOT (CAST(vt1.c0 AS BLOB)));
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE (CAST(rt0.c1 AS NUMERIC)) ORDER BY x'' ASC  NULLS FIRST, (('') NOT BETWEEN (((rt0.c2)<(vt1.c0))) AND (((rt0.c0)IS NOT(NULL)))) ASC, ((((((((((rt0.c1)LIKE('829864643')))AND(rt0.c2)))AND(TYPEOF(vt1.c0))))AND(((rt0.c1) NOTNULL))))OR(CAST(rt0.c2 AS TEXT)));
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (CAST(rt0.c1 AS NUMERIC)) ORDER BY x'' ASC  NULLS FIRST, (('') NOT BETWEEN (((rt0.c2)<(vt1.c0))) AND (((rt0.c0)IS NOT(NULL)))) ASC, ((((((((((rt0.c1)LIKE('829864643')))AND(rt0.c2)))AND(TYPEOF(vt1.c0))))AND(((rt0.c1) NOTNULL))))OR(CAST(rt0.c2 AS TEXT))) LIMIT 0;
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE (CAST(((((((((rt0.c2)AND(rt0.c2)))AND(rt0.c2)))OR('455756160')))OR(rt0.c2)) AS INTEGER));
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (((CAST(((((((((rt0.c2)AND(rt0.c2)))AND(rt0.c2)))OR('455756160')))OR(rt0.c2)) AS INTEGER))AND(rt0.c1))) LIMIT 0 INTERSECT SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE ((((x'', JULIANDAY(rt0.c3, vt1.c0, vt1.c0, rt0.c1)))>=((((NULL) IS FALSE), ((((((rt0.c2)OR(rt0.c0)))AND(vt1.c0)))AND(rt0.c0)))))) LIMIT 0X0;
SELECT COUNT(*) FROM vt1 WHERE ((vt1.c0 IN (NULL, ((vt1.c0)||(vt1.c0)))));
SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN (NULL, ((vt1.c0)||(vt1.c0)))))AND(((((((vt1.c0)OR(vt1.c0)))OR(CAST('S' AS BLOB))))AND(vt1.c0))))) INTERSECT SELECT COUNT(*) FROM vt1 WHERE ((((((((vt1.c0 IN ()))OR(LTRIM(0.6251736134456705))))OR((vt1.c0 IN (vt1.c0)))))OR('1304629726')));
SELECT ALL * FROM rt0, vt1 WHERE ((+ (CASE rt0.c2  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 ELSE vt1.c0 END))) ORDER BY 0.08600924178474179  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE ((((+ (CASE rt0.c2  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 ELSE vt1.c0 END)))AND(((rt0.c3)IS(rt0.c2)) COLLATE RTRIM))) ORDER BY 0.08600924178474179  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((+ (CASE rt0.c2  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 ELSE vt1.c0 END))) ORDER BY 0.08600924178474179  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE ((((+ (CASE rt0.c2  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 ELSE vt1.c0 END)))AND(((rt0.c3)IS(rt0.c2)) COLLATE RTRIM))) ORDER BY 0.08600924178474179  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((((((CAST('0.544233763561105' AS NUMERIC))OR((vt1.c0 IN (vt1.c0, '3508589')))))AND(x'4b')))OR(vt1.c0)))OR(((vt1.c0)IS NOT(vt1.c0))))) ORDER BY ((((vt1.c0) NOT NULL)) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))), ((((vt1.c0)<=(vt1.c0)))IS(((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))) DESC;
SELECT * FROM vt1 WHERE (((((((((CAST('0.544233763561105' AS NUMERIC))OR((vt1.c0 IN (vt1.c0, '3508589')))))AND(x'4b')))OR(vt1.c0)))OR(((vt1.c0)IS NOT(vt1.c0))))) ORDER BY (((~ (vt1.c0))) NOT NULL), ((vt1.c0 COLLATE NOCASE)&(CASE WHEN 'p' THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1 WHERE (((((((((CAST('0.544233763561105' AS NUMERIC))OR((vt1.c0 IN (vt1.c0, '3508589')))))AND(x'4b')))OR(vt1.c0)))OR(((vt1.c0)IS NOT(vt1.c0))))) ORDER BY ((((vt1.c0) NOT NULL)) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))), ((((vt1.c0)<=(vt1.c0)))IS(((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))) DESC;
SELECT * FROM vt1 WHERE (((((((((CAST('0.544233763561105' AS NUMERIC))OR((vt1.c0 IN (vt1.c0, '3508589')))))AND(x'4b')))OR(vt1.c0)))OR(((vt1.c0)IS NOT(vt1.c0))))) ORDER BY (((~ (vt1.c0))) NOT NULL), ((vt1.c0 COLLATE NOCASE)&(CASE WHEN 'p' THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE ((((+ (x'd1')))|(rt0.c3 COLLATE NOCASE)));
SELECT ALL * FROM vt1, rt0 WHERE ((((+ (x'd1')))|(rt0.c3 COLLATE NOCASE))) ORDER BY CASE (((rt0.c2, rt0.c2))>=((rt0.c1, '^RqGy16B')))  WHEN rt0.c2 THEN rt0.c0 WHEN ((((((rt0.c2)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c2)) THEN ((rt0.c0) ISNULL) ELSE 0xffffffff9454e6f8 END ASC LIMIT 0X0;
SELECT ALL * FROM vt1, rt0 WHERE ((((+ (x'd1')))|(rt0.c3 COLLATE NOCASE)));
SELECT ALL * FROM vt1, rt0 WHERE ((((+ (x'd1')))|(rt0.c3 COLLATE NOCASE))) ORDER BY CASE (((rt0.c2, rt0.c2))>=((rt0.c1, '^RqGy16B')))  WHEN rt0.c2 THEN rt0.c0 WHEN ((((((rt0.c2)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c2)) THEN ((rt0.c0) ISNULL) ELSE 0xffffffff9454e6f8 END ASC LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)>(vt1.c0)) IN ((vt1.c0 IN (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)>(vt1.c0)) IN ((vt1.c0 IN (vt1.c0)))))AND(((((NULLIF(vt1.c0, 'p|'))OR(' ]㰷ZmcT')))OR(vt1.c0 COLLATE NOCASE))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0, 0X55664c43)) BETWEEN (((+ (vt1.c0)), vt1.c0 COLLATE NOCASE)) AND ((((vt1.c0) NOT NULL), COALESCE(NULL, vt1.c0)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)>(vt1.c0)) IN ((vt1.c0 IN (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)>(vt1.c0)) IN ((vt1.c0 IN (vt1.c0)))))AND(((((NULLIF(vt1.c0, 'p|'))OR(' ]㰷ZmcT')))OR(vt1.c0 COLLATE NOCASE))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0, 0X55664c43)) BETWEEN (((+ (vt1.c0)), vt1.c0 COLLATE NOCASE)) AND ((((vt1.c0) NOT NULL), COALESCE(NULL, vt1.c0)))));
SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(((0.3509415580921007)*(x'effa')) AS BLOB)) ORDER BY CAST(vt1.c0 AS REAL), NULL ASC;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CAST(((0.3509415580921007)*(x'effa')) AS BLOB)) ORDER BY CAST(vt1.c0 AS REAL), NULL ASC;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((vt1.c0 IN ()) IN ((((0.8983794688940719)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c0))))) WHERE (vt1.c0);
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((vt1.c0 IN ()) IN ((((0.8983794688940719)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c0))))) WHERE (((vt1.c0)AND(CAST(((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c2)) AS TEXT)))) ORDER BY ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 ELSE NULL END)AND(vt1.c0 COLLATE BINARY))  NULLS LAST LIMIT 1;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((vt1.c0 IN ()) IN ((((0.8983794688940719)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c0))))) WHERE (vt1.c0);
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((vt1.c0 IN ()) IN ((((0.8983794688940719)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c0))))) WHERE (((vt1.c0)AND(CAST(((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c2)) AS TEXT)))) ORDER BY ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 ELSE NULL END)AND(vt1.c0 COLLATE BINARY))  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND((NOT (((914204917) BETWEEN (vt1.c0) AND (vt1.c0))))))) ORDER BY ((CAST(vt1.c0 AS BLOB)) ISNULL) ASC LIMIT 3 INTERSECT SELECT * FROM vt1 WHERE (((((((((((((((vt1.c0) IS TRUE))OR(0.5015741141374638)))AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(CAST(vt1.c0 AS TEXT))))AND(('-1911405098' IN ()))))OR(((((((vt1.c0)AND(0.28273084529653514)))AND(vt1.c0)))OR(vt1.c0)))))OR((((vt1.c0, 0.18481683851330044))<((vt1.c0, vt1.c0)))))) ORDER BY ((CAST(vt1.c0 AS BLOB)) ISNULL) ASC LIMIT 0x3;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND((NOT (((914204917) BETWEEN (vt1.c0) AND (vt1.c0))))))) ORDER BY ((CAST(vt1.c0 AS BLOB)) ISNULL) ASC LIMIT 3 INTERSECT SELECT * FROM vt1 WHERE (((((((((((((((vt1.c0) IS TRUE))OR(0.5015741141374638)))AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(CAST(vt1.c0 AS TEXT))))AND(('-1911405098' IN ()))))OR(((((((vt1.c0)AND(0.28273084529653514)))AND(vt1.c0)))OR(vt1.c0)))))OR((((vt1.c0, 0.18481683851330044))<((vt1.c0, vt1.c0)))))) ORDER BY ((CAST(vt1.c0 AS BLOB)) ISNULL) ASC LIMIT 0x3;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE ((CAST(rt0.c2 AS NUMERIC) IN ())) ORDER BY (HEX(rt0.c0) IN (rt0.c0 COLLATE BINARY, (((rt0.c3)) BETWEEN ((rt0.c0)) AND ((rt0.c3))))), ((rt0.c1)>>(rt0.c3)) COLLATE BINARY  NULLS FIRST;
SELECT MIN(rt0.c0) FROM rt0 WHERE ((CAST(rt0.c2 AS NUMERIC) IN ())) ORDER BY ((((rt0.c3) NOT NULL))>(CASE WHEN rt0.c3 THEN rt0.c0 END)) ASC  NULLS FIRST INTERSECT SELECT ALL MIN(rt0.c0) FROM rt0 WHERE ((rt0.c0 IN (rt0.c1)) COLLATE RTRIM) ORDER BY ((((rt0.c3) NOT NULL))>(CASE WHEN rt0.c3 THEN rt0.c0 END)) ASC  NULLS FIRST;
SELECT ALL MAX(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON ((CHAR(rt0.c3))>(((rt0.c1) IS FALSE))) WHERE (CASE WHEN rt0.c2 THEN ((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c2)) ELSE (NOT (rt0.c0)) END) ORDER BY (((+ (rt0.c1))) IS FALSE)  NULLS FIRST, ((((rt0.c2)>>(rt0.c0))) NOTNULL) DESC;
SELECT DISTINCT MAX(rt0.c2) FROM vt1 INNER JOIN rt0 ON ((CHAR(rt0.c3))>(((rt0.c1) IS FALSE))) WHERE (((CASE WHEN rt0.c2 THEN ((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c2)) ELSE (NOT (rt0.c0)) END)AND(CASE MIN(rt0.c2, rt0.c2, rt0.c0)  WHEN (('-1469812196') BETWEEN (vt1.c0) AND (rt0.c2)) THEN rt0.c1 WHEN ((rt0.c2)IS NOT(rt0.c2)) THEN ((rt0.c1) NOT NULL) WHEN CASE vt1.c0  WHEN NULL THEN 0xffffffff93f3c9f6 END THEN vt1.c0 WHEN rt0.c2 COLLATE RTRIM THEN rt0.c1 WHEN ((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)) THEN ((((rt0.c2)OR(rt0.c2)))OR(rt0.c1)) WHEN rt0.c1 COLLATE NOCASE THEN (rt0.c0 IN (rt0.c3)) WHEN CASE 0x2f1196e1  WHEN vt1.c0 THEN rt0.c2 END THEN (- (rt0.c0)) ELSE ((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c1)) END))) ORDER BY CAST(CAST(rt0.c0 AS REAL) AS BLOB) DESC  NULLS LAST, ABS((~ (vt1.c0))) ASC LIMIT 1 INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM vt1 INNER JOIN rt0 ON ((CHAR(rt0.c3))>(((rt0.c1) IS FALSE))) WHERE (((CASE WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN x'97fe' END)>=(((vt1.c0)+(rt0.c3))))) ORDER BY CAST(CAST(rt0.c0 AS REAL) AS BLOB) DESC  NULLS LAST, ABS((~ (vt1.c0))) ASC LIMIT 1;
SELECT COUNT(*) FROM rt0, vt1 WHERE (('*' IN (rt0.c3 COLLATE BINARY))) ORDER BY rt0.c1 DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((('*' IN (rt0.c3 COLLATE BINARY)))AND(((rt0.c0 COLLATE RTRIM)/(rt0.c2))))) ORDER BY rt0.c1 DESC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (CAST(((rt0.c3)<<(rt0.c0)) AS INTEGER)) ORDER BY rt0.c1 DESC  NULLS FIRST LIMIT 1;
SELECT * FROM vt1 WHERE (((((vt1.c0 IN ()), ((NULL)&(vt1.c0)), (vt1.c0 IN ()), (~ (vt1.c0))))>=((((0.40284733324829125)AND(vt1.c0)), CAST(vt1.c0 AS REAL), (- (vt1.c0)), 'dhVsP*['))));
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0 IN ()), ((NULL)&(vt1.c0)), (vt1.c0 IN ()), (~ (vt1.c0))))>=((((0.40284733324829125)AND(vt1.c0)), CAST(vt1.c0 AS REAL), (- (vt1.c0)), 'dhVsP*[')))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ()))<=(LIKELY(DISTINCT vt1.c0))));
SELECT * FROM vt1 WHERE (((((vt1.c0 IN ()), ((NULL)&(vt1.c0)), (vt1.c0 IN ()), (~ (vt1.c0))))>=((((0.40284733324829125)AND(vt1.c0)), CAST(vt1.c0 AS REAL), (- (vt1.c0)), 'dhVsP*['))));
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0 IN ()), ((NULL)&(vt1.c0)), (vt1.c0 IN ()), (~ (vt1.c0))))>=((((0.40284733324829125)AND(vt1.c0)), CAST(vt1.c0 AS REAL), (- (vt1.c0)), 'dhVsP*[')))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ()))<=(LIKELY(DISTINCT vt1.c0))));
SELECT * FROM rt0 WHERE (CASE ((rt0.c0)IS NOT(rt0.c1))  WHEN (rt0.c1 IN ()) THEN CAST(rt0.c1 AS REAL) WHEN ((rt0.c3)==(x'')) THEN ((rt0.c2)||('Zl')) END);
SELECT DISTINCT * FROM rt0 WHERE (((CASE ((rt0.c0)IS NOT(rt0.c1))  WHEN (rt0.c1 IN ()) THEN CAST(rt0.c1 AS REAL) WHEN ((rt0.c3)==(x'')) THEN ((rt0.c2)||('Zl')) END)AND(((-1851481301)IS NOT(0.7654783778594165)) COLLATE BINARY COLLATE RTRIM))) LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c0) NOT NULL)) NOT BETWEEN (CASE WHEN rt0.c0 THEN rt0.c3 WHEN NULL THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c1 END) AND ((rt0.c1 IN (rt0.c0))))) LIMIT 0X3;
SELECT * FROM rt0 WHERE (CASE ((rt0.c0)IS NOT(rt0.c1))  WHEN (rt0.c1 IN ()) THEN CAST(rt0.c1 AS REAL) WHEN ((rt0.c3)==(x'')) THEN ((rt0.c2)||('Zl')) END);
SELECT DISTINCT * FROM rt0 WHERE (((CASE ((rt0.c0)IS NOT(rt0.c1))  WHEN (rt0.c1 IN ()) THEN CAST(rt0.c1 AS REAL) WHEN ((rt0.c3)==(x'')) THEN ((rt0.c2)||('Zl')) END)AND(((-1851481301)IS NOT(0.7654783778594165)) COLLATE BINARY COLLATE RTRIM))) LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c0) NOT NULL)) NOT BETWEEN (CASE WHEN rt0.c0 THEN rt0.c3 WHEN NULL THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c1 END) AND ((rt0.c1 IN (rt0.c0))))) LIMIT 0X3;
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE (((((vt1.c0, vt1.c0, rt0.c0, vt1.c0)) BETWEEN ((rt0.c0, vt1.c0, rt0.c2, rt0.c3)) AND ((rt0.c2, rt0.c1, rt0.c1, rt0.c1))) IN (((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3)), ((rt0.c3)<(rt0.c1)), rt0.c0)));
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((((vt1.c0, vt1.c0, rt0.c0, vt1.c0)) BETWEEN ((rt0.c0, vt1.c0, rt0.c2, rt0.c3)) AND ((rt0.c2, rt0.c1, rt0.c1, rt0.c1))) IN (((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3)), ((rt0.c3)<(rt0.c1)), rt0.c0)))AND(((x'' IN (vt1.c0, rt0.c3)) IN (CAST(rt0.c1 AS NUMERIC)))))) ORDER BY (- (rt0.c3))  NULLS FIRST, CAST((rt0.c0 IN ()) AS INTEGER)  NULLS LAST INTERSECT SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE ((((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1)))) IS TRUE)) ORDER BY (- (rt0.c3))  NULLS FIRST, CAST((rt0.c0 IN ()) AS INTEGER)  NULLS LAST;
SELECT COUNT(*) FROM rt0 WHERE (CASE (rt0.c1 IN (rt0.c0, rt0.c2))  WHEN ((rt0.c1)||(rt0.c1)) THEN (~ (rt0.c1)) WHEN CAST(rt0.c0 AS TEXT) THEN (- (rt0.c0)) ELSE CAST(-953967572 AS BLOB) END) ORDER BY (((x'a2')) BETWEEN ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c0)))) AND ((CAST(rt0.c3 AS TEXT)))) DESC;
SELECT ALL COUNT(*) FROM rt0 WHERE (((CASE (rt0.c1 IN (rt0.c0, rt0.c2))  WHEN ((rt0.c1)||(rt0.c1)) THEN (~ (rt0.c1)) WHEN CAST(rt0.c0 AS TEXT) THEN (- (rt0.c0)) ELSE CAST(-953967572 AS BLOB) END)AND(((((((CASE WHEN NULL THEN rt0.c1 END)OR(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END)))OR((((rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c0, rt0.c1))))))OR(((rt0.c3)!=(rt0.c3))))))) ORDER BY (((x'a2')) BETWEEN ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c0)))) AND ((CAST(rt0.c3 AS TEXT)))) DESC LIMIT 1;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '0.3206640652508097' WHEN '0.04157587481795155' THEN vt1.c0 END))) ORDER BY CAST(CAST(vt1.c0 AS REAL) AS TEXT) ASC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '0.3206640652508097' WHEN '0.04157587481795155' THEN vt1.c0 END))) ORDER BY ((((vt1.c0)|(vt1.c0)))AND(((('830243475', vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))) DESC, LIKELY(DISTINCT -1.16899011E8 COLLATE NOCASE)  NULLS FIRST, CASE WHEN ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0)AND(vt1.c0)) WHEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND('')))OR(vt1.c0)) THEN ((vt1.c0) NOT NULL) END INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER)) NOT BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (vt1.c0 COLLATE BINARY))) ORDER BY ((((vt1.c0)|(vt1.c0)))AND(((('830243475', vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))) DESC, LIKELY(DISTINCT -1.16899011E8 COLLATE NOCASE)  NULLS FIRST, CASE WHEN ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) THEN ((vt1.c0)AND(vt1.c0)) WHEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND('')))OR(vt1.c0)) THEN ((vt1.c0) NOT NULL) END;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (json_insert(vt1.c0, CAST(rt0.c2 AS REAL), ((vt1.c0)||(vt1.c0)), CAST(rt0.c2 AS BLOB), (vt1.c0 IN (rt0.c0))));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((json_insert(vt1.c0, CAST(rt0.c2 AS REAL), ((vt1.c0)||(vt1.c0)), CAST(rt0.c2 AS BLOB), (vt1.c0 IN (rt0.c0))))AND(SQLITE_SOURCE_ID()))) ORDER BY (- (((rt0.c0)<>(-2050586187))));
SELECT ALL * FROM vt1 WHERE ((ABS(vt1.c0) IN ()));
SELECT ALL * FROM vt1 WHERE ((ABS(vt1.c0) IN ())) ORDER BY ((vt1.c0) BETWEEN (json_array_length(vt1.c0)) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))) INTERSECT SELECT ALL * FROM vt1 WHERE (((0.6983834951978702)>=((~ (vt1.c0))))) ORDER BY ((vt1.c0) BETWEEN (json_array_length(vt1.c0)) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))));
SELECT ALL * FROM vt1 WHERE ((ABS(vt1.c0) IN ()));
SELECT ALL * FROM vt1 WHERE ((ABS(vt1.c0) IN ())) ORDER BY ((vt1.c0) BETWEEN (json_array_length(vt1.c0)) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))) INTERSECT SELECT ALL * FROM vt1 WHERE (((0.6983834951978702)>=((~ (vt1.c0))))) ORDER BY ((vt1.c0) BETWEEN (json_array_length(vt1.c0)) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))));
SELECT ALL * FROM vt1, rt0 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((vt1.c0)AND(((((((((x'd2')AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c0)))GLOB(((((((rt0.c0)OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1))))))) ORDER BY ((((rt0.c2)IS(rt0.c2)))AND(NULLIF(DISTINCT rt0.c2, vt1.c0))) ASC;
SELECT ALL * FROM vt1, rt0 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((vt1.c0)AND(((((((((x'd2')AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c0)))GLOB(((((((rt0.c0)OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1))))))) ORDER BY ((((rt0.c2)IS(rt0.c2)))AND(NULLIF(DISTINCT rt0.c2, vt1.c0))) ASC;
SELECT COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS BLOB))>(((vt1.c0)!=(vt1.c0)))));
SELECT ALL COUNT(*) FROM vt1 WHERE (((((CAST(vt1.c0 AS BLOB))>(((vt1.c0)>(vt1.c0)))))AND(x'a9')));
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (x'ee');
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE (((x'ee')AND(((((((rt0.c2) BETWEEN (rt0.c2) AND (vt1.c0)))OR(CASE WHEN rt0.c0 THEN rt0.c2 ELSE '-2041558609' END)))OR(((((((((((rt0.c2)OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(vt1.c0)))OR(rt0.c2)))))));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((((CAST(NULL AS NUMERIC))OR((NOT (rt0.c0)))))OR(((((((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c2)))OR(rt0.c3)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))))) ORDER BY (rt0.c3 IN ((~ (rt0.c0)), ((rt0.c0) NOTNULL))), CASE ((((rt0.c0)AND(rt0.c3)))AND(rt0.c2))  WHEN (((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c3))) THEN ((((((((rt0.c3)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c0)))OR(rt0.c2)) ELSE CAST(rt0.c1 AS REAL) END;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((((((CAST(NULL AS NUMERIC))OR((NOT (rt0.c0)))))OR(((((((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c2)))OR(rt0.c3)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND(x'' COLLATE BINARY COLLATE RTRIM))) ORDER BY ((('umonthsa' IN ()))!=(rt0.c0)) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))||(((vt1.c0) IS TRUE)))) ORDER BY IFNULL(DISTINCT (~ (vt1.c0)), x'b3'), ((((((((((((vt1.c0)OR('*V')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)) ASC;
SELECT * FROM vt1 WHERE ((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))||(((vt1.c0) IS TRUE)))) ORDER BY IFNULL(DISTINCT (~ (vt1.c0)), x'b3'), ((((((((((((vt1.c0)OR('*V')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)) ASC INTERSECT SELECT * FROM vt1 WHERE (0.954165875477459) ORDER BY IFNULL(DISTINCT (~ (vt1.c0)), x'b3'), ((((((((((((vt1.c0)OR('*V')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)) ASC;
SELECT * FROM vt1 WHERE ((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))||(((vt1.c0) IS TRUE)))) ORDER BY IFNULL(DISTINCT (~ (vt1.c0)), x'b3'), ((((((((((((vt1.c0)OR('*V')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)) ASC;
SELECT * FROM vt1 WHERE ((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))||(((vt1.c0) IS TRUE)))) ORDER BY IFNULL(DISTINCT (~ (vt1.c0)), x'b3'), ((((((((((((vt1.c0)OR('*V')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)) ASC INTERSECT SELECT * FROM vt1 WHERE (0.954165875477459) ORDER BY IFNULL(DISTINCT (~ (vt1.c0)), x'b3'), ((((((((((((vt1.c0)OR('*V')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(CASE vt1.c0  WHEN x'' THEN vt1.c0 END)) ASC;
SELECT ALL * FROM rt0, vt1 WHERE ((((~ (rt0.c3))) NOT BETWEEN (((((rt0.c0)OR(rt0.c3)))AND(rt0.c3))) AND ((+ (rt0.c3))))) ORDER BY rt0.c1  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((~ (rt0.c3))) NOT BETWEEN (((((rt0.c0)OR(rt0.c3)))AND(rt0.c3))) AND ((+ (rt0.c3))))) ORDER BY rt0.c1  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((-1623236005)AND((rt0.c1 IN (vt1.c0)))))OR(NULLIF(DISTINCT rt0.c3, rt0.c2))))OR(((rt0.c2)IS(rt0.c1))))) ORDER BY rt0.c1  NULLS LAST LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE ((((~ (rt0.c3))) NOT BETWEEN (((((rt0.c0)OR(rt0.c3)))AND(rt0.c3))) AND ((+ (rt0.c3))))) ORDER BY rt0.c1  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((~ (rt0.c3))) NOT BETWEEN (((((rt0.c0)OR(rt0.c3)))AND(rt0.c3))) AND ((+ (rt0.c3))))) ORDER BY rt0.c1  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((-1623236005)AND((rt0.c1 IN (vt1.c0)))))OR(NULLIF(DISTINCT rt0.c3, rt0.c2))))OR(((rt0.c2)IS(rt0.c1))))) ORDER BY rt0.c1  NULLS LAST LIMIT 1;
SELECT ALL MAX(rt0.c2) FROM vt1, rt0 WHERE ((CAST(rt0.c1 AS TEXT) IN ()));
SELECT DISTINCT MAX(rt0.c2) FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS TEXT) IN ()))AND((((((vt1.c0, rt0.c2, rt0.c0))<((rt0.c1, vt1.c0, rt0.c0))))<=(vt1.c0 COLLATE RTRIM))))) ORDER BY UPPER(NULL COLLATE NOCASE)  NULLS FIRST, (((rt0.c1)) NOT BETWEEN (((rt0.c1 IN (rt0.c3)))) AND ((rt0.c3 COLLATE RTRIM))) ASC  NULLS LAST, (~ (UNLIKELY(rt0.c2))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM vt1, rt0 WHERE ((((vt1.c0, vt1.c0)) BETWEEN ((((((rt0.c1)OR(rt0.c3)))OR(vt1.c0)), (- (rt0.c1)))) AND (((- (rt0.c2)), CAST(rt0.c3 AS REAL))))) ORDER BY UPPER(NULL COLLATE NOCASE)  NULLS FIRST, (((rt0.c1)) NOT BETWEEN (((rt0.c1 IN (rt0.c3)))) AND ((rt0.c3 COLLATE RTRIM))) ASC  NULLS LAST, (~ (UNLIKELY(rt0.c2))) DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE (((((vt1.c0)%(rt0.c1))) NOTNULL));
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE (((((vt1.c0)%(rt0.c1))) NOTNULL)) LIMIT 0x1 INTERSECT SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE ((((rt0.c1, rt0.c3)) BETWEEN ((((0Xffffffff89d6559a) ISNULL), ((((rt0.c2)OR(rt0.c1)))AND(rt0.c2)))) AND ((((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c1)), LIKELIHOOD(rt0.c2, rt0.c2))))) LIMIT 0X1;
SELECT ALL COUNT(*) FROM rt0 WHERE (((((((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)))OR(json_object(rt0.c3, rt0.c3, rt0.c3))))OR(CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c3 END)))AND((('-1127236167')==(rt0.c1))))) ORDER BY ((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c0)))OR(348597392))) ISNULL)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((((((((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)))OR(json_object(rt0.c3, rt0.c3, rt0.c3))))OR(CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c3 END)))AND((('-1127236167')==(rt0.c1)))))AND(HEX((~ (rt0.c2)))))) ORDER BY ' V' COLLATE RTRIM INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((rt0.c1, 0X309cf81a, 0.9273801907456247, NULL)) NOT BETWEEN (((~ (rt0.c2)), NULL, rt0.c3, ((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))) AND (('3508589', '*՚)D粹v', (((rt0.c1, rt0.c3))=((rt0.c1, rt0.c3))), CASE WHEN 'L''Ky' THEN rt0.c2 ELSE rt0.c3 END)))) ORDER BY ' V' COLLATE RTRIM;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (x'') ORDER BY ((((((rt0.c3 COLLATE NOCASE)AND((((rt0.c1, rt0.c2, rt0.c1, rt0.c0))<=((rt0.c3, vt1.c0, rt0.c1, rt0.c3))))))OR(rt0.c2)))OR(rt0.c0))  NULLS LAST, ((((((((((((((rt0.c1)OR(rt0.c1)))AND(rt0.c1)))OR((NOT (rt0.c2)))))AND(CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c0 END)))OR((+ (rt0.c3)))))OR(((rt0.c0)&(vt1.c0)))))AND((rt0.c1 IN ()))) ASC  NULLS FIRST;
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (x'') ORDER BY ((((((rt0.c3 COLLATE NOCASE)AND((((rt0.c1, rt0.c2, rt0.c1, rt0.c0))<=((rt0.c3, vt1.c0, rt0.c1, rt0.c3))))))OR(rt0.c2)))OR(rt0.c0))  NULLS LAST, ((((((((((((((rt0.c1)OR(rt0.c1)))AND(rt0.c1)))OR((NOT (rt0.c2)))))AND(CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c0 END)))OR((+ (rt0.c3)))))OR(((rt0.c0)&(vt1.c0)))))AND((rt0.c1 IN ()))) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((((rt0.c0)OR(rt0.c1)))AND(x'')) IN ()));
SELECT COUNT(*) FROM vt1, rt0 WHERE ((((((rt0.c0)OR(rt0.c1)))AND(x'')) IN ())) LIMIT 2;
SELECT ALL * FROM vt1 WHERE (((vt1.c0 IN (vt1.c0)) IN ()));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 IN (vt1.c0)) IN ())) LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE (((vt1.c0 IN (vt1.c0)) IN ()));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 IN (vt1.c0)) IN ())) LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c3)*(rt0.c0)) IN (rt0.c3))) ORDER BY (((rt0.c3 IN (rt0.c2))) NOTNULL), (((vt1.c0)) NOT BETWEEN ((STRFTIME(rt0.c3, vt1.c0, rt0.c3, rt0.c2))) AND ((((rt0.c3) BETWEEN (rt0.c0) AND (vt1.c0))))) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c3)*(rt0.c0)) IN (rt0.c3))) ORDER BY ((((rt0.c2) ISNULL)) NOT BETWEEN (((vt1.c0)|(vt1.c0))) AND ((((rt0.c1, vt1.c0))<((rt0.c3, rt0.c1))))) DESC, CAST(((vt1.c0) NOT NULL) AS NUMERIC), (- (((((((rt0.c1)OR(vt1.c0)))AND(rt0.c1)))OR(rt0.c1))))  NULLS FIRST, ((rt0.c3 COLLATE BINARY)OR((~ (rt0.c3)))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c2) BETWEEN (CAST(vt1.c0 AS BLOB)) AND (vt1.c0 COLLATE RTRIM))) ORDER BY ((((rt0.c2) ISNULL)) NOT BETWEEN (((vt1.c0)|(vt1.c0))) AND ((((rt0.c1, vt1.c0))<((rt0.c3, rt0.c1))))) DESC, CAST(((vt1.c0) NOT NULL) AS NUMERIC), (- (((((((rt0.c1)OR(vt1.c0)))AND(rt0.c1)))OR(rt0.c1))))  NULLS FIRST, ((rt0.c3 COLLATE BINARY)OR((~ (rt0.c3)))) LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c3)*(rt0.c0)) IN (rt0.c3))) ORDER BY (((rt0.c3 IN (rt0.c2))) NOTNULL), (((vt1.c0)) NOT BETWEEN ((STRFTIME(rt0.c3, vt1.c0, rt0.c3, rt0.c2))) AND ((((rt0.c3) BETWEEN (rt0.c0) AND (vt1.c0))))) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c3)*(rt0.c0)) IN (rt0.c3))) ORDER BY ((((rt0.c2) ISNULL)) NOT BETWEEN (((vt1.c0)|(vt1.c0))) AND ((((rt0.c1, vt1.c0))<((rt0.c3, rt0.c1))))) DESC, CAST(((vt1.c0) NOT NULL) AS NUMERIC), (- (((((((rt0.c1)OR(vt1.c0)))AND(rt0.c1)))OR(rt0.c1))))  NULLS FIRST, ((rt0.c3 COLLATE BINARY)OR((~ (rt0.c3)))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c2) BETWEEN (CAST(vt1.c0 AS BLOB)) AND (vt1.c0 COLLATE RTRIM))) ORDER BY ((((rt0.c2) ISNULL)) NOT BETWEEN (((vt1.c0)|(vt1.c0))) AND ((((rt0.c1, vt1.c0))<((rt0.c3, rt0.c1))))) DESC, CAST(((vt1.c0) NOT NULL) AS NUMERIC), (- (((((((rt0.c1)OR(vt1.c0)))AND(rt0.c1)))OR(rt0.c1))))  NULLS FIRST, ((rt0.c3 COLLATE BINARY)OR((~ (rt0.c3)))) LIMIT 0X1;
SELECT MAX(rt0.c0) FROM rt0 WHERE ((((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c3)) IN ()));
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE ((((((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c3)) IN ()))AND((NOT ('55232972'))))) ORDER BY NULL;
SELECT * FROM vt1 INNER JOIN rt0 ON CAST(((((((rt0.c0)AND(rt0.c1)))OR(NULL)))AND(rt0.c2)) AS NUMERIC) WHERE ((((((rt0.c1, rt0.c0))<((rt0.c1, rt0.c3))))<>(rt0.c3 COLLATE NOCASE))) ORDER BY CAST(((((((((rt0.c3)AND(rt0.c3)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0)) AS REAL), (((((((((rt0.c3)AND(rt0.c3)))AND(vt1.c0)))AND(rt0.c0)))OR(rt0.c3)) IN ()) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CAST(((((((rt0.c0)AND(rt0.c1)))OR(NULL)))AND(rt0.c2)) AS NUMERIC) WHERE ((((((((rt0.c1, rt0.c0))<((rt0.c1, rt0.c3))))>(rt0.c3 COLLATE NOCASE)))AND(CAST(CAST(rt0.c2 AS BLOB) AS REAL)))) ORDER BY CAST(((((((((rt0.c3)AND(rt0.c3)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0)) AS REAL), (((((((((rt0.c3)AND(rt0.c3)))AND(vt1.c0)))AND(rt0.c0)))OR(rt0.c3)) IN ()) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CAST(((((((rt0.c0)AND(rt0.c1)))OR(NULL)))AND(rt0.c2)) AS NUMERIC) WHERE ((((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3)) IN (((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((rt0.c1) ISNULL), highlight(vt1.c0, rt0.c2, vt1.c0, rt0.c0)))) ORDER BY CAST(((((((((rt0.c3)AND(rt0.c3)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0)) AS REAL), (((((((((rt0.c3)AND(rt0.c3)))AND(vt1.c0)))AND(rt0.c0)))OR(rt0.c3)) IN ()) ASC  NULLS LAST;
SELECT * FROM vt1 INNER JOIN rt0 ON CAST(((((((rt0.c0)AND(rt0.c1)))OR(NULL)))AND(rt0.c2)) AS NUMERIC) WHERE ((((((rt0.c1, rt0.c0))<((rt0.c1, rt0.c3))))<>(rt0.c3 COLLATE NOCASE))) ORDER BY CAST(((((((((rt0.c3)AND(rt0.c3)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0)) AS REAL), (((((((((rt0.c3)AND(rt0.c3)))AND(vt1.c0)))AND(rt0.c0)))OR(rt0.c3)) IN ()) ASC  NULLS LAST;
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((rt0.c0)IS NOT(rt0.c2)))<=(((rt0.c2) NOT NULL)))) ORDER BY CAST(MIN(rt0.c2, vt1.c0, rt0.c0, rt0.c0, rt0.c2) AS BLOB) ASC;
SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((rt0.c0)IS NOT(rt0.c2)))<(((rt0.c2) NOT NULL)))) ORDER BY CASE WHEN ((vt1.c0)*(rt0.c0)) THEN ((vt1.c0)<<(rt0.c2)) WHEN rt0.c2 COLLATE BINARY THEN rt0.c1 WHEN (+ (rt0.c2)) THEN (rt0.c1 IN (rt0.c3)) ELSE x'' COLLATE RTRIM END DESC INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE ((((rt0.c1 COLLATE NOCASE, 0.8651559677560258))=((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c0 END, ((vt1.c0)||(rt0.c0)))))) ORDER BY CASE WHEN ((vt1.c0)*(rt0.c0)) THEN ((vt1.c0)<<(rt0.c2)) WHEN rt0.c2 COLLATE BINARY THEN rt0.c1 WHEN (+ (rt0.c2)) THEN (rt0.c1 IN (rt0.c3)) ELSE x'' COLLATE RTRIM END DESC;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE vt1.c0 END IN ()));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 ELSE vt1.c0 END IN ())) ORDER BY x'674d39' DESC, (((~ (vt1.c0)))*(((vt1.c0)<<(vt1.c0)))) ASC LIMIT 0X3;
SELECT * FROM vt1 WHERE ((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'6e23' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'WY+H~tY' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, ((vt1.c0) IS FALSE)))>=((vt1.c0, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'6e23' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'WY+H~tY' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, ((vt1.c0) IS FALSE)))>=((vt1.c0, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))))AND(ROUND(vt1.c0 COLLATE NOCASE, (vt1.c0 IN (vt1.c0, vt1.c0)))))) LIMIT 1;
SELECT * FROM vt1 WHERE ((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'6e23' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'WY+H~tY' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, ((vt1.c0) IS FALSE)))>=((vt1.c0, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'6e23' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'WY+H~tY' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, ((vt1.c0) IS FALSE)))>=((vt1.c0, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))))AND(ROUND(vt1.c0 COLLATE NOCASE, (vt1.c0 IN (vt1.c0, vt1.c0)))))) LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((0.6921664014269292)) NOT BETWEEN ((CAST(vt1.c0 AS INTEGER))) AND ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END))));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((0.6921664014269292)) NOT BETWEEN ((CAST(vt1.c0 AS INTEGER))) AND ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))) ORDER BY CASE (vt1.c0 IN (0.032065654398831245, 0.11711965063666085))  WHEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) THEN (vt1.c0 IN (vt1.c0)) WHEN ((0.3258354858559095)||(vt1.c0)) THEN ((x'd2') NOT NULL) END  NULLS FIRST LIMIT 3;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON ((0.804852360875129) IS TRUE) WHERE (((((rt0.c0)>>(rt0.c3)))!=(rt0.c2 COLLATE RTRIM))) ORDER BY ((- (rt0.c1)) IN ((((rt0.c1, NULL))>((vt1.c0, rt0.c1)))));
SELECT * FROM rt0 CROSS JOIN vt1 ON ((0.804852360875129) IS TRUE) WHERE (((((rt0.c0)>>(rt0.c3)))!=(rt0.c2 COLLATE RTRIM))) ORDER BY ((- (rt0.c1)) IN ((((rt0.c1, NULL))>((vt1.c0, rt0.c1))))) INTERSECT SELECT * FROM rt0 CROSS JOIN vt1 ON ((0.804852360875129) IS TRUE) WHERE (((((((((x'0a')AND(vt1.c0)))OR(SUBSTR(rt0.c1, vt1.c0))))OR(rt0.c1)))OR(vt1.c0))) ORDER BY ((- (rt0.c1)) IN ((((rt0.c1, NULL))>((vt1.c0, rt0.c1)))));
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON ((0.804852360875129) IS TRUE) WHERE (((((rt0.c0)>>(rt0.c3)))!=(rt0.c2 COLLATE RTRIM))) ORDER BY ((- (rt0.c1)) IN ((((rt0.c1, NULL))>((vt1.c0, rt0.c1)))));
SELECT * FROM rt0 CROSS JOIN vt1 ON ((0.804852360875129) IS TRUE) WHERE (((((rt0.c0)>>(rt0.c3)))!=(rt0.c2 COLLATE RTRIM))) ORDER BY ((- (rt0.c1)) IN ((((rt0.c1, NULL))>((vt1.c0, rt0.c1))))) INTERSECT SELECT * FROM rt0 CROSS JOIN vt1 ON ((0.804852360875129) IS TRUE) WHERE (((((((((x'0a')AND(vt1.c0)))OR(SUBSTR(rt0.c1, vt1.c0))))OR(rt0.c1)))OR(vt1.c0))) ORDER BY ((- (rt0.c1)) IN ((((rt0.c1, NULL))>((vt1.c0, rt0.c1)))));
SELECT * FROM rt0 WHERE (((((rt0.c3) IS FALSE)) NOT BETWEEN ((((rt0.c3, rt0.c0))>((rt0.c1, 0.4636220470083813)))) AND (NULL)));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3) IS FALSE)) NOT BETWEEN ((((rt0.c3, rt0.c0))>((rt0.c1, 0.4636220470083813)))) AND (NULL)))AND(((('2040673607'))>(((((rt0.c0))<((rt0.c3))))))))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((((((rt0.c1) ISNULL))OR((((rt0.c0))==((rt0.c0))))))AND(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))))OR(CASE WHEN rt0.c1 THEN -1.688611678E9 ELSE rt0.c2 END)))OR(0xffffffff9454e6f8)))OR((((rt0.c0, '0.5424920228405733', rt0.c1, rt0.c3, rt0.c1))>((rt0.c1, rt0.c1, rt0.c0, rt0.c2, rt0.c2)))))) LIMIT 0x0;
SELECT * FROM rt0 WHERE (((((rt0.c3) IS FALSE)) NOT BETWEEN ((((rt0.c3, rt0.c0))>((rt0.c1, 0.4636220470083813)))) AND (NULL)));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3) IS FALSE)) NOT BETWEEN ((((rt0.c3, rt0.c0))>((rt0.c1, 0.4636220470083813)))) AND (NULL)))AND(((('2040673607'))>(((((rt0.c0))<((rt0.c3))))))))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((((((rt0.c1) ISNULL))OR((((rt0.c0))==((rt0.c0))))))AND(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))))OR(CASE WHEN rt0.c1 THEN -1.688611678E9 ELSE rt0.c2 END)))OR(0xffffffff9454e6f8)))OR((((rt0.c0, '0.5424920228405733', rt0.c1, rt0.c3, rt0.c1))>((rt0.c1, rt0.c1, rt0.c0, rt0.c2, rt0.c2)))))) LIMIT 0x0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((+ (vt1.c0))) IS TRUE)) ORDER BY ('&S' IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST, ((CAST('唗' AS NUMERIC))>(x'bc60b9')) DESC;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((+ (vt1.c0))) IS TRUE)) ORDER BY ('&S' IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST, ((CAST('唗' AS NUMERIC))>(x'bc60b9')) DESC;
SELECT COUNT(*) FROM rt0 WHERE ((~ (rt0.c2)));
SELECT COUNT(*) FROM rt0 WHERE ((~ (rt0.c2))) ORDER BY IFNULL(LTRIM('\zN|', x'6a0f'), rt0.c3)  NULLS FIRST, (((((rt0.c1 IN (rt0.c0)))AND(rt0.c2 COLLATE BINARY)))AND((((rt0.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))))) LIMIT 0 INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE (rt0.c1) ORDER BY IFNULL(LTRIM('\zN|', x'6a0f'), rt0.c3)  NULLS FIRST, (((((rt0.c1 IN (rt0.c0)))AND(rt0.c2 COLLATE BINARY)))AND((((rt0.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))))) LIMIT 0;
SELECT COUNT(*) FROM rt0 WHERE ((((rt0.c0, rt0.c0)) NOT BETWEEN ((((rt0.c2)LIKE(rt0.c2)), rt0.c0 COLLATE RTRIM)) AND ((CAST(rt0.c3 AS BLOB), (NOT (rt0.c2)))))) ORDER BY ((rt0.c3)|((+ (NULL))));
SELECT COUNT(*) FROM rt0 WHERE ((((rt0.c0, rt0.c0)) NOT BETWEEN ((((rt0.c2)LIKE(rt0.c2)), rt0.c0 COLLATE RTRIM)) AND ((CAST(rt0.c3 AS BLOB), (NOT (rt0.c2)))))) ORDER BY ((((rt0.c0)<<(rt0.c0))) IS TRUE) DESC, CAST(CAST(rt0.c1 AS INTEGER) AS TEXT) DESC  NULLS LAST, (SUBSTR(rt0.c0, rt0.c2) IN (((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3)), ((('(', rt0.c0)) BETWEEN ((rt0.c0, rt0.c1)) AND ((rt0.c3, rt0.c3))))) LIMIT 1 INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE (((((((((((((rt0.c0)OR(rt0.c3)))AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c3)))%(((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1))))) ORDER BY ((((rt0.c0)<<(rt0.c0))) IS TRUE) DESC, CAST(CAST(rt0.c1 AS INTEGER) AS TEXT) DESC  NULLS LAST, (SUBSTR(rt0.c0, rt0.c2) IN (((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3)), ((('(', rt0.c0)) BETWEEN ((rt0.c0, rt0.c1)) AND ((rt0.c3, rt0.c3))))) LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (IFNULL(DISTINCT CAST(rt0.c3 AS TEXT), (- (rt0.c1)))) ORDER BY ((rt0.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)) COLLATE NOCASE;
SELECT * FROM vt1, rt0 WHERE (((IFNULL(DISTINCT CAST(rt0.c3 AS TEXT), (- (rt0.c1))))AND((((rt0.c3 IN (rt0.c0)))IS(TYPEOF(DISTINCT 0.75568031718035)))))) ORDER BY TYPEOF(DISTINCT ((rt0.c3)<(rt0.c0))) DESC  NULLS LAST, (((rt0.c2) IS FALSE) IN ((~ (rt0.c2)))) DESC INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c1 AS NUMERIC)) ORDER BY TYPEOF(DISTINCT ((rt0.c3)<(rt0.c0))) DESC  NULLS LAST, (((rt0.c2) IS FALSE) IN ((~ (rt0.c2)))) DESC;
SELECT * FROM vt1, rt0 WHERE (IFNULL(DISTINCT CAST(rt0.c3 AS TEXT), (- (rt0.c1)))) ORDER BY ((rt0.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)) COLLATE NOCASE;
SELECT * FROM vt1, rt0 WHERE (((IFNULL(DISTINCT CAST(rt0.c3 AS TEXT), (- (rt0.c1))))AND((((rt0.c3 IN (rt0.c0)))IS(TYPEOF(DISTINCT 0.75568031718035)))))) ORDER BY TYPEOF(DISTINCT ((rt0.c3)<(rt0.c0))) DESC  NULLS LAST, (((rt0.c2) IS FALSE) IN ((~ (rt0.c2)))) DESC INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c1 AS NUMERIC)) ORDER BY TYPEOF(DISTINCT ((rt0.c3)<(rt0.c0))) DESC  NULLS LAST, (((rt0.c2) IS FALSE) IN ((~ (rt0.c2)))) DESC;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE ((((((vt1.c0, rt0.c2, rt0.c3))<>((vt1.c0, vt1.c0, rt0.c3))))IS((((rt0.c1, '0.47544679518541666')) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c1, rt0.c2))))));
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE ((((((((vt1.c0, rt0.c2, rt0.c3))<((vt1.c0, vt1.c0, rt0.c3))))IS((((rt0.c1, '0.47544679518541666')) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c1, rt0.c2))))))AND(CASE WHEN (rt0.c2 IN ()) THEN ((rt0.c3)+(rt0.c0)) WHEN UPPER(DISTINCT rt0.c3) THEN (((vt1.c0, rt0.c2, rt0.c1))>=((vt1.c0, rt0.c3, rt0.c1))) END))) INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE (TIME(('' IN (vt1.c0, vt1.c0)), (vt1.c0 IN ()), ((((((((((rt0.c3)AND(vt1.c0)))AND(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c1))));
SELECT * FROM vt1, rt0 WHERE ((~ (CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 END))) ORDER BY NULL  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ((~ (CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 END))) ORDER BY 1.466001721E9 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c3)) NOT BETWEEN (((rt0.c0 IN ()))) AND ((rt0.c0 COLLATE NOCASE)))) ORDER BY 1.466001721E9;
SELECT * FROM vt1, rt0 WHERE ((~ (CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 END))) ORDER BY NULL  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ((~ (CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 END))) ORDER BY 1.466001721E9 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c3)) NOT BETWEEN (((rt0.c0 IN ()))) AND ((rt0.c0 COLLATE NOCASE)))) ORDER BY 1.466001721E9;
SELECT * FROM vt1 WHERE (x'');
SELECT DISTINCT * FROM vt1 WHERE (((x'')AND(((((vt1.c0)!=(vt1.c0))) NOT NULL)))) ORDER BY ((vt1.c0 COLLATE NOCASE)-(((vt1.c0)IS(vt1.c0)))) ASC LIMIT 2;
SELECT * FROM vt1 WHERE (x'');
SELECT DISTINCT * FROM vt1 WHERE (((x'')AND(((((vt1.c0)!=(vt1.c0))) NOT NULL)))) ORDER BY ((vt1.c0 COLLATE NOCASE)-(((vt1.c0)IS(vt1.c0)))) ASC LIMIT 2;
SELECT COUNT(*) FROM vt1 WHERE (((((CASE WHEN 0.27397212887613 THEN vt1.c0 ELSE vt1.c0 END)AND(((vt1.c0) IS FALSE))))OR((NOT (vt1.c0)))));
SELECT ALL COUNT(*) FROM vt1 WHERE (((((CASE WHEN 0.27397212887613 THEN vt1.c0 ELSE vt1.c0 END)AND(((vt1.c0) IS FALSE))))OR((NOT (vt1.c0))))) ORDER BY UPPER(DISTINCT NULL)  NULLS FIRST, ((vt1.c0 COLLATE NOCASE) NOT BETWEEN (0.9820916372722289) AND (((vt1.c0)LIKE(NULL))))  NULLS FIRST INTERSECT SELECT COUNT(*) FROM vt1 WHERE (((((((vt1.c0 COLLATE BINARY)AND(((vt1.c0)>>(vt1.c0)))))OR(((vt1.c0)%(vt1.c0)))))OR((NOT (vt1.c0))))) ORDER BY UPPER(DISTINCT NULL)  NULLS FIRST, ((vt1.c0 COLLATE NOCASE) NOT BETWEEN (0.9820916372722289) AND (((vt1.c0)LIKE(NULL))))  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS TEXT)))!=(((rt0.c1 IN ()))))) ORDER BY (- (((rt0.c1) NOTNULL))) ASC, CASE WHEN CAST(rt0.c1 AS BLOB) THEN ((NULL) BETWEEN (rt0.c1) AND (rt0.c1)) WHEN ((((rt0.c1)OR('!q')))OR(vt1.c0)) THEN ((1.082644571E9) IS FALSE) WHEN NULL THEN ((NULL)<>(rt0.c2)) WHEN ((rt0.c2)*(rt0.c3)) THEN ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c1)) ELSE ((rt0.c0)=(rt0.c0)) END ASC, ((((((NULL)OR((rt0.c3 IN (vt1.c0, rt0.c2)))))OR(((rt0.c1)<<(x'b3')))))OR(CASE x'da'  WHEN rt0.c1 THEN rt0.c2 END))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS TEXT)))<>(((rt0.c1 IN ()))))) ORDER BY (((((NULL)) NOT BETWEEN ((rt0.c2)) AND ((-1911487155))))%(x'9b'))  NULLS FIRST INTERSECT SELECT * FROM vt1, rt0 WHERE (((((((((rt0.c3)IS NOT(rt0.c2)))OR(((((((((vt1.c0)AND(x'')))OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c0)))))OR(((rt0.c0)<<(rt0.c0)))))OR((NOT (rt0.c3))))) ORDER BY (((((NULL)) NOT BETWEEN ((rt0.c2)) AND ((-1911487155))))%(x'9b'))  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS TEXT)))!=(((rt0.c1 IN ()))))) ORDER BY (- (((rt0.c1) NOTNULL))) ASC, CASE WHEN CAST(rt0.c1 AS BLOB) THEN ((NULL) BETWEEN (rt0.c1) AND (rt0.c1)) WHEN ((((rt0.c1)OR('!q')))OR(vt1.c0)) THEN ((1.082644571E9) IS FALSE) WHEN NULL THEN ((NULL)<>(rt0.c2)) WHEN ((rt0.c2)*(rt0.c3)) THEN ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c1)) ELSE ((rt0.c0)=(rt0.c0)) END ASC, ((((((NULL)OR((rt0.c3 IN (vt1.c0, rt0.c2)))))OR(((rt0.c1)<<(x'b3')))))OR(CASE x'da'  WHEN rt0.c1 THEN rt0.c2 END))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS TEXT)))<>(((rt0.c1 IN ()))))) ORDER BY (((((NULL)) NOT BETWEEN ((rt0.c2)) AND ((-1911487155))))%(x'9b'))  NULLS FIRST INTERSECT SELECT * FROM vt1, rt0 WHERE (((((((((rt0.c3)IS NOT(rt0.c2)))OR(((((((((vt1.c0)AND(x'')))OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c0)))))OR(((rt0.c0)<<(rt0.c0)))))OR((NOT (rt0.c3))))) ORDER BY (((((NULL)) NOT BETWEEN ((rt0.c2)) AND ((-1911487155))))%(x'9b'))  NULLS FIRST;
SELECT * FROM vt1 WHERE ((json(vt1.c0) IN ()));
SELECT ALL * FROM vt1 WHERE ((((json(vt1.c0) IN ()))AND(((((((((((vt1.c0)GLOB(vt1.c0)))OR(vt1.c0 COLLATE NOCASE)))OR(vt1.c0)))AND('.[hﯓ]')))OR(((vt1.c0)<(vt1.c0))))))) LIMIT 0x3 INTERSECT SELECT * FROM vt1 WHERE (x'') LIMIT 0x3;
SELECT * FROM vt1 WHERE ((json(vt1.c0) IN ()));
SELECT ALL * FROM vt1 WHERE ((((json(vt1.c0) IN ()))AND(((((((((((vt1.c0)GLOB(vt1.c0)))OR(vt1.c0 COLLATE NOCASE)))OR(vt1.c0)))AND('.[hﯓ]')))OR(((vt1.c0)<(vt1.c0))))))) LIMIT 0x3 INTERSECT SELECT * FROM vt1 WHERE (x'') LIMIT 0x3;
SELECT ALL * FROM vt1 WHERE (CAST(CAST(vt1.c0 AS BLOB) AS BLOB));
SELECT * FROM vt1 WHERE (((CAST(CAST(vt1.c0 AS BLOB) AS BLOB))AND(TYPEOF(DISTINCT ((vt1.c0) NOTNULL))))) LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE (CAST(CAST(vt1.c0 AS BLOB) AS BLOB));
SELECT * FROM vt1 WHERE (((CAST(CAST(vt1.c0 AS BLOB) AS BLOB))AND(TYPEOF(DISTINCT ((vt1.c0) NOTNULL))))) LIMIT 0X1;
SELECT MAX(rt0.c3) FROM rt0 WHERE (TRIM(CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN '\y' END, rt0.c2 COLLATE RTRIM)) ORDER BY CASE rt0.c2  WHEN 'Avd' THEN ((('neK,', rt0.c2)) BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c1, rt0.c0))) END ASC  NULLS FIRST;
SELECT MAX(rt0.c3) FROM rt0 WHERE (((TRIM(CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN '\y' END, rt0.c2 COLLATE RTRIM))AND(CAST(IFNULL(rt0.c2, rt0.c3) AS INTEGER)))) ORDER BY ((json_remove(rt0.c0, rt0.c3)) IS TRUE)  NULLS FIRST, ((NULL) NOT NULL) ASC, CASE WHEN (rt0.c2 IN (rt0.c0)) THEN CAST(rt0.c1 AS TEXT) WHEN ((rt0.c2) IS FALSE) THEN (rt0.c2 IN ()) END ASC LIMIT 0x1 INTERSECT SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (((x'456ff9')<(((rt0.c3)/(rt0.c1))))) ORDER BY ((json_remove(rt0.c0, rt0.c3)) IS TRUE)  NULLS FIRST, ((NULL) NOT NULL) ASC, CASE WHEN (rt0.c2 IN (rt0.c0)) THEN CAST(rt0.c1 AS TEXT) WHEN ((rt0.c2) IS FALSE) THEN (rt0.c2 IN ()) END ASC LIMIT 0X1;
SELECT ALL * FROM rt0 NOT INDEXED WHERE (((((((((((((NULL)OR(((rt0.c2)IS NOT(rt0.c2)))))OR(((rt0.c3) NOTNULL))))AND(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))))AND(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN 0.8449585310660954 END)))OR(json_extract(x'', rt0.c2))));
SELECT ALL * FROM rt0 WHERE (((((((((((((NULL)OR(((rt0.c2)IS NOT(rt0.c2)))))OR(((rt0.c3) NOTNULL))))AND(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))))AND(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN 0.8449585310660954 END)))OR(json_extract(x'', rt0.c2)))) ORDER BY CAST(((rt0.c3)!=(rt0.c0)) AS NUMERIC) INTERSECT SELECT * FROM rt0 WHERE ((NOT (NULL))) ORDER BY CAST(((rt0.c3)!=(rt0.c0)) AS NUMERIC);
SELECT ALL * FROM rt0 NOT INDEXED WHERE (((((((((((((NULL)OR(((rt0.c2)IS NOT(rt0.c2)))))OR(((rt0.c3) NOTNULL))))AND(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))))AND(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN 0.8449585310660954 END)))OR(json_extract(x'', rt0.c2))));
SELECT ALL MIN(rt0.c3) FROM vt1 LEFT OUTER JOIN rt0 ON SUBSTR(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c3)), (- (rt0.c0))) WHERE ((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)) IN ())) ORDER BY (((rt0.c3 IN (rt0.c2, vt1.c0, rt0.c3))) NOT BETWEEN (((rt0.c2) NOT NULL)) AND (((rt0.c0) BETWEEN (rt0.c3) AND (x'54'))))  NULLS FIRST, CASE CAST(vt1.c0 AS NUMERIC)  WHEN ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c0)) THEN vt1.c0 COLLATE RTRIM WHEN ((rt0.c1)*(rt0.c0)) THEN rt0.c3 WHEN ((((((((rt0.c1)OR(rt0.c0)))AND(vt1.c0)))OR(rt0.c1)))OR('99367454')) THEN rt0.c0 END  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c3) FROM vt1 LEFT OUTER JOIN rt0 ON SUBSTR(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c3)), (- (rt0.c0))) WHERE ((((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)) IN ()))AND(CAST(((((((((((((rt0.c1)AND(vt1.c0)))AND(vt1.c0)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c0)))AND(rt0.c0)) AS NUMERIC)))) ORDER BY ((((((x'98')AND(rt0.c3)))AND(rt0.c0))) NOT BETWEEN (NULLIF(DISTINCT rt0.c0, rt0.c0)) AND (((vt1.c0) NOTNULL))) ASC  NULLS LAST INTERSECT SELECT DISTINCT MIN(rt0.c3) FROM vt1 LEFT OUTER JOIN rt0 ON SUBSTR(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c3)), (- (rt0.c0))) WHERE ((+ (CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN 0.24376662247593572 WHEN rt0.c3 THEN rt0.c1 END))) ORDER BY ((((((x'98')AND(rt0.c3)))AND(rt0.c0))) NOT BETWEEN (NULLIF(DISTINCT rt0.c0, rt0.c0)) AND (((vt1.c0) NOTNULL))) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((~ ((rt0.c1 IN (rt0.c0, vt1.c0))))) ORDER BY (((((((((((rt0.c2 IN (vt1.c0)))AND(((rt0.c1) ISNULL))))AND((~ (rt0.c0)))))AND(((rt0.c3)==(rt0.c1)))))AND((NOT (rt0.c1)))))OR(IFNULL(DISTINCT rt0.c3, rt0.c3))) ASC  NULLS LAST, CASE WHEN x'ba99' THEN (NOT (rt0.c1)) WHEN ((rt0.c2)IS(rt0.c3)) THEN ((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c1)) ELSE ((vt1.c0)&(rt0.c0)) END;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((~ ((rt0.c1 IN (rt0.c0)))))AND(((((((((rt0.c2)OR(x'')))OR(((rt0.c0)<=(rt0.c0)))))AND((rt0.c2 IN (x'13')))))AND(rt0.c1 COLLATE NOCASE))))) ORDER BY ((vt1.c0 COLLATE RTRIM) ISNULL)  NULLS FIRST, (((rt0.c3) NOT NULL) IN ())  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE ((~ ((rt0.c1 IN (rt0.c0, vt1.c0))))) ORDER BY (((((((((((rt0.c2 IN (vt1.c0)))AND(((rt0.c1) ISNULL))))AND((~ (rt0.c0)))))AND(((rt0.c3)==(rt0.c1)))))AND((NOT (rt0.c1)))))OR(IFNULL(DISTINCT rt0.c3, rt0.c3))) ASC  NULLS LAST, CASE WHEN x'ba99' THEN (NOT (rt0.c1)) WHEN ((rt0.c2)IS(rt0.c3)) THEN ((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c1)) ELSE ((vt1.c0)&(rt0.c0)) END;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((~ ((rt0.c1 IN (rt0.c0)))))AND(((((((((rt0.c2)OR(x'')))OR(((rt0.c0)<=(rt0.c0)))))AND((rt0.c2 IN (x'13')))))AND(rt0.c1 COLLATE NOCASE))))) ORDER BY ((vt1.c0 COLLATE RTRIM) ISNULL)  NULLS FIRST, (((rt0.c3) NOT NULL) IN ())  NULLS FIRST LIMIT 0;
SELECT * FROM rt0 NOT INDEXED WHERE (rt0.c0);
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c0)AND(((((((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((rt0.c2, rt0.c2))), rt0.c3))>=((((rt0.c2)||(rt0.c3)), rt0.c2 COLLATE BINARY)))))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (0xffffffffbd1b3210);
SELECT * FROM rt0 NOT INDEXED WHERE (rt0.c0);
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c0)AND(((((((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((rt0.c2, rt0.c2))), rt0.c3))>=((((rt0.c2)||(rt0.c3)), rt0.c2 COLLATE BINARY)))))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (0xffffffffbd1b3210);
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((vt1.c0))))%(((vt1.c0)IS NOT(rt0.c2))))) ORDER BY CASE rt0.c1  WHEN CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END THEN ((rt0.c0) IS FALSE) WHEN UPPER(rt0.c2) THEN HEX(rt0.c3) WHEN CAST(vt1.c0 AS NUMERIC) THEN ABS(DISTINCT rt0.c1) END ASC, (((rt0.c3 IN (0.08557058442453591)))AND(((((((rt0.c3)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c2))))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((vt1.c0))))%(((vt1.c0)IS NOT(rt0.c2)))))AND((((rt0.c0, rt0.c1, vt1.c0, rt0.c3, vt1.c0)) NOT BETWEEN ((((rt0.c3) NOTNULL), ((rt0.c0) NOTNULL), (vt1.c0 IN (rt0.c0)), (((vt1.c0, rt0.c2, rt0.c3, rt0.c2, rt0.c0, vt1.c0))>=((rt0.c2, rt0.c3, '206543958', vt1.c0, '~^X', rt0.c0))), vt1.c0 COLLATE BINARY)) AND ((((vt1.c0)<=(rt0.c2)), '', (~ (rt0.c3)), (((''))>=((rt0.c3))), (NOT (rt0.c3)))))))) ORDER BY CASE rt0.c1  WHEN CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END THEN ((rt0.c0) IS FALSE) WHEN UPPER(rt0.c2) THEN HEX(rt0.c3) WHEN CAST(vt1.c0 AS NUMERIC) THEN ABS(DISTINCT rt0.c1) END ASC, (((rt0.c3 IN (0.08557058442453591)))AND(((((((rt0.c3)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c2))))  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((~ (rt0.c3))) ORDER BY CASE rt0.c1  WHEN CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END THEN ((rt0.c0) IS FALSE) WHEN UPPER(rt0.c2) THEN HEX(rt0.c3) WHEN CAST(vt1.c0 AS NUMERIC) THEN ABS(DISTINCT rt0.c1) END ASC, (((rt0.c3 IN (0.08557058442453591)))AND(((((((rt0.c3)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c2))))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((vt1.c0))))%(((vt1.c0)IS NOT(rt0.c2))))) ORDER BY CASE rt0.c1  WHEN CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END THEN ((rt0.c0) IS FALSE) WHEN UPPER(rt0.c2) THEN HEX(rt0.c3) WHEN CAST(vt1.c0 AS NUMERIC) THEN ABS(DISTINCT rt0.c1) END ASC, (((rt0.c3 IN (0.08557058442453591)))AND(((((((rt0.c3)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c2))))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((rt0.c3)) NOT BETWEEN ((rt0.c2)) AND ((vt1.c0))))%(((vt1.c0)IS NOT(rt0.c2)))))AND((((rt0.c0, rt0.c1, vt1.c0, rt0.c3, vt1.c0)) NOT BETWEEN ((((rt0.c3) NOTNULL), ((rt0.c0) NOTNULL), (vt1.c0 IN (rt0.c0)), (((vt1.c0, rt0.c2, rt0.c3, rt0.c2, rt0.c0, vt1.c0))>=((rt0.c2, rt0.c3, '206543958', vt1.c0, '~^X', rt0.c0))), vt1.c0 COLLATE BINARY)) AND ((((vt1.c0)<=(rt0.c2)), '', (~ (rt0.c3)), (((''))>=((rt0.c3))), (NOT (rt0.c3)))))))) ORDER BY CASE rt0.c1  WHEN CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END THEN ((rt0.c0) IS FALSE) WHEN UPPER(rt0.c2) THEN HEX(rt0.c3) WHEN CAST(vt1.c0 AS NUMERIC) THEN ABS(DISTINCT rt0.c1) END ASC, (((rt0.c3 IN (0.08557058442453591)))AND(((((((rt0.c3)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c2))))  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((~ (rt0.c3))) ORDER BY CASE rt0.c1  WHEN CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END THEN ((rt0.c0) IS FALSE) WHEN UPPER(rt0.c2) THEN HEX(rt0.c3) WHEN CAST(vt1.c0 AS NUMERIC) THEN ABS(DISTINCT rt0.c1) END ASC, (((rt0.c3 IN (0.08557058442453591)))AND(((((((rt0.c3)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c2))))  NULLS FIRST;
SELECT ALL MAX(rt0.c1) FROM vt1 INNER JOIN rt0 ON (((vt1.c0) NOT NULL) IN (NULLIF(rt0.c3, vt1.c0), rt0.c0 COLLATE BINARY)) WHERE (((0.9411611907217905) IS FALSE));
SELECT DISTINCT MAX(rt0.c1) FROM vt1 INNER JOIN rt0 ON (((vt1.c0) NOT NULL) IN (NULLIF(rt0.c3, vt1.c0), rt0.c0 COLLATE BINARY)) WHERE (((0.9411611907217905) IS FALSE)) ORDER BY CAST(rt0.c0 AS REAL) DESC, ((((((vt1.c0)OR(rt0.c2)))AND(rt0.c2))) NOTNULL) DESC INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM vt1 INNER JOIN rt0 ON (((vt1.c0) NOT NULL) IN (NULLIF(rt0.c3, vt1.c0), rt0.c0 COLLATE BINARY)) WHERE (CAST(((((rt0.c2)AND(rt0.c1)))AND(vt1.c0)) AS INTEGER)) ORDER BY CAST(rt0.c0 AS REAL) DESC, ((((((vt1.c0)OR(rt0.c2)))AND(rt0.c2))) NOTNULL) DESC;
SELECT ALL * FROM vt1, rt0 WHERE ((((('q(5a㿧듁v')<>(rt0.c1)))-(((((x'f2')OR(rt0.c3)))AND(vt1.c0))))) ORDER BY ((((((((rt0.c2)OR(x'ef1a1ebec5')))AND(rt0.c0)))AND((((vt1.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0))))))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((('q(5a㿧듁v')>(rt0.c1)))-(((((x'f2')OR(rt0.c3)))AND(vt1.c0))))) ORDER BY ((((((((rt0.c2)OR(x'ef1a1ebec5')))AND(rt0.c0)))AND((((vt1.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0))))))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(CAST(rt0.c0 AS REAL) AS NUMERIC)) ORDER BY ((((((((rt0.c2)OR(x'ef1a1ebec5')))AND(rt0.c0)))AND((((vt1.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0))))))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))) LIMIT 0X2;
SELECT ALL * FROM vt1, rt0 WHERE ((((('q(5a㿧듁v')<>(rt0.c1)))-(((((x'f2')OR(rt0.c3)))AND(vt1.c0))))) ORDER BY ((((((((rt0.c2)OR(x'ef1a1ebec5')))AND(rt0.c0)))AND((((vt1.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0))))))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((('q(5a㿧듁v')>(rt0.c1)))-(((((x'f2')OR(rt0.c3)))AND(vt1.c0))))) ORDER BY ((((((((rt0.c2)OR(x'ef1a1ebec5')))AND(rt0.c0)))AND((((vt1.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0))))))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(CAST(rt0.c0 AS REAL) AS NUMERIC)) ORDER BY ((((((((rt0.c2)OR(x'ef1a1ebec5')))AND(rt0.c0)))AND((((vt1.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0))))))AND(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))) LIMIT 0X2;
SELECT ALL * FROM rt0 WHERE ((('-532211032')|(UPPER(rt0.c3)))) ORDER BY NULL, ((rt0.c2 COLLATE NOCASE)LIKE(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END));
SELECT * FROM rt0 WHERE ((((('-532211032')|(UPPER(rt0.c3))))AND(LIKELY(DISTINCT CAST(rt0.c0 AS BLOB))))) ORDER BY NULL, ((rt0.c2 COLLATE NOCASE)LIKE(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END)) LIMIT 2 INTERSECT SELECT ALL * FROM rt0 WHERE (((- (rt0.c1)) IN ((((0.846768583026729, rt0.c2, rt0.c3, rt0.c0))<(('Hw', rt0.c3, rt0.c0, rt0.c0)))))) ORDER BY NULL, ((rt0.c2 COLLATE NOCASE)LIKE(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END)) LIMIT 2;
SELECT ALL * FROM rt0 WHERE ((('-532211032')|(UPPER(rt0.c3)))) ORDER BY NULL, ((rt0.c2 COLLATE NOCASE)LIKE(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END));
SELECT * FROM rt0 WHERE ((((('-532211032')|(UPPER(rt0.c3))))AND(LIKELY(DISTINCT CAST(rt0.c0 AS BLOB))))) ORDER BY NULL, ((rt0.c2 COLLATE NOCASE)LIKE(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END)) LIMIT 2 INTERSECT SELECT ALL * FROM rt0 WHERE (((- (rt0.c1)) IN ((((0.846768583026729, rt0.c2, rt0.c3, rt0.c0))<(('Hw', rt0.c3, rt0.c0, rt0.c0)))))) ORDER BY NULL, ((rt0.c2 COLLATE NOCASE)LIKE(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END)) LIMIT 2;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND ('{f	Q')) AS TEXT));
SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND ('{f	Q')) AS TEXT)) INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((TYPEOF(vt1.c0), (((vt1.c0, vt1.c0))>((vt1.c0, NULL))), 0.4814709976186514, (NOT (vt1.c0)), vt1.c0)) AND ((((vt1.c0) NOT BETWEEN (x'9e') AND (-1955672256)), ((vt1.c0) NOT BETWEEN (0.315848055336596) AND (vt1.c0)), vt1.c0, (((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0))), ((vt1.c0)!=(vt1.c0))))));
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((CAST(vt1.c0 AS REAL), CASE WHEN vt1.c0 THEN vt1.c0 END))<=((((vt1.c0) NOT NULL), vt1.c0 COLLATE RTRIM)))) ORDER BY (HEX(vt1.c0) IN ());
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((((CAST(vt1.c0 AS REAL), CASE WHEN vt1.c0 THEN vt1.c0 END))<=((((vt1.c0) NOT NULL), vt1.c0 COLLATE RTRIM))))AND(((SQLITE_VERSION()) IS TRUE)))) ORDER BY TYPEOF(DISTINCT ((vt1.c0) ISNULL)), (- (CAST(vt1.c0 AS INTEGER))) ASC LIMIT 4 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CAST(266373916 AS NUMERIC)) ORDER BY TYPEOF(DISTINCT ((vt1.c0) ISNULL)), (- (CAST(vt1.c0 AS INTEGER))) ASC LIMIT 0x4;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (x'a738');
SELECT COUNT(*) FROM vt1, rt0 WHERE (((x'a738')AND(NULL))) ORDER BY CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c2)) THEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)) WHEN ((((((((((rt0.c0)OR(rt0.c2)))OR('-1159673122')))AND(vt1.c0)))OR(rt0.c3)))OR('1851741467')) THEN (- (rt0.c3)) ELSE (((rt0.c2)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3))) END DESC  NULLS LAST, (((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c0)) IN ()) LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM vt1, rt0 WHERE ((- (ABS(vt1.c0)))) ORDER BY CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c2)) THEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)) WHEN ((((((((((rt0.c0)OR(rt0.c2)))OR('-1159673122')))AND(vt1.c0)))OR(rt0.c3)))OR('1851741467')) THEN (- (rt0.c3)) ELSE (((rt0.c2)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3))) END DESC  NULLS LAST, (((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c0)) IN ()) LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((((((~ (rt0.c2)))AND(((rt0.c0)>=(rt0.c3)))))AND(((vt1.c0) NOTNULL))))OR((- (rt0.c2)))));
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE ((((((((((~ (rt0.c2)))AND(((rt0.c0)>=(rt0.c3)))))AND(((vt1.c0) NOTNULL))))OR((- (rt0.c2)))))AND(CASE (+ (rt0.c3))  WHEN NULL THEN rt0.c0 ELSE '-1688611678' END))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((rt0.c1)) BETWEEN ((rt0.c0)) AND ((rt0.c2))) IN ()));
SELECT * FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c3)) COLLATE BINARY) ORDER BY ((UPPER(DISTINCT rt0.c2))IS('Gጫ')), json_valid(((((rt0.c2)AND(rt0.c3)))AND(815593498)));
SELECT * FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c3)) COLLATE BINARY) ORDER BY x'8e' ASC  NULLS LAST, (NOT (CASE WHEN rt0.c1 THEN rt0.c0 END)), (~ (((((rt0.c2)AND(rt0.c2)))OR(rt0.c2)))) LIMIT 1;
SELECT * FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c3)) COLLATE BINARY) ORDER BY ((UPPER(DISTINCT rt0.c2))IS('Gጫ')), json_valid(((((rt0.c2)AND(rt0.c3)))AND(815593498)));
SELECT * FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c3)) COLLATE BINARY) ORDER BY x'8e' ASC  NULLS LAST, (NOT (CASE WHEN rt0.c1 THEN rt0.c0 END)), (~ (((((rt0.c2)AND(rt0.c2)))OR(rt0.c2)))) LIMIT 1;
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (((CAST(rt0.c3 AS INTEGER)) NOT BETWEEN ((((vt1.c0, rt0.c0, rt0.c2, rt0.c0))<((rt0.c1, rt0.c2, rt0.c2, rt0.c1)))) AND (rt0.c3))) ORDER BY CAST(vt1.c0 AS INTEGER) COLLATE BINARY  NULLS FIRST, CAST((NOT (rt0.c0)) AS TEXT)  NULLS LAST, ((rt0.c1 COLLATE NOCASE) NOT BETWEEN ((rt0.c1 IN (rt0.c2, rt0.c3))) AND (rt0.c0))  NULLS FIRST;
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (((((CAST(rt0.c3 AS INTEGER)) NOT BETWEEN ((((vt1.c0, rt0.c0, rt0.c2, rt0.c0))!=((rt0.c1, rt0.c2, rt0.c2, rt0.c1)))) AND (rt0.c3)))AND('1883523555'))) ORDER BY CAST(((rt0.c2)|(0.26739523423665346)) AS NUMERIC);
SELECT * FROM vt1 WHERE ((+ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC);
SELECT * FROM vt1 WHERE ((((+ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((vt1.c0)==(vt1.c0)))>(CAST(vt1.c0 AS INTEGER)))))) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC) INTERSECT SELECT ALL * FROM vt1 WHERE (CAST(vt1.c0 COLLATE BINARY AS REAL)) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC);
SELECT * FROM vt1 WHERE ((+ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC);
SELECT * FROM vt1 WHERE ((((+ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((vt1.c0)==(vt1.c0)))>(CAST(vt1.c0 AS INTEGER)))))) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC) INTERSECT SELECT ALL * FROM vt1 WHERE (CAST(vt1.c0 COLLATE BINARY AS REAL)) ORDER BY CAST(((vt1.c0)/(vt1.c0)) AS NUMERIC);
SELECT MIN(rt0.c0) FROM rt0 NATURAL JOIN vt1 WHERE (((0X4a15ac84) BETWEEN ((((rt0.c3))<>((rt0.c2)))) AND (rt0.c3)));
SELECT MIN(rt0.c0) FROM rt0 NATURAL JOIN vt1 WHERE (((((1242934404) BETWEEN ((((rt0.c3))<((rt0.c2)))) AND (rt0.c3)))AND(LIKELIHOOD(DISTINCT CAST(rt0.c3 AS BLOB), ((vt1.c0)|(rt0.c2)))))) ORDER BY CASE WHEN (+ (rt0.c2)) THEN ((rt0.c3) BETWEEN (rt0.c0) AND (vt1.c0)) WHEN ((rt0.c2)/(rt0.c0)) THEN ((((rt0.c2)AND(vt1.c0)))AND(rt0.c3)) WHEN (((rt0.c0, rt0.c2)) BETWEEN ((1.304629726E9, rt0.c0)) AND ((rt0.c2, vt1.c0))) THEN (NOT (rt0.c3)) WHEN ((((x'0ed2b3')AND(rt0.c1)))AND(vt1.c0)) THEN vt1.c0 ELSE vt1.c0 COLLATE NOCASE END, (- (CAST(rt0.c1 AS NUMERIC))) ASC, (+ (vt1.c0 COLLATE NOCASE)) LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(((((((((((1663299610)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) AS NUMERIC));
SELECT MAX(vt1.c0) FROM vt1 WHERE (((CAST(((((((((((1663299610)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) AS NUMERIC))AND(((((((COALESCE(vt1.c0, vt1.c0, vt1.c0))OR('al㏜Sh,഑띱')))AND(((vt1.c0)>=(vt1.c0)))))OR(NULL))))) ORDER BY ((vt1.c0) BETWEEN (LTRIM(vt1.c0)) AND (vt1.c0 COLLATE NOCASE)), ((COALESCE(vt1.c0, vt1.c0))>((- (vt1.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ('FALSE') ORDER BY ((vt1.c0) BETWEEN (LTRIM(vt1.c0)) AND (vt1.c0 COLLATE NOCASE)), ((COALESCE(vt1.c0, vt1.c0))>((- (vt1.c0))))  NULLS LAST LIMIT 1;
SELECT * FROM rt0, vt1 WHERE ((+ (((rt0.c1) NOT NULL))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((+ (((rt0.c1) NOT NULL))))AND(((((-1.733680795E9)OR(((rt0.c3)IS NOT(rt0.c3)))))AND((((rt0.c3, vt1.c0, rt0.c2)) BETWEEN ((rt0.c1, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c0)))))))) ORDER BY (((rt0.c3)) NOT BETWEEN ((((rt0.c3) IS TRUE))) AND ((((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c3))))) DESC, ((((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)))OR((((rt0.c1)) BETWEEN ((rt0.c3)) AND ((rt0.c2))))) ASC;
SELECT * FROM rt0, vt1 WHERE ((+ (((rt0.c1) NOT NULL))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((+ (((rt0.c1) NOT NULL))))AND(((((-1.733680795E9)OR(((rt0.c3)IS NOT(rt0.c3)))))AND((((rt0.c3, vt1.c0, rt0.c2)) BETWEEN ((rt0.c1, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c0)))))))) ORDER BY (((rt0.c3)) NOT BETWEEN ((((rt0.c3) IS TRUE))) AND ((((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c3))))) DESC, ((((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)))OR((((rt0.c1)) BETWEEN ((rt0.c3)) AND ((rt0.c2))))) ASC;
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (LOWER(DATETIME(rt0.c0, rt0.c1, -2054681288, -1532470271))) ORDER BY ((((rt0.c1)+(rt0.c3)))>=(((rt0.c0)!=(rt0.c1)))) ASC;
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (LOWER(DATETIME(rt0.c0, rt0.c1, 0Xffffffff85880d38, -1532470271))) ORDER BY ((((rt0.c1)+(rt0.c3)))>=(((rt0.c0)<>(rt0.c1)))) ASC INTERSECT SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (NULL) ORDER BY ((((rt0.c1)+(rt0.c3)))>=(((rt0.c0)<>(rt0.c1)))) ASC;
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (HEX(((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0)))) ORDER BY ((((((vt1.c0)AND((((rt0.c1))>=((rt0.c0))))))OR(((((((((rt0.c2)AND(rt0.c2)))AND(vt1.c0)))OR(vt1.c0)))AND(rt0.c0)))))OR((vt1.c0 IN ()))) DESC  NULLS LAST, CASE UNLIKELY(DISTINCT vt1.c0)  WHEN CAST(vt1.c0 AS BLOB) THEN ABS(DISTINCT rt0.c0) WHEN ((rt0.c0) IS TRUE) THEN ((0Xffffffffca0ead47)OR(NULL)) ELSE ((rt0.c0) NOTNULL) END ASC;
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE (((HEX(((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0))))AND(CAST(((rt0.c2)>(rt0.c0)) AS INTEGER)))) ORDER BY (((((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c3)) AND ((0.404592676535915, NULL))))||(((vt1.c0) IS FALSE)))  NULLS FIRST, 0X43f0c96e COLLATE NOCASE ASC LIMIT 0;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((CAST(rt0.c0 AS TEXT)) NOT BETWEEN (CASE WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END) AND (rt0.c3))) ORDER BY ((((((rt0.c0)OR(rt0.c3)))AND(rt0.c2)))-((rt0.c3 IN ()))) ASC  NULLS LAST;
SELECT MAX(rt0.c2) FROM rt0 WHERE (((((CAST(rt0.c0 AS TEXT)) NOT BETWEEN (CASE WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END) AND (rt0.c3)))AND(NULL))) ORDER BY ((((((rt0.c0)OR(rt0.c3)))AND(rt0.c2)))-((rt0.c3 IN ()))) ASC  NULLS LAST LIMIT 1;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE ((((((rt0.c1) IS FALSE), CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END, (+ (rt0.c1)), ((rt0.c1)-(rt0.c0))))!=((((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c3)))OR(rt0.c3)), ((rt0.c3) BETWEEN (rt0.c1) AND ('gc?&l&脢}')), rt0.c2, ((rt0.c2) BETWEEN ('U') AND (rt0.c1))))));
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE ((((((rt0.c1) IS FALSE), CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END, (+ (rt0.c1)), ((rt0.c1)-(rt0.c0))))!=((((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c3)))AND(rt0.c3)))OR(rt0.c3)), ((rt0.c3) BETWEEN (rt0.c1) AND ('gc?&l&脢}')), rt0.c2, ((rt0.c2) BETWEEN ('U') AND (rt0.c1)))))) LIMIT 0X0;
SELECT * FROM rt0 CROSS JOIN vt1 ON CASE ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2))  WHEN ((vt1.c0)<=(rt0.c0)) THEN ((rt0.c1) ISNULL) WHEN ((rt0.c0)>=(vt1.c0)) THEN vt1.c0 END WHERE ((((-1793628271 IN (rt0.c2, rt0.c2)))|((((rt0.c0))>=((rt0.c1)))))) ORDER BY CAST(((rt0.c2) NOT NULL) AS INTEGER)  NULLS LAST;
SELECT * FROM rt0 CROSS JOIN vt1 ON CASE ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2))  WHEN ((vt1.c0)<=(rt0.c0)) THEN ((rt0.c1) ISNULL) WHEN ((rt0.c0)>=(vt1.c0)) THEN vt1.c0 END WHERE ((((((-1793628271 IN (rt0.c2)))|((((rt0.c0))>=((rt0.c1))))))AND((((vt1.c0)) BETWEEN (((+ (rt0.c2)))) AND ((rt0.c1)))))) ORDER BY CAST(((rt0.c2) NOT NULL) AS INTEGER)  NULLS LAST LIMIT 0x0;
SELECT * FROM rt0 CROSS JOIN vt1 ON CASE ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2))  WHEN ((vt1.c0)<=(rt0.c0)) THEN ((rt0.c1) ISNULL) WHEN ((rt0.c0)>=(vt1.c0)) THEN vt1.c0 END WHERE ((((-1793628271 IN (rt0.c2, rt0.c2)))|((((rt0.c0))>=((rt0.c1)))))) ORDER BY CAST(((rt0.c2) NOT NULL) AS INTEGER)  NULLS LAST;
SELECT * FROM rt0 CROSS JOIN vt1 ON CASE ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2))  WHEN ((vt1.c0)<=(rt0.c0)) THEN ((rt0.c1) ISNULL) WHEN ((rt0.c0)>=(vt1.c0)) THEN vt1.c0 END WHERE ((((((-1793628271 IN (rt0.c2)))|((((rt0.c0))>=((rt0.c1))))))AND((((vt1.c0)) BETWEEN (((+ (rt0.c2)))) AND ((rt0.c1)))))) ORDER BY CAST(((rt0.c2) NOT NULL) AS INTEGER)  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ('#ReXnA') ORDER BY '-1396617433' ASC  NULLS LAST, (((((((((((rt0.c3, rt0.c1, rt0.c3)) BETWEEN ((vt1.c0, rt0.c2, vt1.c0)) AND ((rt0.c3, vt1.c0, rt0.c2))))AND(CAST(rt0.c1 AS REAL))))AND(json_insert(vt1.c0, rt0.c3, rt0.c3, rt0.c0, rt0.c0))))AND(((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c2)))))OR(rt0.c2)) ASC, ((x'9b107a') BETWEEN (rt0.c2) AND (0.05756726859033112)) COLLATE RTRIM  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ('#ReXnA') ORDER BY '-1396617433' ASC  NULLS LAST, (((((((((((rt0.c3, rt0.c1, rt0.c3)) BETWEEN ((vt1.c0, rt0.c2, vt1.c0)) AND ((rt0.c3, vt1.c0, rt0.c2))))AND(CAST(rt0.c1 AS REAL))))AND(json_insert(vt1.c0, rt0.c3, rt0.c3, rt0.c0, rt0.c0))))AND(((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c2)))))OR(rt0.c2)) ASC, ((x'9b107a') BETWEEN (rt0.c2) AND (0.05756726859033112)) COLLATE RTRIM  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((rt0.c0 COLLATE RTRIM) NOT BETWEEN ((((((((((((('䦀㎯a>')OR(rt0.c2)))AND(0.7379558772439081)))AND(rt0.c2)))AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c2))) AND ((((vt1.c0, vt1.c0))>((rt0.c3, rt0.c1)))))) ORDER BY '-1396617433' ASC  NULLS LAST, (((((((((((rt0.c3, rt0.c1, rt0.c3)) BETWEEN ((vt1.c0, rt0.c2, vt1.c0)) AND ((rt0.c3, vt1.c0, rt0.c2))))AND(CAST(rt0.c1 AS REAL))))AND(json_insert(vt1.c0, rt0.c3, rt0.c3, rt0.c0, rt0.c0))))AND(((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c2)))))OR(rt0.c2)) ASC, ((x'9b107a') BETWEEN (rt0.c2) AND (0.05756726859033112)) COLLATE RTRIM  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (CASE WHEN rt0.c0 COLLATE RTRIM THEN ABS(DISTINCT rt0.c3) WHEN ((rt0.c0) BETWEEN ('') AND (rt0.c3)) THEN 'V' END);
SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN rt0.c0 COLLATE RTRIM THEN ABS(DISTINCT rt0.c3) WHEN ((rt0.c0) BETWEEN ('') AND (rt0.c3)) THEN 'V' END) ORDER BY ((((((rt0.c1)AND(rt0.c1)))AND(rt0.c1)))%((rt0.c3 IN ()))) DESC  NULLS LAST, ((x'') NOTNULL) COLLATE BINARY  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0 WHERE (CASE WHEN rt0.c0 COLLATE RTRIM THEN ABS(DISTINCT rt0.c3) WHEN ((rt0.c0) BETWEEN ('') AND (rt0.c3)) THEN 'V' END);
SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN rt0.c0 COLLATE RTRIM THEN ABS(DISTINCT rt0.c3) WHEN ((rt0.c0) BETWEEN ('') AND (rt0.c3)) THEN 'V' END) ORDER BY ((((((rt0.c1)AND(rt0.c1)))AND(rt0.c1)))%((rt0.c3 IN ()))) DESC  NULLS LAST, ((x'') NOTNULL) COLLATE BINARY  NULLS FIRST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3)) NOT BETWEEN ((UNLIKELY(vt1.c0))) AND ((json_object(rt0.c1, rt0.c2))))) ORDER BY ((((((((((vt1.c0)AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)))AND(((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c2)))AND(rt0.c0)))))AND(((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c3)))) DESC, LIKELIHOOD(rt0.c1 COLLATE BINARY, ((0.980600642965725) NOT NULL)) ASC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((((((rt0.c3)) NOT BETWEEN ((UNLIKELY(vt1.c0))) AND ((json_object(rt0.c1, rt0.c2)))))AND(((CASE WHEN rt0.c2 THEN rt0.c3 ELSE 0.9942609970307873 END) IS TRUE)))) ORDER BY ((((((((((vt1.c0)AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)))AND(((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c2)))AND(rt0.c0)))))AND(((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c3)))) DESC, LIKELIHOOD(rt0.c1 COLLATE BINARY, ((0.980600642965725) NOT NULL)) ASC  NULLS LAST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3)) NOT BETWEEN ((UNLIKELY(vt1.c0))) AND ((json_object(rt0.c1, rt0.c2))))) ORDER BY ((((((((((vt1.c0)AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c2)))AND(((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c2)))AND(rt0.c0)))))AND(((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c3)))) DESC, LIKELIHOOD(rt0.c1 COLLATE BINARY, ((0.980600642965725) NOT NULL)) ASC  NULLS LAST;
SELECT MIN(rt0.c1) FROM vt1 NATURAL JOIN rt0 WHERE (((CAST(rt0.c3 AS TEXT))&(((NULL)>(rt0.c2)))));
SELECT DISTINCT MIN(rt0.c1) FROM vt1 NATURAL JOIN rt0 WHERE (((((CAST(rt0.c3 AS TEXT))&(((NULL)>(rt0.c2)))))AND(0.27375697533595034))) ORDER BY ((((- (rt0.c1)), (NOT (rt0.c1)), ((rt0.c1) IS TRUE), (rt0.c3 IN ('-1440571497', vt1.c0)), rt0.c3 COLLATE RTRIM))!=((json_array_length(rt0.c3), CASE WHEN rt0.c1 THEN vt1.c0 END, (+ (rt0.c0)), rt0.c0 COLLATE NOCASE, (rt0.c2 IN (rt0.c1))))) DESC, (+ (rt0.c0 COLLATE RTRIM)) ASC;
SELECT ALL * FROM vt1, rt0 WHERE ((rt0.c1 IN ((+ (vt1.c0)), SQLITE_SOURCE_ID())));
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c1 IN ((+ (vt1.c0)), SQLITE_SOURCE_ID())))AND(((((((vt1.c0) IS TRUE))OR(((rt0.c2)<=(rt0.c1)))))AND(((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c0))))))) ORDER BY (+ (((NULL)AND(rt0.c2)))) INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (CAST(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c0 END AS BLOB)) ORDER BY (+ (((NULL)AND(rt0.c2))));
SELECT ALL * FROM vt1, rt0 WHERE ((rt0.c1 IN ((+ (vt1.c0)), SQLITE_SOURCE_ID())));
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c1 IN ((+ (vt1.c0)), SQLITE_SOURCE_ID())))AND(((((((vt1.c0) IS TRUE))OR(((rt0.c2)<=(rt0.c1)))))AND(((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c0))))))) ORDER BY (+ (((NULL)AND(rt0.c2)))) INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (CAST(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c0 END AS BLOB)) ORDER BY (+ (((NULL)AND(rt0.c2))));
SELECT * FROM vt1, rt0 WHERE (CAST(((rt0.c1)<=(rt0.c2)) AS TEXT)) ORDER BY (((((((rt0.c3 IN ()))AND(CAST(rt0.c0 AS INTEGER))))AND(((rt0.c0)+(rt0.c1)))))AND(((rt0.c3)+(rt0.c2)))) ASC;
SELECT ALL * FROM vt1, rt0 WHERE (((CAST(((rt0.c1)<=(rt0.c2)) AS TEXT))AND(CHANGES()))) ORDER BY (vt1.c0 COLLATE NOCASE IN (rt0.c1))  NULLS LAST LIMIT 3;
SELECT * FROM vt1, rt0 WHERE (CAST(((rt0.c1)<=(rt0.c2)) AS TEXT)) ORDER BY (((((((rt0.c3 IN ()))AND(CAST(rt0.c0 AS INTEGER))))AND(((rt0.c0)+(rt0.c1)))))AND(((rt0.c3)+(rt0.c2)))) ASC;
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE ((((rt0.c3, rt0.c1, rt0.c0)) NOT BETWEEN ((((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3)), ((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c1)), ((((rt0.c3)AND(rt0.c2)))AND(rt0.c2)))) AND ((((((((rt0.c0)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c0)), (rt0.c2 IN ()), RTRIM(rt0.c1))))) ORDER BY CAST(rt0.c2 COLLATE BINARY AS TEXT)  NULLS LAST;
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE ((((((rt0.c3, rt0.c1, rt0.c0)) NOT BETWEEN ((((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3)), ((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c1)), ((((rt0.c3)AND(rt0.c2)))AND(rt0.c2)))) AND ((((((((rt0.c0)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c0)), (rt0.c2 IN ()), RTRIM(rt0.c1)))))AND(rt0.c2))) ORDER BY ((((((rt0.c2) IS FALSE))AND(NULLIF(DISTINCT rt0.c2, rt0.c3))))AND(rt0.c3)) DESC, ((((rt0.c3 IN (rt0.c0)), ((rt0.c2) IS TRUE)))<((((rt0.c2) IS FALSE), rt0.c2))) ASC INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE ((- (((rt0.c2)>=(rt0.c1))))) ORDER BY ((((((rt0.c2) IS FALSE))AND(NULLIF(DISTINCT rt0.c2, rt0.c3))))AND(rt0.c3)) DESC, ((((rt0.c3 IN (rt0.c0)), ((rt0.c2) IS TRUE)))<((((rt0.c2) IS FALSE), rt0.c2))) ASC;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE RTRIM)) AND ((((vt1.c0)IS(vt1.c0)), (('nL<') BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY ((vt1.c0) ISNULL) COLLATE RTRIM ASC  NULLS FIRST, (((vt1.c0)) BETWEEN (((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))))) AND ((vt1.c0 COLLATE BINARY))) ASC;
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE RTRIM)) AND ((((vt1.c0)IS(vt1.c0)), (('nL<') BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY ((vt1.c0) ISNULL) COLLATE RTRIM ASC  NULLS FIRST, (((vt1.c0)) BETWEEN (((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))))) AND ((vt1.c0 COLLATE BINARY))) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((~ ((((vt1.c0))==((vt1.c0)))))) ORDER BY ((vt1.c0) ISNULL) COLLATE RTRIM ASC  NULLS FIRST, (((vt1.c0)) BETWEEN (((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))))) AND ((vt1.c0 COLLATE BINARY))) ASC LIMIT 0;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE RTRIM)) AND ((((vt1.c0)IS(vt1.c0)), (('nL<') BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY ((vt1.c0) ISNULL) COLLATE RTRIM ASC  NULLS FIRST, (((vt1.c0)) BETWEEN (((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))))) AND ((vt1.c0 COLLATE BINARY))) ASC;
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE RTRIM)) AND ((((vt1.c0)IS(vt1.c0)), (('nL<') BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY ((vt1.c0) ISNULL) COLLATE RTRIM ASC  NULLS FIRST, (((vt1.c0)) BETWEEN (((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))))) AND ((vt1.c0 COLLATE BINARY))) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((~ ((((vt1.c0))==((vt1.c0)))))) ORDER BY ((vt1.c0) ISNULL) COLLATE RTRIM ASC  NULLS FIRST, (((vt1.c0)) BETWEEN (((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))))) AND ((vt1.c0 COLLATE BINARY))) ASC LIMIT 0;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (COALESCE((rt0.c1 IN (rt0.c3)), CASE WHEN rt0.c2 THEN vt1.c0 END, ((rt0.c3) NOT NULL)));
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (COALESCE((rt0.c1 IN (rt0.c3)), CASE WHEN rt0.c2 THEN vt1.c0 END, ((rt0.c3) NOT NULL)));
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (COALESCE((rt0.c1 IN (rt0.c3)), CASE WHEN rt0.c2 THEN vt1.c0 END, ((rt0.c3) NOT NULL)));
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (COALESCE((rt0.c1 IN (rt0.c3)), CASE WHEN rt0.c2 THEN vt1.c0 END, ((rt0.c3) NOT NULL)));
SELECT * FROM rt0 WHERE (CASE ((rt0.c2)+(rt0.c3))  WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END THEN (~ (rt0.c0)) ELSE ((rt0.c0)OR(rt0.c3)) END);
SELECT * FROM rt0 WHERE (CASE ((rt0.c2)+(rt0.c3))  WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END THEN (~ (rt0.c0)) ELSE ((rt0.c0)OR(rt0.c3)) END) ORDER BY ((rt0.c0)>>(((rt0.c1)%(rt0.c1)))) ASC  NULLS LAST, (((rt0.c3, rt0.c1, rt0.c2)) BETWEEN ((((rt0.c3) NOTNULL), ((((rt0.c2)AND(rt0.c2)))AND(rt0.c0)), CAST(rt0.c0 AS BLOB))) AND (((((rt0.c1)) BETWEEN ((rt0.c1)) AND ((rt0.c0))), ((NULL) NOT BETWEEN (rt0.c2) AND ('^9''
憲7d,')), (((rt0.c1))=(('b^*')))))) ASC LIMIT 0x1 INTERSECT SELECT * FROM rt0 WHERE (x'5b20df') ORDER BY ((rt0.c0)>>(((rt0.c1)%(rt0.c1)))) ASC  NULLS LAST, (((rt0.c3, rt0.c1, rt0.c2)) BETWEEN ((((rt0.c3) NOTNULL), ((((rt0.c2)AND(rt0.c2)))AND(rt0.c0)), CAST(rt0.c0 AS BLOB))) AND (((((rt0.c1)) BETWEEN ((rt0.c1)) AND ((rt0.c0))), ((NULL) NOT BETWEEN (rt0.c2) AND ('^9''
憲7d,')), (((rt0.c1))==(('b^*')))))) ASC LIMIT 1;
SELECT * FROM rt0 WHERE (CASE ((rt0.c2)+(rt0.c3))  WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END THEN (~ (rt0.c0)) ELSE ((rt0.c0)OR(rt0.c3)) END);
SELECT * FROM rt0 WHERE (CASE ((rt0.c2)+(rt0.c3))  WHEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END THEN (~ (rt0.c0)) ELSE ((rt0.c0)OR(rt0.c3)) END) ORDER BY ((rt0.c0)>>(((rt0.c1)%(rt0.c1)))) ASC  NULLS LAST, (((rt0.c3, rt0.c1, rt0.c2)) BETWEEN ((((rt0.c3) NOTNULL), ((((rt0.c2)AND(rt0.c2)))AND(rt0.c0)), CAST(rt0.c0 AS BLOB))) AND (((((rt0.c1)) BETWEEN ((rt0.c1)) AND ((rt0.c0))), ((NULL) NOT BETWEEN (rt0.c2) AND ('^9''
憲7d,')), (((rt0.c1))=(('b^*')))))) ASC LIMIT 0x1 INTERSECT SELECT * FROM rt0 WHERE (x'5b20df') ORDER BY ((rt0.c0)>>(((rt0.c1)%(rt0.c1)))) ASC  NULLS LAST, (((rt0.c3, rt0.c1, rt0.c2)) BETWEEN ((((rt0.c3) NOTNULL), ((((rt0.c2)AND(rt0.c2)))AND(rt0.c0)), CAST(rt0.c0 AS BLOB))) AND (((((rt0.c1)) BETWEEN ((rt0.c1)) AND ((rt0.c0))), ((NULL) NOT BETWEEN (rt0.c2) AND ('^9''
憲7d,')), (((rt0.c1))==(('b^*')))))) ASC LIMIT 1;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (((((((((((rt0.c3)OR(NULL)))OR(rt0.c2)))AND(rt0.c2)))OR(rt0.c3))) ISNULL));
SELECT MIN(rt0.c0) FROM rt0 WHERE (((((((((((rt0.c3)OR(NULL)))OR(rt0.c2)))AND(rt0.c2)))OR(rt0.c3))) ISNULL)) ORDER BY ((((((NULL, rt0.c1, rt0.c2, rt0.c2, rt0.c1)) BETWEEN ((NULL, rt0.c3, 0.6890160182444096, rt0.c3, rt0.c3)) AND ((rt0.c2, NULL, rt0.c1, rt0.c2, rt0.c3))), json_array_length(rt0.c1), rt0.c0))<(((((rt0.c3))>((rt0.c0))), ((rt0.c3)=('AN喚H')), (((rt0.c2, rt0.c1))==(('0.964813790745092', rt0.c3)))))), ((rt0.c3 COLLATE RTRIM) NOT BETWEEN (((((((rt0.c1)OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c3))) AND (rt0.c0 COLLATE NOCASE)) DESC INTERSECT SELECT MIN(rt0.c0) FROM rt0 WHERE (CAST(SQLITE_VERSION() AS NUMERIC)) ORDER BY ((((((NULL, rt0.c1, rt0.c2, rt0.c2, rt0.c1)) BETWEEN ((NULL, rt0.c3, 0.6890160182444096, rt0.c3, rt0.c3)) AND ((rt0.c2, NULL, rt0.c1, rt0.c2, rt0.c3))), json_array_length(rt0.c1), rt0.c0))<(((((rt0.c3))>((rt0.c0))), ((rt0.c3)=('AN喚H')), (((rt0.c2, rt0.c1))==(('0.964813790745092', rt0.c3)))))), ((rt0.c3 COLLATE RTRIM) NOT BETWEEN (((((((rt0.c1)OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c3))) AND (rt0.c0 COLLATE NOCASE)) DESC;
SELECT * FROM vt1 WHERE (CAST('U' AS BLOB)) ORDER BY CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE RTRIM, vt1.c0 ASC, ((LTRIM(vt1.c0))*(((vt1.c0)!=(vt1.c0)))) DESC;
SELECT ALL * FROM vt1 WHERE (((CAST('U' AS BLOB))AND(vt1.c0))) ORDER BY CAST('' AS INTEGER) ASC, CAST(vt1.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST;
SELECT * FROM vt1 WHERE (CAST('U' AS BLOB)) ORDER BY CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE RTRIM, vt1.c0 ASC, ((LTRIM(vt1.c0))*(((vt1.c0)!=(vt1.c0)))) DESC;
SELECT ALL * FROM vt1 WHERE (((CAST('U' AS BLOB))AND(vt1.c0))) ORDER BY CAST('' AS INTEGER) ASC, CAST(vt1.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST;
SELECT ALL MAX(rt0.c3) FROM vt1 NATURAL JOIN rt0 WHERE ('0.5286762140952553') ORDER BY ((((rt0.c0) IS FALSE))&(((rt0.c1)>(vt1.c0)))) DESC  NULLS LAST, (((vt1.c0)AND(rt0.c2)) IN ()) ASC  NULLS LAST, IFNULL(DISTINCT CASE WHEN rt0.c1 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 END, rt0.c3)  NULLS LAST;
SELECT ALL MAX(rt0.c3) FROM vt1 NATURAL JOIN rt0 WHERE ('0.5286762140952553') ORDER BY ((x'3c8d20')|(((rt0.c2) NOT BETWEEN (rt0.c3) AND (NULL)))) ASC  NULLS LAST, ((((((((rt0.c3 COLLATE NOCASE)OR(((rt0.c3) ISNULL))))OR(((vt1.c0)AND(vt1.c0)))))AND(((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c3)))))OR((~ (rt0.c3)))) LIMIT 2 INTERSECT SELECT MAX(rt0.c3) FROM vt1 NATURAL JOIN rt0 WHERE (CASE (((rt0.c3))<>((rt0.c3)))  WHEN CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END THEN '-781367930' WHEN ((rt0.c3) IS TRUE) THEN ((vt1.c0) NOTNULL) ELSE CAST(NULL AS TEXT) END) ORDER BY ((x'3c8d20')|(((rt0.c2) NOT BETWEEN (rt0.c3) AND (NULL)))) ASC  NULLS LAST, ((((((((rt0.c3 COLLATE NOCASE)OR(((rt0.c3) ISNULL))))OR(((vt1.c0)AND(vt1.c0)))))AND(((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c3)))))OR((~ (rt0.c3)))) LIMIT 0X2;
SELECT * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE NOCASE)<(rt0.c2 COLLATE RTRIM)));
SELECT ALL * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE NOCASE)<(rt0.c2 COLLATE RTRIM))) ORDER BY rt0.c2 ASC  NULLS LAST, (~ ((rt0.c3 IN (vt1.c0))))  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE NOCASE)<(rt0.c2 COLLATE RTRIM)));
SELECT ALL * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE NOCASE)<(rt0.c2 COLLATE RTRIM))) ORDER BY rt0.c2 ASC  NULLS LAST, (~ ((rt0.c3 IN (vt1.c0))))  NULLS FIRST;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (CAST(rt0.c1 COLLATE NOCASE AS REAL));
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (CAST(rt0.c1 COLLATE NOCASE AS REAL)) ORDER BY CASE ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3))  WHEN (((vt1.c0))=((rt0.c0))) THEN rt0.c2 WHEN ((rt0.c0) BETWEEN ('^gq') AND (vt1.c0)) THEN json('') ELSE x'067e' END DESC  NULLS FIRST, (((-5.78917606E8))==(((((rt0.c2))>((rt0.c0))))));
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (LIKELIHOOD((NOT (0.5327736470963562)), ((((((((vt1.c0)OR(rt0.c2)))OR(1993251804)))AND(rt0.c3)))AND(rt0.c3)))) ORDER BY ((rt0.c1)=(vt1.c0)) COLLATE BINARY ASC  NULLS LAST, ((((rt0.c1)||(rt0.c1))) NOT BETWEEN (((rt0.c1)=(NULL))) AND (LIKELIHOOD(DISTINCT x'', rt0.c2))) ASC, (- (TRIM(rt0.c2)));
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (LIKELIHOOD((NOT (0.5327736470963562)), ((((((((vt1.c0)OR(rt0.c2)))OR(0x76ce9bdc)))AND(rt0.c3)))AND(rt0.c3)))) ORDER BY (((((((((((rt0.c3)AND(vt1.c0)))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c1)), (('{I') IS FALSE)))<>((((('907955026'))>((vt1.c0))), (rt0.c1 IN (rt0.c3))))) DESC, x'' LIMIT 0 INTERSECT SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (CASE WHEN ((rt0.c0) BETWEEN (rt0.c0) AND ('-73167153')) THEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN x'bd31' THEN rt0.c0 WHEN '-' THEN rt0.c3 ELSE rt0.c3 END WHEN ((((((rt0.c0)OR(rt0.c0)))AND(rt0.c2)))AND(rt0.c2)) THEN TRIM(rt0.c0, vt1.c0) ELSE json_remove(rt0.c2, x'9a0e', rt0.c2, rt0.c1, vt1.c0) END) ORDER BY (((((((((((rt0.c3)AND(vt1.c0)))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c1)), (('{I') IS FALSE)))<>((((('907955026'))>((vt1.c0))), (rt0.c1 IN (rt0.c3))))) DESC, x'' LIMIT 0x0;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((((rt0.c0)-(vt1.c0)))%(rt0.c1 COLLATE RTRIM))) ORDER BY rt0.c0 DESC;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((rt0.c0)-(vt1.c0)))%(rt0.c1 COLLATE RTRIM))) ORDER BY rt0.c0 DESC LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((rt0.c0)IS(rt0.c0)))IS NOT(((rt0.c1)||(rt0.c0))))) ORDER BY rt0.c0 DESC LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c2) ORDER BY rt0.c2 ASC, (- (x'')) COLLATE BINARY DESC  NULLS FIRST, ((((((((((((rt0.c1)AND(rt0.c1)))AND(vt1.c0)))AND(0.3362864835934438)))OR(vt1.c0)))AND(rt0.c0 COLLATE BINARY)))OR((rt0.c3 IN (rt0.c0, vt1.c0, rt0.c1)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c2)AND((((vt1.c0)) NOT BETWEEN (((((rt0.c3, rt0.c3)) BETWEEN ((NULL, rt0.c1)) AND ((x'', vt1.c0))))) AND (((('223131609')+(rt0.c0)))))))) ORDER BY rt0.c2 ASC, (- (x'')) COLLATE BINARY DESC  NULLS FIRST, ((((((((((((rt0.c1)AND(rt0.c1)))AND(vt1.c0)))AND(0.3362864835934438)))OR(vt1.c0)))AND(rt0.c0 COLLATE BINARY)))OR((rt0.c3 IN (rt0.c0, vt1.c0, rt0.c1)))) DESC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c2) ORDER BY rt0.c2 ASC, (- (x'')) COLLATE BINARY DESC  NULLS FIRST, ((((((((((((rt0.c1)AND(rt0.c1)))AND(vt1.c0)))AND(0.3362864835934438)))OR(vt1.c0)))AND(rt0.c0 COLLATE BINARY)))OR((rt0.c3 IN (rt0.c0, vt1.c0, rt0.c1)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c2)AND((((vt1.c0)) NOT BETWEEN (((((rt0.c3, rt0.c3)) BETWEEN ((NULL, rt0.c1)) AND ((x'', vt1.c0))))) AND (((('223131609')+(rt0.c0)))))))) ORDER BY rt0.c2 ASC, (- (x'')) COLLATE BINARY DESC  NULLS FIRST, ((((((((((((rt0.c1)AND(rt0.c1)))AND(vt1.c0)))AND(0.3362864835934438)))OR(vt1.c0)))AND(rt0.c0 COLLATE BINARY)))OR((rt0.c3 IN (rt0.c0, vt1.c0, rt0.c1)))) DESC  NULLS FIRST LIMIT 1;
SELECT * FROM vt1 WHERE (-1543606588) ORDER BY ((- (vt1.c0)) IN (NULL)) ASC  NULLS LAST, CAST((+ (vt1.c0)) AS BLOB);
SELECT ALL * FROM vt1 WHERE (-1543606588) ORDER BY ((((vt1.c0 IN (vt1.c0))))<>((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN 0.8794866372695419 THEN vt1.c0 WHEN vt1.c0 THEN '-180511836' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ASC LIMIT 0X0;
SELECT * FROM vt1 WHERE (-1543606588) ORDER BY ((- (vt1.c0)) IN (NULL)) ASC  NULLS LAST, CAST((+ (vt1.c0)) AS BLOB);
SELECT ALL * FROM vt1 WHERE (-1543606588) ORDER BY ((((vt1.c0 IN (vt1.c0))))<>((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN 0.8794866372695419 THEN vt1.c0 WHEN vt1.c0 THEN '-180511836' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ASC LIMIT 0X0;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((((CASE rt0.c0  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END)AND(CAST(rt0.c2 AS TEXT))))OR(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 END)));
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((((CASE rt0.c0  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END)AND(CAST(rt0.c2 AS TEXT))))OR(CASE rt0.c3  WHEN rt0.c0 THEN rt0.c0 END))) ORDER BY x'57ba' ASC, (- (((NULL) IS FALSE))) DESC  NULLS LAST LIMIT 0X0;
SELECT COUNT(*) FROM vt1 WHERE (CASE (vt1.c0 IN (vt1.c0))  WHEN (((vt1.c0, NULL, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0))) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN (((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0))) THEN vt1.c0 COLLATE RTRIM WHEN (~ (vt1.c0)) THEN CASE WHEN vt1.c0 THEN vt1.c0 END WHEN (vt1.c0 IN ()) THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) ELSE TYPEOF(DISTINCT 0X50795264) END);
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE (vt1.c0 IN (vt1.c0))  WHEN (((vt1.c0, NULL, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0))) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN (((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0))) THEN vt1.c0 COLLATE RTRIM WHEN (~ (vt1.c0)) THEN CASE WHEN vt1.c0 THEN vt1.c0 END WHEN (vt1.c0 IN ()) THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) ELSE TYPEOF(DISTINCT 0x50795264) END) ORDER BY (((((((((- (vt1.c0)))AND((((NULL))>=((0x55bc43f8))))))OR((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))))OR(CAST(vt1.c0 AS TEXT))))OR(((vt1.c0)IS NOT(vt1.c0))))  NULLS LAST, '426117718' ASC LIMIT 0X0 INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (((0.47544679518541666 COLLATE RTRIM) IS FALSE)) ORDER BY (((((((((- (vt1.c0)))AND((((NULL))>=((0x55bc43f8))))))OR((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))))OR(CAST(vt1.c0 AS TEXT))))OR(((vt1.c0)IS NOT(vt1.c0))))  NULLS LAST, '426117718' ASC LIMIT 0x0;
SELECT * FROM vt1, rt0 WHERE (CAST(((((vt1.c0)OR(rt0.c2)))AND(rt0.c3)) AS INTEGER));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(((((vt1.c0)OR(rt0.c2)))AND(rt0.c3)) AS INTEGER))AND((rt0.c2 IN ()) COLLATE RTRIM))) ORDER BY (((~ (rt0.c3)))AND(NULL)) ASC;
SELECT * FROM vt1, rt0 WHERE (CAST(((((vt1.c0)OR(rt0.c2)))AND(rt0.c3)) AS INTEGER));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(((((vt1.c0)OR(rt0.c2)))AND(rt0.c3)) AS INTEGER))AND((rt0.c2 IN ()) COLLATE RTRIM))) ORDER BY (((~ (rt0.c3)))AND(NULL)) ASC;
SELECT ALL COUNT(*) FROM vt1 CROSS JOIN rt0 ON (((rt0.c2)>>(rt0.c0)) IN ()) WHERE ((((((vt1.c0))<(('')))) NOT NULL)) ORDER BY x'' DESC;
SELECT DISTINCT COUNT(*) FROM vt1 CROSS JOIN rt0 ON (((rt0.c2)>>(rt0.c0)) IN ()) WHERE ((((((((vt1.c0))<(('')))) NOT NULL))AND(rt0.c1))) ORDER BY (((rt0.c1)) NOT BETWEEN ((((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c3)))) AND ((CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c3 END))), ((LOWER(rt0.c2)) NOTNULL) DESC  NULLS LAST, ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 END) BETWEEN (((rt0.c3) NOT BETWEEN (rt0.c1) AND (vt1.c0))) AND (x'84')) ASC  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 CROSS JOIN rt0 ON (((rt0.c2)>>(rt0.c0)) IN ()) WHERE (((((((((vt1.c0)OR(rt0.c3)))OR(vt1.c0)))AND(rt0.c1)))<=(('-618343155' IN ('783243365'))))) ORDER BY (((rt0.c1)) NOT BETWEEN ((((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c3)))) AND ((CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c3 END))), ((LOWER(rt0.c2)) NOTNULL) DESC  NULLS LAST, ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 END) BETWEEN (((rt0.c3) NOT BETWEEN (rt0.c1) AND (vt1.c0))) AND (x'84')) ASC  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((CAST(vt1.c0 AS INTEGER) IN ()));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((CAST(vt1.c0 AS INTEGER) IN ())) LIMIT 0X0 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) NOTNULL)) LIMIT 0x0;
SELECT ALL * FROM rt0, vt1 WHERE (CASE ''  WHEN ((NULL)||(NULL)) THEN rt0.c0 WHEN ((rt0.c0) IS FALSE) THEN ((NULL)<=(rt0.c1)) ELSE UNLIKELY(DISTINCT rt0.c1) END) ORDER BY ((rt0.c3)IS(vt1.c0 COLLATE RTRIM))  NULLS LAST, CAST(((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c0)))AND('0.6005947234803297')))AND(vt1.c0)))OR(vt1.c0)) AS INTEGER)  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ''  WHEN ((NULL)||(NULL)) THEN rt0.c0 WHEN ((rt0.c0) IS FALSE) THEN ((NULL)<=(rt0.c1)) ELSE UNLIKELY(DISTINCT rt0.c1) END) ORDER BY ((rt0.c3)IS(vt1.c0 COLLATE RTRIM))  NULLS LAST, CAST(((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c0)))AND('0.6005947234803297')))AND(vt1.c0)))OR(vt1.c0)) AS INTEGER)  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (CASE ''  WHEN ((NULL)||(NULL)) THEN rt0.c0 WHEN ((rt0.c0) IS FALSE) THEN ((NULL)<=(rt0.c1)) ELSE UNLIKELY(DISTINCT rt0.c1) END) ORDER BY ((rt0.c3)IS(vt1.c0 COLLATE RTRIM))  NULLS LAST, CAST(((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c0)))AND('0.6005947234803297')))AND(vt1.c0)))OR(vt1.c0)) AS INTEGER)  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ''  WHEN ((NULL)||(NULL)) THEN rt0.c0 WHEN ((rt0.c0) IS FALSE) THEN ((NULL)<=(rt0.c1)) ELSE UNLIKELY(DISTINCT rt0.c1) END) ORDER BY ((rt0.c3)IS(vt1.c0 COLLATE RTRIM))  NULLS LAST, CAST(((((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c0)))AND('0.6005947234803297')))AND(vt1.c0)))OR(vt1.c0)) AS INTEGER)  NULLS LAST;
SELECT * FROM vt1 WHERE ((((((((((((vt1.c0))<=((vt1.c0))))AND(((vt1.c0)-(vt1.c0)))))AND(((vt1.c0)==(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))))OR((vt1.c0 IN (vt1.c0)))));
SELECT * FROM vt1 WHERE ((((((((((((vt1.c0))<((vt1.c0))))AND(((vt1.c0)-(vt1.c0)))))AND(((vt1.c0)=(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))))OR((vt1.c0 IN (vt1.c0))))) INTERSECT SELECT * FROM vt1 WHERE ((((((x'7f837c', vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, 0xf73dfe7))))&(0.43769968171286733)));
SELECT * FROM vt1 WHERE ((((((((((((vt1.c0))<=((vt1.c0))))AND(((vt1.c0)-(vt1.c0)))))AND(((vt1.c0)==(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))))OR((vt1.c0 IN (vt1.c0)))));
SELECT * FROM vt1 WHERE ((((((((((((vt1.c0))<((vt1.c0))))AND(((vt1.c0)-(vt1.c0)))))AND(((vt1.c0)=(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))))OR((vt1.c0 IN (vt1.c0))))) INTERSECT SELECT * FROM vt1 WHERE ((((((x'7f837c', vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, 0xf73dfe7))))&(0.43769968171286733)));
SELECT ALL * FROM rt0 WHERE (((((((rt0.c3)!=(rt0.c3)))AND(rt0.c0 COLLATE BINARY)))AND(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY (~ (((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c1)))OR(-1388666308)))AND(rt0.c0)))AND(rt0.c2)))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (((((((rt0.c3)<(rt0.c3)))AND(rt0.c0 COLLATE BINARY)))AND(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY TRIM(((((rt0.c3)AND(rt0.c3)))OR(rt0.c3))) ASC, (((((rt0.c2 IN (rt0.c0, rt0.c2)))OR((((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c1, rt0.c0))))))AND(((rt0.c2) ISNULL))) ASC  NULLS FIRST, (((rt0.c0, rt0.c0, rt0.c1, rt0.c1)) BETWEEN (((((rt0.c3))<>((rt0.c0))), (+ (rt0.c2)), ((rt0.c1)OR(rt0.c3)), (rt0.c1 IN (-116899011)))) AND (((((rt0.c1, rt0.c1)) BETWEEN ((rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c0))), json_array(rt0.c1, 0.5551252374330624), x'60552d' COLLATE NOCASE, (rt0.c0 IN (rt0.c0, rt0.c0, 'zB'))))) INTERSECT SELECT * FROM rt0 WHERE (rt0.c3) ORDER BY TRIM(((((rt0.c3)AND(rt0.c3)))OR(rt0.c3))) ASC, (((((rt0.c2 IN (rt0.c0, rt0.c2)))OR((((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c1, rt0.c0))))))AND(((rt0.c2) ISNULL))) ASC  NULLS FIRST, (((rt0.c0, rt0.c0, rt0.c1, rt0.c1)) BETWEEN (((((rt0.c3))<>((rt0.c0))), (+ (rt0.c2)), ((rt0.c1)OR(rt0.c3)), (rt0.c1 IN (-116899011)))) AND (((((rt0.c1, rt0.c1)) BETWEEN ((rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c0))), json_array(rt0.c1, 0.5551252374330624), x'60552d' COLLATE NOCASE, (rt0.c0 IN (rt0.c0, rt0.c0, 'zB')))));
SELECT ALL * FROM rt0 WHERE (((((((rt0.c3)!=(rt0.c3)))AND(rt0.c0 COLLATE BINARY)))AND(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY (~ (((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c1)))OR(-1388666308)))AND(rt0.c0)))AND(rt0.c2)))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (((((((rt0.c3)<(rt0.c3)))AND(rt0.c0 COLLATE BINARY)))AND(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY TRIM(((((rt0.c3)AND(rt0.c3)))OR(rt0.c3))) ASC, (((((rt0.c2 IN (rt0.c0, rt0.c2)))OR((((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c1, rt0.c0))))))AND(((rt0.c2) ISNULL))) ASC  NULLS FIRST, (((rt0.c0, rt0.c0, rt0.c1, rt0.c1)) BETWEEN (((((rt0.c3))<>((rt0.c0))), (+ (rt0.c2)), ((rt0.c1)OR(rt0.c3)), (rt0.c1 IN (-116899011)))) AND (((((rt0.c1, rt0.c1)) BETWEEN ((rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c0))), json_array(rt0.c1, 0.5551252374330624), x'60552d' COLLATE NOCASE, (rt0.c0 IN (rt0.c0, rt0.c0, 'zB'))))) INTERSECT SELECT * FROM rt0 WHERE (rt0.c3) ORDER BY TRIM(((((rt0.c3)AND(rt0.c3)))OR(rt0.c3))) ASC, (((((rt0.c2 IN (rt0.c0, rt0.c2)))OR((((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c1, rt0.c0))))))AND(((rt0.c2) ISNULL))) ASC  NULLS FIRST, (((rt0.c0, rt0.c0, rt0.c1, rt0.c1)) BETWEEN (((((rt0.c3))<>((rt0.c0))), (+ (rt0.c2)), ((rt0.c1)OR(rt0.c3)), (rt0.c1 IN (-116899011)))) AND (((((rt0.c1, rt0.c1)) BETWEEN ((rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c0))), json_array(rt0.c1, 0.5551252374330624), x'60552d' COLLATE NOCASE, (rt0.c0 IN (rt0.c0, rt0.c0, 'zB')))));
SELECT * FROM rt0, vt1 WHERE (((((rt0.c3)OR(rt0.c0))) ISNULL));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c3)OR(rt0.c0))) ISNULL))AND(((((vt1.c0)/(rt0.c1))) ISNULL)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (IFNULL((+ (rt0.c1)), vt1.c0 COLLATE RTRIM));
SELECT * FROM rt0, vt1 WHERE (((((rt0.c3)OR(rt0.c0))) ISNULL));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c3)OR(rt0.c0))) ISNULL))AND(((((vt1.c0)/(rt0.c1))) ISNULL)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (IFNULL((+ (rt0.c1)), vt1.c0 COLLATE RTRIM));
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (((((rt0.c2, rt0.c1))==((rt0.c3, vt1.c0))))%(ABS(DISTINCT rt0.c1))) WHERE (((((rt0.c3)-(rt0.c3)))<=(((rt0.c2) NOT NULL))));
SELECT * FROM rt0 INNER JOIN vt1 ON (((((rt0.c2, rt0.c1))==((rt0.c3, vt1.c0))))%(ABS(DISTINCT rt0.c1))) WHERE (((((((rt0.c3)-(rt0.c3)))<=(((rt0.c2) NOT NULL))))AND(HEX(DISTINCT ((vt1.c0) ISNULL))))) LIMIT 0x4;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (((((rt0.c2, rt0.c1))==((rt0.c3, vt1.c0))))%(ABS(DISTINCT rt0.c1))) WHERE (((((rt0.c3)-(rt0.c3)))<=(((rt0.c2) NOT NULL))));
SELECT * FROM rt0 INNER JOIN vt1 ON (((((rt0.c2, rt0.c1))==((rt0.c3, vt1.c0))))%(ABS(DISTINCT rt0.c1))) WHERE (((((((rt0.c3)-(rt0.c3)))<=(((rt0.c2) NOT NULL))))AND(HEX(DISTINCT ((vt1.c0) ISNULL))))) LIMIT 0x4;
SELECT ALL * FROM rt0 WHERE (SQLITE_COMPILEOPTION_USED(CAST(rt0.c0 AS TEXT))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2))) NOT BETWEEN (CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 WHEN '0.8778789546857406' THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN '' WHEN rt0.c1 THEN rt0.c0 END) AND (rt0.c3)), (((rt0.c3, rt0.c1, '-1049119706'))<((rt0.c3, rt0.c0, rt0.c2))) COLLATE BINARY DESC;
SELECT ALL * FROM rt0 WHERE (((SQLITE_COMPILEOPTION_USED(CAST(rt0.c0 AS TEXT)))AND(NULLIF(DISTINCT x'', UNLIKELY(rt0.c0))))) ORDER BY CAST(rt0.c0 COLLATE NOCASE AS BLOB);
SELECT ALL * FROM rt0 WHERE (SQLITE_COMPILEOPTION_USED(CAST(rt0.c0 AS TEXT))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2))) NOT BETWEEN (CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 WHEN '0.8778789546857406' THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN '' WHEN rt0.c1 THEN rt0.c0 END) AND (rt0.c3)), (((rt0.c3, rt0.c1, '-1049119706'))<((rt0.c3, rt0.c0, rt0.c2))) COLLATE BINARY DESC;
SELECT ALL * FROM rt0 WHERE (((SQLITE_COMPILEOPTION_USED(CAST(rt0.c0 AS TEXT)))AND(NULLIF(DISTINCT x'', UNLIKELY(rt0.c0))))) ORDER BY CAST(rt0.c0 COLLATE NOCASE AS BLOB);
SELECT MIN(rt0.c3) FROM rt0 WHERE ((+ (((rt0.c1) NOTNULL))));
SELECT MIN(rt0.c3) FROM rt0 WHERE ((((+ (((rt0.c1) NOTNULL))))AND(highlight(((rt0.c1) IS TRUE), (rt0.c2 IN ()), ((rt0.c2) IS FALSE), (((rt0.c1, rt0.c1)) BETWEEN ((rt0.c3, rt0.c0)) AND ((rt0.c0, rt0.c3))))))) LIMIT 0;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((- (((x'c2e0c3c5')<=(rt0.c0)))));
SELECT MIN(rt0.c3) FROM rt0 WHERE ((- (((x'c2e0c3c5')<=(rt0.c0)))));
SELECT MIN(vt1.c0) FROM vt1 WHERE ((vt1.c0 COLLATE RTRIM IN (vt1.c0, ((vt1.c0) IS TRUE))));
SELECT MIN(vt1.c0) FROM vt1 WHERE ((vt1.c0 COLLATE RTRIM IN (vt1.c0, ((vt1.c0) IS TRUE)))) LIMIT 0X0 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(0.404592676535915))) BETWEEN (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))))) LIMIT 0X0;
SELECT * FROM rt0 WHERE ('-781367930') ORDER BY rtreenode(0.3970091351339927, ((rt0.c1)IS NOT(rt0.c0))) ASC, rt0.c1 DESC  NULLS LAST, ((json_quote(0.5240023075913915))OR(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END))  NULLS FIRST;
SELECT * FROM rt0 WHERE ('-781367930') ORDER BY rtreenode(0.3970091351339927, ((rt0.c1)IS NOT(rt0.c0))) ASC, rt0.c1 DESC  NULLS LAST, ((json_quote(0.5240023075913915))OR(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END))  NULLS FIRST LIMIT 4 INTERSECT SELECT ALL * FROM rt0 WHERE ((rt0.c3 IN ())) ORDER BY rtreenode(0.3970091351339927, ((rt0.c1)IS NOT(rt0.c0))) ASC, rt0.c1 DESC  NULLS LAST, ((json_quote(0.5240023075913915))OR(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END))  NULLS FIRST LIMIT 0X4;
SELECT * FROM rt0 WHERE ('-781367930') ORDER BY rtreenode(0.3970091351339927, ((rt0.c1)IS NOT(rt0.c0))) ASC, rt0.c1 DESC  NULLS LAST, ((json_quote(0.5240023075913915))OR(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END))  NULLS FIRST;
SELECT * FROM rt0 WHERE ('-781367930') ORDER BY rtreenode(0.3970091351339927, ((rt0.c1)IS NOT(rt0.c0))) ASC, rt0.c1 DESC  NULLS LAST, ((json_quote(0.5240023075913915))OR(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END))  NULLS FIRST LIMIT 4 INTERSECT SELECT ALL * FROM rt0 WHERE ((rt0.c3 IN ())) ORDER BY rtreenode(0.3970091351339927, ((rt0.c1)IS NOT(rt0.c0))) ASC, rt0.c1 DESC  NULLS LAST, ((json_quote(0.5240023075913915))OR(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c2 END))  NULLS FIRST LIMIT 0X4;
SELECT ALL * FROM vt1 WHERE (NULL);
SELECT * FROM vt1 WHERE (((NULL)AND((~ (((vt1.c0)>=(vt1.c0))))))) ORDER BY vt1.c0 LIMIT 0x0 INTERSECT SELECT * FROM vt1 WHERE (CASE WHEN vt1.c0 COLLATE RTRIM THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 1005304282 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN CAST(vt1.c0 AS BLOB) THEN (- (vt1.c0)) ELSE ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) END) ORDER BY vt1.c0 LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (NULL);
SELECT * FROM vt1 WHERE (((NULL)AND((~ (((vt1.c0)>=(vt1.c0))))))) ORDER BY vt1.c0 LIMIT 0x0 INTERSECT SELECT * FROM vt1 WHERE (CASE WHEN vt1.c0 COLLATE RTRIM THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 1005304282 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN CAST(vt1.c0 AS BLOB) THEN (- (vt1.c0)) ELSE ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) END) ORDER BY vt1.c0 LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))IS(((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))IS(((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))))) ORDER BY vt1.c0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE vt1.c0  WHEN '1215174744' THEN CAST(vt1.c0 AS REAL) ELSE ((((vt1.c0)OR(vt1.c0)))AND(0.5848831188247477)) END) ORDER BY vt1.c0;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))IS(((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))IS(((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))))) ORDER BY vt1.c0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE vt1.c0  WHEN '1215174744' THEN CAST(vt1.c0 AS REAL) ELSE ((((vt1.c0)OR(vt1.c0)))AND(0.5848831188247477)) END) ORDER BY vt1.c0;
SELECT * FROM vt1 WHERE (((UNLIKELY(DISTINCT vt1.c0)) NOTNULL));
SELECT ALL * FROM vt1 WHERE (((UNLIKELY(DISTINCT vt1.c0)) NOTNULL)) ORDER BY vt1.c0 COLLATE NOCASE INTERSECT SELECT * FROM vt1 WHERE ((~ ((~ (vt1.c0))))) ORDER BY vt1.c0 COLLATE NOCASE;
SELECT * FROM vt1 WHERE (((UNLIKELY(DISTINCT vt1.c0)) NOTNULL));
SELECT ALL * FROM vt1 WHERE (((UNLIKELY(DISTINCT vt1.c0)) NOTNULL)) ORDER BY vt1.c0 COLLATE NOCASE INTERSECT SELECT * FROM vt1 WHERE ((~ ((~ (vt1.c0))))) ORDER BY vt1.c0 COLLATE NOCASE;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (COALESCE(((rt0.c2)IS NOT(rt0.c3)), (vt1.c0 IN (rt0.c1, rt0.c0, vt1.c0)), (0.97130683161993 IN (rt0.c0, vt1.c0)), (((((('')OR(vt1.c0)))OR('0.04157587481795155')))OR(vt1.c0))));
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (((COALESCE(((rt0.c2)IS NOT(rt0.c3)), (vt1.c0 IN (rt0.c1, rt0.c0, vt1.c0)), (0.97130683161993 IN (rt0.c0, vt1.c0)), (((((('')OR(vt1.c0)))OR('0.04157587481795155')))OR(vt1.c0))))AND(CAST((NOT (rt0.c1)) AS NUMERIC)))) ORDER BY rt0.c0  NULLS FIRST, (rtreenode(rt0.c2, rt0.c0) IN (((-1.127236167E9) NOT BETWEEN (rt0.c1) AND (rt0.c2)))) DESC  NULLS FIRST;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE ((((rt0.c3 IN (rt0.c3)))AND(((((((((((rt0.c0)OR(rt0.c1)))AND(x'7398')))OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c1)))));
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE ((((rt0.c3 IN (rt0.c3)))AND(((((((((((rt0.c0)OR(rt0.c1)))AND(x'7398')))OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c1))))) INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (CAST(0.7898876556595622 AS TEXT));
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((((rt0.c2, rt0.c0, rt0.c1)) BETWEEN ((rt0.c0, rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c0, rt0.c3)))))<((NULL))));
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE (((((((rt0.c2, rt0.c0, rt0.c1)) BETWEEN ((rt0.c0, rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c0, rt0.c3)))))<((NULL)))) ORDER BY '' ASC  NULLS FIRST, CASE rt0.c1 COLLATE BINARY  WHEN (((rt0.c0, rt0.c3, 0x4c21a33c))>=((rt0.c3, rt0.c3, rt0.c2))) THEN CAST(rt0.c3 AS BLOB) WHEN (rt0.c1 IN ()) THEN NULL END;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((vt1.c0) ISNULL))<(CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c3 END)));
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((vt1.c0) ISNULL))<(CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c3 END)));
SELECT ALL * FROM rt0, vt1 WHERE (CASE ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3))  WHEN 0.08635199058615928 THEN ((('-2051742299', rt0.c3)) BETWEEN ((vt1.c0, rt0.c2)) AND ((rt0.c1, rt0.c3))) WHEN ((rt0.c3)OR(rt0.c1)) THEN CAST(rt0.c2 AS BLOB) WHEN (((vt1.c0, rt0.c0))>((0.6674923256281956, rt0.c1))) THEN (((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))) WHEN (- (rt0.c2)) THEN UPPER(rt0.c1) END);
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3))  WHEN 0.08635199058615928 THEN ((('-2051742299', rt0.c3)) BETWEEN ((vt1.c0, rt0.c2)) AND ((rt0.c1, rt0.c3))) WHEN ((rt0.c3)OR(rt0.c1)) THEN CAST(rt0.c2 AS BLOB) WHEN (((vt1.c0, rt0.c0))>((0.6674923256281956, rt0.c1))) THEN (((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))) WHEN (- (rt0.c2)) THEN UPPER(rt0.c1) END) ORDER BY rt0.c3  NULLS LAST, ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) BETWEEN (TRIM(DISTINCT rt0.c0, rt0.c2)) AND ((rt0.c2 IN (rt0.c3)))) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN ((NULL)>(vt1.c0)) THEN ((vt1.c0) NOT BETWEEN (rt0.c2) AND ('1965182289')) ELSE vt1.c0 END) ORDER BY rt0.c3  NULLS LAST, ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) BETWEEN (TRIM(DISTINCT rt0.c0, rt0.c2)) AND ((rt0.c2 IN (rt0.c3)))) ASC LIMIT 0X0;
SELECT ALL * FROM rt0, vt1 WHERE (CASE ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3))  WHEN 0.08635199058615928 THEN ((('-2051742299', rt0.c3)) BETWEEN ((vt1.c0, rt0.c2)) AND ((rt0.c1, rt0.c3))) WHEN ((rt0.c3)OR(rt0.c1)) THEN CAST(rt0.c2 AS BLOB) WHEN (((vt1.c0, rt0.c0))>((0.6674923256281956, rt0.c1))) THEN (((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))) WHEN (- (rt0.c2)) THEN UPPER(rt0.c1) END);
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3))  WHEN 0.08635199058615928 THEN ((('-2051742299', rt0.c3)) BETWEEN ((vt1.c0, rt0.c2)) AND ((rt0.c1, rt0.c3))) WHEN ((rt0.c3)OR(rt0.c1)) THEN CAST(rt0.c2 AS BLOB) WHEN (((vt1.c0, rt0.c0))>((0.6674923256281956, rt0.c1))) THEN (((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))) WHEN (- (rt0.c2)) THEN UPPER(rt0.c1) END) ORDER BY rt0.c3  NULLS LAST, ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) BETWEEN (TRIM(DISTINCT rt0.c0, rt0.c2)) AND ((rt0.c2 IN (rt0.c3)))) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN ((NULL)>(vt1.c0)) THEN ((vt1.c0) NOT BETWEEN (rt0.c2) AND ('1965182289')) ELSE vt1.c0 END) ORDER BY rt0.c3  NULLS LAST, ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) BETWEEN (TRIM(DISTINCT rt0.c0, rt0.c2)) AND ((rt0.c2 IN (rt0.c3)))) ASC LIMIT 0X0;
SELECT ALL * FROM vt1, rt0 WHERE ((((LIKELY(rt0.c1), ((rt0.c2)LIKE(rt0.c1))))<=((CAST(rt0.c3 AS INTEGER), ((((((((rt0.c1)AND(rt0.c2)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c2))))));
SELECT * FROM vt1, rt0 WHERE ((((LIKELY(rt0.c1), ((rt0.c2)LIKE(rt0.c1))))<=((CAST(rt0.c3 AS INTEGER), ((((((((rt0.c1)AND(rt0.c2)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)))))) ORDER BY (x'28' IN (((vt1.c0) BETWEEN (rt0.c0) AND (vt1.c0)))) DESC  NULLS FIRST, CAST(CAST(rt0.c1 AS BLOB) AS TEXT) DESC;
SELECT ALL * FROM vt1, rt0 WHERE ((((LIKELY(rt0.c1), ((rt0.c2)LIKE(rt0.c1))))<=((CAST(rt0.c3 AS INTEGER), ((((((((rt0.c1)AND(rt0.c2)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c2))))));
SELECT * FROM vt1, rt0 WHERE ((((LIKELY(rt0.c1), ((rt0.c2)LIKE(rt0.c1))))<=((CAST(rt0.c3 AS INTEGER), ((((((((rt0.c1)AND(rt0.c2)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)))))) ORDER BY (x'28' IN (((vt1.c0) BETWEEN (rt0.c0) AND (vt1.c0)))) DESC  NULLS FIRST, CAST(CAST(rt0.c1 AS BLOB) AS TEXT) DESC;
SELECT * FROM vt1 WHERE (((vt1.c0)&(vt1.c0)) COLLATE NOCASE) ORDER BY x'f680'  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((vt1.c0)&(vt1.c0)) COLLATE NOCASE)AND((((((((((vt1.c0 IN (vt1.c0)))AND(((vt1.c0) IS TRUE))))OR(((vt1.c0)LIKE(vt1.c0)))))AND('q]뚷')))OR(TRIM(DISTINCT vt1.c0)))))) ORDER BY x'f680'  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE (CASE x'4768'  WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN x'15' WHEN vt1.c0 COLLATE NOCASE THEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END ELSE ((vt1.c0)|(vt1.c0)) END) ORDER BY x'f680'  NULLS FIRST LIMIT 0;
SELECT * FROM vt1 WHERE (((vt1.c0)&(vt1.c0)) COLLATE NOCASE) ORDER BY x'f680'  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((vt1.c0)&(vt1.c0)) COLLATE NOCASE)AND((((((((((vt1.c0 IN (vt1.c0)))AND(((vt1.c0) IS TRUE))))OR(((vt1.c0)LIKE(vt1.c0)))))AND('q]뚷')))OR(TRIM(DISTINCT vt1.c0)))))) ORDER BY x'f680'  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE (CASE x'4768'  WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN x'15' WHEN vt1.c0 COLLATE NOCASE THEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END ELSE ((vt1.c0)|(vt1.c0)) END) ORDER BY x'f680'  NULLS FIRST LIMIT 0;
SELECT * FROM rt0 WHERE (((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c0)) COLLATE BINARY) ORDER BY UNLIKELY((((rt0.c1))>((x'c8c2cf'))));
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c0)) COLLATE BINARY) ORDER BY UNLIKELY((((rt0.c1))>((x'c8c2cf')))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((+ ((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c2)) AND ((rt0.c3, rt0.c3)))))) ORDER BY UNLIKELY((((rt0.c1))>((x'c8c2cf'))));
SELECT * FROM rt0 WHERE (((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c0)) COLLATE BINARY) ORDER BY UNLIKELY((((rt0.c1))>((x'c8c2cf'))));
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c0)) COLLATE BINARY) ORDER BY UNLIKELY((((rt0.c1))>((x'c8c2cf')))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((+ ((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c2)) AND ((rt0.c3, rt0.c3)))))) ORDER BY UNLIKELY((((rt0.c1))>((x'c8c2cf'))));
SELECT ALL * FROM vt1 WHERE (((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND('0.8735340297327784')))&(vt1.c0 COLLATE BINARY))) ORDER BY vt1.c0 ASC  NULLS LAST, ((vt1.c0)IS(0.021337150534368243)) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND('0.8735340297327784')))&(vt1.c0 COLLATE BINARY)))AND(((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) IS TRUE)))) ORDER BY vt1.c0 ASC  NULLS LAST, ((vt1.c0)IS(0.021337150534368243)) COLLATE BINARY ASC  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt1 NOT INDEXED WHERE (((((vt1.c0)==(vt1.c0)))>>(((vt1.c0) IS FALSE)))) ORDER BY vt1.c0 ASC  NULLS LAST, ((vt1.c0)IS(0.021337150534368243)) COLLATE BINARY ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND('0.8735340297327784')))&(vt1.c0 COLLATE BINARY))) ORDER BY vt1.c0 ASC  NULLS LAST, ((vt1.c0)IS(0.021337150534368243)) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND('0.8735340297327784')))&(vt1.c0 COLLATE BINARY)))AND(((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) IS TRUE)))) ORDER BY vt1.c0 ASC  NULLS LAST, ((vt1.c0)IS(0.021337150534368243)) COLLATE BINARY ASC  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt1 NOT INDEXED WHERE (((((vt1.c0)==(vt1.c0)))>>(((vt1.c0) IS FALSE)))) ORDER BY vt1.c0 ASC  NULLS LAST, ((vt1.c0)IS(0.021337150534368243)) COLLATE BINARY ASC  NULLS LAST LIMIT 0;
SELECT ALL MAX(rt0.c0) FROM vt1 INNER JOIN rt0 ON ((x'841a5b73')||((~ (rt0.c2)))) WHERE (((((rt0.c3) ISNULL)) NOT NULL));
SELECT ALL MAX(rt0.c0) FROM vt1 INNER JOIN rt0 ON ((x'841a5b73')||((~ (rt0.c2)))) WHERE (((((rt0.c3) ISNULL)) NOT NULL)) ORDER BY LENGTH((rt0.c3 IN ())) ASC;
SELECT * FROM rt0, vt1 WHERE (CAST(((x'') BETWEEN (rt0.c0) AND (rt0.c2)) AS BLOB));
SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(((x'') BETWEEN (rt0.c0) AND (rt0.c2)) AS BLOB)) ORDER BY rt0.c2 COLLATE NOCASE ASC  NULLS LAST, (vt1.c0 IN (0.5265175302515706, rt0.c3)) COLLATE RTRIM  NULLS LAST, '-97448687' ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST((((rt0.c2, vt1.c0))=((rt0.c2, vt1.c0))) AS TEXT)) ORDER BY rt0.c2 COLLATE NOCASE ASC  NULLS LAST, (vt1.c0 IN (0.5265175302515706, rt0.c3)) COLLATE RTRIM  NULLS LAST, '-97448687' ASC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (CAST(((x'') BETWEEN (rt0.c0) AND (rt0.c2)) AS BLOB));
SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(((x'') BETWEEN (rt0.c0) AND (rt0.c2)) AS BLOB)) ORDER BY rt0.c2 COLLATE NOCASE ASC  NULLS LAST, (vt1.c0 IN (0.5265175302515706, rt0.c3)) COLLATE RTRIM  NULLS LAST, '-97448687' ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST((((rt0.c2, vt1.c0))=((rt0.c2, vt1.c0))) AS TEXT)) ORDER BY rt0.c2 COLLATE NOCASE ASC  NULLS LAST, (vt1.c0 IN (0.5265175302515706, rt0.c3)) COLLATE RTRIM  NULLS LAST, '-97448687' ASC  NULLS FIRST;
SELECT COUNT(*) FROM rt0 WHERE (((rt0.c1) NOT NULL));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((rt0.c1) NOT NULL)) LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE (((CAST(NULL AS BLOB))LIKE(SQLITE_VERSION())));
SELECT DISTINCT * FROM rt0 WHERE (((((CAST(NULL AS BLOB))LIKE(SQLITE_VERSION())))AND((((('V')%(rt0.c2))) NOTNULL)))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((CAST(NULL AS BLOB))LIKE(SQLITE_VERSION())));
SELECT DISTINCT * FROM rt0 WHERE (((((CAST(NULL AS BLOB))LIKE(SQLITE_VERSION())))AND((((('V')%(rt0.c2))) NOTNULL)))) LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE (((x'c5') BETWEEN ('-379422826') AND (CASE WHEN x'' THEN x'' END)));
SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE (((x'c5') BETWEEN ('-379422826') AND (CASE WHEN x'' THEN x'' END))) ORDER BY (((((rt0.c0) ISNULL), CASE WHEN rt0.c1 THEN rt0.c2 END, (vt1.c0 IN (rt0.c0)), rt0.c3 COLLATE BINARY))<(((rt0.c0 IN ('-1985949896')), ((vt1.c0)==(rt0.c2)), (((vt1.c0, rt0.c2, rt0.c2)) NOT BETWEEN ((vt1.c0, rt0.c0, vt1.c0)) AND ((rt0.c2, vt1.c0, vt1.c0))), '-1469812196'))), ((((rt0.c2))>((NULL))) IN (((rt0.c0)%(rt0.c1)))) ASC LIMIT 1;
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE (CAST((~ (rt0.c2)) AS REAL)) ORDER BY rt0.c1  NULLS FIRST, rt0.c2, ((((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0))) IS FALSE)  NULLS LAST;
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (CAST((~ (rt0.c2)) AS REAL)) ORDER BY rt0.c1  NULLS FIRST, rt0.c2, ((((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0))) IS FALSE)  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((rt0.c2)OR(rt0.c1)) IN ())) ORDER BY rt0.c2  NULLS FIRST, rt0.c3;
SELECT ALL * FROM rt0 WHERE ((((((rt0.c2)OR(rt0.c1)) IN ()))AND(TYPEOF(DISTINCT ((rt0.c2) BETWEEN ('J自쾖 Y%]~') AND (NULL)))))) ORDER BY ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c3)))|(rt0.c0 COLLATE BINARY))  NULLS LAST, ((x'd460') NOTNULL), CAST((((rt0.c1)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3))) AS REAL) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((((rt0.c2)OR(rt0.c1)) IN ())) ORDER BY rt0.c2  NULLS FIRST, rt0.c3;
SELECT ALL * FROM rt0 WHERE ((((((rt0.c2)OR(rt0.c1)) IN ()))AND(TYPEOF(DISTINCT ((rt0.c2) BETWEEN ('J自쾖 Y%]~') AND (NULL)))))) ORDER BY ((((((rt0.c2)OR(rt0.c2)))AND(rt0.c3)))|(rt0.c0 COLLATE BINARY))  NULLS LAST, ((x'd460') NOTNULL), CAST((((rt0.c1)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3))) AS REAL) DESC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (CAST(json(NULL) AS NUMERIC)) ORDER BY (((rt0.c2)>>(rt0.c0)) IN ((rt0.c1 IN (rt0.c1)), ((rt0.c3)LIKE(rt0.c0)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(json(NULL) AS NUMERIC))AND(((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c2))) NOTNULL)))) ORDER BY TYPEOF(DISTINCT rt0.c1 COLLATE NOCASE)  NULLS FIRST, (((NOT (rt0.c1)))||(CAST(rt0.c1 AS NUMERIC)))  NULLS FIRST, ((((((rt0.c1)<<(rt0.c0)))AND(ABS(DISTINCT rt0.c0))))AND(((rt0.c1)>(x'7a')))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (NULL) ORDER BY TYPEOF(DISTINCT rt0.c1 COLLATE NOCASE)  NULLS FIRST, (((NOT (rt0.c1)))||(CAST(rt0.c1 AS NUMERIC)))  NULLS FIRST, ((((((rt0.c1)<<(rt0.c0)))AND(ABS(DISTINCT rt0.c0))))AND(((rt0.c1)>(x'7a')))) LIMIT 0X2;
SELECT * FROM vt1, rt0 WHERE (CAST(json(NULL) AS NUMERIC)) ORDER BY (((rt0.c2)>>(rt0.c0)) IN ((rt0.c1 IN (rt0.c1)), ((rt0.c3)LIKE(rt0.c0)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(json(NULL) AS NUMERIC))AND(((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c2))) NOTNULL)))) ORDER BY TYPEOF(DISTINCT rt0.c1 COLLATE NOCASE)  NULLS FIRST, (((NOT (rt0.c1)))||(CAST(rt0.c1 AS NUMERIC)))  NULLS FIRST, ((((((rt0.c1)<<(rt0.c0)))AND(ABS(DISTINCT rt0.c0))))AND(((rt0.c1)>(x'7a')))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (NULL) ORDER BY TYPEOF(DISTINCT rt0.c1 COLLATE NOCASE)  NULLS FIRST, (((NOT (rt0.c1)))||(CAST(rt0.c1 AS NUMERIC)))  NULLS FIRST, ((((((rt0.c1)<<(rt0.c0)))AND(ABS(DISTINCT rt0.c0))))AND(((rt0.c1)>(x'7a')))) LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE (CAST((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) AS TEXT)) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c0 THEN 3508589 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS INTEGER), CASE WHEN ((vt1.c0)%(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS LAST, CAST(((vt1.c0)LIKE(vt1.c0)) AS BLOB) ASC;
SELECT DISTINCT * FROM vt1 WHERE (((CAST((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) AS TEXT))AND((((NULL)<<(vt1.c0)) IN (-2051742299, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))))) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c0 THEN 0x35896d WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS INTEGER), CASE WHEN ((vt1.c0)%(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS LAST, CAST(((vt1.c0)LIKE(vt1.c0)) AS BLOB) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)<>(x'')))|(CAST(0.36377367176431163 AS REAL)))) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c0 THEN 0x35896d WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS INTEGER), CASE WHEN ((vt1.c0)%(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS LAST, CAST(((vt1.c0)LIKE(vt1.c0)) AS BLOB) ASC;
SELECT ALL * FROM vt1 WHERE (CAST((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) AS TEXT)) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c0 THEN 3508589 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS INTEGER), CASE WHEN ((vt1.c0)%(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS LAST, CAST(((vt1.c0)LIKE(vt1.c0)) AS BLOB) ASC;
SELECT DISTINCT * FROM vt1 WHERE (((CAST((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) AS TEXT))AND((((NULL)<<(vt1.c0)) IN (-2051742299, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))))) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c0 THEN 0x35896d WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS INTEGER), CASE WHEN ((vt1.c0)%(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS LAST, CAST(((vt1.c0)LIKE(vt1.c0)) AS BLOB) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)<>(x'')))|(CAST(0.36377367176431163 AS REAL)))) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c0 THEN 0x35896d WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS INTEGER), CASE WHEN ((vt1.c0)%(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END  NULLS LAST, CAST(((vt1.c0)LIKE(vt1.c0)) AS BLOB) ASC;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c1)<(vt1.c0)) IN (CAST(0xffffffffa0d1f712 AS TEXT))));
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c1)<(vt1.c0)) IN (CAST(0Xffffffffa0d1f712 AS TEXT))))AND(rt0.c3))) ORDER BY ((((((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)))AND(((rt0.c0)+(vt1.c0)))))OR(UNICODE(rt0.c1))))AND(HEX(rt0.c0))) ASC, (rt0.c0 COLLATE BINARY IN ());
SELECT * FROM vt1, rt0 WHERE ((((rt0.c1)<(vt1.c0)) IN (CAST(0xffffffffa0d1f712 AS TEXT))));
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c1)<(vt1.c0)) IN (CAST(0Xffffffffa0d1f712 AS TEXT))))AND(rt0.c3))) ORDER BY ((((((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)))AND(((rt0.c0)+(vt1.c0)))))OR(UNICODE(rt0.c1))))AND(HEX(rt0.c0))) ASC, (rt0.c0 COLLATE BINARY IN ());
SELECT ALL * FROM rt0, vt1 WHERE ((NOT (((rt0.c3) BETWEEN (rt0.c3) AND (vt1.c0))))) ORDER BY (((rt0.c3) ISNULL) IN (((rt0.c3)IS NOT(rt0.c3)), vt1.c0, (((vt1.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))))) DESC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((NOT (((rt0.c3) BETWEEN (rt0.c3) AND (vt1.c0))))) ORDER BY (~ (x'4cd44752')) ASC, rt0.c2  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((NOT (((rt0.c3) BETWEEN (rt0.c3) AND (vt1.c0))))) ORDER BY (((rt0.c3) ISNULL) IN (((rt0.c3)IS NOT(rt0.c3)), vt1.c0, (((vt1.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))))) DESC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((NOT (((rt0.c3) BETWEEN (rt0.c3) AND (vt1.c0))))) ORDER BY (~ (x'4cd44752')) ASC, rt0.c2  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((vt1.c0)<<(vt1.c0)) COLLATE RTRIM) ORDER BY ((CASE vt1.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 END) BETWEEN (((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c3))) AND (((rt0.c1) IS TRUE))) ASC;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((vt1.c0)<<(vt1.c0)) COLLATE RTRIM) ORDER BY ((CASE vt1.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 END) BETWEEN (((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c3))) AND (((rt0.c1) IS TRUE))) ASC;
SELECT * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (((rt0.c0)AND((+ (rt0.c2)) COLLATE BINARY))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c0))) NOT BETWEEN (((rt0.c3)*(rt0.c3))) AND ((0x84ed7d6 IN (rt0.c3, rt0.c0)))) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (((rt0.c0)AND((+ (rt0.c2)) COLLATE BINARY))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c0))) NOT BETWEEN (((rt0.c3)*(rt0.c3))) AND ((0x84ed7d6 IN (rt0.c3, rt0.c0)))) ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (((vt1.c0) NOT NULL)) AND ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (((vt1.c0) NOT NULL)) AND ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((- (vt1.c0)) COLLATE NOCASE COLLATE NOCASE) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (((vt1.c0) NOT NULL)) AND ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (((vt1.c0) NOT NULL)) AND ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((- (vt1.c0)) COLLATE NOCASE COLLATE NOCASE) LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (CAST((((rt0.c0, rt0.c2))>=((rt0.c1, vt1.c0))) AS NUMERIC));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST((((rt0.c0, rt0.c2))>((rt0.c1, vt1.c0))) AS NUMERIC))AND(CASE ((((((rt0.c3)AND(vt1.c0)))AND(rt0.c3)))AND(rt0.c3))  WHEN ((rt0.c2)||(rt0.c0)) THEN ((((((((((rt0.c0)AND(rt0.c2)))AND(rt0.c1)))AND(vt1.c0)))AND(rt0.c2)))OR(rt0.c1)) END))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (INSTR(vt1.c0 COLLATE RTRIM, CASE rt0.c3  WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c1 END)) LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE (CAST((((rt0.c0, rt0.c2))>=((rt0.c1, vt1.c0))) AS NUMERIC));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST((((rt0.c0, rt0.c2))>((rt0.c1, vt1.c0))) AS NUMERIC))AND(CASE ((((((rt0.c3)AND(vt1.c0)))AND(rt0.c3)))AND(rt0.c3))  WHEN ((rt0.c2)||(rt0.c0)) THEN ((((((((((rt0.c0)AND(rt0.c2)))AND(rt0.c1)))AND(vt1.c0)))AND(rt0.c2)))OR(rt0.c1)) END))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (INSTR(vt1.c0 COLLATE RTRIM, CASE rt0.c3  WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c1 END)) LIMIT 2;
SELECT * FROM vt1 WHERE (((json_quote(vt1.c0))OR((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) ORDER BY CASE WHEN (~ (vt1.c0)) THEN (((vt1.c0))>((vt1.c0))) WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (((vt1.c0))<=((vt1.c0))) WHEN (vt1.c0 IN (vt1.c0)) THEN ((vt1.c0)>=(vt1.c0)) END, ((((vt1.c0)-(vt1.c0)))<<((vt1.c0 IN (vt1.c0)))) DESC;
SELECT ALL * FROM vt1 WHERE (((((json_quote(vt1.c0))OR((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))))AND(((((vt1.c0) NOT NULL)) BETWEEN (((vt1.c0)<(vt1.c0))) AND ((vt1.c0 IN ())))))) ORDER BY CASE WHEN (~ (vt1.c0)) THEN (((vt1.c0))>((vt1.c0))) WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (((vt1.c0))<=((vt1.c0))) WHEN (vt1.c0 IN (vt1.c0)) THEN ((vt1.c0)>=(vt1.c0)) END, ((((vt1.c0)-(vt1.c0)))<<((vt1.c0 IN (vt1.c0)))) DESC LIMIT 3;
SELECT * FROM vt1 WHERE (((json_quote(vt1.c0))OR((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))))) ORDER BY CASE WHEN (~ (vt1.c0)) THEN (((vt1.c0))>((vt1.c0))) WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (((vt1.c0))<=((vt1.c0))) WHEN (vt1.c0 IN (vt1.c0)) THEN ((vt1.c0)>=(vt1.c0)) END, ((((vt1.c0)-(vt1.c0)))<<((vt1.c0 IN (vt1.c0)))) DESC;
SELECT ALL * FROM vt1 WHERE (((((json_quote(vt1.c0))OR((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))))AND(((((vt1.c0) NOT NULL)) BETWEEN (((vt1.c0)<(vt1.c0))) AND ((vt1.c0 IN ())))))) ORDER BY CASE WHEN (~ (vt1.c0)) THEN (((vt1.c0))>((vt1.c0))) WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (((vt1.c0))<=((vt1.c0))) WHEN (vt1.c0 IN (vt1.c0)) THEN ((vt1.c0)>=(vt1.c0)) END, ((((vt1.c0)-(vt1.c0)))<<((vt1.c0 IN (vt1.c0)))) DESC LIMIT 3;
SELECT * FROM rt0, vt1 WHERE ((((LIKELIHOOD(DISTINCT rt0.c1, rt0.c1)))<=((LTRIM(rt0.c2, rt0.c0)))));
SELECT ALL * FROM rt0, vt1 WHERE ((((((LIKELIHOOD(DISTINCT rt0.c1, rt0.c1)))<=((LTRIM(rt0.c2, rt0.c0)))))AND(NULL))) LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE ((((LIKELIHOOD(DISTINCT rt0.c1, rt0.c1)))<=((LTRIM(rt0.c2, rt0.c0)))));
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 END) NOT NULL));
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (((((CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 END) NOT NULL))AND(CASE ((rt0.c0) BETWEEN (2.06543958E8) AND (rt0.c0))  WHEN ((rt0.c2) NOTNULL) THEN (rt0.c1 IN ()) END)));
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 END) NOT NULL));
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (((((CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 END) NOT NULL))AND(CASE ((rt0.c0) BETWEEN (2.06543958E8) AND (rt0.c0))  WHEN ((rt0.c2) NOTNULL) THEN (rt0.c1 IN ()) END)));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0) IS TRUE));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0) IS TRUE)) LIMIT 0 INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN json_array_length(vt1.c0) THEN ((vt1.c0)%(vt1.c0)) WHEN vt1.c0 THEN ((vt1.c0)%(vt1.c0)) ELSE ((vt1.c0)<(vt1.c0)) END) LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0) ORDER BY IFNULL(((((((rt0.c2)OR(rt0.c3)))OR(rt0.c1)))OR(vt1.c0)), rt0.c2)  NULLS FIRST, CASE (rt0.c0 IN ())  WHEN ((rt0.c1)OR(rt0.c3)) THEN (((rt0.c3, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, rt0.c2, vt1.c0, rt0.c1)) AND ((rt0.c3, rt0.c3, rt0.c1, rt0.c3))) END ASC, ((((((((((((ABS(DISTINCT rt0.c1))AND(rt0.c2 COLLATE BINARY)))AND((NOT (rt0.c1)))))OR(((rt0.c0) ISNULL))))AND('&')))OR(CASE vt1.c0  WHEN vt1.c0 THEN '}<vi찠hu' WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END)))OR(CASE WHEN x'ce3b' THEN rt0.c2 ELSE rt0.c0 END))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0) ORDER BY (~ (CASE WHEN vt1.c0 THEN rt0.c3 WHEN '1848466430' THEN rt0.c2 ELSE rt0.c3 END)) DESC, ((((x'') BETWEEN (rt0.c3) AND (rt0.c0)))&(vt1.c0)) ASC  NULLS LAST LIMIT 0x5 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((+ (((rt0.c2)<(rt0.c1))))) ORDER BY (~ (CASE WHEN vt1.c0 THEN rt0.c3 WHEN '1848466430' THEN rt0.c2 ELSE rt0.c3 END)) DESC, ((((x'') BETWEEN (rt0.c3) AND (rt0.c0)))&(vt1.c0)) ASC  NULLS LAST LIMIT 5;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0) ORDER BY IFNULL(((((((rt0.c2)OR(rt0.c3)))OR(rt0.c1)))OR(vt1.c0)), rt0.c2)  NULLS FIRST, CASE (rt0.c0 IN ())  WHEN ((rt0.c1)OR(rt0.c3)) THEN (((rt0.c3, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, rt0.c2, vt1.c0, rt0.c1)) AND ((rt0.c3, rt0.c3, rt0.c1, rt0.c3))) END ASC, ((((((((((((ABS(DISTINCT rt0.c1))AND(rt0.c2 COLLATE BINARY)))AND((NOT (rt0.c1)))))OR(((rt0.c0) ISNULL))))AND('&')))OR(CASE vt1.c0  WHEN vt1.c0 THEN '}<vi찠hu' WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END)))OR(CASE WHEN x'ce3b' THEN rt0.c2 ELSE rt0.c0 END))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0) ORDER BY (~ (CASE WHEN vt1.c0 THEN rt0.c3 WHEN '1848466430' THEN rt0.c2 ELSE rt0.c3 END)) DESC, ((((x'') BETWEEN (rt0.c3) AND (rt0.c0)))&(vt1.c0)) ASC  NULLS LAST LIMIT 0x5 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE ((+ (((rt0.c2)<(rt0.c1))))) ORDER BY (~ (CASE WHEN vt1.c0 THEN rt0.c3 WHEN '1848466430' THEN rt0.c2 ELSE rt0.c3 END)) DESC, ((((x'') BETWEEN (rt0.c3) AND (rt0.c0)))&(vt1.c0)) ASC  NULLS LAST LIMIT 5;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c2 AS NUMERIC) COLLATE RTRIM);
SELECT * FROM vt1, rt0 WHERE (((CAST(rt0.c2 AS NUMERIC) COLLATE RTRIM)AND((((rt0.c2 IN ()))||(''))))) ORDER BY (((((vt1.c0)) BETWEEN ((rt0.c2)) AND ((rt0.c2)))) IS TRUE) ASC, (((((((('t|
-g~b')OR(rt0.c3)))OR(rt0.c0)))AND(vt1.c0))) NOT NULL) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c2 AS NUMERIC) COLLATE RTRIM);
SELECT * FROM vt1, rt0 WHERE (((CAST(rt0.c2 AS NUMERIC) COLLATE RTRIM)AND((((rt0.c2 IN ()))||(''))))) ORDER BY (((((vt1.c0)) BETWEEN ((rt0.c2)) AND ((rt0.c2)))) IS TRUE) ASC, (((((((('t|
-g~b')OR(rt0.c3)))OR(rt0.c0)))AND(vt1.c0))) NOT NULL) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c3)OR(vt1.c0)) IN ((((rt0.c2))=((rt0.c0)))))) ORDER BY (((NOT (rt0.c0))) ISNULL) ASC  NULLS LAST, CAST(CASE '-1838597452'  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 END AS BLOB)  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c3)OR(vt1.c0)) IN ((((rt0.c2))=((rt0.c0))))))AND(((ABS(rt0.c3))=(vt1.c0))))) ORDER BY (((NOT (rt0.c0))) ISNULL) ASC  NULLS LAST, CAST(CASE '-1838597452'  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 END AS BLOB)  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c3)OR(vt1.c0)) IN ((((rt0.c2))=((rt0.c0)))))) ORDER BY (((NOT (rt0.c0))) ISNULL) ASC  NULLS LAST, CAST(CASE '-1838597452'  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 END AS BLOB)  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c3)OR(vt1.c0)) IN ((((rt0.c2))=((rt0.c0))))))AND(((ABS(rt0.c3))=(vt1.c0))))) ORDER BY (((NOT (rt0.c0))) ISNULL) ASC  NULLS LAST, CAST(CASE '-1838597452'  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 END AS BLOB)  NULLS FIRST;
SELECT MIN(rt0.c0) FROM rt0 WHERE (((((rt0.c2 COLLATE BINARY)AND(TRIM(rt0.c2, rt0.c1))))AND((rt0.c2 IN ())))) ORDER BY (((rt0.c3)) NOT BETWEEN (((+ (rt0.c2)))) AND ((((((((rt0.c0)AND(0Xffffffffd68a38ac)))AND(rt0.c2)))AND(rt0.c1))))) DESC  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((rt0.c2 COLLATE BINARY)AND(TRIM(rt0.c2, rt0.c1))))AND((rt0.c2 IN ())))) ORDER BY (((rt0.c3)) NOT BETWEEN (((+ (rt0.c2)))) AND ((((((((rt0.c0)AND(-695584596)))AND(rt0.c2)))AND(rt0.c1))))) DESC  NULLS FIRST LIMIT 0x2;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (rt0.c2);
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (rt0.c2) ORDER BY CAST(LTRIM(0.4286736921900688, rt0.c2) AS TEXT) DESC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt1 WHERE (((('-26935263')) BETWEEN ((((vt1.c0) NOT NULL))) AND ((CAST(NULL AS BLOB)))));
SELECT * FROM vt1 WHERE (((((('-26935263')) BETWEEN ((((vt1.c0) NOT NULL))) AND ((CAST(NULL AS BLOB)))))AND(COALESCE(vt1.c0, ((vt1.c0) ISNULL))))) ORDER BY (((vt1.c0)*(vt1.c0)) IN (((vt1.c0)GLOB(vt1.c0)), (~ (vt1.c0)), ((vt1.c0) ISNULL))), (((vt1.c0 IN (vt1.c0)))/(CAST(vt1.c0 AS NUMERIC))) ASC INTERSECT SELECT ALL * FROM vt1 NOT INDEXED WHERE ((((NOT (vt1.c0))) IS FALSE)) ORDER BY (((vt1.c0)*(vt1.c0)) IN (((vt1.c0)GLOB(vt1.c0)), (~ (vt1.c0)), ((vt1.c0) ISNULL))), (((vt1.c0 IN (vt1.c0)))/(CAST(vt1.c0 AS NUMERIC))) ASC;
SELECT ALL * FROM vt1 WHERE (((('-26935263')) BETWEEN ((((vt1.c0) NOT NULL))) AND ((CAST(NULL AS BLOB)))));
SELECT * FROM vt1 WHERE (((((('-26935263')) BETWEEN ((((vt1.c0) NOT NULL))) AND ((CAST(NULL AS BLOB)))))AND(COALESCE(vt1.c0, ((vt1.c0) ISNULL))))) ORDER BY (((vt1.c0)*(vt1.c0)) IN (((vt1.c0)GLOB(vt1.c0)), (~ (vt1.c0)), ((vt1.c0) ISNULL))), (((vt1.c0 IN (vt1.c0)))/(CAST(vt1.c0 AS NUMERIC))) ASC INTERSECT SELECT ALL * FROM vt1 NOT INDEXED WHERE ((((NOT (vt1.c0))) IS FALSE)) ORDER BY (((vt1.c0)*(vt1.c0)) IN (((vt1.c0)GLOB(vt1.c0)), (~ (vt1.c0)), ((vt1.c0) ISNULL))), (((vt1.c0 IN (vt1.c0)))/(CAST(vt1.c0 AS NUMERIC))) ASC;
SELECT * FROM rt0 INNER JOIN vt1 ON rt0.c1 WHERE (rt0.c2) ORDER BY ((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c1)) AND ((rt0.c1, rt0.c3, rt0.c0))) IN ('0.24376662247593572' COLLATE NOCASE)) DESC, ((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)) COLLATE NOCASE  NULLS FIRST;
SELECT * FROM rt0 INNER JOIN vt1 ON rt0.c1 WHERE (rt0.c2) ORDER BY ((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c1)) AND ((rt0.c1, rt0.c3, rt0.c0))) IN ('0.24376662247593572' COLLATE NOCASE)) DESC, ((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 1 INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON rt0.c1 WHERE (CASE PRINTF(rt0.c0, rt0.c2)  WHEN ((rt0.c0)||(rt0.c1)) THEN ((rt0.c1) IS FALSE) WHEN (x'' IN ()) THEN x'' WHEN CASE NULL  WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c0 END THEN (~ (rt0.c1)) WHEN 0X18e9775e THEN ((('', vt1.c0, rt0.c2))<=((rt0.c2, rt0.c1, x'6d9be9'))) WHEN ((((rt0.c0)OR(x'4b83')))AND(rt0.c1)) THEN ((((rt0.c1)AND(rt0.c3)))AND(rt0.c2)) WHEN STRFTIME(rt0.c2, rt0.c1, rt0.c2) THEN ((rt0.c1) NOT NULL) END) ORDER BY ((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c1)) AND ((rt0.c1, rt0.c3, rt0.c0))) IN ('0.24376662247593572' COLLATE NOCASE)) DESC, ((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 1;
SELECT * FROM rt0 INNER JOIN vt1 ON rt0.c1 WHERE (rt0.c2) ORDER BY ((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c1)) AND ((rt0.c1, rt0.c3, rt0.c0))) IN ('0.24376662247593572' COLLATE NOCASE)) DESC, ((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)) COLLATE NOCASE  NULLS FIRST;
SELECT * FROM rt0 INNER JOIN vt1 ON rt0.c1 WHERE (rt0.c2) ORDER BY ((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c1)) AND ((rt0.c1, rt0.c3, rt0.c0))) IN ('0.24376662247593572' COLLATE NOCASE)) DESC, ((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 1 INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON rt0.c1 WHERE (CASE PRINTF(rt0.c0, rt0.c2)  WHEN ((rt0.c0)||(rt0.c1)) THEN ((rt0.c1) IS FALSE) WHEN (x'' IN ()) THEN x'' WHEN CASE NULL  WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c0 END THEN (~ (rt0.c1)) WHEN 0X18e9775e THEN ((('', vt1.c0, rt0.c2))<=((rt0.c2, rt0.c1, x'6d9be9'))) WHEN ((((rt0.c0)OR(x'4b83')))AND(rt0.c1)) THEN ((((rt0.c1)AND(rt0.c3)))AND(rt0.c2)) WHEN STRFTIME(rt0.c2, rt0.c1, rt0.c2) THEN ((rt0.c1) NOT NULL) END) ORDER BY ((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c1)) AND ((rt0.c1, rt0.c3, rt0.c0))) IN ('0.24376662247593572' COLLATE NOCASE)) DESC, ((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN ())) NOT BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY ((CASE WHEN '-1088513454' THEN vt1.c0 WHEN vt1.c0 THEN 0.36336655089447645 ELSE vt1.c0 END)-(((((((((((((((vt1.c0)OR(vt1.c0)))AND(0.8306102426722546)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))) ASC, ((((vt1.c0)AND(((vt1.c0)|(vt1.c0)))))OR(((vt1.c0)LIKE(vt1.c0))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((((vt1.c0 IN ())) NOT BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(((((vt1.c0) ISNULL)) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c0)IS NOT(vt1.c0))))))) ORDER BY ((CASE WHEN '-1088513454' THEN vt1.c0 WHEN vt1.c0 THEN 0.36336655089447645 ELSE vt1.c0 END)-(((((((((((((((vt1.c0)OR(vt1.c0)))AND(0.8306102426722546)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))) ASC, ((((vt1.c0)AND(((vt1.c0)|(vt1.c0)))))OR(((vt1.c0)LIKE(vt1.c0)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN ((+ (0.7297587846821484))) AND (CAST(vt1.c0 AS NUMERIC)))) ORDER BY ((CASE WHEN '-1088513454' THEN vt1.c0 WHEN vt1.c0 THEN 0.36336655089447645 ELSE vt1.c0 END)-(((((((((((((((vt1.c0)OR(vt1.c0)))AND(0.8306102426722546)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))) ASC, ((((vt1.c0)AND(((vt1.c0)|(vt1.c0)))))OR(((vt1.c0)LIKE(vt1.c0))));
SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON rt0.c2 COLLATE RTRIM WHERE ((((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2))))>((rt0.c3))));
SELECT DISTINCT COUNT(*) FROM rt0 CROSS JOIN vt1 ON rt0.c2 COLLATE RTRIM WHERE ((((((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2))))>((rt0.c3))))AND(((COALESCE(rt0.c2, vt1.c0, rt0.c0)) NOT BETWEEN (((((rt0.c3)AND(rt0.c2)))OR(rt0.c3))) AND (((rt0.c0) NOT NULL)))))) ORDER BY (('n<}| A<')!=(CAST(rt0.c2 AS TEXT))) ASC  NULLS FIRST, (((((((~ (rt0.c2)))OR(UPPER(DISTINCT x'112754'))))AND((~ (rt0.c0)))))OR(rt0.c0)) INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 CROSS JOIN vt1 ON rt0.c2 COLLATE RTRIM WHERE ((rt0.c2 COLLATE RTRIM IN (rt0.c1))) ORDER BY (('n<}| A<')!=(CAST(rt0.c2 AS TEXT))) ASC  NULLS FIRST, (((((((~ (rt0.c2)))OR(UPPER(DISTINCT x'112754'))))AND((~ (rt0.c0)))))OR(rt0.c0));
SELECT ALL MIN(rt0.c0) FROM rt0 LEFT OUTER JOIN vt1 ON (((('㖯7EJRC龗' IN ()), rt0.c3 COLLATE RTRIM))>=(((((rt0.c3, rt0.c1, rt0.c3, rt0.c1)) NOT BETWEEN ((vt1.c0, rt0.c1, vt1.c0, vt1.c0)) AND ((rt0.c3, rt0.c3, rt0.c0, vt1.c0))), ((NULL) NOT NULL)))) WHERE ((~ ((((vt1.c0)) BETWEEN ((rt0.c2)) AND ((vt1.c0)))))) ORDER BY (- (CAST(rt0.c1 AS TEXT))), ((vt1.c0)AND(rt0.c0)) COLLATE NOCASE ASC  NULLS LAST;
SELECT MIN(rt0.c0) FROM rt0 INNER JOIN vt1 ON (((('㖯7EJRC龗' IN ()), rt0.c3 COLLATE RTRIM))>=(((((rt0.c3, rt0.c1, rt0.c3, rt0.c1)) NOT BETWEEN ((vt1.c0, rt0.c1, vt1.c0, vt1.c0)) AND ((rt0.c3, rt0.c3, rt0.c0, vt1.c0))), ((NULL) NOT NULL)))) WHERE ((~ ((((vt1.c0)) BETWEEN ((rt0.c2)) AND ((vt1.c0)))))) ORDER BY CASE ((vt1.c0)<>(vt1.c0))  WHEN ((rt0.c1) NOTNULL) THEN ((vt1.c0) NOT NULL) END  NULLS LAST, (((rt0.c0) IS FALSE) IN ())  NULLS LAST INTERSECT SELECT ALL MIN(rt0.c0) FROM rt0 INNER JOIN vt1 ON (((('㖯7EJRC龗' IN ()), rt0.c3 COLLATE RTRIM))>=(((((rt0.c3, rt0.c1, rt0.c3, rt0.c1)) NOT BETWEEN ((vt1.c0, rt0.c1, vt1.c0, vt1.c0)) AND ((rt0.c3, rt0.c3, rt0.c0, vt1.c0))), ((NULL) NOT NULL)))) WHERE ((((rt0.c1)<(rt0.c1)) IN (rt0.c0))) ORDER BY CASE ((vt1.c0)!=(vt1.c0))  WHEN ((rt0.c1) NOTNULL) THEN ((vt1.c0) NOT NULL) END  NULLS LAST, (((rt0.c0) IS FALSE) IN ())  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((vt1.c0 IN (vt1.c0)) COLLATE NOCASE) ORDER BY 1.251045505E9, ABS(((vt1.c0)==(vt1.c0)));
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0)) COLLATE NOCASE)AND(CASE WHEN 0.9700041837304016 THEN ((vt1.c0)>>(vt1.c0)) WHEN vt1.c0 THEN (- (vt1.c0)) WHEN (((vt1.c0))>=((vt1.c0))) THEN vt1.c0 COLLATE NOCASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN CASE WHEN -1.127236167E9 THEN vt1.c0 END ELSE LENGTH(vt1.c0) END))) ORDER BY 1.251045505E9, ABS(((vt1.c0)=(vt1.c0))) LIMIT 0x0;
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE (((rt0.c2 COLLATE NOCASE) NOT BETWEEN (((((((((((rt0.c3)OR(0.16736824921996096)))OR(rt0.c2)))OR(rt0.c0)))AND(vt1.c0)))AND(rt0.c1))) AND (((vt1.c0)<=(0Xfffffffff9f0a8f5))))) ORDER BY (((rt0.c3 IN ())) BETWEEN ((rt0.c2 IN (rt0.c0, rt0.c3))) AND (((rt0.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC  NULLS LAST;
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE (((rt0.c2 COLLATE NOCASE) NOT BETWEEN (((((((((((rt0.c3)OR(0.16736824921996096)))OR(rt0.c2)))OR(rt0.c0)))AND(vt1.c0)))AND(rt0.c1))) AND (((vt1.c0)<=(-101668619))))) ORDER BY vt1.c0  NULLS FIRST, ((rt0.c2 COLLATE NOCASE)<=(LIKELY(rt0.c3))) DESC  NULLS FIRST, (NOT (rt0.c3 COLLATE NOCASE)), ((((((vt1.c0)OR(vt1.c0)))OR(rt0.c2)))OR(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3)))) ASC LIMIT 1 INTERSECT SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE (((((((((rt0.c3) ISNULL))OR(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c0)))))OR((((rt0.c0, rt0.c2))==((rt0.c2, rt0.c3))))))AND(((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3))))) ORDER BY vt1.c0  NULLS FIRST, ((rt0.c2 COLLATE NOCASE)<=(LIKELY(rt0.c3))) DESC  NULLS FIRST, (NOT (rt0.c3 COLLATE NOCASE)), ((((((vt1.c0)OR(vt1.c0)))OR(rt0.c2)))OR(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c3)))) ASC LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((((rt0.c2 IN (rt0.c2)))OR(((((((((rt0.c0)AND(rt0.c2)))OR(0.7221266075621147)))OR(vt1.c0)))OR(rt0.c2)))))AND(rt0.c2)));
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE ((((((rt0.c2 IN (rt0.c2)))OR(((((((((rt0.c0)AND(rt0.c2)))OR(0.7221266075621147)))OR(vt1.c0)))OR(rt0.c2)))))AND(rt0.c2))) ORDER BY 0.3688426031409252, CAST(0Xffffffffe590e495 AS REAL)  NULLS LAST, CASE WHEN ((((rt0.c1)AND(rt0.c1)))OR(rt0.c2)) THEN rt0.c0 WHEN (- (rt0.c1)) THEN load_extension(vt1.c0, rt0.c2) WHEN (((rt0.c0, rt0.c3))<>((rt0.c2, vt1.c0))) THEN rt0.c2 COLLATE NOCASE WHEN ((rt0.c2)OR(rt0.c2)) THEN CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END WHEN LIKELY(DISTINCT vt1.c0) THEN (NOT (rt0.c0)) END ASC INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE ((NOT (rt0.c0))) ORDER BY 0.3688426031409252, CAST(0Xffffffffe590e495 AS REAL)  NULLS LAST, CASE WHEN ((((rt0.c1)AND(rt0.c1)))OR(rt0.c2)) THEN rt0.c0 WHEN (- (rt0.c1)) THEN load_extension(vt1.c0, rt0.c2) WHEN (((rt0.c0, rt0.c3))!=((rt0.c2, vt1.c0))) THEN rt0.c2 COLLATE NOCASE WHEN ((rt0.c2)OR(rt0.c2)) THEN CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END WHEN LIKELY(DISTINCT vt1.c0) THEN (NOT (rt0.c0)) END ASC;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (((NULL)-(rt0.c0)) COLLATE BINARY);
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (((((NULL)-(rt0.c0)) COLLATE BINARY)AND((((((vt1.c0) IS FALSE)))>=((((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c1)))))))) ORDER BY CAST(((rt0.c3) NOT NULL) AS BLOB) DESC, ((HEX(DISTINCT rt0.c3)) BETWEEN (0X2f93a906) AND (x'4479')) LIMIT 0;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3, rt0.c0, rt0.c0)) NOT BETWEEN (((NOT (rt0.c0)), CASE WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END, ((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)))OR(x'')))) AND (((+ (x'2097')), CASE NULL  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE NULL END, ((rt0.c2)>=(rt0.c3)))))) ORDER BY ((((((((((rt0.c1) BETWEEN (x'89') AND (rt0.c3)))OR(((rt0.c1)<=(rt0.c1)))))AND(CAST(rt0.c2 AS BLOB))))OR(((rt0.c0)>(rt0.c2)))))AND(((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3))))  NULLS LAST, ((((rt0.c2) NOT NULL))OR(rt0.c1 COLLATE NOCASE)) DESC;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c3, rt0.c0, rt0.c0)) NOT BETWEEN (((NOT (rt0.c0)), CASE WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END, ((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)))OR(x'')))) AND (((+ (x'2097')), CASE NULL  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE NULL END, ((rt0.c2)>=(rt0.c3))))))AND((((CAST(rt0.c0 AS TEXT), ((((rt0.c3)OR(rt0.c0)))OR(rt0.c0))))<=(((-182911986 IN ()), (rt0.c3 IN (rt0.c0)))))))) ORDER BY CASE (NOT (rt0.c2))  WHEN ((rt0.c3)<<(rt0.c0)) THEN ((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c3)) WHEN ((rt0.c2)<<(NULL)) THEN LIKELIHOOD(rt0.c2, rt0.c1) WHEN ((rt0.c1)GLOB('')) THEN rt0.c0 WHEN ((rt0.c3) IS FALSE) THEN 0xffffffff8135f7ca WHEN 0.20992926829841863 THEN (~ (rt0.c2)) WHEN ((0.23994291176300608) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN (((rt0.c1))>=((rt0.c3))) END ASC LIMIT 0;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3, rt0.c0, rt0.c0)) NOT BETWEEN (((NOT (rt0.c0)), CASE WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END, ((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)))OR(x'')))) AND (((+ (x'2097')), CASE NULL  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE NULL END, ((rt0.c2)>=(rt0.c3)))))) ORDER BY ((((((((((rt0.c1) BETWEEN (x'89') AND (rt0.c3)))OR(((rt0.c1)<=(rt0.c1)))))AND(CAST(rt0.c2 AS BLOB))))OR(((rt0.c0)>(rt0.c2)))))AND(((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3))))  NULLS LAST, ((((rt0.c2) NOT NULL))OR(rt0.c1 COLLATE NOCASE)) DESC;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c3, rt0.c0, rt0.c0)) NOT BETWEEN (((NOT (rt0.c0)), CASE WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END, ((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c0)))AND(rt0.c0)))OR(x'')))) AND (((+ (x'2097')), CASE NULL  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE NULL END, ((rt0.c2)>=(rt0.c3))))))AND((((CAST(rt0.c0 AS TEXT), ((((rt0.c3)OR(rt0.c0)))OR(rt0.c0))))<=(((-182911986 IN ()), (rt0.c3 IN (rt0.c0)))))))) ORDER BY CASE (NOT (rt0.c2))  WHEN ((rt0.c3)<<(rt0.c0)) THEN ((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c3)) WHEN ((rt0.c2)<<(NULL)) THEN LIKELIHOOD(rt0.c2, rt0.c1) WHEN ((rt0.c1)GLOB('')) THEN rt0.c0 WHEN ((rt0.c3) IS FALSE) THEN 0xffffffff8135f7ca WHEN 0.20992926829841863 THEN (~ (rt0.c2)) WHEN ((0.23994291176300608) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN (((rt0.c1))>=((rt0.c3))) END ASC LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((0.9984041692242503) BETWEEN (((vt1.c0) IS FALSE)) AND (CAST(vt1.c0 AS NUMERIC)))) ORDER BY (~ (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0.2015689240790557 WHEN vt1.c0 THEN 0.500698606815673 WHEN 0.5423900092029253 THEN vt1.c0 ELSE vt1.c0 END))  NULLS LAST, ((vt1.c0)<=(vt1.c0)) COLLATE NOCASE DESC  NULLS FIRST, NULLIF(DISTINCT CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN x'44' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '仵''-뛩' END, vt1.c0 COLLATE RTRIM) DESC;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((0.9984041692242503) BETWEEN (((vt1.c0) IS FALSE)) AND (CAST(vt1.c0 AS NUMERIC))))AND(((((vt1.c0)OR(vt1.c0)))>>((vt1.c0 IN (vt1.c0))))))) ORDER BY vt1.c0 DESC LIMIT 1;
SELECT ALL * FROM rt0 WHERE (rt0.c1) ORDER BY ((x'a012') IS TRUE)  NULLS FIRST, (- (x'2e9d125f')) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c1)AND(CAST(x'bb58b4' COLLATE NOCASE AS INTEGER)))) ORDER BY ((x'a012') IS TRUE)  NULLS FIRST, (- (x'2e9d125f')) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c3)AND(rt0.c0)))OR(rt0.c0)))AND(((rt0.c0)<(rt0.c0)))))AND(rt0.c1))) ORDER BY ((x'a012') IS TRUE)  NULLS FIRST, (- (x'2e9d125f')) ASC LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE (rt0.c1) ORDER BY ((x'a012') IS TRUE)  NULLS FIRST, (- (x'2e9d125f')) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c1)AND(CAST(x'bb58b4' COLLATE NOCASE AS INTEGER)))) ORDER BY ((x'a012') IS TRUE)  NULLS FIRST, (- (x'2e9d125f')) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c3)AND(rt0.c0)))OR(rt0.c0)))AND(((rt0.c0)<(rt0.c0)))))AND(rt0.c1))) ORDER BY ((x'a012') IS TRUE)  NULLS FIRST, (- (x'2e9d125f')) ASC LIMIT 0x0;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (((((((((((((rt0.c2)OR('롥9o')))OR(rt0.c2)))OR(vt1.c0)))OR(rt0.c1)))OR('')))AND(0Xffffffffdd7e6b1a COLLATE BINARY))) ORDER BY (((rt0.c1, rt0.c3, vt1.c0, vt1.c0)) NOT BETWEEN ((((rt0.c0) IS TRUE), CAST(vt1.c0 AS NUMERIC), 9.9367454E7, CASE WHEN vt1.c0 THEN rt0.c1 END)) AND ((((vt1.c0)<=(x'45')), (rt0.c1 IN (rt0.c3)), (rt0.c0 IN (rt0.c2, rt0.c3)), HEX(DISTINCT rt0.c2)))) ASC;
SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((((((((((((rt0.c2)OR('롥9o')))OR(rt0.c2)))OR(vt1.c0)))OR(rt0.c1)))OR('')))AND(-578917606 COLLATE BINARY))) ORDER BY vt1.c0 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((rt0.c1 COLLATE NOCASE) NOT NULL)) ORDER BY vt1.c0;
SELECT * FROM rt0 WHERE (((((rt0.c2)/(rt0.c1))) IS TRUE));
SELECT ALL * FROM rt0 WHERE (((((((rt0.c2)/(rt0.c1))) IS TRUE))AND((('-2046549285')|(rt0.c1))))) ORDER BY ((((((rt0.c0)AND(rt0.c1)))AND(rt0.c1))) BETWEEN (rt0.c3) AND (rt0.c3)) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT * FROM rt0 WHERE (rt0.c0) ORDER BY ((((((rt0.c0)AND(rt0.c1)))AND(rt0.c1))) BETWEEN (rt0.c3) AND (rt0.c3)) DESC  NULLS LAST LIMIT 0X0;
SELECT * FROM rt0 WHERE (((((rt0.c2)/(rt0.c1))) IS TRUE));
SELECT ALL * FROM rt0 WHERE (((((((rt0.c2)/(rt0.c1))) IS TRUE))AND((('-2046549285')|(rt0.c1))))) ORDER BY ((((((rt0.c0)AND(rt0.c1)))AND(rt0.c1))) BETWEEN (rt0.c3) AND (rt0.c3)) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT * FROM rt0 WHERE (rt0.c0) ORDER BY ((((((rt0.c0)AND(rt0.c1)))AND(rt0.c1))) BETWEEN (rt0.c3) AND (rt0.c3)) DESC  NULLS LAST LIMIT 0X0;
SELECT * FROM rt0 WHERE (IFNULL(rt0.c3 COLLATE RTRIM, 0.6589496400475832));
SELECT ALL * FROM rt0 WHERE (((IFNULL(rt0.c3 COLLATE RTRIM, 0.6589496400475832))AND(rt0.c0))) LIMIT 0x2 INTERSECT SELECT * FROM rt0 WHERE (CASE rt0.c2 COLLATE NOCASE  WHEN CAST(rt0.c2 AS BLOB) THEN (((rt0.c0, rt0.c2, rt0.c3))>((rt0.c1, rt0.c3, rt0.c2))) WHEN CASE WHEN rt0.c3 THEN '&,~_OY' WHEN rt0.c0 THEN rt0.c2 WHEN '-1829962311' THEN rt0.c0 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN 0.16886377680853193 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END THEN (rt0.c3 IN ()) ELSE UPPER(rt0.c0) END) LIMIT 0x2;
SELECT * FROM rt0 WHERE (IFNULL(rt0.c3 COLLATE RTRIM, 0.6589496400475832));
SELECT ALL * FROM rt0 WHERE (((IFNULL(rt0.c3 COLLATE RTRIM, 0.6589496400475832))AND(rt0.c0))) LIMIT 0x2 INTERSECT SELECT * FROM rt0 WHERE (CASE rt0.c2 COLLATE NOCASE  WHEN CAST(rt0.c2 AS BLOB) THEN (((rt0.c0, rt0.c2, rt0.c3))>((rt0.c1, rt0.c3, rt0.c2))) WHEN CASE WHEN rt0.c3 THEN '&,~_OY' WHEN rt0.c0 THEN rt0.c2 WHEN '-1829962311' THEN rt0.c0 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN 0.16886377680853193 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END THEN (rt0.c3 IN ()) ELSE UPPER(rt0.c0) END) LIMIT 0x2;
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE (((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1)) COLLATE RTRIM) ORDER BY (- (((rt0.c3) ISNULL))) ASC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE (((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1)) COLLATE RTRIM) ORDER BY (- (((rt0.c3) ISNULL))) ASC LIMIT 0x0;
SELECT * FROM rt0 WHERE (CASE WHEN (rt0.c3 IN ()) THEN (((rt0.c0)) NOT BETWEEN (('^A}')) AND ((0.8088002316716442))) WHEN ((rt0.c2) IS TRUE) THEN ((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c2)))OR('5%d.')))AND(rt0.c2)) ELSE CAST(rt0.c1 AS REAL) END);
SELECT * FROM rt0 WHERE (((CASE WHEN (rt0.c3 IN ()) THEN (((rt0.c0)) NOT BETWEEN (('^A}')) AND ((0.8088002316716442))) WHEN ((rt0.c2) IS TRUE) THEN ((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c2)))OR('5%d.')))AND(rt0.c2)) ELSE CAST(rt0.c1 AS REAL) END)AND(x'a98e')));
SELECT * FROM rt0 WHERE (CASE WHEN (rt0.c3 IN ()) THEN (((rt0.c0)) NOT BETWEEN (('^A}')) AND ((0.8088002316716442))) WHEN ((rt0.c2) IS TRUE) THEN ((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c2)))OR('5%d.')))AND(rt0.c2)) ELSE CAST(rt0.c1 AS REAL) END);
SELECT * FROM rt0 WHERE (((CASE WHEN (rt0.c3 IN ()) THEN (((rt0.c0)) NOT BETWEEN (('^A}')) AND ((0.8088002316716442))) WHEN ((rt0.c2) IS TRUE) THEN ((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c2)))OR('5%d.')))AND(rt0.c2)) ELSE CAST(rt0.c1 AS REAL) END)AND(x'a98e')));
SELECT ALL MAX(vt1.c0) FROM vt1, rt0 WHERE ('I') ORDER BY rt0.c1  NULLS LAST, (((((rt0.c1, rt0.c0))==((vt1.c0, rt0.c0)))) NOT BETWEEN (((rt0.c1) IS FALSE)) AND (rt0.c2 COLLATE BINARY)) ASC, ((((((((((rt0.c3)OR(rt0.c1)))OR(vt1.c0)))AND(rt0.c3)))OR(rt0.c2)))AND(((rt0.c2) IS TRUE))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE ((('I')AND(SUBSTR(((0.10401021516809172)||(rt0.c2)), UNICODE(rt0.c1))))) ORDER BY rt0.c1  NULLS LAST, (((((rt0.c1, rt0.c0))==((vt1.c0, rt0.c0)))) NOT BETWEEN (((rt0.c1) IS FALSE)) AND (rt0.c2 COLLATE BINARY)) ASC, ((((((((((rt0.c3)OR(rt0.c1)))OR(vt1.c0)))AND(rt0.c3)))OR(rt0.c2)))AND(((rt0.c2) IS TRUE))) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE (((vt1.c0)AND((- (rt0.c0))))) ORDER BY rt0.c1  NULLS LAST, (((((rt0.c1, rt0.c0))==((vt1.c0, rt0.c0)))) NOT BETWEEN (((rt0.c1) IS FALSE)) AND (rt0.c2 COLLATE BINARY)) ASC, ((((((((((rt0.c3)OR(rt0.c1)))OR(vt1.c0)))AND(rt0.c3)))OR(rt0.c2)))AND(((rt0.c2) IS TRUE))) DESC  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2)|(rt0.c2)) IN ()));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2)|(rt0.c2)) IN ())) LIMIT 1 INTERSECT SELECT * FROM rt0, vt1 WHERE (rt0.c0) LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2)|(rt0.c2)) IN ()));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2)|(rt0.c2)) IN ())) LIMIT 1 INTERSECT SELECT * FROM rt0, vt1 WHERE (rt0.c0) LIMIT 0x1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))&(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))&(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY (- (vt1.c0)) COLLATE NOCASE ASC;
SELECT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((-1.028226782E9 IN (rt0.c2, rt0.c3)) IN ()));
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((((-1.028226782E9 IN (rt0.c2, rt0.c3)) IN ()))AND(((vt1.c0 IN (vt1.c0)) IN ((+ (vt1.c0)), rt0.c1))))) INTERSECT SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (CAST(rt0.c1 AS INTEGER) COLLATE RTRIM);
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((-1.028226782E9 IN (rt0.c2, rt0.c3)) IN ()));
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (((((-1.028226782E9 IN (rt0.c2, rt0.c3)) IN ()))AND(((vt1.c0 IN (vt1.c0)) IN ((+ (vt1.c0)), rt0.c1))))) INTERSECT SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (CAST(rt0.c1 AS INTEGER) COLLATE RTRIM);
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (((((rt0.c0) NOT NULL)) BETWEEN (((rt0.c0)OR(rt0.c1))) AND (((rt0.c2)>>(rt0.c1))))) ORDER BY (((- (rt0.c3)))<=(NULL))  NULLS LAST;
SELECT MIN(rt0.c3) FROM rt0 WHERE (((((rt0.c0) NOT NULL)) BETWEEN (((rt0.c0)OR(rt0.c1))) AND (((rt0.c2)>>(rt0.c1))))) ORDER BY (((- (rt0.c3)))<=(NULL))  NULLS LAST;
SELECT ALL MAX(rt0.c0) FROM rt0, vt1 WHERE (x'f722ea') ORDER BY CASE ((vt1.c0)>=(rt0.c3))  WHEN rt0.c1 COLLATE RTRIM THEN CAST(vt1.c0 AS REAL) WHEN rt0.c2 COLLATE RTRIM THEN ((vt1.c0) NOTNULL) WHEN ((vt1.c0)+(rt0.c0)) THEN ((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c3)) WHEN rt0.c2 THEN (((vt1.c0, rt0.c3))<=((rt0.c3, rt0.c1))) WHEN ((rt0.c2)/(rt0.c1)) THEN ((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c0)))AND(vt1.c0)) END DESC, ((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)))-((rt0.c3 IN ()))), ((CASE WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c3 END) ISNULL) ASC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c0) FROM rt0, vt1 WHERE (x'f722ea') ORDER BY CASE ((vt1.c0)>=(rt0.c3))  WHEN rt0.c1 COLLATE RTRIM THEN CAST(vt1.c0 AS REAL) WHEN rt0.c2 COLLATE RTRIM THEN ((vt1.c0) NOTNULL) WHEN ((vt1.c0)+(rt0.c0)) THEN ((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c3)) WHEN rt0.c2 THEN (((vt1.c0, rt0.c3))<=((rt0.c3, rt0.c1))) WHEN ((rt0.c2)/(rt0.c1)) THEN ((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c0)))AND(vt1.c0)) END DESC, ((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)))-((rt0.c3 IN ()))), ((CASE WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c3 END) ISNULL) ASC  NULLS LAST LIMIT 0x1;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0)OR(vt1.c0)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0)OR(vt1.c0))) LIMIT 1 INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (0.5096593639081061) LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE ((((((((rt0.c2)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c0)) IN (((rt0.c2) BETWEEN (rt0.c0) AND (vt1.c0)), CAST(rt0.c3 AS REAL))));
SELECT * FROM vt1, rt0 WHERE ((((((((((rt0.c2)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c0)) IN (((rt0.c2) BETWEEN (rt0.c0) AND (vt1.c0)), CAST(rt0.c3 AS REAL))))AND(x'52'))) INTERSECT SELECT * FROM vt1, rt0 WHERE (x'a1d1');
SELECT * FROM vt1, rt0 WHERE ((((((((rt0.c2)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c0)) IN (((rt0.c2) BETWEEN (rt0.c0) AND (vt1.c0)), CAST(rt0.c3 AS REAL))));
SELECT * FROM vt1, rt0 WHERE ((((((((((rt0.c2)AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c0)) IN (((rt0.c2) BETWEEN (rt0.c0) AND (vt1.c0)), CAST(rt0.c3 AS REAL))))AND(x'52'))) INTERSECT SELECT * FROM vt1, rt0 WHERE (x'a1d1');
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE (((0.07051395166859531)LIKE(CAST(rt0.c3 AS REAL)))) ORDER BY 0Xffffffff9bca5474 DESC  NULLS LAST;
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE (((((0.07051395166859531)LIKE(CAST(rt0.c3 AS REAL))))AND((((rt0.c1 IN (rt0.c1, rt0.c1))) IS TRUE)))) ORDER BY (((NOT (rt0.c3)))IS(LIKELIHOOD(DISTINCT -1.87054108E9, rt0.c1))) ASC, ((rt0.c0) ISNULL) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c3) AND (0.7875463000419239)))AND(((rt0.c0)>(rt0.c3)))));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c3) AND (0.7875463000419239)))AND(((rt0.c0)>(rt0.c3))))) ORDER BY '1350128228' LIMIT 1;
SELECT MAX(rt0.c2) FROM rt0 WHERE (CAST(((rt0.c0)*(rt0.c0)) AS INTEGER)) ORDER BY (((((((rt0.c3)AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)) IN ()), '(' ASC  NULLS FIRST;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((CAST(((rt0.c0)*(rt0.c0)) AS INTEGER))AND(((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c3)))+(rt0.c3))))) ORDER BY ((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c1)) COLLATE RTRIM  NULLS LAST, -1834146775 ASC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (CAST(rt0.c2 AS REAL) COLLATE BINARY COLLATE RTRIM) ORDER BY LIKE(CAST(rt0.c1 AS NUMERIC), CAST(rt0.c3 AS NUMERIC)) DESC, ((((((rt0.c3)>>(rt0.c0)))OR(rt0.c1)))OR(((((((rt0.c3)AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (CAST(rt0.c2 AS REAL) COLLATE BINARY COLLATE RTRIM) ORDER BY ((HEX(rt0.c3)) NOT BETWEEN ((((rt0.c2, rt0.c2))>=((rt0.c0, rt0.c3)))) AND (rt0.c3)) DESC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c0) ORDER BY ((HEX(rt0.c3)) NOT BETWEEN ((((rt0.c2, rt0.c2))>=((rt0.c0, rt0.c3)))) AND (rt0.c3)) DESC;
SELECT ALL * FROM rt0 WHERE (CAST(rt0.c2 AS REAL) COLLATE BINARY COLLATE RTRIM) ORDER BY LIKE(CAST(rt0.c1 AS NUMERIC), CAST(rt0.c3 AS NUMERIC)) DESC, ((((((rt0.c3)>>(rt0.c0)))OR(rt0.c1)))OR(((((((rt0.c3)AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (CAST(rt0.c2 AS REAL) COLLATE BINARY COLLATE RTRIM) ORDER BY ((HEX(rt0.c3)) NOT BETWEEN ((((rt0.c2, rt0.c2))>=((rt0.c0, rt0.c3)))) AND (rt0.c3)) DESC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c0) ORDER BY ((HEX(rt0.c3)) NOT BETWEEN ((((rt0.c2, rt0.c2))>=((rt0.c0, rt0.c3)))) AND (rt0.c3)) DESC;
SELECT * FROM rt0, vt1 WHERE (((((((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 END)AND(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(rt0.c1)))OR((((rt0.c0)) BETWEEN (('219224716')) AND ((rt0.c3))))));
SELECT ALL * FROM rt0, vt1 WHERE (((((((((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 END)AND(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(rt0.c1)))OR((((rt0.c0)) BETWEEN (('219224716')) AND ((rt0.c3))))))AND((~ (vt1.c0 COLLATE NOCASE))))) ORDER BY (('-1302896843')>(((((rt0.c1)AND(rt0.c2)))AND(rt0.c3)))) ASC;
SELECT * FROM rt0, vt1 WHERE (((((((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 END)AND(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(rt0.c1)))OR((((rt0.c0)) BETWEEN (('219224716')) AND ((rt0.c3))))));
SELECT ALL * FROM rt0, vt1 WHERE (((((((((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 END)AND(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(rt0.c1)))OR((((rt0.c0)) BETWEEN (('219224716')) AND ((rt0.c3))))))AND((~ (vt1.c0 COLLATE NOCASE))))) ORDER BY (('-1302896843')>(((((rt0.c1)AND(rt0.c2)))AND(rt0.c3)))) ASC;
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE (((((rt0.c0)||(rt0.c1)))!=((((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c0, rt0.c0))))));
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE (((((rt0.c0)||(rt0.c1)))!=((((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c0, rt0.c0)))))) LIMIT 0x2;
SELECT MIN(rt0.c1) FROM rt0 WHERE ((+ (CAST(rt0.c2 AS NUMERIC))));
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE ((((+ (CAST(rt0.c2 AS NUMERIC))))AND(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) COLLATE BINARY))) ORDER BY (+ (((rt0.c1)%(rt0.c0)))) INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE (((((rt0.c2) NOT NULL)) NOT BETWEEN ((NOT (rt0.c3))) AND (((rt0.c2)==(NULL))))) ORDER BY (+ (((rt0.c1)%(rt0.c0))));
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE (((((((((((((vt1.c0)==(vt1.c0)))AND(CASE rt0.c2  WHEN '-1733680795' THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 ELSE -1.7976931348623157E308 END)))OR('-1733680795')))OR(((((vt1.c0)AND('751361517')))OR(rt0.c3)))))AND((~ (rt0.c3)))))OR(((rt0.c0)!=(rt0.c0)))));
SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((((((((((((vt1.c0)=(vt1.c0)))AND(CASE rt0.c2  WHEN '-1733680795' THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 ELSE -1.7976931348623157E308 END)))OR('-1733680795')))OR(((((vt1.c0)AND('751361517')))OR(rt0.c3)))))AND((~ (rt0.c3)))))OR(((rt0.c0)<(rt0.c0)))))AND(rt0.c2))) ORDER BY rt0.c1 DESC  NULLS FIRST, ((((((((((vt1.c0) NOT NULL))OR(((((rt0.c1)AND(rt0.c2)))AND(rt0.c0)))))AND((~ (rt0.c3)))))AND(JULIANDAY(rt0.c2, vt1.c0, vt1.c0))))AND((~ (rt0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (TRIM(DISTINCT ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))));
SELECT ALL * FROM vt1 WHERE (((TRIM(DISTINCT ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))))AND((+ (((vt1.c0) NOT NULL)))))) LIMIT 0x3 INTERSECT SELECT * FROM vt1 WHERE ('0.8374026694610095') LIMIT 3;
SELECT ALL * FROM vt1 WHERE (TRIM(DISTINCT ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))));
SELECT ALL * FROM vt1 WHERE (((TRIM(DISTINCT ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))))AND((+ (((vt1.c0) NOT NULL)))))) LIMIT 0x3 INTERSECT SELECT * FROM vt1 WHERE ('0.8374026694610095') LIMIT 3;
SELECT * FROM vt1 WHERE ((((vt1.c0) ISNULL) IN (CAST(vt1.c0 AS NUMERIC)))) ORDER BY (((+ (vt1.c0))) BETWEEN (CASE WHEN vt1.c0 THEN vt1.c0 END) AND ((('') NOT NULL))) ASC, (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)))) NOT BETWEEN ((((vt1.c0))<=(('')))) AND ((((x'', vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, '-97448687', vt1.c0))))) DESC;
SELECT * FROM vt1 WHERE ((((((vt1.c0) ISNULL) IN (CAST(vt1.c0 AS NUMERIC))))AND(0X5f10c6d3))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 END IN ((vt1.c0 IN ()))) ASC  NULLS FIRST, (((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, x'')) AND ((vt1.c0, vt1.c0))))IS NOT(((vt1.c0)GLOB(vt1.c0)))) ASC LIMIT 0X0;
SELECT * FROM vt1 WHERE ((((vt1.c0) ISNULL) IN (CAST(vt1.c0 AS NUMERIC)))) ORDER BY (((+ (vt1.c0))) BETWEEN (CASE WHEN vt1.c0 THEN vt1.c0 END) AND ((('') NOT NULL))) ASC, (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)))) NOT BETWEEN ((((vt1.c0))<=(('')))) AND ((((x'', vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, '-97448687', vt1.c0))))) DESC;
SELECT * FROM vt1 WHERE ((((((vt1.c0) ISNULL) IN (CAST(vt1.c0 AS NUMERIC))))AND(0X5f10c6d3))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 END IN ((vt1.c0 IN ()))) ASC  NULLS FIRST, (((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, x'')) AND ((vt1.c0, vt1.c0))))IS NOT(((vt1.c0)GLOB(vt1.c0)))) ASC LIMIT 0X0;
SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE (((((((((rt0.c0)AND(vt1.c0)))OR(rt0.c2)))OR(rt0.c0)))%(CASE WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END))) ORDER BY ((rt0.c1)>(rt0.c0))  NULLS LAST, (((((rt0.c1, rt0.c3))>((rt0.c3, '1037907256'))))>(((((NULL)AND(vt1.c0)))AND(rt0.c0)))) ASC  NULLS FIRST, ((((((((rt0.c1)GLOB('417953630')))OR(rt0.c2)))AND(rt0.c1 COLLATE RTRIM)))AND((~ (rt0.c0))));
SELECT MAX(rt0.c3) FROM rt0, vt1 WHERE (((((((((((rt0.c0)AND(vt1.c0)))OR(rt0.c2)))OR(rt0.c0)))%(CASE WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END)))AND(ABS(DISTINCT rt0.c2) COLLATE RTRIM))) ORDER BY ((rt0.c1)>(rt0.c0))  NULLS LAST, (((((rt0.c1, rt0.c3))>((rt0.c3, '1037907256'))))>(((((NULL)AND(vt1.c0)))AND(rt0.c0)))) ASC  NULLS FIRST, ((((((((rt0.c1)GLOB('417953630')))OR(rt0.c2)))AND(rt0.c1 COLLATE RTRIM)))AND((~ (rt0.c0)))) LIMIT 0x0 INTERSECT SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE (vt1.c0) ORDER BY ((rt0.c1)>(rt0.c0))  NULLS LAST, (((((rt0.c1, rt0.c3))>((rt0.c3, '1037907256'))))>(((((NULL)AND(vt1.c0)))AND(rt0.c0)))) ASC  NULLS FIRST, ((((((((rt0.c1)GLOB('417953630')))OR(rt0.c2)))AND(rt0.c1 COLLATE RTRIM)))AND((~ (rt0.c0)))) LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (NULL)))OR(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))));
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (NULL)))OR(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))))AND(((((vt1.c0, vt1.c0, vt1.c0))>((0.1838862591106195, vt1.c0, vt1.c0))) IN ())))) LIMIT 2;
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (CASE WHEN rt0.c0 THEN ((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c2)))OR(rt0.c3)))OR(rt0.c2)) WHEN CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 ELSE vt1.c0 END THEN ((rt0.c2)LIKE(rt0.c0)) WHEN vt1.c0 THEN 0.02074230463952942 WHEN rtreenode(rt0.c3, 0.5153899602649155) THEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 END WHEN rt0.c2 COLLATE BINARY THEN TOTAL_CHANGES() ELSE ((rt0.c2)LIKE(rt0.c2)) END) ORDER BY (((- (NULL)))<(CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 ELSE 0x317c8293 END)), x'' DESC  NULLS FIRST;
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (((CASE WHEN rt0.c0 THEN ((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c2)))OR(rt0.c3)))OR(rt0.c2)) WHEN CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 ELSE vt1.c0 END THEN ((rt0.c2)LIKE(rt0.c0)) WHEN vt1.c0 THEN 0.02074230463952942 WHEN rtreenode(rt0.c3, 0.5153899602649155) THEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 END WHEN rt0.c2 COLLATE BINARY THEN TOTAL_CHANGES() ELSE ((rt0.c2)LIKE(rt0.c2)) END)AND(((rt0.c1)GLOB(rt0.c0 COLLATE RTRIM))))) ORDER BY (((- (NULL)))<(CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 ELSE 0X317c8293 END)), x'' DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (x'6c');
SELECT DISTINCT * FROM vt1 WHERE (((x'6c')AND(((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOT NULL)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST((- (vt1.c0)) AS INTEGER));
SELECT * FROM vt1 WHERE (x'6c');
SELECT DISTINCT * FROM vt1 WHERE (((x'6c')AND(((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOT NULL)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST((- (vt1.c0)) AS INTEGER));
SELECT * FROM vt1 WHERE ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ((vt1.c0 IN ())))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOTNULL) DESC  NULLS FIRST, ((vt1.c0 COLLATE RTRIM)AND(((vt1.c0)<>(vt1.c0)))) DESC;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ((vt1.c0 IN ()))))AND(((UNLIKELY(DISTINCT vt1.c0)) IS TRUE)))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOTNULL) DESC  NULLS FIRST, ((vt1.c0 COLLATE RTRIM)AND(((vt1.c0)!=(vt1.c0)))) DESC;
SELECT * FROM vt1 WHERE ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ((vt1.c0 IN ())))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOTNULL) DESC  NULLS FIRST, ((vt1.c0 COLLATE RTRIM)AND(((vt1.c0)<>(vt1.c0)))) DESC;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ((vt1.c0 IN ()))))AND(((UNLIKELY(DISTINCT vt1.c0)) IS TRUE)))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOTNULL) DESC  NULLS FIRST, ((vt1.c0 COLLATE RTRIM)AND(((vt1.c0)!=(vt1.c0)))) DESC;
SELECT MAX(rt0.c3) FROM rt0, vt1 WHERE (rt0.c0) ORDER BY rt0.c1 COLLATE NOCASE  NULLS FIRST;
SELECT DISTINCT MAX(rt0.c3) FROM rt0, vt1 WHERE (((rt0.c0)AND(2.65752894E8))) ORDER BY rt0.c1 COLLATE NOCASE  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((TRIM(DISTINCT rt0.c2)) NOT NULL));
SELECT COUNT(*) FROM rt0, vt1 WHERE (((TRIM(DISTINCT rt0.c2)) NOT NULL)) ORDER BY TYPEOF(DISTINCT ((rt0.c3) NOT BETWEEN (rt0.c1) AND ('K'))) ASC  NULLS LAST, (0xffffffff8219311d IN (rt0.c3 COLLATE NOCASE))  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0 WHERE (CAST(((rt0.c1)&(953433735)) AS REAL));
SELECT COUNT(*) FROM rt0 WHERE (((CAST(((rt0.c1)&(953433735)) AS REAL))AND(CAST(((x'') NOT BETWEEN ('765064518') AND (rt0.c0)) AS BLOB))));
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE ((NOT (((rt0.c2) IS TRUE))));
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE ((NOT (((rt0.c2) IS TRUE)))) ORDER BY ((rt0.c3 COLLATE RTRIM) IS TRUE), (~ (((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c0)))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (((((vt1.c0)||(vt1.c0)))<>(((vt1.c0)>(vt1.c0)))));
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)||(vt1.c0)))<>(((vt1.c0)>(vt1.c0))))) ORDER BY vt1.c0 INTERSECT SELECT ALL * FROM vt1 WHERE (CASE ((vt1.c0)>>(vt1.c0))  WHEN ((vt1.c0)|(0.637391555872359)) THEN (~ (vt1.c0)) WHEN vt1.c0 COLLATE RTRIM THEN TRIM(vt1.c0, vt1.c0) ELSE CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END END) ORDER BY vt1.c0;
SELECT * FROM vt1 WHERE (((((vt1.c0)||(vt1.c0)))<>(((vt1.c0)>(vt1.c0)))));
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)||(vt1.c0)))<>(((vt1.c0)>(vt1.c0))))) ORDER BY vt1.c0 INTERSECT SELECT ALL * FROM vt1 WHERE (CASE ((vt1.c0)>>(vt1.c0))  WHEN ((vt1.c0)|(0.637391555872359)) THEN (~ (vt1.c0)) WHEN vt1.c0 COLLATE RTRIM THEN TRIM(vt1.c0, vt1.c0) ELSE CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END END) ORDER BY vt1.c0;
SELECT * FROM vt1, rt0 WHERE (CASE '萺sn{Lt'  WHEN rt0.c3 THEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN NULL WHEN rt0.c1 THEN rt0.c2 ELSE vt1.c0 END WHEN (~ (rt0.c2)) THEN LIKELIHOOD(rt0.c2, rt0.c1) WHEN '0.6005947234803297' THEN CAST(rt0.c1 AS BLOB) WHEN ((rt0.c1)IS NOT(rt0.c0)) THEN CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c0 END END) ORDER BY ((((((CAST('1304629726' AS INTEGER))AND(CASE rt0.c2  WHEN rt0.c0 THEN -1232717386 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN 0.04436172849319964 END)))AND(((rt0.c1)IS NOT(rt0.c2)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c2)))) ASC  NULLS FIRST, (~ (((rt0.c0)IS NOT(rt0.c3)))) ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE '萺sn{Lt'  WHEN rt0.c3 THEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN NULL WHEN rt0.c1 THEN rt0.c2 ELSE vt1.c0 END WHEN (~ (rt0.c2)) THEN LIKELIHOOD(rt0.c2, rt0.c1) WHEN '0.6005947234803297' THEN CAST(rt0.c1 AS BLOB) WHEN ((rt0.c1)IS NOT(rt0.c0)) THEN CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c0 END END) ORDER BY ((((((CAST('1304629726' AS INTEGER))AND(CASE rt0.c2  WHEN rt0.c0 THEN 0xffffffffb68639b6 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN 0.04436172849319964 END)))AND(((rt0.c1)IS NOT(rt0.c2)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c2)))) ASC  NULLS FIRST, (~ (((rt0.c0)IS NOT(rt0.c3)))) ASC LIMIT 0X0;
SELECT * FROM vt1, rt0 WHERE (CASE '萺sn{Lt'  WHEN rt0.c3 THEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN NULL WHEN rt0.c1 THEN rt0.c2 ELSE vt1.c0 END WHEN (~ (rt0.c2)) THEN LIKELIHOOD(rt0.c2, rt0.c1) WHEN '0.6005947234803297' THEN CAST(rt0.c1 AS BLOB) WHEN ((rt0.c1)IS NOT(rt0.c0)) THEN CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c0 END END) ORDER BY ((((((CAST('1304629726' AS INTEGER))AND(CASE rt0.c2  WHEN rt0.c0 THEN -1232717386 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN 0.04436172849319964 END)))AND(((rt0.c1)IS NOT(rt0.c2)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c2)))) ASC  NULLS FIRST, (~ (((rt0.c0)IS NOT(rt0.c3)))) ASC;
SELECT * FROM vt1, rt0 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c1 ELSE rt0.c1 END)=(((rt0.c1) BETWEEN (rt0.c3) AND (vt1.c0))))) ORDER BY (((NOT (rt0.c0))) NOT NULL), (NOT (((rt0.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c1 ELSE rt0.c1 END)==(((rt0.c1) BETWEEN (rt0.c3) AND (vt1.c0))))) ORDER BY (~ (CAST(rt0.c2 AS NUMERIC))) DESC  NULLS FIRST, ((rt0.c2)&(rt0.c2)) COLLATE RTRIM  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (NULL) ORDER BY (~ (CAST(rt0.c2 AS NUMERIC))) DESC  NULLS FIRST, ((rt0.c2)&(rt0.c2)) COLLATE RTRIM  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c1 ELSE rt0.c1 END)=(((rt0.c1) BETWEEN (rt0.c3) AND (vt1.c0))))) ORDER BY (((NOT (rt0.c0))) NOT NULL), (NOT (((rt0.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN rt0.c3 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c1 ELSE rt0.c1 END)==(((rt0.c1) BETWEEN (rt0.c3) AND (vt1.c0))))) ORDER BY (~ (CAST(rt0.c2 AS NUMERIC))) DESC  NULLS FIRST, ((rt0.c2)&(rt0.c2)) COLLATE RTRIM  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (NULL) ORDER BY (~ (CAST(rt0.c2 AS NUMERIC))) DESC  NULLS FIRST, ((rt0.c2)&(rt0.c2)) COLLATE RTRIM  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((ABS(vt1.c0))==(((vt1.c0) NOTNULL)))) ORDER BY ((0.8687351279150156) BETWEEN ((('-1982442086') BETWEEN (vt1.c0) AND (vt1.c0))) AND (((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))))  NULLS LAST, vt1.c0, CASE WHEN vt1.c0 THEN (vt1.c0 IN (vt1.c0)) WHEN CAST('-1440571497' AS TEXT) THEN ((vt1.c0) ISNULL) WHEN '385616676' THEN (NOT (vt1.c0)) WHEN vt1.c0 COLLATE BINARY THEN (- (vt1.c0)) WHEN vt1.c0 COLLATE NOCASE THEN CAST(vt1.c0 AS TEXT) END  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((ABS(vt1.c0))==(((vt1.c0) NOTNULL)))) ORDER BY vt1.c0  NULLS LAST, (((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)GLOB(vt1.c0)), CAST(vt1.c0 AS TEXT))) AND (((NOT (vt1.c0)), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN 0.6812974278265499 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))  NULLS LAST, 0X52f7abb0 DESC, MIN(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c0)>=(vt1.c0)));
SELECT * FROM rt0 CROSS JOIN vt1 ON rt0.c1 WHERE (((CASE WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END)%(CAST(rt0.c2 AS INTEGER)))) ORDER BY (rt0.c2 COLLATE RTRIM IN (rt0.c0, (rt0.c2 IN (rt0.c1)))) DESC  NULLS FIRST, 0x3b1474a2 ASC  NULLS FIRST;
SELECT * FROM rt0 CROSS JOIN vt1 ON rt0.c1 WHERE (((((CASE WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END)%(CAST(rt0.c2 AS INTEGER))))AND((- ((~ (vt1.c0))))))) ORDER BY x'' ASC  NULLS LAST INTERSECT SELECT ALL * FROM rt0 CROSS JOIN vt1 ON rt0.c1 WHERE (((rt0.c0)+(rt0.c2)) COLLATE NOCASE) ORDER BY x'' ASC  NULLS LAST;
SELECT * FROM rt0 CROSS JOIN vt1 ON rt0.c1 WHERE (((CASE WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END)%(CAST(rt0.c2 AS INTEGER)))) ORDER BY (rt0.c2 COLLATE RTRIM IN (rt0.c0, (rt0.c2 IN (rt0.c1)))) DESC  NULLS FIRST, 0x3b1474a2 ASC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 IN (vt1.c0)) IN ())) ORDER BY ((('751361517' IN (vt1.c0))) BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (((vt1.c0)AND(vt1.c0)))) DESC, ((((((((((vt1.c0)IS(vt1.c0)))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(NULL)))OR(vt1.c0 COLLATE NOCASE)))OR(((vt1.c0)<(vt1.c0))))  NULLS LAST, ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOT NULL)  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0 IN (vt1.c0)) IN ()))AND(vt1.c0))) ORDER BY UNLIKELY(((vt1.c0)||(vt1.c0)))  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY UNLIKELY(((vt1.c0)||(vt1.c0)))  NULLS FIRST LIMIT 2;
SELECT ALL * FROM rt0 WHERE ((((((rt0.c0)) NOT BETWEEN ((0.02137003576269403)) AND ((rt0.c3))))-((+ (rt0.c2))))) ORDER BY (- (((rt0.c1) NOT NULL))), (((rt0.c1) BETWEEN (NULL) AND (rt0.c0)) IN ('(A')) ASC;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c0)) NOT BETWEEN ((0.02137003576269403)) AND ((rt0.c3))))-((+ (rt0.c2))))) ORDER BY (- (((rt0.c1) NOT NULL))), (((rt0.c1) BETWEEN (NULL) AND (rt0.c0)) IN ('(A')) ASC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST('' AS BLOB)) ORDER BY (- (((rt0.c1) NOT NULL))), (((rt0.c1) BETWEEN (NULL) AND (rt0.c0)) IN ('(A')) ASC;
SELECT ALL * FROM rt0 WHERE ((((((rt0.c0)) NOT BETWEEN ((0.02137003576269403)) AND ((rt0.c3))))-((+ (rt0.c2))))) ORDER BY (- (((rt0.c1) NOT NULL))), (((rt0.c1) BETWEEN (NULL) AND (rt0.c0)) IN ('(A')) ASC;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c0)) NOT BETWEEN ((0.02137003576269403)) AND ((rt0.c3))))-((+ (rt0.c2))))) ORDER BY (- (((rt0.c1) NOT NULL))), (((rt0.c1) BETWEEN (NULL) AND (rt0.c0)) IN ('(A')) ASC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST('' AS BLOB)) ORDER BY (- (((rt0.c1) NOT NULL))), (((rt0.c1) BETWEEN (NULL) AND (rt0.c0)) IN ('(A')) ASC;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c1)||(rt0.c3)) IN (((rt0.c1)GLOB(vt1.c0)))));
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c1)||(rt0.c3)) IN (((rt0.c1)GLOB(vt1.c0)))))AND(CASE WHEN ((vt1.c0) IS TRUE) THEN (((rt0.c0, rt0.c2, vt1.c0))!=(('1299452316', vt1.c0, rt0.c1))) ELSE CAST(rt0.c2 AS INTEGER) END))) LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c1)||(rt0.c3)) IN (((rt0.c1)GLOB(vt1.c0)))));
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c1)||(rt0.c3)) IN (((rt0.c1)GLOB(vt1.c0)))))AND(CASE WHEN ((vt1.c0) IS TRUE) THEN (((rt0.c0, rt0.c2, vt1.c0))!=(('1299452316', vt1.c0, rt0.c1))) ELSE CAST(rt0.c2 AS INTEGER) END))) LIMIT 0X1;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CASE LOWER(x'e9')  WHEN (NOT (vt1.c0)) THEN (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, 0.9607073496388701))) ELSE ((vt1.c0)IS NOT(vt1.c0)) END) ORDER BY (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0, vt1.c0))))>=(vt1.c0 COLLATE NOCASE)) DESC, NULL  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((CASE LOWER(x'e9')  WHEN (NOT (vt1.c0)) THEN (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, 0.9607073496388701))) ELSE ((vt1.c0)IS NOT(vt1.c0)) END)AND((+ (CAST(vt1.c0 AS NUMERIC)))))) ORDER BY (((((((NULL)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) IN (vt1.c0 COLLATE RTRIM)) ASC  NULLS FIRST, vt1.c0, ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))||(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (0.622270247530933) ORDER BY ((rt0.c2)+(rt0.c0)) COLLATE BINARY, NULL;
SELECT DISTINCT * FROM rt0 WHERE (0.622270247530933) ORDER BY CAST(CAST(rt0.c1 AS BLOB) AS NUMERIC)  NULLS LAST, (((- (rt0.c2)))<(rt0.c2)) ASC  NULLS LAST, CASE WHEN rt0.c1 COLLATE NOCASE THEN ((((((((((rt0.c2)AND(NULL)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c0)) WHEN ((((rt0.c3)OR(rt0.c2)))OR(rt0.c2)) THEN rt0.c1 COLLATE RTRIM END  NULLS FIRST, (((((rt0.c0, rt0.c0, rt0.c0))<((rt0.c1, rt0.c2, rt0.c0))))<(0.06312290065888748 COLLATE NOCASE));
SELECT ALL * FROM rt0 WHERE (0.622270247530933) ORDER BY ((rt0.c2)+(rt0.c0)) COLLATE BINARY, NULL;
SELECT DISTINCT * FROM rt0 WHERE (0.622270247530933) ORDER BY CAST(CAST(rt0.c1 AS BLOB) AS NUMERIC)  NULLS LAST, (((- (rt0.c2)))<(rt0.c2)) ASC  NULLS LAST, CASE WHEN rt0.c1 COLLATE NOCASE THEN ((((((((((rt0.c2)AND(NULL)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c0)) WHEN ((((rt0.c3)OR(rt0.c2)))OR(rt0.c2)) THEN rt0.c1 COLLATE RTRIM END  NULLS FIRST, (((((rt0.c0, rt0.c0, rt0.c0))<((rt0.c1, rt0.c2, rt0.c0))))<(0.06312290065888748 COLLATE NOCASE));
SELECT ALL * FROM rt0 WHERE (CAST((~ (rt0.c3)) AS TEXT)) ORDER BY CASE (rt0.c0 IN ())  WHEN ((rt0.c2)/(rt0.c0)) THEN ((rt0.c0)+(rt0.c1)) WHEN LIKELIHOOD(DISTINCT rt0.c1, NULL) THEN (NOT (rt0.c3)) END ASC  NULLS LAST, ((CAST(rt0.c2 AS REAL))<<(((rt0.c2) IS TRUE)))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (CAST((~ (rt0.c3)) AS TEXT)) ORDER BY (((((rt0.c1)%(rt0.c3)), ((((((((rt0.c3)AND(rt0.c2)))OR(rt0.c3)))OR(rt0.c1)))AND(rt0.c0)), ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)), rt0.c2))<((CAST(rt0.c1 AS BLOB), rt0.c0, ((rt0.c3)|(rt0.c2)), rt0.c0 COLLATE NOCASE))) DESC  NULLS LAST, CAST(((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3)) AS TEXT) ASC  NULLS LAST, rt0.c2 DESC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM rt0 WHERE (CAST((~ (rt0.c3)) AS TEXT)) ORDER BY CASE (rt0.c0 IN ())  WHEN ((rt0.c2)/(rt0.c0)) THEN ((rt0.c0)+(rt0.c1)) WHEN LIKELIHOOD(DISTINCT rt0.c1, NULL) THEN (NOT (rt0.c3)) END ASC  NULLS LAST, ((CAST(rt0.c2 AS REAL))<<(((rt0.c2) IS TRUE)))  NULLS FIRST;
SELECT ALL MIN(rt0.c1) FROM rt0 INNER JOIN vt1 ON (((- (vt1.c0)))IS((((vt1.c0, rt0.c0, 0.3039898195751116))<=((rt0.c0, vt1.c0, rt0.c2))))) WHERE (((((rt0.c1)-(rt0.c2))) BETWEEN (rt0.c1) AND ((rt0.c1 IN ()))));
SELECT ALL MIN(rt0.c1) FROM rt0 INNER JOIN vt1 ON (((- (vt1.c0)))IS((((vt1.c0, rt0.c0, 0.3039898195751116))<=((rt0.c0, vt1.c0, rt0.c2))))) WHERE (((((rt0.c1)-(rt0.c2))) BETWEEN (rt0.c1) AND ((rt0.c1 IN ()))));
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((+ (rt0.c0)) IN ()) WHERE (7.74386652E8) ORDER BY (((((rt0.c3)AND(rt0.c0)))AND(rt0.c3)) IN ()) ASC  NULLS FIRST, ((((rt0.c3) IS TRUE)) NOT BETWEEN (((vt1.c0)IS NOT(rt0.c3))) AND ((rt0.c2 IN (rt0.c1)))) ASC;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((+ (rt0.c0)) IN ()) WHERE (((7.74386652E8)AND(LIKE(CAST(rt0.c2 AS INTEGER), (NOT (rt0.c3)), '0')))) ORDER BY CAST(((rt0.c3)>=(rt0.c0)) AS TEXT) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((+ (rt0.c0)) IN ()) WHERE (7.74386652E8) ORDER BY (((((rt0.c3)AND(rt0.c0)))AND(rt0.c3)) IN ()) ASC  NULLS FIRST, ((((rt0.c3) IS TRUE)) NOT BETWEEN (((vt1.c0)IS NOT(rt0.c3))) AND ((rt0.c2 IN (rt0.c1)))) ASC;
SELECT * FROM rt0 WHERE (('W輿L*~' IN (((((rt0.c1)OR(rt0.c1)))OR('-758860721')))));
SELECT ALL * FROM rt0 WHERE (('W輿L*~' IN (((((rt0.c1)OR(rt0.c1)))OR('-758860721'))))) ORDER BY CASE WHEN (rt0.c3 IN (rt0.c3)) THEN x'' WHEN CASE rt0.c0  WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c2 END THEN TYPEOF(rt0.c2) ELSE (+ (rt0.c2)) END ASC, ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c3)) COLLATE NOCASE ASC  NULLS FIRST LIMIT 2;
SELECT * FROM rt0 WHERE (('W輿L*~' IN (((((rt0.c1)OR(rt0.c1)))OR('-758860721')))));
SELECT ALL * FROM rt0 WHERE (('W輿L*~' IN (((((rt0.c1)OR(rt0.c1)))OR('-758860721'))))) ORDER BY CASE WHEN (rt0.c3 IN (rt0.c3)) THEN x'' WHEN CASE rt0.c0  WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c2 END THEN TYPEOF(rt0.c2) ELSE (+ (rt0.c2)) END ASC, ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c3)) COLLATE NOCASE ASC  NULLS FIRST LIMIT 2;
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE ((((rt0.c2) BETWEEN (rt0.c2) AND (vt1.c0)) IN ()));
SELECT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((rt0.c2) BETWEEN (rt0.c2) AND (vt1.c0)) IN ())) LIMIT 1;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0))) NOT BETWEEN ((rt0.c1 IN ())) AND (CASE WHEN rt0.c0 THEN rt0.c3 END)));
SELECT DISTINCT MAX(rt0.c2) FROM rt0 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0))) NOT BETWEEN ((rt0.c1 IN ())) AND (CASE WHEN rt0.c0 THEN rt0.c3 END))) LIMIT 0X1;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0) NOTNULL) IN (((((((((vt1.c0)OR(x'baf3c49ec3')))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))))) ORDER BY (0x2d6ed380 IN ()) ASC  NULLS FIRST, (- ((+ (vt1.c0)))) ASC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0) NOTNULL) IN (((((((((vt1.c0)OR(x'baf3c49ec3')))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND((- ((NOT (vt1.c0))))))) ORDER BY (762237824 IN ()) ASC  NULLS FIRST, (- ((+ (vt1.c0)))) ASC LIMIT 0X2;
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) LIMIT 0X1 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN vt1.c0 THEN (- (vt1.c0)) END) LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE ((((((rt0.c0)AND(rt0.c3)))AND(rt0.c0)) IN ()));
SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE ((((((((rt0.c0)AND(rt0.c3)))AND(rt0.c0)) IN ()))AND(CAST(-792507701 AS NUMERIC)))) ORDER BY ((x'1ef7')||(rt0.c0 COLLATE BINARY)) DESC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((- (((vt1.c0)-(rt0.c3)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((- (((vt1.c0)-(rt0.c3))))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (vt1.c0);
SELECT ALL * FROM rt0, vt1 WHERE ((- (((vt1.c0)-(rt0.c3)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((- (((vt1.c0)-(rt0.c3))))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (vt1.c0);
SELECT * FROM vt1, rt0 WHERE (json_quote(rt0.c0));
SELECT * FROM vt1, rt0 WHERE (((json_quote(rt0.c0))AND(CAST(LIKELIHOOD(rt0.c0, rt0.c2) AS INTEGER)))) ORDER BY ((((0.6669332360681419)%(rt0.c2)))GLOB(CASE WHEN rt0.c2 THEN x'' END)) DESC, ((((rt0.c3) NOT NULL)) NOT BETWEEN (x'') AND (rt0.c1 COLLATE RTRIM));
SELECT * FROM vt1, rt0 WHERE (json_quote(rt0.c0));
SELECT * FROM vt1, rt0 WHERE (((json_quote(rt0.c0))AND(CAST(LIKELIHOOD(rt0.c0, rt0.c2) AS INTEGER)))) ORDER BY ((((0.6669332360681419)%(rt0.c2)))GLOB(CASE WHEN rt0.c2 THEN x'' END)) DESC, ((((rt0.c3) NOT NULL)) NOT BETWEEN (x'') AND (rt0.c1 COLLATE RTRIM));
SELECT * FROM rt0 WHERE (LIKELY((((rt0.c3, 'UkP4A'))!=((rt0.c3, rt0.c1))))) ORDER BY ((((((rt0.c3)OR(rt0.c0)))AND(rt0.c3))) ISNULL), ((((rt0.c1)OR(rt0.c1)))OR(rt0.c2)) COLLATE RTRIM  NULLS FIRST, (+ (((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c0)))), ((LAST_INSERT_ROWID())||(((rt0.c2)>(rt0.c0))))  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (LIKELY((((rt0.c3, 'UkP4A'))!=((rt0.c3, rt0.c1))))) ORDER BY (+ (rt0.c3 COLLATE NOCASE))  NULLS FIRST, ((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c0)))|(CASE 0Xffffffffa77e81c5  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END)) ASC LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((+ (((((rt0.c1)AND(rt0.c3)))OR(rt0.c3))))) ORDER BY (+ (rt0.c3 COLLATE NOCASE))  NULLS FIRST, ((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c0)))|(CASE 0xffffffffa77e81c5  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END)) ASC LIMIT 1;
SELECT * FROM rt0 WHERE (LIKELY((((rt0.c3, 'UkP4A'))!=((rt0.c3, rt0.c1))))) ORDER BY ((((((rt0.c3)OR(rt0.c0)))AND(rt0.c3))) ISNULL), ((((rt0.c1)OR(rt0.c1)))OR(rt0.c2)) COLLATE RTRIM  NULLS FIRST, (+ (((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c0)))), ((LAST_INSERT_ROWID())||(((rt0.c2)>(rt0.c0))))  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (LIKELY((((rt0.c3, 'UkP4A'))!=((rt0.c3, rt0.c1))))) ORDER BY (+ (rt0.c3 COLLATE NOCASE))  NULLS FIRST, ((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c0)))|(CASE 0Xffffffffa77e81c5  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END)) ASC LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((+ (((((rt0.c1)AND(rt0.c3)))OR(rt0.c3))))) ORDER BY (+ (rt0.c3 COLLATE NOCASE))  NULLS FIRST, ((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c0)))|(CASE 0xffffffffa77e81c5  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c1 END)) ASC LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (((rt0.c1)<<(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))))) ORDER BY ((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c1)<<(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))))) ORDER BY ((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (((rt0.c1)<<(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))))) ORDER BY ((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c1)<<(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))))) ORDER BY ((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((NOT (vt1.c0 COLLATE BINARY))) ORDER BY (((((('0.5551252374330624')AND(((vt1.c0) NOTNULL))))AND((('') BETWEEN (vt1.c0) AND (vt1.c0)))))OR(CASE WHEN vt1.c0 THEN 0.8146858330831908 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 NOT INDEXED WHERE ((((NOT (vt1.c0 COLLATE BINARY)))AND((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, (vt1.c0 IN ()))) AND (((~ (vt1.c0)), ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))))) ORDER BY ((((vt1.c0) IS TRUE)) NOT BETWEEN (NULL) AND (((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ASC  NULLS FIRST, vt1.c0  NULLS FIRST, ((((vt1.c0)|(vt1.c0))) NOTNULL) DESC LIMIT 0X2;
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (((((vt1.c0) BETWEEN (rt0.c2) AND (vt1.c0))) NOT BETWEEN (((NULL) ISNULL)) AND (rt0.c1 COLLATE NOCASE)));
SELECT DISTINCT MIN(rt0.c0) FROM rt0, vt1 WHERE (((((((vt1.c0) BETWEEN (rt0.c2) AND (vt1.c0))) NOT BETWEEN (((NULL) ISNULL)) AND (rt0.c1 COLLATE NOCASE)))AND((((- (vt1.c0)))AND((('640185597')>(rt0.c1)))))));
SELECT ALL * FROM vt1, rt0 WHERE (((TYPEOF(vt1.c0))|(NULL))) ORDER BY ((vt1.c0) NOT NULL) COLLATE BINARY COLLATE NOCASE ASC, NULL DESC  NULLS LAST, ((((((((((x'08a0')AND((rt0.c3 IN ()))))OR(((rt0.c0) NOT NULL))))OR((((x'a0', rt0.c1, '0lDBdzb3')) NOT BETWEEN ((rt0.c3, rt0.c2, 0.7241807467882587)) AND ((rt0.c1, x'10de08', rt0.c2))))))OR((vt1.c0 IN (rt0.c1)))))OR(x'')) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((TYPEOF(vt1.c0))|(NULL)))AND((0.9704879159451657 IN (((((((((vt1.c0)AND(rt0.c1)))AND(rt0.c2)))AND(vt1.c0)))OR(rt0.c3)), (x'' IN (rt0.c0))))))) ORDER BY ((vt1.c0) NOT NULL) COLLATE BINARY COLLATE NOCASE ASC, NULL DESC  NULLS LAST, ((((((((((x'08a0')AND((rt0.c3 IN ()))))OR(((rt0.c0) NOT NULL))))OR((((x'a0', rt0.c1, '0lDBdzb3')) NOT BETWEEN ((rt0.c3, rt0.c2, 0.7241807467882587)) AND ((rt0.c1, x'10de08', rt0.c2))))))OR((vt1.c0 IN (rt0.c1)))))OR(x'')) DESC LIMIT 0X3;
SELECT ALL * FROM vt1, rt0 WHERE (((TYPEOF(vt1.c0))|(NULL))) ORDER BY ((vt1.c0) NOT NULL) COLLATE BINARY COLLATE NOCASE ASC, NULL DESC  NULLS LAST, ((((((((((x'08a0')AND((rt0.c3 IN ()))))OR(((rt0.c0) NOT NULL))))OR((((x'a0', rt0.c1, '0lDBdzb3')) NOT BETWEEN ((rt0.c3, rt0.c2, 0.7241807467882587)) AND ((rt0.c1, x'10de08', rt0.c2))))))OR((vt1.c0 IN (rt0.c1)))))OR(x'')) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((TYPEOF(vt1.c0))|(NULL)))AND((0.9704879159451657 IN (((((((((vt1.c0)AND(rt0.c1)))AND(rt0.c2)))AND(vt1.c0)))OR(rt0.c3)), (x'' IN (rt0.c0))))))) ORDER BY ((vt1.c0) NOT NULL) COLLATE BINARY COLLATE NOCASE ASC, NULL DESC  NULLS LAST, ((((((((((x'08a0')AND((rt0.c3 IN ()))))OR(((rt0.c0) NOT NULL))))OR((((x'a0', rt0.c1, '0lDBdzb3')) NOT BETWEEN ((rt0.c3, rt0.c2, 0.7241807467882587)) AND ((rt0.c1, x'10de08', rt0.c2))))))OR((vt1.c0 IN (rt0.c1)))))OR(x'')) DESC LIMIT 0X3;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (((((rt0.c1)==(rt0.c1))) NOT BETWEEN (((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c2))) AND (((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))AND(rt0.c3)))OR(rt0.c0)))));
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (((((rt0.c1)=(rt0.c1))) NOT BETWEEN (((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c2))) AND (((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))AND(rt0.c3)))OR(rt0.c0))))) ORDER BY NULL;
SELECT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE ('9');
SELECT ALL COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE ((('9')AND(rt0.c3))) ORDER BY CASE WHEN x'' THEN ((((((rt0.c1)AND(rt0.c2)))OR(rt0.c3)))OR(rt0.c2)) WHEN ((((((rt0.c2)OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c0)) THEN ((rt0.c0) ISNULL) WHEN HEX(rt0.c0) THEN ((((((((((((x'')OR(rt0.c2)))AND(NULL)))OR(vt1.c0)))AND(rt0.c2)))OR(vt1.c0)))OR(rt0.c3)) ELSE x'' END ASC  NULLS FIRST INTERSECT SELECT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c1)&('T	')))GLOB((rt0.c3 IN (rt0.c3))))) ORDER BY CASE WHEN x'' THEN ((((((rt0.c1)AND(rt0.c2)))OR(rt0.c3)))OR(rt0.c2)) WHEN ((((((rt0.c2)OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c0)) THEN ((rt0.c0) ISNULL) WHEN HEX(rt0.c0) THEN ((((((((((((x'')OR(rt0.c2)))AND(NULL)))OR(vt1.c0)))AND(rt0.c2)))OR(vt1.c0)))OR(rt0.c3)) ELSE x'' END ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (LOWER(rt0.c1) COLLATE NOCASE);
SELECT * FROM rt0 WHERE (((LOWER(rt0.c1) COLLATE NOCASE)AND(((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3))) ISNULL)))) LIMIT 3 INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c1) NOTNULL))>=(rt0.c2))) LIMIT 0X3;
SELECT * FROM rt0 WHERE (LOWER(rt0.c1) COLLATE NOCASE);
SELECT * FROM rt0 WHERE (((LOWER(rt0.c1) COLLATE NOCASE)AND(((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3))) ISNULL)))) LIMIT 3 INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c1) NOTNULL))>=(rt0.c2))) LIMIT 0X3;
SELECT COUNT(*) FROM rt0 WHERE (CAST((~ (rt0.c1)) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CAST((~ (rt0.c1)) AS NUMERIC)) ORDER BY ((((rt0.c1) NOTNULL)) NOT BETWEEN (((x'5314') NOT NULL)) AND (8.15593498E8)) ASC, ((((((((((rt0.c1)GLOB(rt0.c3)))OR(ABS(rt0.c1))))AND(CAST(rt0.c0 AS BLOB))))OR(CAST(rt0.c0 AS REAL))))AND((((rt0.c2, '^欚GY㖯687 -337072816314388848 1613905673272840188 1784-', rt0.c2))>((rt0.c3, rt0.c0, NULL))))) DESC, CASE WHEN (rt0.c1 IN ()) THEN (~ (rt0.c3)) WHEN ((((((rt0.c0)AND(rt0.c2)))AND(rt0.c1)))AND('{')) THEN CAST(rt0.c2 AS TEXT) WHEN CASE WHEN rt0.c3 THEN rt0.c3 WHEN NULL THEN rt0.c3 END THEN x'' END DESC  NULLS LAST, ((rt0.c2)%((rt0.c1 IN ())))  NULLS LAST, (- (((rt0.c3) IS FALSE))) LIMIT 0X2 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (IFNULL(DISTINCT ((rt0.c3)&(rt0.c2)), rt0.c1)) ORDER BY ((((rt0.c1) NOTNULL)) NOT BETWEEN (((x'5314') NOT NULL)) AND (8.15593498E8)) ASC, ((((((((((rt0.c1)GLOB(rt0.c3)))OR(ABS(rt0.c1))))AND(CAST(rt0.c0 AS BLOB))))OR(CAST(rt0.c0 AS REAL))))AND((((rt0.c2, '^欚GY㖯687 -337072816314388848 1613905673272840188 1784-', rt0.c2))>((rt0.c3, rt0.c0, NULL))))) DESC, CASE WHEN (rt0.c1 IN ()) THEN (~ (rt0.c3)) WHEN ((((((rt0.c0)AND(rt0.c2)))AND(rt0.c1)))AND('{')) THEN CAST(rt0.c2 AS TEXT) WHEN CASE WHEN rt0.c3 THEN rt0.c3 WHEN NULL THEN rt0.c3 END THEN x'' END DESC  NULLS LAST, ((rt0.c2)%((rt0.c1 IN ())))  NULLS LAST, (- (((rt0.c3) IS FALSE))) LIMIT 0X2;
SELECT * FROM vt1 WHERE (((((vt1.c0)LIKE(vt1.c0))) BETWEEN (((vt1.c0)IS(vt1.c0))) AND ((vt1.c0 IN ()))));
SELECT * FROM vt1 WHERE (((((vt1.c0)LIKE(vt1.c0))) BETWEEN (((vt1.c0)IS(vt1.c0))) AND ((vt1.c0 IN ())))) ORDER BY (((vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), (- (vt1.c0)))) AND ((vt1.c0 COLLATE NOCASE, ((vt1.c0)>(vt1.c0))))) DESC, (+ (RTRIM(vt1.c0)))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE ((x'ff6142' IN ())) ORDER BY (((vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), (- (vt1.c0)))) AND ((vt1.c0 COLLATE NOCASE, ((vt1.c0)>(vt1.c0))))) DESC, (+ (RTRIM(vt1.c0)))  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((vt1.c0)LIKE(vt1.c0))) BETWEEN (((vt1.c0)IS(vt1.c0))) AND ((vt1.c0 IN ()))));
SELECT * FROM vt1 WHERE (((((vt1.c0)LIKE(vt1.c0))) BETWEEN (((vt1.c0)IS(vt1.c0))) AND ((vt1.c0 IN ())))) ORDER BY (((vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), (- (vt1.c0)))) AND ((vt1.c0 COLLATE NOCASE, ((vt1.c0)>(vt1.c0))))) DESC, (+ (RTRIM(vt1.c0)))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE ((x'ff6142' IN ())) ORDER BY (((vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), (- (vt1.c0)))) AND ((vt1.c0 COLLATE NOCASE, ((vt1.c0)>(vt1.c0))))) DESC, (+ (RTRIM(vt1.c0)))  NULLS FIRST;
SELECT * FROM vt1 INNER JOIN rt0 ON vt1.c0 WHERE (ABS(DISTINCT rt0.c3 COLLATE BINARY));
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON vt1.c0 WHERE (ABS(DISTINCT rt0.c3 COLLATE BINARY)) INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON vt1.c0 WHERE (CAST((x'642b81' IN ()) AS INTEGER));
SELECT * FROM vt1 INNER JOIN rt0 ON vt1.c0 WHERE (ABS(DISTINCT rt0.c3 COLLATE BINARY));
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON vt1.c0 WHERE (ABS(DISTINCT rt0.c3 COLLATE BINARY)) INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON vt1.c0 WHERE (CAST((x'642b81' IN ()) AS INTEGER));
SELECT * FROM rt0, vt1 WHERE ((NOT (rt0.c1 COLLATE NOCASE))) ORDER BY vt1.c0  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((NOT (rt0.c1 COLLATE NOCASE))) ORDER BY 0X3fc7ac76 DESC  NULLS FIRST, x''  NULLS FIRST LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE ((NOT (rt0.c1 COLLATE NOCASE))) ORDER BY vt1.c0  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((NOT (rt0.c1 COLLATE NOCASE))) ORDER BY 0X3fc7ac76 DESC  NULLS FIRST, x''  NULLS FIRST LIMIT 0x0;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)!=(vt1.c0)), ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))))>((((vt1.c0)>=(vt1.c0)), vt1.c0)))) ORDER BY (((NOT (vt1.c0))) BETWEEN ((((vt1.c0, vt1.c0)) BETWEEN ((0.9894390160852276, 0.7431497733342924)) AND ((vt1.c0, vt1.c0)))) AND (((vt1.c0)>>(vt1.c0)))) ASC;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)<>(vt1.c0)), ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))))>((((vt1.c0)>=(vt1.c0)), vt1.c0)))) ORDER BY (((NOT (vt1.c0))) BETWEEN ((((vt1.c0, vt1.c0)) BETWEEN ((0.9894390160852276, 0.7431497733342924)) AND ((vt1.c0, vt1.c0)))) AND (((vt1.c0)>>(vt1.c0)))) ASC LIMIT 0X0;
SELECT ALL * FROM vt1, rt0 WHERE (CASE CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c2 ELSE NULL END  WHEN CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 END THEN rt0.c2 WHEN ((rt0.c0)-('1955960763')) THEN ((rt0.c1)>=(rt0.c2)) WHEN ((rt0.c3)LIKE(rt0.c0)) THEN ((((((((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c0)))AND(rt0.c1)))OR(rt0.c3)) END);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c2 ELSE NULL END  WHEN CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 END THEN rt0.c2 WHEN ((rt0.c0)-('1955960763')) THEN ((rt0.c1)>=(rt0.c2)) WHEN ((rt0.c3)LIKE(rt0.c0)) THEN ((((((((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c0)))AND(rt0.c1)))OR(rt0.c3)) END)AND((((NOT (rt0.c3))) BETWEEN ((((rt0.c2))>=((rt0.c1)))) AND ((+ (vt1.c0))))))) ORDER BY (NOT ((((rt0.c0, rt0.c0))==((rt0.c1, rt0.c1))))) DESC  NULLS LAST, ((((((((((((rt0.c2)OR(rt0.c2)))AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c1)))=(((rt0.c2)=(rt0.c1))))  NULLS LAST LIMIT 4 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (COALESCE(DISTINCT ((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)), rt0.c1, ((vt1.c0) ISNULL))) ORDER BY (NOT ((((rt0.c0, rt0.c0))=((rt0.c1, rt0.c1))))) DESC  NULLS LAST, ((((((((((((rt0.c2)OR(rt0.c2)))AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c1)))==(((rt0.c2)==(rt0.c1))))  NULLS LAST LIMIT 0x4;
SELECT ALL * FROM vt1, rt0 WHERE (CASE CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c2 ELSE NULL END  WHEN CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 END THEN rt0.c2 WHEN ((rt0.c0)-('1955960763')) THEN ((rt0.c1)>=(rt0.c2)) WHEN ((rt0.c3)LIKE(rt0.c0)) THEN ((((((((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c0)))AND(rt0.c1)))OR(rt0.c3)) END);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c2 ELSE NULL END  WHEN CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 END THEN rt0.c2 WHEN ((rt0.c0)-('1955960763')) THEN ((rt0.c1)>=(rt0.c2)) WHEN ((rt0.c3)LIKE(rt0.c0)) THEN ((((((((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c0)))AND(rt0.c1)))OR(rt0.c3)) END)AND((((NOT (rt0.c3))) BETWEEN ((((rt0.c2))>=((rt0.c1)))) AND ((+ (vt1.c0))))))) ORDER BY (NOT ((((rt0.c0, rt0.c0))==((rt0.c1, rt0.c1))))) DESC  NULLS LAST, ((((((((((((rt0.c2)OR(rt0.c2)))AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c1)))=(((rt0.c2)=(rt0.c1))))  NULLS LAST LIMIT 4 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (COALESCE(DISTINCT ((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)), rt0.c1, ((vt1.c0) ISNULL))) ORDER BY (NOT ((((rt0.c0, rt0.c0))=((rt0.c1, rt0.c1))))) DESC  NULLS LAST, ((((((((((((rt0.c2)OR(rt0.c2)))AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c1)))==(((rt0.c2)==(rt0.c1))))  NULLS LAST LIMIT 0x4;
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE ((- (((rt0.c0) ISNULL))));
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE ((- (((rt0.c0) ISNULL)))) LIMIT 1;
SELECT * FROM vt1 WHERE ((vt1.c0 COLLATE BINARY IN ())) ORDER BY CAST(((x'55') IS FALSE) AS BLOB) ASC  NULLS LAST, 0.8260504130193113 DESC;
SELECT * FROM vt1 WHERE ((vt1.c0 COLLATE BINARY IN ())) ORDER BY CAST(((x'55') IS FALSE) AS BLOB) ASC  NULLS LAST, 0.8260504130193113 DESC LIMIT 1;
SELECT * FROM vt1 WHERE ((vt1.c0 COLLATE BINARY IN ())) ORDER BY CAST(((x'55') IS FALSE) AS BLOB) ASC  NULLS LAST, 0.8260504130193113 DESC;
SELECT * FROM vt1 WHERE ((vt1.c0 COLLATE BINARY IN ())) ORDER BY CAST(((x'55') IS FALSE) AS BLOB) ASC  NULLS LAST, 0.8260504130193113 DESC LIMIT 1;
SELECT * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND(CASE ((vt1.c0)||(vt1.c0))  WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN ((vt1.c0) ISNULL) WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)<=(vt1.c0)) WHEN HEX(vt1.c0) THEN ((vt1.c0)+(vt1.c0)) ELSE ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END))) LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0) IS FALSE) WHEN (vt1.c0 IN (vt1.c0)) THEN (((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, NULL, vt1.c0, '\zN|')) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0))) WHEN vt1.c0 COLLATE RTRIM THEN (vt1.c0 IN ()) END) LIMIT 0x3;
SELECT * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND(CASE ((vt1.c0)||(vt1.c0))  WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN ((vt1.c0) ISNULL) WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)<=(vt1.c0)) WHEN HEX(vt1.c0) THEN ((vt1.c0)+(vt1.c0)) ELSE ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) END))) LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN ((vt1.c0)>>(vt1.c0)) THEN ((vt1.c0) IS FALSE) WHEN (vt1.c0 IN (vt1.c0)) THEN (((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, NULL, vt1.c0, '\zN|')) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0))) WHEN vt1.c0 COLLATE RTRIM THEN (vt1.c0 IN ()) END) LIMIT 0x3;
SELECT MAX(rt0.c2) FROM rt0 WHERE (((CAST(-1.834146775E9 AS REAL)) BETWEEN (0.09514720601543125) AND (((rt0.c1) BETWEEN (rt0.c0) AND (NULL)))));
SELECT DISTINCT MAX(rt0.c2) FROM rt0 WHERE (((((CAST(-1.834146775E9 AS REAL)) BETWEEN (0.09514720601543125) AND (((rt0.c1) BETWEEN (rt0.c0) AND (NULL)))))AND(rt0.c1))) ORDER BY ((((((((rt0.c0)||(rt0.c0)))AND((rt0.c1 IN ()))))OR(((rt0.c2) ISNULL))))AND(((rt0.c2)%(rt0.c3)))), rt0.c3 COLLATE NOCASE ASC;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3, rt0.c3, rt0.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, rt0.c0, rt0.c3, rt0.c3, rt0.c1)) AND ((rt0.c0, vt1.c0, rt0.c2, rt0.c0, vt1.c0))) COLLATE NOCASE);
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3, rt0.c3, rt0.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, rt0.c0, rt0.c3, rt0.c3, rt0.c1)) AND ((rt0.c0, vt1.c0, rt0.c2, rt0.c0, vt1.c0))) COLLATE NOCASE) LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3, rt0.c3, rt0.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, rt0.c0, rt0.c3, rt0.c3, rt0.c1)) AND ((rt0.c0, vt1.c0, rt0.c2, rt0.c0, vt1.c0))) COLLATE NOCASE);
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3, rt0.c3, rt0.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, rt0.c0, rt0.c3, rt0.c3, rt0.c1)) AND ((rt0.c0, vt1.c0, rt0.c2, rt0.c0, vt1.c0))) COLLATE NOCASE) LIMIT 0;
SELECT ALL MIN(rt0.c0) FROM vt1 NATURAL JOIN rt0 WHERE ((((vt1.c0) IS FALSE) IN (IFNULL(rt0.c1, vt1.c0)))) ORDER BY ((json_patch(rt0.c2, rt0.c0)) BETWEEN (CASE WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 END) AND (rt0.c3 COLLATE BINARY));
SELECT DISTINCT MIN(rt0.c0) FROM vt1 NATURAL JOIN rt0 WHERE ((((vt1.c0) IS FALSE) IN (IFNULL(rt0.c1, vt1.c0)))) ORDER BY ((json_patch(rt0.c2, rt0.c0)) BETWEEN (CASE WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 END) AND (rt0.c3 COLLATE BINARY)) INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM vt1 NATURAL JOIN rt0 WHERE ((((rt0.c1)) NOT BETWEEN ((rt0.c3)) AND ((((vt1.c0) NOTNULL))))) ORDER BY ((json_patch(rt0.c2, rt0.c0)) BETWEEN (CASE WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 END) AND (rt0.c3 COLLATE BINARY));
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE BINARY WHERE (x'cb') ORDER BY (~ (CAST(vt1.c0 AS REAL))) ASC;
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE BINARY WHERE (((x'cb')AND((((rt0.c1, vt1.c0, rt0.c3)) BETWEEN ((CAST(vt1.c0 AS REAL), CASE rt0.c3  WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c1 END, '682507384')) AND ((rt0.c2 COLLATE BINARY, NULLIF(rt0.c3, NULL), rt0.c3)))))) ORDER BY rt0.c3 DESC, (rt0.c3 COLLATE RTRIM IN (((rt0.c0)IS(rt0.c3)))) DESC, (+ (-379422826 COLLATE BINARY)) DESC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE BINARY WHERE (vt1.c0) ORDER BY rt0.c3 DESC, (rt0.c3 COLLATE RTRIM IN (((rt0.c0)IS(rt0.c3)))) DESC, (+ (-379422826 COLLATE BINARY)) DESC  NULLS LAST;
SELECT COUNT(*) FROM rt0 WHERE ((((rt0.c3, rt0.c1)) NOT BETWEEN ((rt0.c3, HEX(rt0.c1))) AND ((rt0.c2 COLLATE NOCASE, (((rt0.c1)) BETWEEN ((rt0.c1)) AND ((rt0.c1)))))));
SELECT COUNT(*) FROM rt0 WHERE ((((((rt0.c3, rt0.c1)) NOT BETWEEN ((rt0.c3, HEX(rt0.c1))) AND ((rt0.c2 COLLATE NOCASE, (((rt0.c1)) BETWEEN ((rt0.c1)) AND ((rt0.c1)))))))AND(((((rt0.c0) IS FALSE))|(0.8393846579259523))))) ORDER BY ((((((((((rt0.c2)GLOB(rt0.c3)))AND(((rt0.c0)=(rt0.c0)))))OR(((rt0.c3) NOTNULL))))OR(CASE WHEN rt0.c1 THEN rt0.c1 END)))OR(((rt0.c0) BETWEEN ('Oz>	ux勷~f') AND (rt0.c3)))) ASC  NULLS LAST, ((((rt0.c1)<>(NULL)))>(LOWER(rt0.c1))) ASC, ((x'')&((((rt0.c2)) BETWEEN ((rt0.c1)) AND ((rt0.c2))))) DESC LIMIT 1;
SELECT MIN(vt1.c0) FROM vt1 WHERE (CAST(vt1.c0 COLLATE RTRIM AS NUMERIC)) ORDER BY CASE WHEN ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(0x4faaf06b)))AND(vt1.c0)) THEN NULL COLLATE NOCASE WHEN ((vt1.c0) IS TRUE) THEN IFNULL(vt1.c0, 1179529806) END DESC  NULLS LAST, (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0, vt1.c0))))>>(((vt1.c0)OR(vt1.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 COLLATE RTRIM AS NUMERIC))AND((+ (CASE vt1.c0  WHEN vt1.c0 THEN 'Cnt䐴' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END))))) ORDER BY CASE WHEN ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(0x4faaf06b)))AND(vt1.c0)) THEN NULL COLLATE NOCASE WHEN ((vt1.c0) IS TRUE) THEN IFNULL(vt1.c0, 1179529806) END DESC  NULLS LAST, (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0, vt1.c0))))>>(((vt1.c0)OR(vt1.c0)))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON CASE rt0.c2  WHEN x'' THEN 0.022669507786977516 WHEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 END THEN '' WHEN CAST(rt0.c0 AS INTEGER) THEN (((rt0.c0, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c0))) WHEN ((vt1.c0) NOT NULL) THEN 0xffffffff8e228e17 ELSE (+ (rt0.c3)) END WHERE ((((NOT (rt0.c2))) IS FALSE));
SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN rt0 ON CASE rt0.c2  WHEN x'' THEN 0.022669507786977516 WHEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 END THEN '' WHEN CAST(rt0.c0 AS INTEGER) THEN (((rt0.c0, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c0))) WHEN ((vt1.c0) NOT NULL) THEN 0Xffffffff8e228e17 ELSE (+ (rt0.c3)) END WHERE ((((NOT (rt0.c2))) IS FALSE)) ORDER BY (vt1.c0 IN (rt0.c0, rt0.c3)) COLLATE RTRIM ASC, ((rt0.c0 COLLATE NOCASE) BETWEEN (rt0.c0 COLLATE BINARY) AND (((rt0.c1)<<(rt0.c0)))) DESC LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN rt0 ON CASE rt0.c2  WHEN x'' THEN 0.022669507786977516 WHEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 END THEN '' WHEN CAST(rt0.c0 AS INTEGER) THEN (((rt0.c0, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c0))) WHEN ((vt1.c0) NOT NULL) THEN 0Xffffffff8e228e17 ELSE (+ (rt0.c3)) END WHERE (ABS(DISTINCT ((rt0.c2) NOT BETWEEN (rt0.c3) AND (x'9a')))) ORDER BY (vt1.c0 IN (rt0.c0, rt0.c3)) COLLATE RTRIM ASC, ((rt0.c0 COLLATE NOCASE) BETWEEN (rt0.c0 COLLATE BINARY) AND (((rt0.c1)<<(rt0.c0)))) DESC LIMIT 0x1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0 IN ('Q&cX')))>=((+ (vt1.c0))))) ORDER BY (NOT (IFNULL(DISTINCT vt1.c0, vt1.c0))), (- (CAST(vt1.c0 AS INTEGER)))  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0 IN ('Q&cX')))>((+ (vt1.c0)))))AND(((LOWER(DISTINCT vt1.c0)) BETWEEN (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))) AND (CASE WHEN NULL THEN vt1.c0 END))))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (vt1.c0 COLLATE BINARY)) INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((+ (((vt1.c0) NOTNULL)))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (vt1.c0 COLLATE BINARY));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (CASE ((rt0.c3)|(rt0.c1))  WHEN (+ (x'ae70')) THEN (vt1.c0 IN ()) WHEN ((x'06ae6c')OR(rt0.c1)) THEN (- (rt0.c0)) WHEN CAST(rt0.c0 AS NUMERIC) THEN (((rt0.c3, vt1.c0)) NOT BETWEEN ((rt0.c0, rt0.c0)) AND ((vt1.c0, NULL))) END);
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (CASE ((rt0.c3)|(rt0.c1))  WHEN (+ (x'ae70')) THEN (vt1.c0 IN ()) WHEN ((x'06ae6c')OR(rt0.c1)) THEN (- (rt0.c0)) WHEN CAST(rt0.c0 AS NUMERIC) THEN (((rt0.c3, vt1.c0)) NOT BETWEEN ((rt0.c0, rt0.c0)) AND ((vt1.c0, NULL))) END) ORDER BY ((rt0.c1 COLLATE BINARY)-(vt1.c0 COLLATE BINARY)) LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (UNLIKELY(('_Qd' IN (rt0.c0)))) ORDER BY ((rt0.c1 COLLATE BINARY)-(vt1.c0 COLLATE BINARY)) LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (((((0X5a7d53d5)AND(rt0.c2 COLLATE BINARY)))AND(CAST(rt0.c2 AS NUMERIC))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((0X5a7d53d5)AND(rt0.c2 COLLATE BINARY)))AND(CAST(rt0.c2 AS NUMERIC))))AND(rt0.c0 COLLATE BINARY))) ORDER BY (((0.8744247382102617)) BETWEEN ((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2)))) AND ((vt1.c0 COLLATE BINARY))) DESC;
SELECT * FROM vt1, rt0 WHERE (((((0X5a7d53d5)AND(rt0.c2 COLLATE BINARY)))AND(CAST(rt0.c2 AS NUMERIC))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((0X5a7d53d5)AND(rt0.c2 COLLATE BINARY)))AND(CAST(rt0.c2 AS NUMERIC))))AND(rt0.c0 COLLATE BINARY))) ORDER BY (((0.8744247382102617)) BETWEEN ((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2)))) AND ((vt1.c0 COLLATE BINARY))) DESC;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) ISNULL)) ORDER BY 0.9203118460252162;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0 COLLATE NOCASE) ISNULL))AND(CASE ((vt1.c0)AND(vt1.c0))  WHEN ((vt1.c0)>(vt1.c0)) THEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN ((vt1.c0)*(vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (- (vt1.c0)) END))) ORDER BY CASE vt1.c0 COLLATE RTRIM  WHEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN '' WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN vt1.c0 WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0.3170317179736243 END THEN ((((x'3abd')AND(vt1.c0)))OR(vt1.c0)) WHEN (((vt1.c0, vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, vt1.c0))) THEN NULLIF(DISTINCT vt1.c0, vt1.c0) END ASC, ((((((vt1.c0)!=(vt1.c0)))AND(CAST(vt1.c0 AS INTEGER))))OR(CAST(vt1.c0 AS TEXT))) LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c2 COLLATE RTRIM))>((((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3)))))) ORDER BY ((((((((NULL) NOT BETWEEN (rt0.c1) AND (rt0.c3)))OR(HEX(DISTINCT vt1.c0))))AND(((((((((((rt0.c1)AND(rt0.c2)))AND('')))OR(rt0.c3)))AND(rt0.c2)))OR(rt0.c2)))))AND(((rt0.c3)>(rt0.c2))))  NULLS LAST, (((- (rt0.c2)))>(TYPEOF(DISTINCT rt0.c2))) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c2 COLLATE RTRIM))>((((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3))))))AND(UNLIKELY(((rt0.c0)<<(rt0.c1)))))) ORDER BY '䦯封V6V'  NULLS FIRST, (- (rt0.c1)) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c2 COLLATE RTRIM))>((((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3)))))) ORDER BY ((((((((NULL) NOT BETWEEN (rt0.c1) AND (rt0.c3)))OR(HEX(DISTINCT vt1.c0))))AND(((((((((((rt0.c1)AND(rt0.c2)))AND('')))OR(rt0.c3)))AND(rt0.c2)))OR(rt0.c2)))))AND(((rt0.c3)>(rt0.c2))))  NULLS LAST, (((- (rt0.c2)))>(TYPEOF(DISTINCT rt0.c2))) DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c2 COLLATE RTRIM))>((((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3))))))AND(UNLIKELY(((rt0.c0)<<(rt0.c1)))))) ORDER BY '䦯封V6V'  NULLS FIRST, (- (rt0.c1)) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ((((((vt1.c0)) BETWEEN ((rt0.c2)) AND (('507772405'))))OR(((rt0.c3)|(vt1.c0)))));
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ((((((((vt1.c0)) BETWEEN ((rt0.c2)) AND (('507772405'))))OR(((rt0.c3)|(vt1.c0)))))AND(rt0.c3))) ORDER BY ((rt0.c1 IN (rt0.c1, vt1.c0)) IN (CAST(rt0.c1 AS BLOB))) ASC  NULLS FIRST, rt0.c1 ASC  NULLS FIRST;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ((((((vt1.c0)) BETWEEN ((rt0.c2)) AND (('507772405'))))OR(((rt0.c3)|(vt1.c0)))));
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ((((((((vt1.c0)) BETWEEN ((rt0.c2)) AND (('507772405'))))OR(((rt0.c3)|(vt1.c0)))))AND(rt0.c3))) ORDER BY ((rt0.c1 IN (rt0.c1, vt1.c0)) IN (CAST(rt0.c1 AS BLOB))) ASC  NULLS FIRST, rt0.c1 ASC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((CAST(rt0.c1 AS REAL) IN (CAST(rt0.c1 AS REAL), x'' COLLATE RTRIM))) ORDER BY ((((((rt0.c1)AND('Hℛ턪E律+.wO')))OR(rt0.c3)))GLOB(CAST(rt0.c1 AS REAL)))  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((CAST(rt0.c1 AS REAL) IN (CAST(rt0.c1 AS REAL), x'' COLLATE RTRIM))) ORDER BY CASE ((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))  WHEN (- (rt0.c1)) THEN rt0.c3 COLLATE RTRIM WHEN TRIM(DISTINCT rt0.c2, rt0.c1) THEN ((rt0.c0) ISNULL) WHEN (vt1.c0 IN (rt0.c3, rt0.c1, rt0.c0)) THEN CAST(rt0.c3 AS REAL) WHEN ((rt0.c3)>=(rt0.c2)) THEN CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END ELSE (((0x54cfbc05)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))) END ASC, ((((((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c0)))AND(((rt0.c0)>>(rt0.c2)))))AND('886179703')))AND((NOT (rt0.c1)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 NOT INDEXED WHERE ((+ (CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 END))) ORDER BY CASE ((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))  WHEN (- (rt0.c1)) THEN rt0.c3 COLLATE RTRIM WHEN TRIM(DISTINCT rt0.c2, rt0.c1) THEN ((rt0.c0) ISNULL) WHEN (vt1.c0 IN (rt0.c3, rt0.c1, rt0.c0)) THEN CAST(rt0.c3 AS REAL) WHEN ((rt0.c3)>=(rt0.c2)) THEN CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END ELSE (((1422900229)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))) END ASC, ((((((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c0)))AND(((rt0.c0)>>(rt0.c2)))))AND('886179703')))AND((NOT (rt0.c1))));
SELECT ALL * FROM rt0, vt1 WHERE ((CAST(rt0.c1 AS REAL) IN (CAST(rt0.c1 AS REAL), x'' COLLATE RTRIM))) ORDER BY ((((((rt0.c1)AND('Hℛ턪E律+.wO')))OR(rt0.c3)))GLOB(CAST(rt0.c1 AS REAL)))  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((CAST(rt0.c1 AS REAL) IN (CAST(rt0.c1 AS REAL), x'' COLLATE RTRIM))) ORDER BY CASE ((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))  WHEN (- (rt0.c1)) THEN rt0.c3 COLLATE RTRIM WHEN TRIM(DISTINCT rt0.c2, rt0.c1) THEN ((rt0.c0) ISNULL) WHEN (vt1.c0 IN (rt0.c3, rt0.c1, rt0.c0)) THEN CAST(rt0.c3 AS REAL) WHEN ((rt0.c3)>=(rt0.c2)) THEN CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END ELSE (((0x54cfbc05)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))) END ASC, ((((((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c0)))AND(((rt0.c0)>>(rt0.c2)))))AND('886179703')))AND((NOT (rt0.c1)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 NOT INDEXED WHERE ((+ (CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 END))) ORDER BY CASE ((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))  WHEN (- (rt0.c1)) THEN rt0.c3 COLLATE RTRIM WHEN TRIM(DISTINCT rt0.c2, rt0.c1) THEN ((rt0.c0) ISNULL) WHEN (vt1.c0 IN (rt0.c3, rt0.c1, rt0.c0)) THEN CAST(rt0.c3 AS REAL) WHEN ((rt0.c3)>=(rt0.c2)) THEN CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END ELSE (((1422900229)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))) END ASC, ((((((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c0)))AND(((rt0.c0)>>(rt0.c2)))))AND('886179703')))AND((NOT (rt0.c1))));
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((vt1.c0 COLLATE BINARY)=(((rt0.c2) IS TRUE)))) ORDER BY ((TIME(rt0.c2, rt0.c2, rt0.c2, rt0.c3, rt0.c3, rt0.c2, rt0.c3)) BETWEEN (((('qT^[3')) BETWEEN ((rt0.c1)) AND ((rt0.c0)))) AND ((((rt0.c1, rt0.c0, rt0.c3)) BETWEEN ((vt1.c0, rt0.c1, vt1.c0)) AND ((rt0.c1, rt0.c2, rt0.c0)))))  NULLS LAST;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((vt1.c0 COLLATE BINARY)=(((rt0.c2) IS TRUE)))) ORDER BY ((TIME(rt0.c2, rt0.c2, rt0.c2, rt0.c3, rt0.c3, rt0.c2, rt0.c3)) BETWEEN (((('qT^[3')) BETWEEN ((rt0.c1)) AND ((rt0.c0)))) AND ((((rt0.c1, rt0.c0, rt0.c3)) BETWEEN ((vt1.c0, rt0.c1, vt1.c0)) AND ((rt0.c1, rt0.c2, rt0.c0)))))  NULLS LAST LIMIT 0;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((vt1.c0 COLLATE BINARY)=(((rt0.c2) IS TRUE)))) ORDER BY ((TIME(rt0.c2, rt0.c2, rt0.c2, rt0.c3, rt0.c3, rt0.c2, rt0.c3)) BETWEEN (((('qT^[3')) BETWEEN ((rt0.c1)) AND ((rt0.c0)))) AND ((((rt0.c1, rt0.c0, rt0.c3)) BETWEEN ((vt1.c0, rt0.c1, vt1.c0)) AND ((rt0.c1, rt0.c2, rt0.c0)))))  NULLS LAST;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((vt1.c0 COLLATE BINARY)=(((rt0.c2) IS TRUE)))) ORDER BY ((TIME(rt0.c2, rt0.c2, rt0.c2, rt0.c3, rt0.c3, rt0.c2, rt0.c3)) BETWEEN (((('qT^[3')) BETWEEN ((rt0.c1)) AND ((rt0.c0)))) AND ((((rt0.c1, rt0.c0, rt0.c3)) BETWEEN ((vt1.c0, rt0.c1, vt1.c0)) AND ((rt0.c1, rt0.c2, rt0.c0)))))  NULLS LAST LIMIT 0;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((('765064518' COLLATE BINARY)OR(CAST(x'' AS NUMERIC))))OR(((rt0.c0) NOTNULL))));
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE ((((('765064518' COLLATE BINARY)OR(CAST(x'' AS NUMERIC))))OR(((rt0.c0) NOTNULL)))) LIMIT 3;
SELECT COUNT(*) FROM rt0, vt1 WHERE (((CAST(rt0.c2 AS INTEGER)) NOTNULL));
SELECT COUNT(*) FROM rt0, vt1 WHERE (((((CAST(rt0.c2 AS INTEGER)) NOTNULL))AND(CASE WHEN rt0.c3 COLLATE BINARY THEN LOWER(DISTINCT rt0.c2) WHEN CAST(rt0.c0 AS BLOB) THEN (rt0.c2 IN ()) WHEN (+ ('-781367930')) THEN rt0.c2 ELSE ((vt1.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)) END))) INTERSECT SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((((((((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0)))OR((~ (vt1.c0)))))AND(((vt1.c0)<<(rt0.c3)))))AND('778468311')));
SELECT ALL COUNT(*) FROM rt0 WHERE (CASE WHEN ((rt0.c2) ISNULL) THEN rt0.c0 WHEN ((rt0.c1) IS TRUE) THEN (rt0.c3 IN ()) WHEN ((rt0.c0) IS TRUE) THEN CAST(rt0.c3 AS TEXT) END) ORDER BY (((rt0.c1 COLLATE NOCASE, (NOT (rt0.c1))))>((TRIM(rt0.c3), rt0.c2))), ((((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c3)))%((NOT (rt0.c1)))) ASC;
SELECT ALL COUNT(*) FROM rt0 WHERE (CASE WHEN ((rt0.c2) ISNULL) THEN rt0.c0 WHEN ((rt0.c1) IS TRUE) THEN (rt0.c3 IN ()) WHEN ((rt0.c0) IS TRUE) THEN CAST(rt0.c3 AS TEXT) END) ORDER BY CASE WHEN ((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c3)))OR(rt0.c0)))AND(rt0.c1)) THEN CAST(rt0.c3 AS NUMERIC) WHEN ((rt0.c0) IS FALSE) THEN RTRIM(rt0.c2) WHEN CASE rt0.c0  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END THEN ((rt0.c0)|(rt0.c0)) ELSE TRIM(DISTINCT rt0.c2) END ASC, (~ ((~ (rt0.c3))))  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE (HEX(DISTINCT rt0.c3 COLLATE NOCASE)) ORDER BY CASE WHEN ((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c3)))OR(rt0.c0)))AND(rt0.c1)) THEN CAST(rt0.c3 AS NUMERIC) WHEN ((rt0.c0) IS FALSE) THEN RTRIM(rt0.c2) WHEN CASE rt0.c0  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END THEN ((rt0.c0)|(rt0.c0)) ELSE TRIM(DISTINCT rt0.c2) END ASC, (~ ((~ (rt0.c3))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c2)AND(((vt1.c0)-(rt0.c2)))))OR(QUOTE(vt1.c0)))) ORDER BY (('6䵑媏F')>(json_valid(rt0.c3))) ASC, 0.31062636204229965  NULLS FIRST;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c2)AND(((vt1.c0)-(rt0.c2)))))OR(QUOTE(vt1.c0)))) ORDER BY (('6䵑媏F')>(json_valid(rt0.c3))) ASC, 0.31062636204229965  NULLS FIRST;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c2)AND(((vt1.c0)-(rt0.c2)))))OR(QUOTE(vt1.c0)))) ORDER BY (('6䵑媏F')>(json_valid(rt0.c3))) ASC, 0.31062636204229965  NULLS FIRST;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c2)AND(((vt1.c0)-(rt0.c2)))))OR(QUOTE(vt1.c0)))) ORDER BY (('6䵑媏F')>(json_valid(rt0.c3))) ASC, 0.31062636204229965  NULLS FIRST;
SELECT MIN(rt0.c2) FROM rt0 NOT INDEXED WHERE (-554303776);
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (((0Xffffffffdef5fee0)AND((((rt0.c1, rt0.c2, rt0.c2)) NOT BETWEEN (((rt0.c3 IN (rt0.c1)), (- (rt0.c2)), ((rt0.c2) NOTNULL))) AND ((rt0.c3 COLLATE BINARY, '-1979434890', ((((rt0.c3)AND(rt0.c0)))AND(rt0.c1)))))))) LIMIT 0 INTERSECT SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (LIKELIHOOD(((rt0.c2) NOT NULL), (rt0.c3 IN ()))) LIMIT 0X0;
SELECT * FROM rt0 WHERE (CAST(((rt0.c1)=(rt0.c3)) AS BLOB)) ORDER BY ((CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c3 END)LIKE(((rt0.c1)GLOB(rt0.c1)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((CAST(((rt0.c1)==(rt0.c3)) AS BLOB))AND(CAST(CAST(rt0.c3 AS BLOB) AS TEXT)))) ORDER BY ((((rt0.c1)=(rt0.c3))) BETWEEN (((((rt0.c0)OR(rt0.c1)))OR(rt0.c2))) AND (0Xffffffff83d346c7)) ASC;
SELECT * FROM rt0 WHERE (CAST(((rt0.c1)=(rt0.c3)) AS BLOB)) ORDER BY ((CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c3 END)LIKE(((rt0.c1)GLOB(rt0.c1)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((CAST(((rt0.c1)==(rt0.c3)) AS BLOB))AND(CAST(CAST(rt0.c3 AS BLOB) AS TEXT)))) ORDER BY ((((rt0.c1)=(rt0.c3))) BETWEEN (((((rt0.c0)OR(rt0.c1)))OR(rt0.c2))) AND (0Xffffffff83d346c7)) ASC;
SELECT COUNT(*) FROM rt0 WHERE (CAST(rt0.c3 AS BLOB)) ORDER BY (((('')OR(CAST(rt0.c3 AS BLOB))))OR(((rt0.c0)+(rt0.c0)))) ASC  NULLS LAST, json_type(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3))) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CAST(rt0.c3 AS BLOB)) ORDER BY ((((rt0.c1) ISNULL))-(CAST(rt0.c1 AS NUMERIC))), ((((((((rt0.c1) NOT NULL))AND((((rt0.c0, rt0.c2))>=((rt0.c1, rt0.c3))))))AND((('eV|') NOT NULL))))AND((+ (rt0.c1)))) ASC  NULLS LAST LIMIT 0;
SELECT MAX(rt0.c3) FROM rt0 WHERE (((CASE rt0.c3  WHEN rt0.c1 THEN rt0.c2 END)GLOB(rt0.c2)));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (((CASE rt0.c3  WHEN rt0.c1 THEN rt0.c2 END)GLOB(rt0.c2))) ORDER BY ((0x304ca87)IS(rt0.c3 COLLATE BINARY)) LIMIT 0;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))==(((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))) ORDER BY CASE WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN x'afb2' WHEN (((vt1.c0, vt1.c0, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0))) THEN CAST(0.5054100163848556 AS REAL) WHEN (((vt1.c0, vt1.c0))!=((vt1.c0, -600609932))) THEN (('i') IS TRUE) ELSE ((vt1.c0)==(vt1.c0)) END DESC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))=(((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))) ORDER BY CASE WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN x'afb2' WHEN (((vt1.c0, vt1.c0, vt1.c0))==((vt1.c0, vt1.c0, vt1.c0))) THEN CAST(0.5054100163848556 AS REAL) WHEN (((vt1.c0, vt1.c0))<>((vt1.c0, -600609932))) THEN (('i') IS TRUE) ELSE ((vt1.c0)=(vt1.c0)) END DESC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM rt0, vt1 WHERE (CASE (+ (rt0.c3))  WHEN x'473a79' THEN rt0.c1 COLLATE NOCASE WHEN CASE WHEN vt1.c0 THEN '1893300537' ELSE vt1.c0 END THEN CAST(rt0.c1 AS INTEGER) ELSE CAST(x'' AS INTEGER) END) ORDER BY CASE (NOT (rt0.c1))  WHEN (NOT (vt1.c0)) THEN 0.6034339716925889 END DESC  NULLS FIRST, CAST(CAST(x'' AS INTEGER) AS TEXT)  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM rt0, vt1 WHERE (((CASE (+ (rt0.c3))  WHEN x'473a79' THEN rt0.c1 COLLATE NOCASE WHEN CASE WHEN vt1.c0 THEN '1893300537' ELSE vt1.c0 END THEN CAST(rt0.c1 AS INTEGER) ELSE CAST(x'' AS INTEGER) END)AND(((((vt1.c0)<=(rt0.c2))) IS TRUE)))) ORDER BY CASE (NOT (rt0.c1))  WHEN (NOT (vt1.c0)) THEN 0.6034339716925889 END DESC  NULLS FIRST, CAST(CAST(x'' AS INTEGER) AS TEXT)  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM rt0, vt1 WHERE ((((rt0.c1)>>(rt0.c2)) IN ())) ORDER BY CASE (NOT (rt0.c1))  WHEN (NOT (vt1.c0)) THEN 0.6034339716925889 END DESC  NULLS FIRST, CAST(CAST(x'' AS INTEGER) AS TEXT)  NULLS FIRST;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c1 AS NUMERIC) THEN ((((((rt0.c1)OR(rt0.c1)))AND(x'b8')))OR(rt0.c3)) ELSE (((vt1.c0, rt0.c2))<>((vt1.c0, rt0.c0))) END WHERE ((((rt0.c0)!=(rt0.c0)) IN (rt0.c3 COLLATE NOCASE)));
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c1 AS NUMERIC) THEN ((((((rt0.c1)OR(rt0.c1)))AND(x'b8')))OR(rt0.c3)) ELSE (((vt1.c0, rt0.c2))!=((vt1.c0, rt0.c0))) END WHERE ((((rt0.c0)!=(rt0.c0)) IN (rt0.c3 COLLATE NOCASE))) ORDER BY ((CASE rt0.c0  WHEN rt0.c3 THEN NULL WHEN NULL THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 END) NOT BETWEEN (CAST(rt0.c1 AS REAL)) AND (UPPER(DISTINCT rt0.c1))), x''  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c1 AS NUMERIC) THEN ((((((rt0.c1)OR(rt0.c1)))AND(x'b8')))OR(rt0.c3)) ELSE (((vt1.c0, rt0.c2))!=((vt1.c0, rt0.c0))) END WHERE (CASE WHEN ((rt0.c0)<=(rt0.c2)) THEN NULL END) ORDER BY ((CASE rt0.c0  WHEN rt0.c3 THEN NULL WHEN NULL THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 END) NOT BETWEEN (CAST(rt0.c1 AS REAL)) AND (UPPER(DISTINCT rt0.c1))), x''  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c1 AS NUMERIC) THEN ((((((rt0.c1)OR(rt0.c1)))AND(x'b8')))OR(rt0.c3)) ELSE (((vt1.c0, rt0.c2))<>((vt1.c0, rt0.c0))) END WHERE ((((rt0.c0)!=(rt0.c0)) IN (rt0.c3 COLLATE NOCASE)));
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c1 AS NUMERIC) THEN ((((((rt0.c1)OR(rt0.c1)))AND(x'b8')))OR(rt0.c3)) ELSE (((vt1.c0, rt0.c2))!=((vt1.c0, rt0.c0))) END WHERE ((((rt0.c0)!=(rt0.c0)) IN (rt0.c3 COLLATE NOCASE))) ORDER BY ((CASE rt0.c0  WHEN rt0.c3 THEN NULL WHEN NULL THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 END) NOT BETWEEN (CAST(rt0.c1 AS REAL)) AND (UPPER(DISTINCT rt0.c1))), x''  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c1 AS NUMERIC) THEN ((((((rt0.c1)OR(rt0.c1)))AND(x'b8')))OR(rt0.c3)) ELSE (((vt1.c0, rt0.c2))!=((vt1.c0, rt0.c0))) END WHERE (CASE WHEN ((rt0.c0)<=(rt0.c2)) THEN NULL END) ORDER BY ((CASE rt0.c0  WHEN rt0.c3 THEN NULL WHEN NULL THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 END) NOT BETWEEN (CAST(rt0.c1 AS REAL)) AND (UPPER(DISTINCT rt0.c1))), x''  NULLS LAST LIMIT 0X1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE BINARY)) AND ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))))));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE BINARY)) AND ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))))) ORDER BY '168766846'  NULLS LAST, (~ (CAST(vt1.c0 AS BLOB))) DESC  NULLS LAST;
SELECT * FROM rt0 WHERE ('kJV>') ORDER BY ((((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c3, rt0.c3))), CASE rt0.c1  WHEN x'' THEN rt0.c2 ELSE rt0.c1 END, rt0.c1 COLLATE NOCASE, rt0.c2))<=((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3)), (((rt0.c2, rt0.c1))>=((rt0.c1, rt0.c2))), ((((rt0.c3)OR(rt0.c0)))OR(rt0.c1)), rt0.c1 COLLATE RTRIM)))  NULLS LAST, NULL DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE ((('kJV>')AND(((((rt0.c2)<=(rt0.c0)))*(((rt0.c1) ISNULL)))))) ORDER BY ((((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c3, rt0.c3))), CASE rt0.c1  WHEN x'' THEN rt0.c2 ELSE rt0.c1 END, rt0.c1 COLLATE NOCASE, rt0.c2))<=((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3)), (((rt0.c2, rt0.c1))>=((rt0.c1, rt0.c2))), ((((rt0.c3)OR(rt0.c0)))OR(rt0.c1)), rt0.c1 COLLATE RTRIM)))  NULLS LAST, NULL DESC  NULLS FIRST LIMIT 0X2;
SELECT * FROM rt0 WHERE ('kJV>') ORDER BY ((((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c3, rt0.c3))), CASE rt0.c1  WHEN x'' THEN rt0.c2 ELSE rt0.c1 END, rt0.c1 COLLATE NOCASE, rt0.c2))<=((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3)), (((rt0.c2, rt0.c1))>=((rt0.c1, rt0.c2))), ((((rt0.c3)OR(rt0.c0)))OR(rt0.c1)), rt0.c1 COLLATE RTRIM)))  NULLS LAST, NULL DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE ((('kJV>')AND(((((rt0.c2)<=(rt0.c0)))*(((rt0.c1) ISNULL)))))) ORDER BY ((((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c3, rt0.c3))), CASE rt0.c1  WHEN x'' THEN rt0.c2 ELSE rt0.c1 END, rt0.c1 COLLATE NOCASE, rt0.c2))<=((((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3)), (((rt0.c2, rt0.c1))>=((rt0.c1, rt0.c2))), ((((rt0.c3)OR(rt0.c0)))OR(rt0.c1)), rt0.c1 COLLATE RTRIM)))  NULLS LAST, NULL DESC  NULLS FIRST LIMIT 0X2;
SELECT * FROM vt1 WHERE (((((vt1.c0) IS TRUE))=(json_array(vt1.c0, vt1.c0, vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0) IS TRUE))==(json_array(vt1.c0, vt1.c0, vt1.c0))))AND(SQLITE_COMPILEOPTION_GET(CAST(vt1.c0 AS BLOB)))));
SELECT * FROM vt1 WHERE (((((vt1.c0) IS TRUE))=(json_array(vt1.c0, vt1.c0, vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0) IS TRUE))==(json_array(vt1.c0, vt1.c0, vt1.c0))))AND(SQLITE_COMPILEOPTION_GET(CAST(vt1.c0 AS BLOB)))));
SELECT COUNT(*) FROM rt0 WHERE (rt0.c3);
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (rt0.c3) LIMIT 0x0;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((CASE ''  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) ISNULL));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((CASE ''  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) ISNULL))AND((((vt1.c0 IN ())) ISNULL)))) ORDER BY ((((vt1.c0 COLLATE RTRIM)AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE x'' END)))AND(CAST(vt1.c0 AS NUMERIC))) ASC  NULLS FIRST, CASE WHEN 0x700a9c8c THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN HEX(DISTINCT vt1.c0) THEN ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) WHEN NULL THEN (~ (vt1.c0)) WHEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) THEN vt1.c0 COLLATE NOCASE END DESC;
SELECT * FROM vt1 WHERE (((((((((((vt1.c0) ISNULL))OR(TYPEOF(DISTINCT vt1.c0))))OR(vt1.c0 COLLATE NOCASE)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(0.7731821889986558))) ORDER BY ((((((((((vt1.c0) ISNULL))AND(((((vt1.c0)AND(vt1.c0)))OR(0.2795279676558975)))))AND(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))OR(-7.92507701E8)))AND(((vt1.c0)LIKE(vt1.c0))))  NULLS LAST, ((((vt1.c0)&('-1440571497'))) IS TRUE)  NULLS FIRST, ((CAST(vt1.c0 AS NUMERIC)) NOT BETWEEN ('' COLLATE NOCASE) AND ((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((((vt1.c0) ISNULL))OR(TYPEOF(DISTINCT vt1.c0))))OR(vt1.c0 COLLATE NOCASE)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(0.7731821889986558)))AND((((((((0xffffffff85cb9784 IN ()))OR(vt1.c0 COLLATE BINARY)))AND(vt1.c0 COLLATE RTRIM)))AND(((vt1.c0) BETWEEN (NULL) AND (vt1.c0))))))) ORDER BY ((((((((((vt1.c0) ISNULL))AND(((((vt1.c0)AND(vt1.c0)))OR(0.2795279676558975)))))AND(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))OR(-7.92507701E8)))AND(((vt1.c0)LIKE(vt1.c0))))  NULLS LAST, ((((vt1.c0)&('-1440571497'))) IS TRUE)  NULLS FIRST, ((CAST(vt1.c0 AS NUMERIC)) NOT BETWEEN ('' COLLATE NOCASE) AND ((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0)))));
SELECT * FROM vt1 WHERE (((((((((((vt1.c0) ISNULL))OR(TYPEOF(DISTINCT vt1.c0))))OR(vt1.c0 COLLATE NOCASE)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(0.7731821889986558))) ORDER BY ((((((((((vt1.c0) ISNULL))AND(((((vt1.c0)AND(vt1.c0)))OR(0.2795279676558975)))))AND(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))OR(-7.92507701E8)))AND(((vt1.c0)LIKE(vt1.c0))))  NULLS LAST, ((((vt1.c0)&('-1440571497'))) IS TRUE)  NULLS FIRST, ((CAST(vt1.c0 AS NUMERIC)) NOT BETWEEN ('' COLLATE NOCASE) AND ((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((((vt1.c0) ISNULL))OR(TYPEOF(DISTINCT vt1.c0))))OR(vt1.c0 COLLATE NOCASE)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(0.7731821889986558)))AND((((((((0xffffffff85cb9784 IN ()))OR(vt1.c0 COLLATE BINARY)))AND(vt1.c0 COLLATE RTRIM)))AND(((vt1.c0) BETWEEN (NULL) AND (vt1.c0))))))) ORDER BY ((((((((((vt1.c0) ISNULL))AND(((((vt1.c0)AND(vt1.c0)))OR(0.2795279676558975)))))AND(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))OR(-7.92507701E8)))AND(((vt1.c0)LIKE(vt1.c0))))  NULLS LAST, ((((vt1.c0)&('-1440571497'))) IS TRUE)  NULLS FIRST, ((CAST(vt1.c0 AS NUMERIC)) NOT BETWEEN ('' COLLATE NOCASE) AND ((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0)))));
SELECT ALL COUNT(*) FROM rt0 WHERE ((((((rt0.c2))<((rt0.c1)))) BETWEEN ((((rt0.c0, rt0.c2, rt0.c0))>((rt0.c1, rt0.c0, rt0.c2)))) AND (((rt0.c1)AND(rt0.c0))))) ORDER BY ((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN 0.7576582518070227 WHEN rt0.c0 THEN rt0.c2 ELSE x'' END)/(rt0.c1 COLLATE RTRIM)) DESC, CAST(rt0.c1 COLLATE BINARY AS NUMERIC)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((((((rt0.c2))<((rt0.c1)))) BETWEEN ((((rt0.c0, rt0.c2, rt0.c0))>((rt0.c1, rt0.c0, rt0.c2)))) AND (((rt0.c1)AND(rt0.c0)))))AND(x'13'))) ORDER BY ((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN 0.7576582518070227 WHEN rt0.c0 THEN rt0.c2 ELSE x'' END)/(rt0.c1 COLLATE RTRIM)) DESC, CAST(rt0.c1 COLLATE BINARY AS NUMERIC)  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((~ (rt0.c2)) COLLATE BINARY) ORDER BY ((((((rt0.c0)OR(rt0.c3)))OR(x'd10a')))||((((rt0.c0))<=((vt1.c0))))) DESC;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((~ (rt0.c2)) COLLATE BINARY) ORDER BY ((CAST(vt1.c0 AS BLOB))*(rt0.c0 COLLATE RTRIM)) ASC  NULLS FIRST, ((((((((((((((((((((0.5676723108884055)OR(rt0.c2)))OR(rt0.c3)))AND(rt0.c1)))AND((('\zN|')!=(rt0.c3)))))AND(0.4336979747754003)))AND(vt1.c0 COLLATE NOCASE)))OR(((rt0.c2) NOT NULL))))AND((rt0.c3 IN (rt0.c2)))))OR(((rt0.c1) ISNULL))))AND((((rt0.c1, rt0.c1, rt0.c3, rt0.c2)) NOT BETWEEN ((vt1.c0, rt0.c1, 739338646, x'4392')) AND ((rt0.c0, rt0.c1, rt0.c2, rt0.c1))))) ASC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((~ (rt0.c2)) COLLATE BINARY) ORDER BY ((((((rt0.c0)OR(rt0.c3)))OR(x'd10a')))||((((rt0.c0))<=((vt1.c0))))) DESC;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((~ (rt0.c2)) COLLATE BINARY) ORDER BY ((CAST(vt1.c0 AS BLOB))*(rt0.c0 COLLATE RTRIM)) ASC  NULLS FIRST, ((((((((((((((((((((0.5676723108884055)OR(rt0.c2)))OR(rt0.c3)))AND(rt0.c1)))AND((('\zN|')!=(rt0.c3)))))AND(0.4336979747754003)))AND(vt1.c0 COLLATE NOCASE)))OR(((rt0.c2) NOT NULL))))AND((rt0.c3 IN (rt0.c2)))))OR(((rt0.c1) ISNULL))))AND((((rt0.c1, rt0.c1, rt0.c3, rt0.c2)) NOT BETWEEN ((vt1.c0, rt0.c1, 739338646, x'4392')) AND ((rt0.c0, rt0.c1, rt0.c2, rt0.c1))))) ASC  NULLS FIRST;
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (CAST('' AS NUMERIC));
SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE (CAST('' AS NUMERIC)) ORDER BY ((((NULL) BETWEEN (rt0.c2) AND (rt0.c1)))>(vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST, x'' LIMIT 3;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END  WHEN (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) THEN ((vt1.c0)&(vt1.c0)) WHEN ((vt1.c0)>>(vt1.c0)) THEN (('B&ꪴe<8') NOT BETWEEN (vt1.c0) AND (vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN 1684350253 END THEN (- (vt1.c0)) END) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))+(rtreenode(vt1.c0, vt1.c0))) DESC  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END  WHEN (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) THEN ((vt1.c0)&(vt1.c0)) WHEN ((vt1.c0)>>(vt1.c0)) THEN (('B&ꪴe<8') NOT BETWEEN (vt1.c0) AND (vt1.c0)) WHEN CASE vt1.c0  WHEN vt1.c0 THEN 0x6465252d END THEN (- (vt1.c0)) END) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))+(rtreenode(vt1.c0, vt1.c0))) DESC  NULLS FIRST INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))+(rtreenode(vt1.c0, vt1.c0))) DESC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN (vt1.c0 IN ()) THEN vt1.c0 COLLATE BINARY WHEN ((vt1.c0)>=(vt1.c0)) THEN 0.5860421698221765 ELSE ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) END);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN (vt1.c0 IN ()) THEN vt1.c0 COLLATE BINARY WHEN ((vt1.c0)>=(vt1.c0)) THEN 0.5860421698221765 ELSE ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) END) LIMIT 2;
SELECT ALL MIN(vt1.c0) FROM rt0, vt1 WHERE ((((rt0.c0)) NOT BETWEEN ((CAST(rt0.c3 AS REAL))) AND ((((rt0.c3) NOTNULL)))));
SELECT ALL MIN(vt1.c0) FROM rt0, vt1 WHERE ((((rt0.c0)) NOT BETWEEN ((CAST(rt0.c3 AS REAL))) AND ((((rt0.c3) NOTNULL))))) ORDER BY CASE WHEN rt0.c3 THEN rt0.c2 WHEN (x'785b4431' IN (rt0.c2)) THEN (rt0.c2 IN (rt0.c1)) WHEN ((((rt0.c0)OR(rt0.c2)))AND(rt0.c3)) THEN ((vt1.c0)IS(rt0.c0)) ELSE (('')OR(rt0.c0)) END ASC  NULLS LAST, ((((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c0)))AND(rt0.c2)))>(((vt1.c0)&(rt0.c3)))) LIMIT 1 INTERSECT SELECT MIN(vt1.c0) FROM rt0, vt1 WHERE ((((rt0.c3 IN ()))&(rt0.c2))) ORDER BY CASE WHEN rt0.c3 THEN rt0.c2 WHEN (x'785b4431' IN (rt0.c2)) THEN (rt0.c2 IN (rt0.c1)) WHEN ((((rt0.c0)OR(rt0.c2)))AND(rt0.c3)) THEN ((vt1.c0)IS(rt0.c0)) ELSE (('')OR(rt0.c0)) END ASC  NULLS LAST, ((((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c0)))AND(rt0.c2)))>(((vt1.c0)&(rt0.c3)))) LIMIT 0X1;
SELECT * FROM vt1 WHERE ((((((((((vt1.c0 IN (vt1.c0)))AND(1.504116959E9)))OR(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((((((((vt1.c0 IN (vt1.c0)))AND(1.504116959E9)))OR(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))AND(((((((UNLIKELY(DISTINCT vt1.c0))AND((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))))OR(vt1.c0)))AND(((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((((0.5891619918157134 COLLATE NOCASE)OR(CAST(vt1.c0 AS INTEGER))))OR((~ (vt1.c0)))))OR((((vt1.c0))>((vt1.c0))))))AND(vt1.c0 COLLATE NOCASE)))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN '' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END))) LIMIT 1;
SELECT * FROM vt1 WHERE ((((((((((vt1.c0 IN (vt1.c0)))AND(1.504116959E9)))OR(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((((((((vt1.c0 IN (vt1.c0)))AND(1.504116959E9)))OR(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND(((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))AND(((((((UNLIKELY(DISTINCT vt1.c0))AND((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))))OR(vt1.c0)))AND(((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((((0.5891619918157134 COLLATE NOCASE)OR(CAST(vt1.c0 AS INTEGER))))OR((~ (vt1.c0)))))OR((((vt1.c0))>((vt1.c0))))))AND(vt1.c0 COLLATE NOCASE)))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN '' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END))) LIMIT 1;
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE (SQLITE_SOURCE_ID());
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE (SQLITE_SOURCE_ID()) INTERSECT SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE (CASE CAST(rt0.c0 AS BLOB)  WHEN ((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c1)) THEN ((rt0.c2) NOT NULL) END);
SELECT * FROM rt0 WHERE (0.13953326247721465);
SELECT DISTINCT * FROM rt0 WHERE (0.13953326247721465);
SELECT * FROM rt0 WHERE (0.13953326247721465);
SELECT DISTINCT * FROM rt0 WHERE (0.13953326247721465);
SELECT ALL MIN(vt1.c0) FROM rt0 LEFT OUTER JOIN vt1 ON ((rt0.c3) NOT BETWEEN (((rt0.c0) IS TRUE)) AND (((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c0)))) WHERE ((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), (((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c1))), rt0.c0, ((rt0.c2)%(rt0.c3)), rt0.c1 COLLATE BINARY))>=((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0)), MIN(0.9881789328153447, vt1.c0, rt0.c0), ((vt1.c0) IS FALSE), ((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c1)), 0x59edff73)))) ORDER BY '-1954563186', INSTR((((rt0.c0)) BETWEEN ((vt1.c0)) AND ((rt0.c3))), ((rt0.c3)GLOB(rt0.c3)))  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM rt0 INNER JOIN vt1 ON ((rt0.c3) NOT BETWEEN (((rt0.c0) IS TRUE)) AND (((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c0)))) WHERE ((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), (((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c1))), rt0.c0, ((rt0.c2)%(rt0.c3)), rt0.c1 COLLATE BINARY))>=((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0)), MIN(0.9881789328153447, vt1.c0, rt0.c0), ((vt1.c0) IS FALSE), ((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c1)), 0x59edff73)))) ORDER BY ((CASE WHEN rt0.c2 THEN rt0.c3 END) IS FALSE) ASC  NULLS LAST, (((rt0.c1, rt0.c2, vt1.c0)) BETWEEN ((CAST(rt0.c3 AS NUMERIC), ((rt0.c1) ISNULL), NULL)) AND (((rt0.c1 IN (rt0.c0)), (NOT (vt1.c0)), (((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1)))))) DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM rt0 INNER JOIN vt1 ON ((rt0.c3) NOT BETWEEN (((rt0.c0) IS TRUE)) AND (((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c0)))) WHERE (vt1.c0) ORDER BY ((CASE WHEN rt0.c2 THEN rt0.c3 END) IS FALSE) ASC  NULLS LAST, (((rt0.c1, rt0.c2, vt1.c0)) BETWEEN ((CAST(rt0.c3 AS NUMERIC), ((rt0.c1) ISNULL), NULL)) AND (((rt0.c1 IN (rt0.c0)), (NOT (vt1.c0)), (((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1)))))) DESC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1 WHERE (LIKELIHOOD(DISTINCT CAST(vt1.c0 AS BLOB), vt1.c0));
SELECT DISTINCT * FROM vt1 WHERE (LIKELIHOOD(DISTINCT CAST(vt1.c0 AS BLOB), vt1.c0));
SELECT * FROM vt1 WHERE (LIKELIHOOD(DISTINCT CAST(vt1.c0 AS BLOB), vt1.c0));
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END IN (vt1.c0, ((7.65064518E8)%(vt1.c0)))) ASC  NULLS FIRST, ((vt1.c0) NOT NULL)  NULLS LAST;
SELECT * FROM vt1 WHERE (((vt1.c0)AND((((vt1.c0)) BETWEEN (('0.8778789546857406')) AND ((((vt1.c0)&(NULL)))))))) ORDER BY LIKE('1831457160', CAST(vt1.c0 AS REAL), '#')  NULLS LAST, (NOT ((vt1.c0 IN ()))), UPPER(((vt1.c0)+(vt1.c0)));
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END IN (vt1.c0, ((7.65064518E8)%(vt1.c0)))) ASC  NULLS FIRST, ((vt1.c0) NOT NULL)  NULLS LAST;
SELECT * FROM vt1 WHERE (((vt1.c0)AND((((vt1.c0)) BETWEEN (('0.8778789546857406')) AND ((((vt1.c0)&(NULL)))))))) ORDER BY LIKE('1831457160', CAST(vt1.c0 AS REAL), '#')  NULLS LAST, (NOT ((vt1.c0 IN ()))), UPPER(((vt1.c0)+(vt1.c0)));
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON ((((rt0.c3)>(rt0.c3))) BETWEEN (PRINTF(rt0.c3, vt1.c0)) AND ((((vt1.c0, rt0.c1))<((rt0.c3, rt0.c2))))) WHERE (((((((((((((((rt0.c1)OR('751361517')))OR(x'')))OR(rt0.c0)))OR(vt1.c0)))AND(rt0.c3)))OR(rt0.c2))) NOT BETWEEN (((rt0.c3)&(rt0.c3))) AND ((- (rt0.c2))))) ORDER BY rt0.c3  NULLS FIRST, ((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c3 END) NOT BETWEEN ((~ (rt0.c1))) AND (((rt0.c2) NOT BETWEEN (rt0.c2) AND (-1733680795))));
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((rt0.c3)>(rt0.c3))) BETWEEN (PRINTF(rt0.c3, vt1.c0)) AND ((((vt1.c0, rt0.c1))<((rt0.c3, rt0.c2))))) WHERE (((((((((((((((rt0.c1)OR('751361517')))OR(x'')))OR(rt0.c0)))OR(vt1.c0)))AND(rt0.c3)))OR(rt0.c2))) NOT BETWEEN (((rt0.c3)&(rt0.c3))) AND ((- (rt0.c2))))) ORDER BY rt0.c3  NULLS FIRST, ((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c3 END) NOT BETWEEN ((~ (rt0.c1))) AND (((rt0.c2) NOT BETWEEN (rt0.c2) AND (-1733680795)))) INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((rt0.c3)>(rt0.c3))) BETWEEN (PRINTF(rt0.c3, vt1.c0)) AND ((((vt1.c0, rt0.c1))<((rt0.c3, rt0.c2))))) WHERE ((((- (rt0.c1)))/(x''))) ORDER BY rt0.c3  NULLS FIRST, ((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c3 END) NOT BETWEEN ((~ (rt0.c1))) AND (((rt0.c2) NOT BETWEEN (rt0.c2) AND (-1733680795))));
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON ((((rt0.c3)>(rt0.c3))) BETWEEN (PRINTF(rt0.c3, vt1.c0)) AND ((((vt1.c0, rt0.c1))<((rt0.c3, rt0.c2))))) WHERE (((((((((((((((rt0.c1)OR('751361517')))OR(x'')))OR(rt0.c0)))OR(vt1.c0)))AND(rt0.c3)))OR(rt0.c2))) NOT BETWEEN (((rt0.c3)&(rt0.c3))) AND ((- (rt0.c2))))) ORDER BY rt0.c3  NULLS FIRST, ((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c3 END) NOT BETWEEN ((~ (rt0.c1))) AND (((rt0.c2) NOT BETWEEN (rt0.c2) AND (-1733680795))));
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((rt0.c3)>(rt0.c3))) BETWEEN (PRINTF(rt0.c3, vt1.c0)) AND ((((vt1.c0, rt0.c1))<((rt0.c3, rt0.c2))))) WHERE (((((((((((((((rt0.c1)OR('751361517')))OR(x'')))OR(rt0.c0)))OR(vt1.c0)))AND(rt0.c3)))OR(rt0.c2))) NOT BETWEEN (((rt0.c3)&(rt0.c3))) AND ((- (rt0.c2))))) ORDER BY rt0.c3  NULLS FIRST, ((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c3 END) NOT BETWEEN ((~ (rt0.c1))) AND (((rt0.c2) NOT BETWEEN (rt0.c2) AND (-1733680795)))) INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((rt0.c3)>(rt0.c3))) BETWEEN (PRINTF(rt0.c3, vt1.c0)) AND ((((vt1.c0, rt0.c1))<((rt0.c3, rt0.c2))))) WHERE ((((- (rt0.c1)))/(x''))) ORDER BY rt0.c3  NULLS FIRST, ((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c3 END) NOT BETWEEN ((~ (rt0.c1))) AND (((rt0.c2) NOT BETWEEN (rt0.c2) AND (-1733680795))));
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON (NOT (TRIM(rt0.c1))) WHERE (((- (rt0.c3)) IN ())) ORDER BY ((((vt1.c0) ISNULL))<=((rt0.c1 IN (rt0.c0)))), ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 END) BETWEEN (((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c2)))AND(1228927186)))OR(rt0.c3))) AND (((rt0.c3) NOT BETWEEN ('464024925') AND (vt1.c0)))) DESC;
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON (NOT (TRIM(rt0.c1))) WHERE (((((- (rt0.c3)) IN ()))AND(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c3)) COLLATE BINARY))) ORDER BY (((((rt0.c3)>>(rt0.c2)), ((rt0.c3) NOTNULL), (((rt0.c3)) BETWEEN ((rt0.c1)) AND ((rt0.c0))), (rt0.c3 IN (rt0.c3)), ((rt0.c3) ISNULL)))>((0Xffffffff92ad2429, ((rt0.c2) BETWEEN (x'') AND (vt1.c0)), ((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c1)), rt0.c2, ((rt0.c0)/(839021629))))) DESC;
SELECT ALL COUNT(*) FROM rt0 WHERE ((((((rt0.c3, rt0.c1, rt0.c3, NULL)) BETWEEN ((rt0.c0, rt0.c0, rt0.c2, rt0.c3)) AND ((0.5678758026854864, rt0.c3, rt0.c3, rt0.c3))))<=(rt0.c1 COLLATE RTRIM))) ORDER BY (NOT (rt0.c0)) COLLATE BINARY, ((((rt0.c2) NOT NULL))-((((x'aeb6')) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1))))) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((((rt0.c3, rt0.c1, rt0.c3, NULL)) BETWEEN ((rt0.c0, rt0.c0, rt0.c2, rt0.c3)) AND ((0.5678758026854864, rt0.c3, rt0.c3, rt0.c3))))==(rt0.c1 COLLATE RTRIM))) ORDER BY PRINTF(((rt0.c2)>=(-1.088513454E9)), ((((((((rt0.c3)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))  NULLS LAST LIMIT 0x2;
SELECT MIN(vt1.c0) FROM rt0, vt1 WHERE ((((('-781367930') BETWEEN (NULL) AND (rt0.c3)))+(((rt0.c2)+(rt0.c2))))) ORDER BY rt0.c0 DESC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM rt0, vt1 WHERE ((((('-781367930') BETWEEN (NULL) AND (rt0.c3)))+(((rt0.c2)+(rt0.c2))))) ORDER BY CASE WHEN NULL THEN rt0.c1 COLLATE BINARY WHEN ((rt0.c1)AND(rt0.c2)) THEN ((rt0.c3)GLOB(rt0.c2)) WHEN rt0.c0 COLLATE NOCASE THEN ABS(rt0.c0) END, ((((((CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END)AND(-7.32813397E8)))AND(((rt0.c2) IS TRUE))))AND((0x72e4bc3c IN (rt0.c2, vt1.c0, x'9f'))))  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE (CAST(0.8310564510860788 COLLATE NOCASE AS NUMERIC));
SELECT ALL * FROM vt1 WHERE (CAST(0.8310564510860788 COLLATE NOCASE AS NUMERIC));
SELECT * FROM vt1 WHERE (CAST(0.8310564510860788 COLLATE NOCASE AS NUMERIC));
SELECT ALL * FROM vt1 WHERE (CAST(0.8310564510860788 COLLATE NOCASE AS NUMERIC));
SELECT ALL * FROM rt0, vt1 WHERE ((((((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0)), (NOT (rt0.c0)), ((vt1.c0)+(2.65752894E8))))=((rt0.c2, ((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3)), (((rt0.c3, rt0.c3, rt0.c2)) BETWEEN ((rt0.c3, rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c3, vt1.c0))))))) ORDER BY LIKELY((('JU')IS(vt1.c0)));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0)), (NOT (rt0.c0)), ((vt1.c0)+(2.65752894E8))))==((rt0.c2, ((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3)), (((rt0.c3, rt0.c3, rt0.c2)) BETWEEN ((rt0.c3, rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c3, vt1.c0)))))))AND(((((vt1.c0 COLLATE NOCASE)OR(CASE WHEN rt0.c1 THEN rt0.c2 END)))OR(DATE(rt0.c0, rt0.c1, rt0.c0, rt0.c3, rt0.c2)))))) ORDER BY LIKELY((('JU')IS(vt1.c0))) LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((0.9664850922309535)AND(rt0.c3)))AND(rt0.c0)))*(CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c3 END))) ORDER BY LIKELY((('JU')IS(vt1.c0))) LIMIT 4;
SELECT ALL * FROM rt0, vt1 WHERE ((((((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0)), (NOT (rt0.c0)), ((vt1.c0)+(2.65752894E8))))=((rt0.c2, ((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3)), (((rt0.c3, rt0.c3, rt0.c2)) BETWEEN ((rt0.c3, rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c3, vt1.c0))))))) ORDER BY LIKELY((('JU')IS(vt1.c0)));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0)), (NOT (rt0.c0)), ((vt1.c0)+(2.65752894E8))))==((rt0.c2, ((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c3)), (((rt0.c3, rt0.c3, rt0.c2)) BETWEEN ((rt0.c3, rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c3, vt1.c0)))))))AND(((((vt1.c0 COLLATE NOCASE)OR(CASE WHEN rt0.c1 THEN rt0.c2 END)))OR(DATE(rt0.c0, rt0.c1, rt0.c0, rt0.c3, rt0.c2)))))) ORDER BY LIKELY((('JU')IS(vt1.c0))) LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((0.9664850922309535)AND(rt0.c3)))AND(rt0.c0)))*(CASE rt0.c0  WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c3 END))) ORDER BY LIKELY((('JU')IS(vt1.c0))) LIMIT 4;
SELECT * FROM vt1 WHERE (x'ba62') ORDER BY ((x'')>>(UPPER(vt1.c0)));
SELECT * FROM vt1 WHERE (((x'ba62')AND(((((((vt1.c0) NOT BETWEEN (vt1.c0) AND ('Z')))AND(CAST(vt1.c0 AS NUMERIC))))AND(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))))))) ORDER BY (+ ((~ (vt1.c0)))) INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c0)||('+')))+(vt1.c0 COLLATE NOCASE))) ORDER BY (+ ((~ (vt1.c0))));
SELECT * FROM vt1 WHERE (x'ba62') ORDER BY ((x'')>>(UPPER(vt1.c0)));
SELECT * FROM vt1 WHERE (((x'ba62')AND(((((((vt1.c0) NOT BETWEEN (vt1.c0) AND ('Z')))AND(CAST(vt1.c0 AS NUMERIC))))AND(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))))))) ORDER BY (+ ((~ (vt1.c0)))) INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c0)||('+')))+(vt1.c0 COLLATE NOCASE))) ORDER BY (+ ((~ (vt1.c0))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)GLOB(vt1.c0)))AND('-931625125')))AND(vt1.c0 COLLATE NOCASE))) ORDER BY NULL DESC  NULLS FIRST, CASE vt1.c0 COLLATE RTRIM  WHEN (vt1.c0 IN (vt1.c0)) THEN 'y#Zk4)q
' ELSE ((vt1.c0)>>(vt1.c0)) END DESC;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)GLOB(vt1.c0)))AND('-931625125')))AND(vt1.c0 COLLATE NOCASE)))AND(vt1.c0))) ORDER BY NULL DESC  NULLS FIRST, CASE vt1.c0 COLLATE RTRIM  WHEN (vt1.c0 IN (vt1.c0)) THEN 'y#Zk4)q
' ELSE ((vt1.c0)>>(vt1.c0)) END DESC LIMIT 0x0;
SELECT MAX(rt0.c3) FROM rt0, vt1 WHERE (((((((((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c2)))AND(vt1.c0)))AND(rt0.c0)))AND('')))OR(rt0.c0)))OR(vt1.c0))) NOT BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c3 END) AND ((rt0.c2 IN (rt0.c0, rt0.c2))))) ORDER BY (~ (((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c1))));
SELECT DISTINCT MAX(rt0.c3) FROM rt0, vt1 WHERE (((((((((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c2)))AND(vt1.c0)))AND(rt0.c0)))AND('')))OR(rt0.c0)))OR(vt1.c0))) NOT BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c3 END) AND ((rt0.c2 IN (rt0.c0, rt0.c2))))) ORDER BY ((((rt0.c2)<(NULL)))LIKE(vt1.c0 COLLATE RTRIM)) ASC, ((json_extract(rt0.c2, rt0.c1)) IS FALSE) DESC LIMIT 3;
SELECT * FROM rt0, vt1 WHERE (rt0.c3);
SELECT * FROM rt0, vt1 WHERE (rt0.c3) ORDER BY (((rt0.c2 IN (rt0.c2))) BETWEEN (rt0.c2) AND ((rt0.c2 IN (vt1.c0, rt0.c2)))) DESC LIMIT 2;
SELECT * FROM rt0, vt1 WHERE (rt0.c3);
SELECT * FROM rt0, vt1 WHERE (rt0.c3) ORDER BY (((rt0.c2 IN (rt0.c2))) BETWEEN (rt0.c2) AND ((rt0.c2 IN (vt1.c0, rt0.c2)))) DESC LIMIT 2;
SELECT * FROM vt1 WHERE (((CASE NULL  WHEN x'054b11' THEN vt1.c0 ELSE vt1.c0 END)/(vt1.c0))) ORDER BY ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) COLLATE NOCASE ASC;
SELECT DISTINCT * FROM vt1 WHERE (((CASE NULL  WHEN x'054b11' THEN vt1.c0 ELSE vt1.c0 END)/(vt1.c0))) ORDER BY ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) COLLATE NOCASE ASC LIMIT 0X0;
SELECT * FROM vt1 WHERE (((CASE NULL  WHEN x'054b11' THEN vt1.c0 ELSE vt1.c0 END)/(vt1.c0))) ORDER BY ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) COLLATE NOCASE ASC;
SELECT DISTINCT * FROM vt1 WHERE (((CASE NULL  WHEN x'054b11' THEN vt1.c0 ELSE vt1.c0 END)/(vt1.c0))) ORDER BY ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) COLLATE NOCASE ASC LIMIT 0X0;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (UNLIKELY(DISTINCT (((rt0.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c1))))) ORDER BY ((- (rt0.c2)) IN ()) DESC, ((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c3 END) IS TRUE) ASC, ((CAST(NULL AS TEXT)) NOTNULL), ((((((NULL)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3))), x''))<>((rt0.c0 COLLATE NOCASE, CASE rt0.c1  WHEN rt0.c0 THEN x'' WHEN NULL THEN rt0.c0 ELSE rt0.c0 END))), ((('725996618' IN ()))||(((0.21473199742024995)LIKE(rt0.c1)))) ASC  NULLS FIRST;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (((UNLIKELY(DISTINCT (((rt0.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c1)))))AND(((((rt0.c2)IS(rt0.c3))) NOT BETWEEN (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) AND (load_extension(rt0.c3, rt0.c1)))))) ORDER BY (((((((rt0.c2)OR(-578917606)))OR(rt0.c1)))AND(rt0.c0)) IN (CASE '-1253896892'  WHEN '1466001721' THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END)) DESC  NULLS FIRST, ((((rt0.c3)+(rt0.c3))) NOT BETWEEN (((rt0.c0) BETWEEN ('') AND (rt0.c3))) AND ((rt0.c2 IN (rt0.c2)))) DESC, ((CAST(rt0.c0 AS REAL)) BETWEEN (CASE 1000643639  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 END) AND (CASE '3k'  WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c0 END)), NULL COLLATE BINARY ASC LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (UPPER(vt1.c0) COLLATE BINARY);
SELECT MAX(vt1.c0) FROM vt1 WHERE (((UPPER(vt1.c0) COLLATE BINARY)AND(((JULIANDAY(vt1.c0, 'zY', vt1.c0))<(((vt1.c0)<(vt1.c0))))))) ORDER BY NULL ASC LIMIT 0x0 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((((- (vt1.c0)))&(TRIM(vt1.c0)))) ORDER BY NULL ASC LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (CASE ((((rt0.c1)AND(rt0.c2)))AND(rt0.c2))  WHEN CAST(rt0.c3 AS INTEGER) THEN CAST(rt0.c3 AS TEXT) WHEN (+ (rt0.c0)) THEN ((rt0.c2)>(rt0.c2)) END) ORDER BY QUOTE(rt0.c3) COLLATE BINARY, COALESCE(DISTINCT ((rt0.c3)GLOB(rt0.c1)), ((rt0.c3)OR(rt0.c3)), (((rt0.c1, rt0.c3)) BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c1, vt1.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ((((rt0.c1)AND(rt0.c2)))AND(rt0.c2))  WHEN CAST(rt0.c3 AS INTEGER) THEN CAST(rt0.c3 AS TEXT) WHEN (+ (rt0.c0)) THEN ((rt0.c2)>(rt0.c2)) END) ORDER BY QUOTE(rt0.c3) COLLATE BINARY, COALESCE(DISTINCT ((rt0.c3)GLOB(rt0.c1)), ((rt0.c3)OR(rt0.c3)), (((rt0.c1, rt0.c3)) BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c1, vt1.c0)))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c0)AND(rt0.c2)))AND(vt1.c0)))AND(rt0.c3)) COLLATE BINARY) ORDER BY QUOTE(rt0.c3) COLLATE BINARY, COALESCE(DISTINCT ((rt0.c3)GLOB(rt0.c1)), ((rt0.c3)OR(rt0.c3)), (((rt0.c1, rt0.c3)) BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c1, vt1.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (CASE ((((rt0.c1)AND(rt0.c2)))AND(rt0.c2))  WHEN CAST(rt0.c3 AS INTEGER) THEN CAST(rt0.c3 AS TEXT) WHEN (+ (rt0.c0)) THEN ((rt0.c2)>(rt0.c2)) END) ORDER BY QUOTE(rt0.c3) COLLATE BINARY, COALESCE(DISTINCT ((rt0.c3)GLOB(rt0.c1)), ((rt0.c3)OR(rt0.c3)), (((rt0.c1, rt0.c3)) BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c1, vt1.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ((((rt0.c1)AND(rt0.c2)))AND(rt0.c2))  WHEN CAST(rt0.c3 AS INTEGER) THEN CAST(rt0.c3 AS TEXT) WHEN (+ (rt0.c0)) THEN ((rt0.c2)>(rt0.c2)) END) ORDER BY QUOTE(rt0.c3) COLLATE BINARY, COALESCE(DISTINCT ((rt0.c3)GLOB(rt0.c1)), ((rt0.c3)OR(rt0.c3)), (((rt0.c1, rt0.c3)) BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c1, vt1.c0)))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c0)AND(rt0.c2)))AND(vt1.c0)))AND(rt0.c3)) COLLATE BINARY) ORDER BY QUOTE(rt0.c3) COLLATE BINARY, COALESCE(DISTINCT ((rt0.c3)GLOB(rt0.c1)), ((rt0.c3)OR(rt0.c3)), (((rt0.c1, rt0.c3)) BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c1, vt1.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER)) IS TRUE)) ORDER BY HEX(((vt1.c0)>(vt1.c0))) DESC  NULLS FIRST, UNLIKELY(DISTINCT (- (vt1.c0))), (((((((((((vt1.c0 IN ()))AND((+ (vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR((NOT (vt1.c0)))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))), (vt1.c0 IN (vt1.c0 COLLATE BINARY)) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER)) IS TRUE)) ORDER BY HEX(((vt1.c0)>(vt1.c0))) DESC  NULLS FIRST, UNLIKELY(DISTINCT (- (vt1.c0))), (((((((((((vt1.c0 IN ()))AND((+ (vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR((NOT (vt1.c0)))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))), (vt1.c0 IN (vt1.c0 COLLATE BINARY)) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (LIKELY(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY HEX(((vt1.c0)>(vt1.c0))) DESC  NULLS FIRST, UNLIKELY(DISTINCT (- (vt1.c0))), (((((((((((vt1.c0 IN ()))AND((+ (vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR((NOT (vt1.c0)))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))), (vt1.c0 IN (vt1.c0 COLLATE BINARY)) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER)) IS TRUE)) ORDER BY HEX(((vt1.c0)>(vt1.c0))) DESC  NULLS FIRST, UNLIKELY(DISTINCT (- (vt1.c0))), (((((((((((vt1.c0 IN ()))AND((+ (vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR((NOT (vt1.c0)))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))), (vt1.c0 IN (vt1.c0 COLLATE BINARY)) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER)) IS TRUE)) ORDER BY HEX(((vt1.c0)>(vt1.c0))) DESC  NULLS FIRST, UNLIKELY(DISTINCT (- (vt1.c0))), (((((((((((vt1.c0 IN ()))AND((+ (vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR((NOT (vt1.c0)))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))), (vt1.c0 IN (vt1.c0 COLLATE BINARY)) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (LIKELY(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY HEX(((vt1.c0)>(vt1.c0))) DESC  NULLS FIRST, UNLIKELY(DISTINCT (- (vt1.c0))), (((((((((((vt1.c0 IN ()))AND((+ (vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR((NOT (vt1.c0)))))OR(((vt1.c0)IS NOT(vt1.c0)))))OR(CAST(vt1.c0 AS REAL))), (vt1.c0 IN (vt1.c0 COLLATE BINARY)) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON ((LOWER(vt1.c0))||(rt0.c1)) WHERE (((LOWER(rt0.c3)) BETWEEN (CAST(rt0.c2 AS BLOB)) AND (rt0.c0))) ORDER BY -1.127236167E9 COLLATE RTRIM;
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON ((LOWER(vt1.c0))||(rt0.c1)) WHERE (((LOWER(rt0.c3)) BETWEEN (CAST(rt0.c2 AS BLOB)) AND (rt0.c0))) ORDER BY -1.127236167E9 COLLATE RTRIM INTERSECT SELECT COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON ((LOWER(vt1.c0))||(rt0.c1)) WHERE ((((vt1.c0 IN (vt1.c0, rt0.c2)))-(rt0.c1 COLLATE BINARY))) ORDER BY -1.127236167E9 COLLATE RTRIM;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ())) NOT NULL)) ORDER BY ((+ (vt1.c0)) IN (((vt1.c0)GLOB('107477666')))), ((vt1.c0)=(vt1.c0)) COLLATE BINARY  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((((vt1.c0 IN ())) NOT NULL))AND(CASE ((vt1.c0)/(x'b7'))  WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN vt1.c0 COLLATE NOCASE WHEN CAST(vt1.c0 AS TEXT) THEN CAST(vt1.c0 AS REAL) WHEN x'94ff7a' THEN CAST(x'44' AS BLOB) ELSE ((vt1.c0)&('774386652')) END))) ORDER BY CASE vt1.c0  WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE BINARY DESC, (((vt1.c0)) NOT BETWEEN ((((vt1.c0) ISNULL))) AND ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ())) NOT NULL)) ORDER BY ((+ (vt1.c0)) IN (((vt1.c0)GLOB('107477666')))), ((vt1.c0)=(vt1.c0)) COLLATE BINARY  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((((vt1.c0 IN ())) NOT NULL))AND(CASE ((vt1.c0)/(x'b7'))  WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN vt1.c0 COLLATE NOCASE WHEN CAST(vt1.c0 AS TEXT) THEN CAST(vt1.c0 AS REAL) WHEN x'94ff7a' THEN CAST(x'44' AS BLOB) ELSE ((vt1.c0)&('774386652')) END))) ORDER BY CASE vt1.c0  WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE BINARY DESC, (((vt1.c0)) NOT BETWEEN ((((vt1.c0) ISNULL))) AND ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST LIMIT 0X2;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS TEXT)) ORDER BY IFNULL(DISTINCT ((vt1.c0) NOT NULL), CASE WHEN vt1.c0 THEN x'6d' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) DESC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS TEXT)) ORDER BY IFNULL(DISTINCT ((vt1.c0) NOT NULL), CASE WHEN vt1.c0 THEN x'6d' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) DESC  NULLS FIRST INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((((LIKELIHOOD(DISTINCT vt1.c0, vt1.c0), ((vt1.c0)=('1415601549'))))<(('[', (+ (vt1.c0)))))) ORDER BY IFNULL(DISTINCT ((vt1.c0) NOT NULL), CASE WHEN vt1.c0 THEN x'6d' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (((-1154539730 IN (vt1.c0, rt0.c2, rt0.c0)) IN (rt0.c3 COLLATE BINARY)));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((-1154539730 IN (vt1.c0, rt0.c2, rt0.c0)) IN (rt0.c3 COLLATE BINARY)))AND(((((vt1.c0)==('~/C	N'))) ISNULL)))) ORDER BY (((- (vt1.c0)))OR(CASE WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (((-1154539730 IN (vt1.c0, rt0.c2, rt0.c0)) IN (rt0.c3 COLLATE BINARY)));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((-1154539730 IN (vt1.c0, rt0.c2, rt0.c0)) IN (rt0.c3 COLLATE BINARY)))AND(((((vt1.c0)==('~/C	N'))) ISNULL)))) ORDER BY (((- (vt1.c0)))OR(CASE WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END)) ASC  NULLS LAST;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (- (rt0.c1)) WHERE (((rt0.c2) NOT NULL) COLLATE NOCASE) ORDER BY (- ((((rt0.c3, rt0.c1, vt1.c0, rt0.c1, rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c2, NULL, rt0.c0, rt0.c3)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c2, rt0.c3, rt0.c3))))), CASE WHEN UPPER(vt1.c0) THEN ((rt0.c3)+(rt0.c3)) ELSE (rt0.c3 IN (rt0.c3)) END;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (- (rt0.c1)) WHERE (((((rt0.c2) NOT NULL) COLLATE NOCASE)AND(UNLIKELY('464024925')))) ORDER BY (- ((((rt0.c3, rt0.c1, vt1.c0, rt0.c1, rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c2, NULL, rt0.c0, rt0.c3)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c2, rt0.c3, rt0.c3))))), CASE WHEN UPPER(vt1.c0) THEN ((rt0.c3)+(rt0.c3)) ELSE (rt0.c3 IN (rt0.c3)) END LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (- (rt0.c1)) WHERE (((ABS(DISTINCT '-722615761')) BETWEEN (CAST(rt0.c2 AS REAL)) AND (((rt0.c1) IS TRUE)))) ORDER BY (- ((((rt0.c3, rt0.c1, vt1.c0, rt0.c1, rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c2, NULL, rt0.c0, rt0.c3)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c2, rt0.c3, rt0.c3))))), CASE WHEN UPPER(vt1.c0) THEN ((rt0.c3)+(rt0.c3)) ELSE (rt0.c3 IN (rt0.c3)) END LIMIT 0X0;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (- (rt0.c1)) WHERE (((rt0.c2) NOT NULL) COLLATE NOCASE) ORDER BY (- ((((rt0.c3, rt0.c1, vt1.c0, rt0.c1, rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c2, NULL, rt0.c0, rt0.c3)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c2, rt0.c3, rt0.c3))))), CASE WHEN UPPER(vt1.c0) THEN ((rt0.c3)+(rt0.c3)) ELSE (rt0.c3 IN (rt0.c3)) END;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (- (rt0.c1)) WHERE (((((rt0.c2) NOT NULL) COLLATE NOCASE)AND(UNLIKELY('464024925')))) ORDER BY (- ((((rt0.c3, rt0.c1, vt1.c0, rt0.c1, rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c2, NULL, rt0.c0, rt0.c3)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c2, rt0.c3, rt0.c3))))), CASE WHEN UPPER(vt1.c0) THEN ((rt0.c3)+(rt0.c3)) ELSE (rt0.c3 IN (rt0.c3)) END LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (- (rt0.c1)) WHERE (((ABS(DISTINCT '-722615761')) BETWEEN (CAST(rt0.c2 AS REAL)) AND (((rt0.c1) IS TRUE)))) ORDER BY (- ((((rt0.c3, rt0.c1, vt1.c0, rt0.c1, rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c2, NULL, rt0.c0, rt0.c3)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c2, rt0.c3, rt0.c3))))), CASE WHEN UPPER(vt1.c0) THEN ((rt0.c3)+(rt0.c3)) ELSE (rt0.c3 IN (rt0.c3)) END LIMIT 0X0;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (COALESCE(((rt0.c0) NOTNULL), (rt0.c0 IN (rt0.c1, rt0.c3)), ((rt0.c2)>>(rt0.c3)), vt1.c0 COLLATE NOCASE)) ORDER BY ((rt0.c0 COLLATE NOCASE)IS((rt0.c3 IN (vt1.c0)))) DESC;
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE (COALESCE(((rt0.c0) NOTNULL), (rt0.c0 IN (rt0.c1, rt0.c3)), ((rt0.c2)>>(rt0.c3)), vt1.c0 COLLATE NOCASE)) ORDER BY ((rt0.c0 COLLATE NOCASE)IS((rt0.c3 IN (vt1.c0)))) DESC;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2 IN ()))GLOB(NULL))) ORDER BY ((CAST(rt0.c3 AS INTEGER))%(NULLIF(rt0.c2, rt0.c1))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((rt0.c2 IN ()))GLOB(NULL))) ORDER BY CHAR(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c0))) ASC, CAST((rt0.c2 IN ()) AS NUMERIC)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c0 COLLATE BINARY)<<(((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c0))))) ORDER BY CHAR(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c0))) ASC, CAST((rt0.c2 IN ()) AS NUMERIC)  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2 IN ()))GLOB(NULL))) ORDER BY ((CAST(rt0.c3 AS INTEGER))%(NULLIF(rt0.c2, rt0.c1))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((rt0.c2 IN ()))GLOB(NULL))) ORDER BY CHAR(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c0))) ASC, CAST((rt0.c2 IN ()) AS NUMERIC)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c0 COLLATE BINARY)<<(((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c0))))) ORDER BY CHAR(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c0))) ASC, CAST((rt0.c2 IN ()) AS NUMERIC)  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN GLOB(rt0.c2, rt0.c0) THEN (~ (rt0.c2)) END) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END AS TEXT) ASC, ((((((rt0.c3) IS FALSE))AND(0.12180961811175661)))AND(0.6993191362884992)) ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE WHEN GLOB(rt0.c2, rt0.c0) THEN (~ (rt0.c2)) END)AND(0.9886104349686557))) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END AS TEXT) ASC, ((((((rt0.c3) IS FALSE))AND(0.12180961811175661)))AND(0.6993191362884992)) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (TRIM(982536061)) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END AS TEXT) ASC, ((((((rt0.c3) IS FALSE))AND(0.12180961811175661)))AND(0.6993191362884992)) ASC LIMIT 0;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN GLOB(rt0.c2, rt0.c0) THEN (~ (rt0.c2)) END) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END AS TEXT) ASC, ((((((rt0.c3) IS FALSE))AND(0.12180961811175661)))AND(0.6993191362884992)) ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE WHEN GLOB(rt0.c2, rt0.c0) THEN (~ (rt0.c2)) END)AND(0.9886104349686557))) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END AS TEXT) ASC, ((((((rt0.c3) IS FALSE))AND(0.12180961811175661)))AND(0.6993191362884992)) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (TRIM(982536061)) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END AS TEXT) ASC, ((((((rt0.c3) IS FALSE))AND(0.12180961811175661)))AND(0.6993191362884992)) ASC LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE ('''');
SELECT ALL * FROM rt0, vt1 WHERE ((('''')AND(rt0.c3))) ORDER BY ((((rt0.c0)GLOB(rt0.c1)))>(CASE WHEN rt0.c1 THEN rt0.c1 END))  NULLS FIRST, ((((rt0.c1) IS FALSE)) NOT BETWEEN (NULL) AND (((rt0.c1)<(rt0.c3)))) DESC, ((json(vt1.c0))<=(((rt0.c2) IS TRUE))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (RTRIM(LIKELY(DISTINCT 0.4312138103583989))) ORDER BY ((((rt0.c0)GLOB(rt0.c1)))>(CASE WHEN rt0.c1 THEN rt0.c1 END))  NULLS FIRST, ((((rt0.c1) IS FALSE)) NOT BETWEEN (NULL) AND (((rt0.c1)<(rt0.c3)))) DESC, ((json(vt1.c0))<=(((rt0.c2) IS TRUE))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE ('''');
SELECT ALL * FROM rt0, vt1 WHERE ((('''')AND(rt0.c3))) ORDER BY ((((rt0.c0)GLOB(rt0.c1)))>(CASE WHEN rt0.c1 THEN rt0.c1 END))  NULLS FIRST, ((((rt0.c1) IS FALSE)) NOT BETWEEN (NULL) AND (((rt0.c1)<(rt0.c3)))) DESC, ((json(vt1.c0))<=(((rt0.c2) IS TRUE))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (RTRIM(LIKELY(DISTINCT 0.4312138103583989))) ORDER BY ((((rt0.c0)GLOB(rt0.c1)))>(CASE WHEN rt0.c1 THEN rt0.c1 END))  NULLS FIRST, ((((rt0.c1) IS FALSE)) NOT BETWEEN (NULL) AND (((rt0.c1)<(rt0.c3)))) DESC, ((json(vt1.c0))<=(((rt0.c2) IS TRUE))) ASC  NULLS FIRST LIMIT 0;
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))<(highlight(vt1.c0, vt1.c0, vt1.c0, vt1.c0))) DESC  NULLS FIRST, CASE WHEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN (((vt1.c0))<>((vt1.c0))) THEN vt1.c0 COLLATE RTRIM WHEN ((vt1.c0) NOT BETWEEN (0.9164954865541352) AND (vt1.c0)) THEN CAST(vt1.c0 AS REAL) ELSE vt1.c0 COLLATE BINARY END DESC;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 NOT INDEXED WHERE (((vt1.c0)AND(CAST(((vt1.c0)!=(x'e7')) AS NUMERIC)))) ORDER BY ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))<(highlight(vt1.c0, vt1.c0, vt1.c0, vt1.c0))) DESC  NULLS FIRST, CASE WHEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN (((vt1.c0))!=((vt1.c0))) THEN vt1.c0 COLLATE RTRIM WHEN ((vt1.c0) NOT BETWEEN (0.9164954865541352) AND (vt1.c0)) THEN CAST(vt1.c0 AS REAL) ELSE vt1.c0 COLLATE BINARY END DESC LIMIT 3;
SELECT * FROM vt1 WHERE (NULL) ORDER BY (((((0.8302506324692878)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))+((((vt1.c0))>=((vt1.c0))))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((NULL)AND(((((vt1.c0)|(vt1.c0)))!=(vt1.c0))))) ORDER BY CAST(((((((vt1.c0)AND('')))AND(vt1.c0)))AND(vt1.c0)) AS TEXT)  NULLS LAST;
SELECT * FROM vt1 WHERE (NULL) ORDER BY (((((0.8302506324692878)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))+((((vt1.c0))>=((vt1.c0))))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((NULL)AND(((((vt1.c0)|(vt1.c0)))!=(vt1.c0))))) ORDER BY CAST(((((((vt1.c0)AND('')))AND(vt1.c0)))AND(vt1.c0)) AS TEXT)  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0 IN ())))>=((vt1.c0 COLLATE NOCASE)))) ORDER BY (- (load_extension(vt1.c0)))  NULLS LAST, '0.8778789546857406' DESC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0 IN ())))>((vt1.c0 COLLATE NOCASE))))AND(0.3206640652508097 COLLATE BINARY))) ORDER BY (+ ((+ (x'fe')))), (((vt1.c0, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))=(((- (vt1.c0)), json_remove(vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)))) LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN (('[{]')<>(vt1.c0)) THEN CAST(vt1.c0 AS INTEGER) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN (vt1.c0 IN ('', vt1.c0)) ELSE ((vt1.c0)LIKE(vt1.c0)) END) ORDER BY (((vt1.c0)) NOT BETWEEN (('-109583985')) AND ((CAST(vt1.c0 AS REAL))))  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN (('[{]')<>(vt1.c0)) THEN CAST(vt1.c0 AS INTEGER) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN (vt1.c0 IN ('', vt1.c0)) ELSE ((vt1.c0)LIKE(vt1.c0)) END) ORDER BY (((vt1.c0)) NOT BETWEEN (('-109583985')) AND ((CAST(vt1.c0 AS REAL))))  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((((((((0.2842654646109395 IN ()))AND(((rt0.c2) IS FALSE))))OR(((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))))AND(((rt0.c0)OR(rt0.c3)))));
SELECT * FROM rt0 WHERE ((((((((((0.2842654646109395 IN ()))AND(((rt0.c2) IS FALSE))))OR(((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))))AND(((rt0.c0)OR(rt0.c3)))))AND(((((rt0.c3)<<(rt0.c1)))|(((0.023938455872271613)IS NOT(rt0.c0))))))) ORDER BY (((rt0.c2)) NOT BETWEEN ((rt0.c0 COLLATE RTRIM)) AND (((rt0.c2 IN (rt0.c1))))) ASC  NULLS FIRST, '.| HqF'  NULLS FIRST, CASE WHEN ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)) THEN ((rt0.c0) NOTNULL) WHEN rt0.c2 COLLATE NOCASE THEN rt0.c0 ELSE 0.8058559983494421 END;
SELECT ALL * FROM rt0 WHERE ((((((((0.2842654646109395 IN ()))AND(((rt0.c2) IS FALSE))))OR(((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))))AND(((rt0.c0)OR(rt0.c3)))));
SELECT * FROM rt0 WHERE ((((((((((0.2842654646109395 IN ()))AND(((rt0.c2) IS FALSE))))OR(((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))))AND(((rt0.c0)OR(rt0.c3)))))AND(((((rt0.c3)<<(rt0.c1)))|(((0.023938455872271613)IS NOT(rt0.c0))))))) ORDER BY (((rt0.c2)) NOT BETWEEN ((rt0.c0 COLLATE RTRIM)) AND (((rt0.c2 IN (rt0.c1))))) ASC  NULLS FIRST, '.| HqF'  NULLS FIRST, CASE WHEN ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)) THEN ((rt0.c0) NOTNULL) WHEN rt0.c2 COLLATE NOCASE THEN rt0.c0 ELSE 0.8058559983494421 END;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END IN (((vt1.c0) BETWEEN (NULL) AND (vt1.c0)), (vt1.c0 IN (vt1.c0)))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END IN (((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))))AND(vt1.c0))) LIMIT 2 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (highlight(((vt1.c0)GLOB(vt1.c0)), (vt1.c0 IN (vt1.c0)), CAST('-47197588' AS REAL), ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) LIMIT 2;
SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE (((((vt1.c0)||(rt0.c0)))%(rt0.c2)));
SELECT DISTINCT MAX(rt0.c3) FROM rt0, vt1 WHERE (((((vt1.c0)||(rt0.c0)))%(rt0.c2))) LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0, vt1 WHERE (LIKELY(DISTINCT ((((rt0.c1)OR(NULL)))AND(rt0.c3)))) LIMIT 0x2;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CASE (+ (vt1.c0))  WHEN (vt1.c0 IN (vt1.c0)) THEN x'ea22' ELSE vt1.c0 COLLATE BINARY END);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE (+ (vt1.c0))  WHEN (vt1.c0 IN (vt1.c0)) THEN x'ea22' ELSE vt1.c0 COLLATE BINARY END) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND('1508769651')))AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (NULL COLLATE RTRIM COLLATE BINARY);
SELECT MAX(vt1.c0) FROM vt1 WHERE (NULL COLLATE RTRIM COLLATE BINARY) ORDER BY CAST(vt1.c0 AS BLOB) COLLATE RTRIM DESC;
SELECT ALL * FROM rt0 WHERE (((MIN(rt0.c1, rt0.c1))%(rt0.c3))) ORDER BY ((0.7868981583593165 COLLATE BINARY)<<((+ (rt0.c3))))  NULLS FIRST, ((+ (rt0.c0)) IN ((0.2197040287954224 IN (rt0.c2))));
SELECT * FROM rt0 WHERE (((MIN(rt0.c1, rt0.c1))%(rt0.c3))) ORDER BY (((COALESCE(DISTINCT rt0.c1, NULL, rt0.c1, rt0.c0)))>(((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3)))))) DESC  NULLS FIRST, 'J' ASC  NULLS LAST, (((((rt0.c3, rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c3, rt0.c2)) AND ((rt0.c1, rt0.c0, x'1d')))) BETWEEN (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1))) AND ((NOT ('%V}J4[ኑ')))) DESC  NULLS FIRST, ((CAST(rt0.c0 AS REAL)) ISNULL) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT * FROM rt0 WHERE ((((rt0.c3)) NOT BETWEEN ((rt0.c1 COLLATE NOCASE)) AND ((((((((((rt0.c2)AND(NULL)))AND(rt0.c0)))AND(rt0.c3)))AND(rt0.c0)))))) ORDER BY (((COALESCE(DISTINCT rt0.c1, NULL, rt0.c1, rt0.c0)))>(((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3)))))) DESC  NULLS FIRST, 'J' ASC  NULLS LAST, (((((rt0.c3, rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c3, rt0.c2)) AND ((rt0.c1, rt0.c0, x'1d')))) BETWEEN (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1))) AND ((NOT ('%V}J4[ኑ')))) DESC  NULLS FIRST, ((CAST(rt0.c0 AS REAL)) ISNULL) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM rt0 WHERE (((MIN(rt0.c1, rt0.c1))%(rt0.c3))) ORDER BY ((0.7868981583593165 COLLATE BINARY)<<((+ (rt0.c3))))  NULLS FIRST, ((+ (rt0.c0)) IN ((0.2197040287954224 IN (rt0.c2))));
SELECT * FROM rt0 WHERE (((MIN(rt0.c1, rt0.c1))%(rt0.c3))) ORDER BY (((COALESCE(DISTINCT rt0.c1, NULL, rt0.c1, rt0.c0)))>(((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3)))))) DESC  NULLS FIRST, 'J' ASC  NULLS LAST, (((((rt0.c3, rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c3, rt0.c2)) AND ((rt0.c1, rt0.c0, x'1d')))) BETWEEN (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1))) AND ((NOT ('%V}J4[ኑ')))) DESC  NULLS FIRST, ((CAST(rt0.c0 AS REAL)) ISNULL) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT * FROM rt0 WHERE ((((rt0.c3)) NOT BETWEEN ((rt0.c1 COLLATE NOCASE)) AND ((((((((((rt0.c2)AND(NULL)))AND(rt0.c0)))AND(rt0.c3)))AND(rt0.c0)))))) ORDER BY (((COALESCE(DISTINCT rt0.c1, NULL, rt0.c1, rt0.c0)))>(((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3)))))) DESC  NULLS FIRST, 'J' ASC  NULLS LAST, (((((rt0.c3, rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c3, rt0.c2)) AND ((rt0.c1, rt0.c0, x'1d')))) BETWEEN (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1))) AND ((NOT ('%V}J4[ኑ')))) DESC  NULLS FIRST, ((CAST(rt0.c0 AS REAL)) ISNULL) ASC  NULLS LAST LIMIT 2;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON CASE ((rt0.c1) IS FALSE)  WHEN 0.4444527624995436 THEN CAST(rt0.c2 AS REAL) END WHERE (LIKELY(DISTINCT UNLIKELY(rt0.c2)));
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CASE ((rt0.c1) IS FALSE)  WHEN 0.4444527624995436 THEN CAST(rt0.c2 AS REAL) END WHERE (((LIKELY(DISTINCT UNLIKELY(rt0.c2)))AND(rt0.c2))) ORDER BY (((vt1.c0, ((rt0.c3)IS NOT(rt0.c3)), SUBSTR(rt0.c2, rt0.c0), ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))))<((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((vt1.c0)IS(rt0.c3)), ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)), (((rt0.c3, rt0.c3)) BETWEEN ((rt0.c3, 0.29781015170891156)) AND ((rt0.c2, rt0.c3)))))), ((CASE rt0.c2  WHEN rt0.c1 THEN vt1.c0 WHEN '751361517' THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 ELSE vt1.c0 END)/((rt0.c1 IN ()))) DESC, CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 END COLLATE RTRIM DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CASE ((rt0.c1) IS FALSE)  WHEN 0.4444527624995436 THEN CAST(rt0.c2 AS REAL) END WHERE (((CASE vt1.c0  WHEN rt0.c3 THEN vt1.c0 END) ISNULL)) ORDER BY (((vt1.c0, ((rt0.c3)IS NOT(rt0.c3)), SUBSTR(rt0.c2, rt0.c0), ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))))<((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((vt1.c0)IS(rt0.c3)), ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)), (((rt0.c3, rt0.c3)) BETWEEN ((rt0.c3, 0.29781015170891156)) AND ((rt0.c2, rt0.c3)))))), ((CASE rt0.c2  WHEN rt0.c1 THEN vt1.c0 WHEN '751361517' THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 ELSE vt1.c0 END)/((rt0.c1 IN ()))) DESC, CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 END COLLATE RTRIM DESC  NULLS LAST;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON CASE ((rt0.c1) IS FALSE)  WHEN 0.4444527624995436 THEN CAST(rt0.c2 AS REAL) END WHERE (LIKELY(DISTINCT UNLIKELY(rt0.c2)));
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CASE ((rt0.c1) IS FALSE)  WHEN 0.4444527624995436 THEN CAST(rt0.c2 AS REAL) END WHERE (((LIKELY(DISTINCT UNLIKELY(rt0.c2)))AND(rt0.c2))) ORDER BY (((vt1.c0, ((rt0.c3)IS NOT(rt0.c3)), SUBSTR(rt0.c2, rt0.c0), ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))))<((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((vt1.c0)IS(rt0.c3)), ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)), (((rt0.c3, rt0.c3)) BETWEEN ((rt0.c3, 0.29781015170891156)) AND ((rt0.c2, rt0.c3)))))), ((CASE rt0.c2  WHEN rt0.c1 THEN vt1.c0 WHEN '751361517' THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 ELSE vt1.c0 END)/((rt0.c1 IN ()))) DESC, CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 END COLLATE RTRIM DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON CASE ((rt0.c1) IS FALSE)  WHEN 0.4444527624995436 THEN CAST(rt0.c2 AS REAL) END WHERE (((CASE vt1.c0  WHEN rt0.c3 THEN vt1.c0 END) ISNULL)) ORDER BY (((vt1.c0, ((rt0.c3)IS NOT(rt0.c3)), SUBSTR(rt0.c2, rt0.c0), ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c3))))<((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((vt1.c0)IS(rt0.c3)), ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)), (((rt0.c3, rt0.c3)) BETWEEN ((rt0.c3, 0.29781015170891156)) AND ((rt0.c2, rt0.c3)))))), ((CASE rt0.c2  WHEN rt0.c1 THEN vt1.c0 WHEN '751361517' THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 ELSE vt1.c0 END)/((rt0.c1 IN ()))) DESC, CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 END COLLATE RTRIM DESC  NULLS LAST;
SELECT COUNT(*) FROM rt0 WHERE (COALESCE(CASE rt0.c2  WHEN 'g' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c3 ELSE 0Xfffffffff9626d56 END, (rt0.c0 IN (rt0.c2))));
SELECT COUNT(*) FROM rt0 WHERE (COALESCE(CASE rt0.c2  WHEN 'g' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c3 ELSE 0xfffffffff9626d56 END, (rt0.c0 IN (rt0.c2)))) ORDER BY rt0.c2  NULLS FIRST, 1411476007 ASC  NULLS FIRST, CAST(x'e8' AS BLOB) DESC  NULLS LAST LIMIT 4 INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE (((x'')<(((((((((rt0.c1)AND(NULL)))OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c0))))) ORDER BY rt0.c2  NULLS FIRST, 0X54216a27 ASC  NULLS FIRST, CAST(x'e8' AS BLOB) DESC  NULLS LAST LIMIT 0x4;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c2)-(vt1.c0)) COLLATE RTRIM);
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (((((rt0.c2)-(vt1.c0)) COLLATE RTRIM)AND((('') ISNULL)))) INTERSECT SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (rt0.c3);
SELECT ALL MIN(vt1.c0) FROM vt1 INNER JOIN rt0 ON rt0.c3 WHERE ('u') ORDER BY (((((((NOT (rt0.c0)))AND(rt0.c3 COLLATE NOCASE)))AND(((((((((((rt0.c0)AND(vt1.c0)))OR(rt0.c1)))OR(rt0.c0)))OR(rt0.c0)))OR(vt1.c0)))))AND(rt0.c2)) ASC, (((((rt0.c1) IS TRUE), rt0.c3 COLLATE BINARY, rt0.c3))<(((rt0.c0 IN (rt0.c3)), ((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c2)), ((0.6362836282567464) IS FALSE))))  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 INNER JOIN rt0 ON rt0.c3 WHERE ((('u')AND(((rt0.c3)OR(CAST(vt1.c0 AS NUMERIC)))))) ORDER BY (((((((NOT (rt0.c0)))AND(rt0.c3 COLLATE NOCASE)))AND(((((((((((rt0.c0)AND(vt1.c0)))OR(rt0.c1)))OR(rt0.c0)))OR(rt0.c0)))OR(vt1.c0)))))AND(rt0.c2)) ASC, (((((rt0.c1) IS TRUE), rt0.c3 COLLATE BINARY, rt0.c3))<(((rt0.c0 IN (rt0.c3)), ((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c2)), ((0.6362836282567464) IS FALSE))))  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 INNER JOIN rt0 ON rt0.c3 WHERE ((((CAST(vt1.c0 AS TEXT)))==((((rt0.c1) IS TRUE))))) ORDER BY (((((((NOT (rt0.c0)))AND(rt0.c3 COLLATE NOCASE)))AND(((((((((((rt0.c0)AND(vt1.c0)))OR(rt0.c1)))OR(rt0.c0)))OR(rt0.c0)))OR(vt1.c0)))))AND(rt0.c2)) ASC, (((((rt0.c1) IS TRUE), rt0.c3 COLLATE BINARY, rt0.c3))<(((rt0.c0 IN (rt0.c3)), ((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c2)), ((0.6362836282567464) IS FALSE))))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 CROSS JOIN rt0 ON CASE WHEN ((((rt0.c3)AND(rt0.c1)))OR(rt0.c2)) THEN '417953630' ELSE (- (rt0.c0)) END WHERE ((((json_remove(vt1.c0, rt0.c2, rt0.c1)))<=((rt0.c1 COLLATE BINARY))));
SELECT DISTINCT COUNT(*) FROM vt1 CROSS JOIN rt0 ON CASE WHEN ((((rt0.c3)AND(rt0.c1)))OR(rt0.c2)) THEN '417953630' ELSE (- (rt0.c0)) END WHERE ((((json_remove(vt1.c0, rt0.c2, rt0.c1)))<((rt0.c1 COLLATE BINARY)))) ORDER BY (('-86516757')>((((rt0.c0, rt0.c0, vt1.c0, vt1.c0)) BETWEEN ((rt0.c3, rt0.c0, rt0.c3, rt0.c0)) AND ((rt0.c0, rt0.c3, vt1.c0, 0.042850215269021)))));
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((+ (rt0.c2)), ((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)), rt0.c0 COLLATE RTRIM))<(((((rt0.c3, rt0.c2, rt0.c0, rt0.c2, rt0.c0)) NOT BETWEEN ((vt1.c0, rt0.c1, vt1.c0, vt1.c0, vt1.c0)) AND ((rt0.c1, rt0.c2, rt0.c1, rt0.c0, rt0.c3))), (NOT (rt0.c1)), LAST_INSERT_ROWID())))) ORDER BY ((((NULL) NOTNULL))LIKE(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)))), ((((((rt0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))OR(UNLIKELY(vt1.c0))))OR(((rt0.c2)GLOB(0.21450797838200897)))) ASC;
SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((+ (rt0.c2)), ((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)), rt0.c0 COLLATE RTRIM))<(((((rt0.c3, rt0.c2, rt0.c0, rt0.c2, rt0.c0)) NOT BETWEEN ((vt1.c0, rt0.c1, vt1.c0, vt1.c0, vt1.c0)) AND ((rt0.c1, rt0.c2, rt0.c1, rt0.c0, rt0.c3))), (NOT (rt0.c1)), LAST_INSERT_ROWID())))) ORDER BY (rt0.c0 IN (rt0.c2)) COLLATE BINARY LIMIT 1 INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM vt1, rt0 WHERE (((((((((((rt0.c1)OR(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)))OR(x'd98f')))OR(((((((rt0.c0)AND(vt1.c0)))OR(rt0.c0)))AND(rt0.c0))))) ORDER BY (rt0.c0 IN (rt0.c2)) COLLATE BINARY LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN '0.022128182064032997' THEN (NOT ('1227597706')) WHEN ((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)) THEN rt0.c2 WHEN '.]ivl' THEN ((rt0.c3)+(rt0.c2)) END) ORDER BY rt0.c3  NULLS FIRST, ((((((vt1.c0)AND(rt0.c0)))AND(rt0.c3))) NOT BETWEEN (((rt0.c1) ISNULL)) AND (((((rt0.c0)AND(rt0.c0)))OR(vt1.c0)))) ASC  NULLS FIRST, ABS((((rt0.c2, rt0.c1)) BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c3, rt0.c1)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE WHEN '0.022128182064032997' THEN (NOT ('1227597706')) WHEN ((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)) THEN rt0.c2 WHEN '.]ivl' THEN ((rt0.c3)+(rt0.c2)) END) ORDER BY rt0.c3  NULLS FIRST, ((((((vt1.c0)AND(rt0.c0)))AND(rt0.c3))) NOT BETWEEN (((rt0.c1) ISNULL)) AND (((((rt0.c0)AND(rt0.c0)))OR(vt1.c0)))) ASC  NULLS FIRST, ABS((((rt0.c2, rt0.c1)) BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c3, rt0.c1)))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c3 COLLATE RTRIM) IS FALSE)) ORDER BY rt0.c3  NULLS FIRST, ((((((vt1.c0)AND(rt0.c0)))AND(rt0.c3))) NOT BETWEEN (((rt0.c1) ISNULL)) AND (((((rt0.c0)AND(rt0.c0)))OR(vt1.c0)))) ASC  NULLS FIRST, ABS((((rt0.c2, rt0.c1)) BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c3, rt0.c1)))) ASC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN '0.022128182064032997' THEN (NOT ('1227597706')) WHEN ((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)) THEN rt0.c2 WHEN '.]ivl' THEN ((rt0.c3)+(rt0.c2)) END) ORDER BY rt0.c3  NULLS FIRST, ((((((vt1.c0)AND(rt0.c0)))AND(rt0.c3))) NOT BETWEEN (((rt0.c1) ISNULL)) AND (((((rt0.c0)AND(rt0.c0)))OR(vt1.c0)))) ASC  NULLS FIRST, ABS((((rt0.c2, rt0.c1)) BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c3, rt0.c1)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE WHEN '0.022128182064032997' THEN (NOT ('1227597706')) WHEN ((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)) THEN rt0.c2 WHEN '.]ivl' THEN ((rt0.c3)+(rt0.c2)) END) ORDER BY rt0.c3  NULLS FIRST, ((((((vt1.c0)AND(rt0.c0)))AND(rt0.c3))) NOT BETWEEN (((rt0.c1) ISNULL)) AND (((((rt0.c0)AND(rt0.c0)))OR(vt1.c0)))) ASC  NULLS FIRST, ABS((((rt0.c2, rt0.c1)) BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c3, rt0.c1)))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c3 COLLATE RTRIM) IS FALSE)) ORDER BY rt0.c3  NULLS FIRST, ((((((vt1.c0)AND(rt0.c0)))AND(rt0.c3))) NOT BETWEEN (((rt0.c1) ISNULL)) AND (((((rt0.c0)AND(rt0.c0)))OR(vt1.c0)))) ASC  NULLS FIRST, ABS((((rt0.c2, rt0.c1)) BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c3, rt0.c1)))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((CAST(rt0.c0 AS TEXT))%(json_object(rt0.c2, vt1.c0)))) ORDER BY (((rt0.c0, -1747291922, rt0.c1, rt0.c0)) BETWEEN (((~ (rt0.c1)), (rt0.c2 IN ()), ((rt0.c0)/(vt1.c0)), ((rt0.c1) NOTNULL))) AND ((((((((rt0.c3)AND('886179703')))OR(rt0.c3)))AND(rt0.c2)), CAST(rt0.c3 AS TEXT), ((rt0.c1)&(x'b206')), (- (x'')))))  NULLS FIRST, vt1.c0 ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((CAST(rt0.c0 AS TEXT))%(json_object(rt0.c2, vt1.c0)))) ORDER BY (((rt0.c0, -1747291922, rt0.c1, rt0.c0)) BETWEEN (((~ (rt0.c1)), (rt0.c2 IN ()), ((rt0.c0)/(vt1.c0)), ((rt0.c1) NOTNULL))) AND ((((((((rt0.c3)AND('886179703')))OR(rt0.c3)))AND(rt0.c2)), CAST(rt0.c3 AS TEXT), ((rt0.c1)&(x'b206')), (- (x'')))))  NULLS FIRST, vt1.c0 ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (x'') ORDER BY CASE vt1.c0  WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN (vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)) THEN UPPER(DISTINCT 0.7597608600456579) END DESC;
SELECT DISTINCT * FROM vt1 WHERE (x'') ORDER BY (- (((vt1.c0) ISNULL)))  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (x'') ORDER BY CASE vt1.c0  WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN (vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)) THEN UPPER(DISTINCT 0.7597608600456579) END DESC;
SELECT DISTINCT * FROM vt1 WHERE (x'') ORDER BY (- (((vt1.c0) ISNULL)))  NULLS LAST;
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE (((((rt0.c3) IS FALSE))AND(0.7091424346141656)));
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE (((((((rt0.c3) IS FALSE))AND(0.7091424346141656)))AND(CASE WHEN ((rt0.c1)||(vt1.c0)) THEN (rt0.c3 IN ()) WHEN NULLIF(DISTINCT rt0.c2, rt0.c2) THEN (vt1.c0 IN ()) WHEN ((rt0.c2)*(rt0.c2)) THEN (rt0.c2 IN (rt0.c0)) WHEN ((vt1.c0)<(vt1.c0)) THEN (((rt0.c2)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1))) ELSE ((rt0.c1)GLOB(vt1.c0)) END))) INTERSECT SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE ((((vt1.c0)) BETWEEN ((((rt0.c3) IS TRUE))) AND ((rtreenode(rt0.c1, vt1.c0)))));
SELECT ALL MIN(rt0.c1) FROM rt0 INNER JOIN vt1 ON (((((rt0.c1, rt0.c3, rt0.c3))<>((rt0.c2, rt0.c1, vt1.c0)))) NOT BETWEEN (((rt0.c3) NOT BETWEEN (7.51361517E8) AND (vt1.c0))) AND (((((rt0.c3)AND(0.222878975247073)))OR(rt0.c0)))) WHERE (((((((((((((rt0.c3)AND(0.5071740506204978)))AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c1)))AND(rt0.c3)))AND(x'')));
SELECT DISTINCT MIN(rt0.c1) FROM rt0 INNER JOIN vt1 ON (((((rt0.c1, rt0.c3, rt0.c3))<>((rt0.c2, rt0.c1, vt1.c0)))) NOT BETWEEN (((rt0.c3) NOT BETWEEN (7.51361517E8) AND (vt1.c0))) AND (((((rt0.c3)AND(0.222878975247073)))OR(rt0.c0)))) WHERE (((((((((((((((rt0.c3)AND(0.5071740506204978)))AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c1)))AND(rt0.c3)))AND(x'')))AND(((((vt1.c0)&(vt1.c0)))=(0.6044970158940646))))) ORDER BY CAST(CAST(rt0.c1 AS INTEGER) AS INTEGER) DESC, (((vt1.c0)) NOT BETWEEN ((((((rt0.c3)AND(rt0.c2)))OR(rt0.c0)))) AND (((((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2)))))) INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0 INNER JOIN vt1 ON (((((rt0.c1, rt0.c3, rt0.c3))!=((rt0.c2, rt0.c1, vt1.c0)))) NOT BETWEEN (((rt0.c3) NOT BETWEEN (7.51361517E8) AND (vt1.c0))) AND (((((rt0.c3)AND(0.222878975247073)))OR(rt0.c0)))) WHERE ((((rt0.c1, rt0.c3, rt0.c1)) NOT BETWEEN ((CAST(vt1.c0 AS NUMERIC), ((((((rt0.c0)OR('886179703')))AND(rt0.c1)))AND(rt0.c3)), x'ff')) AND (((rt0.c3 IN (rt0.c2, vt1.c0)), CASE vt1.c0  WHEN -1632316392 THEN rt0.c2 ELSE rt0.c1 END, ((vt1.c0) IS TRUE))))) ORDER BY CAST(CAST(rt0.c1 AS INTEGER) AS INTEGER) DESC, (((vt1.c0)) NOT BETWEEN ((((((rt0.c3)AND(rt0.c2)))OR(rt0.c0)))) AND (((((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))));
SELECT COUNT(*) FROM rt0, vt1 WHERE (LIKELY(CASE rt0.c2  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((LIKELY(CASE rt0.c2  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END))AND(CAST(((rt0.c3)>>(rt0.c0)) AS NUMERIC)))) LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE RTRIM, ((vt1.c0)<>(vt1.c0)))) AND ((vt1.c0 COLLATE BINARY, LIKELY(DISTINCT vt1.c0))))) ORDER BY 0.3997345296800813;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE RTRIM, ((vt1.c0)>(vt1.c0)))) AND ((vt1.c0 COLLATE BINARY, LIKELY(DISTINCT vt1.c0))))) ORDER BY 0.3997345296800813 INTERSECT SELECT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) ORDER BY 0.3997345296800813;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE RTRIM, ((vt1.c0)<>(vt1.c0)))) AND ((vt1.c0 COLLATE BINARY, LIKELY(DISTINCT vt1.c0))))) ORDER BY 0.3997345296800813;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0 COLLATE RTRIM, ((vt1.c0)>(vt1.c0)))) AND ((vt1.c0 COLLATE BINARY, LIKELY(DISTINCT vt1.c0))))) ORDER BY 0.3997345296800813 INTERSECT SELECT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) ORDER BY 0.3997345296800813;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0)==('397234250')) IN (CASE '-352603787'  WHEN vt1.c0 THEN vt1.c0 END, ((-133636938) NOTNULL))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)==('397234250')) IN (CASE '-352603787'  WHEN vt1.c0 THEN vt1.c0 END)))AND('-353370911'))) LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((((+ (rt0.c0))) NOTNULL));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((+ (rt0.c0))) NOTNULL))AND(CAST(((rt0.c1)<>(rt0.c1)) AS INTEGER)))) ORDER BY ((((((highlight(rt0.c1, rt0.c3, rt0.c2, rt0.c0))AND(((((((rt0.c2)AND(rt0.c1)))OR(x'')))OR(rt0.c2)))))AND((rt0.c0 IN (-1300788478)))))OR(((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)))) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c3, vt1.c0, rt0.c2))>((rt0.c2, rt0.c1, rt0.c2))))<=((rt0.c2 IN (rt0.c2))))) ORDER BY ((((((highlight(rt0.c1, rt0.c3, rt0.c2, rt0.c0))AND(((((((rt0.c2)AND(rt0.c1)))OR(x'')))OR(rt0.c2)))))AND((rt0.c0 IN (0Xffffffffb2778b02)))))OR(((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)))) ASC LIMIT 0X0;
SELECT * FROM vt1, rt0 WHERE ((((+ (rt0.c0))) NOTNULL));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((+ (rt0.c0))) NOTNULL))AND(CAST(((rt0.c1)<>(rt0.c1)) AS INTEGER)))) ORDER BY ((((((highlight(rt0.c1, rt0.c3, rt0.c2, rt0.c0))AND(((((((rt0.c2)AND(rt0.c1)))OR(x'')))OR(rt0.c2)))))AND((rt0.c0 IN (-1300788478)))))OR(((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)))) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c3, vt1.c0, rt0.c2))>((rt0.c2, rt0.c1, rt0.c2))))<=((rt0.c2 IN (rt0.c2))))) ORDER BY ((((((highlight(rt0.c1, rt0.c3, rt0.c2, rt0.c0))AND(((((((rt0.c2)AND(rt0.c1)))OR(x'')))OR(rt0.c2)))))AND((rt0.c0 IN (0Xffffffffb2778b02)))))OR(((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)))) ASC LIMIT 0X0;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (rt0.c0) ORDER BY CASE rt0.c2  WHEN rt0.c0 THEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c2)) WHEN (+ (rt0.c0)) THEN '-101668619' WHEN ((rt0.c2)<=(rt0.c2)) THEN (~ (rt0.c1)) ELSE rt0.c0 END ASC  NULLS LAST, ((rt0.c1 COLLATE RTRIM)GLOB(((((x'23')AND('-97448687')))OR(rt0.c0))));
SELECT MAX(rt0.c3) FROM rt0 WHERE (((rt0.c0)AND(CAST(UPPER(DISTINCT rt0.c3) AS INTEGER)))) ORDER BY CAST((- (NULL)) AS NUMERIC) ASC  NULLS LAST, LIKELIHOOD(((rt0.c1)LIKE(rt0.c2)), (+ (rt0.c0))) DESC LIMIT 1 INTERSECT SELECT MAX(rt0.c3) FROM rt0 WHERE ((((((rt0.c1, rt0.c0))<((rt0.c2, rt0.c3)))) NOT NULL)) ORDER BY CAST((- (NULL)) AS NUMERIC) ASC  NULLS LAST, LIKELIHOOD(((rt0.c1)LIKE(rt0.c2)), (+ (rt0.c0))) DESC LIMIT 1;
SELECT * FROM rt0, vt1 WHERE (rt0.c2);
SELECT * FROM rt0, vt1 WHERE (rt0.c2) ORDER BY rt0.c1 ASC LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE ((0.3885601715285404 IN ())) ORDER BY rt0.c1 ASC LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE (rt0.c2);
SELECT * FROM rt0, vt1 WHERE (rt0.c2) ORDER BY rt0.c1 ASC LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE ((0.3885601715285404 IN ())) ORDER BY rt0.c1 ASC LIMIT 0x0;
SELECT * FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '' ELSE vt1.c0 END))) ORDER BY CAST(vt1.c0 AS REAL)  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '' ELSE vt1.c0 END))) ORDER BY ((((((((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0 COLLATE NOCASE)))OR((((vt1.c0))<=((vt1.c0))))))AND('6
e')))AND(((vt1.c0)<=(vt1.c0)))))AND(((vt1.c0)IS NOT(vt1.c0)))) ASC  NULLS FIRST, ((((vt1.c0)<(NULL))) ISNULL) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE ((vt1.c0 IN (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))) ORDER BY ((((((((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0 COLLATE NOCASE)))OR((((vt1.c0))<=((vt1.c0))))))AND('6
e')))AND(((vt1.c0)<=(vt1.c0)))))AND(((vt1.c0)IS NOT(vt1.c0)))) ASC  NULLS FIRST, ((((vt1.c0)<(NULL))) ISNULL) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '' ELSE vt1.c0 END))) ORDER BY CAST(vt1.c0 AS REAL)  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '' ELSE vt1.c0 END))) ORDER BY ((((((((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0 COLLATE NOCASE)))OR((((vt1.c0))<=((vt1.c0))))))AND('6
e')))AND(((vt1.c0)<=(vt1.c0)))))AND(((vt1.c0)IS NOT(vt1.c0)))) ASC  NULLS FIRST, ((((vt1.c0)<(NULL))) ISNULL) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE ((vt1.c0 IN (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))) ORDER BY ((((((((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0 COLLATE NOCASE)))OR((((vt1.c0))<=((vt1.c0))))))AND('6
e')))AND(((vt1.c0)<=(vt1.c0)))))AND(((vt1.c0)IS NOT(vt1.c0)))) ASC  NULLS FIRST, ((((vt1.c0)<(NULL))) ISNULL) ASC  NULLS FIRST;
SELECT COUNT(*) FROM rt0, vt1 WHERE ('w輿l*~');
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((('w輿l*~')AND(((CAST(rt0.c3 AS NUMERIC))==(((((rt0.c3)OR(rt0.c2)))OR(rt0.c0))))))) ORDER BY ((((((rt0.c0)AND(rt0.c2)))AND(rt0.c2))) BETWEEN (x'5f4f') AND (CAST(rt0.c3 AS TEXT))), ((CAST(rt0.c2 AS BLOB))>>(rt0.c1)) DESC  NULLS FIRST LIMIT 0x1;
SELECT COUNT(*) FROM rt0 WHERE (CASE WHEN ((((rt0.c1)AND(rt0.c3)))OR(rt0.c3)) THEN (rt0.c1 IN ()) WHEN (((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1))) THEN (+ (rt0.c0)) WHEN rt0.c0 COLLATE BINARY THEN ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c3)) WHEN CASE WHEN '' THEN NULL WHEN rt0.c3 THEN rt0.c2 END THEN ((rt0.c0)||(rt0.c3)) WHEN rt0.c1 THEN ('\rbzCX' IN ()) END);
SELECT COUNT(*) FROM rt0 WHERE (((CASE WHEN ((((rt0.c1)AND(rt0.c3)))OR(rt0.c3)) THEN (rt0.c1 IN ()) WHEN (((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1))) THEN (+ (rt0.c0)) WHEN rt0.c0 COLLATE BINARY THEN ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c3)) WHEN CASE WHEN '' THEN NULL WHEN rt0.c3 THEN rt0.c2 END THEN ((rt0.c0)||(rt0.c3)) WHEN rt0.c1 THEN ('\rbzCX' IN ()) END)AND(NULL))) ORDER BY (((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3))))!=(((NULL)|(rt0.c1)))), (((rt0.c2)) BETWEEN ((LIKELIHOOD(DISTINCT rt0.c1, rt0.c1))) AND ((CAST(rt0.c1 AS TEXT)))) LIMIT 0 INTERSECT SELECT COUNT(*) FROM rt0 WHERE ((((NOT (rt0.c2))) BETWEEN (((((rt0.c1)OR(rt0.c2)))OR(rt0.c1))) AND (((x'')<<(rt0.c2))))) ORDER BY (((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3))))!=(((NULL)|(rt0.c1)))), (((rt0.c2)) BETWEEN ((LIKELIHOOD(DISTINCT rt0.c1, rt0.c1))) AND ((CAST(rt0.c1 AS TEXT)))) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (x'87');
SELECT DISTINCT * FROM vt1 WHERE (((x'87')AND(((NULL)!=(((vt1.c0)>=(vt1.c0))))))) ORDER BY SUBSTR((((('-16152527')AND(vt1.c0)))AND(vt1.c0)), vt1.c0) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (0.5993996309648981) ORDER BY SUBSTR((((('-16152527')AND(vt1.c0)))AND(vt1.c0)), vt1.c0) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (x'87');
SELECT DISTINCT * FROM vt1 WHERE (((x'87')AND(((NULL)!=(((vt1.c0)>=(vt1.c0))))))) ORDER BY SUBSTR((((('-16152527')AND(vt1.c0)))AND(vt1.c0)), vt1.c0) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (0.5993996309648981) ORDER BY SUBSTR((((('-16152527')AND(vt1.c0)))AND(vt1.c0)), vt1.c0) DESC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)) IN (RTRIM(0.9322990118362885)))) ORDER BY CAST(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) AS TEXT) DESC, rt0.c1 ASC;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)) IN (RTRIM(0.9322990118362885))))AND((rt0.c0 IN (rt0.c3 COLLATE BINARY))))) ORDER BY CAST(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) AS TEXT) DESC, rt0.c1 ASC INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST((((rt0.c3, rt0.c0)) NOT BETWEEN ((vt1.c0, rt0.c3)) AND ((rt0.c1, vt1.c0))) AS INTEGER)) ORDER BY CAST(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) AS TEXT) DESC, rt0.c1 ASC;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)) IN (RTRIM(0.9322990118362885)))) ORDER BY CAST(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) AS TEXT) DESC, rt0.c1 ASC;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)) IN (RTRIM(0.9322990118362885))))AND((rt0.c0 IN (rt0.c3 COLLATE BINARY))))) ORDER BY CAST(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) AS TEXT) DESC, rt0.c1 ASC INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST((((rt0.c3, rt0.c0)) NOT BETWEEN ((vt1.c0, rt0.c3)) AND ((rt0.c1, vt1.c0))) AS INTEGER)) ORDER BY CAST(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) AS TEXT) DESC, rt0.c1 ASC;
SELECT ALL MAX(rt0.c3) FROM rt0 LEFT OUTER JOIN vt1 ON CASE WHEN CAST(rt0.c0 AS INTEGER) THEN ((rt0.c3)OR(rt0.c1)) WHEN CASE WHEN rt0.c2 THEN rt0.c3 WHEN '0.5439443282875409' THEN rt0.c2 END THEN -196739785 WHEN (+ (rt0.c2)) THEN (((rt0.c1, rt0.c3))!=((rt0.c0, rt0.c3))) ELSE rt0.c2 END WHERE (CAST(((rt0.c2)+(vt1.c0)) AS INTEGER)) ORDER BY CAST(CASE WHEN rt0.c2 THEN rt0.c2 END AS BLOB) ASC  NULLS FIRST, rt0.c0  NULLS LAST;
SELECT MAX(rt0.c3) FROM rt0 LEFT OUTER JOIN vt1 ON CASE WHEN CAST(rt0.c0 AS INTEGER) THEN ((rt0.c3)OR(rt0.c1)) WHEN CASE WHEN rt0.c2 THEN rt0.c3 WHEN '0.5439443282875409' THEN rt0.c2 END THEN -196739785 WHEN (+ (rt0.c2)) THEN (((rt0.c1, rt0.c3))<>((rt0.c0, rt0.c3))) ELSE rt0.c2 END WHERE (CAST(((rt0.c2)+(vt1.c0)) AS INTEGER)) ORDER BY (((0.5528910103396043) BETWEEN (rt0.c1) AND (rt0.c0)) IN (rt0.c1 COLLATE NOCASE))  NULLS FIRST, CAST(((rt0.c1)<=(rt0.c2)) AS TEXT) ASC  NULLS FIRST, ((((((rt0.c3)>(rt0.c0)))AND(((rt0.c1)IS NOT(rt0.c1)))))OR((NOT (rt0.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY TYPEOF(DISTINCT ((rt0.c0)>=(rt0.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY UNLIKELY(DISTINCT rt0.c1 COLLATE BINARY) ASC  NULLS FIRST, (NOT (rt0.c1)) COLLATE NOCASE, CAST((~ (0.9538844828764038)) AS INTEGER) DESC;
SELECT * FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY TYPEOF(DISTINCT ((rt0.c0)>=(rt0.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY UNLIKELY(DISTINCT rt0.c1 COLLATE BINARY) ASC  NULLS FIRST, (NOT (rt0.c1)) COLLATE NOCASE, CAST((~ (0.9538844828764038)) AS INTEGER) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE (((vt1.c0)&(vt1.c0)) COLLATE BINARY);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((vt1.c0)&(vt1.c0)) COLLATE BINARY)AND(((vt1.c0 COLLATE RTRIM) NOTNULL)))) ORDER BY NULL ASC, (- (NULL))  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)AND(vt1.c0)))OR(1871045393)))OR(vt1.c0)))OR((((vt1.c0))<=((vt1.c0))))))AND((~ (vt1.c0)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)AND(vt1.c0)))OR(0X6f85e311)))OR(vt1.c0)))OR((((vt1.c0))<=((vt1.c0))))))AND((~ (vt1.c0))))) ORDER BY ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE BINARY  NULLS FIRST LIMIT 0x2;
SELECT ALL COUNT(*) FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0)LIKE(vt1.c0)) THEN ((vt1.c0)GLOB(vt1.c0)) WHEN ((0.07008506690231997) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN -1316851057 COLLATE NOCASE WHEN ((vt1.c0)*(vt1.c0)) THEN (NOT (vt1.c0)) ELSE ((vt1.c0)<=(vt1.c0)) END) ORDER BY TYPEOF(vt1.c0) COLLATE RTRIM  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0)LIKE(vt1.c0)) THEN ((vt1.c0)GLOB(vt1.c0)) WHEN ((0.07008506690231997) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN 0Xffffffffb182728f COLLATE NOCASE WHEN ((vt1.c0)*(vt1.c0)) THEN (NOT (vt1.c0)) ELSE ((vt1.c0)<(vt1.c0)) END)AND('^'))) ORDER BY CASE vt1.c0  WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) WHEN (~ (vt1.c0)) THEN (((vt1.c0))=(('0.8735340297327784'))) WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN CAST(vt1.c0 AS REAL) END INTERSECT SELECT ALL * FROM vt1 WHERE (CASE WHEN CASE vt1.c0  WHEN -5.8887415E7 THEN vt1.c0 ELSE vt1.c0 END THEN (NOT (vt1.c0)) WHEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) THEN vt1.c0 ELSE ((vt1.c0)LIKE(vt1.c0)) END) ORDER BY CASE vt1.c0  WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) WHEN (~ (vt1.c0)) THEN (((vt1.c0))=(('0.8735340297327784'))) WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN CAST(vt1.c0 AS REAL) END;
SELECT * FROM vt1 WHERE (CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0)LIKE(vt1.c0)) THEN ((vt1.c0)GLOB(vt1.c0)) WHEN ((0.07008506690231997) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN -1316851057 COLLATE NOCASE WHEN ((vt1.c0)*(vt1.c0)) THEN (NOT (vt1.c0)) ELSE ((vt1.c0)<=(vt1.c0)) END) ORDER BY TYPEOF(vt1.c0) COLLATE RTRIM  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0)LIKE(vt1.c0)) THEN ((vt1.c0)GLOB(vt1.c0)) WHEN ((0.07008506690231997) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN 0Xffffffffb182728f COLLATE NOCASE WHEN ((vt1.c0)*(vt1.c0)) THEN (NOT (vt1.c0)) ELSE ((vt1.c0)<(vt1.c0)) END)AND('^'))) ORDER BY CASE vt1.c0  WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) WHEN (~ (vt1.c0)) THEN (((vt1.c0))=(('0.8735340297327784'))) WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN CAST(vt1.c0 AS REAL) END INTERSECT SELECT ALL * FROM vt1 WHERE (CASE WHEN CASE vt1.c0  WHEN -5.8887415E7 THEN vt1.c0 ELSE vt1.c0 END THEN (NOT (vt1.c0)) WHEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) THEN vt1.c0 ELSE ((vt1.c0)LIKE(vt1.c0)) END) ORDER BY CASE vt1.c0  WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) WHEN (~ (vt1.c0)) THEN (((vt1.c0))=(('0.8735340297327784'))) WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN CAST(vt1.c0 AS REAL) END;
SELECT * FROM rt0 WHERE (((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) BETWEEN (((rt0.c3)%(rt0.c1))) AND (((rt0.c3)|(rt0.c0))))) ORDER BY IFNULL(DISTINCT ((x'')IS(rt0.c2)), 0.7144037348095569) ASC  NULLS FIRST, ((((0x15d568af) BETWEEN (0Xffffffffd9aea43f) AND (rt0.c2)))=(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))), (- (rt0.c2))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) BETWEEN (((rt0.c3)%(rt0.c1))) AND (((rt0.c3)|(rt0.c0))))) ORDER BY CASE ((x'cf') IS FALSE)  WHEN CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '!' WHEN rt0.c0 THEN rt0.c1 END THEN rt0.c2 WHEN CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN 734330088 WHEN x'' THEN rt0.c3 ELSE rt0.c0 END THEN CASE WHEN NULL THEN rt0.c2 WHEN rt0.c2 THEN x'c7ab' WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END END ASC, ((rt0.c2) IS FALSE) COLLATE RTRIM DESC  NULLS FIRST, DATETIME(((rt0.c1) NOTNULL), ((rt0.c0)LIKE(0X50cdfadc)), CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 WHEN 0.7654783778594165 THEN rt0.c0 WHEN rt0.c0 THEN x'92a5fc' END) DESC LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((NULLIF(rt0.c1, rt0.c0))>>(rt0.c3))) ORDER BY CASE ((x'cf') IS FALSE)  WHEN CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '!' WHEN rt0.c0 THEN rt0.c1 END THEN rt0.c2 WHEN CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN 0x2bc4fce8 WHEN x'' THEN rt0.c3 ELSE rt0.c0 END THEN CASE WHEN NULL THEN rt0.c2 WHEN rt0.c2 THEN x'c7ab' WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END END ASC, ((rt0.c2) IS FALSE) COLLATE RTRIM DESC  NULLS FIRST, DATETIME(((rt0.c1) NOTNULL), ((rt0.c0)LIKE(1355676380)), CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 WHEN 0.7654783778594165 THEN rt0.c0 WHEN rt0.c0 THEN x'92a5fc' END) DESC LIMIT 0x1;
SELECT * FROM rt0 WHERE (((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) BETWEEN (((rt0.c3)%(rt0.c1))) AND (((rt0.c3)|(rt0.c0))))) ORDER BY IFNULL(DISTINCT ((x'')IS(rt0.c2)), 0.7144037348095569) ASC  NULLS FIRST, ((((0x15d568af) BETWEEN (0Xffffffffd9aea43f) AND (rt0.c2)))=(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))), (- (rt0.c2))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) BETWEEN (((rt0.c3)%(rt0.c1))) AND (((rt0.c3)|(rt0.c0))))) ORDER BY CASE ((x'cf') IS FALSE)  WHEN CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '!' WHEN rt0.c0 THEN rt0.c1 END THEN rt0.c2 WHEN CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN 734330088 WHEN x'' THEN rt0.c3 ELSE rt0.c0 END THEN CASE WHEN NULL THEN rt0.c2 WHEN rt0.c2 THEN x'c7ab' WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END END ASC, ((rt0.c2) IS FALSE) COLLATE RTRIM DESC  NULLS FIRST, DATETIME(((rt0.c1) NOTNULL), ((rt0.c0)LIKE(0X50cdfadc)), CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 WHEN 0.7654783778594165 THEN rt0.c0 WHEN rt0.c0 THEN x'92a5fc' END) DESC LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((NULLIF(rt0.c1, rt0.c0))>>(rt0.c3))) ORDER BY CASE ((x'cf') IS FALSE)  WHEN CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '!' WHEN rt0.c0 THEN rt0.c1 END THEN rt0.c2 WHEN CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN 0x2bc4fce8 WHEN x'' THEN rt0.c3 ELSE rt0.c0 END THEN CASE WHEN NULL THEN rt0.c2 WHEN rt0.c2 THEN x'c7ab' WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END END ASC, ((rt0.c2) IS FALSE) COLLATE RTRIM DESC  NULLS FIRST, DATETIME(((rt0.c1) NOTNULL), ((rt0.c0)LIKE(1355676380)), CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 WHEN 0.7654783778594165 THEN rt0.c0 WHEN rt0.c0 THEN x'92a5fc' END) DESC LIMIT 0x1;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (CASE WHEN ((rt0.c1) NOTNULL) THEN CASE NULL  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN 'Em' WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN x'ff' ELSE rt0.c3 END WHEN (rt0.c3 IN ('')) THEN ((rt0.c3)IS(rt0.c0)) ELSE (rt0.c1 IN ()) END);
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (CASE WHEN ((rt0.c1) NOTNULL) THEN CASE NULL  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN 'Em' WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN x'ff' ELSE rt0.c3 END WHEN (rt0.c3 IN ('')) THEN ((rt0.c3)IS(rt0.c0)) ELSE (rt0.c1 IN ()) END) LIMIT 1 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((((NULL) BETWEEN (rt0.c1) AND (rt0.c2))) NOT BETWEEN (DATE(rt0.c1, 0.556775609207939, rt0.c2, rt0.c2)) AND ('-1656627208'))) LIMIT 0x1;
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE ((((rt0.c3)) NOT BETWEEN ((rt0.c3 COLLATE RTRIM)) AND (((('[')||(rt0.c2))))));
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE ((((rt0.c3)) NOT BETWEEN ((rt0.c3 COLLATE RTRIM)) AND (((('[')||(rt0.c2)))))) ORDER BY ((((rt0.c0 COLLATE RTRIM)AND(((rt0.c3) NOT NULL))))AND(((rt0.c3)GLOB(rt0.c3)))) ASC, LOWER(DISTINCT (NOT (rt0.c2)))  NULLS FIRST;
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE ((- (vt1.c0))) ORDER BY HEX(((rt0.c0)+(rt0.c3))) ASC, (((rt0.c2)) BETWEEN (((~ (vt1.c0)))) AND (((NOT (rt0.c2)))));
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE ((((- (vt1.c0)))AND(rt0.c0))) ORDER BY HEX(((rt0.c0)+(rt0.c3))) ASC, (((rt0.c2)) BETWEEN (((~ (vt1.c0)))) AND (((NOT (rt0.c2))))) LIMIT 0x2;
SELECT MAX(rt0.c0) FROM vt1 CROSS JOIN rt0 ON ((LIKELY(rt0.c1)) BETWEEN (CAST(x'83' AS REAL)) AND (((((vt1.c0)OR(rt0.c1)))OR(rt0.c0)))) WHERE (((rt0.c2) BETWEEN ((('I') NOTNULL)) AND (((rt0.c0)>(rt0.c0))))) ORDER BY ((rt0.c3) NOT BETWEEN ((~ (rt0.c2))) AND ((NOT (7.09578335E8)))), rt0.c1 DESC;
SELECT DISTINCT MAX(rt0.c0) FROM vt1 CROSS JOIN rt0 ON ((LIKELY(rt0.c1)) BETWEEN (CAST(x'83' AS REAL)) AND (((((vt1.c0)OR(rt0.c1)))OR(rt0.c0)))) WHERE (((((rt0.c2) BETWEEN ((('I') NOTNULL)) AND (((rt0.c0)>(rt0.c0)))))AND(rt0.c3))) ORDER BY ((rt0.c3) NOT BETWEEN ((~ (rt0.c2))) AND ((NOT (7.09578335E8)))), rt0.c1 DESC LIMIT 1;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) IN ((~ (vt1.c0))))) ORDER BY (((vt1.c0)OR(vt1.c0)) IN (((((vt1.c0)AND(NULL)))AND(vt1.c0))))  NULLS LAST, ((vt1.c0)>=(((vt1.c0)GLOB(vt1.c0)))) DESC;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) IN ((~ (vt1.c0))))) ORDER BY ((((vt1.c0)GLOB(vt1.c0)))IS(((vt1.c0) ISNULL)))  NULLS FIRST INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (CAST(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END AS TEXT)) ORDER BY ((((vt1.c0)GLOB(vt1.c0)))IS(((vt1.c0) ISNULL)))  NULLS FIRST;
SELECT MAX(rt0.c0) FROM rt0 INNER JOIN vt1 ON CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END THEN rt0.c3 ELSE (~ (rt0.c1)) END WHERE (((CAST(rt0.c0 AS REAL)) BETWEEN ((((rt0.c2, rt0.c2))<((rt0.c2, rt0.c1)))) AND (rt0.c1 COLLATE NOCASE))) ORDER BY (((((((((rt0.c3 IN (rt0.c0, rt0.c1)))AND(((rt0.c0)<(rt0.c0)))))AND(((vt1.c0)LIKE(vt1.c0)))))AND(rt0.c3 COLLATE RTRIM)))OR(rt0.c0 COLLATE BINARY))  NULLS LAST, (((vt1.c0 IN (rt0.c2, rt0.c2, rt0.c1)))|(((rt0.c1) ISNULL)));
SELECT DISTINCT MAX(rt0.c0) FROM rt0 INNER JOIN vt1 ON CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END THEN rt0.c3 ELSE (~ (rt0.c1)) END WHERE (((CAST(rt0.c0 AS REAL)) BETWEEN ((((rt0.c2, rt0.c2))<((rt0.c2, rt0.c1)))) AND (rt0.c1 COLLATE NOCASE))) ORDER BY (((((((((rt0.c3 IN (rt0.c0, rt0.c1)))AND(((rt0.c0)<(rt0.c0)))))AND(((vt1.c0)LIKE(vt1.c0)))))AND(rt0.c3 COLLATE RTRIM)))OR(rt0.c0 COLLATE BINARY))  NULLS LAST, (((vt1.c0 IN (rt0.c2, rt0.c2, rt0.c1)))|(((rt0.c1) ISNULL))) INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 INNER JOIN vt1 ON CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END THEN rt0.c3 ELSE (~ (rt0.c1)) END WHERE (((((((CAST(rt0.c0 AS REAL))AND(UPPER(vt1.c0))))OR((NOT (0.5528445912588257)))))AND(((rt0.c1)<(vt1.c0))))) ORDER BY (((((((((rt0.c3 IN (rt0.c0, rt0.c1)))AND(((rt0.c0)<(rt0.c0)))))AND(((vt1.c0)LIKE(vt1.c0)))))AND(rt0.c3 COLLATE RTRIM)))OR(rt0.c0 COLLATE BINARY))  NULLS LAST, (((vt1.c0 IN (rt0.c2, rt0.c2, rt0.c1)))|(((rt0.c1) ISNULL)));
SELECT MIN(rt0.c2) FROM rt0 WHERE (CAST((rt0.c1 IN (NULL, rt0.c1)) AS TEXT)) ORDER BY ('0.35795302195238243' IN ()) COLLATE NOCASE ASC, (json_quote(rt0.c2) IN ());
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((CAST((rt0.c1 IN (NULL, rt0.c1)) AS TEXT))AND(((((((((rt0.c2)AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c1))) NOT NULL)))) ORDER BY LOWER(rt0.c2 COLLATE RTRIM)  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE ((((((((((NOT (rt0.c0)))AND(CAST(rt0.c2 AS REAL))))OR(rt0.c2)))OR((((rt0.c1, rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c3, rt0.c2, rt0.c3)) AND ((rt0.c2, rt0.c1, rt0.c3))))))AND((rt0.c3 IN (rt0.c3))))) ORDER BY LOWER(rt0.c2 COLLATE RTRIM)  NULLS FIRST LIMIT 1;
SELECT * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c1) IS TRUE)  WHEN ((((((((((((NULL)OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c0)))AND(0.22807612306069758)))OR(rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN TRIM(DISTINCT rt0.c3, vt1.c0) END WHERE (rt0.c0);
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c1) IS TRUE)  WHEN ((((((((((((NULL)OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c0)))AND(0.22807612306069758)))OR(rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN TRIM(DISTINCT rt0.c3, vt1.c0) END WHERE (((rt0.c0)AND((NULL IN (rt0.c3))))) ORDER BY ((((rt0.c0)LIKE(rt0.c2))) IS FALSE) DESC, '2108780266' ASC LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c1) IS TRUE)  WHEN ((((((((((((NULL)OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c0)))AND(0.22807612306069758)))OR(rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN TRIM(DISTINCT rt0.c3, vt1.c0) END WHERE (((((rt0.c0)|(rt0.c1)))OR(('-1440571497' IN (rt0.c3))))) ORDER BY ((((rt0.c0)LIKE(rt0.c2))) IS FALSE) DESC, '2108780266' ASC LIMIT 3;
SELECT * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c1) IS TRUE)  WHEN ((((((((((((NULL)OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c0)))AND(0.22807612306069758)))OR(rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN TRIM(DISTINCT rt0.c3, vt1.c0) END WHERE (rt0.c0);
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c1) IS TRUE)  WHEN ((((((((((((NULL)OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c0)))AND(0.22807612306069758)))OR(rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN TRIM(DISTINCT rt0.c3, vt1.c0) END WHERE (((rt0.c0)AND((NULL IN (rt0.c3))))) ORDER BY ((((rt0.c0)LIKE(rt0.c2))) IS FALSE) DESC, '2108780266' ASC LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c1) IS TRUE)  WHEN ((((((((((((NULL)OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c0)))AND(0.22807612306069758)))OR(rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN TRIM(DISTINCT rt0.c3, vt1.c0) END WHERE (((((rt0.c0)|(rt0.c1)))OR(('-1440571497' IN (rt0.c3))))) ORDER BY ((((rt0.c0)LIKE(rt0.c2))) IS FALSE) DESC, '2108780266' ASC LIMIT 3;
SELECT MAX(rt0.c2) FROM vt1, rt0 WHERE (((((vt1.c0)*(rt0.c0))) BETWEEN (rt0.c0) AND (((((((((((((((0.8778789546857406)OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))OR(0.05662171872295296)))AND(rt0.c2)))OR('-703655727')))OR(rt0.c3))))) ORDER BY CASE CASE WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c3 END  WHEN (+ (rt0.c0)) THEN CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END ELSE json_type(rt0.c3) END ASC, (+ ((((x''))==((vt1.c0)))))  NULLS LAST;
SELECT DISTINCT MAX(rt0.c2) FROM vt1, rt0 WHERE (((((vt1.c0)*(rt0.c0))) BETWEEN (rt0.c0) AND (((((((((((((((0.8778789546857406)OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))OR(0.05662171872295296)))AND(rt0.c2)))OR('-703655727')))OR(rt0.c3))))) ORDER BY (((rt0.c1) NOT BETWEEN (rt0.c0) AND (vt1.c0)) IN ()) DESC, CAST((+ (rt0.c2)) AS REAL) ASC, (((rt0.c2, rt0.c3, rt0.c0, rt0.c1, NULL)) BETWEEN ((vt1.c0, CAST('881936452' AS TEXT), ((rt0.c1) IS TRUE), CAST(x'' AS REAL), (rt0.c2 IN (rt0.c3)))) AND ((((((rt0.c0)AND(0.21452648222791482)))OR(vt1.c0)), CAST(rt0.c0 AS INTEGER), rt0.c2 COLLATE RTRIM, CAST(rt0.c0 AS REAL), (((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c3))))));
SELECT * FROM rt0 WHERE (NULL) ORDER BY ((((rt0.c2)GLOB(rt0.c3)))/((rt0.c1 IN (rt0.c0)))) ASC  NULLS FIRST, ((rt0.c1) IS TRUE) COLLATE BINARY DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (NULL) ORDER BY ((((rt0.c2)GLOB(rt0.c3)))/((rt0.c1 IN (rt0.c0)))) ASC  NULLS FIRST, ((rt0.c1) IS TRUE) COLLATE BINARY DESC  NULLS FIRST LIMIT 1;
SELECT * FROM rt0 WHERE (NULL) ORDER BY ((((rt0.c2)GLOB(rt0.c3)))/((rt0.c1 IN (rt0.c0)))) ASC  NULLS FIRST, ((rt0.c1) IS TRUE) COLLATE BINARY DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (NULL) ORDER BY ((((rt0.c2)GLOB(rt0.c3)))/((rt0.c1 IN (rt0.c0)))) ASC  NULLS FIRST, ((rt0.c1) IS TRUE) COLLATE BINARY DESC  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM vt1 WHERE ((455756160 IN (LIKELIHOOD(DISTINCT vt1.c0, vt1.c0)))) ORDER BY vt1.c0 ASC;
SELECT COUNT(*) FROM vt1 WHERE ((((0X1b2a4980 IN (LIKELIHOOD(DISTINCT vt1.c0, vt1.c0))))AND(CAST(((((((((((((((NULL)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(x'6d')))AND(vt1.c0)))AND(x'31')) AS REAL)))) ORDER BY (((NULL)IS NOT(vt1.c0)) IN ()) DESC INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (x'428c8c' COLLATE BINARY) ORDER BY (((NULL)IS NOT(vt1.c0)) IN ()) DESC;
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE ((+ (CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END))) ORDER BY (rt0.c1 COLLATE NOCASE IN ('0.0'));
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE ((+ (CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END))) ORDER BY ABS(DISTINCT (rt0.c0 IN (rt0.c0, vt1.c0, rt0.c3)))  NULLS FIRST, (((((vt1.c0, '-86516757')) NOT BETWEEN ((vt1.c0, rt0.c1)) AND ((rt0.c3, rt0.c0))))<((rt0.c1 IN (rt0.c3))))  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (CAST(rt0.c0 COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(rt0.c0 COLLATE RTRIM AS NUMERIC))AND((CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END IN ())))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c2)<<(rt0.c1)))%(((('対a', 9.53433735E8, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c3, rt0.c3)) AND ((rt0.c2, vt1.c0, rt0.c1)))))) LIMIT 0x1;
SELECT * FROM vt1, rt0 WHERE (CAST(rt0.c0 COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(rt0.c0 COLLATE RTRIM AS NUMERIC))AND((CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END IN ())))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c2)<<(rt0.c1)))%(((('対a', 9.53433735E8, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c3, rt0.c3)) AND ((rt0.c2, vt1.c0, rt0.c1)))))) LIMIT 0x1;
SELECT ALL MIN(rt0.c2) FROM vt1 NATURAL JOIN rt0 WHERE ((((((rt0.c2)+(rt0.c3)), LIKELIHOOD(DISTINCT 'qFEB(+', rt0.c1)))==((((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3)), (~ (vt1.c0)))))) ORDER BY (((rt0.c2 COLLATE BINARY, CAST(rt0.c2 AS REAL)))=(((~ ('1848466430')), rt0.c1)));
SELECT ALL MIN(rt0.c2) FROM vt1 NATURAL JOIN rt0 WHERE ((((((rt0.c2)+(rt0.c3)), LIKELIHOOD(DISTINCT 'qFEB(+', rt0.c1)))==((((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c3)), (~ (vt1.c0)))))) ORDER BY (((rt0.c2 COLLATE BINARY, CAST(rt0.c2 AS REAL)))==(((~ ('1848466430')), rt0.c1))) LIMIT 0x1;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON CAST(rt0.c1 AS TEXT) COLLATE NOCASE WHERE (((0.6670164686195648)==(vt1.c0 COLLATE RTRIM))) ORDER BY ((vt1.c0) NOT BETWEEN (UPPER(DISTINCT x'')) AND (((rt0.c3)-(rt0.c3)))) DESC;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON CAST(rt0.c1 AS TEXT) COLLATE NOCASE WHERE (((0.6670164686195648)=(vt1.c0 COLLATE RTRIM))) ORDER BY ((vt1.c0) NOT BETWEEN (UPPER(DISTINCT x'')) AND (((rt0.c3)-(rt0.c3)))) DESC LIMIT 0;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON CAST(rt0.c1 AS TEXT) COLLATE NOCASE WHERE (((0.6670164686195648)==(vt1.c0 COLLATE RTRIM))) ORDER BY ((vt1.c0) NOT BETWEEN (UPPER(DISTINCT x'')) AND (((rt0.c3)-(rt0.c3)))) DESC;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON CAST(rt0.c1 AS TEXT) COLLATE NOCASE WHERE (((0.6670164686195648)=(vt1.c0 COLLATE RTRIM))) ORDER BY ((vt1.c0) NOT BETWEEN (UPPER(DISTINCT x'')) AND (((rt0.c3)-(rt0.c3)))) DESC LIMIT 0;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (('-1948086773')<>(((vt1.c0)&(rt0.c0)))) WHERE (CAST(rt0.c0 AS INTEGER)) ORDER BY ((rt0.c1 IN ()) IN ())  NULLS FIRST, CASE CAST(0.7267813554985081 AS NUMERIC)  WHEN rt0.c3 COLLATE BINARY THEN ((rt0.c1)OR(rt0.c2)) WHEN ((rt0.c1) IS TRUE) THEN (rt0.c0 IN (vt1.c0)) WHEN NULL THEN ((rt0.c3)/(rt0.c2)) WHEN rt0.c0 THEN ((rt0.c3)<>(rt0.c2)) ELSE (rt0.c3 IN (rt0.c2)) END  NULLS LAST;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (('-1948086773')!=(((vt1.c0)&(rt0.c0)))) WHERE (((CAST(rt0.c0 AS INTEGER))AND((NOT (((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2))))))) ORDER BY ((CAST(rt0.c1 AS INTEGER))<(((((((rt0.c2)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c0)))) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (('-1948086773')<>(((vt1.c0)&(rt0.c0)))) WHERE (CAST(rt0.c0 AS INTEGER)) ORDER BY ((rt0.c1 IN ()) IN ())  NULLS FIRST, CASE CAST(0.7267813554985081 AS NUMERIC)  WHEN rt0.c3 COLLATE BINARY THEN ((rt0.c1)OR(rt0.c2)) WHEN ((rt0.c1) IS TRUE) THEN (rt0.c0 IN (vt1.c0)) WHEN NULL THEN ((rt0.c3)/(rt0.c2)) WHEN rt0.c0 THEN ((rt0.c3)<>(rt0.c2)) ELSE (rt0.c3 IN (rt0.c2)) END  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0 WHERE (((0.7501211686058713)|(((rt0.c3)&(rt0.c2))))) ORDER BY 0.8050360704466362, CASE TOTAL_CHANGES()  WHEN ((rt0.c0) IS FALSE) THEN (rt0.c2 IN ()) ELSE TRIM(DISTINCT rt0.c1, rt0.c0) END, rt0.c1 ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((0.7501211686058713)|(((rt0.c3)&(rt0.c2))))) ORDER BY (((~ (rt0.c3)))IS(CAST(NULL AS NUMERIC))), ((rt0.c1)==(rt0.c1)) COLLATE RTRIM INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (rt0.c2) ORDER BY (((~ (rt0.c3)))IS(CAST(NULL AS NUMERIC))), ((rt0.c1)==(rt0.c1)) COLLATE RTRIM;
SELECT COUNT(*) FROM vt1, rt0 WHERE ((((vt1.c0, rt0.c3)) BETWEEN ((((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)), (((rt0.c0))==((rt0.c1))))) AND ((((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)), (rt0.c0 IN (rt0.c2)))))) ORDER BY NULL, (((vt1.c0, rt0.c1)) BETWEEN (((rt0.c3 IN (rt0.c2)), ((vt1.c0) NOT NULL))) AND ((((rt0.c2) IS TRUE), (+ (rt0.c1))))) ASC;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((vt1.c0, rt0.c3)) BETWEEN ((((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)), (((rt0.c0))==((rt0.c1))))) AND ((((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)), (rt0.c0 IN (rt0.c2)))))) ORDER BY CAST(((rt0.c1)LIKE(rt0.c2)) AS BLOB), rt0.c2  NULLS FIRST LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (-415841660);
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (-415841660) ORDER BY vt1.c0  NULLS LAST, ((TYPEOF(vt1.c0))AND((~ (vt1.c0)))) DESC LIMIT 3;
SELECT ALL MAX(rt0.c2) FROM vt1, rt0 WHERE ((((((((vt1.c0 IN (rt0.c0, x'c808')))OR(rt0.c0)))AND((- (rt0.c2)))))AND(((rt0.c0)>=(rt0.c1))))) ORDER BY (((x'' IN (rt0.c2)))*('o2*V!!G')) DESC  NULLS FIRST, ((TYPEOF(DISTINCT rt0.c1))/(((NULL)OR(rt0.c0)))) DESC;
SELECT ALL MAX(rt0.c2) FROM vt1, rt0 WHERE ((((((((vt1.c0 IN (rt0.c0)))OR(rt0.c0)))AND((- (rt0.c2)))))AND(((rt0.c0)>(rt0.c1))))) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1))) BETWEEN (CAST(rt0.c3 AS NUMERIC)) AND ((((vt1.c0)) NOT BETWEEN ((rt0.c1)) AND ((vt1.c0)))))  NULLS FIRST, CAST(rt0.c2 AS NUMERIC) COLLATE BINARY  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c1)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))) NOT BETWEEN ((rt0.c3 IN ())) AND ((+ (rt0.c1)))));
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c1)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))) NOT BETWEEN ((rt0.c3 IN ())) AND ((+ (rt0.c1))))) ORDER BY ((rt0.c3 COLLATE RTRIM)>=(CHANGES())) ASC;
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c1)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))) NOT BETWEEN ((rt0.c3 IN ())) AND ((+ (rt0.c1)))));
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c1)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))) NOT BETWEEN ((rt0.c3 IN ())) AND ((+ (rt0.c1))))) ORDER BY ((rt0.c3 COLLATE RTRIM)>=(CHANGES())) ASC;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (((rt0.c2 COLLATE NOCASE)-((((rt0.c2))>((vt1.c0))))));
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (((((rt0.c2 COLLATE NOCASE)-((((rt0.c2))>((vt1.c0))))))AND((((('E~')IS(rt0.c0))) NOT NULL)))) ORDER BY (- (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c1))))  NULLS LAST, ((vt1.c0)OR(CAST(vt1.c0 AS INTEGER))) ASC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE ((~ (rt0.c2)) COLLATE BINARY) ORDER BY (- (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c1))))  NULLS LAST, ((vt1.c0)OR(CAST(vt1.c0 AS INTEGER))) ASC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((UPPER(DISTINCT 0.5592552979202217))AND(CASE 'aLᨗXfzM'  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 END)))OR(rt0.c2 COLLATE BINARY)) WHERE (((CASE rt0.c2  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 END) NOTNULL));
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON ((((UPPER(DISTINCT 0.5592552979202217))AND(CASE 'aLᨗXfzM'  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 END)))OR(rt0.c2 COLLATE BINARY)) WHERE (((((CASE rt0.c2  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 END) NOTNULL))AND(0.5819802658143975))) ORDER BY json_array_length(((x'f89ec702')IS NOT(rt0.c3))), (((NOT ('O')))||(((vt1.c0) NOTNULL))) DESC  NULLS LAST, (((rt0.c2) NOTNULL) IN (((((rt0.c3)OR(rt0.c1)))OR(rt0.c3))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON ((((UPPER(DISTINCT 0.5592552979202217))AND(CASE 'aLᨗXfzM'  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 END)))OR(rt0.c2 COLLATE BINARY)) WHERE (vt1.c0 COLLATE BINARY) ORDER BY json_array_length(((x'f89ec702')IS NOT(rt0.c3))), (((NOT ('O')))||(((vt1.c0) NOTNULL))) DESC  NULLS LAST, (((rt0.c2) NOTNULL) IN (((((rt0.c3)OR(rt0.c1)))OR(rt0.c3))))  NULLS FIRST;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((UPPER(DISTINCT 0.5592552979202217))AND(CASE 'aLᨗXfzM'  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 END)))OR(rt0.c2 COLLATE BINARY)) WHERE (((CASE rt0.c2  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 END) NOTNULL));
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON ((((UPPER(DISTINCT 0.5592552979202217))AND(CASE 'aLᨗXfzM'  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 END)))OR(rt0.c2 COLLATE BINARY)) WHERE (((((CASE rt0.c2  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 END) NOTNULL))AND(0.5819802658143975))) ORDER BY json_array_length(((x'f89ec702')IS NOT(rt0.c3))), (((NOT ('O')))||(((vt1.c0) NOTNULL))) DESC  NULLS LAST, (((rt0.c2) NOTNULL) IN (((((rt0.c3)OR(rt0.c1)))OR(rt0.c3))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON ((((UPPER(DISTINCT 0.5592552979202217))AND(CASE 'aLᨗXfzM'  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 END)))OR(rt0.c2 COLLATE BINARY)) WHERE (vt1.c0 COLLATE BINARY) ORDER BY json_array_length(((x'f89ec702')IS NOT(rt0.c3))), (((NOT ('O')))||(((vt1.c0) NOTNULL))) DESC  NULLS LAST, (((rt0.c2) NOTNULL) IN (((((rt0.c3)OR(rt0.c1)))OR(rt0.c3))))  NULLS FIRST;
SELECT ALL * FROM rt0 NOT INDEXED WHERE (rt0.c1) ORDER BY DATETIME(json_insert(rt0.c3, rt0.c2, rt0.c2), ((rt0.c0)OR(rt0.c2)), rt0.c0 COLLATE RTRIM) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c1)AND(((((rt0.c0 IN ()), (- (rt0.c0))))>((((rt0.c2)/(rt0.c1)), ((rt0.c0) NOTNULL))))))) ORDER BY DATETIME(json_insert(rt0.c3, rt0.c2, rt0.c2), ((rt0.c0)OR(rt0.c2)), rt0.c0 COLLATE RTRIM) ASC;
SELECT ALL * FROM rt0 NOT INDEXED WHERE (rt0.c1) ORDER BY DATETIME(json_insert(rt0.c3, rt0.c2, rt0.c2), ((rt0.c0)OR(rt0.c2)), rt0.c0 COLLATE RTRIM) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c1)AND(((((rt0.c0 IN ()), (- (rt0.c0))))>((((rt0.c2)/(rt0.c1)), ((rt0.c0) NOTNULL))))))) ORDER BY DATETIME(json_insert(rt0.c3, rt0.c2, rt0.c2), ((rt0.c0)OR(rt0.c2)), rt0.c0 COLLATE RTRIM) ASC;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (((rt0.c3) ISNULL) COLLATE RTRIM) ORDER BY ((((rt0.c3) NOT BETWEEN (rt0.c0) AND (x'f6e9'))) NOT BETWEEN (((((((rt0.c3)OR(rt0.c3)))AND(vt1.c0)))OR(rt0.c1))) AND (((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))OR(rt0.c0))))  NULLS FIRST, CAST('1082644571' COLLATE NOCASE AS INTEGER)  NULLS FIRST, ((((((((((((rt0.c3)AND((- (rt0.c2)))))AND(((((((0x2b0e1c8f)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c0)))))AND(rt0.c3)))OR(rt0.c2)))OR(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c2 END)))OR(((rt0.c0) BETWEEN (rt0.c0) AND (vt1.c0)))) ASC;
SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((((rt0.c3) ISNULL) COLLATE RTRIM)AND((((vt1.c0 IN (vt1.c0, rt0.c0))) NOT NULL)))) ORDER BY ((((rt0.c3) NOT BETWEEN (rt0.c0) AND (x'f6e9'))) NOT BETWEEN (((((((rt0.c3)OR(rt0.c3)))AND(vt1.c0)))OR(rt0.c1))) AND (((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))OR(rt0.c0))))  NULLS FIRST, CAST('1082644571' COLLATE NOCASE AS INTEGER)  NULLS FIRST, ((((((((((((rt0.c3)AND((- (rt0.c2)))))AND(((((((722345103)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c0)))))AND(rt0.c3)))OR(rt0.c2)))OR(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c2 END)))OR(((rt0.c0) BETWEEN (rt0.c0) AND (vt1.c0)))) ASC LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM vt1, rt0 WHERE (((((rt0.c0)||(rt0.c1)))-(CAST(rt0.c2 AS BLOB)))) ORDER BY ((((rt0.c3) NOT BETWEEN (rt0.c0) AND (x'f6e9'))) NOT BETWEEN (((((((rt0.c3)OR(rt0.c3)))AND(vt1.c0)))OR(rt0.c1))) AND (((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))OR(rt0.c0))))  NULLS FIRST, CAST('1082644571' COLLATE NOCASE AS INTEGER)  NULLS FIRST, ((((((((((((rt0.c3)AND((- (rt0.c2)))))AND(((((((722345103)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c0)))))AND(rt0.c3)))OR(rt0.c2)))OR(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c2 END)))OR(((rt0.c0) BETWEEN (rt0.c0) AND (vt1.c0)))) ASC LIMIT 1;
SELECT COUNT(*) FROM vt1, rt0 WHERE (IFNULL(DISTINCT 0.7799926192873458, (('0.898194171623319')-(vt1.c0))));
SELECT COUNT(*) FROM vt1, rt0 WHERE (((IFNULL(DISTINCT 0.7799926192873458, (('0.898194171623319')-(vt1.c0))))AND(rt0.c2)));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(vt1.c0 COLLATE BINARY AS TEXT));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 COLLATE BINARY AS TEXT))AND((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN x'50b5' THEN vt1.c0 END))=((0.3347139097428101))))));
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((((CASE rt0.c1  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 END)AND(CASE WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c1 END)))OR(rt0.c1 COLLATE BINARY)) WHERE ((((rt0.c2 IN (rt0.c2)))<<((((rt0.c1, NULL)) NOT BETWEEN ((vt1.c0, rt0.c1)) AND ((rt0.c3, rt0.c1))))));
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((CASE rt0.c1  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 END)AND(CASE WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c1 END)))OR(rt0.c1 COLLATE BINARY)) WHERE ((((rt0.c2 IN (rt0.c2)))<<((((rt0.c1, NULL)) NOT BETWEEN ((vt1.c0, rt0.c1)) AND ((rt0.c3, rt0.c1)))))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))) IS TRUE) DESC INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((CASE rt0.c1  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 END)AND(CASE WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c1 END)))OR(rt0.c1 COLLATE BINARY)) WHERE (((((rt0.c3)+(rt0.c0))) NOT BETWEEN (((((((((((((rt0.c0)OR(vt1.c0)))OR(vt1.c0)))AND(rt0.c1)))OR(vt1.c0)))OR(0.9164249491853715)))AND(rt0.c1))) AND (-30752322))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))) IS TRUE) DESC;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((((CASE rt0.c1  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 END)AND(CASE WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c1 END)))OR(rt0.c1 COLLATE BINARY)) WHERE ((((rt0.c2 IN (rt0.c2)))<<((((rt0.c1, NULL)) NOT BETWEEN ((vt1.c0, rt0.c1)) AND ((rt0.c3, rt0.c1))))));
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((CASE rt0.c1  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 END)AND(CASE WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c1 END)))OR(rt0.c1 COLLATE BINARY)) WHERE ((((rt0.c2 IN (rt0.c2)))<<((((rt0.c1, NULL)) NOT BETWEEN ((vt1.c0, rt0.c1)) AND ((rt0.c3, rt0.c1)))))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))) IS TRUE) DESC INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((CASE rt0.c1  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 END)AND(CASE WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c1 END)))OR(rt0.c1 COLLATE BINARY)) WHERE (((((rt0.c3)+(rt0.c0))) NOT BETWEEN (((((((((((((rt0.c0)OR(vt1.c0)))OR(vt1.c0)))AND(rt0.c1)))OR(vt1.c0)))OR(0.9164249491853715)))AND(rt0.c1))) AND (-30752322))) ORDER BY ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))) IS TRUE) DESC;
SELECT ALL * FROM rt0, vt1 WHERE (((((((((((((rt0.c3)AND(x'16b4')))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))|(CASE vt1.c0  WHEN 0.7155171823725351 THEN rt0.c2 ELSE rt0.c0 END))) ORDER BY ((((((CASE rt0.c2  WHEN rt0.c1 THEN 0.466917341151566 WHEN vt1.c0 THEN rt0.c0 END)OR(((rt0.c3)AND(rt0.c1)))))OR(((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c2)))AND(vt1.c0)))AND(rt0.c1)))))AND(((0.03371136291115384)+('1837420419'))))  NULLS FIRST, CASE WHEN vt1.c0 COLLATE NOCASE THEN (rt0.c2 IN (vt1.c0)) WHEN (((rt0.c0, rt0.c2))>((vt1.c0, rt0.c3))) THEN (((vt1.c0, rt0.c3))==((vt1.c0, rt0.c3))) END DESC;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((((((((rt0.c3)AND(x'16b4')))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))|(CASE vt1.c0  WHEN 0.7155171823725351 THEN rt0.c2 ELSE rt0.c0 END))) ORDER BY vt1.c0 COLLATE RTRIM  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(vt1.c0 AS REAL)) ORDER BY vt1.c0 COLLATE RTRIM  NULLS FIRST LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE (((((((((((((rt0.c3)AND(x'16b4')))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))|(CASE vt1.c0  WHEN 0.7155171823725351 THEN rt0.c2 ELSE rt0.c0 END))) ORDER BY ((((((CASE rt0.c2  WHEN rt0.c1 THEN 0.466917341151566 WHEN vt1.c0 THEN rt0.c0 END)OR(((rt0.c3)AND(rt0.c1)))))OR(((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c2)))AND(vt1.c0)))AND(rt0.c1)))))AND(((0.03371136291115384)+('1837420419'))))  NULLS FIRST, CASE WHEN vt1.c0 COLLATE NOCASE THEN (rt0.c2 IN (vt1.c0)) WHEN (((rt0.c0, rt0.c2))>((vt1.c0, rt0.c3))) THEN (((vt1.c0, rt0.c3))==((vt1.c0, rt0.c3))) END DESC;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((((((((rt0.c3)AND(x'16b4')))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))|(CASE vt1.c0  WHEN 0.7155171823725351 THEN rt0.c2 ELSE rt0.c0 END))) ORDER BY vt1.c0 COLLATE RTRIM  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(vt1.c0 AS REAL)) ORDER BY vt1.c0 COLLATE RTRIM  NULLS FIRST LIMIT 1;
SELECT * FROM vt1, rt0 WHERE ((NOT (((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3))))) ORDER BY ((rt0.c1 COLLATE RTRIM)&((rt0.c1 IN (rt0.c3)))), ((((NULL) NOT NULL))IS NOT(vt1.c0 COLLATE RTRIM)) DESC  NULLS FIRST, 1668129397 ASC, ((((rt0.c1)AND(rt0.c0)))AND(x'')) COLLATE BINARY ASC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ((((NOT (((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3)))))AND(NULLIF(((rt0.c1)IS(rt0.c0)), rt0.c0)))) ORDER BY x'' DESC LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((NOT (((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3))))) ORDER BY ((rt0.c1 COLLATE RTRIM)&((rt0.c1 IN (rt0.c3)))), ((((NULL) NOT NULL))IS NOT(vt1.c0 COLLATE RTRIM)) DESC  NULLS FIRST, 1668129397 ASC, ((((rt0.c1)AND(rt0.c0)))AND(x'')) COLLATE BINARY ASC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (LOWER(DISTINCT NULL)) ORDER BY ((rt0.c2 COLLATE RTRIM)-('455756160' COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((LOWER(DISTINCT NULL))AND(((((((((((rt0.c0)OR(rt0.c1)))AND('1079279638')))AND(rt0.c3)))OR(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2))))))) ORDER BY (~ (((rt0.c2)+(rt0.c1)))) DESC LIMIT 0x1;
SELECT ALL * FROM rt0 WHERE (LOWER(DISTINCT NULL)) ORDER BY ((rt0.c2 COLLATE RTRIM)-('455756160' COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((LOWER(DISTINCT NULL))AND(((((((((((rt0.c0)OR(rt0.c1)))AND('1079279638')))AND(rt0.c3)))OR(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))))AND(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2))))))) ORDER BY (~ (((rt0.c2)+(rt0.c1)))) DESC LIMIT 0x1;
SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE (((rt0.c2 COLLATE RTRIM) NOT BETWEEN (rt0.c1 COLLATE RTRIM) AND (((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c2)))));
SELECT MAX(rt0.c3) FROM rt0, vt1 WHERE (((rt0.c2 COLLATE RTRIM) NOT BETWEEN (rt0.c1 COLLATE RTRIM) AND (((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c2))))) ORDER BY ((NULL) NOT BETWEEN (CAST(rt0.c0 AS NUMERIC)) AND (CAST(rt0.c0 AS TEXT)))  NULLS FIRST LIMIT 0x4 INTERSECT SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE (CASE (rt0.c3 IN ())  WHEN (((rt0.c3, rt0.c2, vt1.c0))<((rt0.c1, vt1.c0, rt0.c3))) THEN rt0.c0 COLLATE RTRIM WHEN ((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN (((rt0.c3)) BETWEEN ((rt0.c1)) AND ((rt0.c2))) WHEN CAST(vt1.c0 AS INTEGER) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c0 END END) ORDER BY ((NULL) NOT BETWEEN (CAST(rt0.c0 AS NUMERIC)) AND (CAST(rt0.c0 AS TEXT)))  NULLS FIRST LIMIT 4;
SELECT ALL COUNT(*) FROM rt0 CROSS JOIN vt1 ON CASE WHEN ((rt0.c2)*(rt0.c0)) THEN CAST(rt0.c1 AS BLOB) END WHERE (x'6a25d9');
SELECT ALL COUNT(*) FROM rt0 CROSS JOIN vt1 ON CASE WHEN ((rt0.c2)*(rt0.c0)) THEN CAST(rt0.c1 AS BLOB) END WHERE (((x'6a25d9')AND(((((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c1)))<>(((rt0.c2)+(rt0.c0))))))) LIMIT 1 INTERSECT SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON CASE WHEN ((rt0.c2)*(rt0.c0)) THEN CAST(rt0.c1 AS BLOB) END WHERE (((((((((((vt1.c0)OR(vt1.c0)))AND(rt0.c1)))AND(vt1.c0 COLLATE NOCASE)))OR(((rt0.c1)=(rt0.c1)))))OR(TRIM(DISTINCT x'29')))) LIMIT 1;
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE ((~ (highlight(rt0.c2, rt0.c2, vt1.c0, rt0.c1)))) ORDER BY CASE CAST(rt0.c1 AS REAL)  WHEN (vt1.c0 IN (NULL, rt0.c2)) THEN ((x'')<=(rt0.c3)) WHEN (+ (rt0.c1)) THEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)) WHEN ((rt0.c3)||(rt0.c1)) THEN 'j>' END  NULLS LAST, ((x'95d374') IS TRUE), (((rt0.c1 IN (rt0.c2)))-(vt1.c0))  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE ((((~ (highlight(rt0.c2, rt0.c2, vt1.c0, rt0.c1))))AND(((CASE rt0.c0  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 END) ISNULL)))) ORDER BY CASE CAST(rt0.c1 AS REAL)  WHEN (vt1.c0 IN (NULL, rt0.c2)) THEN ((x'')<=(rt0.c3)) WHEN (+ (rt0.c1)) THEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)) WHEN ((rt0.c3)||(rt0.c1)) THEN 'j>' END  NULLS LAST, ((x'95d374') IS TRUE), (((rt0.c1 IN (rt0.c2)))-(vt1.c0))  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE ((((((rt0.c2) NOT NULL), CASE WHEN rt0.c3 THEN rt0.c1 WHEN '䫱Gkly' THEN rt0.c1 END, ((rt0.c1)>=(vt1.c0))))>=(((~ (vt1.c0)), rt0.c1, ((((((rt0.c0)AND(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)))))) ORDER BY CASE CAST(rt0.c1 AS REAL)  WHEN (vt1.c0 IN (NULL, rt0.c2)) THEN ((x'')<=(rt0.c3)) WHEN (+ (rt0.c1)) THEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)) WHEN ((rt0.c3)||(rt0.c1)) THEN 'j>' END  NULLS LAST, ((x'95d374') IS TRUE), (((rt0.c1 IN (rt0.c2)))-(vt1.c0))  NULLS FIRST LIMIT 0;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (((rt0.c1 COLLATE BINARY) IS TRUE));
SELECT MIN(rt0.c0) FROM rt0 WHERE (((rt0.c1 COLLATE BINARY) IS TRUE)) ORDER BY (((rt0.c3, rt0.c3, rt0.c3, rt0.c3)) NOT BETWEEN (((rt0.c3 IN (rt0.c2)), ((rt0.c3)>(rt0.c2)), rt0.c3, ((rt0.c2)<<(rt0.c1)))) AND ((((rt0.c0)+(rt0.c2)), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)), CASE WHEN rt0.c0 THEN rt0.c2 END, ((((((rt0.c1)OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c3))))) ASC, (((('160429264') BETWEEN (rt0.c3) AND (rt0.c1))) BETWEEN (CASE rt0.c1  WHEN rt0.c2 THEN x'1ca40f' ELSE rt0.c3 END) AND (rt0.c2)) DESC LIMIT 0 INTERSECT SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (((x'e388') NOT BETWEEN ('-704264051') AND (SQLITE_COMPILEOPTION_GET(rt0.c1)))) ORDER BY (((rt0.c3, rt0.c3, rt0.c3, rt0.c3)) NOT BETWEEN (((rt0.c3 IN (rt0.c2)), ((rt0.c3)>(rt0.c2)), rt0.c3, ((rt0.c2)<<(rt0.c1)))) AND ((((rt0.c0)+(rt0.c2)), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)), CASE WHEN rt0.c0 THEN rt0.c2 END, ((((((rt0.c1)OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c3))))) ASC, (((('160429264') BETWEEN (rt0.c3) AND (rt0.c1))) BETWEEN (CASE rt0.c1  WHEN rt0.c2 THEN x'1ca40f' ELSE rt0.c3 END) AND (rt0.c2)) DESC LIMIT 0x0;
SELECT * FROM rt0 WHERE ((NOT (TYPEOF(DISTINCT rt0.c3)))) ORDER BY ((((rt0.c1)*(rt0.c0))) IS FALSE) ASC  NULLS LAST, (rt0.c1 COLLATE RTRIM IN ());
SELECT * FROM rt0 WHERE ((((NOT (TYPEOF(DISTINCT rt0.c3))))AND((((rt0.c0)||(rt0.c3)) IN ())))) ORDER BY ((((rt0.c1)*(rt0.c0))) IS FALSE) ASC  NULLS LAST, (rt0.c1 COLLATE RTRIM IN ()) LIMIT 1 INTERSECT SELECT * FROM rt0 WHERE ((((((rt0.c0, rt0.c1, rt0.c2))<>((rt0.c2, rt0.c0, 'IJeLk')))) NOT BETWEEN (CAST(rt0.c1 AS REAL)) AND (''))) ORDER BY ((((rt0.c1)*(rt0.c0))) IS FALSE) ASC  NULLS LAST, (rt0.c1 COLLATE RTRIM IN ()) LIMIT 0x1;
SELECT * FROM rt0 WHERE ((NOT (TYPEOF(DISTINCT rt0.c3)))) ORDER BY ((((rt0.c1)*(rt0.c0))) IS FALSE) ASC  NULLS LAST, (rt0.c1 COLLATE RTRIM IN ());
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((~ ('2018827746')));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((~ ('2018827746')));
SELECT * FROM vt1 WHERE (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM);
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM)AND(((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)>(NULL))))) ORDER BY (((((-97448687 IN (vt1.c0)))OR(SQLITE_VERSION())))OR(((vt1.c0) IS TRUE))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((0.1440159014061454) NOT BETWEEN (((vt1.c0)/(NULL))) AND (((vt1.c0)/(x'9011a6'))))) ORDER BY (((((0xfffffffffa310d11 IN (vt1.c0)))OR(SQLITE_VERSION())))OR(((vt1.c0) IS TRUE))) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM);
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM)AND(((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)>(NULL))))) ORDER BY (((((-97448687 IN (vt1.c0)))OR(SQLITE_VERSION())))OR(((vt1.c0) IS TRUE))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((0.1440159014061454) NOT BETWEEN (((vt1.c0)/(NULL))) AND (((vt1.c0)/(x'9011a6'))))) ORDER BY (((((0xfffffffffa310d11 IN (vt1.c0)))OR(SQLITE_VERSION())))OR(((vt1.c0) IS TRUE))) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (json_insert((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3))), ((rt0.c3)GLOB(rt0.c3)), CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 ELSE '2042696920' END, (+ (rt0.c0)))) ORDER BY (- ((((rt0.c0, x'11f2'))>=((rt0.c0, rt0.c1))))), CASE WHEN (- (rt0.c1)) THEN TOTAL_CHANGES() WHEN CAST(rt0.c1 AS INTEGER) THEN ((rt0.c2) NOT BETWEEN ('5') AND (rt0.c1)) END;
SELECT ALL * FROM rt0 WHERE (((json_insert((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3))), ((rt0.c3)GLOB(rt0.c3)), CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 ELSE '2042696920' END, (+ (rt0.c0))))AND((- (rt0.c1))))) ORDER BY (((rt0.c2, rt0.c3))==((rt0.c0, rt0.c0))) COLLATE NOCASE  NULLS LAST, IFNULL((+ (rt0.c2)), (- (rt0.c1))) DESC, (((((NOT (rt0.c0)))AND(((rt0.c0)>(rt0.c2)))))OR(NULLIF(rt0.c2, rt0.c3)))  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM rt0 WHERE ((((+ ('1339938603')))&(((rt0.c2)IS(rt0.c2))))) ORDER BY (((rt0.c2, rt0.c3))=((rt0.c0, rt0.c0))) COLLATE NOCASE  NULLS LAST, IFNULL((+ (rt0.c2)), (- (rt0.c1))) DESC, (((((NOT (rt0.c0)))AND(((rt0.c0)>(rt0.c2)))))OR(NULLIF(rt0.c2, rt0.c3)))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE (json_insert((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c3))), ((rt0.c3)GLOB(rt0.c3)), CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 ELSE '2042696920' END, (+ (rt0.c0)))) ORDER BY (- ((((rt0.c0, x'11f2'))>=((rt0.c0, rt0.c1))))), CASE WHEN (- (rt0.c1)) THEN TOTAL_CHANGES() WHEN CAST(rt0.c1 AS INTEGER) THEN ((rt0.c2) NOT BETWEEN ('5') AND (rt0.c1)) END;
SELECT * FROM rt0 INNER JOIN vt1 ON CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END COLLATE BINARY WHERE (((rt0.c3)-(0x57b0ebba)) COLLATE NOCASE);
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END COLLATE BINARY WHERE (((rt0.c3)-(0x57b0ebba)) COLLATE NOCASE) ORDER BY ABS(DISTINCT CASE 'KE'  WHEN NULL THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)  NULLS LAST, (((vt1.c0)+(x'e6')) IN (SQLITE_COMPILEOPTION_USED(rt0.c0))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END COLLATE BINARY WHERE ((((rt0.c3 IN (rt0.c2))) BETWEEN (CAST(vt1.c0 AS REAL)) AND ((rt0.c0 IN ())))) ORDER BY ABS(DISTINCT CASE 'KE'  WHEN NULL THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)  NULLS LAST, (((vt1.c0)+(x'e6')) IN (SQLITE_COMPILEOPTION_USED(rt0.c0))) DESC  NULLS FIRST;
SELECT * FROM rt0 INNER JOIN vt1 ON CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END COLLATE BINARY WHERE (((rt0.c3)-(0x57b0ebba)) COLLATE NOCASE);
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END COLLATE BINARY WHERE (((rt0.c3)-(0x57b0ebba)) COLLATE NOCASE) ORDER BY ABS(DISTINCT CASE 'KE'  WHEN NULL THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)  NULLS LAST, (((vt1.c0)+(x'e6')) IN (SQLITE_COMPILEOPTION_USED(rt0.c0))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END COLLATE BINARY WHERE ((((rt0.c3 IN (rt0.c2))) BETWEEN (CAST(vt1.c0 AS REAL)) AND ((rt0.c0 IN ())))) ORDER BY ABS(DISTINCT CASE 'KE'  WHEN NULL THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)  NULLS LAST, (((vt1.c0)+(x'e6')) IN (SQLITE_COMPILEOPTION_USED(rt0.c0))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE ((CAST(rt0.c1 AS NUMERIC) IN ()));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS NUMERIC) IN ()))AND((rt0.c1 IN (((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c2)), ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1))))))) ORDER BY (((((rt0.c3)&(rt0.c3))))!=(((~ (rt0.c1))))) DESC, TRIM((((NULL, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c1, vt1.c0)) AND ((rt0.c3, NULL, rt0.c2)))) ASC  NULLS LAST, (((((rt0.c2, rt0.c2, vt1.c0))==((rt0.c3, rt0.c2, rt0.c3))))-(rt0.c0)) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c0 COLLATE BINARY) ORDER BY (((((rt0.c3)&(rt0.c3))))<>(((~ (rt0.c1))))) DESC, TRIM((((NULL, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c1, vt1.c0)) AND ((rt0.c3, NULL, rt0.c2)))) ASC  NULLS LAST, (((((rt0.c2, rt0.c2, vt1.c0))=((rt0.c3, rt0.c2, rt0.c3))))-(rt0.c0));
SELECT ALL * FROM vt1, rt0 WHERE ((CAST(rt0.c1 AS NUMERIC) IN ()));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((CAST(rt0.c1 AS NUMERIC) IN ()))AND((rt0.c1 IN (((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c2)), ((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1))))))) ORDER BY (((((rt0.c3)&(rt0.c3))))!=(((~ (rt0.c1))))) DESC, TRIM((((NULL, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c1, vt1.c0)) AND ((rt0.c3, NULL, rt0.c2)))) ASC  NULLS LAST, (((((rt0.c2, rt0.c2, vt1.c0))==((rt0.c3, rt0.c2, rt0.c3))))-(rt0.c0)) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c0 COLLATE BINARY) ORDER BY (((((rt0.c3)&(rt0.c3))))<>(((~ (rt0.c1))))) DESC, TRIM((((NULL, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c1, vt1.c0)) AND ((rt0.c3, NULL, rt0.c2)))) ASC  NULLS LAST, (((((rt0.c2, rt0.c2, vt1.c0))=((rt0.c3, rt0.c2, rt0.c3))))-(rt0.c0));
SELECT * FROM vt1, rt0 WHERE (((NULLIF(4.26117718E8, '-116899011'))<=((NOT (rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((NULLIF(4.26117718E8, '-116899011'))<=((NOT (rt0.c1)))))AND(vt1.c0))) ORDER BY (((~ (rt0.c3)))AND(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c0 END)) ASC, CASE WHEN ((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN (rt0.c2 IN (vt1.c0, rt0.c2)) END INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (0.21473199742024995 COLLATE BINARY) ORDER BY (((~ (rt0.c3)))AND(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c0 END)) ASC, CASE WHEN ((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN (rt0.c2 IN (vt1.c0, rt0.c2)) END;
SELECT * FROM vt1, rt0 WHERE (((NULLIF(4.26117718E8, '-116899011'))<=((NOT (rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((NULLIF(4.26117718E8, '-116899011'))<=((NOT (rt0.c1)))))AND(vt1.c0))) ORDER BY (((~ (rt0.c3)))AND(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c0 END)) ASC, CASE WHEN ((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN (rt0.c2 IN (vt1.c0, rt0.c2)) END INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (0.21473199742024995 COLLATE BINARY) ORDER BY (((~ (rt0.c3)))AND(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c0 END)) ASC, CASE WHEN ((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c0)) THEN (rt0.c2 IN (vt1.c0, rt0.c2)) END;
SELECT MIN(rt0.c0) FROM vt1, rt0 WHERE (CAST(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0)) AS TEXT));
SELECT MIN(rt0.c0) FROM vt1, rt0 WHERE (((CAST(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0)) AS TEXT))AND(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 END COLLATE RTRIM))) ORDER BY (+ (rt0.c3))  NULLS FIRST, ABS(vt1.c0) COLLATE NOCASE DESC  NULLS FIRST INTERSECT SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (rt0.c0) ORDER BY (+ (rt0.c3))  NULLS FIRST, ABS(vt1.c0) COLLATE NOCASE DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((vt1.c0)<<(vt1.c0)) IN ()));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)<<(vt1.c0)) IN ()))AND(((vt1.c0 COLLATE NOCASE) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN NULL END) AND ((vt1.c0 IN (vt1.c0))))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (LOWER(DISTINCT (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))));
SELECT * FROM vt1 WHERE ((((vt1.c0)<<(vt1.c0)) IN ()));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)<<(vt1.c0)) IN ()))AND(((vt1.c0 COLLATE NOCASE) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN NULL END) AND ((vt1.c0 IN (vt1.c0))))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (LOWER(DISTINCT (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))));
SELECT ALL * FROM vt1, rt0 WHERE (((((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))OR(rt0.c3))) IS TRUE));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))OR(rt0.c3))) IS TRUE)) ORDER BY (+ ((vt1.c0 IN ()))) ASC, ((((((((rt0.c0)OR(rt0.c1)))AND(((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))))OR((~ (rt0.c1)))))AND(rt0.c1)) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c1) ORDER BY (+ ((vt1.c0 IN ()))) ASC, ((((((((rt0.c0)OR(rt0.c1)))AND(((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))))OR((~ (rt0.c1)))))AND(rt0.c1)) LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))OR(rt0.c3))) IS TRUE));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c2)))OR(rt0.c3))) IS TRUE)) ORDER BY (+ ((vt1.c0 IN ()))) ASC, ((((((((rt0.c0)OR(rt0.c1)))AND(((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))))OR((~ (rt0.c1)))))AND(rt0.c1)) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c1) ORDER BY (+ ((vt1.c0 IN ()))) ASC, ((((((((rt0.c0)OR(rt0.c1)))AND(((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))))OR((~ (rt0.c1)))))AND(rt0.c1)) LIMIT 0;
SELECT MAX(rt0.c2) FROM rt0 WHERE (NULL) ORDER BY CASE WHEN CAST(rt0.c1 AS BLOB) THEN ((((rt0.c2)AND(rt0.c1)))AND(0.3347139097428101)) ELSE NULL END DESC  NULLS FIRST, (((((rt0.c1, rt0.c2, rt0.c2)) BETWEEN ((rt0.c0, rt0.c3, rt0.c3)) AND ((rt0.c2, rt0.c1, rt0.c3))))<(rt0.c3 COLLATE NOCASE)) DESC  NULLS LAST;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((NULL)AND(CAST('g2q|x' AS REAL)))) ORDER BY ((rt0.c3)>=((((rt0.c0, rt0.c2, rt0.c3, rt0.c1, rt0.c1, rt0.c0, '-567182715')) BETWEEN ((rt0.c2, rt0.c3, rt0.c0, rt0.c3, rt0.c0, rt0.c1, rt0.c0)) AND ((rt0.c0, rt0.c3, rt0.c2, rt0.c3, rt0.c1, rt0.c1, rt0.c0))))) LIMIT 0;
SELECT MIN(vt1.c0) FROM vt1 NOT INDEXED WHERE (vt1.c0) ORDER BY (((vt1.c0 IN ())) NOT NULL)  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY (((vt1.c0 IN ())) NOT NULL)  NULLS FIRST LIMIT 0x0;
SELECT COUNT(*) FROM vt1, rt0 WHERE ((((('1304629726') NOT BETWEEN (vt1.c0) AND (rt0.c1)))%(rt0.c0))) ORDER BY UNICODE(LOWER(rt0.c3)) DESC  NULLS LAST, (((rt0.c2, '774386652', CAST(rt0.c1 AS INTEGER)))>=((LIKELIHOOD(DISTINCT vt1.c0, rt0.c2), SQLITE_COMPILEOPTION_GET(rt0.c2), ((rt0.c1) IS TRUE))));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((((('1304629726') NOT BETWEEN (vt1.c0) AND (rt0.c1)))%(rt0.c0)))AND(((CAST(rt0.c3 AS REAL)) IS TRUE)))) ORDER BY DATE(((rt0.c0)<<(x'c6')), CASE rt0.c2  WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END, ((NULL) NOTNULL), (vt1.c0 IN (rt0.c1, x'd8')), ((rt0.c3)>=(rt0.c2))) INTERSECT SELECT COUNT(*) FROM vt1, rt0 WHERE (((('AR', rt0.c2 COLLATE NOCASE, NULL))<>((CAST(rt0.c2 AS BLOB), CASE '1459663151'  WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c3 THEN NULL END, ((rt0.c3) IS TRUE))))) ORDER BY DATE(((rt0.c0)<<(x'c6')), CASE rt0.c2  WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END, ((NULL) NOTNULL), (vt1.c0 IN (rt0.c1, x'd8')), ((rt0.c3)>=(rt0.c2)));
SELECT ALL * FROM vt1, rt0 WHERE (rt0.c0) ORDER BY TRIM(DISTINCT rt0.c2 COLLATE RTRIM) ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c0) ORDER BY ((((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN '-1468222271' END)AND(0.4833156241955955)))OR((((vt1.c0, vt1.c0, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c0, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c2, rt0.c3))))) DESC, (((rt0.c3, rt0.c3)) BETWEEN (((((rt0.c3, rt0.c1, 0.07229598538525417, rt0.c3))<(('875598938', NULL, rt0.c0, NULL))), CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN NULL END)) AND ((CAST(rt0.c2 AS TEXT), CAST(vt1.c0 AS REAL)))) DESC, ((((((2.65752894E8)&(rt0.c1)))OR(((NULL) IS TRUE))))OR(CASE rt0.c3  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c1)>(vt1.c0)) IN (((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c1))))) ORDER BY ((((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN '-1468222271' END)AND(0.4833156241955955)))OR((((vt1.c0, vt1.c0, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c0, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c2, rt0.c3))))) DESC, (((rt0.c3, rt0.c3)) BETWEEN (((((rt0.c3, rt0.c1, 0.07229598538525417, rt0.c3))<(('875598938', NULL, rt0.c0, NULL))), CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN NULL END)) AND ((CAST(rt0.c2 AS TEXT), CAST(vt1.c0 AS REAL)))) DESC, ((((((2.65752894E8)&(rt0.c1)))OR(((NULL) IS TRUE))))OR(CASE rt0.c3  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END)) LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (rt0.c0) ORDER BY TRIM(DISTINCT rt0.c2 COLLATE RTRIM) ASC;
SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c0) ORDER BY ((((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN '-1468222271' END)AND(0.4833156241955955)))OR((((vt1.c0, vt1.c0, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c0, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c2, rt0.c3))))) DESC, (((rt0.c3, rt0.c3)) BETWEEN (((((rt0.c3, rt0.c1, 0.07229598538525417, rt0.c3))<(('875598938', NULL, rt0.c0, NULL))), CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN NULL END)) AND ((CAST(rt0.c2 AS TEXT), CAST(vt1.c0 AS REAL)))) DESC, ((((((2.65752894E8)&(rt0.c1)))OR(((NULL) IS TRUE))))OR(CASE rt0.c3  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c1)>(vt1.c0)) IN (((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c1))))) ORDER BY ((((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN '-1468222271' END)AND(0.4833156241955955)))OR((((vt1.c0, vt1.c0, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c0, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c2, rt0.c3))))) DESC, (((rt0.c3, rt0.c3)) BETWEEN (((((rt0.c3, rt0.c1, 0.07229598538525417, rt0.c3))<(('875598938', NULL, rt0.c0, NULL))), CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN NULL END)) AND ((CAST(rt0.c2 AS TEXT), CAST(vt1.c0 AS REAL)))) DESC, ((((((2.65752894E8)&(rt0.c1)))OR(((NULL) IS TRUE))))OR(CASE rt0.c3  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END)) LIMIT 1;
SELECT ALL * FROM rt0 WHERE (CASE ((((rt0.c2)OR(rt0.c0)))OR(rt0.c2))  WHEN ((rt0.c2)>=(rt0.c2)) THEN (rt0.c1 IN (rt0.c0)) ELSE ((((rt0.c2)OR(rt0.c3)))OR(x'7a')) END) ORDER BY ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c1 END) NOT NULL) DESC  NULLS LAST;
SELECT * FROM rt0 WHERE (CASE ((((rt0.c2)OR(rt0.c0)))OR(rt0.c2))  WHEN ((rt0.c2)>=(rt0.c2)) THEN (rt0.c1 IN (rt0.c0)) ELSE ((((rt0.c2)OR(rt0.c3)))OR(x'7a')) END) ORDER BY ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c1 END) NOT NULL) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM rt0 WHERE (CASE ((((rt0.c2)OR(rt0.c0)))OR(rt0.c2))  WHEN ((rt0.c2)>=(rt0.c2)) THEN (rt0.c1 IN (rt0.c0)) ELSE ((((rt0.c2)OR(rt0.c3)))OR(x'7a')) END) ORDER BY ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c1 END) NOT NULL) DESC  NULLS LAST;
SELECT * FROM rt0 WHERE (CASE ((((rt0.c2)OR(rt0.c0)))OR(rt0.c2))  WHEN ((rt0.c2)>=(rt0.c2)) THEN (rt0.c1 IN (rt0.c0)) ELSE ((((rt0.c2)OR(rt0.c3)))OR(x'7a')) END) ORDER BY ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c1 END) NOT NULL) DESC  NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM rt0 INNER JOIN vt1 ON rtreenode((+ (rt0.c1)), ((rt0.c0)IS(rt0.c2))) WHERE (((rt0.c0) IS TRUE)) ORDER BY rt0.c2  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0 INNER JOIN vt1 ON rtreenode((+ (rt0.c1)), ((rt0.c0)IS(rt0.c2))) WHERE (((rt0.c0) IS TRUE)) ORDER BY rt0.c2  NULLS LAST INTERSECT SELECT COUNT(*) FROM rt0 INNER JOIN vt1 ON rtreenode((+ (rt0.c1)), ((rt0.c0)IS(rt0.c2))) WHERE (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c3)) COLLATE BINARY) ORDER BY rt0.c2  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (-1.982442086E9) ORDER BY (((((vt1.c0, rt0.c2, rt0.c3))<=((rt0.c1, rt0.c2, rt0.c1))))IS NOT(((rt0.c2)<=(rt0.c1)))) ASC;
SELECT * FROM vt1, rt0 WHERE (-1.982442086E9) ORDER BY (((((vt1.c0, rt0.c2, rt0.c3))<=((rt0.c1, rt0.c2, rt0.c1))))IS NOT(((rt0.c2)<=(rt0.c1)))) ASC;
SELECT * FROM vt1, rt0 WHERE (-1.982442086E9) ORDER BY (((((vt1.c0, rt0.c2, rt0.c3))<=((rt0.c1, rt0.c2, rt0.c1))))IS NOT(((rt0.c2)<=(rt0.c1)))) ASC;
SELECT * FROM vt1, rt0 WHERE (-1.982442086E9) ORDER BY (((((vt1.c0, rt0.c2, rt0.c3))<=((rt0.c1, rt0.c2, rt0.c1))))IS NOT(((rt0.c2)<=(rt0.c1)))) ASC;
SELECT * FROM vt1 WHERE (((((NULL) NOT NULL)) NOT BETWEEN ('1e500') AND ((~ (vt1.c0))))) ORDER BY CASE WHEN CASE WHEN vt1.c0 THEN NULL END THEN CAST(4.1795363E8 AS REAL) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0x1402bf7f WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN (- (vt1.c0)) WHEN ((vt1.c0)&('886179703')) THEN '勉Cy' END ASC  NULLS FIRST, ((((((vt1.c0) ISNULL))AND(vt1.c0 COLLATE RTRIM)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC  NULLS LAST, (NOT (((vt1.c0)>(vt1.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((NULL) NOT NULL)) NOT BETWEEN ('1e500') AND ((~ (vt1.c0))))) ORDER BY (+ (((vt1.c0)>=(vt1.c0)))) DESC  NULLS FIRST, ((((vt1.c0)>=(vt1.c0))) NOT BETWEEN ('t') AND (0.07369053634357414)) ASC, (((CAST(vt1.c0 AS NUMERIC), '!GX[] IG'))>=((((vt1.c0)-(vt1.c0)), CAST(vt1.c0 AS BLOB)))) DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC)) ORDER BY (+ (((vt1.c0)>=(vt1.c0)))) DESC  NULLS FIRST, ((((vt1.c0)>=(vt1.c0))) NOT BETWEEN ('t') AND (0.07369053634357414)) ASC, (((CAST(vt1.c0 AS NUMERIC), '!GX[] IG'))>=((((vt1.c0)-(vt1.c0)), CAST(vt1.c0 AS BLOB)))) DESC;
SELECT * FROM vt1 WHERE (((((NULL) NOT NULL)) NOT BETWEEN ('1e500') AND ((~ (vt1.c0))))) ORDER BY CASE WHEN CASE WHEN vt1.c0 THEN NULL END THEN CAST(4.1795363E8 AS REAL) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0x1402bf7f WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN (- (vt1.c0)) WHEN ((vt1.c0)&('886179703')) THEN '勉Cy' END ASC  NULLS FIRST, ((((((vt1.c0) ISNULL))AND(vt1.c0 COLLATE RTRIM)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC  NULLS LAST, (NOT (((vt1.c0)>(vt1.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((NULL) NOT NULL)) NOT BETWEEN ('1e500') AND ((~ (vt1.c0))))) ORDER BY (+ (((vt1.c0)>=(vt1.c0)))) DESC  NULLS FIRST, ((((vt1.c0)>=(vt1.c0))) NOT BETWEEN ('t') AND (0.07369053634357414)) ASC, (((CAST(vt1.c0 AS NUMERIC), '!GX[] IG'))>=((((vt1.c0)-(vt1.c0)), CAST(vt1.c0 AS BLOB)))) DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC)) ORDER BY (+ (((vt1.c0)>=(vt1.c0)))) DESC  NULLS FIRST, ((((vt1.c0)>=(vt1.c0))) NOT BETWEEN ('t') AND (0.07369053634357414)) ASC, (((CAST(vt1.c0 AS NUMERIC), '!GX[] IG'))>=((((vt1.c0)-(vt1.c0)), CAST(vt1.c0 AS BLOB)))) DESC;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (rt0.c2);
SELECT MAX(rt0.c1) FROM rt0 WHERE (((rt0.c2)AND(CASE (rt0.c0 IN ())  WHEN ((((((rt0.c0)AND(rt0.c0)))OR(rt0.c1)))AND(x'')) THEN rt0.c0 WHEN rt0.c2 COLLATE RTRIM THEN TRIM(DISTINCT rt0.c3) ELSE LOWER(rt0.c1) END))) ORDER BY (- (((rt0.c0) NOTNULL))) ASC, ((((((((((rt0.c1)AND(0X79c114d8)))OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c1)))OR('1236187703')) COLLATE RTRIM, SQLITE_VERSION() DESC  NULLS FIRST INTERSECT SELECT MAX(rt0.c1) FROM rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c3))) BETWEEN (((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c1))) AND (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c3 END))) ORDER BY (- (((rt0.c0) NOTNULL))) ASC, ((((((((((rt0.c1)AND(2042696920)))OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c1)))OR('1236187703')) COLLATE RTRIM, SQLITE_VERSION() DESC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c3)|(rt0.c3)))<=((~ (rt0.c2))))) ORDER BY rt0.c1 DESC  NULLS LAST, (((rt0.c0 IN ()))+((((vt1.c0, rt0.c3, '0O7.', vt1.c0)) NOT BETWEEN ((rt0.c1, rt0.c3, NULL, vt1.c0)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c0))))) DESC  NULLS FIRST, COALESCE(((vt1.c0)IS NOT(rt0.c0)), CAST(rt0.c3 AS NUMERIC))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c3)|(rt0.c3)))<=((~ (rt0.c2))))) ORDER BY rt0.c1 DESC  NULLS LAST, (((rt0.c0 IN ()))+((((vt1.c0, rt0.c3, '0O7.', vt1.c0)) NOT BETWEEN ((rt0.c1, rt0.c3, NULL, vt1.c0)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c0))))) DESC  NULLS FIRST, COALESCE(((vt1.c0)IS NOT(rt0.c0)), CAST(rt0.c3 AS NUMERIC))  NULLS LAST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (CASE CAST(rt0.c0 AS TEXT)  WHEN ((((((vt1.c0)AND(rt0.c3)))OR(rt0.c0)))AND(1.339938603E9)) THEN x'f5ae' WHEN ((rt0.c3) IS FALSE) THEN ((((((rt0.c3)OR(rt0.c0)))OR('2')))OR(rt0.c0)) WHEN (((rt0.c0))>((rt0.c1))) THEN (rt0.c2 IN (rt0.c3, rt0.c1, rt0.c1)) WHEN rt0.c3 COLLATE BINARY THEN (rt0.c3 IN (rt0.c0)) ELSE (((rt0.c1, rt0.c3)) NOT BETWEEN ((rt0.c1, vt1.c0)) AND ((rt0.c0, rt0.c3))) END) ORDER BY rt0.c1 DESC  NULLS LAST, (((rt0.c0 IN ()))+((((vt1.c0, rt0.c3, '0O7.', vt1.c0)) NOT BETWEEN ((rt0.c1, rt0.c3, NULL, vt1.c0)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c0))))) DESC  NULLS FIRST, COALESCE(((vt1.c0)IS NOT(rt0.c0)), CAST(rt0.c3 AS NUMERIC))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c3)|(rt0.c3)))<=((~ (rt0.c2))))) ORDER BY rt0.c1 DESC  NULLS LAST, (((rt0.c0 IN ()))+((((vt1.c0, rt0.c3, '0O7.', vt1.c0)) NOT BETWEEN ((rt0.c1, rt0.c3, NULL, vt1.c0)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c0))))) DESC  NULLS FIRST, COALESCE(((vt1.c0)IS NOT(rt0.c0)), CAST(rt0.c3 AS NUMERIC))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c3)|(rt0.c3)))<=((~ (rt0.c2))))) ORDER BY rt0.c1 DESC  NULLS LAST, (((rt0.c0 IN ()))+((((vt1.c0, rt0.c3, '0O7.', vt1.c0)) NOT BETWEEN ((rt0.c1, rt0.c3, NULL, vt1.c0)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c0))))) DESC  NULLS FIRST, COALESCE(((vt1.c0)IS NOT(rt0.c0)), CAST(rt0.c3 AS NUMERIC))  NULLS LAST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (CASE CAST(rt0.c0 AS TEXT)  WHEN ((((((vt1.c0)AND(rt0.c3)))OR(rt0.c0)))AND(1.339938603E9)) THEN x'f5ae' WHEN ((rt0.c3) IS FALSE) THEN ((((((rt0.c3)OR(rt0.c0)))OR('2')))OR(rt0.c0)) WHEN (((rt0.c0))>((rt0.c1))) THEN (rt0.c2 IN (rt0.c3, rt0.c1, rt0.c1)) WHEN rt0.c3 COLLATE BINARY THEN (rt0.c3 IN (rt0.c0)) ELSE (((rt0.c1, rt0.c3)) NOT BETWEEN ((rt0.c1, vt1.c0)) AND ((rt0.c0, rt0.c3))) END) ORDER BY rt0.c1 DESC  NULLS LAST, (((rt0.c0 IN ()))+((((vt1.c0, rt0.c3, '0O7.', vt1.c0)) NOT BETWEEN ((rt0.c1, rt0.c3, NULL, vt1.c0)) AND ((vt1.c0, rt0.c1, rt0.c0, rt0.c0))))) DESC  NULLS FIRST, COALESCE(((vt1.c0)IS NOT(rt0.c0)), CAST(rt0.c3 AS NUMERIC))  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((((((rt0.c3)OR(rt0.c1)))OR(rt0.c0)))GLOB((((rt0.c1))>=((rt0.c3))))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c3)OR(rt0.c1)))OR(rt0.c0)))GLOB((((rt0.c1))>=((rt0.c3))))))AND(((LTRIM(NULL, rt0.c2))*(((rt0.c3)<<(rt0.c1))))))) ORDER BY (CASE rt0.c2  WHEN rt0.c0 THEN rt0.c0 WHEN 'TRUE' THEN rt0.c2 ELSE rt0.c2 END IN (((rt0.c1) NOTNULL))), ((rt0.c1)<<(CAST(rt0.c0 AS TEXT))) DESC  NULLS FIRST, json_array_length(((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c3)), ((rt0.c1)<(rt0.c1))) ASC  NULLS FIRST LIMIT 0x3;
SELECT ALL * FROM rt0 WHERE (((((((rt0.c3)OR(rt0.c1)))OR(rt0.c0)))GLOB((((rt0.c1))>=((rt0.c3))))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c3)OR(rt0.c1)))OR(rt0.c0)))GLOB((((rt0.c1))>=((rt0.c3))))))AND(((LTRIM(NULL, rt0.c2))*(((rt0.c3)<<(rt0.c1))))))) ORDER BY (CASE rt0.c2  WHEN rt0.c0 THEN rt0.c0 WHEN 'TRUE' THEN rt0.c2 ELSE rt0.c2 END IN (((rt0.c1) NOTNULL))), ((rt0.c1)<<(CAST(rt0.c0 AS TEXT))) DESC  NULLS FIRST, json_array_length(((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c3)), ((rt0.c1)<(rt0.c1))) ASC  NULLS FIRST LIMIT 0x3;
SELECT COUNT(*) FROM rt0, vt1 WHERE ((('498115381') BETWEEN (LIKELIHOOD(rt0.c3, rt0.c2)) AND (((((((rt0.c2)AND(rt0.c0)))AND(rt0.c2)))AND(rt0.c1))))) ORDER BY (+ (((((rt0.c0)OR(rt0.c1)))OR(rt0.c3))));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((('498115381') BETWEEN (LIKELIHOOD(rt0.c3, rt0.c2)) AND (((((((rt0.c2)AND(rt0.c0)))AND(rt0.c2)))AND(rt0.c1))))) ORDER BY (+ (((((rt0.c0)OR(rt0.c1)))OR(rt0.c3))));
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (load_extension(TRIM(DISTINCT 0.06393541032064987, rt0.c0))) ORDER BY (((((((((((+ (rt0.c2)))OR(((rt0.c1)LIKE(rt0.c0)))))OR(((rt0.c0)>>(rt0.c0)))))OR(rt0.c3)))OR((+ (rt0.c3)))))AND((((rt0.c1)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2)))))  NULLS LAST, CASE WHEN rt0.c2 COLLATE NOCASE THEN rt0.c0 COLLATE NOCASE WHEN NULL THEN CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN 0.3815789029375889 WHEN rt0.c2 THEN NULL WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c3 END WHEN ((rt0.c0)AND(rt0.c3)) THEN CAST(rt0.c1 AS REAL) END  NULLS LAST;
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (load_extension(TRIM(DISTINCT 0.06393541032064987, rt0.c0))) ORDER BY (CASE WHEN rt0.c1 THEN rt0.c2 END IN (LIKELIHOOD(rt0.c2, rt0.c1))) DESC  NULLS LAST, ((rt0.c1)||(rt0.c0)) COLLATE NOCASE ASC  NULLS LAST INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (CASE IFNULL(rt0.c3, rt0.c2)  WHEN ((rt0.c2) IS FALSE) THEN (NOT (rt0.c2)) WHEN ((rt0.c3)||(rt0.c1)) THEN (rt0.c3 IN ()) WHEN NULL THEN '-353126543' ELSE (rt0.c0 IN (rt0.c2)) END) ORDER BY (CASE WHEN rt0.c1 THEN rt0.c2 END IN (LIKELIHOOD(rt0.c2, rt0.c1))) DESC  NULLS LAST, ((rt0.c1)||(rt0.c0)) COLLATE NOCASE ASC  NULLS LAST;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c3)) COLLATE NOCASE);
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c3)) COLLATE NOCASE) LIMIT 0X4 INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (rt0.c2) LIMIT 0X4;
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((('**xk?')<<(8.30243475E8))) IS FALSE));
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((((('**xk?')<<(8.30243475E8))) IS FALSE))AND(CAST(((('|x0'))>=((vt1.c0))) AS REAL))));
SELECT * FROM rt0 WHERE (((((rt0.c2)<(0.1437223703735555))) BETWEEN (rt0.c1) AND (rt0.c0))) ORDER BY ((((((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c0)))OR(CAST(rt0.c2 AS NUMERIC))), ((((rt0.c0)<=(rt0.c2)))<<(((rt0.c3)<>(rt0.c2)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c2)<(-3.8562776296264447))) BETWEEN (rt0.c1) AND (rt0.c0))) ORDER BY ((((((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c0)))OR(CAST(rt0.c2 AS NUMERIC))), ((((rt0.c0)<=(rt0.c2)))<<(((rt0.c3)!=(rt0.c2)))) DESC  NULLS LAST LIMIT 0x0;
SELECT * FROM rt0 WHERE (((((rt0.c2)<(0.1437223703735555))) BETWEEN (rt0.c1) AND (rt0.c0))) ORDER BY ((((((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c0)))OR(CAST(rt0.c2 AS NUMERIC))), ((((rt0.c0)<=(rt0.c2)))<<(((rt0.c3)<>(rt0.c2)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c2)<(-3.8562776296264447))) BETWEEN (rt0.c1) AND (rt0.c0))) ORDER BY ((((((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c0)))OR(CAST(rt0.c2 AS NUMERIC))), ((((rt0.c0)<=(rt0.c2)))<<(((rt0.c3)!=(rt0.c2)))) DESC  NULLS LAST LIMIT 0x0;
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (CASE WHEN ((((((rt0.c3)AND(vt1.c0)))OR(rt0.c0)))AND(rt0.c0)) THEN (((rt0.c1, rt0.c1, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c0, rt0.c3, '-1567722433', rt0.c1)) AND ((rt0.c0, rt0.c0, rt0.c3, rt0.c2))) END);
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (((CASE WHEN ((((((rt0.c3)AND(vt1.c0)))OR(rt0.c0)))AND(rt0.c0)) THEN (((rt0.c1, rt0.c1, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c0, rt0.c3, '-1567722433', rt0.c1)) AND ((rt0.c0, rt0.c0, rt0.c3, rt0.c2))) END)AND((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c3)))) IS TRUE)))) INTERSECT SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (((((((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c1)))OR((+ (rt0.c0)))))AND(rt0.c1)))AND(((rt0.c0)>(rt0.c1)))));
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ((((rt0.c3, rt0.c3, x'90', NULL)) NOT BETWEEN (((((rt0.c1, vt1.c0))<((rt0.c0, rt0.c2))), rt0.c2, NULL, (('%	OsｳO') NOT NULL))) AND ((vt1.c0 COLLATE BINARY, '!' COLLATE BINARY, (rt0.c0 IN (rt0.c2)), (((rt0.c0, rt0.c0))=((rt0.c0, rt0.c2))))))) ORDER BY LOWER(DISTINCT COALESCE(DISTINCT rt0.c0, rt0.c1)), rt0.c1  NULLS LAST;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c3, rt0.c3, x'90', NULL)) NOT BETWEEN (((((rt0.c1, vt1.c0))<((rt0.c0, rt0.c2))), rt0.c2, NULL, (('%	OsｳO') NOT NULL))) AND ((vt1.c0 COLLATE BINARY, '!' COLLATE BINARY, (rt0.c0 IN (rt0.c2)), (((rt0.c0, rt0.c0))==((rt0.c0, rt0.c2)))))))AND(CAST(CAST(vt1.c0 AS NUMERIC) AS REAL)))) ORDER BY -1.253896892E9 COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (CAST(rt0.c3 AS REAL) COLLATE RTRIM) ORDER BY -1.253896892E9 COLLATE BINARY ASC  NULLS LAST;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ((((rt0.c3, rt0.c3, x'90', NULL)) NOT BETWEEN (((((rt0.c1, vt1.c0))<((rt0.c0, rt0.c2))), rt0.c2, NULL, (('%	OsｳO') NOT NULL))) AND ((vt1.c0 COLLATE BINARY, '!' COLLATE BINARY, (rt0.c0 IN (rt0.c2)), (((rt0.c0, rt0.c0))=((rt0.c0, rt0.c2))))))) ORDER BY LOWER(DISTINCT COALESCE(DISTINCT rt0.c0, rt0.c1)), rt0.c1  NULLS LAST;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c3, rt0.c3, x'90', NULL)) NOT BETWEEN (((((rt0.c1, vt1.c0))<((rt0.c0, rt0.c2))), rt0.c2, NULL, (('%	OsｳO') NOT NULL))) AND ((vt1.c0 COLLATE BINARY, '!' COLLATE BINARY, (rt0.c0 IN (rt0.c2)), (((rt0.c0, rt0.c0))==((rt0.c0, rt0.c2)))))))AND(CAST(CAST(vt1.c0 AS NUMERIC) AS REAL)))) ORDER BY -1.253896892E9 COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (CAST(rt0.c3 AS REAL) COLLATE RTRIM) ORDER BY -1.253896892E9 COLLATE BINARY ASC  NULLS LAST;
SELECT COUNT(*) FROM vt1, rt0 WHERE (((((((vt1.c0)AND(rt0.c0)))AND(rt0.c3))) IS FALSE)) ORDER BY (((((rt0.c3, rt0.c0))==((rt0.c1, rt0.c0))))||(CAST(rt0.c1 AS NUMERIC))) DESC  NULLS FIRST, '-732813397' COLLATE RTRIM, (~ ((rt0.c2 IN (vt1.c0))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((((((vt1.c0)AND(rt0.c0)))AND(rt0.c3))) IS FALSE))AND(rt0.c2))) ORDER BY ((vt1.c0)<=(((vt1.c0)&(rt0.c3)))) ASC  NULLS FIRST, rt0.c0  NULLS LAST;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (((((rt0.c0) NOTNULL))GLOB(NULLIF(rt0.c3, rt0.c0)))) ORDER BY CASE ((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c2))  WHEN 0.2795279676558975 THEN UNICODE(vt1.c0) WHEN vt1.c0 COLLATE RTRIM THEN LIKELIHOOD(DISTINCT vt1.c0, rt0.c1) ELSE ((rt0.c3)>(rt0.c3)) END DESC  NULLS LAST, ((CAST(vt1.c0 AS REAL)) NOT NULL)  NULLS FIRST, (((rt0.c2 IN (vt1.c0)))||(((rt0.c3) BETWEEN (rt0.c1) AND ('4B')))), CAST((+ (vt1.c0)) AS REAL);
SELECT DISTINCT MIN(rt0.c1) FROM rt0, vt1 WHERE (((((((rt0.c0) NOTNULL))GLOB(NULLIF(rt0.c3, rt0.c0))))AND(((((((((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c1)))AND(NULL COLLATE RTRIM)))AND(((((((rt0.c3)OR(vt1.c0)))OR(vt1.c0)))OR(rt0.c3)))))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END))))) ORDER BY CASE ((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c2))  WHEN 0.2795279676558975 THEN UNICODE(vt1.c0) WHEN vt1.c0 COLLATE RTRIM THEN LIKELIHOOD(DISTINCT vt1.c0, rt0.c1) ELSE ((rt0.c3)>(rt0.c3)) END DESC  NULLS LAST, ((CAST(vt1.c0 AS REAL)) NOT NULL)  NULLS FIRST, (((rt0.c2 IN (vt1.c0)))||(((rt0.c3) BETWEEN (rt0.c1) AND ('4B')))), CAST((+ (vt1.c0)) AS REAL);
SELECT MAX(rt0.c1) FROM rt0 WHERE (CASE WHEN 0.7822042908916089 THEN CASE rt0.c0  WHEN rt0.c0 THEN 0xffffffff92ad2429 END ELSE ((((rt0.c1)AND(rt0.c2)))OR(rt0.c0)) END) ORDER BY ((((rt0.c2)-(rt0.c3)))-(((((rt0.c0)OR(rt0.c3)))AND(rt0.c2)))) DESC;
SELECT MAX(rt0.c1) FROM rt0 WHERE (((CASE WHEN 0.7822042908916089 THEN CASE rt0.c0  WHEN rt0.c0 THEN 0xffffffff92ad2429 END ELSE ((((rt0.c1)AND(rt0.c2)))OR(rt0.c0)) END)AND(((((rt0.c1) ISNULL)) NOT BETWEEN (((rt0.c0)*('t 
-g~b'))) AND (((rt0.c3) IS FALSE)))))) ORDER BY ((((rt0.c2)-(rt0.c3)))-(((((rt0.c0)OR(rt0.c3)))AND(rt0.c2)))) DESC;
SELECT ALL COUNT(*) FROM rt0 INNER JOIN vt1 ON ((+ (rt0.c0)) IN (CASE WHEN rt0.c3 THEN rt0.c3 ELSE vt1.c0 END)) WHERE (((((((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c1)))IS(CAST(x'' AS BLOB))));
SELECT DISTINCT COUNT(*) FROM rt0 INNER JOIN vt1 ON ((+ (rt0.c0)) IN (CASE WHEN rt0.c3 THEN rt0.c3 ELSE vt1.c0 END)) WHERE (((((((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c1)))IS(CAST(x'' AS BLOB)))) LIMIT 0x1;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ('.' COLLATE NOCASE) ORDER BY ((CAST('-1066686250' AS BLOB)) BETWEEN (((((((rt0.c3)OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1))) AND (CASE WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 END)) DESC;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE ((('.' COLLATE NOCASE)AND(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c1)) COLLATE NOCASE))) ORDER BY ((CAST('-1066686250' AS BLOB)) BETWEEN (((((((rt0.c3)OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1))) AND (CASE WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 END)) DESC LIMIT 0x1;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ('.' COLLATE NOCASE) ORDER BY ((CAST('-1066686250' AS BLOB)) BETWEEN (((((((rt0.c3)OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1))) AND (CASE WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 END)) DESC;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE ((('.' COLLATE NOCASE)AND(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c1)) COLLATE NOCASE))) ORDER BY ((CAST('-1066686250' AS BLOB)) BETWEEN (((((((rt0.c3)OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1))) AND (CASE WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 END)) DESC LIMIT 0x1;
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (((((rt0.c0 IN (rt0.c1))))<(((- (rt0.c2)))))) ORDER BY rt0.c0;
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (((((rt0.c0 IN (rt0.c1))))<(((- (rt0.c2)))))) ORDER BY ((((x'b5c2')+(0.9257786789627817))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))) AND (CAST(rt0.c0 AS BLOB))) ASC  NULLS LAST INTERSECT SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (((((((((((((((((vt1.c0)AND(x'')))AND(rt0.c2)))OR(rt0.c0)))AND(vt1.c0)))AND(rt0.c0)))AND(vt1.c0)))AND(NULL)))AND(((vt1.c0)<=(rt0.c0))))) ORDER BY ((((x'b5c2')+(0.9257786789627817))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))) AND (CAST(rt0.c0 AS BLOB))) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (((((rt0.c1) BETWEEN ('839021629') AND (rt0.c2))) NOT BETWEEN ((rt0.c2 IN ())) AND (0.7903594102307057)));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c1) BETWEEN ('839021629') AND (rt0.c2))) NOT BETWEEN ((rt0.c2 IN ())) AND (0.7903594102307057)))AND(((((((rt0.c2)IS NOT(rt0.c0)))AND('-1021259545')))AND(((rt0.c0) IS FALSE))))));
SELECT * FROM rt0 WHERE (((((rt0.c1) BETWEEN ('839021629') AND (rt0.c2))) NOT BETWEEN ((rt0.c2 IN ())) AND (0.7903594102307057)));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c1) BETWEEN ('839021629') AND (rt0.c2))) NOT BETWEEN ((rt0.c2 IN ())) AND (0.7903594102307057)))AND(((((((rt0.c2)IS NOT(rt0.c0)))AND('-1021259545')))AND(((rt0.c0) IS FALSE))))));
SELECT ALL * FROM vt1, rt0 WHERE (LIKELIHOOD(DISTINCT (vt1.c0 IN (rt0.c3, rt0.c2)), (rt0.c0 IN (rt0.c3, rt0.c2)))) ORDER BY ((vt1.c0 COLLATE BINARY) NOT NULL)  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((LIKELIHOOD(DISTINCT (vt1.c0 IN (rt0.c3, rt0.c2)), (rt0.c0 IN (rt0.c3, rt0.c2))))AND(((((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)))>(((((vt1.c0)OR(rt0.c0)))OR(rt0.c0))))))) ORDER BY 0xffffffffe4cd4bfe  NULLS FIRST, CASE CASE WHEN rt0.c3 THEN rt0.c1 WHEN '464024925' THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END  WHEN CASE WHEN rt0.c1 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END THEN rt0.c3 WHEN (rt0.c2 IN (rt0.c3)) THEN 0.825871285366719 WHEN (((rt0.c1, rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c1, vt1.c0, rt0.c1)) AND ((rt0.c3, vt1.c0, rt0.c0))) THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c1)) ELSE ((rt0.c3) ISNULL) END DESC;
SELECT ALL * FROM vt1, rt0 WHERE (LIKELIHOOD(DISTINCT (vt1.c0 IN (rt0.c3, rt0.c2)), (rt0.c0 IN (rt0.c3, rt0.c2)))) ORDER BY ((vt1.c0 COLLATE BINARY) NOT NULL)  NULLS LAST;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (TYPEOF((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1)))));
SELECT MAX(rt0.c1) FROM rt0 NOT INDEXED WHERE (TYPEOF((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))))) ORDER BY ((('M', (rt0.c3 IN (rt0.c2, rt0.c2)), (rt0.c2 IN (rt0.c3))))<((((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)), 0.44055376076628094, ((rt0.c2)+(rt0.c2)))));
SELECT ALL * FROM vt1, rt0 WHERE (highlight(CASE vt1.c0  WHEN '㘮' THEN rt0.c2 END, ((0.16010496513362005)!=(rt0.c3)), CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 END, rt0.c3)) ORDER BY (((((vt1.c0)OR(rt0.c1)))AND(vt1.c0)) IN ('-238464702')) DESC  NULLS LAST, ((((rt0.c3)/(rt0.c1))) NOT BETWEEN (CAST(rt0.c1 AS BLOB)) AND (((vt1.c0) IS TRUE)))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (highlight(CASE vt1.c0  WHEN '㘮' THEN rt0.c2 END, ((0.16010496513362005)!=(rt0.c3)), CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 END, rt0.c3)) ORDER BY ((CASE vt1.c0  WHEN rt0.c1 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 END)<(((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c3)))) DESC  NULLS LAST, (((rt0.c0, rt0.c3)) BETWEEN (((rt0.c2 IN (rt0.c2)), UPPER(vt1.c0))) AND ((((rt0.c2) BETWEEN (rt0.c0) AND (vt1.c0)), (((rt0.c0, rt0.c1, vt1.c0, rt0.c2, rt0.c2)) BETWEEN ((rt0.c3, rt0.c1, rt0.c0, rt0.c1, rt0.c0)) AND ((vt1.c0, rt0.c0, rt0.c2, rt0.c0, rt0.c3)))))), ((((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c0))) ISNULL);
SELECT ALL * FROM vt1, rt0 WHERE (highlight(CASE vt1.c0  WHEN '㘮' THEN rt0.c2 END, ((0.16010496513362005)!=(rt0.c3)), CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 END, rt0.c3)) ORDER BY (((((vt1.c0)OR(rt0.c1)))AND(vt1.c0)) IN ('-238464702')) DESC  NULLS LAST, ((((rt0.c3)/(rt0.c1))) NOT BETWEEN (CAST(rt0.c1 AS BLOB)) AND (((vt1.c0) IS TRUE)))  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((STRFTIME(vt1.c0, vt1.c0, vt1.c0, vt1.c0, NULL, vt1.c0), (+ (vt1.c0)), ((vt1.c0)-(NULL)))) AND (((+ (vt1.c0)), ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c0)AND(vt1.c0)))))) ORDER BY (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN (((vt1.c0) NOTNULL), ((vt1.c0)GLOB(vt1.c0)))) ASC  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((STRFTIME(vt1.c0, vt1.c0, vt1.c0, vt1.c0, NULL, vt1.c0), (+ (vt1.c0)), ((vt1.c0)-(NULL)))) AND (((+ (vt1.c0)), ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c0)AND(vt1.c0))))))AND(json_insert(vt1.c0 COLLATE NOCASE, ((vt1.c0)%(vt1.c0)), vt1.c0 COLLATE BINARY, vt1.c0 COLLATE NOCASE, NULL)))) ORDER BY ((UNLIKELY(DISTINCT vt1.c0))&((vt1.c0 IN (vt1.c0, vt1.c0))))  NULLS LAST, vt1.c0  NULLS FIRST LIMIT 0 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((((+ (vt1.c0)))&((((('-1153288785')OR(vt1.c0)))OR(vt1.c0))))) ORDER BY ((UNLIKELY(DISTINCT vt1.c0))&((vt1.c0 IN (vt1.c0, vt1.c0))))  NULLS LAST, vt1.c0  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c1)OR(0)) IN (TRIM(DISTINCT rt0.c1, rt0.c0))));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c1)OR(0x0)) IN (TRIM(DISTINCT rt0.c1, rt0.c0))));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c1)OR(0)) IN (TRIM(DISTINCT rt0.c1, rt0.c0))));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c1)OR(0x0)) IN (TRIM(DISTINCT rt0.c1, rt0.c0))));
SELECT ALL MAX(vt1.c0) FROM vt1 CROSS JOIN rt0 ON (+ (rt0.c2)) COLLATE NOCASE COLLATE NOCASE WHERE (x'aa');
SELECT ALL MAX(vt1.c0) FROM vt1 CROSS JOIN rt0 ON (+ (rt0.c2)) COLLATE NOCASE COLLATE NOCASE WHERE (((x'aa')AND(rt0.c1)));
SELECT MIN(rt0.c1) FROM rt0 WHERE (((0.11165961158764692)&((rt0.c0 IN (rt0.c2)))));
SELECT MIN(rt0.c1) FROM rt0 WHERE (((((0.11165961158764692)&((rt0.c0 IN (rt0.c2)))))AND((((((rt0.c3))>=((rt0.c1))))OR(x'07'))))) ORDER BY CAST(((((rt0.c1)AND(rt0.c1)))OR(rt0.c0)) AS BLOB)  NULLS LAST, (((rt0.c2 IN (rt0.c2))) NOTNULL) ASC  NULLS FIRST, HEX(GLOB(rt0.c0, rt0.c1))  NULLS FIRST LIMIT 0x2;
SELECT * FROM vt1 WHERE (0.685428017965077);
SELECT ALL * FROM vt1 WHERE (((0.685428017965077)AND(CASE ((vt1.c0)/(vt1.c0))  WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN x'' WHEN (+ (vt1.c0)) THEN ((vt1.c0)-(vt1.c0)) WHEN vt1.c0 THEN (+ (vt1.c0)) WHEN ((-1910666637)AND(vt1.c0)) THEN x'' END))) LIMIT 0;
SELECT * FROM vt1 WHERE (0.685428017965077);
SELECT ALL * FROM vt1 WHERE (((0.685428017965077)AND(CASE ((vt1.c0)/(vt1.c0))  WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN x'' WHEN (+ (vt1.c0)) THEN ((vt1.c0)-(vt1.c0)) WHEN vt1.c0 THEN (+ (vt1.c0)) WHEN ((-1910666637)AND(vt1.c0)) THEN x'' END))) LIMIT 0;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (((CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END)>(((rt0.c3) BETWEEN (0.4839115710109092) AND (x'')))));
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (((((CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END)>(((rt0.c3) BETWEEN (0.4839115710109092) AND (x'')))))AND((((rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c3, (- (NULL)))) AND ((((rt0.c0) BETWEEN (rt0.c2) AND (-1.469812196E9)), (rt0.c3 IN (rt0.c1)))))))) ORDER BY rt0.c2, ((json_patch(rt0.c2, rt0.c0)) IS TRUE) LIMIT 1;
SELECT COUNT(*) FROM rt0 WHERE ((((UNLIKELY(DISTINCT rt0.c2)))>((((rt0.c1) NOT NULL))))) ORDER BY rt0.c0  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0 WHERE ((((UNLIKELY(DISTINCT rt0.c2)))>((((rt0.c1) NOT NULL))))) ORDER BY rt0.c0  NULLS FIRST;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (((CASE rt0.c0  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 END)GLOB(NULL)));
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (((CASE rt0.c0  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 END)GLOB(NULL))) ORDER BY CAST(ABS(rt0.c1) AS NUMERIC) DESC, CAST((((rt0.c0)) BETWEEN ((rt0.c2)) AND ((rt0.c2))) AS BLOB)  NULLS LAST, ((((((rt0.c1) ISNULL))AND((((rt0.c3, rt0.c0, '-1982442086', rt0.c0))<((rt0.c0, rt0.c1, rt0.c2, rt0.c2))))))AND(((rt0.c1) ISNULL))) LIMIT 0X0;
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE (((((((((((((CAST(rt0.c1 AS TEXT))OR(((rt0.c3)-(rt0.c1)))))OR(((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c1)))))OR(((rt0.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)))))OR(((0Xffffffff9d08ace7)%(rt0.c3)))))OR(rt0.c2 COLLATE NOCASE)))AND(rt0.c2 COLLATE BINARY)));
SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE (((((((((((((CAST(rt0.c1 AS TEXT))OR(((rt0.c3)-(rt0.c1)))))OR(((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c1)))))OR(((rt0.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)))))OR(((0xffffffff9d08ace7)%(rt0.c3)))))OR(rt0.c2 COLLATE NOCASE)))AND(rt0.c2 COLLATE BINARY)));
SELECT MIN(rt0.c0) FROM rt0 WHERE (((((rt0.c1) NOT NULL))<<(x''))) ORDER BY ((((rt0.c3)>(rt0.c2)))|(((((rt0.c3)OR(rt0.c1)))OR(rt0.c3)))), (((rt0.c1)>(rt0.c0)) IN ()) ASC;
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((((rt0.c1) NOT NULL))<<(x'')))AND((((NULL)GLOB(rt0.c1)) IN (CASE rt0.c0  WHEN NULL THEN 0.4061928819418156 END))))) ORDER BY (((x'812f')) NOT BETWEEN ((rt0.c1 COLLATE NOCASE)) AND ((SUBSTR(rt0.c1, rt0.c3)))) ASC LIMIT 0X3 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE ((((rt0.c1 IN ()))GLOB(rt0.c0))) ORDER BY (((x'812f')) NOT BETWEEN ((rt0.c1 COLLATE NOCASE)) AND ((SUBSTR(rt0.c1, rt0.c3)))) ASC LIMIT 0X3;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (rt0.c3) ORDER BY ((((((((rt0.c2)AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c3)))<=(((((rt0.c3)AND(rt0.c1)))AND(rt0.c1))))  NULLS LAST;
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (rt0.c3) ORDER BY (NOT (((rt0.c1) NOTNULL)))  NULLS LAST;
SELECT * FROM rt0 INNER JOIN vt1 ON (((((((((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(vt1.c0)), TRIM(DISTINCT NULL), CASE WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 ELSE vt1.c0 END))>((UPPER(rt0.c0), ((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)), ((rt0.c0)>(x''))))) WHERE (0.8374026694610095);
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (((((((((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(vt1.c0)), TRIM(DISTINCT NULL), CASE WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 ELSE vt1.c0 END))>((UPPER(rt0.c0), ((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)), ((rt0.c0)>(x''))))) WHERE (0.8374026694610095);
SELECT * FROM rt0 INNER JOIN vt1 ON (((((((((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(vt1.c0)), TRIM(DISTINCT NULL), CASE WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 ELSE vt1.c0 END))>((UPPER(rt0.c0), ((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)), ((rt0.c0)>(x''))))) WHERE (0.8374026694610095);
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON (((((((((((rt0.c0)OR(vt1.c0)))OR(rt0.c0)))AND(vt1.c0)))OR(vt1.c0)), TRIM(DISTINCT NULL), CASE WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c1 ELSE vt1.c0 END))>((UPPER(rt0.c0), ((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)), ((rt0.c0)>(x''))))) WHERE (0.8374026694610095);
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON ((HEX(rt0.c0))*(rt0.c3)) WHERE (((((rt0.c2))==((rt0.c2))) IN ())) ORDER BY ((CAST(vt1.c0 AS INTEGER))GLOB(((rt0.c0) IS TRUE))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((HEX(rt0.c0))*(rt0.c3)) WHERE (((((rt0.c2))=((rt0.c2))) IN ())) ORDER BY (((vt1.c0, rt0.c1, rt0.c0)) NOT BETWEEN (((rt0.c1 IN (rt0.c1)), CAST(rt0.c3 AS NUMERIC), vt1.c0)) AND (((((rt0.c0, vt1.c0)) NOT BETWEEN ((NULL, rt0.c0)) AND ((rt0.c0, vt1.c0))), ((rt0.c2) IS FALSE), ((((rt0.c0)OR(1847284408)))OR(rt0.c3))))) ASC INTERSECT SELECT * FROM vt1 INNER JOIN rt0 ON ((HEX(rt0.c0))*(rt0.c3)) WHERE ((((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c0)) IN (0.4030186600900878))) ORDER BY (((vt1.c0, rt0.c1, rt0.c0)) NOT BETWEEN (((rt0.c1 IN (rt0.c1)), CAST(rt0.c3 AS NUMERIC), vt1.c0)) AND (((((rt0.c0, vt1.c0)) NOT BETWEEN ((NULL, rt0.c0)) AND ((rt0.c0, vt1.c0))), ((rt0.c2) IS FALSE), ((((rt0.c0)OR(0X6e1b52b8)))OR(rt0.c3))))) ASC;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON ((HEX(rt0.c0))*(rt0.c3)) WHERE (((((rt0.c2))==((rt0.c2))) IN ())) ORDER BY ((CAST(vt1.c0 AS INTEGER))GLOB(((rt0.c0) IS TRUE))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((HEX(rt0.c0))*(rt0.c3)) WHERE (((((rt0.c2))=((rt0.c2))) IN ())) ORDER BY (((vt1.c0, rt0.c1, rt0.c0)) NOT BETWEEN (((rt0.c1 IN (rt0.c1)), CAST(rt0.c3 AS NUMERIC), vt1.c0)) AND (((((rt0.c0, vt1.c0)) NOT BETWEEN ((NULL, rt0.c0)) AND ((rt0.c0, vt1.c0))), ((rt0.c2) IS FALSE), ((((rt0.c0)OR(1847284408)))OR(rt0.c3))))) ASC INTERSECT SELECT * FROM vt1 INNER JOIN rt0 ON ((HEX(rt0.c0))*(rt0.c3)) WHERE ((((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c0)) IN (0.4030186600900878))) ORDER BY (((vt1.c0, rt0.c1, rt0.c0)) NOT BETWEEN (((rt0.c1 IN (rt0.c1)), CAST(rt0.c3 AS NUMERIC), vt1.c0)) AND (((((rt0.c0, vt1.c0)) NOT BETWEEN ((NULL, rt0.c0)) AND ((rt0.c0, vt1.c0))), ((rt0.c2) IS FALSE), ((((rt0.c0)OR(0X6e1b52b8)))OR(rt0.c3))))) ASC;
SELECT ALL * FROM rt0 WHERE (((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c0 WHEN 0.21904106513524813 THEN 0x1ba8755d ELSE rt0.c1 END) ISNULL)) ORDER BY (((- (rt0.c3))) NOT NULL)  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c0 WHEN 0.21904106513524813 THEN 464024925 ELSE rt0.c1 END) ISNULL)) ORDER BY (((- (rt0.c3))) NOT NULL)  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 NOT INDEXED WHERE (CASE ((rt0.c1)AND(rt0.c0))  WHEN 0.6983799382557375 THEN ((rt0.c2) ISNULL) END) ORDER BY (((- (rt0.c3))) NOT NULL)  NULLS LAST LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c0 WHEN 0.21904106513524813 THEN 0x1ba8755d ELSE rt0.c1 END) ISNULL)) ORDER BY (((- (rt0.c3))) NOT NULL)  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c0 WHEN 0.21904106513524813 THEN 464024925 ELSE rt0.c1 END) ISNULL)) ORDER BY (((- (rt0.c3))) NOT NULL)  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 NOT INDEXED WHERE (CASE ((rt0.c1)AND(rt0.c0))  WHEN 0.6983799382557375 THEN ((rt0.c2) ISNULL) END) ORDER BY (((- (rt0.c3))) NOT NULL)  NULLS LAST LIMIT 0;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE ((rt0.c3 IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c0)))));
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE ((((rt0.c3 IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c0)))))AND(rt0.c3))) ORDER BY ((((((rt0.c0)OR(rt0.c0)))AND(rt0.c0)))>(rt0.c0))  NULLS LAST, '-339548143' DESC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((~ ((~ (vt1.c0)))));
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((~ ((~ (vt1.c0)))))AND((((vt1.c0) NOT BETWEEN (0.23637481778540403) AND (vt1.c0)) IN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, (((NULL))<>((vt1.c0))), ((vt1.c0)*(vt1.c0))))))) LIMIT 0X1;
SELECT MIN(rt0.c0) FROM rt0 WHERE (CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c1 END COLLATE RTRIM COLLATE RTRIM);
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c1 END COLLATE RTRIM COLLATE RTRIM) ORDER BY LAST_INSERT_ROWID(), 0.8464409860618194 COLLATE RTRIM ASC INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE ((((rt0.c3 IN ('4)')))IS NOT((('149868551')AND(rt0.c3))))) ORDER BY LAST_INSERT_ROWID(), 0.8464409860618194 COLLATE RTRIM ASC;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (((rt0.c2)>=(((rt0.c2)IS NOT(rt0.c3)))));
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((rt0.c2)>(((rt0.c2)IS NOT(rt0.c3)))))AND(((rt0.c0 COLLATE NOCASE)GLOB(CAST(x'97' AS REAL)))))) ORDER BY CASE rt0.c1  WHEN ((rt0.c3)>>(rt0.c1)) THEN ((rt0.c1)LIKE(rt0.c3)) ELSE CAST(rt0.c0 AS INTEGER) END  NULLS FIRST;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE ((+ (NULL))) ORDER BY LENGTH(CAST(rt0.c3 AS INTEGER))  NULLS LAST, CASE 1478826042  WHEN (((vt1.c0))<((0.16071755533243903))) THEN ((rt0.c0)*(vt1.c0)) WHEN CAST(vt1.c0 AS TEXT) THEN ((((((rt0.c2)OR(rt0.c2)))OR(vt1.c0)))AND(rt0.c0)) WHEN rt0.c3 THEN (- (rt0.c3)) END  NULLS FIRST;
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE ((((+ (NULL)))AND(CASE ((((rt0.c3)OR(rt0.c0)))AND(2042696920))  WHEN NULL COLLATE NOCASE THEN vt1.c0 WHEN (((rt0.c3, rt0.c0, vt1.c0, 0.1563659867092705)) BETWEEN ((rt0.c0, rt0.c2, vt1.c0, vt1.c0)) AND ((rt0.c3, '-r', rt0.c2, rt0.c1))) THEN rt0.c1 COLLATE BINARY ELSE ((rt0.c2) NOT BETWEEN (rt0.c3) AND (vt1.c0)) END))) ORDER BY LENGTH(CAST(rt0.c3 AS INTEGER))  NULLS LAST, CASE 0x5825183a  WHEN (((vt1.c0))<((0.16071755533243903))) THEN ((rt0.c0)*(vt1.c0)) WHEN CAST(vt1.c0 AS TEXT) THEN ((((((rt0.c2)OR(rt0.c2)))OR(vt1.c0)))AND(rt0.c0)) WHEN rt0.c3 THEN (- (rt0.c3)) END  NULLS FIRST;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (vt1.c0);
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (vt1.c0);
SELECT ALL * FROM rt0 WHERE ((~ (CAST(rt0.c0 AS REAL)))) ORDER BY (((rt0.c0, rt0.c0, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c3 COLLATE BINARY, x'3a9f')) AND (((~ (rt0.c0)), CAST(rt0.c0 AS BLOB), -1.16899011E8)))  NULLS FIRST, ((LIKE(rt0.c0, rt0.c2, 'j')) NOT BETWEEN (rt0.c0) AND (((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE ((((~ (CAST(rt0.c0 AS REAL))))AND((((((rt0.c1)AND(rt0.c1)))AND(rt0.c3)) IN ())))) ORDER BY x'cfb6' DESC, CASE ((rt0.c3)OR(rt0.c0))  WHEN rt0.c0 THEN rt0.c1 WHEN ((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN ((rt0.c1)IS(rt0.c3)) WHEN json_object(rt0.c2, 'G4	E', rt0.c0, 7.51361517E8) THEN rt0.c3 COLLATE NOCASE WHEN ((((((((rt0.c0)AND(rt0.c3)))OR(x'')))OR(rt0.c0)))AND(rt0.c1)) THEN CAST(rt0.c0 AS NUMERIC) WHEN (rt0.c3 IN ()) THEN ((rt0.c2)LIKE(rt0.c3)) WHEN ((((((((((rt0.c1)OR(rt0.c0)))AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c1)) THEN HEX(rt0.c0) END  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((~ (CAST(rt0.c0 AS REAL)))) ORDER BY (((rt0.c0, rt0.c0, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c3 COLLATE BINARY, x'3a9f')) AND (((~ (rt0.c0)), CAST(rt0.c0 AS BLOB), -1.16899011E8)))  NULLS FIRST, ((LIKE(rt0.c0, rt0.c2, 'j')) NOT BETWEEN (rt0.c0) AND (((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE ((((~ (CAST(rt0.c0 AS REAL))))AND((((((rt0.c1)AND(rt0.c1)))AND(rt0.c3)) IN ())))) ORDER BY x'cfb6' DESC, CASE ((rt0.c3)OR(rt0.c0))  WHEN rt0.c0 THEN rt0.c1 WHEN ((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)) THEN ((rt0.c1)IS(rt0.c3)) WHEN json_object(rt0.c2, 'G4	E', rt0.c0, 7.51361517E8) THEN rt0.c3 COLLATE NOCASE WHEN ((((((((rt0.c0)AND(rt0.c3)))OR(x'')))OR(rt0.c0)))AND(rt0.c1)) THEN CAST(rt0.c0 AS NUMERIC) WHEN (rt0.c3 IN ()) THEN ((rt0.c2)LIKE(rt0.c3)) WHEN ((((((((((rt0.c1)OR(rt0.c0)))AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c1)) THEN HEX(rt0.c0) END  NULLS FIRST;
SELECT ALL MAX(rt0.c1) FROM vt1, rt0 WHERE ((((rt0.c0, rt0.c2)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c1, rt0.c3))) COLLATE RTRIM) ORDER BY ((((rt0.c1)+(rt0.c3)))<=(((rt0.c1)&(rt0.c2)))) ASC, (((rt0.c0) IS TRUE) IN ((((rt0.c0, vt1.c0, rt0.c2, vt1.c0)) NOT BETWEEN ((rt0.c0, rt0.c2, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c3, rt0.c1)))));
SELECT MAX(rt0.c1) FROM vt1, rt0 WHERE ((((rt0.c0, rt0.c2)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c1, rt0.c3))) COLLATE RTRIM) ORDER BY ((((rt0.c1)+(rt0.c3)))<=(((rt0.c1)&(rt0.c2)))) ASC, (((rt0.c0) IS TRUE) IN ((((rt0.c0, vt1.c0, rt0.c2, vt1.c0)) NOT BETWEEN ((rt0.c0, rt0.c2, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c3, rt0.c1))))) INTERSECT SELECT ALL MAX(rt0.c1) FROM vt1, rt0 WHERE ((((((((((((rt0.c3)OR(vt1.c0)))AND(rt0.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(rt0.c3)) IN (1819784050, (~ (rt0.c0)), ''))) ORDER BY ((((rt0.c1)+(rt0.c3)))<=(((rt0.c1)&(rt0.c2)))) ASC, (((rt0.c0) IS TRUE) IN ((((rt0.c0, vt1.c0, rt0.c2, vt1.c0)) NOT BETWEEN ((rt0.c0, rt0.c2, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c2, rt0.c3, rt0.c1)))));
SELECT * FROM rt0 WHERE (((NULL) BETWEEN (rt0.c3) AND (NULL)) COLLATE BINARY) ORDER BY ((NULL)||(((rt0.c1)>=(rt0.c0)))) DESC, (~ (((NULL)<(rt0.c3))))  NULLS LAST, (((rt0.c0 COLLATE RTRIM, (((rt0.c2, rt0.c1))==((rt0.c0, rt0.c1))), ((rt0.c0)OR(rt0.c3)), MIN(rt0.c2, rt0.c3, rt0.c1, rt0.c2)))>=(((+ ('470573315')), ((rt0.c1) IS FALSE), ((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c3)))OR(rt0.c2)))AND(rt0.c2)), UPPER(rt0.c2)))) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((((NULL) BETWEEN (rt0.c3) AND (NULL)) COLLATE BINARY)AND(((((rt0.c3)<(rt0.c0))) NOT BETWEEN (((rt0.c2)AND(rt0.c0))) AND (((rt0.c1) NOT BETWEEN (rt0.c1) AND (x'f7be'))))))) ORDER BY ((HEX(rt0.c3))LIKE(4.41814537E8)) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (((NULL) BETWEEN (rt0.c3) AND (NULL)) COLLATE BINARY) ORDER BY ((NULL)||(((rt0.c1)>=(rt0.c0)))) DESC, (~ (((NULL)<(rt0.c3))))  NULLS LAST, (((rt0.c0 COLLATE RTRIM, (((rt0.c2, rt0.c1))==((rt0.c0, rt0.c1))), ((rt0.c0)OR(rt0.c3)), MIN(rt0.c2, rt0.c3, rt0.c1, rt0.c2)))>=(((+ ('470573315')), ((rt0.c1) IS FALSE), ((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c3)))OR(rt0.c2)))AND(rt0.c2)), UPPER(rt0.c2)))) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((((NULL) BETWEEN (rt0.c3) AND (NULL)) COLLATE BINARY)AND(((((rt0.c3)<(rt0.c0))) NOT BETWEEN (((rt0.c2)AND(rt0.c0))) AND (((rt0.c1) NOT BETWEEN (rt0.c1) AND (x'f7be'))))))) ORDER BY ((HEX(rt0.c3))LIKE(4.41814537E8)) DESC  NULLS FIRST;
SELECT MIN(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE ((rt0.c0 IN ()) COLLATE BINARY) ORDER BY CAST(((rt0.c0)==(rt0.c2)) AS INTEGER) ASC;
SELECT DISTINCT MIN(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE ((rt0.c0 IN ()) COLLATE BINARY) ORDER BY CAST(((rt0.c0)==(rt0.c2)) AS INTEGER) ASC LIMIT 0X1;
SELECT ALL * FROM rt0, vt1 WHERE ((- (TIME(rt0.c0, rt0.c3, rt0.c2, rt0.c2))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((- (TIME(rt0.c0, rt0.c3, rt0.c2, rt0.c2)))) ORDER BY '' ASC  NULLS LAST, highlight(0x4087d85b, ((rt0.c3)=(rt0.c2)), ((x'1192') NOT BETWEEN (rt0.c0) AND (rt0.c3)), CASE WHEN rt0.c3 THEN 'hD' WHEN '0.1286444337000554' THEN vt1.c0 WHEN 0.06393014454403312 THEN rt0.c3 END) DESC  NULLS LAST, NULLIF(DISTINCT vt1.c0 COLLATE BINARY, highlight(rt0.c1, rt0.c3, rt0.c3, vt1.c0))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((- (TIME(rt0.c0, rt0.c3, rt0.c2, rt0.c2))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((- (TIME(rt0.c0, rt0.c3, rt0.c2, rt0.c2)))) ORDER BY '' ASC  NULLS LAST, highlight(0x4087d85b, ((rt0.c3)=(rt0.c2)), ((x'1192') NOT BETWEEN (rt0.c0) AND (rt0.c3)), CASE WHEN rt0.c3 THEN 'hD' WHEN '0.1286444337000554' THEN vt1.c0 WHEN 0.06393014454403312 THEN rt0.c3 END) DESC  NULLS LAST, NULLIF(DISTINCT vt1.c0 COLLATE BINARY, highlight(rt0.c1, rt0.c3, rt0.c3, vt1.c0))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c3)), (((rt0.c3, vt1.c0, vt1.c0, rt0.c2))<>((rt0.c2, rt0.c3, rt0.c2, rt0.c0))), (rt0.c1 IN (NULL, 0Xffffffff9d70af46)), x''))<=((((rt0.c3) IS TRUE), rt0.c1, ((rt0.c3) ISNULL), ((rt0.c2) IS FALSE))))) ORDER BY ((((rt0.c3)IS NOT(NULL))) BETWEEN (((rt0.c2)OR(rt0.c0))) AND (rt0.c2 COLLATE RTRIM))  NULLS LAST, CAST((NOT (rt0.c0)) AS BLOB) ASC, ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (vt1.c0)))<((~ (rt0.c3))))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c3)), (((rt0.c3, vt1.c0, vt1.c0, rt0.c2))<>((rt0.c2, rt0.c3, rt0.c2, rt0.c0))), (rt0.c1 IN (NULL, -1653559482)), x''))<=((((rt0.c3) IS TRUE), rt0.c1, ((rt0.c3) ISNULL), ((rt0.c2) IS FALSE))))) ORDER BY (((((vt1.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c3)))) BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))) AND (0.40178983595635964)) INTERSECT SELECT * FROM vt1, rt0 WHERE (((CASE vt1.c0  WHEN rt0.c3 THEN '1299452316' END)AND((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((NULL)))))) ORDER BY (((((vt1.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c3)))) BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))) AND (0.40178983595635964));
SELECT ALL * FROM vt1, rt0 WHERE ((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c3)), (((rt0.c3, vt1.c0, vt1.c0, rt0.c2))<>((rt0.c2, rt0.c3, rt0.c2, rt0.c0))), (rt0.c1 IN (NULL, 0Xffffffff9d70af46)), x''))<=((((rt0.c3) IS TRUE), rt0.c1, ((rt0.c3) ISNULL), ((rt0.c2) IS FALSE))))) ORDER BY ((((rt0.c3)IS NOT(NULL))) BETWEEN (((rt0.c2)OR(rt0.c0))) AND (rt0.c2 COLLATE RTRIM))  NULLS LAST, CAST((NOT (rt0.c0)) AS BLOB) ASC, ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (vt1.c0)))<((~ (rt0.c3))))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((((rt0.c2)AND(rt0.c3)))OR(rt0.c3)), (((rt0.c3, vt1.c0, vt1.c0, rt0.c2))<>((rt0.c2, rt0.c3, rt0.c2, rt0.c0))), (rt0.c1 IN (NULL, -1653559482)), x''))<=((((rt0.c3) IS TRUE), rt0.c1, ((rt0.c3) ISNULL), ((rt0.c2) IS FALSE))))) ORDER BY (((((vt1.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c3)))) BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))) AND (0.40178983595635964)) INTERSECT SELECT * FROM vt1, rt0 WHERE (((CASE vt1.c0  WHEN rt0.c3 THEN '1299452316' END)AND((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((NULL)))))) ORDER BY (((((vt1.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c3)))) BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))) AND (0.40178983595635964));
SELECT * FROM rt0, vt1 WHERE (((json_insert(rt0.c2, rt0.c2, rt0.c3, rt0.c0))<>((((vt1.c0))!=((rt0.c1)))))) ORDER BY rt0.c3 ASC  NULLS FIRST, (- (rt0.c2));
SELECT DISTINCT * FROM rt0 NOT INDEXED, vt1 WHERE (((json_insert(rt0.c2, rt0.c2, rt0.c3, rt0.c0))<((((vt1.c0))<((rt0.c1)))))) ORDER BY rt0.c3 ASC  NULLS FIRST, (- (rt0.c2)) LIMIT 0X2;
SELECT * FROM rt0, vt1 WHERE (((json_insert(rt0.c2, rt0.c2, rt0.c3, rt0.c0))<>((((vt1.c0))!=((rt0.c1)))))) ORDER BY rt0.c3 ASC  NULLS FIRST, (- (rt0.c2));
SELECT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((((((((vt1.c0) NOTNULL))AND(((rt0.c0) NOT BETWEEN (vt1.c0) AND (NULL)))))AND((rt0.c1 IN ()))))OR(CAST(rt0.c0 AS TEXT)))) ORDER BY (((('-1505264151') NOTNULL))<=('/阹\*d⦤%!%'))  NULLS LAST;
SELECT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((((((((vt1.c0) NOTNULL))AND(((rt0.c0) NOT BETWEEN (vt1.c0) AND (NULL)))))AND((rt0.c1 IN ()))))OR(CAST(rt0.c0 AS TEXT)))) ORDER BY (((('-1505264151') NOTNULL))<=('/阹\*d⦤%!%'))  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (NULL COLLATE RTRIM) ORDER BY (((('-1505264151') NOTNULL))<=('/阹\*d⦤%!%'))  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (CAST(vt1.c0 AS NUMERIC)) ORDER BY vt1.c0  NULLS LAST, (((((vt1.c0)%(vt1.c0))))!=((CAST(vt1.c0 AS REAL)))), ((((((((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND((- (vt1.c0)))))OR(((vt1.c0) NOT NULL))))OR(CAST(NULL AS REAL))))AND((vt1.c0 IN (vt1.c0)))))AND(((((((((((vt1.c0)AND(vt1.c0)))AND(x'cf')))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS NUMERIC))AND(((((((vt1.c0)>(vt1.c0)))OR(LIKELIHOOD(DISTINCT vt1.c0, vt1.c0))))AND(((x'e7e5')IS NOT(vt1.c0))))))) ORDER BY ((((- (vt1.c0)), (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))>=((((vt1.c0)-(vt1.c0)), json_array_length(vt1.c0)))) DESC, vt1.c0 ASC LIMIT 0X1 INTERSECT SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0))<((x''))) IN ((~ (vt1.c0))))) ORDER BY ((((- (vt1.c0)), (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))>=((((vt1.c0)-(vt1.c0)), json_array_length(vt1.c0)))) DESC, vt1.c0 ASC LIMIT 0x1;
SELECT * FROM vt1, rt0 WHERE ((((((((((vt1.c0 IN (rt0.c0, rt0.c0)))OR(rt0.c1)))OR(((rt0.c0)AND(rt0.c2)))))OR(CAST(rt0.c0 AS BLOB))))OR(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c3)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((((((((vt1.c0 IN (rt0.c0, rt0.c0)))OR(rt0.c1)))OR(((rt0.c0)AND(rt0.c2)))))OR(CAST(rt0.c0 AS BLOB))))OR(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c3)))))AND((- (((vt1.c0) IS TRUE))))));
SELECT * FROM vt1, rt0 WHERE ((((((((((vt1.c0 IN (rt0.c0, rt0.c0)))OR(rt0.c1)))OR(((rt0.c0)AND(rt0.c2)))))OR(CAST(rt0.c0 AS BLOB))))OR(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c3)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((((((((vt1.c0 IN (rt0.c0, rt0.c0)))OR(rt0.c1)))OR(((rt0.c0)AND(rt0.c2)))))OR(CAST(rt0.c0 AS BLOB))))OR(((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c3)))))AND((- (((vt1.c0) IS TRUE))))));
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((rt0.c2) NOT BETWEEN (((rt0.c2)<(rt0.c0))) AND (((((rt0.c0)AND(vt1.c0)))OR(rt0.c2)))) WHERE (CAST(rt0.c1 COLLATE BINARY AS NUMERIC)) ORDER BY (NOT (rt0.c3 COLLATE BINARY)), CASE WHEN DATETIME(rt0.c1, rt0.c2, rt0.c2, rt0.c2) THEN rt0.c1 WHEN CASE WHEN '-732813397' THEN vt1.c0 END THEN ((rt0.c0)&(rt0.c1)) END ASC  NULLS LAST, ((((CASE WHEN rt0.c0 THEN rt0.c0 END)AND(((rt0.c2) BETWEEN (rt0.c1) AND ('-424298292')))))OR(((vt1.c0)OR(rt0.c3))))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((rt0.c2) NOT BETWEEN (((rt0.c2)<(rt0.c0))) AND (((((rt0.c0)AND(vt1.c0)))OR(rt0.c2)))) WHERE (CAST(rt0.c1 COLLATE BINARY AS NUMERIC)) ORDER BY (NOT (rt0.c3 COLLATE BINARY)), CASE WHEN DATETIME(rt0.c1, rt0.c2, rt0.c2, rt0.c2) THEN rt0.c1 WHEN CASE WHEN '-732813397' THEN vt1.c0 END THEN ((rt0.c0)&(rt0.c1)) END ASC  NULLS LAST, ((((CASE WHEN rt0.c0 THEN rt0.c0 END)AND(((rt0.c2) BETWEEN (rt0.c1) AND ('-424298292')))))OR(((vt1.c0)OR(rt0.c3))))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((rt0.c2) NOT BETWEEN (((rt0.c2)<(rt0.c0))) AND (((((rt0.c0)AND(vt1.c0)))OR(rt0.c2)))) WHERE (CAST(rt0.c1 COLLATE BINARY AS NUMERIC)) ORDER BY (NOT (rt0.c3 COLLATE BINARY)), CASE WHEN DATETIME(rt0.c1, rt0.c2, rt0.c2, rt0.c2) THEN rt0.c1 WHEN CASE WHEN '-732813397' THEN vt1.c0 END THEN ((rt0.c0)&(rt0.c1)) END ASC  NULLS LAST, ((((CASE WHEN rt0.c0 THEN rt0.c0 END)AND(((rt0.c2) BETWEEN (rt0.c1) AND ('-424298292')))))OR(((vt1.c0)OR(rt0.c3))))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((rt0.c2) NOT BETWEEN (((rt0.c2)<(rt0.c0))) AND (((((rt0.c0)AND(vt1.c0)))OR(rt0.c2)))) WHERE (CAST(rt0.c1 COLLATE BINARY AS NUMERIC)) ORDER BY (NOT (rt0.c3 COLLATE BINARY)), CASE WHEN DATETIME(rt0.c1, rt0.c2, rt0.c2, rt0.c2) THEN rt0.c1 WHEN CASE WHEN '-732813397' THEN vt1.c0 END THEN ((rt0.c0)&(rt0.c1)) END ASC  NULLS LAST, ((((CASE WHEN rt0.c0 THEN rt0.c0 END)AND(((rt0.c2) BETWEEN (rt0.c1) AND ('-424298292')))))OR(((vt1.c0)OR(rt0.c3))))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM rt0 WHERE ((~ (((rt0.c1)||(rt0.c1)))));
SELECT DISTINCT * FROM rt0 WHERE ((((~ (((rt0.c1)||(rt0.c1)))))AND(((((rt0.c1)GLOB(rt0.c0)))LIKE(((rt0.c3)LIKE('|'))))))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE ((~ (((rt0.c1)||(rt0.c1)))));
SELECT DISTINCT * FROM rt0 WHERE ((((~ (((rt0.c1)||(rt0.c1)))))AND(((((rt0.c1)GLOB(rt0.c0)))LIKE(((rt0.c3)LIKE('|'))))))) LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE RTRIM) BETWEEN (('2YYO6' IN (vt1.c0))) AND (rt0.c2))) ORDER BY ((NULL)<=((+ (rt0.c2)))) DESC, ((((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1))) NOT BETWEEN (((vt1.c0)<(x'ff'))) AND (json_object(rt0.c1, rt0.c3))) DESC;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE RTRIM) BETWEEN (('2YYO6' IN (vt1.c0))) AND (rt0.c2))) ORDER BY ((rt0.c3 COLLATE NOCASE) BETWEEN (((rt0.c3) IS TRUE)) AND ((rt0.c1 IN (rt0.c2)))) DESC  NULLS FIRST, ((CAST(rt0.c0 AS INTEGER)) BETWEEN (CAST(0X272ac210 AS TEXT)) AND (x'fe' COLLATE RTRIM)) ASC, ((rt0.c0) ISNULL) ASC;
SELECT ALL * FROM rt0, vt1 WHERE (((vt1.c0 COLLATE RTRIM) BETWEEN (('2YYO6' IN (vt1.c0))) AND (rt0.c2))) ORDER BY ((NULL)<=((+ (rt0.c2)))) DESC, ((((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1))) NOT BETWEEN (((vt1.c0)<(x'ff'))) AND (json_object(rt0.c1, rt0.c3))) DESC;
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE (((NOT (rt0.c1)) IN (vt1.c0)));
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE (((((NOT (rt0.c1)) IN (vt1.c0)))AND(((((rt0.c0)==(rt0.c0))) BETWEEN (-1.028226782E9) AND (((rt0.c0)==(rt0.c1))))))) ORDER BY NULL ASC  NULLS LAST INTERSECT SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE (CASE WHEN rt0.c1 THEN rt0.c2 ELSE vt1.c0 END COLLATE RTRIM COLLATE NOCASE) ORDER BY NULL ASC  NULLS LAST;
SELECT ALL MAX(rt0.c2) FROM vt1, rt0 WHERE ((((0.0651693797404781 IN (vt1.c0, rt0.c0))) IS FALSE));
SELECT MAX(rt0.c2) FROM vt1, rt0 WHERE ((((0.0651693797404781 IN (vt1.c0, rt0.c0))) IS FALSE)) INTERSECT SELECT ALL MAX(rt0.c2) FROM vt1, rt0 WHERE (rt0.c3);
SELECT * FROM vt1 WHERE ((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END, ((vt1.c0)GLOB(vt1.c0))))<(((- (']hSR3F')), vt1.c0 COLLATE RTRIM, MAX(vt1.c0, vt1.c0)))));
SELECT ALL * FROM vt1 WHERE ((((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END, ((vt1.c0)GLOB(vt1.c0))))<(((- (']hSR3F')), vt1.c0 COLLATE RTRIM, MAX(vt1.c0, vt1.c0)))))AND((((vt1.c0)IS(vt1.c0)) IN ())))) ORDER BY ((((vt1.c0)==(vt1.c0))) BETWEEN (((vt1.c0)IS(vt1.c0))) AND (vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST, (((vt1.c0 COLLATE RTRIM))>=((((vt1.c0)*(vt1.c0))))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) COLLATE RTRIM) ORDER BY ((((vt1.c0)=(vt1.c0))) BETWEEN (((vt1.c0)IS(vt1.c0))) AND (vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST, (((vt1.c0 COLLATE RTRIM))>=((((vt1.c0)*(vt1.c0))))) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END, ((vt1.c0)GLOB(vt1.c0))))<(((- (']hSR3F')), vt1.c0 COLLATE RTRIM, MAX(vt1.c0, vt1.c0)))));
SELECT ALL * FROM vt1 WHERE ((((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END, ((vt1.c0)GLOB(vt1.c0))))<(((- (']hSR3F')), vt1.c0 COLLATE RTRIM, MAX(vt1.c0, vt1.c0)))))AND((((vt1.c0)IS(vt1.c0)) IN ())))) ORDER BY ((((vt1.c0)==(vt1.c0))) BETWEEN (((vt1.c0)IS(vt1.c0))) AND (vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST, (((vt1.c0 COLLATE RTRIM))>=((((vt1.c0)*(vt1.c0))))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) COLLATE RTRIM) ORDER BY ((((vt1.c0)=(vt1.c0))) BETWEEN (((vt1.c0)IS(vt1.c0))) AND (vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST, (((vt1.c0 COLLATE RTRIM))>=((((vt1.c0)*(vt1.c0))))) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE ((((((rt0.c3)) BETWEEN ((rt0.c2)) AND ((rt0.c3)))) NOT BETWEEN (rt0.c3 COLLATE NOCASE) AND ((rt0.c3 IN (rt0.c1)))));
SELECT ALL * FROM rt0 WHERE ((((((rt0.c3)) BETWEEN ((rt0.c2)) AND ((rt0.c3)))) NOT BETWEEN (rt0.c3 COLLATE NOCASE) AND ((rt0.c3 IN (rt0.c1))))) ORDER BY rt0.c0  NULLS FIRST, ((rt0.c1)<=(rt0.c1)) COLLATE BINARY DESC LIMIT 2;
SELECT * FROM rt0 WHERE ((((((rt0.c3)) BETWEEN ((rt0.c2)) AND ((rt0.c3)))) NOT BETWEEN (rt0.c3 COLLATE NOCASE) AND ((rt0.c3 IN (rt0.c1)))));
SELECT ALL * FROM rt0 WHERE ((((((rt0.c3)) BETWEEN ((rt0.c2)) AND ((rt0.c3)))) NOT BETWEEN (rt0.c3 COLLATE NOCASE) AND ((rt0.c3 IN (rt0.c1))))) ORDER BY rt0.c0  NULLS FIRST, ((rt0.c1)<=(rt0.c1)) COLLATE BINARY DESC LIMIT 2;
SELECT COUNT(*) FROM rt0 WHERE (((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c2)) COLLATE BINARY) ORDER BY (((rt0.c1, rt0.c2, x'')) NOT BETWEEN ((((((((rt0.c0)OR(rt0.c0)))AND(rt0.c3)))AND(rt0.c1)), NULL, (~ (rt0.c3)))) AND ((((rt0.c1)&(rt0.c2)), CAST(rt0.c3 AS BLOB), rt0.c3 COLLATE NOCASE))) DESC, (NOT ((rt0.c1 IN ()))) ASC;
SELECT COUNT(*) FROM rt0 WHERE (((((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c2)) COLLATE BINARY)AND(((rt0.c2) BETWEEN ((((rt0.c0, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((rt0.c2, rt0.c3)))) AND (rt0.c1 COLLATE RTRIM))))) ORDER BY ((((((((((CAST(rt0.c2 AS NUMERIC))AND(((rt0.c0)<<(rt0.c2)))))AND(((rt0.c3)+(rt0.c3)))))AND(CASE rt0.c3  WHEN 0.7597608600456579 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END)))OR(((((rt0.c3)OR(rt0.c0)))AND(rt0.c3)))))OR(((((((rt0.c1)OR(rt0.c0)))OR(rt0.c2)))OR(NULL))))  NULLS FIRST;
SELECT ALL MAX(rt0.c2) FROM vt1, rt0 WHERE (((vt1.c0) NOT NULL));
SELECT DISTINCT MAX(rt0.c2) FROM vt1, rt0 WHERE (((((vt1.c0) NOT NULL))AND(IFNULL(CAST(rt0.c0 AS INTEGER), CAST(rt0.c3 AS NUMERIC))))) LIMIT 0X3;
SELECT ALL * FROM rt0, vt1 WHERE ((~ (((rt0.c3) NOT NULL))));
SELECT * FROM rt0, vt1 WHERE ((((~ (((rt0.c3) NOT NULL))))AND(((CAST(rt0.c0 AS NUMERIC))IS NOT(((((((((((rt0.c2)AND(rt0.c2)))OR(vt1.c0)))OR(2.59252199E8)))AND(rt0.c1)))OR(rt0.c1)))))));
SELECT ALL * FROM rt0, vt1 WHERE ((~ (((rt0.c3) NOT NULL))));
SELECT * FROM rt0, vt1 WHERE ((((~ (((rt0.c3) NOT NULL))))AND(((CAST(rt0.c0 AS NUMERIC))IS NOT(((((((((((rt0.c2)AND(rt0.c2)))OR(vt1.c0)))OR(2.59252199E8)))AND(rt0.c1)))OR(rt0.c1)))))));
SELECT ALL * FROM vt1 NOT INDEXED, rt0 WHERE (((0.42697332924748477)!=(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c0)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((0.42697332924748477)<>(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c0)))))AND((((rt0.c1, rt0.c2, rt0.c3, rt0.c1)) BETWEEN ((((rt0.c3)<>(rt0.c0)), (vt1.c0 IN ()), ((vt1.c0)||(vt1.c0)), ((rt0.c3) NOTNULL))) AND (((('''f') BETWEEN (rt0.c1) AND (rt0.c0)), (- (rt0.c1)), -1.7976931348623157E308, ((((((vt1.c0)OR(rt0.c0)))OR(vt1.c0)))OR(rt0.c3))))))));
SELECT ALL * FROM vt1 NOT INDEXED, rt0 WHERE (((0.42697332924748477)!=(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c0)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((0.42697332924748477)<>(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c0)))))AND((((rt0.c1, rt0.c2, rt0.c3, rt0.c1)) BETWEEN ((((rt0.c3)<>(rt0.c0)), (vt1.c0 IN ()), ((vt1.c0)||(vt1.c0)), ((rt0.c3) NOTNULL))) AND (((('''f') BETWEEN (rt0.c1) AND (rt0.c0)), (- (rt0.c1)), -1.7976931348623157E308, ((((((vt1.c0)OR(rt0.c0)))OR(vt1.c0)))OR(rt0.c3))))))));
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (x'51');
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE (x'51');
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0);
SELECT * FROM rt0, vt1 WHERE (((rt0.c0)AND(((CAST(vt1.c0 AS REAL)) NOT BETWEEN (((rt0.c1) BETWEEN (rt0.c1) AND (x'47'))) AND (UPPER(DISTINCT rt0.c2)))))) ORDER BY (NOT (vt1.c0)) ASC, ((rt0.c1 COLLATE NOCASE)%(vt1.c0)) ASC INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (CASE WHEN x'' THEN rt0.c1 COLLATE RTRIM ELSE ((rt0.c1) NOTNULL) END) ORDER BY (NOT (vt1.c0)) ASC, ((rt0.c1 COLLATE NOCASE)%(vt1.c0)) ASC;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c0);
SELECT * FROM rt0, vt1 WHERE (((rt0.c0)AND(((CAST(vt1.c0 AS REAL)) NOT BETWEEN (((rt0.c1) BETWEEN (rt0.c1) AND (x'47'))) AND (UPPER(DISTINCT rt0.c2)))))) ORDER BY (NOT (vt1.c0)) ASC, ((rt0.c1 COLLATE NOCASE)%(vt1.c0)) ASC INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (CASE WHEN x'' THEN rt0.c1 COLLATE RTRIM ELSE ((rt0.c1) NOTNULL) END) ORDER BY (NOT (vt1.c0)) ASC, ((rt0.c1 COLLATE NOCASE)%(vt1.c0)) ASC;
SELECT ALL MAX(vt1.c0) FROM rt0 NATURAL JOIN vt1 WHERE (((((((((rt0.c3)AND(vt1.c0)))AND(rt0.c0)))OR(rt0.c2))) IS TRUE));
SELECT ALL MAX(vt1.c0) FROM rt0 NATURAL JOIN vt1 WHERE (((((((((((rt0.c3)AND(vt1.c0)))AND(rt0.c0)))OR(rt0.c2))) IS TRUE))AND((~ (((((((((vt1.c0)AND(rt0.c3)))AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c2))))))) LIMIT 0x1 INTERSECT SELECT MAX(vt1.c0) FROM rt0 NATURAL JOIN vt1 WHERE ((((+ (rt0.c1))) BETWEEN ((rt0.c0 IN (rt0.c2, vt1.c0))) AND (0.3024422938519785))) LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c0)) NOT BETWEEN ((CASE rt0.c2  WHEN vt1.c0 THEN rt0.c2 WHEN NULL THEN 0.28574204540858894 ELSE ',zP⹃' END)) AND ((UNLIKELY(rt0.c2)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c0)) NOT BETWEEN ((CASE rt0.c2  WHEN vt1.c0 THEN rt0.c2 WHEN NULL THEN 0.28574204540858894 ELSE ',zP⹃' END)) AND ((UNLIKELY(rt0.c2))))) ORDER BY ((LOWER(rt0.c0))LIKE(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 END))  NULLS LAST, ((((rt0.c2)%(rt0.c0))) BETWEEN (((rt0.c2)LIKE(vt1.c0))) AND (rt0.c1 COLLATE NOCASE)) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c3)/(rt0.c2)))&(CASE WHEN NULL THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c2 END))) ORDER BY ((LOWER(rt0.c0))LIKE(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 END))  NULLS LAST, ((((rt0.c2)%(rt0.c0))) BETWEEN (((rt0.c2)LIKE(vt1.c0))) AND (rt0.c1 COLLATE NOCASE)) ASC LIMIT 0X0;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c0)) NOT BETWEEN ((CASE rt0.c2  WHEN vt1.c0 THEN rt0.c2 WHEN NULL THEN 0.28574204540858894 ELSE ',zP⹃' END)) AND ((UNLIKELY(rt0.c2)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c0)) NOT BETWEEN ((CASE rt0.c2  WHEN vt1.c0 THEN rt0.c2 WHEN NULL THEN 0.28574204540858894 ELSE ',zP⹃' END)) AND ((UNLIKELY(rt0.c2))))) ORDER BY ((LOWER(rt0.c0))LIKE(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 END))  NULLS LAST, ((((rt0.c2)%(rt0.c0))) BETWEEN (((rt0.c2)LIKE(vt1.c0))) AND (rt0.c1 COLLATE NOCASE)) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c3)/(rt0.c2)))&(CASE WHEN NULL THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c2 END))) ORDER BY ((LOWER(rt0.c0))LIKE(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN vt1.c0 END))  NULLS LAST, ((((rt0.c2)%(rt0.c0))) BETWEEN (((rt0.c2)LIKE(vt1.c0))) AND (rt0.c1 COLLATE NOCASE)) ASC LIMIT 0X0;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON (((rt0.c1) IS TRUE) IN ()) WHERE (CASE ((((((rt0.c0)AND(rt0.c2)))OR(rt0.c3)))AND(rt0.c0))  WHEN ((rt0.c0) BETWEEN (rt0.c3) AND (NULL)) THEN rt0.c2 WHEN ((rt0.c0)OR(rt0.c3)) THEN (NOT (rt0.c0)) END);
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON (((rt0.c1) IS TRUE) IN ()) WHERE (CASE ((((((rt0.c0)AND(rt0.c2)))OR(rt0.c3)))AND(rt0.c0))  WHEN ((rt0.c0) BETWEEN (rt0.c3) AND (NULL)) THEN rt0.c2 WHEN ((rt0.c0)OR(rt0.c3)) THEN (NOT (rt0.c0)) END) INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON (((rt0.c1) IS TRUE) IN ()) WHERE ((- (CAST(rt0.c1 AS INTEGER))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON (((rt0.c1) IS TRUE) IN ()) WHERE (CASE ((((((rt0.c0)AND(rt0.c2)))OR(rt0.c3)))AND(rt0.c0))  WHEN ((rt0.c0) BETWEEN (rt0.c3) AND (NULL)) THEN rt0.c2 WHEN ((rt0.c0)OR(rt0.c3)) THEN (NOT (rt0.c0)) END);
SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON (((rt0.c1) IS TRUE) IN ()) WHERE (CASE ((((((rt0.c0)AND(rt0.c2)))OR(rt0.c3)))AND(rt0.c0))  WHEN ((rt0.c0) BETWEEN (rt0.c3) AND (NULL)) THEN rt0.c2 WHEN ((rt0.c0)OR(rt0.c3)) THEN (NOT (rt0.c0)) END) INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN rt0 ON (((rt0.c1) IS TRUE) IN ()) WHERE ((- (CAST(rt0.c1 AS INTEGER))));
SELECT ALL COUNT(*) FROM vt1 WHERE ((+ (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))));
SELECT ALL COUNT(*) FROM vt1 WHERE ((((+ (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))))AND(CASE WHEN ((vt1.c0) ISNULL) THEN vt1.c0 WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) NOTNULL) ELSE ((vt1.c0)/(vt1.c0)) END))) ORDER BY ((NULL)<(0.6695048371126352)) DESC, ((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))AND(((vt1.c0)<=(vt1.c0)))))OR(((vt1.c0)-(vt1.c0)))))AND(((vt1.c0)=(vt1.c0)))) LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt1 WHERE (vt1.c0) ORDER BY ((NULL)<(0.6695048371126352)) DESC, ((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))AND(((vt1.c0)<=(vt1.c0)))))OR(((vt1.c0)-(vt1.c0)))))AND(((vt1.c0)=(vt1.c0)))) LIMIT 1;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (LIKELY(((rt0.c0)|(rt0.c0)))) ORDER BY ((CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN x'4d3c' THEN vt1.c0 END)<('1103988239')), ((CAST(rt0.c0 AS TEXT)) IS TRUE)  NULLS FIRST, ((((((((((((((vt1.c0)AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c0))) BETWEEN (0.0324024560960251) AND ((vt1.c0 IN ())));
SELECT COUNT(*) FROM vt1, rt0 WHERE (((LIKELY(((rt0.c0)|(rt0.c0))))AND((((0x6f888f6e)) BETWEEN ((vt1.c0 COLLATE NOCASE)) AND ((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c1)))))))) ORDER BY ((CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN x'4d3c' THEN vt1.c0 END)<('1103988239')), ((CAST(rt0.c0 AS TEXT)) IS TRUE)  NULLS FIRST, ((((((((((((((vt1.c0)AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c0))) BETWEEN (0.0324024560960251) AND ((vt1.c0 IN ()))) LIMIT 1;
SELECT ALL * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM rt0 WHERE (((((((((((((rt0.c2)AND(rt0.c2)))OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c1))) NOT BETWEEN (((rt0.c1)<(rt0.c2))) AND (CASE WHEN 0X42c95e34 THEN rt0.c1 END)));
SELECT ALL * FROM rt0 WHERE (((((((((((((((rt0.c2)AND(rt0.c2)))OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c1))) NOT BETWEEN (((rt0.c1)<>(rt0.c2))) AND (CASE WHEN 1120493108 THEN rt0.c1 END)))AND((((rt0.c1)IS(rt0.c1)) IN ())))) ORDER BY CAST(rt0.c3 AS REAL)  NULLS FIRST LIMIT 3 INTERSECT SELECT ALL * FROM rt0 WHERE ((((rt0.c3, rt0.c0, rt0.c2, rt0.c2)) BETWEEN (((rt0.c0 IN ()), rt0.c0, ((rt0.c1)&(rt0.c1)), (((((((('1422900229')AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c3)))) AND ((CAST(rt0.c3 AS BLOB), ((((((rt0.c1)OR('499136916')))OR(rt0.c0)))AND(rt0.c0)), ((((rt0.c1)AND(rt0.c0)))OR(rt0.c2)), rt0.c2 COLLATE NOCASE)))) ORDER BY CAST(rt0.c3 AS REAL)  NULLS FIRST LIMIT 0x3;
SELECT ALL * FROM rt0 WHERE (((((((((((((rt0.c2)AND(rt0.c2)))OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c1))) NOT BETWEEN (((rt0.c1)<(rt0.c2))) AND (CASE WHEN 0X42c95e34 THEN rt0.c1 END)));
SELECT ALL * FROM rt0 WHERE (((((((((((((((rt0.c2)AND(rt0.c2)))OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)))AND(rt0.c1))) NOT BETWEEN (((rt0.c1)<>(rt0.c2))) AND (CASE WHEN 1120493108 THEN rt0.c1 END)))AND((((rt0.c1)IS(rt0.c1)) IN ())))) ORDER BY CAST(rt0.c3 AS REAL)  NULLS FIRST LIMIT 3 INTERSECT SELECT ALL * FROM rt0 WHERE ((((rt0.c3, rt0.c0, rt0.c2, rt0.c2)) BETWEEN (((rt0.c0 IN ()), rt0.c0, ((rt0.c1)&(rt0.c1)), (((((((('1422900229')AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c3)))) AND ((CAST(rt0.c3 AS BLOB), ((((((rt0.c1)OR('499136916')))OR(rt0.c0)))AND(rt0.c0)), ((((rt0.c1)AND(rt0.c0)))OR(rt0.c2)), rt0.c2 COLLATE NOCASE)))) ORDER BY CAST(rt0.c3 AS REAL)  NULLS FIRST LIMIT 0x3;
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (((UNICODE(rt0.c1))<<(rt0.c3 COLLATE RTRIM))) ORDER BY -2.041558609E9  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (((((UNICODE(rt0.c1))<<(rt0.c3 COLLATE RTRIM)))AND(LAST_INSERT_ROWID()))) ORDER BY -2.041558609E9  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt1, rt0 WHERE (CASE WHEN COALESCE(vt1.c0, rt0.c1) THEN ((((rt0.c3)OR(rt0.c3)))AND(vt1.c0)) ELSE (- (x'')) END) ORDER BY -2.041558609E9  NULLS FIRST LIMIT 0;
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (((UNICODE(rt0.c1))<<(rt0.c3 COLLATE RTRIM))) ORDER BY -2.041558609E9  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (((((UNICODE(rt0.c1))<<(rt0.c3 COLLATE RTRIM)))AND(LAST_INSERT_ROWID()))) ORDER BY -2.041558609E9  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt1, rt0 WHERE (CASE WHEN COALESCE(vt1.c0, rt0.c1) THEN ((((rt0.c3)OR(rt0.c3)))AND(vt1.c0)) ELSE (- (x'')) END) ORDER BY -2.041558609E9  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0 WHERE ((((NOT (rt0.c2)))LIKE((+ (rt0.c2)))));
SELECT DISTINCT * FROM rt0 WHERE ((((((NOT (rt0.c2)))LIKE((+ (rt0.c2)))))AND((((- (rt0.c3))) NOT NULL)))) ORDER BY ((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 WHEN 0Xd4cb7d9 THEN rt0.c2 END) NOT BETWEEN (((rt0.c2)<<(rt0.c2))) AND ((((rt0.c0, rt0.c1, rt0.c1, rt0.c2))<=((rt0.c1, rt0.c1, rt0.c0, rt0.c2))))) DESC  NULLS LAST, ((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c2))) BETWEEN (((((rt0.c1)OR(rt0.c0)))OR(rt0.c1))) AND (rt0.c0 COLLATE BINARY)) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((~ (rt0.c0)) IN (UNLIKELY(rt0.c2), (rt0.c0 IN ())))) ORDER BY ((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 WHEN 223131609 THEN rt0.c2 END) NOT BETWEEN (((rt0.c2)<<(rt0.c2))) AND ((((rt0.c0, rt0.c1, rt0.c1, rt0.c2))<=((rt0.c1, rt0.c1, rt0.c0, rt0.c2))))) DESC  NULLS LAST, ((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c2))) BETWEEN (((((rt0.c1)OR(rt0.c0)))OR(rt0.c1))) AND (rt0.c0 COLLATE BINARY)) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((NOT (rt0.c2)))LIKE((+ (rt0.c2)))));
SELECT DISTINCT * FROM rt0 WHERE ((((((NOT (rt0.c2)))LIKE((+ (rt0.c2)))))AND((((- (rt0.c3))) NOT NULL)))) ORDER BY ((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 WHEN 0Xd4cb7d9 THEN rt0.c2 END) NOT BETWEEN (((rt0.c2)<<(rt0.c2))) AND ((((rt0.c0, rt0.c1, rt0.c1, rt0.c2))<=((rt0.c1, rt0.c1, rt0.c0, rt0.c2))))) DESC  NULLS LAST, ((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c2))) BETWEEN (((((rt0.c1)OR(rt0.c0)))OR(rt0.c1))) AND (rt0.c0 COLLATE BINARY)) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((~ (rt0.c0)) IN (UNLIKELY(rt0.c2), (rt0.c0 IN ())))) ORDER BY ((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c2 WHEN 223131609 THEN rt0.c2 END) NOT BETWEEN (((rt0.c2)<<(rt0.c2))) AND ((((rt0.c0, rt0.c1, rt0.c1, rt0.c2))<=((rt0.c1, rt0.c1, rt0.c0, rt0.c2))))) DESC  NULLS LAST, ((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c2))) BETWEEN (((((rt0.c1)OR(rt0.c0)))OR(rt0.c1))) AND (rt0.c0 COLLATE BINARY)) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (CASE ((rt0.c1)|(rt0.c1))  WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c0)) THEN LAST_INSERT_ROWID() WHEN ((rt0.c1)-(rt0.c1)) THEN '螇J(F,)Y
h' WHEN CAST(rt0.c0 AS NUMERIC) THEN (rt0.c2 IN ()) ELSE ((rt0.c1)-(rt0.c1)) END);
SELECT ALL * FROM rt0 WHERE (CASE ((rt0.c1)|(rt0.c1))  WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c0)) THEN LAST_INSERT_ROWID() WHEN ((rt0.c1)-(rt0.c1)) THEN '螇J(F,)Y
h' WHEN CAST(rt0.c0 AS NUMERIC) THEN (rt0.c2 IN ()) ELSE ((rt0.c1)-(rt0.c1)) END) LIMIT 2 INTERSECT SELECT ALL * FROM rt0 WHERE (((((((((((rt0.c1 COLLATE NOCASE)AND(((rt0.c1)<<(rt0.c0)))))OR(((rt0.c2)%(rt0.c2)))))OR((((0.8523939307818555, 0.8541107692162881))<((rt0.c1, rt0.c2))))))AND(((rt0.c1)-(rt0.c2)))))OR((NOT (rt0.c3))))) LIMIT 2;
SELECT * FROM rt0 WHERE (CASE ((rt0.c1)|(rt0.c1))  WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c0)) THEN LAST_INSERT_ROWID() WHEN ((rt0.c1)-(rt0.c1)) THEN '螇J(F,)Y
h' WHEN CAST(rt0.c0 AS NUMERIC) THEN (rt0.c2 IN ()) ELSE ((rt0.c1)-(rt0.c1)) END);
SELECT ALL * FROM rt0 WHERE (CASE ((rt0.c1)|(rt0.c1))  WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c0)) THEN LAST_INSERT_ROWID() WHEN ((rt0.c1)-(rt0.c1)) THEN '螇J(F,)Y
h' WHEN CAST(rt0.c0 AS NUMERIC) THEN (rt0.c2 IN ()) ELSE ((rt0.c1)-(rt0.c1)) END) LIMIT 2 INTERSECT SELECT ALL * FROM rt0 WHERE (((((((((((rt0.c1 COLLATE NOCASE)AND(((rt0.c1)<<(rt0.c0)))))OR(((rt0.c2)%(rt0.c2)))))OR((((0.8523939307818555, 0.8541107692162881))<((rt0.c1, rt0.c2))))))AND(((rt0.c1)-(rt0.c2)))))OR((NOT (rt0.c3))))) LIMIT 2;
SELECT ALL * FROM rt0 WHERE ((((NOT (rt0.c1)))<(rt0.c1 COLLATE BINARY))) ORDER BY (+ (((((x'b228')AND(rt0.c3)))AND(rt0.c3)))) DESC, (((((0.2967024321954236))>((rt0.c2))))*(((rt0.c3)OR(rt0.c2)))) DESC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((NOT (rt0.c1)))<(rt0.c1 COLLATE BINARY))) ORDER BY (+ (((((x'b228')AND(rt0.c3)))AND(rt0.c3)))) DESC, (((((0.2967024321954236))>((rt0.c2))))*(((rt0.c3)OR(rt0.c2)))) DESC  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE ((((rt0.c0)LIKE(rt0.c1)) IN ((~ (rt0.c3))))) ORDER BY (+ (((((x'b228')AND(rt0.c3)))AND(rt0.c3)))) DESC, (((((0.2967024321954236))>((rt0.c2))))*(((rt0.c3)OR(rt0.c2)))) DESC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((NOT (rt0.c1)))<(rt0.c1 COLLATE BINARY))) ORDER BY (+ (((((x'b228')AND(rt0.c3)))AND(rt0.c3)))) DESC, (((((0.2967024321954236))>((rt0.c2))))*(((rt0.c3)OR(rt0.c2)))) DESC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((NOT (rt0.c1)))<(rt0.c1 COLLATE BINARY))) ORDER BY (+ (((((x'b228')AND(rt0.c3)))AND(rt0.c3)))) DESC, (((((0.2967024321954236))>((rt0.c2))))*(((rt0.c3)OR(rt0.c2)))) DESC  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE ((((rt0.c0)LIKE(rt0.c1)) IN ((~ (rt0.c3))))) ORDER BY (+ (((((x'b228')AND(rt0.c3)))AND(rt0.c3)))) DESC, (((((0.2967024321954236))>((rt0.c2))))*(((rt0.c3)OR(rt0.c2)))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (((((vt1.c0)|(vt1.c0))) NOT NULL));
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)|(vt1.c0))) NOT NULL))AND((+ ((~ (vt1.c0))))))) LIMIT 0X2 INTERSECT SELECT ALL * FROM vt1 WHERE ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))))=((x'' COLLATE BINARY)))) LIMIT 0X2;
SELECT * FROM vt1 WHERE (((((vt1.c0)|(vt1.c0))) NOT NULL));
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)|(vt1.c0))) NOT NULL))AND((+ ((~ (vt1.c0))))))) LIMIT 0X2 INTERSECT SELECT ALL * FROM vt1 WHERE ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))))=((x'' COLLATE BINARY)))) LIMIT 0X2;
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0)))>>((((vt1.c0, vt1.c0, 1.304629726E9))>((vt1.c0, vt1.c0, vt1.c0)))))) ORDER BY (~ (((vt1.c0)&(vt1.c0)))) DESC  NULLS LAST, ((((((((((((0.28860935593752846)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))IS(vt1.c0)) ASC;
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0)))>>((((vt1.c0, vt1.c0, 1.304629726E9))>((vt1.c0, vt1.c0, vt1.c0)))))) ORDER BY CASE WHEN ((vt1.c0) NOTNULL) THEN (vt1.c0 IN (vt1.c0)) WHEN (vt1.c0 IN (vt1.c0)) THEN ((NULL) ISNULL) END  NULLS FIRST LIMIT 0x3 INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (((((((vt1.c0) ISNULL))AND(((((vt1.c0)AND(vt1.c0)))OR(0.21635967761296637)))))AND(vt1.c0 COLLATE NOCASE))) ORDER BY CASE WHEN ((vt1.c0) NOTNULL) THEN (vt1.c0 IN (vt1.c0)) WHEN (vt1.c0 IN (vt1.c0)) THEN ((NULL) ISNULL) END  NULLS FIRST LIMIT 3;
SELECT * FROM rt0 WHERE (CAST((rt0.c0 IN ()) AS TEXT));
SELECT ALL * FROM rt0 WHERE (((CAST((rt0.c0 IN ()) AS TEXT))AND(((((rt0.c3)=(rt0.c0))) NOTNULL)))) INTERSECT SELECT ALL * FROM rt0 WHERE ((((((~ (rt0.c1)))AND(((rt0.c2)IS(rt0.c3)))))OR(CASE WHEN rt0.c2 THEN rt0.c3 END)));
SELECT * FROM rt0 WHERE (CAST((rt0.c0 IN ()) AS TEXT));
SELECT ALL * FROM rt0 WHERE (((CAST((rt0.c0 IN ()) AS TEXT))AND(((((rt0.c3)=(rt0.c0))) NOTNULL)))) INTERSECT SELECT ALL * FROM rt0 WHERE ((((((~ (rt0.c1)))AND(((rt0.c2)IS(rt0.c3)))))OR(CASE WHEN rt0.c2 THEN rt0.c3 END)));
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (CAST(((vt1.c0) NOTNULL) AS NUMERIC)) ORDER BY ((NULL)IS NOT(CAST(rt0.c3 AS REAL))) DESC  NULLS FIRST;
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (CAST(((vt1.c0) NOTNULL) AS NUMERIC)) ORDER BY ((NULL)IS NOT(CAST(rt0.c3 AS REAL))) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE (CAST(rt0.c2 AS REAL) COLLATE NOCASE);
SELECT DISTINCT * FROM rt0 WHERE (CAST(rt0.c2 AS REAL) COLLATE NOCASE) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((+ ('96167799')))<((((rt0.c2, x'75')) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c1))))));
SELECT ALL * FROM rt0 WHERE (CAST(rt0.c2 AS REAL) COLLATE NOCASE);
SELECT DISTINCT * FROM rt0 WHERE (CAST(rt0.c2 AS REAL) COLLATE NOCASE) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((+ ('96167799')))<((((rt0.c2, x'75')) NOT BETWEEN ((rt0.c2, rt0.c0)) AND ((rt0.c3, rt0.c1))))));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((LIKELY(vt1.c0))=(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((LIKELY(vt1.c0))==(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND(((((((vt1.c0)AND((((vt1.c0, vt1.c0))==((vt1.c0, x'7b'))))))AND((+ (vt1.c0)))))OR(((vt1.c0)||(vt1.c0))))))) ORDER BY (+ (((7.51361517E8)==(x'')))) ASC  NULLS FIRST, (((((vt1.c0, vt1.c0, vt1.c0))==((vt1.c0, NULL, vt1.c0))))-(CAST(vt1.c0 AS BLOB))) DESC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CAST(((((vt1.c0)AND('-278095367')))AND(0.8554878643157302)) AS NUMERIC)) ORDER BY (+ (((7.51361517E8)==(x'')))) ASC  NULLS FIRST, (((((vt1.c0, vt1.c0, vt1.c0))==((vt1.c0, NULL, vt1.c0))))-(CAST(vt1.c0 AS BLOB))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN ())) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN 0.07093161527718539 ELSE (vt1.c0 IN (vt1.c0)) END DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN ()))AND(((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))<=((NOT (vt1.c0))))))) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN 0.07093161527718539 ELSE (vt1.c0 IN (vt1.c0)) END DESC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1 WHERE ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN ())) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN 0.07093161527718539 ELSE (vt1.c0 IN (vt1.c0)) END DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN ()))AND(((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))<=((NOT (vt1.c0))))))) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN 0.07093161527718539 ELSE (vt1.c0 IN (vt1.c0)) END DESC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON (((((rt0.c0 IN (rt0.c2)))OR(((rt0.c1)OR(rt0.c1)))))AND(NULLIF(DISTINCT vt1.c0, rt0.c2))) WHERE (((((((vt1.c0)AND(rt0.c2)))AND(rt0.c1))) BETWEEN ((((rt0.c3, rt0.c0))>=((vt1.c0, rt0.c2)))) AND (((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c2)))));
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON (((((rt0.c0 IN (rt0.c2)))OR(((rt0.c1)OR(rt0.c1)))))AND(NULLIF(DISTINCT vt1.c0, rt0.c2))) WHERE (((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c1))) BETWEEN ((((rt0.c3, rt0.c0))>=((vt1.c0, rt0.c2)))) AND (((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c2)))))AND(((CAST(rt0.c1 AS INTEGER))%(UPPER(DISTINCT rt0.c0)))))) ORDER BY ((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))OR(rt0.c2)))OR(NULL)) COLLATE RTRIM DESC, (- (CAST(rt0.c2 AS INTEGER))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON (((((rt0.c0 IN (rt0.c2)))OR(((rt0.c1)OR(rt0.c1)))))AND(NULLIF(DISTINCT vt1.c0, rt0.c2))) WHERE (rt0.c1) ORDER BY ((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))OR(rt0.c2)))OR(NULL)) COLLATE RTRIM DESC, (- (CAST(rt0.c2 AS INTEGER))) LIMIT 0X1;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON (((((rt0.c0 IN (rt0.c2)))OR(((rt0.c1)OR(rt0.c1)))))AND(NULLIF(DISTINCT vt1.c0, rt0.c2))) WHERE (((((((vt1.c0)AND(rt0.c2)))AND(rt0.c1))) BETWEEN ((((rt0.c3, rt0.c0))>=((vt1.c0, rt0.c2)))) AND (((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c2)))));
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON (((((rt0.c0 IN (rt0.c2)))OR(((rt0.c1)OR(rt0.c1)))))AND(NULLIF(DISTINCT vt1.c0, rt0.c2))) WHERE (((((((((vt1.c0)AND(rt0.c2)))AND(rt0.c1))) BETWEEN ((((rt0.c3, rt0.c0))>=((vt1.c0, rt0.c2)))) AND (((((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c2)))))AND(((CAST(rt0.c1 AS INTEGER))%(UPPER(DISTINCT rt0.c0)))))) ORDER BY ((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))OR(rt0.c2)))OR(NULL)) COLLATE RTRIM DESC, (- (CAST(rt0.c2 AS INTEGER))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON (((((rt0.c0 IN (rt0.c2)))OR(((rt0.c1)OR(rt0.c1)))))AND(NULLIF(DISTINCT vt1.c0, rt0.c2))) WHERE (rt0.c1) ORDER BY ((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))OR(rt0.c2)))OR(NULL)) COLLATE RTRIM DESC, (- (CAST(rt0.c2 AS INTEGER))) LIMIT 0X1;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0))) NOT BETWEEN (((rt0.c2) NOTNULL)) AND (rt0.c3)));
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0))) NOT BETWEEN (((rt0.c2) NOTNULL)) AND (rt0.c3))) LIMIT 0X2 INTERSECT SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ('1648014510') LIMIT 2;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0))) NOT BETWEEN (((rt0.c2) NOTNULL)) AND (rt0.c3)));
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0))) NOT BETWEEN (((rt0.c2) NOTNULL)) AND (rt0.c3))) LIMIT 0X2 INTERSECT SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ('1648014510') LIMIT 2;
SELECT * FROM vt1 WHERE ((+ (vt1.c0)));
SELECT ALL * FROM vt1 WHERE ((+ (vt1.c0))) LIMIT 0X1 INTERSECT SELECT ALL * FROM vt1 WHERE (CAST((('709578335') IS TRUE) AS BLOB)) LIMIT 1;
SELECT * FROM vt1 WHERE ((+ (vt1.c0)));
SELECT ALL * FROM vt1 WHERE ((+ (vt1.c0))) LIMIT 0X1 INTERSECT SELECT ALL * FROM vt1 WHERE (CAST((('709578335') IS TRUE) AS BLOB)) LIMIT 1;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((CAST(rt0.c2 AS NUMERIC) IN (0.6637182323726923))) ORDER BY ((((((((rt0.c0)OR(rt0.c3)))AND(rt0.c1)))AND(rt0.c0)))-(CASE rt0.c0  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END))  NULLS FIRST, (- (((rt0.c2)=(rt0.c3)))), ((((rt0.c0)+(rt0.c1))) IS FALSE) ASC;
SELECT DISTINCT MIN(rt0.c3) FROM rt0 WHERE ((CAST(rt0.c2 AS NUMERIC) IN (0.6637182323726923))) ORDER BY ((rt0.c3 COLLATE NOCASE) NOT BETWEEN (rt0.c2 COLLATE NOCASE) AND (((rt0.c1)==(rt0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (0.06245407668010161) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL END) IS FALSE) ASC  NULLS FIRST, CASE WHEN ((vt1.c0)%(NULL)) THEN x'd0' END DESC;
SELECT DISTINCT * FROM vt1 WHERE (((0.06245407668010161)AND(((((vt1.c0)>=(vt1.c0))) IS FALSE)))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL END) IS FALSE) ASC  NULLS FIRST, CASE WHEN ((vt1.c0)%(NULL)) THEN x'd0' END DESC LIMIT 0;
SELECT ALL * FROM vt1 WHERE (0.06245407668010161) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL END) IS FALSE) ASC  NULLS FIRST, CASE WHEN ((vt1.c0)%(NULL)) THEN x'd0' END DESC;
SELECT DISTINCT * FROM vt1 WHERE (((0.06245407668010161)AND(((((vt1.c0)>=(vt1.c0))) IS FALSE)))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN NULL END) IS FALSE) ASC  NULLS FIRST, CASE WHEN ((vt1.c0)%(NULL)) THEN x'd0' END DESC LIMIT 0;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON ((vt1.c0 COLLATE BINARY) NOTNULL) WHERE (((-1.82911986E8 IN (rt0.c0, rt0.c1)) IN (rt0.c2))) ORDER BY ((((((rt0.c0) NOT NULL))AND(((((vt1.c0)OR(rt0.c3)))OR(x'19')))))AND(((rt0.c1)LIKE(vt1.c0))))  NULLS FIRST;
SELECT * FROM rt0 INNER JOIN vt1 ON ((vt1.c0 COLLATE BINARY) NOTNULL) WHERE (((((-1.82911986E8 IN (rt0.c0)) IN (rt0.c2)))AND((((((rt0.c0)<>(rt0.c2)), CAST(rt0.c0 AS BLOB), CAST(rt0.c1 AS TEXT)))<=((((rt0.c3)IS(vt1.c0)), ((rt0.c2)||(rt0.c0)), ((rt0.c3)!=(rt0.c1)))))))) ORDER BY ((((((rt0.c0) NOT NULL))AND(((((vt1.c0)OR(rt0.c3)))OR(x'19')))))AND(((rt0.c1)LIKE(vt1.c0))))  NULLS FIRST LIMIT 0x2;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON ((vt1.c0 COLLATE BINARY) NOTNULL) WHERE (((-1.82911986E8 IN (rt0.c0, rt0.c1)) IN (rt0.c2))) ORDER BY ((((((rt0.c0) NOT NULL))AND(((((vt1.c0)OR(rt0.c3)))OR(x'19')))))AND(((rt0.c1)LIKE(vt1.c0))))  NULLS FIRST;
SELECT * FROM rt0 INNER JOIN vt1 ON ((vt1.c0 COLLATE BINARY) NOTNULL) WHERE (((((-1.82911986E8 IN (rt0.c0)) IN (rt0.c2)))AND((((((rt0.c0)<>(rt0.c2)), CAST(rt0.c0 AS BLOB), CAST(rt0.c1 AS TEXT)))<=((((rt0.c3)IS(vt1.c0)), ((rt0.c2)||(rt0.c0)), ((rt0.c3)!=(rt0.c1)))))))) ORDER BY ((((((rt0.c0) NOT NULL))AND(((((vt1.c0)OR(rt0.c3)))OR(x'19')))))AND(((rt0.c1)LIKE(vt1.c0))))  NULLS FIRST LIMIT 0x2;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (((-335267597)LIKE(((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2))))) ORDER BY ((((((((((((rt0.c0)AND('-86516757')))OR(rt0.c3)))OR(0.19527566392492768)))AND(rt0.c0)))AND(0.4666268581692452)))IS NOT((~ (rt0.c1)))) DESC  NULLS FIRST, LIKE(rt0.c3, NULL) COLLATE BINARY ASC  NULLS LAST;
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((0xffffffffec0438f3)LIKE(((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2)))))AND(rt0.c2))) ORDER BY (('426117718')GLOB(CAST(rt0.c3 AS BLOB)))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((rt0.c0 IN (rt0.c0)) IN (QUOTE(rt0.c2), (rt0.c0 IN (rt0.c0, rt0.c2))))) ORDER BY (('426117718')GLOB(CAST(rt0.c3 AS BLOB)))  NULLS FIRST LIMIT 0x1;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON NULLIF(vt1.c0, rt0.c2) COLLATE BINARY WHERE (rt0.c0);
SELECT * FROM rt0 INNER JOIN vt1 ON NULLIF(vt1.c0, rt0.c2) COLLATE BINARY WHERE (rt0.c0);
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON NULLIF(vt1.c0, rt0.c2) COLLATE BINARY WHERE (rt0.c0);
SELECT * FROM rt0 INNER JOIN vt1 ON NULLIF(vt1.c0, rt0.c2) COLLATE BINARY WHERE (rt0.c0);
SELECT MAX(rt0.c1) FROM vt1 NATURAL JOIN rt0 WHERE (((((+ (vt1.c0)), ((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c0))))<((rt0.c0 COLLATE NOCASE, 1779903489)))) ORDER BY ((((((((((rt0.c0)OR(rt0.c0)))AND(vt1.c0)))OR(rt0.c1)))OR(((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c0)))))OR(-722450701 COLLATE NOCASE))  NULLS LAST, ((((((rt0.c1)OR(737066531)))OR(rt0.c3)))<=(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c2)))AND(rt0.c3)))), ((HEX(rt0.c2))|(((vt1.c0)IS NOT(vt1.c0))))  NULLS FIRST;
SELECT DISTINCT MAX(rt0.c1) FROM vt1 NATURAL JOIN rt0 WHERE (((((+ (vt1.c0)), ((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c0))))<((rt0.c0 COLLATE NOCASE, 0x6a172c01)))) ORDER BY ((((rt0.c0) ISNULL))+(CAST(vt1.c0 AS TEXT)))  NULLS LAST, (((((rt0.c2)==(rt0.c2))))<>(((((rt0.c3, vt1.c0, rt0.c3, rt0.c2)) BETWEEN ((rt0.c0, rt0.c1, vt1.c0, rt0.c1)) AND ((rt0.c1, rt0.c1, vt1.c0, vt1.c0)))))) LIMIT 0 INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM vt1 NATURAL JOIN rt0 WHERE ((((((((NOT (rt0.c0)))AND((~ ('0.5551252374330624')))))OR(rt0.c3)))OR(((rt0.c0)<>(rt0.c1))))) ORDER BY ((((rt0.c0) ISNULL))+(CAST(vt1.c0 AS TEXT)))  NULLS LAST, (((((rt0.c2)==(rt0.c2))))<>(((((rt0.c3, vt1.c0, rt0.c3, rt0.c2)) BETWEEN ((rt0.c0, rt0.c1, vt1.c0, rt0.c1)) AND ((rt0.c1, rt0.c1, vt1.c0, vt1.c0)))))) LIMIT 0x0;
SELECT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))OR('')))IS NOT(CAST(vt1.c0 AS INTEGER))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))OR('')))IS NOT(CAST(vt1.c0 AS INTEGER)))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) LIMIT 0x0;
SELECT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))OR('')))IS NOT(CAST(vt1.c0 AS INTEGER))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))OR('')))IS NOT(CAST(vt1.c0 AS INTEGER)))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) LIMIT 0x0;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) IS FALSE));
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) IS FALSE)) ORDER BY CAST(((vt1.c0) NOTNULL) AS TEXT)  NULLS FIRST, CAST(0.9573903141014027 AS BLOB)  NULLS LAST, (((((vt1.c0, vt1.c0))==((vt1.c0, vt1.c0))))&(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) ASC;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) IS FALSE));
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) IS FALSE)) ORDER BY CAST(((vt1.c0) NOTNULL) AS TEXT)  NULLS FIRST, CAST(0.9573903141014027 AS BLOB)  NULLS LAST, (((((vt1.c0, vt1.c0))==((vt1.c0, vt1.c0))))&(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) ASC;
SELECT * FROM rt0 WHERE (CAST(((rt0.c1)IS(rt0.c1)) AS NUMERIC)) ORDER BY (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c2)) IN (rt0.c0 COLLATE BINARY))  NULLS LAST, (((rt0.c2, x'')) BETWEEN (((NOT (rt0.c0)), rt0.c1 COLLATE RTRIM)) AND ((((rt0.c1)>(rt0.c1)), HEX(DISTINCT NULL)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (CAST(((rt0.c1)IS(rt0.c1)) AS NUMERIC)) ORDER BY (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c2)) IN (rt0.c0 COLLATE BINARY))  NULLS LAST, (((rt0.c2, x'')) BETWEEN (((NOT (rt0.c0)), rt0.c1 COLLATE RTRIM)) AND ((((rt0.c1)>(rt0.c1)), HEX(DISTINCT NULL)))) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (CAST(((rt0.c1)IS(rt0.c1)) AS NUMERIC)) ORDER BY (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c2)) IN (rt0.c0 COLLATE BINARY))  NULLS LAST, (((rt0.c2, x'')) BETWEEN (((NOT (rt0.c0)), rt0.c1 COLLATE RTRIM)) AND ((((rt0.c1)>(rt0.c1)), HEX(DISTINCT NULL)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (CAST(((rt0.c1)IS(rt0.c1)) AS NUMERIC)) ORDER BY (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c2)) IN (rt0.c0 COLLATE BINARY))  NULLS LAST, (((rt0.c2, x'')) BETWEEN (((NOT (rt0.c0)), rt0.c1 COLLATE RTRIM)) AND ((((rt0.c1)>(rt0.c1)), HEX(DISTINCT NULL)))) DESC  NULLS FIRST;
SELECT COUNT(*) FROM rt0, vt1 WHERE (((ABS(DISTINCT rt0.c1))AND(((rt0.c2)>>(vt1.c0))))) ORDER BY (((UPPER(rt0.c2)))<=((((((vt1.c0)OR(rt0.c0)))AND(rt0.c1))))) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((ABS(DISTINCT rt0.c1))AND(((rt0.c2)>>(vt1.c0)))))AND(((HEX(DISTINCT rt0.c3))LIKE(((rt0.c2) NOT BETWEEN (rt0.c3) AND (vt1.c0))))))) ORDER BY (((UPPER(rt0.c2)))<=((((((vt1.c0)OR(rt0.c0)))AND(rt0.c1))))) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (CASE WHEN rt0.c2 COLLATE NOCASE THEN ((rt0.c0)||(vt1.c0)) WHEN ((rt0.c1)AND(vt1.c0)) THEN (NOT (rt0.c2)) WHEN ((rt0.c0) IS FALSE) THEN (((rt0.c3, rt0.c1, rt0.c3, rt0.c3))!=((rt0.c1, vt1.c0, 0.9857481902538924, rt0.c1))) ELSE rt0.c1 COLLATE RTRIM END);
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((CASE WHEN rt0.c2 COLLATE NOCASE THEN ((rt0.c0)||(vt1.c0)) WHEN ((rt0.c1)AND(vt1.c0)) THEN (NOT (rt0.c2)) WHEN ((rt0.c0) IS FALSE) THEN (((rt0.c3, rt0.c1, rt0.c3, rt0.c3))<>((rt0.c1, vt1.c0, 0.9857481902538924, rt0.c1))) ELSE rt0.c1 COLLATE RTRIM END)AND((~ ((((vt1.c0, rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((0.9027275049664062, vt1.c0, rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c2, vt1.c0, rt0.c2)))))))) ORDER BY x''  NULLS FIRST, (NOT ((- (rt0.c3)))) ASC, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c3 END)<>(((rt0.c0) NOT BETWEEN (rt0.c1) AND (NULL)))) ASC LIMIT 3 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((('	') ISNULL)) ORDER BY x''  NULLS FIRST, (NOT ((- (rt0.c3)))) ASC, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c3 END)!=(((rt0.c0) NOT BETWEEN (rt0.c1) AND (NULL)))) ASC LIMIT 0x3;
SELECT ALL * FROM vt1 WHERE (0.08289157558532245) ORDER BY CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC) DESC;
SELECT ALL * FROM vt1 WHERE (0.08289157558532245) ORDER BY CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC) DESC LIMIT 0;
SELECT ALL * FROM vt1 WHERE (0.08289157558532245) ORDER BY CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC) DESC;
SELECT ALL * FROM vt1 WHERE (0.08289157558532245) ORDER BY CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC) DESC LIMIT 0;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((~ (vt1.c0))) ISNULL)) ORDER BY json_object(((vt1.c0)GLOB(vt1.c0)), '-749134316', (- (vt1.c0)), LIKELY(vt1.c0), (((vt1.c0, vt1.c0, vt1.c0, vt1.c0))!=((vt1.c0, vt1.c0, vt1.c0, '1082644571'))), ((vt1.c0)IS NOT(vt1.c0))) ASC, (CAST(vt1.c0 AS TEXT) IN (CAST(vt1.c0 AS TEXT), (~ (vt1.c0)))), (((((NULL, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))))<=(((vt1.c0)<<(vt1.c0))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((((~ (vt1.c0))) ISNULL))AND(LIKELY(IFNULL(DISTINCT vt1.c0, vt1.c0))))) ORDER BY json_object(((vt1.c0)GLOB(vt1.c0)), '-749134316', (- (vt1.c0)), LIKELY(vt1.c0), (((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<>((vt1.c0, vt1.c0, vt1.c0, '1082644571'))), ((vt1.c0)IS NOT(vt1.c0))) ASC, (CAST(vt1.c0 AS TEXT) IN (CAST(vt1.c0 AS TEXT), (~ (vt1.c0)))), (((((NULL, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))))<=(((vt1.c0)<<(vt1.c0)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((vt1.c0)AND(vt1.c0)))OR((NOT (vt1.c0))))) ORDER BY json_object(((vt1.c0)GLOB(vt1.c0)), '-749134316', (- (vt1.c0)), LIKELY(vt1.c0), (((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<>((vt1.c0, vt1.c0, vt1.c0, '1082644571'))), ((vt1.c0)IS NOT(vt1.c0))) ASC, (CAST(vt1.c0 AS TEXT) IN (CAST(vt1.c0 AS TEXT), (~ (vt1.c0)))), (((((NULL, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))))<=(((vt1.c0)<<(vt1.c0))));
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c1);
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c1)AND(((rt0.c2 COLLATE RTRIM)>(CASE WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c3 END))))) ORDER BY ((((rt0.c3)>(rt0.c2)))=(((rt0.c2)<<(rt0.c2))))  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((((rt0.c1)OR(rt0.c0)))AND(vt1.c0)))AND(rt0.c2))) BETWEEN ((((NULL, rt0.c3, vt1.c0)) BETWEEN ((rt0.c2, rt0.c1, '875598938')) AND ((rt0.c3, vt1.c0, rt0.c2)))) AND (CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 ELSE vt1.c0 END))) ORDER BY ((((rt0.c3)>(rt0.c2)))=(((rt0.c2)<<(rt0.c2))))  NULLS FIRST LIMIT 2;
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c1);
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c1)AND(((rt0.c2 COLLATE RTRIM)>(CASE WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c3 END))))) ORDER BY ((((rt0.c3)>(rt0.c2)))=(((rt0.c2)<<(rt0.c2))))  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((((rt0.c1)OR(rt0.c0)))AND(vt1.c0)))AND(rt0.c2))) BETWEEN ((((NULL, rt0.c3, vt1.c0)) BETWEEN ((rt0.c2, rt0.c1, '875598938')) AND ((rt0.c3, vt1.c0, rt0.c2)))) AND (CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 ELSE vt1.c0 END))) ORDER BY ((((rt0.c3)>(rt0.c2)))=(((rt0.c2)<<(rt0.c2))))  NULLS FIRST LIMIT 2;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3)AND('')) IN ((rt0.c2 IN ()), (((rt0.c3, rt0.c3, rt0.c3))<=((rt0.c0, rt0.c0, rt0.c0)))))) ORDER BY ((((CAST(rt0.c2 AS TEXT))AND(LIKELIHOOD(rt0.c1, rt0.c2))))AND(x'')), CASE WHEN ((rt0.c0) ISNULL) THEN ((rt0.c2)<=(rt0.c1)) WHEN (+ (rt0.c2)) THEN ((rt0.c1)LIKE(rt0.c0)) WHEN (rt0.c0 IN (rt0.c2, rt0.c1)) THEN rt0.c1 ELSE rt0.c0 END DESC, ((((rt0.c1 IN ()), ((rt0.c0)<>(rt0.c0))))>((rt0.c3, CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 END))) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c3)AND('')) IN ((rt0.c2 IN ()), (((rt0.c3, rt0.c3, rt0.c3))<=((rt0.c0, rt0.c0, rt0.c0))))))AND(RTRIM((- (rt0.c1)))))) ORDER BY ((NOT (rt0.c0)) IN (((((NULL)AND(rt0.c1)))OR('1965182289')), x'aea6faeb'))  NULLS FIRST, (((~ (0.8374026694610095))) BETWEEN (((rt0.c2)IS NOT(rt0.c2))) AND ('1*')) DESC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3)AND('')) IN ((rt0.c2 IN ()), (((rt0.c3, rt0.c3, rt0.c3))<=((rt0.c0, rt0.c0, rt0.c0)))))) ORDER BY ((((CAST(rt0.c2 AS TEXT))AND(LIKELIHOOD(rt0.c1, rt0.c2))))AND(x'')), CASE WHEN ((rt0.c0) ISNULL) THEN ((rt0.c2)<=(rt0.c1)) WHEN (+ (rt0.c2)) THEN ((rt0.c1)LIKE(rt0.c0)) WHEN (rt0.c0 IN (rt0.c2, rt0.c1)) THEN rt0.c1 ELSE rt0.c0 END DESC, ((((rt0.c1 IN ()), ((rt0.c0)<>(rt0.c0))))>((rt0.c3, CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 END))) DESC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, '-732813397')) AND ((vt1.c0, NULL, x'd002', vt1.c0, NULL, vt1.c0))))%(rtreenode(vt1.c0, vt1.c0)))) ORDER BY CAST(CASE vt1.c0  WHEN x'40' THEN vt1.c0 END AS REAL), 't]{6Z' ASC, (((NOT (vt1.c0)))=(CAST(vt1.c0 AS NUMERIC)))  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, '-732813397')) AND ((vt1.c0, NULL, x'd002', vt1.c0, NULL, vt1.c0))))%(rtreenode(vt1.c0, vt1.c0)))) ORDER BY CAST(CASE vt1.c0  WHEN x'40' THEN vt1.c0 END AS REAL), 't]{6Z' ASC, (((NOT (vt1.c0)))=(CAST(vt1.c0 AS NUMERIC)))  NULLS LAST LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE (0.02271152195514481) ORDER BY (NOT ((rt0.c1 IN (rt0.c3)))) DESC  NULLS LAST, TIME(rt0.c0, vt1.c0, vt1.c0) COLLATE RTRIM  NULLS LAST, ('!' IN (((rt0.c2) ISNULL)));
SELECT * FROM rt0, vt1 WHERE (((0.02271152195514481)AND(((CASE rt0.c0  WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END) NOT BETWEEN ((~ (rt0.c3))) AND (rt0.c1))))) ORDER BY (NOT ((rt0.c1 IN (rt0.c3)))) DESC  NULLS LAST, TIME(rt0.c0, vt1.c0, vt1.c0) COLLATE RTRIM  NULLS LAST, ('!' IN (((rt0.c2) ISNULL)));
SELECT ALL * FROM rt0, vt1 WHERE (0.02271152195514481) ORDER BY (NOT ((rt0.c1 IN (rt0.c3)))) DESC  NULLS LAST, TIME(rt0.c0, vt1.c0, vt1.c0) COLLATE RTRIM  NULLS LAST, ('!' IN (((rt0.c2) ISNULL)));
SELECT * FROM rt0, vt1 WHERE (((0.02271152195514481)AND(((CASE rt0.c0  WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END) NOT BETWEEN ((~ (rt0.c3))) AND (rt0.c1))))) ORDER BY (NOT ((rt0.c1 IN (rt0.c3)))) DESC  NULLS LAST, TIME(rt0.c0, vt1.c0, vt1.c0) COLLATE RTRIM  NULLS LAST, ('!' IN (((rt0.c2) ISNULL)));
SELECT ALL * FROM vt1 WHERE (CASE ((vt1.c0)IS NOT(vt1.c0))  WHEN (('8^Wk\fYw')==(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0) IS FALSE) THEN LIKELY(vt1.c0) WHEN ((vt1.c0) NOTNULL) THEN (NOT (vt1.c0)) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE ((vt1.c0)IS NOT(vt1.c0))  WHEN (('8^Wk\fYw')==(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0) IS FALSE) THEN LIKELY(vt1.c0) WHEN ((vt1.c0) NOTNULL) THEN (NOT (vt1.c0)) END) ORDER BY (('|')&((((((((((((('UH{﫱h')AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))), ((vt1.c0) BETWEEN (TRIM(vt1.c0)) AND ((('-1484881467')AND(vt1.c0))))  NULLS FIRST, ((((((((vt1.c0) ISNULL))OR(((vt1.c0)<>(vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND((vt1.c0 IN (''))))  NULLS LAST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0) NOTNULL)) IS FALSE)) ORDER BY (('|')&((((((((((((('UH{﫱h')AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))), ((vt1.c0) BETWEEN (TRIM(vt1.c0)) AND ((('-1484881467')AND(vt1.c0))))  NULLS FIRST, ((((((((vt1.c0) ISNULL))OR(((vt1.c0)!=(vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND((vt1.c0 IN (''))))  NULLS LAST LIMIT 0X3;
SELECT ALL * FROM vt1 WHERE (CASE ((vt1.c0)IS NOT(vt1.c0))  WHEN (('8^Wk\fYw')==(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0) IS FALSE) THEN LIKELY(vt1.c0) WHEN ((vt1.c0) NOTNULL) THEN (NOT (vt1.c0)) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE ((vt1.c0)IS NOT(vt1.c0))  WHEN (('8^Wk\fYw')==(vt1.c0)) THEN CAST(vt1.c0 AS REAL) WHEN ((vt1.c0) IS FALSE) THEN LIKELY(vt1.c0) WHEN ((vt1.c0) NOTNULL) THEN (NOT (vt1.c0)) END) ORDER BY (('|')&((((((((((((('UH{﫱h')AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))), ((vt1.c0) BETWEEN (TRIM(vt1.c0)) AND ((('-1484881467')AND(vt1.c0))))  NULLS FIRST, ((((((((vt1.c0) ISNULL))OR(((vt1.c0)<>(vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND((vt1.c0 IN (''))))  NULLS LAST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0) NOTNULL)) IS FALSE)) ORDER BY (('|')&((((((((((((('UH{﫱h')AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))), ((vt1.c0) BETWEEN (TRIM(vt1.c0)) AND ((('-1484881467')AND(vt1.c0))))  NULLS FIRST, ((((((((vt1.c0) ISNULL))OR(((vt1.c0)!=(vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND((vt1.c0 IN (''))))  NULLS LAST LIMIT 0X3;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) NOT BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((vt1.c0)!=(vt1.c0)))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) NOT BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((vt1.c0)!=(vt1.c0))))) ORDER BY (((((vt1.c0)AND(vt1.c0)))AND(NULL)) IN (CAST(vt1.c0 AS REAL)))  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((LOWER(vt1.c0), ((vt1.c0) IS FALSE), (('-1621751491')<=(vt1.c0)), ((vt1.c0) ISNULL), vt1.c0 COLLATE BINARY)) AND ((IFNULL(vt1.c0, '0.4636220470083813'), (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))), NULL, ((vt1.c0) ISNULL), (vt1.c0 IN (vt1.c0, vt1.c0)))))) ORDER BY ((+ (vt1.c0)) IN (CAST(vt1.c0 AS BLOB)))  NULLS LAST;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((LOWER(vt1.c0), ((vt1.c0) IS FALSE), (('-1621751491')<=(vt1.c0)), ((vt1.c0) ISNULL), vt1.c0 COLLATE BINARY)) AND ((IFNULL(vt1.c0, '0.4636220470083813'), (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))), NULL, ((vt1.c0) ISNULL), (vt1.c0 IN (vt1.c0, vt1.c0)))))) ORDER BY ((+ (vt1.c0)) IN (CAST(vt1.c0 AS BLOB)))  NULLS LAST LIMIT 0x1 INTERSECT SELECT * FROM vt1 WHERE (CASE WHEN (+ (vt1.c0)) THEN ((vt1.c0) IS TRUE) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0)>>(vt1.c0)) END) ORDER BY ((+ (vt1.c0)) IN (CAST(vt1.c0 AS BLOB)))  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((LOWER(vt1.c0), ((vt1.c0) IS FALSE), (('-1621751491')<=(vt1.c0)), ((vt1.c0) ISNULL), vt1.c0 COLLATE BINARY)) AND ((IFNULL(vt1.c0, '0.4636220470083813'), (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))), NULL, ((vt1.c0) ISNULL), (vt1.c0 IN (vt1.c0, vt1.c0)))))) ORDER BY ((+ (vt1.c0)) IN (CAST(vt1.c0 AS BLOB)))  NULLS LAST;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((LOWER(vt1.c0), ((vt1.c0) IS FALSE), (('-1621751491')<=(vt1.c0)), ((vt1.c0) ISNULL), vt1.c0 COLLATE BINARY)) AND ((IFNULL(vt1.c0, '0.4636220470083813'), (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))), NULL, ((vt1.c0) ISNULL), (vt1.c0 IN (vt1.c0, vt1.c0)))))) ORDER BY ((+ (vt1.c0)) IN (CAST(vt1.c0 AS BLOB)))  NULLS LAST LIMIT 0x1 INTERSECT SELECT * FROM vt1 WHERE (CASE WHEN (+ (vt1.c0)) THEN ((vt1.c0) IS TRUE) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0)>>(vt1.c0)) END) ORDER BY ((+ (vt1.c0)) IN (CAST(vt1.c0 AS BLOB)))  NULLS LAST LIMIT 0X1;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((CASE vt1.c0  WHEN 0.8468988153121524 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND((((vt1.c0)) BETWEEN ((NULL)) AND ((vt1.c0))))))AND(((vt1.c0)>=(vt1.c0)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((CASE vt1.c0  WHEN 0.8468988153121524 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND((((vt1.c0)) BETWEEN ((NULL)) AND ((vt1.c0))))))AND(((vt1.c0)>=(vt1.c0))))) ORDER BY (((vt1.c0 IN ()))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE RTRIM) ORDER BY (((vt1.c0 IN ()))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) LIMIT 0;
SELECT MAX(rt0.c1) FROM vt1 LEFT OUTER JOIN rt0 ON CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN -1066686250 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 END COLLATE RTRIM WHERE ((((((+ (rt0.c1)))AND(((rt0.c3) IS FALSE))))OR(((rt0.c0)/(rt0.c1))))) ORDER BY (NOT (((((((rt0.c2)OR(NULL)))AND(rt0.c2)))AND(rt0.c1))));
SELECT DISTINCT MAX(rt0.c1) FROM vt1 LEFT OUTER JOIN rt0 ON CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN 0Xffffffffc06ba8d6 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 END COLLATE RTRIM WHERE ((((((((+ (rt0.c1)))AND(((rt0.c3) IS FALSE))))OR(((rt0.c0)/(rt0.c1)))))AND(CASE WHEN (('.M{UA')&(rt0.c1)) THEN (vt1.c0 IN ()) WHEN vt1.c0 THEN CASE rt0.c0  WHEN vt1.c0 THEN rt0.c2 ELSE rt0.c3 END WHEN (((rt0.c3))>=((rt0.c3))) THEN rt0.c0 WHEN ((rt0.c3)*(rt0.c1)) THEN CAST(rt0.c3 AS INTEGER) ELSE 0.8458136832775563 END))) ORDER BY CASE WHEN CASE rt0.c2  WHEN vt1.c0 THEN '' WHEN rt0.c1 THEN rt0.c1 END THEN (((rt0.c0, vt1.c0)) BETWEEN ((rt0.c1, rt0.c1)) AND ((vt1.c0, rt0.c0))) WHEN (vt1.c0 IN ()) THEN (('')OR(rt0.c0)) ELSE '1386566252' COLLATE NOCASE END  NULLS FIRST, ((x'')>=(CASE WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c0 END));
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c1)OR(CAST(rt0.c0 AS TEXT))))OR(CASE vt1.c0  WHEN x'c0' THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE vt1.c0 END)));
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c1)OR(CAST(rt0.c0 AS TEXT))))OR(CASE vt1.c0  WHEN x'c0' THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE vt1.c0 END)))AND((((NOT (rt0.c0)))<=(0.2980962595720157))))) LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((((((rt0.c2)|(rt0.c3)))AND((((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((vt1.c0))))))OR(CAST(vt1.c0 AS NUMERIC))))OR(((rt0.c3) BETWEEN (vt1.c0) AND (vt1.c0))))) LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c1)OR(CAST(rt0.c0 AS TEXT))))OR(CASE vt1.c0  WHEN x'c0' THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE vt1.c0 END)));
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c1)OR(CAST(rt0.c0 AS TEXT))))OR(CASE vt1.c0  WHEN x'c0' THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 ELSE vt1.c0 END)))AND((((NOT (rt0.c0)))<=(0.2980962595720157))))) LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((((((rt0.c2)|(rt0.c3)))AND((((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((vt1.c0))))))OR(CAST(vt1.c0 AS NUMERIC))))OR(((rt0.c3) BETWEEN (vt1.c0) AND (vt1.c0))))) LIMIT 0;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((((((rt0.c0, rt0.c1))!=((rt0.c2, rt0.c0))))GLOB(NULL))) ORDER BY (((rt0.c2, rt0.c2)) NOT BETWEEN ((((((((rt0.c2)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c3)), (((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))) AND ((((rt0.c1)<(rt0.c2)), rt0.c2))) DESC;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((((((rt0.c0, rt0.c1))<((rt0.c2, rt0.c0))))GLOB(NULL))) ORDER BY (((rt0.c2, rt0.c2)) NOT BETWEEN ((((((((rt0.c2)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c3)), (((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))) AND ((((rt0.c1)<(rt0.c2)), rt0.c2))) DESC LIMIT 0 INTERSECT SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (rt0.c3) ORDER BY (((rt0.c2, rt0.c2)) NOT BETWEEN ((((((((rt0.c2)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c3)), (((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))) AND ((((rt0.c1)<(rt0.c2)), rt0.c2))) DESC LIMIT 0X0;
SELECT * FROM rt0 WHERE (CAST(((rt0.c0)OR(rt0.c1)) AS NUMERIC)) ORDER BY ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN 0Xffffffff89d6559a THEN rt0.c0 END) NOTNULL) ASC, (((NULL) NOT NULL) IN (((rt0.c1)%(NULL)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (CAST(((rt0.c0)OR(rt0.c1)) AS NUMERIC)) ORDER BY ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN 0xffffffff89d6559a THEN rt0.c0 END) NOTNULL) ASC, (((NULL) NOT NULL) IN (((rt0.c1)%(NULL)))) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (CAST(((rt0.c0)OR(rt0.c1)) AS NUMERIC)) ORDER BY ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN 0Xffffffff89d6559a THEN rt0.c0 END) NOTNULL) ASC, (((NULL) NOT NULL) IN (((rt0.c1)%(NULL)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (CAST(((rt0.c0)OR(rt0.c1)) AS NUMERIC)) ORDER BY ((CASE WHEN rt0.c2 THEN rt0.c3 WHEN 0xffffffff89d6559a THEN rt0.c0 END) NOTNULL) ASC, (((NULL) NOT NULL) IN (((rt0.c1)%(NULL)))) DESC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CASE vt1.c0  WHEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (((vt1.c0, vt1.c0))=((vt1.c0, vt1.c0))) WHEN CAST(vt1.c0 AS INTEGER) THEN (vt1.c0 IN (vt1.c0)) WHEN 0.4945895522695284 THEN (vt1.c0 IN (vt1.c0)) ELSE '-1633712743' END) ORDER BY 0.7741148904599026  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((CASE vt1.c0  WHEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (((vt1.c0, vt1.c0))==((vt1.c0, vt1.c0))) WHEN CAST(vt1.c0 AS INTEGER) THEN (vt1.c0 IN (vt1.c0)) WHEN 0.4945895522695284 THEN (vt1.c0 IN (vt1.c0)) ELSE '-1633712743' END)AND(CAST(((vt1.c0) IS TRUE) AS INTEGER)))) ORDER BY ((JULIANDAY(vt1.c0, vt1.c0, vt1.c0))OR(TRIM(vt1.c0, vt1.c0))) LIMIT 1;
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN ((vt1.c0)<>(vt1.c0)) THEN ((('?', vt1.c0, vt1.c0))=(('z', vt1.c0, vt1.c0))) WHEN (vt1.c0 IN (vt1.c0)) THEN ((((((((NULL)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) ELSE json_patch(vt1.c0, 0.40223593027048643) END) ORDER BY CASE ((vt1.c0) ISNULL)  WHEN (vt1.c0 IN (vt1.c0)) THEN ABS(vt1.c0) END  NULLS LAST, ((((0.2881788034171535)IS(vt1.c0)))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))) ASC  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((CASE WHEN ((vt1.c0)!=(vt1.c0)) THEN ((('?', vt1.c0, vt1.c0))==(('z', vt1.c0, vt1.c0))) WHEN (vt1.c0 IN (vt1.c0)) THEN ((((((((NULL)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) ELSE json_patch(vt1.c0, 0.40223593027048643) END)AND(CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS REAL)))) ORDER BY vt1.c0 DESC INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN (vt1.c0 IN ()) THEN (NOT (vt1.c0)) WHEN '-1302896843' THEN CAST(vt1.c0 AS BLOB) WHEN (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) THEN (vt1.c0 IN ()) ELSE vt1.c0 END) ORDER BY vt1.c0 DESC;
SELECT ALL COUNT(*) FROM rt0 WHERE (CAST(((rt0.c0) IS FALSE) AS INTEGER)) ORDER BY TYPEOF(DISTINCT CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 END), rt0.c2;
SELECT ALL COUNT(*) FROM rt0 WHERE (CAST(((rt0.c0) IS FALSE) AS INTEGER)) ORDER BY ((((NULL)IS(rt0.c1))) BETWEEN (CAST(rt0.c3 AS REAL)) AND ((((rt0.c0, rt0.c3, rt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c2)) AND ((rt0.c1, rt0.c0, rt0.c3)))))  NULLS FIRST, ((rt0.c2)!=(rt0.c3)) COLLATE RTRIM DESC  NULLS FIRST;
SELECT ALL * FROM rt0 NOT INDEXED WHERE ((- ((+ (rt0.c3))))) ORDER BY ((((((((((rt0.c3)AND(rt0.c2)))AND(rt0.c3)))AND(rt0.c2)))AND(((rt0.c2)-(rt0.c0)))))AND(((rt0.c0) IS TRUE)))  NULLS LAST, (((+ (rt0.c1)))||((((rt0.c0, rt0.c2, rt0.c2))==((rt0.c1, rt0.c1, rt0.c1))))), CASE WHEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 END THEN (rt0.c2 IN ()) END DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((- ((+ (rt0.c3))))) ORDER BY 0.12523415696068652 COLLATE NOCASE ASC, ((TYPEOF(DISTINCT rt0.c3)) ISNULL) ASC  NULLS LAST, x'eb27a0'  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (NULL) ORDER BY 0.12523415696068652 COLLATE NOCASE ASC, ((TYPEOF(DISTINCT rt0.c3)) ISNULL) ASC  NULLS LAST, x'eb27a0'  NULLS LAST;
SELECT ALL * FROM rt0 NOT INDEXED WHERE ((- ((+ (rt0.c3))))) ORDER BY ((((((((((rt0.c3)AND(rt0.c2)))AND(rt0.c3)))AND(rt0.c2)))AND(((rt0.c2)-(rt0.c0)))))AND(((rt0.c0) IS TRUE)))  NULLS LAST, (((+ (rt0.c1)))||((((rt0.c0, rt0.c2, rt0.c2))==((rt0.c1, rt0.c1, rt0.c1))))), CASE WHEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 END THEN (rt0.c2 IN ()) END DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((- ((+ (rt0.c3))))) ORDER BY 0.12523415696068652 COLLATE NOCASE ASC, ((TYPEOF(DISTINCT rt0.c3)) ISNULL) ASC  NULLS LAST, x'eb27a0'  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (NULL) ORDER BY 0.12523415696068652 COLLATE NOCASE ASC, ((TYPEOF(DISTINCT rt0.c3)) ISNULL) ASC  NULLS LAST, x'eb27a0'  NULLS LAST;
SELECT * FROM rt0 WHERE ((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((((rt0.c1) NOT NULL), (+ (rt0.c1)), (('') NOT NULL))) AND ((rt0.c0, ('0.0' IN (rt0.c0)), '-257012791')))) ORDER BY (~ ((((rt0.c0, rt0.c0))<(('㙓d%%V芓', rt0.c3))))) DESC;
SELECT ALL * FROM rt0 WHERE ((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((((rt0.c1) NOT NULL), (+ (rt0.c1)), (('') NOT NULL))) AND ((rt0.c0, ('0.0' IN (rt0.c0)), '-257012791')))) ORDER BY ((TRIM(DISTINCT rt0.c2))>=(((((rt0.c0)OR(rt0.c2)))OR(rt0.c1)))) DESC, (((('1101443830')IS(rt0.c2))) NOT BETWEEN (((rt0.c0) ISNULL)) AND (((rt0.c1)LIKE(rt0.c1)))) LIMIT 0x1;
SELECT * FROM rt0 WHERE ((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((((rt0.c1) NOT NULL), (+ (rt0.c1)), (('') NOT NULL))) AND ((rt0.c0, ('0.0' IN (rt0.c0)), '-257012791')))) ORDER BY (~ ((((rt0.c0, rt0.c0))<(('㙓d%%V芓', rt0.c3))))) DESC;
SELECT ALL * FROM rt0 WHERE ((((rt0.c2, rt0.c2, rt0.c0)) BETWEEN ((((rt0.c1) NOT NULL), (+ (rt0.c1)), (('') NOT NULL))) AND ((rt0.c0, ('0.0' IN (rt0.c0)), '-257012791')))) ORDER BY ((TRIM(DISTINCT rt0.c2))>=(((((rt0.c0)OR(rt0.c2)))OR(rt0.c1)))) DESC, (((('1101443830')IS(rt0.c2))) NOT BETWEEN (((rt0.c0) ISNULL)) AND (((rt0.c1)LIKE(rt0.c1)))) LIMIT 0x1;
SELECT * FROM vt1 WHERE ('Is|!') ORDER BY ABS(((vt1.c0) NOT NULL)) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((('Is|!')AND(((((((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))AND(vt1.c0 COLLATE RTRIM)))OR(NULL)))OR(((vt1.c0)%(vt1.c0)))))OR(x'97b4'))))) ORDER BY ABS(((vt1.c0) NOT NULL)) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE ('Is|!') ORDER BY ABS(((vt1.c0) NOT NULL)) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((('Is|!')AND(((((((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))AND(vt1.c0 COLLATE RTRIM)))OR(NULL)))OR(((vt1.c0)%(vt1.c0)))))OR(x'97b4'))))) ORDER BY ABS(((vt1.c0) NOT NULL)) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (((((((((rt0.c3) NOTNULL))AND(rt0.c1)))OR(((rt0.c1)+(rt0.c2)))))AND(((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))AND(rt0.c0)))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c3) NOTNULL))AND(rt0.c1)))OR(((rt0.c1)+(rt0.c2)))))AND(((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))AND(rt0.c0)))))AND((+ ((NULL IN (rt0.c2))))))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c2)IS NOT(rt0.c2)) IN (((rt0.c3)/(rt0.c3)))));
SELECT * FROM rt0 WHERE (((((((((rt0.c3) NOTNULL))AND(rt0.c1)))OR(((rt0.c1)+(rt0.c2)))))AND(((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))AND(rt0.c0)))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c3) NOTNULL))AND(rt0.c1)))OR(((rt0.c1)+(rt0.c2)))))AND(((((((rt0.c0)OR(rt0.c1)))AND(rt0.c3)))AND(rt0.c0)))))AND((+ ((NULL IN (rt0.c2))))))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c2)IS NOT(rt0.c2)) IN (((rt0.c3)/(rt0.c3)))));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE CAST(vt1.c0 AS REAL)  WHEN vt1.c0 COLLATE NOCASE THEN CASE WHEN vt1.c0 THEN vt1.c0 END WHEN ((((((((vt1.c0)OR(x'')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) THEN ABS(vt1.c0) WHEN (vt1.c0 IN ()) THEN vt1.c0 WHEN ((vt1.c0) NOT NULL) THEN vt1.c0 COLLATE BINARY END) ORDER BY ((((vt1.c0) NOT BETWEEN (NULL) AND (vt1.c0))) NOT BETWEEN (((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) AND ((NOT (vt1.c0)))) ASC, (~ (((vt1.c0) ISNULL)))  NULLS LAST, (('') NOT BETWEEN (((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) AND (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) ASC;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((CASE CAST(vt1.c0 AS REAL)  WHEN vt1.c0 COLLATE NOCASE THEN CASE WHEN vt1.c0 THEN vt1.c0 END WHEN ((((((((vt1.c0)OR(x'')))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) THEN ABS(vt1.c0) WHEN (vt1.c0 IN ()) THEN vt1.c0 WHEN ((vt1.c0) NOT NULL) THEN vt1.c0 COLLATE BINARY END)AND(''))) ORDER BY ((((vt1.c0) NOT BETWEEN (NULL) AND (vt1.c0))) NOT BETWEEN (((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) AND ((NOT (vt1.c0)))) ASC, (~ (((vt1.c0) ISNULL)))  NULLS LAST, (('') NOT BETWEEN (((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) AND (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) ASC LIMIT 0 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (UPPER(NULL)) ORDER BY ((((vt1.c0) NOT BETWEEN (NULL) AND (vt1.c0))) NOT BETWEEN (((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) AND ((NOT (vt1.c0)))) ASC, (~ (((vt1.c0) ISNULL)))  NULLS LAST, (('') NOT BETWEEN (((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) AND (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) ASC LIMIT 0X0;
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (CAST((0.12696963882946843 IN (rt0.c0, rt0.c0)) AS TEXT));
SELECT MIN(rt0.c1) FROM rt0 WHERE (((CAST((0.12696963882946843 IN (rt0.c0, rt0.c0)) AS TEXT))AND((((rt0.c0)) BETWEEN ((PRINTF(rt0.c3, rt0.c0))) AND ((((((rt0.c2)AND(rt0.c2)))AND(rt0.c3)))))))) LIMIT 0X1 INTERSECT SELECT MIN(rt0.c1) FROM rt0 WHERE ((rt0.c1 IN ()) COLLATE RTRIM) LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE (CASE WHEN (- (rt0.c3)) THEN ((vt1.c0)IS NOT('now8')) END) ORDER BY rt0.c3  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE (((CASE WHEN (- (rt0.c3)) THEN ((vt1.c0)IS NOT('now8')) END)AND(COALESCE(DISTINCT rt0.c1 COLLATE NOCASE, ((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c0)))))) ORDER BY (((((rt0.c1)IS NOT(rt0.c0)), ((rt0.c0)>(vt1.c0)), CASE rt0.c2  WHEN 0.356761917815985 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c2 END))>=((((rt0.c1)>(rt0.c3)), ((vt1.c0) IS TRUE), (('2049321984') BETWEEN (rt0.c3) AND (vt1.c0)))))  NULLS LAST, NULL LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE (CASE WHEN (- (rt0.c3)) THEN ((vt1.c0)IS NOT('now8')) END) ORDER BY rt0.c3  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE (((CASE WHEN (- (rt0.c3)) THEN ((vt1.c0)IS NOT('now8')) END)AND(COALESCE(DISTINCT rt0.c1 COLLATE NOCASE, ((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c0)))))) ORDER BY (((((rt0.c1)IS NOT(rt0.c0)), ((rt0.c0)>(vt1.c0)), CASE rt0.c2  WHEN 0.356761917815985 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c2 END))>=((((rt0.c1)>(rt0.c3)), ((vt1.c0) IS TRUE), (('2049321984') BETWEEN (rt0.c3) AND (vt1.c0)))))  NULLS LAST, NULL LIMIT 0x1;
SELECT COUNT(*) FROM rt0, vt1 WHERE (((((rt0.c1) IS TRUE)) NOT BETWEEN ((((rt0.c2, rt0.c1, vt1.c0)) BETWEEN ((vt1.c0, rt0.c1, rt0.c0)) AND ((rt0.c3, rt0.c2, rt0.c0)))) AND ((((rt0.c2, rt0.c3)) BETWEEN ((vt1.c0, rt0.c0)) AND ((vt1.c0, vt1.c0))))));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((rt0.c1) IS TRUE)) NOT BETWEEN ((((rt0.c2, rt0.c1, vt1.c0)) BETWEEN ((vt1.c0, rt0.c1, rt0.c0)) AND ((rt0.c3, rt0.c2, rt0.c0)))) AND ((((rt0.c2, rt0.c3)) BETWEEN ((vt1.c0, rt0.c0)) AND ((vt1.c0, vt1.c0)))))) ORDER BY x'6e'  NULLS FIRST, CAST(CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 END AS INTEGER) INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((rt0.c0)LIKE(rt0.c2))) BETWEEN ((rt0.c0 IN ())) AND (((rt0.c1)+(rt0.c0))))) ORDER BY x'6e'  NULLS FIRST, CAST(CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 END AS INTEGER);
SELECT COUNT(*) FROM rt0 WHERE (rt0.c3) ORDER BY ((COALESCE('\D''E8}M', rt0.c1, rt0.c2, rt0.c1))<(((rt0.c3)|(rt0.c2)))) ASC  NULLS FIRST, (((~ (NULL)))||((rt0.c1 IN ()))) DESC, (((rt0.c0)GLOB(rt0.c3)) IN (((rt0.c2) NOT BETWEEN (x'64') AND (x'')))) DESC  NULLS LAST;
SELECT COUNT(*) FROM rt0 WHERE (rt0.c3) ORDER BY rt0.c0 DESC  NULLS FIRST, rt0.c0  NULLS FIRST LIMIT 5;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE (((LIKELY(DISTINCT rt0.c3))%((((rt0.c0, rt0.c1)) BETWEEN ((rt0.c1, NULL)) AND ((rt0.c0, rt0.c0))))));
SELECT MIN(rt0.c0) FROM vt1, rt0 WHERE (((((LIKELY(DISTINCT rt0.c3))%((((rt0.c0, rt0.c1)) BETWEEN ((rt0.c1, NULL)) AND ((rt0.c0, rt0.c0))))))AND(((((rt0.c1)IS(vt1.c0)))LIKE((rt0.c2 IN ()))))));
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE ((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)) IN ((((rt0.c3))<=((rt0.c1)))))) ORDER BY (((- (vt1.c0))) IS TRUE)  NULLS LAST, (((+ (rt0.c0)))LIKE((NOT (rt0.c0))));
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE ((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)) IN ((((rt0.c3))<((rt0.c1))))))AND(CAST(CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN NULL ELSE vt1.c0 END AS INTEGER)))) ORDER BY ((CAST(vt1.c0 AS INTEGER))AND(HEX(DISTINCT rt0.c3))) ASC, (((((vt1.c0, rt0.c3))<((rt0.c2, rt0.c1))))OR('-1440571497')) LIMIT 0 INTERSECT SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (x'') ORDER BY ((CAST(vt1.c0 AS INTEGER))AND(HEX(DISTINCT rt0.c3))) ASC, (((((vt1.c0, rt0.c3))<((rt0.c2, rt0.c1))))OR('-1440571497')) LIMIT 0;
SELECT COUNT(*) FROM vt1, rt0 WHERE (((CAST(rt0.c1 AS INTEGER)) NOT BETWEEN (rt0.c3) AND (((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c3))))) ORDER BY (+ (CAST(rt0.c3 AS REAL))) DESC, CASE WHEN CAST(rt0.c0 AS TEXT) THEN ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c0)) WHEN ((vt1.c0)<(x'6a90')) THEN ((x'8626')%(rt0.c2)) WHEN ((((((rt0.c1)AND(vt1.c0)))AND(rt0.c3)))OR(vt1.c0)) THEN CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 END ELSE ((vt1.c0) IS FALSE) END  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((CAST(rt0.c1 AS INTEGER)) NOT BETWEEN (rt0.c3) AND (((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c3)))))AND(((vt1.c0)+(vt1.c0)) COLLATE RTRIM))) ORDER BY (+ (CAST(rt0.c3 AS REAL))) DESC, CASE WHEN CAST(rt0.c0 AS TEXT) THEN ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c0)) WHEN ((vt1.c0)<(x'6a90')) THEN ((x'8626')%(rt0.c2)) WHEN ((((((rt0.c1)AND(vt1.c0)))AND(rt0.c3)))OR(vt1.c0)) THEN CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 END ELSE ((vt1.c0) IS FALSE) END  NULLS FIRST INTERSECT SELECT COUNT(*) FROM vt1, rt0 WHERE ((((vt1.c0)) BETWEEN ((x'39f4')) AND ((TOTAL_CHANGES())))) ORDER BY (+ (CAST(rt0.c3 AS REAL))) DESC, CASE WHEN CAST(rt0.c0 AS TEXT) THEN ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c0)) WHEN ((vt1.c0)<(x'6a90')) THEN ((x'8626')%(rt0.c2)) WHEN ((((((rt0.c1)AND(vt1.c0)))AND(rt0.c3)))OR(vt1.c0)) THEN CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 END ELSE ((vt1.c0) IS FALSE) END  NULLS FIRST;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE ('0.35626400596658003') ORDER BY (((rt0.c1 IN (vt1.c0, rt0.c1, rt0.c0)))IS((NOT (rt0.c0)))) ASC  NULLS FIRST, '-0.0' DESC;
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE ('0.35626400596658003') ORDER BY (((rt0.c1 IN (vt1.c0, rt0.c1, rt0.c0)))IS((NOT (rt0.c0)))) ASC  NULLS FIRST, '-0.0' DESC LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE ((((((((((rt0.c2, vt1.c0, rt0.c0, rt0.c1)) BETWEEN ((rt0.c3, '265752894', vt1.c0, vt1.c0)) AND ((vt1.c0, rt0.c2, rt0.c3, rt0.c0))))OR(vt1.c0 COLLATE BINARY)))OR(SQLITE_COMPILEOPTION_GET(rt0.c2))))AND((rt0.c3 IN (rt0.c1))))) ORDER BY (((rt0.c1 IN (vt1.c0, rt0.c1, rt0.c0)))IS((NOT (rt0.c0)))) ASC  NULLS FIRST, '-0.0' DESC LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c0)) BETWEEN (((~ (rt0.c2)))) AND (((NULL IN ())))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c0)) BETWEEN (((~ (rt0.c2)))) AND (((NULL IN ())))))AND(x'5d' COLLATE NOCASE))) ORDER BY ((rt0.c1) BETWEEN (CAST('1603353078' AS INTEGER)) AND ('7l')) ASC, CAST(((rt0.c2) NOTNULL) AS REAL) ASC  NULLS LAST, ((((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c0))) NOTNULL) ASC LIMIT 0X0;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c0)) BETWEEN (((~ (rt0.c2)))) AND (((NULL IN ())))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c0)) BETWEEN (((~ (rt0.c2)))) AND (((NULL IN ())))))AND(x'5d' COLLATE NOCASE))) ORDER BY ((rt0.c1) BETWEEN (CAST('1603353078' AS INTEGER)) AND ('7l')) ASC, CAST(((rt0.c2) NOTNULL) AS REAL) ASC  NULLS LAST, ((((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c0))) NOTNULL) ASC LIMIT 0X0;
SELECT ALL MAX(rt0.c3) FROM vt1 CROSS JOIN rt0 ON ((((vt1.c0)) NOT BETWEEN (('0.3318669429754192')) AND ((rt0.c3))) IN ()) WHERE ((((+ (vt1.c0))) NOT NULL));
SELECT DISTINCT MAX(rt0.c3) FROM vt1 CROSS JOIN rt0 ON ((((vt1.c0)) NOT BETWEEN (('0.3318669429754192')) AND ((rt0.c3))) IN ()) WHERE ((((+ (vt1.c0))) NOT NULL)) LIMIT 0 INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM vt1 CROSS JOIN rt0 ON ((((vt1.c0)) NOT BETWEEN (('0.3318669429754192')) AND ((rt0.c3))) IN ()) WHERE (CASE (NOT (rt0.c2))  WHEN load_extension(rt0.c0, rt0.c1) THEN (NOT (rt0.c1)) WHEN '953433735' THEN CASE WHEN rt0.c1 THEN '1339938603' ELSE rt0.c0 END ELSE ((rt0.c3)||(rt0.c0)) END) LIMIT 0;
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE (((((rt0.c1)AND(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c1)))))AND(LOWER(rt0.c2)))) ORDER BY vt1.c0 COLLATE BINARY COLLATE RTRIM COLLATE BINARY DESC, ((CAST('-2051742299' AS INTEGER))GLOB(((vt1.c0)==(rt0.c2)))) DESC, CAST(CASE WHEN rt0.c2 THEN rt0.c1 END AS REAL) DESC;
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (((((rt0.c1)AND(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c1)))))AND(LOWER(rt0.c2)))) ORDER BY '839021629' ASC LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (4.64024925E8) ORDER BY '839021629' ASC LIMIT 0x0;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (rt0.c0) ORDER BY (+ (CAST(rt0.c2 AS NUMERIC))), TYPEOF(((((((((vt1.c0)OR(rt0.c2)))OR(-1.253896892E9)))OR(rt0.c3)))OR(rt0.c3)));
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (rt0.c0) ORDER BY CASE WHEN rt0.c2 THEN (rt0.c3 IN (vt1.c0, rt0.c2)) WHEN ((((((vt1.c0)AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)) THEN CASE rt0.c2  WHEN rt0.c0 THEN 671349490 ELSE rt0.c2 END WHEN ((rt0.c1)|(rt0.c0)) THEN UPPER(DISTINCT rt0.c0) WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c3)) THEN rt0.c1 WHEN NULL THEN ABS(DISTINCT rt0.c3) ELSE (('')>=(vt1.c0)) END DESC  NULLS FIRST LIMIT 2 INTERSECT SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (CAST(((rt0.c2)>(rt0.c1)) AS TEXT)) ORDER BY CASE WHEN rt0.c2 THEN (rt0.c3 IN (vt1.c0, rt0.c2)) WHEN ((((((vt1.c0)AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)) THEN CASE rt0.c2  WHEN rt0.c0 THEN 671349490 ELSE rt0.c2 END WHEN ((rt0.c1)|(rt0.c0)) THEN UPPER(DISTINCT rt0.c0) WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c3)) THEN rt0.c1 WHEN NULL THEN ABS(DISTINCT rt0.c3) ELSE (('')>=(vt1.c0)) END DESC  NULLS FIRST LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (vt1.c0);
SELECT COUNT(*) FROM vt1, rt0 WHERE (((vt1.c0)AND(CASE 394228211  WHEN (((rt0.c1, rt0.c2)) BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c2, rt0.c3))) THEN ((vt1.c0) NOT NULL) ELSE ((((rt0.c0)AND(rt0.c3)))AND(rt0.c1)) END))) LIMIT 1;
SELECT ALL * FROM rt0 WHERE ((((CASE WHEN rt0.c1 THEN rt0.c3 END, ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0))))>((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0)), ((rt0.c1)>(rt0.c0)))))) ORDER BY (- ((NOT (rt0.c2))))  NULLS LAST, ((((rt0.c2 IN ()), (rt0.c1 IN ()), SUBSTR(rt0.c1, rt0.c2)))<=(((~ (rt0.c3)), (rt0.c2 IN ()), json_quote(rt0.c0)))) DESC;
SELECT * FROM rt0 WHERE ((((((CASE WHEN rt0.c1 THEN rt0.c3 END, ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0))))>((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0)), ((rt0.c1)>(rt0.c0))))))AND((CAST('-1565878181' AS NUMERIC) IN (CAST(rt0.c0 AS BLOB), ((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c2))))))) ORDER BY (- ((NOT (rt0.c2))))  NULLS LAST, ((((rt0.c2 IN ()), (rt0.c1 IN ()), SUBSTR(rt0.c1, rt0.c2)))<=(((~ (rt0.c3)), (rt0.c2 IN ()), json_quote(rt0.c0)))) DESC LIMIT 2;
SELECT ALL * FROM rt0 WHERE ((((CASE WHEN rt0.c1 THEN rt0.c3 END, ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0))))>((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0)), ((rt0.c1)>(rt0.c0)))))) ORDER BY (- ((NOT (rt0.c2))))  NULLS LAST, ((((rt0.c2 IN ()), (rt0.c1 IN ()), SUBSTR(rt0.c1, rt0.c2)))<=(((~ (rt0.c3)), (rt0.c2 IN ()), json_quote(rt0.c0)))) DESC;
SELECT * FROM rt0 WHERE ((((((CASE WHEN rt0.c1 THEN rt0.c3 END, ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0))))>((((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0)), ((rt0.c1)>(rt0.c0))))))AND((CAST('-1565878181' AS NUMERIC) IN (CAST(rt0.c0 AS BLOB), ((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c2))))))) ORDER BY (- ((NOT (rt0.c2))))  NULLS LAST, ((((rt0.c2 IN ()), (rt0.c1 IN ()), SUBSTR(rt0.c1, rt0.c2)))<=(((~ (rt0.c3)), (rt0.c2 IN ()), json_quote(rt0.c0)))) DESC LIMIT 2;
SELECT ALL * FROM vt1, rt0 WHERE (((0.46697678210656834) NOT BETWEEN ((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c2)))) AND (((rt0.c3) ISNULL)))) ORDER BY ((((((((((((rt0.c2)OR(vt1.c0)))OR(rt0.c2)))AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c3)))>(TYPEOF(rt0.c0)))  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((0.46697678210656834) NOT BETWEEN ((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c2)))) AND (((rt0.c3) ISNULL))))AND((vt1.c0 IN (((rt0.c1)LIKE(rt0.c2))))))) ORDER BY (- (((rt0.c0) BETWEEN (rt0.c2) AND (x'')))) ASC, CASE ((rt0.c0) NOT NULL)  WHEN NULL COLLATE BINARY THEN ((vt1.c0)|(rt0.c3)) WHEN (- (rt0.c1)) THEN vt1.c0 COLLATE RTRIM WHEN CAST(rt0.c2 AS TEXT) THEN (NOT (vt1.c0)) WHEN CAST(0.16205714282853456 AS TEXT) THEN ((vt1.c0)IS NOT(rt0.c3)) END LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (((0.46697678210656834) NOT BETWEEN ((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c2)))) AND (((rt0.c3) ISNULL)))) ORDER BY ((((((((((((rt0.c2)OR(vt1.c0)))OR(rt0.c2)))AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c3)))>(TYPEOF(rt0.c0)))  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((0.46697678210656834) NOT BETWEEN ((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c0, rt0.c2)))) AND (((rt0.c3) ISNULL))))AND((vt1.c0 IN (((rt0.c1)LIKE(rt0.c2))))))) ORDER BY (- (((rt0.c0) BETWEEN (rt0.c2) AND (x'')))) ASC, CASE ((rt0.c0) NOT NULL)  WHEN NULL COLLATE BINARY THEN ((vt1.c0)|(rt0.c3)) WHEN (- (rt0.c1)) THEN vt1.c0 COLLATE RTRIM WHEN CAST(rt0.c2 AS TEXT) THEN (NOT (vt1.c0)) WHEN CAST(0.16205714282853456 AS TEXT) THEN ((vt1.c0)IS NOT(rt0.c3)) END LIMIT 0;
SELECT ALL COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS REAL)) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (vt1.c0 COLLATE NOCASE)));
SELECT ALL COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS REAL)) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (vt1.c0 COLLATE NOCASE))) ORDER BY (NOT (0.4521963584354297)) ASC;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)<<(vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (x'064bb361')));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)<<(vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (x'064bb361')))AND((vt1.c0 IN ()) COLLATE RTRIM))) ORDER BY x'' DESC  NULLS LAST LIMIT 4 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((+ (vt1.c0)))&(vt1.c0))) ORDER BY x'' DESC  NULLS LAST LIMIT 4;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0)<<(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))>=((((vt1.c0)+(vt1.c0)), TRIM(DISTINCT vt1.c0), vt1.c0 COLLATE RTRIM))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)<<(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))>=((((vt1.c0)+(vt1.c0)), TRIM(DISTINCT vt1.c0), vt1.c0 COLLATE RTRIM)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0)<<(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))>=((((vt1.c0)+(vt1.c0)), TRIM(DISTINCT vt1.c0), vt1.c0 COLLATE RTRIM))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)<<(vt1.c0)), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))>=((((vt1.c0)+(vt1.c0)), TRIM(DISTINCT vt1.c0), vt1.c0 COLLATE RTRIM)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (((((vt1.c0) IS TRUE))>(vt1.c0)));
SELECT * FROM vt1 WHERE (((((vt1.c0) IS TRUE))>(vt1.c0))) INTERSECT SELECT * FROM vt1 WHERE (((((((((((NULLIF(vt1.c0, vt1.c0))AND(CASE vt1.c0  WHEN 0.5286762140952553 THEN vt1.c0 END)))AND(((vt1.c0)OR(0.4550595316029028)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))OR((((vt1.c0, vt1.c0))>((vt1.c0, 'MB	Xv&V'))))))OR(SQLITE_SOURCE_ID())));
SELECT ALL * FROM vt1 WHERE (((((vt1.c0) IS TRUE))>(vt1.c0)));
SELECT * FROM vt1 WHERE (((((vt1.c0) IS TRUE))>(vt1.c0))) INTERSECT SELECT * FROM vt1 WHERE (((((((((((NULLIF(vt1.c0, vt1.c0))AND(CASE vt1.c0  WHEN 0.5286762140952553 THEN vt1.c0 END)))AND(((vt1.c0)OR(0.4550595316029028)))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))OR((((vt1.c0, vt1.c0))>((vt1.c0, 'MB	Xv&V'))))))OR(SQLITE_SOURCE_ID())));
SELECT * FROM rt0, vt1 WHERE (LOWER(DISTINCT LAST_INSERT_ROWID())) ORDER BY ((((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))AND(CAST(vt1.c0 AS INTEGER))))OR(((((rt0.c2)AND(vt1.c0)))AND(vt1.c0)))))OR((((rt0.c0, rt0.c2, rt0.c1)) BETWEEN ((NULL, vt1.c0, rt0.c2)) AND (('㏜r|䌽%ptf', rt0.c1, rt0.c1)))));
SELECT ALL * FROM rt0, vt1 WHERE (((LOWER(DISTINCT LAST_INSERT_ROWID()))AND(CAST(((rt0.c2)||(rt0.c3)) AS INTEGER)))) ORDER BY (+ (((rt0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((NULL)-(rt0.c3)))<>(((rt0.c1)-(rt0.c2))))) ORDER BY (+ (((rt0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE (LOWER(DISTINCT LAST_INSERT_ROWID())) ORDER BY ((((((((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))AND(CAST(vt1.c0 AS INTEGER))))OR(((((rt0.c2)AND(vt1.c0)))AND(vt1.c0)))))OR((((rt0.c0, rt0.c2, rt0.c1)) BETWEEN ((NULL, vt1.c0, rt0.c2)) AND (('㏜r|䌽%ptf', rt0.c1, rt0.c1)))));
SELECT ALL * FROM rt0, vt1 WHERE (((LOWER(DISTINCT LAST_INSERT_ROWID()))AND(CAST(((rt0.c2)||(rt0.c3)) AS INTEGER)))) ORDER BY (+ (((rt0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((NULL)-(rt0.c3)))<>(((rt0.c1)-(rt0.c2))))) ORDER BY (+ (((rt0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST LIMIT 0x1;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (0x4ececbc) ORDER BY '775216567' DESC, CAST(((vt1.c0) IS TRUE) AS BLOB) DESC;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((0X4ececbc)AND(CAST(vt1.c0 AS INTEGER) COLLATE RTRIM))) ORDER BY (HEX(DISTINCT vt1.c0) IN (COALESCE(vt1.c0, vt1.c0, vt1.c0, vt1.c0))) ASC;
SELECT MAX(rt0.c2) FROM rt0 WHERE ((((rt0.c3)) BETWEEN ((((rt0.c2) ISNULL))) AND (((- (rt0.c2)))))) ORDER BY (((NOT (rt0.c2)))>=((+ (rt0.c2))))  NULLS LAST, 0.964813790745092 COLLATE NOCASE;
SELECT MAX(rt0.c2) FROM rt0 WHERE ((((rt0.c3)) BETWEEN ((((rt0.c2) ISNULL))) AND (((- (rt0.c2)))))) ORDER BY ((rt0.c2 COLLATE RTRIM)*(rt0.c1)) ASC, (((((rt0.c3)|(rt0.c2)), ((rt0.c2)GLOB(rt0.c3))))<>((rt0.c2, ((rt0.c2)IS NOT('-379422826'))))) ASC  NULLS LAST;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ((- (((rt0.c1)=(rt0.c1))))) ORDER BY (~ (CASE WHEN rt0.c2 THEN '1466001721' WHEN rt0.c2 THEN vt1.c0 END)) DESC  NULLS LAST, CAST(((rt0.c3) NOT BETWEEN (rt0.c0) AND (vt1.c0)) AS NUMERIC) ASC, ((((vt1.c0)%('ᜢ')))<=(((rt0.c0)AND(x'69')))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE ((- (((rt0.c1)=(rt0.c1))))) ORDER BY (~ (CASE WHEN rt0.c2 THEN '1466001721' WHEN rt0.c2 THEN vt1.c0 END)) DESC  NULLS LAST, CAST(((rt0.c3) NOT BETWEEN (rt0.c0) AND (vt1.c0)) AS NUMERIC) ASC, ((((vt1.c0)%('ᜢ')))<=(((rt0.c0)AND(x'69')))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (rt0.c3) ORDER BY (~ (CASE WHEN rt0.c2 THEN '1466001721' WHEN rt0.c2 THEN vt1.c0 END)) DESC  NULLS LAST, CAST(((rt0.c3) NOT BETWEEN (rt0.c0) AND (vt1.c0)) AS NUMERIC) ASC, ((((vt1.c0)%('ᜢ')))<=(((rt0.c0)AND(x'69')))) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE ((- (((rt0.c1)=(rt0.c1))))) ORDER BY (~ (CASE WHEN rt0.c2 THEN '1466001721' WHEN rt0.c2 THEN vt1.c0 END)) DESC  NULLS LAST, CAST(((rt0.c3) NOT BETWEEN (rt0.c0) AND (vt1.c0)) AS NUMERIC) ASC, ((((vt1.c0)%('ᜢ')))<=(((rt0.c0)AND(x'69')))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE ((- (((rt0.c1)=(rt0.c1))))) ORDER BY (~ (CASE WHEN rt0.c2 THEN '1466001721' WHEN rt0.c2 THEN vt1.c0 END)) DESC  NULLS LAST, CAST(((rt0.c3) NOT BETWEEN (rt0.c0) AND (vt1.c0)) AS NUMERIC) ASC, ((((vt1.c0)%('ᜢ')))<=(((rt0.c0)AND(x'69')))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (rt0.c3) ORDER BY (~ (CASE WHEN rt0.c2 THEN '1466001721' WHEN rt0.c2 THEN vt1.c0 END)) DESC  NULLS LAST, CAST(((rt0.c3) NOT BETWEEN (rt0.c0) AND (vt1.c0)) AS NUMERIC) ASC, ((((vt1.c0)%('ᜢ')))<=(((rt0.c0)AND(x'69')))) DESC  NULLS FIRST;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (rt0.c0) ORDER BY (((('{CH^p') NOT BETWEEN ('E') AND (0.03213993847039576))) NOT BETWEEN (IFNULL(DISTINCT rt0.c1, rt0.c2)) AND ((- (rt0.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE (((rt0.c0)AND(rt0.c0))) ORDER BY (~ (((0.9110191207773322)>>(NULL)))), TRIM(CAST(vt1.c0 AS TEXT), (((rt0.c1, rt0.c3, vt1.c0))>=((rt0.c2, rt0.c0, vt1.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE ((('1830690974' IN ()) IN ())) ORDER BY (~ (((0.9110191207773322)>>(NULL)))), TRIM(CAST(vt1.c0 AS TEXT), (((rt0.c1, rt0.c3, vt1.c0))>=((rt0.c2, rt0.c0, vt1.c0))))  NULLS LAST LIMIT 1;
SELECT ALL * FROM rt0 WHERE ((- ((rt0.c0 IN (rt0.c0))))) ORDER BY ((CAST(rt0.c2 AS NUMERIC))LIKE(((rt0.c0)IS(rt0.c1)))) ASC  NULLS FIRST, ((((rt0.c1, rt0.c0, 0.06287488605913949))=((rt0.c2, rt0.c1, rt0.c2))) IN (((((((rt0.c2)OR(rt0.c1)))OR(rt0.c2)))AND(rt0.c0)), x''))  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((((- ((rt0.c0 IN (rt0.c0)))))AND((((rt0.c0)) BETWEEN (((- (rt0.c2)))) AND ((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))))))) ORDER BY ((((rt0.c2)<>(rt0.c0)))<<(NULLIF(rt0.c3, rt0.c2))) DESC  NULLS LAST, ((UNLIKELY(DISTINCT rt0.c3)) ISNULL) ASC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((- ((rt0.c0 IN (rt0.c0))))) ORDER BY ((CAST(rt0.c2 AS NUMERIC))LIKE(((rt0.c0)IS(rt0.c1)))) ASC  NULLS FIRST, ((((rt0.c1, rt0.c0, 0.06287488605913949))=((rt0.c2, rt0.c1, rt0.c2))) IN (((((((rt0.c2)OR(rt0.c1)))OR(rt0.c2)))AND(rt0.c0)), x''))  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((((- ((rt0.c0 IN (rt0.c0)))))AND((((rt0.c0)) BETWEEN (((- (rt0.c2)))) AND ((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))))))) ORDER BY ((((rt0.c2)<>(rt0.c0)))<<(NULLIF(rt0.c3, rt0.c2))) DESC  NULLS LAST, ((UNLIKELY(DISTINCT rt0.c3)) ISNULL) ASC  NULLS FIRST;
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE (((((((((rt0.c0)AND(vt1.c0)))AND(vt1.c0)))AND(rt0.c2)))&(LAST_INSERT_ROWID()))) ORDER BY (((0.20155901645647345, rt0.c3)) NOT BETWEEN ((CASE vt1.c0  WHEN rt0.c0 THEN rt0.c0 WHEN 'S-' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END, TRIM(DISTINCT rt0.c2, rt0.c3))) AND ((CASE vt1.c0  WHEN 0.643586288567056 THEN 0.4982638383528597 WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt1.c0 ELSE 'Y6' END, CAST(rt0.c3 AS TEXT)))), (~ (((rt0.c1) IS FALSE))) DESC;
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE (((((((((((rt0.c0)AND(vt1.c0)))AND(vt1.c0)))AND(rt0.c2)))&(LAST_INSERT_ROWID())))AND(((rt0.c2) NOTNULL) COLLATE RTRIM))) ORDER BY (((0.20155901645647345, rt0.c3)) NOT BETWEEN ((CASE vt1.c0  WHEN rt0.c0 THEN rt0.c0 WHEN 'S-' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END, TRIM(DISTINCT rt0.c2, rt0.c3))) AND ((CASE vt1.c0  WHEN 0.643586288567056 THEN 0.4982638383528597 WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt1.c0 ELSE 'Y6' END, CAST(rt0.c3 AS TEXT)))), (~ (((rt0.c1) IS FALSE))) DESC INTERSECT SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE (((CAST(vt1.c0 AS BLOB)) NOTNULL)) ORDER BY (((0.20155901645647345, rt0.c3)) NOT BETWEEN ((CASE vt1.c0  WHEN rt0.c0 THEN rt0.c0 WHEN 'S-' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END, TRIM(DISTINCT rt0.c2, rt0.c3))) AND ((CASE vt1.c0  WHEN 0.643586288567056 THEN 0.4982638383528597 WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt1.c0 ELSE 'Y6' END, CAST(rt0.c3 AS TEXT)))), (~ (((rt0.c1) IS FALSE))) DESC;
SELECT COUNT(*) FROM rt0 WHERE (((((rt0.c2)%(rt0.c0))) BETWEEN (HEX(DISTINCT rt0.c1)) AND (rt0.c1))) ORDER BY ((rt0.c0 COLLATE BINARY) BETWEEN (rt0.c2 COLLATE NOCASE) AND (CASE rt0.c0  WHEN NULL THEN rt0.c1 END)) ASC, CAST((rt0.c2 IN ()) AS INTEGER) ASC;
SELECT COUNT(*) FROM rt0 WHERE (((((((rt0.c2)%(rt0.c0))) BETWEEN (HEX(DISTINCT rt0.c1)) AND (rt0.c1)))AND(CASE WHEN (((rt0.c1, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c0, rt0.c3, rt0.c1)) AND ((rt0.c0, rt0.c3, rt0.c0))) THEN rt0.c3 COLLATE BINARY WHEN ((rt0.c3)*(rt0.c1)) THEN ((rt0.c1)LIKE(rt0.c3)) END))) ORDER BY CASE WHEN rt0.c1 THEN rt0.c0 COLLATE RTRIM WHEN (rt0.c2 IN ()) THEN ((((((rt0.c2)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c2)) WHEN json_array(rt0.c2, rt0.c0) THEN ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1)) END, ((((rt0.c0)<<('WWY4晜^Ḫ')))||(((rt0.c3)&(rt0.c1)))) DESC, UNLIKELY(DISTINCT rt0.c1)  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM vt1, rt0 WHERE (x'19');
SELECT DISTINCT * FROM vt1, rt0 WHERE (((x'19')AND(((((((rt0.c0)OR(rt0.c0)))OR(vt1.c0))) NOT BETWEEN ((- (vt1.c0))) AND (ABS(rt0.c1))))));
SELECT ALL * FROM vt1, rt0 WHERE (x'19');
SELECT DISTINCT * FROM vt1, rt0 WHERE (((x'19')AND(((((((rt0.c0)OR(rt0.c0)))OR(vt1.c0))) NOT BETWEEN ((- (vt1.c0))) AND (ABS(rt0.c1))))));
SELECT * FROM rt0 INNER JOIN vt1 ON ((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c1)))AND(((rt0.c2)%(rt0.c2)))))OR(((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))AND(rt0.c2 COLLATE BINARY)) WHERE (((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2))) IS TRUE));
SELECT * FROM rt0 INNER JOIN vt1 ON ((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c1)))AND(((rt0.c2)%(rt0.c2)))))OR(((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))AND(rt0.c2 COLLATE BINARY)) WHERE (((((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2))) IS TRUE))AND((~ ((rt0.c3 IN (vt1.c0, rt0.c2))))))) ORDER BY CASE (((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c0, 0.3616614030932104)) AND ((vt1.c0, rt0.c1)))  WHEN -31530054 THEN (vt1.c0 IN (rt0.c2, NULL, vt1.c0)) WHEN CAST(vt1.c0 AS NUMERIC) THEN ((rt0.c1)+('-1114571261')) WHEN CASE WHEN rt0.c1 THEN vt1.c0 END THEN (((rt0.c2))>=((rt0.c2))) END DESC  NULLS FIRST INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON ((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c1)))AND(((rt0.c2)%(rt0.c2)))))OR(((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))AND(rt0.c2 COLLATE BINARY)) WHERE ((((vt1.c0 IN (rt0.c3, rt0.c3)))<<(rt0.c3))) ORDER BY CASE (((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c0, 0.3616614030932104)) AND ((vt1.c0, rt0.c1)))  WHEN 0xfffffffffe1ee3ba THEN (vt1.c0 IN (rt0.c2, NULL, vt1.c0)) WHEN CAST(vt1.c0 AS NUMERIC) THEN ((rt0.c1)+('-1114571261')) WHEN CASE WHEN rt0.c1 THEN vt1.c0 END THEN (((rt0.c2))>=((rt0.c2))) END DESC  NULLS FIRST;
SELECT * FROM rt0 INNER JOIN vt1 ON ((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c1)))AND(((rt0.c2)%(rt0.c2)))))OR(((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))AND(rt0.c2 COLLATE BINARY)) WHERE (((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2))) IS TRUE));
SELECT * FROM rt0 INNER JOIN vt1 ON ((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c1)))AND(((rt0.c2)%(rt0.c2)))))OR(((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))AND(rt0.c2 COLLATE BINARY)) WHERE (((((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2))) IS TRUE))AND((~ ((rt0.c3 IN (vt1.c0, rt0.c2))))))) ORDER BY CASE (((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c0, 0.3616614030932104)) AND ((vt1.c0, rt0.c1)))  WHEN -31530054 THEN (vt1.c0 IN (rt0.c2, NULL, vt1.c0)) WHEN CAST(vt1.c0 AS NUMERIC) THEN ((rt0.c1)+('-1114571261')) WHEN CASE WHEN rt0.c1 THEN vt1.c0 END THEN (((rt0.c2))>=((rt0.c2))) END DESC  NULLS FIRST INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON ((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c1)))AND(((rt0.c2)%(rt0.c2)))))OR(((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))AND(rt0.c2 COLLATE BINARY)) WHERE ((((vt1.c0 IN (rt0.c3, rt0.c3)))<<(rt0.c3))) ORDER BY CASE (((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c0, 0.3616614030932104)) AND ((vt1.c0, rt0.c1)))  WHEN 0xfffffffffe1ee3ba THEN (vt1.c0 IN (rt0.c2, NULL, vt1.c0)) WHEN CAST(vt1.c0 AS NUMERIC) THEN ((rt0.c1)+('-1114571261')) WHEN CASE WHEN rt0.c1 THEN vt1.c0 END THEN (((rt0.c2))>=((rt0.c2))) END DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((((((NULLIF(DISTINCT rt0.c1, rt0.c0))AND(rt0.c3 COLLATE NOCASE)))OR(IFNULL(rt0.c0, rt0.c1))))AND(((((rt0.c3)OR(rt0.c0)))OR(rt0.c0))))) ORDER BY ((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0))) NOT NULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((((((NULLIF(DISTINCT rt0.c1, rt0.c0))AND(rt0.c3 COLLATE NOCASE)))OR(IFNULL(rt0.c0, rt0.c1))))AND(((((rt0.c3)OR(rt0.c0)))OR(rt0.c0)))))AND(CASE WHEN rt0.c0 COLLATE RTRIM THEN ((rt0.c1) NOTNULL) WHEN rt0.c0 THEN (- (rt0.c3)) WHEN (rt0.c1 IN (rt0.c3)) THEN (NOT (rt0.c2)) ELSE ((rt0.c1) NOT BETWEEN (rt0.c2) AND ('-647783693')) END))) ORDER BY CAST(NULL AS INTEGER)  NULLS FIRST, CAST((- (rt0.c2)) AS BLOB);
SELECT ALL * FROM rt0 WHERE (((((((NULLIF(DISTINCT rt0.c1, rt0.c0))AND(rt0.c3 COLLATE NOCASE)))OR(IFNULL(rt0.c0, rt0.c1))))AND(((((rt0.c3)OR(rt0.c0)))OR(rt0.c0))))) ORDER BY ((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0))) NOT NULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((((((((NULLIF(DISTINCT rt0.c1, rt0.c0))AND(rt0.c3 COLLATE NOCASE)))OR(IFNULL(rt0.c0, rt0.c1))))AND(((((rt0.c3)OR(rt0.c0)))OR(rt0.c0)))))AND(CASE WHEN rt0.c0 COLLATE RTRIM THEN ((rt0.c1) NOTNULL) WHEN rt0.c0 THEN (- (rt0.c3)) WHEN (rt0.c1 IN (rt0.c3)) THEN (NOT (rt0.c2)) ELSE ((rt0.c1) NOT BETWEEN (rt0.c2) AND ('-647783693')) END))) ORDER BY CAST(NULL AS INTEGER)  NULLS FIRST, CAST((- (rt0.c2)) AS BLOB);
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1)) THEN CASE WHEN rt0.c0 THEN rt0.c3 END WHEN ((rt0.c1) NOT NULL) THEN (((rt0.c3))<((rt0.c3))) ELSE CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c3 END END) ORDER BY UNLIKELY(DISTINCT rt0.c1) COLLATE NOCASE  NULLS FIRST, ((((rt0.c3, rt0.c1))>=((rt0.c1, rt0.c2))) IN (((((((((((rt0.c0)OR(rt0.c1)))OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c0)))AND(x'')))) DESC;
SELECT DISTINCT MIN(rt0.c3) FROM rt0 WHERE (CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1)) THEN CASE WHEN rt0.c0 THEN rt0.c3 END WHEN ((rt0.c1) NOT NULL) THEN (((rt0.c3))<((rt0.c3))) ELSE CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c3 END END) ORDER BY CASE CAST(rt0.c2 AS TEXT)  WHEN ((rt0.c0) NOTNULL) THEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN NULL THEN rt0.c1 END END ASC  NULLS LAST, (load_extension(rt0.c3, rt0.c0) IN (rt0.c0 COLLATE NOCASE)) ASC INTERSECT SELECT DISTINCT MIN(rt0.c3) FROM rt0 WHERE ((NOT (rt0.c0))) ORDER BY CASE CAST(rt0.c2 AS TEXT)  WHEN ((rt0.c0) NOTNULL) THEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN NULL THEN rt0.c1 END END ASC  NULLS LAST, (load_extension(rt0.c3, rt0.c0) IN (rt0.c0 COLLATE NOCASE)) ASC;
SELECT COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((((((rt0.c3)AND(rt0.c0)))AND(rt0.c0))) NOT BETWEEN (COALESCE(rt0.c0, rt0.c1, vt1.c0)) AND ((((rt0.c3, rt0.c3))>((rt0.c1, rt0.c1))))));
SELECT ALL COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((((((rt0.c3)AND(rt0.c0)))AND(rt0.c0))) NOT BETWEEN (COALESCE(rt0.c0, rt0.c1, vt1.c0)) AND ((((rt0.c3, rt0.c3))>((rt0.c1, rt0.c1)))))) INTERSECT SELECT ALL COUNT(*) FROM rt0 NATURAL JOIN vt1 WHERE (((CAST(rt0.c1 AS REAL)) IS TRUE));
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((CAST(vt1.c0 AS REAL), ((((((((x'')AND(x'ebd8')))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), vt1.c0))<((CAST(vt1.c0 AS NUMERIC), vt1.c0, CAST(vt1.c0 AS BLOB))))) ORDER BY CASE WHEN vt1.c0 THEN x'bbeba1' WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN NULL WHEN ((vt1.c0) ISNULL) THEN ((vt1.c0)!=(vt1.c0)) WHEN CAST(vt1.c0 AS BLOB) THEN TRIM(vt1.c0) ELSE CASE vt1.c0  WHEN vt1.c0 THEN 0.25276864400621857 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END END  NULLS LAST, ((CAST(vt1.c0 AS NUMERIC))LIKE(((vt1.c0) NOT NULL)))  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((CAST(vt1.c0 AS REAL), ((((((((x'')AND(x'ebd8')))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), vt1.c0))<((CAST(vt1.c0 AS NUMERIC), vt1.c0, CAST(vt1.c0 AS BLOB)))))AND((((vt1.c0))>(((vt1.c0 IN ()))))))) ORDER BY CASE WHEN CAST(vt1.c0 AS BLOB) THEN vt1.c0 COLLATE RTRIM WHEN (~ (vt1.c0)) THEN (+ (0.7277009212878497)) END ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN (('* >ᄾ뢻,j/h', vt1.c0)) AND (((((vt1.c0))=((vt1.c0))), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY vt1.c0;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) BETWEEN (('* >ᄾ뢻,j/h', vt1.c0)) AND (((((vt1.c0))=((vt1.c0))), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))))AND(CASE WHEN ((vt1.c0)OR(vt1.c0)) THEN IFNULL(vt1.c0, vt1.c0) WHEN (- (vt1.c0)) THEN CAST(vt1.c0 AS NUMERIC) WHEN CAST(vt1.c0 AS TEXT) THEN SQLITE_COMPILEOPTION_USED(vt1.c0) END))) ORDER BY ((((CAST(vt1.c0 AS REAL))OR(vt1.c0)))AND(CASE vt1.c0  WHEN 0.6900252539652327 THEN '' WHEN vt1.c0 THEN x'c4' END)) ASC, (LAST_INSERT_ROWID() IN (vt1.c0 COLLATE BINARY)) INTERSECT SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN (((NOT (vt1.c0)), CAST(vt1.c0 AS INTEGER), vt1.c0 COLLATE RTRIM)) AND ((((vt1.c0)OR(vt1.c0)), ((vt1.c0) NOT NULL), (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))))))) ORDER BY ((((CAST(vt1.c0 AS REAL))OR(vt1.c0)))AND(CASE vt1.c0  WHEN 0.6900252539652327 THEN '' WHEN vt1.c0 THEN x'c4' END)) ASC, (LAST_INSERT_ROWID() IN (vt1.c0 COLLATE BINARY));
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN (('* >ᄾ뢻,j/h', vt1.c0)) AND (((((vt1.c0))=((vt1.c0))), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY vt1.c0;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) BETWEEN (('* >ᄾ뢻,j/h', vt1.c0)) AND (((((vt1.c0))=((vt1.c0))), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))))AND(CASE WHEN ((vt1.c0)OR(vt1.c0)) THEN IFNULL(vt1.c0, vt1.c0) WHEN (- (vt1.c0)) THEN CAST(vt1.c0 AS NUMERIC) WHEN CAST(vt1.c0 AS TEXT) THEN SQLITE_COMPILEOPTION_USED(vt1.c0) END))) ORDER BY ((((CAST(vt1.c0 AS REAL))OR(vt1.c0)))AND(CASE vt1.c0  WHEN 0.6900252539652327 THEN '' WHEN vt1.c0 THEN x'c4' END)) ASC, (LAST_INSERT_ROWID() IN (vt1.c0 COLLATE BINARY)) INTERSECT SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN (((NOT (vt1.c0)), CAST(vt1.c0 AS INTEGER), vt1.c0 COLLATE RTRIM)) AND ((((vt1.c0)OR(vt1.c0)), ((vt1.c0) NOT NULL), (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))))))) ORDER BY ((((CAST(vt1.c0 AS REAL))OR(vt1.c0)))AND(CASE vt1.c0  WHEN 0.6900252539652327 THEN '' WHEN vt1.c0 THEN x'c4' END)) ASC, (LAST_INSERT_ROWID() IN (vt1.c0 COLLATE BINARY));
SELECT MAX(rt0.c0) FROM rt0, vt1 WHERE (((((((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c1)))))<=((((((rt0.c1)OR(rt0.c0)))OR(rt0.c3)))))) ORDER BY ((rt0.c0 COLLATE RTRIM) NOTNULL), CASE WHEN ((((((x'd2f1')AND(vt1.c0)))AND(vt1.c0)))OR(rt0.c3)) THEN CAST(rt0.c0 AS BLOB) WHEN ((rt0.c0)||(rt0.c1)) THEN (~ (rt0.c2)) WHEN CASE WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c2 END THEN (('875298652') IS FALSE) END DESC  NULLS FIRST, CAST(CAST(rt0.c3 AS INTEGER) AS REAL) ASC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c0) FROM rt0, vt1 WHERE (((((((((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c1)))))<((((((rt0.c1)OR(rt0.c0)))OR(rt0.c3))))))AND((+ (vt1.c0)) COLLATE NOCASE COLLATE RTRIM))) ORDER BY CASE WHEN ((x'') NOTNULL) THEN (((vt1.c0, rt0.c3)) NOT BETWEEN ((vt1.c0, rt0.c3)) AND ((rt0.c0, rt0.c3))) ELSE rt0.c0 COLLATE RTRIM END  NULLS FIRST, ((- (rt0.c0)) IN (CAST(NULL AS NUMERIC), ((vt1.c0) NOT BETWEEN (x'2f') AND (x'14')))) DESC;
SELECT ALL COUNT(*) FROM rt0 WHERE ((((rt0.c0)<=(rt0.c1)) IN (((rt0.c1) NOTNULL))));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((((rt0.c0)<=(rt0.c1)) IN (((rt0.c1) NOTNULL))))AND(((((rt0.c1) NOTNULL)) BETWEEN (((rt0.c0) NOTNULL)) AND (CAST(rt0.c2 AS TEXT)))))) LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)) THEN ((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c3)) WHEN ((rt0.c3)LIKE(rt0.c2)) THEN rt0.c2 END) LIMIT 0X0;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3 IN ())) BETWEEN ((('竘C}Cpq-협') BETWEEN (x'91572be1') AND (rt0.c0))) AND (rt0.c2 COLLATE RTRIM)));
SELECT ALL * FROM rt0 WHERE ((((((rt0.c3 IN ())) BETWEEN ((('竘C}Cpq-협') BETWEEN (x'91572be1') AND (rt0.c0))) AND (rt0.c2 COLLATE RTRIM)))AND((('gC?&L&脢}') BETWEEN (((rt0.c1) NOT NULL)) AND (LIKELY(rt0.c2)))))) ORDER BY CASE rt0.c3  WHEN x'c1d8' THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c3 END COLLATE NOCASE, (CASE WHEN rt0.c1 THEN rt0.c3 END IN (((rt0.c2)>>(rt0.c2)))) DESC INTERSECT SELECT ALL * FROM rt0 WHERE (rt0.c3) ORDER BY CASE rt0.c3  WHEN x'c1d8' THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c3 END COLLATE NOCASE, (CASE WHEN rt0.c1 THEN rt0.c3 END IN (((rt0.c2)>>(rt0.c2)))) DESC;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3 IN ())) BETWEEN ((('竘C}Cpq-협') BETWEEN (x'91572be1') AND (rt0.c0))) AND (rt0.c2 COLLATE RTRIM)));
SELECT ALL * FROM rt0 WHERE ((((((rt0.c3 IN ())) BETWEEN ((('竘C}Cpq-협') BETWEEN (x'91572be1') AND (rt0.c0))) AND (rt0.c2 COLLATE RTRIM)))AND((('gC?&L&脢}') BETWEEN (((rt0.c1) NOT NULL)) AND (LIKELY(rt0.c2)))))) ORDER BY CASE rt0.c3  WHEN x'c1d8' THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c3 END COLLATE NOCASE, (CASE WHEN rt0.c1 THEN rt0.c3 END IN (((rt0.c2)>>(rt0.c2)))) DESC INTERSECT SELECT ALL * FROM rt0 WHERE (rt0.c3) ORDER BY CASE rt0.c3  WHEN x'c1d8' THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c3 END COLLATE NOCASE, (CASE WHEN rt0.c1 THEN rt0.c3 END IN (((rt0.c2)>>(rt0.c2)))) DESC;
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE ((+ (((rt0.c3) IS TRUE))));
SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE ((+ (((rt0.c3) IS TRUE)))) INTERSECT SELECT ALL MAX(vt1.c0) FROM rt0, vt1 WHERE ((((rt0.c2))<>((vt1.c0))) COLLATE RTRIM);
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)<>(vt1.c0))) IS FALSE)) ORDER BY (+ (vt1.c0 COLLATE RTRIM));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)<(vt1.c0))) IS FALSE)) ORDER BY (+ (vt1.c0 COLLATE RTRIM));
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (CASE WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END IN ()) WHERE (((((((rt0.c1)OR(((((vt1.c0)AND(rt0.c2)))OR(rt0.c1)))))AND(((rt0.c1) BETWEEN (vt1.c0) AND ('v')))))AND(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c3)))OR(rt0.c2))))) ORDER BY (((rt0.c3, rt0.c2)) BETWEEN ((vt1.c0 COLLATE BINARY, ((((((vt1.c0)AND(rt0.c0)))AND(x'33b5')))AND(rt0.c1)))) AND (((rt0.c3 IN (rt0.c2)), CAST(NULL AS BLOB)))) DESC, CASE WHEN ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)) THEN 0.6857550958716969 END, (- (((rt0.c3) NOT NULL)))  NULLS FIRST;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (CASE WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END IN ()) WHERE (((((((((rt0.c1)OR(((((vt1.c0)AND(rt0.c2)))OR(rt0.c1)))))AND(((rt0.c1) BETWEEN (vt1.c0) AND ('v')))))AND(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c3)))OR(rt0.c2)))))AND((((((rt0.c3, rt0.c2))>((rt0.c0, rt0.c2)))) NOT BETWEEN (((((((((((NULL)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c1))) AND (((('I?C(', rt0.c0, rt0.c1)) BETWEEN ((rt0.c1, rt0.c3, rt0.c0)) AND ((rt0.c1, rt0.c2, vt1.c0)))))))) ORDER BY (((((+ (rt0.c1)))OR(rt0.c1 COLLATE BINARY)))AND((((rt0.c0))<((rt0.c0))))), ((rt0.c2) IS FALSE) COLLATE RTRIM ASC INTERSECT SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (CASE WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END IN ()) WHERE (CASE ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(rt0.c0))  WHEN ((rt0.c2) IS TRUE) THEN (((rt0.c2)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))) WHEN ((vt1.c0)OR(rt0.c0)) THEN rt0.c2 END) ORDER BY (((((+ (rt0.c1)))OR(rt0.c1 COLLATE BINARY)))AND((((rt0.c0))<((rt0.c0))))), ((rt0.c2) IS FALSE) COLLATE RTRIM ASC;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (CASE WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END IN ()) WHERE (((((((rt0.c1)OR(((((vt1.c0)AND(rt0.c2)))OR(rt0.c1)))))AND(((rt0.c1) BETWEEN (vt1.c0) AND ('v')))))AND(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c3)))OR(rt0.c2))))) ORDER BY (((rt0.c3, rt0.c2)) BETWEEN ((vt1.c0 COLLATE BINARY, ((((((vt1.c0)AND(rt0.c0)))AND(x'33b5')))AND(rt0.c1)))) AND (((rt0.c3 IN (rt0.c2)), CAST(NULL AS BLOB)))) DESC, CASE WHEN ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)) THEN 0.6857550958716969 END, (- (((rt0.c3) NOT NULL)))  NULLS FIRST;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (CASE WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END IN ()) WHERE (((((((((rt0.c1)OR(((((vt1.c0)AND(rt0.c2)))OR(rt0.c1)))))AND(((rt0.c1) BETWEEN (vt1.c0) AND ('v')))))AND(((((((rt0.c2)AND(rt0.c0)))AND(rt0.c3)))OR(rt0.c2)))))AND((((((rt0.c3, rt0.c2))>((rt0.c0, rt0.c2)))) NOT BETWEEN (((((((((((NULL)AND(rt0.c3)))OR(rt0.c0)))AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c1))) AND (((('I?C(', rt0.c0, rt0.c1)) BETWEEN ((rt0.c1, rt0.c3, rt0.c0)) AND ((rt0.c1, rt0.c2, vt1.c0)))))))) ORDER BY (((((+ (rt0.c1)))OR(rt0.c1 COLLATE BINARY)))AND((((rt0.c0))<((rt0.c0))))), ((rt0.c2) IS FALSE) COLLATE RTRIM ASC INTERSECT SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (CASE WHEN rt0.c0 THEN rt0.c3 ELSE vt1.c0 END IN ()) WHERE (CASE ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(rt0.c0))  WHEN ((rt0.c2) IS TRUE) THEN (((rt0.c2)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))) WHEN ((vt1.c0)OR(rt0.c0)) THEN rt0.c2 END) ORDER BY (((((+ (rt0.c1)))OR(rt0.c1 COLLATE BINARY)))AND((((rt0.c0))<((rt0.c0))))), ((rt0.c2) IS FALSE) COLLATE RTRIM ASC;
SELECT ALL * FROM rt0, vt1 WHERE (json_array((rt0.c1 IN ()), TYPEOF(vt1.c0))) ORDER BY ((((((((((((((rt0.c2)-(rt0.c0)))AND(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 END)))OR(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(rt0.c2 COLLATE NOCASE)))OR(((vt1.c0) BETWEEN (x'21a6ee') AND (rt0.c0)))))AND(CAST(rt0.c0 AS TEXT))))OR(rt0.c3))  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((json_array((rt0.c1 IN ()), TYPEOF(vt1.c0)))AND(((((((((((vt1.c0)OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c3)))OR(rt0.c0))) BETWEEN (CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c2 END) AND (((((rt0.c1)AND(rt0.c1)))AND(rt0.c2))))))) ORDER BY ((((((((((((((rt0.c2)-(rt0.c0)))AND(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 END)))OR(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(rt0.c2 COLLATE NOCASE)))OR(((vt1.c0) BETWEEN (x'21a6ee') AND (rt0.c0)))))AND(CAST(rt0.c0 AS TEXT))))OR(rt0.c3))  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((rt0.c3 IN ())) ORDER BY ((((((((((((((rt0.c2)-(rt0.c0)))AND(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 END)))OR(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(rt0.c2 COLLATE NOCASE)))OR(((vt1.c0) BETWEEN (x'21a6ee') AND (rt0.c0)))))AND(CAST(rt0.c0 AS TEXT))))OR(rt0.c3))  NULLS LAST LIMIT 2;
SELECT ALL * FROM rt0, vt1 WHERE (json_array((rt0.c1 IN ()), TYPEOF(vt1.c0))) ORDER BY ((((((((((((((rt0.c2)-(rt0.c0)))AND(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 END)))OR(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(rt0.c2 COLLATE NOCASE)))OR(((vt1.c0) BETWEEN (x'21a6ee') AND (rt0.c0)))))AND(CAST(rt0.c0 AS TEXT))))OR(rt0.c3))  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((json_array((rt0.c1 IN ()), TYPEOF(vt1.c0)))AND(((((((((((vt1.c0)OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c3)))OR(rt0.c0))) BETWEEN (CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c2 END) AND (((((rt0.c1)AND(rt0.c1)))AND(rt0.c2))))))) ORDER BY ((((((((((((((rt0.c2)-(rt0.c0)))AND(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 END)))OR(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(rt0.c2 COLLATE NOCASE)))OR(((vt1.c0) BETWEEN (x'21a6ee') AND (rt0.c0)))))AND(CAST(rt0.c0 AS TEXT))))OR(rt0.c3))  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((rt0.c3 IN ())) ORDER BY ((((((((((((((rt0.c2)-(rt0.c0)))AND(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 END)))OR(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(rt0.c2 COLLATE NOCASE)))OR(((vt1.c0) BETWEEN (x'21a6ee') AND (rt0.c0)))))AND(CAST(rt0.c0 AS TEXT))))OR(rt0.c3))  NULLS LAST LIMIT 2;
SELECT COUNT(*) FROM rt0 WHERE ((~ (((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c2))))) ORDER BY (- (((rt0.c1)IS(rt0.c3))));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((~ (((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c2))))) ORDER BY (- (((rt0.c1)IS(rt0.c3)))) LIMIT 0x1 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (ABS(((rt0.c1)&(rt0.c3)))) ORDER BY (- (((rt0.c1)IS(rt0.c3)))) LIMIT 1;
SELECT * FROM rt0, vt1 WHERE (rt0.c3) ORDER BY '-1067292222' ASC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((rt0.c3)AND(((rt0.c3)>>(rt0.c2 COLLATE NOCASE))))) ORDER BY '-1067292222' ASC  NULLS LAST LIMIT 0X5 INTERSECT SELECT * FROM rt0, vt1 WHERE ((NOT (LAST_INSERT_ROWID()))) ORDER BY '-1067292222' ASC  NULLS LAST LIMIT 5;
SELECT * FROM rt0, vt1 WHERE (rt0.c3) ORDER BY '-1067292222' ASC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((rt0.c3)AND(((rt0.c3)>>(rt0.c2 COLLATE NOCASE))))) ORDER BY '-1067292222' ASC  NULLS LAST LIMIT 0X5 INTERSECT SELECT * FROM rt0, vt1 WHERE ((NOT (LAST_INSERT_ROWID()))) ORDER BY '-1067292222' ASC  NULLS LAST LIMIT 5;
SELECT MAX(rt0.c2) FROM vt1 INNER JOIN rt0 ON MAX((+ (rt0.c1)), (rt0.c0 IN (vt1.c0, rt0.c2)), ((rt0.c0) IS FALSE), CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END) WHERE (rt0.c0);
SELECT DISTINCT MAX(rt0.c2) FROM vt1 INNER JOIN rt0 ON MAX((+ (rt0.c1)), (rt0.c0 IN (vt1.c0, rt0.c2)), ((rt0.c0) IS FALSE), CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END) WHERE (rt0.c0) ORDER BY ((NULL)%('-1818025728'))  NULLS LAST LIMIT 0X3;
SELECT COUNT(*) FROM rt0 WHERE (NULL) ORDER BY rt0.c0, SQLITE_COMPILEOPTION_USED(CASE '-1955672256'  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c0 END) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (((NULL)AND(x'dd51'))) ORDER BY ((((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c0)))+((0.7515227997221218 IN (rt0.c0)))) ASC  NULLS LAST, (((((((rt0.c2)OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c0)) IN ((~ (rt0.c1)), (((rt0.c1))<=((rt0.c3))))) ASC;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (NULL);
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (NULL) ORDER BY (- (((rt0.c3)>>(rt0.c2)))) DESC  NULLS FIRST, (((((rt0.c0, rt0.c1)) BETWEEN ((rt0.c0, rt0.c0)) AND ((x'8be6', rt0.c3)))) IS FALSE) DESC LIMIT 3;
SELECT * FROM vt1 WHERE (vt1.c0 COLLATE NOCASE COLLATE NOCASE COLLATE NOCASE);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE COLLATE NOCASE COLLATE NOCASE)AND(((((vt1.c0) IS FALSE)) ISNULL)))) ORDER BY ((((vt1.c0 IN (vt1.c0))))>=((vt1.c0 COLLATE NOCASE))), CASE WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN ((((((vt1.c0)OR(-647783693)))OR(vt1.c0)))OR(x'99b589')) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN CAST(vt1.c0 AS BLOB) END  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((SQLITE_SOURCE_ID())+(vt1.c0))) ORDER BY ((((vt1.c0 IN (vt1.c0))))>=((vt1.c0 COLLATE NOCASE))), CASE WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN ((((((vt1.c0)OR(0Xffffffffd9639af3)))OR(vt1.c0)))OR(x'99b589')) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN CAST(vt1.c0 AS BLOB) END  NULLS FIRST;
SELECT * FROM vt1 WHERE (vt1.c0 COLLATE NOCASE COLLATE NOCASE COLLATE NOCASE);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE COLLATE NOCASE COLLATE NOCASE)AND(((((vt1.c0) IS FALSE)) ISNULL)))) ORDER BY ((((vt1.c0 IN (vt1.c0))))>=((vt1.c0 COLLATE NOCASE))), CASE WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN ((((((vt1.c0)OR(-647783693)))OR(vt1.c0)))OR(x'99b589')) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN CAST(vt1.c0 AS BLOB) END  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((SQLITE_SOURCE_ID())+(vt1.c0))) ORDER BY ((((vt1.c0 IN (vt1.c0))))>=((vt1.c0 COLLATE NOCASE))), CASE WHEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) THEN ((((((vt1.c0)OR(0Xffffffffd9639af3)))OR(vt1.c0)))OR(x'99b589')) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN CAST(vt1.c0 AS BLOB) END  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (json_remove((((rt0.c2, '-2041558609', rt0.c0, rt0.c3))<((rt0.c1, rt0.c1, vt1.c0, rt0.c0))), ((rt0.c3) ISNULL), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c2 THEN x'' END, ((vt1.c0)GLOB(rt0.c1))));
SELECT * FROM vt1, rt0 WHERE (json_remove((((rt0.c2, '-2041558609', rt0.c0, rt0.c3))<((rt0.c1, rt0.c1, vt1.c0, rt0.c0))), ((rt0.c3) ISNULL), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c2 THEN x'' END, ((vt1.c0)GLOB(rt0.c1)))) LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (((((((rt0.c2) BETWEEN (rt0.c0) AND (vt1.c0)))AND(((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c2)))))OR('67065802'))) LIMIT 0x0;
SELECT ALL * FROM vt1, rt0 WHERE (json_remove((((rt0.c2, '-2041558609', rt0.c0, rt0.c3))<((rt0.c1, rt0.c1, vt1.c0, rt0.c0))), ((rt0.c3) ISNULL), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c2 THEN x'' END, ((vt1.c0)GLOB(rt0.c1))));
SELECT COUNT(*) FROM rt0, vt1 WHERE (CASE WHEN CASE rt0.c3  WHEN rt0.c1 THEN NULL WHEN rt0.c2 THEN rt0.c2 END THEN rt0.c1 WHEN 0X2cf4a86b THEN (vt1.c0 IN ()) WHEN rt0.c1 COLLATE BINARY THEN rt0.c2 COLLATE BINARY END) ORDER BY ((IFNULL(rt0.c0, vt1.c0))>=(CAST(rt0.c2 AS BLOB)))  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((CASE WHEN CASE rt0.c3  WHEN rt0.c1 THEN NULL WHEN rt0.c2 THEN rt0.c2 END THEN rt0.c1 WHEN 0X2cf4a86b THEN (vt1.c0 IN ()) WHEN rt0.c1 COLLATE BINARY THEN rt0.c2 COLLATE BINARY END)AND((((rt0.c2))!=((rt0.c2))) COLLATE BINARY COLLATE NOCASE))) ORDER BY (((rt0.c2 COLLATE NOCASE))=((rt0.c3 COLLATE NOCASE))) DESC, ((0.1562382611467048 COLLATE RTRIM) IS TRUE) INTERSECT SELECT COUNT(*) FROM rt0, vt1 WHERE ((NOT (((((rt0.c0)OR(rt0.c0)))AND(rt0.c3))))) ORDER BY (((rt0.c2 COLLATE NOCASE))==((rt0.c3 COLLATE NOCASE))) DESC, ((0.1562382611467048 COLLATE RTRIM) IS TRUE);
SELECT ALL * FROM rt0 WHERE (CASE rt0.c0  WHEN ((rt0.c0) NOT BETWEEN ('k*RP') AND (rt0.c0)) THEN rt0.c3 END);
SELECT ALL * FROM rt0 WHERE (CASE rt0.c0  WHEN ((rt0.c0) NOT BETWEEN ('k*RP') AND (rt0.c0)) THEN rt0.c3 END) ORDER BY (((((((((((((((((x'46', rt0.c3, rt0.c1))>=((x'9439', rt0.c1, rt0.c2))))AND(rt0.c1 COLLATE BINARY)))AND(((((((rt0.c1)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c1)))))AND((- (rt0.c3)))))OR(UNLIKELY(rt0.c3))))AND(CAST(NULL AS BLOB))))AND(((((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c3)))))OR((+ (rt0.c0)))) ASC;
SELECT ALL * FROM rt0 WHERE (CASE rt0.c0  WHEN ((rt0.c0) NOT BETWEEN ('k*RP') AND (rt0.c0)) THEN rt0.c3 END);
SELECT ALL * FROM rt0 WHERE (CASE rt0.c0  WHEN ((rt0.c0) NOT BETWEEN ('k*RP') AND (rt0.c0)) THEN rt0.c3 END) ORDER BY (((((((((((((((((x'46', rt0.c3, rt0.c1))>=((x'9439', rt0.c1, rt0.c2))))AND(rt0.c1 COLLATE BINARY)))AND(((((((rt0.c1)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c1)))))AND((- (rt0.c3)))))OR(UNLIKELY(rt0.c3))))AND(CAST(NULL AS BLOB))))AND(((((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c3)))))OR((+ (rt0.c0)))) ASC;
SELECT MAX(rt0.c2) FROM vt1 CROSS JOIN rt0 ON LIKELY((~ (rt0.c0))) WHERE (((((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)))OR(CASE rt0.c0  WHEN rt0.c2 THEN vt1.c0 WHEN '-58887415' THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 END)))AND(rt0.c0 COLLATE RTRIM))) ORDER BY rt0.c2  NULLS FIRST;
SELECT ALL MAX(rt0.c2) FROM vt1 CROSS JOIN rt0 ON LIKELY((~ (rt0.c0))) WHERE (((((((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)))OR(CASE rt0.c0  WHEN rt0.c2 THEN vt1.c0 WHEN '-58887415' THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 END)))AND(rt0.c0 COLLATE RTRIM))) ORDER BY rt0.c2  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0)=(NULL)) COLLATE RTRIM) ORDER BY ((((vt1.c0)OR(vt1.c0))) NOT BETWEEN ((vt1.c0 IN ())) AND (((vt1.c0) ISNULL))) DESC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)=(NULL)) COLLATE RTRIM)AND((CASE WHEN 0x0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END IN ())))) ORDER BY ((((vt1.c0) IS TRUE)) IS FALSE), CAST(((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) AS BLOB)  NULLS LAST, (((((((((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))OR(((vt1.c0) IS FALSE))))OR(UPPER(DISTINCT vt1.c0))))OR(((vt1.c0)/(vt1.c0)))))AND(json_array_length(vt1.c0))) ASC  NULLS FIRST, ((((-1025116292)<(vt1.c0))) BETWEEN (((vt1.c0) BETWEEN (NULL) AND (vt1.c0))) AND ((~ (vt1.c0)))) ASC LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE (rt0.c3);
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c3)AND((((rt0.c2 IN (rt0.c2, rt0.c1))) BETWEEN ((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3)))) AND (((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3))))))) ORDER BY ((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c0)) COLLATE BINARY, ROUND((+ (rt0.c1)), CAST(rt0.c1 AS REAL))  NULLS LAST, rt0.c0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END COLLATE BINARY) ORDER BY ((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c0)) COLLATE BINARY, ROUND((+ (rt0.c1)), CAST(rt0.c1 AS REAL))  NULLS LAST, rt0.c0;
SELECT ALL * FROM rt0 WHERE (rt0.c3);
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c3)AND((((rt0.c2 IN (rt0.c2, rt0.c1))) BETWEEN ((((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c3)))) AND (((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3))))))) ORDER BY ((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c0)) COLLATE BINARY, ROUND((+ (rt0.c1)), CAST(rt0.c1 AS REAL))  NULLS LAST, rt0.c0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END COLLATE BINARY) ORDER BY ((((((((rt0.c1)AND(rt0.c3)))OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c0)) COLLATE BINARY, ROUND((+ (rt0.c1)), CAST(rt0.c1 AS REAL))  NULLS LAST, rt0.c0;
SELECT ALL * FROM rt0, vt1 WHERE (((rt0.c3)>(rt0.c2)) COLLATE NOCASE);
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c3)>(rt0.c2)) COLLATE NOCASE)AND('潫7uCz')));
SELECT ALL * FROM rt0, vt1 WHERE (((rt0.c3)>(rt0.c2)) COLLATE NOCASE);
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c3)>(rt0.c2)) COLLATE NOCASE)AND('潫7uCz')));
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))>=(((vt1.c0) NOTNULL))));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))=(((vt1.c0) NOTNULL))))AND(('751361517' IN ((vt1.c0 IN (vt1.c0, vt1.c0)))))));
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))>=(((vt1.c0) NOTNULL))));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))=(((vt1.c0) NOTNULL))))AND(('751361517' IN ((vt1.c0 IN (vt1.c0, vt1.c0)))))));
SELECT MAX(rt0.c1) FROM rt0 WHERE (((((((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c0)))OR(rt0.c0)))AND(SQLITE_COMPILEOPTION_GET(rt0.c0))))OR(((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c1))))) ORDER BY (((('455756160')>=(rt0.c1)))IS NOT((~ (x'cc9e')))) ASC, rt0.c0;
SELECT MAX(rt0.c1) FROM rt0 WHERE (((((((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c0)))OR(rt0.c0)))AND(SQLITE_COMPILEOPTION_GET(rt0.c0))))OR(((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c1))))) ORDER BY (((('455756160')>=(rt0.c1)))IS NOT((~ (x'cc9e')))) ASC, rt0.c0 INTERSECT SELECT MAX(rt0.c1) FROM rt0 WHERE (((((((((((((load_extension(rt0.c3, rt0.c3))AND(((rt0.c1) NOTNULL))))AND(CAST(rt0.c3 AS BLOB))))AND((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c1))))))OR(rt0.c2)))AND('')))OR(((rt0.c0)<<(rt0.c0))))) ORDER BY (((('455756160')>=(rt0.c1)))IS NOT((~ (x'cc9e')))) ASC, rt0.c0;
SELECT ALL COUNT(*) FROM rt0 LEFT OUTER JOIN vt1 ON CASE CAST(rt0.c0 AS INTEGER)  WHEN ((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c3)) THEN ((vt1.c0) NOTNULL) WHEN ((vt1.c0)AND(rt0.c0)) THEN CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c3 THEN '' ELSE rt0.c1 END ELSE rt0.c1 COLLATE BINARY END WHERE (((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE BINARY);
SELECT DISTINCT COUNT(*) FROM rt0 LEFT OUTER JOIN vt1 ON CASE CAST(rt0.c0 AS INTEGER)  WHEN ((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c3)) THEN ((vt1.c0) NOTNULL) WHEN ((vt1.c0)AND(rt0.c0)) THEN CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c3 THEN '' ELSE rt0.c1 END ELSE rt0.c1 COLLATE BINARY END WHERE (((((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE BINARY)AND(x'')));
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS REAL))==(CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 ELSE vt1.c0 END)));
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c0 AS REAL))==(CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 ELSE vt1.c0 END)));
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c0 AS REAL))==(CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 ELSE vt1.c0 END)));
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c0 AS REAL))==(CASE WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 ELSE vt1.c0 END)));
SELECT * FROM vt1 WHERE (((((vt1.c0)<>(vt1.c0)))GLOB('' COLLATE BINARY)));
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)>(vt1.c0)))GLOB('' COLLATE BINARY))) LIMIT 0x0;
SELECT * FROM vt1 WHERE (((((vt1.c0)<>(vt1.c0)))GLOB('' COLLATE BINARY)));
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)>(vt1.c0)))GLOB('' COLLATE BINARY))) LIMIT 0x0;
SELECT COUNT(*) FROM rt0 WHERE ((rt0.c2 COLLATE NOCASE IN ((((rt0.c0, rt0.c0)) BETWEEN ((rt0.c0, rt0.c0)) AND ((rt0.c2, rt0.c3))), ((((((rt0.c1)AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c3)))));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((rt0.c2 COLLATE NOCASE IN ((((rt0.c0, rt0.c0)) BETWEEN ((rt0.c0, rt0.c0)) AND ((rt0.c2, rt0.c3))), ((((((rt0.c1)AND(rt0.c2)))AND(rt0.c1)))OR(rt0.c3)))))AND(HEX(DISTINCT ((((((((0.05743500512440591)AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c1)))))) ORDER BY (~ (((rt0.c0) NOT NULL)))  NULLS FIRST, ((((rt0.c0) IS FALSE))*((rt0.c1 IN (rt0.c1)))) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((('qK~K')==(CAST(-1904885758 AS BLOB)))) ORDER BY (~ (((rt0.c0) NOT NULL)))  NULLS FIRST, ((((rt0.c0) IS FALSE))*((rt0.c1 IN (rt0.c1)))) LIMIT 2;
SELECT MIN(rt0.c0) FROM rt0 WHERE ((((- (0x6ca35201))) ISNULL));
SELECT MIN(rt0.c0) FROM rt0 WHERE ((((((- (0x6ca35201))) ISNULL))AND(((CAST(rt0.c0 AS TEXT)) NOTNULL)))) LIMIT 0x3;
SELECT ALL * FROM rt0 WHERE (((((((((0.8709225950019939)AND(((rt0.c1)*(rt0.c1)))))AND((~ (rt0.c1)))))AND(rt0.c0 COLLATE BINARY)))OR(((rt0.c0) NOTNULL))));
SELECT ALL * FROM rt0 WHERE (((((((((((0.8709225950019939)AND(((rt0.c1)*(rt0.c1)))))AND((~ (rt0.c1)))))AND(rt0.c0 COLLATE BINARY)))OR(((rt0.c0) NOTNULL))))AND((rt0.c2 IN (NULL)) COLLATE NOCASE))) ORDER BY ((CAST(rt0.c2 AS REAL))<<(rt0.c2)), (((rt0.c1 IN ('3b薙Hi'))) IS FALSE)  NULLS LAST LIMIT 3 INTERSECT SELECT * FROM rt0 WHERE (CAST(((((rt0.c3)OR(rt0.c1)))AND(rt0.c3)) AS REAL)) ORDER BY ((CAST(rt0.c2 AS REAL))<<(rt0.c2)), (((rt0.c1 IN ('3b薙Hi'))) IS FALSE)  NULLS LAST LIMIT 0X3;
SELECT ALL * FROM rt0 WHERE (((((((((0.8709225950019939)AND(((rt0.c1)*(rt0.c1)))))AND((~ (rt0.c1)))))AND(rt0.c0 COLLATE BINARY)))OR(((rt0.c0) NOTNULL))));
SELECT ALL * FROM rt0 WHERE (((((((((((0.8709225950019939)AND(((rt0.c1)*(rt0.c1)))))AND((~ (rt0.c1)))))AND(rt0.c0 COLLATE BINARY)))OR(((rt0.c0) NOTNULL))))AND((rt0.c2 IN (NULL)) COLLATE NOCASE))) ORDER BY ((CAST(rt0.c2 AS REAL))<<(rt0.c2)), (((rt0.c1 IN ('3b薙Hi'))) IS FALSE)  NULLS LAST LIMIT 3 INTERSECT SELECT * FROM rt0 WHERE (CAST(((((rt0.c3)OR(rt0.c1)))AND(rt0.c3)) AS REAL)) ORDER BY ((CAST(rt0.c2 AS REAL))<<(rt0.c2)), (((rt0.c1 IN ('3b薙Hi'))) IS FALSE)  NULLS LAST LIMIT 0X3;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END COLLATE RTRIM  NULLS LAST, ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE, CAST(((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(0.6005947234803297)))AND(vt1.c0)) AS INTEGER) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END COLLATE RTRIM  NULLS LAST, ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE, CAST(((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(0.6005947234803297)))AND(vt1.c0)) AS INTEGER) LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((rt0.c3, rt0.c1, 'Hw')) AND ((rt0.c2, rt0.c0, vt1.c0))) COLLATE NOCASE) ORDER BY ((((rt0.c2)==(rt0.c0)))-((~ (rt0.c3))));
SELECT * FROM vt1, rt0 WHERE ((((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((rt0.c3, rt0.c1, 'Hw')) AND ((rt0.c2, rt0.c0, vt1.c0))) COLLATE NOCASE)AND((NOT (rt0.c2 COLLATE BINARY))))) ORDER BY 'f';
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((rt0.c3, rt0.c1, 'Hw')) AND ((rt0.c2, rt0.c0, vt1.c0))) COLLATE NOCASE) ORDER BY ((((rt0.c2)==(rt0.c0)))-((~ (rt0.c3))));
SELECT * FROM vt1, rt0 WHERE ((((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((rt0.c3, rt0.c1, 'Hw')) AND ((rt0.c2, rt0.c0, vt1.c0))) COLLATE NOCASE)AND((NOT (rt0.c2 COLLATE BINARY))))) ORDER BY 'f';
SELECT * FROM rt0, vt1 WHERE ((((+ (rt0.c3)))=((NOT (rt0.c2)))));
SELECT ALL * FROM rt0, vt1 WHERE ((((((+ (rt0.c3)))=((NOT (rt0.c2)))))AND(((CAST(rt0.c1 AS INTEGER)) BETWEEN (LTRIM(rt0.c3, rt0.c2)) AND (((vt1.c0)-(rt0.c1))))))) ORDER BY CASE WHEN rt0.c1 THEN rt0.c1 END COLLATE BINARY DESC, (((NOT (0xffffffffd4af3144)))>((rt0.c2 IN ())));
SELECT * FROM rt0, vt1 WHERE ((((+ (rt0.c3)))=((NOT (rt0.c2)))));
SELECT ALL * FROM rt0, vt1 WHERE ((((((+ (rt0.c3)))=((NOT (rt0.c2)))))AND(((CAST(rt0.c1 AS INTEGER)) BETWEEN (LTRIM(rt0.c3, rt0.c2)) AND (((vt1.c0)-(rt0.c1))))))) ORDER BY CASE WHEN rt0.c1 THEN rt0.c1 END COLLATE BINARY DESC, (((NOT (0xffffffffd4af3144)))>((rt0.c2 IN ())));
SELECT MIN(vt1.c0) FROM rt0, vt1 WHERE (TYPEOF(DISTINCT CASE WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 END));
SELECT DISTINCT MIN(vt1.c0) FROM rt0, vt1 WHERE (TYPEOF(DISTINCT CASE WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 END)) ORDER BY MIN(rt0.c2, rt0.c2, vt1.c0) COLLATE NOCASE  NULLS LAST, TYPEOF(DISTINCT rt0.c0) COLLATE NOCASE DESC;
SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE (TRIM(rt0.c1)) ORDER BY ((vt1.c0)OR(CAST(rt0.c3 AS TEXT))), (~ (((rt0.c2)>=(vt1.c0)))) DESC  NULLS FIRST, ((vt1.c0 COLLATE RTRIM) ISNULL)  NULLS LAST;
SELECT MAX(rt0.c3) FROM rt0 NOT INDEXED, vt1 WHERE (TRIM(rt0.c1)) ORDER BY rt0.c1  NULLS LAST, ((((rt0.c0) NOT NULL))LIKE(((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c2))));
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c1, rt0.c1)) AND ((rt0.c2, rt0.c2, '-1517545664')))) NOT BETWEEN (HEX(vt1.c0)) AND (((489088498)/(rt0.c3))))) ORDER BY ((((rt0.c2 IN (rt0.c1)), ((rt0.c2) IS FALSE)))>(((('-1e500') NOTNULL), NULL))), CAST(((vt1.c0)IS NOT(rt0.c1)) AS NUMERIC)  NULLS LAST, CAST(((rt0.c3)LIKE(rt0.c0)) AS INTEGER) ASC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c1, rt0.c1)) AND ((rt0.c2, rt0.c2, '-1517545664')))) NOT BETWEEN (HEX(vt1.c0)) AND (((0x1d26e5f2)/(rt0.c3)))))AND(1516063261))) ORDER BY UNLIKELY(((((((vt1.c0)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c1))) ASC  NULLS FIRST, ((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2))) NOT NULL) DESC, (((((rt0.c2) NOTNULL), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)), rt0.c2, UNICODE(rt0.c3)))<(((~ (rt0.c0)), rt0.c1 COLLATE RTRIM, ((rt0.c3) IS FALSE), ((rt0.c2)||(rt0.c1))))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((vt1.c0, rt0.c2, vt1.c0)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c1))) IN ())) ORDER BY UNLIKELY(((((((vt1.c0)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c1))) ASC  NULLS FIRST, ((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2))) NOT NULL) DESC, (((((rt0.c2) NOTNULL), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)), rt0.c2, UNICODE(rt0.c3)))<(((~ (rt0.c0)), rt0.c1 COLLATE RTRIM, ((rt0.c3) IS FALSE), ((rt0.c2)||(rt0.c1))))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c1, rt0.c1)) AND ((rt0.c2, rt0.c2, '-1517545664')))) NOT BETWEEN (HEX(vt1.c0)) AND (((489088498)/(rt0.c3))))) ORDER BY ((((rt0.c2 IN (rt0.c1)), ((rt0.c2) IS FALSE)))>(((('-1e500') NOTNULL), NULL))), CAST(((vt1.c0)IS NOT(rt0.c1)) AS NUMERIC)  NULLS LAST, CAST(((rt0.c3)LIKE(rt0.c0)) AS INTEGER) ASC  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((((((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c1, rt0.c1)) AND ((rt0.c2, rt0.c2, '-1517545664')))) NOT BETWEEN (HEX(vt1.c0)) AND (((0x1d26e5f2)/(rt0.c3)))))AND(1516063261))) ORDER BY UNLIKELY(((((((vt1.c0)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c1))) ASC  NULLS FIRST, ((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2))) NOT NULL) DESC, (((((rt0.c2) NOTNULL), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)), rt0.c2, UNICODE(rt0.c3)))<(((~ (rt0.c0)), rt0.c1 COLLATE RTRIM, ((rt0.c3) IS FALSE), ((rt0.c2)||(rt0.c1))))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((vt1.c0, rt0.c2, vt1.c0)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c1))) IN ())) ORDER BY UNLIKELY(((((((vt1.c0)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c1))) ASC  NULLS FIRST, ((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2))) NOT NULL) DESC, (((((rt0.c2) NOTNULL), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)), rt0.c2, UNICODE(rt0.c3)))<(((~ (rt0.c0)), rt0.c1 COLLATE RTRIM, ((rt0.c3) IS FALSE), ((rt0.c2)||(rt0.c1))))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((((((CAST(vt1.c0 AS TEXT))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))AND((vt1.c0 IN ()))))OR(HEX(vt1.c0)))) ORDER BY ((((((vt1.c0) IS TRUE))AND((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))))AND((vt1.c0 IN (vt1.c0))))  NULLS FIRST, CAST(((vt1.c0) NOT NULL) AS TEXT) DESC;
SELECT ALL * FROM vt1 WHERE (((((((CAST(vt1.c0 AS TEXT))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))AND((vt1.c0 IN ()))))OR(HEX(vt1.c0)))) ORDER BY vt1.c0  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((((CAST(vt1.c0 AS TEXT))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))AND((vt1.c0 IN ()))))OR(HEX(vt1.c0)))) ORDER BY ((((((vt1.c0) IS TRUE))AND((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))))AND((vt1.c0 IN (vt1.c0))))  NULLS FIRST, CAST(((vt1.c0) NOT NULL) AS TEXT) DESC;
SELECT ALL * FROM vt1 WHERE (((((((CAST(vt1.c0 AS TEXT))OR((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))AND((vt1.c0 IN ()))))OR(HEX(vt1.c0)))) ORDER BY vt1.c0  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((- (vt1.c0))))>((x'17')))) ORDER BY ((((vt1.c0)<(vt1.c0))) NOT BETWEEN (((vt1.c0)IS(vt1.c0))) AND ((~ (vt1.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((((- (vt1.c0))))>((x'17'))))AND(TYPEOF('8%(Ka')))) ORDER BY ((((vt1.c0)<(vt1.c0))) NOT BETWEEN (((vt1.c0)IS(vt1.c0))) AND ((~ (vt1.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((- (vt1.c0))))>((x'17')))) ORDER BY ((((vt1.c0)<(vt1.c0))) NOT BETWEEN (((vt1.c0)IS(vt1.c0))) AND ((~ (vt1.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((((- (vt1.c0))))>((x'17'))))AND(TYPEOF('8%(Ka')))) ORDER BY ((((vt1.c0)<(vt1.c0))) NOT BETWEEN (((vt1.c0)IS(vt1.c0))) AND ((~ (vt1.c0)))) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((((rt0.c3))<((NULL))))>('y?V龗')));
SELECT ALL COUNT(*) FROM rt0 NOT INDEXED, vt1 WHERE ((((((rt0.c3))<((NULL))))>('y?V龗'))) ORDER BY rt0.c3 INTERSECT SELECT COUNT(*) FROM rt0, vt1 WHERE (CAST((((rt0.c3, rt0.c2, rt0.c1, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c2, rt0.c2, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c1, rt0.c3))) AS TEXT)) ORDER BY rt0.c3;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((((rt0.c2))!=((rt0.c2))) IN ()));
SELECT DISTINCT MAX(rt0.c2) FROM rt0 WHERE (((((((rt0.c2))!=((rt0.c2))) IN ()))AND(((rt0.c1)+(rt0.c3)) COLLATE NOCASE))) ORDER BY (((rt0.c1, '0.4162970666403598')) NOT BETWEEN (('1965182289', rt0.c1)) AND ((rt0.c1, rt0.c1))) COLLATE NOCASE DESC  NULLS FIRST, (+ (((((((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c0)))OR(rt0.c2)))AND(rt0.c1))))  NULLS LAST, ((CASE WHEN rt0.c2 THEN rt0.c3 END)=((((rt0.c3, rt0.c0)) NOT BETWEEN ((x'0683e7', rt0.c3)) AND ((rt0.c1, rt0.c2))))) ASC LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM rt0 WHERE ((((rt0.c2 IN ()))|(CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 WHEN '[C\' THEN rt0.c2 END))) ORDER BY (((rt0.c1, '0.4162970666403598')) NOT BETWEEN (('1965182289', rt0.c1)) AND ((rt0.c1, rt0.c1))) COLLATE NOCASE DESC  NULLS FIRST, (+ (((((((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c0)))OR(rt0.c2)))AND(rt0.c1))))  NULLS LAST, ((CASE WHEN rt0.c2 THEN rt0.c3 END)==((((rt0.c3, rt0.c0)) NOT BETWEEN ((x'0683e7', rt0.c3)) AND ((rt0.c1, rt0.c2))))) ASC LIMIT 0x1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((-1834146775 IN ((- (vt1.c0))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))IS(vt1.c0 COLLATE NOCASE))  NULLS LAST, CASE WHEN (vt1.c0 IN ()) THEN vt1.c0 WHEN json_array_length(vt1.c0) THEN (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))) WHEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (vt1.c0 IN ()) WHEN ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN CASE WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END ELSE ((vt1.c0) IS TRUE) END;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((-1834146775 IN ((- (vt1.c0))))) ORDER BY CAST(vt1.c0 AS REAL) LIMIT 0;
SELECT * FROM rt0 WHERE (0.15442116623959756) ORDER BY ((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c0))) IN ((NOT (rt0.c1))));
SELECT ALL * FROM rt0 WHERE (0.15442116623959756) ORDER BY ((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c0))) IN ((NOT (rt0.c1)))) LIMIT 0X1;
SELECT * FROM rt0 WHERE (0.15442116623959756) ORDER BY ((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c0))) IN ((NOT (rt0.c1))));
SELECT ALL * FROM rt0 WHERE (0.15442116623959756) ORDER BY ((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c0))) IN ((NOT (rt0.c1)))) LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE (((((((((((rt0.c0)IS NOT(rt0.c3)))OR(((rt0.c3)-(rt0.c0)))))AND(rt0.c3)))AND((NULL IN ()))))AND(NULL)));
SELECT ALL * FROM rt0 WHERE (((((((((((((rt0.c0)IS NOT(rt0.c3)))OR(((rt0.c3)-(rt0.c0)))))AND(rt0.c3)))AND((NULL IN ()))))AND(NULL)))AND((((rt0.c0, rt0.c1)) BETWEEN ((((rt0.c3)+(rt0.c1)), (rt0.c2 IN (rt0.c3, rt0.c0)))) AND ((CASE WHEN 0.8288178426903353 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE 0.8077918475730635 END, ((0.2391270125766376)>(rt0.c1))))))));
SELECT ALL * FROM rt0 WHERE (((((((((((rt0.c0)IS NOT(rt0.c3)))OR(((rt0.c3)-(rt0.c0)))))AND(rt0.c3)))AND((NULL IN ()))))AND(NULL)));
SELECT ALL * FROM rt0 WHERE (((((((((((((rt0.c0)IS NOT(rt0.c3)))OR(((rt0.c3)-(rt0.c0)))))AND(rt0.c3)))AND((NULL IN ()))))AND(NULL)))AND((((rt0.c0, rt0.c1)) BETWEEN ((((rt0.c3)+(rt0.c1)), (rt0.c2 IN (rt0.c3, rt0.c0)))) AND ((CASE WHEN 0.8288178426903353 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 ELSE 0.8077918475730635 END, ((0.2391270125766376)>(rt0.c1))))))));
SELECT MAX(vt1.c0) FROM rt0 LEFT OUTER JOIN vt1 ON ((((rt0.c2) IS FALSE)) NOT BETWEEN (((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c1))) AND (((rt0.c1)GLOB(rt0.c3)))) WHERE (((((((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c0 WHEN 0.7690760471209456 THEN rt0.c2 ELSE vt1.c0 END)AND(NULL)))AND(CASE vt1.c0  WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c1 END)))AND(SUBSTR(rt0.c1, rt0.c1)))) ORDER BY CASE ((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c2))  WHEN (((rt0.c3, rt0.c3, vt1.c0, rt0.c3)) BETWEEN ((rt0.c3, rt0.c2, rt0.c2, 929198616)) AND ((vt1.c0, rt0.c1, rt0.c2, rt0.c0))) THEN NULL WHEN LIKE(vt1.c0, rt0.c3) THEN (- (rt0.c3)) END, 582015863 ASC  NULLS LAST, ((((((((((((((rt0.c2)OR(vt1.c0)))AND(vt1.c0)))AND(NULL)))OR(rt0.c0)))OR(1.60429264E8)))OR(rt0.c1)))<=((~ (rt0.c0))))  NULLS FIRST, (((((((vt1.c0, rt0.c1, rt0.c3))>=((rt0.c0, rt0.c1, rt0.c3))))OR(vt1.c0)))OR(((vt1.c0)IS NOT(vt1.c0)))) DESC  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM rt0 INNER JOIN vt1 ON ((((rt0.c2) IS FALSE)) NOT BETWEEN (((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c1))) AND (((rt0.c1)GLOB(rt0.c3)))) WHERE (((((((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c0 WHEN 0.7690760471209456 THEN rt0.c2 ELSE vt1.c0 END)AND(NULL)))AND(CASE vt1.c0  WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c1 END)))AND(SUBSTR(rt0.c1, rt0.c1)))) ORDER BY CASE ((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c2))  WHEN (((rt0.c3, rt0.c3, vt1.c0, rt0.c3)) BETWEEN ((rt0.c3, rt0.c2, rt0.c2, 929198616)) AND ((vt1.c0, rt0.c1, rt0.c2, rt0.c0))) THEN NULL WHEN LIKE(vt1.c0, rt0.c3) THEN (- (rt0.c3)) END, 582015863 ASC  NULLS LAST, ((((((((((((((rt0.c2)OR(vt1.c0)))AND(vt1.c0)))AND(NULL)))OR(rt0.c0)))OR(1.60429264E8)))OR(rt0.c1)))<=((~ (rt0.c0))))  NULLS FIRST, (((((((vt1.c0, rt0.c1, rt0.c3))>=((rt0.c0, rt0.c1, rt0.c3))))OR(vt1.c0)))OR(((vt1.c0)IS NOT(vt1.c0)))) DESC  NULLS FIRST LIMIT 2;
SELECT * FROM rt0 WHERE (rt0.c3);
SELECT * FROM rt0 WHERE (rt0.c3) ORDER BY (0.09514720601543125 IN (CAST(rt0.c1 AS NUMERIC))) ASC INTERSECT SELECT ALL * FROM rt0 WHERE (CAST(((rt0.c1)>>(rt0.c1)) AS BLOB)) ORDER BY (0.09514720601543125 IN (CAST(rt0.c1 AS NUMERIC))) ASC;
SELECT * FROM rt0 WHERE (rt0.c3);
SELECT * FROM rt0 WHERE (rt0.c3) ORDER BY (0.09514720601543125 IN (CAST(rt0.c1 AS NUMERIC))) ASC INTERSECT SELECT ALL * FROM rt0 WHERE (CAST(((rt0.c1)>>(rt0.c1)) AS BLOB)) ORDER BY (0.09514720601543125 IN (CAST(rt0.c1 AS NUMERIC))) ASC;
SELECT ALL * FROM vt1 WHERE (((('<ri')) BETWEEN ((CAST(vt1.c0 AS BLOB))) AND ((CAST(NULL AS INTEGER)))));
SELECT ALL * FROM vt1 WHERE (((('<ri')) BETWEEN ((CAST(vt1.c0 AS BLOB))) AND ((CAST(NULL AS INTEGER))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS BLOB)) AND ('L%V'))  NULLS LAST, ((x'c5') NOT BETWEEN (x'') AND (CASE WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 END))  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE ((((((((-6.47783693E8)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) IN ())) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS BLOB)) AND ('L%V'))  NULLS LAST, ((x'c5') NOT BETWEEN (x'') AND (CASE WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 END))  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((('<ri')) BETWEEN ((CAST(vt1.c0 AS BLOB))) AND ((CAST(NULL AS INTEGER)))));
SELECT ALL * FROM vt1 WHERE (((('<ri')) BETWEEN ((CAST(vt1.c0 AS BLOB))) AND ((CAST(NULL AS INTEGER))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS BLOB)) AND ('L%V'))  NULLS LAST, ((x'c5') NOT BETWEEN (x'') AND (CASE WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 END))  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE ((((((((-6.47783693E8)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) IN ())) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS BLOB)) AND ('L%V'))  NULLS LAST, ((x'c5') NOT BETWEEN (x'') AND (CASE WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 END))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((((rt0.c0, 1455595505, rt0.c0, vt1.c0))>((rt0.c3, rt0.c1, NULL, rt0.c3))))>=((rt0.c1 IN ()))));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((((((rt0.c0, 1455595505, rt0.c0, vt1.c0))>((rt0.c3, rt0.c1, NULL, rt0.c3))))>=((rt0.c1 IN ()))))AND(((((rt0.c3)&(vt1.c0)))>=('-780495417'))))) INTERSECT SELECT COUNT(*) FROM vt1, rt0 WHERE (-2.004012966E9);
SELECT ALL * FROM rt0, vt1 WHERE (CAST(rt0.c1 COLLATE RTRIM AS REAL)) ORDER BY ((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c1))) NOTNULL)  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((CAST(rt0.c1 COLLATE RTRIM AS REAL))AND(x'3e'))) ORDER BY ((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c1))) NOTNULL)  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (CAST(rt0.c1 COLLATE RTRIM AS REAL)) ORDER BY ((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c1))) NOTNULL)  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE (((CAST(rt0.c1 COLLATE RTRIM AS REAL))AND(x'3e'))) ORDER BY ((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c1))) NOTNULL)  NULLS LAST;
SELECT * FROM rt0 WHERE ((((rt0.c0)) NOT BETWEEN (((((rt0.c2))!=((rt0.c2))))) AND ((((((rt0.c3)AND(rt0.c3)))AND(rt0.c0)))))) ORDER BY rt0.c2 DESC;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c0)) NOT BETWEEN (((((rt0.c2))!=((rt0.c2))))) AND ((((((rt0.c3)AND(rt0.c3)))AND(rt0.c0))))))AND(CAST((rt0.c2 IN (rt0.c2)) AS TEXT)))) ORDER BY rt0.c3 ASC  NULLS LAST;
SELECT * FROM rt0 WHERE ((((rt0.c0)) NOT BETWEEN (((((rt0.c2))!=((rt0.c2))))) AND ((((((rt0.c3)AND(rt0.c3)))AND(rt0.c0)))))) ORDER BY rt0.c2 DESC;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c0)) NOT BETWEEN (((((rt0.c2))!=((rt0.c2))))) AND ((((((rt0.c3)AND(rt0.c3)))AND(rt0.c0))))))AND(CAST((rt0.c2 IN (rt0.c2)) AS TEXT)))) ORDER BY rt0.c3 ASC  NULLS LAST;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (json_insert(((rt0.c3) NOTNULL), rt0.c3, 0.8016627317752564, (((rt0.c3, rt0.c1, rt0.c1))>((rt0.c1, rt0.c1, rt0.c0))))) ORDER BY ((((rt0.c0) IS TRUE)) ISNULL)  NULLS FIRST, ('982536061' IN (CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 ELSE 0.8006504318977591 END));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (json_insert(((rt0.c3) NOTNULL), rt0.c3, 0.8016627317752564, (((rt0.c3, rt0.c1, rt0.c1))>((rt0.c1, rt0.c1, rt0.c0))))) ORDER BY ((((rt0.c0) IS TRUE)) ISNULL)  NULLS FIRST, ('982536061' IN (CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 ELSE 0.8006504318977591 END));
SELECT MIN(rt0.c0) FROM rt0 WHERE (((rt0.c3) BETWEEN (CHANGES()) AND (((rt0.c3) NOTNULL))));
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((rt0.c3) BETWEEN (CHANGES()) AND (((rt0.c3) NOTNULL))))AND(rt0.c1))) ORDER BY ((((rt0.c2) IS FALSE))<<(CAST(rt0.c1 AS INTEGER))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((rt0.c3) BETWEEN ('225801154') AND (rt0.c1)) COLLATE NOCASE) ORDER BY ((((rt0.c2) IS FALSE))<<(CAST(rt0.c1 AS INTEGER))) ASC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)IS NOT(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)IS NOT(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY ((x'')>((((vt1.c0))>=((x'9f6a'))))), ((vt1.c0)GLOB(CAST(vt1.c0 AS INTEGER))) DESC;
SELECT * FROM rt0, vt1 WHERE (((rt0.c2)-((((rt0.c3, 0.1685487833604905))<=((rt0.c1, rt0.c1)))))) ORDER BY (+ (SQLITE_COMPILEOPTION_USED(rt0.c3)))  NULLS LAST, (- (ABS(rt0.c1)));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c2)-((((rt0.c3, 0.1685487833604905))<((rt0.c1, rt0.c1)))))) ORDER BY (+ (SQLITE_COMPILEOPTION_USED(rt0.c3)))  NULLS LAST, (- (ABS(rt0.c1))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((GLOB(rt0.c3, rt0.c2)) NOT NULL)) ORDER BY (+ (SQLITE_COMPILEOPTION_USED(rt0.c3)))  NULLS LAST, (- (ABS(rt0.c1)));
SELECT * FROM rt0, vt1 WHERE (((rt0.c2)-((((rt0.c3, 0.1685487833604905))<=((rt0.c1, rt0.c1)))))) ORDER BY (+ (SQLITE_COMPILEOPTION_USED(rt0.c3)))  NULLS LAST, (- (ABS(rt0.c1)));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c2)-((((rt0.c3, 0.1685487833604905))<((rt0.c1, rt0.c1)))))) ORDER BY (+ (SQLITE_COMPILEOPTION_USED(rt0.c3)))  NULLS LAST, (- (ABS(rt0.c1))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((GLOB(rt0.c3, rt0.c2)) NOT NULL)) ORDER BY (+ (SQLITE_COMPILEOPTION_USED(rt0.c3)))  NULLS LAST, (- (ABS(rt0.c1)));
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT))AND(x'3a06')));
SELECT * FROM vt1 WHERE (((((CAST(vt1.c0 AS TEXT))AND(x'3a06')))AND(CASE vt1.c0  WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN CASE vt1.c0  WHEN NULL THEN vt1.c0 WHEN x'96' THEN vt1.c0 ELSE vt1.c0 END WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN vt1.c0 COLLATE BINARY THEN (0.6375268043486905 IN (x'')) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN vt1.c0 THEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) END))) ORDER BY (json_type(vt1.c0) IN ()) LIMIT 2 INTERSECT SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (json_type(vt1.c0) IN ()) LIMIT 0X2;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT))AND(x'3a06')));
SELECT * FROM vt1 WHERE (((((CAST(vt1.c0 AS TEXT))AND(x'3a06')))AND(CASE vt1.c0  WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN CASE vt1.c0  WHEN NULL THEN vt1.c0 WHEN x'96' THEN vt1.c0 ELSE vt1.c0 END WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END WHEN vt1.c0 COLLATE BINARY THEN (0.6375268043486905 IN (x'')) WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN vt1.c0 THEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) END))) ORDER BY (json_type(vt1.c0) IN ()) LIMIT 2 INTERSECT SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (json_type(vt1.c0) IN ()) LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE ((((- (vt1.c0))) NOT NULL));
SELECT * FROM vt1 WHERE ((((- (vt1.c0))) NOT NULL)) ORDER BY (NOT (vt1.c0)) DESC  NULLS FIRST, CASE 0.1971906781306867  WHEN json_insert(vt1.c0, x'e5', vt1.c0) THEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) WHEN ((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0)*(vt1.c0)) WHEN ((vt1.c0)<(vt1.c0)) THEN ((vt1.c0)OR(vt1.c0)) END, ((0.540962669160635) IS FALSE) DESC LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE ((((- (vt1.c0))) NOT NULL));
SELECT * FROM vt1 WHERE ((((- (vt1.c0))) NOT NULL)) ORDER BY (NOT (vt1.c0)) DESC  NULLS FIRST, CASE 0.1971906781306867  WHEN json_insert(vt1.c0, x'e5', vt1.c0) THEN ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)) WHEN ((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0)*(vt1.c0)) WHEN ((vt1.c0)<(vt1.c0)) THEN ((vt1.c0)OR(vt1.c0)) END, ((0.540962669160635) IS FALSE) DESC LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE (CAST(NULL AS REAL));
SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(NULL AS REAL)) ORDER BY ((((vt1.c0)*(rt0.c1)))||(LOWER(rt0.c2))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE ((rt0.c1) BETWEEN (rt0.c3) AND ('-499619510'))  WHEN CAST(vt1.c0 AS BLOB) THEN (rt0.c2 IN ('1188152669', rt0.c3)) WHEN rt0.c3 THEN 'e.minutes0R' ELSE (- (rt0.c2)) END) ORDER BY ((((vt1.c0)*(rt0.c1)))||(LOWER(rt0.c2)));
SELECT * FROM vt1, rt0 WHERE (CAST(NULL AS REAL));
SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(NULL AS REAL)) ORDER BY ((((vt1.c0)*(rt0.c1)))||(LOWER(rt0.c2))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE ((rt0.c1) BETWEEN (rt0.c3) AND ('-499619510'))  WHEN CAST(vt1.c0 AS BLOB) THEN (rt0.c2 IN ('1188152669', rt0.c3)) WHEN rt0.c3 THEN 'e.minutes0R' ELSE (- (rt0.c2)) END) ORDER BY ((((vt1.c0)*(rt0.c1)))||(LOWER(rt0.c2)));
SELECT COUNT(*) FROM vt1, rt0 WHERE (rt0.c0);
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (rt0.c0) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (LIKELIHOOD(DISTINCT (NOT (rt0.c3)), (~ (rt0.c1)))) LIMIT 0;
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE WHEN vt1.c0 THEN vt1.c0 END COLLATE BINARY);
SELECT COUNT(*) FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 END COLLATE BINARY)AND((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN ())))) ORDER BY vt1.c0  NULLS FIRST, CASE WHEN (((vt1.c0))>=((vt1.c0))) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN -1.87054108E9 THEN '-278802028' ELSE vt1.c0 END END DESC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c0)+(rt0.c2)))LIKE('523474862'))) ORDER BY (((((rt0.c3))>=((rt0.c2)))) NOT NULL), (((+ (vt1.c0)))GLOB(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))) ASC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((((((rt0.c0)+(rt0.c2)))LIKE('523474862')))AND((((CASE WHEN rt0.c2 THEN rt0.c2 END))=(((('-111670384') IS TRUE))))))) ORDER BY (((((rt0.c3))>=((rt0.c2)))) NOT NULL), (((+ (vt1.c0)))GLOB(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))) ASC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c0)+(rt0.c2)))LIKE('523474862'))) ORDER BY (((((rt0.c3))>=((rt0.c2)))) NOT NULL), (((+ (vt1.c0)))GLOB(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))) ASC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (((((((rt0.c0)+(rt0.c2)))LIKE('523474862')))AND((((CASE WHEN rt0.c2 THEN rt0.c2 END))=(((('-111670384') IS TRUE))))))) ORDER BY (((((rt0.c3))>=((rt0.c2)))) NOT NULL), (((+ (vt1.c0)))GLOB(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))) ASC  NULLS FIRST LIMIT 0x1;
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN (vt1.c0 IN ()) THEN (~ (vt1.c0)) WHEN CAST(vt1.c0 AS NUMERIC) THEN CAST(vt1.c0 AS BLOB) WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (- (vt1.c0)) WHEN CAST(vt1.c0 AS REAL) THEN vt1.c0 END) ORDER BY (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) COLLATE RTRIM  NULLS FIRST, ((((vt1.c0)+(vt1.c0))) NOT BETWEEN (vt1.c0) AND (CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) DESC, IFNULL((vt1.c0 IN (vt1.c0, vt1.c0)), ((vt1.c0)IS(vt1.c0)));
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN (vt1.c0 IN ()) THEN (~ (vt1.c0)) WHEN CAST(vt1.c0 AS NUMERIC) THEN CAST(vt1.c0 AS BLOB) WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN (- (vt1.c0)) WHEN CAST(vt1.c0 AS REAL) THEN vt1.c0 END) ORDER BY LIKELIHOOD(DISTINCT CAST('' AS INTEGER), ((vt1.c0)>=(vt1.c0))) DESC  NULLS LAST, LIKELY(vt1.c0 COLLATE BINARY)  NULLS LAST INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (+ (vt1.c0)) WHEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) THEN ((vt1.c0) ISNULL) ELSE vt1.c0 END) ORDER BY LIKELIHOOD(DISTINCT CAST('' AS INTEGER), ((vt1.c0)>=(vt1.c0))) DESC  NULLS LAST, LIKELY(vt1.c0 COLLATE BINARY)  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((~ (rt0.c3)) COLLATE NOCASE);
SELECT DISTINCT * FROM rt0 WHERE ((~ (rt0.c3)) COLLATE NOCASE) ORDER BY ((CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c1 END)IS NOT(((rt0.c1)GLOB(rt0.c3)))) ASC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM rt0 WHERE ((~ (rt0.c3)) COLLATE NOCASE);
SELECT DISTINCT * FROM rt0 WHERE ((~ (rt0.c3)) COLLATE NOCASE) ORDER BY ((CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c1 END)IS NOT(((rt0.c1)GLOB(rt0.c3)))) ASC  NULLS LAST LIMIT 0X0;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (x'de1c');
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE (((x'de1c')AND(((((rt0.c0)<>('꿞|UW_Z2mZ'))) NOT BETWEEN (CAST(rt0.c2 AS REAL)) AND (((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0))))))) ORDER BY x'b78547' DESC LIMIT 0X0;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (NULL) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 END) BETWEEN ('0.7597608600456579') AND (json_object(rt0.c1, rt0.c1, 0.5777363185553315, rt0.c3)))  NULLS LAST;
SELECT MAX(rt0.c0) FROM rt0 WHERE (NULL) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 END) BETWEEN ('0.7597608600456579') AND (json_object(rt0.c1, rt0.c1, 0.5777363185553315, rt0.c3)))  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1, rt0 WHERE ('') ORDER BY (((((vt1.c0))!=((rt0.c2)))) BETWEEN (vt1.c0) AND (((rt0.c3)GLOB(rt0.c2)))), x'5e7660'  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1, rt0 WHERE ('') ORDER BY rt0.c1  NULLS FIRST LIMIT 0x1 INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1, rt0 WHERE ((('}潙j')>=(((x'')==(rt0.c2))))) ORDER BY rt0.c1  NULLS FIRST LIMIT 0x1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((vt1.c0 COLLATE RTRIM IN (vt1.c0))) ORDER BY CASE WHEN vt1.c0 COLLATE RTRIM THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) ELSE vt1.c0 END DESC  NULLS FIRST, (((vt1.c0 IN ()))>(x'7e'));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0 COLLATE RTRIM IN (vt1.c0)))AND(((('hb}%hJ'))<((vt1.c0))) COLLATE RTRIM COLLATE RTRIM))) ORDER BY vt1.c0  NULLS FIRST, ((ABS(vt1.c0))>(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))  NULLS FIRST INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((((((((((((x'3806')AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))>>(((vt1.c0)>=(NULL))))) ORDER BY vt1.c0  NULLS FIRST, ((ABS(vt1.c0))>(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((rt0.c3 COLLATE BINARY)>((+ (rt0.c0))))) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c3 END)*(((((((rt0.c2)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c3)))), rt0.c0 COLLATE NOCASE COLLATE RTRIM COLLATE RTRIM ASC;
SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c3 COLLATE BINARY)>((+ (rt0.c0)))))AND((((rt0.c0 IN ()))&(((x'cc')<(rt0.c1))))))) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c3 END)*(((((((rt0.c2)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c3)))), rt0.c0 COLLATE NOCASE COLLATE RTRIM COLLATE RTRIM ASC LIMIT 4;
SELECT ALL * FROM rt0 WHERE (((rt0.c3 COLLATE BINARY)>((+ (rt0.c0))))) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c3 END)*(((((((rt0.c2)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c3)))), rt0.c0 COLLATE NOCASE COLLATE RTRIM COLLATE RTRIM ASC;
SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c3 COLLATE BINARY)>((+ (rt0.c0)))))AND((((rt0.c0 IN ()))&(((x'cc')<(rt0.c1))))))) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c3 END)*(((((((rt0.c2)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c3)))), rt0.c0 COLLATE NOCASE COLLATE RTRIM COLLATE RTRIM ASC LIMIT 4;
SELECT ALL * FROM rt0, vt1 WHERE ('Sw?\5') ORDER BY UPPER(((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))), CASE vt1.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 ELSE 0.7832476575275833 END COLLATE BINARY;
SELECT DISTINCT * FROM rt0, vt1 WHERE ('Sw?\5') ORDER BY UPPER(((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))), CASE vt1.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 ELSE 0.7832476575275833 END COLLATE BINARY;
SELECT ALL * FROM rt0, vt1 WHERE ('Sw?\5') ORDER BY UPPER(((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))), CASE vt1.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 ELSE 0.7832476575275833 END COLLATE BINARY;
SELECT DISTINCT * FROM rt0, vt1 WHERE ('Sw?\5') ORDER BY UPPER(((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))), CASE vt1.c0  WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 ELSE 0.7832476575275833 END COLLATE BINARY;
SELECT ALL * FROM vt1, rt0 WHERE (((CAST(rt0.c1 AS REAL)) ISNULL));
SELECT ALL * FROM vt1, rt0 WHERE (((((CAST(rt0.c1 AS REAL)) ISNULL))AND(((((((rt0.c1)AND(((rt0.c1)=(rt0.c2)))))OR(((vt1.c0)||(rt0.c2)))))OR(rt0.c2))))) INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (HEX(DISTINCT STRFTIME(rt0.c1, vt1.c0, rt0.c1)));
SELECT ALL * FROM vt1, rt0 WHERE (((CAST(rt0.c1 AS REAL)) ISNULL));
SELECT ALL * FROM vt1, rt0 WHERE (((((CAST(rt0.c1 AS REAL)) ISNULL))AND(((((((rt0.c1)AND(((rt0.c1)=(rt0.c2)))))OR(((vt1.c0)||(rt0.c2)))))OR(rt0.c2))))) INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (HEX(DISTINCT STRFTIME(rt0.c1, vt1.c0, rt0.c1)));
SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (0.3110504564435408) AND (vt1.c0))) NOTNULL)) ORDER BY ((vt1.c0 COLLATE RTRIM)OR((vt1.c0 IN ())))  NULLS FIRST, (CAST(0X3e51c819 AS TEXT) IN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, 0.08240309665604428 DESC;
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0) NOT BETWEEN (0.3110504564435408) AND (vt1.c0))) NOTNULL))AND((+ (vt1.c0)) COLLATE RTRIM))) ORDER BY NULL, CASE (('1251045505')=(vt1.c0))  WHEN '-182911986' THEN ((vt1.c0)IS(vt1.c0)) ELSE vt1.c0 END  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) ORDER BY NULL, CASE (('1251045505')=(vt1.c0))  WHEN '-182911986' THEN ((vt1.c0)IS(vt1.c0)) ELSE vt1.c0 END  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (0.3110504564435408) AND (vt1.c0))) NOTNULL)) ORDER BY ((vt1.c0 COLLATE RTRIM)OR((vt1.c0 IN ())))  NULLS FIRST, (CAST(0X3e51c819 AS TEXT) IN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, 0.08240309665604428 DESC;
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0) NOT BETWEEN (0.3110504564435408) AND (vt1.c0))) NOTNULL))AND((+ (vt1.c0)) COLLATE RTRIM))) ORDER BY NULL, CASE (('1251045505')=(vt1.c0))  WHEN '-182911986' THEN ((vt1.c0)IS(vt1.c0)) ELSE vt1.c0 END  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) ORDER BY NULL, CASE (('1251045505')=(vt1.c0))  WHEN '-182911986' THEN ((vt1.c0)IS(vt1.c0)) ELSE vt1.c0 END  NULLS FIRST LIMIT 1;
SELECT ALL MIN(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON (((((rt0.c1)<(rt0.c3))))<>(((('wAcwV&') ISNULL)))) WHERE (rt0.c1 COLLATE NOCASE) ORDER BY ((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)) COLLATE NOCASE  NULLS LAST, ((((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2)))OR(vt1.c0))) IS FALSE) ASC  NULLS LAST, (~ (CASE WHEN rt0.c3 THEN rt0.c3 END)) DESC;
SELECT ALL MIN(rt0.c2) FROM vt1 INNER JOIN rt0 ON (((((rt0.c1)<(rt0.c3))))<>(((('wAcwV&') ISNULL)))) WHERE (rt0.c1 COLLATE NOCASE) ORDER BY CAST(TRIM(DISTINCT rt0.c2, '-1673276151') AS INTEGER) ASC, ((((NULL)AND(vt1.c0)))||(((vt1.c0) IS FALSE)))  NULLS LAST INTERSECT SELECT ALL MIN(rt0.c2) FROM vt1 INNER JOIN rt0 ON (((((rt0.c1)<(rt0.c3))))<>(((('wAcwV&') ISNULL)))) WHERE (CAST((vt1.c0 IN (rt0.c0, vt1.c0)) AS REAL)) ORDER BY CAST(TRIM(DISTINCT rt0.c2, '-1673276151') AS INTEGER) ASC, ((((NULL)AND(vt1.c0)))||(((vt1.c0) IS FALSE)))  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE (NULL) ORDER BY rt0.c2  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE (NULL) ORDER BY rt0.c2  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE ((~ (((vt1.c0)||(rt0.c3))))) ORDER BY rt0.c2  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE (CASE WHEN '3x,2o' THEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END END);
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (CASE WHEN '3x,2o' THEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END END) ORDER BY ((((((((((((rt0.c3)AND(vt1.c0)))AND(vt1.c0)))OR(0.2318738057807389)))OR(0Xffffffffd44af48f COLLATE RTRIM)))OR((- (rt0.c2)))))AND(((vt1.c0)||(rt0.c3)))) INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (((((((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c0)))OR((NOT (rt0.c3)))))AND(((((rt0.c2)OR(vt1.c0)))OR(0.13634307481622487)))))AND(CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN 0.8895009993640729 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c3 END))) ORDER BY ((((((((((((rt0.c3)AND(vt1.c0)))AND(vt1.c0)))OR(0.2318738057807389)))OR(0Xffffffffd44af48f COLLATE RTRIM)))OR((- (rt0.c2)))))AND(((vt1.c0)||(rt0.c3))));
SELECT ALL * FROM vt1, rt0 WHERE (CASE WHEN '3x,2o' THEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END END);
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (CASE WHEN '3x,2o' THEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END END) ORDER BY ((((((((((((rt0.c3)AND(vt1.c0)))AND(vt1.c0)))OR(0.2318738057807389)))OR(0Xffffffffd44af48f COLLATE RTRIM)))OR((- (rt0.c2)))))AND(((vt1.c0)||(rt0.c3)))) INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (((((((((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c0)))OR((NOT (rt0.c3)))))AND(((((rt0.c2)OR(vt1.c0)))OR(0.13634307481622487)))))AND(CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN 0.8895009993640729 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c3 END))) ORDER BY ((((((((((((rt0.c3)AND(vt1.c0)))AND(vt1.c0)))OR(0.2318738057807389)))OR(0Xffffffffd44af48f COLLATE RTRIM)))OR((- (rt0.c2)))))AND(((vt1.c0)||(rt0.c3))));
SELECT COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON ((((rt0.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))) IN ()) WHERE (((((((rt0.c2)OR(((((((0.3954282150639862)OR(vt1.c0)))OR(rt0.c1)))AND(rt0.c2)))))OR((((rt0.c1, x'7d', rt0.c0, rt0.c1))<>((rt0.c3, rt0.c3, rt0.c0, rt0.c1))))))AND(((rt0.c2) IS FALSE))));
SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON ((((rt0.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))) IN ()) WHERE (((((((rt0.c2)OR(((((((0.3954282150639862)OR(vt1.c0)))OR(rt0.c1)))AND(rt0.c2)))))OR((((rt0.c1, x'7d', rt0.c0, rt0.c1))<>((rt0.c3, rt0.c3, rt0.c0, rt0.c1))))))AND(((rt0.c2) IS FALSE)))) LIMIT 2;
SELECT * FROM vt1, rt0 WHERE ((((- (vt1.c0))) NOT BETWEEN (CASE WHEN rt0.c1 THEN 774386652 END) AND (CAST(rt0.c3 AS REAL))));
SELECT * FROM vt1, rt0 WHERE ((((((- (vt1.c0))) NOT BETWEEN (CASE WHEN rt0.c1 THEN 774386652 END) AND (CAST(rt0.c3 AS REAL))))AND(((((rt0.c2)-(rt0.c3))) IS FALSE)))) LIMIT 1;
SELECT * FROM vt1, rt0 WHERE ((((- (vt1.c0))) NOT BETWEEN (CASE WHEN rt0.c1 THEN 774386652 END) AND (CAST(rt0.c3 AS REAL))));
SELECT * FROM vt1, rt0 WHERE ((((((- (vt1.c0))) NOT BETWEEN (CASE WHEN rt0.c1 THEN 774386652 END) AND (CAST(rt0.c3 AS REAL))))AND(((((rt0.c2)-(rt0.c3))) IS FALSE)))) LIMIT 1;
SELECT ALL COUNT(*) FROM vt1 WHERE (((((vt1.c0) ISNULL)) BETWEEN ('82635964') AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (((('')AND(vt1.c0)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))), (((vt1.c0)) NOT BETWEEN ((SQLITE_COMPILEOPTION_USED(vt1.c0))) AND ((IFNULL(DISTINCT vt1.c0, vt1.c0)))), ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) NOT NULL)  NULLS LAST, ((0.9333927369783425 COLLATE BINARY) ISNULL), CAST(((vt1.c0) ISNULL) AS REAL)  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0) ISNULL)) BETWEEN ('82635964') AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (((('')AND(vt1.c0)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))), (((vt1.c0)) NOT BETWEEN ((SQLITE_COMPILEOPTION_USED(vt1.c0))) AND ((IFNULL(DISTINCT vt1.c0, vt1.c0)))), ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) NOT NULL)  NULLS LAST, ((0.9333927369783425 COLLATE BINARY) ISNULL), CAST(((vt1.c0) ISNULL) AS REAL)  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (LIKELIHOOD(DISTINCT ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(7.22345103E8)), ((vt1.c0) BETWEEN ('-927486048') AND (x'')))) ORDER BY (((('')AND(vt1.c0)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))), (((vt1.c0)) NOT BETWEEN ((SQLITE_COMPILEOPTION_USED(vt1.c0))) AND ((IFNULL(DISTINCT vt1.c0, vt1.c0)))), ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) NOT NULL)  NULLS LAST, ((0.9333927369783425 COLLATE BINARY) ISNULL), CAST(((vt1.c0) ISNULL) AS REAL)  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (CAST((((vt1.c0))>=((vt1.c0))) AS NUMERIC));
SELECT DISTINCT * FROM vt1 WHERE (CAST((((vt1.c0))>((vt1.c0))) AS NUMERIC)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))  WHEN vt1.c0 COLLATE RTRIM THEN ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) WHEN 0.7972971810020024 THEN ((((((((((((vt1.c0)OR(-2113395339)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) END) LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (CAST((((vt1.c0))>=((vt1.c0))) AS NUMERIC));
SELECT DISTINCT * FROM vt1 WHERE (CAST((((vt1.c0))>((vt1.c0))) AS NUMERIC)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))  WHEN vt1.c0 COLLATE RTRIM THEN ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) WHEN 0.7972971810020024 THEN ((((((((((((vt1.c0)OR(-2113395339)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) END) LIMIT 0X0;
SELECT ALL * FROM rt0, vt1 WHERE (CASE WHEN CAST(rt0.c2 AS NUMERIC) THEN (((rt0.c0, rt0.c2, rt0.c0)) BETWEEN ((NULL, 0.838036884513789, rt0.c1)) AND ((rt0.c1, rt0.c2, rt0.c0))) WHEN (x'f9' IN (rt0.c3, rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)) WHEN (((rt0.c2, rt0.c1)) BETWEEN ((vt1.c0, 0xffffffffb8bc6050)) AND ((0.5861674319066714, vt1.c0))) THEN (+ (vt1.c0)) ELSE (((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c2))) END) ORDER BY DATETIME(CASE WHEN '78570941' THEN vt1.c0 WHEN '-1608336902' THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE vt1.c0 END, ((rt0.c1) BETWEEN (NULL) AND (rt0.c2)), 0xffffffff99a5e9da, ((rt0.c1)==(rt0.c3)))  NULLS LAST, ((((((0.03371136291115384)<<('-86516757')))OR(CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN '' THEN '-1469812196' ELSE vt1.c0 END)))OR(rt0.c3 COLLATE BINARY)) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN CAST(rt0.c2 AS NUMERIC) THEN (((rt0.c0, rt0.c2, rt0.c0)) BETWEEN ((NULL, 0.838036884513789, rt0.c1)) AND ((rt0.c1, rt0.c2, rt0.c0))) WHEN (x'f9' IN (rt0.c3, rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)) WHEN (((rt0.c2, rt0.c1)) BETWEEN ((vt1.c0, 0Xffffffffb8bc6050)) AND ((0.5861674319066714, vt1.c0))) THEN (+ (vt1.c0)) ELSE (((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c2))) END) ORDER BY DATETIME(CASE WHEN '78570941' THEN vt1.c0 WHEN '-1608336902' THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE vt1.c0 END, ((rt0.c1) BETWEEN (NULL) AND (rt0.c2)), 0xffffffff99a5e9da, ((rt0.c1)=(rt0.c3)))  NULLS LAST, ((((((0.03371136291115384)<<('-86516757')))OR(CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN '' THEN '-1469812196' ELSE vt1.c0 END)))OR(rt0.c3 COLLATE BINARY)) DESC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (CASE WHEN CAST(rt0.c2 AS NUMERIC) THEN (((rt0.c0, rt0.c2, rt0.c0)) BETWEEN ((NULL, 0.838036884513789, rt0.c1)) AND ((rt0.c1, rt0.c2, rt0.c0))) WHEN (x'f9' IN (rt0.c3, rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)) WHEN (((rt0.c2, rt0.c1)) BETWEEN ((vt1.c0, 0xffffffffb8bc6050)) AND ((0.5861674319066714, vt1.c0))) THEN (+ (vt1.c0)) ELSE (((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c2))) END) ORDER BY DATETIME(CASE WHEN '78570941' THEN vt1.c0 WHEN '-1608336902' THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE vt1.c0 END, ((rt0.c1) BETWEEN (NULL) AND (rt0.c2)), 0xffffffff99a5e9da, ((rt0.c1)==(rt0.c3)))  NULLS LAST, ((((((0.03371136291115384)<<('-86516757')))OR(CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN '' THEN '-1469812196' ELSE vt1.c0 END)))OR(rt0.c3 COLLATE BINARY)) DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE WHEN CAST(rt0.c2 AS NUMERIC) THEN (((rt0.c0, rt0.c2, rt0.c0)) BETWEEN ((NULL, 0.838036884513789, rt0.c1)) AND ((rt0.c1, rt0.c2, rt0.c0))) WHEN (x'f9' IN (rt0.c3, rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2)) WHEN (((rt0.c2, rt0.c1)) BETWEEN ((vt1.c0, 0Xffffffffb8bc6050)) AND ((0.5861674319066714, vt1.c0))) THEN (+ (vt1.c0)) ELSE (((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c2))) END) ORDER BY DATETIME(CASE WHEN '78570941' THEN vt1.c0 WHEN '-1608336902' THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE vt1.c0 END, ((rt0.c1) BETWEEN (NULL) AND (rt0.c2)), 0xffffffff99a5e9da, ((rt0.c1)=(rt0.c3)))  NULLS LAST, ((((((0.03371136291115384)<<('-86516757')))OR(CASE WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN '' THEN '-1469812196' ELSE vt1.c0 END)))OR(rt0.c3 COLLATE BINARY)) DESC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ('窅') ORDER BY CASE ((vt1.c0)IS NOT(rt0.c1))  WHEN 0Xffffffffbca3cfbb THEN CHAR(rt0.c3) ELSE ((rt0.c1)IS(vt1.c0)) END ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ('窅') ORDER BY rt0.c0  NULLS LAST, rt0.c0 ASC;
SELECT * FROM vt1, rt0 WHERE ('窅') ORDER BY CASE ((vt1.c0)IS NOT(rt0.c1))  WHEN 0Xffffffffbca3cfbb THEN CHAR(rt0.c3) ELSE ((rt0.c1)IS(vt1.c0)) END ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ('窅') ORDER BY rt0.c0  NULLS LAST, rt0.c0 ASC;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (((~ (rt0.c0)) IN ())) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c2)))+(DATETIME(rt0.c3, rt0.c0, rt0.c1, rt0.c3))) ASC;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (((((~ (rt0.c0)) IN ()))AND(CAST((+ (rt0.c0)) AS BLOB)))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c2)))+(DATETIME(rt0.c3, rt0.c0, rt0.c1, rt0.c3))) ASC LIMIT 0x1 INTERSECT SELECT ALL MIN(rt0.c2) FROM rt0 WHERE ((((rt0.c3 IN (rt0.c1)))<=(CAST('i' AS NUMERIC)))) ORDER BY ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c2)))+(DATETIME(rt0.c3, rt0.c0, rt0.c1, rt0.c3))) ASC LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c0 COLLATE RTRIM AS NUMERIC)) ORDER BY ((((rt0.c3) NOTNULL)) IS TRUE), ((((vt1.c0) ISNULL))&(COALESCE(DISTINCT rt0.c3, rt0.c1, rt0.c0)));
SELECT * FROM vt1, rt0 WHERE (CAST(rt0.c0 COLLATE RTRIM AS NUMERIC)) ORDER BY CAST(((((((((((rt0.c0)OR(rt0.c0)))AND(rt0.c1)))OR(vt1.c0)))AND(rt0.c0)))OR(rt0.c3)) AS NUMERIC);
SELECT ALL * FROM vt1, rt0 WHERE (CAST(rt0.c0 COLLATE RTRIM AS NUMERIC)) ORDER BY ((((rt0.c3) NOTNULL)) IS TRUE), ((((vt1.c0) ISNULL))&(COALESCE(DISTINCT rt0.c3, rt0.c1, rt0.c0)));
SELECT * FROM vt1, rt0 WHERE (CAST(rt0.c0 COLLATE RTRIM AS NUMERIC)) ORDER BY CAST(((((((((((rt0.c0)OR(rt0.c0)))AND(rt0.c1)))OR(vt1.c0)))AND(rt0.c0)))OR(rt0.c3)) AS NUMERIC);
SELECT * FROM rt0 WHERE ((((((rt0.c2)<<(rt0.c2))))>((rt0.c0))));
SELECT ALL * FROM rt0 WHERE ((((((rt0.c2)<<(rt0.c2))))>((rt0.c0))));
SELECT * FROM rt0 WHERE ((((((rt0.c2)<<(rt0.c2))))>((rt0.c0))));
SELECT ALL * FROM rt0 WHERE ((((((rt0.c2)<<(rt0.c2))))>((rt0.c0))));
SELECT * FROM vt1 CROSS JOIN rt0 ON ((~ (rt0.c2)) IN (((rt0.c2)&(vt1.c0)))) WHERE (((((((((rt0.c1)OR(0.9437407910081762)))AND(rt0.c3)))OR(vt1.c0)))<((- (rt0.c2))))) ORDER BY (((rt0.c0)) BETWEEN ((4.26117718E8)) AND ((((vt1.c0)<>(rt0.c0))))) DESC  NULLS FIRST, UNICODE(((rt0.c2)-(rt0.c2))) DESC;
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON ((~ (rt0.c2)) IN (((rt0.c2)&(vt1.c0)))) WHERE (((((((((rt0.c1)OR(0.9437407910081762)))AND(rt0.c3)))OR(vt1.c0)))<((- (rt0.c2))))) ORDER BY (((rt0.c0)) BETWEEN ((4.26117718E8)) AND ((((vt1.c0)!=(rt0.c0))))) DESC  NULLS FIRST, UNICODE(((rt0.c2)-(rt0.c2))) DESC LIMIT 0x2;
SELECT * FROM vt1 CROSS JOIN rt0 ON ((~ (rt0.c2)) IN (((rt0.c2)&(vt1.c0)))) WHERE (((((((((rt0.c1)OR(0.9437407910081762)))AND(rt0.c3)))OR(vt1.c0)))<((- (rt0.c2))))) ORDER BY (((rt0.c0)) BETWEEN ((4.26117718E8)) AND ((((vt1.c0)<>(rt0.c0))))) DESC  NULLS FIRST, UNICODE(((rt0.c2)-(rt0.c2))) DESC;
SELECT DISTINCT * FROM vt1 CROSS JOIN rt0 ON ((~ (rt0.c2)) IN (((rt0.c2)&(vt1.c0)))) WHERE (((((((((rt0.c1)OR(0.9437407910081762)))AND(rt0.c3)))OR(vt1.c0)))<((- (rt0.c2))))) ORDER BY (((rt0.c0)) BETWEEN ((4.26117718E8)) AND ((((vt1.c0)!=(rt0.c0))))) DESC  NULLS FIRST, UNICODE(((rt0.c2)-(rt0.c2))) DESC LIMIT 0x2;
SELECT * FROM rt0, vt1 WHERE (CASE WHEN rt0.c3 COLLATE NOCASE THEN (rt0.c2 IN ()) WHEN ((vt1.c0) IS FALSE) THEN ((0.5870408398620962) BETWEEN (rt0.c1) AND (rt0.c1)) END) ORDER BY rt0.c2  NULLS LAST, (((rt0.c1, rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN (((rt0.c1 IN (rt0.c3)), (rt0.c2 IN (rt0.c2)), ((((((((rt0.c3)OR(rt0.c0)))AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)), NULL)) AND (((rt0.c0 IN ()), rt0.c2 COLLATE BINARY, ((rt0.c1) IS FALSE), TRIM(vt1.c0, rt0.c1))))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((CASE WHEN rt0.c3 COLLATE NOCASE THEN (rt0.c2 IN ()) WHEN ((vt1.c0) IS FALSE) THEN ((0.5870408398620962) BETWEEN (rt0.c1) AND (rt0.c1)) END)AND((CASE rt0.c0  WHEN '1001522460' THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 END IN ())))) ORDER BY CAST(rt0.c0 AS INTEGER), (((rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN ((SUBSTR(rt0.c0, 0.404592676535915), NULL COLLATE NOCASE, ((NULL)||(0.8938055664288324)))) AND ((CAST(rt0.c1 AS REAL), rt0.c2 COLLATE NOCASE, CASE rt0.c1  WHEN 'ex' THEN vt1.c0 END))) INTERSECT SELECT * FROM rt0, vt1 WHERE ((((rt0.c3) NOT NULL) IN (((1508769651) NOT BETWEEN (rt0.c0) AND (rt0.c1)), rt0.c0 COLLATE BINARY))) ORDER BY CAST(rt0.c0 AS INTEGER), (((rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN ((SUBSTR(rt0.c0, 0.404592676535915), NULL COLLATE NOCASE, ((NULL)||(0.8938055664288324)))) AND ((CAST(rt0.c1 AS REAL), rt0.c2 COLLATE NOCASE, CASE rt0.c1  WHEN 'ex' THEN vt1.c0 END)));
SELECT * FROM rt0, vt1 WHERE (CASE WHEN rt0.c3 COLLATE NOCASE THEN (rt0.c2 IN ()) WHEN ((vt1.c0) IS FALSE) THEN ((0.5870408398620962) BETWEEN (rt0.c1) AND (rt0.c1)) END) ORDER BY rt0.c2  NULLS LAST, (((rt0.c1, rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN (((rt0.c1 IN (rt0.c3)), (rt0.c2 IN (rt0.c2)), ((((((((rt0.c3)OR(rt0.c0)))AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)), NULL)) AND (((rt0.c0 IN ()), rt0.c2 COLLATE BINARY, ((rt0.c1) IS FALSE), TRIM(vt1.c0, rt0.c1))))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (((CASE WHEN rt0.c3 COLLATE NOCASE THEN (rt0.c2 IN ()) WHEN ((vt1.c0) IS FALSE) THEN ((0.5870408398620962) BETWEEN (rt0.c1) AND (rt0.c1)) END)AND((CASE rt0.c0  WHEN '1001522460' THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 END IN ())))) ORDER BY CAST(rt0.c0 AS INTEGER), (((rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN ((SUBSTR(rt0.c0, 0.404592676535915), NULL COLLATE NOCASE, ((NULL)||(0.8938055664288324)))) AND ((CAST(rt0.c1 AS REAL), rt0.c2 COLLATE NOCASE, CASE rt0.c1  WHEN 'ex' THEN vt1.c0 END))) INTERSECT SELECT * FROM rt0, vt1 WHERE ((((rt0.c3) NOT NULL) IN (((1508769651) NOT BETWEEN (rt0.c0) AND (rt0.c1)), rt0.c0 COLLATE BINARY))) ORDER BY CAST(rt0.c0 AS INTEGER), (((rt0.c0, rt0.c3, rt0.c2)) NOT BETWEEN ((SUBSTR(rt0.c0, 0.404592676535915), NULL COLLATE NOCASE, ((NULL)||(0.8938055664288324)))) AND ((CAST(rt0.c1 AS REAL), rt0.c2 COLLATE NOCASE, CASE rt0.c1  WHEN 'ex' THEN vt1.c0 END)));
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c2))) NOT NULL));
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c2))) NOT NULL))AND(CAST(((rt0.c0) ISNULL) AS REAL))));
SELECT * FROM rt0 WHERE ((((((rt0.c3, '-1302896843')) BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c0)))) NOTNULL));
SELECT ALL * FROM rt0 WHERE ((((((((rt0.c3, '-1302896843')) BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c0)))) NOTNULL))AND(COALESCE(DISTINCT (NOT (rt0.c1)), ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1)), rt0.c2)))) ORDER BY ((((((rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c2, rt0.c3))), CASE WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END, '1893300537'))>((((rt0.c2)>=(-1798440272)), (+ (rt0.c2)), IFNULL(rt0.c0, rt0.c3))))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT ALL * FROM rt0 WHERE ((((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c0)) IN (((rt0.c0)OR(rt0.c0))))) ORDER BY ((((((rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c2, rt0.c3))), CASE WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END, '1893300537'))>((((rt0.c2)>=(-1798440272)), (+ (rt0.c2)), IFNULL(rt0.c0, rt0.c3))))  NULLS FIRST LIMIT 1;
SELECT * FROM rt0 WHERE ((((((rt0.c3, '-1302896843')) BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c0)))) NOTNULL));
SELECT ALL * FROM rt0 WHERE ((((((((rt0.c3, '-1302896843')) BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c2, rt0.c0)))) NOTNULL))AND(COALESCE(DISTINCT (NOT (rt0.c1)), ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1)), rt0.c2)))) ORDER BY ((((((rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c2, rt0.c3))), CASE WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END, '1893300537'))>((((rt0.c2)>=(-1798440272)), (+ (rt0.c2)), IFNULL(rt0.c0, rt0.c3))))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT ALL * FROM rt0 WHERE ((((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c0)) IN (((rt0.c0)OR(rt0.c0))))) ORDER BY ((((((rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c3, rt0.c1)) AND ((rt0.c2, rt0.c3))), CASE WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END, '1893300537'))>((((rt0.c2)>=(-1798440272)), (+ (rt0.c2)), IFNULL(rt0.c0, rt0.c3))))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE ('4') ORDER BY ((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3))) NOT BETWEEN ((((vt1.c0, '0.032065654398831245')) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((7.8570941E7, vt1.c0)))) AND (((rt0.c0)==(rt0.c1))));
SELECT * FROM rt0, vt1 WHERE ((('4')AND(CASE WHEN ABS(rt0.c2) THEN CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END WHEN (+ (rt0.c0)) THEN ((((rt0.c0)AND(rt0.c2)))OR(x'')) WHEN rt0.c2 COLLATE BINARY THEN rt0.c1 COLLATE RTRIM END))) ORDER BY x'' ASC  NULLS FIRST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c3)<=(rt0.c2)))==(((((rt0.c2)AND(vt1.c0)))OR(vt1.c0))))) ORDER BY x'' ASC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ('4') ORDER BY ((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3))) NOT BETWEEN ((((vt1.c0, '0.032065654398831245')) NOT BETWEEN ((rt0.c1, rt0.c0)) AND ((7.8570941E7, vt1.c0)))) AND (((rt0.c0)==(rt0.c1))));
SELECT * FROM rt0, vt1 WHERE ((('4')AND(CASE WHEN ABS(rt0.c2) THEN CASE rt0.c3  WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END WHEN (+ (rt0.c0)) THEN ((((rt0.c0)AND(rt0.c2)))OR(x'')) WHEN rt0.c2 COLLATE BINARY THEN rt0.c1 COLLATE RTRIM END))) ORDER BY x'' ASC  NULLS FIRST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c3)<=(rt0.c2)))==(((((rt0.c2)AND(vt1.c0)))OR(vt1.c0))))) ORDER BY x'' ASC  NULLS FIRST;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (CAST((NOT (rt0.c3)) AS BLOB));
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (((CAST((NOT (rt0.c3)) AS BLOB))AND(((rt0.c1)>(rt0.c1)) COLLATE RTRIM))) ORDER BY json_insert((rt0.c1 IN (rt0.c1)), COALESCE(DISTINCT rt0.c0, rt0.c0), ((rt0.c1)>>(rt0.c0)), (rt0.c2 IN (rt0.c3)), (((rt0.c2, rt0.c3))<>((rt0.c0, rt0.c3)))) DESC;
SELECT COUNT(*) FROM rt0 WHERE (rt0.c2) ORDER BY 0.3622451040290523  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (rt0.c2) ORDER BY 0.3622451040290523  NULLS FIRST;
SELECT MAX(rt0.c0) FROM vt1, rt0 WHERE ((((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c0)) IN ((((rt0.c1, NULL, rt0.c3)) NOT BETWEEN ((vt1.c0, NULL, vt1.c0)) AND ((rt0.c2, rt0.c2, rt0.c0))))));
SELECT ALL MAX(rt0.c0) FROM vt1, rt0 WHERE ((((rt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c0)) IN ((((rt0.c1, NULL, rt0.c3)) NOT BETWEEN ((vt1.c0, NULL, vt1.c0)) AND ((rt0.c2, rt0.c2, rt0.c0)))))) ORDER BY (((rt0.c2)) BETWEEN ((rt0.c3 COLLATE BINARY)) AND ((rt0.c0 COLLATE RTRIM)))  NULLS FIRST, ((((((((((((rt0.c0)OR(rt0.c1)))OR(rt0.c0)))OR(rt0.c3)))AND(rt0.c0)))AND(vt1.c0)))|(CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c1 END)), (((rt0.c0 IN ('613419071')))!=(CASE WHEN vt1.c0 THEN rt0.c0 END)) LIMIT 0x1;
SELECT COUNT(*) FROM vt1 WHERE ((('' COLLATE NOCASE)<<(vt1.c0))) ORDER BY (NULL IN (vt1.c0, vt1.c0)) COLLATE NOCASE DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((('' COLLATE NOCASE)<<(vt1.c0))) ORDER BY (NULL IN (vt1.c0, vt1.c0)) COLLATE NOCASE DESC  NULLS LAST;
SELECT MAX(rt0.c3) FROM rt0 WHERE (((((('0.08557058442453591', rt0.c2, rt0.c1))>=((rt0.c0, rt0.c2, rt0.c2))))||((rt0.c3 IN ()))));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (((((('0.08557058442453591', rt0.c2, rt0.c1))=((rt0.c0, rt0.c2, rt0.c2))))||((rt0.c3 IN ())))) ORDER BY (+ (((rt0.c2) IS FALSE))) LIMIT 0X2;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE ((((NOT (rt0.c1))) NOT BETWEEN (LOWER(rt0.c3)) AND ((rt0.c2 IN ())))) ORDER BY (+ (rt0.c3))  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE ((((((NOT (rt0.c1))) NOT BETWEEN (LOWER(rt0.c3)) AND ((rt0.c2 IN ()))))AND(((vt1.c0 COLLATE BINARY)>>(CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END))))) ORDER BY (+ (rt0.c3))  NULLS FIRST INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (CASE IFNULL(NULL, rt0.c0)  WHEN (rt0.c2 IN (rt0.c2)) THEN CAST('-578917606' AS TEXT) END) ORDER BY (+ (rt0.c3))  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((- (rt0.c1 COLLATE BINARY)));
SELECT * FROM rt0 WHERE ((- (rt0.c1 COLLATE BINARY))) INTERSECT SELECT * FROM rt0 WHERE ((((rt0.c1, ((rt0.c3)&(rt0.c1)), (((rt0.c0, rt0.c3))<=((rt0.c1, rt0.c1))), ((rt0.c1)%(rt0.c3))))>=(((((rt0.c3, 950818588))<=((rt0.c1, rt0.c2))), (((-1.484881467E9))=((rt0.c3))), rt0.c1, (((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c1)) AND ((rt0.c3, rt0.c0)))))));
SELECT ALL * FROM rt0 WHERE ((- (rt0.c1 COLLATE BINARY)));
SELECT * FROM rt0 WHERE ((- (rt0.c1 COLLATE BINARY))) INTERSECT SELECT * FROM rt0 WHERE ((((rt0.c1, ((rt0.c3)&(rt0.c1)), (((rt0.c0, rt0.c3))<=((rt0.c1, rt0.c1))), ((rt0.c1)%(rt0.c3))))>=(((((rt0.c3, 950818588))<=((rt0.c1, rt0.c2))), (((-1.484881467E9))=((rt0.c3))), rt0.c1, (((rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c1)) AND ((rt0.c3, rt0.c0)))))));
SELECT COUNT(*) FROM vt1 WHERE (((((((SQLITE_COMPILEOPTION_GET(vt1.c0))AND(TRIM(DISTINCT vt1.c0, x''))))OR(((vt1.c0) IS FALSE))))OR(0.6917254082452804))) ORDER BY vt1.c0  NULLS LAST, ((((vt1.c0) IS FALSE)) NOT BETWEEN (((vt1.c0)-(vt1.c0))) AND (vt1.c0))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 NOT INDEXED WHERE (((((((SQLITE_COMPILEOPTION_GET(vt1.c0))AND(TRIM(DISTINCT vt1.c0, x''))))OR(((vt1.c0) IS FALSE))))OR(0.6917254082452804))) ORDER BY vt1.c0  NULLS LAST, ((((vt1.c0) IS FALSE)) NOT BETWEEN (((vt1.c0)-(vt1.c0))) AND (vt1.c0))  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ((NOT (((rt0.c3)IS(rt0.c1))))) ORDER BY CAST(((((vt1.c0)AND(rt0.c1)))OR(rt0.c3)) AS REAL)  NULLS FIRST, '-0.0', (~ (vt1.c0)) COLLATE BINARY;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((NOT (((rt0.c3)IS(rt0.c1))))) ORDER BY CAST(((((vt1.c0)AND(rt0.c1)))OR(rt0.c3)) AS REAL)  NULLS FIRST, '-0.0', (~ (vt1.c0)) COLLATE BINARY;
SELECT * FROM vt1, rt0 WHERE ((NOT (((rt0.c3)IS(rt0.c1))))) ORDER BY CAST(((((vt1.c0)AND(rt0.c1)))OR(rt0.c3)) AS REAL)  NULLS FIRST, '-0.0', (~ (vt1.c0)) COLLATE BINARY;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((NOT (((rt0.c3)IS(rt0.c1))))) ORDER BY CAST(((((vt1.c0)AND(rt0.c1)))OR(rt0.c3)) AS REAL)  NULLS FIRST, '-0.0', (~ (vt1.c0)) COLLATE BINARY;
SELECT ALL MIN(vt1.c0) FROM rt0 INNER JOIN vt1 ON (((vt1.c0, CAST(rt0.c3 AS REAL), (NOT (rt0.c1))))!=((CASE rt0.c3  WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c0 END, CASE WHEN rt0.c3 THEN rt0.c3 END, rt0.c2))) WHERE (rt0.c0) ORDER BY (((rt0.c1 COLLATE RTRIM, ((((((((rt0.c2)AND(rt0.c3)))AND(rt0.c2)))OR(rt0.c0)))OR(rt0.c0)), vt1.c0, CAST(rt0.c3 AS NUMERIC)))==((((0xffffffff986deefd)&(rt0.c1)), rt0.c2, ((rt0.c1)OR(vt1.c0)), CASE vt1.c0  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN NULL WHEN NULL THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 END))) DESC;
SELECT MIN(vt1.c0) FROM rt0 INNER JOIN vt1 ON (((vt1.c0, CAST(rt0.c3 AS REAL), (NOT (rt0.c1))))<>((CASE rt0.c3  WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c0 END, CASE WHEN rt0.c3 THEN rt0.c3 END, rt0.c2))) WHERE (rt0.c0) ORDER BY CASE vt1.c0 COLLATE NOCASE  WHEN LIKELY(vt1.c0) THEN ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c3)) ELSE json(rt0.c0) END  NULLS LAST LIMIT 2;
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE ((((rt0.c0 IN (rt0.c2)))%(LENGTH(rt0.c3)))) ORDER BY '\'  NULLS LAST;
SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE ((((rt0.c0 IN (rt0.c2)))%(LENGTH(rt0.c3)))) ORDER BY ((vt1.c0)=(0.862958645873028)), '1466001721' ASC  NULLS LAST, '0' INTERSECT SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE ((NOT (((vt1.c0) NOT NULL)))) ORDER BY ((vt1.c0)=(0.862958645873028)), '1466001721' ASC  NULLS LAST, '0';
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (CAST(UNLIKELY(rt0.c1) AS NUMERIC));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (CAST(UNLIKELY(rt0.c1) AS NUMERIC));
SELECT MAX(vt1.c0) FROM vt1 WHERE (STRFTIME(((vt1.c0) ISNULL), vt1.c0 COLLATE NOCASE, (~ (vt1.c0)), ((vt1.c0)<(vt1.c0)))) ORDER BY CASE (vt1.c0 IN (vt1.c0))  WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN ((vt1.c0)<(vt1.c0)) END ASC  NULLS FIRST, (NOT (((vt1.c0) NOTNULL))) ASC, vt1.c0  NULLS LAST, 0.5967316641512062 DESC;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((STRFTIME(((vt1.c0) ISNULL), vt1.c0 COLLATE NOCASE, (~ (vt1.c0)), ((vt1.c0)<(vt1.c0))))AND((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))) COLLATE RTRIM))) ORDER BY (((((vt1.c0))<>((vt1.c0)))) NOT BETWEEN ((('-935445060') NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND ((+ (vt1.c0)))), (~ (vt1.c0)) COLLATE NOCASE DESC LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((+ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (((((vt1.c0))!=((vt1.c0)))) NOT BETWEEN ((('-935445060') NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND ((+ (vt1.c0)))), (~ (vt1.c0)) COLLATE NOCASE DESC LIMIT 0;
SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE ((((rt0.c2 COLLATE RTRIM, (~ (vt1.c0))))>=((CAST(vt1.c0 AS INTEGER), ((rt0.c2)<=(vt1.c0)))))) ORDER BY ((((rt0.c0)-(vt1.c0)))GLOB(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)))) DESC;
SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE ((((((rt0.c2 COLLATE RTRIM, (~ (vt1.c0))))>((CAST(vt1.c0 AS INTEGER), ((rt0.c2)<=(vt1.c0))))))AND(LAST_INSERT_ROWID()))) ORDER BY (NOT (CASE rt0.c2  WHEN rt0.c1 THEN -1858841307 WHEN rt0.c2 THEN vt1.c0 END)) LIMIT 0x0 INTERSECT SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c1 ELSE -475699350 END) ISNULL)) ORDER BY (NOT (CASE rt0.c2  WHEN rt0.c1 THEN -1858841307 WHEN rt0.c2 THEN vt1.c0 END)) LIMIT 0x0;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON (((NOT (vt1.c0)))!=(0.0638652059643009)) WHERE (((((vt1.c0) IS FALSE))*(((rt0.c2)%(rt0.c2)))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON (((NOT (vt1.c0)))<>(0.0638652059643009)) WHERE (((((((vt1.c0) IS FALSE))*(((rt0.c2)%(rt0.c2)))))AND(((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2))) BETWEEN (((rt0.c3)IS NOT(rt0.c2))) AND (rt0.c0))))) INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON (((NOT (vt1.c0)))<>(0.0638652059643009)) WHERE (((((('1479822892', rt0.c0, rt0.c1)) BETWEEN ((rt0.c2, rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c3, vt1.c0))))LIKE(((rt0.c0)*(rt0.c1)))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON (((NOT (vt1.c0)))!=(0.0638652059643009)) WHERE (((((vt1.c0) IS FALSE))*(((rt0.c2)%(rt0.c2)))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON (((NOT (vt1.c0)))<>(0.0638652059643009)) WHERE (((((((vt1.c0) IS FALSE))*(((rt0.c2)%(rt0.c2)))))AND(((((((rt0.c0)OR(rt0.c3)))OR(rt0.c2))) BETWEEN (((rt0.c3)IS NOT(rt0.c2))) AND (rt0.c0))))) INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON (((NOT (vt1.c0)))<>(0.0638652059643009)) WHERE (((((('1479822892', rt0.c0, rt0.c1)) BETWEEN ((rt0.c2, rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c3, vt1.c0))))LIKE(((rt0.c0)*(rt0.c1)))));
SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c0)<=(vt1.c0)) AS INTEGER)) ORDER BY (NOT ((+ (vt1.c0))))  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((CAST(((vt1.c0)=(vt1.c0)) AS INTEGER))AND(((((vt1.c0)AND(1250600038)))OR((NOT (vt1.c0))))))) ORDER BY TYPEOF(((vt1.c0) NOTNULL))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE ((('0.466917341151566') BETWEEN (UPPER(vt1.c0)) AND (vt1.c0))) ORDER BY TYPEOF(((vt1.c0) NOTNULL))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c0)<=(vt1.c0)) AS INTEGER)) ORDER BY (NOT ((+ (vt1.c0))))  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((CAST(((vt1.c0)=(vt1.c0)) AS INTEGER))AND(((((vt1.c0)AND(1250600038)))OR((NOT (vt1.c0))))))) ORDER BY TYPEOF(((vt1.c0) NOTNULL))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE ((('0.466917341151566') BETWEEN (UPPER(vt1.c0)) AND (vt1.c0))) ORDER BY TYPEOF(((vt1.c0) NOTNULL))  NULLS FIRST;
SELECT COUNT(*) FROM rt0 WHERE ((- (((rt0.c0)OR(rt0.c2)))));
SELECT ALL COUNT(*) FROM rt0 WHERE ((((- (((rt0.c0)OR(rt0.c2)))))AND(rt0.c0))) LIMIT 0X2 INTERSECT SELECT COUNT(*) FROM rt0 WHERE (IFNULL(DISTINCT (((rt0.c3, rt0.c0)) BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c2, rt0.c3))), rt0.c0)) LIMIT 0x2;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((CAST(rt0.c3 AS INTEGER)) BETWEEN (rt0.c2) AND (((rt0.c1) NOTNULL))) WHERE ((((~ (vt1.c0))) NOT BETWEEN (((rt0.c1) IS FALSE)) AND ('\䨓kC')));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((CAST(rt0.c3 AS INTEGER)) BETWEEN (rt0.c2) AND (((rt0.c1) NOTNULL))) WHERE ((((((~ (vt1.c0))) NOT BETWEEN (((rt0.c1) IS FALSE)) AND ('\䨓kC')))AND(((0.13945591243245914)||(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END)))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((CAST(rt0.c3 AS INTEGER)) BETWEEN (rt0.c2) AND (((rt0.c1) NOTNULL))) WHERE ((((~ (vt1.c0))) NOT BETWEEN (((rt0.c1) IS FALSE)) AND ('\䨓kC')));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((CAST(rt0.c3 AS INTEGER)) BETWEEN (rt0.c2) AND (((rt0.c1) NOTNULL))) WHERE ((((((~ (vt1.c0))) NOT BETWEEN (((rt0.c1) IS FALSE)) AND ('\䨓kC')))AND(((0.13945591243245914)||(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END)))));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)=(vt1.c0)), ((vt1.c0) IS TRUE), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))))>=((vt1.c0, (vt1.c0 IN ()), ((vt1.c0)<>(vt1.c0))))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((((((vt1.c0)==(vt1.c0)), ((vt1.c0) IS TRUE), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))))>=((vt1.c0, (vt1.c0 IN ()), ((vt1.c0)>(vt1.c0))))))AND((- ((vt1.c0 IN ())))))) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0) ISNULL)) BETWEEN ((+ ('m'))) AND (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))));
SELECT ALL COUNT(*) FROM rt0 NOT INDEXED LEFT OUTER JOIN vt1 ON (((rt0.c0)|(rt0.c2)) IN (((rt0.c3) IS TRUE), CAST(rt0.c1 AS REAL), (((rt0.c3))>=((vt1.c0))))) WHERE (vt1.c0);
SELECT COUNT(*) FROM rt0 LEFT OUTER JOIN vt1 ON (((rt0.c0)|(rt0.c2)) IN (((rt0.c3) IS TRUE), CAST(rt0.c1 AS REAL), (((rt0.c3))>=((vt1.c0))))) WHERE (((vt1.c0)AND(((((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c1)))IS(rt0.c2))))) ORDER BY ((((((((((rt0.c3)OR(vt1.c0)))AND(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)))||(((vt1.c0)+(rt0.c3)))) ASC  NULLS FIRST, ((CAST('''ݷGP>ej+' AS REAL)) ISNULL)  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(((((((vt1.c0)/(vt1.c0)))AND((((vt1.c0, vt1.c0))==((vt1.c0, vt1.c0))))))OR(((vt1.c0) IS FALSE)))))) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(((((((vt1.c0)/(vt1.c0)))AND((((vt1.c0, vt1.c0))==((vt1.c0, vt1.c0))))))OR(((vt1.c0) IS FALSE)))))) LIMIT 0;
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE ((((rt0.c0 IN (rt0.c2, rt0.c2)))*(CAST(rt0.c1 AS NUMERIC)))) ORDER BY ((((CASE rt0.c1  WHEN rt0.c2 THEN x'' END)OR((- (rt0.c0)))))OR(((((rt0.c0)AND(rt0.c3)))AND(rt0.c2))));
SELECT ALL MAX(rt0.c2) FROM rt0 WHERE ((((rt0.c0 IN (rt0.c2)))*(CAST(rt0.c1 AS NUMERIC)))) ORDER BY ((((CASE rt0.c1  WHEN rt0.c2 THEN x'' END)OR((- (rt0.c0)))))OR(((((rt0.c0)AND(rt0.c3)))AND(rt0.c2)))) LIMIT 2;
SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON rt0.c2 WHERE ((((((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)))AND(rt0.c1)) IN ())) ORDER BY GLOB(NULL, ((vt1.c0) IS TRUE)) DESC, ((((rt0.c2)%(rt0.c2)))+(((((rt0.c2)AND(rt0.c2)))AND(rt0.c2))))  NULLS LAST;
SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON rt0.c2 WHERE ((((((((((((rt0.c2)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)))AND(rt0.c1)) IN ()))AND((('1082644571') BETWEEN (((((((rt0.c0)OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c3))) AND (rt0.c2))))) ORDER BY (+ (CASE WHEN vt1.c0 THEN rt0.c0 END))  NULLS LAST LIMIT 0X2;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))) ORDER BY vt1.c0  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), ((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), (((vt1.c0))<>((vt1.c0)))))!=(((('')-(vt1.c0)), ((vt1.c0)IS(vt1.c0)), json_quote(vt1.c0))))))) ORDER BY (((((((((~ (vt1.c0)))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(vt1.c0 COLLATE BINARY)))AND(vt1.c0)))OR(((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))), CASE (+ (vt1.c0))  WHEN CAST(vt1.c0 AS INTEGER) THEN (((vt1.c0, vt1.c0)) BETWEEN (('830243475', vt1.c0)) AND ((vt1.c0, vt1.c0))) WHEN x'471f' THEN ((vt1.c0)||(vt1.c0)) WHEN (((vt1.c0))>((vt1.c0))) THEN 0.26115486816886 END DESC, vt1.c0 ASC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN ())) ORDER BY (((((((((~ (vt1.c0)))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(vt1.c0 COLLATE BINARY)))AND(vt1.c0)))OR(((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))), CASE (+ (vt1.c0))  WHEN CAST(vt1.c0 AS INTEGER) THEN (((vt1.c0, vt1.c0)) BETWEEN (('830243475', vt1.c0)) AND ((vt1.c0, vt1.c0))) WHEN x'471f' THEN ((vt1.c0)||(vt1.c0)) WHEN (((vt1.c0))>((vt1.c0))) THEN 0.26115486816886 END DESC, vt1.c0 ASC  NULLS LAST;
SELECT * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c0)==(rt0.c2))  WHEN (((rt0.c1, rt0.c0))=((rt0.c3, rt0.c2))) THEN ((rt0.c3) IS FALSE) WHEN CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c0 END THEN rt0.c1 END WHERE (CASE ((rt0.c1)%(rt0.c2))  WHEN (((rt0.c0, rt0.c2, rt0.c0))==((rt0.c2, 'ﰎ', rt0.c0))) THEN CASE WHEN x'' THEN rt0.c0 END ELSE vt1.c0 END) ORDER BY 1.339938603E9 COLLATE NOCASE, rt0.c3 ASC  NULLS FIRST;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c0)==(rt0.c2))  WHEN (((rt0.c1, rt0.c0))=((rt0.c3, rt0.c2))) THEN ((rt0.c3) IS FALSE) WHEN CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c0 END THEN rt0.c1 END WHERE (((CASE ((rt0.c1)%(rt0.c2))  WHEN (((rt0.c0, rt0.c2, rt0.c0))==((rt0.c2, 'ﰎ', rt0.c0))) THEN CASE WHEN x'' THEN rt0.c0 END ELSE vt1.c0 END)AND((((NOT ('829256788')))IS NOT(NULL COLLATE NOCASE))))) ORDER BY (((((rt0.c3, rt0.c1, vt1.c0)) BETWEEN ((rt0.c0, rt0.c3, -1481619259)) AND ((vt1.c0, rt0.c1, rt0.c0))))/(((rt0.c1)AND(vt1.c0)))) DESC  NULLS LAST, ((CASE WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c1 END) NOT BETWEEN (((((((vt1.c0)AND(NULL)))OR(rt0.c3)))AND(vt1.c0))) AND (rt0.c1)) DESC LIMIT 4;
SELECT * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c0)==(rt0.c2))  WHEN (((rt0.c1, rt0.c0))=((rt0.c3, rt0.c2))) THEN ((rt0.c3) IS FALSE) WHEN CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c0 END THEN rt0.c1 END WHERE (CASE ((rt0.c1)%(rt0.c2))  WHEN (((rt0.c0, rt0.c2, rt0.c0))==((rt0.c2, 'ﰎ', rt0.c0))) THEN CASE WHEN x'' THEN rt0.c0 END ELSE vt1.c0 END) ORDER BY 1.339938603E9 COLLATE NOCASE, rt0.c3 ASC  NULLS FIRST;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON CASE ((rt0.c0)==(rt0.c2))  WHEN (((rt0.c1, rt0.c0))=((rt0.c3, rt0.c2))) THEN ((rt0.c3) IS FALSE) WHEN CASE WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c0 END THEN rt0.c1 END WHERE (((CASE ((rt0.c1)%(rt0.c2))  WHEN (((rt0.c0, rt0.c2, rt0.c0))==((rt0.c2, 'ﰎ', rt0.c0))) THEN CASE WHEN x'' THEN rt0.c0 END ELSE vt1.c0 END)AND((((NOT ('829256788')))IS NOT(NULL COLLATE NOCASE))))) ORDER BY (((((rt0.c3, rt0.c1, vt1.c0)) BETWEEN ((rt0.c0, rt0.c3, -1481619259)) AND ((vt1.c0, rt0.c1, rt0.c0))))/(((rt0.c1)AND(vt1.c0)))) DESC  NULLS LAST, ((CASE WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c1 END) NOT BETWEEN (((((((vt1.c0)AND(NULL)))OR(rt0.c3)))AND(vt1.c0))) AND (rt0.c1)) DESC LIMIT 4;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)!=(vt1.c0)), (vt1.c0 IN (vt1.c0, vt1.c0))))>(((NOT (vt1.c0)), ((vt1.c0) NOTNULL))))) ORDER BY ((((vt1.c0) IS FALSE))<<(vt1.c0 COLLATE BINARY)) ASC, ((vt1.c0 COLLATE BINARY) NOT BETWEEN (((vt1.c0)>(vt1.c0))) AND (((vt1.c0) IS TRUE)));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)<>(vt1.c0)), (vt1.c0 IN (vt1.c0, vt1.c0))))>(((NOT (vt1.c0)), ((vt1.c0) NOTNULL))))) ORDER BY ((0.7953152466362241) NOT NULL) COLLATE NOCASE ASC, CASE vt1.c0 COLLATE RTRIM  WHEN CAST(NULL AS NUMERIC) THEN ((vt1.c0) NOTNULL) ELSE ((vt1.c0) IS TRUE) END  NULLS LAST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2)<>(rt0.c2)))+(rt0.c2))) ORDER BY (((rt0.c0, rt0.c1)) NOT BETWEEN ((rt0.c1 COLLATE BINARY, (- (rt0.c2)))) AND (((- (vt1.c0)), ((vt1.c0) BETWEEN (1789285843) AND (rt0.c1))))) ASC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c2)>(rt0.c2)))+(rt0.c2))) ORDER BY (((rt0.c3 IN (rt0.c2))) NOT BETWEEN (CASE WHEN rt0.c1 THEN rt0.c1 WHEN '琽' THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 END) AND (rt0.c0)) ASC  NULLS LAST, ('' IN (((vt1.c0)|(rt0.c2)))) ASC  NULLS LAST, LIKE(((((((rt0.c2)OR(x'fe8c6b')))OR(NULL)))OR(1498382081)), NULL COLLATE BINARY, 's') LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2)<>(rt0.c2)))+(rt0.c2))) ORDER BY (((rt0.c0, rt0.c1)) NOT BETWEEN ((rt0.c1 COLLATE BINARY, (- (rt0.c2)))) AND (((- (vt1.c0)), ((vt1.c0) BETWEEN (1789285843) AND (rt0.c1))))) ASC  NULLS LAST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c2)>(rt0.c2)))+(rt0.c2))) ORDER BY (((rt0.c3 IN (rt0.c2))) NOT BETWEEN (CASE WHEN rt0.c1 THEN rt0.c1 WHEN '琽' THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 END) AND (rt0.c0)) ASC  NULLS LAST, ('' IN (((vt1.c0)|(rt0.c2)))) ASC  NULLS LAST, LIKE(((((((rt0.c2)OR(x'fe8c6b')))OR(NULL)))OR(1498382081)), NULL COLLATE BINARY, 's') LIMIT 0;
SELECT MAX(rt0.c0) FROM vt1 NATURAL JOIN rt0 WHERE (((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c1))) BETWEEN (((rt0.c1)AND(rt0.c3))) AND (((rt0.c3) BETWEEN ('1976026504') AND (rt0.c3))))) ORDER BY (((((rt0.c2, rt0.c2))<((rt0.c0, rt0.c1))))IS NOT((- (vt1.c0)))) ASC, ((0.7241807467882587)>((0.2638208023860005 IN (rt0.c0, rt0.c2, rt0.c2))));
SELECT MAX(rt0.c0) FROM vt1 NATURAL JOIN rt0 WHERE (((((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c1))) BETWEEN (((rt0.c1)AND(rt0.c3))) AND (((rt0.c3) BETWEEN ('1976026504') AND (rt0.c3)))))AND(CAST(rt0.c2 AS INTEGER)))) ORDER BY (((((rt0.c2, rt0.c2))<((rt0.c0, rt0.c1))))IS NOT((- (vt1.c0)))) ASC, ((0.7241807467882587)>((0.2638208023860005 IN (rt0.c0, rt0.c2, rt0.c2)))) INTERSECT SELECT ALL MAX(rt0.c0) FROM vt1 NATURAL JOIN rt0 WHERE (UPPER(DISTINCT (((vt1.c0))<>((rt0.c3))))) ORDER BY (((((rt0.c2, rt0.c2))<((rt0.c0, rt0.c1))))IS NOT((- (vt1.c0)))) ASC, ((0.7241807467882587)>((0.2638208023860005 IN (rt0.c0, rt0.c2, rt0.c2))));
SELECT * FROM rt0 WHERE ((rt0.c0 COLLATE NOCASE IN (('' IN ()))));
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c0 COLLATE NOCASE IN (('' IN ()))))AND(rt0.c3))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (x'01b7') LIMIT 0;
SELECT * FROM rt0 WHERE ((rt0.c0 COLLATE NOCASE IN (('' IN ()))));
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c0 COLLATE NOCASE IN (('' IN ()))))AND(rt0.c3))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (x'01b7') LIMIT 0;
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE ((+ (((vt1.c0) ISNULL)))) ORDER BY STRFTIME(rt0.c3, NULL, rt0.c2 COLLATE RTRIM, ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c1))) ASC  NULLS LAST, CASE WHEN ((rt0.c2)GLOB(rt0.c2)) THEN (rt0.c2 IN ()) WHEN (- (rt0.c1)) THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c1)) ELSE CAST(rt0.c2 AS REAL) END DESC  NULLS FIRST, (('9')<(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c1)))) DESC  NULLS LAST;
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE ((+ (((vt1.c0) ISNULL)))) ORDER BY ((vt1.c0)GLOB(NULL)) COLLATE RTRIM DESC  NULLS LAST, rt0.c2 ASC  NULLS LAST LIMIT 3 INTERSECT SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE (((- (rt0.c2)) IN ())) ORDER BY ((vt1.c0)GLOB(NULL)) COLLATE RTRIM DESC  NULLS LAST, rt0.c2 ASC  NULLS LAST LIMIT 0x3;
SELECT ALL * FROM rt0, vt1 WHERE ((((((+ (rt0.c3)))OR((- (rt0.c3)))))AND(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((+ (rt0.c3)))OR((- (rt0.c3)))))AND(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1))))) ORDER BY CASE (~ (rt0.c2))  WHEN CASE rt0.c2  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN 0X28ff8595 END THEN (((rt0.c0))==((rt0.c1))) ELSE (NOT (rt0.c2)) END  NULLS FIRST LIMIT 0X3;
SELECT ALL * FROM rt0, vt1 WHERE ((((((+ (rt0.c3)))OR((- (rt0.c3)))))AND(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((+ (rt0.c3)))OR((- (rt0.c3)))))AND(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1))))) ORDER BY CASE (~ (rt0.c2))  WHEN CASE rt0.c2  WHEN vt1.c0 THEN rt0.c1 WHEN rt0.c2 THEN 0X28ff8595 END THEN (((rt0.c0))==((rt0.c1))) ELSE (NOT (rt0.c2)) END  NULLS FIRST LIMIT 0X3;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))AND(x'dfa87b9d')))OR((((vt1.c0, vt1.c0, vt1.c0))!=((x'32a0', vt1.c0, vt1.c0))))))OR(((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))OR(((vt1.c0) ISNULL))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((((((((vt1.c0)OR(vt1.c0)))AND(x'dfa87b9d')))OR((((vt1.c0, vt1.c0, vt1.c0))!=((x'32a0', vt1.c0, vt1.c0))))))OR(((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))OR(((vt1.c0) ISNULL))))AND(vt1.c0))) LIMIT 0 INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((IFNULL(DISTINCT vt1.c0, vt1.c0))LIKE(((vt1.c0)OR('8HๅL02s'))))) LIMIT 0x0;
SELECT * FROM vt1 WHERE ('uc,Yc');
SELECT DISTINCT * FROM vt1 WHERE ((('uc,Yc')AND(CASE WHEN 0.03169181043549252 THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END END))) ORDER BY ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(x'')))*((- (vt1.c0)))), IFNULL(DISTINCT 0.3531244018750904, CAST(vt1.c0 AS NUMERIC)) DESC;
SELECT * FROM vt1 WHERE ('uc,Yc');
SELECT DISTINCT * FROM vt1 WHERE ((('uc,Yc')AND(CASE WHEN 0.03169181043549252 THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END END))) ORDER BY ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(x'')))*((- (vt1.c0)))), IFNULL(DISTINCT 0.3531244018750904, CAST(vt1.c0 AS NUMERIC)) DESC;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c1)-(rt0.c2))) NOT NULL));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c1)-(rt0.c2))) NOT NULL))AND(CASE vt1.c0  WHEN rt0.c1 THEN rt0.c1 END COLLATE BINARY))) ORDER BY (~ (vt1.c0)) COLLATE NOCASE DESC LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c1)-(rt0.c2))) NOT NULL));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((((rt0.c1)-(rt0.c2))) NOT NULL))AND(CASE vt1.c0  WHEN rt0.c1 THEN rt0.c1 END COLLATE BINARY))) ORDER BY (~ (vt1.c0)) COLLATE NOCASE DESC LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (TRIM(rt0.c2, rt0.c3) COLLATE BINARY);
SELECT * FROM vt1, rt0 WHERE (TRIM(rt0.c2, rt0.c3) COLLATE BINARY) ORDER BY ((((((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2)))OR(0.7560115003725694)))AND(((rt0.c3)>('tc(TuN1}')))))OR(vt1.c0 COLLATE NOCASE)) ASC  NULLS FIRST, CAST(((((((rt0.c2)OR(rt0.c0)))AND(rt0.c1)))OR(vt1.c0)) AS REAL) ASC, CAST((+ (rt0.c3)) AS NUMERIC), CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END THEN ((vt1.c0)LIKE(rt0.c0)) WHEN '+t誣' THEN ((rt0.c1)IS(rt0.c2)) ELSE ((rt0.c3)-(rt0.c0)) END LIMIT 0x0 INTERSECT SELECT * FROM vt1, rt0 WHERE (rt0.c2) ORDER BY ((((((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2)))OR(0.7560115003725694)))AND(((rt0.c3)>('tc(TuN1}')))))OR(vt1.c0 COLLATE NOCASE)) ASC  NULLS FIRST, CAST(((((((rt0.c2)OR(rt0.c0)))AND(rt0.c1)))OR(vt1.c0)) AS REAL) ASC, CAST((+ (rt0.c3)) AS NUMERIC), CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END THEN ((vt1.c0)LIKE(rt0.c0)) WHEN '+t誣' THEN ((rt0.c1)IS(rt0.c2)) ELSE ((rt0.c3)-(rt0.c0)) END LIMIT 0x0;
SELECT * FROM vt1, rt0 WHERE (TRIM(rt0.c2, rt0.c3) COLLATE BINARY);
SELECT * FROM vt1, rt0 WHERE (TRIM(rt0.c2, rt0.c3) COLLATE BINARY) ORDER BY ((((((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2)))OR(0.7560115003725694)))AND(((rt0.c3)>('tc(TuN1}')))))OR(vt1.c0 COLLATE NOCASE)) ASC  NULLS FIRST, CAST(((((((rt0.c2)OR(rt0.c0)))AND(rt0.c1)))OR(vt1.c0)) AS REAL) ASC, CAST((+ (rt0.c3)) AS NUMERIC), CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END THEN ((vt1.c0)LIKE(rt0.c0)) WHEN '+t誣' THEN ((rt0.c1)IS(rt0.c2)) ELSE ((rt0.c3)-(rt0.c0)) END LIMIT 0x0 INTERSECT SELECT * FROM vt1, rt0 WHERE (rt0.c2) ORDER BY ((((((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2)))OR(0.7560115003725694)))AND(((rt0.c3)>('tc(TuN1}')))))OR(vt1.c0 COLLATE NOCASE)) ASC  NULLS FIRST, CAST(((((((rt0.c2)OR(rt0.c0)))AND(rt0.c1)))OR(vt1.c0)) AS REAL) ASC, CAST((+ (rt0.c3)) AS NUMERIC), CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END THEN ((vt1.c0)LIKE(rt0.c0)) WHEN '+t誣' THEN ((rt0.c1)IS(rt0.c2)) ELSE ((rt0.c3)-(rt0.c0)) END LIMIT 0x0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (0.7302616003053197);
SELECT MAX(vt1.c0) FROM vt1 WHERE (((0.7302616003053197)AND((LOWER(DISTINCT vt1.c0) IN (CAST(vt1.c0 AS NUMERIC)))))) ORDER BY (((vt1.c0))=((((vt1.c0)%(vt1.c0))))) LIMIT 0x1 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY (((vt1.c0))=((((vt1.c0)%(vt1.c0))))) LIMIT 1;
SELECT * FROM rt0, vt1 WHERE ((~ (((1449780259)<<(rt0.c2))))) ORDER BY (((((rt0.c3, vt1.c0))<=((rt0.c1, rt0.c1))))%(ROUND(rt0.c3, vt1.c0))) DESC;
SELECT ALL * FROM rt0, vt1 WHERE ((~ (((0X5669e423)<<(rt0.c2))))) ORDER BY ((((((((((rt0.c1)OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c0)))OR(rt0.c3))) BETWEEN ((vt1.c0 IN (rt0.c3))) AND (NULLIF(rt0.c2, rt0.c3))) DESC  NULLS FIRST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((~ (((1449780259)<<(rt0.c2))))) ORDER BY (((((rt0.c3, vt1.c0))<=((rt0.c1, rt0.c1))))%(ROUND(rt0.c3, vt1.c0))) DESC;
SELECT ALL * FROM rt0, vt1 WHERE ((~ (((0X5669e423)<<(rt0.c2))))) ORDER BY ((((((((((rt0.c1)OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c0)))OR(rt0.c3))) BETWEEN ((vt1.c0 IN (rt0.c3))) AND (NULLIF(rt0.c2, rt0.c3))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c3) AND (0.3294270326024502))) IS FALSE));
SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c3) AND (0.3294270326024502))) IS FALSE)) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (load_extension((rt0.c2 IN (rt0.c2)), CAST(rt0.c0 AS NUMERIC))) LIMIT 0X2;
SELECT ALL * FROM rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c3) AND (0.3294270326024502))) IS FALSE));
SELECT DISTINCT * FROM rt0 WHERE (((((rt0.c3) NOT BETWEEN (rt0.c3) AND (0.3294270326024502))) IS FALSE)) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (load_extension((rt0.c2 IN (rt0.c2)), CAST(rt0.c0 AS NUMERIC))) LIMIT 0X2;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CASE vt1.c0  WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE BINARY);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE vt1.c0  WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE BINARY) ORDER BY vt1.c0, RTRIM(((vt1.c0)%(vt1.c0))) DESC  NULLS FIRST, ((((((CAST(vt1.c0 AS INTEGER))OR(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(-3.79422826E8)))AND(vt1.c0 COLLATE RTRIM)) DESC LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((((json_array(vt1.c0, vt1.c0, vt1.c0, vt1.c0))AND((((vt1.c0, x'12'))>((vt1.c0, vt1.c0))))))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (0.19018201376772814)))))AND(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(x''))))) ORDER BY vt1.c0, RTRIM(((vt1.c0)%(vt1.c0))) DESC  NULLS FIRST, ((((((CAST(vt1.c0 AS INTEGER))OR(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(-3.79422826E8)))AND(vt1.c0 COLLATE RTRIM)) DESC LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON CASE WHEN ((rt0.c0)-(rt0.c2)) THEN (- (rt0.c3)) ELSE SQLITE_COMPILEOPTION_GET(rt0.c1) END WHERE (CAST((rt0.c2 IN (vt1.c0)) AS REAL));
SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN rt0 ON CASE WHEN ((rt0.c0)-(rt0.c2)) THEN (- (rt0.c3)) ELSE SQLITE_COMPILEOPTION_GET(rt0.c1) END WHERE (CAST((rt0.c2 IN (vt1.c0)) AS REAL)) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN rt0 ON CASE WHEN ((rt0.c0)-(rt0.c2)) THEN (- (rt0.c3)) ELSE SQLITE_COMPILEOPTION_GET(rt0.c1) END WHERE (json_valid(((rt0.c3)/(rt0.c1)))) LIMIT 0X2;
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE (rt0.c0);
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (rt0.c0) ORDER BY (((rt0.c3)) BETWEEN ((rt0.c1)) AND ((rt0.c0))) COLLATE BINARY ASC  NULLS FIRST, (~ (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)))) DESC  NULLS FIRST, rt0.c2 LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE (((rt0.c2 COLLATE RTRIM) NOT BETWEEN (((rt0.c2) IS FALSE)) AND ((- (vt1.c0)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c2 COLLATE RTRIM) NOT BETWEEN (((rt0.c2) IS FALSE)) AND ((- (vt1.c0)))))AND(CAST(((rt0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS INTEGER)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (JULIANDAY((((rt0.c0, vt1.c0, rt0.c2)) BETWEEN ((rt0.c1, 0.3347139097428101, rt0.c0)) AND ((rt0.c0, rt0.c3, 1.422900229E9))), ((((rt0.c2)OR(vt1.c0)))AND(rt0.c1)), (NOT (vt1.c0)), (('-1825537531')<=(rt0.c2))));
SELECT * FROM rt0, vt1 WHERE (((rt0.c2 COLLATE RTRIM) NOT BETWEEN (((rt0.c2) IS FALSE)) AND ((- (vt1.c0)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c2 COLLATE RTRIM) NOT BETWEEN (((rt0.c2) IS FALSE)) AND ((- (vt1.c0)))))AND(CAST(((rt0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS INTEGER)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (JULIANDAY((((rt0.c0, vt1.c0, rt0.c2)) BETWEEN ((rt0.c1, 0.3347139097428101, rt0.c0)) AND ((rt0.c0, rt0.c3, 1.422900229E9))), ((((rt0.c2)OR(vt1.c0)))AND(rt0.c1)), (NOT (vt1.c0)), (('-1825537531')<=(rt0.c2))));
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (CAST((((rt0.c3, rt0.c3))<=((vt1.c0, rt0.c1))) AS INTEGER)) ORDER BY ((vt1.c0 COLLATE NOCASE)<<(vt1.c0)) DESC  NULLS FIRST;
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (CAST((((rt0.c3, rt0.c3))==((vt1.c0, rt0.c1))) AS INTEGER)) ORDER BY ((vt1.c0 COLLATE NOCASE)<<(vt1.c0)) DESC  NULLS FIRST LIMIT 3 INTERSECT SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (((((((0.9557926762762583)AND(vt1.c0)))AND(rt0.c0)))GLOB(CAST(rt0.c3 AS INTEGER)))) ORDER BY ((vt1.c0 COLLATE NOCASE)<<(vt1.c0)) DESC  NULLS FIRST LIMIT 3;
SELECT ALL * FROM rt0 WHERE (((((((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE '856637085' END)OR(((((rt0.c1)OR(rt0.c1)))OR(rt0.c2)))))AND(rt0.c0)))AND(json_remove(rt0.c0, rt0.c3, rt0.c2, rt0.c2, rt0.c3)))) ORDER BY (+ ('Q')) ASC, (NOT (LIKELIHOOD(rt0.c3, rt0.c1)))  NULLS LAST;
SELECT * FROM rt0 WHERE (((((((((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE '856637085' END)OR(((((rt0.c1)OR(rt0.c1)))OR(rt0.c2)))))AND(rt0.c0)))AND(json_remove(rt0.c0, rt0.c3, rt0.c2, rt0.c2, rt0.c3))))AND((+ ((((rt0.c2, rt0.c1, rt0.c2, rt0.c3, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c2, rt0.c3, rt0.c1, rt0.c3)) AND ((rt0.c2, rt0.c2, rt0.c1, rt0.c2, rt0.c3)))))))) ORDER BY ((((((((CAST(rt0.c0 AS BLOB))OR((((rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c3)) AND ((x'', rt0.c2))))))AND((~ (rt0.c0)))))AND(rt0.c1)))OR(rt0.c0 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((((((CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE '856637085' END)OR(((((rt0.c1)OR(rt0.c1)))OR(rt0.c2)))))AND(rt0.c0)))AND(json_remove(rt0.c0, rt0.c3, rt0.c2, rt0.c2, rt0.c3)))) ORDER BY (+ ('Q')) ASC, (NOT (LIKELIHOOD(rt0.c3, rt0.c1)))  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (CASE ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN CAST(vt1.c0 AS INTEGER) END) ORDER BY CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN ((0xfffffffff8155fdc)<(vt1.c0)) WHEN (+ (vt1.c0)) THEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) END, (((vt1.c0))<=((vt1.c0))) COLLATE RTRIM ASC  NULLS LAST, (NOT ((vt1.c0 IN ()))) ASC;
SELECT ALL * FROM vt1 WHERE (((CASE ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN CAST(vt1.c0 AS INTEGER) END)AND(vt1.c0))) ORDER BY ((x'')+(vt1.c0))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS REAL))=(((vt1.c0)!=(vt1.c0))))) ORDER BY ((x'')+(vt1.c0))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (CASE ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN CAST(vt1.c0 AS INTEGER) END) ORDER BY CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN ((0xfffffffff8155fdc)<(vt1.c0)) WHEN (+ (vt1.c0)) THEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) END, (((vt1.c0))<=((vt1.c0))) COLLATE RTRIM ASC  NULLS LAST, (NOT ((vt1.c0 IN ()))) ASC;
SELECT ALL * FROM vt1 WHERE (((CASE ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN CAST(vt1.c0 AS INTEGER) END)AND(vt1.c0))) ORDER BY ((x'')+(vt1.c0))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS REAL))=(((vt1.c0)!=(vt1.c0))))) ORDER BY ((x'')+(vt1.c0))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (1504116959) ORDER BY (((vt1.c0)) BETWEEN (((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))) AND ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))  NULLS FIRST;
SELECT * FROM vt1 WHERE (((0X59a700df)AND(((((NULL) ISNULL)) BETWEEN (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))) AND (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))))) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN '0.8458136832775563' WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0, vt1.c0, 0X1cc966ef, x'bb'))>((vt1.c0, vt1.c0, vt1.c0, vt1.c0))) WHEN ((vt1.c0)<=(vt1.c0)) THEN (vt1.c0 IN (vt1.c0)) END  NULLS LAST, ((NULL) BETWEEN (((vt1.c0)<=(vt1.c0))) AND (0.7299341966475966)) ASC;
SELECT ALL * FROM vt1 WHERE (1504116959) ORDER BY (((vt1.c0)) BETWEEN (((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0)))) AND ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))  NULLS FIRST;
SELECT * FROM vt1 WHERE (((0X59a700df)AND(((((NULL) ISNULL)) BETWEEN (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))) AND (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))))) ORDER BY CASE WHEN (vt1.c0 IN (vt1.c0)) THEN '0.8458136832775563' WHEN (((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0, vt1.c0, 0X1cc966ef, x'bb'))>((vt1.c0, vt1.c0, vt1.c0, vt1.c0))) WHEN ((vt1.c0)<=(vt1.c0)) THEN (vt1.c0 IN (vt1.c0)) END  NULLS LAST, ((NULL) BETWEEN (((vt1.c0)<=(vt1.c0))) AND (0.7299341966475966)) ASC;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(x'' COLLATE RTRIM AS NUMERIC));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CAST(x'' COLLATE RTRIM AS NUMERIC)) ORDER BY ((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(-2072578097)))<=((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0))))) ASC  NULLS LAST, vt1.c0 ASC  NULLS FIRST LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE (((('464024925' IN (rt0.c3))) ISNULL)) ORDER BY ((((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)))||(CAST(rt0.c0 AS NUMERIC)));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((('464024925' IN (rt0.c3))) ISNULL)) ORDER BY rt0.c2;
SELECT * FROM rt0, vt1 WHERE (((('464024925' IN (rt0.c3))) ISNULL)) ORDER BY ((((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)))||(CAST(rt0.c0 AS NUMERIC)));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((('464024925' IN (rt0.c3))) ISNULL)) ORDER BY rt0.c2;
SELECT MAX(vt1.c0) FROM vt1, rt0 WHERE (CAST(rt0.c2 AS INTEGER) COLLATE NOCASE) ORDER BY rt0.c2 DESC  NULLS LAST, ((CASE rt0.c1  WHEN rt0.c3 THEN '-68106308' END) NOT BETWEEN (((rt0.c2)-(rt0.c2))) AND (rt0.c2));
SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE (CAST(rt0.c2 AS INTEGER) COLLATE NOCASE) ORDER BY '' ASC, (((((rt0.c1)) BETWEEN ((vt1.c0)) AND ((rt0.c1)))) NOTNULL) DESC  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE ((((rt0.c3, rt0.c2, rt0.c0, rt0.c3)) BETWEEN (((('20053134')<(rt0.c0)), ((rt0.c2) IS TRUE), CAST(rt0.c3 AS REAL), ((rt0.c3)IS NOT(vt1.c0)))) AND ((rt0.c2 COLLATE BINARY, (- (rt0.c1)), (rt0.c2 IN ()), ABS(rt0.c0))))) ORDER BY '' ASC, (((((rt0.c1)) BETWEEN ((vt1.c0)) AND ((rt0.c1)))) NOTNULL) DESC  NULLS LAST;
SELECT MIN(rt0.c2) FROM rt0 WHERE (0.2976230484945759) ORDER BY (+ (((rt0.c1)GLOB(rt0.c0)))) DESC  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((0.2976230484945759)AND(((rt0.c0)||('0.7358545891830578'))))) ORDER BY (((rt0.c2, rt0.c3, rt0.c1)) BETWEEN ((x'85', CAST(rt0.c1 AS NUMERIC), ((x'b95f') IS TRUE))) AND (((rt0.c2 IN (rt0.c2)), ((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2)), (- (rt0.c1))))), (NOT (((((rt0.c3)OR(rt0.c2)))AND(rt0.c2)))) ASC, CASE CASE WHEN rt0.c0 THEN NULL ELSE rt0.c0 END  WHEN (- (rt0.c3)) THEN COALESCE(rt0.c1, rt0.c0) WHEN (((rt0.c2, '-2004012966', rt0.c3))<=((rt0.c2, rt0.c2, rt0.c2))) THEN ((rt0.c3)!=(rt0.c1)) END  NULLS FIRST INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE ((((rt0.c0, rt0.c3)) BETWEEN (((rt0.c2 IN ()), x'')) AND ((((rt0.c3)>(rt0.c1)), rt0.c0)))) ORDER BY (((rt0.c2, rt0.c3, rt0.c1)) BETWEEN ((x'85', CAST(rt0.c1 AS NUMERIC), ((x'b95f') IS TRUE))) AND (((rt0.c2 IN (rt0.c2)), ((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2)), (- (rt0.c1))))), (NOT (((((rt0.c3)OR(rt0.c2)))AND(rt0.c2)))) ASC, CASE CASE WHEN rt0.c0 THEN NULL ELSE rt0.c0 END  WHEN (- (rt0.c3)) THEN COALESCE(rt0.c1, rt0.c0) WHEN (((rt0.c2, '-2004012966', rt0.c3))<=((rt0.c2, rt0.c2, rt0.c2))) THEN ((rt0.c3)!=(rt0.c1)) END  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0 COLLATE BINARY)OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT * FROM vt1 WHERE (((((((vt1.c0 COLLATE BINARY)OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0 COLLATE NOCASE)))AND(((vt1.c0) NOTNULL)))))) ORDER BY vt1.c0  NULLS LAST, (((vt1.c0 IN ())) ISNULL) INTERSECT SELECT * FROM vt1 WHERE (0.4350912774107094) ORDER BY vt1.c0  NULLS LAST, (((vt1.c0 IN ())) ISNULL);
SELECT ALL * FROM vt1 WHERE (((((vt1.c0 COLLATE BINARY)OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT * FROM vt1 WHERE (((((((vt1.c0 COLLATE BINARY)OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0 COLLATE NOCASE)))AND(((vt1.c0) NOTNULL)))))) ORDER BY vt1.c0  NULLS LAST, (((vt1.c0 IN ())) ISNULL) INTERSECT SELECT * FROM vt1 WHERE (0.4350912774107094) ORDER BY vt1.c0  NULLS LAST, (((vt1.c0 IN ())) ISNULL);
SELECT ALL * FROM vt1 WHERE ((- (((vt1.c0)!=(0.9023652935813608)))));
SELECT DISTINCT * FROM vt1 WHERE ((- (((vt1.c0)<(0.9023652935813608)))));
SELECT ALL * FROM vt1 WHERE ((- (((vt1.c0)!=(0.9023652935813608)))));
SELECT DISTINCT * FROM vt1 WHERE ((- (((vt1.c0)<(0.9023652935813608)))));
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN vt1.c0 THEN 0.030873476882137485 ELSE (vt1.c0 IN (vt1.c0, vt1.c0)) END);
SELECT MIN(vt1.c0) FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN 0.030873476882137485 ELSE (vt1.c0 IN (vt1.c0, vt1.c0)) END)AND(0.21473199742024995))) ORDER BY vt1.c0 ASC  NULLS LAST, CAST(vt1.c0 COLLATE NOCASE AS BLOB);
SELECT ALL MAX(vt1.c0) FROM vt1, rt0 WHERE ((((DATETIME(rt0.c3, 0x35896d, rt0.c0), ((((((((rt0.c3)OR(rt0.c0)))AND(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)), rt0.c3 COLLATE BINARY))>((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 END, (((vt1.c0, rt0.c0)) NOT BETWEEN ((0Xfffffffff14d68a0, vt1.c0)) AND ((rt0.c0, vt1.c0))), ((x'e7')OR(rt0.c2))))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE ((((((DATETIME(rt0.c3, 3508589, rt0.c0), ((((((((rt0.c3)OR(rt0.c0)))AND(vt1.c0)))AND(rt0.c1)))AND(rt0.c2)), rt0.c3 COLLATE BINARY))>((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 END, (((vt1.c0, rt0.c0)) NOT BETWEEN ((-246585184, vt1.c0)) AND ((rt0.c0, vt1.c0))), ((x'e7')OR(rt0.c2))))))AND((((((((((vt1.c0 IN (rt0.c0, rt0.c3, vt1.c0)))AND(((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)))))OR(((vt1.c0)>>(vt1.c0)))))AND(CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END)))OR((rt0.c1 IN ()))))));
SELECT ALL COUNT(*) FROM vt1 CROSS JOIN rt0 ON (((rt0.c1 IN (rt0.c3, '^u f
6'))) BETWEEN ((x'a17355' IN ())) AND (((rt0.c3)>(rt0.c0)))) WHERE ((((rt0.c0 IN ()))<(((vt1.c0) IS FALSE))));
SELECT ALL COUNT(*) FROM vt1 CROSS JOIN rt0 ON (((rt0.c1 IN (rt0.c3, '^u f
6'))) BETWEEN ((x'a17355' IN ())) AND (((rt0.c3)>(rt0.c0)))) WHERE ((((rt0.c0 IN ()))<(((vt1.c0) IS FALSE)))) ORDER BY CASE ((rt0.c2) BETWEEN (rt0.c0) AND ('h'))  WHEN CASE rt0.c0  WHEN vt1.c0 THEN rt0.c3 ELSE 'c/' END THEN rt0.c0 COLLATE BINARY WHEN rt0.c2 THEN NULL END  NULLS LAST, (((((((x'')) NOT BETWEEN ((rt0.c1)) AND ((vt1.c0))))AND(((((NULL)AND(rt0.c0)))AND(rt0.c2)))))OR(LOWER(rt0.c3)))  NULLS LAST, NULL ASC;
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE (x'') ORDER BY CASE CASE WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END  WHEN (((rt0.c0)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c0))) THEN ((rt0.c3)<>(rt0.c3)) ELSE ((vt1.c0) IS TRUE) END DESC  NULLS FIRST, ((((((((((((((vt1.c0)OR(rt0.c3)))AND(0.4001406781447282)))AND(rt0.c3)))AND('-1153288785')))AND(vt1.c0)))OR(rt0.c3))) IS TRUE);
SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE (((x'')AND((- (CAST(rt0.c3 AS TEXT)))))) ORDER BY LIKELIHOOD(DISTINCT (((rt0.c3, vt1.c0, vt1.c0)) BETWEEN ((rt0.c3, rt0.c1, rt0.c2)) AND ((rt0.c1, rt0.c1, rt0.c1))), ((((rt0.c0)OR(vt1.c0)))OR(rt0.c0))) ASC  NULLS LAST, 0.8288028313088988 COLLATE NOCASE;
SELECT * FROM rt0 WHERE (((~ (rt0.c1)) IN (CAST(NULL AS BLOB))));
SELECT DISTINCT * FROM rt0 WHERE (((~ (rt0.c1)) IN (CAST(NULL AS BLOB)))) ORDER BY rt0.c1 DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM rt0 WHERE (((~ (rt0.c1)) IN (CAST(NULL AS BLOB))));
SELECT DISTINCT * FROM rt0 WHERE (((~ (rt0.c1)) IN (CAST(NULL AS BLOB)))) ORDER BY rt0.c1 DESC  NULLS FIRST LIMIT 0X0;
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE ((((rt0.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))) COLLATE RTRIM) ORDER BY ((((vt1.c0) IS FALSE))>=(rt0.c3))  NULLS LAST, ((((((rt0.c2 COLLATE NOCASE)AND(x'')))OR(IFNULL(DISTINCT rt0.c3, rt0.c0))))OR(rt0.c1))  NULLS FIRST;
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE ((((((rt0.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))) COLLATE RTRIM)AND(((((((((((((((((rt0.c0)OR(-1936658788)))OR(rt0.c1)))AND(vt1.c0)))AND(vt1.c0)))OR(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c3 END)))OR(((rt0.c1)!=(vt1.c0)))))OR(CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 END)))AND(((rt0.c3) BETWEEN (rt0.c3) AND (rt0.c1))))))) ORDER BY (((0.5330545135407739 IN ()))|(CASE WHEN rt0.c0 THEN rt0.c3 END)) DESC  NULLS LAST LIMIT 0x2;
SELECT * FROM rt0 WHERE (((((((((((rt0.c2)AND((NOT (rt0.c1)))))AND(((rt0.c0)+(rt0.c1)))))OR(TRIM(rt0.c2))))AND(((rt0.c2)IS(rt0.c2)))))AND((- (rt0.c0))))) ORDER BY ((((CAST(rt0.c2 AS BLOB))OR(LOWER(DISTINCT '!'))))OR(((rt0.c2) IS TRUE))) DESC  NULLS FIRST, (NOT (1.304629726E9)) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((((((((((rt0.c2)AND((NOT (rt0.c1)))))AND(((rt0.c0)+(rt0.c1)))))OR(TRIM(rt0.c2))))AND(((rt0.c2)IS(rt0.c2)))))AND((- (rt0.c0))))) ORDER BY ((((CAST(rt0.c2 AS BLOB))OR(LOWER(DISTINCT '!'))))OR(((rt0.c2) IS TRUE))) DESC  NULLS FIRST, (NOT (1.304629726E9)) DESC  NULLS FIRST INTERSECT SELECT * FROM rt0 WHERE (x'') ORDER BY ((((CAST(rt0.c2 AS BLOB))OR(LOWER(DISTINCT '!'))))OR(((rt0.c2) IS TRUE))) DESC  NULLS FIRST, (NOT (1.304629726E9)) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (((((((((((rt0.c2)AND((NOT (rt0.c1)))))AND(((rt0.c0)+(rt0.c1)))))OR(TRIM(rt0.c2))))AND(((rt0.c2)IS(rt0.c2)))))AND((- (rt0.c0))))) ORDER BY ((((CAST(rt0.c2 AS BLOB))OR(LOWER(DISTINCT '!'))))OR(((rt0.c2) IS TRUE))) DESC  NULLS FIRST, (NOT (1.304629726E9)) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((((((((((rt0.c2)AND((NOT (rt0.c1)))))AND(((rt0.c0)+(rt0.c1)))))OR(TRIM(rt0.c2))))AND(((rt0.c2)IS(rt0.c2)))))AND((- (rt0.c0))))) ORDER BY ((((CAST(rt0.c2 AS BLOB))OR(LOWER(DISTINCT '!'))))OR(((rt0.c2) IS TRUE))) DESC  NULLS FIRST, (NOT (1.304629726E9)) DESC  NULLS FIRST INTERSECT SELECT * FROM rt0 WHERE (x'') ORDER BY ((((CAST(rt0.c2 AS BLOB))OR(LOWER(DISTINCT '!'))))OR(((rt0.c2) IS TRUE))) DESC  NULLS FIRST, (NOT (1.304629726E9)) DESC  NULLS FIRST;
SELECT * FROM rt0, vt1 NOT INDEXED WHERE (((rt0.c3) IS FALSE));
SELECT ALL * FROM rt0, vt1 WHERE (((rt0.c3) IS FALSE)) LIMIT 0;
SELECT * FROM rt0, vt1 NOT INDEXED WHERE (((rt0.c3) IS FALSE));
SELECT ALL * FROM rt0, vt1 WHERE (((rt0.c3) IS FALSE)) LIMIT 0;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (HEX(DISTINCT (rt0.c3 IN (vt1.c0, rt0.c3))));
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (HEX(DISTINCT (rt0.c3 IN (vt1.c0, rt0.c3)))) INTERSECT SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (CASE WHEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END THEN ((x'8cd031')-(vt1.c0)) WHEN ((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2)) THEN (- (rt0.c0)) ELSE NULL END);
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (HEX(DISTINCT (rt0.c3 IN (vt1.c0, rt0.c3))));
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (HEX(DISTINCT (rt0.c3 IN (vt1.c0, rt0.c3)))) INTERSECT SELECT * FROM vt1 NATURAL JOIN rt0 WHERE (CASE WHEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END THEN ((x'8cd031')-(vt1.c0)) WHEN ((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c2)) THEN (- (rt0.c0)) ELSE NULL END);
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE WHEN vt1.c0 THEN (((vt1.c0, vt1.c0))==((vt1.c0, 'ﰎ'))) WHEN ((vt1.c0) IS FALSE) THEN vt1.c0 END);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CASE WHEN vt1.c0 THEN (((vt1.c0, vt1.c0))==((vt1.c0, 'ﰎ'))) WHEN ((vt1.c0) IS FALSE) THEN vt1.c0 END) ORDER BY ((vt1.c0) NOT BETWEEN (((vt1.c0)>(vt1.c0))) AND ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, NULL, vt1.c0, vt1.c0, vt1.c0)))))  NULLS LAST;
SELECT MAX(rt0.c3) FROM rt0 WHERE (((CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END) BETWEEN (((rt0.c2)LIKE(rt0.c1))) AND ((((rt0.c2, rt0.c0))>=((rt0.c2, 'x%JN*B*ᘝ<'))))));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (((CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END) BETWEEN (((rt0.c2)LIKE(rt0.c1))) AND ((((rt0.c2, rt0.c0))>((rt0.c2, 'x%JN*B*ᘝ<')))))) ORDER BY (((rt0.c0, rt0.c3, rt0.c3, rt0.c2)) BETWEEN (((NOT (rt0.c1)), rt0.c0 COLLATE BINARY, CAST(rt0.c3 AS TEXT), (- (rt0.c0)))) AND ((rt0.c1, (('')>>(rt0.c3)), CASE rt0.c0  WHEN rt0.c2 THEN rt0.c1 END, (0.09298123374612599 IN ())))) DESC INTERSECT SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((((rt0.c0, x'4a', rt0.c2, rt0.c1)) BETWEEN ((((NULL)||(rt0.c2)), rt0.c3, CASE rt0.c2  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END, (rt0.c2 IN (rt0.c3)))) AND ((CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 END, CAST(rt0.c0 AS INTEGER), rt0.c1, (~ (rt0.c2)))))) ORDER BY (((rt0.c0, rt0.c3, rt0.c3, rt0.c2)) BETWEEN (((NOT (rt0.c1)), rt0.c0 COLLATE BINARY, CAST(rt0.c3 AS TEXT), (- (rt0.c0)))) AND ((rt0.c1, (('')>>(rt0.c3)), CASE rt0.c0  WHEN rt0.c2 THEN rt0.c1 END, (0.09298123374612599 IN ())))) DESC;
SELECT MAX(vt1.c0) FROM vt1 WHERE (CASE (vt1.c0 IN (vt1.c0))  WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (vt1.c0 IN (vt1.c0)) ELSE vt1.c0 END) ORDER BY ((NULL) NOT BETWEEN (vt1.c0) AND (ABS(vt1.c0))) DESC, ((((((((vt1.c0)AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(TYPEOF(DISTINCT vt1.c0))))OR(((vt1.c0)|(vt1.c0)))))OR(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE (vt1.c0 IN (vt1.c0))  WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (vt1.c0 IN (vt1.c0)) ELSE vt1.c0 END) ORDER BY ((NULL) NOT BETWEEN (vt1.c0) AND (ABS(vt1.c0))) DESC, ((((((((vt1.c0)AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(TYPEOF(DISTINCT vt1.c0))))OR(((vt1.c0)|(vt1.c0)))))OR(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))) COLLATE BINARY) ORDER BY ((NULL) NOT BETWEEN (vt1.c0) AND (ABS(vt1.c0))) DESC, ((((((((vt1.c0)AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))OR(TYPEOF(DISTINCT vt1.c0))))OR(((vt1.c0)|(vt1.c0)))))OR(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))));
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE (rt0.c1);
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE (((rt0.c1)AND(((DATE(rt0.c3, '1815506229', rt0.c0)) BETWEEN (x'') AND ((~ (vt1.c0))))))) LIMIT 0 INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE (((CASE rt0.c1  WHEN x'20' THEN NULL WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c2 END)==(0.3691813671262443))) LIMIT 0X0;
SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE ('78570941');
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((('78570941')AND((ROUND(0.9384129103365668, vt1.c0) IN (((vt1.c0) IS TRUE)))))) ORDER BY ((((rt0.c3) NOTNULL)) IS FALSE) ASC;
SELECT * FROM rt0, vt1 WHERE ((((rt0.c2)) BETWEEN ((((rt0.c0) NOT NULL))) AND ((''))));
SELECT * FROM rt0, vt1 WHERE ((((rt0.c2)) BETWEEN ((((rt0.c0) NOT NULL))) AND (('')))) INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (CASE WHEN ((((rt0.c1)AND(rt0.c3)))OR(rt0.c1)) THEN (- (vt1.c0)) WHEN rt0.c0 COLLATE NOCASE THEN (rt0.c0 IN ()) WHEN UPPER(DISTINCT vt1.c0) THEN (x'' IN ()) WHEN ((rt0.c0)>(rt0.c2)) THEN vt1.c0 COLLATE BINARY ELSE rt0.c1 END);
SELECT * FROM rt0, vt1 WHERE ((((rt0.c2)) BETWEEN ((((rt0.c0) NOT NULL))) AND ((''))));
SELECT * FROM rt0, vt1 WHERE ((((rt0.c2)) BETWEEN ((((rt0.c0) NOT NULL))) AND (('')))) INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (CASE WHEN ((((rt0.c1)AND(rt0.c3)))OR(rt0.c1)) THEN (- (vt1.c0)) WHEN rt0.c0 COLLATE NOCASE THEN (rt0.c0 IN ()) WHEN UPPER(DISTINCT vt1.c0) THEN (x'' IN ()) WHEN ((rt0.c0)>(rt0.c2)) THEN vt1.c0 COLLATE BINARY ELSE rt0.c1 END);
SELECT * FROM rt0, vt1 WHERE (CAST(CASE rt0.c3  WHEN vt1.c0 THEN rt0.c2 ELSE rt0.c3 END AS BLOB));
SELECT ALL * FROM rt0, vt1 WHERE (CAST(CASE rt0.c3  WHEN vt1.c0 THEN rt0.c2 ELSE rt0.c3 END AS BLOB)) ORDER BY CAST(COALESCE(rt0.c3, rt0.c0) AS NUMERIC) DESC  NULLS LAST, 0.30210928536157966  NULLS FIRST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (rt0.c1) ORDER BY CAST(COALESCE(rt0.c3, rt0.c0) AS NUMERIC) DESC  NULLS LAST, 0.30210928536157966  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (CAST(CASE rt0.c3  WHEN vt1.c0 THEN rt0.c2 ELSE rt0.c3 END AS BLOB));
SELECT ALL * FROM rt0, vt1 WHERE (CAST(CASE rt0.c3  WHEN vt1.c0 THEN rt0.c2 ELSE rt0.c3 END AS BLOB)) ORDER BY CAST(COALESCE(rt0.c3, rt0.c0) AS NUMERIC) DESC  NULLS LAST, 0.30210928536157966  NULLS FIRST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (rt0.c1) ORDER BY CAST(COALESCE(rt0.c3, rt0.c0) AS NUMERIC) DESC  NULLS LAST, 0.30210928536157966  NULLS FIRST;
SELECT * FROM vt1 WHERE ((~ (((vt1.c0)IS NOT(vt1.c0))))) ORDER BY CASE vt1.c0  WHEN x'b0b86faf' THEN ((vt1.c0)*(vt1.c0)) WHEN vt1.c0 THEN (- (vt1.c0)) WHEN (((vt1.c0))>((vt1.c0))) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END END, (((((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))AND(((vt1.c0) NOTNULL))))AND(NULL));
SELECT ALL * FROM vt1 WHERE ((~ (((vt1.c0)IS NOT(vt1.c0))))) ORDER BY CASE vt1.c0  WHEN x'b0b86faf' THEN ((vt1.c0)*(vt1.c0)) WHEN vt1.c0 THEN (- (vt1.c0)) WHEN (((vt1.c0))>((vt1.c0))) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END END, (((((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))AND(((vt1.c0) NOTNULL))))AND(NULL)) LIMIT 1;
SELECT * FROM vt1 WHERE ((~ (((vt1.c0)IS NOT(vt1.c0))))) ORDER BY CASE vt1.c0  WHEN x'b0b86faf' THEN ((vt1.c0)*(vt1.c0)) WHEN vt1.c0 THEN (- (vt1.c0)) WHEN (((vt1.c0))>((vt1.c0))) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END END, (((((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))AND(((vt1.c0) NOTNULL))))AND(NULL));
SELECT ALL * FROM vt1 WHERE ((~ (((vt1.c0)IS NOT(vt1.c0))))) ORDER BY CASE vt1.c0  WHEN x'b0b86faf' THEN ((vt1.c0)*(vt1.c0)) WHEN vt1.c0 THEN (- (vt1.c0)) WHEN (((vt1.c0))>((vt1.c0))) THEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END END, (((((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))AND(((vt1.c0) NOTNULL))))AND(NULL)) LIMIT 1;
SELECT * FROM rt0 WHERE (((CAST('Ae8kox' AS INTEGER)) IS TRUE)) ORDER BY ((((((((((((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 ELSE NULL END)OR(rt0.c3 COLLATE NOCASE)))AND((+ (rt0.c2)))))AND(((((((((x'')AND(rt0.c3)))AND(rt0.c2)))AND(x'904301fa')))OR(rt0.c2)))))AND(NULL)))AND(((rt0.c1)+(NULL)))))AND(((((((rt0.c0)AND(rt0.c3)))AND(rt0.c3)))AND(rt0.c1)))) DESC;
SELECT ALL * FROM rt0 WHERE (((((CAST('Ae8kox' AS INTEGER)) IS TRUE))AND(rt0.c1))) ORDER BY ((((((rt0.c0)AND(rt0.c0)))OR(rt0.c3))) BETWEEN (((((((((((rt0.c3)OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))AND(rt0.c3)))AND(x''))) AND (rt0.c2)) ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT ALL * FROM rt0 WHERE (CAST((((rt0.c1, rt0.c0))==((rt0.c3, rt0.c2))) AS TEXT)) ORDER BY ((((((rt0.c0)AND(rt0.c0)))OR(rt0.c3))) BETWEEN (((((((((((rt0.c3)OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))AND(rt0.c3)))AND(x''))) AND (rt0.c2)) ASC  NULLS FIRST LIMIT 0x2;
SELECT * FROM rt0 WHERE (((CAST('Ae8kox' AS INTEGER)) IS TRUE)) ORDER BY ((((((((((((CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 ELSE NULL END)OR(rt0.c3 COLLATE NOCASE)))AND((+ (rt0.c2)))))AND(((((((((x'')AND(rt0.c3)))AND(rt0.c2)))AND(x'904301fa')))OR(rt0.c2)))))AND(NULL)))AND(((rt0.c1)+(NULL)))))AND(((((((rt0.c0)AND(rt0.c3)))AND(rt0.c3)))AND(rt0.c1)))) DESC;
SELECT ALL * FROM rt0 WHERE (((((CAST('Ae8kox' AS INTEGER)) IS TRUE))AND(rt0.c1))) ORDER BY ((((((rt0.c0)AND(rt0.c0)))OR(rt0.c3))) BETWEEN (((((((((((rt0.c3)OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))AND(rt0.c3)))AND(x''))) AND (rt0.c2)) ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT ALL * FROM rt0 WHERE (CAST((((rt0.c1, rt0.c0))==((rt0.c3, rt0.c2))) AS TEXT)) ORDER BY ((((((rt0.c0)AND(rt0.c0)))OR(rt0.c3))) BETWEEN (((((((((((rt0.c3)OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c3)))AND(rt0.c3)))AND(x''))) AND (rt0.c2)) ASC  NULLS FIRST LIMIT 0x2;
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (CASE WHEN TYPEOF(DISTINCT rt0.c3) THEN CASE WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END END);
SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (CASE WHEN TYPEOF(DISTINCT rt0.c3) THEN CASE WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c3 END END) ORDER BY rt0.c1, CASE ((rt0.c2)&(rt0.c1))  WHEN ((vt1.c0)>>(0.3004883436786665)) THEN ((((rt0.c2)OR(rt0.c2)))OR(rt0.c1)) END ASC, (rt0.c3 IN (rt0.c0 COLLATE BINARY, CAST(rt0.c3 AS BLOB), ((vt1.c0)IS(rt0.c0)))) ASC  NULLS LAST, 'umonthsa'  NULLS FIRST;
SELECT * FROM rt0 WHERE ((+ ('659201032')) COLLATE NOCASE) ORDER BY ((((0xffffffffc32bc756)OR(rt0.c2)))AND(rt0.c2)) COLLATE RTRIM ASC  NULLS FIRST, (('-452340240')GLOB(rt0.c0)) COLLATE NOCASE ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE ((((+ ('659201032')) COLLATE NOCASE)AND(((rt0.c3) NOTNULL) COLLATE BINARY))) ORDER BY ((((-1020541098)OR(rt0.c2)))AND(rt0.c2)) COLLATE RTRIM ASC  NULLS FIRST, (('-452340240')GLOB(rt0.c0)) COLLATE NOCASE ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c2 COLLATE BINARY)OR(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 END)))OR(rt0.c3 COLLATE BINARY)))OR(((rt0.c0)>=(rt0.c3)))))AND(json_insert('1083529829', rt0.c3, rt0.c2, rt0.c1)))) ORDER BY ((((0Xffffffffc32bc756)OR(rt0.c2)))AND(rt0.c2)) COLLATE RTRIM ASC  NULLS FIRST, (('-452340240')GLOB(rt0.c0)) COLLATE NOCASE ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE ((+ ('659201032')) COLLATE NOCASE) ORDER BY ((((0xffffffffc32bc756)OR(rt0.c2)))AND(rt0.c2)) COLLATE RTRIM ASC  NULLS FIRST, (('-452340240')GLOB(rt0.c0)) COLLATE NOCASE ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE ((((+ ('659201032')) COLLATE NOCASE)AND(((rt0.c3) NOTNULL) COLLATE BINARY))) ORDER BY ((((-1020541098)OR(rt0.c2)))AND(rt0.c2)) COLLATE RTRIM ASC  NULLS FIRST, (('-452340240')GLOB(rt0.c0)) COLLATE NOCASE ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c2 COLLATE BINARY)OR(CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 END)))OR(rt0.c3 COLLATE BINARY)))OR(((rt0.c0)>=(rt0.c3)))))AND(json_insert('1083529829', rt0.c3, rt0.c2, rt0.c1)))) ORDER BY ((((0Xffffffffc32bc756)OR(rt0.c2)))AND(rt0.c2)) COLLATE RTRIM ASC  NULLS FIRST, (('-452340240')GLOB(rt0.c0)) COLLATE NOCASE ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0, vt1.c0, 112731209))<((vt1.c0, vt1.c0, ''))) IN ()));
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0, vt1.c0, 112731209))<((vt1.c0, vt1.c0, ''))) IN ()));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (CAST(rt0.c1 COLLATE BINARY AS REAL)) ORDER BY ((rt0.c0)LIKE((('1696195073') NOTNULL))) ASC;
SELECT MAX(rt0.c3) FROM rt0 WHERE (CAST(rt0.c1 COLLATE BINARY AS REAL)) ORDER BY CASE WHEN (rt0.c1 IN (rt0.c0)) THEN (rt0.c2 IN (rt0.c3)) WHEN (((rt0.c1)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c3))) THEN (rt0.c0 IN ('856695189')) END  NULLS FIRST, UPPER(rt0.c3 COLLATE RTRIM) ASC  NULLS LAST, CASE ((rt0.c0) IS TRUE)  WHEN ABS(rt0.c0) THEN ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c3)) WHEN ((NULL)<(rt0.c3)) THEN ((((((rt0.c0)AND(rt0.c2)))AND(rt0.c3)))AND(rt0.c2)) WHEN ((rt0.c1)!=(rt0.c1)) THEN (~ (rt0.c3)) END ASC  NULLS LAST LIMIT 0X0;
SELECT MIN(rt0.c1) FROM rt0 WHERE ((('-924501417') IS TRUE)) ORDER BY TYPEOF(DISTINCT (rt0.c0 IN ())) ASC, CAST(((rt0.c2)>>(rt0.c0)) AS REAL) DESC;
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE ((((('-924501417') IS TRUE))AND(NULL))) ORDER BY TYPEOF(DISTINCT (rt0.c0 IN ())) ASC, CAST(((rt0.c2)>>(rt0.c0)) AS REAL) DESC LIMIT 0X3 INTERSECT SELECT MIN(rt0.c1) FROM rt0 WHERE (json(rt0.c0 COLLATE RTRIM)) ORDER BY TYPEOF(DISTINCT (rt0.c0 IN ())) ASC, CAST(((rt0.c2)>>(rt0.c0)) AS REAL) DESC LIMIT 3;
SELECT * FROM rt0 WHERE ((((((((((((((- (rt0.c1)))OR(CAST(rt0.c1 AS REAL))))AND(((rt0.c2)IS(rt0.c1)))))OR((((NULL)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))))AND(((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c0)))))AND(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 ELSE x'd09ca4' END)))OR((rt0.c1 IN (rt0.c0)))));
SELECT ALL * FROM rt0 WHERE ((((((((((((((- (rt0.c1)))OR(CAST(rt0.c1 AS REAL))))AND(((rt0.c2)IS(rt0.c1)))))OR((((NULL)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))))AND(((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c0)))))AND(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 ELSE x'd09ca4' END)))OR((rt0.c1 IN (rt0.c0))))) ORDER BY ((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c2)))IS(((rt0.c2) IS TRUE))), (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))) INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c1) IS FALSE)) IS FALSE)) ORDER BY ((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c2)))IS(((rt0.c2) IS TRUE))), (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2))));
SELECT * FROM rt0 WHERE ((((((((((((((- (rt0.c1)))OR(CAST(rt0.c1 AS REAL))))AND(((rt0.c2)IS(rt0.c1)))))OR((((NULL)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))))AND(((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c0)))))AND(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 ELSE x'd09ca4' END)))OR((rt0.c1 IN (rt0.c0)))));
SELECT ALL * FROM rt0 WHERE ((((((((((((((- (rt0.c1)))OR(CAST(rt0.c1 AS REAL))))AND(((rt0.c2)IS(rt0.c1)))))OR((((NULL)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))))AND(((((((rt0.c1)AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c0)))))AND(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c2 ELSE x'd09ca4' END)))OR((rt0.c1 IN (rt0.c0))))) ORDER BY ((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c2)))IS(((rt0.c2) IS TRUE))), (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))) INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c1) IS FALSE)) IS FALSE)) ORDER BY ((((rt0.c0) BETWEEN (rt0.c3) AND (rt0.c2)))IS(((rt0.c2) IS TRUE))), (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2))));
SELECT MAX(rt0.c0) FROM rt0, vt1 WHERE ((((rt0.c1 IN (rt0.c1, rt0.c2))) BETWEEN (vt1.c0) AND ((((rt0.c2, vt1.c0))<=((rt0.c0, rt0.c0))))));
SELECT DISTINCT MAX(rt0.c0) FROM rt0, vt1 WHERE ((((rt0.c1 IN (rt0.c1, rt0.c2))) BETWEEN (vt1.c0) AND ((((rt0.c2, vt1.c0))<((rt0.c0, rt0.c0)))))) ORDER BY 0Xffffffffdbb86217  NULLS FIRST, CAST((- (rt0.c3)) AS NUMERIC) LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE (CASE (((rt0.c0))==((rt0.c3)))  WHEN ((0.8268630894534028) ISNULL) THEN 'WT짌k' WHEN '1101443830' COLLATE NOCASE THEN (- (rt0.c3)) WHEN (- (rt0.c1)) THEN (rt0.c3 IN (rt0.c2)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c2)) THEN (~ (rt0.c1)) ELSE ((rt0.c2)AND(rt0.c3)) END) ORDER BY (((rt0.c2, rt0.c2, rt0.c0, rt0.c3)) NOT BETWEEN (((((0xffffffff9804e647)) NOT BETWEEN ((rt0.c1)) AND ((NULL))), ((rt0.c2) NOT BETWEEN ('1466001721') AND (rt0.c1)), rt0.c1 COLLATE BINARY, CASE WHEN NULL THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END)) AND ((NULL, CAST(rt0.c2 AS NUMERIC), ((((-1.01668619E8)AND(rt0.c0)))AND(NULL)), ((-376789358) NOT BETWEEN (rt0.c2) AND (rt0.c0))))) ASC, CASE WHEN CASE WHEN NULL THEN rt0.c3 WHEN rt0.c0 THEN rt0.c3 END THEN ((rt0.c2) IS TRUE) WHEN rt0.c2 THEN rt0.c1 COLLATE RTRIM WHEN (('Z/') IS FALSE) THEN ((rt0.c1) IS FALSE) ELSE ((rt0.c1)!=(rt0.c0)) END ASC, (((rt0.c3)) BETWEEN (((- (rt0.c2)))) AND (((rt0.c3 IN (rt0.c1)))));
SELECT * FROM rt0 WHERE (((CASE (((rt0.c0))=((rt0.c3)))  WHEN ((0.8268630894534028) ISNULL) THEN 'WT짌k' WHEN '1101443830' COLLATE NOCASE THEN (- (rt0.c3)) WHEN (- (rt0.c1)) THEN (rt0.c3 IN (rt0.c2)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c2)) THEN (~ (rt0.c1)) ELSE ((rt0.c2)AND(rt0.c3)) END)AND(((((((((((((0.3982142228357791) NOT NULL))AND(rt0.c2 COLLATE RTRIM)))AND(((rt0.c1) NOT NULL))))OR((((('')AND(rt0.c2)))AND(rt0.c3)))))AND((rt0.c2 IN ()))))OR(IFNULL(rt0.c2, rt0.c3)))))) ORDER BY ((rt0.c1)LIKE(rt0.c2)) COLLATE RTRIM  NULLS FIRST LIMIT 1;
SELECT ALL * FROM rt0 WHERE (CASE (((rt0.c0))==((rt0.c3)))  WHEN ((0.8268630894534028) ISNULL) THEN 'WT짌k' WHEN '1101443830' COLLATE NOCASE THEN (- (rt0.c3)) WHEN (- (rt0.c1)) THEN (rt0.c3 IN (rt0.c2)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c2)) THEN (~ (rt0.c1)) ELSE ((rt0.c2)AND(rt0.c3)) END) ORDER BY (((rt0.c2, rt0.c2, rt0.c0, rt0.c3)) NOT BETWEEN (((((0xffffffff9804e647)) NOT BETWEEN ((rt0.c1)) AND ((NULL))), ((rt0.c2) NOT BETWEEN ('1466001721') AND (rt0.c1)), rt0.c1 COLLATE BINARY, CASE WHEN NULL THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END)) AND ((NULL, CAST(rt0.c2 AS NUMERIC), ((((-1.01668619E8)AND(rt0.c0)))AND(NULL)), ((-376789358) NOT BETWEEN (rt0.c2) AND (rt0.c0))))) ASC, CASE WHEN CASE WHEN NULL THEN rt0.c3 WHEN rt0.c0 THEN rt0.c3 END THEN ((rt0.c2) IS TRUE) WHEN rt0.c2 THEN rt0.c1 COLLATE RTRIM WHEN (('Z/') IS FALSE) THEN ((rt0.c1) IS FALSE) ELSE ((rt0.c1)!=(rt0.c0)) END ASC, (((rt0.c3)) BETWEEN (((- (rt0.c2)))) AND (((rt0.c3 IN (rt0.c1)))));
SELECT * FROM rt0 WHERE (((CASE (((rt0.c0))=((rt0.c3)))  WHEN ((0.8268630894534028) ISNULL) THEN 'WT짌k' WHEN '1101443830' COLLATE NOCASE THEN (- (rt0.c3)) WHEN (- (rt0.c1)) THEN (rt0.c3 IN (rt0.c2)) WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c2)) THEN (~ (rt0.c1)) ELSE ((rt0.c2)AND(rt0.c3)) END)AND(((((((((((((0.3982142228357791) NOT NULL))AND(rt0.c2 COLLATE RTRIM)))AND(((rt0.c1) NOT NULL))))OR((((('')AND(rt0.c2)))AND(rt0.c3)))))AND((rt0.c2 IN ()))))OR(IFNULL(rt0.c2, rt0.c3)))))) ORDER BY ((rt0.c1)LIKE(rt0.c2)) COLLATE RTRIM  NULLS FIRST LIMIT 1;
SELECT * FROM vt1 WHERE (LIKELY(DISTINCT vt1.c0 COLLATE BINARY)) ORDER BY (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))>>(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))  NULLS FIRST, CASE WHEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) THEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) WHEN (- (vt1.c0)) THEN IFNULL(vt1.c0, vt1.c0) END DESC;
SELECT DISTINCT * FROM vt1 WHERE (LIKELY(DISTINCT vt1.c0 COLLATE BINARY)) ORDER BY '', vt1.c0 ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1 WHERE (LIKELY(DISTINCT vt1.c0 COLLATE BINARY)) ORDER BY (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))>>(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END))  NULLS FIRST, CASE WHEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) THEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) WHEN (- (vt1.c0)) THEN IFNULL(vt1.c0, vt1.c0) END DESC;
SELECT DISTINCT * FROM vt1 WHERE (LIKELY(DISTINCT vt1.c0 COLLATE BINARY)) ORDER BY '', vt1.c0 ASC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE (CASE WHEN RTRIM(rt0.c2) THEN (- (rt0.c0)) END) ORDER BY (NOT (((x'36acb4')>(rt0.c2)))), CAST(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)) AS TEXT);
SELECT ALL * FROM rt0 WHERE (((CASE WHEN RTRIM(rt0.c2) THEN (- (rt0.c0)) END)AND((((rt0.c2 IN ())) BETWEEN (CAST(rt0.c0 AS TEXT)) AND (((rt0.c2)AND(rt0.c3))))))) ORDER BY LOWER(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)))  NULLS LAST, (((NOT (rt0.c1)))>(((rt0.c1) NOTNULL))) LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE (CASE WHEN RTRIM(rt0.c2) THEN (- (rt0.c0)) END) ORDER BY (NOT (((x'36acb4')>(rt0.c2)))), CAST(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)) AS TEXT);
SELECT ALL * FROM rt0 WHERE (((CASE WHEN RTRIM(rt0.c2) THEN (- (rt0.c0)) END)AND((((rt0.c2 IN ())) BETWEEN (CAST(rt0.c0 AS TEXT)) AND (((rt0.c2)AND(rt0.c3))))))) ORDER BY LOWER(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)))  NULLS LAST, (((NOT (rt0.c1)))>(((rt0.c1) NOTNULL))) LIMIT 0x0;
SELECT ALL * FROM rt0, vt1 WHERE (('^G^' COLLATE NOCASE IN ())) ORDER BY ((x'97d3')|(rt0.c0)) COLLATE BINARY DESC;
SELECT * FROM rt0, vt1 WHERE (('^G^' COLLATE NOCASE IN ())) ORDER BY ((x'97d3')|(rt0.c0)) COLLATE BINARY DESC;
SELECT ALL * FROM rt0, vt1 WHERE (('^G^' COLLATE NOCASE IN ())) ORDER BY ((x'97d3')|(rt0.c0)) COLLATE BINARY DESC;
SELECT * FROM rt0, vt1 WHERE (('^G^' COLLATE NOCASE IN ())) ORDER BY ((x'97d3')|(rt0.c0)) COLLATE BINARY DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((- (vt1.c0)))&(UNLIKELY(DISTINCT vt1.c0))));
SELECT COUNT(*) FROM vt1 WHERE ((((((- (vt1.c0)))&(UNLIKELY(DISTINCT vt1.c0))))AND((((vt1.c0 IN (vt1.c0))) IS TRUE))));
SELECT MIN(rt0.c3) FROM rt0 WHERE ((((rt0.c0 IN (rt0.c3)))IS((0.10637707476046987 IN (rt0.c2, rt0.c1)))));
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((((((rt0.c0 IN (rt0.c3)))IS((0.10637707476046987 IN (rt0.c2, rt0.c1)))))AND((~ (ABS(DISTINCT rt0.c2)))))) ORDER BY (((rt0.c2)) BETWEEN (((((rt0.c0, rt0.c0)) BETWEEN (('-1484881467', rt0.c3)) AND ((rt0.c0, rt0.c3))))) AND ((((rt0.c3) NOTNULL)))), (((rt0.c1) ISNULL) IN ()) ASC  NULLS LAST INTERSECT SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (UNICODE(TRIM(rt0.c3, rt0.c0))) ORDER BY (((rt0.c2)) BETWEEN (((((rt0.c0, rt0.c0)) BETWEEN (('-1484881467', rt0.c3)) AND ((rt0.c0, rt0.c3))))) AND ((((rt0.c3) NOTNULL)))), (((rt0.c1) ISNULL) IN ()) ASC  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((NOT (vt1.c0)))=(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END))) ORDER BY COALESCE((((vt1.c0))>((vt1.c0))), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END, ((vt1.c0)||(vt1.c0)), CHAR(vt1.c0, vt1.c0)) DESC, ((((- (vt1.c0)), CAST(x'' AS TEXT)))<=((((vt1.c0)/(vt1.c0)), ((vt1.c0) NOTNULL))))  NULLS FIRST, CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN vt1.c0 COLLATE BINARY WHEN CAST(vt1.c0 AS INTEGER) THEN (NULL IN ()) WHEN (- (vt1.c0)) THEN 0.6431361694318602 WHEN (((vt1.c0))=((vt1.c0))) THEN IFNULL(DISTINCT vt1.c0, vt1.c0) END;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((NOT (vt1.c0)))==(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND(((((((vt1.c0) NOT BETWEEN (0.9607073496388701) AND (vt1.c0)))OR(((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(json_array_length(x'70', vt1.c0)))))) ORDER BY COALESCE((((vt1.c0))>((vt1.c0))), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END, ((vt1.c0)||(vt1.c0)), CHAR(vt1.c0, vt1.c0)) DESC, ((((- (vt1.c0)), CAST(x'' AS TEXT)))<=((((vt1.c0)/(vt1.c0)), ((vt1.c0) NOTNULL))))  NULLS FIRST, CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN vt1.c0 COLLATE BINARY WHEN CAST(vt1.c0 AS INTEGER) THEN (NULL IN ()) WHEN (- (vt1.c0)) THEN 0.6431361694318602 WHEN (((vt1.c0))==((vt1.c0))) THEN IFNULL(DISTINCT vt1.c0, vt1.c0) END INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (UNLIKELY(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY COALESCE((((vt1.c0))>((vt1.c0))), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END, ((vt1.c0)||(vt1.c0)), CHAR(vt1.c0, vt1.c0)) DESC, ((((- (vt1.c0)), CAST(x'' AS TEXT)))<=((((vt1.c0)/(vt1.c0)), ((vt1.c0) NOTNULL))))  NULLS FIRST, CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN vt1.c0 COLLATE BINARY WHEN CAST(vt1.c0 AS INTEGER) THEN (NULL IN ()) WHEN (- (vt1.c0)) THEN 0.6431361694318602 WHEN (((vt1.c0))=((vt1.c0))) THEN IFNULL(DISTINCT vt1.c0, vt1.c0) END;
SELECT MAX(rt0.c0) FROM rt0, vt1 WHERE ((((((((('774386652') BETWEEN (rt0.c1) AND (rt0.c3)))AND(((rt0.c0)%(rt0.c1)))))AND(((rt0.c1) NOTNULL))))OR(((rt0.c1) NOTNULL))));
SELECT DISTINCT MAX(rt0.c0) FROM rt0, vt1 WHERE ((((((((((('774386652') BETWEEN (rt0.c1) AND (rt0.c3)))AND(((rt0.c0)%(rt0.c1)))))AND(((rt0.c1) NOTNULL))))OR(((rt0.c1) NOTNULL))))AND(((((rt0.c1) IS FALSE)) BETWEEN (CAST(rt0.c2 AS INTEGER)) AND ((((rt0.c2, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c3, NULL, rt0.c1)) AND ((rt0.c3, rt0.c1, rt0.c1)))))))) ORDER BY CASE (vt1.c0 IN ())  WHEN (rt0.c0 IN (NULL, rt0.c3, vt1.c0)) THEN 0xffffffff9454e6f8 ELSE TRIM(DISTINCT rt0.c1, rt0.c0) END  NULLS FIRST, TYPEOF(DISTINCT ((rt0.c3) IS FALSE)) DESC, (NOT (rt0.c1 COLLATE NOCASE)) ASC  NULLS LAST LIMIT 0X3;
SELECT MIN(rt0.c0) FROM rt0 WHERE ((((((((((rt0.c3, rt0.c2))<=((rt0.c2, rt0.c0))))AND(CAST(rt0.c3 AS REAL))))AND(((x'') NOT BETWEEN (rt0.c0) AND (rt0.c0)))))AND((((rt0.c1, rt0.c3, rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c1, '', rt0.c3, rt0.c0)) AND ((rt0.c2, rt0.c1, 9.9367454E7, rt0.c3))))));
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE ((((((((((((rt0.c3, rt0.c2))<((rt0.c2, rt0.c0))))AND(CAST(rt0.c3 AS REAL))))AND(((x'') NOT BETWEEN (rt0.c0) AND (rt0.c0)))))AND((((rt0.c1, rt0.c3, rt0.c1, rt0.c2)) NOT BETWEEN ((rt0.c1, '', rt0.c3, rt0.c0)) AND ((rt0.c2, rt0.c1, 9.9367454E7, rt0.c3))))))AND((((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3))))>=((((rt0.c2)|('~h)')))))))) LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE ((((((vt1.c0, rt0.c1))<>((rt0.c3, rt0.c2)))) IS TRUE));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((((vt1.c0, rt0.c1))>((rt0.c3, rt0.c2)))) IS TRUE))AND(((((rt0.c0) ISNULL)) NOT NULL)))) ORDER BY ((- (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)), ((rt0.c3)|(rt0.c3)))), (((78570941, vt1.c0 COLLATE NOCASE, CAST(rt0.c0 AS INTEGER)))<>((((rt0.c3) BETWEEN (rt0.c0) AND (vt1.c0)), json_patch(rt0.c0, rt0.c3), ((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0))))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE UPPER(rt0.c1)  WHEN (~ (rt0.c0)) THEN CAST(rt0.c0 AS BLOB) WHEN ((0.3029904662643541) ISNULL) THEN ((rt0.c3)GLOB(rt0.c0)) WHEN (- (rt0.c2)) THEN ((0.7973443965013268) IS TRUE) ELSE (((rt0.c2))>=((rt0.c0))) END) ORDER BY ((- (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)), ((rt0.c3)|(rt0.c3)))), (((78570941, vt1.c0 COLLATE NOCASE, CAST(rt0.c0 AS INTEGER)))<>((((rt0.c3) BETWEEN (rt0.c0) AND (vt1.c0)), json_patch(rt0.c0, rt0.c3), ((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0))))) ASC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((((((vt1.c0, rt0.c1))<>((rt0.c3, rt0.c2)))) IS TRUE));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((((vt1.c0, rt0.c1))>((rt0.c3, rt0.c2)))) IS TRUE))AND(((((rt0.c0) ISNULL)) NOT NULL)))) ORDER BY ((- (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)), ((rt0.c3)|(rt0.c3)))), (((78570941, vt1.c0 COLLATE NOCASE, CAST(rt0.c0 AS INTEGER)))<>((((rt0.c3) BETWEEN (rt0.c0) AND (vt1.c0)), json_patch(rt0.c0, rt0.c3), ((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0))))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE UPPER(rt0.c1)  WHEN (~ (rt0.c0)) THEN CAST(rt0.c0 AS BLOB) WHEN ((0.3029904662643541) ISNULL) THEN ((rt0.c3)GLOB(rt0.c0)) WHEN (- (rt0.c2)) THEN ((0.7973443965013268) IS TRUE) ELSE (((rt0.c2))>=((rt0.c0))) END) ORDER BY ((- (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)), ((rt0.c3)|(rt0.c3)))), (((78570941, vt1.c0 COLLATE NOCASE, CAST(rt0.c0 AS INTEGER)))<>((((rt0.c3) BETWEEN (rt0.c0) AND (vt1.c0)), json_patch(rt0.c0, rt0.c3), ((vt1.c0) BETWEEN (rt0.c3) AND (vt1.c0))))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (rt0.c2) ORDER BY ((CAST(rt0.c0 AS NUMERIC))LIKE(NULL COLLATE NOCASE)) ASC  NULLS LAST, rt0.c0 ASC;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c2)AND((((((rt0.c3) IS FALSE), (NOT (rt0.c1)), CASE WHEN rt0.c2 THEN '7䗧-R~d)' WHEN rt0.c2 THEN rt0.c1 ELSE x'd5' END, ((((((rt0.c0)AND(rt0.c3)))AND(rt0.c0)))OR(rt0.c0))))>=((((((rt0.c3)AND(rt0.c0)))OR(rt0.c2)), rt0.c1, ((rt0.c3)/(rt0.c3)), ((rt0.c1) IS TRUE))))))) ORDER BY ((CAST(rt0.c0 AS NUMERIC))LIKE(NULL COLLATE NOCASE)) ASC  NULLS LAST, rt0.c0 ASC LIMIT 0x0;
SELECT * FROM rt0 WHERE (rt0.c2) ORDER BY ((CAST(rt0.c0 AS NUMERIC))LIKE(NULL COLLATE NOCASE)) ASC  NULLS LAST, rt0.c0 ASC;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c2)AND((((((rt0.c3) IS FALSE), (NOT (rt0.c1)), CASE WHEN rt0.c2 THEN '7䗧-R~d)' WHEN rt0.c2 THEN rt0.c1 ELSE x'd5' END, ((((((rt0.c0)AND(rt0.c3)))AND(rt0.c0)))OR(rt0.c0))))>=((((((rt0.c3)AND(rt0.c0)))OR(rt0.c2)), rt0.c1, ((rt0.c3)/(rt0.c3)), ((rt0.c1) IS TRUE))))))) ORDER BY ((CAST(rt0.c0 AS NUMERIC))LIKE(NULL COLLATE NOCASE)) ASC  NULLS LAST, rt0.c0 ASC LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE ((((0X5e1de36b, rt0.c1, rt0.c0, rt0.c0)) BETWEEN ((rt0.c1, rt0.c0, vt1.c0, rt0.c0)) AND ((rt0.c1, vt1.c0, x'97', vt1.c0))) COLLATE NOCASE) ORDER BY (('0.5592552979202217' IN ()) IN ()) DESC, ((((json_insert(vt1.c0, rt0.c3, rt0.c2, rt0.c0, rt0.c1))OR(CAST(vt1.c0 AS BLOB))))AND(CASE 0.6005947234803297  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 ELSE '-1512390894' END));
SELECT * FROM rt0, vt1 WHERE ((((((1579017067, rt0.c1, rt0.c0, rt0.c0)) BETWEEN ((rt0.c1, rt0.c0, vt1.c0, rt0.c0)) AND ((rt0.c1, vt1.c0, x'97', vt1.c0))) COLLATE NOCASE)AND(((((0.6251736134456705)<(rt0.c1))) IS FALSE)))) ORDER BY '-116899011', '*9g
' ASC, ((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)) COLLATE BINARY LIMIT 1;
SELECT * FROM rt0, vt1 WHERE ((((0X5e1de36b, rt0.c1, rt0.c0, rt0.c0)) BETWEEN ((rt0.c1, rt0.c0, vt1.c0, rt0.c0)) AND ((rt0.c1, vt1.c0, x'97', vt1.c0))) COLLATE NOCASE) ORDER BY (('0.5592552979202217' IN ()) IN ()) DESC, ((((json_insert(vt1.c0, rt0.c3, rt0.c2, rt0.c0, rt0.c1))OR(CAST(vt1.c0 AS BLOB))))AND(CASE 0.6005947234803297  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 ELSE '-1512390894' END));
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON ((CASE x''  WHEN 982536061 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE 0xfffffffffc7d7309 END) BETWEEN ((+ (rt0.c2))) AND ((+ (rt0.c0)))) WHERE (((((NULL)AND(rt0.c1 COLLATE RTRIM)))AND(((vt1.c0)OR(rt0.c0))))) ORDER BY ((rt0.c0) BETWEEN (CAST(rt0.c3 AS INTEGER)) AND (rtreenode(rt0.c0, 0.8829168737778161))) DESC  NULLS FIRST, (((rt0.c1, rt0.c1, rt0.c1)) BETWEEN ((CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 END, ((((((rt0.c3)OR(rt0.c0)))AND(rt0.c0)))AND(rt0.c1)), (((rt0.c0))==((rt0.c1))))) AND ((x'', ((rt0.c2) IS TRUE), ((rt0.c2)OR(rt0.c2))))) DESC;
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON ((CASE x''  WHEN 0X3a904f7d THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE 0Xfffffffffc7d7309 END) BETWEEN ((+ (rt0.c2))) AND ((+ (rt0.c0)))) WHERE (((((((NULL)AND(rt0.c1 COLLATE RTRIM)))AND(((vt1.c0)OR(rt0.c0)))))AND(TRIM(((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c3)))))) ORDER BY CAST((('571493127')IS NOT(rt0.c2)) AS INTEGER) ASC, CAST(((rt0.c2) IS FALSE) AS NUMERIC)  NULLS FIRST;
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE ((((rt0.c3)) BETWEEN ((((((((rt0.c0)OR(rt0.c2)))OR(vt1.c0)))AND(rt0.c1)))) AND ((0.3000741749506053))));
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE ((((rt0.c3)) BETWEEN ((((((((rt0.c0)OR(rt0.c2)))OR(vt1.c0)))AND(rt0.c1)))) AND ((0.3000741749506053)))) ORDER BY (NOT (CAST(rt0.c3 AS INTEGER)))  NULLS FIRST, rt0.c0 ASC LIMIT 0;
SELECT * FROM rt0 WHERE (((CAST(rt0.c3 AS INTEGER))<=(((rt0.c0)||(rt0.c0)))));
SELECT * FROM rt0 WHERE (((((CAST(rt0.c3 AS INTEGER))<=(((rt0.c0)||(rt0.c0)))))AND(((((rt0.c3)<>(rt0.c3))) BETWEEN ((- (rt0.c1))) AND (((rt0.c2) BETWEEN (rt0.c3) AND ('-1011287606'))))))) INTERSECT SELECT * FROM rt0 WHERE ((((CAST(rt0.c0 AS BLOB)))<=((CASE WHEN rt0.c0 THEN NULL END))));
SELECT * FROM rt0 WHERE (((CAST(rt0.c3 AS INTEGER))<=(((rt0.c0)||(rt0.c0)))));
SELECT * FROM rt0 WHERE (((((CAST(rt0.c3 AS INTEGER))<=(((rt0.c0)||(rt0.c0)))))AND(((((rt0.c3)<>(rt0.c3))) BETWEEN ((- (rt0.c1))) AND (((rt0.c2) BETWEEN (rt0.c3) AND ('-1011287606'))))))) INTERSECT SELECT * FROM rt0 WHERE ((((CAST(rt0.c0 AS BLOB)))<=((CASE WHEN rt0.c0 THEN NULL END))));
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((((rt0.c3, rt0.c3)) NOT BETWEEN ((LIKELIHOOD(DISTINCT vt1.c0, rt0.c1), (((rt0.c3, rt0.c0, rt0.c0))<((rt0.c3, rt0.c3, rt0.c2))))) AND (((((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, NULL)) AND ((rt0.c2, rt0.c2))), (~ (rt0.c0)))))) ORDER BY CASE STRFTIME(rt0.c1, rt0.c3, vt1.c0)  WHEN (rt0.c3 IN (rt0.c2)) THEN (((rt0.c3))>=((vt1.c0))) WHEN 1466001721 THEN ((rt0.c0)/(rt0.c1)) ELSE x'' END DESC, (((vt1.c0, NULL))>((rt0.c0, ((vt1.c0) IS FALSE)))) DESC  NULLS LAST;
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((((((rt0.c3, rt0.c3)) NOT BETWEEN ((LIKELIHOOD(DISTINCT vt1.c0, rt0.c1), (((rt0.c3, rt0.c0, rt0.c0))<>((rt0.c3, rt0.c3, rt0.c2))))) AND (((((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, NULL)) AND ((rt0.c2, rt0.c2))), (~ (rt0.c0))))))AND(rt0.c3))) ORDER BY CASE STRFTIME(rt0.c1, rt0.c3, vt1.c0)  WHEN (rt0.c3 IN (rt0.c2)) THEN (((rt0.c3))>=((vt1.c0))) WHEN 0X57616939 THEN ((rt0.c0)/(rt0.c1)) ELSE x'' END DESC, (((vt1.c0, NULL))>((rt0.c0, ((vt1.c0) IS FALSE)))) DESC  NULLS LAST LIMIT 0x1;
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (((((rt0.c2) BETWEEN (NULL) AND (rt0.c2))) BETWEEN ('C?' COLLATE RTRIM) AND (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c3)))));
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE (((((((rt0.c2) BETWEEN (NULL) AND (rt0.c2))) BETWEEN ('C?' COLLATE RTRIM) AND (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c3)))))AND(CAST(x'2f' AS NUMERIC)))) LIMIT 0X3;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c2, rt0.c0, vt1.c0)) BETWEEN ((1.10144383E9, vt1.c0, rt0.c2)) AND ((rt0.c2, vt1.c0, rt0.c2))))>(((rt0.c0) NOT NULL))));
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c2, rt0.c0, vt1.c0)) BETWEEN ((1.10144383E9, vt1.c0, rt0.c2)) AND ((rt0.c2, vt1.c0, rt0.c2))))>(((rt0.c0) NOT NULL)))) ORDER BY (NOT ((rt0.c2 IN (rt0.c0, rt0.c0))))  NULLS FIRST LIMIT 0x0;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c2, rt0.c0, vt1.c0)) BETWEEN ((1.10144383E9, vt1.c0, rt0.c2)) AND ((rt0.c2, vt1.c0, rt0.c2))))>(((rt0.c0) NOT NULL))));
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE ((((((rt0.c2, rt0.c0, vt1.c0)) BETWEEN ((1.10144383E9, vt1.c0, rt0.c2)) AND ((rt0.c2, vt1.c0, rt0.c2))))>(((rt0.c0) NOT NULL)))) ORDER BY (NOT ((rt0.c2 IN (rt0.c0, rt0.c0))))  NULLS FIRST LIMIT 0x0;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) BETWEEN (CAST(vt1.c0 AS BLOB)) AND (vt1.c0)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) BETWEEN (CAST(vt1.c0 AS BLOB)) AND (vt1.c0))) ORDER BY NULLIF(DISTINCT vt1.c0, CASE x'52d5'  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'bafr*N' END) ASC  NULLS LAST INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((- (vt1.c0)), json(vt1.c0)))=((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), NULL)))) ORDER BY NULLIF(DISTINCT vt1.c0, CASE x'52d5'  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'bafr*N' END) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (vt1.c0) ORDER BY CAST(((x'4a')AND(vt1.c0)) AS TEXT) ASC LIMIT 0x1;
SELECT ALL * FROM vt1, rt0 WHERE ((- (((rt0.c2)AND(rt0.c0))))) ORDER BY x'3b';
SELECT DISTINCT * FROM vt1, rt0 WHERE ((- (((rt0.c2)AND(rt0.c0))))) ORDER BY x'3b' LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((x'')OR((((rt0.c1, rt0.c2, rt0.c3, rt0.c1, rt0.c1, rt0.c1))<=((rt0.c0, rt0.c1, vt1.c0, rt0.c0, vt1.c0, rt0.c1)))))) ORDER BY x'3b' LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE ((- (((rt0.c2)AND(rt0.c0))))) ORDER BY x'3b';
SELECT DISTINCT * FROM vt1, rt0 WHERE ((- (((rt0.c2)AND(rt0.c0))))) ORDER BY x'3b' LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((x'')OR((((rt0.c1, rt0.c2, rt0.c3, rt0.c1, rt0.c1, rt0.c1))<=((rt0.c0, rt0.c1, vt1.c0, rt0.c0, vt1.c0, rt0.c1)))))) ORDER BY x'3b' LIMIT 1;
SELECT MAX(rt0.c0) FROM rt0 WHERE (((((((((rt0.c0)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c1)))AND(rt0.c1)) COLLATE RTRIM);
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (((((((((((rt0.c0)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c1)))AND(rt0.c1)) COLLATE RTRIM)AND((- ((~ (rt0.c2)))))));
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE ((NOT ((+ (rt0.c0))))) ORDER BY CASE ((rt0.c0)GLOB(rt0.c3))  WHEN vt1.c0 COLLATE RTRIM THEN ((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c2)) END  NULLS LAST;
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((NOT ((+ (rt0.c0))))) ORDER BY CAST(x'e3667a' AS NUMERIC) COLLATE BINARY DESC INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE (x'2052') ORDER BY CAST(x'e3667a' AS NUMERIC) COLLATE BINARY DESC;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2)+(rt0.c1))) NOT BETWEEN ((- (rt0.c1))) AND (vt1.c0 COLLATE NOCASE))) ORDER BY ((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c0)) COLLATE BINARY DESC, ((0.1479873907414725) IS FALSE) ASC;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c2)+(rt0.c1))) NOT BETWEEN ((- (rt0.c1))) AND (vt1.c0 COLLATE NOCASE))) ORDER BY ((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c0)) COLLATE BINARY DESC, ((0.1479873907414725) IS FALSE) ASC;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2)+(rt0.c1))) NOT BETWEEN ((- (rt0.c1))) AND (vt1.c0 COLLATE NOCASE))) ORDER BY ((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c0)) COLLATE BINARY DESC, ((0.1479873907414725) IS FALSE) ASC;
SELECT ALL * FROM rt0, vt1 WHERE (((((rt0.c2)+(rt0.c1))) NOT BETWEEN ((- (rt0.c1))) AND (vt1.c0 COLLATE NOCASE))) ORDER BY ((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c0)) COLLATE BINARY DESC, ((0.1479873907414725) IS FALSE) ASC;
SELECT ALL * FROM rt0 WHERE ((((((rt0.c3, rt0.c1))>((rt0.c3, rt0.c2))))>=((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c2)) AND ((rt0.c3, rt0.c1)))))) ORDER BY ((((((((((((rt0.c2)||(rt0.c2)))OR(x'4f1699')))OR((+ (rt0.c1)))))AND('')))OR(((rt0.c2)IS(rt0.c1)))))AND(((rt0.c2)IS(rt0.c2)))) DESC;
SELECT * FROM rt0 WHERE ((((((((rt0.c3, rt0.c1))>((rt0.c3, rt0.c2))))>((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c2)) AND ((rt0.c3, rt0.c1))))))AND((((x'', (- (rt0.c1))))=((((((((((((((rt0.c2)AND(rt0.c2)))AND(rt0.c3)))AND(rt0.c3)))OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c3)), ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c0)))))))) ORDER BY ((((((((((((rt0.c2)||(rt0.c2)))OR(x'4f1699')))OR((+ (rt0.c1)))))AND('')))OR(((rt0.c2)IS(rt0.c1)))))AND(((rt0.c2)IS(rt0.c2)))) DESC LIMIT 4 INTERSECT SELECT ALL * FROM rt0 WHERE (UPPER((((rt0.c2)) BETWEEN ((rt0.c2)) AND ((rt0.c1))))) ORDER BY ((((((((((((rt0.c2)||(rt0.c2)))OR(x'4f1699')))OR((+ (rt0.c1)))))AND('')))OR(((rt0.c2)IS(rt0.c1)))))AND(((rt0.c2)IS(rt0.c2)))) DESC LIMIT 0X4;
SELECT ALL * FROM rt0 WHERE ((((((rt0.c3, rt0.c1))>((rt0.c3, rt0.c2))))>=((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c2)) AND ((rt0.c3, rt0.c1)))))) ORDER BY ((((((((((((rt0.c2)||(rt0.c2)))OR(x'4f1699')))OR((+ (rt0.c1)))))AND('')))OR(((rt0.c2)IS(rt0.c1)))))AND(((rt0.c2)IS(rt0.c2)))) DESC;
SELECT * FROM rt0 WHERE ((((((((rt0.c3, rt0.c1))>((rt0.c3, rt0.c2))))>((((rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c2)) AND ((rt0.c3, rt0.c1))))))AND((((x'', (- (rt0.c1))))=((((((((((((((rt0.c2)AND(rt0.c2)))AND(rt0.c3)))AND(rt0.c3)))OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c3)), ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c0)))))))) ORDER BY ((((((((((((rt0.c2)||(rt0.c2)))OR(x'4f1699')))OR((+ (rt0.c1)))))AND('')))OR(((rt0.c2)IS(rt0.c1)))))AND(((rt0.c2)IS(rt0.c2)))) DESC LIMIT 4 INTERSECT SELECT ALL * FROM rt0 WHERE (UPPER((((rt0.c2)) BETWEEN ((rt0.c2)) AND ((rt0.c1))))) ORDER BY ((((((((((((rt0.c2)||(rt0.c2)))OR(x'4f1699')))OR((+ (rt0.c1)))))AND('')))OR(((rt0.c2)IS(rt0.c1)))))AND(((rt0.c2)IS(rt0.c2)))) DESC LIMIT 0X4;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(NULL)))AND(vt1.c0)))AND(vt1.c0)) IN (vt1.c0, ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(NULL)))AND(vt1.c0)))AND(vt1.c0)) IN (vt1.c0, ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(ABS((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))))))) LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (NULL) LIMIT 0x0;
SELECT * FROM rt0 WHERE (x'') ORDER BY ((rt0.c3) BETWEEN (((((((rt0.c2)AND('[n\.')))AND(rt0.c3)))OR(rt0.c1))) AND (((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c3))))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (x'') ORDER BY ((rt0.c3) BETWEEN (((((((rt0.c2)AND('[n\.')))AND(rt0.c3)))OR(rt0.c1))) AND (((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c3))))  NULLS FIRST;
SELECT * FROM rt0 WHERE (x'') ORDER BY ((rt0.c3) BETWEEN (((((((rt0.c2)AND('[n\.')))AND(rt0.c3)))OR(rt0.c1))) AND (((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c3))))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (x'') ORDER BY ((rt0.c3) BETWEEN (((((((rt0.c2)AND('[n\.')))AND(rt0.c3)))OR(rt0.c1))) AND (((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c3))))  NULLS FIRST;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((- ((NOT (rt0.c0))))) ORDER BY rt0.c0 DESC, '' ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE ((- ((NOT (rt0.c0))))) ORDER BY (((rt0.c0)) NOT BETWEEN ((rt0.c1 COLLATE RTRIM)) AND ((rt0.c1)))  NULLS LAST, (+ (rtreenode(rt0.c0, rt0.c1)))  NULLS FIRST, vt1.c0 DESC;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((- ((NOT (rt0.c0))))) ORDER BY rt0.c0 DESC, '' ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE ((- ((NOT (rt0.c0))))) ORDER BY (((rt0.c0)) NOT BETWEEN ((rt0.c1 COLLATE RTRIM)) AND ((rt0.c1)))  NULLS LAST, (+ (rtreenode(rt0.c0, rt0.c1)))  NULLS FIRST, vt1.c0 DESC;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c1)||(rt0.c0))))>((((vt1.c0)LIKE(rt0.c2)))))) ORDER BY rt0.c0 DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c1)||(rt0.c0))))>((((vt1.c0)LIKE(rt0.c2)))))) ORDER BY (((((vt1.c0) ISNULL), rt0.c1 COLLATE BINARY))>=(((rt0.c3 IN (rt0.c0)), rt0.c3 COLLATE BINARY)))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c2) NOTNULL))>=(((rt0.c1)GLOB(rt0.c3))))) ORDER BY (((((vt1.c0) ISNULL), rt0.c1 COLLATE BINARY))>=(((rt0.c3 IN (rt0.c0)), rt0.c3 COLLATE BINARY)))  NULLS FIRST LIMIT 0x1;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c1)||(rt0.c0))))>((((vt1.c0)LIKE(rt0.c2)))))) ORDER BY rt0.c0 DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c1)||(rt0.c0))))>((((vt1.c0)LIKE(rt0.c2)))))) ORDER BY (((((vt1.c0) ISNULL), rt0.c1 COLLATE BINARY))>=(((rt0.c3 IN (rt0.c0)), rt0.c3 COLLATE BINARY)))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((((rt0.c2) NOTNULL))>=(((rt0.c1)GLOB(rt0.c3))))) ORDER BY (((((vt1.c0) ISNULL), rt0.c1 COLLATE BINARY))>=(((rt0.c3 IN (rt0.c0)), rt0.c3 COLLATE BINARY)))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM rt0 WHERE ((((LIKELY(DISTINCT rt0.c2), CAST(rt0.c2 AS REAL), (rt0.c1 IN (rt0.c1))))>=(((rt0.c0 IN ()), UNLIKELY(rt0.c1), rt0.c3))));
SELECT ALL * FROM rt0 WHERE ((((LIKELY(DISTINCT rt0.c2), CAST(rt0.c2 AS REAL), (rt0.c1 IN (rt0.c1))))==(((rt0.c0 IN ()), UNLIKELY(rt0.c1), rt0.c3)))) LIMIT 1 INTERSECT SELECT * FROM rt0 WHERE (((((((((rt0.c1)AND(json_object(rt0.c1, rt0.c0))))OR(rt0.c0)))OR((rt0.c0 IN (0.2688747100189197, rt0.c3)))))OR(((((((rt0.c2)AND(rt0.c0)))OR(rt0.c1)))OR('-1705485783'))))) LIMIT 1;
SELECT ALL * FROM rt0 WHERE ((((LIKELY(DISTINCT rt0.c2), CAST(rt0.c2 AS REAL), (rt0.c1 IN (rt0.c1))))>=(((rt0.c0 IN ()), UNLIKELY(rt0.c1), rt0.c3))));
SELECT ALL * FROM rt0 WHERE ((((LIKELY(DISTINCT rt0.c2), CAST(rt0.c2 AS REAL), (rt0.c1 IN (rt0.c1))))==(((rt0.c0 IN ()), UNLIKELY(rt0.c1), rt0.c3)))) LIMIT 1 INTERSECT SELECT * FROM rt0 WHERE (((((((((rt0.c1)AND(json_object(rt0.c1, rt0.c0))))OR(rt0.c0)))OR((rt0.c0 IN (0.2688747100189197, rt0.c3)))))OR(((((((rt0.c2)AND(rt0.c0)))OR(rt0.c1)))OR('-1705485783'))))) LIMIT 1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((- (vt1.c0)) IN (((((vt1.c0)AND(-4.9961951E8)))AND(vt1.c0)))) DESC  NULLS LAST, (((((((vt1.c0 IN (vt1.c0)))OR(NULL)))AND(CAST(vt1.c0 AS NUMERIC))))OR(0Xffffffffc06ba8d6)) ASC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((- (vt1.c0)) IN (((((vt1.c0)AND(-4.9961951E8)))AND(vt1.c0)))) DESC  NULLS LAST, (((((((vt1.c0 IN (vt1.c0)))OR(NULL)))AND(CAST(vt1.c0 AS NUMERIC))))OR(0xffffffffc06ba8d6)) ASC  NULLS LAST LIMIT 0X3 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0 IN (0xfffffffffd995568)) IN ((vt1.c0 IN ('%0', vt1.c0))))) ORDER BY ((- (vt1.c0)) IN (((((vt1.c0)AND(-4.9961951E8)))AND(vt1.c0)))) DESC  NULLS LAST, (((((((vt1.c0 IN (vt1.c0)))OR(NULL)))AND(CAST(vt1.c0 AS NUMERIC))))OR(-1066686250)) ASC  NULLS LAST LIMIT 3;
SELECT COUNT(*) FROM vt1, rt0 WHERE (CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 END THEN ((rt0.c1)<(rt0.c2)) END) ORDER BY ((((((vt1.c0)AND(rt0.c2)))OR(vt1.c0))) NOT BETWEEN (((rt0.c2)>(rt0.c3))) AND (json_array_length(rt0.c2)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((CASE WHEN CASE WHEN rt0.c1 THEN vt1.c0 END THEN ((rt0.c1)<(rt0.c2)) END)AND((((vt1.c0, rt0.c0))>(((('')%('-620300780')), TIME(x'676079', rt0.c1, vt1.c0, x'4d', rt0.c0, rt0.c2, rt0.c2))))))) ORDER BY CAST(CASE vt1.c0  WHEN rt0.c2 THEN 0.32216544042866524 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c1 END AS TEXT), (NOT (((rt0.c1) NOT NULL)))  NULLS FIRST, (- (NULLIF(rt0.c2, rt0.c1))) LIMIT 0;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((((rt0.c1)) BETWEEN ((((rt0.c2)<=(rt0.c1)))) AND ((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1)))))) ORDER BY (NOT ('1615813425'))  NULLS LAST, (((0.6470306431942062 IN ()))&((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c3)))))  NULLS LAST;
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE ((((rt0.c1)) BETWEEN ((((rt0.c2)<=(rt0.c1)))) AND ((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1)))))) ORDER BY (NOT ('1615813425'))  NULLS LAST, (((0.6470306431942062 IN ()))&((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c3)))))  NULLS LAST INTERSECT SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)))GLOB(((rt0.c0) IS TRUE)))) ORDER BY (NOT ('1615813425'))  NULLS LAST, (((0.6470306431942062 IN ()))&((((rt0.c0)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c3)))))  NULLS LAST;
SELECT COUNT(*) FROM vt1, rt0 WHERE (vt1.c0);
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((vt1.c0)AND(((CASE vt1.c0  WHEN rt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c2 END)GLOB(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c0 END))))) ORDER BY PRINTF((NOT (rt0.c0))) ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE (load_extension(rt0.c0) COLLATE NOCASE) ORDER BY CASE WHEN ((1606536889) NOT BETWEEN (rt0.c1) AND (vt1.c0)) THEN vt1.c0 COLLATE NOCASE ELSE CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c0 END END, (((vt1.c0)) BETWEEN (((+ (rt0.c2)))) AND ((CAST(x'05ce4f' AS TEXT))))  NULLS FIRST, CASE (((((((((('0.33530788234020314')AND(vt1.c0)))OR(vt1.c0)))AND(rt0.c3)))AND(rt0.c2)))OR(rt0.c1))  WHEN (~ (vt1.c0)) THEN '941635151' WHEN (- (rt0.c3)) THEN (rt0.c2 IN (rt0.c2, rt0.c0)) WHEN ((rt0.c2)%(vt1.c0)) THEN (((vt1.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))) END  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE (((load_extension(rt0.c0) COLLATE NOCASE)AND(((((rt0.c3) IS TRUE)) BETWEEN (((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c1))) AND ('5]s/'))))) ORDER BY CASE WHEN ((1606536889) NOT BETWEEN (rt0.c1) AND (vt1.c0)) THEN vt1.c0 COLLATE NOCASE ELSE CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c0 END END, (((vt1.c0)) BETWEEN (((+ (rt0.c2)))) AND ((CAST(x'05ce4f' AS TEXT))))  NULLS FIRST, CASE (((((((((('0.33530788234020314')AND(vt1.c0)))OR(vt1.c0)))AND(rt0.c3)))AND(rt0.c2)))OR(rt0.c1))  WHEN (~ (vt1.c0)) THEN '941635151' WHEN (- (rt0.c3)) THEN (rt0.c2 IN (rt0.c2, rt0.c0)) WHEN ((rt0.c2)%(vt1.c0)) THEN (((vt1.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))) END  NULLS FIRST LIMIT 0x2;
SELECT * FROM rt0, vt1 WHERE (load_extension(rt0.c0) COLLATE NOCASE) ORDER BY CASE WHEN ((1606536889) NOT BETWEEN (rt0.c1) AND (vt1.c0)) THEN vt1.c0 COLLATE NOCASE ELSE CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c0 END END, (((vt1.c0)) BETWEEN (((+ (rt0.c2)))) AND ((CAST(x'05ce4f' AS TEXT))))  NULLS FIRST, CASE (((((((((('0.33530788234020314')AND(vt1.c0)))OR(vt1.c0)))AND(rt0.c3)))AND(rt0.c2)))OR(rt0.c1))  WHEN (~ (vt1.c0)) THEN '941635151' WHEN (- (rt0.c3)) THEN (rt0.c2 IN (rt0.c2, rt0.c0)) WHEN ((rt0.c2)%(vt1.c0)) THEN (((vt1.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))) END  NULLS FIRST;
SELECT ALL MAX(rt0.c3) FROM rt0 NATURAL JOIN vt1 WHERE (((CASE WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END)>(CAST(rt0.c1 AS TEXT)))) ORDER BY 'ZAI^콀' DESC  NULLS LAST, (~ ((NOT (rt0.c2))))  NULLS LAST;
SELECT DISTINCT MAX(rt0.c3) FROM rt0 NATURAL JOIN vt1 WHERE (((((CASE WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END)>(CAST(rt0.c1 AS TEXT))))AND((((- (rt0.c2)))||(((vt1.c0) IS TRUE)))))) ORDER BY (((((rt0.c2))<((rt0.c1)))) NOT BETWEEN (CASE WHEN vt1.c0 THEN x'' WHEN rt0.c0 THEN vt1.c0 ELSE vt1.c0 END) AND (x'8339'))  NULLS FIRST, rt0.c1 DESC  NULLS FIRST;
SELECT COUNT(*) FROM rt0 WHERE (((((((((((rt0.c1)&(rt0.c3)))AND(CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END)))OR((rt0.c3 IN ()))))AND((((rt0.c0, rt0.c2, rt0.c0))>=((rt0.c0, rt0.c0, rt0.c0))))))OR((('-1351200135') IS FALSE))));
SELECT COUNT(*) FROM rt0 WHERE (((((((((((rt0.c1)&(rt0.c3)))AND(CASE WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c2 END)))OR((rt0.c3 IN ()))))AND((((rt0.c0, rt0.c2, rt0.c0))>=((rt0.c0, rt0.c0, rt0.c0))))))OR((('-1351200135') IS FALSE)))) ORDER BY ((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 END) IS TRUE)  NULLS LAST, ((ABS(rt0.c0))/(((((((rt0.c0)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)))) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE ((NOT (rt0.c2)));
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE ((((NOT (rt0.c2)))AND('709578335')));
SELECT * FROM rt0 WHERE ((~ ((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))));
SELECT * FROM rt0 WHERE ((~ ((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c2)))))) ORDER BY '168766846' INTERSECT SELECT ALL * FROM rt0 WHERE (((0.20750068856130444)||(LIKELIHOOD(rt0.c1, rt0.c1)))) ORDER BY '168766846';
SELECT * FROM rt0 WHERE ((~ ((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c2))))));
SELECT * FROM rt0 WHERE ((~ ((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c2)))))) ORDER BY '168766846' INTERSECT SELECT ALL * FROM rt0 WHERE (((0.20750068856130444)||(LIKELIHOOD(rt0.c1, rt0.c1)))) ORDER BY '168766846';
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE vt1.c0 COLLATE BINARY  WHEN LIKELIHOOD(DISTINCT vt1.c0, vt1.c0) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN vt1.c0 THEN ((((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) END);
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE vt1.c0 COLLATE BINARY  WHEN LIKELIHOOD(DISTINCT vt1.c0, vt1.c0) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN vt1.c0 THEN ((((((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) END) ORDER BY ((((vt1.c0) NOT NULL)) BETWEEN ((~ (vt1.c0))) AND ((((0.10796129417525713, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, '168766846', vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)))))  NULLS LAST LIMIT 2;
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (((CAST(vt1.c0 AS NUMERIC)) BETWEEN (((rt0.c3)GLOB(rt0.c0))) AND (CAST(rt0.c0 AS INTEGER)))) ORDER BY (((vt1.c0 IN ())) NOTNULL);
SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE (((((CAST(vt1.c0 AS NUMERIC)) BETWEEN (((rt0.c3)GLOB(rt0.c0))) AND (CAST(rt0.c0 AS INTEGER))))AND('1270470802'))) ORDER BY vt1.c0 ASC  NULLS FIRST, ((((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c2))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3))) AND (((rt0.c0)>=('짌')))) ASC  NULLS LAST LIMIT 0X3 INTERSECT SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE ((~ (((rt0.c3)-(rt0.c1))))) ORDER BY vt1.c0 ASC  NULLS FIRST, ((((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c2))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3))) AND (((rt0.c0)>=('짌')))) ASC  NULLS LAST LIMIT 0x3;
SELECT MIN(vt1.c0) FROM rt0, vt1 WHERE ((((+ (rt0.c0)))<=(((rt0.c1)%('q')))));
SELECT MIN(vt1.c0) FROM rt0, vt1 WHERE ((((((+ (rt0.c0)))=(((rt0.c1)%('q')))))AND((((- (vt1.c0))) BETWEEN (CAST(vt1.c0 AS BLOB)) AND ((vt1.c0 IN (vt1.c0, rt0.c1, rt0.c2)))))));
SELECT * FROM rt0 WHERE (NULL) ORDER BY TYPEOF(((rt0.c3) NOT BETWEEN ('') AND (rt0.c3))) DESC, ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 END) ISNULL) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((NULL)AND(((((rt0.c1) NOT BETWEEN ('53ずxL') AND (rt0.c2))) BETWEEN ('3508589') AND (rt0.c3 COLLATE BINARY))))) ORDER BY TYPEOF(((rt0.c3) NOT BETWEEN ('') AND (rt0.c3))) DESC, ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 END) ISNULL) ASC;
SELECT * FROM rt0 WHERE (NULL) ORDER BY TYPEOF(((rt0.c3) NOT BETWEEN ('') AND (rt0.c3))) DESC, ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 END) ISNULL) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((NULL)AND(((((rt0.c1) NOT BETWEEN ('53ずxL') AND (rt0.c2))) BETWEEN ('3508589') AND (rt0.c3 COLLATE BINARY))))) ORDER BY TYPEOF(((rt0.c3) NOT BETWEEN ('') AND (rt0.c3))) DESC, ((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 END) ISNULL) ASC;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND ('&BI_'))) IS TRUE)) ORDER BY ((((((vt1.c0)OR(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))AND(((vt1.c0) BETWEEN (-1.806375176E9) AND (vt1.c0)))))OR(((vt1.c0) IS TRUE))) ASC;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND ('&BI_'))) IS TRUE)) ORDER BY ((((((vt1.c0)OR(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))AND(((vt1.c0) BETWEEN (-1.806375176E9) AND (vt1.c0)))))OR(((vt1.c0) IS TRUE))) ASC INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0) IS FALSE) IN ())) ORDER BY ((((((vt1.c0)OR(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))AND(((vt1.c0) BETWEEN (-1.806375176E9) AND (vt1.c0)))))OR(((vt1.c0) IS TRUE))) ASC;
SELECT ALL * FROM vt1 WHERE ((((((NULL))>((vt1.c0)))) IS TRUE)) ORDER BY '-1e500' DESC, ((((vt1.c0)|('1'))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c0)/(vt1.c0))))  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((NULL))>((vt1.c0)))) IS TRUE)) ORDER BY '-1e500' DESC, ((((vt1.c0)|('1'))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c0)/(vt1.c0))))  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0))<((vt1.c0)))) BETWEEN (vt1.c0) AND (((vt1.c0)=(vt1.c0))))) ORDER BY '-1e500' DESC, ((((vt1.c0)|('1'))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c0)/(vt1.c0))))  NULLS LAST LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE ((((((NULL))>((vt1.c0)))) IS TRUE)) ORDER BY '-1e500' DESC, ((((vt1.c0)|('1'))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c0)/(vt1.c0))))  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((NULL))>((vt1.c0)))) IS TRUE)) ORDER BY '-1e500' DESC, ((((vt1.c0)|('1'))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c0)/(vt1.c0))))  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0))<((vt1.c0)))) BETWEEN (vt1.c0) AND (((vt1.c0)=(vt1.c0))))) ORDER BY '-1e500' DESC, ((((vt1.c0)|('1'))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c0)/(vt1.c0))))  NULLS LAST LIMIT 0X2;
SELECT * FROM vt1, rt0 WHERE (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE NOCASE) ORDER BY (((vt1.c0)) BETWEEN ((CAST(455756160 AS TEXT))) AND (((((rt0.c2, 0.11818418251357643))>((rt0.c2, vt1.c0)))))) DESC, ((~ (rt0.c2)) IN (((rt0.c0)<<(rt0.c3))))  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE NOCASE)AND('1896110329'))) ORDER BY (((vt1.c0)) BETWEEN ((CAST(455756160 AS TEXT))) AND (((((rt0.c2, 0.11818418251357643))>((rt0.c2, vt1.c0)))))) DESC, ((~ (rt0.c2)) IN (((rt0.c0)<<(rt0.c3))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c1, rt0.c2, rt0.c1, vt1.c0, rt0.c1)) BETWEEN ((((rt0.c0) NOTNULL), 0.3312974730958944, ((rt0.c2) BETWEEN (NULL) AND (rt0.c2)), ((1.508769651E9) NOT BETWEEN (rt0.c2) AND (vt1.c0)), CASE rt0.c0  WHEN rt0.c3 THEN vt1.c0 END)) AND ((((NULL) NOTNULL), rt0.c2, LOWER(DISTINCT rt0.c2), ((NULL) NOT BETWEEN (rt0.c0) AND (rt0.c0)), ((rt0.c0)*(rt0.c0)))))) ORDER BY (((vt1.c0)) BETWEEN ((CAST(455756160 AS TEXT))) AND (((((rt0.c2, 0.11818418251357643))>((rt0.c2, vt1.c0)))))) DESC, ((~ (rt0.c2)) IN (((rt0.c0)<<(rt0.c3))))  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE NOCASE) ORDER BY (((vt1.c0)) BETWEEN ((CAST(455756160 AS TEXT))) AND (((((rt0.c2, 0.11818418251357643))>((rt0.c2, vt1.c0)))))) DESC, ((~ (rt0.c2)) IN (((rt0.c0)<<(rt0.c3))))  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE NOCASE)AND('1896110329'))) ORDER BY (((vt1.c0)) BETWEEN ((CAST(455756160 AS TEXT))) AND (((((rt0.c2, 0.11818418251357643))>((rt0.c2, vt1.c0)))))) DESC, ((~ (rt0.c2)) IN (((rt0.c0)<<(rt0.c3))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((((rt0.c1, rt0.c2, rt0.c1, vt1.c0, rt0.c1)) BETWEEN ((((rt0.c0) NOTNULL), 0.3312974730958944, ((rt0.c2) BETWEEN (NULL) AND (rt0.c2)), ((1.508769651E9) NOT BETWEEN (rt0.c2) AND (vt1.c0)), CASE rt0.c0  WHEN rt0.c3 THEN vt1.c0 END)) AND ((((NULL) NOTNULL), rt0.c2, LOWER(DISTINCT rt0.c2), ((NULL) NOT BETWEEN (rt0.c0) AND (rt0.c0)), ((rt0.c0)*(rt0.c0)))))) ORDER BY (((vt1.c0)) BETWEEN ((CAST(455756160 AS TEXT))) AND (((((rt0.c2, 0.11818418251357643))>((rt0.c2, vt1.c0)))))) DESC, ((~ (rt0.c2)) IN (((rt0.c0)<<(rt0.c3))))  NULLS LAST;
SELECT ALL MIN(rt0.c0) FROM vt1 CROSS JOIN rt0 ON rt0.c0 COLLATE NOCASE WHERE (((rt0.c1 IN (NULL)) IN ())) ORDER BY CASE WHEN ((rt0.c3)>>(rt0.c1)) THEN rt0.c3 WHEN (+ (rt0.c1)) THEN rt0.c1 ELSE 0xffffffffeaf3b771 END ASC  NULLS FIRST;
SELECT MIN(rt0.c0) FROM vt1 CROSS JOIN rt0 ON rt0.c0 COLLATE NOCASE WHERE (((rt0.c1 IN (NULL)) IN ())) ORDER BY CASE WHEN ((rt0.c3)>>(rt0.c1)) THEN rt0.c3 WHEN (+ (rt0.c1)) THEN rt0.c1 ELSE 0Xffffffffeaf3b771 END ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON UNLIKELY(vt1.c0) WHERE (CASE WHEN (rt0.c0 IN ()) THEN rt0.c3 COLLATE NOCASE ELSE CAST(rt0.c3 AS INTEGER) END) ORDER BY ((((('] ' IN (rt0.c1)))AND(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c1)))))AND(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c1))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON UNLIKELY(vt1.c0) WHERE (CASE WHEN (rt0.c0 IN ()) THEN rt0.c3 COLLATE NOCASE ELSE CAST(rt0.c3 AS INTEGER) END) ORDER BY ((((('] ' IN (rt0.c1)))AND(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c1)))))AND(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c1))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON UNLIKELY(vt1.c0) WHERE (CASE WHEN (rt0.c0 IN ()) THEN rt0.c3 COLLATE NOCASE ELSE CAST(rt0.c3 AS INTEGER) END) ORDER BY ((((('] ' IN (rt0.c1)))AND(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c1)))))AND(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c1))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON UNLIKELY(vt1.c0) WHERE (CASE WHEN (rt0.c0 IN ()) THEN rt0.c3 COLLATE NOCASE ELSE CAST(rt0.c3 AS INTEGER) END) ORDER BY ((((('] ' IN (rt0.c1)))AND(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c1)))))AND(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c1))));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((vt1.c0, '1504116959', rt0.c2)) BETWEEN (((- (rt0.c0)), (((rt0.c1, rt0.c2, x'3672cd')) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c1)) AND ((vt1.c0, rt0.c1, vt1.c0))), vt1.c0)) AND (((- (rt0.c3)), (((rt0.c2, vt1.c0, rt0.c0, rt0.c2))<((rt0.c0, vt1.c0, rt0.c3, rt0.c3))), (((rt0.c0, rt0.c1, -1020664103, vt1.c0, rt0.c3))=((rt0.c2, '', rt0.c0, rt0.c1, vt1.c0)))))));
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((((vt1.c0, '1504116959', rt0.c2)) BETWEEN (((- (rt0.c0)), (((rt0.c1, rt0.c2, x'3672cd')) NOT BETWEEN ((rt0.c2, rt0.c3, rt0.c1)) AND ((vt1.c0, rt0.c1, vt1.c0))), vt1.c0)) AND (((- (rt0.c3)), (((rt0.c2, vt1.c0, rt0.c0, rt0.c2))<((rt0.c0, vt1.c0, rt0.c3, rt0.c3))), (((rt0.c0, rt0.c1, -1020664103, vt1.c0, rt0.c3))=((rt0.c2, '', rt0.c0, rt0.c1, vt1.c0)))))))AND(((('cᜢ'))>=(((+ (rt0.c0)))))))) ORDER BY (NOT (((rt0.c1)IS NOT(rt0.c1)))) INTERSECT SELECT COUNT(*) FROM vt1, rt0 WHERE (CASE ((((((((rt0.c3)OR(rt0.c1)))OR(rt0.c0)))OR('')))OR(rt0.c2))  WHEN (('')>>(rt0.c2)) THEN (((rt0.c2, vt1.c0))==((rt0.c3, rt0.c1))) ELSE (('1325005983') NOT BETWEEN (rt0.c0) AND (rt0.c2)) END) ORDER BY (NOT (((rt0.c1)IS NOT(rt0.c1))));
SELECT * FROM rt0, vt1 WHERE (((LTRIM(rt0.c3)) IS FALSE));
SELECT * FROM rt0, vt1 WHERE (((((LTRIM(rt0.c3)) IS FALSE))AND(CAST(CASE vt1.c0  WHEN rt0.c1 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 ELSE '' END AS TEXT)))) ORDER BY LIKELIHOOD(DISTINCT CAST(rt0.c1 AS BLOB), ((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3)))  NULLS LAST, (- ((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c1)))))  NULLS LAST LIMIT 2 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((((rt0.c3)/(vt1.c0)))AND(((rt0.c3)LIKE(rt0.c2)))))OR(((rt0.c2)>=(rt0.c0))))) ORDER BY LIKELIHOOD(DISTINCT CAST(rt0.c1 AS BLOB), ((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3)))  NULLS LAST, (- ((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c1)))))  NULLS LAST LIMIT 2;
SELECT * FROM rt0, vt1 WHERE (((LTRIM(rt0.c3)) IS FALSE));
SELECT * FROM rt0, vt1 WHERE (((((LTRIM(rt0.c3)) IS FALSE))AND(CAST(CASE vt1.c0  WHEN rt0.c1 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN vt1.c0 ELSE '' END AS TEXT)))) ORDER BY LIKELIHOOD(DISTINCT CAST(rt0.c1 AS BLOB), ((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3)))  NULLS LAST, (- ((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c1)))))  NULLS LAST LIMIT 2 INTERSECT SELECT * FROM rt0, vt1 WHERE (((((((rt0.c3)/(vt1.c0)))AND(((rt0.c3)LIKE(rt0.c2)))))OR(((rt0.c2)>=(rt0.c0))))) ORDER BY LIKELIHOOD(DISTINCT CAST(rt0.c1 AS BLOB), ((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c3)))  NULLS LAST, (- ((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c1)))))  NULLS LAST LIMIT 2;
SELECT MIN(rt0.c1) FROM rt0 WHERE (rt0.c1);
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (rt0.c1) ORDER BY '\Y' DESC  NULLS FIRST, (((rt0.c3, rt0.c0, rt0.c3)) BETWEEN (((rt0.c3 IN ()), ((rt0.c2)||(0.4492702086008252)), ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)))) AND (((rt0.c1 IN ()), CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c2 END, ((rt0.c1)<<(rt0.c1))))) ASC  NULLS LAST INTERSECT SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (((((((((rt0.c1)>=(rt0.c1)))OR('-1469812196' COLLATE BINARY)))AND((- (rt0.c0)))))OR(INSTR(0.9478832318715444, rt0.c3)))) ORDER BY '\Y' DESC  NULLS FIRST, (((rt0.c3, rt0.c0, rt0.c3)) BETWEEN (((rt0.c3 IN ()), ((rt0.c2)||(0.4492702086008252)), ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)))) AND (((rt0.c1 IN ()), CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c2 END, ((rt0.c1)<<(rt0.c1))))) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((rt0.c1 IN (rt0.c3))) IS FALSE)) ORDER BY ((((((rt0.c0 COLLATE BINARY)OR(((rt0.c3)LIKE(rt0.c2)))))AND(HEX(DISTINCT rt0.c0))))AND(((rt0.c1)IS NOT(rt0.c3)))) ASC;
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c1 IN (rt0.c3))) IS FALSE)) ORDER BY ((((rt0.c2)OR(rt0.c1 COLLATE BINARY)))OR(COALESCE(rt0.c2, rt0.c2, rt0.c1))) ASC, rt0.c1 DESC LIMIT 3;
SELECT ALL * FROM rt0 WHERE ((((rt0.c1 IN (rt0.c3))) IS FALSE)) ORDER BY ((((((rt0.c0 COLLATE BINARY)OR(((rt0.c3)LIKE(rt0.c2)))))AND(HEX(DISTINCT rt0.c0))))AND(((rt0.c1)IS NOT(rt0.c3)))) ASC;
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c1 IN (rt0.c3))) IS FALSE)) ORDER BY ((((rt0.c2)OR(rt0.c1 COLLATE BINARY)))OR(COALESCE(rt0.c2, rt0.c2, rt0.c1))) ASC, rt0.c1 DESC LIMIT 3;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))OR(0.039254586545424575)))OR(vt1.c0)))>>(TRIM(vt1.c0, vt1.c0))));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))OR(0.039254586545424575)))OR(vt1.c0)))>>(TRIM(vt1.c0, vt1.c0))))AND(((CASE WHEN vt1.c0 THEN vt1.c0 END)IS NOT(((((vt1.c0)AND(vt1.c0)))OR(0.45231608369739085))))))) LIMIT 2 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (UNLIKELY(CAST(vt1.c0 AS TEXT))) LIMIT 2;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c3)) NOT BETWEEN (((~ (rt0.c3)))) AND ((CASE rt0.c0  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END)))) ORDER BY UPPER(DISTINCT 'F'), CASE WHEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (vt1.c0)) THEN (rt0.c3 IN (rt0.c3)) WHEN CASE rt0.c1  WHEN rt0.c3 THEN '1650063693' WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END THEN HEX(DISTINCT rt0.c0) WHEN (~ ('709578335')) THEN rt0.c0 END ASC, ((((((vt1.c0)OR(vt1.c0)))OR(rt0.c1))) BETWEEN ((((vt1.c0))>((rt0.c3)))) AND (((rt0.c0)>(rt0.c1)))) DESC;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c3)) NOT BETWEEN (((~ (rt0.c3)))) AND ((CASE rt0.c0  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END)))) ORDER BY UPPER(DISTINCT 'F'), CASE WHEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (vt1.c0)) THEN (rt0.c3 IN (rt0.c3)) WHEN CASE rt0.c1  WHEN rt0.c3 THEN '1650063693' WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END THEN HEX(DISTINCT rt0.c0) WHEN (~ ('709578335')) THEN rt0.c0 END ASC, ((((((vt1.c0)OR(vt1.c0)))OR(rt0.c1))) BETWEEN ((((vt1.c0))>((rt0.c3)))) AND (((rt0.c0)>(rt0.c1)))) DESC;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c3)) NOT BETWEEN (((~ (rt0.c3)))) AND ((CASE rt0.c0  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END)))) ORDER BY UPPER(DISTINCT 'F'), CASE WHEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (vt1.c0)) THEN (rt0.c3 IN (rt0.c3)) WHEN CASE rt0.c1  WHEN rt0.c3 THEN '1650063693' WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END THEN HEX(DISTINCT rt0.c0) WHEN (~ ('709578335')) THEN rt0.c0 END ASC, ((((((vt1.c0)OR(vt1.c0)))OR(rt0.c1))) BETWEEN ((((vt1.c0))>((rt0.c3)))) AND (((rt0.c0)>(rt0.c1)))) DESC;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c3)) NOT BETWEEN (((~ (rt0.c3)))) AND ((CASE rt0.c0  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c0 END)))) ORDER BY UPPER(DISTINCT 'F'), CASE WHEN ((rt0.c3) NOT BETWEEN (rt0.c2) AND (vt1.c0)) THEN (rt0.c3 IN (rt0.c3)) WHEN CASE rt0.c1  WHEN rt0.c3 THEN '1650063693' WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END THEN HEX(DISTINCT rt0.c0) WHEN (~ ('709578335')) THEN rt0.c0 END ASC, ((((((vt1.c0)OR(vt1.c0)))OR(rt0.c1))) BETWEEN ((((vt1.c0))>((rt0.c3)))) AND (((rt0.c0)>(rt0.c1)))) DESC;
SELECT * FROM vt1, rt0 WHERE ((NOT (vt1.c0 COLLATE RTRIM))) ORDER BY x'7f' DESC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ((((NOT (vt1.c0 COLLATE RTRIM)))AND(((((rt0.c1)-(rt0.c3))) BETWEEN ((rt0.c2 IN (vt1.c0, rt0.c2))) AND (((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(rt0.c1))))))) ORDER BY x'7f' DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM vt1, rt0 WHERE ((NOT (rt0.c0)) COLLATE BINARY) ORDER BY x'7f' DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt1, rt0 WHERE ((NOT (vt1.c0 COLLATE RTRIM))) ORDER BY x'7f' DESC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE ((((NOT (vt1.c0 COLLATE RTRIM)))AND(((((rt0.c1)-(rt0.c3))) BETWEEN ((rt0.c2 IN (vt1.c0, rt0.c2))) AND (((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(rt0.c1))))))) ORDER BY x'7f' DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM vt1, rt0 WHERE ((NOT (rt0.c0)) COLLATE BINARY) ORDER BY x'7f' DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE '' END))) ORDER BY vt1.c0 COLLATE RTRIM ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE '' END))) ORDER BY vt1.c0 COLLATE RTRIM ASC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (((4.26117718E8 COLLATE BINARY)!=((((2081155199)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1)))))) ORDER BY CASE WHEN (NULL IN ()) THEN ((rt0.c2) ISNULL) WHEN (rt0.c1 IN (rt0.c3)) THEN ((rt0.c0)AND(rt0.c1)) ELSE CAST(rt0.c0 AS BLOB) END, CAST(((rt0.c0) IS FALSE) AS INTEGER);
SELECT * FROM vt1, rt0 WHERE (((((4.26117718E8 COLLATE BINARY)<>((((2081155199)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1))))))AND(CAST(0.8562382261660006 AS INTEGER)))) ORDER BY ((((vt1.c0, rt0.c0, rt0.c0)) BETWEEN ((rt0.c3, rt0.c0, '300987767')) AND ((rt0.c3, rt0.c3, rt0.c2))) IN (CAST(rt0.c0 AS NUMERIC), rt0.c2 COLLATE NOCASE, ((rt0.c2)|(rt0.c2)))) LIMIT 2;
SELECT * FROM vt1, rt0 WHERE (((4.26117718E8 COLLATE BINARY)!=((((2081155199)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1)))))) ORDER BY CASE WHEN (NULL IN ()) THEN ((rt0.c2) ISNULL) WHEN (rt0.c1 IN (rt0.c3)) THEN ((rt0.c0)AND(rt0.c1)) ELSE CAST(rt0.c0 AS BLOB) END, CAST(((rt0.c0) IS FALSE) AS INTEGER);
SELECT * FROM vt1, rt0 WHERE (((((4.26117718E8 COLLATE BINARY)<>((((2081155199)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1))))))AND(CAST(0.8562382261660006 AS INTEGER)))) ORDER BY ((((vt1.c0, rt0.c0, rt0.c0)) BETWEEN ((rt0.c3, rt0.c0, '300987767')) AND ((rt0.c3, rt0.c3, rt0.c2))) IN (CAST(rt0.c0 AS NUMERIC), rt0.c2 COLLATE NOCASE, ((rt0.c2)|(rt0.c2)))) LIMIT 2;
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE (((TRIM(rt0.c0)) NOT BETWEEN (CAST(rt0.c2 AS INTEGER)) AND (((rt0.c0)%(rt0.c1)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1, rt0 WHERE (((((TRIM(rt0.c0)) NOT BETWEEN (CAST(rt0.c2 AS INTEGER)) AND (((rt0.c0)%(rt0.c1)))))AND(rt0.c0)));
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE ((~ (CAST(rt0.c3 AS TEXT)))) ORDER BY (+ (NULL));
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((((~ (CAST(rt0.c3 AS TEXT))))AND((((rt0.c3 IN (rt0.c1))) BETWEEN (NULLIF(DISTINCT rt0.c2, vt1.c0)) AND (((((((rt0.c3)AND(vt1.c0)))OR(0xffffffffaa229f97)))OR(rt0.c3))))))) ORDER BY ((vt1.c0 COLLATE BINARY) NOTNULL), (NOT ((~ (rt0.c3))))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c3 IN (0.7746052397071052, rt0.c3))) NOT NULL)) ORDER BY '1297953609', (~ ((('55232972') BETWEEN (vt1.c0) AND ('-618343155')))), ((CASE WHEN rt0.c1 THEN rt0.c3 WHEN NULL THEN rt0.c1 WHEN vt1.c0 THEN rt0.c3 END) BETWEEN (rt0.c0) AND (((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c3 IN (0.7746052397071052))) NOT NULL))AND(NULL COLLATE RTRIM))) ORDER BY ((((rt0.c2)&(vt1.c0))) NOT BETWEEN ((~ (rt0.c1))) AND ((- (rt0.c0)))) DESC  NULLS LAST, (((rt0.c2)) NOT BETWEEN ((json_type(rt0.c0))) AND ((CAST(vt1.c0 AS TEXT)))), (NOT (((((((((((vt1.c0)OR(rt0.c1)))OR(rt0.c2)))AND(rt0.c3)))OR(vt1.c0)))OR(vt1.c0))))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c3 IN (0.7746052397071052, rt0.c3))) NOT NULL)) ORDER BY '1297953609', (~ ((('55232972') BETWEEN (vt1.c0) AND ('-618343155')))), ((CASE WHEN rt0.c1 THEN rt0.c3 WHEN NULL THEN rt0.c1 WHEN vt1.c0 THEN rt0.c3 END) BETWEEN (rt0.c0) AND (((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c3 IN (0.7746052397071052))) NOT NULL))AND(NULL COLLATE RTRIM))) ORDER BY ((((rt0.c2)&(vt1.c0))) NOT BETWEEN ((~ (rt0.c1))) AND ((- (rt0.c0)))) DESC  NULLS LAST, (((rt0.c2)) NOT BETWEEN ((json_type(rt0.c0))) AND ((CAST(vt1.c0 AS TEXT)))), (NOT (((((((((((vt1.c0)OR(rt0.c1)))OR(rt0.c2)))AND(rt0.c3)))OR(vt1.c0)))OR(vt1.c0))))  NULLS LAST;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (((((((((rt0.c1)<(rt0.c0)))AND(((971743878)/(rt0.c3)))))AND(((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0)))))OR((rt0.c0 IN ('-473596006', rt0.c0)))));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 NOT INDEXED WHERE (((((((((rt0.c1)<(rt0.c0)))AND(((0X39eba286)/(rt0.c3)))))AND(((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c0)))))OR((rt0.c0 IN ('-473596006'))))) ORDER BY NULLIF(((((((rt0.c1)AND(rt0.c2)))OR(0.5723549876199309)))OR(rt0.c3)), (rt0.c0 IN ('1653326099'))), (((((rt0.c3))>((rt0.c3)))) BETWEEN ((rt0.c3 IN ())) AND (CAST(rt0.c3 AS INTEGER))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (SQLITE_VERSION() COLLATE RTRIM) ORDER BY NULLIF(((((((rt0.c1)AND(rt0.c2)))OR(0.5723549876199309)))OR(rt0.c3)), (rt0.c0 IN ('1653326099'))), (((((rt0.c3))>((rt0.c3)))) BETWEEN ((rt0.c3 IN ())) AND (CAST(rt0.c3 AS INTEGER))) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2 COLLATE BINARY)OR(((vt1.c0) IS FALSE))))OR(((((((((((NULL)AND(NULL)))OR(rt0.c3)))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c2)))));
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c2 COLLATE BINARY)OR(((vt1.c0) IS FALSE))))OR(((((((((((NULL)AND(NULL)))OR(rt0.c3)))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c2)))))AND(CAST(((vt1.c0) ISNULL) AS BLOB))));
SELECT * FROM rt0, vt1 WHERE (((((rt0.c2 COLLATE BINARY)OR(((vt1.c0) IS FALSE))))OR(((((((((((NULL)AND(NULL)))OR(rt0.c3)))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c2)))));
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c2 COLLATE BINARY)OR(((vt1.c0) IS FALSE))))OR(((((((((((NULL)AND(NULL)))OR(rt0.c3)))OR(vt1.c0)))AND(vt1.c0)))OR(rt0.c2)))))AND(CAST(((vt1.c0) ISNULL) AS BLOB))));
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN 0.2173869963459567 THEN vt1.c0 WHEN vt1.c0 THEN '-1647908879' END)|(((((vt1.c0)OR(NULL)))OR(vt1.c0)))) DESC  NULLS LAST, vt1.c0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN 0.2173869963459567 THEN vt1.c0 WHEN vt1.c0 THEN '-1647908879' END)|(((((vt1.c0)OR(NULL)))OR(vt1.c0)))) DESC  NULLS LAST, vt1.c0 INTERSECT SELECT ALL * FROM vt1 WHERE (((((CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)OR(((vt1.c0) NOTNULL))))AND(((vt1.c0)>>(vt1.c0))))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN 0.2173869963459567 THEN vt1.c0 WHEN vt1.c0 THEN '-1647908879' END)|(((((vt1.c0)OR(NULL)))OR(vt1.c0)))) DESC  NULLS LAST, vt1.c0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN 0.2173869963459567 THEN vt1.c0 WHEN vt1.c0 THEN '-1647908879' END)|(((((vt1.c0)OR(NULL)))OR(vt1.c0)))) DESC  NULLS LAST, vt1.c0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN 0.2173869963459567 THEN vt1.c0 WHEN vt1.c0 THEN '-1647908879' END)|(((((vt1.c0)OR(NULL)))OR(vt1.c0)))) DESC  NULLS LAST, vt1.c0 INTERSECT SELECT ALL * FROM vt1 WHERE (((((CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)OR(((vt1.c0) NOTNULL))))AND(((vt1.c0)>>(vt1.c0))))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN 0.2173869963459567 THEN vt1.c0 WHEN vt1.c0 THEN '-1647908879' END)|(((((vt1.c0)OR(NULL)))OR(vt1.c0)))) DESC  NULLS LAST, vt1.c0;
SELECT * FROM rt0 WHERE (((((rt0.c3)GLOB(rt0.c3)))AND(((rt0.c1)-(rt0.c3))))) ORDER BY UNLIKELY(rt0.c3) ASC, CHAR(((rt0.c3)IS NOT(rt0.c2)), CASE WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 END), CASE WHEN (+ (rt0.c1)) THEN rt0.c0 COLLATE RTRIM ELSE x'd9' END  NULLS LAST, ((((rt0.c2)<>(rt0.c2)))%(CAST(rt0.c1 AS NUMERIC)))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3)GLOB(rt0.c3)))AND(((rt0.c1)-(rt0.c3)))))AND((((((x'1db4') NOT NULL), CASE rt0.c0  WHEN rt0.c1 THEN 1950206626 WHEN rt0.c0 THEN rt0.c1 END, rt0.c3))=((((rt0.c2)||(rt0.c1)), x'', CASE WHEN rt0.c1 THEN rt0.c1 WHEN 102137299 THEN rt0.c2 ELSE rt0.c2 END)))))) ORDER BY ((((((CAST(rt0.c3 AS BLOB))OR(NULL)))OR((((rt0.c1, rt0.c0))>=((rt0.c0, rt0.c1))))))AND((('-1127236167') NOT NULL)))  NULLS LAST;
SELECT * FROM rt0 WHERE (((((rt0.c3)GLOB(rt0.c3)))AND(((rt0.c1)-(rt0.c3))))) ORDER BY UNLIKELY(rt0.c3) ASC, CHAR(((rt0.c3)IS NOT(rt0.c2)), CASE WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 END), CASE WHEN (+ (rt0.c1)) THEN rt0.c0 COLLATE RTRIM ELSE x'd9' END  NULLS LAST, ((((rt0.c2)<>(rt0.c2)))%(CAST(rt0.c1 AS NUMERIC)))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3)GLOB(rt0.c3)))AND(((rt0.c1)-(rt0.c3)))))AND((((((x'1db4') NOT NULL), CASE rt0.c0  WHEN rt0.c1 THEN 1950206626 WHEN rt0.c0 THEN rt0.c1 END, rt0.c3))=((((rt0.c2)||(rt0.c1)), x'', CASE WHEN rt0.c1 THEN rt0.c1 WHEN 102137299 THEN rt0.c2 ELSE rt0.c2 END)))))) ORDER BY ((((((CAST(rt0.c3 AS BLOB))OR(NULL)))OR((((rt0.c1, rt0.c0))>=((rt0.c0, rt0.c1))))))AND((('-1127236167') NOT NULL)))  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) IS FALSE));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) IS FALSE));
SELECT MIN(rt0.c2) FROM rt0 WHERE ((((((((rt0.c3))=((rt0.c1))))AND(ABS(rt0.c3))))AND(CASE x'72'  WHEN 0.6725585606176214 THEN rt0.c2 WHEN rt0.c0 THEN 0.3206640652508097 WHEN rt0.c3 THEN NULL END)));
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE ((((((((rt0.c3))==((rt0.c1))))AND(ABS(rt0.c3))))AND(CASE x'72'  WHEN 0.6725585606176214 THEN rt0.c2 WHEN rt0.c0 THEN 0.3206640652508097 WHEN rt0.c3 THEN NULL END))) LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (TRIM((rt0.c2 IN ()))) LIMIT 0;
SELECT * FROM vt1 WHERE ((((vt1.c0) NOTNULL) IN ())) ORDER BY (((((((((((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))))OR(((vt1.c0)>=(vt1.c0)))))OR(HEX(vt1.c0))))AND(((vt1.c0) IS TRUE))))AND(((vt1.c0)|(vt1.c0)))))AND(((vt1.c0)LIKE(vt1.c0)))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE ((((((vt1.c0) NOTNULL) IN ()))AND((((vt1.c0)/(vt1.c0)) IN (NULLIF(vt1.c0, vt1.c0)))))) ORDER BY ((CAST(vt1.c0 AS TEXT)) BETWEEN ((((((('KﳷzKX')OR('')))AND(vt1.c0)))OR(vt1.c0))) AND ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))) DESC, ((vt1.c0) NOT NULL) DESC;
SELECT * FROM vt1 WHERE ((((vt1.c0) NOTNULL) IN ())) ORDER BY (((((((((((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))))OR(((vt1.c0)>=(vt1.c0)))))OR(HEX(vt1.c0))))AND(((vt1.c0) IS TRUE))))AND(((vt1.c0)|(vt1.c0)))))AND(((vt1.c0)LIKE(vt1.c0)))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE ((((((vt1.c0) NOTNULL) IN ()))AND((((vt1.c0)/(vt1.c0)) IN (NULLIF(vt1.c0, vt1.c0)))))) ORDER BY ((CAST(vt1.c0 AS TEXT)) BETWEEN ((((((('KﳷzKX')OR('')))AND(vt1.c0)))OR(vt1.c0))) AND ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))) DESC, ((vt1.c0) NOT NULL) DESC;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN NULL THEN CAST(rt0.c2 AS REAL) ELSE ((rt0.c2)OR(rt0.c1)) END);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE WHEN NULL THEN CAST(rt0.c2 AS REAL) ELSE ((rt0.c2)OR(rt0.c1)) END)AND(NULL))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((('-1959845813')>=(rt0.c2)) COLLATE BINARY) LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN NULL THEN CAST(rt0.c2 AS REAL) ELSE ((rt0.c2)OR(rt0.c1)) END);
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE WHEN NULL THEN CAST(rt0.c2 AS REAL) ELSE ((rt0.c2)OR(rt0.c1)) END)AND(NULL))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((('-1959845813')>=(rt0.c2)) COLLATE BINARY) LIMIT 0X1;
SELECT * FROM vt1 WHERE (((- (vt1.c0)) IN (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT DISTINCT * FROM vt1 WHERE (((((- (vt1.c0)) IN (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND(((LIKELY(vt1.c0))>((vt1.c0 IN ())))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))AND(CAST(vt1.c0 AS NUMERIC))))OR(((vt1.c0)<(vt1.c0)))));
SELECT * FROM vt1 WHERE (((- (vt1.c0)) IN (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT DISTINCT * FROM vt1 WHERE (((((- (vt1.c0)) IN (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND(((LIKELY(vt1.c0))>((vt1.c0 IN ())))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))AND(CAST(vt1.c0 AS NUMERIC))))OR(((vt1.c0)<(vt1.c0)))));
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE ((((rt0.c3))>((-1259266501))) COLLATE BINARY) ORDER BY (LOWER(DISTINCT rt0.c2) IN ((((rt0.c2)) BETWEEN ((rt0.c1)) AND ((rt0.c2))), 1238839811)), (((rt0.c0 IN (rt0.c1)))<(CAST(rt0.c1 AS NUMERIC))) DESC;
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE ((((((rt0.c3))>((-1259266501))) COLLATE BINARY)AND(CASE WHEN ((rt0.c3)-(rt0.c1)) THEN ((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)) END))) ORDER BY (((rt0.c0) ISNULL) IN (CAST(-1689546010 AS NUMERIC))) DESC, (((~ (rt0.c0))) NOT BETWEEN (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c0))) AND (COALESCE('', rt0.c2, rt0.c1))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (((vt1.c0) NOT NULL));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0) NOT NULL)) ORDER BY ((((vt1.c0)GLOB(vt1.c0))) ISNULL)  NULLS FIRST, ((((vt1.c0)+(vt1.c0)))&((- (vt1.c0)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (NULL) AND (vt1.c0)))>=(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))))) ORDER BY ((((vt1.c0)GLOB(vt1.c0))) ISNULL)  NULLS FIRST, ((((vt1.c0)+(vt1.c0)))&((- (vt1.c0)))) LIMIT 0;
SELECT * FROM vt1 WHERE (((vt1.c0) NOT NULL));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0) NOT NULL)) ORDER BY ((((vt1.c0)GLOB(vt1.c0))) ISNULL)  NULLS FIRST, ((((vt1.c0)+(vt1.c0)))&((- (vt1.c0)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (NULL) AND (vt1.c0)))>=(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))))) ORDER BY ((((vt1.c0)GLOB(vt1.c0))) ISNULL)  NULLS FIRST, ((((vt1.c0)+(vt1.c0)))&((- (vt1.c0)))) LIMIT 0;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON 0.375837699212912 WHERE (((((rt0.c1)%(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (CASE WHEN '-355974647' THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 ELSE vt1.c0 END))) ORDER BY CAST((((rt0.c2, rt0.c1))<>((rt0.c1, rt0.c1))) AS BLOB)  NULLS LAST, NULL DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON 0.375837699212912 WHERE (((((((rt0.c1)%(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (CASE WHEN '-355974647' THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 ELSE vt1.c0 END)))AND((- ((((vt1.c0, rt0.c1, rt0.c1, rt0.c1))<=((')', rt0.c1, rt0.c3, rt0.c3)))))))) ORDER BY CAST((((rt0.c2, rt0.c1))!=((rt0.c1, rt0.c1))) AS BLOB)  NULLS LAST, NULL DESC  NULLS LAST LIMIT 0X4;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON 0.375837699212912 WHERE (((((rt0.c1)%(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (CASE WHEN '-355974647' THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 ELSE vt1.c0 END))) ORDER BY CAST((((rt0.c2, rt0.c1))<>((rt0.c1, rt0.c1))) AS BLOB)  NULLS LAST, NULL DESC  NULLS LAST;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON 0.375837699212912 WHERE (((((((rt0.c1)%(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (CASE WHEN '-355974647' THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c3 ELSE vt1.c0 END)))AND((- ((((vt1.c0, rt0.c1, rt0.c1, rt0.c1))<=((')', rt0.c1, rt0.c3, rt0.c3)))))))) ORDER BY CAST((((rt0.c2, rt0.c1))!=((rt0.c1, rt0.c1))) AS BLOB)  NULLS LAST, NULL DESC  NULLS LAST LIMIT 0X4;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((((CASE NULL  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 END)AND((rt0.c2 IN ()))))OR(((rt0.c2) IS FALSE))))AND(rt0.c0)) WHERE ('55232972') ORDER BY LIKELIHOOD(DISTINCT ((rt0.c1) IS TRUE), rt0.c1 COLLATE NOCASE) ASC;
SELECT * FROM vt1 CROSS JOIN rt0 ON ((((((CASE NULL  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 END)AND((rt0.c2 IN ()))))OR(((rt0.c2) IS FALSE))))AND(rt0.c0)) WHERE ((('55232972')AND(((((((((((((vt1.c0) BETWEEN (rt0.c0) AND (0X1a558e09)))AND(CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c0 ELSE vt1.c0 END)))OR(((rt0.c3)OR(rt0.c2)))))AND(((rt0.c1) BETWEEN (0.5927898600533132) AND (rt0.c3)))))OR((((rt0.c3))<>((rt0.c0))))))AND(((rt0.c1)OR(vt1.c0))))))) ORDER BY ((0.022128182064032997) IS TRUE) DESC LIMIT 0x4 INTERSECT SELECT * FROM vt1 NOT INDEXED CROSS JOIN rt0 ON ((((((CASE NULL  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 END)AND((rt0.c2 IN ()))))OR(((rt0.c2) IS FALSE))))AND(rt0.c0)) WHERE (((((((((CASE WHEN rt0.c3 THEN vt1.c0 END)AND((((rt0.c3)) BETWEEN ((rt0.c3)) AND ((rt0.c3))))))OR((((rt0.c3, rt0.c1))<((rt0.c0, rt0.c0))))))OR((((x''))<=((vt1.c0))))))AND(rt0.c3))) ORDER BY ((0.022128182064032997) IS TRUE) DESC LIMIT 4;
SELECT ALL * FROM vt1 CROSS JOIN rt0 ON ((((((CASE NULL  WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c3 END)AND((rt0.c2 IN ()))))OR(((rt0.c2) IS FALSE))))AND(rt0.c0)) WHERE ('55232972') ORDER BY LIKELIHOOD(DISTINCT ((rt0.c1) IS TRUE), rt0.c1 COLLATE NOCASE) ASC;
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE (x'c9');
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE (x'c9');
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)OR(0.16498797011941724)))OR(vt1.c0)) COLLATE RTRIM);
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(0.16498797011941724)))OR(vt1.c0)) COLLATE RTRIM)AND(((((vt1.c0) NOT BETWEEN (0x717e2781) AND (vt1.c0))) BETWEEN (((vt1.c0)<>(vt1.c0))) AND (((vt1.c0)GLOB(NULL))))))) ORDER BY (~ ((vt1.c0 IN ())))  NULLS FIRST, ((CASE 0.029442945964088363  WHEN x'' THEN vt1.c0 END)<=(((vt1.c0) ISNULL))) ASC  NULLS FIRST LIMIT 0X1;
SELECT ALL COUNT(*) FROM rt0 WHERE (UPPER(DISTINCT ((rt0.c0)&(x''))));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (UPPER(DISTINCT ((rt0.c0)&(x''))));
SELECT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) IS FALSE));
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) IS FALSE)) ORDER BY (~ ((vt1.c0 IN (vt1.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c0)LIKE(vt1.c0))) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) AND (json_valid(vt1.c0)))) ORDER BY (~ ((vt1.c0 IN (vt1.c0))))  NULLS LAST LIMIT 1;
SELECT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) IS FALSE));
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) IS FALSE)) ORDER BY (~ ((vt1.c0 IN (vt1.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c0)LIKE(vt1.c0))) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) AND (json_valid(vt1.c0)))) ORDER BY (~ ((vt1.c0 IN (vt1.c0))))  NULLS LAST LIMIT 1;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON ((((rt0.c2) NOTNULL)) BETWEEN (((rt0.c1)||(rt0.c1))) AND (CASE rt0.c0  WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c2 ELSE vt1.c0 END)) WHERE (((CAST(rt0.c0 AS TEXT))==(((rt0.c1)OR(vt1.c0))))) ORDER BY (0xffffffffd45227ab IN ()) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt1 LEFT OUTER JOIN rt0 ON ((((rt0.c2) NOTNULL)) BETWEEN (((rt0.c1)||(rt0.c1))) AND (CASE rt0.c0  WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c2 ELSE vt1.c0 END)) WHERE (((CAST(rt0.c0 AS TEXT))=(((rt0.c1)OR(vt1.c0))))) ORDER BY rt0.c2, rt0.c2 ASC  NULLS FIRST, x'' DESC;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON ((((rt0.c2) NOTNULL)) BETWEEN (((rt0.c1)||(rt0.c1))) AND (CASE rt0.c0  WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c2 ELSE vt1.c0 END)) WHERE (((CAST(rt0.c0 AS TEXT))==(((rt0.c1)OR(vt1.c0))))) ORDER BY (0xffffffffd45227ab IN ()) COLLATE BINARY  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (CASE ((rt0.c1) BETWEEN (NULL) AND (x'46'))  WHEN CASE WHEN NULL THEN rt0.c3 ELSE rt0.c2 END THEN (((rt0.c2, vt1.c0))!=((rt0.c2, vt1.c0))) WHEN ((((((NULL)OR(rt0.c0)))AND(rt0.c3)))OR(rt0.c3)) THEN CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END ELSE rt0.c3 END);
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE ((rt0.c1) BETWEEN (NULL) AND (x'46'))  WHEN CASE WHEN NULL THEN rt0.c3 ELSE rt0.c2 END THEN (((rt0.c2, vt1.c0))<((rt0.c2, vt1.c0))) WHEN ((((((NULL)OR(rt0.c0)))AND(rt0.c3)))OR(rt0.c3)) THEN CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END ELSE rt0.c3 END)AND(CAST('-1648947304' AS NUMERIC)))) ORDER BY IFNULL(DISTINCT (NOT ('y3*対J(O)')), ((((((((((((rt0.c2)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c1)))OR(rt0.c1)))OR(x'940773')))AND(rt0.c0))), ((rt0.c1 COLLATE NOCASE)+(CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 END)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE 0.33921356552005644  WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c2 END)LIKE(((rt0.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0))))) ORDER BY IFNULL(DISTINCT (NOT ('y3*対J(O)')), ((((((((((((rt0.c2)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c1)))OR(rt0.c1)))OR(x'940773')))AND(rt0.c0))), ((rt0.c1 COLLATE NOCASE)+(CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 END)) LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE (CASE ((rt0.c1) BETWEEN (NULL) AND (x'46'))  WHEN CASE WHEN NULL THEN rt0.c3 ELSE rt0.c2 END THEN (((rt0.c2, vt1.c0))!=((rt0.c2, vt1.c0))) WHEN ((((((NULL)OR(rt0.c0)))AND(rt0.c3)))OR(rt0.c3)) THEN CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END ELSE rt0.c3 END);
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE ((rt0.c1) BETWEEN (NULL) AND (x'46'))  WHEN CASE WHEN NULL THEN rt0.c3 ELSE rt0.c2 END THEN (((rt0.c2, vt1.c0))<((rt0.c2, vt1.c0))) WHEN ((((((NULL)OR(rt0.c0)))AND(rt0.c3)))OR(rt0.c3)) THEN CASE WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c1 ELSE vt1.c0 END ELSE rt0.c3 END)AND(CAST('-1648947304' AS NUMERIC)))) ORDER BY IFNULL(DISTINCT (NOT ('y3*対J(O)')), ((((((((((((rt0.c2)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c1)))OR(rt0.c1)))OR(x'940773')))AND(rt0.c0))), ((rt0.c1 COLLATE NOCASE)+(CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 END)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE 0.33921356552005644  WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c2 END)LIKE(((rt0.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0))))) ORDER BY IFNULL(DISTINCT (NOT ('y3*対J(O)')), ((((((((((((rt0.c2)OR(rt0.c0)))OR(rt0.c1)))AND(rt0.c1)))OR(rt0.c1)))OR(x'940773')))AND(rt0.c0))), ((rt0.c1 COLLATE NOCASE)+(CASE rt0.c1  WHEN rt0.c0 THEN rt0.c3 END)) LIMIT 0x1;
SELECT MAX(rt0.c2) FROM vt1, rt0 WHERE ((((CAST('-792507701' AS TEXT), ABS(rt0.c0)))>(((rt0.c2 IN (1848466430)), CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN vt1.c0 END))));
SELECT MAX(rt0.c2) FROM vt1, rt0 WHERE ((((CAST('-792507701' AS TEXT), ABS(rt0.c0)))>(((rt0.c2 IN (0X6e2d5bfe)), CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c3 THEN vt1.c0 END)))) INTERSECT SELECT MAX(rt0.c2) FROM vt1, rt0 WHERE ((((((rt0.c3, rt0.c3)) NOT BETWEEN ((x'471d', rt0.c2)) AND ((rt0.c1, rt0.c2))))&(((((((((rt0.c2)AND(rt0.c3)))AND(rt0.c3)))OR('-234413142')))AND(rt0.c2)))));
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c2)AND(rt0.c1)) IN (((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0)))));
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c2)AND(rt0.c1)) IN (((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0)))))AND(((((vt1.c0 COLLATE RTRIM)AND(((rt0.c2)==(rt0.c3)))))OR((rt0.c1 IN (rt0.c0))))))) LIMIT 0 INTERSECT SELECT * FROM vt1, rt0 WHERE (((+ (rt0.c2)) IN (x''))) LIMIT 0X0;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c2)AND(rt0.c1)) IN (((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0)))));
SELECT * FROM vt1, rt0 WHERE ((((((rt0.c2)AND(rt0.c1)) IN (((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt1.c0)))))AND(((((vt1.c0 COLLATE RTRIM)AND(((rt0.c2)==(rt0.c3)))))OR((rt0.c1 IN (rt0.c0))))))) LIMIT 0 INTERSECT SELECT * FROM vt1, rt0 WHERE (((+ (rt0.c2)) IN (x''))) LIMIT 0X0;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((0.35795302195238243)OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c2))) NOT BETWEEN (((rt0.c1) NOT NULL)) AND (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((0.35795302195238243)OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c2))) NOT BETWEEN (((rt0.c1) NOT NULL)) AND (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(NULL))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (UPPER(DISTINCT ((vt1.c0) BETWEEN (NULL) AND (rt0.c2)))) LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE (((((((((0.35795302195238243)OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c2))) NOT BETWEEN (((rt0.c1) NOT NULL)) AND (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((0.35795302195238243)OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c2))) NOT BETWEEN (((rt0.c1) NOT NULL)) AND (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(NULL))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (UPPER(DISTINCT ((vt1.c0) BETWEEN (NULL) AND (rt0.c2)))) LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0) ISNULL), vt1.c0, (~ (vt1.c0))))==((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, ((NULL)/(vt1.c0)), vt1.c0))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0) ISNULL), vt1.c0, (~ (vt1.c0))))=((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, ((NULL)/(vt1.c0)), vt1.c0))));
SELECT ALL * FROM vt1, rt0 WHERE ((((vt1.c0)==(vt1.c0)) IN ())) ORDER BY ((((rt0.c0)||(vt1.c0)))=(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c1)))) DESC;
SELECT ALL * FROM vt1, rt0 WHERE ((((vt1.c0)==(vt1.c0)) IN ())) ORDER BY (((((((rt0.c2 IN ()))AND((rt0.c0 IN ()))))OR(rt0.c2 COLLATE RTRIM)))OR((((rt0.c0, rt0.c1, rt0.c3, rt0.c3, NULL))<((vt1.c0, x'ac', rt0.c2, rt0.c2, x'71ea'))))) ASC  NULLS FIRST, ((((((((LIKE(vt1.c0, rt0.c2, '缶'))OR((('?窅')<(rt0.c0)))))OR((rt0.c3 IN (rt0.c2, rt0.c1)))))OR((((rt0.c1))>((rt0.c2))))))OR(((rt0.c2) NOT BETWEEN ('c') AND (rt0.c0)))) LIMIT 0x0;
SELECT ALL * FROM vt1, rt0 WHERE ((((vt1.c0)==(vt1.c0)) IN ())) ORDER BY ((((rt0.c0)||(vt1.c0)))=(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c1)))) DESC;
SELECT ALL * FROM vt1, rt0 WHERE ((((vt1.c0)==(vt1.c0)) IN ())) ORDER BY (((((((rt0.c2 IN ()))AND((rt0.c0 IN ()))))OR(rt0.c2 COLLATE RTRIM)))OR((((rt0.c0, rt0.c1, rt0.c3, rt0.c3, NULL))<((vt1.c0, x'ac', rt0.c2, rt0.c2, x'71ea'))))) ASC  NULLS FIRST, ((((((((LIKE(vt1.c0, rt0.c2, '缶'))OR((('?窅')<(rt0.c0)))))OR((rt0.c3 IN (rt0.c2, rt0.c1)))))OR((((rt0.c1))>((rt0.c2))))))OR(((rt0.c2) NOT BETWEEN ('c') AND (rt0.c0)))) LIMIT 0x0;
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((((vt1.c0)) NOT BETWEEN (((rt0.c2 IN ()))) AND ((((rt0.c2) IS TRUE))))) ORDER BY (((rt0.c3) NOT NULL) IN ());
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE ((((((vt1.c0)) NOT BETWEEN (((rt0.c2 IN ()))) AND ((((rt0.c2) IS TRUE)))))AND(((LIKELIHOOD(rt0.c1, rt0.c3)) ISNULL)))) ORDER BY (((rt0.c3) NOT NULL) IN ());
SELECT ALL MAX(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON UNLIKELY((rt0.c3 IN (vt1.c0, rt0.c0, rt0.c1))) WHERE ((~ (rt0.c3 COLLATE BINARY))) ORDER BY CAST(((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c3)) AS REAL)  NULLS LAST, ((((rt0.c0)>(vt1.c0)))=(((((((rt0.c0)AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c2)))) ASC;
SELECT DISTINCT MAX(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON UNLIKELY((rt0.c3 IN (vt1.c0, rt0.c0, rt0.c1))) WHERE ((~ (rt0.c3 COLLATE BINARY))) ORDER BY CAST(((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c3)) AS REAL)  NULLS LAST, ((((rt0.c0)>(vt1.c0)))==(((((((rt0.c0)AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c2)))) ASC;
SELECT ALL COUNT(*) FROM vt1 WHERE (NULLIF(CAST(vt1.c0 AS INTEGER), CAST(NULL AS NUMERIC))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOT BETWEEN (CAST(vt1.c0 AS REAL)) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)) ASC, (('<Tj&E' COLLATE RTRIM) NOT NULL) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE (NULLIF(CAST(vt1.c0 AS INTEGER), CAST(NULL AS NUMERIC))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOT BETWEEN (CAST(vt1.c0 AS REAL)) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)) ASC, (('<Tj&E' COLLATE RTRIM) NOT NULL) ASC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0, 'R!* j')) NOT BETWEEN (((vt1.c0 IN (vt1.c0, 455756160)), ((vt1.c0)LIKE(vt1.c0)))) AND (((- (vt1.c0)), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOT BETWEEN (CAST(vt1.c0 AS REAL)) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)) ASC, (('<Tj&E' COLLATE RTRIM) NOT NULL) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE ((((((rt0.c0)AND(rt0.c3)))OR(rt0.c3)) IN (((rt0.c1)>>(rt0.c0)), (~ (rt0.c1)))));
SELECT * FROM rt0 WHERE ((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c3)) IN (((rt0.c1)>>(rt0.c0)), (~ (rt0.c1)))))AND(CAST(0.29724581158587693 AS TEXT)))) ORDER BY (~ (((rt0.c2)GLOB(rt0.c1)))) INTERSECT SELECT * FROM rt0 WHERE ((~ (((rt0.c1)&(rt0.c3))))) ORDER BY (~ (((rt0.c2)GLOB(rt0.c1))));
SELECT * FROM rt0 WHERE ((((((rt0.c0)AND(rt0.c3)))OR(rt0.c3)) IN (((rt0.c1)>>(rt0.c0)), (~ (rt0.c1)))));
SELECT * FROM rt0 WHERE ((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c3)) IN (((rt0.c1)>>(rt0.c0)), (~ (rt0.c1)))))AND(CAST(0.29724581158587693 AS TEXT)))) ORDER BY (~ (((rt0.c2)GLOB(rt0.c1)))) INTERSECT SELECT * FROM rt0 WHERE ((~ (((rt0.c1)&(rt0.c3))))) ORDER BY (~ (((rt0.c2)GLOB(rt0.c1))));
SELECT ALL * FROM vt1 WHERE (CAST(NULL AS NUMERIC)) ORDER BY ((((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND('/')))OR(vt1.c0)))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)), ((vt1.c0)&('1720971285')) COLLATE RTRIM ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((CAST(NULL AS NUMERIC))AND((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)), vt1.c0 COLLATE RTRIM, (- (vt1.c0)), ((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))) AND ((((vt1.c0) NOTNULL), CAST(vt1.c0 AS TEXT), (((vt1.c0, vt1.c0, vt1.c0, 0.49081155953989186))>=((vt1.c0, '-1468222271', vt1.c0, vt1.c0))), vt1.c0)))))) ORDER BY json(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (CAST(NULL AS NUMERIC)) ORDER BY ((((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND('/')))OR(vt1.c0)))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)), ((vt1.c0)&('1720971285')) COLLATE RTRIM ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((CAST(NULL AS NUMERIC))AND((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)), vt1.c0 COLLATE RTRIM, (- (vt1.c0)), ((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))) AND ((((vt1.c0) NOTNULL), CAST(vt1.c0 AS TEXT), (((vt1.c0, vt1.c0, vt1.c0, 0.49081155953989186))>=((vt1.c0, '-1468222271', vt1.c0, vt1.c0))), vt1.c0)))))) ORDER BY json(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)  NULLS LAST LIMIT 0x0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((('0.1479873907414725') NOT NULL) IN ())) ORDER BY ((((vt1.c0)/(vt1.c0)))GLOB(CAST(vt1.c0 AS TEXT))) DESC  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((('0.1479873907414725') NOT NULL) IN ()))AND(((vt1.c0)<(vt1.c0)) COLLATE NOCASE))) ORDER BY ((((vt1.c0)/(vt1.c0)))GLOB(CAST(vt1.c0 AS TEXT))) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (NULL) ORDER BY ((((vt1.c0)/(vt1.c0)))GLOB(CAST(vt1.c0 AS TEXT))) DESC  NULLS FIRST LIMIT 0x0;
SELECT MAX(rt0.c0) FROM rt0 WHERE ((~ (((((rt0.c0)OR(rt0.c0)))OR(rt0.c3))))) ORDER BY ((((((((((((x'')AND(((rt0.c3)|(rt0.c3)))))OR(((rt0.c1)IS(rt0.c0)))))AND(CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END)))AND((+ (rt0.c2)))))OR(rt0.c2)))AND(rt0.c0)), (((((rt0.c1)AND(rt0.c3)))AND(rt0.c2)) IN ()) DESC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE ((~ (((((rt0.c0)OR(rt0.c0)))OR(rt0.c3))))) ORDER BY (((- (rt0.c2)))IS NOT(rt0.c0 COLLATE NOCASE)) DESC, NULL DESC INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE (((rt0.c3) NOTNULL) COLLATE RTRIM) ORDER BY (((- (rt0.c2)))IS NOT(rt0.c0 COLLATE NOCASE)) DESC, NULL DESC;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((- (rt0.c2)));
SELECT COUNT(*) FROM rt0, vt1 WHERE ((((- (rt0.c2)))AND((+ (((rt0.c3) NOT BETWEEN (0.6335280290997158) AND (vt1.c0))))))) LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((rt0.c1)IS NOT(((rt0.c1)-('|'))))) LIMIT 1;
SELECT * FROM rt0 WHERE ((((((rt0.c3, rt0.c1))==((rt0.c1, rt0.c0)))) ISNULL)) ORDER BY (((((rt0.c0, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c1, rt0.c0)) AND ((NULL, rt0.c3, rt0.c2))))IS(((rt0.c3)<=(rt0.c3)))), ((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)))LIKE((- (rt0.c2)))), CAST(NULL AS BLOB)  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c3, rt0.c1))==((rt0.c1, rt0.c0)))) ISNULL)) ORDER BY (((((rt0.c0, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c1, rt0.c0)) AND ((NULL, rt0.c3, rt0.c2))))IS(((rt0.c3)<=(rt0.c3)))), ((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)))LIKE((- (rt0.c2)))), CAST(NULL AS BLOB)  NULLS LAST LIMIT 1;
SELECT * FROM rt0 WHERE ((((((rt0.c3, rt0.c1))==((rt0.c1, rt0.c0)))) ISNULL)) ORDER BY (((((rt0.c0, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c1, rt0.c0)) AND ((NULL, rt0.c3, rt0.c2))))IS(((rt0.c3)<=(rt0.c3)))), ((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)))LIKE((- (rt0.c2)))), CAST(NULL AS BLOB)  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c3, rt0.c1))==((rt0.c1, rt0.c0)))) ISNULL)) ORDER BY (((((rt0.c0, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c1, rt0.c0)) AND ((NULL, rt0.c3, rt0.c2))))IS(((rt0.c3)<=(rt0.c3)))), ((((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)))LIKE((- (rt0.c2)))), CAST(NULL AS BLOB)  NULLS LAST LIMIT 1;
SELECT * FROM rt0 WHERE ((((((rt0.c2, rt0.c1, rt0.c3))>((rt0.c0, rt0.c3, rt0.c1))))||(((rt0.c1) NOT NULL)))) ORDER BY (((rt0.c2 IN ())) BETWEEN (((rt0.c3)-(rt0.c1))) AND (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c3 END))  NULLS LAST;
SELECT * FROM rt0 WHERE ((((((rt0.c2, rt0.c1, rt0.c3))>((rt0.c0, rt0.c3, rt0.c1))))||(((rt0.c1) NOT NULL)))) ORDER BY CAST(((rt0.c0)||(rt0.c0)) AS BLOB) ASC  NULLS LAST, ((((((rt0.c0) NOT NULL))AND((((rt0.c2, '203219809')) BETWEEN ((rt0.c1, rt0.c0)) AND (('**7', rt0.c3))))))AND(((rt0.c2) NOT NULL))) ASC, json_object(json_array_length(rt0.c0), NULL COLLATE BINARY, (('짶[
D(')<>(rt0.c0))) INTERSECT SELECT ALL * FROM rt0 WHERE (UPPER(x'33365e')) ORDER BY CAST(((rt0.c0)||(rt0.c0)) AS BLOB) ASC  NULLS LAST, ((((((rt0.c0) NOT NULL))AND((((rt0.c2, '203219809')) BETWEEN ((rt0.c1, rt0.c0)) AND (('**7', rt0.c3))))))AND(((rt0.c2) NOT NULL))) ASC, json_object(json_array_length(rt0.c0), NULL COLLATE BINARY, (('짶[
D(')!=(rt0.c0)));
SELECT * FROM rt0 WHERE ((((((rt0.c2, rt0.c1, rt0.c3))>((rt0.c0, rt0.c3, rt0.c1))))||(((rt0.c1) NOT NULL)))) ORDER BY (((rt0.c2 IN ())) BETWEEN (((rt0.c3)-(rt0.c1))) AND (CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c3 END))  NULLS LAST;
SELECT * FROM rt0 WHERE ((((((rt0.c2, rt0.c1, rt0.c3))>((rt0.c0, rt0.c3, rt0.c1))))||(((rt0.c1) NOT NULL)))) ORDER BY CAST(((rt0.c0)||(rt0.c0)) AS BLOB) ASC  NULLS LAST, ((((((rt0.c0) NOT NULL))AND((((rt0.c2, '203219809')) BETWEEN ((rt0.c1, rt0.c0)) AND (('**7', rt0.c3))))))AND(((rt0.c2) NOT NULL))) ASC, json_object(json_array_length(rt0.c0), NULL COLLATE BINARY, (('짶[
D(')<>(rt0.c0))) INTERSECT SELECT ALL * FROM rt0 WHERE (UPPER(x'33365e')) ORDER BY CAST(((rt0.c0)||(rt0.c0)) AS BLOB) ASC  NULLS LAST, ((((((rt0.c0) NOT NULL))AND((((rt0.c2, '203219809')) BETWEEN ((rt0.c1, rt0.c0)) AND (('**7', rt0.c3))))))AND(((rt0.c2) NOT NULL))) ASC, json_object(json_array_length(rt0.c0), NULL COLLATE BINARY, (('짶[
D(')!=(rt0.c0)));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)OR(vt1.c0)), SQLITE_COMPILEOPTION_USED(vt1.c0), vt1.c0 COLLATE RTRIM, (vt1.c0 IN ())))<>((vt1.c0, ((vt1.c0)-(vt1.c0)), ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), (vt1.c0 IN (vt1.c0)))))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((((((vt1.c0)OR(vt1.c0)), SQLITE_COMPILEOPTION_USED(vt1.c0), vt1.c0 COLLATE RTRIM, (vt1.c0 IN ())))>((vt1.c0, ((vt1.c0)-(vt1.c0)), ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)), (vt1.c0 IN (vt1.c0))))))AND((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))))) ORDER BY vt1.c0 DESC  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN vt1.c0 COLLATE RTRIM THEN CAST(vt1.c0 AS INTEGER) WHEN ((vt1.c0)&(vt1.c0)) THEN (~ (vt1.c0)) WHEN UNLIKELY(vt1.c0) THEN ((((((vt1.c0)OR(vt1.c0)))AND(0.33475879017703647)))AND(vt1.c0)) ELSE QUOTE(vt1.c0) END) ORDER BY vt1.c0 DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((rt0.c0 COLLATE RTRIM)-(((rt0.c3)IS NOT(x'b4')))));
SELECT COUNT(*) FROM rt0, vt1 WHERE (((rt0.c0 COLLATE RTRIM)-(((rt0.c3)IS NOT(x'b4'))))) LIMIT 0 INTERSECT SELECT COUNT(*) FROM rt0, vt1 WHERE (vt1.c0) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (x'80');
SELECT DISTINCT * FROM vt1 WHERE (x'80') LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (x'80');
SELECT DISTINCT * FROM vt1 WHERE (x'80') LIMIT 0X0;
SELECT * FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (((rt0.c1 COLLATE NOCASE) NOT BETWEEN ((~ (rt0.c3))) AND ((NOT (rt0.c0))))) ORDER BY (((rt0.c3 IN (rt0.c1))) ISNULL) DESC, (NOT (rt0.c1)) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (((rt0.c1 COLLATE NOCASE) NOT BETWEEN ((~ (rt0.c3))) AND ((NOT (rt0.c0))))) ORDER BY json_type(((((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(vt1.c0)))AND(rt0.c0)))  NULLS FIRST, (((rt0.c3 IN ()))%(((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (rt0.c3) ORDER BY json_type(((((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(vt1.c0)))AND(rt0.c0)))  NULLS FIRST, (((rt0.c3 IN ()))%(((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)))) DESC  NULLS FIRST;
SELECT * FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (((rt0.c1 COLLATE NOCASE) NOT BETWEEN ((~ (rt0.c3))) AND ((NOT (rt0.c0))))) ORDER BY (((rt0.c3 IN (rt0.c1))) ISNULL) DESC, (NOT (rt0.c1)) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (((rt0.c1 COLLATE NOCASE) NOT BETWEEN ((~ (rt0.c3))) AND ((NOT (rt0.c0))))) ORDER BY json_type(((((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(vt1.c0)))AND(rt0.c0)))  NULLS FIRST, (((rt0.c3 IN ()))%(((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON rt0.c2 WHERE (rt0.c3) ORDER BY json_type(((((((((((rt0.c3)OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(vt1.c0)))AND(rt0.c0)))  NULLS FIRST, (((rt0.c3 IN ()))%(((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c1)))) DESC  NULLS FIRST;
SELECT MAX(rt0.c1) FROM vt1, rt0 WHERE ((((((rt0.c0))<>((rt0.c0)))) NOT NULL)) ORDER BY ((CAST(rt0.c1 AS NUMERIC))-(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))));
SELECT DISTINCT MAX(rt0.c1) FROM vt1, rt0 WHERE ((((((((rt0.c0))<((rt0.c0)))) NOT NULL))AND((CHANGES() IN (-185877464))))) ORDER BY ((CAST(rt0.c1 AS NUMERIC))-(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))) INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM vt1, rt0 WHERE (json_quote(((rt0.c2) BETWEEN (rt0.c3) AND (rt0.c3)))) ORDER BY ((CAST(rt0.c1 AS NUMERIC))-(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))));
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE (CASE WHEN CAST(rt0.c2 AS REAL) THEN (+ (rt0.c0)) WHEN (vt1.c0 IN (rt0.c0)) THEN (((rt0.c3, vt1.c0)) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c2, rt0.c2))) WHEN ((((((((((rt0.c0)AND('礹vy숯vs')))OR(x'')))OR(rt0.c2)))AND(rt0.c1)))AND(vt1.c0)) THEN TRIM(DISTINCT vt1.c0, rt0.c0) WHEN '1043018778' THEN ((((((vt1.c0)AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)) END);
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE (((CASE WHEN CAST(rt0.c2 AS REAL) THEN (+ (rt0.c0)) WHEN (vt1.c0 IN (rt0.c0)) THEN (((rt0.c3, vt1.c0)) NOT BETWEEN ((rt0.c3, rt0.c3)) AND ((rt0.c2, rt0.c2))) WHEN ((((((((((rt0.c0)AND('礹vy숯vs')))OR(x'')))OR(rt0.c2)))AND(rt0.c1)))AND(vt1.c0)) THEN TRIM(DISTINCT vt1.c0, rt0.c0) WHEN '1043018778' THEN ((((((vt1.c0)AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)) END)AND(((((((x'1c')AND(rt0.c0)))OR(rt0.c3))) IS FALSE)))) ORDER BY x'fa' DESC  NULLS LAST;
SELECT * FROM vt1 WHERE ((- (vt1.c0)));
SELECT ALL * FROM vt1 WHERE ((((- (vt1.c0)))AND(((NULL) BETWEEN (((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR('259252199'))) AND ('欯*Ŏ礹e'))))) ORDER BY ((((((((x'')OR((+ (vt1.c0)))))AND(CAST(vt1.c0 AS NUMERIC))))OR(((vt1.c0) NOT BETWEEN (x'3350') AND (vt1.c0)))))AND(vt1.c0 COLLATE NOCASE)) ASC, ((((vt1.c0)>=(vt1.c0)))||(CAST(vt1.c0 AS REAL)))  NULLS LAST LIMIT 0X0;
SELECT * FROM vt1 WHERE ((- (vt1.c0)));
SELECT ALL * FROM vt1 WHERE ((((- (vt1.c0)))AND(((NULL) BETWEEN (((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR('259252199'))) AND ('欯*Ŏ礹e'))))) ORDER BY ((((((((x'')OR((+ (vt1.c0)))))AND(CAST(vt1.c0 AS NUMERIC))))OR(((vt1.c0) NOT BETWEEN (x'3350') AND (vt1.c0)))))AND(vt1.c0 COLLATE NOCASE)) ASC, ((((vt1.c0)>=(vt1.c0)))||(CAST(vt1.c0 AS REAL)))  NULLS LAST LIMIT 0X0;
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE ((((((rt0.c0)AND(rt0.c1)))AND(rt0.c1)) IN ())) ORDER BY ((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c1))) BETWEEN (((vt1.c0) NOTNULL)) AND ((rt0.c3 IN (rt0.c1)))), CASE WHEN ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)) THEN (rt0.c1 IN (rt0.c2)) WHEN json_insert(vt1.c0, rt0.c0, rt0.c1, vt1.c0) THEN ((((vt1.c0)AND(rt0.c0)))AND(rt0.c1)) WHEN ABS(DISTINCT rt0.c1) THEN ((-1028226782)*(rt0.c1)) ELSE ((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0)) END DESC  NULLS FIRST, ((CASE WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c1 END)=((rt0.c3 IN (vt1.c0))));
SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE ((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c1)) IN ()))AND((((CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 ELSE vt1.c0 END))>=((((rt0.c1)|(rt0.c3)))))))) ORDER BY ((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c1))) BETWEEN (((vt1.c0) NOTNULL)) AND ((rt0.c3 IN (rt0.c1)))), CASE WHEN ((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)) THEN (rt0.c1 IN (rt0.c2)) WHEN json_insert(vt1.c0, rt0.c0, rt0.c1, vt1.c0) THEN ((((vt1.c0)AND(rt0.c0)))AND(rt0.c1)) WHEN ABS(DISTINCT rt0.c1) THEN ((-1028226782)*(rt0.c1)) ELSE ((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0)) END DESC  NULLS FIRST, ((CASE WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c1 END)=((rt0.c3 IN (vt1.c0))));
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (((rt0.c3 COLLATE BINARY) BETWEEN (((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c3))) AND (CAST(rt0.c0 AS BLOB))));
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE (((((rt0.c3 COLLATE BINARY) BETWEEN (((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c3))) AND (CAST(rt0.c0 AS BLOB))))AND(CAST(((vt1.c0)||(rt0.c2)) AS REAL))));
SELECT ALL * FROM rt0 WHERE (((0Xffffffffe31ea476 COLLATE NOCASE) ISNULL));
SELECT * FROM rt0 WHERE (((-484531082 COLLATE NOCASE) ISNULL)) ORDER BY ((((rt0.c3)*(rt0.c2)))!=((rt0.c2 IN (rt0.c1))))  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM rt0 WHERE (rt0.c2) ORDER BY ((((rt0.c3)*(rt0.c2)))!=((rt0.c2 IN (rt0.c1))))  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM rt0 WHERE (((0Xffffffffe31ea476 COLLATE NOCASE) ISNULL));
SELECT * FROM rt0 WHERE (((-484531082 COLLATE NOCASE) ISNULL)) ORDER BY ((((rt0.c3)*(rt0.c2)))!=((rt0.c2 IN (rt0.c1))))  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM rt0 WHERE (rt0.c2) ORDER BY ((((rt0.c3)*(rt0.c2)))!=((rt0.c2 IN (rt0.c1))))  NULLS FIRST LIMIT 0X0;
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (((rt0.c1)%((~ (rt0.c1))))) ORDER BY (((~ (vt1.c0))) ISNULL) ASC, ((((vt1.c0) IS TRUE)) NOT NULL)  NULLS LAST, TRIM(CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c2 END, ((rt0.c1)&(rt0.c1))) DESC, (- (rt0.c1 COLLATE NOCASE)) ASC;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (((((rt0.c1)%((~ (rt0.c1)))))AND(0.88195881949553))) ORDER BY (((((rt0.c0, rt0.c0))>=((vt1.c0, rt0.c0)))) BETWEEN (QUOTE(rt0.c3)) AND (((vt1.c0) IS TRUE)))  NULLS FIRST, (((((rt0.c0))>((rt0.c2)))) NOT BETWEEN (CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c3 END) AND (CASE rt0.c3  WHEN rt0.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 ELSE x'5c' END))  NULLS FIRST INTERSECT SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE ((- (CASE rt0.c0  WHEN vt1.c0 THEN rt0.c1 END))) ORDER BY (((((rt0.c0, rt0.c0))>=((vt1.c0, rt0.c0)))) BETWEEN (QUOTE(rt0.c3)) AND (((vt1.c0) IS TRUE)))  NULLS FIRST, (((((rt0.c0))>((rt0.c2)))) NOT BETWEEN (CASE rt0.c1  WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c3 END) AND (CASE rt0.c3  WHEN rt0.c0 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 ELSE x'5c' END))  NULLS FIRST;
SELECT COUNT(*) FROM rt0 WHERE (((((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c0)) AND ((rt0.c0, rt0.c1))) IN (((rt0.c3) IS TRUE)))) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 END AS INTEGER)  NULLS LAST, (((((((+ (rt0.c1)))OR(((rt0.c2)%(rt0.c3)))))OR(((rt0.c0)GLOB(rt0.c3)))))OR(CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 END));
SELECT COUNT(*) FROM rt0 WHERE (((((((rt0.c2, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c0)) AND ((rt0.c0, rt0.c1))) IN (((rt0.c3) IS TRUE))))AND(LOWER(((rt0.c2) NOT NULL))))) ORDER BY CAST(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 END AS INTEGER)  NULLS LAST, (((((((+ (rt0.c1)))OR(((rt0.c2)%(rt0.c3)))))OR(((rt0.c0)GLOB(rt0.c3)))))OR(CASE WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 END));
SELECT * FROM rt0 WHERE ((((~ (rt0.c0)))+(((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c1)))));
SELECT DISTINCT * FROM rt0 WHERE ((((~ (rt0.c0)))+(((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c1))))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c1 COLLATE BINARY)OR(rt0.c0 COLLATE NOCASE)))OR(((rt0.c2)!=(rt0.c1)))))AND(((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c3)))));
SELECT * FROM rt0 WHERE ((((~ (rt0.c0)))+(((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c1)))));
SELECT DISTINCT * FROM rt0 WHERE ((((~ (rt0.c0)))+(((((((rt0.c0)OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c1))))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c1 COLLATE BINARY)OR(rt0.c0 COLLATE NOCASE)))OR(((rt0.c2)!=(rt0.c1)))))AND(((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c3)))));
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (0.8911177605289232)));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (0.8911177605289232))) ORDER BY (+ (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))), ((((vt1.c0) NOT NULL)) NOT BETWEEN (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((CAST(vt1.c0 AS BLOB), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (('-600520174') IS TRUE))) AND ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), (vt1.c0 IN ()), (vt1.c0 IN (vt1.c0)))))) ORDER BY (+ (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))), ((((vt1.c0) NOT NULL)) NOT BETWEEN (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (0.8911177605289232)));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (0.8911177605289232))) ORDER BY (+ (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))), ((((vt1.c0) NOT NULL)) NOT BETWEEN (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((CAST(vt1.c0 AS BLOB), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (('-600520174') IS TRUE))) AND ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), (vt1.c0 IN ()), (vt1.c0 IN (vt1.c0)))))) ORDER BY (+ (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))), ((((vt1.c0) NOT NULL)) NOT BETWEEN (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST;
SELECT * FROM rt0 WHERE (CAST(((rt0.c2)<=(rt0.c1)) AS REAL)) ORDER BY CAST(rt0.c2 AS TEXT) ASC  NULLS FIRST, (rt0.c1 IN (rt0.c0)) COLLATE RTRIM, ((rt0.c0)<((+ (rt0.c1)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((CAST(((rt0.c2)<(rt0.c1)) AS REAL))AND((~ (((((rt0.c3)OR(rt0.c0)))AND(rt0.c1))))))) ORDER BY (- (((rt0.c1) NOTNULL))) LIMIT 1;
SELECT * FROM rt0 WHERE (CAST(((rt0.c2)<=(rt0.c1)) AS REAL)) ORDER BY CAST(rt0.c2 AS TEXT) ASC  NULLS FIRST, (rt0.c1 IN (rt0.c0)) COLLATE RTRIM, ((rt0.c0)<((+ (rt0.c1)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((CAST(((rt0.c2)<(rt0.c1)) AS REAL))AND((~ (((((rt0.c3)OR(rt0.c0)))AND(rt0.c1))))))) ORDER BY (- (((rt0.c1) NOTNULL))) LIMIT 1;
SELECT * FROM rt0 WHERE (CASE WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c2)||(rt0.c3)) END) ORDER BY CAST((rt0.c2 IN ()) AS REAL);
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c2)||(rt0.c3)) END)AND(((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1))) NOTNULL)))) ORDER BY CAST((rt0.c2 IN ()) AS REAL) LIMIT 0;
SELECT * FROM rt0 WHERE (CASE WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c2)||(rt0.c3)) END) ORDER BY CAST((rt0.c2 IN ()) AS REAL);
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c2)||(rt0.c3)) END)AND(((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1))) NOTNULL)))) ORDER BY CAST((rt0.c2 IN ()) AS REAL) LIMIT 0;
SELECT * FROM vt1 WHERE (CASE WHEN (NOT (vt1.c0)) THEN UNLIKELY(vt1.c0) END) ORDER BY (((0X18ea992c, UPPER(DISTINCT vt1.c0), json_type(vt1.c0)))<>((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), (vt1.c0 IN ()), ((((((((NULL)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))  NULLS FIRST;
SELECT * FROM vt1 WHERE (CASE WHEN (NOT (vt1.c0)) THEN UNLIKELY(vt1.c0) END) ORDER BY ((x'')-(vt1.c0)) DESC, ((((((x'681b9a')OR(vt1.c0)))AND(vt1.c0)))<<(((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))), (((('࠿N!S*]')&(vt1.c0)))*(vt1.c0))  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt1 WHERE ((((+ (vt1.c0))) BETWEEN ((- (vt1.c0))) AND (CAST(vt1.c0 AS REAL)))) ORDER BY ((x'')-(vt1.c0)) DESC, ((((((x'681b9a')OR(vt1.c0)))AND(vt1.c0)))<<(((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))), (((('࠿N!S*]')&(vt1.c0)))*(vt1.c0))  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE (CASE WHEN (NOT (vt1.c0)) THEN UNLIKELY(vt1.c0) END) ORDER BY (((0X18ea992c, UPPER(DISTINCT vt1.c0), json_type(vt1.c0)))<>((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)), (vt1.c0 IN ()), ((((((((NULL)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))  NULLS FIRST;
SELECT * FROM vt1 WHERE (CASE WHEN (NOT (vt1.c0)) THEN UNLIKELY(vt1.c0) END) ORDER BY ((x'')-(vt1.c0)) DESC, ((((((x'681b9a')OR(vt1.c0)))AND(vt1.c0)))<<(((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))), (((('࠿N!S*]')&(vt1.c0)))*(vt1.c0))  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt1 WHERE ((((+ (vt1.c0))) BETWEEN ((- (vt1.c0))) AND (CAST(vt1.c0 AS REAL)))) ORDER BY ((x'')-(vt1.c0)) DESC, ((((((x'681b9a')OR(vt1.c0)))AND(vt1.c0)))<<(((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))), (((('࠿N!S*]')&(vt1.c0)))*(vt1.c0))  NULLS LAST LIMIT 0;
SELECT ALL COUNT(*) FROM rt0 WHERE (x'');
SELECT COUNT(*) FROM rt0 WHERE (x'') ORDER BY (((rt0.c0, rt0.c1)) BETWEEN ((rt0.c0, ((rt0.c2)IS NOT(rt0.c2)))) AND ((((rt0.c0) IS FALSE), (((rt0.c3, rt0.c3)) NOT BETWEEN ((rt0.c2, rt0.c3)) AND ((rt0.c3, rt0.c1)))))), (NOT (ROUND(rt0.c3, rt0.c1))) ASC  NULLS LAST;
SELECT MIN(rt0.c3) FROM rt0 WHERE (((json_array_length(rt0.c1)) NOT NULL));
SELECT DISTINCT MIN(rt0.c3) FROM rt0 WHERE (((json_array_length(rt0.c1)) NOT NULL)) ORDER BY SQLITE_SOURCE_ID() ASC;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (vt1.c0 COLLATE BINARY);
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0 COLLATE BINARY) LIMIT 0X1;
SELECT * FROM rt0, vt1 WHERE (((vt1.c0) BETWEEN (SQLITE_COMPILEOPTION_USED(x'b3')) AND (((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((vt1.c0) BETWEEN (SQLITE_COMPILEOPTION_USED(x'b3')) AND (((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1))))) ORDER BY (((rt0.c0, vt1.c0)) BETWEEN ((((0.06200025455434921)<(rt0.c1)), ((rt0.c1)*(rt0.c2)))) AND ((((rt0.c0)&(rt0.c0)), ''''))) DESC LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (((vt1.c0) BETWEEN (SQLITE_COMPILEOPTION_USED(x'b3')) AND (((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE (((vt1.c0) BETWEEN (SQLITE_COMPILEOPTION_USED(x'b3')) AND (((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1))))) ORDER BY (((rt0.c0, vt1.c0)) BETWEEN ((((0.06200025455434921)<(rt0.c1)), ((rt0.c1)*(rt0.c2)))) AND ((((rt0.c0)&(rt0.c0)), ''''))) DESC LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c0)OR(((NULL)-(vt1.c0)))))AND(CAST(vt1.c0 AS TEXT))))AND((vt1.c0 IN ('', vt1.c0)))))OR('')));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((vt1.c0)OR(((NULL)-(vt1.c0)))))AND(CAST(vt1.c0 AS TEXT))))AND((vt1.c0 IN ('', vt1.c0)))))OR('')))AND(vt1.c0)));
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c0)OR(((NULL)-(vt1.c0)))))AND(CAST(vt1.c0 AS TEXT))))AND((vt1.c0 IN ('', vt1.c0)))))OR('')));
SELECT DISTINCT * FROM vt1 WHERE (((((((((((vt1.c0)OR(((NULL)-(vt1.c0)))))AND(CAST(vt1.c0 AS TEXT))))AND((vt1.c0 IN ('', vt1.c0)))))OR('')))AND(vt1.c0)));
SELECT ALL COUNT(*) FROM rt0 WHERE (MIN(rt0.c0, LTRIM(rt0.c0), ((((rt0.c1)AND(rt0.c1)))AND(rt0.c0))));
SELECT ALL COUNT(*) FROM rt0 WHERE (MIN(rt0.c0, LTRIM(rt0.c0), ((((rt0.c1)AND(rt0.c1)))AND(rt0.c0)))) LIMIT 1;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (x'b7325b');
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (((x'b7325b')AND(CAST(((((((rt0.c2)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) AS TEXT)))) ORDER BY ((((rt0.c3)||(rt0.c0)))GLOB(((((((rt0.c1)OR(rt0.c2)))OR(rt0.c1)))OR(rt0.c3))))  NULLS LAST, (((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)) IN ());
SELECT ALL * FROM rt0 WHERE ((~ ((- (rt0.c2))))) ORDER BY (~ (((rt0.c0) NOT NULL))) DESC, CAST(((rt0.c3)>(rt0.c0)) AS NUMERIC) ASC;
SELECT DISTINCT * FROM rt0 WHERE ((~ ((- (rt0.c2))))) ORDER BY (~ (((rt0.c0) NOT NULL))) DESC, CAST(((rt0.c3)>(rt0.c0)) AS NUMERIC) ASC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c2) ORDER BY (~ (((rt0.c0) NOT NULL))) DESC, CAST(((rt0.c3)>(rt0.c0)) AS NUMERIC) ASC;
SELECT ALL * FROM rt0 WHERE ((~ ((- (rt0.c2))))) ORDER BY (~ (((rt0.c0) NOT NULL))) DESC, CAST(((rt0.c3)>(rt0.c0)) AS NUMERIC) ASC;
SELECT DISTINCT * FROM rt0 WHERE ((~ ((- (rt0.c2))))) ORDER BY (~ (((rt0.c0) NOT NULL))) DESC, CAST(((rt0.c3)>(rt0.c0)) AS NUMERIC) ASC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c2) ORDER BY (~ (((rt0.c0) NOT NULL))) DESC, CAST(((rt0.c3)>(rt0.c0)) AS NUMERIC) ASC;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((- (vt1.c0)))<=((vt1.c0 IN ()))));
SELECT ALL COUNT(*) FROM vt1 WHERE ((((((- (vt1.c0)))<((vt1.c0 IN ()))))AND(((((((vt1.c0) IS FALSE))OR(vt1.c0 COLLATE RTRIM)))AND(vt1.c0))))) INTERSECT SELECT COUNT(*) FROM vt1 WHERE ((+ (CAST(vt1.c0 AS TEXT))));
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c1)%(rt0.c3)) IN (((((((((rt0.c0)AND(rt0.c3)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c3))))) ORDER BY (((rt0.c1 IN (rt0.c0))) NOT BETWEEN ((rt0.c1 IN (rt0.c1, rt0.c1, vt1.c0))) AND (0.8778789546857406 COLLATE BINARY)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c1)%(rt0.c3)) IN (((((((((rt0.c0)AND(rt0.c3)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c3))))) ORDER BY (((rt0.c1 IN (rt0.c0))) NOT BETWEEN ((rt0.c1 IN (rt0.c1, rt0.c1, vt1.c0))) AND (0.8778789546857406 COLLATE BINARY)) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (CASE (((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1)))  WHEN TRIM(DISTINCT rt0.c3, rt0.c1) THEN 0.5469707088506452 COLLATE NOCASE ELSE (rt0.c0 IN (rt0.c1)) END) ORDER BY (((rt0.c1 IN (rt0.c0))) NOT BETWEEN ((rt0.c1 IN (rt0.c1, rt0.c1, vt1.c0))) AND (0.8778789546857406 COLLATE BINARY)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c1)%(rt0.c3)) IN (((((((((rt0.c0)AND(rt0.c3)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c3))))) ORDER BY (((rt0.c1 IN (rt0.c0))) NOT BETWEEN ((rt0.c1 IN (rt0.c1, rt0.c1, vt1.c0))) AND (0.8778789546857406 COLLATE BINARY)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((rt0.c1)%(rt0.c3)) IN (((((((((rt0.c0)AND(rt0.c3)))OR(vt1.c0)))AND(rt0.c1)))AND(rt0.c3))))) ORDER BY (((rt0.c1 IN (rt0.c0))) NOT BETWEEN ((rt0.c1 IN (rt0.c1, rt0.c1, vt1.c0))) AND (0.8778789546857406 COLLATE BINARY)) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (CASE (((rt0.c3)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1)))  WHEN TRIM(DISTINCT rt0.c3, rt0.c1) THEN 0.5469707088506452 COLLATE NOCASE ELSE (rt0.c0 IN (rt0.c1)) END) ORDER BY (((rt0.c1 IN (rt0.c0))) NOT BETWEEN ((rt0.c1 IN (rt0.c1, rt0.c1, vt1.c0))) AND (0.8778789546857406 COLLATE BINARY)) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT)) IS TRUE)) ORDER BY vt1.c0 DESC;
SELECT DISTINCT * FROM vt1 WHERE (((((CAST(vt1.c0 AS TEXT)) IS TRUE))AND((- (SQLITE_COMPILEOPTION_GET(1.082644571E9)))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0)))) IS TRUE), (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0, ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))) AND ((UPPER(vt1.c0), CAST(vt1.c0 AS REAL), NULL))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) IN (((vt1.c0)<=(vt1.c0)), ((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(NULL)))AND(vt1.c0))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0)))) IS TRUE), (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0, ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))) AND ((UPPER(vt1.c0), CAST(vt1.c0 AS REAL), NULL))) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT)) IS TRUE)) ORDER BY vt1.c0 DESC;
SELECT DISTINCT * FROM vt1 WHERE (((((CAST(vt1.c0 AS TEXT)) IS TRUE))AND((- (SQLITE_COMPILEOPTION_GET(1.082644571E9)))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0)))) IS TRUE), (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0, ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))) AND ((UPPER(vt1.c0), CAST(vt1.c0 AS REAL), NULL))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) IN (((vt1.c0)<=(vt1.c0)), ((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(NULL)))AND(vt1.c0))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0)))) IS TRUE), (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0, ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))) AND ((UPPER(vt1.c0), CAST(vt1.c0 AS REAL), NULL))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) BETWEEN (vt1.c0) AND ((vt1.c0 IN (vt1.c0)))));
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0 COLLATE RTRIM) BETWEEN (vt1.c0) AND ((vt1.c0 IN (vt1.c0)))))AND(vt1.c0))) ORDER BY ((((((((((((vt1.c0) IS FALSE))AND(IFNULL(vt1.c0, vt1.c0))))OR(((NULL)IS(vt1.c0)))))AND(((vt1.c0)<<(vt1.c0)))))OR(((((((((((NULL)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))AND(TIME(vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)))  NULLS LAST, CAST(((vt1.c0)<=(vt1.c0)) AS REAL) DESC  NULLS LAST LIMIT 0X2 INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0)) BETWEEN (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))))) AND ((0X309cf81a)))) ORDER BY ((((((((((((vt1.c0) IS FALSE))AND(IFNULL(vt1.c0, vt1.c0))))OR(((NULL)IS(vt1.c0)))))AND(((vt1.c0)<<(vt1.c0)))))OR(((((((((((NULL)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))AND(TIME(vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)))  NULLS LAST, CAST(((vt1.c0)<=(vt1.c0)) AS REAL) DESC  NULLS LAST LIMIT 2;
SELECT * FROM rt0 WHERE (NULL);
SELECT * FROM rt0 WHERE (NULL) ORDER BY CAST(CAST(rt0.c2 AS TEXT) AS INTEGER) DESC, ((((rt0.c0) ISNULL))&(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0)))) LIMIT 1;
SELECT * FROM rt0 WHERE (NULL);
SELECT * FROM rt0 WHERE (NULL) ORDER BY CAST(CAST(rt0.c2 AS TEXT) AS INTEGER) DESC, ((((rt0.c0) ISNULL))&(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0)))) LIMIT 1;
SELECT MAX(rt0.c1) FROM rt0 WHERE (rt0.c2);
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (((rt0.c2)AND(((json_array_length(rt0.c1)) NOT BETWEEN (((rt0.c3)IS NOT(rt0.c1))) AND (((((((((((x'cf49c4')OR(rt0.c2)))AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c0)))AND(rt0.c3))))))) ORDER BY ''  NULLS FIRST;
SELECT ALL COUNT(*) FROM rt0 WHERE (CASE WHEN CAST(rt0.c0 AS INTEGER) THEN ((rt0.c3) NOT NULL) WHEN rt0.c2 COLLATE RTRIM THEN LIKELIHOOD(DISTINCT rt0.c1, rt0.c1) ELSE (((rt0.c3))<((rt0.c0))) END);
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CASE WHEN CAST(rt0.c0 AS INTEGER) THEN ((rt0.c3) NOT NULL) WHEN rt0.c2 COLLATE RTRIM THEN LIKELIHOOD(DISTINCT rt0.c1, rt0.c1) ELSE (((rt0.c3))<((rt0.c0))) END) LIMIT 0;
SELECT MIN(rt0.c2) FROM rt0 WHERE (((~ (rt0.c0)) IN (CASE rt0.c0  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 END))) ORDER BY (NOT (CAST(rt0.c1 AS INTEGER))) DESC, ((NULL) BETWEEN ((((rt0.c3)) BETWEEN ((rt0.c1)) AND ((rt0.c3)))) AND (rt0.c3)) DESC, '0.26159960435746465'  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((~ (rt0.c0)) IN (CASE rt0.c0  WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 END))) ORDER BY (NOT (CAST(rt0.c1 AS INTEGER))) DESC, ((NULL) BETWEEN ((((rt0.c3)) BETWEEN ((rt0.c1)) AND ((rt0.c3)))) AND (rt0.c3)) DESC, '0.26159960435746465'  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE ((~ (rt0.c1)) COLLATE RTRIM) ORDER BY (NOT (CAST(rt0.c1 AS INTEGER))) DESC, ((NULL) BETWEEN ((((rt0.c3)) BETWEEN ((rt0.c1)) AND ((rt0.c3)))) AND (rt0.c3)) DESC, '0.26159960435746465'  NULLS FIRST LIMIT 0x0;
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE ((((~ (rt0.c2))) NOT BETWEEN ((((rt0.c0, vt1.c0, rt0.c3)) BETWEEN ((rt0.c3, rt0.c2, rt0.c3)) AND ((rt0.c0, rt0.c2, rt0.c0)))) AND (vt1.c0 COLLATE BINARY)));
SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE ((((~ (rt0.c2))) NOT BETWEEN ((((rt0.c0, vt1.c0, rt0.c3)) BETWEEN ((rt0.c3, rt0.c2, rt0.c3)) AND ((rt0.c0, rt0.c2, rt0.c0)))) AND (vt1.c0 COLLATE BINARY))) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE (((((rt0.c0) IS TRUE))-(((((rt0.c1)AND(vt1.c0)))OR(rt0.c0))))) LIMIT 0;
SELECT MAX(rt0.c0) FROM rt0 WHERE ((rt0.c1 COLLATE NOCASE IN ()));
SELECT DISTINCT MAX(rt0.c0) FROM rt0 WHERE ((rt0.c1 COLLATE NOCASE IN ())) INTERSECT SELECT DISTINCT MAX(rt0.c0) FROM rt0 NOT INDEXED WHERE (((rt0.c1)+(((x'36c2')<=(rt0.c2)))));
SELECT ALL COUNT(*) FROM rt0 WHERE (x'') ORDER BY ((rt0.c0 IN ()) IN (rt0.c1));
SELECT ALL COUNT(*) FROM rt0 WHERE (((x'')AND((((rt0.c0, rt0.c2)) NOT BETWEEN ((NULL, (((NULL, rt0.c3, '-1767222942', rt0.c2))<=((rt0.c2, rt0.c1, rt0.c1, x'57'))))) AND (((- (rt0.c1)), load_extension(rt0.c3))))))) ORDER BY ((rt0.c0 IN ()) IN (rt0.c1)) LIMIT 0x0;
SELECT MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON UNLIKELY(DISTINCT (('765064518') NOTNULL)) WHERE (rt0.c0) ORDER BY 4.66069271E8 ASC;
SELECT MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON UNLIKELY(DISTINCT (('765064518') NOTNULL)) WHERE (((rt0.c0)AND(((0.2483592779772099) NOT BETWEEN (vt1.c0 COLLATE BINARY) AND (((rt0.c0)%(rt0.c0))))))) ORDER BY (MIN(rt0.c2, vt1.c0, rt0.c0) IN (rt0.c1, '464024925'))  NULLS LAST, CAST('765064518' AS BLOB), ((((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END)AND(SQLITE_VERSION())))AND(LAST_INSERT_ROWID())) DESC  NULLS LAST INTERSECT SELECT MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON UNLIKELY(DISTINCT (('765064518') NOTNULL)) WHERE ((((rt0.c2, vt1.c0, vt1.c0)) BETWEEN ((rt0.c0 COLLATE BINARY, ((vt1.c0) BETWEEN (rt0.c2) AND ('')), ((vt1.c0)GLOB(rt0.c0)))) AND ((CAST(rt0.c0 AS BLOB), (rt0.c1 IN ()), ((rt0.c0)IS(rt0.c0)))))) ORDER BY (MIN(rt0.c2, vt1.c0, rt0.c0) IN (rt0.c1, '464024925'))  NULLS LAST, CAST('765064518' AS BLOB), ((((CASE rt0.c2  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END)AND(SQLITE_VERSION())))AND(LAST_INSERT_ROWID())) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON (((rt0.c1)) BETWEEN ((SQLITE_VERSION())) AND (((((vt1.c0))<((vt1.c0)))))) WHERE (((((rt0.c2)/(rt0.c2)))<<(((x'34') NOT BETWEEN (rt0.c1) AND (rt0.c1)))));
SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN rt0 ON (((rt0.c1)) BETWEEN ((SQLITE_VERSION())) AND (((((vt1.c0))<((vt1.c0)))))) WHERE (((((((rt0.c2)/(rt0.c2)))<<(((x'34') NOT BETWEEN (rt0.c1) AND (rt0.c1)))))AND(HEX((('<T') NOT NULL))))) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN rt0 ON (((rt0.c1)) BETWEEN ((SQLITE_VERSION())) AND (((((vt1.c0))<((vt1.c0)))))) WHERE (x'5771') LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)GLOB(vt1.c0))) NOT NULL));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)GLOB(vt1.c0))) NOT NULL))AND(((((vt1.c0) NOT NULL)) BETWEEN (vt1.c0) AND ((((0X636c3f9b, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))))) INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((x'') NOTNULL) COLLATE NOCASE);
SELECT ALL * FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c2 END) IS TRUE)) ORDER BY (LENGTH(rt0.c2) IN (rt0.c2)) ASC, ((TRIM(rt0.c2)) BETWEEN (GLOB(rt0.c1, rt0.c0)) AND (CAST(rt0.c0 AS TEXT))) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c2 END) IS TRUE))AND((((rt0.c3, rt0.c2)) BETWEEN (((- (rt0.c2)), (rt0.c2 IN ()))) AND ((((rt0.c2)%(rt0.c0)), CASE rt0.c0  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END)))))) ORDER BY (LENGTH(rt0.c2) IN (rt0.c2)) ASC, ((TRIM(rt0.c2)) BETWEEN (GLOB(rt0.c1, rt0.c0)) AND (CAST(rt0.c0 AS TEXT))) ASC;
SELECT ALL * FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c2 END) IS TRUE)) ORDER BY (LENGTH(rt0.c2) IN (rt0.c2)) ASC, ((TRIM(rt0.c2)) BETWEEN (GLOB(rt0.c1, rt0.c0)) AND (CAST(rt0.c0 AS TEXT))) ASC;
SELECT DISTINCT * FROM rt0 WHERE (((((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c2 END) IS TRUE))AND((((rt0.c3, rt0.c2)) BETWEEN (((- (rt0.c2)), (rt0.c2 IN ()))) AND ((((rt0.c2)%(rt0.c0)), CASE rt0.c0  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END)))))) ORDER BY (LENGTH(rt0.c2) IN (rt0.c2)) ASC, ((TRIM(rt0.c2)) BETWEEN (GLOB(rt0.c1, rt0.c0)) AND (CAST(rt0.c0 AS TEXT))) ASC;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3, ((rt0.c2) IS TRUE), ((((rt0.c2)OR(rt0.c3)))AND(rt0.c2)), ((((rt0.c1)AND(rt0.c0)))AND(rt0.c2)), ((rt0.c2) NOTNULL)))==((CAST(rt0.c1 AS REAL), (((rt0.c3, rt0.c1))<>((rt0.c0, rt0.c2))), ((rt0.c0)-('%F3J
kE')), ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c0)), (- (rt0.c1))))));
SELECT ALL * FROM rt0 WHERE ((((rt0.c3, ((rt0.c2) IS TRUE), ((((rt0.c2)OR(rt0.c3)))AND(rt0.c2)), ((((rt0.c1)AND(rt0.c0)))AND(rt0.c2)), ((rt0.c2) NOTNULL)))=((CAST(rt0.c1 AS REAL), (((rt0.c3, rt0.c1))!=((rt0.c0, rt0.c2))), ((rt0.c0)-('%F3J
kE')), ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c0)), (- (rt0.c1)))))) LIMIT 1;
SELECT ALL * FROM rt0 WHERE ((((rt0.c3, ((rt0.c2) IS TRUE), ((((rt0.c2)OR(rt0.c3)))AND(rt0.c2)), ((((rt0.c1)AND(rt0.c0)))AND(rt0.c2)), ((rt0.c2) NOTNULL)))==((CAST(rt0.c1 AS REAL), (((rt0.c3, rt0.c1))<>((rt0.c0, rt0.c2))), ((rt0.c0)-('%F3J
kE')), ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c0)), (- (rt0.c1))))));
SELECT ALL * FROM rt0 WHERE ((((rt0.c3, ((rt0.c2) IS TRUE), ((((rt0.c2)OR(rt0.c3)))AND(rt0.c2)), ((((rt0.c1)AND(rt0.c0)))AND(rt0.c2)), ((rt0.c2) NOTNULL)))=((CAST(rt0.c1 AS REAL), (((rt0.c3, rt0.c1))!=((rt0.c0, rt0.c2))), ((rt0.c0)-('%F3J
kE')), ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c0)), (- (rt0.c1)))))) LIMIT 1;
SELECT COUNT(*) FROM rt0 WHERE (JULIANDAY(CAST(rt0.c1 AS INTEGER), (~ (rt0.c2)), CAST(rt0.c1 AS BLOB), json_valid(rt0.c1))) ORDER BY CASE (NULL IN ())  WHEN TYPEOF(DISTINCT rt0.c3) THEN ((rt0.c2) IS FALSE) END DESC;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (JULIANDAY(CAST(rt0.c1 AS INTEGER), (~ (rt0.c2)), CAST(rt0.c1 AS BLOB), json_valid(rt0.c1))) ORDER BY ((((((((((rt0.c0) IS FALSE))OR(rt0.c3)))AND(rt0.c1)))AND(CAST(rt0.c0 AS REAL))))AND(((rt0.c2) BETWEEN (rt0.c2) AND (184005932))))  NULLS FIRST LIMIT 0;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (((rt0.c2) NOT BETWEEN (((NULL)>>(rt0.c0))) AND ((rt0.c0 IN ()))));
SELECT MAX(rt0.c3) FROM rt0 WHERE (((((rt0.c2) NOT BETWEEN (((NULL)>>(rt0.c0))) AND ((rt0.c0 IN ()))))AND(CAST(rt0.c3 AS INTEGER)))) INTERSECT SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((((((x'4cf195f4', rt0.c1, rt0.c3))>((rt0.c2, rt0.c2, rt0.c0)))) BETWEEN (((((((((rt0.c1)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c2)))AND(rt0.c2))) AND (((rt0.c3)<<(rt0.c1)))));
SELECT * FROM rt0 WHERE (((NULL)*(LOWER(DISTINCT rt0.c1))));
SELECT DISTINCT * FROM rt0 WHERE (((NULL)*(LOWER(DISTINCT rt0.c1)))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c2, rt0.c0, rt0.c1))!=((rt0.c3, rt0.c3, NULL))) COLLATE RTRIM) LIMIT 2;
SELECT * FROM rt0 WHERE (((NULL)*(LOWER(DISTINCT rt0.c1))));
SELECT DISTINCT * FROM rt0 WHERE (((NULL)*(LOWER(DISTINCT rt0.c1)))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c2, rt0.c0, rt0.c1))!=((rt0.c3, rt0.c3, NULL))) COLLATE RTRIM) LIMIT 2;
SELECT ALL * FROM rt0 WHERE (NULL) ORDER BY json_insert(CAST(rt0.c0 AS BLOB), ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c3)), (((rt0.c2))<((rt0.c0))), (((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))));
SELECT ALL * FROM rt0 WHERE (((NULL)AND(LOWER(DISTINCT ((((((((((NULL)OR(rt0.c2)))AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c1)))AND(rt0.c0)))))) ORDER BY (~ (((rt0.c0) NOT NULL))), ((rt0.c1) IS TRUE) ASC  NULLS FIRST, ((- (rt0.c2)) IN (CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 END)) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (NULL) ORDER BY json_insert(CAST(rt0.c0 AS BLOB), ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c3)), (((rt0.c2))<((rt0.c0))), (((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))));
SELECT ALL * FROM rt0 WHERE (((NULL)AND(LOWER(DISTINCT ((((((((((NULL)OR(rt0.c2)))AND(rt0.c1)))OR(rt0.c1)))AND(rt0.c1)))AND(rt0.c0)))))) ORDER BY (~ (((rt0.c0) NOT NULL))), ((rt0.c1) IS TRUE) ASC  NULLS FIRST, ((- (rt0.c2)) IN (CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 END)) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE ((+ ((((((('')OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c0)))));
SELECT * FROM rt0 WHERE ((((+ ((((((('')OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c0)))))AND(((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)))-(((rt0.c3)IS(rt0.c2)))))));
SELECT * FROM rt0 WHERE ((+ ((((((('')OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c0)))));
SELECT * FROM rt0 WHERE ((((+ ((((((('')OR(rt0.c2)))AND(rt0.c2)))AND(rt0.c0)))))AND(((((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)))-(((rt0.c3)IS(rt0.c2)))))));
SELECT MAX(vt1.c0) FROM vt1 WHERE (-2.051742299E9);
SELECT MAX(vt1.c0) FROM vt1 WHERE (((-2.051742299E9)AND(NULL))) LIMIT 0x2 INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0) IS TRUE)) BETWEEN (CAST(vt1.c0 AS REAL)) AND ('z⣗{'))) LIMIT 2;
SELECT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))=((vt1.c0 IN ())))) ORDER BY (~ (vt1.c0));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))=((vt1.c0 IN ())))) ORDER BY CAST(vt1.c0 AS INTEGER) ASC  NULLS FIRST, ((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))OR(((vt1.c0)>(vt1.c0)))))OR(vt1.c0)) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))=((vt1.c0 IN ())))) ORDER BY (~ (vt1.c0));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))=((vt1.c0 IN ())))) ORDER BY CAST(vt1.c0 AS INTEGER) ASC  NULLS FIRST, ((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))OR(((vt1.c0)>(vt1.c0)))))OR(vt1.c0)) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (CAST(-1.982442086E9 AS NUMERIC)) ORDER BY rt0.c2 ASC, (((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((HEX(rt0.c1), (~ (rt0.c3)), (rt0.c1 IN (rt0.c0)))) AND ((rt0.c1, NULL, (((rt0.c0, 0.7048513620170885, rt0.c1, rt0.c1))<=((rt0.c1, rt0.c1, rt0.c3, rt0.c3)))))) ASC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((CAST(-1.982442086E9 AS NUMERIC))AND(((((((((((((((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c1)))AND(rt0.c2)))AND(((rt0.c3)%(rt0.c1)))))OR(COALESCE(DISTINCT rt0.c1, rt0.c2, rt0.c2, rt0.c3))))AND(TRIM(rt0.c0, rt0.c3))))AND(((x'')=(rt0.c2))))))) ORDER BY rt0.c2 ASC, (((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((HEX(rt0.c1), (~ (rt0.c3)), (rt0.c1 IN (rt0.c0)))) AND ((rt0.c1, NULL, (((rt0.c0, 0.7048513620170885, rt0.c1, rt0.c1))<=((rt0.c1, rt0.c1, rt0.c3, rt0.c3)))))) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM rt0 WHERE (((((((((((((rt0.c1) NOT NULL))OR(((rt0.c0) ISNULL))))OR((- (rt0.c2)))))OR((~ (rt0.c0)))))OR(((rt0.c0)&(0.7307397856350364)))))OR(((0.21645888671065183) IS TRUE)))) ORDER BY rt0.c2 ASC, (((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((HEX(rt0.c1), (~ (rt0.c3)), (rt0.c1 IN (rt0.c0)))) AND ((rt0.c1, NULL, (((rt0.c0, 0.7048513620170885, rt0.c1, rt0.c1))<=((rt0.c1, rt0.c1, rt0.c3, rt0.c3)))))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (CAST(-1.982442086E9 AS NUMERIC)) ORDER BY rt0.c2 ASC, (((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((HEX(rt0.c1), (~ (rt0.c3)), (rt0.c1 IN (rt0.c0)))) AND ((rt0.c1, NULL, (((rt0.c0, 0.7048513620170885, rt0.c1, rt0.c1))<=((rt0.c1, rt0.c1, rt0.c3, rt0.c3)))))) ASC  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((CAST(-1.982442086E9 AS NUMERIC))AND(((((((((((((((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c1)))AND(rt0.c2)))AND(((rt0.c3)%(rt0.c1)))))OR(COALESCE(DISTINCT rt0.c1, rt0.c2, rt0.c2, rt0.c3))))AND(TRIM(rt0.c0, rt0.c3))))AND(((x'')=(rt0.c2))))))) ORDER BY rt0.c2 ASC, (((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((HEX(rt0.c1), (~ (rt0.c3)), (rt0.c1 IN (rt0.c0)))) AND ((rt0.c1, NULL, (((rt0.c0, 0.7048513620170885, rt0.c1, rt0.c1))<=((rt0.c1, rt0.c1, rt0.c3, rt0.c3)))))) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM rt0 WHERE (((((((((((((rt0.c1) NOT NULL))OR(((rt0.c0) ISNULL))))OR((- (rt0.c2)))))OR((~ (rt0.c0)))))OR(((rt0.c0)&(0.7307397856350364)))))OR(((0.21645888671065183) IS TRUE)))) ORDER BY rt0.c2 ASC, (((rt0.c1, rt0.c2, rt0.c1)) NOT BETWEEN ((HEX(rt0.c1), (~ (rt0.c3)), (rt0.c1 IN (rt0.c0)))) AND ((rt0.c1, NULL, (((rt0.c0, 0.7048513620170885, rt0.c1, rt0.c1))<=((rt0.c1, rt0.c1, rt0.c3, rt0.c3)))))) ASC  NULLS FIRST;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE ((((rt0.c1, rt0.c1, vt1.c0, rt0.c1, vt1.c0)) NOT BETWEEN ((rt0.c2 COLLATE RTRIM, '-342410314', ((rt0.c3)<(rt0.c1)), rt0.c3 COLLATE BINARY, (+ (rt0.c2)))) AND ((((rt0.c0)==(NULL)), ((rt0.c0)<(rt0.c3)), (rt0.c3 IN ()), ((rt0.c0)OR(NULL)), ((((((rt0.c2)OR(rt0.c3)))OR(rt0.c1)))AND(x'4e09'))))));
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE ((((((rt0.c1, rt0.c1, vt1.c0, rt0.c1, vt1.c0)) NOT BETWEEN ((rt0.c2 COLLATE RTRIM, '-342410314', ((rt0.c3)<(rt0.c1)), rt0.c3 COLLATE BINARY, (+ (rt0.c2)))) AND ((((rt0.c0)<=(NULL)), ((rt0.c0)<(rt0.c3)), (rt0.c3 IN ()), ((rt0.c0)OR(NULL)), ((((((rt0.c2)OR(rt0.c3)))OR(rt0.c1)))AND(x'4e09'))))))AND(CAST(((((((((rt0.c2)OR(rt0.c1)))OR(0x34ac9cc)))AND(rt0.c1)))AND(0.7427981736881947)) AS INTEGER)))) ORDER BY rt0.c0  NULLS FIRST, (NULL IN ()), CAST(rt0.c1 AS INTEGER), LIKELY(rt0.c2)  NULLS FIRST LIMIT 3;
SELECT * FROM vt1 NATURAL JOIN rt0 WHERE ((((rt0.c1, rt0.c1, vt1.c0, rt0.c1, vt1.c0)) NOT BETWEEN ((rt0.c2 COLLATE RTRIM, '-342410314', ((rt0.c3)<(rt0.c1)), rt0.c3 COLLATE BINARY, (+ (rt0.c2)))) AND ((((rt0.c0)==(NULL)), ((rt0.c0)<(rt0.c3)), (rt0.c3 IN ()), ((rt0.c0)OR(NULL)), ((((((rt0.c2)OR(rt0.c3)))OR(rt0.c1)))AND(x'4e09'))))));
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE ((((((rt0.c1, rt0.c1, vt1.c0, rt0.c1, vt1.c0)) NOT BETWEEN ((rt0.c2 COLLATE RTRIM, '-342410314', ((rt0.c3)<(rt0.c1)), rt0.c3 COLLATE BINARY, (+ (rt0.c2)))) AND ((((rt0.c0)<=(NULL)), ((rt0.c0)<(rt0.c3)), (rt0.c3 IN ()), ((rt0.c0)OR(NULL)), ((((((rt0.c2)OR(rt0.c3)))OR(rt0.c1)))AND(x'4e09'))))))AND(CAST(((((((((rt0.c2)OR(rt0.c1)))OR(0x34ac9cc)))AND(rt0.c1)))AND(0.7427981736881947)) AS INTEGER)))) ORDER BY rt0.c0  NULLS FIRST, (NULL IN ()), CAST(rt0.c1 AS INTEGER), LIKELY(rt0.c2)  NULLS FIRST LIMIT 3;
SELECT ALL MIN(rt0.c1) FROM vt1 LEFT OUTER JOIN rt0 ON ((((((-1624120947)AND(rt0.c2)))OR(vt1.c0)))IS(CAST(rt0.c0 AS NUMERIC))) WHERE ((rt0.c3 IN ()) COLLATE BINARY COLLATE NOCASE);
SELECT DISTINCT MIN(rt0.c1) FROM vt1 LEFT OUTER JOIN rt0 ON ((((((0Xffffffff9f31e18d)AND(rt0.c2)))OR(vt1.c0)))IS(CAST(rt0.c0 AS NUMERIC))) WHERE ((rt0.c3 IN ()) COLLATE BINARY COLLATE NOCASE);
SELECT * FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 WHEN '-1502128869' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END)&(CASE WHEN rt0.c3 THEN '1564878886' WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c2 END))) ORDER BY ((((((((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c2)))OR(((rt0.c0)==(rt0.c0)))))OR(((rt0.c0) IS TRUE))))OR(rt0.c1)))OR(rt0.c2 COLLATE RTRIM)) DESC;
SELECT ALL * FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 WHEN '-1502128869' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END)&(CASE WHEN rt0.c3 THEN '1564878886' WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c2 END))) ORDER BY ((((((((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c2)))OR(((rt0.c0)==(rt0.c0)))))OR(((rt0.c0) IS TRUE))))OR(rt0.c1)))OR(rt0.c2 COLLATE RTRIM)) DESC;
SELECT * FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 WHEN '-1502128869' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END)&(CASE WHEN rt0.c3 THEN '1564878886' WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c2 END))) ORDER BY ((((((((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c2)))OR(((rt0.c0)==(rt0.c0)))))OR(((rt0.c0) IS TRUE))))OR(rt0.c1)))OR(rt0.c2 COLLATE RTRIM)) DESC;
SELECT ALL * FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 WHEN '-1502128869' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END)&(CASE WHEN rt0.c3 THEN '1564878886' WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c2 END))) ORDER BY ((((((((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c2)))OR(((rt0.c0)==(rt0.c0)))))OR(((rt0.c0) IS TRUE))))OR(rt0.c1)))OR(rt0.c2 COLLATE RTRIM)) DESC;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON CASE WHEN CAST(rt0.c0 AS REAL) THEN rt0.c0 COLLATE BINARY WHEN (((vt1.c0, rt0.c1)) NOT BETWEEN (('{', rt0.c3)) AND ((vt1.c0, 2042696920))) THEN ((x'2ba346ac') IS FALSE) END WHERE ((((+ (rt0.c2)))*((~ (rt0.c2))))) ORDER BY 0.5828783900874593 DESC, (((((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)), ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c3)), (rt0.c1 IN (rt0.c3)), ((rt0.c2)-(rt0.c3)), rt0.c0 COLLATE NOCASE))>((((((((rt0.c2)OR(rt0.c1)))AND(rt0.c3)))OR(vt1.c0)), json_array_length(vt1.c0, rt0.c3), rt0.c3 COLLATE BINARY, (((rt0.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))), ((rt0.c3)AND(rt0.c1)))))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c0 AS REAL) THEN rt0.c0 COLLATE BINARY WHEN (((vt1.c0, rt0.c1)) NOT BETWEEN (('{', rt0.c3)) AND ((vt1.c0, 0X79c114d8))) THEN ((x'2ba346ac') IS FALSE) END WHERE ((((((+ (rt0.c2)))*((~ (rt0.c2)))))AND((~ ((((rt0.c3, rt0.c1)) NOT BETWEEN ((rt0.c0, rt0.c0)) AND ((rt0.c2, rt0.c1)))))))) ORDER BY ((((TRIM(vt1.c0, rt0.c2))OR(((rt0.c1)<=(rt0.c3)))))AND(((vt1.c0)<<(x'7027')))) ASC, CASE CAST(vt1.c0 AS NUMERIC)  WHEN (('-1316183660') NOTNULL) THEN ((rt0.c3)+(rt0.c1)) ELSE rt0.c2 END ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c0 AS REAL) THEN rt0.c0 COLLATE BINARY WHEN (((vt1.c0, rt0.c1)) NOT BETWEEN (('{', rt0.c3)) AND ((vt1.c0, 0X79c114d8))) THEN ((x'2ba346ac') IS FALSE) END WHERE (((rt0.c1)AND(((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1))))) ORDER BY ((((TRIM(vt1.c0, rt0.c2))OR(((rt0.c1)<=(rt0.c3)))))AND(((vt1.c0)<<(x'7027')))) ASC, CASE CAST(vt1.c0 AS NUMERIC)  WHEN (('-1316183660') NOTNULL) THEN ((rt0.c3)+(rt0.c1)) ELSE rt0.c2 END ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON CASE WHEN CAST(rt0.c0 AS REAL) THEN rt0.c0 COLLATE BINARY WHEN (((vt1.c0, rt0.c1)) NOT BETWEEN (('{', rt0.c3)) AND ((vt1.c0, 2042696920))) THEN ((x'2ba346ac') IS FALSE) END WHERE ((((+ (rt0.c2)))*((~ (rt0.c2))))) ORDER BY 0.5828783900874593 DESC, (((((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c0)), ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c3)), (rt0.c1 IN (rt0.c3)), ((rt0.c2)-(rt0.c3)), rt0.c0 COLLATE NOCASE))>((((((((rt0.c2)OR(rt0.c1)))AND(rt0.c3)))OR(vt1.c0)), json_array_length(vt1.c0, rt0.c3), rt0.c3 COLLATE BINARY, (((rt0.c0)) BETWEEN ((rt0.c3)) AND ((rt0.c1))), ((rt0.c3)AND(rt0.c1)))))  NULLS FIRST;
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c0 AS REAL) THEN rt0.c0 COLLATE BINARY WHEN (((vt1.c0, rt0.c1)) NOT BETWEEN (('{', rt0.c3)) AND ((vt1.c0, 0X79c114d8))) THEN ((x'2ba346ac') IS FALSE) END WHERE ((((((+ (rt0.c2)))*((~ (rt0.c2)))))AND((~ ((((rt0.c3, rt0.c1)) NOT BETWEEN ((rt0.c0, rt0.c0)) AND ((rt0.c2, rt0.c1)))))))) ORDER BY ((((TRIM(vt1.c0, rt0.c2))OR(((rt0.c1)<=(rt0.c3)))))AND(((vt1.c0)<<(x'7027')))) ASC, CASE CAST(vt1.c0 AS NUMERIC)  WHEN (('-1316183660') NOTNULL) THEN ((rt0.c3)+(rt0.c1)) ELSE rt0.c2 END ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON CASE WHEN CAST(rt0.c0 AS REAL) THEN rt0.c0 COLLATE BINARY WHEN (((vt1.c0, rt0.c1)) NOT BETWEEN (('{', rt0.c3)) AND ((vt1.c0, 0X79c114d8))) THEN ((x'2ba346ac') IS FALSE) END WHERE (((rt0.c1)AND(((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1))))) ORDER BY ((((TRIM(vt1.c0, rt0.c2))OR(((rt0.c1)<=(rt0.c3)))))AND(((vt1.c0)<<(x'7027')))) ASC, CASE CAST(vt1.c0 AS NUMERIC)  WHEN (('-1316183660') NOTNULL) THEN ((rt0.c3)+(rt0.c1)) ELSE rt0.c2 END ASC  NULLS LAST LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE ((((-172012183 IN (rt0.c0))) NOT BETWEEN (((vt1.c0)>=(rt0.c0))) AND (CAST(rt0.c2 AS REAL)))) ORDER BY (~ ((~ (rt0.c2)))) DESC  NULLS LAST, ((((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c0))) BETWEEN (0.07913807364540693) AND (((((NULL)OR(rt0.c1)))AND(rt0.c2)))) ASC;
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE ((((((-172012183 IN (rt0.c0))) NOT BETWEEN (((vt1.c0)>=(rt0.c0))) AND (CAST(rt0.c2 AS REAL))))AND(((CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 END)OR('-932272300'))))) ORDER BY (~ ((~ (rt0.c2)))) DESC  NULLS LAST, ((((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c0))) BETWEEN (0.07913807364540693) AND (((((NULL)OR(rt0.c1)))AND(rt0.c2)))) ASC LIMIT 0X2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((rt0.c3)OR(rt0.c2)))OR(rt0.c0)) COLLATE NOCASE) ORDER BY (~ ((~ (rt0.c2)))) DESC  NULLS LAST, ((((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c0))) BETWEEN (0.07913807364540693) AND (((((NULL)OR(rt0.c1)))AND(rt0.c2)))) ASC LIMIT 0X2;
SELECT ALL * FROM rt0 WHERE ((((('-116899011')>('839021629'))) NOTNULL)) ORDER BY CAST('0.1286444337000554' AS TEXT) ASC  NULLS LAST, 0x618d98b8 DESC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((('-116899011')>('839021629'))) NOTNULL)) ORDER BY SQLITE_SOURCE_ID(), rt0.c1  NULLS LAST INTERSECT SELECT * FROM rt0 WHERE (LAST_INSERT_ROWID()) ORDER BY SQLITE_SOURCE_ID(), rt0.c1  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((('-116899011')>('839021629'))) NOTNULL)) ORDER BY CAST('0.1286444337000554' AS TEXT) ASC  NULLS LAST, 0x618d98b8 DESC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((~ ((((rt0.c2))<((0.4020577140815642))))));
SELECT * FROM vt1, rt0 WHERE ((~ ((((rt0.c2))<((0.4020577140815642)))))) ORDER BY (((~ (rt0.c0))) NOT BETWEEN ('' COLLATE RTRIM) AND (TYPEOF(rt0.c1)))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE ((~ ((((rt0.c2))<((0.4020577140815642))))));
SELECT * FROM vt1, rt0 WHERE ((~ ((((rt0.c2))<((0.4020577140815642)))))) ORDER BY (((~ (rt0.c0))) NOT BETWEEN ('' COLLATE RTRIM) AND (TYPEOF(rt0.c1)))  NULLS FIRST LIMIT 0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(vt1.c0 AS TEXT) COLLATE BINARY);
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT) COLLATE BINARY)AND(((NOT (vt1.c0)) IN (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))));
SELECT * FROM rt0 WHERE (((((((rt0.c3) ISNULL))AND(((rt0.c1)<<(rt0.c1)))))OR(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c3 END)));
SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c3) ISNULL))AND(((rt0.c1)<<(rt0.c1)))))OR(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c3 END)))AND(x'585561'))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((+ (9.53433735E8))) LIMIT 1;
SELECT * FROM rt0 WHERE (((((((rt0.c3) ISNULL))AND(((rt0.c1)<<(rt0.c1)))))OR(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c3 END)));
SELECT DISTINCT * FROM rt0 WHERE (((((((((rt0.c3) ISNULL))AND(((rt0.c1)<<(rt0.c1)))))OR(CASE rt0.c3  WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c3 END)))AND(x'585561'))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((+ (9.53433735E8))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))IS NOT(((((((((((((x'')AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))IS NOT(((((((((((((x'')AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN 0.9245558258222484 THEN 'W_?fZJ#' ELSE vt1.c0 END AS BLOB));
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))IS NOT(((((((((((((x'')AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))IS NOT(((((((((((((x'')AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN 0.9245558258222484 THEN 'W_?fZJ#' ELSE vt1.c0 END AS BLOB));
SELECT * FROM vt1 WHERE ((NOT (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (((vt1.c0) IS TRUE) IN ()) DESC  NULLS LAST, (((vt1.c0 IN ())) NOTNULL) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((NOT (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND((NOT (NULL))))) ORDER BY (((vt1.c0) IS TRUE) IN ()) DESC  NULLS LAST, (((vt1.c0 IN ())) NOTNULL) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((NOT (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY (((vt1.c0) IS TRUE) IN ()) DESC  NULLS LAST, (((vt1.c0 IN ())) NOTNULL) ASC  NULLS FIRST;
SELECT COUNT(*) FROM rt0, vt1 WHERE (CAST((NOT (rt0.c2)) AS TEXT));
SELECT DISTINCT COUNT(*) FROM rt0 NOT INDEXED, vt1 WHERE (CAST((NOT (rt0.c2)) AS TEXT)) LIMIT 0x0;
SELECT ALL * FROM rt0, vt1 WHERE ((((((rt0.c0)GLOB(vt1.c0))))>=((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 END))));
SELECT * FROM rt0, vt1 WHERE ((((((((rt0.c0)GLOB(vt1.c0))))==((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 END))))AND('1018477116'))) ORDER BY (((rt0.c0 IN ()))*(CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c0 END))  NULLS LAST, (((vt1.c0) BETWEEN (rt0.c0) AND (vt1.c0)) IN ())  NULLS FIRST LIMIT 0X6;
SELECT ALL * FROM rt0, vt1 WHERE ((((((rt0.c0)GLOB(vt1.c0))))>=((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 END))));
SELECT * FROM rt0, vt1 WHERE ((((((((rt0.c0)GLOB(vt1.c0))))==((CASE rt0.c0  WHEN vt1.c0 THEN rt0.c0 END))))AND('1018477116'))) ORDER BY (((rt0.c0 IN ()))*(CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c0 END))  NULLS LAST, (((vt1.c0) BETWEEN (rt0.c0) AND (vt1.c0)) IN ())  NULLS FIRST LIMIT 0X6;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((((vt1.c0)AND('')))/(1612309434)));
SELECT DISTINCT COUNT(*) FROM vt1 NOT INDEXED, rt0 WHERE (((((vt1.c0)AND('')))/(1612309434))) ORDER BY (((~ (rt0.c3))) IS FALSE) ASC;
SELECT ALL * FROM rt0 WHERE ('-1853673218') ORDER BY ((((rt0.c0 COLLATE BINARY)AND(((NULL)||(rt0.c1)))))OR(((rt0.c2)||(rt0.c2)))), rt0.c1 DESC  NULLS LAST;
SELECT * FROM rt0 WHERE ((('-1853673218')AND((- (rt0.c3 COLLATE NOCASE))))) ORDER BY ((rt0.c0 COLLATE NOCASE) BETWEEN (CAST(rt0.c3 AS BLOB)) AND ((rt0.c3 IN (rt0.c3)))) ASC, ((0.2477663186353959) NOT BETWEEN (CAST(rt0.c2 AS BLOB)) AND (((rt0.c1) BETWEEN (rt0.c2) AND (x'51')))) DESC  NULLS FIRST, ((TYPEOF(DISTINCT rt0.c0)) NOT NULL) DESC INTERSECT SELECT ALL * FROM rt0 WHERE (((((CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END)OR(0.3719816757064869)))OR(rt0.c2))) ORDER BY ((rt0.c0 COLLATE NOCASE) BETWEEN (CAST(rt0.c3 AS BLOB)) AND ((rt0.c3 IN (rt0.c3)))) ASC, ((0.2477663186353959) NOT BETWEEN (CAST(rt0.c2 AS BLOB)) AND (((rt0.c1) BETWEEN (rt0.c2) AND (x'51')))) DESC  NULLS FIRST, ((TYPEOF(DISTINCT rt0.c0)) NOT NULL) DESC;
SELECT ALL * FROM rt0 WHERE ('-1853673218') ORDER BY ((((rt0.c0 COLLATE BINARY)AND(((NULL)||(rt0.c1)))))OR(((rt0.c2)||(rt0.c2)))), rt0.c1 DESC  NULLS LAST;
SELECT * FROM rt0 WHERE ((('-1853673218')AND((- (rt0.c3 COLLATE NOCASE))))) ORDER BY ((rt0.c0 COLLATE NOCASE) BETWEEN (CAST(rt0.c3 AS BLOB)) AND ((rt0.c3 IN (rt0.c3)))) ASC, ((0.2477663186353959) NOT BETWEEN (CAST(rt0.c2 AS BLOB)) AND (((rt0.c1) BETWEEN (rt0.c2) AND (x'51')))) DESC  NULLS FIRST, ((TYPEOF(DISTINCT rt0.c0)) NOT NULL) DESC INTERSECT SELECT ALL * FROM rt0 WHERE (((((CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END)OR(0.3719816757064869)))OR(rt0.c2))) ORDER BY ((rt0.c0 COLLATE NOCASE) BETWEEN (CAST(rt0.c3 AS BLOB)) AND ((rt0.c3 IN (rt0.c3)))) ASC, ((0.2477663186353959) NOT BETWEEN (CAST(rt0.c2 AS BLOB)) AND (((rt0.c1) BETWEEN (rt0.c2) AND (x'51')))) DESC  NULLS FIRST, ((TYPEOF(DISTINCT rt0.c0)) NOT NULL) DESC;
SELECT ALL COUNT(*) FROM rt0 WHERE (rt0.c1 COLLATE NOCASE);
SELECT COUNT(*) FROM rt0 WHERE (rt0.c1 COLLATE NOCASE) ORDER BY ((((rt0.c2)OR(((rt0.c2)&(rt0.c0)))))OR(CAST(rt0.c0 AS NUMERIC))) ASC, (- (((rt0.c2) NOT NULL))), (((CASE rt0.c3  WHEN NULL THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 END, TOTAL_CHANGES(), rt0.c3 COLLATE BINARY, 'z㢬gN7'))<(('*vY', '265752894', CAST(rt0.c3 AS REAL), LAST_INSERT_ROWID())))  NULLS LAST LIMIT 0x2;
SELECT * FROM vt1, rt0 WHERE ((('Q]')>=(CAST(vt1.c0 AS BLOB))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((('Q]')>=(CAST(vt1.c0 AS BLOB))))AND((((rt0.c1 COLLATE BINARY, ((rt0.c3)LIKE(rt0.c1)), rt0.c3, LOWER(DISTINCT vt1.c0)))>((((vt1.c0)>(rt0.c2)), ((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)), SUBSTR(rt0.c0, rt0.c3), json_array(rt0.c0, rt0.c3, vt1.c0, vt1.c0, vt1.c0))))))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (GLOB(((rt0.c3)||(rt0.c0)), rt0.c1));
SELECT * FROM vt1, rt0 WHERE ((('Q]')>=(CAST(vt1.c0 AS BLOB))));
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((('Q]')>=(CAST(vt1.c0 AS BLOB))))AND((((rt0.c1 COLLATE BINARY, ((rt0.c3)LIKE(rt0.c1)), rt0.c3, LOWER(DISTINCT vt1.c0)))>((((vt1.c0)>(rt0.c2)), ((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)), SUBSTR(rt0.c0, rt0.c3), json_array(rt0.c0, rt0.c3, vt1.c0, vt1.c0, vt1.c0))))))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (GLOB(((rt0.c3)||(rt0.c0)), rt0.c1));
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((((vt1.c0)==(rt0.c1)))>>(x'9a37')));
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (((((vt1.c0)=(rt0.c1)))>>(x'9a37'))) LIMIT 0X1;
SELECT ALL * FROM rt0 NATURAL JOIN vt1 WHERE (((((vt1.c0)==(rt0.c1)))>>(x'9a37')));
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (((((vt1.c0)=(rt0.c1)))>>(x'9a37'))) LIMIT 0X1;
SELECT * FROM rt0 WHERE (((((((((rt0.c1)&(rt0.c2)))AND((((rt0.c1, '-1532470271')) NOT BETWEEN ((rt0.c2, '')) AND ((rt0.c3, rt0.c3))))))AND(((rt0.c2) ISNULL))))AND(rt0.c0)));
SELECT * FROM rt0 WHERE (((((((((rt0.c1)&(rt0.c2)))AND((((rt0.c1, '-1532470271')) NOT BETWEEN ((rt0.c2, '')) AND ((rt0.c3, rt0.c3))))))AND(((rt0.c2) ISNULL))))AND(rt0.c0))) ORDER BY rt0.c2 DESC  NULLS FIRST, rt0.c1 LIMIT 0 INTERSECT SELECT ALL * FROM rt0 WHERE (rt0.c2) ORDER BY rt0.c2 DESC  NULLS FIRST, rt0.c1 LIMIT 0;
SELECT * FROM rt0 WHERE (((((((((rt0.c1)&(rt0.c2)))AND((((rt0.c1, '-1532470271')) NOT BETWEEN ((rt0.c2, '')) AND ((rt0.c3, rt0.c3))))))AND(((rt0.c2) ISNULL))))AND(rt0.c0)));
SELECT * FROM rt0 WHERE (((((((((rt0.c1)&(rt0.c2)))AND((((rt0.c1, '-1532470271')) NOT BETWEEN ((rt0.c2, '')) AND ((rt0.c3, rt0.c3))))))AND(((rt0.c2) ISNULL))))AND(rt0.c0))) ORDER BY rt0.c2 DESC  NULLS FIRST, rt0.c1 LIMIT 0 INTERSECT SELECT ALL * FROM rt0 WHERE (rt0.c2) ORDER BY rt0.c2 DESC  NULLS FIRST, rt0.c1 LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE ((('-943705296')<(((rt0.c1)!=(x''))))) ORDER BY ((((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN '-1440571497' WHEN rt0.c2 THEN rt0.c1 END)OR(rt0.c0)))AND((rt0.c2 IN ()))) ASC, CASE WHEN IFNULL(rt0.c3, vt1.c0) THEN (rt0.c3 IN (0.36548292018352113, rt0.c1)) WHEN ((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN (('0.12794404513750668')IS NOT(rt0.c3)) END;
SELECT ALL * FROM vt1, rt0 WHERE ((((('-943705296')<(((rt0.c1)<>(x'')))))AND((~ ((rt0.c2 IN (rt0.c2))))))) ORDER BY (((vt1.c0, rt0.c1)) BETWEEN ((COALESCE(rt0.c1, rt0.c2, rt0.c2, rt0.c1, rt0.c2), TYPEOF(DISTINCT rt0.c0))) AND ((((rt0.c2) ISNULL), rt0.c3 COLLATE BINARY)))  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((- (((rt0.c3)%(rt0.c3))))) ORDER BY (((vt1.c0, rt0.c1)) BETWEEN ((COALESCE(rt0.c1, rt0.c2, rt0.c2, rt0.c1, rt0.c2), TYPEOF(DISTINCT rt0.c0))) AND ((((rt0.c2) ISNULL), rt0.c3 COLLATE BINARY)))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE ((('-943705296')<(((rt0.c1)!=(x''))))) ORDER BY ((((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN '-1440571497' WHEN rt0.c2 THEN rt0.c1 END)OR(rt0.c0)))AND((rt0.c2 IN ()))) ASC, CASE WHEN IFNULL(rt0.c3, vt1.c0) THEN (rt0.c3 IN (0.36548292018352113, rt0.c1)) WHEN ((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN (('0.12794404513750668')IS NOT(rt0.c3)) END;
SELECT ALL MIN(rt0.c0) FROM rt0, vt1 WHERE (CAST(DATETIME('5987619', rt0.c0, rt0.c1) AS BLOB)) ORDER BY CASE WHEN '-696528366' THEN rt0.c2 WHEN ((rt0.c0)IS NOT(vt1.c0)) THEN ((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(0.46812638111186833)) WHEN rt0.c0 THEN COALESCE(rt0.c2, 0.5900889773567832) WHEN (((vt1.c0, rt0.c2))>=((rt0.c2, rt0.c0))) THEN rt0.c0 COLLATE NOCASE ELSE (((NULL, rt0.c0, x'', rt0.c3)) NOT BETWEEN ((rt0.c1, rt0.c2, rt0.c3, rt0.c1)) AND ((rt0.c2, -409980084, rt0.c3, rt0.c3))) END ASC  NULLS LAST;
SELECT DISTINCT MIN(rt0.c0) FROM rt0, vt1 WHERE (((CAST(DATETIME('5987619', rt0.c0, rt0.c1) AS BLOB))AND((((rt0.c3 IN ())) NOTNULL)))) ORDER BY CASE (~ (rt0.c2))  WHEN TYPEOF(DISTINCT rt0.c1) THEN x'' WHEN ((rt0.c3)<(rt0.c0)) THEN vt1.c0 ELSE (- (rt0.c1)) END ASC  NULLS FIRST, (CASE rt0.c2  WHEN 0.7207121098401899 THEN rt0.c1 END IN (CAST(NULL AS REAL))) ASC  NULLS FIRST, (NOT (vt1.c0)) COLLATE NOCASE LIMIT 0;
SELECT COUNT(*) FROM rt0 WHERE ((((rt0.c3)<=(rt0.c0)) IN ((('zn')<<(rt0.c3)), (((rt0.c1, rt0.c2, rt0.c3)) BETWEEN ((rt0.c0, rt0.c3, rt0.c2)) AND ((rt0.c3, rt0.c3, rt0.c2))), ((rt0.c2)|(rt0.c1)))));
SELECT DISTINCT COUNT(*) FROM rt0 WHERE ((((rt0.c3)==(rt0.c0)) IN ((('zn')<<(rt0.c3)), (((rt0.c1, rt0.c2, rt0.c3)) BETWEEN ((rt0.c0, rt0.c3, rt0.c2)) AND ((rt0.c3, rt0.c3, rt0.c2))), ((rt0.c2)|(rt0.c1))))) ORDER BY ((((rt0.c0) IS FALSE)) BETWEEN (SQLITE_COMPILEOPTION_GET(rt0.c1)) AND ((rt0.c1 IN (rt0.c3)))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL MAX(rt0.c3) FROM rt0 LEFT OUTER JOIN vt1 ON CASE WHEN '875598938' THEN rt0.c0 WHEN ((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)) THEN ((((((((rt0.c1)OR(rt0.c3)))AND('E')))OR(rt0.c3)))OR(rt0.c2)) WHEN CAST('*|96Q

' AS TEXT) THEN rt0.c1 END WHERE (rt0.c3) ORDER BY (- (TRIM(rt0.c2)))  NULLS FIRST, (('247840180')>(vt1.c0)) COLLATE NOCASE DESC  NULLS FIRST;
SELECT DISTINCT MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON CASE WHEN '875598938' THEN rt0.c0 WHEN ((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)) THEN ((((((((rt0.c1)OR(rt0.c3)))AND('E')))OR(rt0.c3)))OR(rt0.c2)) WHEN CAST('*|96Q

' AS TEXT) THEN rt0.c1 END WHERE (rt0.c3) ORDER BY (((((((rt0.c3 IN ()))AND(((rt0.c2)<=(rt0.c1)))))AND(LIKELIHOOD(rt0.c2, rt0.c2))))AND(UPPER(vt1.c0))), LOWER(DISTINCT (rt0.c2 IN (vt1.c0, rt0.c3, rt0.c2))) ASC, COALESCE(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)), rt0.c2, CAST(rt0.c3 AS INTEGER)) INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON CASE WHEN '875598938' THEN rt0.c0 WHEN ((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)) THEN ((((((((rt0.c1)OR(rt0.c3)))AND('E')))OR(rt0.c3)))OR(rt0.c2)) WHEN CAST('*|96Q

' AS TEXT) THEN rt0.c1 END WHERE (CAST(rt0.c2 COLLATE BINARY AS BLOB)) ORDER BY (((((((rt0.c3 IN ()))AND(((rt0.c2)<=(rt0.c1)))))AND(LIKELIHOOD(rt0.c2, rt0.c2))))AND(UPPER(vt1.c0))), LOWER(DISTINCT (rt0.c2 IN (vt1.c0, rt0.c3, rt0.c2))) ASC, COALESCE(((rt0.c3) BETWEEN (rt0.c1) AND (rt0.c3)), rt0.c2, CAST(rt0.c3 AS INTEGER));
SELECT MIN(rt0.c1) FROM rt0 WHERE ((NOT (((rt0.c0) IS FALSE)))) ORDER BY ((rt0.c3 COLLATE BINARY) NOTNULL) DESC  NULLS FIRST, ((((((HEX(rt0.c1))OR((((rt0.c0, rt0.c3, rt0.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, 0.7664946819218786, rt0.c3, rt0.c0)) AND ((0X4087d85b, rt0.c0, rt0.c3, rt0.c3))))))OR(rt0.c1 COLLATE BINARY)))AND(CASE rt0.c3  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c3 ELSE rt0.c0 END)), (((rt0.c3, rt0.c3, rt0.c3, rt0.c2)) NOT BETWEEN (((rt0.c0 IN ()), ((rt0.c2) NOT BETWEEN (rt0.c3) AND (x'')), ((rt0.c1)>(rt0.c3)), ((rt0.c3) IS FALSE))) AND (((rt0.c3 IN (rt0.c1, rt0.c0)), rt0.c1 COLLATE BINARY, ((rt0.c2) NOTNULL), json_valid(rt0.c3)))), rt0.c1  NULLS FIRST;
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE ((NOT (((rt0.c0) IS FALSE)))) ORDER BY (- (rt0.c2)), ((((((((((rt0.c3)*(rt0.c2)))OR(NULL)))OR(CASE rt0.c1  WHEN rt0.c3 THEN NULL ELSE rt0.c0 END)))AND(rt0.c1)))OR(((rt0.c0)==(rt0.c0))))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE (((((((((CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN 0.416147530695262 END)AND(CAST(rt0.c2 AS TEXT))))OR(((((((((rt0.c0)AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c1)))))AND(rt0.c1)))AND(((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c3))))) ORDER BY (- (rt0.c2)), ((((((((((rt0.c3)*(rt0.c2)))OR(NULL)))OR(CASE rt0.c1  WHEN rt0.c3 THEN NULL ELSE rt0.c0 END)))AND(rt0.c1)))OR(((rt0.c0)=(rt0.c0))))  NULLS FIRST LIMIT 0x1;
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE (((rt0.c2) IS FALSE) COLLATE BINARY COLLATE RTRIM) ORDER BY ((((((rt0.c0)IS(0.5132576010235039)))AND(CASE WHEN x'1ad855f9b4ccf25c' THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 END)))OR(((rt0.c0)+(rt0.c0)))) ASC, CASE WHEN (NOT (rt0.c2)) THEN rtreenode(NULL, vt1.c0) WHEN ((rt0.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)) THEN ((rt0.c1)%(rt0.c0)) END ASC  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE (((((rt0.c2) IS FALSE) COLLATE BINARY COLLATE RTRIM)AND((((((('206543958')OR(rt0.c1)))OR(rt0.c1))) IS TRUE)))) ORDER BY ((((((rt0.c0)IS(0.5132576010235039)))AND(CASE WHEN x'1ad855f9b4ccf25c' THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 END)))OR(((rt0.c0)+(rt0.c0)))) ASC, CASE WHEN (NOT (rt0.c2)) THEN rtreenode(NULL, vt1.c0) WHEN ((rt0.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)) THEN ((rt0.c1)%(rt0.c0)) END ASC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT MIN(vt1.c0) FROM vt1, rt0 WHERE ((((+ (rt0.c1)))&(NULL))) ORDER BY ((((((rt0.c0)IS(0.5132576010235039)))AND(CASE WHEN x'1ad855f9b4ccf25c' THEN vt1.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 END)))OR(((rt0.c0)+(rt0.c0)))) ASC, CASE WHEN (NOT (rt0.c2)) THEN rtreenode(NULL, vt1.c0) WHEN ((rt0.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)) THEN ((rt0.c1)%(rt0.c0)) END ASC  NULLS FIRST LIMIT 1;
SELECT * FROM vt1 WHERE ('y>^	2k}%');
SELECT ALL * FROM vt1 WHERE ((('y>^	2k}%')AND(vt1.c0)));
SELECT * FROM vt1 WHERE ('y>^	2k}%');
SELECT ALL * FROM vt1 WHERE ((('y>^	2k}%')AND(vt1.c0)));
SELECT ALL MIN(rt0.c1) FROM vt1 INNER JOIN rt0 ON CASE WHEN rt0.c3 COLLATE RTRIM THEN (rt0.c3 IN ()) WHEN rt0.c0 THEN ((vt1.c0) NOT BETWEEN (rt0.c3) AND (NULL)) ELSE CAST(rt0.c1 AS REAL) END WHERE (CAST(rt0.c3 AS INTEGER)) ORDER BY ((((rt0.c1) IS TRUE)) NOT BETWEEN (((((rt0.c3)AND(vt1.c0)))OR(rt0.c1))) AND (NULL)), (((0X116325ea)) BETWEEN ((CAST(rt0.c3 AS REAL))) AND (((~ (vt1.c0)))))  NULLS LAST, ((rt0.c3)>=(IFNULL(DISTINCT rt0.c1, NULL))), ((CAST(rt0.c3 AS NUMERIC))IS(json_object(rt0.c2, rt0.c2, NULL, rt0.c2))) DESC  NULLS LAST, (IFNULL(DISTINCT rt0.c2, rt0.c3) IN (((rt0.c1)LIKE(rt0.c2))));
SELECT MIN(rt0.c1) FROM vt1 INNER JOIN rt0 ON CASE WHEN rt0.c3 COLLATE RTRIM THEN (rt0.c3 IN ()) WHEN rt0.c0 THEN ((vt1.c0) NOT BETWEEN (rt0.c3) AND (NULL)) ELSE CAST(rt0.c1 AS REAL) END WHERE (CAST(rt0.c3 AS INTEGER)) ORDER BY (NOT (rt0.c1)) COLLATE NOCASE LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((json_patch(rt0.c1, rt0.c2))GLOB(((rt0.c3) IS TRUE))));
SELECT DISTINCT * FROM rt0 WHERE (((json_patch(rt0.c1, rt0.c2))GLOB(((rt0.c3) IS TRUE)))) ORDER BY ((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c3)))OR(rt0.c3)))AND(x'68')))OR(CAST(rt0.c1 AS INTEGER)))  NULLS FIRST, ((COALESCE(rt0.c0, rt0.c1, NULL))|(((((((rt0.c1)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((NULL))<>((x'')))) ORDER BY ((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c3)))OR(rt0.c3)))AND(x'68')))OR(CAST(rt0.c1 AS INTEGER)))  NULLS FIRST, ((COALESCE(rt0.c0, rt0.c1, NULL))|(((((((rt0.c1)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c1))));
SELECT ALL * FROM rt0 WHERE (((json_patch(rt0.c1, rt0.c2))GLOB(((rt0.c3) IS TRUE))));
SELECT DISTINCT * FROM rt0 WHERE (((json_patch(rt0.c1, rt0.c2))GLOB(((rt0.c3) IS TRUE)))) ORDER BY ((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c3)))OR(rt0.c3)))AND(x'68')))OR(CAST(rt0.c1 AS INTEGER)))  NULLS FIRST, ((COALESCE(rt0.c0, rt0.c1, NULL))|(((((((rt0.c1)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((NULL))<>((x'')))) ORDER BY ((((((((((rt0.c0)AND(rt0.c3)))OR(rt0.c3)))OR(rt0.c3)))AND(x'68')))OR(CAST(rt0.c1 AS INTEGER)))  NULLS FIRST, ((COALESCE(rt0.c0, rt0.c1, NULL))|(((((((rt0.c1)AND(rt0.c3)))AND(rt0.c1)))OR(rt0.c1))));
SELECT * FROM rt0 WHERE (((((rt0.c0) NOTNULL))+((- (rt0.c0))))) ORDER BY CASE WHEN ((rt0.c0) NOT NULL) THEN (((rt0.c0, rt0.c1))<=((rt0.c3, rt0.c1))) END  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((((rt0.c0) NOTNULL))+((- (rt0.c0))))) ORDER BY CASE WHEN ((rt0.c0) NOT NULL) THEN (((rt0.c0, rt0.c1))<=((rt0.c3, rt0.c1))) END  NULLS FIRST LIMIT 0x3;
SELECT * FROM rt0 WHERE (((((rt0.c0) NOTNULL))+((- (rt0.c0))))) ORDER BY CASE WHEN ((rt0.c0) NOT NULL) THEN (((rt0.c0, rt0.c1))<=((rt0.c3, rt0.c1))) END  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (((((rt0.c0) NOTNULL))+((- (rt0.c0))))) ORDER BY CASE WHEN ((rt0.c0) NOT NULL) THEN (((rt0.c0, rt0.c1))<=((rt0.c3, rt0.c1))) END  NULLS FIRST LIMIT 0x3;
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (((CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 END) BETWEEN ((NOT (rt0.c1))) AND ('-1153288785'))) ORDER BY (((x'8485' IN (rt0.c0, rt0.c2)))>(json_remove(rt0.c1, vt1.c0))) DESC;
SELECT MIN(rt0.c0) FROM rt0, vt1 WHERE (((CASE WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 END) BETWEEN ((NOT (rt0.c1))) AND ('-1153288785'))) ORDER BY CASE rt0.c2  WHEN ((vt1.c0)>=(0.5098753895280567)) THEN rt0.c0 WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (rt0.c1)) THEN (((rt0.c1, rt0.c0, 0.022128182064032997))>=((rt0.c2, rt0.c1, rt0.c0))) WHEN ((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c1)) THEN (((rt0.c1, rt0.c1, rt0.c0)) BETWEEN ((vt1.c0, rt0.c1, rt0.c2)) AND ((rt0.c0, vt1.c0, rt0.c1))) END, ((((((((((((((-1e500) BETWEEN (vt1.c0) AND (rt0.c2)))AND(CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c3 WHEN vt1.c0 THEN rt0.c3 WHEN rt0.c0 THEN 3508589.0 WHEN rt0.c0 THEN rt0.c1 END)))OR(((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c2)))))AND((NOT (rt0.c0)))))AND(CAST(rt0.c0 AS INTEGER))))OR(CAST(rt0.c2 AS BLOB))))AND(NULLIF(rt0.c1, rt0.c0))) ASC;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON vt1.c0 WHERE (((CAST(rt0.c3 AS REAL))>=((rt0.c3 IN (rt0.c0, rt0.c1))))) ORDER BY rt0.c0 COLLATE NOCASE ASC  NULLS FIRST;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON vt1.c0 WHERE (((((CAST(rt0.c3 AS REAL))>=((rt0.c3 IN (rt0.c0, rt0.c1)))))AND('zF'))) ORDER BY (- ((((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND ((vt1.c0))))) DESC;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON vt1.c0 WHERE (((CAST(rt0.c3 AS REAL))>=((rt0.c3 IN (rt0.c0, rt0.c1))))) ORDER BY rt0.c0 COLLATE NOCASE ASC  NULLS FIRST;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON vt1.c0 WHERE (((((CAST(rt0.c3 AS REAL))>=((rt0.c3 IN (rt0.c0, rt0.c1)))))AND('zF'))) ORDER BY (- ((((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND ((vt1.c0))))) DESC;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON rt0.c2 WHERE (((((((((vt1.c0)OR((- (vt1.c0)))))OR((vt1.c0 IN (rt0.c3)))))AND(((rt0.c2)>=(rt0.c3)))))AND(vt1.c0)));
SELECT DISTINCT * FROM vt1 LEFT OUTER JOIN rt0 ON rt0.c2 WHERE (((((((((vt1.c0)OR((- (vt1.c0)))))OR((vt1.c0 IN (rt0.c3)))))AND(((rt0.c2)==(rt0.c3)))))AND(vt1.c0)));
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON rt0.c2 WHERE (((((((((vt1.c0)OR((- (vt1.c0)))))OR((vt1.c0 IN (rt0.c3)))))AND(((rt0.c2)>=(rt0.c3)))))AND(vt1.c0)));
SELECT DISTINCT * FROM vt1 LEFT OUTER JOIN rt0 ON rt0.c2 WHERE (((((((((vt1.c0)OR((- (vt1.c0)))))OR((vt1.c0 IN (rt0.c3)))))AND(((rt0.c2)==(rt0.c3)))))AND(vt1.c0)));
SELECT MAX(vt1.c0) FROM vt1, rt0 WHERE (((rt0.c2) NOT BETWEEN (CAST(rt0.c2 AS NUMERIC)) AND (CAST(rt0.c2 AS TEXT)))) ORDER BY UPPER(((rt0.c2)<(rt0.c3)))  NULLS FIRST, 0.3027914159714302;
SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE (((rt0.c2) NOT BETWEEN (CAST(rt0.c2 AS NUMERIC)) AND (CAST(rt0.c2 AS TEXT)))) ORDER BY (((vt1.c0, rt0.c3, vt1.c0, rt0.c1)) BETWEEN (((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1))), (rt0.c2 IN (NULL)), ((vt1.c0) NOT NULL), '-1223300207')) AND ((UPPER(DISTINCT rt0.c1), (rt0.c3 IN (rt0.c0, rt0.c3)), ((rt0.c0) NOTNULL), rt0.c0 COLLATE RTRIM))) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1, rt0 WHERE (CASE (((rt0.c2)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))  WHEN CASE WHEN vt1.c0 THEN '' WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt1.c0 END THEN NULL WHEN ((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c0)) THEN ((rt0.c0)/(rt0.c1)) ELSE (+ (rt0.c3)) END) ORDER BY (((vt1.c0, rt0.c3, vt1.c0, rt0.c1)) BETWEEN (((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c1))), (rt0.c2 IN (NULL)), ((vt1.c0) NOT NULL), '-1223300207')) AND ((UPPER(DISTINCT rt0.c1), (rt0.c3 IN (rt0.c0, rt0.c3)), ((rt0.c0) NOTNULL), rt0.c0 COLLATE RTRIM)));
SELECT ALL MIN(rt0.c3) FROM vt1 CROSS JOIN rt0 ON ((((((((vt1.c0)AND(rt0.c3)))AND(rt0.c0)))AND(vt1.c0)))-(NULLIF(rt0.c1, rt0.c1))) WHERE (CAST(rt0.c2 COLLATE NOCASE AS INTEGER)) ORDER BY CAST('莓' AS TEXT) DESC  NULLS FIRST, (((((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c3)))AND(vt1.c0)) IN (((rt0.c1) NOT BETWEEN (NULL) AND (rt0.c3)))), (- (x'648d')) DESC  NULLS LAST;
SELECT MIN(rt0.c3) FROM vt1 CROSS JOIN rt0 ON ((((((((vt1.c0)AND(rt0.c3)))AND(rt0.c0)))AND(vt1.c0)))-(NULLIF(rt0.c1, rt0.c1))) WHERE (((CAST(rt0.c2 COLLATE NOCASE AS INTEGER))AND(((((((UPPER(vt1.c0))AND((((rt0.c0, vt1.c0)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((vt1.c0, rt0.c0))))))AND(0Xffffffffe02eb371)))AND(rt0.c1))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c1)))==(CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c3 THEN NULL ELSE rt0.c3 END))  NULLS FIRST LIMIT 0 INTERSECT SELECT MIN(rt0.c3) FROM vt1 CROSS JOIN rt0 ON ((((((((vt1.c0)AND(rt0.c3)))AND(rt0.c0)))AND(vt1.c0)))-(NULLIF(rt0.c1, rt0.c1))) WHERE ((CAST(rt0.c3 AS NUMERIC) IN (rt0.c1 COLLATE BINARY))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c1)))=(CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c3 THEN NULL ELSE rt0.c3 END))  NULLS FIRST LIMIT 0x0;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0)<(vt1.c0))) ORDER BY ((((vt1.c0)*(vt1.c0))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0)<(vt1.c0)))AND((CAST(vt1.c0 AS REAL) IN ())))) ORDER BY CAST(vt1.c0 AS NUMERIC) ASC  NULLS LAST, (+ ((((0.35795302195238243))<=((vt1.c0)))))  NULLS LAST;
SELECT * FROM rt0 WHERE (((rt0.c1 COLLATE NOCASE) IS FALSE));
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c1 COLLATE NOCASE) IS FALSE)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 END AS REAL)) LIMIT 2;
SELECT * FROM rt0 WHERE (((rt0.c1 COLLATE NOCASE) IS FALSE));
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c1 COLLATE NOCASE) IS FALSE)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c0 END AS REAL)) LIMIT 2;
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c0)-(vt1.c0)) IN (vt1.c0 COLLATE BINARY, ((vt1.c0)LIKE(vt1.c0))))) ORDER BY 'dh>', (+ ((NOT (vt1.c0)))) DESC;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((vt1.c0)-(vt1.c0)) IN (vt1.c0 COLLATE BINARY, ((vt1.c0)LIKE(vt1.c0))))) ORDER BY CAST((- (vt1.c0)) AS INTEGER) ASC  NULLS FIRST, (~ ((((vt1.c0, vt1.c0))!=((0.020592241151920265, vt1.c0))))) ASC LIMIT 1;
SELECT ALL * FROM rt0 WHERE ((((rt0.c0 COLLATE RTRIM))!=((((NULL) NOT BETWEEN (rt0.c1) AND (rt0.c1))))));
SELECT * FROM rt0 WHERE ((((((rt0.c0 COLLATE RTRIM))!=((((NULL) NOT BETWEEN (rt0.c1) AND (rt0.c1))))))AND((((rt0.c2 IN (rt0.c2)))||(rt0.c3))))) ORDER BY CAST(((rt0.c1)==(rt0.c0)) AS BLOB) ASC, (CAST(rt0.c0 AS BLOB) IN ());
SELECT ALL * FROM rt0 WHERE ((((rt0.c0 COLLATE RTRIM))!=((((NULL) NOT BETWEEN (rt0.c1) AND (rt0.c1))))));
SELECT * FROM rt0 WHERE ((((((rt0.c0 COLLATE RTRIM))!=((((NULL) NOT BETWEEN (rt0.c1) AND (rt0.c1))))))AND((((rt0.c2 IN (rt0.c2)))||(rt0.c3))))) ORDER BY CAST(((rt0.c1)==(rt0.c0)) AS BLOB) ASC, (CAST(rt0.c0 AS BLOB) IN ());
SELECT MAX(rt0.c3) FROM rt0 WHERE ((((rt0.c0 IN (rt0.c1))) BETWEEN (MIN(rt0.c3, rt0.c2)) AND ((rt0.c3 IN (NULL, rt0.c1))))) ORDER BY -5.1949795E8;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((((((rt0.c0 IN (rt0.c1))) BETWEEN (MIN(rt0.c3, rt0.c2)) AND ((rt0.c3 IN (NULL, rt0.c1)))))AND(((('cw&O', (((rt0.c1, rt0.c3))<=((rt0.c0, rt0.c0)))))!=((((rt0.c3)GLOB(rt0.c1)), (rt0.c1 IN (rt0.c3)))))))) ORDER BY -5.1949795E8 LIMIT 1 INTERSECT SELECT MAX(rt0.c3) FROM rt0 WHERE ((((rt0.c3)LIKE(x'0d51')) IN (TRIM(x'0cc0', rt0.c1)))) ORDER BY -5.1949795E8 LIMIT 0x1;
SELECT MAX(rt0.c2) FROM vt1 LEFT OUTER JOIN rt0 ON ((((rt0.c2)%(NULL))) NOT BETWEEN (((rt0.c3)OR(rt0.c0))) AND (vt1.c0)) WHERE (((rt0.c3 COLLATE BINARY)=(CAST(vt1.c0 AS INTEGER)))) ORDER BY (((((((+ (rt0.c1)))AND(TIME(rt0.c2, rt0.c2, vt1.c0, vt1.c0))))OR((vt1.c0 IN ()))))AND(((((((((rt0.c1)OR(vt1.c0)))OR(rt0.c2)))OR(vt1.c0)))OR('1501963509'))))  NULLS FIRST, ((((((vt1.c0)OR(rt0.c3)))OR(vt1.c0)))AND(vt1.c0)) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL MAX(rt0.c2) FROM vt1 INNER JOIN rt0 ON ((((rt0.c2)%(NULL))) NOT BETWEEN (((rt0.c3)OR(rt0.c0))) AND (vt1.c0)) WHERE (((((rt0.c3 COLLATE BINARY)=(CAST(vt1.c0 AS INTEGER))))AND(-1445824893))) ORDER BY (((((((vt1.c0)OR(rt0.c0)))AND(rt0.c3)), rt0.c3 COLLATE BINARY, (rt0.c2 IN (rt0.c2)), ((rt0.c3) NOT BETWEEN (vt1.c0) AND (rt0.c1)), (rt0.c0 IN ())))>=((((rt0.c3) BETWEEN (rt0.c3) AND (vt1.c0)), ((rt0.c0)LIKE(rt0.c1)), CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c3 ELSE vt1.c0 END, json_object(rt0.c3, '~', vt1.c0), (vt1.c0 IN ())))), ((NOT (NULL)) IN (CASE WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c1 END, (NOT ('609442925')), ((((0.15736416123838726)AND(rt0.c3)))OR(rt0.c1))))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE (CAST(rt0.c2 AS TEXT) COLLATE BINARY);
SELECT ALL * FROM rt0, vt1 WHERE (CAST(rt0.c2 AS TEXT) COLLATE BINARY);
SELECT ALL * FROM rt0, vt1 WHERE (CAST(rt0.c2 AS TEXT) COLLATE BINARY);
SELECT ALL * FROM rt0, vt1 WHERE (CAST(rt0.c2 AS TEXT) COLLATE BINARY);
SELECT COUNT(*) FROM rt0, vt1 WHERE ((((+ (rt0.c3))) IS FALSE)) ORDER BY NULL DESC  NULLS LAST;
SELECT COUNT(*) FROM rt0, vt1 WHERE ((((((+ (rt0.c3))) IS FALSE))AND(LIKELY(DISTINCT rt0.c0)))) ORDER BY NULL DESC  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c1 IN (rt0.c0)))LIKE(((rt0.c2) IS TRUE)))) ORDER BY NULL DESC  NULLS LAST LIMIT 1;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((x'640f')AND(LTRIM(vt1.c0))))OR(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((((((x'640f')AND(LTRIM(vt1.c0))))OR(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))))OR(((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))))AND(NULL))) ORDER BY (CAST(vt1.c0 AS REAL) IN ((~ (x'')), ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))) DESC, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)>('839021629'))  NULLS FIRST, ((((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(NULL)))OR(vt1.c0)))AND(0.8822746319200143)))AND(NULL))) NOT BETWEEN ((((vt1.c0, vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, vt1.c0)))) AND (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '251640000' WHEN vt1.c0 THEN '1917787579' WHEN -1.705485783E9 THEN vt1.c0 END)) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((0X2d99f546 IN ()))>>((NULL IN (vt1.c0, vt1.c0))))) ORDER BY (CAST(vt1.c0 AS REAL) IN ((~ (x'')), ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))) DESC, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)>('839021629'))  NULLS FIRST, ((((((((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(NULL)))OR(vt1.c0)))AND(0.8822746319200143)))AND(NULL))) NOT BETWEEN ((((vt1.c0, vt1.c0, vt1.c0))>((vt1.c0, vt1.c0, vt1.c0)))) AND (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN '251640000' WHEN vt1.c0 THEN '1917787579' WHEN -1.705485783E9 THEN vt1.c0 END));
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))) WHERE ((((vt1.c0, vt1.c0, rt0.c2)) NOT BETWEEN (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((vt1.c0))), (+ (rt0.c3)), (((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))) AND (((((('-2001860685')OR(rt0.c0)))AND(rt0.c2)), CAST(x'cb' AS TEXT), rt0.c2)))) ORDER BY (((rt0.c0, rt0.c2, rt0.c2)) NOT BETWEEN ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (vt1.c0)), ((vt1.c0)-(rt0.c2)), (rt0.c3 IN (rt0.c0)))) AND (((('%	O_ｳC')&(rt0.c0)), x'b138', CAST(rt0.c2 AS REAL))));
SELECT * FROM vt1 INNER JOIN rt0 ON (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))) WHERE ((((vt1.c0, vt1.c0, rt0.c2)) NOT BETWEEN (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((vt1.c0))), (+ (rt0.c3)), (((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))) AND (((((('-2001860685')OR(rt0.c0)))AND(rt0.c2)), CAST(x'cb' AS TEXT), rt0.c2)))) ORDER BY ((rt0.c1) NOT BETWEEN (((rt0.c0)*(vt1.c0))) AND (((rt0.c1)*(vt1.c0)))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))) WHERE ((+ (rt0.c2))) ORDER BY ((rt0.c1) NOT BETWEEN (((rt0.c0)*(vt1.c0))) AND (((rt0.c1)*(vt1.c0)))) ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt1 LEFT OUTER JOIN rt0 ON (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))) WHERE ((((vt1.c0, vt1.c0, rt0.c2)) NOT BETWEEN (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((vt1.c0))), (+ (rt0.c3)), (((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))) AND (((((('-2001860685')OR(rt0.c0)))AND(rt0.c2)), CAST(x'cb' AS TEXT), rt0.c2)))) ORDER BY (((rt0.c0, rt0.c2, rt0.c2)) NOT BETWEEN ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (vt1.c0)), ((vt1.c0)-(rt0.c2)), (rt0.c3 IN (rt0.c0)))) AND (((('%	O_ｳC')&(rt0.c0)), x'b138', CAST(rt0.c2 AS REAL))));
SELECT * FROM vt1 INNER JOIN rt0 ON (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))) WHERE ((((vt1.c0, vt1.c0, rt0.c2)) NOT BETWEEN (((((rt0.c2)) BETWEEN ((rt0.c0)) AND ((vt1.c0))), (+ (rt0.c3)), (((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))) AND (((((('-2001860685')OR(rt0.c0)))AND(rt0.c2)), CAST(x'cb' AS TEXT), rt0.c2)))) ORDER BY ((rt0.c1) NOT BETWEEN (((rt0.c0)*(vt1.c0))) AND (((rt0.c1)*(vt1.c0)))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON (NOT (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))) WHERE ((+ (rt0.c2))) ORDER BY ((rt0.c1) NOT BETWEEN (((rt0.c0)*(vt1.c0))) AND (((rt0.c1)*(vt1.c0)))) ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (UNLIKELY(((rt0.c3) BETWEEN (0.6192102572362637) AND (rt0.c3)))) ORDER BY (((x'd9', rt0.c2)) NOT BETWEEN ((rt0.c3 COLLATE NOCASE, ((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c1)))AND(0.14950153637425767)))OR(vt1.c0)))) AND ((((rt0.c3) BETWEEN (rt0.c1) AND (x'3769')), rt0.c2 COLLATE RTRIM))) ASC, ((((NULL)>>(rt0.c0)))>=(rt0.c0 COLLATE BINARY)), NULL ASC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE (((UNLIKELY(((rt0.c3) BETWEEN (0.6192102572362637) AND (rt0.c3))))AND((((((rt0.c2, vt1.c0, x'35', rt0.c3))<>((rt0.c1, rt0.c2, rt0.c0, rt0.c2)))) BETWEEN (ROUND(rt0.c2, vt1.c0)) AND (LIKELY(DISTINCT rt0.c3)))))) ORDER BY (((x'd9', rt0.c2)) NOT BETWEEN ((rt0.c3 COLLATE NOCASE, ((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c1)))AND(0.14950153637425767)))OR(vt1.c0)))) AND ((((rt0.c3) BETWEEN (rt0.c1) AND (x'3769')), rt0.c2 COLLATE RTRIM))) ASC, ((((NULL)>>(rt0.c0)))>=(rt0.c0 COLLATE BINARY)), NULL ASC  NULLS LAST INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE (CASE WHEN ((((rt0.c0)AND('366266377')))OR(rt0.c0)) THEN HEX(rt0.c3) ELSE ((rt0.c3) NOT NULL) END) ORDER BY (((x'd9', rt0.c2)) NOT BETWEEN ((rt0.c3 COLLATE NOCASE, ((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c1)))AND(0.14950153637425767)))OR(vt1.c0)))) AND ((((rt0.c3) BETWEEN (rt0.c1) AND (x'3769')), rt0.c2 COLLATE RTRIM))) ASC, ((((NULL)>>(rt0.c0)))>=(rt0.c0 COLLATE BINARY)), NULL ASC  NULLS LAST;
SELECT ALL MAX(rt0.c0) FROM rt0, vt1 WHERE (((UNLIKELY(vt1.c0))-((('oQᄔ0')<(rt0.c3))))) ORDER BY CASE CAST(vt1.c0 AS NUMERIC)  WHEN CAST(rt0.c0 AS INTEGER) THEN CAST(rt0.c0 AS BLOB) WHEN (NOT (rt0.c2)) THEN ((((((((rt0.c2)OR(rt0.c2)))OR(vt1.c0)))AND(rt0.c3)))AND(rt0.c3)) END, ((((+ (rt0.c2)), (((rt0.c0, rt0.c3)) BETWEEN ((x'5b1f', vt1.c0)) AND ((vt1.c0, rt0.c3)))))<((rt0.c3 COLLATE NOCASE, rt0.c0 COLLATE BINARY))) ASC  NULLS FIRST;
SELECT ALL MAX(rt0.c0) FROM rt0, vt1 WHERE (((UNLIKELY(vt1.c0))-((('oQᄔ0')<(rt0.c3))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((CAST(rt0.c3 AS NUMERIC))) AND ((('7fPzQFP' IN (rt0.c3, vt1.c0)))))  NULLS FIRST, (vt1.c0 IN (rt0.c0)) COLLATE NOCASE  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt1 WHERE (((TYPEOF(DISTINCT vt1.c0)) IS FALSE));
SELECT DISTINCT * FROM vt1 WHERE (((TYPEOF(DISTINCT vt1.c0)) IS FALSE));
SELECT ALL * FROM vt1 WHERE (((TYPEOF(DISTINCT vt1.c0)) IS FALSE));
SELECT DISTINCT * FROM vt1 WHERE (((TYPEOF(DISTINCT vt1.c0)) IS FALSE));
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE (rt0.c3);
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE (rt0.c3) ORDER BY rt0.c0 DESC LIMIT 0;
SELECT ALL * FROM vt1 WHERE (COALESCE(DISTINCT ((((((((vt1.c0)AND(vt1.c0)))OR('b')))AND(vt1.c0)))OR(vt1.c0)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))));
SELECT ALL * FROM vt1 WHERE (COALESCE(DISTINCT ((((((((vt1.c0)AND(vt1.c0)))OR('b')))AND(vt1.c0)))OR(vt1.c0)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY ((x'0fc6')<=(UPPER(vt1.c0)));
SELECT ALL * FROM vt1 WHERE (COALESCE(DISTINCT ((((((((vt1.c0)AND(vt1.c0)))OR('b')))AND(vt1.c0)))OR(vt1.c0)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))));
SELECT ALL * FROM vt1 WHERE (COALESCE(DISTINCT ((((((((vt1.c0)AND(vt1.c0)))OR('b')))AND(vt1.c0)))OR(vt1.c0)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY ((x'0fc6')<=(UPPER(vt1.c0)));
SELECT MAX(rt0.c3) FROM rt0 WHERE (((load_extension(rt0.c0)) NOT BETWEEN (rt0.c2) AND (((rt0.c2) IS TRUE))));
SELECT MAX(rt0.c3) FROM rt0 WHERE (((load_extension(rt0.c0)) NOT BETWEEN (rt0.c2) AND (((rt0.c2) IS TRUE)))) ORDER BY CASE WHEN ((rt0.c1)<(rt0.c3)) THEN rt0.c0 ELSE ((NULL) BETWEEN (rt0.c2) AND (rt0.c2)) END DESC;
SELECT * FROM vt1 WHERE (SQLITE_SOURCE_ID());
SELECT * FROM vt1 WHERE (SQLITE_SOURCE_ID()) LIMIT 1 INTERSECT SELECT * FROM vt1 WHERE ('986973421') LIMIT 1;
SELECT * FROM vt1 WHERE (SQLITE_SOURCE_ID());
SELECT * FROM vt1 WHERE (SQLITE_SOURCE_ID()) LIMIT 1 INTERSECT SELECT * FROM vt1 WHERE ('986973421') LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0) NOTNULL) COLLATE BINARY COLLATE NOCASE);
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0) NOTNULL) COLLATE BINARY COLLATE NOCASE)AND('SM''/rL\Fu'))) ORDER BY (('0.7267813554985081') NOTNULL) DESC LIMIT 0X3 INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CAST(vt1.c0 COLLATE BINARY AS NUMERIC)) ORDER BY (('0.7267813554985081') NOTNULL) DESC LIMIT 3;
SELECT * FROM vt1, rt0 WHERE ((+ (rt0.c0))) ORDER BY rt0.c3 DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((+ (rt0.c0)))AND(('-567182715' IN (CASE '-775378675'  WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c3 END))))) ORDER BY rt0.c3 DESC LIMIT 0x1;
SELECT * FROM vt1, rt0 WHERE ((+ (rt0.c0))) ORDER BY rt0.c3 DESC;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((+ (rt0.c0)))AND(('-567182715' IN (CASE '-775378675'  WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c3 END))))) ORDER BY rt0.c3 DESC LIMIT 0x1;
SELECT ALL COUNT(*) FROM rt0 WHERE (((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 END)-(CASE WHEN rt0.c1 THEN '-58887415' WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END))) ORDER BY CAST(rt0.c1 COLLATE NOCASE AS INTEGER) DESC, ((((((rt0.c1)OR(rt0.c3)))OR(rt0.c0))) BETWEEN ('1893300537') AND (((((((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))OR('710798308')))AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c2)))) ASC  NULLS LAST, UNLIKELY(TYPEOF(rt0.c3));
SELECT COUNT(*) FROM rt0 WHERE (((CASE rt0.c3  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 END)-(CASE WHEN rt0.c1 THEN '-58887415' WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c2 END))) ORDER BY CAST(rt0.c1 COLLATE NOCASE AS INTEGER) DESC, ((((((rt0.c1)OR(rt0.c3)))OR(rt0.c0))) BETWEEN ('1893300537') AND (((((((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))OR('710798308')))AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c2)))) ASC  NULLS LAST, UNLIKELY(TYPEOF(rt0.c3)) INTERSECT SELECT ALL COUNT(*) FROM rt0 WHERE (rt0.c3) ORDER BY CAST(rt0.c1 COLLATE NOCASE AS INTEGER) DESC, ((((((rt0.c1)OR(rt0.c3)))OR(rt0.c0))) BETWEEN ('1893300537') AND (((((((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))OR('710798308')))AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c2)))) ASC  NULLS LAST, UNLIKELY(TYPEOF(rt0.c3));
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (NULL) ORDER BY ((CASE 0.556492326695169  WHEN 'ퟋIiGG' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '' END)<(CAST(rt0.c1 AS REAL))) DESC  NULLS FIRST, (((vt1.c0)) NOT BETWEEN (((rt0.c0 IN (rt0.c0)))) AND ((((rt0.c2) BETWEEN (rt0.c3) AND (x'5c')))));
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (NULL) ORDER BY ((CASE 0.556492326695169  WHEN 'ퟋIiGG' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '' END)<(CAST(rt0.c1 AS REAL))) DESC  NULLS FIRST, (((vt1.c0)) NOT BETWEEN (((rt0.c0 IN (rt0.c0)))) AND ((((rt0.c2) BETWEEN (rt0.c3) AND (x'5c'))))) INTERSECT SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (((((((((vt1.c0)AND(rt0.c2)))OR(rt0.c1)))AND(rt0.c2)))<>(CASE rt0.c0  WHEN x'' THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY ((CASE 0.556492326695169  WHEN 'ퟋIiGG' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '' END)<(CAST(rt0.c1 AS REAL))) DESC  NULLS FIRST, (((vt1.c0)) NOT BETWEEN (((rt0.c0 IN (rt0.c0)))) AND ((((rt0.c2) BETWEEN (rt0.c3) AND (x'5c')))));
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE (NULL) ORDER BY ((CASE 0.556492326695169  WHEN 'ퟋIiGG' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '' END)<(CAST(rt0.c1 AS REAL))) DESC  NULLS FIRST, (((vt1.c0)) NOT BETWEEN (((rt0.c0 IN (rt0.c0)))) AND ((((rt0.c2) BETWEEN (rt0.c3) AND (x'5c')))));
SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (NULL) ORDER BY ((CASE 0.556492326695169  WHEN 'ퟋIiGG' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '' END)<(CAST(rt0.c1 AS REAL))) DESC  NULLS FIRST, (((vt1.c0)) NOT BETWEEN (((rt0.c0 IN (rt0.c0)))) AND ((((rt0.c2) BETWEEN (rt0.c3) AND (x'5c'))))) INTERSECT SELECT DISTINCT * FROM vt1 NATURAL JOIN rt0 WHERE (((((((((vt1.c0)AND(rt0.c2)))OR(rt0.c1)))AND(rt0.c2)))<>(CASE rt0.c0  WHEN x'' THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY ((CASE 0.556492326695169  WHEN 'ퟋIiGG' THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN '' END)<(CAST(rt0.c1 AS REAL))) DESC  NULLS FIRST, (((vt1.c0)) NOT BETWEEN (((rt0.c0 IN (rt0.c0)))) AND ((((rt0.c2) BETWEEN (rt0.c3) AND (x'5c')))));
SELECT ALL * FROM vt1, rt0 WHERE ('-695584596');
SELECT * FROM vt1, rt0 WHERE ('-695584596') ORDER BY (((CASE WHEN vt1.c0 THEN vt1.c0 END, UPPER(rt0.c2), (+ (rt0.c0))))>=((UNLIKELY(rt0.c2), (((rt0.c3, x'23f85bbc', rt0.c1, rt0.c1, rt0.c2, vt1.c0, rt0.c1))==((rt0.c2, vt1.c0, rt0.c0, rt0.c2, rt0.c0, vt1.c0, rt0.c0))), CAST('1335360487' AS INTEGER)))) DESC, ((x'9d') NOT NULL)  NULLS LAST, ((((x'') ISNULL))OR(((vt1.c0)<>(NULL)))) DESC  NULLS LAST LIMIT 3 INTERSECT SELECT * FROM vt1, rt0 WHERE (((CAST(rt0.c2 AS INTEGER)) IS FALSE)) ORDER BY (((CASE WHEN vt1.c0 THEN vt1.c0 END, UPPER(rt0.c2), (+ (rt0.c0))))>=((UNLIKELY(rt0.c2), (((rt0.c3, x'23f85bbc', rt0.c1, rt0.c1, rt0.c2, vt1.c0, rt0.c1))=((rt0.c2, vt1.c0, rt0.c0, rt0.c2, rt0.c0, vt1.c0, rt0.c0))), CAST('1335360487' AS INTEGER)))) DESC, ((x'9d') NOT NULL)  NULLS LAST, ((((x'') ISNULL))OR(((vt1.c0)!=(NULL)))) DESC  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt1, rt0 WHERE ('-695584596');
SELECT * FROM vt1, rt0 WHERE ('-695584596') ORDER BY (((CASE WHEN vt1.c0 THEN vt1.c0 END, UPPER(rt0.c2), (+ (rt0.c0))))>=((UNLIKELY(rt0.c2), (((rt0.c3, x'23f85bbc', rt0.c1, rt0.c1, rt0.c2, vt1.c0, rt0.c1))==((rt0.c2, vt1.c0, rt0.c0, rt0.c2, rt0.c0, vt1.c0, rt0.c0))), CAST('1335360487' AS INTEGER)))) DESC, ((x'9d') NOT NULL)  NULLS LAST, ((((x'') ISNULL))OR(((vt1.c0)<>(NULL)))) DESC  NULLS LAST LIMIT 3 INTERSECT SELECT * FROM vt1, rt0 WHERE (((CAST(rt0.c2 AS INTEGER)) IS FALSE)) ORDER BY (((CASE WHEN vt1.c0 THEN vt1.c0 END, UPPER(rt0.c2), (+ (rt0.c0))))>=((UNLIKELY(rt0.c2), (((rt0.c3, x'23f85bbc', rt0.c1, rt0.c1, rt0.c2, vt1.c0, rt0.c1))=((rt0.c2, vt1.c0, rt0.c0, rt0.c2, rt0.c0, vt1.c0, rt0.c0))), CAST('1335360487' AS INTEGER)))) DESC, ((x'9d') NOT NULL)  NULLS LAST, ((((x'') ISNULL))OR(((vt1.c0)!=(NULL)))) DESC  NULLS LAST LIMIT 3;
SELECT ALL * FROM rt0, vt1 WHERE ((((vt1.c0, rt0.c1, rt0.c2)) BETWEEN ((rt0.c0 COLLATE BINARY, ((((((x'')AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)), (vt1.c0 IN ()))) AND ((ABS(rt0.c1), 0.05168964014377353, rt0.c2 COLLATE NOCASE)))) ORDER BY ((((((((0.8456205464274895)IS NOT(vt1.c0)))OR(((rt0.c1) IS FALSE))))OR((((rt0.c1, rt0.c0))<=((rt0.c2, rt0.c2))))))AND(CASE rt0.c1  WHEN rt0.c2 THEN 0.8735340297327784 ELSE rt0.c3 END))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((vt1.c0, rt0.c1, rt0.c2)) BETWEEN ((rt0.c0 COLLATE BINARY, ((((((x'')AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)), (vt1.c0 IN ()))) AND ((ABS(rt0.c1), 0.05168964014377353, rt0.c2 COLLATE NOCASE)))) ORDER BY ((((((((0.8456205464274895)IS NOT(vt1.c0)))OR(((rt0.c1) IS FALSE))))OR((((rt0.c1, rt0.c0))<=((rt0.c2, rt0.c2))))))AND(CASE rt0.c1  WHEN rt0.c2 THEN 0.8735340297327784 ELSE rt0.c3 END))  NULLS LAST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (TRIM(json_insert(476503820, rt0.c2, rt0.c0, rt0.c2, rt0.c2))) ORDER BY ((((((((0.8456205464274895)IS NOT(vt1.c0)))OR(((rt0.c1) IS FALSE))))OR((((rt0.c1, rt0.c0))<=((rt0.c2, rt0.c2))))))AND(CASE rt0.c1  WHEN rt0.c2 THEN 0.8735340297327784 ELSE rt0.c3 END))  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((((vt1.c0, rt0.c1, rt0.c2)) BETWEEN ((rt0.c0 COLLATE BINARY, ((((((x'')AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)), (vt1.c0 IN ()))) AND ((ABS(rt0.c1), 0.05168964014377353, rt0.c2 COLLATE NOCASE)))) ORDER BY ((((((((0.8456205464274895)IS NOT(vt1.c0)))OR(((rt0.c1) IS FALSE))))OR((((rt0.c1, rt0.c0))<=((rt0.c2, rt0.c2))))))AND(CASE rt0.c1  WHEN rt0.c2 THEN 0.8735340297327784 ELSE rt0.c3 END))  NULLS LAST;
SELECT * FROM rt0, vt1 WHERE ((((vt1.c0, rt0.c1, rt0.c2)) BETWEEN ((rt0.c0 COLLATE BINARY, ((((((x'')AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c0)), (vt1.c0 IN ()))) AND ((ABS(rt0.c1), 0.05168964014377353, rt0.c2 COLLATE NOCASE)))) ORDER BY ((((((((0.8456205464274895)IS NOT(vt1.c0)))OR(((rt0.c1) IS FALSE))))OR((((rt0.c1, rt0.c0))<=((rt0.c2, rt0.c2))))))AND(CASE rt0.c1  WHEN rt0.c2 THEN 0.8735340297327784 ELSE rt0.c3 END))  NULLS LAST INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (TRIM(json_insert(476503820, rt0.c2, rt0.c0, rt0.c2, rt0.c2))) ORDER BY ((((((((0.8456205464274895)IS NOT(vt1.c0)))OR(((rt0.c1) IS FALSE))))OR((((rt0.c1, rt0.c0))<=((rt0.c2, rt0.c2))))))AND(CASE rt0.c1  WHEN rt0.c2 THEN 0.8735340297327784 ELSE rt0.c3 END))  NULLS LAST;
SELECT MIN(rt0.c3) FROM vt1, rt0 WHERE (((rt0.c1) BETWEEN (rt0.c1) AND (NULL))) ORDER BY CASE WHEN rt0.c1 COLLATE BINARY THEN ((rt0.c1) IS TRUE) WHEN NULL THEN x'0e' END DESC  NULLS FIRST;
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (((rt0.c1) BETWEEN (rt0.c1) AND (NULL))) ORDER BY CAST(CASE WHEN rt0.c1 THEN rt0.c2 ELSE '萺sn{L	t' END AS REAL) ASC;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (CAST(NULL AS NUMERIC)) ORDER BY (~ (CAST(vt1.c0 AS TEXT)))  NULLS LAST, ((CAST(rt0.c1 AS INTEGER)) BETWEEN ((NOT (NULL))) AND (((rt0.c2) ISNULL))) DESC, NULL;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((CAST(NULL AS NUMERIC))AND(((NULL)IS(CAST(vt1.c0 AS REAL)))))) ORDER BY json_patch(SQLITE_SOURCE_ID(), (rt0.c1 IN (rt0.c2))), ((((rt0.c2)-(vt1.c0))) ISNULL) ASC, (rt0.c1 COLLATE NOCASE IN (rt0.c2 COLLATE NOCASE)) DESC LIMIT 0X0;
SELECT COUNT(*) FROM rt0 CROSS JOIN vt1 ON ((((((rt0.c0)OR(rt0.c1)))AND(rt0.c2)))>(IFNULL(rt0.c0, vt1.c0))) WHERE (((((((((vt1.c0)||(rt0.c3)))AND(((rt0.c3) NOT NULL))))OR(((rt0.c1) BETWEEN ('臅') AND (0.05095339404885724)))))OR(rt0.c1 COLLATE BINARY)));
SELECT DISTINCT COUNT(*) FROM rt0 CROSS JOIN vt1 ON ((((((rt0.c0)OR(rt0.c1)))AND(rt0.c2)))>(IFNULL(rt0.c0, vt1.c0))) WHERE (((((((((((vt1.c0)||(rt0.c3)))AND(((rt0.c3) NOT NULL))))OR(((rt0.c1) BETWEEN ('臅') AND (0.05095339404885724)))))OR(rt0.c1 COLLATE BINARY)))AND((((rt0.c0 IN ()))GLOB(CAST(vt1.c0 AS TEXT))))));
SELECT * FROM rt0 WHERE ((((rt0.c3 IN (rt0.c0))) IS FALSE)) ORDER BY (((rt0.c0 IN (rt0.c2))) BETWEEN (((rt0.c0)/(rt0.c1))) AND (((rt0.c3)OR(rt0.c3)))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE ((((((rt0.c3 IN (rt0.c0))) IS FALSE))AND(((x'a2')<<((('TnuP*v{Nq')>=(rt0.c2))))))) ORDER BY 0Xffffffffd16d4586 INTERSECT SELECT ALL * FROM rt0 WHERE ((NOT (((rt0.c3)<=(rt0.c3))))) ORDER BY -781367930;
SELECT * FROM rt0 WHERE ((((rt0.c3 IN (rt0.c0))) IS FALSE)) ORDER BY (((rt0.c0 IN (rt0.c2))) BETWEEN (((rt0.c0)/(rt0.c1))) AND (((rt0.c3)OR(rt0.c3)))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE ((((((rt0.c3 IN (rt0.c0))) IS FALSE))AND(((x'a2')<<((('TnuP*v{Nq')>=(rt0.c2))))))) ORDER BY 0Xffffffffd16d4586 INTERSECT SELECT ALL * FROM rt0 WHERE ((NOT (((rt0.c3)<=(rt0.c3))))) ORDER BY -781367930;
SELECT ALL * FROM rt0 WHERE (load_extension(rt0.c3, rt0.c0));
SELECT DISTINCT * FROM rt0 WHERE (load_extension(rt0.c3, rt0.c0)) ORDER BY ((((((rt0.c1)-(rt0.c3)))OR(((rt0.c0) ISNULL))))AND((NOT (rt0.c0)))), (((rt0.c0, rt0.c3, rt0.c0, rt0.c0)) BETWEEN ((((((((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c0)))OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c1)), rt0.c2 COLLATE NOCASE, ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)), CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 END)) AND ((((((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c0)))OR(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)), CAST(rt0.c0 AS NUMERIC), ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)), ((rt0.c2) BETWEEN (0.7698132616868889) AND (rt0.c3)))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CASE WHEN rt0.c1 THEN ((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)) WHEN rt0.c2 THEN CASE WHEN rt0.c1 THEN rt0.c3 WHEN -1.812739594E9 THEN rt0.c1 ELSE rt0.c0 END WHEN ((rt0.c1) BETWEEN (rt0.c0) AND ('')) THEN rt0.c0 ELSE rt0.c1 COLLATE NOCASE END) ORDER BY ((((((rt0.c1)-(rt0.c3)))OR(((rt0.c0) ISNULL))))AND((NOT (rt0.c0)))), (((rt0.c0, rt0.c3, rt0.c0, rt0.c0)) BETWEEN ((((((((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c1)))AND(rt0.c0)))OR(rt0.c0)))OR(rt0.c3)))OR(rt0.c1)), rt0.c2 COLLATE NOCASE, ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c0)), CASE WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c2 END)) AND ((((((((((((rt0.c3)AND(rt0.c3)))AND(rt0.c0)))OR(rt0.c3)))AND(rt0.c1)))OR(rt0.c1)), CAST(rt0.c0 AS NUMERIC), ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)), ((rt0.c2) BETWEEN (0.7698132616868889) AND (rt0.c3)))))  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (load_extension(rt0.c3, rt0.c0));
SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (LAST_INSERT_ROWID());
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (((LAST_INSERT_ROWID())AND((CAST(rt0.c1 AS NUMERIC) IN (((rt0.c1) ISNULL), ((vt1.c0) NOT BETWEEN (NULL) AND (rt0.c3))))))) INTERSECT SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE ((((~ (rt0.c1))) NOT BETWEEN (((rt0.c0)==(rt0.c3))) AND (RTRIM(rt0.c3))));
SELECT ALL * FROM rt0 WHERE ((+ ((- (rt0.c0)))));
SELECT * FROM rt0 WHERE ((((+ ((- (rt0.c0)))))AND(CASE ((rt0.c1) NOT NULL)  WHEN x'' COLLATE BINARY THEN (rt0.c1 IN (rt0.c1)) END))) ORDER BY ((((rt0.c1)||(rt0.c0))) BETWEEN ('1965182289') AND ((rt0.c3 IN (rt0.c1))))  NULLS FIRST, ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1))) NOT BETWEEN (rt0.c3 COLLATE BINARY) AND ((((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2)))))  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE (CASE ((1082644571)<>(rt0.c0))  WHEN CAST(rt0.c0 AS INTEGER) THEN (- (rt0.c2)) ELSE (rt0.c1 IN (rt0.c1)) END) ORDER BY ((((rt0.c1)||(rt0.c0))) BETWEEN ('1965182289') AND ((rt0.c3 IN (rt0.c1))))  NULLS FIRST, ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1))) NOT BETWEEN (rt0.c3 COLLATE BINARY) AND ((((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2)))))  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((+ ((- (rt0.c0)))));
SELECT * FROM rt0 WHERE ((((+ ((- (rt0.c0)))))AND(CASE ((rt0.c1) NOT NULL)  WHEN x'' COLLATE BINARY THEN (rt0.c1 IN (rt0.c1)) END))) ORDER BY ((((rt0.c1)||(rt0.c0))) BETWEEN ('1965182289') AND ((rt0.c3 IN (rt0.c1))))  NULLS FIRST, ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1))) NOT BETWEEN (rt0.c3 COLLATE BINARY) AND ((((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2)))))  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE (CASE ((1082644571)<>(rt0.c0))  WHEN CAST(rt0.c0 AS INTEGER) THEN (- (rt0.c2)) ELSE (rt0.c1 IN (rt0.c1)) END) ORDER BY ((((rt0.c1)||(rt0.c0))) BETWEEN ('1965182289') AND ((rt0.c3 IN (rt0.c1))))  NULLS FIRST, ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1))) NOT BETWEEN (rt0.c3 COLLATE BINARY) AND ((((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2)))))  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM rt0, vt1 WHERE (SQLITE_VERSION());
SELECT DISTINCT MIN(vt1.c0) FROM rt0, vt1 WHERE (((SQLITE_VERSION())AND((- ((~ (vt1.c0))))))) ORDER BY ((((rt0.c3)%(rt0.c3))) IS TRUE);
SELECT ALL MIN(rt0.c3) FROM vt1, rt0 WHERE (((((((((rt0.c3)OR(((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR(LOWER(vt1.c0))))AND(((rt0.c3)*(rt0.c2)))))OR((((vt1.c0, rt0.c1, rt0.c3)) BETWEEN ((x'b1718d89', rt0.c1, rt0.c1)) AND ((rt0.c1, rt0.c2, NULL)))))) ORDER BY ((((rt0.c1)AND(rt0.c1)))LIKE(CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN 0X4b4a8a48 ELSE rt0.c2 END)), NULL DESC  NULLS LAST;
SELECT MIN(rt0.c3) FROM vt1, rt0 WHERE (((((((((((rt0.c3)OR(((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR(LOWER(vt1.c0))))AND(((rt0.c3)*(rt0.c2)))))OR((((vt1.c0, rt0.c1, rt0.c3)) BETWEEN ((x'b1718d89', rt0.c1, rt0.c1)) AND ((rt0.c1, rt0.c2, NULL))))))AND((- (((rt0.c0)-(rt0.c2))))))) ORDER BY ((((rt0.c1)AND(rt0.c1)))LIKE(CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN 0X4b4a8a48 ELSE rt0.c2 END)), NULL DESC  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) NOTNULL)) ORDER BY ((((vt1.c0)IS NOT(vt1.c0)))!=((vt1.c0 IN (NULL)))), ((CAST(vt1.c0 AS TEXT))-(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))) DESC  NULLS FIRST, CAST(((vt1.c0)=(vt1.c0)) AS TEXT)  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((vt1.c0 COLLATE BINARY) NOTNULL))AND('x*2'))) ORDER BY CASE WHEN (vt1.c0 IN (x'db9c13')) THEN ((vt1.c0)<=(6.13419071E8)) WHEN (NOT (vt1.c0)) THEN ((vt1.c0) NOT BETWEEN (-1.088513454E9) AND (vt1.c0)) END ASC, (- ((- (vt1.c0)))), CASE WHEN UNLIKELY(DISTINCT vt1.c0) THEN ((vt1.c0)=(vt1.c0)) END LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (NULL) ORDER BY CASE WHEN (vt1.c0 IN (x'db9c13')) THEN ((vt1.c0)<=(6.13419071E8)) WHEN (NOT (vt1.c0)) THEN ((vt1.c0) NOT BETWEEN (-1.088513454E9) AND (vt1.c0)) END ASC, (- ((- (vt1.c0)))), CASE WHEN UNLIKELY(DISTINCT vt1.c0) THEN ((vt1.c0)==(vt1.c0)) END LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE (((~ (rt0.c2)) IN ()));
SELECT * FROM rt0 WHERE (((((~ (rt0.c2)) IN ()))AND(NULL))) INTERSECT SELECT * FROM rt0 WHERE (NULL);
SELECT ALL * FROM rt0 WHERE (((~ (rt0.c2)) IN ()));
SELECT * FROM rt0 WHERE (((((~ (rt0.c2)) IN ()))AND(NULL))) INTERSECT SELECT * FROM rt0 WHERE (NULL);
SELECT ALL * FROM vt1, rt0 WHERE (((vt1.c0 IN ()) IN ()));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((vt1.c0 IN ()) IN ())) ORDER BY (((rt0.c1 IN (rt0.c1)))&(NULL))  NULLS FIRST, ((rt0.c2) IS FALSE) COLLATE BINARY ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1, rt0 WHERE (((vt1.c0 IN ()) IN ()));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((vt1.c0 IN ()) IN ())) ORDER BY (((rt0.c1 IN (rt0.c1)))&(NULL))  NULLS FIRST, ((rt0.c2) IS FALSE) COLLATE BINARY ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1, rt0 WHERE (CAST(((rt0.c0)*(rt0.c2)) AS BLOB));
SELECT ALL * FROM vt1, rt0 WHERE (((CAST(((rt0.c0)*(rt0.c2)) AS BLOB))AND(rt0.c3 COLLATE RTRIM))) ORDER BY CAST((rt0.c0 IN ()) AS NUMERIC)  NULLS LAST, rt0.c0 DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt1, rt0 WHERE (CAST(((rt0.c0)*(rt0.c2)) AS BLOB));
SELECT ALL * FROM vt1, rt0 WHERE (((CAST(((rt0.c0)*(rt0.c2)) AS BLOB))AND(rt0.c3 COLLATE RTRIM))) ORDER BY CAST((rt0.c0 IN ()) AS NUMERIC)  NULLS LAST, rt0.c0 DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (rt0.c2) ORDER BY ABS(CASE rt0.c0  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c1 END)  NULLS FIRST, ((((('1480730680'))<((rt0.c1))))LIKE((NOT (rt0.c3))))  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c2)AND((((((rt0.c3, rt0.c1))<=((rt0.c3, rt0.c3)))) NOT NULL)))) ORDER BY ABS(CASE rt0.c0  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c1 END)  NULLS FIRST, ((((('1480730680'))<((rt0.c1))))LIKE((NOT (rt0.c3))))  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)))IS NOT(((vt1.c0)+(rt0.c0))))) ORDER BY ABS(CASE rt0.c0  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c1 END)  NULLS FIRST, ((((('1480730680'))<((rt0.c1))))LIKE((NOT (rt0.c3))))  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1, rt0 NOT INDEXED WHERE (rt0.c2) ORDER BY ABS(CASE rt0.c0  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c1 END)  NULLS FIRST, ((((('1480730680'))<((rt0.c1))))LIKE((NOT (rt0.c3))))  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c2)AND((((((rt0.c3, rt0.c1))<=((rt0.c3, rt0.c3)))) NOT NULL)))) ORDER BY ABS(CASE rt0.c0  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c1 END)  NULLS FIRST, ((((('1480730680'))<((rt0.c1))))LIKE((NOT (rt0.c3))))  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)))IS NOT(((vt1.c0)+(rt0.c0))))) ORDER BY ABS(CASE rt0.c0  WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN NULL WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c1 END)  NULLS FIRST, ((((('1480730680'))<((rt0.c1))))LIKE((NOT (rt0.c3))))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (-1.440571497E9);
SELECT * FROM vt1 WHERE (-1.440571497E9) ORDER BY (((vt1.c0 IN (x'ef')))||(((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))) DESC, ('W-InfinityB' IN ()) INTERSECT SELECT * FROM vt1 WHERE (LIKELIHOOD(DISTINCT 0.4456993733229473, ((vt1.c0) IS FALSE))) ORDER BY (((vt1.c0 IN (x'ef')))||(((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))) DESC, ('W-InfinityB' IN ());
SELECT ALL * FROM vt1 WHERE (-1.440571497E9);
SELECT * FROM vt1 WHERE (-1.440571497E9) ORDER BY (((vt1.c0 IN (x'ef')))||(((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))) DESC, ('W-InfinityB' IN ()) INTERSECT SELECT * FROM vt1 WHERE (LIKELIHOOD(DISTINCT 0.4456993733229473, ((vt1.c0) IS FALSE))) ORDER BY (((vt1.c0 IN (x'ef')))||(((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))) DESC, ('W-InfinityB' IN ());
SELECT ALL * FROM vt1 WHERE (CASE TYPEOF(DISTINCT vt1.c0)  WHEN CAST(vt1.c0 AS BLOB) THEN (NOT (vt1.c0)) WHEN (vt1.c0 IN ()) THEN vt1.c0 WHEN ((((((vt1.c0)OR(NULL)))OR(vt1.c0)))OR(-166115285)) THEN ((vt1.c0)<=(0xffffffff888d305a)) ELSE CAST(0.9110440508990122 AS NUMERIC) END);
SELECT ALL * FROM vt1 WHERE (((CASE TYPEOF(DISTINCT vt1.c0)  WHEN CAST(vt1.c0 AS BLOB) THEN (NOT (vt1.c0)) WHEN (vt1.c0 IN ()) THEN vt1.c0 WHEN ((((((vt1.c0)OR(NULL)))OR(vt1.c0)))OR(-166115285)) THEN ((vt1.c0)=(0xffffffff888d3057)) ELSE CAST(0.9110440508990122 AS NUMERIC) END)AND(CAST((~ (vt1.c0)) AS REAL)))) INTERSECT SELECT * FROM vt1 WHERE (CAST((+ (vt1.c0)) AS INTEGER));
SELECT ALL * FROM vt1 WHERE (CASE TYPEOF(DISTINCT vt1.c0)  WHEN CAST(vt1.c0 AS BLOB) THEN (NOT (vt1.c0)) WHEN (vt1.c0 IN ()) THEN vt1.c0 WHEN ((((((vt1.c0)OR(NULL)))OR(vt1.c0)))OR(-166115285)) THEN ((vt1.c0)<=(0xffffffff888d305a)) ELSE CAST(0.9110440508990122 AS NUMERIC) END);
SELECT ALL * FROM vt1 WHERE (((CASE TYPEOF(DISTINCT vt1.c0)  WHEN CAST(vt1.c0 AS BLOB) THEN (NOT (vt1.c0)) WHEN (vt1.c0 IN ()) THEN vt1.c0 WHEN ((((((vt1.c0)OR(NULL)))OR(vt1.c0)))OR(-166115285)) THEN ((vt1.c0)=(0xffffffff888d3057)) ELSE CAST(0.9110440508990122 AS NUMERIC) END)AND(CAST((~ (vt1.c0)) AS REAL)))) INTERSECT SELECT * FROM vt1 WHERE (CAST((+ (vt1.c0)) AS INTEGER));
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (((((((((((((rt0.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)))AND(vt1.c0 COLLATE BINARY)))OR((((vt1.c0)) BETWEEN ((x'2c')) AND ((rt0.c3))))))OR(rt0.c0 COLLATE NOCASE)))AND(0Xfffffffff057476c)))AND(((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c1)))OR(vt1.c0)))AND(vt1.c0)))));
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (((((((((((((((rt0.c0) NOT BETWEEN (rt0.c3) AND (vt1.c0)))AND(vt1.c0 COLLATE BINARY)))OR((((vt1.c0)) BETWEEN ((x'2c')) AND ((rt0.c3))))))OR(rt0.c0 COLLATE NOCASE)))AND(0xfffffffff057476c)))AND(((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c1)))OR(vt1.c0)))AND(vt1.c0)))))AND(CAST(((rt0.c0)>>(vt1.c0)) AS NUMERIC)))) INTERSECT SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (json_quote(rt0.c3 COLLATE BINARY));
SELECT * FROM vt1 WHERE (LOWER(vt1.c0));
SELECT DISTINCT * FROM vt1 WHERE (LOWER(vt1.c0)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)||((vt1.c0 IN (vt1.c0)))));
SELECT * FROM vt1 WHERE (LOWER(vt1.c0));
SELECT DISTINCT * FROM vt1 WHERE (LOWER(vt1.c0)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)||((vt1.c0 IN (vt1.c0)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, (((vt1.c0))>=((NULL)))))<((UPPER(DISTINCT '<䤬Up1bmI'), CAST(vt1.c0 AS REAL))))) ORDER BY (- (((vt1.c0)/(vt1.c0)))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE ((((vt1.c0, (((vt1.c0))>=((NULL)))))<((UPPER(DISTINCT '<䤬Up1bmI'), CAST(vt1.c0 AS REAL))))) ORDER BY CASE vt1.c0  WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 END COLLATE BINARY ASC, CAST(vt1.c0 AS NUMERIC) DESC INTERSECT SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c0)<=('709578335')) AS BLOB)) ORDER BY CASE vt1.c0  WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 END COLLATE BINARY ASC, CAST(vt1.c0 AS NUMERIC) DESC;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, (((vt1.c0))>=((NULL)))))<((UPPER(DISTINCT '<䤬Up1bmI'), CAST(vt1.c0 AS REAL))))) ORDER BY (- (((vt1.c0)/(vt1.c0)))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE ((((vt1.c0, (((vt1.c0))>=((NULL)))))<((UPPER(DISTINCT '<䤬Up1bmI'), CAST(vt1.c0 AS REAL))))) ORDER BY CASE vt1.c0  WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 END COLLATE BINARY ASC, CAST(vt1.c0 AS NUMERIC) DESC INTERSECT SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c0)<=('709578335')) AS BLOB)) ORDER BY CASE vt1.c0  WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 END COLLATE BINARY ASC, CAST(vt1.c0 AS NUMERIC) DESC;
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE (NOT (vt1.c0))  WHEN ((vt1.c0)OR(vt1.c0)) THEN IFNULL(DISTINCT 0.5551252374330624, vt1.c0) WHEN ((((((0xffffffffa87cb4c1)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN vt1.c0 END) LIMIT 0;
SELECT * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)), -1459579809, (vt1.c0 IN (vt1.c0, vt1.c0))))>(('886179703', LENGTH(vt1.c0), vt1.c0 COLLATE NOCASE))) ASC LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE ((+ ((~ (vt1.c0))))) ORDER BY (((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)), -1459579809, (vt1.c0 IN (vt1.c0, vt1.c0))))>(('886179703', LENGTH(vt1.c0), vt1.c0 COLLATE NOCASE))) ASC LIMIT 0x0;
SELECT * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY (((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)), -1459579809, (vt1.c0 IN (vt1.c0, vt1.c0))))>(('886179703', LENGTH(vt1.c0), vt1.c0 COLLATE NOCASE))) ASC LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE ((+ ((~ (vt1.c0))))) ORDER BY (((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)), -1459579809, (vt1.c0 IN (vt1.c0, vt1.c0))))>(('886179703', LENGTH(vt1.c0), vt1.c0 COLLATE NOCASE))) ASC LIMIT 0x0;
SELECT * FROM rt0 WHERE (CASE ((rt0.c1) IS FALSE)  WHEN (- (rt0.c0)) THEN LTRIM(rt0.c3, rt0.c3) WHEN 0.57844636552848 THEN rt0.c0 COLLATE RTRIM END) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3))) IS TRUE), NULL  NULLS LAST, ((CASE WHEN rt0.c0 THEN rt0.c3 END) IS TRUE)  NULLS LAST;
SELECT * FROM rt0 WHERE (((CASE ((rt0.c1) IS FALSE)  WHEN (- (rt0.c0)) THEN LTRIM(rt0.c3, rt0.c3) WHEN 0.57844636552848 THEN rt0.c0 COLLATE RTRIM END)AND((((IFNULL(rt0.c3, rt0.c2), CAST(rt0.c2 AS TEXT)))>(((rt0.c3 IN (rt0.c3)), ((rt0.c3) NOT NULL))))))) ORDER BY -1 LIMIT 0X2;
SELECT * FROM rt0 WHERE (CASE ((rt0.c1) IS FALSE)  WHEN (- (rt0.c0)) THEN LTRIM(rt0.c3, rt0.c3) WHEN 0.57844636552848 THEN rt0.c0 COLLATE RTRIM END) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c3))) IS TRUE), NULL  NULLS LAST, ((CASE WHEN rt0.c0 THEN rt0.c3 END) IS TRUE)  NULLS LAST;
SELECT * FROM rt0 WHERE (((CASE ((rt0.c1) IS FALSE)  WHEN (- (rt0.c0)) THEN LTRIM(rt0.c3, rt0.c3) WHEN 0.57844636552848 THEN rt0.c0 COLLATE RTRIM END)AND((((IFNULL(rt0.c3, rt0.c2), CAST(rt0.c2 AS TEXT)))>(((rt0.c3 IN (rt0.c3)), ((rt0.c3) NOT NULL))))))) ORDER BY -1 LIMIT 0X2;
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE ((((rt0.c1, rt0.c3, 'g', rt0.c1, rt0.c0))>=((rt0.c0, rt0.c3, rt0.c3, vt1.c0, rt0.c0))) COLLATE BINARY) ORDER BY ((((rt0.c3)GLOB(rt0.c1))) BETWEEN (((((((rt0.c2)OR(rt0.c3)))OR(rt0.c2)))OR(rt0.c1))) AND (((vt1.c0)>=(rt0.c3))))  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1, rt0 WHERE ((((rt0.c1, rt0.c3, 'g', rt0.c1, rt0.c0))>((rt0.c0, rt0.c3, rt0.c3, vt1.c0, rt0.c0))) COLLATE BINARY) ORDER BY (+ ((+ (rt0.c3)))) ASC  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c3) ISNULL) THEN rt0.c2 WHEN json_insert(rt0.c2, rt0.c3, vt1.c0, rt0.c3, rt0.c0) THEN ((vt1.c0)==(rt0.c0)) WHEN ((rt0.c2)>>(vt1.c0)) THEN ((((((rt0.c0)OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c1)) WHEN ((rt0.c3) IS FALSE) THEN (NULL IN ()) WHEN rt0.c1 COLLATE RTRIM THEN ((((((rt0.c0)OR(NULL)))OR(rt0.c2)))AND(-1088513454)) WHEN ((rt0.c2) ISNULL) THEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE x'40' END END);
SELECT * FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c3) ISNULL) THEN rt0.c2 WHEN json_insert(rt0.c2, rt0.c3, vt1.c0, rt0.c3, rt0.c0) THEN ((vt1.c0)==(rt0.c0)) WHEN ((rt0.c2)>>(vt1.c0)) THEN ((((((rt0.c0)OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c1)) WHEN ((rt0.c3) IS FALSE) THEN (NULL IN ()) WHEN rt0.c1 COLLATE RTRIM THEN ((((((rt0.c0)OR(NULL)))OR(rt0.c2)))AND(-1088513454)) WHEN ((rt0.c2) ISNULL) THEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE x'40' END END) ORDER BY (((rt0.c3, 'p', '1735772004', ']')) BETWEEN ((((rt0.c2)IS NOT(rt0.c2)), rt0.c2, rt0.c2, LENGTH(rt0.c3))) AND (((((rt0.c2, rt0.c0, rt0.c3, vt1.c0)) NOT BETWEEN ((rt0.c0, rt0.c0, rt0.c1, vt1.c0)) AND ((rt0.c2, rt0.c2, rt0.c3, rt0.c1))), ((rt0.c3)-(rt0.c0)), ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c2)), CAST(rt0.c3 AS REAL)))), ((rt0.c1)*(rt0.c0)) COLLATE BINARY, rt0.c3 ASC LIMIT 0x1;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c3) ISNULL) THEN rt0.c2 WHEN json_insert(rt0.c2, rt0.c3, vt1.c0, rt0.c3, rt0.c0) THEN ((vt1.c0)==(rt0.c0)) WHEN ((rt0.c2)>>(vt1.c0)) THEN ((((((rt0.c0)OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c1)) WHEN ((rt0.c3) IS FALSE) THEN (NULL IN ()) WHEN rt0.c1 COLLATE RTRIM THEN ((((((rt0.c0)OR(NULL)))OR(rt0.c2)))AND(-1088513454)) WHEN ((rt0.c2) ISNULL) THEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE x'40' END END);
SELECT * FROM vt1, rt0 WHERE (CASE WHEN ((rt0.c3) ISNULL) THEN rt0.c2 WHEN json_insert(rt0.c2, rt0.c3, vt1.c0, rt0.c3, rt0.c0) THEN ((vt1.c0)==(rt0.c0)) WHEN ((rt0.c2)>>(vt1.c0)) THEN ((((((rt0.c0)OR(rt0.c2)))OR(rt0.c1)))AND(rt0.c1)) WHEN ((rt0.c3) IS FALSE) THEN (NULL IN ()) WHEN rt0.c1 COLLATE RTRIM THEN ((((((rt0.c0)OR(NULL)))OR(rt0.c2)))AND(-1088513454)) WHEN ((rt0.c2) ISNULL) THEN CASE rt0.c2  WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE x'40' END END) ORDER BY (((rt0.c3, 'p', '1735772004', ']')) BETWEEN ((((rt0.c2)IS NOT(rt0.c2)), rt0.c2, rt0.c2, LENGTH(rt0.c3))) AND (((((rt0.c2, rt0.c0, rt0.c3, vt1.c0)) NOT BETWEEN ((rt0.c0, rt0.c0, rt0.c1, vt1.c0)) AND ((rt0.c2, rt0.c2, rt0.c3, rt0.c1))), ((rt0.c3)-(rt0.c0)), ((rt0.c2) NOT BETWEEN (vt1.c0) AND (rt0.c2)), CAST(rt0.c3 AS REAL)))), ((rt0.c1)*(rt0.c0)) COLLATE BINARY, rt0.c3 ASC LIMIT 0x1;
SELECT MIN(rt0.c2) FROM rt0 WHERE (CAST((rt0.c3 IN ()) AS NUMERIC));
SELECT MIN(rt0.c2) FROM rt0 WHERE (((CAST((rt0.c3 IN ()) AS NUMERIC))AND((((rt0.c0 IN (-1.955672256E9, rt0.c0))) NOT BETWEEN (CASE WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 WHEN NULL THEN rt0.c1 WHEN rt0.c2 THEN '*)' END) AND ('['))))) ORDER BY CAST(((rt0.c2) IS FALSE) AS TEXT) DESC;
SELECT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE NULL END) BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS BLOB) DESC;
SELECT * FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE NULL END) BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(CASE WHEN (+ (vt1.c0)) THEN CAST(vt1.c0 AS NUMERIC) WHEN ((vt1.c0)||('I*&)?)#')) THEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) ELSE ((vt1.c0) IS TRUE) END))) ORDER BY CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS BLOB) DESC LIMIT 0x1;
SELECT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE NULL END) BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ORDER BY CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS BLOB) DESC;
SELECT * FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE NULL END) BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(CASE WHEN (+ (vt1.c0)) THEN CAST(vt1.c0 AS NUMERIC) WHEN ((vt1.c0)||('I*&)?)#')) THEN (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) ELSE ((vt1.c0) IS TRUE) END))) ORDER BY CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS BLOB) DESC LIMIT 0x1;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c1, rt0.c1)) NOT BETWEEN (((vt1.c0 IN ()), rt0.c2 COLLATE NOCASE)) AND ((COALESCE(DISTINCT rt0.c0, vt1.c0, vt1.c0, rt0.c3), ((rt0.c2)OR(rt0.c0)))))) ORDER BY (~ (((((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c1)))OR(rt0.c2)))AND(rt0.c1)))OR(rt0.c1)))OR(vt1.c0)))) ASC  NULLS FIRST, ((((x'08') BETWEEN (rt0.c1) AND (rt0.c1)))%(((vt1.c0) IS FALSE)))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c1, rt0.c1)) NOT BETWEEN (((vt1.c0 IN ()), rt0.c2 COLLATE NOCASE)) AND ((COALESCE(DISTINCT rt0.c0, vt1.c0, vt1.c0, rt0.c3), ((rt0.c2)OR(rt0.c0))))))AND(0.43769968171286733))) ORDER BY ((((((CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 END)AND(((vt1.c0) IS FALSE))))AND(((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)))))OR((((rt0.c3, rt0.c3))<>((rt0.c3, rt0.c0))))) LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((((rt0.c1, rt0.c1)) NOT BETWEEN (((vt1.c0 IN ()), rt0.c2 COLLATE NOCASE)) AND ((COALESCE(DISTINCT rt0.c0, vt1.c0, vt1.c0, rt0.c3), ((rt0.c2)OR(rt0.c0)))))) ORDER BY (~ (((((((((((((rt0.c3)AND(vt1.c0)))OR(rt0.c1)))OR(rt0.c2)))AND(rt0.c1)))OR(rt0.c1)))OR(vt1.c0)))) ASC  NULLS FIRST, ((((x'08') BETWEEN (rt0.c1) AND (rt0.c1)))%(((vt1.c0) IS FALSE)))  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c1, rt0.c1)) NOT BETWEEN (((vt1.c0 IN ()), rt0.c2 COLLATE NOCASE)) AND ((COALESCE(DISTINCT rt0.c0, vt1.c0, vt1.c0, rt0.c3), ((rt0.c2)OR(rt0.c0))))))AND(0.43769968171286733))) ORDER BY ((((((CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 END)AND(((vt1.c0) IS FALSE))))AND(((vt1.c0) NOT BETWEEN (rt0.c2) AND (rt0.c3)))))OR((((rt0.c3, rt0.c3))<>((rt0.c3, rt0.c0))))) LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((TOTAL_CHANGES()) IS TRUE));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 NOT INDEXED WHERE (((((TOTAL_CHANGES()) IS TRUE))AND(NULLIF((((vt1.c0))>((0.4855280701492486))), CAST(vt1.c0 AS REAL))))) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((NOT (((vt1.c0)/(vt1.c0)))));
SELECT ALL * FROM vt1 WHERE (COALESCE(IFNULL(vt1.c0, vt1.c0), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))), ((NULL) NOTNULL), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT DISTINCT * FROM vt1 WHERE (COALESCE(IFNULL(vt1.c0, vt1.c0), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))), ((NULL) NOTNULL), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT ALL * FROM vt1 WHERE (COALESCE(IFNULL(vt1.c0, vt1.c0), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))), ((NULL) NOTNULL), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT DISTINCT * FROM vt1 WHERE (COALESCE(IFNULL(vt1.c0, vt1.c0), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))), ((NULL) NOTNULL), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (vt1.c0 COLLATE RTRIM) AND (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (vt1.c0 COLLATE RTRIM) AND (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))) ORDER BY TRIM(DISTINCT ((vt1.c0)||(vt1.c0)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))  NULLS LAST LIMIT 2;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c0)IS NOT(rt0.c3)) IN ())) ORDER BY (((rt0.c3, rt0.c3, rt0.c0)) BETWEEN (((rt0.c0 IN ()), (+ (rt0.c3)), ((vt1.c0)LIKE(rt0.c3)))) AND ((CASE rt0.c0  WHEN '4%DhM81f械' THEN rt0.c2 ELSE rt0.c3 END, ((((vt1.c0)AND(rt0.c3)))AND(rt0.c3)), ((vt1.c0)&(rt0.c1)))));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c0)IS NOT(rt0.c3)) IN ())) ORDER BY (((rt0.c3, rt0.c3, rt0.c0)) BETWEEN (((rt0.c0 IN ()), (+ (rt0.c3)), ((vt1.c0)LIKE(rt0.c3)))) AND ((CASE rt0.c0  WHEN '4%DhM81f械' THEN rt0.c2 ELSE rt0.c3 END, ((((vt1.c0)AND(rt0.c3)))AND(rt0.c3)), ((vt1.c0)&(rt0.c1))))) LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c0)IS NOT(rt0.c3)) IN ())) ORDER BY (((rt0.c3, rt0.c3, rt0.c0)) BETWEEN (((rt0.c0 IN ()), (+ (rt0.c3)), ((vt1.c0)LIKE(rt0.c3)))) AND ((CASE rt0.c0  WHEN '4%DhM81f械' THEN rt0.c2 ELSE rt0.c3 END, ((((vt1.c0)AND(rt0.c3)))AND(rt0.c3)), ((vt1.c0)&(rt0.c1)))));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c0)IS NOT(rt0.c3)) IN ())) ORDER BY (((rt0.c3, rt0.c3, rt0.c0)) BETWEEN (((rt0.c0 IN ()), (+ (rt0.c3)), ((vt1.c0)LIKE(rt0.c3)))) AND ((CASE rt0.c0  WHEN '4%DhM81f械' THEN rt0.c2 ELSE rt0.c3 END, ((((vt1.c0)AND(rt0.c3)))AND(rt0.c3)), ((vt1.c0)&(rt0.c1))))) LIMIT 1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((+ (HEX(DISTINCT vt1.c0))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((+ (HEX(DISTINCT vt1.c0))))AND((('207314825') ISNULL)))) ORDER BY vt1.c0 ASC  NULLS FIRST, json_patch(JULIANDAY(vt1.c0, vt1.c0, vt1.c0, vt1.c0), vt1.c0 COLLATE NOCASE), CAST((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, 0.2642005590653037, vt1.c0, vt1.c0))) AS REAL)  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE) BETWEEN (vt1.c0) AND (CAST(vt1.c0 AS BLOB)))) ORDER BY vt1.c0 ASC  NULLS FIRST, json_patch(JULIANDAY(vt1.c0, vt1.c0, vt1.c0, vt1.c0), vt1.c0 COLLATE NOCASE), CAST((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, 0.2642005590653037, vt1.c0, vt1.c0))) AS REAL)  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE ((- ((- (x'ae36'))))) ORDER BY ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (vt1.c0) AND (vt1.c0 COLLATE NOCASE)), (((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0))) ISNULL) ASC, ((((CAST(vt1.c0 AS NUMERIC))AND(vt1.c0)))OR(((vt1.c0) NOT NULL)));
SELECT COUNT(*) FROM vt1 WHERE ((- ((- (x'ae36'))))) ORDER BY ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (vt1.c0) AND (vt1.c0 COLLATE NOCASE)), (((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0))) ISNULL) ASC, ((((CAST(vt1.c0 AS NUMERIC))AND(vt1.c0)))OR(((vt1.c0) NOT NULL))) LIMIT 4 INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (1505246562) ORDER BY ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN (vt1.c0) AND (vt1.c0 COLLATE NOCASE)), (((vt1.c0 IN (vt1.c0, vt1.c0, vt1.c0))) ISNULL) ASC, ((((CAST(vt1.c0 AS NUMERIC))AND(vt1.c0)))OR(((vt1.c0) NOT NULL))) LIMIT 0X4;
SELECT MAX(rt0.c2) FROM rt0, vt1 WHERE (LIKELY((~ (rt0.c3))));
SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE (((LIKELY((~ (rt0.c3))))AND((CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END IN ())))) INTERSECT SELECT DISTINCT MAX(rt0.c2) FROM rt0, vt1 WHERE ((~ (rt0.c3)) COLLATE RTRIM);
SELECT * FROM vt1, rt0 WHERE (((((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))) NOT BETWEEN (((((((rt0.c2)AND(vt1.c0)))AND(rt0.c1)))OR(rt0.c3))) AND ((x'902387' IN (rt0.c2))))) ORDER BY (((((((rt0.c0)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c2)) IN ()) ASC, CAST((((rt0.c1))!=((vt1.c0))) AS BLOB)  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))) NOT BETWEEN (((((((rt0.c2)AND(vt1.c0)))AND(rt0.c1)))OR(rt0.c3))) AND ((x'902387' IN (rt0.c2)))))AND(LIKE(((rt0.c1) BETWEEN (vt1.c0) AND (vt1.c0)), (rt0.c1 IN (rt0.c1, rt0.c1)))))) ORDER BY ((NOT (vt1.c0)) IN (((('1'))=((vt1.c0)))))  NULLS FIRST, (((rt0.c1)) NOT BETWEEN ((ABS(rt0.c1))) AND ((((rt0.c0) IS FALSE)))) DESC, (rt0.c0 IN (rt0.c0)) COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ('0.0') ORDER BY ((NOT (vt1.c0)) IN (((('1'))==((vt1.c0)))))  NULLS FIRST, (((rt0.c1)) NOT BETWEEN ((ABS(rt0.c1))) AND ((((rt0.c0) IS FALSE)))) DESC, (rt0.c0 IN (rt0.c0)) COLLATE NOCASE;
SELECT * FROM vt1, rt0 WHERE (((((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))) NOT BETWEEN (((((((rt0.c2)AND(vt1.c0)))AND(rt0.c1)))OR(rt0.c3))) AND ((x'902387' IN (rt0.c2))))) ORDER BY (((((((rt0.c0)OR(rt0.c2)))OR(rt0.c0)))OR(rt0.c2)) IN ()) ASC, CAST((((rt0.c1))!=((vt1.c0))) AS BLOB)  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((CASE vt1.c0  WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0, vt1.c0 COLLATE RTRIM))>=((((vt1.c0) IS TRUE), CASE WHEN vt1.c0 THEN vt1.c0 WHEN '' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0)))) ORDER BY vt1.c0, (((vt1.c0)) NOT BETWEEN ((((vt1.c0)|(vt1.c0)))) AND ((x''))) ASC;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((CASE vt1.c0  WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0, vt1.c0 COLLATE RTRIM))==((((vt1.c0) IS TRUE), CASE WHEN vt1.c0 THEN vt1.c0 WHEN '' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, vt1.c0)))) ORDER BY vt1.c0, (((vt1.c0)) NOT BETWEEN ((((vt1.c0)|(vt1.c0)))) AND ((x''))) ASC LIMIT 0 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (json_object(vt1.c0, vt1.c0) COLLATE NOCASE) ORDER BY vt1.c0, (((vt1.c0)) NOT BETWEEN ((((vt1.c0)|(vt1.c0)))) AND ((x''))) ASC LIMIT 0;
SELECT * FROM rt0 WHERE (CAST(((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c1)) AS REAL));
SELECT * FROM rt0 WHERE (CAST(((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c1)) AS REAL)) ORDER BY (~ (LIKELIHOOD(rt0.c1, rt0.c1))) DESC LIMIT 0X2;
SELECT * FROM rt0 WHERE (CAST(((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c1)) AS REAL));
SELECT * FROM rt0 WHERE (CAST(((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c1)) AS REAL)) ORDER BY (~ (LIKELIHOOD(rt0.c1, rt0.c1))) DESC LIMIT 0X2;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((~ (vt1.c0))) IS TRUE));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((~ (vt1.c0))) IS TRUE)) INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)<=(CAST(vt1.c0 AS NUMERIC))));
SELECT ALL MAX(rt0.c1) FROM vt1 LEFT OUTER JOIN rt0 ON (((rt0.c0, rt0.c0)) BETWEEN ((rt0.c0 COLLATE RTRIM, ((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)))) AND ((LOWER(DISTINCT vt1.c0), CAST(x'866e' AS NUMERIC)))) WHERE (CAST(((rt0.c3)IS NOT(rt0.c1)) AS TEXT)) ORDER BY ((rt0.c1)>(rt0.c1)), ((((((((CASE WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END)AND(NULL)))AND(((rt0.c2) IS FALSE))))OR(rt0.c0)))OR(json_patch(rt0.c2, NULL))) DESC  NULLS FIRST;
SELECT ALL MAX(rt0.c1) FROM vt1 INNER JOIN rt0 ON (((rt0.c0, rt0.c0)) BETWEEN ((rt0.c0 COLLATE RTRIM, ((((rt0.c0)OR(rt0.c1)))OR(rt0.c1)))) AND ((LOWER(DISTINCT vt1.c0), CAST(x'866e' AS NUMERIC)))) WHERE (CAST(((rt0.c3)IS NOT(rt0.c1)) AS TEXT)) ORDER BY ((rt0.c1)>(rt0.c1)), ((((((((CASE WHEN rt0.c3 THEN rt0.c3 ELSE rt0.c0 END)AND(NULL)))AND(((rt0.c2) IS FALSE))))OR(rt0.c0)))OR(json_patch(rt0.c2, NULL))) DESC  NULLS FIRST LIMIT 4;
SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (NULLIF(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN vt1.c0 ELSE '0.35626400596658003' END, (NOT (rt0.c0)))) ORDER BY ((((((rt0.c2)AND(rt0.c2)))OR(vt1.c0)))AND(rt0.c2)) COLLATE RTRIM  NULLS LAST, (((CAST(rt0.c1 AS BLOB), CASE rt0.c3  WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END, CASE WHEN rt0.c1 THEN 0.2554234310917528 WHEN rt0.c0 THEN '-1531189020' WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c0 END))>((CASE rt0.c1  WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN '1466001721' WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c2 END, rt0.c2, ABS(DISTINCT vt1.c0)))), ((((((((((((((rt0.c1)OR(vt1.c0)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c1)))OR(((vt1.c0)<=(vt1.c0)))))OR(0.9232320037594354))  NULLS LAST;
SELECT DISTINCT MIN(rt0.c1) FROM rt0, vt1 WHERE (((NULLIF(CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN vt1.c0 ELSE '0.35626400596658003' END, (NOT (rt0.c0))))AND(((((rt0.c3)>=(rt0.c0))) NOTNULL)))) ORDER BY ((((((rt0.c2)AND(rt0.c2)))OR(vt1.c0)))AND(rt0.c2)) COLLATE RTRIM  NULLS LAST, (((CAST(rt0.c1 AS BLOB), CASE rt0.c3  WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END, CASE WHEN rt0.c1 THEN 0.2554234310917528 WHEN rt0.c0 THEN '-1531189020' WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c0 END))>((CASE rt0.c1  WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN '1466001721' WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c2 END, rt0.c2, ABS(DISTINCT vt1.c0)))), ((((((((((((((rt0.c1)OR(vt1.c0)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c1)))OR(((vt1.c0)<=(vt1.c0)))))OR(0.9232320037594354))  NULLS LAST INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0, vt1 WHERE (rt0.c2 COLLATE NOCASE) ORDER BY ((((((rt0.c2)AND(rt0.c2)))OR(vt1.c0)))AND(rt0.c2)) COLLATE RTRIM  NULLS LAST, (((CAST(rt0.c1 AS BLOB), CASE rt0.c3  WHEN vt1.c0 THEN rt0.c3 ELSE rt0.c1 END, CASE WHEN rt0.c1 THEN 0.2554234310917528 WHEN rt0.c0 THEN '-1531189020' WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c0 END))>((CASE rt0.c1  WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN '1466001721' WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN rt0.c2 END, rt0.c2, ABS(DISTINCT vt1.c0)))), ((((((((((((((rt0.c1)OR(vt1.c0)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c1)))OR(((vt1.c0)<=(vt1.c0)))))OR(0.9232320037594354))  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((~ (((vt1.c0)IS NOT(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((~ (((vt1.c0)IS NOT(vt1.c0)))))AND(0Xffffffffb0cf729b))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) NOT BETWEEN (vt1.c0) AND (CAST(vt1.c0 AS NUMERIC)))  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((~ (((vt1.c0)IS NOT(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((~ (((vt1.c0)IS NOT(vt1.c0)))))AND(0Xffffffffb0cf729b))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) NOT BETWEEN (vt1.c0) AND (CAST(vt1.c0 AS NUMERIC)))  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE ((+ (CASE rt0.c2  WHEN '1798985106' THEN rt0.c1 END))) ORDER BY ((('4e')>>(rt0.c1)) IN (CASE rt0.c0  WHEN x'' THEN rt0.c1 ELSE rt0.c1 END, rt0.c2))  NULLS LAST, '0.7241807467882587', x'2fdd' ASC, ((((((vt1.c0 COLLATE BINARY)OR(((rt0.c3)+(rt0.c3)))))AND(rt0.c3)))AND(((vt1.c0)IS(rt0.c3))));
SELECT * FROM vt1, rt0 WHERE ((+ (CASE rt0.c2  WHEN '1798985106' THEN rt0.c1 END))) ORDER BY LTRIM(rt0.c0 COLLATE RTRIM, (rt0.c1 IN ())), ((((rt0.c0)-(rt0.c1)))AND(rt0.c0 COLLATE BINARY)) ASC  NULLS LAST, ((vt1.c0 COLLATE NOCASE)=(((0xcfa6f0c) NOT BETWEEN (rt0.c2) AND (vt1.c0)))) LIMIT 0;
SELECT * FROM vt1, rt0 WHERE ((+ (CASE rt0.c2  WHEN '1798985106' THEN rt0.c1 END))) ORDER BY ((('4e')>>(rt0.c1)) IN (CASE rt0.c0  WHEN x'' THEN rt0.c1 ELSE rt0.c1 END, rt0.c2))  NULLS LAST, '0.7241807467882587', x'2fdd' ASC, ((((((vt1.c0 COLLATE BINARY)OR(((rt0.c3)+(rt0.c3)))))AND(rt0.c3)))AND(((vt1.c0)IS(rt0.c3))));
SELECT * FROM vt1, rt0 WHERE ((+ (CASE rt0.c2  WHEN '1798985106' THEN rt0.c1 END))) ORDER BY LTRIM(rt0.c0 COLLATE RTRIM, (rt0.c1 IN ())), ((((rt0.c0)-(rt0.c1)))AND(rt0.c0 COLLATE BINARY)) ASC  NULLS LAST, ((vt1.c0 COLLATE NOCASE)=(((0xcfa6f0c) NOT BETWEEN (rt0.c2) AND (vt1.c0)))) LIMIT 0;
SELECT * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND('il')))AND(vt1.c0))))) ORDER BY (- (((((((x'')OR(NULL)))AND(vt1.c0)))AND(vt1.c0))))  NULLS FIRST, (NOT ((+ (vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND('il')))AND(vt1.c0)))))AND(CAST(vt1.c0 AS BLOB)))) ORDER BY (- (((((((x'')OR(NULL)))AND(vt1.c0)))AND(vt1.c0))))  NULLS FIRST, (NOT ((+ (vt1.c0)))) LIMIT 0x1;
SELECT * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND('il')))AND(vt1.c0))))) ORDER BY (- (((((((x'')OR(NULL)))AND(vt1.c0)))AND(vt1.c0))))  NULLS FIRST, (NOT ((+ (vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND('il')))AND(vt1.c0)))))AND(CAST(vt1.c0 AS BLOB)))) ORDER BY (- (((((((x'')OR(NULL)))AND(vt1.c0)))AND(vt1.c0))))  NULLS FIRST, (NOT ((+ (vt1.c0)))) LIMIT 0x1;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((('1528261331')<>(vt1.c0))) NOT BETWEEN ('-280720813') AND (vt1.c0 COLLATE RTRIM))) ORDER BY ((((vt1.c0) IS TRUE))*(0.7982968923137581)) ASC  NULLS FIRST, ((((vt1.c0 IN ())))==((((x'23')<<(vt1.c0)))))  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((('1528261331')<>(vt1.c0))) NOT BETWEEN ('-280720813') AND (vt1.c0 COLLATE RTRIM)))AND(vt1.c0))) ORDER BY ((((vt1.c0) IS TRUE))*(0.7982968923137581)) ASC  NULLS FIRST, ((((vt1.c0 IN ())))==((((x'23')<<(vt1.c0)))))  NULLS FIRST;
SELECT MAX(rt0.c3) FROM rt0 WHERE (RTRIM(CAST(rt0.c1 AS BLOB)));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (((RTRIM(CAST(rt0.c1 AS BLOB)))AND(((((+ (rt0.c3))))<=((x'')))))) ORDER BY ((rt0.c3)<>(rt0.c2)) COLLATE RTRIM LIMIT 0 INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (((((rt0.c1) ISNULL))OR(UNLIKELY(DISTINCT rt0.c2)))) ORDER BY ((rt0.c3)!=(rt0.c2)) COLLATE RTRIM LIMIT 0;
SELECT COUNT(*) FROM vt1, rt0 WHERE (((rt0.c0 COLLATE NOCASE)==((((rt0.c1, '953433735', rt0.c1)) NOT BETWEEN (('464024925', NULL, rt0.c2)) AND ((rt0.c0, rt0.c0, vt1.c0)))))) ORDER BY ((CAST(vt1.c0 AS BLOB))OR(rt0.c3 COLLATE BINARY))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (((((rt0.c0 COLLATE NOCASE)==((((rt0.c1, '953433735', rt0.c1)) NOT BETWEEN (('464024925', NULL, rt0.c2)) AND ((rt0.c0, rt0.c0, vt1.c0))))))AND(LIKELIHOOD(DISTINCT rt0.c0 COLLATE RTRIM, ((rt0.c3) NOT NULL))))) ORDER BY (~ (((rt0.c3)||(rt0.c3))))  NULLS LAST, NULL  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE ((rt0.c1 IN ())) ORDER BY (~ (((rt0.c3)||(rt0.c3))))  NULLS LAST, NULL  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1 WHERE (1628435162);
SELECT DISTINCT * FROM vt1 WHERE (0X610ff2da);
SELECT ALL * FROM vt1 WHERE (1628435162);
SELECT DISTINCT * FROM vt1 WHERE (0X610ff2da);
SELECT * FROM rt0 WHERE (((((((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END)OR(GLOB(rt0.c3, rt0.c2))))AND(rt0.c1)))AND(((rt0.c1)IS NOT(rt0.c0))))) ORDER BY CASE rt0.c1 COLLATE BINARY  WHEN rt0.c0 THEN CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN 'gv椹' ELSE rt0.c0 END ELSE (NOT (rt0.c1)) END, ((rt0.c1)>>(rt0.c1)) COLLATE BINARY ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (((((((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END)OR(GLOB(rt0.c3, rt0.c2))))AND(rt0.c1)))AND(((rt0.c1)IS NOT(rt0.c0))))) ORDER BY CASE rt0.c1 COLLATE BINARY  WHEN rt0.c0 THEN CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN 'gv椹' ELSE rt0.c0 END ELSE (NOT (rt0.c1)) END, ((rt0.c1)>>(rt0.c1)) COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT * FROM rt0 WHERE (((((((rt0.c2)GLOB(rt0.c2)))AND(CAST(rt0.c1 AS TEXT))))OR((((rt0.c1))!=((rt0.c2)))))) ORDER BY CASE rt0.c1 COLLATE BINARY  WHEN rt0.c0 THEN CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN 'gv椹' ELSE rt0.c0 END ELSE (NOT (rt0.c1)) END, ((rt0.c1)>>(rt0.c1)) COLLATE BINARY ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (((((((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END)OR(GLOB(rt0.c3, rt0.c2))))AND(rt0.c1)))AND(((rt0.c1)IS NOT(rt0.c0))))) ORDER BY CASE rt0.c1 COLLATE BINARY  WHEN rt0.c0 THEN CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN 'gv椹' ELSE rt0.c0 END ELSE (NOT (rt0.c1)) END, ((rt0.c1)>>(rt0.c1)) COLLATE BINARY ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (((((((CASE WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c3 END)OR(GLOB(rt0.c3, rt0.c2))))AND(rt0.c1)))AND(((rt0.c1)IS NOT(rt0.c0))))) ORDER BY CASE rt0.c1 COLLATE BINARY  WHEN rt0.c0 THEN CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN 'gv椹' ELSE rt0.c0 END ELSE (NOT (rt0.c1)) END, ((rt0.c1)>>(rt0.c1)) COLLATE BINARY ASC  NULLS LAST INTERSECT SELECT * FROM rt0 WHERE (((((((rt0.c2)GLOB(rt0.c2)))AND(CAST(rt0.c1 AS TEXT))))OR((((rt0.c1))!=((rt0.c2)))))) ORDER BY CASE rt0.c1 COLLATE BINARY  WHEN rt0.c0 THEN CASE WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN 'gv椹' ELSE rt0.c0 END ELSE (NOT (rt0.c1)) END, ((rt0.c1)>>(rt0.c1)) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2, rt0.c1, rt0.c2, rt0.c1)) BETWEEN ((CAST(vt1.c0 AS NUMERIC), (((rt0.c0, rt0.c3)) NOT BETWEEN ((vt1.c0, rt0.c3)) AND ((rt0.c0, rt0.c3))), 0.8430486884402016, (- (rt0.c1)))) AND ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c0)), UPPER(DISTINCT rt0.c1), CASE rt0.c1  WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c3 END, CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN x'cb75' WHEN rt0.c1 THEN rt0.c3 END))));
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c2, rt0.c1, rt0.c2, rt0.c1)) BETWEEN ((CAST(vt1.c0 AS NUMERIC), (((rt0.c0, rt0.c3)) NOT BETWEEN ((vt1.c0, rt0.c3)) AND ((rt0.c0, rt0.c3))), 0.8430486884402016, (- (rt0.c1)))) AND ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c0)), UPPER(DISTINCT rt0.c1), CASE rt0.c1  WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c3 END, CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN x'cb75' WHEN rt0.c1 THEN rt0.c3 END))))AND(CASE ((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))  WHEN ((rt0.c2)IS NOT(rt0.c0)) THEN ((vt1.c0)OR(rt0.c1)) ELSE (vt1.c0 IN (rt0.c3)) END))) ORDER BY '1086251540' LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2, rt0.c1, rt0.c2, rt0.c1)) BETWEEN ((CAST(vt1.c0 AS NUMERIC), (((rt0.c0, rt0.c3)) NOT BETWEEN ((vt1.c0, rt0.c3)) AND ((rt0.c0, rt0.c3))), 0.8430486884402016, (- (rt0.c1)))) AND ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c0)), UPPER(DISTINCT rt0.c1), CASE rt0.c1  WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c3 END, CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN x'cb75' WHEN rt0.c1 THEN rt0.c3 END))));
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c2, rt0.c1, rt0.c2, rt0.c1)) BETWEEN ((CAST(vt1.c0 AS NUMERIC), (((rt0.c0, rt0.c3)) NOT BETWEEN ((vt1.c0, rt0.c3)) AND ((rt0.c0, rt0.c3))), 0.8430486884402016, (- (rt0.c1)))) AND ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c0)), UPPER(DISTINCT rt0.c1), CASE rt0.c1  WHEN rt0.c3 THEN vt1.c0 ELSE rt0.c3 END, CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN x'cb75' WHEN rt0.c1 THEN rt0.c3 END))))AND(CASE ((((rt0.c3)OR(rt0.c2)))OR(rt0.c3))  WHEN ((rt0.c2)IS NOT(rt0.c0)) THEN ((vt1.c0)OR(rt0.c1)) ELSE (vt1.c0 IN (rt0.c3)) END))) ORDER BY '1086251540' LIMIT 1;
SELECT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY (~ (((vt1.c0) BETWEEN (x'') AND (vt1.c0)))), -9.24501417E8 ASC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY (~ (((vt1.c0) BETWEEN (x'') AND (vt1.c0)))), -9.24501417E8 ASC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (CAST(vt1.c0 AS TEXT)) AND (CAST(vt1.c0 AS TEXT)))) ORDER BY (~ (((vt1.c0) BETWEEN (x'') AND (vt1.c0)))), -9.24501417E8 ASC  NULLS FIRST;
SELECT MAX(rt0.c3) FROM rt0 WHERE ((TYPEOF(rt0.c1) IN ()));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE ((((TYPEOF(rt0.c1) IN ()))AND(((rt0.c0)<=(rt0.c1)) COLLATE RTRIM))) LIMIT 0x0;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))))=(((rt0.c2)||(rt0.c1))))) ORDER BY CAST((((rt0.c0))==((rt0.c2))) AS NUMERIC) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))))==(((rt0.c2)||(rt0.c1))))) ORDER BY x'a216efdc3a', rt0.c0  NULLS FIRST, CASE rt0.c3  WHEN ((((rt0.c2)AND(vt1.c0)))AND(rt0.c3)) THEN NULL WHEN (((rt0.c3, rt0.c1))<>((rt0.c2, rt0.c3))) THEN (((rt0.c2, rt0.c3)) BETWEEN ((0xffffffff973019ce, rt0.c3)) AND ((rt0.c0, vt1.c0))) WHEN (((rt0.c2, x''))==((rt0.c0, '-1253896892'))) THEN rt0.c0 ELSE (rt0.c0 IN (rt0.c2)) END DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c1) ORDER BY x'a216efdc3a', rt0.c0  NULLS FIRST, CASE rt0.c3  WHEN ((((rt0.c2)AND(vt1.c0)))AND(rt0.c3)) THEN NULL WHEN (((rt0.c3, rt0.c1))<>((rt0.c2, rt0.c3))) THEN (((rt0.c2, rt0.c3)) BETWEEN ((-1758455346, rt0.c3)) AND ((rt0.c0, vt1.c0))) WHEN (((rt0.c2, x''))==((rt0.c0, '-1253896892'))) THEN rt0.c0 ELSE (rt0.c0 IN (rt0.c2)) END DESC LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE ((((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))))=(((rt0.c2)||(rt0.c1))))) ORDER BY CAST((((rt0.c0))==((rt0.c2))) AS NUMERIC) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2))))==(((rt0.c2)||(rt0.c1))))) ORDER BY x'a216efdc3a', rt0.c0  NULLS FIRST, CASE rt0.c3  WHEN ((((rt0.c2)AND(vt1.c0)))AND(rt0.c3)) THEN NULL WHEN (((rt0.c3, rt0.c1))<>((rt0.c2, rt0.c3))) THEN (((rt0.c2, rt0.c3)) BETWEEN ((0xffffffff973019ce, rt0.c3)) AND ((rt0.c0, vt1.c0))) WHEN (((rt0.c2, x''))==((rt0.c0, '-1253896892'))) THEN rt0.c0 ELSE (rt0.c0 IN (rt0.c2)) END DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c1) ORDER BY x'a216efdc3a', rt0.c0  NULLS FIRST, CASE rt0.c3  WHEN ((((rt0.c2)AND(vt1.c0)))AND(rt0.c3)) THEN NULL WHEN (((rt0.c3, rt0.c1))<>((rt0.c2, rt0.c3))) THEN (((rt0.c2, rt0.c3)) BETWEEN ((-1758455346, rt0.c3)) AND ((rt0.c0, vt1.c0))) WHEN (((rt0.c2, x''))==((rt0.c0, '-1253896892'))) THEN rt0.c0 ELSE (rt0.c0 IN (rt0.c2)) END DESC LIMIT 0;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0))) BETWEEN ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)))) AND (vt1.c0))) ORDER BY CASE CHANGES()  WHEN x'75' THEN vt1.c0 COLLATE BINARY WHEN (vt1.c0 IN (vt1.c0)) THEN (NOT (vt1.c0)) END ASC  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0 IN (vt1.c0))) BETWEEN ((((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0)))) AND (vt1.c0)))AND((NOT (vt1.c0 COLLATE BINARY))))) ORDER BY ((- (vt1.c0)) IN ());
SELECT COUNT(*) FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN NULL WHEN rt0.c1 THEN rt0.c2 END) NOT BETWEEN ((- (rt0.c2))) AND (-1.862126037E9)));
SELECT COUNT(*) FROM rt0 WHERE (((CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN NULL WHEN rt0.c1 THEN rt0.c2 END) NOT BETWEEN ((- (rt0.c2))) AND (-1.862126037E9))) ORDER BY ((((((0xffffffff95876fae)OR(CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 WHEN NULL THEN rt0.c2 END)))OR(((rt0.c2)&(rt0.c1)))))AND(CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c1 END)), '-2038716267'  NULLS LAST;
SELECT MIN(rt0.c2) FROM rt0 WHERE (CASE WHEN ((rt0.c1)LIKE(3508589.0)) THEN (((rt0.c0))>=((rt0.c3))) END);
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (((CASE WHEN ((rt0.c1)LIKE(3508589.0)) THEN (((rt0.c0))=((rt0.c3))) END)AND(((HEX(DISTINCT rt0.c2))<<((+ (rt0.c1))))))) ORDER BY ((((((UPPER(rt0.c3))OR((- (rt0.c3)))))OR(rt0.c2)))AND(((0.2822905257071353)>(rt0.c2)))) ASC, CASE WHEN (- (rt0.c0)) THEN (rt0.c2 IN ()) ELSE (((rt0.c0)) BETWEEN ((rt0.c2)) AND ((rt0.c0))) END DESC, ABS(DISTINCT (NOT (rt0.c3))) LIMIT 0x2;
SELECT * FROM rt0 WHERE ((((CAST(rt0.c2 AS BLOB), rt0.c2 COLLATE BINARY))<((((rt0.c2) IS FALSE), ((rt0.c1)&(rt0.c2)))))) ORDER BY CASE WHEN rt0.c2 COLLATE BINARY THEN (rt0.c0 IN (x'5e88', rt0.c1)) WHEN ((rt0.c1)LIKE(rt0.c1)) THEN CASE WHEN NULL THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN 0.1932854506283016 THEN rt0.c2 ELSE rt0.c3 END END ASC  NULLS LAST, (+ ((rt0.c1 IN ())));
SELECT DISTINCT * FROM rt0 WHERE ((((CAST(rt0.c2 AS BLOB), rt0.c2 COLLATE BINARY))<((((rt0.c2) IS FALSE), ((rt0.c1)&(rt0.c2)))))) ORDER BY CASE WHEN rt0.c2 COLLATE BINARY THEN (rt0.c0 IN (x'5e88', rt0.c1)) WHEN ((rt0.c1)LIKE(rt0.c1)) THEN CASE WHEN NULL THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN 0.1932854506283016 THEN rt0.c2 ELSE rt0.c3 END END ASC  NULLS LAST, (+ ((rt0.c1 IN ())));
SELECT * FROM rt0 WHERE ((((CAST(rt0.c2 AS BLOB), rt0.c2 COLLATE BINARY))<((((rt0.c2) IS FALSE), ((rt0.c1)&(rt0.c2)))))) ORDER BY CASE WHEN rt0.c2 COLLATE BINARY THEN (rt0.c0 IN (x'5e88', rt0.c1)) WHEN ((rt0.c1)LIKE(rt0.c1)) THEN CASE WHEN NULL THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN 0.1932854506283016 THEN rt0.c2 ELSE rt0.c3 END END ASC  NULLS LAST, (+ ((rt0.c1 IN ())));
SELECT ALL MAX(rt0.c3) FROM rt0, vt1 WHERE (SQLITE_SOURCE_ID()) ORDER BY ((TYPEOF(DISTINCT rt0.c0)) ISNULL), ((LIKE('-1108841663', rt0.c3))>((- (rt0.c0)))) DESC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c3) FROM rt0, vt1 WHERE (((SQLITE_SOURCE_ID())AND(((((((rt0.c3)OR(vt1.c0)))OR(rt0.c2)))*(TRIM(vt1.c0)))))) ORDER BY CAST(CAST(rt0.c0 AS NUMERIC) AS NUMERIC) ASC LIMIT 5 INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0, vt1 WHERE (CASE WHEN rt0.c0 COLLATE NOCASE THEN (rt0.c3 IN (rt0.c3, rt0.c0)) WHEN ((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c2)) THEN ((((((rt0.c0)OR(rt0.c2)))AND(rt0.c3)))OR(rt0.c1)) ELSE rt0.c1 COLLATE RTRIM END) ORDER BY CAST(CAST(rt0.c0 AS NUMERIC) AS NUMERIC) ASC LIMIT 0X5;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0))>=((vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0))==((vt1.c0)))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)) BETWEEN ((vt1.c0)) AND (('1508769651')))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))))) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0))>=((vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0))==((vt1.c0)))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)) BETWEEN ((vt1.c0)) AND (('1508769651')))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))))) LIMIT 0x0;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (vt1.c0))) BETWEEN (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) AND (((('', rt0.c2))!=((rt0.c1, rt0.c0))))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((NOT (vt1.c0))) BETWEEN (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) AND (((('', rt0.c2))!=((rt0.c1, rt0.c0))))))AND((((rt0.c0, x'4a'))<=((CAST(rt0.c2 AS NUMERIC), (+ (rt0.c2)))))))) LIMIT 0X0;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (vt1.c0))) BETWEEN (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) AND (((('', rt0.c2))!=((rt0.c1, rt0.c0))))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((NOT (vt1.c0))) BETWEEN (((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0))) AND (((('', rt0.c2))!=((rt0.c1, rt0.c0))))))AND((((rt0.c0, x'4a'))<=((CAST(rt0.c2 AS NUMERIC), (+ (rt0.c2)))))))) LIMIT 0X0;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)=(vt1.c0)))OR(((((((((vt1.c0)OR(vt1.c0)))AND(NULL)))AND(vt1.c0)))AND(vt1.c0)))))AND((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))))AND(vt1.c0 COLLATE NOCASE)));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((((((vt1.c0)==(vt1.c0)))OR(((((((((vt1.c0)OR(vt1.c0)))AND(NULL)))AND(vt1.c0)))AND(vt1.c0)))))AND((((vt1.c0, vt1.c0))==((vt1.c0, vt1.c0))))))AND(vt1.c0 COLLATE NOCASE)))AND((((vt1.c0)) NOT BETWEEN ((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))) AND ((((vt1.c0)>>(x'bf')))))))) LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT BETWEEN (((rt0.c3)-(rt0.c3))) AND (((rt0.c1) NOTNULL))) WHERE ((+ (CAST(rt0.c0 AS NUMERIC))));
SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT BETWEEN (((rt0.c3)-(rt0.c3))) AND (((rt0.c1) NOTNULL))) WHERE ((((+ (CAST(rt0.c0 AS NUMERIC))))AND(rt0.c0))) INTERSECT SELECT ALL COUNT(*) FROM vt1 INNER JOIN rt0 ON ((rt0.c2 COLLATE BINARY) NOT BETWEEN (((rt0.c3)-(rt0.c3))) AND (((rt0.c1) NOTNULL))) WHERE (((((((CAST(rt0.c1 AS BLOB))OR(rt0.c3)))OR(((((rt0.c2)OR(rt0.c3)))OR(rt0.c2)))))OR(CASE rt0.c0  WHEN rt0.c2 THEN -2.115833049E9 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END)));
SELECT ALL * FROM vt1, rt0 WHERE (CAST(vt1.c0 AS INTEGER));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(vt1.c0 AS INTEGER))AND(((((((((((rt0.c2)OR(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(rt0.c3)) COLLATE BINARY))) LIMIT 5 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c2 COLLATE NOCASE)|(((((rt0.c3)OR(rt0.c3)))AND(rt0.c3))))) LIMIT 0x5;
SELECT ALL * FROM vt1, rt0 WHERE (CAST(vt1.c0 AS INTEGER));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CAST(vt1.c0 AS INTEGER))AND(((((((((((rt0.c2)OR(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c2)))AND(rt0.c3)) COLLATE BINARY))) LIMIT 5 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c2 COLLATE NOCASE)|(((((rt0.c3)OR(rt0.c3)))AND(rt0.c3))))) LIMIT 0x5;
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE (CAST(((((((NULL)OR(rt0.c3)))AND(rt0.c0)))AND(vt1.c0)) AS BLOB)) ORDER BY CAST((((vt1.c0))<((rt0.c2))) AS BLOB), (((((('-2051742299')OR(rt0.c1)))AND('-1720061641')))GLOB(((rt0.c1) ISNULL))) DESC;
SELECT ALL MIN(rt0.c2) FROM rt0, vt1 WHERE (CAST(((((((NULL)OR(rt0.c3)))AND(rt0.c0)))AND(vt1.c0)) AS BLOB)) ORDER BY LIKELIHOOD(CAST(rt0.c1 AS TEXT), (rt0.c2 IN (vt1.c0))) ASC  NULLS FIRST;
SELECT MIN(rt0.c1) FROM rt0 WHERE (rt0.c0);
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE (rt0.c0) INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE (((((rt0.c0)OR(rt0.c0)))OR(rt0.c1)) COLLATE RTRIM);
SELECT * FROM rt0 WHERE ((((rt0.c1, rt0.c3, rt0.c2, rt0.c3)) NOT BETWEEN ((CAST(rt0.c3 AS NUMERIC), NULLIF(rt0.c2, rt0.c3), ((rt0.c3) IS TRUE), ((((((((((((rt0.c0)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c2)))) AND ((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c0)))AND(rt0.c3)), rt0.c3, rt0.c0 COLLATE RTRIM, ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))) ORDER BY CASE WHEN CAST(rt0.c3 AS REAL) THEN (((rt0.c3))<((rt0.c3))) WHEN (rt0.c2 IN (rt0.c0)) THEN COALESCE(rt0.c3, rt0.c1, rt0.c0) WHEN CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN x'' WHEN rt0.c0 THEN rt0.c2 WHEN x'7d' THEN rt0.c3 ELSE rt0.c0 END THEN (((('')OR(rt0.c0)))AND(rt0.c3)) END  NULLS LAST, (((((rt0.c1)OR(rt0.c3)))OR(rt0.c0)) IN ());
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c1, rt0.c3, rt0.c2, rt0.c3)) NOT BETWEEN ((CAST(rt0.c3 AS NUMERIC), NULLIF(rt0.c2, rt0.c3), ((rt0.c3) IS TRUE), ((((((((((((rt0.c0)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c2)))) AND ((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c0)))AND(rt0.c3)), rt0.c3, rt0.c0 COLLATE RTRIM, ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))) ORDER BY CAST(rt0.c2 AS NUMERIC) COLLATE RTRIM  NULLS LAST, (+ (NULLIF(rt0.c2, rt0.c0))) ASC INTERSECT SELECT DISTINCT * FROM rt0 WHERE ((((((((((rt0.c1 IN ()))OR(rt0.c3)))AND((rt0.c2 IN (rt0.c3, rt0.c3)))))AND(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c1)))))OR(CAST(rt0.c0 AS INTEGER)))) ORDER BY CAST(rt0.c2 AS NUMERIC) COLLATE RTRIM  NULLS LAST, (+ (NULLIF(rt0.c2, rt0.c0))) ASC;
SELECT * FROM rt0 WHERE ((((rt0.c1, rt0.c3, rt0.c2, rt0.c3)) NOT BETWEEN ((CAST(rt0.c3 AS NUMERIC), NULLIF(rt0.c2, rt0.c3), ((rt0.c3) IS TRUE), ((((((((((((rt0.c0)AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c2)))) AND ((((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c3)))AND(rt0.c0)))AND(rt0.c3)), rt0.c3, rt0.c0 COLLATE RTRIM, ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))) ORDER BY CASE WHEN CAST(rt0.c3 AS REAL) THEN (((rt0.c3))<((rt0.c3))) WHEN (rt0.c2 IN (rt0.c0)) THEN COALESCE(rt0.c3, rt0.c1, rt0.c0) WHEN CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN x'' WHEN rt0.c0 THEN rt0.c2 WHEN x'7d' THEN rt0.c3 ELSE rt0.c0 END THEN (((('')OR(rt0.c0)))AND(rt0.c3)) END  NULLS LAST, (((((rt0.c1)OR(rt0.c3)))OR(rt0.c0)) IN ());
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (CASE WHEN x'' THEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1)) END) ORDER BY (NOT (NULL)) ASC  NULLS LAST, ((IFNULL(DISTINCT rt0.c0, rt0.c0)) BETWEEN ((('r|-e5v-Z') NOT BETWEEN (rt0.c3) AND (rt0.c3))) AND (CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END));
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (((CASE WHEN x'' THEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1)) END)AND((((~ (rt0.c2))) NOT NULL)))) ORDER BY rt0.c0  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0)/(vt1.c0)))||(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END))) ORDER BY ((((vt1.c0)IS NOT(vt1.c0))) BETWEEN (((0.7089936028165227) BETWEEN (vt1.c0) AND (vt1.c0))) AND (CASE vt1.c0  WHEN 0.04315449926037951 THEN vt1.c0 ELSE vt1.c0 END)), ((((((((UNICODE(NULL))AND((('o')>>(vt1.c0)))))OR(((vt1.c0)||(vt1.c0)))))AND(((vt1.c0)>=(vt1.c0)))))AND((vt1.c0 IN ()))) DESC  NULLS FIRST, ((((vt1.c0) NOT NULL))/(LOWER(DISTINCT vt1.c0))) DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((((vt1.c0)/(vt1.c0)))||(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND((((vt1.c0, 657389853)) BETWEEN ((CAST(vt1.c0 AS REAL), -1.153288785E9)) AND ((highlight(vt1.c0, vt1.c0, vt1.c0, vt1.c0), ((vt1.c0)/(vt1.c0)))))))) ORDER BY ((((vt1.c0 COLLATE RTRIM)AND(vt1.c0 COLLATE BINARY)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC, json_valid(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((NOT ((~ (vt1.c0))))) ORDER BY ((((vt1.c0 COLLATE RTRIM)AND(vt1.c0 COLLATE BINARY)))AND(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC, json_valid(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)));
SELECT ALL * FROM rt0 WHERE ((((rt0.c1 IN ()))<=(((rt0.c2) ISNULL))));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c1 IN ()))<=(((rt0.c2) ISNULL))))AND(rt0.c3)));
SELECT ALL * FROM rt0 WHERE ((((rt0.c1 IN ()))<=(((rt0.c2) ISNULL))));
SELECT DISTINCT * FROM rt0 WHERE ((((((rt0.c1 IN ()))<=(((rt0.c2) ISNULL))))AND(rt0.c3)));
SELECT MAX(rt0.c0) FROM rt0 WHERE (CAST(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)) AS REAL)) ORDER BY CASE ((rt0.c1)>=(rt0.c2))  WHEN (((rt0.c3, rt0.c3)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c0))) THEN CAST(rt0.c0 AS TEXT) ELSE ((((rt0.c2)AND(rt0.c1)))OR(rt0.c3)) END, x'' DESC;
SELECT MAX(rt0.c0) FROM rt0 WHERE (CAST(((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c2)) AS REAL)) ORDER BY CASE ((rt0.c1)>=(rt0.c2))  WHEN (((rt0.c3, rt0.c3)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c0))) THEN CAST(rt0.c0 AS TEXT) ELSE ((((rt0.c2)AND(rt0.c1)))OR(rt0.c3)) END, x'' DESC LIMIT 1 INTERSECT SELECT ALL MAX(rt0.c0) FROM rt0 WHERE ((((((rt0.c0) IS TRUE)))=((((rt0.c3)LIKE(rt0.c2)))))) ORDER BY CASE ((rt0.c1)>=(rt0.c2))  WHEN (((rt0.c3, rt0.c3)) BETWEEN ((rt0.c0, rt0.c3)) AND ((rt0.c3, rt0.c0))) THEN CAST(rt0.c0 AS TEXT) ELSE ((((rt0.c2)AND(rt0.c1)))OR(rt0.c3)) END, x'' DESC LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((NOT (vt1.c0))) BETWEEN ('-488118098') AND (((((vt1.c0)OR(753281256)))AND(vt1.c0))))) ORDER BY ((((vt1.c0)>(vt1.c0))) NOT BETWEEN ('-86516757') AND (CAST(vt1.c0 AS NUMERIC))), (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END IN ((NOT (vt1.c0)), DATETIME(vt1.c0, x'efd8', '-722615761', vt1.c0))) DESC, CASE WHEN ((vt1.c0) ISNULL) THEN (vt1.c0 IN ()) ELSE (- (vt1.c0)) END  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE ((((NOT (vt1.c0))) BETWEEN ('-488118098') AND (((((vt1.c0)OR(753281256)))AND(vt1.c0))))) ORDER BY x''  NULLS LAST, (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))))>=((((vt1.c0) IS FALSE)))) DESC, CASE (- (vt1.c0))  WHEN (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))) THEN vt1.c0 COLLATE BINARY WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN ((vt1.c0)IS NOT(vt1.c0)) END DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM rt0 WHERE ((((rt0.c0, rt0.c3, rt0.c0, rt0.c3)) BETWEEN (('-781367930', 0.3820542330737693, ((('830243475'))<=((rt0.c1))), ((rt0.c2)+(rt0.c2)))) AND ((rt0.c1 COLLATE RTRIM, ((rt0.c3)OR(rt0.c3)), rt0.c0 COLLATE RTRIM, ((rt0.c3)-(rt0.c0))))));
SELECT * FROM rt0 WHERE ((((rt0.c0, rt0.c3, rt0.c0, rt0.c3)) BETWEEN (('-781367930', 0.3820542330737693, ((('830243475'))<=((rt0.c1))), ((rt0.c2)+(rt0.c2)))) AND ((rt0.c1 COLLATE RTRIM, ((rt0.c3)OR(rt0.c3)), rt0.c0 COLLATE RTRIM, ((rt0.c3)-(rt0.c0)))))) INTERSECT SELECT * FROM rt0 WHERE (rt0.c3);
SELECT ALL * FROM rt0 WHERE ((((rt0.c0, rt0.c3, rt0.c0, rt0.c3)) BETWEEN (('-781367930', 0.3820542330737693, ((('830243475'))<=((rt0.c1))), ((rt0.c2)+(rt0.c2)))) AND ((rt0.c1 COLLATE RTRIM, ((rt0.c3)OR(rt0.c3)), rt0.c0 COLLATE RTRIM, ((rt0.c3)-(rt0.c0))))));
SELECT * FROM rt0 WHERE ((((rt0.c0, rt0.c3, rt0.c0, rt0.c3)) BETWEEN (('-781367930', 0.3820542330737693, ((('830243475'))<=((rt0.c1))), ((rt0.c2)+(rt0.c2)))) AND ((rt0.c1 COLLATE RTRIM, ((rt0.c3)OR(rt0.c3)), rt0.c0 COLLATE RTRIM, ((rt0.c3)-(rt0.c0)))))) INTERSECT SELECT * FROM rt0 WHERE (rt0.c3);
SELECT * FROM vt1, rt0 WHERE (((((((((rt0.c3)AND((((rt0.c3, rt0.c0, rt0.c1)) BETWEEN ((rt0.c2, rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c1, vt1.c0))))))OR(((vt1.c0)AND(rt0.c0)))))OR(((vt1.c0) NOT NULL))))AND(((rt0.c1)-(rt0.c2)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((rt0.c3)AND((((rt0.c3, rt0.c0, rt0.c1)) BETWEEN ((rt0.c2, rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c1, vt1.c0))))))OR(((vt1.c0)AND(rt0.c0)))))OR(((vt1.c0) NOT NULL))))AND(((rt0.c1)-(rt0.c2)))))AND('-86516757'))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE CAST(rt0.c1 AS NUMERIC)  WHEN CASE WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 END THEN CASE WHEN vt1.c0 THEN rt0.c0 END END);
SELECT * FROM vt1, rt0 WHERE (((((((((rt0.c3)AND((((rt0.c3, rt0.c0, rt0.c1)) BETWEEN ((rt0.c2, rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c1, vt1.c0))))))OR(((vt1.c0)AND(rt0.c0)))))OR(((vt1.c0) NOT NULL))))AND(((rt0.c1)-(rt0.c2)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((((((rt0.c3)AND((((rt0.c3, rt0.c0, rt0.c1)) BETWEEN ((rt0.c2, rt0.c2, rt0.c1)) AND ((vt1.c0, rt0.c1, vt1.c0))))))OR(((vt1.c0)AND(rt0.c0)))))OR(((vt1.c0) NOT NULL))))AND(((rt0.c1)-(rt0.c2)))))AND('-86516757'))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CASE CAST(rt0.c1 AS NUMERIC)  WHEN CASE WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c3 END THEN CASE WHEN vt1.c0 THEN rt0.c0 END END);
SELECT ALL * FROM rt0 WHERE (((rt0.c0)LIKE(NULL)));
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c0)LIKE(NULL))) ORDER BY (((rt0.c1, (((rt0.c2, rt0.c3, '', '-1329493880', rt0.c3)) NOT BETWEEN ((x'61f9', x'', rt0.c0, rt0.c3, rt0.c2)) AND ((rt0.c0, x'', rt0.c1, rt0.c3, rt0.c2)))))>((((rt0.c0)>(rt0.c1)), (((rt0.c1))<>((rt0.c2)))))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST((~ (rt0.c0)) AS TEXT)) ORDER BY (((rt0.c1, (((rt0.c2, rt0.c3, '', '-1329493880', rt0.c3)) NOT BETWEEN ((x'61f9', x'', rt0.c0, rt0.c3, rt0.c2)) AND ((rt0.c0, x'', rt0.c1, rt0.c3, rt0.c2)))))>((((rt0.c0)>(rt0.c1)), (((rt0.c1))!=((rt0.c2)))))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM rt0 WHERE (((rt0.c0)LIKE(NULL)));
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c0)LIKE(NULL))) ORDER BY (((rt0.c1, (((rt0.c2, rt0.c3, '', '-1329493880', rt0.c3)) NOT BETWEEN ((x'61f9', x'', rt0.c0, rt0.c3, rt0.c2)) AND ((rt0.c0, x'', rt0.c1, rt0.c3, rt0.c2)))))>((((rt0.c0)>(rt0.c1)), (((rt0.c1))<>((rt0.c2)))))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST((~ (rt0.c0)) AS TEXT)) ORDER BY (((rt0.c1, (((rt0.c2, rt0.c3, '', '-1329493880', rt0.c3)) NOT BETWEEN ((x'61f9', x'', rt0.c0, rt0.c3, rt0.c2)) AND ((rt0.c0, x'', rt0.c1, rt0.c3, rt0.c2)))))>((((rt0.c0)>(rt0.c1)), (((rt0.c1))!=((rt0.c2)))))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt1, rt0 WHERE (((((x'2a') ISNULL)) IS FALSE));
SELECT * FROM vt1, rt0 WHERE (((((((x'2a') ISNULL)) IS FALSE))AND((+ (((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))OR(rt0.c2)))OR(vt1.c0))))))) ORDER BY ((rt0.c0 COLLATE RTRIM)>=(((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))))  NULLS LAST, (((NOT (rt0.c3))) ISNULL), ((((((((rt0.c2)AND(rt0.c2)))AND(vt1.c0)))OR('1715995285')))OR((((rt0.c2))>=((vt1.c0))))) DESC INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((- (LIKELY(DISTINCT rt0.c3)))) ORDER BY ((rt0.c0 COLLATE RTRIM)>=(((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))))  NULLS LAST, (((NOT (rt0.c3))) ISNULL), ((((((((rt0.c2)AND(rt0.c2)))AND(vt1.c0)))OR('1715995285')))OR((((rt0.c2))>=((vt1.c0))))) DESC;
SELECT * FROM vt1, rt0 WHERE (((((x'2a') ISNULL)) IS FALSE));
SELECT * FROM vt1, rt0 WHERE (((((((x'2a') ISNULL)) IS FALSE))AND((+ (((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))OR(rt0.c2)))OR(vt1.c0))))))) ORDER BY ((rt0.c0 COLLATE RTRIM)>=(((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))))  NULLS LAST, (((NOT (rt0.c3))) ISNULL), ((((((((rt0.c2)AND(rt0.c2)))AND(vt1.c0)))OR('1715995285')))OR((((rt0.c2))>=((vt1.c0))))) DESC INTERSECT SELECT ALL * FROM vt1, rt0 WHERE ((- (LIKELY(DISTINCT rt0.c3)))) ORDER BY ((rt0.c0 COLLATE RTRIM)>=(((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0))))  NULLS LAST, (((NOT (rt0.c3))) ISNULL), ((((((((rt0.c2)AND(rt0.c2)))AND(vt1.c0)))OR('1715995285')))OR((((rt0.c2))>=((vt1.c0))))) DESC;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (TRIM(((vt1.c0) IS FALSE))) ORDER BY ((vt1.c0)AND(vt1.c0)) COLLATE BINARY  NULLS LAST, ((vt1.c0) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (CAST(vt1.c0 AS NUMERIC)))  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (TRIM(((vt1.c0) IS FALSE))) ORDER BY (((((vt1.c0))>((vt1.c0)))) NOT BETWEEN (vt1.c0) AND (INSTR(vt1.c0, vt1.c0))) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY (((((vt1.c0))>((vt1.c0)))) NOT BETWEEN (vt1.c0) AND (INSTR(vt1.c0, vt1.c0)));
SELECT * FROM vt1, rt0 WHERE (-904652365) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END)==((((vt1.c0, rt0.c2)) NOT BETWEEN ((vt1.c0, '.+<izT')) AND ((rt0.c2, vt1.c0))))) ASC, ((vt1.c0) NOT BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((rt0.c1) NOT BETWEEN (rt0.c3) AND ('AcT3I럶zD|')))) DESC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (-904652365) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END)=((((vt1.c0, rt0.c2)) NOT BETWEEN ((vt1.c0, '.+<izT')) AND ((rt0.c2, vt1.c0))))) ASC, ((vt1.c0) NOT BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((rt0.c1) NOT BETWEEN (rt0.c3) AND ('AcT3I럶zD|')))) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (CASE WHEN (~ (rt0.c3)) THEN ((rt0.c2) NOT NULL) WHEN (- (rt0.c3)) THEN (~ (rt0.c2)) END) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END)==((((vt1.c0, rt0.c2)) NOT BETWEEN ((vt1.c0, '.+<izT')) AND ((rt0.c2, vt1.c0))))) ASC, ((vt1.c0) NOT BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((rt0.c1) NOT BETWEEN (rt0.c3) AND ('AcT3I럶zD|')))) DESC  NULLS FIRST LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (-904652365) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END)==((((vt1.c0, rt0.c2)) NOT BETWEEN ((vt1.c0, '.+<izT')) AND ((rt0.c2, vt1.c0))))) ASC, ((vt1.c0) NOT BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((rt0.c1) NOT BETWEEN (rt0.c3) AND ('AcT3I럶zD|')))) DESC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (-904652365) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END)=((((vt1.c0, rt0.c2)) NOT BETWEEN ((vt1.c0, '.+<izT')) AND ((rt0.c2, vt1.c0))))) ASC, ((vt1.c0) NOT BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((rt0.c1) NOT BETWEEN (rt0.c3) AND ('AcT3I럶zD|')))) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt1, rt0 WHERE (CASE WHEN (~ (rt0.c3)) THEN ((rt0.c2) NOT NULL) WHEN (- (rt0.c3)) THEN (~ (rt0.c2)) END) ORDER BY ((CASE WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END)==((((vt1.c0, rt0.c2)) NOT BETWEEN ((vt1.c0, '.+<izT')) AND ((rt0.c2, vt1.c0))))) ASC, ((vt1.c0) NOT BETWEEN (((vt1.c0)AND(vt1.c0))) AND (((rt0.c1) NOT BETWEEN (rt0.c3) AND ('AcT3I럶zD|')))) DESC  NULLS FIRST LIMIT 1;
SELECT MIN(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE (((CAST(rt0.c0 AS BLOB)) NOTNULL)) ORDER BY (+ (((vt1.c0)-(rt0.c1)))) ASC  NULLS LAST;
SELECT DISTINCT MIN(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE (((CAST(rt0.c0 AS BLOB)) NOTNULL)) ORDER BY ((0.9491368323527944) NOT BETWEEN (CAST(rt0.c0 AS INTEGER)) AND (((vt1.c0) IS FALSE))) ASC  NULLS LAST, (((rt0.c3)-(NULL)) IN ()) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM rt0 NATURAL JOIN vt1 WHERE (CAST(rt0.c3 AS REAL)) ORDER BY ((0.9491368323527944) NOT BETWEEN (CAST(rt0.c0 AS INTEGER)) AND (((vt1.c0) IS FALSE))) ASC  NULLS LAST, (((rt0.c3)-(NULL)) IN ()) DESC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM rt0 WHERE (NULLIF(((rt0.c0)-(rt0.c3)), CAST(rt0.c3 AS REAL)));
SELECT DISTINCT * FROM rt0 WHERE (NULLIF(((rt0.c0)-(rt0.c3)), CAST(rt0.c3 AS REAL))) LIMIT 0;
SELECT ALL * FROM rt0 WHERE (NULLIF(((rt0.c0)-(rt0.c3)), CAST(rt0.c3 AS REAL)));
SELECT DISTINCT * FROM rt0 WHERE (NULLIF(((rt0.c0)-(rt0.c3)), CAST(rt0.c3 AS REAL))) LIMIT 0;
SELECT * FROM vt1 WHERE ((((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))OR(CAST(vt1.c0 AS INTEGER))))OR((vt1.c0 IN (vt1.c0))))) ORDER BY (((((vt1.c0)<(vt1.c0))))<((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))OR(CAST(vt1.c0 AS INTEGER))))OR((vt1.c0 IN (vt1.c0))))) ORDER BY (((((vt1.c0)<(vt1.c0))))<((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT * FROM vt1 WHERE ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ())) ORDER BY (((((vt1.c0)<(vt1.c0))))<((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM vt1 WHERE ((((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))OR(CAST(vt1.c0 AS INTEGER))))OR((vt1.c0 IN (vt1.c0))))) ORDER BY (((((vt1.c0)<(vt1.c0))))<((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))OR(CAST(vt1.c0 AS INTEGER))))OR((vt1.c0 IN (vt1.c0))))) ORDER BY (((((vt1.c0)<(vt1.c0))))<((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT * FROM vt1 WHERE ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) IN ())) ORDER BY (((((vt1.c0)<(vt1.c0))))<((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ())) ISNULL)) ORDER BY vt1.c0 DESC  NULLS LAST, (((0.1159886400756962, x'')) BETWEEN ((CASE WHEN x'66' THEN '1000902026' END, ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<=((x'15464a', vt1.c0, vt1.c0, 'Am鸝'))), ((vt1.c0)+(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 IN ())) ISNULL))AND(NULLIF('0.0', (- (vt1.c0)))))) ORDER BY vt1.c0 DESC  NULLS LAST, (((0.1159886400756962, x'')) BETWEEN ((CASE WHEN x'66' THEN '1000902026' END, ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<=((x'15464a', vt1.c0, vt1.c0, 'Am鸝'))), ((vt1.c0)+(vt1.c0))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((CAST(vt1.c0 AS NUMERIC) IN ())) ORDER BY vt1.c0 DESC  NULLS LAST, (((0.1159886400756962, x'')) BETWEEN ((CASE WHEN x'66' THEN '1000902026' END, ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<=((x'15464a', vt1.c0, vt1.c0, 'Am鸝'))), ((vt1.c0)+(vt1.c0))))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ())) ISNULL)) ORDER BY vt1.c0 DESC  NULLS LAST, (((0.1159886400756962, x'')) BETWEEN ((CASE WHEN x'66' THEN '1000902026' END, ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<=((x'15464a', vt1.c0, vt1.c0, 'Am鸝'))), ((vt1.c0)+(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 IN ())) ISNULL))AND(NULLIF('0.0', (- (vt1.c0)))))) ORDER BY vt1.c0 DESC  NULLS LAST, (((0.1159886400756962, x'')) BETWEEN ((CASE WHEN x'66' THEN '1000902026' END, ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<=((x'15464a', vt1.c0, vt1.c0, 'Am鸝'))), ((vt1.c0)+(vt1.c0))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((CAST(vt1.c0 AS NUMERIC) IN ())) ORDER BY vt1.c0 DESC  NULLS LAST, (((0.1159886400756962, x'')) BETWEEN ((CASE WHEN x'66' THEN '1000902026' END, ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND (((((vt1.c0, vt1.c0, vt1.c0, vt1.c0))<=((x'15464a', vt1.c0, vt1.c0, 'Am鸝'))), ((vt1.c0)+(vt1.c0))))) LIMIT 1;
SELECT MIN(rt0.c2) FROM vt1 CROSS JOIN rt0 ON (rt0.c2 COLLATE RTRIM IN (CHAR(vt1.c0, rt0.c2, rt0.c3, rt0.c3, rt0.c2), NULL)) WHERE (CAST((rt0.c0 IN (rt0.c0, rt0.c3)) AS REAL)) ORDER BY ((rt0.c2) NOT NULL) COLLATE RTRIM  NULLS FIRST, -1.468222271E9;
SELECT DISTINCT MIN(rt0.c2) FROM vt1 CROSS JOIN rt0 ON (rt0.c2 COLLATE RTRIM IN (CHAR(vt1.c0, rt0.c2, rt0.c3, rt0.c3, rt0.c2), NULL)) WHERE (CAST((rt0.c0 IN (rt0.c0)) AS REAL)) ORDER BY ((rt0.c2) NOT NULL) COLLATE RTRIM  NULLS FIRST, -1.468222271E9 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM vt1 CROSS JOIN rt0 ON (rt0.c2 COLLATE RTRIM IN (CHAR(vt1.c0, rt0.c2, rt0.c3, rt0.c3, rt0.c2), NULL)) WHERE ((NOT (rt0.c1))) ORDER BY ((rt0.c2) NOT NULL) COLLATE RTRIM  NULLS FIRST, -1.468222271E9;
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE ((+ ((((vt1.c0, rt0.c2, vt1.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c3, rt0.c0, rt0.c2)) AND ((rt0.c3, vt1.c0, rt0.c0, rt0.c0))))));
SELECT DISTINCT MAX(rt0.c3) FROM vt1, rt0 WHERE ((((+ ((((vt1.c0, rt0.c2, vt1.c0, rt0.c2)) NOT BETWEEN ((rt0.c1, rt0.c3, rt0.c0, rt0.c2)) AND ((rt0.c3, vt1.c0, rt0.c0, rt0.c0))))))AND(x'e2')));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE));
SELECT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) ORDER BY ((CAST(vt1.c0 AS INTEGER)) IS TRUE)  NULLS FIRST, ((CASE vt1.c0  WHEN vt1.c0 THEN '-533366644' WHEN vt1.c0 THEN vt1.c0 END)<((vt1.c0 IN ()))) ASC, LIKELIHOOD(DISTINCT vt1.c0 COLLATE RTRIM, '-') LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE ('') ORDER BY ((CAST(vt1.c0 AS INTEGER)) IS TRUE)  NULLS FIRST, ((CASE vt1.c0  WHEN vt1.c0 THEN '-533366644' WHEN vt1.c0 THEN vt1.c0 END)<((vt1.c0 IN ()))) ASC, LIKELIHOOD(DISTINCT vt1.c0 COLLATE RTRIM, '-') LIMIT 1;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE));
SELECT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) ORDER BY ((CAST(vt1.c0 AS INTEGER)) IS TRUE)  NULLS FIRST, ((CASE vt1.c0  WHEN vt1.c0 THEN '-533366644' WHEN vt1.c0 THEN vt1.c0 END)<((vt1.c0 IN ()))) ASC, LIKELIHOOD(DISTINCT vt1.c0 COLLATE RTRIM, '-') LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE ('') ORDER BY ((CAST(vt1.c0 AS INTEGER)) IS TRUE)  NULLS FIRST, ((CASE vt1.c0  WHEN vt1.c0 THEN '-533366644' WHEN vt1.c0 THEN vt1.c0 END)<((vt1.c0 IN ()))) ASC, LIKELIHOOD(DISTINCT vt1.c0 COLLATE RTRIM, '-') LIMIT 1;
SELECT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) NOT BETWEEN (TRIM(DISTINCT vt1.c0)) AND (((vt1.c0)GLOB('p+F')))));
SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) NOT BETWEEN (TRIM(DISTINCT vt1.c0)) AND (((vt1.c0)GLOB('p+F')))))AND(json_array_length(vt1.c0) COLLATE RTRIM COLLATE NOCASE))) ORDER BY (((- (vt1.c0)))>(json_patch(vt1.c0, vt1.c0))) DESC  NULLS LAST LIMIT 3;
SELECT * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) NOT BETWEEN (TRIM(DISTINCT vt1.c0)) AND (((vt1.c0)GLOB('p+F')))));
SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))) NOT BETWEEN (TRIM(DISTINCT vt1.c0)) AND (((vt1.c0)GLOB('p+F')))))AND(json_array_length(vt1.c0) COLLATE RTRIM COLLATE NOCASE))) ORDER BY (((- (vt1.c0)))>(json_patch(vt1.c0, vt1.c0))) DESC  NULLS LAST LIMIT 3;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((rt0.c3)-(vt1.c0)) COLLATE NOCASE WHERE (rt0.c1);
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((rt0.c3)-(vt1.c0)) COLLATE NOCASE WHERE (rt0.c1);
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((rt0.c3)-(vt1.c0)) COLLATE NOCASE WHERE (rt0.c1);
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((rt0.c3)-(vt1.c0)) COLLATE NOCASE WHERE (rt0.c1);
SELECT COUNT(*) FROM rt0 WHERE (((rt0.c1 IN ()) IN ()));
SELECT COUNT(*) FROM rt0 WHERE (((((rt0.c1 IN ()) IN ()))AND(NULLIF((((rt0.c3))>=((rt0.c3))), CAST(rt0.c1 AS TEXT))))) INTERSECT SELECT COUNT(*) FROM rt0 WHERE ((((- (rt0.c0)))+((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c3))))));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (rt0.c1) ORDER BY (((CASE WHEN vt1.c0 THEN x'' END))=(((((rt0.c2)) NOT BETWEEN ((vt1.c0)) AND ((rt0.c0)))))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((rt0.c1)AND(rt0.c2))) ORDER BY x'' ASC, CASE CASE WHEN rt0.c0 THEN rt0.c2 WHEN 0.585899351025558 THEN x'' WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c3 END  WHEN (rt0.c1 IN (rt0.c1, rt0.c0, rt0.c2)) THEN ((rt0.c0)*(rt0.c2)) ELSE RTRIM(rt0.c0) END ASC  NULLS FIRST, (((((((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c3)))AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c3)), CASE WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 END))<>((rt0.c0, CAST(rt0.c0 AS TEXT)))) DESC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((((rt0.c3) NOT NULL), json(rt0.c2)))==(((+ (rt0.c2)), (~ (rt0.c2)))))) ORDER BY x'' ASC, CASE CASE WHEN rt0.c0 THEN rt0.c2 WHEN 0.585899351025558 THEN x'' WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN vt1.c0 ELSE rt0.c3 END  WHEN (rt0.c1 IN (rt0.c1, rt0.c0, rt0.c2)) THEN ((rt0.c0)*(rt0.c2)) ELSE RTRIM(rt0.c0) END ASC  NULLS FIRST, (((((((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c3)))AND(vt1.c0)))OR(rt0.c3)))OR(rt0.c3)), CASE WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN vt1.c0 END))!=((rt0.c0, CAST(rt0.c0 AS TEXT)))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (CASE WHEN vt1.c0 COLLATE NOCASE THEN (vt1.c0 IN (vt1.c0)) ELSE (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) END);
SELECT ALL * FROM vt1 NOT INDEXED WHERE (((CASE WHEN vt1.c0 COLLATE NOCASE THEN (vt1.c0 IN (vt1.c0)) ELSE (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) END)AND(TRIM((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, 0.5311199337055702, vt1.c0)) AND ((x'0f4d', vt1.c0, vt1.c0, vt1.c0, vt1.c0))))))) INTERSECT SELECT ALL * FROM vt1 WHERE (((- (vt1.c0)) IN ()));
SELECT * FROM vt1 WHERE (CASE WHEN vt1.c0 COLLATE NOCASE THEN (vt1.c0 IN (vt1.c0)) ELSE (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) END);
SELECT ALL * FROM vt1 NOT INDEXED WHERE (((CASE WHEN vt1.c0 COLLATE NOCASE THEN (vt1.c0 IN (vt1.c0)) ELSE (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) END)AND(TRIM((((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, 0.5311199337055702, vt1.c0)) AND ((x'0f4d', vt1.c0, vt1.c0, vt1.c0, vt1.c0))))))) INTERSECT SELECT ALL * FROM vt1 WHERE (((- (vt1.c0)) IN ()));
SELECT * FROM vt1 WHERE (((((((vt1.c0)-(vt1.c0)))OR((vt1.c0 IN ()))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY ((LIKELIHOOD(vt1.c0, vt1.c0)) NOT BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (vt1.c0)), (TIME(vt1.c0, vt1.c0, vt1.c0) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE NOCASE, ((vt1.c0)>(vt1.c0)))) DESC  NULLS LAST, ((((~ (vt1.c0)), ((vt1.c0)GLOB(vt1.c0))))>=((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)), ((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)-(vt1.c0)))OR((vt1.c0 IN ()))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(SQLITE_COMPILEOPTION_USED(vt1.c0) COLLATE RTRIM))) ORDER BY (vt1.c0 IN (vt1.c0)) COLLATE BINARY DESC, CAST(vt1.c0 AS NUMERIC) ASC  NULLS LAST LIMIT 0x1;
SELECT * FROM vt1 WHERE (((((((vt1.c0)-(vt1.c0)))OR((vt1.c0 IN ()))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY ((LIKELIHOOD(vt1.c0, vt1.c0)) NOT BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (vt1.c0)), (TIME(vt1.c0, vt1.c0, vt1.c0) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), vt1.c0 COLLATE NOCASE, ((vt1.c0)>(vt1.c0)))) DESC  NULLS LAST, ((((~ (vt1.c0)), ((vt1.c0)GLOB(vt1.c0))))>=((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)), ((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))) ASC  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0)<(vt1.c0)) COLLATE BINARY) ORDER BY json(vt1.c0) DESC;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0)<(vt1.c0)) COLLATE BINARY) ORDER BY (((UPPER(vt1.c0), CAST(vt1.c0 AS REAL), CAST(x'' AS BLOB)))>((vt1.c0 COLLATE NOCASE, TRIM(DISTINCT vt1.c0), vt1.c0 COLLATE NOCASE))) DESC  NULLS LAST, (+ (vt1.c0));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 END)*(((rt0.c3) BETWEEN (rt0.c2) AND ('-1532470271'))))) ORDER BY ABS(DISTINCT (((vt1.c0))>=((rt0.c0)))) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c1 END)*(((rt0.c3) BETWEEN (rt0.c2) AND ('-1532470271'))))) ORDER BY ((CAST(rt0.c1 AS REAL)) IS TRUE) ASC  NULLS LAST, ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0)))IS NOT(rt0.c1 COLLATE RTRIM)) ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((COALESCE(DISTINCT rt0.c0, rt0.c3, rt0.c1)) NOT BETWEEN ((vt1.c0 IN ())) AND (((rt0.c0)OR(rt0.c1))))) ORDER BY ((CAST(rt0.c1 AS REAL)) IS TRUE) ASC  NULLS LAST, ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0)))IS NOT(rt0.c1 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))IS NOT(vt1.c0))) ORDER BY (((vt1.c0)|(vt1.c0)) IN ()) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))IS NOT(vt1.c0)))AND((((vt1.c0)OR(vt1.c0)) IN ('5', NULL))))) ORDER BY ((CAST(vt1.c0 AS REAL))==((('Dv6O') IS FALSE)))  NULLS FIRST, vt1.c0 LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)&(vt1.c0))) ISNULL)) ORDER BY ((CAST(vt1.c0 AS REAL))=((('Dv6O') IS FALSE)))  NULLS FIRST, vt1.c0 LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))IS NOT(vt1.c0))) ORDER BY (((vt1.c0)|(vt1.c0)) IN ()) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (CAST(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) AS INTEGER)) ORDER BY ((vt1.c0)OR(vt1.c0)) DESC  NULLS LAST, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END COLLATE RTRIM ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((CAST(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) AS INTEGER))AND(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) COLLATE RTRIM))) ORDER BY ((vt1.c0)<<(vt1.c0)) COLLATE NOCASE DESC LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE (CAST(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) AS INTEGER)) ORDER BY ((vt1.c0)OR(vt1.c0)) DESC  NULLS LAST, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END COLLATE RTRIM ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((CAST(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) AS INTEGER))AND(((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) COLLATE RTRIM))) ORDER BY ((vt1.c0)<<(vt1.c0)) COLLATE NOCASE DESC LIMIT 0X1;
SELECT COUNT(*) FROM rt0 WHERE (0x3fc86de5) ORDER BY (~ ((rt0.c3 IN (rt0.c3))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (0X3fc86de5) ORDER BY (~ ((rt0.c3 IN (rt0.c3))))  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CASE (((rt0.c3, rt0.c1, rt0.c1)) NOT BETWEEN ((rt0.c3, rt0.c1, rt0.c0)) AND ((rt0.c3, rt0.c2, rt0.c0)))  WHEN (- (rt0.c2)) THEN 0.7399792431787561 WHEN ((rt0.c3)/(rt0.c2)) THEN ((((((rt0.c0)AND(rt0.c3)))OR(rt0.c0)))OR(rt0.c0)) WHEN x'' COLLATE RTRIM THEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c0)) END) ORDER BY (~ ((rt0.c3 IN (rt0.c3))))  NULLS FIRST LIMIT 0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0 ASC, highlight(((vt1.c0)IS NOT(vt1.c0)), (~ (vt1.c0)), ((vt1.c0)*(vt1.c0)), (- (vt1.c0))) DESC  NULLS LAST, ((((((((((vt1.c0)AND(724186235)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN ((vt1.c0 IN (vt1.c0, vt1.c0))) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE NULL END)) ASC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0)AND(((NULL) IS FALSE) COLLATE BINARY COLLATE RTRIM))) ORDER BY vt1.c0 ASC, highlight(((vt1.c0)IS NOT(vt1.c0)), (~ (vt1.c0)), ((vt1.c0)*(vt1.c0)), (- (vt1.c0))) DESC  NULLS LAST, ((((((((((vt1.c0)AND(0X2b2a347b)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0))) BETWEEN ((vt1.c0 IN (vt1.c0, vt1.c0))) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE NULL END)) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0))) IS TRUE));
SELECT ALL * FROM rt0 WHERE (((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0))) IS TRUE)) INTERSECT SELECT ALL * FROM rt0 WHERE (((((((CAST(rt0.c3 AS INTEGER))OR(((rt0.c0)LIKE(rt0.c2)))))OR(rt0.c2 COLLATE BINARY)))AND(((NULL)*(rt0.c2)))));
SELECT * FROM rt0 WHERE (((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0))) IS TRUE));
SELECT ALL * FROM rt0 WHERE (((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0))) IS TRUE)) INTERSECT SELECT ALL * FROM rt0 WHERE (((((((CAST(rt0.c3 AS INTEGER))OR(((rt0.c0)LIKE(rt0.c2)))))OR(rt0.c2 COLLATE BINARY)))AND(((NULL)*(rt0.c2)))));
SELECT * FROM vt1, rt0 WHERE ((((((((((((((rt0.c1 IN ()))AND(CAST(rt0.c3 AS BLOB))))OR(CHANGES())))AND(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))AND(((((rt0.c3)OR(rt0.c1)))AND(rt0.c3)))))OR((((rt0.c2)) BETWEEN ((vt1.c0)) AND ((rt0.c2))))))OR((NOT (rt0.c0)))));
SELECT ALL * FROM vt1, rt0 WHERE ((((((((((((((((rt0.c1 IN ()))AND(CAST(rt0.c3 AS BLOB))))OR(CHANGES())))AND(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))AND(((((rt0.c3)OR(rt0.c1)))AND(rt0.c3)))))OR((((rt0.c2)) BETWEEN ((vt1.c0)) AND ((rt0.c2))))))OR((NOT (rt0.c0)))))AND((((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 END, ((rt0.c0) NOT NULL), ((rt0.c3) NOT NULL)))==(((- (rt0.c2)), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (x'25500ac2')), ((rt0.c3)>>(rt0.c2))))))));
SELECT * FROM vt1, rt0 WHERE ((((((((((((((rt0.c1 IN ()))AND(CAST(rt0.c3 AS BLOB))))OR(CHANGES())))AND(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))AND(((((rt0.c3)OR(rt0.c1)))AND(rt0.c3)))))OR((((rt0.c2)) BETWEEN ((vt1.c0)) AND ((rt0.c2))))))OR((NOT (rt0.c0)))));
SELECT ALL * FROM vt1, rt0 WHERE ((((((((((((((((rt0.c1 IN ()))AND(CAST(rt0.c3 AS BLOB))))OR(CHANGES())))AND(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))))AND(((((rt0.c3)OR(rt0.c1)))AND(rt0.c3)))))OR((((rt0.c2)) BETWEEN ((vt1.c0)) AND ((rt0.c2))))))OR((NOT (rt0.c0)))))AND((((CASE rt0.c1  WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 END, ((rt0.c0) NOT NULL), ((rt0.c3) NOT NULL)))==(((- (rt0.c2)), ((rt0.c0) NOT BETWEEN (rt0.c3) AND (x'25500ac2')), ((rt0.c3)>>(rt0.c2))))))));
SELECT COUNT(*) FROM rt0, vt1 WHERE (((CAST(rt0.c3 AS TEXT)) ISNULL));
SELECT COUNT(*) FROM rt0, vt1 WHERE (((((CAST(rt0.c3 AS TEXT)) ISNULL))AND(((((((((rt0.c0)OR(SUBSTR(rt0.c2, rt0.c2))))OR((rt0.c3 IN (rt0.c2)))))AND((~ (rt0.c1)))))AND(((vt1.c0) NOTNULL)))))) ORDER BY (((NOT (rt0.c2)))/(CASE rt0.c0  WHEN rt0.c3 THEN vt1.c0 WHEN NULL THEN x'' ELSE vt1.c0 END)) DESC, ((CASE rt0.c1  WHEN x'' THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c1 END)<=(((rt0.c0) NOTNULL))) DESC LIMIT 2 INTERSECT SELECT COUNT(*) FROM rt0, vt1 WHERE (x'ca') ORDER BY (((NOT (rt0.c2)))/(CASE rt0.c0  WHEN rt0.c3 THEN vt1.c0 WHEN NULL THEN x'' ELSE vt1.c0 END)) DESC, ((CASE rt0.c1  WHEN x'' THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c1 END)<=(((rt0.c0) NOTNULL))) DESC LIMIT 2;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (CASE WHEN CAST(rt0.c3 AS BLOB) THEN ((rt0.c3) NOT BETWEEN (rt0.c1) AND (NULL)) WHEN ((rt0.c2)IS NOT(rt0.c2)) THEN (NOT (rt0.c2)) WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c1)<=(rt0.c3)) END);
SELECT MAX(rt0.c3) FROM rt0 WHERE (((CASE WHEN CAST(rt0.c3 AS BLOB) THEN ((rt0.c3) NOT BETWEEN (rt0.c1) AND (NULL)) WHEN ((rt0.c2)IS NOT(rt0.c2)) THEN (NOT (rt0.c2)) WHEN rt0.c1 COLLATE RTRIM THEN ((rt0.c1)<=(rt0.c3)) END)AND(((rt0.c1)>>('722345103'))))) INTERSECT SELECT MAX(rt0.c3) FROM rt0 WHERE (rt0.c0);
SELECT ALL * FROM vt1, rt0 WHERE ((- (((rt0.c2) NOTNULL))));
SELECT * FROM vt1, rt0 WHERE ((- (((rt0.c2) NOTNULL)))) ORDER BY UPPER(DISTINCT ((rt0.c2)LIKE(rt0.c1)))  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1, rt0 WHERE ((- (((rt0.c2) NOTNULL))));
SELECT * FROM vt1, rt0 WHERE ((- (((rt0.c2) NOTNULL)))) ORDER BY UPPER(DISTINCT ((rt0.c2)LIKE(rt0.c1)))  NULLS LAST LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE (CASE ((rt0.c3) IS TRUE)  WHEN ((rt0.c3)IS NOT(rt0.c1)) THEN ((vt1.c0) BETWEEN (0.8709225950019939) AND (vt1.c0)) WHEN UNLIKELY(DISTINCT -2.6271554E8) THEN ((rt0.c2)<(vt1.c0)) WHEN '*' THEN rt0.c0 COLLATE BINARY WHEN (('0.7551738705132669') IS FALSE) THEN ((rt0.c3)|(vt1.c0)) ELSE CASE rt0.c1  WHEN '%z' THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 ELSE vt1.c0 END END);
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ((rt0.c3) IS TRUE)  WHEN ((rt0.c3)IS NOT(rt0.c1)) THEN ((vt1.c0) BETWEEN (0.8709225950019939) AND (vt1.c0)) WHEN UNLIKELY(DISTINCT -2.6271554E8) THEN ((rt0.c2)<(vt1.c0)) WHEN '*' THEN rt0.c0 COLLATE BINARY WHEN (('0.7551738705132669') IS FALSE) THEN ((rt0.c3)|(vt1.c0)) ELSE CASE rt0.c1  WHEN '%z' THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 ELSE vt1.c0 END END) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)), x''))==((rt0.c0, CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 END))));
SELECT ALL * FROM rt0, vt1 WHERE (CASE ((rt0.c3) IS TRUE)  WHEN ((rt0.c3)IS NOT(rt0.c1)) THEN ((vt1.c0) BETWEEN (0.8709225950019939) AND (vt1.c0)) WHEN UNLIKELY(DISTINCT -2.6271554E8) THEN ((rt0.c2)<(vt1.c0)) WHEN '*' THEN rt0.c0 COLLATE BINARY WHEN (('0.7551738705132669') IS FALSE) THEN ((rt0.c3)|(vt1.c0)) ELSE CASE rt0.c1  WHEN '%z' THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 ELSE vt1.c0 END END);
SELECT DISTINCT * FROM rt0, vt1 WHERE (CASE ((rt0.c3) IS TRUE)  WHEN ((rt0.c3)IS NOT(rt0.c1)) THEN ((vt1.c0) BETWEEN (0.8709225950019939) AND (vt1.c0)) WHEN UNLIKELY(DISTINCT -2.6271554E8) THEN ((rt0.c2)<(vt1.c0)) WHEN '*' THEN rt0.c0 COLLATE BINARY WHEN (('0.7551738705132669') IS FALSE) THEN ((rt0.c3)|(vt1.c0)) ELSE CASE rt0.c1  WHEN '%z' THEN rt0.c3 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN vt1.c0 ELSE vt1.c0 END END) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)), x''))==((rt0.c0, CASE rt0.c3  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c2 END))));
SELECT MIN(vt1.c0) FROM vt1 WHERE ((vt1.c0 IN ()) COLLATE BINARY COLLATE RTRIM);
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((vt1.c0 IN ()) COLLATE BINARY COLLATE RTRIM) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ('1884144394');
SELECT MAX(rt0.c1) FROM rt0 WHERE (((((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)))&(((rt0.c1)>=(rt0.c3))))) ORDER BY (((rt0.c2, rt0.c2, rt0.c3)) NOT BETWEEN ((((rt0.c2)==(rt0.c1)), ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c0)), (+ (rt0.c3)))) AND ((((rt0.c2) NOT NULL), rt0.c1, LOWER(rt0.c2))))  NULLS LAST;
SELECT ALL MAX(rt0.c1) FROM rt0 NOT INDEXED WHERE (((((((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c2)))&(((rt0.c1)>(rt0.c3)))))AND(((CAST(rt0.c3 AS BLOB))<((((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3)))))))) ORDER BY (- (rt0.c3)) DESC  NULLS FIRST;
SELECT MIN(rt0.c0) FROM rt0 WHERE (((rt0.c2) NOT BETWEEN (rt0.c0) AND (0.8134558692213312)) COLLATE NOCASE) ORDER BY '숯d'  NULLS LAST, ((CAST(rt0.c2 AS BLOB)) IS TRUE), ((((rt0.c0)IS NOT(rt0.c2)))IS(((rt0.c3)==(rt0.c1)))) ASC;
SELECT MIN(rt0.c0) FROM rt0 WHERE (((rt0.c2) NOT BETWEEN (rt0.c0) AND (0.8134558692213312)) COLLATE NOCASE) ORDER BY '숯d'  NULLS LAST, ((CAST(rt0.c2 AS BLOB)) IS TRUE), ((((rt0.c0)IS NOT(rt0.c2)))IS(((rt0.c3)==(rt0.c1)))) ASC;
SELECT ALL MIN(rt0.c1) FROM rt0 WHERE (((rt0.c2) NOT BETWEEN (((rt0.c3) IS TRUE)) AND (((rt0.c0) ISNULL)))) ORDER BY ((CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c3 END)-(CASE WHEN 0Xffffffffb32ca4f4 THEN x'' ELSE rt0.c3 END))  NULLS LAST, CASE rt0.c2  WHEN CAST(rt0.c3 AS REAL) THEN COALESCE('}z', rt0.c2) WHEN (NOT (rt0.c3)) THEN (~ (rt0.c1)) ELSE (rt0.c0 IN ()) END  NULLS LAST, CAST(((rt0.c0) NOT NULL) AS BLOB) ASC, '1184764068' ASC;
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE (((rt0.c2) NOT BETWEEN (((rt0.c3) IS TRUE)) AND (((rt0.c0) ISNULL)))) ORDER BY ((((((rt0.c0)OR(rt0.c0)))OR(((rt0.c2)IS(rt0.c3)))))OR('-2000240195' COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE vt1.c0  WHEN (vt1.c0 IN ()) THEN vt1.c0 COLLATE NOCASE WHEN CAST(vt1.c0 AS REAL) THEN ((vt1.c0)LIKE(vt1.c0)) END);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CASE vt1.c0  WHEN (vt1.c0 IN ()) THEN vt1.c0 COLLATE NOCASE WHEN CAST(vt1.c0 AS REAL) THEN ((vt1.c0)LIKE(vt1.c0)) END) ORDER BY ((((((vt1.c0)>>(0.5710129773908109)))OR(vt1.c0 COLLATE BINARY)))OR(CAST(vt1.c0 AS BLOB))) ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (UPPER(DISTINCT ABS(vt1.c0))) ORDER BY ((((((vt1.c0)>>(0.5710129773908109)))OR(vt1.c0 COLLATE BINARY)))OR(CAST(vt1.c0 AS BLOB))) ASC  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c0)) BETWEEN ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((CAST(vt1.c0 AS TEXT), STRFTIME('', x'', vt1.c0)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) BETWEEN ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((CAST(vt1.c0 AS TEXT), STRFTIME('', x'', vt1.c0)))))AND((((vt1.c0 IN ())) BETWEEN (((vt1.c0)>(vt1.c0))) AND (vt1.c0 COLLATE RTRIM))))) ORDER BY ((((((((((vt1.c0) ISNULL))AND(CAST(0.18066675072567617 AS REAL))))AND(-1440571497)))OR((((vt1.c0, vt1.c0))>((vt1.c0, ''))))))OR(vt1.c0 COLLATE NOCASE)), (+ ((vt1.c0 IN ()))) ASC  NULLS FIRST, (+ (vt1.c0)) ASC;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE);
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE);
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE);
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) COLLATE NOCASE);
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (0.33093915518260664);
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (0.33093915518260664) ORDER BY (((vt1.c0 IN ())) NOT BETWEEN (((vt1.c0) IS TRUE)) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'v*NB-' ELSE vt1.c0 END)) ASC  NULLS LAST, CASE WHEN ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) IS FALSE) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((NULL, vt1.c0, vt1.c0))) WHEN ((vt1.c0) BETWEEN (NULL) AND (vt1.c0)) THEN (+ (0.8004506913930954)) ELSE ((0.9760329311684922)*(vt1.c0)) END  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((NOT (vt1.c0)) COLLATE NOCASE) ORDER BY (((vt1.c0 IN ())) NOT BETWEEN (((vt1.c0) IS TRUE)) AND (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'v*NB-' ELSE vt1.c0 END)) ASC  NULLS LAST, CASE WHEN ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) IS FALSE) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((NULL, vt1.c0, vt1.c0))) WHEN ((vt1.c0) BETWEEN (NULL) AND (vt1.c0)) THEN (+ (0.8004506913930954)) ELSE ((0.9760329311684922)*(vt1.c0)) END  NULLS LAST LIMIT 0X2;
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE (rt0.c2) ORDER BY ((rt0.c2)GLOB((+ (rt0.c0)))) ASC;
SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE (rt0.c2) ORDER BY ((rt0.c2)GLOB((+ (rt0.c0)))) ASC LIMIT 1;
SELECT ALL MIN(rt0.c2) FROM rt0 WHERE (NULLIF(((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c3)), ('-2051742299' IN ())));
SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (NULLIF(((((((((rt0.c1)OR(rt0.c3)))OR(rt0.c1)))AND(rt0.c3)))OR(rt0.c3)), ('-2051742299' IN ()))) LIMIT 2 INTERSECT SELECT DISTINCT MIN(rt0.c2) FROM rt0 WHERE (CASE (((rt0.c0)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c1)))  WHEN ((rt0.c3)IS(')')) THEN (((rt0.c3))!=((rt0.c2))) END) LIMIT 2;
SELECT * FROM vt1, rt0 WHERE (((COALESCE(DISTINCT rt0.c0, rt0.c3)) NOT BETWEEN (TYPEOF(rt0.c3)) AND (((rt0.c1)!=(rt0.c3)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((COALESCE(DISTINCT rt0.c0, rt0.c3)) NOT BETWEEN (TYPEOF(rt0.c3)) AND (((rt0.c1)<>(rt0.c3))))) ORDER BY (~ ((((rt0.c0))<=(('1207380889'))))) DESC, rt0.c0 ASC;
SELECT * FROM vt1, rt0 WHERE (((COALESCE(DISTINCT rt0.c0, rt0.c3)) NOT BETWEEN (TYPEOF(rt0.c3)) AND (((rt0.c1)!=(rt0.c3)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((COALESCE(DISTINCT rt0.c0, rt0.c3)) NOT BETWEEN (TYPEOF(rt0.c3)) AND (((rt0.c1)<>(rt0.c3))))) ORDER BY (~ ((((rt0.c0))<=(('1207380889'))))) DESC, rt0.c0 ASC;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((+ (vt1.c0)))/(((vt1.c0)<<(vt1.c0))))) ORDER BY ((((((UNLIKELY(vt1.c0))AND(((vt1.c0)&(vt1.c0)))))AND(((vt1.c0) IS TRUE))))AND((NOT (vt1.c0))))  NULLS LAST, (~ (vt1.c0)) COLLATE RTRIM ASC;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((+ (vt1.c0)))/(((vt1.c0)<<(vt1.c0))))) ORDER BY ((x'') BETWEEN (((vt1.c0) NOT NULL)) AND (((vt1.c0) NOTNULL)))  NULLS FIRST, json_extract(((vt1.c0)GLOB(vt1.c0)), (vt1.c0 IN ()), CAST(vt1.c0 AS INTEGER), (NOT (vt1.c0))) ASC;
SELECT * FROM rt0, vt1 WHERE (rt0.c3);
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c3) LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE (rt0.c3);
SELECT ALL * FROM rt0, vt1 WHERE (rt0.c3) LIMIT 0x0;
SELECT * FROM rt0, vt1 WHERE (((rt0.c3)<<(rt0.c1)) COLLATE RTRIM);
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c3)<<(rt0.c1)) COLLATE RTRIM);
SELECT * FROM rt0, vt1 WHERE (((rt0.c3)<<(rt0.c1)) COLLATE RTRIM);
SELECT DISTINCT * FROM rt0, vt1 WHERE (((rt0.c3)<<(rt0.c1)) COLLATE RTRIM);
SELECT MIN(vt1.c0) FROM vt1 WHERE (NULL) ORDER BY ((((vt1.c0)IS NOT(0.04157587481795155))) NOT BETWEEN (CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND ((vt1.c0 IN (vt1.c0)))) ASC  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((NULL)AND(((((((CAST(vt1.c0 AS REAL))AND((vt1.c0 IN (vt1.c0)))))OR((vt1.c0 IN (vt1.c0, '')))))OR(((vt1.c0) NOTNULL)))))) ORDER BY vt1.c0 ASC, (vt1.c0 COLLATE BINARY IN ((((vt1.c0))<=((vt1.c0))))) ASC  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((((((LIKELY(rt0.c0))AND(TYPEOF(DISTINCT rt0.c0))))AND(((rt0.c3)GLOB(rt0.c0)))))AND(0.9831793086170046)) WHERE (CHANGES());
SELECT * FROM vt1 INNER JOIN rt0 ON ((((((LIKELY(rt0.c0))AND(TYPEOF(DISTINCT rt0.c0))))AND(((rt0.c3)GLOB(rt0.c0)))))AND(0.9831793086170046)) WHERE (CHANGES()) INTERSECT SELECT * FROM vt1 INNER JOIN rt0 ON ((((((LIKELY(rt0.c0))AND(TYPEOF(DISTINCT rt0.c0))))AND(((rt0.c3)GLOB(rt0.c0)))))AND(0.9831793086170046)) WHERE ((((((((rt0.c1 IN (vt1.c0)))AND((rt0.c2 IN ()))))AND(CAST(rt0.c2 AS BLOB))))AND((rt0.c0 IN (rt0.c2, rt0.c2)))));
SELECT ALL * FROM vt1 INNER JOIN rt0 ON ((((((LIKELY(rt0.c0))AND(TYPEOF(DISTINCT rt0.c0))))AND(((rt0.c3)GLOB(rt0.c0)))))AND(0.9831793086170046)) WHERE (CHANGES());
SELECT * FROM vt1 INNER JOIN rt0 ON ((((((LIKELY(rt0.c0))AND(TYPEOF(DISTINCT rt0.c0))))AND(((rt0.c3)GLOB(rt0.c0)))))AND(0.9831793086170046)) WHERE (CHANGES()) INTERSECT SELECT * FROM vt1 INNER JOIN rt0 ON ((((((LIKELY(rt0.c0))AND(TYPEOF(DISTINCT rt0.c0))))AND(((rt0.c3)GLOB(rt0.c0)))))AND(0.9831793086170046)) WHERE ((((((((rt0.c1 IN (vt1.c0)))AND((rt0.c2 IN ()))))AND(CAST(rt0.c2 AS BLOB))))AND((rt0.c0 IN (rt0.c2, rt0.c2)))));
SELECT ALL * FROM rt0, vt1 WHERE ((CASE rt0.c0  WHEN NULL THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN 'CF|2{' THEN vt1.c0 END IN ()));
SELECT * FROM rt0, vt1 WHERE ((CASE rt0.c0  WHEN NULL THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN 'CF|2{' THEN vt1.c0 END IN ())) ORDER BY ((((((((((((rt0.c0)OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))OR(rt0.c3)))OR(x'1dc77594')))AND(CASE vt1.c0  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 WHEN x'' THEN rt0.c2 END)) DESC LIMIT 0x2;
SELECT ALL * FROM rt0, vt1 WHERE ((CASE rt0.c0  WHEN NULL THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN 'CF|2{' THEN vt1.c0 END IN ()));
SELECT * FROM rt0, vt1 WHERE ((CASE rt0.c0  WHEN NULL THEN rt0.c2 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 WHEN 'CF|2{' THEN vt1.c0 END IN ())) ORDER BY ((((((((((((rt0.c0)OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c3)))OR(rt0.c3)))OR(x'1dc77594')))AND(CASE vt1.c0  WHEN rt0.c1 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c1 WHEN x'' THEN rt0.c2 END)) DESC LIMIT 0x2;
SELECT * FROM vt1 WHERE (NULL COLLATE RTRIM) ORDER BY (((vt1.c0)) NOT BETWEEN (((- ('*v')))) AND (((NOT (vt1.c0))))) ASC, (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) IN ());
SELECT DISTINCT * FROM vt1 WHERE (((NULL COLLATE RTRIM)AND((((vt1.c0, vt1.c0)) NOT BETWEEN ((((0X28677e68)<(vt1.c0)), ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))) AND ((((((((vt1.c0)OR(vt1.c0)))AND(NULL)))AND(vt1.c0)), ((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))==(((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))));
SELECT * FROM vt1 WHERE (NULL COLLATE RTRIM) ORDER BY (((vt1.c0)) NOT BETWEEN (((- ('*v')))) AND (((NOT (vt1.c0))))) ASC, (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) IN ());
SELECT * FROM rt0 WHERE (CAST(UNICODE(rt0.c1) AS BLOB));
SELECT ALL * FROM rt0 WHERE (((CAST(UNICODE(rt0.c1) AS BLOB))AND(((x'')<(CAST(rt0.c2 AS INTEGER)))))) ORDER BY SQLITE_VERSION()  NULLS LAST, (NOT (CAST(0.46812638111186833 AS INTEGER)))  NULLS FIRST, (((rt0.c1 IN ())) BETWEEN (CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c3 END) AND ((((rt0.c3))<((rt0.c2))))) ASC  NULLS FIRST, (NOT (((((rt0.c3)AND(rt0.c1)))AND(rt0.c3)))) ASC;
SELECT * FROM rt0 WHERE (CAST(UNICODE(rt0.c1) AS BLOB));
SELECT ALL * FROM rt0 WHERE (((CAST(UNICODE(rt0.c1) AS BLOB))AND(((x'')<(CAST(rt0.c2 AS INTEGER)))))) ORDER BY SQLITE_VERSION()  NULLS LAST, (NOT (CAST(0.46812638111186833 AS INTEGER)))  NULLS FIRST, (((rt0.c1 IN ())) BETWEEN (CASE WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c3 END) AND ((((rt0.c3))<((rt0.c2))))) ASC  NULLS FIRST, (NOT (((((rt0.c3)AND(rt0.c1)))AND(rt0.c3)))) ASC;
SELECT MIN(rt0.c0) FROM rt0 WHERE ((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1)) IN (((((rt0.c0)OR(rt0.c2)))AND(rt0.c3))))) ORDER BY CAST(rt0.c3 COLLATE BINARY AS BLOB) DESC  NULLS FIRST, NULL, ((((CAST(rt0.c1 AS INTEGER))AND(CAST(rt0.c0 AS BLOB))))OR(rt0.c0))  NULLS FIRST;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE ((((((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1)) IN (((((rt0.c0)OR(rt0.c2)))AND(rt0.c3)))))AND(rt0.c3))) ORDER BY CAST(rt0.c3 COLLATE BINARY AS BLOB) DESC  NULLS FIRST, NULL, ((((CAST(rt0.c1 AS INTEGER))AND(CAST(rt0.c0 AS BLOB))))OR(rt0.c0))  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (CASE ((rt0.c2)OR('O'))  WHEN rt0.c0 THEN CAST(rt0.c3 AS TEXT) WHEN CASE WHEN '0.8938055664288324' THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END THEN '-66207078' END) ORDER BY ((((rt0.c2)%(rt0.c0)))<(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))) ASC, TRIM(NULL, ((rt0.c0)!=(x'f6727d'))) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((CASE ((rt0.c2)OR('O'))  WHEN rt0.c0 THEN CAST(rt0.c3 AS TEXT) WHEN CASE WHEN '0.8938055664288324' THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END THEN '-66207078' END)AND((NOT (((((((rt0.c0)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c0))))))) ORDER BY (((+ (rt0.c3))) BETWEEN (((rt0.c0) IS FALSE)) AND ((- (x'd2b9')))) ASC;
SELECT ALL * FROM rt0 WHERE (CASE ((rt0.c2)OR('O'))  WHEN rt0.c0 THEN CAST(rt0.c3 AS TEXT) WHEN CASE WHEN '0.8938055664288324' THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END THEN '-66207078' END) ORDER BY ((((rt0.c2)%(rt0.c0)))<(((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c3)))) ASC, TRIM(NULL, ((rt0.c0)!=(x'f6727d'))) ASC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (((CASE ((rt0.c2)OR('O'))  WHEN rt0.c0 THEN CAST(rt0.c3 AS TEXT) WHEN CASE WHEN '0.8938055664288324' THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c3 THEN rt0.c0 ELSE rt0.c2 END THEN '-66207078' END)AND((NOT (((((((rt0.c0)OR(rt0.c3)))OR(rt0.c1)))OR(rt0.c0))))))) ORDER BY (((+ (rt0.c3))) BETWEEN (((rt0.c0) IS FALSE)) AND ((- (x'd2b9')))) ASC;
SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (rt0.c3);
SELECT COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (((rt0.c3)AND(((rt0.c1) IS FALSE) COLLATE NOCASE))) LIMIT 0X1 INTERSECT SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN rt0 WHERE (CAST((rt0.c1 IN ()) AS REAL)) LIMIT 1;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((~ (rt0.c2)))>>(rt0.c1 COLLATE RTRIM))) ORDER BY (((vt1.c0 IN (rt0.c2, rt0.c2)))<(((rt0.c2) NOT BETWEEN (rt0.c0) AND ('G僡')))), MIN(rt0.c0 COLLATE RTRIM, ((rt0.c3)<>(rt0.c2)));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((~ (rt0.c2)))>>(rt0.c1 COLLATE RTRIM))) ORDER BY (((vt1.c0 IN (rt0.c2, rt0.c2)))<(((rt0.c2) NOT BETWEEN (rt0.c0) AND ('G僡')))), MIN(rt0.c0 COLLATE RTRIM, ((rt0.c3)<>(rt0.c2)));
SELECT * FROM vt1 WHERE ((((((vt1.c0)>>(vt1.c0))))<=(((+ (vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0)>>(vt1.c0))))<=(((+ (vt1.c0))))))AND('701266440'))) ORDER BY ((vt1.c0)>(NULL))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ('1101443830') ORDER BY ((vt1.c0)>(NULL))  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1 WHERE ((((((vt1.c0)>>(vt1.c0))))<=(((+ (vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0)>>(vt1.c0))))<=(((+ (vt1.c0))))))AND('701266440'))) ORDER BY ((vt1.c0)>(NULL))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ('1101443830') ORDER BY ((vt1.c0)>(NULL))  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) NOT BETWEEN (CASE WHEN vt1.c0 THEN 0.45572075982868965 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND (vt1.c0))) ORDER BY CAST(CAST(vt1.c0 AS TEXT) AS INTEGER) DESC, CHAR(((vt1.c0)>(vt1.c0))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) NOT BETWEEN (CASE WHEN vt1.c0 THEN 0.45572075982868965 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND (vt1.c0))) ORDER BY CAST(CAST(vt1.c0 AS TEXT) AS INTEGER) DESC, CHAR(((vt1.c0)>(vt1.c0))) DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0 IN (vt1.c0)))OR(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN -1688611678 WHEN 'M[]~#' THEN vt1.c0 END)))AND((((vt1.c0))>((vt1.c0)))))) ORDER BY CAST(CAST(vt1.c0 AS TEXT) AS INTEGER) DESC, CHAR(((vt1.c0)>(vt1.c0))) DESC;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) NOT BETWEEN (CASE WHEN vt1.c0 THEN 0.45572075982868965 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND (vt1.c0))) ORDER BY CAST(CAST(vt1.c0 AS TEXT) AS INTEGER) DESC, CHAR(((vt1.c0)>(vt1.c0))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY) NOT BETWEEN (CASE WHEN vt1.c0 THEN 0.45572075982868965 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND (vt1.c0))) ORDER BY CAST(CAST(vt1.c0 AS TEXT) AS INTEGER) DESC, CHAR(((vt1.c0)>(vt1.c0))) DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0 IN (vt1.c0)))OR(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN -1688611678 WHEN 'M[]~#' THEN vt1.c0 END)))AND((((vt1.c0))>((vt1.c0)))))) ORDER BY CAST(CAST(vt1.c0 AS TEXT) AS INTEGER) DESC, CHAR(((vt1.c0)>(vt1.c0))) DESC;
SELECT ALL * FROM rt0 WHERE ((((rt0.c1, rt0.c0, rt0.c2)) BETWEEN (((((rt0.c2, rt0.c3))==((rt0.c3, rt0.c1))), (NOT (rt0.c1)), CASE WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END)) AND (((((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3))), CAST(rt0.c0 AS REAL), ((((((((rt0.c1)OR(rt0.c2)))AND('/6R~Dl')))AND(rt0.c3)))AND(rt0.c1)))))) ORDER BY (+ (CASE rt0.c0  WHEN NULL THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c2 END)), ((((rt0.c0)<>(rt0.c3))) NOT BETWEEN ((rt0.c2 IN (rt0.c1, rt0.c3))) AND (CAST(rt0.c2 AS NUMERIC))), NULL DESC;
SELECT * FROM rt0 WHERE ((((((rt0.c1, rt0.c0, rt0.c2)) BETWEEN (((((rt0.c2, rt0.c3))==((rt0.c3, rt0.c1))), (NOT (rt0.c1)), CASE WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END)) AND (((((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3))), CAST(rt0.c0 AS REAL), ((((((((rt0.c1)OR(rt0.c2)))AND('/6R~Dl')))AND(rt0.c3)))AND(rt0.c1))))))AND('1350128228'))) ORDER BY (CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c2 END IN (CAST(rt0.c0 AS REAL), rt0.c3 COLLATE BINARY))  NULLS LAST, ((((rt0.c1) IS FALSE)) NOT BETWEEN ((rt0.c3 IN (rt0.c1))) AND (((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))) DESC;
SELECT ALL * FROM rt0 WHERE ((((rt0.c1, rt0.c0, rt0.c2)) BETWEEN (((((rt0.c2, rt0.c3))==((rt0.c3, rt0.c1))), (NOT (rt0.c1)), CASE WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END)) AND (((((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3))), CAST(rt0.c0 AS REAL), ((((((((rt0.c1)OR(rt0.c2)))AND('/6R~Dl')))AND(rt0.c3)))AND(rt0.c1)))))) ORDER BY (+ (CASE rt0.c0  WHEN NULL THEN rt0.c3 WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c2 END)), ((((rt0.c0)<>(rt0.c3))) NOT BETWEEN ((rt0.c2 IN (rt0.c1, rt0.c3))) AND (CAST(rt0.c2 AS NUMERIC))), NULL DESC;
SELECT * FROM rt0 WHERE ((((((rt0.c1, rt0.c0, rt0.c2)) BETWEEN (((((rt0.c2, rt0.c3))==((rt0.c3, rt0.c1))), (NOT (rt0.c1)), CASE WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END)) AND (((((rt0.c3)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c3))), CAST(rt0.c0 AS REAL), ((((((((rt0.c1)OR(rt0.c2)))AND('/6R~Dl')))AND(rt0.c3)))AND(rt0.c1))))))AND('1350128228'))) ORDER BY (CASE rt0.c1  WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c2 END IN (CAST(rt0.c0 AS REAL), rt0.c3 COLLATE BINARY))  NULLS LAST, ((((rt0.c1) IS FALSE)) NOT BETWEEN ((rt0.c3 IN (rt0.c1))) AND (((rt0.c3) NOT BETWEEN (rt0.c3) AND (rt0.c3)))) DESC;
SELECT ALL MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON CASE (+ (rt0.c2))  WHEN CASE WHEN rt0.c0 THEN rt0.c3 END THEN ((((rt0.c1)AND(x'')))OR(rt0.c3)) WHEN rt0.c1 THEN rt0.c0 COLLATE NOCASE ELSE ((((rt0.c3)AND(vt1.c0)))AND(rt0.c3)) END WHERE (CAST(CAST(0xffffffffb9f90cdc AS BLOB) AS BLOB)) ORDER BY ((((vt1.c0) IS TRUE))OR(((rt0.c0) ISNULL))), '-1937697031'  NULLS LAST;
SELECT DISTINCT MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON CASE (+ (rt0.c2))  WHEN CASE WHEN rt0.c0 THEN rt0.c3 END THEN ((((rt0.c1)AND(x'')))OR(rt0.c3)) WHEN rt0.c1 THEN rt0.c0 COLLATE NOCASE ELSE ((((rt0.c3)AND(vt1.c0)))AND(rt0.c3)) END WHERE (CAST(CAST(0xffffffffb9f90cdc AS BLOB) AS BLOB)) ORDER BY (((((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0)))) NOT NULL) LIMIT 2 INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0 INNER JOIN vt1 ON CASE (+ (rt0.c2))  WHEN CASE WHEN rt0.c0 THEN rt0.c3 END THEN ((((rt0.c1)AND(x'')))OR(rt0.c3)) WHEN rt0.c1 THEN rt0.c0 COLLATE NOCASE ELSE ((((rt0.c3)AND(vt1.c0)))AND(rt0.c3)) END WHERE (((CASE WHEN rt0.c0 THEN rt0.c1 ELSE '-520528866' END) BETWEEN (rt0.c3) AND (((vt1.c0)OR(rt0.c0))))) ORDER BY (((((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c0)))) NOT NULL) LIMIT 0X2;
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE NULL  WHEN (vt1.c0 IN (vt1.c0, vt1.c0)) THEN vt1.c0 COLLATE RTRIM END);
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE NULL  WHEN (vt1.c0 IN (vt1.c0, vt1.c0)) THEN vt1.c0 COLLATE RTRIM END) ORDER BY (((((((((vt1.c0)AND(0.27841156223401387)))AND(vt1.c0)))OR(vt1.c0)), (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c0))>=(('466069271', vt1.c0, vt1.c0, vt1.c0, vt1.c0)))))<((((vt1.c0)IS('1157407566')), vt1.c0)));
SELECT MIN(rt0.c2) FROM rt0, vt1 WHERE ('-548393973');
SELECT DISTINCT MIN(rt0.c2) FROM rt0, vt1 WHERE ((('-548393973')AND(CAST(((rt0.c0)IS('?Z{Eng]')) AS TEXT)))) ORDER BY (((((((((((rt0.c3)AND(rt0.c3)))AND(vt1.c0)))OR(rt0.c2)))OR(rt0.c3)), (((vt1.c0))>((rt0.c3))), (((rt0.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))))<>((((x'192a60')AND(rt0.c0)), ((vt1.c0)>>(rt0.c0)), ((rt0.c3)%(rt0.c1))))) DESC  NULLS FIRST, (+ (CASE rt0.c0  WHEN rt0.c3 THEN rt0.c1 END))  NULLS LAST LIMIT 1;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN (((NOT (vt1.c0)), ((vt1.c0)GLOB(vt1.c0)), MAX(vt1.c0, vt1.c0, vt1.c0))) AND ((CAST(vt1.c0 AS BLOB), ((vt1.c0)>(vt1.c0)), UPPER(DISTINCT vt1.c0)))));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN (((NOT (vt1.c0)), ((vt1.c0)GLOB(vt1.c0)), MAX(vt1.c0, vt1.c0, vt1.c0))) AND ((CAST(vt1.c0 AS BLOB), ((vt1.c0)<>(vt1.c0)), UPPER(DISTINCT vt1.c0)))))AND(json(((vt1.c0)IS(vt1.c0))))));
SELECT MAX(rt0.c1) FROM rt0 WHERE (((((((rt0.c3)AND(rt0.c1)))OR(rt0.c0))) BETWEEN (((rt0.c1)>=(rt0.c1))) AND ((((rt0.c0, rt0.c3, rt0.c3, rt0.c3))=((rt0.c3, rt0.c2, rt0.c3, x'0647ca')))))) ORDER BY ((ABS(DISTINCT rt0.c3))%(((rt0.c0) IS FALSE))), (((((rt0.c3)) BETWEEN ((rt0.c3)) AND ((rt0.c0))))==(((rt0.c2)IS NOT(rt0.c1)))) ASC  NULLS LAST;
SELECT MAX(rt0.c1) FROM rt0 WHERE (((((((rt0.c3)AND(rt0.c1)))OR(rt0.c0))) BETWEEN (((rt0.c1)>=(rt0.c1))) AND ((((rt0.c0, rt0.c3, rt0.c3, rt0.c3))==((rt0.c3, rt0.c2, rt0.c3, x'0647ca')))))) ORDER BY ((ABS(DISTINCT rt0.c3))%(((rt0.c0) IS FALSE))), (((((rt0.c3)) BETWEEN ((rt0.c3)) AND ((rt0.c0))))=(((rt0.c2)IS NOT(rt0.c1)))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((NOT (rt0.c0)))<=(rt0.c2 COLLATE BINARY))) ORDER BY ((CAST(rt0.c3 AS INTEGER)) IS FALSE)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((((NOT (rt0.c0)))<=(rt0.c2 COLLATE BINARY))) ORDER BY ((((vt1.c0, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c2, 0X4e951b08, rt0.c3)) AND ((rt0.c3, vt1.c0, vt1.c0))) IN ()) INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((rt0.c3 IN (rt0.c3)), CAST(rt0.c2 AS REAL), json_object(rt0.c3, rt0.c1, vt1.c0, rt0.c2, rt0.c2)))>((((rt0.c1)AND(rt0.c3)), ((rt0.c2) IS FALSE), ((vt1.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)))))) ORDER BY ((((vt1.c0, rt0.c2, rt0.c2)) NOT BETWEEN ((rt0.c2, 0X4e951b08, rt0.c3)) AND ((rt0.c3, vt1.c0, vt1.c0))) IN ());
SELECT ALL * FROM vt1 WHERE (CAST(vt1.c0 AS REAL)) ORDER BY ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) COLLATE RTRIM;
SELECT * FROM vt1 WHERE (CAST(vt1.c0 AS REAL)) ORDER BY ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) COLLATE RTRIM LIMIT 0 INTERSECT SELECT * FROM vt1 WHERE ((((((vt1.c0)AND(vt1.c0))))<=((vt1.c0)))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) COLLATE RTRIM LIMIT 0;
SELECT ALL * FROM vt1 WHERE (CAST(vt1.c0 AS REAL)) ORDER BY ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) COLLATE RTRIM;
SELECT * FROM vt1 WHERE (CAST(vt1.c0 AS REAL)) ORDER BY ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) COLLATE RTRIM LIMIT 0 INTERSECT SELECT * FROM vt1 WHERE ((((((vt1.c0)AND(vt1.c0))))<=((vt1.c0)))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) COLLATE RTRIM LIMIT 0;
SELECT * FROM rt0 WHERE (TYPEOF(0.5855336722620208)) ORDER BY CASE ((rt0.c1)>(rt0.c3))  WHEN ((rt0.c0) IS TRUE) THEN ((0.7076491624834558) BETWEEN (rt0.c3) AND (rt0.c3)) WHEN ((rt0.c0)+(rt0.c3)) THEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) ELSE NULL END DESC  NULLS LAST, (((((rt0.c3) BETWEEN (0Xffffffffb3087d47) AND (rt0.c0)), rt0.c2, rt0.c2, ((((((((x'23')OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c1))))>((((0.49448590347919197) BETWEEN (NULL) AND (rt0.c0)), '-86904247', rt0.c3, ((((rt0.c2)OR(rt0.c2)))OR(rt0.c0))))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (TYPEOF(0.5855336722620208)) ORDER BY CASE ((rt0.c1)>(rt0.c3))  WHEN ((rt0.c0) IS TRUE) THEN ((0.7076491624834558) BETWEEN (rt0.c3) AND (rt0.c3)) WHEN ((rt0.c0)+(rt0.c3)) THEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) ELSE NULL END DESC  NULLS LAST, (((((rt0.c3) BETWEEN (0xffffffffb3087d47) AND (rt0.c0)), rt0.c2, rt0.c2, ((((((((x'23')OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c1))))>((((0.49448590347919197) BETWEEN (NULL) AND (rt0.c0)), '-86904247', rt0.c3, ((((rt0.c2)OR(rt0.c2)))OR(rt0.c0))))) ASC  NULLS FIRST INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c3)*(rt0.c2)))-((+ (rt0.c3))))) ORDER BY CASE ((rt0.c1)>(rt0.c3))  WHEN ((rt0.c0) IS TRUE) THEN ((0.7076491624834558) BETWEEN (rt0.c3) AND (rt0.c3)) WHEN ((rt0.c0)+(rt0.c3)) THEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) ELSE NULL END DESC  NULLS LAST, (((((rt0.c3) BETWEEN (-1291289273) AND (rt0.c0)), rt0.c2, rt0.c2, ((((((((x'23')OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c1))))>((((0.49448590347919197) BETWEEN (NULL) AND (rt0.c0)), '-86904247', rt0.c3, ((((rt0.c2)OR(rt0.c2)))OR(rt0.c0))))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (TYPEOF(0.5855336722620208)) ORDER BY CASE ((rt0.c1)>(rt0.c3))  WHEN ((rt0.c0) IS TRUE) THEN ((0.7076491624834558) BETWEEN (rt0.c3) AND (rt0.c3)) WHEN ((rt0.c0)+(rt0.c3)) THEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) ELSE NULL END DESC  NULLS LAST, (((((rt0.c3) BETWEEN (0Xffffffffb3087d47) AND (rt0.c0)), rt0.c2, rt0.c2, ((((((((x'23')OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c1))))>((((0.49448590347919197) BETWEEN (NULL) AND (rt0.c0)), '-86904247', rt0.c3, ((((rt0.c2)OR(rt0.c2)))OR(rt0.c0))))) ASC  NULLS FIRST;
SELECT * FROM rt0 WHERE (TYPEOF(0.5855336722620208)) ORDER BY CASE ((rt0.c1)>(rt0.c3))  WHEN ((rt0.c0) IS TRUE) THEN ((0.7076491624834558) BETWEEN (rt0.c3) AND (rt0.c3)) WHEN ((rt0.c0)+(rt0.c3)) THEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) ELSE NULL END DESC  NULLS LAST, (((((rt0.c3) BETWEEN (0xffffffffb3087d47) AND (rt0.c0)), rt0.c2, rt0.c2, ((((((((x'23')OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c1))))>((((0.49448590347919197) BETWEEN (NULL) AND (rt0.c0)), '-86904247', rt0.c3, ((((rt0.c2)OR(rt0.c2)))OR(rt0.c0))))) ASC  NULLS FIRST INTERSECT SELECT * FROM rt0 WHERE (((((rt0.c3)*(rt0.c2)))-((+ (rt0.c3))))) ORDER BY CASE ((rt0.c1)>(rt0.c3))  WHEN ((rt0.c0) IS TRUE) THEN ((0.7076491624834558) BETWEEN (rt0.c3) AND (rt0.c3)) WHEN ((rt0.c0)+(rt0.c3)) THEN ((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c2)) ELSE NULL END DESC  NULLS LAST, (((((rt0.c3) BETWEEN (-1291289273) AND (rt0.c0)), rt0.c2, rt0.c2, ((((((((x'23')OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c1))))>((((0.49448590347919197) BETWEEN (NULL) AND (rt0.c0)), '-86904247', rt0.c3, ((((rt0.c2)OR(rt0.c2)))OR(rt0.c0))))) ASC  NULLS FIRST;
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE ((CAST(vt1.c0 AS TEXT) IN (((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c1))))) ORDER BY rt0.c0;
SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((CAST(vt1.c0 AS TEXT) IN (((rt0.c2) BETWEEN (vt1.c0) AND (rt0.c1)))))AND((+ (((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c0))))))) ORDER BY rt0.c0 LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((rt0.c0, rt0.c3)) BETWEEN ((CASE WHEN rt0.c1 THEN 'd詠' WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c3 THEN rt0.c2 END, ((rt0.c1)<=(rt0.c1)))) AND ((((((((((((rt0.c2)AND(rt0.c2)))AND(vt1.c0)))OR(rt0.c2)))AND(rt0.c1)))OR(x'')), (rt0.c1 IN (rt0.c0)))))) ORDER BY rt0.c0 LIMIT 0x2;
SELECT * FROM rt0, vt1 WHERE ((~ (rt0.c2))) ORDER BY rt0.c2 DESC  NULLS LAST, 'O,j' ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((~ (rt0.c2)))AND(((((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c0)))-(0.44203960952881083))))) ORDER BY rt0.c2 DESC  NULLS LAST, 'O,j' ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c3, rt0.c3, rt0.c0, vt1.c0)) BETWEEN ((vt1.c0, rt0.c3, rt0.c2, rt0.c3)) AND ((vt1.c0, rt0.c0, rt0.c3, vt1.c0)))) BETWEEN (((NULL) NOT BETWEEN (rt0.c3) AND (vt1.c0))) AND (((rt0.c3)/(vt1.c0))))) ORDER BY rt0.c2 DESC  NULLS LAST, 'O,j' ASC  NULLS FIRST LIMIT 0;
SELECT * FROM rt0, vt1 WHERE ((~ (rt0.c2))) ORDER BY rt0.c2 DESC  NULLS LAST, 'O,j' ASC  NULLS FIRST;
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((~ (rt0.c2)))AND(((((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c0)))-(0.44203960952881083))))) ORDER BY rt0.c2 DESC  NULLS LAST, 'O,j' ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((rt0.c3, rt0.c3, rt0.c0, vt1.c0)) BETWEEN ((vt1.c0, rt0.c3, rt0.c2, rt0.c3)) AND ((vt1.c0, rt0.c0, rt0.c3, vt1.c0)))) BETWEEN (((NULL) NOT BETWEEN (rt0.c3) AND (vt1.c0))) AND (((rt0.c3)/(vt1.c0))))) ORDER BY rt0.c2 DESC  NULLS LAST, 'O,j' ASC  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((x'6d' IN ((rt0.c0 IN ()))));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((((x'6d' IN ((rt0.c0 IN ()))))AND(2042696920))) ORDER BY ((TRIM(DISTINCT rt0.c0))>>(((rt0.c1) NOTNULL))) DESC  NULLS FIRST, CAST(COALESCE(rt0.c2, vt1.c0, vt1.c0) AS INTEGER) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (NULL) ORDER BY ((TRIM(DISTINCT rt0.c0))>>(((rt0.c1) NOTNULL))) DESC  NULLS FIRST, CAST(COALESCE(rt0.c2, vt1.c0, vt1.c0) AS INTEGER) ASC LIMIT 0;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON CAST(NULL AS INTEGER) WHERE ((((((rt0.c3)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))) IS TRUE)) ORDER BY ((rt0.c3 COLLATE NOCASE)>=(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END)), '-2051742299' ASC  NULLS FIRST;
SELECT * FROM vt1 INNER JOIN rt0 ON CAST(NULL AS INTEGER) WHERE ((((((rt0.c3)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))) IS TRUE)) ORDER BY ((rt0.c3 COLLATE NOCASE)>=(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END)), '-2051742299' ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON CAST(NULL AS INTEGER) WHERE ((((rt0.c2 IN ())) IS TRUE)) ORDER BY ((rt0.c3 COLLATE NOCASE)>=(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END)), '-2051742299' ASC  NULLS FIRST;
SELECT * FROM vt1 LEFT OUTER JOIN rt0 ON CAST(NULL AS INTEGER) WHERE ((((((rt0.c3)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))) IS TRUE)) ORDER BY ((rt0.c3 COLLATE NOCASE)>=(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END)), '-2051742299' ASC  NULLS FIRST;
SELECT * FROM vt1 INNER JOIN rt0 ON CAST(NULL AS INTEGER) WHERE ((((((rt0.c3)) BETWEEN ((vt1.c0)) AND ((rt0.c0)))) IS TRUE)) ORDER BY ((rt0.c3 COLLATE NOCASE)>=(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END)), '-2051742299' ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 INNER JOIN rt0 ON CAST(NULL AS INTEGER) WHERE ((((rt0.c2 IN ())) IS TRUE)) ORDER BY ((rt0.c3 COLLATE NOCASE)>=(CASE rt0.c0  WHEN rt0.c0 THEN vt1.c0 END)), '-2051742299' ASC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE ((NOT ((((rt0.c2)) BETWEEN ((rt0.c3)) AND ((rt0.c3))))));
SELECT ALL * FROM rt0, vt1 WHERE ((NOT ((((rt0.c2)) BETWEEN ((rt0.c3)) AND ((rt0.c3)))))) LIMIT 0x2;
SELECT ALL * FROM rt0, vt1 WHERE ((NOT ((((rt0.c2)) BETWEEN ((rt0.c3)) AND ((rt0.c3))))));
SELECT ALL * FROM rt0, vt1 WHERE ((NOT ((((rt0.c2)) BETWEEN ((rt0.c3)) AND ((rt0.c3)))))) LIMIT 0x2;
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0)>=(vt1.c0)) IN ())) ORDER BY (+ (rt0.c3 COLLATE NOCASE)) ASC, ((((((((rt0.c3)AND(9.82536061E8)))AND(rt0.c2)))AND(rt0.c2)))LIKE(((((vt1.c0)AND(rt0.c0)))OR(rt0.c3))));
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0)>=(vt1.c0)) IN ())) ORDER BY (+ (rt0.c3 COLLATE NOCASE)) ASC, ((((((((rt0.c3)AND(9.82536061E8)))AND(rt0.c2)))AND(rt0.c2)))LIKE(((((vt1.c0)AND(rt0.c0)))OR(rt0.c3)))) LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0)>=(vt1.c0)) IN ())) ORDER BY (+ (rt0.c3 COLLATE NOCASE)) ASC, ((((((((rt0.c3)AND(9.82536061E8)))AND(rt0.c2)))AND(rt0.c2)))LIKE(((((vt1.c0)AND(rt0.c0)))OR(rt0.c3))));
SELECT * FROM vt1, rt0 WHERE ((((vt1.c0)>=(vt1.c0)) IN ())) ORDER BY (+ (rt0.c3 COLLATE NOCASE)) ASC, ((((((((rt0.c3)AND(9.82536061E8)))AND(rt0.c2)))AND(rt0.c2)))LIKE(((((vt1.c0)AND(rt0.c0)))OR(rt0.c3)))) LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE (((((((((((((((LIKELIHOOD(rt0.c1, rt0.c1))OR(rt0.c1 COLLATE NOCASE)))OR(((rt0.c1)<<(rt0.c3)))))OR(((rt0.c3)LIKE(rt0.c2)))))AND(((rt0.c2)|(NULL)))))OR(rt0.c0 COLLATE NOCASE)))OR(((rt0.c2)+(rt0.c1)))))OR(x''))) ORDER BY -8.6516757E7  NULLS FIRST, ((x'a6')>>((((rt0.c0, rt0.c1))>=((rt0.c2, rt0.c3))))) ASC;
SELECT * FROM rt0 WHERE (((((((((((((((((LIKELIHOOD(rt0.c1, rt0.c1))OR(rt0.c1 COLLATE NOCASE)))OR(((rt0.c1)<<(rt0.c3)))))OR(((rt0.c3)LIKE(rt0.c2)))))AND(((rt0.c2)|(NULL)))))OR(rt0.c0 COLLATE NOCASE)))OR(((rt0.c2)+(rt0.c1)))))OR(x'')))AND(CAST(IFNULL(rt0.c0, rt0.c1) AS BLOB)))) ORDER BY -8.6516757E7  NULLS FIRST, ((x'a6')>>((((rt0.c0, rt0.c1))>=((rt0.c2, rt0.c3))))) ASC LIMIT 0X2 INTERSECT SELECT * FROM rt0 WHERE (rt0.c1) ORDER BY -8.6516757E7  NULLS FIRST, ((x'a6')>>((((rt0.c0, rt0.c1))>=((rt0.c2, rt0.c3))))) ASC LIMIT 2;
SELECT ALL * FROM rt0 WHERE (((((((((((((((LIKELIHOOD(rt0.c1, rt0.c1))OR(rt0.c1 COLLATE NOCASE)))OR(((rt0.c1)<<(rt0.c3)))))OR(((rt0.c3)LIKE(rt0.c2)))))AND(((rt0.c2)|(NULL)))))OR(rt0.c0 COLLATE NOCASE)))OR(((rt0.c2)+(rt0.c1)))))OR(x''))) ORDER BY -8.6516757E7  NULLS FIRST, ((x'a6')>>((((rt0.c0, rt0.c1))>=((rt0.c2, rt0.c3))))) ASC;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((CASE rt0.c1  WHEN NULL THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 END IN ())) ORDER BY ((NULL)|(((((((rt0.c3)OR(rt0.c3)))AND(rt0.c0)))AND(rt0.c3))));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((CASE rt0.c1  WHEN NULL THEN rt0.c3 WHEN vt1.c0 THEN rt0.c2 END IN ())) ORDER BY ((NULL)|(((((((rt0.c3)OR(rt0.c3)))AND(rt0.c0)))AND(rt0.c3))));
SELECT * FROM rt0 WHERE ((+ (((x'9040a3f2') IS TRUE)))) ORDER BY (~ (((rt0.c0)*(rt0.c2))));
SELECT ALL * FROM rt0 WHERE ((((+ (((x'9040a3f2') IS TRUE))))AND((~ (((rt0.c1)*(rt0.c2))))))) ORDER BY (~ (((rt0.c0)*(rt0.c2)))) INTERSECT SELECT * FROM rt0 WHERE (((((((((((((((rt0.c3)AND(0.30490770644627196)))OR(rt0.c0)))AND(NULL)))OR(rt0.c1)))AND((rt0.c3 IN (0X62fd4306)))))AND(CAST(rt0.c1 AS REAL))))OR((((x'e10e', rt0.c3, rt0.c2))<((rt0.c0, rt0.c2, rt0.c2)))))) ORDER BY (~ (((rt0.c0)*(rt0.c2))));
SELECT * FROM rt0 WHERE ((+ (((x'9040a3f2') IS TRUE)))) ORDER BY (~ (((rt0.c0)*(rt0.c2))));
SELECT ALL * FROM rt0 WHERE ((((+ (((x'9040a3f2') IS TRUE))))AND((~ (((rt0.c1)*(rt0.c2))))))) ORDER BY (~ (((rt0.c0)*(rt0.c2)))) INTERSECT SELECT * FROM rt0 WHERE (((((((((((((((rt0.c3)AND(0.30490770644627196)))OR(rt0.c0)))AND(NULL)))OR(rt0.c1)))AND((rt0.c3 IN (0X62fd4306)))))AND(CAST(rt0.c1 AS REAL))))OR((((x'e10e', rt0.c3, rt0.c2))<((rt0.c0, rt0.c2, rt0.c2)))))) ORDER BY (~ (((rt0.c0)*(rt0.c2))));
SELECT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) ORDER BY ((((NULL)>(vt1.c0))) NOT NULL);
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) ORDER BY ((((NULL)>(vt1.c0))) NOT NULL);
SELECT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) ORDER BY ((((NULL)>(vt1.c0))) NOT NULL);
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ())) IS TRUE)) ORDER BY ((((NULL)>(vt1.c0))) NOT NULL);
SELECT * FROM rt0 WHERE (0.5389168256400328) ORDER BY ((NULL)==((NULL IN (rt0.c1)))), ((CAST(rt0.c3 AS TEXT)) IS FALSE);
SELECT DISTINCT * FROM rt0 WHERE (0.5389168256400328) ORDER BY ((NULL)==((NULL IN (rt0.c1)))), ((CAST(rt0.c3 AS TEXT)) IS FALSE) LIMIT 0x0;
SELECT * FROM rt0 WHERE (0.5389168256400328) ORDER BY ((NULL)==((NULL IN (rt0.c1)))), ((CAST(rt0.c3 AS TEXT)) IS FALSE);
SELECT DISTINCT * FROM rt0 WHERE (0.5389168256400328) ORDER BY ((NULL)==((NULL IN (rt0.c1)))), ((CAST(rt0.c3 AS TEXT)) IS FALSE) LIMIT 0x0;
SELECT ALL * FROM rt0 WHERE ((rt0.c2 COLLATE NOCASE IN (CAST(rt0.c1 AS INTEGER))));
SELECT ALL * FROM rt0 WHERE ((rt0.c2 COLLATE NOCASE IN (CAST(rt0.c1 AS INTEGER)))) ORDER BY (('-0.0') NOT NULL), ((rt0.c3)|(rt0.c1)) COLLATE RTRIM DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE ((rt0.c2 COLLATE NOCASE IN (CAST(rt0.c1 AS INTEGER))));
SELECT ALL * FROM rt0 WHERE ((rt0.c2 COLLATE NOCASE IN (CAST(rt0.c1 AS INTEGER)))) ORDER BY (('-0.0') NOT NULL), ((rt0.c3)|(rt0.c1)) COLLATE RTRIM DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1 WHERE ((NOT (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((NOT (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))AND(((CAST(vt1.c0 AS TEXT))IS(CASE vt1.c0  WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))))) ORDER BY x'18' COLLATE BINARY ASC  NULLS LAST, (NOT ((~ (vt1.c0)))) DESC, NULL DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN ((0.48729843991852184)) AND ((((vt1.c0) IS TRUE))))) ORDER BY x'18' COLLATE BINARY ASC  NULLS LAST, (NOT ((~ (vt1.c0)))) DESC, NULL DESC;
SELECT * FROM vt1 WHERE ((NOT (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((NOT (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))))AND(((CAST(vt1.c0 AS TEXT))IS(CASE vt1.c0  WHEN vt1.c0 THEN x'' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))))) ORDER BY x'18' COLLATE BINARY ASC  NULLS LAST, (NOT ((~ (vt1.c0)))) DESC, NULL DESC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0)) NOT BETWEEN ((0.48729843991852184)) AND ((((vt1.c0) IS TRUE))))) ORDER BY x'18' COLLATE BINARY ASC  NULLS LAST, (NOT ((~ (vt1.c0)))) DESC, NULL DESC;
SELECT COUNT(*) FROM rt0 WHERE (((']<') NOT NULL));
SELECT ALL COUNT(*) FROM rt0 WHERE (((((']<') NOT NULL))AND(LOWER((((rt0.c2)) BETWEEN ((x'')) AND ((0.2149572690295234))))))) LIMIT 0x0;
SELECT ALL * FROM vt1, rt0 WHERE (((TOTAL_CHANGES()) BETWEEN (LIKELIHOOD(DISTINCT rt0.c1, rt0.c3)) AND (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1))))) ORDER BY UPPER(((((rt0.c3)AND(rt0.c0)))AND(rt0.c3)))  NULLS FIRST, 0.4341264368018568 DESC, (0.9895274577485911 IN (((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c0))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((TOTAL_CHANGES()) BETWEEN (LIKELIHOOD(DISTINCT rt0.c1, rt0.c3)) AND (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1)))))AND(LIKELIHOOD(x'9fdbcf2cfeb2' COLLATE RTRIM, ((((vt1.c0)OR(rt0.c0)))AND(rt0.c0)))))) ORDER BY NULL ASC, ((((((((((((((((rt0.c1)OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c0)))OR(rt0.c0)))AND((- (rt0.c2)))))OR(NULL)))OR(((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c2)))) ASC LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE ((NOT (((x'63')GLOB(vt1.c0))))) ORDER BY NULL ASC, ((((((((((((((((rt0.c1)OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c0)))OR(rt0.c0)))AND((- (rt0.c2)))))OR(NULL)))OR(((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c2)))) ASC LIMIT 3;
SELECT ALL * FROM vt1, rt0 WHERE (((TOTAL_CHANGES()) BETWEEN (LIKELIHOOD(DISTINCT rt0.c1, rt0.c3)) AND (((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c1))))) ORDER BY UPPER(((((rt0.c3)AND(rt0.c0)))AND(rt0.c3)))  NULLS FIRST, 0.4341264368018568 DESC, (0.9895274577485911 IN (((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c0))));
SELECT MAX(rt0.c2) FROM rt0 CROSS JOIN vt1 ON json_type(vt1.c0 COLLATE RTRIM) WHERE (((x'' COLLATE NOCASE)>=(((rt0.c3) IS FALSE)))) ORDER BY ((((((((((rt0.c0) ISNULL))AND(TRIM(vt1.c0, rt0.c1))))OR(CASE WHEN rt0.c0 THEN 0.6526343664379732 WHEN rt0.c2 THEN '2g' ELSE x'54' END)))AND(TRIM(vt1.c0))))AND(UNLIKELY(rt0.c3)))  NULLS LAST, highlight(((((rt0.c0)AND(rt0.c2)))OR(rt0.c1)), rt0.c0 COLLATE NOCASE, ((rt0.c3) IS FALSE), NULL) DESC  NULLS LAST, CAST(CAST(rt0.c0 AS INTEGER) AS INTEGER) DESC  NULLS LAST;
SELECT DISTINCT MAX(rt0.c2) FROM rt0 CROSS JOIN vt1 ON json_type(vt1.c0 COLLATE RTRIM) WHERE (((((x'' COLLATE NOCASE)>=(((rt0.c3) IS FALSE))))AND(rt0.c3))) ORDER BY (((~ (rt0.c0))) NOT NULL)  NULLS LAST, CASE vt1.c0  WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c2 END COLLATE BINARY DESC, ((CAST(rt0.c1 AS REAL)) NOTNULL)  NULLS LAST, (((vt1.c0, rt0.c2)) BETWEEN (((rt0.c2 IN (rt0.c1)), ((rt0.c2) IS FALSE))) AND ((((NULL)=(rt0.c1)), rt0.c1 COLLATE RTRIM))) ASC  NULLS LAST LIMIT 0x2;
SELECT MIN(rt0.c3) FROM rt0 CROSS JOIN vt1 ON CASE rt0.c0 COLLATE BINARY  WHEN ((rt0.c1)AND(rt0.c1)) THEN rt0.c0 COLLATE NOCASE WHEN ((rt0.c1)||(rt0.c0)) THEN ((((((((rt0.c0)OR(rt0.c1)))AND(vt1.c0)))AND(rt0.c2)))AND(rt0.c0)) WHEN (rt0.c3 IN ()) THEN ((rt0.c0) NOTNULL) ELSE ((((rt0.c0)OR(rt0.c1)))AND(rt0.c0)) END WHERE ((+ ((vt1.c0 IN ()))));
SELECT DISTINCT MIN(rt0.c3) FROM rt0 CROSS JOIN vt1 ON CASE rt0.c0 COLLATE BINARY  WHEN ((rt0.c1)AND(rt0.c1)) THEN rt0.c0 COLLATE NOCASE WHEN ((rt0.c1)||(rt0.c0)) THEN ((((((((rt0.c0)OR(rt0.c1)))AND(vt1.c0)))AND(rt0.c2)))AND(rt0.c0)) WHEN (rt0.c3 IN ()) THEN ((rt0.c0) NOTNULL) ELSE ((((rt0.c0)OR(rt0.c1)))AND(rt0.c0)) END WHERE ((+ ((vt1.c0 IN ())))) ORDER BY CASE (((rt0.c0, rt0.c0, rt0.c2, rt0.c3)) BETWEEN ((vt1.c0, rt0.c2, rt0.c0, rt0.c0)) AND ((rt0.c1, rt0.c0, rt0.c3, rt0.c3)))  WHEN rt0.c0 THEN CAST(rt0.c0 AS INTEGER) WHEN rt0.c0 COLLATE BINARY THEN ((rt0.c1) IS FALSE) ELSE TRIM(DISTINCT rt0.c3, rt0.c2) END, ((((rt0.c2) IS TRUE))LIKE(((rt0.c2) NOT BETWEEN (rt0.c3) AND (rt0.c1)))) DESC;
SELECT ALL MIN(rt0.c1) FROM vt1, rt0 WHERE (((((((rt0.c2) BETWEEN (x'83fe') AND (rt0.c3)))AND(((rt0.c0)*(rt0.c1)))))AND(((vt1.c0)GLOB(rt0.c2)))));
SELECT DISTINCT MIN(rt0.c1) FROM vt1 NOT INDEXED, rt0 WHERE (((((((((rt0.c2) BETWEEN (x'83fe') AND (rt0.c3)))AND(((rt0.c0)*(rt0.c1)))))AND(((vt1.c0)GLOB(rt0.c2)))))AND((((rt0.c3 IN (rt0.c1))) NOT NULL)))) ORDER BY (~ (((('1968557872', rt0.c0)) BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c0, vt1.c0)))))  NULLS FIRST, ((((((((((rt0.c0)||(rt0.c2)))OR(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3)))))AND((~ (rt0.c0)))))AND(((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))AND(COALESCE(vt1.c0, rt0.c1, vt1.c0))) INTERSECT SELECT DISTINCT MIN(rt0.c1) FROM vt1, rt0 WHERE (((((((((((rt0.c0)OR(-1862126037)))AND(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0)))))AND(((((rt0.c3)OR(vt1.c0)))OR(vt1.c0)))))AND((- (rt0.c3)))))OR((+ (rt0.c3))))) ORDER BY (~ (((('1968557872', rt0.c0)) BETWEEN ((rt0.c1, rt0.c0)) AND ((rt0.c0, vt1.c0)))))  NULLS FIRST, ((((((((((rt0.c0)||(rt0.c2)))OR(((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c3)))))AND((~ (rt0.c0)))))AND(((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))AND(COALESCE(vt1.c0, rt0.c1, vt1.c0)));
SELECT ALL * FROM rt0 WHERE ((CASE NULL  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 END IN ())) ORDER BY ((((((rt0.c1)OR(rt0.c1)))OR(rt0.c0)))|((((rt0.c0))!=((rt0.c2))))) ASC  NULLS LAST, (((((((+ (rt0.c3)))OR(((rt0.c1)<=(rt0.c2)))))AND((rt0.c2 IN ()))))OR(rt0.c2 COLLATE RTRIM));
SELECT DISTINCT * FROM rt0 WHERE ((CASE NULL  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 END IN ())) ORDER BY CASE rt0.c3 COLLATE NOCASE  WHEN TRIM(rt0.c3, rt0.c2) THEN (('/!\_ 
qY')&(rt0.c1)) WHEN ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)) THEN SUBSTR(rt0.c2, rt0.c2) END, CAST(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END AS INTEGER)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (LIKELIHOOD(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c2 END, (rt0.c3 IN (rt0.c3)))) ORDER BY CASE rt0.c3 COLLATE NOCASE  WHEN TRIM(rt0.c3, rt0.c2) THEN (('/!\_ 
qY')&(rt0.c1)) WHEN ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)) THEN SUBSTR(rt0.c2, rt0.c2) END, CAST(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END AS INTEGER)  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE ((CASE NULL  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 END IN ())) ORDER BY ((((((rt0.c1)OR(rt0.c1)))OR(rt0.c0)))|((((rt0.c0))!=((rt0.c2))))) ASC  NULLS LAST, (((((((+ (rt0.c3)))OR(((rt0.c1)<=(rt0.c2)))))AND((rt0.c2 IN ()))))OR(rt0.c2 COLLATE RTRIM));
SELECT DISTINCT * FROM rt0 WHERE ((CASE NULL  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c0 END IN ())) ORDER BY CASE rt0.c3 COLLATE NOCASE  WHEN TRIM(rt0.c3, rt0.c2) THEN (('/!\_ 
qY')&(rt0.c1)) WHEN ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)) THEN SUBSTR(rt0.c2, rt0.c2) END, CAST(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END AS INTEGER)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (LIKELIHOOD(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c2 END, (rt0.c3 IN (rt0.c3)))) ORDER BY CASE rt0.c3 COLLATE NOCASE  WHEN TRIM(rt0.c3, rt0.c2) THEN (('/!\_ 
qY')&(rt0.c1)) WHEN ((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)) THEN SUBSTR(rt0.c2, rt0.c2) END, CAST(CASE WHEN rt0.c3 THEN rt0.c2 ELSE rt0.c1 END AS INTEGER)  NULLS FIRST;
SELECT * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0);
SELECT ALL COUNT(*) FROM vt1 WHERE ((((((vt1.c0) IS FALSE)))!=((vt1.c0)))) ORDER BY CASE TOTAL_CHANGES()  WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)<>(vt1.c0)) WHEN 0.04454059953757972 THEN (((' j)Gtp', vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))) WHEN ((vt1.c0)=(vt1.c0)) THEN vt1.c0 WHEN (NOT (vt1.c0)) THEN NULL END DESC;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((((((vt1.c0) IS FALSE)))<((vt1.c0))))AND(((vt1.c0) NOT BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND ((vt1.c0 IN (vt1.c0))))))) ORDER BY (((((-2.051742299E9))=((NULL)))) NOT NULL) ASC  NULLS FIRST, (((vt1.c0)) BETWEEN (('303669662')) AND (((((vt1.c0))>((vt1.c0))))))  NULLS FIRST LIMIT 0;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE ((((vt1.c0)>>(rt0.c2)) IN ())) ORDER BY ((LIKE(rt0.c2, rt0.c2, '\'))||(CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 ELSE rt0.c3 END))  NULLS LAST;
SELECT ALL MIN(rt0.c0) FROM vt1, rt0 WHERE ((((vt1.c0)>>(rt0.c2)) IN ())) ORDER BY ((LIKE(rt0.c2, rt0.c2, '\'))||(CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 ELSE rt0.c3 END))  NULLS LAST LIMIT 2 INTERSECT SELECT MIN(rt0.c0) FROM vt1, rt0 WHERE (CASE ((rt0.c3)>=(rt0.c0))  WHEN TYPEOF(DISTINCT rt0.c2) THEN CAST(rt0.c3 AS BLOB) WHEN rt0.c3 COLLATE BINARY THEN ((0.6284769273844507) NOT BETWEEN (rt0.c2) AND (rt0.c2)) END) ORDER BY ((LIKE(rt0.c2, rt0.c2, '\'))||(CASE rt0.c3  WHEN rt0.c1 THEN vt1.c0 ELSE rt0.c3 END))  NULLS LAST LIMIT 0x2;
SELECT * FROM rt0 WHERE ((((rt0.c0, rt0.c0 COLLATE BINARY))>=((((rt0.c1)IS(rt0.c3)), CAST(rt0.c0 AS INTEGER)))));
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c0, rt0.c0 COLLATE BINARY))>=((((rt0.c1)IS(rt0.c3)), CAST(rt0.c0 AS INTEGER))))) ORDER BY CASE rt0.c0  WHEN ((rt0.c1)>(rt0.c1)) THEN (((rt0.c0, rt0.c3)) BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c1, rt0.c1))) END  NULLS FIRST LIMIT 1;
SELECT * FROM rt0 WHERE ((((rt0.c0, rt0.c0 COLLATE BINARY))>=((((rt0.c1)IS(rt0.c3)), CAST(rt0.c0 AS INTEGER)))));
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c0, rt0.c0 COLLATE BINARY))>=((((rt0.c1)IS(rt0.c3)), CAST(rt0.c0 AS INTEGER))))) ORDER BY CASE rt0.c0  WHEN ((rt0.c1)>(rt0.c1)) THEN (((rt0.c0, rt0.c3)) BETWEEN ((rt0.c0, rt0.c2)) AND ((rt0.c1, rt0.c1))) END  NULLS FIRST LIMIT 1;
SELECT * FROM vt1 WHERE ((vt1.c0 IN (vt1.c0)) COLLATE NOCASE) ORDER BY ((CAST(vt1.c0 AS NUMERIC)) BETWEEN (((x'9e366e')||(vt1.c0))) AND (((vt1.c0) NOTNULL))), (- (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((vt1.c0 IN (vt1.c0)) COLLATE NOCASE) ORDER BY ((CAST(vt1.c0 AS NUMERIC)) BETWEEN (((x'9e366e')||(vt1.c0))) AND (((vt1.c0) NOTNULL))), (- (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE ((vt1.c0 IN (vt1.c0)) COLLATE NOCASE) ORDER BY ((CAST(vt1.c0 AS NUMERIC)) BETWEEN (((x'9e366e')||(vt1.c0))) AND (((vt1.c0) NOTNULL))), (- (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((vt1.c0 IN (vt1.c0)) COLLATE NOCASE) ORDER BY ((CAST(vt1.c0 AS NUMERIC)) BETWEEN (((x'9e366e')||(vt1.c0))) AND (((vt1.c0) NOTNULL))), (- (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON (NOT (rt0.c0)) WHERE (CASE WHEN ((((((((((rt0.c3)OR(vt1.c0)))AND(0.5393083675426981)))OR(rt0.c0)))AND(rt0.c2)))OR(NULL)) THEN ((x'') NOT BETWEEN (rt0.c0) AND (vt1.c0)) WHEN x'a2' THEN rt0.c1 COLLATE NOCASE WHEN CAST(vt1.c0 AS REAL) THEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c2 END WHEN (rt0.c1 IN (rt0.c2)) THEN x'abff' ELSE ((vt1.c0)>(rt0.c0)) END) ORDER BY ((((~ (rt0.c3)), (rt0.c3 IN (rt0.c1)), (rt0.c0 IN (rt0.c3, rt0.c2)), rt0.c3))>((CASE WHEN vt1.c0 THEN rt0.c0 END, ((rt0.c2)%(x'5f')), (~ (rt0.c3)), ((rt0.c0)==(rt0.c1))))) DESC, x'14'  NULLS FIRST, ((CASE WHEN rt0.c2 THEN rt0.c1 END) NOT BETWEEN ((- (vt1.c0))) AND (rt0.c3));
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON (NOT (rt0.c0)) WHERE (CASE WHEN ((((((((((rt0.c3)OR(vt1.c0)))AND(0.5393083675426981)))OR(rt0.c0)))AND(rt0.c2)))OR(NULL)) THEN ((x'') NOT BETWEEN (rt0.c0) AND (vt1.c0)) WHEN x'a2' THEN rt0.c1 COLLATE NOCASE WHEN CAST(vt1.c0 AS REAL) THEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c2 END WHEN (rt0.c1 IN (rt0.c2)) THEN x'abff' ELSE ((vt1.c0)>(rt0.c0)) END) ORDER BY ((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c2)))OR('-1955672256')))-(NULL)) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON (NOT (rt0.c0)) WHERE ((~ (vt1.c0)) COLLATE BINARY) ORDER BY ((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c2)))OR('-1955672256')))-(NULL)) ASC  NULLS LAST;
SELECT ALL * FROM rt0 CROSS JOIN vt1 ON (NOT (rt0.c0)) WHERE (CASE WHEN ((((((((((rt0.c3)OR(vt1.c0)))AND(0.5393083675426981)))OR(rt0.c0)))AND(rt0.c2)))OR(NULL)) THEN ((x'') NOT BETWEEN (rt0.c0) AND (vt1.c0)) WHEN x'a2' THEN rt0.c1 COLLATE NOCASE WHEN CAST(vt1.c0 AS REAL) THEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c2 END WHEN (rt0.c1 IN (rt0.c2)) THEN x'abff' ELSE ((vt1.c0)>(rt0.c0)) END) ORDER BY ((((~ (rt0.c3)), (rt0.c3 IN (rt0.c1)), (rt0.c0 IN (rt0.c3, rt0.c2)), rt0.c3))>((CASE WHEN vt1.c0 THEN rt0.c0 END, ((rt0.c2)%(x'5f')), (~ (rt0.c3)), ((rt0.c0)==(rt0.c1))))) DESC, x'14'  NULLS FIRST, ((CASE WHEN rt0.c2 THEN rt0.c1 END) NOT BETWEEN ((- (vt1.c0))) AND (rt0.c3));
SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON (NOT (rt0.c0)) WHERE (CASE WHEN ((((((((((rt0.c3)OR(vt1.c0)))AND(0.5393083675426981)))OR(rt0.c0)))AND(rt0.c2)))OR(NULL)) THEN ((x'') NOT BETWEEN (rt0.c0) AND (vt1.c0)) WHEN x'a2' THEN rt0.c1 COLLATE NOCASE WHEN CAST(vt1.c0 AS REAL) THEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c2 END WHEN (rt0.c1 IN (rt0.c2)) THEN x'abff' ELSE ((vt1.c0)>(rt0.c0)) END) ORDER BY ((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c2)))OR('-1955672256')))-(NULL)) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM rt0 CROSS JOIN vt1 ON (NOT (rt0.c0)) WHERE ((~ (vt1.c0)) COLLATE BINARY) ORDER BY ((((((((rt0.c3)AND(rt0.c1)))OR(rt0.c2)))OR('-1955672256')))-(NULL)) ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 COLLATE NOCASE, ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))>((vt1.c0 COLLATE NOCASE, ((vt1.c0)|(vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 COLLATE NOCASE, ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))>((vt1.c0 COLLATE NOCASE, ((vt1.c0)|(vt1.c0))))))AND(json_insert((vt1.c0 IN ()), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))), '-1806375176', UPPER(vt1.c0))))) ORDER BY '0.5418603602380118' COLLATE NOCASE, (+ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) DESC  NULLS LAST, (((vt1.c0, vt1.c0)) BETWEEN ((((vt1.c0) NOT NULL), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((((vt1.c0)/(vt1.c0)), (vt1.c0 IN (vt1.c0))))) DESC;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 COLLATE NOCASE, ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))>((vt1.c0 COLLATE NOCASE, ((vt1.c0)|(vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 COLLATE NOCASE, ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))))>((vt1.c0 COLLATE NOCASE, ((vt1.c0)|(vt1.c0))))))AND(json_insert((vt1.c0 IN ()), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))), '-1806375176', UPPER(vt1.c0))))) ORDER BY '0.5418603602380118' COLLATE NOCASE, (+ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) DESC  NULLS LAST, (((vt1.c0, vt1.c0)) BETWEEN ((((vt1.c0) NOT NULL), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((((vt1.c0)/(vt1.c0)), (vt1.c0 IN (vt1.c0))))) DESC;
SELECT ALL * FROM rt0, vt1 WHERE ((((((rt0.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((rt0.c0)<<(rt0.c0)), ((rt0.c2)*(rt0.c2))))<=((TRIM(rt0.c1, rt0.c1), ((rt0.c0)&(rt0.c0)), (+ (rt0.c2)))))) ORDER BY (((rt0.c2)AND(0xffffffffa532eed7)) IN (((rt0.c2)GLOB(rt0.c1)))), CASE ((vt1.c0) NOT NULL)  WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c2)) THEN (+ (rt0.c2)) WHEN (- ('1673261951')) THEN IFNULL(vt1.c0, rt0.c2) ELSE LIKELY(DISTINCT rt0.c2) END;
SELECT ALL * FROM rt0, vt1 WHERE ((((((((rt0.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((rt0.c0)<<(rt0.c0)), ((rt0.c2)*(rt0.c2))))<((TRIM(rt0.c1, rt0.c1), ((rt0.c0)&(rt0.c0)), (+ (rt0.c2))))))AND(((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c2)) COLLATE BINARY))) ORDER BY (((rt0.c2)AND(-1523388713)) IN (((rt0.c2)GLOB(rt0.c1)))), CASE ((vt1.c0) NOT NULL)  WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c2)) THEN (+ (rt0.c2)) WHEN (- ('1673261951')) THEN IFNULL(vt1.c0, rt0.c2) ELSE LIKELY(DISTINCT rt0.c2) END;
SELECT ALL * FROM rt0, vt1 WHERE ((((((rt0.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((rt0.c0)<<(rt0.c0)), ((rt0.c2)*(rt0.c2))))<=((TRIM(rt0.c1, rt0.c1), ((rt0.c0)&(rt0.c0)), (+ (rt0.c2)))))) ORDER BY (((rt0.c2)AND(0xffffffffa532eed7)) IN (((rt0.c2)GLOB(rt0.c1)))), CASE ((vt1.c0) NOT NULL)  WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c2)) THEN (+ (rt0.c2)) WHEN (- ('1673261951')) THEN IFNULL(vt1.c0, rt0.c2) ELSE LIKELY(DISTINCT rt0.c2) END;
SELECT ALL * FROM rt0, vt1 WHERE ((((((((rt0.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((rt0.c0)<<(rt0.c0)), ((rt0.c2)*(rt0.c2))))<((TRIM(rt0.c1, rt0.c1), ((rt0.c0)&(rt0.c0)), (+ (rt0.c2))))))AND(((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c2)) COLLATE BINARY))) ORDER BY (((rt0.c2)AND(-1523388713)) IN (((rt0.c2)GLOB(rt0.c1)))), CASE ((vt1.c0) NOT NULL)  WHEN ((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c2)) THEN (+ (rt0.c2)) WHEN (- ('1673261951')) THEN IFNULL(vt1.c0, rt0.c2) ELSE LIKELY(DISTINCT rt0.c2) END;
SELECT ALL * FROM vt1 WHERE (x'34') ORDER BY ((vt1.c0)-(((vt1.c0)OR(vt1.c0)))) DESC  NULLS FIRST, (((-1028226782 IN (vt1.c0, vt1.c0))) NOT BETWEEN ((vt1.c0 IN (vt1.c0, vt1.c0))) AND (NULL)) ASC, CASE WHEN ((vt1.c0) NOTNULL) THEN CASE WHEN vt1.c0 THEN vt1.c0 END END ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((x'34')AND((('W-InfinityB')+(((vt1.c0) NOTNULL)))))) ORDER BY ((UNLIKELY(DISTINCT vt1.c0))+(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR('D')))) DESC LIMIT 2 INTERSECT SELECT * FROM vt1 WHERE (((vt1.c0) ISNULL)) ORDER BY ((UNLIKELY(DISTINCT vt1.c0))+(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR('D')))) DESC LIMIT 2;
SELECT ALL * FROM vt1 WHERE (x'34') ORDER BY ((vt1.c0)-(((vt1.c0)OR(vt1.c0)))) DESC  NULLS FIRST, (((-1028226782 IN (vt1.c0, vt1.c0))) NOT BETWEEN ((vt1.c0 IN (vt1.c0, vt1.c0))) AND (NULL)) ASC, CASE WHEN ((vt1.c0) NOTNULL) THEN CASE WHEN vt1.c0 THEN vt1.c0 END END ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((x'34')AND((('W-InfinityB')+(((vt1.c0) NOTNULL)))))) ORDER BY ((UNLIKELY(DISTINCT vt1.c0))+(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR('D')))) DESC LIMIT 2 INTERSECT SELECT * FROM vt1 WHERE (((vt1.c0) ISNULL)) ORDER BY ((UNLIKELY(DISTINCT vt1.c0))+(((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR('D')))) DESC LIMIT 2;
SELECT MAX(rt0.c0) FROM rt0 WHERE (CASE LIKELIHOOD(rt0.c3, rt0.c3)  WHEN ((rt0.c3) IS FALSE) THEN rt0.c2 ELSE CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN '' WHEN NULL THEN rt0.c1 END END) ORDER BY ((((((rt0.c1))>((rt0.c3))), (((rt0.c3))<=((rt0.c2)))))==(((~ (rt0.c2)), ((rt0.c2) BETWEEN (rt0.c2) AND (0.5360450240244301))))) ASC;
SELECT ALL MAX(rt0.c0) FROM rt0 WHERE (CASE LIKELIHOOD(rt0.c3, rt0.c3)  WHEN ((rt0.c3) IS FALSE) THEN rt0.c2 ELSE CASE rt0.c2  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN '' WHEN NULL THEN rt0.c1 END END) ORDER BY HEX(DISTINCT ((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))  NULLS FIRST, 0.516198897577295 ASC, ((((rt0.c3)OR((0.6879345209892306 IN ()))))OR(((rt0.c1)AND(rt0.c0)))) LIMIT 0 INTERSECT SELECT MAX(rt0.c0) FROM rt0 WHERE ((+ (((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c3))))) ORDER BY HEX(DISTINCT ((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))  NULLS FIRST, 0.516198897577295 ASC, ((((rt0.c3)OR((0.6879345209892306 IN ()))))OR(((rt0.c1)AND(rt0.c0)))) LIMIT 0X0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY CAST(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) AS BLOB) ASC  NULLS FIRST, vt1.c0;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND((((vt1.c0)) BETWEEN ((CAST(vt1.c0 AS NUMERIC))) AND ((LENGTH(vt1.c0))))))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END IN (CAST(vt1.c0 AS REAL))), (LIKE(vt1.c0, vt1.c0) IN (((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))) LIMIT 2;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY CAST(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) AS BLOB) ASC  NULLS FIRST, vt1.c0;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND((((vt1.c0)) BETWEEN ((CAST(vt1.c0 AS NUMERIC))) AND ((LENGTH(vt1.c0))))))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END IN (CAST(vt1.c0 AS REAL))), (LIKE(vt1.c0, vt1.c0) IN (((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))) LIMIT 2;
SELECT ALL * FROM rt0 WHERE (CAST(rt0.c1 AS BLOB) COLLATE RTRIM);
SELECT ALL * FROM rt0 WHERE (((CAST(rt0.c1 AS BLOB) COLLATE RTRIM)AND(((((((((rt0.c3)OR(rt0.c2)))AND((+ (rt0.c2)))))AND(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)))OR(CASE WHEN rt0.c0 THEN rt0.c2 END))))) LIMIT 0X2;
SELECT ALL * FROM rt0 WHERE (CAST(rt0.c1 AS BLOB) COLLATE RTRIM);
SELECT ALL * FROM rt0 WHERE (((CAST(rt0.c1 AS BLOB) COLLATE RTRIM)AND(((((((((rt0.c3)OR(rt0.c2)))AND((+ (rt0.c2)))))AND(CASE rt0.c2  WHEN rt0.c3 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)))OR(CASE WHEN rt0.c0 THEN rt0.c2 END))))) LIMIT 0X2;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))>=((vt1.c0 IN (vt1.c0, vt1.c0))))) ORDER BY ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))!=((vt1.c0 IN (vt1.c0)))) DESC  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))>=((vt1.c0 IN (vt1.c0, vt1.c0))))) ORDER BY ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))!=((vt1.c0 IN (vt1.c0)))) DESC  NULLS FIRST;
SELECT MIN(rt0.c3) FROM rt0 WHERE (TYPEOF(rt0.c1));
SELECT ALL MIN(rt0.c3) FROM rt0 WHERE (TYPEOF(rt0.c1)) ORDER BY (((rt0.c3, rt0.c3)) BETWEEN (('+D[kU', ((rt0.c2)%(rt0.c3)))) AND ((UNLIKELY(rt0.c3), rt0.c2 COLLATE BINARY))), ((LIKE(rt0.c1, rt0.c2)) IS TRUE) ASC;
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((rt0.c1, rt0.c2, '/')) NOT BETWEEN ((vt1.c0, ((rt0.c0)%(x'e035')), (((rt0.c1))<((rt0.c1))))) AND (('-1251063464', (rt0.c2 IN ()), ((vt1.c0)%(rt0.c2))))) WHERE (((rt0.c2 COLLATE BINARY)<((((rt0.c0, vt1.c0, rt0.c1, rt0.c3))!=((rt0.c1, vt1.c0, '	}P', rt0.c1))))));
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (((rt0.c1, rt0.c2, '/')) NOT BETWEEN ((vt1.c0, ((rt0.c0)%(x'e035')), (((rt0.c1))<((rt0.c1))))) AND (('-1251063464', (rt0.c2 IN ()), ((vt1.c0)%(rt0.c2))))) WHERE (((rt0.c2 COLLATE BINARY)<((((rt0.c0, vt1.c0, rt0.c1, rt0.c3))>((rt0.c1, vt1.c0, '	}P', rt0.c1))))));
SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON (((rt0.c1, rt0.c2, '/')) NOT BETWEEN ((vt1.c0, ((rt0.c0)%(x'e035')), (((rt0.c1))<((rt0.c1))))) AND (('-1251063464', (rt0.c2 IN ()), ((vt1.c0)%(rt0.c2))))) WHERE (((rt0.c2 COLLATE BINARY)<((((rt0.c0, vt1.c0, rt0.c1, rt0.c3))!=((rt0.c1, vt1.c0, '	}P', rt0.c1))))));
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (((rt0.c1, rt0.c2, '/')) NOT BETWEEN ((vt1.c0, ((rt0.c0)%(x'e035')), (((rt0.c1))<((rt0.c1))))) AND (('-1251063464', (rt0.c2 IN ()), ((vt1.c0)%(rt0.c2))))) WHERE (((rt0.c2 COLLATE BINARY)<((((rt0.c0, vt1.c0, rt0.c1, rt0.c3))>((rt0.c1, vt1.c0, '	}P', rt0.c1))))));
SELECT ALL * FROM rt0 WHERE (((((((((rt0.c0)AND(rt0.c2)))AND(((rt0.c2) IS FALSE))))OR(((rt0.c1)<=(rt0.c2)))))OR(TRIM(rt0.c0))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c0)AND(rt0.c2)))AND(((rt0.c2) IS FALSE))))OR(((rt0.c1)<(rt0.c2)))))OR(TRIM(rt0.c0))))AND(rt0.c1))) ORDER BY ((((rt0.c3) ISNULL))>(((rt0.c0)IS(rt0.c3)))) DESC LIMIT 3;
SELECT ALL * FROM rt0 WHERE (((((((((rt0.c0)AND(rt0.c2)))AND(((rt0.c2) IS FALSE))))OR(((rt0.c1)<=(rt0.c2)))))OR(TRIM(rt0.c0))));
SELECT DISTINCT * FROM rt0 WHERE (((((((((((rt0.c0)AND(rt0.c2)))AND(((rt0.c2) IS FALSE))))OR(((rt0.c1)<(rt0.c2)))))OR(TRIM(rt0.c0))))AND(rt0.c1))) ORDER BY ((((rt0.c3) ISNULL))>(((rt0.c0)IS(rt0.c3)))) DESC LIMIT 3;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE ((((((rt0.c0))!=((rt0.c3))))=(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY ((((((((((((((rt0.c3)AND(rt0.c3)))OR(rt0.c3)))AND(rt0.c2)))AND(rt0.c2)))OR((rt0.c1 IN (rt0.c0)))))AND(CASE rt0.c1  WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN 'U' END)))OR((+ (rt0.c3))))  NULLS FIRST, CAST('s<r볚' AS NUMERIC)  NULLS LAST;
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE ((((((((rt0.c0))<((rt0.c3))))=(((rt0.c3) BETWEEN (rt0.c0) AND (rt0.c0)))))AND((((((rt0.c1, rt0.c3, rt0.c0, rt0.c2))=((rt0.c0, rt0.c0, rt0.c3, x''))))<(CAST(rt0.c2 AS NUMERIC)))))) ORDER BY CAST(((rt0.c2)%(rt0.c3)) AS REAL)  NULLS LAST, DATETIME(((((((rt0.c1)OR(rt0.c1)))OR(rt0.c3)))AND(rt0.c2)), 0xffffffffeda855c7, CASE WHEN rt0.c1 THEN rt0.c1 END, (+ (rt0.c1)), rt0.c3), ((rt0.c1)|(rt0.c3)) COLLATE BINARY DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt1 LEFT OUTER JOIN rt0 ON ((rt0.c0) ISNULL) COLLATE NOCASE WHERE (((((((rt0.c0, vt1.c0, rt0.c0)) BETWEEN ((rt0.c0, rt0.c1, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c1))), ((vt1.c0)<>(rt0.c3))))!=((((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c2)), TYPEOF(rt0.c1)))));
SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON ((rt0.c0) ISNULL) COLLATE NOCASE WHERE (((((((rt0.c0, vt1.c0, rt0.c0)) BETWEEN ((rt0.c0, rt0.c1, rt0.c3)) AND ((rt0.c3, rt0.c3, rt0.c1))), ((vt1.c0)<>(rt0.c3))))<>((((vt1.c0) BETWEEN (rt0.c0) AND (rt0.c2)), TYPEOF(rt0.c1))))) INTERSECT SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON ((rt0.c0) ISNULL) COLLATE NOCASE WHERE (((((vt1.c0)OR(((rt0.c1) BETWEEN (rt0.c3) AND (rt0.c0)))))AND(CAST(vt1.c0 AS TEXT))));
SELECT ALL COUNT(*) FROM rt0 INNER JOIN vt1 ON vt1.c0 WHERE (rt0.c2) ORDER BY HEX(DISTINCT CASE rt0.c2  WHEN rt0.c2 THEN vt1.c0 END) ASC, (((rt0.c2 COLLATE RTRIM, (((rt0.c3))>((rt0.c3)))))>=(((~ (rt0.c3)), ((vt1.c0) BETWEEN (rt0.c1) AND (x'0237d4')))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM rt0 INNER JOIN vt1 ON vt1.c0 WHERE (rt0.c2) ORDER BY (+ ((((vt1.c0, rt0.c2))=((rt0.c2, vt1.c0)))))  NULLS LAST, rt0.c1;
SELECT MIN(rt0.c0) FROM vt1 CROSS JOIN rt0 ON CAST(((rt0.c2)>(1.251045505E9)) AS REAL) WHERE ((+ (((vt1.c0)LIKE(rt0.c1)))));
SELECT ALL MIN(rt0.c0) FROM vt1 CROSS JOIN rt0 ON CAST(((rt0.c2)>(1.251045505E9)) AS REAL) WHERE ((+ (((vt1.c0)LIKE(rt0.c1))))) INTERSECT SELECT MIN(rt0.c0) FROM vt1 CROSS JOIN rt0 ON CAST(((rt0.c2)>(1.251045505E9)) AS REAL) WHERE ((+ (((0.3347139097428101) IS TRUE))));
SELECT * FROM vt1, rt0 WHERE (((((rt0.c1) NOT BETWEEN (rt0.c1) AND ('-1532470271')))&(((rt0.c3) NOTNULL))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((rt0.c1) NOT BETWEEN (rt0.c1) AND ('-1532470271')))&(((rt0.c3) NOTNULL))))AND((((((rt0.c1))<=((rt0.c1))))GLOB(0.8620100687232414)))));
SELECT * FROM vt1, rt0 WHERE (((((rt0.c1) NOT BETWEEN (rt0.c1) AND ('-1532470271')))&(((rt0.c3) NOTNULL))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((rt0.c1) NOT BETWEEN (rt0.c1) AND ('-1532470271')))&(((rt0.c3) NOTNULL))))AND((((((rt0.c1))<=((rt0.c1))))GLOB(0.8620100687232414)))));
SELECT ALL * FROM vt1, rt0 WHERE (((rt0.c2 COLLATE BINARY)OR(((((rt0.c0)OR(rt0.c0)))AND(rt0.c0)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c2 COLLATE BINARY)OR(((((rt0.c0)OR(rt0.c0)))AND(rt0.c0)))))AND(CASE vt1.c0  WHEN '1466001721' THEN vt1.c0 END COLLATE BINARY))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((x'ac')AND((rt0.c3 IN (vt1.c0)))));
SELECT ALL * FROM vt1, rt0 WHERE (((rt0.c2 COLLATE BINARY)OR(((((rt0.c0)OR(rt0.c0)))AND(rt0.c0)))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((rt0.c2 COLLATE BINARY)OR(((((rt0.c0)OR(rt0.c0)))AND(rt0.c0)))))AND(CASE vt1.c0  WHEN '1466001721' THEN vt1.c0 END COLLATE BINARY))) INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((x'ac')AND((rt0.c3 IN (vt1.c0)))));
SELECT MAX(vt1.c0) FROM rt0 NATURAL JOIN vt1 WHERE (((((CAST(rt0.c0 AS NUMERIC))OR(rt0.c1 COLLATE RTRIM)))OR(x'ad')));
SELECT MAX(vt1.c0) FROM rt0 NATURAL JOIN vt1 WHERE (((((CAST(rt0.c0 AS NUMERIC))OR(rt0.c1 COLLATE RTRIM)))OR(x'ad')));
SELECT * FROM rt0 WHERE (rt0.c2);
SELECT ALL * FROM rt0 WHERE (((rt0.c2)AND(((((((((((((rt0.c1)AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c1))) NOTNULL)))) INTERSECT SELECT ALL * FROM rt0 WHERE (((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)))<<(CAST(0.4839823157566765 AS NUMERIC))));
SELECT * FROM rt0 WHERE (rt0.c2);
SELECT ALL * FROM rt0 WHERE (((rt0.c2)AND(((((((((((((rt0.c1)AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c2)))AND(rt0.c1)))AND(rt0.c1))) NOTNULL)))) INTERSECT SELECT ALL * FROM rt0 WHERE (((((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)))<<(CAST(0.4839823157566765 AS NUMERIC))));
SELECT * FROM rt0 WHERE ((((rt0.c1, rt0.c0)) NOT BETWEEN ((((rt0.c3)>(rt0.c2)), ((((((((rt0.c2)OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c3)))OR(rt0.c1)))) AND ((CASE rt0.c2  WHEN '0.8895009993640729' THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c1 END, (((rt0.c2))>=((rt0.c2)))))));
SELECT ALL * FROM rt0 WHERE ((((rt0.c1, rt0.c0)) NOT BETWEEN ((((rt0.c3)>(rt0.c2)), ((((((((rt0.c2)OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c3)))OR(rt0.c1)))) AND ((CASE rt0.c2  WHEN '0.8895009993640729' THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c1 END, (((rt0.c2))>=((rt0.c2))))))) LIMIT 1 INTERSECT SELECT * FROM rt0 WHERE (rt0.c1) LIMIT 1;
SELECT * FROM rt0 WHERE ((((rt0.c1, rt0.c0)) NOT BETWEEN ((((rt0.c3)>(rt0.c2)), ((((((((rt0.c2)OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c3)))OR(rt0.c1)))) AND ((CASE rt0.c2  WHEN '0.8895009993640729' THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c1 END, (((rt0.c2))>=((rt0.c2)))))));
SELECT ALL * FROM rt0 WHERE ((((rt0.c1, rt0.c0)) NOT BETWEEN ((((rt0.c3)>(rt0.c2)), ((((((((rt0.c2)OR(rt0.c1)))AND(rt0.c2)))AND(rt0.c3)))OR(rt0.c1)))) AND ((CASE rt0.c2  WHEN '0.8895009993640729' THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c1 END, (((rt0.c2))>=((rt0.c2))))))) LIMIT 1 INTERSECT SELECT * FROM rt0 WHERE (rt0.c1) LIMIT 1;
SELECT ALL * FROM rt0 WHERE (((((rt0.c3) NOTNULL))<<(rt0.c3 COLLATE RTRIM))) ORDER BY ((((0.0723648019073565)AND(ROUND(rt0.c1, rt0.c0))))OR(CAST(rt0.c1 AS INTEGER))), 0Xffffffff98aa2165 DESC;
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3) NOTNULL))<<(rt0.c3 COLLATE RTRIM)))AND(((rt0.c2)LIKE(((((rt0.c2)OR(rt0.c3)))OR(rt0.c2))))))) ORDER BY ((((0.0723648019073565)AND(ROUND(rt0.c1, rt0.c0))))OR(CAST(rt0.c1 AS INTEGER))), 0Xffffffff98aa2165 DESC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((x'3141')%((((rt0.c2, rt0.c1, rt0.c3)) BETWEEN ((rt0.c0, rt0.c3, 0.637459653512031)) AND ((rt0.c3, rt0.c3, 0.24689205116768542)))))) ORDER BY ((((0.0723648019073565)AND(ROUND(rt0.c1, rt0.c0))))OR(CAST(rt0.c1 AS INTEGER))), 0Xffffffff98aa2165 DESC;
SELECT ALL * FROM rt0 WHERE (((((rt0.c3) NOTNULL))<<(rt0.c3 COLLATE RTRIM))) ORDER BY ((((0.0723648019073565)AND(ROUND(rt0.c1, rt0.c0))))OR(CAST(rt0.c1 AS INTEGER))), 0Xffffffff98aa2165 DESC;
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c3) NOTNULL))<<(rt0.c3 COLLATE RTRIM)))AND(((rt0.c2)LIKE(((((rt0.c2)OR(rt0.c3)))OR(rt0.c2))))))) ORDER BY ((((0.0723648019073565)AND(ROUND(rt0.c1, rt0.c0))))OR(CAST(rt0.c1 AS INTEGER))), 0Xffffffff98aa2165 DESC INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((x'3141')%((((rt0.c2, rt0.c1, rt0.c3)) BETWEEN ((rt0.c0, rt0.c3, 0.637459653512031)) AND ((rt0.c3, rt0.c3, 0.24689205116768542)))))) ORDER BY ((((0.0723648019073565)AND(ROUND(rt0.c1, rt0.c0))))OR(CAST(rt0.c1 AS INTEGER))), 0Xffffffff98aa2165 DESC;
SELECT COUNT(*) FROM vt1 WHERE ((((+ (vt1.c0))) NOT BETWEEN (((vt1.c0)GLOB(vt1.c0))) AND (CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0xffffffffeaf3b771 END)));
SELECT COUNT(*) FROM vt1 WHERE ((((((+ (vt1.c0))) NOT BETWEEN (((vt1.c0)GLOB(vt1.c0))) AND (CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN -353126543 END)))AND((((vt1.c0 IN ())) BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND ((((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((x'be29c5', vt1.c0)))))))) ORDER BY ((((((((((vt1.c0)<>(vt1.c0)))OR(CAST('-226586671' AS INTEGER))))AND(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)))AND('-2093656436' COLLATE BINARY)))AND(((vt1.c0)*(vt1.c0))))  NULLS FIRST LIMIT 2;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (NULLIF(vt1.c0 COLLATE NOCASE, (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0)))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (NULLIF(vt1.c0 COLLATE NOCASE, (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))))) LIMIT 1 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((NOT ((- (vt1.c0))))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (((((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))OR(HEX(vt1.c0))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND(((vt1.c0)<<(vt1.c0)))))AND(x'')));
SELECT ALL * FROM vt1 WHERE (((((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))OR(HEX(vt1.c0))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND(((vt1.c0)<<(vt1.c0)))))AND(x'')));
SELECT ALL * FROM vt1 WHERE (((((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))OR(HEX(vt1.c0))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND(((vt1.c0)<<(vt1.c0)))))AND(x'')));
SELECT ALL * FROM vt1 WHERE (((((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))OR(HEX(vt1.c0))))OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND(((vt1.c0)<<(vt1.c0)))))AND(x'')));
SELECT * FROM vt1, rt0 WHERE (rt0.c2);
SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c2) ORDER BY ((CAST(vt1.c0 AS NUMERIC)) IS TRUE) DESC INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((0.5173021879047554)+(rt0.c2)))/((NOT (vt1.c0))))) ORDER BY ((CAST(vt1.c0 AS NUMERIC)) IS TRUE) DESC;
SELECT * FROM vt1, rt0 WHERE (rt0.c2);
SELECT DISTINCT * FROM vt1, rt0 WHERE (rt0.c2) ORDER BY ((CAST(vt1.c0 AS NUMERIC)) IS TRUE) DESC INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((((0.5173021879047554)+(rt0.c2)))/((NOT (vt1.c0))))) ORDER BY ((CAST(vt1.c0 AS NUMERIC)) IS TRUE) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))))) ORDER BY vt1.c0 ASC, ((((vt1.c0) IS FALSE)) BETWEEN (((vt1.c0) IS TRUE)) AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))))AND((CAST(vt1.c0 AS BLOB) IN ())))) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOT BETWEEN (vt1.c0) AND (LAST_INSERT_ROWID())) ASC  NULLS LAST, (((vt1.c0 COLLATE RTRIM, vt1.c0, x'', ((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))))>=((CAST(vt1.c0 AS TEXT), ((vt1.c0)LIKE(vt1.c0)), ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), LTRIM(vt1.c0, vt1.c0)))) DESC  NULLS LAST, (((vt1.c0)OR(vt1.c0)) IN ());
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c3 IN (vt1.c0, rt0.c2))) BETWEEN (((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1))) AND (LOWER(rt0.c2))));
SELECT COUNT(*) FROM rt0, vt1 WHERE ((((rt0.c3 IN (vt1.c0))) BETWEEN (((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1))) AND (LOWER(rt0.c2)))) ORDER BY x'38d95dd79abf66'  NULLS FIRST, CAST(((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)) AS TEXT)  NULLS LAST INTERSECT SELECT COUNT(*) FROM rt0, vt1 WHERE ((((x'')>=(rt0.c0)) IN ((((vt1.c0))>((rt0.c0)))))) ORDER BY x'38d95dd79abf66'  NULLS FIRST, CAST(((rt0.c2) BETWEEN (rt0.c2) AND (rt0.c0)) AS TEXT)  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (SQLITE_VERSION());
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (SQLITE_VERSION()) ORDER BY (NOT (((vt1.c0)IS(vt1.c0))))  NULLS LAST;
SELECT MIN(rt0.c0) FROM rt0 WHERE (((((rt0.c3) NOT NULL))=(((rt0.c2)<(rt0.c3)))));
SELECT DISTINCT MIN(rt0.c0) FROM rt0 WHERE (((((((rt0.c3) NOT NULL))==(((rt0.c2)<(rt0.c3)))))AND((rt0.c3 COLLATE RTRIM IN (UNICODE(rt0.c2))))));
SELECT * FROM vt1 WHERE ((((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))>=((+ (vt1.c0)))));
SELECT * FROM vt1 WHERE ((((((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))=((+ (vt1.c0)))))AND(((((((((vt1.c0 COLLATE BINARY)OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND((NOT (vt1.c0)))))OR((+ (vt1.c0)))))OR(((vt1.c0)<<(vt1.c0))))))) ORDER BY ((((vt1.c0)/(vt1.c0))) NOT NULL) ASC  NULLS FIRST, CASE WHEN (- (vt1.c0)) THEN CAST(vt1.c0 AS BLOB) END ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))>=((+ (vt1.c0)))));
SELECT * FROM vt1 WHERE ((((((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))=((+ (vt1.c0)))))AND(((((((((vt1.c0 COLLATE BINARY)OR(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND((NOT (vt1.c0)))))OR((+ (vt1.c0)))))OR(((vt1.c0)<<(vt1.c0))))))) ORDER BY ((((vt1.c0)/(vt1.c0))) NOT NULL) ASC  NULLS FIRST, CASE WHEN (- (vt1.c0)) THEN CAST(vt1.c0 AS BLOB) END ASC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY '1466001721' DESC  NULLS LAST, ((((rt0.c0) NOTNULL)) NOTNULL) DESC;
SELECT ALL * FROM vt1, rt0 WHERE (((vt1.c0)AND((('I(MO&dgVR') IS TRUE)))) ORDER BY (((((rt0.c1, rt0.c0, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c2, rt0.c2)) AND ((rt0.c1, rt0.c1, rt0.c3)))) NOT NULL) ASC  NULLS LAST, ((CASE WHEN rt0.c1 THEN '-262715540' WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END)GLOB(rt0.c2))  NULLS FIRST, (((((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1))))>=((((rt0.c2) NOTNULL))));
SELECT * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY '1466001721' DESC  NULLS LAST, ((((rt0.c0) NOTNULL)) NOTNULL) DESC;
SELECT ALL * FROM vt1, rt0 WHERE (((vt1.c0)AND((('I(MO&dgVR') IS TRUE)))) ORDER BY (((((rt0.c1, rt0.c0, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c2, rt0.c2)) AND ((rt0.c1, rt0.c1, rt0.c3)))) NOT NULL) ASC  NULLS LAST, ((CASE WHEN rt0.c1 THEN '-262715540' WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END)GLOB(rt0.c2))  NULLS FIRST, (((((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1))))>=((((rt0.c2) NOTNULL))));
SELECT MAX(vt1.c0) FROM rt0, vt1 WHERE ((rt0.c3 IN ()));
SELECT DISTINCT MAX(vt1.c0) FROM rt0, vt1 WHERE ((rt0.c3 IN ())) LIMIT 2;
SELECT ALL * FROM rt0 WHERE (x'e641cde2');
SELECT ALL * FROM rt0 WHERE (((x'e641cde2')AND((((NOT (rt0.c1))) NOT BETWEEN ((~ (rt0.c1))) AND (((((rt0.c2)AND(rt0.c1)))OR(rt0.c3))))))) ORDER BY '~c'  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE ((NOT (CASE WHEN rt0.c2 THEN NULL WHEN rt0.c2 THEN rt0.c1 END))) ORDER BY '~c'  NULLS LAST;
SELECT ALL * FROM rt0 WHERE (x'e641cde2');
SELECT ALL * FROM rt0 WHERE (((x'e641cde2')AND((((NOT (rt0.c1))) NOT BETWEEN ((~ (rt0.c1))) AND (((((rt0.c2)AND(rt0.c1)))OR(rt0.c3))))))) ORDER BY '~c'  NULLS LAST INTERSECT SELECT ALL * FROM rt0 WHERE ((NOT (CASE WHEN rt0.c2 THEN NULL WHEN rt0.c2 THEN rt0.c1 END))) ORDER BY '~c'  NULLS LAST;
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((('椹') NOTNULL));
SELECT COUNT(*) FROM rt0, vt1 WHERE ((('椹') NOTNULL)) LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((((CAST(vt1.c0 AS TEXT), ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c3))))>((vt1.c0 COLLATE NOCASE, ((rt0.c2)>>(x'')))))) LIMIT 0x1;
SELECT COUNT(*) FROM vt1 WHERE (vt1.c0) ORDER BY (vt1.c0 IN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, CAST('0.3225145650989357' COLLATE NOCASE AS TEXT) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((vt1.c0)AND(((MAX(vt1.c0, vt1.c0))>(TYPEOF(vt1.c0)))))) ORDER BY (vt1.c0 IN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, CAST('0.3225145650989357' COLLATE NOCASE AS TEXT) ASC  NULLS FIRST;
SELECT COUNT(*) FROM rt0, vt1 WHERE ((NOT ((rt0.c0 IN (NULL))))) ORDER BY (((rt0.c3)|(rt0.c1)) IN (rt0.c2 COLLATE BINARY, ((((((vt1.c0)OR(rt0.c2)))AND(rt0.c1)))AND(vt1.c0))));
SELECT COUNT(*) FROM rt0, vt1 WHERE ((((NOT ((rt0.c0 IN (NULL)))))AND((((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1))))<=((((rt0.c0) IS TRUE))))))) ORDER BY (CAST(rt0.c2 AS INTEGER) IN (rt0.c2 COLLATE BINARY))  NULLS FIRST LIMIT 2 INTERSECT SELECT COUNT(*) FROM rt0, vt1 WHERE (CASE ((rt0.c0)|(rt0.c1))  WHEN ((((rt0.c3)OR(rt0.c2)))OR(rt0.c0)) THEN (((x'', rt0.c0, rt0.c3, rt0.c2, 1.504116959E9, rt0.c3))=((vt1.c0, rt0.c3, rt0.c2, rt0.c2, rt0.c1, rt0.c1))) WHEN x'9ee3' THEN (rt0.c1 IN (rt0.c1)) END) ORDER BY (CAST(rt0.c2 AS INTEGER) IN (rt0.c2 COLLATE BINARY))  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c1)))GLOB((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))))) WHERE (NULL) ORDER BY ((((CAST(rt0.c1 AS REAL))OR(CAST(NULL AS REAL))))AND(((rt0.c2)<(vt1.c0))))  NULLS LAST, ((NULL)IS(((rt0.c1)*(rt0.c2))))  NULLS LAST, x'c9' DESC;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c1)))GLOB((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))))) WHERE (((NULL)AND(CAST(((-118807158) NOTNULL) AS NUMERIC)))) ORDER BY ((((CAST(rt0.c1 AS REAL))OR(CAST(NULL AS REAL))))AND(((rt0.c2)<(vt1.c0))))  NULLS LAST, ((NULL)IS(((rt0.c1)*(rt0.c2))))  NULLS LAST, x'c9' DESC LIMIT 0x2 INTERSECT SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON ((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c1)))GLOB((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))))) WHERE ((((('464024925') NOT NULL))>(((0.4339089678475312) NOT BETWEEN (vt1.c0) AND (rt0.c0))))) ORDER BY ((((CAST(rt0.c1 AS REAL))OR(CAST(NULL AS REAL))))AND(((rt0.c2)<(vt1.c0))))  NULLS LAST, ((NULL)IS(((rt0.c1)*(rt0.c2))))  NULLS LAST, x'c9' DESC LIMIT 0X2;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c1)))GLOB((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))))) WHERE (NULL) ORDER BY ((((CAST(rt0.c1 AS REAL))OR(CAST(NULL AS REAL))))AND(((rt0.c2)<(vt1.c0))))  NULLS LAST, ((NULL)IS(((rt0.c1)*(rt0.c2))))  NULLS LAST, x'c9' DESC;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON ((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c1)))GLOB((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))))) WHERE (((NULL)AND(CAST(((-118807158) NOTNULL) AS NUMERIC)))) ORDER BY ((((CAST(rt0.c1 AS REAL))OR(CAST(NULL AS REAL))))AND(((rt0.c2)<(vt1.c0))))  NULLS LAST, ((NULL)IS(((rt0.c1)*(rt0.c2))))  NULLS LAST, x'c9' DESC LIMIT 0x2 INTERSECT SELECT * FROM rt0 LEFT OUTER JOIN vt1 ON ((((((((rt0.c3)OR(rt0.c1)))AND(rt0.c0)))AND(rt0.c1)))GLOB((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))))) WHERE ((((('464024925') NOT NULL))>(((0.4339089678475312) NOT BETWEEN (vt1.c0) AND (rt0.c0))))) ORDER BY ((((CAST(rt0.c1 AS REAL))OR(CAST(NULL AS REAL))))AND(((rt0.c2)<(vt1.c0))))  NULLS LAST, ((NULL)IS(((rt0.c1)*(rt0.c2))))  NULLS LAST, x'c9' DESC LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (NULL) ORDER BY ((rt0.c0)%(rt0.c1)) COLLATE BINARY, CAST(CASE rt0.c1  WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c1 END AS BLOB)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1, rt0 WHERE (NULL) ORDER BY ((rt0.c0)%(rt0.c1)) COLLATE BINARY, CAST(CASE rt0.c1  WHEN vt1.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c1 END AS BLOB)  NULLS LAST LIMIT 3;
SELECT COUNT(*) FROM rt0 LEFT OUTER JOIN vt1 ON ((((((((json_array(rt0.c3, rt0.c0))OR(CASE 0.042292615102710096  WHEN rt0.c2 THEN rt0.c1 WHEN 'D' THEN rt0.c0 WHEN 0Xffffffff9725ebe2 THEN 0.43769968171286733 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN NULL THEN rt0.c1 END)))AND(((vt1.c0)||(rt0.c2)))))OR(CASE WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c3 END)))OR(((vt1.c0) NOT NULL))) WHERE (TYPEOF(LIKELY(DISTINCT rt0.c3))) ORDER BY (((((('N57')AND(((((((((x'')AND(rt0.c0)))AND(rt0.c3)))OR(NULL)))OR(rt0.c3)))))AND(LIKE(rt0.c2, rt0.c1))))OR(LIKELIHOOD(vt1.c0, vt1.c0))) DESC  NULLS LAST, CASE x''  WHEN ((rt0.c0)%(rt0.c2)) THEN ((vt1.c0)||(rt0.c1)) WHEN QUOTE(rt0.c0) THEN ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)) WHEN ((rt0.c2)AND(rt0.c2)) THEN ((((vt1.c0)OR(rt0.c3)))OR(rt0.c3)) WHEN (0xffffffffe8108414 IN (rt0.c1)) THEN CAST(rt0.c1 AS TEXT) ELSE (+ (rt0.c0)) END;
SELECT DISTINCT COUNT(*) FROM rt0 INNER JOIN vt1 ON ((((((((json_array(rt0.c3, rt0.c0))OR(CASE 0.042292615102710096  WHEN rt0.c2 THEN rt0.c1 WHEN 'D' THEN rt0.c0 WHEN -1759122462 THEN 0.43769968171286733 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN NULL THEN rt0.c1 END)))AND(((vt1.c0)||(rt0.c2)))))OR(CASE WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c3 END)))OR(((vt1.c0) NOT NULL))) WHERE (((TYPEOF(LIKELY(DISTINCT rt0.c3)))AND(LIKELY(DISTINCT (((rt0.c1, vt1.c0)) NOT BETWEEN ((rt0.c3, rt0.c2)) AND ((rt0.c1, rt0.c1))))))) ORDER BY (((((('N57')AND(((((((((x'')AND(rt0.c0)))AND(rt0.c3)))OR(NULL)))OR(rt0.c3)))))AND(LIKE(rt0.c2, rt0.c1))))OR(LIKELIHOOD(vt1.c0, vt1.c0))) DESC  NULLS LAST, CASE x''  WHEN ((rt0.c0)%(rt0.c2)) THEN ((vt1.c0)||(rt0.c1)) WHEN QUOTE(rt0.c0) THEN ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)) WHEN ((rt0.c2)AND(rt0.c2)) THEN ((((vt1.c0)OR(rt0.c3)))OR(rt0.c3)) WHEN (0xffffffffe8108414 IN (rt0.c1)) THEN CAST(rt0.c1 AS TEXT) ELSE (+ (rt0.c0)) END INTERSECT SELECT DISTINCT COUNT(*) FROM rt0 INNER JOIN vt1 ON ((((((((json_array(rt0.c3, rt0.c0))OR(CASE 0.042292615102710096  WHEN rt0.c2 THEN rt0.c1 WHEN 'D' THEN rt0.c0 WHEN 0Xffffffff9725ebe2 THEN 0.43769968171286733 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN NULL THEN rt0.c1 END)))AND(((vt1.c0)||(rt0.c2)))))OR(CASE WHEN vt1.c0 THEN rt0.c1 WHEN vt1.c0 THEN rt0.c0 ELSE rt0.c3 END)))OR(((vt1.c0) NOT NULL))) WHERE (vt1.c0) ORDER BY (((((('N57')AND(((((((((x'')AND(rt0.c0)))AND(rt0.c3)))OR(NULL)))OR(rt0.c3)))))AND(LIKE(rt0.c2, rt0.c1))))OR(LIKELIHOOD(vt1.c0, vt1.c0))) DESC  NULLS LAST, CASE x''  WHEN ((rt0.c0)%(rt0.c2)) THEN ((vt1.c0)||(rt0.c1)) WHEN QUOTE(rt0.c0) THEN ((rt0.c0) NOT BETWEEN (rt0.c3) AND (rt0.c1)) WHEN ((rt0.c2)AND(rt0.c2)) THEN ((((vt1.c0)OR(rt0.c3)))OR(rt0.c3)) WHEN (-401570796 IN (rt0.c1)) THEN CAST(rt0.c1 AS TEXT) ELSE (+ (rt0.c0)) END;
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE ((NOT ((((rt0.c2))>=(('胤)qYᛲe尭PJ'))))));
SELECT ALL MAX(rt0.c1) FROM rt0, vt1 WHERE ((((NOT ((((rt0.c2))>=(('胤)qYᛲe尭PJ'))))))AND(vt1.c0 COLLATE BINARY))) LIMIT 0 INTERSECT SELECT MAX(rt0.c1) FROM rt0, vt1 WHERE ((((rt0.c1 IN ('0.35795302195238243', rt0.c0))) IS TRUE)) LIMIT 0;
SELECT ALL * FROM rt0, vt1 WHERE ((((TRIM(rt0.c1, rt0.c3)))<((CAST(rt0.c2 AS TEXT)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((TRIM(rt0.c1, rt0.c3)))<((CAST(rt0.c2 AS TEXT)))))AND(rt0.c0))) ORDER BY ((((rt0.c2) IS TRUE)) NOTNULL) ASC  NULLS LAST, rt0.c0  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((((TRIM(rt0.c1, rt0.c3)))<((CAST(rt0.c2 AS TEXT)))));
SELECT DISTINCT * FROM rt0, vt1 WHERE ((((((TRIM(rt0.c1, rt0.c3)))<((CAST(rt0.c2 AS TEXT)))))AND(rt0.c0))) ORDER BY ((((rt0.c2) IS TRUE)) NOTNULL) ASC  NULLS LAST, rt0.c0  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE 1287116040 END)) AND ((((((((((NULL)AND(vt1.c0)))OR(x'')))OR(vt1.c0)))OR(vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE 0x4cb7d508 END)) AND ((((((((((NULL)AND(vt1.c0)))OR(x'')))OR(vt1.c0)))OR(vt1.c0))))))AND(CASE vt1.c0 COLLATE NOCASE  WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN vt1.c0 THEN json_extract(vt1.c0, vt1.c0, '206543958') ELSE ((vt1.c0)||(vt1.c0)) END))) ORDER BY (- (vt1.c0)), x'58ed'  NULLS FIRST LIMIT 5 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((0Xffffffff9e9f8599) BETWEEN (vt1.c0) AND (vt1.c0 COLLATE NOCASE))) ORDER BY (- (vt1.c0)), x'58ed'  NULLS FIRST LIMIT 5;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE 1287116040 END)) AND ((((((((((NULL)AND(vt1.c0)))OR(x'')))OR(vt1.c0)))OR(vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE 0x4cb7d508 END)) AND ((((((((((NULL)AND(vt1.c0)))OR(x'')))OR(vt1.c0)))OR(vt1.c0))))))AND(CASE vt1.c0 COLLATE NOCASE  WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN vt1.c0 THEN json_extract(vt1.c0, vt1.c0, '206543958') ELSE ((vt1.c0)||(vt1.c0)) END))) ORDER BY (- (vt1.c0)), x'58ed'  NULLS FIRST LIMIT 5 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((0Xffffffff9e9f8599) BETWEEN (vt1.c0) AND (vt1.c0 COLLATE NOCASE))) ORDER BY (- (vt1.c0)), x'58ed'  NULLS FIRST LIMIT 5;
SELECT * FROM rt0 WHERE (((((rt0.c1)*(rt0.c2))) NOT BETWEEN (((rt0.c3)/(rt0.c2))) AND (CASE rt0.c1  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END))) ORDER BY ((((((((rt0.c3 COLLATE NOCASE)OR((- (NULL)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))OR((NOT (rt0.c2)))))OR(((rt0.c0)GLOB(rt0.c3))));
SELECT ALL * FROM rt0 WHERE (((((rt0.c1)*(rt0.c2))) NOT BETWEEN (((rt0.c3)/(rt0.c2))) AND (CASE rt0.c1  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END))) ORDER BY ((((((((rt0.c3 COLLATE NOCASE)OR((- (NULL)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))OR((NOT (rt0.c2)))))OR(((rt0.c0)GLOB(rt0.c3)))) LIMIT 0X4 INTERSECT SELECT ALL * FROM rt0 WHERE (((((rt0.c2)OR(rt0.c0)))OR(-1.862126037E9)) COLLATE NOCASE) ORDER BY ((((((((rt0.c3 COLLATE NOCASE)OR((- (NULL)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))OR((NOT (rt0.c2)))))OR(((rt0.c0)GLOB(rt0.c3)))) LIMIT 0x4;
SELECT * FROM rt0 WHERE (((((rt0.c1)*(rt0.c2))) NOT BETWEEN (((rt0.c3)/(rt0.c2))) AND (CASE rt0.c1  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END))) ORDER BY ((((((((rt0.c3 COLLATE NOCASE)OR((- (NULL)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))OR((NOT (rt0.c2)))))OR(((rt0.c0)GLOB(rt0.c3))));
SELECT ALL * FROM rt0 WHERE (((((rt0.c1)*(rt0.c2))) NOT BETWEEN (((rt0.c3)/(rt0.c2))) AND (CASE rt0.c1  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c3 END))) ORDER BY ((((((((rt0.c3 COLLATE NOCASE)OR((- (NULL)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))OR((NOT (rt0.c2)))))OR(((rt0.c0)GLOB(rt0.c3)))) LIMIT 0X4 INTERSECT SELECT ALL * FROM rt0 WHERE (((((rt0.c2)OR(rt0.c0)))OR(-1.862126037E9)) COLLATE NOCASE) ORDER BY ((((((((rt0.c3 COLLATE NOCASE)OR((- (NULL)))))AND(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)))))OR((NOT (rt0.c2)))))OR(((rt0.c0)GLOB(rt0.c3)))) LIMIT 0x4;
SELECT MAX(vt1.c0) FROM vt1 WHERE (x'');
SELECT MAX(vt1.c0) FROM vt1 WHERE (x'');
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE ((((NULLIF(rt0.c2, rt0.c2), NULLIF(rt0.c1, 0.022128182064032997), ((rt0.c2) NOT NULL)))<>((LTRIM(rt0.c3, rt0.c1), ((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c2)), ((rt0.c1) ISNULL)))));
SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE ((((((NULLIF(rt0.c2, rt0.c2), NULLIF(rt0.c1, 0.022128182064032997), ((rt0.c2) NOT NULL)))<((LTRIM(rt0.c3, rt0.c1), ((vt1.c0) BETWEEN (rt0.c3) AND (rt0.c2)), ((rt0.c1) ISNULL)))))AND(((((rt0.c2)&(rt0.c0)))<=(((rt0.c0) NOT BETWEEN (rt0.c2) AND (vt1.c0))))))) ORDER BY (- (NULL)) DESC  NULLS FIRST, CASE WHEN (((vt1.c0, vt1.c0))==((rt0.c1, rt0.c2))) THEN (rt0.c2 IN (vt1.c0, rt0.c2)) ELSE ((vt1.c0)<<(rt0.c0)) END ASC  NULLS FIRST, (NOT (COALESCE(rt0.c0, 0.7600389441585338, rt0.c1)))  NULLS LAST, 0.4401058559101956 INTERSECT SELECT MIN(rt0.c3) FROM rt0, vt1 WHERE (CAST(((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt1.c0)) AS NUMERIC)) ORDER BY (- (NULL)) DESC  NULLS FIRST, CASE WHEN (((vt1.c0, vt1.c0))==((rt0.c1, rt0.c2))) THEN (rt0.c2 IN (vt1.c0, rt0.c2)) ELSE ((vt1.c0)<<(rt0.c0)) END ASC  NULLS FIRST, (NOT (COALESCE(rt0.c0, 0.7600389441585338, rt0.c1)))  NULLS LAST, 0.4401058559101956;
SELECT ALL MAX(rt0.c1) FROM rt0 WHERE ((((((((((((((rt0.c1, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c1, '5Y/*V-', rt0.c3)) AND ((rt0.c0, rt0.c0, rt0.c0))))AND(0X54cfbc05)))AND(((rt0.c0) ISNULL))))OR(json_insert(rt0.c1, rt0.c1, rt0.c3, rt0.c1, rt0.c2, rt0.c2))))AND(((rt0.c1)&(rt0.c1)))))AND(CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c0 END)));
SELECT DISTINCT MAX(rt0.c1) FROM rt0 WHERE ((((((((((((((((rt0.c1, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c1, '5Y/*V-', rt0.c3)) AND ((rt0.c0, rt0.c0, rt0.c0))))AND(1422900229)))AND(((rt0.c0) ISNULL))))OR(json_insert(rt0.c1, rt0.c1, rt0.c3, rt0.c1, rt0.c2, rt0.c2))))AND(((rt0.c1)&(rt0.c1)))))AND(CASE rt0.c2  WHEN rt0.c0 THEN rt0.c3 ELSE rt0.c0 END)))AND((NOT (rt0.c2))))) ORDER BY ((rt0.c2)>=(rt0.c2)) COLLATE BINARY  NULLS LAST, ('-57275297' IN (((rt0.c0) IS TRUE), ((rt0.c0) NOT NULL))) ASC  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM rt0, vt1 WHERE (CAST((rt0.c3 IN (rt0.c3)) AS INTEGER)) ORDER BY (((rt0.c1, rt0.c3, vt1.c0, rt0.c1, rt0.c3)) BETWEEN ((((rt0.c1)&(vt1.c0)), CASE WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END, HEX(DISTINCT vt1.c0), (rt0.c2 IN ()), ((((((((vt1.c0)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c0)))AND(rt0.c1)))) AND ((((vt1.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)), CASE WHEN '0.0' THEN NULL END, x'69ce', UPPER(rt0.c2), (((rt0.c2, rt0.c1))<=((0.1479873907414725, rt0.c1)))))) ASC  NULLS LAST;
SELECT * FROM rt0 NOT INDEXED, vt1 WHERE (CAST((rt0.c3 IN (rt0.c3)) AS INTEGER)) ORDER BY (((NOT (rt0.c3))) NOT NULL) DESC  NULLS FIRST INTERSECT SELECT * FROM rt0, vt1 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c0)) AS INTEGER)) ORDER BY (((NOT (rt0.c3))) NOT NULL) DESC  NULLS FIRST;
SELECT ALL * FROM rt0, vt1 WHERE (CAST((rt0.c3 IN (rt0.c3)) AS INTEGER)) ORDER BY (((rt0.c1, rt0.c3, vt1.c0, rt0.c1, rt0.c3)) BETWEEN ((((rt0.c1)&(vt1.c0)), CASE WHEN rt0.c1 THEN rt0.c0 ELSE vt1.c0 END, HEX(DISTINCT vt1.c0), (rt0.c2 IN ()), ((((((((vt1.c0)OR(rt0.c1)))OR(rt0.c0)))AND(rt0.c0)))AND(rt0.c1)))) AND ((((vt1.c0) NOT BETWEEN (rt0.c1) AND (vt1.c0)), CASE WHEN '0.0' THEN NULL END, x'69ce', UPPER(rt0.c2), (((rt0.c2, rt0.c1))<=((0.1479873907414725, rt0.c1)))))) ASC  NULLS LAST;
SELECT * FROM rt0 NOT INDEXED, vt1 WHERE (CAST((rt0.c3 IN (rt0.c3)) AS INTEGER)) ORDER BY (((NOT (rt0.c3))) NOT NULL) DESC  NULLS FIRST INTERSECT SELECT * FROM rt0, vt1 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (rt0.c0)) AS INTEGER)) ORDER BY (((NOT (rt0.c3))) NOT NULL) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((CAST(vt1.c0 AS INTEGER))OR(vt1.c0 COLLATE NOCASE)))AND(CAST(vt1.c0 AS NUMERIC))));
SELECT * FROM vt1 WHERE (((((((CAST(vt1.c0 AS INTEGER))OR(vt1.c0 COLLATE NOCASE)))AND(CAST(vt1.c0 AS NUMERIC))))AND(UNLIKELY(DISTINCT ((vt1.c0)|('k')))))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN -1.705485783E9 THEN vt1.c0 WHEN 0.18277054746913624 THEN vt1.c0 WHEN vt1.c0 THEN 0x2cc8dded END)GLOB(CAST(vt1.c0 AS REAL))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c0)<>(vt1.c0)))<=(((vt1.c0) NOT NULL)))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN -1.705485783E9 THEN vt1.c0 WHEN 0.18277054746913624 THEN vt1.c0 WHEN vt1.c0 THEN 0x2cc8dded END)GLOB(CAST(vt1.c0 AS REAL))) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (((((CAST(vt1.c0 AS INTEGER))OR(vt1.c0 COLLATE NOCASE)))AND(CAST(vt1.c0 AS NUMERIC))));
SELECT * FROM vt1 WHERE (((((((CAST(vt1.c0 AS INTEGER))OR(vt1.c0 COLLATE NOCASE)))AND(CAST(vt1.c0 AS NUMERIC))))AND(UNLIKELY(DISTINCT ((vt1.c0)|('k')))))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN -1.705485783E9 THEN vt1.c0 WHEN 0.18277054746913624 THEN vt1.c0 WHEN vt1.c0 THEN 0x2cc8dded END)GLOB(CAST(vt1.c0 AS REAL))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c0)<>(vt1.c0)))<=(((vt1.c0) NOT NULL)))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN -1.705485783E9 THEN vt1.c0 WHEN 0.18277054746913624 THEN vt1.c0 WHEN vt1.c0 THEN 0x2cc8dded END)GLOB(CAST(vt1.c0 AS REAL))) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((0.17444846182206752))<>(((- (vt1.c0)))))) ORDER BY ((((((((vt1.c0)%(vt1.c0)))OR(((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))))OR(CASE vt1.c0  WHEN '}' THEN vt1.c0 ELSE vt1.c0 END)))AND(vt1.c0)) DESC;
SELECT DISTINCT * FROM vt1 WHERE ((((((0.17444846182206752))<(((- (vt1.c0))))))AND(vt1.c0))) ORDER BY CAST(vt1.c0 AS INTEGER) COLLATE BINARY  NULLS LAST, ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))IS NOT(((vt1.c0) BETWEEN (vt1.c0) AND (9.53433735E8))))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE ((((0.17444846182206752))<>(((- (vt1.c0)))))) ORDER BY ((((((((vt1.c0)%(vt1.c0)))OR(((vt1.c0) BETWEEN (NULL) AND (vt1.c0)))))OR(CASE vt1.c0  WHEN '}' THEN vt1.c0 ELSE vt1.c0 END)))AND(vt1.c0)) DESC;
SELECT DISTINCT * FROM vt1 WHERE ((((((0.17444846182206752))<(((- (vt1.c0))))))AND(vt1.c0))) ORDER BY CAST(vt1.c0 AS INTEGER) COLLATE BINARY  NULLS LAST, ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))IS NOT(((vt1.c0) BETWEEN (vt1.c0) AND (9.53433735E8))))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM rt0 WHERE (rt0.c3);
SELECT DISTINCT * FROM rt0 WHERE (rt0.c3) ORDER BY ((CASE rt0.c3  WHEN '-198675049' THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN x'a4' END)AND(rt0.c0)) ASC, (((+ (rt0.c0)))IS(((rt0.c2)<=(rt0.c3))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (HEX(DISTINCT CAST(rt0.c3 AS TEXT))) ORDER BY ((CASE rt0.c3  WHEN '-198675049' THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN x'a4' END)AND(rt0.c0)) ASC, (((+ (rt0.c0)))IS(((rt0.c2)<=(rt0.c3))))  NULLS FIRST;
SELECT ALL * FROM rt0 WHERE (rt0.c3);
SELECT DISTINCT * FROM rt0 WHERE (rt0.c3) ORDER BY ((CASE rt0.c3  WHEN '-198675049' THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN x'a4' END)AND(rt0.c0)) ASC, (((+ (rt0.c0)))IS(((rt0.c2)<=(rt0.c3))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (HEX(DISTINCT CAST(rt0.c3 AS TEXT))) ORDER BY ((CASE rt0.c3  WHEN '-198675049' THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c2 THEN x'a4' END)AND(rt0.c0)) ASC, (((+ (rt0.c0)))IS(((rt0.c2)<=(rt0.c3))))  NULLS FIRST;
SELECT * FROM rt0 WHERE (CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1)) THEN rt0.c3 ELSE (rt0.c2 IN (rt0.c0)) END) ORDER BY TRIM(CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 END, CAST(rt0.c2 AS REAL)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1)) THEN rt0.c3 ELSE (rt0.c2 IN (rt0.c0)) END)AND(((load_extension(rt0.c0, rt0.c2)) NOT BETWEEN (((rt0.c2)==(rt0.c2))) AND (CAST(NULL AS BLOB)))))) ORDER BY TRIM(CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 END, CAST(rt0.c2 AS REAL)) DESC  NULLS FIRST;
SELECT * FROM rt0 WHERE (CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1)) THEN rt0.c3 ELSE (rt0.c2 IN (rt0.c0)) END) ORDER BY TRIM(CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 END, CAST(rt0.c2 AS REAL)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1)) THEN rt0.c3 ELSE (rt0.c2 IN (rt0.c0)) END)AND(((load_extension(rt0.c0, rt0.c2)) NOT BETWEEN (((rt0.c2)==(rt0.c2))) AND (CAST(NULL AS BLOB)))))) ORDER BY TRIM(CASE WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c0 THEN rt0.c0 END, CAST(rt0.c2 AS REAL)) DESC  NULLS FIRST;
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (((613656569, vt1.c0)) NOT BETWEEN ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)), NULL)) AND ((CHANGES(), ((((((((rt0.c3)AND(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0))))) WHERE ((((rt0.c3, '-1316183660'))<((rt0.c2, x''))) COLLATE RTRIM) ORDER BY ((rt0.c2)%(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c0 END))  NULLS FIRST, ((((rt0.c1)OR(x'ea0c53'))) IS FALSE)  NULLS LAST;
SELECT * FROM rt0 INNER JOIN vt1 ON (((613656569, vt1.c0)) NOT BETWEEN ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)), NULL)) AND ((CHANGES(), ((((((((rt0.c3)AND(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0))))) WHERE ((((((rt0.c3, '-1316183660'))<((rt0.c2, x''))) COLLATE RTRIM)AND((((rt0.c1, rt0.c2)) NOT BETWEEN ((((rt0.c3)LIKE(vt1.c0)), CAST(rt0.c0 AS REAL))) AND ((CAST(vt1.c0 AS REAL), ((rt0.c2)-(rt0.c0)))))))) ORDER BY ((((rt0.c1)==(rt0.c0)))<=((((rt0.c2))>(('-1253896892'))))), json_type((rt0.c0 IN ())) INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON (((0X2493a7f9, vt1.c0)) NOT BETWEEN ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)), NULL)) AND ((CHANGES(), ((((((((rt0.c3)AND(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0))))) WHERE (((CASE WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 END) IS FALSE)) ORDER BY ((((rt0.c1)==(rt0.c0)))<=((((rt0.c2))>(('-1253896892'))))), json_type((rt0.c0 IN ()));
SELECT ALL * FROM rt0 LEFT OUTER JOIN vt1 ON (((613656569, vt1.c0)) NOT BETWEEN ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)), NULL)) AND ((CHANGES(), ((((((((rt0.c3)AND(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0))))) WHERE ((((rt0.c3, '-1316183660'))<((rt0.c2, x''))) COLLATE RTRIM) ORDER BY ((rt0.c2)%(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c0 END))  NULLS FIRST, ((((rt0.c1)OR(x'ea0c53'))) IS FALSE)  NULLS LAST;
SELECT * FROM rt0 INNER JOIN vt1 ON (((613656569, vt1.c0)) NOT BETWEEN ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)), NULL)) AND ((CHANGES(), ((((((((rt0.c3)AND(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0))))) WHERE ((((((rt0.c3, '-1316183660'))<((rt0.c2, x''))) COLLATE RTRIM)AND((((rt0.c1, rt0.c2)) NOT BETWEEN ((((rt0.c3)LIKE(vt1.c0)), CAST(rt0.c0 AS REAL))) AND ((CAST(vt1.c0 AS REAL), ((rt0.c2)-(rt0.c0)))))))) ORDER BY ((((rt0.c1)==(rt0.c0)))<=((((rt0.c2))>(('-1253896892'))))), json_type((rt0.c0 IN ())) INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON (((0X2493a7f9, vt1.c0)) NOT BETWEEN ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (vt1.c0)), NULL)) AND ((CHANGES(), ((((((((rt0.c3)AND(rt0.c1)))OR(vt1.c0)))OR(rt0.c3)))OR(rt0.c0))))) WHERE (((CASE WHEN rt0.c0 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c3 END) IS FALSE)) ORDER BY ((((rt0.c1)==(rt0.c0)))<=((((rt0.c2))>(('-1253896892'))))), json_type((rt0.c0 IN ()));
SELECT ALL MAX(rt0.c1) FROM vt1, rt0 WHERE (CASE x''  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN '658397647' END COLLATE BINARY);
SELECT MAX(rt0.c1) FROM vt1, rt0 WHERE (CASE x''  WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c1 THEN '658397647' END COLLATE BINARY) ORDER BY CAST(((((rt0.c2)OR(vt1.c0)))OR(rt0.c2)) AS BLOB) DESC  NULLS FIRST, ((((rt0.c0)<>(rt0.c1))) NOT BETWEEN (rt0.c1) AND (x'489b')) ASC;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((NOT (rt0.c3 COLLATE RTRIM))) ORDER BY ((x'') BETWEEN (((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c2))) AND (json_patch(rt0.c0, rt0.c1))) DESC, (CASE rt0.c3  WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c1 END IN ()) ASC  NULLS FIRST;
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE ((((NOT (rt0.c3 COLLATE RTRIM)))AND(((CAST(rt0.c1 AS NUMERIC))||(((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1))))))) ORDER BY rt0.c3 DESC, CAST((((rt0.c3, rt0.c2))>=((rt0.c3, rt0.c1))) AS NUMERIC) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt1, rt0 WHERE (0.3139899088249193) ORDER BY (((((rt0.c1))>((rt0.c2))))IS NOT(vt1.c0 COLLATE NOCASE)) ASC  NULLS LAST, ((LIKELIHOOD(DISTINCT rt0.c0, x'3e60a5')) NOTNULL) DESC;
SELECT ALL COUNT(*) FROM vt1, rt0 WHERE (((0.3139899088249193)AND(((NULL) BETWEEN (vt1.c0) AND (CASE WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN NULL WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c1 THEN vt1.c0 END))))) ORDER BY rt0.c0 ASC LIMIT 1;
SELECT * FROM rt0, vt1 WHERE ((((LIKELY(DISTINCT rt0.c2)))>=((((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c3))))));
SELECT * FROM rt0, vt1 WHERE ((((LIKELY(DISTINCT rt0.c2)))>=((((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c3)))))) ORDER BY CAST(((rt0.c2) NOTNULL) AS TEXT) DESC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE ((((LIKELY(DISTINCT rt0.c2)))>=((((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c3))))));
SELECT * FROM rt0, vt1 WHERE ((((LIKELY(DISTINCT rt0.c2)))>=((((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c3)))))) ORDER BY CAST(((rt0.c2) NOTNULL) AS TEXT) DESC  NULLS FIRST;
SELECT * FROM rt0, vt1 WHERE (CAST((vt1.c0 IN (rt0.c2)) AS NUMERIC)) ORDER BY (((~ (rt0.c2))) NOT NULL) DESC;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST((vt1.c0 IN (rt0.c2)) AS NUMERIC)) ORDER BY (+ (((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((((rt0.c0)) NOT BETWEEN ((((rt0.c0)LIKE(rt0.c0)))) AND ((((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY (+ (((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0))));
SELECT * FROM rt0, vt1 WHERE (CAST((vt1.c0 IN (rt0.c2)) AS NUMERIC)) ORDER BY (((~ (rt0.c2))) NOT NULL) DESC;
SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST((vt1.c0 IN (rt0.c2)) AS NUMERIC)) ORDER BY (+ (((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0)))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((((rt0.c0)) NOT BETWEEN ((((rt0.c0)LIKE(rt0.c0)))) AND ((((rt0.c3) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))) ORDER BY (+ (((rt0.c2) BETWEEN (rt0.c3) AND (vt1.c0))));
SELECT * FROM vt1, rt0 WHERE (((((vt1.c0)>=(rt0.c2))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (x''))) ORDER BY (CASE rt0.c3  WHEN rt0.c0 THEN 0.8709225950019939 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 END IN ());
SELECT DISTINCT * FROM vt1, rt0 WHERE (((((((vt1.c0)>=(rt0.c2))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (x'')))AND(((((((rt0.c3, rt0.c0, rt0.c0)) NOT BETWEEN ((vt1.c0, rt0.c0, vt1.c0)) AND ((rt0.c2, rt0.c0, '-262715540'))), CASE WHEN rt0.c2 THEN rt0.c2 END))==((((((((rt0.c0)OR(rt0.c2)))AND(vt1.c0)))AND(0.022128182064032997)), (((rt0.c2))<=((NULL))))))))) ORDER BY (CASE rt0.c3  WHEN rt0.c0 THEN 0.8709225950019939 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 END IN ()) LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (CAST(rt0.c0 AS NUMERIC)) ORDER BY (CASE rt0.c3  WHEN rt0.c0 THEN 0.8709225950019939 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 END IN ()) LIMIT 3;
SELECT * FROM vt1, rt0 WHERE (((((vt1.c0)>=(rt0.c2))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (x''))) ORDER BY (CASE rt0.c3  WHEN rt0.c0 THEN 0.8709225950019939 WHEN rt0.c0 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c0 END IN ());
SELECT * FROM rt0, vt1 WHERE (x'a4') ORDER BY CAST(((rt0.c0) IS FALSE) AS INTEGER)  NULLS FIRST, ((((TRIM(vt1.c0))OR(CAST(vt1.c0 AS REAL))))AND((((rt0.c2))<=((rt0.c0))))) ASC, ((vt1.c0 COLLATE BINARY) NOT BETWEEN ('
(') AND (rt0.c2 COLLATE RTRIM)) ASC;
SELECT ALL * FROM rt0, vt1 WHERE (x'a4') ORDER BY rt0.c0 LIMIT 1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((~ (vt1.c0)) IN (rt0.c3 COLLATE BINARY))) ORDER BY rt0.c0 LIMIT 1;
SELECT * FROM rt0, vt1 WHERE (x'a4') ORDER BY CAST(((rt0.c0) IS FALSE) AS INTEGER)  NULLS FIRST, ((((TRIM(vt1.c0))OR(CAST(vt1.c0 AS REAL))))AND((((rt0.c2))<=((rt0.c0))))) ASC, ((vt1.c0 COLLATE BINARY) NOT BETWEEN ('
(') AND (rt0.c2 COLLATE RTRIM)) ASC;
SELECT ALL * FROM rt0, vt1 WHERE (x'a4') ORDER BY rt0.c0 LIMIT 1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((~ (vt1.c0)) IN (rt0.c3 COLLATE BINARY))) ORDER BY rt0.c0 LIMIT 1;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (((((((rt0.c2)OR(rt0.c0)))OR(rt0.c0)), TYPEOF(DISTINCT '2052756150')))!=((((rt0.c0)GLOB(rt0.c1)), ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1))))) WHERE (rt0.c2);
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (((((((rt0.c2)OR(rt0.c0)))OR(rt0.c0)), TYPEOF(DISTINCT '2052756150')))<>((((rt0.c0)GLOB(rt0.c1)), ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1))))) WHERE (((rt0.c2)AND((((vt1.c0, vt1.c0)) BETWEEN ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)), ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c2)))) AND (((rt0.c1 IN ()), vt1.c0 COLLATE NOCASE)))))) ORDER BY CAST(rt0.c3 AS TEXT), ((((0.8210136835178345 IN (rt0.c1))))>=((vt1.c0)))  NULLS LAST LIMIT 0X1 INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON (((((((rt0.c2)OR(rt0.c0)))OR(rt0.c0)), TYPEOF(DISTINCT '2052756150')))<>((((rt0.c0)GLOB(rt0.c1)), ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1))))) WHERE (((((((x'', rt0.c0)) NOT BETWEEN ((NULL, vt1.c0)) AND ((rt0.c2, rt0.c1)))))=((CAST(rt0.c2 AS BLOB))))) ORDER BY CAST(rt0.c3 AS TEXT), ((((0.8210136835178345 IN (rt0.c1))))>=((vt1.c0)))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (((((((rt0.c2)OR(rt0.c0)))OR(rt0.c0)), TYPEOF(DISTINCT '2052756150')))!=((((rt0.c0)GLOB(rt0.c1)), ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1))))) WHERE (rt0.c2);
SELECT ALL * FROM rt0 INNER JOIN vt1 ON (((((((rt0.c2)OR(rt0.c0)))OR(rt0.c0)), TYPEOF(DISTINCT '2052756150')))<>((((rt0.c0)GLOB(rt0.c1)), ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1))))) WHERE (((rt0.c2)AND((((vt1.c0, vt1.c0)) BETWEEN ((((rt0.c3) BETWEEN (rt0.c2) AND (rt0.c1)), ((rt0.c3) NOT BETWEEN (rt0.c2) AND (rt0.c2)))) AND (((rt0.c1 IN ()), vt1.c0 COLLATE NOCASE)))))) ORDER BY CAST(rt0.c3 AS TEXT), ((((0.8210136835178345 IN (rt0.c1))))>=((vt1.c0)))  NULLS LAST LIMIT 0X1 INTERSECT SELECT * FROM rt0 INNER JOIN vt1 ON (((((((rt0.c2)OR(rt0.c0)))OR(rt0.c0)), TYPEOF(DISTINCT '2052756150')))<>((((rt0.c0)GLOB(rt0.c1)), ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1))))) WHERE (((((((x'', rt0.c0)) NOT BETWEEN ((NULL, vt1.c0)) AND ((rt0.c2, rt0.c1)))))=((CAST(rt0.c2 AS BLOB))))) ORDER BY CAST(rt0.c3 AS TEXT), ((((0.8210136835178345 IN (rt0.c1))))>=((vt1.c0)))  NULLS LAST LIMIT 0X1;
SELECT MIN(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0)GLOB(vt1.c0)) AS TEXT)) ORDER BY x'd26a76'  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(((vt1.c0)GLOB(vt1.c0)) AS TEXT)) ORDER BY x'd26a76'  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0) NOTNULL) COLLATE BINARY) ORDER BY x'd26a76'  NULLS LAST LIMIT 0;
SELECT ALL MIN(rt0.c0) FROM rt0 WHERE (CAST(0.4678517308426259 AS TEXT)) ORDER BY ((x'58be')|('窅 #	w')) ASC  NULLS FIRST;
SELECT MIN(rt0.c0) FROM rt0 WHERE (((CAST(0.4678517308426259 AS TEXT))AND((NOT (((rt0.c3)>=(rt0.c1))))))) ORDER BY ((x'58be')|('窅 #	w')) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (CASE ((NULL)IS NOT(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN NULL WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN 0.5551252374330624 THEN vt1.c0 ELSE vt1.c0 END WHEN ((vt1.c0) IS TRUE) THEN CAST(vt1.c0 AS BLOB) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) END) ORDER BY (+ ('^&6Du%V3''')) DESC, (((vt1.c0)) BETWEEN ((((vt1.c0) NOT NULL))) AND ((vt1.c0 COLLATE RTRIM)));
SELECT ALL * FROM vt1 WHERE (((CASE ((NULL)IS NOT(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN NULL WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN 0.5551252374330624 THEN vt1.c0 ELSE vt1.c0 END WHEN ((vt1.c0) IS TRUE) THEN CAST(vt1.c0 AS BLOB) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) END)AND(((vt1.c0) BETWEEN ((~ (vt1.c0))) AND (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))IS((((vt1.c0))==((vt1.c0))))) ASC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt1 WHERE (CASE ((NULL)IS NOT(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN NULL WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN 0.5551252374330624 THEN vt1.c0 ELSE vt1.c0 END WHEN ((vt1.c0) IS TRUE) THEN CAST(vt1.c0 AS BLOB) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) END) ORDER BY (+ ('^&6Du%V3''')) DESC, (((vt1.c0)) BETWEEN ((((vt1.c0) NOT NULL))) AND ((vt1.c0 COLLATE RTRIM)));
SELECT ALL * FROM vt1 WHERE (((CASE ((NULL)IS NOT(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)) THEN NULL WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN 0.5551252374330624 THEN vt1.c0 ELSE vt1.c0 END WHEN ((vt1.c0) IS TRUE) THEN CAST(vt1.c0 AS BLOB) WHEN CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END THEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) END)AND(((vt1.c0) BETWEEN ((~ (vt1.c0))) AND (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0))))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))IS((((vt1.c0))==((vt1.c0))))) ASC  NULLS FIRST LIMIT 2;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (((rt0.c2) IS TRUE)) ORDER BY NULLIF(DISTINCT NULL, UPPER(DISTINCT rt0.c2))  NULLS LAST;
SELECT MIN(rt0.c1) FROM vt1, rt0 WHERE (((rt0.c2) IS TRUE)) ORDER BY NULLIF(DISTINCT NULL, UPPER(DISTINCT rt0.c2))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)>>(vt1.c0)) COLLATE BINARY) ORDER BY vt1.c0 ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)>>(vt1.c0)) COLLATE BINARY)AND(((((vt1.c0)||(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (CAST(vt1.c0 AS REAL)))))) ORDER BY vt1.c0 ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)>(vt1.c0))) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) AND (vt1.c0))) ORDER BY vt1.c0 ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)>>(vt1.c0)) COLLATE BINARY) ORDER BY vt1.c0 ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)>>(vt1.c0)) COLLATE BINARY)AND(((((vt1.c0)||(vt1.c0))) BETWEEN ((+ (vt1.c0))) AND (CAST(vt1.c0 AS REAL)))))) ORDER BY vt1.c0 ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)>(vt1.c0))) BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) AND (vt1.c0))) ORDER BY vt1.c0 ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1, rt0 WHERE (((SQLITE_COMPILEOPTION_USED(rt0.c1))LIKE(CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 END))) ORDER BY json(((((((((((((rt0.c0)AND(rt0.c2)))OR(rt0.c0)))AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c0))), (((((rt0.c1, rt0.c0, rt0.c2, rt0.c2, rt0.c2, vt1.c0))>=((rt0.c1, vt1.c0, vt1.c0, rt0.c3, rt0.c2, rt0.c2)))) BETWEEN (CAST(rt0.c1 AS TEXT)) AND ((- (rt0.c1)))) DESC  NULLS FIRST, rt0.c0  NULLS LAST;
SELECT ALL * FROM vt1 NOT INDEXED, rt0 WHERE (((((SQLITE_COMPILEOPTION_USED(rt0.c1))LIKE(CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND(((((rt0.c0)+(rt0.c3)))<=((- (rt0.c2))))))) ORDER BY CASE WHEN (+ (rt0.c0)) THEN ((rt0.c1)<=(vt1.c0)) WHEN CASE rt0.c2  WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 ELSE vt1.c0 END THEN (vt1.c0 IN ()) END LIMIT 0x0;
SELECT * FROM vt1, rt0 WHERE (((SQLITE_COMPILEOPTION_USED(rt0.c1))LIKE(CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 END))) ORDER BY json(((((((((((((rt0.c0)AND(rt0.c2)))OR(rt0.c0)))AND(rt0.c3)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c0))), (((((rt0.c1, rt0.c0, rt0.c2, rt0.c2, rt0.c2, vt1.c0))>=((rt0.c1, vt1.c0, vt1.c0, rt0.c3, rt0.c2, rt0.c2)))) BETWEEN (CAST(rt0.c1 AS TEXT)) AND ((- (rt0.c1)))) DESC  NULLS FIRST, rt0.c0  NULLS LAST;
SELECT ALL * FROM vt1 NOT INDEXED, rt0 WHERE (((((SQLITE_COMPILEOPTION_USED(rt0.c1))LIKE(CASE rt0.c0  WHEN vt1.c0 THEN vt1.c0 END)))AND(((((rt0.c0)+(rt0.c3)))<=((- (rt0.c2))))))) ORDER BY CASE WHEN (+ (rt0.c0)) THEN ((rt0.c1)<=(vt1.c0)) WHEN CASE rt0.c2  WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 ELSE vt1.c0 END THEN (vt1.c0 IN ()) END LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (vt1.c0 COLLATE NOCASE COLLATE NOCASE) ORDER BY (((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))))LIKE(CASE WHEN vt1.c0 THEN vt1.c0 END)), vt1.c0, 'Se86' ASC;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE COLLATE NOCASE)AND(NULL COLLATE NOCASE))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))) COLLATE RTRIM COLLATE BINARY  NULLS FIRST, (NOT ((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))) ASC  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (json_quote((- (vt1.c0)))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))) COLLATE RTRIM COLLATE BINARY  NULLS FIRST, (NOT ((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (vt1.c0 COLLATE NOCASE COLLATE NOCASE) ORDER BY (((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0))))LIKE(CASE WHEN vt1.c0 THEN vt1.c0 END)), vt1.c0, 'Se86' ASC;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE COLLATE NOCASE)AND(NULL COLLATE NOCASE))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))) COLLATE RTRIM COLLATE BINARY  NULLS FIRST, (NOT ((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))) ASC  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (json_quote((- (vt1.c0)))) ORDER BY (((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0))) COLLATE RTRIM COLLATE BINARY  NULLS FIRST, (NOT ((((vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0))))) ASC  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0))) NOT NULL)) ORDER BY vt1.c0 ASC, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) IS TRUE) ASC;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0))) NOT NULL)) ORDER BY vt1.c0 ASC, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) IS TRUE) ASC INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (CAST(vt1.c0 COLLATE NOCASE AS INTEGER)) ORDER BY vt1.c0 ASC, ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END) IS TRUE) ASC;
SELECT * FROM vt1 WHERE ((((vt1.c0))<=((vt1.c0))) COLLATE RTRIM) ORDER BY IFNULL((- (vt1.c0)), 0.5329164749227805) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0))<=((vt1.c0))) COLLATE RTRIM) ORDER BY ('830243475' IN (((vt1.c0)&(vt1.c0)))) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULLIF(DISTINCT (NULL IN ()), vt1.c0 COLLATE RTRIM)) ORDER BY ('830243475' IN (((vt1.c0)&(vt1.c0)))) ASC LIMIT 0X0;
SELECT * FROM vt1 WHERE ((((vt1.c0))<=((vt1.c0))) COLLATE RTRIM) ORDER BY IFNULL((- (vt1.c0)), 0.5329164749227805) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0))<=((vt1.c0))) COLLATE RTRIM) ORDER BY ('830243475' IN (((vt1.c0)&(vt1.c0)))) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULLIF(DISTINCT (NULL IN ()), vt1.c0 COLLATE RTRIM)) ORDER BY ('830243475' IN (((vt1.c0)&(vt1.c0)))) ASC LIMIT 0X0;
SELECT * FROM rt0, vt1 WHERE (CAST(rt0.c1 AS REAL));
SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(rt0.c1 AS REAL)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((~ (((rt0.c0)IS(vt1.c0))))) LIMIT 0;
SELECT * FROM rt0, vt1 WHERE (CAST(rt0.c1 AS REAL));
SELECT DISTINCT * FROM rt0, vt1 WHERE (CAST(rt0.c1 AS REAL)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((~ (((rt0.c0)IS(vt1.c0))))) LIMIT 0;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) IN ())) ORDER BY CAST(((vt1.c0) NOT BETWEEN (x'2f') AND (vt1.c0)) AS REAL) ASC;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) IN ()))AND((((x'abf282a3', vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((1343395341, ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)), (vt1.c0 IN (vt1.c0)), ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)), x'', (- (vt1.c0)), LENGTH(vt1.c0))))))) ORDER BY CAST(((vt1.c0) NOT BETWEEN (x'2f') AND (vt1.c0)) AS REAL) ASC;
SELECT COUNT(*) FROM vt1 WHERE (CAST(2.65752894E8 AS BLOB));
SELECT ALL COUNT(*) FROM vt1 WHERE (CAST(2.65752894E8 AS BLOB));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((NOT ((- (rt0.c1))))) ORDER BY (- ((((rt0.c0, rt0.c2))<>((rt0.c0, rt0.c2))))) DESC, (+ ((('265752894') NOT NULL)))  NULLS FIRST, CASE (((rt0.c0, rt0.c1, rt0.c2, rt0.c0))<((rt0.c3, rt0.c2, rt0.c3, rt0.c0)))  WHEN ((rt0.c1)||(rt0.c2)) THEN CAST(rt0.c3 AS TEXT) WHEN (NOT (rt0.c2)) THEN '-1397856114' WHEN ((rt0.c2)||(rt0.c1)) THEN (~ (rt0.c1)) END ASC;
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE ((NOT ((- (rt0.c1))))) ORDER BY CASE WHEN ((rt0.c0) ISNULL) THEN rt0.c1 WHEN NULL THEN CAST(rt0.c1 AS BLOB) END DESC, ((rt0.c2) ISNULL) COLLATE RTRIM DESC INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (0.16795949029443713) ORDER BY CASE WHEN ((rt0.c0) ISNULL) THEN rt0.c1 WHEN NULL THEN CAST(rt0.c1 AS BLOB) END DESC, ((rt0.c2) ISNULL) COLLATE RTRIM DESC;
SELECT ALL * FROM vt1 WHERE ((x'' IN ((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((x'' IN ((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) ORDER BY ((((((((vt1.c0)AND(x'dd')))AND(vt1.c0)))AND(vt1.c0)))*(vt1.c0 COLLATE NOCASE))  NULLS FIRST, (- ('%y''cf'));
SELECT ALL * FROM vt1 WHERE ((x'' IN ((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((x'' IN ((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0)))))) ORDER BY ((((((((vt1.c0)AND(x'dd')))AND(vt1.c0)))AND(vt1.c0)))*(vt1.c0 COLLATE NOCASE))  NULLS FIRST, (- ('%y''cf'));
SELECT ALL * FROM rt0, vt1 WHERE ((NOT (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY ((rt0.c1 COLLATE BINARY) ISNULL) ASC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0)))))AND((+ (((rt0.c2) NOT BETWEEN ('') AND (rt0.c0))))))) ORDER BY vt1.c0, (((x'72e895', rt0.c3)) NOT BETWEEN ((((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c1)), (((rt0.c1, rt0.c3, rt0.c3))=((rt0.c0, rt0.c1, rt0.c2))))) AND ((((rt0.c3)||(rt0.c2)), CASE vt1.c0  WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END))), CASE WHEN ((rt0.c3)<=(rt0.c3)) THEN CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 END WHEN ((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c2)) THEN ((rt0.c3)>=(rt0.c2)) WHEN json_array(rt0.c2, rt0.c0, 9.53433735E8, rt0.c1, rt0.c3) THEN ((((((((((rt0.c3)AND(rt0.c0)))OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))AND(vt1.c0)) ELSE IFNULL(rt0.c3, rt0.c0) END DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((vt1.c0)-(rt0.c3)) COLLATE NOCASE) ORDER BY vt1.c0, (((x'72e895', rt0.c3)) NOT BETWEEN ((((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c1)), (((rt0.c1, rt0.c3, rt0.c3))==((rt0.c0, rt0.c1, rt0.c2))))) AND ((((rt0.c3)||(rt0.c2)), CASE vt1.c0  WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END))), CASE WHEN ((rt0.c3)<=(rt0.c3)) THEN CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 END WHEN ((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c2)) THEN ((rt0.c3)>=(rt0.c2)) WHEN json_array(rt0.c2, rt0.c0, 9.53433735E8, rt0.c1, rt0.c3) THEN ((((((((((rt0.c3)AND(rt0.c0)))OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))AND(vt1.c0)) ELSE IFNULL(rt0.c3, rt0.c0) END DESC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE ((NOT (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0))))) ORDER BY ((rt0.c1 COLLATE BINARY) ISNULL) ASC  NULLS LAST;
SELECT ALL * FROM rt0, vt1 WHERE ((((NOT (((vt1.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0)))))AND((+ (((rt0.c2) NOT BETWEEN ('') AND (rt0.c0))))))) ORDER BY vt1.c0, (((x'72e895', rt0.c3)) NOT BETWEEN ((((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c1)), (((rt0.c1, rt0.c3, rt0.c3))=((rt0.c0, rt0.c1, rt0.c2))))) AND ((((rt0.c3)||(rt0.c2)), CASE vt1.c0  WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END))), CASE WHEN ((rt0.c3)<=(rt0.c3)) THEN CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 END WHEN ((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c2)) THEN ((rt0.c3)>=(rt0.c2)) WHEN json_array(rt0.c2, rt0.c0, 9.53433735E8, rt0.c1, rt0.c3) THEN ((((((((((rt0.c3)AND(rt0.c0)))OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))AND(vt1.c0)) ELSE IFNULL(rt0.c3, rt0.c0) END DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM rt0, vt1 WHERE (((vt1.c0)-(rt0.c3)) COLLATE NOCASE) ORDER BY vt1.c0, (((x'72e895', rt0.c3)) NOT BETWEEN ((((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c1)), (((rt0.c1, rt0.c3, rt0.c3))==((rt0.c0, rt0.c1, rt0.c2))))) AND ((((rt0.c3)||(rt0.c2)), CASE vt1.c0  WHEN rt0.c3 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 END))), CASE WHEN ((rt0.c3)<=(rt0.c3)) THEN CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c1 END WHEN ((vt1.c0) BETWEEN (rt0.c2) AND (rt0.c2)) THEN ((rt0.c3)>=(rt0.c2)) WHEN json_array(rt0.c2, rt0.c0, 9.53433735E8, rt0.c1, rt0.c3) THEN ((((((((((rt0.c3)AND(rt0.c0)))OR(rt0.c1)))AND(vt1.c0)))OR(rt0.c2)))AND(vt1.c0)) ELSE IFNULL(rt0.c3, rt0.c0) END DESC  NULLS FIRST LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN rt0.c2 COLLATE NOCASE THEN ((vt1.c0) BETWEEN (x'ec') AND (rt0.c2)) ELSE (((rt0.c1))>=((rt0.c0))) END) ORDER BY TRIM(DISTINCT (rt0.c3 IN (x'20d5a9')), (((rt0.c3, vt1.c0, rt0.c3, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c0, rt0.c3, rt0.c3)) AND ((rt0.c2, rt0.c0, rt0.c1, rt0.c1)))) ASC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (((CASE WHEN rt0.c2 COLLATE NOCASE THEN ((vt1.c0) BETWEEN (x'ec') AND (rt0.c2)) ELSE (((rt0.c1))==((rt0.c0))) END)AND(((((vt1.c0) BETWEEN (rt0.c1) AND (vt1.c0)))OR(((rt0.c1)AND(vt1.c0))))))) ORDER BY LIKELIHOOD((rt0.c1 IN (rt0.c1)), (~ (rt0.c3))) ASC  NULLS LAST;
SELECT * FROM vt1, rt0 WHERE (CASE WHEN rt0.c2 COLLATE NOCASE THEN ((vt1.c0) BETWEEN (x'ec') AND (rt0.c2)) ELSE (((rt0.c1))>=((rt0.c0))) END) ORDER BY TRIM(DISTINCT (rt0.c3 IN (x'20d5a9')), (((rt0.c3, vt1.c0, rt0.c3, rt0.c3)) NOT BETWEEN ((rt0.c0, rt0.c0, rt0.c3, rt0.c3)) AND ((rt0.c2, rt0.c0, rt0.c1, rt0.c1)))) ASC  NULLS FIRST;
SELECT * FROM vt1, rt0 WHERE (((CASE WHEN rt0.c2 COLLATE NOCASE THEN ((vt1.c0) BETWEEN (x'ec') AND (rt0.c2)) ELSE (((rt0.c1))==((rt0.c0))) END)AND(((((vt1.c0) BETWEEN (rt0.c1) AND (vt1.c0)))OR(((rt0.c1)AND(vt1.c0))))))) ORDER BY LIKELIHOOD((rt0.c1 IN (rt0.c1)), (~ (rt0.c3))) ASC  NULLS LAST;
SELECT * FROM rt0 WHERE (((rt0.c3)<((rt0.c0 IN ())))) ORDER BY ((- (rt0.c0)) IN (((rt0.c2)==(rt0.c3)))) DESC, CASE ((rt0.c0)IS NOT(rt0.c2))  WHEN 0.556834282634589 THEN (rt0.c0 IN (0.1353578034648405, rt0.c3)) WHEN ((rt0.c0)>=(rt0.c0)) THEN ((rt0.c2) NOTNULL) WHEN ((rt0.c1)%(rt0.c0)) THEN (NULL IN (rt0.c0, rt0.c3)) ELSE (~ (rt0.c1)) END  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c3)<((rt0.c0 IN ())))) ORDER BY ((- (rt0.c0)) IN (((rt0.c2)=(rt0.c3)))) DESC, CASE ((rt0.c0)IS NOT(rt0.c2))  WHEN 0.556834282634589 THEN (rt0.c0 IN (0.1353578034648405, rt0.c3)) WHEN ((rt0.c0)>=(rt0.c0)) THEN ((rt0.c2) NOTNULL) WHEN ((rt0.c1)%(rt0.c0)) THEN (NULL IN (rt0.c0, rt0.c3)) ELSE (~ (rt0.c1)) END  NULLS LAST LIMIT 0x0;
SELECT * FROM rt0 WHERE (((rt0.c3)<((rt0.c0 IN ())))) ORDER BY ((- (rt0.c0)) IN (((rt0.c2)==(rt0.c3)))) DESC, CASE ((rt0.c0)IS NOT(rt0.c2))  WHEN 0.556834282634589 THEN (rt0.c0 IN (0.1353578034648405, rt0.c3)) WHEN ((rt0.c0)>=(rt0.c0)) THEN ((rt0.c2) NOTNULL) WHEN ((rt0.c1)%(rt0.c0)) THEN (NULL IN (rt0.c0, rt0.c3)) ELSE (~ (rt0.c1)) END  NULLS LAST;
SELECT DISTINCT * FROM rt0 WHERE (((rt0.c3)<((rt0.c0 IN ())))) ORDER BY ((- (rt0.c0)) IN (((rt0.c2)=(rt0.c3)))) DESC, CASE ((rt0.c0)IS NOT(rt0.c2))  WHEN 0.556834282634589 THEN (rt0.c0 IN (0.1353578034648405, rt0.c3)) WHEN ((rt0.c0)>=(rt0.c0)) THEN ((rt0.c2) NOTNULL) WHEN ((rt0.c1)%(rt0.c0)) THEN (NULL IN (rt0.c0, rt0.c3)) ELSE (~ (rt0.c1)) END  NULLS LAST LIMIT 0x0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT BETWEEN (CAST(vt1.c0 AS REAL)) AND ((vt1.c0 IN ()))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END) NOT BETWEEN (CAST(vt1.c0 AS REAL)) AND ((vt1.c0 IN ()))))AND(MAX(((vt1.c0)/(vt1.c0)), CAST(vt1.c0 AS REAL))))) INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN ((vt1.c0)<<(vt1.c0)) THEN CHAR(vt1.c0, vt1.c0) END);
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0)))) ISNULL)) ORDER BY '886179703'  NULLS LAST, ((CAST(x'8d132e' AS INTEGER)) IS FALSE) DESC  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0))<((vt1.c0, vt1.c0)))) ISNULL)) ORDER BY '886179703'  NULLS LAST, ((CAST(x'8d132e' AS INTEGER)) IS FALSE) DESC  NULLS LAST;
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (-732813397);
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (((0xffffffffd45227ab)AND((((rt0.c3, NULL, vt1.c0, vt1.c0, rt0.c0, rt0.c1)) BETWEEN ((ABS(DISTINCT rt0.c1), ((rt0.c1) IS FALSE), ((((((x'46')OR(vt1.c0)))OR(rt0.c0)))OR(rt0.c0)), rt0.c2 COLLATE RTRIM, ((rt0.c1)%(rt0.c2)), INSTR(rt0.c0, vt1.c0))) AND ((rt0.c0 COLLATE NOCASE, ((((vt1.c0)AND(rt0.c2)))OR(vt1.c0)), rt0.c2 COLLATE RTRIM, (('\!2gC') ISNULL), (rt0.c1 IN (vt1.c0)), CAST(NULL AS INTEGER))))))) ORDER BY ((CAST(vt1.c0 AS NUMERIC))&((((rt0.c3)) NOT BETWEEN ((rt0.c3)) AND ((x'9fe275fd'))))), CASE ((rt0.c2)<=(rt0.c1))  WHEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c3 END THEN json_valid(x'a182e57643') WHEN UNLIKELY(rt0.c2) THEN (vt1.c0 IN ()) WHEN (((rt0.c2)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))) THEN LOWER(DISTINCT rt0.c2) END DESC LIMIT 1;
SELECT ALL * FROM rt0, vt1 WHERE ((rt0.c2 COLLATE RTRIM IN ()));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2 COLLATE RTRIM IN ()))AND(rt0.c1 COLLATE NOCASE))) LIMIT 0x1 INTERSECT SELECT * FROM rt0, vt1 WHERE ((rt0.c3 IN (rt0.c1)) COLLATE RTRIM) LIMIT 0x1;
SELECT ALL * FROM rt0, vt1 WHERE ((rt0.c2 COLLATE RTRIM IN ()));
SELECT ALL * FROM rt0, vt1 WHERE ((((rt0.c2 COLLATE RTRIM IN ()))AND(rt0.c1 COLLATE NOCASE))) LIMIT 0x1 INTERSECT SELECT * FROM rt0, vt1 WHERE ((rt0.c3 IN (rt0.c1)) COLLATE RTRIM) LIMIT 0x1;
SELECT ALL * FROM rt0 WHERE ((((rt0.c2 IN ()))|(rt0.c0))) ORDER BY ((DATETIME(rt0.c2, rt0.c2, rt0.c1, rt0.c1)) IS FALSE)  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c2 IN ()))|(rt0.c0))) ORDER BY ((DATETIME(rt0.c2, rt0.c2, rt0.c1, rt0.c1)) IS FALSE)  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM rt0 WHERE ((((rt0.c2 IN ()))|(rt0.c0))) ORDER BY ((DATETIME(rt0.c2, rt0.c2, rt0.c1, rt0.c1)) IS FALSE)  NULLS FIRST;
SELECT DISTINCT * FROM rt0 WHERE ((((rt0.c2 IN ()))|(rt0.c0))) ORDER BY ((DATETIME(rt0.c2, rt0.c2, rt0.c1, rt0.c1)) IS FALSE)  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((~ ((((rt0.c3, vt1.c0, x'', vt1.c0, rt0.c3))==((rt0.c0, rt0.c1, rt0.c0, rt0.c0, rt0.c2)))))) ORDER BY ((((((NULL, rt0.c0))>=(('A+O27Y', rt0.c1)))))>=((CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN NULL THEN vt1.c0 END))) ASC;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((((~ ((((rt0.c3, vt1.c0, x'', vt1.c0, rt0.c3))=((rt0.c0, rt0.c1, rt0.c0, rt0.c0, rt0.c2))))))AND((((CASE WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, LIKE(rt0.c3, rt0.c0), '0fs&GZB', (((rt0.c2, rt0.c3, rt0.c2, rt0.c0, rt0.c3))==((rt0.c3, rt0.c2, vt1.c0, vt1.c0, rt0.c1)))))>((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END, 'W莨>BU', (~ (rt0.c0)), CAST(rt0.c2 AS NUMERIC))))))) ORDER BY ((((((NULL, rt0.c0))>=(('A+O27Y', rt0.c1)))))>=((CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN NULL THEN vt1.c0 END))) ASC;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((~ ((((rt0.c3, vt1.c0, x'', vt1.c0, rt0.c3))==((rt0.c0, rt0.c1, rt0.c0, rt0.c0, rt0.c2)))))) ORDER BY ((((((NULL, rt0.c0))>=(('A+O27Y', rt0.c1)))))>=((CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN NULL THEN vt1.c0 END))) ASC;
SELECT ALL * FROM vt1 NATURAL JOIN rt0 WHERE ((((~ ((((rt0.c3, vt1.c0, x'', vt1.c0, rt0.c3))=((rt0.c0, rt0.c1, rt0.c0, rt0.c0, rt0.c2))))))AND((((CASE WHEN rt0.c3 THEN rt0.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, LIKE(rt0.c3, rt0.c0), '0fs&GZB', (((rt0.c2, rt0.c3, rt0.c2, rt0.c0, rt0.c3))==((rt0.c3, rt0.c2, vt1.c0, vt1.c0, rt0.c1)))))>((CASE rt0.c1  WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END, 'W莨>BU', (~ (rt0.c0)), CAST(rt0.c2 AS NUMERIC))))))) ORDER BY ((((((NULL, rt0.c0))>=(('A+O27Y', rt0.c1)))))>=((CASE WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN NULL THEN vt1.c0 END))) ASC;
SELECT COUNT(*) FROM rt0, vt1 WHERE (((DATETIME(rt0.c1, rt0.c2, rt0.c0, rt0.c3, vt1.c0)) ISNULL));
SELECT ALL COUNT(*) FROM rt0, vt1 WHERE (((DATETIME(rt0.c1, rt0.c2, rt0.c0, rt0.c3, vt1.c0)) ISNULL)) INTERSECT SELECT ALL COUNT(*) FROM rt0, vt1 WHERE ((+ (((rt0.c0) IS FALSE))));
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (((CASE WHEN 0.28860935593752846 THEN rt0.c2 WHEN x'' THEN '0.22958343493802713' ELSE rt0.c2 END) BETWEEN ((rt0.c1 IN (rt0.c1))) AND (((rt0.c1)GLOB(vt1.c0))))) ORDER BY UNICODE(((x'29') ISNULL)) ASC, 0X1e8b0361 DESC;
SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE (((CASE WHEN 0.28860935593752846 THEN rt0.c2 WHEN x'' THEN '0.22958343493802713' ELSE rt0.c2 END) BETWEEN ((rt0.c1 IN (rt0.c1))) AND (((rt0.c1)GLOB(vt1.c0))))) ORDER BY CASE ((rt0.c0)>(rt0.c1))  WHEN '' THEN CAST(rt0.c0 AS BLOB) WHEN '426117718' THEN x'bc3e' END  NULLS FIRST LIMIT 0x1 INTERSECT SELECT ALL MAX(rt0.c2) FROM rt0, vt1 WHERE ('765064518') ORDER BY CASE ((rt0.c0)>(rt0.c1))  WHEN '' THEN CAST(rt0.c0 AS BLOB) WHEN '426117718' THEN x'bc3e' END  NULLS FIRST LIMIT 1;
SELECT * FROM rt0, vt1 WHERE (CASE vt1.c0  WHEN rt0.c2 THEN rt0.c0 END COLLATE NOCASE);
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE vt1.c0  WHEN rt0.c2 THEN rt0.c0 END COLLATE NOCASE)AND((+ (((vt1.c0)%(NULL))))))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((('-38025108') IS FALSE));
SELECT * FROM rt0, vt1 WHERE (CASE vt1.c0  WHEN rt0.c2 THEN rt0.c0 END COLLATE NOCASE);
SELECT DISTINCT * FROM rt0, vt1 WHERE (((CASE vt1.c0  WHEN rt0.c2 THEN rt0.c0 END COLLATE NOCASE)AND((+ (((vt1.c0)%(NULL))))))) INTERSECT SELECT DISTINCT * FROM rt0, vt1 WHERE ((('-38025108') IS FALSE));
SELECT ALL * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY CASE rt0.c0  WHEN CASE WHEN rt0.c2 THEN rt0.c0 END THEN rt0.c2 ELSE IFNULL(DISTINCT rt0.c0, vt1.c0) END;
SELECT ALL * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY json_array((rt0.c1 IN (rt0.c2)), ((rt0.c0) NOT NULL), vt1.c0 COLLATE NOCASE);
SELECT ALL * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY CASE rt0.c0  WHEN CASE WHEN rt0.c2 THEN rt0.c0 END THEN rt0.c2 ELSE IFNULL(DISTINCT rt0.c0, vt1.c0) END;
SELECT ALL * FROM vt1, rt0 WHERE (vt1.c0) ORDER BY json_array((rt0.c1 IN (rt0.c2)), ((rt0.c0) NOT NULL), vt1.c0 COLLATE NOCASE);
SELECT * FROM rt0, vt1 WHERE (((((rt0.c1)&(rt0.c1)))>=(((rt0.c1)+(rt0.c2))))) ORDER BY ((((rt0.c1) NOTNULL)) BETWEEN (((((((rt0.c0)AND(rt0.c0)))OR(rt0.c1)))OR('7+h?8?'))) AND (rt0.c2 COLLATE BINARY)), CAST(0.8938055664288324 AS TEXT) COLLATE NOCASE DESC;
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c1)&(rt0.c1)))>(((rt0.c1)+(rt0.c2)))))AND((((vt1.c0)) NOT BETWEEN ((rt0.c0 COLLATE BINARY)) AND (('')))))) ORDER BY ((SQLITE_COMPILEOPTION_USED(rt0.c2)) BETWEEN ((~ (rt0.c2))) AND (CAST(rt0.c3 AS INTEGER))), (NOT ((NOT (NULL)))) DESC, ((CAST(rt0.c0 AS REAL))>=(((rt0.c0)<(rt0.c1))));
SELECT * FROM rt0, vt1 WHERE (((((rt0.c1)&(rt0.c1)))>=(((rt0.c1)+(rt0.c2))))) ORDER BY ((((rt0.c1) NOTNULL)) BETWEEN (((((((rt0.c0)AND(rt0.c0)))OR(rt0.c1)))OR('7+h?8?'))) AND (rt0.c2 COLLATE BINARY)), CAST(0.8938055664288324 AS TEXT) COLLATE NOCASE DESC;
SELECT ALL * FROM rt0, vt1 WHERE (((((((rt0.c1)&(rt0.c1)))>(((rt0.c1)+(rt0.c2)))))AND((((vt1.c0)) NOT BETWEEN ((rt0.c0 COLLATE BINARY)) AND (('')))))) ORDER BY ((SQLITE_COMPILEOPTION_USED(rt0.c2)) BETWEEN ((~ (rt0.c2))) AND (CAST(rt0.c3 AS INTEGER))), (NOT ((NOT (NULL)))) DESC, ((CAST(rt0.c0 AS REAL))>=(((rt0.c0)<(rt0.c1))));
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0)))) NOT NULL));
SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0)))) NOT NULL))AND(('3' IN (UPPER(vt1.c0)))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0)) BETWEEN (((~ (vt1.c0)))) AND ((CAST(vt1.c0 AS INTEGER))))) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0)))) NOT NULL));
SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0)))) NOT NULL))AND(('3' IN (UPPER(vt1.c0)))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0)) BETWEEN (((~ (vt1.c0)))) AND ((CAST(vt1.c0 AS INTEGER))))) LIMIT 0x0;
SELECT ALL * FROM vt1, rt0 WHERE ((CAST(x'' AS TEXT) IN ())) ORDER BY (rt0.c2 COLLATE NOCASE IN ()) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1, rt0 WHERE ((((CAST(x'' AS TEXT) IN ()))AND(((UPPER(DISTINCT rt0.c3)) ISNULL)))) ORDER BY (rt0.c2 COLLATE NOCASE IN ()) DESC  NULLS LAST;
SELECT ALL * FROM vt1, rt0 WHERE ((CAST(x'' AS TEXT) IN ())) ORDER BY (rt0.c2 COLLATE NOCASE IN ()) DESC  NULLS LAST;
SELECT * FROM rt0 WHERE ((CAST(rt0.c3 AS REAL) IN ()));
SELECT ALL * FROM rt0 WHERE ((((CAST(rt0.c3 AS REAL) IN ()))AND(((rt0.c0) NOT BETWEEN ((((rt0.c1)) BETWEEN ((rt0.c0)) AND (('z')))) AND (CAST(rt0.c2 AS BLOB)))))) ORDER BY (~ (rt0.c1)) LIMIT 2 INTERSECT SELECT ALL * FROM rt0 WHERE (ABS(DISTINCT ((((((((rt0.c2)AND('')))AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c2)))) ORDER BY (~ (rt0.c1)) LIMIT 2;
SELECT * FROM rt0 WHERE ((CAST(rt0.c3 AS REAL) IN ()));
SELECT ALL * FROM rt0 WHERE ((((CAST(rt0.c3 AS REAL) IN ()))AND(((rt0.c0) NOT BETWEEN ((((rt0.c1)) BETWEEN ((rt0.c0)) AND (('z')))) AND (CAST(rt0.c2 AS BLOB)))))) ORDER BY (~ (rt0.c1)) LIMIT 2 INTERSECT SELECT ALL * FROM rt0 WHERE (ABS(DISTINCT ((((((((rt0.c2)AND('')))AND(rt0.c1)))AND(rt0.c2)))AND(rt0.c2)))) ORDER BY (~ (rt0.c1)) LIMIT 2;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ('0.540962669160635') ORDER BY NULL ASC  NULLS FIRST, ((vt1.c0) NOT NULL) COLLATE BINARY ASC;
SELECT MAX(vt1.c0) FROM vt1 WHERE ('0.540962669160635') ORDER BY NULL ASC  NULLS FIRST, ((vt1.c0) NOT NULL) COLLATE BINARY ASC;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (json_extract(rt0.c0, rt0.c2) COLLATE BINARY);
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (((json_extract(rt0.c0, rt0.c2) COLLATE BINARY)AND(((((((((((rt0.c3)OR(rt0.c0)))AND(rt0.c0)))OR(vt1.c0)))OR(rt0.c1)))GLOB(CAST(rt0.c1 AS TEXT)))))) LIMIT 1;
SELECT * FROM vt1, rt0 WHERE (((((vt1.c0 IN (rt0.c2, rt0.c1)), (rt0.c1 IN (vt1.c0, rt0.c2))))>=(((((vt1.c0, rt0.c3, NULL))<=((rt0.c0, rt0.c3, vt1.c0))), (((rt0.c3))!=((vt1.c0)))))));
SELECT ALL * FROM vt1, rt0 WHERE (((((((vt1.c0 IN (rt0.c2, rt0.c1)), (rt0.c1 IN (vt1.c0, rt0.c2))))>(((((vt1.c0, rt0.c3, NULL))<=((rt0.c0, rt0.c3, vt1.c0))), (((rt0.c3))>((vt1.c0)))))))AND(((rt0.c3) NOT BETWEEN (((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c2))) AND (((x'')>(rt0.c3))))))) LIMIT 1 INTERSECT SELECT * FROM vt1, rt0 WHERE ((((((rt0.c0, vt1.c0))<=((vt1.c0, rt0.c3)))) NOT BETWEEN ((((((((((((((('')OR(vt1.c0)))OR(rt0.c0)))AND(x'b7')))OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)))OR(rt0.c0))) AND ((('꣖䌫')>(vt1.c0))))) LIMIT 0X1;
SELECT * FROM vt1, rt0 WHERE (((((vt1.c0 IN (rt0.c2, rt0.c1)), (rt0.c1 IN (vt1.c0, rt0.c2))))>=(((((vt1.c0, rt0.c3, NULL))<=((rt0.c0, rt0.c3, vt1.c0))), (((rt0.c3))!=((vt1.c0)))))));
SELECT ALL * FROM vt1, rt0 WHERE (((((((vt1.c0 IN (rt0.c2, rt0.c1)), (rt0.c1 IN (vt1.c0, rt0.c2))))>(((((vt1.c0, rt0.c3, NULL))<=((rt0.c0, rt0.c3, vt1.c0))), (((rt0.c3))>((vt1.c0)))))))AND(((rt0.c3) NOT BETWEEN (((rt0.c3) BETWEEN (vt1.c0) AND (rt0.c2))) AND (((x'')>(rt0.c3))))))) LIMIT 1 INTERSECT SELECT * FROM vt1, rt0 WHERE ((((((rt0.c0, vt1.c0))<=((vt1.c0, rt0.c3)))) NOT BETWEEN ((((((((((((((('')OR(vt1.c0)))OR(rt0.c0)))AND(x'b7')))OR(rt0.c0)))AND(rt0.c1)))AND(rt0.c1)))OR(rt0.c0))) AND ((('꣖䌫')>(vt1.c0))))) LIMIT 0X1;
SELECT * FROM rt0 WHERE (CASE WHEN (rt0.c1 IN ()) THEN (~ (rt0.c0)) ELSE CAST(rt0.c1 AS INTEGER) END) ORDER BY NULL ASC;
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN (rt0.c1 IN ()) THEN (~ (rt0.c0)) ELSE CAST(rt0.c1 AS INTEGER) END)AND(((rt0.c2)||(rt0.c3)) COLLATE BINARY))) ORDER BY NULL ASC;
SELECT * FROM rt0 WHERE (CASE WHEN (rt0.c1 IN ()) THEN (~ (rt0.c0)) ELSE CAST(rt0.c1 AS INTEGER) END) ORDER BY NULL ASC;
SELECT DISTINCT * FROM rt0 WHERE (((CASE WHEN (rt0.c1 IN ()) THEN (~ (rt0.c0)) ELSE CAST(rt0.c1 AS INTEGER) END)AND(((rt0.c2)||(rt0.c3)) COLLATE BINARY))) ORDER BY NULL ASC;
SELECT COUNT(*) FROM rt0, vt1 WHERE ((NOT (IFNULL(rt0.c3, rt0.c3)))) ORDER BY ((x'')<>(((rt0.c3)||(rt0.c0)))), ((((((rt0.c1)*('-649048037')))AND('1422900229')))OR(rt0.c2 COLLATE BINARY)), (((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c2, vt1.c0)) AND ((vt1.c0, rt0.c1))) COLLATE RTRIM  NULLS FIRST;
SELECT COUNT(*) FROM rt0 NOT INDEXED, vt1 WHERE ((NOT (IFNULL(rt0.c3, rt0.c3)))) ORDER BY ((x'')<>(((rt0.c3)||(rt0.c0)))), ((((((rt0.c1)*('-649048037')))AND('1422900229')))OR(rt0.c2 COLLATE BINARY)), (((rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c2, vt1.c0)) AND ((vt1.c0, rt0.c1))) COLLATE RTRIM  NULLS FIRST LIMIT 2;
SELECT MAX(rt0.c1) FROM vt1, rt0 WHERE ((((vt1.c0)) BETWEEN ((((rt0.c1)LIKE(rt0.c2)))) AND ((((rt0.c3)>>(rt0.c3)))))) ORDER BY (~ (rt0.c0)) COLLATE BINARY ASC  NULLS FIRST;
SELECT MAX(rt0.c1) FROM vt1, rt0 WHERE ((((vt1.c0)) BETWEEN ((((rt0.c1)LIKE(rt0.c2)))) AND ((((rt0.c3)>>(rt0.c3)))))) ORDER BY (~ (rt0.c0)) COLLATE BINARY ASC  NULLS FIRST INTERSECT SELECT ALL MAX(rt0.c1) FROM vt1, rt0 WHERE (((rt0.c0 COLLATE BINARY) BETWEEN (((rt0.c0)>(rt0.c3))) AND (((rt0.c1)IS(rt0.c0))))) ORDER BY (~ (rt0.c0)) COLLATE BINARY ASC  NULLS FIRST;
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (UPPER(rt0.c1)) ORDER BY CASE vt1.c0  WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c3 END COLLATE BINARY DESC;
SELECT MAX(rt0.c3) FROM vt1, rt0 WHERE (((UPPER(rt0.c1))AND((vt1.c0 IN (vt1.c0, ((vt1.c0) ISNULL)))))) ORDER BY CASE vt1.c0  WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN 'e}' ELSE rt0.c3 END COLLATE BINARY COLLATE BINARY  NULLS FIRST, ((((((((rt0.c2)GLOB(rt0.c1)))OR(((rt0.c2) NOT NULL))))AND(((rt0.c3)AND(rt0.c1)))))OR((rt0.c2 IN ()))) DESC, rt0.c2 ASC, vt1.c0 INTERSECT SELECT ALL MAX(rt0.c3) FROM vt1, rt0 WHERE (((((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c2))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (CAST(rt0.c0 AS NUMERIC)))) ORDER BY CASE vt1.c0  WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c3 THEN rt0.c0 WHEN rt0.c2 THEN 'e}' ELSE rt0.c3 END COLLATE BINARY COLLATE BINARY  NULLS FIRST, ((((((((rt0.c2)GLOB(rt0.c1)))OR(((rt0.c2) NOT NULL))))AND(((rt0.c3)AND(rt0.c1)))))OR((rt0.c2 IN ()))) DESC, rt0.c2 ASC, vt1.c0;
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE ((((rt0.c0)&(vt1.c0)) IN ())) ORDER BY CAST(TIME(vt1.c0, '0.5418603602380118', vt1.c0, rt0.c1) AS INTEGER) DESC  NULLS LAST;
SELECT DISTINCT MIN(rt0.c2) FROM vt1, rt0 WHERE ((((((rt0.c0)&(vt1.c0)) IN ()))AND(((((0X4d74119c) IS FALSE))||(CAST(rt0.c0 AS INTEGER)))))) ORDER BY CAST(TIME(vt1.c0, '0.5418603602380118', vt1.c0, rt0.c1) AS INTEGER) DESC  NULLS LAST;
SELECT ALL * FROM rt0 WHERE ((((0.28009420646292604)) NOT BETWEEN (((((rt0.c1, rt0.c1, rt0.c3))>((rt0.c2, rt0.c2, rt0.c1))))) AND ((HEX(DISTINCT rt0.c2)))));
SELECT DISTINCT * FROM rt0 WHERE ((((0.28009420646292604)) NOT BETWEEN (((((rt0.c1, rt0.c1, rt0.c3))>=((rt0.c2, rt0.c2, rt0.c1))))) AND ((HEX(DISTINCT rt0.c2))))) LIMIT 4;
SELECT ALL * FROM rt0 WHERE ((((0.28009420646292604)) NOT BETWEEN (((((rt0.c1, rt0.c1, rt0.c3))>((rt0.c2, rt0.c2, rt0.c1))))) AND ((HEX(DISTINCT rt0.c2)))));
SELECT DISTINCT * FROM rt0 WHERE ((((0.28009420646292604)) NOT BETWEEN (((((rt0.c1, rt0.c1, rt0.c3))>=((rt0.c2, rt0.c2, rt0.c1))))) AND ((HEX(DISTINCT rt0.c2))))) LIMIT 4;
SELECT MIN(rt0.c2) FROM rt0 WHERE (CASE rt0.c2  WHEN rt0.c3 THEN '-1' WHEN ROUND(rt0.c0, '1877586301') THEN ((rt0.c0)!=(rt0.c3)) END) ORDER BY ((((rt0.c0)+(-1.468222271E9)))AND(((rt0.c2)IS(rt0.c1))));
SELECT MIN(rt0.c2) FROM rt0 WHERE (CASE rt0.c2  WHEN rt0.c3 THEN '-1' WHEN ROUND(rt0.c0, '1877586301') THEN ((rt0.c0)!=(rt0.c3)) END) ORDER BY ((((rt0.c0)+(-1.468222271E9)))AND(((rt0.c2)IS(rt0.c1)))) INTERSECT SELECT ALL MIN(rt0.c2) FROM rt0 WHERE ((CASE rt0.c2  WHEN rt0.c3 THEN rt0.c1 ELSE rt0.c2 END IN ())) ORDER BY ((((rt0.c0)+(-1.468222271E9)))AND(((rt0.c2)IS(rt0.c1))));
SELECT ALL * FROM rt0 WHERE (PRINTF(LIKELIHOOD(rt0.c3, rt0.c1), CASE ''  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN '0.8735340297327784' WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END, (- (rt0.c2))));
SELECT * FROM rt0 WHERE (PRINTF(LIKELIHOOD(rt0.c3, rt0.c1), CASE ''  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN '0.8735340297327784' WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END, (- (rt0.c2)))) INTERSECT SELECT * FROM rt0 WHERE (((((((((((((rt0.c0 COLLATE RTRIM)AND(CASE WHEN 'I' THEN rt0.c2 WHEN rt0.c3 THEN 0.4394205561888228 ELSE rt0.c1 END)))AND((rt0.c1 IN (rt0.c0)))))AND(0x34d20777)))AND((NOT (rt0.c3)))))OR((NOT (rt0.c3)))))OR(((rt0.c0)AND(rt0.c3)))));
SELECT ALL * FROM rt0 WHERE (PRINTF(LIKELIHOOD(rt0.c3, rt0.c1), CASE ''  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c2 THEN '0.8735340297327784' WHEN rt0.c2 THEN rt0.c3 ELSE rt0.c0 END, (- (rt0.c2))));
SELECT MIN(rt0.c3) FROM rt0 WHERE (CAST(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 END AS REAL)) ORDER BY CASE rt0.c3 COLLATE RTRIM  WHEN TRIM(DISTINCT rt0.c3, rt0.c1) THEN CAST(rt0.c0 AS INTEGER) WHEN CAST(rt0.c0 AS BLOB) THEN CASE WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END END DESC  NULLS FIRST;
SELECT MIN(rt0.c3) FROM rt0 WHERE (((CAST(CASE rt0.c1  WHEN rt0.c3 THEN rt0.c3 WHEN rt0.c1 THEN rt0.c3 WHEN rt0.c3 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c1 END AS REAL))AND((CAST(rt0.c0 AS NUMERIC) IN ((('441814537') NOT BETWEEN (rt0.c1) AND (rt0.c1)), ((rt0.c3) IS TRUE)))))) ORDER BY CASE rt0.c3 COLLATE RTRIM  WHEN TRIM(DISTINCT rt0.c3, rt0.c1) THEN CAST(rt0.c0 AS INTEGER) WHEN CAST(rt0.c0 AS BLOB) THEN CASE WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c3 END END DESC  NULLS FIRST;
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (-2045185160);
SELECT ALL MIN(rt0.c1) FROM rt0, vt1 WHERE (((0Xffffffff8618f378)AND(rt0.c3))) ORDER BY ((((((((vt1.c0)||(rt0.c0)))OR(rt0.c1)))OR(CAST(rt0.c2 AS BLOB))))AND(((((((((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c0)))OR(rt0.c0)))) INTERSECT SELECT MIN(rt0.c1) FROM rt0, vt1 WHERE (TRIM(DISTINCT (((rt0.c1)) NOT BETWEEN ((rt0.c3)) AND ((0.9087963057669955))), ((rt0.c3) NOTNULL))) ORDER BY ((((((((vt1.c0)||(rt0.c0)))OR(rt0.c1)))OR(CAST(rt0.c2 AS BLOB))))AND(((((((((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c3)))OR(rt0.c0)))OR(rt0.c0))));
SELECT ALL * FROM vt1 WHERE (0.12991049357941153);
SELECT ALL * FROM vt1 WHERE (((0.12991049357941153)AND(((TYPEOF(vt1.c0))%((~ (vt1.c0)))))));
SELECT ALL * FROM vt1 WHERE (0.12991049357941153);
SELECT ALL * FROM vt1 WHERE (((0.12991049357941153)AND(((TYPEOF(vt1.c0))%((~ (vt1.c0)))))));
SELECT ALL * FROM rt0, vt1 WHERE (CASE ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c2))  WHEN rt0.c2 COLLATE NOCASE THEN (rt0.c1 IN (0.6650630648801641)) ELSE SQLITE_VERSION() END);
SELECT * FROM rt0, vt1 WHERE (CASE ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c2))  WHEN rt0.c2 COLLATE NOCASE THEN (rt0.c1 IN (0.6650630648801641)) ELSE SQLITE_VERSION() END);
SELECT ALL * FROM rt0, vt1 WHERE (CASE ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c2))  WHEN rt0.c2 COLLATE NOCASE THEN (rt0.c1 IN (0.6650630648801641)) ELSE SQLITE_VERSION() END);
SELECT * FROM rt0, vt1 WHERE (CASE ((rt0.c3) NOT BETWEEN (rt0.c1) AND (rt0.c2))  WHEN rt0.c2 COLLATE NOCASE THEN (rt0.c1 IN (0.6650630648801641)) ELSE SQLITE_VERSION() END);
SELECT * FROM rt0 WHERE ('-182725074') ORDER BY CAST(CAST(rt0.c2 AS NUMERIC) AS TEXT), SQLITE_COMPILEOPTION_GET(rt0.c0) COLLATE NOCASE;
SELECT DISTINCT * FROM rt0 WHERE ((('-182725074')AND(-464512860))) ORDER BY ((((((rt0.c3) NOT NULL))OR(rt0.c2 COLLATE NOCASE)))OR((+ (rt0.c3))))  NULLS LAST, (((('0.4162970666403598') ISNULL))GLOB(rt0.c0))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST((((rt0.c3, rt0.c0, rt0.c1))>((rt0.c0, rt0.c0, rt0.c2))) AS NUMERIC)) ORDER BY ((((((rt0.c3) NOT NULL))OR(rt0.c2 COLLATE NOCASE)))OR((+ (rt0.c3))))  NULLS LAST, (((('0.4162970666403598') ISNULL))GLOB(rt0.c0))  NULLS FIRST;
SELECT * FROM rt0 WHERE ('-182725074') ORDER BY CAST(CAST(rt0.c2 AS NUMERIC) AS TEXT), SQLITE_COMPILEOPTION_GET(rt0.c0) COLLATE NOCASE;
SELECT DISTINCT * FROM rt0 WHERE ((('-182725074')AND(-464512860))) ORDER BY ((((((rt0.c3) NOT NULL))OR(rt0.c2 COLLATE NOCASE)))OR((+ (rt0.c3))))  NULLS LAST, (((('0.4162970666403598') ISNULL))GLOB(rt0.c0))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM rt0 WHERE (CAST((((rt0.c3, rt0.c0, rt0.c1))>((rt0.c0, rt0.c0, rt0.c2))) AS NUMERIC)) ORDER BY ((((((rt0.c3) NOT NULL))OR(rt0.c2 COLLATE NOCASE)))OR((+ (rt0.c3))))  NULLS LAST, (((('0.4162970666403598') ISNULL))GLOB(rt0.c0))  NULLS FIRST;
SELECT ALL * FROM vt1, rt0 WHERE (((CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END) NOTNULL));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END) NOTNULL)) ORDER BY ((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)) COLLATE RTRIM DESC  NULLS LAST LIMIT 0x4;
SELECT ALL * FROM vt1, rt0 WHERE (((CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END) NOTNULL));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END) NOTNULL)) ORDER BY ((((rt0.c0)OR(vt1.c0)))AND(rt0.c0)) COLLATE RTRIM DESC  NULLS LAST LIMIT 0x4;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END IN (load_extension(0xc4f9c56)))) ORDER BY ((x'5f') NOT BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))), x'42d91e'  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 END IN (load_extension(0xc4f9c56))))AND(0.6084575894713848))) ORDER BY ((x'5f') NOT BETWEEN (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) AND ((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))), x'42d91e'  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND((((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, x'157225', vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0)))) NOTNULL)))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND((((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, x'157225', vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0)))) NOTNULL)))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) LIMIT 0x0;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE NOCASE) ORDER BY ((x'') IS TRUE)  NULLS LAST;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE NOCASE) ORDER BY ((x'') IS TRUE)  NULLS LAST LIMIT 0;
SELECT * FROM rt0 NATURAL JOIN vt1 WHERE (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE NOCASE) ORDER BY ((x'') IS TRUE)  NULLS LAST;
SELECT DISTINCT * FROM rt0 NATURAL JOIN vt1 WHERE (((rt0.c3) NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE NOCASE) ORDER BY ((x'') IS TRUE)  NULLS LAST LIMIT 0;
SELECT * FROM vt1, rt0 WHERE (x'43') ORDER BY '-924501417';
SELECT DISTINCT * FROM vt1, rt0 WHERE (((x'43')AND((((~ ('653854182')))-(COALESCE(DISTINCT rt0.c0, rt0.c0, vt1.c0)))))) ORDER BY '-924501417' INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c3)<>(rt0.c1)) COLLATE BINARY) ORDER BY '-924501417';
SELECT * FROM vt1, rt0 WHERE (x'43') ORDER BY '-924501417';
SELECT DISTINCT * FROM vt1, rt0 WHERE (((x'43')AND((((~ ('653854182')))-(COALESCE(DISTINCT rt0.c0, rt0.c0, vt1.c0)))))) ORDER BY '-924501417' INTERSECT SELECT DISTINCT * FROM vt1, rt0 WHERE (((rt0.c3)<>(rt0.c1)) COLLATE BINARY) ORDER BY '-924501417';
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((~ (rt0.c2)));
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE ((((~ (rt0.c2)))AND((((~ (rt0.c2))) IS FALSE)))) ORDER BY CAST(((NULL) NOTNULL) AS BLOB) ASC LIMIT 0x2;
SELECT COUNT(*) FROM rt0, vt1 WHERE (((((((((((vt1.c0)OR(rt0.c3)))OR(rt0.c2)))OR('1484910790')))OR(vt1.c0)))OR(NULL)) COLLATE BINARY) ORDER BY IFNULL((('萺sn{L	t')>>(vt1.c0)), rt0.c2 COLLATE RTRIM) DESC, ((x'825c7b')+(CAST(rt0.c1 AS INTEGER)))  NULLS FIRST, rt0.c3;
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((((((((((vt1.c0)OR(rt0.c3)))OR(rt0.c2)))OR('1484910790')))OR(vt1.c0)))OR(NULL)) COLLATE BINARY)AND(((rt0.c3)/(((rt0.c1) NOT NULL)))))) ORDER BY ((+ (vt1.c0)) IN ())  NULLS LAST LIMIT 0;
SELECT MAX(vt1.c0) FROM vt1 WHERE (TIME(CASE WHEN vt1.c0 THEN -64523250 WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))), 0.05510838346774838));
SELECT MAX(vt1.c0) FROM vt1 WHERE (TIME(CASE WHEN vt1.c0 THEN 0Xfffffffffc27740e WHEN vt1.c0 THEN vt1.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))), 0.05510838346774838));
SELECT MAX(rt0.c3) FROM rt0 WHERE (rt0.c2);
SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (rt0.c2) ORDER BY CAST(((rt0.c3) IS TRUE) AS TEXT)  NULLS FIRST, CAST(((rt0.c3) ISNULL) AS REAL) LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (((-262715540) NOT BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 END) AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((0xfffffffff057476c) NOT BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 END) AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(LIKELIHOOD(((vt1.c0)>>(vt1.c0)), (- (vt1.c0)))))) ORDER BY (((NULL)) NOT BETWEEN ((json_array_length(vt1.c0, vt1.c0))) AND ((((vt1.c0)%(vt1.c0))))), ((vt1.c0)!=(vt1.c0)) COLLATE BINARY DESC, (NOT (vt1.c0 COLLATE NOCASE)) DESC  NULLS LAST, (((vt1.c0, vt1.c0)) NOT BETWEEN (((NULL IN (vt1.c0)), vt1.c0)) AND (((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, x'1b', vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))), ((vt1.c0)||(vt1.c0))))) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) ISNULL)) ORDER BY (((NULL)) NOT BETWEEN ((json_array_length(vt1.c0, vt1.c0))) AND ((((vt1.c0)%(vt1.c0))))), ((vt1.c0)<>(vt1.c0)) COLLATE BINARY DESC, (NOT (vt1.c0 COLLATE NOCASE)) DESC  NULLS LAST, (((vt1.c0, vt1.c0)) NOT BETWEEN (((NULL IN (vt1.c0)), vt1.c0)) AND (((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, x'1b', vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))), ((vt1.c0)||(vt1.c0))))) ASC;
SELECT ALL * FROM vt1 WHERE (((-262715540) NOT BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 END) AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((0xfffffffff057476c) NOT BETWEEN (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN x'' THEN vt1.c0 END) AND (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))AND(LIKELIHOOD(((vt1.c0)>>(vt1.c0)), (- (vt1.c0)))))) ORDER BY (((NULL)) NOT BETWEEN ((json_array_length(vt1.c0, vt1.c0))) AND ((((vt1.c0)%(vt1.c0))))), ((vt1.c0)!=(vt1.c0)) COLLATE BINARY DESC, (NOT (vt1.c0 COLLATE NOCASE)) DESC  NULLS LAST, (((vt1.c0, vt1.c0)) NOT BETWEEN (((NULL IN (vt1.c0)), vt1.c0)) AND (((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, x'1b', vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))), ((vt1.c0)||(vt1.c0))))) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))) ISNULL)) ORDER BY (((NULL)) NOT BETWEEN ((json_array_length(vt1.c0, vt1.c0))) AND ((((vt1.c0)%(vt1.c0))))), ((vt1.c0)<>(vt1.c0)) COLLATE BINARY DESC, (NOT (vt1.c0 COLLATE NOCASE)) DESC  NULLS LAST, (((vt1.c0, vt1.c0)) NOT BETWEEN (((NULL IN (vt1.c0)), vt1.c0)) AND (((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, x'1b', vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))), ((vt1.c0)||(vt1.c0))))) ASC;
SELECT * FROM rt0 WHERE (0.8696872644892482);
SELECT ALL * FROM rt0 WHERE (((0.8696872644892482)AND(0xffffffffb0f6059c))) ORDER BY COALESCE(DISTINCT rt0.c1 COLLATE NOCASE, ((((((x'')AND(rt0.c3)))OR(rt0.c1)))AND(rt0.c1)), CASE rt0.c0  WHEN rt0.c3 THEN rt0.c1 END, ((rt0.c2)<>(rt0.c3))) DESC, rt0.c0 LIMIT 0x0 INTERSECT SELECT ALL * FROM rt0 NOT INDEXED WHERE (((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0)) COLLATE RTRIM) ORDER BY COALESCE(DISTINCT rt0.c1 COLLATE NOCASE, ((((((x'')AND(rt0.c3)))OR(rt0.c1)))AND(rt0.c1)), CASE rt0.c0  WHEN rt0.c3 THEN rt0.c1 END, ((rt0.c2)<>(rt0.c3))) DESC, rt0.c0 LIMIT 0;
SELECT * FROM rt0 WHERE (0.8696872644892482);
SELECT ALL * FROM rt0 WHERE (((0.8696872644892482)AND(0xffffffffb0f6059c))) ORDER BY COALESCE(DISTINCT rt0.c1 COLLATE NOCASE, ((((((x'')AND(rt0.c3)))OR(rt0.c1)))AND(rt0.c1)), CASE rt0.c0  WHEN rt0.c3 THEN rt0.c1 END, ((rt0.c2)<>(rt0.c3))) DESC, rt0.c0 LIMIT 0x0 INTERSECT SELECT ALL * FROM rt0 NOT INDEXED WHERE (((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0)) COLLATE RTRIM) ORDER BY COALESCE(DISTINCT rt0.c1 COLLATE NOCASE, ((((((x'')AND(rt0.c3)))OR(rt0.c1)))AND(rt0.c1)), CASE rt0.c0  WHEN rt0.c3 THEN rt0.c1 END, ((rt0.c2)<>(rt0.c3))) DESC, rt0.c0 LIMIT 0;
SELECT ALL * FROM vt1, rt0 WHERE (((RTRIM(rt0.c3)) BETWEEN (-1525515920) AND (((rt0.c0) IS TRUE))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((RTRIM(rt0.c3)) BETWEEN (0xffffffffa5127970) AND (((rt0.c0) IS TRUE)))) INTERSECT SELECT DISTINCT * FROM vt1 NOT INDEXED, rt0 WHERE (rt0.c1);
SELECT ALL * FROM vt1, rt0 WHERE (((RTRIM(rt0.c3)) BETWEEN (-1525515920) AND (((rt0.c0) IS TRUE))));
SELECT DISTINCT * FROM vt1, rt0 WHERE (((RTRIM(rt0.c3)) BETWEEN (0xffffffffa5127970) AND (((rt0.c0) IS TRUE)))) INTERSECT SELECT DISTINCT * FROM vt1 NOT INDEXED, rt0 WHERE (rt0.c1);
SELECT COUNT(*) FROM rt0, vt1 WHERE ((((vt1.c0) NOT NULL) IN (rt0.c3 COLLATE RTRIM))) ORDER BY (rt0.c1 IN (vt1.c0, vt1.c0)) COLLATE RTRIM, (((((+ (rt0.c3)))OR(((rt0.c0)GLOB(rt0.c1)))))OR(UNICODE(rt0.c0))) ASC, (((rt0.c1, rt0.c2, rt0.c1, rt0.c1)) BETWEEN (((rt0.c1 IN (vt1.c0)), ((rt0.c3)AND(rt0.c2)), (((vt1.c0))<((rt0.c1))), (rt0.c2 IN (rt0.c1)))) AND (((((rt0.c2)) BETWEEN ((rt0.c2)) AND ((rt0.c1))), rt0.c2 COLLATE BINARY, (((vt1.c0, rt0.c3))=((rt0.c0, NULL))), (((rt0.c1, rt0.c1, x''))=((rt0.c1, vt1.c0, rt0.c3))))));
SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE ((((vt1.c0) NOT NULL) IN (rt0.c3 COLLATE RTRIM))) ORDER BY (rt0.c1 IN (vt1.c0, vt1.c0)) COLLATE RTRIM, (((((+ (rt0.c3)))OR(((rt0.c0)GLOB(rt0.c1)))))OR(UNICODE(rt0.c0))) ASC, (((rt0.c1, rt0.c2, rt0.c1, rt0.c1)) BETWEEN (((rt0.c1 IN (vt1.c0)), ((rt0.c3)AND(rt0.c2)), (((vt1.c0))<((rt0.c1))), (rt0.c2 IN (rt0.c1)))) AND (((((rt0.c2)) BETWEEN ((rt0.c2)) AND ((rt0.c1))), rt0.c2 COLLATE BINARY, (((vt1.c0, rt0.c3))=((rt0.c0, NULL))), (((rt0.c1, rt0.c1, x''))==((rt0.c1, vt1.c0, rt0.c3)))))) INTERSECT SELECT DISTINCT COUNT(*) FROM rt0, vt1 WHERE (((((((((rt0.c2)OR(rt0.c0)))OR(vt1.c0)))OR(rt0.c2)))IS NOT(((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c1))))) ORDER BY (rt0.c1 IN (vt1.c0, vt1.c0)) COLLATE RTRIM, (((((+ (rt0.c3)))OR(((rt0.c0)GLOB(rt0.c1)))))OR(UNICODE(rt0.c0))) ASC, (((rt0.c1, rt0.c2, rt0.c1, rt0.c1)) BETWEEN (((rt0.c1 IN (vt1.c0)), ((rt0.c3)AND(rt0.c2)), (((vt1.c0))<((rt0.c1))), (rt0.c2 IN (rt0.c1)))) AND (((((rt0.c2)) BETWEEN ((rt0.c2)) AND ((rt0.c1))), rt0.c2 COLLATE BINARY, (((vt1.c0, rt0.c3))==((rt0.c0, NULL))), (((rt0.c1, rt0.c1, x''))==((rt0.c1, vt1.c0, rt0.c3))))));
SELECT * FROM rt0 WHERE (((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2))) IS TRUE));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2))) IS TRUE))AND(rt0.c0))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c1);
SELECT * FROM rt0 WHERE (((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2))) IS TRUE));
SELECT DISTINCT * FROM rt0 WHERE (((((((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2))) IS TRUE))AND(rt0.c0))) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (rt0.c1);
SELECT ALL MIN(vt1.c0) FROM rt0, vt1 WHERE (CAST(((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)) AS TEXT)) ORDER BY (NOT (((rt0.c1)>(NULL)))) DESC, (COALESCE(DISTINCT rt0.c3, rt0.c3) IN (x'c8', ((rt0.c3) NOT NULL)))  NULLS FIRST, ((x'f4ff')>>(((((((((NULL)OR(rt0.c0)))OR(vt1.c0)))OR(rt0.c2)))AND(rt0.c3))));
SELECT MIN(vt1.c0) FROM rt0, vt1 WHERE (CAST(((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)) AS TEXT)) ORDER BY (NOT (((rt0.c1)>(NULL)))) DESC, (COALESCE(DISTINCT rt0.c3, rt0.c3) IN (x'c8', ((rt0.c3) NOT NULL)))  NULLS FIRST, ((x'f4ff')>>(((((((((NULL)OR(rt0.c0)))OR(vt1.c0)))OR(rt0.c2)))AND(rt0.c3)))) INTERSECT SELECT MIN(vt1.c0) FROM rt0, vt1 WHERE ((((rt0.c0, rt0.c2)) BETWEEN ((CAST(rt0.c3 AS INTEGER), ((vt1.c0)/(rt0.c0)))) AND ((((rt0.c3)>=(vt1.c0)), ((((rt0.c3)AND(vt1.c0)))AND(rt0.c1)))))) ORDER BY (NOT (((rt0.c1)>(NULL)))) DESC, (COALESCE(DISTINCT rt0.c3, rt0.c3) IN (x'c8', ((rt0.c3) NOT NULL)))  NULLS FIRST, ((x'f4ff')>>(((((((((NULL)OR(rt0.c0)))OR(vt1.c0)))OR(rt0.c2)))AND(rt0.c3))));
SELECT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((rt0.c2, rt0.c0, rt0.c2, rt0.c0)) NOT BETWEEN ((((vt1.c0) ISNULL), 0Xffffffffa27fe7e9, (((rt0.c2))<((rt0.c2))), ((((rt0.c2)OR(rt0.c3)))AND(rt0.c0)))) AND (((('-1318172265')GLOB('')), NULL, ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c3)), CAST(rt0.c2 AS NUMERIC)))));
SELECT DISTINCT MIN(rt0.c3) FROM vt1, rt0 WHERE ((((((rt0.c2, rt0.c0, rt0.c2, rt0.c0)) NOT BETWEEN ((((vt1.c0) ISNULL), -1568675863, (((rt0.c2))<=((rt0.c2))), ((((rt0.c2)OR(rt0.c3)))AND(rt0.c0)))) AND (((('-1318172265')GLOB('')), NULL, ((rt0.c1) NOT BETWEEN (rt0.c3) AND (rt0.c3)), CAST(rt0.c2 AS NUMERIC)))))AND(CAST(((0.8374026694610095) BETWEEN (rt0.c2) AND (rt0.c0)) AS INTEGER)))) ORDER BY ABS(DISTINCT ((rt0.c0) IS TRUE))  NULLS LAST LIMIT 0X0;
SELECT * FROM rt0 WHERE (0.2559815148994955);
SELECT ALL * FROM rt0 WHERE (((0.2559815148994955)AND(0.404592676535915))) LIMIT 1;
SELECT * FROM rt0 WHERE (0.2559815148994955);
SELECT ALL * FROM rt0 WHERE (((0.2559815148994955)AND(0.404592676535915))) LIMIT 1;
SELECT ALL MAX(rt0.c3) FROM rt0 WHERE (((((rt0.c1)AND(rt0.c3))) NOT BETWEEN (((rt0.c2) BETWEEN (0.20155901645647345) AND (rt0.c2))) AND (CASE rt0.c1  WHEN rt0.c0 THEN 0.8463093188025901 ELSE rt0.c0 END)));
SELECT DISTINCT MAX(rt0.c3) FROM rt0 NOT INDEXED WHERE (((((((rt0.c1)AND(rt0.c3))) NOT BETWEEN (((rt0.c2) BETWEEN (0.20155901645647345) AND (rt0.c2))) AND (CASE rt0.c1  WHEN rt0.c0 THEN 0.8463093188025901 ELSE rt0.c0 END)))AND(CAST((rt0.c0 IN ()) AS NUMERIC)))) ORDER BY HEX(DISTINCT CASE WHEN rt0.c2 THEN rt0.c0 END) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(rt0.c3) FROM rt0 WHERE (CAST(rt0.c3 COLLATE RTRIM AS NUMERIC)) ORDER BY HEX(DISTINCT CASE WHEN rt0.c2 THEN rt0.c0 END) DESC  NULLS LAST LIMIT 0;
SELECT MIN(rt0.c1) FROM rt0 WHERE (rt0.c1) ORDER BY '&S' COLLATE RTRIM DESC  NULLS LAST, rt0.c2  NULLS LAST, LIKE(rt0.c1, rt0.c2, '0') COLLATE BINARY;
SELECT DISTINCT MIN(rt0.c1) FROM rt0 WHERE (rt0.c1) ORDER BY '&S' COLLATE RTRIM DESC  NULLS LAST, rt0.c2  NULLS LAST, LIKE(rt0.c1, rt0.c2, '0') COLLATE BINARY;
SELECT * FROM rt0 WHERE (((((((rt0.c0)==(rt0.c0)))AND((rt0.c1 IN (rt0.c0)))))AND(CASE rt0.c0  WHEN x'' THEN rt0.c0 WHEN NULL THEN rt0.c0 ELSE NULL END)));
SELECT DISTINCT * FROM rt0 NOT INDEXED WHERE (((((((((rt0.c0)==(rt0.c0)))AND((rt0.c1 IN (rt0.c0)))))AND(CASE rt0.c0  WHEN x'' THEN rt0.c0 WHEN NULL THEN rt0.c0 ELSE NULL END)))AND(((rt0.c1 COLLATE BINARY)==(rt0.c2 COLLATE NOCASE))))) ORDER BY (((rt0.c0 IN (rt0.c3, rt0.c3))) IS TRUE) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((rt0.c2 COLLATE NOCASE) IS FALSE)) ORDER BY (((rt0.c0 IN (rt0.c3, rt0.c3))) IS TRUE);
SELECT * FROM rt0 WHERE (((((((rt0.c0)==(rt0.c0)))AND((rt0.c1 IN (rt0.c0)))))AND(CASE rt0.c0  WHEN x'' THEN rt0.c0 WHEN NULL THEN rt0.c0 ELSE NULL END)));
SELECT DISTINCT * FROM rt0 NOT INDEXED WHERE (((((((((rt0.c0)==(rt0.c0)))AND((rt0.c1 IN (rt0.c0)))))AND(CASE rt0.c0  WHEN x'' THEN rt0.c0 WHEN NULL THEN rt0.c0 ELSE NULL END)))AND(((rt0.c1 COLLATE BINARY)==(rt0.c2 COLLATE NOCASE))))) ORDER BY (((rt0.c0 IN (rt0.c3, rt0.c3))) IS TRUE) INTERSECT SELECT DISTINCT * FROM rt0 WHERE (((rt0.c2 COLLATE NOCASE) IS FALSE)) ORDER BY (((rt0.c0 IN (rt0.c3, rt0.c3))) IS TRUE);
SELECT ALL MIN(rt0.c3) FROM rt0, vt1 WHERE (((((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c2)))>=((((rt0.c1, rt0.c3, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c0)) AND ((rt0.c2, rt0.c3, rt0.c0))))));
SELECT DISTINCT MIN(rt0.c3) FROM rt0, vt1 WHERE (((((((rt0.c1) NOT BETWEEN (vt1.c0) AND (rt0.c2)))=((((rt0.c1, rt0.c3, rt0.c2)) NOT BETWEEN ((rt0.c2, rt0.c0, rt0.c0)) AND ((rt0.c2, rt0.c3, rt0.c0))))))AND(CASE CASE WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c0 THEN x'597eec87' WHEN vt1.c0 THEN x'' WHEN x'ec' THEN vt1.c0 END  WHEN CAST(rt0.c2 AS INTEGER) THEN (((0.8476917178937334)) BETWEEN ((rt0.c0)) AND ((vt1.c0))) WHEN (- (rt0.c1)) THEN CAST(rt0.c3 AS REAL) END))) LIMIT 0X2;
SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON (+ (CASE rt0.c3  WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c3 END)) WHERE (CASE x''  WHEN (((rt0.c2, vt1.c0)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c1))) THEN ((rt0.c1) NOTNULL) WHEN 0.09272555243164537 THEN LIKELIHOOD(rt0.c0, x'd5') ELSE IFNULL(rt0.c1, rt0.c1) END) ORDER BY ((vt1.c0 COLLATE RTRIM)LIKE(vt1.c0)) DESC;
SELECT COUNT(*) FROM vt1 INNER JOIN rt0 ON (+ (CASE rt0.c3  WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c3 END)) WHERE (CASE x''  WHEN (((rt0.c2, vt1.c0)) NOT BETWEEN ((rt0.c1, rt0.c3)) AND ((rt0.c0, rt0.c1))) THEN ((rt0.c1) NOTNULL) WHEN 0.09272555243164537 THEN LIKELIHOOD(rt0.c0, x'd5') ELSE IFNULL(rt0.c1, rt0.c1) END) ORDER BY ((((((((((((rt0.c1) NOT NULL))OR(UNLIKELY(DISTINCT rt0.c2))))OR(((rt0.c2) BETWEEN (x'705d3b20') AND (rt0.c2)))))OR((rt0.c0 IN (vt1.c0)))))OR(((rt0.c3) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(((rt0.c2) NOT NULL))) ASC  NULLS LAST, ((((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c0)))AND(((rt0.c3)LIKE(rt0.c1)))))OR('346162187')))AND(LIKELIHOOD(DISTINCT rt0.c3, vt1.c0)))  NULLS LAST, CASE WHEN ((vt1.c0)-(vt1.c0)) THEN (((rt0.c1, rt0.c3)) NOT BETWEEN ((rt0.c0, NULL)) AND ((rt0.c1, vt1.c0))) WHEN json_array(x'b5', vt1.c0, rt0.c0) THEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c3)) ELSE rt0.c3 END DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((((vt1.c0)AND(rt0.c2)))OR(rt0.c0)))||('1338025495')) WHERE ((~ (((rt0.c3)||(NULL)))));
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((((vt1.c0)AND(rt0.c2)))OR(rt0.c0)))||('1338025495')) WHERE ((~ (((rt0.c3)||(NULL))))) ORDER BY (((((((rt0.c1, rt0.c2))<=((vt1.c0, rt0.c1))))AND(x'53d6')))OR((('k') BETWEEN (rt0.c2) AND (rt0.c2)))) DESC INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((((vt1.c0)AND(rt0.c2)))OR(rt0.c0)))||('1338025495')) WHERE ((((vt1.c0 IN (rt0.c1, rt0.c2))) ISNULL)) ORDER BY (((((((rt0.c1, rt0.c2))<=((vt1.c0, rt0.c1))))AND(x'53d6')))OR((('k') BETWEEN (rt0.c2) AND (rt0.c2)))) DESC;
SELECT ALL * FROM rt0 INNER JOIN vt1 ON ((((((vt1.c0)AND(rt0.c2)))OR(rt0.c0)))||('1338025495')) WHERE ((~ (((rt0.c3)||(NULL)))));
SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((((vt1.c0)AND(rt0.c2)))OR(rt0.c0)))||('1338025495')) WHERE ((~ (((rt0.c3)||(NULL))))) ORDER BY (((((((rt0.c1, rt0.c2))<=((vt1.c0, rt0.c1))))AND(x'53d6')))OR((('k') BETWEEN (rt0.c2) AND (rt0.c2)))) DESC INTERSECT SELECT DISTINCT * FROM rt0 INNER JOIN vt1 ON ((((((vt1.c0)AND(rt0.c2)))OR(rt0.c0)))||('1338025495')) WHERE ((((vt1.c0 IN (rt0.c1, rt0.c2))) ISNULL)) ORDER BY (((((((rt0.c1, rt0.c2))<=((vt1.c0, rt0.c1))))AND(x'53d6')))OR((('k') BETWEEN (rt0.c2) AND (rt0.c2)))) DESC;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c0, rt0.c3))<((rt0.c1, rt0.c0)))) IS FALSE));
SELECT ALL * FROM rt0, vt1 WHERE ((((((((rt0.c0, rt0.c3))<((rt0.c1, rt0.c0)))) IS FALSE))AND(((((+ (rt0.c2)), MIN(rt0.c3, rt0.c0), ((vt1.c0)=(rt0.c3))))>=(('280892973', (+ (rt0.c0)), ((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))OR(rt0.c3)))AND(rt0.c3)))))))) LIMIT 0X0;
SELECT * FROM rt0, vt1 WHERE ((((((rt0.c0, rt0.c3))<((rt0.c1, rt0.c0)))) IS FALSE));
SELECT ALL * FROM rt0, vt1 WHERE ((((((((rt0.c0, rt0.c3))<((rt0.c1, rt0.c0)))) IS FALSE))AND(((((+ (rt0.c2)), MIN(rt0.c3, rt0.c0), ((vt1.c0)=(rt0.c3))))>=(('280892973', (+ (rt0.c0)), ((((((((rt0.c1)AND(rt0.c3)))AND(rt0.c3)))OR(rt0.c3)))AND(rt0.c3)))))))) LIMIT 0X0;
SELECT ALL * FROM rt0 WHERE (CASE WHEN ((rt0.c0) NOT NULL) THEN ((((((rt0.c1)AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c3)) WHEN (rt0.c0 IN (rt0.c2)) THEN ((rt0.c1) BETWEEN (rt0.c2) AND ('-86516757')) ELSE rt0.c1 END) ORDER BY ((x'3a')-(((rt0.c2)-(rt0.c2)))) ASC  NULLS FIRST, (((0.45796628569267195)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))) COLLATE NOCASE;
SELECT * FROM rt0 WHERE (CASE WHEN ((rt0.c0) NOT NULL) THEN ((((((rt0.c1)AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c3)) WHEN (rt0.c0 IN (rt0.c2)) THEN ((rt0.c1) BETWEEN (rt0.c2) AND ('-86516757')) ELSE rt0.c1 END) ORDER BY ((x'3a')-(((rt0.c2)-(rt0.c2)))) ASC  NULLS FIRST, (((0.45796628569267195)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))) COLLATE NOCASE;
SELECT ALL * FROM rt0 WHERE (CASE WHEN ((rt0.c0) NOT NULL) THEN ((((((rt0.c1)AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c3)) WHEN (rt0.c0 IN (rt0.c2)) THEN ((rt0.c1) BETWEEN (rt0.c2) AND ('-86516757')) ELSE rt0.c1 END) ORDER BY ((x'3a')-(((rt0.c2)-(rt0.c2)))) ASC  NULLS FIRST, (((0.45796628569267195)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))) COLLATE NOCASE;
SELECT * FROM rt0 WHERE (CASE WHEN ((rt0.c0) NOT NULL) THEN ((((((rt0.c1)AND(rt0.c0)))AND(rt0.c2)))OR(rt0.c3)) WHEN (rt0.c0 IN (rt0.c2)) THEN ((rt0.c1) BETWEEN (rt0.c2) AND ('-86516757')) ELSE rt0.c1 END) ORDER BY ((x'3a')-(((rt0.c2)-(rt0.c2)))) ASC  NULLS FIRST, (((0.45796628569267195)) NOT BETWEEN ((rt0.c3)) AND ((rt0.c2))) COLLATE NOCASE;
SELECT ALL MIN(rt0.c2) FROM vt1, rt0 WHERE (CAST(CAST(rt0.c3 AS INTEGER) AS REAL)) ORDER BY (((((((((vt1.c0 IN ()))OR(CAST(rt0.c1 AS NUMERIC))))OR(CASE WHEN vt1.c0 THEN rt0.c0 WHEN '417953630' THEN rt0.c3 ELSE vt1.c0 END)))OR(rt0.c0)))AND(rt0.c1)) ASC, NULL DESC  NULLS FIRST;
SELECT MIN(rt0.c2) FROM vt1, rt0 WHERE (((CAST(CAST(rt0.c3 AS INTEGER) AS REAL))AND(json_array_length(json_array_length(vt1.c0))))) ORDER BY (((((((((vt1.c0 IN ()))OR(CAST(rt0.c1 AS NUMERIC))))OR(CASE WHEN vt1.c0 THEN rt0.c0 WHEN '417953630' THEN rt0.c3 ELSE vt1.c0 END)))OR(rt0.c0)))AND(rt0.c1)) ASC, NULL DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt1 WHERE (((((((CAST(vt1.c0 AS TEXT))OR(CAST(vt1.c0 AS NUMERIC))))OR(((vt1.c0)&(vt1.c0)))))OR(CHAR(vt1.c0, vt1.c0, vt1.c0, '', vt1.c0)))) ORDER BY ((vt1.c0)*((vt1.c0 IN (vt1.c0)))) ASC, (((- (vt1.c0))) IS TRUE) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((((((CAST(vt1.c0 AS TEXT))OR(CAST(vt1.c0 AS NUMERIC))))OR(((vt1.c0)&(vt1.c0)))))OR(CHAR(vt1.c0, vt1.c0, vt1.c0, '', vt1.c0))))AND(vt1.c0))) ORDER BY ((vt1.c0)*((vt1.c0 IN (vt1.c0)))) ASC, (((- (vt1.c0))) IS TRUE) DESC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt1 WHERE (((((((CAST(vt1.c0 AS TEXT))OR(CAST(vt1.c0 AS NUMERIC))))OR(((vt1.c0)&(vt1.c0)))))OR(CHAR(vt1.c0, vt1.c0, vt1.c0, '', vt1.c0)))) ORDER BY ((vt1.c0)*((vt1.c0 IN (vt1.c0)))) ASC, (((- (vt1.c0))) IS TRUE) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((((((CAST(vt1.c0 AS TEXT))OR(CAST(vt1.c0 AS NUMERIC))))OR(((vt1.c0)&(vt1.c0)))))OR(CHAR(vt1.c0, vt1.c0, vt1.c0, '', vt1.c0))))AND(vt1.c0))) ORDER BY ((vt1.c0)*((vt1.c0 IN (vt1.c0)))) ASC, (((- (vt1.c0))) IS TRUE) DESC  NULLS FIRST LIMIT 0x0;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0, vt1.c0)))) IS FALSE));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0))<((vt1.c0, vt1.c0, vt1.c0)))) IS FALSE)) ORDER BY json_type(((vt1.c0) NOTNULL))  NULLS LAST LIMIT 0X2;

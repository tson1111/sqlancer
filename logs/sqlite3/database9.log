--java.lang.AssertionError: the size of the result sets mismatch (0 and 4)!
---- SELECT ALL * FROM t0 WHERE (((((((((t0.c0)AND(t0.c0)))OR(t0.c0)))AND(t0.c0))) BETWEEN (((t0.c0)>=(t0.c0))) AND ((+ (t0.c0)))));
---- cardinality: 0
---- SELECT * FROM t0 WHERE (((((((((t0.c0)AND(t0.c0)))OR(t0.c0)))AND(t0.c0))) BETWEEN (((t0.c0)>(t0.c0))) AND ((+ (t0.c0)))));
---- cardinality: 4
--	at sqlancer.ComparatorHelper.assumeResultSetsAreSubset(ComparatorHelper.java:126)
--	at sqlancer.sqlite3.oracle.SQLite3SubsetOracle.checkSubsetQuery(SQLite3SubsetOracle.java:242)
--	at sqlancer.sqlite3.oracle.SQLite3SubsetOracle.check(SQLite3SubsetOracle.java:109)
--	at sqlancer.ProviderAdapter.generateAndTestDatabase(ProviderAdapter.java:49)
--	at sqlancer.Main$DBMSExecutor.run(Main.java:323)
--	at sqlancer.Main$2.run(Main.java:507)
--	at sqlancer.Main$2.runThread(Main.java:485)
--	at sqlancer.Main$2.run(Main.java:475)
--	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
--	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
--	at java.base/java.lang.Thread.run(Thread.java:831)
---- Time: 2021/05/19 01:09:34
-- Database: database9
-- Database version: 3.34.0
-- seed value: 1621357771653
PRAGMA cache_size = 50000;
PRAGMA temp_store=MEMORY;
PRAGMA synchronous=off;
PRAGMA case_sensitive_like=ON;
PRAGMA encoding = 'UTF-16be';
CREATE TABLE t0 (c0 INTEGER );
ROLLBACK TRANSACTION;
PRAGMA busy_timeout = 10000;
INSERT OR ROLLBACK INTO t0 VALUES (''), (x'a1'), (x'80'), (NULL), ('');
UPDATE OR REPLACE t0 SET (c0, c0)=(0.4889236703951433, x'') WHERE CAST((t0.c0 IN (t0.c0)) AS BLOB);
ANALYZE sqlite_master;
BEGIN  TRANSACTION;
ANALYZE main;
INSERT OR ABORT INTO t0(c0) VALUES (NULL);
ROLLBACK TRANSACTION;
ROLLBACK TRANSACTION;
PRAGMA main.journal_size_limit = 1927414255789092507;
PRAGMA cell_size_check;
COMMIT TRANSACTION;
PRAGMA integrity_check;
CREATE INDEX IF NOT EXISTS i29 ON t0(((x'')>=(c0)) COLLATE BINARY) WHERE CAST(((c0)||(c0)) AS BLOB);
REINDEX NOCASE;
PRAGMA main.journal_mode;
VACUUM main;
VACUUM;
VACUUM;
VACUUM;
VACUUM main;
VACUUM main;
VACUUM main;
VACUUM;
VACUUM temp;
VACUUM main;
VACUUM main;
VACUUM;
VACUUM main;
VACUUM;
VACUUM;
VACUUM;
VACUUM main;
VACUUM main;
VACUUM;
VACUUM;
VACUUM;
VACUUM temp;
VACUUM;
VACUUM main;
VACUUM main;
VACUUM main;
VACUUM;
VACUUM temp;
ANALYZE;
INSERT OR IGNORE INTO t0(c0) VALUES (x'41'), (665515619), ('\JY,	3xP');
CREATE UNIQUE INDEX i26 ON t0((((((c0, c0)) NOT BETWEEN ((c0, c0)) AND ((c0, c0)))) BETWEEN (json_quote(c0)) AND (json_quote(c0))) COLLATE BINARY) WHERE x'01';
BEGIN  TRANSACTION;
ROLLBACK TRANSACTION;
PRAGMA temp.legacy_file_format;
PRAGMA temp.checkpoint_fullfsync = false;
BEGIN  TRANSACTION;
INSERT OR ABORT INTO t0 VALUES (NULL), (NULL), (3063615), ('665515619');
ANALYZE temp;
PRAGMA incremental_vacuum(141569879);
INSERT OR REPLACE INTO t0 VALUES (NULL), ('665515619'), ('');
BEGIN  TRANSACTION;
ROLLBACK TRANSACTION;
ROLLBACK TRANSACTION;
INSERT OR IGNORE INTO t0 VALUES ('ë¼¿'), (x'cce4');
ANALYZE temp;
ANALYZE main;
ANALYZE t0;
ANALYZE;
ANALYZE;
INSERT OR IGNORE INTO t0 VALUES (0.2489019158786313), ('0.4889236703951433'), (NULL);
PRAGMA main.cell_size_check = true;
REINDEX  t0;
COMMIT;
ROLLBACK TRANSACTION;
-- SELECT ALL * FROM t0 WHERE (((((((((t0.c0)AND(t0.c0)))OR(t0.c0)))AND(t0.c0))) BETWEEN (((t0.c0)>=(t0.c0))) AND ((+ (t0.c0)))));
-- cardinality: 0
-- SELECT * FROM t0 WHERE (((((((((t0.c0)AND(t0.c0)))OR(t0.c0)))AND(t0.c0))) BETWEEN (((t0.c0)>(t0.c0))) AND ((+ (t0.c0)))));
-- cardinality: 4

-- Time: 2021/05/19 01:09:36
-- Database: database18
-- Database version: 3.34.0
-- seed value: 1621357771662
PRAGMA cache_size = 50000; -- 0ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
PRAGMA case_sensitive_like=ON; -- 0ms;
PRAGMA encoding = 'UTF-16be'; -- 0ms;
CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2, c3, c4, c5, +c6 BLOB ); -- 1ms;
CREATE VIRTUAL TABLE vt1 USING fts4(c0, c1 UNINDEXED, matchinfo=fts3); -- 1ms;
PRAGMA checkpoint_fullfsync = true; -- 0ms;
UPDATE OR FAIL vt1 SET c0 = 0.6878575651698283, c1 = x''; -- 0ms;
UPDATE OR IGNORE vt1 SET c1 = NULL, c1 = 0xffffffffd2d3541d; -- 0ms;
PRAGMA threads; -- 0ms;
UPDATE vt1 SET c0 = x'82', c1 = 0.22552769617154667, c1 = 0.5138318291476706; -- 0ms;
INSERT OR IGNORE INTO vt1(c1) VALUES (x'e5'), (x''), (NULL); -- 1ms;
CREATE VIEW v0(c0, c1, c2) AS SELECT GROUP_CONCAT(((((((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0))) OVER (), ((vt1.c0 COLLATE NOCASE)|(((vt1.c1) BETWEEN ('0.22552769617154667') AND (vt1.c0)))), SUM((vt1.c0 IN (NULL)) COLLATE NOCASE) OVER ( ORDER BY 0X14982038 ASC) FROM vt1 WHERE (CASE WHEN ((0x14982038)AND(0.15577326821348492)) THEN (x'' IN (NULL)) WHEN (((0.7135857647115267, 0.7930462725983787, x'd3b1c0', '[')) BETWEEN ((x'', '-757902307', '345514040', x'f9')) AND ((x'9c', 0.7338276578367213, NULL, '345514040'))) THEN DATETIME(3.4551404E8, -757902307, x'40', '䂤') WHEN (NOT (NULL)) THEN (('-637031859') NOT BETWEEN (NULL) AND (NULL)) END); -- 1ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
PRAGMA ignore_check_constraints; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
PRAGMA temp.application_id; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', -757902307);
; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', -1067114523);
; -- 0ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((json_object(x'fdbe', NULL))OR(CAST(x'' AS NUMERIC))))AND(((x'')>=(0X24b640a4)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1067114523 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-637031859'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1367184240 sz=1729661663 unordered'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2 sz=-326459721 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE x'' COLLATE RTRIM; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((x'f5f8', '')) NOT BETWEEN (('1173938805', x'a4d6')) AND ((x'', 'L|殏'))))<>(CASE NULL  WHEN NULL THEN '615923876' WHEN NULL THEN -7.57902307E8 ELSE NULL END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '-841203176 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-757902307'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULLIF(DISTINCT ((0.23784727395044303)!=(6.15923876E8)), (('615923876')LIKE('101352890'))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN x'2cc083b9' THEN 0.2531803009711411 ELSE '929445258' END)+(((((0.6735710501648677)OR(NULL)))OR(NULL)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 sz=1630845407 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 sz=-1844818550 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ ((((0.8175947210099783))>=(('-2127402730'))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '920915982 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '21271092 sz=343401058 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1173938805 sz=-1067114523'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1067114523 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '2 32506213 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-707585088 sz=768350880 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((0X1230b0b8, 929445258))==((')HD', '-637031859')))) NOT BETWEEN (((',u_')IS NOT(0x629cdd08))) AND ((NOT (NULL)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('o')<=(0.6437225982604254)))<=(CASE WHEN 1468832677 THEN 0.23784727395044303 WHEN 0.5981874271049618 THEN x'8dfc' WHEN '920915982' THEN NULL END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 sz=929445258 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN ((x'9e5b') BETWEEN ('') AND ('''+O]b')) THEN (- (-5674097)) WHEN ((-624547642)>>(0.8175947210099783)) THEN (('L|殏')%('[')) WHEN (('-1067114523') ISNULL) THEN NULL ELSE ((0.22552769617154667) BETWEEN ('1367184240') AND (x'')) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '0 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '3 sz=-335313520 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1367184240 sz=768350880 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1644449794'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '615923876 sz=-335313520 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '2 sz=618562927 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '258554064 0 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((x'4693759f')<>(0.22845794843892375 COLLATE BINARY)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '2 2 sz=1047413736'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((1.36718424E9 IN ('o', 's''>p')))AND(x'')))AND(((x'ef9c') NOT BETWEEN ('') AND (NULL)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '5 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE x'8f'; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-2127402730 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (((0.2807140998460379) IS TRUE))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 1 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULL; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'', '1t<_')) BETWEEN ((0.7338276578367213, x'ecbe144937')) AND ((0.5718771436063474, NULL))) IN (x'')); -- 0ms;
DELETE FROM sqlite_stat1 WHERE 0.705285612693276; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE '-286619625' COLLATE BINARY; -- 0ms;
DELETE FROM sqlite_stat1 WHERE rtreenode(CASE 0.9079857999125378  WHEN 1047413736 THEN x'd72c8e46' ELSE 0.5718771436063474 END, ((0Xffffffffc0651fe5)<('1843766385'))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ABS(((NULL) IS FALSE)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 sz=935056110 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((x'9627'))>(('-1234102707')))) NOTNULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('343401058')) NOT BETWEEN ((x'f9f4')) AND ((NULL))) IN (CAST(x'' AS TEXT))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL) NOT NULL))LIKE(TRIM(x''))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=1730619547 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-286619625 sz=768350880 noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-635203598'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('-558414326') NOTNULL) COLLATE BINARY; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 sz=-5674097 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 -635203598 sz=21271092'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE TYPEOF(DISTINCT CASE NULL  WHEN NULL THEN NULL END); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1 sz=-2038281165 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL) BETWEEN ('0t3VKP') AND (''))) BETWEEN ('#') AND ((('920915982')LIKE(-3.26459721E8)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.9633115728778252, x'', 0.9077201638645574)) NOT BETWEEN ((-3.26459721E8 COLLATE NOCASE, ((x'f0') BETWEEN ('|/jf^M!C ') AND (NULL)), (((((('0.7338276578367213')AND(x'')))OR(NULL)))AND(0x62045002)))) AND (((('-1791157238')OR('x8鈴콬++僷녥h')), ((('-652094336', 714411549, -264351497)) NOT BETWEEN ((0.6735710501648677, NULL, '')) AND ((-2.12740273E9, 0.546465383853977, x''))), STRFTIME(x'', 0Xffffffffd0de4075, '1269145269', 0.8310715250168766)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ ((('') IS TRUE))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '0 sz=-1408674184 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((NULL)&(LIKELIHOOD(DISTINCT '1047413736', NULL))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((754692099 COLLATE NOCASE)-(((x'') BETWEEN (0.718401191265116) AND (x'')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((x'ca')<<('')))AND(('' IN ()))))AND(((((((((x'94ec6d')OR(0Xffffffffcddc4218)))AND(-2.86619625E8)))AND(x'3e1cbc')))AND(0Xffffffffdac628c6)))))OR((('TRUE') NOT NULL))))AND(((('0.8310715250168766')) NOT BETWEEN ((NULL)) AND ((0.6735710501648677))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((0.5787130268887571)IS(0.5138318291476706)) COLLATE NOCASE; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('-130381765') BETWEEN (CAST('' AS BLOB)) AND (-1169506035 COLLATE NOCASE)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1173938805 sz=-757902307 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=-1169506035'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL)) NOT BETWEEN ((((x'') NOT NULL))) AND ((LTRIM(NULL, x'')))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-1364915766 sz=618562927'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=381300539 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((((((0.9872397124392178)OR('1595081513')))OR(x'37')))OR(x'ec4c07')) AS TEXT); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=-2081089654 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 1847681787 -1358152625 sz=-1628510110 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 2 -1364915766 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1 -2046289318 sz=-2046289318 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' sz=1847681787'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1 sz=-2081089654'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE CAST('1451872936' AS NUMERIC)  WHEN ((((NULL)OR(NULL)))AND(')hd')) THEN HEX(x'') WHEN (((724715347))<((x'942e0cf4'))) THEN NULL WHEN (~ (0.04268810021729774)) THEN ((((((((0X164af3b0)AND(0X1b9a0df3)))OR(NULL)))AND(0.9968753404868614)))AND(x'')) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1121701740 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1458110164 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE x'dd'; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST(NULL AS TEXT))LIKE((((NULL)) NOT BETWEEN (('Sy#U)')) AND ((0.7425852574766163))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-2081089654'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((('p') NOT BETWEEN ('1843766385') AND (0.7930462725983787))))!=(((-1.62851011E9 IN ())))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((0.2705360498000535)<>(x''))))==((json_array_length(NULL, 0X4a4176a5)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=1029704324'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NOT (NULL))) IS TRUE); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL, 1.843766385E9, '-1408674184', 0.9065111082146229)) BETWEEN ((0.7135857647115267, x'', NULL, x'ea')) AND ((1.12170174E9, 0.938863164610557, x'', ''))) IN ((-7.57902307E8 IN ()))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(TRIM(DISTINCT ')hd', 1.029704324E9) AS BLOB); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '0 0 sz=1458110164 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1 0 sz=-335313520'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=21271092 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1299638610 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((x'dcb4a0', '1047413736')) NOT BETWEEN (('-640489221', CAST(1230436426 AS BLOB))) AND ((((('gMd')) NOT BETWEEN ((0.705285612693276)) AND ((0.9990920255037324))), (0.558812568703904 IN (x'0d', NULL))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((x'ac')) NOT BETWEEN ((-1791157238)) AND ((0.9065111082146229))), CAST(x'82' AS TEXT), (NOT (0.20954610747957159))))==((((NULL) BETWEEN (0.50294349359328) AND (NULL)), 0.5436963229393406, (+ (0.19175272902476248))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('-380708997') NOT BETWEEN (json_remove(NULL, '''+O]B')) AND (((NULL)+(x'fc')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((TYPEOF(DISTINCT 2.1271092E7))>=((('')AND(x'4c')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(CASE WHEN NULL THEN NULL END AS BLOB); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((((((NULL)OR(0.37354013104782036)))AND('1173938805')))AND(x'980784')))OR(0.296125741586469)))OR('-316303965')))OR('-1122952596')))<=((~ (0.6193369905808567)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=2011659437'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 sz=-983853093 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '931266565 sz=-1358152625'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(LOWER(x'') AS INTEGER); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((NULL, ''))<=(('856469861', '~~'))))<<(((0.41030045814767213)IS NOT('萇rCAd')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((NULL) ISNULL) AS REAL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE x''; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1728737727'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '297690481 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '381300539 sz=-1017404822'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1432416200 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=2077995519'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '920915982 sz=-915029424 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '2 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'f32a')OR(('-1e500' IN (x'', 0.1815678517994589)))))AND(((((NULL)OR('풀#')))AND('1468832677')))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=1148994335 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1 sz=1409977447'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-2058342109 1 sz=-1287524755 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST(x'3ea8' AS NUMERIC))%((((((('')AND(NULL)))AND(x'de')))OR(-2.038281165E9)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=1769291611 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1847681787 sz=0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 sz=1016608984 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULLIF((('p') NOT NULL), NULL COLLATE NOCASE); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NOT ('345514040')))>=('g')); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((CAST('1S' AS NUMERIC))OR(NULL)))AND(0x1f00165 COLLATE RTRIM)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '929445258 sz=-1312942963'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((''))<(('.'))))&((0X6dc5fdc2 IN ()))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1729661663 sz=-616332281 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('448962842')/(NULLIF(DISTINCT NULL, 'd'))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- ((~ (x'')))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN 0.20516486425040503 THEN '' WHEN '1016608984' THEN -5674097.0 ELSE '856469861' END)<(((NULL) IS TRUE))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '2 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=618562927'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((((NULL)AND(0.6286766463344724)))OR(x'')))AND(x'')))OR(360220862)))AND(0.7476133037444082)))*(((x'')<>('x6G')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((x'', '9/', 0x330cb165, NULL)) BETWEEN (((('') NOT BETWEEN (x'd30b') AND (x'7d36')), (+ (x'6750c79a')), CAST(x'c0' AS TEXT), ((0.011496114106102517)||('-335313520')))) AND ((((((0.19175272902476248)AND(NULL)))OR('~')), (('TRUE') IS TRUE), ((x'')<<(x'')), (((NULL, 343401058)) NOT BETWEEN (('2131012904', NULL)) AND ((x'', x'c239')))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('0.938863164610557', '1016608984')) BETWEEN ((('' IN ('-983853093')), '')) AND ((LTRIM('-610614943', NULL), ((NULL) NOT NULL)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((x'', 'y', NULL)) NOT BETWEEN ((CASE 0Xffffffffa124040b  WHEN 1.730619547E9 THEN '-1681891871' ELSE NULL END, '887571368' COLLATE RTRIM, ((((x'')OR('')))OR(-1809434267)))) AND ((CASE WHEN x'' THEN NULL WHEN 0x60a85ba THEN x'f4' ELSE '-2127402730' END, '931266565', (~ (1322070102))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((1.322070102E9)IS(NULL)) IN (((NULL) ISNULL), CASE 0.3779866865540582  WHEN NULL THEN '-1791157238' WHEN x'' THEN NULL END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '931266565 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '184893080 sz=1729661663 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1 448323718 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '4 sz=-1515019088 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('1427553744' COLLATE RTRIM) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=1163465969 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 4 sz=-1408674184'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0xffffffffbda6dc25, '-624547642', x'')) BETWEEN (((0.003068155204134504 IN (0x14982038)), ('烁C17' IN (NULL, NULL)), CAST('-1615590584' AS BLOB))) AND (((((('Y')OR(x'')))OR(NULL)), ((NULL)<<(-1.30381765E8)), CAST('1' AS INTEGER)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '0 sz=-616332281 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((-6.35203598E8, 0.4743618102510123)) NOT BETWEEN ((CAST(NULL AS TEXT), NULL COLLATE BINARY)) AND ((0X15ddb993 COLLATE NOCASE, ((((((x'b7')AND(NULL)))AND(1.847681787E9)))AND('p'))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '608457866 sz=1847681787 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'30f4')<(x'')))<>(((1.843766385E9)OR(0.9793184097719085)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-757902307 sz=-2092100070 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=2131012904'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=931266565'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE (((x'', ' R薐7')) BETWEEN (('', -3.80708997E8)) AND ((x'', 0.5037243673625396)))  WHEN (('0.003068155204134504') BETWEEN (0x1477e262) AND (NULL)) THEN json_array_length(x'b19180') ELSE ((0.5787130268887571) NOT BETWEEN (0.5908037246653997) AND ('!Zx/N')) END; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((0.660650116673301, NULL))<((NULL, '1750014561006879492:996502401720983631--619913119721843461T-251900057891924749-1565T50:1078-䘊'))))AND(NULL)))OR((((-1.169506035E9, x'02', 0.2531803009711411, 'r', -9223372036854775808)) BETWEEN ((0X540a8c67, x'1606c8c7e0', 0.1334223390319471, 'n', NULL)) AND ((NULL, NULL, x'', 'ai', '-1364915766'))))))AND(((NULL) IS TRUE))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((~ (0.7873306839493331)))<>((('%(dJMkJ-P') IS FALSE))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
DELETE FROM sqlite_stat1 WHERE (((x''))<>(((x'' IN ('䏨ꄚQ'))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((x'f1db8c2b2b' IN ('6')))AND(CASE WHEN x'fb' THEN NULL WHEN NULL THEN x'' ELSE '' END)))OR((NOT ('-9223372036854775808')))))AND((~ ('-605241911')))))AND(((NULL) IS TRUE))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (x'' IN (x'')) COLLATE RTRIM; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL, '')) BETWEEN ((CAST(x'0a87' AS TEXT), (('I 6')IS NOT(0X65d5ad75)))) AND ((((NULL)LIKE('#')), CAST(x'81' AS INTEGER)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1630845407 sz=1919245330 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(x'0c' COLLATE NOCASE AS TEXT); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST((NULL IN ()) AS REAL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN (('')*('')) THEN CASE 1860385239  WHEN NULL THEN -447148756 ELSE x'bab5' END WHEN (((NULL)) BETWEEN (('-287613598')) AND ((0xffffffffe13e6e78))) THEN (('2058215252') NOT NULL) ELSE HEX(x'7b') END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-380708997 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE 1843766385; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ (((((((((((0.42119120460291926)AND(NULL)))AND(NULL)))AND(0.5291179575889686)))OR(0.6141436449828946)))AND(-130439580)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 sz=976113722'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.30447673666824315) NOT NULL))IS NOT('W5Xe' COLLATE BINARY)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((('-2109610389')AND(x'8ec6')))AND('')) IN (((0.19175272902476248)OR('-2064463220')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((CASE WHEN x'' THEN -286619625 WHEN '~~' THEN '931266565' END)OR((('-558414326')&(0.10462132661568735)))))AND(((((1451872936)AND(x'07')))AND(x'3c')))))AND(((0X5359d04a) BETWEEN ('618562927') AND (NULL)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '305180856 unordered'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((x'a5' COLLATE NOCASE)OR(PRINTF('-1926943202'))))AND(('2003717541' IN ()))))OR(CASE WHEN '184893080' THEN '297690481' WHEN x'88' THEN 'M' WHEN 'w*' THEN NULL WHEN '%j<Dm' THEN 0.5718771436063474 ELSE NULL END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 sz=1667878189 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=345514040 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '305180856 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '0 1 sz=1867147872 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '2 -650596313 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.16720870065065352, 0.37354013104782036)) NOT BETWEEN (((((0.1382270436881673, NULL, x'', 0.8745648014066603, x'49')) BETWEEN ((NULL, 0.021123608619768697, NULL, 0.003068155204134504, x'')) AND ((0.03738912288821028, '', 0xb1bd58c, NULL, '1789818853'))), ((NULL) IS FALSE))) AND (((x'cc' IN (0.8680590165866197)), ((x'cc') NOT NULL)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=1098088500'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 13689356 sz=-558414326'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((NULL)OR(x'19c0')))OR(NULL)))OR('i 6')))+(((x'32')<>('xQAlNkSB')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 2 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=-1017404822 unordered noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-790740875 21271092 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1555226408 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN x'2ab5e6c5' THEN CASE x''  WHEN '[' THEN x'8e' WHEN 'G' THEN 0.1399874336833602 END ELSE (('1836756861')+(NULL)) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=-1633765116'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(CASE NULL  WHEN '!' THEN 0.20954610747957159 END AS NUMERIC); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-480098256 sz=1230436426 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((x'e9', 0.7291417974009008, NULL, 0.8810132846682494)) BETWEEN ((0.4411999132935598, NULL, '-1681891871', 0.010645519583812768)) AND (('S', 'R}e䐍2', NULL, NULL))))>(((((((((-1371232154)OR(NULL)))AND(x'')))OR('gMd')))OR(0.23784727395044303)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((+ (NULL)))OR(((0.6187604698232919)IS(-1.067114523E9)))))AND(x'')))AND(NULL COLLATE BINARY)); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' sz=1863674525 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (('-1589618787' IN (x'cd', NULL)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((SQLITE_VERSION())OR(1.769291611E9 COLLATE RTRIM)))AND(highlight(x'', '887571368', 1870449014, -1267693353))))OR('!')))AND((('l')>(x'be')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE '536407814'; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=-1241990828'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1873804554 1468832677 sz=1162496076 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((HEX(DISTINCT NULL), (NOT (0.07930892585860216)), ((NULL) BETWEEN (0X37bbd2ee) AND (x''))))<=((((('1216388775', x''))==((0.6807617454181298, ''))), ((1e500) NOT BETWEEN ('1245804197') AND (x'')), ((x'8725')<('-2127402730'))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ (CAST(NULL AS NUMERIC))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1419359999 sz=-1546453311 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT ((('256605156')OR(x'54')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE COALESCE(DISTINCT ((('', NULL)) NOT BETWEEN ((x'32095f', '9၈TN')) AND ((NULL, NULL))), ((0.12880177442933394)>(NULL))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '0 1561487538 sz=2086404869 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE IFNULL(DISTINCT 0.14012134637140183, NULL) COLLATE BINARY; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '168841288 0 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((CAST('yqm' AS INTEGER))AND(CASE WHEN '' THEN 0xffffffffb3174872 END)))AND(CASE WHEN x'' THEN '' WHEN '-908476836' THEN NULL ELSE 'Vd[q+' END)))OR(CASE 1843766385  WHEN '258554064' THEN 0.40627130752137486 WHEN 0.044172733274880804 THEN '-1234102707' END)); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-1288202916 sz=1099775995'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1945259421 sz=-1183024007 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-1364915766 1 sz=1362569136'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((NULL COLLATE NOCASE)<=(((0Xffffffffba8c97ad)=(NULL)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '4 -2020962353 sz=-757902307 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-160993702 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE ((CASE 0.19175272902476248  WHEN '-1333870305' THEN '~od躝l' ELSE 1404466347 END) NOT BETWEEN ((((0.5164669802166773))=((x'be09')))) AND (LOWER('a'))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' sz=1730619547 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-679970047 -186874062 sz=343401058'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 sz=1715220646'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1655674309 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 sz=-286619625 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ (((x'') NOT BETWEEN ('-1809434267') AND (x'ff')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' sz=-2046289318 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '4 1469607446 sz=340162260 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '724766801 sz=1199036865 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1961489704 sz=-130381765 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1554698113 1'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=1111414401'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '2 1367184240'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ ((('峥IA]6u') BETWEEN (1047413736) AND (NULL)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE IFNULL(CASE '0t3vkp'  WHEN NULL THEN 0.1102659836341433 WHEN 'w' THEN x'9cfe' WHEN NULL THEN '1347645257' END, (NULL IN ())); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=-1768120199 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 3 0 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 1 3 sz=374010800 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1374657896 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(CHAR(NULL, x'ca5a') AS REAL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-435290329'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1291324146 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (((((0x392fd2c3)AND('618562927')))AND(x'5d')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((('953736497') BETWEEN (0.8194570590210998) AND ('-843294039')))AND(LOWER(DISTINCT -679574624))))AND(LOWER('0.5291179575889686'))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=1418013084 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((NULL)IS NOT(NULL)) COLLATE RTRIM; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((json_quote(0.17319563761750334))<=((- (0.720051464772481)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL COLLATE BINARY)AND((1.029704324E9 IN (NULL)))))AND(((NULL)<(0.8103543231504288)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '-1287524755 sz=929445258 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1 sz=-2058342109 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((0x16ba2f3b)OR('(#^')), NULLIF('', '0.50294349359328')))<=((('1149636822' IN ('', '0.9968753404868614')), ((0.6500900044179727) NOT BETWEEN (x'5b') AND (x'092a'))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 0 0 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL, 0X68c79426, '714411549')) BETWEEN ((CAST(x'776f71' AS TEXT), (((0.8810132846682494))>(('0.9990920255037324'))), CAST(NULL AS INTEGER))) AND ((NULL COLLATE NOCASE, (- (NULL)), (+ ('ur'))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '0 1 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=-1859527316 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1490565004 sz=1463127962 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NULL IN (0.003068155204134504)) COLLATE NOCASE; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1791157238 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2027326811 sz=-1043049020 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL)) BETWEEN (((('-228318577') NOTNULL))) AND ((CASE 0.5110989110487819  WHEN '0.9990920255037324' THEN 'R3f/틮_(' WHEN 1.269145269E9 THEN x'd0' ELSE x'ee98' END))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('-1' COLLATE NOCASE) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1759560461 0 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((NULL)OR(0.8392803826547917)))AND(x'')))AND('101352890')))OR(NULL))) NOT BETWEEN (((1121701740) IS TRUE)) AND (((1.7976931348623157E308) NOTNULL))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '303641772 sz=887571368 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULL; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('앛fj{' COLLATE BINARY) NOT BETWEEN (CAST(0.23784727395044303 AS TEXT)) AND ((('-1671210415')>=('ᡗc+x鮥{vC')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '-652230415 sz=-1362858458 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (LIKELIHOOD(DISTINCT NULL, '2131012904') IN ()); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ (CHAR(0.8103543231504288, 0xffffffffed9e19de))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('345514040' COLLATE BINARY) IS FALSE); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((('0.6807617454181298') BETWEEN ('{') AND (1047413736)), (NULL IN (0.6437225982604254)), JULIANDAY(0.7654291205671764, 1847681787, -2110192517)))<(((('Oᒍ [j{n') IS TRUE), IFNULL(x'8d', NULL), (NOT (NULL))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=1498468301 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2 sz=1480095135 unordered'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '2 1 2 sz=980308663'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((('풀z')OR(0.7644881130975221)))AND(NULL)))AND(NULL)) IN ((+ (0.22552769617154667)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '650200099 3 sz=-756491509'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-870242447 -1812225034 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1 sz=-1312942963 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.5884331282512838 IN ())) NOT BETWEEN (((x'')-(0.5020538013741196))) AND ((((((((((('-1473323174')OR('21271092')))AND(NULL)))AND(-1257231581)))OR(NULL)))OR(0.41244427236583137)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1722080680 714675661 sz=-146213395 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(0.43362553554098515 COLLATE BINARY AS INTEGER); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1082788502 sz=2131012904 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(('' IN (NULL)) AS BLOB); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '3 -1809434267 sz=2119503022 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((CASE WHEN x'3520' THEN -1050793507 END)OR(((NULL) NOTNULL))))OR(CASE -9.83853093E8  WHEN '-779561222' THEN 1.029704324E9 WHEN NULL THEN 0x415d4a37 WHEN 0.4888914897404325 THEN '1230436426' WHEN -383210715 THEN x'' END)))AND((('-450289885')<(0.6735710501648677)))))AND((((x'', 0.6776324744926034, NULL, '-1728737727'))<=((NULL, 0.07691189244289331, x'e38e', '0'))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-189128056 sz=-733448036 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '0 -1475318575 sz=920915982 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((load_extension('-1300915258', x'ba'))OR(UPPER('P'))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '3 sz=1618501163 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-316303965 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 1823802307'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((x'f873') IS TRUE) COLLATE BINARY; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ (CASE WHEN NULL THEN 0.13557839073463107 WHEN 0.9968753404868614 THEN 0.7377653910754213 ELSE x'48' END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1017404822 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '3 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '2 19571919'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE LIKELY('~'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE '1654447368'; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN NULL THEN NULL WHEN x'' THEN NULL ELSE x'00' END) IS TRUE); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1 sz=-635203598 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE SQLITE_COMPILEOPTION_GET((('-1098505114') ISNULL)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ (((NULL) IS TRUE))); -- 1ms;
DELETE FROM sqlite_stat1 WHERE CAST((- (x'')) AS REAL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '580825580 0 sz=-1408674184 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=1654447368'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=1040990702'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '381300539'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-157788152'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=903946666 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE '9/'  WHEN 'C' THEN 0.4555420085827565 WHEN 0.07878449846418922 THEN NULL END COLLATE NOCASE; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '1324282019 2 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2 sz=856469861 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((x'', '', '')) NOT BETWEEN (('0.1815678517994589', '', '')) AND (('', 0.11999096784433394, x'')))) IS FALSE); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 sz=768350880 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NULL COLLATE BINARY IN ()); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1 -306322859 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-295226773 -983853093 sz=88694743'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '3'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '-335313520 3 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '0 1 sz=-1169506035 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '883066211 0 0 sz=106409604 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1 -841203176 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=935056110 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE UNLIKELY(DISTINCT ((((((NULL)AND(x'')))OR(NULL)))OR(0X38f1decd))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '4 1 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE 0x2b76a89 COLLATE BINARY  WHEN ((0Xffffffffd5d31bc0)GLOB(NULL)) THEN (((('382935428')AND(0.010645519583812768)))AND('-1369481446')) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 sz=1806027696'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 1 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '0 843250806 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '-1091162328 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('')) NOT BETWEEN ((((NULL)OR('E鈱CB|KN')))) AND (((('-1408674184') BETWEEN ('') AND (NULL))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-2043506392 unordered noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1630845407 sz=-551840072 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1444450195 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (CAST(x'179a62' AS BLOB))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '-2050664265 2090438534 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' sz=1121701740 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 1 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE x'06'; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=1763188369 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=1409977447 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('縎k!YAMD' IN (x'05', 0.17699231715080033))) NOT BETWEEN (UPPER('-1809434267')) AND ((~ ('ᡗc+x鮥{v}')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- ((- (2129037222)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN '-1036471096' THEN '1849580211' ELSE 'p' END)<=(((NULL) NOT BETWEEN (2.1271092E7) AND (0.8389967137769133)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-761211178'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((x'e3935d') IS TRUE) COLLATE NOCASE; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '0 sz=-915029424 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-864067627 sz=-195768744 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'')|('')))||((NOT (0.498896056637424)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('1998029226') IS FALSE)) IS TRUE); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 sz=-1358152625 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=1299638610 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((rtreenode('-264351497', NULL)) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ ((((NULL, NULL, '1867486636')) NOT BETWEEN ((x'4b', NULL, 0.1334223390319471)) AND ((x'', '9၈TN', NULL))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '389161701 1 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '-2079887660 -78983060 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST('' AS BLOB)) BETWEEN (CAST(x'' AS INTEGER)) AND (((2041190929) NOT BETWEEN (2100156432) AND (0.6562398484602361)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '343401058 noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 sz=1311496794'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1148829423 sz=-983853093 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '-186149553 0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 sz=-1904201690 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 -1443104132 sz=1698179851 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-2123018091 -790740875 1214574374'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1 sz=1245804197'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2 sz=22873040'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '101352890 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((((NULL)AND(x'b9')))OR(0.9079857999125378)))OR(0.41013189245790904)))OR(0X3d600a84)))OR(0X6d1bc909)))+((((x'fe', NULL)) BETWEEN ((x'20b914', '0.2807140998460379')) AND ((0.011496114106102517, 0.2880099749965507))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ (((((((((((NULL)AND(NULL)))AND(0.45529239877072547)))OR(NULL)))OR('931266565')))AND('1143830605')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((x'6a')OR(NULL)))AND(NULL)))AND(x''))) BETWEEN (((-5.58414326E8) BETWEEN (x'281e292f') AND (NULL))) AND (CAST(NULL AS BLOB))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((~ (0.6723382721122918)) IN ((('{Tb')||(502155795)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 -1358152625 0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((- (1.269145269E9)))OR((~ ('FALSE')))))AND((('dm') NOT BETWEEN ('?I/[O') AND (x'4749')))))OR(CASE x''  WHEN -357058633 THEN '21271092' ELSE '-2127402730' END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '144436174 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN (('1%e	F') NOTNULL) THEN x'9b' ELSE ((NULL)>(0.6735710501648677)) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 sz=-342862829 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('-61772043', NULL, -1408674184)) NOT BETWEEN ((0.7476133037444082, x'90', '8쥐 \vFHv!')) AND ((NULL, 0xffffffffc72bcd5c, x'cc'))) COLLATE RTRIM; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=1847044235 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '0 sz=-1444872546'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((CAST(0.31434656174292774 AS TEXT))OR(IFNULL('1654447368', -386705810))))AND((((x'', NULL)) BETWEEN ((NULL, 'i')) AND ((NULL, 0.25771605926269514))))))OR((NULL IN (0.2242688674812272, '-286619625')))))AND('-2048678004' COLLATE NOCASE)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 sz=768350880 unordered noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '531422434 1 sz=305180856 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(json_insert(x'41', 0.4475426279515763, 0.5496630903413352, NULL, 0.21707888667148978) AS REAL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (SQLITE_COMPILEOPTION_USED(NULL))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '4'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1316367954 sz=-1163526381'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE ' '  WHEN x'' THEN 0.31774579636391576 WHEN -1622182154 THEN '' WHEN NULL THEN '
a)?hV-q' WHEN '0.546465383853977' THEN x'6d5913ae0d' WHEN NULL THEN 0.296125741586469 END)<(((x'') NOT BETWEEN ('-671438215') AND (NULL)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' sz=2138250237'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.22521193587512012)&('1562692256'))) BETWEEN (CASE WHEN '5	>u)' THEN '953273932' WHEN x'4fb4' THEN 'X' ELSE 0.5462418492997738 END) AND (((0.2792420006972154)=(1.654447368E9)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('1173938805')>(1.0135289E8))) BETWEEN ((+ ('pjLZUTCy'))) AND (((0.8479683404300499) BETWEEN (-1489921066) AND ('䰳.')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 0 sz=335759110 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE '101352890'; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=396423638 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '929445258 3 sz=-1184140912'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('J㺘+,' COLLATE NOCASE)LIKE(CASE WHEN NULL THEN NULL WHEN NULL THEN '7V' END)); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '21271092 sz=1644449794 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-2063042775 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((IFNULL(0.007717433547437147, NULL))IS(CAST(NULL AS NUMERIC))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('-130381765' COLLATE RTRIM)OR('0.010645519583812768' COLLATE NOCASE)))AND('mN')); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (CAST('ഺn' AS NUMERIC) IN (LIKELY(0.06759315482650607))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1 -352651065 sz=1168998476'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '585369841 sz=-9223372036854775808'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-1728737727 sz=218252138 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((CASE 1920246718  WHEN '+x쪕HRE' THEN x'' WHEN '-1628510110' THEN x'' END)OR(CASE ''  WHEN x'' THEN NULL WHEN NULL THEN '﨎(ZB9ZVG)' ELSE NULL END)))AND((- (NULL)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '3 1 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '381300539 sz=1785593235 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((('374010800')) NOT BETWEEN ((NULL)) AND (('g'))) AS TEXT); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-549026217 2 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-1265834335 782080665 sz=-1681891871 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '-1244469094 sz=1326923986 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL)AND((0.14345098453513683 IN (x'31')))))AND(CAST(-1.067114523E9 AS NUMERIC))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '-1361577215 sz=-616332281'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((1.654447368E9)OR(x'')))OR(0.6335446545921387))) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('h~M-QT') BETWEEN (-1016226496) AND (0.1382270436881673))) ISNULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (0.0)) COLLATE BINARY; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1367184240 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1728737727'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.3927599753978612) BETWEEN ('5WvM\') AND (x'e8'))) BETWEEN ('419865098') AND (CASE '-1198311907'  WHEN '	n' THEN 0.7873306839493331 WHEN 9.20915982E8 THEN x'' WHEN NULL THEN x'bae96880' ELSE x'6c' END)); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2011659437 sz=-863899802 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (SUBSTR('', x'') IN (((-616332281) BETWEEN (0.09417163955111374) AND (NULL)), (+ (NULL)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULLIF(((NULL)<=(NULL)), 0.4605703594417102); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '-637031859 0 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=1163266202 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((x'9ce9') BETWEEN (x'') AND (0Xffffffffd21c41f9)) AS INTEGER); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=849021712 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-42269138 sz=-1 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE -1120164401 COLLATE BINARY; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((NULL)OR('0.1382270436881673')))AND('')))OR('('))) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((' ') NOT BETWEEN ('1841692098') AND ('ri')) AS BLOB); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=1734044217 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '-197939569 sz=1458110164 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE 0X5c96bc45; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (x'f942c3' COLLATE BINARY IN (CAST(NULL AS INTEGER))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ('1730619547' IN ((((x'')) BETWEEN ((NULL)) AND ((0.3473685589869048))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1597231582 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1047413736 -960066337 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1474719247 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=1189821142 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '4'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 sz=-1558698819 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=351399224 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN (((x''))<=((NULL))) THEN CASE x'4c2124'  WHEN 0.04446487854846226 THEN x'20' END ELSE (((('-1312942963')OR('0.4888914897404325')))AND(NULL)) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '2'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ (CASE WHEN '-487175146' THEN x'4b47' END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1630845407 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1809434267'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULL; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ' '; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN 0.2830895713247066 THEN -1.312942963E9 WHEN '-1732506681' THEN '350714195' ELSE x'43bda11c' END) IS TRUE); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1644449794 sz=-1002203548 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '-908945653 1734865838 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2057314055 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((TIME(x'87165707', x'f9ba', NULL, 0.7476133037444082, '-472283195', NULL, x'b39a94')) NOT BETWEEN (0xffffffff8a63a35c COLLATE BINARY) AND ((('u]Is') BETWEEN (x'') AND (x'd7')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=-47244888 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-757902307 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=258554064'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN NULL THEN x'c8' WHEN x'1338d4e581' THEN 0.21876957723764157 ELSE 'o' END)<<((((((('g i')OR(x'09')))AND(0.0)))OR('618562927')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1125002560 0 sz=-357372322 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '986855248 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ''); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '-105048065 1148994335 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE ((('-483834161', NULL, 0.50294349359328, 's'))>=((0.8252498278563958, '?', 0.4356450596965944, -2017094303)))  WHEN ((('1#遙)'))==(('0'))) THEN ((((((((0.5212185881941025)OR(0.6286766463344724)))OR('-1017404822')))OR(x'8a57efe75b29')))OR('')) ELSE ((((((((((((x'')AND(x'e633')))AND(0.6701400940585708)))AND(x'')))OR(0xffffffffa3610e8b)))OR(0xffffffff8c4af0cd)))OR('z_')) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL)||(x'18'))) BETWEEN ('맟''2y,_B') AND (((x'ea65') IS TRUE))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST('5㹳KZ7.2h' AS TEXT)) NOT BETWEEN (((NULL)GLOB(NULL))) AND (((NULL)AND(NULL)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '-1628510110'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((- (x'')))>=((((((((('-1561597946')OR('^E7<7p')))AND('754692099')))AND(0.5708474941955132)))OR('A4')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE TRIM(CASE x''  WHEN x'a0' THEN x'' ELSE '0.2531803009711411' END); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.40360165751948196)OR('RR'))) ISNULL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-2038281165 sz=738184732 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE json_remove('32506213', 1.029704324E9, 0x49974bd3, x'8f') COLLATE NOCASE; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=302126787 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '0 2 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(x'33282758cd91' COLLATE RTRIM AS NUMERIC); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2117986680 sz=-558414326 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('-652094336', 0.7101112566789668)) BETWEEN (('-1017404822', 0.15577326821348492)) AND ((0.7286027160695054, x''))) COLLATE RTRIM; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((('920915982')|(768350880))))!=((((NULL)IS NOT(0.716817497354213))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE 0.37354013104782036 COLLATE BINARY  WHEN UNLIKELY(DISTINCT -1207829166) THEN (((',', '3', x'ae'))<=(('0.9990920255037324', x'', 0.7351518619204459))) WHEN NULL COLLATE RTRIM THEN (((x'', -6.24547642E8, x'')) BETWEEN (('343401058', 0.6939011162521923, NULL)) AND (('-1364915766', NULL, '-913702164'))) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- ((NULL IN ()))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((TRIM('1029704324', NULL))AND((((NULL))>=(('s1쟞Wd-'''))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=-2067531474 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '258554064 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN ((x'fb') IS FALSE) THEN ((NULL) BETWEEN (0.5793857698964155) AND (1.230436426E9)) WHEN 0X7bdbb1ff THEN ((0.3758622162396863)|('-544874091')) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (CASE WHEN NULL THEN x'2e' WHEN '讕	u!,' THEN NULL ELSE x'ecf0fd' END IN (LOWER('345514040'))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL, x'830c')) NOT BETWEEN (((('x')OR('1424492535')), ((x'')IS NOT('')))) AND (((('2017092631') BETWEEN (NULL) AND (0Xffffffffa0565462)), IFNULL(-1929351430, 0.5074663041096059)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-513767285 sz=-9223372036854775808'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ (0x1a400a71)); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-70308485 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- ((- (x'')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((0.7527991839718958) NOT NULL) AS NUMERIC); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' sz=-390480192 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE (NULL IN (6.18562927E8, x'7a8c'))  WHEN ((NULL) BETWEEN (0X629cdd08) AND (NULL)) THEN ((0x3a7a6a46)IS(NULL)) WHEN CAST('10遙)' AS TEXT) THEN (('8쥐 \vFHv!')-(NULL)) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN 's' COLLATE RTRIM THEN COALESCE(DISTINCT '', '1913119301') ELSE ((856790294)LIKE('')) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((LIKELIHOOD(DISTINCT -841203176, x'fb95bba5'), CAST('찿,
' AS INTEGER), ((NULL) NOT NULL)))!=(((((0.1707191048844039)) BETWEEN (('m')) AND (('0.8175947210099783'))), ' )' COLLATE NOCASE, 0.6141436449828946))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-1981463629 2 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' unordered'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((x'62') BETWEEN (NULL) AND (x'd6')) COLLATE NOCASE; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((+ (x'6b'))) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (TRIM(NULL, -1074307421))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULL; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '120891608 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '-1635255709 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE (('') NOT BETWEEN ('') AND ('920915982'))  WHEN TYPEOF('>') THEN CAST(NULL AS INTEGER) ELSE (('0.7654291205671764') IS FALSE) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN (507500185 IN ()) THEN '' COLLATE RTRIM END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0 sz=-1383652887 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=-230484207'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=2066962416'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1312942963 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (CAST('y1' AS INTEGER) IN ()); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-663151929 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-1307821774 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1159574825 sz=1299638610 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=-829206148 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST(2077995519 AS BLOB)) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '1 1273238050 sz=1235070933'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1382839242 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 sz=-1791157238 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE x''; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 1 sz=-1067051256 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-1352208258 9223372036854775807 0 sz=1121701740'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=-1010446032 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(LIKE('0.7654291205671764', 249937403) AS REAL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 369749454 1 sz=-326459721'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=-664043552 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE 0.7764824796406755  WHEN 0.2758252894556561 THEN 0.49914220467046966 END) BETWEEN (((NULL)*(1626730385))) AND ((('') BETWEEN (0.9905691238865808) AND (0X40879ebe)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((-0.0))>((x''))) IN (x'a03676' COLLATE RTRIM)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (CAST('{' AS NUMERIC))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL, 0.09638449786052905, 0.8424928219947014, 0.6807617454181298)) NOT BETWEEN ((NULL, '1750014561006879492:996502401720983631--619913119721843461t-251900057891924749-1565t50:1078-䘊', NULL, NULL)) AND (('1016608984', '-204768578', x'3012', '-652094336'))) IN ()); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2 sz=-926935550 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('D', ((NULL) NOTNULL)))=((((((((((NULL)OR(0Xffffffff89c7999e)))AND(NULL)))AND('1868618155')))OR(0x32809f86)), (('381300539')-(x'c43dd6'))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (((x'') BETWEEN (NULL) AND ('184893080')))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=1239723285 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '853152020'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=-296140984 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('K{j)19e') ISNULL)) BETWEEN (CAST(1841692098 AS INTEGER)) AND (x'01')); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '-2127402730 sz=251371165 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST(0.09267506509510481 AS REAL))>(('0.5138318291476706' IN ()))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=1802760224 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.5314512648498401)OR('b*'))) IS TRUE); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((('zvN}a')AND(0.7157941027224929)))OR(NULL)))AND(830638658))) BETWEEN (x'9a324e') AND (x'6a50' COLLATE NOCASE)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST('1245804197' AS INTEGER)) NOT BETWEEN ((NOT (NULL))) AND ((NOT ('SY#U)')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '724715347 sz=-973193629 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((- ('-712961009'))))<=(((NOT (-1451949371))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '2102002512 sz=983834100 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '919570921 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '0 355021190 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 sz=1128025275 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '-1070056480 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 sz=1403683935 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2131167652 sz=1000239876 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(CASE '-1210593421'  WHEN '1369824338' THEN -380708997 WHEN 't' THEN '5WvM\' WHEN x'5c34' THEN 0.5415888801283472 END AS NUMERIC); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((NULL)AND(NULL)))AND('v''FdNs')))AND(NULL)))AND('258554064'))) ISNULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE json(CASE WHEN '' THEN '఩룂' WHEN NULL THEN 1.029704324E9 END); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((NULL) ISNULL), ((NULL)|(x'bf')), COALESCE(x'23f1d9', '1843766385'), NULL, (((NULL, 1.847681787E9)) BETWEEN ((x'7b', 0.5212382029364333)) AND ((x'79', x'c1')))))<>(((((x'bf0f', x''))<(('', x''))), (((((((((('')OR('0.718401191265116')))AND('')))OR(NULL)))OR(0.7082898689460532)))OR('493010210')), CASE WHEN 0.5894237132641037 THEN 1.245804197E9 WHEN x'' THEN 0.35473579895554985 ELSE x'' END, (((x'e8')) NOT BETWEEN ((0.8181731327378103)) AND ((1895153235))), ((0.010645519583812768) BETWEEN ('') AND ('*Bs麷U6JI)'))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '-1564083503 sz=-983853093 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((IFNULL(DISTINCT x'', -1.017404822E9))/(((-1672189468) IS FALSE))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.6183059872324096) NOTNULL))<<(MAX(NULL, 0.6187604698232919))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 -45256518 sz=-1990989265'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 1 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '1 sz=931266565 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE LIKELY(DISTINCT x'82'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=714411549 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-130381765 0 sz=-616332281 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 -624547642 sz=1730619547'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE x'9b94' COLLATE NOCASE  WHEN ((((((((0.7240002849628717)OR(x'')))AND(x'a92e')))OR(NULL)))AND('M')) THEN CASE WHEN '㲁Xj' THEN x'' WHEN x'88' THEN '1644449794' END ELSE (('1841692098') IS FALSE) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '-1809434267 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 1 sz=-1342973712 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' sz=1083820760 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '994330352 4 sz=-616332281 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (x'03' IN ('#mxnrV', '')) COLLATE RTRIM; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((~ (0.40553109719089564))) NOTNULL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '5 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN (0xffffffffca873b59 IN ()) THEN (('-1106311274')>>('X')) WHEN ((x'') NOT BETWEEN ('381300539') AND (NULL)) THEN CAST(0x27a6d0e5 AS INTEGER) WHEN ((x'')>('')) THEN CASE x''  WHEN 0X2c6d801d THEN 0xffffffff8835b228 WHEN NULL THEN x'' WHEN -1068201013 THEN 'sFXX' ELSE '-1730135061' END ELSE ((-5.58414326E8) NOTNULL) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST('' AS BLOB); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=-326459721 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE UNICODE(x''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '-555098984 1 sz=-326459721 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.9821082078255299) NOT NULL) IN ()); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (x'')); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '297690481 1 unordered noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE ((('_8鮥5z''')) NOT BETWEEN ((((((0Xffffffff84886477)AND(x'')))AND(NULL)))) AND ((CAST('?Zf' AS NUMERIC)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((0.10920975587197512 COLLATE BINARY)>=((('ur') BETWEEN (0.4196999138371731) AND (x'e2')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '-286619625 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=305180856 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=92309318 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', ' sz=-923542683 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '-841203176 593409590'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=1230436426 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'38' IN ()), NULL))=((((((((((-1263224952)AND('﨎(ZB9ZVG)')))AND(0xffffffff85503123)))AND('615923876')))OR(0.41244427236583137)), ('-2127402730' IN (x'16'))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=1747013335 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', '1841692098 1092951847 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '1 sz=720203596 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '2108333778 2 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE json_array((NULL IN ('8')), (0.6774512957764308 IN (x'90')), ((0.6141436449828946)%(NULL)), CAST(0.9079857999125378 AS NUMERIC)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((0x2dba992a)>>(0.9532517456577453)) COLLATE RTRIM; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((NULL)<(0.23547005647376107)), ((((x'')OR('184893080')))OR(0.015428511119858657))))>((((0.9631588809685769)*(0xffffffffab7929ed)), 0.12412138894346281 COLLATE BINARY))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '-1591475189 sz=2077995519 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '0 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', ' sz=272567796 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'v0', '1 sz=1559502281 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE SQLITE_COMPILEOPTION_USED(((x'3f')<<(0.3504397304594671))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ (x'e8223f' COLLATE RTRIM)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '111749977 sz=528928759 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE '618562927'  WHEN x'' THEN 0.9442414906643765 WHEN NULL THEN 'l2r*ꩍT' WHEN x'' THEN 'g' WHEN 0.12721529668988718 THEN x'81daf9' END) BETWEEN (NULL) AND (('-1809434267' IN (0x7411811f)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE '-671556967'; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((NULL)OR(0.16658344546584758)))OR('21271092')))OR(0.9267483356431364)))OR(NULL)) IN ((~ (0.3255822232972876)), ((NULL) NOTNULL))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'vt1', ' sz=1752195066 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', '737181761 -2129619567 sz=-971037073 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'vt1', ' sz=-2009069347 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '1 sz=-1861908857 unordered noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '3 sz=-1920410967 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'v0', '0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '4 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((CAST(x'' AS BLOB)))<=((CASE WHEN 0X16ba2f3b THEN 0.1642586315200022 END))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE x''; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
UPDATE OR ROLLBACK vt1 SET c0 = '-2064521078' WHERE (((vt1.c1 IN (vt1.c0, vt1.c1)))>(DATE(vt1.c1, vt1.c1, vt1.c0))); -- 0ms;
REINDEX  vt1; -- 0ms;
UPDATE OR ABORT vt1 SET c0 = 0.09093202050697313, c0 = 1541711147 WHERE 0.20291495214691246 COLLATE BINARY; -- 1ms;
UPDATE OR ABORT vt1 SET c1 = '', c1 = 0.12836055555548387, c0 = NULL; -- 0ms;
PRAGMA main.optimize; -- 0ms;
COMMIT TRANSACTION; -- 0ms;
REINDEX; -- 0ms;
INSERT OR ABORT INTO vt1 VALUES ('-1349688926', 1.12170174E9), ('Ha섍/Y,숄T', NULL); -- 1ms;
UPDATE vt1 SET (c1, c0)=(NULL, 'xf') WHERE ((QUOTE(vt1.c1))GLOB(CAST(vt1.c1 AS BLOB))); -- 1ms;
UPDATE OR IGNORE vt1 SET (c0, c1)=(NULL, '#峃v8TG'); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
PRAGMA wal_autocheckpoint = 2484293071885434988; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR FAIL vt1 SET c0 = '-326459721', c1 = NULL; -- 0ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
UPDATE OR ABORT vt1 SET (c1)=('-501434237'); -- 1ms;
UPDATE OR FAIL vt1 SET c0 = 'S', c1 = x'94' WHERE (((vt1.c1, vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((((NULL) NOT BETWEEN (vt1.c1) AND (vt1.c0)), CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 0.2603991473206736 WHEN vt1.c0 THEN vt1.c1 END, CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, vt1.c0)) AND ((NULL, (NOT (vt1.c1)), TRIM(vt1.c1, vt1.c1), vt1.c0))); -- 0ms;
UPDATE OR ROLLBACK vt1 SET (c1, c0, c1)=(0.5767436931972209, 0Xffffffffaa9f1038, '2077995519') WHERE ((vt1.c1) ISNULL); -- 0ms;
PRAGMA main.locking_mode; -- 0ms;
REINDEX; -- 0ms;
UPDATE OR ABORT vt1 SET (c1, c0)=('1053220806', NULL) WHERE LIKE(TYPEOF(vt1.c1), ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)), '0'); -- 0ms;
UPDATE OR IGNORE vt1 SET c0 = 0.9079857999125378 WHERE ((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 END)>=(IFNULL(vt1.c1, vt1.c1))); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 1183542998); -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 11); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('automerge=11'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
UPDATE OR IGNORE vt1 SET c0 = NULL; -- 0ms;
UPDATE vt1 SET c0 = -1500609161, c0 = 0.7685189431003251; -- 1ms;
ROLLBACK TRANSACTION; -- 2ms;
PRAGMA temp.legacy_file_format; -- 0ms;
UPDATE OR ABORT vt1 SET (c1, c1, c1)=(NULL, '-960476273', 0.021953387542100855) WHERE CAST(UNLIKELY(vt1.c1) AS REAL); -- 0ms;
UPDATE OR FAIL vt1 SET (c1, c0)=(x'5f', 'R'); -- 0ms;
REINDEX; -- 1ms;
PRAGMA temp.short_column_names = true; -- 0ms;
INSERT OR FAIL INTO vt1(c1) VALUES ('0.5908037246653997'), (1842269152); -- 1ms;
REINDEX NOCASE; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
REINDEX; -- 0ms;
UPDATE OR IGNORE vt1 SET c0 = '', c0 = NULL, c1 = x'c0', c1 = 0.5718771436063474 WHERE '-1122952596'; -- 1ms;
UPDATE OR IGNORE vt1 SET (c1)=('u2X('); -- 1ms;
UPDATE OR REPLACE vt1 SET (c0, c0, c1)=(NULL, '20v', 0X401a84b2); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR FAIL INTO vt1(c1) VALUES ('0.43362553554098515'); -- 1ms;
UPDATE OR IGNORE vt1 SET c1 = '2011659437', c1 = '-786310320'; -- 0ms;
REINDEX; -- 0ms;
BEGIN  TRANSACTION; -- 1ms;
PRAGMA wal_checkpoint(FULL); -- 0ms;
PRAGMA temp.auto_vacuum; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR REPLACE vt1 SET (c0, c1)=('0.044172733274880804', 0.6714906619070927); -- 0ms;
ANALYZE; -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', 2028901260);
; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 1551459036); -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
UPDATE vt1 SET c1 = 768350880, c0 = x'', c0 = -774921460; -- 1ms;
UPDATE OR IGNORE vt1 SET c0 = 0.40656515693483086 WHERE (~ (0.7842023766645182)); -- 0ms;
PRAGMA temp.recursive_triggers; -- 0ms;
UPDATE OR ABORT vt1 SET (c1, c0)=(0.3423529245491148, x'') WHERE ((vt1.c0) BETWEEN (((vt1.c0)-(vt1.c1))) AND (vt1.c1)); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR ABORT vt1 SET (c0, c1)=('1915228274', x''); -- 0ms;
VACUUM main; -- 0ms;
VACUUM temp; -- 0ms;
PRAGMA main.threads = -6141766138710585503; -- 0ms;
UPDATE vt1 SET c0 = 'ഺN' WHERE (- ((+ (1384738260)))); -- 0ms;
PRAGMA wal_checkpoint(PASSIVE); -- 0ms;
PRAGMA temp.foreign_keys; -- 0ms;
UPDATE vt1 SET (c1, c1)=('j}', '2131012904'); -- 1ms;
PRAGMA main.foreign_keys; -- 0ms;
END TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c1 AS BLOB)) ISNULL));
SELECT ALL * FROM vt1 WHERE (((((CAST(vt1.c1 AS BLOB)) ISNULL))AND(IFNULL(DISTINCT (((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c0))), CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END)))) ORDER BY (((~ (vt1.c0)))>=(((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))) ASC  NULLS LAST, CASE 0.4724252425436468  WHEN vt1.c1 THEN vt1.c1 END, CASE WHEN (vt1.c1 IN (vt1.c1, vt1.c0)) THEN (((vt1.c0))=((vt1.c0))) WHEN (x'' IN (vt1.c0)) THEN (vt1.c0 IN (vt1.c1)) WHEN CAST(vt1.c0 AS TEXT) THEN ((vt1.c1)&(vt1.c1)) END INTERSECT SELECT ALL * FROM vt1 WHERE (((((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN 0.6193369905808567 WHEN -510045819 THEN vt1.c0 ELSE vt1.c1 END)OR(((vt1.c1) BETWEEN (0.9385665389646392) AND (vt1.c0)))))OR(x'd375' COLLATE BINARY))) ORDER BY (((~ (vt1.c0)))>=(((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))) ASC  NULLS LAST, CASE 0.4724252425436468  WHEN vt1.c1 THEN vt1.c1 END, CASE WHEN (vt1.c1 IN (vt1.c1, vt1.c0)) THEN (((vt1.c0))==((vt1.c0))) WHEN (x'' IN (vt1.c0)) THEN (vt1.c0 IN (vt1.c1)) WHEN CAST(vt1.c0 AS TEXT) THEN ((vt1.c1)&(vt1.c1)) END;
SELECT ALL * FROM vt1 WHERE (((CAST(vt1.c1 AS BLOB)) ISNULL));
SELECT ALL * FROM vt1 WHERE (((((CAST(vt1.c1 AS BLOB)) ISNULL))AND(IFNULL(DISTINCT (((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c0))), CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END)))) ORDER BY (((~ (vt1.c0)))>=(((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))) ASC  NULLS LAST, CASE 0.4724252425436468  WHEN vt1.c1 THEN vt1.c1 END, CASE WHEN (vt1.c1 IN (vt1.c1, vt1.c0)) THEN (((vt1.c0))=((vt1.c0))) WHEN (x'' IN (vt1.c0)) THEN (vt1.c0 IN (vt1.c1)) WHEN CAST(vt1.c0 AS TEXT) THEN ((vt1.c1)&(vt1.c1)) END INTERSECT SELECT ALL * FROM vt1 WHERE (((((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN 0.6193369905808567 WHEN -510045819 THEN vt1.c0 ELSE vt1.c1 END)OR(((vt1.c1) BETWEEN (0.9385665389646392) AND (vt1.c0)))))OR(x'd375' COLLATE BINARY))) ORDER BY (((~ (vt1.c0)))>=(((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))) ASC  NULLS LAST, CASE 0.4724252425436468  WHEN vt1.c1 THEN vt1.c1 END, CASE WHEN (vt1.c1 IN (vt1.c1, vt1.c0)) THEN (((vt1.c0))==((vt1.c0))) WHEN (x'' IN (vt1.c0)) THEN (vt1.c0 IN (vt1.c1)) WHEN CAST(vt1.c0 AS TEXT) THEN ((vt1.c1)&(vt1.c1)) END;
SELECT * FROM vt1 WHERE (TRIM(((NULL)OR(vt1.c1)))) ORDER BY 0xfffffffff83a883b ASC  NULLS FIRST, (((((vt1.c1))<((vt1.c0))))>(json_remove(vt1.c0, vt1.c1, vt1.c1))), ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1))) NOTNULL)  NULLS LAST;
SELECT * FROM vt1 WHERE (TRIM(((NULL)OR(vt1.c1)))) ORDER BY (~ (0.39405012825493135)) COLLATE RTRIM  NULLS LAST, (((((vt1.c0, vt1.c0, vt1.c0))<>((NULL, vt1.c0, 0.3865146114192197)))) BETWEEN (CASE 0xffffffff81715882  WHEN -1.287524755E9 THEN x'0e' WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END) AND (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END))  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE ((((vt1.c0)-('1e500')) IN ())) ORDER BY (~ (0.39405012825493135)) COLLATE RTRIM  NULLS LAST, (((((vt1.c0, vt1.c0, vt1.c0))!=((NULL, vt1.c0, 0.3865146114192197)))) BETWEEN (CASE 0xffffffff81715882  WHEN -1.287524755E9 THEN x'0e' WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END) AND (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END))  NULLS LAST;
SELECT * FROM vt1 WHERE (TRIM(((NULL)OR(vt1.c1)))) ORDER BY 0xfffffffff83a883b ASC  NULLS FIRST, (((((vt1.c1))<((vt1.c0))))>(json_remove(vt1.c0, vt1.c1, vt1.c1))), ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1))) NOTNULL)  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN x'88' THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END) NOTNULL));
SELECT * FROM v0 WHERE (((CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN x'88' THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END) NOTNULL)) INTERSECT SELECT * FROM v0 WHERE ((((CAST(v0.c2 AS TEXT), v0.c1, ((((((((v0.c0)AND(v0.c2)))AND(v0.c0)))OR(v0.c0)))OR(v0.c2)), (((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c2)))))<>((v0.c2, ((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c0)), ((v0.c1) ISNULL), ((v0.c1) IS FALSE)))));
SELECT ALL * FROM v0 WHERE (((CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN x'88' THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END) NOTNULL));
SELECT * FROM v0 WHERE (((CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN x'88' THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END) NOTNULL)) INTERSECT SELECT * FROM v0 WHERE ((((CAST(v0.c2 AS TEXT), v0.c1, ((((((((v0.c0)AND(v0.c2)))AND(v0.c0)))OR(v0.c0)))OR(v0.c2)), (((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c2)))))<>((v0.c2, ((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c0)), ((v0.c1) ISNULL), ((v0.c1) IS FALSE)))));
SELECT ALL * FROM v0 WHERE (CASE WHEN ((v0.c1)LIKE(v0.c1)) THEN (v0.c1 IN (v0.c0, v0.c0)) WHEN ((v0.c0) IS FALSE) THEN (v0.c0 IN ()) END) ORDER BY (+ (TYPEOF(DISTINCT v0.c0))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (CASE WHEN ((v0.c1)LIKE(v0.c1)) THEN (v0.c1 IN (v0.c0, v0.c0)) WHEN ((v0.c0) IS FALSE) THEN (v0.c0 IN ()) END) ORDER BY ((((((CAST(v0.c2 AS INTEGER))OR(((v0.c0)LIKE(v0.c0)))))AND((~ (v0.c1)))))AND('U'))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c1)<>(v0.c0)) AS TEXT)) ORDER BY ((((((CAST(v0.c2 AS INTEGER))OR(((v0.c0)LIKE(v0.c0)))))AND((~ (v0.c1)))))AND('U'))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CASE WHEN ((v0.c1)LIKE(v0.c1)) THEN (v0.c1 IN (v0.c0, v0.c0)) WHEN ((v0.c0) IS FALSE) THEN (v0.c0 IN ()) END) ORDER BY (+ (TYPEOF(DISTINCT v0.c0))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (CASE WHEN ((v0.c1)LIKE(v0.c1)) THEN (v0.c1 IN (v0.c0, v0.c0)) WHEN ((v0.c0) IS FALSE) THEN (v0.c0 IN ()) END) ORDER BY ((((((CAST(v0.c2 AS INTEGER))OR(((v0.c0)LIKE(v0.c0)))))AND((~ (v0.c1)))))AND('U'))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c1)<>(v0.c0)) AS TEXT)) ORDER BY ((((((CAST(v0.c2 AS INTEGER))OR(((v0.c0)LIKE(v0.c0)))))AND((~ (v0.c1)))))AND('U'))  NULLS LAST;
SELECT MIN(v0.c2) FROM vt1, v0 WHERE (('0.8175947210099783' IN ()));
SELECT DISTINCT MIN(v0.c2) FROM vt1, v0 WHERE (('0.8175947210099783' IN ())) INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt1, v0 WHERE ((~ (0.14912946047085152)));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((('-999085923') IS TRUE)) ORDER BY 0.7995406701251893 DESC  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((('-999085923') IS TRUE))AND((((vt1.c0, vt1.c0)) BETWEEN ((LIKELY(NULL), (vt1.c1 IN ()))) AND ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END, '')))))) ORDER BY 0.7995406701251893 DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN 0.8349094066973546 THEN (((((('-570084115')OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c1)) WHEN ((((vt1.c1)AND(vt1.c0)))AND(1.843766385E9)) THEN (vt1.c0 IN ()) ELSE x'b30f' END) ORDER BY 0.7995406701251893 DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON vt1.c0 WHERE (CAST(LIKELIHOOD(DISTINCT vt1.c1, vt1.c1) AS NUMERIC));
SELECT ALL * FROM v0 CROSS JOIN vt1 ON vt1.c0 WHERE (((CAST(LIKELIHOOD(DISTINCT vt1.c1, vt1.c1) AS NUMERIC))AND((((('DF {cSKq') NOT BETWEEN (v0.c0) AND (v0.c1)))LIKE(((v0.c2)IS NOT(v0.c1))))))) ORDER BY (((v0.c1)/(vt1.c1)) IN ()) DESC, vt1.c0 DESC  NULLS LAST LIMIT 0X2 INTERSECT SELECT * FROM v0 CROSS JOIN vt1 ON vt1.c0 WHERE (((v0.c1 IN (v0.c1)) IN (CASE v0.c1  WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END))) ORDER BY (((v0.c1)/(vt1.c1)) IN ()) DESC, vt1.c0 DESC  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON vt1.c0 WHERE (CAST(LIKELIHOOD(DISTINCT vt1.c1, vt1.c1) AS NUMERIC));
SELECT * FROM vt1, v0 WHERE (v0.c0);
SELECT * FROM vt1, v0 WHERE (((v0.c0)AND((((~ (v0.c1)))>((NOT (vt1.c0))))))) ORDER BY (((CAST(v0.c1 AS BLOB)))>(((v0.c1 IN ()))))  NULLS LAST, (((v0.c1)<<(v0.c0)) IN (CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 END)) DESC INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((vt1.c0) NOT BETWEEN (NULL) AND (v0.c1)))<<(v0.c2 COLLATE NOCASE))) ORDER BY (((CAST(v0.c1 AS BLOB)))>(((v0.c1 IN ()))))  NULLS LAST, (((v0.c1)<<(v0.c0)) IN (CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 END)) DESC;
SELECT * FROM vt1, v0 WHERE (v0.c0);
SELECT * FROM vt1, v0 WHERE (((v0.c0)AND((((~ (v0.c1)))>((NOT (vt1.c0))))))) ORDER BY (((CAST(v0.c1 AS BLOB)))>(((v0.c1 IN ()))))  NULLS LAST, (((v0.c1)<<(v0.c0)) IN (CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 END)) DESC INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((vt1.c0) NOT BETWEEN (NULL) AND (v0.c1)))<<(v0.c2 COLLATE NOCASE))) ORDER BY (((CAST(v0.c1 AS BLOB)))>(((v0.c1 IN ()))))  NULLS LAST, (((v0.c1)<<(v0.c0)) IN (CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 END)) DESC;
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE ((('0.720051464772481' COLLATE BINARY) BETWEEN (v0.c2 COLLATE BINARY) AND (vt1.c1)));
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE ((((('0.720051464772481' COLLATE BINARY) BETWEEN (v0.c2 COLLATE BINARY) AND (vt1.c1)))AND(((((vt1.c0, v0.c0, vt1.c1)) BETWEEN ((vt1.c1, v0.c0, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c0))) IN ((~ (vt1.c0)), ((vt1.c0)-(v0.c1)), v0.c1))))) INTERSECT SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (((v0.c1) NOT NULL) COLLATE NOCASE);
SELECT * FROM vt1, v0 WHERE (v0.c1) ORDER BY TRIM(DISTINCT (((v0.c0))>((0Xffffffffffa96b8f))), LIKELY(vt1.c0)) DESC, (CAST(v0.c1 AS NUMERIC) IN ((+ (vt1.c0)), vt1.c0)) ASC;
SELECT ALL * FROM vt1, v0 WHERE (v0.c1) ORDER BY LIKELIHOOD(DISTINCT v0.c1 COLLATE BINARY, json_array_length(vt1.c0)) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CAST(v0.c0 AS INTEGER) COLLATE RTRIM) ORDER BY LIKELIHOOD(DISTINCT v0.c1 COLLATE BINARY, json_array_length(vt1.c0)) DESC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (v0.c1) ORDER BY TRIM(DISTINCT (((v0.c0))>((0Xffffffffffa96b8f))), LIKELY(vt1.c0)) DESC, (CAST(v0.c1 AS NUMERIC) IN ((+ (vt1.c0)), vt1.c0)) ASC;
SELECT ALL * FROM vt1, v0 WHERE (v0.c1) ORDER BY LIKELIHOOD(DISTINCT v0.c1 COLLATE BINARY, json_array_length(vt1.c0)) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CAST(v0.c0 AS INTEGER) COLLATE RTRIM) ORDER BY LIKELIHOOD(DISTINCT v0.c1 COLLATE BINARY, json_array_length(vt1.c0)) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE (CAST(((v0.c1) BETWEEN (0.8595906543649426) AND ('c''')) AS NUMERIC));
SELECT ALL * FROM v0 WHERE (CAST(((v0.c1) BETWEEN (0.8595906543649426) AND ('c''')) AS NUMERIC)) ORDER BY (((((v0.c0))>=(('0.5787130268887571')))) IS FALSE) DESC INTERSECT SELECT ALL * FROM v0 WHERE (LOWER(DISTINCT ('-2038281165' IN ()))) ORDER BY (((((v0.c0))>=(('0.5787130268887571')))) IS FALSE) DESC;
SELECT * FROM v0 WHERE (CAST(((v0.c1) BETWEEN (0.8595906543649426) AND ('c''')) AS NUMERIC));
SELECT ALL * FROM v0 WHERE (CAST(((v0.c1) BETWEEN (0.8595906543649426) AND ('c''')) AS NUMERIC)) ORDER BY (((((v0.c0))>=(('0.5787130268887571')))) IS FALSE) DESC INTERSECT SELECT ALL * FROM v0 WHERE (LOWER(DISTINCT ('-2038281165' IN ()))) ORDER BY (((((v0.c0))>=(('0.5787130268887571')))) IS FALSE) DESC;
SELECT MIN(v0.c0) FROM v0 CROSS JOIN vt1 ON ((CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN vt1.c0 END) NOTNULL) WHERE (CASE v0.c2  WHEN ((v0.c2)>>(v0.c0)) THEN CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END WHEN ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)) THEN 0.8709703001123996 ELSE '1000813996' END) ORDER BY (((vt1.c1 COLLATE NOCASE, (vt1.c0 IN (v0.c2))))<=(((v0.c2 IN (vt1.c1)), CASE vt1.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN 'y' THEN v0.c0 WHEN v0.c0 THEN v0.c0 ELSE vt1.c0 END))) DESC  NULLS LAST;
SELECT MIN(v0.c0) FROM v0 CROSS JOIN vt1 ON ((CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN vt1.c0 END) NOTNULL) WHERE (CASE v0.c2  WHEN ((v0.c2)>>(v0.c0)) THEN CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END WHEN ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)) THEN 0.8709703001123996 ELSE '1000813996' END) ORDER BY v0.c0 COLLATE NOCASE  NULLS LAST, CASE (v0.c1 IN ())  WHEN (((vt1.c0, v0.c0))==(('{}^', '0.13557839073463107'))) THEN ((v0.c1)LIKE(v0.c2)) WHEN (((vt1.c1, v0.c0, vt1.c1, vt1.c1))<=((vt1.c0, v0.c1, v0.c0, v0.c2))) THEN NULL END DESC  NULLS FIRST, ((PRINTF(v0.c2, '0''f[8', v0.c0, vt1.c0))<<(LIKELIHOOD(vt1.c0, vt1.c0))) DESC  NULLS LAST LIMIT 3 INTERSECT SELECT ALL MIN(v0.c0) FROM v0 CROSS JOIN vt1 ON ((CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN vt1.c0 END) NOTNULL) WHERE (((((v0.c0)||(vt1.c0)))*(((((v0.c1)AND(vt1.c1)))OR(vt1.c0))))) ORDER BY v0.c0 COLLATE NOCASE  NULLS LAST, CASE (v0.c1 IN ())  WHEN (((vt1.c0, v0.c0))=(('{}^', '0.13557839073463107'))) THEN ((v0.c1)LIKE(v0.c2)) WHEN (((vt1.c1, v0.c0, vt1.c1, vt1.c1))<=((vt1.c0, v0.c1, v0.c0, v0.c2))) THEN NULL END DESC  NULLS FIRST, ((PRINTF(v0.c2, '0''f[8', v0.c0, vt1.c0))<<(LIKELIHOOD(vt1.c0, vt1.c0))) DESC  NULLS LAST LIMIT 0X3;
SELECT * FROM vt1, v0 WHERE (((((v0.c2)LIKE(vt1.c1)))>=(NULL)));
SELECT ALL * FROM vt1, v0 WHERE (((((((v0.c2)LIKE(vt1.c1)))==(NULL)))AND(((v0.c1) NOT BETWEEN (((v0.c2)-(vt1.c1))) AND ((v0.c0 IN ('.heKC[*')))))));
SELECT * FROM vt1, v0 WHERE (((((v0.c2)LIKE(vt1.c1)))>=(NULL)));
SELECT ALL * FROM vt1, v0 WHERE (((((((v0.c2)LIKE(vt1.c1)))==(NULL)))AND(((v0.c1) NOT BETWEEN (((v0.c2)-(vt1.c1))) AND ((v0.c0 IN ('.heKC[*')))))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c1)) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)))) AND ((((vt1.c0)|(vt1.c0)))))) ORDER BY (((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), CASE x''  WHEN vt1.c0 THEN '1847681787' WHEN vt1.c0 THEN vt1.c0 WHEN -1758142978 THEN vt1.c1 ELSE vt1.c0 END, (((vt1.c0))<>((vt1.c0))), CAST(vt1.c0 AS REAL)))>=(((NOT (vt1.c0)), (~ (vt1.c0)), CASE WHEN 'W9&W' THEN vt1.c0 WHEN x'' THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END, ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))))), (- (((vt1.c0)*(vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1)) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)))) AND ((((vt1.c0)|(vt1.c0))))))AND(((((((vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((0xfffffffff38ce85c, vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0)))))>((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))))) ORDER BY ((((x'')*(vt1.c0))) NOT BETWEEN ((((0.8808699656918675, vt1.c1, vt1.c0)) BETWEEN ((vt1.c0, NULL, x'0743')) AND ((vt1.c0, vt1.c0, vt1.c1)))) AND (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, ((CAST(vt1.c1 AS REAL)) NOT BETWEEN (((vt1.c0) NOT NULL)) AND (vt1.c1 COLLATE NOCASE)) LIMIT 1;
SELECT ALL * FROM vt1 WHERE ((((vt1.c1)) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)))) AND ((((vt1.c0)|(vt1.c0)))))) ORDER BY (((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), CASE x''  WHEN vt1.c0 THEN '1847681787' WHEN vt1.c0 THEN vt1.c0 WHEN -1758142978 THEN vt1.c1 ELSE vt1.c0 END, (((vt1.c0))<>((vt1.c0))), CAST(vt1.c0 AS REAL)))>=(((NOT (vt1.c0)), (~ (vt1.c0)), CASE WHEN 'W9&W' THEN vt1.c0 WHEN x'' THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END, ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))))), (- (((vt1.c0)*(vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1)) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)))) AND ((((vt1.c0)|(vt1.c0))))))AND(((((((vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((0xfffffffff38ce85c, vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0)))))>((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))))))) ORDER BY ((((x'')*(vt1.c0))) NOT BETWEEN ((((0.8808699656918675, vt1.c1, vt1.c0)) BETWEEN ((vt1.c0, NULL, x'0743')) AND ((vt1.c0, vt1.c0, vt1.c1)))) AND (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC, ((CAST(vt1.c1 AS REAL)) NOT BETWEEN (((vt1.c0) NOT NULL)) AND (vt1.c1 COLLATE NOCASE)) LIMIT 1;
SELECT * FROM v0, vt1 WHERE (((v0.c2) IS FALSE) COLLATE NOCASE) ORDER BY (('-757902307') IS FALSE) ASC;
SELECT ALL * FROM v0, vt1 WHERE (((((v0.c2) IS FALSE) COLLATE NOCASE)AND(((x'a7') ISNULL)))) ORDER BY (('-757902307') IS FALSE) ASC;
SELECT * FROM v0, vt1 WHERE (((v0.c2) IS FALSE) COLLATE NOCASE) ORDER BY (('-757902307') IS FALSE) ASC;
SELECT ALL * FROM v0, vt1 WHERE (((((v0.c2) IS FALSE) COLLATE NOCASE)AND(((x'a7') ISNULL)))) ORDER BY (('-757902307') IS FALSE) ASC;
SELECT MAX(v0.c2) FROM v0 WHERE ((NOT (CASE WHEN v0.c1 THEN v0.c0 END))) ORDER BY '1008978140' DESC, ((((((((v0.c0)AND(v0.c0)))AND(v0.c0)))AND(v0.c0)))OR(v0.c1)) COLLATE BINARY DESC  NULLS LAST, ((((((((v0.c0)OR(v0.c1)))OR(v0.c1)))OR(v0.c2))) NOT BETWEEN (CAST(0.6187604698232919 AS TEXT)) AND (((v0.c0)/(v0.c1)))) DESC;
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((((NOT (CASE WHEN v0.c1 THEN v0.c0 END)))AND(((((((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c0 END)OR((+ (v0.c0)))))OR(((v0.c0) BETWEEN (v0.c2) AND (v0.c0)))))AND((v0.c1 IN (v0.c0))))))) ORDER BY CAST(NULLIF(v0.c2, v0.c0) AS INTEGER) DESC  NULLS FIRST, -3.80708997E8  NULLS FIRST INTERSECT SELECT MAX(v0.c2) FROM v0 WHERE ((+ (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY CAST(NULLIF(v0.c2, v0.c0) AS INTEGER) DESC  NULLS FIRST, -3.80708997E8  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM v0 WHERE ((NOT (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)))));
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ((NOT (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY CAST(((v0.c2)IS(v0.c2)) AS NUMERIC) DESC, ((v0.c1 COLLATE RTRIM)-(CAST(v0.c0 AS INTEGER))) DESC;
SELECT ALL * FROM vt1 WHERE ('' COLLATE NOCASE);
SELECT ALL * FROM vt1 WHERE ('' COLLATE NOCASE) LIMIT 2;
SELECT ALL * FROM vt1 WHERE ('' COLLATE NOCASE);
SELECT ALL * FROM vt1 WHERE ('' COLLATE NOCASE) LIMIT 2;
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE ((vt1.c1)OR(vt1.c0))  WHEN ((vt1.c0) IS FALSE) THEN ((((((((((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) WHEN CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c1) BETWEEN (0.6511229309537593) AND ('-1234102707')) WHEN (((((((((('')AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)) THEN json_object(vt1.c1, vt1.c0, vt1.c1) END) ORDER BY (((vt1.c1) NOT BETWEEN (vt1.c1) AND (0.7853764121333504)) IN (vt1.c1 COLLATE RTRIM, ((vt1.c0)AND(vt1.c1)))), ((((vt1.c1) IS FALSE)) NOT BETWEEN (((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c0))) AND ('앛fj{'))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((CASE ((vt1.c1)OR(vt1.c0))  WHEN ((vt1.c0) IS FALSE) THEN ((((((((((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)) WHEN CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END THEN ((vt1.c1) BETWEEN (0.6511229309537593) AND ('-1234102707')) WHEN (((((((((('')AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)) THEN json_object(vt1.c1, vt1.c0, vt1.c1) END)AND(((((vt1.c0)>>(vt1.c1))) BETWEEN (NULL) AND ((+ (vt1.c1))))))) ORDER BY CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END COLLATE RTRIM, json((~ (vt1.c1)))  NULLS FIRST, ((vt1.c0) NOTNULL), ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c1))) IS FALSE) DESC LIMIT 0x0;
SELECT MAX(v0.c2) FROM v0 WHERE (((((v0.c2 COLLATE RTRIM)OR(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))))OR(((((((((((((v0.c1)AND(v0.c1)))OR(v0.c1)))OR(v0.c2)))AND(NULL)))OR(v0.c2)))OR(v0.c0))))) ORDER BY ((ABS(v0.c0)) NOT NULL)  NULLS LAST, CAST((((v0.c1))<((v0.c0))) AS REAL);
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((((((v0.c2 COLLATE RTRIM)OR(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))))OR(((((((((((((v0.c1)AND(v0.c1)))OR(v0.c1)))OR(v0.c2)))AND(NULL)))OR(v0.c2)))OR(v0.c0)))))AND((((v0.c1 IN (v0.c1, v0.c2, v0.c1))) IS FALSE)))) ORDER BY (((v0.c0, v0.c0)) BETWEEN (((v0.c2 IN (v0.c2)), (+ (v0.c0)))) AND ((json_object(v0.c1, '-300487047', v0.c0), ((v0.c0)LIKE(v0.c2))))), ((x'') NOT BETWEEN ((+ (v0.c0))) AND ((- (v0.c0))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((NOT (v0.c0)))AND('w'))) ORDER BY '9tE' COLLATE BINARY DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((((NOT (v0.c0)))AND('w')))AND((NOT ((v0.c1 IN ())))))) ORDER BY ((CASE v0.c0  WHEN '1549857316' THEN v0.c1 ELSE v0.c1 END) BETWEEN (((v0.c2) ISNULL)) AND (((((((((v0.c2)OR(v0.c0)))OR(v0.c2)))AND(v0.c1)))AND(NULL)))) ASC, (+ (v0.c2 COLLATE NOCASE)) LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE (CAST((- (v0.c1)) AS REAL)) ORDER BY ((CASE v0.c0  WHEN '1549857316' THEN v0.c1 ELSE v0.c1 END) BETWEEN (((v0.c2) ISNULL)) AND (((((((((v0.c2)OR(v0.c0)))OR(v0.c2)))AND(v0.c1)))AND(NULL)))) ASC, (+ (v0.c2 COLLATE NOCASE)) LIMIT 0;
SELECT ALL * FROM v0 WHERE ((((NOT (v0.c0)))AND('w'))) ORDER BY '9tE' COLLATE BINARY DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((((NOT (v0.c0)))AND('w')))AND((NOT ((v0.c1 IN ())))))) ORDER BY ((CASE v0.c0  WHEN '1549857316' THEN v0.c1 ELSE v0.c1 END) BETWEEN (((v0.c2) ISNULL)) AND (((((((((v0.c2)OR(v0.c0)))OR(v0.c2)))AND(v0.c1)))AND(NULL)))) ASC, (+ (v0.c2 COLLATE NOCASE)) LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE (CAST((- (v0.c1)) AS REAL)) ORDER BY ((CASE v0.c0  WHEN '1549857316' THEN v0.c1 ELSE v0.c1 END) BETWEEN (((v0.c2) ISNULL)) AND (((((((((v0.c2)OR(v0.c0)))OR(v0.c2)))AND(v0.c1)))AND(NULL)))) ASC, (+ (v0.c2 COLLATE NOCASE)) LIMIT 0;
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (vt1.c1) ORDER BY CAST(CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END AS REAL) ASC  NULLS FIRST, v0.c1, ((((((((v0.c0)AND('2131704313')))AND(vt1.c1)))AND(vt1.c1))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((x'') BETWEEN ('%Y') AND (v0.c1)))) DESC;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE (((vt1.c1)AND(((((vt1.c0, vt1.c0))>((v0.c0, vt1.c1))) IN (CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 END, ((v0.c1)<<(vt1.c0))))))) ORDER BY CAST(CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END AS REAL) ASC  NULLS FIRST, v0.c1, ((((((((v0.c0)AND('2131704313')))AND(vt1.c1)))AND(vt1.c1))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((x'') BETWEEN ('%Y') AND (v0.c1)))) DESC INTERSECT SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (vt1.c1) ORDER BY CAST(CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END AS REAL) ASC  NULLS FIRST, v0.c1, ((((((((v0.c0)AND('2131704313')))AND(vt1.c1)))AND(vt1.c1))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((x'') BETWEEN ('%Y') AND (v0.c1)))) DESC;
SELECT MAX(v0.c1) FROM v0 WHERE (((v0.c1 COLLATE NOCASE) NOTNULL)) ORDER BY CAST(ROUND(v0.c2, v0.c1) AS TEXT) DESC, ((((v0.c1)GLOB(v0.c0)))<>(((((((v0.c2)AND(v0.c0)))OR(v0.c0)))OR(v0.c1))))  NULLS LAST, v0.c2  NULLS FIRST;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((v0.c1 COLLATE NOCASE) NOTNULL)) ORDER BY (((((((v0.c2)OR(3.2506213E7)))OR(v0.c2))))>(((~ (v0.c0))))) ASC, -1.7976931348623157E308 DESC LIMIT 0x1;
SELECT ALL * FROM vt1, v0 WHERE (CAST(vt1.c1 AS BLOB) COLLATE RTRIM);
SELECT ALL * FROM vt1, v0 WHERE (((CAST(vt1.c1 AS BLOB) COLLATE RTRIM)AND(((((CASE v0.c0  WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 END)OR((- (v0.c2)))))AND(CAST(vt1.c0 AS REAL)))))) INTERSECT SELECT * FROM vt1, v0 WHERE ((((((((((((v0.c2)OR(v0.c0)))AND(v0.c1)))OR(vt1.c0)))AND(v0.c2)), vt1.c0, QUOTE(v0.c2), ((vt1.c1)<<(v0.c0))))<((CAST(v0.c1 AS NUMERIC), (v0.c0 IN ()), ((vt1.c1) NOT NULL), CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 END))));
SELECT ALL * FROM vt1, v0 WHERE (CAST(vt1.c1 AS BLOB) COLLATE RTRIM);
SELECT ALL * FROM vt1, v0 WHERE (((CAST(vt1.c1 AS BLOB) COLLATE RTRIM)AND(((((CASE v0.c0  WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 END)OR((- (v0.c2)))))AND(CAST(vt1.c0 AS REAL)))))) INTERSECT SELECT * FROM vt1, v0 WHERE ((((((((((((v0.c2)OR(v0.c0)))AND(v0.c1)))OR(vt1.c0)))AND(v0.c2)), vt1.c0, QUOTE(v0.c2), ((vt1.c1)<<(v0.c0))))<((CAST(v0.c1 AS NUMERIC), (v0.c0 IN ()), ((vt1.c1) NOT NULL), CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 END))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0)AND(TYPEOF(DISTINCT (NOT (vt1.c1)))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) NOTNULL) DESC, ((1363635168)/(vt1.c1))  NULLS LAST, CASE WHEN '-5674097' THEN ((vt1.c1) ISNULL) WHEN vt1.c1 THEN CAST(vt1.c0 AS BLOB) ELSE ((x'69854ac8')AND(vt1.c1)) END;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER))+(((vt1.c1) ISNULL)))) ORDER BY ((CASE WHEN '㢓x' THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END)>>((+ (0.14453086500428658)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER))+(((vt1.c1) ISNULL)))) ORDER BY CASE WHEN ((vt1.c1)AND(vt1.c0)) THEN UPPER(vt1.c1) END  NULLS FIRST, 0xffffffffa28d447d  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((-2.038281165E9, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1))) IN (vt1.c1 COLLATE NOCASE))) ORDER BY CASE WHEN ((vt1.c1)AND(vt1.c0)) THEN UPPER(vt1.c1) END  NULLS FIRST, 0Xffffffffa28d447d  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER))+(((vt1.c1) ISNULL)))) ORDER BY ((CASE WHEN '㢓x' THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END)>>((+ (0.14453086500428658)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER))+(((vt1.c1) ISNULL)))) ORDER BY CASE WHEN ((vt1.c1)AND(vt1.c0)) THEN UPPER(vt1.c1) END  NULLS FIRST, 0xffffffffa28d447d  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((-2.038281165E9, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1))) IN (vt1.c1 COLLATE NOCASE))) ORDER BY CASE WHEN ((vt1.c1)AND(vt1.c0)) THEN UPPER(vt1.c1) END  NULLS FIRST, 0Xffffffffa28d447d  NULLS FIRST LIMIT 0X1;
SELECT * FROM v0, vt1 WHERE (((json_insert(v0.c2, v0.c0, vt1.c1, v0.c0)) BETWEEN (CAST(vt1.c1 AS TEXT)) AND (((v0.c1)%(v0.c2)))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((json_insert(v0.c2, v0.c0, vt1.c1, v0.c0)) BETWEEN (CAST(vt1.c1 AS TEXT)) AND (((v0.c1)%(v0.c2)))))AND(((v0.c0) BETWEEN (CAST(v0.c0 AS REAL)) AND (((0.3668065753289833)AND(v0.c2))))))) ORDER BY (((vt1.c0, v0.c1)) NOT BETWEEN ((v0.c1, SQLITE_VERSION())) AND ((((x'57cf')>=(v0.c0)), (- (vt1.c0))))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((v0.c1)) BETWEEN ((vt1.c0)) AND (((vt1.c1 IN (vt1.c0)))))) ORDER BY (((vt1.c0, v0.c1)) NOT BETWEEN ((v0.c1, SQLITE_VERSION())) AND ((((x'57cf')>=(v0.c0)), (- (vt1.c0))))) DESC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((json_insert(v0.c2, v0.c0, vt1.c1, v0.c0)) BETWEEN (CAST(vt1.c1 AS TEXT)) AND (((v0.c1)%(v0.c2)))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((json_insert(v0.c2, v0.c0, vt1.c1, v0.c0)) BETWEEN (CAST(vt1.c1 AS TEXT)) AND (((v0.c1)%(v0.c2)))))AND(((v0.c0) BETWEEN (CAST(v0.c0 AS REAL)) AND (((0.3668065753289833)AND(v0.c2))))))) ORDER BY (((vt1.c0, v0.c1)) NOT BETWEEN ((v0.c1, SQLITE_VERSION())) AND ((((x'57cf')>=(v0.c0)), (- (vt1.c0))))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((v0.c1)) BETWEEN ((vt1.c0)) AND (((vt1.c1 IN (vt1.c0)))))) ORDER BY (((vt1.c0, v0.c1)) NOT BETWEEN ((v0.c1, SQLITE_VERSION())) AND ((((x'57cf')>=(v0.c0)), (- (vt1.c0))))) DESC  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (UPPER(CAST(v0.c2 AS BLOB))) ORDER BY ((((((((((((109538661)AND(v0.c1)))AND(v0.c0)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))) NOT NULL), (((((((((((- (v0.c0)))OR(CAST(v0.c0 AS REAL))))OR(((((((v0.c1)OR(v0.c1)))AND(v0.c0)))AND(v0.c2)))))AND(v0.c2)))OR((NULL IN ()))))AND(((v0.c2) IS FALSE))) DESC, CAST(CAST(NULL AS NUMERIC) AS NUMERIC) DESC  NULLS LAST;
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((UPPER(CAST(v0.c2 AS BLOB)))AND(((CAST(v0.c0 AS TEXT)) IS FALSE)))) ORDER BY ((((((((((((0x6876d65)AND(v0.c1)))AND(v0.c0)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))) NOT NULL), (((((((((((- (v0.c0)))OR(CAST(v0.c0 AS REAL))))OR(((((((v0.c1)OR(v0.c1)))AND(v0.c0)))AND(v0.c2)))))AND(v0.c2)))OR((NULL IN ()))))AND(((v0.c2) IS FALSE))) DESC, CAST(CAST(NULL AS NUMERIC) AS NUMERIC) DESC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON (((NOT (v0.c0)))<(CASE vt1.c1  WHEN vt1.c1 THEN v0.c0 ELSE v0.c0 END)) WHERE ((('-327465544')GLOB((((vt1.c0, v0.c1, v0.c0, v0.c0)) BETWEEN ((v0.c0, vt1.c1, vt1.c1, vt1.c0)) AND ((v0.c1, vt1.c1, v0.c2, v0.c1))))));
SELECT DISTINCT COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON (((NOT (v0.c0)))<(CASE vt1.c1  WHEN vt1.c1 THEN v0.c0 ELSE v0.c0 END)) WHERE ((((('-327465544')GLOB((((vt1.c0, v0.c1, v0.c0, v0.c0)) BETWEEN ((v0.c0, vt1.c1, vt1.c1, vt1.c0)) AND ((v0.c1, vt1.c1, v0.c2, v0.c1))))))AND((NOT ((~ (vt1.c0))))))) ORDER BY CAST(((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c1)) AS NUMERIC) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON (((NOT (v0.c0)))<(CASE vt1.c1  WHEN vt1.c1 THEN v0.c0 ELSE v0.c0 END)) WHERE (CASE WHEN (((vt1.c0, v0.c2))<=((vt1.c1, vt1.c0))) THEN v0.c2 COLLATE BINARY ELSE v0.c2 END) ORDER BY CAST(((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c1)) AS NUMERIC) DESC;
SELECT MAX(v0.c1) FROM v0 WHERE (((((((NULL, v0.c2))<=((v0.c1, v0.c1))), (((v0.c0, v0.c2, v0.c0))<=((v0.c0, v0.c0, v0.c1)))))>(((v0.c0 IN ()), NULL)))) ORDER BY (v0.c0 COLLATE BINARY IN (CAST(v0.c1 AS REAL))) DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((((((NULL, v0.c2))<=((v0.c1, v0.c1))), (((v0.c0, v0.c2, v0.c0))<=((v0.c0, v0.c0, v0.c1)))))>(((v0.c0 IN ()), NULL)))) ORDER BY (v0.c0 COLLATE BINARY IN (CAST(v0.c1 AS REAL))) DESC  NULLS LAST INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((+ (((v0.c0)||(v0.c2))))) ORDER BY (v0.c0 COLLATE BINARY IN (CAST(v0.c1 AS REAL))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN ())) IS FALSE)) ORDER BY ((((v0.c0) NOT NULL))GLOB((~ (v0.c0)))) DESC, ((NULL) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0))) AND (CASE v0.c0  WHEN v0.c1 THEN v0.c0 END))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN ())) IS FALSE)) ORDER BY (((((0x2f90cea))!=((v0.c1))))>(((0.32474500849349175) NOT NULL))) ASC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(v0.c0 AS INTEGER)) ORDER BY (((((49876202))<>((v0.c1))))>(((0.32474500849349175) NOT NULL))) ASC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN ())) IS FALSE)) ORDER BY ((((v0.c0) NOT NULL))GLOB((~ (v0.c0)))) DESC, ((NULL) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0))) AND (CASE v0.c0  WHEN v0.c1 THEN v0.c0 END))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN ())) IS FALSE)) ORDER BY (((((0x2f90cea))!=((v0.c1))))>(((0.32474500849349175) NOT NULL))) ASC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(v0.c0 AS INTEGER)) ORDER BY (((((49876202))<>((v0.c1))))>(((0.32474500849349175) NOT NULL))) ASC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM v0 WHERE ((- (((v0.c0) IS FALSE))));
SELECT ALL * FROM v0 WHERE ((- (((v0.c0) IS FALSE)))) LIMIT 1 INTERSECT SELECT * FROM v0 WHERE (CAST(v0.c1 AS NUMERIC) COLLATE NOCASE) LIMIT 0x1;
SELECT ALL * FROM v0 WHERE ((- (((v0.c0) IS FALSE))));
SELECT ALL * FROM v0 WHERE ((- (((v0.c0) IS FALSE)))) LIMIT 1 INTERSECT SELECT * FROM v0 WHERE (CAST(v0.c1 AS NUMERIC) COLLATE NOCASE) LIMIT 0x1;
SELECT MAX(v0.c0) FROM v0 WHERE (TYPEOF(DISTINCT x''));
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((TYPEOF(DISTINCT x''))AND((((((v0.c2))<((v0.c1))))>>((- (v0.c2))))))) ORDER BY v0.c1 DESC  NULLS FIRST, v0.c2  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((((CAST(v0.c1 AS TEXT))OR(((v0.c0)&(v0.c1)))))OR((v0.c2 IN (v0.c2))))) ORDER BY v0.c1 DESC  NULLS FIRST, v0.c2  NULLS LAST LIMIT 0x0;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((((((v0.c0, v0.c1, vt1.c1, vt1.c1, v0.c2))==((v0.c2, vt1.c1, 2048366947, v0.c1, vt1.c1)))) NOT NULL)) ORDER BY UPPER(DISTINCT vt1.c0 COLLATE RTRIM) ASC, ((((((((v0.c0)&(v0.c0)))OR(NULL)))AND(((v0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND(CASE vt1.c1  WHEN v0.c2 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE v0.c1 END)) DESC;
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE ((((((v0.c0, v0.c1, vt1.c1, vt1.c1, v0.c2))=((v0.c2, vt1.c1, 0x7a179963, v0.c1, vt1.c1)))) NOT NULL)) ORDER BY UPPER(DISTINCT vt1.c0 COLLATE RTRIM) ASC, ((((((((v0.c0)&(v0.c0)))OR(NULL)))AND(((v0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND(CASE vt1.c1  WHEN v0.c2 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE v0.c1 END)) DESC LIMIT 0;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((((((v0.c0, v0.c1, vt1.c1, vt1.c1, v0.c2))==((v0.c2, vt1.c1, 2048366947, v0.c1, vt1.c1)))) NOT NULL)) ORDER BY UPPER(DISTINCT vt1.c0 COLLATE RTRIM) ASC, ((((((((v0.c0)&(v0.c0)))OR(NULL)))AND(((v0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND(CASE vt1.c1  WHEN v0.c2 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE v0.c1 END)) DESC;
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE ((((((v0.c0, v0.c1, vt1.c1, vt1.c1, v0.c2))=((v0.c2, vt1.c1, 0x7a179963, v0.c1, vt1.c1)))) NOT NULL)) ORDER BY UPPER(DISTINCT vt1.c0 COLLATE RTRIM) ASC, ((((((((v0.c0)&(v0.c0)))OR(NULL)))AND(((v0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND(CASE vt1.c1  WHEN v0.c2 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE v0.c1 END)) DESC LIMIT 0;
SELECT * FROM vt1, v0 WHERE (((((vt1.c1)%(vt1.c1))) NOT BETWEEN ((+ (vt1.c1))) AND (COALESCE(vt1.c1, NULL)))) ORDER BY CASE WHEN v0.c0 THEN vt1.c0 END COLLATE RTRIM, ('-436877819' IN ());
SELECT DISTINCT * FROM vt1, v0 WHERE (((((vt1.c1)%(vt1.c1))) NOT BETWEEN ((+ (vt1.c1))) AND (COALESCE(vt1.c1, NULL)))) ORDER BY ((CASE WHEN v0.c1 THEN vt1.c1 END) BETWEEN ((vt1.c0 IN (v0.c0, v0.c1))) AND ((vt1.c0 IN (v0.c2, vt1.c1)))), ((((vt1.c1)<<(vt1.c1)))+(((vt1.c0) IS TRUE))) LIMIT 0x1;
SELECT * FROM vt1, v0 WHERE (((((vt1.c1)%(vt1.c1))) NOT BETWEEN ((+ (vt1.c1))) AND (COALESCE(vt1.c1, NULL)))) ORDER BY CASE WHEN v0.c0 THEN vt1.c0 END COLLATE RTRIM, ('-436877819' IN ());
SELECT ALL COUNT(*) FROM v0 LEFT OUTER JOIN vt1 ON ((((vt1.c1 IN ()), CAST(v0.c0 AS REAL)))>=(((((vt1.c1, vt1.c1, v0.c0, vt1.c1, v0.c0, v0.c1))<>((vt1.c0, vt1.c0, v0.c0, vt1.c0, NULL, v0.c2))), CAST(v0.c1 AS TEXT)))) WHERE (CASE ((((((((v0.c0)OR(vt1.c0)))OR(vt1.c0)))AND(v0.c2)))OR(v0.c2))  WHEN CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN '1108049863' THEN vt1.c1 ELSE v0.c2 END THEN (((v0.c0))>((v0.c0))) ELSE ((((((vt1.c0)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)) END);
SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt1 ON ((((vt1.c1 IN ()), CAST(v0.c0 AS REAL)))>=(((((vt1.c1, vt1.c1, v0.c0, vt1.c1, v0.c0, v0.c1))<>((vt1.c0, vt1.c0, v0.c0, vt1.c0, NULL, v0.c2))), CAST(v0.c1 AS TEXT)))) WHERE (CASE ((((((((v0.c0)OR(vt1.c0)))OR(vt1.c0)))AND(v0.c2)))OR(v0.c2))  WHEN CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN '1108049863' THEN vt1.c1 ELSE v0.c2 END THEN (((v0.c0))>((v0.c0))) ELSE ((((((vt1.c0)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)) END) ORDER BY (NOT ((v0.c0 IN (v0.c1)))) ASC  NULLS FIRST, ((((((((vt1.c1)AND(v0.c1)))AND('21271092')))AND(vt1.c0)))<=('gj).{xn')) LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt1 ON ((((vt1.c1 IN ()), CAST(v0.c0 AS REAL)))>=(((((vt1.c1, vt1.c1, v0.c0, vt1.c1, v0.c0, v0.c1))<>((vt1.c0, vt1.c0, v0.c0, vt1.c0, NULL, v0.c2))), CAST(v0.c1 AS TEXT)))) WHERE ((~ (vt1.c1 COLLATE NOCASE))) ORDER BY (NOT ((v0.c0 IN (v0.c1)))) ASC  NULLS FIRST, ((((((((vt1.c1)AND(v0.c1)))AND('21271092')))AND(vt1.c0)))<=('gj).{xn')) LIMIT 1;
SELECT COUNT(*) FROM v0 LEFT OUTER JOIN vt1 ON (- (((v0.c2)OR(v0.c0)))) WHERE ((+ (((vt1.c0)<=(v0.c0))))) ORDER BY ((((CHAR(v0.c1))OR(((v0.c1)AND(v0.c1)))))OR(CAST(v0.c1 AS TEXT)))  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt1 ON (- (((v0.c2)OR(v0.c0)))) WHERE ((+ (((vt1.c0)<(v0.c0))))) ORDER BY ((((v0.c1)>(v0.c0))) IS FALSE) ASC, (~ ((((v0.c1, v0.c2))==((vt1.c0, v0.c2))))) ASC;
SELECT COUNT(*) FROM v0 WHERE (((NULL) NOT BETWEEN (v0.c2 COLLATE BINARY) AND (((v0.c2) IS FALSE)))) ORDER BY UPPER(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2))) DESC  NULLS LAST, v0.c2 ASC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((NULL) NOT BETWEEN (v0.c2 COLLATE BINARY) AND (((v0.c2) IS FALSE))))AND((((v0.c0, v0.c2)) BETWEEN ((v0.c1, highlight(v0.c2, v0.c0, v0.c2, v0.c1))) AND ((0xffffffffaea509ca, ((v0.c2)>(v0.c0)))))))) ORDER BY UPPER(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2))) DESC  NULLS LAST, v0.c2 ASC INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((((((((v0.c2 IN ()))AND(v0.c0)))OR(NULL)))AND(CASE WHEN v0.c1 THEN v0.c0 WHEN 'b/Hi*/&q' THEN v0.c1 WHEN v0.c0 THEN v0.c0 END)))OR(x'72'))) ORDER BY UPPER(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2))) DESC  NULLS LAST, v0.c2 ASC;
SELECT * FROM vt1, v0 WHERE (v0.c1);
SELECT ALL * FROM vt1, v0 WHERE (v0.c1) ORDER BY (+ (((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c2)))AND(v0.c1)))) LIMIT 0X1 INTERSECT SELECT * FROM vt1, v0 WHERE ('0.13557839073463107') ORDER BY (+ (((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c2)))AND(v0.c1)))) LIMIT 1;
SELECT * FROM vt1, v0 WHERE (v0.c1);
SELECT ALL * FROM vt1, v0 WHERE (v0.c1) ORDER BY (+ (((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c2)))AND(v0.c1)))) LIMIT 0X1 INTERSECT SELECT * FROM vt1, v0 WHERE ('0.13557839073463107') ORDER BY (+ (((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c2)))AND(v0.c1)))) LIMIT 1;
SELECT * FROM v0 WHERE (((((((((v0.c1) BETWEEN (NULL) AND (v0.c1)))OR(v0.c2 COLLATE NOCASE)))OR(v0.c2)))OR(((v0.c1) NOT NULL)))) ORDER BY (- (CAST(v0.c0 AS NUMERIC))), (- (((((v0.c0)AND(v0.c0)))OR(v0.c2))));
SELECT ALL * FROM v0 WHERE (((((((((((v0.c1) BETWEEN (NULL) AND (v0.c1)))OR(v0.c2 COLLATE NOCASE)))OR(v0.c2)))OR(((v0.c1) NOT NULL))))AND((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) IN ())))) ORDER BY (((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))) COLLATE NOCASE, ('*' IN (v0.c0)) COLLATE NOCASE COLLATE RTRIM DESC  NULLS LAST, (((CAST(v0.c0 AS INTEGER), CAST(v0.c2 AS INTEGER)))>((((x'6830')-(NULL)), ((v0.c1) BETWEEN (v0.c2) AND (0.5296247406117759)))));
SELECT * FROM v0 WHERE (((((((((v0.c1) BETWEEN (NULL) AND (v0.c1)))OR(v0.c2 COLLATE NOCASE)))OR(v0.c2)))OR(((v0.c1) NOT NULL)))) ORDER BY (- (CAST(v0.c0 AS NUMERIC))), (- (((((v0.c0)AND(v0.c0)))OR(v0.c2))));
SELECT ALL * FROM v0 WHERE (((((((((((v0.c1) BETWEEN (NULL) AND (v0.c1)))OR(v0.c2 COLLATE NOCASE)))OR(v0.c2)))OR(((v0.c1) NOT NULL))))AND((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) IN ())))) ORDER BY (((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))) COLLATE NOCASE, ('*' IN (v0.c0)) COLLATE NOCASE COLLATE RTRIM DESC  NULLS LAST, (((CAST(v0.c0 AS INTEGER), CAST(v0.c2 AS INTEGER)))>((((x'6830')-(NULL)), ((v0.c1) BETWEEN (v0.c2) AND (0.5296247406117759)))));
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (((CASE v0.c2  WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END) IS TRUE)) ORDER BY ((vt1.c1)<(load_extension(v0.c1))) DESC;
SELECT DISTINCT MIN(vt1.c1) FROM v0, vt1 WHERE (((((CASE v0.c2  WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END) IS TRUE))AND((((v0.c0 COLLATE RTRIM, ((vt1.c0) BETWEEN (v0.c1) AND (vt1.c1)), (v0.c0 IN ())))>=((((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)), CAST(vt1.c1 AS REAL), (vt1.c0 IN (vt1.c1, v0.c2)))))))) ORDER BY ((vt1.c1)<(load_extension(v0.c1))) DESC LIMIT 0x1;
SELECT ALL * FROM v0 WHERE ((((v0.c2)) NOT BETWEEN ((CAST(v0.c0 AS NUMERIC))) AND ((((((v0.c1)OR(v0.c0)))AND(v0.c0))))));
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c2)) NOT BETWEEN ((CAST(v0.c0 AS NUMERIC))) AND ((((((v0.c1)OR(v0.c0)))AND(v0.c0))))))AND((((v0.c0) BETWEEN (v0.c1) AND (v0.c2)) IN (((v0.c0)>=(v0.c0))))))) LIMIT 0x2;
SELECT ALL * FROM v0 WHERE ((((v0.c2)) NOT BETWEEN ((CAST(v0.c0 AS NUMERIC))) AND ((((((v0.c1)OR(v0.c0)))AND(v0.c0))))));
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c2)) NOT BETWEEN ((CAST(v0.c0 AS NUMERIC))) AND ((((((v0.c1)OR(v0.c0)))AND(v0.c0))))))AND((((v0.c0) BETWEEN (v0.c1) AND (v0.c2)) IN (((v0.c0)>=(v0.c0))))))) LIMIT 0x2;
SELECT MIN(vt1.c1) FROM vt1 WHERE (CASE WHEN (~ (vt1.c1)) THEN 0.33442233134521204 WHEN ((vt1.c1)-(vt1.c0)) THEN vt1.c0 WHEN vt1.c1 COLLATE RTRIM THEN CAST(vt1.c0 AS TEXT) WHEN (((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1))) THEN vt1.c1 END);
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((CASE WHEN (~ (vt1.c1)) THEN 0.33442233134521204 WHEN ((vt1.c1)-(vt1.c0)) THEN vt1.c0 WHEN vt1.c1 COLLATE RTRIM THEN CAST(vt1.c0 AS TEXT) WHEN (((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1))) THEN vt1.c1 END)AND(((((((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)OR((((vt1.c0, vt1.c1, vt1.c1))>((vt1.c1, vt1.c1, vt1.c1))))))OR(-316303965)))AND((+ (vt1.c1))))))) ORDER BY (NULL IN ())  NULLS FIRST, CAST(vt1.c0 COLLATE NOCASE AS INTEGER), ((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))+(vt1.c1)) INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (CAST('1X' AS TEXT)) ORDER BY (NULL IN ())  NULLS FIRST, CAST(vt1.c0 COLLATE NOCASE AS INTEGER), ((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))+(vt1.c1));
SELECT ALL MIN(v0.c2) FROM v0, vt1 WHERE (TRIM(DISTINCT CAST(vt1.c1 AS TEXT), ((vt1.c1) IS TRUE))) ORDER BY (((((v0.c2)) BETWEEN ((v0.c2)) AND ((v0.c0)))) BETWEEN (0.03719307910260494) AND (((v0.c2)GLOB(v0.c1)))), vt1.c0;
SELECT MIN(v0.c2) FROM v0, vt1 WHERE (TRIM(DISTINCT CAST(vt1.c1 AS TEXT), ((vt1.c1) IS TRUE))) ORDER BY (((((v0.c2)) BETWEEN ((v0.c2)) AND ((v0.c0)))) BETWEEN (0.03719307910260494) AND (((v0.c2)GLOB(v0.c1)))), vt1.c0 LIMIT 0X1;
SELECT ALL * FROM vt1, v0 WHERE (vt1.c1) ORDER BY (- (CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END)) DESC  NULLS FIRST, CAST((- (v0.c0)) AS NUMERIC)  NULLS LAST, ((((((((((vt1.c0) IS FALSE))AND(vt1.c1)))AND((('8PX8Ro_')<(v0.c1)))))AND((NOT (v0.c0)))))OR((v0.c1 IN ()))) DESC, ((v0.c1)IS NOT(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))) ASC;
SELECT * FROM vt1, v0 WHERE (vt1.c1) ORDER BY (- (CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END)) DESC  NULLS FIRST, CAST((- (v0.c0)) AS NUMERIC)  NULLS LAST, ((((((((((vt1.c0) IS FALSE))AND(vt1.c1)))AND((('8PX8Ro_')<(v0.c1)))))AND((NOT (v0.c0)))))OR((v0.c1 IN ()))) DESC, ((v0.c1)IS NOT(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))) ASC INTERSECT SELECT ALL * FROM vt1, v0 WHERE (v0.c2) ORDER BY (- (CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END)) DESC  NULLS FIRST, CAST((- (v0.c0)) AS NUMERIC)  NULLS LAST, ((((((((((vt1.c0) IS FALSE))AND(vt1.c1)))AND((('8PX8Ro_')<(v0.c1)))))AND((NOT (v0.c0)))))OR((v0.c1 IN ()))) DESC, ((v0.c1)IS NOT(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))) ASC;
SELECT ALL * FROM vt1, v0 WHERE (vt1.c1) ORDER BY (- (CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END)) DESC  NULLS FIRST, CAST((- (v0.c0)) AS NUMERIC)  NULLS LAST, ((((((((((vt1.c0) IS FALSE))AND(vt1.c1)))AND((('8PX8Ro_')<(v0.c1)))))AND((NOT (v0.c0)))))OR((v0.c1 IN ()))) DESC, ((v0.c1)IS NOT(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))) ASC;
SELECT * FROM vt1, v0 WHERE (vt1.c1) ORDER BY (- (CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END)) DESC  NULLS FIRST, CAST((- (v0.c0)) AS NUMERIC)  NULLS LAST, ((((((((((vt1.c0) IS FALSE))AND(vt1.c1)))AND((('8PX8Ro_')<(v0.c1)))))AND((NOT (v0.c0)))))OR((v0.c1 IN ()))) DESC, ((v0.c1)IS NOT(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))) ASC INTERSECT SELECT ALL * FROM vt1, v0 WHERE (v0.c2) ORDER BY (- (CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END)) DESC  NULLS FIRST, CAST((- (v0.c0)) AS NUMERIC)  NULLS LAST, ((((((((((vt1.c0) IS FALSE))AND(vt1.c1)))AND((('8PX8Ro_')<(v0.c1)))))AND((NOT (v0.c0)))))OR((v0.c1 IN ()))) DESC, ((v0.c1)IS NOT(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))) ASC;
SELECT ALL * FROM v0 WHERE ((~ (((((((((v0.c2)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)))OR(v0.c1)))));
SELECT DISTINCT * FROM v0 WHERE ((~ (((((((((v0.c2)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)))OR(v0.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1)OR(v0.c0)))AND(v0.c0)) IN (((v0.c1)-(v0.c1))))) LIMIT 0X0;
SELECT ALL * FROM v0 WHERE ((~ (((((((((v0.c2)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)))OR(v0.c1)))));
SELECT DISTINCT * FROM v0 WHERE ((~ (((((((((v0.c2)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)))OR(v0.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1)OR(v0.c0)))AND(v0.c0)) IN (((v0.c1)-(v0.c1))))) LIMIT 0X0;
SELECT * FROM v0 WHERE (json_object(((v0.c2)-(v0.c0)), ((v0.c0)GLOB(v0.c2)), UPPER(DISTINCT v0.c0), CASE NULL  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END));
SELECT ALL * FROM v0 WHERE (json_object(((v0.c2)-(v0.c0)), ((v0.c0)GLOB(v0.c2)), UPPER(DISTINCT v0.c0), CASE NULL  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END)) LIMIT 0x4;
SELECT * FROM v0 WHERE (json_object(((v0.c2)-(v0.c0)), ((v0.c0)GLOB(v0.c2)), UPPER(DISTINCT v0.c0), CASE NULL  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END));
SELECT ALL * FROM v0 WHERE (json_object(((v0.c2)-(v0.c0)), ((v0.c0)GLOB(v0.c2)), UPPER(DISTINCT v0.c0), CASE NULL  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END)) LIMIT 0x4;
SELECT * FROM vt1, v0 WHERE ((v0.c2 COLLATE BINARY IN ()));
SELECT * FROM vt1, v0 WHERE ((((v0.c2 COLLATE BINARY IN ()))AND(v0.c1))) INTERSECT SELECT * FROM vt1, v0 WHERE (((((v0.c2) NOT NULL))>>(((v0.c0)<=(vt1.c1)))));
SELECT * FROM vt1, v0 WHERE ((v0.c2 COLLATE BINARY IN ()));
SELECT * FROM vt1, v0 WHERE ((((v0.c2 COLLATE BINARY IN ()))AND(v0.c1))) INTERSECT SELECT * FROM vt1, v0 WHERE (((((v0.c2) NOT NULL))>>(((v0.c0)<=(vt1.c1)))));
SELECT * FROM vt1, v0 WHERE (((((0x1aaa66cf) NOT BETWEEN (vt1.c0) AND (v0.c0))) NOT BETWEEN (vt1.c1) AND (((v0.c1)%(v0.c2))))) ORDER BY (NOT (((v0.c1)-(vt1.c0)))) ASC  NULLS LAST, CAST(v0.c0 AS REAL) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE (((((447375055) NOT BETWEEN (vt1.c0) AND (v0.c0))) NOT BETWEEN (vt1.c1) AND (((v0.c1)%(v0.c2))))) ORDER BY (NOT (((v0.c1)-(vt1.c0)))) ASC  NULLS LAST, CAST(v0.c0 AS REAL) ASC;
SELECT * FROM vt1, v0 WHERE (((((0x1aaa66cf) NOT BETWEEN (vt1.c0) AND (v0.c0))) NOT BETWEEN (vt1.c1) AND (((v0.c1)%(v0.c2))))) ORDER BY (NOT (((v0.c1)-(vt1.c0)))) ASC  NULLS LAST, CAST(v0.c0 AS REAL) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE (((((447375055) NOT BETWEEN (vt1.c0) AND (v0.c0))) NOT BETWEEN (vt1.c1) AND (((v0.c1)%(v0.c2))))) ORDER BY (NOT (((v0.c1)-(vt1.c0)))) ASC  NULLS LAST, CAST(v0.c0 AS REAL) ASC;
SELECT MAX(v0.c0) FROM v0 WHERE (CASE WHEN CAST(v0.c0 AS BLOB) THEN CASE WHEN v0.c2 THEN v0.c2 WHEN 0.5221479657315361 THEN v0.c1 END WHEN ((((v0.c1)AND(v0.c2)))AND(v0.c2)) THEN CAST(v0.c1 AS NUMERIC) ELSE (v0.c1 IN ()) END) ORDER BY CASE 0xffffffffcf71a14e  WHEN ((v0.c1)<=(v0.c2)) THEN CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN NULL THEN v0.c2 END WHEN CAST(v0.c1 AS INTEGER) THEN ((v0.c1) BETWEEN (v0.c2) AND (v0.c2)) WHEN (((v0.c2, v0.c2)) BETWEEN ((v0.c2, x'8a805c')) AND ((v0.c0, x''))) THEN v0.c0 WHEN x'9bad82b0' THEN '-610614943' COLLATE NOCASE WHEN ((0.8087622880581041) BETWEEN (v0.c0) AND (v0.c1)) THEN CASE WHEN v0.c1 THEN v0.c1 ELSE v0.c2 END ELSE (((v0.c0, v0.c1)) BETWEEN ((v0.c0, v0.c0)) AND ((v0.c2, v0.c0))) END DESC  NULLS LAST;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (CASE WHEN CAST(v0.c0 AS BLOB) THEN CASE WHEN v0.c2 THEN v0.c2 WHEN 0.5221479657315361 THEN v0.c1 END WHEN ((((v0.c1)AND(v0.c2)))AND(v0.c2)) THEN CAST(v0.c1 AS NUMERIC) ELSE (v0.c1 IN ()) END) ORDER BY (((((v0.c0, v0.c1))<=((v0.c1, v0.c2)))) NOTNULL) DESC, ((v0.c2) IS FALSE) LIMIT 1;
SELECT MIN(v0.c0) FROM v0 WHERE ((+ (v0.c0 COLLATE NOCASE))) ORDER BY (((v0.c2 IN ())) IS TRUE)  NULLS LAST;
SELECT MIN(v0.c0) FROM v0 WHERE ((((+ (v0.c0 COLLATE NOCASE)))AND(((v0.c1) NOT BETWEEN (((v0.c0)<<(v0.c2))) AND (CAST(v0.c0 AS REAL)))))) ORDER BY (NOT ((((v0.c1, NULL, v0.c1))==((v0.c2, v0.c0, v0.c2))))) ASC, ((CASE WHEN v0.c2 THEN '' WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END) ISNULL) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL MIN(v0.c2) FROM v0 WHERE (CAST((v0.c1 IN (v0.c1)) AS INTEGER));
SELECT ALL MIN(v0.c2) FROM v0 WHERE (CAST((v0.c1 IN (v0.c1)) AS INTEGER)) ORDER BY v0.c2, v0.c0 DESC  NULLS FIRST LIMIT 0x2;
SELECT MIN(vt1.c1) FROM vt1 WHERE (((vt1.c0) NOT BETWEEN (((vt1.c0) IS TRUE)) AND (((vt1.c0)>(vt1.c0)))));
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (((vt1.c0) IS TRUE)) AND (((vt1.c0)>(vt1.c0)))))AND(((((((((((((((vt1.c0) ISNULL))AND(((vt1.c1)LIKE(vt1.c1)))))OR(((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR((vt1.c0 IN ()))))OR(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)))AND(CAST(vt1.c1 AS NUMERIC))))AND(CASE NULL  WHEN vt1.c1 THEN vt1.c0 END))))) ORDER BY ((((((vt1.c1 COLLATE BINARY)OR(((vt1.c1)OR(vt1.c0)))))OR(vt1.c0)))AND((vt1.c0 IN ()))) DESC;
SELECT ALL * FROM v0, vt1 WHERE (((((((vt1.c0)AND(v0.c2)))OR(v0.c2)))AND(((v0.c0) BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (x''))) ISNULL) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((vt1.c0)AND(v0.c2)))OR(v0.c2)))AND(((v0.c0) BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY (((v0.c2)|(vt1.c1)) IN ()) DESC  NULLS FIRST, v0.c0 DESC, CAST(((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(x'cfe1')) AS TEXT);
SELECT ALL * FROM v0, vt1 WHERE (((((((vt1.c0)AND(v0.c2)))OR(v0.c2)))AND(((v0.c0) BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (x''))) ISNULL) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((vt1.c0)AND(v0.c2)))OR(v0.c2)))AND(((v0.c0) BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY (((v0.c2)|(vt1.c1)) IN ()) DESC  NULLS FIRST, v0.c0 DESC, CAST(((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(x'cfe1')) AS TEXT);
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((~ (((((((((vt1.c1)AND(0.003068155204134504)))AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c0))))) ORDER BY (((vt1.c1) NOTNULL) IN (((((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c1))))  NULLS LAST, CASE WHEN 0.8745648014066603 THEN 0.14815498542383054 COLLATE NOCASE WHEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 ELSE 0.5787130268887571 END THEN ((vt1.c1)>(vt1.c0)) WHEN ((vt1.c1) NOT NULL) THEN json(vt1.c0) WHEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END THEN (- ('-1364915766')) END DESC;
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE ((((~ (((((((((vt1.c1)AND(0.003068155204134504)))AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))))AND(((((vt1.c1)|(vt1.c0)))<(ABS(DISTINCT vt1.c0)))))) ORDER BY vt1.c1 DESC  NULLS LAST, ((((vt1.c1) BETWEEN (vt1.c0) AND ('724715347'))) BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1))) AND (vt1.c0 COLLATE RTRIM)) LIMIT 0X0;
SELECT * FROM vt1 WHERE (LTRIM('lC/qNca')) ORDER BY ((-1929456106)>(vt1.c1 COLLATE BINARY))  NULLS FIRST, (NOT (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((LTRIM('lC/qNca'))AND('m'))) ORDER BY ((-1929456106)>(vt1.c1 COLLATE BINARY))  NULLS FIRST, (NOT (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END COLLATE NOCASE) ORDER BY ((0Xffffffff8cfed616)>(vt1.c1 COLLATE BINARY))  NULLS FIRST, (NOT (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC LIMIT 0;
SELECT * FROM vt1 WHERE (LTRIM('lC/qNca')) ORDER BY ((-1929456106)>(vt1.c1 COLLATE BINARY))  NULLS FIRST, (NOT (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((LTRIM('lC/qNca'))AND('m'))) ORDER BY ((-1929456106)>(vt1.c1 COLLATE BINARY))  NULLS FIRST, (NOT (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END COLLATE NOCASE) ORDER BY ((0Xffffffff8cfed616)>(vt1.c1 COLLATE BINARY))  NULLS FIRST, (NOT (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) DESC LIMIT 0;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((((((((((((((vt1.c1)AND(v0.c2)))AND(vt1.c0)))AND(v0.c1)))OR(vt1.c0)))OR(CASE WHEN v0.c0 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 ELSE vt1.c1 END)))OR((+ (vt1.c0)))))AND((((vt1.c1, vt1.c0)) BETWEEN ((v0.c0, v0.c0)) AND ((v0.c2, v0.c2)))))) ORDER BY ((v0.c1) ISNULL);
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((((((((((((((((vt1.c1)AND(v0.c2)))AND(vt1.c0)))AND(v0.c1)))OR(vt1.c0)))OR(CASE WHEN v0.c0 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 ELSE vt1.c1 END)))OR((+ (vt1.c0)))))AND((((vt1.c1, vt1.c0)) BETWEEN ((v0.c0, v0.c0)) AND ((v0.c2, v0.c2))))))AND(1843766385))) ORDER BY (((v0.c0) BETWEEN (v0.c1) AND (0.44162311017540434)) IN ((vt1.c1 IN ()))) DESC, CASE WHEN ((((((v0.c2)AND(v0.c2)))OR(x'01387627')))AND(vt1.c1)) THEN ((((v0.c1)OR(v0.c1)))AND(v0.c2)) WHEN vt1.c1 COLLATE NOCASE THEN v0.c2 END LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((((vt1.c1, vt1.c1))>=((vt1.c1, v0.c0))))IS NOT(((v0.c1) BETWEEN (x'b6ac') AND (v0.c2))))) ORDER BY (((v0.c0) BETWEEN (v0.c1) AND (0.44162311017540434)) IN ((vt1.c1 IN ()))) DESC, CASE WHEN ((((((v0.c2)AND(v0.c2)))OR(x'01387627')))AND(vt1.c1)) THEN ((((v0.c1)OR(v0.c1)))AND(v0.c2)) WHEN vt1.c1 COLLATE NOCASE THEN v0.c2 END LIMIT 1;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((((v0.c2)) BETWEEN ((UNICODE(v0.c0))) AND (((((vt1.c0, v0.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((vt1.c0, v0.c1, vt1.c1)))))));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE ((((((v0.c2)) BETWEEN ((UNICODE(v0.c0))) AND (((((vt1.c0, v0.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((vt1.c0, v0.c1, vt1.c1)))))))AND(CASE (~ (vt1.c1))  WHEN (((x'5b')) BETWEEN ((v0.c1)) AND ((v0.c2))) THEN v0.c2 COLLATE BINARY ELSE v0.c0 COLLATE NOCASE END))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE ((('')|(LIKELY(DISTINCT vt1.c1)))) LIMIT 0X1;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((((v0.c2)) BETWEEN ((UNICODE(v0.c0))) AND (((((vt1.c0, v0.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((vt1.c0, v0.c1, vt1.c1)))))));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE ((((((v0.c2)) BETWEEN ((UNICODE(v0.c0))) AND (((((vt1.c0, v0.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((vt1.c0, v0.c1, vt1.c1)))))))AND(CASE (~ (vt1.c1))  WHEN (((x'5b')) BETWEEN ((v0.c1)) AND ((v0.c2))) THEN v0.c2 COLLATE BINARY ELSE v0.c0 COLLATE NOCASE END))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE ((('')|(LIKELY(DISTINCT vt1.c1)))) LIMIT 0X1;
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 AS INTEGER)) NOTNULL));
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 AS INTEGER)) NOTNULL)) LIMIT 2;
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 AS INTEGER)) NOTNULL));
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 AS INTEGER)) NOTNULL)) LIMIT 2;
SELECT ALL * FROM v0, vt1 WHERE ((~ (((((v0.c0)AND(vt1.c1)))AND(vt1.c0))))) ORDER BY ((vt1.c0)>(v0.c0)) DESC, ((UPPER(vt1.c0))||((~ (v0.c1)))) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((~ (((((v0.c0)AND(vt1.c1)))AND(vt1.c0))))) ORDER BY ((vt1.c0)>(v0.c0)) DESC, ((UPPER(vt1.c0))||((~ (v0.c1)))) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c0)GLOB(v0.c2))) BETWEEN ((+ (x'71cc44'))) AND (0.2598712890511241))) ORDER BY ((vt1.c0)>(v0.c0)) DESC, ((UPPER(vt1.c0))||((~ (v0.c1)))) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM v0, vt1 WHERE ((~ (((((v0.c0)AND(vt1.c1)))AND(vt1.c0))))) ORDER BY ((vt1.c0)>(v0.c0)) DESC, ((UPPER(vt1.c0))||((~ (v0.c1)))) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((~ (((((v0.c0)AND(vt1.c1)))AND(vt1.c0))))) ORDER BY ((vt1.c0)>(v0.c0)) DESC, ((UPPER(vt1.c0))||((~ (v0.c1)))) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c0)GLOB(v0.c2))) BETWEEN ((+ (x'71cc44'))) AND (0.2598712890511241))) ORDER BY ((vt1.c0)>(v0.c0)) DESC, ((UPPER(vt1.c0))||((~ (v0.c1)))) ASC  NULLS LAST LIMIT 2;
SELECT * FROM v0 INNER JOIN vt1 ON (((v0.c2 COLLATE RTRIM, ((vt1.c1)IS NOT(v0.c0)), ((((v0.c2)OR(vt1.c1)))AND(vt1.c0))))=((v0.c2 COLLATE BINARY, '햺V7	T)r_', CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END))) WHERE (vt1.c1);
SELECT ALL * FROM v0 INNER JOIN vt1 ON (((v0.c2 COLLATE RTRIM, ((vt1.c1)IS NOT(v0.c0)), ((((v0.c2)OR(vt1.c1)))AND(vt1.c0))))=((v0.c2 COLLATE BINARY, '햺V7	T)r_', CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END))) WHERE (vt1.c1) ORDER BY ((((0.21762634107967815 IN ()), (((v0.c1, NULL)) NOT BETWEEN ((v0.c2, v0.c2)) AND ((v0.c1, vt1.c0)))))<((((v0.c0)*(v0.c0)), ((vt1.c0) NOTNULL)))) ASC, ((vt1.c1) NOTNULL) COLLATE BINARY  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON (((v0.c2 COLLATE RTRIM, ((vt1.c1)IS NOT(v0.c0)), ((((v0.c2)OR(vt1.c1)))AND(vt1.c0))))==((v0.c2 COLLATE BINARY, '햺V7	T)r_', CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END))) WHERE (((((~ (v0.c2)), (- (v0.c2)), CAST(v0.c0 AS NUMERIC)))!=(((((vt1.c1))<=((v0.c1))), (((vt1.c0))>((vt1.c0))), CAST(0x42dbcf6c AS INTEGER))))) ORDER BY ((((0.21762634107967815 IN ()), (((v0.c1, NULL)) NOT BETWEEN ((v0.c2, v0.c2)) AND ((v0.c1, vt1.c0)))))<((((v0.c0)*(v0.c0)), ((vt1.c0) NOTNULL)))) ASC, ((vt1.c1) NOTNULL) COLLATE BINARY  NULLS LAST LIMIT 0x0;
SELECT * FROM v0 INNER JOIN vt1 ON (((v0.c2 COLLATE RTRIM, ((vt1.c1)IS NOT(v0.c0)), ((((v0.c2)OR(vt1.c1)))AND(vt1.c0))))=((v0.c2 COLLATE BINARY, '햺V7	T)r_', CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END))) WHERE (vt1.c1);
SELECT ALL * FROM v0 INNER JOIN vt1 ON (((v0.c2 COLLATE RTRIM, ((vt1.c1)IS NOT(v0.c0)), ((((v0.c2)OR(vt1.c1)))AND(vt1.c0))))=((v0.c2 COLLATE BINARY, '햺V7	T)r_', CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END))) WHERE (vt1.c1) ORDER BY ((((0.21762634107967815 IN ()), (((v0.c1, NULL)) NOT BETWEEN ((v0.c2, v0.c2)) AND ((v0.c1, vt1.c0)))))<((((v0.c0)*(v0.c0)), ((vt1.c0) NOTNULL)))) ASC, ((vt1.c1) NOTNULL) COLLATE BINARY  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON (((v0.c2 COLLATE RTRIM, ((vt1.c1)IS NOT(v0.c0)), ((((v0.c2)OR(vt1.c1)))AND(vt1.c0))))==((v0.c2 COLLATE BINARY, '햺V7	T)r_', CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END))) WHERE (((((~ (v0.c2)), (- (v0.c2)), CAST(v0.c0 AS NUMERIC)))!=(((((vt1.c1))<=((v0.c1))), (((vt1.c0))>((vt1.c0))), CAST(0x42dbcf6c AS INTEGER))))) ORDER BY ((((0.21762634107967815 IN ()), (((v0.c1, NULL)) NOT BETWEEN ((v0.c2, v0.c2)) AND ((v0.c1, vt1.c0)))))<((((v0.c0)*(v0.c0)), ((vt1.c0) NOTNULL)))) ASC, ((vt1.c1) NOTNULL) COLLATE BINARY  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)<>(vt1.c1)) IN ())) ORDER BY ((((vt1.c1)-(vt1.c0)))<(0.34545690622894176)) DESC  NULLS FIRST, ((CAST(vt1.c1 AS INTEGER)) NOT BETWEEN ((+ (vt1.c0))) AND (((vt1.c1) IS TRUE))) ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0)<(vt1.c1)) IN ()))AND(vt1.c0 COLLATE NOCASE))) ORDER BY RTRIM((~ (vt1.c1)))  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0)<>(vt1.c1)) IN ())) ORDER BY ((((vt1.c1)-(vt1.c0)))<(0.34545690622894176)) DESC  NULLS FIRST, ((CAST(vt1.c1 AS INTEGER)) NOT BETWEEN ((+ (vt1.c0))) AND (((vt1.c1) IS TRUE))) ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0)<(vt1.c1)) IN ()))AND(vt1.c0 COLLATE NOCASE))) ORDER BY RTRIM((~ (vt1.c1)))  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1 WHERE ((- ((~ (vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((- ((~ (vt1.c1))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) IS FALSE) DESC  NULLS LAST, (((((vt1.c1, vt1.c1, vt1.c1, vt1.c1))>((vt1.c0, vt1.c0, vt1.c0, vt1.c1)))) NOTNULL) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (((json_insert(vt1.c0, vt1.c1, vt1.c1))||('967456676'))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) IS FALSE) DESC  NULLS LAST, (((((vt1.c1, vt1.c1, vt1.c1, vt1.c1))>((vt1.c0, vt1.c0, vt1.c0, vt1.c1)))) NOTNULL) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((- ((~ (vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((- ((~ (vt1.c1))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) IS FALSE) DESC  NULLS LAST, (((((vt1.c1, vt1.c1, vt1.c1, vt1.c1))>((vt1.c0, vt1.c0, vt1.c0, vt1.c1)))) NOTNULL) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (((json_insert(vt1.c0, vt1.c1, vt1.c1))||('967456676'))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) IS FALSE) DESC  NULLS LAST, (((((vt1.c1, vt1.c1, vt1.c1, vt1.c1))>((vt1.c0, vt1.c0, vt1.c0, vt1.c1)))) NOTNULL) DESC  NULLS FIRST;
SELECT MAX(v0.c1) FROM v0, vt1 WHERE ('*U㥥*Q06H');
SELECT DISTINCT MAX(v0.c1) FROM v0, vt1 WHERE ((('*U㥥*Q06H')AND(v0.c1))) ORDER BY (((((((vt1.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))OR('-1318554948')))AND(((v0.c2)%(v0.c2)))) ASC  NULLS LAST, ((vt1.c1 COLLATE RTRIM)GLOB(CAST(v0.c0 AS REAL))) DESC  NULLS FIRST, CASE WHEN (vt1.c1 IN (v0.c2, v0.c0)) THEN ((v0.c0)||(v0.c0)) WHEN NULL THEN v0.c1 END LIMIT 0X1;
SELECT ALL * FROM v0, vt1 WHERE (CASE WHEN ((v0.c0)<>(v0.c0)) THEN ((NULL) IS TRUE) END);
SELECT ALL * FROM v0, vt1 WHERE (((CASE WHEN ((v0.c0)!=(v0.c0)) THEN ((NULL) IS TRUE) END)AND(''))) ORDER BY (~ (((v0.c2)<=(v0.c2))))  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((NOT (CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 END))) ORDER BY (~ (((v0.c2)<=(v0.c2))))  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (CASE WHEN ((v0.c0)<>(v0.c0)) THEN ((NULL) IS TRUE) END);
SELECT ALL * FROM v0, vt1 WHERE (((CASE WHEN ((v0.c0)!=(v0.c0)) THEN ((NULL) IS TRUE) END)AND(''))) ORDER BY (~ (((v0.c2)<=(v0.c2))))  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((NOT (CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 END))) ORDER BY (~ (((v0.c2)<=(v0.c2))))  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE ((('0.9077201638645574')>=(CASE vt1.c0  WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN x'2569' WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END))) ORDER BY (((vt1.c1) NOT NULL) IN ('+EfG')) ASC, CASE WHEN (v0.c1 IN ()) THEN vt1.c0 WHEN ((vt1.c1) ISNULL) THEN v0.c2 WHEN ((7.24715347E8)<(vt1.c1)) THEN x'19' ELSE ((v0.c2)OR(0.48202044027543745)) END, CASE (+ (v0.c1))  WHEN vt1.c1 COLLATE NOCASE THEN v0.c0 WHEN ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) THEN ((v0.c1)>(v0.c2)) END  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((('0.9077201638645574')>(CASE vt1.c0  WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN x'2569' WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END))) ORDER BY (((vt1.c1) NOT NULL) IN ('+EfG')) ASC, CASE WHEN (v0.c1 IN ()) THEN vt1.c0 WHEN ((vt1.c1) ISNULL) THEN v0.c2 WHEN ((7.24715347E8)<(vt1.c1)) THEN x'19' ELSE ((v0.c2)OR(0.48202044027543745)) END, CASE (+ (v0.c1))  WHEN vt1.c1 COLLATE NOCASE THEN v0.c0 WHEN ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) THEN ((v0.c1)>(v0.c2)) END  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((('0.9077201638645574')>=(CASE vt1.c0  WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN x'2569' WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END))) ORDER BY (((vt1.c1) NOT NULL) IN ('+EfG')) ASC, CASE WHEN (v0.c1 IN ()) THEN vt1.c0 WHEN ((vt1.c1) ISNULL) THEN v0.c2 WHEN ((7.24715347E8)<(vt1.c1)) THEN x'19' ELSE ((v0.c2)OR(0.48202044027543745)) END, CASE (+ (v0.c1))  WHEN vt1.c1 COLLATE NOCASE THEN v0.c0 WHEN ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) THEN ((v0.c1)>(v0.c2)) END  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((('0.9077201638645574')>(CASE vt1.c0  WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN x'2569' WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END))) ORDER BY (((vt1.c1) NOT NULL) IN ('+EfG')) ASC, CASE WHEN (v0.c1 IN ()) THEN vt1.c0 WHEN ((vt1.c1) ISNULL) THEN v0.c2 WHEN ((7.24715347E8)<(vt1.c1)) THEN x'19' ELSE ((v0.c2)OR(0.48202044027543745)) END, CASE (+ (v0.c1))  WHEN vt1.c1 COLLATE NOCASE THEN v0.c0 WHEN ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) THEN ((v0.c1)>(v0.c2)) END  NULLS FIRST;
SELECT MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON (((vt1.c0) ISNULL) IN (CASE WHEN v0.c0 THEN v0.c0 END)) WHERE (CHANGES()) ORDER BY ((((((((((((v0.c1)OR(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)))))AND(((vt1.c1) IS TRUE))))AND((v0.c0 IN (v0.c1)))))OR(((v0.c1) NOT NULL))))OR(v0.c1)))OR((('6')LIKE(vt1.c0)))) DESC, NULL ASC  NULLS LAST, ((((((((((((((vt1.c1)AND(v0.c1)))OR(v0.c2)))OR(v0.c1)))AND(v0.c1)))AND(v0.c0)))OR(vt1.c1))) NOTNULL)  NULLS FIRST, ((((((((((v0.c1 COLLATE RTRIM)OR(((vt1.c1)%(vt1.c0)))))AND(('184893080' IN (v0.c1, x'')))))OR((vt1.c1 IN ()))))OR(((1.016608984E9) NOT BETWEEN (vt1.c1) AND (v0.c0)))))AND(((NULL)OR(v0.c1))));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON (((vt1.c0) ISNULL) IN (CASE WHEN v0.c0 THEN v0.c0 END)) WHERE (CHANGES()) ORDER BY ((vt1.c0)|((((v0.c1, v0.c0, v0.c1)) BETWEEN ((vt1.c1, v0.c1, v0.c1)) AND ((v0.c0, v0.c2, v0.c0)))))  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE ('-22131416') ORDER BY ((vt1.c1) BETWEEN (vt1.c0) AND (v0.c2)) COLLATE NOCASE ASC, (((0.7197567211541991)<<(v0.c2)) IN ()), (CAST(vt1.c0 AS BLOB) IN ((((v0.c1, v0.c2))!=((v0.c1, '6'))))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE ('-22131416') ORDER BY ((vt1.c1) BETWEEN (vt1.c0) AND (v0.c2)) COLLATE NOCASE ASC, (((0.7197567211541991)<<(v0.c2)) IN ()), (CAST(vt1.c0 AS BLOB) IN ((((v0.c1, v0.c2))<>((v0.c1, '6'))))) DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE ('-22131416') ORDER BY ((vt1.c1) BETWEEN (vt1.c0) AND (v0.c2)) COLLATE NOCASE ASC, (((0.7197567211541991)<<(v0.c2)) IN ()), (CAST(vt1.c0 AS BLOB) IN ((((v0.c1, v0.c2))!=((v0.c1, '6'))))) DESC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((((((((((CASE v0.c2  WHEN v0.c0 THEN vt1.c0 WHEN v0.c2 THEN vt1.c0 END)OR((((v0.c2, v0.c0))>((v0.c0, v0.c2))))))OR(TYPEOF(DISTINCT v0.c0))))AND(((vt1.c0) ISNULL))))AND(((v0.c0) NOT NULL))))OR(CASE v0.c0  WHEN 0.29333449203257767 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 END))) ORDER BY vt1.c1 COLLATE RTRIM  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((((((((((((CASE v0.c2  WHEN v0.c0 THEN vt1.c0 WHEN v0.c2 THEN vt1.c0 END)OR((((v0.c2, v0.c0))>((v0.c0, v0.c2))))))OR(TYPEOF(DISTINCT v0.c0))))AND(((vt1.c0) ISNULL))))AND(((v0.c0) NOT NULL))))OR(CASE v0.c0  WHEN 0.29333449203257767 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 END)))AND(INSTR(((v0.c2) ISNULL), CASE v0.c0  WHEN v0.c2 THEN v0.c0 END)))) ORDER BY CASE (((x'')) BETWEEN ((x'61')) AND ((vt1.c1)))  WHEN ((NULL)+(v0.c0)) THEN LIKELY(v0.c2) END DESC, (((- (v0.c0)))-(((v0.c2) IS FALSE))) DESC INTERSECT SELECT * FROM v0, vt1 WHERE (((v0.c1) BETWEEN (v0.c0) AND ((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))))) ORDER BY CASE (((x'')) BETWEEN ((x'61')) AND ((vt1.c1)))  WHEN ((NULL)+(v0.c0)) THEN LIKELY(v0.c2) END DESC, (((- (v0.c0)))-(((v0.c2) IS FALSE))) DESC;
SELECT * FROM v0, vt1 WHERE (((((((((((CASE v0.c2  WHEN v0.c0 THEN vt1.c0 WHEN v0.c2 THEN vt1.c0 END)OR((((v0.c2, v0.c0))>((v0.c0, v0.c2))))))OR(TYPEOF(DISTINCT v0.c0))))AND(((vt1.c0) ISNULL))))AND(((v0.c0) NOT NULL))))OR(CASE v0.c0  WHEN 0.29333449203257767 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 END))) ORDER BY vt1.c1 COLLATE RTRIM  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((((((((((((CASE v0.c2  WHEN v0.c0 THEN vt1.c0 WHEN v0.c2 THEN vt1.c0 END)OR((((v0.c2, v0.c0))>((v0.c0, v0.c2))))))OR(TYPEOF(DISTINCT v0.c0))))AND(((vt1.c0) ISNULL))))AND(((v0.c0) NOT NULL))))OR(CASE v0.c0  WHEN 0.29333449203257767 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 END)))AND(INSTR(((v0.c2) ISNULL), CASE v0.c0  WHEN v0.c2 THEN v0.c0 END)))) ORDER BY CASE (((x'')) BETWEEN ((x'61')) AND ((vt1.c1)))  WHEN ((NULL)+(v0.c0)) THEN LIKELY(v0.c2) END DESC, (((- (v0.c0)))-(((v0.c2) IS FALSE))) DESC INTERSECT SELECT * FROM v0, vt1 WHERE (((v0.c1) BETWEEN (v0.c0) AND ((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))))) ORDER BY CASE (((x'')) BETWEEN ((x'61')) AND ((vt1.c1)))  WHEN ((NULL)+(v0.c0)) THEN LIKELY(v0.c2) END DESC, (((- (v0.c0)))-(((v0.c2) IS FALSE))) DESC;
SELECT ALL MIN(v0.c0) FROM v0 WHERE ('1148994335') ORDER BY ((+ (v0.c1)) IN ())  NULLS FIRST;
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ('1148994335') ORDER BY ((+ (v0.c1)) IN ())  NULLS FIRST LIMIT 3;
SELECT * FROM vt1, v0 WHERE (((vt1.c0) BETWEEN (v0.c0) AND (v0.c0)) COLLATE BINARY) ORDER BY (((v0.c0 IN (vt1.c0, v0.c1)))<=(NULL))  NULLS FIRST, (- (((v0.c1)LIKE(v0.c2)))) ASC, (NOT (DATETIME(vt1.c1, v0.c0, vt1.c0)));
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0) BETWEEN (v0.c0) AND (v0.c0)) COLLATE BINARY) ORDER BY (((v0.c0 IN (vt1.c0, v0.c1)))<=(NULL))  NULLS FIRST, (- (((v0.c1)LIKE(v0.c2)))) ASC, (NOT (DATETIME(vt1.c1, v0.c0, vt1.c0))) INTERSECT SELECT * FROM vt1, v0 WHERE ((vt1.c0 IN ()) COLLATE RTRIM) ORDER BY (((v0.c0 IN (vt1.c0, v0.c1)))<=(NULL))  NULLS FIRST, (- (((v0.c1)LIKE(v0.c2)))) ASC, (NOT (DATETIME(vt1.c1, v0.c0, vt1.c0)));
SELECT * FROM vt1, v0 WHERE (((vt1.c0) BETWEEN (v0.c0) AND (v0.c0)) COLLATE BINARY) ORDER BY (((v0.c0 IN (vt1.c0, v0.c1)))<=(NULL))  NULLS FIRST, (- (((v0.c1)LIKE(v0.c2)))) ASC, (NOT (DATETIME(vt1.c1, v0.c0, vt1.c0)));
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0) BETWEEN (v0.c0) AND (v0.c0)) COLLATE BINARY) ORDER BY (((v0.c0 IN (vt1.c0, v0.c1)))<=(NULL))  NULLS FIRST, (- (((v0.c1)LIKE(v0.c2)))) ASC, (NOT (DATETIME(vt1.c1, v0.c0, vt1.c0))) INTERSECT SELECT * FROM vt1, v0 WHERE ((vt1.c0 IN ()) COLLATE RTRIM) ORDER BY (((v0.c0 IN (vt1.c0, v0.c1)))<=(NULL))  NULLS FIRST, (- (((v0.c1)LIKE(v0.c2)))) ASC, (NOT (DATETIME(vt1.c1, v0.c0, vt1.c0)));
SELECT ALL * FROM v0, vt1 WHERE (((- (v0.c2)) IN ())) ORDER BY ((vt1.c1) NOT NULL) COLLATE NOCASE;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((- (v0.c2)) IN ()))AND((((NOT (v0.c1)))AND(0.6878575651698283))))) ORDER BY CAST(((v0.c1)==(v0.c0)) AS REAL) ASC, (- ((((v0.c0, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((vt1.c0, v0.c1, vt1.c0))))) LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((- ((v0.c1 IN (v0.c1))))) ORDER BY CAST(((v0.c1)=(v0.c0)) AS REAL) ASC, (- ((((v0.c0, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((vt1.c0, v0.c1, vt1.c0))))) LIMIT 3;
SELECT ALL * FROM v0, vt1 WHERE (((- (v0.c2)) IN ())) ORDER BY ((vt1.c1) NOT NULL) COLLATE NOCASE;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((- (v0.c2)) IN ()))AND((((NOT (v0.c1)))AND(0.6878575651698283))))) ORDER BY CAST(((v0.c1)==(v0.c0)) AS REAL) ASC, (- ((((v0.c0, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((vt1.c0, v0.c1, vt1.c0))))) LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((- ((v0.c1 IN (v0.c1))))) ORDER BY CAST(((v0.c1)=(v0.c0)) AS REAL) ASC, (- ((((v0.c0, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((vt1.c0, v0.c1, vt1.c0))))) LIMIT 3;
SELECT ALL COUNT(*) FROM vt1 WHERE (((((((((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND('㳹')))OR(json_object(vt1.c1, vt1.c1, vt1.c1))))OR(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))AND(CAST(vt1.c1 AS INTEGER))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((((((((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)AND('㳹')))OR(json_object(vt1.c1, vt1.c1, vt1.c1))))OR(((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))))AND(CAST(vt1.c1 AS INTEGER))))AND((((~ (vt1.c0)))<(CAST(vt1.c0 AS BLOB)))))) LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((NULL)OR(((vt1.c0) IS FALSE)))) LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE NOCASE) NOT BETWEEN (((('P', vt1.c1))<((vt1.c0, vt1.c1)))) AND (vt1.c0))) ORDER BY ((((0.8680590165866197) IS TRUE))IS((('dm')<=(vt1.c0)))) DESC, ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) BETWEEN (((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))) AND (vt1.c0)) DESC, 'EvO';
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c1 COLLATE NOCASE) NOT BETWEEN (((('P', vt1.c1))<=((vt1.c0, vt1.c1)))) AND (vt1.c0)))AND('0.9990920255037324'))) ORDER BY ((((0.8680590165866197) IS TRUE))IS((('dm')<=(vt1.c0)))) DESC, ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) BETWEEN (((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))) AND (vt1.c0)) DESC, 'EvO' INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) ORDER BY ((((0.8680590165866197) IS TRUE))IS((('dm')<=(vt1.c0)))) DESC, ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) BETWEEN (((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))) AND (vt1.c0)) DESC, 'EvO';
SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE NOCASE) NOT BETWEEN (((('P', vt1.c1))<((vt1.c0, vt1.c1)))) AND (vt1.c0))) ORDER BY ((((0.8680590165866197) IS TRUE))IS((('dm')<=(vt1.c0)))) DESC, ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) BETWEEN (((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))) AND (vt1.c0)) DESC, 'EvO';
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c1 COLLATE NOCASE) NOT BETWEEN (((('P', vt1.c1))<=((vt1.c0, vt1.c1)))) AND (vt1.c0)))AND('0.9990920255037324'))) ORDER BY ((((0.8680590165866197) IS TRUE))IS((('dm')<=(vt1.c0)))) DESC, ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) BETWEEN (((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))) AND (vt1.c0)) DESC, 'EvO' INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) ORDER BY ((((0.8680590165866197) IS TRUE))IS((('dm')<=(vt1.c0)))) DESC, ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) BETWEEN (((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))) AND (vt1.c0)) DESC, 'EvO';
SELECT COUNT(*) FROM vt1 WHERE (vt1.c1) ORDER BY (((vt1.c0, vt1.c0)) BETWEEN ((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)), ((((((((vt1.c1)AND('-790740875')))OR(vt1.c0)))AND(vt1.c1)))OR('32506213')))) AND ((((((((vt1.c0)AND(vt1.c0)))OR(x'')))OR(vt1.c1)), ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))))) DESC  NULLS LAST, (((((((vt1.c0, vt1.c1))!=((vt1.c0, vt1.c1))))AND(((vt1.c0) NOT NULL))))AND((NOT (vt1.c0)))) ASC, (((- (vt1.c1)))|(((vt1.c0)*(vt1.c1)))) DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((vt1.c1)AND((((((+ (vt1.c1)))AND(((vt1.c1) BETWEEN (x'') AND (vt1.c0)))))AND((~ (vt1.c0))))))) ORDER BY (((vt1.c0, vt1.c0)) BETWEEN ((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)), ((((((((vt1.c1)AND('-790740875')))OR(vt1.c0)))AND(vt1.c1)))OR('32506213')))) AND ((((((((vt1.c0)AND(vt1.c0)))OR(x'')))OR(vt1.c1)), ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))))) DESC  NULLS LAST, (((((((vt1.c0, vt1.c1))!=((vt1.c0, vt1.c1))))AND(((vt1.c0) NOT NULL))))AND((NOT (vt1.c0)))) ASC, (((- (vt1.c1)))|(((vt1.c0)*(vt1.c1)))) DESC  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0 WHERE ((((NOT (v0.c0))) NOTNULL));
SELECT ALL * FROM v0 WHERE ((((((NOT (v0.c0))) NOTNULL))AND(LIKELIHOOD(DISTINCT v0.c1, CASE WHEN 0.45264850258235123 THEN v0.c1 ELSE v0.c1 END)))) LIMIT 2;
SELECT * FROM v0 WHERE ((((NOT (v0.c0))) NOTNULL));
SELECT ALL * FROM v0 WHERE ((((((NOT (v0.c0))) NOTNULL))AND(LIKELIHOOD(DISTINCT v0.c1, CASE WHEN 0.45264850258235123 THEN v0.c1 ELSE v0.c1 END)))) LIMIT 2;
SELECT MAX(vt1.c1) FROM v0, vt1 WHERE (x'51');
SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (((x'51')AND((- (v0.c0)) COLLATE NOCASE))) ORDER BY (((v0.c2 IN (v0.c0)))*((((vt1.c0))<((v0.c1))))), ((((0.5910419373893173) BETWEEN (vt1.c0) AND (v0.c1))) NOT BETWEEN ((NOT (v0.c1))) AND (v0.c2)) DESC INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (0.5331475094301044) ORDER BY (((v0.c2 IN (v0.c0)))*((((vt1.c0))<((v0.c1))))), ((((0.5910419373893173) BETWEEN (vt1.c0) AND (v0.c1))) NOT BETWEEN ((NOT (v0.c1))) AND (v0.c2)) DESC;
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE ((((NULL)LIKE(v0.c0)) IN ()));
SELECT MAX(v0.c2) FROM vt1, v0 WHERE ((((NULL)LIKE(v0.c0)) IN ()));
SELECT * FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(((vt1.c0)>>(vt1.c0)))))AND(((vt1.c1) IS TRUE))))AND((vt1.c1 IN (vt1.c1, '1468832677'))))) ORDER BY (((((vt1.c0) IS FALSE), json(vt1.c0)))>((((vt1.c1) NOTNULL), (+ (vt1.c1))))) ASC;
SELECT * FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(((vt1.c0)>>(vt1.c0)))))AND(((vt1.c1) IS TRUE))))AND((vt1.c1 IN (vt1.c1, '1468832677'))))) ORDER BY (((+ (vt1.c1))) NOT BETWEEN ((vt1.c1 IN ())) AND (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)))) DESC, (~ (json_extract(NULL, vt1.c1))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE ((((~ (vt1.c0)))OR(vt1.c0 COLLATE BINARY))) ORDER BY (((+ (vt1.c1))) NOT BETWEEN ((vt1.c1 IN ())) AND (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)))) DESC, (~ (json_extract(NULL, vt1.c1))) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(((vt1.c0)>>(vt1.c0)))))AND(((vt1.c1) IS TRUE))))AND((vt1.c1 IN (vt1.c1, '1468832677'))))) ORDER BY (((((vt1.c0) IS FALSE), json(vt1.c0)))>((((vt1.c1) NOTNULL), (+ (vt1.c1))))) ASC;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (v0.c2) ORDER BY (NOT ((((v0.c0, v0.c0)) BETWEEN ((v0.c2, v0.c1)) AND ((v0.c2, v0.c1)))))  NULLS LAST;
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((v0.c2)AND((((~ ('1047413736'))) IS TRUE)))) ORDER BY ((v0.c0 COLLATE BINARY) IS FALSE)  NULLS LAST, v0.c1 COLLATE BINARY  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE ((((x'3d' IN ()))LIKE((+ (v0.c2))))) ORDER BY ((v0.c0 COLLATE BINARY) IS FALSE)  NULLS LAST, v0.c1 COLLATE BINARY  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c0)LIKE(v0.c1)))!=((((v0.c2, NULL, v0.c0, v0.c2))<((v0.c1, v0.c0, v0.c2, v0.c2))))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c0)LIKE(v0.c1)))>((((v0.c2, NULL, v0.c0, v0.c2))<((v0.c1, v0.c0, v0.c2, v0.c2))))));
SELECT ALL MAX(v0.c1) FROM v0 CROSS JOIN vt1 ON '9862608' WHERE (CAST((('-652094336')IS(v0.c0)) AS REAL));
SELECT MAX(v0.c1) FROM v0 CROSS JOIN vt1 ON '9862608' WHERE (CAST((('-652094336')IS(v0.c0)) AS REAL)) ORDER BY CASE WHEN '1842326649' THEN (vt1.c0 IN (v0.c0)) ELSE vt1.c1 END, CAST(((v0.c1) NOT NULL) AS INTEGER) ASC  NULLS LAST, (((((vt1.c0, v0.c2))<=(('0.1382270436881673', vt1.c0))))<<(((vt1.c1)OR(vt1.c0)))) DESC LIMIT 0 INTERSECT SELECT ALL MAX(v0.c1) FROM v0 CROSS JOIN vt1 ON '9862608' WHERE (x'58') ORDER BY CASE WHEN '1842326649' THEN (vt1.c0 IN (v0.c0)) ELSE vt1.c1 END, CAST(((v0.c1) NOT NULL) AS INTEGER) ASC  NULLS LAST, (((((vt1.c0, v0.c2))<=(('0.1382270436881673', vt1.c0))))<<(((vt1.c1)OR(vt1.c0)))) DESC LIMIT 0;
SELECT * FROM vt1, v0 WHERE ((((v0.c1)AND(v0.c2)) IN (((v0.c2)<(vt1.c0))))) ORDER BY (((v0.c0 IN (v0.c1, vt1.c1)))||(LIKELY(DISTINCT v0.c1)))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((((v0.c1)AND(v0.c2)) IN (((v0.c2)<(vt1.c0))))) ORDER BY CASE CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN '-2117233741' ELSE v0.c2 END  WHEN ((vt1.c1) IS FALSE) THEN CAST(0.49224869496617396 AS NUMERIC) WHEN v0.c0 COLLATE BINARY THEN ((v0.c0)IS NOT(v0.c0)) END LIMIT 0x1;
SELECT * FROM vt1, v0 WHERE ((((v0.c1)AND(v0.c2)) IN (((v0.c2)<(vt1.c0))))) ORDER BY (((v0.c0 IN (v0.c1, vt1.c1)))||(LIKELY(DISTINCT v0.c1)))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((((v0.c1)AND(v0.c2)) IN (((v0.c2)<(vt1.c0))))) ORDER BY CASE CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN '-2117233741' ELSE v0.c2 END  WHEN ((vt1.c1) IS FALSE) THEN CAST(0.49224869496617396 AS NUMERIC) WHEN v0.c0 COLLATE BINARY THEN ((v0.c0)IS NOT(v0.c0)) END LIMIT 0x1;
SELECT * FROM v0 WHERE (((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)LIKE((('847161918')>>(v0.c0))))) ORDER BY ((((-1292305747) BETWEEN (v0.c2) AND (v0.c1))) IS TRUE), (('1299638610')<>(((v0.c0) NOT BETWEEN (v0.c1) AND ('JYCv'))))  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)LIKE((('847161918')>>(v0.c0))))) ORDER BY ((((-1292305747) BETWEEN (v0.c2) AND (v0.c1))) IS TRUE), (('1299638610')!=(((v0.c0) NOT BETWEEN (v0.c1) AND ('JYCv'))))  NULLS FIRST LIMIT 4 INTERSECT SELECT * FROM v0 WHERE (json_type(CAST(v0.c0 AS NUMERIC))) ORDER BY ((((0Xffffffffb2f8faad) BETWEEN (v0.c2) AND (v0.c1))) IS TRUE), (('1299638610')<>(((v0.c0) NOT BETWEEN (v0.c1) AND ('JYCv'))))  NULLS FIRST LIMIT 4;
SELECT * FROM v0 WHERE (((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)LIKE((('847161918')>>(v0.c0))))) ORDER BY ((((-1292305747) BETWEEN (v0.c2) AND (v0.c1))) IS TRUE), (('1299638610')<>(((v0.c0) NOT BETWEEN (v0.c1) AND ('JYCv'))))  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)LIKE((('847161918')>>(v0.c0))))) ORDER BY ((((-1292305747) BETWEEN (v0.c2) AND (v0.c1))) IS TRUE), (('1299638610')!=(((v0.c0) NOT BETWEEN (v0.c1) AND ('JYCv'))))  NULLS FIRST LIMIT 4 INTERSECT SELECT * FROM v0 WHERE (json_type(CAST(v0.c0 AS NUMERIC))) ORDER BY ((((0Xffffffffb2f8faad) BETWEEN (v0.c2) AND (v0.c1))) IS TRUE), (('1299638610')<>(((v0.c0) NOT BETWEEN (v0.c1) AND ('JYCv'))))  NULLS FIRST LIMIT 4;
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (CAST(((v0.c2)/(v0.c1)) AS REAL));
SELECT DISTINCT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (CAST(((v0.c2)/(v0.c1)) AS REAL));
SELECT MAX(v0.c0) FROM vt1, v0 WHERE (((((((((v0.c1) BETWEEN (vt1.c0) AND ('1654447368')))AND(((v0.c1)||(0.025107398096192668)))))AND(vt1.c0)))AND(CAST(vt1.c1 AS TEXT))));
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (((((((((((v0.c1) BETWEEN (vt1.c0) AND ('1654447368')))AND(((v0.c1)||(0.025107398096192668)))))AND(vt1.c0)))AND(CAST(vt1.c1 AS TEXT))))AND((((((('?!')) BETWEEN ((v0.c2)) AND ((x'2497'))), ((v0.c0)IS NOT(vt1.c1))))!=(((0Xffffffff8a5eddf4 IN (vt1.c0)), v0.c0 COLLATE BINARY)))))) ORDER BY (((((v0.c2)||(vt1.c0))))>=((((vt1.c0) NOTNULL)))) DESC  NULLS LAST INTERSECT SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (json_insert(((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c2)), (((vt1.c1, vt1.c1))<=((v0.c1, vt1.c0))), CASE v0.c0  WHEN v0.c0 THEN vt1.c1 END, v0.c1 COLLATE NOCASE, ((vt1.c1) NOT NULL))) ORDER BY (((((v0.c2)||(vt1.c0))))>=((((vt1.c0) NOTNULL)))) DESC  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c1) IS TRUE))%(vt1.c1 COLLATE RTRIM)));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c1) IS TRUE))%(vt1.c1 COLLATE RTRIM))) ORDER BY (((vt1.c1 IN (vt1.c1)))+(((vt1.c0) IS FALSE))) DESC  NULLS FIRST, vt1.c1 DESC  NULLS LAST, CAST(vt1.c0 AS TEXT) COLLATE BINARY, (((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN 0Xffffffff9f271778 WHEN vt1.c0 THEN vt1.c0 END, UNLIKELY(DISTINCT vt1.c1), vt1.c1, CASE WHEN NULL THEN vt1.c0 ELSE vt1.c1 END))>(((((vt1.c0, vt1.c0, vt1.c0, vt1.c1, vt1.c0))<((vt1.c1, vt1.c0, vt1.c1, vt1.c1, vt1.c0))), UPPER(DISTINCT vt1.c0), CAST(vt1.c0 AS NUMERIC), HEX(vt1.c0))))  NULLS FIRST LIMIT 1 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (CAST('-1287524755' AS REAL)) ORDER BY (((vt1.c1 IN (vt1.c1)))+(((vt1.c0) IS FALSE))) DESC  NULLS FIRST, vt1.c1 DESC  NULLS LAST, CAST(vt1.c0 AS TEXT) COLLATE BINARY, (((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN 0Xffffffff9f271778 WHEN vt1.c0 THEN vt1.c0 END, UNLIKELY(DISTINCT vt1.c1), vt1.c1, CASE WHEN NULL THEN vt1.c0 ELSE vt1.c1 END))>(((((vt1.c0, vt1.c0, vt1.c0, vt1.c1, vt1.c0))<((vt1.c1, vt1.c0, vt1.c1, vt1.c1, vt1.c0))), UPPER(DISTINCT vt1.c0), CAST(vt1.c0 AS NUMERIC), HEX(vt1.c0))))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c0);
SELECT * FROM v0, vt1 WHERE (((vt1.c0)AND(('-264351497' IN (((((vt1.c0)OR(v0.c2)))OR(vt1.c1)), (NOT (v0.c1))))))) ORDER BY x'b09f' LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c0);
SELECT * FROM v0, vt1 WHERE (((vt1.c0)AND(('-264351497' IN (((((vt1.c0)OR(v0.c2)))OR(vt1.c1)), (NOT (v0.c1))))))) ORDER BY x'b09f' LIMIT 0;
SELECT ALL * FROM vt1 INNER JOIN v0 ON (((v0.c1 IN ()))LIKE(0.4278485423622064)) WHERE (NULL);
SELECT ALL * FROM vt1 INNER JOIN v0 ON (((v0.c1 IN ()))LIKE(0.4278485423622064)) WHERE (NULL) ORDER BY vt1.c1 INTERSECT SELECT * FROM vt1 INNER JOIN v0 ON (((v0.c1 IN ()))LIKE(0.4278485423622064)) WHERE (((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1))) IS TRUE)) ORDER BY vt1.c1;
SELECT ALL * FROM vt1 INNER JOIN v0 ON (((v0.c1 IN ()))LIKE(0.4278485423622064)) WHERE (NULL);
SELECT ALL * FROM vt1 INNER JOIN v0 ON (((v0.c1 IN ()))LIKE(0.4278485423622064)) WHERE (NULL) ORDER BY vt1.c1 INTERSECT SELECT * FROM vt1 INNER JOIN v0 ON (((v0.c1 IN ()))LIKE(0.4278485423622064)) WHERE (((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1))) IS TRUE)) ORDER BY vt1.c1;
SELECT ALL MAX(v0.c2) FROM v0, vt1 WHERE (v0.c2 COLLATE NOCASE) ORDER BY ((LIKELIHOOD(DISTINCT vt1.c1, vt1.c0))-((+ (vt1.c1))))  NULLS FIRST, CASE WHEN (((vt1.c1))<=((vt1.c0))) THEN ((vt1.c1) IS TRUE) WHEN ((v0.c0)/(vt1.c1)) THEN v0.c1 WHEN (+ (vt1.c0)) THEN ((0.6507662248843258) BETWEEN (v0.c0) AND (vt1.c1)) END ASC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM v0 NOT INDEXED, vt1 WHERE (((v0.c2 COLLATE NOCASE)AND(vt1.c1))) ORDER BY CAST(CAST(v0.c1 AS INTEGER) AS TEXT) ASC LIMIT 0 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE ('C%I') ORDER BY CAST(CAST(v0.c1 AS INTEGER) AS TEXT) ASC LIMIT 0;
SELECT ALL COUNT(*) FROM vt1 WHERE (((CAST(vt1.c1 AS INTEGER)) NOT BETWEEN (((vt1.c1)+(vt1.c0))) AND ((vt1.c1 IN (vt1.c1))))) ORDER BY ((((vt1.c1)<>(vt1.c0)))+(vt1.c1)) ASC  NULLS FIRST, (~ ((((((((('-1809434267')AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))) DESC, ((json_quote(vt1.c1))AND(vt1.c1 COLLATE NOCASE))  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((CAST(vt1.c1 AS INTEGER)) NOT BETWEEN (((vt1.c1)+(vt1.c0))) AND ((vt1.c1 IN (vt1.c1))))) ORDER BY (((vt1.c0)GLOB(vt1.c1)) IN (((vt1.c0)-(vt1.c1))))  NULLS FIRST, (((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOT BETWEEN ((((vt1.c1, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, 1468832677, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c1)))) AND (((x'e2')>(vt1.c0)))) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM v0 WHERE ((- ((((x'66', v0.c0, v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c0)) AND ((v0.c1, v0.c1, v0.c2, v0.c2)))))) ORDER BY (((((v0.c1, v0.c2, v0.c1)) BETWEEN ((v0.c1, v0.c1, v0.c0)) AND ((931266565, v0.c0, v0.c1)))) NOTNULL)  NULLS FIRST, CASE CASE WHEN v0.c1 THEN '-1017404822' WHEN v0.c1 THEN v0.c2 END  WHEN (((v0.c2)) BETWEEN ((NULL)) AND ((v0.c2))) THEN v0.c2 END  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((- ((((x'66', v0.c0, v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c0)) AND ((v0.c1, v0.c1, v0.c2, v0.c2))))))AND(NULL))) ORDER BY ((x'')<(CAST(v0.c2 AS BLOB))), ((v0.c2 COLLATE BINARY)GLOB(IFNULL(v0.c2, '1372522949'))), v0.c2, (((v0.c0, v0.c1)) NOT BETWEEN ((CASE v0.c1  WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END, ((v0.c0) BETWEEN (v0.c0) AND (v0.c1)))) AND ((HEX(v0.c1), ((v0.c2)==('-270271562')))));
SELECT ALL * FROM v0 WHERE ((- ((((x'66', v0.c0, v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c0)) AND ((v0.c1, v0.c1, v0.c2, v0.c2)))))) ORDER BY (((((v0.c1, v0.c2, v0.c1)) BETWEEN ((v0.c1, v0.c1, v0.c0)) AND ((931266565, v0.c0, v0.c1)))) NOTNULL)  NULLS FIRST, CASE CASE WHEN v0.c1 THEN '-1017404822' WHEN v0.c1 THEN v0.c2 END  WHEN (((v0.c2)) BETWEEN ((NULL)) AND ((v0.c2))) THEN v0.c2 END  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((- ((((x'66', v0.c0, v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c0)) AND ((v0.c1, v0.c1, v0.c2, v0.c2))))))AND(NULL))) ORDER BY ((x'')<(CAST(v0.c2 AS BLOB))), ((v0.c2 COLLATE BINARY)GLOB(IFNULL(v0.c2, '1372522949'))), v0.c2, (((v0.c0, v0.c1)) NOT BETWEEN ((CASE v0.c1  WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END, ((v0.c0) BETWEEN (v0.c0) AND (v0.c1)))) AND ((HEX(v0.c1), ((v0.c2)==('-270271562')))));
SELECT ALL * FROM v0 WHERE (CAST(CASE WHEN v0.c1 THEN '-2114950333' ELSE v0.c0 END AS NUMERIC));
SELECT * FROM v0 WHERE (CAST(CASE WHEN v0.c1 THEN '-2114950333' ELSE v0.c0 END AS NUMERIC));
SELECT ALL * FROM v0 WHERE (CAST(CASE WHEN v0.c1 THEN '-2114950333' ELSE v0.c0 END AS NUMERIC));
SELECT * FROM v0 WHERE (CAST(CASE WHEN v0.c1 THEN '-2114950333' ELSE v0.c0 END AS NUMERIC));
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON LTRIM(CAST(v0.c2 AS INTEGER), CAST(vt1.c0 AS INTEGER)) WHERE (CAST(v0.c1 AS BLOB) COLLATE NOCASE);
SELECT DISTINCT COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON LTRIM(CAST(v0.c2 AS INTEGER), CAST(vt1.c0 AS INTEGER)) WHERE (((CAST(v0.c1 AS BLOB) COLLATE NOCASE)AND(((((v0.c2) NOT NULL)) NOT BETWEEN (v0.c2 COLLATE BINARY) AND (((v0.c2) NOTNULL)))))) ORDER BY (((((v0.c0, v0.c0, vt1.c1)) NOT BETWEEN ((v0.c1, v0.c0, vt1.c1)) AND ((vt1.c1, vt1.c1, v0.c2)))) BETWEEN (((((((((((vt1.c1)OR(v0.c0)))AND(vt1.c0)))AND(NULL)))AND(v0.c0)))OR(vt1.c0))) AND (CAST(v0.c0 AS INTEGER))) ASC;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c1))) BETWEEN ((((NULL)) BETWEEN ((v0.c0)) AND ((v0.c0)))) AND (v0.c2)));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c1))) BETWEEN ((((NULL)) BETWEEN ((v0.c0)) AND ((v0.c0)))) AND (v0.c2)))AND(CAST(CASE -2079096749  WHEN vt1.c0 THEN v0.c0 END AS REAL)))) ORDER BY CAST(v0.c2 COLLATE NOCASE AS BLOB) ASC  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c1))) BETWEEN ((((NULL)) BETWEEN ((v0.c0)) AND ((v0.c0)))) AND (v0.c2)));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c1))) BETWEEN ((((NULL)) BETWEEN ((v0.c0)) AND ((v0.c0)))) AND (v0.c2)))AND(CAST(CASE -2079096749  WHEN vt1.c0 THEN v0.c0 END AS REAL)))) ORDER BY CAST(v0.c2 COLLATE NOCASE AS BLOB) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 AS BLOB)) BETWEEN (v0.c1) AND (((v0.c0)<(v0.c2))))) ORDER BY (((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c2)))) BETWEEN ((((v0.c2, v0.c0))<((v0.c1, v0.c1)))) AND (CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END)) DESC;
SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c1 AS BLOB)) BETWEEN (v0.c1) AND (((v0.c0)<(v0.c2))))) ORDER BY (((v0.c2 IN ()))OR(v0.c2 COLLATE BINARY)), (((v0.c0, v0.c1)) NOT BETWEEN (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c1))), ((((v0.c1)AND(v0.c2)))OR(v0.c0)))) AND ((CAST(v0.c0 AS NUMERIC), ((v0.c1) BETWEEN (v0.c2) AND (v0.c2))))) DESC LIMIT 0;
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 AS BLOB)) BETWEEN (v0.c1) AND (((v0.c0)<(v0.c2))))) ORDER BY (((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c2)))) BETWEEN ((((v0.c2, v0.c0))<((v0.c1, v0.c1)))) AND (CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END)) DESC;
SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c1 AS BLOB)) BETWEEN (v0.c1) AND (((v0.c0)<(v0.c2))))) ORDER BY (((v0.c2 IN ()))OR(v0.c2 COLLATE BINARY)), (((v0.c0, v0.c1)) NOT BETWEEN (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c1))), ((((v0.c1)AND(v0.c2)))OR(v0.c0)))) AND ((CAST(v0.c0 AS NUMERIC), ((v0.c1) BETWEEN (v0.c2) AND (v0.c2))))) DESC LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1, v0 WHERE (((1.409977447E9) NOTNULL)) ORDER BY (~ ((v0.c1 IN ()))) DESC;
SELECT ALL MAX(vt1.c0) FROM vt1, v0 WHERE (((((1.409977447E9) NOTNULL))AND((((+ (v0.c1))) NOT NULL)))) ORDER BY ((((((((v0.c1)OR(v0.c0)))OR(vt1.c0)))OR(x'')))+(((vt1.c1)||(vt1.c0)))), (((CASE WHEN 0.5329958685328269 THEN v0.c2 END, (+ (1554466327)), CAST(vt1.c0 AS INTEGER)))<>(((NOT (v0.c2)), ((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)), (v0.c1 IN (v0.c0))))) INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1, v0 WHERE (((v0.c0) NOT NULL)) ORDER BY ((((((((v0.c1)OR(v0.c0)))OR(vt1.c0)))OR(x'')))+(((vt1.c1)||(vt1.c0)))), (((CASE WHEN 0.5329958685328269 THEN v0.c2 END, (+ (0x5ca74617)), CAST(vt1.c0 AS INTEGER)))!=(((NOT (v0.c2)), ((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)), (v0.c1 IN (v0.c0)))));
SELECT ALL COUNT(*) FROM vt1 WHERE ((((((vt1.c1) NOTNULL)))>((IFNULL(DISTINCT vt1.c0, vt1.c1)))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((((vt1.c1) NOTNULL)))>((IFNULL(DISTINCT vt1.c0, vt1.c1))))) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((vt1.c0) NOT NULL)) LIMIT 0X2;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((CAST(v0.c0 AS BLOB))-(CASE WHEN vt1.c1 THEN v0.c2 END)) WHERE ((((0.9821273036187623)%(v0.c2)) IN (((v0.c1)GLOB(NULL)))));
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((CAST(v0.c0 AS BLOB))-(CASE WHEN vt1.c1 THEN v0.c2 END)) WHERE ((((0.9821273036187623)%(v0.c2)) IN (((v0.c1)GLOB(NULL)))));
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((CAST(v0.c0 AS BLOB))-(CASE WHEN vt1.c1 THEN v0.c2 END)) WHERE ((((0.9821273036187623)%(v0.c2)) IN (((v0.c1)GLOB(NULL)))));
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((CAST(v0.c0 AS BLOB))-(CASE WHEN vt1.c1 THEN v0.c2 END)) WHERE ((((0.9821273036187623)%(v0.c2)) IN (((v0.c1)GLOB(NULL)))));
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (((((v0.c2)-(v0.c2)))<>(IFNULL(DISTINCT v0.c1, v0.c2)))) ORDER BY ((TRIM(vt1.c0, v0.c1)) NOT NULL) DESC, ((((((((((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)))AND(1333926677)))AND(((0x41ec5a7e)>=(v0.c0)))))AND(((0.8175947210099783)&(vt1.c1)))))AND(CAST('0.4743618102510123' AS INTEGER))))OR(((vt1.c1) BETWEEN (v0.c1) AND (v0.c1)))), (NOT (((v0.c1) IS TRUE)))  NULLS FIRST;
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (((((((v0.c2)-(v0.c2)))<(IFNULL(DISTINCT v0.c1, v0.c2))))AND((((NULL)LIKE(v0.c0)) IN ())))) ORDER BY ((TRIM(vt1.c0, v0.c1)) NOT NULL) DESC, ((((((((((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)))AND(1333926677)))AND(((1106008702)>=(v0.c0)))))AND(((0.8175947210099783)&(vt1.c1)))))AND(CAST('0.4743618102510123' AS INTEGER))))OR(((vt1.c1) BETWEEN (v0.c1) AND (v0.c1)))), (NOT (((v0.c1) IS TRUE)))  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE ((((((v0.c0)OR(v0.c0)), x'6c', ((((((v0.c0)OR(v0.c2)))OR(v0.c2)))AND(v0.c0))))>((((v0.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)), ((v0.c1)<>(v0.c2)), ((v0.c0) NOT BETWEEN (x'09') AND (vt1.c0)))))) ORDER BY ((TRIM(vt1.c0, v0.c1)) NOT NULL) DESC, ((((((((((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)))AND(1333926677)))AND(((1106008702)>=(v0.c0)))))AND(((0.8175947210099783)&(vt1.c1)))))AND(CAST('0.4743618102510123' AS INTEGER))))OR(((vt1.c1) BETWEEN (v0.c1) AND (v0.c1)))), (NOT (((v0.c1) IS TRUE)))  NULLS FIRST LIMIT 0x1;
SELECT * FROM v0, vt1 WHERE ((((((((vt1.c0 IN (v0.c1, v0.c1)))AND(CASE vt1.c1  WHEN v0.c0 THEN vt1.c0 WHEN 0.9633115728778252 THEN vt1.c1 ELSE vt1.c0 END)))OR(v0.c1)))AND(LTRIM(v0.c2))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((((vt1.c0 IN (v0.c1, v0.c1)))AND(CASE vt1.c1  WHEN v0.c0 THEN vt1.c0 WHEN 0.9633115728778252 THEN vt1.c1 ELSE vt1.c0 END)))OR(v0.c1)))AND(LTRIM(v0.c2))))AND(v0.c1)));
SELECT * FROM v0, vt1 WHERE ((((((((vt1.c0 IN (v0.c1, v0.c1)))AND(CASE vt1.c1  WHEN v0.c0 THEN vt1.c0 WHEN 0.9633115728778252 THEN vt1.c1 ELSE vt1.c0 END)))OR(v0.c1)))AND(LTRIM(v0.c2))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((((vt1.c0 IN (v0.c1, v0.c1)))AND(CASE vt1.c1  WHEN v0.c0 THEN vt1.c0 WHEN 0.9633115728778252 THEN vt1.c1 ELSE vt1.c0 END)))OR(v0.c1)))AND(LTRIM(v0.c2))))AND(v0.c1)));
SELECT MAX(v0.c1) FROM v0 WHERE (((IFNULL(DISTINCT '', v0.c0))<<(v0.c0 COLLATE RTRIM)));
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((((IFNULL(DISTINCT '', v0.c0))<<(v0.c0 COLLATE RTRIM)))AND(((((v0.c0) IS FALSE))-(((v0.c0) IS FALSE)))))) ORDER BY ((v0.c0)*((- (v0.c2)))) ASC INTERSECT SELECT ALL MAX(v0.c1) FROM v0 WHERE (v0.c0) ORDER BY ((v0.c0)*((- (v0.c2)))) ASC;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((((vt1.c1) BETWEEN (vt1.c0) AND (v0.c1))) IS TRUE));
SELECT COUNT(*) FROM vt1, v0 WHERE (((((vt1.c1) BETWEEN (vt1.c0) AND (v0.c1))) IS TRUE));
SELECT MIN(v0.c2) FROM v0 WHERE (CASE ((v0.c1)|(v0.c1))  WHEN (~ (v0.c2)) THEN v0.c0 COLLATE RTRIM ELSE v0.c2 END);
SELECT ALL MIN(v0.c2) FROM v0 WHERE (CASE ((v0.c1)|(v0.c1))  WHEN (~ (v0.c2)) THEN v0.c0 COLLATE RTRIM ELSE v0.c2 END) ORDER BY v0.c2;
SELECT * FROM v0 WHERE (((CASE v0.c1  WHEN v0.c1 THEN v0.c2 END)>=((NOT (v0.c1))))) ORDER BY CASE (+ (v0.c2))  WHEN ((NULL) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN v0.c1 COLLATE RTRIM ELSE ((v0.c0) BETWEEN (v0.c0) AND (v0.c2)) END, CAST(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)) AS INTEGER)  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((CASE v0.c1  WHEN v0.c1 THEN v0.c2 END)>=((NOT (v0.c1))))) ORDER BY CASE (+ (v0.c2))  WHEN ((NULL) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN v0.c1 COLLATE RTRIM ELSE ((v0.c0) BETWEEN (v0.c0) AND (v0.c2)) END, CAST(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)) AS INTEGER)  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE (((CASE v0.c1  WHEN v0.c1 THEN v0.c2 END)>=((NOT (v0.c1))))) ORDER BY CASE (+ (v0.c2))  WHEN ((NULL) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN v0.c1 COLLATE RTRIM ELSE ((v0.c0) BETWEEN (v0.c0) AND (v0.c2)) END, CAST(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)) AS INTEGER)  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((CASE v0.c1  WHEN v0.c1 THEN v0.c2 END)>=((NOT (v0.c1))))) ORDER BY CASE (+ (v0.c2))  WHEN ((NULL) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN v0.c1 COLLATE RTRIM ELSE ((v0.c0) BETWEEN (v0.c0) AND (v0.c2)) END, CAST(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)) AS INTEGER)  NULLS LAST LIMIT 0;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (CAST(SQLITE_COMPILEOPTION_GET(v0.c0) AS NUMERIC)) ORDER BY ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) BETWEEN (((((v0.c2)AND(vt1.c1)))OR(vt1.c1))) AND ((v0.c1 IN ()))) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((CAST(SQLITE_COMPILEOPTION_GET(v0.c0) AS NUMERIC))AND(NULL))) ORDER BY ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) BETWEEN (((((v0.c2)AND(vt1.c1)))OR(vt1.c1))) AND ((v0.c1 IN ()))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL MIN(v0.c2) FROM v0 WHERE ((~ (((v0.c2)LIKE(v0.c1))))) ORDER BY CASE WHEN LOWER(DISTINCT v0.c0) THEN (((v0.c0, '1056799550', v0.c1, v0.c2, v0.c2))<=((v0.c1, v0.c1, v0.c0, v0.c0, v0.c0))) WHEN (- (v0.c2)) THEN CASE WHEN v0.c1 THEN v0.c1 END ELSE (NOT (v0.c0)) END;
SELECT MIN(v0.c2) FROM v0 WHERE ((~ (((v0.c2)LIKE(v0.c1))))) ORDER BY CASE WHEN LOWER(DISTINCT v0.c0) THEN (((v0.c0, '1056799550', v0.c1, v0.c2, v0.c2))<=((v0.c1, v0.c1, v0.c0, v0.c0, v0.c0))) WHEN (- (v0.c2)) THEN CASE WHEN v0.c1 THEN v0.c1 END ELSE (NOT (v0.c0)) END LIMIT 0 INTERSECT SELECT ALL MIN(v0.c2) FROM v0 WHERE (((((((((((v0.c0)OR(v0.c0)))OR(v0.c1)))AND(0.040875946328761015)))OR(v0.c0)))AND(v0.c1)) COLLATE RTRIM) ORDER BY CASE WHEN LOWER(DISTINCT v0.c0) THEN (((v0.c0, '1056799550', v0.c1, v0.c2, v0.c2))<=((v0.c1, v0.c1, v0.c0, v0.c0, v0.c0))) WHEN (- (v0.c2)) THEN CASE WHEN v0.c1 THEN v0.c1 END ELSE (NOT (v0.c0)) END LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE ((~ ((((0.191982152065722, vt1.c1, v0.c2, v0.c2)) NOT BETWEEN ((vt1.c1, vt1.c1, v0.c0, v0.c2)) AND ((v0.c1, v0.c0, v0.c1, vt1.c1))))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((~ ((((0.191982152065722, vt1.c1, v0.c2, v0.c2)) NOT BETWEEN ((vt1.c1, vt1.c1, v0.c0, v0.c2)) AND ((v0.c1, v0.c0, v0.c1, vt1.c1))))))AND(v0.c1)));
SELECT ALL * FROM vt1, v0 WHERE ((~ ((((0.191982152065722, vt1.c1, v0.c2, v0.c2)) NOT BETWEEN ((vt1.c1, vt1.c1, v0.c0, v0.c2)) AND ((v0.c1, v0.c0, v0.c1, vt1.c1))))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((~ ((((0.191982152065722, vt1.c1, v0.c2, v0.c2)) NOT BETWEEN ((vt1.c1, vt1.c1, v0.c0, v0.c2)) AND ((v0.c1, v0.c0, v0.c1, vt1.c1))))))AND(v0.c1)));
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE (CAST(((v0.c0)&(vt1.c0)) AS BLOB));
SELECT DISTINCT MAX(vt1.c0) FROM v0, vt1 WHERE (CAST(((v0.c0)&(vt1.c0)) AS BLOB));
SELECT ALL * FROM v0, vt1 WHERE (TYPEOF(STRFTIME(v0.c0, vt1.c0, v0.c0, vt1.c0))) ORDER BY (((v0.c0)) BETWEEN ((CAST(v0.c2 AS TEXT))) AND ((v0.c0))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 NOT INDEXED, vt1 WHERE (((TYPEOF(STRFTIME(v0.c0, vt1.c0, v0.c0, vt1.c0)))AND((((vt1.c0, v0.c0 COLLATE BINARY, (+ (vt1.c0))))=((CASE v0.c2  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c1 END, (((v0.c2, vt1.c1))!=((vt1.c0, v0.c2))), vt1.c0 COLLATE BINARY)))))) ORDER BY vt1.c0, ((LOWER(vt1.c0))>>((vt1.c0 IN ()))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(((((v0.c2)OR(v0.c0)))AND(vt1.c1)) AS REAL)) ORDER BY vt1.c0, ((LOWER(vt1.c0))>>((vt1.c0 IN ())));
SELECT ALL * FROM v0, vt1 WHERE (TYPEOF(STRFTIME(v0.c0, vt1.c0, v0.c0, vt1.c0))) ORDER BY (((v0.c0)) BETWEEN ((CAST(v0.c2 AS TEXT))) AND ((v0.c0))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 NOT INDEXED, vt1 WHERE (((TYPEOF(STRFTIME(v0.c0, vt1.c0, v0.c0, vt1.c0)))AND((((vt1.c0, v0.c0 COLLATE BINARY, (+ (vt1.c0))))=((CASE v0.c2  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c1 END, (((v0.c2, vt1.c1))!=((vt1.c0, v0.c2))), vt1.c0 COLLATE BINARY)))))) ORDER BY vt1.c0, ((LOWER(vt1.c0))>>((vt1.c0 IN ()))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(((((v0.c2)OR(v0.c0)))AND(vt1.c1)) AS REAL)) ORDER BY vt1.c0, ((LOWER(vt1.c0))>>((vt1.c0 IN ())));
SELECT MIN(vt1.c0) FROM vt1 CROSS JOIN v0 ON (((v0.c1 IN (NULL)))*(((((((v0.c0)AND(x'69')))OR(v0.c2)))AND(v0.c1)))) WHERE ((((((((vt1.c1)AND(vt1.c1)))AND(x'')), v0.c1))==(((+ (x'')), ((v0.c2)LIKE(vt1.c1))))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 CROSS JOIN v0 ON (((v0.c1 IN (NULL)))*(((((((v0.c0)AND(x'69')))OR(v0.c2)))AND(v0.c1)))) WHERE ((((((((vt1.c1)AND(vt1.c1)))AND(x'')), v0.c1))=(((+ (x'')), ((v0.c2)LIKE(vt1.c1)))))) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 CROSS JOIN v0 ON (((v0.c1 IN (NULL)))*(((((((v0.c0)AND(x'69')))OR(v0.c2)))AND(v0.c1)))) WHERE (((((((v0.c2)>(vt1.c0)))OR(UPPER(DISTINCT v0.c2))))OR(CASE v0.c2  WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN '' THEN v0.c2 ELSE vt1.c1 END)));
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c0) NOTNULL), (vt1.c0 IN (v0.c2))))<((v0.c0 COLLATE RTRIM, CAST(v0.c2 AS NUMERIC)))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((v0.c0) NOTNULL), (vt1.c0 IN (v0.c2))))<((v0.c0 COLLATE RTRIM, CAST(v0.c2 AS NUMERIC)))))AND((- (v0.c1 COLLATE RTRIM))))) ORDER BY HEX(DISTINCT ((v0.c2) IS FALSE))  NULLS LAST, ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN v0.c2 THEN vt1.c0 END) IS FALSE), (((v0.c1)IS(vt1.c1)) IN ()) LIMIT 1;
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c0) NOTNULL), (vt1.c0 IN (v0.c2))))<((v0.c0 COLLATE RTRIM, CAST(v0.c2 AS NUMERIC)))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((v0.c0) NOTNULL), (vt1.c0 IN (v0.c2))))<((v0.c0 COLLATE RTRIM, CAST(v0.c2 AS NUMERIC)))))AND((- (v0.c1 COLLATE RTRIM))))) ORDER BY HEX(DISTINCT ((v0.c2) IS FALSE))  NULLS LAST, ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN v0.c2 THEN vt1.c0 END) IS FALSE), (((v0.c1)IS(vt1.c1)) IN ()) LIMIT 1;
SELECT MAX(v0.c1) FROM v0 WHERE (TRIM(v0.c2 COLLATE RTRIM, ((v0.c0)*(v0.c1))));
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((TRIM(v0.c2 COLLATE RTRIM, ((v0.c0)*(v0.c1))))AND(((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) COLLATE BINARY))) INTERSECT SELECT MAX(v0.c1) FROM v0 WHERE ((((((v0.c1)OR(v0.c0)))OR(v0.c0)) IN ()));
SELECT MAX(vt1.c0) FROM vt1, v0 WHERE (((~ (vt1.c1)) IN ()));
SELECT DISTINCT MAX(vt1.c0) FROM vt1, v0 WHERE (((~ (vt1.c1)) IN ())) ORDER BY json_array_length(LTRIM(v0.c2)) DESC, (((((v0.c0)) NOT BETWEEN ((NULL)) AND ((vt1.c1))))AND(vt1.c1)) DESC;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (CAST((v0.c1 IN (v0.c2, v0.c2, v0.c0)) AS TEXT));
SELECT MIN(v0.c1) FROM v0 WHERE (CAST((v0.c1 IN (v0.c2, v0.c2, v0.c0)) AS TEXT)) ORDER BY (- (v0.c1)) ASC, (+ (1245804197)) COLLATE NOCASE;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((((v0.c0 COLLATE RTRIM)AND(((v0.c0) NOT BETWEEN (v0.c1) AND (vt1.c1)))))AND(((v0.c2) IS FALSE))))AND(CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 WHEN 0xffffffffda238ff2 THEN vt1.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((((((v0.c0 COLLATE RTRIM)AND(((v0.c0) NOT BETWEEN (v0.c1) AND (vt1.c1)))))AND(((v0.c2) IS FALSE))))AND(CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 WHEN -635203598 THEN vt1.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)))AND((v0.c0 IN (vt1.c0)) COLLATE RTRIM))) LIMIT 0X3;
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt1 ON ((CHANGES())>((- (vt1.c1)))) WHERE (CAST(TYPEOF(DISTINCT v0.c1) AS INTEGER)) ORDER BY (~ (((((((((((((vt1.c1)OR(v0.c0)))OR(v0.c2)))OR(v0.c2)))OR(x'71')))OR(vt1.c1)))OR(x''))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt1 ON ((CHANGES())>((- (vt1.c1)))) WHERE (((CAST(TYPEOF(DISTINCT v0.c1) AS INTEGER))AND((CASE vt1.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE v0.c2 END IN ())))) ORDER BY (~ (((((((((((((vt1.c1)OR(v0.c0)))OR(v0.c2)))OR(v0.c2)))OR(x'71')))OR(vt1.c1)))OR(x''))))  NULLS FIRST LIMIT 1 INTERSECT SELECT COUNT(*) FROM v0 INNER JOIN vt1 ON ((CHANGES())>((- (vt1.c1)))) WHERE ((NOT (CAST(v0.c1 AS BLOB)))) ORDER BY (~ (((((((((((((vt1.c1)OR(v0.c0)))OR(v0.c2)))OR(v0.c2)))OR(x'71')))OR(vt1.c1)))OR(x''))))  NULLS FIRST LIMIT 1;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON (((v0.c0, v0.c1, '1870125335', v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1 COLLATE BINARY, ((vt1.c0) NOT BETWEEN (v0.c0) AND (v0.c1)), UNLIKELY(v0.c1), 0.6351117228075769, ((((((((v0.c0)OR(v0.c2)))OR(v0.c0)))AND(vt1.c0)))OR(vt1.c0)), (~ (v0.c1)))) AND (('-2106733405', ((vt1.c0)+(vt1.c1)), (- (v0.c1)), CAST(vt1.c0 AS TEXT), CASE vt1.c0  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, CAST(v0.c1 AS TEXT)))) WHERE ((NULL IN (CASE vt1.c0  WHEN v0.c2 THEN v0.c0 END))) ORDER BY ((0.2457594545888495) ISNULL), CAST(((v0.c0)-(v0.c0)) AS REAL)  NULLS LAST;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON (((v0.c0, v0.c1, '1870125335', v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1 COLLATE BINARY, ((vt1.c0) NOT BETWEEN (v0.c0) AND (v0.c1)), UNLIKELY(v0.c1), 0.6351117228075769, ((((((((v0.c0)OR(v0.c2)))OR(v0.c0)))AND(vt1.c0)))OR(vt1.c0)), (~ (v0.c1)))) AND (('-2106733405', ((vt1.c0)+(vt1.c1)), (- (v0.c1)), CAST(vt1.c0 AS TEXT), CASE vt1.c0  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, CAST(v0.c1 AS TEXT)))) WHERE ((NULL IN (CASE vt1.c0  WHEN v0.c2 THEN v0.c0 END))) ORDER BY ((0.2457594545888495) ISNULL), CAST(((v0.c0)-(v0.c0)) AS REAL)  NULLS LAST INTERSECT SELECT * FROM vt1 NOT INDEXED LEFT OUTER JOIN v0 ON (((v0.c0, v0.c1, '1870125335', v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1 COLLATE BINARY, ((vt1.c0) NOT BETWEEN (v0.c0) AND (v0.c1)), UNLIKELY(v0.c1), 0.6351117228075769, ((((((((v0.c0)OR(v0.c2)))OR(v0.c0)))AND(vt1.c0)))OR(vt1.c0)), (~ (v0.c1)))) AND (('-2106733405', ((vt1.c0)+(vt1.c1)), (- (v0.c1)), CAST(vt1.c0 AS TEXT), CASE vt1.c0  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, CAST(v0.c1 AS TEXT)))) WHERE (((((((((vt1.c1)OR(v0.c1)))AND(v0.c2)))OR('I+')))|((- (vt1.c1))))) ORDER BY ((0.2457594545888495) ISNULL), CAST(((v0.c0)-(v0.c0)) AS REAL)  NULLS LAST;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON (((v0.c0, v0.c1, '1870125335', v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1 COLLATE BINARY, ((vt1.c0) NOT BETWEEN (v0.c0) AND (v0.c1)), UNLIKELY(v0.c1), 0.6351117228075769, ((((((((v0.c0)OR(v0.c2)))OR(v0.c0)))AND(vt1.c0)))OR(vt1.c0)), (~ (v0.c1)))) AND (('-2106733405', ((vt1.c0)+(vt1.c1)), (- (v0.c1)), CAST(vt1.c0 AS TEXT), CASE vt1.c0  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, CAST(v0.c1 AS TEXT)))) WHERE ((NULL IN (CASE vt1.c0  WHEN v0.c2 THEN v0.c0 END))) ORDER BY ((0.2457594545888495) ISNULL), CAST(((v0.c0)-(v0.c0)) AS REAL)  NULLS LAST;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON (((v0.c0, v0.c1, '1870125335', v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1 COLLATE BINARY, ((vt1.c0) NOT BETWEEN (v0.c0) AND (v0.c1)), UNLIKELY(v0.c1), 0.6351117228075769, ((((((((v0.c0)OR(v0.c2)))OR(v0.c0)))AND(vt1.c0)))OR(vt1.c0)), (~ (v0.c1)))) AND (('-2106733405', ((vt1.c0)+(vt1.c1)), (- (v0.c1)), CAST(vt1.c0 AS TEXT), CASE vt1.c0  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, CAST(v0.c1 AS TEXT)))) WHERE ((NULL IN (CASE vt1.c0  WHEN v0.c2 THEN v0.c0 END))) ORDER BY ((0.2457594545888495) ISNULL), CAST(((v0.c0)-(v0.c0)) AS REAL)  NULLS LAST INTERSECT SELECT * FROM vt1 NOT INDEXED LEFT OUTER JOIN v0 ON (((v0.c0, v0.c1, '1870125335', v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1 COLLATE BINARY, ((vt1.c0) NOT BETWEEN (v0.c0) AND (v0.c1)), UNLIKELY(v0.c1), 0.6351117228075769, ((((((((v0.c0)OR(v0.c2)))OR(v0.c0)))AND(vt1.c0)))OR(vt1.c0)), (~ (v0.c1)))) AND (('-2106733405', ((vt1.c0)+(vt1.c1)), (- (v0.c1)), CAST(vt1.c0 AS TEXT), CASE vt1.c0  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, CAST(v0.c1 AS TEXT)))) WHERE (((((((((vt1.c1)OR(v0.c1)))AND(v0.c2)))OR('I+')))|((- (vt1.c1))))) ORDER BY ((0.2457594545888495) ISNULL), CAST(((v0.c0)-(v0.c0)) AS REAL)  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((('877385099') NOT BETWEEN (v0.c2) AND (v0.c0)) IN (0.5923281289972291 COLLATE NOCASE)));
SELECT * FROM v0 WHERE (((((('877385099') NOT BETWEEN (v0.c2) AND (v0.c0)) IN (0.5923281289972291 COLLATE NOCASE)))AND((NOT ((- (v0.c1))))))) ORDER BY UNLIKELY(v0.c1 COLLATE BINARY) ASC  NULLS LAST, ((UPPER(v0.c0))>=(CAST(v0.c2 AS BLOB)));
SELECT ALL * FROM v0 WHERE (((('877385099') NOT BETWEEN (v0.c2) AND (v0.c0)) IN (0.5923281289972291 COLLATE NOCASE)));
SELECT * FROM v0 WHERE (((((('877385099') NOT BETWEEN (v0.c2) AND (v0.c0)) IN (0.5923281289972291 COLLATE NOCASE)))AND((NOT ((- (v0.c1))))))) ORDER BY UNLIKELY(v0.c1 COLLATE BINARY) ASC  NULLS LAST, ((UPPER(v0.c0))>=(CAST(v0.c2 AS BLOB)));
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (NULL) ORDER BY (~ ((v0.c2 IN ()))), LIKE(((vt1.c1) ISNULL), ((v0.c0)<=(vt1.c0))) DESC, (((((((((((- (vt1.c0)))OR(LOWER(DISTINCT v0.c1))))OR(CAST(vt1.c1 AS NUMERIC))))OR(v0.c1)))AND(CASE v0.c1  WHEN v0.c2 THEN vt1.c1 END)))OR(v0.c0)) DESC;
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (NULL) ORDER BY (~ ((v0.c2 IN ()))), LIKE(((vt1.c1) ISNULL), ((v0.c0)<=(vt1.c0))) DESC, (((((((((((- (vt1.c0)))OR(LOWER(DISTINCT v0.c1))))OR(CAST(vt1.c1 AS NUMERIC))))OR(v0.c1)))AND(CASE v0.c1  WHEN v0.c2 THEN vt1.c1 END)))OR(v0.c0)) DESC LIMIT 0x0;
SELECT * FROM vt1, v0 WHERE (((((((((((((v0.c2)+(v0.c1)))AND((v0.c2 IN (v0.c1)))))OR(((((((((((((v0.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c2)))AND(v0.c1)))))AND(NULL)))AND(NULL)))OR(((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))));
SELECT * FROM vt1, v0 WHERE (((((((((((((v0.c2)+(v0.c1)))AND((v0.c2 IN (v0.c1)))))OR(((((((((((((v0.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c2)))AND(v0.c1)))))AND(NULL)))AND(NULL)))OR(((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c0))))) LIMIT 1 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((v0.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) COLLATE NOCASE) LIMIT 1;
SELECT * FROM vt1, v0 WHERE (((((((((((((v0.c2)+(v0.c1)))AND((v0.c2 IN (v0.c1)))))OR(((((((((((((v0.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c2)))AND(v0.c1)))))AND(NULL)))AND(NULL)))OR(((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))));
SELECT * FROM vt1, v0 WHERE (((((((((((((v0.c2)+(v0.c1)))AND((v0.c2 IN (v0.c1)))))OR(((((((((((((v0.c0)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c2)))AND(v0.c1)))))AND(NULL)))AND(NULL)))OR(((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c0))))) LIMIT 1 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((v0.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) COLLATE NOCASE) LIMIT 1;
SELECT COUNT(*) FROM v0, vt1 WHERE (CAST(vt1.c0 AS REAL));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((CAST(vt1.c0 AS REAL))AND(((((((((NULL) NOT BETWEEN (v0.c1) AND (v0.c2)))OR(LOWER(DISTINCT v0.c2))))AND(CAST(v0.c2 AS REAL))))AND(((v0.c1)IS NOT(v0.c2))))))) ORDER BY ((CASE WHEN vt1.c0 THEN v0.c2 END)<((NOT (v0.c1))))  NULLS FIRST LIMIT 3;
SELECT ALL COUNT(*) FROM vt1 WHERE (CAST(((vt1.c0)||('B3')) AS NUMERIC)) ORDER BY ((((((((((LIKELY(vt1.c0))AND(((((((vt1.c0)AND(vt1.c1)))AND(NULL)))OR(x'3d')))))AND(SQLITE_SOURCE_ID())))OR(((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))))AND(((((((vt1.c0)AND('-1379176961')))OR(vt1.c1)))OR(vt1.c0)))))AND(vt1.c0)), CAST(CASE vt1.c1  WHEN NULL THEN vt1.c0 ELSE vt1.c0 END AS REAL)  NULLS LAST, CASE WHEN ((((((((vt1.c1)AND(-1616378895)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)) THEN CAST(vt1.c0 AS NUMERIC) WHEN CASE WHEN vt1.c0 THEN vt1.c1 END THEN CAST('237558424' AS INTEGER) WHEN ((vt1.c1)<>(vt1.c0)) THEN 0.3314427928126191 WHEN ((NULL)>>(vt1.c1)) THEN vt1.c0 ELSE (vt1.c1 IN ()) END DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CAST(((vt1.c0)||('B3')) AS NUMERIC)) ORDER BY (+ ((((vt1.c0)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1))))) ASC;
SELECT * FROM vt1 WHERE (0x629cdd08);
SELECT * FROM vt1 NOT INDEXED WHERE (((1654447368)AND(vt1.c0))) ORDER BY (((vt1.c1)) BETWEEN (((NOT (vt1.c1)))) AND ((vt1.c0 COLLATE NOCASE))) LIMIT 0;
SELECT * FROM vt1 WHERE (0x629cdd08);
SELECT * FROM vt1 NOT INDEXED WHERE (((1654447368)AND(vt1.c0))) ORDER BY (((vt1.c1)) BETWEEN (((NOT (vt1.c1)))) AND ((vt1.c0 COLLATE NOCASE))) LIMIT 0;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((vt1.c1 COLLATE NOCASE) IS FALSE));
SELECT MIN(vt1.c1) FROM vt1 WHERE (((((vt1.c1 COLLATE NOCASE) IS FALSE))AND((((((((((- (vt1.c0)))AND('941299380')))AND((((vt1.c1, vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1, '-hT'))))))AND(((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))))OR(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END))))) LIMIT 0 INTERSECT SELECT MIN(vt1.c1) FROM vt1 WHERE ((((vt1.c1) NOT NULL) IN ())) LIMIT 0;
SELECT MIN(vt1.c1) FROM vt1 WHERE ((((('931266565')AND(vt1.c1 COLLATE BINARY)))AND(vt1.c0))) ORDER BY CASE WHEN ((vt1.c0) NOTNULL) THEN vt1.c1 END;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((((((('931266565')AND(vt1.c1 COLLATE BINARY)))AND(vt1.c0)))AND((+ ((vt1.c0 IN (vt1.c1, 0.2000548892710674))))))) ORDER BY CASE WHEN ((vt1.c0) NOTNULL) THEN vt1.c1 END INTERSECT SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((((vt1.c1)) NOT BETWEEN ((((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))) AND ((((vt1.c0)>(vt1.c1)))))) ORDER BY CASE WHEN ((vt1.c0) NOTNULL) THEN vt1.c1 END;
SELECT * FROM v0 WHERE (CASE ((v0.c1) NOTNULL)  WHEN ((v0.c0)IS(v0.c0)) THEN ((((v0.c0)OR(v0.c0)))AND(v0.c0)) WHEN CAST(v0.c0 AS BLOB) THEN ((v0.c1)-(v0.c0)) ELSE ((((((v0.c2)OR(v0.c2)))OR(v0.c1)))AND(v0.c2)) END) ORDER BY (+ ('u+_>{_')) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((CASE ((v0.c1) NOTNULL)  WHEN ((v0.c0)IS(v0.c0)) THEN ((((v0.c0)OR(v0.c0)))AND(v0.c0)) WHEN CAST(v0.c0 AS BLOB) THEN ((v0.c1)-(v0.c0)) ELSE ((((((v0.c2)OR(v0.c2)))OR(v0.c1)))AND(v0.c2)) END)AND(((((v0.c1)GLOB(v0.c0))) ISNULL)))) ORDER BY (NOT ('1403827498'))  NULLS LAST, ((((v0.c0) BETWEEN (v0.c1) AND (v0.c1)))%((((v0.c0))<=((v0.c1))))) INTERSECT SELECT ALL * FROM v0 WHERE ((~ (NULL))) ORDER BY (NOT ('1403827498'))  NULLS LAST, ((((v0.c0) BETWEEN (v0.c1) AND (v0.c1)))%((((v0.c0))<=((v0.c1)))));
SELECT * FROM v0 WHERE (CASE ((v0.c1) NOTNULL)  WHEN ((v0.c0)IS(v0.c0)) THEN ((((v0.c0)OR(v0.c0)))AND(v0.c0)) WHEN CAST(v0.c0 AS BLOB) THEN ((v0.c1)-(v0.c0)) ELSE ((((((v0.c2)OR(v0.c2)))OR(v0.c1)))AND(v0.c2)) END) ORDER BY (+ ('u+_>{_')) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((CASE ((v0.c1) NOTNULL)  WHEN ((v0.c0)IS(v0.c0)) THEN ((((v0.c0)OR(v0.c0)))AND(v0.c0)) WHEN CAST(v0.c0 AS BLOB) THEN ((v0.c1)-(v0.c0)) ELSE ((((((v0.c2)OR(v0.c2)))OR(v0.c1)))AND(v0.c2)) END)AND(((((v0.c1)GLOB(v0.c0))) ISNULL)))) ORDER BY (NOT ('1403827498'))  NULLS LAST, ((((v0.c0) BETWEEN (v0.c1) AND (v0.c1)))%((((v0.c0))<=((v0.c1))))) INTERSECT SELECT ALL * FROM v0 WHERE ((~ (NULL))) ORDER BY (NOT ('1403827498'))  NULLS LAST, ((((v0.c0) BETWEEN (v0.c1) AND (v0.c1)))%((((v0.c0))<=((v0.c1)))));
SELECT MIN(v0.c0) FROM v0, vt1 WHERE ((((vt1.c1) BETWEEN (v0.c0) AND (v0.c0)) IN ()));
SELECT ALL MIN(v0.c0) FROM v0, vt1 WHERE ((((vt1.c1) BETWEEN (v0.c0) AND (v0.c0)) IN ())) INTERSECT SELECT MIN(v0.c0) FROM v0, vt1 WHERE (((((v0.c1)||(vt1.c0)))OR((((((((('-1234102707')OR(vt1.c0)))AND(vt1.c1)))OR(v0.c1)))AND(vt1.c1)))));
SELECT ALL * FROM vt1, v0 WHERE ((((((vt1.c1, vt1.c0, vt1.c1))<((vt1.c0, vt1.c1, vt1.c1)))) NOT BETWEEN (1.029704324E9) AND (vt1.c0))) ORDER BY ((RTRIM(vt1.c0))AND(((v0.c0)%(v0.c2)))) ASC  NULLS LAST, ((NULL) IS FALSE) DESC;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((vt1.c1, vt1.c0, vt1.c1))<((vt1.c0, vt1.c1, vt1.c1)))) NOT BETWEEN (1.029704324E9) AND (vt1.c0))) ORDER BY ((RTRIM(vt1.c0))AND(((v0.c0)%(v0.c2)))) ASC  NULLS LAST, ((NULL) IS FALSE) DESC LIMIT 0X2;
SELECT ALL * FROM vt1, v0 WHERE ((((((vt1.c1, vt1.c0, vt1.c1))<((vt1.c0, vt1.c1, vt1.c1)))) NOT BETWEEN (1.029704324E9) AND (vt1.c0))) ORDER BY ((RTRIM(vt1.c0))AND(((v0.c0)%(v0.c2)))) ASC  NULLS LAST, ((NULL) IS FALSE) DESC;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((vt1.c1, vt1.c0, vt1.c1))<((vt1.c0, vt1.c1, vt1.c1)))) NOT BETWEEN (1.029704324E9) AND (vt1.c0))) ORDER BY ((RTRIM(vt1.c0))AND(((v0.c0)%(v0.c2)))) ASC  NULLS LAST, ((NULL) IS FALSE) DESC LIMIT 0X2;
SELECT * FROM v0 WHERE (ABS(DISTINCT ((v0.c0)>>(v0.c1)))) ORDER BY CAST(v0.c0 AS TEXT) COLLATE BINARY, (v0.c1 IN ()) COLLATE NOCASE;
SELECT ALL * FROM v0 WHERE (((ABS(DISTINCT ((v0.c0)>>(v0.c1))))AND(CASE NULL COLLATE NOCASE  WHEN ((((v0.c0)AND(v0.c0)))OR(v0.c1)) THEN ((((((((((v0.c1)AND(NULL)))AND(v0.c1)))AND(v0.c0)))OR(v0.c0)))OR(v0.c0)) END))) ORDER BY CASE TYPEOF(v0.c0)  WHEN ((v0.c1) IS TRUE) THEN json_type(v0.c0) WHEN ((v0.c0)<<(v0.c0)) THEN ((v0.c0) ISNULL) ELSE ((((v0.c2)OR(v0.c0)))OR(v0.c2)) END, NULL;
SELECT * FROM v0 WHERE (ABS(DISTINCT ((v0.c0)>>(v0.c1)))) ORDER BY CAST(v0.c0 AS TEXT) COLLATE BINARY, (v0.c1 IN ()) COLLATE NOCASE;
SELECT ALL * FROM vt1, v0 WHERE (UNLIKELY(DISTINCT (v0.c1 IN (v0.c2))));
SELECT * FROM vt1, v0 WHERE (((UNLIKELY(DISTINCT (v0.c1 IN (v0.c2))))AND(((x'ba') NOT BETWEEN (CAST(NULL AS TEXT)) AND (((vt1.c1) ISNULL))))));
SELECT ALL * FROM vt1, v0 WHERE (UNLIKELY(DISTINCT (v0.c1 IN (v0.c2))));
SELECT * FROM vt1, v0 WHERE (((UNLIKELY(DISTINCT (v0.c1 IN (v0.c2))))AND(((x'ba') NOT BETWEEN (CAST(NULL AS TEXT)) AND (((vt1.c1) ISNULL))))));
SELECT ALL MIN(v0.c0) FROM v0 WHERE ((((- (v0.c0))) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c0))) AND (((v0.c1) NOT BETWEEN ('1I') AND (v0.c1))))) ORDER BY (NOT (CAST(v0.c2 AS TEXT))) ASC;
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ((((((- (v0.c0))) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c0))) AND (((v0.c1) NOT BETWEEN ('1I') AND (v0.c1)))))AND(((v0.c1) NOT BETWEEN (((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))) AND (v0.c2))))) ORDER BY CASE v0.c2  WHEN LIKE(v0.c2, v0.c2, 'W') THEN v0.c1 WHEN (((v0.c0, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c0, v0.c1))) THEN ((v0.c0)>=(v0.c0)) END ASC  NULLS LAST, ((((v0.c2)-(v0.c2))) NOT BETWEEN (v0.c0) AND (0.35030027839852884))  NULLS LAST, json_quote((((v0.c2, v0.c2)) NOT BETWEEN ((0.8198497486032825, v0.c2)) AND ((NULL, v0.c2)))) INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((((((((v0.c0)==(v0.c0)))OR((((v0.c0, v0.c2, NULL))>=((v0.c0, v0.c2, v0.c1))))))OR(LIKELIHOOD(DISTINCT v0.c1, v0.c1))))AND((v0.c0 IN (v0.c2))))) ORDER BY CASE v0.c2  WHEN LIKE(v0.c2, v0.c2, 'W') THEN v0.c1 WHEN (((v0.c0, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c0, v0.c1))) THEN ((v0.c0)>=(v0.c0)) END ASC  NULLS LAST, ((((v0.c2)-(v0.c2))) NOT BETWEEN (v0.c0) AND (0.35030027839852884))  NULLS LAST, json_quote((((v0.c2, v0.c2)) NOT BETWEEN ((0.8198497486032825, v0.c2)) AND ((NULL, v0.c2))));
SELECT ALL MIN(v0.c1) FROM v0 WHERE (CASE (((v0.c0))<>((v0.c0)))  WHEN v0.c0 THEN NULL END) ORDER BY LIKELY(v0.c1) COLLATE NOCASE DESC;
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((CASE (((v0.c0))<>((v0.c0)))  WHEN v0.c0 THEN NULL END)AND(((((v0.c0) IS FALSE)) IS FALSE)))) ORDER BY LIKELY(v0.c1) COLLATE NOCASE DESC LIMIT 0X0;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((((((((v0.c2)OR(v0.c2)))OR(v0.c2)))OR(v0.c1)))IS(((v0.c1) BETWEEN (v0.c2) AND (v0.c1)))));
SELECT MAX(v0.c2) FROM v0 WHERE (((((((((v0.c2)OR(v0.c2)))OR(v0.c2)))OR(v0.c1)))IS(((v0.c1) BETWEEN (v0.c2) AND (v0.c1))))) LIMIT 0 INTERSECT SELECT ALL MAX(v0.c2) FROM v0 WHERE (((((v0.c2)<=(-6.10614943E8)))>(x'5714c8'))) LIMIT 0x0;
SELECT * FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c0) AND (v0.c2)))>=(CAST(v0.c2 AS TEXT)))) ORDER BY ((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END)LIKE((~ (v0.c0)))) ASC, ((v0.c1 COLLATE NOCASE)>>(((v0.c2)||('-1267297165')))) ASC;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c1) BETWEEN (v0.c0) AND (v0.c2)))>=(CAST(v0.c2 AS TEXT))))AND(((((v0.c0)LIKE(v0.c2))) IS FALSE)))) ORDER BY ((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END)LIKE((~ (v0.c0)))) ASC, ((v0.c1 COLLATE NOCASE)>>(((v0.c2)||('-1267297165')))) ASC;
SELECT * FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c0) AND (v0.c2)))>=(CAST(v0.c2 AS TEXT)))) ORDER BY ((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END)LIKE((~ (v0.c0)))) ASC, ((v0.c1 COLLATE NOCASE)>>(((v0.c2)||('-1267297165')))) ASC;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c1) BETWEEN (v0.c0) AND (v0.c2)))>=(CAST(v0.c2 AS TEXT))))AND(((((v0.c0)LIKE(v0.c2))) IS FALSE)))) ORDER BY ((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END)LIKE((~ (v0.c0)))) ASC, ((v0.c1 COLLATE NOCASE)>>(((v0.c2)||('-1267297165')))) ASC;
SELECT ALL * FROM v0, vt1 WHERE (CAST(CAST(NULL AS REAL) AS REAL)) ORDER BY ((v0.c0 COLLATE RTRIM) BETWEEN ((v0.c0 IN (v0.c0))) AND (((vt1.c1) NOT NULL))) ASC, DATE(((((v0.c1)OR(vt1.c1)))AND(vt1.c0)), ((vt1.c0)>>(vt1.c0)), ((v0.c2) ISNULL)) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(CAST(NULL AS REAL) AS REAL)) ORDER BY CASE WHEN (((v0.c2))<>((vt1.c1))) THEN NULL WHEN CASE WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN v0.c2 ELSE v0.c1 END THEN x'64' WHEN ((NULL)GLOB(v0.c1)) THEN v0.c2 COLLATE BINARY WHEN ((v0.c0)|(vt1.c1)) THEN vt1.c0 END DESC  NULLS FIRST, 'T.' DESC, ((((vt1.c0)=(v0.c0)))>(ABS(v0.c0)))  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM v0, vt1 WHERE (CAST(CAST(NULL AS REAL) AS REAL)) ORDER BY ((v0.c0 COLLATE RTRIM) BETWEEN ((v0.c0 IN (v0.c0))) AND (((vt1.c1) NOT NULL))) ASC, DATE(((((v0.c1)OR(vt1.c1)))AND(vt1.c0)), ((vt1.c0)>>(vt1.c0)), ((v0.c2) ISNULL)) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(CAST(NULL AS REAL) AS REAL)) ORDER BY CASE WHEN (((v0.c2))<>((vt1.c1))) THEN NULL WHEN CASE WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN v0.c2 ELSE v0.c1 END THEN x'64' WHEN ((NULL)GLOB(v0.c1)) THEN v0.c2 COLLATE BINARY WHEN ((v0.c0)|(vt1.c1)) THEN vt1.c0 END DESC  NULLS FIRST, 'T.' DESC, ((((vt1.c0)=(v0.c0)))>(ABS(v0.c0)))  NULLS FIRST LIMIT 0x2;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)/(vt1.c0))) IS TRUE)) ORDER BY CAST(CASE WHEN vt1.c1 THEN vt1.c0 END AS INTEGER);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)/(vt1.c0))) IS TRUE))AND(((CASE WHEN vt1.c1 THEN vt1.c1 END)<>(((vt1.c1)<(vt1.c0))))))) ORDER BY x'' DESC  NULLS LAST, ((((~ (vt1.c1)), (((vt1.c0, vt1.c0, vt1.c1))=((x'64253b', vt1.c1, vt1.c1)))))==((CASE WHEN '-1728737727' THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END, ((vt1.c1)OR(vt1.c1)))))  NULLS LAST LIMIT 1;
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE (((((((((((v0.c1) ISNULL))AND(TYPEOF(v0.c2))))OR(vt1.c0)))OR(((v0.c1)<>(v0.c1)))))OR(((vt1.c0) IS TRUE)))) ORDER BY (- (NULL)) DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (((((((((((v0.c1) ISNULL))AND(TYPEOF(v0.c2))))OR(vt1.c0)))OR(((v0.c1)<(v0.c1)))))OR(((vt1.c0) IS TRUE)))) ORDER BY (- (NULL)) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (TYPEOF(CAST(vt1.c1 AS REAL))) ORDER BY (- (NULL)) DESC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (0.07930892585860216) ORDER BY (v0.c2 COLLATE RTRIM IN ())  NULLS LAST, ((CAST(v0.c2 AS BLOB))>=(v0.c0 COLLATE NOCASE))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (0.07930892585860216) ORDER BY (v0.c2 COLLATE RTRIM IN ())  NULLS LAST, ((CAST(v0.c2 AS BLOB))>=(v0.c0 COLLATE NOCASE))  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CASE ((v0.c1)>(v0.c0))  WHEN CAST(v0.c2 AS NUMERIC) THEN ((v0.c0)OR(v0.c2)) END) ORDER BY (v0.c2 COLLATE RTRIM IN ())  NULLS LAST, ((CAST(v0.c2 AS BLOB))>=(v0.c0 COLLATE NOCASE))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (0.07930892585860216) ORDER BY (v0.c2 COLLATE RTRIM IN ())  NULLS LAST, ((CAST(v0.c2 AS BLOB))>=(v0.c0 COLLATE NOCASE))  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE (((((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)))AND(((v0.c0)<>(-1844818550)))))AND(((v0.c1) NOT NULL))));
SELECT MIN(vt1.c0) FROM vt1, v0 WHERE (((((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)))AND(((v0.c0)<(0Xffffffff920a4d8a)))))AND(((v0.c1) NOT NULL))));
SELECT ALL * FROM v0, vt1 WHERE ('504886529');
SELECT ALL * FROM v0, vt1 WHERE ((('504886529')AND(NULL)));
SELECT ALL * FROM v0, vt1 WHERE ('504886529');
SELECT ALL * FROM v0, vt1 WHERE ((('504886529')AND(NULL)));
SELECT MIN(vt1.c1) FROM v0, vt1 WHERE (x'bfcf') ORDER BY (((((v0.c2, v0.c1)) BETWEEN ((v0.c0, 'W_!CtZB')) AND ((v0.c0, v0.c0)))) BETWEEN (((v0.c1) NOT NULL)) AND ('(&'))  NULLS FIRST, ((v0.c2)>(vt1.c1)) COLLATE BINARY ASC  NULLS FIRST;
SELECT MIN(vt1.c1) FROM v0, vt1 WHERE (x'bfcf') ORDER BY (((((v0.c2, v0.c1)) BETWEEN ((v0.c0, 'W_!CtZB')) AND ((v0.c0, v0.c0)))) BETWEEN (((v0.c1) NOT NULL)) AND ('(&'))  NULLS FIRST, ((v0.c2)>(vt1.c1)) COLLATE BINARY ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (vt1.c0) ORDER BY (((((v0.c2, v0.c1)) BETWEEN ((v0.c0, 'W_!CtZB')) AND ((v0.c0, v0.c0)))) BETWEEN (((v0.c1) NOT NULL)) AND ('(&'))  NULLS FIRST, ((v0.c2)>(vt1.c1)) COLLATE BINARY ASC  NULLS FIRST LIMIT 0X2;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))&(((vt1.c0) BETWEEN (1029704324) AND (vt1.c0)))));
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))&(((vt1.c0) BETWEEN (0X3d600a84) AND (vt1.c0))))) ORDER BY ((vt1.c1 COLLATE RTRIM)||(((vt1.c1)<=(vt1.c1)))) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))=(CAST(vt1.c1 AS REAL))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))==(CAST(vt1.c1 AS REAL))));
SELECT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))=(CAST(vt1.c1 AS REAL))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))==(CAST(vt1.c1 AS REAL))));
SELECT ALL * FROM v0 WHERE (CASE WHEN v0.c0 THEN ((((((((((((v0.c1)AND(v0.c2)))OR(v0.c2)))AND(v0.c0)))OR(v0.c2)))AND(x'9e')))AND(v0.c0)) WHEN CAST(v0.c0 AS BLOB) THEN ((((v0.c1)AND(v0.c1)))OR(v0.c0)) END) ORDER BY v0.c2, ((CAST(v0.c2 AS NUMERIC)) NOT BETWEEN ((+ (v0.c1))) AND (((v0.c1)>>(v0.c2))))  NULLS FIRST, (((- (v0.c1)))<<(((0.1891147150838164) NOT BETWEEN ('a') AND ('')))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((CASE WHEN v0.c0 THEN ((((((((((((v0.c1)AND(v0.c2)))OR(v0.c2)))AND(v0.c0)))OR(v0.c2)))AND(x'9e')))AND(v0.c0)) WHEN CAST(v0.c0 AS BLOB) THEN ((((v0.c1)AND(v0.c1)))OR(v0.c0)) END)AND(NULLIF(DISTINCT ((NULL)!=(v0.c0)), ((v0.c2)&(v0.c1)))))) ORDER BY (((((v0.c0)AND(v0.c0)))AND(v0.c1)) IN (((v0.c2) NOT BETWEEN (v0.c0) AND (x''))))  NULLS LAST, ((((v0.c0)<>(v0.c1))) NOT BETWEEN (((v0.c1)&(v0.c0))) AND (v0.c0 COLLATE BINARY)), CASE WHEN LOWER(v0.c0) THEN CASE v0.c0  WHEN v0.c2 THEN v0.c1 END WHEN CAST(x'22' AS REAL) THEN 0X3b9351ca ELSE (v0.c1 IN ()) END ASC LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (CASE WHEN v0.c0 THEN ((((((((((((v0.c1)AND(v0.c2)))OR(v0.c2)))AND(v0.c0)))OR(v0.c2)))AND(x'9e')))AND(v0.c0)) WHEN CAST(v0.c0 AS BLOB) THEN ((((v0.c1)AND(v0.c1)))OR(v0.c0)) END) ORDER BY v0.c2, ((CAST(v0.c2 AS NUMERIC)) NOT BETWEEN ((+ (v0.c1))) AND (((v0.c1)>>(v0.c2))))  NULLS FIRST, (((- (v0.c1)))<<(((0.1891147150838164) NOT BETWEEN ('a') AND ('')))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((CASE WHEN v0.c0 THEN ((((((((((((v0.c1)AND(v0.c2)))OR(v0.c2)))AND(v0.c0)))OR(v0.c2)))AND(x'9e')))AND(v0.c0)) WHEN CAST(v0.c0 AS BLOB) THEN ((((v0.c1)AND(v0.c1)))OR(v0.c0)) END)AND(NULLIF(DISTINCT ((NULL)!=(v0.c0)), ((v0.c2)&(v0.c1)))))) ORDER BY (((((v0.c0)AND(v0.c0)))AND(v0.c1)) IN (((v0.c2) NOT BETWEEN (v0.c0) AND (x''))))  NULLS LAST, ((((v0.c0)<>(v0.c1))) NOT BETWEEN (((v0.c1)&(v0.c0))) AND (v0.c0 COLLATE BINARY)), CASE WHEN LOWER(v0.c0) THEN CASE v0.c0  WHEN v0.c2 THEN v0.c1 END WHEN CAST(x'22' AS REAL) THEN 0X3b9351ca ELSE (v0.c1 IN ()) END ASC LIMIT 0x0;
SELECT MIN(vt1.c0) FROM vt1 WHERE (0.8299577468325189) ORDER BY ((((vt1.c0 IN ()), vt1.c1, ((vt1.c1) IS FALSE)))==(((((vt1.c0, vt1.c1, vt1.c0, 0.03230144593915829))>((vt1.c1, vt1.c0, NULL, 0.5347652386559537))), vt1.c0 COLLATE RTRIM, (((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c0)))))) DESC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (0.8299577468325189) ORDER BY ((((LIKELIHOOD(vt1.c0, vt1.c0))OR(((((((vt1.c1)AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c1)))))OR(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END)) ASC, ((((vt1.c0)OR(vt1.c1))) ISNULL)  NULLS LAST, ((((NULL) ISNULL)) ISNULL) DESC;
SELECT * FROM v0 WHERE (v0.c1 COLLATE BINARY) ORDER BY (CASE 0.33208594396161295  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 ELSE x'fcbe' END IN ()) DESC, ((((CASE ''  WHEN v0.c2 THEN v0.c1 END)AND(((v0.c0) IS FALSE))))OR((((v0.c0, v0.c0, v0.c1)) BETWEEN ((v0.c1, v0.c2, v0.c0)) AND ((v0.c1, v0.c0, v0.c2))))) DESC;
SELECT DISTINCT * FROM v0 WHERE (v0.c1 COLLATE BINARY) ORDER BY ((((v0.c2, v0.c1, v0.c2, v0.c0))<((v0.c1, v0.c0, v0.c2, v0.c2))) IN ()) ASC  NULLS LAST, ((CASE v0.c2  WHEN 0.3859631416878294 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END) BETWEEN ((1.595081513E9 IN ())) AND (((((v0.c2)AND(v0.c2)))OR(x'3892cc'))))  NULLS FIRST, ((CASE v0.c2  WHEN v0.c2 THEN v0.c1 ELSE 0.4644019380690708 END) NOT NULL) DESC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((+ (CAST(v0.c0 AS NUMERIC)))) ORDER BY ((((v0.c2, v0.c1, v0.c2, v0.c0))<((v0.c1, v0.c0, v0.c2, v0.c2))) IN ()) ASC  NULLS LAST, ((CASE v0.c2  WHEN 0.3859631416878294 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END) BETWEEN ((1.595081513E9 IN ())) AND (((((v0.c2)AND(v0.c2)))OR(x'3892cc'))))  NULLS FIRST, ((CASE v0.c2  WHEN v0.c2 THEN v0.c1 ELSE 0.4644019380690708 END) NOT NULL) DESC LIMIT 0x0;
SELECT * FROM v0 WHERE (v0.c1 COLLATE BINARY) ORDER BY (CASE 0.33208594396161295  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 ELSE x'fcbe' END IN ()) DESC, ((((CASE ''  WHEN v0.c2 THEN v0.c1 END)AND(((v0.c0) IS FALSE))))OR((((v0.c0, v0.c0, v0.c1)) BETWEEN ((v0.c1, v0.c2, v0.c0)) AND ((v0.c1, v0.c0, v0.c2))))) DESC;
SELECT * FROM v0 WHERE ((((((v0.c0)!=(v0.c0)), v0.c2 COLLATE RTRIM))<>(((v0.c2 IN (v0.c2)), (- (v0.c1)))))) ORDER BY 0.006080607522622072;
SELECT * FROM v0 WHERE ((((((v0.c0)!=(v0.c0)), v0.c2 COLLATE RTRIM))!=(((v0.c2 IN (v0.c2)), (- (v0.c1)))))) ORDER BY ((((INSTR(v0.c2, v0.c1))AND(NULL)))AND(LIKELY(DISTINCT v0.c1))) ASC  NULLS FIRST;
SELECT * FROM v0 WHERE ((((((v0.c0)!=(v0.c0)), v0.c2 COLLATE RTRIM))<>(((v0.c2 IN (v0.c2)), (- (v0.c1)))))) ORDER BY 0.006080607522622072;
SELECT * FROM v0 WHERE ((((((v0.c0)!=(v0.c0)), v0.c2 COLLATE RTRIM))!=(((v0.c2 IN (v0.c2)), (- (v0.c1)))))) ORDER BY ((((INSTR(v0.c2, v0.c1))AND(NULL)))AND(LIKELY(DISTINCT v0.c1))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt1 WHERE (((((((((v0.c2)AND(v0.c1)))OR(v0.c2)))OR(v0.c2)))OR(v0.c0)) COLLATE BINARY);
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((((((((((v0.c2)AND(v0.c1)))OR(v0.c2)))OR(v0.c2)))OR(v0.c0)) COLLATE BINARY)AND(UPPER(((v0.c1) NOTNULL))))) ORDER BY vt1.c1 DESC, ((CASE vt1.c1  WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END)/((~ (0.5963068117049839))))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((~ (v0.c2)) COLLATE RTRIM) ORDER BY vt1.c1 DESC, ((CASE vt1.c1  WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END)/((~ (0.5963068117049839))))  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (((v0.c2)LIKE(v0.c0)) COLLATE NOCASE);
SELECT DISTINCT * FROM v0, vt1 WHERE (((((v0.c2)LIKE(v0.c0)) COLLATE NOCASE)AND((NOT (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c1);
SELECT ALL * FROM v0, vt1 WHERE (((v0.c2)LIKE(v0.c0)) COLLATE NOCASE);
SELECT DISTINCT * FROM v0, vt1 WHERE (((((v0.c2)LIKE(v0.c0)) COLLATE NOCASE)AND((NOT (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))))))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c1);
SELECT ALL * FROM vt1 WHERE ((NOT ((+ (vt1.c1))))) ORDER BY (((vt1.c0)) NOT BETWEEN (((+ (vt1.c0)))) AND (((+ (vt1.c0))))) DESC;
SELECT ALL * FROM vt1 WHERE ((((NOT ((+ (vt1.c1)))))AND((((vt1.c0)LIKE(vt1.c1)) IN ())))) ORDER BY (((vt1.c0)) NOT BETWEEN (((+ (vt1.c0)))) AND (((+ (vt1.c0))))) DESC LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE (HEX(vt1.c1) COLLATE RTRIM) ORDER BY (((vt1.c0)) NOT BETWEEN (((+ (vt1.c0)))) AND (((+ (vt1.c0))))) DESC LIMIT 0;
SELECT ALL * FROM vt1 WHERE ((NOT ((+ (vt1.c1))))) ORDER BY (((vt1.c0)) NOT BETWEEN (((+ (vt1.c0)))) AND (((+ (vt1.c0))))) DESC;
SELECT ALL * FROM vt1 WHERE ((((NOT ((+ (vt1.c1)))))AND((((vt1.c0)LIKE(vt1.c1)) IN ())))) ORDER BY (((vt1.c0)) NOT BETWEEN (((+ (vt1.c0)))) AND (((+ (vt1.c0))))) DESC LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE (HEX(vt1.c1) COLLATE RTRIM) ORDER BY (((vt1.c0)) NOT BETWEEN (((+ (vt1.c0)))) AND (((+ (vt1.c0))))) DESC LIMIT 0;
SELECT * FROM vt1, v0 WHERE (v0.c2);
SELECT DISTINCT * FROM vt1, v0 WHERE (v0.c2) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c2 COLLATE RTRIM)&((((vt1.c0, v0.c0))!=((vt1.c1, vt1.c0))))));
SELECT * FROM vt1, v0 WHERE (v0.c2);
SELECT DISTINCT * FROM vt1, v0 WHERE (v0.c2) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c2 COLLATE RTRIM)&((((vt1.c0, v0.c0))!=((vt1.c1, vt1.c0))))));
SELECT MIN(v0.c1) FROM vt1, v0 WHERE (CAST(((vt1.c1) NOTNULL) AS INTEGER)) ORDER BY LIKELY(vt1.c1) COLLATE NOCASE;
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE (((CAST(((vt1.c1) NOTNULL) AS INTEGER))AND((NOT (v0.c0)) COLLATE RTRIM))) ORDER BY ((((((((vt1.c0)LIKE(v0.c2)))OR((- (v0.c0)))))AND(((v0.c1) BETWEEN (vt1.c1) AND (v0.c2)))))OR(CASE vt1.c0  WHEN v0.c2 THEN v0.c0 WHEN vt1.c0 THEN vt1.c0 ELSE NULL END))  NULLS LAST, 0Xffffffffec038590, ((((((((v0.c0)LIKE(v0.c2)))AND(((NULL) ISNULL))))AND(((vt1.c1)+(vt1.c0)))))AND(((vt1.c1) IS TRUE))) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT MIN(v0.c1) FROM vt1, v0 WHERE (x'9dc4d1') ORDER BY ((((((((vt1.c0)LIKE(v0.c2)))OR((- (v0.c0)))))AND(((v0.c1) BETWEEN (vt1.c1) AND (v0.c2)))))OR(CASE vt1.c0  WHEN v0.c2 THEN v0.c0 WHEN vt1.c0 THEN vt1.c0 ELSE NULL END))  NULLS LAST, 0Xffffffffec038590, ((((((((v0.c0)LIKE(v0.c2)))AND(((NULL) ISNULL))))AND(((vt1.c1)+(vt1.c0)))))AND(((vt1.c1) IS TRUE))) DESC  NULLS LAST LIMIT 1;
SELECT ALL MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON LIKE((+ (v0.c1)), ((v0.c1)<=(v0.c2))) WHERE (ABS(DISTINCT ((v0.c1) NOT NULL)));
SELECT ALL MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON LIKE((+ (v0.c1)), ((v0.c1)<=(v0.c2))) WHERE (((ABS(DISTINCT ((v0.c1) NOT NULL)))AND(((((NULL)||(v0.c1))) ISNULL))));
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (((v0.c1)<(v0.c0)) COLLATE RTRIM);
SELECT DISTINCT MIN(vt1.c1) FROM v0, vt1 WHERE (((((v0.c1)<(v0.c0)) COLLATE RTRIM)AND('1750014561006879492:996502401720983631--619913119721843461T-25+900057891924749-15Y5T50:1078-䘊')));
SELECT MAX(v0.c1) FROM v0 WHERE ((((((v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c2, v0.c1)))) NOT BETWEEN (((((((v0.c0)AND(v0.c1)))OR(v0.c1)))AND(v0.c2))) AND (v0.c1)));
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((((((v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c2, v0.c1)))) NOT BETWEEN (((((((v0.c0)AND(v0.c1)))OR(v0.c1)))AND(v0.c2))) AND (v0.c1))) ORDER BY (x'6299' IN (((x'')IS(''))))  NULLS FIRST, ((v0.c2 COLLATE BINARY) IS FALSE) ASC  NULLS FIRST, (v0.c2 IN ((((v0.c2))>=((v0.c2))))) DESC;
SELECT ALL * FROM v0, vt1 WHERE ((((MIN(v0.c1, v0.c0, vt1.c0), (~ (v0.c1)), ((((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(v0.c2)))OR(vt1.c1)), ((v0.c0) NOTNULL), ((vt1.c1) IS FALSE)))>=((vt1.c0, (((vt1.c1, v0.c0))==((v0.c2, vt1.c0))), (+ (vt1.c0)), '2147073767', ((((((vt1.c0)AND(v0.c2)))AND(v0.c1)))OR(vt1.c0))))));
SELECT * FROM v0, vt1 WHERE ((((MIN(v0.c1, v0.c0, vt1.c0), (~ (v0.c1)), ((((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(v0.c2)))OR(vt1.c1)), ((v0.c0) NOTNULL), ((vt1.c1) IS FALSE)))>=((vt1.c0, (((vt1.c1, v0.c0))==((v0.c2, vt1.c0))), (+ (vt1.c0)), '2147073767', ((((((vt1.c0)AND(v0.c2)))AND(v0.c1)))OR(vt1.c0)))))) ORDER BY CASE WHEN v0.c1 THEN v0.c2 END COLLATE BINARY COLLATE RTRIM, ((x'f4')AND(v0.c2))  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM v0, vt1 WHERE ((((MIN(v0.c1, v0.c0, vt1.c0), (~ (v0.c1)), ((((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(v0.c2)))OR(vt1.c1)), ((v0.c0) NOTNULL), ((vt1.c1) IS FALSE)))>=((vt1.c0, (((vt1.c1, v0.c0))==((v0.c2, vt1.c0))), (+ (vt1.c0)), '2147073767', ((((((vt1.c0)AND(v0.c2)))AND(v0.c1)))OR(vt1.c0))))));
SELECT * FROM v0, vt1 WHERE ((((MIN(v0.c1, v0.c0, vt1.c0), (~ (v0.c1)), ((((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(v0.c2)))OR(vt1.c1)), ((v0.c0) NOTNULL), ((vt1.c1) IS FALSE)))>=((vt1.c0, (((vt1.c1, v0.c0))==((v0.c2, vt1.c0))), (+ (vt1.c0)), '2147073767', ((((((vt1.c0)AND(v0.c2)))AND(v0.c1)))OR(vt1.c0)))))) ORDER BY CASE WHEN v0.c1 THEN v0.c2 END COLLATE BINARY COLLATE RTRIM, ((x'f4')AND(v0.c2))  NULLS FIRST LIMIT 0x2;
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c2) AND (v0.c2)))|(((v0.c1) ISNULL)))) ORDER BY x'81e6';
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c2) AND (v0.c2)))|(((v0.c1) ISNULL)))) ORDER BY x'81e6' LIMIT 0;
SELECT ALL COUNT(*) FROM vt1 WHERE (COALESCE(UNLIKELY(DISTINCT vt1.c1), ((vt1.c0) ISNULL), vt1.c1, ((vt1.c0)/(vt1.c0)), (((vt1.c0)) BETWEEN ((vt1.c1)) AND ((vt1.c0))))) ORDER BY ((((vt1.c1)IS NOT(vt1.c0))) NOT NULL) DESC  NULLS FIRST, ((CAST(vt1.c1 AS BLOB)) NOT BETWEEN (((vt1.c1) NOTNULL)) AND (CAST(vt1.c1 AS REAL))) DESC, ((CASE WHEN '' THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END) BETWEEN (((vt1.c1) NOTNULL)) AND (((((((6.15923876E8)OR(vt1.c1)))AND(0.8045960982182558)))AND(vt1.c0)))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (((COALESCE(UNLIKELY(DISTINCT vt1.c1), ((vt1.c0) ISNULL), vt1.c1, ((vt1.c0)/(vt1.c0)), (((vt1.c0)) BETWEEN ((vt1.c1)) AND ((vt1.c0)))))AND(ABS(((vt1.c0)LIKE(vt1.c1)))))) ORDER BY 0x7b69ed4d INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (((((vt1.c1)/(vt1.c1)))AND(-938630848))) ORDER BY 2070539597;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1)*(v0.c1)))&(((3.4551404E8) BETWEEN (0.931942571074267) AND (v0.c1))))) ORDER BY (((v0.c1)IS(vt1.c1)) IN (((vt1.c1) NOT BETWEEN (vt1.c0) AND (v0.c1))))  NULLS FIRST, ((((((((((v0.c2)OR(vt1.c1)))AND(v0.c2)))AND(v0.c2)))OR(vt1.c1))) BETWEEN (((vt1.c0)OR(v0.c0))) AND (((v0.c1) NOTNULL))) DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1)*(v0.c1)))&(((3.4551404E8) BETWEEN (0.931942571074267) AND (v0.c1))))) ORDER BY ((TRIM(v0.c1))GLOB(((v0.c2) NOT NULL))), GLOB(v0.c0, vt1.c1) COLLATE RTRIM LIMIT 0x0 INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c0, v0.c2, vt1.c1, vt1.c0)) BETWEEN ((v0.c1, '!', v0.c2, v0.c2)) AND (('', v0.c0, vt1.c0, vt1.c1)))) NOT BETWEEN ((((vt1.c0, v0.c0, vt1.c0))>=((v0.c0, v0.c0, v0.c1)))) AND (((v0.c2)*(v0.c0))))) ORDER BY ((TRIM(v0.c1))GLOB(((v0.c2) NOT NULL))), GLOB(v0.c0, vt1.c1) COLLATE RTRIM LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1)*(v0.c1)))&(((3.4551404E8) BETWEEN (0.931942571074267) AND (v0.c1))))) ORDER BY (((v0.c1)IS(vt1.c1)) IN (((vt1.c1) NOT BETWEEN (vt1.c0) AND (v0.c1))))  NULLS FIRST, ((((((((((v0.c2)OR(vt1.c1)))AND(v0.c2)))AND(v0.c2)))OR(vt1.c1))) BETWEEN (((vt1.c0)OR(v0.c0))) AND (((v0.c1) NOTNULL))) DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1)*(v0.c1)))&(((3.4551404E8) BETWEEN (0.931942571074267) AND (v0.c1))))) ORDER BY ((TRIM(v0.c1))GLOB(((v0.c2) NOT NULL))), GLOB(v0.c0, vt1.c1) COLLATE RTRIM LIMIT 0x0 INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c0, v0.c2, vt1.c1, vt1.c0)) BETWEEN ((v0.c1, '!', v0.c2, v0.c2)) AND (('', v0.c0, vt1.c0, vt1.c1)))) NOT BETWEEN ((((vt1.c0, v0.c0, vt1.c0))>=((v0.c0, v0.c0, v0.c1)))) AND (((v0.c2)*(v0.c0))))) ORDER BY ((TRIM(v0.c1))GLOB(((v0.c2) NOT NULL))), GLOB(v0.c0, vt1.c1) COLLATE RTRIM LIMIT 0x0;
SELECT ALL MAX(v0.c2) FROM v0, vt1 WHERE (CAST(((vt1.c0) BETWEEN (v0.c2) AND (x'908ca3')) AS INTEGER));
SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE (CAST(((vt1.c0) BETWEEN (v0.c2) AND (x'908ca3')) AS INTEGER)) ORDER BY ((((vt1.c0)IS(v0.c2)))-(((vt1.c1)>(v0.c1)))), (((vt1.c1)+(v0.c0)) IN (((vt1.c0) ISNULL))) DESC  NULLS LAST;
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (0.038531819072762596) ORDER BY v0.c0 ASC  NULLS FIRST;
SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE (((0.038531819072762596)AND(((((((((((v0.c2) BETWEEN (v0.c0) AND (v0.c2)))AND(((vt1.c0) NOT BETWEEN (0.16645104740920158) AND (vt1.c1)))))AND(((v0.c1)<(vt1.c1)))))AND(NULL)))OR(CAST(vt1.c1 AS NUMERIC)))))) ORDER BY v0.c2 DESC  NULLS FIRST, 0.12714209948963362 ASC LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (LIKELIHOOD(v0.c0 COLLATE BINARY, NULL));
SELECT DISTINCT * FROM vt1, v0 WHERE (LIKELIHOOD(v0.c0 COLLATE BINARY, NULL)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((((((((vt1.c0) IS TRUE))OR(((vt1.c0) NOT NULL))))AND(v0.c0)))OR(0.7135857647115267))) LIMIT 0X2;
SELECT ALL * FROM vt1, v0 WHERE (LIKELIHOOD(v0.c0 COLLATE BINARY, NULL));
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE (((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(v0.c0)))AND(((((vt1.c0)AND(v0.c0)))AND(vt1.c1)))))AND(((v0.c2)<=(v0.c0)))))OR(((v0.c0) NOT NULL)))) ORDER BY NULL;
SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (((((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(v0.c0)))AND(((((vt1.c0)AND(v0.c0)))AND(vt1.c1)))))AND(((v0.c2)<=(v0.c0)))))OR(((v0.c0) NOT NULL))))AND(v0.c1))) ORDER BY NULL INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (v0.c0) ORDER BY NULL;
SELECT MIN(vt1.c1) FROM vt1 WHERE ((((((vt1.c1, vt1.c0))==((vt1.c0, vt1.c0)))) IS FALSE));
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE ((((((vt1.c1, vt1.c0))=((vt1.c0, vt1.c0)))) IS FALSE)) ORDER BY LIKELIHOOD(DISTINCT vt1.c0, vt1.c0) COLLATE RTRIM DESC, ((CAST(vt1.c1 AS TEXT))GLOB((((vt1.c0)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1))))) LIMIT 0x2 INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((0.5527561003686777)IS((vt1.c0 IN ())))) ORDER BY LIKELIHOOD(DISTINCT vt1.c0, vt1.c0) COLLATE RTRIM DESC, ((CAST(vt1.c1 AS TEXT))GLOB((((vt1.c0)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1))))) LIMIT 2;
SELECT ALL * FROM v0 WHERE (CAST(((v0.c1) BETWEEN (v0.c0) AND (v0.c1)) AS NUMERIC)) ORDER BY ((v0.c1)*(v0.c1)) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c1) BETWEEN (v0.c0) AND (v0.c1)) AS NUMERIC)) ORDER BY ((v0.c1)*(v0.c1)) COLLATE BINARY  NULLS LAST LIMIT 1;
SELECT ALL * FROM v0 WHERE (CAST(((v0.c1) BETWEEN (v0.c0) AND (v0.c1)) AS NUMERIC)) ORDER BY ((v0.c1)*(v0.c1)) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c1) BETWEEN (v0.c0) AND (v0.c1)) AS NUMERIC)) ORDER BY ((v0.c1)*(v0.c1)) COLLATE BINARY  NULLS LAST LIMIT 1;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)<=(CAST(vt1.c0 AS REAL))));
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)<(CAST(vt1.c0 AS REAL)))) LIMIT 0;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)<=(CAST(vt1.c0 AS REAL))));
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)<(CAST(vt1.c0 AS REAL)))) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (('381300539' IN (vt1.c1 COLLATE NOCASE))) ORDER BY (((+ (vt1.c0)))>>((+ (vt1.c0)))), CAST(vt1.c0 AS TEXT) COLLATE NOCASE COLLATE BINARY DESC, (((~ (vt1.c0))) IS TRUE) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (('381300539' IN (vt1.c1 COLLATE NOCASE))) ORDER BY (((+ (vt1.c0)))>>((+ (vt1.c0)))), CAST(vt1.c0 AS TEXT) COLLATE NOCASE COLLATE BINARY DESC, (((~ (vt1.c0))) IS TRUE) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT * FROM vt1 WHERE (((HEX(DISTINCT vt1.c1))GLOB((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c1)))))) ORDER BY (((+ (vt1.c0)))>>((+ (vt1.c0)))), CAST(vt1.c0 AS TEXT) COLLATE NOCASE COLLATE BINARY DESC, (((~ (vt1.c0))) IS TRUE) DESC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt1 WHERE (('381300539' IN (vt1.c1 COLLATE NOCASE))) ORDER BY (((+ (vt1.c0)))>>((+ (vt1.c0)))), CAST(vt1.c0 AS TEXT) COLLATE NOCASE COLLATE BINARY DESC, (((~ (vt1.c0))) IS TRUE) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (('381300539' IN (vt1.c1 COLLATE NOCASE))) ORDER BY (((+ (vt1.c0)))>>((+ (vt1.c0)))), CAST(vt1.c0 AS TEXT) COLLATE NOCASE COLLATE BINARY DESC, (((~ (vt1.c0))) IS TRUE) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT * FROM vt1 WHERE (((HEX(DISTINCT vt1.c1))GLOB((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c1)))))) ORDER BY (((+ (vt1.c0)))>>((+ (vt1.c0)))), CAST(vt1.c0 AS TEXT) COLLATE NOCASE COLLATE BINARY DESC, (((~ (vt1.c0))) IS TRUE) DESC  NULLS FIRST LIMIT 0x1;
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (((((vt1.c1) NOTNULL)) BETWEEN ('z(edW2B-i') AND (((v0.c0)LIKE(v0.c2)))));
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (((((vt1.c1) NOTNULL)) BETWEEN ('z(edW2B-i') AND (((v0.c0)LIKE(v0.c2)))));
SELECT ALL * FROM v0, vt1 WHERE ((~ (((v0.c0)|(vt1.c0)))));
SELECT ALL * FROM v0, vt1 WHERE ((~ (((v0.c0)|(vt1.c0))))) INTERSECT SELECT * FROM v0, vt1 WHERE (((CASE WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 END) ISNULL));
SELECT ALL * FROM v0, vt1 WHERE ((~ (((v0.c0)|(vt1.c0)))));
SELECT ALL * FROM v0, vt1 WHERE ((~ (((v0.c0)|(vt1.c0))))) INTERSECT SELECT * FROM v0, vt1 WHERE (((CASE WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 END) ISNULL));
SELECT * FROM v0, vt1 WHERE (((((vt1.c1) NOT BETWEEN (v0.c1) AND (NULL))) NOT BETWEEN ((x'' IN (vt1.c0))) AND (v0.c0)));
SELECT ALL * FROM v0, vt1 WHERE (((((((vt1.c1) NOT BETWEEN (v0.c1) AND (NULL))) NOT BETWEEN ((x'' IN (vt1.c0))) AND (v0.c0)))AND(((CASE WHEN NULL THEN vt1.c1 WHEN v0.c0 THEN v0.c1 WHEN vt1.c1 THEN '360220862' END)AND(CASE WHEN vt1.c1 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END))))) INTERSECT SELECT * FROM v0, vt1 WHERE (CAST(NULL AS BLOB));
SELECT * FROM v0, vt1 WHERE (((((vt1.c1) NOT BETWEEN (v0.c1) AND (NULL))) NOT BETWEEN ((x'' IN (vt1.c0))) AND (v0.c0)));
SELECT ALL * FROM v0, vt1 WHERE (((((((vt1.c1) NOT BETWEEN (v0.c1) AND (NULL))) NOT BETWEEN ((x'' IN (vt1.c0))) AND (v0.c0)))AND(((CASE WHEN NULL THEN vt1.c1 WHEN v0.c0 THEN v0.c1 WHEN vt1.c1 THEN '360220862' END)AND(CASE WHEN vt1.c1 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END))))) INTERSECT SELECT * FROM v0, vt1 WHERE (CAST(NULL AS BLOB));
SELECT MIN(vt1.c1) FROM v0, vt1 WHERE (((((x'81') NOT BETWEEN (vt1.c0) AND (v0.c2))) NOT BETWEEN ((('712791637')LIKE(v0.c1))) AND (RTRIM(v0.c2)))) ORDER BY (((CAST(v0.c2 AS REAL), ((((v0.c1)AND(v0.c1)))AND(vt1.c1))))>=(((v0.c0 IN ()), ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))));
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (((((((x'81') NOT BETWEEN (vt1.c0) AND (v0.c2))) NOT BETWEEN ((('712791637')LIKE(v0.c1))) AND (RTRIM(v0.c2))))AND(CASE CAST(3.740108E8 AS REAL)  WHEN NULL THEN (((v0.c1, vt1.c0))<=(('', v0.c1))) ELSE CAST(vt1.c1 AS BLOB) END))) ORDER BY (((CAST(v0.c2 AS REAL), ((((v0.c1)AND(v0.c1)))AND(vt1.c1))))>=(((v0.c0 IN ()), ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1))))) LIMIT 0X2;
SELECT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (rtreenode(v0.c2, CAST(vt1.c1 AS BLOB))) ORDER BY LIKELIHOOD((((v0.c1, v0.c2)) NOT BETWEEN ((v0.c0, vt1.c1)) AND ((v0.c1, vt1.c1))), v0.c0 COLLATE NOCASE)  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (rtreenode(v0.c2, CAST(vt1.c1 AS BLOB))) ORDER BY ((CASE WHEN vt1.c1 THEN v0.c2 END)*(((vt1.c0) BETWEEN (v0.c2) AND (v0.c1))))  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE ((NOT (vt1.c0 COLLATE RTRIM))) ORDER BY ((CASE WHEN vt1.c1 THEN v0.c2 END)*(((vt1.c0) BETWEEN (v0.c2) AND (v0.c1))))  NULLS LAST;
SELECT ALL MAX(v0.c0) FROM v0 WHERE ((CASE v0.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN '' ELSE v0.c0 END IN (9.31266565E8 COLLATE RTRIM, ((v0.c1) BETWEEN (v0.c1) AND (v0.c0)), (((v0.c0, v0.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c0))))));
SELECT MAX(v0.c0) FROM v0 WHERE ((((CASE v0.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN '' ELSE v0.c0 END IN (9.31266565E8 COLLATE RTRIM)))AND((((v0.c1 IN ())) BETWEEN (NULLIF(v0.c1, v0.c1)) AND (ABS(DISTINCT v0.c0)))))) LIMIT 0X3 INTERSECT SELECT ALL MAX(v0.c0) FROM v0 WHERE (v0.c1) LIMIT 0x3;
SELECT * FROM vt1 WHERE ((((+ (vt1.c0)))*(((vt1.c0)-(vt1.c0))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))|(((((((((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))) ASC  NULLS LAST, CASE WHEN vt1.c1 COLLATE BINARY THEN LIKELIHOOD(DISTINCT vt1.c0, vt1.c0) WHEN (vt1.c0 IN ()) THEN ((vt1.c0) NOT NULL) WHEN ((vt1.c0)>=(vt1.c1)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END WHEN vt1.c1 COLLATE RTRIM THEN CAST(vt1.c0 AS NUMERIC) WHEN QUOTE(vt1.c1) THEN (+ (NULL)) END DESC, (((((((((vt1.c1))<>((vt1.c1))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END)))AND(((vt1.c1)/(vt1.c0)))))AND('113044365')) DESC;
SELECT DISTINCT * FROM vt1 WHERE ((((((+ (vt1.c0)))*(((vt1.c0)-(vt1.c0)))))AND(vt1.c0))) ORDER BY ((((vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c1)) AND ((vt1.c0, vt1.c1))) IN (vt1.c0)) ASC, ((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE 0.8641387258313481 END)+((vt1.c0 IN ())))  NULLS LAST;
SELECT * FROM vt1 WHERE ((((+ (vt1.c0)))*(((vt1.c0)-(vt1.c0))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))|(((((((((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))) ASC  NULLS LAST, CASE WHEN vt1.c1 COLLATE BINARY THEN LIKELIHOOD(DISTINCT vt1.c0, vt1.c0) WHEN (vt1.c0 IN ()) THEN ((vt1.c0) NOT NULL) WHEN ((vt1.c0)>=(vt1.c1)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END WHEN vt1.c1 COLLATE RTRIM THEN CAST(vt1.c0 AS NUMERIC) WHEN QUOTE(vt1.c1) THEN (+ (NULL)) END DESC, (((((((((vt1.c1))<>((vt1.c1))))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END)))AND(((vt1.c1)/(vt1.c0)))))AND('113044365')) DESC;
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (v0.c2);
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (v0.c2) LIMIT 0X0 INTERSECT SELECT MAX(v0.c0) FROM vt1, v0 WHERE ((((((v0.c1)OR(v0.c0)))OR(v0.c2)) IN (((v0.c2)<(vt1.c1))))) LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (((CAST(x'ae' AS NUMERIC)) BETWEEN ((((v0.c0, v0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c2, v0.c0)) AND ((v0.c2, v0.c2, v0.c0)))) AND (((v0.c1) BETWEEN (v0.c0) AND (v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (((CAST(x'ae' AS NUMERIC)) BETWEEN ((((v0.c0, v0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c2, v0.c0)) AND ((v0.c2, v0.c2, v0.c0)))) AND (((v0.c1) BETWEEN (v0.c0) AND (v0.c0))))) INTERSECT SELECT DISTINCT * FROM v0 WHERE ((('gzE#kyH萫') IS FALSE));
SELECT ALL * FROM v0 WHERE (((CAST(x'ae' AS NUMERIC)) BETWEEN ((((v0.c0, v0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c2, v0.c0)) AND ((v0.c2, v0.c2, v0.c0)))) AND (((v0.c1) BETWEEN (v0.c0) AND (v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (((CAST(x'ae' AS NUMERIC)) BETWEEN ((((v0.c0, v0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c2, v0.c0)) AND ((v0.c2, v0.c2, v0.c0)))) AND (((v0.c1) BETWEEN (v0.c0) AND (v0.c0))))) INTERSECT SELECT DISTINCT * FROM v0 WHERE ((('gzE#kyH萫') IS FALSE));
SELECT COUNT(*) FROM vt1, v0 WHERE ('4LrsOc0');
SELECT COUNT(*) FROM vt1, v0 WHERE ((('4LrsOc0')AND(CASE WHEN ((vt1.c1) IS TRUE) THEN ((v0.c0) IS FALSE) END))) LIMIT 0x1;
SELECT ALL * FROM v0, vt1 WHERE ((0x5921dda5 IN (((vt1.c1) BETWEEN (v0.c1) AND (vt1.c0))))) ORDER BY (CAST(NULL AS REAL) IN ())  NULLS LAST, CASE HEX(v0.c2)  WHEN CAST(v0.c1 AS TEXT) THEN 0.1815678517994589 WHEN (((x'3b20')) BETWEEN ((vt1.c1)) AND ((v0.c0))) THEN ((((vt1.c1)AND(vt1.c0)))AND(v0.c2)) ELSE ((v0.c1) BETWEEN (vt1.c1) AND (v0.c0)) END;
SELECT DISTINCT * FROM v0, vt1 WHERE ((0X5921dda5 IN (((vt1.c1) BETWEEN (v0.c1) AND (vt1.c0))))) ORDER BY ((CASE vt1.c0  WHEN v0.c0 THEN v0.c2 END) NOT BETWEEN ((+ (vt1.c1))) AND ('')), (~ (((v0.c2)IS(v0.c1))))  NULLS FIRST, ((((((INSTR(vt1.c1, vt1.c0))OR(((v0.c1)AND(v0.c1)))))OR(((((((vt1.c1)OR(v0.c0)))AND(vt1.c1)))AND(v0.c0)))))OR(((NULL)IS(vt1.c0))))  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE ((0x5921dda5 IN (((vt1.c1) BETWEEN (v0.c1) AND (vt1.c0))))) ORDER BY (CAST(NULL AS REAL) IN ())  NULLS LAST, CASE HEX(v0.c2)  WHEN CAST(v0.c1 AS TEXT) THEN 0.1815678517994589 WHEN (((x'3b20')) BETWEEN ((vt1.c1)) AND ((v0.c0))) THEN ((((vt1.c1)AND(vt1.c0)))AND(v0.c2)) ELSE ((v0.c1) BETWEEN (vt1.c1) AND (v0.c0)) END;
SELECT ALL COUNT(*) FROM v0 WHERE ((((NULL)&(x'4723')) IN ())) ORDER BY ((1.36718424E9) BETWEEN (((v0.c2)AND(v0.c2))) AND (x'')), ((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))<(v0.c0 COLLATE BINARY)) DESC, v0.c0  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE ((((((NULL)&(x'4723')) IN ()))AND(NULL))) ORDER BY ((1.36718424E9) BETWEEN (((v0.c2)AND(v0.c2))) AND (x'')), ((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))<(v0.c0 COLLATE BINARY)) DESC, v0.c0  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE (IFNULL(DISTINCT v0.c1 COLLATE RTRIM, ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1))));
SELECT MIN(vt1.c0) FROM vt1, v0 WHERE (IFNULL(DISTINCT v0.c1 COLLATE RTRIM, ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))) INTERSECT SELECT MIN(vt1.c0) FROM vt1, v0 WHERE (((v0.c0) IS FALSE) COLLATE BINARY);
SELECT * FROM vt1 WHERE (CASE (vt1.c0 IN ())  WHEN COALESCE(vt1.c0, vt1.c0, -3.3531352E8, vt1.c1) THEN (+ (vt1.c1)) END) ORDER BY (((NOT (vt1.c1)))>>((vt1.c0 IN (vt1.c1))));
SELECT DISTINCT * FROM vt1 WHERE (((CASE (vt1.c0 IN ())  WHEN COALESCE(vt1.c0, vt1.c0, -3.3531352E8, vt1.c1) THEN (+ (vt1.c1)) END)AND(((((((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))) BETWEEN (vt1.c0 COLLATE RTRIM) AND (((((vt1.c1)OR(vt1.c1)))OR(vt1.c0))))))) ORDER BY CAST((NOT (vt1.c1)) AS TEXT)  NULLS FIRST, (~ (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END)) DESC  NULLS FIRST, ((((vt1.c1)LIKE(vt1.c0)))>>(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN (((vt1.c1))==((vt1.c1))) THEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)) WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)) THEN vt1.c0 END) ORDER BY CAST((NOT (vt1.c1)) AS TEXT)  NULLS FIRST, (~ (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END)) DESC  NULLS FIRST, ((((vt1.c1)LIKE(vt1.c0)))>>(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))) ASC;
SELECT * FROM vt1 WHERE (CASE (vt1.c0 IN ())  WHEN COALESCE(vt1.c0, vt1.c0, -3.3531352E8, vt1.c1) THEN (+ (vt1.c1)) END) ORDER BY (((NOT (vt1.c1)))>>((vt1.c0 IN (vt1.c1))));
SELECT DISTINCT * FROM vt1 WHERE (((CASE (vt1.c0 IN ())  WHEN COALESCE(vt1.c0, vt1.c0, -3.3531352E8, vt1.c1) THEN (+ (vt1.c1)) END)AND(((((((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0))) BETWEEN (vt1.c0 COLLATE RTRIM) AND (((((vt1.c1)OR(vt1.c1)))OR(vt1.c0))))))) ORDER BY CAST((NOT (vt1.c1)) AS TEXT)  NULLS FIRST, (~ (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END)) DESC  NULLS FIRST, ((((vt1.c1)LIKE(vt1.c0)))>>(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN (((vt1.c1))==((vt1.c1))) THEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)) WHEN ((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)) THEN vt1.c0 END) ORDER BY CAST((NOT (vt1.c1)) AS TEXT)  NULLS FIRST, (~ (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END)) DESC  NULLS FIRST, ((((vt1.c1)LIKE(vt1.c0)))>>(((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))) ASC;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((UPPER(v0.c2))GLOB(((((v0.c1)OR(v0.c2)))AND('1390811321')))));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((UPPER(v0.c2))GLOB(((((v0.c1)OR(v0.c2)))AND('1390811321')))))AND(((((v0.c0) IS TRUE))/((('') NOT BETWEEN (v0.c0) AND (v0.c1))))))) INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((TRIM(DISTINCT v0.c0)) IS FALSE));
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((vt1.c1 COLLATE RTRIM)IS(vt1.c0))) ORDER BY 'FALSE' DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((((vt1.c1 COLLATE RTRIM)IS(vt1.c0)))AND(CASE WHEN (vt1.c0 IN ()) THEN vt1.c0 WHEN (((vt1.c0, vt1.c0))<=((vt1.c0, vt1.c0))) THEN (- (vt1.c0)) WHEN (vt1.c0 IN (vt1.c0, vt1.c1)) THEN (vt1.c0 IN (NULL)) ELSE (NOT (vt1.c0)) END))) ORDER BY 'FALSE' DESC  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE ((((('1451872936')>>(vt1.c0)))AND(((vt1.c0) NOTNULL)))) ORDER BY 'FALSE' DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c1) NOTNULL) AS BLOB)) ORDER BY ((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 END) NOT NULL) DESC  NULLS LAST, 0.019416339833427054, CAST((vt1.c1 IN (vt1.c1)) AS BLOB)  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c1) NOTNULL) AS BLOB)) ORDER BY (((vt1.c0, x'082bf1')) BETWEEN ((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)), (~ (vt1.c1)))) AND ((((((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))AND(x'')), CAST(vt1.c1 AS INTEGER)))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c1) NOTNULL) AS BLOB)) ORDER BY ((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 END) NOT NULL) DESC  NULLS LAST, 0.019416339833427054, CAST((vt1.c1 IN (vt1.c1)) AS BLOB)  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c1) NOTNULL) AS BLOB)) ORDER BY (((vt1.c0, x'082bf1')) BETWEEN ((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)), (~ (vt1.c1)))) AND ((((((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))AND(x'')), CAST(vt1.c1 AS INTEGER)))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (((CAST(v0.c0 AS REAL))AND(vt1.c0)));
SELECT * FROM vt1, v0 WHERE (((CAST(v0.c0 AS REAL))AND(vt1.c0))) ORDER BY (((('') NOT NULL)) NOT BETWEEN (((v0.c1) NOT NULL)) AND (x'da')), ((0.1970452391627)=((((v0.c0))<=((vt1.c1))))) ASC, CASE x'056c'  WHEN CAST(v0.c1 AS INTEGER) THEN CAST(v0.c0 AS NUMERIC) WHEN (('-1626626434')OR(v0.c2)) THEN ((v0.c0) NOTNULL) WHEN (('-1287524755')==('-1017404822')) THEN vt1.c1 END  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((vt1.c0)>=(v0.c2))) NOT BETWEEN (x'93' COLLATE RTRIM) AND ((('g')>>(vt1.c1))))) ORDER BY (((('') NOT NULL)) NOT BETWEEN (((v0.c1) NOT NULL)) AND (x'da')), ((0.1970452391627)==((((v0.c0))<=((vt1.c1))))) ASC, CASE x'056c'  WHEN CAST(v0.c1 AS INTEGER) THEN CAST(v0.c0 AS NUMERIC) WHEN (('-1626626434')OR(v0.c2)) THEN ((v0.c0) NOTNULL) WHEN (('-1287524755')=('-1017404822')) THEN vt1.c1 END  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (((CAST(v0.c0 AS REAL))AND(vt1.c0)));
SELECT * FROM vt1, v0 WHERE (((CAST(v0.c0 AS REAL))AND(vt1.c0))) ORDER BY (((('') NOT NULL)) NOT BETWEEN (((v0.c1) NOT NULL)) AND (x'da')), ((0.1970452391627)=((((v0.c0))<=((vt1.c1))))) ASC, CASE x'056c'  WHEN CAST(v0.c1 AS INTEGER) THEN CAST(v0.c0 AS NUMERIC) WHEN (('-1626626434')OR(v0.c2)) THEN ((v0.c0) NOTNULL) WHEN (('-1287524755')==('-1017404822')) THEN vt1.c1 END  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((vt1.c0)>=(v0.c2))) NOT BETWEEN (x'93' COLLATE RTRIM) AND ((('g')>>(vt1.c1))))) ORDER BY (((('') NOT NULL)) NOT BETWEEN (((v0.c1) NOT NULL)) AND (x'da')), ((0.1970452391627)==((((v0.c0))<=((vt1.c1))))) ASC, CASE x'056c'  WHEN CAST(v0.c1 AS INTEGER) THEN CAST(v0.c0 AS NUMERIC) WHEN (('-1626626434')OR(v0.c2)) THEN ((v0.c0) NOTNULL) WHEN (('-1287524755')=('-1017404822')) THEN vt1.c1 END  NULLS LAST LIMIT 0;
SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE (((+ (v0.c2)) IN (((0.05693947735140992)=(vt1.c1)), 'V窋~俌' COLLATE BINARY)));
SELECT DISTINCT MIN(vt1.c1) FROM vt1, v0 WHERE (((+ (v0.c2)) IN (((0.05693947735140992)==(vt1.c1))))) ORDER BY ((UNICODE(v0.c2)) BETWEEN (CAST(v0.c1 AS BLOB)) AND (((vt1.c0)>=(vt1.c0)))) DESC  NULLS LAST LIMIT 0X2 INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1, v0 WHERE (SQLITE_VERSION()) ORDER BY ((UNICODE(v0.c2)) BETWEEN (CAST(v0.c1 AS BLOB)) AND (((vt1.c0)>=(vt1.c0)))) DESC  NULLS LAST LIMIT 2;
SELECT * FROM vt1 WHERE ((((0.7875672967990558 IN (vt1.c0))) NOT BETWEEN (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY ((CAST(vt1.c1 AS BLOB))LIKE(((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((((0.7875672967990558 IN (vt1.c0))) NOT BETWEEN (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY 'D/' COLLATE BINARY DESC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))AND(vt1.c0))) BETWEEN (CAST(vt1.c1 AS TEXT)) AND (((vt1.c0)GLOB(vt1.c1))))) ORDER BY 'D/' COLLATE BINARY DESC LIMIT 0;
SELECT * FROM vt1 WHERE ((((0.7875672967990558 IN (vt1.c0))) NOT BETWEEN (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY ((CAST(vt1.c1 AS BLOB))LIKE(((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((((0.7875672967990558 IN (vt1.c0))) NOT BETWEEN (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY 'D/' COLLATE BINARY DESC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))AND(vt1.c0))) BETWEEN (CAST(vt1.c1 AS TEXT)) AND (((vt1.c0)GLOB(vt1.c1))))) ORDER BY 'D/' COLLATE BINARY DESC LIMIT 0;
SELECT * FROM v0, vt1 WHERE ((((((((((v0.c0, v0.c1)) BETWEEN ((v0.c1, vt1.c1)) AND ((vt1.c1, v0.c1))))AND(CAST(v0.c0 AS INTEGER))))AND(CHAR(vt1.c0))))OR(vt1.c1))) ORDER BY ((((((vt1.c1 COLLATE RTRIM)AND(((v0.c2) BETWEEN (v0.c1) AND (v0.c0)))))OR((+ (v0.c0)))))AND(-1798878894));
SELECT * FROM v0, vt1 WHERE ((((((((((((v0.c0, v0.c1)) BETWEEN ((v0.c1, vt1.c1)) AND ((vt1.c1, v0.c1))))AND(CAST(v0.c0 AS INTEGER))))AND(CHAR(vt1.c0))))OR(vt1.c1)))AND(((CASE WHEN 1945989696 THEN '1451872936' END)IS NOT(((v0.c2) ISNULL)))))) ORDER BY LOWER(COALESCE(v0.c2, vt1.c0, vt1.c0, v0.c2, vt1.c0, v0.c0)), ((IFNULL(v0.c1, v0.c1)) NOTNULL), (- ((((v0.c0, '121862702', v0.c2, v0.c0))>((v0.c0, vt1.c1, v0.c2, v0.c2))))) DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE ((((((((((v0.c0, v0.c1)) BETWEEN ((v0.c1, vt1.c1)) AND ((vt1.c1, v0.c1))))AND(CAST(v0.c0 AS INTEGER))))AND(CHAR(vt1.c0))))OR(vt1.c1))) ORDER BY ((((((vt1.c1 COLLATE RTRIM)AND(((v0.c2) BETWEEN (v0.c1) AND (v0.c0)))))OR((+ (v0.c0)))))AND(-1798878894));
SELECT * FROM v0, vt1 WHERE ((((((((((((v0.c0, v0.c1)) BETWEEN ((v0.c1, vt1.c1)) AND ((vt1.c1, v0.c1))))AND(CAST(v0.c0 AS INTEGER))))AND(CHAR(vt1.c0))))OR(vt1.c1)))AND(((CASE WHEN 1945989696 THEN '1451872936' END)IS NOT(((v0.c2) ISNULL)))))) ORDER BY LOWER(COALESCE(v0.c2, vt1.c0, vt1.c0, v0.c2, vt1.c0, v0.c0)), ((IFNULL(v0.c1, v0.c1)) NOTNULL), (- ((((v0.c0, '121862702', v0.c2, v0.c0))>((v0.c0, vt1.c1, v0.c2, v0.c2))))) DESC  NULLS FIRST;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (STRFTIME(x'', ((v0.c1)<=(v0.c0)), v0.c2, (((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c2)))));
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (STRFTIME(x'', ((v0.c1)<=(v0.c0)), v0.c2, (((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))))) ORDER BY CASE v0.c2  WHEN ((v0.c1) BETWEEN (v0.c2) AND (v0.c1)) THEN (((x'd8', 0X27ada8ac))<=((v0.c2, v0.c1))) END, ((((((v0.c0)AND(v0.c0)))OR(v0.c2)))-(CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN 1493348174 END)) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (CASE WHEN (('611134792') BETWEEN (vt1.c1) AND (vt1.c1)) THEN vt1.c1 WHEN (vt1.c1 IN (vt1.c0)) THEN (((vt1.c1, vt1.c0, vt1.c0))==((vt1.c1, vt1.c0, vt1.c0))) WHEN ((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END END) ORDER BY (+ ((NOT (vt1.c1)))) DESC;
SELECT COUNT(*) FROM vt1 WHERE (CASE WHEN (('611134792') BETWEEN (vt1.c1) AND (vt1.c1)) THEN vt1.c1 WHEN (vt1.c1 IN (vt1.c0)) THEN (((vt1.c1, vt1.c0, vt1.c0))==((vt1.c1, vt1.c0, vt1.c0))) WHEN ((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)) THEN CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END END) ORDER BY (+ ((NOT (vt1.c1)))) DESC;
SELECT * FROM v0, vt1 WHERE (CASE ((vt1.c1) NOT NULL)  WHEN v0.c0 THEN CAST(vt1.c1 AS NUMERIC) WHEN ((v0.c1)<=(v0.c1)) THEN (((v0.c0, 0.1636922165520922)) BETWEEN ((vt1.c0, NULL)) AND ((0Xffffffffe938ad4c, v0.c1))) WHEN ((v0.c0)&(v0.c2)) THEN (((v0.c2))<((v0.c1))) WHEN CASE v0.c1  WHEN v0.c1 THEN v0.c2 ELSE vt1.c0 END THEN ((vt1.c0)%(v0.c0)) END) ORDER BY UPPER(DISTINCT ((v0.c0) BETWEEN (v0.c2) AND (v0.c1))) ASC  NULLS FIRST, '', (((NULL, v0.c1, v0.c0)) BETWEEN ((v0.c0, ((('N5NN*)B鈴', v0.c1)) NOT BETWEEN ((v0.c0, x'e728fc')) AND ((v0.c2, vt1.c0))), (x'' IN (v0.c0)))) AND ((v0.c0 COLLATE NOCASE, CAST(v0.c1 AS BLOB), CAST(vt1.c0 AS INTEGER)))) DESC;
SELECT * FROM v0, vt1 WHERE (CASE ((vt1.c1) NOT NULL)  WHEN v0.c0 THEN CAST(vt1.c1 AS NUMERIC) WHEN ((v0.c1)==(v0.c1)) THEN (((v0.c0, 0.1636922165520922)) BETWEEN ((vt1.c0, NULL)) AND ((0xffffffffe938ad4c, v0.c1))) WHEN ((v0.c0)&(v0.c2)) THEN (((v0.c2))<((v0.c1))) WHEN CASE v0.c1  WHEN v0.c1 THEN v0.c2 ELSE vt1.c0 END THEN ((vt1.c0)%(v0.c0)) END) ORDER BY ((0.6743655865935339) NOT BETWEEN (v0.c2) AND (((((v0.c2)OR(v0.c2)))OR(v0.c1)))) ASC;
SELECT * FROM v0, vt1 WHERE (CASE ((vt1.c1) NOT NULL)  WHEN v0.c0 THEN CAST(vt1.c1 AS NUMERIC) WHEN ((v0.c1)<=(v0.c1)) THEN (((v0.c0, 0.1636922165520922)) BETWEEN ((vt1.c0, NULL)) AND ((0Xffffffffe938ad4c, v0.c1))) WHEN ((v0.c0)&(v0.c2)) THEN (((v0.c2))<((v0.c1))) WHEN CASE v0.c1  WHEN v0.c1 THEN v0.c2 ELSE vt1.c0 END THEN ((vt1.c0)%(v0.c0)) END) ORDER BY UPPER(DISTINCT ((v0.c0) BETWEEN (v0.c2) AND (v0.c1))) ASC  NULLS FIRST, '', (((NULL, v0.c1, v0.c0)) BETWEEN ((v0.c0, ((('N5NN*)B鈴', v0.c1)) NOT BETWEEN ((v0.c0, x'e728fc')) AND ((v0.c2, vt1.c0))), (x'' IN (v0.c0)))) AND ((v0.c0 COLLATE NOCASE, CAST(v0.c1 AS BLOB), CAST(vt1.c0 AS INTEGER)))) DESC;
SELECT * FROM v0, vt1 WHERE (CASE ((vt1.c1) NOT NULL)  WHEN v0.c0 THEN CAST(vt1.c1 AS NUMERIC) WHEN ((v0.c1)==(v0.c1)) THEN (((v0.c0, 0.1636922165520922)) BETWEEN ((vt1.c0, NULL)) AND ((0xffffffffe938ad4c, v0.c1))) WHEN ((v0.c0)&(v0.c2)) THEN (((v0.c2))<((v0.c1))) WHEN CASE v0.c1  WHEN v0.c1 THEN v0.c2 ELSE vt1.c0 END THEN ((vt1.c0)%(v0.c0)) END) ORDER BY ((0.6743655865935339) NOT BETWEEN (v0.c2) AND (((((v0.c2)OR(v0.c2)))OR(v0.c1)))) ASC;
SELECT MIN(v0.c1) FROM v0 WHERE ((+ (v0.c2)) COLLATE RTRIM);
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE ((((+ (v0.c2)) COLLATE RTRIM)AND(((NULL IN ()) IN (((v0.c2) NOT BETWEEN (v0.c2) AND (3.2506213E7))))))) LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((IFNULL(DISTINCT v0.c1, v0.c0)) IS FALSE)) LIMIT 0X0;
SELECT * FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN x'6671' WHEN 0.6323813622773726 THEN vt1.c1 WHEN vt1.c1 THEN x'5b' END)IS NOT(vt1.c0 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt1 WHERE (((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN x'6671' WHEN 0.6323813622773726 THEN vt1.c1 WHEN vt1.c1 THEN x'5b' END)IS NOT(vt1.c0 COLLATE NOCASE)))AND(UNLIKELY(DISTINCT '0.5291179575889686')))) ORDER BY ((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 END)IS(((vt1.c0)>=(vt1.c1))))  NULLS LAST, vt1.c1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 IN ()) IN (CASE WHEN 'uoH>㖊1' THEN vt1.c1 END))) ORDER BY ((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 END)IS(((vt1.c0)>=(vt1.c1))))  NULLS LAST, vt1.c1;
SELECT * FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN x'6671' WHEN 0.6323813622773726 THEN vt1.c1 WHEN vt1.c1 THEN x'5b' END)IS NOT(vt1.c0 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt1 WHERE (((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN x'6671' WHEN 0.6323813622773726 THEN vt1.c1 WHEN vt1.c1 THEN x'5b' END)IS NOT(vt1.c0 COLLATE NOCASE)))AND(UNLIKELY(DISTINCT '0.5291179575889686')))) ORDER BY ((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 END)IS(((vt1.c0)>=(vt1.c1))))  NULLS LAST, vt1.c1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 IN ()) IN (CASE WHEN 'uoH>㖊1' THEN vt1.c1 END))) ORDER BY ((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 END)IS(((vt1.c0)>=(vt1.c1))))  NULLS LAST, vt1.c1;
SELECT * FROM v0 WHERE ((+ (v0.c0 COLLATE RTRIM)));
SELECT DISTINCT * FROM v0 WHERE ((((+ (v0.c0 COLLATE RTRIM)))AND((((v0.c0, v0.c2, v0.c1, v0.c1)) NOT BETWEEN (((v0.c2 IN (v0.c1, 0.12059539641045136, v0.c1)), v0.c2 COLLATE RTRIM, UNLIKELY(DISTINCT v0.c0), ((v0.c0)<<(v0.c1)))) AND ((((v0.c1) NOT NULL), (((v0.c2, v0.c1))!=((v0.c0, v0.c1))), (NOT (v0.c2)), ((v0.c0)<<(v0.c1))))))));
SELECT * FROM v0 WHERE ((+ (v0.c0 COLLATE RTRIM)));
SELECT DISTINCT * FROM v0 WHERE ((((+ (v0.c0 COLLATE RTRIM)))AND((((v0.c0, v0.c2, v0.c1, v0.c1)) NOT BETWEEN (((v0.c2 IN (v0.c1, 0.12059539641045136, v0.c1)), v0.c2 COLLATE RTRIM, UNLIKELY(DISTINCT v0.c0), ((v0.c0)<<(v0.c1)))) AND ((((v0.c1) NOT NULL), (((v0.c2, v0.c1))!=((v0.c0, v0.c1))), (NOT (v0.c2)), ((v0.c0)<<(v0.c1))))))));
SELECT ALL MIN(v0.c0) FROM v0 WHERE (((CAST(v0.c1 AS REAL))&(CASE v0.c2  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END))) ORDER BY ((((v0.c1)AND(v0.c2)))AND(v0.c1)) COLLATE RTRIM;
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((CAST(v0.c1 AS REAL))&(CASE v0.c2  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END))) ORDER BY (((+ (v0.c0)))+(CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((((((v0.c0, v0.c0)) BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2, NULL))), (- (v0.c2)), CAST(v0.c2 AS REAL)))<((v0.c2, (- (v0.c1)), ((v0.c1)GLOB(v0.c1)))))) ORDER BY (((+ (v0.c0)))+(CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)) DESC  NULLS FIRST LIMIT 0X0;
SELECT MAX(v0.c1) FROM v0 WHERE ((NOT ((+ (v0.c0)))));
SELECT MAX(v0.c1) FROM v0 WHERE ((NOT ((+ (v0.c0))))) ORDER BY ((v0.c1 IN ()) IN ()) INTERSECT SELECT MAX(v0.c1) FROM v0 WHERE (((((v0.c2)<=(0Xffffffff86081a5a))) ISNULL)) ORDER BY ((v0.c1 IN ()) IN ());
SELECT * FROM v0 WHERE (((CASE WHEN v0.c0 THEN v0.c0 WHEN '191535073' THEN v0.c1 ELSE v0.c1 END) NOT BETWEEN (((v0.c0)IS NOT(v0.c2))) AND (CASE v0.c0  WHEN v0.c1 THEN v0.c0 END)));
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c0 THEN v0.c0 WHEN '191535073' THEN v0.c1 ELSE v0.c1 END) NOT BETWEEN (((v0.c0)IS NOT(v0.c2))) AND (CASE v0.c0  WHEN v0.c1 THEN v0.c0 END))) ORDER BY (((- (v0.c1)))-((+ (v0.c0)))) DESC, CASE WHEN v0.c0 COLLATE BINARY THEN ((((((((v0.c0)OR(v0.c0)))OR(v0.c1)))OR(v0.c2)))OR(v0.c0)) ELSE 'V炛e*zvcv' END DESC LIMIT 0x0;
SELECT * FROM v0 WHERE (((CASE WHEN v0.c0 THEN v0.c0 WHEN '191535073' THEN v0.c1 ELSE v0.c1 END) NOT BETWEEN (((v0.c0)IS NOT(v0.c2))) AND (CASE v0.c0  WHEN v0.c1 THEN v0.c0 END)));
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c0 THEN v0.c0 WHEN '191535073' THEN v0.c1 ELSE v0.c1 END) NOT BETWEEN (((v0.c0)IS NOT(v0.c2))) AND (CASE v0.c0  WHEN v0.c1 THEN v0.c0 END))) ORDER BY (((- (v0.c1)))-((+ (v0.c0)))) DESC, CASE WHEN v0.c0 COLLATE BINARY THEN ((((((((v0.c0)OR(v0.c0)))OR(v0.c1)))OR(v0.c2)))OR(v0.c0)) ELSE 'V炛e*zvcv' END DESC LIMIT 0x0;
SELECT ALL * FROM v0, vt1 WHERE (((((((((v0.c1)GLOB(v0.c0)))AND(CAST(vt1.c0 AS TEXT))))OR(((v0.c1) BETWEEN (v0.c2) AND (vt1.c0)))))AND('-2099305964')));
SELECT ALL * FROM v0, vt1 WHERE (((((((((v0.c1)GLOB(v0.c0)))AND(CAST(vt1.c0 AS TEXT))))OR(((v0.c1) BETWEEN (v0.c2) AND (vt1.c0)))))AND('-2099305964'))) LIMIT 2;
SELECT ALL * FROM v0, vt1 WHERE (((((((((v0.c1)GLOB(v0.c0)))AND(CAST(vt1.c0 AS TEXT))))OR(((v0.c1) BETWEEN (v0.c2) AND (vt1.c0)))))AND('-2099305964')));
SELECT ALL * FROM v0, vt1 WHERE (((((((((v0.c1)GLOB(v0.c0)))AND(CAST(vt1.c0 AS TEXT))))OR(((v0.c1) BETWEEN (v0.c2) AND (vt1.c0)))))AND('-2099305964'))) LIMIT 2;
SELECT MIN(vt1.c0) FROM vt1, v0 WHERE ((((vt1.c1 IN ()))>>(x'')));
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE ((((((vt1.c1 IN ()))>>(x'')))AND((v0.c1 IN ((NOT (v0.c0))))))) ORDER BY ((((((((((v0.c0) ISNULL))AND((vt1.c1 IN (vt1.c0)))))AND(vt1.c0)))OR(((vt1.c0)<=(v0.c1)))))OR(((v0.c0) BETWEEN (v0.c2) AND ('-610614943')))) ASC, ((((v0.c0) BETWEEN (v0.c2) AND (v0.c0)))GLOB((NOT (vt1.c0))))  NULLS FIRST, ((((v0.c1) NOT BETWEEN (v0.c1) AND (NULL)))IS(SQLITE_VERSION())) DESC LIMIT 2;
SELECT * FROM v0 INNER JOIN vt1 ON (((v0.c1 IN ()))==(((vt1.c1)<=(vt1.c0)))) WHERE (v0.c1 COLLATE NOCASE);
SELECT ALL * FROM v0 INNER JOIN vt1 ON (((v0.c1 IN ()))==(((vt1.c1)<=(vt1.c0)))) WHERE (((v0.c1 COLLATE NOCASE)AND(((v0.c2) BETWEEN (v0.c2) AND (CAST(v0.c2 AS BLOB)))))) ORDER BY ((((((((((((1.654447368E9) NOTNULL))OR(CASE vt1.c1  WHEN '184893080' THEN v0.c0 ELSE vt1.c1 END)))OR((v0.c1 IN ()))))OR(vt1.c0)))AND('n6')))OR(((((((vt1.c0)OR(vt1.c0)))OR(v0.c0)))OR(vt1.c0)))) ASC;
SELECT * FROM v0 INNER JOIN vt1 ON (((v0.c1 IN ()))==(((vt1.c1)<=(vt1.c0)))) WHERE (v0.c1 COLLATE NOCASE);
SELECT ALL * FROM v0 INNER JOIN vt1 ON (((v0.c1 IN ()))==(((vt1.c1)<=(vt1.c0)))) WHERE (((v0.c1 COLLATE NOCASE)AND(((v0.c2) BETWEEN (v0.c2) AND (CAST(v0.c2 AS BLOB)))))) ORDER BY ((((((((((((1.654447368E9) NOTNULL))OR(CASE vt1.c1  WHEN '184893080' THEN v0.c0 ELSE vt1.c1 END)))OR((v0.c1 IN ()))))OR(vt1.c0)))AND('n6')))OR(((((((vt1.c0)OR(vt1.c0)))OR(v0.c0)))OR(vt1.c0)))) ASC;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c1);
SELECT * FROM v0, vt1 WHERE (vt1.c1) LIMIT 0X0;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c1);
SELECT * FROM v0, vt1 WHERE (vt1.c1) LIMIT 0X0;
SELECT * FROM v0 WHERE (SQLITE_COMPILEOPTION_GET(((((((v0.c0)AND(v0.c1)))AND(v0.c0)))OR('448962842'))));
SELECT ALL * FROM v0 WHERE (SQLITE_COMPILEOPTION_GET(((((((v0.c0)AND(v0.c1)))AND(v0.c0)))OR('448962842')))) ORDER BY (~ (CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)) DESC LIMIT 2;
SELECT * FROM v0 WHERE (SQLITE_COMPILEOPTION_GET(((((((v0.c0)AND(v0.c1)))AND(v0.c0)))OR('448962842'))));
SELECT ALL * FROM v0 WHERE (SQLITE_COMPILEOPTION_GET(((((((v0.c0)AND(v0.c1)))AND(v0.c0)))OR('448962842')))) ORDER BY (~ (CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)) DESC LIMIT 2;
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((((CASE vt1.c1  WHEN vt1.c1 THEN v0.c2 WHEN NULL THEN vt1.c1 WHEN v0.c2 THEN NULL WHEN vt1.c0 THEN v0.c2 ELSE vt1.c0 END)OR(json_object(v0.c0, v0.c0))))AND(NULL))) ORDER BY ((((((((((((vt1.c0)OR(vt1.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0)))|(CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 ELSE vt1.c0 END)) ASC  NULLS FIRST, (((vt1.c1)>>(v0.c1)) IN ())  NULLS FIRST;
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (((((((CASE vt1.c1  WHEN vt1.c1 THEN v0.c2 WHEN NULL THEN vt1.c1 WHEN v0.c2 THEN NULL WHEN vt1.c0 THEN v0.c2 ELSE vt1.c0 END)OR(json_object(v0.c0, v0.c0))))AND(NULL)))AND(COALESCE(DISTINCT ((v0.c2) NOTNULL), v0.c2)))) ORDER BY CAST(x'' AS REAL) DESC  NULLS LAST;
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((((CASE vt1.c1  WHEN vt1.c1 THEN v0.c2 WHEN NULL THEN vt1.c1 WHEN v0.c2 THEN NULL WHEN vt1.c0 THEN v0.c2 ELSE vt1.c0 END)OR(json_object(v0.c0, v0.c0))))AND(NULL))) ORDER BY ((((((((((((vt1.c0)OR(vt1.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0)))|(CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 ELSE vt1.c0 END)) ASC  NULLS FIRST, (((vt1.c1)>>(v0.c1)) IN ())  NULLS FIRST;
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE (((((vt1.c1)%(v0.c2)))IS NOT((- (v0.c0))))) ORDER BY NULLIF(json_array_length(v0.c2), ((vt1.c0)IS NOT(x''))), vt1.c0;
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE (((((vt1.c1)%(v0.c2)))IS NOT((- (v0.c0))))) ORDER BY NULLIF(json_array_length(v0.c2), ((vt1.c0)IS NOT(x''))), vt1.c0 INTERSECT SELECT MAX(vt1.c0) FROM v0, vt1 WHERE ((((((~ (v0.c2)))AND(vt1.c1)))OR((((((('-1432416200')OR(vt1.c1)))OR(vt1.c1)))OR(0.2705360498000535))))) ORDER BY NULLIF(json_array_length(v0.c2), ((vt1.c0)IS NOT(x''))), vt1.c0;
SELECT COUNT(*) FROM v0 WHERE (((v0.c1)*(CAST(v0.c2 AS BLOB))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c1)*(CAST(v0.c2 AS BLOB))))AND(v0.c1))) LIMIT 0X3;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (v0.c1) ORDER BY (v0.c0 IN ());
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((v0.c1)AND(((((v0.c1) ISNULL))<<(((v0.c1) IS TRUE)))))) ORDER BY ((CAST(0.216618835696054 AS BLOB)) BETWEEN (((v0.c0)OR(v0.c2))) AND (0.5083775568916675 COLLATE NOCASE)) ASC, ((v0.c1 IN (v0.c1, v0.c2)) IN ())  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (JULIANDAY((NOT (vt1.c0)), ((vt1.c0)>>(vt1.c0)), NULL, CAST(vt1.c0 AS BLOB), ((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)), CAST(x'' AS INTEGER))) ORDER BY CAST(x'e1c74b4d' AS INTEGER) ASC, ((((((((((((vt1.c1)!=(vt1.c1)))OR((vt1.c0 IN (vt1.c0, vt1.c1)))))AND(((vt1.c1) IS TRUE))))AND(((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))))AND((vt1.c0 IN ()))))AND(((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1)))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((JULIANDAY((NOT (vt1.c0)), ((vt1.c0)>>(vt1.c0)), NULL, CAST(vt1.c0 AS BLOB), ((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)), CAST(x'' AS INTEGER)))AND(((CAST(vt1.c0 AS NUMERIC)) BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (((((((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1))))))) ORDER BY ((vt1.c0)GLOB(CAST(vt1.c0 AS INTEGER))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((CASE vt1.c1  WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)*((('r6义o6m*O') NOTNULL))));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((CASE vt1.c1  WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)*((('r6义o6m*O') NOTNULL))))AND(CAST(((((((x'')AND(x'26')))AND(vt1.c0)))OR(v0.c1)) AS INTEGER)))) ORDER BY ((NULL)LIKE(((((((v0.c1)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))), v0.c1 DESC, ((GLOB(vt1.c1, vt1.c0))IS(CAST(vt1.c1 AS BLOB))) DESC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM v0, vt1 WHERE (CAST(vt1.c0 AS NUMERIC)) ORDER BY ((NULL)LIKE(((((((v0.c1)AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))), v0.c1 DESC, ((GLOB(vt1.c1, vt1.c0))IS(CAST(vt1.c1 AS BLOB))) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE (CHANGES()) ORDER BY ((LTRIM(v0.c0)) NOTNULL) DESC, (+ (LIKELIHOOD(v0.c1, v0.c2))) ASC;
SELECT COUNT(*) FROM v0 WHERE (((CHANGES())AND((((((v0.c2) NOTNULL), STRFTIME(v0.c0, v0.c0, v0.c1, v0.c2)))=(('0.17319563761750334', ((((((v0.c2)OR(v0.c1)))OR(v0.c0)))OR(v0.c2)))))))) ORDER BY ((LTRIM(v0.c0)) NOTNULL) DESC, (+ (LIKELIHOOD(v0.c1, v0.c2))) ASC;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((((~ (v0.c0)))>=(vt1.c1)));
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((((~ (v0.c0)))>=(vt1.c1)))AND(((0.7916990238361101) BETWEEN (vt1.c1 COLLATE RTRIM) AND (v0.c2 COLLATE BINARY))))) ORDER BY ((((((vt1.c1) NOT NULL))OR(((v0.c1)||(v0.c1)))))OR(CAST(v0.c1 AS TEXT))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (0.94141811698975) ORDER BY ((((((vt1.c1) NOT NULL))OR(((v0.c1)||(v0.c1)))))OR(CAST(v0.c1 AS TEXT)));
SELECT ALL MIN(vt1.c1) FROM vt1 NATURAL JOIN v0 WHERE ((((vt1.c1)) BETWEEN ((CAST(vt1.c0 AS TEXT))) AND ((((vt1.c1) IS TRUE))))) ORDER BY vt1.c1 DESC, (((vt1.c1)) BETWEEN ((((((v0.c0)OR(v0.c2)))OR(vt1.c0)))) AND (((((vt1.c0)) BETWEEN ((-3.26459721E8)) AND ((NULL)))))) DESC;
SELECT DISTINCT MIN(vt1.c1) FROM vt1 NATURAL JOIN v0 WHERE ((((vt1.c1)) BETWEEN ((CAST(vt1.c0 AS TEXT))) AND ((((vt1.c1) IS TRUE))))) ORDER BY vt1.c1 DESC, (((vt1.c1)) BETWEEN ((((((v0.c0)OR(v0.c2)))OR(vt1.c0)))) AND (((((vt1.c0)) BETWEEN ((-3.26459721E8)) AND ((NULL)))))) DESC;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER)) NOT BETWEEN (vt1.c1 COLLATE BINARY) AND ((vt1.c1 IN (vt1.c0, vt1.c1)))));
SELECT ALL * FROM vt1 WHERE (((((CAST(vt1.c0 AS INTEGER)) NOT BETWEEN (vt1.c1 COLLATE BINARY) AND ((vt1.c1 IN (vt1.c0, vt1.c1)))))AND((~ (vt1.c0)) COLLATE RTRIM))) ORDER BY ((((vt1.c0)AND(vt1.c0)))+((- (vt1.c0)))) DESC  NULLS LAST INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c1) NOTNULL))-(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1))))) ORDER BY ((((vt1.c0)AND(vt1.c0)))+((- (vt1.c0)))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER)) NOT BETWEEN (vt1.c1 COLLATE BINARY) AND ((vt1.c1 IN (vt1.c0, vt1.c1)))));
SELECT ALL * FROM vt1 WHERE (((((CAST(vt1.c0 AS INTEGER)) NOT BETWEEN (vt1.c1 COLLATE BINARY) AND ((vt1.c1 IN (vt1.c0, vt1.c1)))))AND((~ (vt1.c0)) COLLATE RTRIM))) ORDER BY ((((vt1.c0)AND(vt1.c0)))+((- (vt1.c0)))) DESC  NULLS LAST INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c1) NOTNULL))-(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1))))) ORDER BY ((((vt1.c0)AND(vt1.c0)))+((- (vt1.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND(((vt1.c1) NOTNULL)))) ORDER BY CASE WHEN 0.9542079935628944 THEN (+ (vt1.c0)) END DESC;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND(((vt1.c1) NOTNULL)))) ORDER BY CASE WHEN 0.9542079935628944 THEN (+ (vt1.c0)) END DESC;
SELECT ALL * FROM v0 WHERE (0.9968753404868614 COLLATE RTRIM) ORDER BY 0.07265324462029954 DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (0.9968753404868614 COLLATE RTRIM) ORDER BY v0.c0 LIMIT 1;
SELECT ALL * FROM v0 WHERE (0.9968753404868614 COLLATE RTRIM) ORDER BY 0.07265324462029954 DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (0.9968753404868614 COLLATE RTRIM) ORDER BY v0.c0 LIMIT 1;
SELECT ALL * FROM v0, vt1 WHERE (CAST(((v0.c0) NOTNULL) AS NUMERIC));
SELECT ALL * FROM v0, vt1 WHERE (((CAST(((v0.c0) NOTNULL) AS NUMERIC))AND(CAST(CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN vt1.c1 THEN vt1.c0 END AS TEXT))));
SELECT ALL * FROM v0, vt1 WHERE (CAST(((v0.c0) NOTNULL) AS NUMERIC));
SELECT ALL * FROM v0, vt1 WHERE (((CAST(((v0.c0) NOTNULL) AS NUMERIC))AND(CAST(CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN vt1.c1 THEN vt1.c0 END AS TEXT))));
SELECT COUNT(*) FROM vt1, v0 WHERE (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 END COLLATE RTRIM);
SELECT COUNT(*) FROM vt1, v0 WHERE (((CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 END COLLATE RTRIM)AND(LIKELIHOOD(((vt1.c0)!=(vt1.c0)), CAST(v0.c1 AS NUMERIC))))) LIMIT 0;
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (vt1.c0) ORDER BY CASE WHEN ((v0.c1) ISNULL) THEN vt1.c0 COLLATE NOCASE WHEN CASE WHEN vt1.c1 THEN x'7c' WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN '-1399993161' END THEN ((v0.c1) NOT NULL) END  NULLS FIRST, (~ ('迆*ov5pQLh')) DESC;
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (((vt1.c0)AND((NOT ((~ (vt1.c0))))))) ORDER BY CASE WHEN ((v0.c1) ISNULL) THEN vt1.c0 COLLATE NOCASE WHEN CASE WHEN vt1.c1 THEN x'7c' WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN '-1399993161' END THEN ((v0.c1) NOT NULL) END  NULLS FIRST, (~ ('迆*ov5pQLh')) DESC;
SELECT * FROM vt1, v0 WHERE (CAST(v0.c1 COLLATE BINARY AS BLOB)) ORDER BY CASE ((((((v0.c0)AND(v0.c1)))AND(vt1.c1)))AND(v0.c2))  WHEN ((v0.c0)>=(v0.c1)) THEN ((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c1)) END, (((vt1.c1)) NOT BETWEEN ((CAST(vt1.c0 AS REAL))) AND ((v0.c2 COLLATE RTRIM)))  NULLS LAST;
SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(v0.c1 COLLATE BINARY AS BLOB)) ORDER BY ((((v0.c0)OR(vt1.c1)))-((+ (vt1.c1))))  NULLS FIRST, ((CASE v0.c2  WHEN v0.c1 THEN '
Cp35e泹)4' WHEN vt1.c1 THEN v0.c1 END) BETWEEN ((((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND (CAST(vt1.c1 AS TEXT))) DESC  NULLS FIRST, '' ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c0) NOT BETWEEN (v0.c2) AND (vt1.c1)) COLLATE NOCASE) ORDER BY ((((v0.c0)OR(vt1.c1)))-((+ (vt1.c1))))  NULLS FIRST, ((CASE v0.c2  WHEN v0.c1 THEN '
Cp35e泹)4' WHEN vt1.c1 THEN v0.c1 END) BETWEEN ((((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND (CAST(vt1.c1 AS TEXT))) DESC  NULLS FIRST, '' ASC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (CAST(v0.c1 COLLATE BINARY AS BLOB)) ORDER BY CASE ((((((v0.c0)AND(v0.c1)))AND(vt1.c1)))AND(v0.c2))  WHEN ((v0.c0)>=(v0.c1)) THEN ((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c1)) END, (((vt1.c1)) NOT BETWEEN ((CAST(vt1.c0 AS REAL))) AND ((v0.c2 COLLATE RTRIM)))  NULLS LAST;
SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(v0.c1 COLLATE BINARY AS BLOB)) ORDER BY ((((v0.c0)OR(vt1.c1)))-((+ (vt1.c1))))  NULLS FIRST, ((CASE v0.c2  WHEN v0.c1 THEN '
Cp35e泹)4' WHEN vt1.c1 THEN v0.c1 END) BETWEEN ((((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND (CAST(vt1.c1 AS TEXT))) DESC  NULLS FIRST, '' ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c0) NOT BETWEEN (v0.c2) AND (vt1.c1)) COLLATE NOCASE) ORDER BY ((((v0.c0)OR(vt1.c1)))-((+ (vt1.c1))))  NULLS FIRST, ((CASE v0.c2  WHEN v0.c1 THEN '
Cp35e泹)4' WHEN vt1.c1 THEN v0.c1 END) BETWEEN ((((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND (CAST(vt1.c1 AS TEXT))) DESC  NULLS FIRST, '' ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((((((((((((v0.c1)OR(x'ec3570')))AND(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(((v0.c1)<>(v0.c0)))))AND(CAST(v0.c2 AS NUMERIC)))) ORDER BY (((v0.c2, v0.c2, v0.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), ((((((v0.c1)OR(v0.c0)))AND(v0.c1)))OR('-1408369210')), ((v0.c0) BETWEEN (x'') AND (v0.c0)))) AND ((0X69753f5b, NULL, (((v0.c2))==((v0.c1)))))) ASC  NULLS FIRST;
SELECT * FROM v0 WHERE (((((((((((((((((v0.c1)OR(x'ec3570')))AND(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(((v0.c1)<>(v0.c0)))))AND(CAST(v0.c2 AS NUMERIC))))AND((((0.05704509590202955, ((v0.c2)/(v0.c1))))<((CAST(v0.c0 AS NUMERIC), ((v0.c2) ISNULL))))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))>>(v0.c2)) DESC, v0.c0 ASC  NULLS FIRST LIMIT 0;
SELECT * FROM v0 WHERE (((((((((((((((v0.c1)OR(x'ec3570')))AND(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(((v0.c1)<>(v0.c0)))))AND(CAST(v0.c2 AS NUMERIC)))) ORDER BY (((v0.c2, v0.c2, v0.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), ((((((v0.c1)OR(v0.c0)))AND(v0.c1)))OR('-1408369210')), ((v0.c0) BETWEEN (x'') AND (v0.c0)))) AND ((0X69753f5b, NULL, (((v0.c2))==((v0.c1)))))) ASC  NULLS FIRST;
SELECT * FROM v0 WHERE (((((((((((((((((v0.c1)OR(x'ec3570')))AND(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(((v0.c1)<>(v0.c0)))))AND(CAST(v0.c2 AS NUMERIC))))AND((((0.05704509590202955, ((v0.c2)/(v0.c1))))<((CAST(v0.c0 AS NUMERIC), ((v0.c2) ISNULL))))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))>>(v0.c2)) DESC, v0.c0 ASC  NULLS FIRST LIMIT 0;
SELECT COUNT(*) FROM v0 WHERE ((~ (v0.c0 COLLATE NOCASE)));
SELECT ALL COUNT(*) FROM v0 WHERE ((((~ (v0.c0 COLLATE NOCASE)))AND(((((((-6.40489221E8)AND(v0.c0)))OR(0.49802788431886846))) IS FALSE)))) LIMIT 2 INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c0)&((((v0.c0))>((v0.c1)))))) LIMIT 2;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((((v0.c0, vt1.c1)) BETWEEN ((((((v0.c2)AND(v0.c0)))OR(v0.c2)), x'')) AND ((((vt1.c1) BETWEEN (v0.c1) AND (vt1.c1)), vt1.c1 COLLATE BINARY)))) ORDER BY (((vt1.c0)) BETWEEN ((CASE v0.c1  WHEN NULL THEN v0.c2 ELSE vt1.c1 END)) AND ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))));
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((v0.c0, vt1.c1)) BETWEEN ((((((v0.c2)AND(v0.c0)))OR(v0.c2)), x'')) AND ((((vt1.c1) BETWEEN (v0.c1) AND (vt1.c1)), vt1.c1 COLLATE BINARY)))) ORDER BY ((NULL)|(((v0.c0) BETWEEN (vt1.c1) AND (0X4d7c8cd6)))) LIMIT 0X4;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (((((v0.c0) BETWEEN (v0.c0) AND (NULL))) IS TRUE));
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((((v0.c0) BETWEEN (v0.c0) AND (NULL))) IS TRUE)) ORDER BY 0.993288821776322 LIMIT 1 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE ((((+ (v0.c1)))-(CAST(v0.c2 AS NUMERIC)))) ORDER BY 0.993288821776322 LIMIT 1;
SELECT ALL MAX(v0.c0) FROM v0, vt1 WHERE (((((((((vt1.c1) IS TRUE))OR(((((v0.c2)AND(v0.c0)))OR(1468832677)))))AND(CASE WHEN v0.c1 THEN v0.c0 END)))AND((((vt1.c1, v0.c0))>((v0.c2, v0.c1)))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0))) ISNULL) DESC  NULLS FIRST, CASE WHEN ((vt1.c1)*(vt1.c0)) THEN CASE vt1.c0  WHEN v0.c1 THEN vt1.c1 ELSE vt1.c0 END WHEN (v0.c1 IN (vt1.c0)) THEN ((v0.c2)IS NOT(v0.c0)) WHEN CAST(v0.c1 AS BLOB) THEN ((((((v0.c2)OR(v0.c0)))OR('Oᒍ [j{n')))OR(v0.c1)) END ASC;
SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE (((((((((((vt1.c1) IS TRUE))OR(((((v0.c2)AND(v0.c0)))OR(1468832677)))))AND(CASE WHEN v0.c1 THEN v0.c0 END)))AND((((vt1.c1, v0.c0))>((v0.c2, v0.c1))))))AND((~ (((x'4d')<(vt1.c0))))))) ORDER BY '' DESC, (((((vt1.c0, v0.c0))<((vt1.c0, vt1.c0))))LIKE(NULLIF(v0.c0, v0.c0))) DESC, NULL ASC LIMIT 0X0;
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE (CASE WHEN ((v0.c2) BETWEEN (v0.c2) AND (v0.c1)) THEN (v0.c2 IN ()) WHEN vt1.c0 THEN (vt1.c1 IN (v0.c2, NULL, v0.c1)) ELSE CASE WHEN vt1.c1 THEN v0.c0 WHEN v0.c2 THEN x'93' WHEN vt1.c0 THEN vt1.c0 END END);
SELECT DISTINCT MAX(vt1.c0) FROM v0, vt1 WHERE (CASE WHEN ((v0.c2) BETWEEN (v0.c2) AND (v0.c1)) THEN (v0.c2 IN ()) WHEN vt1.c0 THEN (vt1.c1 IN (v0.c2, NULL)) ELSE CASE WHEN vt1.c1 THEN v0.c0 WHEN v0.c2 THEN x'93' WHEN vt1.c0 THEN vt1.c0 END END) LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM v0, vt1 WHERE ((NOT (((vt1.c1) IS TRUE)))) LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE ((((((((vt1.c1)AND(v0.c2)))OR(v0.c2)))OR(vt1.c1)) IN (CASE v0.c0  WHEN v0.c2 THEN v0.c0 END)));
SELECT ALL * FROM v0, vt1 WHERE ((((((((vt1.c1)AND(v0.c2)))OR(v0.c2)))OR(vt1.c1)) IN (CASE v0.c0  WHEN v0.c2 THEN v0.c0 END))) LIMIT 2;
SELECT * FROM v0, vt1 WHERE ((((((((vt1.c1)AND(v0.c2)))OR(v0.c2)))OR(vt1.c1)) IN (CASE v0.c0  WHEN v0.c2 THEN v0.c0 END)));
SELECT ALL * FROM v0, vt1 WHERE ((((((((vt1.c1)AND(v0.c2)))OR(v0.c2)))OR(vt1.c1)) IN (CASE v0.c0  WHEN v0.c2 THEN v0.c0 END))) LIMIT 2;
SELECT MAX(v0.c1) FROM vt1, v0 WHERE ((vt1.c1 IN (vt1.c1, x'85c1')) COLLATE NOCASE) ORDER BY (((NULL, v0.c1)) NOT BETWEEN (((((vt1.c0)) BETWEEN ((vt1.c0)) AND ((v0.c0))), CAST(0.09236260169341426 AS REAL))) AND ((((v0.c1)-(vt1.c0)), vt1.c0 COLLATE BINARY))), (((v0.c2)*(v0.c1)) IN (((vt1.c0)>(v0.c1)))) DESC  NULLS LAST;
SELECT MAX(v0.c1) FROM vt1, v0 WHERE ((((vt1.c1 IN (vt1.c1, x'85c1')) COLLATE NOCASE)AND(CAST(CASE WHEN v0.c0 THEN vt1.c1 WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN vt1.c1 ELSE v0.c1 END AS INTEGER)))) ORDER BY (NOT ((+ (v0.c0)))) ASC  NULLS LAST, (~ (((('_詳', v0.c0, '粭f9&#*')) BETWEEN ((v0.c1, 0.040883887950072806, vt1.c1)) AND ((vt1.c1, v0.c2, v0.c1))))) INTERSECT SELECT MAX(v0.c1) FROM vt1, v0 WHERE ((((v0.c0)) NOT BETWEEN (((((v0.c0))<>((v0.c2))))) AND ((CASE v0.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END)))) ORDER BY (NOT ((+ (v0.c0)))) ASC  NULLS LAST, (~ (((('_詳', v0.c0, '粭f9&#*')) BETWEEN ((v0.c1, 0.040883887950072806, vt1.c1)) AND ((vt1.c1, v0.c2, v0.c1)))));
SELECT MAX(vt1.c1) FROM v0, vt1 WHERE (vt1.c1) ORDER BY ((((((((((v0.c0) ISNULL))OR(CAST(v0.c1 AS NUMERIC))))OR(((vt1.c1)IS(vt1.c1)))))AND(CAST(vt1.c0 AS TEXT))))AND(x'1271855c'))  NULLS LAST;
SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (((vt1.c1)AND(((v0.c1 COLLATE NOCASE)<<(vt1.c1))))) ORDER BY CASE WHEN (NOT (x'')) THEN (vt1.c1 IN ()) END DESC, (- (NULL)), (~ (v0.c1)) DESC, CAST(((v0.c2)<=(v0.c2)) AS REAL)  NULLS FIRST, (((vt1.c0) IS TRUE) IN (DATETIME(0.8306569931940984, v0.c2, v0.c2), 'c]'));
SELECT ALL * FROM vt1 WHERE ((((vt1.c1, vt1.c0, vt1.c0, vt1.c1, vt1.c0)) BETWEEN ((TRIM(vt1.c1), (+ (vt1.c0)), vt1.c0 COLLATE NOCASE, TRIM(DISTINCT vt1.c1), vt1.c0)) AND ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)), SQLITE_SOURCE_ID(), CASE 0.304619728784011  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END, CAST(vt1.c0 AS REAL), ((vt1.c1)LIKE(vt1.c1))))));
SELECT * FROM vt1 WHERE ((((((vt1.c1, vt1.c0, vt1.c0, vt1.c1, vt1.c0)) BETWEEN ((TRIM(vt1.c1), (+ (vt1.c0)), vt1.c0 COLLATE NOCASE, TRIM(DISTINCT vt1.c1), vt1.c0)) AND ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)), SQLITE_SOURCE_ID(), CASE 0.304619728784011  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END, CAST(vt1.c0 AS REAL), ((vt1.c1)LIKE(vt1.c1))))))AND((~ ((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c1, vt1.c0, vt1.c0, vt1.c1, vt1.c0)) BETWEEN ((TRIM(vt1.c1), (+ (vt1.c0)), vt1.c0 COLLATE NOCASE, TRIM(DISTINCT vt1.c1), vt1.c0)) AND ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)), SQLITE_SOURCE_ID(), CASE 0.304619728784011  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END, CAST(vt1.c0 AS REAL), ((vt1.c1)LIKE(vt1.c1))))));
SELECT * FROM vt1 WHERE ((((((vt1.c1, vt1.c0, vt1.c0, vt1.c1, vt1.c0)) BETWEEN ((TRIM(vt1.c1), (+ (vt1.c0)), vt1.c0 COLLATE NOCASE, TRIM(DISTINCT vt1.c1), vt1.c0)) AND ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)), SQLITE_SOURCE_ID(), CASE 0.304619728784011  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END, CAST(vt1.c0 AS REAL), ((vt1.c1)LIKE(vt1.c1))))))AND((~ ((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0))))))));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN ((vt1.c1)GLOB('')) THEN ROUND(vt1.c1, vt1.c1) ELSE ((vt1.c1)-(vt1.c0)) END) ORDER BY x'', ((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0))) NOTNULL), CASE WHEN vt1.c0 THEN 0.3904849307802072 WHEN (~ (vt1.c1)) THEN ((NULL)GLOB(vt1.c0)) WHEN (((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c1))) THEN ((vt1.c0)IS NOT('jp')) ELSE ((vt1.c1) IS FALSE) END  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN ((vt1.c1)GLOB('')) THEN ROUND(vt1.c1, vt1.c1) ELSE ((vt1.c1)-(vt1.c0)) END) ORDER BY (- (((vt1.c1) BETWEEN (vt1.c1) AND (0.5547553183512448)))) DESC  NULLS LAST, (+ ((((vt1.c1, vt1.c1, vt1.c0)) BETWEEN ((vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c1, NULL, vt1.c1)))))  NULLS LAST, (((vt1.c0 COLLATE BINARY))<((CAST(vt1.c1 AS NUMERIC)))) LIMIT 0X0;
SELECT * FROM v0 WHERE ((NOT ((((NULL, v0.c1)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, 0.013565574429100669))))));
SELECT ALL * FROM v0 WHERE ((((NOT ((((NULL, v0.c1)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, 0.013565574429100669))))))AND(((((((v0.c2)|(v0.c0)))OR((v0.c1 IN (v0.c2, v0.c0, v0.c2)))))OR(((v0.c2)/(v0.c0))))))) ORDER BY (((v0.c2, v0.c0)) BETWEEN ((((0.410043856334642) NOT NULL), CASE WHEN v0.c1 THEN v0.c0 WHEN -1.017404822E9 THEN v0.c0 ELSE v0.c1 END)) AND (((- (v0.c1)), CAST(v0.c2 AS NUMERIC)))) ASC, 0.1274877022976164 COLLATE NOCASE DESC  NULLS LAST, (CASE WHEN 0.8236552753849465 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN 0Xffffffff8ffef41d THEN v0.c0 ELSE v0.c2 END IN (v0.c0 COLLATE BINARY)) DESC;
SELECT * FROM v0 WHERE ((NOT ((((NULL, v0.c1)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, 0.013565574429100669))))));
SELECT ALL * FROM v0 WHERE ((((NOT ((((NULL, v0.c1)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, 0.013565574429100669))))))AND(((((((v0.c2)|(v0.c0)))OR((v0.c1 IN (v0.c2, v0.c0, v0.c2)))))OR(((v0.c2)/(v0.c0))))))) ORDER BY (((v0.c2, v0.c0)) BETWEEN ((((0.410043856334642) NOT NULL), CASE WHEN v0.c1 THEN v0.c0 WHEN -1.017404822E9 THEN v0.c0 ELSE v0.c1 END)) AND (((- (v0.c1)), CAST(v0.c2 AS NUMERIC)))) ASC, 0.1274877022976164 COLLATE NOCASE DESC  NULLS LAST, (CASE WHEN 0.8236552753849465 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN 0Xffffffff8ffef41d THEN v0.c0 ELSE v0.c2 END IN (v0.c0 COLLATE BINARY)) DESC;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)+(vt1.c1)))>=((((vt1.c0, vt1.c1, vt1.c0, vt1.c1, NULL, vt1.c0, vt1.c0))<((vt1.c1, vt1.c0, vt1.c0, vt1.c1, vt1.c0, vt1.c0, vt1.c1)))))) ORDER BY ((((vt1.c1)IS(vt1.c1))) IS TRUE)  NULLS FIRST, (CAST(vt1.c0 AS TEXT) IN (((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))) DESC  NULLS FIRST, (((+ (vt1.c1)))IS NOT(((vt1.c0) BETWEEN ('54%%Z趜#	J') AND (vt1.c0)))) ASC  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)+(vt1.c1)))>=((((vt1.c0, vt1.c1, vt1.c0, vt1.c1, NULL, vt1.c0, vt1.c0))<((vt1.c1, vt1.c0, vt1.c0, vt1.c1, vt1.c0, vt1.c0, vt1.c1)))))) ORDER BY ((((vt1.c1)IS(vt1.c1))) IS TRUE)  NULLS FIRST, (CAST(vt1.c0 AS TEXT) IN (((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))) DESC  NULLS FIRST, (((+ (vt1.c1)))IS NOT(((vt1.c0) BETWEEN ('54%%Z趜#	J') AND (vt1.c0)))) ASC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((((((vt1.c0)+(v0.c2))))<=((CAST(v0.c2 AS BLOB))))) ORDER BY ((((CAST(vt1.c0 AS REAL))AND(SQLITE_COMPILEOPTION_USED(v0.c1))))OR(((vt1.c1) NOTNULL))) ASC  NULLS LAST, (((((((((((v0.c2))<>((v0.c2))))AND(((v0.c1)+(v0.c1)))))OR((v0.c0 IN (vt1.c1)))))OR((((v0.c1, x'79')) NOT BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c1, v0.c0))))))AND((v0.c0 IN ()))) ASC, v0.c1 DESC;
SELECT ALL * FROM vt1, v0 WHERE ((((((vt1.c0)+(v0.c2))))<=((CAST(v0.c2 AS BLOB))))) ORDER BY ((((CAST(vt1.c0 AS REAL))AND(SQLITE_COMPILEOPTION_USED(v0.c1))))OR(((vt1.c1) NOTNULL))) ASC  NULLS LAST, (((((((((((v0.c2))!=((v0.c2))))AND(((v0.c1)+(v0.c1)))))OR((v0.c0 IN (vt1.c1)))))OR((((v0.c1, x'79')) NOT BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c1, v0.c0))))))AND((v0.c0 IN ()))) ASC, v0.c1 DESC LIMIT 0X0 INTERSECT SELECT * FROM vt1, v0 WHERE (((((((vt1.c1)GLOB(vt1.c1)))AND(((vt1.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(v0.c2 COLLATE NOCASE))) ORDER BY ((((CAST(vt1.c0 AS REAL))AND(SQLITE_COMPILEOPTION_USED(v0.c1))))OR(((vt1.c1) NOTNULL))) ASC  NULLS LAST, (((((((((((v0.c2))!=((v0.c2))))AND(((v0.c1)+(v0.c1)))))OR((v0.c0 IN (vt1.c1)))))OR((((v0.c1, x'79')) NOT BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c1, v0.c0))))))AND((v0.c0 IN ()))) ASC, v0.c1 DESC LIMIT 0;
SELECT * FROM vt1, v0 WHERE ((((((vt1.c0)+(v0.c2))))<=((CAST(v0.c2 AS BLOB))))) ORDER BY ((((CAST(vt1.c0 AS REAL))AND(SQLITE_COMPILEOPTION_USED(v0.c1))))OR(((vt1.c1) NOTNULL))) ASC  NULLS LAST, (((((((((((v0.c2))<>((v0.c2))))AND(((v0.c1)+(v0.c1)))))OR((v0.c0 IN (vt1.c1)))))OR((((v0.c1, x'79')) NOT BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c1, v0.c0))))))AND((v0.c0 IN ()))) ASC, v0.c1 DESC;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN '~,n맟s9~' END)<<(v0.c0))) ORDER BY ((('0.8392803826547917')+(vt1.c1)) IN (CAST(v0.c2 AS BLOB))), ((CAST(v0.c2 AS INTEGER))IS NOT(x'')) DESC;
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN '~,n맟s9~' END)<<(v0.c0)))AND(((((v0.c2)<=(vt1.c0))) NOT BETWEEN (NULL COLLATE BINARY) AND (((v0.c2)GLOB('194403353'))))))) ORDER BY ((('0.8392803826547917')+(vt1.c1)) IN (CAST(v0.c2 AS BLOB))), ((CAST(v0.c2 AS INTEGER))IS NOT(x'')) DESC INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (LTRIM((((vt1.c0))>=((vt1.c0))))) ORDER BY ((('0.8392803826547917')+(vt1.c1)) IN (CAST(v0.c2 AS BLOB))), ((CAST(v0.c2 AS INTEGER))IS NOT(x'')) DESC;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN '~,n맟s9~' END)<<(v0.c0))) ORDER BY ((('0.8392803826547917')+(vt1.c1)) IN (CAST(v0.c2 AS BLOB))), ((CAST(v0.c2 AS INTEGER))IS NOT(x'')) DESC;
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN '~,n맟s9~' END)<<(v0.c0)))AND(((((v0.c2)<=(vt1.c0))) NOT BETWEEN (NULL COLLATE BINARY) AND (((v0.c2)GLOB('194403353'))))))) ORDER BY ((('0.8392803826547917')+(vt1.c1)) IN (CAST(v0.c2 AS BLOB))), ((CAST(v0.c2 AS INTEGER))IS NOT(x'')) DESC INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (LTRIM((((vt1.c0))>=((vt1.c0))))) ORDER BY ((('0.8392803826547917')+(vt1.c1)) IN (CAST(v0.c2 AS BLOB))), ((CAST(v0.c2 AS INTEGER))IS NOT(x'')) DESC;
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (((vt1.c0)=(v0.c2)) COLLATE NOCASE) ORDER BY ((((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c0)))OR(((v0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND((NOT (v0.c2)))) ASC  NULLS LAST, ((NULL)LIKE(v0.c0));
SELECT DISTINCT MIN(vt1.c1) FROM v0, vt1 WHERE (((((vt1.c0)==(v0.c2)) COLLATE NOCASE)AND(((((v0.c0) NOT NULL)) IS FALSE)))) ORDER BY LIKELIHOOD((- (0X67188adf)), ((vt1.c0) NOT BETWEEN (vt1.c1) AND (v0.c0))) ASC  NULLS LAST, ((((((((NULL)OR(vt1.c1)))AND(v0.c1)))OR(((vt1.c0) BETWEEN (vt1.c1) AND (v0.c2)))))AND(((vt1.c0) BETWEEN (x'') AND (v0.c0)))) DESC, ((((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c1))) NOT BETWEEN (v0.c1) AND (CASE v0.c2  WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 ELSE v0.c2 END));
SELECT * FROM v0, vt1 WHERE (CAST(v0.c1 COLLATE RTRIM AS INTEGER)) ORDER BY (((vt1.c1) NOT NULL) IN (NULL)), ((((((vt1.c0)AND(vt1.c1)))AND(v0.c1))) BETWEEN (((((((((((v0.c0)OR(0.9079857999125378)))AND(vt1.c1)))OR(vt1.c0)))AND(v0.c0)))OR(v0.c1))) AND (CAST(',/u饾7^녃	' AS REAL)))  NULLS LAST, ((+ ('1499958155')) IN (UPPER(v0.c0))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST(v0.c1 COLLATE RTRIM AS INTEGER))AND((((('-1083686519')<(vt1.c1)))&(((vt1.c0)IS(vt1.c0))))))) ORDER BY '0.8310715250168766'  NULLS LAST, CAST(((v0.c1)<<(v0.c1)) AS REAL) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((('-1078560265' IN ()) IN ())) ORDER BY '0.8310715250168766'  NULLS LAST, CAST(((v0.c1)<<(v0.c1)) AS REAL) ASC  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt1 WHERE (CAST(v0.c1 COLLATE RTRIM AS INTEGER)) ORDER BY (((vt1.c1) NOT NULL) IN (NULL)), ((((((vt1.c0)AND(vt1.c1)))AND(v0.c1))) BETWEEN (((((((((((v0.c0)OR(0.9079857999125378)))AND(vt1.c1)))OR(vt1.c0)))AND(v0.c0)))OR(v0.c1))) AND (CAST(',/u饾7^녃	' AS REAL)))  NULLS LAST, ((+ ('1499958155')) IN (UPPER(v0.c0))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST(v0.c1 COLLATE RTRIM AS INTEGER))AND((((('-1083686519')<(vt1.c1)))&(((vt1.c0)IS(vt1.c0))))))) ORDER BY '0.8310715250168766'  NULLS LAST, CAST(((v0.c1)<<(v0.c1)) AS REAL) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((('-1078560265' IN ()) IN ())) ORDER BY '0.8310715250168766'  NULLS LAST, CAST(((v0.c1)<<(v0.c1)) AS REAL) ASC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0)AND(vt1.c0))) IS TRUE));
SELECT COUNT(*) FROM vt1 WHERE (((((vt1.c0)AND(vt1.c0))) IS TRUE)) ORDER BY CASE WHEN (~ (vt1.c0)) THEN (NOT (vt1.c1)) END ASC INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE ((+ (CAST(0.32319484117295705 AS REAL)))) ORDER BY CASE WHEN (~ (vt1.c0)) THEN (NOT (vt1.c1)) END ASC;
SELECT * FROM v0 WHERE ((((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c2))) COLLATE RTRIM) ORDER BY ((((((((((v0.c1)<<(v0.c1)))AND(((((((((v0.c2)AND(v0.c2)))OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))))AND(((v0.c2) IS FALSE))))OR(((v0.c1)IS(v0.c1)))))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)) ASC, NULL  NULLS LAST;
SELECT * FROM v0 WHERE ((((((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c2))) COLLATE RTRIM)AND(CAST(v0.c1 AS NUMERIC)))) ORDER BY ((((((((((v0.c1)<<(v0.c1)))AND(((((((((v0.c2)AND(v0.c2)))OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))))AND(((v0.c2) IS FALSE))))OR(((v0.c1)IS(v0.c1)))))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)) ASC, NULL  NULLS LAST;
SELECT * FROM v0 WHERE ((((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c2))) COLLATE RTRIM) ORDER BY ((((((((((v0.c1)<<(v0.c1)))AND(((((((((v0.c2)AND(v0.c2)))OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))))AND(((v0.c2) IS FALSE))))OR(((v0.c1)IS(v0.c1)))))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)) ASC, NULL  NULLS LAST;
SELECT * FROM v0 WHERE ((((((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c2))) COLLATE RTRIM)AND(CAST(v0.c1 AS NUMERIC)))) ORDER BY ((((((((((v0.c1)<<(v0.c1)))AND(((((((((v0.c2)AND(v0.c2)))OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))))AND(((v0.c2) IS FALSE))))OR(((v0.c1)IS(v0.c1)))))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)) ASC, NULL  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c2) IS FALSE)) IS FALSE)) ORDER BY (((v0.c1, v0.c1, '305180856', v0.c0, v0.c2)) NOT BETWEEN (((((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c0))), (((v0.c2, v0.c0, v0.c2, v0.c2)) BETWEEN ((v0.c2, v0.c0, v0.c2, v0.c0)) AND ((v0.c0, v0.c1, v0.c1, v0.c1))), ((v0.c1)<>(v0.c2)), CASE v0.c0  WHEN v0.c1 THEN v0.c2 END, NULL)) AND ((((v0.c2) BETWEEN (v0.c0) AND (NULL)), ('6' IN ()), ((v0.c2) BETWEEN (v0.c1) AND (v0.c0)), v0.c0 COLLATE NOCASE, v0.c2))), (json_array(v0.c1, v0.c0, v0.c0) IN ());
SELECT ALL * FROM v0 WHERE (((((((v0.c2) IS FALSE)) IS FALSE))AND(((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c1))) IN ())))) ORDER BY NULL COLLATE RTRIM ASC LIMIT 0x1 INTERSECT SELECT * FROM v0 WHERE (v0.c2 COLLATE NOCASE) ORDER BY NULL COLLATE RTRIM ASC LIMIT 1;
SELECT ALL * FROM v0 WHERE (((((v0.c2) IS FALSE)) IS FALSE)) ORDER BY (((v0.c1, v0.c1, '305180856', v0.c0, v0.c2)) NOT BETWEEN (((((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c0))), (((v0.c2, v0.c0, v0.c2, v0.c2)) BETWEEN ((v0.c2, v0.c0, v0.c2, v0.c0)) AND ((v0.c0, v0.c1, v0.c1, v0.c1))), ((v0.c1)<>(v0.c2)), CASE v0.c0  WHEN v0.c1 THEN v0.c2 END, NULL)) AND ((((v0.c2) BETWEEN (v0.c0) AND (NULL)), ('6' IN ()), ((v0.c2) BETWEEN (v0.c1) AND (v0.c0)), v0.c0 COLLATE NOCASE, v0.c2))), (json_array(v0.c1, v0.c0, v0.c0) IN ());
SELECT MAX(v0.c2) FROM v0, vt1 WHERE (CASE ((((vt1.c1)AND(v0.c1)))OR(vt1.c0))  WHEN ((v0.c2) IS TRUE) THEN ((((((v0.c0)AND(v0.c0)))AND(vt1.c1)))AND(v0.c1)) END) ORDER BY vt1.c1  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE (((CASE ((((vt1.c1)AND(v0.c1)))OR(vt1.c0))  WHEN ((v0.c2) IS TRUE) THEN ((((((v0.c0)AND(v0.c0)))AND(vt1.c1)))AND(v0.c1)) END)AND(((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN v0.c0 THEN vt1.c1 END)<((~ (v0.c0))))))) ORDER BY (v0.c2 IN (vt1.c1)) COLLATE BINARY, (CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c1 ELSE x'16' END IN ()) ASC  NULLS LAST, ((((v0.c2) NOTNULL))!=((v0.c1 IN ()))) ASC  NULLS LAST LIMIT 0X0;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((vt1.c1) NOTNULL));
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((((vt1.c1) NOTNULL))AND((((vt1.c0 IN (vt1.c0)))/(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 END)))));
SELECT ALL * FROM v0 WHERE (ABS(((v0.c0)*(v0.c1)))) ORDER BY CASE WHEN CAST(v0.c0 AS TEXT) THEN ((((v0.c2)AND(v0.c0)))OR(v0.c1)) WHEN CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) ELSE CAST(v0.c2 AS TEXT) END  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (ABS(((v0.c0)*(v0.c1)))) ORDER BY CASE WHEN CAST(v0.c0 AS TEXT) THEN ((((v0.c2)AND(v0.c0)))OR(v0.c1)) WHEN CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) ELSE CAST(v0.c2 AS TEXT) END  NULLS LAST;
SELECT ALL * FROM v0 WHERE (ABS(((v0.c0)*(v0.c1)))) ORDER BY CASE WHEN CAST(v0.c0 AS TEXT) THEN ((((v0.c2)AND(v0.c0)))OR(v0.c1)) WHEN CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) ELSE CAST(v0.c2 AS TEXT) END  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (ABS(((v0.c0)*(v0.c1)))) ORDER BY CASE WHEN CAST(v0.c0 AS TEXT) THEN ((((v0.c2)AND(v0.c0)))OR(v0.c1)) WHEN CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) ELSE CAST(v0.c2 AS TEXT) END  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((LIKELY(vt1.c1))OR(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 END))) ORDER BY ((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c1))) IN ((((vt1.c0))>=((vt1.c0)))))  NULLS FIRST, ((((vt1.c1) NOT BETWEEN ('<h') AND (vt1.c0)))>=(((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))) DESC;
SELECT ALL * FROM vt1 WHERE (((((LIKELY(vt1.c1))OR(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 END)))AND(x'8a'))) ORDER BY (((NULL, vt1.c1)) NOT BETWEEN ((CAST(vt1.c1 AS BLOB), CAST(vt1.c0 AS BLOB))) AND ((((((((vt1.c0)OR(vt1.c0)))AND(0.3779866865540582)))AND(vt1.c1)), (vt1.c0 IN (0.5196440056712004))))) ASC  NULLS FIRST, (vt1.c1 IN ('', TOTAL_CHANGES())) ASC  NULLS LAST, ((((vt1.c1)>>(vt1.c1))) NOT BETWEEN (vt1.c0) AND ('Kg'));
SELECT ALL * FROM vt1 WHERE (((LIKELY(vt1.c1))OR(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 END))) ORDER BY ((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c1))) IN ((((vt1.c0))>=((vt1.c0)))))  NULLS FIRST, ((((vt1.c1) NOT BETWEEN ('<h') AND (vt1.c0)))>=(((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))) DESC;
SELECT ALL * FROM vt1 WHERE (((((LIKELY(vt1.c1))OR(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 END)))AND(x'8a'))) ORDER BY (((NULL, vt1.c1)) NOT BETWEEN ((CAST(vt1.c1 AS BLOB), CAST(vt1.c0 AS BLOB))) AND ((((((((vt1.c0)OR(vt1.c0)))AND(0.3779866865540582)))AND(vt1.c1)), (vt1.c0 IN (0.5196440056712004))))) ASC  NULLS FIRST, (vt1.c1 IN ('', TOTAL_CHANGES())) ASC  NULLS LAST, ((((vt1.c1)>>(vt1.c1))) NOT BETWEEN (vt1.c0) AND ('Kg'));
SELECT ALL * FROM v0, vt1 WHERE (vt1.c0);
SELECT ALL * FROM v0, vt1 WHERE (((vt1.c0)AND((((vt1.c1)) BETWEEN ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c2)))) AND ((CAST(v0.c1 AS REAL))))))) ORDER BY NULLIF((v0.c1 IN (vt1.c0)), ((vt1.c1)IS NOT(v0.c0))) DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c0);
SELECT ALL * FROM v0, vt1 WHERE (((vt1.c0)AND((((vt1.c1)) BETWEEN ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c2)))) AND ((CAST(v0.c1 AS REAL))))))) ORDER BY NULLIF((v0.c1 IN (vt1.c0)), ((vt1.c1)IS NOT(v0.c0))) DESC  NULLS FIRST LIMIT 2;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((((vt1.c1, '1409977447', v0.c2, vt1.c0)) BETWEEN (((vt1.c1 IN (x'')), HEX(DISTINCT v0.c1), (((vt1.c0, vt1.c1, v0.c0, v0.c0))<((v0.c1, vt1.c0, '', vt1.c1))), ((v0.c2)IS(v0.c1)))) AND ((((((((v0.c0)OR(vt1.c0)))OR(v0.c0)))OR(v0.c0)), CASE WHEN v0.c0 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN v0.c0 ELSE v0.c0 END, 'hTVy', '1269145269'))));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((((((vt1.c1, '1409977447', v0.c2, vt1.c0)) BETWEEN (((vt1.c1 IN (x'')), HEX(DISTINCT v0.c1), (((vt1.c0, vt1.c1, v0.c0, v0.c0))<((v0.c1, vt1.c0, '', vt1.c1))), ((v0.c2)IS(v0.c1)))) AND ((((((((v0.c0)OR(vt1.c0)))OR(v0.c0)))OR(v0.c0)), CASE WHEN v0.c0 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN v0.c0 ELSE v0.c0 END, 'hTVy', '1269145269'))))AND(((((((((((((vt1.c1)+(vt1.c1)))AND(LENGTH(vt1.c0))))AND(((v0.c1)IS NOT(x'14')))))OR(((v0.c1) BETWEEN (0.7291417974009008) AND (vt1.c0)))))OR(((v0.c1) ISNULL))))AND(CAST(v0.c0 AS INTEGER)))))) ORDER BY ((vt1.c0) ISNULL) ASC  NULLS FIRST, v0.c2 DESC LIMIT 0X1;
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (((CASE v0.c1  WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 WHEN 0xffffffff9bc05de1 THEN v0.c2 ELSE 0xfffffffff5cb12c9 END)*(TYPEOF(DISTINCT v0.c2))));
SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE (((CASE v0.c1  WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 WHEN 0xffffffff9bc05de1 THEN v0.c2 ELSE -171240759 END)*(TYPEOF(DISTINCT v0.c2)))) ORDER BY ((((((v0.c1)OR(CAST(vt1.c1 AS BLOB))))AND((((v0.c0, v0.c1)) NOT BETWEEN (('0.705285612693276', v0.c1)) AND ((0.6508770655927488, v0.c2))))))OR(v0.c0)), v0.c2 DESC  NULLS LAST LIMIT 0 INTERSECT SELECT MIN(vt1.c1) FROM vt1, v0 WHERE ((- ((NOT (vt1.c1))))) ORDER BY ((((((v0.c1)OR(CAST(vt1.c1 AS BLOB))))AND((((v0.c0, v0.c1)) NOT BETWEEN (('0.705285612693276', v0.c1)) AND ((0.6508770655927488, v0.c2))))))OR(v0.c0)), v0.c2 DESC  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE (((v0.c0 COLLATE RTRIM)>(((v0.c2)>(v0.c1)))));
SELECT * FROM v0 WHERE (((((v0.c0 COLLATE RTRIM)>(((v0.c2)>(v0.c1)))))AND(CAST((~ (v0.c1)) AS REAL)))) ORDER BY '381300539' DESC INTERSECT SELECT ALL * FROM v0 WHERE (CASE v0.c2 COLLATE BINARY  WHEN ((v0.c2) BETWEEN ('-1312942963') AND (0.5715037151546067)) THEN ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2)) WHEN TRIM(DISTINCT v0.c0, v0.c0) THEN (((v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c0)) AND ((v0.c1, v0.c2))) WHEN CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END THEN ((935792754)%(v0.c1)) WHEN NULL THEN ((v0.c1)-(v0.c2)) WHEN ((v0.c2)||(v0.c2)) THEN ((v0.c1) NOT NULL) END) ORDER BY '381300539' DESC;
SELECT * FROM v0 WHERE (((v0.c0 COLLATE RTRIM)>(((v0.c2)>(v0.c1)))));
SELECT * FROM v0 WHERE (((((v0.c0 COLLATE RTRIM)>(((v0.c2)>(v0.c1)))))AND(CAST((~ (v0.c1)) AS REAL)))) ORDER BY '381300539' DESC INTERSECT SELECT ALL * FROM v0 WHERE (CASE v0.c2 COLLATE BINARY  WHEN ((v0.c2) BETWEEN ('-1312942963') AND (0.5715037151546067)) THEN ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2)) WHEN TRIM(DISTINCT v0.c0, v0.c0) THEN (((v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c0)) AND ((v0.c1, v0.c2))) WHEN CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END THEN ((935792754)%(v0.c1)) WHEN NULL THEN ((v0.c1)-(v0.c2)) WHEN ((v0.c2)||(v0.c2)) THEN ((v0.c1) NOT NULL) END) ORDER BY '381300539' DESC;
SELECT * FROM vt1 WHERE ((((vt1.c1, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))AND(NULL)))OR(vt1.c0)))AND(vt1.c0)), load_extension(vt1.c0), ((vt1.c0)>>(vt1.c0)), ((vt1.c1)*(vt1.c0)))) AND ((DATETIME(vt1.c0, vt1.c0, vt1.c0), ((vt1.c0) IS TRUE), vt1.c1, CAST('887571368' AS REAL)))));
SELECT ALL * FROM vt1 WHERE ((((((vt1.c1, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))AND(NULL)))OR(vt1.c0)))AND(vt1.c0)), load_extension(vt1.c0), ((vt1.c0)>>(vt1.c0)), ((vt1.c1)*(vt1.c0)))) AND ((DATETIME(vt1.c0, vt1.c0, vt1.c0), ((vt1.c0) IS TRUE), vt1.c1, CAST('887571368' AS REAL)))))AND((((vt1.c1 IN ())) NOT BETWEEN ((NOT (vt1.c1))) AND (CAST(vt1.c1 AS REAL)))))) LIMIT 0x1;
SELECT * FROM vt1 WHERE ((((vt1.c1, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))AND(NULL)))OR(vt1.c0)))AND(vt1.c0)), load_extension(vt1.c0), ((vt1.c0)>>(vt1.c0)), ((vt1.c1)*(vt1.c0)))) AND ((DATETIME(vt1.c0, vt1.c0, vt1.c0), ((vt1.c0) IS TRUE), vt1.c1, CAST('887571368' AS REAL)))));
SELECT ALL * FROM vt1 WHERE ((((((vt1.c1, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))AND(NULL)))OR(vt1.c0)))AND(vt1.c0)), load_extension(vt1.c0), ((vt1.c0)>>(vt1.c0)), ((vt1.c1)*(vt1.c0)))) AND ((DATETIME(vt1.c0, vt1.c0, vt1.c0), ((vt1.c0) IS TRUE), vt1.c1, CAST('887571368' AS REAL)))))AND((((vt1.c1 IN ())) NOT BETWEEN ((NOT (vt1.c1))) AND (CAST(vt1.c1 AS REAL)))))) LIMIT 0x1;
SELECT ALL * FROM vt1, v0 WHERE (CASE ((v0.c0)IS(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c1)))AND(v0.c0)) THEN CASE WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE vt1.c1 END WHEN v0.c2 THEN ((((v0.c1)AND(vt1.c1)))AND(vt1.c1)) ELSE ((vt1.c1)!=(v0.c0)) END) ORDER BY 'U' DESC;
SELECT ALL * FROM vt1, v0 WHERE (((CASE ((v0.c0)IS(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c1)))AND(v0.c0)) THEN CASE WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE vt1.c1 END WHEN v0.c2 THEN ((((v0.c1)AND(vt1.c1)))AND(vt1.c1)) ELSE ((vt1.c1)!=(v0.c0)) END)AND(((((vt1.c1)LIKE(v0.c1))) NOT NULL)))) ORDER BY 'U' DESC;
SELECT ALL * FROM vt1, v0 WHERE (CASE ((v0.c0)IS(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c1)))AND(v0.c0)) THEN CASE WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE vt1.c1 END WHEN v0.c2 THEN ((((v0.c1)AND(vt1.c1)))AND(vt1.c1)) ELSE ((vt1.c1)!=(v0.c0)) END) ORDER BY 'U' DESC;
SELECT ALL * FROM vt1, v0 WHERE (((CASE ((v0.c0)IS(vt1.c0))  WHEN ((((vt1.c0)AND(vt1.c1)))AND(v0.c0)) THEN CASE WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE vt1.c1 END WHEN v0.c2 THEN ((((v0.c1)AND(vt1.c1)))AND(vt1.c1)) ELSE ((vt1.c1)!=(v0.c0)) END)AND(((((vt1.c1)LIKE(v0.c1))) NOT NULL)))) ORDER BY 'U' DESC;
SELECT * FROM vt1 CROSS JOIN v0 ON ((CAST(x'' AS INTEGER)) IS TRUE) WHERE (((v0.c2) NOT BETWEEN (0x24de856f) AND (v0.c1)) COLLATE NOCASE) ORDER BY (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END IN (((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)), CAST(vt1.c0 AS BLOB))) DESC;
SELECT * FROM vt1 CROSS JOIN v0 ON ((CAST(x'' AS INTEGER)) IS TRUE) WHERE (((((v0.c2) NOT BETWEEN (618562927) AND (v0.c1)) COLLATE NOCASE)AND(LIKELY(DISTINCT ((((((((v0.c1)OR(v0.c1)))AND(NULL)))AND(v0.c0)))OR(v0.c0)))))) ORDER BY ((((0.044172733274880804)>>('漺늭')))*(MIN(vt1.c0, vt1.c0, vt1.c1)))  NULLS LAST, CAST((- ('w')) AS TEXT), CASE CAST(vt1.c0 AS REAL)  WHEN (+ (vt1.c1)) THEN ((vt1.c1)<(v0.c2)) ELSE ('624530852' IN (vt1.c0)) END ASC, TOTAL_CHANGES() DESC  NULLS FIRST LIMIT 2;
SELECT * FROM vt1 CROSS JOIN v0 ON ((CAST(x'' AS INTEGER)) IS TRUE) WHERE (((v0.c2) NOT BETWEEN (0x24de856f) AND (v0.c1)) COLLATE NOCASE) ORDER BY (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END IN (((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)), CAST(vt1.c0 AS BLOB))) DESC;
SELECT * FROM vt1 CROSS JOIN v0 ON ((CAST(x'' AS INTEGER)) IS TRUE) WHERE (((((v0.c2) NOT BETWEEN (618562927) AND (v0.c1)) COLLATE NOCASE)AND(LIKELY(DISTINCT ((((((((v0.c1)OR(v0.c1)))AND(NULL)))AND(v0.c0)))OR(v0.c0)))))) ORDER BY ((((0.044172733274880804)>>('漺늭')))*(MIN(vt1.c0, vt1.c0, vt1.c1)))  NULLS LAST, CAST((- ('w')) AS TEXT), CASE CAST(vt1.c0 AS REAL)  WHEN (+ (vt1.c1)) THEN ((vt1.c1)<(v0.c2)) ELSE ('624530852' IN (vt1.c0)) END ASC, TOTAL_CHANGES() DESC  NULLS FIRST LIMIT 2;
SELECT * FROM v0, vt1 WHERE ((((~ ('1AQ%⟙9ﻔ/R')))IS NOT(((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY v0.c0  NULLS FIRST, CAST(v0.c2 AS TEXT) COLLATE NOCASE  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((~ ('1AQ%⟙9ﻔ/R')))IS NOT(((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY v0.c0  NULLS FIRST, CAST(v0.c2 AS TEXT) COLLATE NOCASE  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((vt1.c1)>>((NOT (vt1.c0))))) ORDER BY v0.c0  NULLS FIRST, CAST(v0.c2 AS TEXT) COLLATE NOCASE  NULLS LAST LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE ((((~ ('1AQ%⟙9ﻔ/R')))IS NOT(((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY v0.c0  NULLS FIRST, CAST(v0.c2 AS TEXT) COLLATE NOCASE  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((~ ('1AQ%⟙9ﻔ/R')))IS NOT(((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY v0.c0  NULLS FIRST, CAST(v0.c2 AS TEXT) COLLATE NOCASE  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((vt1.c1)>>((NOT (vt1.c0))))) ORDER BY v0.c0  NULLS FIRST, CAST(v0.c2 AS TEXT) COLLATE NOCASE  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((JULIANDAY(x'', v0.c2, '615923876', v0.c1)) ISNULL));
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((((JULIANDAY(x'', v0.c2, '615923876', v0.c1)) ISNULL))AND(((((((((NULL)OR(v0.c1)))OR(v0.c1)))OR(v0.c0)))>=((((vt1.c0))<=((vt1.c0)))))))) INTERSECT SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (x'11');
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((JULIANDAY(x'', v0.c2, '615923876', v0.c1)) ISNULL));
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((((JULIANDAY(x'', v0.c2, '615923876', v0.c1)) ISNULL))AND(((((((((NULL)OR(v0.c1)))OR(v0.c1)))OR(v0.c0)))>=((((vt1.c0))<=((vt1.c0)))))))) INTERSECT SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (x'11');
SELECT * FROM v0 WHERE ((((v0.c1 IN (v0.c2))) BETWEEN (((v0.c2)<(v0.c1))) AND (v0.c2 COLLATE NOCASE))) ORDER BY (((v0.c1 COLLATE NOCASE))<>(((NOT (v0.c2)))))  NULLS FIRST, (- (((((((((((v0.c1)OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))) ASC;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1 IN (v0.c2))) BETWEEN (((v0.c2)<(v0.c1))) AND (v0.c2 COLLATE NOCASE)))AND(CAST(((v0.c0) BETWEEN (v0.c0) AND (NULL)) AS REAL)))) ORDER BY (((v0.c1 COLLATE NOCASE))!=(((NOT (v0.c2)))))  NULLS FIRST, (- (((((((((((v0.c1)OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))) ASC;
SELECT * FROM v0 WHERE ((((v0.c1 IN (v0.c2))) BETWEEN (((v0.c2)<(v0.c1))) AND (v0.c2 COLLATE NOCASE))) ORDER BY (((v0.c1 COLLATE NOCASE))<>(((NOT (v0.c2)))))  NULLS FIRST, (- (((((((((((v0.c1)OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))) ASC;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1 IN (v0.c2))) BETWEEN (((v0.c2)<(v0.c1))) AND (v0.c2 COLLATE NOCASE)))AND(CAST(((v0.c0) BETWEEN (v0.c0) AND (NULL)) AS REAL)))) ORDER BY (((v0.c1 COLLATE NOCASE))!=(((NOT (v0.c2)))))  NULLS FIRST, (- (((((((((((v0.c1)OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))) ASC;
SELECT ALL * FROM vt1 WHERE (MIN(((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)), CAST(vt1.c1 AS TEXT), x'39ad'));
SELECT DISTINCT * FROM vt1 WHERE (MIN(((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)), CAST(vt1.c1 AS TEXT), x'39ad')) ORDER BY ((LIKELIHOOD(DISTINCT vt1.c0, vt1.c0))|(((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (MIN(((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)), CAST(vt1.c1 AS TEXT), x'39ad'));
SELECT DISTINCT * FROM vt1 WHERE (MIN(((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)), CAST(vt1.c1 AS TEXT), x'39ad')) ORDER BY ((LIKELIHOOD(DISTINCT vt1.c0, vt1.c0))|(((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON (((('8쥐 \VFHV!')OR(vt1.c0)))OR((NOT (v0.c0)))) WHERE (((((v0.c1) BETWEEN (v0.c1) AND (v0.c1)))>>(CAST(vt1.c1 AS BLOB)))) ORDER BY (((((((((((('305180856')OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))AND(v0.c2)))AND(v0.c0)))<(v0.c0)) ASC  NULLS LAST, (~ (((x'6c')-(v0.c0)))) DESC  NULLS FIRST;
SELECT * FROM vt1 INNER JOIN v0 ON (((('8쥐 \VFHV!')OR(vt1.c0)))OR((NOT (v0.c0)))) WHERE (((((v0.c1) BETWEEN (v0.c1) AND (v0.c1)))>>(CAST(vt1.c1 AS BLOB)))) ORDER BY (((((((((((('305180856')OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))AND(v0.c2)))AND(v0.c0)))<(v0.c0)) ASC  NULLS LAST, (~ (((x'6c')-(v0.c0)))) DESC  NULLS FIRST LIMIT 2;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON (((('8쥐 \VFHV!')OR(vt1.c0)))OR((NOT (v0.c0)))) WHERE (((((v0.c1) BETWEEN (v0.c1) AND (v0.c1)))>>(CAST(vt1.c1 AS BLOB)))) ORDER BY (((((((((((('305180856')OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))AND(v0.c2)))AND(v0.c0)))<(v0.c0)) ASC  NULLS LAST, (~ (((x'6c')-(v0.c0)))) DESC  NULLS FIRST;
SELECT * FROM vt1 INNER JOIN v0 ON (((('8쥐 \VFHV!')OR(vt1.c0)))OR((NOT (v0.c0)))) WHERE (((((v0.c1) BETWEEN (v0.c1) AND (v0.c1)))>>(CAST(vt1.c1 AS BLOB)))) ORDER BY (((((((((((('305180856')OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))AND(v0.c2)))AND(v0.c0)))<(v0.c0)) ASC  NULLS LAST, (~ (((x'6c')-(v0.c0)))) DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(CAST(CAST(vt1.c1 AS TEXT) AS NUMERIC)))) ORDER BY (((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)) IN ((vt1.c1 IN (vt1.c1)))) DESC, (((vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) AND ((((vt1.c0)>(vt1.c1)))))  NULLS FIRST, STRFTIME((NOT (vt1.c0)), ((vt1.c0)>>(vt1.c1)), ((vt1.c1)*(vt1.c0)));
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(CAST(CAST(vt1.c1 AS TEXT) AS NUMERIC)))) ORDER BY (((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)) IN ((vt1.c1 IN (vt1.c1)))) DESC, (((vt1.c0)) BETWEEN ((CASE WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) AND ((((vt1.c0)>(vt1.c1)))))  NULLS FIRST, STRFTIME((NOT (vt1.c0)), ((vt1.c0)>>(vt1.c1)), ((vt1.c1)*(vt1.c0)));
SELECT ALL * FROM vt1 WHERE ((((((((((((~ (vt1.c0)))AND((vt1.c1 IN (vt1.c1)))))OR(vt1.c1 COLLATE RTRIM)))OR(TRIM(vt1.c1))))OR(((vt1.c1) NOT NULL))))OR((~ (vt1.c1))))) ORDER BY CASE WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE NULL END THEN NULL END DESC  NULLS FIRST, ((0.776066405733463) NOT BETWEEN ((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND ((+ (vt1.c0)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((((((((((~ (vt1.c0)))AND((vt1.c1 IN (vt1.c1)))))OR(vt1.c1 COLLATE RTRIM)))OR(TRIM(vt1.c1))))OR(((vt1.c1) NOT NULL))))OR((~ (vt1.c1)))))AND((- (((vt1.c1) ISNULL)))))) ORDER BY CASE WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE NULL END THEN NULL END DESC  NULLS FIRST, ((0.776066405733463) NOT BETWEEN ((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND ((+ (vt1.c0)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (UNLIKELY((+ (vt1.c1)))) ORDER BY CASE WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE NULL END THEN NULL END DESC  NULLS FIRST, ((0.776066405733463) NOT BETWEEN ((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND ((+ (vt1.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((((((((((~ (vt1.c0)))AND((vt1.c1 IN (vt1.c1)))))OR(vt1.c1 COLLATE RTRIM)))OR(TRIM(vt1.c1))))OR(((vt1.c1) NOT NULL))))OR((~ (vt1.c1))))) ORDER BY CASE WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE NULL END THEN NULL END DESC  NULLS FIRST, ((0.776066405733463) NOT BETWEEN ((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND ((+ (vt1.c0)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((((((((((~ (vt1.c0)))AND((vt1.c1 IN (vt1.c1)))))OR(vt1.c1 COLLATE RTRIM)))OR(TRIM(vt1.c1))))OR(((vt1.c1) NOT NULL))))OR((~ (vt1.c1)))))AND((- (((vt1.c1) ISNULL)))))) ORDER BY CASE WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE NULL END THEN NULL END DESC  NULLS FIRST, ((0.776066405733463) NOT BETWEEN ((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND ((+ (vt1.c0)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (UNLIKELY((+ (vt1.c1)))) ORDER BY CASE WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE NULL END THEN NULL END DESC  NULLS FIRST, ((0.776066405733463) NOT BETWEEN ((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))) AND ((+ (vt1.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c1, vt1.c0, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((((NULL)|(vt1.c0)), CAST('dNaN_' AS NUMERIC), CASE WHEN 0Xffffffffad364fc5 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END, x'', ((vt1.c1) IS FALSE))) AND ((((vt1.c1) IS FALSE), (vt1.c0 IN (vt1.c1)), (((vt1.c1))<(('{F'))), -1.62851011E9, ((vt1.c0) IS FALSE))))) ORDER BY vt1.c1 COLLATE BINARY COLLATE NOCASE COLLATE BINARY ASC, vt1.c1 ASC;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1, vt1.c0, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((((NULL)|(vt1.c0)), CAST('dNaN_' AS NUMERIC), CASE WHEN -1388949563 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END, x'', ((vt1.c1) IS FALSE))) AND ((((vt1.c1) IS FALSE), (vt1.c0 IN (vt1.c1)), (((vt1.c1))<=(('{F'))), -1.62851011E9, ((vt1.c0) IS FALSE)))))AND(((~ ('')) IN ())))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN NULL THEN vt1.c1 ELSE '-1641029925' END IN (vt1.c1, CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((NOT ((NOT (vt1.c0))))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN NULL THEN vt1.c1 ELSE '-1641029925' END IN (vt1.c1, CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT ALL * FROM vt1 WHERE ((((vt1.c1, vt1.c0, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((((NULL)|(vt1.c0)), CAST('dNaN_' AS NUMERIC), CASE WHEN 0Xffffffffad364fc5 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END, x'', ((vt1.c1) IS FALSE))) AND ((((vt1.c1) IS FALSE), (vt1.c0 IN (vt1.c1)), (((vt1.c1))<(('{F'))), -1.62851011E9, ((vt1.c0) IS FALSE))))) ORDER BY vt1.c1 COLLATE BINARY COLLATE NOCASE COLLATE BINARY ASC, vt1.c1 ASC;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1, vt1.c0, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((((NULL)|(vt1.c0)), CAST('dNaN_' AS NUMERIC), CASE WHEN -1388949563 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END, x'', ((vt1.c1) IS FALSE))) AND ((((vt1.c1) IS FALSE), (vt1.c0 IN (vt1.c1)), (((vt1.c1))<=(('{F'))), -1.62851011E9, ((vt1.c0) IS FALSE)))))AND(((~ ('')) IN ())))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN NULL THEN vt1.c1 ELSE '-1641029925' END IN (vt1.c1, CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((NOT ((NOT (vt1.c0))))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN NULL THEN vt1.c1 ELSE '-1641029925' END IN (vt1.c1, CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END));
SELECT ALL MAX(v0.c1) FROM v0, vt1 WHERE ((((((vt1.c1))==((vt1.c1)))) IS FALSE));
SELECT ALL MAX(v0.c1) FROM v0, vt1 WHERE ((((((((vt1.c1))=((vt1.c1)))) IS FALSE))AND('4F'))) LIMIT 0x1 INTERSECT SELECT MAX(v0.c1) FROM v0, vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c0 END)>(vt1.c1))) LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((v0.c2 IN ()) IN ()));
SELECT COUNT(*) FROM vt1, v0 WHERE (((((v0.c2 IN ()) IN ()))AND(((UNICODE(v0.c1)) IS FALSE)))) ORDER BY CAST(((vt1.c1)-('')) AS BLOB), ((((vt1.c0)AND(vt1.c0))) BETWEEN (TRIM(vt1.c1)) AND ((((v0.c2)) BETWEEN ((vt1.c0)) AND ((v0.c2))))) ASC  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM vt1, v0 WHERE (CAST((vt1.c0 IN (v0.c2, v0.c1)) AS NUMERIC)) ORDER BY CAST(((vt1.c1)-('')) AS BLOB), ((((vt1.c0)AND(vt1.c0))) BETWEEN (TRIM(vt1.c1)) AND ((((v0.c2)) BETWEEN ((vt1.c0)) AND ((v0.c2))))) ASC  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((((((((vt1.c1, vt1.c1))>((vt1.c0, vt1.c1))))AND((+ (vt1.c0)))))OR((+ (vt1.c1)))))OR(vt1.c1)))OR(((vt1.c0)GLOB(vt1.c0))))) ORDER BY CASE WHEN UNLIKELY(DISTINCT vt1.c0) THEN ((((((vt1.c1)AND(0.314918614441265)))AND(vt1.c1)))OR(vt1.c1)) WHEN '0.660650116673301' THEN TRIM(DISTINCT vt1.c1) WHEN vt1.c0 COLLATE NOCASE THEN (vt1.c0 IN ()) WHEN (+ (vt1.c1)) THEN (vt1.c1 IN ('k', vt1.c0)) END  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((((((((vt1.c1, vt1.c1))>((vt1.c0, vt1.c1))))AND((+ (vt1.c0)))))OR((+ (vt1.c1)))))OR(vt1.c1)))OR(((vt1.c0)GLOB(vt1.c0))))) ORDER BY (NOT (CAST(vt1.c1 AS TEXT)))  NULLS FIRST, ((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN x'b831' WHEN vt1.c1 THEN vt1.c0 END) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (((vt1.c0)==(vt1.c1)))), ((- (vt1.c1)) IN ()) ASC INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE ((NOT (LAST_INSERT_ROWID()))) ORDER BY (NOT (CAST(vt1.c1 AS TEXT)))  NULLS FIRST, ((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN x'b831' WHEN vt1.c1 THEN vt1.c0 END) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (((vt1.c0)==(vt1.c1)))), ((- (vt1.c1)) IN ()) ASC;
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE (((((((((v0.c1)AND(vt1.c1)))AND(v0.c0)))AND(vt1.c1))) NOT BETWEEN (0xffffffffa5990ee7) AND (((vt1.c0) NOTNULL))));
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE (((((((((v0.c1)AND(vt1.c1)))AND(v0.c0)))AND(vt1.c1))) NOT BETWEEN (-1516695833) AND (((vt1.c0) NOTNULL)))) INTERSECT SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE ((((((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND (('-757902307'))))AND(((v0.c1)IS(vt1.c0)))))OR(((((((((((vt1.c1)AND(v0.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))));
SELECT * FROM vt1 WHERE (((vt1.c1)<(vt1.c0)) COLLATE BINARY) ORDER BY ((x'') NOTNULL) ASC, ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))AND(((vt1.c1)>(vt1.c1))))  NULLS LAST, vt1.c1  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((vt1.c1)<(vt1.c0)) COLLATE BINARY) ORDER BY ((x'') NOTNULL) ASC, ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))AND(((vt1.c1)>(vt1.c1))))  NULLS LAST, vt1.c1  NULLS LAST LIMIT 2 INTERSECT SELECT * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))!=(NULL))) ORDER BY ((x'') NOTNULL) ASC, ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))AND(((vt1.c1)>(vt1.c1))))  NULLS LAST, vt1.c1  NULLS LAST LIMIT 0x2;
SELECT * FROM vt1 WHERE (((vt1.c1)<(vt1.c0)) COLLATE BINARY) ORDER BY ((x'') NOTNULL) ASC, ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))AND(((vt1.c1)>(vt1.c1))))  NULLS LAST, vt1.c1  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((vt1.c1)<(vt1.c0)) COLLATE BINARY) ORDER BY ((x'') NOTNULL) ASC, ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))AND(((vt1.c1)>(vt1.c1))))  NULLS LAST, vt1.c1  NULLS LAST LIMIT 2 INTERSECT SELECT * FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))!=(NULL))) ORDER BY ((x'') NOTNULL) ASC, ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))AND(((vt1.c1)>(vt1.c1))))  NULLS LAST, vt1.c1  NULLS LAST LIMIT 0x2;
SELECT * FROM v0 WHERE (x'');
SELECT * FROM v0 WHERE (x'');
SELECT * FROM v0 WHERE (x'');
SELECT * FROM v0 WHERE (x'');
SELECT ALL * FROM v0 WHERE (HEX(DISTINCT ((v0.c0)<>(v0.c0)))) ORDER BY (NOT (0.16401431685833323)), ((v0.c1) ISNULL) ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (HEX(DISTINCT ((v0.c0)<(v0.c0)))) ORDER BY (NOT (0.16401431685833323)), ((v0.c1) ISNULL) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE (NULL COLLATE NOCASE) ORDER BY (NOT (0.16401431685833323)), ((v0.c1) ISNULL) ASC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (HEX(DISTINCT ((v0.c0)<>(v0.c0)))) ORDER BY (NOT (0.16401431685833323)), ((v0.c1) ISNULL) ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (HEX(DISTINCT ((v0.c0)<(v0.c0)))) ORDER BY (NOT (0.16401431685833323)), ((v0.c1) ISNULL) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE (NULL COLLATE NOCASE) ORDER BY (NOT (0.16401431685833323)), ((v0.c1) ISNULL) ASC  NULLS LAST LIMIT 0X0;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((+ (vt1.c0)) COLLATE RTRIM) ORDER BY UNLIKELY(DISTINCT CAST(vt1.c1 AS BLOB)) DESC  NULLS LAST, ((vt1.c0 IN (NULL, vt1.c0)) IN ()) DESC, ((((((vt1.c1)AND(vt1.c1)))OR('~'))) IS TRUE)  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((+ (vt1.c0)) COLLATE RTRIM) ORDER BY CASE CAST(vt1.c1 AS TEXT)  WHEN CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN LIKELIHOOD(DISTINCT vt1.c1, vt1.c1) WHEN vt1.c0 THEN ((NULL) NOT NULL) WHEN '-913663849' THEN ((vt1.c1)>=(vt1.c0)) ELSE (((vt1.c0, vt1.c1, vt1.c1, vt1.c1))>=((vt1.c1, vt1.c1, '1303079655', vt1.c0))) END ASC  NULLS LAST, (((((vt1.c1)||(vt1.c1)), ((x'') NOT BETWEEN (vt1.c0) AND (vt1.c1)), ((vt1.c1) IS TRUE)))>((((1409977447)<(vt1.c0)), 0x7bdbb1ff, ((vt1.c1)||(vt1.c1))))), CASE WHEN ((vt1.c0)GLOB(vt1.c0)) THEN vt1.c1 ELSE x'a0bf' END  NULLS FIRST;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)>((+ (vt1.c0)))));
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)>((+ (vt1.c0)))));
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)>((+ (vt1.c0)))));
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)>((+ (vt1.c0)))));
SELECT * FROM v0 WHERE ((((((v0.c1)|(v0.c1))))<=((v0.c2 COLLATE NOCASE))));
SELECT ALL * FROM v0 WHERE ((((((((v0.c1)|(v0.c1))))<=((v0.c2 COLLATE NOCASE))))AND(IFNULL(v0.c2, v0.c2) COLLATE RTRIM))) LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE ((+ (CAST(v0.c0 AS INTEGER)))) LIMIT 0x0;
SELECT * FROM v0 WHERE ((((((v0.c1)|(v0.c1))))<=((v0.c2 COLLATE NOCASE))));
SELECT ALL * FROM v0 WHERE ((((((((v0.c1)|(v0.c1))))<=((v0.c2 COLLATE NOCASE))))AND(IFNULL(v0.c2, v0.c2) COLLATE RTRIM))) LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE ((+ (CAST(v0.c0 AS INTEGER)))) LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE ((((((v0.c2)OR(vt1.c0)))OR(v0.c1)) IN ()));
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c2)OR(vt1.c0)))OR(v0.c1)) IN ())) ORDER BY (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c0)))) NOT BETWEEN (v0.c0 COLLATE NOCASE) AND ((vt1.c0 IN ()))) ASC, x'' LIMIT 0X0 INTERSECT SELECT * FROM v0, vt1 WHERE (((((((v0.c0)AND(v0.c1)))OR(v0.c1)))/(v0.c2))) ORDER BY (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c0)))) NOT BETWEEN (v0.c0 COLLATE NOCASE) AND ((vt1.c0 IN ()))) ASC, x'' LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE ((((((v0.c2)OR(vt1.c0)))OR(v0.c1)) IN ()));
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c2)OR(vt1.c0)))OR(v0.c1)) IN ())) ORDER BY (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c0)))) NOT BETWEEN (v0.c0 COLLATE NOCASE) AND ((vt1.c0 IN ()))) ASC, x'' LIMIT 0X0 INTERSECT SELECT * FROM v0, vt1 WHERE (((((((v0.c0)AND(v0.c1)))OR(v0.c1)))/(v0.c2))) ORDER BY (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c0)))) NOT BETWEEN (v0.c0 COLLATE NOCASE) AND ((vt1.c0 IN ()))) ASC, x'' LIMIT 0x0;
SELECT * FROM vt1, v0 WHERE ((((vt1.c0, v0.c2)) NOT BETWEEN (((x'c2e6' IN ()), ((((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c0)))) AND ((NULL COLLATE NOCASE, ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))) ORDER BY ((((((vt1.c0)OR(v0.c1)))OR((v0.c0 IN ()))))AND(v0.c1)), (((((((v0.c1)AND(v0.c2)))AND(v0.c2))))<=((((v0.c0)>(v0.c0)))))  NULLS LAST, ((((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) BETWEEN (((vt1.c0)OR(v0.c0))) AND (vt1.c1))  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((vt1.c0, v0.c2)) NOT BETWEEN (((x'c2e6' IN ()), ((((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c0)))) AND ((NULL COLLATE NOCASE, ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))) ORDER BY ((((v0.c2)OR(v0.c0)))&(((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c1))))  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt1, v0 WHERE ((((vt1.c0, v0.c2)) NOT BETWEEN (((x'c2e6' IN ()), ((((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c0)))) AND ((NULL COLLATE NOCASE, ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))) ORDER BY ((((((vt1.c0)OR(v0.c1)))OR((v0.c0 IN ()))))AND(v0.c1)), (((((((v0.c1)AND(v0.c2)))AND(v0.c2))))<=((((v0.c0)>(v0.c0)))))  NULLS LAST, ((((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) BETWEEN (((vt1.c0)OR(v0.c0))) AND (vt1.c1))  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((vt1.c0, v0.c2)) NOT BETWEEN (((x'c2e6' IN ()), ((((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c0)))) AND ((NULL COLLATE NOCASE, ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))) ORDER BY ((((v0.c2)OR(v0.c0)))&(((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c1))))  NULLS FIRST LIMIT 0X1;
SELECT ALL MIN(v0.c0) FROM v0 WHERE (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END COLLATE RTRIM) ORDER BY ((CASE v0.c2  WHEN v0.c2 THEN v0.c2 END)<<('-650408634')) DESC, (((((((((~ (v0.c0)))OR(((((((((((v0.c2)AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))))OR((v0.c1 IN (v0.c2, v0.c1)))))OR((+ (v0.c1)))))OR((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((1101571676)))))  NULLS LAST, (- (((v0.c1)!=(v0.c1)))) DESC  NULLS FIRST;
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END COLLATE RTRIM)AND(ABS(((v0.c1)LIKE(v0.c0)))))) ORDER BY ((CASE v0.c2  WHEN v0.c2 THEN v0.c2 END)<<('-650408634')) DESC, (((((((((~ (v0.c0)))OR(((((((((((v0.c2)AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))))OR((v0.c1 IN (v0.c2, v0.c1)))))OR((+ (v0.c1)))))OR((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((1101571676)))))  NULLS LAST, (- (((v0.c1)<>(v0.c1)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((v0.c2 COLLATE RTRIM)GLOB((v0.c2 IN ())))) ORDER BY ((CASE v0.c2  WHEN v0.c2 THEN v0.c2 END)<<('-650408634')) DESC, (((((((((~ (v0.c0)))OR(((((((((((v0.c2)AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))))OR((v0.c1 IN (v0.c2, v0.c1)))))OR((+ (v0.c1)))))OR((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((0X41a8a65c)))))  NULLS LAST, (- (((v0.c1)!=(v0.c1)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (((((((((((CASE WHEN vt1.c1 THEN 0.191892610815246 ELSE '-640489221' END)AND(((((((vt1.c1)AND(v0.c1)))AND(v0.c1)))AND(vt1.c1)))))OR(CASE vt1.c0  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c0 END)))OR((((v0.c2, v0.c0, v0.c2))<((v0.c1, vt1.c0, v0.c2))))))OR((((v0.c2, v0.c0, vt1.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0)) AND ((v0.c0, v0.c0, vt1.c0))))))AND(v0.c0 COLLATE RTRIM)));
SELECT * FROM vt1, v0 WHERE (((((((((((CASE WHEN vt1.c1 THEN 0.191892610815246 ELSE '-640489221' END)AND(((((((vt1.c1)AND(v0.c1)))AND(v0.c1)))AND(vt1.c1)))))OR(CASE vt1.c0  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c0 END)))OR((((v0.c2, v0.c0, v0.c2))<((v0.c1, vt1.c0, v0.c2))))))OR((((v0.c2, v0.c0, vt1.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0)) AND ((v0.c0, v0.c0, vt1.c0))))))AND(v0.c0 COLLATE RTRIM))) LIMIT 0X0;
SELECT ALL * FROM vt1, v0 WHERE (((((((((((CASE WHEN vt1.c1 THEN 0.191892610815246 ELSE '-640489221' END)AND(((((((vt1.c1)AND(v0.c1)))AND(v0.c1)))AND(vt1.c1)))))OR(CASE vt1.c0  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c0 END)))OR((((v0.c2, v0.c0, v0.c2))<((v0.c1, vt1.c0, v0.c2))))))OR((((v0.c2, v0.c0, vt1.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0)) AND ((v0.c0, v0.c0, vt1.c0))))))AND(v0.c0 COLLATE RTRIM)));
SELECT * FROM vt1, v0 WHERE (((((((((((CASE WHEN vt1.c1 THEN 0.191892610815246 ELSE '-640489221' END)AND(((((((vt1.c1)AND(v0.c1)))AND(v0.c1)))AND(vt1.c1)))))OR(CASE vt1.c0  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c0 END)))OR((((v0.c2, v0.c0, v0.c2))<((v0.c1, vt1.c0, v0.c2))))))OR((((v0.c2, v0.c0, vt1.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0)) AND ((v0.c0, v0.c0, vt1.c0))))))AND(v0.c0 COLLATE RTRIM))) LIMIT 0X0;
SELECT * FROM v0 WHERE ((v0.c1 IN ()));
SELECT ALL * FROM v0 WHERE ((((v0.c1 IN ()))AND(SQLITE_VERSION()))) ORDER BY (- (CAST(v0.c1 AS BLOB)))  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM v0 WHERE ((((v0.c1 IN (v0.c0, v0.c2))) NOT NULL)) ORDER BY (- (CAST(v0.c1 AS BLOB)))  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE ((v0.c1 IN ()));
SELECT ALL * FROM v0 WHERE ((((v0.c1 IN ()))AND(SQLITE_VERSION()))) ORDER BY (- (CAST(v0.c1 AS BLOB)))  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM v0 WHERE ((((v0.c1 IN (v0.c0, v0.c2))) NOT NULL)) ORDER BY (- (CAST(v0.c1 AS BLOB)))  NULLS LAST LIMIT 0;
SELECT ALL COUNT(*) FROM vt1 WHERE (CAST(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN x'' THEN vt1.c1 END AS NUMERIC)) ORDER BY CASE WHEN ((x'743a4d8c')AND(vt1.c0)) THEN NULL END, ((((((((vt1.c0) NOT BETWEEN ('846089199') AND (vt1.c0)))AND((((vt1.c0, vt1.c1))<((vt1.c1, vt1.c1))))))OR(((vt1.c0)||('0.0')))))AND(((vt1.c1) IS FALSE))) DESC;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CAST(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN x'' THEN vt1.c1 END AS NUMERIC)) ORDER BY (- ((- (vt1.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((- ((- (vt1.c0)))));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((- ((- (vt1.c0))))) ORDER BY (NULL IN (HEX(vt1.c0))) DESC  NULLS FIRST, NULL COLLATE RTRIM DESC LIMIT 0;
SELECT ALL COUNT(*) FROM vt1 WHERE ((+ ((vt1.c0 IN (vt1.c0)))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((+ ((vt1.c0 IN (vt1.c0))))) ORDER BY CAST(((vt1.c0)>=(vt1.c0)) AS BLOB) DESC  NULLS FIRST, SQLITE_VERSION() DESC  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM v0 WHERE ((NOT (((v0.c0) IS FALSE)))) ORDER BY LIKELIHOOD(((v0.c1)LIKE(v0.c1)), (((v0.c0, '', 'Q', v0.c0))<=((v0.c1, v0.c2, v0.c0, v0.c2))))  NULLS LAST, ((CAST(v0.c1 AS NUMERIC)) IS TRUE)  NULLS FIRST, (- ((v0.c0 IN ())));
SELECT MAX(v0.c0) FROM v0 WHERE ((((NOT (((v0.c0) IS FALSE))))AND(v0.c1))) ORDER BY (((v0.c0, v0.c0)) BETWEEN ((((((((v0.c1)AND(v0.c2)))AND(v0.c0)))OR(v0.c1)), v0.c0)) AND ((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)), (NOT (v0.c1))))), ((((((((NULLIF(v0.c2, v0.c2))OR(NULLIF(DISTINCT v0.c2, v0.c0))))OR(v0.c0 COLLATE NOCASE)))AND(CAST(v0.c0 AS TEXT))))AND((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1)))))  NULLS LAST LIMIT 0 INTERSECT SELECT ALL MAX(v0.c0) FROM v0 WHERE (((v0.c1) BETWEEN (((v0.c1)&(0.7135857647115267))) AND (((v0.c1) IS TRUE)))) ORDER BY (((v0.c0, v0.c0)) BETWEEN ((((((((v0.c1)AND(v0.c2)))AND(v0.c0)))OR(v0.c1)), v0.c0)) AND ((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)), (NOT (v0.c1))))), ((((((((NULLIF(v0.c2, v0.c2))OR(NULLIF(DISTINCT v0.c2, v0.c0))))OR(v0.c0 COLLATE NOCASE)))AND(CAST(v0.c0 AS TEXT))))AND((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1)))))  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE ((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c1 END IN (((((((((((v0.c1)OR(v0.c0)))OR(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)), CAST(v0.c0 AS NUMERIC))));
SELECT ALL * FROM v0 WHERE ((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c1 END IN (((((((((((v0.c1)OR(v0.c0)))OR(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)), CAST(v0.c0 AS NUMERIC)))) ORDER BY (('') IS TRUE)  NULLS LAST, ((v0.c1 COLLATE RTRIM) NOT NULL) ASC  NULLS LAST, (~ (v0.c2 COLLATE BINARY))  NULLS FIRST LIMIT 3;
SELECT * FROM v0 WHERE ((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c1 END IN (((((((((((v0.c1)OR(v0.c0)))OR(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)), CAST(v0.c0 AS NUMERIC))));
SELECT ALL * FROM v0 WHERE ((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c1 END IN (((((((((((v0.c1)OR(v0.c0)))OR(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)), CAST(v0.c0 AS NUMERIC)))) ORDER BY (('') IS TRUE)  NULLS LAST, ((v0.c1 COLLATE RTRIM) NOT NULL) ASC  NULLS LAST, (~ (v0.c2 COLLATE BINARY))  NULLS FIRST LIMIT 3;
SELECT ALL MIN(v0.c1) FROM vt1 INNER JOIN v0 ON (((((v0.c0, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((vt1.c1, vt1.c0)))) NOTNULL) WHERE (((((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (1.148994335E9)))AND(v0.c1)))OR((v0.c1 IN (vt1.c0)))))OR(v0.c0 COLLATE NOCASE)));
SELECT MIN(v0.c1) FROM vt1 INNER JOIN v0 ON (((((v0.c0, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((vt1.c1, vt1.c0)))) NOTNULL) WHERE (((((((((vt1.c0) NOT BETWEEN (vt1.c0) AND (1.148994335E9)))AND(v0.c1)))OR((v0.c1 IN (vt1.c0)))))OR(v0.c0 COLLATE NOCASE))) ORDER BY (((v0.c0)) BETWEEN ((((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c2)))) AND (((NOT (vt1.c0))))) DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM v0, vt1 WHERE (((IFNULL(DISTINCT vt1.c1, v0.c2))<=(((NULL)GLOB(vt1.c1)))));
SELECT ALL * FROM v0, vt1 WHERE (((IFNULL(DISTINCT vt1.c1, v0.c2))<=(((NULL)GLOB(vt1.c1)))));
SELECT ALL * FROM v0, vt1 WHERE (((IFNULL(DISTINCT vt1.c1, v0.c2))<=(((NULL)GLOB(vt1.c1)))));
SELECT ALL * FROM v0, vt1 WHERE (((IFNULL(DISTINCT vt1.c1, v0.c2))<=(((NULL)GLOB(vt1.c1)))));
SELECT ALL COUNT(*) FROM v0 WHERE ((('')OR(v0.c2))) ORDER BY v0.c1  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((('')OR(v0.c2))) ORDER BY CASE WHEN LIKELIHOOD(DISTINCT v0.c1, v0.c0) THEN IFNULL(v0.c0, 839172849) WHEN (((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c0))) THEN (- (v0.c0)) ELSE LOWER(DISTINCT v0.c1) END  NULLS FIRST LIMIT 0X2;
SELECT * FROM v0 CROSS JOIN vt1 ON (+ ((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))))) WHERE (CAST((((vt1.c1, v0.c2, v0.c2))==((v0.c2, vt1.c1, v0.c2))) AS REAL)) ORDER BY (((((vt1.c0) IS FALSE)))<((vt1.c0))) DESC, ((((((((CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)OR(((vt1.c0)%(vt1.c0)))))OR(vt1.c0 COLLATE NOCASE)))OR(CASE WHEN vt1.c1 THEN v0.c1 END)))AND(CAST(vt1.c0 AS REAL))) DESC  NULLS FIRST, 0.3795566344906317 DESC  NULLS FIRST;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON (+ ((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))))) WHERE (((CAST((((vt1.c1, v0.c2, v0.c2))=((v0.c2, vt1.c1, v0.c2))) AS REAL))AND('M'))) ORDER BY (((((vt1.c0) IS FALSE)))<((vt1.c0))) DESC, ((((((((CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)OR(((vt1.c0)%(vt1.c0)))))OR(vt1.c0 COLLATE NOCASE)))OR(CASE WHEN vt1.c1 THEN v0.c1 END)))AND(CAST(vt1.c0 AS REAL))) DESC  NULLS FIRST, 0.3795566344906317 DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM v0 NOT INDEXED CROSS JOIN vt1 ON (+ ((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))))) WHERE ((((vt1.c1)) NOT BETWEEN ((((vt1.c1)+(v0.c1)))) AND ((CAST(v0.c0 AS TEXT))))) ORDER BY (((((vt1.c0) IS FALSE)))<((vt1.c0))) DESC, ((((((((CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)OR(((vt1.c0)%(vt1.c0)))))OR(vt1.c0 COLLATE NOCASE)))OR(CASE WHEN vt1.c1 THEN v0.c1 END)))AND(CAST(vt1.c0 AS REAL))) DESC  NULLS FIRST, 0.3795566344906317 DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0 CROSS JOIN vt1 ON (+ ((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))))) WHERE (CAST((((vt1.c1, v0.c2, v0.c2))==((v0.c2, vt1.c1, v0.c2))) AS REAL)) ORDER BY (((((vt1.c0) IS FALSE)))<((vt1.c0))) DESC, ((((((((CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)OR(((vt1.c0)%(vt1.c0)))))OR(vt1.c0 COLLATE NOCASE)))OR(CASE WHEN vt1.c1 THEN v0.c1 END)))AND(CAST(vt1.c0 AS REAL))) DESC  NULLS FIRST, 0.3795566344906317 DESC  NULLS FIRST;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON (+ ((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))))) WHERE (((CAST((((vt1.c1, v0.c2, v0.c2))=((v0.c2, vt1.c1, v0.c2))) AS REAL))AND('M'))) ORDER BY (((((vt1.c0) IS FALSE)))<((vt1.c0))) DESC, ((((((((CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)OR(((vt1.c0)%(vt1.c0)))))OR(vt1.c0 COLLATE NOCASE)))OR(CASE WHEN vt1.c1 THEN v0.c1 END)))AND(CAST(vt1.c0 AS REAL))) DESC  NULLS FIRST, 0.3795566344906317 DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM v0 NOT INDEXED CROSS JOIN vt1 ON (+ ((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))))) WHERE ((((vt1.c1)) NOT BETWEEN ((((vt1.c1)+(v0.c1)))) AND ((CAST(v0.c0 AS TEXT))))) ORDER BY (((((vt1.c0) IS FALSE)))<((vt1.c0))) DESC, ((((((((CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)OR(((vt1.c0)%(vt1.c0)))))OR(vt1.c0 COLLATE NOCASE)))OR(CASE WHEN vt1.c1 THEN v0.c1 END)))AND(CAST(vt1.c0 AS REAL))) DESC  NULLS FIRST, 0.3795566344906317 DESC  NULLS FIRST LIMIT 0X0;
SELECT COUNT(*) FROM v0, vt1 WHERE (((((v0.c2) BETWEEN (0X2cfbb003) AND (vt1.c1))) BETWEEN (((v0.c1) BETWEEN (v0.c0) AND (vt1.c1))) AND ((~ (vt1.c0)))));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((((v0.c2) BETWEEN (0X2cfbb003) AND (vt1.c1))) BETWEEN (((v0.c1) BETWEEN (v0.c0) AND (vt1.c1))) AND ((~ (vt1.c0))))) LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((((((v0.c2) NOT BETWEEN (0.8280010539406673) AND (v0.c0))))<=((JULIANDAY(v0.c1, x'91', v0.c2))))) LIMIT 0X0;
SELECT * FROM v0 WHERE (v0.c1);
SELECT ALL * FROM v0 WHERE (((v0.c1)AND(v0.c0)));
SELECT * FROM v0 WHERE (v0.c1);
SELECT ALL * FROM v0 WHERE (((v0.c1)AND(v0.c0)));
SELECT ALL * FROM vt1 WHERE (CASE CAST(vt1.c1 AS INTEGER)  WHEN ((vt1.c1)>>(vt1.c1)) THEN ((vt1.c0) IS FALSE) WHEN ((vt1.c1) IS TRUE) THEN (NOT (vt1.c1)) WHEN ((vt1.c0)|(vt1.c0)) THEN vt1.c1 WHEN (- (vt1.c0)) THEN (- (vt1.c0)) WHEN CASE WHEN vt1.c0 THEN vt1.c0 END THEN (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c1))) ELSE TRIM(vt1.c1, x'17c0') END) ORDER BY (((((x'25fe', x''))>=((vt1.c0, vt1.c0)))) BETWEEN ((((vt1.c1, vt1.c0, vt1.c1)) BETWEEN ((vt1.c0, vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c1)))) AND (((vt1.c1) NOTNULL)))  NULLS FIRST, CASE WHEN CAST(vt1.c1 AS TEXT) THEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)) WHEN ((vt1.c1)IS(vt1.c0)) THEN CAST(vt1.c0 AS TEXT) ELSE ((vt1.c1) IS TRUE) END ASC;
SELECT * FROM vt1 WHERE (CASE CAST(vt1.c1 AS INTEGER)  WHEN ((vt1.c1)>>(vt1.c1)) THEN ((vt1.c0) IS FALSE) WHEN ((vt1.c1) IS TRUE) THEN (NOT (vt1.c1)) WHEN ((vt1.c0)|(vt1.c0)) THEN vt1.c1 WHEN (- (vt1.c0)) THEN (- (vt1.c0)) WHEN CASE WHEN vt1.c0 THEN vt1.c0 END THEN (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c1))) ELSE TRIM(vt1.c1, x'17c0') END) ORDER BY (((~ (vt1.c0))) NOT NULL) DESC, CAST(x'' AS NUMERIC) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (CASE CAST(vt1.c1 AS INTEGER)  WHEN ((vt1.c1)>>(vt1.c1)) THEN ((vt1.c0) IS FALSE) WHEN ((vt1.c1) IS TRUE) THEN (NOT (vt1.c1)) WHEN ((vt1.c0)|(vt1.c0)) THEN vt1.c1 WHEN (- (vt1.c0)) THEN (- (vt1.c0)) WHEN CASE WHEN vt1.c0 THEN vt1.c0 END THEN (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c1))) ELSE TRIM(vt1.c1, x'17c0') END) ORDER BY (((((x'25fe', x''))>=((vt1.c0, vt1.c0)))) BETWEEN ((((vt1.c1, vt1.c0, vt1.c1)) BETWEEN ((vt1.c0, vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c1)))) AND (((vt1.c1) NOTNULL)))  NULLS FIRST, CASE WHEN CAST(vt1.c1 AS TEXT) THEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)) WHEN ((vt1.c1)IS(vt1.c0)) THEN CAST(vt1.c0 AS TEXT) ELSE ((vt1.c1) IS TRUE) END ASC;
SELECT * FROM vt1 WHERE (CASE CAST(vt1.c1 AS INTEGER)  WHEN ((vt1.c1)>>(vt1.c1)) THEN ((vt1.c0) IS FALSE) WHEN ((vt1.c1) IS TRUE) THEN (NOT (vt1.c1)) WHEN ((vt1.c0)|(vt1.c0)) THEN vt1.c1 WHEN (- (vt1.c0)) THEN (- (vt1.c0)) WHEN CASE WHEN vt1.c0 THEN vt1.c0 END THEN (((vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c1))) ELSE TRIM(vt1.c1, x'17c0') END) ORDER BY (((~ (vt1.c0))) NOT NULL) DESC, CAST(x'' AS NUMERIC) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL MAX(vt1.c1) FROM v0, vt1 WHERE ((((v0.c1, v0.c1)) BETWEEN ((NULLIF(DISTINCT v0.c1, v0.c2), x'0e64')) AND ((CAST(v0.c0 AS REAL), v0.c1 COLLATE NOCASE))));
SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE ((((v0.c1, v0.c1)) BETWEEN ((NULLIF(DISTINCT v0.c1, v0.c2), x'0e64')) AND ((CAST(v0.c0 AS REAL), v0.c1 COLLATE NOCASE)))) ORDER BY ((((vt1.c1)>(vt1.c1)))|((((x'')) BETWEEN ((vt1.c1)) AND ((vt1.c1))))) ASC  NULLS FIRST LIMIT 0X4;
SELECT ALL MAX(v0.c0) FROM v0, vt1 WHERE ((- (v0.c0 COLLATE RTRIM)));
SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE ((((- (v0.c0 COLLATE RTRIM)))AND(((json_quote(v0.c2)) BETWEEN (((vt1.c1)%(v0.c0))) AND (((((((((((v0.c2)OR(v0.c1)))AND(v0.c1)))AND(v0.c1)))AND(vt1.c1)))AND(1699574566))))))) ORDER BY -1234365424  NULLS LAST, NULL  NULLS FIRST, ((((vt1.c0) NOT BETWEEN (NULL) AND (vt1.c1))) IS FALSE) DESC  NULLS LAST LIMIT 2;
SELECT COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON (((vt1.c1, v0.c1, 0.7930462725983787)) NOT BETWEEN ((v0.c1, NULL, ((((NULL)OR(v0.c0)))OR(vt1.c0)))) AND (((v0.c2 IN (v0.c1)), CAST(v0.c0 AS NUMERIC), ((vt1.c1)+(v0.c0))))) WHERE (((('-2073825879', vt1.c0, v0.c1)) BETWEEN (((~ (v0.c1)), ((((((((v0.c2)AND(vt1.c0)))OR(v0.c0)))OR(vt1.c0)))AND(v0.c1)), ((v0.c1) IS TRUE))) AND ((((vt1.c0)||(v0.c1)), CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN v0.c0 END, ((v0.c1) BETWEEN (vt1.c0) AND (vt1.c0))))));
SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN v0 ON (((vt1.c1, v0.c1, 0.7930462725983787)) NOT BETWEEN ((v0.c1, NULL, ((((NULL)OR(v0.c0)))OR(vt1.c0)))) AND (((v0.c2 IN (v0.c1)), CAST(v0.c0 AS NUMERIC), ((vt1.c1)+(v0.c0))))) WHERE (((('-2073825879', vt1.c0, v0.c1)) BETWEEN (((~ (v0.c1)), ((((((((v0.c2)AND(vt1.c0)))OR(v0.c0)))OR(vt1.c0)))AND(v0.c1)), ((v0.c1) IS TRUE))) AND ((((vt1.c0)||(v0.c1)), CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN v0.c0 END, ((v0.c1) BETWEEN (vt1.c0) AND (vt1.c0)))))) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN v0 ON (((vt1.c1, v0.c1, 0.7930462725983787)) NOT BETWEEN ((v0.c1, NULL, ((((NULL)OR(v0.c0)))OR(vt1.c0)))) AND (((v0.c2 IN (v0.c1)), CAST(v0.c0 AS NUMERIC), ((vt1.c1)+(v0.c0))))) WHERE (v0.c1) LIMIT 0;
SELECT MIN(v0.c1) FROM vt1 LEFT OUTER JOIN v0 ON ((((((((v0.c0)OR(v0.c0)))OR(vt1.c0)))AND(v0.c2)))OR(((((((v0.c2)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))) WHERE ((0.9503851456822994 IN ())) ORDER BY TIME(((((v0.c1)AND(vt1.c1)))AND(v0.c2)), CASE WHEN v0.c2 THEN v0.c1 END, ((v0.c2)|(vt1.c1)), CAST(vt1.c1 AS INTEGER), CASE v0.c0  WHEN v0.c0 THEN ']왴 ' WHEN v0.c2 THEN vt1.c1 ELSE v0.c0 END) ASC  NULLS FIRST;
SELECT ALL MIN(v0.c1) FROM vt1 LEFT OUTER JOIN v0 ON ((((((((v0.c0)OR(v0.c0)))OR(vt1.c0)))AND(v0.c2)))OR(((((((v0.c2)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))) WHERE ((((0.9503851456822994 IN ()))AND(CASE WHEN CASE WHEN v0.c2 THEN v0.c0 END THEN v0.c0 WHEN ((v0.c1)-(NULL)) THEN CASE WHEN v0.c1 THEN vt1.c1 ELSE vt1.c1 END WHEN (((v0.c2))<((v0.c1))) THEN (NOT (v0.c1)) ELSE (vt1.c0 IN ()) END))) ORDER BY CAST(vt1.c1 AS TEXT) ASC  NULLS LAST, CAST(SQLITE_COMPILEOPTION_GET(NULL) AS BLOB)  NULLS FIRST, ((((vt1.c1) BETWEEN (x'') AND (v0.c0)))<=(x'074d' COLLATE RTRIM)) DESC LIMIT 0 INTERSECT SELECT MIN(v0.c1) FROM vt1 LEFT OUTER JOIN v0 ON ((((((((v0.c0)OR(v0.c0)))OR(vt1.c0)))AND(v0.c2)))OR(((((((v0.c2)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))) WHERE (((NOT (vt1.c1)) IN (CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c2 END, ((vt1.c1)|('-1961354981')), CASE WHEN vt1.c1 THEN v0.c1 END))) ORDER BY CAST(vt1.c1 AS TEXT) ASC  NULLS LAST, CAST(SQLITE_COMPILEOPTION_GET(NULL) AS BLOB)  NULLS FIRST, ((((vt1.c1) BETWEEN (x'') AND (v0.c0)))<=(x'074d' COLLATE RTRIM)) DESC LIMIT 0x0;
SELECT * FROM v0 WHERE (CAST(((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c0)) AS NUMERIC)) ORDER BY ((v0.c0)/(v0.c2 COLLATE NOCASE)) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 NOT INDEXED WHERE (CAST(((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c0)) AS NUMERIC)) ORDER BY '' ASC  NULLS LAST, '-610614943' ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (PRINTF(CASE x'1d5aa6'  WHEN 'e-ic9K' THEN v0.c1 WHEN v0.c1 THEN v0.c1 END, CASE v0.c2  WHEN v0.c2 THEN v0.c1 END)) ORDER BY '' ASC  NULLS LAST, '-610614943' ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0 WHERE (CAST(((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c0)) AS NUMERIC)) ORDER BY ((v0.c0)/(v0.c2 COLLATE NOCASE)) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 NOT INDEXED WHERE (CAST(((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c0)) AS NUMERIC)) ORDER BY '' ASC  NULLS LAST, '-610614943' ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (PRINTF(CASE x'1d5aa6'  WHEN 'e-ic9K' THEN v0.c1 WHEN v0.c1 THEN v0.c1 END, CASE v0.c2  WHEN v0.c2 THEN v0.c1 END)) ORDER BY '' ASC  NULLS LAST, '-610614943' ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (x'');
SELECT MAX(v0.c2) FROM v0 WHERE (x'') INTERSECT SELECT MAX(v0.c2) FROM v0 WHERE (((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))=(((v0.c1) ISNULL))));
SELECT ALL MAX(vt1.c0) FROM vt1 INNER JOIN v0 ON (((vt1.c1) NOT NULL) IN (NULL)) WHERE ((((vt1.c0, v0.c0, vt1.c0)) BETWEEN ((vt1.c1 COLLATE BINARY, ((vt1.c0)<=(v0.c2)), ((vt1.c1) NOTNULL))) AND ((((vt1.c1)<<(vt1.c1)), ((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c1)), (v0.c2 IN (0.30013121983640834)))))) ORDER BY CASE WHEN vt1.c0 THEN vt1.c1 COLLATE RTRIM WHEN ((v0.c0)IS(v0.c0)) THEN TRIM(0.590411978653492, v0.c0) WHEN ((v0.c1) BETWEEN (vt1.c0) AND (v0.c0)) THEN CAST(v0.c1 AS NUMERIC) WHEN ((v0.c1)<(v0.c2)) THEN ((0Xffffffffcddc4218)=(v0.c1)) ELSE ((v0.c2)%(v0.c0)) END ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 INNER JOIN v0 ON (((vt1.c1) NOT NULL) IN (NULL)) WHERE ((((((vt1.c0, v0.c0, vt1.c0)) BETWEEN ((vt1.c1 COLLATE BINARY, ((vt1.c0)<(v0.c2)), ((vt1.c1) NOTNULL))) AND ((((vt1.c1)<<(vt1.c1)), ((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c1)), (v0.c2 IN (0.30013121983640834))))))AND(NULL))) ORDER BY CASE WHEN vt1.c0 THEN vt1.c1 COLLATE RTRIM WHEN ((v0.c0)IS(v0.c0)) THEN TRIM(0.590411978653492, v0.c0) WHEN ((v0.c1) BETWEEN (vt1.c0) AND (v0.c0)) THEN CAST(v0.c1 AS NUMERIC) WHEN ((v0.c1)<(v0.c2)) THEN ((0xffffffffcddc4218)==(v0.c1)) ELSE ((v0.c2)%(v0.c0)) END ASC  NULLS FIRST LIMIT 4;
SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT * FROM vt1, v0 WHERE (vt1.c1) LIMIT 0 INTERSECT SELECT * FROM vt1, v0 WHERE (CASE WHEN 1.458110164E9 THEN NULL WHEN CASE vt1.c0  WHEN v0.c0 THEN vt1.c0 ELSE vt1.c1 END THEN vt1.c1 END) LIMIT 0;
SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT * FROM vt1, v0 WHERE (vt1.c1) LIMIT 0 INTERSECT SELECT * FROM vt1, v0 WHERE (CASE WHEN 1.458110164E9 THEN NULL WHEN CASE vt1.c0  WHEN v0.c0 THEN vt1.c0 ELSE vt1.c1 END THEN vt1.c1 END) LIMIT 0;
SELECT COUNT(*) FROM vt1 WHERE (CAST((((vt1.c1, vt1.c0, 1468832677))<((vt1.c1, vt1.c0, 0.6511541469543884))) AS BLOB)) ORDER BY (CAST(vt1.c0 AS TEXT) IN (((0.9819117943061556)|(NULL)), vt1.c1, vt1.c0))  NULLS FIRST, ((('')) NOT BETWEEN ((NULL)) AND ((((vt1.c0)%(vt1.c0)))))  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((CAST((((vt1.c1, vt1.c0, 0X578c9ba5))<((vt1.c1, vt1.c0, 0.6511541469543884))) AS BLOB))AND('1630845407'))) ORDER BY (CAST(vt1.c0 AS TEXT) IN (((0.9819117943061556)|(NULL)), vt1.c1, vt1.c0))  NULLS FIRST, ((('')) NOT BETWEEN ((NULL)) AND ((((vt1.c0)%(vt1.c0)))))  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (0Xba137a4) ORDER BY (CAST(vt1.c0 AS TEXT) IN (((0.9819117943061556)|(NULL)), vt1.c1, vt1.c0))  NULLS FIRST, ((('')) NOT BETWEEN ((NULL)) AND ((((vt1.c0)%(vt1.c0)))))  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE WHEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END THEN UPPER(vt1.c0) WHEN (vt1.c1 IN ()) THEN ((vt1.c0)LIKE(vt1.c1)) ELSE x'' END);
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((CASE WHEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END THEN UPPER(vt1.c0) WHEN (vt1.c1 IN ()) THEN ((vt1.c0)LIKE(vt1.c1)) ELSE x'' END)AND(LIKELY((- (vt1.c1)))))) ORDER BY ((((NULL)*(vt1.c0)))<<(((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))) DESC  NULLS FIRST, CAST((vt1.c0 IN ()) AS REAL) INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (((((CAST(vt1.c1 AS NUMERIC))OR(LIKELIHOOD(DISTINCT vt1.c0, vt1.c1))))OR(0Xfffffffff5f0e763))) ORDER BY ((((NULL)*(vt1.c0)))<<(((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))) DESC  NULLS FIRST, CAST((vt1.c0 IN ()) AS REAL);
SELECT * FROM v0, vt1 WHERE (((v0.c0) NOTNULL));
SELECT DISTINCT * FROM v0, vt1 WHERE (((v0.c0) NOTNULL)) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((CASE WHEN v0.c1 THEN v0.c2 END) IS FALSE));
SELECT * FROM v0, vt1 WHERE (((v0.c0) NOTNULL));
SELECT DISTINCT * FROM v0, vt1 WHERE (((v0.c0) NOTNULL)) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((CASE WHEN v0.c1 THEN v0.c2 END) IS FALSE));
SELECT ALL COUNT(*) FROM vt1 NOT INDEXED, v0 WHERE ((((vt1.c0, vt1.c0, v0.c2)) BETWEEN ((CAST(v0.c1 AS NUMERIC), (v0.c0 IN (vt1.c1, vt1.c1)), ((vt1.c0) NOTNULL))) AND ((TOTAL_CHANGES(), ((((vt1.c0)OR(vt1.c0)))OR(v0.c1)), '\b#Wq<')))) ORDER BY (((- (vt1.c0))) NOT NULL) ASC  NULLS FIRST, NULL DESC, (((vt1.c0, v0.c0, vt1.c1, v0.c0, vt1.c0, v0.c1))=((929445258, vt1.c1, v0.c0, vt1.c0, vt1.c0, vt1.c0))) COLLATE BINARY;
SELECT ALL COUNT(*) FROM vt1 NOT INDEXED, v0 WHERE ((((vt1.c0, vt1.c0, v0.c2)) BETWEEN ((CAST(v0.c1 AS NUMERIC), (v0.c0 IN (vt1.c1, vt1.c1)), ((vt1.c0) NOTNULL))) AND ((TOTAL_CHANGES(), ((((vt1.c0)OR(vt1.c0)))OR(v0.c1)), '\b#Wq<')))) ORDER BY (((- (vt1.c0))) NOT NULL) ASC  NULLS FIRST, NULL DESC, (((vt1.c0, v0.c0, vt1.c1, v0.c0, vt1.c0, v0.c1))==((0X3766358a, vt1.c1, v0.c0, vt1.c0, vt1.c0, vt1.c0))) COLLATE BINARY LIMIT 0x3 INTERSECT SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((((vt1.c1 IN (v0.c0, NULL))))>=((CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c0 END)))) ORDER BY (((- (vt1.c0))) NOT NULL) ASC  NULLS FIRST, NULL DESC, (((vt1.c0, v0.c0, vt1.c1, v0.c0, vt1.c0, v0.c1))=((929445258, vt1.c1, v0.c0, vt1.c0, vt1.c0, vt1.c0))) COLLATE BINARY LIMIT 0x3;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (json_object(((v0.c1)<<(0.9551672783798402)), (((v0.c0, 0.9166344772600199, v0.c2))<=((v0.c2, v0.c1, v0.c2))), CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END, ((v0.c0) IS TRUE), (('C') IS TRUE), ((v0.c1)GLOB(v0.c1))));
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (json_object(((v0.c1)<<(0.9551672783798402)), (((v0.c0, 0.9166344772600199, v0.c2))<=((v0.c2, v0.c1, v0.c2))), CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END, ((v0.c0) IS TRUE), (('C') IS TRUE), ((v0.c1)GLOB(v0.c1)))) ORDER BY v0.c1  NULLS FIRST LIMIT 0X2;
SELECT * FROM v0, vt1 WHERE ((((v0.c0 IN ()))IS(CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN '' ELSE vt1.c0 END)));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((v0.c0 IN ()))IS(CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN '' ELSE vt1.c0 END)))AND(((v0.c0 COLLATE BINARY) BETWEEN (((vt1.c0) NOT BETWEEN (v0.c1) AND (v0.c0))) AND (((v0.c1) NOT NULL)))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((((v0.c1)AND(vt1.c1)))OR(v0.c2)))!=(json_array(vt1.c0, vt1.c1, v0.c1, v0.c2)))) LIMIT 0X1;
SELECT * FROM v0, vt1 WHERE ((((v0.c0 IN ()))IS(CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN '' ELSE vt1.c0 END)));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((v0.c0 IN ()))IS(CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN '' ELSE vt1.c0 END)))AND(((v0.c0 COLLATE BINARY) BETWEEN (((vt1.c0) NOT BETWEEN (v0.c1) AND (v0.c0))) AND (((v0.c1) NOT NULL)))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((((v0.c1)AND(vt1.c1)))OR(v0.c2)))!=(json_array(vt1.c0, vt1.c1, v0.c1, v0.c2)))) LIMIT 0X1;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c1) NOTNULL)) BETWEEN (LIKE(vt1.c0, 0.01757370429893601)) AND (vt1.c1 COLLATE NOCASE))) ORDER BY vt1.c0, ((((((((vt1.c0)AND(-1786032038)))AND(vt1.c0)))OR(vt1.c0)))||(vt1.c0 COLLATE RTRIM));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c1) NOTNULL)) BETWEEN (LIKE(vt1.c0, 0.01757370429893601)) AND (vt1.c1 COLLATE NOCASE))) ORDER BY vt1.c1 ASC  NULLS FIRST, vt1.c1, 1.847681787E9  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE (v0.c0);
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c0)AND((- (CAST(v0.c1 AS REAL)))))) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((v0.c0) IS TRUE) IN (((v0.c2)OR(v0.c1)), ((v0.c1)GLOB(v0.c2)), CAST(v0.c0 AS NUMERIC)))) LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (CAST('704086828' AS REAL)) ORDER BY (((v0.c1, vt1.c0, vt1.c0, v0.c0, vt1.c1)) NOT BETWEEN ((v0.c2, ((vt1.c0)LIKE(v0.c0)), (+ (v0.c0)), ((v0.c2) ISNULL), ((v0.c1)==(v0.c1)))) AND ((((NULL)<(v0.c1)), CAST(vt1.c0 AS BLOB), (v0.c2 IN (vt1.c0, v0.c0)), 0.8061409870793563, v0.c2))) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (CAST('704086828' AS REAL)) ORDER BY (((v0.c1, vt1.c0, vt1.c0, v0.c0, vt1.c1)) NOT BETWEEN ((v0.c2, ((vt1.c0)LIKE(v0.c0)), (+ (v0.c0)), ((v0.c2) ISNULL), ((v0.c1)==(v0.c1)))) AND ((((NULL)<(v0.c1)), CAST(vt1.c0 AS BLOB), (v0.c2 IN (vt1.c0, v0.c0)), 0.8061409870793563, v0.c2))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (CAST('704086828' AS REAL)) ORDER BY (((v0.c1, vt1.c0, vt1.c0, v0.c0, vt1.c1)) NOT BETWEEN ((v0.c2, ((vt1.c0)LIKE(v0.c0)), (+ (v0.c0)), ((v0.c2) ISNULL), ((v0.c1)==(v0.c1)))) AND ((((NULL)<(v0.c1)), CAST(vt1.c0 AS BLOB), (v0.c2 IN (vt1.c0, v0.c0)), 0.8061409870793563, v0.c2))) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (CAST('704086828' AS REAL)) ORDER BY (((v0.c1, vt1.c0, vt1.c0, v0.c0, vt1.c1)) NOT BETWEEN ((v0.c2, ((vt1.c0)LIKE(v0.c0)), (+ (v0.c0)), ((v0.c2) ISNULL), ((v0.c1)==(v0.c1)))) AND ((((NULL)<(v0.c1)), CAST(vt1.c0 AS BLOB), (v0.c2 IN (vt1.c0, v0.c0)), 0.8061409870793563, v0.c2))) ASC  NULLS LAST LIMIT 0;
SELECT MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0)!=(vt1.c0))) IS TRUE));
SELECT MAX(vt1.c1) FROM vt1 WHERE (((((((vt1.c0)<(vt1.c0))) IS TRUE))AND(((((json_array_length(vt1.c1, vt1.c1))AND(CASE WHEN vt1.c0 THEN vt1.c1 WHEN '1291904757' THEN vt1.c0 ELSE vt1.c1 END)))OR(vt1.c1)))));
SELECT COUNT(*) FROM v0 WHERE (CAST(((v0.c2) BETWEEN (v0.c0) AND (v0.c0)) AS TEXT)) ORDER BY CASE WHEN LIKELIHOOD(v0.c0, v0.c2) THEN ((v0.c0) IS FALSE) WHEN ((v0.c1) IS FALSE) THEN ((((((((v0.c0)OR(v0.c0)))AND(NULL)))OR(0.209230723632423)))OR('-1728737727')) ELSE IFNULL(v0.c0, v0.c2) END  NULLS FIRST, CASE v0.c1  WHEN v0.c2 THEN v0.c0 ELSE v0.c1 END COLLATE NOCASE ASC;
SELECT ALL COUNT(*) FROM v0 WHERE (CAST(((v0.c2) BETWEEN (v0.c0) AND (v0.c0)) AS TEXT)) ORDER BY CASE WHEN LIKELIHOOD(v0.c0, v0.c2) THEN ((v0.c0) IS FALSE) WHEN ((v0.c1) IS FALSE) THEN ((((((((v0.c0)OR(v0.c0)))AND(NULL)))OR(0.209230723632423)))OR('-1728737727')) ELSE IFNULL(v0.c0, v0.c2) END  NULLS FIRST, CASE v0.c1  WHEN v0.c2 THEN v0.c0 ELSE v0.c1 END COLLATE NOCASE ASC INTERSECT SELECT COUNT(*) FROM v0 WHERE (((((((((((((v0.c0)OR(v0.c2)))OR(v0.c1)))OR(v0.c1)))AND(x'0f4a50')))AND(v0.c1))) NOT BETWEEN (v0.c0 COLLATE BINARY) AND (((((((v0.c1)OR(v0.c1)))AND(v0.c1)))OR(v0.c2))))) ORDER BY CASE WHEN LIKELIHOOD(v0.c0, v0.c2) THEN ((v0.c0) IS FALSE) WHEN ((v0.c1) IS FALSE) THEN ((((((((v0.c0)OR(v0.c0)))AND(NULL)))OR(0.209230723632423)))OR('-1728737727')) ELSE IFNULL(v0.c0, v0.c2) END  NULLS FIRST, CASE v0.c1  WHEN v0.c2 THEN v0.c0 ELSE v0.c1 END COLLATE NOCASE ASC;
SELECT MAX(v0.c2) FROM v0, vt1 WHERE (((v0.c1 COLLATE RTRIM) IS TRUE)) ORDER BY vt1.c0  NULLS FIRST, ((((v0.c0) NOT NULL))>=(((vt1.c0)<<(v0.c0))));
SELECT MAX(v0.c2) FROM v0, vt1 WHERE (((((v0.c1 COLLATE RTRIM) IS TRUE))AND(vt1.c0))) ORDER BY HEX(((((vt1.c1)AND(vt1.c1)))AND(vt1.c1))) DESC  NULLS FIRST, COALESCE(((v0.c0) BETWEEN (vt1.c1) AND (v0.c0)), ((vt1.c1) BETWEEN (v0.c0) AND (v0.c1))) ASC LIMIT 1 INTERSECT SELECT ALL MAX(v0.c2) FROM v0, vt1 WHERE ((~ (CASE vt1.c0  WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END))) ORDER BY HEX(((((vt1.c1)AND(vt1.c1)))AND(vt1.c1))) DESC  NULLS FIRST, COALESCE(((v0.c0) BETWEEN (vt1.c1) AND (v0.c0)), ((vt1.c1) BETWEEN (v0.c0) AND (v0.c1))) ASC LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt1 NOT INDEXED WHERE ((vt1.c1 IN ()) COLLATE BINARY) ORDER BY '0.8680590165866197' ASC, CAST(CASE WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END AS INTEGER);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((vt1.c1 IN ()) COLLATE BINARY) ORDER BY ((((vt1.c0)|(vt1.c1)))>>(((vt1.c0)+(vt1.c1))))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS TEXT)) BETWEEN (((((((vt1.c1)OR('B%')))AND(vt1.c0)))OR(vt1.c0))) AND (vt1.c1))) ORDER BY ((((vt1.c0)|(vt1.c1)))>>(((vt1.c0)+(vt1.c1))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((((((v0.c1)AND(v0.c2)))OR(v0.c1)), (+ (v0.c1)), CASE NULL  WHEN v0.c0 THEN v0.c0 END, ((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))))!=((UNLIKELY(v0.c2), CAST(v0.c2 AS REAL), CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END, (~ (x''))))));
SELECT DISTINCT * FROM v0 WHERE ((((((((((v0.c1)AND(v0.c2)))OR(v0.c1)), (+ (v0.c1)), CASE NULL  WHEN v0.c0 THEN v0.c0 END, ((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))))<>((UNLIKELY(v0.c2), CAST(v0.c2 AS REAL), CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END, (~ (x''))))))AND(v0.c2))) ORDER BY (((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) IN (((((((((((((v0.c1)AND(v0.c0)))AND(v0.c2)))OR(0.30288432484726047)))OR(v0.c2)))OR('-2046289318')))OR(v0.c2)))) ASC, (- (v0.c0)) COLLATE NOCASE;
SELECT ALL * FROM v0 WHERE ((((((((v0.c1)AND(v0.c2)))OR(v0.c1)), (+ (v0.c1)), CASE NULL  WHEN v0.c0 THEN v0.c0 END, ((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))))!=((UNLIKELY(v0.c2), CAST(v0.c2 AS REAL), CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END, (~ (x''))))));
SELECT DISTINCT * FROM v0 WHERE ((((((((((v0.c1)AND(v0.c2)))OR(v0.c1)), (+ (v0.c1)), CASE NULL  WHEN v0.c0 THEN v0.c0 END, ((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))))<>((UNLIKELY(v0.c2), CAST(v0.c2 AS REAL), CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END, (~ (x''))))))AND(v0.c2))) ORDER BY (((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) IN (((((((((((((v0.c1)AND(v0.c0)))AND(v0.c2)))OR(0.30288432484726047)))OR(v0.c2)))OR('-2046289318')))OR(v0.c2)))) ASC, (- (v0.c0)) COLLATE NOCASE;
SELECT MIN(v0.c0) FROM v0 INNER JOIN vt1 ON CAST(v0.c0 AS TEXT) WHERE (((((((((((((v0.c2)IS NOT(vt1.c1)))AND('929445258')))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c1 END)))AND((NOT (vt1.c1)))))AND(HEX(DISTINCT vt1.c1))))AND(((((((v0.c2)AND(vt1.c0)))AND(x'')))AND(v0.c0))))) ORDER BY ((((((vt1.c1)AND(v0.c1)))AND(v0.c0))) IS FALSE) ASC, ((((v0.c0, vt1.c0, v0.c1, v0.c1))<=(('-1312942963', v0.c2, v0.c0, vt1.c0))) IN (vt1.c1, v0.c2 COLLATE NOCASE)) ASC;
SELECT DISTINCT MIN(v0.c0) FROM v0 INNER JOIN vt1 ON CAST(v0.c0 AS TEXT) WHERE (((((((((((((((v0.c2)IS NOT(vt1.c1)))AND('929445258')))OR(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c1 END)))AND((NOT (vt1.c1)))))AND(HEX(DISTINCT vt1.c1))))AND(((((((v0.c2)AND(vt1.c0)))AND(x'')))AND(v0.c0)))))AND((0.8324637754388037 IN (v0.c2, -1139474732, v0.c2)) COLLATE RTRIM))) ORDER BY ((x'5e96') IS FALSE), ((1769291611)LIKE((v0.c0 IN (v0.c1))))  NULLS LAST, (CASE WHEN v0.c0 THEN vt1.c0 ELSE v0.c2 END IN ())  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 INNER JOIN vt1 ON CAST(v0.c0 AS TEXT) WHERE ((((v0.c1) ISNULL) IN ('0.6286766463344724'))) ORDER BY ((x'5e96') IS FALSE), ((1769291611)LIKE((v0.c0 IN (v0.c1))))  NULLS LAST, (CASE WHEN v0.c0 THEN vt1.c0 ELSE v0.c2 END IN ())  NULLS FIRST LIMIT 0X0;
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((- (v0.c0)));
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((((- (v0.c0)))AND(((CAST(v0.c0 AS INTEGER))|(TRIM(v0.c0)))))) LIMIT 0X1;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (CASE CAST(vt1.c0 AS BLOB)  WHEN (vt1.c1 IN ('h
')) THEN vt1.c1 WHEN (vt1.c0 IN ()) THEN ((((((((((vt1.c1)AND(vt1.c0)))OR(NULL)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c1)) WHEN ((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c1)) THEN CAST(vt1.c0 AS INTEGER) END);
SELECT MIN(vt1.c1) FROM vt1 WHERE (CASE CAST(vt1.c0 AS BLOB)  WHEN (vt1.c1 IN ('h
')) THEN vt1.c1 WHEN (vt1.c0 IN ()) THEN ((((((((((vt1.c1)AND(vt1.c0)))OR(NULL)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c1)) WHEN ((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c1)) THEN CAST(vt1.c0 AS INTEGER) END) LIMIT 0X1 INTERSECT SELECT MIN(vt1.c1) FROM vt1 WHERE (NULL) LIMIT 1;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c1) NOT NULL))|(CAST(vt1.c1 AS REAL))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c1) NOT NULL))|(CAST(vt1.c1 AS REAL))));
SELECT * FROM v0, vt1 WHERE (((((v0.c2, vt1.c1))>((v0.c1, vt1.c0))) IN (((v0.c0) NOT NULL)))) ORDER BY CASE WHEN (- (v0.c1)) THEN ((vt1.c1)OR(vt1.c1)) END  NULLS LAST, ((LOWER(v0.c1))||(v0.c2 COLLATE RTRIM)), vt1.c1 ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((v0.c2, vt1.c1))>((v0.c1, vt1.c0))) IN (((v0.c0) NOT NULL))))AND(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)) COLLATE RTRIM))) ORDER BY CASE WHEN (- (v0.c1)) THEN ((vt1.c1)OR(vt1.c1)) END  NULLS LAST, ((LOWER(v0.c1))||(v0.c2 COLLATE RTRIM)), vt1.c1 ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((((v0.c2, vt1.c1))>((v0.c1, vt1.c0))) IN (((v0.c0) NOT NULL)))) ORDER BY CASE WHEN (- (v0.c1)) THEN ((vt1.c1)OR(vt1.c1)) END  NULLS LAST, ((LOWER(v0.c1))||(v0.c2 COLLATE RTRIM)), vt1.c1 ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((v0.c2, vt1.c1))>((v0.c1, vt1.c0))) IN (((v0.c0) NOT NULL))))AND(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)) COLLATE RTRIM))) ORDER BY CASE WHEN (- (v0.c1)) THEN ((vt1.c1)OR(vt1.c1)) END  NULLS LAST, ((LOWER(v0.c1))||(v0.c2 COLLATE RTRIM)), vt1.c1 ASC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE ((0.5162779743713408 IN (vt1.c0)));
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE ((((0.5162779743713408 IN (vt1.c0)))AND(((((vt1.c0) NOT BETWEEN (vt1.c1) AND (x'5dfd79'))) IS FALSE)))) ORDER BY CAST(vt1.c0 AS INTEGER), (- ((((v0.c2, vt1.c1, vt1.c0, vt1.c0, NULL)) NOT BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c2, vt1.c0)) AND ((vt1.c0, vt1.c0, v0.c2, vt1.c1, vt1.c1)))))  NULLS LAST INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE (vt1.c1) ORDER BY CAST(vt1.c0 AS INTEGER), (- ((((v0.c2, vt1.c1, vt1.c0, vt1.c0, NULL)) NOT BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c2, vt1.c0)) AND ((vt1.c0, vt1.c0, v0.c2, vt1.c1, vt1.c1)))))  NULLS LAST;
SELECT ALL MIN(vt1.c1) FROM v0 INNER JOIN vt1 ON (NOT (((v0.c1) BETWEEN (vt1.c0) AND (v0.c2)))) WHERE (CAST(vt1.c0 COLLATE BINARY AS NUMERIC)) ORDER BY (((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((HEX(v0.c0)))), TRIM((((v0.c0, v0.c0))=((v0.c0, v0.c0))), v0.c0) ASC  NULLS LAST, (((((v0.c0, v0.c2, -9.15029424E8))<((vt1.c1, vt1.c0, v0.c0)))) NOT BETWEEN (1.451872936E9) AND (CASE WHEN v0.c0 THEN '381300539' WHEN 0.892971901040749 THEN vt1.c0 ELSE vt1.c1 END)) ASC  NULLS FIRST, ((v0.c2) NOT BETWEEN (vt1.c1) AND ('1029704324')) COLLATE BINARY DESC;
SELECT DISTINCT MIN(vt1.c1) FROM v0 INNER JOIN vt1 ON (NOT (((v0.c1) BETWEEN (vt1.c0) AND (v0.c2)))) WHERE (CAST(vt1.c0 COLLATE BINARY AS NUMERIC)) ORDER BY (((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((HEX(v0.c0)))), TRIM((((v0.c0, v0.c0))==((v0.c0, v0.c0))), v0.c0) ASC  NULLS LAST, (((((v0.c0, v0.c2, -9.15029424E8))<((vt1.c1, vt1.c0, v0.c0)))) NOT BETWEEN (1.451872936E9) AND (CASE WHEN v0.c0 THEN '381300539' WHEN 0.892971901040749 THEN vt1.c0 ELSE vt1.c1 END)) ASC  NULLS FIRST, ((v0.c2) NOT BETWEEN (vt1.c1) AND ('1029704324')) COLLATE BINARY DESC LIMIT 0;
SELECT * FROM vt1, v0 WHERE ((HEX(v0.c0) IN (CASE vt1.c0  WHEN vt1.c1 THEN 3.740108E8 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 END, NULL)));
SELECT DISTINCT * FROM vt1, v0 WHERE ((HEX(v0.c0) IN (CASE vt1.c0  WHEN vt1.c1 THEN 3.740108E8 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 END))) ORDER BY HEX(DISTINCT ((vt1.c0)/(vt1.c1))) DESC  NULLS FIRST, UPPER(DISTINCT (v0.c0 IN (vt1.c0))) ASC  NULLS FIRST, x'1a' COLLATE RTRIM  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((~ (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1))))) ORDER BY HEX(DISTINCT ((vt1.c0)/(vt1.c1))) DESC  NULLS FIRST, UPPER(DISTINCT (v0.c0 IN (vt1.c0))) ASC  NULLS FIRST, x'1a' COLLATE RTRIM  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((HEX(v0.c0) IN (CASE vt1.c0  WHEN vt1.c1 THEN 3.740108E8 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 END, NULL)));
SELECT DISTINCT * FROM vt1, v0 WHERE ((HEX(v0.c0) IN (CASE vt1.c0  WHEN vt1.c1 THEN 3.740108E8 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 END))) ORDER BY HEX(DISTINCT ((vt1.c0)/(vt1.c1))) DESC  NULLS FIRST, UPPER(DISTINCT (v0.c0 IN (vt1.c0))) ASC  NULLS FIRST, x'1a' COLLATE RTRIM  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((~ (((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1))))) ORDER BY HEX(DISTINCT ((vt1.c0)/(vt1.c1))) DESC  NULLS FIRST, UPPER(DISTINCT (v0.c0 IN (vt1.c0))) ASC  NULLS FIRST, x'1a' COLLATE RTRIM  NULLS FIRST;
SELECT COUNT(*) FROM vt1, v0 WHERE ((+ ('~W'))) ORDER BY (NOT (((v0.c2)/(vt1.c0))))  NULLS LAST, x'428f80'  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((((+ ('~W')))AND(x''))) ORDER BY (NOT (((v0.c2)/(vt1.c0))))  NULLS LAST, x'428f80'  NULLS LAST LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt1, v0 WHERE (CASE ((((((((v0.c0)AND(vt1.c1)))OR(0.8716922496214059)))OR(x'9321')))OR(v0.c1))  WHEN (- (vt1.c1)) THEN LOWER(DISTINCT v0.c1) WHEN HEX(DISTINCT v0.c0) THEN ((((((vt1.c0)OR(v0.c1)))AND(vt1.c1)))AND(v0.c1)) WHEN (((x'', 0.16720870065065352))=((v0.c0, vt1.c1))) THEN CAST('-1600599204' AS TEXT) ELSE ((vt1.c0)OR(vt1.c1)) END) ORDER BY (NOT (((v0.c2)/(vt1.c0))))  NULLS LAST, x'428f80'  NULLS LAST LIMIT 0x0;
SELECT MAX(vt1.c1) FROM vt1 WHERE (LIKELY('-886767586'));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((LIKELY('-886767586'))AND((NOT (0.13132083760626834))))) ORDER BY ((0.7385707041329678) IS TRUE) ASC  NULLS LAST LIMIT 0;
SELECT MIN(v0.c1) FROM v0 WHERE (0.6235632048815719);
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (0.6235632048815719);
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)))%(vt1.c0)));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)))%(vt1.c0)));
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)) COLLATE RTRIM WHERE (CAST(vt1.c0 AS REAL)) ORDER BY vt1.c1 ASC, NULL ASC;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)) COLLATE RTRIM WHERE (CAST(vt1.c0 AS REAL)) ORDER BY CAST(((v0.c0) BETWEEN (v0.c2) AND (v0.c0)) AS NUMERIC) ASC, ((((vt1.c1) NOT NULL))!=(CAST(v0.c2 AS BLOB))) ASC  NULLS FIRST;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)) COLLATE RTRIM WHERE (CAST(vt1.c0 AS REAL)) ORDER BY vt1.c1 ASC, NULL ASC;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)) COLLATE RTRIM WHERE (CAST(vt1.c0 AS REAL)) ORDER BY CAST(((v0.c0) BETWEEN (v0.c2) AND (v0.c0)) AS NUMERIC) ASC, ((((vt1.c1) NOT NULL))!=(CAST(v0.c2 AS BLOB))) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 INNER JOIN v0 ON (((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))))) WHERE (CASE WHEN vt1.c0 THEN ('x8鈴콬++僷녥h' IN ()) WHEN NULL THEN LIKE(v0.c0, v0.c2) END) ORDER BY 0x560aba44  NULLS LAST, (((((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c2))))+(CAST(vt1.c0 AS REAL))) DESC;
SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON (((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))))) WHERE (CASE WHEN vt1.c0 THEN ('x8鈴콬++僷녥h' IN ()) WHEN NULL THEN LIKE(v0.c0, v0.c2) END) ORDER BY (- (((vt1.c0) IS TRUE))) LIMIT 0x0;
SELECT ALL * FROM vt1 INNER JOIN v0 ON (((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))))) WHERE (CASE WHEN vt1.c0 THEN ('x8鈴콬++僷녥h' IN ()) WHEN NULL THEN LIKE(v0.c0, v0.c2) END) ORDER BY 0x560aba44  NULLS LAST, (((((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c2))))+(CAST(vt1.c0 AS REAL))) DESC;
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE ((NULL IN ()));
SELECT DISTINCT MIN(v0.c1) FROM vt1, v0 WHERE ((((NULL IN ()))AND(((UPPER(v0.c1))-((-1949206016 IN (v0.c2, vt1.c0))))))) ORDER BY (((((+ (vt1.c0)))OR(x'')))OR(json_valid(vt1.c0)))  NULLS FIRST, (((~ (v0.c2))) NOT NULL) ASC, vt1.c0 LIMIT 2;
SELECT * FROM vt1, v0 WHERE ((((vt1.c0 IN (v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN x'' THEN v0.c0 ELSE v0.c0 END) AND (vt1.c1)));
SELECT ALL * FROM vt1, v0 WHERE ((((((vt1.c0 IN (v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN x'' THEN v0.c0 ELSE v0.c0 END) AND (vt1.c1)))AND(0.9625038603145135)));
SELECT * FROM vt1, v0 WHERE ((((vt1.c0 IN (v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN x'' THEN v0.c0 ELSE v0.c0 END) AND (vt1.c1)));
SELECT ALL * FROM vt1, v0 WHERE ((((((vt1.c0 IN (v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN x'' THEN v0.c0 ELSE v0.c0 END) AND (vt1.c1)))AND(0.9625038603145135)));
SELECT * FROM vt1 WHERE (x'57a1') ORDER BY (((vt1.c1)IS(vt1.c1)) IN (((vt1.c1)>=(vt1.c0)), vt1.c0 COLLATE BINARY)), vt1.c1 ASC  NULLS FIRST, '297690481';
SELECT * FROM vt1 WHERE (x'57a1') ORDER BY (((vt1.c1)IS(vt1.c1)) IN (((vt1.c1)>=(vt1.c0)), vt1.c0 COLLATE BINARY)), vt1.c1 ASC  NULLS FIRST, '297690481' LIMIT 0;
SELECT * FROM vt1 WHERE (x'57a1') ORDER BY (((vt1.c1)IS(vt1.c1)) IN (((vt1.c1)>=(vt1.c0)), vt1.c0 COLLATE BINARY)), vt1.c1 ASC  NULLS FIRST, '297690481';
SELECT * FROM vt1 WHERE (x'57a1') ORDER BY (((vt1.c1)IS(vt1.c1)) IN (((vt1.c1)>=(vt1.c0)), vt1.c0 COLLATE BINARY)), vt1.c1 ASC  NULLS FIRST, '297690481' LIMIT 0;
SELECT MIN(v0.c2) FROM vt1, v0 WHERE (-6.52094336E8) ORDER BY ((UNLIKELY(vt1.c1))>>(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))) DESC  NULLS LAST;
SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE (((-6.52094336E8)AND(CAST((- ('-558414326')) AS BLOB)))) ORDER BY v0.c2, CASE TRIM(DISTINCT vt1.c1, vt1.c1)  WHEN ((vt1.c1) IS TRUE) THEN QUOTE(v0.c2) ELSE CASE WHEN vt1.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN vt1.c1 THEN v0.c0 ELSE v0.c0 END END ASC  NULLS LAST INTERSECT SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE (SQLITE_VERSION()) ORDER BY v0.c2, CASE TRIM(DISTINCT vt1.c1, vt1.c1)  WHEN ((vt1.c1) IS TRUE) THEN QUOTE(v0.c2) ELSE CASE WHEN vt1.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN vt1.c1 THEN v0.c0 ELSE v0.c0 END END ASC  NULLS LAST;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON v0.c2 WHERE (((((((((((((v0.c1)AND(v0.c1)))AND(vt1.c0)))OR(v0.c1)))AND(v0.c2)))AND(NULL)))AND((v0.c1 IN ()))));
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON v0.c2 WHERE (((((((((((((v0.c1)AND(v0.c1)))AND(vt1.c0)))OR(v0.c1)))AND(v0.c2)))AND(NULL)))AND((v0.c1 IN ())))) ORDER BY ((CAST(vt1.c1 AS TEXT)) BETWEEN (0.8452580696638512 COLLATE BINARY) AND (v0.c2 COLLATE NOCASE))  NULLS LAST, CASE CAST(v0.c2 AS TEXT)  WHEN ((((v0.c2)AND(vt1.c0)))OR(v0.c2)) THEN UNLIKELY(v0.c0) WHEN ((v0.c2) ISNULL) THEN (NOT (v0.c0)) WHEN ((vt1.c1) BETWEEN (v0.c1) AND (vt1.c1)) THEN 0X7f8d001 END, (~ (v0.c0)) COLLATE RTRIM DESC;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON v0.c2 WHERE (((((((((((((v0.c1)AND(v0.c1)))AND(vt1.c0)))OR(v0.c1)))AND(v0.c2)))AND(NULL)))AND((v0.c1 IN ()))));
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON v0.c2 WHERE (((((((((((((v0.c1)AND(v0.c1)))AND(vt1.c0)))OR(v0.c1)))AND(v0.c2)))AND(NULL)))AND((v0.c1 IN ())))) ORDER BY ((CAST(vt1.c1 AS TEXT)) BETWEEN (0.8452580696638512 COLLATE BINARY) AND (v0.c2 COLLATE NOCASE))  NULLS LAST, CASE CAST(v0.c2 AS TEXT)  WHEN ((((v0.c2)AND(vt1.c0)))OR(v0.c2)) THEN UNLIKELY(v0.c0) WHEN ((v0.c2) ISNULL) THEN (NOT (v0.c0)) WHEN ((vt1.c1) BETWEEN (v0.c1) AND (vt1.c1)) THEN 0X7f8d001 END, (~ (v0.c0)) COLLATE RTRIM DESC;
SELECT ALL * FROM vt1 WHERE (SQLITE_COMPILEOPTION_USED(((((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)))AND('-2075495331')))) ORDER BY (((vt1.c0)) NOT BETWEEN ((json_type('1367184240'))) AND (((vt1.c0 IN (vt1.c1, vt1.c1)))))  NULLS FIRST, LIKELIHOOD(DISTINCT ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c1) IS FALSE)) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (((SQLITE_COMPILEOPTION_USED(((((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)))AND('-2075495331'))))AND(vt1.c0))) ORDER BY (((vt1.c0)) NOT BETWEEN ((json_type('1367184240'))) AND (((vt1.c0 IN (vt1.c1, vt1.c1)))))  NULLS FIRST, LIKELIHOOD(DISTINCT ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c1) IS FALSE)) DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)))LIKE(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN '
zlnQ	Bm%' ELSE vt1.c1 END))) ORDER BY (((vt1.c0)) NOT BETWEEN ((json_type('1367184240'))) AND (((vt1.c0 IN (vt1.c1, vt1.c1)))))  NULLS FIRST, LIKELIHOOD(DISTINCT ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c1) IS FALSE)) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (SQLITE_COMPILEOPTION_USED(((((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)))AND('-2075495331')))) ORDER BY (((vt1.c0)) NOT BETWEEN ((json_type('1367184240'))) AND (((vt1.c0 IN (vt1.c1, vt1.c1)))))  NULLS FIRST, LIKELIHOOD(DISTINCT ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c1) IS FALSE)) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt1, v0 WHERE (CASE WHEN (vt1.c1 IN (v0.c2)) THEN CAST(v0.c0 AS REAL) END) ORDER BY (NOT (DATETIME(x'11', v0.c2, v0.c1, v0.c2))), v0.c1 DESC;
SELECT COUNT(*) FROM vt1, v0 WHERE (CASE WHEN (vt1.c1 IN (v0.c2)) THEN CAST(v0.c0 AS REAL) END) ORDER BY (NOT (DATETIME(x'11', v0.c2, v0.c1, v0.c2))), v0.c1 DESC LIMIT 0;
SELECT COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON ((CAST(v0.c0 AS INTEGER))AND(-812775803)) WHERE ((((vt1.c0 IN (v0.c1)))&(vt1.c1 COLLATE NOCASE))) ORDER BY ((((((((((((v0.c0)-(vt1.c0)))OR(0.4880572575667379)))OR(((vt1.c0)IS(vt1.c0)))))AND((~ (vt1.c0)))))OR(((v0.c0)/(vt1.c1)))))AND(v0.c1 COLLATE BINARY))  NULLS FIRST, ((CASE vt1.c1  WHEN v0.c0 THEN v0.c2 END) ISNULL) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN v0 ON ((CAST(v0.c0 AS INTEGER))AND(-812775803)) WHERE ((((((vt1.c0 IN (v0.c1)))&(vt1.c1 COLLATE NOCASE)))AND(((CAST(vt1.c0 AS INTEGER)) BETWEEN ((((vt1.c0, v0.c1)) NOT BETWEEN ((v0.c0, vt1.c0)) AND ((v0.c1, vt1.c0)))) AND (((v0.c0)|(v0.c1))))))) ORDER BY (((v0.c2 IN (v0.c0, vt1.c0)))*((- (vt1.c0)))) ASC  NULLS FIRST, ((((~ (v0.c2)), (((vt1.c0, v0.c2, v0.c1))>((vt1.c0, v0.c2, v0.c0))), v0.c1 COLLATE BINARY))<>(((((v0.c1, vt1.c1, v0.c2)) BETWEEN ((v0.c1, vt1.c0, vt1.c0)) AND ((v0.c2, v0.c2, v0.c0))), ((((((((((vt1.c0)AND(v0.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(v0.c0)))AND(v0.c1)), (vt1.c1 IN (v0.c2))))) DESC  NULLS LAST, CASE ((((vt1.c1)AND(vt1.c0)))AND(vt1.c1))  WHEN ((v0.c0) IS TRUE) THEN ' B}r띿4A' WHEN CAST(v0.c0 AS REAL) THEN (vt1.c0 IN (v0.c0)) END  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN v0 ON ((CAST(v0.c0 AS INTEGER))AND(0xffffffffcf8e0685)) WHERE (CASE WHEN ((v0.c0)-(v0.c1)) THEN ((v0.c2)&(vt1.c1)) END) ORDER BY (((v0.c2 IN (v0.c0, vt1.c0)))*((- (vt1.c0)))) ASC  NULLS FIRST, ((((~ (v0.c2)), (((vt1.c0, v0.c2, v0.c1))>((vt1.c0, v0.c2, v0.c0))), v0.c1 COLLATE BINARY))!=(((((v0.c1, vt1.c1, v0.c2)) BETWEEN ((v0.c1, vt1.c0, vt1.c0)) AND ((v0.c2, v0.c2, v0.c0))), ((((((((((vt1.c0)AND(v0.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(v0.c0)))AND(v0.c1)), (vt1.c1 IN (v0.c2))))) DESC  NULLS LAST, CASE ((((vt1.c1)AND(vt1.c0)))AND(vt1.c1))  WHEN ((v0.c0) IS TRUE) THEN ' B}r띿4A' WHEN CAST(v0.c0 AS REAL) THEN (vt1.c0 IN (v0.c0)) END  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM v0 WHERE ((('')GLOB('0.9065111082146229')));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((('')GLOB('0.9065111082146229'))) ORDER BY ((((((v0.c1 COLLATE BINARY)AND(((v0.c0)AND(v0.c1)))))AND(((v0.c2)<=(v0.c2)))))OR(CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END))  NULLS LAST, (((((((v0.c0 IN ()))AND(v0.c1 COLLATE BINARY)))OR(0.290976944821416)))AND(v0.c2 COLLATE NOCASE)), ((v0.c0 COLLATE BINARY) IS TRUE), CAST(CASE v0.c2  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END AS REAL) DESC LIMIT 0x3;
SELECT ALL * FROM v0, vt1 WHERE (((((((v0.c1)OR(v0.c0)))AND(v0.c0)))/((- (vt1.c0)))));
SELECT DISTINCT * FROM v0 NOT INDEXED, vt1 WHERE (((((((v0.c1)OR(v0.c0)))AND(v0.c0)))/((- (vt1.c0))))) LIMIT 1;
SELECT ALL * FROM v0, vt1 WHERE (((((((v0.c1)OR(v0.c0)))AND(v0.c0)))/((- (vt1.c0)))));
SELECT DISTINCT * FROM v0 NOT INDEXED, vt1 WHERE (((((((v0.c1)OR(v0.c0)))AND(v0.c0)))/((- (vt1.c0))))) LIMIT 1;
SELECT ALL * FROM v0 WHERE (((((((ABS(DISTINCT v0.c1))AND((v0.c0 IN (v0.c2)))))OR(v0.c1)))AND(CASE v0.c2  WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)));
SELECT * FROM v0 WHERE (((((((((ABS(DISTINCT v0.c1))AND((v0.c0 IN (v0.c2)))))OR(v0.c1)))AND(CASE v0.c2  WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)))AND((('t~' IN ()) IN ())))) LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (((((((ABS(DISTINCT v0.c1))AND((v0.c0 IN (v0.c2)))))OR(v0.c1)))AND(CASE v0.c2  WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)));
SELECT * FROM v0 WHERE (((((((((ABS(DISTINCT v0.c1))AND((v0.c0 IN (v0.c2)))))OR(v0.c1)))AND(CASE v0.c2  WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)))AND((('t~' IN ()) IN ())))) LIMIT 0X0;
SELECT * FROM v0 WHERE (CAST(v0.c2 AS BLOB) COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c2 AS BLOB) COLLATE RTRIM)AND(CASE (~ (v0.c2))  WHEN (((v0.c0, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((v0.c0, v0.c1))) THEN v0.c0 WHEN (v0.c2 IN (v0.c0)) THEN (v0.c1 IN ()) WHEN ((((((v0.c2)OR(v0.c1)))OR(v0.c1)))AND(v0.c2)) THEN ((v0.c2)-(v0.c1)) WHEN ((v0.c0)<>(v0.c2)) THEN v0.c1 ELSE ((v0.c2) NOT NULL) END)));
SELECT * FROM v0 WHERE (CAST(v0.c2 AS BLOB) COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c2 AS BLOB) COLLATE RTRIM)AND(CASE (~ (v0.c2))  WHEN (((v0.c0, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((v0.c0, v0.c1))) THEN v0.c0 WHEN (v0.c2 IN (v0.c0)) THEN (v0.c1 IN ()) WHEN ((((((v0.c2)OR(v0.c1)))OR(v0.c1)))AND(v0.c2)) THEN ((v0.c2)-(v0.c1)) WHEN ((v0.c0)<>(v0.c2)) THEN v0.c1 ELSE ((v0.c2) NOT NULL) END)));
SELECT ALL MIN(v0.c1) FROM v0 WHERE (CASE v0.c1 COLLATE RTRIM  WHEN ((((v0.c2)AND(v0.c1)))OR(v0.c0)) THEN v0.c2 ELSE CAST(NULL AS BLOB) END);
SELECT MIN(v0.c1) FROM v0 WHERE (CASE v0.c1 COLLATE RTRIM  WHEN ((((v0.c2)AND(v0.c1)))OR(v0.c0)) THEN v0.c2 ELSE CAST(NULL AS BLOB) END) ORDER BY (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) IN (((v0.c1)<>(v0.c0)))) INTERSECT SELECT ALL MIN(v0.c1) FROM v0 WHERE (CASE ((v0.c0) BETWEEN (v0.c2) AND (v0.c2))  WHEN v0.c1 THEN ((v0.c2)<(v0.c1)) ELSE x'8c' END) ORDER BY (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) IN (((v0.c1)<>(v0.c0))));
SELECT COUNT(*) FROM vt1 WHERE ((NOT (282541721)));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((NOT (282541721)));
SELECT COUNT(*) FROM vt1 WHERE ('');
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((('')AND(CASE WHEN vt1.c0 THEN ((vt1.c1)LIKE(vt1.c0)) END))) LIMIT 0x1;
SELECT MIN(vt1.c0) FROM vt1, v0 WHERE (((((~ (v0.c0)), ((((((((v0.c1)OR(v0.c1)))AND(vt1.c1)))AND(v0.c1)))OR(0x15494aae))))>((vt1.c1, vt1.c1)))) ORDER BY ((v0.c1) ISNULL), vt1.c1 ASC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (((((~ (v0.c0)), ((((((((v0.c1)OR(v0.c1)))AND(vt1.c1)))AND(v0.c1)))OR(357124782))))>((vt1.c1, vt1.c1)))) ORDER BY ((v0.c1) ISNULL), vt1.c1 ASC  NULLS FIRST LIMIT 4 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (((((NULL)AND((v0.c1 IN (v0.c2, vt1.c0)))))AND(((vt1.c1)GLOB(v0.c2))))) ORDER BY ((v0.c1) ISNULL), vt1.c1 ASC  NULLS FIRST LIMIT 0X4;
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE ((((((((vt1.c1)OR(v0.c0)))OR(v0.c2)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN -1583317032 END, ((((v0.c0)AND(vt1.c1)))OR(v0.c2))))==((((NULL) BETWEEN (v0.c1) AND (v0.c2)), (v0.c2 IN (vt1.c1)), (vt1.c0 IN ())))));
SELECT DISTINCT MAX(vt1.c1) FROM vt1, v0 WHERE ((((((((((vt1.c1)OR(v0.c0)))OR(v0.c2)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN 0Xffffffffa1a07fd8 END, ((((v0.c0)AND(vt1.c1)))OR(v0.c2))))==((((NULL) BETWEEN (v0.c1) AND (v0.c2)), (v0.c2 IN (vt1.c1)), (vt1.c0 IN ())))))AND(CASE (- (v0.c1))  WHEN ((v0.c2) BETWEEN (v0.c1) AND (vt1.c0)) THEN vt1.c1 COLLATE NOCASE WHEN ((v0.c1)>=(v0.c1)) THEN v0.c1 WHEN HEX(DISTINCT v0.c2) THEN (((v0.c0, v0.c0)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c1))) ELSE (v0.c0 IN ()) END))) LIMIT 0;
SELECT MIN(v0.c2) FROM vt1, v0 WHERE (((v0.c0) IS TRUE) COLLATE NOCASE);
SELECT DISTINCT MIN(v0.c2) FROM vt1, v0 WHERE (((v0.c0) IS TRUE) COLLATE NOCASE) INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt1, v0 WHERE ((- (v0.c0)));
SELECT ALL * FROM vt1 WHERE (((((NULL)OR(LIKE(vt1.c1, vt1.c1, '7'))))OR(((vt1.c0) BETWEEN (vt1.c1) AND (230257881)))));
SELECT ALL * FROM vt1 WHERE (((((((NULL)OR(LIKE(vt1.c1, vt1.c1, '7'))))OR(((vt1.c0) BETWEEN (vt1.c1) AND (0xdb974d9)))))AND((((vt1.c1)OR(vt1.c0)) IN ())))) ORDER BY 'zH/玛㹠'  NULLS LAST, (json_array_length(vt1.c0) IN (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN 0.773489598384091 ELSE vt1.c0 END)), (IFNULL(DISTINCT vt1.c0, vt1.c0) IN ()) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (((vt1.c1)>=(CAST(vt1.c1 AS TEXT)))) ORDER BY 'zH/玛㹠'  NULLS LAST, (json_array_length(vt1.c0) IN (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN 0.773489598384091 ELSE vt1.c0 END)), (IFNULL(DISTINCT vt1.c0, vt1.c0) IN ()) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((NULL)OR(LIKE(vt1.c1, vt1.c1, '7'))))OR(((vt1.c0) BETWEEN (vt1.c1) AND (230257881)))));
SELECT ALL * FROM vt1 WHERE (((((((NULL)OR(LIKE(vt1.c1, vt1.c1, '7'))))OR(((vt1.c0) BETWEEN (vt1.c1) AND (0xdb974d9)))))AND((((vt1.c1)OR(vt1.c0)) IN ())))) ORDER BY 'zH/玛㹠'  NULLS LAST, (json_array_length(vt1.c0) IN (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN 0.773489598384091 ELSE vt1.c0 END)), (IFNULL(DISTINCT vt1.c0, vt1.c0) IN ()) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (((vt1.c1)>=(CAST(vt1.c1 AS TEXT)))) ORDER BY 'zH/玛㹠'  NULLS LAST, (json_array_length(vt1.c0) IN (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN 0.773489598384091 ELSE vt1.c0 END)), (IFNULL(DISTINCT vt1.c0, vt1.c0) IN ()) ASC  NULLS FIRST;
SELECT MAX(v0.c1) FROM v0 WHERE (((('32506213') NOTNULL) IN ()));
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((((('32506213') NOTNULL) IN ()))AND(CASE WHEN ((v0.c0)GLOB(v0.c0)) THEN ((v0.c0)/(v0.c1)) WHEN ((0xffffffff9eeee862)IS(v0.c1)) THEN (('1741568701') ISNULL) WHEN ((v0.c2)=(v0.c2)) THEN ((v0.c2) NOT BETWEEN (v0.c1) AND ('B')) ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)) END))) INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (v0.c1 COLLATE NOCASE);
SELECT ALL * FROM v0 WHERE ((((((((((((~ (v0.c1)))AND((((v0.c2, v0.c2))>=((v0.c2, v0.c2))))))OR(v0.c0 COLLATE BINARY)))AND((((-637031859))>=((v0.c2))))))AND((v0.c2 IN (v0.c0)))))OR(((((v0.c0)OR(v0.c0)))OR(v0.c0))))) ORDER BY '-616332281' COLLATE BINARY;
SELECT DISTINCT * FROM v0 WHERE ((((((((((((~ (v0.c1)))AND((((v0.c2, v0.c2))>=((v0.c2, v0.c2))))))OR(v0.c0 COLLATE BINARY)))AND((((0Xffffffffda07aa4d))>=((v0.c2))))))AND((v0.c2 IN (v0.c0)))))OR(((((v0.c0)OR(v0.c0)))OR(v0.c0))))) ORDER BY '-616332281' COLLATE BINARY;
SELECT ALL * FROM v0 WHERE ((((((((((((~ (v0.c1)))AND((((v0.c2, v0.c2))>=((v0.c2, v0.c2))))))OR(v0.c0 COLLATE BINARY)))AND((((-637031859))>=((v0.c2))))))AND((v0.c2 IN (v0.c0)))))OR(((((v0.c0)OR(v0.c0)))OR(v0.c0))))) ORDER BY '-616332281' COLLATE BINARY;
SELECT DISTINCT * FROM v0 WHERE ((((((((((((~ (v0.c1)))AND((((v0.c2, v0.c2))>=((v0.c2, v0.c2))))))OR(v0.c0 COLLATE BINARY)))AND((((0Xffffffffda07aa4d))>=((v0.c2))))))AND((v0.c2 IN (v0.c0)))))OR(((((v0.c0)OR(v0.c0)))OR(v0.c0))))) ORDER BY '-616332281' COLLATE BINARY;
SELECT MAX(v0.c1) FROM vt1, v0 WHERE ((((vt1.c1)) BETWEEN ((((((((x'c650')OR(v0.c1)))OR(vt1.c1)))AND(vt1.c0)))) AND ((NULL)))) ORDER BY CAST('ui' AS NUMERIC) ASC, ((CAST(v0.c0 AS REAL))+(v0.c1 COLLATE BINARY)) DESC  NULLS FIRST, CAST(((v0.c2)OR(v0.c0)) AS NUMERIC);
SELECT MAX(v0.c1) FROM vt1, v0 WHERE ((((((vt1.c1)) BETWEEN ((((((((x'c650')OR(v0.c1)))OR(vt1.c1)))AND(vt1.c0)))) AND ((NULL))))AND(x''))) ORDER BY CAST('ui' AS NUMERIC) ASC, ((CAST(v0.c0 AS REAL))+(v0.c1 COLLATE BINARY)) DESC  NULLS FIRST, CAST(((v0.c2)OR(v0.c0)) AS NUMERIC) LIMIT 4 INTERSECT SELECT ALL MAX(v0.c1) FROM vt1, v0 WHERE (CAST(vt1.c1 AS TEXT) COLLATE NOCASE COLLATE NOCASE) ORDER BY CAST('ui' AS NUMERIC) ASC, ((CAST(v0.c0 AS REAL))+(v0.c1 COLLATE BINARY)) DESC  NULLS FIRST, CAST(((v0.c2)OR(v0.c0)) AS NUMERIC) LIMIT 4;
SELECT * FROM v0, vt1 WHERE ((((CASE WHEN v0.c0 THEN vt1.c0 ELSE vt1.c1 END))<((CAST(v0.c2 AS REAL))))) ORDER BY (((((((((+ (0.633354521477187)))OR(((((v0.c2)OR(v0.c0)))OR(v0.c2)))))AND((((v0.c1, vt1.c1, v0.c0, v0.c0, vt1.c0))!=((vt1.c1, vt1.c0, NULL, vt1.c0, v0.c2))))))OR(((x'14')AND(vt1.c1)))))AND((NOT (x'')))) DESC  NULLS FIRST, vt1.c0 ASC, json_array_length(vt1.c1)  NULLS LAST;
SELECT ALL * FROM v0, vt1 NOT INDEXED WHERE ((((((CASE WHEN v0.c0 THEN vt1.c0 ELSE vt1.c1 END))<((CAST(v0.c2 AS REAL)))))AND((((~ (vt1.c1)))||((~ (v0.c1))))))) ORDER BY ((((((((((((CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 WHEN v0.c0 THEN vt1.c0 END)AND(NULL)))OR('-203870936')))OR(((vt1.c1)>>(v0.c1)))))AND(((v0.c0) IS TRUE))))OR((~ (vt1.c1)))))OR((((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((vt1.c1))))) DESC  NULLS FIRST, CAST(TYPEOF(v0.c2) AS BLOB) DESC  NULLS FIRST, (((v0.c1, v0.c1)) BETWEEN ((((((x'')OR(v0.c1)))OR(v0.c2)), ((vt1.c0) IS TRUE))) AND ((SQLITE_COMPILEOPTION_GET(vt1.c0), ((vt1.c0) IS TRUE))))  NULLS LAST LIMIT 0X0;
SELECT * FROM v0, vt1 WHERE ((((CASE WHEN v0.c0 THEN vt1.c0 ELSE vt1.c1 END))<((CAST(v0.c2 AS REAL))))) ORDER BY (((((((((+ (0.633354521477187)))OR(((((v0.c2)OR(v0.c0)))OR(v0.c2)))))AND((((v0.c1, vt1.c1, v0.c0, v0.c0, vt1.c0))!=((vt1.c1, vt1.c0, NULL, vt1.c0, v0.c2))))))OR(((x'14')AND(vt1.c1)))))AND((NOT (x'')))) DESC  NULLS FIRST, vt1.c0 ASC, json_array_length(vt1.c1)  NULLS LAST;
SELECT ALL * FROM v0, vt1 NOT INDEXED WHERE ((((((CASE WHEN v0.c0 THEN vt1.c0 ELSE vt1.c1 END))<((CAST(v0.c2 AS REAL)))))AND((((~ (vt1.c1)))||((~ (v0.c1))))))) ORDER BY ((((((((((((CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 WHEN v0.c0 THEN vt1.c0 END)AND(NULL)))OR('-203870936')))OR(((vt1.c1)>>(v0.c1)))))AND(((v0.c0) IS TRUE))))OR((~ (vt1.c1)))))OR((((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((vt1.c1))))) DESC  NULLS FIRST, CAST(TYPEOF(v0.c2) AS BLOB) DESC  NULLS FIRST, (((v0.c1, v0.c1)) BETWEEN ((((((x'')OR(v0.c1)))OR(v0.c2)), ((vt1.c0) IS TRUE))) AND ((SQLITE_COMPILEOPTION_GET(vt1.c0), ((vt1.c0) IS TRUE))))  NULLS LAST LIMIT 0X0;
SELECT * FROM v0, vt1 WHERE (((v0.c0 COLLATE RTRIM)OR(((v0.c0) NOTNULL))));
SELECT ALL * FROM v0, vt1 WHERE (((v0.c0 COLLATE RTRIM)OR(((v0.c0) NOTNULL)))) ORDER BY v0.c0 ASC, ((NULL IN (v0.c0, v0.c2, v0.c2)) IN ((((vt1.c0, '*{}c'))>=((v0.c0, vt1.c1))), TYPEOF(v0.c0)))  NULLS FIRST LIMIT 2 INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((CAST(v0.c2 AS INTEGER))<(v0.c0 COLLATE BINARY))) ORDER BY v0.c0 ASC, ((NULL IN (v0.c0, v0.c2, v0.c2)) IN ((((vt1.c0, '*{}c'))>=((v0.c0, vt1.c1))), TYPEOF(v0.c0)))  NULLS FIRST LIMIT 0x2;
SELECT * FROM v0, vt1 WHERE (((v0.c0 COLLATE RTRIM)OR(((v0.c0) NOTNULL))));
SELECT ALL * FROM v0, vt1 WHERE (((v0.c0 COLLATE RTRIM)OR(((v0.c0) NOTNULL)))) ORDER BY v0.c0 ASC, ((NULL IN (v0.c0, v0.c2, v0.c2)) IN ((((vt1.c0, '*{}c'))>=((v0.c0, vt1.c1))), TYPEOF(v0.c0)))  NULLS FIRST LIMIT 2 INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((CAST(v0.c2 AS INTEGER))<(v0.c0 COLLATE BINARY))) ORDER BY v0.c0 ASC, ((NULL IN (v0.c0, v0.c2, v0.c2)) IN ((((vt1.c0, '*{}c'))>=((v0.c0, vt1.c1))), TYPEOF(v0.c0)))  NULLS FIRST LIMIT 0x2;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (vt1.c0 COLLATE NOCASE COLLATE NOCASE) ORDER BY ((CAST(vt1.c1 AS REAL)) IS FALSE), TYPEOF(DISTINCT (NOT (vt1.c0))) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE COLLATE NOCASE)AND(((((((((((vt1.c0)<=(vt1.c1)))OR(vt1.c1 COLLATE BINARY)))AND(x'40')))AND(((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))))AND(((NULL)GLOB(vt1.c0))))))) ORDER BY ((CAST(vt1.c1 AS REAL)) IS FALSE), TYPEOF(DISTINCT (NOT (vt1.c0))) DESC  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY ((CAST(vt1.c1 AS REAL)) IS FALSE), TYPEOF(DISTINCT (NOT (vt1.c0))) DESC  NULLS LAST;
SELECT MAX(v0.c1) FROM v0 WHERE (((((v0.c0)IS NOT(v0.c1))) BETWEEN (CAST('-1287524755' AS TEXT)) AND (((((((v0.c0)AND(v0.c1)))AND(v0.c1)))AND(v0.c1)))));
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((((((v0.c0)IS NOT(v0.c1))) BETWEEN (CAST('-1287524755' AS TEXT)) AND (((((((v0.c0)AND(v0.c1)))AND(v0.c1)))AND(v0.c1)))))AND(((((v0.c2) NOT NULL)) BETWEEN ((v0.c1 IN (v0.c1))) AND (((v0.c1)IS NOT(v0.c1))))))) ORDER BY v0.c0 INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((((0.003068155204134504) NOT BETWEEN (v0.c0) AND (v0.c0)))&(((v0.c0) NOT NULL)))) ORDER BY v0.c0;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1))) NOT BETWEEN (((v0.c0)>>(vt1.c0))) AND ((('2077995519')&(v0.c1))))) ORDER BY CAST(0.8956050411769976 AS REAL) DESC  NULLS LAST, rtreenode(vt1.c1 COLLATE RTRIM, CAST(vt1.c0 AS NUMERIC))  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1))) NOT BETWEEN (((v0.c0)>>(vt1.c0))) AND ((('2077995519')&(v0.c1))))) ORDER BY CAST(0.8956050411769976 AS REAL) DESC  NULLS LAST, rtreenode(vt1.c1 COLLATE RTRIM, CAST(vt1.c0 AS NUMERIC))  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END IN (CAST(vt1.c1 AS INTEGER), (vt1.c1 IN (v0.c0))))) ORDER BY CAST(0.8956050411769976 AS REAL) DESC  NULLS LAST, rtreenode(vt1.c1 COLLATE RTRIM, CAST(vt1.c0 AS NUMERIC))  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1))) NOT BETWEEN (((v0.c0)>>(vt1.c0))) AND ((('2077995519')&(v0.c1))))) ORDER BY CAST(0.8956050411769976 AS REAL) DESC  NULLS LAST, rtreenode(vt1.c1 COLLATE RTRIM, CAST(vt1.c0 AS NUMERIC))  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1))) NOT BETWEEN (((v0.c0)>>(vt1.c0))) AND ((('2077995519')&(v0.c1))))) ORDER BY CAST(0.8956050411769976 AS REAL) DESC  NULLS LAST, rtreenode(vt1.c1 COLLATE RTRIM, CAST(vt1.c0 AS NUMERIC))  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END IN (CAST(vt1.c1 AS INTEGER), (vt1.c1 IN (v0.c0))))) ORDER BY CAST(0.8956050411769976 AS REAL) DESC  NULLS LAST, rtreenode(vt1.c1 COLLATE RTRIM, CAST(vt1.c0 AS NUMERIC))  NULLS LAST;
SELECT * FROM v0 WHERE (json_array_length((((v0.c0, v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c0, v0.c1))))) ORDER BY CAST((v0.c1 IN (v0.c0, v0.c0)) AS INTEGER)  NULLS LAST, (- (NULL))  NULLS FIRST, (((v0.c0 IN ())) NOT BETWEEN (((((((v0.c0)AND(v0.c0)))OR(v0.c2)))AND(v0.c2))) AND ((v0.c2 IN (v0.c2))));
SELECT DISTINCT * FROM v0 WHERE (((json_array_length((((v0.c0, v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c0, v0.c1)))))AND(UNLIKELY('o')))) ORDER BY CAST((v0.c1 IN (v0.c0, v0.c0)) AS INTEGER)  NULLS LAST, (- (NULL))  NULLS FIRST, (((v0.c0 IN ())) NOT BETWEEN (((((((v0.c0)AND(v0.c0)))OR(v0.c2)))AND(v0.c2))) AND ((v0.c2 IN (v0.c2))));
SELECT * FROM v0 WHERE (json_array_length((((v0.c0, v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c0, v0.c1))))) ORDER BY CAST((v0.c1 IN (v0.c0, v0.c0)) AS INTEGER)  NULLS LAST, (- (NULL))  NULLS FIRST, (((v0.c0 IN ())) NOT BETWEEN (((((((v0.c0)AND(v0.c0)))OR(v0.c2)))AND(v0.c2))) AND ((v0.c2 IN (v0.c2))));
SELECT DISTINCT * FROM v0 WHERE (((json_array_length((((v0.c0, v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c0, v0.c1)))))AND(UNLIKELY('o')))) ORDER BY CAST((v0.c1 IN (v0.c0, v0.c0)) AS INTEGER)  NULLS LAST, (- (NULL))  NULLS FIRST, (((v0.c0 IN ())) NOT BETWEEN (((((((v0.c0)AND(v0.c0)))OR(v0.c2)))AND(v0.c2))) AND ((v0.c2 IN (v0.c2))));
SELECT MAX(vt1.c0) FROM vt1, v0 WHERE ((CAST(vt1.c1 AS TEXT) IN (((vt1.c1)-(vt1.c0)), '|fjf^M!C ', json_patch(v0.c1, v0.c0)))) ORDER BY (- (HEX(DISTINCT v0.c1)))  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1, v0 WHERE ((CAST(vt1.c1 AS TEXT) IN (((vt1.c1)-(vt1.c0))))) ORDER BY (- (HEX(DISTINCT v0.c1)))  NULLS FIRST;
SELECT MIN(vt1.c0) FROM v0, vt1 WHERE (((((vt1.c1)%(vt1.c0))) NOT NULL)) ORDER BY (((('-(pL5e') BETWEEN (NULL) AND (v0.c0))) BETWEEN ((v0.c1 IN (v0.c0))) AND (((vt1.c1)%(v0.c1)))) DESC  NULLS LAST;
SELECT MIN(vt1.c0) FROM v0, vt1 WHERE (((((((vt1.c1)%(vt1.c0))) NOT NULL))AND(((CASE WHEN v0.c2 THEN vt1.c0 ELSE v0.c1 END) IS TRUE)))) ORDER BY ((CAST(v0.c0 AS REAL))<<(v0.c2));
SELECT COUNT(*) FROM v0, vt1 WHERE (CASE WHEN ((((((((v0.c1)OR(0X2fa60337)))AND(v0.c0)))OR(vt1.c0)))OR(v0.c2)) THEN TYPEOF(v0.c0) WHEN ((v0.c0)!=(vt1.c1)) THEN TOTAL_CHANGES() END);
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (CASE WHEN ((((((((v0.c1)OR(799408951)))AND(v0.c0)))OR(vt1.c0)))OR(v0.c2)) THEN TYPEOF(v0.c0) WHEN ((v0.c0)<>(vt1.c1)) THEN TOTAL_CHANGES() END) ORDER BY vt1.c0  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ('-1246399782') ORDER BY vt1.c0  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((((1322070102)AND(((v0.c0)-(v0.c1)))))OR(((x'e45075') NOT BETWEEN (x'') AND (v0.c2)))))AND('%ssP7'))) ORDER BY ((((((((v0.c1)OR(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(v0.c1)) COLLATE RTRIM DESC, (~ (((((v0.c1)AND(v0.c0)))AND(v0.c2)))), ABS((~ (v0.c1))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((((0x4ecd3056)AND(((v0.c0)-(v0.c1)))))OR(((x'e45075') NOT BETWEEN (x'') AND (v0.c2)))))AND('%ssP7'))) ORDER BY ((((v0.c0 COLLATE NOCASE)AND(((((v0.c1)OR(v0.c2)))AND(v0.c2)))))AND(CAST(v0.c0 AS NUMERIC)))  NULLS LAST, ((v0.c2 COLLATE NOCASE) BETWEEN (CAST(v0.c1 AS TEXT)) AND (CASE WHEN v0.c2 THEN v0.c0 END))  NULLS FIRST LIMIT 2;
SELECT ALL * FROM v0 WHERE (((((((1322070102)AND(((v0.c0)-(v0.c1)))))OR(((x'e45075') NOT BETWEEN (x'') AND (v0.c2)))))AND('%ssP7'))) ORDER BY ((((((((v0.c1)OR(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(v0.c1)) COLLATE RTRIM DESC, (~ (((((v0.c1)AND(v0.c0)))AND(v0.c2)))), ABS((~ (v0.c1))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((((0x4ecd3056)AND(((v0.c0)-(v0.c1)))))OR(((x'e45075') NOT BETWEEN (x'') AND (v0.c2)))))AND('%ssP7'))) ORDER BY ((((v0.c0 COLLATE NOCASE)AND(((((v0.c1)OR(v0.c2)))AND(v0.c2)))))AND(CAST(v0.c0 AS NUMERIC)))  NULLS LAST, ((v0.c2 COLLATE NOCASE) BETWEEN (CAST(v0.c1 AS TEXT)) AND (CASE WHEN v0.c2 THEN v0.c0 END))  NULLS FIRST LIMIT 2;
SELECT ALL MIN(v0.c0) FROM v0, vt1 WHERE (((((vt1.c1)IS NOT(v0.c0))) NOT BETWEEN (((vt1.c1) IS FALSE)) AND (((v0.c0) NOT NULL)))) ORDER BY (((v0.c1)) BETWEEN ((json_array(NULL, v0.c1))) AND ((CHAR(v0.c0, vt1.c0)))) ASC, ((((vt1.c0)-(vt1.c0)))IS(((((v0.c2)AND(vt1.c1)))AND(vt1.c0)))) ASC;
SELECT DISTINCT MIN(v0.c0) FROM v0, vt1 WHERE (((((((vt1.c1)IS NOT(v0.c0))) NOT BETWEEN (((vt1.c1) IS FALSE)) AND (((v0.c0) NOT NULL))))AND((((v0.c1, v0.c0, vt1.c0)) BETWEEN ((v0.c2 COLLATE NOCASE, ABS(DISTINCT vt1.c0), LIKELY(v0.c1))) AND ((CAST(v0.c0 AS INTEGER), ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)), CAST(vt1.c0 AS REAL))))))) ORDER BY ((((v0.c1) BETWEEN (vt1.c0) AND (v0.c1)))%(v0.c2))  NULLS LAST, SQLITE_COMPILEOPTION_GET(UPPER(v0.c1)) INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0, vt1 WHERE (x'2a8bb2') ORDER BY ((((v0.c1) BETWEEN (vt1.c0) AND (v0.c1)))%(v0.c2))  NULLS LAST, SQLITE_COMPILEOPTION_GET(UPPER(v0.c1));
SELECT * FROM v0 WHERE (COALESCE(((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c2)), ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1))));
SELECT ALL * FROM v0 WHERE (((COALESCE(((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c2)), ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1))))AND((CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END IN ((v0.c2 IN (v0.c2))))))) LIMIT 0x3;
SELECT * FROM v0 WHERE (COALESCE(((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c2)), ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1))));
SELECT ALL * FROM v0 WHERE (((COALESCE(((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c2)), ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1))))AND((CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END IN ((v0.c2 IN (v0.c2))))))) LIMIT 0x3;
SELECT MAX(v0.c1) FROM v0 WHERE ((- (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1)))));
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((- (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))))) ORDER BY ((v0.c2)%(v0.c0)) COLLATE NOCASE ASC, (((((v0.c0) IS TRUE)))<((NULLIF(v0.c1, v0.c0))))  NULLS FIRST LIMIT 2;
SELECT ALL MIN(v0.c0) FROM v0, vt1 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN NULL THEN v0.c0 ELSE vt1.c0 END) IS FALSE)) ORDER BY (NOT (vt1.c0)) DESC  NULLS FIRST, ((((vt1.c1) NOT NULL))<(v0.c1)) ASC  NULLS LAST, (TRIM(DISTINCT v0.c0, vt1.c1) IN (0x38a87056, v0.c0)) DESC  NULLS LAST;
SELECT MIN(v0.c0) FROM v0, vt1 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN NULL THEN v0.c0 ELSE vt1.c0 END) IS FALSE)) ORDER BY (NOT (vt1.c0)) DESC  NULLS FIRST, ((((vt1.c1) NOT NULL))<(v0.c1)) ASC  NULLS LAST, (TRIM(DISTINCT v0.c0, vt1.c1) IN (0x38a87056, v0.c0)) DESC  NULLS LAST LIMIT 3 INTERSECT SELECT MIN(v0.c0) FROM v0, vt1 WHERE ((((v0.c2 IN (vt1.c0))) BETWEEN (((v0.c1) BETWEEN (v0.c1) AND (vt1.c0))) AND (v0.c1))) ORDER BY (NOT (vt1.c0)) DESC  NULLS FIRST, ((((vt1.c1) NOT NULL))<(v0.c1)) ASC  NULLS LAST, (TRIM(DISTINCT v0.c0, vt1.c1) IN (0x38a87056, v0.c0)) DESC  NULLS LAST LIMIT 3;
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE ((~ (v0.c1)) COLLATE RTRIM COLLATE BINARY) ORDER BY UNLIKELY(DISTINCT ((((((vt1.c1)AND(v0.c2)))AND(v0.c0)))OR(vt1.c1)))  NULLS LAST, ((((vt1.c1)>('-637031859')))<=((~ (v0.c2))))  NULLS FIRST;
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE ((((~ (v0.c1)) COLLATE RTRIM COLLATE BINARY)AND(CASE WHEN v0.c0 THEN ((v0.c2)-(v0.c1)) WHEN CAST(v0.c1 AS REAL) THEN vt1.c1 COLLATE NOCASE END))) ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 END)<>(v0.c0)), CAST(CAST(vt1.c0 AS NUMERIC) AS REAL) DESC, ABS(DISTINCT v0.c2) COLLATE NOCASE ASC, CAST((NOT (v0.c2)) AS REAL) DESC LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (GLOB(LAST_INSERT_ROWID(), (((vt1.c0, vt1.c1, vt1.c1, vt1.c0, vt1.c1))>((vt1.c1, vt1.c0, vt1.c1, 0.41783889987802025, vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((GLOB(LAST_INSERT_ROWID(), (((vt1.c0, vt1.c1, vt1.c1, vt1.c0, vt1.c1))>((vt1.c1, vt1.c0, vt1.c1, 0.41783889987802025, vt1.c0)))))AND((((('^,BVH')LIKE(vt1.c0))) BETWEEN (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END) AND ((vt1.c1 IN ())))))) ORDER BY ((((((vt1.c1)==(vt1.c1)))AND((('-460829560') BETWEEN (vt1.c0) AND (vt1.c0)))))OR(vt1.c1 COLLATE RTRIM)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULLIF(DISTINCT vt1.c0, vt1.c0) COLLATE NOCASE) ORDER BY ((((((vt1.c1)==(vt1.c1)))AND((('-460829560') BETWEEN (vt1.c0) AND (vt1.c0)))))OR(vt1.c1 COLLATE RTRIM));
SELECT ALL * FROM vt1 WHERE (GLOB(LAST_INSERT_ROWID(), (((vt1.c0, vt1.c1, vt1.c1, vt1.c0, vt1.c1))>((vt1.c1, vt1.c0, vt1.c1, 0.41783889987802025, vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((GLOB(LAST_INSERT_ROWID(), (((vt1.c0, vt1.c1, vt1.c1, vt1.c0, vt1.c1))>((vt1.c1, vt1.c0, vt1.c1, 0.41783889987802025, vt1.c0)))))AND((((('^,BVH')LIKE(vt1.c0))) BETWEEN (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END) AND ((vt1.c1 IN ())))))) ORDER BY ((((((vt1.c1)==(vt1.c1)))AND((('-460829560') BETWEEN (vt1.c0) AND (vt1.c0)))))OR(vt1.c1 COLLATE RTRIM)) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULLIF(DISTINCT vt1.c0, vt1.c0) COLLATE NOCASE) ORDER BY ((((((vt1.c1)==(vt1.c1)))AND((('-460829560') BETWEEN (vt1.c0) AND (vt1.c0)))))OR(vt1.c1 COLLATE RTRIM));
SELECT * FROM vt1, v0 WHERE (UNLIKELY(360220862));
SELECT DISTINCT * FROM vt1, v0 WHERE (((UNLIKELY(0X157888be))AND(((((v0.c2)/('1847681787')))>=(load_extension(v0.c2)))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CASE v0.c1 COLLATE NOCASE  WHEN CASE WHEN v0.c2 THEN v0.c1 END THEN (((v0.c2, v0.c1))<=((vt1.c0, 0.7417784290305108))) WHEN CAST(v0.c0 AS NUMERIC) THEN x'b6' WHEN ((v0.c0)!=(v0.c0)) THEN ((v0.c2) NOT NULL) ELSE vt1.c1 COLLATE BINARY END);
SELECT * FROM vt1, v0 WHERE (UNLIKELY(360220862));
SELECT DISTINCT * FROM vt1, v0 WHERE (((UNLIKELY(0X157888be))AND(((((v0.c2)/('1847681787')))>=(load_extension(v0.c2)))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CASE v0.c1 COLLATE NOCASE  WHEN CASE WHEN v0.c2 THEN v0.c1 END THEN (((v0.c2, v0.c1))<=((vt1.c0, 0.7417784290305108))) WHEN CAST(v0.c0 AS NUMERIC) THEN x'b6' WHEN ((v0.c0)!=(v0.c0)) THEN ((v0.c2) NOT NULL) ELSE vt1.c1 COLLATE BINARY END);
SELECT * FROM vt1, v0 WHERE ((((NOT (v0.c2)))*(((v0.c0) NOTNULL)))) ORDER BY vt1.c1 DESC, (((x'286d3693' IN ())) NOT NULL) ASC, NULLIF(vt1.c0 COLLATE BINARY, (((v0.c1, v0.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((v0.c2, v0.c2))))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((((NOT (v0.c2)))*(((v0.c0) NOTNULL)))) ORDER BY vt1.c1 DESC, (((x'286d3693' IN ())) NOT NULL) ASC, NULLIF(vt1.c0 COLLATE BINARY, (((v0.c1, v0.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((v0.c2, v0.c2))))  NULLS FIRST INTERSECT SELECT * FROM vt1, v0 WHERE ((~ (v0.c2)) COLLATE BINARY) ORDER BY vt1.c1 DESC, (((x'286d3693' IN ())) NOT NULL) ASC, NULLIF(vt1.c0 COLLATE BINARY, (((v0.c1, v0.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((v0.c2, v0.c2))))  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((((NOT (v0.c2)))*(((v0.c0) NOTNULL)))) ORDER BY vt1.c1 DESC, (((x'286d3693' IN ())) NOT NULL) ASC, NULLIF(vt1.c0 COLLATE BINARY, (((v0.c1, v0.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((v0.c2, v0.c2))))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((((NOT (v0.c2)))*(((v0.c0) NOTNULL)))) ORDER BY vt1.c1 DESC, (((x'286d3693' IN ())) NOT NULL) ASC, NULLIF(vt1.c0 COLLATE BINARY, (((v0.c1, v0.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((v0.c2, v0.c2))))  NULLS FIRST INTERSECT SELECT * FROM vt1, v0 WHERE ((~ (v0.c2)) COLLATE BINARY) ORDER BY vt1.c1 DESC, (((x'286d3693' IN ())) NOT NULL) ASC, NULLIF(vt1.c0 COLLATE BINARY, (((v0.c1, v0.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((v0.c2, v0.c2))))  NULLS FIRST;
SELECT * FROM vt1 WHERE (CAST(((vt1.c1)LIKE(vt1.c1)) AS NUMERIC)) ORDER BY ((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))AND((NOT (vt1.c0)))))AND((vt1.c1 IN (x'5d', vt1.c0)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c1)LIKE(vt1.c1)) AS NUMERIC)) ORDER BY ((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))AND((NOT (vt1.c0)))))AND((vt1.c1 IN (x'5d', vt1.c0)))) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (0.011496114106102517) ORDER BY ((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))AND((NOT (vt1.c0)))))AND((vt1.c1 IN (x'5d', vt1.c0)))) DESC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt1 WHERE (CAST(((vt1.c1)LIKE(vt1.c1)) AS NUMERIC)) ORDER BY ((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))AND((NOT (vt1.c0)))))AND((vt1.c1 IN (x'5d', vt1.c0)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c1)LIKE(vt1.c1)) AS NUMERIC)) ORDER BY ((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))AND((NOT (vt1.c0)))))AND((vt1.c1 IN (x'5d', vt1.c0)))) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (0.011496114106102517) ORDER BY ((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))AND((NOT (vt1.c0)))))AND((vt1.c1 IN (x'5d', vt1.c0)))) DESC  NULLS FIRST LIMIT 0x1;
SELECT COUNT(*) FROM vt1 WHERE ((~ (((vt1.c0)=(vt1.c0))))) ORDER BY vt1.c0;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((~ (((vt1.c0)==(vt1.c0)))))AND(CAST(vt1.c0 COLLATE BINARY AS INTEGER)))) ORDER BY vt1.c0 LIMIT 0x1;
SELECT ALL * FROM v0, vt1 WHERE ((((- (v0.c0)))==((((v0.c2, v0.c2))<=((v0.c0, v0.c0))))));
SELECT * FROM v0, vt1 WHERE ((((- (v0.c0)))==((((v0.c2, v0.c2))=((v0.c0, v0.c0)))))) ORDER BY CAST(CAST(vt1.c0 AS NUMERIC) AS INTEGER) ASC INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((v0.c1, v0.c1, vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE NOCASE, CASE v0.c1  WHEN vt1.c0 THEN v0.c0 WHEN 0.5266594048308075 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 END, CAST(vt1.c1 AS BLOB))) AND ((LIKELY(DISTINCT v0.c0), CAST(v0.c1 AS NUMERIC), ((v0.c0) ISNULL))))) ORDER BY CAST(CAST(vt1.c0 AS NUMERIC) AS INTEGER) ASC;
SELECT ALL * FROM v0, vt1 WHERE ((((- (v0.c0)))==((((v0.c2, v0.c2))<=((v0.c0, v0.c0))))));
SELECT * FROM v0, vt1 WHERE ((((- (v0.c0)))==((((v0.c2, v0.c2))=((v0.c0, v0.c0)))))) ORDER BY CAST(CAST(vt1.c0 AS NUMERIC) AS INTEGER) ASC INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((v0.c1, v0.c1, vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE NOCASE, CASE v0.c1  WHEN vt1.c0 THEN v0.c0 WHEN 0.5266594048308075 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 END, CAST(vt1.c1 AS BLOB))) AND ((LIKELY(DISTINCT v0.c0), CAST(v0.c1 AS NUMERIC), ((v0.c0) ISNULL))))) ORDER BY CAST(CAST(vt1.c0 AS NUMERIC) AS INTEGER) ASC;
SELECT * FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0))) IS TRUE)) ORDER BY CAST(CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN '1847681787' WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN '-854217729' END AS NUMERIC) ASC  NULLS LAST, v0.c0 ASC  NULLS LAST, ((json_type(v0.c0))%((((v0.c2, v0.c2, -1.234102707E9))<=((v0.c1, v0.c1, v0.c2))))) ASC;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0))) IS TRUE))AND((((((v0.c2) BETWEEN (v0.c0) AND (v0.c0)), v0.c0 COLLATE RTRIM))>=((CAST(v0.c2 AS BLOB), -139422652)))))) ORDER BY CAST(CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN '1847681787' WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN '-854217729' END AS NUMERIC) ASC  NULLS LAST, v0.c0 ASC  NULLS LAST, ((json_type(v0.c0))%((((v0.c2, v0.c2, -1.234102707E9))<=((v0.c1, v0.c1, v0.c2))))) ASC INTERSECT SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY CAST(CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN '1847681787' WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN '-854217729' END AS NUMERIC) ASC  NULLS LAST, v0.c0 ASC  NULLS LAST, ((json_type(v0.c0))%((((v0.c2, v0.c2, -1.234102707E9))<=((v0.c1, v0.c1, v0.c2))))) ASC;
SELECT * FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0))) IS TRUE)) ORDER BY CAST(CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN '1847681787' WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN '-854217729' END AS NUMERIC) ASC  NULLS LAST, v0.c0 ASC  NULLS LAST, ((json_type(v0.c0))%((((v0.c2, v0.c2, -1.234102707E9))<=((v0.c1, v0.c1, v0.c2))))) ASC;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0))) IS TRUE))AND((((((v0.c2) BETWEEN (v0.c0) AND (v0.c0)), v0.c0 COLLATE RTRIM))>=((CAST(v0.c2 AS BLOB), -139422652)))))) ORDER BY CAST(CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN '1847681787' WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN '-854217729' END AS NUMERIC) ASC  NULLS LAST, v0.c0 ASC  NULLS LAST, ((json_type(v0.c0))%((((v0.c2, v0.c2, -1.234102707E9))<=((v0.c1, v0.c1, v0.c2))))) ASC INTERSECT SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY CAST(CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN '1847681787' WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN '-854217729' END AS NUMERIC) ASC  NULLS LAST, v0.c0 ASC  NULLS LAST, ((json_type(v0.c0))%((((v0.c2, v0.c2, -1.234102707E9))<=((v0.c1, v0.c1, v0.c2))))) ASC;
SELECT MAX(v0.c2) FROM v0 WHERE (v0.c0);
SELECT ALL MAX(v0.c2) FROM v0 WHERE (v0.c0) ORDER BY ((CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END)IS(v0.c0 COLLATE NOCASE)) DESC  NULLS LAST, (~ (v0.c2 COLLATE NOCASE)) LIMIT 0X1;
SELECT MIN(v0.c1) FROM v0 WHERE (((((((v0.c2)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)) COLLATE BINARY);
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((((((((v0.c2)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)) COLLATE BINARY)AND((((v0.c1 COLLATE RTRIM, ((v0.c1)*(0.6650943336433015)), x'' COLLATE BINARY))<=(((((v0.c0, v0.c1)) NOT BETWEEN ((v0.c2, x'')) AND (('', v0.c2))), '?7', (((v0.c0, v0.c0, 0.07878449846418922, 0.3892155626338567))=((v0.c2, v0.c2, v0.c2, v0.c1))))))))) ORDER BY '-231017050' DESC  NULLS FIRST, CASE ((v0.c1)>=(v0.c2))  WHEN ((v0.c0)!=(v0.c1)) THEN (~ (v0.c1)) WHEN ((((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c1)))OR(v0.c0)) THEN CASE v0.c0  WHEN v0.c0 THEN v0.c0 ELSE v0.c2 END WHEN (- ('321311558')) THEN v0.c1 ELSE ((v0.c2) NOTNULL) END ASC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE ((((NULL)!=(v0.c0)) IN (((((((0.5677876366924484)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1))))) ORDER BY CASE CASE vt1.c0  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END  WHEN ((v0.c2) IS TRUE) THEN ((((((v0.c2)AND(v0.c0)))OR(vt1.c1)))OR('1A')) ELSE ((vt1.c1)<<(v0.c0)) END  NULLS FIRST, (((((((((v0.c1)OR(v0.c1)))OR(v0.c0)))AND(v0.c2)), vt1.c0 COLLATE BINARY, v0.c1))<=((((vt1.c1)>>(v0.c0)), CASE WHEN v0.c2 THEN vt1.c1 END, ((((vt1.c1)OR(v0.c2)))AND(v0.c0))))), (v0.c2 COLLATE NOCASE IN ((vt1.c0 IN ())));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((NULL)>(v0.c0)) IN (((((((0.5677876366924484)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))))AND(((((v0.c2) NOT NULL))GLOB(CAST(v0.c1 AS BLOB)))))) ORDER BY ((((((((((((((v0.c1) BETWEEN (vt1.c1) AND (0.8047372950419263)))AND((((vt1.c1)) NOT BETWEEN ((vt1.c0)) AND ((v0.c2))))))AND(v0.c1 COLLATE BINARY)))OR(CASE WHEN NULL THEN vt1.c1 WHEN v0.c2 THEN vt1.c1 ELSE v0.c2 END)))AND(LIKELY(v0.c1))))OR((x'9bde4469' IN (v0.c2)))))AND(((vt1.c0)>>(vt1.c1)))) ASC, (((v0.c1)>(vt1.c0)) IN ()) DESC;
SELECT ALL * FROM vt1, v0 WHERE ((((NULL)!=(v0.c0)) IN (((((((0.5677876366924484)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1))))) ORDER BY CASE CASE vt1.c0  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END  WHEN ((v0.c2) IS TRUE) THEN ((((((v0.c2)AND(v0.c0)))OR(vt1.c1)))OR('1A')) ELSE ((vt1.c1)<<(v0.c0)) END  NULLS FIRST, (((((((((v0.c1)OR(v0.c1)))OR(v0.c0)))AND(v0.c2)), vt1.c0 COLLATE BINARY, v0.c1))<=((((vt1.c1)>>(v0.c0)), CASE WHEN v0.c2 THEN vt1.c1 END, ((((vt1.c1)OR(v0.c2)))AND(v0.c0))))), (v0.c2 COLLATE NOCASE IN ((vt1.c0 IN ())));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((NULL)>(v0.c0)) IN (((((((0.5677876366924484)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))))AND(((((v0.c2) NOT NULL))GLOB(CAST(v0.c1 AS BLOB)))))) ORDER BY ((((((((((((((v0.c1) BETWEEN (vt1.c1) AND (0.8047372950419263)))AND((((vt1.c1)) NOT BETWEEN ((vt1.c0)) AND ((v0.c2))))))AND(v0.c1 COLLATE BINARY)))OR(CASE WHEN NULL THEN vt1.c1 WHEN v0.c2 THEN vt1.c1 ELSE v0.c2 END)))AND(LIKELY(v0.c1))))OR((x'9bde4469' IN (v0.c2)))))AND(((vt1.c0)>>(vt1.c1)))) ASC, (((v0.c1)>(vt1.c0)) IN ()) DESC;
SELECT ALL * FROM v0, vt1 WHERE ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)) IN ())) ORDER BY ((((v0.c0) BETWEEN (0.36093547533610537) AND (v0.c1))) BETWEEN (v0.c0) AND ((- (4.63080947E8)))), (- (HEX(vt1.c1))) DESC;
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)) IN ()))AND(((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)))GLOB(((vt1.c0)>=(vt1.c1))))))) ORDER BY HEX((0.4411999132935598 IN ())) DESC  NULLS FIRST, (v0.c0 COLLATE RTRIM IN ((((vt1.c0, v0.c0))==((v0.c2, v0.c2))))), 0.0620978418931839  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM v0, vt1 WHERE ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)) IN ())) ORDER BY ((((v0.c0) BETWEEN (0.36093547533610537) AND (v0.c1))) BETWEEN (v0.c0) AND ((- (4.63080947E8)))), (- (HEX(vt1.c1))) DESC;
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)) IN ()))AND(((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)))GLOB(((vt1.c0)>=(vt1.c1))))))) ORDER BY HEX((0.4411999132935598 IN ())) DESC  NULLS FIRST, (v0.c0 COLLATE RTRIM IN ((((vt1.c0, v0.c0))==((v0.c2, v0.c2))))), 0.0620978418931839  NULLS LAST LIMIT 0x1;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (CAST('pjLZUTCy' AS INTEGER));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((CAST('pjLZUTCy' AS INTEGER))AND(((CAST(vt1.c1 AS INTEGER))||(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0))))))) LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((+ (vt1.c0)) IN ())) LIMIT 1;
SELECT * FROM vt1 INNER JOIN v0 ON (((((((((v0.c1)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)), ((v0.c0) IS FALSE)))>((CAST(vt1.c0 AS REAL), NULL))) WHERE (CASE WHEN (((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((''))) THEN vt1.c1 COLLATE NOCASE WHEN COALESCE(vt1.c0, v0.c0, vt1.c1, vt1.c1) THEN ((v0.c2)/(vt1.c0)) ELSE ((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) END) ORDER BY ((v0.c1) BETWEEN (vt1.c1) AND (vt1.c0)) COLLATE NOCASE, (((v0.c0 IN (vt1.c1)))==(((v0.c1)>=(v0.c0)))) ASC  NULLS LAST, (vt1.c1 IN (vt1.c1)) COLLATE NOCASE, x'65e1'  NULLS LAST;
SELECT * FROM vt1 INNER JOIN v0 ON (((((((((v0.c1)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)), ((v0.c0) IS FALSE)))>((CAST(vt1.c0 AS REAL), NULL))) WHERE (((CASE WHEN (((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((''))) THEN vt1.c1 COLLATE NOCASE WHEN COALESCE(vt1.c0, v0.c0, vt1.c1, vt1.c1) THEN ((v0.c2)/(vt1.c0)) ELSE ((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) END)AND(((CASE v0.c0  WHEN vt1.c0 THEN x'ed' WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE v0.c1 END) IS FALSE)))) ORDER BY ((v0.c1) BETWEEN (vt1.c1) AND (vt1.c0)) COLLATE NOCASE, (((v0.c0 IN (vt1.c1)))==(((v0.c1)>=(v0.c0)))) ASC  NULLS LAST, (vt1.c1 IN (vt1.c1)) COLLATE NOCASE, x'65e1'  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1 INNER JOIN v0 ON (((((((((v0.c1)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)), ((v0.c0) IS FALSE)))>((CAST(vt1.c0 AS REAL), NULL))) WHERE (CASE WHEN (((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((''))) THEN vt1.c1 COLLATE NOCASE WHEN COALESCE(vt1.c0, v0.c0, vt1.c1, vt1.c1) THEN ((v0.c2)/(vt1.c0)) ELSE ((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) END) ORDER BY ((v0.c1) BETWEEN (vt1.c1) AND (vt1.c0)) COLLATE NOCASE, (((v0.c0 IN (vt1.c1)))==(((v0.c1)>=(v0.c0)))) ASC  NULLS LAST, (vt1.c1 IN (vt1.c1)) COLLATE NOCASE, x'65e1'  NULLS LAST;
SELECT * FROM vt1 INNER JOIN v0 ON (((((((((v0.c1)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)), ((v0.c0) IS FALSE)))>((CAST(vt1.c0 AS REAL), NULL))) WHERE (((CASE WHEN (((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((''))) THEN vt1.c1 COLLATE NOCASE WHEN COALESCE(vt1.c0, v0.c0, vt1.c1, vt1.c1) THEN ((v0.c2)/(vt1.c0)) ELSE ((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) END)AND(((CASE v0.c0  WHEN vt1.c0 THEN x'ed' WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE v0.c1 END) IS FALSE)))) ORDER BY ((v0.c1) BETWEEN (vt1.c1) AND (vt1.c0)) COLLATE NOCASE, (((v0.c0 IN (vt1.c1)))==(((v0.c1)>=(v0.c0)))) ASC  NULLS LAST, (vt1.c1 IN (vt1.c1)) COLLATE NOCASE, x'65e1'  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1, v0 WHERE (((((((v0.c2)AND(vt1.c0)))AND(vt1.c1))) IS FALSE));
SELECT * FROM vt1, v0 WHERE (((((((((v0.c2)AND(vt1.c0)))AND(vt1.c1))) IS FALSE))AND(((((v0.c2) BETWEEN (v0.c2) AND (vt1.c0)))AND(x''))))) INTERSECT SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT * FROM vt1, v0 WHERE (((((((v0.c2)AND(vt1.c0)))AND(vt1.c1))) IS FALSE));
SELECT * FROM vt1, v0 WHERE (((((((((v0.c2)AND(vt1.c0)))AND(vt1.c1))) IS FALSE))AND(((((v0.c2) BETWEEN (v0.c2) AND (vt1.c0)))AND(x''))))) INTERSECT SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT ALL * FROM v0 WHERE ((((('-2147479263', v0.c0, v0.c0, x'')) NOT BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c0)) AND ((v0.c2, v0.c0, v0.c1, v0.c0))) IN ())) ORDER BY (((v0.c2)) BETWEEN (((~ (v0.c2)))) AND ((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)))));
SELECT ALL * FROM v0 WHERE ((((('-2147479263', v0.c0, v0.c0, x'')) NOT BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c0)) AND ((v0.c2, v0.c0, v0.c1, v0.c0))) IN ())) ORDER BY (((v0.c2)) BETWEEN (((~ (v0.c2)))) AND ((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)))));
SELECT ALL * FROM v0 WHERE ((((('-2147479263', v0.c0, v0.c0, x'')) NOT BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c0)) AND ((v0.c2, v0.c0, v0.c1, v0.c0))) IN ())) ORDER BY (((v0.c2)) BETWEEN (((~ (v0.c2)))) AND ((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)))));
SELECT ALL * FROM v0 WHERE ((((('-2147479263', v0.c0, v0.c0, x'')) NOT BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c0)) AND ((v0.c2, v0.c0, v0.c1, v0.c0))) IN ())) ORDER BY (((v0.c2)) BETWEEN (((~ (v0.c2)))) AND ((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)))));
SELECT ALL * FROM vt1 WHERE (NULL);
SELECT DISTINCT * FROM vt1 WHERE (NULL) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c1);
SELECT ALL * FROM vt1 WHERE (NULL);
SELECT DISTINCT * FROM vt1 WHERE (NULL) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (vt1.c1);
SELECT ALL MIN(v0.c2) FROM v0 WHERE (x'f7');
SELECT MIN(v0.c2) FROM v0 WHERE (x'f7') ORDER BY ((1230436426)+((((v0.c1, 'm')) BETWEEN ((v0.c0, v0.c0)) AND ((v0.c2, v0.c1))))) DESC, ((+ (v0.c0)) IN ((((v0.c2)) BETWEEN ((x'48')) AND ((-1.591475189E9)))));
SELECT ALL COUNT(*) FROM vt1 WHERE ((((NOT (vt1.c1)))+(NULLIF(vt1.c0, vt1.c0))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((NOT (vt1.c1)))+(NULLIF(vt1.c0, vt1.c0)))) ORDER BY (+ (vt1.c0 COLLATE RTRIM))  NULLS FIRST, ((((((LIKELY(vt1.c1))AND(vt1.c0 COLLATE RTRIM)))OR(vt1.c1 COLLATE NOCASE)))AND((vt1.c0 IN (vt1.c1, vt1.c0)))) ASC LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((LIKE(vt1.c0, vt1.c1, '-') IN ())) ORDER BY (+ (vt1.c0 COLLATE RTRIM))  NULLS FIRST, ((((((LIKELY(vt1.c1))AND(vt1.c0 COLLATE RTRIM)))OR(vt1.c1 COLLATE NOCASE)))AND((vt1.c0 IN (vt1.c1, vt1.c0)))) ASC LIMIT 0X2;
SELECT * FROM v0, vt1 WHERE (CAST(((((((vt1.c0)AND(v0.c0)))OR(v0.c2)))AND(vt1.c0)) AS INTEGER)) ORDER BY ((CAST(vt1.c0 AS REAL))GLOB(CASE v0.c2  WHEN vt1.c0 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 ELSE v0.c1 END)) ASC;
SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(((((((vt1.c0)AND(v0.c0)))OR(v0.c2)))AND(vt1.c0)) AS INTEGER)) ORDER BY ((((v0.c1, v0.c0, v0.c2, vt1.c0))=((vt1.c0, vt1.c1, vt1.c0, v0.c0))) IN ()) ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0 NOT INDEXED, vt1 WHERE (CASE v0.c1  WHEN NULL THEN vt1.c1 WHEN vt1.c0 THEN 0.2188928460835654 WHEN vt1.c1 THEN vt1.c1 ELSE v0.c1 END COLLATE RTRIM) ORDER BY ((((v0.c1, v0.c0, v0.c2, vt1.c0))==((vt1.c0, vt1.c1, vt1.c0, v0.c0))) IN ()) ASC  NULLS FIRST LIMIT 2;
SELECT * FROM v0, vt1 WHERE (CAST(((((((vt1.c0)AND(v0.c0)))OR(v0.c2)))AND(vt1.c0)) AS INTEGER)) ORDER BY ((CAST(vt1.c0 AS REAL))GLOB(CASE v0.c2  WHEN vt1.c0 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 ELSE v0.c1 END)) ASC;
SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(((((((vt1.c0)AND(v0.c0)))OR(v0.c2)))AND(vt1.c0)) AS INTEGER)) ORDER BY ((((v0.c1, v0.c0, v0.c2, vt1.c0))=((vt1.c0, vt1.c1, vt1.c0, v0.c0))) IN ()) ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0 NOT INDEXED, vt1 WHERE (CASE v0.c1  WHEN NULL THEN vt1.c1 WHEN vt1.c0 THEN 0.2188928460835654 WHEN vt1.c1 THEN vt1.c1 ELSE v0.c1 END COLLATE RTRIM) ORDER BY ((((v0.c1, v0.c0, v0.c2, vt1.c0))==((vt1.c0, vt1.c1, vt1.c0, v0.c0))) IN ()) ASC  NULLS FIRST LIMIT 2;
SELECT MAX(v0.c2) FROM v0, vt1 WHERE (((CASE vt1.c1  WHEN '-1330887968' THEN v0.c1 ELSE vt1.c1 END)IS NOT(vt1.c0)));
SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE (((CASE vt1.c1  WHEN '-1330887968' THEN v0.c1 ELSE vt1.c1 END)IS NOT(vt1.c0))) INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE ((((- (v0.c1))) IS TRUE));
SELECT ALL * FROM v0 WHERE (((((((((((v0.c0)OR(v0.c1)))OR(v0.c1)))AND(v0.c1)))AND(v0.c1))) IS FALSE));
SELECT * FROM v0 WHERE (((((((((((((v0.c0)OR(v0.c1)))OR(v0.c1)))AND(v0.c1)))AND(v0.c1))) IS FALSE))AND(CAST(((v0.c2) IS TRUE) AS INTEGER)))) INTERSECT SELECT * FROM v0 WHERE (CAST(((0.4549136322745143) IS FALSE) AS BLOB));
SELECT ALL * FROM v0 WHERE (((((((((((v0.c0)OR(v0.c1)))OR(v0.c1)))AND(v0.c1)))AND(v0.c1))) IS FALSE));
SELECT * FROM v0 WHERE (((((((((((((v0.c0)OR(v0.c1)))OR(v0.c1)))AND(v0.c1)))AND(v0.c1))) IS FALSE))AND(CAST(((v0.c2) IS TRUE) AS INTEGER)))) INTERSECT SELECT * FROM v0 WHERE (CAST(((0.4549136322745143) IS FALSE) AS BLOB));
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY LIKELY(CAST(vt1.c1 AS NUMERIC));
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY LIKELY(CAST(vt1.c1 AS NUMERIC)) INTERSECT SELECT ALL * FROM vt1 WHERE ((((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c0))))<((x'' IN (0.24654158343155375))))) ORDER BY LIKELY(CAST(vt1.c1 AS NUMERIC));
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY LIKELY(CAST(vt1.c1 AS NUMERIC));
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY LIKELY(CAST(vt1.c1 AS NUMERIC)) INTERSECT SELECT ALL * FROM vt1 WHERE ((((((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c0))))<((x'' IN (0.24654158343155375))))) ORDER BY LIKELY(CAST(vt1.c1 AS NUMERIC));
SELECT ALL * FROM vt1, v0 WHERE (('R(5#H!' IN ()));
SELECT DISTINCT * FROM vt1, v0 WHERE (((('R(5#H!' IN ()))AND(((RTRIM(v0.c1))||(((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2))))))) LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (('R(5#H!' IN ()));
SELECT DISTINCT * FROM vt1, v0 WHERE (((('R(5#H!' IN ()))AND(((RTRIM(v0.c1))||(((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2))))))) LIMIT 0;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (v0.c2);
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (v0.c2) LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((NOT (v0.c0)))LIKE(((vt1.c0) BETWEEN (vt1.c0) AND (v0.c0))))) LIMIT 0;
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt1 ON 0.9220276640623019 COLLATE NOCASE WHERE (((((vt1.c1) BETWEEN (v0.c2) AND (vt1.c0)))-(LAST_INSERT_ROWID()))) ORDER BY (((v0.c2)AND(v0.c1)) IN (((v0.c1)<<(v0.c0)))), (((((((((vt1.c1 IN ()))OR(((((((v0.c1)AND(vt1.c1)))OR(v0.c0)))OR(v0.c1)))))AND((NOT (v0.c0)))))OR(((((vt1.c1)AND(v0.c2)))AND(v0.c1)))))OR((NOT (v0.c2)))) DESC, CAST(v0.c1 AS TEXT);
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt1 ON 0.9220276640623019 COLLATE NOCASE WHERE (((((((vt1.c1) BETWEEN (v0.c2) AND (vt1.c0)))-(LAST_INSERT_ROWID())))AND(((~ (v0.c0)) IN ())))) ORDER BY (DATE(v0.c2, vt1.c0, vt1.c1, vt1.c0, v0.c0, v0.c1, v0.c2) IN ()) LIMIT 3;
SELECT * FROM vt1 WHERE (UNLIKELY(DISTINCT CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)) ORDER BY x'b9'  NULLS FIRST, ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))LIKE(CAST(vt1.c1 AS BLOB)));
SELECT DISTINCT * FROM vt1 WHERE (((UNLIKELY(DISTINCT CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))AND((CAST(vt1.c0 AS BLOB) IN (vt1.c1, ((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))OR('865417487')))AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c0))))))) ORDER BY '' ASC  NULLS FIRST, (((HEX(DISTINCT NULL)))<>((((vt1.c0)AND(vt1.c1))))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST((('') NOT BETWEEN (vt1.c1) AND (vt1.c1)) AS INTEGER)) ORDER BY '' ASC  NULLS FIRST, (((HEX(DISTINCT NULL)))<>((((vt1.c0)AND(vt1.c1))))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (UNLIKELY(DISTINCT CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)) ORDER BY x'b9'  NULLS FIRST, ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))LIKE(CAST(vt1.c1 AS BLOB)));
SELECT DISTINCT * FROM vt1 WHERE (((UNLIKELY(DISTINCT CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))AND((CAST(vt1.c0 AS BLOB) IN (vt1.c1, ((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))OR('865417487')))AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c0))))))) ORDER BY '' ASC  NULLS FIRST, (((HEX(DISTINCT NULL)))<>((((vt1.c0)AND(vt1.c1))))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST((('') NOT BETWEEN (vt1.c1) AND (vt1.c1)) AS INTEGER)) ORDER BY '' ASC  NULLS FIRST, (((HEX(DISTINCT NULL)))<>((((vt1.c0)AND(vt1.c1))))) DESC  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c1);
SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c1) ORDER BY ((((v0.c2)AND((((vt1.c1))<=((vt1.c0))))))OR(v0.c0))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((((vt1.c1, v0.c2, vt1.c1))>((v0.c1, vt1.c0, v0.c1)))) NOT NULL)) ORDER BY ((((v0.c2)AND((((vt1.c1))<=((vt1.c0))))))OR(v0.c0))  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c1);
SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c1) ORDER BY ((((v0.c2)AND((((vt1.c1))<=((vt1.c0))))))OR(v0.c0))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((((vt1.c1, v0.c2, vt1.c1))>((v0.c1, vt1.c0, v0.c1)))) NOT NULL)) ORDER BY ((((v0.c2)AND((((vt1.c1))<=((vt1.c0))))))OR(v0.c0))  NULLS LAST;
SELECT MAX(v0.c1) FROM v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c0)))*(CAST(v0.c1 AS REAL))));
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c0)))*(CAST(v0.c1 AS REAL)))) LIMIT 0x1 INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((((((((v0.c2)OR(v0.c2)))AND(v0.c0)))OR(v0.c2))) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) AND (NULL))) LIMIT 0X1;
SELECT COUNT(*) FROM v0, vt1 WHERE ('');
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((('')AND((v0.c0 IN ())))) ORDER BY 0xc4bdae2, CAST((- (v0.c0)) AS REAL) ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (UPPER(DISTINCT ((v0.c2) NOT BETWEEN (v0.c1) AND (vt1.c0)))) ORDER BY 0Xc4bdae2, CAST((- (v0.c0)) AS REAL) ASC  NULLS LAST;
SELECT MIN(v0.c2) FROM v0 WHERE (v0.c1) ORDER BY (~ ((NOT (v0.c2)))) DESC;
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE (((v0.c1)AND(((((((((((((v0.c0) IS TRUE))OR((v0.c0 IN (v0.c1, v0.c1)))))OR(((((v0.c1)AND(v0.c2)))AND(v0.c2)))))OR(COALESCE(v0.c0, v0.c1))))AND(CASE WHEN '嗡qwwm' THEN 0xffffffffdec4c847 WHEN x'170c' THEN v0.c2 WHEN v0.c1 THEN v0.c2 ELSE x'' END)))OR(CASE v0.c1  WHEN v0.c0 THEN x'7932c26b' END))))) ORDER BY (~ ((NOT (v0.c2)))) DESC LIMIT 0X1;
SELECT ALL * FROM v0 WHERE ((((0X1db332f7 IN (v0.c1))) NOTNULL));
SELECT * FROM v0 WHERE ((((498283255 IN (v0.c1))) NOTNULL)) ORDER BY ((NOT (v0.c2)) IN (json_remove(v0.c2, v0.c1, v0.c1))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0 WHERE ((((0X1db332f7 IN (v0.c1))) NOTNULL));
SELECT * FROM v0 WHERE ((((498283255 IN (v0.c1))) NOTNULL)) ORDER BY ((NOT (v0.c2)) IN (json_remove(v0.c2, v0.c1, v0.c1))) ASC  NULLS LAST LIMIT 0;
SELECT ALL MAX(v0.c0) FROM v0, vt1 WHERE (((0.6057451571361728) NOT NULL)) ORDER BY ((((vt1.c0)==(v0.c0))) NOT BETWEEN (((vt1.c1) NOT NULL)) AND (v0.c1)) DESC  NULLS LAST, (- (NULL)) DESC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE (((0.6057451571361728) NOT NULL)) ORDER BY ((((vt1.c0)==(v0.c0))) NOT BETWEEN (((vt1.c1) NOT NULL)) AND (v0.c1)) DESC  NULLS LAST, (- (NULL)) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE ((((v0.c0, ((v0.c2)OR(v0.c2)), v0.c1, CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 END))<((CASE WHEN vt1.c0 THEN NULL ELSE v0.c2 END, ((v0.c0) BETWEEN (vt1.c1) AND (v0.c2)), (vt1.c1 IN (vt1.c1)), CASE WHEN v0.c0 THEN v0.c0 END)))) ORDER BY ((((vt1.c0)==(v0.c0))) NOT BETWEEN (((vt1.c1) NOT NULL)) AND (v0.c1)) DESC  NULLS LAST, (- (NULL)) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE (((((x'7aba60')/(v0.c1)))GLOB(CASE WHEN v0.c1 THEN v0.c0 END))) ORDER BY NULLIF(DISTINCT ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c0)), CAST(v0.c2 AS INTEGER))  NULLS LAST;
SELECT * FROM v0 WHERE (((((((x'7aba60')/(v0.c1)))GLOB(CASE WHEN v0.c1 THEN v0.c0 END)))AND(3.43401058E8))) ORDER BY NULLIF(DISTINCT ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c0)), CAST(v0.c2 AS INTEGER))  NULLS LAST LIMIT 0x1;
SELECT * FROM v0 WHERE (((((x'7aba60')/(v0.c1)))GLOB(CASE WHEN v0.c1 THEN v0.c0 END))) ORDER BY NULLIF(DISTINCT ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c0)), CAST(v0.c2 AS INTEGER))  NULLS LAST;
SELECT * FROM v0 WHERE (((((((x'7aba60')/(v0.c1)))GLOB(CASE WHEN v0.c1 THEN v0.c0 END)))AND(3.43401058E8))) ORDER BY NULLIF(DISTINCT ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c0)), CAST(v0.c2 AS INTEGER))  NULLS LAST LIMIT 0x1;
SELECT * FROM v0, vt1 WHERE (22547391);
SELECT DISTINCT * FROM v0, vt1 WHERE (22547391) ORDER BY (~ (((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c1)))) DESC, (((((v0.c0 IN (v0.c0)))OR(vt1.c0)))OR((vt1.c1 IN (vt1.c0, v0.c0)))) ASC  NULLS FIRST, (NOT (v0.c2 COLLATE RTRIM)) DESC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CASE WHEN (((v0.c2, vt1.c1)) NOT BETWEEN ((vt1.c1, v0.c0)) AND ((v0.c2, v0.c1))) THEN ((v0.c1)&(vt1.c1)) END) ORDER BY (~ (((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c1)))) DESC, (((((v0.c0 IN (v0.c0)))OR(vt1.c0)))OR((vt1.c1 IN (vt1.c0, v0.c0)))) ASC  NULLS FIRST, (NOT (v0.c2 COLLATE RTRIM)) DESC LIMIT 2;
SELECT * FROM v0, vt1 WHERE (22547391);
SELECT DISTINCT * FROM v0, vt1 WHERE (22547391) ORDER BY (~ (((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c1)))) DESC, (((((v0.c0 IN (v0.c0)))OR(vt1.c0)))OR((vt1.c1 IN (vt1.c0, v0.c0)))) ASC  NULLS FIRST, (NOT (v0.c2 COLLATE RTRIM)) DESC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CASE WHEN (((v0.c2, vt1.c1)) NOT BETWEEN ((vt1.c1, v0.c0)) AND ((v0.c2, v0.c1))) THEN ((v0.c1)&(vt1.c1)) END) ORDER BY (~ (((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c1)))) DESC, (((((v0.c0 IN (v0.c0)))OR(vt1.c0)))OR((vt1.c1 IN (vt1.c0, v0.c0)))) ASC  NULLS FIRST, (NOT (v0.c2 COLLATE RTRIM)) DESC LIMIT 2;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CASE WHEN ((vt1.c0)AND(vt1.c1)) THEN vt1.c1 COLLATE RTRIM WHEN vt1.c1 THEN UPPER(vt1.c1) ELSE (NOT (vt1.c0)) END);
SELECT MAX(vt1.c0) FROM vt1 WHERE (((CASE WHEN ((vt1.c0)AND(vt1.c1)) THEN vt1.c1 COLLATE RTRIM WHEN vt1.c1 THEN UPPER(vt1.c1) ELSE (NOT (vt1.c0)) END)AND(SUBSTR(CAST(vt1.c0 AS REAL), ((vt1.c1) NOT BETWEEN (vt1.c1) AND (0.1382270436881673))))));
SELECT ALL * FROM vt1 WHERE (LOWER(DISTINCT CASE WHEN vt1.c1 THEN x'3bd02b' WHEN vt1.c0 THEN vt1.c1 END)) ORDER BY 0.23645412931958898 ASC, CASE (+ (vt1.c1))  WHEN x'48' THEN ((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)) WHEN vt1.c0 THEN vt1.c0 COLLATE BINARY END  NULLS FIRST;
SELECT * FROM vt1 WHERE (LOWER(DISTINCT CASE WHEN vt1.c1 THEN x'3bd02b' WHEN vt1.c0 THEN vt1.c1 END)) ORDER BY 0.23645412931958898 ASC, CASE (+ (vt1.c1))  WHEN x'48' THEN ((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)) WHEN vt1.c0 THEN vt1.c0 COLLATE BINARY END  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt1 WHERE (LOWER(DISTINCT CASE WHEN vt1.c1 THEN x'3bd02b' WHEN vt1.c0 THEN vt1.c1 END)) ORDER BY 0.23645412931958898 ASC, CASE (+ (vt1.c1))  WHEN x'48' THEN ((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)) WHEN vt1.c0 THEN vt1.c0 COLLATE BINARY END  NULLS FIRST;
SELECT * FROM vt1 WHERE (LOWER(DISTINCT CASE WHEN vt1.c1 THEN x'3bd02b' WHEN vt1.c0 THEN vt1.c1 END)) ORDER BY 0.23645412931958898 ASC, CASE (+ (vt1.c1))  WHEN x'48' THEN ((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)) WHEN vt1.c0 THEN vt1.c0 COLLATE BINARY END  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (NULL) ORDER BY (((((v0.c0) IS FALSE)))<>((((v0.c2) NOTNULL)))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (NULL) ORDER BY (((((v0.c0) IS FALSE)))!=((((v0.c2) NOTNULL)))) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT * FROM v0 WHERE (CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END COLLATE RTRIM) ORDER BY (((((v0.c0) IS FALSE)))!=((((v0.c2) NOTNULL)))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0 WHERE (NULL) ORDER BY (((((v0.c0) IS FALSE)))<>((((v0.c2) NOTNULL)))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (NULL) ORDER BY (((((v0.c0) IS FALSE)))!=((((v0.c2) NOTNULL)))) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT * FROM v0 WHERE (CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END COLLATE RTRIM) ORDER BY (((((v0.c0) IS FALSE)))!=((((v0.c2) NOTNULL)))) ASC  NULLS LAST LIMIT 0;
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE ((((((v0.c1)IS NOT(v0.c2)), (- (vt1.c0))))<=((((x'') BETWEEN (0.6976950047597911) AND (v0.c0)), ((vt1.c1)!=('1783617003')))))) ORDER BY ((CASE v0.c2  WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c1 ELSE v0.c2 END)>>((+ (v0.c2)))) DESC  NULLS FIRST, x'9c2108'  NULLS LAST;
SELECT DISTINCT MAX(vt1.c1) FROM vt1, v0 WHERE ((((((((v0.c1)IS NOT(v0.c2)), (- (vt1.c0))))==((((x'') BETWEEN (0.6976950047597911) AND (v0.c0)), ((vt1.c1)!=('1783617003'))))))AND(UNLIKELY(((((((v0.c2)OR(v0.c0)))AND(v0.c2)))AND(v0.c0)))))) ORDER BY ((CASE v0.c2  WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c1 ELSE v0.c2 END)>>((+ (v0.c2)))) DESC  NULLS FIRST, x'9c2108'  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1, v0 WHERE (NULLIF(DISTINCT vt1.c0 COLLATE RTRIM, CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c1 END)) ORDER BY ((CASE v0.c2  WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c1 ELSE v0.c2 END)>>((+ (v0.c2)))) DESC  NULLS FIRST, x'9c2108'  NULLS LAST;
SELECT ALL MIN(v0.c2) FROM v0, vt1 NOT INDEXED WHERE (((((v0.c1))>((vt1.c1))) IN (CAST(v0.c0 AS BLOB))));
SELECT MIN(v0.c2) FROM v0, vt1 WHERE (((((v0.c1))>((vt1.c1))) IN (CAST(v0.c0 AS BLOB)))) ORDER BY (((((v0.c0)<>(v0.c1))))>=(((~ (vt1.c0))))) DESC  NULLS FIRST INTERSECT SELECT ALL MIN(v0.c2) FROM v0, vt1 WHERE (STRFTIME('1492239820' COLLATE NOCASE, '', (NOT (v0.c2)), v0.c1)) ORDER BY (((((v0.c0)<>(v0.c1))))>=(((~ (vt1.c0))))) DESC  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1, v0 WHERE (((CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN vt1.c0 END)%(((v0.c0)GLOB(v0.c0)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (((CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN vt1.c0 END)%(((v0.c0)GLOB(v0.c0))))) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (-1345299015);
SELECT * FROM v0 WHERE (((UPPER(DISTINCT v0.c1)) IS TRUE));
SELECT ALL * FROM v0 WHERE (((((UPPER(DISTINCT v0.c1)) IS TRUE))AND((((v0.c0 IN (v0.c2)))IS((((v0.c2))>=((v0.c0)))))))) INTERSECT SELECT * FROM v0 WHERE (x'd1ae' COLLATE NOCASE);
SELECT * FROM v0 WHERE (((UPPER(DISTINCT v0.c1)) IS TRUE));
SELECT ALL * FROM v0 WHERE (((((UPPER(DISTINCT v0.c1)) IS TRUE))AND((((v0.c0 IN (v0.c2)))IS((((v0.c2))>=((v0.c0)))))))) INTERSECT SELECT * FROM v0 WHERE (x'd1ae' COLLATE NOCASE);
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((v0.c2 COLLATE NOCASE)*((~ (v0.c1)))));
SELECT MAX(v0.c2) FROM v0 WHERE (((v0.c2 COLLATE NOCASE)*((~ (v0.c1))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))>>(CASE v0.c2  WHEN v0.c1 THEN 1841692098 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)) LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (TOTAL_CHANGES());
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (TOTAL_CHANGES()) ORDER BY vt1.c0  NULLS FIRST LIMIT 0x0;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))) BETWEEN (((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(-215164316))) AND (((vt1.c1)IS(vt1.c1)))));
SELECT MAX(vt1.c1) FROM vt1 WHERE (((((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))) BETWEEN (((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))OR(0xfffffffff32cda64))) AND (((vt1.c1)IS(vt1.c1)))))AND((((vt1.c0, vt1.c1)) NOT BETWEEN (('345514040', (((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0))))) AND ((((((vt1.c1)AND('駉^j9㕩+UZ')))OR(vt1.c1)), (vt1.c0 IN ())))))));
SELECT ALL * FROM v0 WHERE (CAST(v0.c1 COLLATE BINARY AS REAL));
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 COLLATE BINARY AS REAL))AND((((((v0.c0, v0.c2, v0.c2, v0.c1, v0.c1, v0.c0, v0.c1))>=((NULL, x'', v0.c2, v0.c1, v0.c1, v0.c2, v0.c1))))LIKE(((v0.c2)%(v0.c1))))))) ORDER BY ((rtreenode(v0.c0, v0.c2)) ISNULL) ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CAST(v0.c1 COLLATE BINARY AS REAL));
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 COLLATE BINARY AS REAL))AND((((((v0.c0, v0.c2, v0.c2, v0.c1, v0.c1, v0.c0, v0.c1))>=((NULL, x'', v0.c2, v0.c1, v0.c1, v0.c2, v0.c1))))LIKE(((v0.c2)%(v0.c1))))))) ORDER BY ((rtreenode(v0.c0, v0.c2)) ISNULL) ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)) IN (vt1.c0 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt1 WHERE ((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)) IN (vt1.c0 COLLATE NOCASE))) ORDER BY vt1.c1 ASC  NULLS FIRST, ((0.10394712821331342)-(((vt1.c1) IS TRUE)))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE ((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)) IN (vt1.c0 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt1 WHERE ((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)) IN (vt1.c0 COLLATE NOCASE))) ORDER BY vt1.c1 ASC  NULLS FIRST, ((0.10394712821331342)-(((vt1.c1) IS TRUE)))  NULLS LAST LIMIT 0X1;
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (CASE CASE x''  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE 0.06712564273723465 END  WHEN ((v0.c0)>(v0.c1)) THEN '蠗[LAu' ELSE ((vt1.c1)>=(v0.c1)) END);
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (CASE CASE x''  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE 0.06712564273723465 END  WHEN ((v0.c0)>(v0.c1)) THEN '蠗[LAu' ELSE ((vt1.c1)>(v0.c1)) END) LIMIT 0X0;
SELECT ALL MIN(v0.c2) FROM v0 WHERE (((STRFTIME(x'', v0.c2, v0.c0, 0xffffffffda238ff2, 0.4833298505554897, v0.c2))<=(CAST(v0.c0 AS NUMERIC)))) ORDER BY ((v0.c2)GLOB(v0.c2)) COLLATE BINARY  NULLS FIRST;
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE (((((STRFTIME(x'', v0.c2, v0.c0, 0Xffffffffda238ff2, 0.4833298505554897, v0.c2))=(CAST(v0.c0 AS NUMERIC))))AND(((TRIM(NULL))|(((NULL) BETWEEN (v0.c2) AND (v0.c1))))))) ORDER BY ((v0.c2)GLOB(v0.c2)) COLLATE BINARY  NULLS FIRST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0) IS FALSE))<=(CASE WHEN vt1.c1 THEN vt1.c0 WHEN 0.9734972925240022 THEN vt1.c0 ELSE vt1.c1 END)));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0) IS FALSE))<=(CASE WHEN vt1.c1 THEN vt1.c0 WHEN 0.9734972925240022 THEN vt1.c0 ELSE vt1.c1 END)));
SELECT ALL COUNT(*) FROM vt1 WHERE ((((+ (vt1.c1)))-((((vt1.c1))<=((vt1.c1)))))) ORDER BY ((((vt1.c0) NOTNULL)) NOT NULL) ASC  NULLS LAST, ((((vt1.c0)IS(x'9d63'))) NOT BETWEEN (((((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0))) AND (HEX(NULL))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((+ (vt1.c1)))-((((vt1.c1))=((vt1.c1)))))) ORDER BY ((((vt1.c0) NOTNULL)) NOT NULL) ASC  NULLS LAST, ((((vt1.c0)IS(x'9d63'))) NOT BETWEEN (((((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0))) AND (HEX(NULL))) ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c1)) BETWEEN ((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END)) AND ((vt1.c1)))) ORDER BY ((((vt1.c0) NOTNULL)) NOT NULL) ASC  NULLS LAST, ((((vt1.c0)IS(x'9d63'))) NOT BETWEEN (((((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0))) AND (HEX(NULL))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0 WHERE (((((((v0.c0)&(v0.c2)))AND(CAST(v0.c1 AS TEXT))))AND(CASE v0.c0  WHEN x'' THEN v0.c0 WHEN v0.c2 THEN v0.c2 END))) ORDER BY CASE NULL  WHEN v0.c2 THEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) ELSE (v0.c1 IN (v0.c1)) END  NULLS FIRST, (((~ (v0.c2))) BETWEEN (((v0.c0)<>(v0.c1))) AND (v0.c0)) ASC, (((((((((((((('108254143')OR(v0.c1)))OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))OR(v0.c1)))AND(v0.c0))) NOTNULL)  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c0)&(v0.c2)))AND(CAST(v0.c1 AS TEXT))))AND(CASE v0.c0  WHEN x'' THEN v0.c0 WHEN v0.c2 THEN v0.c2 END))) ORDER BY CASE NULL  WHEN v0.c2 THEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) ELSE (v0.c1 IN (v0.c1)) END  NULLS FIRST, (((~ (v0.c2))) BETWEEN (((v0.c0)<>(v0.c1))) AND (v0.c0)) ASC, (((((((((((((('108254143')OR(v0.c1)))OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))OR(v0.c1)))AND(v0.c0))) NOTNULL)  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((((v0.c0)&(v0.c2)))AND(CAST(v0.c1 AS TEXT))))AND(CASE v0.c0  WHEN x'' THEN v0.c0 WHEN v0.c2 THEN v0.c2 END))) ORDER BY CASE NULL  WHEN v0.c2 THEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) ELSE (v0.c1 IN (v0.c1)) END  NULLS FIRST, (((~ (v0.c2))) BETWEEN (((v0.c0)<>(v0.c1))) AND (v0.c0)) ASC, (((((((((((((('108254143')OR(v0.c1)))OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))OR(v0.c1)))AND(v0.c0))) NOTNULL)  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c0)&(v0.c2)))AND(CAST(v0.c1 AS TEXT))))AND(CASE v0.c0  WHEN x'' THEN v0.c0 WHEN v0.c2 THEN v0.c2 END))) ORDER BY CASE NULL  WHEN v0.c2 THEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) ELSE (v0.c1 IN (v0.c1)) END  NULLS FIRST, (((~ (v0.c2))) BETWEEN (((v0.c0)<>(v0.c1))) AND (v0.c0)) ASC, (((((((((((((('108254143')OR(v0.c1)))OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))OR(v0.c1)))AND(v0.c0))) NOTNULL)  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM v0 WHERE ((((((((((((v0.c0 IN (v0.c0)))OR(CASE WHEN v0.c0 THEN v0.c0 END)))AND(((v0.c1)|(v0.c0)))))AND(v0.c2 COLLATE RTRIM)))AND(x'' COLLATE BINARY)))OR((((v0.c2, v0.c1)) NOT BETWEEN ((v0.c0, v0.c0)) AND ((v0.c0, v0.c1))))));
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE ((((((((((((((v0.c0 IN (v0.c0)))OR(CASE WHEN v0.c0 THEN v0.c0 END)))AND(((v0.c1)|(v0.c0)))))AND(v0.c2 COLLATE RTRIM)))AND(x'' COLLATE BINARY)))OR((((v0.c2, v0.c1)) NOT BETWEEN ((v0.c0, v0.c0)) AND ((v0.c0, v0.c1))))))AND(CAST(((v0.c0)GLOB(v0.c0)) AS TEXT)))) LIMIT 0 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE ((+ (LOWER(v0.c2)))) LIMIT 0;
SELECT MAX(vt1.c1) FROM v0, vt1 WHERE ((NOT (vt1.c0))) ORDER BY JULIANDAY(CASE WHEN 'LC''' THEN v0.c2 END, vt1.c1, HEX(DISTINCT v0.c2)), vt1.c1;
SELECT ALL MAX(vt1.c1) FROM v0, vt1 WHERE ((NOT (vt1.c0))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))) NOT BETWEEN ((v0.c1 IN ())) AND ((- (vt1.c0)))), CASE WHEN CAST(v0.c0 AS INTEGER) THEN ((v0.c1) IS TRUE) ELSE (- (vt1.c1)) END  NULLS FIRST, (((((v0.c2))>((v0.c0)))) BETWEEN (CASE WHEN vt1.c1 THEN vt1.c0 END) AND (((v0.c2) NOTNULL))), (- ((v0.c0 IN (v0.c2, v0.c1))));
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE ((((((((((((((v0.c2 IN (v0.c1, vt1.c1)))AND((((v0.c1, vt1.c1))>=((vt1.c0, vt1.c1))))))AND(((v0.c1)!=(vt1.c1)))))OR(v0.c2)))OR(((vt1.c0)*(v0.c2)))))AND((+ (v0.c0)))))AND(((vt1.c0) IS TRUE))));
SELECT DISTINCT * FROM v0 NOT INDEXED NATURAL JOIN vt1 WHERE ((((((((((((((v0.c2 IN (v0.c1, vt1.c1)))AND((((v0.c1, vt1.c1))==((vt1.c0, vt1.c1))))))AND(((v0.c1)<>(vt1.c1)))))OR(v0.c2)))OR(((vt1.c0)*(v0.c2)))))AND((+ (v0.c0)))))AND(((vt1.c0) IS TRUE)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE ((((((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((v0.c2))))AND((- (v0.c0)))))OR(((v0.c1)&(vt1.c0))))) LIMIT 0;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE ((((((((((((((v0.c2 IN (v0.c1, vt1.c1)))AND((((v0.c1, vt1.c1))>=((vt1.c0, vt1.c1))))))AND(((v0.c1)!=(vt1.c1)))))OR(v0.c2)))OR(((vt1.c0)*(v0.c2)))))AND((+ (v0.c0)))))AND(((vt1.c0) IS TRUE))));
SELECT DISTINCT * FROM v0 NOT INDEXED NATURAL JOIN vt1 WHERE ((((((((((((((v0.c2 IN (v0.c1, vt1.c1)))AND((((v0.c1, vt1.c1))==((vt1.c0, vt1.c1))))))AND(((v0.c1)<>(vt1.c1)))))OR(v0.c2)))OR(((vt1.c0)*(v0.c2)))))AND((+ (v0.c0)))))AND(((vt1.c0) IS TRUE)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE ((((((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((v0.c2))))AND((- (v0.c0)))))OR(((v0.c1)&(vt1.c0))))) LIMIT 0;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (CAST(((NULL)|(0xfffffffff334cee8)) AS REAL));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((CAST(((NULL)|(-214642968)) AS REAL))AND(((((((((((v0.c1)OR(v0.c1)))AND(v0.c0)))AND(v0.c2)))OR(v0.c1))) NOT BETWEEN ((v0.c2 IN (v0.c1))) AND (((v0.c2) IS FALSE)))))) ORDER BY (((((((('*')OR((v0.c2 IN (v0.c2, v0.c0, v0.c2)))))AND(CASE WHEN v0.c2 THEN -2058342109 END)))AND(v0.c2)))OR(((v0.c2) BETWEEN (v0.c1) AND (v0.c0)))) DESC, (+ ((((NULL)) NOT BETWEEN ((v0.c2)) AND ((v0.c0)))))  NULLS LAST, HEX(LIKELIHOOD(DISTINCT v0.c1, v0.c1)) ASC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c1))==((vt1.c1, vt1.c0, '-1731528892', vt1.c1)))) BETWEEN (LAST_INSERT_ROWID()) AND (((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(0.29275557676514585)))));
SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0, vt1.c0, vt1.c0, vt1.c1))=((vt1.c1, vt1.c0, '-1731528892', vt1.c1)))) BETWEEN (LAST_INSERT_ROWID()) AND (((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(0.29275557676514585)))))AND((((vt1.c0 IN (vt1.c0))) BETWEEN ((((vt1.c0, vt1.c1, vt1.c0)) BETWEEN ((vt1.c0, vt1.c1, NULL)) AND ((vt1.c1, vt1.c1, vt1.c0)))) AND (((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1))))))) ORDER BY CASE WHEN ((((((((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)))OR(x'')))AND(vt1.c1)))OR(vt1.c1)) THEN ((((((0.031513398532612924)AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)) WHEN ('830918138' IN ()) THEN ((vt1.c0)IS NOT(vt1.c0)) ELSE 'v' END, (vt1.c1 IN (CASE vt1.c0  WHEN '681166576' THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END, ((((vt1.c1)OR(NULL)))OR(vt1.c0)))), x''  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c1))==((vt1.c1, vt1.c0, '-1731528892', vt1.c1)))) BETWEEN (LAST_INSERT_ROWID()) AND (((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(0.29275557676514585)))));
SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0, vt1.c0, vt1.c0, vt1.c1))=((vt1.c1, vt1.c0, '-1731528892', vt1.c1)))) BETWEEN (LAST_INSERT_ROWID()) AND (((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(0.29275557676514585)))))AND((((vt1.c0 IN (vt1.c0))) BETWEEN ((((vt1.c0, vt1.c1, vt1.c0)) BETWEEN ((vt1.c0, vt1.c1, NULL)) AND ((vt1.c1, vt1.c1, vt1.c0)))) AND (((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1))))))) ORDER BY CASE WHEN ((((((((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)))OR(x'')))AND(vt1.c1)))OR(vt1.c1)) THEN ((((((0.031513398532612924)AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)) WHEN ('830918138' IN ()) THEN ((vt1.c0)IS NOT(vt1.c0)) ELSE 'v' END, (vt1.c1 IN (CASE vt1.c0  WHEN '681166576' THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END, ((((vt1.c1)OR(NULL)))OR(vt1.c0)))), x''  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0, vt1 WHERE (((((v0.c0) IS TRUE))AND(((vt1.c0) ISNULL))));
SELECT ALL * FROM v0, vt1 WHERE (((((v0.c0) IS TRUE))AND(((vt1.c0) ISNULL)))) INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((- (vt1.c1))) NOTNULL));
SELECT ALL * FROM v0, vt1 WHERE (((((v0.c0) IS TRUE))AND(((vt1.c0) ISNULL))));
SELECT ALL * FROM v0, vt1 WHERE (((((v0.c0) IS TRUE))AND(((vt1.c0) ISNULL)))) INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((- (vt1.c1))) NOTNULL));
SELECT COUNT(*) FROM vt1 WHERE ((((((vt1.c1)>>(vt1.c1))))=(((('RA') NOT NULL))))) ORDER BY (((vt1.c0) IS FALSE) IN ()) ASC  NULLS FIRST, CAST(TRIM(DISTINCT vt1.c1, vt1.c0) AS BLOB) ASC  NULLS LAST, ((vt1.c0 IN (vt1.c1)) IN (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1))))  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE ((((((((vt1.c1)>>(vt1.c1))))==(((('RA') NOT NULL)))))AND(NULL))) ORDER BY (((vt1.c0) IS FALSE) IN ()) ASC  NULLS FIRST, CAST(TRIM(DISTINCT vt1.c1, vt1.c0) AS BLOB) ASC  NULLS LAST, ((vt1.c0 IN (vt1.c1)) IN (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1))))  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (HEX(CAST(vt1.c1 AS BLOB))) ORDER BY (((vt1.c0) IS FALSE) IN ()) ASC  NULLS FIRST, CAST(TRIM(DISTINCT vt1.c1, vt1.c0) AS BLOB) ASC  NULLS LAST, ((vt1.c0 IN (vt1.c1)) IN (((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1))))  NULLS LAST;
SELECT MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0)*(vt1.c0))) NOT BETWEEN (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))) AND (CHANGES()))) ORDER BY CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END COLLATE NOCASE ASC, (((vt1.c0)<=(vt1.c0)) IN ((((vt1.c1, vt1.c1, vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c1, vt1.c1, vt1.c1)) AND ((NULL, 0.9906937827258311, vt1.c1, vt1.c0))), vt1.c1 COLLATE NOCASE)), ((vt1.c0)IS(vt1.c1)) COLLATE NOCASE ASC  NULLS LAST;
SELECT MAX(vt1.c1) FROM vt1 WHERE (((((((vt1.c0)*(vt1.c0))) NOT BETWEEN (((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))) AND (CHANGES())))AND(vt1.c0))) ORDER BY CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END COLLATE NOCASE ASC, (((vt1.c0)<=(vt1.c0)) IN ((((vt1.c1, vt1.c1, vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c1, vt1.c1, vt1.c1)) AND ((NULL, 0.9906937827258311, vt1.c1, vt1.c0))), vt1.c1 COLLATE NOCASE)), ((vt1.c0)IS(vt1.c1)) COLLATE NOCASE ASC  NULLS LAST LIMIT 0X1;
SELECT COUNT(*) FROM vt1, v0 WHERE (((((((((((vt1.c0) NOT NULL))OR((- (v0.c0)))))OR((((v0.c2, v0.c1))<((v0.c0, vt1.c0))))))OR(((((((((0.45318831886071853)OR(vt1.c1)))OR(v0.c0)))AND(v0.c1)))OR(vt1.c1)))))OR(0.9144572328792627))) ORDER BY ((LIKELY(DISTINCT v0.c0))<=(((((((((vt1.c0)OR(v0.c1)))OR(v0.c2)))AND(v0.c1)))AND(vt1.c0))))  NULLS LAST, (((((((((+ (v0.c1)))AND(vt1.c0)))OR((('-1213446927')>>(vt1.c0)))))AND(LIKELY(DISTINCT vt1.c0))))OR(((vt1.c1)==(v0.c1))));
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((((((((((vt1.c0) NOT NULL))OR((- (v0.c0)))))OR((((v0.c2, v0.c1))<((v0.c0, vt1.c0))))))OR(((((((((0.45318831886071853)OR(vt1.c1)))OR(v0.c0)))AND(v0.c1)))OR(vt1.c1)))))OR(0.9144572328792627))) ORDER BY ((((vt1.c1) NOT NULL))>(CAST(v0.c2 AS BLOB))) ASC, (+ ((vt1.c0 IN ()))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((v0.c0) BETWEEN (vt1.c0) AND (v0.c1)) IN ())) ORDER BY ((((vt1.c1) NOT NULL))>(CAST(v0.c2 AS BLOB))) ASC, (+ ((vt1.c0 IN ())));
SELECT ALL * FROM v0, vt1 WHERE ((((v0.c2 COLLATE NOCASE, (vt1.c1 IN ()), ((((((vt1.c1)OR(v0.c2)))OR(v0.c1)))AND(vt1.c1)), vt1.c1 COLLATE BINARY))==((CAST('-1985327235' AS INTEGER), (((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))), ((((((vt1.c1)OR(v0.c0)))AND(v0.c0)))AND(v0.c0)), '-438627572'))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((v0.c2 COLLATE NOCASE, (vt1.c1 IN ()), ((((((vt1.c1)OR(v0.c2)))OR(v0.c1)))AND(vt1.c1)), vt1.c1 COLLATE BINARY))==((CAST('-1985327235' AS INTEGER), (((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))), ((((((vt1.c1)OR(v0.c0)))AND(v0.c0)))AND(v0.c0)), '-438627572')))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(((vt1.c1)OR(0xffffffffaf0c3c4f)) AS REAL));
SELECT ALL * FROM v0, vt1 WHERE ((((v0.c2 COLLATE NOCASE, (vt1.c1 IN ()), ((((((vt1.c1)OR(v0.c2)))OR(v0.c1)))AND(vt1.c1)), vt1.c1 COLLATE BINARY))==((CAST('-1985327235' AS INTEGER), (((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))), ((((((vt1.c1)OR(v0.c0)))AND(v0.c0)))AND(v0.c0)), '-438627572'))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((v0.c2 COLLATE NOCASE, (vt1.c1 IN ()), ((((((vt1.c1)OR(v0.c2)))OR(v0.c1)))AND(vt1.c1)), vt1.c1 COLLATE BINARY))==((CAST('-1985327235' AS INTEGER), (((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))), ((((((vt1.c1)OR(v0.c0)))AND(v0.c0)))AND(v0.c0)), '-438627572')))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(((vt1.c1)OR(0xffffffffaf0c3c4f)) AS REAL));
SELECT * FROM vt1 WHERE ((NOT (vt1.c1 COLLATE NOCASE))) ORDER BY ((CAST(vt1.c1 AS INTEGER))<<(vt1.c0 COLLATE NOCASE)), CAST(((vt1.c0)=(vt1.c0)) AS BLOB) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((NOT (vt1.c1 COLLATE NOCASE)))AND(((((vt1.c0)!=(vt1.c0)))IS(CAST(vt1.c0 AS NUMERIC)))))) ORDER BY CAST(vt1.c1 AS TEXT) COLLATE BINARY DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE ((NOT (vt1.c1 COLLATE NOCASE))) ORDER BY ((CAST(vt1.c1 AS INTEGER))<<(vt1.c0 COLLATE NOCASE)), CAST(((vt1.c0)=(vt1.c0)) AS BLOB) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((NOT (vt1.c1 COLLATE NOCASE)))AND(((((vt1.c0)!=(vt1.c0)))IS(CAST(vt1.c0 AS NUMERIC)))))) ORDER BY CAST(vt1.c1 AS TEXT) COLLATE BINARY DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((((vt1.c1)GLOB(vt1.c0)))OR(highlight(vt1.c1, vt1.c0, vt1.c1, vt1.c0))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((((vt1.c1)GLOB(vt1.c0)))OR(highlight(vt1.c1, vt1.c0, vt1.c1, vt1.c0))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOT NULL)) NOT BETWEEN (((vt1.c0)LIKE(vt1.c1))) AND (vt1.c1 COLLATE RTRIM))) ORDER BY ((((vt1.c1)GLOB(vt1.c0)))OR(highlight(vt1.c1, vt1.c0, vt1.c1, vt1.c0))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((((vt1.c1)GLOB(vt1.c0)))OR(highlight(vt1.c1, vt1.c0, vt1.c1, vt1.c0))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((((vt1.c1)GLOB(vt1.c0)))OR(highlight(vt1.c1, vt1.c0, vt1.c1, vt1.c0))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c0) NOT NULL)) NOT BETWEEN (((vt1.c0)LIKE(vt1.c1))) AND (vt1.c1 COLLATE RTRIM))) ORDER BY ((((vt1.c1)GLOB(vt1.c0)))OR(highlight(vt1.c1, vt1.c0, vt1.c1, vt1.c0))) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (json_remove(JULIANDAY(v0.c2, NULL, v0.c1), (+ (v0.c2))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((json_remove(JULIANDAY(v0.c2, NULL, v0.c1), (+ (v0.c2))))AND(('695742965' IN ())))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((((NULL IN (v0.c2)))OR((((((('*U㬅ᒍ㑫byrc')AND(NULL)))OR(v0.c1)))OR(v0.c1)))))OR(CAST(v0.c2 AS INTEGER)))) LIMIT 0;
SELECT * FROM v0, vt1 WHERE (json_remove(JULIANDAY(v0.c2, NULL, v0.c1), (+ (v0.c2))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((json_remove(JULIANDAY(v0.c2, NULL, v0.c1), (+ (v0.c2))))AND(('695742965' IN ())))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((((NULL IN (v0.c2)))OR((((((('*U㬅ᒍ㑫byrc')AND(NULL)))OR(v0.c1)))OR(v0.c1)))))OR(CAST(v0.c2 AS INTEGER)))) LIMIT 0;
SELECT MAX(vt1.c1) FROM vt1 WHERE ((('1595081513')%((vt1.c0 IN ())))) ORDER BY CASE CAST(vt1.c0 AS NUMERIC)  WHEN (('A')>>(vt1.c0)) THEN CASE '-873165580'  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END WHEN ((vt1.c1) NOTNULL) THEN vt1.c0 COLLATE RTRIM WHEN ((vt1.c1)==(vt1.c0)) THEN ((vt1.c0)<>(0Xffffffffff034eb3)) END ASC;
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE ((((('1595081513')%((vt1.c0 IN ()))))AND(vt1.c0))) ORDER BY CASE CAST(vt1.c0 AS NUMERIC)  WHEN (('A')>>(vt1.c0)) THEN CASE '-873165580'  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END WHEN ((vt1.c1) NOTNULL) THEN vt1.c0 COLLATE RTRIM WHEN ((vt1.c1)==(vt1.c0)) THEN ((vt1.c0)<>(-16560461)) END ASC LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END COLLATE RTRIM) ORDER BY CASE CAST(vt1.c0 AS NUMERIC)  WHEN (('A')>>(vt1.c0)) THEN CASE '-873165580'  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END WHEN ((vt1.c1) NOTNULL) THEN vt1.c0 COLLATE RTRIM WHEN ((vt1.c1)=(vt1.c0)) THEN ((vt1.c0)!=(-16560461)) END ASC LIMIT 1;
SELECT * FROM vt1 INNER JOIN v0 ON ((((vt1.c1)OR(v0.c2)))&(((v0.c1)==(v0.c2)))) WHERE (0.0650390867340076);
SELECT * FROM vt1 INNER JOIN v0 ON ((((vt1.c1)OR(v0.c2)))&(((v0.c1)==(v0.c2)))) WHERE (((0.0650390867340076)AND(CAST((v0.c0 IN ()) AS REAL)))) ORDER BY ((((CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN x'71efc5a2' ELSE v0.c2 END)OR((((vt1.c0, v0.c2, v0.c1, v0.c2, vt1.c0, vt1.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c0, v0.c0, vt1.c0, v0.c0)) AND ((v0.c2, vt1.c0, vt1.c1, v0.c2, v0.c0, v0.c2))))))AND(vt1.c1)) ASC, vt1.c1;
SELECT * FROM vt1 INNER JOIN v0 ON ((((vt1.c1)OR(v0.c2)))&(((v0.c1)==(v0.c2)))) WHERE (0.0650390867340076);
SELECT * FROM vt1 INNER JOIN v0 ON ((((vt1.c1)OR(v0.c2)))&(((v0.c1)==(v0.c2)))) WHERE (((0.0650390867340076)AND(CAST((v0.c0 IN ()) AS REAL)))) ORDER BY ((((CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN x'71efc5a2' ELSE v0.c2 END)OR((((vt1.c0, v0.c2, v0.c1, v0.c2, vt1.c0, vt1.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c0, v0.c0, vt1.c0, v0.c0)) AND ((v0.c2, vt1.c0, vt1.c1, v0.c2, v0.c0, v0.c2))))))AND(vt1.c1)) ASC, vt1.c1;
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0 COLLATE NOCASE)!=(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c0 END))) ORDER BY (((((v0.c1))>=(('-1312942963')))) IS FALSE) DESC;
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0 COLLATE NOCASE)<(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c0 END))) ORDER BY (((((v0.c1))>=(('-1312942963')))) IS FALSE) DESC LIMIT 1 INTERSECT SELECT * FROM vt1, v0 WHERE (json_object((vt1.c1 IN ()), (((vt1.c1, vt1.c1, v0.c1, v0.c0))<=((v0.c0, v0.c2, v0.c1, 360220862))), (((v0.c2))>((v0.c2))))) ORDER BY (((((v0.c1))>=(('-1312942963')))) IS FALSE) DESC LIMIT 1;
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0 COLLATE NOCASE)!=(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c0 END))) ORDER BY (((((v0.c1))>=(('-1312942963')))) IS FALSE) DESC;
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0 COLLATE NOCASE)<(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c0 END))) ORDER BY (((((v0.c1))>=(('-1312942963')))) IS FALSE) DESC LIMIT 1 INTERSECT SELECT * FROM vt1, v0 WHERE (json_object((vt1.c1 IN ()), (((vt1.c1, vt1.c1, v0.c1, v0.c0))<=((v0.c0, v0.c2, v0.c1, 360220862))), (((v0.c2))>((v0.c2))))) ORDER BY (((((v0.c1))>=(('-1312942963')))) IS FALSE) DESC LIMIT 1;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt1 ON TRIM(v0.c2 COLLATE NOCASE) WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (v0.c1))) ISNULL)) ORDER BY CAST(((((v0.c1)OR(vt1.c0)))OR(vt1.c0)) AS INTEGER) ASC, (-1432184556 IN ())  NULLS LAST;
SELECT * FROM v0 INNER JOIN vt1 ON TRIM(v0.c2 COLLATE NOCASE) WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (v0.c1))) ISNULL)) ORDER BY CAST(((((v0.c1)OR(vt1.c0)))OR(vt1.c0)) AS INTEGER) ASC, (0Xffffffffaaa29914 IN ())  NULLS LAST;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt1 ON TRIM(v0.c2 COLLATE NOCASE) WHERE (((((vt1.c0) BETWEEN (vt1.c0) AND (v0.c1))) ISNULL)) ORDER BY CAST(((((v0.c1)OR(vt1.c0)))OR(vt1.c0)) AS INTEGER) ASC, (-1432184556 IN ())  NULLS LAST;
SELECT MAX(vt1.c0) FROM vt1 WHERE (MAX((vt1.c1 IN ()), (- (vt1.c1)), (((vt1.c1))<((vt1.c1))), TYPEOF(vt1.c1), ((vt1.c0) IS FALSE))) ORDER BY CAST((((vt1.c1))>((vt1.c0))) AS NUMERIC);
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((MAX((vt1.c1 IN ()), (- (vt1.c1)), (((vt1.c1))<((vt1.c1))), TYPEOF(vt1.c1), ((vt1.c0) IS FALSE)))AND((CASE WHEN x'' THEN vt1.c1 WHEN x'bd4fee35' THEN vt1.c1 WHEN 0.9073482045992889 THEN vt1.c1 END IN (((vt1.c1)*(x'2f29'))))))) ORDER BY (((- (vt1.c1))) IS FALSE) DESC  NULLS FIRST INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE ((((('2011659437')AND(NULLIF(vt1.c1, vt1.c0))))OR(((((((vt1.c1)AND(vt1.c0)))AND(0.010346837777415185)))AND(NULL))))) ORDER BY (((- (vt1.c1))) IS FALSE) DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((v0.c2)>=(v0.c1)))=(NULL))) ORDER BY ((v0.c2) BETWEEN (LIKELY(v0.c2)) AND (UNLIKELY(v0.c1))) DESC, (((((((((((((('1195417316')AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(0.2920216484030831)))OR(v0.c2)))AND(((v0.c1)LIKE(v0.c2)))))OR(((v0.c2)IS(v0.c0)))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((v0.c2)>=(v0.c1)))=(NULL))) ORDER BY ((v0.c2) BETWEEN (LIKELY(v0.c2)) AND (UNLIKELY(v0.c1))) DESC, (((((((((((((('1195417316')AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(0.2920216484030831)))OR(v0.c2)))AND(((v0.c1)LIKE(v0.c2)))))OR(((v0.c2)IS(v0.c0)))) ASC  NULLS LAST LIMIT 4;
SELECT ALL * FROM v0 WHERE (((((v0.c2)>=(v0.c1)))=(NULL))) ORDER BY ((v0.c2) BETWEEN (LIKELY(v0.c2)) AND (UNLIKELY(v0.c1))) DESC, (((((((((((((('1195417316')AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(0.2920216484030831)))OR(v0.c2)))AND(((v0.c1)LIKE(v0.c2)))))OR(((v0.c2)IS(v0.c0)))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((v0.c2)>=(v0.c1)))=(NULL))) ORDER BY ((v0.c2) BETWEEN (LIKELY(v0.c2)) AND (UNLIKELY(v0.c1))) DESC, (((((((((((((('1195417316')AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(0.2920216484030831)))OR(v0.c2)))AND(((v0.c1)LIKE(v0.c2)))))OR(((v0.c2)IS(v0.c0)))) ASC  NULLS LAST LIMIT 4;
SELECT * FROM vt1 CROSS JOIN v0 ON CASE ((((((vt1.c0)OR(vt1.c0)))OR(v0.c0)))AND(v0.c0))  WHEN (('؂ H6HN.OL')<>('856469861')) THEN LTRIM(vt1.c1, v0.c2) END WHERE (((v0.c0 COLLATE RTRIM)AND(((v0.c1)>=(v0.c0)))));
SELECT ALL * FROM vt1 CROSS JOIN v0 ON CASE ((((((vt1.c0)OR(vt1.c0)))OR(v0.c0)))AND(v0.c0))  WHEN (('؂ H6HN.OL')!=('856469861')) THEN LTRIM(vt1.c1, v0.c2) END WHERE (((v0.c0 COLLATE RTRIM)AND(((v0.c1)>=(v0.c0))))) ORDER BY (vt1.c1 IN ()) COLLATE NOCASE, ((((vt1.c1)/(v0.c0)))AND(((v0.c2)!=(v0.c1)))) DESC LIMIT 0x1 INTERSECT SELECT * FROM vt1 CROSS JOIN v0 ON CASE ((((((vt1.c0)OR(vt1.c0)))OR(v0.c0)))AND(v0.c0))  WHEN (('؂ H6HN.OL')!=('856469861')) THEN LTRIM(vt1.c1, v0.c2) END WHERE (((TRIM(vt1.c1)) BETWEEN (((v0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (1132569925))) ORDER BY (vt1.c1 IN ()) COLLATE NOCASE, ((((vt1.c1)/(v0.c0)))AND(((v0.c2)!=(v0.c1)))) DESC LIMIT 0x1;
SELECT * FROM vt1 CROSS JOIN v0 ON CASE ((((((vt1.c0)OR(vt1.c0)))OR(v0.c0)))AND(v0.c0))  WHEN (('؂ H6HN.OL')<>('856469861')) THEN LTRIM(vt1.c1, v0.c2) END WHERE (((v0.c0 COLLATE RTRIM)AND(((v0.c1)>=(v0.c0)))));
SELECT ALL * FROM vt1 CROSS JOIN v0 ON CASE ((((((vt1.c0)OR(vt1.c0)))OR(v0.c0)))AND(v0.c0))  WHEN (('؂ H6HN.OL')!=('856469861')) THEN LTRIM(vt1.c1, v0.c2) END WHERE (((v0.c0 COLLATE RTRIM)AND(((v0.c1)>=(v0.c0))))) ORDER BY (vt1.c1 IN ()) COLLATE NOCASE, ((((vt1.c1)/(v0.c0)))AND(((v0.c2)!=(v0.c1)))) DESC LIMIT 0x1 INTERSECT SELECT * FROM vt1 CROSS JOIN v0 ON CASE ((((((vt1.c0)OR(vt1.c0)))OR(v0.c0)))AND(v0.c0))  WHEN (('؂ H6HN.OL')!=('856469861')) THEN LTRIM(vt1.c1, v0.c2) END WHERE (((TRIM(vt1.c1)) BETWEEN (((v0.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (1132569925))) ORDER BY (vt1.c1 IN ()) COLLATE NOCASE, ((((vt1.c1)/(v0.c0)))AND(((v0.c2)!=(v0.c1)))) DESC LIMIT 0x1;
SELECT * FROM vt1 WHERE (json_valid(CAST(vt1.c0 AS INTEGER)));
SELECT * FROM vt1 WHERE (json_valid(CAST(vt1.c0 AS INTEGER)));
SELECT * FROM vt1 WHERE (json_valid(CAST(vt1.c0 AS INTEGER)));
SELECT * FROM vt1 WHERE (json_valid(CAST(vt1.c0 AS INTEGER)));
SELECT * FROM vt1, v0 WHERE ((((((vt1.c0)*(v0.c1)), ((((v0.c1)AND(v0.c2)))OR(v0.c1))))>=((CASE WHEN vt1.c0 THEN v0.c0 ELSE vt1.c1 END, ((vt1.c0) NOT NULL))))) ORDER BY CAST(v0.c0 AS REAL), CAST(vt1.c0 AS BLOB);
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((((vt1.c0)*(v0.c1)), ((((v0.c1)AND(v0.c2)))OR(v0.c1))))>=((CASE WHEN vt1.c0 THEN v0.c0 ELSE vt1.c1 END, ((vt1.c0) NOT NULL)))))AND((NOT (CAST(0.7902953842009414 AS REAL)))))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1))) BETWEEN ((((v0.c2))>((vt1.c0)))) AND (vt1.c0 COLLATE RTRIM)) DESC, ((((((((((((((vt1.c0)AND(vt1.c1)))OR('-380708997')))OR(((vt1.c0) NOT NULL))))AND(((vt1.c0) BETWEEN (v0.c0) AND (vt1.c1)))))OR(HEX(vt1.c0))))AND(CAST(v0.c1 AS REAL))))OR(((((v0.c0)OR(v0.c2)))AND(NULL)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((vt1.c1 COLLATE RTRIM)>>(((v0.c2)<<(v0.c1))))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1))) BETWEEN ((((v0.c2))>((vt1.c0)))) AND (vt1.c0 COLLATE RTRIM)) DESC, ((((((((((((((vt1.c0)AND(vt1.c1)))OR('-380708997')))OR(((vt1.c0) NOT NULL))))AND(((vt1.c0) BETWEEN (v0.c0) AND (vt1.c1)))))OR(HEX(vt1.c0))))AND(CAST(v0.c1 AS REAL))))OR(((((v0.c0)OR(v0.c2)))AND(NULL)))) DESC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((((((vt1.c0)*(v0.c1)), ((((v0.c1)AND(v0.c2)))OR(v0.c1))))>=((CASE WHEN vt1.c0 THEN v0.c0 ELSE vt1.c1 END, ((vt1.c0) NOT NULL))))) ORDER BY CAST(v0.c0 AS REAL), CAST(vt1.c0 AS BLOB);
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((((vt1.c0)*(v0.c1)), ((((v0.c1)AND(v0.c2)))OR(v0.c1))))>=((CASE WHEN vt1.c0 THEN v0.c0 ELSE vt1.c1 END, ((vt1.c0) NOT NULL)))))AND((NOT (CAST(0.7902953842009414 AS REAL)))))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1))) BETWEEN ((((v0.c2))>((vt1.c0)))) AND (vt1.c0 COLLATE RTRIM)) DESC, ((((((((((((((vt1.c0)AND(vt1.c1)))OR('-380708997')))OR(((vt1.c0) NOT NULL))))AND(((vt1.c0) BETWEEN (v0.c0) AND (vt1.c1)))))OR(HEX(vt1.c0))))AND(CAST(v0.c1 AS REAL))))OR(((((v0.c0)OR(v0.c2)))AND(NULL)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((vt1.c1 COLLATE RTRIM)>>(((v0.c2)<<(v0.c1))))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1))) BETWEEN ((((v0.c2))>((vt1.c0)))) AND (vt1.c0 COLLATE RTRIM)) DESC, ((((((((((((((vt1.c0)AND(vt1.c1)))OR('-380708997')))OR(((vt1.c0) NOT NULL))))AND(((vt1.c0) BETWEEN (v0.c0) AND (vt1.c1)))))OR(HEX(vt1.c0))))AND(CAST(v0.c1 AS REAL))))OR(((((v0.c0)OR(v0.c2)))AND(NULL)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)/(TRIM(DISTINCT vt1.c0, vt1.c1)))) ORDER BY CASE ((vt1.c1)GLOB(vt1.c0))  WHEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN TYPEOF(vt1.c1) ELSE ((((((vt1.c1)OR(vt1.c0)))OR(NULL)))OR(vt1.c0)) END, ((SQLITE_COMPILEOPTION_GET(0x5a7a5c2f)) NOT BETWEEN ((+ (vt1.c1))) AND ((vt1.c0 IN (vt1.c0)))) DESC;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)/(TRIM(DISTINCT vt1.c0, vt1.c1)))) ORDER BY (((((((vt1.c0 IN (',', vt1.c0, vt1.c0)))OR(CASE WHEN 0.6693951465160071 THEN vt1.c0 WHEN 724715347 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)))OR(vt1.c1)))OR(((vt1.c1)AND(vt1.c0)))) ASC  NULLS LAST LIMIT 0x3 INTERSECT SELECT * FROM vt1 WHERE (((((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))*((- (vt1.c0))))) ORDER BY (((((((vt1.c0 IN (',', vt1.c0, vt1.c0)))OR(CASE WHEN 0.6693951465160071 THEN vt1.c0 WHEN 724715347 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)))OR(vt1.c1)))OR(((vt1.c1)AND(vt1.c0)))) ASC  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)/(TRIM(DISTINCT vt1.c0, vt1.c1)))) ORDER BY CASE ((vt1.c1)GLOB(vt1.c0))  WHEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN TYPEOF(vt1.c1) ELSE ((((((vt1.c1)OR(vt1.c0)))OR(NULL)))OR(vt1.c0)) END, ((SQLITE_COMPILEOPTION_GET(0x5a7a5c2f)) NOT BETWEEN ((+ (vt1.c1))) AND ((vt1.c0 IN (vt1.c0)))) DESC;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE BINARY)/(TRIM(DISTINCT vt1.c0, vt1.c1)))) ORDER BY (((((((vt1.c0 IN (',', vt1.c0, vt1.c0)))OR(CASE WHEN 0.6693951465160071 THEN vt1.c0 WHEN 724715347 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)))OR(vt1.c1)))OR(((vt1.c1)AND(vt1.c0)))) ASC  NULLS LAST LIMIT 0x3 INTERSECT SELECT * FROM vt1 WHERE (((((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))*((- (vt1.c0))))) ORDER BY (((((((vt1.c0 IN (',', vt1.c0, vt1.c0)))OR(CASE WHEN 0.6693951465160071 THEN vt1.c0 WHEN 724715347 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)))OR(vt1.c1)))OR(((vt1.c1)AND(vt1.c0)))) ASC  NULLS LAST LIMIT 3;
SELECT * FROM vt1, v0 WHERE (v0.c0) ORDER BY ((CASE WHEN vt1.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END)&((NOT (v0.c1)))), (((v0.c0 IN (1.729661663E9))) ISNULL);
SELECT * FROM vt1, v0 WHERE (v0.c0) ORDER BY UNICODE('-1067114523')  NULLS LAST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (json_quote(((v0.c1) IS TRUE))) ORDER BY UNICODE('-1067114523')  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (v0.c0) ORDER BY ((CASE WHEN vt1.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END)&((NOT (v0.c1)))), (((v0.c0 IN (1.729661663E9))) ISNULL);
SELECT * FROM vt1, v0 WHERE (v0.c0) ORDER BY UNICODE('-1067114523')  NULLS LAST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (json_quote(((v0.c1) IS TRUE))) ORDER BY UNICODE('-1067114523')  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (TYPEOF(v0.c2 COLLATE NOCASE));
SELECT * FROM v0, vt1 WHERE (TYPEOF(v0.c2 COLLATE NOCASE));
SELECT * FROM v0, vt1 WHERE (TYPEOF(v0.c2 COLLATE NOCASE));
SELECT * FROM v0, vt1 WHERE (TYPEOF(v0.c2 COLLATE NOCASE));
SELECT ALL * FROM v0 WHERE (v0.c2) ORDER BY ((((((((((((v0.c1)||(v0.c2)))OR(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END)))AND(0Xffffffffa263402f)))AND(HEX(v0.c0))))OR(NULL)))OR(((('1047413736', v0.c0, v0.c2, v0.c2, v0.c0))>=((v0.c0, v0.c2, v0.c0, v0.c2, x''))))) ASC, (NOT (CAST(v0.c1 AS INTEGER)))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (v0.c2) ORDER BY CASE v0.c2  WHEN x'' THEN ((v0.c2)<=(v0.c2)) END ASC, (~ (v0.c0))  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (v0.c2) ORDER BY ((((((((((((v0.c1)||(v0.c2)))OR(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END)))AND(0Xffffffffa263402f)))AND(HEX(v0.c0))))OR(NULL)))OR(((('1047413736', v0.c0, v0.c2, v0.c2, v0.c0))>=((v0.c0, v0.c2, v0.c0, v0.c2, x''))))) ASC, (NOT (CAST(v0.c1 AS INTEGER)))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (v0.c2) ORDER BY CASE v0.c2  WHEN x'' THEN ((v0.c2)<=(v0.c2)) END ASC, (~ (v0.c0))  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (vt1.c0) LIMIT 3 INTERSECT SELECT ALL * FROM vt1 WHERE (CASE CAST(vt1.c0 AS REAL)  WHEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(NULL)))AND(vt1.c1)) THEN NULL WHEN IFNULL(vt1.c0, vt1.c0) THEN CAST('1047413736' AS TEXT) WHEN ((vt1.c1) NOTNULL) THEN vt1.c0 WHEN ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)) THEN CAST(vt1.c0 AS BLOB) END) LIMIT 0X3;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT ALL * FROM vt1 WHERE (vt1.c0) LIMIT 3 INTERSECT SELECT ALL * FROM vt1 WHERE (CASE CAST(vt1.c0 AS REAL)  WHEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(NULL)))AND(vt1.c1)) THEN NULL WHEN IFNULL(vt1.c0, vt1.c0) THEN CAST('1047413736' AS TEXT) WHEN ((vt1.c1) NOTNULL) THEN vt1.c0 WHEN ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)) THEN CAST(vt1.c0 AS BLOB) END) LIMIT 0X3;
SELECT * FROM v0, vt1 WHERE (((CAST(vt1.c0 AS TEXT))&(CAST(v0.c2 AS REAL)))) ORDER BY (((vt1.c1) BETWEEN (v0.c1) AND (v0.c2)) IN (v0.c0)) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((((CAST(vt1.c0 AS TEXT))&(CAST(v0.c2 AS REAL))))AND(((((v0.c2)<=(v0.c1))) NOT BETWEEN ((v0.c2 IN ())) AND (((vt1.c0)IS(v0.c2))))))) ORDER BY ((v0.c2 IN (vt1.c1, vt1.c1)) IN (((vt1.c1)>>('-1312942963')), vt1.c0))  NULLS LAST, v0.c0 ASC, (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END, ((((((((v0.c1)AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))AND(vt1.c1))))<=((((vt1.c0) IS TRUE), v0.c1 COLLATE BINARY))) ASC  NULLS FIRST, (((~ (v0.c2))) NOT BETWEEN (((vt1.c0) IS TRUE)) AND (((((v0.c1)AND(vt1.c0)))AND(v0.c0)))) DESC  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((((v0.c2)/(vt1.c1))) IS FALSE)) ORDER BY ((v0.c2 IN (vt1.c1, vt1.c1)) IN (((vt1.c1)>>('-1312942963')), vt1.c0))  NULLS LAST, v0.c0 ASC, (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END, ((((((((v0.c1)AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))AND(vt1.c1))))<=((((vt1.c0) IS TRUE), v0.c1 COLLATE BINARY))) ASC  NULLS FIRST, (((~ (v0.c2))) NOT BETWEEN (((vt1.c0) IS TRUE)) AND (((((v0.c1)AND(vt1.c0)))AND(v0.c0)))) DESC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((CAST(vt1.c0 AS TEXT))&(CAST(v0.c2 AS REAL)))) ORDER BY (((vt1.c1) BETWEEN (v0.c1) AND (v0.c2)) IN (v0.c0)) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((((CAST(vt1.c0 AS TEXT))&(CAST(v0.c2 AS REAL))))AND(((((v0.c2)<=(v0.c1))) NOT BETWEEN ((v0.c2 IN ())) AND (((vt1.c0)IS(v0.c2))))))) ORDER BY ((v0.c2 IN (vt1.c1, vt1.c1)) IN (((vt1.c1)>>('-1312942963')), vt1.c0))  NULLS LAST, v0.c0 ASC, (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END, ((((((((v0.c1)AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))AND(vt1.c1))))<=((((vt1.c0) IS TRUE), v0.c1 COLLATE BINARY))) ASC  NULLS FIRST, (((~ (v0.c2))) NOT BETWEEN (((vt1.c0) IS TRUE)) AND (((((v0.c1)AND(vt1.c0)))AND(v0.c0)))) DESC  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((((v0.c2)/(vt1.c1))) IS FALSE)) ORDER BY ((v0.c2 IN (vt1.c1, vt1.c1)) IN (((vt1.c1)>>('-1312942963')), vt1.c0))  NULLS LAST, v0.c0 ASC, (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END, ((((((((v0.c1)AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))AND(vt1.c1))))<=((((vt1.c0) IS TRUE), v0.c1 COLLATE BINARY))) ASC  NULLS FIRST, (((~ (v0.c2))) NOT BETWEEN (((vt1.c0) IS TRUE)) AND (((((v0.c1)AND(vt1.c0)))AND(v0.c0)))) DESC  NULLS LAST;
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (((((((((((v0.c2)OR(v0.c1)))OR(v0.c2)))AND(v0.c0)))OR(vt1.c1))) NOT BETWEEN ((((vt1.c1, vt1.c0)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2, v0.c2)))) AND (((((((((((v0.c0)OR('-2033497339')))AND(v0.c0)))AND('KWuFH㣐R**')))AND(vt1.c1)))AND(vt1.c0)))));
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (((((((((((((v0.c2)OR(v0.c1)))OR(v0.c2)))AND(v0.c0)))OR(vt1.c1))) NOT BETWEEN ((((vt1.c1, vt1.c0)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2, v0.c2)))) AND (((((((((((v0.c0)OR('-2033497339')))AND(v0.c0)))AND('KWuFH㣐R**')))AND(vt1.c1)))AND(vt1.c0)))))AND(((IFNULL(DISTINCT vt1.c1, vt1.c0))=(CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN vt1.c0 THEN v0.c1 END))))) LIMIT 0x3 INTERSECT SELECT MIN(vt1.c1) FROM v0, vt1 WHERE (((((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c1)))>((((v0.c1, v0.c0))=((v0.c0, v0.c0)))))) LIMIT 0X3;
SELECT * FROM vt1 NOT INDEXED WHERE ((((+ (vt1.c1))) IS FALSE)) ORDER BY (((LIKELIHOOD(vt1.c1, vt1.c1)))==((((vt1.c0)<<(vt1.c0))))) DESC;
SELECT DISTINCT * FROM vt1 WHERE ((((+ (vt1.c1))) IS FALSE)) ORDER BY (((LIKELIHOOD(vt1.c1, vt1.c1)))=((((vt1.c0)<<(vt1.c0))))) DESC;
SELECT * FROM vt1 NOT INDEXED WHERE ((((+ (vt1.c1))) IS FALSE)) ORDER BY (((LIKELIHOOD(vt1.c1, vt1.c1)))==((((vt1.c0)<<(vt1.c0))))) DESC;
SELECT * FROM v0, vt1 NOT INDEXED WHERE ((((v0.c1, v0.c2, vt1.c0)) NOT BETWEEN (((((v0.c1, vt1.c0))<((vt1.c0, v0.c1))), ((((vt1.c0)OR(v0.c1)))OR(vt1.c0)), CAST(v0.c2 AS REAL))) AND ((CAST(vt1.c1 AS NUMERIC), ((v0.c0)IS(v0.c1)), (NOT (v0.c0)))))) ORDER BY CASE CAST(vt1.c1 AS BLOB)  WHEN ((((((NULL)OR(v0.c2)))AND(vt1.c0)))OR(vt1.c1)) THEN ((v0.c2)&(v0.c1)) WHEN 0.14327207912871265 THEN ((v0.c1)|(v0.c1)) ELSE UNLIKELY(NULL) END ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((v0.c1, v0.c2, vt1.c0)) NOT BETWEEN (((((v0.c1, vt1.c0))<=((vt1.c0, v0.c1))), ((((vt1.c0)OR(v0.c1)))OR(vt1.c0)), CAST(v0.c2 AS REAL))) AND ((CAST(vt1.c1 AS NUMERIC), ((v0.c0)IS(v0.c1)), (NOT (v0.c0)))))) ORDER BY CASE CAST(vt1.c1 AS BLOB)  WHEN ((((((NULL)OR(v0.c2)))AND(vt1.c0)))OR(vt1.c1)) THEN ((v0.c2)&(v0.c1)) WHEN 0.14327207912871265 THEN ((v0.c1)|(v0.c1)) ELSE UNLIKELY(NULL) END ASC  NULLS LAST;
SELECT * FROM v0, vt1 NOT INDEXED WHERE ((((v0.c1, v0.c2, vt1.c0)) NOT BETWEEN (((((v0.c1, vt1.c0))<((vt1.c0, v0.c1))), ((((vt1.c0)OR(v0.c1)))OR(vt1.c0)), CAST(v0.c2 AS REAL))) AND ((CAST(vt1.c1 AS NUMERIC), ((v0.c0)IS(v0.c1)), (NOT (v0.c0)))))) ORDER BY CASE CAST(vt1.c1 AS BLOB)  WHEN ((((((NULL)OR(v0.c2)))AND(vt1.c0)))OR(vt1.c1)) THEN ((v0.c2)&(v0.c1)) WHEN 0.14327207912871265 THEN ((v0.c1)|(v0.c1)) ELSE UNLIKELY(NULL) END ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((v0.c1, v0.c2, vt1.c0)) NOT BETWEEN (((((v0.c1, vt1.c0))<=((vt1.c0, v0.c1))), ((((vt1.c0)OR(v0.c1)))OR(vt1.c0)), CAST(v0.c2 AS REAL))) AND ((CAST(vt1.c1 AS NUMERIC), ((v0.c0)IS(v0.c1)), (NOT (v0.c0)))))) ORDER BY CASE CAST(vt1.c1 AS BLOB)  WHEN ((((((NULL)OR(v0.c2)))AND(vt1.c0)))OR(vt1.c1)) THEN ((v0.c2)&(v0.c1)) WHEN 0.14327207912871265 THEN ((v0.c1)|(v0.c1)) ELSE UNLIKELY(NULL) END ASC  NULLS LAST;
SELECT MIN(v0.c1) FROM v0, vt1 WHERE (v0.c2) ORDER BY json_array_length(v0.c0 COLLATE NOCASE, STRFTIME(vt1.c1, v0.c1, v0.c0, vt1.c0, v0.c1)) ASC  NULLS LAST;
SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (v0.c2) ORDER BY (v0.c1 IN (((((((((v0.c1)OR(vt1.c0)))AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))) DESC, vt1.c1 DESC, ((((((((v0.c2)AND(v0.c0)))AND(v0.c2)))AND('1148994335')))AND(v0.c2 COLLATE BINARY))  NULLS LAST, LIKELY(DISTINCT ((v0.c0)<=(v0.c0))) DESC LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (((v0.c1 COLLATE RTRIM)>(((('0.7644881130975221', '-166546892', vt1.c1))<>((vt1.c0, vt1.c0, vt1.c1)))))) ORDER BY (v0.c1 IN (((((((((v0.c1)OR(vt1.c0)))AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))) DESC, vt1.c1 DESC, ((((((((v0.c2)AND(v0.c0)))AND(v0.c2)))AND('1148994335')))AND(v0.c2 COLLATE BINARY))  NULLS LAST, LIKELY(DISTINCT ((v0.c0)<=(v0.c0))) DESC LIMIT 0;
SELECT * FROM vt1 INNER JOIN v0 ON ABS(DATETIME(v0.c0, v0.c2, v0.c0, vt1.c0, 0.24460362241119638)) WHERE (v0.c1);
SELECT * FROM vt1 INNER JOIN v0 ON ABS(DATETIME(v0.c0, v0.c2, v0.c0, vt1.c0, 0.24460362241119638)) WHERE (((v0.c1)AND((((+ (v0.c2)))-(((vt1.c1) NOTNULL))))));
SELECT * FROM vt1 INNER JOIN v0 ON ABS(DATETIME(v0.c0, v0.c2, v0.c0, vt1.c0, 0.24460362241119638)) WHERE (v0.c1);
SELECT * FROM vt1 INNER JOIN v0 ON ABS(DATETIME(v0.c0, v0.c2, v0.c0, vt1.c0, 0.24460362241119638)) WHERE (((v0.c1)AND((((+ (v0.c2)))-(((vt1.c1) NOTNULL))))));
SELECT MAX(v0.c0) FROM v0 INNER JOIN vt1 ON '' WHERE ((+ (x'cc97c5'))) ORDER BY CASE ((vt1.c1) IS TRUE)  WHEN ((v0.c1)OR(vt1.c1)) THEN (~ (v0.c2)) ELSE ((v0.c1) NOTNULL) END ASC;
SELECT ALL MAX(v0.c0) FROM v0 INNER JOIN vt1 ON '' WHERE ((((+ (x'cc97c5')))AND(((((((vt1.c0)>=(v0.c1)))AND(((v0.c0) NOTNULL))))OR(UPPER(v0.c2)))))) ORDER BY (((+ (v0.c1)))=(((v0.c1)<(v0.c1))))  NULLS LAST, UNICODE(((v0.c2)<>(vt1.c1)))  NULLS FIRST, CASE ((vt1.c1) BETWEEN (v0.c1) AND (v0.c0))  WHEN 0X28d2dfa7 THEN (v0.c0 IN (v0.c0)) WHEN CAST(v0.c0 AS INTEGER) THEN v0.c1 ELSE CHANGES() END  NULLS FIRST LIMIT 0x2 INTERSECT SELECT MAX(v0.c0) FROM v0 INNER JOIN vt1 ON '' WHERE ((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1)) IN (CASE vt1.c0  WHEN vt1.c0 THEN v0.c2 WHEN NULL THEN vt1.c1 ELSE vt1.c1 END))) ORDER BY (((+ (v0.c1)))==(((v0.c1)<(v0.c1))))  NULLS LAST, UNICODE(((v0.c2)<>(vt1.c1)))  NULLS FIRST, CASE ((vt1.c1) BETWEEN (v0.c1) AND (v0.c0))  WHEN 684908455 THEN (v0.c0 IN (v0.c0)) WHEN CAST(v0.c0 AS INTEGER) THEN v0.c1 ELSE CHANGES() END  NULLS FIRST LIMIT 2;
SELECT MIN(vt1.c0) FROM v0, vt1 WHERE ((NOT (((vt1.c1)LIKE(v0.c2)))));
SELECT DISTINCT MIN(vt1.c0) FROM v0, vt1 WHERE ((NOT (((vt1.c1)LIKE(v0.c2))))) LIMIT 0X2 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM v0, vt1 WHERE (((((vt1.c1)!=('u')))<=(TYPEOF(DISTINCT v0.c0)))) LIMIT 2;
SELECT COUNT(*) FROM v0 WHERE (((v0.c1) NOT BETWEEN (0Xffffffff9a02eb13) AND (((v0.c2) NOT NULL)))) ORDER BY CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END COLLATE NOCASE DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c1) NOT BETWEEN (0xffffffff9a02eb13) AND (((v0.c2) NOT NULL)))) ORDER BY CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END COLLATE NOCASE DESC  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((((v0.c2) NOT NULL) IN ())) ORDER BY NULL, ((((v0.c2) ISNULL)) BETWEEN ((+ (vt1.c0))) AND ((((('-1638452909')AND(v0.c0)))AND(v0.c2)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE ((((((v0.c2) NOT NULL) IN ()))AND((((((((((x'')) BETWEEN ((vt1.c0)) AND ((x''))))OR(((v0.c2)<=(vt1.c1)))))AND(0.2636446184425333)))AND(((vt1.c1)%(v0.c1))))))) ORDER BY NULL, ((((v0.c2) ISNULL)) BETWEEN ((+ (vt1.c0))) AND ((((('-1638452909')AND(v0.c0)))AND(v0.c2)))) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt1, v0 WHERE ((((v0.c2) NOT NULL) IN ())) ORDER BY NULL, ((((v0.c2) ISNULL)) BETWEEN ((+ (vt1.c0))) AND ((((('-1638452909')AND(v0.c0)))AND(v0.c2)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE ((((((v0.c2) NOT NULL) IN ()))AND((((((((((x'')) BETWEEN ((vt1.c0)) AND ((x''))))OR(((v0.c2)<=(vt1.c1)))))AND(0.2636446184425333)))AND(((vt1.c1)%(v0.c1))))))) ORDER BY NULL, ((((v0.c2) ISNULL)) BETWEEN ((+ (vt1.c0))) AND ((((('-1638452909')AND(v0.c0)))AND(v0.c2)))) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1, v0 WHERE ((NOT (((((((((((((((vt1.c0)AND(v0.c0)))AND(48099714)))OR(v0.c2)))AND(vt1.c1)))AND(v0.c1)))OR(vt1.c0)))AND(vt1.c0))))) ORDER BY CAST(CAST(vt1.c1 AS BLOB) AS REAL) DESC, UNLIKELY((((vt1.c0, v0.c1, v0.c1, v0.c2, v0.c1, '-624547642')) NOT BETWEEN ((v0.c1, v0.c1, 'Knဈť&B', v0.c2, 0.12295744108623907, v0.c0)) AND ((v0.c1, v0.c2, '-1241263866', v0.c2, v0.c1, v0.c2))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((NOT (((((((((((((((vt1.c0)AND(v0.c0)))AND(0X2ddf182)))OR(v0.c2)))AND(vt1.c1)))AND(v0.c1)))OR(vt1.c0)))AND(vt1.c0))))) ORDER BY (((v0.c2)) NOT BETWEEN ((v0.c2 COLLATE NOCASE)) AND (('55244283'))) ASC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((NOT (((((((((((((((vt1.c0)AND(v0.c0)))AND(48099714)))OR(v0.c2)))AND(vt1.c1)))AND(v0.c1)))OR(vt1.c0)))AND(vt1.c0))))) ORDER BY CAST(CAST(vt1.c1 AS BLOB) AS REAL) DESC, UNLIKELY((((vt1.c0, v0.c1, v0.c1, v0.c2, v0.c1, '-624547642')) NOT BETWEEN ((v0.c1, v0.c1, 'Knဈť&B', v0.c2, 0.12295744108623907, v0.c0)) AND ((v0.c1, v0.c2, '-1241263866', v0.c2, v0.c1, v0.c2))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((NOT (((((((((((((((vt1.c0)AND(v0.c0)))AND(0X2ddf182)))OR(v0.c2)))AND(vt1.c1)))AND(v0.c1)))OR(vt1.c0)))AND(vt1.c0))))) ORDER BY (((v0.c2)) NOT BETWEEN ((v0.c2 COLLATE NOCASE)) AND (('55244283'))) ASC  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (((((((v0.c0)OR(v0.c0)))OR(v0.c2))) NOT BETWEEN (CASE WHEN '724715347' THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END) AND (((((v0.c0)OR(v0.c0)))AND(vt1.c0)))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((((v0.c0)OR(v0.c0)))OR(v0.c2))) NOT BETWEEN (CASE WHEN '724715347' THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END) AND (((((v0.c0)OR(v0.c0)))AND(vt1.c0)))))AND(CASE json_array(v0.c1, v0.c2, v0.c2)  WHEN (NOT (x'')) THEN vt1.c1 COLLATE RTRIM WHEN NULLIF(vt1.c0, '-1012162130') THEN v0.c1 COLLATE RTRIM ELSE (v0.c1 IN (vt1.c1, vt1.c0)) END))) LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (((((((v0.c0)OR(v0.c0)))OR(v0.c2))) NOT BETWEEN (CASE WHEN '724715347' THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END) AND (((((v0.c0)OR(v0.c0)))AND(vt1.c0)))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((((v0.c0)OR(v0.c0)))OR(v0.c2))) NOT BETWEEN (CASE WHEN '724715347' THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END) AND (((((v0.c0)OR(v0.c0)))AND(vt1.c0)))))AND(CASE json_array(v0.c1, v0.c2, v0.c2)  WHEN (NOT (x'')) THEN vt1.c1 COLLATE RTRIM WHEN NULLIF(vt1.c0, '-1012162130') THEN v0.c1 COLLATE RTRIM ELSE (v0.c1 IN (vt1.c1, vt1.c0)) END))) LIMIT 0;
SELECT MAX(v0.c0) FROM v0 NATURAL JOIN vt1 WHERE ((((((vt1.c1))>((vt1.c0)))) NOTNULL));
SELECT DISTINCT MAX(v0.c0) FROM v0 NATURAL JOIN vt1 WHERE ((((((vt1.c1))>((vt1.c0)))) NOTNULL)) ORDER BY v0.c2;
SELECT * FROM vt1 WHERE (CAST(vt1.c1 AS NUMERIC) COLLATE RTRIM) ORDER BY CAST(((vt1.c0) IS TRUE) AS INTEGER), CASE WHEN '529783027' THEN ((vt1.c1) NOTNULL) WHEN ((0.530041387148956)-(x'64')) THEN (((vt1.c0, 1367184240)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1))) WHEN (((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1))) THEN vt1.c1 ELSE ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)) END;
SELECT * FROM vt1 WHERE (CAST(vt1.c1 AS NUMERIC) COLLATE RTRIM) ORDER BY CAST(((vt1.c0) IS TRUE) AS INTEGER), CASE WHEN '529783027' THEN ((vt1.c1) NOTNULL) WHEN ((0.530041387148956)-(x'64')) THEN (((vt1.c0, 0x517d9370)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1))) WHEN (((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1))) THEN vt1.c1 ELSE ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)) END;
SELECT * FROM vt1 WHERE (CAST(vt1.c1 AS NUMERIC) COLLATE RTRIM) ORDER BY CAST(((vt1.c0) IS TRUE) AS INTEGER), CASE WHEN '529783027' THEN ((vt1.c1) NOTNULL) WHEN ((0.530041387148956)-(x'64')) THEN (((vt1.c0, 1367184240)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1))) WHEN (((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1))) THEN vt1.c1 ELSE ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)) END;
SELECT * FROM vt1 WHERE (CAST(vt1.c1 AS NUMERIC) COLLATE RTRIM) ORDER BY CAST(((vt1.c0) IS TRUE) AS INTEGER), CASE WHEN '529783027' THEN ((vt1.c1) NOTNULL) WHEN ((0.530041387148956)-(x'64')) THEN (((vt1.c0, 0x517d9370)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c1))) WHEN (((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1))) THEN vt1.c1 ELSE ((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)) END;
SELECT ALL * FROM v0 WHERE (((((0.5142391020578102)&(v0.c0))) ISNULL));
SELECT DISTINCT * FROM v0 WHERE (((((((0.5142391020578102)&(v0.c0))) ISNULL))AND((((''))<((((((((((((((v0.c0)AND(v0.c2)))AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(v0.c2)))))))) ORDER BY (v0.c2 IN ()) COLLATE BINARY, highlight((+ (v0.c2)), CAST(v0.c1 AS REAL), (((0.9158314343718879))=((v0.c2))), CAST(0.31681652382691305 AS BLOB))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c0 COLLATE RTRIM)>>(CAST(v0.c2 AS TEXT)))) ORDER BY (v0.c2 IN ()) COLLATE BINARY, highlight((+ (v0.c2)), CAST(v0.c1 AS REAL), (((0.9158314343718879))=((v0.c2))), CAST(0.31681652382691305 AS BLOB))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0 WHERE (((((0.5142391020578102)&(v0.c0))) ISNULL));
SELECT DISTINCT * FROM v0 WHERE (((((((0.5142391020578102)&(v0.c0))) ISNULL))AND((((''))<((((((((((((((v0.c0)AND(v0.c2)))AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(v0.c2)))))))) ORDER BY (v0.c2 IN ()) COLLATE BINARY, highlight((+ (v0.c2)), CAST(v0.c1 AS REAL), (((0.9158314343718879))=((v0.c2))), CAST(0.31681652382691305 AS BLOB))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c0 COLLATE RTRIM)>>(CAST(v0.c2 AS TEXT)))) ORDER BY (v0.c2 IN ()) COLLATE BINARY, highlight((+ (v0.c2)), CAST(v0.c1 AS REAL), (((0.9158314343718879))=((v0.c2))), CAST(0.31681652382691305 AS BLOB))  NULLS FIRST LIMIT 1;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((NOT (vt1.c0)));
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE ((((NOT (vt1.c0)))AND(vt1.c1))) ORDER BY CAST(vt1.c0 AS BLOB) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL MIN(v0.c0) FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c1 COLLATE NOCASE)AND(CAST(vt1.c0 AS INTEGER))))OR(((((((v0.c1)OR(vt1.c0)))OR(vt1.c1)))OR(v0.c2))))) ORDER BY (((v0.c0))<=((((v0.c0)>(v0.c2))))), CAST((v0.c1 IN (v0.c0)) AS NUMERIC);
SELECT MIN(v0.c0) FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c1 COLLATE NOCASE)AND(CAST(vt1.c0 AS INTEGER))))OR(((((((v0.c1)OR(vt1.c0)))OR(vt1.c1)))OR(v0.c2))))) ORDER BY ((67348990) IS FALSE) ASC  NULLS FIRST, ((((CAST(v0.c2 AS BLOB))AND(((vt1.c0)&(vt1.c0)))))AND(((v0.c2)+(vt1.c0)))) INTERSECT SELECT MIN(v0.c0) FROM v0 NATURAL JOIN vt1 WHERE ((((((vt1.c1, vt1.c0, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, vt1.c0, x'9973', vt1.c0)) AND ((v0.c2, v0.c2, NULL, v0.c0))))<=((~ (vt1.c1))))) ORDER BY ((0X403a9fe) IS FALSE) ASC  NULLS FIRST, ((((CAST(v0.c2 AS BLOB))AND(((vt1.c0)&(vt1.c0)))))AND(((v0.c2)+(vt1.c0))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c0, vt1.c1))) COLLATE BINARY) ORDER BY (NOT ((((vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0))))), ((vt1.c0) NOT BETWEEN ((- (vt1.c1))) AND (vt1.c1)) DESC  NULLS FIRST, (((0Xffffffffc1674ea7))<=((((vt1.c0)%(vt1.c1)))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c0, vt1.c1))) COLLATE BINARY)AND(''))) ORDER BY (NOT ((((vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0))))), ((vt1.c0) NOT BETWEEN ((- (vt1.c1))) AND (vt1.c1)) DESC  NULLS FIRST, (((-1050194265))<=((((vt1.c0)%(vt1.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) NOTNULL) AS TEXT)) ORDER BY (NOT ((((vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0))))), ((vt1.c0) NOT BETWEEN ((- (vt1.c1))) AND (vt1.c1)) DESC  NULLS FIRST, (((-1050194265))<=((((vt1.c0)%(vt1.c1))))) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c0, vt1.c1))) COLLATE BINARY) ORDER BY (NOT ((((vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0))))), ((vt1.c0) NOT BETWEEN ((- (vt1.c1))) AND (vt1.c1)) DESC  NULLS FIRST, (((0Xffffffffc1674ea7))<=((((vt1.c0)%(vt1.c1)))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c0, vt1.c1))) COLLATE BINARY)AND(''))) ORDER BY (NOT ((((vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0))))), ((vt1.c0) NOT BETWEEN ((- (vt1.c1))) AND (vt1.c1)) DESC  NULLS FIRST, (((-1050194265))<=((((vt1.c0)%(vt1.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) NOTNULL) AS TEXT)) ORDER BY (NOT ((((vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0))))), ((vt1.c0) NOT BETWEEN ((- (vt1.c1))) AND (vt1.c1)) DESC  NULLS FIRST, (((-1050194265))<=((((vt1.c0)%(vt1.c1))))) LIMIT 0x0;
SELECT COUNT(*) FROM vt1 WHERE (CAST(((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)) AS REAL));
SELECT COUNT(*) FROM vt1 WHERE (((CAST(((((vt1.c1)AND(vt1.c0)))AND(vt1.c1)) AS REAL))AND((((vt1.c0)IS NOT(0.8791020098484185)) IN ())))) ORDER BY HEX(((vt1.c1)>(vt1.c1))) DESC, CASE (vt1.c1 IN ())  WHEN (('S\') NOT BETWEEN (vt1.c1) AND (vt1.c1)) THEN ((0.8488328279775028) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE ABS(vt1.c1) END INTERSECT SELECT COUNT(*) FROM vt1 WHERE (CAST(((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) AS NUMERIC)) ORDER BY HEX(((vt1.c1)>(vt1.c1))) DESC, CASE (vt1.c1 IN ())  WHEN (('S\') NOT BETWEEN (vt1.c1) AND (vt1.c1)) THEN ((0.8488328279775028) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE ABS(vt1.c1) END;
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE (CASE (((v0.c2)) BETWEEN ((vt1.c1)) AND ((vt1.c1)))  WHEN CASE WHEN v0.c2 THEN 0.3637083906258284 ELSE v0.c0 END THEN ((((v0.c0)AND(v0.c1)))OR(-1.84481855E9)) END);
SELECT MIN(v0.c1) FROM v0, vt1 WHERE (CASE (((v0.c2)) BETWEEN ((vt1.c1)) AND ((vt1.c1)))  WHEN CASE WHEN v0.c2 THEN 0.3637083906258284 ELSE v0.c0 END THEN ((((v0.c0)AND(v0.c1)))OR(-1.84481855E9)) END) LIMIT 0X0;
SELECT ALL * FROM vt1, v0 WHERE ((x'71' IN (((v0.c0)IS NOT(vt1.c1)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((x'71' IN (((v0.c0)IS NOT(vt1.c1))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((vt1.c0, v0.c0, v0.c2, vt1.c0)) BETWEEN ((CASE WHEN v0.c0 THEN vt1.c0 ELSE 0X395ed3f2 END, CASE WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c2 END, UNLIKELY(vt1.c0), '463080947')) AND (((NULL IN (v0.c0)), ((v0.c2) BETWEEN (v0.c2) AND ('39m')), (v0.c2 IN ()), v0.c0 COLLATE RTRIM))));
SELECT ALL * FROM vt1, v0 WHERE ((x'71' IN (((v0.c0)IS NOT(vt1.c1)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((x'71' IN (((v0.c0)IS NOT(vt1.c1))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((vt1.c0, v0.c0, v0.c2, vt1.c0)) BETWEEN ((CASE WHEN v0.c0 THEN vt1.c0 ELSE 0X395ed3f2 END, CASE WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c2 END, UNLIKELY(vt1.c0), '463080947')) AND (((NULL IN (v0.c0)), ((v0.c2) BETWEEN (v0.c2) AND ('39m')), (v0.c2 IN ()), v0.c0 COLLATE RTRIM))));
SELECT * FROM v0 WHERE ((~ ((NOT (v0.c2))))) ORDER BY CASE ((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c1))  WHEN (v0.c0 IN (v0.c0)) THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c2)) ELSE v0.c1 COLLATE BINARY END  NULLS FIRST, CASE (((v0.c1, v0.c2, 0.7127267978501425))>((v0.c0, v0.c0, v0.c2)))  WHEN (((v0.c1, v0.c0, v0.c1))<((v0.c2, v0.c2, v0.c0))) THEN v0.c1 COLLATE BINARY WHEN NULL COLLATE RTRIM THEN v0.c2 WHEN ((v0.c1) NOT NULL) THEN ((((v0.c2)AND(0X23cb18a)))OR(v0.c2)) ELSE (- (v0.c2)) END ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((~ ((NOT (v0.c2))))) ORDER BY CASE ((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c1))  WHEN (v0.c0 IN (v0.c0)) THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c2)) ELSE v0.c1 COLLATE BINARY END  NULLS FIRST, CASE (((v0.c1, v0.c2, 0.7127267978501425))>((v0.c0, v0.c0, v0.c2)))  WHEN (((v0.c1, v0.c0, v0.c1))<((v0.c2, v0.c2, v0.c0))) THEN v0.c1 COLLATE BINARY WHEN NULL COLLATE RTRIM THEN v0.c2 WHEN ((v0.c1) NOT NULL) THEN ((((v0.c2)AND(37532042)))OR(v0.c2)) ELSE (- (v0.c2)) END ASC  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE (CASE CAST(v0.c0 AS INTEGER)  WHEN CAST(v0.c2 AS NUMERIC) THEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1)) ELSE (v0.c1 IN (v0.c1)) END) ORDER BY CASE ((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c1))  WHEN (v0.c0 IN (v0.c0)) THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c2)) ELSE v0.c1 COLLATE BINARY END  NULLS FIRST, CASE (((v0.c1, v0.c2, 0.7127267978501425))>((v0.c0, v0.c0, v0.c2)))  WHEN (((v0.c1, v0.c0, v0.c1))<((v0.c2, v0.c2, v0.c0))) THEN v0.c1 COLLATE BINARY WHEN NULL COLLATE RTRIM THEN v0.c2 WHEN ((v0.c1) NOT NULL) THEN ((((v0.c2)AND(0x23cb18a)))OR(v0.c2)) ELSE (- (v0.c2)) END ASC  NULLS FIRST;
SELECT * FROM v0 WHERE ((~ ((NOT (v0.c2))))) ORDER BY CASE ((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c1))  WHEN (v0.c0 IN (v0.c0)) THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c2)) ELSE v0.c1 COLLATE BINARY END  NULLS FIRST, CASE (((v0.c1, v0.c2, 0.7127267978501425))>((v0.c0, v0.c0, v0.c2)))  WHEN (((v0.c1, v0.c0, v0.c1))<((v0.c2, v0.c2, v0.c0))) THEN v0.c1 COLLATE BINARY WHEN NULL COLLATE RTRIM THEN v0.c2 WHEN ((v0.c1) NOT NULL) THEN ((((v0.c2)AND(0X23cb18a)))OR(v0.c2)) ELSE (- (v0.c2)) END ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((~ ((NOT (v0.c2))))) ORDER BY CASE ((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c1))  WHEN (v0.c0 IN (v0.c0)) THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c2)) ELSE v0.c1 COLLATE BINARY END  NULLS FIRST, CASE (((v0.c1, v0.c2, 0.7127267978501425))>((v0.c0, v0.c0, v0.c2)))  WHEN (((v0.c1, v0.c0, v0.c1))<((v0.c2, v0.c2, v0.c0))) THEN v0.c1 COLLATE BINARY WHEN NULL COLLATE RTRIM THEN v0.c2 WHEN ((v0.c1) NOT NULL) THEN ((((v0.c2)AND(37532042)))OR(v0.c2)) ELSE (- (v0.c2)) END ASC  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE (CASE CAST(v0.c0 AS INTEGER)  WHEN CAST(v0.c2 AS NUMERIC) THEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1)) ELSE (v0.c1 IN (v0.c1)) END) ORDER BY CASE ((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c1))  WHEN (v0.c0 IN (v0.c0)) THEN ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c2)) ELSE v0.c1 COLLATE BINARY END  NULLS FIRST, CASE (((v0.c1, v0.c2, 0.7127267978501425))>((v0.c0, v0.c0, v0.c2)))  WHEN (((v0.c1, v0.c0, v0.c1))<((v0.c2, v0.c2, v0.c0))) THEN v0.c1 COLLATE BINARY WHEN NULL COLLATE RTRIM THEN v0.c2 WHEN ((v0.c1) NOT NULL) THEN ((((v0.c2)AND(0x23cb18a)))OR(v0.c2)) ELSE (- (v0.c2)) END ASC  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM v0 WHERE ((((v0.c2 IN ()))==(json_quote(v0.c1))));
SELECT MAX(v0.c0) FROM v0 WHERE ((((((v0.c2 IN ()))==(json_quote(v0.c1))))AND(((((('1379401189') BETWEEN (v0.c2) AND (v0.c1)), (v0.c1 IN ()), ((((((v0.c1)OR(v0.c0)))OR(v0.c1)))AND(v0.c1))))=((v0.c0, (- (v0.c0)), ((v0.c1) NOTNULL))))))) ORDER BY (CASE v0.c2  WHEN v0.c2 THEN '' ELSE v0.c1 END IN (((NULL)LIKE(v0.c0)))) DESC, '-64157161'  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (v0.c1);
SELECT COUNT(*) FROM v0, vt1 WHERE (v0.c1);
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0)))||(((vt1.c0)%(vt1.c1)))));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c0)))||(((vt1.c0)%(vt1.c1)))));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((x'61f6a1')%(CAST(vt1.c1 AS BLOB)))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((vt1.c1)+(NULL)))) AND ((((vt1.c1)IS(vt1.c0))))), (((TRIM(vt1.c1), ((((((vt1.c0)AND(vt1.c1)))AND(NULL)))OR(vt1.c1)), (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))=((NULL, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))), ((vt1.c0) ISNULL)))) DESC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((x'61f6a1')%(CAST(vt1.c1 AS BLOB)))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((vt1.c1)+(NULL)))) AND ((((vt1.c1)IS(vt1.c0))))), (((TRIM(vt1.c1), ((((((vt1.c0)AND(vt1.c1)))AND(NULL)))OR(vt1.c1)), (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))=((NULL, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))), ((vt1.c0) ISNULL)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 AS INTEGER)) NOTNULL)) ORDER BY (((vt1.c0)) NOT BETWEEN ((((vt1.c1)+(NULL)))) AND ((((vt1.c1)IS(vt1.c0))))), (((TRIM(vt1.c1), ((((((vt1.c0)AND(vt1.c1)))AND(NULL)))OR(vt1.c1)), (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))==((NULL, (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))), ((vt1.c0) ISNULL)))) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (vt1.c1) ORDER BY NULL ASC, vt1.c0;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((vt1.c1)AND((NOT (((vt1.c1)<=(vt1.c1))))))) ORDER BY TYPEOF(((vt1.c1) NOT BETWEEN ('305180856') AND (NULL))) ASC, UNLIKELY(((vt1.c1)LIKE(vt1.c0))) DESC  NULLS FIRST, 0.6573459388758927 ASC LIMIT 3;
SELECT * FROM v0 WHERE (CAST(CAST(v0.c2 AS BLOB) AS BLOB)) ORDER BY (((v0.c2 IN ())) IS TRUE)  NULLS LAST, ((v0.c1)-(((v0.c0)&(v0.c0)))) DESC  NULLS LAST, (((((((v0.c0)OR(v0.c0)))AND(v0.c0)))AND(0.5338478976103079)) IN (v0.c1));
SELECT * FROM v0 WHERE (CAST(CAST(v0.c2 AS BLOB) AS BLOB)) ORDER BY x'' DESC;
SELECT * FROM v0 WHERE (CAST(CAST(v0.c2 AS BLOB) AS BLOB)) ORDER BY (((v0.c2 IN ())) IS TRUE)  NULLS LAST, ((v0.c1)-(((v0.c0)&(v0.c0)))) DESC  NULLS LAST, (((((((v0.c0)OR(v0.c0)))AND(v0.c0)))AND(0.5338478976103079)) IN (v0.c1));
SELECT * FROM v0 WHERE (CAST(CAST(v0.c2 AS BLOB) AS BLOB)) ORDER BY x'' DESC;
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (((((((v0.c2)AND(v0.c0)))OR(NULL)))OR(((v0.c1)GLOB(v0.c2)))));
SELECT DISTINCT MAX(v0.c2) FROM vt1, v0 WHERE (((((((((v0.c2)AND(v0.c0)))OR(NULL)))OR(((v0.c1)GLOB(v0.c2)))))AND('u'))) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM vt1, v0 WHERE (((((v0.c2))=((v0.c2))) IN ((vt1.c1 IN (v0.c0))))) LIMIT 0;
SELECT MAX(v0.c0) FROM v0, vt1 WHERE ('1468832677');
SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE ((('1468832677')AND(0.5757606769322192))) ORDER BY CAST(rtreenode(vt1.c1, 0.6666201383711302) AS NUMERIC) DESC  NULLS LAST, (((vt1.c0, v0.c0, v0.c1, vt1.c0)) NOT BETWEEN ((((((((((((vt1.c1)OR(-1017404822)))OR(v0.c2)))AND(v0.c1)))AND(v0.c2)))OR(v0.c1)), v0.c0 COLLATE BINARY, CASE WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN v0.c0 ELSE v0.c2 END, CAST(vt1.c1 AS REAL))) AND ((CASE WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN v0.c1 THEN v0.c2 END, (((v0.c1))<((vt1.c1))), ((v0.c2) IS TRUE), CAST(vt1.c1 AS TEXT)))) DESC;
SELECT * FROM v0 WHERE (CASE (((v0.c1, v0.c0, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0, '')) AND ((1841434908, v0.c0, v0.c0)))  WHEN CAST(v0.c2 AS INTEGER) THEN (v0.c1 IN (v0.c0, v0.c2)) WHEN (((v0.c2))=((v0.c2))) THEN ((0xffffffffd7dae18e) NOT BETWEEN (v0.c1) AND (v0.c0)) WHEN (- ('3L')) THEN ((((((((v0.c1)OR(v0.c0)))AND(v0.c1)))AND(v0.c1)))AND(v0.c0)) ELSE (((v0.c1, v0.c0))<((v0.c0, v0.c2))) END);
SELECT DISTINCT * FROM v0 WHERE (((CASE (((v0.c1, v0.c0, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0, '')) AND ((1841434908, v0.c0, v0.c0)))  WHEN CAST(v0.c2 AS INTEGER) THEN (v0.c1 IN (v0.c0)) WHEN (((v0.c2))==((v0.c2))) THEN ((0Xffffffffd7dae18e) NOT BETWEEN (v0.c1) AND (v0.c0)) WHEN (- ('3L')) THEN ((((((((v0.c1)OR(v0.c0)))AND(v0.c1)))AND(v0.c1)))AND(v0.c0)) ELSE (((v0.c1, v0.c0))<((v0.c0, v0.c2))) END)AND((NOT (((v0.c1) IS FALSE)))))) ORDER BY ((NULL) BETWEEN (((v0.c1) NOTNULL)) AND (((((v0.c0)OR(v0.c0)))OR(v0.c0)))) ASC  NULLS FIRST, rtreenode(CAST(v0.c2 AS TEXT), ((0.058957231789078746) NOT BETWEEN (NULL) AND (v0.c2))), (((- (v0.c2)))+(CAST(v0.c2 AS INTEGER))) LIMIT 0X1;
SELECT * FROM v0 WHERE (CASE (((v0.c1, v0.c0, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0, '')) AND ((1841434908, v0.c0, v0.c0)))  WHEN CAST(v0.c2 AS INTEGER) THEN (v0.c1 IN (v0.c0, v0.c2)) WHEN (((v0.c2))=((v0.c2))) THEN ((0xffffffffd7dae18e) NOT BETWEEN (v0.c1) AND (v0.c0)) WHEN (- ('3L')) THEN ((((((((v0.c1)OR(v0.c0)))AND(v0.c1)))AND(v0.c1)))AND(v0.c0)) ELSE (((v0.c1, v0.c0))<((v0.c0, v0.c2))) END);
SELECT DISTINCT * FROM v0 WHERE (((CASE (((v0.c1, v0.c0, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0, '')) AND ((1841434908, v0.c0, v0.c0)))  WHEN CAST(v0.c2 AS INTEGER) THEN (v0.c1 IN (v0.c0)) WHEN (((v0.c2))==((v0.c2))) THEN ((0Xffffffffd7dae18e) NOT BETWEEN (v0.c1) AND (v0.c0)) WHEN (- ('3L')) THEN ((((((((v0.c1)OR(v0.c0)))AND(v0.c1)))AND(v0.c1)))AND(v0.c0)) ELSE (((v0.c1, v0.c0))<((v0.c0, v0.c2))) END)AND((NOT (((v0.c1) IS FALSE)))))) ORDER BY ((NULL) BETWEEN (((v0.c1) NOTNULL)) AND (((((v0.c0)OR(v0.c0)))OR(v0.c0)))) ASC  NULLS FIRST, rtreenode(CAST(v0.c2 AS TEXT), ((0.058957231789078746) NOT BETWEEN (NULL) AND (v0.c2))), (((- (v0.c2)))+(CAST(v0.c2 AS INTEGER))) LIMIT 0X1;
SELECT ALL * FROM vt1, v0 WHERE ((+ (vt1.c0 COLLATE BINARY))) ORDER BY ((vt1.c1 COLLATE RTRIM) NOT BETWEEN ((((v0.c0)) NOT BETWEEN (('c')) AND ((vt1.c0)))) AND (((((v0.c1)OR(vt1.c1)))AND(vt1.c1)))) ASC  NULLS LAST, v0.c0 ASC;
SELECT ALL * FROM vt1, v0 WHERE ((+ (vt1.c0 COLLATE BINARY))) ORDER BY ((vt1.c1 COLLATE RTRIM) NOT BETWEEN ((((v0.c0)) NOT BETWEEN (('c')) AND ((vt1.c0)))) AND (((((v0.c1)OR(vt1.c1)))AND(vt1.c1)))) ASC  NULLS LAST, v0.c0 ASC LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))) IN ('<G'))) ORDER BY ((vt1.c1 COLLATE RTRIM) NOT BETWEEN ((((v0.c0)) NOT BETWEEN (('c')) AND ((vt1.c0)))) AND (((((v0.c1)OR(vt1.c1)))AND(vt1.c1)))) ASC  NULLS LAST, v0.c0 ASC LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE ((+ (vt1.c0 COLLATE BINARY))) ORDER BY ((vt1.c1 COLLATE RTRIM) NOT BETWEEN ((((v0.c0)) NOT BETWEEN (('c')) AND ((vt1.c0)))) AND (((((v0.c1)OR(vt1.c1)))AND(vt1.c1)))) ASC  NULLS LAST, v0.c0 ASC;
SELECT ALL * FROM vt1, v0 WHERE ((+ (vt1.c0 COLLATE BINARY))) ORDER BY ((vt1.c1 COLLATE RTRIM) NOT BETWEEN ((((v0.c0)) NOT BETWEEN (('c')) AND ((vt1.c0)))) AND (((((v0.c1)OR(vt1.c1)))AND(vt1.c1)))) ASC  NULLS LAST, v0.c0 ASC LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))) IN ('<G'))) ORDER BY ((vt1.c1 COLLATE RTRIM) NOT BETWEEN ((((v0.c0)) NOT BETWEEN (('c')) AND ((vt1.c0)))) AND (((((v0.c1)OR(vt1.c1)))AND(vt1.c1)))) ASC  NULLS LAST, v0.c0 ASC LIMIT 0;
SELECT ALL * FROM vt1 WHERE ((((((0.6308337601853704)) BETWEEN ((vt1.c0)) AND ((vt1.c1)))) NOTNULL)) ORDER BY TRIM((vt1.c1 IN ()), ((vt1.c1)IS NOT(vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE ((((((((0.6308337601853704)) BETWEEN ((vt1.c0)) AND ((vt1.c1)))) NOTNULL))AND((vt1.c1 IN ())))) ORDER BY (- ((~ (vt1.c0))));
SELECT ALL * FROM vt1 WHERE ((((((0.6308337601853704)) BETWEEN ((vt1.c0)) AND ((vt1.c1)))) NOTNULL)) ORDER BY TRIM((vt1.c1 IN ()), ((vt1.c1)IS NOT(vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE ((((((((0.6308337601853704)) BETWEEN ((vt1.c0)) AND ((vt1.c1)))) NOTNULL))AND((vt1.c1 IN ())))) ORDER BY (- ((~ (vt1.c0))));
SELECT ALL COUNT(*) FROM vt1 WHERE (((((vt1.c0) NOT NULL)) IS FALSE)) ORDER BY ((NULL)AND(((vt1.c1)IS(vt1.c0)))) ASC;
SELECT ALL COUNT(*) FROM vt1 WHERE (((((vt1.c0) NOT NULL)) IS FALSE)) ORDER BY ((NULL)AND(((vt1.c1)IS(vt1.c0)))) ASC INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE ((vt1.c1 COLLATE NOCASE IN (((vt1.c1) IS FALSE), LIKELY(vt1.c1)))) ORDER BY ((NULL)AND(((vt1.c1)IS(vt1.c0)))) ASC;
SELECT MIN(vt1.c0) FROM vt1, v0 WHERE (')') ORDER BY CASE CAST(v0.c2 AS TEXT)  WHEN ((v0.c1)%(v0.c2)) THEN ((0.22122396060757266)*(v0.c1)) WHEN ((v0.c1) BETWEEN (v0.c0) AND (v0.c2)) THEN ((((((v0.c2)OR(vt1.c1)))OR(v0.c2)))AND(7.14411549E8)) END  NULLS FIRST, (+ (IFNULL(DISTINCT v0.c1, v0.c0))) ASC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (((')')AND((((UNLIKELY(DISTINCT vt1.c1), ((v0.c0)==(v0.c0))))>(((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((vt1.c1))), CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 ELSE v0.c2 END)))))) ORDER BY 0.49640519899881286 LIMIT 0x2;
SELECT COUNT(*) FROM vt1 WHERE ((((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))) BETWEEN ((vt1.c1 IN ())) AND (NULLIF(vt1.c1, vt1.c0))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))) BETWEEN ((vt1.c1 IN ())) AND (NULLIF(vt1.c1, vt1.c0)))) ORDER BY CASE WHEN CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (+ (vt1.c1)) ELSE NULL END ASC;
SELECT MIN(v0.c0) FROM v0, vt1 WHERE (COALESCE(CASE WHEN v0.c2 THEN vt1.c0 END, -1778970984, ((vt1.c0)IS(v0.c0)), (('448962842') IS TRUE))) ORDER BY PRINTF(v0.c2, v0.c0) COLLATE NOCASE;
SELECT DISTINCT MIN(v0.c0) FROM v0, vt1 WHERE (((COALESCE(CASE WHEN v0.c2 THEN vt1.c0 END, 0xffffffff95f70e98, ((vt1.c0)IS(v0.c0)), (('448962842') IS TRUE)))AND(CAST(((v0.c2) NOT BETWEEN (v0.c1) AND (vt1.c0)) AS REAL)))) ORDER BY ((v0.c1)>(((v0.c0) NOT BETWEEN (vt1.c1) AND (0.5240100667422393))));
SELECT COUNT(*) FROM vt1, v0 WHERE ((((+ (vt1.c1)))%(v0.c1 COLLATE BINARY)));
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((((+ (vt1.c1)))%(v0.c1 COLLATE BINARY)))AND(((v0.c0) IS FALSE)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((v0.c2) NOT NULL));
SELECT * FROM vt1 WHERE ((~ (((0X2cfbb003)IS(vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((~ (((754692099)IS(vt1.c1))))) INTERSECT SELECT * FROM vt1 WHERE (CAST(CAST(vt1.c1 AS REAL) AS BLOB));
SELECT * FROM vt1 WHERE ((~ (((0X2cfbb003)IS(vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((~ (((754692099)IS(vt1.c1))))) INTERSECT SELECT * FROM vt1 WHERE (CAST(CAST(vt1.c1 AS REAL) AS BLOB));
SELECT * FROM vt1 CROSS JOIN v0 ON (((((((~ (v0.c0)))OR(vt1.c0)))OR(DATETIME(v0.c1, vt1.c0, vt1.c0, v0.c2, vt1.c1))))OR((v0.c1 IN (vt1.c1, v0.c2)))) WHERE (((COALESCE(vt1.c1, 'rjY#A', v0.c0, vt1.c1))|(CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END)));
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (((((((~ (v0.c0)))OR(vt1.c0)))OR(DATETIME(v0.c1, vt1.c0, vt1.c0, v0.c2, vt1.c1))))OR((v0.c1 IN (vt1.c1, v0.c2)))) WHERE (((((COALESCE(vt1.c1, 'rjY#A', v0.c0, vt1.c1))|(CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END)))AND(json(NULL COLLATE BINARY)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (((((((~ (v0.c0)))OR(vt1.c0)))OR(DATETIME(v0.c1, vt1.c0, vt1.c0, v0.c2, vt1.c1))))OR((v0.c1 IN (vt1.c1, v0.c2)))) WHERE (CASE CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN 0.1102659836341433 ELSE vt1.c1 END  WHEN (vt1.c1 IN (v0.c2)) THEN ((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))AND(v0.c0)) WHEN ((((((v0.c0)AND(vt1.c0)))OR(vt1.c1)))AND(v0.c0)) THEN ((vt1.c0)GLOB(x'')) WHEN ((vt1.c0)+(vt1.c0)) THEN CAST(NULL AS BLOB) ELSE CASE v0.c1  WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 ELSE v0.c2 END END) LIMIT 0x1;
SELECT * FROM vt1 CROSS JOIN v0 ON (((((((~ (v0.c0)))OR(vt1.c0)))OR(DATETIME(v0.c1, vt1.c0, vt1.c0, v0.c2, vt1.c1))))OR((v0.c1 IN (vt1.c1, v0.c2)))) WHERE (((COALESCE(vt1.c1, 'rjY#A', v0.c0, vt1.c1))|(CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END)));
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (((((((~ (v0.c0)))OR(vt1.c0)))OR(DATETIME(v0.c1, vt1.c0, vt1.c0, v0.c2, vt1.c1))))OR((v0.c1 IN (vt1.c1, v0.c2)))) WHERE (((((COALESCE(vt1.c1, 'rjY#A', v0.c0, vt1.c1))|(CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END)))AND(json(NULL COLLATE BINARY)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (((((((~ (v0.c0)))OR(vt1.c0)))OR(DATETIME(v0.c1, vt1.c0, vt1.c0, v0.c2, vt1.c1))))OR((v0.c1 IN (vt1.c1, v0.c2)))) WHERE (CASE CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN v0.c1 THEN 0.1102659836341433 ELSE vt1.c1 END  WHEN (vt1.c1 IN (v0.c2)) THEN ((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))AND(v0.c0)) WHEN ((((((v0.c0)AND(vt1.c0)))OR(vt1.c1)))AND(v0.c0)) THEN ((vt1.c0)GLOB(x'')) WHEN ((vt1.c0)+(vt1.c0)) THEN CAST(NULL AS BLOB) ELSE CASE v0.c1  WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 ELSE v0.c2 END END) LIMIT 0x1;
SELECT COUNT(*) FROM v0, vt1 WHERE ((((v0.c2)) BETWEEN ((0.5747830084430886)) AND ((COALESCE(DISTINCT v0.c2, v0.c0, v0.c2, v0.c2))))) ORDER BY ((((((((v0.c1)AND(vt1.c0)))AND(v0.c0)))OR(NULL)))|(((v0.c1)>=(v0.c0)))), (+ (0.007124849943288547))  NULLS FIRST, v0.c0 COLLATE BINARY ASC;
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((((v0.c2)) BETWEEN ((0.5747830084430886)) AND ((COALESCE(DISTINCT v0.c2, v0.c0, v0.c2, v0.c2))))) ORDER BY (((((v0.c1 IN (vt1.c0)))AND((NOT (vt1.c0)))))OR(CAST(NULL AS INTEGER)))  NULLS FIRST, CASE ((v0.c1)&(vt1.c1))  WHEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(v0.c0)))OR(v0.c2)) THEN (v0.c1 IN ()) WHEN json_type(v0.c0) THEN (v0.c2 IN (v0.c1)) WHEN (v0.c2 IN ()) THEN 0.1036644912376612 ELSE CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END END  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (NULL) ORDER BY (((((((vt1.c0, v0.c0, v0.c0)) BETWEEN ((v0.c1, vt1.c0, v0.c2)) AND ((v0.c1, v0.c0, v0.c2))))OR((((v0.c2)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))))AND((((v0.c1))>=((vt1.c1))))), (('-405834447') ISNULL) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (((NULL)AND(((vt1.c0)IS(vt1.c0))))) ORDER BY (NOT (CASE v0.c1  WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)) ASC, v0.c1 LIMIT 0X2;
SELECT ALL * FROM v0, vt1 WHERE (NULL) ORDER BY (((((((vt1.c0, v0.c0, v0.c0)) BETWEEN ((v0.c1, vt1.c0, v0.c2)) AND ((v0.c1, v0.c0, v0.c2))))OR((((v0.c2)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))))AND((((v0.c1))>=((vt1.c1))))), (('-405834447') ISNULL) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (((NULL)AND(((vt1.c0)IS(vt1.c0))))) ORDER BY (NOT (CASE v0.c1  WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)) ASC, v0.c1 LIMIT 0X2;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((((((NULL)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)), CAST(vt1.c1 AS TEXT))) AND ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), x'4b')))) ORDER BY CHAR(((vt1.c1) IS TRUE), ((vt1.c1)-(vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((((((NULL)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)), CAST(vt1.c1 AS TEXT))) AND ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), x'4b'))))AND(x''))) ORDER BY CHAR(((vt1.c1) IS TRUE), ((vt1.c1)-(vt1.c0))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((json_remove(vt1.c0, x'', vt1.c1, vt1.c0, vt1.c1, vt1.c0) IN (vt1.c0 COLLATE BINARY))) ORDER BY CHAR(((vt1.c1) IS TRUE), ((vt1.c1)-(vt1.c0))) LIMIT 0X0;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((((((NULL)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)), CAST(vt1.c1 AS TEXT))) AND ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), x'4b')))) ORDER BY CHAR(((vt1.c1) IS TRUE), ((vt1.c1)-(vt1.c0)));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) NOT BETWEEN ((((((((((((((NULL)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)), CAST(vt1.c1 AS TEXT))) AND ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), x'4b'))))AND(x''))) ORDER BY CHAR(((vt1.c1) IS TRUE), ((vt1.c1)-(vt1.c0))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((json_remove(vt1.c0, x'', vt1.c1, vt1.c0, vt1.c1, vt1.c0) IN (vt1.c0 COLLATE BINARY))) ORDER BY CHAR(((vt1.c1) IS TRUE), ((vt1.c1)-(vt1.c0))) LIMIT 0X0;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (CAST(((v0.c2)+(v0.c2)) AS REAL)) ORDER BY ((v0.c1 COLLATE BINARY) IS TRUE) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (CAST(((v0.c2)+(v0.c2)) AS REAL)) ORDER BY (NOT (vt1.c1 COLLATE BINARY)) DESC  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt1 WHERE (-2024229575);
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (0xffffffff8758b539) LIMIT 0x1;
SELECT * FROM v0, vt1 WHERE ('n');
SELECT DISTINCT * FROM v0, vt1 WHERE ('n') ORDER BY vt1.c0 ASC  NULLS FIRST LIMIT 0X4;
SELECT * FROM v0, vt1 WHERE ('n');
SELECT DISTINCT * FROM v0, vt1 WHERE ('n') ORDER BY vt1.c0 ASC  NULLS FIRST LIMIT 0X4;
SELECT ALL * FROM v0 WHERE ((((v0.c1 IN ())) BETWEEN (((((((v0.c2)OR(v0.c1)))OR(v0.c2)))OR(NULL))) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)))));
SELECT * FROM v0 WHERE ((((v0.c1 IN ())) BETWEEN (((((((v0.c2)OR(v0.c1)))OR(v0.c2)))OR(NULL))) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)))));
SELECT ALL * FROM v0 WHERE ((((v0.c1 IN ())) BETWEEN (((((((v0.c2)OR(v0.c1)))OR(v0.c2)))OR(NULL))) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)))));
SELECT * FROM v0 WHERE ((((v0.c1 IN ())) BETWEEN (((((((v0.c2)OR(v0.c1)))OR(v0.c2)))OR(NULL))) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)))));
SELECT ALL * FROM v0 WHERE (0.46517877406256225);
SELECT ALL * FROM v0 WHERE (((0.46517877406256225)AND(((NULL)-(((v0.c0) NOT NULL)))))) ORDER BY (((((v0.c2, v0.c0, 0x2de5382)) NOT BETWEEN ((v0.c2, v0.c1, v0.c0)) AND ((v0.c0, v0.c0, v0.c1))))<=(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))) LIMIT 0 INTERSECT SELECT * FROM v0 WHERE (TRIM(CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END, (((v0.c1))<=((v0.c1))))) ORDER BY (((((v0.c2, v0.c0, 0x2de5382)) NOT BETWEEN ((v0.c2, v0.c1, v0.c0)) AND ((v0.c0, v0.c0, v0.c1))))<=(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))) LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (0.46517877406256225);
SELECT ALL * FROM v0 WHERE (((0.46517877406256225)AND(((NULL)-(((v0.c0) NOT NULL)))))) ORDER BY (((((v0.c2, v0.c0, 0x2de5382)) NOT BETWEEN ((v0.c2, v0.c1, v0.c0)) AND ((v0.c0, v0.c0, v0.c1))))<=(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))) LIMIT 0 INTERSECT SELECT * FROM v0 WHERE (TRIM(CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END, (((v0.c1))<=((v0.c1))))) ORDER BY (((((v0.c2, v0.c0, 0x2de5382)) NOT BETWEEN ((v0.c2, v0.c1, v0.c0)) AND ((v0.c0, v0.c0, v0.c1))))<=(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))) LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((- (((vt1.c0) BETWEEN (1.769291611E9) AND (v0.c0))))) ORDER BY v0.c0 COLLATE RTRIM COLLATE NOCASE ASC, CAST(v0.c2 AS NUMERIC) ASC;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((((- (((vt1.c0) BETWEEN (1.769291611E9) AND (v0.c0)))))AND(CAST(v0.c2 COLLATE NOCASE AS TEXT)))) ORDER BY v0.c0 COLLATE RTRIM COLLATE NOCASE ASC, CAST(v0.c2 AS NUMERIC) ASC LIMIT 0X3;
SELECT * FROM v0, vt1 WHERE (CAST(((v0.c1) NOT NULL) AS INTEGER));
SELECT * FROM v0, vt1 WHERE (CAST(((v0.c1) NOT NULL) AS INTEGER)) ORDER BY (+ ((((v0.c2, vt1.c0, vt1.c0, NULL))<((vt1.c0, vt1.c1, v0.c0, v0.c1))))) ASC, ((x'62') BETWEEN (CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c0 END) AND ((('4t') BETWEEN (v0.c2) AND (vt1.c1)))) ASC LIMIT 0x2;
SELECT * FROM v0, vt1 WHERE (CAST(((v0.c1) NOT NULL) AS INTEGER));
SELECT * FROM v0, vt1 WHERE (CAST(((v0.c1) NOT NULL) AS INTEGER)) ORDER BY (+ ((((v0.c2, vt1.c0, vt1.c0, NULL))<((vt1.c0, vt1.c1, v0.c0, v0.c1))))) ASC, ((x'62') BETWEEN (CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c0 END) AND ((('4t') BETWEEN (v0.c2) AND (vt1.c1)))) ASC LIMIT 0x2;
SELECT ALL COUNT(*) FROM v0 WHERE (((((((v0.c0 COLLATE NOCASE)AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c1)))))AND('-610614943'))) ORDER BY (v0.c1 IN ()), CASE WHEN (((v0.c0, v0.c2, v0.c2))<=((v0.c1, v0.c2, v0.c2))) THEN ((v0.c0) ISNULL) WHEN CAST(v0.c1 AS REAL) THEN v0.c0 COLLATE RTRIM ELSE CHANGES() END, ((((v0.c1)OR(v0.c2))) IS TRUE)  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE (((((((((v0.c0 COLLATE NOCASE)AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c1)))))AND('-610614943')))AND(((v0.c1)IS(v0.c1))))) ORDER BY (v0.c1 IN ()), CASE WHEN (((v0.c0, v0.c2, v0.c2))<=((v0.c1, v0.c2, v0.c2))) THEN ((v0.c0) ISNULL) WHEN CAST(v0.c1 AS REAL) THEN v0.c0 COLLATE RTRIM ELSE CHANGES() END, ((((v0.c1)OR(v0.c2))) IS TRUE)  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((((v0.c1)AND(v0.c0)))OR(0.32202987285116424))) NOT BETWEEN (CAST(v0.c1 AS INTEGER)) AND (TYPEOF(v0.c0)))) ORDER BY ABS(DISTINCT v0.c0 COLLATE NOCASE) DESC;
SELECT DISTINCT * FROM v0 WHERE (((((((((v0.c1)AND(v0.c0)))OR(0.32202987285116424))) NOT BETWEEN (CAST(v0.c1 AS INTEGER)) AND (TYPEOF(v0.c0))))AND(v0.c2))) ORDER BY ABS(DISTINCT v0.c0 COLLATE NOCASE) DESC;
SELECT ALL * FROM v0 WHERE (((((((v0.c1)AND(v0.c0)))OR(0.32202987285116424))) NOT BETWEEN (CAST(v0.c1 AS INTEGER)) AND (TYPEOF(v0.c0)))) ORDER BY ABS(DISTINCT v0.c0 COLLATE NOCASE) DESC;
SELECT DISTINCT * FROM v0 WHERE (((((((((v0.c1)AND(v0.c0)))OR(0.32202987285116424))) NOT BETWEEN (CAST(v0.c1 AS INTEGER)) AND (TYPEOF(v0.c0))))AND(v0.c2))) ORDER BY ABS(DISTINCT v0.c0 COLLATE NOCASE) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE (x'');
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (x'');
SELECT MIN(vt1.c0) FROM vt1, v0 WHERE (((((((((((v0.c1)AND(vt1.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c0)))/((+ (vt1.c0)))));
SELECT MIN(vt1.c0) FROM vt1, v0 WHERE (((((((((((v0.c1)AND(vt1.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c0)))/((+ (vt1.c0))))) ORDER BY ((((((((((((NULL)OR(v0.c1)))AND(v0.c0)))AND(vt1.c1)))AND(v0.c2)))OR(0.34290341452550144)))OR(v0.c2)) COLLATE RTRIM DESC, v0.c0, ((((vt1.c1) NOTNULL))<<((v0.c0 IN ())));
SELECT ALL * FROM vt1 WHERE (NULL);
SELECT DISTINCT * FROM vt1 WHERE (((NULL)AND(((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN '㍻^䝓8%' THEN vt1.c0 END) NOTNULL)))) ORDER BY (((NOT ('D2O㖊>s')))IS NOT(vt1.c0 COLLATE BINARY)) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL) ORDER BY (((NOT ('D2O㖊>s')))IS NOT(vt1.c0 COLLATE BINARY)) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (NULL);
SELECT DISTINCT * FROM vt1 WHERE (((NULL)AND(((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN '㍻^䝓8%' THEN vt1.c0 END) NOTNULL)))) ORDER BY (((NOT ('D2O㖊>s')))IS NOT(vt1.c0 COLLATE BINARY)) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL) ORDER BY (((NOT ('D2O㖊>s')))IS NOT(vt1.c0 COLLATE BINARY)) ASC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM v0 WHERE (((((NULL) IS FALSE)) BETWEEN (((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0))) AND (((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1))))) ORDER BY ((ABS(v0.c2))LIKE(((v0.c2)*(NULL)))) ASC  NULLS FIRST, CAST(v0.c0 AS INTEGER)  NULLS LAST, ((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN '-635203598' END)LIKE(v0.c1))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((((NULL) IS FALSE)) BETWEEN (((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0))) AND (((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))))AND(((((v0.c1)LIKE(v0.c1)))IS(v0.c0))))) ORDER BY ((ABS(v0.c2))LIKE(((v0.c2)*(NULL)))) ASC  NULLS FIRST, CAST(v0.c0 AS INTEGER)  NULLS LAST, ((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN '-635203598' END)LIKE(v0.c1))  NULLS LAST;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((NOT (STRFTIME(vt1.c0, vt1.c0, 0.5222610165430452)))) ORDER BY ((LIKELY(vt1.c1))>(0.9505227391332931 COLLATE BINARY));
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((((NOT (STRFTIME(vt1.c0, vt1.c0, 0.5222610165430452))))AND((~ (((vt1.c1)>(vt1.c0))))))) ORDER BY vt1.c1 ASC  NULLS LAST, (((vt1.c1, vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)), json_array_length(vt1.c1, vt1.c0), CAST(vt1.c1 AS BLOB), ((vt1.c1)-(vt1.c1)))) AND ((RTRIM(vt1.c1), '863375020', CASE WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE 0.3476216063272587 END, ((vt1.c0)|(vt1.c0)))))  NULLS LAST INTERSECT SELECT MIN(vt1.c1) FROM vt1 WHERE (CAST((vt1.c0 IN (vt1.c1)) AS BLOB)) ORDER BY vt1.c1 ASC  NULLS LAST, (((vt1.c1, vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)), json_array_length(vt1.c1, vt1.c0), CAST(vt1.c1 AS BLOB), ((vt1.c1)-(vt1.c1)))) AND ((RTRIM(vt1.c1), '863375020', CASE WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE 0.3476216063272587 END, ((vt1.c0)|(vt1.c0)))))  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((~ (((vt1.c0) NOTNULL)))) ORDER BY (NOT (CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)) ASC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((~ (((vt1.c0) NOTNULL)))) ORDER BY (NOT (CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)) ASC  NULLS LAST LIMIT 0X2 INTERSECT SELECT * FROM vt1, v0 WHERE (((((v0.c1, vt1.c1, vt1.c0)) BETWEEN ((vt1.c1, v0.c1, '-1408674184')) AND ((v0.c2, 0.19609541871211056, v0.c2))) IN (CAST(v0.c0 AS NUMERIC)))) ORDER BY (NOT (CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)) ASC  NULLS LAST LIMIT 0x2;
SELECT * FROM vt1, v0 WHERE ((~ (((vt1.c0) NOTNULL)))) ORDER BY (NOT (CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)) ASC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((~ (((vt1.c0) NOTNULL)))) ORDER BY (NOT (CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)) ASC  NULLS LAST LIMIT 0X2 INTERSECT SELECT * FROM vt1, v0 WHERE (((((v0.c1, vt1.c1, vt1.c0)) BETWEEN ((vt1.c1, v0.c1, '-1408674184')) AND ((v0.c2, 0.19609541871211056, v0.c2))) IN (CAST(v0.c0 AS NUMERIC)))) ORDER BY (NOT (CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)) ASC  NULLS LAST LIMIT 0x2;
SELECT MAX(v0.c2) FROM v0 WHERE ('-762699725') ORDER BY ((((((((CAST(v0.c2 AS TEXT))AND(CAST(v0.c0 AS REAL))))OR((- (v0.c0)))))OR(x'7f' COLLATE BINARY)))OR((+ (v0.c2)))) ASC, ((((((v0.c0)OR(v0.c2)))AND(v0.c0)))<>(CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN x'' WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c2 END)) ASC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ('-762699725') ORDER BY ABS(DISTINCT ((v0.c1)>=(v0.c2))), v0.c2 ASC  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (CAST(CAST(v0.c1 AS BLOB) AS TEXT)) ORDER BY ABS(DISTINCT ((v0.c1)>=(v0.c2))), v0.c2 ASC  NULLS FIRST LIMIT 0X2;
SELECT COUNT(*) FROM v0 NATURAL JOIN vt1 WHERE (((((vt1.c1)/(vt1.c1)))/((v0.c1 IN (vt1.c0))))) ORDER BY CAST(CASE WHEN v0.c0 THEN v0.c0 END AS NUMERIC), 0X22fcccee  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 NATURAL JOIN vt1 WHERE (((((vt1.c1)/(vt1.c1)))/((v0.c1 IN (vt1.c0))))) ORDER BY CAST(CAST(' ' AS TEXT) AS INTEGER) ASC  NULLS FIRST, ((((((((((vt1.c1) IS FALSE))AND(((vt1.c0) NOT NULL))))AND(CASE vt1.c0  WHEN v0.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)))AND((+ (v0.c2)))))AND((+ (vt1.c1)))) ASC, (v0.c2 IN (((v0.c0) BETWEEN (v0.c1) AND (vt1.c0)))) DESC  NULLS LAST;
SELECT MAX(v0.c0) FROM vt1, v0 WHERE ((vt1.c1 IN ())) ORDER BY CASE ((v0.c0) IS FALSE)  WHEN v0.c0 THEN ((((((((vt1.c0)AND(v0.c0)))OR(0.6878575651698283)))OR(vt1.c1)))AND(x'e263a4')) WHEN ((v0.c0)*(0.07282769697445002)) THEN CAST(vt1.c0 AS TEXT) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN CAST(v0.c1 AS NUMERIC) WHEN ((vt1.c0)-(v0.c0)) THEN v0.c1 COLLATE BINARY END DESC, vt1.c1 ASC, (NOT (((vt1.c1) IS FALSE))) ASC  NULLS LAST;
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE ((((vt1.c1 IN ()))AND((NOT (vt1.c0 COLLATE BINARY))))) ORDER BY CASE ((v0.c0) IS FALSE)  WHEN v0.c0 THEN ((((((((vt1.c0)AND(v0.c0)))OR(0.6878575651698283)))OR(vt1.c1)))AND(x'e263a4')) WHEN ((v0.c0)*(0.07282769697445002)) THEN CAST(vt1.c0 AS TEXT) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN CAST(v0.c1 AS NUMERIC) WHEN ((vt1.c0)-(v0.c0)) THEN v0.c1 COLLATE BINARY END DESC, vt1.c1 ASC, (NOT (((vt1.c1) IS FALSE))) ASC  NULLS LAST INTERSECT SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (PRINTF((vt1.c1 IN (v0.c2, v0.c0)), (((x'61', vt1.c0))<((vt1.c1, v0.c2))))) ORDER BY CASE ((v0.c0) IS FALSE)  WHEN v0.c0 THEN ((((((((vt1.c0)AND(v0.c0)))OR(0.6878575651698283)))OR(vt1.c1)))AND(x'e263a4')) WHEN ((v0.c0)*(0.07282769697445002)) THEN CAST(vt1.c0 AS TEXT) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN CAST(v0.c1 AS NUMERIC) WHEN ((vt1.c0)-(v0.c0)) THEN v0.c1 COLLATE BINARY END DESC, vt1.c1 ASC, (NOT (((vt1.c1) IS FALSE))) ASC  NULLS LAST;
SELECT MIN(v0.c1) FROM v0 WHERE (0.9759636224476492);
SELECT ALL MIN(v0.c1) FROM v0 WHERE (((0.9759636224476492)AND((((v0.c2 IN (v0.c0, v0.c1, v0.c0))) ISNULL))));
SELECT ALL * FROM vt1, v0 WHERE (NULL);
SELECT DISTINCT * FROM vt1, v0 WHERE (NULL) ORDER BY CASE WHEN ((vt1.c1)IS NOT(vt1.c0)) THEN ((((((((((v0.c2)AND(vt1.c1)))AND(v0.c2)))OR(v0.c1)))OR(v0.c2)))OR(vt1.c0)) ELSE ABS(DISTINCT v0.c2) END DESC  NULLS LAST, NULLIF(CAST(v0.c2 AS INTEGER), (((vt1.c1, vt1.c1, vt1.c0))<=((v0.c0, v0.c1, vt1.c0))));
SELECT ALL * FROM vt1, v0 WHERE (NULL);
SELECT DISTINCT * FROM vt1, v0 WHERE (NULL) ORDER BY CASE WHEN ((vt1.c1)IS NOT(vt1.c0)) THEN ((((((((((v0.c2)AND(vt1.c1)))AND(v0.c2)))OR(v0.c1)))OR(v0.c2)))OR(vt1.c0)) ELSE ABS(DISTINCT v0.c2) END DESC  NULLS LAST, NULLIF(CAST(v0.c2 AS INTEGER), (((vt1.c1, vt1.c1, vt1.c0))<=((v0.c0, v0.c1, vt1.c0))));
SELECT ALL MAX(vt1.c1) FROM v0, vt1 WHERE (CASE WHEN CAST(vt1.c0 AS INTEGER) THEN v0.c2 COLLATE RTRIM WHEN v0.c1 THEN v0.c2 COLLATE BINARY ELSE v0.c2 COLLATE NOCASE END);
SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (((CASE WHEN CAST(vt1.c0 AS INTEGER) THEN v0.c2 COLLATE RTRIM WHEN v0.c1 THEN v0.c2 COLLATE BINARY ELSE v0.c2 COLLATE NOCASE END)AND((((vt1.c0)) NOT BETWEEN (((v0.c2 IN ()))) AND ((MIN(v0.c0, vt1.c0, vt1.c0, v0.c1))))))) INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (x'');
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) IS TRUE));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) IS TRUE)) ORDER BY (((((((((((((vt1.c1)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))OR(LIKELY(vt1.c0))))AND(vt1.c0 COLLATE RTRIM)))OR(GLOB(vt1.c1, vt1.c0))))AND(((vt1.c0)*(vt1.c1)))))AND(CAST(vt1.c0 AS INTEGER))) ASC, ((vt1.c0)-(vt1.c0)) COLLATE NOCASE, x''  NULLS LAST LIMIT 0X1 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE ((- (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END))) ORDER BY (((((((((((((vt1.c1)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))OR(LIKELY(vt1.c0))))AND(vt1.c0 COLLATE RTRIM)))OR(GLOB(vt1.c1, vt1.c0))))AND(((vt1.c0)*(vt1.c1)))))AND(CAST(vt1.c0 AS INTEGER))) ASC, ((vt1.c0)-(vt1.c0)) COLLATE NOCASE, x''  NULLS LAST LIMIT 1;
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE ((((((v0.c0, NULL)) BETWEEN ((vt1.c1, v0.c1)) AND ((vt1.c1, vt1.c1))))<<(((vt1.c0) NOT NULL))));
SELECT DISTINCT MIN(v0.c1) FROM vt1, v0 WHERE ((((((((v0.c0, NULL)) BETWEEN ((vt1.c1, v0.c1)) AND ((vt1.c1, vt1.c1))))<<(((vt1.c0) NOT NULL))))AND(LIKELIHOOD(DISTINCT ((vt1.c1) IS FALSE), ((v0.c0) IS FALSE)))));
SELECT ALL * FROM v0 WHERE (((((((((v0.c0)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))!=(v0.c1 COLLATE NOCASE))) ORDER BY ((json_patch(x'7e', v0.c2)) NOT BETWEEN (HEX(v0.c2)) AND (x'd2c2'));
SELECT DISTINCT * FROM v0 WHERE (((((((((((v0.c0)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))<>(v0.c1 COLLATE NOCASE)))AND(LIKELIHOOD(((((v0.c2)AND(v0.c1)))OR(x'196852')), CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END)))) ORDER BY 0.21088915775749395 ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((((((v0.c0)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))!=(v0.c1 COLLATE NOCASE))) ORDER BY ((json_patch(x'7e', v0.c2)) NOT BETWEEN (HEX(v0.c2)) AND (x'd2c2'));
SELECT DISTINCT * FROM v0 WHERE (((((((((((v0.c0)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))<>(v0.c1 COLLATE NOCASE)))AND(LIKELIHOOD(((((v0.c2)AND(v0.c1)))OR(x'196852')), CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END)))) ORDER BY 0.21088915775749395 ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (CASE WHEN ((vt1.c1)&(0xffffffff9104d9d0)) THEN ((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)) WHEN (vt1.c1 IN ()) THEN (vt1.c1 IN (vt1.c1, vt1.c0)) WHEN CAST(x'a842' AS TEXT) THEN ((vt1.c0)>=(vt1.c0)) WHEN ((vt1.c0) IS TRUE) THEN LAST_INSERT_ROWID() END) ORDER BY (~ (vt1.c0)) ASC  NULLS LAST, (((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c0))))>(((vt1.c0 IN ()))))  NULLS LAST, vt1.c1;
SELECT DISTINCT * FROM vt1 WHERE (((CASE WHEN ((vt1.c1)&(-1861953072)) THEN ((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)) WHEN (vt1.c1 IN ()) THEN (vt1.c1 IN (vt1.c1)) WHEN CAST(x'a842' AS TEXT) THEN ((vt1.c0)=(vt1.c0)) WHEN ((vt1.c0) IS TRUE) THEN LAST_INSERT_ROWID() END)AND((((vt1.c0, vt1.c1)) BETWEEN ((CASE WHEN vt1.c1 THEN vt1.c0 END, (((vt1.c0, vt1.c1, vt1.c1, vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c1, NULL))))) AND ((((vt1.c0)IS(NULL)), (((vt1.c0, 0.6722660315555743, vt1.c1, vt1.c0, vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c1, vt1.c1, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c1, vt1.c1))))))))) ORDER BY (~ (vt1.c0)) ASC  NULLS LAST, (((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c0))))>(((vt1.c0 IN ()))))  NULLS LAST, vt1.c1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((x'', vt1.c1)) NOT BETWEEN ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)), (('768350880')GLOB(vt1.c0)))) AND ((vt1.c1 COLLATE NOCASE, vt1.c1)))) ORDER BY (~ (vt1.c0)) ASC  NULLS LAST, (((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c0))))>(((vt1.c0 IN ()))))  NULLS LAST, vt1.c1;
SELECT ALL * FROM vt1 WHERE (CASE WHEN ((vt1.c1)&(0xffffffff9104d9d0)) THEN ((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)) WHEN (vt1.c1 IN ()) THEN (vt1.c1 IN (vt1.c1, vt1.c0)) WHEN CAST(x'a842' AS TEXT) THEN ((vt1.c0)>=(vt1.c0)) WHEN ((vt1.c0) IS TRUE) THEN LAST_INSERT_ROWID() END) ORDER BY (~ (vt1.c0)) ASC  NULLS LAST, (((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c0))))>(((vt1.c0 IN ()))))  NULLS LAST, vt1.c1;
SELECT DISTINCT * FROM vt1 WHERE (((CASE WHEN ((vt1.c1)&(-1861953072)) THEN ((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)) WHEN (vt1.c1 IN ()) THEN (vt1.c1 IN (vt1.c1)) WHEN CAST(x'a842' AS TEXT) THEN ((vt1.c0)=(vt1.c0)) WHEN ((vt1.c0) IS TRUE) THEN LAST_INSERT_ROWID() END)AND((((vt1.c0, vt1.c1)) BETWEEN ((CASE WHEN vt1.c1 THEN vt1.c0 END, (((vt1.c0, vt1.c1, vt1.c1, vt1.c0, vt1.c0, vt1.c0))>=((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c1, NULL))))) AND ((((vt1.c0)IS(NULL)), (((vt1.c0, 0.6722660315555743, vt1.c1, vt1.c0, vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c1, vt1.c1, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c1, vt1.c1))))))))) ORDER BY (~ (vt1.c0)) ASC  NULLS LAST, (((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c0))))>(((vt1.c0 IN ()))))  NULLS LAST, vt1.c1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((x'', vt1.c1)) NOT BETWEEN ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)), (('768350880')GLOB(vt1.c0)))) AND ((vt1.c1 COLLATE NOCASE, vt1.c1)))) ORDER BY (~ (vt1.c0)) ASC  NULLS LAST, (((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c0))))>(((vt1.c0 IN ()))))  NULLS LAST, vt1.c1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0)%(CASE '1'  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY (((~ (vt1.c0)))OR(((vt1.c0)<=(x'')))) DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0)%(CASE '1'  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY (- (vt1.c1 COLLATE BINARY)) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (TYPEOF(CAST(vt1.c0 AS INTEGER))) ORDER BY (- (vt1.c1 COLLATE BINARY));
SELECT COUNT(*) FROM v0 WHERE ((((v0.c0)-(v0.c2)) IN ((((v0.c0, v0.c0, v0.c0, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c2, v0.c1)) AND ((v0.c1, v0.c0, 0.4307238541655152, v0.c2))))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((v0.c0)-(v0.c2)) IN ((((v0.c0, v0.c0, v0.c0, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c2, v0.c1)) AND ((v0.c1, v0.c0, 0.4307238541655152, v0.c2)))))) LIMIT 0x0;
SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE (CAST(CAST(v0.c0 AS INTEGER) AS BLOB)) ORDER BY CASE WHEN vt1.c1 COLLATE RTRIM THEN vt1.c0 COLLATE RTRIM WHEN x'5b' THEN CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END WHEN ((((v0.c2)AND(vt1.c1)))OR(vt1.c1)) THEN (~ (vt1.c1)) WHEN (- (v0.c0)) THEN (v0.c1 IN (vt1.c1)) WHEN ((v0.c0)<<(v0.c0)) THEN json_valid('4
') WHEN 0Xffffffff91bd0e3b THEN ((v0.c2) BETWEEN (v0.c0) AND (v0.c1)) ELSE ((vt1.c1)==(v0.c2)) END  NULLS FIRST, ((CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c0 END)%(CASE WHEN v0.c0 THEN vt1.c1 END)) ASC;
SELECT DISTINCT MIN(v0.c2) FROM vt1, v0 WHERE (((CAST(CAST(v0.c0 AS INTEGER) AS BLOB))AND(CHAR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN '-1078208137' ELSE vt1.c1 END, ((0.6286766463344724)||(v0.c2)), UPPER(DISTINCT 'h~M-QT'), (~ (vt1.c1)), x'')))) ORDER BY CASE WHEN vt1.c1 COLLATE RTRIM THEN vt1.c0 COLLATE RTRIM WHEN x'5b' THEN CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END WHEN ((((v0.c2)AND(vt1.c1)))OR(vt1.c1)) THEN (~ (vt1.c1)) WHEN (- (v0.c0)) THEN (v0.c1 IN (vt1.c1)) WHEN ((v0.c0)<<(v0.c0)) THEN json_valid('4
') WHEN -1849881029 THEN ((v0.c2) BETWEEN (v0.c0) AND (v0.c1)) ELSE ((vt1.c1)==(v0.c2)) END  NULLS FIRST, ((CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c0 END)%(CASE WHEN v0.c0 THEN vt1.c1 END)) ASC LIMIT 0x1;
SELECT MAX(v0.c1) FROM vt1 INNER JOIN v0 ON v0.c0 WHERE (CAST(v0.c0 COLLATE NOCASE AS INTEGER));
SELECT ALL MAX(v0.c1) FROM vt1 INNER JOIN v0 ON v0.c0 WHERE (CAST(v0.c0 COLLATE NOCASE AS INTEGER));
SELECT * FROM vt1, v0 WHERE ('-415697379');
SELECT ALL * FROM vt1, v0 WHERE ('-415697379') LIMIT 0;
SELECT * FROM vt1, v0 WHERE ('-415697379');
SELECT ALL * FROM vt1, v0 WHERE ('-415697379') LIMIT 0;
SELECT MAX(vt1.c1) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c1)))>=(ABS(DISTINCT vt1.c1))));
SELECT MAX(vt1.c1) FROM vt1 WHERE ((((vt1.c0 IN (vt1.c1)))>=(ABS(DISTINCT vt1.c1)))) INTERSECT SELECT ALL MAX(vt1.c1) FROM vt1 WHERE ((~ ('*<i㣆+B?X셡')));
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (CASE ((v0.c0) BETWEEN (vt1.c0) AND (v0.c2))  WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0) IS TRUE) WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN ((((((v0.c1)AND(x'')))OR(v0.c0)))AND(NULL)) WHEN ((vt1.c0) NOTNULL) THEN (((v0.c0))>=((vt1.c1))) WHEN (vt1.c1 IN ()) THEN ((0.5042399198791986) BETWEEN (v0.c2) AND (vt1.c0)) WHEN ((v0.c0)*(v0.c0)) THEN ((vt1.c0)>=(v0.c1)) ELSE vt1.c0 COLLATE RTRIM END) ORDER BY ((NULL)=(CASE WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)) ASC, ((MIN(v0.c1, vt1.c1))||(((vt1.c0)AND(v0.c1)))) DESC  NULLS LAST, ((((((NULL)AND(v0.c0)))AND(0.06613554183769399))) IS TRUE) ASC  NULLS LAST;
SELECT MAX(v0.c2) FROM vt1, v0 WHERE (CASE ((v0.c0) BETWEEN (vt1.c0) AND (v0.c2))  WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0) IS TRUE) WHEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN ((((((v0.c1)AND(x'')))OR(v0.c0)))AND(NULL)) WHEN ((vt1.c0) NOTNULL) THEN (((v0.c0))>((vt1.c1))) WHEN (vt1.c1 IN ()) THEN ((0.5042399198791986) BETWEEN (v0.c2) AND (vt1.c0)) WHEN ((v0.c0)*(v0.c0)) THEN ((vt1.c0)==(v0.c1)) ELSE vt1.c0 COLLATE RTRIM END) ORDER BY ((NULL)=(CASE WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)) ASC, ((MIN(v0.c1, vt1.c1))||(((vt1.c0)AND(v0.c1)))) DESC  NULLS LAST, ((((((NULL)AND(v0.c0)))AND(0.06613554183769399))) IS TRUE) ASC  NULLS LAST INTERSECT SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (0.2631238219306197) ORDER BY ((NULL)=(CASE WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)) ASC, ((MIN(v0.c1, vt1.c1))||(((vt1.c0)AND(v0.c1)))) DESC  NULLS LAST, ((((((NULL)AND(v0.c0)))AND(0.06613554183769399))) IS TRUE) ASC  NULLS LAST;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((0.8518480574244964) NOTNULL)) ORDER BY (((((0.7658365890194614)||(vt1.c0)), (v0.c0 IN ()), SQLITE_SOURCE_ID()))>((((v0.c2)>=(vt1.c0)), ((((vt1.c1)OR(v0.c2)))AND(vt1.c0)), NULL))) DESC;
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (((0.8518480574244964) NOTNULL)) ORDER BY (((((0.7658365890194614)||(vt1.c0)), (v0.c0 IN ()), SQLITE_SOURCE_ID()))>((((v0.c2)>=(vt1.c0)), ((((vt1.c1)OR(v0.c2)))AND(vt1.c0)), NULL))) DESC LIMIT 0;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((0.8518480574244964) NOTNULL)) ORDER BY (((((0.7658365890194614)||(vt1.c0)), (v0.c0 IN ()), SQLITE_SOURCE_ID()))>((((v0.c2)>=(vt1.c0)), ((((vt1.c1)OR(v0.c2)))AND(vt1.c0)), NULL))) DESC;
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (((0.8518480574244964) NOTNULL)) ORDER BY (((((0.7658365890194614)||(vt1.c0)), (v0.c0 IN ()), SQLITE_SOURCE_ID()))>((((v0.c2)>=(vt1.c0)), ((((vt1.c1)OR(v0.c2)))AND(vt1.c0)), NULL))) DESC LIMIT 0;
SELECT MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c1) NOT NULL)) BETWEEN ((('')>(vt1.c1))) AND (0Xffffffffa2d87864))) ORDER BY (('979081651')>>(MIN(vt1.c0, vt1.c0, vt1.c1))) DESC;
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((((((vt1.c1) NOT NULL)) BETWEEN ((('')>(vt1.c1))) AND (0xffffffffa2d87864)))AND((((('5') IS TRUE))/(((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0))))))) ORDER BY CAST(vt1.c1 COLLATE NOCASE AS NUMERIC) INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE ((NOT (((vt1.c0) NOTNULL)))) ORDER BY CAST(vt1.c1 COLLATE NOCASE AS NUMERIC);
SELECT ALL MAX(vt1.c0) FROM v0, vt1 WHERE (((((vt1.c0 COLLATE BINARY)OR((((v0.c2, vt1.c0, v0.c2, v0.c1)) BETWEEN (('-426393094', '', v0.c1, v0.c0)) AND ((v0.c2, v0.c1, v0.c1, vt1.c1))))))OR((NOT (v0.c2)))));
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE (((((vt1.c0 COLLATE BINARY)OR((((v0.c2, vt1.c0, v0.c2, v0.c1)) BETWEEN (('-426393094', '', v0.c1, v0.c0)) AND ((v0.c2, v0.c1, v0.c1, vt1.c1))))))OR((NOT (v0.c2))))) INTERSECT SELECT MAX(vt1.c0) FROM v0, vt1 WHERE ((((((v0.c1, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0)) AND ((vt1.c0, vt1.c0)))) BETWEEN (((vt1.c1) NOTNULL)) AND ((((vt1.c1))<>((vt1.c0))))));
SELECT ALL * FROM vt1, v0 WHERE (((((((((0.6480372591834549)AND(v0.c1)))OR(v0.c1)))OR(vt1.c0)))OR(v0.c2)));
SELECT * FROM vt1, v0 WHERE (((((((((0.6480372591834549)AND(v0.c1)))OR(v0.c1)))OR(vt1.c0)))OR(v0.c2))) LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CASE ((v0.c1)LIKE(v0.c2))  WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((v0.c1))) THEN (vt1.c0 IN (vt1.c1)) WHEN CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END THEN (((vt1.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c0))) ELSE ((v0.c1)IS NOT(0.8194570590210998)) END) LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (((((((((0.6480372591834549)AND(v0.c1)))OR(v0.c1)))OR(vt1.c0)))OR(v0.c2)));
SELECT * FROM vt1, v0 WHERE (((((((((0.6480372591834549)AND(v0.c1)))OR(v0.c1)))OR(vt1.c0)))OR(v0.c2))) LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CASE ((v0.c1)LIKE(v0.c2))  WHEN (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((v0.c1))) THEN (vt1.c0 IN (vt1.c1)) WHEN CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END THEN (((vt1.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c0))) ELSE ((v0.c1)IS NOT(0.8194570590210998)) END) LIMIT 0;
SELECT MIN(v0.c0) FROM v0, vt1 WHERE (LTRIM(v0.c0) COLLATE RTRIM);
SELECT DISTINCT MIN(v0.c0) FROM v0, vt1 WHERE (((LTRIM(v0.c0) COLLATE RTRIM)AND('-257238049'))) ORDER BY (((('0.41030045814767213')OR(((((((-1.62851011E9)AND(vt1.c1)))AND(v0.c2)))OR(vt1.c1)))))OR(CAST(vt1.c0 AS REAL))) DESC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1, v0 WHERE (LIKELY((~ (v0.c2))));
SELECT DISTINCT * FROM vt1, v0 WHERE (((LIKELY((~ (v0.c2))))AND((v0.c2 IN ())))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (DATETIME(((vt1.c1) ISNULL), CASE v0.c2  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 END, (v0.c0 IN (vt1.c0)), CAST(0.6588593693695665 AS BLOB), (v0.c1 IN (v0.c2, v0.c1))));
SELECT * FROM vt1, v0 WHERE (LIKELY((~ (v0.c2))));
SELECT DISTINCT * FROM vt1, v0 WHERE (((LIKELY((~ (v0.c2))))AND((v0.c2 IN ())))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (DATETIME(((vt1.c1) ISNULL), CASE v0.c2  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 END, (v0.c0 IN (vt1.c0)), CAST(0.6588593693695665 AS BLOB), (v0.c1 IN (v0.c2, v0.c1))));
SELECT MIN(v0.c2) FROM v0 WHERE (v0.c1);
SELECT ALL MIN(v0.c2) FROM v0 WHERE (((v0.c1)AND(CAST(CAST(v0.c0 AS TEXT) AS BLOB)))) ORDER BY ((((((((highlight(v0.c1, v0.c2, v0.c0, v0.c2))AND(v0.c0 COLLATE RTRIM)))OR(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END)))AND(((v0.c1)=(v0.c0)))))OR(((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL MIN(v0.c2) FROM v0 WHERE (((((v0.c2)IS NOT(v0.c1)))+(0.044172733274880804))) ORDER BY ((((((((highlight(v0.c1, v0.c2, v0.c0, v0.c2))AND(v0.c0 COLLATE RTRIM)))OR(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END)))AND(((v0.c1)==(v0.c0)))))OR(((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE ((CASE WHEN v0.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c0 END IN ()));
SELECT * FROM v0, vt1 WHERE ((((CASE WHEN v0.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c0 END IN ()))AND((- (vt1.c0)))));
SELECT ALL * FROM v0, vt1 WHERE ((CASE WHEN v0.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c0 END IN ()));
SELECT * FROM v0, vt1 WHERE ((((CASE WHEN v0.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c0 END IN ()))AND((- (vt1.c0)))));
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)!=(vt1.c1)), ((((((vt1.c1)AND(vt1.c1)))OR('|')))OR(vt1.c1)))) AND ((((x'') NOTNULL), (~ (vt1.c1))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)<>(vt1.c1)), ((((((vt1.c1)AND(vt1.c1)))OR('|')))OR(vt1.c1)))) AND ((((x'') NOTNULL), (~ (vt1.c1))))))AND(CAST((vt1.c1 IN (NULL, vt1.c0)) AS NUMERIC)))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c1 WHEN NULL THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END) IS TRUE) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE ((((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)!=(vt1.c1)), ((((((vt1.c1)AND(vt1.c1)))OR('|')))OR(vt1.c1)))) AND ((((x'') NOTNULL), (~ (vt1.c1))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)<>(vt1.c1)), ((((((vt1.c1)AND(vt1.c1)))OR('|')))OR(vt1.c1)))) AND ((((x'') NOTNULL), (~ (vt1.c1))))))AND(CAST((vt1.c1 IN (NULL, vt1.c0)) AS NUMERIC)))) ORDER BY ((CASE WHEN vt1.c0 THEN vt1.c1 WHEN NULL THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END) IS TRUE) ASC  NULLS LAST;
SELECT COUNT(*) FROM v0 WHERE (((v0.c1) BETWEEN ((('0.5718771436063474') BETWEEN (v0.c0) AND (x''))) AND (v0.c2 COLLATE NOCASE))) ORDER BY ((((v0.c0)&(v0.c0)))IS NOT(((v0.c1) ISNULL))) DESC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c1) BETWEEN ((('0.5718771436063474') BETWEEN (v0.c0) AND (x''))) AND (v0.c2 COLLATE NOCASE))) ORDER BY ((((v0.c0)&(v0.c0)))IS NOT(((v0.c1) ISNULL))) DESC LIMIT 0X0;
SELECT MIN(vt1.c1) FROM vt1 WHERE ((((((- (0.7393395637337571)))OR(((x'9e')|(vt1.c0)))))OR(((vt1.c0) ISNULL))));
SELECT MIN(vt1.c1) FROM vt1 WHERE ((((((- (0.7393395637337571)))OR(((x'9e')|(vt1.c0)))))OR(((vt1.c0) ISNULL)))) LIMIT 1 INTERSECT SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((((((vt1.c1)OR(x'bb')))OR(vt1.c1))) BETWEEN (((vt1.c1)<=(vt1.c1))) AND ((vt1.c1 IN (vt1.c0, vt1.c1))))) LIMIT 1;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((json_insert(vt1.c0, 0.9872397124392178, vt1.c1))<=((- (vt1.c0))))) ORDER BY (((~ (vt1.c0)))||(((vt1.c1) NOTNULL)))  NULLS FIRST, (((vt1.c1, vt1.c1)) NOT BETWEEN (((((vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0, vt1.c1)) AND ((0.9656658588715593, vt1.c1, vt1.c0))), (((vt1.c0))<((0xffffffffef3ac131))))) AND ((((vt1.c0) NOTNULL), ((vt1.c1)*(vt1.c0)))))  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((((json_insert(vt1.c0, 0.9872397124392178, vt1.c1))<((- (vt1.c0)))))AND(LIKELIHOOD((vt1.c1 IN (vt1.c1)), 0.8616674256868976)))) ORDER BY (((vt1.c0) ISNULL) IN (((vt1.c1)<<('1904467891')))) ASC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (ROUND(ABS(0xffffffffd6596e7a), ((0.5148187808238621) NOTNULL))) ORDER BY (((vt1.c0) ISNULL) IN (((vt1.c1)<<('1904467891')))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (TRIM(CASE WHEN '' THEN vt1.c0 WHEN 0.661057097266126 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN NULL THEN vt1.c0 WHEN v0.c0 THEN vt1.c0 END));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((TRIM(CASE WHEN '' THEN vt1.c0 WHEN 0.661057097266126 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN NULL THEN vt1.c0 WHEN v0.c0 THEN vt1.c0 END))AND(((((CAST(vt1.c1 AS BLOB))AND(CAST(v0.c1 AS INTEGER))))OR(v0.c0))))) ORDER BY ((((((((((vt1.c0)AND(v0.c0)))OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))IS(CASE vt1.c1  WHEN x'' THEN vt1.c1 ELSE vt1.c1 END)) DESC  NULLS FIRST LIMIT 0x1;
SELECT COUNT(*) FROM vt1, v0 WHERE ('0.7644881130975221');
SELECT COUNT(*) FROM vt1, v0 WHERE ('0.7644881130975221') INTERSECT SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((((v0.c2)) BETWEEN ((((vt1.c1)>(v0.c2)))) AND ((vt1.c0 COLLATE RTRIM))));
SELECT MAX(v0.c0) FROM v0 WHERE ((((((((((v0.c2 IN ()))AND('o8P')))OR(CASE v0.c1  WHEN x'b91a' THEN x'74e411' END)))OR(((v0.c0)AND(x'9039')))))OR(json_array(v0.c1, v0.c0, v0.c1)))) ORDER BY ((v0.c0 IN (v0.c0, '#5')) IN ()) ASC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE ((((((((((v0.c2 IN ()))AND('o8P')))OR(CASE v0.c1  WHEN x'b91a' THEN x'74e411' END)))OR(((v0.c0)AND(x'9039')))))OR(json_array(v0.c1, v0.c0, v0.c1)))) ORDER BY (((((- (v0.c2)))OR(v0.c0)))AND(v0.c1 COLLATE BINARY)) DESC  NULLS FIRST, IFNULL(DISTINCT 0.23522499483546633, v0.c2), (((((v0.c1)<<(v0.c0))))>((CAST(v0.c1 AS INTEGER))))  NULLS FIRST LIMIT 0x5 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((CAST(v0.c1 AS BLOB)) NOT BETWEEN (((((((v0.c0)AND(v0.c0)))AND(v0.c1)))OR(v0.c2))) AND (((v0.c0) ISNULL)))) ORDER BY (((((- (v0.c2)))OR(v0.c0)))AND(v0.c1 COLLATE BINARY)) DESC  NULLS FIRST, IFNULL(DISTINCT 0.23522499483546633, v0.c2), (((((v0.c1)<<(v0.c0))))>((CAST(v0.c1 AS INTEGER))))  NULLS FIRST LIMIT 5;
SELECT MIN(v0.c0) FROM vt1, v0 WHERE (((UPPER(v0.c0))IS(CASE v0.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN 0xffffffff953d1c0a ELSE vt1.c1 END))) ORDER BY json_remove(vt1.c0 COLLATE NOCASE, ((v0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c1)));
SELECT DISTINCT MIN(v0.c0) FROM vt1, v0 WHERE (((((UPPER(v0.c0))IS(CASE v0.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN -1791157238 ELSE vt1.c1 END)))AND(((((~ (vt1.c1)), (((v0.c1, v0.c1, vt1.c0))>((vt1.c0, vt1.c1, vt1.c1))), CASE WHEN v0.c2 THEN v0.c2 END, ((((vt1.c1)AND(vt1.c0)))OR(vt1.c0))))==((((((((vt1.c1)OR(vt1.c1)))OR(x'')))AND(v0.c1)), CASE ''  WHEN v0.c1 THEN vt1.c0 ELSE vt1.c1 END, (((vt1.c0, vt1.c0))<((vt1.c0, v0.c0))), ((((((((677741992)OR(vt1.c1)))AND(vt1.c0)))OR(v0.c0)))OR(v0.c2)))))))) ORDER BY json_remove(vt1.c0 COLLATE NOCASE, ((v0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c1))) INTERSECT SELECT DISTINCT MIN(v0.c0) FROM vt1, v0 NOT INDEXED WHERE (((((v0.c1)*(vt1.c1))) ISNULL)) ORDER BY json_remove(vt1.c0 COLLATE NOCASE, ((v0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c1)));
SELECT MAX(v0.c0) FROM v0, vt1 WHERE ((~ (CAST(v0.c1 AS TEXT)))) ORDER BY 0.9290354608918205 ASC;
SELECT MAX(v0.c0) FROM v0, vt1 WHERE ((((~ (CAST(v0.c1 AS TEXT))))AND(((v0.c0 COLLATE NOCASE)AND(((vt1.c1)>(v0.c2))))))) ORDER BY 0.9290354608918205 ASC;
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (COALESCE(x'a85e', ((vt1.c0)||(vt1.c1)), CAST(vt1.c1 AS TEXT), v0.c2));
SELECT DISTINCT MIN(vt1.c1) FROM v0, vt1 WHERE (COALESCE(x'a85e', ((vt1.c0)||(vt1.c1)), CAST(vt1.c1 AS TEXT), v0.c2));
SELECT COUNT(*) FROM vt1 WHERE (CAST(((vt1.c1)|('-1681891871')) AS REAL));
SELECT ALL COUNT(*) FROM vt1 WHERE (CAST(((vt1.c1)|('-1681891871')) AS REAL)) ORDER BY ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)LIKE(((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))AND(vt1.c1)))), ((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN 'l' THEN NULL END)==(LIKELY(DISTINCT vt1.c0)))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0 WHERE (v0.c2 COLLATE NOCASE);
SELECT ALL * FROM v0 WHERE (((v0.c2 COLLATE NOCASE)AND((((NULLIF(v0.c0, v0.c1), ((v0.c0) NOTNULL), ((v0.c1)==(v0.c2))))<((CASE WHEN v0.c1 THEN v0.c2 END, ((v0.c2) BETWEEN (v0.c1) AND (v0.c1)), CASE v0.c2  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)))))) ORDER BY CASE ''  WHEN v0.c1 COLLATE BINARY THEN ((v0.c0)-(v0.c2)) WHEN (((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN 0Xffffffffaa9f1038 THEN x'' WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END END LIMIT 0x1 INTERSECT SELECT ALL * FROM v0 WHERE (x'') ORDER BY CASE ''  WHEN v0.c1 COLLATE BINARY THEN ((v0.c0)-(v0.c2)) WHEN (((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN 0Xffffffffaa9f1038 THEN x'' WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END END LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (v0.c2 COLLATE NOCASE);
SELECT ALL * FROM v0 WHERE (((v0.c2 COLLATE NOCASE)AND((((NULLIF(v0.c0, v0.c1), ((v0.c0) NOTNULL), ((v0.c1)==(v0.c2))))<((CASE WHEN v0.c1 THEN v0.c2 END, ((v0.c2) BETWEEN (v0.c1) AND (v0.c1)), CASE v0.c2  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)))))) ORDER BY CASE ''  WHEN v0.c1 COLLATE BINARY THEN ((v0.c0)-(v0.c2)) WHEN (((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN 0Xffffffffaa9f1038 THEN x'' WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END END LIMIT 0x1 INTERSECT SELECT ALL * FROM v0 WHERE (x'') ORDER BY CASE ''  WHEN v0.c1 COLLATE BINARY THEN ((v0.c0)-(v0.c2)) WHEN (((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN 0Xffffffffaa9f1038 THEN x'' WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END END LIMIT 0x1;
SELECT MAX(v0.c1) FROM v0, vt1 WHERE (CASE WHEN (((v0.c2, v0.c0, vt1.c0))==((0.992908516488977, vt1.c1, vt1.c0))) THEN NULL WHEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN x'9c' WHEN vt1.c1 THEN v0.c0 ELSE 0X6fcf30e2 END THEN ((vt1.c1)|(NULL)) ELSE v0.c0 COLLATE RTRIM END);
SELECT ALL MAX(v0.c1) FROM v0, vt1 WHERE (CASE WHEN (((v0.c2, v0.c0, vt1.c0))=((0.992908516488977, vt1.c1, vt1.c0))) THEN NULL WHEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN x'9c' WHEN vt1.c1 THEN v0.c0 ELSE 1875849442 END THEN ((vt1.c1)|(NULL)) ELSE v0.c0 COLLATE RTRIM END) LIMIT 0 INTERSECT SELECT ALL MAX(v0.c1) FROM v0, vt1 WHERE ((((v0.c0, vt1.c0, v0.c1)) BETWEEN ((vt1.c1, v0.c2, v0.c2)) AND (('0.7425852574766163', '-1310000908', vt1.c1))) COLLATE NOCASE) LIMIT 0x0;
SELECT MAX(vt1.c1) FROM vt1 WHERE (']');
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (']') ORDER BY CAST(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 END AS INTEGER) DESC;
SELECT * FROM v0 WHERE ((((v0.c0 IN ())) NOTNULL));
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c0 IN ())) NOTNULL))AND('1322070102'))) LIMIT 0;
SELECT * FROM v0 WHERE ((((v0.c0 IN ())) NOTNULL));
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c0 IN ())) NOTNULL))AND('1322070102'))) LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (CAST(((((((((((v0.c2)AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(vt1.c1)) AS NUMERIC));
SELECT ALL * FROM vt1, v0 WHERE (((CAST(((((((((((v0.c2)AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(vt1.c1)) AS NUMERIC))AND(x''))) ORDER BY ((((((vt1.c0)OR(0Xffffffffa8a7d4e5)))OR(v0.c2)))OR(v0.c2)) COLLATE RTRIM, (('1016608984') ISNULL) LIMIT 0X2 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (x'') ORDER BY ((((((vt1.c0)OR(-1465395995)))OR(v0.c2)))OR(v0.c2)) COLLATE RTRIM, (('1016608984') ISNULL) LIMIT 2;
SELECT ALL * FROM vt1, v0 WHERE (CAST(((((((((((v0.c2)AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(vt1.c1)) AS NUMERIC));
SELECT ALL * FROM vt1, v0 WHERE (((CAST(((((((((((v0.c2)AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(vt1.c1)) AS NUMERIC))AND(x''))) ORDER BY ((((((vt1.c0)OR(0Xffffffffa8a7d4e5)))OR(v0.c2)))OR(v0.c2)) COLLATE RTRIM, (('1016608984') ISNULL) LIMIT 0X2 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (x'') ORDER BY ((((((vt1.c0)OR(-1465395995)))OR(v0.c2)))OR(v0.c2)) COLLATE RTRIM, (('1016608984') ISNULL) LIMIT 2;
SELECT * FROM v0, vt1 WHERE ((((v0.c0)) NOT BETWEEN (((v0.c1 IN ()))) AND (((+ (v0.c0))))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((v0.c0)) NOT BETWEEN (((v0.c1 IN ()))) AND (((+ (v0.c0)))))) ORDER BY CASE (((v0.c1, v0.c0, vt1.c1, v0.c1, v0.c0, v0.c2, v0.c1)) NOT BETWEEN ((v0.c0, vt1.c0, vt1.c1, v0.c0, v0.c1, v0.c1, v0.c1)) AND ((v0.c1, v0.c2, v0.c0, vt1.c0, x'', v0.c1, v0.c0)))  WHEN vt1.c1 COLLATE BINARY THEN CASE WHEN v0.c2 THEN v0.c2 END WHEN (((v0.c0))=((v0.c0))) THEN (+ (NULL)) WHEN ((((v0.c0)OR(v0.c1)))OR(v0.c0)) THEN ((((((vt1.c0)OR(v0.c2)))OR(vt1.c0)))AND(v0.c0)) END  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((v0.c0)) NOT BETWEEN (((v0.c1 IN ()))) AND (((+ (v0.c0))))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((v0.c0)) NOT BETWEEN (((v0.c1 IN ()))) AND (((+ (v0.c0)))))) ORDER BY CASE (((v0.c1, v0.c0, vt1.c1, v0.c1, v0.c0, v0.c2, v0.c1)) NOT BETWEEN ((v0.c0, vt1.c0, vt1.c1, v0.c0, v0.c1, v0.c1, v0.c1)) AND ((v0.c1, v0.c2, v0.c0, vt1.c0, x'', v0.c1, v0.c0)))  WHEN vt1.c1 COLLATE BINARY THEN CASE WHEN v0.c2 THEN v0.c2 END WHEN (((v0.c0))=((v0.c0))) THEN (+ (NULL)) WHEN ((((v0.c0)OR(v0.c1)))OR(v0.c0)) THEN ((((((vt1.c0)OR(v0.c2)))OR(vt1.c0)))AND(v0.c0)) END  NULLS LAST;
SELECT * FROM vt1 WHERE (CASE ((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))  WHEN ((vt1.c1)||(vt1.c0)) THEN (vt1.c1 IN (vt1.c0)) END) ORDER BY (vt1.c1 IN ()) COLLATE NOCASE ASC, ((((((((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)))OR(((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(CASE WHEN vt1.c1 THEN vt1.c1 END)))OR((((x'', vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c1))))))AND((('0.7654291205671764') NOT BETWEEN (vt1.c0) AND (vt1.c1))))  NULLS FIRST;
SELECT * FROM vt1 WHERE (CASE ((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))  WHEN ((vt1.c1)||(vt1.c0)) THEN (vt1.c1 IN (vt1.c0)) END) ORDER BY ('-624547642' IN ())  NULLS LAST, '%uf[OKL' ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1 WHERE (CASE WHEN (vt1.c1 IN ()) THEN (((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c1))) WHEN CASE vt1.c1  WHEN 0x2dcc1aa0 THEN vt1.c1 ELSE vt1.c0 END THEN ((vt1.c1)<(vt1.c0)) WHEN vt1.c1 THEN CAST(vt1.c0 AS INTEGER) ELSE (vt1.c1 IN (vt1.c0, vt1.c0, vt1.c1)) END) ORDER BY ('-624547642' IN ())  NULLS LAST, '%uf[OKL' ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (CASE ((((vt1.c1)AND(vt1.c1)))OR(vt1.c0))  WHEN ((vt1.c1)||(vt1.c0)) THEN (vt1.c1 IN (vt1.c0)) END) ORDER BY (vt1.c1 IN ()) COLLATE NOCASE ASC, ((((((((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)))OR(((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))AND(CASE WHEN vt1.c1 THEN vt1.c1 END)))OR((((x'', vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c1))))))AND((('0.7654291205671764') NOT BETWEEN (vt1.c0) AND (vt1.c1))))  NULLS FIRST;
SELECT MAX(v0.c2) FROM v0 WHERE (((((x'')AND(((v0.c1) IS FALSE))))AND(v0.c0 COLLATE RTRIM))) ORDER BY CAST((((v0.c0))<=((v0.c2))) AS REAL) ASC, LIKE(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)), (((v0.c1, v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2, v0.c1)) AND ((NULL, v0.c0, v0.c1))), '-');
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((((x'')AND(((v0.c1) IS FALSE))))AND(v0.c0 COLLATE RTRIM)))AND((((((v0.c2 IN ()))OR(x'b7b0')))AND((v0.c0 IN (v0.c1, 0.798191579393185, v0.c2, v0.c1))))))) ORDER BY (((v0.c0 IN ())) IS TRUE), x'bd', (NOT (((v0.c2)AND(v0.c0)))) DESC INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (UPPER(((((v0.c1)OR(x'96')))AND(v0.c1)))) ORDER BY (((v0.c0 IN ())) IS TRUE), x'bd', (NOT (((v0.c2)AND(v0.c0)))) DESC;
SELECT ALL COUNT(*) FROM vt1 INNER JOIN v0 ON (((v0.c2, CAST(vt1.c1 AS REAL), (((0x7a33be21)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))), ((v0.c1)<(v0.c0))))=(('[b>', ((vt1.c1)IS(v0.c2)), v0.c0, json_remove(v0.c1, vt1.c1, vt1.c1, '32506213')))) WHERE ((- (v0.c2 COLLATE BINARY))) ORDER BY (((((v0.c0, v0.c1, v0.c1, v0.c1, v0.c2))>((vt1.c0, v0.c1, vt1.c1, v0.c0, v0.c1)))) BETWEEN (((vt1.c1)|(v0.c1))) AND (((((((v0.c1)OR(v0.c1)))OR(v0.c2)))AND(vt1.c0)))), (((((v0.c1) IS TRUE)))<=((((v0.c2) BETWEEN (v0.c2) AND (v0.c1))))), NULL DESC;
SELECT DISTINCT COUNT(*) FROM vt1 INNER JOIN v0 ON (((v0.c2, CAST(vt1.c1 AS REAL), (((0X7a33be21)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))), ((v0.c1)<(v0.c0))))=(('[b>', ((vt1.c1)IS(v0.c2)), v0.c0, json_remove(v0.c1, vt1.c1, vt1.c1, '32506213')))) WHERE ((((- (v0.c2 COLLATE BINARY)))AND(TRIM((- (v0.c2)))))) ORDER BY ((-6.37031859E8)<<(((vt1.c1) IS TRUE))), CASE 0.9673047764272066  WHEN ((vt1.c0) BETWEEN (vt1.c1) AND (v0.c0)) THEN ((((vt1.c0)OR(v0.c1)))OR(v0.c1)) WHEN 0.8680590165866197 THEN (((v0.c1, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c0, v0.c1))) WHEN ((v0.c2)IS(vt1.c1)) THEN (vt1.c0 IN (NULL)) END DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (UPPER(0.4058873798011806) COLLATE RTRIM) ORDER BY (((((v0.c2)OR(v0.c2))))<((CAST(v0.c2 AS BLOB)))) DESC;
SELECT * FROM v0 WHERE (UPPER(0.4058873798011806) COLLATE RTRIM) ORDER BY (((((v0.c2)OR(v0.c2))))<((CAST(v0.c2 AS BLOB)))) DESC INTERSECT SELECT ALL * FROM v0 WHERE (CAST((((v0.c0))<=((v0.c1))) AS TEXT)) ORDER BY (((((v0.c2)OR(v0.c2))))<((CAST(v0.c2 AS BLOB)))) DESC;
SELECT ALL * FROM v0 WHERE (UPPER(0.4058873798011806) COLLATE RTRIM) ORDER BY (((((v0.c2)OR(v0.c2))))<((CAST(v0.c2 AS BLOB)))) DESC;
SELECT * FROM v0 WHERE (UPPER(0.4058873798011806) COLLATE RTRIM) ORDER BY (((((v0.c2)OR(v0.c2))))<((CAST(v0.c2 AS BLOB)))) DESC INTERSECT SELECT ALL * FROM v0 WHERE (CAST((((v0.c0))<=((v0.c1))) AS TEXT)) ORDER BY (((((v0.c2)OR(v0.c2))))<((CAST(v0.c2 AS BLOB)))) DESC;
SELECT * FROM v0, vt1 WHERE (vt1.c1 COLLATE RTRIM) ORDER BY ((((((CAST(v0.c2 AS TEXT))AND((vt1.c1 IN (v0.c1, '-1764330280')))))OR(((((((vt1.c0)OR(v0.c0)))OR(vt1.c0)))AND(v0.c2)))))AND((((vt1.c0))>((vt1.c1)))))  NULLS LAST, (NOT (((v0.c2)<=(v0.c2))))  NULLS LAST, (((v0.c2 IN ('2')))AND(((vt1.c1) NOT NULL))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE (((vt1.c1 COLLATE RTRIM)AND(((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))>(((v0.c2)GLOB(vt1.c1))))))) ORDER BY (((((vt1.c1, v0.c2))==((v0.c2, v0.c1)))) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c1) BETWEEN (v0.c2) AND (x'')))) DESC, v0.c0 ASC  NULLS FIRST LIMIT 1;
SELECT * FROM v0, vt1 WHERE (vt1.c1 COLLATE RTRIM) ORDER BY ((((((CAST(v0.c2 AS TEXT))AND((vt1.c1 IN (v0.c1, '-1764330280')))))OR(((((((vt1.c0)OR(v0.c0)))OR(vt1.c0)))AND(v0.c2)))))AND((((vt1.c0))>((vt1.c1)))))  NULLS LAST, (NOT (((v0.c2)<=(v0.c2))))  NULLS LAST, (((v0.c2 IN ('2')))AND(((vt1.c1) NOT NULL))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE (((vt1.c1 COLLATE RTRIM)AND(((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))>(((v0.c2)GLOB(vt1.c1))))))) ORDER BY (((((vt1.c1, v0.c2))==((v0.c2, v0.c1)))) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c1) BETWEEN (v0.c2) AND (x'')))) DESC, v0.c0 ASC  NULLS FIRST LIMIT 1;
SELECT MAX(v0.c0) FROM v0 WHERE ((((((v0.c1, v0.c0, v0.c1, v0.c0)) BETWEEN ((v0.c0, x'', v0.c1, v0.c2)) AND ((v0.c2, v0.c2, v0.c0, v0.c1)))) NOT BETWEEN (((v0.c1) ISNULL)) AND ((~ (x'547a'))))) ORDER BY (((~ (v0.c1))) IS FALSE)  NULLS LAST, (+ (((NULL) IS FALSE))) DESC, (((json_array_length(v0.c2, v0.c0), ((((((0.7425852574766163)AND(NULL)))AND(v0.c1)))OR(v0.c2)), ((((v0.c0)AND(v0.c2)))AND(v0.c0))))>=((CAST(v0.c0 AS TEXT), ((v0.c0)IS(v0.c2)), (~ (v0.c2))))) ASC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE ((((((v0.c1, v0.c0, v0.c1, v0.c0)) BETWEEN ((v0.c0, x'', v0.c1, v0.c2)) AND ((v0.c2, v0.c2, v0.c0, v0.c1)))) NOT BETWEEN (((v0.c1) ISNULL)) AND ((~ (x'547a'))))) ORDER BY (((~ (v0.c1))) IS FALSE)  NULLS LAST, (+ (((NULL) IS FALSE))) DESC, (((json_array_length(v0.c2, v0.c0), ((((((0.7425852574766163)AND(NULL)))AND(v0.c1)))OR(v0.c2)), ((((v0.c0)AND(v0.c2)))AND(v0.c0))))>=((CAST(v0.c0 AS TEXT), ((v0.c0)IS(v0.c2)), (~ (v0.c2))))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((((v0.c2) NOT NULL))!=(NULL))) ORDER BY (((~ (v0.c1))) IS FALSE)  NULLS LAST, (+ (((NULL) IS FALSE))) DESC, (((json_array_length(v0.c2, v0.c0), ((((((0.7425852574766163)AND(NULL)))AND(v0.c1)))OR(v0.c2)), ((((v0.c0)AND(v0.c2)))AND(v0.c0))))>=((CAST(v0.c0 AS TEXT), ((v0.c0)IS(v0.c2)), (~ (v0.c2))))) ASC  NULLS FIRST;
SELECT ALL MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON ((~ (vt1.c1)) IN ()) WHERE (((CASE WHEN '-1' THEN v0.c0 WHEN vt1.c0 THEN v0.c0 END)IS NOT(((vt1.c0) NOT BETWEEN (v0.c0) AND (vt1.c1))))) ORDER BY (((('pT~,0nUR')-(v0.c1))) ISNULL) DESC;
SELECT ALL MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON ((~ (vt1.c1)) IN ()) WHERE (((CASE WHEN '-1' THEN v0.c0 WHEN vt1.c0 THEN v0.c0 END)IS NOT(((vt1.c0) NOT BETWEEN (v0.c0) AND (vt1.c1))))) ORDER BY (((('pT~,0nUR')-(v0.c1))) ISNULL) DESC INTERSECT SELECT MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON ((~ (vt1.c1)) IN ()) WHERE ((((v0.c2)) NOT BETWEEN ((vt1.c0)) AND ((((v0.c2)||(vt1.c1)))))) ORDER BY (((('pT~,0nUR')-(v0.c1))) ISNULL) DESC;
SELECT MIN(v0.c2) FROM v0, vt1 WHERE ((v0.c0 IN (v0.c2, vt1.c1)) COLLATE RTRIM);
SELECT DISTINCT MIN(v0.c2) FROM v0, vt1 WHERE ((((v0.c0 IN (v0.c2)) COLLATE RTRIM)AND(((((v0.c2)AND(vt1.c0)))GLOB((- (v0.c0))))))) ORDER BY CASE vt1.c0  WHEN ((v0.c1) IS FALSE) THEN ((vt1.c1)IS NOT(v0.c1)) WHEN CAST(v0.c0 AS BLOB) THEN HEX(v0.c2) END LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM v0, vt1 WHERE (((CASE vt1.c1  WHEN v0.c1 THEN vt1.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END)>>(((v0.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY CASE vt1.c0  WHEN ((v0.c1) IS FALSE) THEN ((vt1.c1)IS NOT(v0.c1)) WHEN CAST(v0.c0 AS BLOB) THEN HEX(v0.c2) END LIMIT 0x0;
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE ((~ (v0.c1 COLLATE NOCASE))) ORDER BY ((CAST(v0.c1 AS TEXT))%('-5307363')) DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE ((~ (v0.c1 COLLATE NOCASE))) ORDER BY ((CAST(v0.c1 AS TEXT))%('-5307363')) DESC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((vt1.c1)AND(vt1.c0)) COLLATE BINARY);
SELECT * FROM v0, vt1 WHERE (((vt1.c1)AND(vt1.c0)) COLLATE BINARY) LIMIT 0x1 INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2 COLLATE NOCASE, ((((v0.c1)OR(v0.c1)))OR(v0.c2)))))) LIMIT 1;
SELECT * FROM v0, vt1 WHERE (((vt1.c1)AND(vt1.c0)) COLLATE BINARY);
SELECT * FROM v0, vt1 WHERE (((vt1.c1)AND(vt1.c0)) COLLATE BINARY) LIMIT 0x1 INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2 COLLATE NOCASE, ((((v0.c1)OR(v0.c1)))OR(v0.c2)))))) LIMIT 1;
SELECT ALL COUNT(*) FROM vt1 WHERE (((vt1.c1 COLLATE NOCASE)<((((vt1.c0))>=((vt1.c0)))))) ORDER BY '-1722406624' COLLATE RTRIM ASC  NULLS FIRST, COALESCE((vt1.c0 IN ()), LIKELIHOOD(DISTINCT vt1.c1, vt1.c1), (vt1.c1 IN (vt1.c0)), (vt1.c0 IN (vt1.c1, vt1.c0)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((vt1.c1 COLLATE NOCASE)<((((vt1.c0))>=((vt1.c0)))))) ORDER BY '-1722406624' COLLATE RTRIM ASC  NULLS FIRST, COALESCE((vt1.c0 IN ()), LIKELIHOOD(DISTINCT vt1.c1, vt1.c1), (vt1.c1 IN (vt1.c0)), (vt1.c0 IN (vt1.c1, vt1.c0)))  NULLS FIRST LIMIT 2;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((vt1.c1) BETWEEN (vt1.c1) AND (NULL)) COLLATE BINARY);
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((vt1.c1) BETWEEN (vt1.c1) AND (NULL)) COLLATE BINARY) ORDER BY ((((x'')LIKE(vt1.c0)))IS NOT(ROUND(vt1.c1, vt1.c1)))  NULLS FIRST INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (TRIM(((vt1.c0) NOTNULL), CAST(vt1.c0 AS BLOB))) ORDER BY ((((x'')LIKE(vt1.c0)))IS NOT(ROUND(vt1.c1, vt1.c1)))  NULLS FIRST;
SELECT MIN(v0.c1) FROM v0 WHERE (((((v0.c1)*(v0.c0))) NOT BETWEEN (v0.c1 COLLATE BINARY) AND ((v0.c2 IN ()))));
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((((((v0.c1)*(v0.c0))) NOT BETWEEN (v0.c1 COLLATE BINARY) AND ((v0.c2 IN ()))))AND(((v0.c2 COLLATE RTRIM) NOT BETWEEN (((v0.c2)&(v0.c2))) AND (((((((v0.c2)AND(v0.c0)))OR(v0.c2)))AND(v0.c0))))))) ORDER BY v0.c2  NULLS LAST, v0.c2 LIMIT 1;
SELECT COUNT(*) FROM vt1 WHERE (json_object(((((vt1.c0)AND(vt1.c1)))OR(NULL)), CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END, (((vt1.c0))>=((vt1.c1))))) ORDER BY (~ (json_extract(vt1.c1, 0.31503422800828995, vt1.c0))) ASC, (((vt1.c1, vt1.c0, vt1.c0, vt1.c0)) BETWEEN (((~ (vt1.c0)), (vt1.c1 IN ()), ((vt1.c0)/(vt1.c1)), vt1.c1 COLLATE BINARY)) AND ((((vt1.c0)IS(vt1.c0)), ((vt1.c1) NOT NULL), (NOT (vt1.c0)), CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 END)));
SELECT ALL COUNT(*) FROM vt1 WHERE (((json_object(((((vt1.c0)AND(vt1.c1)))OR(NULL)), CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END, (((vt1.c0))>=((vt1.c1)))))AND(vt1.c0))) ORDER BY 0.5010369149790679 DESC LIMIT 0X1 INTERSECT SELECT COUNT(*) FROM vt1 WHERE (((((((((((CASE WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END)OR(NULLIF(vt1.c0, vt1.c0))))OR(NULL)))OR(0Xffffffffd921d480)))AND(((vt1.c0)>=('2097546374')))))OR((((-2.081089654E9, vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, 0x6813abe6, vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c1)))))) ORDER BY 0.5010369149790679 DESC LIMIT 1;
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (DATE(vt1.c1, v0.c2, v0.c0, vt1.c0, vt1.c1, v0.c2) COLLATE NOCASE) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))) NOT BETWEEN (((v0.c2)<(v0.c0))) AND (((v0.c1)==(vt1.c0)))) DESC, ((((((((((((v0.c0)AND(vt1.c1)))AND(vt1.c0)))OR(v0.c0)))OR(vt1.c0)))OR(v0.c2)))IS(0.4748817197145516)) DESC;
SELECT MAX(v0.c2) FROM vt1, v0 WHERE (((DATE(vt1.c1, v0.c2, v0.c0, vt1.c0, vt1.c1, v0.c2) COLLATE NOCASE)AND((('-1017404822') BETWEEN (v0.c1) AND (vt1.c1)) COLLATE RTRIM))) ORDER BY ((NULL) NOT BETWEEN (CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END) AND (CASE WHEN v0.c0 THEN 'ﷂB\Sg|aY}' END)) LIMIT 0X1;
SELECT COUNT(*) FROM v0, vt1 WHERE (((load_extension(v0.c1))<=(CAST(v0.c2 AS BLOB))));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((load_extension(v0.c1))<(CAST(v0.c2 AS BLOB)))) LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((((+ (v0.c0))) NOT BETWEEN (vt1.c1 COLLATE RTRIM) AND (NULL))) LIMIT 0X0;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (v0.c0) ORDER BY ((((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c1))), NULL, 0.6037559285542189))=(('768350880', ((v0.c0)-(v0.c1)), (~ (v0.c2))))) ASC  NULLS FIRST;
SELECT MAX(v0.c2) FROM v0 WHERE (((v0.c0)AND((- ((- (v0.c0))))))) ORDER BY ((((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c1))), NULL, 0.6037559285542189))==(('768350880', ((v0.c0)-(v0.c1)), (~ (v0.c2))))) ASC  NULLS FIRST INTERSECT SELECT ALL MAX(v0.c2) FROM v0 WHERE (((((((v0.c0)IS NOT(v0.c1)))AND(754692099)))OR(CAST(v0.c1 AS REAL)))) ORDER BY ((((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c1))), NULL, 0.6037559285542189))=(('768350880', ((v0.c0)-(v0.c1)), (~ (v0.c2))))) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((((((((CAST(v0.c2 AS REAL))OR(v0.c0)))OR((((v0.c0, v0.c0, v0.c2))!=((v0.c0, v0.c0, v0.c0))))))OR(((((v0.c0)AND(v0.c0)))AND(v0.c0)))))OR(v0.c0 COLLATE BINARY)))OR((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c2)))))) ORDER BY CASE ((((((((v0.c0)AND(v0.c0)))AND(v0.c2)))AND(v0.c2)))OR(v0.c1))  WHEN LIKELY(v0.c2) THEN ((((v0.c2)OR(v0.c0)))AND(v0.c2)) WHEN (('0.8745648014066603')>('')) THEN v0.c0 COLLATE RTRIM WHEN ((v0.c2)|(v0.c2)) THEN COALESCE(DISTINCT v0.c1, v0.c2) END DESC, ((v0.c0 COLLATE RTRIM) ISNULL) DESC;
SELECT DISTINCT * FROM v0 WHERE (((((((((((CAST(v0.c2 AS REAL))OR(v0.c0)))OR((((v0.c0, v0.c0, v0.c2))!=((v0.c0, v0.c0, v0.c0))))))OR(((((v0.c0)AND(v0.c0)))AND(v0.c0)))))OR(v0.c0 COLLATE BINARY)))OR((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c2)))))) ORDER BY (((v0.c0, v0.c2, v0.c1, v0.c1)) BETWEEN (((((v0.c2))>=((v0.c1))), ((v0.c2)LIKE(v0.c2)), 0.8349958936058847, CASE v0.c2  WHEN v0.c1 THEN 3.05180856E8 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END)) AND ((((v0.c0) IS FALSE), (~ (v0.c0)), (v0.c1 IN (v0.c1)), (- (v0.c2))))) ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((((((((CAST(v0.c2 AS REAL))OR(v0.c0)))OR((((v0.c0, v0.c0, v0.c2))!=((v0.c0, v0.c0, v0.c0))))))OR(((((v0.c0)AND(v0.c0)))AND(v0.c0)))))OR(v0.c0 COLLATE BINARY)))OR((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c2)))))) ORDER BY CASE ((((((((v0.c0)AND(v0.c0)))AND(v0.c2)))AND(v0.c2)))OR(v0.c1))  WHEN LIKELY(v0.c2) THEN ((((v0.c2)OR(v0.c0)))AND(v0.c2)) WHEN (('0.8745648014066603')>('')) THEN v0.c0 COLLATE RTRIM WHEN ((v0.c2)|(v0.c2)) THEN COALESCE(DISTINCT v0.c1, v0.c2) END DESC, ((v0.c0 COLLATE RTRIM) ISNULL) DESC;
SELECT DISTINCT * FROM v0 WHERE (((((((((((CAST(v0.c2 AS REAL))OR(v0.c0)))OR((((v0.c0, v0.c0, v0.c2))!=((v0.c0, v0.c0, v0.c0))))))OR(((((v0.c0)AND(v0.c0)))AND(v0.c0)))))OR(v0.c0 COLLATE BINARY)))OR((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c2)))))) ORDER BY (((v0.c0, v0.c2, v0.c1, v0.c1)) BETWEEN (((((v0.c2))>=((v0.c1))), ((v0.c2)LIKE(v0.c2)), 0.8349958936058847, CASE v0.c2  WHEN v0.c1 THEN 3.05180856E8 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END)) AND ((((v0.c0) IS FALSE), (~ (v0.c0)), (v0.c1 IN (v0.c1)), (- (v0.c2))))) ASC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (((((v0.c1)==(vt1.c1)))*(x'dd71')));
SELECT DISTINCT * FROM vt1, v0 WHERE (((((((v0.c1)==(vt1.c1)))*(x'dd71')))AND(NULL))) ORDER BY ((vt1.c0)>>(vt1.c1)) COLLATE RTRIM DESC INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((((v0.c0) NOTNULL)) ISNULL)) ORDER BY ((vt1.c0)>>(vt1.c1)) COLLATE RTRIM DESC;
SELECT * FROM vt1, v0 WHERE (((((v0.c1)==(vt1.c1)))*(x'dd71')));
SELECT DISTINCT * FROM vt1, v0 WHERE (((((((v0.c1)==(vt1.c1)))*(x'dd71')))AND(NULL))) ORDER BY ((vt1.c0)>>(vt1.c1)) COLLATE RTRIM DESC INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((((v0.c0) NOTNULL)) ISNULL)) ORDER BY ((vt1.c0)>>(vt1.c1)) COLLATE RTRIM DESC;
SELECT COUNT(*) FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c0) AND (v0.c2))) NOT BETWEEN (v0.c2) AND (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))));
SELECT COUNT(*) FROM v0 WHERE (((((((v0.c1) BETWEEN (v0.c0) AND (v0.c2))) NOT BETWEEN (v0.c2) AND (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))))AND((((((v0.c0, v0.c0, v0.c2)) BETWEEN ((v0.c1, v0.c1, v0.c2)) AND ((v0.c2, v0.c1, v0.c2)))) IS FALSE)))) LIMIT 0x2 INTERSECT SELECT COUNT(*) FROM v0 WHERE ((((v0.c1)!=(v0.c2)) IN (v0.c2 COLLATE BINARY))) LIMIT 2;
SELECT * FROM v0, vt1 WHERE ((((vt1.c1)<=(vt1.c0)) IN (((v0.c2) IS FALSE)))) ORDER BY 0.512211735941076  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE ((((vt1.c1)<(vt1.c0)) IN (((v0.c2) IS FALSE)))) ORDER BY ((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 END)<(((v0.c1) ISNULL)))  NULLS LAST, ((((CASE WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c1 END)OR(CASE WHEN -1.728737727E9 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 ELSE v0.c1 END)))OR(((((vt1.c0)OR(vt1.c1)))OR(v0.c0))))  NULLS FIRST LIMIT 2;
SELECT * FROM v0, vt1 WHERE ((((vt1.c1)<=(vt1.c0)) IN (((v0.c2) IS FALSE)))) ORDER BY 0.512211735941076  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE ((((vt1.c1)<(vt1.c0)) IN (((v0.c2) IS FALSE)))) ORDER BY ((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 END)<(((v0.c1) ISNULL)))  NULLS LAST, ((((CASE WHEN vt1.c0 THEN NULL WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c1 END)OR(CASE WHEN -1.728737727E9 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 ELSE v0.c1 END)))OR(((((vt1.c0)OR(vt1.c1)))OR(v0.c0))))  NULLS FIRST LIMIT 2;
SELECT MAX(v0.c2) FROM v0, vt1 WHERE (((CAST(v0.c2 AS INTEGER)) NOT NULL));
SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE (((CAST(v0.c2 AS INTEGER)) NOT NULL)) LIMIT 0x4 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE (LOWER(v0.c1 COLLATE RTRIM)) LIMIT 4;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE ((+ ((((v0.c0)) BETWEEN ((vt1.c1)) AND ((v0.c0)))))) ORDER BY ((TRIM(DISTINCT vt1.c0))IS(((v0.c2) IS TRUE))) ASC  NULLS LAST, (NOT ((((vt1.c0, v0.c1)) BETWEEN ((v0.c0, vt1.c1)) AND ((v0.c0, v0.c2)))));
SELECT DISTINCT MAX(vt1.c1) FROM vt1, v0 WHERE ((((+ ((((v0.c0)) BETWEEN ((vt1.c1)) AND ((v0.c0))))))AND(CAST(CASE v0.c1  WHEN v0.c0 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 END AS INTEGER)))) ORDER BY ((v0.c0) ISNULL) COLLATE RTRIM DESC;
SELECT ALL * FROM vt1 WHERE ((('') BETWEEN (((vt1.c0)+(vt1.c1))) AND ((vt1.c1 IN ())))) ORDER BY ((((((vt1.c0))=((vt1.c1)))))>((CAST(vt1.c0 AS INTEGER))))  NULLS LAST, ((vt1.c0 IN (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (- (vt1.c1)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (x''))));
SELECT * FROM vt1 WHERE ((('') BETWEEN (((vt1.c0)+(vt1.c1))) AND ((vt1.c1 IN ())))) ORDER BY ((((((vt1.c0))==((vt1.c1)))))>((CAST(vt1.c0 AS INTEGER))))  NULLS LAST, ((vt1.c0 IN (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (- (vt1.c1)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (x'')))) INTERSECT SELECT * FROM vt1 WHERE ((vt1.c1 IN (vt1.c0, vt1.c0)) COLLATE RTRIM) ORDER BY ((((((vt1.c0))=((vt1.c1)))))>((CAST(vt1.c0 AS INTEGER))))  NULLS LAST, ((vt1.c0 IN (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (- (vt1.c1)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (x''))));
SELECT ALL * FROM vt1 WHERE ((('') BETWEEN (((vt1.c0)+(vt1.c1))) AND ((vt1.c1 IN ())))) ORDER BY ((((((vt1.c0))=((vt1.c1)))))>((CAST(vt1.c0 AS INTEGER))))  NULLS LAST, ((vt1.c0 IN (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (- (vt1.c1)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (x''))));
SELECT * FROM vt1 WHERE ((('') BETWEEN (((vt1.c0)+(vt1.c1))) AND ((vt1.c1 IN ())))) ORDER BY ((((((vt1.c0))==((vt1.c1)))))>((CAST(vt1.c0 AS INTEGER))))  NULLS LAST, ((vt1.c0 IN (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (- (vt1.c1)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (x'')))) INTERSECT SELECT * FROM vt1 WHERE ((vt1.c1 IN (vt1.c0, vt1.c0)) COLLATE RTRIM) ORDER BY ((((((vt1.c0))=((vt1.c1)))))>((CAST(vt1.c0 AS INTEGER))))  NULLS LAST, ((vt1.c0 IN (vt1.c0)) IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (- (vt1.c1)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (x''))));
SELECT * FROM vt1 WHERE (CASE WHEN HEX(DISTINCT vt1.c0) THEN CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END WHEN CAST(vt1.c0 AS INTEGER) THEN ((x'49add5fb3fec')AND(vt1.c0)) WHEN ((vt1.c1)/(vt1.c1)) THEN 'B䧜mjJq絊䝓' WHEN CAST(vt1.c1 AS BLOB) THEN (((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1))) END) ORDER BY ((((vt1.c1)OR(vt1.c1))) NOT BETWEEN (((vt1.c1)IS(vt1.c0))) AND (((vt1.c1)%('#-?q4*'))))  NULLS LAST;
SELECT * FROM vt1 WHERE (((CASE WHEN HEX(DISTINCT vt1.c0) THEN CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END WHEN CAST(vt1.c0 AS INTEGER) THEN ((x'49add5fb3fec')AND(vt1.c0)) WHEN ((vt1.c1)/(vt1.c1)) THEN 'B䧜mjJq絊䝓' WHEN CAST(vt1.c1 AS BLOB) THEN (((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1))) END)AND(((((vt1.c1) IS FALSE)) BETWEEN ((((vt1.c0, vt1.c0, vt1.c1)) BETWEEN ((vt1.c0, vt1.c1, 0.30447673666824315)) AND ((vt1.c0, vt1.c1, vt1.c1)))) AND (((vt1.c1)>=(vt1.c0))))))) ORDER BY ((((vt1.c1)OR(vt1.c1))) NOT BETWEEN (((vt1.c1)IS(vt1.c0))) AND (((vt1.c1)%('#-?q4*'))))  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c1 COLLATE BINARY) ORDER BY ((((vt1.c1)OR(vt1.c1))) NOT BETWEEN (((vt1.c1)IS(vt1.c0))) AND (((vt1.c1)%('#-?q4*'))))  NULLS LAST LIMIT 0x1;
SELECT * FROM vt1 WHERE (CASE WHEN HEX(DISTINCT vt1.c0) THEN CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END WHEN CAST(vt1.c0 AS INTEGER) THEN ((x'49add5fb3fec')AND(vt1.c0)) WHEN ((vt1.c1)/(vt1.c1)) THEN 'B䧜mjJq絊䝓' WHEN CAST(vt1.c1 AS BLOB) THEN (((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1))) END) ORDER BY ((((vt1.c1)OR(vt1.c1))) NOT BETWEEN (((vt1.c1)IS(vt1.c0))) AND (((vt1.c1)%('#-?q4*'))))  NULLS LAST;
SELECT * FROM vt1 WHERE (((CASE WHEN HEX(DISTINCT vt1.c0) THEN CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END WHEN CAST(vt1.c0 AS INTEGER) THEN ((x'49add5fb3fec')AND(vt1.c0)) WHEN ((vt1.c1)/(vt1.c1)) THEN 'B䧜mjJq絊䝓' WHEN CAST(vt1.c1 AS BLOB) THEN (((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1))) END)AND(((((vt1.c1) IS FALSE)) BETWEEN ((((vt1.c0, vt1.c0, vt1.c1)) BETWEEN ((vt1.c0, vt1.c1, 0.30447673666824315)) AND ((vt1.c0, vt1.c1, vt1.c1)))) AND (((vt1.c1)>=(vt1.c0))))))) ORDER BY ((((vt1.c1)OR(vt1.c1))) NOT BETWEEN (((vt1.c1)IS(vt1.c0))) AND (((vt1.c1)%('#-?q4*'))))  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c1 COLLATE BINARY) ORDER BY ((((vt1.c1)OR(vt1.c1))) NOT BETWEEN (((vt1.c1)IS(vt1.c0))) AND (((vt1.c1)%('#-?q4*'))))  NULLS LAST LIMIT 0x1;
SELECT MIN(v0.c2) FROM vt1 NATURAL JOIN v0 WHERE (v0.c1) ORDER BY vt1.c1 DESC  NULLS FIRST, ((((((((vt1.c1)OR(vt1.c0)))OR(v0.c2)))AND(vt1.c0)))<<((+ (v0.c2)))), (((vt1.c1)) NOT BETWEEN (((((vt1.c0)) BETWEEN ((v0.c2)) AND ((v0.c2))))) AND ((((v0.c2)%(vt1.c1))))) DESC  NULLS FIRST;
SELECT MIN(v0.c2) FROM vt1 NATURAL JOIN v0 WHERE (((v0.c1)AND((((+ (v0.c0))) NOTNULL)))) ORDER BY vt1.c1 DESC  NULLS FIRST, ((((((((vt1.c1)OR(vt1.c0)))OR(v0.c2)))AND(vt1.c0)))<<((+ (v0.c2)))), (((vt1.c1)) NOT BETWEEN (((((vt1.c0)) BETWEEN ((v0.c2)) AND ((v0.c2))))) AND ((((v0.c2)%(vt1.c1))))) DESC  NULLS FIRST LIMIT 2;
SELECT * FROM v0, vt1 WHERE (NULL);
SELECT ALL * FROM v0, vt1 WHERE (((NULL)AND((- (vt1.c1)) COLLATE NOCASE))) ORDER BY (((v0.c0, x'04', x''))<>((vt1.c1, vt1.c1, v0.c2))) COLLATE BINARY DESC  NULLS LAST LIMIT 1;
SELECT * FROM v0, vt1 WHERE (NULL);
SELECT ALL * FROM v0, vt1 WHERE (((NULL)AND((- (vt1.c1)) COLLATE NOCASE))) ORDER BY (((v0.c0, x'04', x''))<>((vt1.c1, vt1.c1, v0.c2))) COLLATE BINARY DESC  NULLS LAST LIMIT 1;
SELECT * FROM vt1, v0 WHERE ((((('}') NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN (((v0.c1)-(0.7914928458248262))) AND ((NOT (vt1.c1))))) ORDER BY CASE WHEN (vt1.c0 IN ()) THEN CASE WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 END END  NULLS LAST;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((('}') NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN (((v0.c1)-(0.7914928458248262))) AND ((NOT (vt1.c1)))))AND(((v0.c1) BETWEEN ((((vt1.c1, v0.c2, v0.c1)) NOT BETWEEN ((vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c0, v0.c1, v0.c0)))) AND (((vt1.c1) ISNULL)))))) ORDER BY CASE WHEN (vt1.c0 IN ()) THEN CASE WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 END END  NULLS LAST LIMIT 0X0;
SELECT * FROM vt1, v0 WHERE ((((('}') NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN (((v0.c1)-(0.7914928458248262))) AND ((NOT (vt1.c1))))) ORDER BY CASE WHEN (vt1.c0 IN ()) THEN CASE WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 END END  NULLS LAST;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((('}') NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN (((v0.c1)-(0.7914928458248262))) AND ((NOT (vt1.c1)))))AND(((v0.c1) BETWEEN ((((vt1.c1, v0.c2, v0.c1)) NOT BETWEEN ((vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c0, v0.c1, v0.c0)))) AND (((vt1.c1) ISNULL)))))) ORDER BY CASE WHEN (vt1.c0 IN ()) THEN CASE WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 END END  NULLS LAST LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((CASE WHEN vt1.c1 THEN v0.c2 ELSE NULL END)IS(CAST(v0.c1 AS BLOB)))) ORDER BY (((+ (vt1.c0)))GLOB(((v0.c2) ISNULL))) DESC, v0.c0 DESC, ((CASE WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END) BETWEEN (v0.c0 COLLATE NOCASE) AND ((NOT (v0.c1)))) DESC;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((((CASE WHEN vt1.c1 THEN v0.c2 ELSE NULL END)IS(CAST(v0.c1 AS BLOB))))AND(((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)))IS NOT((vt1.c0 IN ())))))) ORDER BY CAST((((('6-XDtR^<s')OR(v0.c2)))OR(v0.c2)) AS BLOB) DESC LIMIT 1;
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE (vt1.c1);
SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (((vt1.c1)AND(-1.30381765E8))) INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE ((((v0.c1)>(vt1.c0)) IN (v0.c2 COLLATE NOCASE, (v0.c0 IN ()), vt1.c0 COLLATE RTRIM)));
SELECT MIN(v0.c2) FROM v0 WHERE ((((v0.c1, v0.c2)) NOT BETWEEN ((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 END, CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END)) AND ((CASE WHEN '>]' THEN v0.c2 WHEN v0.c1 THEN v0.c0 END, CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 END))));
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE ((((((v0.c1, v0.c2)) NOT BETWEEN ((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 END, CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END)) AND ((CASE WHEN '>]' THEN v0.c2 WHEN v0.c1 THEN v0.c0 END, CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 END))))AND(((((((((v0.c1) BETWEEN (v0.c2) AND (v0.c2)))OR(v0.c2 COLLATE RTRIM)))AND(CASE WHEN v0.c2 THEN '0c?AGuY' WHEN v0.c1 THEN v0.c2 END)))AND(v0.c2))))) ORDER BY v0.c2  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1)))==((vt1.c1 IN ())))) ORDER BY v0.c2 COLLATE BINARY;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1)))==((vt1.c1 IN ())))) ORDER BY ((CAST(x'' AS NUMERIC)) NOT NULL) ASC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1)))==((vt1.c1 IN ())))) ORDER BY v0.c2 COLLATE BINARY;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1)))==((vt1.c1 IN ())))) ORDER BY ((CAST(x'' AS NUMERIC)) NOT NULL) ASC  NULLS FIRST;
SELECT MIN(vt1.c1) FROM vt1 WHERE (((vt1.c1)-(((vt1.c0)*(vt1.c1)))));
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((vt1.c1)-(((vt1.c0)*(vt1.c1))))) ORDER BY (((NOT (vt1.c0)))<=(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END)) DESC;
SELECT * FROM vt1 WHERE ((((vt1.c1)IS('1510411652')) IN ()));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1)IS('1510411652')) IN ()))AND(vt1.c0))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c1) NOT BETWEEN ((592399016 IN (vt1.c0))) AND (((vt1.c0)-(vt1.c1))))) LIMIT 0X3;
SELECT * FROM vt1 WHERE ((((vt1.c1)IS('1510411652')) IN ()));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1)IS('1510411652')) IN ()))AND(vt1.c0))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c1) NOT BETWEEN ((592399016 IN (vt1.c0))) AND (((vt1.c0)-(vt1.c1))))) LIMIT 0X3;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((((((((v0.c0)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)))<<(((-1313974863)!=(v0.c1)))) WHERE (((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1))) BETWEEN ((v0.c1 IN (v0.c0))) AND (CAST(vt1.c0 AS INTEGER))));
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON ((((((((v0.c0)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)))<<(((-1313974863)<>(v0.c1)))) WHERE (((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1))) BETWEEN ((v0.c1 IN (v0.c0))) AND (CAST(vt1.c0 AS INTEGER)))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON ((((((((v0.c0)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)))<<(((0Xffffffffb1ae55b1)!=(v0.c1)))) WHERE (((vt1.c1 COLLATE BINARY) IS TRUE)) LIMIT 0X0;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((((((((v0.c0)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)))<<(((-1313974863)!=(v0.c1)))) WHERE (((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1))) BETWEEN ((v0.c1 IN (v0.c0))) AND (CAST(vt1.c0 AS INTEGER))));
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON ((((((((v0.c0)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)))<<(((-1313974863)<>(v0.c1)))) WHERE (((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1))) BETWEEN ((v0.c1 IN (v0.c0))) AND (CAST(vt1.c0 AS INTEGER)))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON ((((((((v0.c0)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)))<<(((0Xffffffffb1ae55b1)!=(v0.c1)))) WHERE (((vt1.c1 COLLATE BINARY) IS TRUE)) LIMIT 0X0;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON CAST(((vt1.c1) ISNULL) AS BLOB) WHERE (((v0.c2) NOTNULL)) ORDER BY (((NOT (vt1.c1)))IS(((v0.c2)-(vt1.c1))))  NULLS FIRST, CAST((((v0.c1, v0.c0))>=((NULL, v0.c0))) AS TEXT) DESC, (((v0.c0, x''))>((v0.c1, ''))) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt1 ON CAST(((vt1.c1) ISNULL) AS BLOB) WHERE (((v0.c2) NOTNULL)) ORDER BY (((NOT (vt1.c1)))IS(((v0.c2)-(vt1.c1))))  NULLS FIRST, CAST((((v0.c1, v0.c0))>=((NULL, v0.c0))) AS TEXT) DESC, (((v0.c0, x''))>((v0.c1, ''))) COLLATE RTRIM DESC  NULLS LAST LIMIT 0;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON CAST(((vt1.c1) ISNULL) AS BLOB) WHERE (((v0.c2) NOTNULL)) ORDER BY (((NOT (vt1.c1)))IS(((v0.c2)-(vt1.c1))))  NULLS FIRST, CAST((((v0.c1, v0.c0))>=((NULL, v0.c0))) AS TEXT) DESC, (((v0.c0, x''))>((v0.c1, ''))) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt1 ON CAST(((vt1.c1) ISNULL) AS BLOB) WHERE (((v0.c2) NOTNULL)) ORDER BY (((NOT (vt1.c1)))IS(((v0.c2)-(vt1.c1))))  NULLS FIRST, CAST((((v0.c1, v0.c0))>=((NULL, v0.c0))) AS TEXT) DESC, (((v0.c0, x''))>((v0.c1, ''))) COLLATE RTRIM DESC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (CAST((((v0.c0, v0.c2, v0.c2))<((v0.c2, v0.c2, v0.c1))) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (CAST((((v0.c0, v0.c2, v0.c2))<((v0.c2, v0.c2, v0.c1))) AS NUMERIC)) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE ((((v0.c2)) NOT BETWEEN ((vt1.c0)) AND ((CASE v0.c1  WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END))));
SELECT ALL MAX(vt1.c0) FROM v0, vt1 WHERE (CASE WHEN '9223372036854775807' THEN v0.c0 ELSE v0.c1 END COLLATE BINARY);
SELECT DISTINCT MAX(vt1.c0) FROM v0, vt1 WHERE (((CASE WHEN '9223372036854775807' THEN v0.c0 ELSE v0.c1 END COLLATE BINARY)AND(CAST(v0.c1 COLLATE BINARY AS NUMERIC))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (CASE CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END  WHEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)) THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN 'ഺn' THEN vt1.c0 ELSE vt1.c0 END WHEN ((vt1.c0)=(vt1.c1)) THEN vt1.c1 WHEN CAST(vt1.c0 AS REAL) THEN ((0.185253482002524)>>(vt1.c0)) WHEN ((vt1.c1) ISNULL) THEN (- (vt1.c0)) WHEN (vt1.c1 IN ()) THEN CAST(vt1.c1 AS NUMERIC) WHEN ((vt1.c0)%(vt1.c0)) THEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)) ELSE ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)) END);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (CASE CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END  WHEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)) THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN 'ഺn' THEN vt1.c0 ELSE vt1.c0 END WHEN ((vt1.c0)==(vt1.c1)) THEN vt1.c1 WHEN CAST(vt1.c0 AS REAL) THEN ((0.185253482002524)>>(vt1.c0)) WHEN ((vt1.c1) ISNULL) THEN (- (vt1.c0)) WHEN (vt1.c1 IN ()) THEN CAST(vt1.c1 AS NUMERIC) WHEN ((vt1.c0)%(vt1.c0)) THEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)) ELSE ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)) END);
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE ((((vt1.c0, x'')) NOT BETWEEN (((('0.021123608619768697')<=(vt1.c1)), ((vt1.c0)>(vt1.c0)))) AND ((v0.c0, CASE WHEN v0.c0 THEN v0.c0 END))));
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE ((((((vt1.c0, x'')) NOT BETWEEN (((('0.021123608619768697')<=(vt1.c1)), ((vt1.c0)>(vt1.c0)))) AND ((v0.c0, CASE WHEN v0.c0 THEN v0.c0 END))))AND((((x'', vt1.c1, v0.c2))<((v0.c2, vt1.c1, v0.c1))) COLLATE NOCASE))) ORDER BY ((CAST(vt1.c1 AS TEXT))/(((vt1.c1) IS FALSE))) ASC  NULLS FIRST, CASE WHEN LIKELIHOOD(v0.c1, vt1.c0) THEN ((vt1.c1) BETWEEN (NULL) AND (0x5a8551a4)) WHEN ((((vt1.c1)OR(0.5243836030037342)))AND(vt1.c0)) THEN ((vt1.c1)<>(vt1.c1)) WHEN (((vt1.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c2))) THEN CAST(x'cc' AS REAL) ELSE CAST(v0.c1 AS REAL) END;
SELECT ALL COUNT(*) FROM vt1 WHERE (NULL) ORDER BY ((((vt1.c1)<(vt1.c1)))||(vt1.c0))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((NULL)AND(CASE WHEN (((vt1.c0))<=((vt1.c1))) THEN vt1.c1 COLLATE NOCASE WHEN TOTAL_CHANGES() THEN json_object(vt1.c0, vt1.c1, vt1.c1, vt1.c0) ELSE NULLIF(vt1.c0, vt1.c1) END))) ORDER BY ((vt1.c0) IS FALSE) COLLATE NOCASE DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (HEX(((0.5037243673625396)>=(vt1.c0)))) ORDER BY ((vt1.c0) IS FALSE) COLLATE NOCASE DESC;
SELECT ALL * FROM v0 WHERE ((((v0.c2, v0.c2, v0.c1, 0.8155932908634786)) NOT BETWEEN ((((((((((((v0.c0)OR(x'')))AND(v0.c1)))OR(v0.c0)))OR(v0.c2)))AND(v0.c0)), ((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END, ((v0.c1) IS TRUE))) AND ((v0.c2, (((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, ''))), ((NULL)+(v0.c2)), (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))))) ORDER BY (~ ((~ (v0.c2))))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2, v0.c2, v0.c1, 0.8155932908634786)) NOT BETWEEN ((((((((((((v0.c0)OR(x'')))AND(v0.c1)))OR(v0.c0)))OR(v0.c2)))AND(v0.c0)), ((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END, ((v0.c1) IS TRUE))) AND ((v0.c2, (((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, ''))), ((NULL)+(v0.c2)), (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))))) ORDER BY (~ ((~ (v0.c2))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c2)/(v0.c1))) ISNULL)) ORDER BY (~ ((~ (v0.c2))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((v0.c2, v0.c2, v0.c1, 0.8155932908634786)) NOT BETWEEN ((((((((((((v0.c0)OR(x'')))AND(v0.c1)))OR(v0.c0)))OR(v0.c2)))AND(v0.c0)), ((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END, ((v0.c1) IS TRUE))) AND ((v0.c2, (((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, ''))), ((NULL)+(v0.c2)), (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))))) ORDER BY (~ ((~ (v0.c2))))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2, v0.c2, v0.c1, 0.8155932908634786)) NOT BETWEEN ((((((((((((v0.c0)OR(x'')))AND(v0.c1)))OR(v0.c0)))OR(v0.c2)))AND(v0.c0)), ((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END, ((v0.c1) IS TRUE))) AND ((v0.c2, (((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, ''))), ((NULL)+(v0.c2)), (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))))) ORDER BY (~ ((~ (v0.c2))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c2)/(v0.c1))) ISNULL)) ORDER BY (~ ((~ (v0.c2))))  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (vt1.c1) ORDER BY CASE ABS(DISTINCT v0.c0)  WHEN (((v0.c0, v0.c0))>=((vt1.c1, v0.c1))) THEN 1706271515 END ASC;
SELECT ALL COUNT(*) FROM v0, vt1 NOT INDEXED WHERE (vt1.c1) ORDER BY CASE ABS(DISTINCT v0.c0)  WHEN (((v0.c0, v0.c0))>=((vt1.c1, v0.c1))) THEN 0x65b3a31b END ASC LIMIT 0;
SELECT MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON ((-1.4324162E9)||(((vt1.c0) BETWEEN (v0.c2) AND (v0.c2)))) WHERE (((((((((((vt1.c0)<(v0.c2)))OR(((v0.c2)<=(v0.c0)))))AND((+ (vt1.c0)))))AND(CASE WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN v0.c2 THEN 927248832 END)))AND(('-159427480' IN ())))) ORDER BY (((LIKELY(DISTINCT vt1.c1), (- (v0.c2)), ((vt1.c0)LIKE(v0.c0))))<>((((v0.c1) NOT NULL), IFNULL(NULL, vt1.c0), v0.c2 COLLATE RTRIM))), ((CHANGES())|(TYPEOF(x'f1bc'))) ASC;
SELECT MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON ((-1.4324162E9)||(((vt1.c0) BETWEEN (v0.c2) AND (v0.c2)))) WHERE (((((((((((vt1.c0)<(v0.c2)))OR(((v0.c2)<(v0.c0)))))AND((+ (vt1.c0)))))AND(CASE WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN v0.c2 THEN 927248832 END)))AND(('-159427480' IN ())))) ORDER BY v0.c2  NULLS LAST, v0.c1 COLLATE BINARY  NULLS LAST, NULLIF(v0.c0, (+ (v0.c0))) DESC INTERSECT SELECT ALL MAX(vt1.c1) FROM vt1 INNER JOIN v0 ON ((-1.4324162E9)||(((vt1.c0) BETWEEN (v0.c2) AND (v0.c2)))) WHERE (CAST(CAST(v0.c1 AS TEXT) AS NUMERIC)) ORDER BY v0.c2  NULLS LAST, v0.c1 COLLATE BINARY  NULLS LAST, NULLIF(v0.c0, (+ (v0.c0))) DESC;
SELECT ALL COUNT(*) FROM v0 WHERE (v0.c1) ORDER BY ((((v0.c0)LIKE(v0.c0))) BETWEEN (CASE v0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN NULL WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END) AND (((((v0.c0)AND(v0.c1)))OR(v0.c1)))) DESC  NULLS FIRST, ((CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END) NOT NULL)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c1)AND(((((v0.c0) NOT NULL)) NOTNULL)))) ORDER BY CAST((((v0.c2, v0.c1)) NOT BETWEEN ((v0.c2, v0.c1)) AND ((v0.c2, v0.c2))) AS TEXT)  NULLS FIRST LIMIT 2;
SELECT * FROM v0 WHERE (CAST((~ ('8')) AS TEXT));
SELECT * FROM v0 NOT INDEXED WHERE (CAST((~ ('8')) AS TEXT)) ORDER BY ((v0.c2) BETWEEN (CASE v0.c0  WHEN v0.c0 THEN '397906067' END) AND ((NOT (v0.c2)))) INTERSECT SELECT ALL * FROM v0 WHERE (CASE CAST(v0.c2 AS INTEGER)  WHEN (v0.c1 IN ()) THEN ((((((v0.c0)OR(v0.c1)))AND(v0.c0)))AND(v0.c2)) WHEN ((((v0.c0)AND(NULL)))OR(v0.c1)) THEN v0.c2 WHEN ((v0.c2)+(v0.c0)) THEN v0.c2 COLLATE RTRIM END) ORDER BY ((v0.c2) BETWEEN (CASE v0.c0  WHEN v0.c0 THEN '397906067' END) AND ((NOT (v0.c2))));
SELECT * FROM v0 WHERE (CAST((~ ('8')) AS TEXT));
SELECT * FROM v0 NOT INDEXED WHERE (CAST((~ ('8')) AS TEXT)) ORDER BY ((v0.c2) BETWEEN (CASE v0.c0  WHEN v0.c0 THEN '397906067' END) AND ((NOT (v0.c2)))) INTERSECT SELECT ALL * FROM v0 WHERE (CASE CAST(v0.c2 AS INTEGER)  WHEN (v0.c1 IN ()) THEN ((((((v0.c0)OR(v0.c1)))AND(v0.c0)))AND(v0.c2)) WHEN ((((v0.c0)AND(NULL)))OR(v0.c1)) THEN v0.c2 WHEN ((v0.c2)+(v0.c0)) THEN v0.c2 COLLATE RTRIM END) ORDER BY ((v0.c2) BETWEEN (CASE v0.c0  WHEN v0.c0 THEN '397906067' END) AND ((NOT (v0.c2))));
SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT DISTINCT * FROM vt1, v0 WHERE (((vt1.c1)AND(((((vt1.c1) IS TRUE))%(0Xffffffffb67cfe8f))))) LIMIT 0;
SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT DISTINCT * FROM vt1, v0 WHERE (((vt1.c1)AND(((((vt1.c1) IS TRUE))%(0Xffffffffb67cfe8f))))) LIMIT 0;
SELECT * FROM vt1, v0 WHERE (CASE WHEN ((vt1.c1)+(v0.c0)) THEN CAST(v0.c2 AS REAL) WHEN vt1.c1 THEN ((v0.c1)>(NULL)) END) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN ((((v0.c1, v0.c2))>((vt1.c1, '1121701740')))) AND (((vt1.c0) NOTNULL)))  NULLS FIRST, ((((((v0.c2)>(x'')))AND(((v0.c2) NOT NULL))))OR(CAST('962955577' AS BLOB))) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE (CASE WHEN ((vt1.c1)+(v0.c0)) THEN CAST(v0.c2 AS REAL) WHEN vt1.c1 THEN ((v0.c1)>(NULL)) END) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN ((((v0.c1, v0.c2))>((vt1.c1, '1121701740')))) AND (((vt1.c0) NOTNULL)))  NULLS FIRST, ((((((v0.c2)>(x'')))AND(((v0.c2) NOT NULL))))OR(CAST('962955577' AS BLOB))) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(CASE WHEN v0.c2 THEN x'3c' WHEN vt1.c0 THEN vt1.c1 END AS REAL)) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN ((((v0.c1, v0.c2))>((vt1.c1, '1121701740')))) AND (((vt1.c0) NOTNULL)))  NULLS FIRST, ((((((v0.c2)>(x'')))AND(((v0.c2) NOT NULL))))OR(CAST('962955577' AS BLOB))) ASC LIMIT 0X0;
SELECT * FROM vt1, v0 WHERE (CASE WHEN ((vt1.c1)+(v0.c0)) THEN CAST(v0.c2 AS REAL) WHEN vt1.c1 THEN ((v0.c1)>(NULL)) END) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN ((((v0.c1, v0.c2))>((vt1.c1, '1121701740')))) AND (((vt1.c0) NOTNULL)))  NULLS FIRST, ((((((v0.c2)>(x'')))AND(((v0.c2) NOT NULL))))OR(CAST('962955577' AS BLOB))) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE (CASE WHEN ((vt1.c1)+(v0.c0)) THEN CAST(v0.c2 AS REAL) WHEN vt1.c1 THEN ((v0.c1)>(NULL)) END) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN ((((v0.c1, v0.c2))>((vt1.c1, '1121701740')))) AND (((vt1.c0) NOTNULL)))  NULLS FIRST, ((((((v0.c2)>(x'')))AND(((v0.c2) NOT NULL))))OR(CAST('962955577' AS BLOB))) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(CASE WHEN v0.c2 THEN x'3c' WHEN vt1.c0 THEN vt1.c1 END AS REAL)) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN ((((v0.c1, v0.c2))>((vt1.c1, '1121701740')))) AND (((vt1.c0) NOTNULL)))  NULLS FIRST, ((((((v0.c2)>(x'')))AND(((v0.c2) NOT NULL))))OR(CAST('962955577' AS BLOB))) ASC LIMIT 0X0;
SELECT * FROM vt1 WHERE (x'96') ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN 0.23652314340601588 ELSE vt1.c0 END)IS NOT(((vt1.c1)*(vt1.c0))))  NULLS LAST, (((vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((CAST(vt1.c1 AS TEXT), (NOT (vt1.c0)), vt1.c0 COLLATE NOCASE)) AND ((CASE WHEN '1016608984' THEN vt1.c1 WHEN '-697260128' THEN vt1.c1 WHEN vt1.c1 THEN -1.4324162E9 END, ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), CASE 0.32790938584277074  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)));
SELECT DISTINCT * FROM vt1 WHERE (x'96') ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN 0.23652314340601588 ELSE vt1.c0 END)IS NOT(((vt1.c1)*(vt1.c0))))  NULLS LAST, (((vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((CAST(vt1.c1 AS TEXT), (NOT (vt1.c0)), vt1.c0 COLLATE NOCASE)) AND ((CASE WHEN '1016608984' THEN vt1.c1 WHEN '-697260128' THEN vt1.c1 WHEN vt1.c1 THEN -1.4324162E9 END, ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), CASE 0.32790938584277074  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL) ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN 0.23652314340601588 ELSE vt1.c0 END)IS NOT(((vt1.c1)*(vt1.c0))))  NULLS LAST, (((vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((CAST(vt1.c1 AS TEXT), (NOT (vt1.c0)), vt1.c0 COLLATE NOCASE)) AND ((CASE WHEN '1016608984' THEN vt1.c1 WHEN '-697260128' THEN vt1.c1 WHEN vt1.c1 THEN -1.4324162E9 END, ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), CASE 0.32790938584277074  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)));
SELECT * FROM vt1 WHERE (x'96') ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN 0.23652314340601588 ELSE vt1.c0 END)IS NOT(((vt1.c1)*(vt1.c0))))  NULLS LAST, (((vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((CAST(vt1.c1 AS TEXT), (NOT (vt1.c0)), vt1.c0 COLLATE NOCASE)) AND ((CASE WHEN '1016608984' THEN vt1.c1 WHEN '-697260128' THEN vt1.c1 WHEN vt1.c1 THEN -1.4324162E9 END, ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), CASE 0.32790938584277074  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)));
SELECT DISTINCT * FROM vt1 WHERE (x'96') ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN 0.23652314340601588 ELSE vt1.c0 END)IS NOT(((vt1.c1)*(vt1.c0))))  NULLS LAST, (((vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((CAST(vt1.c1 AS TEXT), (NOT (vt1.c0)), vt1.c0 COLLATE NOCASE)) AND ((CASE WHEN '1016608984' THEN vt1.c1 WHEN '-697260128' THEN vt1.c1 WHEN vt1.c1 THEN -1.4324162E9 END, ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), CASE 0.32790938584277074  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL) ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN 0.23652314340601588 ELSE vt1.c0 END)IS NOT(((vt1.c1)*(vt1.c0))))  NULLS LAST, (((vt1.c0, vt1.c1, vt1.c0)) NOT BETWEEN ((CAST(vt1.c1 AS TEXT), (NOT (vt1.c0)), vt1.c0 COLLATE NOCASE)) AND ((CASE WHEN '1016608984' THEN vt1.c1 WHEN '-697260128' THEN vt1.c1 WHEN vt1.c1 THEN -1.4324162E9 END, ((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)), CASE 0.32790938584277074  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)));
SELECT MIN(v0.c1) FROM vt1, v0 WHERE ((+ (v0.c0)));
SELECT DISTINCT MIN(v0.c1) FROM vt1, v0 WHERE ((+ (v0.c0))) LIMIT 1 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM vt1, v0 WHERE (((((((((((CASE v0.c1  WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)AND(CASE v0.c1  WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END)))AND((v0.c2 IN (vt1.c1, v0.c0)))))AND(((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))))AND(v0.c2 COLLATE BINARY)))OR(UPPER(v0.c0)))) LIMIT 0x1;
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE (ABS(DISTINCT ((vt1.c1)<=(vt1.c0))));
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE (((ABS(DISTINCT ((vt1.c1)<=(vt1.c0))))AND(NULLIF((v0.c2 IN (v0.c0)), (vt1.c1 IN (v0.c2)))))) ORDER BY ((CAST(v0.c1 AS REAL))<((((vt1.c0, v0.c2, '1644449794')) NOT BETWEEN ((vt1.c1, v0.c0, v0.c2)) AND ((vt1.c1, vt1.c0, v0.c0)))));
SELECT * FROM vt1, v0 WHERE (((vt1.c0) NOT NULL) COLLATE BINARY) ORDER BY 0.9633115728778252  NULLS FIRST, CASE WHEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 ELSE vt1.c1 END THEN v0.c1 COLLATE RTRIM WHEN CAST(vt1.c0 AS NUMERIC) THEN CASE v0.c1  WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END ELSE NULL END;
SELECT DISTINCT * FROM vt1, v0 WHERE (((vt1.c0) NOT NULL) COLLATE BINARY) ORDER BY CASE WHEN vt1.c1 COLLATE NOCASE THEN '*5엿c' WHEN (vt1.c1 IN ()) THEN ((v0.c1)IS NOT(v0.c0)) WHEN vt1.c0 THEN 0.36407964847061736 ELSE ((vt1.c0)<(v0.c1)) END  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (vt1.c1) ORDER BY CASE WHEN vt1.c1 COLLATE NOCASE THEN '*5엿c' WHEN (vt1.c1 IN ()) THEN ((v0.c1)IS NOT(v0.c0)) WHEN vt1.c0 THEN 0.36407964847061736 ELSE ((vt1.c0)<(v0.c1)) END  NULLS LAST LIMIT 2;
SELECT * FROM vt1, v0 WHERE (((vt1.c0) NOT NULL) COLLATE BINARY) ORDER BY 0.9633115728778252  NULLS FIRST, CASE WHEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 ELSE vt1.c1 END THEN v0.c1 COLLATE RTRIM WHEN CAST(vt1.c0 AS NUMERIC) THEN CASE v0.c1  WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END ELSE NULL END;
SELECT DISTINCT * FROM vt1, v0 WHERE (((vt1.c0) NOT NULL) COLLATE BINARY) ORDER BY CASE WHEN vt1.c1 COLLATE NOCASE THEN '*5엿c' WHEN (vt1.c1 IN ()) THEN ((v0.c1)IS NOT(v0.c0)) WHEN vt1.c0 THEN 0.36407964847061736 ELSE ((vt1.c0)<(v0.c1)) END  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (vt1.c1) ORDER BY CASE WHEN vt1.c1 COLLATE NOCASE THEN '*5엿c' WHEN (vt1.c1 IN ()) THEN ((v0.c1)IS NOT(v0.c0)) WHEN vt1.c0 THEN 0.36407964847061736 ELSE ((vt1.c0)<(v0.c1)) END  NULLS LAST LIMIT 2;
SELECT * FROM v0 WHERE (x'') ORDER BY ((((v0.c2) NOTNULL))+(((v0.c0) IS TRUE))) ASC;
SELECT ALL * FROM v0 WHERE (((x'')AND('	n'))) ORDER BY (((v0.c0, v0.c2, v0.c1)) NOT BETWEEN (((0.355142878616618 IN ()), v0.c2 COLLATE RTRIM, CAST(v0.c0 AS INTEGER))) AND ((-1.809434267E9, ((((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c1)))AND(v0.c1)), CASE v0.c0  WHEN v0.c1 THEN v0.c1 END))) ASC  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0 WHERE (x'') ORDER BY ((((v0.c2) NOTNULL))+(((v0.c0) IS TRUE))) ASC;
SELECT ALL * FROM v0 WHERE (((x'')AND('	n'))) ORDER BY (((v0.c0, v0.c2, v0.c1)) NOT BETWEEN (((0.355142878616618 IN ()), v0.c2 COLLATE RTRIM, CAST(v0.c0 AS INTEGER))) AND ((-1.809434267E9, ((((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c1)))AND(v0.c1)), CASE v0.c0  WHEN v0.c1 THEN v0.c1 END))) ASC  NULLS FIRST LIMIT 0X0;
SELECT COUNT(*) FROM v0 WHERE ((NOT ((- (v0.c2)))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((NOT ((- (v0.c2)))))AND((((((v0.c2, v0.c0, v0.c1))>=((v0.c2, v0.c2, v0.c0))))GLOB('920915982'))))) LIMIT 2;
SELECT ALL * FROM vt1, v0 WHERE ((((((((v0.c0 IN (vt1.c0)))OR(((((vt1.c1)OR(v0.c0)))OR(vt1.c1)))))OR(vt1.c0)))AND(((vt1.c0) BETWEEN (v0.c1) AND (v0.c0)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((((v0.c0 IN (vt1.c0)))OR(((((vt1.c1)OR(v0.c0)))OR(vt1.c1)))))OR(vt1.c0)))AND(((vt1.c0) BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY (((v0.c2) BETWEEN (v0.c0) AND (v0.c0)) IN (CAST(vt1.c1 AS INTEGER))), (((((((+ (v0.c0)))OR((v0.c2 IN (v0.c0)))))AND(vt1.c0)))AND(CASE WHEN v0.c0 THEN NULL WHEN vt1.c0 THEN vt1.c1 WHEN 'A' THEN v0.c2 END)) LIMIT 0x2;
SELECT ALL * FROM vt1, v0 WHERE ((((((((v0.c0 IN (vt1.c0)))OR(((((vt1.c1)OR(v0.c0)))OR(vt1.c1)))))OR(vt1.c0)))AND(((vt1.c0) BETWEEN (v0.c1) AND (v0.c0)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((((v0.c0 IN (vt1.c0)))OR(((((vt1.c1)OR(v0.c0)))OR(vt1.c1)))))OR(vt1.c0)))AND(((vt1.c0) BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY (((v0.c2) BETWEEN (v0.c0) AND (v0.c0)) IN (CAST(vt1.c1 AS INTEGER))), (((((((+ (v0.c0)))OR((v0.c2 IN (v0.c0)))))AND(vt1.c0)))AND(CASE WHEN v0.c0 THEN NULL WHEN vt1.c0 THEN vt1.c1 WHEN 'A' THEN v0.c2 END)) LIMIT 0x2;
SELECT COUNT(*) FROM v0, vt1 WHERE ('-1640513134') ORDER BY CASE x''  WHEN ((-1336906983)AND(v0.c2)) THEN (vt1.c1 IN (v0.c0)) WHEN CASE WHEN v0.c2 THEN v0.c1 WHEN NULL THEN v0.c1 WHEN vt1.c0 THEN v0.c1 ELSE v0.c1 END THEN CAST(v0.c1 AS INTEGER) ELSE vt1.c1 END, SQLITE_SOURCE_ID();
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((('-1640513134')AND((CAST(v0.c1 AS REAL) IN ((v0.c1 IN ())))))) ORDER BY ((0.8088017105013264) BETWEEN ('1121701740') AND ('-1664277605')), CASE WHEN ((vt1.c1) BETWEEN (v0.c0) AND (v0.c0)) THEN rtreenode(v0.c2, v0.c1) WHEN ((((((((v0.c1)AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)) THEN NULL END  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((((NOT (vt1.c0))) NOT BETWEEN (v0.c1) AND (((((((((v0.c2)OR(x'')))AND(v0.c2)))AND(v0.c0)))OR(0.5597012781416028))))) ORDER BY ((0.8088017105013264) BETWEEN ('1121701740') AND ('-1664277605')), CASE WHEN ((vt1.c1) BETWEEN (v0.c0) AND (v0.c0)) THEN rtreenode(v0.c2, v0.c1) WHEN ((((((((v0.c1)AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)) THEN NULL END  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN HEX(DISTINCT vt1.c1) THEN (+ (NULL)) END);
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((CASE WHEN HEX(DISTINCT vt1.c1) THEN (+ (NULL)) END)AND(v0.c2))) INTERSECT SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((((((NULL) NOT NULL))AND(CAST(vt1.c1 AS BLOB))))AND(((((v0.c1)OR(v0.c2)))OR(v0.c2)))));
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN HEX(DISTINCT vt1.c1) THEN (+ (NULL)) END);
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((CASE WHEN HEX(DISTINCT vt1.c1) THEN (+ (NULL)) END)AND(v0.c2))) INTERSECT SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((((((NULL) NOT NULL))AND(CAST(vt1.c1 AS BLOB))))AND(((((v0.c1)OR(v0.c2)))OR(v0.c2)))));
SELECT ALL * FROM v0 WHERE ((((CAST(v0.c2 AS REAL), (((((((('-5674097')OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))OR(v0.c0)), ((((v0.c2)AND(v0.c0)))AND(v0.c1))))<((((v0.c2) BETWEEN (v0.c1) AND (v0.c2)), (1.841692098E9 IN (v0.c0)), CAST(v0.c1 AS INTEGER)))));
SELECT DISTINCT * FROM v0 WHERE ((((CAST(v0.c2 AS REAL), (((((((('-5674097')OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))OR(v0.c0)), ((((v0.c2)AND(v0.c0)))AND(v0.c1))))<((((v0.c2) BETWEEN (v0.c1) AND (v0.c2)), (1.841692098E9 IN (v0.c0)), CAST(v0.c1 AS INTEGER))))) ORDER BY ((((((CASE WHEN v0.c0 THEN v0.c0 END)OR(((v0.c2) BETWEEN (v0.c1) AND (v0.c2)))))AND((+ (v0.c0)))))AND((v0.c0 IN ()))) DESC  NULLS LAST, ((v0.c0 IN (v0.c1, v0.c0)) IN ()) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((~ (v0.c2)))LIKE(v0.c1))) ORDER BY ((((((CASE WHEN v0.c0 THEN v0.c0 END)OR(((v0.c2) BETWEEN (v0.c1) AND (v0.c2)))))AND((+ (v0.c0)))))AND((v0.c0 IN ()))) DESC  NULLS LAST, ((v0.c0 IN (v0.c1, v0.c0)) IN ()) LIMIT 2;
SELECT ALL * FROM v0 WHERE ((((CAST(v0.c2 AS REAL), (((((((('-5674097')OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))OR(v0.c0)), ((((v0.c2)AND(v0.c0)))AND(v0.c1))))<((((v0.c2) BETWEEN (v0.c1) AND (v0.c2)), (1.841692098E9 IN (v0.c0)), CAST(v0.c1 AS INTEGER)))));
SELECT DISTINCT * FROM v0 WHERE ((((CAST(v0.c2 AS REAL), (((((((('-5674097')OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))OR(v0.c0)), ((((v0.c2)AND(v0.c0)))AND(v0.c1))))<((((v0.c2) BETWEEN (v0.c1) AND (v0.c2)), (1.841692098E9 IN (v0.c0)), CAST(v0.c1 AS INTEGER))))) ORDER BY ((((((CASE WHEN v0.c0 THEN v0.c0 END)OR(((v0.c2) BETWEEN (v0.c1) AND (v0.c2)))))AND((+ (v0.c0)))))AND((v0.c0 IN ()))) DESC  NULLS LAST, ((v0.c0 IN (v0.c1, v0.c0)) IN ()) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((~ (v0.c2)))LIKE(v0.c1))) ORDER BY ((((((CASE WHEN v0.c0 THEN v0.c0 END)OR(((v0.c2) BETWEEN (v0.c1) AND (v0.c2)))))AND((+ (v0.c0)))))AND((v0.c0 IN ()))) DESC  NULLS LAST, ((v0.c0 IN (v0.c1, v0.c0)) IN ()) LIMIT 2;
SELECT COUNT(*) FROM v0 WHERE (v0.c2 COLLATE NOCASE COLLATE RTRIM COLLATE NOCASE);
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c2 COLLATE NOCASE COLLATE RTRIM COLLATE NOCASE)AND(((v0.c2 COLLATE RTRIM)IS NOT(HEX(DISTINCT v0.c2))))));
SELECT ALL MIN(v0.c1) FROM vt1 CROSS JOIN v0 ON ((NULL)>=(((vt1.c0) NOT NULL))) WHERE (((LOWER(0.5921215716415177)) IS FALSE)) ORDER BY ((STRFTIME(v0.c0, v0.c1, v0.c2, v0.c2)) BETWEEN (CASE '-669799561'  WHEN 0.049787029411581085 THEN vt1.c1 ELSE vt1.c0 END) AND (((vt1.c1) ISNULL))), (((v0.c0)) NOT BETWEEN ((vt1.c0)) AND ((x'54d9' COLLATE NOCASE))) DESC;
SELECT DISTINCT MIN(v0.c1) FROM vt1 CROSS JOIN v0 ON ((NULL)>=(((vt1.c0) NOT NULL))) WHERE (((LOWER(0.5921215716415177)) IS FALSE)) ORDER BY ((STRFTIME(v0.c0, v0.c1, v0.c2, v0.c2)) BETWEEN (CASE '-669799561'  WHEN 0.049787029411581085 THEN vt1.c1 ELSE vt1.c0 END) AND (((vt1.c1) ISNULL))), (((v0.c0)) NOT BETWEEN ((vt1.c0)) AND ((x'54d9' COLLATE NOCASE))) DESC;
SELECT * FROM vt1 WHERE (vt1.c1) ORDER BY (- (x'')) COLLATE NOCASE  NULLS LAST, '1841692098';
SELECT * FROM vt1 WHERE (vt1.c1) ORDER BY (- (x'')) COLLATE NOCASE  NULLS LAST, '1841692098' INTERSECT SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c1) NOT NULL) AS TEXT)) ORDER BY (- (x'')) COLLATE NOCASE  NULLS LAST, '1841692098';
SELECT * FROM vt1 WHERE (vt1.c1) ORDER BY (- (x'')) COLLATE NOCASE  NULLS LAST, '1841692098';
SELECT * FROM vt1 WHERE (vt1.c1) ORDER BY (- (x'')) COLLATE NOCASE  NULLS LAST, '1841692098' INTERSECT SELECT ALL * FROM vt1 WHERE (CAST(((vt1.c1) NOT NULL) AS TEXT)) ORDER BY (- (x'')) COLLATE NOCASE  NULLS LAST, '1841692098';
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE ((0.1403348054299819 IN ()));
SELECT * FROM vt1 NATURAL JOIN v0 WHERE ((0.1403348054299819 IN ())) ORDER BY ((NULL)>=(v0.c2)) COLLATE BINARY, (((vt1.c1, '-1062446278')) NOT BETWEEN ((vt1.c0 COLLATE NOCASE, ((((((v0.c0)OR(v0.c1)))OR(v0.c0)))AND(vt1.c1)))) AND ((((v0.c1) NOTNULL), ((v0.c0)>>(vt1.c0)))))  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE ((0.1403348054299819 IN ()));
SELECT * FROM vt1 NATURAL JOIN v0 WHERE ((0.1403348054299819 IN ())) ORDER BY ((NULL)>=(v0.c2)) COLLATE BINARY, (((vt1.c1, '-1062446278')) NOT BETWEEN ((vt1.c0 COLLATE NOCASE, ((((((v0.c0)OR(v0.c1)))OR(v0.c0)))AND(vt1.c1)))) AND ((((v0.c1) NOTNULL), ((v0.c0)>>(vt1.c0)))))  NULLS LAST LIMIT 0x1;
SELECT COUNT(*) FROM vt1 WHERE (CAST(IFNULL(DISTINCT vt1.c0, vt1.c1) AS TEXT)) ORDER BY (((- (vt1.c1))) BETWEEN (CASE WHEN vt1.c0 THEN '' WHEN '' THEN vt1.c1 END) AND (CAST(vt1.c1 AS REAL))) DESC  NULLS LAST, ((vt1.c0) IS TRUE);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CAST(IFNULL(DISTINCT vt1.c0, vt1.c1) AS TEXT)) ORDER BY (((- (vt1.c1))) BETWEEN (CASE WHEN vt1.c0 THEN '' WHEN '' THEN vt1.c1 END) AND (CAST(vt1.c1 AS REAL))) DESC  NULLS LAST, ((vt1.c0) IS TRUE) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((vt1.c1)) BETWEEN ((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))) AND (((NOT (vt1.c1)))))) ORDER BY (((- (vt1.c1))) BETWEEN (CASE WHEN vt1.c0 THEN '' WHEN '' THEN vt1.c1 END) AND (CAST(vt1.c1 AS REAL))) DESC  NULLS LAST, ((vt1.c0) IS TRUE);
SELECT COUNT(*) FROM v0 WHERE ((((v0.c2, v0.c2)) NOT BETWEEN ((0.7644881130975221, ((v0.c0)IS(v0.c2)))) AND ((((v0.c0)&(v0.c1)), ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))))) ORDER BY ((((((((((((v0.c0) NOT NULL))OR(v0.c2)))OR(((((v0.c2)AND(v0.c0)))AND(v0.c1)))))AND(CASE -1844818550  WHEN v0.c2 THEN NULL ELSE v0.c1 END)))OR(v0.c2)))OR(((-2081089654)%(v0.c1)))) ASC  NULLS FIRST, ((((((((v0.c0)AND(v0.c0)))AND(v0.c2)))OR(v0.c0)))-(((v0.c2)IS NOT(v0.c2))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((v0.c2, v0.c2)) NOT BETWEEN ((0.7644881130975221, ((v0.c0)IS(v0.c2)))) AND ((((v0.c0)&(v0.c1)), ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))))) ORDER BY ((((load_extension(v0.c0))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c1 WHEN NULL THEN v0.c2 END)))AND(((((v0.c2)OR(v0.c2)))OR(v0.c2)))) ASC  NULLS LAST, v0.c2 ASC  NULLS FIRST, CAST((((v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, v0.c0)) AND ((v0.c0, v0.c2))) AS BLOB) ASC  NULLS LAST, CAST(CAST(v0.c1 AS BLOB) AS BLOB)  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c1)))OR(UNLIKELY(DISTINCT v0.c0)))) ORDER BY ((((load_extension(v0.c0))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c1 WHEN NULL THEN v0.c2 END)))AND(((((v0.c2)OR(v0.c2)))OR(v0.c2)))) ASC  NULLS LAST, v0.c2 ASC  NULLS FIRST, CAST((((v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, v0.c0)) AND ((v0.c0, v0.c2))) AS BLOB) ASC  NULLS LAST, CAST(CAST(v0.c1 AS BLOB) AS BLOB)  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE (x'9f') ORDER BY NULL, ((0.7858704317361178) IS TRUE) ASC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((x'9f')AND(LTRIM(v0.c0, v0.c1) COLLATE NOCASE))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2))) NOT NULL) DESC, ((((v0.c1) ISNULL))/((NOT (v0.c1)))) LIMIT 0x2 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c1) NOT NULL)) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2))) NOT NULL) DESC, ((((v0.c1) ISNULL))/((NOT (v0.c1)))) LIMIT 0x2;
SELECT ALL * FROM v0 WHERE ((((v0.c0, v0.c1)) BETWEEN ((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 END, v0.c0)) AND ((0xffffffffd0de4075 COLLATE BINARY, (((v0.c2, v0.c1, v0.c1))=((v0.c0, v0.c0, v0.c1))))))) ORDER BY ((((v0.c2)>>(v0.c1)))OR((((v0.c1, v0.c0))>=((v0.c2, v0.c1)))));
SELECT * FROM v0 WHERE ((((v0.c0, v0.c1)) BETWEEN ((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 END, v0.c0)) AND ((-790740875 COLLATE BINARY, (((v0.c2, v0.c1, v0.c1))=((v0.c0, v0.c0, v0.c1))))))) ORDER BY (((x'40da' IN ())) NOT NULL)  NULLS FIRST, (~ (NULL COLLATE NOCASE))  NULLS FIRST, v0.c2 LIMIT 2;
SELECT ALL * FROM v0 WHERE ((((v0.c0, v0.c1)) BETWEEN ((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 END, v0.c0)) AND ((0xffffffffd0de4075 COLLATE BINARY, (((v0.c2, v0.c1, v0.c1))=((v0.c0, v0.c0, v0.c1))))))) ORDER BY ((((v0.c2)>>(v0.c1)))OR((((v0.c1, v0.c0))>=((v0.c2, v0.c1)))));
SELECT * FROM v0 WHERE ((((v0.c0, v0.c1)) BETWEEN ((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 END, v0.c0)) AND ((-790740875 COLLATE BINARY, (((v0.c2, v0.c1, v0.c1))=((v0.c0, v0.c0, v0.c1))))))) ORDER BY (((x'40da' IN ())) NOT NULL)  NULLS FIRST, (~ (NULL COLLATE NOCASE))  NULLS FIRST, v0.c2 LIMIT 2;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST(((((0.9701361536602131)OR(vt1.c1)))AND('1075379800')) AS NUMERIC));
SELECT MIN(vt1.c0) FROM vt1 WHERE (CAST(((((0.9701361536602131)OR(vt1.c1)))AND('1075379800')) AS NUMERIC)) LIMIT 1 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (LOWER(DISTINCT ((((((((((x'1a')OR(-790740875)))OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))) LIMIT 1;
SELECT ALL COUNT(*) FROM vt1 WHERE ((~ (CAST(vt1.c1 AS REAL)))) ORDER BY x'afe0' ASC  NULLS FIRST, (+ (TRIM(vt1.c1, vt1.c0))) DESC;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((~ (CAST(vt1.c1 AS REAL)))) ORDER BY CASE CAST('' AS INTEGER)  WHEN ((vt1.c0)<(vt1.c1)) THEN json_valid(vt1.c1) WHEN x'' THEN vt1.c1 WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN ((vt1.c1)<>(NULL)) END DESC  NULLS FIRST, ((CAST(vt1.c0 AS TEXT))==(((vt1.c0)LIKE(vt1.c1)))), (((vt1.c0))>=((CASE WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (((((((v0.c2) BETWEEN (v0.c0) AND (x'43')))AND(((v0.c2)IS(v0.c0)))))OR((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((vt1.c0))))));
SELECT ALL * FROM v0, vt1 WHERE (((((((((v0.c2) BETWEEN (v0.c0) AND (x'43')))AND(((v0.c2)IS(v0.c0)))))OR((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((vt1.c0))))))AND(v0.c2)));
SELECT ALL * FROM v0, vt1 WHERE (((((((v0.c2) BETWEEN (v0.c0) AND (x'43')))AND(((v0.c2)IS(v0.c0)))))OR((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((vt1.c0))))));
SELECT ALL * FROM v0, vt1 WHERE (((((((((v0.c2) BETWEEN (v0.c0) AND (x'43')))AND(((v0.c2)IS(v0.c0)))))OR((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((vt1.c0))))))AND(v0.c2)));
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((('g' IN ())) NOT BETWEEN ((((vt1.c1, vt1.c0, vt1.c1, vt1.c0))!=((vt1.c1, vt1.c1, vt1.c0, vt1.c0)))) AND ((+ (vt1.c0)))));
SELECT MAX(vt1.c1) FROM vt1 WHERE (((((('g' IN ())) NOT BETWEEN ((((vt1.c1, vt1.c0, vt1.c1, vt1.c0))<>((vt1.c1, vt1.c1, vt1.c0, vt1.c0)))) AND ((+ (vt1.c0)))))AND(((vt1.c0 COLLATE RTRIM) NOTNULL)))) INTERSECT SELECT MAX(vt1.c1) FROM vt1 WHERE ((~ (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END)));
SELECT ALL * FROM vt1, v0 WHERE (vt1.c0);
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0)AND(((((((vt1.c0)AND(vt1.c1)))OR(v0.c1)))||(((v0.c1)%(v0.c2))))))) INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((((((((((((((((((((((v0.c1)OR(vt1.c0)))AND(vt1.c0)))AND(NULL)))OR(x'd5d37d')))OR(v0.c0)))OR(vt1.c0)))OR('e鈱cb|kn')))AND((((v0.c2, v0.c2, v0.c0)) BETWEEN ((v0.c1, v0.c2, vt1.c1)) AND ((v0.c1, v0.c0, vt1.c0))))))AND(((v0.c0) BETWEEN (v0.c0) AND (0Xffffffffd27070a8)))))AND(NULLIF(v0.c2, v0.c1))))OR(((v0.c0)IS(v0.c1)))))OR(((vt1.c0)||(vt1.c1)))));
SELECT ALL * FROM vt1, v0 WHERE (vt1.c0);
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0)AND(((((((vt1.c0)AND(vt1.c1)))OR(v0.c1)))||(((v0.c1)%(v0.c2))))))) INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((((((((((((((((((((((v0.c1)OR(vt1.c0)))AND(vt1.c0)))AND(NULL)))OR(x'd5d37d')))OR(v0.c0)))OR(vt1.c0)))OR('e鈱cb|kn')))AND((((v0.c2, v0.c2, v0.c0)) BETWEEN ((v0.c1, v0.c2, vt1.c1)) AND ((v0.c1, v0.c0, vt1.c0))))))AND(((v0.c0) BETWEEN (v0.c0) AND (0Xffffffffd27070a8)))))AND(NULLIF(v0.c2, v0.c1))))OR(((v0.c0)IS(v0.c1)))))OR(((vt1.c0)||(vt1.c1)))));
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((- (LOWER(-0.0))));
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE ((- (LOWER(-0.0)))) LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (vt1.c1) LIMIT 0;
SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT DISTINCT * FROM vt1, v0 WHERE (vt1.c1);
SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT DISTINCT * FROM vt1, v0 WHERE (vt1.c1);
SELECT MIN(v0.c1) FROM v0 WHERE (CASE ((0.2997076377122392) BETWEEN (v0.c1) AND ('3aok8['))  WHEN ((v0.c1) NOT NULL) THEN CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN 0x6dc5fdc2 THEN v0.c1 END WHEN CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END THEN NULLIF(v0.c1, v0.c0) END);
SELECT ALL MIN(v0.c1) FROM v0 WHERE (CASE ((0.2997076377122392) BETWEEN (v0.c1) AND ('3aok8['))  WHEN ((v0.c1) NOT NULL) THEN CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN 1841692098 THEN v0.c1 END WHEN CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END THEN NULLIF(v0.c1, v0.c0) END) ORDER BY ((v0.c1 IN ()) IN ((v0.c2 IN ()), v0.c2)) ASC, (((v0.c2 IN ())) IS TRUE)  NULLS FIRST, ((0.3030093098686236)<=(v0.c2));
SELECT ALL * FROM vt1, v0 WHERE ((+ (((vt1.c1) NOTNULL)))) ORDER BY (('263551969' COLLATE RTRIM) NOT BETWEEN (CAST(0.4563769168105365 AS BLOB)) AND (((((((((v0.c2)OR(v0.c2)))OR(v0.c1)))OR(vt1.c0)))OR(v0.c0))));
SELECT * FROM vt1, v0 WHERE ((((+ (((vt1.c1) NOTNULL))))AND(((((CAST(v0.c2 AS TEXT))AND(((((((((v0.c0)OR(vt1.c1)))OR(v0.c1)))OR(x'ab')))AND(v0.c2)))))AND((((v0.c2)) BETWEEN ((x'3f39')) AND ((vt1.c1)))))))) ORDER BY (((v0.c1 COLLATE RTRIM, CAST(0.43411643042012016 AS BLOB), x'59fd'))>=((((vt1.c1)>>('345514040')), ((((((v0.c1)AND(v0.c1)))AND(v0.c1)))AND(v0.c0)), vt1.c1)))  NULLS FIRST, CAST(9.31266565E8 AS REAL)  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE ((+ (((vt1.c1) NOTNULL)))) ORDER BY (('263551969' COLLATE RTRIM) NOT BETWEEN (CAST(0.4563769168105365 AS BLOB)) AND (((((((((v0.c2)OR(v0.c2)))OR(v0.c1)))OR(vt1.c0)))OR(v0.c0))));
SELECT * FROM vt1, v0 WHERE ((((+ (((vt1.c1) NOTNULL))))AND(((((CAST(v0.c2 AS TEXT))AND(((((((((v0.c0)OR(vt1.c1)))OR(v0.c1)))OR(x'ab')))AND(v0.c2)))))AND((((v0.c2)) BETWEEN ((x'3f39')) AND ((vt1.c1)))))))) ORDER BY (((v0.c1 COLLATE RTRIM, CAST(0.43411643042012016 AS BLOB), x'59fd'))>=((((vt1.c1)>>('345514040')), ((((((v0.c1)AND(v0.c1)))AND(v0.c1)))AND(v0.c0)), vt1.c1)))  NULLS FIRST, CAST(9.31266565E8 AS REAL)  NULLS LAST;
SELECT * FROM v0 WHERE (0.5787130268887571) ORDER BY x'c2cc' DESC  NULLS FIRST, ((((((((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))AND(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END)))OR(((v0.c0) NOT NULL))))OR((v0.c1 IN (v0.c1)))))AND(((v0.c2)==(v0.c0)))))AND((((v0.c0))<=((v0.c0))))))AND('1121700487'))  NULLS FIRST;
SELECT * FROM v0 WHERE (0.5787130268887571) ORDER BY (((v0.c1)<>(v0.c2)) IN ('p')), (((((v0.c2, v0.c2, v0.c1))<=((v0.c0, v0.c0, v0.c2))))GLOB(((v0.c2)%(v0.c0))))  NULLS FIRST INTERSECT SELECT * FROM v0 WHERE ((((CAST(v0.c0 AS TEXT), ((v0.c0)-(v0.c0)), (('-1408674184') NOT BETWEEN ('1843766385') AND (v0.c1))))=((((((v0.c2)AND(v0.c0)))OR(v0.c2)), (v0.c0 IN ()), 1272495034)))) ORDER BY (((v0.c1)<>(v0.c2)) IN ('p')), (((((v0.c2, v0.c2, v0.c1))<=((v0.c0, v0.c0, v0.c2))))GLOB(((v0.c2)%(v0.c0))))  NULLS FIRST;
SELECT * FROM v0 WHERE (0.5787130268887571) ORDER BY x'c2cc' DESC  NULLS FIRST, ((((((((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))AND(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END)))OR(((v0.c0) NOT NULL))))OR((v0.c1 IN (v0.c1)))))AND(((v0.c2)==(v0.c0)))))AND((((v0.c0))<=((v0.c0))))))AND('1121700487'))  NULLS FIRST;
SELECT * FROM v0 WHERE (0.5787130268887571) ORDER BY (((v0.c1)<>(v0.c2)) IN ('p')), (((((v0.c2, v0.c2, v0.c1))<=((v0.c0, v0.c0, v0.c2))))GLOB(((v0.c2)%(v0.c0))))  NULLS FIRST INTERSECT SELECT * FROM v0 WHERE ((((CAST(v0.c0 AS TEXT), ((v0.c0)-(v0.c0)), (('-1408674184') NOT BETWEEN ('1843766385') AND (v0.c1))))=((((((v0.c2)AND(v0.c0)))OR(v0.c2)), (v0.c0 IN ()), 1272495034)))) ORDER BY (((v0.c1)<>(v0.c2)) IN ('p')), (((((v0.c2, v0.c2, v0.c1))<=((v0.c0, v0.c0, v0.c2))))GLOB(((v0.c2)%(v0.c0))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE (((0.50294349359328) BETWEEN (x'b8' COLLATE NOCASE) AND (CAST(v0.c2 AS REAL))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((0.50294349359328) BETWEEN (x'b8' COLLATE NOCASE) AND (CAST(v0.c2 AS REAL)))) ORDER BY ((((v0.c0) NOT NULL))==(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))));
SELECT ALL MIN(v0.c2) FROM v0 WHERE ((CAST(v0.c2 AS BLOB) IN ())) ORDER BY TRIM(DISTINCT v0.c1 COLLATE RTRIM)  NULLS LAST, '-1041798495' ASC;
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE ((CAST(v0.c2 AS BLOB) IN ())) ORDER BY TRIM(DISTINCT v0.c1 COLLATE RTRIM)  NULLS LAST, '-1041798495' ASC;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0 COLLATE RTRIM, CASE vt1.c0  WHEN 0.7476133037444082 THEN vt1.c1 WHEN vt1.c0 THEN 0.07890941211244817 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END, vt1.c1 COLLATE BINARY))>=(((vt1.c1 IN (-1.017404822E9)), vt1.c0 COLLATE RTRIM, DATETIME(vt1.c0, '-1012373584', vt1.c0, vt1.c1))))) ORDER BY ((vt1.c1 COLLATE NOCASE)*(UPPER(vt1.c0))), ((((vt1.c1) NOT NULL))>(TRIM(DISTINCT vt1.c1, vt1.c1))) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c0 COLLATE RTRIM, CASE vt1.c0  WHEN 0.7476133037444082 THEN vt1.c1 WHEN vt1.c0 THEN 0.07890941211244817 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END, vt1.c1 COLLATE BINARY))=(((vt1.c1 IN (-1.017404822E9)), vt1.c0 COLLATE RTRIM, DATETIME(vt1.c0, '-1012373584', vt1.c0, vt1.c1))))) ORDER BY CAST(CASE WHEN vt1.c0 THEN vt1.c0 END AS REAL), (((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))!=((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN '-316303965' ELSE vt1.c0 END)))  NULLS FIRST;
SELECT MAX(vt1.c1) FROM vt1 WHERE (CAST(((vt1.c1) IS TRUE) AS TEXT));
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (CAST(((vt1.c1) IS TRUE) AS TEXT)) ORDER BY vt1.c0  NULLS LAST, x''  NULLS FIRST, (- (CASE 0.9782707676543995  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END)) ASC, x'' DESC  NULLS FIRST INTERSECT SELECT MAX(vt1.c1) FROM vt1 WHERE ((((vt1.c1, vt1.c1, vt1.c0)) BETWEEN ((CASE WHEN NULL THEN vt1.c1 END, TRIM(DISTINCT vt1.c0, 0.8195355274996189), vt1.c0)) AND ((((vt1.c0)>>(0xffffffffd165986d)), (- (vt1.c0)), ((vt1.c0)*(vt1.c0)))))) ORDER BY vt1.c0  NULLS LAST, x''  NULLS FIRST, (- (CASE 0.9782707676543995  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END)) ASC, x'' DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2))) IS FALSE)) ORDER BY ((v0.c2 COLLATE NOCASE) NOT NULL) ASC  NULLS FIRST, (CAST(v0.c0 AS TEXT) IN ());
SELECT DISTINCT * FROM v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2))) IS FALSE)) ORDER BY v0.c0 DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2))) IS FALSE)) ORDER BY ((v0.c2 COLLATE NOCASE) NOT NULL) ASC  NULLS FIRST, (CAST(v0.c0 AS TEXT) IN ());
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((0.7644881130975221) IS FALSE));
SELECT MAX(v0.c2) FROM v0 WHERE (((((0.7644881130975221) IS FALSE))AND(LENGTH(((v0.c1)<(v0.c2)))))) ORDER BY CAST(v0.c0 AS NUMERIC) DESC LIMIT 1;
SELECT * FROM vt1 WHERE (((UPPER(vt1.c0))OR('614058485' COLLATE BINARY)));
SELECT DISTINCT * FROM vt1 WHERE (((UPPER(vt1.c0))OR('614058485' COLLATE BINARY)));
SELECT * FROM vt1 WHERE (((UPPER(vt1.c0))OR('614058485' COLLATE BINARY)));
SELECT DISTINCT * FROM vt1 WHERE (((UPPER(vt1.c0))OR('614058485' COLLATE BINARY)));
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((PRINTF(vt1.c1, 0.039742854907432346, vt1.c1))%(((vt1.c1)||(vt1.c1)))));
SELECT MIN(vt1.c1) FROM vt1 WHERE (((PRINTF(vt1.c1, 0.039742854907432346, vt1.c1))%(((vt1.c1)||(vt1.c1))))) LIMIT 0X0 INTERSECT SELECT MIN(vt1.c1) FROM vt1 WHERE (CAST((((vt1.c1, vt1.c1, vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0, '{cP'))) AS REAL)) LIMIT 0;
SELECT MIN(vt1.c1) FROM vt1 WHERE (((((((((((vt1.c0) ISNULL))AND(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END)))AND((((vt1.c0, vt1.c1))<=((vt1.c0, vt1.c0))))))OR(((vt1.c1)<<(vt1.c0)))))AND(CAST(vt1.c0 AS REAL))));
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((((((((((vt1.c0) ISNULL))AND(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END)))AND((((vt1.c0, vt1.c1))==((vt1.c0, vt1.c0))))))OR(((vt1.c1)<<(vt1.c0)))))AND(CAST(vt1.c0 AS REAL)))) ORDER BY (NOT (((vt1.c0)LIKE(vt1.c0)))), vt1.c1  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((vt1.c0 IN (x'', vt1.c1)) IN (x'46b096', vt1.c1 COLLATE BINARY))) ORDER BY (NOT (((vt1.c0)LIKE(vt1.c0)))), vt1.c1  NULLS LAST;
SELECT MIN(vt1.c1) FROM vt1 NOT INDEXED WHERE ((vt1.c1 COLLATE RTRIM IN ())) ORDER BY ((((vt1.c0) ISNULL))IS(CHAR(vt1.c1, vt1.c0))) ASC, ((CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)GLOB(CAST(NULL AS BLOB))) ASC  NULLS LAST;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((vt1.c1 COLLATE RTRIM IN ())) ORDER BY CASE (((vt1.c1, vt1.c1, x'edae'))<((vt1.c1, vt1.c0, vt1.c0)))  WHEN NULLIF(DISTINCT vt1.c1, vt1.c1) THEN (vt1.c1 IN (vt1.c0)) WHEN '' THEN (('9Q!Tzo') ISNULL) END DESC LIMIT 0X1 INTERSECT SELECT MIN(vt1.c1) FROM vt1 WHERE ((~ (CAST(vt1.c1 AS INTEGER)))) ORDER BY CASE (((vt1.c1, vt1.c1, x'edae'))<((vt1.c1, vt1.c0, vt1.c0)))  WHEN NULLIF(DISTINCT vt1.c1, vt1.c1) THEN (vt1.c1 IN (vt1.c0)) WHEN '' THEN (('9Q!Tzo') ISNULL) END DESC LIMIT 1;
SELECT * FROM vt1, v0 WHERE ((+ ((vt1.c0 IN (NULL))))) ORDER BY ((((vt1.c0))<((v0.c0))) IN (CAST(x'17' AS TEXT), v0.c0 COLLATE NOCASE)) ASC  NULLS FIRST, (NOT (vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((+ ((vt1.c0 IN (NULL))))) ORDER BY ((((vt1.c0))<((v0.c0))) IN (CAST(x'17' AS TEXT), v0.c0 COLLATE NOCASE)) ASC  NULLS FIRST, (NOT (vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((+ ((vt1.c0 IN (NULL))))) ORDER BY ((((vt1.c0))<((v0.c0))) IN (CAST(x'17' AS TEXT), v0.c0 COLLATE NOCASE)) ASC  NULLS FIRST, (NOT (vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((+ ((vt1.c0 IN (NULL))))) ORDER BY ((((vt1.c0))<((v0.c0))) IN (CAST(x'17' AS TEXT), v0.c0 COLLATE NOCASE)) ASC  NULLS FIRST, (NOT (vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT MAX(v0.c0) FROM vt1, v0 WHERE ('!韖4') ORDER BY (((v0.c0) IS FALSE) IN (((v0.c0)>=(v0.c2)), CAST(v0.c2 AS INTEGER))) DESC  NULLS FIRST, ((((CAST(v0.c0 AS NUMERIC))OR((NOT (vt1.c1)))))AND(CASE WHEN v0.c1 THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 END))  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE ('!韖4') ORDER BY v0.c0 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE (CASE WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END COLLATE BINARY) ORDER BY v0.c0;
SELECT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE ((((+ (v0.c2)))=(LTRIM(v0.c1))));
SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE ((((+ (v0.c2)))=(LTRIM(v0.c1)))) ORDER BY ((((v0.c0) NOT BETWEEN (vt1.c0) AND (NULL)))IS(((vt1.c0) NOT NULL)))  NULLS LAST, (((((vt1.c0))>((v0.c0))))>>(((((((((((vt1.c0)OR(vt1.c1)))OR(v0.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(NULL)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE (((x'')+(CASE vt1.c0  WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END))) ORDER BY ((((v0.c0) NOT BETWEEN (vt1.c0) AND (NULL)))IS(((vt1.c0) NOT NULL)))  NULLS LAST, (((((vt1.c0))>((v0.c0))))>>(((((((((((vt1.c0)OR(vt1.c1)))OR(v0.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(NULL)))) DESC  NULLS LAST;
SELECT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE ((((+ (v0.c2)))=(LTRIM(v0.c1))));
SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE ((((+ (v0.c2)))=(LTRIM(v0.c1)))) ORDER BY ((((v0.c0) NOT BETWEEN (vt1.c0) AND (NULL)))IS(((vt1.c0) NOT NULL)))  NULLS LAST, (((((vt1.c0))>((v0.c0))))>>(((((((((((vt1.c0)OR(vt1.c1)))OR(v0.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(NULL)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE (((x'')+(CASE vt1.c0  WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END))) ORDER BY ((((v0.c0) NOT BETWEEN (vt1.c0) AND (NULL)))IS(((vt1.c0) NOT NULL)))  NULLS LAST, (((((vt1.c0))>((v0.c0))))>>(((((((((((vt1.c0)OR(vt1.c1)))OR(v0.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(NULL)))) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (((((vt1.c0)IS NOT(vt1.c0))) IS TRUE)) ORDER BY CAST(((vt1.c1)<(vt1.c0)) AS REAL)  NULLS FIRST, (NOT (((vt1.c1)LIKE(vt1.c1)))) ASC  NULLS FIRST, (~ ((vt1.c0 IN (vt1.c1)))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)IS NOT(vt1.c0))) IS TRUE))AND(CAST((- (vt1.c1)) AS NUMERIC)))) ORDER BY COALESCE(CASE WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END, CAST(NULL AS BLOB))  NULLS FIRST, CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)) WHEN (0.09123091697517827 IN (vt1.c0, vt1.c0)) THEN '-921552640' END, '-106726791' ASC  NULLS FIRST, ((vt1.c1 COLLATE RTRIM) BETWEEN (((vt1.c1)*(vt1.c0))) AND (((vt1.c1)/(vt1.c0)))) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((+ (vt1.c1)))<=(CAST('0.43362553554098515' AS NUMERIC)))) ORDER BY COALESCE(CASE WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END, CAST(NULL AS BLOB))  NULLS FIRST, CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)) WHEN (0.09123091697517827 IN (vt1.c0, vt1.c0)) THEN '-921552640' END, '-106726791' ASC  NULLS FIRST, ((vt1.c1 COLLATE RTRIM) BETWEEN (((vt1.c1)*(vt1.c0))) AND (((vt1.c1)/(vt1.c0)))) ASC LIMIT 0;
SELECT * FROM vt1 WHERE (((((vt1.c0)IS NOT(vt1.c0))) IS TRUE)) ORDER BY CAST(((vt1.c1)<(vt1.c0)) AS REAL)  NULLS FIRST, (NOT (((vt1.c1)LIKE(vt1.c1)))) ASC  NULLS FIRST, (~ ((vt1.c0 IN (vt1.c1)))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)IS NOT(vt1.c0))) IS TRUE))AND(CAST((- (vt1.c1)) AS NUMERIC)))) ORDER BY COALESCE(CASE WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END, CAST(NULL AS BLOB))  NULLS FIRST, CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)) WHEN (0.09123091697517827 IN (vt1.c0, vt1.c0)) THEN '-921552640' END, '-106726791' ASC  NULLS FIRST, ((vt1.c1 COLLATE RTRIM) BETWEEN (((vt1.c1)*(vt1.c0))) AND (((vt1.c1)/(vt1.c0)))) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((+ (vt1.c1)))<=(CAST('0.43362553554098515' AS NUMERIC)))) ORDER BY COALESCE(CASE WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END, CAST(NULL AS BLOB))  NULLS FIRST, CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)) WHEN (0.09123091697517827 IN (vt1.c0, vt1.c0)) THEN '-921552640' END, '-106726791' ASC  NULLS FIRST, ((vt1.c1 COLLATE RTRIM) BETWEEN (((vt1.c1)*(vt1.c0))) AND (((vt1.c1)/(vt1.c0)))) ASC LIMIT 0;
SELECT MIN(vt1.c0) FROM v0, vt1 WHERE ((~ ((((v0.c0, vt1.c0))==((vt1.c1, vt1.c0)))))) ORDER BY LIKE((((v0.c2, vt1.c1))>=((NULL, vt1.c1))), (v0.c0 IN (v0.c2, vt1.c1)), 'S') ASC;
SELECT DISTINCT MIN(vt1.c0) FROM v0, vt1 WHERE ((~ ((((v0.c0, vt1.c0))=((vt1.c1, vt1.c0)))))) ORDER BY LIKE((((v0.c2, vt1.c1))>=((NULL, vt1.c1))), (v0.c0 IN (v0.c2, vt1.c1)), 'S') ASC LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM v0, vt1 WHERE (((v0.c0) NOT BETWEEN (CASE WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END) AND (v0.c2))) ORDER BY LIKE((((v0.c2, vt1.c1))>=((NULL, vt1.c1))), (v0.c0 IN (v0.c2, vt1.c1)), 'S') ASC LIMIT 0x1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (load_extension(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c0) NOT BETWEEN (NULL) AND ('H}'))));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((load_extension(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)), ((vt1.c0) NOT BETWEEN (NULL) AND ('H}'))))AND((~ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (NULL))))))) ORDER BY ((vt1.c0 COLLATE BINARY) NOTNULL)  NULLS LAST, (~ (vt1.c1)) DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ('-1165827142') ORDER BY ((vt1.c0 COLLATE BINARY) NOTNULL)  NULLS LAST, (~ (vt1.c1)) DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (0.853592569544009) ORDER BY v0.c0  NULLS FIRST, CAST(vt1.c1 COLLATE BINARY AS NUMERIC) DESC;
SELECT ALL * FROM vt1, v0 WHERE (((0.853592569544009)AND(LIKELIHOOD(DISTINCT (((vt1.c1))!=((vt1.c1))), ((vt1.c0)%(vt1.c0)))))) ORDER BY v0.c0  NULLS FIRST, CAST(vt1.c1 COLLATE BINARY AS NUMERIC) DESC LIMIT 0X2 INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((((((((((((('-2106188526')AND(CAST(v0.c0 AS BLOB))))AND(v0.c1 COLLATE NOCASE)))AND(v0.c2)))OR(CAST(v0.c0 AS BLOB))))AND(((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1)))))AND(((vt1.c1)>>(vt1.c0))))) ORDER BY v0.c0  NULLS FIRST, CAST(vt1.c1 COLLATE BINARY AS NUMERIC) DESC LIMIT 2;
SELECT ALL * FROM vt1, v0 WHERE (0.853592569544009) ORDER BY v0.c0  NULLS FIRST, CAST(vt1.c1 COLLATE BINARY AS NUMERIC) DESC;
SELECT ALL * FROM vt1, v0 WHERE (((0.853592569544009)AND(LIKELIHOOD(DISTINCT (((vt1.c1))!=((vt1.c1))), ((vt1.c0)%(vt1.c0)))))) ORDER BY v0.c0  NULLS FIRST, CAST(vt1.c1 COLLATE BINARY AS NUMERIC) DESC LIMIT 0X2 INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((((((((((((('-2106188526')AND(CAST(v0.c0 AS BLOB))))AND(v0.c1 COLLATE NOCASE)))AND(v0.c2)))OR(CAST(v0.c0 AS BLOB))))AND(((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1)))))AND(((vt1.c1)>>(vt1.c0))))) ORDER BY v0.c0  NULLS FIRST, CAST(vt1.c1 COLLATE BINARY AS NUMERIC) DESC LIMIT 2;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((((x'')/('-1882370191')))&(vt1.c1))) ORDER BY ((vt1.c1 COLLATE BINARY) IS TRUE), vt1.c1  NULLS LAST;
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((((x'')/('-1882370191')))&(vt1.c1))) ORDER BY CASE WHEN NULL THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)) WHEN '1367184240' THEN QUOTE(vt1.c0) WHEN ((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0)) THEN (+ (vt1.c0)) WHEN vt1.c0 THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE 1.847681787E9 END END ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((((v0.c1) BETWEEN (v0.c0) AND (v0.c2)), v0.c2, ((v0.c0)+(v0.c0))))!=((v0.c1 COLLATE BINARY, (+ (v0.c0)), '냆'))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((v0.c1) BETWEEN (v0.c0) AND (v0.c2)), v0.c2, ((v0.c0)+(v0.c0))))<>((v0.c1 COLLATE BINARY, (+ (v0.c0)), '냆')))) ORDER BY (((((vt1.c0)>(v0.c1)), v0.c2 COLLATE RTRIM, NULL))<=((((v0.c0)=(vt1.c1)), ((((vt1.c0)AND(vt1.c1)))AND(vt1.c1)), ((v0.c2)>(v0.c0))))), ((v0.c1) BETWEEN (((vt1.c0) BETWEEN (0.4166896493215777) AND (v0.c1))) AND (((x'') IS TRUE)))  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE ((((((v0.c1) BETWEEN (v0.c0) AND (v0.c2)), v0.c2, ((v0.c0)+(v0.c0))))!=((v0.c1 COLLATE BINARY, (+ (v0.c0)), '냆'))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((v0.c1) BETWEEN (v0.c0) AND (v0.c2)), v0.c2, ((v0.c0)+(v0.c0))))<>((v0.c1 COLLATE BINARY, (+ (v0.c0)), '냆')))) ORDER BY (((((vt1.c0)>(v0.c1)), v0.c2 COLLATE RTRIM, NULL))<=((((v0.c0)=(vt1.c1)), ((((vt1.c0)AND(vt1.c1)))AND(vt1.c1)), ((v0.c2)>(v0.c0))))), ((v0.c1) BETWEEN (((vt1.c0) BETWEEN (0.4166896493215777) AND (v0.c1))) AND (((x'') IS TRUE)))  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((((vt1.c0) IS FALSE))AND(LENGTH(x''))))AND(vt1.c0))) ORDER BY (((vt1.c0 IN ())) NOT BETWEEN (CASE WHEN vt1.c0 THEN '0.718401191265116' WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END) AND (CASE WHEN vt1.c1 THEN vt1.c1 END)) ASC  NULLS FIRST, CAST((vt1.c1 IN ()) AS TEXT) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((((vt1.c0) IS FALSE))AND(LENGTH(x''))))AND(vt1.c0))) ORDER BY CAST(((vt1.c0)<(vt1.c1)) AS BLOB) INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))) BETWEEN (((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1))) AND (CASE 0.6391789048521844  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN '%(djmkj-p' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY CAST(((vt1.c0)<(vt1.c1)) AS BLOB);
SELECT * FROM vt1 WHERE (((((((vt1.c0) IS FALSE))AND(LENGTH(x''))))AND(vt1.c0))) ORDER BY (((vt1.c0 IN ())) NOT BETWEEN (CASE WHEN vt1.c0 THEN '0.718401191265116' WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END) AND (CASE WHEN vt1.c1 THEN vt1.c1 END)) ASC  NULLS FIRST, CAST((vt1.c1 IN ()) AS TEXT) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((((vt1.c0) IS FALSE))AND(LENGTH(x''))))AND(vt1.c0))) ORDER BY CAST(((vt1.c0)<(vt1.c1)) AS BLOB) INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))) BETWEEN (((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1))) AND (CASE 0.6391789048521844  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN '%(djmkj-p' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY CAST(((vt1.c0)<(vt1.c1)) AS BLOB);
SELECT * FROM v0 WHERE (('{KSi䪣E\+2' IN (((((v0.c2)OR(v0.c2)))AND(v0.c1))))) ORDER BY '1016608984' ASC  NULLS LAST, v0.c2  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (('{KSi䪣E\+2' IN (((((v0.c2)OR(v0.c2)))AND(v0.c1))))) ORDER BY (NOT (json_array_length(v0.c1, v0.c0))) ASC LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((v0.c0, NULL, v0.c0, v0.c2)) NOT BETWEEN (('-1408674184', v0.c2, v0.c1, v0.c2)) AND ((v0.c1, v0.c1, v0.c1, v0.c1)))) NOTNULL)) ORDER BY (NOT (json_array_length(v0.c1, v0.c0))) ASC LIMIT 0x3;
SELECT * FROM v0 WHERE (('{KSi䪣E\+2' IN (((((v0.c2)OR(v0.c2)))AND(v0.c1))))) ORDER BY '1016608984' ASC  NULLS LAST, v0.c2  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (('{KSi䪣E\+2' IN (((((v0.c2)OR(v0.c2)))AND(v0.c1))))) ORDER BY (NOT (json_array_length(v0.c1, v0.c0))) ASC LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((v0.c0, NULL, v0.c0, v0.c2)) NOT BETWEEN (('-1408674184', v0.c2, v0.c1, v0.c2)) AND ((v0.c1, v0.c1, v0.c1, v0.c1)))) NOTNULL)) ORDER BY (NOT (json_array_length(v0.c1, v0.c0))) ASC LIMIT 0x3;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((CASE WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END) NOT NULL)) ORDER BY ((0Xffffffffc403dc3e)>=('NMi')), NULL;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((CASE WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END) NOT NULL)) ORDER BY (((vt1.c0) NOT NULL) IN ());
SELECT MIN(vt1.c0) FROM vt1 WHERE (((~ (vt1.c1)) IN ())) ORDER BY ((0X22f16c81) IS FALSE) DESC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((~ (vt1.c1)) IN ())) ORDER BY ((((((((x'')OR(((vt1.c1) NOTNULL))))AND(((vt1.c0)AND(vt1.c0)))))OR((vt1.c1 IN (vt1.c1)))))AND(IFNULL(-1587616594, vt1.c1))) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt1, v0 WHERE (((((((((v0.c2)||(v0.c2)))AND((((v0.c0))<>((vt1.c1))))))OR(((((((vt1.c1)OR(v0.c0)))OR(v0.c1)))AND(vt1.c0)))))AND(CAST(v0.c0 AS INTEGER)))) ORDER BY (('R>繂2,.m<')|(((vt1.c0)/(v0.c2))));
SELECT COUNT(*) FROM vt1, v0 WHERE (((((((((v0.c2)||(v0.c2)))AND((((v0.c0))<((vt1.c1))))))OR(((((((vt1.c1)OR(v0.c0)))OR(v0.c1)))AND(vt1.c0)))))AND(CAST(v0.c0 AS INTEGER)))) ORDER BY ((((vt1.c1)||(v0.c2)))IS NOT(((vt1.c0) IS TRUE))) DESC, (((v0.c1, v0.c1)) NOT BETWEEN ((((((v0.c2)OR(v0.c0)))AND(v0.c2)), json_array_length(x''))) AND (((((vt1.c0))==((v0.c1))), (vt1.c0 IN (vt1.c0, v0.c2)))));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((CHAR('i'))GLOB(((vt1.c1)=(vt1.c1))))) ORDER BY (((vt1.c0 IN (vt1.c0, vt1.c0)))||(((vt1.c0)IS NOT(0.8043486101539797)))) DESC  NULLS LAST, (LOWER(vt1.c0) IN ()) ASC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((CHAR('i'))GLOB(((vt1.c1)==(vt1.c1)))))AND(CAST((((vt1.c1, vt1.c0))<((vt1.c1, vt1.c1))) AS BLOB)))) ORDER BY (((vt1.c0 IN (vt1.c0, vt1.c0)))||(((vt1.c0)IS NOT(0.8043486101539797)))) DESC  NULLS LAST, (LOWER(vt1.c0) IN ()) ASC LIMIT 0;
SELECT ALL * FROM v0 WHERE (x'');
SELECT ALL * FROM v0 WHERE (x'') ORDER BY CAST((((v0.c2))<((v0.c2))) AS NUMERIC)  NULLS LAST;
SELECT ALL * FROM v0 WHERE (x'');
SELECT ALL * FROM v0 WHERE (x'') ORDER BY CAST((((v0.c2))<((v0.c2))) AS NUMERIC)  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (((QUOTE(vt1.c0)) ISNULL)) ORDER BY LIKELY(((v0.c2)|(v0.c2)));
SELECT * FROM vt1, v0 WHERE (((((QUOTE(vt1.c0)) ISNULL))AND(HEX((+ (v0.c1)))))) ORDER BY ((((((((CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN 0.4077216062271507 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END)AND((((v0.c0, vt1.c0))=((vt1.c1, vt1.c1))))))OR(vt1.c0 COLLATE BINARY)))AND(INSTR(vt1.c1, v0.c0))))OR(((v0.c1) NOT NULL))) ASC  NULLS FIRST, CAST(vt1.c1 AS TEXT) LIMIT 3 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CAST(CAST(vt1.c1 AS NUMERIC) AS REAL)) ORDER BY ((((((((CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN 0.4077216062271507 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END)AND((((v0.c0, vt1.c0))=((vt1.c1, vt1.c1))))))OR(vt1.c0 COLLATE BINARY)))AND(INSTR(vt1.c1, v0.c0))))OR(((v0.c1) NOT NULL))) ASC  NULLS FIRST, CAST(vt1.c1 AS TEXT) LIMIT 0x3;
SELECT * FROM vt1, v0 WHERE (((QUOTE(vt1.c0)) ISNULL)) ORDER BY LIKELY(((v0.c2)|(v0.c2)));
SELECT * FROM vt1, v0 WHERE (((((QUOTE(vt1.c0)) ISNULL))AND(HEX((+ (v0.c1)))))) ORDER BY ((((((((CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN 0.4077216062271507 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END)AND((((v0.c0, vt1.c0))=((vt1.c1, vt1.c1))))))OR(vt1.c0 COLLATE BINARY)))AND(INSTR(vt1.c1, v0.c0))))OR(((v0.c1) NOT NULL))) ASC  NULLS FIRST, CAST(vt1.c1 AS TEXT) LIMIT 3 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CAST(CAST(vt1.c1 AS NUMERIC) AS REAL)) ORDER BY ((((((((CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN 0.4077216062271507 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END)AND((((v0.c0, vt1.c0))=((vt1.c1, vt1.c1))))))OR(vt1.c0 COLLATE BINARY)))AND(INSTR(vt1.c1, v0.c0))))OR(((v0.c1) NOT NULL))) ASC  NULLS FIRST, CAST(vt1.c1 AS TEXT) LIMIT 0x3;
SELECT * FROM v0 WHERE (v0.c1);
SELECT * FROM v0 WHERE (((v0.c1)AND(CASE WHEN ((0.02771436354942547)GLOB(v0.c1)) THEN ((v0.c2)>(v0.c2)) WHEN (((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))) THEN v0.c2 COLLATE NOCASE ELSE v0.c0 END))) LIMIT 0X2;
SELECT * FROM v0 WHERE (v0.c1);
SELECT * FROM v0 WHERE (((v0.c1)AND(CASE WHEN ((0.02771436354942547)GLOB(v0.c1)) THEN ((v0.c2)>(v0.c2)) WHEN (((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))) THEN v0.c2 COLLATE NOCASE ELSE v0.c0 END))) LIMIT 0X2;
SELECT COUNT(*) FROM v0, vt1 WHERE (CAST(v0.c0 AS TEXT) COLLATE RTRIM COLLATE BINARY);
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (CAST(v0.c0 AS TEXT) COLLATE RTRIM COLLATE BINARY) LIMIT 3;
SELECT MIN(v0.c0) FROM vt1 CROSS JOIN v0 ON ((vt1.c1)=(vt1.c1)) COLLATE RTRIM WHERE ((((v0.c2)IS(vt1.c0)) IN (v0.c0)));
SELECT MIN(v0.c0) FROM vt1 CROSS JOIN v0 ON ((vt1.c1)==(vt1.c1)) COLLATE RTRIM WHERE ((((((v0.c2)IS(vt1.c0)) IN (v0.c0)))AND(CASE WHEN ((vt1.c0)>(v0.c0)) THEN LOWER(v0.c2) ELSE (((v0.c1, v0.c0)) BETWEEN ((vt1.c0, vt1.c1)) AND ((v0.c0, v0.c1))) END)));
SELECT COUNT(*) FROM v0, vt1 WHERE ((((v0.c0, vt1.c0, x'', vt1.c1, vt1.c0, '-640489221'))<((0.5605147023960578, 101352890, vt1.c1, v0.c2, vt1.c1, v0.c1))) COLLATE RTRIM) ORDER BY LIKELIHOOD((NOT (v0.c1)), CASE WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END), ((((((((v0.c0)AND(v0.c2)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)) COLLATE RTRIM ASC, ((('0.6437225982604254')) BETWEEN ((((v0.c1) IS TRUE))) AND ((CASE v0.c2  WHEN 0X3370d09d THEN v0.c2 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 ELSE v0.c1 END)));
SELECT COUNT(*) FROM v0, vt1 WHERE ((((((v0.c0, vt1.c0, x'', vt1.c1, vt1.c0, '-640489221'))<((0.5605147023960578, 101352890, vt1.c1, v0.c2, vt1.c1, v0.c1))) COLLATE RTRIM)AND((((+ (vt1.c0))) NOT BETWEEN ('522858317') AND (vt1.c1 COLLATE BINARY))))) ORDER BY LIKELIHOOD((NOT (v0.c1)), CASE WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END), ((((((((v0.c0)AND(v0.c2)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)) COLLATE RTRIM ASC, ((('0.6437225982604254')) BETWEEN ((((v0.c1) IS TRUE))) AND ((CASE v0.c2  WHEN 0x3370d09d THEN v0.c2 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 ELSE v0.c1 END))) INTERSECT SELECT COUNT(*) FROM v0, vt1 WHERE (SQLITE_SOURCE_ID()) ORDER BY LIKELIHOOD((NOT (v0.c1)), CASE WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END), ((((((((v0.c0)AND(v0.c2)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)) COLLATE RTRIM ASC, ((('0.6437225982604254')) BETWEEN ((((v0.c1) IS TRUE))) AND ((CASE v0.c2  WHEN 863031453 THEN v0.c2 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 ELSE v0.c1 END)));
SELECT ALL * FROM v0 WHERE (CASE WHEN (~ (v0.c2)) THEN (0.19982115890034713 IN (v0.c0)) ELSE CAST(v0.c1 AS BLOB) END) ORDER BY v0.c1  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((CASE WHEN (~ (v0.c2)) THEN (0.19982115890034713 IN (v0.c0)) ELSE CAST(v0.c1 AS BLOB) END)AND(((((((((v0.c2) ISNULL))AND(CAST(v0.c1 AS NUMERIC))))AND(CAST(v0.c0 AS INTEGER))))AND(((((((((((v0.c1)AND(v0.c2)))OR(v0.c2)))OR(v0.c1)))AND(v0.c2)))AND(v0.c0))))))) ORDER BY v0.c1  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CASE WHEN (~ (v0.c2)) THEN (0.19982115890034713 IN (v0.c0)) ELSE CAST(v0.c1 AS BLOB) END) ORDER BY v0.c1  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((CASE WHEN (~ (v0.c2)) THEN (0.19982115890034713 IN (v0.c0)) ELSE CAST(v0.c1 AS BLOB) END)AND(((((((((v0.c2) ISNULL))AND(CAST(v0.c1 AS NUMERIC))))AND(CAST(v0.c0 AS INTEGER))))AND(((((((((((v0.c1)AND(v0.c2)))OR(v0.c2)))OR(v0.c1)))AND(v0.c2)))AND(v0.c0))))))) ORDER BY v0.c1  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((UNLIKELY(vt1.c1) IN (x'ad4e3a61', ((vt1.c0) IS FALSE))));
SELECT DISTINCT * FROM vt1 WHERE ((((UNLIKELY(vt1.c1) IN (x'ad4e3a61', ((vt1.c0) IS FALSE))))AND(vt1.c0))) LIMIT 2;
SELECT ALL * FROM vt1 WHERE ((UNLIKELY(vt1.c1) IN (x'ad4e3a61', ((vt1.c0) IS FALSE))));
SELECT DISTINCT * FROM vt1 WHERE ((((UNLIKELY(vt1.c1) IN (x'ad4e3a61', ((vt1.c0) IS FALSE))))AND(vt1.c0))) LIMIT 2;
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE (((vt1.c0) NOT NULL)) ORDER BY (v0.c1 IN (vt1.c1, v0.c1)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (((((vt1.c0) NOT NULL))AND((((('b.mOS')AND(vt1.c1))) NOT BETWEEN (((((((((((((v0.c0)OR(v0.c1)))AND(0.2608079013316589)))AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)))AND(v0.c1))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))))) ORDER BY ((~ (v0.c1)) IN (((v0.c1)-(vt1.c0)), ((vt1.c1)/(0.9424416313528227)))) DESC  NULLS LAST, v0.c1 ASC  NULLS LAST INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (((((v0.c1) BETWEEN (v0.c2) AND (v0.c0)))&(UPPER(vt1.c0)))) ORDER BY ((~ (v0.c1)) IN (((v0.c1)-(vt1.c0)), ((vt1.c1)/(0.9424416313528227)))) DESC  NULLS LAST, v0.c1 ASC  NULLS LAST;
SELECT MAX(v0.c1) FROM vt1, v0 WHERE (CASE WHEN v0.c2 THEN v0.c1 WHEN ((vt1.c1) NOT BETWEEN ('') AND (vt1.c0)) THEN (((vt1.c1, v0.c1, vt1.c1, 0.633418533665081)) BETWEEN ((vt1.c1, v0.c2, v0.c2, vt1.c0)) AND ((v0.c1, vt1.c0, v0.c1, vt1.c0))) WHEN vt1.c0 THEN ((v0.c0) ISNULL) END) ORDER BY CASE v0.c0  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN '4O' THEN v0.c2 WHEN '1769291611' THEN vt1.c1 ELSE v0.c1 END COLLATE RTRIM ASC;
SELECT ALL MAX(v0.c1) FROM vt1, v0 WHERE (((CASE WHEN v0.c2 THEN v0.c1 WHEN ((vt1.c1) NOT BETWEEN ('') AND (vt1.c0)) THEN (((vt1.c1, v0.c1, vt1.c1, 0.633418533665081)) BETWEEN ((vt1.c1, v0.c2, v0.c2, vt1.c0)) AND ((v0.c1, vt1.c0, v0.c1, vt1.c0))) WHEN vt1.c0 THEN ((v0.c0) ISNULL) END)AND((CASE WHEN '' THEN vt1.c0 WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 ELSE x'' END IN (((v0.c1)&(v0.c0))))))) ORDER BY CASE v0.c0  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN '4O' THEN v0.c2 WHEN '1769291611' THEN vt1.c1 ELSE v0.c1 END COLLATE RTRIM ASC LIMIT 0 INTERSECT SELECT ALL MAX(v0.c1) FROM vt1, v0 WHERE ((('327219427')|(vt1.c0)) COLLATE BINARY) ORDER BY CASE v0.c0  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN '4O' THEN v0.c2 WHEN '1769291611' THEN vt1.c1 ELSE v0.c1 END COLLATE RTRIM ASC LIMIT 0;
SELECT ALL MIN(v0.c2) FROM v0, vt1 WHERE ((((('991338534') NOT NULL))<=(((x'')<<(v0.c2))))) ORDER BY (((v0.c2, vt1.c0, vt1.c0, v0.c0, v0.c1))<((vt1.c0, v0.c0, vt1.c0, vt1.c1, '䈯'))) COLLATE BINARY, ((CASE WHEN vt1.c1 THEN v0.c1 WHEN v0.c2 THEN 0.00736750243932438 ELSE v0.c1 END) ISNULL);
SELECT DISTINCT MIN(v0.c2) FROM v0, vt1 WHERE ((((('991338534') NOT NULL))<=(((x'')<<(v0.c2))))) ORDER BY (- (x'')) LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (vt1.c1);
SELECT ALL * FROM vt1, v0 WHERE (vt1.c1) ORDER BY 0.19673147059193064 ASC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (vt1.c1);
SELECT ALL * FROM vt1, v0 WHERE (vt1.c1) ORDER BY 0.19673147059193064 ASC  NULLS FIRST LIMIT 0;
SELECT COUNT(*) FROM v0 WHERE ((((v0.c2 IN ()))==(v0.c0))) ORDER BY ((((v0.c2)<=(v0.c2))) BETWEEN (((((((((v0.c2)AND(v0.c1)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0))) AND (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)))) DESC, (((v0.c2)) BETWEEN (((v0.c2 IN (v0.c2)))) AND ((CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN 'ur' WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END))) DESC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((((v0.c2 IN ()))=(v0.c0)))AND((((v0.c2, v0.c0, v0.c2, v0.c1)) NOT BETWEEN ((((v0.c0) BETWEEN (v0.c2) AND (v0.c0)), ((v0.c1) IS TRUE), ((v0.c2) ISNULL), v0.c0)) AND ((0.6420051950400921, ((v0.c0) NOT NULL), ((((((v0.c0)OR(v0.c0)))AND(v0.c1)))OR(v0.c1)), (((v0.c0, v0.c1, v0.c2)) BETWEEN ((v0.c0, 0.7373698976612202, v0.c1)) AND ((v0.c1, v0.c2, v0.c0))))))))) ORDER BY ((((v0.c2)<=(v0.c2))) BETWEEN (((((((((v0.c2)AND(v0.c1)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0))) AND (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)))) DESC, (((v0.c2)) BETWEEN (((v0.c2 IN (v0.c2)))) AND ((CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN 'ur' WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END))) DESC LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (v0.c0 COLLATE NOCASE) ORDER BY ((((v0.c2)<=(v0.c2))) BETWEEN (((((((((v0.c2)AND(v0.c1)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0))) AND (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)))) DESC, (((v0.c2)) BETWEEN (((v0.c2 IN (v0.c2)))) AND ((CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN 'ur' WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END))) DESC LIMIT 0X1;
SELECT MAX(v0.c1) FROM v0 WHERE (CASE v0.c0  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN NULL WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END COLLATE RTRIM) ORDER BY NULL DESC  NULLS FIRST;
SELECT MAX(v0.c1) FROM v0 WHERE (CASE v0.c0  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN NULL WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END COLLATE RTRIM) ORDER BY NULL DESC  NULLS FIRST LIMIT 2 INTERSECT SELECT ALL MAX(v0.c1) FROM v0 WHERE (CAST((NOT (v0.c2)) AS TEXT)) ORDER BY NULL DESC  NULLS FIRST LIMIT 2;
SELECT ALL MAX(v0.c1) FROM v0 NATURAL JOIN vt1 WHERE ('');
SELECT DISTINCT MAX(v0.c1) FROM v0 NATURAL JOIN vt1 WHERE ('');
SELECT ALL * FROM vt1 NOT INDEXED, v0 WHERE ((((~ (vt1.c0)))<=(((v0.c2) ISNULL)))) ORDER BY (((((vt1.c0) BETWEEN (NULL) AND (vt1.c1))))<((((v0.c1)=(vt1.c0)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((~ (vt1.c0)))<=(((v0.c2) ISNULL)))) ORDER BY (((((vt1.c0) BETWEEN (NULL) AND (vt1.c1))))<((((v0.c1)==(vt1.c0))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c0)-(v0.c1)) IN (((v0.c2)!=(vt1.c1))))) ORDER BY (((((vt1.c0) BETWEEN (NULL) AND (vt1.c1))))<((((v0.c1)==(vt1.c0)))));
SELECT ALL * FROM vt1 NOT INDEXED, v0 WHERE ((((~ (vt1.c0)))<=(((v0.c2) ISNULL)))) ORDER BY (((((vt1.c0) BETWEEN (NULL) AND (vt1.c1))))<((((v0.c1)=(vt1.c0)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((~ (vt1.c0)))<=(((v0.c2) ISNULL)))) ORDER BY (((((vt1.c0) BETWEEN (NULL) AND (vt1.c1))))<((((v0.c1)==(vt1.c0))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c0)-(v0.c1)) IN (((v0.c2)!=(vt1.c1))))) ORDER BY (((((vt1.c0) BETWEEN (NULL) AND (vt1.c1))))<((((v0.c1)==(vt1.c0)))));
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((- (GLOB(v0.c1, v0.c1)))) ORDER BY v0.c0 ASC  NULLS LAST, (~ ((NOT (v0.c0)))) DESC, ((v0.c2)>((('1409977447')||(v0.c2)))) DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ((- (GLOB(v0.c1, v0.c1)))) ORDER BY v0.c2  NULLS LAST, ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) NOT BETWEEN (((v0.c2)>=(v0.c2))) AND (((((((v0.c0)AND(v0.c0)))AND(v0.c2)))OR(v0.c2)))) ASC, ((TRIM(DISTINCT v0.c1, v0.c2))<(((v0.c1)%(v0.c2)))) ASC  NULLS FIRST LIMIT 0x0;
SELECT COUNT(*) FROM vt1, v0 WHERE ((vt1.c0 IN (v0.c2)) COLLATE RTRIM) ORDER BY ((((vt1.c1) IS TRUE))IS((((v0.c1, v0.c2, vt1.c0, vt1.c0))>(('1843766385', vt1.c1, v0.c1, v0.c0)))))  NULLS FIRST, (LENGTH(v0.c0) IN (((v0.c0)+(x'43f8de')), ((v0.c2)!=(v0.c1))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((vt1.c0 IN (v0.c2)) COLLATE RTRIM)AND(LIKELIHOOD((v0.c1 IN (v0.c1)), ((vt1.c0)>=(NULL)))))) ORDER BY vt1.c1 ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (NULL) ORDER BY vt1.c1 ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE (CAST((((v0.c1, vt1.c1)) BETWEEN ((vt1.c0, v0.c1)) AND ((v0.c2, vt1.c1))) AS BLOB));
SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST((((v0.c1, vt1.c1)) BETWEEN ((vt1.c0, v0.c1)) AND ((v0.c2, vt1.c1))) AS BLOB))AND(((vt1.c0) ISNULL)))) LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0, vt1 NOT INDEXED WHERE (((((((((vt1.c0) IS FALSE))OR(((((((((vt1.c0)AND(v0.c1)))AND(v0.c1)))OR(v0.c1)))AND(0.42119120460291926)))))AND((v0.c1 IN ()))))OR(vt1.c0))) LIMIT 1;
SELECT * FROM v0, vt1 WHERE (CAST((((v0.c1, vt1.c1)) BETWEEN ((vt1.c0, v0.c1)) AND ((v0.c2, vt1.c1))) AS BLOB));
SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST((((v0.c1, vt1.c1)) BETWEEN ((vt1.c0, v0.c1)) AND ((v0.c2, vt1.c1))) AS BLOB))AND(((vt1.c0) ISNULL)))) LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0, vt1 NOT INDEXED WHERE (((((((((vt1.c0) IS FALSE))OR(((((((((vt1.c0)AND(v0.c1)))AND(v0.c1)))OR(v0.c1)))AND(0.42119120460291926)))))AND((v0.c1 IN ()))))OR(vt1.c0))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((((vt1.c1)OR(vt1.c0)))OR(vt1.c1))) AND (((vt1.c1) BETWEEN (x'47c8de18') AND (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((((vt1.c1)OR(vt1.c0)))OR(vt1.c1))) AND (((vt1.c1) BETWEEN (x'47c8de18') AND (vt1.c0)))))AND((vt1.c1 IN (vt1.c1, vt1.c1, vt1.c1)) COLLATE BINARY))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c1) BETWEEN (vt1.c0) AND (' ')))AND(CASE WHEN '-558414326' THEN 'AS.' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END)))OR(((((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))))OR(CAST(vt1.c1 AS TEXT))));
SELECT ALL * FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((((vt1.c1)OR(vt1.c0)))OR(vt1.c1))) AND (((vt1.c1) BETWEEN (x'47c8de18') AND (vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((((vt1.c1)OR(vt1.c0)))OR(vt1.c1))) AND (((vt1.c1) BETWEEN (x'47c8de18') AND (vt1.c0)))))AND((vt1.c1 IN (vt1.c1, vt1.c1, vt1.c1)) COLLATE BINARY))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((vt1.c1) BETWEEN (vt1.c0) AND (' ')))AND(CASE WHEN '-558414326' THEN 'AS.' WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END)))OR(((((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))))OR(CAST(vt1.c1 AS TEXT))));
SELECT MIN(vt1.c0) FROM vt1, v0 NOT INDEXED WHERE (((((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c1))) NOT BETWEEN (((((((vt1.c1)OR(vt1.c1)))OR('NX!Hn]+aA')))OR(vt1.c1))) AND ((vt1.c0 IN (vt1.c0)))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (((((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c1))) NOT BETWEEN (((((((vt1.c1)OR(vt1.c1)))OR('NX!Hn]+aA')))OR(vt1.c1))) AND ((vt1.c0 IN (vt1.c0))))) ORDER BY (((NULL)) NOT BETWEEN ((CASE v0.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END)) AND ((CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 END))), ((((v0.c0)OR((NOT (vt1.c1)))))AND(CASE v0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN NULL WHEN vt1.c0 THEN vt1.c1 END))  NULLS FIRST, CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)) AS BLOB) DESC  NULLS LAST LIMIT 1;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON v0.c1 WHERE ((((((((NOT (vt1.c1)))OR(((v0.c2)%(vt1.c0)))))AND(((x'')>>(v0.c1)))))AND((0.8310715250168766 IN (v0.c0, vt1.c1))))) ORDER BY (NOT (((vt1.c1) ISNULL)));
SELECT ALL * FROM v0 INNER JOIN vt1 ON v0.c1 WHERE ((((((((NOT (vt1.c1)))OR(((v0.c2)%(vt1.c0)))))AND(((x'')>>(v0.c1)))))AND((0.8310715250168766 IN (v0.c0, vt1.c1))))) ORDER BY (NOT (((vt1.c1) ISNULL))) INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON v0.c1 WHERE ((((+ (x'5083ac'))) NOT BETWEEN ('q') AND (v0.c2))) ORDER BY (NOT (((vt1.c1) ISNULL)));
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON v0.c1 WHERE ((((((((NOT (vt1.c1)))OR(((v0.c2)%(vt1.c0)))))AND(((x'')>>(v0.c1)))))AND((0.8310715250168766 IN (v0.c0, vt1.c1))))) ORDER BY (NOT (((vt1.c1) ISNULL)));
SELECT ALL * FROM v0 INNER JOIN vt1 ON v0.c1 WHERE ((((((((NOT (vt1.c1)))OR(((v0.c2)%(vt1.c0)))))AND(((x'')>>(v0.c1)))))AND((0.8310715250168766 IN (v0.c0, vt1.c1))))) ORDER BY (NOT (((vt1.c1) ISNULL))) INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON v0.c1 WHERE ((((+ (x'5083ac'))) NOT BETWEEN ('q') AND (v0.c2))) ORDER BY (NOT (((vt1.c1) ISNULL)));
SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE RTRIM)/((((vt1.c1))>((x'2b7bf6')))))) ORDER BY CASE ((vt1.c1)>(vt1.c1))  WHEN (((vt1.c1, x'e08e', x''))>((vt1.c1, '\G䓂', vt1.c1))) THEN ((vt1.c1)%(vt1.c0)) WHEN ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)) THEN (((vt1.c0, NULL)) NOT BETWEEN ((vt1.c0, vt1.c1)) AND ((vt1.c1, vt1.c0))) END DESC, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE BINARY  NULLS FIRST, (((((((((vt1.c0, vt1.c1))<((vt1.c0, vt1.c1))))OR((- (vt1.c1)))))AND(((vt1.c0)GLOB(vt1.c0)))))AND((~ (vt1.c1)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE RTRIM)/((((vt1.c1))>((x'2b7bf6')))))) ORDER BY ((((vt1.c1)IS NOT(vt1.c0))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (x'') AND (vt1.c1))) AND (vt1.c0))  NULLS FIRST, vt1.c0 DESC  NULLS FIRST, NULLIF(DISTINCT ((vt1.c1)<=(vt1.c0)), json_type(vt1.c0)) DESC INTERSECT SELECT ALL * FROM vt1 WHERE ((((-1.791157238E9, vt1.c0, vt1.c1)) BETWEEN ((NULL, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), CAST(vt1.c0 AS NUMERIC))) AND ((((vt1.c1)==(vt1.c1)), CAST(vt1.c0 AS NUMERIC), ((vt1.c1)-(x'be')))))) ORDER BY ((((vt1.c1)IS NOT(vt1.c0))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (x'') AND (vt1.c1))) AND (vt1.c0))  NULLS FIRST, vt1.c0 DESC  NULLS FIRST, NULLIF(DISTINCT ((vt1.c1)<=(vt1.c0)), json_type(vt1.c0)) DESC;
SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE RTRIM)/((((vt1.c1))>((x'2b7bf6')))))) ORDER BY CASE ((vt1.c1)>(vt1.c1))  WHEN (((vt1.c1, x'e08e', x''))>((vt1.c1, '\G䓂', vt1.c1))) THEN ((vt1.c1)%(vt1.c0)) WHEN ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)) THEN (((vt1.c0, NULL)) NOT BETWEEN ((vt1.c0, vt1.c1)) AND ((vt1.c1, vt1.c0))) END DESC, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE BINARY  NULLS FIRST, (((((((((vt1.c0, vt1.c1))<((vt1.c0, vt1.c1))))OR((- (vt1.c1)))))AND(((vt1.c0)GLOB(vt1.c0)))))AND((~ (vt1.c1)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE RTRIM)/((((vt1.c1))>((x'2b7bf6')))))) ORDER BY ((((vt1.c1)IS NOT(vt1.c0))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (x'') AND (vt1.c1))) AND (vt1.c0))  NULLS FIRST, vt1.c0 DESC  NULLS FIRST, NULLIF(DISTINCT ((vt1.c1)<=(vt1.c0)), json_type(vt1.c0)) DESC INTERSECT SELECT ALL * FROM vt1 WHERE ((((-1.791157238E9, vt1.c0, vt1.c1)) BETWEEN ((NULL, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), CAST(vt1.c0 AS NUMERIC))) AND ((((vt1.c1)==(vt1.c1)), CAST(vt1.c0 AS NUMERIC), ((vt1.c1)-(x'be')))))) ORDER BY ((((vt1.c1)IS NOT(vt1.c0))) NOT BETWEEN (((vt1.c0) NOT BETWEEN (x'') AND (vt1.c1))) AND (vt1.c0))  NULLS FIRST, vt1.c0 DESC  NULLS FIRST, NULLIF(DISTINCT ((vt1.c1)<=(vt1.c0)), json_type(vt1.c0)) DESC;
SELECT ALL * FROM vt1, v0 WHERE ((((((vt1.c0) IS FALSE), 'J'))<((((v0.c1) ISNULL), (v0.c0 IN ()))))) ORDER BY (- (((((v0.c0)AND(v0.c1)))AND(v0.c2)))) DESC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((((vt1.c0) IS FALSE), 'J'))<((((v0.c1) ISNULL), (v0.c0 IN ())))))AND(v0.c0))) ORDER BY (- (((((v0.c0)AND(v0.c1)))AND(v0.c2)))) DESC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((((NOT (x'49b5')), '㷊t-' COLLATE BINARY))<(((+ (vt1.c0)), ((v0.c0)<>(vt1.c1)))))) ORDER BY (- (((((v0.c0)AND(v0.c1)))AND(v0.c2)))) DESC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE;
SELECT ALL * FROM vt1, v0 WHERE ((((((vt1.c0) IS FALSE), 'J'))<((((v0.c1) ISNULL), (v0.c0 IN ()))))) ORDER BY (- (((((v0.c0)AND(v0.c1)))AND(v0.c2)))) DESC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((((vt1.c0) IS FALSE), 'J'))<((((v0.c1) ISNULL), (v0.c0 IN ())))))AND(v0.c0))) ORDER BY (- (((((v0.c0)AND(v0.c1)))AND(v0.c2)))) DESC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((((NOT (x'49b5')), '㷊t-' COLLATE BINARY))<(((+ (vt1.c0)), ((v0.c0)<>(vt1.c1)))))) ORDER BY (- (((((v0.c0)AND(v0.c1)))AND(v0.c2)))) DESC  NULLS LAST, CAST(vt1.c0 AS REAL) COLLATE NOCASE;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (CAST(CAST(v0.c2 AS REAL) AS REAL)) ORDER BY CAST(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c0)) AS BLOB), ((((vt1.c0) IS TRUE)) BETWEEN (CASE WHEN v0.c0 THEN NULL WHEN v0.c0 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END) AND (CAST(v0.c0 AS TEXT)))  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((CAST(CAST(v0.c2 AS REAL) AS REAL))AND(((UNLIKELY(vt1.c0)) IS TRUE)))) ORDER BY ((CAST(v0.c2 AS REAL))IS(((v0.c1)&(v0.c2)))) DESC, ((v0.c2 IN (vt1.c0, v0.c1)) IN ()) ASC;
SELECT ALL * FROM v0 WHERE (v0.c0);
SELECT DISTINCT * FROM v0 WHERE (v0.c0) INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c2)) BETWEEN ((CAST(v0.c1 AS INTEGER))) AND ((CAST(NULL AS TEXT)))));
SELECT ALL * FROM v0 WHERE (v0.c0);
SELECT DISTINCT * FROM v0 WHERE (v0.c0) INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c2)) BETWEEN ((CAST(v0.c1 AS INTEGER))) AND ((CAST(NULL AS TEXT)))));
SELECT * FROM v0, vt1 WHERE ((((NOT (v0.c2)))IS(vt1.c1))) ORDER BY (((NULL, ((vt1.c1)/(vt1.c1)), ((vt1.c1)!=(v0.c1)), ((vt1.c0)>(vt1.c1))))>=((vt1.c1, ((vt1.c1)%(v0.c2)), ((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c2)), vt1.c0 COLLATE NOCASE)))  NULLS FIRST, (v0.c0 IN ()) ASC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE ((((NOT (v0.c2)))IS(vt1.c1))) ORDER BY (NOT ((((v0.c0))<((v0.c0))))) INTERSECT SELECT * FROM v0, vt1 WHERE ((NOT (vt1.c1)) COLLATE NOCASE) ORDER BY (NOT ((((v0.c0))<((v0.c0)))));
SELECT * FROM v0, vt1 WHERE ((((NOT (v0.c2)))IS(vt1.c1))) ORDER BY (((NULL, ((vt1.c1)/(vt1.c1)), ((vt1.c1)!=(v0.c1)), ((vt1.c0)>(vt1.c1))))>=((vt1.c1, ((vt1.c1)%(v0.c2)), ((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c2)), vt1.c0 COLLATE NOCASE)))  NULLS FIRST, (v0.c0 IN ()) ASC  NULLS FIRST;
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((v0.c2 IN ())) ORDER BY 0.5436963229393406  NULLS LAST, 0.5164669802166773 ASC, ((CAST(v0.c1 AS NUMERIC))!=(IFNULL(DISTINCT v0.c1, v0.c1))) ASC  NULLS LAST;
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE ((((v0.c2 IN ()))AND((((('-40118044') ISNULL)) NOT BETWEEN (CAST(v0.c2 AS TEXT)) AND (CASE WHEN v0.c2 THEN 's' WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END))))) ORDER BY (((v0.c0)) BETWEEN (((+ (v0.c2)))) AND ((v0.c0))) ASC  NULLS LAST, (((v0.c0 IN (x'e5', v0.c1)))<>(CAST(v0.c0 AS NUMERIC)))  NULLS LAST INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (CASE WHEN ((v0.c0) NOT NULL) THEN LIKELIHOOD(DISTINCT v0.c0, v0.c0) ELSE (NOT (v0.c1)) END) ORDER BY (((v0.c0)) BETWEEN (((+ (v0.c2)))) AND ((v0.c0))) ASC  NULLS LAST, (((v0.c0 IN (x'e5', v0.c1)))<>(CAST(v0.c0 AS NUMERIC)))  NULLS LAST;
SELECT MIN(vt1.c1) FROM vt1 WHERE (((((((vt1.c1)AND(((vt1.c0)-(vt1.c0)))))AND(vt1.c1)))AND((~ (vt1.c0)))));
SELECT MIN(vt1.c1) FROM vt1 WHERE (((((((vt1.c1)AND(((vt1.c0)-(vt1.c0)))))AND(vt1.c1)))AND((~ (vt1.c0))))) ORDER BY (((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND (((vt1.c0 IN ())))) ASC INTERSECT SELECT MIN(vt1.c1) FROM vt1 WHERE (vt1.c0) ORDER BY (((vt1.c1)) NOT BETWEEN ((vt1.c1)) AND (((vt1.c0 IN ())))) ASC;
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (vt1.c1 COLLATE RTRIM);
SELECT DISTINCT MIN(vt1.c1) FROM vt1, v0 WHERE (vt1.c1 COLLATE RTRIM);
SELECT COUNT(*) FROM v0, vt1 WHERE (0.49100267661729124) ORDER BY ((v0.c2) ISNULL) DESC, ((((((v0.c2)OR(vt1.c1)))OR(v0.c2)))AND(((vt1.c0)*(v0.c2)))), (+ ((v0.c2 IN ())))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (0.49100267661729124) ORDER BY (- (x'1e1c')), (vt1.c0 IN ((v0.c1 IN ()))) DESC;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)) COLLATE RTRIM  NULLS LAST, CASE (- (vt1.c0))  WHEN ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) THEN x'73' WHEN ((vt1.c1) IS TRUE) THEN (vt1.c1 IN ()) WHEN ((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)) THEN vt1.c0 COLLATE BINARY WHEN (((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c1))) THEN ((vt1.c0) NOT NULL) ELSE CAST(vt1.c0 AS NUMERIC) END LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)) COLLATE RTRIM  NULLS LAST, CASE (- (vt1.c0))  WHEN ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) THEN x'73' WHEN ((vt1.c1) IS TRUE) THEN (vt1.c1 IN ()) WHEN ((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)) THEN vt1.c0 COLLATE BINARY WHEN (((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c1))) THEN ((vt1.c0) NOT NULL) ELSE CAST(vt1.c0 AS NUMERIC) END LIMIT 0X0;
SELECT ALL * FROM v0 WHERE ((((v0.c0 IN (0.8009251580979987)))==((('') IS FALSE))));
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c0 IN (0.8009251580979987)))==((('') IS FALSE))))AND(CASE WHEN ((v0.c1) ISNULL) THEN ((v0.c1)<(v0.c0)) END))) LIMIT 1;
SELECT ALL * FROM v0 WHERE ((((v0.c0 IN (0.8009251580979987)))==((('') IS FALSE))));
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c0 IN (0.8009251580979987)))==((('') IS FALSE))))AND(CASE WHEN ((v0.c1) ISNULL) THEN ((v0.c1)<(v0.c0)) END))) LIMIT 1;
SELECT ALL * FROM v0 WHERE (((v0.c0)*(v0.c0)) COLLATE NOCASE);
SELECT * FROM v0 WHERE (((((v0.c0)*(v0.c0)) COLLATE NOCASE)AND((((v0.c1 IN (v0.c1, v0.c2))) BETWEEN ((v0.c1 IN ())) AND (json_array(v0.c1, '239618747', v0.c2))))));
SELECT ALL * FROM v0 WHERE (((v0.c0)*(v0.c0)) COLLATE NOCASE);
SELECT * FROM v0 WHERE (((((v0.c0)*(v0.c0)) COLLATE NOCASE)AND((((v0.c1 IN (v0.c1, v0.c2))) BETWEEN ((v0.c1 IN ())) AND (json_array(v0.c1, '239618747', v0.c2))))));
SELECT ALL * FROM v0 INNER JOIN vt1 ON ((((((vt1.c0)>>(v0.c0)))OR(v0.c0 COLLATE RTRIM)))OR(((v0.c2)+(v0.c1)))) WHERE (CAST(((vt1.c0)IS(v0.c1)) AS NUMERIC)) ORDER BY ((v0.c2)IS((((vt1.c0, v0.c0, vt1.c0, v0.c0))!=((v0.c0, v0.c2, v0.c2, vt1.c1))))), CAST((- (v0.c2)) AS NUMERIC), (((CAST(vt1.c1 AS REAL), ((v0.c1)==(v0.c1))))=((CASE v0.c1  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END, ((v0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1))))), ((TRIM(NULL, NULL))=(((vt1.c0)<>(vt1.c0))));
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON ((((((vt1.c0)>>(v0.c0)))OR(v0.c0 COLLATE RTRIM)))OR(((v0.c2)+(v0.c1)))) WHERE (((CAST(((vt1.c0)IS(v0.c1)) AS NUMERIC))AND(NULLIF(CASE vt1.c0  WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE vt1.c0 END, ((((((((vt1.c1)OR(vt1.c0)))AND(v0.c2)))AND(v0.c1)))AND(vt1.c1)))))) ORDER BY ((((((((((((v0.c2)OR(vt1.c0)))AND(vt1.c1)))OR(v0.c2)))OR(vt1.c1)))AND(CAST(vt1.c1 AS BLOB))))OR(vt1.c0)), ((((CAST(vt1.c0 AS NUMERIC))AND(((((v0.c0)AND(vt1.c0)))OR(v0.c2)))))AND(TYPEOF(vt1.c1)));
SELECT ALL * FROM v0 INNER JOIN vt1 ON ((((((vt1.c0)>>(v0.c0)))OR(v0.c0 COLLATE RTRIM)))OR(((v0.c2)+(v0.c1)))) WHERE (CAST(((vt1.c0)IS(v0.c1)) AS NUMERIC)) ORDER BY ((v0.c2)IS((((vt1.c0, v0.c0, vt1.c0, v0.c0))!=((v0.c0, v0.c2, v0.c2, vt1.c1))))), CAST((- (v0.c2)) AS NUMERIC), (((CAST(vt1.c1 AS REAL), ((v0.c1)==(v0.c1))))=((CASE v0.c1  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END, ((v0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1))))), ((TRIM(NULL, NULL))=(((vt1.c0)<>(vt1.c0))));
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON ((((((vt1.c0)>>(v0.c0)))OR(v0.c0 COLLATE RTRIM)))OR(((v0.c2)+(v0.c1)))) WHERE (((CAST(((vt1.c0)IS(v0.c1)) AS NUMERIC))AND(NULLIF(CASE vt1.c0  WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE vt1.c0 END, ((((((((vt1.c1)OR(vt1.c0)))AND(v0.c2)))AND(v0.c1)))AND(vt1.c1)))))) ORDER BY ((((((((((((v0.c2)OR(vt1.c0)))AND(vt1.c1)))OR(v0.c2)))OR(vt1.c1)))AND(CAST(vt1.c1 AS BLOB))))OR(vt1.c0)), ((((CAST(vt1.c0 AS NUMERIC))AND(((((v0.c0)AND(vt1.c0)))OR(v0.c2)))))AND(TYPEOF(vt1.c1)));
SELECT * FROM v0 WHERE ((((v0.c2 IN (v0.c2))) NOT NULL)) ORDER BY CASE WHEN ((v0.c0)LIKE(v0.c1)) THEN (~ (v0.c1)) END  NULLS FIRST, ((CASE v0.c2  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 ELSE '887571368' END) NOT NULL) ASC;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN (v0.c2))) NOT NULL)) ORDER BY (((x'b7' IN (v0.c2, v0.c2, v0.c0)))>>(GLOB(v0.c0, v0.c2)))  NULLS LAST, ((('1654447368') NOT BETWEEN (v0.c2) AND (v0.c0)) IN (((v0.c2) IS TRUE))) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE ((((v0.c2 IN (v0.c2))) NOT NULL)) ORDER BY CASE WHEN ((v0.c0)LIKE(v0.c1)) THEN (~ (v0.c1)) END  NULLS FIRST, ((CASE v0.c2  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 ELSE '887571368' END) NOT NULL) ASC;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN (v0.c2))) NOT NULL)) ORDER BY (((x'b7' IN (v0.c2, v0.c2, v0.c0)))>>(GLOB(v0.c0, v0.c2)))  NULLS LAST, ((('1654447368') NOT BETWEEN (v0.c2) AND (v0.c0)) IN (((v0.c2) IS TRUE))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (vt1.c0 COLLATE NOCASE);
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (vt1.c0 COLLATE NOCASE);
SELECT MIN(v0.c1) FROM vt1, v0 WHERE (((((v0.c1) ISNULL))&(((((((NULL)AND(v0.c0)))OR(v0.c0)))AND(vt1.c1))))) ORDER BY ((((v0.c2)-(v0.c2)))!=(((vt1.c1)IS(x'')))) ASC;
SELECT DISTINCT MIN(v0.c1) FROM vt1, v0 WHERE (((((v0.c1) ISNULL))&(((((((NULL)AND(v0.c0)))OR(v0.c0)))AND(vt1.c1))))) ORDER BY (((((v0.c1)IS(v0.c0)), (v0.c1 IN (vt1.c0, vt1.c1))))>(((((vt1.c0, v0.c1))==((vt1.c1, vt1.c1))), TRIM(v0.c2)))), CAST(v0.c1 AS REAL) DESC INTERSECT SELECT DISTINCT MIN(v0.c1) FROM vt1, v0 WHERE ('724715347' COLLATE BINARY) ORDER BY (((((v0.c1)IS(v0.c0)), (v0.c1 IN (vt1.c0, vt1.c1))))>(((((vt1.c0, v0.c1))=((vt1.c1, vt1.c1))), TRIM(v0.c2)))), CAST(v0.c1 AS REAL) DESC;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(((NULL) NOT BETWEEN ((((vt1.c1, vt1.c1))>((vt1.c1, vt1.c1)))) AND ((NOT (x'83'))))))) ORDER BY vt1.c0  NULLS FIRST;
SELECT * FROM vt1 WHERE (vt1.c0) ORDER BY vt1.c0  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(((NULL) NOT BETWEEN ((((vt1.c1, vt1.c1))>((vt1.c1, vt1.c1)))) AND ((NOT (x'83'))))))) ORDER BY vt1.c0  NULLS FIRST;
SELECT * FROM v0 WHERE (v0.c1) ORDER BY (NOT (v0.c0 COLLATE RTRIM)) ASC, ((CAST(v0.c0 AS INTEGER))||(((((v0.c1)AND(v0.c1)))AND(v0.c2)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY (NOT (v0.c0 COLLATE RTRIM)) ASC, ((CAST(v0.c0 AS INTEGER))||(((((v0.c1)AND(v0.c1)))AND(v0.c2)))) ASC  NULLS FIRST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((+ (((v0.c1) IS TRUE)))) ORDER BY (NOT (v0.c0 COLLATE RTRIM)) ASC, ((CAST(v0.c0 AS INTEGER))||(((((v0.c1)AND(v0.c1)))AND(v0.c2)))) ASC  NULLS FIRST LIMIT 3;
SELECT * FROM v0 WHERE (v0.c1) ORDER BY (NOT (v0.c0 COLLATE RTRIM)) ASC, ((CAST(v0.c0 AS INTEGER))||(((((v0.c1)AND(v0.c1)))AND(v0.c2)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY (NOT (v0.c0 COLLATE RTRIM)) ASC, ((CAST(v0.c0 AS INTEGER))||(((((v0.c1)AND(v0.c1)))AND(v0.c2)))) ASC  NULLS FIRST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((+ (((v0.c1) IS TRUE)))) ORDER BY (NOT (v0.c0 COLLATE RTRIM)) ASC, ((CAST(v0.c0 AS INTEGER))||(((((v0.c1)AND(v0.c1)))AND(v0.c2)))) ASC  NULLS FIRST LIMIT 3;
SELECT * FROM v0, vt1 WHERE (v0.c0);
SELECT ALL * FROM v0, vt1 WHERE (((v0.c0)AND(((((v0.c2)OR(v0.c0)))LIKE(v0.c0)))));
SELECT * FROM v0, vt1 WHERE (v0.c0);
SELECT ALL * FROM v0, vt1 WHERE (((v0.c0)AND(((((v0.c2)OR(v0.c0)))LIKE(v0.c0)))));
SELECT * FROM vt1, v0 WHERE (CASE WHEN vt1.c0 THEN (vt1.c1 IN ()) WHEN CASE vt1.c0  WHEN v0.c0 THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN 0X329f44ff WHEN vt1.c0 THEN vt1.c1 ELSE v0.c0 END THEN v0.c0 ELSE (((v0.c2))=((x''))) END);
SELECT ALL * FROM vt1, v0 WHERE (CASE WHEN vt1.c0 THEN (vt1.c1 IN ()) WHEN CASE vt1.c0  WHEN v0.c0 THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN 849298687 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c0 END THEN v0.c0 ELSE (((v0.c2))==((x''))) END) LIMIT 1 INTERSECT SELECT * FROM vt1, v0 WHERE (CASE ((NULL)GLOB(vt1.c0))  WHEN (((v0.c2, v0.c2)) BETWEEN ((v0.c2, vt1.c1)) AND ((vt1.c1, v0.c0))) THEN ((v0.c2) IS TRUE) ELSE ((vt1.c1)>=(v0.c0)) END) LIMIT 1;
SELECT * FROM vt1, v0 WHERE (CASE WHEN vt1.c0 THEN (vt1.c1 IN ()) WHEN CASE vt1.c0  WHEN v0.c0 THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN 0X329f44ff WHEN vt1.c0 THEN vt1.c1 ELSE v0.c0 END THEN v0.c0 ELSE (((v0.c2))=((x''))) END);
SELECT ALL * FROM vt1, v0 WHERE (CASE WHEN vt1.c0 THEN (vt1.c1 IN ()) WHEN CASE vt1.c0  WHEN v0.c0 THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN 849298687 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c0 END THEN v0.c0 ELSE (((v0.c2))==((x''))) END) LIMIT 1 INTERSECT SELECT * FROM vt1, v0 WHERE (CASE ((NULL)GLOB(vt1.c0))  WHEN (((v0.c2, v0.c2)) BETWEEN ((v0.c2, vt1.c1)) AND ((vt1.c1, v0.c0))) THEN ((v0.c2) IS TRUE) ELSE ((vt1.c1)>=(v0.c0)) END) LIMIT 1;
SELECT MIN(vt1.c1) FROM vt1 WHERE ((((vt1.c1, vt1.c0, vt1.c1)) NOT BETWEEN ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END, ((vt1.c1) IS FALSE), ((vt1.c1) NOTNULL))) AND (((vt1.c1 IN ()), CAST(vt1.c1 AS REAL), (~ ('Y9v䝓')))))) ORDER BY vt1.c1  NULLS LAST;
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE ((((((vt1.c1, vt1.c0, vt1.c1)) NOT BETWEEN ((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END, ((vt1.c1) IS FALSE), ((vt1.c1) NOTNULL))) AND (((vt1.c1 IN ()), CAST(vt1.c1 AS REAL), (~ ('Y9v䝓'))))))AND((((vt1.c1)) NOT BETWEEN ((((vt1.c1) IS FALSE))) AND ((((vt1.c0)>(vt1.c0)))))))) ORDER BY vt1.c1  NULLS LAST LIMIT 1;
SELECT * FROM v0 WHERE ((~ (LOWER(v0.c0))));
SELECT DISTINCT * FROM v0 WHERE ((((~ (LOWER(v0.c0))))AND(((LOWER(DISTINCT v0.c0))<(CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END))))) ORDER BY ((((((((((v0.c0)AND(v0.c1)))AND(v0.c2)))AND(v0.c2)))AND((((NULL, NULL, v0.c2)) BETWEEN ((v0.c2, v0.c1, v0.c0)) AND (('cU', v0.c0, v0.c0))))))AND(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)) DESC  NULLS FIRST, ((((v0.c1) BETWEEN (v0.c1) AND (v0.c0))) ISNULL)  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((((v0.c2)OR(v0.c2)))AND(v0.c1)))*((v0.c0 IN ())))) ORDER BY ((((((((((v0.c0)AND(v0.c1)))AND(v0.c2)))AND(v0.c2)))AND((((NULL, NULL, v0.c2)) BETWEEN ((v0.c2, v0.c1, v0.c0)) AND (('cU', v0.c0, v0.c0))))))AND(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)) DESC  NULLS FIRST, ((((v0.c1) BETWEEN (v0.c1) AND (v0.c0))) ISNULL)  NULLS LAST;
SELECT * FROM v0 WHERE ((~ (LOWER(v0.c0))));
SELECT DISTINCT * FROM v0 WHERE ((((~ (LOWER(v0.c0))))AND(((LOWER(DISTINCT v0.c0))<(CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END))))) ORDER BY ((((((((((v0.c0)AND(v0.c1)))AND(v0.c2)))AND(v0.c2)))AND((((NULL, NULL, v0.c2)) BETWEEN ((v0.c2, v0.c1, v0.c0)) AND (('cU', v0.c0, v0.c0))))))AND(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)) DESC  NULLS FIRST, ((((v0.c1) BETWEEN (v0.c1) AND (v0.c0))) ISNULL)  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((((v0.c2)OR(v0.c2)))AND(v0.c1)))*((v0.c0 IN ())))) ORDER BY ((((((((((v0.c0)AND(v0.c1)))AND(v0.c2)))AND(v0.c2)))AND((((NULL, NULL, v0.c2)) BETWEEN ((v0.c2, v0.c1, v0.c0)) AND (('cU', v0.c0, v0.c0))))))AND(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)) DESC  NULLS FIRST, ((((v0.c1) BETWEEN (v0.c1) AND (v0.c0))) ISNULL)  NULLS LAST;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON CASE WHEN '-1203069871' THEN v0.c0 WHEN '1843766385' THEN vt1.c0 ELSE v0.c1 END COLLATE NOCASE COLLATE RTRIM WHERE (CASE WHEN ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)) THEN NULL END) ORDER BY (((0.4185765895312954, vt1.c0))>((HEX(DISTINCT vt1.c1), -1243605358 COLLATE BINARY))) ASC, (((v0.c0)>(v0.c1)) IN ((+ (vt1.c0))))  NULLS LAST, -1464923850;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON CASE WHEN '-1203069871' THEN v0.c0 WHEN '1843766385' THEN vt1.c0 ELSE v0.c1 END COLLATE NOCASE COLLATE RTRIM WHERE (CASE WHEN ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)) THEN NULL END) ORDER BY (((vt1.c1 IN ('-2046289318', v0.c2, 0x5a2a8b9)))!=(((v0.c1)>=(vt1.c0))))  NULLS FIRST;
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON CASE WHEN '-1203069871' THEN v0.c0 WHEN '1843766385' THEN vt1.c0 ELSE v0.c1 END COLLATE NOCASE COLLATE RTRIM WHERE (CASE WHEN ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)) THEN NULL END) ORDER BY (((0.4185765895312954, vt1.c0))>((HEX(DISTINCT vt1.c1), -1243605358 COLLATE BINARY))) ASC, (((v0.c0)>(v0.c1)) IN ((+ (vt1.c0))))  NULLS LAST, -1464923850;
SELECT COUNT(*) FROM v0 CROSS JOIN vt1 ON (((~ (v0.c1)))IS(json_patch(v0.c2, 0.005408529411641494))) WHERE (v0.c0) ORDER BY 'o诖4.
2F諟F' ASC  NULLS LAST;
SELECT COUNT(*) FROM v0 CROSS JOIN vt1 ON (((~ (v0.c1)))IS(json_patch(v0.c2, 0.005408529411641494))) WHERE (((v0.c0)AND((((vt1.c1 IN ()))<<(HEX(DISTINCT vt1.c1)))))) ORDER BY ((vt1.c1 COLLATE NOCASE)=((('閣>yh7f') NOT BETWEEN (v0.c2) AND (v0.c1)))), (~ ((vt1.c1 IN (vt1.c0, v0.c0)))) ASC  NULLS LAST LIMIT 5;
SELECT COUNT(*) FROM v0, vt1 WHERE (x'2069' COLLATE BINARY) ORDER BY ((TRIM(v0.c1)) NOT BETWEEN ('943624952') AND ((vt1.c1 IN ())));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((x'2069' COLLATE BINARY)AND((((v0.c1))>(((((vt1.c0, v0.c1, v0.c0, v0.c2))>=((v0.c0, vt1.c1, v0.c1, v0.c2))))))))) ORDER BY ((TRIM(v0.c1)) NOT BETWEEN ('943624952') AND ((vt1.c1 IN ()))) INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((x'60e2' COLLATE RTRIM)|((- (v0.c2))))) ORDER BY ((TRIM(v0.c1)) NOT BETWEEN ('943624952') AND ((vt1.c1 IN ())));
SELECT COUNT(*) FROM vt1, v0 WHERE (((((vt1.c0 COLLATE BINARY)OR(CAST(vt1.c0 AS INTEGER))))OR((((v0.c0, vt1.c1, vt1.c0))!=((v0.c0, vt1.c0, vt1.c0)))))) ORDER BY (((- (v0.c1)))>=(CASE v0.c1  WHEN vt1.c0 THEN '86y' WHEN v0.c0 THEN vt1.c0 ELSE v0.c0 END));
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((((((vt1.c0 COLLATE BINARY)OR(CAST(vt1.c0 AS INTEGER))))OR((((v0.c0, vt1.c1, vt1.c0))!=((v0.c0, vt1.c0, vt1.c0))))))AND((+ (CAST(v0.c2 AS BLOB)))))) ORDER BY (((((((vt1.c1)AND(v0.c1)))AND(v0.c1)), NULL))==((NULL, (v0.c1 IN (NULL))))) DESC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((vt1.c1)&(vt1.c0)) IN (CAST(NULL AS INTEGER)))) ORDER BY (((((((vt1.c1)AND(v0.c1)))AND(v0.c1)), NULL))==((NULL, (v0.c1 IN (NULL))))) DESC  NULLS LAST;
SELECT * FROM v0 WHERE (json(((v0.c1) IS FALSE))) ORDER BY (((((((((v0.c2 IN (v0.c1)))AND(((v0.c1)*(v0.c2)))))AND(v0.c0 COLLATE BINARY)))AND((+ (v0.c0)))))AND((((v0.c1, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c1))))) ASC  NULLS FIRST, CAST(v0.c2 COLLATE RTRIM AS REAL)  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (json(((v0.c1) IS FALSE))) ORDER BY (((((((((v0.c2 IN (v0.c1)))AND(((v0.c1)*(v0.c2)))))AND(v0.c0 COLLATE BINARY)))AND((+ (v0.c0)))))AND((((v0.c1, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c1))))) ASC  NULLS FIRST, CAST(v0.c2 COLLATE RTRIM AS REAL)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((NOT (((v0.c1)OR(0X3e6e43e8))))) ORDER BY (((((((((v0.c2 IN (v0.c1)))AND(((v0.c1)*(v0.c2)))))AND(v0.c0 COLLATE BINARY)))AND((+ (v0.c0)))))AND((((v0.c1, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c1))))) ASC  NULLS FIRST, CAST(v0.c2 COLLATE RTRIM AS REAL)  NULLS FIRST;
SELECT * FROM v0 WHERE (json(((v0.c1) IS FALSE))) ORDER BY (((((((((v0.c2 IN (v0.c1)))AND(((v0.c1)*(v0.c2)))))AND(v0.c0 COLLATE BINARY)))AND((+ (v0.c0)))))AND((((v0.c1, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c1))))) ASC  NULLS FIRST, CAST(v0.c2 COLLATE RTRIM AS REAL)  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (json(((v0.c1) IS FALSE))) ORDER BY (((((((((v0.c2 IN (v0.c1)))AND(((v0.c1)*(v0.c2)))))AND(v0.c0 COLLATE BINARY)))AND((+ (v0.c0)))))AND((((v0.c1, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c1))))) ASC  NULLS FIRST, CAST(v0.c2 COLLATE RTRIM AS REAL)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((NOT (((v0.c1)OR(0X3e6e43e8))))) ORDER BY (((((((((v0.c2 IN (v0.c1)))AND(((v0.c1)*(v0.c2)))))AND(v0.c0 COLLATE BINARY)))AND((+ (v0.c0)))))AND((((v0.c1, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c1))))) ASC  NULLS FIRST, CAST(v0.c2 COLLATE RTRIM AS REAL)  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((vt1.c1)<>(vt1.c0)) COLLATE BINARY) ORDER BY ((vt1.c1 IN ()) IN (vt1.c1 COLLATE RTRIM, (((vt1.c0, vt1.c0))>=((vt1.c1, vt1.c0)))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((vt1.c1)<>(vt1.c0)) COLLATE BINARY) ORDER BY ((vt1.c1 IN ()) IN (vt1.c1 COLLATE RTRIM, (((vt1.c0, vt1.c0))>=((vt1.c1, vt1.c0)))));
SELECT * FROM vt1, v0 NOT INDEXED WHERE ((CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 END IN (v0.c0, (v0.c0 IN (vt1.c1, v0.c1)), CASE v0.c2  WHEN vt1.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN 0.8175947210099783 WHEN v0.c0 THEN vt1.c1 END))) ORDER BY (NOT ((((v0.c2)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))), v0.c1;
SELECT ALL * FROM vt1, v0 WHERE ((CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 END IN (v0.c0, (v0.c0 IN (vt1.c1))))) ORDER BY (NOT ((((v0.c2)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))), v0.c1 INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((- ((vt1.c1 IN (0.6050075384898479, x'43a6', vt1.c0))))) ORDER BY (NOT ((((v0.c2)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))), v0.c1;
SELECT * FROM vt1, v0 NOT INDEXED WHERE ((CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 END IN (v0.c0, (v0.c0 IN (vt1.c1, v0.c1)), CASE v0.c2  WHEN vt1.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN 0.8175947210099783 WHEN v0.c0 THEN vt1.c1 END))) ORDER BY (NOT ((((v0.c2)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))), v0.c1;
SELECT ALL * FROM vt1, v0 WHERE ((CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 END IN (v0.c0, (v0.c0 IN (vt1.c1))))) ORDER BY (NOT ((((v0.c2)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))), v0.c1 INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((- ((vt1.c1 IN (0.6050075384898479, x'43a6', vt1.c0))))) ORDER BY (NOT ((((v0.c2)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))), v0.c1;
SELECT * FROM v0, vt1 WHERE ((+ (v0.c2)) COLLATE RTRIM COLLATE BINARY);
SELECT DISTINCT * FROM v0, vt1 WHERE ((((+ (v0.c2)) COLLATE RTRIM COLLATE BINARY)AND(((((v0.c1)<<(v0.c1)))LIKE(v0.c1))))) LIMIT 0X3;
SELECT * FROM v0, vt1 WHERE ((+ (v0.c2)) COLLATE RTRIM COLLATE BINARY);
SELECT DISTINCT * FROM v0, vt1 WHERE ((((+ (v0.c2)) COLLATE RTRIM COLLATE BINARY)AND(((((v0.c1)<<(v0.c1)))LIKE(v0.c1))))) LIMIT 0X3;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt1 ON ((((((((('-1195284342', v0.c0, v0.c0)) BETWEEN ((vt1.c0, vt1.c1, v0.c1)) AND (('-1809434267', v0.c2, v0.c2))))AND(((0.8810132846682494) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(((vt1.c1)IS(v0.c2)))))OR((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c2))))) WHERE (((vt1.c1)==(v0.c0 COLLATE NOCASE))) ORDER BY ((((((((((((((vt1.c0)OR(v0.c0)))OR(vt1.c1)))AND(v0.c0)))OR(v0.c0)))AND(((v0.c0)>(v0.c0)))))OR(v0.c2 COLLATE RTRIM)))OR((+ (v0.c0))))  NULLS LAST, 0.5281653891017662  NULLS LAST, (((((v0.c1) NOT BETWEEN (vt1.c0) AND (v0.c2)), (~ (v0.c0))))<=((((vt1.c0) NOTNULL), UPPER(DISTINCT v0.c2)))) DESC;
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON ((((((((('-1195284342', v0.c0, v0.c0)) BETWEEN ((vt1.c0, vt1.c1, v0.c1)) AND (('-1809434267', v0.c2, v0.c2))))AND(((0.8810132846682494) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(((vt1.c1)IS(v0.c2)))))OR((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c2))))) WHERE (((vt1.c1)=(v0.c0 COLLATE NOCASE))) ORDER BY CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 ELSE vt1.c1 END COLLATE RTRIM ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt1 ON ((((((((('-1195284342', v0.c0, v0.c0)) BETWEEN ((vt1.c0, vt1.c1, v0.c1)) AND (('-1809434267', v0.c2, v0.c2))))AND(((0.8810132846682494) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(((vt1.c1)IS(v0.c2)))))OR((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c2))))) WHERE (((vt1.c1)==(v0.c0 COLLATE NOCASE))) ORDER BY ((((((((((((((vt1.c0)OR(v0.c0)))OR(vt1.c1)))AND(v0.c0)))OR(v0.c0)))AND(((v0.c0)>(v0.c0)))))OR(v0.c2 COLLATE RTRIM)))OR((+ (v0.c0))))  NULLS LAST, 0.5281653891017662  NULLS LAST, (((((v0.c1) NOT BETWEEN (vt1.c0) AND (v0.c2)), (~ (v0.c0))))<=((((vt1.c0) NOTNULL), UPPER(DISTINCT v0.c2)))) DESC;
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON ((((((((('-1195284342', v0.c0, v0.c0)) BETWEEN ((vt1.c0, vt1.c1, v0.c1)) AND (('-1809434267', v0.c2, v0.c2))))AND(((0.8810132846682494) BETWEEN (vt1.c0) AND (vt1.c0)))))OR(((vt1.c1)IS(v0.c2)))))OR((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c2))))) WHERE (((vt1.c1)=(v0.c0 COLLATE NOCASE))) ORDER BY CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 ELSE vt1.c1 END COLLATE RTRIM ASC  NULLS LAST LIMIT 0x0;
SELECT COUNT(*) FROM v0, vt1 WHERE (UPPER(load_extension(v0.c0))) ORDER BY (('0.5981874271049618') NOTNULL) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((UPPER(load_extension(v0.c0)))AND(CASE WHEN CASE WHEN vt1.c0 THEN v0.c0 END THEN ((((((((((v0.c1)OR(v0.c0)))OR(v0.c1)))AND(v0.c1)))OR(v0.c0)))OR(NULL)) WHEN ((v0.c0) NOT BETWEEN (vt1.c1) AND (v0.c2)) THEN ((vt1.c1) NOTNULL) ELSE v0.c0 COLLATE NOCASE END))) ORDER BY (('0.5981874271049618') NOTNULL) ASC  NULLS LAST LIMIT 2;
SELECT ALL COUNT(*) FROM v0 WHERE (((((((SQLITE_VERSION())AND((((v0.c1))<((v0.c2))))))AND(((v0.c0)&(v0.c1)))))AND(CAST(v0.c1 AS INTEGER)))) ORDER BY CAST(((v0.c0) ISNULL) AS INTEGER);
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((((SQLITE_VERSION())AND((((v0.c1))<((v0.c2))))))AND(((v0.c0)&(v0.c1)))))AND(CAST(v0.c1 AS INTEGER)))) ORDER BY CASE ((v0.c0)+(v0.c1))  WHEN v0.c2 COLLATE RTRIM THEN (((v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, v0.c1))) ELSE ((((((((v0.c0)AND(v0.c0)))AND(v0.c2)))OR(v0.c1)))OR(v0.c2)) END ASC  NULLS LAST, CAST(v0.c0 AS REAL)  NULLS FIRST LIMIT 0x1;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE (((((((CAST(vt1.c1 AS NUMERIC))OR(CASE vt1.c1  WHEN vt1.c0 THEN v0.c0 ELSE v0.c0 END)))AND(((x'451e96d9')AND(v0.c1)))))AND(CASE WHEN vt1.c1 THEN v0.c2 ELSE v0.c2 END))) ORDER BY x'' DESC;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE (((((((((CAST(vt1.c1 AS NUMERIC))OR(CASE vt1.c1  WHEN vt1.c0 THEN v0.c0 ELSE v0.c0 END)))AND(((x'451e96d9')AND(v0.c1)))))AND(CASE WHEN vt1.c1 THEN v0.c2 ELSE v0.c2 END)))AND(CASE ((v0.c0)/(v0.c2))  WHEN vt1.c0 THEN ((NULL) IS FALSE) WHEN vt1.c1 THEN (~ (v0.c1)) WHEN x'87' THEN ((v0.c2) IS FALSE) END))) ORDER BY x'' DESC LIMIT 0X2 INTERSECT SELECT MAX(vt1.c1) FROM vt1, v0 WHERE ((+ (((vt1.c0) BETWEEN (v0.c2) AND (vt1.c0))))) ORDER BY x'' DESC LIMIT 2;
SELECT MAX(v0.c1) FROM v0, vt1 WHERE (((CAST(vt1.c1 AS INTEGER))%(((((v0.c2)OR(vt1.c1)))AND(v0.c0))))) ORDER BY ((vt1.c1) NOT NULL) ASC, (- (ABS(DISTINCT vt1.c0)))  NULLS FIRST;
SELECT MAX(v0.c1) FROM v0, vt1 WHERE (((((CAST(vt1.c1 AS INTEGER))%(((((v0.c2)OR(vt1.c1)))AND(v0.c0)))))AND(NULL))) ORDER BY ((vt1.c1) NOT NULL) ASC, (- (ABS(DISTINCT vt1.c0)))  NULLS FIRST INTERSECT SELECT ALL MAX(v0.c1) FROM v0, vt1 WHERE (TRIM(DISTINCT (v0.c1 IN ()))) ORDER BY ((vt1.c1) NOT NULL) ASC, (- (ABS(DISTINCT vt1.c0)))  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (ABS(((vt1.c0) NOTNULL))) ORDER BY ((((vt1.c1 IN ()), CAST(vt1.c1 AS REAL), 0.0930047751902281))>=((((vt1.c1)>=(vt1.c1)), CAST(vt1.c0 AS NUMERIC), ((((((vt1.c1)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (ABS(((vt1.c0) NOTNULL))) ORDER BY ((((vt1.c1) ISNULL))&(((vt1.c0) ISNULL))) ASC  NULLS LAST LIMIT 0x2;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((0.9061641035507891)=(((x'')+(vt1.c1)))) WHERE ((((NULL)) NOT BETWEEN ((vt1.c1 COLLATE NOCASE)) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END))));
SELECT * FROM v0 INNER JOIN vt1 ON ((0.9061641035507891)=(((x'')+(vt1.c1)))) WHERE ((((((NULL)) NOT BETWEEN ((vt1.c1 COLLATE NOCASE)) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END))))AND((v0.c1 IN ()) COLLATE BINARY))) ORDER BY (- ((((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c2))))) ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((0.9061641035507891)=(((x'')+(vt1.c1)))) WHERE ((((NULL)) NOT BETWEEN ((vt1.c1 COLLATE NOCASE)) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END))));
SELECT * FROM v0 INNER JOIN vt1 ON ((0.9061641035507891)=(((x'')+(vt1.c1)))) WHERE ((((((NULL)) NOT BETWEEN ((vt1.c1 COLLATE NOCASE)) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END))))AND((v0.c1 IN ()) COLLATE BINARY))) ORDER BY (- ((((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c2))))) ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1 WHERE (vt1.c1) ORDER BY ((((vt1.c1)||(vt1.c1))) NOTNULL) DESC  NULLS FIRST, CAST(((vt1.c0)LIKE(vt1.c0)) AS NUMERIC), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((((vt1.c1) ISNULL)))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (((vt1.c1)AND((((('b.*vlk8')<>(vt1.c0)))||(x'87'))))) ORDER BY ((((vt1.c1)||(vt1.c1))) NOTNULL) DESC  NULLS FIRST, CAST(((vt1.c0)LIKE(vt1.c0)) AS NUMERIC), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((((vt1.c1) ISNULL)))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (vt1.c1) ORDER BY ((((vt1.c1)||(vt1.c1))) NOTNULL) DESC  NULLS FIRST, CAST(((vt1.c0)LIKE(vt1.c0)) AS NUMERIC), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((((vt1.c1) ISNULL)))) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (((vt1.c1)AND((((('b.*vlk8')<>(vt1.c0)))||(x'87'))))) ORDER BY ((((vt1.c1)||(vt1.c1))) NOTNULL) DESC  NULLS FIRST, CAST(((vt1.c0)LIKE(vt1.c0)) AS NUMERIC), (((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((((vt1.c1) ISNULL)))) ASC  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (CAST(((vt1.c1) NOT NULL) AS INTEGER));
SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(((vt1.c1) NOT NULL) AS INTEGER)) ORDER BY (((v0.c2, vt1.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), CAST(0.6500900044179727 AS REAL))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)), x''))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((LIKELY(vt1.c1))GLOB((((vt1.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c2)))))) ORDER BY (((v0.c2, vt1.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), CAST(0.6500900044179727 AS REAL))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)), x''))) LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (CAST(((vt1.c1) NOT NULL) AS INTEGER));
SELECT DISTINCT * FROM v0, vt1 WHERE (CAST(((vt1.c1) NOT NULL) AS INTEGER)) ORDER BY (((v0.c2, vt1.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), CAST(0.6500900044179727 AS REAL))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)), x''))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((LIKELY(vt1.c1))GLOB((((vt1.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c2)))))) ORDER BY (((v0.c2, vt1.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), CAST(0.6500900044179727 AS REAL))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)), x''))) LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (((vt1.c0) IS TRUE));
SELECT * FROM v0, vt1 WHERE (((vt1.c0) IS TRUE)) ORDER BY v0.c2 ASC  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (((vt1.c0) IS TRUE));
SELECT * FROM v0, vt1 WHERE (((vt1.c0) IS TRUE)) ORDER BY v0.c2 ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((((((((CAST(vt1.c0 AS BLOB))OR(((vt1.c1) ISNULL))))OR(((v0.c2) ISNULL))))AND((((((((((((('QWfB#V4')AND(NULL)))AND(vt1.c0)))AND(vt1.c0)))OR(x'b238f675aa')))OR(v0.c2)))OR('1931693139')))))OR(((v0.c1) ISNULL))));
SELECT COUNT(*) FROM vt1, v0 WHERE (((((((((CAST(vt1.c0 AS BLOB))OR(((vt1.c1) ISNULL))))OR(((v0.c2) ISNULL))))AND((((((((((((('QWfB#V4')AND(NULL)))AND(vt1.c0)))AND(vt1.c0)))OR(x'b238f675aa')))OR(v0.c2)))OR('1931693139')))))OR(((v0.c1) ISNULL)))) ORDER BY CASE ((v0.c1)OR(-624816301))  WHEN vt1.c0 COLLATE NOCASE THEN ((((((v0.c2)OR(v0.c0)))OR('3M46 ')))OR(v0.c2)) WHEN CASE v0.c2  WHEN v0.c2 THEN ' NMY야' WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 ELSE x'bf' END THEN ((v0.c0)<(vt1.c0)) ELSE (~ (vt1.c0)) END, ((v0.c2 COLLATE NOCASE)>=(CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c0 THEN v0.c1 END)) ASC LIMIT 2;
SELECT * FROM vt1, v0 WHERE (((vt1.c0) IS FALSE)) ORDER BY ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) COLLATE NOCASE  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (((((vt1.c0) IS FALSE))AND((((CASE v0.c0  WHEN v0.c2 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 END, v0.c1 COLLATE BINARY, v0.c1))!=((((x'72d45f')LIKE(v0.c0)), NULL, v0.c2)))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))==((v0.c0, vt1.c0, vt1.c0)))) BETWEEN (v0.c2) AND ((((NULL, v0.c0, vt1.c1, v0.c2)) NOT BETWEEN ((v0.c0, vt1.c0, v0.c2, v0.c0)) AND ((vt1.c0, v0.c0, vt1.c0, v0.c2))))) DESC, CASE v0.c0  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 END COLLATE NOCASE ASC  NULLS LAST, ((vt1.c0) IS TRUE) DESC LIMIT 0X1 INTERSECT SELECT * FROM vt1, v0 WHERE (((TOTAL_CHANGES()) NOT BETWEEN (('-380708997' IN ())) AND (((x'') BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))==((v0.c0, vt1.c0, vt1.c0)))) BETWEEN (v0.c2) AND ((((NULL, v0.c0, vt1.c1, v0.c2)) NOT BETWEEN ((v0.c0, vt1.c0, v0.c2, v0.c0)) AND ((vt1.c0, v0.c0, vt1.c0, v0.c2))))) DESC, CASE v0.c0  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 END COLLATE NOCASE ASC  NULLS LAST, ((vt1.c0) IS TRUE) DESC LIMIT 1;
SELECT * FROM vt1, v0 WHERE (((vt1.c0) IS FALSE)) ORDER BY ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) COLLATE NOCASE  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (((((vt1.c0) IS FALSE))AND((((CASE v0.c0  WHEN v0.c2 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 END, v0.c1 COLLATE BINARY, v0.c1))!=((((x'72d45f')LIKE(v0.c0)), NULL, v0.c2)))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))==((v0.c0, vt1.c0, vt1.c0)))) BETWEEN (v0.c2) AND ((((NULL, v0.c0, vt1.c1, v0.c2)) NOT BETWEEN ((v0.c0, vt1.c0, v0.c2, v0.c0)) AND ((vt1.c0, v0.c0, vt1.c0, v0.c2))))) DESC, CASE v0.c0  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 END COLLATE NOCASE ASC  NULLS LAST, ((vt1.c0) IS TRUE) DESC LIMIT 0X1 INTERSECT SELECT * FROM vt1, v0 WHERE (((TOTAL_CHANGES()) NOT BETWEEN (('-380708997' IN ())) AND (((x'') BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))==((v0.c0, vt1.c0, vt1.c0)))) BETWEEN (v0.c2) AND ((((NULL, v0.c0, vt1.c1, v0.c2)) NOT BETWEEN ((v0.c0, vt1.c0, v0.c2, v0.c0)) AND ((vt1.c0, v0.c0, vt1.c0, v0.c2))))) DESC, CASE v0.c0  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 END COLLATE NOCASE ASC  NULLS LAST, ((vt1.c0) IS TRUE) DESC LIMIT 1;
SELECT * FROM v0, vt1 WHERE ((((vt1.c1, NULL, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (vt1.c1) AND (v0.c2)), x'' COLLATE RTRIM, (+ (NULL)), CAST(v0.c2 AS TEXT))) AND ((((vt1.c1)||(0.7291417974009008)), ((NULL) NOT NULL), ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), vt1.c0 COLLATE BINARY))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((vt1.c1, NULL, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (vt1.c1) AND (v0.c2)), x'' COLLATE RTRIM, (+ (NULL)), CAST(v0.c2 AS TEXT))) AND ((((vt1.c1)||(0.7291417974009008)), ((NULL) NOT NULL), ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), vt1.c0 COLLATE BINARY))))AND(((((v0.c0) NOTNULL)) IS FALSE)))) ORDER BY CASE WHEN CAST(v0.c0 AS REAL) THEN CAST(vt1.c1 AS BLOB) WHEN CAST(vt1.c0 AS INTEGER) THEN (v0.c1 IN (v0.c2, vt1.c0, vt1.c0)) WHEN v0.c2 THEN ((vt1.c1)>=(v0.c1)) WHEN (NOT (vt1.c1)) THEN CAST(vt1.c0 AS TEXT) ELSE vt1.c0 END ASC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((- (((vt1.c1) IS TRUE)))) ORDER BY CASE WHEN CAST(v0.c0 AS REAL) THEN CAST(vt1.c1 AS BLOB) WHEN CAST(vt1.c0 AS INTEGER) THEN (v0.c1 IN (v0.c2, vt1.c0, vt1.c0)) WHEN v0.c2 THEN ((vt1.c1)>=(v0.c1)) WHEN (NOT (vt1.c1)) THEN CAST(vt1.c0 AS TEXT) ELSE vt1.c0 END ASC LIMIT 2;
SELECT * FROM v0, vt1 WHERE ((((vt1.c1, NULL, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (vt1.c1) AND (v0.c2)), x'' COLLATE RTRIM, (+ (NULL)), CAST(v0.c2 AS TEXT))) AND ((((vt1.c1)||(0.7291417974009008)), ((NULL) NOT NULL), ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), vt1.c0 COLLATE BINARY))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((vt1.c1, NULL, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (vt1.c1) AND (v0.c2)), x'' COLLATE RTRIM, (+ (NULL)), CAST(v0.c2 AS TEXT))) AND ((((vt1.c1)||(0.7291417974009008)), ((NULL) NOT NULL), ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), vt1.c0 COLLATE BINARY))))AND(((((v0.c0) NOTNULL)) IS FALSE)))) ORDER BY CASE WHEN CAST(v0.c0 AS REAL) THEN CAST(vt1.c1 AS BLOB) WHEN CAST(vt1.c0 AS INTEGER) THEN (v0.c1 IN (v0.c2, vt1.c0, vt1.c0)) WHEN v0.c2 THEN ((vt1.c1)>=(v0.c1)) WHEN (NOT (vt1.c1)) THEN CAST(vt1.c0 AS TEXT) ELSE vt1.c0 END ASC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((- (((vt1.c1) IS TRUE)))) ORDER BY CASE WHEN CAST(v0.c0 AS REAL) THEN CAST(vt1.c1 AS BLOB) WHEN CAST(vt1.c0 AS INTEGER) THEN (v0.c1 IN (v0.c2, vt1.c0, vt1.c0)) WHEN v0.c2 THEN ((vt1.c1)>=(v0.c1)) WHEN (NOT (vt1.c1)) THEN CAST(vt1.c0 AS TEXT) ELSE vt1.c0 END ASC LIMIT 2;
SELECT * FROM v0 WHERE (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)) COLLATE NOCASE) ORDER BY ((((+ (v0.c1)), ((v0.c1) IS TRUE)))=((CAST(v0.c2 AS INTEGER), (~ (v0.c1)))));
SELECT * FROM v0 WHERE (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)) COLLATE NOCASE) ORDER BY ((((+ (v0.c1)), ((v0.c1) IS TRUE)))==((CAST(v0.c2 AS INTEGER), (~ (v0.c1))))) INTERSECT SELECT ALL * FROM v0 WHERE (((((((((((((v0.c2)OR(v0.c2)))OR(v0.c2)))AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))AND(v0.c1)) COLLATE NOCASE COLLATE NOCASE) ORDER BY ((((+ (v0.c1)), ((v0.c1) IS TRUE)))==((CAST(v0.c2 AS INTEGER), (~ (v0.c1)))));
SELECT * FROM v0 WHERE (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)) COLLATE NOCASE) ORDER BY ((((+ (v0.c1)), ((v0.c1) IS TRUE)))=((CAST(v0.c2 AS INTEGER), (~ (v0.c1)))));
SELECT * FROM v0 WHERE (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)) COLLATE NOCASE) ORDER BY ((((+ (v0.c1)), ((v0.c1) IS TRUE)))==((CAST(v0.c2 AS INTEGER), (~ (v0.c1))))) INTERSECT SELECT ALL * FROM v0 WHERE (((((((((((((v0.c2)OR(v0.c2)))OR(v0.c2)))AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))AND(v0.c1)) COLLATE NOCASE COLLATE NOCASE) ORDER BY ((((+ (v0.c1)), ((v0.c1) IS TRUE)))==((CAST(v0.c2 AS INTEGER), (~ (v0.c1)))));
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((((('i\+')GLOB(vt1.c0))) NOTNULL));
SELECT COUNT(*) FROM vt1, v0 WHERE ((((('i\+')GLOB(vt1.c0))) NOTNULL)) INTERSECT SELECT ALL COUNT(*) FROM vt1, v0 WHERE (vt1.c1);
SELECT ALL * FROM v0 WHERE (((v0.c2) IS TRUE));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2) IS TRUE))AND(((((((v0.c2)OR(v0.c0)))OR(v0.c1)))OR(v0.c0)) COLLATE RTRIM))) LIMIT 0;
SELECT ALL * FROM v0 WHERE (((v0.c2) IS TRUE));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2) IS TRUE))AND(((((((v0.c2)OR(v0.c0)))OR(v0.c1)))OR(v0.c0)) COLLATE RTRIM))) LIMIT 0;
SELECT MAX(v0.c0) FROM vt1, v0 WHERE (CAST(((v0.c0) IS TRUE) AS REAL)) ORDER BY ((((v0.c2)|(v0.c2)))<=(vt1.c1))  NULLS FIRST, CASE WHEN ((((((((((v0.c1)OR(vt1.c0)))OR(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)) THEN ((vt1.c0)<<(vt1.c1)) WHEN ((v0.c2)*(v0.c2)) THEN (v0.c1 IN ()) ELSE ((vt1.c1) NOT NULL) END  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE (CAST(((v0.c0) IS TRUE) AS REAL)) ORDER BY ((((v0.c2)|(v0.c2)))<=(vt1.c1))  NULLS FIRST, CASE WHEN ((((((((((v0.c1)OR(vt1.c0)))OR(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)) THEN ((vt1.c0)<<(vt1.c1)) WHEN ((v0.c2)*(v0.c2)) THEN (v0.c1 IN ()) ELSE ((vt1.c1) NOT NULL) END  NULLS FIRST LIMIT 0;
SELECT * FROM vt1 WHERE ((((vt1.c1, NULL, 0.03669247882503357)) BETWEEN ((vt1.c1, (((vt1.c0, vt1.c0))>((vt1.c1, vt1.c0))), CAST(vt1.c0 AS REAL))) AND ((NULL, ((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)), NULL)))) ORDER BY CASE vt1.c1  WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)<(vt1.c0)) ELSE ((vt1.c0)IS NOT(vt1.c1)) END  NULLS FIRST, CASE (((vt1.c1, vt1.c1))>((vt1.c1, vt1.c1)))  WHEN CAST(vt1.c1 AS TEXT) THEN vt1.c0 COLLATE RTRIM WHEN vt1.c0 COLLATE RTRIM THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN '-610614943' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END WHEN (((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c1))) THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN '-314438201' THEN vt1.c1 ELSE vt1.c1 END WHEN ((((((vt1.c1)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)) THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END WHEN ((((vt1.c1)OR(vt1.c1)))OR('X#{AV4[g!')) THEN ((vt1.c0)>(vt1.c1)) END;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1, NULL, 0.03669247882503357)) BETWEEN ((vt1.c1, (((vt1.c0, vt1.c0))>((vt1.c1, vt1.c0))), CAST(vt1.c0 AS REAL))) AND ((NULL, ((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)), NULL))))AND((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOTNULL)))) ORDER BY CASE vt1.c1  WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)<(vt1.c0)) ELSE ((vt1.c0)IS NOT(vt1.c1)) END  NULLS FIRST, CASE (((vt1.c1, vt1.c1))>((vt1.c1, vt1.c1)))  WHEN CAST(vt1.c1 AS TEXT) THEN vt1.c0 COLLATE RTRIM WHEN vt1.c0 COLLATE RTRIM THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN '-610614943' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END WHEN (((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c1))) THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN '-314438201' THEN vt1.c1 ELSE vt1.c1 END WHEN ((((((vt1.c1)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)) THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END WHEN ((((vt1.c1)OR(vt1.c1)))OR('X#{AV4[g!')) THEN ((vt1.c0)>(vt1.c1)) END;
SELECT * FROM vt1 WHERE ((((vt1.c1, NULL, 0.03669247882503357)) BETWEEN ((vt1.c1, (((vt1.c0, vt1.c0))>((vt1.c1, vt1.c0))), CAST(vt1.c0 AS REAL))) AND ((NULL, ((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)), NULL)))) ORDER BY CASE vt1.c1  WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)<(vt1.c0)) ELSE ((vt1.c0)IS NOT(vt1.c1)) END  NULLS FIRST, CASE (((vt1.c1, vt1.c1))>((vt1.c1, vt1.c1)))  WHEN CAST(vt1.c1 AS TEXT) THEN vt1.c0 COLLATE RTRIM WHEN vt1.c0 COLLATE RTRIM THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN '-610614943' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END WHEN (((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c1))) THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN '-314438201' THEN vt1.c1 ELSE vt1.c1 END WHEN ((((((vt1.c1)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)) THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END WHEN ((((vt1.c1)OR(vt1.c1)))OR('X#{AV4[g!')) THEN ((vt1.c0)>(vt1.c1)) END;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1, NULL, 0.03669247882503357)) BETWEEN ((vt1.c1, (((vt1.c0, vt1.c0))>((vt1.c1, vt1.c0))), CAST(vt1.c0 AS REAL))) AND ((NULL, ((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)), NULL))))AND((((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOTNULL)))) ORDER BY CASE vt1.c1  WHEN vt1.c0 COLLATE BINARY THEN ((vt1.c0)<(vt1.c0)) ELSE ((vt1.c0)IS NOT(vt1.c1)) END  NULLS FIRST, CASE (((vt1.c1, vt1.c1))>((vt1.c1, vt1.c1)))  WHEN CAST(vt1.c1 AS TEXT) THEN vt1.c0 COLLATE RTRIM WHEN vt1.c0 COLLATE RTRIM THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN '-610614943' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END WHEN (((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c1))) THEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN '-314438201' THEN vt1.c1 ELSE vt1.c1 END WHEN ((((((vt1.c1)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)) THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END WHEN ((((vt1.c1)OR(vt1.c1)))OR('X#{AV4[g!')) THEN ((vt1.c0)>(vt1.c1)) END;
SELECT COUNT(*) FROM v0 WHERE ((((v0.c0)OR(v0.c0)) IN (0xffffffffda238ff2))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2))) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1))) AND (v0.c1)) DESC  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE ((((((v0.c0)OR(v0.c0)) IN (0xffffffffda238ff2)))AND((((NULL)*(x'66')) IN ((+ (v0.c1))))))) ORDER BY ((highlight(v0.c2, v0.c1, v0.c1, v0.c1)) IS FALSE) DESC  NULLS FIRST LIMIT 0;
SELECT * FROM v0 WHERE ((((v0.c0)/('0.23784727395044303')) IN (((' ᰊP')<=(v0.c1))))) ORDER BY ((((((((((((((((v0.c1)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))AND((v0.c2 IN (v0.c0)))))OR(COALESCE(v0.c2, v0.c2, v0.c1, v0.c0, v0.c0))) DESC  NULLS FIRST, ((((((((v0.c2)OR(((v0.c1)/(v0.c0)))))AND(CAST('0.011496114106102517' AS TEXT))))AND(((v0.c0)&(v0.c0)))))OR(((v0.c0) NOT BETWEEN ('팍P4_yq.') AND (v0.c2)))) DESC  NULLS LAST, ((TYPEOF(v0.c0)) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) AND ((v0.c1 IN ())));
SELECT DISTINCT * FROM v0 WHERE ((((v0.c0)/('0.23784727395044303')) IN (((' ᰊP')==(v0.c1))))) ORDER BY ((((((((((((((((v0.c1)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))AND((v0.c2 IN (v0.c0)))))OR(COALESCE(v0.c2, v0.c2, v0.c1, v0.c0, v0.c0))) DESC  NULLS FIRST, ((((((((v0.c2)OR(((v0.c1)/(v0.c0)))))AND(CAST('0.011496114106102517' AS TEXT))))AND(((v0.c0)&(v0.c0)))))OR(((v0.c0) NOT BETWEEN ('팍P4_yq.') AND (v0.c2)))) DESC  NULLS LAST, ((TYPEOF(v0.c0)) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) AND ((v0.c1 IN ()))) INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c0) NOT BETWEEN (1.843766385E9) AND (v0.c2)) COLLATE RTRIM) ORDER BY ((((((((((((((((v0.c1)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))AND((v0.c2 IN (v0.c0)))))OR(COALESCE(v0.c2, v0.c2, v0.c1, v0.c0, v0.c0))) DESC  NULLS FIRST, ((((((((v0.c2)OR(((v0.c1)/(v0.c0)))))AND(CAST('0.011496114106102517' AS TEXT))))AND(((v0.c0)&(v0.c0)))))OR(((v0.c0) NOT BETWEEN ('팍P4_yq.') AND (v0.c2)))) DESC  NULLS LAST, ((TYPEOF(v0.c0)) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) AND ((v0.c1 IN ())));
SELECT * FROM v0 WHERE ((((v0.c0)/('0.23784727395044303')) IN (((' ᰊP')<=(v0.c1))))) ORDER BY ((((((((((((((((v0.c1)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))AND((v0.c2 IN (v0.c0)))))OR(COALESCE(v0.c2, v0.c2, v0.c1, v0.c0, v0.c0))) DESC  NULLS FIRST, ((((((((v0.c2)OR(((v0.c1)/(v0.c0)))))AND(CAST('0.011496114106102517' AS TEXT))))AND(((v0.c0)&(v0.c0)))))OR(((v0.c0) NOT BETWEEN ('팍P4_yq.') AND (v0.c2)))) DESC  NULLS LAST, ((TYPEOF(v0.c0)) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) AND ((v0.c1 IN ())));
SELECT DISTINCT * FROM v0 WHERE ((((v0.c0)/('0.23784727395044303')) IN (((' ᰊP')==(v0.c1))))) ORDER BY ((((((((((((((((v0.c1)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))AND((v0.c2 IN (v0.c0)))))OR(COALESCE(v0.c2, v0.c2, v0.c1, v0.c0, v0.c0))) DESC  NULLS FIRST, ((((((((v0.c2)OR(((v0.c1)/(v0.c0)))))AND(CAST('0.011496114106102517' AS TEXT))))AND(((v0.c0)&(v0.c0)))))OR(((v0.c0) NOT BETWEEN ('팍P4_yq.') AND (v0.c2)))) DESC  NULLS LAST, ((TYPEOF(v0.c0)) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) AND ((v0.c1 IN ()))) INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c0) NOT BETWEEN (1.843766385E9) AND (v0.c2)) COLLATE RTRIM) ORDER BY ((((((((((((((((v0.c1)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))AND((v0.c2 IN (v0.c0)))))OR(COALESCE(v0.c2, v0.c2, v0.c1, v0.c0, v0.c0))) DESC  NULLS FIRST, ((((((((v0.c2)OR(((v0.c1)/(v0.c0)))))AND(CAST('0.011496114106102517' AS TEXT))))AND(((v0.c0)&(v0.c0)))))OR(((v0.c0) NOT BETWEEN ('팍P4_yq.') AND (v0.c2)))) DESC  NULLS LAST, ((TYPEOF(v0.c0)) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) AND ((v0.c1 IN ())));
SELECT COUNT(*) FROM vt1, v0 WHERE ((((((vt1.c0, vt1.c0, vt1.c0))<((v0.c1, v0.c2, vt1.c0))))&(NULLIF(DISTINCT v0.c2, v0.c0))));
SELECT COUNT(*) FROM vt1, v0 WHERE ((((((vt1.c0, vt1.c0, vt1.c0))<((v0.c1, v0.c2, vt1.c0))))&(NULLIF(DISTINCT v0.c2, v0.c0)))) LIMIT 2;
SELECT * FROM vt1 WHERE (CASE WHEN ((vt1.c1)*(0.49428930329004583)) THEN ((vt1.c0)>>(vt1.c1)) ELSE CASE 0.12114540667093354  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END END);
SELECT ALL * FROM vt1 WHERE (CASE WHEN ((vt1.c1)*(0.49428930329004583)) THEN ((vt1.c0)>>(vt1.c1)) ELSE CASE 0.12114540667093354  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END END) ORDER BY (((vt1.c0 IN (vt1.c0)))IS NOT((((vt1.c1))<=((vt1.c1))))), ((ABS(vt1.c0))AND(CASE WHEN vt1.c1 THEN vt1.c0 END)) ASC  NULLS LAST, CASE CAST(vt1.c0 AS TEXT)  WHEN (((vt1.c1))>=((vt1.c1))) THEN x'ea' COLLATE RTRIM END ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt1 WHERE (CASE WHEN ((vt1.c1)*(0.49428930329004583)) THEN ((vt1.c0)>>(vt1.c1)) ELSE CASE 0.12114540667093354  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END END);
SELECT ALL * FROM vt1 WHERE (CASE WHEN ((vt1.c1)*(0.49428930329004583)) THEN ((vt1.c0)>>(vt1.c1)) ELSE CASE 0.12114540667093354  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END END) ORDER BY (((vt1.c0 IN (vt1.c0)))IS NOT((((vt1.c1))<=((vt1.c1))))), ((ABS(vt1.c0))AND(CASE WHEN vt1.c1 THEN vt1.c0 END)) ASC  NULLS LAST, CASE CAST(vt1.c0 AS TEXT)  WHEN (((vt1.c1))>=((vt1.c1))) THEN x'ea' COLLATE RTRIM END ASC  NULLS LAST LIMIT 0X0;
SELECT MAX(v0.c2) FROM v0 WHERE (x'');
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (x'') ORDER BY v0.c2  NULLS FIRST;
SELECT ALL * FROM vt1 INNER JOIN v0 ON 'Tjm?v&E%' WHERE ((((((v0.c0 IN (v0.c1, v0.c1)))AND(UPPER(DISTINCT v0.c2))))AND((vt1.c1 IN (vt1.c1))))) ORDER BY (~ (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN NULL WHEN v0.c1 THEN v0.c2 END)) DESC  NULLS LAST, ((x'')>=((~ (v0.c0)))) DESC;
SELECT ALL * FROM vt1 INNER JOIN v0 ON 'Tjm?v&E%' WHERE ((((((((v0.c0 IN (v0.c1, v0.c1)))AND(UPPER(DISTINCT v0.c2))))AND((vt1.c1 IN (vt1.c1)))))AND((((+ (v0.c2))) ISNULL)))) ORDER BY (~ (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN NULL WHEN v0.c1 THEN v0.c2 END)) DESC  NULLS LAST, ((x'')>=((~ (v0.c0)))) DESC LIMIT 0x0;
SELECT ALL * FROM vt1 INNER JOIN v0 ON 'Tjm?v&E%' WHERE ((((((v0.c0 IN (v0.c1, v0.c1)))AND(UPPER(DISTINCT v0.c2))))AND((vt1.c1 IN (vt1.c1))))) ORDER BY (~ (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN NULL WHEN v0.c1 THEN v0.c2 END)) DESC  NULLS LAST, ((x'')>=((~ (v0.c0)))) DESC;
SELECT ALL * FROM vt1 INNER JOIN v0 ON 'Tjm?v&E%' WHERE ((((((((v0.c0 IN (v0.c1, v0.c1)))AND(UPPER(DISTINCT v0.c2))))AND((vt1.c1 IN (vt1.c1)))))AND((((+ (v0.c2))) ISNULL)))) ORDER BY (~ (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN NULL WHEN v0.c1 THEN v0.c2 END)) DESC  NULLS LAST, ((x'')>=((~ (v0.c0)))) DESC LIMIT 0x0;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((((v0.c1 COLLATE RTRIM)OR(0.8323452670571361)))OR(((v0.c1) NOT BETWEEN (NULL) AND (v0.c2))))) ORDER BY ((((((v0.c0, v0.c2))>=((v0.c2, v0.c2))), v0.c1 COLLATE BINARY, ((v0.c0)<(v0.c1))))<=((CAST(v0.c2 AS REAL), CAST(v0.c2 AS BLOB), v0.c0))) DESC, (((v0.c2)>>(NULL)) IN ())  NULLS LAST;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((((v0.c1 COLLATE RTRIM)OR(0.8323452670571361)))OR(((v0.c1) NOT BETWEEN (NULL) AND (v0.c2))))) ORDER BY CASE WHEN 'w!' THEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c0)) END DESC LIMIT 0x0;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE (COALESCE((+ (v0.c0)), (~ (v0.c1))));
SELECT DISTINCT MAX(vt1.c1) FROM vt1, v0 WHERE (((COALESCE((+ (v0.c0)), (~ (v0.c1))))AND(CASE WHEN (vt1.c0 IN ()) THEN v0.c0 WHEN ((v0.c2) BETWEEN (vt1.c0) AND (v0.c1)) THEN CAST(vt1.c0 AS TEXT) WHEN 'jTUlk-[U' THEN (v0.c1 IN (v0.c1)) WHEN ((vt1.c0) IS TRUE) THEN ((((((v0.c0)AND(vt1.c1)))OR(NULL)))OR(vt1.c0)) WHEN IFNULL(v0.c0, v0.c1) THEN DATE(vt1.c0, vt1.c1, v0.c0) ELSE NULLIF(DISTINCT v0.c0, 0.3851508088864085) END))) INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1, v0 WHERE ((((NULL)) BETWEEN ((((v0.c1)OR(vt1.c0)))) AND (((- (v0.c0))))));
SELECT ALL MIN(v0.c0) FROM vt1, v0 WHERE (((((v0.c1)<(v0.c2)))>>((+ (vt1.c1)))));
SELECT ALL MIN(v0.c0) FROM vt1, v0 WHERE (((((v0.c1)<(v0.c2)))>>((+ (vt1.c1))))) ORDER BY v0.c0, (((((v0.c1)<(vt1.c0)), HEX(vt1.c0)))>=(((v0.c0 IN (v0.c0)), CASE WHEN x'e79e' THEN v0.c0 END))) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (x'');
SELECT DISTINCT * FROM v0 WHERE (x'') ORDER BY ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) COLLATE BINARY, ((((v0.c0 COLLATE NOCASE)OR(((v0.c0)LIKE(v0.c0)))))AND(v0.c0 COLLATE BINARY)) ASC  NULLS LAST, ((((((v0.c2)OR(v0.c2)))OR(v0.c2)))>=(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)))) ASC LIMIT 0;
SELECT ALL * FROM v0 WHERE (x'');
SELECT DISTINCT * FROM v0 WHERE (x'') ORDER BY ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) COLLATE BINARY, ((((v0.c0 COLLATE NOCASE)OR(((v0.c0)LIKE(v0.c0)))))AND(v0.c0 COLLATE BINARY)) ASC  NULLS LAST, ((((((v0.c2)OR(v0.c2)))OR(v0.c2)))>=(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)))) ASC LIMIT 0;
SELECT * FROM v0 WHERE (CAST(SQLITE_SOURCE_ID() AS INTEGER)) ORDER BY ((((v0.c0)>=(NULL))) BETWEEN (((v0.c2)/(v0.c2))) AND (((((((v0.c0)OR(v0.c2)))OR(v0.c0)))OR(v0.c1))));
SELECT ALL * FROM v0 WHERE (CAST(SQLITE_SOURCE_ID() AS INTEGER)) ORDER BY ((((v0.c0)>=(NULL))) BETWEEN (((v0.c2)/(v0.c2))) AND (((((((v0.c0)OR(v0.c2)))OR(v0.c0)))OR(v0.c1)))) LIMIT 0x3;
SELECT * FROM v0 WHERE (CAST(SQLITE_SOURCE_ID() AS INTEGER)) ORDER BY ((((v0.c0)>=(NULL))) BETWEEN (((v0.c2)/(v0.c2))) AND (((((((v0.c0)OR(v0.c2)))OR(v0.c0)))OR(v0.c1))));
SELECT ALL * FROM v0 WHERE (CAST(SQLITE_SOURCE_ID() AS INTEGER)) ORDER BY ((((v0.c0)>=(NULL))) BETWEEN (((v0.c2)/(v0.c2))) AND (((((((v0.c0)OR(v0.c2)))OR(v0.c0)))OR(v0.c1)))) LIMIT 0x3;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (LIKELIHOOD(SQLITE_SOURCE_ID(), 754692099));
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((LIKELIHOOD(SQLITE_SOURCE_ID(), 0X2cfbb003))AND(((((('1061974723', vt1.c0))>=((vt1.c1, vt1.c0))))>(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))))) INTERSECT SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (CAST(ABS(DISTINCT vt1.c1) AS INTEGER));
SELECT ALL * FROM vt1, v0 WHERE (((v0.c2 COLLATE RTRIM) IS TRUE)) ORDER BY CASE (((vt1.c0, vt1.c1, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, vt1.c1, vt1.c1, v0.c0)) AND (('-1312942963', v0.c0, vt1.c0, vt1.c0)))  WHEN CASE vt1.c0  WHEN v0.c2 THEN v0.c2 END THEN CAST(v0.c1 AS BLOB) WHEN x'' THEN (((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c0))) END  NULLS FIRST, 0.44533164645488954 DESC;
SELECT * FROM vt1, v0 WHERE (((v0.c2 COLLATE RTRIM) IS TRUE)) ORDER BY CASE (((vt1.c0, vt1.c1, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, vt1.c1, vt1.c1, v0.c0)) AND (('-1312942963', v0.c0, vt1.c0, vt1.c0)))  WHEN CASE vt1.c0  WHEN v0.c2 THEN v0.c2 END THEN CAST(v0.c1 AS BLOB) WHEN x'' THEN (((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c0))) END  NULLS FIRST, 0.44533164645488954 DESC LIMIT 0X2;
SELECT ALL * FROM vt1, v0 WHERE (((v0.c2 COLLATE RTRIM) IS TRUE)) ORDER BY CASE (((vt1.c0, vt1.c1, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, vt1.c1, vt1.c1, v0.c0)) AND (('-1312942963', v0.c0, vt1.c0, vt1.c0)))  WHEN CASE vt1.c0  WHEN v0.c2 THEN v0.c2 END THEN CAST(v0.c1 AS BLOB) WHEN x'' THEN (((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c0))) END  NULLS FIRST, 0.44533164645488954 DESC;
SELECT * FROM vt1, v0 WHERE (((v0.c2 COLLATE RTRIM) IS TRUE)) ORDER BY CASE (((vt1.c0, vt1.c1, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, vt1.c1, vt1.c1, v0.c0)) AND (('-1312942963', v0.c0, vt1.c0, vt1.c0)))  WHEN CASE vt1.c0  WHEN v0.c2 THEN v0.c2 END THEN CAST(v0.c1 AS BLOB) WHEN x'' THEN (((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c0))) END  NULLS FIRST, 0.44533164645488954 DESC LIMIT 0X2;
SELECT COUNT(*) FROM v0 WHERE (v0.c0) ORDER BY (((v0.c2, v0.c2, v0.c0)) NOT BETWEEN ((((((v0.c2)AND(v0.c1)))OR(v0.c2)), ((v0.c2)*(v0.c2)), ((NULL) BETWEEN (v0.c2) AND (NULL)))) AND ((CAST(v0.c1 AS INTEGER), UPPER(DISTINCT v0.c1), INSTR(v0.c0, v0.c1)))) DESC, (((((v0.c1) ISNULL), ((v0.c1)-(v0.c0))))<((((v0.c0) NOT NULL), v0.c2))) DESC;
SELECT COUNT(*) FROM v0 WHERE (((v0.c0)AND((((v0.c1)) BETWEEN ((((v0.c1) NOT BETWEEN (0Xffffffffdac628c6) AND (v0.c0)))) AND (((((v0.c0)) BETWEEN ((v0.c1)) AND ((v0.c0))))))))) ORDER BY ((((v0.c2)==(v0.c1))) NOTNULL) ASC  NULLS LAST, CAST('1790788924' AS REAL) DESC  NULLS FIRST, CAST(((v0.c0) NOT NULL) AS BLOB)  NULLS FIRST LIMIT 0x2 INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE ((((((v0.c2, v0.c0, v0.c2))<>((v0.c2, v0.c0, v0.c1)))) NOT BETWEEN (v0.c0 COLLATE BINARY) AND (((((v0.c1)AND(v0.c1)))AND(v0.c0))))) ORDER BY ((((v0.c2)==(v0.c1))) NOTNULL) ASC  NULLS LAST, CAST('1790788924' AS REAL) DESC  NULLS FIRST, CAST(((v0.c0) NOT NULL) AS BLOB)  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt1, v0 WHERE (((((((((vt1.c0)AND(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(v0.c2)) COLLATE BINARY) ORDER BY ((((v0.c0)<(1.769291611E9)))==(153423764 COLLATE RTRIM)) ASC  NULLS LAST, CAST(CASE vt1.c0  WHEN NULL THEN v0.c1 WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN '' WHEN vt1.c0 THEN v0.c2 ELSE vt1.c0 END AS INTEGER), (((v0.c0) ISNULL) IN (CAST(v0.c0 AS TEXT), (((vt1.c1, vt1.c1, v0.c0))=((vt1.c1, 0.03115116980725474, v0.c2)))))  NULLS LAST;
SELECT DISTINCT * FROM vt1, v0 WHERE (((((((((vt1.c0)AND(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(v0.c2)) COLLATE BINARY) ORDER BY ((((v0.c0)<(1.769291611E9)))=(153423764 COLLATE RTRIM)) ASC  NULLS LAST, CAST(CASE vt1.c0  WHEN NULL THEN v0.c1 WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN '' WHEN vt1.c0 THEN v0.c2 ELSE vt1.c0 END AS INTEGER), (((v0.c0) ISNULL) IN (CAST(v0.c0 AS TEXT), (((vt1.c1, vt1.c1, v0.c0))==((vt1.c1, 0.03115116980725474, v0.c2)))))  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt1, v0 WHERE (((((((((vt1.c0)AND(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(v0.c2)) COLLATE BINARY) ORDER BY ((((v0.c0)<(1.769291611E9)))==(153423764 COLLATE RTRIM)) ASC  NULLS LAST, CAST(CASE vt1.c0  WHEN NULL THEN v0.c1 WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN '' WHEN vt1.c0 THEN v0.c2 ELSE vt1.c0 END AS INTEGER), (((v0.c0) ISNULL) IN (CAST(v0.c0 AS TEXT), (((vt1.c1, vt1.c1, v0.c0))=((vt1.c1, 0.03115116980725474, v0.c2)))))  NULLS LAST;
SELECT DISTINCT * FROM vt1, v0 WHERE (((((((((vt1.c0)AND(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(v0.c2)) COLLATE BINARY) ORDER BY ((((v0.c0)<(1.769291611E9)))=(153423764 COLLATE RTRIM)) ASC  NULLS LAST, CAST(CASE vt1.c0  WHEN NULL THEN v0.c1 WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN '' WHEN vt1.c0 THEN v0.c2 ELSE vt1.c0 END AS INTEGER), (((v0.c0) ISNULL) IN (CAST(v0.c0 AS TEXT), (((vt1.c1, vt1.c1, v0.c0))==((vt1.c1, 0.03115116980725474, v0.c2)))))  NULLS LAST LIMIT 2;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((vt1.c0 IN ()) IN ((('}>')IS(vt1.c0)), MIN(vt1.c0, vt1.c0)))) ORDER BY (vt1.c0 COLLATE RTRIM IN ('540065043')), CAST((+ (vt1.c0)) AS NUMERIC), (NOT ((- (NULL))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c0 IN ()) IN ((('}>')IS(vt1.c0)), MIN(vt1.c0, vt1.c0))))AND(((((NOT (vt1.c0)), ((vt1.c1) ISNULL)))>=(((+ (vt1.c1)), (vt1.c1 IN (vt1.c0, vt1.c1)))))))) ORDER BY (vt1.c0 COLLATE RTRIM IN ('540065043')), CAST((+ (vt1.c0)) AS NUMERIC), (NOT ((- (NULL))));
SELECT ALL * FROM vt1, v0 WHERE (v0.c0);
SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c0)AND(CASE CAST(vt1.c0 AS TEXT)  WHEN CASE v0.c0  WHEN v0.c0 THEN v0.c2 ELSE vt1.c0 END THEN ((vt1.c0)|(v0.c1)) END))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)IS(((v0.c2) IS TRUE)))) LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (v0.c0);
SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c0)AND(CASE CAST(vt1.c0 AS TEXT)  WHEN CASE v0.c0  WHEN v0.c0 THEN v0.c2 ELSE vt1.c0 END THEN ((vt1.c0)|(v0.c1)) END))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)IS(((v0.c2) IS TRUE)))) LIMIT 0;
SELECT * FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END AS REAL));
SELECT DISTINCT * FROM vt1 WHERE (((CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END AS REAL))AND(615923876))) ORDER BY ((('-2038281165'))<=((vt1.c1))) COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c1 COLLATE RTRIM) IS FALSE)) ORDER BY ((('-2038281165'))<=((vt1.c1))) COLLATE NOCASE;
SELECT * FROM vt1 WHERE (CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END AS REAL));
SELECT DISTINCT * FROM vt1 WHERE (((CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END AS REAL))AND(615923876))) ORDER BY ((('-2038281165'))<=((vt1.c1))) COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((vt1.c1 COLLATE RTRIM) IS FALSE)) ORDER BY ((('-2038281165'))<=((vt1.c1))) COLLATE NOCASE;
SELECT MAX(v0.c1) FROM v0 WHERE (0.6175607106427728);
SELECT MAX(v0.c1) FROM v0 WHERE (((0.6175607106427728)AND(CAST(((v0.c1)>=(v0.c0)) AS BLOB)))) LIMIT 0X3;
SELECT * FROM v0, vt1 WHERE (CASE ((((((v0.c1)AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1))  WHEN (~ (2.077995519E9)) THEN vt1.c0 WHEN ((v0.c2) BETWEEN (vt1.c1) AND ('!')) THEN (v0.c1 IN (v0.c0)) ELSE (NOT (v0.c2)) END) ORDER BY ((((((((((((v0.c0) NOT NULL))AND(((((((((v0.c0)OR(vt1.c0)))AND(v0.c2)))OR(v0.c1)))OR(vt1.c0)))))AND(CAST(v0.c0 AS NUMERIC))))OR(((vt1.c0) IS TRUE))))OR((vt1.c0 IN (v0.c2)))))AND(((v0.c0)|(v0.c0))))  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((CASE ((((((v0.c1)AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1))  WHEN (~ (2.077995519E9)) THEN vt1.c0 WHEN ((v0.c2) BETWEEN (vt1.c1) AND ('!')) THEN (v0.c1 IN (v0.c0)) ELSE (NOT (v0.c2)) END)AND(CASE (vt1.c0 IN (vt1.c0))  WHEN ((vt1.c1)&(v0.c0)) THEN v0.c1 COLLATE NOCASE WHEN (v0.c2 IN (v0.c0)) THEN ((v0.c2)>(vt1.c0)) END))) ORDER BY ((CAST(v0.c2 AS BLOB))GLOB(CASE WHEN -1.591475189E9 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 END)), ((((((((vt1.c1)AND(v0.c0)))AND(vt1.c1)))OR(vt1.c0))) NOT NULL);
SELECT * FROM v0, vt1 WHERE (CASE ((((((v0.c1)AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1))  WHEN (~ (2.077995519E9)) THEN vt1.c0 WHEN ((v0.c2) BETWEEN (vt1.c1) AND ('!')) THEN (v0.c1 IN (v0.c0)) ELSE (NOT (v0.c2)) END) ORDER BY ((((((((((((v0.c0) NOT NULL))AND(((((((((v0.c0)OR(vt1.c0)))AND(v0.c2)))OR(v0.c1)))OR(vt1.c0)))))AND(CAST(v0.c0 AS NUMERIC))))OR(((vt1.c0) IS TRUE))))OR((vt1.c0 IN (v0.c2)))))AND(((v0.c0)|(v0.c0))))  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((CASE ((((((v0.c1)AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1))  WHEN (~ (2.077995519E9)) THEN vt1.c0 WHEN ((v0.c2) BETWEEN (vt1.c1) AND ('!')) THEN (v0.c1 IN (v0.c0)) ELSE (NOT (v0.c2)) END)AND(CASE (vt1.c0 IN (vt1.c0))  WHEN ((vt1.c1)&(v0.c0)) THEN v0.c1 COLLATE NOCASE WHEN (v0.c2 IN (v0.c0)) THEN ((v0.c2)>(vt1.c0)) END))) ORDER BY ((CAST(v0.c2 AS BLOB))GLOB(CASE WHEN -1.591475189E9 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 END)), ((((((((vt1.c1)AND(v0.c0)))AND(vt1.c1)))OR(vt1.c0))) NOT NULL);
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((((v0.c0) IS FALSE)) ISNULL)) ORDER BY CASE WHEN v0.c0 THEN ((v0.c1)<<(v0.c0)) WHEN (v0.c2 IN ()) THEN CAST(v0.c0 AS NUMERIC) WHEN ((v0.c1)==(v0.c1)) THEN CAST('z_' AS NUMERIC) WHEN v0.c1 COLLATE RTRIM THEN ((v0.c0)-(v0.c1)) END;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((((v0.c0) IS FALSE)) ISNULL)) ORDER BY CASE WHEN v0.c0 THEN ((v0.c1)<<(v0.c0)) WHEN (v0.c2 IN ()) THEN CAST(v0.c0 AS NUMERIC) WHEN ((v0.c1)==(v0.c1)) THEN CAST('z_' AS NUMERIC) WHEN v0.c1 COLLATE RTRIM THEN ((v0.c0)-(v0.c1)) END INTERSECT SELECT ALL MAX(v0.c2) FROM v0 WHERE ((((v0.c1)) BETWEEN ((((((((((v0.c2)AND(v0.c2)))AND(v0.c1)))AND(v0.c2)))OR(x'')))) AND ((v0.c2 COLLATE RTRIM)))) ORDER BY CASE WHEN v0.c0 THEN ((v0.c1)<<(v0.c0)) WHEN (v0.c2 IN ()) THEN CAST(v0.c0 AS NUMERIC) WHEN ((v0.c1)==(v0.c1)) THEN CAST('z_' AS NUMERIC) WHEN v0.c1 COLLATE RTRIM THEN ((v0.c0)-(v0.c1)) END;
SELECT ALL * FROM v0 WHERE (((((v0.c1)+(v0.c2))) BETWEEN (((v0.c1)<(v0.c2))) AND (((v0.c2) NOT NULL))));
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c1)+(v0.c2))) BETWEEN (((v0.c1)<(v0.c2))) AND (((v0.c2) NOT NULL))))AND((((x'') IS FALSE) IN ()))));
SELECT ALL * FROM v0 WHERE (((((v0.c1)+(v0.c2))) BETWEEN (((v0.c1)<(v0.c2))) AND (((v0.c2) NOT NULL))));
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c1)+(v0.c2))) BETWEEN (((v0.c1)<(v0.c2))) AND (((v0.c2) NOT NULL))))AND((((x'') IS FALSE) IN ()))));
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE ((((v0.c0)) BETWEEN ((((v0.c2)|(v0.c1)))) AND ((UNLIKELY(v0.c1)))));
SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE ((((((v0.c0)) BETWEEN ((((v0.c2)|(v0.c1)))) AND ((UNLIKELY(v0.c1)))))AND(((CASE v0.c2  WHEN 0xb053e98 THEN 0.8137056751271089 WHEN x'54' THEN vt1.c0 ELSE 0.8680590165866197 END) BETWEEN (((((((v0.c2)OR(v0.c2)))AND(v0.c1)))AND(x'f83f'))) AND (CASE vt1.c1  WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN '-616332281' WHEN vt1.c0 THEN v0.c2 ELSE v0.c2 END)))));
SELECT MAX(vt1.c1) FROM vt1 CROSS JOIN v0 ON ((((v0.c0)+(v0.c1)))/(x'')) WHERE (((CAST(v0.c2 AS REAL)) NOT BETWEEN ((x'' IN ())) AND (((v0.c2)<>(v0.c0))))) ORDER BY ((UPPER(DISTINCT v0.c1)) NOTNULL) ASC, (((((v0.c1)<(v0.c0)), 0.6179824338132971, CASE v0.c2  WHEN v0.c0 THEN v0.c1 END, ((((((v0.c2)OR(v0.c2)))AND(NULL)))AND(v0.c0))))==(((- (vt1.c1)), ((v0.c1)||(v0.c2)), (NOT (v0.c2)), CASE vt1.c0  WHEN v0.c2 THEN vt1.c1 WHEN 0.9872397124392178 THEN v0.c2 ELSE v0.c2 END)))  NULLS LAST;
SELECT DISTINCT MAX(vt1.c1) FROM vt1 NOT INDEXED CROSS JOIN v0 ON ((((v0.c0)+(v0.c1)))/(x'')) WHERE (((((CAST(v0.c2 AS REAL)) NOT BETWEEN ((x'' IN ())) AND (((v0.c2)<>(v0.c0)))))AND(v0.c1))) ORDER BY CAST(json_insert(v0.c0, vt1.c0, NULL, v0.c1) AS INTEGER) ASC, ((CASE WHEN vt1.c1 THEN v0.c0 END) NOT BETWEEN (CASE v0.c2  WHEN v0.c1 THEN vt1.c0 END) AND (ABS(vt1.c0))) DESC INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 CROSS JOIN v0 ON ((((v0.c0)+(v0.c1)))/(x'')) WHERE (((((vt1.c0)<=(v0.c0)))%(CASE WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))) ORDER BY CAST(json_insert(v0.c0, vt1.c0, NULL, v0.c1) AS INTEGER) ASC, ((CASE WHEN vt1.c1 THEN v0.c0 END) NOT BETWEEN (CASE v0.c2  WHEN v0.c1 THEN vt1.c0 END) AND (ABS(vt1.c0))) DESC;
SELECT COUNT(*) FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((vt1.c0)AND(vt1.c0 COLLATE BINARY))) ORDER BY ((x'90')IS(((vt1.c0)&(vt1.c1)))) DESC LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CAST(CAST(vt1.c1 AS BLOB) AS REAL)) ORDER BY ((x'90')IS(((vt1.c0)&(vt1.c1)))) DESC LIMIT 0x0;
SELECT MIN(vt1.c0) FROM v0, vt1 WHERE ((((v0.c1, ((vt1.c0)>(v0.c2))))<=((vt1.c0, (v0.c2 IN (v0.c2)))))) ORDER BY (~ (vt1.c0 COLLATE RTRIM)) ASC, CAST(vt1.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST, (((((vt1.c0, v0.c1)) NOT BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c0, v0.c2))))<>(CASE WHEN vt1.c0 THEN v0.c0 ELSE vt1.c1 END));
SELECT DISTINCT MIN(vt1.c0) FROM v0, vt1 WHERE ((((((v0.c1, ((vt1.c0)>(v0.c2))))<=((vt1.c0, (v0.c2 IN (v0.c2))))))AND(((v0.c0) BETWEEN (CAST(vt1.c0 AS REAL)) AND (LOWER(DISTINCT vt1.c1)))))) ORDER BY (~ (vt1.c0 COLLATE RTRIM)) ASC, CAST(vt1.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST, (((((vt1.c0, v0.c1)) NOT BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c0, v0.c2))))!=(CASE WHEN vt1.c0 THEN v0.c0 ELSE vt1.c1 END)) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM v0, vt1 WHERE (vt1.c0) ORDER BY (~ (vt1.c0 COLLATE RTRIM)) ASC, CAST(vt1.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST, (((((vt1.c0, v0.c1)) NOT BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c0, v0.c2))))<>(CASE WHEN vt1.c0 THEN v0.c0 ELSE vt1.c1 END));
SELECT * FROM vt1 WHERE (CAST(((vt1.c1) IS FALSE) AS REAL)) ORDER BY (((((vt1.c1))<>((vt1.c0)))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND ((NOT (vt1.c0))))  NULLS FIRST, (+ (CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END)) ASC  NULLS FIRST, (- (((((((vt1.c1)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))), vt1.c0  NULLS FIRST;
SELECT * FROM vt1 WHERE (CAST(((vt1.c1) IS FALSE) AS REAL)) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))||(rtreenode(vt1.c1, vt1.c1)))  NULLS LAST, ((+ (vt1.c1)) IN (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END)) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (CAST(((vt1.c1) IS FALSE) AS REAL)) ORDER BY (((((vt1.c1))<>((vt1.c0)))) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND ((NOT (vt1.c0))))  NULLS FIRST, (+ (CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END)) ASC  NULLS FIRST, (- (((((((vt1.c1)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))), vt1.c0  NULLS FIRST;
SELECT * FROM vt1 WHERE (CAST(((vt1.c1) IS FALSE) AS REAL)) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))||(rtreenode(vt1.c1, vt1.c1)))  NULLS LAST, ((+ (vt1.c1)) IN (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END)) DESC  NULLS LAST;
SELECT MAX(v0.c1) FROM v0 WHERE ((((NOT (v0.c2))) NOT NULL));
SELECT MAX(v0.c1) FROM v0 WHERE ((((NOT (v0.c2))) NOT NULL)) ORDER BY CASE WHEN UNLIKELY(v0.c0) THEN x'd3' COLLATE NOCASE WHEN ((v0.c2)LIKE('0.3779866865540582')) THEN ((((v0.c0)AND(v0.c0)))AND(v0.c0)) WHEN ((0.7481975488668207) ISNULL) THEN (NOT (v0.c0)) ELSE x'' END ASC;
SELECT ALL * FROM v0, vt1 WHERE ((((v0.c2) IS TRUE) IN (((v0.c2)GLOB(v0.c0)), ((v0.c1) IS TRUE))));
SELECT ALL * FROM v0, vt1 WHERE ((((v0.c2) IS TRUE) IN (((v0.c2)GLOB(v0.c0)), ((v0.c1) IS TRUE)))) LIMIT 0X2;
SELECT ALL * FROM v0, vt1 WHERE ((((v0.c2) IS TRUE) IN (((v0.c2)GLOB(v0.c0)), ((v0.c1) IS TRUE))));
SELECT ALL * FROM v0, vt1 WHERE ((((v0.c2) IS TRUE) IN (((v0.c2)GLOB(v0.c0)), ((v0.c1) IS TRUE)))) LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE (((4.48962842E8) BETWEEN (0.7556327036697856) AND (CAST(vt1.c1 AS NUMERIC)))) ORDER BY (((((9.31266565E8) IS FALSE), CASE WHEN vt1.c1 THEN vt1.c0 END))>(((- (vt1.c0)), ((vt1.c0) NOTNULL)))) DESC;
SELECT ALL * FROM vt1 WHERE (((4.48962842E8) BETWEEN (0.7556327036697856) AND (CAST(vt1.c1 AS NUMERIC)))) ORDER BY (((((9.31266565E8) IS FALSE), CASE WHEN vt1.c1 THEN vt1.c0 END))>(((- (vt1.c0)), ((vt1.c0) NOTNULL)))) DESC;
SELECT ALL * FROM vt1 WHERE (((4.48962842E8) BETWEEN (0.7556327036697856) AND (CAST(vt1.c1 AS NUMERIC)))) ORDER BY (((((9.31266565E8) IS FALSE), CASE WHEN vt1.c1 THEN vt1.c0 END))>(((- (vt1.c0)), ((vt1.c0) NOTNULL)))) DESC;
SELECT ALL * FROM vt1 WHERE (((4.48962842E8) BETWEEN (0.7556327036697856) AND (CAST(vt1.c1 AS NUMERIC)))) ORDER BY (((((9.31266565E8) IS FALSE), CASE WHEN vt1.c1 THEN vt1.c0 END))>(((- (vt1.c0)), ((vt1.c0) NOTNULL)))) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE ((vt1.c1 IN (vt1.c0)) COLLATE BINARY);
SELECT COUNT(*) FROM vt1 WHERE ((((vt1.c1 IN (vt1.c0)) COLLATE BINARY)AND((((vt1.c0 IN ()))<>(((0Xffffffffbe0b3044) NOT NULL)))))) ORDER BY CASE (((vt1.c0))==(('%swq')))  WHEN (((vt1.c0))<((vt1.c1))) THEN ((vt1.c1)<(vt1.c1)) ELSE ((((vt1.c1)AND(vt1.c1)))OR(vt1.c0)) END  NULLS LAST;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN (((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c0))) THEN ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1)) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END);
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN (((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c0))) THEN ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1)) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END) LIMIT 0 INTERSECT SELECT * FROM vt1 NATURAL JOIN v0 WHERE ((((((NULL, v0.c2))>((vt1.c1, vt1.c1))))<(((vt1.c1) NOT NULL)))) LIMIT 0;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN (((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c0))) THEN ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1)) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END);
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN (((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c0))) THEN ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1)) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END) LIMIT 0 INTERSECT SELECT * FROM vt1 NATURAL JOIN v0 WHERE ((((((NULL, v0.c2))>((vt1.c1, vt1.c1))))<(((vt1.c1) NOT NULL)))) LIMIT 0;
SELECT * FROM vt1, v0 WHERE (CASE v0.c0  WHEN v0.c2 THEN v0.c0 END COLLATE BINARY);
SELECT ALL * FROM vt1, v0 WHERE (((CASE v0.c0  WHEN v0.c2 THEN v0.c0 END COLLATE BINARY)AND((- (((vt1.c1)<=(v0.c1))))))) ORDER BY (((((vt1.c0, 1.230436426E9))==((vt1.c1, v0.c1))))-((- (vt1.c1))))  NULLS LAST, ((((((((((v0.c2)OR(v0.c1)))AND(vt1.c0)))OR(vt1.c0)))OR(v0.c2)))OR(NULL));
SELECT * FROM vt1, v0 WHERE (CASE v0.c0  WHEN v0.c2 THEN v0.c0 END COLLATE BINARY);
SELECT ALL * FROM vt1, v0 WHERE (((CASE v0.c0  WHEN v0.c2 THEN v0.c0 END COLLATE BINARY)AND((- (((vt1.c1)<=(v0.c1))))))) ORDER BY (((((vt1.c0, 1.230436426E9))==((vt1.c1, v0.c1))))-((- (vt1.c1))))  NULLS LAST, ((((((((((v0.c2)OR(v0.c1)))AND(vt1.c0)))OR(vt1.c0)))OR(v0.c2)))OR(NULL));
SELECT * FROM vt1, v0 WHERE (LTRIM(0.48823205407350156, v0.c2) COLLATE NOCASE);
SELECT * FROM vt1, v0 WHERE (((LTRIM(0.48823205407350156, v0.c2) COLLATE NOCASE)AND(NULL))) ORDER BY v0.c2  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CAST(((v0.c1) IS TRUE) AS NUMERIC)) ORDER BY v0.c2  NULLS LAST LIMIT 0x1;
SELECT * FROM vt1, v0 WHERE (LTRIM(0.48823205407350156, v0.c2) COLLATE NOCASE);
SELECT * FROM vt1, v0 WHERE (((LTRIM(0.48823205407350156, v0.c2) COLLATE NOCASE)AND(NULL))) ORDER BY v0.c2  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CAST(((v0.c1) IS TRUE) AS NUMERIC)) ORDER BY v0.c2  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt1 WHERE (LOWER(DISTINCT CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END));
SELECT DISTINCT * FROM vt1 WHERE (((LOWER(DISTINCT CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END))AND((((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(x'')) IN ())))) ORDER BY (((~ (vt1.c0))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c1)||(vt1.c1)))), CAST(((vt1.c1)AND(vt1.c1)) AS NUMERIC) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 IN ()))OR(((vt1.c0) NOTNULL))))OR(','))) ORDER BY (((~ (vt1.c0))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c1)||(vt1.c1)))), CAST(((vt1.c1)AND(vt1.c1)) AS NUMERIC);
SELECT ALL * FROM vt1 WHERE (LOWER(DISTINCT CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END));
SELECT DISTINCT * FROM vt1 WHERE (((LOWER(DISTINCT CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END))AND((((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(x'')) IN ())))) ORDER BY (((~ (vt1.c0))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c1)||(vt1.c1)))), CAST(((vt1.c1)AND(vt1.c1)) AS NUMERIC) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0 IN ()))OR(((vt1.c0) NOTNULL))))OR(','))) ORDER BY (((~ (vt1.c0))) NOT BETWEEN ((vt1.c0 IN (vt1.c0))) AND (((vt1.c1)||(vt1.c1)))), CAST(((vt1.c1)AND(vt1.c1)) AS NUMERIC);
SELECT ALL * FROM v0, vt1 WHERE ((((vt1.c1 IN ())) NOT BETWEEN (((((v0.c1)OR(v0.c2)))OR(vt1.c1))) AND (((vt1.c1)/(vt1.c0))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) IS TRUE)  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((vt1.c1 IN ())) NOT BETWEEN (((((v0.c1)OR(v0.c2)))OR(vt1.c1))) AND (((vt1.c1)/(vt1.c0))))) ORDER BY (((v0.c1)) BETWEEN ((('1269145269' IN (vt1.c1)))) AND ((((vt1.c1)>=(v0.c2))))), COALESCE(1.468832677E9, '', CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END) LIMIT 1;
SELECT ALL * FROM v0, vt1 WHERE ((((vt1.c1 IN ())) NOT BETWEEN (((((v0.c1)OR(v0.c2)))OR(vt1.c1))) AND (((vt1.c1)/(vt1.c0))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) IS TRUE)  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((vt1.c1 IN ())) NOT BETWEEN (((((v0.c1)OR(v0.c2)))OR(vt1.c1))) AND (((vt1.c1)/(vt1.c0))))) ORDER BY (((v0.c1)) BETWEEN ((('1269145269' IN (vt1.c1)))) AND ((((vt1.c1)>=(v0.c2))))), COALESCE(1.468832677E9, '', CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (vt1.c1);
SELECT * FROM vt1 WHERE (((vt1.c1)AND(((((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE x'' END)AND(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR(((vt1.c0)AND('')))))OR(load_extension('')))))) INTERSECT SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE BINARY)==(NULL)));
SELECT ALL * FROM vt1 WHERE (vt1.c1);
SELECT * FROM vt1 WHERE (((vt1.c1)AND(((((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE x'' END)AND(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR(((vt1.c0)AND('')))))OR(load_extension('')))))) INTERSECT SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE BINARY)==(NULL)));
SELECT ALL * FROM v0 LEFT OUTER JOIN vt1 ON v0.c2 WHERE ((((v0.c2)) NOT BETWEEN ((CAST(vt1.c1 AS BLOB))) AND ((((((((((v0.c2)OR(v0.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(v0.c2)))))) ORDER BY ((CAST(vt1.c0 AS NUMERIC))AND(((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c1)))) ASC, (((((- (vt1.c1)))AND(((((((vt1.c1)AND(v0.c1)))AND(vt1.c0)))AND(v0.c1)))))OR(((vt1.c0) BETWEEN (x'ec') AND (v0.c1)))) DESC  NULLS FIRST;
SELECT * FROM v0 INNER JOIN vt1 ON v0.c2 WHERE ((((v0.c2)) NOT BETWEEN ((CAST(vt1.c1 AS BLOB))) AND ((((((((((v0.c2)OR(v0.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(v0.c2)))))) ORDER BY (v0.c1 COLLATE RTRIM IN ()) ASC LIMIT 0x5;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt1 ON v0.c2 WHERE ((((v0.c2)) NOT BETWEEN ((CAST(vt1.c1 AS BLOB))) AND ((((((((((v0.c2)OR(v0.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(v0.c2)))))) ORDER BY ((CAST(vt1.c0 AS NUMERIC))AND(((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c1)))) ASC, (((((- (vt1.c1)))AND(((((((vt1.c1)AND(v0.c1)))AND(vt1.c0)))AND(v0.c1)))))OR(((vt1.c0) BETWEEN (x'ec') AND (v0.c1)))) DESC  NULLS FIRST;
SELECT * FROM v0 INNER JOIN vt1 ON v0.c2 WHERE ((((v0.c2)) NOT BETWEEN ((CAST(vt1.c1 AS BLOB))) AND ((((((((((v0.c2)OR(v0.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(v0.c2)))))) ORDER BY (v0.c1 COLLATE RTRIM IN ()) ASC LIMIT 0x5;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((((vt1.c1 IN ())) NOTNULL));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((((((vt1.c1 IN ())) NOTNULL))AND((UNLIKELY(vt1.c0) IN ())))) LIMIT 2;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (CASE WHEN CAST(v0.c1 AS REAL) THEN (((v0.c1, v0.c1))<>((v0.c0, v0.c0))) WHEN (v0.c2 IN (v0.c2)) THEN CAST(v0.c2 AS BLOB) WHEN v0.c2 COLLATE BINARY THEN v0.c1 WHEN ((v0.c1)>>(v0.c2)) THEN ((v0.c0) IS TRUE) WHEN v0.c2 COLLATE NOCASE THEN (((v0.c1))=((v0.c0))) ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)) END) ORDER BY ((((((v0.c2) IS TRUE))AND(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN 1234820368 THEN v0.c0 ELSE NULL END)))AND((((v0.c0))<((v0.c1)))))  NULLS FIRST;
SELECT MAX(v0.c1) FROM v0 WHERE (((CASE WHEN CAST(v0.c1 AS REAL) THEN (((v0.c1, v0.c1))>((v0.c0, v0.c0))) WHEN (v0.c2 IN (v0.c2)) THEN CAST(v0.c2 AS BLOB) WHEN v0.c2 COLLATE BINARY THEN v0.c1 WHEN ((v0.c1)>>(v0.c2)) THEN ((v0.c0) IS TRUE) WHEN v0.c2 COLLATE NOCASE THEN (((v0.c1))=((v0.c0))) ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)) END)AND(((v0.c2 COLLATE NOCASE) NOT NULL)))) ORDER BY ((((((v0.c2) IS TRUE))AND(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN 1234820368 THEN v0.c0 ELSE NULL END)))AND((((v0.c0))<((v0.c1)))))  NULLS FIRST;
SELECT ALL MAX(v0.c1) FROM v0 WHERE ('-566204015') ORDER BY (((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)) IN ((~ (v0.c1))))  NULLS FIRST;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ('-566204015') ORDER BY CAST(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)) AS BLOB) ASC, ((CAST(v0.c2 AS REAL))>>((NOT (v0.c0))));
SELECT * FROM v0, vt1 WHERE (((((((((vt1.c1)|(x'')))AND((NOT (x'99b1')))))OR(v0.c2 COLLATE BINARY)))AND((((v0.c2, vt1.c1)) NOT BETWEEN ((vt1.c0, v0.c2)) AND ((vt1.c1, v0.c0)))))) ORDER BY (NOT (vt1.c1 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (((((((((vt1.c1)|(x'')))AND((NOT (x'99b1')))))OR(v0.c2 COLLATE BINARY)))AND((((v0.c2, vt1.c1)) NOT BETWEEN ((vt1.c0, v0.c2)) AND ((vt1.c1, v0.c0)))))) ORDER BY (NOT (vt1.c1 COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 2 INTERSECT SELECT * FROM v0, vt1 WHERE (((-85203554) BETWEEN (((vt1.c1) NOT BETWEEN (v0.c1) AND (v0.c0))) AND (((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))))) ORDER BY (NOT (vt1.c1 COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 0x2;
SELECT * FROM v0, vt1 WHERE (((((((((vt1.c1)|(x'')))AND((NOT (x'99b1')))))OR(v0.c2 COLLATE BINARY)))AND((((v0.c2, vt1.c1)) NOT BETWEEN ((vt1.c0, v0.c2)) AND ((vt1.c1, v0.c0)))))) ORDER BY (NOT (vt1.c1 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (((((((((vt1.c1)|(x'')))AND((NOT (x'99b1')))))OR(v0.c2 COLLATE BINARY)))AND((((v0.c2, vt1.c1)) NOT BETWEEN ((vt1.c0, v0.c2)) AND ((vt1.c1, v0.c0)))))) ORDER BY (NOT (vt1.c1 COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 2 INTERSECT SELECT * FROM v0, vt1 WHERE (((-85203554) BETWEEN (((vt1.c1) NOT BETWEEN (v0.c1) AND (v0.c0))) AND (((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))))) ORDER BY (NOT (vt1.c1 COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 0x2;
SELECT COUNT(*) FROM v0 WHERE ((- (((v0.c1) ISNULL))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((- (((v0.c1) ISNULL)))) ORDER BY v0.c1 DESC LIMIT 1;
SELECT MAX(v0.c2) FROM v0, vt1 WHERE (0.08308963790342139);
SELECT MAX(v0.c2) FROM v0, vt1 WHERE (((0.08308963790342139)AND(((v0.c2) IS TRUE) COLLATE NOCASE))) INTERSECT SELECT ALL MAX(v0.c2) FROM v0, vt1 WHERE (v0.c2);
SELECT * FROM v0 NOT INDEXED WHERE (((((((v0.c0)OR(v0.c0)))AND('0.8745648014066603')))*((v0.c0 IN (v0.c2, v0.c1, v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (((((((((v0.c0)OR(v0.c0)))AND('0.8745648014066603')))*((v0.c0 IN (v0.c2, v0.c1, v0.c0)))))AND((('629--2327533396086626243T-101019445391246865 -7616166866199507560T-5912260311477032311 5827942905409725241:74 -2774890380889497095:}') IS FALSE)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c1)%('')))==(((((v0.c1)OR(v0.c2)))OR(v0.c0))))) LIMIT 0;
SELECT * FROM v0 NOT INDEXED WHERE (((((((v0.c0)OR(v0.c0)))AND('0.8745648014066603')))*((v0.c0 IN (v0.c2, v0.c1, v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (((((((((v0.c0)OR(v0.c0)))AND('0.8745648014066603')))*((v0.c0 IN (v0.c2, v0.c1, v0.c0)))))AND((('629--2327533396086626243T-101019445391246865 -7616166866199507560T-5912260311477032311 5827942905409725241:74 -2774890380889497095:}') IS FALSE)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c1)%('')))==(((((v0.c1)OR(v0.c2)))OR(v0.c0))))) LIMIT 0;
SELECT MAX(v0.c0) FROM v0 WHERE (CASE WHEN CASE v0.c2  WHEN 'Ow0/G' THEN '0.9633115728778252' WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 END THEN CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END WHEN '-389124156' THEN ((v0.c1)<=(x'')) WHEN 0.17319563761750334 COLLATE RTRIM THEN v0.c0 WHEN CAST(v0.c2 AS REAL) THEN (((v0.c0)) BETWEEN ((x'')) AND ((v0.c1))) END) ORDER BY json(((v0.c0)GLOB(v0.c1))), CAST((+ (x'6c')) AS TEXT) DESC;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((CASE WHEN CASE v0.c2  WHEN 'Ow0/G' THEN '0.9633115728778252' WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 END THEN CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END WHEN '-389124156' THEN ((v0.c1)<(x'')) WHEN 0.17319563761750334 COLLATE RTRIM THEN v0.c0 WHEN CAST(v0.c2 AS REAL) THEN (((v0.c0)) BETWEEN ((x'')) AND ((v0.c1))) END)AND('*QOmic/*'))) ORDER BY (((v0.c1, v0.c2, v0.c1, v0.c1, v0.c0)) NOT BETWEEN ((SQLITE_COMPILEOPTION_USED(x'fced'), ((((v0.c2)OR(v0.c2)))AND(v0.c1)), (+ (v0.c1)), LIKELIHOOD(v0.c0, v0.c1), v0.c0 COLLATE RTRIM)) AND ((v0.c0, v0.c1, ((v0.c2)>(v0.c2)), x'', ((v0.c2) NOTNULL)))) DESC, (- (v0.c0));
SELECT * FROM v0 WHERE (LOWER((NOT (v0.c2))));
SELECT DISTINCT * FROM v0 WHERE (LOWER((NOT (v0.c2)))) ORDER BY ((CASE WHEN v0.c2 THEN '-264351497' ELSE v0.c1 END) BETWEEN ((((v0.c2, v0.c1, v0.c2, v0.c1))>((v0.c2, v0.c0, NULL, v0.c2)))) AND (((v0.c2) BETWEEN (v0.c1) AND (v0.c0)))), v0.c0 ASC INTERSECT SELECT DISTINCT * FROM v0 WHERE (json(((v0.c1) ISNULL))) ORDER BY ((CASE WHEN v0.c2 THEN '-264351497' ELSE v0.c1 END) BETWEEN ((((v0.c2, v0.c1, v0.c2, v0.c1))>((v0.c2, v0.c0, NULL, v0.c2)))) AND (((v0.c2) BETWEEN (v0.c1) AND (v0.c0)))), v0.c0 ASC;
SELECT * FROM v0 WHERE (LOWER((NOT (v0.c2))));
SELECT DISTINCT * FROM v0 WHERE (LOWER((NOT (v0.c2)))) ORDER BY ((CASE WHEN v0.c2 THEN '-264351497' ELSE v0.c1 END) BETWEEN ((((v0.c2, v0.c1, v0.c2, v0.c1))>((v0.c2, v0.c0, NULL, v0.c2)))) AND (((v0.c2) BETWEEN (v0.c1) AND (v0.c0)))), v0.c0 ASC INTERSECT SELECT DISTINCT * FROM v0 WHERE (json(((v0.c1) ISNULL))) ORDER BY ((CASE WHEN v0.c2 THEN '-264351497' ELSE v0.c1 END) BETWEEN ((((v0.c2, v0.c1, v0.c2, v0.c1))>((v0.c2, v0.c0, NULL, v0.c2)))) AND (((v0.c2) BETWEEN (v0.c1) AND (v0.c0)))), v0.c0 ASC;
SELECT ALL * FROM v0, vt1 WHERE ((((((((v0.c0)OR(vt1.c1)))AND(v0.c0)), (((v0.c0, vt1.c0))>=((vt1.c1, v0.c2))), CASE WHEN vt1.c1 THEN v0.c1 END))<((((vt1.c0) NOT NULL), 0.36335081980912787, ((vt1.c1)|(vt1.c1))))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((((v0.c0)OR(vt1.c1)))AND(v0.c0)), (((v0.c0, vt1.c0))=((vt1.c1, v0.c2))), CASE WHEN vt1.c1 THEN v0.c1 END))<((((vt1.c0) NOT NULL), 0.36335081980912787, ((vt1.c1)|(vt1.c1))))))AND((((vt1.c1 COLLATE NOCASE, (('')IS NOT(v0.c0)), (v0.c0 IN (v0.c1, v0.c2)), CASE WHEN x'' THEN v0.c2 WHEN vt1.c0 THEN v0.c2 END))>=((CASE v0.c2  WHEN '-341421276' THEN vt1.c1 END, ((v0.c0)==(vt1.c1)), ((v0.c1) NOT NULL), CASE vt1.c0  WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c1 THEN v0.c2 ELSE v0.c2 END)))))) ORDER BY DATE(CASE WHEN 0xd5fa138 THEN v0.c0 END, CAST(NULL AS TEXT), (((v0.c0, v0.c2))!=((v0.c0, v0.c1))), ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1))) LIMIT 0x1;
SELECT ALL * FROM v0, vt1 WHERE ((((((((v0.c0)OR(vt1.c1)))AND(v0.c0)), (((v0.c0, vt1.c0))>=((vt1.c1, v0.c2))), CASE WHEN vt1.c1 THEN v0.c1 END))<((((vt1.c0) NOT NULL), 0.36335081980912787, ((vt1.c1)|(vt1.c1))))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((((v0.c0)OR(vt1.c1)))AND(v0.c0)), (((v0.c0, vt1.c0))=((vt1.c1, v0.c2))), CASE WHEN vt1.c1 THEN v0.c1 END))<((((vt1.c0) NOT NULL), 0.36335081980912787, ((vt1.c1)|(vt1.c1))))))AND((((vt1.c1 COLLATE NOCASE, (('')IS NOT(v0.c0)), (v0.c0 IN (v0.c1, v0.c2)), CASE WHEN x'' THEN v0.c2 WHEN vt1.c0 THEN v0.c2 END))>=((CASE v0.c2  WHEN '-341421276' THEN vt1.c1 END, ((v0.c0)==(vt1.c1)), ((v0.c1) NOT NULL), CASE vt1.c0  WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c1 THEN v0.c2 ELSE v0.c2 END)))))) ORDER BY DATE(CASE WHEN 0xd5fa138 THEN v0.c0 END, CAST(NULL AS TEXT), (((v0.c0, v0.c2))!=((v0.c0, v0.c1))), ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1))) LIMIT 0x1;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((- (vt1.c0)) COLLATE BINARY);
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((- (vt1.c0)) COLLATE BINARY)AND(CASE ((vt1.c0)*(vt1.c1))  WHEN (+ (vt1.c1)) THEN ((vt1.c0)=(vt1.c0)) END))) INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (0X5f130329 COLLATE NOCASE);
SELECT ALL MAX(v0.c0) FROM v0 WHERE (v0.c1) ORDER BY ((((((((((((((v0.c0)&(v0.c0)))OR(((((((((v0.c2)AND(0.08612441454229514)))OR(v0.c2)))OR(v0.c2)))OR(v0.c1)))))AND((+ (v0.c2)))))AND(CAST(v0.c1 AS NUMERIC))))OR(v0.c0)))AND((v0.c0 IN (v0.c0)))))AND(LIKELY('-222782611')))  NULLS LAST, 0Xffffffffd2d3541d  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((v0.c1)AND(((((v0.c2) NOT BETWEEN (x'') AND (x'')))!=(((v0.c1) ISNULL)))))) ORDER BY (((((((v0.c0 IN (v0.c0)))AND(((v0.c2) IS TRUE))))AND(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)))))AND((NOT (v0.c2))))  NULLS LAST, (((((v0.c2, v0.c2, v0.c2)) BETWEEN ((v0.c2, v0.c0, v0.c0)) AND ((v0.c1, '0.22845794843892375', v0.c2))))AND((NOT (NULL)))) LIMIT 0 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (v0.c0) ORDER BY (((((((v0.c0 IN (v0.c0)))AND(((v0.c2) IS TRUE))))AND(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)))))AND((NOT (v0.c2))))  NULLS LAST, (((((v0.c2, v0.c2, v0.c2)) BETWEEN ((v0.c2, v0.c0, v0.c0)) AND ((v0.c1, '0.22845794843892375', v0.c2))))AND((NOT (NULL)))) LIMIT 0;
SELECT COUNT(*) FROM v0, vt1 WHERE (CAST((((vt1.c1))<((NULL))) AS NUMERIC)) ORDER BY ((CAST(vt1.c0 AS BLOB))<=(((v0.c0)LIKE(v0.c0))))  NULLS LAST, MAX(x'' COLLATE BINARY, CASE WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (CAST((((vt1.c1))<((NULL))) AS NUMERIC)) ORDER BY ((CAST(vt1.c0 AS BLOB))<=(((v0.c0)LIKE(v0.c0))))  NULLS LAST, MAX(x'' COLLATE BINARY, CASE WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END) DESC  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM v0, vt1 WHERE (json_object(0.16726446839771825, (((v0.c0, NULL))<>((NULL, x''))))) ORDER BY ((CAST(vt1.c0 AS BLOB))<=(((v0.c0)LIKE(v0.c0))))  NULLS LAST, MAX(x'' COLLATE BINARY, CASE WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 WHEN x'' THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL MAX(v0.c1) FROM v0, vt1 WHERE (NULL) ORDER BY v0.c0, 'Q%aA' ASC, CASE WHEN v0.c1 COLLATE RTRIM THEN x'' ELSE v0.c0 END  NULLS FIRST;
SELECT DISTINCT MAX(v0.c1) FROM v0, vt1 WHERE (NULL) ORDER BY ((CAST(v0.c1 AS NUMERIC))=(((vt1.c1) NOT BETWEEN (v0.c1) AND (v0.c1))))  NULLS FIRST, ((((0.5454975052011353)<>(v0.c2)))>(((vt1.c1) NOT NULL))) DESC, ((((((((((v0.c1)OR(vt1.c0)))AND(v0.c1)))OR(v0.c2)))AND(v0.c2))) NOTNULL)  NULLS LAST LIMIT 0X0;
SELECT * FROM v0, vt1 WHERE (((((NOT (v0.c2))))<=((((v0.c2) ISNULL))))) ORDER BY ((((vt1.c1)<<(vt1.c0)))||(((((v0.c2)AND(v0.c0)))OR(v0.c1)))) DESC, CASE WHEN ((vt1.c0)>=(v0.c2)) THEN v0.c0 COLLATE BINARY WHEN CASE vt1.c1  WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 END THEN CAST(vt1.c0 AS NUMERIC) WHEN (- (v0.c0)) THEN v0.c1 COLLATE NOCASE WHEN (- (vt1.c1)) THEN (NOT (v0.c1)) ELSE ((v0.c0)%(v0.c2)) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((NOT (v0.c2))))<=((((v0.c2) ISNULL))))) ORDER BY ((((vt1.c1)<<(vt1.c0)))||(((((v0.c2)AND(v0.c0)))OR(v0.c1)))) DESC, CASE WHEN ((vt1.c0)>=(v0.c2)) THEN v0.c0 COLLATE BINARY WHEN CASE vt1.c1  WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 END THEN CAST(vt1.c0 AS NUMERIC) WHEN (- (v0.c0)) THEN v0.c1 COLLATE NOCASE WHEN (- (vt1.c1)) THEN (NOT (v0.c1)) ELSE ((v0.c0)%(v0.c2)) END DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((((NOT (v0.c2))))<=((((v0.c2) ISNULL))))) ORDER BY ((((vt1.c1)<<(vt1.c0)))||(((((v0.c2)AND(v0.c0)))OR(v0.c1)))) DESC, CASE WHEN ((vt1.c0)>=(v0.c2)) THEN v0.c0 COLLATE BINARY WHEN CASE vt1.c1  WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 END THEN CAST(vt1.c0 AS NUMERIC) WHEN (- (v0.c0)) THEN v0.c1 COLLATE NOCASE WHEN (- (vt1.c1)) THEN (NOT (v0.c1)) ELSE ((v0.c0)%(v0.c2)) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((NOT (v0.c2))))<=((((v0.c2) ISNULL))))) ORDER BY ((((vt1.c1)<<(vt1.c0)))||(((((v0.c2)AND(v0.c0)))OR(v0.c1)))) DESC, CASE WHEN ((vt1.c0)>=(v0.c2)) THEN v0.c0 COLLATE BINARY WHEN CASE vt1.c1  WHEN v0.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 END THEN CAST(vt1.c0 AS NUMERIC) WHEN (- (v0.c0)) THEN v0.c1 COLLATE NOCASE WHEN (- (vt1.c1)) THEN (NOT (v0.c1)) ELSE ((v0.c0)%(v0.c2)) END DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((CAST(vt1.c0 AS BLOB))LIKE((v0.c0 IN (vt1.c1, vt1.c1)))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((CAST(vt1.c0 AS BLOB))LIKE((v0.c0 IN (vt1.c1)))))AND(vt1.c0))) ORDER BY ((((vt1.c1)GLOB(vt1.c0))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))) AND (TYPEOF(DISTINCT v0.c0))) ASC, CASE WHEN (((vt1.c0))!=((v0.c1))) THEN ((v0.c2)IS NOT(v0.c2)) ELSE v0.c2 END INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (TRIM(TRIM(v0.c0))) ORDER BY ((((vt1.c1)GLOB(vt1.c0))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))) AND (TYPEOF(DISTINCT v0.c0))) ASC, CASE WHEN (((vt1.c0))<>((v0.c1))) THEN ((v0.c2)IS NOT(v0.c2)) ELSE v0.c2 END;
SELECT * FROM v0, vt1 WHERE (((CAST(vt1.c0 AS BLOB))LIKE((v0.c0 IN (vt1.c1, vt1.c1)))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((CAST(vt1.c0 AS BLOB))LIKE((v0.c0 IN (vt1.c1)))))AND(vt1.c0))) ORDER BY ((((vt1.c1)GLOB(vt1.c0))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))) AND (TYPEOF(DISTINCT v0.c0))) ASC, CASE WHEN (((vt1.c0))!=((v0.c1))) THEN ((v0.c2)IS NOT(v0.c2)) ELSE v0.c2 END INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (TRIM(TRIM(v0.c0))) ORDER BY ((((vt1.c1)GLOB(vt1.c0))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))) AND (TYPEOF(DISTINCT v0.c0))) ASC, CASE WHEN (((vt1.c0))<>((v0.c1))) THEN ((v0.c2)IS NOT(v0.c2)) ELSE v0.c2 END;
SELECT * FROM v0 WHERE ((((v0.c2) NOT NULL) IN (v0.c0 COLLATE RTRIM))) ORDER BY v0.c2 DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2) NOT NULL) IN (v0.c0 COLLATE RTRIM))) ORDER BY (((v0.c1 IN (v0.c1))) BETWEEN (((((v0.c2)AND(v0.c0)))OR(v0.c2))) AND (CASE v0.c2  WHEN v0.c0 THEN v0.c1 END)) DESC, CASE WHEN v0.c2 COLLATE RTRIM THEN ((v0.c1) NOTNULL) WHEN ((v0.c2) NOT NULL) THEN ((v0.c2)>(v0.c1)) WHEN ((((((v0.c1)AND(v0.c2)))OR(v0.c0)))OR(v0.c0)) THEN CAST(x'c701aaf2' AS NUMERIC) END ASC  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE ((((v0.c2) NOT NULL) IN (v0.c0 COLLATE RTRIM))) ORDER BY v0.c2 DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2) NOT NULL) IN (v0.c0 COLLATE RTRIM))) ORDER BY (((v0.c1 IN (v0.c1))) BETWEEN (((((v0.c2)AND(v0.c0)))OR(v0.c2))) AND (CASE v0.c2  WHEN v0.c0 THEN v0.c1 END)) DESC, CASE WHEN v0.c2 COLLATE RTRIM THEN ((v0.c1) NOTNULL) WHEN ((v0.c2) NOT NULL) THEN ((v0.c2)>(v0.c1)) WHEN ((((((v0.c1)AND(v0.c2)))OR(v0.c0)))OR(v0.c0)) THEN CAST(x'c701aaf2' AS NUMERIC) END ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 LEFT OUTER JOIN v0 ON CAST(((v0.c0)OR(v0.c1)) AS TEXT) WHERE ((v0.c0 COLLATE BINARY IN ((('-652094336')/(v0.c0))))) ORDER BY (((vt1.c1 COLLATE NOCASE, ((v0.c1)==(v0.c0)), vt1.c1, ((vt1.c0) IS TRUE)))<=((((((v0.c0)OR(vt1.c1)))AND(vt1.c1)), ((vt1.c0)>(v0.c0)), ((((vt1.c1)OR(0.8509052966421758)))AND(vt1.c1)), ((vt1.c0) NOT BETWEEN (0.6791491313678877) AND ('935056110'))))) DESC  NULLS LAST, ((json_extract(vt1.c1, vt1.c1, '-130381765', v0.c0, vt1.c1)) BETWEEN (((((vt1.c1)OR(v0.c2)))OR(v0.c0))) AND (rtreenode(x'', v0.c1))) ASC  NULLS LAST, (((~ (v0.c0)))%(SQLITE_VERSION()))  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON CAST(((v0.c0)OR(v0.c1)) AS TEXT) WHERE ((v0.c0 COLLATE BINARY IN ((('-652094336')/(v0.c0))))) ORDER BY (((vt1.c1 COLLATE NOCASE, ((v0.c1)=(v0.c0)), vt1.c1, ((vt1.c0) IS TRUE)))<=((((((v0.c0)OR(vt1.c1)))AND(vt1.c1)), ((vt1.c0)>(v0.c0)), ((((vt1.c1)OR(0.8509052966421758)))AND(vt1.c1)), ((vt1.c0) NOT BETWEEN (0.6791491313678877) AND ('935056110'))))) DESC  NULLS LAST, ((json_extract(vt1.c1, vt1.c1, '-130381765', v0.c0, vt1.c1)) BETWEEN (((((vt1.c1)OR(v0.c2)))OR(v0.c0))) AND (rtreenode(x'', v0.c1))) ASC  NULLS LAST, (((~ (v0.c0)))%(SQLITE_VERSION()))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1 LEFT OUTER JOIN v0 ON CAST(((v0.c0)OR(v0.c1)) AS TEXT) WHERE ((v0.c0 COLLATE BINARY IN ((('-652094336')/(v0.c0))))) ORDER BY (((vt1.c1 COLLATE NOCASE, ((v0.c1)==(v0.c0)), vt1.c1, ((vt1.c0) IS TRUE)))<=((((((v0.c0)OR(vt1.c1)))AND(vt1.c1)), ((vt1.c0)>(v0.c0)), ((((vt1.c1)OR(0.8509052966421758)))AND(vt1.c1)), ((vt1.c0) NOT BETWEEN (0.6791491313678877) AND ('935056110'))))) DESC  NULLS LAST, ((json_extract(vt1.c1, vt1.c1, '-130381765', v0.c0, vt1.c1)) BETWEEN (((((vt1.c1)OR(v0.c2)))OR(v0.c0))) AND (rtreenode(x'', v0.c1))) ASC  NULLS LAST, (((~ (v0.c0)))%(SQLITE_VERSION()))  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON CAST(((v0.c0)OR(v0.c1)) AS TEXT) WHERE ((v0.c0 COLLATE BINARY IN ((('-652094336')/(v0.c0))))) ORDER BY (((vt1.c1 COLLATE NOCASE, ((v0.c1)=(v0.c0)), vt1.c1, ((vt1.c0) IS TRUE)))<=((((((v0.c0)OR(vt1.c1)))AND(vt1.c1)), ((vt1.c0)>(v0.c0)), ((((vt1.c1)OR(0.8509052966421758)))AND(vt1.c1)), ((vt1.c0) NOT BETWEEN (0.6791491313678877) AND ('935056110'))))) DESC  NULLS LAST, ((json_extract(vt1.c1, vt1.c1, '-130381765', v0.c0, vt1.c1)) BETWEEN (((((vt1.c1)OR(v0.c2)))OR(v0.c0))) AND (rtreenode(x'', v0.c1))) ASC  NULLS LAST, (((~ (v0.c0)))%(SQLITE_VERSION()))  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE (vt1.c0 COLLATE RTRIM) ORDER BY ((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)LIKE((NOT (vt1.c1)))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM)AND(((vt1.c1) ISNULL)))) ORDER BY vt1.c0 ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)>>(vt1.c1)))AND(CAST(vt1.c1 AS INTEGER))))OR(((((vt1.c1)OR(vt1.c0)))OR(vt1.c1))))) ORDER BY vt1.c0 ASC;
SELECT * FROM vt1 WHERE (vt1.c0 COLLATE RTRIM) ORDER BY ((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)LIKE((NOT (vt1.c1)))) DESC;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM)AND(((vt1.c1) ISNULL)))) ORDER BY vt1.c0 ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c0)>>(vt1.c1)))AND(CAST(vt1.c1 AS INTEGER))))OR(((((vt1.c1)OR(vt1.c0)))OR(vt1.c1))))) ORDER BY vt1.c0 ASC;
SELECT * FROM vt1, v0 WHERE (2.97690481E8) ORDER BY (((v0.c0, vt1.c0)) BETWEEN ((v0.c2 COLLATE BINARY, (~ (v0.c2)))) AND ((((vt1.c0) IS FALSE), (v0.c2 IN (v0.c1, v0.c1))))) DESC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (2.97690481E8) ORDER BY ((v0.c0 IN (v0.c0)) IN ())  NULLS FIRST, json_array(v0.c2 COLLATE RTRIM, UNICODE(v0.c1), v0.c0) DESC;
SELECT * FROM vt1, v0 WHERE (2.97690481E8) ORDER BY (((v0.c0, vt1.c0)) BETWEEN ((v0.c2 COLLATE BINARY, (~ (v0.c2)))) AND ((((vt1.c0) IS FALSE), (v0.c2 IN (v0.c1, v0.c1))))) DESC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (2.97690481E8) ORDER BY ((v0.c0 IN (v0.c0)) IN ())  NULLS FIRST, json_array(v0.c2 COLLATE RTRIM, UNICODE(v0.c1), v0.c0) DESC;
SELECT COUNT(*) FROM vt1 WHERE (IFNULL(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, (((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c1, NULL)))));
SELECT COUNT(*) FROM vt1 WHERE (IFNULL(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, (((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c1, NULL))))) ORDER BY ((((vt1.c1)IS NOT(vt1.c1))) BETWEEN (((((vt1.c0)OR(vt1.c1)))OR(vt1.c1))) AND (((vt1.c1)OR(vt1.c1)))) DESC, ('>),)q2o]' IN ()) ASC, ((((vt1.c1)/(vt1.c0)))<(((vt1.c0)OR(vt1.c0)))) INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (CAST((((vt1.c1, vt1.c1)) BETWEEN ((vt1.c1, x'0c')) AND ((vt1.c0, '^2'))) AS TEXT)) ORDER BY ((((vt1.c1)IS NOT(vt1.c1))) BETWEEN (((((vt1.c0)OR(vt1.c1)))OR(vt1.c1))) AND (((vt1.c1)OR(vt1.c1)))) DESC, ('>),)q2o]' IN ()) ASC, ((((vt1.c1)/(vt1.c0)))<(((vt1.c0)OR(vt1.c0))));
SELECT ALL MIN(v0.c0) FROM vt1, v0 WHERE ((('\{8PQ>&E0')-(v0.c2)));
SELECT ALL MIN(v0.c0) FROM vt1, v0 WHERE ((((('\{8PQ>&E0')-(v0.c2)))AND(((0xffffffffc0651fe5) NOT BETWEEN (CASE WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END) AND (LTRIM(vt1.c1, v0.c0)))))) ORDER BY ((v0.c2) BETWEEN (v0.c1 COLLATE RTRIM) AND ((((v0.c0, vt1.c0, vt1.c0, v0.c2))<=((NULL, vt1.c0, v0.c2, vt1.c0)))))  NULLS FIRST, ((v0.c2)-((((v0.c1, v0.c1, vt1.c0)) BETWEEN ((v0.c2, v0.c1, vt1.c1)) AND ((v0.c2, NULL, vt1.c0))))) DESC;
SELECT COUNT(*) FROM v0 WHERE ((~ (CAST(v0.c2 AS INTEGER))));
SELECT ALL COUNT(*) FROM v0 WHERE ((((~ (CAST(v0.c2 AS INTEGER))))AND(((((CAST(v0.c0 AS INTEGER))AND(((v0.c2) ISNULL))))AND(v0.c0 COLLATE RTRIM))))) ORDER BY (('8쥐 \vFHv!')>>(v0.c1 COLLATE BINARY)) DESC LIMIT 2;
SELECT * FROM vt1, v0 WHERE (CAST(((v0.c0)<>(v0.c0)) AS TEXT)) ORDER BY ((((x'ede48d')+(v0.c2))) BETWEEN (LIKE(v0.c0, vt1.c1, '0')) AND (CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN 0xffffffffa11d25a0 THEN v0.c2 WHEN v0.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)), ((((v0.c2) IS FALSE))>>((NOT (v0.c2)))) DESC, CASE WHEN UNICODE(v0.c0) THEN (v0.c2 IN (vt1.c0, x'')) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c1)) THEN 'K7' END;
SELECT * FROM vt1, v0 WHERE (CAST(((v0.c0)<>(v0.c0)) AS TEXT)) ORDER BY ((((x'ede48d')+(v0.c2))) BETWEEN (LIKE(v0.c0, vt1.c1, '0')) AND (CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN 0Xffffffffa11d25a0 THEN v0.c2 WHEN v0.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)), ((((v0.c2) IS FALSE))>>((NOT (v0.c2)))) DESC, CASE WHEN UNICODE(v0.c0) THEN (v0.c2 IN (vt1.c0, x'')) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c1)) THEN 'K7' END LIMIT 2;
SELECT * FROM vt1, v0 WHERE (CAST(((v0.c0)<>(v0.c0)) AS TEXT)) ORDER BY ((((x'ede48d')+(v0.c2))) BETWEEN (LIKE(v0.c0, vt1.c1, '0')) AND (CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN 0xffffffffa11d25a0 THEN v0.c2 WHEN v0.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)), ((((v0.c2) IS FALSE))>>((NOT (v0.c2)))) DESC, CASE WHEN UNICODE(v0.c0) THEN (v0.c2 IN (vt1.c0, x'')) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c1)) THEN 'K7' END;
SELECT * FROM vt1, v0 WHERE (CAST(((v0.c0)<>(v0.c0)) AS TEXT)) ORDER BY ((((x'ede48d')+(v0.c2))) BETWEEN (LIKE(v0.c0, vt1.c1, '0')) AND (CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN 0Xffffffffa11d25a0 THEN v0.c2 WHEN v0.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)), ((((v0.c2) IS FALSE))>>((NOT (v0.c2)))) DESC, CASE WHEN UNICODE(v0.c0) THEN (v0.c2 IN (vt1.c0, x'')) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c1)) THEN 'K7' END LIMIT 2;
SELECT * FROM v0 WHERE (TRIM((NOT (v0.c1)))) ORDER BY 0Xffffffffc641e7ea  NULLS FIRST, TRIM(DISTINCT (+ (v0.c1)), (NOT (v0.c0))), CASE WHEN (v0.c0 IN (v0.c2)) THEN v0.c1 ELSE v0.c1 COLLATE BINARY END DESC;
SELECT * FROM v0 WHERE (((TRIM((NOT (v0.c1))))AND(v0.c0))) ORDER BY 0Xffffffffc641e7ea  NULLS FIRST, TRIM(DISTINCT (+ (v0.c1)), (NOT (v0.c0))), CASE WHEN (v0.c0 IN (v0.c2)) THEN v0.c1 ELSE v0.c1 COLLATE BINARY END DESC LIMIT 0X2 INTERSECT SELECT * FROM v0 WHERE ((((((((((((((((((v0.c0))>=((v0.c2))))AND((v0.c0 IN (v0.c0)))))OR(((v0.c0) BETWEEN (v0.c1) AND (v0.c1)))))AND(((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(((v0.c2) NOT NULL))))OR(CASE WHEN 0X62045002 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c1 END)))OR(CAST(v0.c0 AS BLOB))))OR(((((((v0.c0)OR(v0.c1)))AND(v0.c0)))OR(v0.c2))))) ORDER BY 0Xffffffffc641e7ea  NULLS FIRST, TRIM(DISTINCT (+ (v0.c1)), (NOT (v0.c0))), CASE WHEN (v0.c0 IN (v0.c2)) THEN v0.c1 ELSE v0.c1 COLLATE BINARY END DESC LIMIT 2;
SELECT * FROM v0 WHERE (TRIM((NOT (v0.c1)))) ORDER BY 0Xffffffffc641e7ea  NULLS FIRST, TRIM(DISTINCT (+ (v0.c1)), (NOT (v0.c0))), CASE WHEN (v0.c0 IN (v0.c2)) THEN v0.c1 ELSE v0.c1 COLLATE BINARY END DESC;
SELECT * FROM v0 WHERE (((TRIM((NOT (v0.c1))))AND(v0.c0))) ORDER BY 0Xffffffffc641e7ea  NULLS FIRST, TRIM(DISTINCT (+ (v0.c1)), (NOT (v0.c0))), CASE WHEN (v0.c0 IN (v0.c2)) THEN v0.c1 ELSE v0.c1 COLLATE BINARY END DESC LIMIT 0X2 INTERSECT SELECT * FROM v0 WHERE ((((((((((((((((((v0.c0))>=((v0.c2))))AND((v0.c0 IN (v0.c0)))))OR(((v0.c0) BETWEEN (v0.c1) AND (v0.c1)))))AND(((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(((v0.c2) NOT NULL))))OR(CASE WHEN 0X62045002 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c1 END)))OR(CAST(v0.c0 AS BLOB))))OR(((((((v0.c0)OR(v0.c1)))AND(v0.c0)))OR(v0.c2))))) ORDER BY 0Xffffffffc641e7ea  NULLS FIRST, TRIM(DISTINCT (+ (v0.c1)), (NOT (v0.c0))), CASE WHEN (v0.c0 IN (v0.c2)) THEN v0.c1 ELSE v0.c1 COLLATE BINARY END DESC LIMIT 2;
SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE (TRIM(DISTINCT ((v0.c0)>=(0.5712739890445837)), 0Xfffffffff6941924));
SELECT MIN(v0.c2) FROM vt1, v0 WHERE (((TRIM(DISTINCT ((v0.c0)>(0.5712739890445837)), -158066396))AND((v0.c0 IN ((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))), ((v0.c1) NOT BETWEEN (v0.c2) AND (vt1.c0))))))) LIMIT 3 INTERSECT SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE ('&0') LIMIT 0X3;
SELECT * FROM vt1, v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 ELSE vt1.c1 END)<=((v0.c2 IN (v0.c1, v0.c0))))) ORDER BY (((vt1.c1)<(v0.c1)) IN ()) DESC;
SELECT DISTINCT * FROM vt1, v0 WHERE (((((CASE WHEN v0.c1 THEN v0.c1 ELSE vt1.c1 END)<=((v0.c2 IN (v0.c1, v0.c0)))))AND((((((v0.c1 IN ()))OR(UPPER(DISTINCT v0.c2))))OR(CAST(v0.c1 AS BLOB)))))) ORDER BY (((v0.c0 IN (vt1.c1))) NOTNULL) ASC LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((CAST('1082059196' AS NUMERIC))/(IFNULL(v0.c1, '0.40627130752137486')))) ORDER BY (((v0.c0 IN (vt1.c1))) NOTNULL) ASC LIMIT 2;
SELECT * FROM vt1, v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 ELSE vt1.c1 END)<=((v0.c2 IN (v0.c1, v0.c0))))) ORDER BY (((vt1.c1)<(v0.c1)) IN ()) DESC;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c0) NOT BETWEEN ('-1140169220') AND (v0.c0))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((vt1.c0)<(vt1.c0)))));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((((v0.c0) NOT BETWEEN ('-1140169220') AND (v0.c0))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((vt1.c0)!=(vt1.c0)))))AND((((v0.c0 IN ())) NOTNULL)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((vt1.c1) BETWEEN ((((v0.c0, '1245804197', vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c0, v0.c2, v0.c2, vt1.c1)) AND (('1330215190', -2058342109, v0.c2, v0.c2)))) AND (INSTR(v0.c2, v0.c2)))) LIMIT 1;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c0) NOT BETWEEN ('-1140169220') AND (v0.c0))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((vt1.c0)<(vt1.c0)))));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((((v0.c0) NOT BETWEEN ('-1140169220') AND (v0.c0))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND (((vt1.c0)!=(vt1.c0)))))AND((((v0.c0 IN ())) NOTNULL)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((vt1.c1) BETWEEN ((((v0.c0, '1245804197', vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c0, v0.c2, v0.c2, vt1.c1)) AND (('1330215190', -2058342109, v0.c2, v0.c2)))) AND (INSTR(v0.c2, v0.c2)))) LIMIT 1;
SELECT ALL * FROM v0, vt1 WHERE (((~ (v0.c2)) IN ()));
SELECT ALL * FROM v0, vt1 WHERE (((((~ (v0.c2)) IN ()))AND(((v0.c1)>=(((v0.c2) IS FALSE)))))) ORDER BY (((v0.c1) NOT BETWEEN (7.14411549E8) AND (vt1.c1)) IN ((((0.725146494403571, vt1.c1, v0.c2)) BETWEEN ((v0.c0, vt1.c1, v0.c0)) AND ((v0.c2, v0.c1, v0.c2))))), (((((v0.c0, v0.c2)) BETWEEN ((NULL, 0.5884331282512838)) AND ((v0.c0, v0.c2))))<(CAST(vt1.c0 AS NUMERIC)))  NULLS FIRST, vt1.c0 DESC, 1.029704324E9  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM v0, vt1 WHERE (CAST(((vt1.c0) BETWEEN (v0.c0) AND (v0.c2)) AS REAL)) ORDER BY (((v0.c1) NOT BETWEEN (7.14411549E8) AND (vt1.c1)) IN ((((0.725146494403571, vt1.c1, v0.c2)) BETWEEN ((v0.c0, vt1.c1, v0.c0)) AND ((v0.c2, v0.c1, v0.c2))))), (((((v0.c0, v0.c2)) BETWEEN ((NULL, 0.5884331282512838)) AND ((v0.c0, v0.c2))))<(CAST(vt1.c0 AS NUMERIC)))  NULLS FIRST, vt1.c0 DESC, 1.029704324E9  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM v0, vt1 WHERE (((~ (v0.c2)) IN ()));
SELECT ALL * FROM v0, vt1 WHERE (((((~ (v0.c2)) IN ()))AND(((v0.c1)>=(((v0.c2) IS FALSE)))))) ORDER BY (((v0.c1) NOT BETWEEN (7.14411549E8) AND (vt1.c1)) IN ((((0.725146494403571, vt1.c1, v0.c2)) BETWEEN ((v0.c0, vt1.c1, v0.c0)) AND ((v0.c2, v0.c1, v0.c2))))), (((((v0.c0, v0.c2)) BETWEEN ((NULL, 0.5884331282512838)) AND ((v0.c0, v0.c2))))<(CAST(vt1.c0 AS NUMERIC)))  NULLS FIRST, vt1.c0 DESC, 1.029704324E9  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM v0, vt1 WHERE (CAST(((vt1.c0) BETWEEN (v0.c0) AND (v0.c2)) AS REAL)) ORDER BY (((v0.c1) NOT BETWEEN (7.14411549E8) AND (vt1.c1)) IN ((((0.725146494403571, vt1.c1, v0.c2)) BETWEEN ((v0.c0, vt1.c1, v0.c0)) AND ((v0.c2, v0.c1, v0.c2))))), (((((v0.c0, v0.c2)) BETWEEN ((NULL, 0.5884331282512838)) AND ((v0.c0, v0.c2))))<(CAST(vt1.c0 AS NUMERIC)))  NULLS FIRST, vt1.c0 DESC, 1.029704324E9  NULLS LAST LIMIT 0X0;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((('ꉪ~Nh') NOT BETWEEN (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END) AND (((vt1.c1)GLOB(vt1.c1))))) ORDER BY (('-2049162084')>(vt1.c0 COLLATE RTRIM)) ASC  NULLS FIRST, ((((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)))==(CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'k卄' WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END)) ASC;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((('ꉪ~Nh') NOT BETWEEN (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END) AND (((vt1.c1)GLOB(vt1.c1)))))AND(((((vt1.c1)IS NOT(0.07918742636774256))) NOT BETWEEN (CAST(768350880 AS TEXT)) AND ((((vt1.c0, vt1.c1, vt1.c1)) NOT BETWEEN ((0xffffffff9c12a671, vt1.c1, vt1.c0)) AND ((vt1.c1, '-723996801', vt1.c1)))))))) ORDER BY (('-2049162084')>(vt1.c0 COLLATE RTRIM)) ASC  NULLS FIRST, ((((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)))=(CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'k卄' WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END)) ASC LIMIT 0 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (vt1.c1) ORDER BY (('-2049162084')>(vt1.c0 COLLATE RTRIM)) ASC  NULLS FIRST, ((((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)))==(CASE NULL  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN 'k卄' WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END)) ASC LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (((0Xffffffffa07ce523)LIKE(((NULL) NOT BETWEEN (v0.c1) AND (vt1.c1))))) ORDER BY ((((v0.c2) NOTNULL))GLOB(((((((((vt1.c1)OR(vt1.c0)))OR(v0.c0)))AND(vt1.c0)))OR(v0.c2)))) DESC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (((((-1602427613)LIKE(((NULL) NOT BETWEEN (v0.c1) AND (vt1.c1)))))AND(((((vt1.c0) IS TRUE))&('1874745694'))))) ORDER BY (+ (CAST(vt1.c1 AS NUMERIC)))  NULLS FIRST, ((((((v0.c1)AND(v0.c2)))OR(v0.c0))) IS TRUE) ASC, ((((v0.c1)-(v0.c0)))AND(((0.5986432644228776)&(0x16ba2f3b))));
SELECT ALL * FROM vt1, v0 WHERE (((0Xffffffffa07ce523)LIKE(((NULL) NOT BETWEEN (v0.c1) AND (vt1.c1))))) ORDER BY ((((v0.c2) NOTNULL))GLOB(((((((((vt1.c1)OR(vt1.c0)))OR(v0.c0)))AND(vt1.c0)))OR(v0.c2)))) DESC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (((((-1602427613)LIKE(((NULL) NOT BETWEEN (v0.c1) AND (vt1.c1)))))AND(((((vt1.c0) IS TRUE))&('1874745694'))))) ORDER BY (+ (CAST(vt1.c1 AS NUMERIC)))  NULLS FIRST, ((((((v0.c1)AND(v0.c2)))OR(v0.c0))) IS TRUE) ASC, ((((v0.c1)-(v0.c0)))AND(((0.5986432644228776)&(0x16ba2f3b))));
SELECT ALL MAX(v0.c0) FROM v0, vt1 WHERE (SQLITE_COMPILEOPTION_GET(MAX(vt1.c0, v0.c1, vt1.c0, v0.c0))) ORDER BY (+ (v0.c0)) DESC, CAST(((vt1.c1)IS NOT(v0.c1)) AS TEXT) DESC;
SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE (SQLITE_COMPILEOPTION_GET(MAX(vt1.c0, v0.c1, vt1.c0, v0.c0))) ORDER BY (CASE WHEN '1504982539' THEN vt1.c1 END IN (CASE WHEN vt1.c1 THEN v0.c1 WHEN v0.c1 THEN vt1.c0 END));
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)))AND('7psodrYx䂤')))/(((vt1.c0)%(vt1.c1))))) ORDER BY ((((((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1)))OR(((v0.c1) BETWEEN (vt1.c0) AND (v0.c2)))))OR(CASE '1245804197'  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c0 END)))OR(v0.c0))  NULLS LAST;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)))AND('7psodrYx䂤')))/(((vt1.c0)%(vt1.c1)))))AND((NOT (((vt1.c1)GLOB(vt1.c0))))))) ORDER BY CASE ((v0.c0)&(v0.c0))  WHEN (vt1.c1 IN (vt1.c0)) THEN ((vt1.c0)!=(vt1.c1)) END DESC, 'x' DESC LIMIT 0 INTERSECT SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((((v0.c1 IN ()))>=(((v0.c0) IS FALSE)))) ORDER BY CASE ((v0.c0)&(v0.c0))  WHEN (vt1.c1 IN (vt1.c0)) THEN ((vt1.c0)!=(vt1.c1)) END DESC, 'x' DESC LIMIT 0;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)))AND('7psodrYx䂤')))/(((vt1.c0)%(vt1.c1))))) ORDER BY ((((((((vt1.c1) NOT BETWEEN (v0.c2) AND (vt1.c1)))OR(((v0.c1) BETWEEN (vt1.c0) AND (v0.c2)))))OR(CASE '1245804197'  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c0 END)))OR(v0.c0))  NULLS LAST;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)))AND('7psodrYx䂤')))/(((vt1.c0)%(vt1.c1)))))AND((NOT (((vt1.c1)GLOB(vt1.c0))))))) ORDER BY CASE ((v0.c0)&(v0.c0))  WHEN (vt1.c1 IN (vt1.c0)) THEN ((vt1.c0)!=(vt1.c1)) END DESC, 'x' DESC LIMIT 0 INTERSECT SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((((v0.c1 IN ()))>=(((v0.c0) IS FALSE)))) ORDER BY CASE ((v0.c0)&(v0.c0))  WHEN (vt1.c1 IN (vt1.c0)) THEN ((vt1.c0)!=(vt1.c1)) END DESC, 'x' DESC LIMIT 0;
SELECT * FROM v0 WHERE ((~ ((('0.1382270436881673') BETWEEN (v0.c0) AND (v0.c1)))));
SELECT DISTINCT * FROM v0 WHERE ((~ ((('0.1382270436881673') BETWEEN (v0.c0) AND (v0.c1)))));
SELECT * FROM v0 WHERE ((~ ((('0.1382270436881673') BETWEEN (v0.c0) AND (v0.c1)))));
SELECT DISTINCT * FROM v0 WHERE ((~ ((('0.1382270436881673') BETWEEN (v0.c0) AND (v0.c1)))));
SELECT MAX(v0.c2) FROM v0 WHERE ((~ (0.0920041742703418))) ORDER BY (+ (v0.c2 COLLATE RTRIM)), ((v0.c1 IN ()) IN (((v0.c2)*(v0.c2))))  NULLS FIRST, v0.c2 COLLATE BINARY;
SELECT MAX(v0.c2) FROM v0 WHERE ((~ (0.0920041742703418))) ORDER BY (+ (v0.c2 COLLATE RTRIM)), ((v0.c1 IN ()) IN (((v0.c2)*(v0.c2))))  NULLS FIRST, v0.c2 COLLATE BINARY;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON (+ (((v0.c1) NOTNULL))) WHERE (((((v0.c0)OR(vt1.c0)))AND(0.7513295014870891)));
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (+ (((v0.c1) NOTNULL))) WHERE (((((v0.c0)OR(vt1.c0)))AND(0.7513295014870891))) LIMIT 0X0;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON (+ (((v0.c1) NOTNULL))) WHERE (((((v0.c0)OR(vt1.c0)))AND(0.7513295014870891)));
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (+ (((v0.c1) NOTNULL))) WHERE (((((v0.c0)OR(vt1.c0)))AND(0.7513295014870891))) LIMIT 0X0;
SELECT MAX(vt1.c0) FROM vt1 CROSS JOIN v0 ON CASE WHEN (v0.c2 IN (v0.c1)) THEN v0.c0 WHEN (((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, v0.c1)) AND ((vt1.c1, vt1.c0))) THEN (((vt1.c1)) BETWEEN ((vt1.c0)) AND ((v0.c0))) ELSE ((vt1.c1)IS(vt1.c1)) END WHERE ((((NOT (v0.c2)))>(((vt1.c1)<=(vt1.c1)))));
SELECT ALL MAX(vt1.c0) FROM vt1 CROSS JOIN v0 ON CASE WHEN (v0.c2 IN (v0.c1)) THEN v0.c0 WHEN (((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, v0.c1)) AND ((vt1.c1, vt1.c0))) THEN (((vt1.c1)) BETWEEN ((vt1.c0)) AND ((v0.c0))) ELSE ((vt1.c1)IS(vt1.c1)) END WHERE ((((((NOT (v0.c2)))>(((vt1.c1)<=(vt1.c1)))))AND(CASE v0.c2  WHEN v0.c0 THEN vt1.c1 ELSE v0.c2 END COLLATE RTRIM))) ORDER BY '1217800270', ((((((((v0.c0) NOT NULL))OR(-333493890)))OR(((v0.c0)OR(v0.c2)))))AND(((((vt1.c0)AND(v0.c1)))AND(vt1.c0)))) DESC  NULLS FIRST LIMIT 0x2;
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE (((((((v0.c1)OR(v0.c1)))AND(v0.c2)))GLOB(CAST(0.9878257249052071 AS REAL)))) ORDER BY (+ ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((NULL))))) ASC  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM v0, vt1 WHERE (((((((v0.c1)OR(v0.c1)))AND(v0.c2)))GLOB(CAST(0.9878257249052071 AS REAL)))) ORDER BY (+ ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((NULL))))) ASC  NULLS FIRST INTERSECT SELECT MAX(vt1.c0) FROM v0, vt1 WHERE (((x'') NOT BETWEEN ((v0.c1 IN (vt1.c0, v0.c2))) AND (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c0))))) ORDER BY (+ ((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((NULL))))) ASC  NULLS FIRST;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (LIKELY(DISTINCT ((vt1.c1)OR(0.6968501889062464))));
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (LIKELY(DISTINCT ((vt1.c1)OR(0.6968501889062464)))) ORDER BY (+ (CAST(vt1.c1 AS BLOB))) DESC  NULLS FIRST, TRIM((((vt1.c1, vt1.c1))!=((vt1.c0, vt1.c0)))) LIMIT 0 INTERSECT SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (CASE ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1))  WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)) THEN ((x'd0')/(0.857154751926254)) WHEN ((vt1.c1) NOTNULL) THEN CAST(x'e7d5' AS REAL) END) ORDER BY (+ (CAST(vt1.c1 AS BLOB))) DESC  NULLS FIRST, TRIM((((vt1.c1, vt1.c1))<>((vt1.c0, vt1.c0)))) LIMIT 0X0;
SELECT * FROM vt1 WHERE ('m  -%Q{F' COLLATE RTRIM);
SELECT * FROM vt1 WHERE ('m  -%Q{F' COLLATE RTRIM) INTERSECT SELECT ALL * FROM vt1 WHERE ((NOT (vt1.c0 COLLATE NOCASE)));
SELECT * FROM vt1 WHERE ('m  -%Q{F' COLLATE RTRIM);
SELECT * FROM vt1 WHERE ('m  -%Q{F' COLLATE RTRIM) INTERSECT SELECT ALL * FROM vt1 WHERE ((NOT (vt1.c0 COLLATE NOCASE)));
SELECT MIN(vt1.c1) FROM v0, vt1 WHERE (((((vt1.c0) NOT BETWEEN (NULL) AND (v0.c2)))<>(((vt1.c1) NOT BETWEEN (v0.c1) AND (NULL))))) ORDER BY LTRIM((((NULL)) NOT BETWEEN ((vt1.c1)) AND ((v0.c0))), CAST(vt1.c1 AS REAL))  NULLS FIRST, (((v0.c2 IN (vt1.c1)))IS(((vt1.c0) BETWEEN (v0.c1) AND (v0.c1))));
SELECT MIN(vt1.c1) FROM v0, vt1 WHERE (((((vt1.c0) NOT BETWEEN (NULL) AND (v0.c2)))<>(((vt1.c1) NOT BETWEEN (v0.c1) AND (NULL))))) ORDER BY (0.09855017478040107 COLLATE RTRIM IN (((v0.c0)GLOB(0Xffffffffbd111a6c)), (- (v0.c2)), TRIM(vt1.c1)))  NULLS FIRST, ((v0.c0 IN (0.5652246658500134, vt1.c0)) IN ()) ASC  NULLS FIRST LIMIT 0x2 INTERSECT SELECT MIN(vt1.c1) FROM v0, vt1 NOT INDEXED WHERE (CASE WHEN CAST(vt1.c1 AS BLOB) THEN '' WHEN (- (vt1.c1)) THEN (vt1.c0 IN (v0.c1)) WHEN ((v0.c2) BETWEEN (vt1.c1) AND (vt1.c0)) THEN CAST(v0.c2 AS REAL) ELSE (~ (v0.c2)) END) ORDER BY (0.09855017478040107 COLLATE RTRIM IN (((v0.c0)GLOB(-1122952596)), (- (v0.c2)), TRIM(vt1.c1)))  NULLS FIRST, ((v0.c0 IN (0.5652246658500134, vt1.c0)) IN ()) ASC  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM v0 INNER JOIN vt1 ON CASE WHEN '''Z!yi' THEN NULLIF(vt1.c1, 0.5086205052870728) ELSE (NOT (v0.c1)) END WHERE (((((v0.c2)=(3.4551404E8))) BETWEEN ((vt1.c1 IN (0.22777142990170762))) AND (v0.c1 COLLATE BINARY)));
SELECT ALL * FROM v0 INNER JOIN vt1 ON CASE WHEN '''Z!yi' THEN NULLIF(vt1.c1, 0.5086205052870728) ELSE (NOT (v0.c1)) END WHERE (((((v0.c2)==(3.4551404E8))) BETWEEN ((vt1.c1 IN (0.22777142990170762))) AND (v0.c1 COLLATE BINARY))) LIMIT 3 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON CASE WHEN '''Z!yi' THEN NULLIF(vt1.c1, 0.5086205052870728) ELSE (NOT (v0.c1)) END WHERE ((CAST(vt1.c1 AS NUMERIC) IN (v0.c1 COLLATE RTRIM))) LIMIT 0x3;
SELECT ALL * FROM v0 INNER JOIN vt1 ON CASE WHEN '''Z!yi' THEN NULLIF(vt1.c1, 0.5086205052870728) ELSE (NOT (v0.c1)) END WHERE (((((v0.c2)=(3.4551404E8))) BETWEEN ((vt1.c1 IN (0.22777142990170762))) AND (v0.c1 COLLATE BINARY)));
SELECT ALL * FROM v0 INNER JOIN vt1 ON CASE WHEN '''Z!yi' THEN NULLIF(vt1.c1, 0.5086205052870728) ELSE (NOT (v0.c1)) END WHERE (((((v0.c2)==(3.4551404E8))) BETWEEN ((vt1.c1 IN (0.22777142990170762))) AND (v0.c1 COLLATE BINARY))) LIMIT 3 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON CASE WHEN '''Z!yi' THEN NULLIF(vt1.c1, 0.5086205052870728) ELSE (NOT (v0.c1)) END WHERE ((CAST(vt1.c1 AS NUMERIC) IN (v0.c1 COLLATE RTRIM))) LIMIT 0x3;
SELECT ALL * FROM vt1, v0 WHERE (CAST(((v0.c2) IS FALSE) AS BLOB));
SELECT DISTINCT * FROM vt1, v0 WHERE (((CAST(((v0.c2) IS FALSE) AS BLOB))AND((((0.22552769617154667)<=(v0.c2)) IN ())))) LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (CAST(((v0.c2) IS FALSE) AS BLOB));
SELECT DISTINCT * FROM vt1, v0 WHERE (((CAST(((v0.c2) IS FALSE) AS BLOB))AND((((0.22552769617154667)<=(v0.c2)) IN ())))) LIMIT 0;
SELECT ALL MIN(v0.c0) FROM v0 WHERE ((CAST(v0.c0 AS NUMERIC) IN (TRIM(DISTINCT v0.c1))));
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ((CAST(v0.c0 AS NUMERIC) IN (TRIM(DISTINCT v0.c1)))) ORDER BY v0.c2 DESC, STRFTIME(x'6c', v0.c2, ((((((((((((v0.c1)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c1)), SQLITE_SOURCE_ID()) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ((+ (((v0.c2)>>(v0.c1))))) ORDER BY v0.c2 DESC, STRFTIME(x'6c', v0.c2, ((((((((((((v0.c1)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c1)), SQLITE_SOURCE_ID()) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (vt1.c1 COLLATE BINARY);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c1 COLLATE BINARY)AND((((vt1.c1 IN ()))AND(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1))))))) ORDER BY ((vt1.c1)IS(vt1.c0 COLLATE BINARY)), (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c0))) COLLATE RTRIM DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (vt1.c1 COLLATE BINARY);
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c1 COLLATE BINARY)AND((((vt1.c1 IN ()))AND(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1))))))) ORDER BY ((vt1.c1)IS(vt1.c0 COLLATE BINARY)), (((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c0))) COLLATE RTRIM DESC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (((vt1.c0)=(v0.c2)) COLLATE RTRIM);
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0)=(v0.c2)) COLLATE RTRIM) LIMIT 0;
SELECT * FROM vt1, v0 WHERE (((vt1.c0)=(v0.c2)) COLLATE RTRIM);
SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0)=(v0.c2)) COLLATE RTRIM) LIMIT 0;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN ((((vt1.c1)OR(v0.c2)))AND(vt1.c1)) THEN ((vt1.c1)AND(v0.c2)) WHEN ((v0.c2) IS TRUE) THEN CAST(v0.c0 AS NUMERIC) WHEN CAST(vt1.c0 AS BLOB) THEN CAST(x'f98a' AS NUMERIC) END);
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN ((((vt1.c1)OR(v0.c2)))AND(vt1.c1)) THEN ((vt1.c1)AND(v0.c2)) WHEN ((v0.c2) IS TRUE) THEN CAST(v0.c0 AS NUMERIC) WHEN CAST(vt1.c0 AS BLOB) THEN CAST(x'f98a' AS NUMERIC) END) ORDER BY CAST(COALESCE(DISTINCT v0.c0, vt1.c0) AS TEXT), ((((vt1.c0, v0.c2))=((v0.c0, v0.c1))) IN (CAST(v0.c0 AS BLOB))) ASC INTERSECT SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (((vt1.c0)LIKE(vt1.c0)) COLLATE NOCASE) ORDER BY CAST(COALESCE(DISTINCT v0.c0, vt1.c0) AS TEXT), ((((vt1.c0, v0.c2))=((v0.c0, v0.c1))) IN (CAST(v0.c0 AS BLOB))) ASC;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN ((((vt1.c1)OR(v0.c2)))AND(vt1.c1)) THEN ((vt1.c1)AND(v0.c2)) WHEN ((v0.c2) IS TRUE) THEN CAST(v0.c0 AS NUMERIC) WHEN CAST(vt1.c0 AS BLOB) THEN CAST(x'f98a' AS NUMERIC) END);
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (CASE WHEN ((((vt1.c1)OR(v0.c2)))AND(vt1.c1)) THEN ((vt1.c1)AND(v0.c2)) WHEN ((v0.c2) IS TRUE) THEN CAST(v0.c0 AS NUMERIC) WHEN CAST(vt1.c0 AS BLOB) THEN CAST(x'f98a' AS NUMERIC) END) ORDER BY CAST(COALESCE(DISTINCT v0.c0, vt1.c0) AS TEXT), ((((vt1.c0, v0.c2))=((v0.c0, v0.c1))) IN (CAST(v0.c0 AS BLOB))) ASC INTERSECT SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (((vt1.c0)LIKE(vt1.c0)) COLLATE NOCASE) ORDER BY CAST(COALESCE(DISTINCT v0.c0, vt1.c0) AS TEXT), ((((vt1.c0, v0.c2))=((v0.c0, v0.c1))) IN (CAST(v0.c0 AS BLOB))) ASC;
SELECT MAX(v0.c2) FROM v0 WHERE ((v0.c0 IN (((((((((v0.c1)AND(v0.c2)))OR(v0.c0)))AND(v0.c1)))OR(v0.c2)), ((v0.c1)||(v0.c2)), CAST(v0.c0 AS INTEGER))));
SELECT MAX(v0.c2) FROM v0 WHERE ((((v0.c0 IN (((((((((v0.c1)AND(v0.c2)))OR(v0.c0)))AND(v0.c1)))OR(v0.c2)), ((v0.c1)||(v0.c2)), CAST(v0.c0 AS INTEGER))))AND((((v0.c1 COLLATE RTRIM, 'uu'))<>(((~ (v0.c1)), (v0.c2 IN (v0.c0)))))))) LIMIT 0x1 INTERSECT SELECT MAX(v0.c2) FROM v0 WHERE (((((((((v0.c2) NOTNULL))AND((((v0.c2, v0.c1, v0.c1))>((v0.c2, v0.c1, v0.c0))))))OR((v0.c0 IN (v0.c2)))))OR((NOT (v0.c1))))) LIMIT 0x1;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (TRIM(DISTINCT vt1.c1, vt1.c1) COLLATE BINARY);
SELECT MAX(vt1.c1) FROM vt1 WHERE (TRIM(DISTINCT vt1.c1, vt1.c1) COLLATE BINARY) ORDER BY ((((vt1.c0)IS NOT(vt1.c0)))GLOB(((vt1.c1)>>(vt1.c1)))) DESC, (NULL IN (vt1.c0)) COLLATE RTRIM, ((CAST(vt1.c1 AS NUMERIC)) NOT BETWEEN (vt1.c1 COLLATE BINARY) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)))) LIMIT 0 INTERSECT SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (vt1.c1) ORDER BY ((((vt1.c0)IS NOT(vt1.c0)))GLOB(((vt1.c1)>>(vt1.c1)))) DESC, (NULL IN (vt1.c0)) COLLATE RTRIM, ((CAST(vt1.c1 AS NUMERIC)) NOT BETWEEN (vt1.c1 COLLATE BINARY) AND (((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)))) LIMIT 0;
SELECT * FROM v0 WHERE (((((v0.c2 COLLATE RTRIM)AND(((((((((((v0.c1)AND(v0.c0)))OR(NULL)))AND(v0.c0)))OR(v0.c2)))AND(v0.c1)))))AND((((0.7136590669544028, v0.c2))<>((v0.c0, v0.c1)))))) ORDER BY v0.c2 DESC, (((- (v0.c1))) BETWEEN (COALESCE(DISTINCT v0.c2, v0.c0)) AND ((NOT (v0.c2)))), ((((x'')+(v0.c2))) IS TRUE) DESC;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c2 COLLATE RTRIM)AND(((((((((((v0.c1)AND(v0.c0)))OR(NULL)))AND(v0.c0)))OR(v0.c2)))AND(v0.c1)))))AND((((0.7136590669544028, v0.c2))<>((v0.c0, v0.c1))))))AND(((((((v0.c0)OR(v0.c2)))OR(v0.c1)))||(((v0.c1)<(v0.c2))))))) ORDER BY CASE WHEN ((v0.c2)>=(v0.c2)) THEN (~ (v0.c1)) WHEN (NOT (v0.c2)) THEN ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)) WHEN v0.c0 THEN ((v0.c2)>(v0.c0)) WHEN v0.c2 THEN CAST('1560853862' AS NUMERIC) END DESC  NULLS LAST, v0.c0 ASC LIMIT 0X1;
SELECT * FROM v0 WHERE (((((v0.c2 COLLATE RTRIM)AND(((((((((((v0.c1)AND(v0.c0)))OR(NULL)))AND(v0.c0)))OR(v0.c2)))AND(v0.c1)))))AND((((0.7136590669544028, v0.c2))<>((v0.c0, v0.c1)))))) ORDER BY v0.c2 DESC, (((- (v0.c1))) BETWEEN (COALESCE(DISTINCT v0.c2, v0.c0)) AND ((NOT (v0.c2)))), ((((x'')+(v0.c2))) IS TRUE) DESC;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c2 COLLATE RTRIM)AND(((((((((((v0.c1)AND(v0.c0)))OR(NULL)))AND(v0.c0)))OR(v0.c2)))AND(v0.c1)))))AND((((0.7136590669544028, v0.c2))<>((v0.c0, v0.c1))))))AND(((((((v0.c0)OR(v0.c2)))OR(v0.c1)))||(((v0.c1)<(v0.c2))))))) ORDER BY CASE WHEN ((v0.c2)>=(v0.c2)) THEN (~ (v0.c1)) WHEN (NOT (v0.c2)) THEN ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)) WHEN v0.c0 THEN ((v0.c2)>(v0.c0)) WHEN v0.c2 THEN CAST('1560853862' AS NUMERIC) END DESC  NULLS LAST, v0.c0 ASC LIMIT 0X1;
SELECT MAX(v0.c1) FROM v0, vt1 WHERE ((((vt1.c1, v0.c0)) NOT BETWEEN (((v0.c1 IN (vt1.c1)), (vt1.c0 IN ()))) AND ((x'dea82d', (v0.c1 IN ())))));
SELECT ALL MAX(v0.c1) FROM v0, vt1 WHERE ((((((vt1.c1, v0.c0)) NOT BETWEEN (((v0.c1 IN (vt1.c1)), (vt1.c0 IN ()))) AND ((x'dea82d', (v0.c1 IN ())))))AND(CAST((((vt1.c1, v0.c2))>((v0.c1, v0.c2))) AS BLOB)))) INTERSECT SELECT MAX(v0.c1) FROM v0, vt1 WHERE (((((((vt1.c1) BETWEEN (v0.c2) AND (v0.c2)))AND((- (-2.86619625E8)))))OR('196759860')));
SELECT ALL * FROM v0 WHERE ((NOT (0Xffffffff96cac200)));
SELECT DISTINCT * FROM v0 WHERE ((NOT (-1765096960))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((CAST('-1119098304' AS BLOB) IN (((v0.c1)%(v0.c2)), ((NULL)>=(v0.c0))))) LIMIT 0X2;
SELECT ALL * FROM v0 WHERE ((NOT (0Xffffffff96cac200)));
SELECT DISTINCT * FROM v0 WHERE ((NOT (-1765096960))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((CAST('-1119098304' AS BLOB) IN (((v0.c1)%(v0.c2)), ((NULL)>=(v0.c0))))) LIMIT 0X2;
SELECT ALL * FROM v0 WHERE ((695416099 COLLATE BINARY IN (v0.c1))) ORDER BY ((v0.c0 COLLATE RTRIM) BETWEEN (v0.c0) AND (v0.c2)) ASC;
SELECT DISTINCT * FROM v0 WHERE ((((0X29733523 COLLATE BINARY IN (v0.c1)))AND(x''))) ORDER BY ((v0.c0 COLLATE RTRIM) BETWEEN (v0.c0) AND (v0.c2)) ASC INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c2) ISNULL))GLOB(x'62'))) ORDER BY ((v0.c0 COLLATE RTRIM) BETWEEN (v0.c0) AND (v0.c2)) ASC;
SELECT ALL * FROM v0 WHERE ((695416099 COLLATE BINARY IN (v0.c1))) ORDER BY ((v0.c0 COLLATE RTRIM) BETWEEN (v0.c0) AND (v0.c2)) ASC;
SELECT DISTINCT * FROM v0 WHERE ((((0X29733523 COLLATE BINARY IN (v0.c1)))AND(x''))) ORDER BY ((v0.c0 COLLATE RTRIM) BETWEEN (v0.c0) AND (v0.c2)) ASC INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c2) ISNULL))GLOB(x'62'))) ORDER BY ((v0.c0 COLLATE RTRIM) BETWEEN (v0.c0) AND (v0.c2)) ASC;
SELECT ALL MIN(v0.c2) FROM v0 LEFT OUTER JOIN vt1 ON ((((((((vt1.c0)|(v0.c2)))OR(((vt1.c1) BETWEEN (v0.c1) AND (v0.c2)))))OR(((vt1.c0)<>(v0.c2)))))OR(((v0.c0) NOT NULL))) WHERE (((v0.c1 COLLATE NOCASE)%(v0.c2)));
SELECT DISTINCT MIN(v0.c2) FROM v0 INNER JOIN vt1 ON ((((((((vt1.c0)|(v0.c2)))OR(((vt1.c1) BETWEEN (v0.c1) AND (v0.c2)))))OR(((vt1.c0)!=(v0.c2)))))OR(((v0.c0) NOT NULL))) WHERE (((((v0.c1 COLLATE NOCASE)%(v0.c2)))AND(((((v0.c1) BETWEEN (vt1.c0) AND (v0.c1))) IS TRUE)))) ORDER BY (((v0.c0 IN (v0.c1)))AND((vt1.c1 IN (vt1.c0, vt1.c1)))) ASC  NULLS FIRST, (('1627386905')AND(v0.c2 COLLATE RTRIM)) ASC LIMIT 0;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (v0.c0);
SELECT ALL MIN(v0.c1) FROM v0 WHERE (((v0.c0)AND(v0.c0))) LIMIT 0x0;
SELECT ALL * FROM v0, vt1 WHERE (((((v0.c0) BETWEEN (v0.c1) AND (v0.c2)))<=((((v0.c1, vt1.c0, vt1.c0)) BETWEEN ((v0.c1, vt1.c1, v0.c0)) AND ((v0.c1, vt1.c0, vt1.c1))))));
SELECT * FROM v0, vt1 WHERE (((((((v0.c0) BETWEEN (v0.c1) AND (v0.c2)))<=((((v0.c1, vt1.c0, vt1.c0)) BETWEEN ((v0.c1, vt1.c1, v0.c0)) AND ((v0.c1, vt1.c0, vt1.c1))))))AND(vt1.c1))) ORDER BY json_quote(((vt1.c0)>(v0.c1)))  NULLS LAST, CASE ((((((v0.c2)OR(v0.c2)))AND(v0.c2)))OR(vt1.c1))  WHEN ((v0.c1) NOT NULL) THEN (((v0.c0, vt1.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2, 0.054053100534741993)) AND ((v0.c1, v0.c2, v0.c2))) WHEN CAST(v0.c2 AS NUMERIC) THEN ((vt1.c1)IS NOT(vt1.c1)) ELSE (+ (vt1.c1)) END  NULLS LAST, (((v0.c1)IS(vt1.c1)) IN ()) INTERSECT SELECT * FROM v0, vt1 WHERE (((-1060628154)/(LTRIM(v0.c0, v0.c1)))) ORDER BY json_quote(((vt1.c0)>(v0.c1)))  NULLS LAST, CASE ((((((v0.c2)OR(v0.c2)))AND(v0.c2)))OR(vt1.c1))  WHEN ((v0.c1) NOT NULL) THEN (((v0.c0, vt1.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2, 0.054053100534741993)) AND ((v0.c1, v0.c2, v0.c2))) WHEN CAST(v0.c2 AS NUMERIC) THEN ((vt1.c1)IS NOT(vt1.c1)) ELSE (+ (vt1.c1)) END  NULLS LAST, (((v0.c1)IS(vt1.c1)) IN ());
SELECT ALL * FROM v0, vt1 WHERE (((((v0.c0) BETWEEN (v0.c1) AND (v0.c2)))<=((((v0.c1, vt1.c0, vt1.c0)) BETWEEN ((v0.c1, vt1.c1, v0.c0)) AND ((v0.c1, vt1.c0, vt1.c1))))));
SELECT * FROM v0, vt1 WHERE (((((((v0.c0) BETWEEN (v0.c1) AND (v0.c2)))<=((((v0.c1, vt1.c0, vt1.c0)) BETWEEN ((v0.c1, vt1.c1, v0.c0)) AND ((v0.c1, vt1.c0, vt1.c1))))))AND(vt1.c1))) ORDER BY json_quote(((vt1.c0)>(v0.c1)))  NULLS LAST, CASE ((((((v0.c2)OR(v0.c2)))AND(v0.c2)))OR(vt1.c1))  WHEN ((v0.c1) NOT NULL) THEN (((v0.c0, vt1.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2, 0.054053100534741993)) AND ((v0.c1, v0.c2, v0.c2))) WHEN CAST(v0.c2 AS NUMERIC) THEN ((vt1.c1)IS NOT(vt1.c1)) ELSE (+ (vt1.c1)) END  NULLS LAST, (((v0.c1)IS(vt1.c1)) IN ()) INTERSECT SELECT * FROM v0, vt1 WHERE (((-1060628154)/(LTRIM(v0.c0, v0.c1)))) ORDER BY json_quote(((vt1.c0)>(v0.c1)))  NULLS LAST, CASE ((((((v0.c2)OR(v0.c2)))AND(v0.c2)))OR(vt1.c1))  WHEN ((v0.c1) NOT NULL) THEN (((v0.c0, vt1.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2, 0.054053100534741993)) AND ((v0.c1, v0.c2, v0.c2))) WHEN CAST(v0.c2 AS NUMERIC) THEN ((vt1.c1)IS NOT(vt1.c1)) ELSE (+ (vt1.c1)) END  NULLS LAST, (((v0.c1)IS(vt1.c1)) IN ());
SELECT ALL COUNT(*) FROM vt1 WHERE ((LIKELIHOOD(vt1.c0, vt1.c0) IN ())) ORDER BY NULL ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((LIKELIHOOD(vt1.c0, vt1.c0) IN ()))AND(vt1.c1))) ORDER BY (vt1.c1 IN (vt1.c0, vt1.c0)) COLLATE RTRIM  NULLS FIRST, (((((vt1.c1, vt1.c1, vt1.c1))=((vt1.c0, vt1.c1, vt1.c0))))>>(((vt1.c0)<<(vt1.c1)))) DESC;
SELECT ALL MAX(v0.c1) FROM vt1 CROSS JOIN v0 ON (((v0.c0) IS FALSE) IN ((+ (v0.c0)))) WHERE (CAST('-1065892614' AS INTEGER) COLLATE BINARY) ORDER BY CASE WHEN ((v0.c0)<(v0.c0)) THEN ((v0.c0)LIKE(v0.c1)) ELSE v0.c2 END DESC;
SELECT DISTINCT MAX(v0.c1) FROM vt1 CROSS JOIN v0 ON (((v0.c0) IS FALSE) IN ((+ (v0.c0)))) WHERE (((CAST('-1065892614' AS INTEGER) COLLATE BINARY)AND(((((((((((v0.c2)AND(v0.c2)))OR(v0.c1)))OR(vt1.c1)))AND(vt1.c0))) BETWEEN (((((v0.c0)AND(v0.c2)))OR(v0.c2))) AND (v0.c2))))) ORDER BY CASE WHEN vt1.c1 COLLATE NOCASE THEN (v0.c0 IN ()) ELSE COALESCE(vt1.c0, v0.c2, vt1.c1, v0.c0) END  NULLS LAST, (((+ (NULL))) IS TRUE), ((CAST(v0.c1 AS NUMERIC)) IS FALSE) LIMIT 2;
SELECT ALL * FROM vt1, v0 WHERE ((NOT ((v0.c2 IN (vt1.c0))))) ORDER BY CAST(x'7e' AS NUMERIC), ((((((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN v0.c2 ELSE 0.3267884668330462 END)AND(CASE WHEN v0.c0 THEN v0.c1 END)))OR(load_extension(vt1.c1))))AND(CASE v0.c2  WHEN v0.c2 THEN v0.c2 ELSE vt1.c0 END)) DESC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((NOT ((v0.c2 IN (vt1.c0))))) ORDER BY CAST(v0.c1 AS BLOB)  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((v0.c0)*(v0.c1)))-(json_insert(vt1.c0, vt1.c0, v0.c0)))) ORDER BY CAST(v0.c1 AS BLOB)  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((NOT ((v0.c2 IN (vt1.c0))))) ORDER BY CAST(x'7e' AS NUMERIC), ((((((CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN v0.c2 ELSE 0.3267884668330462 END)AND(CASE WHEN v0.c0 THEN v0.c1 END)))OR(load_extension(vt1.c1))))AND(CASE v0.c2  WHEN v0.c2 THEN v0.c2 ELSE vt1.c0 END)) DESC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((NOT ((v0.c2 IN (vt1.c0))))) ORDER BY CAST(v0.c1 AS BLOB)  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((v0.c0)*(v0.c1)))-(json_insert(vt1.c0, vt1.c0, v0.c0)))) ORDER BY CAST(v0.c1 AS BLOB)  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE ((((v0.c0) NOT NULL) IN (CASE v0.c2  WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END))) ORDER BY ((((v0.c1) IS TRUE))LIKE(v0.c0));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((v0.c0) NOT NULL) IN (CASE v0.c2  WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END))) ORDER BY CASE ((v0.c2) IS TRUE)  WHEN ((v0.c1) BETWEEN (v0.c2) AND (v0.c2)) THEN (((v0.c2, v0.c0, 'FxGTo', v0.c1, v0.c2))<>((v0.c0, v0.c0, v0.c0, v0.c2, v0.c2))) WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (NULL)) THEN v0.c1 WHEN (~ (v0.c2)) THEN (((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))) WHEN ((v0.c2) BETWEEN (v0.c1) AND (v0.c2)) THEN (~ (v0.c1)) WHEN (((v0.c2, v0.c1, v0.c2, v0.c0)) BETWEEN ((v0.c1, v0.c0, v0.c1, v0.c0)) AND ((v0.c0, NULL, v0.c2, v0.c2))) THEN json_array_length(v0.c2) END DESC, (((-7.57902307E8, v0.c2)) NOT BETWEEN (((((v0.c2))<=((v0.c1))), HEX(v0.c2))) AND ((CAST(v0.c2 AS BLOB), (((v0.c0, v0.c2, v0.c1))==((v0.c1, v0.c2, v0.c2)))))) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((((v0.c1)AND(v0.c0)))AND(v0.c1))) BETWEEN (((((0.8743635802303172)OR(NULL)))OR(v0.c0))) AND (((v0.c1)&(v0.c2))))) ORDER BY CASE ((v0.c2) IS TRUE)  WHEN ((v0.c1) BETWEEN (v0.c2) AND (v0.c2)) THEN (((v0.c2, v0.c0, 'FxGTo', v0.c1, v0.c2))<>((v0.c0, v0.c0, v0.c0, v0.c2, v0.c2))) WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (NULL)) THEN v0.c1 WHEN (~ (v0.c2)) THEN (((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))) WHEN ((v0.c2) BETWEEN (v0.c1) AND (v0.c2)) THEN (~ (v0.c1)) WHEN (((v0.c2, v0.c1, v0.c2, v0.c0)) BETWEEN ((v0.c1, v0.c0, v0.c1, v0.c0)) AND ((v0.c0, NULL, v0.c2, v0.c2))) THEN json_array_length(v0.c2) END DESC, (((-7.57902307E8, v0.c2)) NOT BETWEEN (((((v0.c2))<=((v0.c1))), HEX(v0.c2))) AND ((CAST(v0.c2 AS BLOB), (((v0.c0, v0.c2, v0.c1))==((v0.c1, v0.c2, v0.c2)))))) DESC;
SELECT ALL * FROM v0, vt1 WHERE (NULL) ORDER BY CASE NULL  WHEN ((((vt1.c0)AND(v0.c1)))AND(NULL)) THEN IFNULL(DISTINCT v0.c2, vt1.c1) WHEN CHANGES() THEN CAST(v0.c1 AS BLOB) WHEN CASE WHEN 0.6453791146697876 THEN v0.c1 WHEN v0.c1 THEN '-392379907' END THEN v0.c1 COLLATE BINARY WHEN ((((v0.c0)AND(x'c261')))AND(v0.c0)) THEN ((v0.c1)%(v0.c0)) END ASC;
SELECT DISTINCT * FROM v0, vt1 WHERE (NULL) ORDER BY CASE NULL  WHEN ((((vt1.c0)AND(v0.c1)))AND(NULL)) THEN IFNULL(DISTINCT v0.c2, vt1.c1) WHEN CHANGES() THEN CAST(v0.c1 AS BLOB) WHEN CASE WHEN 0.6453791146697876 THEN v0.c1 WHEN v0.c1 THEN '-392379907' END THEN v0.c1 COLLATE BINARY WHEN ((((v0.c0)AND(x'c261')))AND(v0.c0)) THEN ((v0.c1)%(v0.c0)) END ASC INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((((((v0.c2))<((vt1.c0))))AND(((x'60f5')>>(NULL)))))OR(((v0.c0)>(0Xffffffffb36c06f5)))))AND(((v0.c2) IS FALSE))))AND(v0.c1 COLLATE NOCASE))) ORDER BY CASE NULL  WHEN ((((vt1.c0)AND(v0.c1)))AND(NULL)) THEN IFNULL(DISTINCT v0.c2, vt1.c1) WHEN CHANGES() THEN CAST(v0.c1 AS BLOB) WHEN CASE WHEN 0.6453791146697876 THEN v0.c1 WHEN v0.c1 THEN '-392379907' END THEN v0.c1 COLLATE BINARY WHEN ((((v0.c0)AND(x'c261')))AND(v0.c0)) THEN ((v0.c1)%(v0.c0)) END ASC;
SELECT ALL * FROM v0, vt1 WHERE (NULL) ORDER BY CASE NULL  WHEN ((((vt1.c0)AND(v0.c1)))AND(NULL)) THEN IFNULL(DISTINCT v0.c2, vt1.c1) WHEN CHANGES() THEN CAST(v0.c1 AS BLOB) WHEN CASE WHEN 0.6453791146697876 THEN v0.c1 WHEN v0.c1 THEN '-392379907' END THEN v0.c1 COLLATE BINARY WHEN ((((v0.c0)AND(x'c261')))AND(v0.c0)) THEN ((v0.c1)%(v0.c0)) END ASC;
SELECT DISTINCT * FROM v0, vt1 WHERE (NULL) ORDER BY CASE NULL  WHEN ((((vt1.c0)AND(v0.c1)))AND(NULL)) THEN IFNULL(DISTINCT v0.c2, vt1.c1) WHEN CHANGES() THEN CAST(v0.c1 AS BLOB) WHEN CASE WHEN 0.6453791146697876 THEN v0.c1 WHEN v0.c1 THEN '-392379907' END THEN v0.c1 COLLATE BINARY WHEN ((((v0.c0)AND(x'c261')))AND(v0.c0)) THEN ((v0.c1)%(v0.c0)) END ASC INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((((((v0.c2))<((vt1.c0))))AND(((x'60f5')>>(NULL)))))OR(((v0.c0)>(0Xffffffffb36c06f5)))))AND(((v0.c2) IS FALSE))))AND(v0.c1 COLLATE NOCASE))) ORDER BY CASE NULL  WHEN ((((vt1.c0)AND(v0.c1)))AND(NULL)) THEN IFNULL(DISTINCT v0.c2, vt1.c1) WHEN CHANGES() THEN CAST(v0.c1 AS BLOB) WHEN CASE WHEN 0.6453791146697876 THEN v0.c1 WHEN v0.c1 THEN '-392379907' END THEN v0.c1 COLLATE BINARY WHEN ((((v0.c0)AND(x'c261')))AND(v0.c0)) THEN ((v0.c1)%(v0.c0)) END ASC;
SELECT * FROM vt1 WHERE (((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))GLOB((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c0)))))) ORDER BY UPPER(DISTINCT (x'' IN ())), ((-1358152625) ISNULL) COLLATE RTRIM DESC  NULLS LAST, vt1.c1  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))GLOB((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c0)))))) ORDER BY 0Xffffffffe240c26e, (((- (vt1.c1)))/(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)) DESC LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE (TRIM(DISTINCT (- (vt1.c1)))) ORDER BY 0Xffffffffe240c26e, (((- (vt1.c1)))/(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)) DESC LIMIT 0;
SELECT * FROM vt1 WHERE (((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))GLOB((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c0)))))) ORDER BY UPPER(DISTINCT (x'' IN ())), ((-1358152625) ISNULL) COLLATE RTRIM DESC  NULLS LAST, vt1.c1  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))GLOB((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c0)))))) ORDER BY 0Xffffffffe240c26e, (((- (vt1.c1)))/(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)) DESC LIMIT 0X0 INTERSECT SELECT ALL * FROM vt1 WHERE (TRIM(DISTINCT (- (vt1.c1)))) ORDER BY 0Xffffffffe240c26e, (((- (vt1.c1)))/(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)) DESC LIMIT 0;
SELECT ALL MAX(vt1.c1) FROM v0, vt1 WHERE (((v0.c1 COLLATE BINARY)/(CASE v0.c0  WHEN vt1.c1 THEN v0.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c1 END))) ORDER BY ((((v0.c2) BETWEEN (vt1.c0) AND (v0.c1))) NOTNULL) ASC  NULLS FIRST, CAST(TRIM(DISTINCT v0.c1) AS INTEGER)  NULLS LAST;
SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (((((v0.c1 COLLATE BINARY)/(CASE v0.c0  WHEN vt1.c1 THEN v0.c0 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c1 END)))AND((((((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c2))))>((((0Xffffffffed817f0b) IS FALSE))))))) ORDER BY ((((v0.c1)|(v0.c2))) IS FALSE) ASC  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1, v0 WHERE (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END COLLATE NOCASE COLLATE NOCASE) ORDER BY ((((((((((vt1.c1)OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))OR(vt1.c1))) BETWEEN (((((((((-1628510110)OR(v0.c1)))OR(vt1.c1)))OR(v0.c2)))OR(vt1.c1))) AND (CAST(vt1.c1 AS BLOB))) ASC, (((0.5718771436063474)+(v0.c2)) IN ((- (vt1.c0))))  NULLS FIRST, (NOT (((v0.c1) NOT BETWEEN (vt1.c0) AND (v0.c1)))) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1, v0 WHERE (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END COLLATE NOCASE COLLATE NOCASE) ORDER BY HEX(('879071055' IN (vt1.c1))) ASC LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1, v0 WHERE ((((v0.c0) IS FALSE) IN (v0.c2, ((((((v0.c1)OR('425655409')))OR(vt1.c1)))AND(v0.c0)), ((v0.c2) NOT NULL)))) ORDER BY HEX(('879071055' IN (vt1.c1))) ASC LIMIT 1;
SELECT MAX(vt1.c0) FROM vt1, v0 WHERE (CAST((v0.c0 IN ()) AS TEXT)) ORDER BY 0.020996891538564766;
SELECT DISTINCT MAX(vt1.c0) FROM vt1, v0 WHERE (((CAST((v0.c0 IN ()) AS TEXT))AND(((((((v0.c0) BETWEEN (vt1.c0) AND (v0.c1)))AND(((v0.c1) BETWEEN (v0.c1) AND (vt1.c1)))))OR(TYPEOF(v0.c2)))))) ORDER BY 0.020996891538564766;
SELECT ALL * FROM vt1, v0 WHERE (LIKELIHOOD(((v0.c0)IS NOT(v0.c2)), (vt1.c1 IN (v0.c1))));
SELECT DISTINCT * FROM vt1, v0 WHERE (LIKELIHOOD(((v0.c0)IS NOT(v0.c2)), (vt1.c1 IN (v0.c1)))) ORDER BY (((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((v0.c0)))) IS TRUE) ASC  NULLS LAST, (((CASE WHEN v0.c0 THEN v0.c1 WHEN '907990540' THEN vt1.c0 WHEN vt1.c1 THEN v0.c0 END))!=((CAST(v0.c0 AS INTEGER)))) DESC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1, v0 WHERE (LIKELIHOOD(((v0.c0)IS NOT(v0.c2)), (vt1.c1 IN (v0.c1))));
SELECT COUNT(*) FROM v0 WHERE ((NOT ((v0.c2 IN (v0.c2, v0.c2, v0.c2))))) ORDER BY (((v0.c2 IN (v0.c2)))|(((v0.c2)&(v0.c0)))) ASC;
SELECT COUNT(*) FROM v0 WHERE ((((NOT ((v0.c2 IN (v0.c2, v0.c2, v0.c2)))))AND(CAST((+ (v0.c1)) AS NUMERIC)))) ORDER BY (((v0.c2) IS TRUE) IN (v0.c0 COLLATE BINARY, ((((((NULL)AND(v0.c1)))OR(NULL)))AND(0.6923891648279449)), ((v0.c1) IS FALSE)))  NULLS LAST, (~ (UPPER(v0.c1))) DESC LIMIT 1;
SELECT * FROM vt1 WHERE (((json_patch(vt1.c0, vt1.c1))!=((vt1.c0 IN (vt1.c0))))) ORDER BY CAST(((vt1.c1)<=(vt1.c1)) AS INTEGER) ASC, (((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END, NULL))>=((((vt1.c1)*(vt1.c1)), ((vt1.c1)*(vt1.c0))))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((json_patch(vt1.c0, vt1.c1))<((vt1.c0 IN (vt1.c0))))) ORDER BY CAST(((((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) AS NUMERIC) DESC, ((vt1.c1)!=(vt1.c0)) COLLATE NOCASE LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c1)LIKE(vt1.c0))) BETWEEN ('-5674097') AND ((NOT (vt1.c0))))) ORDER BY CAST(((((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)) AS NUMERIC) DESC, ((vt1.c1)!=(vt1.c0)) COLLATE NOCASE LIMIT 0X1;
SELECT * FROM vt1 WHERE (((json_patch(vt1.c0, vt1.c1))!=((vt1.c0 IN (vt1.c0))))) ORDER BY CAST(((vt1.c1)<=(vt1.c1)) AS INTEGER) ASC, (((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END, NULL))>=((((vt1.c1)*(vt1.c1)), ((vt1.c1)*(vt1.c0))))) ASC  NULLS FIRST;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END COLLATE NOCASE);
SELECT ALL MIN(v0.c1) FROM v0 WHERE (CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END COLLATE NOCASE) ORDER BY DATE(CASE v0.c0  WHEN '.m' THEN v0.c1 END, v0.c1 COLLATE RTRIM, CAST(v0.c0 AS TEXT), ((v0.c1)=(v0.c2))), ((((((v0.c1)OR(v0.c2)))OR(v0.c2))) BETWEEN (((((v0.c2)OR(v0.c1)))AND(-1681891871))) AND (v0.c1)) DESC  NULLS FIRST INTERSECT SELECT MIN(v0.c1) FROM v0 WHERE (((((v0.c2)/(v0.c0))) NOT NULL)) ORDER BY DATE(CASE v0.c0  WHEN '.m' THEN v0.c1 END, v0.c1 COLLATE RTRIM, CAST(v0.c0 AS TEXT), ((v0.c1)=(v0.c2))), ((((((v0.c1)OR(v0.c2)))OR(v0.c2))) BETWEEN (((((v0.c2)OR(v0.c1)))AND(0Xffffffff9bc05de1))) AND (v0.c1)) DESC  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE (NULLIF(DISTINCT CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN 0.6947614946911704 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END, (~ (v0.c0)))) ORDER BY ((json_valid(v0.c0)) BETWEEN ((- (v0.c1))) AND (v0.c2)) ASC  NULLS LAST, (v0.c0 COLLATE RTRIM IN ()) DESC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((NULLIF(DISTINCT CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN 0.6947614946911704 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END, (~ (v0.c0))))AND((json_array_length(v0.c2) IN (((v0.c1) IS TRUE), ((v0.c1) NOTNULL)))))) ORDER BY v0.c1, v0.c1 ASC  NULLS LAST, (('724715347')||(0x1449234)), ((v0.c1 COLLATE RTRIM) BETWEEN (v0.c2 COLLATE BINARY) AND (v0.c0 COLLATE NOCASE)) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (CAST(CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN NULL THEN v0.c2 ELSE v0.c0 END AS BLOB)) ORDER BY v0.c1, v0.c1 ASC  NULLS LAST, (('724715347')||(0x1449234)), ((v0.c1 COLLATE RTRIM) BETWEEN (v0.c2 COLLATE BINARY) AND (v0.c0 COLLATE NOCASE)) DESC;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c0) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (v0.c1) LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c0) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (v0.c1) LIMIT 0;
SELECT MIN(v0.c1) FROM v0 WHERE (CHANGES() COLLATE BINARY);
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (CHANGES() COLLATE BINARY) LIMIT 0;
SELECT * FROM vt1 WHERE ((+ (''))) ORDER BY NULL COLLATE RTRIM, (((((vt1.c0)) NOT BETWEEN ((-1791157238)) AND ((vt1.c0))))<(((vt1.c0)&(vt1.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((+ (''))) ORDER BY HEX('0.2807140998460379') COLLATE NOCASE DESC  NULLS FIRST, vt1.c0 LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL) ORDER BY HEX('0.2807140998460379') COLLATE NOCASE DESC  NULLS FIRST, vt1.c0 LIMIT 0X0;
SELECT * FROM vt1 WHERE ((+ (''))) ORDER BY NULL COLLATE RTRIM, (((((vt1.c0)) NOT BETWEEN ((-1791157238)) AND ((vt1.c0))))<(((vt1.c0)&(vt1.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((+ (''))) ORDER BY HEX('0.2807140998460379') COLLATE NOCASE DESC  NULLS FIRST, vt1.c0 LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL) ORDER BY HEX('0.2807140998460379') COLLATE NOCASE DESC  NULLS FIRST, vt1.c0 LIMIT 0X0;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((vt1.c0) BETWEEN (v0.c1) AND (NULL)) COLLATE NOCASE);
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((((vt1.c0) BETWEEN (v0.c1) AND (NULL)) COLLATE NOCASE)AND(CASE ((((((((((v0.c2)AND(vt1.c1)))OR(v0.c2)))AND(NULL)))AND(vt1.c0)))AND(0Xffffffffaea509ca))  WHEN ((v0.c2)GLOB(v0.c1)) THEN v0.c1 END))) ORDER BY (v0.c1 IN (v0.c0, v0.c0)) COLLATE NOCASE, v0.c1 DESC LIMIT 0X4 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((((((v0.c1)OR(v0.c1)))OR(v0.c0))) NOT BETWEEN (CAST(vt1.c0 AS NUMERIC)) AND (((((((v0.c1)AND(vt1.c1)))OR(vt1.c1)))OR(v0.c2))))) ORDER BY (v0.c1 IN (v0.c0, v0.c0)) COLLATE NOCASE, v0.c1 DESC LIMIT 0x4;
SELECT COUNT(*) FROM vt1, v0 WHERE ((CASE vt1.c0  WHEN vt1.c1 THEN 'a' WHEN v0.c2 THEN x'00' WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END IN ())) ORDER BY (((((v0.c2, vt1.c0)) BETWEEN ((vt1.c0, v0.c2)) AND ((vt1.c1, v0.c0))))OR(rtreenode(vt1.c0, vt1.c0))) ASC, json_extract(v0.c0 COLLATE NOCASE, ((v0.c0) NOT NULL)) ASC  NULLS LAST, '-1194173188'  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((CASE vt1.c0  WHEN vt1.c1 THEN 'a' WHEN v0.c2 THEN x'00' WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END IN ())) ORDER BY (NOT (LTRIM(v0.c0, vt1.c0)))  NULLS LAST, (((((vt1.c0, vt1.c0, v0.c2))<>((vt1.c1, v0.c0, v0.c0)))) IS FALSE)  NULLS FIRST, v0.c1 LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((((((((((((((((((((v0.c2)AND(v0.c0)))AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))OR(v0.c0)))OR((((v0.c1, v0.c0, v0.c1)) BETWEEN ((v0.c0, v0.c1, x'25')) AND ((v0.c0, vt1.c1, x'2ca8a7dc'))))))AND(CAST(vt1.c0 AS INTEGER))))AND(IFNULL(0.6151647542932324, vt1.c1))))OR((vt1.c0 IN (v0.c1)))))AND('Bး+!H'))) ORDER BY (NOT (LTRIM(v0.c0, vt1.c0)))  NULLS LAST, (((((vt1.c0, vt1.c0, v0.c2))!=((vt1.c1, v0.c0, v0.c0)))) IS FALSE)  NULLS FIRST, v0.c1 LIMIT 0X0;
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((((x'58')) NOT BETWEEN (((v0.c1 IN ()))) AND ((((((((v0.c2)AND(v0.c2)))AND(v0.c0)))AND(v0.c1))))));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ((((x'58')) NOT BETWEEN (((v0.c1 IN ()))) AND ((((((((v0.c2)AND(v0.c2)))AND(v0.c0)))AND(v0.c1)))))) INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((v0.c0)||(v0.c2)))<<(((((((((v0.c0)AND(v0.c2)))AND(v0.c1)))AND(v0.c1)))AND(v0.c0)))));
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c0) BETWEEN (-640489221) AND (vt1.c1))) ISNULL)) ORDER BY CASE WHEN ((vt1.c0)AND(v0.c0)) THEN CAST('-574356959' AS NUMERIC) END ASC  NULLS LAST, (CASE WHEN x'6b' THEN vt1.c0 WHEN v0.c2 THEN v0.c0 END IN (((vt1.c1)<>(v0.c2)), (- (vt1.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((((((v0.c0) BETWEEN (-640489221) AND (vt1.c1))) ISNULL))AND(1.458110164E9))) ORDER BY ABS(DISTINCT CASE vt1.c0  WHEN vt1.c1 THEN -1487502821 WHEN v0.c2 THEN v0.c1 ELSE vt1.c1 END)  NULLS FIRST INTERSECT SELECT ALL * FROM v0 NOT INDEXED NATURAL JOIN vt1 WHERE (((((vt1.c1)*(0.07193301357304671)))/(CASE WHEN '0	#xsz''ビ' THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 END))) ORDER BY ABS(DISTINCT CASE vt1.c0  WHEN vt1.c1 THEN 0xffffffffa756821b WHEN v0.c2 THEN v0.c1 ELSE vt1.c1 END)  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c0) BETWEEN (-640489221) AND (vt1.c1))) ISNULL)) ORDER BY CASE WHEN ((vt1.c0)AND(v0.c0)) THEN CAST('-574356959' AS NUMERIC) END ASC  NULLS LAST, (CASE WHEN x'6b' THEN vt1.c0 WHEN v0.c2 THEN v0.c0 END IN (((vt1.c1)<>(v0.c2)), (- (vt1.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((((((v0.c0) BETWEEN (-640489221) AND (vt1.c1))) ISNULL))AND(1.458110164E9))) ORDER BY ABS(DISTINCT CASE vt1.c0  WHEN vt1.c1 THEN -1487502821 WHEN v0.c2 THEN v0.c1 ELSE vt1.c1 END)  NULLS FIRST INTERSECT SELECT ALL * FROM v0 NOT INDEXED NATURAL JOIN vt1 WHERE (((((vt1.c1)*(0.07193301357304671)))/(CASE WHEN '0	#xsz''ビ' THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 END))) ORDER BY ABS(DISTINCT CASE vt1.c0  WHEN vt1.c1 THEN 0xffffffffa756821b WHEN v0.c2 THEN v0.c1 ELSE vt1.c1 END)  NULLS FIRST;
SELECT * FROM v0 WHERE (CAST(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN -652094336 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN NULL THEN v0.c0 ELSE v0.c0 END AS BLOB)) ORDER BY ((((v0.c1)GLOB(v0.c1))) IS FALSE) ASC  NULLS FIRST, (((v0.c0) ISNULL) IN (-593590767, ((v0.c2)IS NOT(v0.c1)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (CAST(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN -652094336 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN NULL THEN v0.c0 ELSE v0.c0 END AS BLOB)) ORDER BY ((((v0.c1)GLOB(v0.c1))) IS FALSE) ASC  NULLS FIRST, (((v0.c0) ISNULL) IN (0Xffffffffdc9e8611, ((v0.c2)IS NOT(v0.c1)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE ('-1043811462') ORDER BY ((((v0.c1)GLOB(v0.c1))) IS FALSE) ASC  NULLS FIRST, (((v0.c0) ISNULL) IN (-593590767, ((v0.c2)IS NOT(v0.c1)))) DESC  NULLS LAST;
SELECT * FROM v0 WHERE (CAST(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN -652094336 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN NULL THEN v0.c0 ELSE v0.c0 END AS BLOB)) ORDER BY ((((v0.c1)GLOB(v0.c1))) IS FALSE) ASC  NULLS FIRST, (((v0.c0) ISNULL) IN (-593590767, ((v0.c2)IS NOT(v0.c1)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (CAST(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN -652094336 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN NULL THEN v0.c0 ELSE v0.c0 END AS BLOB)) ORDER BY ((((v0.c1)GLOB(v0.c1))) IS FALSE) ASC  NULLS FIRST, (((v0.c0) ISNULL) IN (0Xffffffffdc9e8611, ((v0.c2)IS NOT(v0.c1)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE ('-1043811462') ORDER BY ((((v0.c1)GLOB(v0.c1))) IS FALSE) ASC  NULLS FIRST, (((v0.c0) ISNULL) IN (-593590767, ((v0.c2)IS NOT(v0.c1)))) DESC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((((((((CASE WHEN v0.c2 THEN vt1.c0 END)OR(CAST(v0.c0 AS TEXT))))AND(((vt1.c1) BETWEEN (v0.c0) AND (vt1.c0)))))OR(((v0.c0) NOT NULL))))OR(((x'') NOTNULL)))) ORDER BY CAST(LENGTH(v0.c0) AS NUMERIC) ASC;
SELECT ALL * FROM v0, vt1 WHERE (((((((((((CASE WHEN v0.c2 THEN vt1.c0 END)OR(CAST(v0.c0 AS TEXT))))AND(((vt1.c1) BETWEEN (v0.c0) AND (vt1.c0)))))OR(((v0.c0) NOT NULL))))OR(((x'') NOTNULL))))AND(((v0.c1) BETWEEN (v0.c1) AND (NULL)) COLLATE BINARY))) ORDER BY (((((v0.c0 IN (x'', v0.c1)))AND(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))))AND(v0.c2 COLLATE BINARY))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT * FROM v0, vt1 WHERE (CASE v0.c2 COLLATE NOCASE  WHEN ((vt1.c0) BETWEEN (v0.c2) AND (vt1.c1)) THEN ((((vt1.c1)AND(vt1.c1)))OR(v0.c0)) ELSE CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END END) ORDER BY (((((v0.c0 IN (x'', v0.c1)))AND(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))))AND(v0.c2 COLLATE BINARY))  NULLS FIRST LIMIT 1;
SELECT * FROM v0, vt1 WHERE (((((((((CASE WHEN v0.c2 THEN vt1.c0 END)OR(CAST(v0.c0 AS TEXT))))AND(((vt1.c1) BETWEEN (v0.c0) AND (vt1.c0)))))OR(((v0.c0) NOT NULL))))OR(((x'') NOTNULL)))) ORDER BY CAST(LENGTH(v0.c0) AS NUMERIC) ASC;
SELECT ALL * FROM v0, vt1 WHERE (((((((((((CASE WHEN v0.c2 THEN vt1.c0 END)OR(CAST(v0.c0 AS TEXT))))AND(((vt1.c1) BETWEEN (v0.c0) AND (vt1.c0)))))OR(((v0.c0) NOT NULL))))OR(((x'') NOTNULL))))AND(((v0.c1) BETWEEN (v0.c1) AND (NULL)) COLLATE BINARY))) ORDER BY (((((v0.c0 IN (x'', v0.c1)))AND(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))))AND(v0.c2 COLLATE BINARY))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT * FROM v0, vt1 WHERE (CASE v0.c2 COLLATE NOCASE  WHEN ((vt1.c0) BETWEEN (v0.c2) AND (vt1.c1)) THEN ((((vt1.c1)AND(vt1.c1)))OR(v0.c0)) ELSE CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 ELSE v0.c0 END END) ORDER BY (((((v0.c0 IN (x'', v0.c1)))AND(((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)))))AND(v0.c2 COLLATE BINARY))  NULLS FIRST LIMIT 1;
SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT DISTINCT * FROM vt1, v0 WHERE (((vt1.c1)AND(vt1.c0)));
SELECT * FROM vt1, v0 WHERE (vt1.c1);
SELECT DISTINCT * FROM vt1, v0 WHERE (((vt1.c1)AND(vt1.c0)));
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((((~ (vt1.c1)), ((vt1.c1)<=(vt1.c1)), (vt1.c1 IN (vt1.c1)), ((((((vt1.c1)AND(vt1.c1)))OR(0x6026c47f)))OR(vt1.c1))))=((NULL COLLATE BINARY, (+ (vt1.c1)), vt1.c1 COLLATE NOCASE, DATETIME(vt1.c0, vt1.c0, vt1.c1))))) ORDER BY IFNULL((vt1.c1 IN (vt1.c0)), vt1.c0) DESC  NULLS FIRST, ((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))-(((((vt1.c1)AND(vt1.c0)))AND(vt1.c0))));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((((((~ (vt1.c1)), ((vt1.c1)<=(vt1.c1)), (vt1.c1 IN (vt1.c1)), ((((((vt1.c1)AND(vt1.c1)))OR(0x6026c47f)))OR(vt1.c1))))==((NULL COLLATE BINARY, (+ (vt1.c1)), vt1.c1 COLLATE NOCASE, DATETIME(vt1.c0, vt1.c0, vt1.c1)))))AND(((CAST(vt1.c0 AS INTEGER))|(((vt1.c0) IS TRUE)))))) ORDER BY 0.834673916852926 LIMIT 0x1 INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((vt1.c1) NOTNULL) COLLATE RTRIM) ORDER BY 0.834673916852926 LIMIT 0X1;
SELECT MIN(vt1.c0) FROM vt1 WHERE (CAST(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) AS INTEGER));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CAST(((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) AS INTEGER)) LIMIT 0x3;
SELECT * FROM v0 WHERE ((((v0.c1, v0.c0, v0.c1)) BETWEEN ((IFNULL(v0.c1, v0.c1), CAST(v0.c2 AS NUMERIC), 0Xffffffff9eeee862)) AND ((((v0.c0) NOTNULL), CASE WHEN NULL THEN v0.c2 ELSE v0.c0 END, (~ (v0.c1)))))) ORDER BY (+ ((+ (v0.c1))))  NULLS FIRST, (((((('1911690937')OR((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))))))OR(CAST(v0.c2 AS BLOB))))OR(x'ad30')) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS REAL) AS INTEGER)  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1, v0.c0, v0.c1)) BETWEEN ((IFNULL(v0.c1, v0.c1), CAST(v0.c2 AS NUMERIC), 0Xffffffff9eeee862)) AND ((((v0.c0) NOTNULL), CASE WHEN NULL THEN v0.c2 ELSE v0.c0 END, (~ (v0.c1))))))AND(v0.c2))) ORDER BY (+ ((+ (v0.c1))))  NULLS FIRST, (((((('1911690937')OR((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))))))OR(CAST(v0.c2 AS BLOB))))OR(x'ad30')) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS REAL) AS INTEGER)  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((((v0.c1)OR(v0.c2)))OR(v0.c0))))>((v0.c2 COLLATE BINARY)))) ORDER BY (+ ((+ (v0.c1))))  NULLS FIRST, (((((('1911690937')OR((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))))))OR(CAST(v0.c2 AS BLOB))))OR(x'ad30')) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS REAL) AS INTEGER)  NULLS FIRST LIMIT 0X1;
SELECT * FROM v0 WHERE ((((v0.c1, v0.c0, v0.c1)) BETWEEN ((IFNULL(v0.c1, v0.c1), CAST(v0.c2 AS NUMERIC), 0Xffffffff9eeee862)) AND ((((v0.c0) NOTNULL), CASE WHEN NULL THEN v0.c2 ELSE v0.c0 END, (~ (v0.c1)))))) ORDER BY (+ ((+ (v0.c1))))  NULLS FIRST, (((((('1911690937')OR((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))))))OR(CAST(v0.c2 AS BLOB))))OR(x'ad30')) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS REAL) AS INTEGER)  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1, v0.c0, v0.c1)) BETWEEN ((IFNULL(v0.c1, v0.c1), CAST(v0.c2 AS NUMERIC), 0Xffffffff9eeee862)) AND ((((v0.c0) NOTNULL), CASE WHEN NULL THEN v0.c2 ELSE v0.c0 END, (~ (v0.c1))))))AND(v0.c2))) ORDER BY (+ ((+ (v0.c1))))  NULLS FIRST, (((((('1911690937')OR((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))))))OR(CAST(v0.c2 AS BLOB))))OR(x'ad30')) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS REAL) AS INTEGER)  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((((v0.c1)OR(v0.c2)))OR(v0.c0))))>((v0.c2 COLLATE BINARY)))) ORDER BY (+ ((+ (v0.c1))))  NULLS FIRST, (((((('1911690937')OR((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))))))OR(CAST(v0.c2 AS BLOB))))OR(x'ad30')) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS REAL) AS INTEGER)  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt1 WHERE ((- (((vt1.c0)<>(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((- (((vt1.c0)<(vt1.c0)))))AND(vt1.c1))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((((((TRIM(DISTINCT vt1.c1))AND(((vt1.c0)%(vt1.c1)))))OR((((vt1.c1, vt1.c1, '', vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, NULL, vt1.c0, vt1.c0, 'vd[q+')) AND ((vt1.c1, vt1.c1, vt1.c1, vt1.c0, vt1.c1))))))OR('0.42119120460291926')))OR(TYPEOF(DISTINCT vt1.c0))))AND(((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)))))OR(vt1.c0 COLLATE BINARY)));
SELECT * FROM vt1 WHERE ((- (((vt1.c0)<>(vt1.c0)))));
SELECT DISTINCT * FROM vt1 WHERE ((((- (((vt1.c0)<(vt1.c0)))))AND(vt1.c1))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((((((((((TRIM(DISTINCT vt1.c1))AND(((vt1.c0)%(vt1.c1)))))OR((((vt1.c1, vt1.c1, '', vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, NULL, vt1.c0, vt1.c0, 'vd[q+')) AND ((vt1.c1, vt1.c1, vt1.c1, vt1.c0, vt1.c1))))))OR('0.42119120460291926')))OR(TYPEOF(DISTINCT vt1.c0))))AND(((((vt1.c1)OR(vt1.c0)))OR(vt1.c0)))))OR(vt1.c0 COLLATE BINARY)));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((0.4368450323354851) IS FALSE)) ORDER BY ((((vt1.c1, vt1.c1))>=((vt1.c1, vt1.c0))) IN ()) ASC  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((0.4368450323354851) IS FALSE)) ORDER BY ((((vt1.c1) IS TRUE))IS(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END)) LIMIT 2;
SELECT COUNT(*) FROM v0 WHERE (((((((v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c2)))))>=((CASE WHEN v0.c0 THEN v0.c1 END))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((((((v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c2)))))>=((CASE WHEN v0.c0 THEN v0.c1 END))))AND((((((v0.c1)) NOT BETWEEN ((v0.c1)) AND (('4'))))<((((v0.c0, v0.c1))>=(('Isw(W', v0.c2)))))))) ORDER BY v0.c1  NULLS LAST, (((('1148994335') BETWEEN (v0.c0) AND (x''))) NOT BETWEEN (((v0.c0)-(NULL))) AND ((~ (0.6735710501648677)))) INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c1 COLLATE NOCASE) BETWEEN ((v0.c1 IN (v0.c2))) AND (UPPER(v0.c2)))) ORDER BY v0.c1  NULLS LAST, (((('1148994335') BETWEEN (v0.c0) AND (x''))) NOT BETWEEN (((v0.c0)-(NULL))) AND ((~ (0.6735710501648677))));
SELECT ALL * FROM vt1, v0 WHERE ('Vg[');
SELECT DISTINCT * FROM vt1, v0 WHERE ((('Vg[')AND((((vt1.c1)<>(v0.c0)) IN (((vt1.c1)%(v0.c2)), ((v0.c2)||(v0.c1))))))) ORDER BY (((LOWER(DISTINCT vt1.c1)))<>((0.3572277102471041 COLLATE RTRIM))) ASC, LIKELIHOOD(DISTINCT CASE v0.c2  WHEN 'e+꿳y<콬F' THEN vt1.c0 ELSE v0.c0 END, CASE WHEN 0x113b559e THEN v0.c2 WHEN v0.c1 THEN v0.c1 END)  NULLS LAST, 0.7718124813855598;
SELECT ALL * FROM vt1, v0 WHERE ('Vg[');
SELECT DISTINCT * FROM vt1, v0 WHERE ((('Vg[')AND((((vt1.c1)<>(v0.c0)) IN (((vt1.c1)%(v0.c2)), ((v0.c2)||(v0.c1))))))) ORDER BY (((LOWER(DISTINCT vt1.c1)))<>((0.3572277102471041 COLLATE RTRIM))) ASC, LIKELIHOOD(DISTINCT CASE v0.c2  WHEN 'e+꿳y<콬F' THEN vt1.c0 ELSE v0.c0 END, CASE WHEN 0x113b559e THEN v0.c2 WHEN v0.c1 THEN v0.c1 END)  NULLS LAST, 0.7718124813855598;
SELECT * FROM v0 WHERE (((((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)))OR(CAST(v0.c1 AS NUMERIC))))OR(IFNULL(v0.c1, v0.c2))));
SELECT * FROM v0 WHERE (((((((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)))OR(CAST(v0.c1 AS NUMERIC))))OR(IFNULL(v0.c1, v0.c2))))AND((json_array_length(NULL) IN ((+ (v0.c1))))))) ORDER BY ((((v0.c2)=(v0.c2))) BETWEEN (MIN(v0.c2, v0.c2, v0.c1)) AND (json_extract(v0.c1, v0.c0, v0.c1, '-1113151144'))), CASE NULL  WHEN CASE WHEN v0.c2 THEN v0.c0 END THEN ((v0.c1)/(v0.c0)) END DESC  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM v0 WHERE (((v0.c2)<>(v0.c1)) COLLATE NOCASE) ORDER BY ((((v0.c2)=(v0.c2))) BETWEEN (MIN(v0.c2, v0.c2, v0.c1)) AND (json_extract(v0.c1, v0.c0, v0.c1, '-1113151144'))), CASE NULL  WHEN CASE WHEN v0.c2 THEN v0.c0 END THEN ((v0.c1)/(v0.c0)) END DESC  NULLS LAST LIMIT 1;
SELECT * FROM v0 WHERE (((((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)))OR(CAST(v0.c1 AS NUMERIC))))OR(IFNULL(v0.c1, v0.c2))));
SELECT * FROM v0 WHERE (((((((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)))OR(CAST(v0.c1 AS NUMERIC))))OR(IFNULL(v0.c1, v0.c2))))AND((json_array_length(NULL) IN ((+ (v0.c1))))))) ORDER BY ((((v0.c2)=(v0.c2))) BETWEEN (MIN(v0.c2, v0.c2, v0.c1)) AND (json_extract(v0.c1, v0.c0, v0.c1, '-1113151144'))), CASE NULL  WHEN CASE WHEN v0.c2 THEN v0.c0 END THEN ((v0.c1)/(v0.c0)) END DESC  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM v0 WHERE (((v0.c2)<>(v0.c1)) COLLATE NOCASE) ORDER BY ((((v0.c2)=(v0.c2))) BETWEEN (MIN(v0.c2, v0.c2, v0.c1)) AND (json_extract(v0.c1, v0.c0, v0.c1, '-1113151144'))), CASE NULL  WHEN CASE WHEN v0.c2 THEN v0.c0 END THEN ((v0.c1)/(v0.c0)) END DESC  NULLS LAST LIMIT 1;
SELECT MAX(v0.c0) FROM vt1, v0 WHERE (CAST(CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END AS TEXT));
SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE (((CAST(CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END AS TEXT))AND(CASE ((vt1.c0)<(v0.c1))  WHEN ((v0.c2) NOTNULL) THEN (vt1.c1 IN (v0.c1)) WHEN ((v0.c2)>>(vt1.c1)) THEN (v0.c1 IN (v0.c0, v0.c0)) ELSE ((vt1.c1) NOT BETWEEN (v0.c0) AND (vt1.c1)) END))) LIMIT 0x1;
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) NOT BETWEEN (CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END) AND ((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1))))));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) NOT BETWEEN (CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END) AND ((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1)))))) ORDER BY (~ ((vt1.c1 IN ()))) DESC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((- (SQLITE_COMPILEOPTION_USED(vt1.c1)))) ORDER BY (~ ((vt1.c1 IN ()))) DESC LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) NOT BETWEEN (CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END) AND ((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1))))));
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0 COLLATE RTRIM) NOT BETWEEN (CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END) AND ((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1)))))) ORDER BY (~ ((vt1.c1 IN ()))) DESC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((- (SQLITE_COMPILEOPTION_USED(vt1.c1)))) ORDER BY (~ ((vt1.c1 IN ()))) DESC LIMIT 0X2;
SELECT MAX(vt1.c0) FROM vt1 WHERE (vt1.c1);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (vt1.c1) ORDER BY 0X68e5747d ASC, CAST(NULL AS BLOB) DESC INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (NULL) ORDER BY 0X68e5747d ASC, CAST(NULL AS BLOB) DESC;
SELECT MIN(v0.c2) FROM v0 WHERE ((NOT (CAST(v0.c0 AS INTEGER)))) ORDER BY (((- (v0.c1))) BETWEEN ((((v0.c0, NULL, '615923876', v0.c2))<((v0.c2, v0.c1, v0.c0, v0.c0)))) AND (CAST('^' AS INTEGER))) ASC  NULLS FIRST, CAST(v0.c2 COLLATE RTRIM AS NUMERIC);
SELECT MIN(v0.c2) FROM v0 WHERE ((((NOT (CAST(v0.c0 AS INTEGER))))AND((((v0.c1 IN ())) NOT BETWEEN (((0x62c4511f) NOT BETWEEN (v0.c1) AND (v0.c1))) AND (((((v0.c0)OR(v0.c0)))AND(v0.c1))))))) ORDER BY (((- (v0.c1))) BETWEEN ((((v0.c0, NULL, '615923876', v0.c2))<((v0.c2, v0.c1, v0.c0, v0.c0)))) AND (CAST('^' AS INTEGER))) ASC  NULLS FIRST, CAST(v0.c2 COLLATE RTRIM AS NUMERIC) LIMIT 0x3;
SELECT COUNT(*) FROM v0, vt1 WHERE ((((vt1.c0, v0.c0, v0.c0)) NOT BETWEEN (('0.5908037246653997', ((vt1.c0) BETWEEN (vt1.c1) AND (v0.c1)), vt1.c0)) AND ((TYPEOF(v0.c0), ((v0.c2) NOT NULL), CASE v0.c2  WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c1 ELSE vt1.c0 END)))) ORDER BY CASE ((0.9851340507800965)GLOB(v0.c1))  WHEN (v0.c1 IN ()) THEN ((((vt1.c0)AND(v0.c0)))OR(v0.c0)) WHEN v0.c2 COLLATE BINARY THEN TRIM(v0.c1) WHEN ((0.9077201638645574)+(NULL)) THEN '' ELSE ((vt1.c0) ISNULL) END ASC  NULLS LAST, json_array_length(vt1.c0 COLLATE RTRIM) DESC  NULLS FIRST, NULL DESC;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((((vt1.c0, v0.c0, v0.c0)) NOT BETWEEN (('0.5908037246653997', ((vt1.c0) BETWEEN (vt1.c1) AND (v0.c1)), vt1.c0)) AND ((TYPEOF(v0.c0), ((v0.c2) NOT NULL), CASE v0.c2  WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c1 ELSE vt1.c0 END)))) ORDER BY (((v0.c1, v0.c1, vt1.c0, v0.c0, v0.c0, v0.c1)) NOT BETWEEN ((NULL, (vt1.c0 IN (v0.c0)), (x'' IN ()), '0.021123608619768697' COLLATE NOCASE, ((vt1.c0)>=(vt1.c0)), ((v0.c1)<=(vt1.c0)))) AND ((json_array_length(v0.c1), ((vt1.c1) NOT NULL), (v0.c1 IN (vt1.c1)), (+ (vt1.c1)), ((0.4403812318561343) IS TRUE), vt1.c0 COLLATE BINARY)))  NULLS FIRST, UPPER(DISTINCT ((vt1.c1) ISNULL)), ((((vt1.c0)AND('s-')))>=(((vt1.c1)<(v0.c0))));
SELECT COUNT(*) FROM v0, vt1 WHERE (GLOB(x'', json_quote(v0.c2))) ORDER BY ((((v0.c1) NOT NULL)) NOT BETWEEN ((vt1.c0 IN ())) AND (vt1.c0)) ASC, ((v0.c1 COLLATE BINARY) IS TRUE);
SELECT COUNT(*) FROM v0, vt1 WHERE (((GLOB(x'', json_quote(v0.c2)))AND(((vt1.c1 IN (vt1.c0)) IN ())))) ORDER BY (((((vt1.c1, vt1.c1, v0.c2)) NOT BETWEEN ((v0.c2, vt1.c0, vt1.c1)) AND ((vt1.c0, vt1.c1, v0.c0))))*((~ (vt1.c0))))  NULLS LAST, ((1630845407) IS FALSE) COLLATE BINARY  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((+ (((vt1.c0)IS(vt1.c1))))) ORDER BY (((((vt1.c1, vt1.c1, v0.c2)) NOT BETWEEN ((v0.c2, vt1.c0, vt1.c1)) AND ((vt1.c0, vt1.c1, v0.c0))))*((~ (vt1.c0))))  NULLS LAST, ((0X6134b9df) IS FALSE) COLLATE BINARY  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (CASE CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 END  WHEN ((vt1.c0)IS(vt1.c0)) THEN x'411c' ELSE ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) END) ORDER BY x'', ((((((vt1.c1)GLOB(vt1.c1)))OR(((vt1.c1) IS TRUE))))OR(CAST(vt1.c0 AS NUMERIC))) DESC  NULLS FIRST, SQLITE_COMPILEOPTION_USED((vt1.c0 IN (vt1.c1, vt1.c0))) ASC;
SELECT * FROM vt1 WHERE (((CASE CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 END  WHEN ((vt1.c0)IS(vt1.c0)) THEN x'411c' ELSE ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) END)AND(NULL))) ORDER BY x'', ((((((vt1.c1)GLOB(vt1.c1)))OR(((vt1.c1) IS TRUE))))OR(CAST(vt1.c0 AS NUMERIC))) DESC  NULLS FIRST, SQLITE_COMPILEOPTION_USED((vt1.c0 IN (vt1.c1, vt1.c0))) ASC LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c1) ORDER BY x'', ((((((vt1.c1)GLOB(vt1.c1)))OR(((vt1.c1) IS TRUE))))OR(CAST(vt1.c0 AS NUMERIC))) DESC  NULLS FIRST, SQLITE_COMPILEOPTION_USED((vt1.c0 IN (vt1.c1, vt1.c0))) ASC LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE (CASE CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 END  WHEN ((vt1.c0)IS(vt1.c0)) THEN x'411c' ELSE ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) END) ORDER BY x'', ((((((vt1.c1)GLOB(vt1.c1)))OR(((vt1.c1) IS TRUE))))OR(CAST(vt1.c0 AS NUMERIC))) DESC  NULLS FIRST, SQLITE_COMPILEOPTION_USED((vt1.c0 IN (vt1.c1, vt1.c0))) ASC;
SELECT * FROM vt1 WHERE (((CASE CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 END  WHEN ((vt1.c0)IS(vt1.c0)) THEN x'411c' ELSE ((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)) END)AND(NULL))) ORDER BY x'', ((((((vt1.c1)GLOB(vt1.c1)))OR(((vt1.c1) IS TRUE))))OR(CAST(vt1.c0 AS NUMERIC))) DESC  NULLS FIRST, SQLITE_COMPILEOPTION_USED((vt1.c0 IN (vt1.c1, vt1.c0))) ASC LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c1) ORDER BY x'', ((((((vt1.c1)GLOB(vt1.c1)))OR(((vt1.c1) IS TRUE))))OR(CAST(vt1.c0 AS NUMERIC))) DESC  NULLS FIRST, SQLITE_COMPILEOPTION_USED((vt1.c0 IN (vt1.c1, vt1.c0))) ASC LIMIT 0X1;
SELECT * FROM vt1 WHERE ((~ ((~ (vt1.c0))))) ORDER BY ((- (vt1.c1)) IN ((((vt1.c1, vt1.c0, vt1.c1))<=((vt1.c0, vt1.c0, vt1.c1))))) ASC, ((((((((('뇿Q(')OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0))))>=(((((vt1.c1, NULL))>((0.1102659836341433, vt1.c1)))))) ASC;
SELECT DISTINCT * FROM vt1 WHERE ((((~ ((~ (vt1.c0)))))AND(((((NOT (vt1.c1))))>((NULL)))))) ORDER BY ((- (vt1.c1)) IN ((((vt1.c1, vt1.c0, vt1.c1))<=((vt1.c0, vt1.c0, vt1.c1))))) ASC, ((((((((('뇿Q(')OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0))))>=(((((vt1.c1, NULL))>((0.1102659836341433, vt1.c1)))))) ASC;
SELECT * FROM vt1 WHERE ((~ ((~ (vt1.c0))))) ORDER BY ((- (vt1.c1)) IN ((((vt1.c1, vt1.c0, vt1.c1))<=((vt1.c0, vt1.c0, vt1.c1))))) ASC, ((((((((('뇿Q(')OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0))))>=(((((vt1.c1, NULL))>((0.1102659836341433, vt1.c1)))))) ASC;
SELECT DISTINCT * FROM vt1 WHERE ((((~ ((~ (vt1.c0)))))AND(((((NOT (vt1.c1))))>((NULL)))))) ORDER BY ((- (vt1.c1)) IN ((((vt1.c1, vt1.c0, vt1.c1))<=((vt1.c0, vt1.c0, vt1.c1))))) ASC, ((((((((('뇿Q(')OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0))))>=(((((vt1.c1, NULL))>((0.1102659836341433, vt1.c1)))))) ASC;
SELECT * FROM v0, vt1 WHERE (((((((v0.c2)OR(NULL)))OR(CAST(v0.c2 AS TEXT))))OR(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((NULL)) AND ((v0.c2))) COLLATE RTRIM  NULLS FIRST, ((CAST(v0.c0 AS NUMERIC)) NOT NULL) DESC  NULLS FIRST, (((NOT ('359733315'))) NOT BETWEEN (v0.c1 COLLATE NOCASE) AND (((vt1.c0)>=(v0.c0)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((v0.c2)OR(NULL)))OR(CAST(v0.c2 AS TEXT))))OR(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((NULL)) AND ((v0.c2))) COLLATE RTRIM  NULLS FIRST, ((CAST(v0.c0 AS NUMERIC)) NOT NULL) DESC  NULLS FIRST, (((NOT ('359733315'))) NOT BETWEEN (v0.c1 COLLATE NOCASE) AND (((vt1.c0)>=(v0.c0)))) ASC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (NULL COLLATE RTRIM) ORDER BY (((vt1.c0)) NOT BETWEEN ((NULL)) AND ((v0.c2))) COLLATE RTRIM  NULLS FIRST, ((CAST(v0.c0 AS NUMERIC)) NOT NULL) DESC  NULLS FIRST, (((NOT ('359733315'))) NOT BETWEEN (v0.c1 COLLATE NOCASE) AND (((vt1.c0)>=(v0.c0)))) ASC  NULLS LAST LIMIT 0x1;
SELECT * FROM v0, vt1 WHERE (((((((v0.c2)OR(NULL)))OR(CAST(v0.c2 AS TEXT))))OR(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((NULL)) AND ((v0.c2))) COLLATE RTRIM  NULLS FIRST, ((CAST(v0.c0 AS NUMERIC)) NOT NULL) DESC  NULLS FIRST, (((NOT ('359733315'))) NOT BETWEEN (v0.c1 COLLATE NOCASE) AND (((vt1.c0)>=(v0.c0)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((v0.c2)OR(NULL)))OR(CAST(v0.c2 AS TEXT))))OR(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((NULL)) AND ((v0.c2))) COLLATE RTRIM  NULLS FIRST, ((CAST(v0.c0 AS NUMERIC)) NOT NULL) DESC  NULLS FIRST, (((NOT ('359733315'))) NOT BETWEEN (v0.c1 COLLATE NOCASE) AND (((vt1.c0)>=(v0.c0)))) ASC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (NULL COLLATE RTRIM) ORDER BY (((vt1.c0)) NOT BETWEEN ((NULL)) AND ((v0.c2))) COLLATE RTRIM  NULLS FIRST, ((CAST(v0.c0 AS NUMERIC)) NOT NULL) DESC  NULLS FIRST, (((NOT ('359733315'))) NOT BETWEEN (v0.c1 COLLATE NOCASE) AND (((vt1.c0)>=(v0.c0)))) ASC  NULLS LAST LIMIT 0x1;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (CASE WHEN TIME(v0.c0, v0.c1, v0.c1) THEN (v0.c2 IN ()) ELSE UNLIKELY(v0.c1) END);
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((CASE WHEN TIME(v0.c0, v0.c1, v0.c1) THEN (v0.c2 IN ()) ELSE UNLIKELY(v0.c1) END)AND(CASE WHEN v0.c2 THEN (v0.c0 IN (v0.c1)) ELSE CASE 'h'  WHEN 0.5040421962970322 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END END))) LIMIT 0;
SELECT * FROM v0 WHERE (NULL) ORDER BY LIKELIHOOD(v0.c0 COLLATE NOCASE, ((v0.c0)==(v0.c2)))  NULLS FIRST, (NOT (((v0.c2)+(v0.c1)))) DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (NULL) ORDER BY LIKELIHOOD(v0.c0 COLLATE NOCASE, ((v0.c0)=(v0.c2)))  NULLS FIRST, (NOT (((v0.c2)+(v0.c1)))) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE (NULL) ORDER BY LIKELIHOOD(v0.c0 COLLATE NOCASE, ((v0.c0)==(v0.c2)))  NULLS FIRST, (NOT (((v0.c2)+(v0.c1)))) DESC  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0 WHERE (CASE CAST(v0.c2 AS INTEGER)  WHEN (NOT (v0.c1)) THEN '1173938805' WHEN (((v0.c0, v0.c0, v0.c0)) NOT BETWEEN ((v0.c1, v0.c0, v0.c0)) AND ((v0.c1, v0.c2, v0.c1))) THEN (+ (v0.c1)) WHEN ((((((((v0.c2)AND(v0.c0)))AND(v0.c0)))AND(v0.c0)))AND('-1340160705')) THEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)) END);
SELECT ALL MIN(v0.c2) FROM v0 WHERE (((CASE CAST(v0.c2 AS INTEGER)  WHEN (NOT (v0.c1)) THEN '1173938805' WHEN (((v0.c0, v0.c0, v0.c0)) NOT BETWEEN ((v0.c1, v0.c0, v0.c0)) AND ((v0.c1, v0.c2, v0.c1))) THEN (+ (v0.c1)) WHEN ((((((((v0.c2)AND(v0.c0)))AND(v0.c0)))AND(v0.c0)))AND('-1340160705')) THEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)) END)AND((((NOT (v0.c0)))<>(TRIM(DISTINCT v0.c2)))))) INTERSECT SELECT ALL MIN(v0.c2) FROM v0 WHERE (NULL COLLATE BINARY);
SELECT ALL COUNT(*) FROM v0 WHERE (((CAST(NULL AS TEXT)) BETWEEN (((((v0.c2)AND(v0.c1)))OR('297690481'))) AND ((v0.c1 IN ('4PR|5jQ>v', v0.c2))))) ORDER BY TRIM(((v0.c1)!=(v0.c2)))  NULLS FIRST, ((CASE v0.c0  WHEN v0.c2 THEN '538290300' END)||(((v0.c0)&(v0.c2)))) ASC, ((CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 END)<=(1.148994335E9)) DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((CAST(NULL AS TEXT)) BETWEEN (((((v0.c2)AND(v0.c1)))OR('297690481'))) AND ((v0.c1 IN ('4PR|5jQ>v', v0.c2)))))AND(json_extract((- (v0.c1)), ((v0.c1) IS TRUE), (+ (v0.c1)))))) ORDER BY TRIM(((v0.c1)<>(v0.c2)))  NULLS FIRST, ((CASE v0.c0  WHEN v0.c2 THEN '538290300' END)||(((v0.c0)&(v0.c2)))) ASC, ((CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 END)<=(1.148994335E9)) DESC  NULLS FIRST;
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (((((((((((vt1.c0)OR(v0.c2)))AND(v0.c2)))AND(vt1.c1)))AND(vt1.c1 COLLATE NOCASE)))OR(v0.c0 COLLATE RTRIM))) ORDER BY ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)) COLLATE RTRIM ASC, (- ((('345514040') BETWEEN (vt1.c1) AND (v0.c2)))) ASC;
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (((((((((((((vt1.c0)OR(v0.c2)))AND(v0.c2)))AND(vt1.c1)))AND(vt1.c1 COLLATE NOCASE)))OR(v0.c0 COLLATE RTRIM)))AND((((vt1.c0) NOT BETWEEN (v0.c1) AND ('-1806426827')) IN ((+ (vt1.c0))))))) ORDER BY ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)) COLLATE RTRIM ASC, (- ((('345514040') BETWEEN (vt1.c1) AND (v0.c2)))) ASC LIMIT 0 INTERSECT SELECT MAX(v0.c2) FROM vt1, v0 WHERE (vt1.c1) ORDER BY ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)) COLLATE RTRIM ASC, (- ((('345514040') BETWEEN (vt1.c1) AND (v0.c2)))) ASC LIMIT 0;
SELECT COUNT(*) FROM vt1 CROSS JOIN v0 ON (CAST(v0.c0 AS REAL) IN (ABS(DISTINCT vt1.c1), ((v0.c0)%(vt1.c0)))) WHERE (UNLIKELY(((x'4f9e')&(v0.c1)))) ORDER BY ((v0.c0)IS(CAST(vt1.c0 AS REAL))) DESC  NULLS LAST, (NOT (v0.c0)) COLLATE RTRIM DESC  NULLS LAST, vt1.c0;
SELECT DISTINCT COUNT(*) FROM vt1 CROSS JOIN v0 ON (CAST(v0.c0 AS REAL) IN (ABS(DISTINCT vt1.c1), ((v0.c0)%(vt1.c0)))) WHERE (UNLIKELY(((x'4f9e')&(v0.c1)))) ORDER BY v0.c0 DESC LIMIT 0X5;
SELECT COUNT(*) FROM vt1, v0 WHERE (vt1.c0) ORDER BY CASE ((((((((v0.c0)AND(v0.c2)))AND(v0.c1)))OR(v0.c1)))OR(v0.c0))  WHEN CAST(vt1.c0 AS BLOB) THEN v0.c1 WHEN v0.c2 THEN UNLIKELY(DISTINCT v0.c0) WHEN ((v0.c0)>(v0.c0)) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END ELSE CAST(v0.c1 AS BLOB) END ASC;
SELECT COUNT(*) FROM vt1, v0 WHERE (vt1.c0) ORDER BY CASE ((((((((v0.c0)AND(v0.c2)))AND(v0.c1)))OR(v0.c1)))OR(v0.c0))  WHEN CAST(vt1.c0 AS BLOB) THEN v0.c1 WHEN v0.c2 THEN UNLIKELY(DISTINCT v0.c0) WHEN ((v0.c0)>(v0.c0)) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END ELSE CAST(v0.c1 AS BLOB) END ASC;
SELECT MIN(v0.c2) FROM v0 WHERE ((((((v0.c1) IS TRUE), ((v0.c0) ISNULL), v0.c1, v0.c1))>=(('''7', ((((((((((v0.c0)OR('5ua&')))AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))AND(v0.c1)), ((v0.c2) IS FALSE), v0.c0)))) ORDER BY CAST(v0.c0 AS REAL) COLLATE BINARY ASC  NULLS FIRST, (~ (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))))  NULLS FIRST;
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE ((((((v0.c1) IS TRUE), ((v0.c0) ISNULL), v0.c1, v0.c1))>(('''7', ((((((((((v0.c0)OR('5ua&')))AND(v0.c0)))OR(v0.c2)))OR(v0.c1)))AND(v0.c1)), ((v0.c2) IS FALSE), v0.c0)))) ORDER BY ((CAST(v0.c1 AS NUMERIC)) IS FALSE)  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((vt1.c0)>>(((((vt1.c0)AND(vt1.c1)))OR(0x7cf6857d))))) ORDER BY ((((vt1.c1)<>(vt1.c0))) NOT BETWEEN ((((vt1.c0, vt1.c1, vt1.c1))<=((vt1.c0, vt1.c1, vt1.c0)))) AND ((((0Xffffffff86081a5a, vt1.c1, vt1.c0, vt1.c1))<=((vt1.c0, vt1.c1, vt1.c1, vt1.c0))))) DESC, LOWER(DISTINCT '') ASC, CAST(NULL AS BLOB) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((vt1.c0)>>(((((vt1.c0)AND(vt1.c1)))OR(0x7cf6857d)))))AND(CAST(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN 0.7653993724001169 END AS NUMERIC)))) ORDER BY ((((vt1.c1)!=(vt1.c0))) NOT BETWEEN ((((vt1.c0, vt1.c1, vt1.c1))<=((vt1.c0, vt1.c1, vt1.c0)))) AND ((((-2046289318, vt1.c1, vt1.c0, vt1.c1))<=((vt1.c0, vt1.c1, vt1.c1, vt1.c0))))) DESC, LOWER(DISTINCT '') ASC, CAST(NULL AS BLOB) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE ((((((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c1)))) NOTNULL));
SELECT ALL * FROM vt1 WHERE ((((((((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c1)))) NOTNULL))AND(CAST((((vt1.c0, vt1.c0, 0.7842796016517286))<=((vt1.c1, vt1.c0, vt1.c0))) AS BLOB)))) LIMIT 0X1;
SELECT * FROM vt1 WHERE ((((((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c1)))) NOTNULL));
SELECT ALL * FROM vt1 WHERE ((((((((vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c1)))) NOTNULL))AND(CAST((((vt1.c0, vt1.c0, 0.7842796016517286))<=((vt1.c1, vt1.c0, vt1.c0))) AS BLOB)))) LIMIT 0X1;
SELECT * FROM v0 INNER JOIN vt1 ON ((((v0.c2)>(v0.c2))) NOT NULL) WHERE ((CASE v0.c1  WHEN v0.c0 THEN v0.c2 END IN ())) ORDER BY ((((((((((vt1.c0)OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(((v0.c0)>=(vt1.c1)))))AND(NULL)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON ((((v0.c2)>(v0.c2))) NOT NULL) WHERE ((((CASE v0.c1  WHEN v0.c0 THEN v0.c2 END IN ()))AND(((vt1.c1 COLLATE NOCASE)||(CASE WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c1 END))))) ORDER BY ((((((((((vt1.c0)OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(((v0.c0)>=(vt1.c1)))))AND(NULL)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON ((((v0.c2)>(v0.c2))) NOT NULL) WHERE (LOWER(((v0.c1)IS NOT(NULL)))) ORDER BY ((((((((((vt1.c0)OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(((v0.c0)>=(vt1.c1)))))AND(NULL)) ASC  NULLS FIRST;
SELECT * FROM v0 INNER JOIN vt1 ON ((((v0.c2)>(v0.c2))) NOT NULL) WHERE ((CASE v0.c1  WHEN v0.c0 THEN v0.c2 END IN ())) ORDER BY ((((((((((vt1.c0)OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(((v0.c0)>=(vt1.c1)))))AND(NULL)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON ((((v0.c2)>(v0.c2))) NOT NULL) WHERE ((((CASE v0.c1  WHEN v0.c0 THEN v0.c2 END IN ()))AND(((vt1.c1 COLLATE NOCASE)||(CASE WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c1 END))))) ORDER BY ((((((((((vt1.c0)OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(((v0.c0)>=(vt1.c1)))))AND(NULL)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON ((((v0.c2)>(v0.c2))) NOT NULL) WHERE (LOWER(((v0.c1)IS NOT(NULL)))) ORDER BY ((((((((((vt1.c0)OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(((v0.c0)>=(vt1.c1)))))AND(NULL)) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c0)-(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c0)-(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END))) INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE ((~ ((((v0.c2, v0.c2))>((v0.c2, v0.c2))))));
SELECT ALL * FROM vt1, v0 WHERE (CASE v0.c1  WHEN v0.c2 THEN vt1.c0 END COLLATE RTRIM COLLATE BINARY);
SELECT * FROM vt1, v0 WHERE (((CASE v0.c1  WHEN v0.c2 THEN vt1.c0 END COLLATE RTRIM COLLATE BINARY)AND(((((((v0.c1 COLLATE NOCASE)OR(CASE v0.c2  WHEN vt1.c0 THEN v0.c0 WHEN 0.9338870862669988 THEN v0.c0 WHEN v0.c1 THEN vt1.c1 END)))AND(((v0.c1)OR(v0.c0)))))AND(((v0.c0) IS FALSE)))))) ORDER BY ((v0.c0 COLLATE NOCASE) NOT BETWEEN (((v0.c1)<<(v0.c0))) AND (load_extension(v0.c2, vt1.c0))), ((((CAST(vt1.c0 AS BLOB))AND(TYPEOF(v0.c2))))OR(((v0.c2)<>(vt1.c0)))) DESC INTERSECT SELECT ALL * FROM vt1, v0 WHERE ('0.19175272902476248') ORDER BY ((v0.c0 COLLATE NOCASE) NOT BETWEEN (((v0.c1)<<(v0.c0))) AND (load_extension(v0.c2, vt1.c0))), ((((CAST(vt1.c0 AS BLOB))AND(TYPEOF(v0.c2))))OR(((v0.c2)<>(vt1.c0)))) DESC;
SELECT ALL * FROM vt1, v0 WHERE (CASE v0.c1  WHEN v0.c2 THEN vt1.c0 END COLLATE RTRIM COLLATE BINARY);
SELECT * FROM vt1, v0 WHERE (((CASE v0.c1  WHEN v0.c2 THEN vt1.c0 END COLLATE RTRIM COLLATE BINARY)AND(((((((v0.c1 COLLATE NOCASE)OR(CASE v0.c2  WHEN vt1.c0 THEN v0.c0 WHEN 0.9338870862669988 THEN v0.c0 WHEN v0.c1 THEN vt1.c1 END)))AND(((v0.c1)OR(v0.c0)))))AND(((v0.c0) IS FALSE)))))) ORDER BY ((v0.c0 COLLATE NOCASE) NOT BETWEEN (((v0.c1)<<(v0.c0))) AND (load_extension(v0.c2, vt1.c0))), ((((CAST(vt1.c0 AS BLOB))AND(TYPEOF(v0.c2))))OR(((v0.c2)<>(vt1.c0)))) DESC INTERSECT SELECT ALL * FROM vt1, v0 WHERE ('0.19175272902476248') ORDER BY ((v0.c0 COLLATE NOCASE) NOT BETWEEN (((v0.c1)<<(v0.c0))) AND (load_extension(v0.c2, vt1.c0))), ((((CAST(vt1.c0 AS BLOB))AND(TYPEOF(v0.c2))))OR(((v0.c2)<>(vt1.c0)))) DESC;
SELECT ALL MIN(vt1.c0) FROM vt1 LEFT OUTER JOIN v0 ON (((vt1.c0 IN (v0.c1)))&(CAST(v0.c0 AS TEXT))) WHERE (HEX(((v0.c0) NOT BETWEEN (' ') AND (vt1.c1))));
SELECT ALL MIN(vt1.c0) FROM vt1 LEFT OUTER JOIN v0 ON (((vt1.c0 IN (v0.c1)))&(CAST(v0.c0 AS TEXT))) WHERE (HEX(((v0.c0) NOT BETWEEN (' ') AND (vt1.c1)))) LIMIT 1;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN 0.967945126159036 ELSE vt1.c1 END)OR(((vt1.c0)>(vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c1 END)))AND(((x'be') ISNULL)))) ORDER BY ((((vt1.c1)%(vt1.c0))) NOTNULL) DESC  NULLS FIRST, vt1.c1 DESC  NULLS FIRST, (- ('k'))  NULLS FIRST, ((vt1.c0) NOT NULL) COLLATE RTRIM DESC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN 0.967945126159036 ELSE vt1.c1 END)OR(((vt1.c0)>(vt1.c0)))))AND(CASE WHEN vt1.c0 THEN vt1.c1 END)))AND(((x'be') ISNULL)))) ORDER BY vt1.c1 DESC  NULLS FIRST, ((vt1.c0) NOTNULL) ASC;
SELECT * FROM vt1 CROSS JOIN v0 ON ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)))&(((vt1.c1) IS TRUE))) WHERE (((v0.c1)/((v0.c2 IN ()))));
SELECT * FROM vt1 CROSS JOIN v0 ON ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)))&(((vt1.c1) IS TRUE))) WHERE (((((v0.c1)/((v0.c2 IN ()))))AND(((((((((vt1.c0)AND(v0.c0)))AND(v0.c0)))AND(vt1.c1)))>=((NOT ('-2046289318')))))));
SELECT * FROM vt1 CROSS JOIN v0 ON ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)))&(((vt1.c1) IS TRUE))) WHERE (((v0.c1)/((v0.c2 IN ()))));
SELECT * FROM vt1 CROSS JOIN v0 ON ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)))&(((vt1.c1) IS TRUE))) WHERE (((((v0.c1)/((v0.c2 IN ()))))AND(((((((((vt1.c0)AND(v0.c0)))AND(v0.c0)))AND(vt1.c1)))>=((NOT ('-2046289318')))))));
SELECT * FROM vt1 WHERE (((vt1.c1)|(0.7291417974009008)) COLLATE RTRIM) ORDER BY (((vt1.c0)IS NOT(vt1.c0)) IN ((vt1.c0 IN (0.28364930199632654)), ((vt1.c1)>=(vt1.c1)))) DESC, ((vt1.c0 COLLATE BINARY)>=((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))))) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((vt1.c1)|(0.7291417974009008)) COLLATE RTRIM)AND(((x'') IS FALSE)))) ORDER BY (((vt1.c0)IS NOT(vt1.c0)) IN ((vt1.c0 IN (0.28364930199632654)), ((vt1.c1)>=(vt1.c1)))) DESC, ((vt1.c0 COLLATE BINARY)>=((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))))) DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt1 WHERE ((NOT ((+ (vt1.c1))))) ORDER BY (((vt1.c0)IS NOT(vt1.c0)) IN ((vt1.c0 IN (0.28364930199632654)), ((vt1.c1)>=(vt1.c1)))) DESC, ((vt1.c0 COLLATE BINARY)>=((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))))) DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt1 WHERE (((vt1.c1)|(0.7291417974009008)) COLLATE RTRIM) ORDER BY (((vt1.c0)IS NOT(vt1.c0)) IN ((vt1.c0 IN (0.28364930199632654)), ((vt1.c1)>=(vt1.c1)))) DESC, ((vt1.c0 COLLATE BINARY)>=((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))))) DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((vt1.c1)|(0.7291417974009008)) COLLATE RTRIM)AND(((x'') IS FALSE)))) ORDER BY (((vt1.c0)IS NOT(vt1.c0)) IN ((vt1.c0 IN (0.28364930199632654)), ((vt1.c1)>=(vt1.c1)))) DESC, ((vt1.c0 COLLATE BINARY)>=((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))))) DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt1 WHERE ((NOT ((+ (vt1.c1))))) ORDER BY (((vt1.c0)IS NOT(vt1.c0)) IN ((vt1.c0 IN (0.28364930199632654)), ((vt1.c1)>=(vt1.c1)))) DESC, ((vt1.c0 COLLATE BINARY)>=((((vt1.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))))) DESC  NULLS FIRST LIMIT 0;
SELECT * FROM v0 WHERE (((v0.c1)IS(x'a9')));
SELECT ALL * FROM v0 WHERE (((v0.c1)IS(x'a9'))) ORDER BY (((NOT (v0.c0))) IS FALSE), (((((v0.c2, 0.5707511331779187))>=((v0.c1, v0.c0))))/(((x'') BETWEEN (v0.c1) AND (v0.c2)))) LIMIT 0x2;
SELECT * FROM v0 WHERE (((v0.c1)IS(x'a9')));
SELECT ALL * FROM v0 WHERE (((v0.c1)IS(x'a9'))) ORDER BY (((NOT (v0.c0))) IS FALSE), (((((v0.c2, 0.5707511331779187))>=((v0.c1, v0.c0))))/(((x'') BETWEEN (v0.c1) AND (v0.c2)))) LIMIT 0x2;
SELECT ALL * FROM v0 WHERE (v0.c2) ORDER BY ((v0.c2 COLLATE NOCASE) BETWEEN ((NOT (v0.c2))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))), ((((((((((v0.c1)OR(v0.c0)))AND(v0.c2)))OR(v0.c1)))AND(v0.c2))) BETWEEN ((((v0.c0, v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c1)) AND (('', v0.c1, v0.c2)))) AND (json_remove('-637031859', v0.c1))) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE (((v0.c2)AND(CAST(CAST(v0.c1 AS INTEGER) AS REAL)))) ORDER BY ((v0.c2 COLLATE NOCASE) BETWEEN ((NOT (v0.c2))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))), ((((((((((v0.c1)OR(v0.c0)))AND(v0.c2)))OR(v0.c1)))AND(v0.c2))) BETWEEN ((((v0.c0, v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c1)) AND (('', v0.c1, v0.c2)))) AND (json_remove('-637031859', v0.c1))) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL * FROM v0 WHERE ((((v0.c1, v0.c1, v0.c2, NULL)) BETWEEN ((((v0.c1) IS FALSE), (v0.c0 IN (v0.c0)), NULL, (((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c0, '-944023905'))))) AND ((((v0.c0) IS TRUE), ((v0.c2)IS NOT(v0.c2)), load_extension(v0.c0, v0.c1), ((((((v0.c1)AND(v0.c2)))AND(v0.c2)))OR(v0.c2)))))) ORDER BY ((v0.c2 COLLATE NOCASE) BETWEEN ((NOT (v0.c2))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))), ((((((((((v0.c1)OR(v0.c0)))AND(v0.c2)))OR(v0.c1)))AND(v0.c2))) BETWEEN ((((v0.c0, v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c1)) AND (('', v0.c1, v0.c2)))) AND (json_remove('-637031859', v0.c1))) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (v0.c2) ORDER BY ((v0.c2 COLLATE NOCASE) BETWEEN ((NOT (v0.c2))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))), ((((((((((v0.c1)OR(v0.c0)))AND(v0.c2)))OR(v0.c1)))AND(v0.c2))) BETWEEN ((((v0.c0, v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c1)) AND (('', v0.c1, v0.c2)))) AND (json_remove('-637031859', v0.c1))) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE (((v0.c2)AND(CAST(CAST(v0.c1 AS INTEGER) AS REAL)))) ORDER BY ((v0.c2 COLLATE NOCASE) BETWEEN ((NOT (v0.c2))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))), ((((((((((v0.c1)OR(v0.c0)))AND(v0.c2)))OR(v0.c1)))AND(v0.c2))) BETWEEN ((((v0.c0, v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c1)) AND (('', v0.c1, v0.c2)))) AND (json_remove('-637031859', v0.c1))) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL * FROM v0 WHERE ((((v0.c1, v0.c1, v0.c2, NULL)) BETWEEN ((((v0.c1) IS FALSE), (v0.c0 IN (v0.c0)), NULL, (((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c0, '-944023905'))))) AND ((((v0.c0) IS TRUE), ((v0.c2)IS NOT(v0.c2)), load_extension(v0.c0, v0.c1), ((((((v0.c1)AND(v0.c2)))AND(v0.c2)))OR(v0.c2)))))) ORDER BY ((v0.c2 COLLATE NOCASE) BETWEEN ((NOT (v0.c2))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))), ((((((((((v0.c1)OR(v0.c0)))AND(v0.c2)))OR(v0.c1)))AND(v0.c2))) BETWEEN ((((v0.c0, v0.c1, v0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c1)) AND (('', v0.c1, v0.c2)))) AND (json_remove('-637031859', v0.c1))) DESC  NULLS FIRST LIMIT 0x0;
SELECT MAX(v0.c2) FROM v0 WHERE (v0.c1);
SELECT ALL MAX(v0.c2) FROM v0 WHERE (v0.c1);
SELECT * FROM vt1, v0 WHERE (CASE WHEN (v0.c2 IN (v0.c2)) THEN v0.c1 COLLATE RTRIM WHEN ((v0.c1) IS TRUE) THEN ((((((0.44302555164439683)OR(v0.c0)))AND(vt1.c1)))OR(-989993689)) WHEN TYPEOF(vt1.c1) THEN LIKELIHOOD(DISTINCT v0.c1, v0.c1) ELSE (('-1057702881') ISNULL) END);
SELECT DISTINCT * FROM vt1, v0 WHERE (CASE WHEN (v0.c2 IN (v0.c2)) THEN v0.c1 COLLATE RTRIM WHEN ((v0.c1) IS TRUE) THEN ((((((0.44302555164439683)OR(v0.c0)))AND(vt1.c1)))OR(0Xffffffffc4fde527)) WHEN TYPEOF(vt1.c1) THEN LIKELIHOOD(DISTINCT v0.c1, v0.c1) ELSE (('-1057702881') ISNULL) END) INTERSECT SELECT DISTINCT * FROM vt1 NOT INDEXED, v0 WHERE ((+ (((vt1.c1)OR(vt1.c1)))));
SELECT * FROM vt1, v0 WHERE (CASE WHEN (v0.c2 IN (v0.c2)) THEN v0.c1 COLLATE RTRIM WHEN ((v0.c1) IS TRUE) THEN ((((((0.44302555164439683)OR(v0.c0)))AND(vt1.c1)))OR(-989993689)) WHEN TYPEOF(vt1.c1) THEN LIKELIHOOD(DISTINCT v0.c1, v0.c1) ELSE (('-1057702881') ISNULL) END);
SELECT MAX(v0.c2) FROM v0 WHERE (((((((v0.c2)OR(v0.c1)))AND(v0.c0))) NOT BETWEEN (((((((v0.c1)OR(v0.c2)))AND(v0.c0)))AND(v0.c0))) AND ((((v0.c0, v0.c0, v0.c0)) BETWEEN ((v0.c1, v0.c0, v0.c2)) AND ((v0.c0, v0.c0, v0.c1))))));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((((v0.c2)OR(v0.c1)))AND(v0.c0))) NOT BETWEEN (((((((v0.c1)OR(v0.c2)))AND(v0.c0)))AND(v0.c0))) AND ((((v0.c0, v0.c0, v0.c0)) BETWEEN ((v0.c1, v0.c0, v0.c2)) AND ((v0.c0, v0.c0, v0.c1))))));
SELECT * FROM vt1, v0 WHERE (vt1.c0 COLLATE RTRIM);
SELECT DISTINCT * FROM vt1, v0 WHERE (vt1.c0 COLLATE RTRIM) ORDER BY INSTR((+ (v0.c0)), CAST(vt1.c1 AS TEXT))  NULLS FIRST, ((((((((((v0.c1)OR(0.09196603153185723)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c0)))IS((((v0.c0)) BETWEEN ((v0.c2)) AND ((vt1.c0))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((vt1.c0 IN ())) NOT BETWEEN ('K') AND (((vt1.c0) NOTNULL)))) ORDER BY INSTR((+ (v0.c0)), CAST(vt1.c1 AS TEXT))  NULLS FIRST, ((((((((((v0.c1)OR(0.09196603153185723)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c0)))IS((((v0.c0)) BETWEEN ((v0.c2)) AND ((vt1.c0)))));
SELECT * FROM vt1, v0 WHERE (vt1.c0 COLLATE RTRIM);
SELECT DISTINCT * FROM vt1, v0 WHERE (vt1.c0 COLLATE RTRIM) ORDER BY INSTR((+ (v0.c0)), CAST(vt1.c1 AS TEXT))  NULLS FIRST, ((((((((((v0.c1)OR(0.09196603153185723)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c0)))IS((((v0.c0)) BETWEEN ((v0.c2)) AND ((vt1.c0))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((vt1.c0 IN ())) NOT BETWEEN ('K') AND (((vt1.c0) NOTNULL)))) ORDER BY INSTR((+ (v0.c0)), CAST(vt1.c1 AS TEXT))  NULLS FIRST, ((((((((((v0.c1)OR(0.09196603153185723)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c0)))IS((((v0.c0)) BETWEEN ((v0.c2)) AND ((vt1.c0)))));
SELECT ALL * FROM vt1 INNER JOIN v0 ON ((NULL)||((v0.c1 IN (v0.c2)))) WHERE ((+ (((vt1.c1)|(v0.c0))))) ORDER BY NULL  NULLS FIRST, ((CAST(v0.c2 AS TEXT)) IS TRUE) ASC, (NULL IN ()) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON ((NULL)||((v0.c1 IN (v0.c2)))) WHERE ((((+ (((vt1.c1)|(v0.c0)))))AND(CASE ((vt1.c1) BETWEEN (v0.c2) AND (v0.c0))  WHEN v0.c0 THEN CASE WHEN vt1.c1 THEN vt1.c1 END ELSE 'I8Fq\w' END))) ORDER BY json_array_length((((v0.c2)) BETWEEN ((v0.c1)) AND ((v0.c2))))  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt1 INNER JOIN v0 ON ((NULL)||((v0.c1 IN (v0.c2)))) WHERE ((+ (((vt1.c1)|(v0.c0))))) ORDER BY NULL  NULLS FIRST, ((CAST(v0.c2 AS TEXT)) IS TRUE) ASC, (NULL IN ()) DESC  NULLS LAST;
SELECT MAX(v0.c2) FROM v0 WHERE ((((~ (v0.c2))) IS TRUE));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ((((~ (v0.c2))) IS TRUE)) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((v0.c1)IS(v0.c1)))>>(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2))))) LIMIT 0;
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)) COLLATE NOCASE) ORDER BY x'2c06f00dc008' DESC, ((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c1))) IS TRUE), ((((v0.c1)IS(v0.c1))) IS FALSE) ASC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)) COLLATE NOCASE)AND(((((((v0.c2, v0.c1, v0.c0, v0.c2)) NOT BETWEEN ((v0.c0, v0.c0, v0.c2, v0.c1)) AND ((v0.c1, v0.c1, v0.c0, v0.c1)))))<((((v0.c1)LIKE(v0.c1)))))))) ORDER BY ((CASE WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END) BETWEEN ((((v0.c0, v0.c2, v0.c2))>=((v0.c0, v0.c0, v0.c0)))) AND ((((v0.c0))>=((NULL))))) DESC  NULLS FIRST, ((((((v0.c0) IS FALSE))OR(((0.39351974307528226)=(v0.c0)))))AND((((v0.c1, v0.c1, v0.c1, v0.c2))<=((v0.c2, v0.c1, v0.c0, x'ae7578')))))  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((~ ((+ ('('))))) ORDER BY v0.c1 DESC;
SELECT DISTINCT * FROM vt1, v0 WHERE ((~ ((+ ('('))))) ORDER BY -2058342109 COLLATE NOCASE DESC, COALESCE(DISTINCT '2088148649', (v0.c1 IN (v0.c2, vt1.c1, vt1.c0))), ((((x'586b') NOT BETWEEN (vt1.c1) AND (v0.c2))) BETWEEN ((x'71' IN (v0.c0, v0.c1))) AND (((v0.c2)+(v0.c2))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((- (v0.c2)))OR(((v0.c0) BETWEEN (v0.c1) AND (v0.c1))))) ORDER BY -2058342109 COLLATE NOCASE DESC, COALESCE(DISTINCT '2088148649', (v0.c1 IN (v0.c2, vt1.c1, vt1.c0))), ((((x'586b') NOT BETWEEN (vt1.c1) AND (v0.c2))) BETWEEN ((x'71' IN (v0.c0, v0.c1))) AND (((v0.c2)+(v0.c2))))  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((~ ((+ ('('))))) ORDER BY v0.c1 DESC;
SELECT DISTINCT * FROM vt1, v0 WHERE ((~ ((+ ('('))))) ORDER BY -2058342109 COLLATE NOCASE DESC, COALESCE(DISTINCT '2088148649', (v0.c1 IN (v0.c2, vt1.c1, vt1.c0))), ((((x'586b') NOT BETWEEN (vt1.c1) AND (v0.c2))) BETWEEN ((x'71' IN (v0.c0, v0.c1))) AND (((v0.c2)+(v0.c2))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((- (v0.c2)))OR(((v0.c0) BETWEEN (v0.c1) AND (v0.c1))))) ORDER BY -2058342109 COLLATE NOCASE DESC, COALESCE(DISTINCT '2088148649', (v0.c1 IN (v0.c2, vt1.c1, vt1.c0))), ((((x'586b') NOT BETWEEN (vt1.c1) AND (v0.c2))) BETWEEN ((x'71' IN (v0.c0, v0.c1))) AND (((v0.c2)+(v0.c2))))  NULLS LAST;
SELECT * FROM vt1 INNER JOIN v0 ON (((v0.c0 IN (vt1.c1)))*(((v0.c2) NOT NULL))) WHERE (LOWER(((v0.c2)IS(v0.c2))));
SELECT ALL * FROM vt1 INNER JOIN v0 ON (((v0.c0 IN (vt1.c1)))*(((v0.c2) NOT NULL))) WHERE (((LOWER(((v0.c2)IS(v0.c2))))AND((((v0.c1)) BETWEEN (((- (x'de')))) AND ((ABS(0.24962508241286951))))))) ORDER BY ((vt1.c0)>(v0.c0)) COLLATE RTRIM ASC LIMIT 2;
SELECT * FROM vt1 INNER JOIN v0 ON (((v0.c0 IN (vt1.c1)))*(((v0.c2) NOT NULL))) WHERE (LOWER(((v0.c2)IS(v0.c2))));
SELECT ALL * FROM vt1 INNER JOIN v0 ON (((v0.c0 IN (vt1.c1)))*(((v0.c2) NOT NULL))) WHERE (((LOWER(((v0.c2)IS(v0.c2))))AND((((v0.c1)) BETWEEN (((- (x'de')))) AND ((ABS(0.24962508241286951))))))) ORDER BY ((vt1.c0)>(v0.c0)) COLLATE RTRIM ASC LIMIT 2;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON (((v0.c2 IN (v0.c2)))<<(vt1.c1 COLLATE NOCASE)) WHERE ((((- ('-975473732'))) IS FALSE)) ORDER BY (((v0.c2 IN (vt1.c0))) NOT BETWEEN (HEX(DISTINCT v0.c1)) AND (((vt1.c0)<=(v0.c0)))) ASC  NULLS FIRST, vt1.c0 ASC;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON (((v0.c2 IN (v0.c2)))<<(vt1.c1 COLLATE NOCASE)) WHERE ((((((- ('-975473732'))) IS FALSE))AND(CAST(((v0.c2) NOT NULL) AS TEXT)))) ORDER BY (((v0.c2 IN (vt1.c0))) NOT BETWEEN (HEX(DISTINCT v0.c1)) AND (((vt1.c0)<=(v0.c0)))) ASC  NULLS FIRST, vt1.c0 ASC;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON (((v0.c2 IN (v0.c2)))<<(vt1.c1 COLLATE NOCASE)) WHERE ((((- ('-975473732'))) IS FALSE)) ORDER BY (((v0.c2 IN (vt1.c0))) NOT BETWEEN (HEX(DISTINCT v0.c1)) AND (((vt1.c0)<=(v0.c0)))) ASC  NULLS FIRST, vt1.c0 ASC;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON (((v0.c2 IN (v0.c2)))<<(vt1.c1 COLLATE NOCASE)) WHERE ((((((- ('-975473732'))) IS FALSE))AND(CAST(((v0.c2) NOT NULL) AS TEXT)))) ORDER BY (((v0.c2 IN (vt1.c0))) NOT BETWEEN (HEX(DISTINCT v0.c1)) AND (((vt1.c0)<=(v0.c0)))) ASC  NULLS FIRST, vt1.c0 ASC;
SELECT * FROM vt1, v0 WHERE (CAST('-1067114523' AS TEXT)) ORDER BY CASE WHEN (v0.c0 IN (vt1.c0)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND ('-1069442437')) END DESC  NULLS LAST, NULL  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (((CAST('-1067114523' AS TEXT))AND(TRIM(DISTINCT ((v0.c0)/(v0.c1)), (v0.c2 IN ()))))) ORDER BY CASE WHEN (v0.c0 IN (vt1.c0)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND ('-1069442437')) END DESC  NULLS LAST, NULL  NULLS FIRST INTERSECT SELECT * FROM vt1, v0 WHERE ((((CAST(v0.c1 AS REAL)))>=((v0.c1 COLLATE RTRIM)))) ORDER BY CASE WHEN (v0.c0 IN (vt1.c0)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND ('-1069442437')) END DESC  NULLS LAST, NULL  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (CAST('-1067114523' AS TEXT)) ORDER BY CASE WHEN (v0.c0 IN (vt1.c0)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND ('-1069442437')) END DESC  NULLS LAST, NULL  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (((CAST('-1067114523' AS TEXT))AND(TRIM(DISTINCT ((v0.c0)/(v0.c1)), (v0.c2 IN ()))))) ORDER BY CASE WHEN (v0.c0 IN (vt1.c0)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND ('-1069442437')) END DESC  NULLS LAST, NULL  NULLS FIRST INTERSECT SELECT * FROM vt1, v0 WHERE ((((CAST(v0.c1 AS REAL)))>=((v0.c1 COLLATE RTRIM)))) ORDER BY CASE WHEN (v0.c0 IN (vt1.c0)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND ('-1069442437')) END DESC  NULLS LAST, NULL  NULLS FIRST;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((((v0.c0) ISNULL))<<(v0.c2))) ORDER BY ((((v0.c0)&(v0.c1))) NOT BETWEEN (((v0.c2) BETWEEN (v0.c1) AND (v0.c2))) AND (CAST(v0.c2 AS REAL))) ASC  NULLS LAST;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((((((v0.c0) ISNULL))<<(v0.c2)))AND(json_array_length(((v0.c2)IS NOT(v0.c1)), -2.058342109E9)))) ORDER BY CAST((NOT (0Xffffffffbc617a8c)) AS NUMERIC) ASC, CASE v0.c2  WHEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 WHEN x'' THEN v0.c1 WHEN v0.c2 THEN v0.c0 END THEN ((v0.c0)>(0.9968753404868614)) WHEN x'' THEN COALESCE(DISTINCT v0.c1, v0.c0) WHEN 0.21950631973557744 THEN ((((((((v0.c1)AND(v0.c2)))OR(v0.c2)))OR(v0.c0)))OR(v0.c2)) END DESC  NULLS FIRST, ((((((((((((('374010800'))<=((v0.c1))))OR((+ (v0.c2)))))OR(NULL)))OR((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c2))))))OR((((v0.c0, v0.c0))=((v0.c2, v0.c0))))))AND(((((v0.c2)AND(v0.c1)))AND(v0.c1)))) DESC  NULLS FIRST INTERSECT SELECT MAX(v0.c1) FROM v0 WHERE (((((v0.c1)AND(CAST(v0.c2 AS INTEGER))))OR(v0.c1 COLLATE BINARY))) ORDER BY CAST((NOT (0Xffffffffbc617a8c)) AS NUMERIC) ASC, CASE v0.c2  WHEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 WHEN x'' THEN v0.c1 WHEN v0.c2 THEN v0.c0 END THEN ((v0.c0)>(0.9968753404868614)) WHEN x'' THEN COALESCE(DISTINCT v0.c1, v0.c0) WHEN 0.21950631973557744 THEN ((((((((v0.c1)AND(v0.c2)))OR(v0.c2)))OR(v0.c0)))OR(v0.c2)) END DESC  NULLS FIRST, ((((((((((((('374010800'))<=((v0.c1))))OR((+ (v0.c2)))))OR(NULL)))OR((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c2))))))OR((((v0.c0, v0.c0))==((v0.c2, v0.c0))))))AND(((((v0.c2)AND(v0.c1)))AND(v0.c1)))) DESC  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((vt1.c1) NOT BETWEEN (vt1.c0) AND (v0.c1)) COLLATE BINARY) ORDER BY ((((((((vt1.c1)AND(v0.c2)))AND(vt1.c1)))AND(v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END) AND (CAST(v0.c2 AS TEXT)))  NULLS FIRST, 0.8491363381311466 DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c0) AND (v0.c1)) COLLATE BINARY)AND(((vt1.c1)>=(vt1.c0)) COLLATE NOCASE))) ORDER BY ((((((((vt1.c1)AND(v0.c2)))AND(vt1.c1)))AND(v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END) AND (CAST(v0.c2 AS TEXT)))  NULLS FIRST, 0.8491363381311466 DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((((((v0.c1)OR(v0.c0)))AND(v0.c1)))AND(ABS(vt1.c0))))OR(vt1.c0))) ORDER BY ((((((((vt1.c1)AND(v0.c2)))AND(vt1.c1)))AND(v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END) AND (CAST(v0.c2 AS TEXT)))  NULLS FIRST, 0.8491363381311466 DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (((vt1.c1) NOT BETWEEN (vt1.c0) AND (v0.c1)) COLLATE BINARY) ORDER BY ((((((((vt1.c1)AND(v0.c2)))AND(vt1.c1)))AND(v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END) AND (CAST(v0.c2 AS TEXT)))  NULLS FIRST, 0.8491363381311466 DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c0) AND (v0.c1)) COLLATE BINARY)AND(((vt1.c1)>=(vt1.c0)) COLLATE NOCASE))) ORDER BY ((((((((vt1.c1)AND(v0.c2)))AND(vt1.c1)))AND(v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END) AND (CAST(v0.c2 AS TEXT)))  NULLS FIRST, 0.8491363381311466 DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((((((((v0.c1)OR(v0.c0)))AND(v0.c1)))AND(ABS(vt1.c0))))OR(vt1.c0))) ORDER BY ((((((((vt1.c1)AND(v0.c2)))AND(vt1.c1)))AND(v0.c2))) BETWEEN (CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END) AND (CAST(v0.c2 AS TEXT)))  NULLS FIRST, 0.8491363381311466 DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (((((((CAST(v0.c1 AS TEXT))OR(((v0.c0) NOT NULL))))OR(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)))AND(COALESCE(v0.c0, x'f0fa18d6')))) ORDER BY (((((~ (vt1.c0)))OR((NOT (v0.c2)))))AND('456614696')) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (((((((((CAST(v0.c1 AS TEXT))OR(((v0.c0) NOT NULL))))OR(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)))AND(COALESCE(v0.c0, x'f0fa18d6'))))AND(((((v0.c1) IS TRUE))&(((NULL) NOT BETWEEN (v0.c2) AND (v0.c2))))))) ORDER BY CASE ((v0.c2)<=(vt1.c1))  WHEN (+ (x'ad8f')) THEN vt1.c1 COLLATE BINARY WHEN LIKELIHOOD(DISTINCT v0.c0, v0.c0) THEN (v0.c1 IN ()) WHEN ((vt1.c0) NOT NULL) THEN CAST(v0.c2 AS NUMERIC) ELSE CASE 0.41244427236583137  WHEN v0.c2 THEN v0.c1 ELSE vt1.c1 END END DESC  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (((((((CAST(v0.c1 AS TEXT))OR(((v0.c0) NOT NULL))))OR(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)))AND(COALESCE(v0.c0, x'f0fa18d6')))) ORDER BY (((((~ (vt1.c0)))OR((NOT (v0.c2)))))AND('456614696')) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (((((((((CAST(v0.c1 AS TEXT))OR(((v0.c0) NOT NULL))))OR(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)))AND(COALESCE(v0.c0, x'f0fa18d6'))))AND(((((v0.c1) IS TRUE))&(((NULL) NOT BETWEEN (v0.c2) AND (v0.c2))))))) ORDER BY CASE ((v0.c2)<=(vt1.c1))  WHEN (+ (x'ad8f')) THEN vt1.c1 COLLATE BINARY WHEN LIKELIHOOD(DISTINCT v0.c0, v0.c0) THEN (v0.c1 IN ()) WHEN ((vt1.c0) NOT NULL) THEN CAST(v0.c2 AS NUMERIC) ELSE CASE 0.41244427236583137  WHEN v0.c2 THEN v0.c1 ELSE vt1.c1 END END DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE BINARY) NOT BETWEEN (((vt1.c1)AND(vt1.c1))) AND (vt1.c1)));
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c1 COLLATE BINARY) NOT BETWEEN (((vt1.c1)AND(vt1.c1))) AND (vt1.c1)))AND(highlight(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)), vt1.c0, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0))))));
SELECT ALL * FROM vt1 WHERE (((vt1.c1 COLLATE BINARY) NOT BETWEEN (((vt1.c1)AND(vt1.c1))) AND (vt1.c1)));
SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c1 COLLATE BINARY) NOT BETWEEN (((vt1.c1)AND(vt1.c1))) AND (vt1.c1)))AND(highlight(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)), vt1.c0, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), ((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0))))));
SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((x'')*(((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)))) WHERE (v0.c2);
SELECT * FROM vt1 CROSS JOIN v0 ON ((x'')*(((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)))) WHERE (v0.c2) ORDER BY (vt1.c1 IN ()), '32506213' DESC  NULLS LAST;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((x'')*(((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)))) WHERE (v0.c2);
SELECT * FROM vt1 CROSS JOIN v0 ON ((x'')*(((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)))) WHERE (v0.c2) ORDER BY (vt1.c1 IN ()), '32506213' DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)AND(v0.c2)))OR(v0.c2))) AND (v0.c0)));
SELECT * FROM v0 WHERE (((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)AND(v0.c2)))OR(v0.c2))) AND (v0.c0))) ORDER BY '-1386666007'  NULLS LAST, v0.c1 DESC, ((((((((((((((((v0.c2)OR(v0.c2)))AND(v0.c2)))AND(v0.c1 COLLATE NOCASE)))AND(((v0.c1)OR(v0.c0)))))OR(v0.c0 COLLATE NOCASE)))OR(((((((((((v0.c1)OR(v0.c2)))OR(v0.c0)))OR(v0.c0)))AND(v0.c2)))OR(v0.c1)))))AND(((v0.c0) NOT NULL))))AND((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c2)))))  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)AND(v0.c2)))OR(v0.c2))) AND (v0.c0)));
SELECT * FROM v0 WHERE (((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)AND(v0.c2)))OR(v0.c2))) AND (v0.c0))) ORDER BY '-1386666007'  NULLS LAST, v0.c1 DESC, ((((((((((((((((v0.c2)OR(v0.c2)))AND(v0.c2)))AND(v0.c1 COLLATE NOCASE)))AND(((v0.c1)OR(v0.c0)))))OR(v0.c0 COLLATE NOCASE)))OR(((((((((((v0.c1)OR(v0.c2)))OR(v0.c0)))OR(v0.c0)))AND(v0.c2)))OR(v0.c1)))))AND(((v0.c0) NOT NULL))))AND((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c2)))))  NULLS FIRST;
SELECT COUNT(*) FROM vt1 WHERE (vt1.c0) ORDER BY ((x'fe' COLLATE RTRIM)-((+ (vt1.c1)))) DESC  NULLS LAST, CAST(((0xffffffffffffffff) BETWEEN (vt1.c0) AND (vt1.c1)) AS TEXT) ASC  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((vt1.c0)AND('32506213'))) ORDER BY ((((vt1.c0) NOTNULL))<=(TRIM(vt1.c0))) DESC  NULLS LAST, ((((((x'')AND(vt1.c0)))AND(vt1.c0))) NOT BETWEEN ((vt1.c1 IN (-6.40489221E8, 0.9673329453143786))) AND (((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))), ((CAST(vt1.c1 AS REAL)) BETWEEN ((vt1.c0 IN ())) AND (((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))) DESC INTERSECT SELECT COUNT(*) FROM vt1 WHERE (((vt1.c0) BETWEEN (SQLITE_SOURCE_ID()) AND (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY ((((vt1.c0) NOTNULL))<=(TRIM(vt1.c0))) DESC  NULLS LAST, ((((((x'')AND(vt1.c0)))AND(vt1.c0))) NOT BETWEEN ((vt1.c1 IN (-6.40489221E8, 0.9673329453143786))) AND (((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))), ((CAST(vt1.c1 AS REAL)) BETWEEN ((vt1.c0 IN ())) AND (((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))) DESC;
SELECT ALL MAX(v0.c2) FROM v0, vt1 WHERE ((((vt1.c0, v0.c1)) BETWEEN ((v0.c2 COLLATE RTRIM, (((v0.c2, v0.c1))<>((v0.c0, vt1.c1))))) AND (((((v0.c0, v0.c2, vt1.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, NULL, vt1.c1, vt1.c1, vt1.c0)) AND ((v0.c1, v0.c1, v0.c0, vt1.c0, v0.c0))), UNLIKELY(DISTINCT vt1.c1)))));
SELECT MAX(v0.c2) FROM v0, vt1 WHERE ((((((vt1.c0, v0.c1)) BETWEEN ((v0.c2 COLLATE RTRIM, (((v0.c2, v0.c1))<((v0.c0, vt1.c1))))) AND (((((v0.c0, v0.c2, vt1.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, NULL, vt1.c1, vt1.c1, vt1.c0)) AND ((v0.c1, v0.c1, v0.c0, vt1.c0, v0.c0))), UNLIKELY(DISTINCT vt1.c1)))))AND(((((((((((((CAST(v0.c0 AS NUMERIC))AND(((v0.c1) BETWEEN (v0.c0) AND (v0.c1)))))OR(((v0.c0)|(v0.c1)))))AND('-1762504690')))AND((NOT (v0.c0)))))OR(CAST(v0.c0 AS TEXT))))AND(CAST('(#^' AS TEXT)))))) ORDER BY 0.7018663693348293 ASC, CASE (v0.c2 IN ())  WHEN ((NULL) ISNULL) THEN x'' ELSE vt1.c1 COLLATE RTRIM END  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)|(vt1.c0)))|(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 END)));
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)|(vt1.c0)))|(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 END)))AND((- ((vt1.c1 IN (vt1.c1, vt1.c0))))))) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((((vt1.c0)|(vt1.c0)))|(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 END)));
SELECT ALL * FROM vt1 WHERE (((((((vt1.c0)|(vt1.c0)))|(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 END)))AND((- ((vt1.c1 IN (vt1.c1, vt1.c0))))))) LIMIT 0;
SELECT ALL * FROM vt1 WHERE ((+ (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))) ORDER BY (((((((((vt1.c0 IN ()))OR(((vt1.c0)IS(vt1.c0)))))AND(LIKELY(vt1.c0))))AND(vt1.c0 COLLATE NOCASE)))OR((- (vt1.c0))))  NULLS FIRST;
SELECT * FROM vt1 WHERE ((+ (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))) ORDER BY vt1.c1 ASC  NULLS FIRST, CASE WHEN 0.6983850636689803 THEN (((vt1.c1, vt1.c1, vt1.c1))=((vt1.c1, vt1.c0, vt1.c1))) ELSE ((vt1.c0) NOT NULL) END, ((vt1.c1 COLLATE RTRIM)-((((NULL)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))) ASC;
SELECT ALL * FROM vt1 WHERE ((+ (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))) ORDER BY (((((((((vt1.c0 IN ()))OR(((vt1.c0)IS(vt1.c0)))))AND(LIKELY(vt1.c0))))AND(vt1.c0 COLLATE NOCASE)))OR((- (vt1.c0))))  NULLS FIRST;
SELECT * FROM vt1 WHERE ((+ (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END))) ORDER BY vt1.c1 ASC  NULLS FIRST, CASE WHEN 0.6983850636689803 THEN (((vt1.c1, vt1.c1, vt1.c1))=((vt1.c1, vt1.c0, vt1.c1))) ELSE ((vt1.c0) NOT NULL) END, ((vt1.c1 COLLATE RTRIM)-((((NULL)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))))) ASC;
SELECT ALL COUNT(*) FROM v0 WHERE (CASE WHEN v0.c2 THEN v0.c0 WHEN (((v0.c2))=((v0.c1))) THEN CASE WHEN v0.c2 THEN v0.c1 END WHEN ((v0.c0)<>(v0.c1)) THEN '-2046289318' WHEN (v0.c1 IN (v0.c0, v0.c1, v0.c0)) THEN (('xHn')<=(v0.c1)) END) ORDER BY '' ASC  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE (CASE WHEN v0.c2 THEN v0.c0 WHEN (((v0.c2))=((v0.c1))) THEN CASE WHEN v0.c2 THEN v0.c1 END WHEN ((v0.c0)!=(v0.c1)) THEN '-2046289318' WHEN (v0.c1 IN (v0.c0, v0.c1, v0.c0)) THEN (('xHn')<=(v0.c1)) END) ORDER BY ((v0.c1)LIKE((v0.c2 IN (v0.c2, v0.c0)))) ASC, CAST(v0.c2 AS NUMERIC) COLLATE NOCASE, CAST(((((v0.c2)OR(v0.c2)))OR(v0.c2)) AS NUMERIC)  NULLS LAST LIMIT 1;
SELECT * FROM v0 WHERE (((CAST(v0.c2 AS INTEGER))>(NULLIF(DISTINCT v0.c0, v0.c2))));
SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c2 AS INTEGER))>(NULLIF(DISTINCT v0.c0, v0.c2)))) ORDER BY (((((((((((((((v0.c2, v0.c0))>((v0.c1, v0.c1))))OR(((v0.c0)%(v0.c1)))))OR(LIKELIHOOD(v0.c2, v0.c2))))AND(JULIANDAY(v0.c0, v0.c0, v0.c0, v0.c0))))AND((v0.c0 IN ()))))OR(((v0.c2)LIKE('䑊')))))AND(((v0.c2)%(v0.c2)))), ((((v0.c1)%(0x7c6eacf6)))-(CASE v0.c2  WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END)) DESC  NULLS FIRST, (((v0.c0, v0.c2, v0.c1)) NOT BETWEEN (((v0.c1 IN (v0.c1, v0.c2)), NULL, CASE v0.c0  WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END)) AND ((CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN x'e2' THEN v0.c1 WHEN v0.c1 THEN v0.c1 END, (~ (v0.c1)), CAST(x'64ac' AS NUMERIC)))) LIMIT 0X1;
SELECT * FROM v0 WHERE (((CAST(v0.c2 AS INTEGER))>(NULLIF(DISTINCT v0.c0, v0.c2))));
SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c2 AS INTEGER))>(NULLIF(DISTINCT v0.c0, v0.c2)))) ORDER BY (((((((((((((((v0.c2, v0.c0))>((v0.c1, v0.c1))))OR(((v0.c0)%(v0.c1)))))OR(LIKELIHOOD(v0.c2, v0.c2))))AND(JULIANDAY(v0.c0, v0.c0, v0.c0, v0.c0))))AND((v0.c0 IN ()))))OR(((v0.c2)LIKE('䑊')))))AND(((v0.c2)%(v0.c2)))), ((((v0.c1)%(0x7c6eacf6)))-(CASE v0.c2  WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END)) DESC  NULLS FIRST, (((v0.c0, v0.c2, v0.c1)) NOT BETWEEN (((v0.c1 IN (v0.c1, v0.c2)), NULL, CASE v0.c0  WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END)) AND ((CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN x'e2' THEN v0.c1 WHEN v0.c1 THEN v0.c1 END, (~ (v0.c1)), CAST(x'64ac' AS NUMERIC)))) LIMIT 0X1;
SELECT * FROM vt1, v0 WHERE (CASE ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1))  WHEN (((vt1.c1, v0.c1))>((vt1.c0, vt1.c0))) THEN NULL END);
SELECT DISTINCT * FROM vt1, v0 WHERE (CASE ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1))  WHEN (((vt1.c1, v0.c1))>((vt1.c0, vt1.c0))) THEN NULL END) ORDER BY (((((NOT (v0.c1)))AND(vt1.c0 COLLATE RTRIM)))AND(((v0.c1)IS NOT(v0.c1)))) ASC, CASE WHEN v0.c1 THEN vt1.c0 WHEN 599615201 THEN vt1.c0 ELSE v0.c0 END COLLATE BINARY COLLATE NOCASE;
SELECT * FROM vt1, v0 WHERE (CASE ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1))  WHEN (((vt1.c1, v0.c1))>((vt1.c0, vt1.c0))) THEN NULL END);
SELECT DISTINCT * FROM vt1, v0 WHERE (CASE ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1))  WHEN (((vt1.c1, v0.c1))>((vt1.c0, vt1.c0))) THEN NULL END) ORDER BY (((((NOT (v0.c1)))AND(vt1.c0 COLLATE RTRIM)))AND(((v0.c1)IS NOT(v0.c1)))) ASC, CASE WHEN v0.c1 THEN vt1.c0 WHEN 599615201 THEN vt1.c0 ELSE v0.c0 END COLLATE BINARY COLLATE NOCASE;
SELECT ALL * FROM vt1 WHERE ((~ ((((('591103148')AND(vt1.c1)))AND(vt1.c0)))));
SELECT * FROM vt1 WHERE ((((~ ((((('591103148')AND(vt1.c1)))AND(vt1.c0)))))AND(((((((vt1.c1 COLLATE NOCASE)OR(((vt1.c0)<(vt1.c1)))))OR(((vt1.c0) ISNULL))))AND((~ (vt1.c1))))))) ORDER BY CASE WHEN ((vt1.c0)>>(vt1.c0)) THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 COLLATE RTRIM WHEN (((vt1.c0, vt1.c0, vt1.c1, vt1.c1, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0, vt1.c1, vt1.c1))) THEN '-1646547518' WHEN ((vt1.c1) NOTNULL) THEN ((vt1.c1) ISNULL) ELSE (((vt1.c0, vt1.c0, vt1.c1, vt1.c0))<>((vt1.c1, NULL, vt1.c1, 0x5acd4387))) END;
SELECT ALL * FROM vt1 WHERE ((~ ((((('591103148')AND(vt1.c1)))AND(vt1.c0)))));
SELECT * FROM vt1 WHERE ((((~ ((((('591103148')AND(vt1.c1)))AND(vt1.c0)))))AND(((((((vt1.c1 COLLATE NOCASE)OR(((vt1.c0)<(vt1.c1)))))OR(((vt1.c0) ISNULL))))AND((~ (vt1.c1))))))) ORDER BY CASE WHEN ((vt1.c0)>>(vt1.c0)) THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 COLLATE RTRIM WHEN (((vt1.c0, vt1.c0, vt1.c1, vt1.c1, vt1.c0))=((vt1.c0, vt1.c0, vt1.c0, vt1.c1, vt1.c1))) THEN '-1646547518' WHEN ((vt1.c1) NOTNULL) THEN ((vt1.c1) ISNULL) ELSE (((vt1.c0, vt1.c0, vt1.c1, vt1.c0))<>((vt1.c1, NULL, vt1.c1, 0x5acd4387))) END;
SELECT * FROM v0, vt1 WHERE (((((v0.c0)OR(vt1.c1)))AND(v0.c1)) COLLATE BINARY) ORDER BY CASE WHEN v0.c0 COLLATE RTRIM THEN v0.c2 COLLATE RTRIM ELSE v0.c2 COLLATE RTRIM END  NULLS FIRST, (((vt1.c0))<=(((vt1.c1 IN (vt1.c0))))) DESC;
SELECT * FROM v0, vt1 WHERE (((((((v0.c0)OR(vt1.c1)))AND(v0.c1)) COLLATE BINARY)AND((- (((0.547712982966841)-(v0.c0))))))) ORDER BY ((((v0.c2)<(vt1.c0))) NOT BETWEEN (((((((vt1.c1)AND(v0.c2)))OR(0.07023379909392802)))AND(vt1.c1))) AND (HEX(vt1.c0))) LIMIT 7 INTERSECT SELECT * FROM v0, vt1 WHERE ((((((v0.c2)OR(v0.c2)))OR(vt1.c0)) IN (v0.c0, ((vt1.c0)GLOB(v0.c0))))) ORDER BY ((((v0.c2)<(vt1.c0))) NOT BETWEEN (((((((vt1.c1)AND(v0.c2)))OR(0.07023379909392802)))AND(vt1.c1))) AND (HEX(vt1.c0))) LIMIT 7;
SELECT * FROM v0, vt1 WHERE (((((v0.c0)OR(vt1.c1)))AND(v0.c1)) COLLATE BINARY) ORDER BY CASE WHEN v0.c0 COLLATE RTRIM THEN v0.c2 COLLATE RTRIM ELSE v0.c2 COLLATE RTRIM END  NULLS FIRST, (((vt1.c0))<=(((vt1.c1 IN (vt1.c0))))) DESC;
SELECT * FROM v0, vt1 WHERE (((((((v0.c0)OR(vt1.c1)))AND(v0.c1)) COLLATE BINARY)AND((- (((0.547712982966841)-(v0.c0))))))) ORDER BY ((((v0.c2)<(vt1.c0))) NOT BETWEEN (((((((vt1.c1)AND(v0.c2)))OR(0.07023379909392802)))AND(vt1.c1))) AND (HEX(vt1.c0))) LIMIT 7 INTERSECT SELECT * FROM v0, vt1 WHERE ((((((v0.c2)OR(v0.c2)))OR(vt1.c0)) IN (v0.c0, ((vt1.c0)GLOB(v0.c0))))) ORDER BY ((((v0.c2)<(vt1.c0))) NOT BETWEEN (((((((vt1.c1)AND(v0.c2)))OR(0.07023379909392802)))AND(vt1.c1))) AND (HEX(vt1.c0))) LIMIT 7;
SELECT * FROM vt1 WHERE (((vt1.c1) NOT BETWEEN (((((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))AND(1.451872936E9))) AND (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))AND(vt1.c1)))));
SELECT * FROM vt1 WHERE (((vt1.c1) NOT BETWEEN (((((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))AND(1.451872936E9))) AND (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))AND(vt1.c1))))) ORDER BY (((vt1.c0))>=(('B{U'))) COLLATE BINARY DESC, (- (((vt1.c1)GLOB(vt1.c0)))) LIMIT 0;
SELECT * FROM vt1 WHERE (((vt1.c1) NOT BETWEEN (((((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))AND(1.451872936E9))) AND (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))AND(vt1.c1)))));
SELECT * FROM vt1 WHERE (((vt1.c1) NOT BETWEEN (((((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))AND(1.451872936E9))) AND (((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))AND(vt1.c1))))) ORDER BY (((vt1.c0))>=(('B{U'))) COLLATE BINARY DESC, (- (((vt1.c1)GLOB(vt1.c0)))) LIMIT 0;
SELECT * FROM v0 WHERE (LIKELY(DISTINCT CASE v0.c1  WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END));
SELECT DISTINCT * FROM v0 WHERE (((LIKELY(DISTINCT CASE v0.c1  WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END))AND(((((v0.c1)==(v0.c1)))<<((~ (v0.c2))))))) ORDER BY (((v0.c1 IN (v0.c0))) IS FALSE)  NULLS LAST, v0.c2 ASC, highlight((NOT (v0.c0)), v0.c2, (((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c2))), (((v0.c0, v0.c0))<((v0.c2, v0.c2))))  NULLS LAST;
SELECT * FROM v0 WHERE (LIKELY(DISTINCT CASE v0.c1  WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END));
SELECT DISTINCT * FROM v0 WHERE (((LIKELY(DISTINCT CASE v0.c1  WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END))AND(((((v0.c1)==(v0.c1)))<<((~ (v0.c2))))))) ORDER BY (((v0.c1 IN (v0.c0))) IS FALSE)  NULLS LAST, v0.c2 ASC, highlight((NOT (v0.c0)), v0.c2, (((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c2))), (((v0.c0, v0.c0))<((v0.c2, v0.c2))))  NULLS LAST;
SELECT ALL MIN(v0.c2) FROM v0 WHERE (((((v0.c0) NOT NULL))GLOB(((v0.c0)*(v0.c1)))));
SELECT ALL MIN(v0.c2) FROM v0 WHERE (((((((v0.c0) NOT NULL))GLOB(((v0.c0)*(v0.c1)))))AND(NULL))) INTERSECT SELECT ALL MIN(v0.c2) FROM v0 WHERE ((((- (v0.c1)))!=(((v0.c1) NOT BETWEEN (v0.c2) AND (0.24693281823925506)))));
SELECT ALL * FROM v0 WHERE (((((((v0.c2) IS FALSE))OR((~ (v0.c0)))))AND(((v0.c0)AND(v0.c1))))) ORDER BY ((((v0.c0) BETWEEN (v0.c2) AND (v0.c0)))LIKE(((v0.c2) ISNULL))) DESC  NULLS FIRST, v0.c0 DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((((((((v0.c2) IS FALSE))OR((~ (v0.c0)))))AND(((v0.c0)AND(v0.c1)))))AND((((v0.c2, v0.c2, v0.c0)) BETWEEN ((v0.c2, ((x'')AND(v0.c0)), (v0.c2 IN (v0.c0)))) AND ((((((v0.c1)OR(v0.c0)))AND(v0.c0)), CAST(v0.c1 AS REAL), ((v0.c0)+(v0.c0)))))))) ORDER BY ((((v0.c0) BETWEEN (v0.c2) AND (v0.c0)))LIKE(((v0.c2) ISNULL))) DESC  NULLS FIRST, v0.c0 DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c1, v0.c1))=((v0.c0, v0.c0))) COLLATE BINARY) ORDER BY ((((v0.c0) BETWEEN (v0.c2) AND (v0.c0)))LIKE(((v0.c2) ISNULL))) DESC  NULLS FIRST, v0.c0 DESC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (((((((v0.c2) IS FALSE))OR((~ (v0.c0)))))AND(((v0.c0)AND(v0.c1))))) ORDER BY ((((v0.c0) BETWEEN (v0.c2) AND (v0.c0)))LIKE(((v0.c2) ISNULL))) DESC  NULLS FIRST, v0.c0 DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((((((((v0.c2) IS FALSE))OR((~ (v0.c0)))))AND(((v0.c0)AND(v0.c1)))))AND((((v0.c2, v0.c2, v0.c0)) BETWEEN ((v0.c2, ((x'')AND(v0.c0)), (v0.c2 IN (v0.c0)))) AND ((((((v0.c1)OR(v0.c0)))AND(v0.c0)), CAST(v0.c1 AS REAL), ((v0.c0)+(v0.c0)))))))) ORDER BY ((((v0.c0) BETWEEN (v0.c2) AND (v0.c0)))LIKE(((v0.c2) ISNULL))) DESC  NULLS FIRST, v0.c0 DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c1, v0.c1))=((v0.c0, v0.c0))) COLLATE BINARY) ORDER BY ((((v0.c0) BETWEEN (v0.c2) AND (v0.c0)))LIKE(((v0.c2) ISNULL))) DESC  NULLS FIRST, v0.c0 DESC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1, v0 WHERE ((+ (0xffffffffe1e4ef7a))) ORDER BY (((((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))OR(v0.c1)))OR(vt1.c1)))AND(v0.c0)) IN (((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c0)), CAST(0xffffffffd5e1d07f AS REAL))) DESC  NULLS FIRST, CASE WHEN vt1.c1 COLLATE RTRIM THEN ((v0.c1)<(NULL)) WHEN ((v0.c1) NOT NULL) THEN ((vt1.c0) BETWEEN (v0.c0) AND (vt1.c0)) END;
SELECT ALL * FROM vt1, v0 WHERE ((((+ (0xffffffffe1e4ef7a)))AND('|i'))) ORDER BY (((((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))OR(v0.c1)))OR(vt1.c1)))AND(v0.c0)) IN (((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c0)), CAST(0Xffffffffd5e1d07f AS REAL))) DESC  NULLS FIRST, CASE WHEN vt1.c1 COLLATE RTRIM THEN ((v0.c1)<(NULL)) WHEN ((v0.c1) NOT NULL) THEN ((vt1.c0) BETWEEN (v0.c0) AND (vt1.c0)) END;
SELECT * FROM vt1, v0 WHERE ((+ (0xffffffffe1e4ef7a))) ORDER BY (((((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))OR(v0.c1)))OR(vt1.c1)))AND(v0.c0)) IN (((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c0)), CAST(0xffffffffd5e1d07f AS REAL))) DESC  NULLS FIRST, CASE WHEN vt1.c1 COLLATE RTRIM THEN ((v0.c1)<(NULL)) WHEN ((v0.c1) NOT NULL) THEN ((vt1.c0) BETWEEN (v0.c0) AND (vt1.c0)) END;
SELECT ALL * FROM vt1, v0 WHERE ((((+ (0xffffffffe1e4ef7a)))AND('|i'))) ORDER BY (((((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))OR(v0.c1)))OR(vt1.c1)))AND(v0.c0)) IN (((vt1.c1) NOT BETWEEN (v0.c1) AND (vt1.c0)), CAST(0Xffffffffd5e1d07f AS REAL))) DESC  NULLS FIRST, CASE WHEN vt1.c1 COLLATE RTRIM THEN ((v0.c1)<(NULL)) WHEN ((v0.c1) NOT NULL) THEN ((vt1.c0) BETWEEN (v0.c0) AND (vt1.c0)) END;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((CAST(vt1.c1 AS TEXT))LIKE((~ (vt1.c0)))) WHERE (((((vt1.c1)|(v0.c0))) ISNULL));
SELECT ALL * FROM v0 INNER JOIN vt1 ON ((CAST(vt1.c1 AS TEXT))LIKE((~ (vt1.c0)))) WHERE (((((vt1.c1)|(v0.c0))) ISNULL)) LIMIT 0x0;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON ((CAST(vt1.c1 AS TEXT))LIKE((~ (vt1.c0)))) WHERE (((((vt1.c1)|(v0.c0))) ISNULL));
SELECT ALL * FROM v0 INNER JOIN vt1 ON ((CAST(vt1.c1 AS TEXT))LIKE((~ (vt1.c0)))) WHERE (((((vt1.c1)|(v0.c0))) ISNULL)) LIMIT 0x0;
SELECT * FROM vt1 WHERE (CASE vt1.c1  WHEN ((vt1.c1)-(vt1.c1)) THEN '-1783185162' WHEN ((vt1.c0)GLOB(vt1.c0)) THEN DATETIME(vt1.c0, vt1.c0, vt1.c1) ELSE 0.6841350305462701 END);
SELECT ALL * FROM vt1 WHERE (CASE vt1.c1  WHEN ((vt1.c1)-(vt1.c1)) THEN '-1783185162' WHEN ((vt1.c0)GLOB(vt1.c0)) THEN DATETIME(vt1.c0, vt1.c0, vt1.c1) ELSE 0.6841350305462701 END) LIMIT 0X2 INTERSECT SELECT * FROM vt1 WHERE (NULL) LIMIT 0x2;
SELECT * FROM vt1 WHERE (CASE vt1.c1  WHEN ((vt1.c1)-(vt1.c1)) THEN '-1783185162' WHEN ((vt1.c0)GLOB(vt1.c0)) THEN DATETIME(vt1.c0, vt1.c0, vt1.c1) ELSE 0.6841350305462701 END);
SELECT ALL * FROM vt1 WHERE (CASE vt1.c1  WHEN ((vt1.c1)-(vt1.c1)) THEN '-1783185162' WHEN ((vt1.c0)GLOB(vt1.c0)) THEN DATETIME(vt1.c0, vt1.c0, vt1.c1) ELSE 0.6841350305462701 END) LIMIT 0X2 INTERSECT SELECT * FROM vt1 WHERE (NULL) LIMIT 0x2;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (CASE (v0.c1 IN (v0.c2))  WHEN 0.6707276500287975 COLLATE NOCASE THEN HEX(DISTINCT 1260983933) WHEN ((v0.c0)<=('-316303965')) THEN v0.c0 COLLATE BINARY WHEN LIKE(v0.c1, v0.c2, '[') THEN (v0.c2 IN ()) WHEN (NOT (v0.c1)) THEN (- (v0.c0)) ELSE (NOT (v0.c0)) END);
SELECT ALL MIN(v0.c1) FROM v0 WHERE (((CASE (v0.c1 IN (v0.c2))  WHEN 0.6707276500287975 COLLATE NOCASE THEN HEX(DISTINCT 0X4b29167d) WHEN ((v0.c0)<=('-316303965')) THEN v0.c0 COLLATE BINARY WHEN LIKE(v0.c1, v0.c2, '[') THEN (v0.c2 IN ()) WHEN (NOT (v0.c1)) THEN (- (v0.c0)) ELSE (NOT (v0.c0)) END)AND(v0.c1)));
SELECT MIN(v0.c1) FROM v0 WHERE (NULL) ORDER BY 0.45857813561591665 DESC;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (NULL) ORDER BY ((CASE v0.c1  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END) IS FALSE), (((v0.c1 IN ())) NOT BETWEEN (((v0.c0) NOT NULL)) AND ('')) DESC  NULLS LAST;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE (NULL) ORDER BY v0.c2 DESC  NULLS FIRST, (((('J')IS(vt1.c0)))<<(CAST(vt1.c1 AS BLOB)))  NULLS LAST;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE (NULL) ORDER BY v0.c2 DESC  NULLS FIRST, (((('J')IS(vt1.c0)))<<(CAST(vt1.c1 AS BLOB)))  NULLS LAST;
SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE ('2011659437');
SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE ((('2011659437')AND((((v0.c0)) BETWEEN ((((vt1.c0)IS(v0.c2)))) AND ((v0.c1 COLLATE BINARY))))));
SELECT COUNT(*) FROM vt1 WHERE (vt1.c1) ORDER BY ((CASE NULL  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN '-1844818550' ELSE vt1.c1 END) BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1))) AND (vt1.c0 COLLATE RTRIM)) ASC, CASE CASE vt1.c1  WHEN vt1.c0 THEN NULL WHEN vt1.c1 THEN vt1.c0 WHEN x'' THEN vt1.c1 END  WHEN CAST(vt1.c1 AS TEXT) THEN ((vt1.c0) IS FALSE) ELSE (((x'a4a1c446', vt1.c0, vt1.c0)) BETWEEN ((vt1.c1, vt1.c0, vt1.c1)) AND ((vt1.c1, x'', vt1.c0))) END DESC, (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN 1.269145269E9 THEN vt1.c0 END IN (((vt1.c1) IS TRUE))) ASC;
SELECT COUNT(*) FROM vt1 WHERE (((vt1.c1)AND((((0X38b0c1da)IS NOT(vt1.c1)) IN ())))) ORDER BY ((CASE NULL  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN '-1844818550' ELSE vt1.c1 END) BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1))) AND (vt1.c0 COLLATE RTRIM)) ASC, CASE CASE vt1.c1  WHEN vt1.c0 THEN NULL WHEN vt1.c1 THEN vt1.c0 WHEN x'' THEN vt1.c1 END  WHEN CAST(vt1.c1 AS TEXT) THEN ((vt1.c0) IS FALSE) ELSE (((x'a4a1c446', vt1.c0, vt1.c0)) BETWEEN ((vt1.c1, vt1.c0, vt1.c1)) AND ((vt1.c1, x'', vt1.c0))) END DESC, (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN 1.269145269E9 THEN vt1.c0 END IN (((vt1.c1) IS TRUE))) ASC LIMIT 0x3;
SELECT ALL * FROM v0 WHERE (NULL);
SELECT ALL * FROM v0 WHERE (((NULL)AND(((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN x'7c' WHEN v0.c0 THEN NULL WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)=((((v0.c0, v0.c2, v0.c2))<>((v0.c1, v0.c0, v0.c2)))))))) LIMIT 0x1 INTERSECT SELECT * FROM v0 WHERE (((((((v0.c2)>=(v0.c1)))AND((v0.c0 IN (v0.c0)))))OR(((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))))) LIMIT 0X1;
SELECT ALL * FROM v0 WHERE (NULL);
SELECT ALL * FROM v0 WHERE (((NULL)AND(((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN x'7c' WHEN v0.c0 THEN NULL WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)=((((v0.c0, v0.c2, v0.c2))<>((v0.c1, v0.c0, v0.c2)))))))) LIMIT 0x1 INTERSECT SELECT * FROM v0 WHERE (((((((v0.c2)>=(v0.c1)))AND((v0.c0 IN (v0.c0)))))OR(((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))))) LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt1 WHERE (NULLIF((('1029704324') ISNULL), ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))) ORDER BY ((((((((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0)))OR((NOT (vt1.c0)))))OR(((vt1.c1)<=(vt1.c1)))))AND(((((vt1.c0)OR(vt1.c1)))OR(vt1.c1)))))OR(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)))) ASC  NULLS FIRST, CASE WHEN (((vt1.c0))>((vt1.c1))) THEN ((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)) END DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE (((NULLIF((('1029704324') ISNULL), ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0))))AND(((CAST(vt1.c0 AS TEXT)) NOT BETWEEN ((- (vt1.c1))) AND (((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1))))))) ORDER BY ((vt1.c0) BETWEEN (vt1.c1) AND (NULL)) COLLATE NOCASE INTERSECT SELECT COUNT(*) FROM vt1 WHERE (vt1.c1) ORDER BY ((vt1.c0) BETWEEN (vt1.c1) AND (NULL)) COLLATE NOCASE;
SELECT ALL * FROM v0 WHERE (CAST((((v0.c0, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c2, v0.c2)) AND ((v0.c0, v0.c1, v0.c1, v0.c0))) AS REAL));
SELECT * FROM v0 WHERE (CAST((((v0.c0, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c2, v0.c2)) AND ((v0.c0, v0.c1, v0.c1, v0.c0))) AS REAL));
SELECT ALL * FROM v0 WHERE (CAST((((v0.c0, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c2, v0.c2)) AND ((v0.c0, v0.c1, v0.c1, v0.c0))) AS REAL));
SELECT * FROM v0 WHERE (CAST((((v0.c0, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c2, v0.c2)) AND ((v0.c0, v0.c1, v0.c1, v0.c0))) AS REAL));
SELECT MAX(vt1.c1) FROM v0, vt1 WHERE ((+ (((((v0.c2)AND(v0.c0)))OR(vt1.c1)))));
SELECT MAX(vt1.c1) FROM v0, vt1 WHERE ((((+ (((((v0.c2)AND(v0.c0)))OR(vt1.c1)))))AND((- ((- (v0.c2)))))));
SELECT MIN(vt1.c1) FROM vt1 WHERE ((((vt1.c0) IS TRUE) IN (json_type(x'd178f0'), (vt1.c1 IN ()))));
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE ((((vt1.c0) IS TRUE) IN (json_type(x'd178f0')))) LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (((CASE WHEN vt1.c1 THEN v0.c1 END)<(v0.c2 COLLATE BINARY)));
SELECT * FROM v0, vt1 WHERE (((CASE WHEN vt1.c1 THEN v0.c1 END)<(v0.c2 COLLATE BINARY))) ORDER BY CAST((v0.c2 IN (vt1.c1)) AS TEXT) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (((CASE WHEN vt1.c1 THEN v0.c1 END)<(v0.c2 COLLATE BINARY)));
SELECT * FROM v0, vt1 WHERE (((CASE WHEN vt1.c1 THEN v0.c1 END)<(v0.c2 COLLATE BINARY))) ORDER BY CAST((v0.c2 IN (vt1.c1)) AS TEXT) DESC  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (v0.c0) ORDER BY v0.c1 ASC, ((((((((vt1.c0) IS TRUE))AND(CAST(v0.c1 AS TEXT))))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END)))OR(CAST(v0.c2 AS NUMERIC)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE (v0.c0) ORDER BY v0.c1 ASC, ((((((((vt1.c0) IS TRUE))AND(CAST(v0.c1 AS TEXT))))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END)))OR(CAST(v0.c2 AS NUMERIC)))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((+ ((~ (vt1.c1))))) ORDER BY v0.c1 ASC, ((((((((vt1.c0) IS TRUE))AND(CAST(v0.c1 AS TEXT))))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END)))OR(CAST(v0.c2 AS NUMERIC)))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1, v0 WHERE (v0.c0) ORDER BY v0.c1 ASC, ((((((((vt1.c0) IS TRUE))AND(CAST(v0.c1 AS TEXT))))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END)))OR(CAST(v0.c2 AS NUMERIC)))  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE (v0.c0) ORDER BY v0.c1 ASC, ((((((((vt1.c0) IS TRUE))AND(CAST(v0.c1 AS TEXT))))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END)))OR(CAST(v0.c2 AS NUMERIC)))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((+ ((~ (vt1.c1))))) ORDER BY v0.c1 ASC, ((((((((vt1.c0) IS TRUE))AND(CAST(v0.c1 AS TEXT))))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END)))OR(CAST(v0.c2 AS NUMERIC)))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt1, v0 WHERE (v0.c0) ORDER BY TOTAL_CHANGES()  NULLS LAST, (NULLIF(DISTINCT vt1.c1, v0.c0) IN (((vt1.c0) IS FALSE)));
SELECT ALL * FROM vt1, v0 WHERE (v0.c0) ORDER BY CAST(((v0.c1) NOTNULL) AS INTEGER)  NULLS LAST, ((v0.c1) IS FALSE) COLLATE BINARY COLLATE RTRIM  NULLS FIRST, (((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) IN ())  NULLS LAST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (json_object((x'919f' IN (v0.c1, vt1.c0)), (~ (v0.c2)), ((0.42119120460291926)*(v0.c1)), UNLIKELY(DISTINCT v0.c0), ((vt1.c0)/(v0.c2)), ((v0.c1)OR(vt1.c0)))) ORDER BY CAST(((v0.c1) NOTNULL) AS INTEGER)  NULLS LAST, ((v0.c1) IS FALSE) COLLATE BINARY COLLATE RTRIM  NULLS FIRST, (((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) IN ())  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE (v0.c0) ORDER BY TOTAL_CHANGES()  NULLS LAST, (NULLIF(DISTINCT vt1.c1, v0.c0) IN (((vt1.c0) IS FALSE)));
SELECT ALL * FROM vt1, v0 WHERE (v0.c0) ORDER BY CAST(((v0.c1) NOTNULL) AS INTEGER)  NULLS LAST, ((v0.c1) IS FALSE) COLLATE BINARY COLLATE RTRIM  NULLS FIRST, (((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) IN ())  NULLS LAST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (json_object((x'919f' IN (v0.c1, vt1.c0)), (~ (v0.c2)), ((0.42119120460291926)*(v0.c1)), UNLIKELY(DISTINCT v0.c0), ((vt1.c0)/(v0.c2)), ((v0.c1)OR(vt1.c0)))) ORDER BY CAST(((v0.c1) NOTNULL) AS INTEGER)  NULLS LAST, ((v0.c1) IS FALSE) COLLATE BINARY COLLATE RTRIM  NULLS FIRST, (((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c2)) IN ())  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (CASE WHEN v0.c1 THEN (- (v0.c2)) WHEN '' THEN LIKELY(vt1.c1) END);
SELECT DISTINCT * FROM v0, vt1 WHERE (((CASE WHEN v0.c1 THEN (- (v0.c2)) WHEN '' THEN LIKELY(vt1.c1) END)AND(load_extension((v0.c0 IN ()), (((v0.c2, NULL, vt1.c1))>=((vt1.c0, vt1.c0, vt1.c1)))))));
SELECT * FROM v0, vt1 WHERE (CASE WHEN v0.c1 THEN (- (v0.c2)) WHEN '' THEN LIKELY(vt1.c1) END);
SELECT DISTINCT * FROM v0, vt1 WHERE (((CASE WHEN v0.c1 THEN (- (v0.c2)) WHEN '' THEN LIKELY(vt1.c1) END)AND(load_extension((v0.c0 IN ()), (((v0.c2, NULL, vt1.c1))>=((vt1.c0, vt1.c0, vt1.c1)))))));
SELECT COUNT(*) FROM vt1 WHERE ((~ (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))));
SELECT ALL COUNT(*) FROM vt1 WHERE ((~ (((((vt1.c0)AND(vt1.c0)))AND(vt1.c0))))) INTERSECT SELECT COUNT(*) FROM vt1 WHERE ((((((vt1.c0))>=((vt1.c1)))) NOT NULL));
SELECT * FROM v0, vt1 WHERE (json_array_length(v0.c1));
SELECT DISTINCT * FROM v0, vt1 WHERE (((json_array_length(v0.c1))AND(vt1.c1))) ORDER BY ((((((((((((((((((v0.c2)OR(vt1.c1)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c0)))AND((NOT (v0.c0)))))AND(((((v0.c2)OR(vt1.c0)))OR(v0.c1)))))AND(((v0.c1)/(v0.c0)))))OR(v0.c2)))AND(json_insert(vt1.c1, v0.c1, v0.c1, vt1.c0)))  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (json_array_length(v0.c1));
SELECT DISTINCT * FROM v0, vt1 WHERE (((json_array_length(v0.c1))AND(vt1.c1))) ORDER BY ((((((((((((((((((v0.c2)OR(vt1.c1)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c0)))AND((NOT (v0.c0)))))AND(((((v0.c2)OR(vt1.c0)))OR(v0.c1)))))AND(((v0.c1)/(v0.c0)))))OR(v0.c2)))AND(json_insert(vt1.c1, v0.c1, v0.c1, vt1.c0)))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((- (vt1.c1)) IN (((vt1.c1) NOTNULL))));
SELECT * FROM vt1 WHERE (((- (vt1.c1)) IN (((vt1.c1) NOTNULL)))) ORDER BY ((vt1.c1)/(vt1.c1)) COLLATE RTRIM, ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))=(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN x'2b6b8f99' THEN vt1.c0 ELSE vt1.c1 END)) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT * FROM vt1 WHERE (((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)))!=((- (vt1.c0))))) ORDER BY ((vt1.c1)/(vt1.c1)) COLLATE RTRIM, ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))=(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN x'2b6b8f99' THEN vt1.c0 ELSE vt1.c1 END)) DESC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (((- (vt1.c1)) IN (((vt1.c1) NOTNULL))));
SELECT * FROM vt1 WHERE (((- (vt1.c1)) IN (((vt1.c1) NOTNULL)))) ORDER BY ((vt1.c1)/(vt1.c1)) COLLATE RTRIM, ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))=(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN x'2b6b8f99' THEN vt1.c0 ELSE vt1.c1 END)) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT * FROM vt1 WHERE (((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)))!=((- (vt1.c0))))) ORDER BY ((vt1.c1)/(vt1.c1)) COLLATE RTRIM, ((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))=(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN x'2b6b8f99' THEN vt1.c0 ELSE vt1.c1 END)) DESC  NULLS LAST LIMIT 0X0;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (((((v0.c2)>(v0.c2))) IS TRUE));
SELECT MAX(v0.c0) FROM v0 WHERE (((((((v0.c2)>(v0.c2))) IS TRUE))AND((((v0.c1 IN (v0.c2))) NOT BETWEEN (CAST(v0.c0 AS NUMERIC)) AND ((((-2142222862)) NOT BETWEEN ((v0.c0)) AND ((v0.c0)))))))) ORDER BY CASE WHEN ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) THEN v0.c0 WHEN CASE x''  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END THEN CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END WHEN v0.c1 COLLATE RTRIM THEN (v0.c0 IN (v0.c2, v0.c2)) WHEN ((((((((v0.c1)OR(v0.c0)))OR(v0.c2)))AND(v0.c2)))AND(v0.c0)) THEN ((((((((v0.c0)AND(v0.c1)))OR(v0.c2)))AND(v0.c2)))AND(NULL)) END  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (((NULL)/(vt1.c0 COLLATE RTRIM))) ORDER BY (NOT (NULL)) ASC, (((0.38206797526093805)||(vt1.c0)) IN ((~ (vt1.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((NULL)/(vt1.c0 COLLATE RTRIM))) ORDER BY (NOT (NULL)) ASC, (((0.38206797526093805)||(vt1.c0)) IN ((~ (vt1.c0))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((NULL)/(vt1.c0 COLLATE RTRIM))) ORDER BY (NOT (NULL)) ASC, (((0.38206797526093805)||(vt1.c0)) IN ((~ (vt1.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((NULL)/(vt1.c0 COLLATE RTRIM))) ORDER BY (NOT (NULL)) ASC, (((0.38206797526093805)||(vt1.c0)) IN ((~ (vt1.c0))))  NULLS FIRST LIMIT 0;
SELECT MAX(v0.c0) FROM v0, vt1 WHERE ((((CASE WHEN '橚犽LAB+' THEN v0.c1 WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 ELSE v0.c1 END))<=(((((vt1.c1, vt1.c0, vt1.c1, v0.c2))=((vt1.c0, v0.c0, v0.c2, v0.c1)))))));
SELECT MAX(v0.c0) FROM v0, vt1 WHERE ((((((CASE WHEN '橚犽LAB+' THEN v0.c1 WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 ELSE v0.c1 END))=(((((vt1.c1, vt1.c0, vt1.c1, v0.c2))=((vt1.c0, v0.c0, v0.c2, v0.c1)))))))AND((~ (COALESCE(NULL, v0.c2)))))) ORDER BY v0.c1 COLLATE NOCASE, ((((v0.c1) IS FALSE)) BETWEEN (((vt1.c1)>(v0.c0))) AND (((((((vt1.c0)OR(v0.c0)))AND(v0.c1)))AND(vt1.c0))));
SELECT ALL MIN(vt1.c0) FROM v0, vt1 WHERE ((~ (((v0.c0) IS FALSE)))) ORDER BY LENGTH(((vt1.c0)>>(v0.c1))) DESC;
SELECT DISTINCT MIN(vt1.c0) FROM v0, vt1 WHERE ((~ (((v0.c0) IS FALSE)))) ORDER BY LENGTH(((vt1.c0)>>(v0.c1))) DESC INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM v0, vt1 WHERE (CASE WHEN '-1112757294' COLLATE BINARY THEN ((v0.c1) NOTNULL) ELSE (NULL IN ()) END) ORDER BY LENGTH(((vt1.c0)>>(v0.c1))) DESC;
SELECT COUNT(*) FROM vt1, v0 WHERE ((((v0.c0, v0.c2, v0.c2, vt1.c0)) BETWEEN ((((v0.c2)GLOB(0.5604317419984318)), v0.c1, ((vt1.c1) NOT NULL), ((vt1.c0)/(v0.c1)))) AND ((((('276291186', vt1.c0))!=((v0.c1, v0.c2))), (((vt1.c1, v0.c1, v0.c0)) NOT BETWEEN ((vt1.c1, vt1.c0, v0.c2)) AND ((v0.c1, v0.c1, v0.c0))), vt1.c1 COLLATE BINARY, NULL)))) ORDER BY (((((((((vt1.c1)OR(v0.c2)))AND(vt1.c0)))OR(v0.c0))))>((v0.c1 COLLATE RTRIM))), ((((((v0.c2 COLLATE RTRIM)OR((('-1083925622') BETWEEN (vt1.c1) AND (x'')))))AND(((v0.c1) ISNULL))))AND(NULL))  NULLS LAST, ((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c1)) COLLATE NOCASE;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((((((v0.c0, v0.c2, v0.c2, vt1.c0)) BETWEEN ((((v0.c2)GLOB(0.5604317419984318)), v0.c1, ((vt1.c1) NOT NULL), ((vt1.c0)/(v0.c1)))) AND ((((('276291186', vt1.c0))!=((v0.c1, v0.c2))), (((vt1.c1, v0.c1, v0.c0)) NOT BETWEEN ((vt1.c1, vt1.c0, v0.c2)) AND ((v0.c1, v0.c1, v0.c0))), vt1.c1 COLLATE BINARY, NULL))))AND((((v0.c0, ((vt1.c0)OR(v0.c1)), (v0.c2 IN (v0.c1, vt1.c1)), ((v0.c1) BETWEEN (v0.c0) AND (vt1.c1))))<>((((v0.c0)AND(v0.c0)), SQLITE_SOURCE_ID(), ((v0.c1) BETWEEN (v0.c0) AND (v0.c1)), vt1.c1)))))) ORDER BY (((((((((vt1.c1)OR(v0.c2)))AND(vt1.c0)))OR(v0.c0))))>((v0.c1 COLLATE RTRIM))), ((((((v0.c2 COLLATE RTRIM)OR((('-1083925622') BETWEEN (vt1.c1) AND (x'')))))AND(((v0.c1) ISNULL))))AND(NULL))  NULLS LAST, ((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c1)) COLLATE NOCASE LIMIT 3;
SELECT * FROM vt1, v0 WHERE (((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))) IN ()));
SELECT ALL * FROM vt1, v0 WHERE (((((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))) IN ()))AND((((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt1.c1))))-(((vt1.c1) BETWEEN (v0.c0) AND (vt1.c1))))))) ORDER BY (((vt1.c1)LIKE('䁵')) IN ())  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))) IN ()));
SELECT ALL * FROM vt1, v0 WHERE (((((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c2))) IN ()))AND((((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt1.c1))))-(((vt1.c1) BETWEEN (v0.c0) AND (vt1.c1))))))) ORDER BY (((vt1.c1)LIKE('䁵')) IN ())  NULLS FIRST;
SELECT COUNT(*) FROM vt1, v0 WHERE (CASE ((v0.c1) NOT NULL)  WHEN CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN 'vEulQ.}y' WHEN v0.c1 THEN vt1.c1 ELSE v0.c0 END THEN ((vt1.c1)%(v0.c0)) WHEN v0.c2 COLLATE RTRIM THEN 0.887509795799455 ELSE SUBSTR(vt1.c1, vt1.c0) END) ORDER BY CASE WHEN CASE '1173938805'  WHEN v0.c1 THEN v0.c0 END THEN CASE WHEN vt1.c1 THEN v0.c0 WHEN v0.c0 THEN x'8da3' ELSE '381300539' END WHEN '' THEN CAST(v0.c1 AS NUMERIC) WHEN (('CS㯴_l‸')>>(vt1.c0)) THEN v0.c1 COLLATE BINARY WHEN ((((((vt1.c1)AND(v0.c1)))AND(v0.c0)))AND(v0.c0)) THEN (('-1400636205')<(vt1.c0)) END ASC, (((((((((((v0.c2)AND(v0.c0)))OR(v0.c2)))AND(v0.c2)))AND(v0.c2)))AND(vt1.c1)) IN (((vt1.c0) NOTNULL), ((((vt1.c1)AND(v0.c0)))AND(vt1.c0))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((CASE ((v0.c1) NOT NULL)  WHEN CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c1 THEN vt1.c0 WHEN vt1.c0 THEN 'vEulQ.}y' WHEN v0.c1 THEN vt1.c1 ELSE v0.c0 END THEN ((vt1.c1)%(v0.c0)) WHEN v0.c2 COLLATE RTRIM THEN 0.887509795799455 ELSE SUBSTR(vt1.c1, vt1.c0) END)AND((((v0.c2))>(((((v0.c2))<((vt1.c0))))))))) ORDER BY CASE WHEN CASE '1173938805'  WHEN v0.c1 THEN v0.c0 END THEN CASE WHEN vt1.c1 THEN v0.c0 WHEN v0.c0 THEN x'8da3' ELSE '381300539' END WHEN '' THEN CAST(v0.c1 AS NUMERIC) WHEN (('CS㯴_l‸')>>(vt1.c0)) THEN v0.c1 COLLATE BINARY WHEN ((((((vt1.c1)AND(v0.c1)))AND(v0.c0)))AND(v0.c0)) THEN (('-1400636205')<(vt1.c0)) END ASC, (((((((((((v0.c2)AND(v0.c0)))OR(v0.c2)))AND(v0.c2)))AND(v0.c2)))AND(vt1.c1)) IN (((vt1.c0) NOTNULL), ((((vt1.c1)AND(v0.c0)))AND(vt1.c0))))  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((v0.c1) BETWEEN (v0.c0) AND (vt1.c0)) COLLATE BINARY) ORDER BY CASE WHEN CASE '1173938805'  WHEN v0.c1 THEN v0.c0 END THEN CASE WHEN vt1.c1 THEN v0.c0 WHEN v0.c0 THEN x'8da3' ELSE '381300539' END WHEN '' THEN CAST(v0.c1 AS NUMERIC) WHEN (('CS㯴_l‸')>>(vt1.c0)) THEN v0.c1 COLLATE BINARY WHEN ((((((vt1.c1)AND(v0.c1)))AND(v0.c0)))AND(v0.c0)) THEN (('-1400636205')<(vt1.c0)) END ASC, (((((((((((v0.c2)AND(v0.c0)))OR(v0.c2)))AND(v0.c2)))AND(v0.c2)))AND(vt1.c1)) IN (((vt1.c0) NOTNULL), ((((vt1.c1)AND(v0.c0)))AND(vt1.c0))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END COLLATE NOCASE);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END COLLATE NOCASE)AND((((((((((- (vt1.c1)))OR(NULLIF(vt1.c0, vt1.c0))))AND(NULL)))OR(((vt1.c0)!=(vt1.c1)))))OR(((vt1.c1)<=(vt1.c0))))))) LIMIT 0X3;
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE ((((((+ (v0.c1)))OR(((v0.c2) NOT NULL))))OR(UNLIKELY(v0.c0))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE ((((((((+ (v0.c1)))OR(((v0.c2) NOT NULL))))OR(UNLIKELY(v0.c0))))AND(((((vt1.c1)>(v0.c2)))<(((v0.c1)GLOB(v0.c0))))))) ORDER BY (+ (ABS(vt1.c0))), ((CAST(vt1.c1 AS REAL)) BETWEEN (((vt1.c1)IS(v0.c0))) AND (v0.c2 COLLATE RTRIM))  NULLS LAST LIMIT 0;
SELECT * FROM vt1, v0 WHERE ((((v0.c2, v0.c2)) BETWEEN ((((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c2)), ((v0.c1) ISNULL))) AND (((((v0.c2, -1809434267, v0.c1, v0.c1, v0.c2)) NOT BETWEEN ((NULL, vt1.c1, v0.c0, vt1.c1, v0.c2)) AND ((vt1.c0, vt1.c1, v0.c1, v0.c0, vt1.c0))), ((vt1.c0)*(vt1.c1)))))) ORDER BY ((((vt1.c0)OR(x'ff')))-(((((((((((((v0.c1)AND(v0.c1)))OR(vt1.c0)))OR(v0.c1)))OR(v0.c1)))OR(v0.c0)))OR(vt1.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c2, v0.c2)) BETWEEN ((((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c2)), ((v0.c1) ISNULL))) AND (((((v0.c2, -1809434267, v0.c1, v0.c1, v0.c2)) NOT BETWEEN ((NULL, vt1.c1, v0.c0, vt1.c1, v0.c2)) AND ((vt1.c0, vt1.c1, v0.c1, v0.c0, vt1.c0))), ((vt1.c0)*(vt1.c1)))))) ORDER BY (((v0.c0) NOTNULL) IN ())  NULLS FIRST, (((vt1.c0 COLLATE BINARY, (((NULL, v0.c1))>=((vt1.c1, vt1.c1)))))==(('1#遙)', v0.c1))) DESC  NULLS LAST, ((((((v0.c2) BETWEEN (v0.c0) AND (vt1.c1)))AND(vt1.c0 COLLATE NOCASE)))OR(((vt1.c1)>(vt1.c0)))) DESC LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CAST('m?5' AS INTEGER)) ORDER BY (((v0.c0) NOTNULL) IN ())  NULLS FIRST, (((vt1.c0 COLLATE BINARY, (((NULL, v0.c1))>=((vt1.c1, vt1.c1)))))==(('1#遙)', v0.c1))) DESC  NULLS LAST, ((((((v0.c2) BETWEEN (v0.c0) AND (vt1.c1)))AND(vt1.c0 COLLATE NOCASE)))OR(((vt1.c1)>(vt1.c0)))) DESC LIMIT 0X1;
SELECT * FROM vt1, v0 WHERE ((((v0.c2, v0.c2)) BETWEEN ((((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c2)), ((v0.c1) ISNULL))) AND (((((v0.c2, -1809434267, v0.c1, v0.c1, v0.c2)) NOT BETWEEN ((NULL, vt1.c1, v0.c0, vt1.c1, v0.c2)) AND ((vt1.c0, vt1.c1, v0.c1, v0.c0, vt1.c0))), ((vt1.c0)*(vt1.c1)))))) ORDER BY ((((vt1.c0)OR(x'ff')))-(((((((((((((v0.c1)AND(v0.c1)))OR(vt1.c0)))OR(v0.c1)))OR(v0.c1)))OR(v0.c0)))OR(vt1.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c2, v0.c2)) BETWEEN ((((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c2)), ((v0.c1) ISNULL))) AND (((((v0.c2, -1809434267, v0.c1, v0.c1, v0.c2)) NOT BETWEEN ((NULL, vt1.c1, v0.c0, vt1.c1, v0.c2)) AND ((vt1.c0, vt1.c1, v0.c1, v0.c0, vt1.c0))), ((vt1.c0)*(vt1.c1)))))) ORDER BY (((v0.c0) NOTNULL) IN ())  NULLS FIRST, (((vt1.c0 COLLATE BINARY, (((NULL, v0.c1))>=((vt1.c1, vt1.c1)))))==(('1#遙)', v0.c1))) DESC  NULLS LAST, ((((((v0.c2) BETWEEN (v0.c0) AND (vt1.c1)))AND(vt1.c0 COLLATE NOCASE)))OR(((vt1.c1)>(vt1.c0)))) DESC LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CAST('m?5' AS INTEGER)) ORDER BY (((v0.c0) NOTNULL) IN ())  NULLS FIRST, (((vt1.c0 COLLATE BINARY, (((NULL, v0.c1))>=((vt1.c1, vt1.c1)))))==(('1#遙)', v0.c1))) DESC  NULLS LAST, ((((((v0.c2) BETWEEN (v0.c0) AND (vt1.c1)))AND(vt1.c0 COLLATE NOCASE)))OR(((vt1.c1)>(vt1.c0)))) DESC LIMIT 0X1;
SELECT MAX(vt1.c0) FROM vt1 CROSS JOIN v0 ON ((((((vt1.c1)OR(v0.c0)))AND(vt1.c1))) ISNULL) WHERE ((((NOT (v0.c0))) ISNULL)) ORDER BY (((NOT (v0.c0)))GLOB(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)))) ASC;
SELECT ALL MAX(vt1.c0) FROM vt1 CROSS JOIN v0 ON ((((((vt1.c1)OR(v0.c0)))AND(vt1.c1))) ISNULL) WHERE ((((NOT (v0.c0))) ISNULL)) ORDER BY (((NOT (v0.c0)))GLOB(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)))) ASC LIMIT 0;
SELECT MAX(v0.c2) FROM vt1, v0 WHERE ((((((v0.c2))<((v0.c0))))OR(v0.c2))) ORDER BY ((x'')>((~ (vt1.c1)))) DESC  NULLS FIRST, CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END COLLATE NOCASE DESC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM vt1, v0 WHERE ((((((v0.c2))<((v0.c0))))OR(v0.c2))) ORDER BY NULL ASC  NULLS FIRST, ((UNLIKELY(vt1.c0)) ISNULL) ASC LIMIT 0x1;
SELECT MIN(v0.c2) FROM v0, vt1 WHERE (CASE WHEN -1532276602 THEN vt1.c0 ELSE v0.c1 END COLLATE BINARY);
SELECT MIN(v0.c2) FROM v0, vt1 WHERE (((CASE WHEN -1532276602 THEN vt1.c0 ELSE v0.c1 END COLLATE BINARY)AND(CAST((((v0.c1, '-1671948788'))<((vt1.c1, v0.c2))) AS INTEGER)))) ORDER BY (('-1364915766' IN ()) IN (CASE v0.c2  WHEN v0.c2 THEN vt1.c0 END, json_array(vt1.c0, v0.c2, v0.c1, v0.c2, v0.c2))), (((vt1.c0, 0.5718682375752137))>((((vt1.c0)%(v0.c1)), (NOT (vt1.c1)))));
SELECT * FROM v0 WHERE ((((v0.c1)) BETWEEN (((v0.c1 IN (v0.c0)))) AND ((LIKELY(v0.c1))))) ORDER BY ((CAST(v0.c1 AS INTEGER))||(v0.c2 COLLATE NOCASE)), (((v0.c0, x'8fe7', v0.c0, v0.c2)) BETWEEN (((((v0.c2, v0.c1))!=((0Xffffffffba9b1a15, v0.c2))), CAST(v0.c1 AS BLOB), v0.c0 COLLATE RTRIM, CASE v0.c1  WHEN v0.c0 THEN v0.c1 WHEN '3h>Dw1々' THEN v0.c0 WHEN v0.c1 THEN '-1844818550' END)) AND ((((v0.c0) NOTNULL), CASE v0.c2  WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END, v0.c0 COLLATE NOCASE, ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))))) DESC, ((((v0.c0)+(v0.c1)))&(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))) DESC, (~ (v0.c1)) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c1)) BETWEEN (((v0.c1 IN (v0.c0)))) AND ((LIKELY(v0.c1))))) ORDER BY ((((0x631bb91f)>(v0.c0)))<=(TRIM(v0.c0, v0.c0))) DESC, ((json_quote(v0.c2))|((((v0.c2, 0.9103063106457516))!=((v0.c1, v0.c0))))) DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(((((((v0.c0)OR(v0.c1)))AND(v0.c1)))OR(v0.c1)) AS REAL)) ORDER BY ((((1662761247)>(v0.c0)))<=(TRIM(v0.c0, v0.c0))) DESC, ((json_quote(v0.c2))|((((v0.c2, 0.9103063106457516))<>((v0.c1, v0.c0))))) DESC LIMIT 0;
SELECT * FROM v0 WHERE ((((v0.c1)) BETWEEN (((v0.c1 IN (v0.c0)))) AND ((LIKELY(v0.c1))))) ORDER BY ((CAST(v0.c1 AS INTEGER))||(v0.c2 COLLATE NOCASE)), (((v0.c0, x'8fe7', v0.c0, v0.c2)) BETWEEN (((((v0.c2, v0.c1))!=((0Xffffffffba9b1a15, v0.c2))), CAST(v0.c1 AS BLOB), v0.c0 COLLATE RTRIM, CASE v0.c1  WHEN v0.c0 THEN v0.c1 WHEN '3h>Dw1々' THEN v0.c0 WHEN v0.c1 THEN '-1844818550' END)) AND ((((v0.c0) NOTNULL), CASE v0.c2  WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END, v0.c0 COLLATE NOCASE, ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))))) DESC, ((((v0.c0)+(v0.c1)))&(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))) DESC, (~ (v0.c1)) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c1)) BETWEEN (((v0.c1 IN (v0.c0)))) AND ((LIKELY(v0.c1))))) ORDER BY ((((0x631bb91f)>(v0.c0)))<=(TRIM(v0.c0, v0.c0))) DESC, ((json_quote(v0.c2))|((((v0.c2, 0.9103063106457516))!=((v0.c1, v0.c0))))) DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(((((((v0.c0)OR(v0.c1)))AND(v0.c1)))OR(v0.c1)) AS REAL)) ORDER BY ((((1662761247)>(v0.c0)))<=(TRIM(v0.c0, v0.c0))) DESC, ((json_quote(v0.c2))|((((v0.c2, 0.9103063106457516))<>((v0.c1, v0.c0))))) DESC LIMIT 0;
SELECT * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1, v0.c1)) BETWEEN ((v0.c2, x'c8', ((0Xffffffff9254db54) BETWEEN (v0.c2) AND (vt1.c1)))) AND ((((((((((vt1.c1)OR(v0.c2)))AND('>G')))AND(v0.c2)))OR(vt1.c1)), HEX(DISTINCT vt1.c1), CAST(v0.c1 AS INTEGER))))) ORDER BY ((((((((((((CAST(v0.c0 AS TEXT))AND(vt1.c1)))AND(vt1.c1)))OR(v0.c0)))AND(CASE v0.c1  WHEN v0.c0 THEN vt1.c0 WHEN 0x79f439 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END)))AND(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 END)))AND(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END)), (+ (CAST(vt1.c1 AS REAL))) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1, v0.c1)) BETWEEN ((v0.c2, x'c8', ((-1839932588) BETWEEN (v0.c2) AND (vt1.c1)))) AND ((((((((((vt1.c1)OR(v0.c2)))AND('>G')))AND(v0.c2)))OR(vt1.c1)), HEX(DISTINCT vt1.c1), CAST(v0.c1 AS INTEGER))))) ORDER BY ((((((((v0.c2)AND(vt1.c0)))OR(vt1.c1)))OR(((((((((v0.c2)AND(v0.c2)))AND(v0.c2)))OR(NULL)))AND(v0.c0)))))OR(CAST(v0.c0 AS NUMERIC))) ASC;
SELECT * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1, v0.c1)) BETWEEN ((v0.c2, x'c8', ((0Xffffffff9254db54) BETWEEN (v0.c2) AND (vt1.c1)))) AND ((((((((((vt1.c1)OR(v0.c2)))AND('>G')))AND(v0.c2)))OR(vt1.c1)), HEX(DISTINCT vt1.c1), CAST(v0.c1 AS INTEGER))))) ORDER BY ((((((((((((CAST(v0.c0 AS TEXT))AND(vt1.c1)))AND(vt1.c1)))OR(v0.c0)))AND(CASE v0.c1  WHEN v0.c0 THEN vt1.c0 WHEN 0x79f439 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END)))AND(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 END)))AND(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END)), (+ (CAST(vt1.c1 AS REAL))) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1, v0.c1)) BETWEEN ((v0.c2, x'c8', ((-1839932588) BETWEEN (v0.c2) AND (vt1.c1)))) AND ((((((((((vt1.c1)OR(v0.c2)))AND('>G')))AND(v0.c2)))OR(vt1.c1)), HEX(DISTINCT vt1.c1), CAST(v0.c1 AS INTEGER))))) ORDER BY ((((((((v0.c2)AND(vt1.c0)))OR(vt1.c1)))OR(((((((((v0.c2)AND(v0.c2)))AND(v0.c2)))OR(NULL)))AND(v0.c0)))))OR(CAST(v0.c0 AS NUMERIC))) ASC;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c0 COLLATE NOCASE, (vt1.c0 IN (vt1.c1)))) AND ((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)), (vt1.c1 IN (vt1.c0))))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c0 COLLATE NOCASE, (vt1.c0 IN (vt1.c1)))) AND ((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)), (vt1.c1 IN (vt1.c0)))))) LIMIT 0X0;
SELECT ALL * FROM v0 WHERE ((((CASE v0.c0  WHEN v0.c1 THEN v0.c0 END, ((((((v0.c0)OR(0.16720870065065352)))AND(v0.c1)))OR(v0.c0))))>((((v0.c1)IS NOT(v0.c1)), ((((((v0.c2)OR(v0.c1)))AND(v0.c0)))AND(v0.c0))))));
SELECT * FROM v0 WHERE ((((((CASE v0.c0  WHEN v0.c1 THEN v0.c0 END, ((((((v0.c0)OR(0.16720870065065352)))AND(v0.c1)))OR(v0.c0))))>((((v0.c1)IS NOT(v0.c1)), ((((((v0.c2)OR(v0.c1)))AND(v0.c0)))AND(v0.c0))))))AND('l'))) LIMIT 2 INTERSECT SELECT ALL * FROM v0 WHERE (v0.c2) LIMIT 0X2;
SELECT ALL * FROM v0 WHERE ((((CASE v0.c0  WHEN v0.c1 THEN v0.c0 END, ((((((v0.c0)OR(0.16720870065065352)))AND(v0.c1)))OR(v0.c0))))>((((v0.c1)IS NOT(v0.c1)), ((((((v0.c2)OR(v0.c1)))AND(v0.c0)))AND(v0.c0))))));
SELECT * FROM v0 WHERE ((((((CASE v0.c0  WHEN v0.c1 THEN v0.c0 END, ((((((v0.c0)OR(0.16720870065065352)))AND(v0.c1)))OR(v0.c0))))>((((v0.c1)IS NOT(v0.c1)), ((((((v0.c2)OR(v0.c1)))AND(v0.c0)))AND(v0.c0))))))AND('l'))) LIMIT 2 INTERSECT SELECT ALL * FROM v0 WHERE (v0.c2) LIMIT 0X2;
SELECT * FROM v0, vt1 WHERE (((v0.c0)<=(v0.c1)) COLLATE NOCASE) ORDER BY (((vt1.c1 IN (v0.c2, v0.c0))) NOT BETWEEN (((((((v0.c0)OR(vt1.c0)))OR(v0.c0)))AND(v0.c1))) AND (((v0.c0)*(vt1.c0))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((v0.c0)<=(v0.c1)) COLLATE NOCASE) ORDER BY CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE 'ᅉ<Qz''9d' END COLLATE RTRIM  NULLS LAST, ((vt1.c0) NOTNULL) COLLATE NOCASE DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (ABS(DISTINCT TRIM(v0.c1))) ORDER BY CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE 'ᅉ<Qz''9d' END COLLATE RTRIM  NULLS LAST, ((vt1.c0) NOTNULL) COLLATE NOCASE DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((v0.c0)<=(v0.c1)) COLLATE NOCASE) ORDER BY (((vt1.c1 IN (v0.c2, v0.c0))) NOT BETWEEN (((((((v0.c0)OR(vt1.c0)))OR(v0.c0)))AND(v0.c1))) AND (((v0.c0)*(vt1.c0))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((v0.c0)<=(v0.c1)) COLLATE NOCASE) ORDER BY CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE 'ᅉ<Qz''9d' END COLLATE RTRIM  NULLS LAST, ((vt1.c0) NOTNULL) COLLATE NOCASE DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (ABS(DISTINCT TRIM(v0.c1))) ORDER BY CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE 'ᅉ<Qz''9d' END COLLATE RTRIM  NULLS LAST, ((vt1.c0) NOTNULL) COLLATE NOCASE DESC  NULLS FIRST;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (NULL) ORDER BY (- ((- (vt1.c1))))  NULLS LAST;
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((NULL)AND(((vt1.c0 COLLATE BINARY) BETWEEN (RTRIM(vt1.c1)) AND (vt1.c1 COLLATE RTRIM))))) ORDER BY (((+ (vt1.c1))) IS FALSE) DESC, NULLIF(DISTINCT vt1.c0, (((vt1.c0)) BETWEEN ((vt1.c1)) AND ((vt1.c1))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (LIKELY(DISTINCT CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN NULL THEN x'6c2c' END)) ORDER BY CASE WHEN NULL THEN ((v0.c0) NOTNULL) WHEN NULL THEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)) END, ((((((v0.c2)OR(v0.c0)))OR(v0.c2)))<(json_extract(v0.c1, v0.c0, v0.c2)));
SELECT DISTINCT * FROM v0 WHERE (((LIKELY(DISTINCT CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN NULL THEN x'6c2c' END))AND(x''))) ORDER BY CASE WHEN NULL THEN ((v0.c0) NOTNULL) WHEN NULL THEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)) END, ((((((v0.c2)OR(v0.c0)))OR(v0.c2)))<(json_extract(v0.c1, v0.c0, v0.c2)));
SELECT ALL * FROM v0 WHERE (LIKELY(DISTINCT CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN NULL THEN x'6c2c' END)) ORDER BY CASE WHEN NULL THEN ((v0.c0) NOTNULL) WHEN NULL THEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)) END, ((((((v0.c2)OR(v0.c0)))OR(v0.c2)))<(json_extract(v0.c1, v0.c0, v0.c2)));
SELECT DISTINCT * FROM v0 WHERE (((LIKELY(DISTINCT CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN NULL THEN x'6c2c' END))AND(x''))) ORDER BY CASE WHEN NULL THEN ((v0.c0) NOTNULL) WHEN NULL THEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)) END, ((((((v0.c2)OR(v0.c0)))OR(v0.c2)))<(json_extract(v0.c1, v0.c0, v0.c2)));
SELECT * FROM vt1, v0 WHERE ((((- (v0.c0)))LIKE(((v0.c2)>(vt1.c0)))));
SELECT * FROM vt1, v0 WHERE ((((- (v0.c0)))LIKE(((v0.c2)>(vt1.c0))))) ORDER BY CAST(CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c2 END AS NUMERIC)  NULLS FIRST, COALESCE(((v0.c0)<<(v0.c2)), ((vt1.c1) NOT BETWEEN (v0.c0) AND (vt1.c1)))  NULLS FIRST, (~ (UNLIKELY(v0.c0))), (((vt1.c0)>=(vt1.c0)) IN ('-898857599', (vt1.c0 IN (v0.c0)))) LIMIT 0 INTERSECT SELECT * FROM vt1, v0 WHERE (((((((((((((((vt1.c1)AND(x'bc')))OR(CASE WHEN vt1.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 END)))AND((vt1.c0 IN ()))))AND(v0.c2)))AND(((v0.c1)>>(v0.c1)))))OR(UNLIKELY(DISTINCT v0.c2))))AND(vt1.c0 COLLATE BINARY))) ORDER BY CAST(CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c2 END AS NUMERIC)  NULLS FIRST, COALESCE(((v0.c0)<<(v0.c2)), ((vt1.c1) NOT BETWEEN (v0.c0) AND (vt1.c1)))  NULLS FIRST, (~ (UNLIKELY(v0.c0))), (((vt1.c0)>=(vt1.c0)) IN ('-898857599', (vt1.c0 IN (v0.c0)))) LIMIT 0x0;
SELECT * FROM vt1, v0 WHERE ((((- (v0.c0)))LIKE(((v0.c2)>(vt1.c0)))));
SELECT * FROM vt1, v0 WHERE ((((- (v0.c0)))LIKE(((v0.c2)>(vt1.c0))))) ORDER BY CAST(CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c2 END AS NUMERIC)  NULLS FIRST, COALESCE(((v0.c0)<<(v0.c2)), ((vt1.c1) NOT BETWEEN (v0.c0) AND (vt1.c1)))  NULLS FIRST, (~ (UNLIKELY(v0.c0))), (((vt1.c0)>=(vt1.c0)) IN ('-898857599', (vt1.c0 IN (v0.c0)))) LIMIT 0 INTERSECT SELECT * FROM vt1, v0 WHERE (((((((((((((((vt1.c1)AND(x'bc')))OR(CASE WHEN vt1.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 END)))AND((vt1.c0 IN ()))))AND(v0.c2)))AND(((v0.c1)>>(v0.c1)))))OR(UNLIKELY(DISTINCT v0.c2))))AND(vt1.c0 COLLATE BINARY))) ORDER BY CAST(CASE WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c2 END AS NUMERIC)  NULLS FIRST, COALESCE(((v0.c0)<<(v0.c2)), ((vt1.c1) NOT BETWEEN (v0.c0) AND (vt1.c1)))  NULLS FIRST, (~ (UNLIKELY(v0.c0))), (((vt1.c0)>=(vt1.c0)) IN ('-898857599', (vt1.c0 IN (v0.c0)))) LIMIT 0x0;
SELECT * FROM v0 WHERE ((((v0.c1)) BETWEEN ((((NULL)GLOB(v0.c0)))) AND ((CAST(v0.c0 AS TEXT))))) ORDER BY (((((v0.c1 IN (v0.c1)))AND((((x'', 'Z/
')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, '-2038281165'))))))AND(CAST(v0.c2 AS INTEGER)))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1)) BETWEEN ((((NULL)GLOB(v0.c0)))) AND ((CAST(v0.c0 AS TEXT)))))AND((((((((v0.c1 IN (v0.c0)))OR(((v0.c0)<>(v0.c1)))))AND(v0.c1 COLLATE NOCASE)))OR(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2))))))) ORDER BY (((((v0.c1 IN (v0.c1)))AND((((x'', 'Z/
')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, '-2038281165'))))))AND(CAST(v0.c2 AS INTEGER)))  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((((((((v0.c2 COLLATE RTRIM)AND(((v0.c0)+('-1201394663')))))OR(CASE WHEN v0.c1 THEN v0.c2 END)))AND(CAST(v0.c0 AS NUMERIC))))OR(((v0.c2) NOT NULL))))OR((((v0.c1)) NOT BETWEEN ((0.6943433976114705)) AND ((v0.c0)))))) ORDER BY (((((v0.c1 IN (v0.c1)))AND((((x'', 'Z/
')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, '-2038281165'))))))AND(CAST(v0.c2 AS INTEGER)))  NULLS LAST LIMIT 0X2;
SELECT * FROM v0 WHERE ((((v0.c1)) BETWEEN ((((NULL)GLOB(v0.c0)))) AND ((CAST(v0.c0 AS TEXT))))) ORDER BY (((((v0.c1 IN (v0.c1)))AND((((x'', 'Z/
')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, '-2038281165'))))))AND(CAST(v0.c2 AS INTEGER)))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1)) BETWEEN ((((NULL)GLOB(v0.c0)))) AND ((CAST(v0.c0 AS TEXT)))))AND((((((((v0.c1 IN (v0.c0)))OR(((v0.c0)<>(v0.c1)))))AND(v0.c1 COLLATE NOCASE)))OR(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2))))))) ORDER BY (((((v0.c1 IN (v0.c1)))AND((((x'', 'Z/
')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, '-2038281165'))))))AND(CAST(v0.c2 AS INTEGER)))  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((((((((v0.c2 COLLATE RTRIM)AND(((v0.c0)+('-1201394663')))))OR(CASE WHEN v0.c1 THEN v0.c2 END)))AND(CAST(v0.c0 AS NUMERIC))))OR(((v0.c2) NOT NULL))))OR((((v0.c1)) NOT BETWEEN ((0.6943433976114705)) AND ((v0.c0)))))) ORDER BY (((((v0.c1 IN (v0.c1)))AND((((x'', 'Z/
')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, '-2038281165'))))))AND(CAST(v0.c2 AS INTEGER)))  NULLS LAST LIMIT 0X2;
SELECT * FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))LIKE(((vt1.c1) IS TRUE)))) ORDER BY NULL;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))LIKE(((vt1.c1) IS TRUE))))AND(NULL))) ORDER BY NULL;
SELECT * FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))LIKE(((vt1.c1) IS TRUE)))) ORDER BY NULL;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))LIKE(((vt1.c1) IS TRUE))))AND(NULL))) ORDER BY NULL;
SELECT MAX(v0.c1) FROM vt1 LEFT OUTER JOIN v0 ON (((((v0.c2, v0.c0))==((vt1.c1, v0.c1)))) BETWEEN (json_type(v0.c1)) AND ((- (v0.c2)))) WHERE (vt1.c0) ORDER BY ((((((((((((((vt1.c1)AND(v0.c1)))OR(v0.c1)))AND(vt1.c1)))AND(v0.c0)))AND(vt1.c1)))OR(vt1.c1)))IS((((v0.c0, v0.c0, vt1.c0, v0.c2, vt1.c1))=((0Xffffffffac095678, vt1.c0, vt1.c0, vt1.c0, v0.c0)))));
SELECT ALL MAX(v0.c1) FROM vt1 INNER JOIN v0 ON (((((v0.c2, v0.c0))=((vt1.c1, v0.c1)))) BETWEEN (json_type(v0.c1)) AND ((- (v0.c2)))) WHERE (((vt1.c0)AND(((('' IN ())) NOT BETWEEN (((v0.c1)AND(v0.c2))) AND (v0.c0))))) ORDER BY ((((((((((((((vt1.c1)AND(v0.c1)))OR(v0.c1)))AND(vt1.c1)))AND(v0.c0)))AND(vt1.c1)))OR(vt1.c1)))IS((((v0.c0, v0.c0, vt1.c0, v0.c2, vt1.c1))=((-1408674184, vt1.c0, vt1.c0, vt1.c0, v0.c0))))) LIMIT 0;
SELECT MAX(v0.c0) FROM vt1, v0 WHERE ((- (('9' IN (v0.c1, v0.c2))))) ORDER BY (~ (((((vt1.c0)AND(vt1.c1)))AND(v0.c2)))) DESC  NULLS LAST;
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE ((- (('9' IN (v0.c1, v0.c2))))) ORDER BY (~ (((((vt1.c0)AND(vt1.c1)))AND(v0.c2)))) DESC  NULLS LAST INTERSECT SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (((((((((((v0.c2)AND(vt1.c1)))OR(0.4451104445885745)))AND(v0.c0 COLLATE NOCASE)))AND((((vt1.c0, 0.9440409790844377, v0.c2)) BETWEEN ((v0.c0, v0.c2, v0.c1)) AND ((v0.c0, v0.c2, v0.c2))))))OR((((vt1.c0)) BETWEEN ((v0.c0)) AND ((v0.c0)))))) ORDER BY (~ (((((vt1.c0)AND(vt1.c1)))AND(v0.c2)))) DESC  NULLS LAST;
SELECT * FROM v0 WHERE ((~ (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)))));
SELECT ALL * FROM v0 WHERE ((((~ (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)))))AND((((((((((('
m')AND(v0.c0)))AND(v0.c2)))AND(v0.c1)))AND(v0.c2)))/(((v0.c2) IS FALSE)))))) INTERSECT SELECT ALL * FROM v0 WHERE (v0.c1);
SELECT * FROM v0 WHERE ((~ (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)))));
SELECT ALL * FROM v0 WHERE ((((~ (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)))))AND((((((((((('
m')AND(v0.c0)))AND(v0.c2)))AND(v0.c1)))AND(v0.c2)))/(((v0.c2) IS FALSE)))))) INTERSECT SELECT ALL * FROM v0 WHERE (v0.c1);
SELECT ALL * FROM vt1, v0 WHERE (v0.c0) ORDER BY CAST(((v0.c0) IS TRUE) AS BLOB) ASC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE (((v0.c0)AND((((+ (v0.c0)))%(CASE v0.c1  WHEN v0.c2 THEN vt1.c1 END))))) ORDER BY CAST(((v0.c0) IS TRUE) AS BLOB) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0 COLLATE RTRIM) IS FALSE)) ORDER BY CAST(((v0.c0) IS TRUE) AS BLOB) ASC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE (v0.c0) ORDER BY CAST(((v0.c0) IS TRUE) AS BLOB) ASC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE (((v0.c0)AND((((+ (v0.c0)))%(CASE v0.c1  WHEN v0.c2 THEN vt1.c1 END))))) ORDER BY CAST(((v0.c0) IS TRUE) AS BLOB) ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((vt1.c0 COLLATE RTRIM) IS FALSE)) ORDER BY CAST(((v0.c0) IS TRUE) AS BLOB) ASC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE (((((v0.c2)OR(vt1.c1)))OR(v0.c1)) COLLATE BINARY);
SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (((((((v0.c2)OR(vt1.c1)))OR(v0.c1)) COLLATE BINARY)AND(((((((v0.c0)%(vt1.c1)))AND((((vt1.c0, x''))>((v0.c1, vt1.c0))))))AND(json_array_length(vt1.c0)))))) ORDER BY ((((((v0.c2) NOT NULL))OR(((v0.c0)<<(vt1.c0)))))AND(UPPER(v0.c2))) LIMIT 2 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE (((((((((((((vt1.c0) ISNULL))AND(((vt1.c0) NOT BETWEEN (v0.c2) AND (NULL)))))AND(UPPER(DISTINCT v0.c1))))AND(v0.c0 COLLATE RTRIM)))OR(((v0.c2) NOT BETWEEN (vt1.c1) AND (v0.c1)))))AND(CASE WHEN vt1.c0 THEN v0.c0 END))) ORDER BY ((((((v0.c2) NOT NULL))OR(((v0.c0)<<(vt1.c0)))))AND(UPPER(v0.c2))) LIMIT 2;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 AS NUMERIC))||(((vt1.c1) IS TRUE)))) ORDER BY CAST((vt1.c0 IN ()) AS TEXT)  NULLS FIRST, 'x6G';
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((CAST(vt1.c0 AS NUMERIC))||(((vt1.c1) IS TRUE))))AND(CAST(((vt1.c1) IS TRUE) AS REAL)))) ORDER BY CAST((vt1.c0 IN ()) AS TEXT)  NULLS FIRST, 'x6G' LIMIT 1;
SELECT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (((x'') NOT NULL)) ORDER BY 0.9199453935593268 COLLATE BINARY, CAST((((v0.c1))==((vt1.c1))) AS BLOB);
SELECT DISTINCT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (((x'') NOT NULL)) ORDER BY CAST(((v0.c1)*(vt1.c1)) AS INTEGER) DESC  NULLS FIRST, CAST((NOT (v0.c1)) AS TEXT) DESC LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (load_extension(((vt1.c1) NOTNULL))) ORDER BY CAST(((v0.c1)*(vt1.c1)) AS INTEGER) DESC  NULLS FIRST, CAST((NOT (v0.c1)) AS TEXT) DESC LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (x'87') ORDER BY LIKE(CASE vt1.c1  WHEN 235378681 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END, v0.c1 COLLATE RTRIM, 'R') ASC, (((v0.c0) BETWEEN (v0.c2) AND (v0.c1)) IN (((vt1.c1)||(vt1.c0))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((x'87')AND(CAST(v0.c2 COLLATE RTRIM AS REAL)))) ORDER BY LIKE(CASE vt1.c1  WHEN 235378681 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END, v0.c1 COLLATE RTRIM, 'R') ASC, (((v0.c0) BETWEEN (v0.c2) AND (v0.c1)) IN (((vt1.c1)||(vt1.c0)))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CASE ((v0.c1) IS FALSE)  WHEN ((vt1.c1)>=(vt1.c0)) THEN ((((((vt1.c1)AND(v0.c1)))OR(v0.c0)))AND(vt1.c0)) WHEN ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)) THEN (((v0.c2, vt1.c1, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c1)) AND ((v0.c1, v0.c2, vt1.c0))) WHEN (~ (v0.c2)) THEN ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))OR(v0.c2)) WHEN json_array_length(v0.c0, v0.c1) THEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)) WHEN CAST(v0.c2 AS INTEGER) THEN ((((((v0.c2)OR(v0.c1)))OR(v0.c1)))OR(v0.c1)) END) ORDER BY LIKE(CASE vt1.c1  WHEN 235378681 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END, v0.c1 COLLATE RTRIM, 'R') ASC, (((v0.c0) BETWEEN (v0.c2) AND (v0.c1)) IN (((vt1.c1)||(vt1.c0)))) LIMIT 0X0;
SELECT ALL * FROM v0, vt1 WHERE (x'87') ORDER BY LIKE(CASE vt1.c1  WHEN 235378681 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END, v0.c1 COLLATE RTRIM, 'R') ASC, (((v0.c0) BETWEEN (v0.c2) AND (v0.c1)) IN (((vt1.c1)||(vt1.c0))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((x'87')AND(CAST(v0.c2 COLLATE RTRIM AS REAL)))) ORDER BY LIKE(CASE vt1.c1  WHEN 235378681 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END, v0.c1 COLLATE RTRIM, 'R') ASC, (((v0.c0) BETWEEN (v0.c2) AND (v0.c1)) IN (((vt1.c1)||(vt1.c0)))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CASE ((v0.c1) IS FALSE)  WHEN ((vt1.c1)>=(vt1.c0)) THEN ((((((vt1.c1)AND(v0.c1)))OR(v0.c0)))AND(vt1.c0)) WHEN ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)) THEN (((v0.c2, vt1.c1, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c1)) AND ((v0.c1, v0.c2, vt1.c0))) WHEN (~ (v0.c2)) THEN ((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))OR(v0.c2)) WHEN json_array_length(v0.c0, v0.c1) THEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)) WHEN CAST(v0.c2 AS INTEGER) THEN ((((((v0.c2)OR(v0.c1)))OR(v0.c1)))OR(v0.c1)) END) ORDER BY LIKE(CASE vt1.c1  WHEN 235378681 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 END, v0.c1 COLLATE RTRIM, 'R') ASC, (((v0.c0) BETWEEN (v0.c2) AND (v0.c1)) IN (((vt1.c1)||(vt1.c0)))) LIMIT 0X0;
SELECT ALL * FROM v0, vt1 WHERE ((~ ((v0.c2 IN ())))) ORDER BY (((+ (v0.c1)))|(((vt1.c0) NOT NULL)));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((~ ((v0.c2 IN ()))))AND(CASE UPPER(v0.c1)  WHEN (v0.c1 IN (v0.c0)) THEN CAST(v0.c1 AS INTEGER) WHEN ((vt1.c0)!=(v0.c2)) THEN CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c2 ELSE vt1.c0 END WHEN ((v0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN vt1.c0 COLLATE NOCASE END))) ORDER BY (((+ (v0.c1)))|(((vt1.c0) NOT NULL))) LIMIT 0x2;
SELECT ALL * FROM v0, vt1 WHERE ((~ ((v0.c2 IN ())))) ORDER BY (((+ (v0.c1)))|(((vt1.c0) NOT NULL)));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((~ ((v0.c2 IN ()))))AND(CASE UPPER(v0.c1)  WHEN (v0.c1 IN (v0.c0)) THEN CAST(v0.c1 AS INTEGER) WHEN ((vt1.c0)!=(v0.c2)) THEN CASE WHEN vt1.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c2 ELSE vt1.c0 END WHEN ((v0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) THEN vt1.c0 COLLATE NOCASE END))) ORDER BY (((+ (v0.c1)))|(((vt1.c0) NOT NULL))) LIMIT 0x2;
SELECT * FROM v0 CROSS JOIN vt1 ON ((((((vt1.c0)AND(CAST(vt1.c1 AS REAL))))AND(CAST(v0.c0 AS NUMERIC))))OR(((vt1.c1) NOTNULL))) WHERE (CASE ((v0.c1) NOT NULL)  WHEN CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c2 END THEN '363736666' ELSE ((((((((v0.c1)AND('|㒓鈌{5*[]D%')))AND(v0.c2)))OR(vt1.c1)))OR(vt1.c0)) END) ORDER BY CASE CAST(v0.c2 AS INTEGER)  WHEN (vt1.c0 IN (vt1.c0)) THEN (~ (vt1.c0)) WHEN ((((v0.c2)OR(v0.c1)))AND(v0.c2)) THEN CHAR(v0.c2) WHEN ((vt1.c0)-(vt1.c1)) THEN -331726840 WHEN (~ (v0.c2)) THEN CASE NULL  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c2 THEN '-707585088' WHEN v0.c0 THEN v0.c2 END END  NULLS LAST, CAST(v0.c2 AS REAL) COLLATE NOCASE ASC, (('627949836')<<(CAST(v0.c1 AS NUMERIC))), CASE ((v0.c0) BETWEEN (vt1.c1) AND (v0.c1))  WHEN (((v0.c0, v0.c2, x'aef35448ef6c'))<=((v0.c2, v0.c0, NULL))) THEN x'' COLLATE RTRIM WHEN json_valid(vt1.c1) THEN (('')-(v0.c0)) ELSE CASE WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN v0.c2 WHEN '-1681891871' THEN v0.c2 END END ASC;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON ((((((vt1.c0)AND(CAST(vt1.c1 AS REAL))))AND(CAST(v0.c0 AS NUMERIC))))OR(((vt1.c1) NOTNULL))) WHERE (((CASE ((v0.c1) NOT NULL)  WHEN CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c2 END THEN '363736666' ELSE ((((((((v0.c1)AND('|㒓鈌{5*[]D%')))AND(v0.c2)))OR(vt1.c1)))OR(vt1.c0)) END)AND((((+ (v0.c0))) NOTNULL)))) ORDER BY (+ ((- (v0.c1)))), v0.c2  NULLS LAST, (((((((((((0.9635343630553604 IN ()))OR(v0.c2 COLLATE NOCASE)))AND(((((v0.c1)OR(v0.c1)))AND(v0.c0)))))AND((+ (vt1.c1)))))OR(CAST(124458009 AS TEXT))))OR(v0.c2)) DESC  NULLS FIRST;
SELECT * FROM v0 CROSS JOIN vt1 ON ((((((vt1.c0)AND(CAST(vt1.c1 AS REAL))))AND(CAST(v0.c0 AS NUMERIC))))OR(((vt1.c1) NOTNULL))) WHERE (CASE ((v0.c1) NOT NULL)  WHEN CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c2 END THEN '363736666' ELSE ((((((((v0.c1)AND('|㒓鈌{5*[]D%')))AND(v0.c2)))OR(vt1.c1)))OR(vt1.c0)) END) ORDER BY CASE CAST(v0.c2 AS INTEGER)  WHEN (vt1.c0 IN (vt1.c0)) THEN (~ (vt1.c0)) WHEN ((((v0.c2)OR(v0.c1)))AND(v0.c2)) THEN CHAR(v0.c2) WHEN ((vt1.c0)-(vt1.c1)) THEN -331726840 WHEN (~ (v0.c2)) THEN CASE NULL  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c2 THEN '-707585088' WHEN v0.c0 THEN v0.c2 END END  NULLS LAST, CAST(v0.c2 AS REAL) COLLATE NOCASE ASC, (('627949836')<<(CAST(v0.c1 AS NUMERIC))), CASE ((v0.c0) BETWEEN (vt1.c1) AND (v0.c1))  WHEN (((v0.c0, v0.c2, x'aef35448ef6c'))<=((v0.c2, v0.c0, NULL))) THEN x'' COLLATE RTRIM WHEN json_valid(vt1.c1) THEN (('')-(v0.c0)) ELSE CASE WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN v0.c2 WHEN '-1681891871' THEN v0.c2 END END ASC;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON ((((((vt1.c0)AND(CAST(vt1.c1 AS REAL))))AND(CAST(v0.c0 AS NUMERIC))))OR(((vt1.c1) NOTNULL))) WHERE (((CASE ((v0.c1) NOT NULL)  WHEN CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c2 END THEN '363736666' ELSE ((((((((v0.c1)AND('|㒓鈌{5*[]D%')))AND(v0.c2)))OR(vt1.c1)))OR(vt1.c0)) END)AND((((+ (v0.c0))) NOTNULL)))) ORDER BY (+ ((- (v0.c1)))), v0.c2  NULLS LAST, (((((((((((0.9635343630553604 IN ()))OR(v0.c2 COLLATE NOCASE)))AND(((((v0.c1)OR(v0.c1)))AND(v0.c0)))))AND((+ (vt1.c1)))))OR(CAST(124458009 AS TEXT))))OR(v0.c2)) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (LIKELIHOOD(((vt1.c1) IS TRUE), ((((((((0xfffffffff58159f7)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))OR(x'4a'))));
SELECT ALL * FROM vt1 WHERE (((LIKELIHOOD(((vt1.c1) IS TRUE), ((((((((-176072201)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))OR(x'4a'))))AND(((((((((((((vt1.c1)/(1200827966)))AND(((vt1.c1) ISNULL))))OR(((vt1.c1)!=(vt1.c0)))))OR(((vt1.c1)+('-1621293186')))))OR(CAST(vt1.c0 AS INTEGER))))OR(((vt1.c0)-(vt1.c0))))))) ORDER BY UNLIKELY(CAST(vt1.c1 AS REAL)), ((((vt1.c1) IS TRUE)) BETWEEN (vt1.c0) AND ((((NULL, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c0)))))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (CAST(((((((vt1.c0)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)) AS TEXT)) ORDER BY UNLIKELY(CAST(vt1.c1 AS REAL)), ((((vt1.c1) IS TRUE)) BETWEEN (vt1.c0) AND ((((NULL, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c0)))))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (LIKELIHOOD(((vt1.c1) IS TRUE), ((((((((0xfffffffff58159f7)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))OR(x'4a'))));
SELECT * FROM v0, vt1 WHERE (((CASE vt1.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 END) NOT NULL));
SELECT ALL * FROM v0, vt1 WHERE (((((CASE vt1.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 END) NOT NULL))AND(LIKELY(((((((v0.c0)OR(vt1.c1)))AND(-1.809434267E9)))OR(v0.c2)))))) ORDER BY CAST((v0.c0 IN (vt1.c0)) AS INTEGER) ASC;
SELECT * FROM v0, vt1 WHERE (((CASE vt1.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 END) NOT NULL));
SELECT ALL * FROM v0, vt1 WHERE (((((CASE vt1.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 END) NOT NULL))AND(LIKELY(((((((v0.c0)OR(vt1.c1)))AND(-1.809434267E9)))OR(v0.c2)))))) ORDER BY CAST((v0.c0 IN (vt1.c0)) AS INTEGER) ASC;
SELECT * FROM vt1 WHERE (NULL) ORDER BY (((NOT (vt1.c0)))IS(((vt1.c0) IS FALSE))), (((NOT (vt1.c0)))>((+ (vt1.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((NULL)AND((((vt1.c0, vt1.c0)) NOT BETWEEN (((('T') IS FALSE), ((vt1.c1)<=(vt1.c1)))) AND ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0)))))) ORDER BY (((NOT (vt1.c0)))IS(((vt1.c0) IS FALSE))), (((NOT (vt1.c0)))>((+ (vt1.c0))))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (((vt1.c0) NOT BETWEEN ((((vt1.c0, vt1.c0))>((vt1.c0, vt1.c0)))) AND (vt1.c1))) ORDER BY (((NOT (vt1.c0)))IS(((vt1.c0) IS FALSE))), (((NOT (vt1.c0)))>((+ (vt1.c0))))  NULLS FIRST;
SELECT * FROM vt1 WHERE (NULL) ORDER BY (((NOT (vt1.c0)))IS(((vt1.c0) IS FALSE))), (((NOT (vt1.c0)))>((+ (vt1.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((NULL)AND((((vt1.c0, vt1.c0)) NOT BETWEEN (((('T') IS FALSE), ((vt1.c1)<=(vt1.c1)))) AND ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c0)))))) ORDER BY (((NOT (vt1.c0)))IS(((vt1.c0) IS FALSE))), (((NOT (vt1.c0)))>((+ (vt1.c0))))  NULLS FIRST INTERSECT SELECT * FROM vt1 WHERE (((vt1.c0) NOT BETWEEN ((((vt1.c0, vt1.c0))>((vt1.c0, vt1.c0)))) AND (vt1.c1))) ORDER BY (((NOT (vt1.c0)))IS(((vt1.c0) IS FALSE))), (((NOT (vt1.c0)))>((+ (vt1.c0))))  NULLS FIRST;
SELECT COUNT(*) FROM vt1, v0 WHERE (((((vt1.c1)/(v0.c2))) ISNULL));
SELECT COUNT(*) FROM vt1, v0 WHERE (((((((vt1.c1)/(v0.c2))) ISNULL))AND((((v0.c2 IN ()))GLOB(((v0.c1) BETWEEN (v0.c1) AND (vt1.c1))))))) ORDER BY CAST(((v0.c2) NOT NULL) AS BLOB) DESC LIMIT 3 INTERSECT SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((~ (CASE 0xffffffffd921d480  WHEN vt1.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END))) ORDER BY CAST(((v0.c2) NOT NULL) AS BLOB) DESC LIMIT 3;
SELECT * FROM vt1 WHERE ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END IN (vt1.c1 COLLATE NOCASE))) ORDER BY vt1.c0  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END IN (vt1.c1 COLLATE NOCASE)))AND(((DATETIME(vt1.c1, vt1.c1, vt1.c1))||((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c0)))))))) ORDER BY ((CAST(vt1.c1 AS NUMERIC))!=(CAST(vt1.c0 AS REAL))) LIMIT 0X0;
SELECT * FROM vt1 WHERE ((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END IN (vt1.c1 COLLATE NOCASE))) ORDER BY vt1.c0  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END IN (vt1.c1 COLLATE NOCASE)))AND(((DATETIME(vt1.c1, vt1.c1, vt1.c1))||((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c0)))))))) ORDER BY ((CAST(vt1.c1 AS NUMERIC))!=(CAST(vt1.c0 AS REAL))) LIMIT 0X0;
SELECT COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS NUMERIC))IS NOT(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))));
SELECT ALL COUNT(*) FROM vt1 WHERE (((CAST(vt1.c0 AS NUMERIC))IS NOT(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))));
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((vt1.c0 COLLATE NOCASE IN (vt1.c0 COLLATE BINARY))) ORDER BY ((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1))) BETWEEN ((+ (vt1.c0))) AND ((((vt1.c1, vt1.c1, vt1.c1))<>((vt1.c0, 0.8144404940348283, 0x5e54e1bc))))) DESC  NULLS LAST;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((vt1.c0 COLLATE NOCASE IN (vt1.c0 COLLATE BINARY))) ORDER BY x'96'  NULLS LAST, HEX(0X2716abe) ASC, (((vt1.c0, vt1.c0, x'438debd3', vt1.c1)) NOT BETWEEN ((vt1.c1, vt1.c1, (((vt1.c1, vt1.c0))<=((vt1.c0, vt1.c1))), ((((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))OR('-1941427295')))) AND ((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, (vt1.c0 IN (vt1.c1)), CAST(vt1.c0 AS BLOB), ((vt1.c0)<(vt1.c0))))) DESC;
SELECT * FROM vt1, v0 WHERE ((~ (CAST(v0.c1 AS BLOB)))) ORDER BY NULL DESC  NULLS LAST, (NOT ((x'' IN ())))  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((((~ (CAST(v0.c1 AS BLOB))))AND(((CAST(vt1.c0 AS INTEGER))IS((((v0.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2)) AND ((vt1.c1, 880955263)))))))) ORDER BY NULL DESC  NULLS LAST, (NOT ((x'' IN ())))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT * FROM vt1, v0 WHERE ((((((((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c0, v0.c2)) AND ((v0.c1, x'804d8d'))))AND(v0.c2 COLLATE NOCASE)))OR(NULL)))OR(((vt1.c1) NOTNULL)))) ORDER BY NULL DESC  NULLS LAST, (NOT ((x'' IN ())))  NULLS FIRST LIMIT 1;
SELECT * FROM vt1, v0 WHERE ((~ (CAST(v0.c1 AS BLOB)))) ORDER BY NULL DESC  NULLS LAST, (NOT ((x'' IN ())))  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((((~ (CAST(v0.c1 AS BLOB))))AND(((CAST(vt1.c0 AS INTEGER))IS((((v0.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2)) AND ((vt1.c1, 880955263)))))))) ORDER BY NULL DESC  NULLS LAST, (NOT ((x'' IN ())))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT * FROM vt1, v0 WHERE ((((((((((vt1.c1, vt1.c0)) NOT BETWEEN ((vt1.c0, v0.c2)) AND ((v0.c1, x'804d8d'))))AND(v0.c2 COLLATE NOCASE)))OR(NULL)))OR(((vt1.c1) NOTNULL)))) ORDER BY NULL DESC  NULLS LAST, (NOT ((x'' IN ())))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0 INNER JOIN vt1 ON (-875964384 IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (v0.c0)), CAST(vt1.c1 AS REAL))) WHERE ((((((vt1.c1)>>(vt1.c1))))<((((v0.c0)||(v0.c0)))))) ORDER BY json_type(((vt1.c1) BETWEEN (v0.c0) AND (v0.c2)));
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON (0Xffffffffcbc9d820 IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (v0.c0)), CAST(vt1.c1 AS REAL))) WHERE ((((((vt1.c1)>>(vt1.c1))))<((((v0.c0)||(v0.c0)))))) ORDER BY json_type(((vt1.c1) BETWEEN (v0.c0) AND (v0.c2))) LIMIT 0X1;
SELECT ALL * FROM v0 INNER JOIN vt1 ON (-875964384 IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (v0.c0)), CAST(vt1.c1 AS REAL))) WHERE ((((((vt1.c1)>>(vt1.c1))))<((((v0.c0)||(v0.c0)))))) ORDER BY json_type(((vt1.c1) BETWEEN (v0.c0) AND (v0.c2)));
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON (0Xffffffffcbc9d820 IN (((vt1.c0) NOT BETWEEN (vt1.c1) AND (v0.c0)), CAST(vt1.c1 AS REAL))) WHERE ((((((vt1.c1)>>(vt1.c1))))<((((v0.c0)||(v0.c0)))))) ORDER BY json_type(((vt1.c1) BETWEEN (v0.c0) AND (v0.c2))) LIMIT 0X1;
SELECT * FROM v0, vt1 WHERE (((((((((((x'64')AND(v0.c1)))AND(CAST(vt1.c0 AS NUMERIC))))OR(((((((((v0.c1)AND(v0.c2)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))))AND(LIKE(v0.c2, v0.c2))))OR(CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 END))) ORDER BY (((((((vt1.c1)OR(v0.c2)))OR(v0.c2)))AND(vt1.c1)) IN (((vt1.c0)!=(v0.c0)), ((v0.c2) NOTNULL)))  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((((((x'64')AND(v0.c1)))AND(CAST(vt1.c0 AS NUMERIC))))OR(((((((((v0.c1)AND(v0.c2)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))))AND(LIKE(v0.c2, v0.c2))))OR(CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 END))) ORDER BY (((((((vt1.c1)OR(v0.c2)))OR(v0.c2)))AND(vt1.c1)) IN (((vt1.c0)<>(v0.c0)), ((v0.c2) NOTNULL)))  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((((((((((x'64')AND(v0.c1)))AND(CAST(vt1.c0 AS NUMERIC))))OR(((((((((v0.c1)AND(v0.c2)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))))AND(LIKE(v0.c2, v0.c2))))OR(CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 END))) ORDER BY (((((((vt1.c1)OR(v0.c2)))OR(v0.c2)))AND(vt1.c1)) IN (((vt1.c0)!=(v0.c0)), ((v0.c2) NOTNULL)))  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((((((x'64')AND(v0.c1)))AND(CAST(vt1.c0 AS NUMERIC))))OR(((((((((v0.c1)AND(v0.c2)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))))AND(LIKE(v0.c2, v0.c2))))OR(CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 END))) ORDER BY (((((((vt1.c1)OR(v0.c2)))OR(v0.c2)))AND(vt1.c1)) IN (((vt1.c0)<>(v0.c0)), ((v0.c2) NOTNULL)))  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (HEX(DISTINCT ((v0.c2)<(v0.c1))));
SELECT * FROM v0 WHERE (HEX(DISTINCT ((v0.c2)<(v0.c1)))) LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE ((NOT (((v0.c1)IS(v0.c1))))) LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (HEX(DISTINCT ((v0.c2)<(v0.c1))));
SELECT * FROM v0 WHERE (HEX(DISTINCT ((v0.c2)<(v0.c1)))) LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE ((NOT (((v0.c1)IS(v0.c1))))) LIMIT 0X0;
SELECT COUNT(*) FROM vt1, v0 WHERE (NULL) ORDER BY (((vt1.c1, v0.c1, vt1.c0)) NOT BETWEEN ((TYPEOF(vt1.c1), 768350880, ((vt1.c1) NOTNULL))) AND ((CASE vt1.c1  WHEN v0.c1 THEN v0.c1 END, (v0.c1 IN (vt1.c1)), (((v0.c1, v0.c1, 0Xffffffffd35764cc, vt1.c0)) BETWEEN ((v0.c1, -1.30381765E8, v0.c0, v0.c0)) AND ((v0.c2, v0.c0, vt1.c1, v0.c0))))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((NULL)AND(((CAST(v0.c2 AS BLOB)) ISNULL)))) ORDER BY CAST((~ (vt1.c0)) AS NUMERIC) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE (CASE ((((vt1.c1)OR(vt1.c1)))OR(vt1.c1))  WHEN vt1.c1 COLLATE BINARY THEN vt1.c1 COLLATE BINARY WHEN ((vt1.c0)IS(vt1.c0)) THEN CASE vt1.c0  WHEN x'' THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE x'2125b0' END ELSE ((((((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE ((((vt1.c1)OR(vt1.c1)))OR(vt1.c1))  WHEN vt1.c1 COLLATE BINARY THEN vt1.c1 COLLATE BINARY WHEN ((vt1.c0)IS(vt1.c0)) THEN CASE vt1.c0  WHEN x'' THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE x'2125b0' END ELSE ((((((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)) END);
SELECT * FROM vt1 WHERE (CASE ((((vt1.c1)OR(vt1.c1)))OR(vt1.c1))  WHEN vt1.c1 COLLATE BINARY THEN vt1.c1 COLLATE BINARY WHEN ((vt1.c0)IS(vt1.c0)) THEN CASE vt1.c0  WHEN x'' THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE x'2125b0' END ELSE ((((((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE ((((vt1.c1)OR(vt1.c1)))OR(vt1.c1))  WHEN vt1.c1 COLLATE BINARY THEN vt1.c1 COLLATE BINARY WHEN ((vt1.c0)IS(vt1.c0)) THEN CASE vt1.c0  WHEN x'' THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE x'2125b0' END ELSE ((((((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)) END);
SELECT COUNT(*) FROM v0 WHERE ((((((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c1)))) IS FALSE));
SELECT COUNT(*) FROM v0 WHERE ((((((((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c1)))) IS FALSE))AND((- ((((v0.c2)) BETWEEN ((v0.c2)) AND ((x'226d')))))))) LIMIT 2;
SELECT ALL * FROM vt1 WHERE (CAST(vt1.c1 AS REAL) COLLATE RTRIM);
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c1 AS REAL) COLLATE RTRIM)AND((COALESCE(vt1.c0, NULL, vt1.c0, vt1.c1) IN (vt1.c0 COLLATE NOCASE))))) ORDER BY (~ (((vt1.c1) NOT NULL))), (((vt1.c1 IN (vt1.c1))) BETWEEN (((vt1.c0) NOT NULL)) AND (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)))) ASC;
SELECT ALL * FROM vt1 WHERE (CAST(vt1.c1 AS REAL) COLLATE RTRIM);
SELECT DISTINCT * FROM vt1 WHERE (((CAST(vt1.c1 AS REAL) COLLATE RTRIM)AND((COALESCE(vt1.c0, NULL, vt1.c0, vt1.c1) IN (vt1.c0 COLLATE NOCASE))))) ORDER BY (~ (((vt1.c1) NOT NULL))), (((vt1.c1 IN (vt1.c1))) BETWEEN (((vt1.c0) NOT NULL)) AND (((((((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)))) ASC;
SELECT ALL MAX(vt1.c0) FROM vt1 CROSS JOIN v0 ON ((((((((vt1.c1)LIKE(vt1.c1)))AND(((((((((((v0.c2)OR(0.3583098078608943)))OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(v0.c1)))))OR(LIKELIHOOD(vt1.c1, v0.c0))))OR(((vt1.c0)AND(v0.c2)))) WHERE (LIKELIHOOD(CASE WHEN vt1.c1 THEN vt1.c1 END, ((v0.c0)IS(v0.c1))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 CROSS JOIN v0 ON ((((((((vt1.c1)LIKE(vt1.c1)))AND(((((((((((v0.c2)OR(0.3583098078608943)))OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(v0.c1)))))OR(LIKELIHOOD(vt1.c1, v0.c0))))OR(((vt1.c0)AND(v0.c2)))) WHERE (LIKELIHOOD(CASE WHEN vt1.c1 THEN vt1.c1 END, ((v0.c0)IS(v0.c1)))) LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 CROSS JOIN v0 ON ((((((((vt1.c1)LIKE(vt1.c1)))AND(((((((((((v0.c2)OR(0.3583098078608943)))OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))AND(v0.c1)))))OR(LIKELIHOOD(vt1.c1, v0.c0))))OR(((vt1.c0)AND(v0.c2)))) WHERE ((NOT (((vt1.c1) IS TRUE)))) LIMIT 0X0;
SELECT COUNT(*) FROM vt1 WHERE (0.6953096246569311);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (0.6953096246569311) ORDER BY CASE WHEN vt1.c0 THEN CAST(x'9adbde' AS TEXT) WHEN LIKELY(DISTINCT NULL) THEN (- (vt1.c0)) WHEN ((vt1.c0)<(vt1.c0)) THEN ((vt1.c0) IS FALSE) ELSE (((vt1.c1))>=((vt1.c0))) END  NULLS FIRST, ((LIKELIHOOD(vt1.c1, vt1.c1))||(NULL)) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((vt1.c0)AND(vt1.c1)) COLLATE RTRIM) ORDER BY CASE WHEN vt1.c0 THEN CAST(x'9adbde' AS TEXT) WHEN LIKELY(DISTINCT NULL) THEN (- (vt1.c0)) WHEN ((vt1.c0)<(vt1.c0)) THEN ((vt1.c0) IS FALSE) ELSE (((vt1.c1))>=((vt1.c0))) END  NULLS FIRST, ((LIKELIHOOD(vt1.c1, vt1.c1))||(NULL)) LIMIT 1;
SELECT ALL * FROM vt1, v0 WHERE (((((((vt1.c1)OR(vt1.c0)))AND((v0.c0 IN (v0.c1)))))AND(((v0.c1)/(v0.c2))))) ORDER BY ((+ (v0.c0)) IN (((v0.c2)*(vt1.c1)))) DESC, (((((((vt1.c1)AND(vt1.c0)))OR(v0.c1)))OR(vt1.c1)) IN ()) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE (((((((vt1.c1)OR(vt1.c0)))AND((v0.c0 IN (v0.c1)))))AND(((v0.c1)/(v0.c2))))) ORDER BY ((+ (v0.c0)) IN (((v0.c2)*(vt1.c1)))) DESC, (((((((vt1.c1)AND(vt1.c0)))OR(v0.c1)))OR(vt1.c1)) IN ()) ASC INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (TRIM(NULL, (NOT (vt1.c0)))) ORDER BY ((+ (v0.c0)) IN (((v0.c2)*(vt1.c1)))) DESC, (((((((vt1.c1)AND(vt1.c0)))OR(v0.c1)))OR(vt1.c1)) IN ()) ASC;
SELECT ALL * FROM vt1, v0 WHERE (((((((vt1.c1)OR(vt1.c0)))AND((v0.c0 IN (v0.c1)))))AND(((v0.c1)/(v0.c2))))) ORDER BY ((+ (v0.c0)) IN (((v0.c2)*(vt1.c1)))) DESC, (((((((vt1.c1)AND(vt1.c0)))OR(v0.c1)))OR(vt1.c1)) IN ()) ASC;
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (CASE WHEN vt1.c0 COLLATE NOCASE THEN (((vt1.c0)) BETWEEN ((v0.c2)) AND ((v0.c2))) ELSE ((v0.c2)>=(vt1.c1)) END);
SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE (CASE WHEN vt1.c0 COLLATE NOCASE THEN (((vt1.c0)) BETWEEN ((v0.c2)) AND ((v0.c2))) ELSE ((v0.c2)>=(vt1.c1)) END) LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (((v0.c0)&(UPPER(DISTINCT v0.c0))));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c0)&(UPPER(DISTINCT v0.c0))))AND(((((((((v0.c1)AND(v0.c0)))OR(v0.c1 COLLATE BINARY)))AND(CAST(v0.c1 AS BLOB))))AND(CAST(v0.c1 AS INTEGER)))))) ORDER BY ((v0.c0)OR(v0.c2)) COLLATE BINARY DESC, CASE WHEN v0.c2 THEN v0.c0 ELSE x'' END COLLATE RTRIM LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY ((v0.c0)OR(v0.c2)) COLLATE BINARY DESC, CASE WHEN v0.c2 THEN v0.c0 ELSE x'' END COLLATE RTRIM LIMIT 3;
SELECT ALL * FROM v0 WHERE (((v0.c0)&(UPPER(DISTINCT v0.c0))));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c0)&(UPPER(DISTINCT v0.c0))))AND(((((((((v0.c1)AND(v0.c0)))OR(v0.c1 COLLATE BINARY)))AND(CAST(v0.c1 AS BLOB))))AND(CAST(v0.c1 AS INTEGER)))))) ORDER BY ((v0.c0)OR(v0.c2)) COLLATE BINARY DESC, CASE WHEN v0.c2 THEN v0.c0 ELSE x'' END COLLATE RTRIM LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY ((v0.c0)OR(v0.c2)) COLLATE BINARY DESC, CASE WHEN v0.c2 THEN v0.c0 ELSE x'' END COLLATE RTRIM LIMIT 3;
SELECT * FROM vt1 WHERE (LOWER(DISTINCT ((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)))) ORDER BY ((((vt1.c0)+(vt1.c1))) NOT BETWEEN ((((''))<=((vt1.c1)))) AND (CAST(vt1.c0 AS INTEGER))) ASC  NULLS FIRST, ((NULL)IS NOT(vt1.c1 COLLATE NOCASE));
SELECT ALL * FROM vt1 WHERE (LOWER(DISTINCT ((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END IN (CAST(vt1.c0 AS INTEGER))) ASC  NULLS LAST, (((- (vt1.c1))) NOT NULL), ((((vt1.c1)>>(vt1.c1)))-(((vt1.c1)>>(vt1.c1)))) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (x'') ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END IN (CAST(vt1.c0 AS INTEGER))) ASC  NULLS LAST, (((- (vt1.c1))) NOT NULL), ((((vt1.c1)>>(vt1.c1)))-(((vt1.c1)>>(vt1.c1)))) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1 WHERE (LOWER(DISTINCT ((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)))) ORDER BY ((((vt1.c0)+(vt1.c1))) NOT BETWEEN ((((''))<=((vt1.c1)))) AND (CAST(vt1.c0 AS INTEGER))) ASC  NULLS FIRST, ((NULL)IS NOT(vt1.c1 COLLATE NOCASE));
SELECT ALL * FROM vt1 WHERE (LOWER(DISTINCT ((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)))) ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END IN (CAST(vt1.c0 AS INTEGER))) ASC  NULLS LAST, (((- (vt1.c1))) NOT NULL), ((((vt1.c1)>>(vt1.c1)))-(((vt1.c1)>>(vt1.c1)))) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (x'') ORDER BY (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END IN (CAST(vt1.c0 AS INTEGER))) ASC  NULLS LAST, (((- (vt1.c1))) NOT NULL), ((((vt1.c1)>>(vt1.c1)))-(((vt1.c1)>>(vt1.c1)))) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c2 THEN v0.c0 END)<=((v0.c0 IN (v0.c1)))));
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c2 THEN v0.c0 END)==((v0.c0 IN (v0.c1))))) INTERSECT SELECT * FROM v0 WHERE (INSTR(UPPER(v0.c0), (((v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c1, v0.c2)) AND ((v0.c0, v0.c1, v0.c0)))));
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c2 THEN v0.c0 END)<=((v0.c0 IN (v0.c1)))));
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c2 THEN v0.c0 END)==((v0.c0 IN (v0.c1))))) INTERSECT SELECT * FROM v0 WHERE (INSTR(UPPER(v0.c0), (((v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c1, v0.c2)) AND ((v0.c0, v0.c1, v0.c0)))));
SELECT * FROM v0, vt1 WHERE ((((v0.c1, v0.c1)) BETWEEN ((((vt1.c0) ISNULL), CAST(vt1.c1 AS BLOB))) AND ((CAST(x'ff' AS REAL), UPPER(v0.c1))))) ORDER BY (((((v0.c1)/(v0.c2)), ((((-6.37031859E8)OR(v0.c1)))OR(vt1.c0))))!=((((((((((v0.c2)AND(v0.c0)))AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)), ((((((v0.c2)AND(x'')))OR(vt1.c0)))AND(v0.c0))))), ((((vt1.c0)AND(v0.c0))) NOT BETWEEN (((v0.c1)IS(v0.c0))) AND (((((((vt1.c0)OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c0))));
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c1, v0.c1)) BETWEEN ((((vt1.c0) ISNULL), CAST(vt1.c1 AS BLOB))) AND ((CAST(x'ff' AS REAL), UPPER(v0.c1)))))AND((((((v0.c0)) BETWEEN ((vt1.c0)) AND ((v0.c1))))GLOB(((v0.c1)>=(0.38722814444588294))))))) ORDER BY (((((v0.c1)/(v0.c2)), ((((-6.37031859E8)OR(v0.c1)))OR(vt1.c0))))<>((((((((((v0.c2)AND(v0.c0)))AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)), ((((((v0.c2)AND(x'')))OR(vt1.c0)))AND(v0.c0))))), ((((vt1.c0)AND(v0.c0))) NOT BETWEEN (((v0.c1)IS(v0.c0))) AND (((((((vt1.c0)OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c0)))) LIMIT 3;
SELECT * FROM v0, vt1 WHERE ((((v0.c1, v0.c1)) BETWEEN ((((vt1.c0) ISNULL), CAST(vt1.c1 AS BLOB))) AND ((CAST(x'ff' AS REAL), UPPER(v0.c1))))) ORDER BY (((((v0.c1)/(v0.c2)), ((((-6.37031859E8)OR(v0.c1)))OR(vt1.c0))))!=((((((((((v0.c2)AND(v0.c0)))AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)), ((((((v0.c2)AND(x'')))OR(vt1.c0)))AND(v0.c0))))), ((((vt1.c0)AND(v0.c0))) NOT BETWEEN (((v0.c1)IS(v0.c0))) AND (((((((vt1.c0)OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c0))));
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c1, v0.c1)) BETWEEN ((((vt1.c0) ISNULL), CAST(vt1.c1 AS BLOB))) AND ((CAST(x'ff' AS REAL), UPPER(v0.c1)))))AND((((((v0.c0)) BETWEEN ((vt1.c0)) AND ((v0.c1))))GLOB(((v0.c1)>=(0.38722814444588294))))))) ORDER BY (((((v0.c1)/(v0.c2)), ((((-6.37031859E8)OR(v0.c1)))OR(vt1.c0))))<>((((((((((v0.c2)AND(v0.c0)))AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)), ((((((v0.c2)AND(x'')))OR(vt1.c0)))AND(v0.c0))))), ((((vt1.c0)AND(v0.c0))) NOT BETWEEN (((v0.c1)IS(v0.c0))) AND (((((((vt1.c0)OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c0)))) LIMIT 3;
SELECT * FROM vt1 WHERE ((NOT (vt1.c0 COLLATE BINARY)));
SELECT DISTINCT * FROM vt1 WHERE ((((NOT (vt1.c0 COLLATE BINARY)))AND(highlight(vt1.c0, vt1.c0, ((vt1.c0) ISNULL), (((vt1.c1, vt1.c0, vt1.c1))<=((vt1.c1, vt1.c1, vt1.c0)))))));
SELECT * FROM vt1 WHERE ((NOT (vt1.c0 COLLATE BINARY)));
SELECT DISTINCT * FROM vt1 WHERE ((((NOT (vt1.c0 COLLATE BINARY)))AND(highlight(vt1.c0, vt1.c0, ((vt1.c0) ISNULL), (((vt1.c1, vt1.c0, vt1.c1))<=((vt1.c1, vt1.c1, vt1.c0)))))));
SELECT * FROM v0 WHERE (((((v0.c1 COLLATE RTRIM)AND('3')))AND(((((((v0.c1)OR(v0.c0)))OR(x'e06d')))AND(v0.c0))))) ORDER BY ((((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))) IN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END, ABS(DISTINCT v0.c0))) ASC, v0.c1 ASC;
SELECT DISTINCT * FROM v0 WHERE (((((v0.c1 COLLATE RTRIM)AND('3')))AND(((((((v0.c1)OR(v0.c0)))OR(x'e06d')))AND(v0.c0))))) ORDER BY (((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c1)))) IS FALSE) ASC  NULLS FIRST, ((((x'4f') NOT NULL)) IS FALSE) INTERSECT SELECT DISTINCT * FROM v0 NOT INDEXED WHERE ((('874668208')IS NOT(((v0.c2) NOTNULL)))) ORDER BY (((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c1)))) IS FALSE) ASC  NULLS FIRST, ((((x'4f') NOT NULL)) IS FALSE);
SELECT * FROM v0 WHERE (((((v0.c1 COLLATE RTRIM)AND('3')))AND(((((((v0.c1)OR(v0.c0)))OR(x'e06d')))AND(v0.c0))))) ORDER BY ((((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))) IN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END, ABS(DISTINCT v0.c0))) ASC, v0.c1 ASC;
SELECT DISTINCT * FROM v0 WHERE (((((v0.c1 COLLATE RTRIM)AND('3')))AND(((((((v0.c1)OR(v0.c0)))OR(x'e06d')))AND(v0.c0))))) ORDER BY (((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c1)))) IS FALSE) ASC  NULLS FIRST, ((((x'4f') NOT NULL)) IS FALSE) INTERSECT SELECT DISTINCT * FROM v0 NOT INDEXED WHERE ((('874668208')IS NOT(((v0.c2) NOTNULL)))) ORDER BY (((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c1)))) IS FALSE) ASC  NULLS FIRST, ((((x'4f') NOT NULL)) IS FALSE);
SELECT * FROM vt1, v0 WHERE ((((v0.c1) BETWEEN (v0.c0) AND (vt1.c0)) IN ())) ORDER BY (('9223372036854775807') BETWEEN (((v0.c1)>>(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (v0.c0) AND (1091100226))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c1) BETWEEN (v0.c0) AND (vt1.c0)) IN ())) ORDER BY CAST((('-29000191')-(vt1.c0)) AS BLOB)  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, v0 NOT INDEXED WHERE (SUBSTR((('')IS(v0.c2)), (vt1.c0 IN ()))) ORDER BY CAST((('-29000191')-(vt1.c0)) AS BLOB)  NULLS LAST LIMIT 0X2;
SELECT * FROM vt1, v0 WHERE ((((v0.c1) BETWEEN (v0.c0) AND (vt1.c0)) IN ())) ORDER BY (('9223372036854775807') BETWEEN (((v0.c1)>>(vt1.c0))) AND (((vt1.c0) NOT BETWEEN (v0.c0) AND (1091100226))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c1) BETWEEN (v0.c0) AND (vt1.c0)) IN ())) ORDER BY CAST((('-29000191')-(vt1.c0)) AS BLOB)  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, v0 NOT INDEXED WHERE (SUBSTR((('')IS(v0.c2)), (vt1.c0 IN ()))) ORDER BY CAST((('-29000191')-(vt1.c0)) AS BLOB)  NULLS LAST LIMIT 0X2;
SELECT ALL * FROM v0 WHERE (CASE NULL  WHEN '' THEN v0.c2 END COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (CASE NULL  WHEN '' THEN v0.c2 END COLLATE RTRIM) ORDER BY (IFNULL(DISTINCT v0.c1, v0.c2) IN ((- (v0.c2)))) DESC  NULLS FIRST, (NOT (((v0.c0) IS FALSE))) DESC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c0)) NOT BETWEEN (((NOT (v0.c0)))) AND (((((v0.c1, v0.c2, x'e7b103'))=((v0.c1, v0.c2, v0.c2))))))) ORDER BY (IFNULL(DISTINCT v0.c1, v0.c2) IN ((- (v0.c2)))) DESC  NULLS FIRST, (NOT (((v0.c0) IS FALSE))) DESC LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (CASE NULL  WHEN '' THEN v0.c2 END COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (CASE NULL  WHEN '' THEN v0.c2 END COLLATE RTRIM) ORDER BY (IFNULL(DISTINCT v0.c1, v0.c2) IN ((- (v0.c2)))) DESC  NULLS FIRST, (NOT (((v0.c0) IS FALSE))) DESC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c0)) NOT BETWEEN (((NOT (v0.c0)))) AND (((((v0.c1, v0.c2, x'e7b103'))=((v0.c1, v0.c2, v0.c2))))))) ORDER BY (IFNULL(DISTINCT v0.c1, v0.c2) IN ((- (v0.c2)))) DESC  NULLS FIRST, (NOT (((v0.c0) IS FALSE))) DESC LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE (((((v0.c1) IS FALSE)) BETWEEN (((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1))) AND (x''))) ORDER BY v0.c0  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((((v0.c1) IS FALSE)) BETWEEN (((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1))) AND (x''))) ORDER BY ((vt1.c1 IN (vt1.c0)) IN (ABS(DISTINCT vt1.c0))) DESC  NULLS FIRST, (((((v0.c2, v0.c2))<((v0.c0, ''))))>=(((vt1.c1)/(v0.c1)))), ((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (32506213) AND (((((((((((((vt1.c0)OR(vt1.c1)))AND(v0.c2)))AND(v0.c0)))OR(vt1.c1)))AND(v0.c1)))AND('-875222890')))) ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM v0, vt1 NOT INDEXED WHERE (x'e1eb65') ORDER BY ((vt1.c1 IN (vt1.c0)) IN (ABS(DISTINCT vt1.c0))) DESC  NULLS FIRST, (((((v0.c2, v0.c2))<((v0.c0, ''))))>=(((vt1.c1)/(v0.c1)))), ((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (0X1f00165) AND (((((((((((((vt1.c0)OR(vt1.c1)))AND(v0.c2)))AND(v0.c0)))OR(vt1.c1)))AND(v0.c1)))AND('-875222890')))) ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM v0, vt1 WHERE (((((v0.c1) IS FALSE)) BETWEEN (((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1))) AND (x''))) ORDER BY v0.c0  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((((v0.c1) IS FALSE)) BETWEEN (((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c1))) AND (x''))) ORDER BY ((vt1.c1 IN (vt1.c0)) IN (ABS(DISTINCT vt1.c0))) DESC  NULLS FIRST, (((((v0.c2, v0.c2))<((v0.c0, ''))))>=(((vt1.c1)/(v0.c1)))), ((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (32506213) AND (((((((((((((vt1.c0)OR(vt1.c1)))AND(v0.c2)))AND(v0.c0)))OR(vt1.c1)))AND(v0.c1)))AND('-875222890')))) ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM v0, vt1 NOT INDEXED WHERE (x'e1eb65') ORDER BY ((vt1.c1 IN (vt1.c0)) IN (ABS(DISTINCT vt1.c0))) DESC  NULLS FIRST, (((((v0.c2, v0.c2))<((v0.c0, ''))))>=(((vt1.c1)/(v0.c1)))), ((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (0X1f00165) AND (((((((((((((vt1.c0)OR(vt1.c1)))AND(v0.c2)))AND(v0.c0)))OR(vt1.c1)))AND(v0.c1)))AND('-875222890')))) ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt1, v0 WHERE (LIKELY(-699678204)) ORDER BY v0.c0 DESC  NULLS FIRST, ((((754692099 IN (v0.c1))))<=(((v0.c0 IN (vt1.c1, vt1.c0)))))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (((LIKELY(0xffffffffd64bc204))AND((('0.7476133037444082')>=(((((v0.c0)OR(v0.c1)))AND(v0.c2))))))) ORDER BY (((CAST(v0.c0 AS REAL), ((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c2)), (v0.c0 IN (v0.c1))))=((v0.c2, ((v0.c0)>>(v0.c0)), ((v0.c2)LIKE('D瘔d')))))  NULLS FIRST INTERSECT SELECT * FROM vt1, v0 WHERE ((((v0.c0, vt1.c1)) BETWEEN ((((vt1.c1) NOT NULL), ((v0.c0)/(vt1.c0)))) AND ((v0.c0 COLLATE RTRIM, ((x'4f62') BETWEEN (v0.c0) AND (v0.c1)))))) ORDER BY (((CAST(v0.c0 AS REAL), ((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c2)), (v0.c0 IN (v0.c1))))=((v0.c2, ((v0.c0)>>(v0.c0)), ((v0.c2)LIKE('D瘔d')))))  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (LIKELY(-699678204)) ORDER BY v0.c0 DESC  NULLS FIRST, ((((754692099 IN (v0.c1))))<=(((v0.c0 IN (vt1.c1, vt1.c0)))))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (((LIKELY(0xffffffffd64bc204))AND((('0.7476133037444082')>=(((((v0.c0)OR(v0.c1)))AND(v0.c2))))))) ORDER BY (((CAST(v0.c0 AS REAL), ((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c2)), (v0.c0 IN (v0.c1))))=((v0.c2, ((v0.c0)>>(v0.c0)), ((v0.c2)LIKE('D瘔d')))))  NULLS FIRST INTERSECT SELECT * FROM vt1, v0 WHERE ((((v0.c0, vt1.c1)) BETWEEN ((((vt1.c1) NOT NULL), ((v0.c0)/(vt1.c0)))) AND ((v0.c0 COLLATE RTRIM, ((x'4f62') BETWEEN (v0.c0) AND (v0.c1)))))) ORDER BY (((CAST(v0.c0 AS REAL), ((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c2)), (v0.c0 IN (v0.c1))))=((v0.c2, ((v0.c0)>>(v0.c0)), ((v0.c2)LIKE('D瘔d')))))  NULLS FIRST;
SELECT * FROM vt1 WHERE ((vt1.c0 IN ((vt1.c0 IN (vt1.c1, 'J')))));
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ((vt1.c0 IN (vt1.c1, 'J')))))AND(LIKE(((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)), LOWER(DISTINCT vt1.c1), '1')))) LIMIT 4 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC)) LIMIT 0x4;
SELECT * FROM vt1 WHERE ((vt1.c0 IN ((vt1.c0 IN (vt1.c1, 'J')))));
SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0 IN ((vt1.c0 IN (vt1.c1, 'J')))))AND(LIKE(((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)), LOWER(DISTINCT vt1.c1), '1')))) LIMIT 4 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CAST(((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)) AS NUMERIC)) LIMIT 0x4;
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (CASE WHEN (~ (vt1.c0)) THEN CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END END) ORDER BY CAST(vt1.c0 AS NUMERIC) COLLATE NOCASE  NULLS LAST, ((((TOTAL_CHANGES())AND(((v0.c1)==('1399432799')))))AND(CASE WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END)) ASC  NULLS LAST, x'' ASC  NULLS LAST, ((CASE v0.c0  WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 ELSE v0.c0 END)-(((v0.c0)&(x'88')))) ASC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c1) FROM v0, vt1 WHERE (CASE WHEN (~ (vt1.c0)) THEN CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END END) ORDER BY CAST(vt1.c0 AS NUMERIC) COLLATE NOCASE  NULLS LAST, ((((TOTAL_CHANGES())AND(((v0.c1)=('1399432799')))))AND(CASE WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END)) ASC  NULLS LAST, x'' ASC  NULLS LAST, ((CASE v0.c0  WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 ELSE v0.c0 END)-(((v0.c0)&(x'88')))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM v0, vt1 WHERE (((v0.c1) BETWEEN (((v0.c0) NOT BETWEEN (vt1.c1) AND (v0.c0))) AND (((vt1.c0)GLOB(v0.c0))))) ORDER BY CAST(vt1.c0 AS NUMERIC) COLLATE NOCASE  NULLS LAST, ((((TOTAL_CHANGES())AND(((v0.c1)==('1399432799')))))AND(CASE WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END)) ASC  NULLS LAST, x'' ASC  NULLS LAST, ((CASE v0.c0  WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 ELSE v0.c0 END)-(((v0.c0)&(x'88')))) ASC  NULLS FIRST;
SELECT * FROM v0 CROSS JOIN vt1 ON v0.c2 WHERE (((vt1.c1 COLLATE RTRIM)*(vt1.c1 COLLATE RTRIM))) ORDER BY ((UNLIKELY(DISTINCT v0.c0))<>(((((((vt1.c0)AND(v0.c1)))AND(v0.c1)))AND(NULL))))  NULLS LAST, (((((vt1.c1)) BETWEEN ((v0.c1)) AND ((vt1.c0)))) BETWEEN (((((((vt1.c1)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0))) AND (((vt1.c0)/(vt1.c1))));
SELECT * FROM v0 CROSS JOIN vt1 ON v0.c2 WHERE (((((vt1.c1 COLLATE RTRIM)*(vt1.c1 COLLATE RTRIM)))AND(x'66'))) ORDER BY (((v0.c1 IN (vt1.c1))) ISNULL) INTERSECT SELECT * FROM v0 CROSS JOIN vt1 ON v0.c2 WHERE (x'9c') ORDER BY (((v0.c1 IN (vt1.c1))) ISNULL);
SELECT * FROM v0 CROSS JOIN vt1 ON v0.c2 WHERE (((vt1.c1 COLLATE RTRIM)*(vt1.c1 COLLATE RTRIM))) ORDER BY ((UNLIKELY(DISTINCT v0.c0))<>(((((((vt1.c0)AND(v0.c1)))AND(v0.c1)))AND(NULL))))  NULLS LAST, (((((vt1.c1)) BETWEEN ((v0.c1)) AND ((vt1.c0)))) BETWEEN (((((((vt1.c1)AND(v0.c0)))OR(v0.c2)))OR(vt1.c0))) AND (((vt1.c0)/(vt1.c1))));
SELECT * FROM v0 CROSS JOIN vt1 ON v0.c2 WHERE (((((vt1.c1 COLLATE RTRIM)*(vt1.c1 COLLATE RTRIM)))AND(x'66'))) ORDER BY (((v0.c1 IN (vt1.c1))) ISNULL) INTERSECT SELECT * FROM v0 CROSS JOIN vt1 ON v0.c2 WHERE (x'9c') ORDER BY (((v0.c1 IN (vt1.c1))) ISNULL);
SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE (CASE WHEN ((v0.c0) IS TRUE) THEN ((((v0.c0)AND(vt1.c1)))OR(v0.c2)) WHEN v0.c0 COLLATE BINARY THEN (v0.c1 IN ()) WHEN x'' THEN ((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)) WHEN (((v0.c0, vt1.c1))=((v0.c2, vt1.c1))) THEN ((v0.c1)IS(vt1.c0)) END) ORDER BY CAST(vt1.c1 AS NUMERIC) COLLATE NOCASE ASC  NULLS LAST;
SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE (CASE WHEN ((v0.c0) IS TRUE) THEN ((((v0.c0)AND(vt1.c1)))OR(v0.c2)) WHEN v0.c0 COLLATE BINARY THEN (v0.c1 IN ()) WHEN x'' THEN ((vt1.c1) BETWEEN (v0.c1) AND (v0.c0)) WHEN (((v0.c0, vt1.c1))==((v0.c2, vt1.c1))) THEN ((v0.c1)IS(vt1.c0)) END) ORDER BY v0.c0 COLLATE BINARY COLLATE BINARY  NULLS LAST INTERSECT SELECT MIN(v0.c2) FROM vt1, v0 WHERE (((((v0.c0)-(vt1.c1)))LIKE('l'))) ORDER BY v0.c0 COLLATE BINARY COLLATE BINARY  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM v0 NATURAL JOIN vt1 WHERE (((((v0.c0) IS TRUE)) BETWEEN ((v0.c0 IN ())) AND (NULL)));
SELECT DISTINCT MIN(vt1.c0) FROM v0 NATURAL JOIN vt1 WHERE (((((((v0.c0) IS TRUE)) BETWEEN ((v0.c0 IN ())) AND (NULL)))AND((+ (vt1.c0))))) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM v0 NATURAL JOIN vt1 WHERE (((v0.c1)OR(v0.c0)) COLLATE BINARY);
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN ()))LIKE(x'cb' COLLATE RTRIM))) ORDER BY ((((v0.c2, NULL, v0.c0, 0.6043796161956012)) BETWEEN ((v0.c0, v0.c1, v0.c2, v0.c0)) AND ((v0.c0, v0.c2, v0.c2, v0.c2))) IN ())  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN ()))LIKE(x'cb' COLLATE RTRIM))) ORDER BY (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END IN (CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN x'61' THEN v0.c1 END, v0.c0 COLLATE RTRIM)) ASC  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN ()))LIKE(x'cb' COLLATE RTRIM))) ORDER BY ((((v0.c2, NULL, v0.c0, 0.6043796161956012)) BETWEEN ((v0.c0, v0.c1, v0.c2, v0.c0)) AND ((v0.c0, v0.c2, v0.c2, v0.c2))) IN ())  NULLS LAST;
SELECT * FROM v0 WHERE (CASE v0.c0  WHEN ((((((v0.c1)AND(v0.c1)))AND(v0.c1)))AND('0.5164669802166773')) THEN v0.c0 WHEN (v0.c0 IN ()) THEN ((v0.c0)>>(v0.c1)) END) ORDER BY ((CAST(v0.c0 AS NUMERIC))<(v0.c2)) ASC, (CAST(v0.c2 AS INTEGER) IN (LOWER(v0.c1)));
SELECT ALL * FROM v0 WHERE (CASE v0.c0  WHEN ((((((v0.c1)AND(v0.c1)))AND(v0.c1)))AND('0.5164669802166773')) THEN v0.c0 WHEN (v0.c0 IN ()) THEN ((v0.c0)>>(v0.c1)) END) ORDER BY ((v0.c1)LIKE(v0.c1)) COLLATE NOCASE ASC LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE (((((((((((((((((v0.c1)AND(v0.c1)))OR(v0.c2)))OR(v0.c1)))AND(v0.c1)))OR(v0.c0)))AND((v0.c2 IN (x'')))))AND(LIKELY(v0.c0))))AND(v0.c1))) ORDER BY ((v0.c1)LIKE(v0.c1)) COLLATE NOCASE ASC LIMIT 0X0;
SELECT * FROM v0 WHERE (CASE v0.c0  WHEN ((((((v0.c1)AND(v0.c1)))AND(v0.c1)))AND('0.5164669802166773')) THEN v0.c0 WHEN (v0.c0 IN ()) THEN ((v0.c0)>>(v0.c1)) END) ORDER BY ((CAST(v0.c0 AS NUMERIC))<(v0.c2)) ASC, (CAST(v0.c2 AS INTEGER) IN (LOWER(v0.c1)));
SELECT ALL * FROM v0 WHERE (CASE v0.c0  WHEN ((((((v0.c1)AND(v0.c1)))AND(v0.c1)))AND('0.5164669802166773')) THEN v0.c0 WHEN (v0.c0 IN ()) THEN ((v0.c0)>>(v0.c1)) END) ORDER BY ((v0.c1)LIKE(v0.c1)) COLLATE NOCASE ASC LIMIT 0 INTERSECT SELECT ALL * FROM v0 WHERE (((((((((((((((((v0.c1)AND(v0.c1)))OR(v0.c2)))OR(v0.c1)))AND(v0.c1)))OR(v0.c0)))AND((v0.c2 IN (x'')))))AND(LIKELY(v0.c0))))AND(v0.c1))) ORDER BY ((v0.c1)LIKE(v0.c1)) COLLATE NOCASE ASC LIMIT 0X0;
SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE (v0.c2) ORDER BY CASE CASE v0.c0  WHEN v0.c0 THEN '729471721' ELSE vt1.c1 END  WHEN ((v0.c2) BETWEEN (v0.c0) AND (v0.c2)) THEN v0.c1 WHEN ((((((((v0.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(v0.c0)) THEN v0.c1 COLLATE RTRIM WHEN ((((((NULL)OR(v0.c0)))OR(v0.c2)))AND(v0.c2)) THEN ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) ELSE ((v0.c0)GLOB(NULL)) END DESC, ((vt1.c1 COLLATE BINARY) NOT BETWEEN (SQLITE_COMPILEOPTION_USED(vt1.c1)) AND ('1901150246')) DESC;
SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE (v0.c2) ORDER BY ((IFNULL(DISTINCT v0.c2, vt1.c0)) BETWEEN ((v0.c0 IN ())) AND (('1079341618' IN ()))) DESC LIMIT 0 INTERSECT SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE (LOWER(((v0.c0)|(v0.c0)))) ORDER BY ((IFNULL(DISTINCT v0.c2, vt1.c0)) BETWEEN ((v0.c0 IN ())) AND (('1079341618' IN ()))) DESC LIMIT 0;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((vt1.c1 IN (CAST(vt1.c1 AS NUMERIC))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((((vt1.c1 IN (CAST(vt1.c1 AS NUMERIC))))AND(''))) ORDER BY ((vt1.c0 COLLATE RTRIM)>>(vt1.c1 COLLATE NOCASE)) ASC  NULLS LAST, ((((((((((CAST(vt1.c0 AS NUMERIC))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR((~ (vt1.c1)))))OR('!')))AND(CASE WHEN vt1.c1 THEN vt1.c1 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)))AND(((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))) ASC INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CAST(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 WHEN '+y' THEN vt1.c1 END AS TEXT)) ORDER BY ((vt1.c0 COLLATE RTRIM)>>(vt1.c1 COLLATE NOCASE)) ASC  NULLS LAST, ((((((((((CAST(vt1.c0 AS NUMERIC))OR(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))))OR((~ (vt1.c1)))))OR('!')))AND(CASE WHEN vt1.c1 THEN vt1.c1 WHEN NULL THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)))AND(((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))) ASC;
SELECT * FROM v0 CROSS JOIN vt1 ON (((v0.c1, v0.c0)) BETWEEN ((((vt1.c1) BETWEEN (v0.c2) AND (v0.c0)), (v0.c0 IN ()))) AND ((((v0.c1) IS FALSE), ((((((NULL)AND('K')))AND(v0.c2)))OR(v0.c1))))) WHERE ((- (((vt1.c0)>=(v0.c1)))));
SELECT * FROM v0 CROSS JOIN vt1 ON (((v0.c1, v0.c0)) BETWEEN ((((vt1.c1) BETWEEN (v0.c2) AND (v0.c0)), (v0.c0 IN ()))) AND ((((v0.c1) IS FALSE), ((((((NULL)AND('K')))AND(v0.c2)))OR(v0.c1))))) WHERE ((- (((vt1.c0)>(v0.c1))))) ORDER BY HEX(((((((vt1.c1)AND(vt1.c0)))AND(v0.c2)))OR(v0.c0))) DESC, x'3d0ecd' ASC  NULLS LAST;
SELECT * FROM v0 CROSS JOIN vt1 ON (((v0.c1, v0.c0)) BETWEEN ((((vt1.c1) BETWEEN (v0.c2) AND (v0.c0)), (v0.c0 IN ()))) AND ((((v0.c1) IS FALSE), ((((((NULL)AND('K')))AND(v0.c2)))OR(v0.c1))))) WHERE ((- (((vt1.c0)>=(v0.c1)))));
SELECT * FROM v0 CROSS JOIN vt1 ON (((v0.c1, v0.c0)) BETWEEN ((((vt1.c1) BETWEEN (v0.c2) AND (v0.c0)), (v0.c0 IN ()))) AND ((((v0.c1) IS FALSE), ((((((NULL)AND('K')))AND(v0.c2)))OR(v0.c1))))) WHERE ((- (((vt1.c0)>(v0.c1))))) ORDER BY HEX(((((((vt1.c1)AND(vt1.c0)))AND(v0.c2)))OR(v0.c0))) DESC, x'3d0ecd' ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((((((vt1.c0) IS TRUE))OR(((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))))OR(((v0.c0)<<(v0.c2)))))OR(CASE WHEN vt1.c0 THEN v0.c2 END)));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((((((vt1.c0) IS TRUE))OR(((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))))OR(((v0.c0)<<(v0.c2)))))OR(CASE WHEN vt1.c0 THEN v0.c2 END))) INTERSECT SELECT COUNT(*) FROM v0, vt1 WHERE (((((NULL) BETWEEN (vt1.c1) AND ('')))||(v0.c2)));
SELECT ALL COUNT(*) FROM vt1 WHERE (vt1.c1);
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (vt1.c1);
SELECT * FROM v0 WHERE (CAST(v0.c2 AS NUMERIC)) ORDER BY ((CAST(v0.c0 AS NUMERIC))>(((0.07545584557412965) NOT BETWEEN (v0.c2) AND (v0.c0)))), ((((v0.c2)<>(v0.c0)))<(((v0.c2) IS FALSE))) DESC;
SELECT ALL * FROM v0 WHERE (CAST(v0.c2 AS NUMERIC)) ORDER BY ((highlight(v0.c1, v0.c0, v0.c2, v0.c0))=(((((((v0.c2)OR(v0.c1)))OR(NULL)))OR(v0.c0)))), (v0.c2 IN ()) COLLATE RTRIM;
SELECT * FROM v0 WHERE (CAST(v0.c2 AS NUMERIC)) ORDER BY ((CAST(v0.c0 AS NUMERIC))>(((0.07545584557412965) NOT BETWEEN (v0.c2) AND (v0.c0)))), ((((v0.c2)<>(v0.c0)))<(((v0.c2) IS FALSE))) DESC;
SELECT ALL * FROM v0 WHERE (CAST(v0.c2 AS NUMERIC)) ORDER BY ((highlight(v0.c1, v0.c0, v0.c2, v0.c0))=(((((((v0.c2)OR(v0.c1)))OR(NULL)))OR(v0.c0)))), (v0.c2 IN ()) COLLATE RTRIM;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((LIKELIHOOD(v0.c1, v0.c2))-(((vt1.c0)<(vt1.c1)))));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((LIKELIHOOD(v0.c1, v0.c2))-(((vt1.c0)<(vt1.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (COALESCE(DISTINCT ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)), x'' COLLATE BINARY)) LIMIT 0;
SELECT ALL * FROM v0 WHERE (CASE (NULL IN ())  WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN (~ (v0.c1)) WHEN PRINTF(v0.c1, v0.c0) THEN x'3a' END);
SELECT DISTINCT * FROM v0 WHERE (CASE (NULL IN ())  WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN (~ (v0.c1)) WHEN PRINTF(v0.c1, v0.c0) THEN x'3a' END) ORDER BY v0.c1 ASC  NULLS FIRST, ((((v0.c1)IS(v0.c0))) NOT BETWEEN (((((((v0.c0)AND(v0.c1)))OR(v0.c1)))OR(v0.c2))) AND (CAST(v0.c2 AS BLOB))) INTERSECT SELECT DISTINCT * FROM v0 WHERE ('0.7476133037444082') ORDER BY v0.c1 ASC  NULLS FIRST, ((((v0.c1)IS(v0.c0))) NOT BETWEEN (((((((v0.c0)AND(v0.c1)))OR(v0.c1)))OR(v0.c2))) AND (CAST(v0.c2 AS BLOB)));
SELECT ALL * FROM v0 WHERE (CASE (NULL IN ())  WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN (~ (v0.c1)) WHEN PRINTF(v0.c1, v0.c0) THEN x'3a' END);
SELECT DISTINCT * FROM v0 WHERE (CASE (NULL IN ())  WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN (~ (v0.c1)) WHEN PRINTF(v0.c1, v0.c0) THEN x'3a' END) ORDER BY v0.c1 ASC  NULLS FIRST, ((((v0.c1)IS(v0.c0))) NOT BETWEEN (((((((v0.c0)AND(v0.c1)))OR(v0.c1)))OR(v0.c2))) AND (CAST(v0.c2 AS BLOB))) INTERSECT SELECT DISTINCT * FROM v0 WHERE ('0.7476133037444082') ORDER BY v0.c1 ASC  NULLS FIRST, ((((v0.c1)IS(v0.c0))) NOT BETWEEN (((((((v0.c0)AND(v0.c1)))OR(v0.c1)))OR(v0.c2))) AND (CAST(v0.c2 AS BLOB)));
SELECT MIN(vt1.c1) FROM v0 INNER JOIN vt1 ON (NOT (((0Xffffffffeeea8817) BETWEEN (v0.c1) AND (vt1.c1)))) WHERE (CAST(((v0.c2)=(vt1.c1)) AS TEXT)) ORDER BY CASE v0.c2  WHEN (('-757902307')!=(0.7876490594992982)) THEN ((((((((vt1.c0)OR(vt1.c0)))OR(v0.c1)))AND(vt1.c0)))AND(v0.c1)) ELSE (((vt1.c1, vt1.c0, v0.c0)) BETWEEN ((v0.c0, vt1.c1, vt1.c1)) AND ((v0.c1, vt1.c0, vt1.c1))) END  NULLS LAST, CASE WHEN (NOT (v0.c1)) THEN ((v0.c1)LIKE(vt1.c1)) END DESC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c1) FROM v0 INNER JOIN vt1 ON (NOT (((-286619625) BETWEEN (v0.c1) AND (vt1.c1)))) WHERE (((CAST(((v0.c2)==(vt1.c1)) AS TEXT))AND(LIKE(x'd39514', ((((vt1.c1)OR(v0.c2)))OR(vt1.c0)), 'F')))) ORDER BY LOWER((((v0.c1, vt1.c0, vt1.c1, v0.c2))<=((v0.c2, v0.c2, vt1.c1, v0.c1)))) DESC, (NOT (((v0.c1)AND(vt1.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM v0 INNER JOIN vt1 ON (NOT (((0Xffffffffeeea8817) BETWEEN (v0.c1) AND (vt1.c1)))) WHERE ((v0.c2 IN ()) COLLATE RTRIM) ORDER BY LOWER((((v0.c1, vt1.c0, vt1.c1, v0.c2))<=((v0.c2, v0.c2, vt1.c1, v0.c1)))) DESC, (NOT (((v0.c1)AND(vt1.c0))))  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1 WHERE (CASE WHEN 0.5718771436063474 THEN (NOT (vt1.c0)) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN 0.5718771436063474 THEN (NOT (vt1.c0)) END) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (CASE WHEN 0.5718771436063474 THEN (NOT (vt1.c0)) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN 0.5718771436063474 THEN (NOT (vt1.c0)) END) LIMIT 0x0;
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((((v0.c2, v0.c0)) NOT BETWEEN (((((v0.c1, v0.c0))==((v0.c2, NULL))), ((v0.c2)LIKE(v0.c1)))) AND (((- (v0.c1)), ((v0.c0)<(v0.c2))))));
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((((((v0.c2, v0.c0)) NOT BETWEEN (((((v0.c1, v0.c0))==((v0.c2, NULL))), ((v0.c2)LIKE(v0.c1)))) AND (((- (v0.c1)), ((v0.c0)<(v0.c2))))))AND(((((v0.c1)%('%?6spS')))<('-1298641400'))))) LIMIT 0;
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON (((vt1.c1, v0.c1, 0.7041918706457263, vt1.c1, v0.c0)) NOT BETWEEN ((v0.c0 COLLATE BINARY, ((vt1.c1)*(v0.c2)), JULIANDAY('448962842', v0.c0, v0.c0, v0.c2), (((v0.c1)) BETWEEN (('-624547642')) AND ((0.8392803826547917))), NULL)) AND ((CASE v0.c0  WHEN v0.c0 THEN x'f2141c39' WHEN x'9c' THEN NULL END, ((vt1.c1)IS(v0.c1)), vt1.c1 COLLATE RTRIM, HEX(DISTINCT vt1.c1), (+ (v0.c2))))) WHERE ((((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN '
' END, (- (vt1.c0))))>((v0.c1, (NOT (v0.c2))))));
SELECT ALL COUNT(*) FROM vt1 INNER JOIN v0 ON (((vt1.c1, v0.c1, 0.7041918706457263, vt1.c1, v0.c0)) NOT BETWEEN ((v0.c0 COLLATE BINARY, ((vt1.c1)*(v0.c2)), JULIANDAY('448962842', v0.c0, v0.c0, v0.c2), (((v0.c1)) BETWEEN (('-624547642')) AND ((0.8392803826547917))), NULL)) AND ((CASE v0.c0  WHEN v0.c0 THEN x'f2141c39' WHEN x'9c' THEN NULL END, ((vt1.c1)IS(v0.c1)), vt1.c1 COLLATE RTRIM, HEX(DISTINCT vt1.c1), (+ (v0.c2))))) WHERE ((((((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN '
' END, (- (vt1.c0))))>((v0.c1, (NOT (v0.c2))))))AND((~ (CAST(v0.c1 AS REAL)))))) ORDER BY IFNULL(((v0.c0) ISNULL), ((((-1793785173)OR(v0.c1)))AND(vt1.c1)))  NULLS LAST, LOWER(((vt1.c0) NOT BETWEEN (v0.c0) AND (vt1.c0)))  NULLS LAST LIMIT 2 INTERSECT SELECT COUNT(*) FROM vt1 INNER JOIN v0 ON (((vt1.c1, v0.c1, 0.7041918706457263, vt1.c1, v0.c0)) NOT BETWEEN ((v0.c0 COLLATE BINARY, ((vt1.c1)*(v0.c2)), JULIANDAY('448962842', v0.c0, v0.c0, v0.c2), (((v0.c1)) BETWEEN (('-624547642')) AND ((0.8392803826547917))), NULL)) AND ((CASE v0.c0  WHEN v0.c0 THEN x'f2141c39' WHEN x'9c' THEN NULL END, ((vt1.c1)IS(v0.c1)), vt1.c1 COLLATE RTRIM, HEX(DISTINCT vt1.c1), (+ (v0.c2))))) WHERE (((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 END)||(CAST(NULL AS REAL)))) ORDER BY IFNULL(((v0.c0) ISNULL), ((((0Xffffffff951502ab)OR(v0.c1)))AND(vt1.c1)))  NULLS LAST, LOWER(((vt1.c0) NOT BETWEEN (v0.c0) AND (vt1.c0)))  NULLS LAST LIMIT 0X2;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((((v0.c2)/(v0.c0)))AND(((v0.c2)>>(v0.c2))))) ORDER BY (+ (((x'21a6')<>(v0.c1))));
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((((((v0.c2)/(v0.c0)))AND(((v0.c2)>>(v0.c2)))))AND(CAST(((NULL)>=(v0.c0)) AS BLOB)))) ORDER BY (+ (((x'21a6')!=(v0.c1)))) LIMIT 0x1;
SELECT MIN(v0.c0) FROM v0 WHERE ((((v0.c1, v0.c0))>((NULL, v0.c2))) COLLATE BINARY);
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ((((((v0.c1, v0.c0))>((NULL, v0.c2))) COLLATE BINARY)AND(CASE v0.c0 COLLATE RTRIM  WHEN ((v0.c0)>=(v0.c0)) THEN (- (v0.c2)) WHEN ((1532242055)/(v0.c2)) THEN ((((v0.c0)OR(v0.c0)))OR(v0.c2)) WHEN ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2)) THEN ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) ELSE ((v0.c0)>(v0.c1)) END))) INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (CAST(rtreenode(v0.c0, v0.c0) AS TEXT));
SELECT MIN(v0.c2) FROM v0 WHERE ((((v0.c0)) BETWEEN ((-326459721)) AND (('')))) ORDER BY LOWER(DISTINCT ((v0.c2) IS FALSE)) ASC  NULLS LAST, LTRIM(((v0.c1) IS TRUE)) DESC  NULLS FIRST, CASE (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c2, '')))  WHEN CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 END THEN v0.c0 COLLATE NOCASE END  NULLS LAST;
SELECT MIN(v0.c2) FROM v0 WHERE ((((((v0.c0)) BETWEEN ((0xffffffffec8a9eb7)) AND ((''))))AND((((((v0.c1)<<(v0.c0))))<((((((((v0.c2)AND(v0.c0)))OR(0.10096200564450541)))OR(v0.c0)))))))) ORDER BY LOWER(DISTINCT ((v0.c2) IS FALSE)) ASC  NULLS LAST, LTRIM(((v0.c1) IS TRUE)) DESC  NULLS FIRST, CASE (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c2, '')))  WHEN CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 END THEN v0.c0 COLLATE NOCASE END  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL MIN(v0.c2) FROM v0 WHERE ((((((v0.c2, 0.9854286108607356, v0.c2))==((v0.c2, v0.c1, v0.c2))))&(CAST(v0.c2 AS BLOB)))) ORDER BY LOWER(DISTINCT ((v0.c2) IS FALSE)) ASC  NULLS LAST, LTRIM(((v0.c1) IS TRUE)) DESC  NULLS FIRST, CASE (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c2, '')))  WHEN CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 END THEN v0.c0 COLLATE NOCASE END  NULLS LAST LIMIT 1;
SELECT MIN(v0.c1) FROM v0 WHERE (((v0.c2)<<(v0.c1)) COLLATE RTRIM);
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((((v0.c2)<<(v0.c1)) COLLATE RTRIM)AND(((v0.c1 COLLATE NOCASE)IS(((v0.c0) NOTNULL))))));
SELECT COUNT(*) FROM v0 WHERE (json_extract(((v0.c1) NOT NULL), ((v0.c1) BETWEEN ('ꋷc	') AND (v0.c1)), ((v0.c1)%(v0.c2)), (((NULL, v0.c2)) NOT BETWEEN ((v0.c2, v0.c1)) AND ((v0.c1, v0.c2))))) ORDER BY HEX(DISTINCT v0.c2);
SELECT DISTINCT COUNT(*) FROM v0 WHERE (json_extract(((v0.c1) NOT NULL), ((v0.c1) BETWEEN ('ꋷc	') AND (v0.c1)), ((v0.c1)%(v0.c2)), (((NULL, v0.c2)) NOT BETWEEN ((v0.c2, v0.c1)) AND ((v0.c1, v0.c2))))) ORDER BY 0.48889226301876265 DESC  NULLS LAST, SQLITE_COMPILEOPTION_GET(((((((v0.c2)AND(v0.c2)))AND(v0.c2)))OR(v0.c0))) LIMIT 0;
SELECT * FROM vt1, v0 WHERE ((+ ((((v0.c2, v0.c1))!=((v0.c0, v0.c2))))));
SELECT ALL * FROM vt1, v0 WHERE ((((+ ((((v0.c2, v0.c1))<((v0.c0, v0.c2))))))AND((((((((((+ (v0.c2)))OR(((((((((((vt1.c0)OR(x'')))OR(v0.c2)))OR(v0.c2)))AND(v0.c0)))AND(v0.c1)))))OR(((((vt1.c1)AND(v0.c1)))AND(vt1.c1)))))AND(v0.c0)))OR(((((vt1.c0)OR(v0.c1)))OR(v0.c2))))))) INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((x'')OR(((vt1.c0) IS FALSE))))AND(CAST(vt1.c1 AS NUMERIC))));
SELECT * FROM vt1, v0 WHERE ((+ ((((v0.c2, v0.c1))!=((v0.c0, v0.c2))))));
SELECT ALL * FROM vt1, v0 WHERE ((((+ ((((v0.c2, v0.c1))<((v0.c0, v0.c2))))))AND((((((((((+ (v0.c2)))OR(((((((((((vt1.c0)OR(x'')))OR(v0.c2)))OR(v0.c2)))AND(v0.c0)))AND(v0.c1)))))OR(((((vt1.c1)AND(v0.c1)))AND(vt1.c1)))))AND(v0.c0)))OR(((((vt1.c0)OR(v0.c1)))OR(v0.c2))))))) INTERSECT SELECT ALL * FROM vt1, v0 WHERE (((((x'')OR(((vt1.c0) IS FALSE))))AND(CAST(vt1.c1 AS NUMERIC))));
SELECT ALL * FROM vt1 WHERE (CASE ((1278245907)IS(vt1.c0))  WHEN (vt1.c0 IN (vt1.c1, vt1.c0)) THEN ((vt1.c1) ISNULL) END);
SELECT ALL * FROM vt1 WHERE (((CASE ((1278245907)IS(vt1.c0))  WHEN (vt1.c0 IN (vt1.c1, vt1.c0)) THEN ((vt1.c1) ISNULL) END)AND(NULL)));
SELECT ALL * FROM vt1 WHERE (CASE ((1278245907)IS(vt1.c0))  WHEN (vt1.c0 IN (vt1.c1, vt1.c0)) THEN ((vt1.c1) ISNULL) END);
SELECT ALL * FROM vt1 WHERE (((CASE ((1278245907)IS(vt1.c0))  WHEN (vt1.c0 IN (vt1.c1, vt1.c0)) THEN ((vt1.c1) ISNULL) END)AND(NULL)));
SELECT * FROM v0 WHERE ((~ (((v0.c0)GLOB(v0.c1))))) ORDER BY CASE ((v0.c2)<(v0.c0))  WHEN (((v0.c0))>=((v0.c0))) THEN (- (v0.c1)) WHEN ((v0.c1) ISNULL) THEN ((v0.c1)*(v0.c2)) ELSE (v0.c2 IN (v0.c0)) END DESC, ((('L\', v0.c1)) BETWEEN ((v0.c2 COLLATE BINARY, 0.811860941758209)) AND ((((((v0.c1)OR(x'')))AND(v0.c1)), ((v0.c1)/(v0.c2))))) DESC  NULLS LAST, ((v0.c0)*(((((v0.c1)AND(v0.c2)))OR(v0.c1)))) DESC;
SELECT DISTINCT * FROM v0 WHERE ((((~ (((v0.c0)GLOB(v0.c1)))))AND((~ (((v0.c1) ISNULL)))))) ORDER BY UPPER(DISTINCT ((v0.c1)LIKE(v0.c2))) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((0.41391613230489754) NOT BETWEEN (LOWER(DISTINCT v0.c0)) AND (x'f7'))) ORDER BY UPPER(DISTINCT ((v0.c1)LIKE(v0.c2))) DESC  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE ((~ (((v0.c0)GLOB(v0.c1))))) ORDER BY CASE ((v0.c2)<(v0.c0))  WHEN (((v0.c0))>=((v0.c0))) THEN (- (v0.c1)) WHEN ((v0.c1) ISNULL) THEN ((v0.c1)*(v0.c2)) ELSE (v0.c2 IN (v0.c0)) END DESC, ((('L\', v0.c1)) BETWEEN ((v0.c2 COLLATE BINARY, 0.811860941758209)) AND ((((((v0.c1)OR(x'')))AND(v0.c1)), ((v0.c1)/(v0.c2))))) DESC  NULLS LAST, ((v0.c0)*(((((v0.c1)AND(v0.c2)))OR(v0.c1)))) DESC;
SELECT DISTINCT * FROM v0 WHERE ((((~ (((v0.c0)GLOB(v0.c1)))))AND((~ (((v0.c1) ISNULL)))))) ORDER BY UPPER(DISTINCT ((v0.c1)LIKE(v0.c2))) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((0.41391613230489754) NOT BETWEEN (LOWER(DISTINCT v0.c0)) AND (x'f7'))) ORDER BY UPPER(DISTINCT ((v0.c1)LIKE(v0.c2))) DESC  NULLS LAST LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)-(vt1.c0))) NOT BETWEEN (CAST(vt1.c1 AS REAL)) AND (((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)-(vt1.c0))) NOT BETWEEN (CAST(vt1.c1 AS REAL)) AND (((((vt1.c0)OR(vt1.c0)))AND(vt1.c0))))) LIMIT 0x4;
SELECT MAX(v0.c2) FROM v0 WHERE (((((v0.c0 IN (v0.c2))))<((CASE v0.c0  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN x'' WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 END)))) ORDER BY (((((v0.c2)) BETWEEN ((v0.c2)) AND ((v0.c0))))&(((v0.c1)|(v0.c2))))  NULLS LAST, ((NULL) NOT BETWEEN ('Vd[q+') AND (((v0.c1)GLOB(v0.c2)))), CAST(((v0.c2) NOT BETWEEN (v0.c0) AND (-1.84481855E9)) AS REAL)  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((v0.c0 IN (v0.c2))))<((CASE v0.c0  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN x'' WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 END)))) ORDER BY (((((v0.c2)) BETWEEN ((v0.c2)) AND ((v0.c0))))&(((v0.c1)|(v0.c2))))  NULLS LAST, ((NULL) NOT BETWEEN ('Vd[q+') AND (((v0.c1)GLOB(v0.c2)))), CAST(((v0.c2) NOT BETWEEN (v0.c0) AND (-1.84481855E9)) AS REAL)  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END) ISNULL)) ORDER BY vt1.c1 ASC;
SELECT ALL * FROM v0, vt1 WHERE (((((CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END) ISNULL))AND(rtreenode(vt1.c0 COLLATE NOCASE, vt1.c1 COLLATE NOCASE)))) ORDER BY vt1.c1 ASC LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE (((CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END) ISNULL)) ORDER BY vt1.c1 ASC;
SELECT ALL * FROM v0, vt1 WHERE (((((CASE WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END) ISNULL))AND(rtreenode(vt1.c0 COLLATE NOCASE, vt1.c1 COLLATE NOCASE)))) ORDER BY vt1.c1 ASC LIMIT 0x0;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((((((((vt1.c1)) BETWEEN ((NULL)) AND ((x'ac'))))OR(((0.011496114106102517)GLOB(vt1.c1)))))OR(0.5055793161702974)))OR(CAST(vt1.c1 AS NUMERIC))));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((((((((vt1.c1)) BETWEEN ((NULL)) AND ((x'ac'))))OR(((0.011496114106102517)GLOB(vt1.c1)))))OR(0.5055793161702974)))OR(CAST(vt1.c1 AS NUMERIC)))) ORDER BY ((((vt1.c0)>>(vt1.c0)))|(((x'ff')<=(vt1.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (~ (vt1.c0 COLLATE RTRIM)), ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) COLLATE NOCASE;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND(CASE WHEN ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND('n)46_Qw3')))OR(vt1.c0)) WHEN vt1.c0 THEN CASE WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END ELSE ((((vt1.c1)AND(x'b56c7e')))AND(vt1.c0)) END))) ORDER BY (~ (vt1.c0 COLLATE RTRIM)), ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) COLLATE NOCASE LIMIT 2;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (~ (vt1.c0 COLLATE RTRIM)), ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) COLLATE NOCASE;
SELECT DISTINCT * FROM vt1 WHERE (((vt1.c0)AND(CASE WHEN ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND('n)46_Qw3')))OR(vt1.c0)) WHEN vt1.c0 THEN CASE WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END ELSE ((((vt1.c1)AND(x'b56c7e')))AND(vt1.c0)) END))) ORDER BY (~ (vt1.c0 COLLATE RTRIM)), ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) COLLATE NOCASE LIMIT 2;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON INSTR(CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END, ((vt1.c1)IS(v0.c2))) WHERE ((~ (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END))) ORDER BY TRIM(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 END) DESC;
SELECT DISTINCT * FROM v0 CROSS JOIN vt1 ON INSTR(CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END, ((vt1.c1)IS(v0.c2))) WHERE ((~ (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END))) ORDER BY TRIM(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 END) DESC;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON INSTR(CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END, ((vt1.c1)IS(v0.c2))) WHERE ((~ (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END))) ORDER BY TRIM(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 END) DESC;
SELECT DISTINCT * FROM v0 CROSS JOIN vt1 ON INSTR(CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END, ((vt1.c1)IS(v0.c2))) WHERE ((~ (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 END))) ORDER BY TRIM(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN vt1.c0 END) DESC;
SELECT * FROM vt1 CROSS JOIN v0 ON ((((vt1.c1)<(x''))) ISNULL) WHERE ((((NOT (v0.c1)))*((((v0.c0))<=((v0.c0)))))) ORDER BY CAST(v0.c1 AS TEXT) COLLATE NOCASE DESC;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((((vt1.c1)<(x''))) ISNULL) WHERE ((((((NOT (v0.c1)))*((((v0.c0))<=((v0.c0))))))AND(((0Xffffffff974da1fa COLLATE NOCASE)OR(((((vt1.c1)OR(v0.c2)))AND(vt1.c1))))))) ORDER BY (((v0.c1)) NOT BETWEEN ((CASE vt1.c1  WHEN v0.c0 THEN v0.c1 WHEN vt1.c0 THEN 0.812339971048488 WHEN v0.c2 THEN vt1.c0 ELSE vt1.c0 END)) AND ((CAST(0.1669976223056059 AS BLOB)))) ASC INTERSECT SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((((vt1.c1)<(x''))) ISNULL) WHERE (v0.c1) ORDER BY (((v0.c1)) NOT BETWEEN ((CASE vt1.c1  WHEN v0.c0 THEN v0.c1 WHEN vt1.c0 THEN 0.812339971048488 WHEN v0.c2 THEN vt1.c0 ELSE vt1.c0 END)) AND ((CAST(0.1669976223056059 AS BLOB)))) ASC;
SELECT * FROM vt1 CROSS JOIN v0 ON ((((vt1.c1)<(x''))) ISNULL) WHERE ((((NOT (v0.c1)))*((((v0.c0))<=((v0.c0)))))) ORDER BY CAST(v0.c1 AS TEXT) COLLATE NOCASE DESC;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((((vt1.c1)<(x''))) ISNULL) WHERE ((((((NOT (v0.c1)))*((((v0.c0))<=((v0.c0))))))AND(((0Xffffffff974da1fa COLLATE NOCASE)OR(((((vt1.c1)OR(v0.c2)))AND(vt1.c1))))))) ORDER BY (((v0.c1)) NOT BETWEEN ((CASE vt1.c1  WHEN v0.c0 THEN v0.c1 WHEN vt1.c0 THEN 0.812339971048488 WHEN v0.c2 THEN vt1.c0 ELSE vt1.c0 END)) AND ((CAST(0.1669976223056059 AS BLOB)))) ASC INTERSECT SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((((vt1.c1)<(x''))) ISNULL) WHERE (v0.c1) ORDER BY (((v0.c1)) NOT BETWEEN ((CASE vt1.c1  WHEN v0.c0 THEN v0.c1 WHEN vt1.c0 THEN 0.812339971048488 WHEN v0.c2 THEN vt1.c0 ELSE vt1.c0 END)) AND ((CAST(0.1669976223056059 AS BLOB)))) ASC;
SELECT ALL MIN(v0.c0) FROM vt1, v0 WHERE ((((v0.c2 COLLATE NOCASE, v0.c2, CASE vt1.c1  WHEN v0.c0 THEN 0.10113819686811465 WHEN 'qk' THEN x'' WHEN v0.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 ELSE vt1.c0 END))<=((CASE WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END, v0.c0 COLLATE NOCASE, ((vt1.c0)IS NOT(vt1.c1))))));
SELECT DISTINCT MIN(v0.c0) FROM vt1, v0 WHERE ((((((v0.c2 COLLATE NOCASE, v0.c2, CASE vt1.c1  WHEN v0.c0 THEN 0.10113819686811465 WHEN 'qk' THEN x'' WHEN v0.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 ELSE vt1.c0 END))<=((CASE WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END, v0.c0 COLLATE NOCASE, ((vt1.c0)IS NOT(vt1.c1))))))AND((((v0.c0)) NOT BETWEEN ((CASE WHEN 0.021123608619768697 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END)) AND (((+ (v0.c2)))))))) ORDER BY (((((((((vt1.c0)) BETWEEN ((v0.c1)) AND ((vt1.c1))))AND((((v0.c2)) BETWEEN ((vt1.c0)) AND ((v0.c2))))))AND(vt1.c0 COLLATE NOCASE)))OR(x'')) DESC  NULLS LAST, ((0x1e69d8d4)>(((v0.c2)%(v0.c0)))) ASC  NULLS LAST LIMIT 1;
SELECT ALL * FROM v0 WHERE (((v0.c1 COLLATE RTRIM) IS TRUE)) ORDER BY (((((v0.c1)OR(v0.c1)))AND(v0.c1)) IN (QUOTE(v0.c2)))  NULLS LAST, ABS((v0.c0 IN ('Z', v0.c2)));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c1 COLLATE RTRIM) IS TRUE))AND(((((NULL)<<(v0.c0))) BETWEEN (v0.c2 COLLATE NOCASE) AND (((v0.c1) NOT NULL)))))) ORDER BY 0.16407949593681015  NULLS FIRST, CAST(v0.c1 AS TEXT) COLLATE RTRIM DESC INTERSECT SELECT DISTINCT * FROM v0 WHERE ((NOT (CAST(v0.c0 AS BLOB)))) ORDER BY 0.16407949593681015  NULLS FIRST, CAST(v0.c1 AS TEXT) COLLATE RTRIM DESC;
SELECT ALL * FROM v0 WHERE (((v0.c1 COLLATE RTRIM) IS TRUE)) ORDER BY (((((v0.c1)OR(v0.c1)))AND(v0.c1)) IN (QUOTE(v0.c2)))  NULLS LAST, ABS((v0.c0 IN ('Z', v0.c2)));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c1 COLLATE RTRIM) IS TRUE))AND(((((NULL)<<(v0.c0))) BETWEEN (v0.c2 COLLATE NOCASE) AND (((v0.c1) NOT NULL)))))) ORDER BY 0.16407949593681015  NULLS FIRST, CAST(v0.c1 AS TEXT) COLLATE RTRIM DESC INTERSECT SELECT DISTINCT * FROM v0 WHERE ((NOT (CAST(v0.c0 AS BLOB)))) ORDER BY 0.16407949593681015  NULLS FIRST, CAST(v0.c1 AS TEXT) COLLATE RTRIM DESC;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (vt1.c1);
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((vt1.c1)AND(CASE ((vt1.c0)IS NOT(vt1.c0))  WHEN ((vt1.c1) BETWEEN (vt1.c0) AND (NULL)) THEN CASE WHEN vt1.c0 THEN vt1.c0 END WHEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN CAST(vt1.c1 AS BLOB) WHEN LIKELIHOOD(DISTINCT vt1.c1, vt1.c1) THEN (vt1.c1 IN (vt1.c1)) WHEN (((vt1.c0, vt1.c0, vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c1, vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c1, vt1.c1))) THEN ((vt1.c1)/(vt1.c1)) END))) ORDER BY x'ebc99c' ASC  NULLS FIRST, CASE TRIM(DISTINCT vt1.c1)  WHEN ((((vt1.c1)AND('a쾂rh,
d,i')))OR(vt1.c1)) THEN JULIANDAY(vt1.c0, vt1.c1, vt1.c0, vt1.c1, vt1.c0) END DESC  NULLS FIRST LIMIT 0x2;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE ((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)) IN (((vt1.c1)||(vt1.c1)))));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE ((((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)) IN (((vt1.c1)||(vt1.c1)))))AND(vt1.c0))) ORDER BY ((CAST(vt1.c0 AS TEXT))<=(CAST(vt1.c1 AS BLOB))) DESC INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE ((- (CAST(vt1.c0 AS TEXT)))) ORDER BY ((CAST(vt1.c0 AS TEXT))<=(CAST(vt1.c1 AS BLOB))) DESC;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON (+ (CASE WHEN v0.c2 THEN vt1.c1 END)) WHERE (((vt1.c0) ISNULL) COLLATE NOCASE) ORDER BY UNLIKELY(TIME(vt1.c1, vt1.c0, v0.c2, vt1.c0)), ((highlight(v0.c1, v0.c1, v0.c1, vt1.c1)) NOT BETWEEN (((NULL) NOT BETWEEN (v0.c1) AND (x''))) AND (((v0.c0)|(v0.c0)))) ASC  NULLS FIRST, (NOT (TYPEOF(vt1.c0))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (+ (CASE WHEN v0.c2 THEN vt1.c1 END)) WHERE (((vt1.c0) ISNULL) COLLATE NOCASE) ORDER BY v0.c1  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (+ (CASE WHEN v0.c2 THEN vt1.c1 END)) WHERE (CASE WHEN (+ (v0.c1)) THEN (((('662566353')OR(vt1.c0)))AND(v0.c1)) WHEN SQLITE_SOURCE_ID() THEN TRIM(DISTINCT v0.c0) END) ORDER BY v0.c1  NULLS FIRST;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON (+ (CASE WHEN v0.c2 THEN vt1.c1 END)) WHERE (((vt1.c0) ISNULL) COLLATE NOCASE) ORDER BY UNLIKELY(TIME(vt1.c1, vt1.c0, v0.c2, vt1.c0)), ((highlight(v0.c1, v0.c1, v0.c1, vt1.c1)) NOT BETWEEN (((NULL) NOT BETWEEN (v0.c1) AND (x''))) AND (((v0.c0)|(v0.c0)))) ASC  NULLS FIRST, (NOT (TYPEOF(vt1.c0))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (+ (CASE WHEN v0.c2 THEN vt1.c1 END)) WHERE (((vt1.c0) ISNULL) COLLATE NOCASE) ORDER BY v0.c1  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON (+ (CASE WHEN v0.c2 THEN vt1.c1 END)) WHERE (CASE WHEN (+ (v0.c1)) THEN (((('662566353')OR(vt1.c0)))AND(v0.c1)) WHEN SQLITE_SOURCE_ID() THEN TRIM(DISTINCT v0.c0) END) ORDER BY v0.c1  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE (v0.c2) ORDER BY (((NOT (v0.c2)))<<(((x'')<>(v0.c1)))) DESC;
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c2)AND(CASE WHEN CAST(v0.c0 AS REAL) THEN SQLITE_VERSION() WHEN NULLIF(v0.c2, v0.c2) THEN 0.18746569689175374 WHEN (v0.c1 IN (v0.c2, v0.c1, v0.c0)) THEN v0.c2 END))) ORDER BY (((NOT (v0.c2)))<<(((x'')<>(v0.c1)))) DESC INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE ((((((((+ (v0.c2)))AND((- (v0.c0)))))OR((NULL IN (v0.c2)))))AND(((v0.c2)<>(v0.c0))))) ORDER BY (((NOT (v0.c2)))<<(((x'')<>(v0.c1)))) DESC;
SELECT * FROM vt1, v0 WHERE (CAST(vt1.c1 AS BLOB));
SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(vt1.c1 AS BLOB)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (LENGTH(((v0.c2) IS FALSE))) LIMIT 0x2;
SELECT * FROM vt1, v0 WHERE (CAST(vt1.c1 AS BLOB));
SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(vt1.c1 AS BLOB)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (LENGTH(((v0.c2) IS FALSE))) LIMIT 0x2;
SELECT * FROM v0 WHERE (CASE ((v0.c2)&(x''))  WHEN ((v0.c2) BETWEEN (v0.c0) AND (v0.c0)) THEN ((v0.c0)>=(v0.c0)) ELSE ((9.31266565E8)IS NOT(v0.c0)) END);
SELECT DISTINCT * FROM v0 WHERE (CASE ((v0.c2)&(x''))  WHEN ((v0.c2) BETWEEN (v0.c0) AND (v0.c0)) THEN ((v0.c0)>=(v0.c0)) ELSE ((9.31266565E8)IS NOT(v0.c0)) END) ORDER BY (+ (CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END)) DESC, (((((v0.c2)*(v0.c1)), ((v0.c1) BETWEEN (v0.c2) AND (v0.c2))))<=((((v0.c0) BETWEEN ('-1809434267') AND (v0.c1)), v0.c2))) DESC  NULLS FIRST LIMIT 1;
SELECT * FROM v0 WHERE (CASE ((v0.c2)&(x''))  WHEN ((v0.c2) BETWEEN (v0.c0) AND (v0.c0)) THEN ((v0.c0)>=(v0.c0)) ELSE ((9.31266565E8)IS NOT(v0.c0)) END);
SELECT DISTINCT * FROM v0 WHERE (CASE ((v0.c2)&(x''))  WHEN ((v0.c2) BETWEEN (v0.c0) AND (v0.c0)) THEN ((v0.c0)>=(v0.c0)) ELSE ((9.31266565E8)IS NOT(v0.c0)) END) ORDER BY (+ (CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END)) DESC, (((((v0.c2)*(v0.c1)), ((v0.c1) BETWEEN (v0.c2) AND (v0.c2))))<=((((v0.c0) BETWEEN ('-1809434267') AND (v0.c1)), v0.c2))) DESC  NULLS FIRST LIMIT 1;
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON vt1.c1 WHERE (((CAST(v0.c2 AS REAL))*(((0x5f130329)GLOB(v0.c2))))) ORDER BY NULLIF(CAST(v0.c1 AS REAL), CAST(v0.c1 AS REAL)), CAST(vt1.c1 AS BLOB) ASC  NULLS LAST, LIKELIHOOD(((v0.c1) IS FALSE), ABS(vt1.c0)) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON vt1.c1 WHERE (((((CAST(v0.c2 AS REAL))*(((0X5f130329)GLOB(v0.c2)))))AND(((((v0.c2)>=(vt1.c1)))OR(1.36718424E9))))) ORDER BY NULLIF(CAST(v0.c1 AS REAL), CAST(v0.c1 AS REAL)), CAST(vt1.c1 AS BLOB) ASC  NULLS LAST, LIKELIHOOD(((v0.c1) IS FALSE), ABS(vt1.c0)) DESC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt1 WHERE (((((vt1.c1)||(vt1.c1)))IS NOT((NOT (vt1.c0))))) ORDER BY IFNULL(DISTINCT UNLIKELY(DISTINCT vt1.c1), ((vt1.c0)*(vt1.c0))) DESC, (((x'', (('bxkM') NOT BETWEEN (vt1.c0) AND (vt1.c0))))<=(((vt1.c1 IN (vt1.c1)), CAST(vt1.c1 AS BLOB))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c1)||(vt1.c1)))IS NOT((NOT (vt1.c0)))))AND(((vt1.c1 COLLATE BINARY) BETWEEN ((vt1.c1 IN ())) AND (vt1.c1 COLLATE NOCASE))))) ORDER BY IFNULL(DISTINCT UNLIKELY(DISTINCT vt1.c1), ((vt1.c0)*(vt1.c0))) DESC, (((x'', (('bxkM') NOT BETWEEN (vt1.c0) AND (vt1.c0))))<=(((vt1.c1 IN (vt1.c1)), CAST(vt1.c1 AS BLOB)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c1 IN (vt1.c1, vt1.c0, vt1.c0)))<(vt1.c0))) ORDER BY IFNULL(DISTINCT UNLIKELY(DISTINCT vt1.c1), ((vt1.c0)*(vt1.c0))) DESC, (((x'', (('bxkM') NOT BETWEEN (vt1.c0) AND (vt1.c0))))<=(((vt1.c1 IN (vt1.c1)), CAST(vt1.c1 AS BLOB))));
SELECT * FROM vt1 WHERE (((((vt1.c1)||(vt1.c1)))IS NOT((NOT (vt1.c0))))) ORDER BY IFNULL(DISTINCT UNLIKELY(DISTINCT vt1.c1), ((vt1.c0)*(vt1.c0))) DESC, (((x'', (('bxkM') NOT BETWEEN (vt1.c0) AND (vt1.c0))))<=(((vt1.c1 IN (vt1.c1)), CAST(vt1.c1 AS BLOB))));
SELECT DISTINCT * FROM vt1 WHERE (((((((vt1.c1)||(vt1.c1)))IS NOT((NOT (vt1.c0)))))AND(((vt1.c1 COLLATE BINARY) BETWEEN ((vt1.c1 IN ())) AND (vt1.c1 COLLATE NOCASE))))) ORDER BY IFNULL(DISTINCT UNLIKELY(DISTINCT vt1.c1), ((vt1.c0)*(vt1.c0))) DESC, (((x'', (('bxkM') NOT BETWEEN (vt1.c0) AND (vt1.c0))))<=(((vt1.c1 IN (vt1.c1)), CAST(vt1.c1 AS BLOB)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c1 IN (vt1.c1, vt1.c0, vt1.c0)))<(vt1.c0))) ORDER BY IFNULL(DISTINCT UNLIKELY(DISTINCT vt1.c1), ((vt1.c0)*(vt1.c0))) DESC, (((x'', (('bxkM') NOT BETWEEN (vt1.c0) AND (vt1.c0))))<=(((vt1.c1 IN (vt1.c1)), CAST(vt1.c1 AS BLOB))));
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((+ ((0.23920029168477985 IN (v0.c2)))));
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((+ ((0.23920029168477985 IN (v0.c2))))) ORDER BY json_type(((((((v0.c2)AND(v0.c0)))AND(v0.c2)))OR(v0.c1))) DESC  NULLS FIRST, CAST((v0.c2 IN ()) AS NUMERIC) ASC  NULLS FIRST, HEX(JULIANDAY(x'0f', v0.c0, v0.c1, v0.c0, v0.c1)) ASC LIMIT 1;
SELECT MAX(v0.c1) FROM v0 WHERE ((((~ (v0.c0))) NOT NULL)) ORDER BY (((((v0.c0)>=(v0.c1))))==((CAST(v0.c0 AS INTEGER))))  NULLS FIRST, json_type(v0.c0) COLLATE RTRIM DESC;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((((((~ (v0.c0))) NOT NULL))AND(((('32506213' IN ('')))IS NOT(TRIM(v0.c2, v0.c0)))))) ORDER BY (((((v0.c0)>=(v0.c1))))==((CAST(v0.c0 AS INTEGER))))  NULLS FIRST, json_type(v0.c0) COLLATE RTRIM DESC LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))))!=((((vt1.c1)GLOB(vt1.c1))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))))<>((((vt1.c1)GLOB(vt1.c1)))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1))) NOTNULL), (((~ (vt1.c0))) IS FALSE)  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))))!=((((vt1.c1)GLOB(vt1.c1))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))))<>((((vt1.c1)GLOB(vt1.c1)))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1))) NOTNULL), (((~ (vt1.c0))) IS FALSE)  NULLS FIRST LIMIT 0X2;
SELECT * FROM vt1, v0 WHERE (v0.c0) ORDER BY x'8a38' DESC, LIKELY(CASE vt1.c0  WHEN vt1.c1 THEN v0.c2 ELSE '343401058' END);
SELECT DISTINCT * FROM vt1, v0 WHERE (v0.c0) ORDER BY x'8a38' DESC, LIKELY(CASE vt1.c0  WHEN vt1.c1 THEN v0.c2 ELSE '343401058' END) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (LIKELIHOOD(DISTINCT 1686774676, vt1.c1)) ORDER BY x'8a38' DESC, LIKELY(CASE vt1.c0  WHEN vt1.c1 THEN v0.c2 ELSE '343401058' END) LIMIT 0;
SELECT * FROM vt1, v0 WHERE (v0.c0) ORDER BY x'8a38' DESC, LIKELY(CASE vt1.c0  WHEN vt1.c1 THEN v0.c2 ELSE '343401058' END);
SELECT DISTINCT * FROM vt1, v0 WHERE (v0.c0) ORDER BY x'8a38' DESC, LIKELY(CASE vt1.c0  WHEN vt1.c1 THEN v0.c2 ELSE '343401058' END) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (LIKELIHOOD(DISTINCT 1686774676, vt1.c1)) ORDER BY x'8a38' DESC, LIKELY(CASE vt1.c0  WHEN vt1.c1 THEN v0.c2 ELSE '343401058' END) LIMIT 0;
SELECT COUNT(*) FROM v0, vt1 WHERE (((v0.c2 IN ()) IN ()));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((v0.c2 IN ()) IN ()));
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)LIKE(((vt1.c0) NOT NULL))));
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)LIKE(((vt1.c0) NOT NULL)))) ORDER BY (+ (CAST(vt1.c1 AS TEXT))) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)LIKE(((vt1.c0) NOT NULL))));
SELECT ALL * FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)LIKE(((vt1.c0) NOT NULL)))) ORDER BY (+ (CAST(vt1.c1 AS TEXT))) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (('1121701740' COLLATE NOCASE IN ())) ORDER BY ((-1473306508) IS FALSE) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt1 WHERE (('1121701740' COLLATE NOCASE IN ())) ORDER BY ((0xffffffffa82f2074) IS FALSE) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (MIN((((vt1.c1, v0.c0, vt1.c1))=((x'e9', NULL, vt1.c0))), ((vt1.c1) BETWEEN (v0.c1) AND (vt1.c0)))) ORDER BY ((0xffffffffa82f2074) IS FALSE) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (('1121701740' COLLATE NOCASE IN ())) ORDER BY ((-1473306508) IS FALSE) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt1 WHERE (('1121701740' COLLATE NOCASE IN ())) ORDER BY ((0xffffffffa82f2074) IS FALSE) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (MIN((((vt1.c1, v0.c0, vt1.c1))=((x'e9', NULL, vt1.c0))), ((vt1.c1) BETWEEN (v0.c1) AND (vt1.c0)))) ORDER BY ((0xffffffffa82f2074) IS FALSE) ASC  NULLS FIRST;
SELECT MAX(v0.c2) FROM v0, vt1 WHERE ((CASE WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 END IN (CAST(0.8882966073433839 AS NUMERIC)))) ORDER BY (+ (((v0.c1)>=(vt1.c1)))), (((COALESCE(DISTINCT v0.c2, '0.8194570590210998'), (+ (vt1.c1)), TYPEOF(DISTINCT vt1.c0), CAST(vt1.c1 AS TEXT)))!=((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (((v0.c2, vt1.c0, vt1.c0, v0.c2, vt1.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c0, v0.c0, v0.c2)) AND ((v0.c2, v0.c2, v0.c2, v0.c0, v0.c0, vt1.c1))), (((v0.c2, vt1.c1, NULL)) NOT BETWEEN ((v0.c0, vt1.c0, v0.c1)) AND ((v0.c0, v0.c1, vt1.c1))), ((v0.c0)AND(vt1.c0))))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE ((((CASE WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 END IN (CAST(0.8882966073433839 AS NUMERIC))))AND(LIKE(CAST(v0.c2 AS NUMERIC), vt1.c1 COLLATE RTRIM)))) ORDER BY (+ (((v0.c1)>=(vt1.c1)))), (((COALESCE(DISTINCT v0.c2, '0.8194570590210998'), (+ (vt1.c1)), TYPEOF(DISTINCT vt1.c0), CAST(vt1.c1 AS TEXT)))!=((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (((v0.c2, vt1.c0, vt1.c0, v0.c2, vt1.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c0, v0.c0, v0.c2)) AND ((v0.c2, v0.c2, v0.c2, v0.c0, v0.c0, vt1.c1))), (((v0.c2, vt1.c1, NULL)) NOT BETWEEN ((v0.c0, vt1.c0, v0.c1)) AND ((v0.c0, v0.c1, vt1.c1))), ((v0.c0)AND(vt1.c0))))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt1 WHERE (((((((v0.c0))<((vt1.c0))), vt1.c1, ((vt1.c1) NOT NULL), ((v0.c2) BETWEEN (v0.c2) AND (vt1.c1)), vt1.c1, (((vt1.c1, 0.5510465818737179)) NOT BETWEEN ((vt1.c1, v0.c2)) AND ((v0.c1, vt1.c1)))))<(((((v0.c1)) BETWEEN ((NULL)) AND ((vt1.c0))), ((v0.c1) NOT NULL), (- (v0.c2)), ((vt1.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), CAST(v0.c2 AS INTEGER), ((vt1.c0)/(vt1.c0)))))) ORDER BY (+ (((v0.c1)>=(vt1.c1)))), (((COALESCE(DISTINCT v0.c2, '0.8194570590210998'), (+ (vt1.c1)), TYPEOF(DISTINCT vt1.c0), CAST(vt1.c1 AS TEXT)))<>((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (((v0.c2, vt1.c0, vt1.c0, v0.c2, vt1.c1, vt1.c1)) BETWEEN ((v0.c1, v0.c2, v0.c2, v0.c0, v0.c0, v0.c2)) AND ((v0.c2, v0.c2, v0.c2, v0.c0, v0.c0, vt1.c1))), (((v0.c2, vt1.c1, NULL)) NOT BETWEEN ((v0.c0, vt1.c0, v0.c1)) AND ((v0.c0, v0.c1, vt1.c1))), ((v0.c0)AND(vt1.c0))))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))OR(v0.c2)))AND(vt1.c0))) NOT BETWEEN (((v0.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0))) AND (NULL))) ORDER BY (((((vt1.c0, v0.c0))<=((v0.c2, '-449703252')))) NOT BETWEEN (((((((((v0.c1)OR(vt1.c1)))AND(v0.c1)))AND(vt1.c0)))AND(v0.c0))) AND ((((v0.c0, vt1.c0))<((v0.c0, v0.c0)))));
SELECT COUNT(*) FROM v0, vt1 WHERE (((((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))OR(v0.c2)))AND(vt1.c0))) NOT BETWEEN (((v0.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0))) AND (NULL)))AND((+ (v0.c1))))) ORDER BY (((((vt1.c0, v0.c0))<=((v0.c2, '-449703252')))) NOT BETWEEN (((((((((v0.c1)OR(vt1.c1)))AND(v0.c1)))AND(vt1.c0)))AND(v0.c0))) AND ((((v0.c0, vt1.c0))<((v0.c0, v0.c0))))) LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))/(CAST(NULL AS NUMERIC)))) ORDER BY ((vt1.c0 COLLATE RTRIM)>>(((vt1.c1)*(vt1.c1))))  NULLS FIRST, NULLIF(((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)), ((NULL) IS FALSE)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))/(CAST(NULL AS NUMERIC))))AND(((((vt1.c1) IS FALSE)) BETWEEN (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END) AND (vt1.c1 COLLATE BINARY))))) ORDER BY UPPER(vt1.c1)  NULLS LAST, ((((vt1.c1 IN (vt1.c0)), vt1.c0))<>((((NULL)LIKE(vt1.c1)), ((((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0))))) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)))) AND ((CAST(vt1.c0 AS REAL))))) ORDER BY UPPER(vt1.c1)  NULLS LAST, ((((vt1.c1 IN (vt1.c0)), vt1.c0))<>((((NULL)LIKE(vt1.c1)), ((((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0))))) ASC;
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))/(CAST(NULL AS NUMERIC)))) ORDER BY ((vt1.c0 COLLATE RTRIM)>>(((vt1.c1)*(vt1.c1))))  NULLS FIRST, NULLIF(((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)), ((NULL) IS FALSE)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE (((((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))/(CAST(NULL AS NUMERIC))))AND(((((vt1.c1) IS FALSE)) BETWEEN (CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END) AND (vt1.c1 COLLATE BINARY))))) ORDER BY UPPER(vt1.c1)  NULLS LAST, ((((vt1.c1 IN (vt1.c0)), vt1.c0))<>((((NULL)LIKE(vt1.c1)), ((((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0))))) ASC INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0)) BETWEEN ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)))) AND ((CAST(vt1.c0 AS REAL))))) ORDER BY UPPER(vt1.c1)  NULLS LAST, ((((vt1.c1 IN (vt1.c0)), vt1.c0))<>((((NULL)LIKE(vt1.c1)), ((((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))AND(vt1.c0))))) ASC;
SELECT MAX(v0.c0) FROM v0, vt1 WHERE (load_extension((v0.c1 IN (v0.c2))));
SELECT MAX(v0.c0) FROM v0, vt1 WHERE (load_extension((v0.c1 IN (v0.c2)))) ORDER BY ((((((((((v0.c2) BETWEEN (vt1.c1) AND (vt1.c0)))AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 WHEN 0.030360491045196336 THEN v0.c0 END)))AND(CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN v0.c1 THEN v0.c2 WHEN 0Xffffffffb5d0e662 THEN v0.c1 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)))OR(('1029704324' IN (0.20516486425040503)))))AND((~ (vt1.c0)))), NULL  NULLS FIRST LIMIT 0X0 INTERSECT SELECT MAX(v0.c0) FROM v0, vt1 WHERE (CAST(((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c2)) AS NUMERIC)) ORDER BY ((((((((((v0.c2) BETWEEN (vt1.c1) AND (vt1.c0)))AND(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 WHEN 0.030360491045196336 THEN v0.c0 END)))AND(CASE v0.c0  WHEN v0.c1 THEN vt1.c0 WHEN v0.c1 THEN v0.c2 WHEN -1244600734 THEN v0.c1 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)))OR(('1029704324' IN (0.20516486425040503)))))AND((~ (vt1.c0)))), NULL  NULLS FIRST LIMIT 0;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (CAST(v0.c0 AS REAL) COLLATE BINARY);
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (CAST(v0.c0 AS REAL) COLLATE BINARY) LIMIT 3;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((((((((v0.c0)AND(LIKELY(v0.c2))))OR((((v0.c1))==((vt1.c0))))))AND(COALESCE(NULL, vt1.c1, vt1.c0, 0Xffffffffa192e022))))AND(CAST(v0.c1 AS INTEGER))));
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((((((((((v0.c0)AND(LIKELY(v0.c2))))OR((((v0.c1))=((vt1.c0))))))AND(COALESCE(NULL, vt1.c1, vt1.c0, 0Xffffffffa192e022))))AND(CAST(v0.c1 AS INTEGER))))AND(CAST(((v0.c1)IS NOT(v0.c0)) AS BLOB))));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((~ ((NOT (v0.c0)))));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((((~ ((NOT (v0.c0)))))AND(v0.c1))) ORDER BY TYPEOF(((x'521924')==(v0.c1))) ASC  NULLS FIRST, TRIM(v0.c2 COLLATE BINARY, (~ (vt1.c0)))  NULLS FIRST INTERSECT SELECT COUNT(*) FROM v0, vt1 WHERE (((TYPEOF(v0.c0))-(((((v0.c2)OR(v0.c0)))OR(vt1.c0))))) ORDER BY TYPEOF(((x'521924')==(v0.c1))) ASC  NULLS FIRST, TRIM(v0.c2 COLLATE BINARY, (~ (vt1.c0)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (v0.c2);
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((v0.c2)AND(CASE WHEN vt1.c1 THEN ((vt1.c1) IS FALSE) WHEN vt1.c0 THEN (+ ('e')) END))) ORDER BY ((((((((v0.c0)IS NOT(vt1.c0)))OR(((-1940972340)>(v0.c0)))))AND(((v0.c0) NOT BETWEEN (v0.c2) AND (vt1.c1)))))AND(CASE WHEN 0.7838110581482793 THEN v0.c2 END)) DESC, CAST(TOTAL_CHANGES() AS BLOB) ASC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT COUNT(*) FROM vt1, v0 WHERE (((x'')==(((v0.c2)+('-380708997'))))) ORDER BY ((((((((v0.c0)IS NOT(vt1.c0)))OR(((-1940972340)>(v0.c0)))))AND(((v0.c0) NOT BETWEEN (v0.c2) AND (vt1.c1)))))AND(CASE WHEN 0.7838110581482793 THEN v0.c2 END)) DESC, CAST(TOTAL_CHANGES() AS BLOB) ASC  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM v0, vt1 WHERE ((((vt1.c1)) BETWEEN (((((v0.c0, v0.c2))=((vt1.c0, v0.c0))))) AND ((CASE v0.c1  WHEN v0.c0 THEN vt1.c0 END))));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((((((vt1.c1)) BETWEEN (((((v0.c0, v0.c2))==((vt1.c0, v0.c0))))) AND ((CASE v0.c1  WHEN v0.c0 THEN vt1.c0 END))))AND(QUOTE(v0.c0) COLLATE BINARY)));
SELECT ALL MAX(v0.c1) FROM vt1 NATURAL JOIN v0 WHERE (((CAST(vt1.c1 AS REAL))LIKE((v0.c1 IN ())))) ORDER BY ((((((((vt1.c0)AND(v0.c1)))AND(vt1.c0)))AND(vt1.c0))) BETWEEN ((vt1.c1 IN (v0.c0))) AND ((((v0.c2))=((vt1.c1))))) DESC  NULLS FIRST, ((v0.c1)*((((vt1.c1, vt1.c1))<=((vt1.c0, vt1.c1)))));
SELECT DISTINCT MAX(v0.c1) FROM vt1 NATURAL JOIN v0 WHERE (((((CAST(vt1.c1 AS REAL))LIKE((v0.c1 IN ()))))AND(CAST((((vt1.c0))=((vt1.c1))) AS REAL)))) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))) NOT NULL), ((x'7849')IS NOT(json_extract(v0.c2, vt1.c0, vt1.c1))), ((((- (''))))<>((((vt1.c0)IS(v0.c2))))) DESC INTERSECT SELECT DISTINCT MAX(v0.c1) FROM vt1 NATURAL JOIN v0 WHERE (CAST(((v0.c0)||(vt1.c1)) AS NUMERIC)) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))) NOT NULL), ((x'7849')IS NOT(json_extract(v0.c2, vt1.c0, vt1.c1))), ((((- (''))))!=((((vt1.c0)IS(v0.c2))))) DESC;
SELECT * FROM vt1, v0 WHERE (((+ (v0.c1)) IN (((v0.c2) ISNULL)))) ORDER BY (NOT (((v0.c0)AND(vt1.c1)))) DESC, (((((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c2)), (v0.c0 IN ())))<((((v0.c0)+(vt1.c0)), vt1.c0 COLLATE RTRIM)))  NULLS FIRST, (((NULL, v0.c1, v0.c1)) NOT BETWEEN ((((v0.c2)IS NOT(vt1.c1)), (((NULL, v0.c1))<=((vt1.c0, vt1.c0))), UNLIKELY(vt1.c1))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (vt1.c0)), ((v0.c1) IS FALSE), ((((((((((((v0.c2)OR(v0.c0)))AND(0.9065111082146229)))AND(vt1.c1)))AND(vt1.c0)))AND(v0.c1)))AND(v0.c0))))) ASC;
SELECT * FROM vt1, v0 WHERE (((((+ (v0.c1)) IN (((v0.c2) ISNULL))))AND(CASE WHEN v0.c2 THEN 'D' WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN vt1.c1 ELSE '32506213' END COLLATE NOCASE))) ORDER BY (NOT (((v0.c0)AND(vt1.c1)))) DESC, (((((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c2)), (v0.c0 IN ())))<((((v0.c0)+(vt1.c0)), vt1.c0 COLLATE RTRIM)))  NULLS FIRST, (((NULL, v0.c1, v0.c1)) NOT BETWEEN ((((v0.c2)IS NOT(vt1.c1)), (((NULL, v0.c1))<=((vt1.c0, vt1.c0))), UNLIKELY(vt1.c1))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (vt1.c0)), ((v0.c1) IS FALSE), ((((((((((((v0.c2)OR(v0.c0)))AND(0.9065111082146229)))AND(vt1.c1)))AND(vt1.c0)))AND(v0.c1)))AND(v0.c0))))) ASC LIMIT 0x0 INTERSECT SELECT * FROM vt1, v0 WHERE (((((((v0.c2)>>(v0.c1)))OR((v0.c2 IN ()))))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN 0.49077368609299343 ELSE v0.c1 END))) ORDER BY (NOT (((v0.c0)AND(vt1.c1)))) DESC, (((((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c2)), (v0.c0 IN ())))<((((v0.c0)+(vt1.c0)), vt1.c0 COLLATE RTRIM)))  NULLS FIRST, (((NULL, v0.c1, v0.c1)) NOT BETWEEN ((((v0.c2)IS NOT(vt1.c1)), (((NULL, v0.c1))<=((vt1.c0, vt1.c0))), UNLIKELY(vt1.c1))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (vt1.c0)), ((v0.c1) IS FALSE), ((((((((((((v0.c2)OR(v0.c0)))AND(0.9065111082146229)))AND(vt1.c1)))AND(vt1.c0)))AND(v0.c1)))AND(v0.c0))))) ASC LIMIT 0;
SELECT * FROM vt1, v0 WHERE (((+ (v0.c1)) IN (((v0.c2) ISNULL)))) ORDER BY (NOT (((v0.c0)AND(vt1.c1)))) DESC, (((((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c2)), (v0.c0 IN ())))<((((v0.c0)+(vt1.c0)), vt1.c0 COLLATE RTRIM)))  NULLS FIRST, (((NULL, v0.c1, v0.c1)) NOT BETWEEN ((((v0.c2)IS NOT(vt1.c1)), (((NULL, v0.c1))<=((vt1.c0, vt1.c0))), UNLIKELY(vt1.c1))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (vt1.c0)), ((v0.c1) IS FALSE), ((((((((((((v0.c2)OR(v0.c0)))AND(0.9065111082146229)))AND(vt1.c1)))AND(vt1.c0)))AND(v0.c1)))AND(v0.c0))))) ASC;
SELECT * FROM vt1, v0 WHERE (((((+ (v0.c1)) IN (((v0.c2) ISNULL))))AND(CASE WHEN v0.c2 THEN 'D' WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN vt1.c1 ELSE '32506213' END COLLATE NOCASE))) ORDER BY (NOT (((v0.c0)AND(vt1.c1)))) DESC, (((((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c2)), (v0.c0 IN ())))<((((v0.c0)+(vt1.c0)), vt1.c0 COLLATE RTRIM)))  NULLS FIRST, (((NULL, v0.c1, v0.c1)) NOT BETWEEN ((((v0.c2)IS NOT(vt1.c1)), (((NULL, v0.c1))<=((vt1.c0, vt1.c0))), UNLIKELY(vt1.c1))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (vt1.c0)), ((v0.c1) IS FALSE), ((((((((((((v0.c2)OR(v0.c0)))AND(0.9065111082146229)))AND(vt1.c1)))AND(vt1.c0)))AND(v0.c1)))AND(v0.c0))))) ASC LIMIT 0x0 INTERSECT SELECT * FROM vt1, v0 WHERE (((((((v0.c2)>>(v0.c1)))OR((v0.c2 IN ()))))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN 0.49077368609299343 ELSE v0.c1 END))) ORDER BY (NOT (((v0.c0)AND(vt1.c1)))) DESC, (((((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c2)), (v0.c0 IN ())))<((((v0.c0)+(vt1.c0)), vt1.c0 COLLATE RTRIM)))  NULLS FIRST, (((NULL, v0.c1, v0.c1)) NOT BETWEEN ((((v0.c2)IS NOT(vt1.c1)), (((NULL, v0.c1))<=((vt1.c0, vt1.c0))), UNLIKELY(vt1.c1))) AND ((((v0.c2) NOT BETWEEN (v0.c1) AND (vt1.c0)), ((v0.c1) IS FALSE), ((((((((((((v0.c2)OR(v0.c0)))AND(0.9065111082146229)))AND(vt1.c1)))AND(vt1.c0)))AND(v0.c1)))AND(v0.c0))))) ASC LIMIT 0;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1, 0.1815678517994589)) BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c0, v0.c2))) IN ())) ORDER BY ((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)OR(vt1.c0)))OR(v0.c2))) AND ((NOT ('X!ue?]j^')))) DESC;
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1, 0.1815678517994589)) BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c0, v0.c2))) IN ())) ORDER BY ((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)OR(vt1.c0)))OR(v0.c2))) AND ((NOT ('X!ue?]j^')))) DESC LIMIT 0x0 INTERSECT SELECT * FROM v0, vt1 WHERE (UPPER(v0.c1 COLLATE RTRIM)) ORDER BY ((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)OR(vt1.c0)))OR(v0.c2))) AND ((NOT ('X!ue?]j^')))) DESC LIMIT 0x0;
SELECT * FROM v0, vt1 WHERE (((((vt1.c1, 0.1815678517994589)) BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c0, v0.c2))) IN ())) ORDER BY ((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)OR(vt1.c0)))OR(v0.c2))) AND ((NOT ('X!ue?]j^')))) DESC;
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1, 0.1815678517994589)) BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c0, v0.c2))) IN ())) ORDER BY ((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)OR(vt1.c0)))OR(v0.c2))) AND ((NOT ('X!ue?]j^')))) DESC LIMIT 0x0 INTERSECT SELECT * FROM v0, vt1 WHERE (UPPER(v0.c1 COLLATE RTRIM)) ORDER BY ((((v0.c0) NOT NULL)) NOT BETWEEN (((((v0.c2)OR(vt1.c0)))OR(v0.c2))) AND ((NOT ('X!ue?]j^')))) DESC LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c1)) AND ((vt1.c0, vt1.c1, vt1.c0))))||(((vt1.c1)>(vt1.c0))))) ORDER BY (((vt1.c1) ISNULL) IN ()) ASC, CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN 0.022416731412642443 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END AS NUMERIC);
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c1)) AND ((vt1.c0, vt1.c1, vt1.c0))))||(((vt1.c1)>(vt1.c0))))) ORDER BY (((vt1.c1) ISNULL) IN ()) ASC, CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN 0.022416731412642443 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END AS NUMERIC) INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) COLLATE NOCASE) ORDER BY (((vt1.c1) ISNULL) IN ()) ASC, CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN 0.022416731412642443 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END AS NUMERIC);
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c1)) AND ((vt1.c0, vt1.c1, vt1.c0))))||(((vt1.c1)>(vt1.c0))))) ORDER BY (((vt1.c1) ISNULL) IN ()) ASC, CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN 0.022416731412642443 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END AS NUMERIC);
SELECT MIN(v0.c0) FROM v0 WHERE (((((v0.c0)<(v0.c2))) BETWEEN (v0.c0 COLLATE RTRIM) AND (((v0.c2)-(v0.c1)))));
SELECT MIN(v0.c0) FROM v0 WHERE (((((v0.c0)<(v0.c2))) BETWEEN (v0.c0 COLLATE RTRIM) AND (((v0.c2)-(v0.c1))))) INTERSECT SELECT ALL MIN(v0.c0) FROM v0 WHERE ((CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN 0.8810132846682494 THEN v0.c0 WHEN v0.c2 THEN v0.c0 END IN ((v0.c2 IN (v0.c0)), v0.c1)));
SELECT * FROM v0 CROSS JOIN vt1 ON v0.c0 WHERE ((((v0.c1 IN (v0.c1, vt1.c1)))%(CASE WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END)));
SELECT * FROM v0 CROSS JOIN vt1 ON v0.c0 WHERE ((((v0.c1 IN (v0.c1)))%(CASE WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END))) ORDER BY (CAST(vt1.c1 AS TEXT) IN ((NOT ('477990792')), 0.1158863530796993)) ASC LIMIT 0X0 INTERSECT SELECT ALL * FROM v0 CROSS JOIN vt1 ON v0.c0 WHERE ((((v0.c1 IN (vt1.c0))) NOT BETWEEN (v0.c0) AND (CASE WHEN vt1.c0 THEN vt1.c1 ELSE v0.c1 END))) ORDER BY (CAST(vt1.c1 AS TEXT) IN ((NOT ('477990792')), 0.1158863530796993)) ASC LIMIT 0;
SELECT * FROM v0 CROSS JOIN vt1 ON v0.c0 WHERE ((((v0.c1 IN (v0.c1, vt1.c1)))%(CASE WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END)));
SELECT * FROM v0 CROSS JOIN vt1 ON v0.c0 WHERE ((((v0.c1 IN (v0.c1)))%(CASE WHEN vt1.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c1 ELSE v0.c2 END))) ORDER BY (CAST(vt1.c1 AS TEXT) IN ((NOT ('477990792')), 0.1158863530796993)) ASC LIMIT 0X0 INTERSECT SELECT ALL * FROM v0 CROSS JOIN vt1 ON v0.c0 WHERE ((((v0.c1 IN (vt1.c0))) NOT BETWEEN (v0.c0) AND (CASE WHEN vt1.c0 THEN vt1.c1 ELSE v0.c1 END))) ORDER BY (CAST(vt1.c1 AS TEXT) IN ((NOT ('477990792')), 0.1158863530796993)) ASC LIMIT 0;
SELECT ALL * FROM v0 WHERE (json_quote(((v0.c2) ISNULL))) ORDER BY CAST(v0.c1 AS BLOB) DESC  NULLS LAST, ((CAST(v0.c1 AS INTEGER))<=(((v0.c1)>=(v0.c0))));
SELECT DISTINCT * FROM v0 WHERE (((json_quote(((v0.c2) ISNULL)))AND(json_quote(((((((((((v0.c1)OR('S')))OR(v0.c0)))AND(v0.c0)))AND(v0.c0)))OR(v0.c0)))))) ORDER BY CAST(v0.c1 AS BLOB) DESC  NULLS LAST, ((CAST(v0.c1 AS INTEGER))<=(((v0.c1)>=(v0.c0))));
SELECT ALL * FROM v0 WHERE (json_quote(((v0.c2) ISNULL))) ORDER BY CAST(v0.c1 AS BLOB) DESC  NULLS LAST, ((CAST(v0.c1 AS INTEGER))<=(((v0.c1)>=(v0.c0))));
SELECT DISTINCT * FROM v0 WHERE (((json_quote(((v0.c2) ISNULL)))AND(json_quote(((((((((((v0.c1)OR('S')))OR(v0.c0)))AND(v0.c0)))AND(v0.c0)))OR(v0.c0)))))) ORDER BY CAST(v0.c1 AS BLOB) DESC  NULLS LAST, ((CAST(v0.c1 AS INTEGER))<=(((v0.c1)>=(v0.c0))));
SELECT ALL MAX(vt1.c0) FROM vt1 LEFT OUTER JOIN v0 ON MAX((((v0.c0, v0.c1))>=((v0.c0, vt1.c0))), '-2038281165' COLLATE RTRIM, (((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c2)))) WHERE (CAST((+ (v0.c0)) AS TEXT));
SELECT ALL MAX(vt1.c0) FROM vt1 INNER JOIN v0 ON MAX((((v0.c0, v0.c1))>=((v0.c0, vt1.c0))), '-2038281165' COLLATE RTRIM, (((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c2)))) WHERE (((CAST((+ (v0.c0)) AS TEXT))AND((((vt1.c0)>=(NULL)) IN (v0.c2 COLLATE BINARY)))));
SELECT ALL * FROM vt1 WHERE ((((+ (vt1.c0))) IS FALSE));
SELECT DISTINCT * FROM vt1 WHERE ((((((+ (vt1.c0))) IS FALSE))AND(((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END) NOT BETWEEN (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END) AND (vt1.c1 COLLATE RTRIM)))));
SELECT ALL * FROM vt1 WHERE ((((+ (vt1.c0))) IS FALSE));
SELECT DISTINCT * FROM vt1 WHERE ((((((+ (vt1.c0))) IS FALSE))AND(((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END) NOT BETWEEN (CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END) AND (vt1.c1 COLLATE RTRIM)))));
SELECT MIN(vt1.c1) FROM vt1 WHERE ((((+ (vt1.c1)))GLOB(TRIM(DISTINCT vt1.c0, vt1.c1)))) ORDER BY ((((((x'677f0e')OR(vt1.c1 COLLATE NOCASE)))OR(COALESCE(vt1.c1, vt1.c1))))AND((+ (vt1.c0)))) DESC  NULLS FIRST, (((vt1.c0, vt1.c1, vt1.c1)) BETWEEN ((vt1.c0 COLLATE RTRIM, vt1.c0, ((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c1)))) AND ((UNLIKELY(vt1.c1), '0.938863164610557', vt1.c0)))  NULLS FIRST;
SELECT MIN(vt1.c1) FROM vt1 WHERE ((((((+ (vt1.c1)))GLOB(TRIM(DISTINCT vt1.c0, vt1.c1))))AND(((((vt1.c0, vt1.c1, vt1.c0, vt1.c0)) BETWEEN ((vt1.c0, vt1.c0, vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c0, vt1.c0, vt1.c1))) IN ())))) ORDER BY (((vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE NOCASE)) AND ((vt1.c0 COLLATE RTRIM))) ASC LIMIT 1 INTERSECT SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c1, vt1.c1, NULL))<((vt1.c0, vt1.c0, vt1.c1, vt1.c1, vt1.c1)))) IS TRUE)) ORDER BY (((vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE NOCASE)) AND ((vt1.c0 COLLATE RTRIM))) ASC LIMIT 0X1;
SELECT * FROM v0, vt1 WHERE (((CAST(NULL AS TEXT)) BETWEEN (((vt1.c1)%(v0.c0))) AND ('1341109058')));
SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST(NULL AS TEXT)) BETWEEN (((vt1.c1)%(v0.c0))) AND ('1341109058'))) ORDER BY vt1.c0 DESC, ((TYPEOF(v0.c0))IS NOT(vt1.c0 COLLATE NOCASE)) ASC INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (LTRIM(CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END)) ORDER BY vt1.c0 DESC, ((TYPEOF(v0.c0))IS NOT(vt1.c0 COLLATE NOCASE)) ASC;
SELECT * FROM v0, vt1 WHERE (((CAST(NULL AS TEXT)) BETWEEN (((vt1.c1)%(v0.c0))) AND ('1341109058')));
SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST(NULL AS TEXT)) BETWEEN (((vt1.c1)%(v0.c0))) AND ('1341109058'))) ORDER BY vt1.c0 DESC, ((TYPEOF(v0.c0))IS NOT(vt1.c0 COLLATE NOCASE)) ASC INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (LTRIM(CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END)) ORDER BY vt1.c0 DESC, ((TYPEOF(v0.c0))IS NOT(vt1.c0 COLLATE NOCASE)) ASC;
SELECT ALL MIN(vt1.c1) FROM v0 CROSS JOIN vt1 ON (((v0.c1, v0.c1, v0.c0, v0.c1)) BETWEEN ((((vt1.c0)IS NOT(v0.c0)), ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)), (+ (v0.c1)), ((((((v0.c0)AND(vt1.c1)))AND(v0.c2)))AND(v0.c1)))) AND ((load_extension(v0.c1), ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1)), (v0.c1 IN ()), ((v0.c2) ISNULL)))) WHERE (((vt1.c1) NOT BETWEEN ((((vt1.c0)) NOT BETWEEN ((v0.c2)) AND ((v0.c1)))) AND ((- (-1.84481855E9))))) ORDER BY (((((((((v0.c2, vt1.c1))=((v0.c1, v0.c0))))AND(CASE WHEN v0.c1 THEN vt1.c0 ELSE v0.c1 END)))AND(MAX(v0.c1, 'Erl', vt1.c1, v0.c2))))OR(((v0.c1)/(vt1.c1)))) DESC  NULLS LAST, ((((v0.c0)%(v0.c2))) NOT NULL) DESC  NULLS LAST, CASE ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1))  WHEN ((vt1.c0) IS TRUE) THEN ((v0.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) WHEN CAST(vt1.c0 AS TEXT) THEN (v0.c0 IN ()) WHEN ((vt1.c0)|(v0.c0)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND (v0.c1)) WHEN CAST(0.296125741586469 AS INTEGER) THEN 0.23125808863100983 WHEN v0.c0 THEN (('-1507532899')<=(v0.c2)) ELSE 0.06331472881321298 END DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt1.c1) FROM v0 CROSS JOIN vt1 ON (((v0.c1, v0.c1, v0.c0, v0.c1)) BETWEEN ((((vt1.c0)IS NOT(v0.c0)), ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)), (+ (v0.c1)), ((((((v0.c0)AND(vt1.c1)))AND(v0.c2)))AND(v0.c1)))) AND ((load_extension(v0.c1), ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1)), (v0.c1 IN ()), ((v0.c2) ISNULL)))) WHERE (((((vt1.c1) NOT BETWEEN ((((vt1.c0)) NOT BETWEEN ((v0.c2)) AND ((v0.c1)))) AND ((- (-1.84481855E9)))))AND(CAST(((vt1.c0) NOT NULL) AS REAL)))) ORDER BY (((((((((v0.c2, vt1.c1))==((v0.c1, v0.c0))))AND(CASE WHEN v0.c1 THEN vt1.c0 ELSE v0.c1 END)))AND(MAX(v0.c1, 'Erl', vt1.c1, v0.c2))))OR(((v0.c1)/(vt1.c1)))) DESC  NULLS LAST, ((((v0.c0)%(v0.c2))) NOT NULL) DESC  NULLS LAST, CASE ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1))  WHEN ((vt1.c0) IS TRUE) THEN ((v0.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) WHEN CAST(vt1.c0 AS TEXT) THEN (v0.c0 IN ()) WHEN ((vt1.c0)|(v0.c0)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND (v0.c1)) WHEN CAST(0.296125741586469 AS INTEGER) THEN 0.23125808863100983 WHEN v0.c0 THEN (('-1507532899')<=(v0.c2)) ELSE 0.06331472881321298 END DESC  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (v0.c0) ORDER BY (((- (v0.c2))) NOT NULL)  NULLS LAST;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (v0.c0) ORDER BY (((- (v0.c2))) NOT NULL)  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE ((((vt1.c1 IN (vt1.c1, vt1.c1)))>=(LIKELY(DISTINCT vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1 IN (vt1.c1, vt1.c1)))==(LIKELY(DISTINCT vt1.c0))))AND((NOT (vt1.c0))))) ORDER BY ((((vt1.c0)%(x'b75310'))) NOTNULL) ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE ((((vt1.c1 IN (vt1.c1, vt1.c1)))>=(LIKELY(DISTINCT vt1.c0))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1 IN (vt1.c1, vt1.c1)))==(LIKELY(DISTINCT vt1.c0))))AND((NOT (vt1.c0))))) ORDER BY ((((vt1.c0)%(x'b75310'))) NOTNULL) ASC  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE (CAST((((v0.c0, 0.28598745340988696, v0.c0))<=((v0.c0, v0.c0, v0.c2))) AS REAL));
SELECT ALL * FROM v0 WHERE (CAST((((v0.c0, 0.28598745340988696, v0.c0))<=((v0.c0, v0.c0, v0.c2))) AS REAL)) ORDER BY ((CAST(v0.c0 AS BLOB))||(((v0.c1)IS(v0.c1))))  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE ((((((v0.c2, v0.c1, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0, v0.c1)) AND ((v0.c1, v0.c2, v0.c1)))) NOT BETWEEN (((v0.c1)GLOB(v0.c1))) AND (((v0.c2)+(v0.c1))))) ORDER BY ((CAST(v0.c0 AS BLOB))||(((v0.c1)IS(v0.c1))))  NULLS LAST;
SELECT * FROM v0 WHERE (CAST((((v0.c0, 0.28598745340988696, v0.c0))<=((v0.c0, v0.c0, v0.c2))) AS REAL));
SELECT ALL * FROM v0 WHERE (CAST((((v0.c0, 0.28598745340988696, v0.c0))<=((v0.c0, v0.c0, v0.c2))) AS REAL)) ORDER BY ((CAST(v0.c0 AS BLOB))||(((v0.c1)IS(v0.c1))))  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE ((((((v0.c2, v0.c1, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0, v0.c1)) AND ((v0.c1, v0.c2, v0.c1)))) NOT BETWEEN (((v0.c1)GLOB(v0.c1))) AND (((v0.c2)+(v0.c1))))) ORDER BY ((CAST(v0.c0 AS BLOB))||(((v0.c1)IS(v0.c1))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 AS BLOB))AND((NOT (v0.c1))))) ORDER BY ((((v0.c1)>=(v0.c2))) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND (v0.c2 COLLATE BINARY)) ASC, CAST(CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END AS REAL) ASC;
SELECT * FROM v0 WHERE (((((CAST(v0.c1 AS BLOB))AND((NOT (v0.c1)))))AND(((((((v0.c1 COLLATE RTRIM)OR(json_object(v0.c1, v0.c2, v0.c0))))OR(((v0.c1)GLOB(v0.c0)))))AND(-1.809434267E9))))) ORDER BY v0.c2 DESC, (+ (((v0.c1) NOTNULL))) LIMIT 3;
SELECT ALL * FROM v0 WHERE (((CAST(v0.c1 AS BLOB))AND((NOT (v0.c1))))) ORDER BY ((((v0.c1)>=(v0.c2))) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND (v0.c2 COLLATE BINARY)) ASC, CAST(CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END AS REAL) ASC;
SELECT * FROM v0 WHERE (((((CAST(v0.c1 AS BLOB))AND((NOT (v0.c1)))))AND(((((((v0.c1 COLLATE RTRIM)OR(json_object(v0.c1, v0.c2, v0.c0))))OR(((v0.c1)GLOB(v0.c0)))))AND(-1.809434267E9))))) ORDER BY v0.c2 DESC, (+ (((v0.c1) NOTNULL))) LIMIT 3;
SELECT ALL COUNT(*) FROM v0 WHERE (ABS(DISTINCT v0.c1) COLLATE RTRIM) ORDER BY ((((v0.c2) NOT NULL)) BETWEEN (CASE v0.c2  WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 END) AND (((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c1)))) ASC, CASE WHEN v0.c2 THEN 0.4078154307844172 WHEN v0.c1 THEN v0.c2 END COLLATE RTRIM DESC  NULLS LAST, ((NULL COLLATE BINARY) BETWEEN ((+ (v0.c1))) AND ((((v0.c1, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((NULL, v0.c1))))) ASC, (NOT ((~ (v0.c2)))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE (((ABS(DISTINCT v0.c1) COLLATE RTRIM)AND(v0.c2))) ORDER BY ((((v0.c2) NOT NULL)) BETWEEN (CASE v0.c2  WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 END) AND (((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c1)))) ASC, CASE WHEN v0.c2 THEN 0.4078154307844172 WHEN v0.c1 THEN v0.c2 END COLLATE RTRIM DESC  NULLS LAST, ((NULL COLLATE BINARY) BETWEEN ((+ (v0.c1))) AND ((((v0.c1, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((NULL, v0.c1))))) ASC, (NOT ((~ (v0.c2)))) ASC  NULLS LAST LIMIT 2;
SELECT ALL MIN(vt1.c0) FROM v0 NATURAL JOIN vt1 WHERE (CAST(((vt1.c1)<>(v0.c2)) AS TEXT));
SELECT DISTINCT MIN(vt1.c0) FROM v0 NATURAL JOIN vt1 WHERE (CAST(((vt1.c1)<(v0.c2)) AS TEXT)) INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM v0 NATURAL JOIN vt1 WHERE (CASE WHEN v0.c1 THEN ((((v0.c2)AND(vt1.c1)))OR(vt1.c1)) ELSE (((v0.c1, 0X6010aac6, v0.c2)) NOT BETWEEN ((NULL, v0.c0, vt1.c0)) AND ((vt1.c1, 2.131012904E9, 0.14037061872001877))) END);
SELECT ALL MIN(vt1.c0) FROM vt1, v0 WHERE ((+ ((((x'10'))>=((v0.c0))))));
SELECT DISTINCT MIN(vt1.c0) FROM vt1, v0 WHERE ((((+ ((((x'10'))==((v0.c0))))))AND((CAST(v0.c2 AS INTEGER) IN ()))));
SELECT ALL * FROM v0 WHERE (json_remove(CAST(v0.c1 AS INTEGER), 'Z')) ORDER BY ((v0.c2)LIKE(((v0.c0)*(v0.c2))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (json_remove(CAST(v0.c1 AS INTEGER), 'Z')) ORDER BY CAST('-1432416200' AS REAL) DESC  NULLS FIRST, (((v0.c2)) NOT BETWEEN ((NULL)) AND (((v0.c0 IN (v0.c1)))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c0)<>(v0.c1))) BETWEEN ((+ (v0.c2))) AND ((+ (v0.c2))))) ORDER BY CAST('-1432416200' AS REAL) DESC  NULLS FIRST, (((v0.c2)) NOT BETWEEN ((NULL)) AND (((v0.c0 IN (v0.c1)))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (json_remove(CAST(v0.c1 AS INTEGER), 'Z')) ORDER BY ((v0.c2)LIKE(((v0.c0)*(v0.c2))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (json_remove(CAST(v0.c1 AS INTEGER), 'Z')) ORDER BY CAST('-1432416200' AS REAL) DESC  NULLS FIRST, (((v0.c2)) NOT BETWEEN ((NULL)) AND (((v0.c0 IN (v0.c1)))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c0)<>(v0.c1))) BETWEEN ((+ (v0.c2))) AND ((+ (v0.c2))))) ORDER BY CAST('-1432416200' AS REAL) DESC  NULLS FIRST, (((v0.c2)) NOT BETWEEN ((NULL)) AND (((v0.c0 IN (v0.c1)))))  NULLS LAST;
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (x'c106') ORDER BY ((((((((((v0.c0)GLOB(v0.c0)))AND(vt1.c0)))OR(((vt1.c0)<(vt1.c1)))))OR((vt1.c1 IN (v0.c0)))))OR((~ (v0.c0))));
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((x'c106')AND(CAST(SUBSTR(vt1.c1, v0.c1) AS INTEGER)))) ORDER BY (((v0.c0) IS FALSE) IN (((v0.c1)%(NULL)))) ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (x'c106') ORDER BY ((((((((((v0.c0)GLOB(v0.c0)))AND(vt1.c0)))OR(((vt1.c0)<(vt1.c1)))))OR((vt1.c1 IN (v0.c0)))))OR((~ (v0.c0))));
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((x'c106')AND(CAST(SUBSTR(vt1.c1, v0.c1) AS INTEGER)))) ORDER BY (((v0.c0) IS FALSE) IN (((v0.c1)%(NULL)))) ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (json_valid(0.7865242733208551)) ORDER BY (UNICODE(v0.c1) IN ()) DESC  NULLS FIRST, ((((v0.c1)>>(v0.c2))) NOT NULL);
SELECT DISTINCT * FROM v0 WHERE (((json_valid(0.7865242733208551))AND(NULL COLLATE NOCASE))) ORDER BY ((NULL)||(((((v0.c2)OR(v0.c1)))OR(v0.c0))))  NULLS FIRST, (+ ((((v0.c0, v0.c0, v0.c1)) BETWEEN ((v0.c2, 0.4784417667554508, v0.c0)) AND ((v0.c1, 0.31411391418745926, v0.c1))))) DESC, ((((((((((((x'55')AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))AND('929445258')))AND(((v0.c0)AND(v0.c1)))))OR(SQLITE_COMPILEOPTION_USED(v0.c0)));
SELECT ALL * FROM v0 WHERE (json_valid(0.7865242733208551)) ORDER BY (UNICODE(v0.c1) IN ()) DESC  NULLS FIRST, ((((v0.c1)>>(v0.c2))) NOT NULL);
SELECT ALL COUNT(*) FROM v0 WHERE ((v0.c1 IN ()) COLLATE RTRIM COLLATE RTRIM);
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((v0.c1 IN ()) COLLATE RTRIM COLLATE RTRIM)AND(((((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))), ((((((((((((v0.c2)AND(v0.c2)))AND(v0.c2)))AND('C!9h _o')))AND(v0.c1)))AND(v0.c2)))AND(v0.c2))))<=(((+ (v0.c0)), v0.c2)))))) ORDER BY (((((v0.c0)AND(v0.c2)), TYPEOF(DISTINCT v0.c2)))==((v0.c1 COLLATE RTRIM, v0.c1 COLLATE BINARY)))  NULLS LAST, ((CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END)>>(((v0.c0) NOTNULL))) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (DATETIME((((v0.c2, v0.c0, v0.c0))<((v0.c1, v0.c0, v0.c2))), highlight(v0.c0, v0.c1, v0.c0, v0.c2), ((v0.c2)||(v0.c2)), 0.5290985910142137)) ORDER BY (((((v0.c0)AND(v0.c2)), TYPEOF(DISTINCT v0.c2)))=((v0.c1 COLLATE RTRIM, v0.c1 COLLATE BINARY)))  NULLS LAST, ((CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END)>>(((v0.c0) NOTNULL))) ASC;
SELECT ALL COUNT(*) FROM v0 WHERE ((((((v0.c2)AND(v0.c2)))OR(v0.c0)) IN (((v0.c2) ISNULL), ((v0.c0) ISNULL))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((((v0.c2)AND(v0.c2)))OR(v0.c0)) IN (((v0.c2) ISNULL), ((v0.c0) ISNULL))));
SELECT COUNT(*) FROM vt1, v0 WHERE ((((vt1.c1 COLLATE RTRIM, x'ad', vt1.c1, v0.c0))!=((((vt1.c0)>=(vt1.c1)), ((vt1.c1) NOTNULL), (((vt1.c1, v0.c0)) BETWEEN ((vt1.c0, v0.c1)) AND ((vt1.c1, v0.c2))), ((v0.c1)%(vt1.c0))))));
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((((((vt1.c1 COLLATE RTRIM, x'ad', vt1.c1, v0.c0))>((((vt1.c0)==(vt1.c1)), ((vt1.c1) NOTNULL), (((vt1.c1, v0.c0)) BETWEEN ((vt1.c0, v0.c1)) AND ((vt1.c1, v0.c2))), ((v0.c1)%(vt1.c0))))))AND((((v0.c2 IN (vt1.c0, v0.c0))) NOT NULL))));
SELECT MIN(v0.c0) FROM v0, vt1 WHERE (((0.829381414577852)=('dlL' COLLATE NOCASE)));
SELECT MIN(v0.c0) FROM v0, vt1 WHERE (((((0.829381414577852)=('dlL' COLLATE NOCASE)))AND(CAST(v0.c1 AS NUMERIC)))) LIMIT 3 INTERSECT SELECT MIN(v0.c0) FROM v0, vt1 WHERE ((NOT (((vt1.c0) ISNULL)))) LIMIT 3;
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c0, NULL))<((v0.c1, v0.c2)))) NOT BETWEEN (((v0.c2) BETWEEN (0.5218350493781642) AND (v0.c1))) AND (TOTAL_CHANGES()))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((v0.c2)<<(v0.c2)))) AND ((NULL))) DESC, (- (((v0.c1)AND(vt1.c1))));
SELECT ALL * FROM v0, vt1 WHERE ((((((((v0.c0, NULL))<((v0.c1, v0.c2)))) NOT BETWEEN (((v0.c2) BETWEEN (0.5218350493781642) AND (v0.c1))) AND (TOTAL_CHANGES())))AND(((TRIM(v0.c0))!=((((vt1.c0, vt1.c1, vt1.c1, vt1.c0, v0.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c2, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0, vt1.c1, vt1.c0)))))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((v0.c2)<<(v0.c2)))) AND ((NULL))) DESC, (- (((v0.c1)AND(vt1.c1)))) INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) IN ((vt1.c1 IN ())))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((v0.c2)<<(v0.c2)))) AND ((NULL))) DESC, (- (((v0.c1)AND(vt1.c1))));
SELECT ALL * FROM v0, vt1 WHERE ((((((v0.c0, NULL))<((v0.c1, v0.c2)))) NOT BETWEEN (((v0.c2) BETWEEN (0.5218350493781642) AND (v0.c1))) AND (TOTAL_CHANGES()))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((v0.c2)<<(v0.c2)))) AND ((NULL))) DESC, (- (((v0.c1)AND(vt1.c1))));
SELECT ALL * FROM v0, vt1 WHERE ((((((((v0.c0, NULL))<((v0.c1, v0.c2)))) NOT BETWEEN (((v0.c2) BETWEEN (0.5218350493781642) AND (v0.c1))) AND (TOTAL_CHANGES())))AND(((TRIM(v0.c0))!=((((vt1.c0, vt1.c1, vt1.c1, vt1.c0, v0.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c2, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c1, vt1.c0, vt1.c1, vt1.c0)))))))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((v0.c2)<<(v0.c2)))) AND ((NULL))) DESC, (- (((v0.c1)AND(vt1.c1)))) INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) IN ((vt1.c1 IN ())))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((v0.c2)<<(v0.c2)))) AND ((NULL))) DESC, (- (((v0.c1)AND(vt1.c1))));
SELECT ALL COUNT(*) FROM v0 WHERE ((((((((((((v0.c0 IN (v0.c2)))OR(((v0.c2)IS NOT(v0.c0)))))AND(CAST(v0.c2 AS INTEGER))))AND(CAST(v0.c1 AS TEXT))))AND((v0.c1 IN ()))))OR(CASE v0.c1  WHEN v0.c0 THEN 0.6155780138580418 WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END))) ORDER BY CASE WHEN CAST(v0.c0 AS BLOB) THEN ((v0.c1)==(v0.c0)) WHEN (- (v0.c1)) THEN v0.c1 COLLATE BINARY WHEN v0.c2 THEN ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c1)) WHEN CAST(v0.c2 AS NUMERIC) THEN LOWER(DISTINCT v0.c1) ELSE CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END END ASC  NULLS FIRST, v0.c1 DESC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((((((((((((v0.c0 IN (v0.c2)))OR(((v0.c2)IS NOT(v0.c0)))))AND(CAST(v0.c2 AS INTEGER))))AND(CAST(v0.c1 AS TEXT))))AND((v0.c1 IN ()))))OR(CASE v0.c1  WHEN v0.c0 THEN 0.6155780138580418 WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END)))AND(CAST(((((v0.c1)OR(v0.c0)))AND('856469861')) AS INTEGER)))) ORDER BY CASE WHEN CAST(v0.c0 AS BLOB) THEN ((v0.c1)=(v0.c0)) WHEN (- (v0.c1)) THEN v0.c1 COLLATE BINARY WHEN v0.c2 THEN ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c1)) WHEN CAST(v0.c2 AS NUMERIC) THEN LOWER(DISTINCT v0.c1) ELSE CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END END ASC  NULLS FIRST, v0.c1 DESC LIMIT 0X3;
SELECT COUNT(*) FROM v0 WHERE ((((0x474d12ff)) NOT BETWEEN ((CASE WHEN v0.c1 THEN v0.c1 ELSE 1073399579 END)) AND ((CASE WHEN v0.c1 THEN v0.c1 END))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((((1196233471)) NOT BETWEEN ((CASE WHEN v0.c1 THEN v0.c1 ELSE 1073399579 END)) AND ((CASE WHEN v0.c1 THEN v0.c1 END))))AND((((v0.c2, v0.c2, v0.c2)) BETWEEN ((v0.c2 COLLATE BINARY, ((v0.c0) BETWEEN (v0.c2) AND (v0.c0)), ((((((((((((v0.c1)OR(v0.c1)))AND(v0.c1)))OR(v0.c1)))AND(v0.c1)))OR(v0.c0)))AND(v0.c1)))) AND ((CASE v0.c0  WHEN v0.c1 THEN v0.c1 END, (v0.c0 IN (v0.c1)), CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c0 END))))));
SELECT ALL * FROM vt1 WHERE (COALESCE(DISTINCT TYPEOF(vt1.c0), (~ (vt1.c0)), ((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c1))));
SELECT DISTINCT * FROM vt1 WHERE (((COALESCE(DISTINCT TYPEOF(vt1.c0), (~ (vt1.c0)), ((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c1))))AND((((vt1.c0 IN (vt1.c0))) NOT NULL)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL);
SELECT ALL * FROM vt1 WHERE (COALESCE(DISTINCT TYPEOF(vt1.c0), (~ (vt1.c0)), ((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c1))));
SELECT DISTINCT * FROM vt1 WHERE (((COALESCE(DISTINCT TYPEOF(vt1.c0), (~ (vt1.c0)), ((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))OR(vt1.c1))))AND((((vt1.c0 IN (vt1.c0))) NOT NULL)))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE (NULL);
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c0)!=(v0.c2)))=(v0.c0)));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c0)>(v0.c2)))=(v0.c0))) ORDER BY CAST(CASE WHEN v0.c2 THEN v0.c0 END AS TEXT) DESC, x'ca3bb1'  NULLS LAST, CASE WHEN v0.c1 COLLATE RTRIM THEN 0.7471817967706496 WHEN (((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))) THEN ((v0.c2)>>(v0.c2)) END LIMIT 0X2 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c1 IN (v0.c1)) IN (((v0.c1) NOT NULL)))) ORDER BY CAST(CASE WHEN v0.c2 THEN v0.c0 END AS TEXT) DESC, x'ca3bb1'  NULLS LAST, CASE WHEN v0.c1 COLLATE RTRIM THEN 0.7471817967706496 WHEN (((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))) THEN ((v0.c2)>>(v0.c2)) END LIMIT 2;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (NULL) ORDER BY ((json_extract(v0.c0, v0.c2, v0.c1)) BETWEEN (v0.c2 COLLATE BINARY) AND (v0.c1 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((NULL)AND((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)) IN ((v0.c2 IN (v0.c0))))))) ORDER BY ((json_extract(v0.c0, v0.c2, v0.c1)) BETWEEN (v0.c2 COLLATE BINARY) AND (v0.c1 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM vt1, v0 WHERE ((+ ((- (vt1.c0))))) ORDER BY -1432416200, ((((((((CAST(vt1.c1 AS TEXT))OR(CAST(vt1.c1 AS TEXT))))OR(v0.c1)))OR(((vt1.c1)%(v0.c2)))))AND(CAST(vt1.c0 AS INTEGER)))  NULLS FIRST, ((((vt1.c1, vt1.c0))>((vt1.c1, v0.c1))) IN (v0.c0));
SELECT DISTINCT MIN(v0.c0) FROM vt1, v0 WHERE ((((+ ((- (vt1.c0)))))AND(((CASE WHEN vt1.c1 THEN v0.c2 ELSE v0.c1 END) IS FALSE)))) ORDER BY CHAR(v0.c1 COLLATE BINARY, v0.c1 COLLATE BINARY, ((vt1.c1)>>(-1318736005)), ((vt1.c1) BETWEEN (v0.c0) AND (v0.c2))), CASE WHEN ((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)) THEN UPPER(v0.c0) WHEN CAST(v0.c0 AS INTEGER) THEN CAST(v0.c0 AS TEXT) WHEN (v0.c2 IN (v0.c0)) THEN ((v0.c1) BETWEEN (vt1.c1) AND (vt1.c1)) ELSE ((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)) END LIMIT 0x1;
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((~ (TRIM(x''))));
SELECT MIN(v0.c1) FROM v0 WHERE ((((~ (TRIM(x''))))AND((((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))OR(v0.c1)))OR(v0.c0)) IN ())))) ORDER BY ((~ (v0.c2)) IN (v0.c1 COLLATE BINARY, ((v0.c1) NOT BETWEEN (v0.c0) AND (x'f3')))) ASC  NULLS LAST, CASE CAST('mM' AS NUMERIC)  WHEN (v0.c2 IN (v0.c1)) THEN v0.c0 COLLATE RTRIM WHEN ((((v0.c1)AND(v0.c2)))AND(v0.c0)) THEN ((((((((v0.c2)OR(v0.c0)))AND(v0.c0)))OR(v0.c1)))OR(v0.c2)) WHEN ((((v0.c1)OR(v0.c1)))AND(v0.c2)) THEN ((v0.c0)<<(v0.c0)) ELSE CAST(v0.c1 AS TEXT) END, CASE v0.c2 COLLATE RTRIM  WHEN NULL COLLATE RTRIM THEN (v0.c1 IN (v0.c1)) WHEN ((v0.c0) NOTNULL) THEN v0.c2 ELSE v0.c1 COLLATE RTRIM END DESC LIMIT 0 INTERSECT SELECT MIN(v0.c1) FROM v0 WHERE (v0.c1) ORDER BY ((~ (v0.c2)) IN (v0.c1 COLLATE BINARY, ((v0.c1) NOT BETWEEN (v0.c0) AND (x'f3')))) ASC  NULLS LAST, CASE CAST('mM' AS NUMERIC)  WHEN (v0.c2 IN (v0.c1)) THEN v0.c0 COLLATE RTRIM WHEN ((((v0.c1)AND(v0.c2)))AND(v0.c0)) THEN ((((((((v0.c2)OR(v0.c0)))AND(v0.c0)))OR(v0.c1)))OR(v0.c2)) WHEN ((((v0.c1)OR(v0.c1)))AND(v0.c2)) THEN ((v0.c0)<<(v0.c0)) ELSE CAST(v0.c1 AS TEXT) END, CASE v0.c2 COLLATE RTRIM  WHEN NULL COLLATE RTRIM THEN (v0.c1 IN (v0.c1)) WHEN ((v0.c0) NOTNULL) THEN v0.c2 ELSE v0.c1 COLLATE RTRIM END DESC LIMIT 0X0;
SELECT MIN(v0.c2) FROM vt1 CROSS JOIN v0 ON (((((vt1.c0)OR(v0.c2)))OR(v0.c0)) IN ()) WHERE (vt1.c1) ORDER BY ((((((((((((((v0.c0)AND(vt1.c1)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c1)))AND((((vt1.c0, v0.c2)) NOT BETWEEN ((v0.c1, vt1.c1)) AND ((v0.c1, v0.c0))))))AND((vt1.c0 IN (vt1.c1)))))AND(CASE vt1.c0  WHEN v0.c2 THEN v0.c1 END)) DESC;
SELECT DISTINCT MIN(v0.c2) FROM vt1 NOT INDEXED CROSS JOIN v0 ON (((((vt1.c0)OR(v0.c2)))OR(v0.c0)) IN ()) WHERE (vt1.c1) ORDER BY ((((((((((((((v0.c0)AND(vt1.c1)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c1)))AND((((vt1.c0, v0.c2)) NOT BETWEEN ((v0.c1, vt1.c1)) AND ((v0.c1, v0.c0))))))AND((vt1.c0 IN (vt1.c1)))))AND(CASE vt1.c0  WHEN v0.c2 THEN v0.c1 END)) DESC INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt1 CROSS JOIN v0 ON (((((vt1.c0)OR(v0.c2)))OR(v0.c0)) IN ()) WHERE (((((((((((((((((((((v0.c1)OR(vt1.c1)))AND(v0.c0)))OR(v0.c2)))OR(CASE vt1.c1  WHEN vt1.c0 THEN v0.c0 WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 END)))OR(((((((x'4d')OR(vt1.c1)))AND(v0.c2)))OR(v0.c1)))))OR(((((((((v0.c2)AND('-602590969')))OR(vt1.c0)))OR(v0.c1)))OR(v0.c0)))))OR((- (vt1.c0)))))AND(CAST(vt1.c0 AS NUMERIC))))AND(((((v0.c2)OR(vt1.c0)))OR(v0.c0)))))OR(CASE v0.c2  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN vt1.c0 ELSE v0.c0 END))) ORDER BY ((((((((((((((v0.c0)AND(vt1.c1)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c1)))AND((((vt1.c0, v0.c2)) NOT BETWEEN ((v0.c1, vt1.c1)) AND ((v0.c1, v0.c0))))))AND((vt1.c0 IN (vt1.c1)))))AND(CASE vt1.c0  WHEN v0.c2 THEN v0.c1 END)) DESC;
SELECT ALL * FROM vt1 WHERE (LTRIM(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY ((CAST(vt1.c0 AS NUMERIC))<=(((vt1.c1)>>(vt1.c1))))  NULLS LAST, ((((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE x'' END)OR(vt1.c0)))OR('1738068092')) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (LTRIM(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY ((vt1.c1 COLLATE RTRIM) NOT BETWEEN ('32506213') AND (vt1.c0 COLLATE RTRIM))  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM vt1 WHERE (LTRIM(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY ((CAST(vt1.c0 AS NUMERIC))<=(((vt1.c1)>>(vt1.c1))))  NULLS LAST, ((((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE x'' END)OR(vt1.c0)))OR('1738068092')) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (LTRIM(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY ((vt1.c1 COLLATE RTRIM) NOT BETWEEN ('32506213') AND (vt1.c0 COLLATE RTRIM))  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM v0 INNER JOIN vt1 ON CAST(v0.c2 AS BLOB) COLLATE BINARY WHERE (CAST(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)) AS INTEGER)) ORDER BY ABS(((v0.c2)GLOB(vt1.c1)))  NULLS FIRST, (((vt1.c1, v0.c1)) BETWEEN (((NOT (v0.c1)), ((0.7377653910754213) IS FALSE))) AND ((((vt1.c0)>=(v0.c0)), CAST(v0.c0 AS NUMERIC)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON CAST(v0.c2 AS BLOB) COLLATE BINARY WHERE (CAST(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)) AS INTEGER)) ORDER BY NULL COLLATE RTRIM DESC, (v0.c0 COLLATE BINARY IN ((NOT (x'')))) LIMIT 2;
SELECT ALL * FROM v0 INNER JOIN vt1 ON CAST(v0.c2 AS BLOB) COLLATE BINARY WHERE (CAST(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)) AS INTEGER)) ORDER BY ABS(((v0.c2)GLOB(vt1.c1)))  NULLS FIRST, (((vt1.c1, v0.c1)) BETWEEN (((NOT (v0.c1)), ((0.7377653910754213) IS FALSE))) AND ((((vt1.c0)>=(v0.c0)), CAST(v0.c0 AS NUMERIC)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON CAST(v0.c2 AS BLOB) COLLATE BINARY WHERE (CAST(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)) AS INTEGER)) ORDER BY NULL COLLATE RTRIM DESC, (v0.c0 COLLATE BINARY IN ((NOT (x'')))) LIMIT 2;
SELECT ALL * FROM vt1, v0 WHERE ((x'b5' COLLATE RTRIM IN (0.5045752780264149, v0.c2, x'0526'))) ORDER BY (((v0.c1)) BETWEEN (((0xffffffffb8e9b647 IN (v0.c1)))) AND (((NOT (vt1.c0))))) ASC, (~ (((v0.c2) NOT NULL))) ASC  NULLS FIRST, (((~ (v0.c1)))IS NOT(CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 END)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE ((((x'b5' COLLATE RTRIM IN (0.5045752780264149, v0.c2, x'0526')))AND(QUOTE(v0.c2 COLLATE RTRIM)))) ORDER BY (((v0.c1)) BETWEEN (((0xffffffffb8e9b647 IN (v0.c1)))) AND (((NOT (vt1.c0))))) ASC, (~ (((v0.c2) NOT NULL))) ASC  NULLS FIRST, (((~ (v0.c1)))IS NOT(CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 END)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE ((x'b5' COLLATE RTRIM IN (0.5045752780264149, v0.c2, x'0526'))) ORDER BY (((v0.c1)) BETWEEN (((0xffffffffb8e9b647 IN (v0.c1)))) AND (((NOT (vt1.c0))))) ASC, (~ (((v0.c2) NOT NULL))) ASC  NULLS FIRST, (((~ (v0.c1)))IS NOT(CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 END)) ASC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE ((((x'b5' COLLATE RTRIM IN (0.5045752780264149, v0.c2, x'0526')))AND(QUOTE(v0.c2 COLLATE RTRIM)))) ORDER BY (((v0.c1)) BETWEEN (((0xffffffffb8e9b647 IN (v0.c1)))) AND (((NOT (vt1.c0))))) ASC, (~ (((v0.c2) NOT NULL))) ASC  NULLS FIRST, (((~ (v0.c1)))IS NOT(CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 END)) ASC  NULLS LAST;
SELECT COUNT(*) FROM vt1 WHERE (((vt1.c0 COLLATE NOCASE)<(LOWER(vt1.c0)))) ORDER BY (~ (CAST(vt1.c1 AS INTEGER))) ASC, (((vt1.c1, vt1.c0, 0Xffffffffbd111a6c, vt1.c1)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)), ((vt1.c1)=(vt1.c0)), ((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)), ((vt1.c1)=(vt1.c0)))) AND ((HEX(vt1.c1), ('739392481' IN (vt1.c0)), vt1.c1 COLLATE BINARY, ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((vt1.c0 COLLATE NOCASE)<(LOWER(vt1.c0))))AND(x'73'))) ORDER BY (~ (CAST(vt1.c1 AS INTEGER))) ASC, (((vt1.c1, vt1.c0, -1122952596, vt1.c1)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)), ((vt1.c1)==(vt1.c0)), ((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)), ((vt1.c1)=(vt1.c0)))) AND ((HEX(vt1.c1), ('739392481' IN (vt1.c0)), vt1.c1 COLLATE BINARY, ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))))  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (CAST(((vt1.c1)|(vt1.c1)) AS REAL)) ORDER BY (~ (CAST(vt1.c1 AS INTEGER))) ASC, (((vt1.c1, vt1.c0, -1122952596, vt1.c1)) NOT BETWEEN ((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)), ((vt1.c1)==(vt1.c0)), ((((vt1.c0)AND(vt1.c1)))OR(vt1.c1)), ((vt1.c1)=(vt1.c0)))) AND ((HEX(vt1.c1), ('739392481' IN (vt1.c0)), vt1.c1 COLLATE BINARY, ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)))))  NULLS FIRST;
SELECT MAX(vt1.c1) FROM vt1 WHERE ((((('ZI')AND(vt1.c1)))OR(x'4f' COLLATE RTRIM))) ORDER BY ((((((((CASE WHEN NULL THEN '-1067114523' END)OR(((vt1.c1)LIKE(vt1.c1)))))OR(((((((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))AND(0.5982268731903875)))OR(vt1.c0)))OR(vt1.c0)))))AND('ry''1' COLLATE NOCASE)))AND('-1408674184')) DESC  NULLS LAST, ((CAST(vt1.c0 AS INTEGER)) NOT BETWEEN (((vt1.c1)OR(vt1.c0))) AND (((((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)))OR(vt1.c1)))), (~ ((NOT (vt1.c0)))) ASC  NULLS LAST;
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE ((((((('ZI')AND(vt1.c1)))OR(x'4f' COLLATE RTRIM)))AND(vt1.c0))) ORDER BY ((CAST(x'' AS TEXT))*(((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS FIRST, ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))+(((vt1.c0) NOT NULL))) ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (vt1.c0) ORDER BY ((CAST(x'' AS TEXT))*(((NULL) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS FIRST, ((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))+(((vt1.c0) NOT NULL))) ASC  NULLS FIRST LIMIT 0X2;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((vt1.c1)<=(vt1.c1)));
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((vt1.c1)=(vt1.c1))) LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (SQLITE_COMPILEOPTION_GET(((((vt1.c1)OR('hRyUZ쓯L!y')))OR(vt1.c1)))) LIMIT 0X1;
SELECT ALL MAX(v0.c1) FROM vt1, v0 WHERE (((IFNULL(v0.c2, vt1.c1)) BETWEEN (CASE vt1.c1  WHEN x'' THEN vt1.c1 END) AND (((((v0.c2)AND(NULL)))AND(v0.c1))))) ORDER BY (- (((((vt1.c1)AND(vt1.c0)))OR(x'253482')))) DESC;
SELECT DISTINCT MAX(v0.c1) FROM vt1, v0 WHERE (((IFNULL(v0.c2, vt1.c1)) BETWEEN (CASE vt1.c1  WHEN x'' THEN vt1.c1 END) AND (((((v0.c2)AND(NULL)))AND(v0.c1))))) ORDER BY (- (((((vt1.c1)AND(vt1.c0)))OR(x'253482')))) DESC;
SELECT ALL * FROM vt1, v0 WHERE (((v0.c1) ISNULL) COLLATE NOCASE);
SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c1) ISNULL) COLLATE NOCASE) ORDER BY (((v0.c0, v0.c1)) BETWEEN ((((vt1.c0) BETWEEN (v0.c0) AND (vt1.c0)), 0.749377915424492)) AND ((CASE v0.c2  WHEN v0.c1 THEN vt1.c0 END, ROUND(v0.c1, vt1.c1)))) ASC  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM vt1, v0 WHERE (((v0.c1) ISNULL) COLLATE NOCASE);
SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c1) ISNULL) COLLATE NOCASE) ORDER BY (((v0.c0, v0.c1)) BETWEEN ((((vt1.c0) BETWEEN (v0.c0) AND (vt1.c0)), 0.749377915424492)) AND ((CASE v0.c2  WHEN v0.c1 THEN vt1.c0 END, ROUND(v0.c1, vt1.c1)))) ASC  NULLS LAST LIMIT 0x2;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (CASE WHEN (NOT (vt1.c1)) THEN vt1.c1 WHEN ((vt1.c1) BETWEEN (vt1.c1) AND (v0.c0)) THEN (v0.c1 IN ()) END) ORDER BY v0.c0  NULLS LAST, ((COALESCE('P', v0.c2, vt1.c1)) IS FALSE), UPPER((((v0.c1)) BETWEEN ((v0.c0)) AND ((0.6807617454181298)))) DESC  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((CASE WHEN (NOT (vt1.c1)) THEN vt1.c1 WHEN ((vt1.c1) BETWEEN (vt1.c1) AND (v0.c0)) THEN (v0.c1 IN ()) END)AND(v0.c1))) ORDER BY CAST(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c1 END AS NUMERIC)  NULLS LAST, CASE ((x'') NOT BETWEEN (x'') AND (v0.c2))  WHEN (+ (v0.c0)) THEN ((v0.c2) NOTNULL) END ASC  NULLS LAST INTERSECT SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE ((vt1.c0 IN (v0.c0)) COLLATE BINARY) ORDER BY CAST(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c1 END AS NUMERIC)  NULLS LAST, CASE ((x'') NOT BETWEEN (x'') AND (v0.c2))  WHEN (+ (v0.c0)) THEN ((v0.c2) NOTNULL) END ASC  NULLS LAST;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (CASE WHEN (NOT (vt1.c1)) THEN vt1.c1 WHEN ((vt1.c1) BETWEEN (vt1.c1) AND (v0.c0)) THEN (v0.c1 IN ()) END) ORDER BY v0.c0  NULLS LAST, ((COALESCE('P', v0.c2, vt1.c1)) IS FALSE), UPPER((((v0.c1)) BETWEEN ((v0.c0)) AND ((0.6807617454181298)))) DESC  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE (((CASE WHEN (NOT (vt1.c1)) THEN vt1.c1 WHEN ((vt1.c1) BETWEEN (vt1.c1) AND (v0.c0)) THEN (v0.c1 IN ()) END)AND(v0.c1))) ORDER BY CAST(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c1 END AS NUMERIC)  NULLS LAST, CASE ((x'') NOT BETWEEN (x'') AND (v0.c2))  WHEN (+ (v0.c0)) THEN ((v0.c2) NOTNULL) END ASC  NULLS LAST INTERSECT SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE ((vt1.c0 IN (v0.c0)) COLLATE BINARY) ORDER BY CAST(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c1 END AS NUMERIC)  NULLS LAST, CASE ((x'') NOT BETWEEN (x'') AND (v0.c2))  WHEN (+ (v0.c0)) THEN ((v0.c2) NOTNULL) END ASC  NULLS LAST;
SELECT ALL MAX(v0.c1) FROM v0 LEFT OUTER JOIN vt1 ON (+ ((vt1.c1 IN (v0.c0)))) WHERE (CASE (v0.c2 IN (v0.c1, vt1.c1))  WHEN ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2)) THEN ((v0.c0)>=(x'78')) WHEN LIKELY(DISTINCT 0X18729ff1) THEN 0.9839973405412595 WHEN ((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c2)) THEN ((v0.c0) IS FALSE) ELSE LOWER(DISTINCT NULL) END);
SELECT MAX(v0.c1) FROM v0 LEFT OUTER JOIN vt1 ON (+ ((vt1.c1 IN (v0.c0)))) WHERE (CASE (v0.c2 IN (v0.c1))  WHEN ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c2)) THEN ((v0.c0)>=(x'78')) WHEN LIKELY(DISTINCT 0x18729ff1) THEN 0.9839973405412595 WHEN ((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c2)) THEN ((v0.c0) IS FALSE) ELSE LOWER(DISTINCT NULL) END) ORDER BY ((NULL) NOTNULL), v0.c1  NULLS LAST, (vt1.c1 IN (v0.c0)) COLLATE BINARY DESC  NULLS FIRST;
SELECT * FROM vt1 WHERE (TYPEOF(((vt1.c1) NOT NULL)));
SELECT DISTINCT * FROM vt1 WHERE (((TYPEOF(((vt1.c1) NOT NULL)))AND(((vt1.c0)IS NOT(vt1.c1)) COLLATE NOCASE))) ORDER BY vt1.c1 ASC;
SELECT * FROM vt1 WHERE (TYPEOF(((vt1.c1) NOT NULL)));
SELECT DISTINCT * FROM vt1 WHERE (((TYPEOF(((vt1.c1) NOT NULL)))AND(((vt1.c0)IS NOT(vt1.c1)) COLLATE NOCASE))) ORDER BY vt1.c1 ASC;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (CASE ((v0.c0) NOT NULL)  WHEN (('1348659418') ISNULL) THEN v0.c1 COLLATE NOCASE WHEN json_insert(0Xffffffffffa96b8f, vt1.c0, v0.c1, v0.c0, v0.c0, v0.c0) THEN CAST(v0.c1 AS NUMERIC) END);
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (CASE ((v0.c0) NOT NULL)  WHEN (('1348659418') ISNULL) THEN v0.c1 COLLATE NOCASE WHEN json_insert(0xffffffffffa96b8f, vt1.c0, v0.c1, v0.c0, v0.c0, v0.c0) THEN CAST(v0.c1 AS NUMERIC) END) LIMIT 0X2;
SELECT ALL * FROM vt1 WHERE (CASE WHEN SQLITE_COMPILEOPTION_GET(vt1.c0) THEN ((vt1.c1) ISNULL) WHEN (vt1.c1 IN ('-2090271456')) THEN (((vt1.c0, vt1.c1))>((vt1.c0, vt1.c1))) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN SQLITE_COMPILEOPTION_GET(vt1.c0) THEN ((vt1.c1) ISNULL) WHEN (vt1.c1 IN ('-2090271456')) THEN (((vt1.c0, vt1.c1))>((vt1.c0, vt1.c1))) END) ORDER BY 'ぱ韛㥥Y' ASC;
SELECT ALL * FROM vt1 WHERE (CASE WHEN SQLITE_COMPILEOPTION_GET(vt1.c0) THEN ((vt1.c1) ISNULL) WHEN (vt1.c1 IN ('-2090271456')) THEN (((vt1.c0, vt1.c1))>((vt1.c0, vt1.c1))) END);
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN SQLITE_COMPILEOPTION_GET(vt1.c0) THEN ((vt1.c1) ISNULL) WHEN (vt1.c1 IN ('-2090271456')) THEN (((vt1.c0, vt1.c1))>((vt1.c0, vt1.c1))) END) ORDER BY 'ぱ韛㥥Y' ASC;
SELECT * FROM v0 WHERE (DATE(((((v0.c1)AND(v0.c1)))AND(v0.c0)), ((v0.c0) NOT BETWEEN (v0.c0) AND (NULL)), CASE WHEN v0.c2 THEN v0.c2 WHEN x'' THEN v0.c1 END)) ORDER BY (((((v0.c1 IN (v0.c2)))OR((((v0.c1, v0.c2, v0.c2, v0.c0)) BETWEEN ((v0.c0, v0.c0, v0.c2, v0.c0)) AND ((v0.c1, v0.c0, v0.c1, v0.c0))))))OR(MAX(v0.c0, v0.c2))) ASC  NULLS FIRST, (((v0.c1)) BETWEEN (((((v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c1, v0.c0))))) AND (((((v0.c2, v0.c0, v0.c0))>((v0.c0, v0.c1, 0X5eafdce)))))) DESC  NULLS LAST, ((((((((((v0.c1)<<(v0.c0)))AND(CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END)))AND(v0.c2 COLLATE NOCASE)))OR(((v0.c2)|(0.8468494727646888)))))AND(((((((((v0.c2)OR(v0.c0)))OR(v0.c0)))OR('-652094336')))OR(v0.c0)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (DATE(((((v0.c1)AND(v0.c1)))AND(v0.c0)), ((v0.c0) NOT BETWEEN (v0.c0) AND (NULL)), CASE WHEN v0.c2 THEN v0.c2 WHEN x'' THEN v0.c1 END)) ORDER BY (((((v0.c2, v0.c0, v0.c0, v0.c0))==((v0.c2, '-1681891871', v0.c1, v0.c1))))%(json_extract(v0.c1, v0.c1)))  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0 WHERE (DATE(((((v0.c1)AND(v0.c1)))AND(v0.c0)), ((v0.c0) NOT BETWEEN (v0.c0) AND (NULL)), CASE WHEN v0.c2 THEN v0.c2 WHEN x'' THEN v0.c1 END)) ORDER BY (((((v0.c1 IN (v0.c2)))OR((((v0.c1, v0.c2, v0.c2, v0.c0)) BETWEEN ((v0.c0, v0.c0, v0.c2, v0.c0)) AND ((v0.c1, v0.c0, v0.c1, v0.c0))))))OR(MAX(v0.c0, v0.c2))) ASC  NULLS FIRST, (((v0.c1)) BETWEEN (((((v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c1, v0.c0))))) AND (((((v0.c2, v0.c0, v0.c0))>((v0.c0, v0.c1, 0X5eafdce)))))) DESC  NULLS LAST, ((((((((((v0.c1)<<(v0.c0)))AND(CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END)))AND(v0.c2 COLLATE NOCASE)))OR(((v0.c2)|(0.8468494727646888)))))AND(((((((((v0.c2)OR(v0.c0)))OR(v0.c0)))OR('-652094336')))OR(v0.c0)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (DATE(((((v0.c1)AND(v0.c1)))AND(v0.c0)), ((v0.c0) NOT BETWEEN (v0.c0) AND (NULL)), CASE WHEN v0.c2 THEN v0.c2 WHEN x'' THEN v0.c1 END)) ORDER BY (((((v0.c2, v0.c0, v0.c0, v0.c0))==((v0.c2, '-1681891871', v0.c1, v0.c1))))%(json_extract(v0.c1, v0.c1)))  NULLS FIRST LIMIT 0X0;
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE ((((((v0.c2, v0.c0)) BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c1, NULL))))==(((v0.c0) NOT BETWEEN (x'54') AND (v0.c2))))) ORDER BY COALESCE(v0.c1, vt1.c1, 0.9629702342207657, vt1.c1) COLLATE NOCASE;
SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE ((((((v0.c2, v0.c0)) BETWEEN ((v0.c0, vt1.c0)) AND ((vt1.c1, NULL))))==(((v0.c0) NOT BETWEEN (x'54') AND (v0.c2))))) ORDER BY ((vt1.c0)>=(vt1.c1)) COLLATE NOCASE  NULLS LAST INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (((((0.23644326837195873) BETWEEN (vt1.c0) AND (vt1.c0))) BETWEEN (((v0.c1)*(v0.c2))) AND (CAST(v0.c0 AS NUMERIC)))) ORDER BY ((vt1.c0)>=(vt1.c1)) COLLATE NOCASE  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((CAST(x'30' AS BLOB))OR(HEX(DISTINCT vt1.c1))))OR('R财w' COLLATE NOCASE)));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((((CAST(x'30' AS BLOB))OR(HEX(DISTINCT vt1.c1))))OR('R财w' COLLATE NOCASE)))AND(0.22845794843892375))) ORDER BY (((v0.c2, v0.c1, vt1.c1))>=((vt1.c0, v0.c0, vt1.c1))) COLLATE BINARY  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((0.8788821207086155)||('~'))) ORDER BY (((v0.c2, v0.c1, vt1.c1))>=((vt1.c0, v0.c0, vt1.c1))) COLLATE BINARY  NULLS FIRST;
SELECT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE (((v0.c1)>>(((v0.c2) NOTNULL)))) ORDER BY (((((+ (v0.c1)))AND(('-346277470' IN ()))))AND(CAST(v0.c1 AS REAL))) ASC  NULLS FIRST, CASE WHEN CASE WHEN v0.c0 THEN vt1.c1 END THEN CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN NULL ELSE v0.c1 END WHEN LIKELIHOOD(v0.c2, x'dba587') THEN (((v0.c0, v0.c1, v0.c0, vt1.c1))>=((vt1.c0, v0.c1, vt1.c0, vt1.c1))) ELSE CAST(v0.c0 AS TEXT) END, ((v0.c0)GLOB(CAST(v0.c0 AS NUMERIC)))  NULLS FIRST;
SELECT ALL * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE (((v0.c1)>>(((v0.c2) NOTNULL)))) ORDER BY CAST(CASE WHEN x'0b' THEN v0.c0 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 END AS NUMERIC)  NULLS LAST, UNLIKELY(v0.c0) LIMIT 0 INTERSECT SELECT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE (NULL) ORDER BY CAST(CASE WHEN x'0b' THEN v0.c0 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 WHEN v0.c1 THEN vt1.c1 END AS NUMERIC)  NULLS LAST, UNLIKELY(v0.c0) LIMIT 0;
SELECT * FROM vt1 INNER JOIN v0 ON vt1.c1 WHERE (((v0.c1)>>(((v0.c2) NOTNULL)))) ORDER BY (((((+ (v0.c1)))AND(('-346277470' IN ()))))AND(CAST(v0.c1 AS REAL))) ASC  NULLS FIRST, CASE WHEN CASE WHEN v0.c0 THEN vt1.c1 END THEN CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN NULL ELSE v0.c1 END WHEN LIKELIHOOD(v0.c2, x'dba587') THEN (((v0.c0, v0.c1, v0.c0, vt1.c1))>=((vt1.c0, v0.c1, vt1.c0, vt1.c1))) ELSE CAST(v0.c0 AS TEXT) END, ((v0.c0)GLOB(CAST(v0.c0 AS NUMERIC)))  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((((v0.c1)AND(0.08152117199985887)))OR(CAST(v0.c1 AS INTEGER))))AND(CAST(v0.c2 AS TEXT)))) ORDER BY ((v0.c0)>=(v0.c1)) COLLATE RTRIM, CAST(v0.c2 AS BLOB) COLLATE RTRIM ASC;
SELECT ALL * FROM v0 WHERE (((((((v0.c1)AND(0.08152117199985887)))OR(CAST(v0.c1 AS INTEGER))))AND(CAST(v0.c2 AS TEXT)))) ORDER BY ((((v0.c1)IS NOT(v0.c0))) NOT BETWEEN (((v0.c1)&('-335313520'))) AND ('jw'))  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE ((((((v0.c1 IN ()))OR((((v0.c1, '924493930', v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((v0.c1, v0.c2, v0.c1))))))OR(v0.c0))) ORDER BY ((((v0.c1)IS NOT(v0.c0))) NOT BETWEEN (((v0.c1)&('-335313520'))) AND ('jw'))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((((v0.c1)AND(0.08152117199985887)))OR(CAST(v0.c1 AS INTEGER))))AND(CAST(v0.c2 AS TEXT)))) ORDER BY ((v0.c0)>=(v0.c1)) COLLATE RTRIM, CAST(v0.c2 AS BLOB) COLLATE RTRIM ASC;
SELECT ALL * FROM v0 WHERE (((((((v0.c1)AND(0.08152117199985887)))OR(CAST(v0.c1 AS INTEGER))))AND(CAST(v0.c2 AS TEXT)))) ORDER BY ((((v0.c1)IS NOT(v0.c0))) NOT BETWEEN (((v0.c1)&('-335313520'))) AND ('jw'))  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE ((((((v0.c1 IN ()))OR((((v0.c1, '924493930', v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((v0.c1, v0.c2, v0.c1))))))OR(v0.c0))) ORDER BY ((((v0.c1)IS NOT(v0.c0))) NOT BETWEEN (((v0.c1)&('-335313520'))) AND ('jw'))  NULLS LAST;
SELECT COUNT(*) FROM v0 WHERE ((((NOT (v0.c1)))/(v0.c2 COLLATE NOCASE))) ORDER BY (((((((((v0.c2, v0.c0, v0.c0))=((v0.c2, 0.7152629723512527, 1863475153))))AND((v0.c0 IN (v0.c0)))))AND(0.9042344295131168 COLLATE RTRIM)))AND(CAST(v0.c2 AS REAL)))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((((NOT (v0.c1)))/(v0.c2 COLLATE NOCASE)))AND(((((v0.c0)<(v0.c2))) IS FALSE)))) ORDER BY (((((((((v0.c2, v0.c0, v0.c0))=((v0.c2, 0.7152629723512527, 1863475153))))AND((v0.c0 IN (v0.c0)))))AND(0.9042344295131168 COLLATE RTRIM)))AND(CAST(v0.c2 AS REAL)))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((-754420898) NOT BETWEEN (v0.c0) AND (v0.c1)) COLLATE RTRIM) ORDER BY (((((((((v0.c2, v0.c0, v0.c0))==((v0.c2, 0.7152629723512527, 1863475153))))AND((v0.c0 IN (v0.c0)))))AND(0.9042344295131168 COLLATE RTRIM)))AND(CAST(v0.c2 AS REAL)))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((~ (json_type(vt1.c0)))) ORDER BY vt1.c0  NULLS LAST, ((((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))) IN ()) DESC;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((~ (json_type(vt1.c0)))) ORDER BY vt1.c0  NULLS LAST, ((((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))) IN ()) DESC;
SELECT COUNT(*) FROM vt1, v0 WHERE (((((((vt1.c1)AND(vt1.c1)))OR(v0.c1))) IS TRUE)) ORDER BY (((((vt1.c0, v0.c2))>((vt1.c1, v0.c0)))) IS FALSE) DESC  NULLS FIRST, ((ROUND(v0.c0, v0.c2))LIKE((((v0.c0, v0.c2, vt1.c1)) BETWEEN ((v0.c0, v0.c2, vt1.c1)) AND ((vt1.c1, 0.6222988175442686, vt1.c1))))) DESC, (((((((((v0.c0 IN (v0.c2)))AND(LIKELIHOOD(v0.c2, v0.c1))))AND(((vt1.c1)<=(vt1.c1)))))AND(((((((vt1.c0)AND(v0.c0)))OR(v0.c1)))OR(vt1.c1)))))OR(CAST(vt1.c0 AS INTEGER)));
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (((((((vt1.c1)AND(vt1.c1)))OR(v0.c1))) IS TRUE)) ORDER BY (((((((((vt1.c1)AND(v0.c0)))OR(vt1.c0)))OR(vt1.c1)), v0.c1))<((((x'') ISNULL), CAST(v0.c1 AS REAL)))) INTERSECT SELECT COUNT(*) FROM vt1, v0 WHERE (((((vt1.c0) NOT NULL)) NOT BETWEEN (((((((vt1.c1)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c1))) AND (((v0.c0) NOT BETWEEN (vt1.c0) AND (''))))) ORDER BY (((((((((vt1.c1)AND(v0.c0)))OR(vt1.c0)))OR(vt1.c1)), v0.c1))<((((x'') ISNULL), CAST(v0.c1 AS REAL))));
SELECT * FROM v0 WHERE (CAST(x'12' AS REAL));
SELECT DISTINCT * FROM v0 WHERE (((CAST(x'12' AS REAL))AND((NOT (((((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))AND(v0.c1)))OR(v0.c2)))OR(v0.c1)))))));
SELECT * FROM v0 WHERE (CAST(x'12' AS REAL));
SELECT DISTINCT * FROM v0 WHERE (((CAST(x'12' AS REAL))AND((NOT (((((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))AND(v0.c1)))OR(v0.c2)))OR(v0.c1)))))));
SELECT ALL * FROM vt1 WHERE (CASE WHEN 4.48962842E8 THEN ((vt1.c1)>=(vt1.c1)) END) ORDER BY CAST((((vt1.c1, vt1.c1, vt1.c1)) BETWEEN ((vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1, vt1.c0))) AS REAL);
SELECT ALL * FROM vt1 WHERE (CASE WHEN 4.48962842E8 THEN ((vt1.c1)>(vt1.c1)) END) ORDER BY ((((((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))AND((((0.3055865370394447)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))))AND((NOT (vt1.c1)))))OR(((vt1.c0)AND(vt1.c0)))) LIMIT 0X1 INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c0) NOTNULL)) NOT NULL)) ORDER BY ((((((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))AND((((0.3055865370394447)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))))AND((NOT (vt1.c1)))))OR(((vt1.c0)AND(vt1.c0)))) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (CASE WHEN 4.48962842E8 THEN ((vt1.c1)>=(vt1.c1)) END) ORDER BY CAST((((vt1.c1, vt1.c1, vt1.c1)) BETWEEN ((vt1.c1, vt1.c1, vt1.c0)) AND ((vt1.c1, vt1.c1, vt1.c0))) AS REAL);
SELECT ALL * FROM vt1 WHERE (CASE WHEN 4.48962842E8 THEN ((vt1.c1)>(vt1.c1)) END) ORDER BY ((((((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))AND((((0.3055865370394447)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))))AND((NOT (vt1.c1)))))OR(((vt1.c0)AND(vt1.c0)))) LIMIT 0X1 INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c0) NOTNULL)) NOT NULL)) ORDER BY ((((((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))AND((((0.3055865370394447)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))))AND((NOT (vt1.c1)))))OR(((vt1.c0)AND(vt1.c0)))) LIMIT 1;
SELECT ALL * FROM v0 WHERE (((x'5584d9')<(((v0.c2)|(v0.c2))))) ORDER BY CASE ((v0.c1) BETWEEN (v0.c1) AND (v0.c0))  WHEN IFNULL(v0.c2, v0.c2) THEN ((((v0.c2)OR(v0.c2)))OR(v0.c0)) END;
SELECT DISTINCT * FROM v0 WHERE (((((x'5584d9')<(((v0.c2)|(v0.c2)))))AND(IFNULL((v0.c2 IN (v0.c1)), ((((v0.c0)OR(v0.c0)))OR(v0.c2)))))) ORDER BY (((((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c0, v0.c2)))) BETWEEN ('-1432416200') AND (((v0.c0)!=(v0.c0))))  NULLS LAST, CAST(NULL AS REAL) LIMIT 0;
SELECT ALL * FROM v0 WHERE (((x'5584d9')<(((v0.c2)|(v0.c2))))) ORDER BY CASE ((v0.c1) BETWEEN (v0.c1) AND (v0.c0))  WHEN IFNULL(v0.c2, v0.c2) THEN ((((v0.c2)OR(v0.c2)))OR(v0.c0)) END;
SELECT DISTINCT * FROM v0 WHERE (((((x'5584d9')<(((v0.c2)|(v0.c2)))))AND(IFNULL((v0.c2 IN (v0.c1)), ((((v0.c0)OR(v0.c0)))OR(v0.c2)))))) ORDER BY (((((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c0, v0.c2)))) BETWEEN ('-1432416200') AND (((v0.c0)!=(v0.c0))))  NULLS LAST, CAST(NULL AS REAL) LIMIT 0;
SELECT MIN(v0.c1) FROM vt1, v0 WHERE (((((v0.c0)+(v0.c2))) BETWEEN ((NOT (vt1.c1))) AND (((v0.c0)&(v0.c1)))));
SELECT MIN(v0.c1) FROM vt1, v0 WHERE (((((((v0.c0)+(v0.c2))) BETWEEN ((NOT (vt1.c1))) AND (((v0.c0)&(v0.c1)))))AND(((((((v0.c0)AND(v0.c2)))AND(v0.c1))) NOT NULL)))) ORDER BY CAST(v0.c1 AS REAL) COLLATE NOCASE DESC  NULLS FIRST, ((((((v0.c0)AND(vt1.c0)))AND(v0.c2))) BETWEEN (CASE WHEN v0.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END) AND (((vt1.c0)>=(vt1.c0)))) LIMIT 2;
SELECT COUNT(*) FROM v0 WHERE ((((v0.c2))==((v0.c0))) COLLATE BINARY) ORDER BY ((NULL) NOTNULL) DESC, ((CAST(v0.c0 AS INTEGER))<>((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))))) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE ((((v0.c2))=((v0.c0))) COLLATE BINARY) ORDER BY ((NULL) NOTNULL) DESC, ((CAST(v0.c0 AS INTEGER))!=((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))))) DESC  NULLS LAST LIMIT 0x2 INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c1) NOTNULL))LIKE((NOT (v0.c0))))) ORDER BY ((NULL) NOTNULL) DESC, ((CAST(v0.c0 AS INTEGER))!=((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))))) DESC  NULLS LAST LIMIT 2;
SELECT * FROM v0, vt1 WHERE (((((vt1.c0) ISNULL)) ISNULL));
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c0) ISNULL)) ISNULL)) ORDER BY (((+ (vt1.c0)))/(((v0.c0) IS TRUE))) ASC  NULLS LAST, SQLITE_COMPILEOPTION_GET(x'') DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL * FROM v0, vt1 WHERE (vt1.c1) ORDER BY (((+ (vt1.c0)))/(((v0.c0) IS TRUE))) ASC  NULLS LAST, SQLITE_COMPILEOPTION_GET(x'') DESC  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt1 WHERE (((((vt1.c0) ISNULL)) ISNULL));
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c0) ISNULL)) ISNULL)) ORDER BY (((+ (vt1.c0)))/(((v0.c0) IS TRUE))) ASC  NULLS LAST, SQLITE_COMPILEOPTION_GET(x'') DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL * FROM v0, vt1 WHERE (vt1.c1) ORDER BY (((+ (vt1.c0)))/(((v0.c0) IS TRUE))) ASC  NULLS LAST, SQLITE_COMPILEOPTION_GET(x'') DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (((0Xffffffff94263965) NOTNULL));
SELECT DISTINCT * FROM vt1, v0 WHERE (((((-1809434267) NOTNULL))AND((((v0.c0 IN (v0.c0))) NOTNULL)))) ORDER BY ((v0.c1 COLLATE BINARY) IS FALSE), (((v0.c1, (v0.c0 IN ()), v0.c1))>=(((((v0.c2, v0.c0, v0.c1)) NOT BETWEEN ((vt1.c1, v0.c0, vt1.c1)) AND ((vt1.c0, vt1.c0, x'3e'))), ((vt1.c1)||(v0.c1)), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 NOT INDEXED, v0 WHERE (((((((vt1.c1)OR(vt1.c1)))AND(v0.c0)))||('-1364915766'))) ORDER BY ((v0.c1 COLLATE BINARY) IS FALSE), (((v0.c1, (v0.c0 IN ()), v0.c1))>=(((((v0.c2, v0.c0, v0.c1)) NOT BETWEEN ((vt1.c1, v0.c0, vt1.c1)) AND ((vt1.c0, vt1.c0, x'3e'))), ((vt1.c1)||(v0.c1)), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)))))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (((0Xffffffff94263965) NOTNULL));
SELECT DISTINCT * FROM vt1, v0 WHERE (((((-1809434267) NOTNULL))AND((((v0.c0 IN (v0.c0))) NOTNULL)))) ORDER BY ((v0.c1 COLLATE BINARY) IS FALSE), (((v0.c1, (v0.c0 IN ()), v0.c1))>=(((((v0.c2, v0.c0, v0.c1)) NOT BETWEEN ((vt1.c1, v0.c0, vt1.c1)) AND ((vt1.c0, vt1.c0, x'3e'))), ((vt1.c1)||(v0.c1)), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1 NOT INDEXED, v0 WHERE (((((((vt1.c1)OR(vt1.c1)))AND(v0.c0)))||('-1364915766'))) ORDER BY ((v0.c1 COLLATE BINARY) IS FALSE), (((v0.c1, (v0.c0 IN ()), v0.c1))>=(((((v0.c2, v0.c0, v0.c1)) NOT BETWEEN ((vt1.c1, v0.c0, vt1.c1)) AND ((vt1.c0, vt1.c0, x'3e'))), ((vt1.c1)||(v0.c1)), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)))))  NULLS FIRST;
SELECT ALL MAX(vt1.c0) FROM vt1, v0 WHERE (v0.c0) ORDER BY CAST(((v0.c1)IS NOT(v0.c2)) AS INTEGER) ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1, v0 WHERE (((v0.c0)AND((((vt1.c1, v0.c0, v0.c0)) NOT BETWEEN ((LTRIM(vt1.c1), (v0.c2 IN ()), NULLIF(DISTINCT v0.c2, vt1.c0))) AND ((((v0.c2) BETWEEN (vt1.c1) AND (v0.c2)), (((((((('0.6193369905808567')OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)), v0.c0)))))) ORDER BY v0.c0 ASC  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE ((((TRIM(v0.c1)))=((v0.c1))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((TRIM(v0.c1)))=((v0.c1))))AND(ABS(DISTINCT CASE '-130381765'  WHEN v0.c0 THEN vt1.c1 WHEN '-329626109' THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END)))) ORDER BY (~ ((((v0.c1, v0.c2, v0.c2, v0.c2)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) AND ((v0.c1, v0.c0, v0.c2, vt1.c0))))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CASE WHEN 0.20726899233794427 THEN ((v0.c1)OR(v0.c2)) WHEN ((vt1.c0) BETWEEN (v0.c1) AND (vt1.c1)) THEN (NOT (v0.c0)) ELSE ((v0.c1)<=(v0.c2)) END) ORDER BY (~ ((((v0.c1, v0.c2, v0.c2, v0.c2)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) AND ((v0.c1, v0.c0, v0.c2, vt1.c0))))) LIMIT 0X1;
SELECT ALL * FROM v0, vt1 WHERE ((((TRIM(v0.c1)))=((v0.c1))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((TRIM(v0.c1)))=((v0.c1))))AND(ABS(DISTINCT CASE '-130381765'  WHEN v0.c0 THEN vt1.c1 WHEN '-329626109' THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END)))) ORDER BY (~ ((((v0.c1, v0.c2, v0.c2, v0.c2)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) AND ((v0.c1, v0.c0, v0.c2, vt1.c0))))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (CASE WHEN 0.20726899233794427 THEN ((v0.c1)OR(v0.c2)) WHEN ((vt1.c0) BETWEEN (v0.c1) AND (vt1.c1)) THEN (NOT (v0.c0)) ELSE ((v0.c1)<=(v0.c2)) END) ORDER BY (~ ((((v0.c1, v0.c2, v0.c2, v0.c2)) BETWEEN ((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) AND ((v0.c1, v0.c0, v0.c2, vt1.c0))))) LIMIT 0X1;
SELECT MAX(v0.c0) FROM v0, vt1 WHERE (((((((v0.c0)OR(((v0.c0)OR(v0.c0)))))AND(LOWER(v0.c1))))OR(CASE vt1.c1  WHEN v0.c2 THEN vt1.c0 WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)));
SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE (((((((v0.c0)OR(((v0.c0)OR(v0.c0)))))AND(LOWER(v0.c1))))OR(CASE vt1.c1  WHEN v0.c2 THEN vt1.c0 WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END))) LIMIT 5 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE (CAST(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)) AS INTEGER)) LIMIT 0x5;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN vt1.c1 END IN ())) ORDER BY (~ (v0.c0)) DESC, ((((((((v0.c2) NOT NULL))AND((((v0.c2))>((0.946725225149647))))))AND(LIKELY(0.11281876724272333))))AND(((v0.c1)>(v0.c1)))) ASC, (((v0.c0, '0.8392803826547917', v0.c1)) BETWEEN ((((vt1.c1) NOT NULL), ((v0.c0) NOTNULL), ((v0.c0)-(v0.c2)))) AND ((CASE vt1.c0  WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN '929445258' WHEN vt1.c1 THEN '1078460267' WHEN v0.c1 THEN v0.c2 ELSE vt1.c0 END, ((vt1.c0) NOTNULL), ((vt1.c0)IS(v0.c2)))));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((((CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN vt1.c1 END IN ()))AND((+ (json_array(v0.c1, v0.c0, vt1.c0)))))) ORDER BY ((CAST(vt1.c0 AS REAL)) NOTNULL)  NULLS LAST, ((- (v0.c1)) IN (LIKELIHOOD(NULL, v0.c1))) DESC, (+ ((((v0.c0, vt1.c0)) BETWEEN ((v0.c2, vt1.c0)) AND ((vt1.c0, v0.c2))))) DESC, ((v0.c1)||(vt1.c0)) COLLATE NOCASE DESC  NULLS LAST LIMIT 3 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (CASE WHEN '0.7476133037444082' THEN x'f8' WHEN CASE WHEN vt1.c0 THEN v0.c2 WHEN v0.c0 THEN vt1.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 END THEN ((vt1.c1)>(v0.c0)) END) ORDER BY ((CAST(vt1.c0 AS REAL)) NOTNULL)  NULLS LAST, ((- (v0.c1)) IN (LIKELIHOOD(NULL, v0.c1))) DESC, (+ ((((v0.c0, vt1.c0)) BETWEEN ((v0.c2, vt1.c0)) AND ((vt1.c0, v0.c2))))) DESC, ((v0.c1)||(vt1.c0)) COLLATE NOCASE DESC  NULLS LAST LIMIT 0X3;
SELECT ALL * FROM v0 WHERE ((((v0.c1) NOTNULL) IN ())) ORDER BY ((('Xb1̩R' IN ())) BETWEEN (json_quote(v0.c1)) AND (CASE WHEN x'6852' THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END))  NULLS FIRST;
SELECT * FROM v0 WHERE ((((v0.c1) NOTNULL) IN ())) ORDER BY ((('Xb1̩R' IN ())) BETWEEN (json_quote(v0.c1)) AND (CASE WHEN x'6852' THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END))  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE (v0.c0) ORDER BY ((('Xb1̩R' IN ())) BETWEEN (json_quote(v0.c1)) AND (CASE WHEN x'6852' THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END))  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((((v0.c1) NOTNULL) IN ())) ORDER BY ((('Xb1̩R' IN ())) BETWEEN (json_quote(v0.c1)) AND (CASE WHEN x'6852' THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END))  NULLS FIRST;
SELECT * FROM v0 WHERE ((((v0.c1) NOTNULL) IN ())) ORDER BY ((('Xb1̩R' IN ())) BETWEEN (json_quote(v0.c1)) AND (CASE WHEN x'6852' THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END))  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE (v0.c0) ORDER BY ((('Xb1̩R' IN ())) BETWEEN (json_quote(v0.c1)) AND (CASE WHEN x'6852' THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END))  NULLS FIRST;
SELECT * FROM v0 WHERE (((CAST(v0.c0 AS INTEGER))AND(v0.c1))) ORDER BY ((((v0.c2) NOTNULL))LIKE(((((v0.c1)OR(v0.c1)))AND(v0.c1)))) ASC  NULLS FIRST, v0.c0 DESC, ((~ (v0.c0)) IN ())  NULLS FIRST, ((v0.c2 COLLATE NOCASE)||(((v0.c2) IS FALSE)))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c0 AS INTEGER))AND(v0.c1))) ORDER BY (~ (((v0.c2) BETWEEN (3.2506213E7) AND (v0.c2)))) ASC  NULLS FIRST, UNLIKELY(DISTINCT ((v0.c0)AND(NULL)))  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (x'5ef764') ORDER BY (~ (((v0.c2) BETWEEN (3.2506213E7) AND (v0.c2)))) ASC  NULLS FIRST, UNLIKELY(DISTINCT ((v0.c0)AND(NULL)))  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0 WHERE (((CAST(v0.c0 AS INTEGER))AND(v0.c1))) ORDER BY ((((v0.c2) NOTNULL))LIKE(((((v0.c1)OR(v0.c1)))AND(v0.c1)))) ASC  NULLS FIRST, v0.c0 DESC, ((~ (v0.c0)) IN ())  NULLS FIRST, ((v0.c2 COLLATE NOCASE)||(((v0.c2) IS FALSE)))  NULLS LAST;
SELECT * FROM vt1 NOT INDEXED, v0 WHERE ((((vt1.c1 IN ())) NOT BETWEEN (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END) AND (((-1.791157238E9) NOT BETWEEN (v0.c1) AND (vt1.c1)))));
SELECT ALL * FROM vt1, v0 WHERE ((((vt1.c1 IN ())) NOT BETWEEN (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END) AND (((-1.791157238E9) NOT BETWEEN (v0.c1) AND (vt1.c1))))) ORDER BY ((vt1.c0)<(((vt1.c0) BETWEEN (vt1.c0) AND (v0.c2)))), CAST(((vt1.c0)==(NULL)) AS BLOB) LIMIT 4;
SELECT * FROM vt1 NOT INDEXED, v0 WHERE ((((vt1.c1 IN ())) NOT BETWEEN (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END) AND (((-1.791157238E9) NOT BETWEEN (v0.c1) AND (vt1.c1)))));
SELECT ALL * FROM vt1, v0 WHERE ((((vt1.c1 IN ())) NOT BETWEEN (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END) AND (((-1.791157238E9) NOT BETWEEN (v0.c1) AND (vt1.c1))))) ORDER BY ((vt1.c0)<(((vt1.c0) BETWEEN (vt1.c0) AND (v0.c2)))), CAST(((vt1.c0)==(NULL)) AS BLOB) LIMIT 4;
SELECT * FROM vt1, v0 WHERE ((+ (CASE v0.c2  WHEN v0.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END))) ORDER BY ((('1468832677') NOTNULL) IN ()) ASC  NULLS FIRST, CASE v0.c0 COLLATE NOCASE  WHEN (- (NULL)) THEN ((vt1.c1)>>(0Xb053e98)) ELSE (+ (vt1.c1)) END;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((+ (CASE v0.c2  WHEN v0.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END)))AND(((v0.c1 IN ()) IN ())))) ORDER BY ((('1468832677') NOTNULL) IN ()) ASC  NULLS FIRST, CASE v0.c0 COLLATE NOCASE  WHEN (- (NULL)) THEN ((vt1.c1)>>(184893080)) ELSE (+ (vt1.c1)) END LIMIT 0x1;
SELECT * FROM vt1, v0 WHERE ((+ (CASE v0.c2  WHEN v0.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 END))) ORDER BY ((('1468832677') NOTNULL) IN ()) ASC  NULLS FIRST, CASE v0.c0 COLLATE NOCASE  WHEN (- (NULL)) THEN ((vt1.c1)>>(0Xb053e98)) ELSE (+ (vt1.c1)) END;
SELECT ALL * FROM v0 WHERE (((((((CAST(v0.c1 AS NUMERIC))AND(((v0.c1)<(v0.c0)))))OR(v0.c2)))OR((v0.c2 IN ())))) ORDER BY (+ (((((v0.c0)AND(v0.c1)))OR(v0.c1)))), CASE WHEN v0.c0 THEN v0.c2 ELSE CASE v0.c2  WHEN v0.c2 THEN v0.c0 ELSE x'' END END ASC  NULLS FIRST;
SELECT * FROM v0 WHERE (((((((CAST(v0.c1 AS NUMERIC))AND(((v0.c1)<(v0.c0)))))OR(v0.c2)))OR((v0.c2 IN ())))) ORDER BY ((v0.c1 COLLATE BINARY) BETWEEN (NULL) AND (((v0.c1) NOT NULL)))  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM v0 WHERE (((((((((((x'')OR(v0.c0 COLLATE NOCASE)))AND(((0.8680073330485446)>(v0.c0)))))AND(v0.c0)))AND((~ (v0.c1)))))OR(CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END))) ORDER BY ((v0.c1 COLLATE BINARY) BETWEEN (NULL) AND (((v0.c1) NOT NULL)))  NULLS LAST LIMIT 1;
SELECT ALL * FROM v0 WHERE (((((((CAST(v0.c1 AS NUMERIC))AND(((v0.c1)<(v0.c0)))))OR(v0.c2)))OR((v0.c2 IN ())))) ORDER BY (+ (((((v0.c0)AND(v0.c1)))OR(v0.c1)))), CASE WHEN v0.c0 THEN v0.c2 ELSE CASE v0.c2  WHEN v0.c2 THEN v0.c0 ELSE x'' END END ASC  NULLS FIRST;
SELECT * FROM v0 WHERE (((((((CAST(v0.c1 AS NUMERIC))AND(((v0.c1)<(v0.c0)))))OR(v0.c2)))OR((v0.c2 IN ())))) ORDER BY ((v0.c1 COLLATE BINARY) BETWEEN (NULL) AND (((v0.c1) NOT NULL)))  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM v0 WHERE (((((((((((x'')OR(v0.c0 COLLATE NOCASE)))AND(((0.8680073330485446)>(v0.c0)))))AND(v0.c0)))AND((~ (v0.c1)))))OR(CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END))) ORDER BY ((v0.c1 COLLATE BINARY) BETWEEN (NULL) AND (((v0.c1) NOT NULL)))  NULLS LAST LIMIT 1;
SELECT * FROM vt1 WHERE (vt1.c1);
SELECT DISTINCT * FROM vt1 WHERE (vt1.c1) ORDER BY ((((((((vt1.c0 COLLATE BINARY)AND(vt1.c1)))OR((((vt1.c1))<=((vt1.c1))))))OR(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END)))OR(LOWER(vt1.c1))), ((((vt1.c0) ISNULL))%((+ (vt1.c0)))) DESC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt1 WHERE (vt1.c1);
SELECT DISTINCT * FROM vt1 WHERE (vt1.c1) ORDER BY ((((((((vt1.c0 COLLATE BINARY)AND(vt1.c1)))OR((((vt1.c1))<=((vt1.c1))))))OR(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END)))OR(LOWER(vt1.c1))), ((((vt1.c0) ISNULL))%((+ (vt1.c0)))) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END COLLATE BINARY);
SELECT COUNT(*) FROM vt1 WHERE (((CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END COLLATE BINARY)AND((((((vt1.c0, -159471378)) BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c0))))<<((vt1.c0 IN ())))))) INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (((CAST(0.3964386569366736 AS NUMERIC)) BETWEEN (CAST(-1119740992 AS REAL)) AND (((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)))));
SELECT ALL MIN(v0.c2) FROM v0 WHERE (CAST(((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) AS TEXT));
SELECT MIN(v0.c2) FROM v0 WHERE (((CAST(((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) AS TEXT))AND(TRIM(DISTINCT (v0.c0 IN (v0.c0, 768350880)), LIKELIHOOD(v0.c0, v0.c2))))) INTERSECT SELECT ALL MIN(v0.c2) FROM v0 WHERE ((((v0.c1, v0.c2, v0.c2, v0.c0)) BETWEEN (((- (v0.c1)), '͒', ((v0.c0)IS(v0.c0)), ((NULL) BETWEEN (x'6f') AND (v0.c1)))) AND ((((v0.c2) BETWEEN (0.3624545371523149) AND (v0.c1)), ((v0.c1)IS(v0.c2)), v0.c1 COLLATE RTRIM, json_object(v0.c2, v0.c2)))));
SELECT ALL MAX(vt1.c0) FROM v0, vt1 WHERE (CASE WHEN vt1.c1 COLLATE NOCASE THEN TYPEOF(v0.c1) END);
SELECT MAX(vt1.c0) FROM v0, vt1 WHERE (CASE WHEN vt1.c1 COLLATE NOCASE THEN TYPEOF(v0.c1) END) ORDER BY CAST(vt1.c0 AS REAL) COLLATE BINARY  NULLS FIRST, (((v0.c0))>=((vt1.c1))) COLLATE BINARY DESC, ((HEX(v0.c2))IS(((v0.c0)AND(v0.c1)))) ASC  NULLS FIRST INTERSECT SELECT MAX(vt1.c0) FROM v0, vt1 WHERE ('2083390678') ORDER BY CAST(vt1.c0 AS REAL) COLLATE BINARY  NULLS FIRST, (((v0.c0))>=((vt1.c1))) COLLATE BINARY DESC, ((HEX(v0.c2))IS(((v0.c0)AND(v0.c1)))) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((((((v0.c2 IN ()))OR(((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))AND(v0.c0)));
SELECT ALL * FROM v0 WHERE ((((((((v0.c2 IN ()))OR(((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))AND(v0.c0)))AND(((((v0.c0)-(v0.c1)))IS(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0))))))) ORDER BY 0.1334223390319471 ASC  NULLS FIRST, CASE v0.c1  WHEN (v0.c2 IN ()) THEN (('dးj') ISNULL) WHEN '1442875225' THEN (((v0.c1, v0.c1, v0.c1))<=((v0.c0, v0.c0, v0.c2))) WHEN ((v0.c2)<=(v0.c2)) THEN (+ (v0.c1)) END DESC  NULLS FIRST, (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE 'Y' END IN (((v0.c1)>=(v0.c1)))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0 WHERE ((((((v0.c2 IN ()))OR(((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))AND(v0.c0)));
SELECT ALL * FROM v0 WHERE ((((((((v0.c2 IN ()))OR(((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))AND(v0.c0)))AND(((((v0.c0)-(v0.c1)))IS(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0))))))) ORDER BY 0.1334223390319471 ASC  NULLS FIRST, CASE v0.c1  WHEN (v0.c2 IN ()) THEN (('dးj') ISNULL) WHEN '1442875225' THEN (((v0.c1, v0.c1, v0.c1))<=((v0.c0, v0.c0, v0.c2))) WHEN ((v0.c2)<=(v0.c2)) THEN (+ (v0.c1)) END DESC  NULLS FIRST, (CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE 'Y' END IN (((v0.c1)>=(v0.c1)))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (CASE WHEN (NOT (NULL)) THEN ((NULL) BETWEEN (vt1.c0) AND (vt1.c0)) ELSE (~ (vt1.c0)) END) ORDER BY (COALESCE(DISTINCT vt1.c0, vt1.c0, vt1.c0, vt1.c0) IN ()) DESC  NULLS FIRST, ((((((((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))OR((vt1.c0 IN (vt1.c1)))))OR(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END)))OR(((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR(vt1.c1)))OR(NULLIF(DISTINCT vt1.c0, vt1.c0)))  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN (NOT (NULL)) THEN ((NULL) BETWEEN (vt1.c0) AND (vt1.c0)) ELSE (~ (vt1.c0)) END) ORDER BY (COALESCE(DISTINCT vt1.c0, vt1.c0, vt1.c0, vt1.c0) IN ()) DESC  NULLS FIRST, ((((((((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))OR((vt1.c0 IN (vt1.c1)))))OR(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END)))OR(((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR(vt1.c1)))OR(NULLIF(DISTINCT vt1.c0, vt1.c0)))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt1 WHERE (((((vt1.c0)<>(vt1.c1))) NOT NULL)) ORDER BY (COALESCE(DISTINCT vt1.c0, vt1.c0, vt1.c0, vt1.c0) IN ()) DESC  NULLS FIRST, ((((((((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))OR((vt1.c0 IN (vt1.c1)))))OR(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END)))OR(((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR(vt1.c1)))OR(NULLIF(DISTINCT vt1.c0, vt1.c0)))  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (CASE WHEN (NOT (NULL)) THEN ((NULL) BETWEEN (vt1.c0) AND (vt1.c0)) ELSE (~ (vt1.c0)) END) ORDER BY (COALESCE(DISTINCT vt1.c0, vt1.c0, vt1.c0, vt1.c0) IN ()) DESC  NULLS FIRST, ((((((((((((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))OR((vt1.c0 IN (vt1.c1)))))OR(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END)))OR(((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))))OR(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR(vt1.c1)))OR(NULLIF(DISTINCT vt1.c0, vt1.c0)))  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((~ (((v0.c2) NOT NULL))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((~ (((v0.c2) NOT NULL))))AND(CASE (- (v0.c1))  WHEN ((((v0.c2)OR(v0.c0)))AND(v0.c1)) THEN (((v0.c1))>=((x'75d3ca'))) WHEN CAST(v0.c0 AS NUMERIC) THEN (((vt1.c0))!=((v0.c2))) WHEN ((v0.c2) BETWEEN (v0.c2) AND (v0.c1)) THEN ((0.04222990515612357) BETWEEN (v0.c1) AND (vt1.c1)) ELSE (NOT (v0.c0)) END))) LIMIT 3;
SELECT * FROM vt1, v0 WHERE ((~ (((v0.c2) NOT NULL))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((~ (((v0.c2) NOT NULL))))AND(CASE (- (v0.c1))  WHEN ((((v0.c2)OR(v0.c0)))AND(v0.c1)) THEN (((v0.c1))>=((x'75d3ca'))) WHEN CAST(v0.c0 AS NUMERIC) THEN (((vt1.c0))!=((v0.c2))) WHEN ((v0.c2) BETWEEN (v0.c2) AND (v0.c1)) THEN ((0.04222990515612357) BETWEEN (v0.c1) AND (vt1.c1)) ELSE (NOT (v0.c0)) END))) LIMIT 3;
SELECT * FROM vt1 WHERE (CASE ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))  WHEN (((0.7297505861121194, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0))>((vt1.c1))) ELSE vt1.c0 END);
SELECT * FROM vt1 WHERE (((CASE ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))  WHEN (((0.7297505861121194, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0))>((vt1.c1))) ELSE vt1.c0 END)AND(((vt1.c1 IN (vt1.c1, vt1.c0)) IN (CAST(vt1.c1 AS BLOB)))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))+('-1'))  NULLS FIRST, LIKE(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, CAST(vt1.c1 AS REAL))  NULLS LAST, ((vt1.c1 COLLATE NOCASE)LIKE((- (vt1.c0)))) LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1 WHERE (((((((vt1.c0) NOT NULL))OR((+ (vt1.c1)))))AND((vt1.c0 IN (vt1.c1))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))+('-1'))  NULLS FIRST, LIKE(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, CAST(vt1.c1 AS REAL))  NULLS LAST, ((vt1.c1 COLLATE NOCASE)LIKE((- (vt1.c0)))) LIMIT 0x0;
SELECT * FROM vt1 WHERE (CASE ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))  WHEN (((0.7297505861121194, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0))>((vt1.c1))) ELSE vt1.c0 END);
SELECT * FROM vt1 WHERE (((CASE ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))  WHEN (((0.7297505861121194, vt1.c0))>=((vt1.c0, vt1.c0))) THEN (((vt1.c0))>((vt1.c1))) ELSE vt1.c0 END)AND(((vt1.c1 IN (vt1.c1, vt1.c0)) IN (CAST(vt1.c1 AS BLOB)))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))+('-1'))  NULLS FIRST, LIKE(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, CAST(vt1.c1 AS REAL))  NULLS LAST, ((vt1.c1 COLLATE NOCASE)LIKE((- (vt1.c0)))) LIMIT 0x0 INTERSECT SELECT ALL * FROM vt1 WHERE (((((((vt1.c0) NOT NULL))OR((+ (vt1.c1)))))AND((vt1.c0 IN (vt1.c1))))) ORDER BY ((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))+('-1'))  NULLS FIRST, LIKE(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, CAST(vt1.c1 AS REAL))  NULLS LAST, ((vt1.c1 COLLATE NOCASE)LIKE((- (vt1.c0)))) LIMIT 0x0;
SELECT * FROM vt1 WHERE ((((~ ('(j9#j5})v')))<(((((((((vt1.c0)OR(NULL)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))IS(vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((((((~ ('(j9#j5})v')))<(((((((((vt1.c0)OR(NULL)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND(((((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)))OR(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 END)))OR(((vt1.c0)||(vt1.c1))))))) ORDER BY LOWER((NOT (vt1.c0)))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0, NULL, vt1.c1)) BETWEEN (((- (vt1.c1)), 1.016608984E9 COLLATE RTRIM, ((x'283f75') ISNULL))) AND ((((vt1.c0)IS NOT(vt1.c1)), ((vt1.c1)*(vt1.c1)), CAST(vt1.c0 AS NUMERIC))))) ORDER BY LOWER((NOT (vt1.c0)))  NULLS LAST LIMIT 0x0;
SELECT * FROM vt1 WHERE ((((~ ('(j9#j5})v')))<(((((((((vt1.c0)OR(NULL)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0))))) ORDER BY ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))IS(vt1.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1 WHERE ((((((~ ('(j9#j5})v')))<(((((((((vt1.c0)OR(NULL)))AND(vt1.c0)))OR(vt1.c0)))OR(vt1.c0)))))AND(((((((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))AND(vt1.c1)))OR(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 END)))OR(((vt1.c0)||(vt1.c1))))))) ORDER BY LOWER((NOT (vt1.c0)))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((vt1.c0, NULL, vt1.c1)) BETWEEN (((- (vt1.c1)), 1.016608984E9 COLLATE RTRIM, ((x'283f75') ISNULL))) AND ((((vt1.c0)IS NOT(vt1.c1)), ((vt1.c1)*(vt1.c1)), CAST(vt1.c0 AS NUMERIC))))) ORDER BY LOWER((NOT (vt1.c0)))  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM v0 WHERE (CASE WHEN ((((((((((v0.c2)OR(x'')))OR('[迲x')))AND(v0.c1)))OR(v0.c1)))OR(v0.c2)) THEN x'321f' WHEN (NOT (v0.c1)) THEN ((v0.c2)IS NOT(v0.c0)) END) ORDER BY (((((v0.c0))<=((v0.c1))))<>(((v0.c0)!=(v0.c1))))  NULLS FIRST, (v0.c2 COLLATE BINARY IN ())  NULLS FIRST, ((((v0.c2)<<(v0.c2)))=((v0.c2 IN (v0.c0, v0.c0))))  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE (CASE WHEN ((((((((((v0.c2)OR(x'')))OR('[迲x')))AND(v0.c1)))OR(v0.c1)))OR(v0.c2)) THEN x'321f' WHEN (NOT (v0.c1)) THEN ((v0.c2)IS NOT(v0.c0)) END) ORDER BY (((((v0.c0))<=((v0.c1))))<>(((v0.c0)<>(v0.c1))))  NULLS FIRST, (v0.c2 COLLATE BINARY IN ())  NULLS FIRST, ((((v0.c2)<<(v0.c2)))==((v0.c2 IN (v0.c0, v0.c0))))  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE (((((((((v0.c2)<(v0.c2)))OR(((((((v0.c2)OR(v0.c2)))OR(v0.c2)))OR(v0.c2)))))AND(((v0.c2)&(v0.c0)))))AND(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))))) ORDER BY (((((v0.c0))<=((v0.c1))))!=(((v0.c0)!=(v0.c1))))  NULLS FIRST, (v0.c2 COLLATE BINARY IN ())  NULLS FIRST, ((((v0.c2)<<(v0.c2)))=((v0.c2 IN (v0.c0, v0.c0))))  NULLS LAST;
SELECT MAX(v0.c1) FROM vt1, v0 WHERE ((((vt1.c1, v0.c2, v0.c2, v0.c2)) NOT BETWEEN ((v0.c0 COLLATE RTRIM, ((vt1.c0)-(vt1.c1)), (v0.c2 IN (NULL, v0.c0)), CAST(v0.c2 AS REAL))) AND ((CASE WHEN v0.c1 THEN -1.30381765E8 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END, 2025803035, ((0.21762165702789593)<<(v0.c0)), (v0.c0 IN (vt1.c1, v0.c0))))));
SELECT DISTINCT MAX(v0.c1) FROM vt1, v0 WHERE ((((vt1.c1, v0.c2, v0.c2, v0.c2)) NOT BETWEEN ((v0.c0 COLLATE RTRIM, ((vt1.c0)-(vt1.c1)), (v0.c2 IN (NULL, v0.c0)), CAST(v0.c2 AS REAL))) AND ((CASE WHEN v0.c1 THEN -1.30381765E8 WHEN vt1.c1 THEN v0.c1 ELSE v0.c2 END, 2025803035, ((0.21762165702789593)<<(v0.c0)), (v0.c0 IN (vt1.c1, v0.c0)))))) LIMIT 2 INTERSECT SELECT DISTINCT MAX(v0.c1) FROM vt1, v0 WHERE ((((v0.c2 IN (vt1.c0))) IS FALSE)) LIMIT 0x2;
SELECT ALL * FROM vt1 WHERE (TYPEOF(DISTINCT vt1.c1)) ORDER BY (+ (((vt1.c1)<>(vt1.c1)))) ASC;
SELECT * FROM vt1 WHERE (TYPEOF(DISTINCT vt1.c1)) ORDER BY x'285692' ASC, ((json_insert(vt1.c1, vt1.c1, vt1.c1, vt1.c1))GLOB(((((vt1.c1)OR(0X2f78d527)))AND('cP%(nY')))) DESC INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1))) ISNULL)) ORDER BY x'285692' ASC, ((json_insert(vt1.c1, vt1.c1, vt1.c1, vt1.c1))GLOB(((((vt1.c1)OR(0X2f78d527)))AND('cP%(nY')))) DESC;
SELECT ALL * FROM vt1 WHERE (TYPEOF(DISTINCT vt1.c1)) ORDER BY (+ (((vt1.c1)<>(vt1.c1)))) ASC;
SELECT * FROM vt1 WHERE (TYPEOF(DISTINCT vt1.c1)) ORDER BY x'285692' ASC, ((json_insert(vt1.c1, vt1.c1, vt1.c1, vt1.c1))GLOB(((((vt1.c1)OR(0X2f78d527)))AND('cP%(nY')))) DESC INTERSECT SELECT ALL * FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1))) ISNULL)) ORDER BY x'285692' ASC, ((json_insert(vt1.c1, vt1.c1, vt1.c1, vt1.c1))GLOB(((((vt1.c1)OR(0X2f78d527)))AND('cP%(nY')))) DESC;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((('856469861')||(vt1.c1 COLLATE BINARY))) ORDER BY vt1.c1  NULLS FIRST, CASE ((vt1.c1) IS FALSE)  WHEN json_type(vt1.c0) THEN CAST(vt1.c0 AS NUMERIC) WHEN (((vt1.c0, vt1.c1))>((NULL, vt1.c1))) THEN 0X5f130329 COLLATE BINARY WHEN ((NULL) BETWEEN (vt1.c0) AND (vt1.c0)) THEN ((vt1.c1) IS TRUE) WHEN ((((vt1.c0)OR(NULL)))AND(vt1.c1)) THEN vt1.c0 WHEN CAST(vt1.c1 AS TEXT) THEN '-5674097' END ASC  NULLS FIRST, ((((((vt1.c0)OR((((vt1.c1))<>((vt1.c0))))))AND(LENGTH(vt1.c1))))OR(CAST(vt1.c0 AS BLOB))) DESC;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((((('856469861')||(vt1.c1 COLLATE BINARY)))AND((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)OR(vt1.c1)), ((0.9040912110506931) BETWEEN (vt1.c1) AND (vt1.c1)), ((vt1.c0)+(vt1.c0)))) AND (((((-3.3531352E8, vt1.c1))=((vt1.c1, vt1.c0))), ((vt1.c1) ISNULL), vt1.c1 COLLATE RTRIM)))))) ORDER BY DATETIME(CAST(vt1.c1 AS NUMERIC), ((0.5908037246653997) BETWEEN (vt1.c1) AND (x'f2')), ((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)), '856469861', ((vt1.c0)=(vt1.c0))), (((((vt1.c1, vt1.c1))>=((vt1.c1, vt1.c0))))&(((((((((((vt1.c0)AND(vt1.c0)))AND(vt1.c0)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c0)))) ASC  NULLS FIRST, ((((vt1.c0) ISNULL))IS NOT((NOT (vt1.c1))));
SELECT * FROM vt1, v0 WHERE (v0.c0) ORDER BY ((((v0.c1) NOT NULL)) NOT BETWEEN (((v0.c0) IS FALSE)) AND (((v0.c0)||(vt1.c1)))), x'ad33' DESC, ((((0.5138318291476706))<((v0.c1))) IN ()) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE (v0.c0) ORDER BY ((((vt1.c1) IS FALSE)) BETWEEN (((((((((v0.c0)OR(v0.c0)))OR(vt1.c1)))AND('1458110164')))AND(v0.c0))) AND (vt1.c0 COLLATE NOCASE)) DESC, (((vt1.c0)) BETWEEN ((((vt1.c1)<=(v0.c1)))) AND ((vt1.c0)))  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt1, v0 WHERE (v0.c0) ORDER BY ((((v0.c1) NOT NULL)) NOT BETWEEN (((v0.c0) IS FALSE)) AND (((v0.c0)||(vt1.c1)))), x'ad33' DESC, ((((0.5138318291476706))<((v0.c1))) IN ()) ASC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE ((((((((((((v0.c1)AND(v0.c1)))AND(v0.c0)))AND(vt1.c0)))OR(v0.c1)), (vt1.c0 IN ()), ((v0.c0) NOT BETWEEN (v0.c2) AND (vt1.c0)), (+ (v0.c2)), ((vt1.c0)<>(v0.c2))))==(((((v0.c0))<>((vt1.c1))), (+ (v0.c0)), vt1.c1 COLLATE RTRIM, v0.c2, ((vt1.c0)>=(vt1.c0)))))) ORDER BY rtreenode((- (vt1.c0)), (((v0.c0, '-1943716263')) BETWEEN ((vt1.c0, vt1.c1)) AND ((v0.c1, v0.c1)))), ((((((((NULL)AND(((v0.c0) IS FALSE))))AND(CAST(v0.c0 AS REAL))))OR(((v0.c0)!=(v0.c2)))))OR((((('-1213180899')OR(v0.c0)))AND(x'fe7e')))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((((((((v0.c1)AND(v0.c1)))AND(v0.c0)))AND(vt1.c0)))OR(v0.c1)), (vt1.c0 IN ()), ((v0.c0) NOT BETWEEN (v0.c2) AND (vt1.c0)), (+ (v0.c2)), ((vt1.c0)<(v0.c2))))=(((((v0.c0))<((vt1.c1))), (+ (v0.c0)), vt1.c1 COLLATE RTRIM, v0.c2, ((vt1.c0)>=(vt1.c0))))))AND(CASE v0.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END COLLATE NOCASE))) ORDER BY rtreenode((- (vt1.c0)), (((v0.c0, '-1943716263')) BETWEEN ((vt1.c0, vt1.c1)) AND ((v0.c1, v0.c1)))), ((((((((NULL)AND(((v0.c0) IS FALSE))))AND(CAST(v0.c0 AS REAL))))OR(((v0.c0)!=(v0.c2)))))OR((((('-1213180899')OR(v0.c0)))AND(x'fe7e')))) DESC LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((vt1.c0)<=(NULL)))>=(CASE WHEN v0.c0 THEN vt1.c1 END))) ORDER BY rtreenode((- (vt1.c0)), (((v0.c0, '-1943716263')) BETWEEN ((vt1.c0, vt1.c1)) AND ((v0.c1, v0.c1)))), ((((((((NULL)AND(((v0.c0) IS FALSE))))AND(CAST(v0.c0 AS REAL))))OR(((v0.c0)!=(v0.c2)))))OR((((('-1213180899')OR(v0.c0)))AND(x'fe7e')))) DESC LIMIT 1;
SELECT * FROM v0, vt1 WHERE ((((((((((((v0.c1)AND(v0.c1)))AND(v0.c0)))AND(vt1.c0)))OR(v0.c1)), (vt1.c0 IN ()), ((v0.c0) NOT BETWEEN (v0.c2) AND (vt1.c0)), (+ (v0.c2)), ((vt1.c0)<>(v0.c2))))==(((((v0.c0))<>((vt1.c1))), (+ (v0.c0)), vt1.c1 COLLATE RTRIM, v0.c2, ((vt1.c0)>=(vt1.c0)))))) ORDER BY rtreenode((- (vt1.c0)), (((v0.c0, '-1943716263')) BETWEEN ((vt1.c0, vt1.c1)) AND ((v0.c1, v0.c1)))), ((((((((NULL)AND(((v0.c0) IS FALSE))))AND(CAST(v0.c0 AS REAL))))OR(((v0.c0)!=(v0.c2)))))OR((((('-1213180899')OR(v0.c0)))AND(x'fe7e')))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((((((((((v0.c1)AND(v0.c1)))AND(v0.c0)))AND(vt1.c0)))OR(v0.c1)), (vt1.c0 IN ()), ((v0.c0) NOT BETWEEN (v0.c2) AND (vt1.c0)), (+ (v0.c2)), ((vt1.c0)<(v0.c2))))=(((((v0.c0))<((vt1.c1))), (+ (v0.c0)), vt1.c1 COLLATE RTRIM, v0.c2, ((vt1.c0)>=(vt1.c0))))))AND(CASE v0.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 END COLLATE NOCASE))) ORDER BY rtreenode((- (vt1.c0)), (((v0.c0, '-1943716263')) BETWEEN ((vt1.c0, vt1.c1)) AND ((v0.c1, v0.c1)))), ((((((((NULL)AND(((v0.c0) IS FALSE))))AND(CAST(v0.c0 AS REAL))))OR(((v0.c0)!=(v0.c2)))))OR((((('-1213180899')OR(v0.c0)))AND(x'fe7e')))) DESC LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((vt1.c0)<=(NULL)))>=(CASE WHEN v0.c0 THEN vt1.c1 END))) ORDER BY rtreenode((- (vt1.c0)), (((v0.c0, '-1943716263')) BETWEEN ((vt1.c0, vt1.c1)) AND ((v0.c1, v0.c1)))), ((((((((NULL)AND(((v0.c0) IS FALSE))))AND(CAST(v0.c0 AS REAL))))OR(((v0.c0)!=(v0.c2)))))OR((((('-1213180899')OR(v0.c0)))AND(x'fe7e')))) DESC LIMIT 1;
SELECT ALL * FROM v0, vt1 WHERE ((((((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c1)))) NOT NULL));
SELECT * FROM v0, vt1 WHERE ((((((((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c1)))) NOT NULL))AND(((((((vt1.c0) IS TRUE))AND(CASE WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN v0.c2 WHEN x'' THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN '856469861' WHEN v0.c0 THEN v0.c0 END)))OR(((((((((v0.c2)AND(v0.c2)))OR(0.7629112763339688)))AND(vt1.c0)))OR(v0.c2))))))) ORDER BY CAST((((vt1.c1, v0.c1)) BETWEEN (('<7*X', '-1122952596')) AND ((v0.c0, v0.c1))) AS BLOB), '1' DESC, ((((((((((((v0.c2)OR(v0.c2)))OR(vt1.c1)))OR((~ (v0.c0)))))OR(CAST(v0.c1 AS BLOB))))AND(v0.c0)))AND(v0.c1 COLLATE BINARY)) ASC  NULLS LAST, ((((v0.c0)<=(v0.c1))) IS TRUE) LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE ((((((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c1)))) NOT NULL));
SELECT * FROM v0, vt1 WHERE ((((((((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c1)))) NOT NULL))AND(((((((vt1.c0) IS TRUE))AND(CASE WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN v0.c2 WHEN x'' THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN '856469861' WHEN v0.c0 THEN v0.c0 END)))OR(((((((((v0.c2)AND(v0.c2)))OR(0.7629112763339688)))AND(vt1.c0)))OR(v0.c2))))))) ORDER BY CAST((((vt1.c1, v0.c1)) BETWEEN (('<7*X', '-1122952596')) AND ((v0.c0, v0.c1))) AS BLOB), '1' DESC, ((((((((((((v0.c2)OR(v0.c2)))OR(vt1.c1)))OR((~ (v0.c0)))))OR(CAST(v0.c1 AS BLOB))))AND(v0.c0)))AND(v0.c1 COLLATE BINARY)) ASC  NULLS LAST, ((((v0.c0)<=(v0.c1))) IS TRUE) LIMIT 0;
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE ((CASE v0.c2  WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 END IN ())) ORDER BY json_extract(CAST(NULL AS TEXT), 0.4271884512594245 COLLATE NOCASE) DESC  NULLS LAST;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE ((CASE v0.c2  WHEN v0.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 END IN ())) ORDER BY CASE ((vt1.c0) ISNULL)  WHEN '' THEN 0.4659851086686514 WHEN ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) THEN (vt1.c1 IN ()) WHEN ((v0.c0) NOT NULL) THEN ((v0.c2) NOT NULL) END  NULLS LAST, (((vt1.c0) NOT BETWEEN (v0.c2) AND (vt1.c0)) IN ()) DESC  NULLS FIRST, (((((('-960648030')AND(v0.c2)))AND(vt1.c0)))|(SQLITE_COMPILEOPTION_GET(v0.c1))) DESC  NULLS LAST INTERSECT SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE (((v0.c2 COLLATE BINARY) NOT BETWEEN (LOWER(DISTINCT vt1.c0)) AND ((- (v0.c0))))) ORDER BY CASE ((vt1.c0) ISNULL)  WHEN '' THEN 0.4659851086686514 WHEN ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) THEN (vt1.c1 IN ()) WHEN ((v0.c0) NOT NULL) THEN ((v0.c2) NOT NULL) END  NULLS LAST, (((vt1.c0) NOT BETWEEN (v0.c2) AND (vt1.c0)) IN ()) DESC  NULLS FIRST, (((((('-960648030')AND(v0.c2)))AND(vt1.c0)))|(SQLITE_COMPILEOPTION_GET(v0.c1))) DESC  NULLS LAST;
SELECT MIN(v0.c2) FROM vt1, v0 WHERE ((((vt1.c1, v0.c0, '1769291611')) NOT BETWEEN (((((v0.c2))=((v0.c2))), CASE WHEN vt1.c1 THEN v0.c0 WHEN vt1.c1 THEN '615923876' END, ((vt1.c1)&(v0.c0)))) AND ((COALESCE(DISTINCT v0.c1, v0.c1), (0.8745648014066603 IN (v0.c1, v0.c1, vt1.c1)), CAST(v0.c0 AS NUMERIC)))));
SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE ((((vt1.c1, v0.c0, '1769291611')) NOT BETWEEN (((((v0.c2))>=((v0.c2))), CASE WHEN vt1.c1 THEN v0.c0 WHEN vt1.c1 THEN '615923876' END, ((vt1.c1)&(v0.c0)))) AND ((COALESCE(DISTINCT v0.c1, v0.c1), (0.8745648014066603 IN (v0.c1, v0.c1, vt1.c1)), CAST(v0.c0 AS NUMERIC))))) ORDER BY 0.5915520212863944 COLLATE RTRIM LIMIT 5;
SELECT ALL MAX(vt1.c0) FROM vt1 LEFT OUTER JOIN v0 ON CHAR(v0.c0, vt1.c1, v0.c0, vt1.c1) COLLATE BINARY WHERE (345514040);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 LEFT OUTER JOIN v0 ON CHAR(v0.c0, vt1.c1, v0.c0, vt1.c1) COLLATE BINARY WHERE (((345514040)AND(CAST(v0.c1 COLLATE NOCASE AS INTEGER)))) ORDER BY ((((((v0.c1)OR(v0.c0)))OR(NULL)))OR(vt1.c1)) COLLATE BINARY, ((CAST(v0.c2 AS TEXT))GLOB(v0.c0 COLLATE NOCASE))  NULLS FIRST, 0Xffffffff8aceb98e  NULLS FIRST INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 LEFT OUTER JOIN v0 ON CHAR(v0.c0, vt1.c1, v0.c0, vt1.c1) COLLATE BINARY WHERE (((NULL)||(v0.c2)) COLLATE BINARY) ORDER BY ((((((v0.c1)OR(v0.c0)))OR(NULL)))OR(vt1.c1)) COLLATE BINARY, ((CAST(v0.c2 AS TEXT))GLOB(v0.c0 COLLATE NOCASE))  NULLS FIRST, -1966163570  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (CAST(CAST(vt1.c1 AS TEXT) AS TEXT));
SELECT DISTINCT * FROM vt1 WHERE (CAST(CAST(vt1.c1 AS TEXT) AS TEXT)) ORDER BY ((((vt1.c0) NOT BETWEEN ('0') AND (vt1.c0)))%(x'2f8263')) DESC;
SELECT ALL * FROM vt1 WHERE (CAST(CAST(vt1.c1 AS TEXT) AS TEXT));
SELECT DISTINCT * FROM vt1 WHERE (CAST(CAST(vt1.c1 AS TEXT) AS TEXT)) ORDER BY ((((vt1.c0) NOT BETWEEN ('0') AND (vt1.c0)))%(x'2f8263')) DESC;
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (((((((v0.c0)>=(v0.c1)))OR(((v0.c1)IS(vt1.c1)))))AND(UPPER(DISTINCT v0.c2)))) ORDER BY v0.c2 DESC  NULLS FIRST, ((((vt1.c1) BETWEEN (v0.c1) AND (vt1.c1)))AND(((v0.c0) NOT BETWEEN (0.6080967214214313) AND (v0.c2)))) DESC;
SELECT ALL MAX(vt1.c1) FROM vt1 NOT INDEXED, v0 WHERE (((((((((v0.c0)>=(v0.c1)))OR(((v0.c1)IS(vt1.c1)))))AND(UPPER(DISTINCT v0.c2))))AND((((((((((v0.c0, vt1.c1, v0.c0, v0.c2)) BETWEEN ((v0.c1, v0.c1, v0.c1, v0.c0)) AND ((NULL, vt1.c1, vt1.c0, vt1.c1))))AND(vt1.c0)))AND(v0.c0)))AND(v0.c2 COLLATE NOCASE))))) ORDER BY v0.c2 DESC  NULLS FIRST, ((((vt1.c1) BETWEEN (v0.c1) AND (vt1.c1)))AND(((v0.c0) NOT BETWEEN (0.6080967214214313) AND (v0.c2)))) DESC;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (0.7774219664814312) ORDER BY NULLIF(DISTINCT (~ (v0.c0)), v0.c1) ASC;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((0.7774219664814312)AND('1299896576'))) ORDER BY ((CASE WHEN v0.c0 THEN NULL WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END) NOT BETWEEN (CAST(v0.c2 AS REAL)) AND (CAST(v0.c1 AS INTEGER))) ASC;
SELECT * FROM v0 INNER JOIN vt1 ON ((((v0.c0, v0.c2))<((v0.c2, vt1.c1))) IN (((-117617516) BETWEEN (vt1.c0) AND (v0.c2)))) WHERE ('-1296099109') ORDER BY CASE NULL  WHEN ((vt1.c1)+(vt1.c1)) THEN CASE v0.c0  WHEN v0.c2 THEN vt1.c1 WHEN NULL THEN vt1.c1 END WHEN UNLIKELY(DISTINCT x'b1') THEN vt1.c1 ELSE v0.c2 END, vt1.c0 DESC, x''  NULLS FIRST;
SELECT * FROM v0 INNER JOIN vt1 ON ((((v0.c0, v0.c2))<((v0.c2, vt1.c1))) IN (((-117617516) BETWEEN (vt1.c0) AND (v0.c2)))) WHERE ('-1296099109') ORDER BY CASE NULL  WHEN ((vt1.c1)+(vt1.c1)) THEN CASE v0.c0  WHEN v0.c2 THEN vt1.c1 WHEN NULL THEN vt1.c1 END WHEN UNLIKELY(DISTINCT x'b1') THEN vt1.c1 ELSE v0.c2 END, vt1.c0 DESC, x''  NULLS FIRST LIMIT 0x2;
SELECT * FROM v0 INNER JOIN vt1 ON ((((v0.c0, v0.c2))<((v0.c2, vt1.c1))) IN (((-117617516) BETWEEN (vt1.c0) AND (v0.c2)))) WHERE ('-1296099109') ORDER BY CASE NULL  WHEN ((vt1.c1)+(vt1.c1)) THEN CASE v0.c0  WHEN v0.c2 THEN vt1.c1 WHEN NULL THEN vt1.c1 END WHEN UNLIKELY(DISTINCT x'b1') THEN vt1.c1 ELSE v0.c2 END, vt1.c0 DESC, x''  NULLS FIRST;
SELECT * FROM v0 INNER JOIN vt1 ON ((((v0.c0, v0.c2))<((v0.c2, vt1.c1))) IN (((-117617516) BETWEEN (vt1.c0) AND (v0.c2)))) WHERE ('-1296099109') ORDER BY CASE NULL  WHEN ((vt1.c1)+(vt1.c1)) THEN CASE v0.c0  WHEN v0.c2 THEN vt1.c1 WHEN NULL THEN vt1.c1 END WHEN UNLIKELY(DISTINCT x'b1') THEN vt1.c1 ELSE v0.c2 END, vt1.c0 DESC, x''  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (+ (COALESCE(vt1.c1, vt1.c1))), ((PRINTF(vt1.c1, vt1.c0, vt1.c1, vt1.c1)) NOT BETWEEN (x'997521') AND (IFNULL(DISTINCT vt1.c0, vt1.c0))) ASC  NULLS FIRST, 0.6571355658903257 DESC;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(json_object(((vt1.c1) ISNULL), CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN '184893080' WHEN vt1.c0 THEN 0x7909f1e5 WHEN vt1.c1 THEN '*T(#IOg' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c1, ((vt1.c0) IS FALSE))))) ORDER BY (((((vt1.c0, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((0.7536547665820855, vt1.c1, vt1.c1, vt1.c0)) AND ((x'2c92', x'f6', vt1.c0, vt1.c1))))&(vt1.c1))  NULLS LAST, ((((vt1.c0) ISNULL))GLOB(vt1.c0 COLLATE BINARY)) DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (+ (COALESCE(vt1.c1, vt1.c1))), ((PRINTF(vt1.c1, vt1.c0, vt1.c1, vt1.c1)) NOT BETWEEN (x'997521') AND (IFNULL(DISTINCT vt1.c0, vt1.c0))) ASC  NULLS FIRST, 0.6571355658903257 DESC;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(json_object(((vt1.c1) ISNULL), CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN '184893080' WHEN vt1.c0 THEN 0x7909f1e5 WHEN vt1.c1 THEN '*T(#IOg' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, vt1.c1, ((vt1.c0) IS FALSE))))) ORDER BY (((((vt1.c0, vt1.c1, vt1.c0, vt1.c0)) NOT BETWEEN ((0.7536547665820855, vt1.c1, vt1.c1, vt1.c0)) AND ((x'2c92', x'f6', vt1.c0, vt1.c1))))&(vt1.c1))  NULLS LAST, ((((vt1.c0) ISNULL))GLOB(vt1.c0 COLLATE BINARY)) DESC  NULLS FIRST LIMIT 2;
SELECT MAX(v0.c2) FROM v0 WHERE ((((v0.c2, v0.c0, NULL, v0.c0, 0.44657769285513627, v0.c0, v0.c1)) BETWEEN ((0.4442468243181018, v0.c1, v0.c1, v0.c2, v0.c0, v0.c0, v0.c2)) AND ((v0.c2, v0.c1, v0.c2, v0.c2, v0.c2, v0.c0, v0.c1))) COLLATE NOCASE) ORDER BY CASE WHEN (+ (v0.c2)) THEN LIKELIHOOD(v0.c1, v0.c1) WHEN ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)) THEN CAST(v0.c0 AS TEXT) WHEN (((v0.c0)) BETWEEN ((v0.c1)) AND ((v0.c0))) THEN (+ (v0.c1)) ELSE ((((((((((v0.c0)OR(NULL)))OR(v0.c1)))AND(v0.c0)))AND(v0.c1)))OR(v0.c1)) END  NULLS FIRST, v0.c2;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ((((v0.c2, v0.c0, NULL, v0.c0, 0.44657769285513627, v0.c0, v0.c1)) BETWEEN ((0.4442468243181018, v0.c1, v0.c1, v0.c2, v0.c0, v0.c0, v0.c2)) AND ((v0.c2, v0.c1, v0.c2, v0.c2, v0.c2, v0.c0, v0.c1))) COLLATE NOCASE) ORDER BY CAST(-1757524785 AS REAL) ASC LIMIT 3;
SELECT ALL * FROM v0 WHERE (((((~ (v0.c2)), ((v0.c1) BETWEEN (v0.c0) AND (v0.c1)), ((x'a4') NOT BETWEEN (v0.c1) AND (v0.c0)), (v0.c2 IN (v0.c0, v0.c0)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c0 END))<>((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(v0.c0)), ((NULL) BETWEEN (v0.c2) AND (v0.c1)), v0.c2, (- (v0.c1)), ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))))));
SELECT * FROM v0 WHERE (((((((~ (v0.c2)), ((v0.c1) BETWEEN (v0.c0) AND (v0.c1)), ((x'a4') NOT BETWEEN (v0.c1) AND (v0.c0)), (v0.c2 IN (v0.c0, v0.c0)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c0 END))<>((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(v0.c0)), ((NULL) BETWEEN (v0.c2) AND (v0.c1)), v0.c2, (- (v0.c1)), ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))))))AND(LIKELY(DISTINCT ((v0.c1) NOT NULL))))) ORDER BY ((((((v0.c2)OR(v0.c2)))OR(v0.c1)))/(((v0.c2)!=(v0.c2)))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE (((((json_object(v0.c0, v0.c2, v0.c0, v0.c0))OR(((v0.c2)<(v0.c1)))))AND(((v0.c1)<=(v0.c2))))) ORDER BY ((((((v0.c2)OR(v0.c2)))OR(v0.c1)))/(((v0.c2)!=(v0.c2)))) DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((~ (v0.c2)), ((v0.c1) BETWEEN (v0.c0) AND (v0.c1)), ((x'a4') NOT BETWEEN (v0.c1) AND (v0.c0)), (v0.c2 IN (v0.c0, v0.c0)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c0 END))<>((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(v0.c0)), ((NULL) BETWEEN (v0.c2) AND (v0.c1)), v0.c2, (- (v0.c1)), ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))))));
SELECT * FROM v0 WHERE (((((((~ (v0.c2)), ((v0.c1) BETWEEN (v0.c0) AND (v0.c1)), ((x'a4') NOT BETWEEN (v0.c1) AND (v0.c0)), (v0.c2 IN (v0.c0, v0.c0)), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c0 END))<>((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(v0.c0)), ((NULL) BETWEEN (v0.c2) AND (v0.c1)), v0.c2, (- (v0.c1)), ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))))))AND(LIKELY(DISTINCT ((v0.c1) NOT NULL))))) ORDER BY ((((((v0.c2)OR(v0.c2)))OR(v0.c1)))/(((v0.c2)!=(v0.c2)))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE (((((json_object(v0.c0, v0.c2, v0.c0, v0.c0))OR(((v0.c2)<(v0.c1)))))AND(((v0.c1)<=(v0.c2))))) ORDER BY ((((((v0.c2)OR(v0.c2)))OR(v0.c1)))/(((v0.c2)!=(v0.c2)))) DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (x'75' COLLATE BINARY) ORDER BY (((((vt1.c1 IN (vt1.c1)))OR('1450350240')))OR(CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c0 END))  NULLS FIRST, NULL  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((x'75' COLLATE BINARY)AND(((v0.c2) NOT NULL) COLLATE NOCASE))) ORDER BY (((((vt1.c1 IN (vt1.c1)))OR('1450350240')))OR(CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c0 END))  NULLS FIRST, NULL  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))OR(v0.c2)))OR(v0.c2)))AND(vt1.c0)) COLLATE BINARY) ORDER BY (((((vt1.c1 IN (vt1.c1)))OR('1450350240')))OR(CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c0 END))  NULLS FIRST, NULL  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0, vt1 WHERE (x'75' COLLATE BINARY) ORDER BY (((((vt1.c1 IN (vt1.c1)))OR('1450350240')))OR(CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c0 END))  NULLS FIRST, NULL  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((x'75' COLLATE BINARY)AND(((v0.c2) NOT NULL) COLLATE NOCASE))) ORDER BY (((((vt1.c1 IN (vt1.c1)))OR('1450350240')))OR(CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c0 END))  NULLS FIRST, NULL  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((((((vt1.c0)OR(vt1.c0)))OR(v0.c2)))OR(v0.c2)))AND(vt1.c0)) COLLATE BINARY) ORDER BY (((((vt1.c1 IN (vt1.c1)))OR('1450350240')))OR(CASE WHEN v0.c1 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c0 END))  NULLS FIRST, NULL  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c1))>=((vt1.c1, vt1.c0))) COLLATE BINARY) ORDER BY ((json_array_length(vt1.c1))<((vt1.c1 IN (vt1.c1)))), ((((CASE WHEN 0X24b640a4 THEN 0xffffffffdc08f7e8 END)OR(CAST(vt1.c0 AS REAL))))OR((NOT (vt1.c0)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c1))>=((vt1.c1, vt1.c0))) COLLATE BINARY)AND(((((vt1.c1)IS NOT(vt1.c1))) IS FALSE)))) ORDER BY HEX(DISTINCT vt1.c0 COLLATE RTRIM)  NULLS LAST, CASE ((vt1.c0)%(vt1.c1))  WHEN CAST(vt1.c1 AS TEXT) THEN LIKELIHOOD(DISTINCT vt1.c1, NULL) WHEN ((vt1.c1)/(vt1.c0)) THEN ((vt1.c0)AND(vt1.c0)) END  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c1))>=((vt1.c1, vt1.c0))) COLLATE BINARY) ORDER BY ((json_array_length(vt1.c1))<((vt1.c1 IN (vt1.c1)))), ((((CASE WHEN 0X24b640a4 THEN 0xffffffffdc08f7e8 END)OR(CAST(vt1.c0 AS REAL))))OR((NOT (vt1.c0)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c0, vt1.c1))>=((vt1.c1, vt1.c0))) COLLATE BINARY)AND(((((vt1.c1)IS NOT(vt1.c1))) IS FALSE)))) ORDER BY HEX(DISTINCT vt1.c0 COLLATE RTRIM)  NULLS LAST, CASE ((vt1.c0)%(vt1.c1))  WHEN CAST(vt1.c1 AS TEXT) THEN LIKELIHOOD(DISTINCT vt1.c1, NULL) WHEN ((vt1.c1)/(vt1.c0)) THEN ((vt1.c0)AND(vt1.c0)) END  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(((vt1.c0) NOTNULL))))AND(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR(vt1.c0))) ORDER BY CASE vt1.c1 COLLATE BINARY  WHEN ((vt1.c1) ISNULL) THEN ('-957188178' IN ()) WHEN ((vt1.c1)|(vt1.c1)) THEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)) ELSE vt1.c0 END  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(((vt1.c0) NOTNULL))))AND(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))))OR(vt1.c0))) ORDER BY vt1.c1 DESC  NULLS FIRST, TRIM(DISTINCT ((vt1.c1)>(vt1.c0)))  NULLS FIRST INTERSECT SELECT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c1) IS FALSE))IS(((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY vt1.c1 DESC  NULLS FIRST, TRIM(DISTINCT ((vt1.c1)>(vt1.c0)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (x'4d');
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((x'4d')AND((((vt1.c0)) NOT BETWEEN ((((((0.8194570590210998)AND(vt1.c0)))AND(vt1.c1)))) AND ((vt1.c0))))));
SELECT ALL * FROM vt1 WHERE (((CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END)>>((vt1.c1 IN (vt1.c1)))));
SELECT DISTINCT * FROM vt1 WHERE (((((CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END)>>((vt1.c1 IN (vt1.c1)))))AND(((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)))<=(((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))))));
SELECT ALL * FROM vt1 WHERE (((CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END)>>((vt1.c1 IN (vt1.c1)))));
SELECT DISTINCT * FROM vt1 WHERE (((((CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END)>>((vt1.c1 IN (vt1.c1)))))AND(((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)))<=(((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))))));
SELECT * FROM v0 WHERE ((1.841692098E9 IN (NULL, '\')) COLLATE BINARY);
SELECT * FROM v0 WHERE ((1.841692098E9 IN (NULL, '\')) COLLATE BINARY);
SELECT * FROM v0 WHERE ((1.841692098E9 IN (NULL, '\')) COLLATE BINARY);
SELECT * FROM v0 WHERE ((1.841692098E9 IN (NULL, '\')) COLLATE BINARY);
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((((v0.c1) BETWEEN (v0.c2) AND (v0.c2)) IN (v0.c1)));
SELECT MAX(v0.c1) FROM v0 WHERE ((((((v0.c1) BETWEEN (v0.c2) AND (v0.c2)) IN (v0.c1)))AND(((((((v0.c0)AND(v0.c2)))OR(v0.c1)))AND((((v0.c1, v0.c0, 0.39482645245895087, v0.c2)) NOT BETWEEN ((v0.c2, v0.c2, v0.c0, v0.c0)) AND ((v0.c0, v0.c1, v0.c1, v0.c0)))))))) ORDER BY CAST(v0.c2 AS TEXT) COLLATE BINARY ASC, x'b7'  NULLS LAST INTERSECT SELECT MAX(v0.c1) FROM v0 WHERE (v0.c0) ORDER BY CAST(v0.c2 AS TEXT) COLLATE BINARY ASC, x'b7'  NULLS LAST;
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (((vt1.c1)>>(v0.c1)) COLLATE BINARY) ORDER BY vt1.c1 DESC  NULLS FIRST, (~ (((vt1.c1)GLOB(v0.c2)))) ASC  NULLS LAST;
SELECT DISTINCT MAX(vt1.c1) FROM vt1, v0 WHERE (((vt1.c1)>>(v0.c1)) COLLATE BINARY) ORDER BY ((((((vt1.c0, v0.c2)) BETWEEN ((v0.c1, vt1.c1)) AND (('768350880', v0.c0)))))=(((((v0.c0))<>((vt1.c0))))))  NULLS LAST, (((v0.c1)!=(v0.c1)) IN ()) ASC  NULLS LAST;
SELECT ALL MAX(vt1.c1) FROM v0, vt1 WHERE (CASE (~ (vt1.c0))  WHEN ((vt1.c0)*(v0.c0)) THEN UNLIKELY(x'') ELSE v0.c0 END);
SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (((CASE (~ (vt1.c0))  WHEN ((vt1.c0)*(v0.c0)) THEN UNLIKELY(x'') ELSE v0.c0 END)AND(COALESCE(DISTINCT CASE WHEN vt1.c1 THEN v0.c1 ELSE vt1.c0 END, ((((v0.c1)AND(vt1.c0)))AND(v0.c0)))))) INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (((v0.c1 COLLATE NOCASE)||(v0.c0)));
SELECT ALL * FROM v0 WHERE (LAST_INSERT_ROWID()) ORDER BY (+ (CASE v0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END));
SELECT DISTINCT * FROM v0 WHERE (((LAST_INSERT_ROWID())AND(((NULLIF(v0.c0, v0.c1))IS NOT(CAST(v0.c0 AS NUMERIC)))))) ORDER BY CASE ((v0.c0) BETWEEN (v0.c1) AND (0.7403235540709227))  WHEN v0.c0 COLLATE RTRIM THEN v0.c0 COLLATE NOCASE ELSE (('')!=(v0.c2)) END, (((v0.c2)) NOT BETWEEN ((NULL COLLATE RTRIM)) AND ((((v0.c2) IS FALSE))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((((((-380708997)OR(v0.c0)))AND(v0.c1)))AND(v0.c1))) BETWEEN (CAST(v0.c1 AS BLOB)) AND (CAST(v0.c0 AS REAL)))) ORDER BY CASE ((v0.c0) BETWEEN (v0.c1) AND (0.7403235540709227))  WHEN v0.c0 COLLATE RTRIM THEN v0.c0 COLLATE NOCASE ELSE (('')<>(v0.c2)) END, (((v0.c2)) NOT BETWEEN ((NULL COLLATE RTRIM)) AND ((((v0.c2) IS FALSE))))  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (LAST_INSERT_ROWID()) ORDER BY (+ (CASE v0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END));
SELECT DISTINCT * FROM v0 WHERE (((LAST_INSERT_ROWID())AND(((NULLIF(v0.c0, v0.c1))IS NOT(CAST(v0.c0 AS NUMERIC)))))) ORDER BY CASE ((v0.c0) BETWEEN (v0.c1) AND (0.7403235540709227))  WHEN v0.c0 COLLATE RTRIM THEN v0.c0 COLLATE NOCASE ELSE (('')!=(v0.c2)) END, (((v0.c2)) NOT BETWEEN ((NULL COLLATE RTRIM)) AND ((((v0.c2) IS FALSE))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((((((-380708997)OR(v0.c0)))AND(v0.c1)))AND(v0.c1))) BETWEEN (CAST(v0.c1 AS BLOB)) AND (CAST(v0.c0 AS REAL)))) ORDER BY CASE ((v0.c0) BETWEEN (v0.c1) AND (0.7403235540709227))  WHEN v0.c0 COLLATE RTRIM THEN v0.c0 COLLATE NOCASE ELSE (('')<>(v0.c2)) END, (((v0.c2)) NOT BETWEEN ((NULL COLLATE RTRIM)) AND ((((v0.c2) IS FALSE))))  NULLS LAST LIMIT 0x1;
SELECT * FROM v0, vt1 WHERE (((~ (0.7720882322688901)) IN (((vt1.c1) NOT BETWEEN (v0.c1) AND (v0.c1))))) ORDER BY (((((v0.c2)*(v0.c0)), v0.c2 COLLATE RTRIM))>((((v0.c0) NOTNULL), (v0.c1 IN ()))))  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((~ (0.7720882322688901)) IN (((vt1.c1) NOT BETWEEN (v0.c1) AND (v0.c1)))))AND(((((v0.c2)&(v0.c1))) NOTNULL)))) ORDER BY (((((v0.c2)*(v0.c0)), v0.c2 COLLATE RTRIM))>((((v0.c0) NOTNULL), (v0.c1 IN ()))))  NULLS LAST LIMIT 1;
SELECT * FROM v0, vt1 WHERE (((~ (0.7720882322688901)) IN (((vt1.c1) NOT BETWEEN (v0.c1) AND (v0.c1))))) ORDER BY (((((v0.c2)*(v0.c0)), v0.c2 COLLATE RTRIM))>((((v0.c0) NOTNULL), (v0.c1 IN ()))))  NULLS LAST;
SELECT DISTINCT * FROM v0, vt1 WHERE (((((~ (0.7720882322688901)) IN (((vt1.c1) NOT BETWEEN (v0.c1) AND (v0.c1)))))AND(((((v0.c2)&(v0.c1))) NOTNULL)))) ORDER BY (((((v0.c2)*(v0.c0)), v0.c2 COLLATE RTRIM))>((((v0.c0) NOTNULL), (v0.c1 IN ()))))  NULLS LAST LIMIT 1;
SELECT ALL MAX(v0.c2) FROM v0 LEFT OUTER JOIN vt1 ON ((json_quote(vt1.c0)) NOT NULL) WHERE (((((vt1.c1)|(v0.c1)))LIKE(((vt1.c0)<(v0.c1))))) ORDER BY (- (((v0.c1) NOTNULL))) DESC, CAST(json_insert(vt1.c1, v0.c1, vt1.c0) AS REAL)  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM v0 INNER JOIN vt1 ON ((json_quote(vt1.c0)) NOT NULL) WHERE (((((((vt1.c1)|(v0.c1)))LIKE(((vt1.c0)<(v0.c1)))))AND((((vt1.c1) ISNULL) IN (0.14679185039241938 COLLATE NOCASE, ((v0.c0)%(v0.c1))))))) ORDER BY (- (((v0.c1) NOTNULL))) DESC, CAST(json_insert(vt1.c1, v0.c1, vt1.c0) AS REAL)  NULLS FIRST INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 INNER JOIN vt1 ON ((json_quote(vt1.c0)) NOT NULL) WHERE (((((((((((v0.c2)OR(v0.c1 COLLATE RTRIM)))OR(vt1.c0 COLLATE BINARY)))OR(IFNULL(DISTINCT v0.c0, vt1.c0))))AND(SQLITE_COMPILEOPTION_GET(v0.c1))))OR(((vt1.c1)>>(x'ea'))))) ORDER BY (- (((v0.c1) NOTNULL))) DESC, CAST(json_insert(vt1.c1, v0.c1, vt1.c0) AS REAL)  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE ((vt1.c0)-(vt1.c0))  WHEN ((vt1.c0) IS FALSE) THEN ((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c0)) END);
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (CASE ((vt1.c0)-(vt1.c0))  WHEN ((vt1.c0) IS FALSE) THEN ((((((((((vt1.c1)AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1)))OR(vt1.c1)))AND(vt1.c0)) END) LIMIT 0x0;
SELECT * FROM v0 WHERE ((((~ (v0.c1))) BETWEEN (v0.c2 COLLATE NOCASE) AND (CAST(v0.c2 AS REAL)))) ORDER BY ((((((v0.c1)AND(v0.c1)))AND(v0.c1)))>=(((((v0.c2)AND(v0.c2)))OR(v0.c2)))), 0.546465383853977 DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((((((~ (v0.c1))) BETWEEN (v0.c2 COLLATE NOCASE) AND (CAST(v0.c2 AS REAL))))AND(((((((v0.c0) BETWEEN (v0.c0) AND (v0.c2)))AND((+ (v0.c1)))))AND((((v0.c1, '5FU'))>=((v0.c0, v0.c1)))))))) ORDER BY 'f' ASC LIMIT 0x0 INTERSECT SELECT ALL * FROM v0 WHERE (((v0.c1) BETWEEN (((v0.c0)==(v0.c1))) AND ('0'))) ORDER BY 'f' ASC LIMIT 0;
SELECT * FROM v0 WHERE ((((~ (v0.c1))) BETWEEN (v0.c2 COLLATE NOCASE) AND (CAST(v0.c2 AS REAL)))) ORDER BY ((((((v0.c1)AND(v0.c1)))AND(v0.c1)))>=(((((v0.c2)AND(v0.c2)))OR(v0.c2)))), 0.546465383853977 DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((((((~ (v0.c1))) BETWEEN (v0.c2 COLLATE NOCASE) AND (CAST(v0.c2 AS REAL))))AND(((((((v0.c0) BETWEEN (v0.c0) AND (v0.c2)))AND((+ (v0.c1)))))AND((((v0.c1, '5FU'))>=((v0.c0, v0.c1)))))))) ORDER BY 'f' ASC LIMIT 0x0 INTERSECT SELECT ALL * FROM v0 WHERE (((v0.c1) BETWEEN (((v0.c0)==(v0.c1))) AND ('0'))) ORDER BY 'f' ASC LIMIT 0;
SELECT MIN(v0.c1) FROM v0 WHERE (CAST((((v0.c0, v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, 0.5201306557500691, v0.c1, v0.c0)) AND ((v0.c1, v0.c1, '*Cst', v0.c2))) AS BLOB));
SELECT MIN(v0.c1) FROM v0 WHERE (CAST((((v0.c0, v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, 0.5201306557500691, v0.c1, v0.c0)) AND ((v0.c1, v0.c1, '*Cst', v0.c2))) AS BLOB)) INTERSECT SELECT ALL MIN(v0.c1) FROM v0 WHERE (((v0.c1)>=(v0.c2)) COLLATE RTRIM);
SELECT ALL * FROM v0 WHERE (CAST(((v0.c2)>>(v0.c0)) AS REAL)) ORDER BY (~ (((v0.c1) BETWEEN ('') AND (v0.c2)))) DESC;
SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c2)>>(v0.c0)) AS REAL)) ORDER BY ((v0.c2) NOT NULL) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (' ') ORDER BY ((v0.c2) NOT NULL) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM v0 WHERE (CAST(((v0.c2)>>(v0.c0)) AS REAL)) ORDER BY (~ (((v0.c1) BETWEEN ('') AND (v0.c2)))) DESC;
SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c2)>>(v0.c0)) AS REAL)) ORDER BY ((v0.c2) NOT NULL) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (' ') ORDER BY ((v0.c2) NOT NULL) DESC  NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM v0 WHERE (v0.c0);
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c0)AND(x'0bc486e8'))) ORDER BY CASE WHEN ((((((((((((((v0.c2)AND(v0.c0)))AND(v0.c2)))OR(v0.c2)))AND(v0.c1)))OR(v0.c0)))AND(v0.c2)))OR(v0.c2)) THEN ((((v0.c2)OR(v0.c2)))OR(v0.c1)) ELSE ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)) END  NULLS FIRST;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (x'' COLLATE BINARY) ORDER BY CASE (- (v0.c1))  WHEN 2103683344 THEN CAST(NULL AS NUMERIC) WHEN (v0.c0 IN ()) THEN ((((((v0.c1)OR(v0.c2)))AND(v0.c2)))OR(NULL)) WHEN v0.c1 COLLATE RTRIM THEN (('290912664') BETWEEN (v0.c0) AND (x'')) ELSE ((((((((v0.c0)OR(v0.c2)))OR(v0.c1)))OR(v0.c0)))OR(v0.c0)) END  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((x'' COLLATE BINARY)AND(v0.c0))) ORDER BY CAST(((((((v0.c1)AND(v0.c1)))AND(v0.c2)))OR(v0.c2)) AS TEXT) ASC, CAST(CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END AS TEXT) LIMIT 4;
SELECT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)AND(CASE WHEN vt1.c1 THEN vt1.c1 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))<=((vt1.c1, vt1.c0, vt1.c0)))) NOT NULL) DESC, ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))!=(vt1.c1));
SELECT DISTINCT * FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)AND(CASE WHEN vt1.c1 THEN vt1.c1 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) NOT BETWEEN ((0Xfffffffff03e50f7, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)), vt1.c1 COLLATE RTRIM, (((vt1.c1, 'YU 28T<N'))==((vt1.c1, vt1.c0))))) AND ((vt1.c0 COLLATE RTRIM, CAST(vt1.c0 AS REAL), NULLIF(vt1.c0, vt1.c0), CAST(vt1.c1 AS REAL))))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))<=((vt1.c1, vt1.c0, vt1.c0)))) NOT NULL) DESC, ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))!=(vt1.c1)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN vt1.c0 COLLATE RTRIM THEN ((vt1.c1) NOT NULL) WHEN vt1.c1 COLLATE NOCASE THEN ((vt1.c0) ISNULL) WHEN (- (vt1.c1)) THEN CAST(vt1.c0 AS INTEGER) END) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))<=((vt1.c1, vt1.c0, vt1.c0)))) NOT NULL) DESC, ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))<>(vt1.c1)) LIMIT 0;
SELECT * FROM vt1 WHERE (((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)AND(CASE WHEN vt1.c1 THEN vt1.c1 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))<=((vt1.c1, vt1.c0, vt1.c0)))) NOT NULL) DESC, ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))!=(vt1.c1));
SELECT DISTINCT * FROM vt1 WHERE (((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 END)AND(CASE WHEN vt1.c1 THEN vt1.c1 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END)))AND((((vt1.c0, vt1.c0, vt1.c0, vt1.c1)) NOT BETWEEN ((0Xfffffffff03e50f7, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)), vt1.c1 COLLATE RTRIM, (((vt1.c1, 'YU 28T<N'))==((vt1.c1, vt1.c0))))) AND ((vt1.c0 COLLATE RTRIM, CAST(vt1.c0 AS REAL), NULLIF(vt1.c0, vt1.c0), CAST(vt1.c1 AS REAL))))))) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))<=((vt1.c1, vt1.c0, vt1.c0)))) NOT NULL) DESC, ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))!=(vt1.c1)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (CASE WHEN vt1.c0 COLLATE RTRIM THEN ((vt1.c1) NOT NULL) WHEN vt1.c1 COLLATE NOCASE THEN ((vt1.c0) ISNULL) WHEN (- (vt1.c1)) THEN CAST(vt1.c0 AS INTEGER) END) ORDER BY (((((vt1.c0, vt1.c0, vt1.c1))<=((vt1.c1, vt1.c0, vt1.c0)))) NOT NULL) DESC, ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))<>(vt1.c1)) LIMIT 0;
SELECT MAX(v0.c1) FROM v0 WHERE (CASE WHEN v0.c0 THEN 0.596508777062062 WHEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)) THEN ((((v0.c0)OR(v0.c1)))AND(v0.c1)) WHEN (((v0.c2, v0.c1, v0.c1))>((v0.c0, v0.c0, v0.c2))) THEN (NOT (v0.c2)) END);
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((CASE WHEN v0.c0 THEN 0.596508777062062 WHEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)) THEN ((((v0.c0)OR(v0.c1)))AND(v0.c1)) WHEN (((v0.c2, v0.c1, v0.c1))>((v0.c0, v0.c0, v0.c2))) THEN (NOT (v0.c2)) END)AND(((((0Xffffffff826e7714) BETWEEN (v0.c1) AND ('407624694')))|((((v0.c1))<((v0.c1)))))))) INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((v0.c0 COLLATE RTRIM)LIKE(((v0.c1)IS(v0.c2)))));
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)%(vt1.c0)))OR(((vt1.c1) NOT NULL))))AND(((vt1.c1)IS NOT(vt1.c1)))))OR(CAST(vt1.c1 AS BLOB)))) ORDER BY CASE '1404114543'  WHEN ((vt1.c1)<<(vt1.c1)) THEN vt1.c0 COLLATE NOCASE WHEN ((vt1.c1) NOT NULL) THEN ((vt1.c1)||(vt1.c0)) WHEN vt1.c1 COLLATE BINARY THEN (((vt1.c1))>((vt1.c1))) ELSE '0.720051464772481' END, ((((vt1.c0)||(vt1.c0)))GLOB((((vt1.c1, vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c1)) AND ((x'24de', vt1.c1, vt1.c1)))))  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((((((vt1.c0)%(vt1.c0)))OR(((vt1.c1) NOT NULL))))AND(((vt1.c1)IS NOT(vt1.c1)))))OR(CAST(vt1.c1 AS BLOB)))) ORDER BY (((((((vt1.c1 IN (vt1.c1)))AND(((vt1.c0) IS FALSE))))AND((((vt1.c0))=((vt1.c0))))))AND((vt1.c0 IN (vt1.c1)))) DESC, ((((vt1.c0) NOT NULL)) NOTNULL)  NULLS FIRST LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt1 WHERE ('0.9079857999125378');
SELECT ALL COUNT(*) FROM vt1 WHERE ('0.9079857999125378');
SELECT ALL COUNT(*) FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c0) AND (NULL)))-(((vt1.c1) IS FALSE))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c0) AND (NULL)))-(((vt1.c1) IS FALSE)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((vt1.c1 COLLATE RTRIM)OR(((((((((vt1.c0)AND(vt1.c1)))AND(vt1.c0)))AND(vt1.c1)))OR(vt1.c0)))));
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE (((vt1.c0))=((vt1.c1)))  WHEN 0x58dad372 THEN ((vt1.c0)/(vt1.c0)) WHEN CASE vt1.c1  WHEN 0.12603882882490192 THEN vt1.c0 END THEN ((vt1.c0) IS TRUE) WHEN ((vt1.c0)GLOB(vt1.c0)) THEN ((vt1.c1) ISNULL) WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN 'yqm' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (((NULL)) NOT BETWEEN ((NULL)) AND ((vt1.c1))) ELSE ((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)) END);
SELECT COUNT(*) FROM vt1 WHERE (CASE (((vt1.c0))==((vt1.c1)))  WHEN 0X58dad372 THEN ((vt1.c0)/(vt1.c0)) WHEN CASE vt1.c1  WHEN 0.12603882882490192 THEN vt1.c0 END THEN ((vt1.c0) IS TRUE) WHEN ((vt1.c0)GLOB(vt1.c0)) THEN ((vt1.c1) ISNULL) WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN 'yqm' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END THEN (((NULL)) NOT BETWEEN ((NULL)) AND ((vt1.c1))) ELSE ((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)) END) LIMIT 0;
SELECT MIN(vt1.c1) FROM vt1 WHERE (((vt1.c1 COLLATE NOCASE)||(vt1.c0)));
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((vt1.c1 COLLATE NOCASE)||(vt1.c0))) ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END)IS((- (vt1.c0)))) DESC, ((vt1.c0)>=(vt1.c1)) COLLATE RTRIM INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (COALESCE(vt1.c0 COLLATE RTRIM, (vt1.c0 IN (-887341234)), ((((((vt1.c0)AND(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))) ORDER BY ((CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END)IS((- (vt1.c0)))) DESC, ((vt1.c0)>=(vt1.c1)) COLLATE RTRIM;
SELECT ALL MAX(vt1.c1) FROM vt1, v0 WHERE (CASE ((vt1.c1)*(vt1.c1))  WHEN (v0.c2 IN ()) THEN (((vt1.c0, vt1.c0))!=((v0.c2, vt1.c0))) END);
SELECT MAX(vt1.c1) FROM vt1, v0 WHERE (((CASE ((vt1.c1)*(vt1.c1))  WHEN (v0.c2 IN ()) THEN (((vt1.c0, vt1.c0))!=((v0.c2, vt1.c0))) END)AND(DATETIME(((((((((((vt1.c1)OR(v0.c1)))AND(v0.c2)))OR(v0.c0)))AND(1654447368)))OR(v0.c2)), vt1.c0, CAST(v0.c1 AS BLOB), ((vt1.c1) NOT NULL), ((v0.c2) NOT NULL))))) ORDER BY ((((vt1.c0))=((v0.c1))) IN (((vt1.c1) NOTNULL)))  NULLS LAST LIMIT 0X2 INTERSECT SELECT MAX(vt1.c1) FROM vt1, v0 WHERE ((((v0.c1)>(v0.c1)) IN ())) ORDER BY ((((vt1.c0))=((v0.c1))) IN (((vt1.c1) NOTNULL)))  NULLS LAST LIMIT 0x2;
SELECT COUNT(*) FROM vt1, v0 WHERE (((vt1.c0) BETWEEN (v0.c2 COLLATE RTRIM) AND (v0.c0 COLLATE BINARY))) ORDER BY ((v0.c0)GLOB(vt1.c1)) COLLATE BINARY ASC  NULLS LAST, x'' ASC  NULLS LAST, CASE WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c1)) THEN ((v0.c1) ISNULL) ELSE ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) END DESC;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((((vt1.c0) BETWEEN (v0.c2 COLLATE RTRIM) AND (v0.c0 COLLATE BINARY)))AND(TYPEOF(v0.c0)))) ORDER BY ((((vt1.c0) NOT BETWEEN (v0.c1) AND (v0.c2)))=(((((vt1.c1)OR(-264351497)))OR(v0.c2)))) ASC  NULLS LAST LIMIT 0X4 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (LIKELY(DISTINCT ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)))) ORDER BY ((((vt1.c0) NOT BETWEEN (v0.c1) AND (v0.c2)))=(((((vt1.c1)OR(-264351497)))OR(v0.c2)))) ASC  NULLS LAST LIMIT 0x4;
SELECT * FROM v0 WHERE ((~ (((v0.c1)AND(v0.c1))))) ORDER BY (((v0.c0, v0.c2)) BETWEEN ((((v0.c1) NOTNULL), v0.c0)) AND (((((v0.c0, v0.c0)) NOT BETWEEN ((v0.c0, v0.c2)) AND ((v0.c0, v0.c0))), LIKELIHOOD(NULL, v0.c2))))  NULLS FIRST, (CAST(v0.c2 AS TEXT) IN (COALESCE(v0.c0, v0.c1))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((~ (((v0.c1)AND(v0.c1))))) ORDER BY ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) COLLATE RTRIM  NULLS LAST, ((((v0.c2 COLLATE RTRIM)OR(((((((v0.c0)OR(v0.c2)))OR(v0.c2)))OR(v0.c2)))))AND((+ (v0.c1)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((0.16603399792018825 IN ())) ORDER BY ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) COLLATE RTRIM  NULLS LAST, ((((v0.c2 COLLATE RTRIM)OR(((((((v0.c0)OR(v0.c2)))OR(v0.c2)))OR(v0.c2)))))AND((+ (v0.c1)))) LIMIT 0;
SELECT * FROM v0 WHERE ((~ (((v0.c1)AND(v0.c1))))) ORDER BY (((v0.c0, v0.c2)) BETWEEN ((((v0.c1) NOTNULL), v0.c0)) AND (((((v0.c0, v0.c0)) NOT BETWEEN ((v0.c0, v0.c2)) AND ((v0.c0, v0.c0))), LIKELIHOOD(NULL, v0.c2))))  NULLS FIRST, (CAST(v0.c2 AS TEXT) IN (COALESCE(v0.c0, v0.c1))) DESC  NULLS LAST;
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((((CASE v0.c0  WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END, CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END, (+ (v0.c1))))<=((CAST(v0.c0 AS REAL), (((v0.c1, 0.5953332542684684, v0.c1))>((v0.c2, v0.c0, v0.c0))), ((v0.c1) IS FALSE))))) ORDER BY ((((('-29570551')AND(v0.c1)))AND(v0.c0)) IN (((v0.c0)||(v0.c0)))), v0.c2 COLLATE NOCASE ASC  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ((((CASE v0.c0  WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END, CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END, (+ (v0.c1))))<=((CAST(v0.c0 AS REAL), (((v0.c1, 0.5953332542684684, v0.c1))>((v0.c2, v0.c0, v0.c0))), ((v0.c1) IS FALSE))))) ORDER BY ((((('-29570551')AND(v0.c1)))AND(v0.c0)) IN (((v0.c0)||(v0.c0)))), v0.c2 COLLATE NOCASE ASC  NULLS LAST INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((0.9633115728778252)<=(CAST(v0.c1 AS TEXT)))) ORDER BY ((((('-29570551')AND(v0.c1)))AND(v0.c0)) IN (((v0.c0)||(v0.c0)))), v0.c2 COLLATE NOCASE ASC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (CASE NULL  WHEN ((x'')+(vt1.c1)) THEN ((v0.c0)|(v0.c1)) END);
SELECT * FROM vt1, v0 WHERE (((CASE NULL  WHEN ((x'')+(vt1.c1)) THEN ((v0.c0)|(v0.c1)) END)AND(((CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END) IS FALSE)))) ORDER BY ABS((v0.c1 IN (0.476291940941993))) DESC  NULLS FIRST, CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END THEN v0.c1 COLLATE NOCASE WHEN ((v0.c0) IS FALSE) THEN ((v0.c2) BETWEEN (v0.c2) AND (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c0 END END LIMIT 4 INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((NOT (TYPEOF('1159888057')))) ORDER BY ABS((v0.c1 IN (0.476291940941993))) DESC  NULLS FIRST, CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END THEN v0.c1 COLLATE NOCASE WHEN ((v0.c0) IS FALSE) THEN ((v0.c2) BETWEEN (v0.c2) AND (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c0 END END LIMIT 0x4;
SELECT * FROM vt1, v0 WHERE (CASE NULL  WHEN ((x'')+(vt1.c1)) THEN ((v0.c0)|(v0.c1)) END);
SELECT * FROM vt1, v0 WHERE (((CASE NULL  WHEN ((x'')+(vt1.c1)) THEN ((v0.c0)|(v0.c1)) END)AND(((CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END) IS FALSE)))) ORDER BY ABS((v0.c1 IN (0.476291940941993))) DESC  NULLS FIRST, CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END THEN v0.c1 COLLATE NOCASE WHEN ((v0.c0) IS FALSE) THEN ((v0.c2) BETWEEN (v0.c2) AND (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c0 END END LIMIT 4 INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((NOT (TYPEOF('1159888057')))) ORDER BY ABS((v0.c1 IN (0.476291940941993))) DESC  NULLS FIRST, CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END THEN v0.c1 COLLATE NOCASE WHEN ((v0.c0) IS FALSE) THEN ((v0.c2) BETWEEN (v0.c2) AND (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN v0.c1 ELSE v0.c0 END END LIMIT 0x4;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (CASE (v0.c1 IN ())  WHEN ((((((vt1.c1)OR(vt1.c0)))OR(v0.c0)))OR(v0.c2)) THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 ELSE x'6008df' END WHEN v0.c1 THEN 0.7873306839493331 COLLATE RTRIM ELSE (NOT (vt1.c0)) END);
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((CASE (v0.c1 IN ())  WHEN ((((((vt1.c1)OR(vt1.c0)))OR(v0.c0)))OR(v0.c2)) THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 ELSE x'6008df' END WHEN v0.c1 THEN 0.7873306839493331 COLLATE RTRIM ELSE (NOT (vt1.c0)) END)AND(((((vt1.c1) NOT NULL))<((vt1.c0 IN ())))))) LIMIT 4;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (CASE (v0.c1 IN ())  WHEN ((((((vt1.c1)OR(vt1.c0)))OR(v0.c0)))OR(v0.c2)) THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 ELSE x'6008df' END WHEN v0.c1 THEN 0.7873306839493331 COLLATE RTRIM ELSE (NOT (vt1.c0)) END);
SELECT DISTINCT * FROM v0 NATURAL JOIN vt1 WHERE (((CASE (v0.c1 IN ())  WHEN ((((((vt1.c1)OR(vt1.c0)))OR(v0.c0)))OR(v0.c2)) THEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 ELSE x'6008df' END WHEN v0.c1 THEN 0.7873306839493331 COLLATE RTRIM ELSE (NOT (vt1.c0)) END)AND(((((vt1.c1) NOT NULL))<((vt1.c0 IN ())))))) LIMIT 4;
SELECT COUNT(*) FROM vt1, v0 WHERE ((CAST(vt1.c0 AS BLOB) IN ())) ORDER BY ((CAST(vt1.c0 AS REAL))LIKE(0xffffffff8e40ac39)) ASC  NULLS LAST, '' DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((CAST(vt1.c0 AS BLOB) IN ())) ORDER BY CASE vt1.c0  WHEN (vt1.c1 IN (vt1.c0)) THEN v0.c2 COLLATE BINARY END, ((((v0.c2)AND(((vt1.c1)>(vt1.c0)))))AND(CAST(v0.c0 AS INTEGER)));
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (CAST(ABS(DISTINCT vt1.c0) AS NUMERIC));
SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE (CAST(ABS(DISTINCT vt1.c0) AS NUMERIC)) ORDER BY vt1.c0  NULLS LAST LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt1, v0 WHERE (((CASE WHEN vt1.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN vt1.c1 THEN vt1.c0 WHEN '
乪' THEN v0.c0 END)|(v0.c1))) ORDER BY vt1.c0  NULLS LAST LIMIT 2;
SELECT ALL * FROM v0 NOT INDEXED, vt1 WHERE (((((v0.c0)<(vt1.c0)))IS NOT(CASE v0.c2  WHEN v0.c0 THEN vt1.c0 END)));
SELECT ALL * FROM v0, vt1 WHERE (((((((v0.c0)<(vt1.c0)))IS NOT(CASE v0.c2  WHEN v0.c0 THEN vt1.c0 END)))AND((((v0.c1, vt1.c1)) NOT BETWEEN ((((0.8995619926664185)+(v0.c2)), vt1.c1)) AND ((((((((((vt1.c0)OR(v0.c0)))OR(vt1.c0)))OR(v0.c2)))OR(v0.c1)), ((((((((v0.c2)OR(v0.c2)))AND(v0.c0)))OR(vt1.c0)))AND(v0.c2)))))))) ORDER BY (CASE v0.c0  WHEN 0.1815678517994589 THEN v0.c1 END IN (LIKELIHOOD(DISTINCT vt1.c1, v0.c2), ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)), v0.c1 COLLATE BINARY)) DESC, (((vt1.c0) BETWEEN (v0.c0) AND (vt1.c1)) IN ())  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((((((((v0.c0)OR(vt1.c1)))OR(v0.c0)))OR(((x'2f')>=(vt1.c1)))))OR(((vt1.c0) BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY (CASE v0.c0  WHEN 0.1815678517994589 THEN v0.c1 END IN (LIKELIHOOD(DISTINCT vt1.c1, v0.c2), ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)), v0.c1 COLLATE BINARY)) DESC, (((vt1.c0) BETWEEN (v0.c0) AND (vt1.c1)) IN ())  NULLS LAST;
SELECT ALL * FROM v0 NOT INDEXED, vt1 WHERE (((((v0.c0)<(vt1.c0)))IS NOT(CASE v0.c2  WHEN v0.c0 THEN vt1.c0 END)));
SELECT ALL * FROM v0, vt1 WHERE (((((((v0.c0)<(vt1.c0)))IS NOT(CASE v0.c2  WHEN v0.c0 THEN vt1.c0 END)))AND((((v0.c1, vt1.c1)) NOT BETWEEN ((((0.8995619926664185)+(v0.c2)), vt1.c1)) AND ((((((((((vt1.c0)OR(v0.c0)))OR(vt1.c0)))OR(v0.c2)))OR(v0.c1)), ((((((((v0.c2)OR(v0.c2)))AND(v0.c0)))OR(vt1.c0)))AND(v0.c2)))))))) ORDER BY (CASE v0.c0  WHEN 0.1815678517994589 THEN v0.c1 END IN (LIKELIHOOD(DISTINCT vt1.c1, v0.c2), ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)), v0.c1 COLLATE BINARY)) DESC, (((vt1.c0) BETWEEN (v0.c0) AND (vt1.c1)) IN ())  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE (((((((((v0.c0)OR(vt1.c1)))OR(v0.c0)))OR(((x'2f')>=(vt1.c1)))))OR(((vt1.c0) BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY (CASE v0.c0  WHEN 0.1815678517994589 THEN v0.c1 END IN (LIKELIHOOD(DISTINCT vt1.c1, v0.c2), ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)), v0.c1 COLLATE BINARY)) DESC, (((vt1.c0) BETWEEN (v0.c0) AND (vt1.c1)) IN ())  NULLS LAST;
SELECT MAX(vt1.c1) FROM v0, vt1 WHERE (789072142) ORDER BY ((CASE v0.c1  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 END) BETWEEN (((v0.c1) BETWEEN (v0.c0) AND (v0.c2))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (x'9ae593')))) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (((789072142)AND((((v0.c2)>>(v0.c2)) IN (v0.c0))))) ORDER BY ((((((((((((vt1.c0)OR(((v0.c1) ISNULL))))OR(CHANGES())))AND(v0.c0)))OR(((vt1.c0)AND(v0.c0)))))AND(CAST(vt1.c1 AS TEXT))))AND(((vt1.c0)%(v0.c2))))  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM v0, vt1 WHERE (CAST(vt1.c1 AS TEXT) COLLATE RTRIM) ORDER BY ((((((((((((vt1.c0)OR(((v0.c1) ISNULL))))OR(CHANGES())))AND(v0.c0)))OR(((vt1.c0)AND(v0.c0)))))AND(CAST(vt1.c1 AS TEXT))))AND(((vt1.c0)%(v0.c2))))  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM v0 WHERE (LOWER(DISTINCT 0xffffffff85151f27)) ORDER BY ((((- (v0.c0)), v0.c2))<=(('-535072201', v0.c1)))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (LOWER(DISTINCT -2062213337)) ORDER BY ((((- (v0.c0)), v0.c2))<=(('-535072201', v0.c1)))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((v0.c0, NULL, v0.c2)) BETWEEN ((((((((v0.c2)AND(v0.c1)))OR(v0.c0)))AND(v0.c2)), v0.c0, v0.c2 COLLATE RTRIM)) AND ((v0.c2 COLLATE BINARY, ((v0.c0)>('-326459721')), CAST(v0.c2 AS TEXT))))) ORDER BY ((((- (v0.c0)), v0.c2))<=(('-535072201', v0.c1)))  NULLS FIRST LIMIT 1;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((((vt1.c0)|(NULL)) IN (vt1.c0, json_quote(vt1.c0)))) ORDER BY NULL;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE ((((((vt1.c0)|(NULL)) IN (vt1.c0, json_quote(vt1.c0))))AND(UPPER(((vt1.c0) ISNULL))))) ORDER BY NULL;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((ABS(v0.c2)) NOT BETWEEN ((v0.c2 IN (v0.c2))) AND (CAST(v0.c0 AS TEXT)))) ORDER BY ((((v0.c2 IN (v0.c0)), -56133505, v0.c0))<=(((((NULL, v0.c1))>=((v0.c1, v0.c2))), CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END, (v0.c2 IN ()))))  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((ABS(v0.c2)) NOT BETWEEN ((v0.c2 IN (v0.c2))) AND (CAST(v0.c0 AS TEXT)))) ORDER BY ((((v0.c2 IN (v0.c0)), 0xfffffffffca7787f, v0.c0))<=(((((NULL, v0.c1))>=((v0.c1, v0.c2))), CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END, (v0.c2 IN ()))))  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt1 WHERE (((vt1.c0) NOTNULL)) ORDER BY (~ (CASE WHEN vt1.c1 THEN v0.c2 ELSE 0.7041153937115204 END));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((vt1.c0) NOTNULL)) ORDER BY (~ (CASE WHEN vt1.c1 THEN v0.c2 ELSE 0.7041153937115204 END)) LIMIT 3 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 NOT INDEXED, vt1 WHERE ((((load_extension(v0.c1)))>=((((vt1.c1)IS(x'')))))) ORDER BY (~ (CASE WHEN vt1.c1 THEN v0.c2 ELSE 0.7041153937115204 END)) LIMIT 0x3;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 AS REAL)) NOT NULL));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c0 AS REAL)) NOT NULL)) ORDER BY (vt1.c0 COLLATE BINARY IN ()) LIMIT 0x5 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE ((~ (vt1.c1 COLLATE RTRIM))) ORDER BY (vt1.c0 COLLATE BINARY IN ()) LIMIT 0X5;
SELECT ALL COUNT(*) FROM v0 CROSS JOIN vt1 ON (((CAST(v0.c0 AS INTEGER), ((v0.c2)<>(vt1.c0)), ((v0.c0) NOTNULL)))==((((vt1.c0) BETWEEN (NULL) AND (v0.c0)), ((v0.c1)>=(vt1.c0)), NULL))) WHERE (highlight(v0.c0, v0.c1, v0.c1, vt1.c1) COLLATE NOCASE) ORDER BY ((('-707585088'))>=(((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((vt1.c0))))))  NULLS FIRST, LOWER(DISTINCT IFNULL(DISTINCT NULL, vt1.c0)) DESC;
SELECT ALL COUNT(*) FROM v0 CROSS JOIN vt1 ON (((CAST(v0.c0 AS INTEGER), ((v0.c2)!=(vt1.c0)), ((v0.c0) NOTNULL)))==((((vt1.c0) BETWEEN (NULL) AND (v0.c0)), ((v0.c1)>=(vt1.c0)), NULL))) WHERE (highlight(v0.c0, v0.c1, v0.c1, vt1.c1) COLLATE NOCASE) ORDER BY (vt1.c1 COLLATE BINARY IN ()) ASC  NULLS LAST, (+ (0xffffffffd188ea88)), ((vt1.c1)>>(v0.c0)) COLLATE RTRIM ASC INTERSECT SELECT ALL COUNT(*) FROM v0 CROSS JOIN vt1 ON (((CAST(v0.c0 AS INTEGER), ((v0.c2)!=(vt1.c0)), ((v0.c0) NOTNULL)))=((((vt1.c0) BETWEEN (NULL) AND (v0.c0)), ((v0.c1)>=(vt1.c0)), NULL))) WHERE (v0.c0) ORDER BY (vt1.c1 COLLATE BINARY IN ()) ASC  NULLS LAST, (+ (0xffffffffd188ea88)), ((vt1.c1)>>(v0.c0)) COLLATE RTRIM ASC;
SELECT * FROM v0, vt1 WHERE ((((+ (v0.c1)))IS(CAST('1121701740' AS REAL)))) ORDER BY ((NULL) NOT BETWEEN (CASE WHEN vt1.c0 THEN v0.c0 END) AND ((vt1.c0 IN (0.5138318291476706)))), CAST(v0.c0 AS REAL) COLLATE BINARY DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE ((((((+ (v0.c1)))IS(CAST('1121701740' AS REAL))))AND(((((vt1.c1) NOT NULL))-((vt1.c1 IN (v0.c1, v0.c1))))))) ORDER BY ((NULL) NOT BETWEEN (CASE WHEN vt1.c0 THEN v0.c0 END) AND ((vt1.c0 IN (0.5138318291476706)))), CAST(v0.c0 AS REAL) COLLATE BINARY DESC  NULLS FIRST LIMIT 0X5;
SELECT * FROM v0, vt1 WHERE ((((+ (v0.c1)))IS(CAST('1121701740' AS REAL)))) ORDER BY ((NULL) NOT BETWEEN (CASE WHEN vt1.c0 THEN v0.c0 END) AND ((vt1.c0 IN (0.5138318291476706)))), CAST(v0.c0 AS REAL) COLLATE BINARY DESC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE ((((((+ (v0.c1)))IS(CAST('1121701740' AS REAL))))AND(((((vt1.c1) NOT NULL))-((vt1.c1 IN (v0.c1, v0.c1))))))) ORDER BY ((NULL) NOT BETWEEN (CASE WHEN vt1.c0 THEN v0.c0 END) AND ((vt1.c0 IN (0.5138318291476706)))), CAST(v0.c0 AS REAL) COLLATE BINARY DESC  NULLS FIRST LIMIT 0X5;
SELECT MAX(v0.c1) FROM v0, vt1 WHERE (((v0.c1 COLLATE BINARY)IS NOT(CAST(vt1.c0 AS TEXT)))) ORDER BY (((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c0))))<=(']'))  NULLS FIRST, NULLIF(vt1.c1, v0.c1) COLLATE RTRIM;
SELECT DISTINCT MAX(v0.c1) FROM v0, vt1 WHERE (((((v0.c1 COLLATE BINARY)IS NOT(CAST(vt1.c0 AS TEXT))))AND(CASE WHEN ((((((((vt1.c0)AND(v0.c2)))OR(0xffffffffa124040b)))AND(v0.c0)))AND(v0.c1)) THEN NULL END))) ORDER BY (((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c0))))<=(']'))  NULLS FIRST, NULLIF(vt1.c1, v0.c1) COLLATE RTRIM LIMIT 1;
SELECT * FROM v0, vt1 WHERE ((- (CASE vt1.c1  WHEN x'' THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN '' END)));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((- (CASE vt1.c1  WHEN x'' THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN '' END)))AND((+ (((v0.c0)IS NOT(vt1.c1))))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND ('熨?麵K(<띏|'))) IS TRUE) ASC, (((vt1.c1, v0.c1, v0.c2)) BETWEEN (((((v0.c0, v0.c0)) BETWEEN ((v0.c2, v0.c2)) AND ((v0.c1, v0.c2))), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)), (((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))))) AND ((((0.7829503794355364)>>(v0.c0)), (((x'faf827'))>((vt1.c0))), ((vt1.c0)%(vt1.c1))))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c0) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND ('熨?麵K(<띏|'))) IS TRUE) ASC, (((vt1.c1, v0.c1, v0.c2)) BETWEEN (((((v0.c0, v0.c0)) BETWEEN ((v0.c2, v0.c2)) AND ((v0.c1, v0.c2))), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)), (((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))))) AND ((((0.7829503794355364)>>(v0.c0)), (((x'faf827'))>((vt1.c0))), ((vt1.c0)%(vt1.c1)))));
SELECT * FROM v0, vt1 WHERE ((- (CASE vt1.c1  WHEN x'' THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN '' END)));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((- (CASE vt1.c1  WHEN x'' THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN '' END)))AND((+ (((v0.c0)IS NOT(vt1.c1))))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND ('熨?麵K(<띏|'))) IS TRUE) ASC, (((vt1.c1, v0.c1, v0.c2)) BETWEEN (((((v0.c0, v0.c0)) BETWEEN ((v0.c2, v0.c2)) AND ((v0.c1, v0.c2))), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)), (((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))))) AND ((((0.7829503794355364)>>(v0.c0)), (((x'faf827'))>((vt1.c0))), ((vt1.c0)%(vt1.c1))))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c0) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND ('熨?麵K(<띏|'))) IS TRUE) ASC, (((vt1.c1, v0.c1, v0.c2)) BETWEEN (((((v0.c0, v0.c0)) BETWEEN ((v0.c2, v0.c2)) AND ((v0.c1, v0.c2))), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)), (((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))))) AND ((((0.7829503794355364)>>(v0.c0)), (((x'faf827'))>((vt1.c0))), ((vt1.c0)%(vt1.c1)))));
SELECT ALL COUNT(*) FROM v0 NOT INDEXED WHERE (((0x1cfcde99) IS FALSE));
SELECT COUNT(*) FROM v0 NOT INDEXED WHERE (((486334105) IS FALSE));
SELECT MIN(v0.c1) FROM v0, vt1 WHERE (((ABS(vt1.c1)) NOT NULL));
SELECT MIN(v0.c1) FROM v0, vt1 WHERE (((ABS(vt1.c1)) NOT NULL)) ORDER BY ((((v0.c2)!=(v0.c2)))&(((v0.c1)!=(vt1.c0))));
SELECT ALL MAX(v0.c2) FROM v0 WHERE (CASE ((v0.c2)|(v0.c1))  WHEN CAST(v0.c2 AS NUMERIC) THEN v0.c1 COLLATE BINARY WHEN MAX(v0.c2, v0.c0, v0.c1) THEN ((v0.c1) NOTNULL) WHEN 'n' THEN v0.c2 ELSE ((x'629d') NOT BETWEEN (v0.c1) AND (v0.c1)) END);
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((CASE ((v0.c2)|(v0.c1))  WHEN CAST(v0.c2 AS NUMERIC) THEN v0.c1 COLLATE BINARY WHEN MAX(v0.c2, v0.c0, v0.c1) THEN ((v0.c1) NOTNULL) WHEN 'n' THEN v0.c2 ELSE ((x'629d') NOT BETWEEN (v0.c1) AND (v0.c1)) END)AND(CAST(((v0.c0) IS TRUE) AS TEXT)))) LIMIT 0x0;
SELECT ALL MAX(v0.c2) FROM v0 LEFT OUTER JOIN vt1 ON '2145813896' WHERE (((((0.7411349524039533)AND(vt1.c1)))LIKE(CASE v0.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN vt1.c0 ELSE v0.c0 END))) ORDER BY v0.c2 DESC, (- ((v0.c0 IN (vt1.c0)))), ((((vt1.c1) IS FALSE))<=(((((((vt1.c0)OR(vt1.c1)))OR(vt1.c1)))AND(v0.c1)))) ASC  NULLS LAST;
SELECT MAX(v0.c2) FROM v0 INNER JOIN vt1 ON '2145813896' WHERE (((((0.7411349524039533)AND(vt1.c1)))LIKE(CASE v0.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN vt1.c0 ELSE v0.c0 END))) ORDER BY (((('6')|(v0.c0))) NOT NULL) DESC  NULLS LAST LIMIT 0X3;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (0x1af7d220);
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((0x1af7d220)AND(CASE ((vt1.c0) IS FALSE)  WHEN ((vt1.c1)<>(vt1.c0)) THEN ((((vt1.c1)AND(vt1.c0)))OR(vt1.c1)) ELSE vt1.c1 COLLATE RTRIM END))) LIMIT 2;
SELECT * FROM vt1, v0 WHERE (((((((x'' COLLATE NOCASE)AND(CAST(v0.c2 AS REAL))))AND('xjQe5P')))AND(SUBSTR(v0.c2, v0.c1))));
SELECT DISTINCT * FROM vt1, v0 WHERE (((((((((x'' COLLATE NOCASE)AND(CAST(v0.c2 AS REAL))))AND('xjQe5P')))AND(SUBSTR(v0.c2, v0.c1))))AND(json_type(vt1.c0 COLLATE RTRIM)))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (NULL);
SELECT * FROM vt1, v0 WHERE (((((((x'' COLLATE NOCASE)AND(CAST(v0.c2 AS REAL))))AND('xjQe5P')))AND(SUBSTR(v0.c2, v0.c1))));
SELECT DISTINCT * FROM vt1, v0 WHERE (((((((((x'' COLLATE NOCASE)AND(CAST(v0.c2 AS REAL))))AND('xjQe5P')))AND(SUBSTR(v0.c2, v0.c1))))AND(json_type(vt1.c0 COLLATE RTRIM)))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (NULL);
SELECT ALL * FROM vt1 INNER JOIN v0 ON x'1c4e3c' COLLATE NOCASE WHERE ((((x'9e69'))>(((((vt1.c0, v0.c2, v0.c1, vt1.c0))>((vt1.c1, vt1.c0, vt1.c1, v0.c1))))))) ORDER BY (((x'', v0.c2)) BETWEEN ((((((((vt1.c1)AND(vt1.c1)))OR(v0.c2)))AND(vt1.c1)), vt1.c0)) AND ((v0.c1, ((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1))))), (~ (((vt1.c1) ISNULL))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON x'1c4e3c' COLLATE NOCASE WHERE ((((((x'9e69'))>(((((vt1.c0, v0.c2, v0.c1, vt1.c0))>((vt1.c1, vt1.c0, vt1.c1, v0.c1)))))))AND(v0.c2))) ORDER BY (((x'', v0.c2)) BETWEEN ((((((((vt1.c1)AND(vt1.c1)))OR(v0.c2)))AND(vt1.c1)), vt1.c0)) AND ((v0.c1, ((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1))))), (~ (((vt1.c1) ISNULL))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 INNER JOIN v0 ON x'1c4e3c' COLLATE NOCASE WHERE ((((x'9e69'))>(((((vt1.c0, v0.c2, v0.c1, vt1.c0))>((vt1.c1, vt1.c0, vt1.c1, v0.c1))))))) ORDER BY (((x'', v0.c2)) BETWEEN ((((((((vt1.c1)AND(vt1.c1)))OR(v0.c2)))AND(vt1.c1)), vt1.c0)) AND ((v0.c1, ((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1))))), (~ (((vt1.c1) ISNULL))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 INNER JOIN v0 ON x'1c4e3c' COLLATE NOCASE WHERE ((((((x'9e69'))>(((((vt1.c0, v0.c2, v0.c1, vt1.c0))>((vt1.c1, vt1.c0, vt1.c1, v0.c1)))))))AND(v0.c2))) ORDER BY (((x'', v0.c2)) BETWEEN ((((((((vt1.c1)AND(vt1.c1)))OR(v0.c2)))AND(vt1.c1)), vt1.c0)) AND ((v0.c1, ((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1))))), (~ (((vt1.c1) ISNULL))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (vt1.c1) ORDER BY (~ (v0.c2)) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (vt1.c1) ORDER BY (~ (v0.c2)) DESC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (vt1.c1) ORDER BY (~ (v0.c2)) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (vt1.c1) ORDER BY (~ (v0.c2)) DESC  NULLS LAST LIMIT 2;
SELECT * FROM vt1, v0 WHERE ((((NOT (v0.c1)))*(((0.522776816773483)OR(v0.c1)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((NOT (v0.c1)))*(((0.522776816773483)OR(v0.c1))))) ORDER BY CAST((+ (v0.c2)) AS INTEGER) DESC  NULLS LAST, CAST(((v0.c2)<=(vt1.c1)) AS INTEGER) DESC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE ((((NOT (v0.c1)))*(((0.522776816773483)OR(v0.c1)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((NOT (v0.c1)))*(((0.522776816773483)OR(v0.c1))))) ORDER BY CAST((+ (v0.c2)) AS INTEGER) DESC  NULLS LAST, CAST(((v0.c2)<=(vt1.c1)) AS INTEGER) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))|((~ (v0.c0))))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))/(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2))))  NULLS LAST, TRIM(TRIM(v0.c2, v0.c1));
SELECT * FROM v0 WHERE (((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))|((~ (v0.c0))))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))/(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2))))  NULLS LAST, TRIM(TRIM(v0.c2, v0.c1)) LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))|((~ (v0.c0))))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))/(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2))))  NULLS LAST, TRIM(TRIM(v0.c2, v0.c1));
SELECT * FROM v0 WHERE (((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))|((~ (v0.c0))))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))/(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2))))  NULLS LAST, TRIM(TRIM(v0.c2, v0.c1)) LIMIT 0X0;
SELECT * FROM v0 WHERE ((((((((v0.c2, v0.c0)) BETWEEN ((x'35', v0.c0)) AND ((v0.c1, v0.c1))))AND(v0.c1)))AND((v0.c1 IN (v0.c1, v0.c2, v0.c1))))) ORDER BY ABS((NULL IN (v0.c0, v0.c0))) ASC  NULLS FIRST, CASE WHEN '-1530842596' THEN json_type(v0.c2) WHEN CAST(v0.c0 AS INTEGER) THEN CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END WHEN (~ (v0.c2)) THEN CAST(v0.c1 AS REAL) ELSE (((v0.c1, v0.c2))>=(('-915029424', v0.c2))) END  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((((((v0.c2, v0.c0)) BETWEEN ((x'35', v0.c0)) AND ((v0.c1, v0.c1))))AND(v0.c1)))AND((v0.c1 IN (v0.c1, v0.c2, v0.c1))))) ORDER BY ABS((NULL IN (v0.c0, v0.c0))) ASC  NULLS FIRST, CASE WHEN '-1530842596' THEN json_type(v0.c2) WHEN CAST(v0.c0 AS INTEGER) THEN CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END WHEN (~ (v0.c2)) THEN CAST(v0.c1 AS REAL) ELSE (((v0.c1, v0.c2))>=(('-915029424', v0.c2))) END  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((('0.13557839073463107')<=(((v0.c1)<=(v0.c2))))) ORDER BY ABS((NULL IN (v0.c0, v0.c0))) ASC  NULLS FIRST, CASE WHEN '-1530842596' THEN json_type(v0.c2) WHEN CAST(v0.c0 AS INTEGER) THEN CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END WHEN (~ (v0.c2)) THEN CAST(v0.c1 AS REAL) ELSE (((v0.c1, v0.c2))>=(('-915029424', v0.c2))) END  NULLS LAST LIMIT 0x0;
SELECT * FROM v0 WHERE ((((((((v0.c2, v0.c0)) BETWEEN ((x'35', v0.c0)) AND ((v0.c1, v0.c1))))AND(v0.c1)))AND((v0.c1 IN (v0.c1, v0.c2, v0.c1))))) ORDER BY ABS((NULL IN (v0.c0, v0.c0))) ASC  NULLS FIRST, CASE WHEN '-1530842596' THEN json_type(v0.c2) WHEN CAST(v0.c0 AS INTEGER) THEN CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END WHEN (~ (v0.c2)) THEN CAST(v0.c1 AS REAL) ELSE (((v0.c1, v0.c2))>=(('-915029424', v0.c2))) END  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((((((v0.c2, v0.c0)) BETWEEN ((x'35', v0.c0)) AND ((v0.c1, v0.c1))))AND(v0.c1)))AND((v0.c1 IN (v0.c1, v0.c2, v0.c1))))) ORDER BY ABS((NULL IN (v0.c0, v0.c0))) ASC  NULLS FIRST, CASE WHEN '-1530842596' THEN json_type(v0.c2) WHEN CAST(v0.c0 AS INTEGER) THEN CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END WHEN (~ (v0.c2)) THEN CAST(v0.c1 AS REAL) ELSE (((v0.c1, v0.c2))>=(('-915029424', v0.c2))) END  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((('0.13557839073463107')<=(((v0.c1)<=(v0.c2))))) ORDER BY ABS((NULL IN (v0.c0, v0.c0))) ASC  NULLS FIRST, CASE WHEN '-1530842596' THEN json_type(v0.c2) WHEN CAST(v0.c0 AS INTEGER) THEN CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END WHEN (~ (v0.c2)) THEN CAST(v0.c1 AS REAL) ELSE (((v0.c1, v0.c2))>=(('-915029424', v0.c2))) END  NULLS LAST LIMIT 0x0;
SELECT * FROM v0 WHERE (TYPEOF(DISTINCT CAST(v0.c2 AS NUMERIC))) ORDER BY CAST(v0.c2 AS BLOB)  NULLS LAST;
SELECT * FROM v0 WHERE (((TYPEOF(DISTINCT CAST(v0.c2 AS NUMERIC)))AND(((x'87')<(((v0.c2) ISNULL)))))) ORDER BY (((((v0.c1 IN ()))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END)))OR(v0.c2)) DESC, (('&nl' IN ()) IN ()) DESC, ((CAST(v0.c1 AS INTEGER))&(((((((v0.c2)OR(x'')))OR(v0.c0)))AND(v0.c1)))) ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM v0 WHERE (((v0.c1 COLLATE NOCASE)OR(x'1a'))) ORDER BY (((((v0.c1 IN ()))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END)))OR(v0.c2)) DESC, (('&nl' IN ()) IN ()) DESC, ((CAST(v0.c1 AS INTEGER))&(((((((v0.c2)OR(x'')))OR(v0.c0)))AND(v0.c1)))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM v0 WHERE (TYPEOF(DISTINCT CAST(v0.c2 AS NUMERIC))) ORDER BY CAST(v0.c2 AS BLOB)  NULLS LAST;
SELECT * FROM v0 WHERE (((TYPEOF(DISTINCT CAST(v0.c2 AS NUMERIC)))AND(((x'87')<(((v0.c2) ISNULL)))))) ORDER BY (((((v0.c1 IN ()))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END)))OR(v0.c2)) DESC, (('&nl' IN ()) IN ()) DESC, ((CAST(v0.c1 AS INTEGER))&(((((((v0.c2)OR(x'')))OR(v0.c0)))AND(v0.c1)))) ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM v0 WHERE (((v0.c1 COLLATE NOCASE)OR(x'1a'))) ORDER BY (((((v0.c1 IN ()))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END)))OR(v0.c2)) DESC, (('&nl' IN ()) IN ()) DESC, ((CAST(v0.c1 AS INTEGER))&(((((((v0.c2)OR(x'')))OR(v0.c0)))AND(v0.c1)))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0 WHERE ((((v0.c2, v0.c0)) BETWEEN (('887571368', CAST(v0.c1 AS INTEGER))) AND ((CASE WHEN v0.c0 THEN NULL WHEN x'' THEN '864158945' END, 6.15923876E8 COLLATE RTRIM)))) ORDER BY ((CAST(v0.c0 AS TEXT)) NOTNULL);
SELECT * FROM v0 WHERE ((((v0.c2, v0.c0)) BETWEEN (('887571368', CAST(v0.c1 AS INTEGER))) AND ((CASE WHEN v0.c0 THEN NULL WHEN x'' THEN '864158945' END, 6.15923876E8 COLLATE RTRIM)))) ORDER BY 'Rnc' DESC  NULLS FIRST LIMIT 0X2 INTERSECT SELECT * FROM v0 WHERE (((('-2139358984') NOT NULL) IN ((((v0.c1))<((v0.c1))), (((v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((v0.c1, x'3a')))))) ORDER BY 'Rnc' DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM v0 WHERE ((((v0.c2, v0.c0)) BETWEEN (('887571368', CAST(v0.c1 AS INTEGER))) AND ((CASE WHEN v0.c0 THEN NULL WHEN x'' THEN '864158945' END, 6.15923876E8 COLLATE RTRIM)))) ORDER BY ((CAST(v0.c0 AS TEXT)) NOTNULL);
SELECT * FROM v0 WHERE ((((v0.c2, v0.c0)) BETWEEN (('887571368', CAST(v0.c1 AS INTEGER))) AND ((CASE WHEN v0.c0 THEN NULL WHEN x'' THEN '864158945' END, 6.15923876E8 COLLATE RTRIM)))) ORDER BY 'Rnc' DESC  NULLS FIRST LIMIT 0X2 INTERSECT SELECT * FROM v0 WHERE (((('-2139358984') NOT NULL) IN ((((v0.c1))<((v0.c1))), (((v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((v0.c1, x'3a')))))) ORDER BY 'Rnc' DESC  NULLS FIRST LIMIT 2;
SELECT * FROM v0 WHERE (((((v0.c1)IS NOT(v0.c0))) NOT BETWEEN (((x'6e') NOT NULL)) AND ((('615923876') NOTNULL))));
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c1)IS NOT(v0.c0))) NOT BETWEEN (((x'6e') NOT NULL)) AND ((('615923876') NOTNULL))))AND(((NULL)=(v0.c1))))) ORDER BY IFNULL(TRIM(DISTINCT v0.c1, v0.c0), ((((((v0.c0)OR(v0.c1)))AND(v0.c0)))AND(v0.c2))) ASC, (~ (((v0.c2) BETWEEN (v0.c0) AND (v0.c1)))) LIMIT 0x0;
SELECT * FROM v0 WHERE (((((v0.c1)IS NOT(v0.c0))) NOT BETWEEN (((x'6e') NOT NULL)) AND ((('615923876') NOTNULL))));
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c1)IS NOT(v0.c0))) NOT BETWEEN (((x'6e') NOT NULL)) AND ((('615923876') NOTNULL))))AND(((NULL)=(v0.c1))))) ORDER BY IFNULL(TRIM(DISTINCT v0.c1, v0.c0), ((((((v0.c0)OR(v0.c1)))AND(v0.c0)))AND(v0.c2))) ASC, (~ (((v0.c2) BETWEEN (v0.c0) AND (v0.c1)))) LIMIT 0x0;
SELECT COUNT(*) FROM vt1, v0 WHERE (('0.30447673666824315' IN (CASE v0.c2  WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END))) ORDER BY (((~ (v0.c1))) IS TRUE)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (('0.30447673666824315' IN (CASE v0.c2  WHEN v0.c2 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END))) ORDER BY (((~ (v0.c1))) IS TRUE)  NULLS LAST;
SELECT ALL * FROM v0 INNER JOIN vt1 ON CAST(((v0.c1)=(vt1.c1)) AS TEXT) WHERE (((((vt1.c1) NOTNULL))<=(vt1.c1 COLLATE BINARY)));
SELECT ALL * FROM v0 INNER JOIN vt1 ON CAST(((v0.c1)==(vt1.c1)) AS TEXT) WHERE (((((vt1.c1) NOTNULL))<=(vt1.c1 COLLATE BINARY))) INTERSECT SELECT * FROM v0 INNER JOIN vt1 ON CAST(((v0.c1)==(vt1.c1)) AS TEXT) WHERE ((NOT (((v0.c2) IS FALSE))));
SELECT ALL * FROM v0 INNER JOIN vt1 ON CAST(((v0.c1)=(vt1.c1)) AS TEXT) WHERE (((((vt1.c1) NOTNULL))<=(vt1.c1 COLLATE BINARY)));
SELECT ALL * FROM v0 INNER JOIN vt1 ON CAST(((v0.c1)==(vt1.c1)) AS TEXT) WHERE (((((vt1.c1) NOTNULL))<=(vt1.c1 COLLATE BINARY))) INTERSECT SELECT * FROM v0 INNER JOIN vt1 ON CAST(((v0.c1)==(vt1.c1)) AS TEXT) WHERE ((NOT (((v0.c2) IS FALSE))));
SELECT COUNT(*) FROM v0 WHERE (((((v0.c1)*(v0.c2)))<(COALESCE(DISTINCT v0.c0, v0.c0))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c1)*(v0.c2)))<(COALESCE(DISTINCT v0.c0, v0.c0)))) ORDER BY (~ (CAST(v0.c0 AS TEXT))) ASC  NULLS LAST LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((((((((v0.c0) BETWEEN (v0.c1) AND (v0.c0)))OR(CAST(v0.c0 AS INTEGER))))AND((+ (v0.c1)))))OR((- (v0.c0)))))AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))))) ORDER BY (~ (CAST(v0.c0 AS TEXT))) ASC  NULLS LAST LIMIT 1;
SELECT * FROM vt1, v0 WHERE (CAST(CASE vt1.c0  WHEN 0.998307788645094 THEN v0.c2 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN v0.c2 ELSE vt1.c1 END AS TEXT)) ORDER BY (((((((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))AND(RTRIM(v0.c1))))OR(TYPEOF(DISTINCT v0.c2))) ASC  NULLS FIRST, ((((v0.c0)<=(vt1.c1))) NOTNULL) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE (((CAST(CASE vt1.c0  WHEN 0.998307788645094 THEN v0.c2 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN v0.c2 ELSE vt1.c1 END AS TEXT))AND((((x'b09c', vt1.c0)) BETWEEN ((UNLIKELY(DISTINCT v0.c0), v0.c0)) AND ((0X460ab6e5, '-130381765')))))) ORDER BY (~ (vt1.c1 COLLATE RTRIM))  NULLS FIRST, ((((((vt1.c1)OR(v0.c1)))AND(vt1.c0))) IS FALSE)  NULLS FIRST, (((0.9872397124392178, v0.c1, v0.c0, NULL, vt1.c0)) BETWEEN (('o(0''{䰳O' COLLATE BINARY, ((v0.c1)%(v0.c1)), ABS(vt1.c0), ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)), v0.c1)) AND ((((vt1.c1)/(v0.c2)), ((((vt1.c1)AND(v0.c1)))OR(v0.c2)), (v0.c1 IN (vt1.c1, v0.c0, vt1.c1)), ABS(v0.c0), v0.c0 COLLATE BINARY)))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((((v0.c0)AND(v0.c1)))>>(NULL))) ORDER BY (~ (vt1.c1 COLLATE RTRIM))  NULLS FIRST, ((((((vt1.c1)OR(v0.c1)))AND(vt1.c0))) IS FALSE)  NULLS FIRST, (((0.9872397124392178, v0.c1, v0.c0, NULL, vt1.c0)) BETWEEN (('o(0''{䰳O' COLLATE BINARY, ((v0.c1)%(v0.c1)), ABS(vt1.c0), ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)), v0.c1)) AND ((((vt1.c1)/(v0.c2)), ((((vt1.c1)AND(v0.c1)))OR(v0.c2)), (v0.c1 IN (vt1.c1, v0.c0, vt1.c1)), ABS(v0.c0), v0.c0 COLLATE BINARY)))  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt1, v0 WHERE (CAST(CASE vt1.c0  WHEN 0.998307788645094 THEN v0.c2 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN v0.c2 ELSE vt1.c1 END AS TEXT)) ORDER BY (((((((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))AND(RTRIM(v0.c1))))OR(TYPEOF(DISTINCT v0.c2))) ASC  NULLS FIRST, ((((v0.c0)<=(vt1.c1))) NOTNULL) ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE (((CAST(CASE vt1.c0  WHEN 0.998307788645094 THEN v0.c2 WHEN NULL THEN vt1.c0 WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN v0.c2 ELSE vt1.c1 END AS TEXT))AND((((x'b09c', vt1.c0)) BETWEEN ((UNLIKELY(DISTINCT v0.c0), v0.c0)) AND ((0X460ab6e5, '-130381765')))))) ORDER BY (~ (vt1.c1 COLLATE RTRIM))  NULLS FIRST, ((((((vt1.c1)OR(v0.c1)))AND(vt1.c0))) IS FALSE)  NULLS FIRST, (((0.9872397124392178, v0.c1, v0.c0, NULL, vt1.c0)) BETWEEN (('o(0''{䰳O' COLLATE BINARY, ((v0.c1)%(v0.c1)), ABS(vt1.c0), ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)), v0.c1)) AND ((((vt1.c1)/(v0.c2)), ((((vt1.c1)AND(v0.c1)))OR(v0.c2)), (v0.c1 IN (vt1.c1, v0.c0, vt1.c1)), ABS(v0.c0), v0.c0 COLLATE BINARY)))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((((v0.c0)AND(v0.c1)))>>(NULL))) ORDER BY (~ (vt1.c1 COLLATE RTRIM))  NULLS FIRST, ((((((vt1.c1)OR(v0.c1)))AND(vt1.c0))) IS FALSE)  NULLS FIRST, (((0.9872397124392178, v0.c1, v0.c0, NULL, vt1.c0)) BETWEEN (('o(0''{䰳O' COLLATE BINARY, ((v0.c1)%(v0.c1)), ABS(vt1.c0), ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)), v0.c1)) AND ((((vt1.c1)/(v0.c2)), ((((vt1.c1)AND(v0.c1)))OR(v0.c2)), (v0.c1 IN (vt1.c1, v0.c0, vt1.c1)), ABS(v0.c0), v0.c0 COLLATE BINARY)))  NULLS FIRST LIMIT 0X1;
SELECT MIN(vt1.c0) FROM vt1 WHERE (vt1.c0);
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (vt1.c0) LIMIT 1;
SELECT * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1)) BETWEEN ((v0.c1 COLLATE NOCASE, (- (v0.c2)))) AND ((vt1.c1, (((v0.c0, vt1.c0, v0.c1)) BETWEEN ((v0.c2, vt1.c0, 0.5305391951684458)) AND ((vt1.c1, vt1.c1, v0.c0))))))) ORDER BY (- (((vt1.c0) NOT BETWEEN (v0.c2) AND (NULL)))) DESC, ((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c0))) IS TRUE) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1)) BETWEEN ((v0.c1 COLLATE NOCASE, (- (v0.c2)))) AND ((vt1.c1, (((v0.c0, vt1.c0, v0.c1)) BETWEEN ((v0.c2, vt1.c0, 0.5305391951684458)) AND ((vt1.c1, vt1.c1, v0.c0))))))) ORDER BY (- (((vt1.c0) NOT BETWEEN (v0.c2) AND (NULL)))) DESC, ((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c0))) IS TRUE) ASC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1)) BETWEEN ((v0.c1 COLLATE NOCASE, (- (v0.c2)))) AND ((vt1.c1, (((v0.c0, vt1.c0, v0.c1)) BETWEEN ((v0.c2, vt1.c0, 0.5305391951684458)) AND ((vt1.c1, vt1.c1, v0.c0))))))) ORDER BY (- (((vt1.c0) NOT BETWEEN (v0.c2) AND (NULL)))) DESC, ((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c0))) IS TRUE) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1)) BETWEEN ((v0.c1 COLLATE NOCASE, (- (v0.c2)))) AND ((vt1.c1, (((v0.c0, vt1.c0, v0.c1)) BETWEEN ((v0.c2, vt1.c0, 0.5305391951684458)) AND ((vt1.c1, vt1.c1, v0.c0))))))) ORDER BY (- (((vt1.c0) NOT BETWEEN (v0.c2) AND (NULL)))) DESC, ((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c0))) IS TRUE) ASC  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0 WHERE (v0.c1);
SELECT ALL MIN(v0.c2) FROM v0 WHERE (((v0.c1)AND((QUOTE(v0.c1) IN (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))))))) ORDER BY (((((x'e985', v0.c0))<>((v0.c2, v0.c1))))%((v0.c1 IN (v0.c0)))) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT MIN(v0.c2) FROM v0 WHERE (0.38493193820330096) ORDER BY (((((x'e985', v0.c0))<>((v0.c2, v0.c1))))%((v0.c1 IN (v0.c0)))) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt1, v0 WHERE ((NOT ((v0.c2 IN (vt1.c0)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((NOT ((v0.c2 IN (vt1.c0)))))AND(((0.8597949892631278) NOT NULL)))) ORDER BY v0.c1  NULLS FIRST, CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 END COLLATE RTRIM DESC  NULLS LAST, x'bf6e'  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt1, v0 WHERE ((NOT ((v0.c2 IN (vt1.c0)))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((((NOT ((v0.c2 IN (vt1.c0)))))AND(((0.8597949892631278) NOT NULL)))) ORDER BY v0.c1  NULLS FIRST, CASE v0.c0  WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 END COLLATE RTRIM DESC  NULLS LAST, x'bf6e'  NULLS LAST LIMIT 3;
SELECT MAX(v0.c1) FROM v0 WHERE (v0.c1);
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((v0.c1)AND(UNLIKELY(CAST(v0.c2 AS REAL))))) ORDER BY ((((0.5981874271049618) BETWEEN (v0.c0) AND (v0.c1))) NOT BETWEEN (v0.c1 COLLATE BINARY) AND (CAST(v0.c0 AS TEXT)))  NULLS LAST, v0.c0, (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN '2011659437' END IN ()) INTERSECT SELECT ALL MAX(v0.c1) FROM v0 WHERE (LIKE((+ (v0.c1)), ((v0.c2) NOTNULL), 'I')) ORDER BY ((((0.5981874271049618) BETWEEN (v0.c0) AND (v0.c1))) NOT BETWEEN (v0.c1 COLLATE BINARY) AND (CAST(v0.c0 AS TEXT)))  NULLS LAST, v0.c0, (CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN '2011659437' END IN ());
SELECT MAX(v0.c1) FROM v0 WHERE ((json_valid(v0.c1) IN (((v0.c2)IS NOT(v0.c0))))) ORDER BY CASE json_insert(v0.c1, v0.c1, v0.c1, v0.c2, v0.c1)  WHEN ((v0.c2)OR(v0.c1)) THEN ((((((((v0.c0)AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))AND(v0.c1)) ELSE 1468832677 END  NULLS LAST;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((((json_valid(v0.c1) IN (((v0.c2)IS NOT(v0.c0)))))AND((((v0.c1 COLLATE BINARY, (((v0.c1, v0.c0))==((v0.c1, NULL))), ((v0.c1) NOT NULL), x'', ((((v0.c1)AND(v0.c2)))AND(v0.c0)), ((v0.c0) BETWEEN (v0.c2) AND (v0.c1)), v0.c0))<=((CASE v0.c2  WHEN v0.c2 THEN 0.1649314739636072 ELSE v0.c1 END, ((((v0.c2)AND(v0.c0)))OR(v0.c2)), LIKELIHOOD(v0.c2, v0.c2), NULL, ((v0.c0) NOT NULL), 9.31266565E8, ((v0.c0) NOTNULL))))))) ORDER BY CASE json_insert(v0.c1, v0.c1, v0.c1, v0.c2, v0.c1)  WHEN ((v0.c2)OR(v0.c1)) THEN ((((((((v0.c0)AND(v0.c1)))AND(v0.c2)))OR(v0.c0)))AND(v0.c1)) ELSE 0x578c9ba5 END  NULLS LAST LIMIT 2;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0))) IS TRUE)) ORDER BY ((vt1.c0) NOT BETWEEN (vt1.c1) AND ('A')) COLLATE BINARY;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0))) IS TRUE)) ORDER BY vt1.c0 COLLATE BINARY COLLATE RTRIM DESC LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (vt1.c1) ORDER BY vt1.c0 COLLATE BINARY COLLATE RTRIM DESC LIMIT 0;
SELECT ALL * FROM v0 WHERE ((((LOWER(DISTINCT v0.c0)))<((0.6193369905808567)))) ORDER BY ((((v0.c1) IS FALSE))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)) ASC, ((v0.c1) IS FALSE) ASC  NULLS LAST, (((v0.c1, v0.c0, v0.c2)) BETWEEN (((NOT (v0.c2)), ((v0.c1) IS FALSE), (((v0.c1, v0.c0, v0.c2, v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c2, v0.c0)) AND ((v0.c1, 2.131012904E9, v0.c0, v0.c0, v0.c1))))) AND ((((v0.c1)=(v0.c1)), TRIM(v0.c2), ((v0.c1)>(v0.c2)))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((LOWER(DISTINCT v0.c0)))<((0.6193369905808567)))) ORDER BY ((((v0.c1) IS FALSE))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)) ASC, ((v0.c1) IS FALSE) ASC  NULLS LAST, (((v0.c1, v0.c0, v0.c2)) BETWEEN (((NOT (v0.c2)), ((v0.c1) IS FALSE), (((v0.c1, v0.c0, v0.c2, v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c2, v0.c0)) AND ((v0.c1, 2.131012904E9, v0.c0, v0.c0, v0.c1))))) AND ((((v0.c1)=(v0.c1)), TRIM(v0.c2), ((v0.c1)>(v0.c2)))))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((LIKELIHOOD(v0.c2, v0.c0))AND(v0.c1))) ORDER BY ((((v0.c1) IS FALSE))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)) ASC, ((v0.c1) IS FALSE) ASC  NULLS LAST, (((v0.c1, v0.c0, v0.c2)) BETWEEN (((NOT (v0.c2)), ((v0.c1) IS FALSE), (((v0.c1, v0.c0, v0.c2, v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c2, v0.c0)) AND ((v0.c1, 2.131012904E9, v0.c0, v0.c0, v0.c1))))) AND ((((v0.c1)=(v0.c1)), TRIM(v0.c2), ((v0.c1)>(v0.c2)))))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE ((((LOWER(DISTINCT v0.c0)))<((0.6193369905808567)))) ORDER BY ((((v0.c1) IS FALSE))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)) ASC, ((v0.c1) IS FALSE) ASC  NULLS LAST, (((v0.c1, v0.c0, v0.c2)) BETWEEN (((NOT (v0.c2)), ((v0.c1) IS FALSE), (((v0.c1, v0.c0, v0.c2, v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c2, v0.c0)) AND ((v0.c1, 2.131012904E9, v0.c0, v0.c0, v0.c1))))) AND ((((v0.c1)=(v0.c1)), TRIM(v0.c2), ((v0.c1)>(v0.c2)))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((LOWER(DISTINCT v0.c0)))<((0.6193369905808567)))) ORDER BY ((((v0.c1) IS FALSE))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)) ASC, ((v0.c1) IS FALSE) ASC  NULLS LAST, (((v0.c1, v0.c0, v0.c2)) BETWEEN (((NOT (v0.c2)), ((v0.c1) IS FALSE), (((v0.c1, v0.c0, v0.c2, v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c2, v0.c0)) AND ((v0.c1, 2.131012904E9, v0.c0, v0.c0, v0.c1))))) AND ((((v0.c1)=(v0.c1)), TRIM(v0.c2), ((v0.c1)>(v0.c2)))))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((LIKELIHOOD(v0.c2, v0.c0))AND(v0.c1))) ORDER BY ((((v0.c1) IS FALSE))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)) ASC, ((v0.c1) IS FALSE) ASC  NULLS LAST, (((v0.c1, v0.c0, v0.c2)) BETWEEN (((NOT (v0.c2)), ((v0.c1) IS FALSE), (((v0.c1, v0.c0, v0.c2, v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1, v0.c2, v0.c0)) AND ((v0.c1, 2.131012904E9, v0.c0, v0.c0, v0.c1))))) AND ((((v0.c1)=(v0.c1)), TRIM(v0.c2), ((v0.c1)>(v0.c2)))))  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c1, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)OR(vt1.c0)), ((vt1.c0)*(vt1.c1)), ((vt1.c1)%(vt1.c1)), CAST(vt1.c1 AS BLOB), ((vt1.c1)GLOB(vt1.c1)), NULL)) AND (((('s''>p')/(vt1.c1)), (vt1.c1 IN ()), ((vt1.c1)!=(vt1.c1)), CAST(vt1.c0 AS TEXT), (((vt1.c0, vt1.c0))>((vt1.c0, vt1.c1))), ((vt1.c1)<(vt1.c0))))));
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c1, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)OR(vt1.c0)), ((vt1.c0)*(vt1.c1)), ((vt1.c1)%(vt1.c1)), CAST(vt1.c1 AS BLOB), ((vt1.c1)GLOB(vt1.c1)), NULL)) AND (((('s''>p')/(vt1.c1)), (vt1.c1 IN ()), ((vt1.c1)<>(vt1.c1)), CAST(vt1.c0 AS TEXT), (((vt1.c0, vt1.c0))>((vt1.c0, vt1.c1))), ((vt1.c1)<=(vt1.c0))))))AND(vt1.c1))) INTERSECT SELECT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))/(((vt1.c1)IS NOT(vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0, vt1.c0, vt1.c1, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)OR(vt1.c0)), ((vt1.c0)*(vt1.c1)), ((vt1.c1)%(vt1.c1)), CAST(vt1.c1 AS BLOB), ((vt1.c1)GLOB(vt1.c1)), NULL)) AND (((('s''>p')/(vt1.c1)), (vt1.c1 IN ()), ((vt1.c1)!=(vt1.c1)), CAST(vt1.c0 AS TEXT), (((vt1.c0, vt1.c0))>((vt1.c0, vt1.c1))), ((vt1.c1)<(vt1.c0))))));
SELECT ALL * FROM vt1 WHERE ((((((vt1.c0, vt1.c0, vt1.c1, vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((((vt1.c0)OR(vt1.c0)), ((vt1.c0)*(vt1.c1)), ((vt1.c1)%(vt1.c1)), CAST(vt1.c1 AS BLOB), ((vt1.c1)GLOB(vt1.c1)), NULL)) AND (((('s''>p')/(vt1.c1)), (vt1.c1 IN ()), ((vt1.c1)<>(vt1.c1)), CAST(vt1.c0 AS TEXT), (((vt1.c0, vt1.c0))>((vt1.c0, vt1.c1))), ((vt1.c1)<=(vt1.c0))))))AND(vt1.c1))) INTERSECT SELECT * FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c0)))/(((vt1.c1)IS NOT(vt1.c1)))));
SELECT ALL COUNT(*) FROM v0 WHERE ((((((v0.c0, v0.c2, v0.c0)) BETWEEN ((1.230436426E9, v0.c1, NULL)) AND ((v0.c0, v0.c0, v0.c2)))) BETWEEN ((v0.c2 IN (v0.c0, v0.c0))) AND (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)))));
SELECT ALL COUNT(*) FROM v0 WHERE ((((((v0.c0, v0.c2, v0.c0)) BETWEEN ((1.230436426E9, v0.c1, NULL)) AND ((v0.c0, v0.c0, v0.c2)))) BETWEEN ((v0.c2 IN (v0.c0, v0.c0))) AND (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY ((((v0.c2) NOTNULL))*(TRIM(DISTINCT v0.c2, v0.c2))) ASC  NULLS LAST, CAST((('1625702790')<(v0.c0)) AS NUMERIC)  NULLS LAST, ((CASE v0.c2  WHEN 2.131012904E9 THEN v0.c0 ELSE v0.c2 END) NOT NULL)  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE (((SQLITE_SOURCE_ID())>>(LTRIM(vt1.c0, v0.c0))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((SQLITE_SOURCE_ID())>>(LTRIM(vt1.c0, v0.c0)))) ORDER BY (1409977447 IN (v0.c1, v0.c0)), ((((((((CAST(vt1.c1 AS BLOB))AND(((vt1.c1) ISNULL))))OR(('0.42119120460291926' IN ()))))OR((v0.c2 IN (v0.c0)))))OR(((vt1.c1) ISNULL))) ASC, ((CASE WHEN '8CyK<-}p0' THEN vt1.c1 END)||(((vt1.c0) BETWEEN (v0.c1) AND (vt1.c1))))  NULLS FIRST, ((v0.c1 IN (vt1.c1)) IN ()) DESC  NULLS LAST LIMIT 4;
SELECT * FROM v0, vt1 WHERE (((SQLITE_SOURCE_ID())>>(LTRIM(vt1.c0, v0.c0))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((SQLITE_SOURCE_ID())>>(LTRIM(vt1.c0, v0.c0)))) ORDER BY (1409977447 IN (v0.c1, v0.c0)), ((((((((CAST(vt1.c1 AS BLOB))AND(((vt1.c1) ISNULL))))OR(('0.42119120460291926' IN ()))))OR((v0.c2 IN (v0.c0)))))OR(((vt1.c1) ISNULL))) ASC, ((CASE WHEN '8CyK<-}p0' THEN vt1.c1 END)||(((vt1.c0) BETWEEN (v0.c1) AND (vt1.c1))))  NULLS FIRST, ((v0.c1 IN (vt1.c1)) IN ()) DESC  NULLS LAST LIMIT 4;
SELECT ALL * FROM v0 WHERE (((((CAST(v0.c2 AS INTEGER))OR((v0.c1 IN (v0.c0)))))OR(((v0.c0)<>(0xb053e98)))));
SELECT DISTINCT * FROM v0 WHERE (((((CAST(v0.c2 AS INTEGER))OR((v0.c1 IN (v0.c0)))))OR(((v0.c0)!=(184893080))))) ORDER BY ((((v0.c2)OR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN '	' END)))AND(((v0.c0) NOT NULL))), ((((v0.c2) IS TRUE)) NOT BETWEEN ((((v0.c1))>((v0.c0)))) AND (v0.c1 COLLATE NOCASE)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c2, v0.c2)) BETWEEN ((v0.c2, x'')) AND ((v0.c2, v0.c1))) COLLATE RTRIM) ORDER BY ((((v0.c2)OR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN '	' END)))AND(((v0.c0) NOT NULL))), ((((v0.c2) IS TRUE)) NOT BETWEEN ((((v0.c1))>((v0.c0)))) AND (v0.c1 COLLATE NOCASE)) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((CAST(v0.c2 AS INTEGER))OR((v0.c1 IN (v0.c0)))))OR(((v0.c0)<>(0xb053e98)))));
SELECT DISTINCT * FROM v0 WHERE (((((CAST(v0.c2 AS INTEGER))OR((v0.c1 IN (v0.c0)))))OR(((v0.c0)!=(184893080))))) ORDER BY ((((v0.c2)OR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN '	' END)))AND(((v0.c0) NOT NULL))), ((((v0.c2) IS TRUE)) NOT BETWEEN ((((v0.c1))>((v0.c0)))) AND (v0.c1 COLLATE NOCASE)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c2, v0.c2)) BETWEEN ((v0.c2, x'')) AND ((v0.c2, v0.c1))) COLLATE RTRIM) ORDER BY ((((v0.c2)OR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN '	' END)))AND(((v0.c0) NOT NULL))), ((((v0.c2) IS TRUE)) NOT BETWEEN ((((v0.c1))>((v0.c0)))) AND (v0.c1 COLLATE NOCASE)) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE (COALESCE(DISTINCT ((vt1.c0) NOT NULL), vt1.c0, ((((((vt1.c0)OR(-1.591475189E9)))AND(0X1230b0b8)))OR(vt1.c0)), CAST(vt1.c1 AS NUMERIC)));
SELECT ALL * FROM vt1 WHERE (COALESCE(DISTINCT ((vt1.c0) NOT NULL), vt1.c0, ((((((vt1.c0)OR(-1.591475189E9)))AND(0X1230b0b8)))OR(vt1.c0)), CAST(vt1.c1 AS NUMERIC))) ORDER BY (~ ((vt1.c1 IN ()))), (((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1))))<(((((vt1.c0, vt1.c1))<((vt1.c0, vt1.c1)))))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt1 WHERE (COALESCE(DISTINCT ((vt1.c0) NOT NULL), vt1.c0, ((((((vt1.c0)OR(-1.591475189E9)))AND(0X1230b0b8)))OR(vt1.c0)), CAST(vt1.c1 AS NUMERIC)));
SELECT ALL * FROM vt1 WHERE (COALESCE(DISTINCT ((vt1.c0) NOT NULL), vt1.c0, ((((((vt1.c0)OR(-1.591475189E9)))AND(0X1230b0b8)))OR(vt1.c0)), CAST(vt1.c1 AS NUMERIC))) ORDER BY (~ ((vt1.c1 IN ()))), (((((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1))))<(((((vt1.c0, vt1.c1))<((vt1.c0, vt1.c1)))))) ASC  NULLS LAST LIMIT 0;
SELECT ALL COUNT(*) FROM v0 WHERE ((~ (UNLIKELY(v0.c0))));
SELECT COUNT(*) FROM v0 WHERE ((~ (UNLIKELY(v0.c0)))) ORDER BY CASE CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END  WHEN NULL THEN UPPER(v0.c2) WHEN ((v0.c2) IS TRUE) THEN (v0.c1 IN ()) WHEN (NOT (v0.c2)) THEN x'' ELSE LIKELIHOOD(v0.c1, 0xffffffffd0de4075) END  NULLS FIRST LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM v0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN NULL END) IS FALSE)) ORDER BY CASE CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END  WHEN NULL THEN UPPER(v0.c2) WHEN ((v0.c2) IS TRUE) THEN (v0.c1 IN ()) WHEN (NOT (v0.c2)) THEN x'' ELSE LIKELIHOOD(v0.c1, 0Xffffffffd0de4075) END  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt1, v0 WHERE ((((NULL, v0.c1)) NOT BETWEEN ((((v0.c1) IS FALSE), (NOT (v0.c0)))) AND ((((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)), vt1.c0 COLLATE RTRIM))));
SELECT ALL * FROM vt1, v0 WHERE ((((NULL, v0.c1)) NOT BETWEEN ((((v0.c1) IS FALSE), (NOT (v0.c0)))) AND ((((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)), vt1.c0 COLLATE RTRIM)))) LIMIT 0X3 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CASE (((v0.c0, v0.c2))==((vt1.c1, v0.c1)))  WHEN ((v0.c2)<=(v0.c0)) THEN ((v0.c0) NOT NULL) WHEN ((v0.c1) ISNULL) THEN CAST(0x14982038 AS BLOB) ELSE (((v0.c0, v0.c0, v0.c0, v0.c1)) NOT BETWEEN ((v0.c2, x'239c8d', v0.c1, v0.c1)) AND ((vt1.c0, x'2c', v0.c2, vt1.c1))) END) LIMIT 3;
SELECT * FROM vt1, v0 WHERE ((((NULL, v0.c1)) NOT BETWEEN ((((v0.c1) IS FALSE), (NOT (v0.c0)))) AND ((((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)), vt1.c0 COLLATE RTRIM))));
SELECT ALL * FROM vt1, v0 WHERE ((((NULL, v0.c1)) NOT BETWEEN ((((v0.c1) IS FALSE), (NOT (v0.c0)))) AND ((((v0.c2) BETWEEN (vt1.c1) AND (v0.c0)), vt1.c0 COLLATE RTRIM)))) LIMIT 0X3 INTERSECT SELECT ALL * FROM vt1, v0 WHERE (CASE (((v0.c0, v0.c2))==((vt1.c1, v0.c1)))  WHEN ((v0.c2)<=(v0.c0)) THEN ((v0.c0) NOT NULL) WHEN ((v0.c1) ISNULL) THEN CAST(0x14982038 AS BLOB) ELSE (((v0.c0, v0.c0, v0.c0, v0.c1)) NOT BETWEEN ((v0.c2, x'239c8d', v0.c1, v0.c1)) AND ((vt1.c0, x'2c', v0.c2, vt1.c1))) END) LIMIT 3;
SELECT ALL COUNT(*) FROM vt1 WHERE (CASE (vt1.c0 IN (NULL))  WHEN ((vt1.c1) IS TRUE) THEN ((vt1.c0)IS NOT(vt1.c1)) WHEN (+ (vt1.c1)) THEN (NOT (vt1.c0)) ELSE CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END END) ORDER BY ((0.9520028631702893)+(((vt1.c1) IS TRUE)));
SELECT COUNT(*) FROM vt1 WHERE (((CASE (vt1.c0 IN (NULL))  WHEN ((vt1.c1) IS TRUE) THEN ((vt1.c0)IS NOT(vt1.c1)) WHEN (+ (vt1.c1)) THEN (NOT (vt1.c0)) ELSE CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END END)AND((((((vt1.c0, vt1.c0))<((vt1.c1, '1302346158'))))LIKE((- (vt1.c0))))))) ORDER BY ((0.9520028631702893)+(((vt1.c1) IS TRUE)));
SELECT MAX(v0.c0) FROM v0, vt1 WHERE (((x'b7d9') NOT BETWEEN (CAST(vt1.c1 AS REAL)) AND (((((((v0.c0)OR(v0.c1)))OR(vt1.c1)))OR(vt1.c1)))));
SELECT DISTINCT MAX(v0.c0) FROM v0, vt1 WHERE (((x'b7d9') NOT BETWEEN (CAST(vt1.c1 AS REAL)) AND (((((((v0.c0)OR(v0.c1)))OR(vt1.c1)))OR(vt1.c1))))) ORDER BY ((((427433700)IS NOT('-929470684')))<(((v0.c1) IS TRUE))) ASC  NULLS FIRST, TYPEOF(DISTINCT ((vt1.c1) BETWEEN (0.8792724738379106) AND (v0.c2)))  NULLS FIRST;
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c1 IN (vt1.c1, 0.5017039615986585))) ISNULL));
SELECT MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c1 IN (vt1.c1, 0.5017039615986585))) ISNULL)) ORDER BY ((vt1.c0)IS(((vt1.c0)>(vt1.c0))))  NULLS FIRST LIMIT 0X1;
SELECT COUNT(*) FROM v0, vt1 WHERE (((vt1.c0 COLLATE RTRIM) NOT BETWEEN ((~ (v0.c1))) AND (((vt1.c1)+(v0.c2)))));
SELECT COUNT(*) FROM v0, vt1 WHERE (((vt1.c0 COLLATE RTRIM) NOT BETWEEN ((~ (v0.c1))) AND (((vt1.c1)+(v0.c2))))) ORDER BY '995319123' ASC  NULLS LAST INTERSECT SELECT COUNT(*) FROM v0, vt1 WHERE (x'') ORDER BY '995319123' ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((v0.c2)<<(v0.c0))) ISNULL));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2)<<(v0.c0))) ISNULL)) LIMIT 0X1;
SELECT * FROM v0 WHERE (((((v0.c2)<<(v0.c0))) ISNULL));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2)<<(v0.c0))) ISNULL)) LIMIT 0X1;
SELECT ALL COUNT(*) FROM v0 WHERE (((((((((v0.c2)IS(v0.c0)))OR(v0.c2)))OR(((((v0.c2)AND(v0.c1)))OR(v0.c0)))))OR(((v0.c1) NOT NULL))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((((((v0.c2)IS(v0.c0)))OR(v0.c2)))OR(((((v0.c2)AND(v0.c1)))OR(v0.c0)))))OR(((v0.c1) NOT NULL)))) INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (v0.c0);
SELECT ALL COUNT(*) FROM vt1 WHERE (vt1.c0);
SELECT COUNT(*) FROM vt1 WHERE (((vt1.c0)AND((((((vt1.c0, x'364c', vt1.c1))<((vt1.c0, vt1.c0, vt1.c1))))<(NULL))))) ORDER BY CASE ((vt1.c0) NOTNULL)  WHEN CAST(vt1.c0 AS BLOB) THEN RTRIM(vt1.c0) WHEN (((((((((('J4V')AND(x'15c737')))AND(vt1.c0)))OR(0.8493632230781354)))AND(vt1.c1)))AND(vt1.c1)) THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)) ELSE (((vt1.c0, vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c0, x'043b'))) END DESC, LIKELIHOOD((NOT (vt1.c0)), vt1.c1) DESC  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (((CASE WHEN 0.058713669775056765 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END) ISNULL)) ORDER BY CASE ((vt1.c0) NOTNULL)  WHEN CAST(vt1.c0 AS BLOB) THEN RTRIM(vt1.c0) WHEN (((((((((('J4V')AND(x'15c737')))AND(vt1.c0)))OR(0.8493632230781354)))AND(vt1.c1)))AND(vt1.c1)) THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)) ELSE (((vt1.c0, vt1.c1, vt1.c1)) NOT BETWEEN ((vt1.c0, vt1.c1, vt1.c0)) AND ((vt1.c0, vt1.c0, x'043b'))) END DESC, LIKELIHOOD((NOT (vt1.c0)), vt1.c1) DESC  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ()))%(((vt1.c0)|(vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ()))%(((vt1.c0)|(vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ()))%(((vt1.c0)|(vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c0 IN ()))%(((vt1.c0)|(vt1.c1)))));
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0)|('!XY'))) NOT BETWEEN ('j') AND ((+ (vt1.c0))))) ORDER BY ((vt1.c1 COLLATE NOCASE) IS FALSE) DESC  NULLS FIRST, LIKELIHOOD((~ (vt1.c1)), CAST(vt1.c1 AS BLOB));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0)|('!XY'))) NOT BETWEEN ('j') AND ((+ (vt1.c0))))) ORDER BY x'' DESC, ((UNLIKELY(vt1.c1))IS NOT(((vt1.c1) NOTNULL))) LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE ((((((NULL)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))|(vt1.c1 COLLATE RTRIM)));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((NULL)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))|(vt1.c1 COLLATE RTRIM))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((vt1.c0) IS FALSE))&((((vt1.c1)) BETWEEN ((0.30184894578621146)) AND ((v0.c0))))));
SELECT ALL * FROM v0, vt1 WHERE ((((((NULL)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))|(vt1.c1 COLLATE RTRIM)));
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((NULL)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))|(vt1.c1 COLLATE RTRIM))) INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((vt1.c0) IS FALSE))&((((vt1.c1)) BETWEEN ((0.30184894578621146)) AND ((v0.c0))))));
SELECT * FROM v0, vt1 WHERE (vt1.c1 COLLATE BINARY);
SELECT DISTINCT * FROM v0, vt1 WHERE (((vt1.c1 COLLATE BINARY)AND(((((((((CAST(vt1.c0 AS INTEGER))OR(v0.c2)))AND((((v0.c0))<>((v0.c2))))))OR(((v0.c2) NOT BETWEEN ('-326459721') AND (v0.c2)))))AND(((v0.c2)<=(v0.c0))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST(vt1.c0 AS BLOB))IS NOT(UNLIKELY(DISTINCT v0.c0)))) LIMIT 0X1;
SELECT * FROM v0, vt1 WHERE (vt1.c1 COLLATE BINARY);
SELECT DISTINCT * FROM v0, vt1 WHERE (((vt1.c1 COLLATE BINARY)AND(((((((((CAST(vt1.c0 AS INTEGER))OR(v0.c2)))AND((((v0.c0))<>((v0.c2))))))OR(((v0.c2) NOT BETWEEN ('-326459721') AND (v0.c2)))))AND(((v0.c2)<=(v0.c0))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST(vt1.c0 AS BLOB))IS NOT(UNLIKELY(DISTINCT v0.c0)))) LIMIT 0X1;
SELECT ALL * FROM v0, vt1 WHERE (((((~ (vt1.c1)), ((((((v0.c2)AND(v0.c0)))AND(v0.c2)))AND(v0.c1))))>=((((v0.c1)GLOB(v0.c2)), CASE vt1.c0  WHEN vt1.c0 THEN -1340451340 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c0 END)))) ORDER BY ((NULL) BETWEEN (v0.c0) AND (((((((v0.c1)OR(vt1.c1)))OR(v0.c1)))OR(vt1.c0)))) ASC  NULLS LAST, (CAST(vt1.c1 AS TEXT) IN (((v0.c1) ISNULL))), TRIM(((vt1.c0)|(vt1.c1)), TRIM(DISTINCT v0.c0)) DESC  NULLS FIRST, ((NULL)*(v0.c2));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((~ (vt1.c1)), ((((((v0.c2)AND(v0.c0)))AND(v0.c2)))AND(v0.c1))))>((((v0.c1)GLOB(v0.c2)), CASE vt1.c0  WHEN vt1.c0 THEN 0Xffffffffb01a55f4 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c0 END)))) ORDER BY ((((v0.c2) NOT NULL)) NOTNULL), (((v0.c1)) BETWEEN ((vt1.c1)) AND ((((v0.c1)/(v0.c0))))) DESC;
SELECT ALL * FROM v0, vt1 WHERE (((((~ (vt1.c1)), ((((((v0.c2)AND(v0.c0)))AND(v0.c2)))AND(v0.c1))))>=((((v0.c1)GLOB(v0.c2)), CASE vt1.c0  WHEN vt1.c0 THEN -1340451340 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c0 END)))) ORDER BY ((NULL) BETWEEN (v0.c0) AND (((((((v0.c1)OR(vt1.c1)))OR(v0.c1)))OR(vt1.c0)))) ASC  NULLS LAST, (CAST(vt1.c1 AS TEXT) IN (((v0.c1) ISNULL))), TRIM(((vt1.c0)|(vt1.c1)), TRIM(DISTINCT v0.c0)) DESC  NULLS FIRST, ((NULL)*(v0.c2));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((~ (vt1.c1)), ((((((v0.c2)AND(v0.c0)))AND(v0.c2)))AND(v0.c1))))>((((v0.c1)GLOB(v0.c2)), CASE vt1.c0  WHEN vt1.c0 THEN 0Xffffffffb01a55f4 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c0 ELSE vt1.c0 END)))) ORDER BY ((((v0.c2) NOT NULL)) NOTNULL), (((v0.c1)) BETWEEN ((vt1.c1)) AND ((((v0.c1)/(v0.c0))))) DESC;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE ((((CAST(v0.c1 AS NUMERIC), CAST(v0.c0 AS REAL), CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END, ((vt1.c0)GLOB(v0.c2))))>=((vt1.c0, 0.7556285589483016 COLLATE NOCASE, (((v0.c1, vt1.c0, vt1.c0, vt1.c1, v0.c1)) BETWEEN ((v0.c1, vt1.c1, vt1.c0, v0.c2, v0.c0)) AND ((vt1.c1, v0.c2, v0.c1, NULL, v0.c1))), ((((((v0.c0)OR(vt1.c0)))OR(v0.c2)))AND('-2074281436'))))));
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((((CAST(v0.c1 AS NUMERIC), CAST(v0.c0 AS REAL), CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END, ((vt1.c0)GLOB(v0.c2))))>((vt1.c0, 0.7556285589483016 COLLATE NOCASE, (((v0.c1, vt1.c0, vt1.c0, vt1.c1, v0.c1)) BETWEEN ((v0.c1, vt1.c1, vt1.c0, v0.c2, v0.c0)) AND ((vt1.c1, v0.c2, v0.c1, NULL, v0.c1))), ((((((v0.c0)OR(vt1.c0)))OR(v0.c2)))AND('-2074281436')))))) ORDER BY (((vt1.c1, v0.c2, v0.c2, 'W_R㎄b/,<'))>=((vt1.c1, vt1.c0, vt1.c0, 0.7036647540264503))) COLLATE BINARY ASC  NULLS LAST, CASE WHEN ((vt1.c1) BETWEEN (v0.c0) AND (v0.c2)) THEN TYPEOF(DISTINCT vt1.c0) ELSE vt1.c1 COLLATE RTRIM END ASC  NULLS FIRST LIMIT 0x3;
SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE ((((CAST(v0.c1 AS NUMERIC), CAST(v0.c0 AS REAL), CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END, ((vt1.c0)GLOB(v0.c2))))>=((vt1.c0, 0.7556285589483016 COLLATE NOCASE, (((v0.c1, vt1.c0, vt1.c0, vt1.c1, v0.c1)) BETWEEN ((v0.c1, vt1.c1, vt1.c0, v0.c2, v0.c0)) AND ((vt1.c1, v0.c2, v0.c1, NULL, v0.c1))), ((((((v0.c0)OR(vt1.c0)))OR(v0.c2)))AND('-2074281436'))))));
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((((CAST(v0.c1 AS NUMERIC), CAST(v0.c0 AS REAL), CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END, ((vt1.c0)GLOB(v0.c2))))>((vt1.c0, 0.7556285589483016 COLLATE NOCASE, (((v0.c1, vt1.c0, vt1.c0, vt1.c1, v0.c1)) BETWEEN ((v0.c1, vt1.c1, vt1.c0, v0.c2, v0.c0)) AND ((vt1.c1, v0.c2, v0.c1, NULL, v0.c1))), ((((((v0.c0)OR(vt1.c0)))OR(v0.c2)))AND('-2074281436')))))) ORDER BY (((vt1.c1, v0.c2, v0.c2, 'W_R㎄b/,<'))>=((vt1.c1, vt1.c0, vt1.c0, 0.7036647540264503))) COLLATE BINARY ASC  NULLS LAST, CASE WHEN ((vt1.c1) BETWEEN (v0.c0) AND (v0.c2)) THEN TYPEOF(DISTINCT vt1.c0) ELSE vt1.c1 COLLATE RTRIM END ASC  NULLS FIRST LIMIT 0x3;
SELECT * FROM v0 INNER JOIN vt1 ON LOWER(0.35858265343369655) WHERE (CASE v0.c0  WHEN v0.c0 COLLATE NOCASE THEN (v0.c1 IN (v0.c2)) END) ORDER BY (((v0.c2 IN (vt1.c0)))&((('Exv')GLOB(v0.c2)))) ASC  NULLS LAST, ((((vt1.c1))<((v0.c1))) IN ((((v0.c0)) NOT BETWEEN ((0Xffffffffbe981938)) AND ((v0.c0))), (v0.c0 IN ())))  NULLS FIRST;
SELECT ALL * FROM v0 INNER JOIN vt1 ON LOWER(0.35858265343369655) WHERE (CASE v0.c0  WHEN v0.c0 COLLATE NOCASE THEN (v0.c1 IN (v0.c2)) END) ORDER BY (((v0.c2 IN (vt1.c0)))&((('Exv')GLOB(v0.c2)))) ASC  NULLS LAST, ((((vt1.c1))<((v0.c1))) IN ((((v0.c0)) NOT BETWEEN ((-1097328328)) AND ((v0.c0))), (v0.c0 IN ())))  NULLS FIRST LIMIT 0X3 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON LOWER(0.35858265343369655) WHERE (TRIM(((vt1.c0) IS FALSE), (v0.c1 IN ()))) ORDER BY (((v0.c2 IN (vt1.c0)))&((('Exv')GLOB(v0.c2)))) ASC  NULLS LAST, ((((vt1.c1))<((v0.c1))) IN ((((v0.c0)) NOT BETWEEN ((-1097328328)) AND ((v0.c0))), (v0.c0 IN ())))  NULLS FIRST LIMIT 3;
SELECT * FROM v0 INNER JOIN vt1 ON LOWER(0.35858265343369655) WHERE (CASE v0.c0  WHEN v0.c0 COLLATE NOCASE THEN (v0.c1 IN (v0.c2)) END) ORDER BY (((v0.c2 IN (vt1.c0)))&((('Exv')GLOB(v0.c2)))) ASC  NULLS LAST, ((((vt1.c1))<((v0.c1))) IN ((((v0.c0)) NOT BETWEEN ((0Xffffffffbe981938)) AND ((v0.c0))), (v0.c0 IN ())))  NULLS FIRST;
SELECT ALL * FROM v0 INNER JOIN vt1 ON LOWER(0.35858265343369655) WHERE (CASE v0.c0  WHEN v0.c0 COLLATE NOCASE THEN (v0.c1 IN (v0.c2)) END) ORDER BY (((v0.c2 IN (vt1.c0)))&((('Exv')GLOB(v0.c2)))) ASC  NULLS LAST, ((((vt1.c1))<((v0.c1))) IN ((((v0.c0)) NOT BETWEEN ((-1097328328)) AND ((v0.c0))), (v0.c0 IN ())))  NULLS FIRST LIMIT 0X3 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON LOWER(0.35858265343369655) WHERE (TRIM(((vt1.c0) IS FALSE), (v0.c1 IN ()))) ORDER BY (((v0.c2 IN (vt1.c0)))&((('Exv')GLOB(v0.c2)))) ASC  NULLS LAST, ((((vt1.c1))<((v0.c1))) IN ((((v0.c0)) NOT BETWEEN ((-1097328328)) AND ((v0.c0))), (v0.c0 IN ())))  NULLS FIRST LIMIT 3;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CAST((((vt1.c0, '-757902307', vt1.c1, vt1.c1)) BETWEEN ((vt1.c1, vt1.c1, vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c0, vt1.c1))) AS REAL)) ORDER BY LIKELY((+ (vt1.c0))), CASE 1.047413736E9  WHEN (((vt1.c0, vt1.c1)) NOT BETWEEN ((vt1.c0, '1I')) AND ((x'92', NULL))) THEN (+ (vt1.c1)) WHEN ((vt1.c0)OR(vt1.c0)) THEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) ELSE NULL END, ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)) COLLATE BINARY, ((CAST(0x7c9a4f5d AS INTEGER))>>(NULL)) ASC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((CAST((((vt1.c0, '-757902307', vt1.c1, vt1.c1)) BETWEEN ((vt1.c1, vt1.c1, vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c0, vt1.c0, vt1.c1))) AS REAL))AND((((((((((+ (vt1.c0)))OR(vt1.c0)))OR(CASE WHEN vt1.c1 THEN vt1.c0 END)))OR(((((vt1.c1)OR(vt1.c1)))AND(vt1.c0)))))AND(vt1.c1 COLLATE RTRIM))))) ORDER BY (~ (((vt1.c1)>=(vt1.c1)))), ((vt1.c0)&(CAST(vt1.c0 AS BLOB))) DESC  NULLS LAST INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0))) BETWEEN (((vt1.c0) IS TRUE)) AND (((((vt1.c1)OR(vt1.c0)))AND(vt1.c0))))) ORDER BY (~ (((vt1.c1)>=(vt1.c1)))), ((vt1.c0)&(CAST(vt1.c0 AS BLOB))) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt1 NOT INDEXED CROSS JOIN v0 ON 'v6' WHERE ((((((vt1.c1)) NOT BETWEEN ((x'48')) AND ((vt1.c1)))) NOTNULL));
SELECT DISTINCT COUNT(*) FROM vt1 CROSS JOIN v0 ON 'v6' WHERE ((((((vt1.c1)) NOT BETWEEN ((x'48')) AND ((vt1.c1)))) NOTNULL)) LIMIT 0x1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 CROSS JOIN v0 ON 'v6' WHERE ((- ((v0.c1 IN ())))) LIMIT 0X1;
SELECT ALL * FROM v0, vt1 WHERE (TRIM(DISTINCT vt1.c1 COLLATE RTRIM));
SELECT ALL * FROM v0, vt1 WHERE (((TRIM(DISTINCT vt1.c1 COLLATE RTRIM))AND(COALESCE(CAST(v0.c0 AS REAL), UNLIKELY(v0.c0)))));
SELECT ALL * FROM v0, vt1 WHERE (TRIM(DISTINCT vt1.c1 COLLATE RTRIM));
SELECT ALL * FROM v0, vt1 WHERE (((TRIM(DISTINCT vt1.c1 COLLATE RTRIM))AND(COALESCE(CAST(v0.c0 AS REAL), UNLIKELY(v0.c0)))));
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1) IS FALSE)) IS FALSE));
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1) IS FALSE)) IS FALSE)) ORDER BY ((v0.c2)*((- (vt1.c1)))) ASC LIMIT 0;
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1) IS FALSE)) IS FALSE));
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1) IS FALSE)) IS FALSE)) ORDER BY ((v0.c2)*((- (vt1.c1)))) ASC LIMIT 0;
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (((((-1853538289) IS FALSE)) NOT NULL)) ORDER BY ((NULL)>=(CASE WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 END)), ((CAST(v0.c2 AS INTEGER))+(v0.c1));
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (((((-1853538289) IS FALSE)) NOT NULL)) ORDER BY ((NULL)>=(CASE WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 END)), ((CAST(v0.c2 AS INTEGER))+(v0.c1)) LIMIT 0X1 INTERSECT SELECT MAX(v0.c2) FROM vt1, v0 WHERE ((((v0.c0 IN (vt1.c1, vt1.c0))) BETWEEN (((((((((0X4cb0408e)AND(v0.c2)))AND(vt1.c0)))AND(v0.c0)))AND(v0.c1))) AND (((v0.c1) NOTNULL)))) ORDER BY ((NULL)>=(CASE WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 END)), ((CAST(v0.c2 AS INTEGER))+(v0.c1)) LIMIT 1;
SELECT * FROM v0, vt1 WHERE (v0.c1) ORDER BY ((((NULLIF(vt1.c1, vt1.c0))OR(v0.c1 COLLATE BINARY)))OR(ABS(v0.c1)))  NULLS FIRST, ((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))IS(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c1 END)) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((v0.c1)AND(vt1.c0))) ORDER BY ((((NULLIF(vt1.c1, vt1.c0))OR(v0.c1 COLLATE BINARY)))OR(ABS(v0.c1)))  NULLS FIRST, ((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))IS(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c1 END)) ASC  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((~ (vt1.c0)) COLLATE RTRIM) ORDER BY ((((NULLIF(vt1.c1, vt1.c0))OR(v0.c1 COLLATE BINARY)))OR(ABS(v0.c1)))  NULLS FIRST, ((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))IS(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c1 END)) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (v0.c1) ORDER BY ((((NULLIF(vt1.c1, vt1.c0))OR(v0.c1 COLLATE BINARY)))OR(ABS(v0.c1)))  NULLS FIRST, ((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))IS(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c1 END)) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((v0.c1)AND(vt1.c0))) ORDER BY ((((NULLIF(vt1.c1, vt1.c0))OR(v0.c1 COLLATE BINARY)))OR(ABS(v0.c1)))  NULLS FIRST, ((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))IS(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c1 END)) ASC  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt1 WHERE ((~ (vt1.c0)) COLLATE RTRIM) ORDER BY ((((NULLIF(vt1.c1, vt1.c0))OR(v0.c1 COLLATE BINARY)))OR(ABS(v0.c1)))  NULLS FIRST, ((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))IS(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE v0.c1 END)) ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((NULL)) BETWEEN ((((v0.c0)<(v0.c2)))) AND ((0.4433564096820407))));
SELECT ALL * FROM v0 WHERE ((((NULL)) BETWEEN ((((v0.c0)<(v0.c2)))) AND ((0.4433564096820407)))) LIMIT 0X4;
SELECT ALL * FROM v0 WHERE ((((NULL)) BETWEEN ((((v0.c0)<(v0.c2)))) AND ((0.4433564096820407))));
SELECT ALL * FROM v0 WHERE ((((NULL)) BETWEEN ((((v0.c0)<(v0.c2)))) AND ((0.4433564096820407)))) LIMIT 0X4;
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (((v0.c2 COLLATE NOCASE)!=(v0.c2 COLLATE BINARY)));
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (((((v0.c2 COLLATE NOCASE)<>(v0.c2 COLLATE BINARY)))AND(CASE WHEN ((((((v0.c1)AND(vt1.c1)))AND(vt1.c0)))OR(v0.c2)) THEN ((v0.c1) BETWEEN (v0.c1) AND (vt1.c0)) END))) INTERSECT SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (load_extension(CASE NULL  WHEN v0.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN v0.c0 THEN v0.c1 END, ((vt1.c1)IS NOT(vt1.c1))));
SELECT MIN(v0.c0) FROM v0, vt1 WHERE ((((NOT (vt1.c0)))*(((v0.c2)<<(v0.c2)))));
SELECT DISTINCT MIN(v0.c0) FROM v0, vt1 WHERE ((((NOT (vt1.c0)))*(((v0.c2)<<(v0.c2))))) LIMIT 0x3;
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((((((v0.c0)>(v0.c1)))AND((v0.c0 IN (vt1.c0)))))OR((- (v0.c2))))) ORDER BY vt1.c1;
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (((((((((v0.c0)>(v0.c1)))AND((v0.c0 IN (vt1.c0)))))OR((- (v0.c2)))))AND(((vt1.c1)!=(((((((((v0.c1)OR(v0.c1)))AND(vt1.c1)))OR(vt1.c1)))AND(v0.c2))))))) ORDER BY TRIM(((((v0.c2)OR(v0.c2)))AND(v0.c0)))  NULLS LAST, (((((v0.c1, v0.c1)) BETWEEN ((v0.c1, vt1.c0)) AND ((v0.c0, vt1.c1)))) NOT BETWEEN (CAST(v0.c0 AS TEXT)) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (0.006605317495967489)))) INTERSECT SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE ((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN NULL WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 END IN ((v0.c1 IN ())))) ORDER BY TRIM(((((v0.c2)OR(v0.c2)))AND(v0.c0)))  NULLS LAST, (((((v0.c1, v0.c1)) BETWEEN ((v0.c1, vt1.c0)) AND ((v0.c0, vt1.c1)))) NOT BETWEEN (CAST(v0.c0 AS TEXT)) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (0.006605317495967489))));
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((((((v0.c0)>(v0.c1)))AND((v0.c0 IN (vt1.c0)))))OR((- (v0.c2))))) ORDER BY vt1.c1;
SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE (((((((((v0.c0)>(v0.c1)))AND((v0.c0 IN (vt1.c0)))))OR((- (v0.c2)))))AND(((vt1.c1)!=(((((((((v0.c1)OR(v0.c1)))AND(vt1.c1)))OR(vt1.c1)))AND(v0.c2))))))) ORDER BY TRIM(((((v0.c2)OR(v0.c2)))AND(v0.c0)))  NULLS LAST, (((((v0.c1, v0.c1)) BETWEEN ((v0.c1, vt1.c0)) AND ((v0.c0, vt1.c1)))) NOT BETWEEN (CAST(v0.c0 AS TEXT)) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (0.006605317495967489)))) INTERSECT SELECT DISTINCT * FROM vt1 NATURAL JOIN v0 WHERE ((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN NULL WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 END IN ((v0.c1 IN ())))) ORDER BY TRIM(((((v0.c2)OR(v0.c2)))AND(v0.c0)))  NULLS LAST, (((((v0.c1, v0.c1)) BETWEEN ((v0.c1, vt1.c0)) AND ((v0.c0, vt1.c1)))) NOT BETWEEN (CAST(v0.c0 AS TEXT)) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (0.006605317495967489))));
SELECT MAX(vt1.c1) FROM vt1 WHERE (vt1.c1) ORDER BY (((((vt1.c0)>>(NULL))))<=((vt1.c0))) DESC, CASE WHEN (- (vt1.c1)) THEN ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)) WHEN ((vt1.c0)GLOB(vt1.c0)) THEN ((vt1.c0) IS FALSE) WHEN (~ (vt1.c0)) THEN (vt1.c0 IN (vt1.c1, vt1.c1)) WHEN ((vt1.c1)=(vt1.c1)) THEN (~ (vt1.c1)) ELSE vt1.c0 COLLATE NOCASE END DESC  NULLS LAST, LIKELIHOOD(vt1.c0, COALESCE(DISTINCT 2.131012904E9, vt1.c0, vt1.c1));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (vt1.c1) ORDER BY (((((vt1.c0))>((vt1.c0))))<=(CASE vt1.c1  WHEN vt1.c0 THEN 0.32155165758677007 WHEN 0.8538024302680152 THEN vt1.c1 ELSE vt1.c1 END))  NULLS LAST LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE ((NOT (((((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0))))) ORDER BY (((((vt1.c0))>((vt1.c0))))<=(CASE vt1.c1  WHEN vt1.c0 THEN 0.32155165758677007 WHEN 0.8538024302680152 THEN vt1.c1 ELSE vt1.c1 END))  NULLS LAST LIMIT 0X2;
SELECT MAX(v0.c1) FROM v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))<(((v0.c2) NOTNULL)))) ORDER BY ((+ (v0.c0)) IN ()) DESC;
SELECT MAX(v0.c1) FROM v0 WHERE (((((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))<(((v0.c2) NOTNULL))))AND(((v0.c1)>(x'39db'))))) ORDER BY CASE WHEN CASE v0.c1  WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END THEN CAST(v0.c0 AS TEXT) WHEN ((v0.c2) NOTNULL) THEN v0.c0 ELSE COALESCE(DISTINCT v0.c1, v0.c2, v0.c2) END  NULLS LAST, ((((v0.c1) IS FALSE)) ISNULL)  NULLS FIRST, ((((((((v0.c2) NOT NULL))OR((((v0.c0)) BETWEEN ((v0.c1)) AND ((v0.c1))))))AND(NULL)))OR(((((v0.c0)AND(v0.c1)))AND(v0.c1))))  NULLS LAST LIMIT 0X2;
SELECT ALL * FROM v0 WHERE (((((v0.c1, v0.c2, v0.c1, 'ꔶr', 0.47160898683051133)) BETWEEN ((v0.c2, v0.c0, v0.c1, v0.c1, NULL)) AND ((v0.c0, v0.c1, v0.c0, v0.c1, v0.c1))) IN ()));
SELECT ALL * FROM v0 WHERE (((((((v0.c1, v0.c2, v0.c1, 'ꔶr', 0.47160898683051133)) BETWEEN ((v0.c2, v0.c0, v0.c1, v0.c1, NULL)) AND ((v0.c0, v0.c1, v0.c0, v0.c1, v0.c1))) IN ()))AND((~ (((v0.c1)-(v0.c0)))))));
SELECT ALL * FROM v0 WHERE (((((v0.c1, v0.c2, v0.c1, 'ꔶr', 0.47160898683051133)) BETWEEN ((v0.c2, v0.c0, v0.c1, v0.c1, NULL)) AND ((v0.c0, v0.c1, v0.c0, v0.c1, v0.c1))) IN ()));
SELECT ALL * FROM v0 WHERE (((((((v0.c1, v0.c2, v0.c1, 'ꔶr', 0.47160898683051133)) BETWEEN ((v0.c2, v0.c0, v0.c1, v0.c1, NULL)) AND ((v0.c0, v0.c1, v0.c0, v0.c1, v0.c1))) IN ()))AND((~ (((v0.c1)-(v0.c0)))))));
SELECT ALL * FROM v0 WHERE (v0.c1) ORDER BY ((v0.c1)|(v0.c2)) COLLATE NOCASE DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (v0.c1) ORDER BY ((v0.c1)|(v0.c2)) COLLATE NOCASE DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0 WHERE (v0.c1) ORDER BY ((v0.c1)|(v0.c2)) COLLATE NOCASE DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (v0.c1) ORDER BY ((v0.c1)|(v0.c2)) COLLATE NOCASE DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt1, v0 WHERE ((((((((((v0.c0, vt1.c1, v0.c0))<((vt1.c1, vt1.c0, '}nmaG\y8'))))OR(((vt1.c1) ISNULL))))AND((v0.c2 IN (vt1.c1)))))AND(0.48744024142671094)));
SELECT * FROM vt1, v0 WHERE ((((((((((((v0.c0, vt1.c1, v0.c0))<((vt1.c1, vt1.c0, '}nmaG\y8'))))OR(((vt1.c1) ISNULL))))AND((v0.c2 IN (vt1.c1)))))AND(0.48744024142671094)))AND(((v0.c0)>((NOT (vt1.c1)))))));
SELECT * FROM vt1, v0 WHERE ((((((((((v0.c0, vt1.c1, v0.c0))<((vt1.c1, vt1.c0, '}nmaG\y8'))))OR(((vt1.c1) ISNULL))))AND((v0.c2 IN (vt1.c1)))))AND(0.48744024142671094)));
SELECT * FROM vt1, v0 WHERE ((((((((((((v0.c0, vt1.c1, v0.c0))<((vt1.c1, vt1.c0, '}nmaG\y8'))))OR(((vt1.c1) ISNULL))))AND((v0.c2 IN (vt1.c1)))))AND(0.48744024142671094)))AND(((v0.c0)>((NOT (vt1.c1)))))));
SELECT * FROM vt1, v0 WHERE (CAST(CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 ELSE v0.c1 END AS INTEGER)) ORDER BY ((v0.c2 COLLATE NOCASE) BETWEEN (vt1.c0) AND (vt1.c1))  NULLS FIRST, (NOT (CAST(v0.c1 AS BLOB))) DESC, ((((vt1.c0)LIKE(v0.c1))) BETWEEN ((v0.c1 IN (v0.c1, vt1.c1))) AND (json_object(v0.c2, v0.c0))), '*ZnAl' DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 ELSE v0.c1 END AS INTEGER)) ORDER BY v0.c2 ASC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (CAST(CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 ELSE v0.c1 END AS INTEGER)) ORDER BY ((v0.c2 COLLATE NOCASE) BETWEEN (vt1.c0) AND (vt1.c1))  NULLS FIRST, (NOT (CAST(v0.c1 AS BLOB))) DESC, ((((vt1.c0)LIKE(v0.c1))) BETWEEN ((v0.c1 IN (v0.c1, vt1.c1))) AND (json_object(v0.c2, v0.c0))), '*ZnAl' DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 ELSE v0.c1 END AS INTEGER)) ORDER BY v0.c2 ASC  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0, vt1 WHERE (NULL);
SELECT MIN(v0.c2) FROM v0, vt1 WHERE (NULL) LIMIT 3;
SELECT COUNT(*) FROM v0, vt1 WHERE (CASE WHEN NULL THEN vt1.c1 WHEN CASE WHEN v0.c1 THEN v0.c2 ELSE vt1.c1 END THEN ((v0.c2)<=(v0.c2)) WHEN (+ (vt1.c1)) THEN ((v0.c1)AND(vt1.c0)) END);
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((CASE WHEN NULL THEN vt1.c1 WHEN CASE WHEN v0.c1 THEN v0.c2 ELSE vt1.c1 END THEN ((v0.c2)<=(v0.c2)) WHEN (+ (vt1.c1)) THEN ((v0.c1)AND(vt1.c0)) END)AND(SQLITE_COMPILEOPTION_GET(CASE NULL  WHEN vt1.c1 THEN vt1.c0 ELSE v0.c1 END)))) ORDER BY v0.c2 ASC  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((((v0.c2, -757902307))<>(((((v0.c1, vt1.c0))<=((v0.c0, vt1.c1))), (~ (vt1.c0)))))) ORDER BY v0.c2 ASC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((((((('-578334636')||(vt1.c0)))OR((('IJG') ISNULL))))AND(-3.26459721E8))) ORDER BY CASE CASE WHEN v0.c0 THEN x'' WHEN x'70' THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END  WHEN ((v0.c2) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN vt1.c1 COLLATE RTRIM WHEN '5+晣땮' THEN ((((v0.c0)AND(vt1.c0)))OR(vt1.c1)) WHEN vt1.c0 COLLATE BINARY THEN ((('E4'))>((vt1.c1))) ELSE ((v0.c0) ISNULL) END ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((((('-578334636')||(vt1.c0)))OR((('IJG') ISNULL))))AND(-3.26459721E8)))AND(UPPER(DISTINCT vt1.c1) COLLATE NOCASE))) ORDER BY (CASE WHEN vt1.c0 THEN 0.7450454689222399 END IN (v0.c2)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CASE WHEN (- (v0.c2)) THEN (vt1.c0 IN ()) END) ORDER BY (CASE WHEN vt1.c0 THEN 0.7450454689222399 END IN (v0.c2)) ASC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE ((((((('-578334636')||(vt1.c0)))OR((('IJG') ISNULL))))AND(-3.26459721E8))) ORDER BY CASE CASE WHEN v0.c0 THEN x'' WHEN x'70' THEN v0.c0 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END  WHEN ((v0.c2) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN vt1.c1 COLLATE RTRIM WHEN '5+晣땮' THEN ((((v0.c0)AND(vt1.c0)))OR(vt1.c1)) WHEN vt1.c0 COLLATE BINARY THEN ((('E4'))>((vt1.c1))) ELSE ((v0.c0) ISNULL) END ASC;
SELECT DISTINCT * FROM vt1, v0 WHERE ((((((((('-578334636')||(vt1.c0)))OR((('IJG') ISNULL))))AND(-3.26459721E8)))AND(UPPER(DISTINCT vt1.c1) COLLATE NOCASE))) ORDER BY (CASE WHEN vt1.c0 THEN 0.7450454689222399 END IN (v0.c2)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CASE WHEN (- (v0.c2)) THEN (vt1.c0 IN ()) END) ORDER BY (CASE WHEN vt1.c0 THEN 0.7450454689222399 END IN (v0.c2)) ASC  NULLS FIRST;
SELECT * FROM vt1 WHERE ((((vt1.c1 IN (vt1.c0))) NOT BETWEEN (-2058342109) AND ((((vt1.c0, vt1.c1))<((vt1.c0, vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1 IN (vt1.c0))) NOT BETWEEN (0Xffffffff85503123) AND ((((vt1.c0, vt1.c1))<=((vt1.c0, vt1.c0))))))AND((((((((((NOT (vt1.c1)))OR(vt1.c0 COLLATE BINARY)))AND(vt1.c1 COLLATE RTRIM)))AND(((vt1.c1) NOTNULL))))AND(((vt1.c1)>>(vt1.c1))))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0)OR(x'')))OR(vt1.c1)))OR(vt1.c0)) IN ()));
SELECT * FROM vt1 WHERE ((((vt1.c1 IN (vt1.c0))) NOT BETWEEN (-2058342109) AND ((((vt1.c0, vt1.c1))<((vt1.c0, vt1.c0))))));
SELECT DISTINCT * FROM vt1 WHERE ((((((vt1.c1 IN (vt1.c0))) NOT BETWEEN (0Xffffffff85503123) AND ((((vt1.c0, vt1.c1))<=((vt1.c0, vt1.c0))))))AND((((((((((NOT (vt1.c1)))OR(vt1.c0 COLLATE BINARY)))AND(vt1.c1 COLLATE RTRIM)))AND(((vt1.c1) NOTNULL))))AND(((vt1.c1)>>(vt1.c1))))))) INTERSECT SELECT DISTINCT * FROM vt1 WHERE ((((((((vt1.c0)OR(x'')))OR(vt1.c1)))OR(vt1.c0)) IN ()));
SELECT ALL * FROM vt1 WHERE (UPPER(DISTINCT vt1.c0) COLLATE BINARY);
SELECT DISTINCT * FROM vt1 WHERE (((UPPER(DISTINCT vt1.c0) COLLATE BINARY)AND('0.20516486425040503'))) ORDER BY ((NULL) NOT NULL) ASC  NULLS LAST, CASE WHEN (NOT (vt1.c1)) THEN (- (vt1.c1)) END DESC;
SELECT ALL * FROM vt1 WHERE (UPPER(DISTINCT vt1.c0) COLLATE BINARY);
SELECT DISTINCT * FROM vt1 WHERE (((UPPER(DISTINCT vt1.c0) COLLATE BINARY)AND('0.20516486425040503'))) ORDER BY ((NULL) NOT NULL) ASC  NULLS LAST, CASE WHEN (NOT (vt1.c1)) THEN (- (vt1.c1)) END DESC;
SELECT * FROM v0, vt1 WHERE (((NOT (vt1.c1)) IN (((vt1.c1) ISNULL)))) ORDER BY (((((+ (v0.c0)))AND((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))))OR((+ (v0.c2)))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE (((NOT (vt1.c1)) IN (((vt1.c1) ISNULL)))) ORDER BY json_extract(0.14537307659878418, ((v0.c1)>=(vt1.c1))) ASC LIMIT 0;
SELECT * FROM v0, vt1 WHERE (((NOT (vt1.c1)) IN (((vt1.c1) ISNULL)))) ORDER BY (((((+ (v0.c0)))AND((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))))OR((+ (v0.c2)))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE (((NOT (vt1.c1)) IN (((vt1.c1) ISNULL)))) ORDER BY json_extract(0.14537307659878418, ((v0.c1)>=(vt1.c1))) ASC LIMIT 0;
SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE (CASE ((v0.c1) NOTNULL)  WHEN ((v0.c1)>(v0.c1)) THEN '-707585088' WHEN ((vt1.c0) IS TRUE) THEN LIKELIHOOD(v0.c0, v0.c1) END);
SELECT MIN(vt1.c1) FROM vt1, v0 WHERE (CASE ((v0.c1) NOTNULL)  WHEN ((v0.c1)>(v0.c1)) THEN '-707585088' WHEN ((vt1.c0) IS TRUE) THEN LIKELIHOOD(v0.c0, v0.c1) END) LIMIT 0 INTERSECT SELECT ALL MIN(vt1.c1) FROM vt1, v0 WHERE (vt1.c1) LIMIT 0x0;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (UNLIKELY(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) ORDER BY (+ (x''))  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((UNLIKELY(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0))))AND(vt1.c1))) ORDER BY CAST(856469861 AS REAL) ASC  NULLS FIRST, ((((0.43988860813894004)-(vt1.c1)))>=(-1728737727)) DESC  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((CAST(vt1.c1 AS INTEGER))OR(TRIM(vt1.c0))))OR(((vt1.c1)<(0xffffffff95582b88))))) ORDER BY CAST(0x330cb165 AS REAL) ASC  NULLS FIRST, ((((0.43988860813894004)-(vt1.c1)))>=(-1728737727)) DESC  NULLS LAST LIMIT 1;
SELECT ALL MAX(v0.c0) FROM v0 WHERE ((- (((v0.c2) NOT BETWEEN (x'a1') AND (v0.c0))))) ORDER BY ((v0.c1 COLLATE BINARY) NOT NULL) ASC, ((CASE WHEN v0.c2 THEN v0.c0 END)AND((v0.c1 IN ())))  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE ((- (((v0.c2) NOT BETWEEN (x'a1') AND (v0.c0))))) ORDER BY ((v0.c1 COLLATE BINARY) NOT NULL) ASC, ((CASE WHEN v0.c2 THEN v0.c0 END)AND((v0.c1 IN ())))  NULLS FIRST INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (0.10372478615398428) ORDER BY ((v0.c1 COLLATE BINARY) NOT NULL) ASC, ((CASE WHEN v0.c2 THEN v0.c0 END)AND((v0.c1 IN ())))  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM v0 WHERE ((STRFTIME(v0.c0, v0.c0, v0.c2, v0.c1) IN (((((((((((v0.c1)OR(v0.c0)))OR(v0.c2)))OR('-707585088')))OR(v0.c1)))AND(v0.c1)))));
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ((((STRFTIME(v0.c0, v0.c0, v0.c2, v0.c1) IN (((((((((((v0.c1)OR(v0.c0)))OR(v0.c2)))OR('-707585088')))OR(v0.c1)))AND(v0.c1)))))AND((- ('-419157802'))))) LIMIT 1;
SELECT * FROM v0, vt1 WHERE (((((vt1.c0)==(v0.c2))) ISNULL));
SELECT ALL * FROM v0, vt1 WHERE (((((((vt1.c0)==(v0.c2))) ISNULL))AND(vt1.c0))) ORDER BY TRIM(((((vt1.c0)AND(v0.c2)))AND(v0.c1))) ASC  NULLS LAST, ((((x'')OR(v0.c0)))AND(v0.c1)) COLLATE RTRIM DESC;
SELECT * FROM v0, vt1 WHERE (((((vt1.c0)==(v0.c2))) ISNULL));
SELECT ALL * FROM v0, vt1 WHERE (((((((vt1.c0)==(v0.c2))) ISNULL))AND(vt1.c0))) ORDER BY TRIM(((((vt1.c0)AND(v0.c2)))AND(v0.c1))) ASC  NULLS LAST, ((((x'')OR(v0.c0)))AND(v0.c1)) COLLATE RTRIM DESC;
SELECT ALL COUNT(*) FROM vt1 LEFT OUTER JOIN v0 ON ((((('872574254')AND(v0.c0)), CASE v0.c0  WHEN v0.c2 THEN v0.c0 ELSE 0.7925867818966207 END))=((CAST(v0.c2 AS TEXT), ((((v0.c1)AND(vt1.c0)))OR(vt1.c0))))) WHERE (((((((((((vt1.c1) IS FALSE))OR(((vt1.c1) NOTNULL))))AND(vt1.c1)))OR(((vt1.c1) IS TRUE))))AND(((((vt1.c1)AND(v0.c1)))AND(v0.c1)))));
SELECT COUNT(*) FROM vt1 INNER JOIN v0 ON ((((('872574254')AND(v0.c0)), CASE v0.c0  WHEN v0.c2 THEN v0.c0 ELSE 0.7925867818966207 END))==((CAST(v0.c2 AS TEXT), ((((v0.c1)AND(vt1.c0)))OR(vt1.c0))))) WHERE (((((((((((((vt1.c1) IS FALSE))OR(((vt1.c1) NOTNULL))))AND(vt1.c1)))OR(((vt1.c1) IS TRUE))))AND(((((vt1.c1)AND(v0.c1)))AND(v0.c1)))))AND((vt1.c0 IN ()) COLLATE RTRIM))) ORDER BY CAST((vt1.c1 IN ()) AS TEXT) DESC  NULLS FIRST LIMIT 0x0;
SELECT MIN(vt1.c0) FROM vt1 WHERE ((NOT (CASE vt1.c0  WHEN x'' THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END)));
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((NOT (CASE vt1.c0  WHEN x'' THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END))) LIMIT 0x0;
SELECT ALL * FROM vt1, v0 WHERE ((CASE v0.c1  WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END IN ()));
SELECT * FROM vt1, v0 WHERE ((CASE v0.c1  WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END IN ())) ORDER BY TYPEOF(((((((v0.c0)OR(v0.c2)))OR(vt1.c1)))AND(v0.c2)))  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((NOT ((v0.c2 IN ())))) ORDER BY TYPEOF(((((((v0.c0)OR(v0.c2)))OR(vt1.c1)))AND(v0.c2)))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((CASE v0.c1  WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END IN ()));
SELECT * FROM vt1, v0 WHERE ((CASE v0.c1  WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END IN ())) ORDER BY TYPEOF(((((((v0.c0)OR(v0.c2)))OR(vt1.c1)))AND(v0.c2)))  NULLS FIRST INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((NOT ((v0.c2 IN ())))) ORDER BY TYPEOF(((((((v0.c0)OR(v0.c2)))OR(vt1.c1)))AND(v0.c2)))  NULLS FIRST;
SELECT MAX(v0.c2) FROM vt1, v0 WHERE (((ABS(v0.c1)) BETWEEN (CAST('-1591475189' AS INTEGER)) AND ((NOT (vt1.c0))))) ORDER BY CAST(NULL AS BLOB) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE (((((ABS(v0.c1)) BETWEEN (CAST('-1591475189' AS INTEGER)) AND ((NOT (vt1.c0)))))AND(((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 END) BETWEEN (CAST(vt1.c0 AS INTEGER)) AND ((~ (v0.c2))))))) ORDER BY '{' DESC  NULLS LAST, ((vt1.c0)LIKE(vt1.c1)) COLLATE BINARY  NULLS FIRST, CAST(vt1.c1 COLLATE BINARY AS TEXT)  NULLS FIRST, ABS(v0.c0) ASC  NULLS FIRST, ((((((((((v0.c1)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))-(((v0.c2)*(v0.c1))))  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE ((((v0.c0 IN (v0.c2)))>=(0.296125741586469))) ORDER BY '{' DESC  NULLS LAST, ((vt1.c0)LIKE(vt1.c1)) COLLATE BINARY  NULLS FIRST, CAST(vt1.c1 COLLATE BINARY AS TEXT)  NULLS FIRST, ABS(v0.c0) ASC  NULLS FIRST, ((((((((((v0.c1)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)))OR(v0.c2)))-(((v0.c2)*(v0.c1))))  NULLS FIRST LIMIT 0x0;
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((~ ((v0.c1 IN (v0.c1, v0.c1))))) ORDER BY CHANGES() DESC  NULLS FIRST, ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))+(((v0.c2)>(v0.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((~ ((v0.c1 IN (v0.c1))))) ORDER BY ((CASE WHEN x'81' THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c0 END)LIKE(CASE '{Tb'  WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END))  NULLS LAST, (((((v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((v0.c1, v0.c0))))&(v0.c0 COLLATE NOCASE)) DESC  NULLS LAST;
SELECT * FROM v0 WHERE (((((((CASE WHEN v0.c0 THEN v0.c1 END)OR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)))OR(CAST(v0.c2 AS INTEGER))))OR('357142446')));
SELECT ALL * FROM v0 WHERE (((((((((CASE WHEN v0.c0 THEN v0.c1 END)OR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)))OR(CAST(v0.c2 AS INTEGER))))OR('357142446')))AND(NULL)));
SELECT * FROM v0 WHERE (((((((CASE WHEN v0.c0 THEN v0.c1 END)OR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)))OR(CAST(v0.c2 AS INTEGER))))OR('357142446')));
SELECT ALL * FROM v0 WHERE (((((((((CASE WHEN v0.c0 THEN v0.c1 END)OR(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)))OR(CAST(v0.c2 AS INTEGER))))OR('357142446')))AND(NULL)));
SELECT MAX(v0.c1) FROM vt1 CROSS JOIN v0 ON (((- (v0.c0)))AND(CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 END)) WHERE (((((((((((((((((((v0.c0)AND(v0.c1)))AND(vt1.c0)))OR(v0.c2)))OR('1905693494')))AND(((vt1.c0) BETWEEN (v0.c1) AND (0xffffffffd9d2e8fb)))))AND(CAST(vt1.c1 AS REAL))))OR(((v0.c1)LIKE(v0.c0)))))AND(v0.c2)))OR(((v0.c0) BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY v0.c2 ASC;
SELECT ALL MAX(v0.c1) FROM vt1 CROSS JOIN v0 ON (((- (v0.c0)))AND(CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 END)) WHERE (((((((((((((((((((v0.c0)AND(v0.c1)))AND(vt1.c0)))OR(v0.c2)))OR('1905693494')))AND(((vt1.c0) BETWEEN (v0.c1) AND (-640489221)))))AND(CAST(vt1.c1 AS REAL))))OR(((v0.c1)LIKE(v0.c0)))))AND(v0.c2)))OR(((v0.c0) BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY v0.c2 ASC INTERSECT SELECT MAX(v0.c1) FROM vt1 CROSS JOIN v0 ON (((- (v0.c0)))AND(CASE v0.c0  WHEN v0.c2 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 END)) WHERE ((((((v0.c0, v0.c2))>((v0.c1, vt1.c1))))<(CAST(-1.017404822E9 AS INTEGER)))) ORDER BY v0.c2 ASC;
SELECT MIN(vt1.c0) FROM vt1 WHERE (TRIM(DISTINCT (vt1.c1 IN ()), (vt1.c1 IN (vt1.c1)))) ORDER BY (- (((vt1.c1) IS TRUE)))  NULLS LAST;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((TRIM(DISTINCT (vt1.c1 IN ()), (vt1.c1 IN (vt1.c1))))AND(CASE WHEN (- (vt1.c1)) THEN ((vt1.c0)<<(vt1.c1)) WHEN -684543452 THEN (vt1.c1 IN ()) WHEN UNLIKELY(DISTINCT '0.003068155204134504') THEN ((vt1.c1) IS FALSE) END))) ORDER BY CAST((((NULL))<=((vt1.c1))) AS INTEGER)  NULLS FIRST, CASE WHEN (vt1.c0 IN ()) THEN (((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c0))) ELSE CASE 0.07930892585860216  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END END  NULLS FIRST INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE ((+ (CAST(vt1.c1 AS INTEGER)))) ORDER BY CAST((((NULL))<=((vt1.c1))) AS INTEGER)  NULLS FIRST, CASE WHEN (vt1.c0 IN ()) THEN (((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c0))) ELSE CASE 0.07930892585860216  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 END END  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (CAST(((v0.c1) IS FALSE) AS INTEGER)) ORDER BY (((v0.c2)&('')) IN ()) DESC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (((CAST(((v0.c1) IS FALSE) AS INTEGER))AND(((highlight(v0.c0, vt1.c1, v0.c2, v0.c0)) BETWEEN (((vt1.c1)IS(vt1.c1))) AND (((vt1.c1)/(v0.c0))))))) ORDER BY (((v0.c2)&('')) IN ()) DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt1, v0 WHERE ((((((('-872114386')AND(((((((v0.c1)AND(v0.c1)))OR(v0.c1)))OR(v0.c0)))))OR(((('', v0.c2)) BETWEEN ((v0.c0, v0.c1)) AND ((vt1.c0, vt1.c1))))))OR(CASE WHEN v0.c0 THEN vt1.c0 WHEN v0.c1 THEN v0.c1 END))) ORDER BY (((v0.c2)&('')) IN ()) DESC  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (CAST(((v0.c1) IS FALSE) AS INTEGER)) ORDER BY (((v0.c2)&('')) IN ()) DESC  NULLS LAST;
SELECT ALL MAX(v0.c1) FROM v0, vt1 WHERE (((CAST(vt1.c1 AS REAL)) BETWEEN ((((vt1.c0, vt1.c0, v0.c2, v0.c1, v0.c2)) BETWEEN ((v0.c0, v0.c1, vt1.c1, v0.c2, v0.c0)) AND ((v0.c1, v0.c0, vt1.c1, NULL, 'G>3r ')))) AND ((((vt1.c1))!=(('284886852')))))) ORDER BY ((((((v0.c0) IS TRUE))AND(vt1.c1 COLLATE NOCASE)))OR(((((v0.c0)OR(v0.c0)))AND(NULL))));
SELECT DISTINCT MAX(v0.c1) FROM v0, vt1 WHERE (((((CAST(vt1.c1 AS REAL)) BETWEEN ((((vt1.c0, vt1.c0, v0.c2, v0.c1, v0.c2)) BETWEEN ((v0.c0, v0.c1, vt1.c1, v0.c2, v0.c0)) AND ((v0.c1, v0.c0, vt1.c1, NULL, 'G>3r ')))) AND ((((vt1.c1))<>(('284886852'))))))AND(UPPER((((vt1.c1, v0.c1, v0.c1, v0.c2)) NOT BETWEEN ((v0.c0, v0.c0, v0.c2, v0.c1)) AND ((v0.c1, vt1.c0, v0.c0, vt1.c1))))))) ORDER BY ((((((v0.c0) IS TRUE))AND(vt1.c1 COLLATE NOCASE)))OR(((((v0.c0)OR(v0.c0)))AND(NULL)))) LIMIT 3;
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE (LIKELIHOOD(CAST(v0.c1 AS INTEGER), CAST(vt1.c0 AS REAL)));
SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (((LIKELIHOOD(CAST(v0.c1 AS INTEGER), CAST(vt1.c0 AS REAL)))AND(((((v0.c0)IS(vt1.c0))) NOTNULL)))) ORDER BY CAST(((v0.c1)OR(NULL)) AS TEXT)  NULLS LAST, CAST(CASE vt1.c0  WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN vt1.c0 WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END AS INTEGER)  NULLS FIRST, ((x'')||((v0.c2 IN ())))  NULLS LAST;
SELECT COUNT(*) FROM v0 NOT INDEXED, vt1 WHERE (((((UPPER(DISTINCT vt1.c0))OR(((vt1.c1)>>(v0.c0)))))AND(((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1))))) ORDER BY (((x'7b228e', vt1.c0, v0.c0, vt1.c0)) BETWEEN ((x'ef8d3a', CAST(vt1.c0 AS REAL), v0.c0 COLLATE RTRIM, ((((((((vt1.c0)AND(v0.c0)))AND(vt1.c0)))OR(v0.c0)))AND(vt1.c1)))) AND ((vt1.c1, ((v0.c0) BETWEEN (vt1.c1) AND (v0.c0)), LIKELY(vt1.c1), 0.37619604584762645))) DESC;
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((((((UPPER(DISTINCT vt1.c0))OR(((vt1.c1)>>(v0.c0)))))AND(((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))))AND(((vt1.c0 COLLATE NOCASE)IS(CASE vt1.c1  WHEN vt1.c1 THEN v0.c0 WHEN vt1.c1 THEN v0.c0 ELSE '' END))))) ORDER BY ((((v0.c2) BETWEEN (v0.c2) AND (v0.c1)))*(v0.c0 COLLATE NOCASE)), ((((v0.c1)LIKE(1269145269))) ISNULL) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (CASE CASE WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 END  WHEN (((v0.c1, x'', v0.c0))<>((v0.c0, v0.c0, v0.c2))) THEN vt1.c0 COLLATE BINARY WHEN (v0.c0 IN ()) THEN ((v0.c0)IS(-1728737727)) ELSE (v0.c1 IN (v0.c2)) END) ORDER BY ((((v0.c2) BETWEEN (v0.c2) AND (v0.c1)))*(v0.c0 COLLATE NOCASE)), ((((v0.c1)LIKE(1269145269))) ISNULL) ASC;
SELECT MIN(v0.c0) FROM vt1, v0 WHERE (CASE WHEN v0.c0 THEN ((((((((v0.c2)OR(vt1.c0)))AND(v0.c2)))OR(vt1.c1)))OR(v0.c1)) WHEN (((v0.c2)) BETWEEN ((v0.c2)) AND ((v0.c2))) THEN (v0.c1 IN ()) WHEN ((((((((((v0.c0)AND(v0.c2)))AND(v0.c2)))OR(x'573676')))AND(v0.c1)))OR(v0.c2)) THEN CASE v0.c2  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END END);
SELECT DISTINCT MIN(v0.c0) FROM vt1, v0 WHERE (CASE WHEN v0.c0 THEN ((((((((v0.c2)OR(vt1.c0)))AND(v0.c2)))OR(vt1.c1)))OR(v0.c1)) WHEN (((v0.c2)) BETWEEN ((v0.c2)) AND ((v0.c2))) THEN (v0.c1 IN ()) WHEN ((((((((((v0.c0)AND(v0.c2)))AND(v0.c2)))OR(x'573676')))AND(v0.c1)))OR(v0.c2)) THEN CASE v0.c2  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END END);
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (CASE ((vt1.c1)*(vt1.c0))  WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END THEN json_object(vt1.c0, vt1.c1) END);
SELECT MIN(vt1.c0) FROM vt1 WHERE (CASE ((vt1.c1)*(vt1.c0))  WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END THEN json_object(vt1.c0, vt1.c1) END) LIMIT 0X2 INTERSECT SELECT MIN(vt1.c0) FROM vt1 WHERE (((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN '%' WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END)||((NOT (vt1.c0))))) LIMIT 2;
SELECT MIN(v0.c0) FROM v0 WHERE ((((((v0.c0))>(('B~mJ'))))AND(TRIM(-640489221))));
SELECT ALL MIN(v0.c0) FROM v0 WHERE ((((((v0.c0))>(('B~mJ'))))AND(TRIM(-640489221))));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((((vt1.c0 IN (vt1.c0)))!=(((v0.c1) IS FALSE))));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((((((vt1.c0 IN (vt1.c0)))>(((v0.c1) IS FALSE))))AND('OVrHjux'))) LIMIT 0x0;
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((((((((((v0.c1 IN ()))OR((((v0.c2))>=((v0.c1))))))OR(((-2.081089654E9)IS(v0.c0)))))AND(((v0.c1) IS FALSE))))OR((v0.c2 IN ()))));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ((((((((((((v0.c1 IN ()))OR((((v0.c2))=((v0.c1))))))OR(((-2.081089654E9)IS(v0.c0)))))AND(((v0.c1) IS FALSE))))OR((v0.c2 IN ()))))AND((v0.c0 IN (((((((((((((((((v0.c0)AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(v0.c0)))OR(v0.c0)))OR(v0.c2)))OR(v0.c0)), ((v0.c2) BETWEEN (v0.c2) AND (x'')), ((v0.c2)%(v0.c1))))))) LIMIT 0;
SELECT COUNT(*) FROM vt1 WHERE (LOWER(((vt1.c1) ISNULL))) ORDER BY UNLIKELY(vt1.c0) COLLATE NOCASE, (IFNULL(vt1.c0, vt1.c1) IN (((vt1.c0) NOT NULL), ((vt1.c1)*(vt1.c1))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (LOWER(((vt1.c1) ISNULL))) ORDER BY vt1.c1 ASC, CASE WHEN ((vt1.c0)>>(vt1.c0)) THEN CAST(vt1.c1 AS INTEGER) END DESC;
SELECT ALL * FROM v0 WHERE ((((v0.c1)) NOT BETWEEN ((((v0.c0) NOT NULL))) AND ((LIKELY(v0.c0))))) ORDER BY v0.c2, ((((((v0.c1)-(v0.c2)))OR(((v0.c1) NOT BETWEEN (NULL) AND (v0.c2)))))OR(('}ZjmH?(' IN (v0.c2)))) ASC;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1)) NOT BETWEEN ((((v0.c0) NOT NULL))) AND ((LIKELY(v0.c0)))))AND(((v0.c1) BETWEEN (v0.c0) AND (v0.c2)) COLLATE BINARY))) ORDER BY (+ (((v0.c1) BETWEEN (v0.c0) AND (v0.c1)))) DESC, ((((((((v0.c2)OR(v0.c2)))OR(v0.c0)))OR(v0.c0))) NOT BETWEEN (((v0.c0)>(v0.c0))) AND ((v0.c2 IN ()))), ((x'e4cd0c') NOT BETWEEN (v0.c1 COLLATE BINARY) AND (((v0.c0)-(v0.c1)))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c1)|(v0.c1))) BETWEEN (((v0.c1) NOT BETWEEN (v0.c2) AND (-347982967))) AND (0.23648680729179883))) ORDER BY (+ (((v0.c1) BETWEEN (v0.c0) AND (v0.c1)))) DESC, ((((((((v0.c2)OR(v0.c2)))OR(v0.c0)))OR(v0.c0))) NOT BETWEEN (((v0.c0)>(v0.c0))) AND ((v0.c2 IN ()))), ((x'e4cd0c') NOT BETWEEN (v0.c1 COLLATE BINARY) AND (((v0.c0)-(v0.c1)))) LIMIT 3;
SELECT ALL * FROM v0 WHERE ((((v0.c1)) NOT BETWEEN ((((v0.c0) NOT NULL))) AND ((LIKELY(v0.c0))))) ORDER BY v0.c2, ((((((v0.c1)-(v0.c2)))OR(((v0.c1) NOT BETWEEN (NULL) AND (v0.c2)))))OR(('}ZjmH?(' IN (v0.c2)))) ASC;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c1)) NOT BETWEEN ((((v0.c0) NOT NULL))) AND ((LIKELY(v0.c0)))))AND(((v0.c1) BETWEEN (v0.c0) AND (v0.c2)) COLLATE BINARY))) ORDER BY (+ (((v0.c1) BETWEEN (v0.c0) AND (v0.c1)))) DESC, ((((((((v0.c2)OR(v0.c2)))OR(v0.c0)))OR(v0.c0))) NOT BETWEEN (((v0.c0)>(v0.c0))) AND ((v0.c2 IN ()))), ((x'e4cd0c') NOT BETWEEN (v0.c1 COLLATE BINARY) AND (((v0.c0)-(v0.c1)))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c1)|(v0.c1))) BETWEEN (((v0.c1) NOT BETWEEN (v0.c2) AND (-347982967))) AND (0.23648680729179883))) ORDER BY (+ (((v0.c1) BETWEEN (v0.c0) AND (v0.c1)))) DESC, ((((((((v0.c2)OR(v0.c2)))OR(v0.c0)))OR(v0.c0))) NOT BETWEEN (((v0.c0)>(v0.c0))) AND ((v0.c2 IN ()))), ((x'e4cd0c') NOT BETWEEN (v0.c1 COLLATE BINARY) AND (((v0.c0)-(v0.c1)))) LIMIT 3;
SELECT ALL COUNT(*) FROM vt1 CROSS JOIN v0 ON vt1.c0 WHERE (((CAST(vt1.c1 AS NUMERIC)) IS FALSE)) ORDER BY 0.17718958180131206 ASC;
SELECT COUNT(*) FROM vt1 CROSS JOIN v0 ON vt1.c0 WHERE (((CAST(vt1.c1 AS NUMERIC)) IS FALSE)) ORDER BY 0.17718958180131206 ASC LIMIT 1;
SELECT MAX(v0.c0) FROM v0, vt1 WHERE ((((((((((v0.c0, vt1.c1, vt1.c0, v0.c2, v0.c2, vt1.c1))>((v0.c0, v0.c1, vt1.c0, vt1.c1, v0.c0, vt1.c1))))OR(((((((((v0.c0)OR(v0.c1)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c1)))))OR(NULL)))OR(TRIM(DISTINCT vt1.c1)))) ORDER BY UNLIKELY(DISTINCT CAST(v0.c1 AS TEXT))  NULLS LAST;
SELECT ALL MAX(v0.c0) FROM v0, vt1 WHERE ((((((((((((v0.c0, vt1.c1, vt1.c0, v0.c2, v0.c2, vt1.c1))>((v0.c0, v0.c1, vt1.c0, vt1.c1, v0.c0, vt1.c1))))OR(((((((((v0.c0)OR(v0.c1)))AND(vt1.c1)))OR(vt1.c1)))OR(v0.c1)))))OR(NULL)))OR(TRIM(DISTINCT vt1.c1))))AND(CASE vt1.c0  WHEN ((((((((((v0.c2)AND(v0.c2)))OR(vt1.c1)))AND(vt1.c0)))OR(vt1.c0)))OR(v0.c2)) THEN (v0.c2 IN ()) ELSE ((((vt1.c1)AND('')))OR(vt1.c0)) END))) ORDER BY ((MAX(vt1.c0, vt1.c0))+(vt1.c0))  NULLS LAST, ((CASE x''  WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 END) BETWEEN (((vt1.c0) IS FALSE)) AND (((((vt1.c1)OR(v0.c2)))AND(vt1.c1)))) LIMIT 0X0;
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1)OR(v0.c0)))||(((v0.c2)>=(vt1.c1)))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((vt1.c1)OR(v0.c0)))||(((v0.c2)=(vt1.c1)))))AND((((((v0.c0)<(vt1.c0))))==((((('v{')) BETWEEN ((v0.c2)) AND ((vt1.c1))))))))) LIMIT 0x1;
SELECT ALL * FROM v0, vt1 WHERE (((((vt1.c1)OR(v0.c0)))||(((v0.c2)>=(vt1.c1)))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((((((vt1.c1)OR(v0.c0)))||(((v0.c2)=(vt1.c1)))))AND((((((v0.c0)<(vt1.c0))))==((((('v{')) BETWEEN ((v0.c2)) AND ((vt1.c1))))))))) LIMIT 0x1;
SELECT COUNT(*) FROM vt1 WHERE ((((((vt1.c1 IN (vt1.c0)))AND(((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)))))AND((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c1)))))) ORDER BY CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END COLLATE NOCASE ASC, CASE CAST(vt1.c1 AS TEXT)  WHEN CAST(vt1.c1 AS TEXT) THEN (((0Xffffffffbd111a6c, vt1.c1, NULL, '233139967', vt1.c0))>=((vt1.c1, -3.16303965E8, vt1.c1, vt1.c0, vt1.c0))) ELSE ((vt1.c0)LIKE(vt1.c0)) END;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((((((vt1.c1 IN (vt1.c0)))AND(((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1)))))AND((((vt1.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c1))))))AND((((((NOT (vt1.c1)))OR((((vt1.c1, NULL, NULL, vt1.c1, vt1.c0)) BETWEEN ((vt1.c1, vt1.c1, x'', vt1.c0, vt1.c1)) AND ((vt1.c1, vt1.c1, vt1.c1, vt1.c1, vt1.c0))))))AND(((((vt1.c1)OR(vt1.c0)))OR(vt1.c1))))))) ORDER BY HEX(vt1.c0) COLLATE RTRIM LIMIT 0x3;
SELECT COUNT(*) FROM vt1 WHERE ((((NOT (vt1.c1)))%(vt1.c0))) ORDER BY ((((x'33')>>(vt1.c1)))+(((vt1.c0)==(vt1.c0))))  NULLS FIRST, (((((vt1.c1))<=((vt1.c0))))>(((vt1.c1) IS TRUE))), (- ((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))  NULLS LAST, (vt1.c1 IN ()) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((((NOT (vt1.c1)))%(vt1.c0)))AND(((((((vt1.c1, 0.9872397124392178))>((vt1.c1, vt1.c0))), vt1.c1 COLLATE BINARY))>((vt1.c1 COLLATE NOCASE, ((vt1.c0) BETWEEN ('-918350660') AND (vt1.c0)))))))) ORDER BY ((((x'33')>>(vt1.c1)))+(((vt1.c0)==(vt1.c0))))  NULLS FIRST, (((((vt1.c1))<=((vt1.c0))))>(((vt1.c1) IS TRUE))), (- ((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))  NULLS LAST, (vt1.c1 IN ()) COLLATE RTRIM DESC  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt1 WHERE (CAST(CAST(vt1.c1 AS REAL) AS REAL)) ORDER BY ((((x'33')>>(vt1.c1)))+(((vt1.c0)==(vt1.c0))))  NULLS FIRST, (((((vt1.c1))<=((vt1.c0))))>(((vt1.c1) IS TRUE))), (- ((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))  NULLS LAST, (vt1.c1 IN ()) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL MAX(v0.c2) FROM v0 NATURAL JOIN vt1 WHERE (v0.c1);
SELECT MAX(v0.c2) FROM v0 NATURAL JOIN vt1 WHERE (v0.c1) ORDER BY TYPEOF(v0.c2) COLLATE RTRIM  NULLS LAST, (((v0.c2) ISNULL) IN ()) DESC  NULLS LAST INTERSECT SELECT ALL MAX(v0.c2) FROM v0 NATURAL JOIN vt1 WHERE ((vt1.c0 COLLATE BINARY IN (UPPER(0.11794985972118299)))) ORDER BY TYPEOF(v0.c2) COLLATE RTRIM  NULLS LAST, (((v0.c2) ISNULL) IN ()) DESC  NULLS LAST;
SELECT * FROM v0 WHERE (CASE WHEN ((v0.c1) ISNULL) THEN CAST(v0.c0 AS REAL) WHEN ((v0.c0) IS TRUE) THEN v0.c1 WHEN ((v0.c1) ISNULL) THEN (((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c0))) ELSE CASE v0.c2  WHEN v0.c1 THEN v0.c0 WHEN x'06' THEN v0.c0 END END) ORDER BY ((((((((((CASE WHEN v0.c1 THEN v0.c0 END)OR(v0.c0)))AND((((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((x''))))))OR(v0.c1 COLLATE BINARY)))AND(CAST(v0.c2 AS REAL))))AND(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)) DESC  NULLS FIRST, SQLITE_SOURCE_ID();
SELECT DISTINCT * FROM v0 WHERE (CASE WHEN ((v0.c1) ISNULL) THEN CAST(v0.c0 AS REAL) WHEN ((v0.c0) IS TRUE) THEN v0.c1 WHEN ((v0.c1) ISNULL) THEN (((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c0))) ELSE CASE v0.c2  WHEN v0.c1 THEN v0.c0 WHEN x'06' THEN v0.c0 END END) ORDER BY ((((((((((CASE WHEN v0.c1 THEN v0.c0 END)OR(v0.c0)))AND((((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((x''))))))OR(v0.c1 COLLATE BINARY)))AND(CAST(v0.c2 AS REAL))))AND(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)) DESC  NULLS FIRST, SQLITE_SOURCE_ID();
SELECT * FROM v0 WHERE (CASE WHEN ((v0.c1) ISNULL) THEN CAST(v0.c0 AS REAL) WHEN ((v0.c0) IS TRUE) THEN v0.c1 WHEN ((v0.c1) ISNULL) THEN (((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c0))) ELSE CASE v0.c2  WHEN v0.c1 THEN v0.c0 WHEN x'06' THEN v0.c0 END END) ORDER BY ((((((((((CASE WHEN v0.c1 THEN v0.c0 END)OR(v0.c0)))AND((((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((x''))))))OR(v0.c1 COLLATE BINARY)))AND(CAST(v0.c2 AS REAL))))AND(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)) DESC  NULLS FIRST, SQLITE_SOURCE_ID();
SELECT DISTINCT * FROM v0 WHERE (CASE WHEN ((v0.c1) ISNULL) THEN CAST(v0.c0 AS REAL) WHEN ((v0.c0) IS TRUE) THEN v0.c1 WHEN ((v0.c1) ISNULL) THEN (((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c0))) ELSE CASE v0.c2  WHEN v0.c1 THEN v0.c0 WHEN x'06' THEN v0.c0 END END) ORDER BY ((((((((((CASE WHEN v0.c1 THEN v0.c0 END)OR(v0.c0)))AND((((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((x''))))))OR(v0.c1 COLLATE BINARY)))AND(CAST(v0.c2 AS REAL))))AND(CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)) DESC  NULLS FIRST, SQLITE_SOURCE_ID();
SELECT ALL MIN(v0.c0) FROM v0 WHERE (CASE ((v0.c0)%(v0.c0))  WHEN LOWER(DISTINCT v0.c2) THEN ((((((((v0.c1)AND(v0.c0)))AND(v0.c2)))AND(v0.c1)))AND(v0.c1)) WHEN CAST(v0.c0 AS REAL) THEN v0.c2 COLLATE RTRIM WHEN (v0.c2 IN (v0.c2)) THEN ((0.4059079612654276)>>(v0.c0)) END) ORDER BY ((((v0.c1, 0.3218047677622833, v0.c0)) NOT BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((v0.c1, v0.c2, v0.c2))) IN ()) ASC, ((((((v0.c2)AND(v0.c2)))AND(v0.c1))) NOTNULL) ASC  NULLS LAST, CAST(CAST(v0.c0 AS BLOB) AS INTEGER) DESC  NULLS FIRST;
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((CASE ((v0.c0)%(v0.c0))  WHEN LOWER(DISTINCT v0.c2) THEN ((((((((v0.c1)AND(v0.c0)))AND(v0.c2)))AND(v0.c1)))AND(v0.c1)) WHEN CAST(v0.c0 AS REAL) THEN v0.c2 COLLATE RTRIM WHEN (v0.c2 IN (v0.c2)) THEN ((0.4059079612654276)>>(v0.c0)) END)AND(((v0.c0)|(((v0.c2) BETWEEN (v0.c0) AND (v0.c2))))))) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))) IS TRUE) ASC  NULLS LAST, ((x'17') IS FALSE) ASC  NULLS LAST LIMIT 0x3 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ((((CAST(v0.c2 AS NUMERIC)))<=((((v0.c0) IS FALSE))))) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))) IS TRUE) ASC  NULLS LAST, ((x'17') IS FALSE) ASC  NULLS LAST LIMIT 0X3;
SELECT COUNT(*) FROM v0 WHERE ((CASE v0.c1  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END IN ())) ORDER BY 0.3064849096177067 ASC  NULLS FIRST, ((- (v0.c2)) IN ((- (v0.c2)))) ASC  NULLS FIRST, ((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) COLLATE BINARY;
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((CASE v0.c1  WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END IN ()))AND(((CAST(v0.c1 AS INTEGER))>(((v0.c0) IS FALSE)))))) ORDER BY CASE WHEN x'' THEN '-1216732766' COLLATE BINARY WHEN (0.16530367745626184 IN ()) THEN (((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c2))) ELSE CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END END  NULLS LAST, (((v0.c1)) BETWEEN ((((NULL) IS FALSE))) AND ((0.09390127538323645))), ((v0.c1) BETWEEN ((((v0.c0, v0.c0))<((v0.c2, v0.c0)))) AND (COALESCE(DISTINCT v0.c1, v0.c0)))  NULLS LAST;
SELECT * FROM v0, vt1 WHERE ((((((vt1.c1 IN (v0.c0, vt1.c1, '5')))AND(json_insert(v0.c1, vt1.c1, vt1.c1, vt1.c1))))AND(((vt1.c0)GLOB(v0.c2))))) ORDER BY (((vt1.c1, vt1.c1)) NOT BETWEEN (((v0.c1 IN (v0.c0)), ((((((v0.c2)OR(v0.c0)))OR(v0.c1)))AND(v0.c2)))) AND ((((vt1.c0)<(v0.c0)), (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((vt1.c0, NULL)))))) DESC  NULLS FIRST, (((((((NOT (0.1500366080862231)))OR(CAST(vt1.c1 AS REAL))))OR('-335313520')))OR(((v0.c2)<=(vt1.c0)))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((vt1.c1 IN (v0.c0, vt1.c1, '5')))AND(json_insert(v0.c1, vt1.c1, vt1.c1, vt1.c1))))AND(((vt1.c0)GLOB(v0.c2))))) ORDER BY (((vt1.c1, vt1.c1)) NOT BETWEEN (((v0.c1 IN (v0.c0)), ((((((v0.c2)OR(v0.c0)))OR(v0.c1)))AND(v0.c2)))) AND ((((vt1.c0)<(v0.c0)), (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((vt1.c0, NULL)))))) DESC  NULLS FIRST, (((((((NOT (0.1500366080862231)))OR(CAST(vt1.c1 AS REAL))))OR('-335313520')))OR(((v0.c2)<=(vt1.c0)))) DESC LIMIT 5 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((vt1.c0) BETWEEN (v0.c0) AND (v0.c1)))/((('-5674097') NOTNULL)))) ORDER BY (((vt1.c1, vt1.c1)) NOT BETWEEN (((v0.c1 IN (v0.c0)), ((((((v0.c2)OR(v0.c0)))OR(v0.c1)))AND(v0.c2)))) AND ((((vt1.c0)<(v0.c0)), (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((vt1.c0, NULL)))))) DESC  NULLS FIRST, (((((((NOT (0.1500366080862231)))OR(CAST(vt1.c1 AS REAL))))OR('-335313520')))OR(((v0.c2)<=(vt1.c0)))) DESC LIMIT 5;
SELECT * FROM v0, vt1 WHERE ((((((vt1.c1 IN (v0.c0, vt1.c1, '5')))AND(json_insert(v0.c1, vt1.c1, vt1.c1, vt1.c1))))AND(((vt1.c0)GLOB(v0.c2))))) ORDER BY (((vt1.c1, vt1.c1)) NOT BETWEEN (((v0.c1 IN (v0.c0)), ((((((v0.c2)OR(v0.c0)))OR(v0.c1)))AND(v0.c2)))) AND ((((vt1.c0)<(v0.c0)), (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((vt1.c0, NULL)))))) DESC  NULLS FIRST, (((((((NOT (0.1500366080862231)))OR(CAST(vt1.c1 AS REAL))))OR('-335313520')))OR(((v0.c2)<=(vt1.c0)))) DESC;
SELECT DISTINCT * FROM v0, vt1 WHERE ((((((vt1.c1 IN (v0.c0, vt1.c1, '5')))AND(json_insert(v0.c1, vt1.c1, vt1.c1, vt1.c1))))AND(((vt1.c0)GLOB(v0.c2))))) ORDER BY (((vt1.c1, vt1.c1)) NOT BETWEEN (((v0.c1 IN (v0.c0)), ((((((v0.c2)OR(v0.c0)))OR(v0.c1)))AND(v0.c2)))) AND ((((vt1.c0)<(v0.c0)), (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((vt1.c0, NULL)))))) DESC  NULLS FIRST, (((((((NOT (0.1500366080862231)))OR(CAST(vt1.c1 AS REAL))))OR('-335313520')))OR(((v0.c2)<=(vt1.c0)))) DESC LIMIT 5 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((((vt1.c0) BETWEEN (v0.c0) AND (v0.c1)))/((('-5674097') NOTNULL)))) ORDER BY (((vt1.c1, vt1.c1)) NOT BETWEEN (((v0.c1 IN (v0.c0)), ((((((v0.c2)OR(v0.c0)))OR(v0.c1)))AND(v0.c2)))) AND ((((vt1.c0)<(v0.c0)), (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c2)) AND ((vt1.c0, NULL)))))) DESC  NULLS FIRST, (((((((NOT (0.1500366080862231)))OR(CAST(vt1.c1 AS REAL))))OR('-335313520')))OR(((v0.c2)<=(vt1.c0)))) DESC LIMIT 5;
SELECT * FROM vt1, v0 WHERE (x'4c' COLLATE BINARY);
SELECT DISTINCT * FROM vt1, v0 WHERE (((x'4c' COLLATE BINARY)AND((+ (vt1.c0 COLLATE RTRIM))))) ORDER BY (((NOT (',{<8TAy398:1006T557T6638855890176476567T1518T-1689400666146805254:717-''h')))IS NOT(x'')) ASC  NULLS FIRST, (NOT ((- (vt1.c1)))) ASC;
SELECT * FROM vt1, v0 WHERE (x'4c' COLLATE BINARY);
SELECT DISTINCT * FROM vt1, v0 WHERE (((x'4c' COLLATE BINARY)AND((+ (vt1.c0 COLLATE RTRIM))))) ORDER BY (((NOT (',{<8TAy398:1006T557T6638855890176476567T1518T-1689400666146805254:717-''h')))IS NOT(x'')) ASC  NULLS FIRST, (NOT ((- (vt1.c1)))) ASC;
SELECT * FROM v0 WHERE (CAST((NOT (v0.c1)) AS BLOB)) ORDER BY CAST(CASE WHEN v0.c1 THEN v0.c1 END AS INTEGER) ASC, v0.c1  NULLS LAST;
SELECT * FROM v0 WHERE (((CAST((NOT (v0.c1)) AS BLOB))AND(((((v0.c1) BETWEEN (v0.c2) AND (v0.c2)))>((NOT (v0.c1))))))) ORDER BY CAST(CASE WHEN v0.c1 THEN v0.c1 END AS INTEGER) ASC, v0.c1  NULLS LAST LIMIT 0X2;
SELECT * FROM v0 WHERE (CAST((NOT (v0.c1)) AS BLOB)) ORDER BY CAST(CASE WHEN v0.c1 THEN v0.c1 END AS INTEGER) ASC, v0.c1  NULLS LAST;
SELECT * FROM v0 WHERE (((CAST((NOT (v0.c1)) AS BLOB))AND(((((v0.c1) BETWEEN (v0.c2) AND (v0.c2)))>((NOT (v0.c1))))))) ORDER BY CAST(CASE WHEN v0.c1 THEN v0.c1 END AS INTEGER) ASC, v0.c1  NULLS LAST LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE ((~ (vt1.c1))) ORDER BY ((((v0.c1)IS(vt1.c0)))IS NOT((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((v0.c2))))) ASC, (- (CASE WHEN vt1.c1 THEN v0.c2 WHEN 0.13870969192298344 THEN x'02' END))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE ((~ (vt1.c1))) ORDER BY TRIM((NOT (vt1.c1))) DESC, CASE WHEN CAST(v0.c2 AS NUMERIC) THEN vt1.c1 COLLATE BINARY END  NULLS FIRST, vt1.c1 DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (CAST(vt1.c1 AS TEXT)) ORDER BY TRIM((NOT (vt1.c1))) DESC, CASE WHEN CAST(v0.c2 AS NUMERIC) THEN vt1.c1 COLLATE BINARY END  NULLS FIRST, vt1.c1 DESC;
SELECT MIN(vt1.c0) FROM vt1 WHERE (((((+ (NULL))))>=((NULL COLLATE BINARY)))) ORDER BY ((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)<(((vt1.c1)IS(vt1.c0)))) ASC, ((((((((((((((((((x'56')OR(vt1.c0)))AND(NULL)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))AND((- (vt1.c0)))))AND(CAST(vt1.c1 AS INTEGER))))AND(vt1.c0 COLLATE NOCASE)))AND(vt1.c1 COLLATE BINARY)) ASC;
SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((((+ (NULL))))>=((NULL COLLATE BINARY)))) ORDER BY ((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)<(((vt1.c1)IS(vt1.c0)))) ASC, ((((((((((((((((((x'56')OR(vt1.c0)))AND(NULL)))OR(vt1.c0)))OR(vt1.c1)))OR(vt1.c0)))AND((- (vt1.c0)))))AND(CAST(vt1.c1 AS INTEGER))))AND(vt1.c0 COLLATE NOCASE)))AND(vt1.c1 COLLATE BINARY)) ASC LIMIT 0;
SELECT MIN(v0.c2) FROM v0, vt1 WHERE (CASE WHEN (((v0.c2, v0.c1))>=((vt1.c1, v0.c0))) THEN (v0.c0 IN ()) WHEN (((v0.c1, v0.c2, v0.c2)) NOT BETWEEN (('374010800', v0.c2, '')) AND ((vt1.c1, v0.c0, v0.c0))) THEN ((((((vt1.c0)OR(vt1.c0)))OR(320948504)))AND(vt1.c0)) ELSE ((v0.c2)<<(vt1.c1)) END) ORDER BY ((((v0.c0) ISNULL))<=(((vt1.c1)*(vt1.c1)))) ASC  NULLS LAST, ((((v0.c0)||(vt1.c0))) BETWEEN (((vt1.c0) BETWEEN (v0.c0) AND (vt1.c0))) AND (x'9c'))  NULLS FIRST;
SELECT ALL MIN(v0.c2) FROM v0, vt1 WHERE (CASE WHEN (((v0.c2, v0.c1))>=((vt1.c1, v0.c0))) THEN (v0.c0 IN ()) WHEN (((v0.c1, v0.c2, v0.c2)) NOT BETWEEN (('374010800', v0.c2, '')) AND ((vt1.c1, v0.c0, v0.c0))) THEN ((((((vt1.c0)OR(vt1.c0)))OR(0X13214918)))AND(vt1.c0)) ELSE ((v0.c2)<<(vt1.c1)) END) ORDER BY ((((v0.c0) ISNULL))<=(((vt1.c1)*(vt1.c1)))) ASC  NULLS LAST, ((((v0.c0)||(vt1.c0))) BETWEEN (((vt1.c0) BETWEEN (v0.c0) AND (vt1.c0))) AND (x'9c'))  NULLS FIRST;
SELECT MIN(v0.c1) FROM v0, vt1 WHERE (((v0.c1)GLOB(vt1.c1)) COLLATE NOCASE COLLATE NOCASE);
SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE (((((v0.c1)GLOB(vt1.c1)) COLLATE NOCASE COLLATE NOCASE)AND((((v0.c0)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (vt1.c1) AND (v0.c0)))) AND ((((vt1.c1) NOT BETWEEN (vt1.c0) AND (v0.c0)))))))) ORDER BY (((((vt1.c0) NOTNULL), (((vt1.c1))=((v0.c0)))))<=((v0.c2, QUOTE(vt1.c1)))) INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE ((((+ (vt1.c0)))IS(((vt1.c0)<=(v0.c1))))) ORDER BY (((((vt1.c0) NOTNULL), (((vt1.c1))=((v0.c0)))))<=((v0.c2, QUOTE(vt1.c1))));
SELECT ALL MIN(v0.c1) FROM v0, vt1 WHERE ((- ((- (v0.c2)))));
SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE ((((- ((- (v0.c2)))))AND(v0.c2))) LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt1 WHERE ((((x'')>>(vt1.c0)) IN ())) LIMIT 0;
SELECT ALL * FROM vt1, v0 WHERE (((((CASE WHEN vt1.c1 THEN NULL WHEN vt1.c1 THEN '8	r{ ]' WHEN vt1.c1 THEN '/' ELSE v0.c2 END)OR(CAST('0.5110989110487819' AS REAL))))OR((((vt1.c1))!=((vt1.c0)))))) ORDER BY ((((((vt1.c1)>=(v0.c2)))AND(((0.1334223390319471)%(v0.c1)))))OR(((v0.c0)+(v0.c2)))) ASC  NULLS LAST, CASE WHEN vt1.c1 THEN ((v0.c0)=(v0.c2)) END, (((((vt1.c0, x'340f')) NOT BETWEEN ((v0.c1, v0.c0)) AND (('', NULL))))*(((NULL)||(v0.c1))))  NULLS FIRST, ((((((highlight(vt1.c1, v0.c2, vt1.c1, v0.c0))AND(TYPEOF('0.1815678517994589'))))AND((~ (vt1.c0)))))OR(((1.269145269E9) NOT NULL))) DESC;
SELECT DISTINCT * FROM vt1, v0 WHERE (((((CASE WHEN vt1.c1 THEN NULL WHEN vt1.c1 THEN '8	r{ ]' WHEN vt1.c1 THEN '/' ELSE v0.c2 END)OR(CAST('0.5110989110487819' AS REAL))))OR((((vt1.c1))!=((vt1.c0)))))) ORDER BY ((((v0.c1)LIKE(v0.c2)))||(((v0.c2) NOT BETWEEN ('Q-O5GH2-紛') AND (v0.c0)))) ASC;
SELECT ALL * FROM vt1, v0 WHERE (((((CASE WHEN vt1.c1 THEN NULL WHEN vt1.c1 THEN '8	r{ ]' WHEN vt1.c1 THEN '/' ELSE v0.c2 END)OR(CAST('0.5110989110487819' AS REAL))))OR((((vt1.c1))!=((vt1.c0)))))) ORDER BY ((((((vt1.c1)>=(v0.c2)))AND(((0.1334223390319471)%(v0.c1)))))OR(((v0.c0)+(v0.c2)))) ASC  NULLS LAST, CASE WHEN vt1.c1 THEN ((v0.c0)=(v0.c2)) END, (((((vt1.c0, x'340f')) NOT BETWEEN ((v0.c1, v0.c0)) AND (('', NULL))))*(((NULL)||(v0.c1))))  NULLS FIRST, ((((((highlight(vt1.c1, v0.c2, vt1.c1, v0.c0))AND(TYPEOF('0.1815678517994589'))))AND((~ (vt1.c0)))))OR(((1.269145269E9) NOT NULL))) DESC;
SELECT DISTINCT * FROM vt1, v0 WHERE (((((CASE WHEN vt1.c1 THEN NULL WHEN vt1.c1 THEN '8	r{ ]' WHEN vt1.c1 THEN '/' ELSE v0.c2 END)OR(CAST('0.5110989110487819' AS REAL))))OR((((vt1.c1))!=((vt1.c0)))))) ORDER BY ((((v0.c1)LIKE(v0.c2)))||(((v0.c2) NOT BETWEEN ('Q-O5GH2-紛') AND (v0.c0)))) ASC;
SELECT ALL MAX(v0.c0) FROM v0 WHERE ((v0.c1 COLLATE BINARY IN ())) ORDER BY CASE (((v0.c0, v0.c0, v0.c2, v0.c0)) NOT BETWEEN ((v0.c0, 0.8160188171815118, v0.c1, v0.c2)) AND ((v0.c0, NULL, v0.c0, v0.c0)))  WHEN ((((((((v0.c2)OR(v0.c0)))OR('423941882')))OR(v0.c0)))OR('?SoTDc')) THEN CAST(v0.c1 AS BLOB) WHEN '-1073962545' THEN (((x'', v0.c2))>=((v0.c1, NULL))) END, ABS(DISTINCT CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN x'6820' THEN v0.c1 END)  NULLS FIRST;
SELECT MAX(v0.c0) FROM v0 WHERE ((((v0.c1 COLLATE BINARY IN ()))AND((- (((v0.c1) BETWEEN (v0.c0) AND (v0.c1))))))) ORDER BY CASE (((v0.c0, v0.c0, v0.c2, v0.c0)) NOT BETWEEN ((v0.c0, 0.8160188171815118, v0.c1, v0.c2)) AND ((v0.c0, NULL, v0.c0, v0.c0)))  WHEN ((((((((v0.c2)OR(v0.c0)))OR('423941882')))OR(v0.c0)))OR('?SoTDc')) THEN CAST(v0.c1 AS BLOB) WHEN '-1073962545' THEN (((x'', v0.c2))>=((v0.c1, NULL))) END, ABS(DISTINCT CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN x'6820' THEN v0.c1 END)  NULLS FIRST INTERSECT SELECT ALL MAX(v0.c0) FROM v0 WHERE (((v0.c1)GLOB(0.003500965538338563)) COLLATE BINARY) ORDER BY CASE (((v0.c0, v0.c0, v0.c2, v0.c0)) NOT BETWEEN ((v0.c0, 0.8160188171815118, v0.c1, v0.c2)) AND ((v0.c0, NULL, v0.c0, v0.c0)))  WHEN ((((((((v0.c2)OR(v0.c0)))OR('423941882')))OR(v0.c0)))OR('?SoTDc')) THEN CAST(v0.c1 AS BLOB) WHEN '-1073962545' THEN (((x'', v0.c2))>=((v0.c1, NULL))) END, ABS(DISTINCT CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN x'6820' THEN v0.c1 END)  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM v0, vt1 WHERE (CASE (vt1.c1 IN (v0.c0))  WHEN v0.c0 COLLATE BINARY THEN (v0.c0 IN (v0.c2, v0.c2)) ELSE ('IIYV#Y~3' IN (v0.c0)) END) ORDER BY (json_array_length(v0.c0, vt1.c0) IN (vt1.c1 COLLATE BINARY))  NULLS FIRST, (v0.c1 COLLATE NOCASE IN (CAST(vt1.c1 AS INTEGER))) ASC;
SELECT ALL MIN(v0.c0) FROM v0 NOT INDEXED, vt1 WHERE (((CASE (vt1.c1 IN (v0.c0))  WHEN v0.c0 COLLATE BINARY THEN (v0.c0 IN (v0.c2, v0.c2)) ELSE ('IIYV#Y~3' IN (v0.c0)) END)AND(((((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c2))) NOT NULL)))) ORDER BY (json_array_length(v0.c0, vt1.c0) IN (vt1.c1 COLLATE BINARY))  NULLS FIRST, (v0.c1 COLLATE NOCASE IN (CAST(vt1.c1 AS INTEGER))) ASC;
SELECT * FROM v0 WHERE (((((v0.c0)>(v0.c0))) IS TRUE)) ORDER BY ((v0.c1)OR(((v0.c2)-(v0.c2))))  NULLS FIRST, v0.c1, (- (TYPEOF(DISTINCT v0.c0)))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c0)>(v0.c0))) IS TRUE)) ORDER BY ((v0.c1)OR(((v0.c2)-(v0.c2))))  NULLS FIRST, v0.c1, (- (TYPEOF(DISTINCT v0.c0)))  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE (((((v0.c0)>(v0.c0))) IS TRUE)) ORDER BY ((v0.c1)OR(((v0.c2)-(v0.c2))))  NULLS FIRST, v0.c1, (- (TYPEOF(DISTINCT v0.c0)))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c0)>(v0.c0))) IS TRUE)) ORDER BY ((v0.c1)OR(((v0.c2)-(v0.c2))))  NULLS FIRST, v0.c1, (- (TYPEOF(DISTINCT v0.c0)))  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))) NOT BETWEEN ((v0.c0 IN (v0.c1))) AND (((v0.c2)IS NOT(v0.c2))))) ORDER BY IFNULL(DISTINCT ((((((v0.c2)AND(v0.c2)))OR(v0.c1)))AND(v0.c1)), 0Xffffffffcc2ba2ef) DESC;
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))) NOT BETWEEN ((v0.c0 IN (v0.c1))) AND (((v0.c2)IS NOT(v0.c2))))) ORDER BY IFNULL(DISTINCT ((((((v0.c2)AND(v0.c2)))OR(v0.c1)))AND(v0.c1)), -869555473) DESC LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))) NOT BETWEEN ((v0.c0 IN (v0.c1))) AND (((v0.c2)IS NOT(v0.c2))))) ORDER BY IFNULL(DISTINCT ((((((v0.c2)AND(v0.c2)))OR(v0.c1)))AND(v0.c1)), 0Xffffffffcc2ba2ef) DESC;
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))) NOT BETWEEN ((v0.c0 IN (v0.c1))) AND (((v0.c2)IS NOT(v0.c2))))) ORDER BY IFNULL(DISTINCT ((((((v0.c2)AND(v0.c2)))OR(v0.c1)))AND(v0.c1)), -869555473) DESC LIMIT 0x1;
SELECT MIN(v0.c1) FROM v0 WHERE (((((v0.c0)|(v0.c0)))!=((((('-326459721')AND(v0.c1)))AND(v0.c0)))));
SELECT MIN(v0.c1) FROM v0 WHERE (((((v0.c0)|(v0.c0)))>((((('-326459721')AND(v0.c1)))AND(v0.c0))))) LIMIT 0X1;
SELECT ALL * FROM vt1 WHERE (((0.4127278708266713) BETWEEN (vt1.c1) AND (CAST(vt1.c1 AS BLOB))));
SELECT DISTINCT * FROM vt1 WHERE (((((0.4127278708266713) BETWEEN (vt1.c1) AND (CAST(vt1.c1 AS BLOB))))AND(((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))GLOB(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END))))) LIMIT 2;
SELECT ALL * FROM vt1 WHERE (((0.4127278708266713) BETWEEN (vt1.c1) AND (CAST(vt1.c1 AS BLOB))));
SELECT DISTINCT * FROM vt1 WHERE (((((0.4127278708266713) BETWEEN (vt1.c1) AND (CAST(vt1.c1 AS BLOB))))AND(((((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)))GLOB(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 END))))) LIMIT 2;
SELECT ALL COUNT(*) FROM v0 WHERE (((((NULL)<>(v0.c1))) NOT NULL)) ORDER BY (~ (((((((((v0.c0)AND(v0.c0)))AND(v0.c1)))AND(NULL)))OR(v0.c2)))), ((NULL)=(-652094336))  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE (((((NULL)<>(v0.c1))) NOT NULL)) ORDER BY (~ (((((((((v0.c0)AND(v0.c0)))AND(v0.c1)))AND(NULL)))OR(v0.c2)))), ((NULL)=(-652094336))  NULLS FIRST LIMIT 0X3 INTERSECT SELECT COUNT(*) FROM v0 WHERE (((v0.c1 COLLATE RTRIM) NOTNULL)) ORDER BY (~ (((((((((v0.c0)AND(v0.c0)))AND(v0.c1)))AND(NULL)))OR(v0.c2)))), ((NULL)==(0xffffffffd921d480))  NULLS FIRST LIMIT 0X3;
SELECT ALL * FROM vt1, v0 WHERE (((x'b877591d') BETWEEN ((('/zhPe') IS TRUE)) AND ((vt1.c1 IN ())))) ORDER BY ((v0.c1)<=(v0.c0)) COLLATE BINARY, NULL DESC, CAST(v0.c2 COLLATE NOCASE AS INTEGER) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1, v0 WHERE (((x'b877591d') BETWEEN ((('/zhPe') IS TRUE)) AND ((vt1.c1 IN ())))) ORDER BY (~ ((((v0.c2, v0.c2))=((vt1.c1, vt1.c0))))) DESC, ((v0.c0)*(v0.c1)) COLLATE NOCASE, CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS INTEGER)) ORDER BY (~ ((((v0.c2, v0.c2))=((vt1.c1, vt1.c0))))) DESC, ((v0.c0)*(v0.c1)) COLLATE NOCASE, CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM;
SELECT ALL * FROM vt1, v0 WHERE (((x'b877591d') BETWEEN ((('/zhPe') IS TRUE)) AND ((vt1.c1 IN ())))) ORDER BY ((v0.c1)<=(v0.c0)) COLLATE BINARY, NULL DESC, CAST(v0.c2 COLLATE NOCASE AS INTEGER) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt1, v0 WHERE (((x'b877591d') BETWEEN ((('/zhPe') IS TRUE)) AND ((vt1.c1 IN ())))) ORDER BY (~ ((((v0.c2, v0.c2))=((vt1.c1, vt1.c0))))) DESC, ((v0.c0)*(v0.c1)) COLLATE NOCASE, CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (CAST(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) AS INTEGER)) ORDER BY (~ ((((v0.c2, v0.c2))=((vt1.c1, vt1.c0))))) DESC, ((v0.c0)*(v0.c1)) COLLATE NOCASE, CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM;
SELECT ALL * FROM v0 WHERE (CASE WHEN ((v0.c1) ISNULL) THEN v0.c1 ELSE (v0.c0 IN (v0.c0)) END) ORDER BY v0.c2 DESC  NULLS FIRST, (('풀.龍') NOT BETWEEN (((((((v0.c0)AND(v0.c2)))OR(v0.c1)))AND(v0.c1))) AND (((v0.c1) ISNULL)))  NULLS LAST, CASE CASE v0.c2  WHEN '0.7377653910754213' THEN v0.c2 END  WHEN TOTAL_CHANGES() THEN (v0.c2 IN (v0.c0)) ELSE ((v0.c0) NOTNULL) END ASC;
SELECT * FROM v0 WHERE (((CASE WHEN ((v0.c1) ISNULL) THEN v0.c1 ELSE (v0.c0 IN (v0.c0)) END)AND(((+ (NULL)) IN ('754692099'))))) ORDER BY v0.c1  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE (((~ (v0.c2)) IN (CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END))) ORDER BY v0.c1  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CASE WHEN ((v0.c1) ISNULL) THEN v0.c1 ELSE (v0.c0 IN (v0.c0)) END) ORDER BY v0.c2 DESC  NULLS FIRST, (('풀.龍') NOT BETWEEN (((((((v0.c0)AND(v0.c2)))OR(v0.c1)))AND(v0.c1))) AND (((v0.c1) ISNULL)))  NULLS LAST, CASE CASE v0.c2  WHEN '0.7377653910754213' THEN v0.c2 END  WHEN TOTAL_CHANGES() THEN (v0.c2 IN (v0.c0)) ELSE ((v0.c0) NOTNULL) END ASC;
SELECT * FROM v0 WHERE (((CASE WHEN ((v0.c1) ISNULL) THEN v0.c1 ELSE (v0.c0 IN (v0.c0)) END)AND(((+ (NULL)) IN ('754692099'))))) ORDER BY v0.c1  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE (((~ (v0.c2)) IN (CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END))) ORDER BY v0.c1  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (CASE ((((vt1.c1)AND(v0.c1)))OR(vt1.c1))  WHEN ((x'') ISNULL) THEN CAST(v0.c1 AS REAL) WHEN (- (vt1.c1)) THEN ((vt1.c0) NOTNULL) WHEN ((v0.c0) ISNULL) THEN v0.c0 COLLATE RTRIM WHEN CAST(vt1.c1 AS INTEGER) THEN ((v0.c0) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE (vt1.c0 IN (v0.c1)) END);
SELECT DISTINCT * FROM v0, vt1 WHERE (CASE ((((vt1.c1)AND(v0.c1)))OR(vt1.c1))  WHEN ((x'') ISNULL) THEN CAST(v0.c1 AS REAL) WHEN (- (vt1.c1)) THEN ((vt1.c0) NOTNULL) WHEN ((v0.c0) ISNULL) THEN v0.c0 COLLATE RTRIM WHEN CAST(vt1.c1 AS INTEGER) THEN ((v0.c0) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE (vt1.c0 IN (v0.c1)) END) ORDER BY ((((((v0.c0) BETWEEN (vt1.c0) AND (vt1.c0)))OR(((v0.c1)>=(v0.c2)))))OR(NULL)) ASC, '1269145269'  NULLS FIRST LIMIT 0x2;
SELECT * FROM v0, vt1 WHERE (CASE ((((vt1.c1)AND(v0.c1)))OR(vt1.c1))  WHEN ((x'') ISNULL) THEN CAST(v0.c1 AS REAL) WHEN (- (vt1.c1)) THEN ((vt1.c0) NOTNULL) WHEN ((v0.c0) ISNULL) THEN v0.c0 COLLATE RTRIM WHEN CAST(vt1.c1 AS INTEGER) THEN ((v0.c0) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE (vt1.c0 IN (v0.c1)) END);
SELECT DISTINCT * FROM v0, vt1 WHERE (CASE ((((vt1.c1)AND(v0.c1)))OR(vt1.c1))  WHEN ((x'') ISNULL) THEN CAST(v0.c1 AS REAL) WHEN (- (vt1.c1)) THEN ((vt1.c0) NOTNULL) WHEN ((v0.c0) ISNULL) THEN v0.c0 COLLATE RTRIM WHEN CAST(vt1.c1 AS INTEGER) THEN ((v0.c0) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE (vt1.c0 IN (v0.c1)) END) ORDER BY ((((((v0.c0) BETWEEN (vt1.c0) AND (vt1.c0)))OR(((v0.c1)>=(v0.c2)))))OR(NULL)) ASC, '1269145269'  NULLS FIRST LIMIT 0x2;
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c0 COLLATE BINARY)>>(x'fa46'))) ORDER BY (v0.c0 IN ()) COLLATE RTRIM DESC, v0.c0 DESC  NULLS FIRST, (NULL COLLATE BINARY IN (((v0.c0)IS(x''))))  NULLS FIRST, x'54';
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c0 COLLATE BINARY)>>(x'fa46'))) ORDER BY (((((x'1cd0', v0.c1))<=((v0.c1, v0.c1)))) ISNULL) INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (v0.c2) ORDER BY (((((x'1cd0', v0.c1))<=((v0.c1, v0.c1)))) ISNULL);
SELECT ALL * FROM v0 WHERE ((((v0.c0)) BETWEEN ((((v0.c0) IS TRUE))) AND ((v0.c2 COLLATE RTRIM)))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c1) AND (x''))) ISNULL), (-1352080621 IN ()) ASC, ((v0.c2) BETWEEN (((v0.c2)<>(v0.c1))) AND ('KDy')) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c0)) BETWEEN ((((v0.c0) IS TRUE))) AND ((v0.c2 COLLATE RTRIM)))) ORDER BY (((v0.c1)) BETWEEN ((((((v0.c1)OR(v0.c2)))OR(v0.c0)))) AND ((CASE v0.c0  WHEN v0.c1 THEN v0.c1 WHEN 0.3987957900940572 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END)))  NULLS FIRST, '1602192870'  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST((((v0.c2, '?8w鍰(', v0.c1)) BETWEEN ((v0.c1, v0.c0, v0.c2)) AND ((v0.c2, v0.c2, v0.c0))) AS NUMERIC)) ORDER BY (((v0.c1)) BETWEEN ((((((v0.c1)OR(v0.c2)))OR(v0.c0)))) AND ((CASE v0.c0  WHEN v0.c1 THEN v0.c1 WHEN 0.3987957900940572 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END)))  NULLS FIRST, '1602192870'  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((v0.c0)) BETWEEN ((((v0.c0) IS TRUE))) AND ((v0.c2 COLLATE RTRIM)))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c1) AND (x''))) ISNULL), (-1352080621 IN ()) ASC, ((v0.c2) BETWEEN (((v0.c2)<>(v0.c1))) AND ('KDy')) ASC  NULLS LAST;
SELECT * FROM vt1 WHERE ((((vt1.c1 IN ()))||(vt1.c1)));
SELECT ALL * FROM vt1 WHERE ((((vt1.c1 IN ()))||(vt1.c1))) ORDER BY CAST(vt1.c1 COLLATE BINARY AS BLOB) LIMIT 0X0;
SELECT * FROM vt1 WHERE ((((vt1.c1 IN ()))||(vt1.c1)));
SELECT ALL * FROM vt1 WHERE ((((vt1.c1 IN ()))||(vt1.c1))) ORDER BY CAST(vt1.c1 COLLATE BINARY AS BLOB) LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE (((GLOB(vt1.c1, vt1.c1)) NOTNULL)) ORDER BY (((TRIM(vt1.c1), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, NULL COLLATE NOCASE))>(((((vt1.c0, vt1.c1)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c0))), (((vt1.c1))>=((x''))), vt1.c1)))  NULLS LAST;
SELECT * FROM vt1 WHERE (((((GLOB(vt1.c1, vt1.c1)) NOTNULL))AND((+ ((NOT (vt1.c0))))))) ORDER BY TYPEOF(CAST(vt1.c0 AS TEXT)) ASC  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM vt1 WHERE (((GLOB(vt1.c1, vt1.c1)) NOTNULL)) ORDER BY (((TRIM(vt1.c1), CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END, NULL COLLATE NOCASE))>(((((vt1.c0, vt1.c1)) BETWEEN ((vt1.c0, vt1.c0)) AND ((vt1.c1, vt1.c0))), (((vt1.c1))>=((x''))), vt1.c1)))  NULLS LAST;
SELECT * FROM vt1 WHERE (((((GLOB(vt1.c1, vt1.c1)) NOTNULL))AND((+ ((NOT (vt1.c0))))))) ORDER BY TYPEOF(CAST(vt1.c0 AS TEXT)) ASC  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM v0 INNER JOIN vt1 ON v0.c0 WHERE ((((((v0.c2, vt1.c0)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((vt1.c1, v0.c0)))) NOT NULL)) ORDER BY (((v0.c2 IN ()))|(LOWER(vt1.c1))), ((vt1.c0 IN (v0.c2, x'02ab')) IN (((v0.c0) NOT BETWEEN (NULL) AND ('-1691868194')), (+ (vt1.c0))))  NULLS FIRST;
SELECT * FROM v0 INNER JOIN vt1 ON v0.c0 WHERE ((((((((v0.c2, vt1.c0)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((vt1.c1, v0.c0)))) NOT NULL))AND(((v0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE BINARY))) ORDER BY (((v0.c2 IN ()))|(LOWER(vt1.c1))), ((vt1.c0 IN (v0.c2, x'02ab')) IN (((v0.c0) NOT BETWEEN (NULL) AND ('-1691868194')), (+ (vt1.c0))))  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON v0.c0 WHERE (((TRIM(v0.c0, v0.c1))&(((v0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c1))))) ORDER BY (((v0.c2 IN ()))|(LOWER(vt1.c1))), ((vt1.c0 IN (v0.c2, x'02ab')) IN (((v0.c0) NOT BETWEEN (NULL) AND ('-1691868194')), (+ (vt1.c0))))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0 INNER JOIN vt1 ON v0.c0 WHERE ((((((v0.c2, vt1.c0)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((vt1.c1, v0.c0)))) NOT NULL)) ORDER BY (((v0.c2 IN ()))|(LOWER(vt1.c1))), ((vt1.c0 IN (v0.c2, x'02ab')) IN (((v0.c0) NOT BETWEEN (NULL) AND ('-1691868194')), (+ (vt1.c0))))  NULLS FIRST;
SELECT * FROM v0 INNER JOIN vt1 ON v0.c0 WHERE ((((((((v0.c2, vt1.c0)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((vt1.c1, v0.c0)))) NOT NULL))AND(((v0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)) COLLATE BINARY))) ORDER BY (((v0.c2 IN ()))|(LOWER(vt1.c1))), ((vt1.c0 IN (v0.c2, x'02ab')) IN (((v0.c0) NOT BETWEEN (NULL) AND ('-1691868194')), (+ (vt1.c0))))  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt1 ON v0.c0 WHERE (((TRIM(v0.c0, v0.c1))&(((v0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c1))))) ORDER BY (((v0.c2 IN ()))|(LOWER(vt1.c1))), ((vt1.c0 IN (v0.c2, x'02ab')) IN (((v0.c0) NOT BETWEEN (NULL) AND ('-1691868194')), (+ (vt1.c0))))  NULLS FIRST LIMIT 1;
SELECT ALL MIN(v0.c2) FROM vt1, v0 WHERE ((((CASE vt1.c1  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c0 WHEN NULL THEN v0.c0 WHEN v0.c1 THEN v0.c0 END))>((vt1.c0)))) ORDER BY json_object(NULLIF(vt1.c1, vt1.c0), vt1.c0, vt1.c0, (~ (v0.c1)))  NULLS LAST, vt1.c1 DESC;
SELECT MIN(v0.c2) FROM vt1, v0 WHERE ((((((CASE vt1.c1  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN v0.c0 WHEN NULL THEN v0.c0 WHEN v0.c1 THEN v0.c0 END))>((vt1.c0))))AND(((vt1.c1 COLLATE NOCASE) NOTNULL)))) ORDER BY 0x4a4176a5 DESC;
SELECT * FROM vt1 WHERE ((~ (x'' COLLATE NOCASE)));
SELECT DISTINCT * FROM vt1 WHERE ((~ (x'' COLLATE NOCASE)));
SELECT * FROM vt1 WHERE ((~ (x'' COLLATE NOCASE)));
SELECT DISTINCT * FROM vt1 WHERE ((~ (x'' COLLATE NOCASE)));
SELECT ALL COUNT(*) FROM v0 WHERE (((CASE WHEN v0.c2 THEN v0.c1 END) IS TRUE)) ORDER BY ((v0.c0 COLLATE NOCASE) BETWEEN ((((v0.c1))<=((0.8874439489811744)))) AND ((+ (v0.c1)))) DESC  NULLS LAST;
SELECT COUNT(*) FROM v0 WHERE (((((CASE WHEN v0.c2 THEN v0.c1 END) IS TRUE))AND(((((((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c2))), v0.c0 COLLATE BINARY))<(('y%' COLLATE NOCASE, ((('+', v0.c1, v0.c2, v0.c1, v0.c2))<=((v0.c2, v0.c2, v0.c1, v0.c2, v0.c0))))))))) ORDER BY (v0.c1 IN (((9223372036854775807) IS FALSE))) DESC;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (TRIM(DISTINCT (1380318262 IN ())));
SELECT DISTINCT MAX(vt1.c1) FROM vt1 WHERE (TRIM(DISTINCT (0x5245fc36 IN ()))) ORDER BY HEX(vt1.c1 COLLATE NOCASE)  NULLS LAST, CAST(vt1.c1 COLLATE NOCASE AS INTEGER) ASC;
SELECT ALL COUNT(*) FROM v0 LEFT OUTER JOIN vt1 ON (vt1.c1 COLLATE RTRIM IN ((((v0.c1, v0.c2, v0.c1, v0.c1))>=((v0.c2, v0.c1, '-2046289318', v0.c1))))) WHERE (CASE ((v0.c2)LIKE(v0.c1))  WHEN (+ (v0.c0)) THEN CAST(v0.c0 AS INTEGER) WHEN ((vt1.c1)AND(v0.c2)) THEN (v0.c0 IN ()) END) ORDER BY ((((((((((NULL)AND(v0.c1)))AND(vt1.c0)))AND(vt1.c0)))OR(v0.c0)))OR(v0.c0)) COLLATE RTRIM  NULLS LAST, ((((vt1.c1) BETWEEN (vt1.c0) AND (v0.c0))) BETWEEN (CASE vt1.c1  WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c2 END) AND ((((vt1.c1, v0.c1, v0.c2))>=((0.3681869525046879, v0.c2, vt1.c1)))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0 LEFT OUTER JOIN vt1 ON (vt1.c1 COLLATE RTRIM IN ((((v0.c1, v0.c2, v0.c1, v0.c1))>=((v0.c2, v0.c1, '-2046289318', v0.c1))))) WHERE (((CASE ((v0.c2)LIKE(v0.c1))  WHEN (+ (v0.c0)) THEN CAST(v0.c0 AS INTEGER) WHEN ((vt1.c1)AND(v0.c2)) THEN (v0.c0 IN ()) END)AND(((v0.c0) BETWEEN ('-1314374329') AND (v0.c1)) COLLATE BINARY))) ORDER BY ((((((((((NULL)AND(v0.c1)))AND(vt1.c0)))AND(vt1.c0)))OR(v0.c0)))OR(v0.c0)) COLLATE RTRIM  NULLS LAST, ((((vt1.c1) BETWEEN (vt1.c0) AND (v0.c0))) BETWEEN (CASE vt1.c1  WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c2 END) AND ((((vt1.c1, v0.c1, v0.c2))>=((0.3681869525046879, v0.c2, vt1.c1)))))  NULLS FIRST LIMIT 3 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 LEFT OUTER JOIN vt1 ON (vt1.c1 COLLATE RTRIM IN ((((v0.c1, v0.c2, v0.c1, v0.c1))>=((v0.c2, v0.c1, '-2046289318', v0.c1))))) WHERE (0x77cc675f) ORDER BY ((((((((((NULL)AND(v0.c1)))AND(vt1.c0)))AND(vt1.c0)))OR(v0.c0)))OR(v0.c0)) COLLATE RTRIM  NULLS LAST, ((((vt1.c1) BETWEEN (vt1.c0) AND (v0.c0))) BETWEEN (CASE vt1.c1  WHEN v0.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c2 END) AND ((((vt1.c1, v0.c1, v0.c2))>=((0.3681869525046879, v0.c2, vt1.c1)))))  NULLS FIRST LIMIT 0x3;
SELECT MAX(v0.c2) FROM vt1, v0 WHERE (((((v0.c1)<(v0.c0)))>>(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END)));
SELECT MAX(v0.c2) FROM vt1, v0 WHERE (((((v0.c1)<(v0.c0)))>>(CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 ELSE v0.c0 END))) INTERSECT SELECT MAX(v0.c2) FROM vt1, v0 WHERE ((((((((((((((v0.c1 IN (v0.c0)))AND(x'')))OR((+ (v0.c2)))))AND(((vt1.c1) ISNULL))))OR(v0.c2)))AND(CAST(vt1.c1 AS INTEGER))))AND(CASE v0.c2  WHEN vt1.c0 THEN vt1.c1 ELSE v0.c1 END)));
SELECT ALL * FROM v0 INNER JOIN vt1 ON NULL COLLATE RTRIM WHERE (((CASE WHEN v0.c2 THEN vt1.c0 END)AND(((((((((((v0.c0)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c1)))OR(v0.c1)))));
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON NULL COLLATE RTRIM WHERE (((CASE WHEN v0.c2 THEN vt1.c0 END)AND(((((((((((v0.c0)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c1)))OR(v0.c1))))) ORDER BY '-1628510110' DESC  NULLS LAST, (((((((((((((v0.c0, v0.c1))<>((vt1.c0, vt1.c0))))AND(CASE WHEN v0.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(((vt1.c1)%(vt1.c0)))))AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND((v0.c1 IN (vt1.c1)))))OR(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN x'' END)) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON NULL COLLATE RTRIM WHERE (CAST((vt1.c0 IN (vt1.c0)) AS TEXT)) ORDER BY '-1628510110' DESC  NULLS LAST, (((((((((((((v0.c0, v0.c1))<>((vt1.c0, vt1.c0))))AND(CASE WHEN v0.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(((vt1.c1)%(vt1.c0)))))AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND((v0.c1 IN (vt1.c1)))))OR(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN x'' END)) ASC LIMIT 0;
SELECT ALL * FROM v0 INNER JOIN vt1 ON NULL COLLATE RTRIM WHERE (((CASE WHEN v0.c2 THEN vt1.c0 END)AND(((((((((((v0.c0)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c1)))OR(v0.c1)))));
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON NULL COLLATE RTRIM WHERE (((CASE WHEN v0.c2 THEN vt1.c0 END)AND(((((((((((v0.c0)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c1)))OR(v0.c1))))) ORDER BY '-1628510110' DESC  NULLS LAST, (((((((((((((v0.c0, v0.c1))<>((vt1.c0, vt1.c0))))AND(CASE WHEN v0.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(((vt1.c1)%(vt1.c0)))))AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND((v0.c1 IN (vt1.c1)))))OR(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN x'' END)) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON NULL COLLATE RTRIM WHERE (CAST((vt1.c0 IN (vt1.c0)) AS TEXT)) ORDER BY '-1628510110' DESC  NULLS LAST, (((((((((((((v0.c0, v0.c1))<>((vt1.c0, vt1.c0))))AND(CASE WHEN v0.c0 THEN vt1.c0 ELSE vt1.c0 END)))AND(((vt1.c1)%(vt1.c0)))))AND(((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)))))AND((v0.c1 IN (vt1.c1)))))OR(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN x'' END)) ASC LIMIT 0;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)) COLLATE RTRIM) ORDER BY (((~ (vt1.c1))) IS TRUE)  NULLS FIRST;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)) COLLATE RTRIM) ORDER BY (((~ (vt1.c1))) IS TRUE)  NULLS FIRST LIMIT 0X3 INTERSECT SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (NULL) ORDER BY (((~ (vt1.c1))) IS TRUE)  NULLS FIRST LIMIT 0X3;
SELECT ALL COUNT(*) FROM v0 WHERE ((((((v0.c0)IS(v0.c0)), ((((((((v0.c2)AND(v0.c1)))AND(v0.c1)))AND(v0.c0)))AND(v0.c1)), v0.c2, ((v0.c0) BETWEEN (NULL) AND (v0.c0)), ((v0.c0)!=(v0.c1))))<=((((((v0.c2)OR(v0.c2)))OR(v0.c1)), CASE v0.c0  WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END, (+ (v0.c2)), (((x''))<=((v0.c2))), (((v0.c2))<((NULL)))))));
SELECT ALL COUNT(*) FROM v0 WHERE ((((((((v0.c0)IS(v0.c0)), ((((((((v0.c2)AND(v0.c1)))AND(v0.c1)))AND(v0.c0)))AND(v0.c1)), v0.c2, ((v0.c0) BETWEEN (NULL) AND (v0.c0)), ((v0.c0)<>(v0.c1))))<=((((((v0.c2)OR(v0.c2)))OR(v0.c1)), CASE v0.c0  WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END, (+ (v0.c2)), (((x''))<=((v0.c2))), (((v0.c2))<((NULL)))))))AND((((v0.c2 IN ())) NOT NULL)))) ORDER BY CASE ((v0.c0)&(v0.c0))  WHEN CASE WHEN v0.c0 THEN v0.c2 END THEN CAST(0.49374353499489376 AS INTEGER) WHEN ((((((v0.c1)OR(NULL)))AND(v0.c2)))AND(v0.c2)) THEN v0.c2 ELSE ((v0.c2) NOTNULL) END, v0.c2 LIMIT 4 INTERSECT SELECT COUNT(*) FROM v0 WHERE (NULL) ORDER BY CASE ((v0.c0)&(v0.c0))  WHEN CASE WHEN v0.c0 THEN v0.c2 END THEN CAST(0.49374353499489376 AS INTEGER) WHEN ((((((v0.c1)OR(NULL)))AND(v0.c2)))AND(v0.c2)) THEN v0.c2 ELSE ((v0.c2) NOTNULL) END, v0.c2 LIMIT 0x4;
SELECT ALL * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1, v0.c0)) BETWEEN ((CASE WHEN v0.c2 THEN vt1.c0 END, CAST(vt1.c0 AS BLOB), LOWER(DISTINCT vt1.c0))) AND ((((v0.c0) NOT BETWEEN ('X-K') AND (v0.c2)), (('') NOT NULL), vt1.c0 COLLATE RTRIM))));
SELECT ALL * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1, v0.c0)) BETWEEN ((CASE WHEN v0.c2 THEN vt1.c0 END, CAST(vt1.c0 AS BLOB), LOWER(DISTINCT vt1.c0))) AND ((((v0.c0) NOT BETWEEN ('X-K') AND (v0.c2)), (('') NOT NULL), vt1.c0 COLLATE RTRIM)))) ORDER BY CHANGES() DESC  NULLS FIRST INTERSECT SELECT * FROM vt1, v0 WHERE ((((x'98') NOT BETWEEN (v0.c1) AND (v0.c0)) IN ())) ORDER BY CHANGES() DESC  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1, v0.c0)) BETWEEN ((CASE WHEN v0.c2 THEN vt1.c0 END, CAST(vt1.c0 AS BLOB), LOWER(DISTINCT vt1.c0))) AND ((((v0.c0) NOT BETWEEN ('X-K') AND (v0.c2)), (('') NOT NULL), vt1.c0 COLLATE RTRIM))));
SELECT ALL * FROM vt1, v0 WHERE ((((v0.c1, vt1.c1, v0.c0)) BETWEEN ((CASE WHEN v0.c2 THEN vt1.c0 END, CAST(vt1.c0 AS BLOB), LOWER(DISTINCT vt1.c0))) AND ((((v0.c0) NOT BETWEEN ('X-K') AND (v0.c2)), (('') NOT NULL), vt1.c0 COLLATE RTRIM)))) ORDER BY CHANGES() DESC  NULLS FIRST INTERSECT SELECT * FROM vt1, v0 WHERE ((((x'98') NOT BETWEEN (v0.c1) AND (v0.c0)) IN ())) ORDER BY CHANGES() DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt1 WHERE (DATE(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)), rtreenode(vt1.c1, vt1.c0), ((vt1.c1)LIKE(vt1.c0))));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((DATE(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)), rtreenode(vt1.c1, vt1.c0), ((vt1.c1)LIKE(vt1.c0))))AND((((((NOT (vt1.c1)))AND(((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))))AND(((vt1.c1)!=(vt1.c1))))))) ORDER BY ((((vt1.c1)IS(vt1.c1)))%(x'a8' COLLATE RTRIM))  NULLS FIRST, CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c0 END COLLATE BINARY DESC LIMIT 0x0;
SELECT MIN(v0.c1) FROM v0 WHERE (TRIM(((v0.c2)+(v0.c0)))) ORDER BY CASE WHEN ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN (+ (v0.c0)) ELSE ((((((((v0.c2)OR('0Y')))OR(v0.c2)))OR(v0.c0)))AND(v0.c0)) END  NULLS LAST, (+ ((v0.c1 IN ()))), TYPEOF(CAST(v0.c2 AS INTEGER))  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (((TRIM(((v0.c2)+(v0.c0))))AND(((((v0.c1)OR(x'')))AND(JULIANDAY(v0.c0, v0.c0, v0.c1, v0.c0)))))) ORDER BY CASE WHEN ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN (+ (v0.c0)) ELSE ((((((((v0.c2)OR('0Y')))OR(v0.c2)))OR(v0.c0)))AND(v0.c0)) END  NULLS LAST, (+ ((v0.c1 IN ()))), TYPEOF(CAST(v0.c2 AS INTEGER))  NULLS LAST INTERSECT SELECT MIN(v0.c1) FROM v0 WHERE (v0.c1) ORDER BY CASE WHEN ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN (+ (v0.c0)) ELSE ((((((((v0.c2)OR('0Y')))OR(v0.c2)))OR(v0.c0)))AND(v0.c0)) END  NULLS LAST, (+ ((v0.c1 IN ()))), TYPEOF(CAST(v0.c2 AS INTEGER))  NULLS LAST;
SELECT * FROM vt1, v0 WHERE (HEX(DISTINCT ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c0)))) ORDER BY ((v0.c2 IN ()) IN (vt1.c0, ((((((vt1.c0)OR(v0.c1)))OR(v0.c1)))AND(v0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (((HEX(DISTINCT ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c0))))AND(CASE CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN vt1.c1 WHEN 0xffffffffe94ed77b THEN vt1.c0 ELSE v0.c2 END  WHEN LIKE(v0.c0, vt1.c1) THEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)) END))) ORDER BY ((v0.c2 IN ()) IN (vt1.c0, ((((((vt1.c0)OR(v0.c1)))OR(v0.c1)))AND(v0.c0))))  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (HEX(DISTINCT ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c0)))) ORDER BY ((v0.c2 IN ()) IN (vt1.c0, ((((((vt1.c0)OR(v0.c1)))OR(v0.c1)))AND(v0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (((HEX(DISTINCT ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c0))))AND(CASE CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN vt1.c1 WHEN 0xffffffffe94ed77b THEN vt1.c0 ELSE v0.c2 END  WHEN LIKE(v0.c0, vt1.c1) THEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c1)) END))) ORDER BY ((v0.c2 IN ()) IN (vt1.c0, ((((((vt1.c0)OR(v0.c1)))OR(v0.c1)))AND(v0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((((((rtreenode(vt1.c1, vt1.c0))AND(vt1.c1 COLLATE RTRIM)))OR(CASE WHEN v0.c1 THEN v0.c0 END)))AND(((vt1.c1)==(v0.c2)))) WHERE (CASE WHEN ((((vt1.c0)OR(v0.c1)))AND('k')) THEN ((((v0.c0)OR(v0.c2)))OR(v0.c0)) ELSE ((vt1.c1) BETWEEN (v0.c2) AND (v0.c0)) END);
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON ((((((rtreenode(vt1.c1, vt1.c0))AND(vt1.c1 COLLATE RTRIM)))OR(CASE WHEN v0.c1 THEN v0.c0 END)))AND(((vt1.c1)=(v0.c2)))) WHERE (CASE WHEN ((((vt1.c0)OR(v0.c1)))AND('k')) THEN ((((v0.c0)OR(v0.c2)))OR(v0.c0)) ELSE ((vt1.c1) BETWEEN (v0.c2) AND (v0.c0)) END) LIMIT 0X0;
SELECT ALL * FROM vt1 CROSS JOIN v0 ON ((((((rtreenode(vt1.c1, vt1.c0))AND(vt1.c1 COLLATE RTRIM)))OR(CASE WHEN v0.c1 THEN v0.c0 END)))AND(((vt1.c1)==(v0.c2)))) WHERE (CASE WHEN ((((vt1.c0)OR(v0.c1)))AND('k')) THEN ((((v0.c0)OR(v0.c2)))OR(v0.c0)) ELSE ((vt1.c1) BETWEEN (v0.c2) AND (v0.c0)) END);
SELECT DISTINCT * FROM vt1 CROSS JOIN v0 ON ((((((rtreenode(vt1.c1, vt1.c0))AND(vt1.c1 COLLATE RTRIM)))OR(CASE WHEN v0.c1 THEN v0.c0 END)))AND(((vt1.c1)=(v0.c2)))) WHERE (CASE WHEN ((((vt1.c0)OR(v0.c1)))AND('k')) THEN ((((v0.c0)OR(v0.c2)))OR(v0.c0)) ELSE ((vt1.c1) BETWEEN (v0.c2) AND (v0.c0)) END) LIMIT 0X0;
SELECT ALL * FROM v0 NOT INDEXED WHERE (CASE v0.c0  WHEN ((v0.c1) BETWEEN (v0.c0) AND (v0.c2)) THEN (~ (v0.c0)) ELSE 0.06059289210983021 END);
SELECT DISTINCT * FROM v0 NOT INDEXED WHERE (CASE v0.c0  WHEN ((v0.c1) BETWEEN (v0.c0) AND (v0.c2)) THEN (~ (v0.c0)) ELSE 0.06059289210983021 END);
SELECT ALL * FROM v0 NOT INDEXED WHERE (CASE v0.c0  WHEN ((v0.c1) BETWEEN (v0.c0) AND (v0.c2)) THEN (~ (v0.c0)) ELSE 0.06059289210983021 END);
SELECT DISTINCT * FROM v0 NOT INDEXED WHERE (CASE v0.c0  WHEN ((v0.c1) BETWEEN (v0.c0) AND (v0.c2)) THEN (~ (v0.c0)) ELSE 0.06059289210983021 END);
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((CAST(v0.c0 AS INTEGER)) IS FALSE)) ORDER BY ((((((((((v0.c2)AND(v0.c2)))OR(v0.c0)))OR(v0.c1)))OR((+ (v0.c1)))))AND((v0.c0 IN ())))  NULLS LAST, CAST(CHAR(v0.c2, v0.c0, v0.c2) AS REAL)  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((CAST(v0.c0 AS INTEGER)) IS FALSE)) ORDER BY ((((((((((v0.c2)AND(v0.c2)))OR(v0.c0)))OR(v0.c1)))OR((+ (v0.c1)))))AND((v0.c0 IN ())))  NULLS LAST, CAST(CHAR(v0.c2, v0.c0, v0.c2) AS REAL)  NULLS LAST;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((vt1.c0)%(vt1.c1)) IN (((vt1.c1)%(vt1.c1)), vt1.c1))) ORDER BY vt1.c1;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((((vt1.c0)%(vt1.c1)) IN (((vt1.c1)%(vt1.c1)), vt1.c1)))AND(((((((((vt1.c0)IS NOT(vt1.c1)))OR(((vt1.c0)GLOB(vt1.c0)))))OR(0.563429018963693)))AND('1U7'))))) ORDER BY vt1.c1;
SELECT MAX(vt1.c1) FROM v0, vt1 WHERE ((+ ((((vt1.c1, 0.2946529777752196)) NOT BETWEEN ((x'0b94', v0.c1)) AND ((vt1.c0, vt1.c1))))));
SELECT MAX(vt1.c1) FROM v0, vt1 WHERE ((+ ((((vt1.c1, 0.2946529777752196)) NOT BETWEEN ((x'0b94', v0.c1)) AND ((vt1.c0, vt1.c1))))));
SELECT ALL COUNT(*) FROM v0 NATURAL JOIN vt1 WHERE (CASE WHEN (((vt1.c0, vt1.c1, vt1.c1))>=((vt1.c0, v0.c2, v0.c2))) THEN ((v0.c0)!=(v0.c0)) WHEN ((0.727030951886949) BETWEEN ('s') AND (vt1.c0)) THEN (+ (NULL)) WHEN (((v0.c2, vt1.c1, vt1.c0)) BETWEEN ((v0.c2, vt1.c0, v0.c1)) AND ((v0.c0, v0.c1, ''))) THEN CASE v0.c1  WHEN v0.c2 THEN vt1.c1 END ELSE ((v0.c1)OR(vt1.c1)) END) ORDER BY ((((((((((v0.c1)<<(vt1.c0)))OR(CAST(v0.c1 AS NUMERIC))))AND(v0.c2)))OR(v0.c0 COLLATE RTRIM)))OR(NULL));
SELECT DISTINCT COUNT(*) FROM v0 NATURAL JOIN vt1 WHERE (CASE WHEN (((vt1.c0, vt1.c1, vt1.c1))>=((vt1.c0, v0.c2, v0.c2))) THEN ((v0.c0)!=(v0.c0)) WHEN ((0.727030951886949) BETWEEN ('s') AND (vt1.c0)) THEN (+ (NULL)) WHEN (((v0.c2, vt1.c1, vt1.c0)) BETWEEN ((v0.c2, vt1.c0, v0.c1)) AND ((v0.c0, v0.c1, ''))) THEN CASE v0.c1  WHEN v0.c2 THEN vt1.c1 END ELSE ((v0.c1)OR(vt1.c1)) END) ORDER BY ((((((((((v0.c1)<<(vt1.c0)))OR(CAST(v0.c1 AS NUMERIC))))AND(v0.c2)))OR(v0.c0 COLLATE RTRIM)))OR(NULL)) INTERSECT SELECT DISTINCT COUNT(*) FROM v0 NATURAL JOIN vt1 WHERE ((((v0.c0, v0.c1)) BETWEEN (('q_<9', (((v0.c2))<=((v0.c0))))) AND ((vt1.c0, LIKELY(DISTINCT vt1.c0))))) ORDER BY ((((((((((v0.c1)<<(vt1.c0)))OR(CAST(v0.c1 AS NUMERIC))))AND(v0.c2)))OR(v0.c0 COLLATE RTRIM)))OR(NULL));
SELECT * FROM vt1, v0 WHERE ((NULL IN (vt1.c0, (((v0.c0))==((v0.c1))))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((NULL IN (vt1.c0, (((v0.c0))==((v0.c1)))))) ORDER BY v0.c1;
SELECT * FROM vt1, v0 WHERE ((NULL IN (vt1.c0, (((v0.c0))==((v0.c1))))));
SELECT DISTINCT * FROM vt1, v0 WHERE ((NULL IN (vt1.c0, (((v0.c0))==((v0.c1)))))) ORDER BY v0.c1;
SELECT ALL COUNT(*) FROM v0, vt1 WHERE ((- (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))))) ORDER BY (((((v0.c0)+(v0.c0))))==((ABS(DISTINCT v0.c1)))) DESC;
SELECT COUNT(*) FROM v0, vt1 WHERE ((- (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))))) ORDER BY (((((v0.c0)+(v0.c0))))==((ABS(DISTINCT v0.c1)))) DESC;
SELECT ALL COUNT(*) FROM vt1 WHERE ((((((vt1.c0)/(vt1.c1)), ((vt1.c1)>>(x'b1'))))<(((- (vt1.c1)), (((vt1.c0, '', vt1.c0, vt1.c1))<=((vt1.c0, vt1.c0, vt1.c0, vt1.c0))))))) ORDER BY CAST((((vt1.c1))<>((vt1.c1))) AS BLOB)  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((((vt1.c0)/(vt1.c1)), ((vt1.c1)>>(x'b1'))))<(((- (vt1.c1)), (((vt1.c0, '', vt1.c0, vt1.c1))<((vt1.c0, vt1.c0, vt1.c0, vt1.c0))))))) ORDER BY (((vt1.c0, x'4d')) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), (((vt1.c1, vt1.c1, vt1.c0))>((vt1.c1, vt1.c0, vt1.c1))))) AND ((((vt1.c0)<<(vt1.c1)), (((vt1.c0))==((vt1.c0)))))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt1 WHERE ((((~ (vt1.c1))) BETWEEN (CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) AND (((vt1.c0)<=(NULL))))) ORDER BY (((vt1.c0, x'4d')) NOT BETWEEN ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c0)), (((vt1.c1, vt1.c1, vt1.c0))>((vt1.c1, vt1.c0, vt1.c1))))) AND ((((vt1.c0)<<(vt1.c1)), (((vt1.c0))==((vt1.c0)))))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) LIMIT 0;
SELECT ALL * FROM vt1 WHERE (vt1.c0);
SELECT DISTINCT * FROM vt1 WHERE (vt1.c0) LIMIT 0;
SELECT * FROM vt1 NOT INDEXED WHERE ((NOT ((((vt1.c0, vt1.c0, vt1.c0, 0.830336742682108))>=((vt1.c1, vt1.c1, vt1.c1, vt1.c0))))));
SELECT * FROM vt1 WHERE ((((NOT ((((vt1.c0, vt1.c0, vt1.c0, 0.830336742682108))>=((vt1.c1, vt1.c1, vt1.c1, vt1.c0))))))AND((((~ (vt1.c0))) IS FALSE))));
SELECT * FROM vt1 NOT INDEXED WHERE ((NOT ((((vt1.c0, vt1.c0, vt1.c0, 0.830336742682108))>=((vt1.c1, vt1.c1, vt1.c1, vt1.c0))))));
SELECT * FROM vt1 WHERE ((((NOT ((((vt1.c0, vt1.c0, vt1.c0, 0.830336742682108))>=((vt1.c1, vt1.c1, vt1.c1, vt1.c0))))))AND((((~ (vt1.c0))) IS FALSE))));
SELECT ALL MAX(v0.c0) FROM v0 CROSS JOIN vt1 ON (~ (v0.c0)) COLLATE NOCASE WHERE (CAST((('973950497') BETWEEN (vt1.c0) AND (vt1.c0)) AS BLOB)) ORDER BY 0.8972487501308973, LAST_INSERT_ROWID() COLLATE BINARY;
SELECT ALL MAX(v0.c0) FROM v0 CROSS JOIN vt1 ON (~ (v0.c0)) COLLATE NOCASE WHERE (CAST((('973950497') BETWEEN (vt1.c0) AND (vt1.c0)) AS BLOB)) ORDER BY 0.8972487501308973, LAST_INSERT_ROWID() COLLATE BINARY LIMIT 0x1;
SELECT ALL * FROM v0 WHERE ((NOT (0.7796049549244509))) ORDER BY ((((((v0.c2 COLLATE NOCASE)AND((NOT (v0.c2)))))OR(0.8382473892060182)))OR((((v0.c1))<=((v0.c0)))))  NULLS LAST, (((- (v0.c0))) NOTNULL)  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((NOT (0.7796049549244509))) ORDER BY (- (((v0.c0) NOT NULL))), (((v0.c0, v0.c0, x'', v0.c1))==((v0.c2, v0.c2, v0.c2, v0.c2))) COLLATE NOCASE  NULLS FIRST, CASE WHEN (NOT (v0.c0)) THEN ((v0.c2) IS TRUE) WHEN ((v0.c1)LIKE(v0.c0)) THEN (+ (v0.c2)) END ASC;
SELECT ALL * FROM v0 WHERE ((NOT (0.7796049549244509))) ORDER BY ((((((v0.c2 COLLATE NOCASE)AND((NOT (v0.c2)))))OR(0.8382473892060182)))OR((((v0.c1))<=((v0.c0)))))  NULLS LAST, (((- (v0.c0))) NOTNULL)  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((NOT (0.7796049549244509))) ORDER BY (- (((v0.c0) NOT NULL))), (((v0.c0, v0.c0, x'', v0.c1))==((v0.c2, v0.c2, v0.c2, v0.c2))) COLLATE NOCASE  NULLS FIRST, CASE WHEN (NOT (v0.c0)) THEN ((v0.c2) IS TRUE) WHEN ((v0.c1)LIKE(v0.c0)) THEN (+ (v0.c2)) END ASC;
SELECT ALL * FROM v0 WHERE (TRIM(CAST('-1432416200' AS TEXT))) ORDER BY ((v0.c1)<>(v0.c1)) COLLATE NOCASE  NULLS FIRST, ((((((((STRFTIME(v0.c0, v0.c0, v0.c0))OR((+ (v0.c2)))))AND((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))))AND(LIKELY(DISTINCT v0.c2))))OR((v0.c2 IN (v0.c2, v0.c1, v0.c2)))), (+ ((((v0.c1, v0.c0, v0.c2, v0.c0))<>((v0.c1, v0.c1, 0X7aa0948d, 0.9504538073605295)))));
SELECT ALL * FROM v0 WHERE (((TRIM(CAST('-1432416200' AS TEXT)))AND(v0.c1))) ORDER BY (((v0.c1, v0.c2)) BETWEEN ((CAST(NULL AS NUMERIC), v0.c1)) AND (((x'36399a' IN ()), ((v0.c0) ISNULL))))  NULLS FIRST INTERSECT SELECT * FROM v0 WHERE (v0.c2) ORDER BY (((v0.c1, v0.c2)) BETWEEN ((CAST(NULL AS NUMERIC), v0.c1)) AND (((x'36399a' IN ()), ((v0.c0) ISNULL))))  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (TRIM(CAST('-1432416200' AS TEXT))) ORDER BY ((v0.c1)<>(v0.c1)) COLLATE NOCASE  NULLS FIRST, ((((((((STRFTIME(v0.c0, v0.c0, v0.c0))OR((+ (v0.c2)))))AND((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))))AND(LIKELY(DISTINCT v0.c2))))OR((v0.c2 IN (v0.c2, v0.c1, v0.c2)))), (+ ((((v0.c1, v0.c0, v0.c2, v0.c0))<>((v0.c1, v0.c1, 0X7aa0948d, 0.9504538073605295)))));
SELECT ALL * FROM v0 WHERE (((TRIM(CAST('-1432416200' AS TEXT)))AND(v0.c1))) ORDER BY (((v0.c1, v0.c2)) BETWEEN ((CAST(NULL AS NUMERIC), v0.c1)) AND (((x'36399a' IN ()), ((v0.c0) ISNULL))))  NULLS FIRST INTERSECT SELECT * FROM v0 WHERE (v0.c2) ORDER BY (((v0.c1, v0.c2)) BETWEEN ((CAST(NULL AS NUMERIC), v0.c1)) AND (((x'36399a' IN ()), ((v0.c0) ISNULL))))  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (vt1.c1) ORDER BY ((TRIM(vt1.c0, vt1.c1))<<(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END));
SELECT ALL * FROM vt1 WHERE (((vt1.c1)AND(x''))) ORDER BY ((TRIM(vt1.c0, vt1.c1))<<(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (((NULL)/(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY ((TRIM(vt1.c0, vt1.c1))<<(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) LIMIT 1;
SELECT ALL * FROM vt1 WHERE (vt1.c1) ORDER BY ((TRIM(vt1.c0, vt1.c1))<<(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END));
SELECT ALL * FROM vt1 WHERE (((vt1.c1)AND(x''))) ORDER BY ((TRIM(vt1.c0, vt1.c1))<<(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) LIMIT 1 INTERSECT SELECT ALL * FROM vt1 WHERE (((NULL)/(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END))) ORDER BY ((TRIM(vt1.c0, vt1.c1))<<(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)) LIMIT 1;
SELECT ALL * FROM vt1, v0 WHERE (CASE (v0.c0 IN (v0.c0))  WHEN CHANGES() THEN v0.c2 WHEN ((v0.c0)IS NOT(v0.c1)) THEN v0.c0 WHEN v0.c0 THEN (+ (v0.c0)) ELSE CASE WHEN vt1.c1 THEN v0.c0 ELSE -1798512207 END END);
SELECT ALL * FROM vt1, v0 WHERE (((CASE (v0.c0 IN (v0.c0))  WHEN CHANGES() THEN v0.c2 WHEN ((v0.c0)IS NOT(v0.c1)) THEN v0.c0 WHEN v0.c0 THEN (+ (v0.c0)) ELSE CASE WHEN vt1.c1 THEN v0.c0 ELSE 0Xffffffff94cce1b1 END END)AND(((((vt1.c0)/(vt1.c0))) NOT BETWEEN (((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0) NOT NULL)))))) ORDER BY (((v0.c0) BETWEEN (vt1.c0) AND (v0.c1)) IN (((0.658204853900577)>>(vt1.c0)))), v0.c1  NULLS FIRST;
SELECT ALL * FROM vt1, v0 WHERE (CASE (v0.c0 IN (v0.c0))  WHEN CHANGES() THEN v0.c2 WHEN ((v0.c0)IS NOT(v0.c1)) THEN v0.c0 WHEN v0.c0 THEN (+ (v0.c0)) ELSE CASE WHEN vt1.c1 THEN v0.c0 ELSE -1798512207 END END);
SELECT ALL * FROM vt1, v0 WHERE (((CASE (v0.c0 IN (v0.c0))  WHEN CHANGES() THEN v0.c2 WHEN ((v0.c0)IS NOT(v0.c1)) THEN v0.c0 WHEN v0.c0 THEN (+ (v0.c0)) ELSE CASE WHEN vt1.c1 THEN v0.c0 ELSE 0Xffffffff94cce1b1 END END)AND(((((vt1.c0)/(vt1.c0))) NOT BETWEEN (((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0) NOT NULL)))))) ORDER BY (((v0.c0) BETWEEN (vt1.c0) AND (v0.c1)) IN (((0.658204853900577)>>(vt1.c0)))), v0.c1  NULLS FIRST;
SELECT * FROM vt1 WHERE (((((vt1.c1)||(vt1.c1)))GLOB(NULL)));
SELECT * FROM vt1 WHERE (((((vt1.c1)||(vt1.c1)))GLOB(NULL)));
SELECT * FROM vt1 WHERE (((((vt1.c1)||(vt1.c1)))GLOB(NULL)));
SELECT * FROM vt1 WHERE (((((vt1.c1)||(vt1.c1)))GLOB(NULL)));
SELECT ALL * FROM vt1 WHERE ((((~ (vt1.c1)))GLOB(((vt1.c0)&(NULL))))) ORDER BY (+ ((('') BETWEEN (vt1.c1) AND (vt1.c1)))), CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END AS NUMERIC) DESC;
SELECT ALL * FROM vt1 WHERE ((((((~ (vt1.c1)))GLOB(((vt1.c0)&(NULL)))))AND(((CAST(vt1.c1 AS TEXT))+(((vt1.c1) IS TRUE)))))) ORDER BY (NOT (CAST(vt1.c1 AS NUMERIC))), (((vt1.c1)) NOT BETWEEN (((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c1, vt1.c1))))) AND ((((((NULL)AND(vt1.c1)))OR(vt1.c1))))) DESC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE ((((~ (vt1.c1)))GLOB(((vt1.c0)&(NULL))))) ORDER BY (+ ((('') BETWEEN (vt1.c1) AND (vt1.c1)))), CAST(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END AS NUMERIC) DESC;
SELECT ALL * FROM vt1 WHERE ((((((~ (vt1.c1)))GLOB(((vt1.c0)&(NULL)))))AND(((CAST(vt1.c1 AS TEXT))+(((vt1.c1) IS TRUE)))))) ORDER BY (NOT (CAST(vt1.c1 AS NUMERIC))), (((vt1.c1)) NOT BETWEEN (((((vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c1, vt1.c1))))) AND ((((((NULL)AND(vt1.c1)))OR(vt1.c1))))) DESC  NULLS LAST;
SELECT * FROM v0 CROSS JOIN vt1 ON CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END COLLATE NOCASE WHERE (((((v0.c0) IS FALSE))OR(NULL COLLATE BINARY))) ORDER BY ((((((vt1.c1)OR(x'')))AND(v0.c2))) NOT BETWEEN (((')') NOTNULL)) AND (((((v0.c1)OR(v0.c2)))AND(vt1.c1)))) DESC  NULLS FIRST;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END COLLATE NOCASE WHERE (((((((v0.c0) IS FALSE))OR(NULL COLLATE BINARY)))AND((CAST(vt1.c0 AS TEXT) IN (CAST(vt1.c0 AS BLOB)))))) ORDER BY (((((v0.c2) NOTNULL), vt1.c1))=(((((vt1.c1, vt1.c1)) NOT BETWEEN ((v0.c2, vt1.c0)) AND ((vt1.c0, v0.c2))), ((((vt1.c1)AND(v0.c0)))AND(vt1.c0))))) ASC  NULLS LAST, (('s')>(v0.c0)) LIMIT 0X0;
SELECT * FROM v0 CROSS JOIN vt1 ON CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END COLLATE NOCASE WHERE (((((v0.c0) IS FALSE))OR(NULL COLLATE BINARY))) ORDER BY ((((((vt1.c1)OR(x'')))AND(v0.c2))) NOT BETWEEN (((')') NOTNULL)) AND (((((v0.c1)OR(v0.c2)))AND(vt1.c1)))) DESC  NULLS FIRST;
SELECT ALL * FROM v0 CROSS JOIN vt1 ON CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END COLLATE NOCASE WHERE (((((((v0.c0) IS FALSE))OR(NULL COLLATE BINARY)))AND((CAST(vt1.c0 AS TEXT) IN (CAST(vt1.c0 AS BLOB)))))) ORDER BY (((((v0.c2) NOTNULL), vt1.c1))=(((((vt1.c1, vt1.c1)) NOT BETWEEN ((v0.c2, vt1.c0)) AND ((vt1.c0, v0.c2))), ((((vt1.c1)AND(v0.c0)))AND(vt1.c0))))) ASC  NULLS LAST, (('s')>(v0.c0)) LIMIT 0X0;
SELECT * FROM v0, vt1 NOT INDEXED WHERE (((CAST(2.58554064E8 AS BLOB))==(LIKELIHOOD(DISTINCT v0.c1, v0.c0))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((CAST(2.58554064E8 AS BLOB))==(LIKELIHOOD(DISTINCT v0.c1, v0.c0)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (vt1.c0) LIMIT 0x0;
SELECT * FROM v0, vt1 NOT INDEXED WHERE (((CAST(2.58554064E8 AS BLOB))==(LIKELIHOOD(DISTINCT v0.c1, v0.c0))));
SELECT ALL MIN(vt1.c1) FROM v0, vt1 WHERE (CAST(((v0.c1) IS FALSE) AS INTEGER));
SELECT DISTINCT MIN(vt1.c1) FROM v0, vt1 WHERE (((CAST(((v0.c1) IS FALSE) AS INTEGER))AND(((v0.c2 COLLATE BINARY)==(CASE v0.c0  WHEN v0.c0 THEN 0.13557839073463107 ELSE v0.c1 END))))) LIMIT 0x0;
SELECT ALL * FROM v0, vt1 WHERE ((('bT_Su') NOT BETWEEN (vt1.c1 COLLATE NOCASE) AND (((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((('bT_Su') NOT BETWEEN (vt1.c1 COLLATE NOCASE) AND (((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY NULL, CAST(((vt1.c1) BETWEEN (9.29445258E8) AND (v0.c0)) AS INTEGER) DESC  NULLS LAST, (((NOT (v0.c0)))*((0Xfffffffff40e948d IN (vt1.c0))))  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE ((('bT_Su') NOT BETWEEN (vt1.c1 COLLATE NOCASE) AND (((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))));
SELECT DISTINCT * FROM v0, vt1 WHERE ((('bT_Su') NOT BETWEEN (vt1.c1 COLLATE NOCASE) AND (((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0))))) ORDER BY NULL, CAST(((vt1.c1) BETWEEN (9.29445258E8) AND (v0.c0)) AS INTEGER) DESC  NULLS LAST, (((NOT (v0.c0)))*((0Xfffffffff40e948d IN (vt1.c0))))  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE (DATETIME(0.08912323693932145, JULIANDAY(v0.c1, v0.c0, v0.c0), v0.c0, LTRIM(NULL, v0.c1)));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (DATETIME(0.08912323693932145, JULIANDAY(v0.c1, v0.c0, v0.c0), v0.c0, LTRIM(NULL, v0.c1))) LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE ((- (((v0.c2) IS TRUE))));
SELECT COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE ((((- (((v0.c2) IS TRUE))))AND(vt1.c0))) ORDER BY CAST((- (vt1.c0)) AS TEXT) ASC, v0.c0 LIMIT 0 INTERSECT SELECT ALL COUNT(*) FROM vt1 NATURAL JOIN v0 WHERE (0.9077201638645574) ORDER BY CAST((- (vt1.c0)) AS TEXT) ASC, v0.c0 LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (((((v0.c1)/(0.9167499379331818)))>=(((((v0.c0)OR(v0.c2)))AND(v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c1)/(0.9167499379331818)))>=(((((v0.c0)OR(v0.c2)))AND(v0.c0))))) ORDER BY LTRIM(x'4b', ((0.695445078114801)>=(NULL))) DESC, GLOB(((v0.c0) BETWEEN (v0.c0) AND (v0.c1)), (((v0.c0, v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1)) AND ((v0.c0, v0.c0, v0.c0)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE ('0.20516486425040503') ORDER BY LTRIM(x'4b', ((0.695445078114801)>=(NULL))) DESC, GLOB(((v0.c0) BETWEEN (v0.c0) AND (v0.c1)), (((v0.c0, v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1)) AND ((v0.c0, v0.c0, v0.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c1)/(0.9167499379331818)))>=(((((v0.c0)OR(v0.c2)))AND(v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c1)/(0.9167499379331818)))>=(((((v0.c0)OR(v0.c2)))AND(v0.c0))))) ORDER BY LTRIM(x'4b', ((0.695445078114801)>=(NULL))) DESC, GLOB(((v0.c0) BETWEEN (v0.c0) AND (v0.c1)), (((v0.c0, v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1)) AND ((v0.c0, v0.c0, v0.c0)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE ('0.20516486425040503') ORDER BY LTRIM(x'4b', ((0.695445078114801)>=(NULL))) DESC, GLOB(((v0.c0) BETWEEN (v0.c0) AND (v0.c1)), (((v0.c0, v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1)) AND ((v0.c0, v0.c0, v0.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM vt1, v0 WHERE (((json_object(x'd2', v0.c2, vt1.c1, v0.c0, v0.c1)) ISNULL)) ORDER BY (((((v0.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))))LIKE(vt1.c0 COLLATE RTRIM))  NULLS FIRST, COALESCE(((0xffffffffc0b40008) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (('[M]')!=(-0.0)), '-317162019', ((v0.c1)%(vt1.c1))) DESC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (((json_object(x'd2', v0.c2, vt1.c1, v0.c0, v0.c1)) ISNULL)) ORDER BY ((((v0.c0)*(vt1.c0)))/(((v0.c0)<<(vt1.c0))))  NULLS LAST, (((v0.c1 IN ()))IS(((v0.c1)<=(vt1.c1)))) DESC, CASE WHEN ((('202756241', vt1.c0, v0.c0)) BETWEEN ((vt1.c1, vt1.c0, v0.c0)) AND ((v0.c0, v0.c2, x''))) THEN ((((((vt1.c1)OR(vt1.c1)))OR(v0.c0)))AND(vt1.c1)) ELSE CAST(v0.c1 AS TEXT) END;
SELECT ALL * FROM vt1, v0 WHERE (((json_object(x'd2', v0.c2, vt1.c1, v0.c0, v0.c1)) ISNULL)) ORDER BY (((((v0.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c1))))LIKE(vt1.c0 COLLATE RTRIM))  NULLS FIRST, COALESCE(((0xffffffffc0b40008) NOT BETWEEN (vt1.c1) AND (vt1.c1)), (('[M]')!=(-0.0)), '-317162019', ((v0.c1)%(vt1.c1))) DESC  NULLS FIRST;
SELECT * FROM vt1, v0 WHERE (((json_object(x'd2', v0.c2, vt1.c1, v0.c0, v0.c1)) ISNULL)) ORDER BY ((((v0.c0)*(vt1.c0)))/(((v0.c0)<<(vt1.c0))))  NULLS LAST, (((v0.c1 IN ()))IS(((v0.c1)<=(vt1.c1)))) DESC, CASE WHEN ((('202756241', vt1.c0, v0.c0)) BETWEEN ((vt1.c1, vt1.c0, v0.c0)) AND ((v0.c0, v0.c2, x''))) THEN ((((((vt1.c1)OR(vt1.c1)))OR(v0.c0)))AND(vt1.c1)) ELSE CAST(v0.c1 AS TEXT) END;
SELECT MIN(vt1.c1) FROM vt1 WHERE (NULL) ORDER BY (((~ (vt1.c0))) NOTNULL), (- ((((vt1.c0, vt1.c0, vt1.c1))>((vt1.c1, vt1.c0, NULL))))) ASC, CASE WHEN '-28401316' THEN CAST(vt1.c0 AS REAL) WHEN vt1.c0 THEN ((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))OR(0.003068155204134504)) WHEN ((vt1.c0)<<('')) THEN NULL WHEN ('' IN (x'5171', vt1.c1)) THEN vt1.c1 ELSE vt1.c0 END DESC  NULLS LAST;
SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (NULL) ORDER BY (((~ (vt1.c0))) NOTNULL), (- ((((vt1.c0, vt1.c0, vt1.c1))>((vt1.c1, vt1.c0, NULL))))) ASC, CASE WHEN '-28401316' THEN CAST(vt1.c0 AS REAL) WHEN vt1.c0 THEN ((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))OR(0.003068155204134504)) WHEN ((vt1.c0)<<('')) THEN NULL WHEN ('' IN (x'5171', vt1.c1)) THEN vt1.c1 ELSE vt1.c0 END DESC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt1.c1) FROM vt1 WHERE (((vt1.c1) ISNULL) COLLATE NOCASE) ORDER BY (((~ (vt1.c0))) NOTNULL), (- ((((vt1.c0, vt1.c0, vt1.c1))>((vt1.c1, vt1.c0, NULL))))) ASC, CASE WHEN '-28401316' THEN CAST(vt1.c0 AS REAL) WHEN vt1.c0 THEN ((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))OR(0.003068155204134504)) WHEN ((vt1.c0)<<('')) THEN NULL WHEN ('' IN (x'5171', vt1.c1)) THEN vt1.c1 ELSE vt1.c0 END DESC  NULLS LAST;
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((v0.c1 COLLATE NOCASE) BETWEEN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN vt1.c1 THEN NULL WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN '' WHEN '鯎*' THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 END) AND (TRIM(v0.c1))));
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((v0.c1 COLLATE NOCASE) BETWEEN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN vt1.c1 THEN NULL WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN '' WHEN '鯎*' THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 END) AND (TRIM(v0.c1)))) LIMIT 0x0 INTERSECT SELECT * FROM vt1 NATURAL JOIN v0 WHERE (CAST(CAST(vt1.c1 AS NUMERIC) AS INTEGER)) LIMIT 0X0;
SELECT * FROM vt1 NATURAL JOIN v0 WHERE (((v0.c1 COLLATE NOCASE) BETWEEN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN vt1.c1 THEN NULL WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN '' WHEN '鯎*' THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 END) AND (TRIM(v0.c1))));
SELECT ALL * FROM vt1 NATURAL JOIN v0 WHERE (((v0.c1 COLLATE NOCASE) BETWEEN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN vt1.c1 THEN NULL WHEN v0.c2 THEN vt1.c0 WHEN vt1.c1 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN '' WHEN '鯎*' THEN v0.c0 WHEN vt1.c0 THEN vt1.c1 END) AND (TRIM(v0.c1)))) LIMIT 0x0 INTERSECT SELECT * FROM vt1 NATURAL JOIN v0 WHERE (CAST(CAST(vt1.c1 AS NUMERIC) AS INTEGER)) LIMIT 0X0;
SELECT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c1))) ISNULL));
SELECT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c1))) ISNULL)) ORDER BY (~ (TYPEOF(vt1.c0))) ASC, vt1.c1 COLLATE RTRIM COLLATE NOCASE ASC INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (~ (TYPEOF(vt1.c0))) ASC, vt1.c1 COLLATE RTRIM COLLATE NOCASE ASC;
SELECT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c1))) ISNULL));
SELECT * FROM vt1 WHERE (((((((((vt1.c0)OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c1))) ISNULL)) ORDER BY (~ (TYPEOF(vt1.c0))) ASC, vt1.c1 COLLATE RTRIM COLLATE NOCASE ASC INTERSECT SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY (~ (TYPEOF(vt1.c0))) ASC, vt1.c1 COLLATE RTRIM COLLATE NOCASE ASC;
SELECT * FROM v0, vt1 WHERE (TRIM(DISTINCT CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN 'y,' WHEN v0.c0 THEN v0.c2 END));
SELECT DISTINCT * FROM v0, vt1 WHERE (((TRIM(DISTINCT CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN 'y,' WHEN v0.c0 THEN v0.c2 END))AND((3.43401058E8 IN ())))) ORDER BY ((vt1.c1 COLLATE BINARY)*('-640489221'))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((vt1.c1)%(v0.c1)) COLLATE BINARY) ORDER BY ((vt1.c1 COLLATE BINARY)*('-640489221'))  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (TRIM(DISTINCT CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN 'y,' WHEN v0.c0 THEN v0.c2 END));
SELECT DISTINCT * FROM v0, vt1 WHERE (((TRIM(DISTINCT CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c1 THEN 'y,' WHEN v0.c0 THEN v0.c2 END))AND((3.43401058E8 IN ())))) ORDER BY ((vt1.c1 COLLATE BINARY)*('-640489221'))  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE (((vt1.c1)%(v0.c1)) COLLATE BINARY) ORDER BY ((vt1.c1 COLLATE BINARY)*('-640489221'))  NULLS LAST;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((0.7873306839493331 COLLATE BINARY)%(((((vt1.c0)OR(vt1.c1)))AND('-282056486'))))) ORDER BY ((~ (vt1.c0)) IN (CAST(NULL AS TEXT))) ASC  NULLS FIRST, LIKELIHOOD(((x'ff') NOT NULL), vt1.c1) DESC;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((0.7873306839493331 COLLATE BINARY)%(((((vt1.c0)OR(vt1.c1)))AND('-282056486'))))) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END AS REAL) ASC, (((NOT (vt1.c0))) NOTNULL)  NULLS FIRST LIMIT 1;
SELECT * FROM v0 WHERE (v0.c1);
SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY LOWER(DISTINCT UPPER(v0.c1)) ASC, INSTR(CHAR(v0.c2, v0.c2), ((((((((((v0.c0)OR(v0.c1)))OR(v0.c2)))OR(v0.c2)))OR(v0.c0)))OR(v0.c0))) ASC, ((v0.c0)<<(v0.c1)) COLLATE RTRIM ASC  NULLS FIRST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM v0 WHERE ('-1809434267') ORDER BY LOWER(DISTINCT UPPER(v0.c1)) ASC, INSTR(CHAR(v0.c2, v0.c2), ((((((((((v0.c0)OR(v0.c1)))OR(v0.c2)))OR(v0.c2)))OR(v0.c0)))OR(v0.c0))) ASC, ((v0.c0)<<(v0.c1)) COLLATE RTRIM ASC  NULLS FIRST LIMIT 3;
SELECT * FROM v0 WHERE (v0.c1);
SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY LOWER(DISTINCT UPPER(v0.c1)) ASC, INSTR(CHAR(v0.c2, v0.c2), ((((((((((v0.c0)OR(v0.c1)))OR(v0.c2)))OR(v0.c2)))OR(v0.c0)))OR(v0.c0))) ASC, ((v0.c0)<<(v0.c1)) COLLATE RTRIM ASC  NULLS FIRST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM v0 WHERE ('-1809434267') ORDER BY LOWER(DISTINCT UPPER(v0.c1)) ASC, INSTR(CHAR(v0.c2, v0.c2), ((((((((((v0.c0)OR(v0.c1)))OR(v0.c2)))OR(v0.c2)))OR(v0.c0)))OR(v0.c0))) ASC, ((v0.c0)<<(v0.c1)) COLLATE RTRIM ASC  NULLS FIRST LIMIT 3;
SELECT COUNT(*) FROM v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN ((((v0.c1, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c0)))) AND (v0.c2 COLLATE RTRIM)));
SELECT ALL COUNT(*) FROM v0 WHERE (((((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN ((((v0.c1, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c0)))) AND (v0.c2 COLLATE RTRIM)))AND((((((((((((- (v0.c1)))OR((((v0.c2)) BETWEEN ((v0.c2)) AND ((v0.c2))))))AND(((v0.c2)+(v0.c2)))))OR((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))))))AND((((v0.c2, v0.c1)) BETWEEN ((v0.c1, v0.c2)) AND ((v0.c1, v0.c2))))))AND(CAST(v0.c0 AS BLOB)))))) INTERSECT SELECT COUNT(*) FROM v0 WHERE (CASE ((v0.c2) ISNULL)  WHEN ((v0.c1) NOTNULL) THEN (((v0.c2, v0.c1))<((v0.c0, v0.c1))) WHEN ((v0.c1)>(v0.c1)) THEN (((v0.c1, v0.c1)) BETWEEN ((v0.c0, v0.c0)) AND ((v0.c1, v0.c0))) END);
SELECT * FROM vt1 NOT INDEXED WHERE (CASE WHEN ((vt1.c0)<(vt1.c1)) THEN CASE WHEN NULL THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END WHEN vt1.c1 THEN (NOT (vt1.c1)) WHEN ((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((vt1.c0)OR(vt1.c1)) ELSE ((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)) END);
SELECT * FROM vt1 WHERE (CASE WHEN ((vt1.c0)<(vt1.c1)) THEN CASE WHEN NULL THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END WHEN vt1.c1 THEN (NOT (vt1.c1)) WHEN ((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((vt1.c0)OR(vt1.c1)) ELSE ((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)) END) ORDER BY (- ((((('%qz끉bD*f')OR(vt1.c1)))OR(vt1.c0)))) INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c1)OR(vt1.c0))) IS TRUE)) ORDER BY (- ((((('%qz끉bD*f')OR(vt1.c1)))OR(vt1.c0))));
SELECT * FROM vt1 NOT INDEXED WHERE (CASE WHEN ((vt1.c0)<(vt1.c1)) THEN CASE WHEN NULL THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END WHEN vt1.c1 THEN (NOT (vt1.c1)) WHEN ((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((vt1.c0)OR(vt1.c1)) ELSE ((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)) END);
SELECT * FROM vt1 WHERE (CASE WHEN ((vt1.c0)<(vt1.c1)) THEN CASE WHEN NULL THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END WHEN vt1.c1 THEN (NOT (vt1.c1)) WHEN ((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((vt1.c0)OR(vt1.c1)) ELSE ((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)) END) ORDER BY (- ((((('%qz끉bD*f')OR(vt1.c1)))OR(vt1.c0)))) INTERSECT SELECT * FROM vt1 WHERE (((((vt1.c1)OR(vt1.c0))) IS TRUE)) ORDER BY (- ((((('%qz끉bD*f')OR(vt1.c1)))OR(vt1.c0))));
SELECT COUNT(*) FROM vt1, v0 WHERE (json_type(((((((NULL)OR('-1408674184')))OR(vt1.c0)))OR(vt1.c0))));
SELECT COUNT(*) FROM vt1, v0 WHERE (json_type(((((((NULL)OR('-1408674184')))OR(vt1.c0)))OR(vt1.c0)))) ORDER BY (+ (ROUND(v0.c0, vt1.c1)))  NULLS LAST LIMIT 0x4;
SELECT COUNT(*) FROM vt1, v0 WHERE (((((((((((v0.c2) IS TRUE))AND((v0.c2 IN (v0.c2, vt1.c1)))))AND(0.11302219155883475)))OR(v0.c1 COLLATE BINARY)))AND(0.23784727395044303)));
SELECT COUNT(*) FROM vt1, v0 WHERE (((((((((((v0.c2) IS TRUE))AND((v0.c2 IN (v0.c2, vt1.c1)))))AND(0.11302219155883475)))OR(v0.c1 COLLATE BINARY)))AND(0.23784727395044303))) INTERSECT SELECT ALL COUNT(*) FROM vt1, v0 WHERE (CAST((((vt1.c1, v0.c1, v0.c1)) BETWEEN ((v0.c1, v0.c1, vt1.c1)) AND ((v0.c1, v0.c2, vt1.c1))) AS NUMERIC));
SELECT * FROM vt1 WHERE ((CAST(vt1.c0 AS TEXT) IN ())) ORDER BY CASE WHEN (- (vt1.c0)) THEN json_object(vt1.c1, vt1.c1, vt1.c1, NULL, vt1.c1, vt1.c0) WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN 0.7680303126170891 ELSE vt1.c0 END THEN ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)) END DESC;
SELECT ALL * FROM vt1 WHERE ((CAST(vt1.c0 AS TEXT) IN ())) ORDER BY CASE WHEN (+ (vt1.c1)) THEN (NOT (vt1.c1)) END  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (((((((((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))OR(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END)))OR((('죓')/(vt1.c0)))))AND(((vt1.c1) BETWEEN (x'') AND (vt1.c0)))))AND(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END))) ORDER BY CASE WHEN (+ (vt1.c1)) THEN (NOT (vt1.c1)) END  NULLS FIRST;
SELECT * FROM vt1 WHERE ((CAST(vt1.c0 AS TEXT) IN ())) ORDER BY CASE WHEN (- (vt1.c0)) THEN json_object(vt1.c1, vt1.c1, vt1.c1, NULL, vt1.c1, vt1.c0) WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN 0.7680303126170891 ELSE vt1.c0 END THEN ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c1)) END DESC;
SELECT ALL * FROM vt1 WHERE ((CAST(vt1.c0 AS TEXT) IN ())) ORDER BY CASE WHEN (+ (vt1.c1)) THEN (NOT (vt1.c1)) END  NULLS FIRST INTERSECT SELECT ALL * FROM vt1 WHERE (((((((((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)))OR(CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END)))OR((('죓')/(vt1.c0)))))AND(((vt1.c1) BETWEEN (x'') AND (vt1.c0)))))AND(CASE vt1.c1  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c0 END))) ORDER BY CASE WHEN (+ (vt1.c1)) THEN (NOT (vt1.c1)) END  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0 WHERE ('-751167347') ORDER BY (((0.019830664891519967))>=(((((v0.c1))=((v0.c2)))))) ASC, ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))LIKE(v0.c0 COLLATE RTRIM)) DESC  NULLS FIRST;
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE ('-751167347') ORDER BY (((v0.c0 IN (v0.c1)))-(((v0.c0) BETWEEN (v0.c1) AND (v0.c0)))) DESC  NULLS FIRST, (+ ('686622947'))  NULLS LAST;
SELECT ALL * FROM vt1 LEFT OUTER JOIN v0 ON 'yK' WHERE (((((vt1.c0)>>(vt1.c1))) NOTNULL));
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON 'yK' WHERE (((((((vt1.c0)>>(vt1.c1))) NOTNULL))AND((- (1.644449794E9))))) ORDER BY (((vt1.c0, v0.c0)) NOT BETWEEN ((CAST('' AS TEXT), CAST(x'67a037' AS REAL))) AND ((v0.c2, v0.c1))) ASC, (~ (0.9394213230771828))  NULLS FIRST;
SELECT ALL * FROM vt1 LEFT OUTER JOIN v0 ON 'yK' WHERE (((((vt1.c0)>>(vt1.c1))) NOTNULL));
SELECT * FROM vt1 LEFT OUTER JOIN v0 ON 'yK' WHERE (((((((vt1.c0)>>(vt1.c1))) NOTNULL))AND((- (1.644449794E9))))) ORDER BY (((vt1.c0, v0.c0)) NOT BETWEEN ((CAST('' AS TEXT), CAST(x'67a037' AS REAL))) AND ((v0.c2, v0.c1))) ASC, (~ (0.9394213230771828))  NULLS FIRST;
SELECT * FROM v0 WHERE ((((((v0.c0, v0.c2, v0.c2))>((v0.c1, v0.c1, v0.c1))))||(((v0.c0)/(v0.c1)))));
SELECT DISTINCT * FROM v0 WHERE ((((((((v0.c0, v0.c2, v0.c2))>((v0.c1, v0.c1, v0.c1))))||(((v0.c0)/(v0.c1)))))AND((((((v0.c2 IN (v0.c1, 'r3f/틮_(', v0.c0)))AND(((v0.c1)OR(v0.c1)))))AND(json_remove(v0.c2, v0.c0)))))) LIMIT 0x0;
SELECT * FROM v0 WHERE ((((((v0.c0, v0.c2, v0.c2))>((v0.c1, v0.c1, v0.c1))))||(((v0.c0)/(v0.c1)))));
SELECT DISTINCT * FROM v0 WHERE ((((((((v0.c0, v0.c2, v0.c2))>((v0.c1, v0.c1, v0.c1))))||(((v0.c0)/(v0.c1)))))AND((((((v0.c2 IN (v0.c1, 'r3f/틮_(', v0.c0)))AND(((v0.c1)OR(v0.c1)))))AND(json_remove(v0.c2, v0.c0)))))) LIMIT 0x0;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON (~ (CAST(v0.c1 AS BLOB))) WHERE (701817325);
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON (~ (CAST(v0.c1 AS BLOB))) WHERE (((0X29d4e1ed)AND(((vt1.c1 COLLATE BINARY)>=((~ (v0.c2))))))) LIMIT 3;
SELECT * FROM v0 LEFT OUTER JOIN vt1 ON (~ (CAST(v0.c1 AS BLOB))) WHERE (701817325);
SELECT DISTINCT * FROM v0 INNER JOIN vt1 ON (~ (CAST(v0.c1 AS BLOB))) WHERE (((0X29d4e1ed)AND(((vt1.c1 COLLATE BINARY)>=((~ (v0.c2))))))) LIMIT 3;
SELECT ALL MAX(vt1.c0) FROM vt1 LEFT OUTER JOIN v0 ON ((NULL) NOTNULL) WHERE (CASE WHEN (v0.c0 IN (v0.c2)) THEN IFNULL(DISTINCT v0.c1, v0.c1) WHEN v0.c2 COLLATE NOCASE THEN vt1.c0 COLLATE NOCASE WHEN LIKELIHOOD(DISTINCT v0.c2, vt1.c1) THEN ((v0.c0) ISNULL) WHEN (- (x'2f')) THEN ((v0.c2) NOT NULL) ELSE CASE v0.c2  WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END END) ORDER BY CASE WHEN ((v0.c1)>>(v0.c0)) THEN ((vt1.c0)<=(v0.c1)) ELSE CASE v0.c0  WHEN v0.c1 THEN v0.c2 END END  NULLS LAST, (((v0.c0 IN (v0.c2))) NOTNULL);
SELECT DISTINCT MAX(vt1.c0) FROM vt1 INNER JOIN v0 ON ((NULL) NOTNULL) WHERE (CASE WHEN (v0.c0 IN (v0.c2)) THEN IFNULL(DISTINCT v0.c1, v0.c1) WHEN v0.c2 COLLATE NOCASE THEN vt1.c0 COLLATE NOCASE WHEN LIKELIHOOD(DISTINCT v0.c2, vt1.c1) THEN ((v0.c0) ISNULL) WHEN (- (x'2f')) THEN ((v0.c2) NOT NULL) ELSE CASE v0.c2  WHEN v0.c2 THEN vt1.c1 ELSE vt1.c0 END END) ORDER BY ((rtreenode(v0.c2, vt1.c0))==(load_extension('0.5787130268887571', vt1.c1))), ((v0.c0) BETWEEN (v0.c1) AND (v0.c1)) COLLATE RTRIM  NULLS LAST LIMIT 0x3;
SELECT MIN(v0.c0) FROM v0 WHERE (x'');
SELECT ALL MIN(v0.c0) FROM v0 WHERE (x'');
SELECT ALL * FROM vt1 WHERE ((((((((((((('')AND(vt1.c0)))OR('zZf')))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) BETWEEN (0xffffffff87f97af8) AND (CAST(vt1.c1 AS INTEGER))));
SELECT DISTINCT * FROM vt1 WHERE ((((((((((((((('')AND(vt1.c0)))OR('zZf')))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) BETWEEN (0Xffffffff87f97af8) AND (CAST(vt1.c1 AS INTEGER))))AND((((((((((vt1.c0, vt1.c1)) BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c1, vt1.c1))))OR((vt1.c1 IN ()))))OR(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END)))AND(vt1.c1 COLLATE BINARY)))));
SELECT ALL * FROM vt1 WHERE ((((((((((((('')AND(vt1.c0)))OR('zZf')))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) BETWEEN (0xffffffff87f97af8) AND (CAST(vt1.c1 AS INTEGER))));
SELECT DISTINCT * FROM vt1 WHERE ((((((((((((((('')AND(vt1.c0)))OR('zZf')))OR(vt1.c0)))AND(vt1.c0)))OR(vt1.c0))) BETWEEN (0Xffffffff87f97af8) AND (CAST(vt1.c1 AS INTEGER))))AND((((((((((vt1.c0, vt1.c1)) BETWEEN ((vt1.c1, vt1.c1)) AND ((vt1.c1, vt1.c1))))OR((vt1.c1 IN ()))))OR(CASE WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c1 END)))AND(vt1.c1 COLLATE BINARY)))));
SELECT ALL MIN(v0.c1) FROM v0 CROSS JOIN vt1 ON ((((v0.c2)||(vt1.c0))) ISNULL) WHERE (((vt1.c0 COLLATE RTRIM)>>(((0Xffffffffafc906a9) ISNULL)))) ORDER BY (NOT (vt1.c0)) COLLATE BINARY DESC, ((((v0.c1) NOT NULL))IS NOT((+ (v0.c1))))  NULLS FIRST;
SELECT DISTINCT MIN(v0.c1) FROM v0 CROSS JOIN vt1 ON ((((v0.c2)||(vt1.c0))) ISNULL) WHERE (((vt1.c0 COLLATE RTRIM)>>(((-1345780055) ISNULL)))) ORDER BY ((((vt1.c1) NOTNULL))-(CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 ELSE v0.c1 END)) DESC  NULLS LAST;
SELECT * FROM vt1 WHERE (973265340);
SELECT DISTINCT * FROM vt1 WHERE (((0x3a02d9bc)AND(((((((((vt1.c1)OR(x'1c')))OR(CAST(x'7a0a' AS NUMERIC))))OR(CAST(vt1.c1 AS REAL))))AND(vt1.c0))))) ORDER BY (((vt1.c1 IN ()))IS(MIN(vt1.c1, vt1.c0, vt1.c0, vt1.c0)))  NULLS FIRST, vt1.c0 DESC  NULLS FIRST LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (json_type(((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))) ORDER BY (((vt1.c1 IN ()))IS(MIN(vt1.c1, vt1.c0, vt1.c0, vt1.c0)))  NULLS FIRST, vt1.c0 DESC  NULLS FIRST LIMIT 0X3;
SELECT * FROM vt1 WHERE (973265340);
SELECT DISTINCT * FROM vt1 WHERE (((0x3a02d9bc)AND(((((((((vt1.c1)OR(x'1c')))OR(CAST(x'7a0a' AS NUMERIC))))OR(CAST(vt1.c1 AS REAL))))AND(vt1.c0))))) ORDER BY (((vt1.c1 IN ()))IS(MIN(vt1.c1, vt1.c0, vt1.c0, vt1.c0)))  NULLS FIRST, vt1.c0 DESC  NULLS FIRST LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt1 WHERE (json_type(((((vt1.c1)AND(vt1.c1)))AND(vt1.c0)))) ORDER BY (((vt1.c1 IN ()))IS(MIN(vt1.c1, vt1.c0, vt1.c0, vt1.c0)))  NULLS FIRST, vt1.c0 DESC  NULLS FIRST LIMIT 0X3;
SELECT ALL COUNT(*) FROM vt1, v0 WHERE (CAST(LIKELY(vt1.c0) AS BLOB)) ORDER BY vt1.c0, ((((v0.c1)*('>')))/(v0.c0 COLLATE NOCASE)) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((CAST(LIKELY(vt1.c0) AS BLOB))AND((((((vt1.c1) ISNULL)))<(((((v0.c1))<=((v0.c0))))))))) ORDER BY (~ (CASE WHEN vt1.c1 THEN vt1.c1 WHEN x'' THEN v0.c1 WHEN vt1.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN vt1.c0 ELSE vt1.c1 END)) DESC, v0.c2;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((- (((vt1.c1) BETWEEN (v0.c1) AND ('3*a{')))));
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((- (((vt1.c1) BETWEEN (v0.c1) AND ('3*a{'))))) ORDER BY (+ (vt1.c0 COLLATE BINARY))  NULLS FIRST, ((((v0.c2) IS TRUE)) NOT BETWEEN ((v0.c2 IN (v0.c2))) AND (((v0.c0) ISNULL))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (vt1.c1) ORDER BY (+ (vt1.c0 COLLATE BINARY))  NULLS FIRST, ((((v0.c2) IS TRUE)) NOT BETWEEN ((v0.c2 IN (v0.c2))) AND (((v0.c0) ISNULL))) ASC  NULLS LAST;
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((- (((vt1.c1) BETWEEN (v0.c1) AND ('3*a{')))));
SELECT * FROM v0 NATURAL JOIN vt1 WHERE ((- (((vt1.c1) BETWEEN (v0.c1) AND ('3*a{'))))) ORDER BY (+ (vt1.c0 COLLATE BINARY))  NULLS FIRST, ((((v0.c2) IS TRUE)) NOT BETWEEN ((v0.c2 IN (v0.c2))) AND (((v0.c0) ISNULL))) ASC  NULLS LAST INTERSECT SELECT ALL * FROM v0 NATURAL JOIN vt1 WHERE (vt1.c1) ORDER BY (+ (vt1.c0 COLLATE BINARY))  NULLS FIRST, ((((v0.c2) IS TRUE)) NOT BETWEEN ((v0.c2 IN (v0.c2))) AND (((v0.c0) ISNULL))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE ((- (((v0.c1)=(v0.c0))))) ORDER BY v0.c2 COLLATE NOCASE DESC  NULLS FIRST, v0.c0;
SELECT * FROM v0 WHERE ((((- (((v0.c1)==(v0.c0)))))AND(CASE ((('x殘5]', v0.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c0)))  WHEN CASE WHEN 0.7930462725983787 THEN v0.c0 END THEN v0.c1 COLLATE BINARY ELSE (v0.c1 IN ()) END))) ORDER BY (((CAST(v0.c1 AS TEXT), (- (v0.c2))))<>((v0.c1 COLLATE RTRIM, ((((v0.c1)AND(x'38')))OR(v0.c1))))) DESC, CAST(((0Xffffffffb845b4c4) NOT BETWEEN (v0.c1) AND (NULL)) AS TEXT)  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE (CASE WHEN (('1592508873')<(v0.c2)) THEN ((v0.c1)IS NOT(v0.c1)) ELSE CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c1 END END) ORDER BY (((CAST(v0.c1 AS TEXT), (- (v0.c2))))!=((v0.c1 COLLATE RTRIM, ((((v0.c1)AND(x'38')))OR(v0.c1))))) DESC, CAST(((0Xffffffffb845b4c4) NOT BETWEEN (v0.c1) AND (NULL)) AS TEXT)  NULLS FIRST;
SELECT * FROM v0 WHERE ((- (((v0.c1)=(v0.c0))))) ORDER BY v0.c2 COLLATE NOCASE DESC  NULLS FIRST, v0.c0;
SELECT * FROM v0 WHERE ((((- (((v0.c1)==(v0.c0)))))AND(CASE ((('x殘5]', v0.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, v0.c0)))  WHEN CASE WHEN 0.7930462725983787 THEN v0.c0 END THEN v0.c1 COLLATE BINARY ELSE (v0.c1 IN ()) END))) ORDER BY (((CAST(v0.c1 AS TEXT), (- (v0.c2))))<>((v0.c1 COLLATE RTRIM, ((((v0.c1)AND(x'38')))OR(v0.c1))))) DESC, CAST(((0Xffffffffb845b4c4) NOT BETWEEN (v0.c1) AND (NULL)) AS TEXT)  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE (CASE WHEN (('1592508873')<(v0.c2)) THEN ((v0.c1)IS NOT(v0.c1)) ELSE CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c1 END END) ORDER BY (((CAST(v0.c1 AS TEXT), (- (v0.c2))))!=((v0.c1 COLLATE RTRIM, ((((v0.c1)AND(x'38')))OR(v0.c1))))) DESC, CAST(((0Xffffffffb845b4c4) NOT BETWEEN (v0.c1) AND (NULL)) AS TEXT)  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE (((ABS(DISTINCT v0.c0)) NOTNULL)) ORDER BY (((v0.c0)) NOT BETWEEN ((((v0.c0) IS FALSE))) AND (('D')))  NULLS LAST;
SELECT COUNT(*) FROM v0 WHERE (((((ABS(DISTINCT v0.c0)) NOTNULL))AND((((v0.c0, 4.63080947E8, v0.c0)) BETWEEN ((CASE v0.c1  WHEN 0.7829956945226901 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END, (NOT (v0.c1)), x'9f24f7')) AND ((((NULL)-(v0.c2)), ((v0.c2)<(NULL)), ((v0.c2)>>(v0.c0)))))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))>(1841692098)) ASC;
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c1) IS TRUE)) BETWEEN (((v0.c2)<<(v0.c0))) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY (((v0.c2, v0.c0, v0.c0, v0.c0)) BETWEEN (((v0.c1 IN (v0.c1)), (0.8621351479484882 IN (v0.c1)), (v0.c2 IN (v0.c2)), (~ (v0.c2)))) AND ((v0.c1, ((v0.c2) BETWEEN (v0.c2) AND (x'ac')), ((v0.c1)%(v0.c1)), v0.c2))) DESC;
SELECT COUNT(*) FROM v0 WHERE (((((((v0.c1) IS TRUE)) BETWEEN (((v0.c2)<<(v0.c0))) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)))))AND(CASE WHEN (NOT (0.6639617149813498)) THEN CASE WHEN v0.c0 THEN v0.c0 END END))) ORDER BY (((v0.c2, v0.c0, v0.c0, v0.c0)) BETWEEN (((v0.c1 IN (v0.c1)), (0.8621351479484882 IN (v0.c1)), (v0.c2 IN (v0.c2)), (~ (v0.c2)))) AND ((v0.c1, ((v0.c2) BETWEEN (v0.c2) AND (x'ac')), ((v0.c1)%(v0.c1)), v0.c2))) DESC;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (((NULL)&(vt1.c1 COLLATE BINARY))) ORDER BY ((((vt1.c0)IS NOT(vt1.c1))) NOT BETWEEN (vt1.c0 COLLATE BINARY) AND ((((vt1.c0))<>((vt1.c1))))) ASC  NULLS LAST, QUOTE(((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) DESC;
SELECT DISTINCT MAX(vt1.c0) FROM vt1 WHERE (((NULL)&(vt1.c1 COLLATE BINARY))) ORDER BY ((((vt1.c0)IS NOT(vt1.c1))) NOT BETWEEN (vt1.c0 COLLATE BINARY) AND ((((vt1.c0))<>((vt1.c1))))) ASC  NULLS LAST, QUOTE(((vt1.c1) NOT BETWEEN (vt1.c1) AND (vt1.c1))) DESC;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (v0.c1 COLLATE BINARY);
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((v0.c1 COLLATE BINARY)AND(((((((NULL)AND('-790740875')))AND(((((v0.c2)AND(v0.c0)))AND(v0.c1)))))AND(v0.c2 COLLATE RTRIM))))) ORDER BY (((((((((((v0.c2))>((v0.c1))))OR(v0.c2 COLLATE RTRIM)))AND(CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c2 END)))OR(((NULL)>>(v0.c2)))))AND(((v0.c0) IS FALSE))) DESC  NULLS LAST;
SELECT ALL MIN(v0.c2) FROM v0, vt1 WHERE (x'd2ab') ORDER BY ((CASE v0.c2  WHEN vt1.c1 THEN vt1.c1 END)AND(((v0.c2) ISNULL))) DESC  NULLS FIRST, ((('-1180195620', (+ (v0.c1))))>=((CAST(v0.c2 AS REAL), CAST(v0.c1 AS INTEGER))))  NULLS FIRST;
SELECT DISTINCT MIN(v0.c2) FROM v0, vt1 WHERE (x'd2ab') ORDER BY LOWER(((v0.c1) IS TRUE)), CASE ((v0.c0)/(vt1.c0))  WHEN CAST(v0.c1 AS REAL) THEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (v0.c2)) WHEN CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 ELSE vt1.c0 END THEN ((vt1.c0)*(vt1.c0)) WHEN (v0.c0 IN (v0.c1, vt1.c1)) THEN '0.4743618102510123' END ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM v0, vt1 WHERE (ABS(v0.c2) COLLATE BINARY) ORDER BY LOWER(((v0.c1) IS TRUE)), CASE ((v0.c0)/(vt1.c0))  WHEN CAST(v0.c1 AS REAL) THEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (v0.c2)) WHEN CASE WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c0 ELSE vt1.c0 END THEN ((vt1.c0)*(vt1.c0)) WHEN (v0.c0 IN (v0.c1, vt1.c1)) THEN '0.4743618102510123' END ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY ((CASE vt1.c0  WHEN NULL THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOTNULL) ASC, CAST(vt1.c0 AS REAL) COLLATE NOCASE  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(json_insert(((vt1.c1) ISNULL), ((vt1.c0) ISNULL), TYPEOF(vt1.c1), vt1.c1 COLLATE NOCASE)))) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c1 THEN x'62dc46' WHEN vt1.c1 THEN vt1.c1 END AS REAL), (((NOT (vt1.c1)))%(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END)), CAST(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END AS BLOB) ASC  NULLS LAST;
SELECT ALL * FROM vt1 WHERE (vt1.c0) ORDER BY ((CASE vt1.c0  WHEN NULL THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END) NOTNULL) ASC, CAST(vt1.c0 AS REAL) COLLATE NOCASE  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((vt1.c0)AND(json_insert(((vt1.c1) ISNULL), ((vt1.c0) ISNULL), TYPEOF(vt1.c1), vt1.c1 COLLATE NOCASE)))) ORDER BY CAST(CASE vt1.c0  WHEN vt1.c1 THEN x'62dc46' WHEN vt1.c1 THEN vt1.c1 END AS REAL), (((NOT (vt1.c1)))%(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c1 END)), CAST(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 END AS BLOB) ASC  NULLS LAST;
SELECT * FROM v0, vt1 WHERE (((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END) BETWEEN ((((v0.c1, v0.c1)) BETWEEN ((v0.c2, vt1.c1)) AND ((v0.c0, v0.c2)))) AND ((((v0.c1, vt1.c1, v0.c2))=((vt1.c1, v0.c2, vt1.c0))))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END) BETWEEN ((((v0.c1, v0.c1)) BETWEEN ((v0.c2, vt1.c1)) AND ((v0.c0, v0.c2)))) AND ((((v0.c1, vt1.c1, v0.c2))==((vt1.c1, v0.c2, vt1.c0)))))) ORDER BY (((+ (vt1.c1))) NOT BETWEEN ((vt1.c0 IN (NULL))) AND (CASE v0.c0  WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 END)), '' DESC  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt1 WHERE (((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END) BETWEEN ((((v0.c1, v0.c1)) BETWEEN ((v0.c2, vt1.c1)) AND ((v0.c0, v0.c2)))) AND ((((v0.c1, vt1.c1, v0.c2))=((vt1.c1, v0.c2, vt1.c0))))));
SELECT DISTINCT * FROM v0, vt1 WHERE (((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 END) BETWEEN ((((v0.c1, v0.c1)) BETWEEN ((v0.c2, vt1.c1)) AND ((v0.c0, v0.c2)))) AND ((((v0.c1, vt1.c1, v0.c2))==((vt1.c1, v0.c2, vt1.c0)))))) ORDER BY (((+ (vt1.c1))) NOT BETWEEN ((vt1.c0 IN (NULL))) AND (CASE v0.c0  WHEN vt1.c1 THEN v0.c1 WHEN vt1.c1 THEN v0.c1 END)), '' DESC  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt1 WHERE (CASE WHEN CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c1 END THEN ((v0.c1)AND(vt1.c1)) WHEN x'4a' THEN ((1997682523)<=(v0.c0)) WHEN CASE WHEN vt1.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END THEN ((vt1.c1)<=(v0.c2)) WHEN NULLIF(v0.c2, v0.c2) THEN ((v0.c2) NOTNULL) WHEN COALESCE(DISTINCT vt1.c0, 'pGV', vt1.c0, vt1.c0) THEN ((vt1.c0)||(vt1.c1)) END);
SELECT * FROM v0, vt1 WHERE (((CASE WHEN CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c1 END THEN ((v0.c1)AND(vt1.c1)) WHEN x'4a' THEN ((1997682523)==(v0.c0)) WHEN CASE WHEN vt1.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END THEN ((vt1.c1)<(v0.c2)) WHEN NULLIF(v0.c2, v0.c2) THEN ((v0.c2) NOTNULL) WHEN COALESCE(DISTINCT vt1.c0, 'pGV', vt1.c0, vt1.c0) THEN ((vt1.c0)||(vt1.c1)) END)AND((~ ((+ (v0.c2))))))) ORDER BY STRFTIME(vt1.c1, CAST(vt1.c0 AS INTEGER), ((x'7f1241')==('512229860')), vt1.c0 COLLATE BINARY), (+ (CAST(v0.c2 AS INTEGER))) DESC;
SELECT * FROM v0, vt1 WHERE (CASE WHEN CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c1 END THEN ((v0.c1)AND(vt1.c1)) WHEN x'4a' THEN ((1997682523)<=(v0.c0)) WHEN CASE WHEN vt1.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END THEN ((vt1.c1)<=(v0.c2)) WHEN NULLIF(v0.c2, v0.c2) THEN ((v0.c2) NOTNULL) WHEN COALESCE(DISTINCT vt1.c0, 'pGV', vt1.c0, vt1.c0) THEN ((vt1.c0)||(vt1.c1)) END);
SELECT * FROM v0, vt1 WHERE (((CASE WHEN CASE WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN v0.c1 ELSE vt1.c1 END THEN ((v0.c1)AND(vt1.c1)) WHEN x'4a' THEN ((1997682523)==(v0.c0)) WHEN CASE WHEN vt1.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END THEN ((vt1.c1)<(v0.c2)) WHEN NULLIF(v0.c2, v0.c2) THEN ((v0.c2) NOTNULL) WHEN COALESCE(DISTINCT vt1.c0, 'pGV', vt1.c0, vt1.c0) THEN ((vt1.c0)||(vt1.c1)) END)AND((~ ((+ (v0.c2))))))) ORDER BY STRFTIME(vt1.c1, CAST(vt1.c0 AS INTEGER), ((x'7f1241')==('512229860')), vt1.c0 COLLATE BINARY), (+ (CAST(v0.c2 AS INTEGER))) DESC;
SELECT ALL * FROM vt1, v0 WHERE (((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))OR(v0.c1)) COLLATE BINARY) ORDER BY CAST((((v0.c0))==((vt1.c0))) AS BLOB);
SELECT ALL * FROM vt1, v0 WHERE (((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))OR(v0.c1)) COLLATE BINARY) ORDER BY CAST((((v0.c0))=((vt1.c0))) AS BLOB) LIMIT 0X0;
SELECT ALL * FROM vt1, v0 WHERE (((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))OR(v0.c1)) COLLATE BINARY) ORDER BY CAST((((v0.c0))==((vt1.c0))) AS BLOB);
SELECT ALL * FROM vt1, v0 WHERE (((((((vt1.c0)AND(vt1.c1)))OR(v0.c2)))OR(v0.c1)) COLLATE BINARY) ORDER BY CAST((((v0.c0))=((vt1.c0))) AS BLOB) LIMIT 0X0;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c1))<((vt1.c0)))) IS FALSE));
SELECT ALL * FROM vt1 WHERE ((((((((vt1.c1))<((vt1.c0)))) IS FALSE))AND((vt1.c1 IN ((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))))) ORDER BY CASE WHEN ((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE CAST(vt1.c0 AS NUMERIC) END  NULLS LAST, ((((((((((((((((((((vt1.c0)OR(vt1.c1)))OR(NULL)))OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c1)))OR('')))OR(vt1.c1)))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END)))OR(((vt1.c0) NOTNULL)))  NULLS FIRST, (((vt1.c1 IN ())) BETWEEN (((vt1.c0) BETWEEN ('ku	64L%') AND (vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST, (((- (vt1.c1)))<=(((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))) ASC INTERSECT SELECT * FROM vt1 WHERE (LOWER(vt1.c1) COLLATE RTRIM) ORDER BY CASE WHEN ((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE CAST(vt1.c0 AS NUMERIC) END  NULLS LAST, ((((((((((((((((((((vt1.c0)OR(vt1.c1)))OR(NULL)))OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c1)))OR('')))OR(vt1.c1)))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END)))OR(((vt1.c0) NOTNULL)))  NULLS FIRST, (((vt1.c1 IN ())) BETWEEN (((vt1.c0) BETWEEN ('ku	64L%') AND (vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST, (((- (vt1.c1)))<=(((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))) ASC;
SELECT ALL * FROM vt1 WHERE ((((((vt1.c1))<((vt1.c0)))) IS FALSE));
SELECT ALL * FROM vt1 WHERE ((((((((vt1.c1))<((vt1.c0)))) IS FALSE))AND((vt1.c1 IN ((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))))))) ORDER BY CASE WHEN ((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE CAST(vt1.c0 AS NUMERIC) END  NULLS LAST, ((((((((((((((((((((vt1.c0)OR(vt1.c1)))OR(NULL)))OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c1)))OR('')))OR(vt1.c1)))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END)))OR(((vt1.c0) NOTNULL)))  NULLS FIRST, (((vt1.c1 IN ())) BETWEEN (((vt1.c0) BETWEEN ('ku	64L%') AND (vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST, (((- (vt1.c1)))<=(((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))) ASC INTERSECT SELECT * FROM vt1 WHERE (LOWER(vt1.c1) COLLATE RTRIM) ORDER BY CASE WHEN ((((vt1.c1)AND(vt1.c0)))AND(vt1.c0)) THEN ((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)) ELSE CAST(vt1.c0 AS NUMERIC) END  NULLS LAST, ((((((((((((((((((((vt1.c0)OR(vt1.c1)))OR(NULL)))OR(vt1.c1)))OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c1)))OR('')))OR(vt1.c1)))OR(CASE WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c0 ELSE vt1.c1 END)))OR(((vt1.c0) NOTNULL)))  NULLS FIRST, (((vt1.c1 IN ())) BETWEEN (((vt1.c0) BETWEEN ('ku	64L%') AND (vt1.c0))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))  NULLS LAST, (((- (vt1.c1)))<=(((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))) ASC;
SELECT ALL * FROM v0 WHERE (rtreenode(v0.c2, ((v0.c2) BETWEEN (v0.c0) AND (v0.c2))));
SELECT DISTINCT * FROM v0 WHERE (rtreenode(v0.c2, ((v0.c2) BETWEEN (v0.c0) AND (v0.c2)))) ORDER BY ((((v0.c0, v0.c2, v0.c1, v0.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c0, v0.c0, v0.c2)) AND ((v0.c1, v0.c1, 0.7993865609271982, v0.c0, v0.c0))) IN (CAST(v0.c1 AS NUMERIC), ((v0.c0)-(v0.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (rtreenode(v0.c2, ((v0.c2) BETWEEN (v0.c0) AND (v0.c2))));
SELECT DISTINCT * FROM v0 WHERE (rtreenode(v0.c2, ((v0.c2) BETWEEN (v0.c0) AND (v0.c2)))) ORDER BY ((((v0.c0, v0.c2, v0.c1, v0.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c0, v0.c0, v0.c2)) AND ((v0.c1, v0.c1, 0.7993865609271982, v0.c0, v0.c0))) IN (CAST(v0.c1 AS NUMERIC), ((v0.c0)-(v0.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c1)>=(v0.c2)))IS NOT(((v0.c0)%(v0.c1))))) ORDER BY (((v0.c0, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS BLOB), CASE WHEN v0.c1 THEN v0.c0 WHEN '2066054211' THEN 'mOp' WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)) AND ((v0.c1 COLLATE BINARY, ((v0.c0)%(v0.c0)))))  NULLS FIRST, (NOT (((((((x'')OR(v0.c0)))AND(v0.c0)))OR(v0.c1)))) ASC, ((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END) ISNULL);
SELECT * FROM v0 WHERE (((((v0.c1)>=(v0.c2)))IS NOT(((v0.c0)%(v0.c1))))) ORDER BY (((v0.c0, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS BLOB), CASE WHEN v0.c1 THEN v0.c0 WHEN '2066054211' THEN 'mOp' WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)) AND ((v0.c1 COLLATE BINARY, ((v0.c0)%(v0.c0)))))  NULLS FIRST, (NOT (((((((x'')OR(v0.c0)))AND(v0.c0)))OR(v0.c1)))) ASC, ((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END) ISNULL);
SELECT ALL * FROM v0 WHERE (((((v0.c1)>=(v0.c2)))IS NOT(((v0.c0)%(v0.c1))))) ORDER BY (((v0.c0, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS BLOB), CASE WHEN v0.c1 THEN v0.c0 WHEN '2066054211' THEN 'mOp' WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)) AND ((v0.c1 COLLATE BINARY, ((v0.c0)%(v0.c0)))))  NULLS FIRST, (NOT (((((((x'')OR(v0.c0)))AND(v0.c0)))OR(v0.c1)))) ASC, ((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END) ISNULL);
SELECT * FROM v0 WHERE (((((v0.c1)>=(v0.c2)))IS NOT(((v0.c0)%(v0.c1))))) ORDER BY (((v0.c0, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS BLOB), CASE WHEN v0.c1 THEN v0.c0 WHEN '2066054211' THEN 'mOp' WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END)) AND ((v0.c1 COLLATE BINARY, ((v0.c0)%(v0.c0)))))  NULLS FIRST, (NOT (((((((x'')OR(v0.c0)))AND(v0.c0)))OR(v0.c1)))) ASC, ((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END) ISNULL);
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE (((((vt1.c0) BETWEEN (v0.c2) AND (vt1.c0)))*(LIKELIHOOD(v0.c0, v0.c0)))) ORDER BY ((CAST(v0.c2 AS BLOB))>>(((v0.c2)&(vt1.c1)))), ((vt1.c0)LIKE(v0.c0)) COLLATE BINARY  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE (((((vt1.c0) BETWEEN (v0.c2) AND (vt1.c0)))*(LIKELIHOOD(v0.c0, v0.c0)))) ORDER BY v0.c0 ASC, ((x'') ISNULL) LIMIT 0X0;
SELECT * FROM vt1 WHERE ((+ (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)));
SELECT ALL * FROM vt1 WHERE ((+ (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)));
SELECT * FROM vt1 WHERE ((+ (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)));
SELECT ALL * FROM vt1 WHERE ((+ (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)));
SELECT ALL COUNT(*) FROM v0, vt1 WHERE (((((((((((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))OR(CASE WHEN v0.c0 THEN v0.c0 ELSE 0.6636650515258031 END)))AND(0.705285612693276)))OR(((v0.c1) BETWEEN (v0.c1) AND (NULL)))))AND(NULLIF(DISTINCT v0.c0, NULL))))AND((((vt1.c0))<>((vt1.c1))))));
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((((((((((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)))OR(CASE WHEN v0.c0 THEN v0.c0 ELSE 0.6636650515258031 END)))AND(0.705285612693276)))OR(((v0.c1) BETWEEN (v0.c1) AND (NULL)))))AND(NULLIF(DISTINCT v0.c0, NULL))))AND((((vt1.c0))<>((vt1.c1)))))) ORDER BY (((((((((v0.c1)AND(v0.c2)))AND(v0.c2)))AND(v0.c0)))AND(v0.c2)) IN ()) DESC, CASE WHEN (- (vt1.c1)) THEN v0.c2 WHEN (NOT (v0.c1)) THEN CAST(v0.c2 AS INTEGER) WHEN (v0.c2 IN (NULL)) THEN (((v0.c2))<=((x'2d7b5f'))) END  NULLS LAST, ((CASE vt1.c0  WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE vt1.c1 END) BETWEEN (((v0.c1) NOT BETWEEN (vt1.c1) AND (v0.c1))) AND (((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)))) DESC LIMIT 3;
SELECT * FROM v0 WHERE ((~ (v0.c0 COLLATE RTRIM))) ORDER BY (v0.c1 IN (((((((v0.c2)AND(v0.c1)))OR(v0.c1)))OR(v0.c1)), v0.c1 COLLATE BINARY)), ((((((((((v0.c2)AND(1.269145269E9)))OR(v0.c2)))AND(v0.c0)))OR(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)))AND((v0.c1 IN ())))  NULLS FIRST, (((NULL, v0.c2))!=((v0.c1, v0.c2))) COLLATE NOCASE COLLATE BINARY  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((~ (v0.c0 COLLATE RTRIM))) ORDER BY LIKELIHOOD(((v0.c2)IS(v0.c1)), (~ (v0.c2))) DESC  NULLS FIRST, (((v0.c1 IN ()))&(TYPEOF(DISTINCT v0.c2))) DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c2 COLLATE RTRIM) NOT BETWEEN (v0.c2) AND (v0.c1))) ORDER BY LIKELIHOOD(((v0.c2)IS(v0.c1)), (~ (v0.c2))) DESC  NULLS FIRST, (((v0.c1 IN ()))&(TYPEOF(DISTINCT v0.c2))) DESC  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE ((~ (v0.c0 COLLATE RTRIM))) ORDER BY (v0.c1 IN (((((((v0.c2)AND(v0.c1)))OR(v0.c1)))OR(v0.c1)), v0.c1 COLLATE BINARY)), ((((((((((v0.c2)AND(1.269145269E9)))OR(v0.c2)))AND(v0.c0)))OR(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)))AND((v0.c1 IN ())))  NULLS FIRST, (((NULL, v0.c2))!=((v0.c1, v0.c2))) COLLATE NOCASE COLLATE BINARY  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (-983853093) ORDER BY ((0.718401191265116) IS TRUE)  NULLS LAST, (((((v0.c1, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c2, v0.c2, v0.c2))))>=((~ (v0.c1)))) ASC;
SELECT * FROM v0 WHERE (-983853093) ORDER BY ((0.718401191265116) IS TRUE)  NULLS LAST, (((((v0.c1, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c2, v0.c2, v0.c2))))>=((~ (v0.c1)))) ASC INTERSECT SELECT ALL * FROM v0 WHERE (((v0.c0 IN (v0.c1)) IN ())) ORDER BY ((0.718401191265116) IS TRUE)  NULLS LAST, (((((v0.c1, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c2, v0.c2, v0.c2))))>=((~ (v0.c1)))) ASC;
SELECT ALL * FROM v0 WHERE (-983853093) ORDER BY ((0.718401191265116) IS TRUE)  NULLS LAST, (((((v0.c1, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c2, v0.c2, v0.c2))))>=((~ (v0.c1)))) ASC;
SELECT * FROM v0 WHERE (-983853093) ORDER BY ((0.718401191265116) IS TRUE)  NULLS LAST, (((((v0.c1, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c2, v0.c2, v0.c2))))>=((~ (v0.c1)))) ASC INTERSECT SELECT ALL * FROM v0 WHERE (((v0.c0 IN (v0.c1)) IN ())) ORDER BY ((0.718401191265116) IS TRUE)  NULLS LAST, (((((v0.c1, v0.c2, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c2, v0.c2, v0.c1)) AND ((v0.c2, v0.c2, v0.c2, v0.c2))))>=((~ (v0.c1)))) ASC;
SELECT ALL MAX(vt1.c0) FROM vt1, v0 WHERE (((((v0.c0) NOTNULL))>(MAX(v0.c2, v0.c1, v0.c1, v0.c2)))) ORDER BY ((v0.c0)*(vt1.c0)) ASC, ((vt1.c1 COLLATE NOCASE) NOTNULL) DESC  NULLS LAST, (+ (x'd5')) COLLATE RTRIM ASC;
SELECT ALL MAX(vt1.c0) FROM vt1, v0 WHERE (((((v0.c0) NOTNULL))>(MAX(v0.c2, v0.c1, v0.c1, v0.c2)))) ORDER BY ((v0.c0)*(vt1.c0)) ASC, ((vt1.c1 COLLATE NOCASE) NOTNULL) DESC  NULLS LAST, (+ (x'd5')) COLLATE RTRIM ASC;
SELECT MIN(vt1.c1) FROM vt1 WHERE (((((vt1.c0 IN ())))<((CAST(vt1.c1 AS INTEGER))))) ORDER BY ((CASE vt1.c1  WHEN 0Xffffffffd9d2e8fb THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END)=(((vt1.c1)<(vt1.c1))))  NULLS FIRST, (+ (((((((vt1.c0)OR(vt1.c0)))AND(vt1.c1)))OR(vt1.c0))))  NULLS LAST, ((vt1.c0) NOT BETWEEN (x'c2ea') AND (((vt1.c1) NOTNULL)))  NULLS LAST, ((NOT (vt1.c0)) IN ())  NULLS FIRST;
SELECT ALL MIN(vt1.c1) FROM vt1 WHERE (((((vt1.c0 IN ())))<((CAST(vt1.c1 AS INTEGER))))) ORDER BY 0.4420009613591265 ASC  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE (CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN NULL THEN v0.c0 END COLLATE RTRIM) ORDER BY json_valid(v0.c0 COLLATE RTRIM), ((0X4956f84a)<(CASE WHEN v0.c0 THEN v0.c2 WHEN x'12' THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN NULL THEN v0.c1 END)) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN NULL THEN v0.c0 END COLLATE RTRIM) ORDER BY v0.c0 ASC, ((((v0.c2)>>(v0.c2))) BETWEEN ('Q#q갟') AND ('h	FQ>k2')) DESC LIMIT 3 INTERSECT SELECT ALL * FROM v0 WHERE ((((((NULL, 0.2531803009711411, v0.c0, 0.12103253960805216)) BETWEEN ((v0.c0, v0.c1, v0.c1, v0.c1)) AND ((x'95', v0.c0, v0.c1, v0.c1)))) ISNULL)) ORDER BY v0.c0 ASC, ((((v0.c2)>>(v0.c2))) BETWEEN ('Q#q갟') AND ('h	FQ>k2')) DESC LIMIT 3;
SELECT * FROM v0 WHERE (CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN NULL THEN v0.c0 END COLLATE RTRIM) ORDER BY json_valid(v0.c0 COLLATE RTRIM), ((0X4956f84a)<(CASE WHEN v0.c0 THEN v0.c2 WHEN x'12' THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN NULL THEN v0.c1 END)) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (CASE v0.c0  WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN NULL THEN v0.c0 END COLLATE RTRIM) ORDER BY v0.c0 ASC, ((((v0.c2)>>(v0.c2))) BETWEEN ('Q#q갟') AND ('h	FQ>k2')) DESC LIMIT 3 INTERSECT SELECT ALL * FROM v0 WHERE ((((((NULL, 0.2531803009711411, v0.c0, 0.12103253960805216)) BETWEEN ((v0.c0, v0.c1, v0.c1, v0.c1)) AND ((x'95', v0.c0, v0.c1, v0.c1)))) ISNULL)) ORDER BY v0.c0 ASC, ((((v0.c2)>>(v0.c2))) BETWEEN ('Q#q갟') AND ('h	FQ>k2')) DESC LIMIT 3;
SELECT * FROM v0 WHERE (((v0.c0)GLOB((((v0.c0, v0.c1, v0.c0, x'', v0.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0, v0.c2, v0.c1)) AND ((v0.c2, v0.c1, x'2cda85', v0.c2, v0.c1)))))) ORDER BY (((('-2127402730')>>(v0.c1))) IS TRUE);
SELECT DISTINCT * FROM v0 WHERE (((v0.c0)GLOB((((v0.c0, v0.c1, v0.c0, x'', v0.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0, v0.c2, v0.c1)) AND ((v0.c2, v0.c1, x'2cda85', v0.c2, v0.c1)))))) ORDER BY ((((v0.c0) BETWEEN (v0.c1) AND (v0.c2))) ISNULL) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((('g' IN (v0.c0))) BETWEEN (((v0.c0) IS FALSE)) AND (TRIM(DISTINCT v0.c1)))) ORDER BY ((((v0.c0) BETWEEN (v0.c1) AND (v0.c2))) ISNULL) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE (((v0.c0)GLOB((((v0.c0, v0.c1, v0.c0, x'', v0.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0, v0.c2, v0.c1)) AND ((v0.c2, v0.c1, x'2cda85', v0.c2, v0.c1)))))) ORDER BY (((('-2127402730')>>(v0.c1))) IS TRUE);
SELECT DISTINCT * FROM v0 WHERE (((v0.c0)GLOB((((v0.c0, v0.c1, v0.c0, x'', v0.c0)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0, v0.c2, v0.c1)) AND ((v0.c2, v0.c1, x'2cda85', v0.c2, v0.c1)))))) ORDER BY ((((v0.c0) BETWEEN (v0.c1) AND (v0.c2))) ISNULL) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((('g' IN (v0.c0))) BETWEEN (((v0.c0) IS FALSE)) AND (TRIM(DISTINCT v0.c1)))) ORDER BY ((((v0.c0) BETWEEN (v0.c1) AND (v0.c2))) ISNULL) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt1 WHERE (LENGTH(((v0.c2) IS FALSE)));
SELECT DISTINCT * FROM v0, vt1 WHERE (((LENGTH(((v0.c2) IS FALSE)))AND((NOT (((vt1.c1)<>(v0.c2))))))) ORDER BY ((((((CAST(v0.c2 AS NUMERIC))OR(((vt1.c1) BETWEEN (vt1.c1) AND (v0.c2)))))OR(((v0.c2) ISNULL))))OR(CASE v0.c0  WHEN vt1.c1 THEN NULL END)), (((((vt1.c0) IS FALSE)))<>((LOWER(vt1.c1)))) DESC  NULLS FIRST, CASE WHEN (- (v0.c1)) THEN v0.c2 WHEN (((v0.c0))<>((v0.c1))) THEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 ELSE vt1.c1 END ELSE ((v0.c1)+(v0.c1)) END  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((x'ab')) BETWEEN ((CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE vt1.c1 END)) AND ((CASE WHEN vt1.c0 THEN vt1.c1 ELSE v0.c1 END)))) ORDER BY ((((((CAST(v0.c2 AS NUMERIC))OR(((vt1.c1) BETWEEN (vt1.c1) AND (v0.c2)))))OR(((v0.c2) ISNULL))))OR(CASE v0.c0  WHEN vt1.c1 THEN NULL END)), (((((vt1.c0) IS FALSE)))!=((LOWER(vt1.c1)))) DESC  NULLS FIRST, CASE WHEN (- (v0.c1)) THEN v0.c2 WHEN (((v0.c0))!=((v0.c1))) THEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 ELSE vt1.c1 END ELSE ((v0.c1)+(v0.c1)) END  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0, vt1 WHERE (LENGTH(((v0.c2) IS FALSE)));
SELECT DISTINCT * FROM v0, vt1 WHERE (((LENGTH(((v0.c2) IS FALSE)))AND((NOT (((vt1.c1)<>(v0.c2))))))) ORDER BY ((((((CAST(v0.c2 AS NUMERIC))OR(((vt1.c1) BETWEEN (vt1.c1) AND (v0.c2)))))OR(((v0.c2) ISNULL))))OR(CASE v0.c0  WHEN vt1.c1 THEN NULL END)), (((((vt1.c0) IS FALSE)))<>((LOWER(vt1.c1)))) DESC  NULLS FIRST, CASE WHEN (- (v0.c1)) THEN v0.c2 WHEN (((v0.c0))<>((v0.c1))) THEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 ELSE vt1.c1 END ELSE ((v0.c1)+(v0.c1)) END  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt1 WHERE ((((x'ab')) BETWEEN ((CASE WHEN vt1.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 ELSE vt1.c1 END)) AND ((CASE WHEN vt1.c0 THEN vt1.c1 ELSE v0.c1 END)))) ORDER BY ((((((CAST(v0.c2 AS NUMERIC))OR(((vt1.c1) BETWEEN (vt1.c1) AND (v0.c2)))))OR(((v0.c2) ISNULL))))OR(CASE v0.c0  WHEN vt1.c1 THEN NULL END)), (((((vt1.c0) IS FALSE)))!=((LOWER(vt1.c1)))) DESC  NULLS FIRST, CASE WHEN (- (v0.c1)) THEN v0.c2 WHEN (((v0.c0))!=((v0.c1))) THEN CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c0 WHEN vt1.c1 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 ELSE vt1.c1 END ELSE ((v0.c1)+(v0.c1)) END  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (CAST(((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(v0.c1)))OR(v0.c1)) AS REAL));
SELECT * FROM v0 WHERE (CAST(((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(v0.c1)))OR(v0.c1)) AS REAL)) INTERSECT SELECT ALL * FROM v0 WHERE (0.9421955608425573);
SELECT ALL * FROM v0 WHERE (CAST(((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(v0.c1)))OR(v0.c1)) AS REAL));
SELECT * FROM v0 WHERE (CAST(((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))AND(v0.c1)))OR(v0.c1)) AS REAL)) INTERSECT SELECT ALL * FROM v0 WHERE (0.9421955608425573);
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((NOT (((((((((((v0.c2)OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))OR(v0.c1))))) ORDER BY (NOT (CASE WHEN v0.c2 THEN v0.c0 END))  NULLS LAST, ((v0.c2)OR(((v0.c2)*('\'))))  NULLS FIRST, ((v0.c0 COLLATE NOCASE)+(((((((((v0.c0)OR(v0.c2)))AND(v0.c2)))OR(v0.c0)))AND(v0.c1))));
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE ((NOT (((((((((((v0.c2)OR(v0.c2)))AND(v0.c0)))AND(v0.c0)))OR(v0.c2)))OR(v0.c1))))) ORDER BY (NOT (v0.c1)), (((((((v0.c2)AND(v0.c1)))OR(v0.c1)))AND(v0.c0)) IN ((((v0.c2, v0.c0, v0.c2, v0.c1)) NOT BETWEEN ((v0.c0, x'd51f80', v0.c1, v0.c2)) AND ((v0.c1, v0.c0, v0.c0, v0.c2))), (((v0.c2))==((v0.c0))))) LIMIT 2 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (SQLITE_COMPILEOPTION_USED((~ (v0.c0)))) ORDER BY (NOT (v0.c1)), (((((((v0.c2)AND(v0.c1)))OR(v0.c1)))AND(v0.c0)) IN ((((v0.c2, v0.c0, v0.c2, v0.c1)) NOT BETWEEN ((v0.c0, x'd51f80', v0.c1, v0.c2)) AND ((v0.c1, v0.c0, v0.c0, v0.c2))), (((v0.c2))==((v0.c0))))) LIMIT 2;
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (((((v0.c0)IS NOT(v0.c1))) BETWEEN (v0.c0 COLLATE RTRIM) AND ('J'))) ORDER BY vt1.c1 DESC, (('D') NOT BETWEEN ((NOT (v0.c2))) AND ('j5GAWDC('))  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM vt1, v0 WHERE (((((((v0.c0)IS NOT(v0.c1))) BETWEEN (v0.c0 COLLATE RTRIM) AND ('J')))AND(((((((((CASE v0.c0  WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END)AND(v0.c2 COLLATE BINARY)))OR(v0.c0 COLLATE NOCASE)))AND((((vt1.c0))<>((vt1.c1))))))AND(UNLIKELY(DISTINCT v0.c2)))))) ORDER BY vt1.c1 DESC, (('D') NOT BETWEEN ((NOT (v0.c2))) AND ('j5GAWDC('))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))AND(0.6437225982604254)) COLLATE RTRIM) ORDER BY CASE NULL  WHEN CAST(vt1.c0 AS TEXT) THEN '-714206972' END, ((((vt1.c0) IS FALSE)) IS FALSE)  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))AND(0.6437225982604254)) COLLATE RTRIM)AND((CAST(vt1.c1 AS INTEGER) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))))) ORDER BY CASE NULL  WHEN CAST(vt1.c0 AS TEXT) THEN '-714206972' END, ((((vt1.c0) IS FALSE)) IS FALSE)  NULLS FIRST LIMIT 0x3 INTERSECT SELECT * FROM vt1 WHERE (((((((vt1.c1)AND(vt1.c1)))AND(NULL))) NOT NULL)) ORDER BY CASE NULL  WHEN CAST(vt1.c0 AS TEXT) THEN '-714206972' END, ((((vt1.c0) IS FALSE)) IS FALSE)  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt1 WHERE (((((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))AND(0.6437225982604254)) COLLATE RTRIM) ORDER BY CASE NULL  WHEN CAST(vt1.c0 AS TEXT) THEN '-714206972' END, ((((vt1.c0) IS FALSE)) IS FALSE)  NULLS FIRST;
SELECT ALL * FROM vt1 WHERE (((((((((vt1.c1)OR(vt1.c0)))OR(vt1.c1)))AND(0.6437225982604254)) COLLATE RTRIM)AND((CAST(vt1.c1 AS INTEGER) IN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))))))) ORDER BY CASE NULL  WHEN CAST(vt1.c0 AS TEXT) THEN '-714206972' END, ((((vt1.c0) IS FALSE)) IS FALSE)  NULLS FIRST LIMIT 0x3 INTERSECT SELECT * FROM vt1 WHERE (((((((vt1.c1)AND(vt1.c1)))AND(NULL))) NOT NULL)) ORDER BY CASE NULL  WHEN CAST(vt1.c0 AS TEXT) THEN '-714206972' END, ((((vt1.c0) IS FALSE)) IS FALSE)  NULLS FIRST LIMIT 3;
SELECT * FROM vt1, v0 WHERE (CAST(((v0.c2) NOT NULL) AS BLOB));
SELECT DISTINCT * FROM vt1, v0 WHERE (((CAST(((v0.c2) NOT NULL) AS BLOB))AND(TYPEOF(LOWER(DISTINCT vt1.c0))))) ORDER BY x'32'  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (vt1.c0) ORDER BY x'32'  NULLS FIRST LIMIT 0x2;
SELECT * FROM vt1, v0 WHERE (CAST(((v0.c2) NOT NULL) AS BLOB));
SELECT DISTINCT * FROM vt1, v0 WHERE (((CAST(((v0.c2) NOT NULL) AS BLOB))AND(TYPEOF(LOWER(DISTINCT vt1.c0))))) ORDER BY x'32'  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (vt1.c0) ORDER BY x'32'  NULLS FIRST LIMIT 0x2;
SELECT * FROM vt1 WHERE (CASE (+ (vt1.c1))  WHEN (vt1.c1 IN ()) THEN (~ (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END END) ORDER BY ((((vt1.c0)/(vt1.c0))) NOT NULL), CASE WHEN (vt1.c1 IN ()) THEN ((vt1.c1)LIKE(vt1.c1)) WHEN CAST(vt1.c0 AS TEXT) THEN CASE 0xffffffff93a0ec58  WHEN vt1.c1 THEN vt1.c1 END ELSE ((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c1)))OR(0x37bbd2ee)) END DESC, vt1.c1, ((((CAST(vt1.c0 AS TEXT))AND((((vt1.c0, vt1.c1)) BETWEEN ((vt1.c1, vt1.c0)) AND ((NULL, vt1.c0))))))AND(((vt1.c1) IS FALSE))) ASC;
SELECT * FROM vt1 WHERE (((CASE (+ (vt1.c1))  WHEN (vt1.c1 IN ()) THEN (~ (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END END)AND(((-2056712187) ISNULL)))) ORDER BY COALESCE(DISTINCT ((((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))OR('P?tTD2')))AND(vt1.c0)))AND(vt1.c1)), 0X37bbd2ee) ASC  NULLS FIRST, CAST(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)) AS REAL) ASC LIMIT 0x1;
SELECT * FROM vt1 WHERE (CASE (+ (vt1.c1))  WHEN (vt1.c1 IN ()) THEN (~ (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END END) ORDER BY ((((vt1.c0)/(vt1.c0))) NOT NULL), CASE WHEN (vt1.c1 IN ()) THEN ((vt1.c1)LIKE(vt1.c1)) WHEN CAST(vt1.c0 AS TEXT) THEN CASE 0xffffffff93a0ec58  WHEN vt1.c1 THEN vt1.c1 END ELSE ((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))OR(vt1.c1)))OR(0x37bbd2ee)) END DESC, vt1.c1, ((((CAST(vt1.c0 AS TEXT))AND((((vt1.c0, vt1.c1)) BETWEEN ((vt1.c1, vt1.c0)) AND ((NULL, vt1.c0))))))AND(((vt1.c1) IS FALSE))) ASC;
SELECT * FROM vt1 WHERE (((CASE (+ (vt1.c1))  WHEN (vt1.c1 IN ()) THEN (~ (vt1.c0)) ELSE CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c1 END END)AND(((-2056712187) ISNULL)))) ORDER BY COALESCE(DISTINCT ((((((((((vt1.c1)OR(vt1.c0)))AND(vt1.c0)))OR('P?tTD2')))AND(vt1.c0)))AND(vt1.c1)), 0X37bbd2ee) ASC  NULLS FIRST, CAST(((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c1)) AS REAL) ASC LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt1 WHERE (CAST((vt1.c1 IN (vt1.c0)) AS REAL));
SELECT DISTINCT COUNT(*) FROM vt1 WHERE (((CAST((vt1.c1 IN (vt1.c0)) AS REAL))AND((((((0.8219663979616283)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOT BETWEEN (((vt1.c0) IS FALSE)) AND (((vt1.c1) NOT NULL)))))) ORDER BY (((NULL) IS TRUE) IN (((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c0)))), (((vt1.c0) NOTNULL) IN ((vt1.c0 IN (vt1.c1)), ((('1630845407', NULL))<((vt1.c1, x''))))) ASC LIMIT 0;
SELECT ALL * FROM v0 WHERE ((((('724715347')!=(v0.c1))) IS FALSE)) ORDER BY ((0.4187721137084013 COLLATE BINARY)>>(highlight(0.36992658523342303, v0.c1, v0.c2, v0.c1))) DESC  NULLS FIRST, (((v0.c1))==(((((v0.c0, NULL))<((v0.c1, v0.c2)))))) ASC, x'55' COLLATE NOCASE ASC;
SELECT DISTINCT * FROM v0 WHERE ((((('724715347')!=(v0.c1))) IS FALSE)) ORDER BY LOWER(DISTINCT (('持!/')||(v0.c0)))  NULLS LAST, CASE ((v0.c0)<>(v0.c1))  WHEN (v0.c2 IN ()) THEN (NOT (v0.c2)) END DESC LIMIT 0X0;
SELECT ALL * FROM v0 WHERE ((((('724715347')!=(v0.c1))) IS FALSE)) ORDER BY ((0.4187721137084013 COLLATE BINARY)>>(highlight(0.36992658523342303, v0.c1, v0.c2, v0.c1))) DESC  NULLS FIRST, (((v0.c1))==(((((v0.c0, NULL))<((v0.c1, v0.c2)))))) ASC, x'55' COLLATE NOCASE ASC;
SELECT DISTINCT * FROM v0 WHERE ((((('724715347')!=(v0.c1))) IS FALSE)) ORDER BY LOWER(DISTINCT (('持!/')||(v0.c0)))  NULLS LAST, CASE ((v0.c0)<>(v0.c1))  WHEN (v0.c2 IN ()) THEN (NOT (v0.c2)) END DESC LIMIT 0X0;
SELECT * FROM v0, vt1 WHERE ((((vt1.c1, v0.c2, vt1.c0)) BETWEEN ((CASE WHEN 0Xffffffff9b74a03d THEN vt1.c0 ELSE vt1.c1 END, x'' COLLATE RTRIM, ((((v0.c0)AND(v0.c0)))AND(v0.c1)))) AND (((((6.15923876E8, vt1.c1))!=((vt1.c1, v0.c0))), x'', '-130381765')))) ORDER BY (((((((vt1.c0, vt1.c0, v0.c2, v0.c1)) NOT BETWEEN ((vt1.c1, 0.5908037246653997, vt1.c0, v0.c0)) AND ((v0.c2, v0.c0, v0.c2, vt1.c1))))AND(v0.c2 COLLATE RTRIM)))AND((- (v0.c0))));
SELECT ALL * FROM v0, vt1 WHERE ((((((vt1.c1, v0.c2, vt1.c0)) BETWEEN ((CASE WHEN 0Xffffffff9b74a03d THEN vt1.c0 ELSE vt1.c1 END, x'' COLLATE RTRIM, ((((v0.c0)AND(v0.c0)))AND(v0.c1)))) AND (((((6.15923876E8, vt1.c1))<>((vt1.c1, v0.c0))), x'', '-130381765'))))AND(vt1.c0))) ORDER BY x'0f' ASC, ((v0.c2) ISNULL) COLLATE RTRIM ASC  NULLS FIRST INTERSECT SELECT * FROM v0, vt1 WHERE (rtreenode(v0.c1 COLLATE BINARY, ((((((((v0.c2)OR(vt1.c0)))AND(vt1.c1)))AND(v0.c0)))OR(1.016608984E9)))) ORDER BY x'0f' ASC, ((v0.c2) ISNULL) COLLATE RTRIM ASC  NULLS FIRST;
SELECT * FROM v0, vt1 WHERE ((((vt1.c1, v0.c2, vt1.c0)) BETWEEN ((CASE WHEN 0Xffffffff9b74a03d THEN vt1.c0 ELSE vt1.c1 END, x'' COLLATE RTRIM, ((((v0.c0)AND(v0.c0)))AND(v0.c1)))) AND (((((6.15923876E8, vt1.c1))!=((vt1.c1, v0.c0))), x'', '-130381765')))) ORDER BY (((((((vt1.c0, vt1.c0, v0.c2, v0.c1)) NOT BETWEEN ((vt1.c1, 0.5908037246653997, vt1.c0, v0.c0)) AND ((v0.c2, v0.c0, v0.c2, vt1.c1))))AND(v0.c2 COLLATE RTRIM)))AND((- (v0.c0))));
SELECT ALL * FROM v0, vt1 WHERE ((((((vt1.c1, v0.c2, vt1.c0)) BETWEEN ((CASE WHEN 0Xffffffff9b74a03d THEN vt1.c0 ELSE vt1.c1 END, x'' COLLATE RTRIM, ((((v0.c0)AND(v0.c0)))AND(v0.c1)))) AND (((((6.15923876E8, vt1.c1))<>((vt1.c1, v0.c0))), x'', '-130381765'))))AND(vt1.c0))) ORDER BY x'0f' ASC, ((v0.c2) ISNULL) COLLATE RTRIM ASC  NULLS FIRST INTERSECT SELECT * FROM v0, vt1 WHERE (rtreenode(v0.c1 COLLATE BINARY, ((((((((v0.c2)OR(vt1.c0)))AND(vt1.c1)))AND(v0.c0)))OR(1.016608984E9)))) ORDER BY x'0f' ASC, ((v0.c2) ISNULL) COLLATE RTRIM ASC  NULLS FIRST;
SELECT COUNT(*) FROM v0 NATURAL JOIN vt1 WHERE (v0.c1) ORDER BY ((((NOT (vt1.c1)), ((v0.c0)/(v0.c1))))=((vt1.c1 COLLATE BINARY, ((((vt1.c1)AND(v0.c1)))AND(v0.c0)))))  NULLS FIRST, 0.19175272902476248 DESC, CASE WHEN ((vt1.c1)+(vt1.c0)) THEN ((v0.c1)-(vt1.c0)) WHEN ((v0.c0) BETWEEN (v0.c1) AND (vt1.c0)) THEN (((0.03998962171794307, v0.c2))<=((vt1.c0, v0.c2))) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END DESC  NULLS LAST;
SELECT COUNT(*) FROM v0 NATURAL JOIN vt1 WHERE (v0.c1) ORDER BY (((((((((((v0.c2)OR(vt1.c1)))OR(vt1.c0)))OR(v0.c1)))AND(v0.c0)), 0.5610583991391962, ((((v0.c2)AND(v0.c1)))OR(v0.c1)), ((((((((((((((vt1.c0)OR(vt1.c1)))AND(vt1.c1)))AND(v0.c1)))AND(v0.c0)))AND(v0.c1)))AND(v0.c1)))AND(v0.c1)), v0.c2 COLLATE BINARY, 0.9037479008948993))<>((CAST(vt1.c0 AS REAL), CAST(v0.c0 AS TEXT), ((v0.c1) ISNULL), v0.c1 COLLATE NOCASE, '#', ((vt1.c0) NOTNULL)))) ASC, x'10ee7e' DESC, ((v0.c0)>>(((((vt1.c0)AND(v0.c1)))OR(v0.c0))))  NULLS FIRST LIMIT 0X2;
SELECT MAX(v0.c2) FROM vt1, v0 WHERE (QUOTE((((v0.c1, -130381765, vt1.c0)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1)) AND ((v0.c1, v0.c0, v0.c2))))) ORDER BY ((((CAST(v0.c0 AS NUMERIC))OR((+ (vt1.c1)))))AND(v0.c0));
SELECT MAX(v0.c2) FROM vt1, v0 WHERE (QUOTE((((v0.c1, -130381765, vt1.c0)) NOT BETWEEN ((v0.c1, v0.c2, v0.c1)) AND ((v0.c1, v0.c0, v0.c2))))) ORDER BY ((NULL) NOT BETWEEN (-1.017404822E9) AND (((v0.c0) NOTNULL))), (((v0.c2)) NOT BETWEEN ((CASE WHEN v0.c2 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 WHEN '' THEN vt1.c0 WHEN v0.c2 THEN vt1.c1 END)) AND ((((vt1.c0)/(vt1.c1)))))  NULLS FIRST INTERSECT SELECT ALL MAX(v0.c2) FROM vt1, v0 WHERE ((v0.c2 IN (CASE WHEN vt1.c1 THEN 0.6187604698232919 END))) ORDER BY ((NULL) NOT BETWEEN (-1.017404822E9) AND (((v0.c0) NOTNULL))), (((v0.c2)) NOT BETWEEN ((CASE WHEN v0.c2 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 WHEN '' THEN vt1.c0 WHEN v0.c2 THEN vt1.c1 END)) AND ((((vt1.c0)/(vt1.c1)))))  NULLS FIRST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE (((((vt1.c1) NOT NULL)) NOT NULL));
SELECT DISTINCT MIN(vt1.c0) FROM vt1 NOT INDEXED WHERE (((((((vt1.c1) NOT NULL)) NOT NULL))AND(CAST(((((((vt1.c0)OR(vt1.c1)))OR(0.35142628589747005)))OR(vt1.c1)) AS REAL)))) ORDER BY ((vt1.c1)||(((vt1.c1)AND(0.9591385916311859)))) DESC, ((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)) COLLATE BINARY DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt1.c0) FROM vt1 WHERE (((CAST(vt1.c1 AS REAL))<(CAST(vt1.c1 AS INTEGER)))) ORDER BY ((vt1.c1)||(((vt1.c1)AND(0.9591385916311859)))) DESC, ((((vt1.c0)AND(vt1.c0)))AND(vt1.c1)) COLLATE BINARY DESC  NULLS FIRST LIMIT 0;
SELECT MIN(v0.c2) FROM v0 WHERE (v0.c1) ORDER BY v0.c1 COLLATE NOCASE DESC;
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE (((v0.c1)AND((+ ((NOT (v0.c2))))))) ORDER BY ((((UNLIKELY(v0.c2))OR(((v0.c0)!=(v0.c0)))))AND(NULL)) DESC  NULLS LAST, ((((((v0.c2) IS FALSE))OR(((v0.c0)OR(v0.c2)))))AND((v0.c0 IN ()))) ASC  NULLS FIRST, 463080947 COLLATE NOCASE ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE (((((CAST(v0.c0 AS REAL))OR((v0.c1 IN (v0.c0)))))OR(LOWER(v0.c1)))) ORDER BY ((((UNLIKELY(v0.c2))OR(((v0.c0)!=(v0.c0)))))AND(NULL)) DESC  NULLS LAST, ((((((v0.c2) IS FALSE))OR(((v0.c0)OR(v0.c2)))))AND((v0.c0 IN ()))) ASC  NULLS FIRST, 463080947 COLLATE NOCASE ASC  NULLS FIRST LIMIT 0x0;
SELECT COUNT(*) FROM v0, vt1 WHERE (((x'5a6d') BETWEEN (((v0.c0) BETWEEN (v0.c0) AND (vt1.c0))) AND ((v0.c2 IN ())))) ORDER BY (((v0.c1, v0.c2, v0.c1)) NOT BETWEEN ((((v0.c1) IS FALSE), (((vt1.c0, v0.c1)) BETWEEN ((v0.c1, vt1.c0)) AND ((v0.c0, 0.16720870065065352))), ((((vt1.c1)AND(v0.c0)))OR(vt1.c0)))) AND ((CAST(v0.c1 AS INTEGER), CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 ELSE v0.c0 END, (~ (v0.c0))))) ASC;
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE (((((x'5a6d') BETWEEN (((v0.c0) BETWEEN (v0.c0) AND (vt1.c0))) AND ((v0.c2 IN ()))))AND((CAST(vt1.c1 AS BLOB) IN (((v0.c2)<(v0.c0))))))) ORDER BY (((((vt1.c0, v0.c2)) BETWEEN ((vt1.c0, v0.c0)) AND ((v0.c2, vt1.c0))))/(((v0.c2) ISNULL)))  NULLS LAST, ((((vt1.c0)IS NOT(vt1.c1))) BETWEEN (CAST(v0.c1 AS NUMERIC)) AND ((v0.c0 IN ('w*')))) DESC, (((CASE v0.c0  WHEN x'' THEN v0.c2 WHEN vt1.c0 THEN v0.c0 END, v0.c1 COLLATE BINARY))==((v0.c0 COLLATE RTRIM, ('' IN ())))) LIMIT 2;
SELECT * FROM vt1, v0 WHERE (IFNULL(DISTINCT ((v0.c0)OR(vt1.c1)), (((v0.c1)) NOT BETWEEN ((vt1.c0)) AND ((v0.c0)))));
SELECT DISTINCT * FROM vt1, v0 WHERE (((IFNULL(DISTINCT ((v0.c0)OR(vt1.c1)), (((v0.c1)) NOT BETWEEN ((vt1.c0)) AND ((v0.c0)))))AND(((((v0.c0)AND(CAST(v0.c2 AS BLOB))))OR((((v0.c2, v0.c2)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((v0.c2, v0.c0)))))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c1) IS TRUE) COLLATE RTRIM);
SELECT * FROM vt1, v0 WHERE (IFNULL(DISTINCT ((v0.c0)OR(vt1.c1)), (((v0.c1)) NOT BETWEEN ((vt1.c0)) AND ((v0.c0)))));
SELECT DISTINCT * FROM vt1, v0 WHERE (((IFNULL(DISTINCT ((v0.c0)OR(vt1.c1)), (((v0.c1)) NOT BETWEEN ((vt1.c0)) AND ((v0.c0)))))AND(((((v0.c0)AND(CAST(v0.c2 AS BLOB))))OR((((v0.c2, v0.c2)) NOT BETWEEN ((vt1.c1, vt1.c0)) AND ((v0.c2, v0.c0)))))))) INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE (((v0.c1) IS TRUE) COLLATE RTRIM);
SELECT ALL COUNT(*) FROM v0 WHERE (v0.c0) ORDER BY LTRIM(v0.c0, (('929445258') IS TRUE));
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c0)AND(v0.c0 COLLATE NOCASE))) ORDER BY ((((0.19958401732291386) NOT NULL)) BETWEEN (v0.c1) AND (((((v0.c1)AND(v0.c1)))OR(v0.c1)))) ASC  NULLS LAST, (((v0.c2 COLLATE BINARY))=((((v0.c2) NOTNULL)))) DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (UNLIKELY(v0.c2) COLLATE RTRIM COLLATE RTRIM);
SELECT * FROM v0 WHERE (((UNLIKELY(v0.c2) COLLATE RTRIM COLLATE RTRIM)AND((((NULL, v0.c1)) BETWEEN (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c2))), (v0.c0 IN ()))) AND ((0xffffffffefd59519, (NULL IN ()))))))) INTERSECT SELECT * FROM v0 WHERE (((((v0.c0)>=(-6.16332281E8))) BETWEEN (v0.c1) AND (((v0.c2)>(v0.c0)))));
SELECT ALL * FROM v0 WHERE (UNLIKELY(v0.c2) COLLATE RTRIM COLLATE RTRIM);
SELECT * FROM v0 WHERE (((UNLIKELY(v0.c2) COLLATE RTRIM COLLATE RTRIM)AND((((NULL, v0.c1)) BETWEEN (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c2))), (v0.c0 IN ()))) AND ((0xffffffffefd59519, (NULL IN ()))))))) INTERSECT SELECT * FROM v0 WHERE (((((v0.c0)>=(-6.16332281E8))) BETWEEN (v0.c1) AND (((v0.c2)>(v0.c0)))));
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((vt1.c1)) BETWEEN ((CAST(0.7928192132622095 AS BLOB))) AND ((NULL)))) ORDER BY ((vt1.c1 COLLATE NOCASE)LIKE(LIKELIHOOD(vt1.c0, vt1.c1)))  NULLS LAST;
SELECT ALL MAX(vt1.c0) FROM vt1 WHERE ((((((vt1.c1)) BETWEEN ((CAST(0.7928192132622095 AS BLOB))) AND ((NULL))))AND(CAST(CAST(vt1.c0 AS INTEGER) AS REAL)))) ORDER BY CAST(vt1.c0 COLLATE RTRIM AS REAL), IFNULL(((((((((x'8717')AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))OR(NULL)), (vt1.c0 IN ())) LIMIT 0X2 INTERSECT SELECT ALL MAX(vt1.c0) FROM vt1 WHERE (vt1.c0) ORDER BY CAST(vt1.c0 COLLATE RTRIM AS REAL), IFNULL(((((((((x'8717')AND(vt1.c1)))OR(vt1.c0)))OR(vt1.c0)))OR(NULL)), (vt1.c0 IN ())) LIMIT 2;
SELECT MAX(v0.c1) FROM v0 WHERE ((((NOT (v0.c1)))AND((((v0.c1, v0.c0))<=((v0.c1, v0.c2)))))) ORDER BY CASE NULL  WHEN TRIM(DISTINCT v0.c1) THEN CAST(v0.c2 AS BLOB) END, CAST(v0.c2 AS NUMERIC) DESC  NULLS LAST;
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((((NOT (v0.c1)))AND((((v0.c1, v0.c0))<((v0.c1, v0.c2)))))) ORDER BY CASE NULL  WHEN TRIM(DISTINCT v0.c1) THEN CAST(v0.c2 AS BLOB) END, CAST(v0.c2 AS NUMERIC) DESC  NULLS LAST INTERSECT SELECT MAX(v0.c1) FROM v0 WHERE (NULL) ORDER BY CASE NULL  WHEN TRIM(DISTINCT v0.c1) THEN CAST(v0.c2 AS BLOB) END, CAST(v0.c2 AS NUMERIC) DESC  NULLS LAST;
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((NOT (vt1.c0))) ISNULL)) ORDER BY vt1.c1 DESC, ((vt1.c1)LIKE(vt1.c1)) COLLATE BINARY DESC, ABS(x'');
SELECT ALL MIN(vt1.c0) FROM vt1 WHERE ((((NOT (vt1.c0))) ISNULL)) ORDER BY vt1.c1 DESC, ((vt1.c1)LIKE(vt1.c1)) COLLATE BINARY DESC, ABS(x'');
SELECT COUNT(*) FROM vt1, v0 WHERE (CASE WHEN vt1.c0 THEN v0.c2 END COLLATE RTRIM COLLATE BINARY) ORDER BY ((((((((vt1.c1)OR(vt1.c0)))OR(((v0.c0) ISNULL))))AND(((v0.c2) NOTNULL))))OR(CASE 'Fa'  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN NULL WHEN vt1.c1 THEN v0.c0 WHEN vt1.c0 THEN vt1.c0 END)) DESC  NULLS LAST, ((((v0.c0)*(v0.c1))) ISNULL)  NULLS FIRST, CASE WHEN ((v0.c0) NOT BETWEEN (v0.c0) AND (vt1.c0)) THEN ((((vt1.c0)AND(0.3090078314562402)))AND(v0.c2)) ELSE ((v0.c1)<=(v0.c0)) END  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt1, v0 WHERE (((CASE WHEN vt1.c0 THEN v0.c2 END COLLATE RTRIM COLLATE BINARY)AND(((NULL) NOT BETWEEN (CASE WHEN v0.c2 THEN v0.c2 END) AND (UNLIKELY(v0.c2)))))) ORDER BY ((((((((vt1.c1)OR(vt1.c0)))OR(((v0.c0) ISNULL))))AND(((v0.c2) NOTNULL))))OR(CASE 'Fa'  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN NULL WHEN vt1.c1 THEN v0.c0 WHEN vt1.c0 THEN vt1.c0 END)) DESC  NULLS LAST, ((((v0.c0)*(v0.c1))) ISNULL)  NULLS FIRST, CASE WHEN ((v0.c0) NOT BETWEEN (v0.c0) AND (vt1.c0)) THEN ((((vt1.c0)AND(0.3090078314562402)))AND(v0.c2)) ELSE ((v0.c1)<=(v0.c0)) END  NULLS FIRST LIMIT 0x2;
SELECT COUNT(*) FROM v0, vt1 WHERE ('946408807') ORDER BY CASE CASE WHEN vt1.c1 THEN vt1.c0 END  WHEN SQLITE_COMPILEOPTION_GET(v0.c1) THEN (v0.c1 IN (vt1.c0)) END  NULLS FIRST, ((((((((((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1)))OR('-1844818550')))OR(((vt1.c0)GLOB(v0.c0)))))OR((((vt1.c0))=((v0.c2))))))OR(((v0.c0) BETWEEN (vt1.c0) AND (vt1.c1)))))OR(v0.c2 COLLATE BINARY)) DESC, CAST(vt1.c1 COLLATE RTRIM AS BLOB)  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0, vt1 WHERE ((('946408807')AND((((- (v0.c0))) NOT BETWEEN (((((((v0.c1)AND(v0.c1)))OR(v0.c0)))OR(v0.c2))) AND ((vt1.c1 IN ())))))) ORDER BY ((((vt1.c0) IS FALSE)) NOT BETWEEN ((~ (vt1.c0))) AND ((('') BETWEEN (vt1.c1) AND (vt1.c1)))) LIMIT 0x1;
SELECT * FROM v0 WHERE (STRFTIME((v0.c2 IN ()), TYPEOF(v0.c0), (((v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c1))))) ORDER BY ((CAST(v0.c1 AS REAL)) NOT BETWEEN (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) AND (CASE WHEN v0.c2 THEN x'34' WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END)), v0.c0;
SELECT * FROM v0 WHERE (STRFTIME((v0.c2 IN ()), TYPEOF(v0.c0), (((v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c1))))) ORDER BY ((CAST(v0.c1 AS REAL)) NOT BETWEEN (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) AND (CASE WHEN v0.c2 THEN x'34' WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END)), v0.c0 LIMIT 0;
SELECT * FROM v0 WHERE (STRFTIME((v0.c2 IN ()), TYPEOF(v0.c0), (((v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c1))))) ORDER BY ((CAST(v0.c1 AS REAL)) NOT BETWEEN (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) AND (CASE WHEN v0.c2 THEN x'34' WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END)), v0.c0;
SELECT * FROM v0 WHERE (STRFTIME((v0.c2 IN ()), TYPEOF(v0.c0), (((v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c1))))) ORDER BY ((CAST(v0.c1 AS REAL)) NOT BETWEEN (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) AND (CASE WHEN v0.c2 THEN x'34' WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END)), v0.c0 LIMIT 0;
SELECT MAX(v0.c1) FROM v0 WHERE ((- (v0.c1)) COLLATE RTRIM);
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((- (v0.c1)) COLLATE RTRIM) ORDER BY CASE CAST(v0.c1 AS NUMERIC)  WHEN ((NULL) NOTNULL) THEN (v0.c2 IN (0.7871624287572192)) WHEN (- (v0.c2)) THEN ((v0.c2)>>(v0.c2)) END DESC LIMIT 2;
SELECT ALL * FROM v0, vt1 WHERE (((LIKELIHOOD(DISTINCT v0.c0, v0.c0))<>((((v0.c1, '-1329855961', vt1.c0, v0.c1, vt1.c1)) NOT BETWEEN ((v0.c2, v0.c1, vt1.c1, v0.c2, vt1.c0)) AND ((v0.c0, vt1.c0, v0.c0, v0.c0, NULL)))))) ORDER BY (((((v0.c2)) NOT BETWEEN (('-1446504952')) AND ((v0.c0)))) ISNULL), ((((((((((((((((((vt1.c0)OR(vt1.c1)))OR(v0.c2)))OR(vt1.c0)))OR(v0.c2)))AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)))AND(CAST(v0.c0 AS NUMERIC))))AND((- (v0.c1)))) DESC  NULLS LAST;
SELECT ALL * FROM v0, vt1 WHERE (((LIKELIHOOD(DISTINCT v0.c0, v0.c0))<((((v0.c1, '-1329855961', vt1.c0, v0.c1, vt1.c1)) NOT BETWEEN ((v0.c2, v0.c1, vt1.c1, v0.c2, vt1.c0)) AND ((v0.c0, vt1.c0, v0.c0, v0.c0, NULL)))))) ORDER BY ((CAST(vt1.c0 AS BLOB)) BETWEEN (((vt1.c1)OR(vt1.c1))) AND ((((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))) ASC LIMIT 0x0;
SELECT ALL * FROM v0, vt1 WHERE (((LIKELIHOOD(DISTINCT v0.c0, v0.c0))<>((((v0.c1, '-1329855961', vt1.c0, v0.c1, vt1.c1)) NOT BETWEEN ((v0.c2, v0.c1, vt1.c1, v0.c2, vt1.c0)) AND ((v0.c0, vt1.c0, v0.c0, v0.c0, NULL)))))) ORDER BY (((((v0.c2)) NOT BETWEEN (('-1446504952')) AND ((v0.c0)))) ISNULL), ((((((((((((((((((vt1.c0)OR(vt1.c1)))OR(v0.c2)))OR(vt1.c0)))OR(v0.c2)))AND(v0.c0)))OR(v0.c2)))OR(vt1.c0)))AND(CAST(v0.c0 AS NUMERIC))))AND((- (v0.c1)))) DESC  NULLS LAST;
SELECT MIN(v0.c2) FROM v0 WHERE (0.558812568703904) ORDER BY ((~ (v0.c1)) IN (((v0.c2)IS(v0.c1))))  NULLS LAST, 0.7377653910754213  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0 WHERE (0.558812568703904) ORDER BY ((~ (v0.c1)) IN (((v0.c2)IS(v0.c1))))  NULLS LAST, 0.7377653910754213  NULLS FIRST;
SELECT * FROM v0 WHERE (((CASE WHEN v0.c2 THEN v0.c0 END) IS TRUE));
SELECT DISTINCT * FROM v0 WHERE (((((CASE WHEN v0.c2 THEN v0.c0 END) IS TRUE))AND(v0.c1))) ORDER BY ((v0.c2)||(v0.c2)) COLLATE BINARY  NULLS FIRST, (((v0.c1 IN (v0.c1, v0.c0))) NOTNULL) ASC  NULLS LAST, CAST(CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN '-1122952596' THEN v0.c2 END AS NUMERIC) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((((((v0.c1, v0.c1)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c2))))OR((((v0.c0, v0.c2, v0.c0))<>((v0.c0, v0.c0, v0.c0))))))AND((v0.c0 IN (v0.c1)))))AND(((v0.c0)GLOB(v0.c0))))) ORDER BY ((v0.c2)||(v0.c2)) COLLATE BINARY  NULLS FIRST, (((v0.c1 IN (v0.c1, v0.c0))) NOTNULL) ASC  NULLS LAST, CAST(CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN '-1122952596' THEN v0.c2 END AS NUMERIC) DESC  NULLS LAST LIMIT 0x0;
SELECT * FROM v0 WHERE (((CASE WHEN v0.c2 THEN v0.c0 END) IS TRUE));
SELECT DISTINCT * FROM v0 WHERE (((((CASE WHEN v0.c2 THEN v0.c0 END) IS TRUE))AND(v0.c1))) ORDER BY ((v0.c2)||(v0.c2)) COLLATE BINARY  NULLS FIRST, (((v0.c1 IN (v0.c1, v0.c0))) NOTNULL) ASC  NULLS LAST, CAST(CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN '-1122952596' THEN v0.c2 END AS NUMERIC) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((((((v0.c1, v0.c1)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c2, v0.c2))))OR((((v0.c0, v0.c2, v0.c0))<>((v0.c0, v0.c0, v0.c0))))))AND((v0.c0 IN (v0.c1)))))AND(((v0.c0)GLOB(v0.c0))))) ORDER BY ((v0.c2)||(v0.c2)) COLLATE BINARY  NULLS FIRST, (((v0.c1 IN (v0.c1, v0.c0))) NOTNULL) ASC  NULLS LAST, CAST(CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN '-1122952596' THEN v0.c2 END AS NUMERIC) DESC  NULLS LAST LIMIT 0x0;
SELECT ALL MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0))) NOT NULL)) ORDER BY vt1.c1  NULLS FIRST, ((((((vt1.c0 COLLATE NOCASE)AND(CAST(vt1.c0 AS BLOB))))AND(vt1.c0)))AND(((((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))AND('-1053949158')))) DESC;
SELECT MAX(vt1.c1) FROM vt1 WHERE (((((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0))) NOT NULL)) ORDER BY vt1.c1  NULLS FIRST, ((((((vt1.c0 COLLATE NOCASE)AND(CAST(vt1.c0 AS BLOB))))AND(vt1.c0)))AND(((((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))AND('-1053949158')))) DESC INTERSECT SELECT ALL MAX(vt1.c1) FROM vt1 WHERE ((((~ (-1287524755))) IS FALSE)) ORDER BY vt1.c1  NULLS FIRST, ((((((vt1.c0 COLLATE NOCASE)AND(CAST(vt1.c0 AS BLOB))))AND(vt1.c0)))AND(((((((vt1.c0)AND(vt1.c1)))OR(vt1.c0)))AND('-1053949158')))) DESC;
SELECT ALL MIN(v0.c1) FROM vt1, v0 WHERE ((((((v0.c2, v0.c2, vt1.c1, v0.c1))<>((v0.c0, v0.c2, vt1.c1, v0.c0))))/(v0.c1))) ORDER BY vt1.c0 ASC  NULLS LAST, (((vt1.c0 IN ())) NOT BETWEEN (((vt1.c0)<=(v0.c1))) AND ((v0.c1 IN ())))  NULLS LAST;
SELECT DISTINCT MIN(v0.c1) FROM vt1, v0 WHERE ((((((v0.c2, v0.c2, vt1.c1, v0.c1))>((v0.c0, v0.c2, vt1.c1, v0.c0))))/(v0.c1))) ORDER BY CAST('345514040' AS NUMERIC) ASC, CASE vt1.c1 COLLATE BINARY  WHEN TRIM(vt1.c0) THEN ((vt1.c0) NOT NULL) WHEN '-90674061' THEN ((vt1.c0)OR(v0.c1)) WHEN (((v0.c2, v0.c0, vt1.c0, v0.c0))>((v0.c0, vt1.c0, vt1.c1, v0.c2))) THEN (('')AND(v0.c1)) END DESC;
SELECT ALL * FROM vt1, v0 WHERE (SQLITE_SOURCE_ID());
SELECT DISTINCT * FROM vt1, v0 WHERE (SQLITE_SOURCE_ID()) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((((('縎k!eAMD')AND(UNLIKELY(DISTINCT v0.c1))))OR(((v0.c1)>(x'7af6d2')))))OR(((vt1.c0) NOT BETWEEN (v0.c1) AND (v0.c0))))) LIMIT 1;
SELECT ALL * FROM vt1, v0 WHERE (SQLITE_SOURCE_ID());
SELECT DISTINCT * FROM vt1, v0 WHERE (SQLITE_SOURCE_ID()) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt1, v0 WHERE ((((((('縎k!eAMD')AND(UNLIKELY(DISTINCT v0.c1))))OR(((v0.c1)>(x'7af6d2')))))OR(((vt1.c0) NOT BETWEEN (v0.c1) AND (v0.c0))))) LIMIT 1;
SELECT MAX(v0.c2) FROM vt1 NATURAL JOIN v0 WHERE ((((NOT (v0.c2)))IS(0x1e0c1636))) ORDER BY ((((v0.c0) NOTNULL))AND((v0.c2 IN (vt1.c0))))  NULLS FIRST, ((((vt1.c1) NOTNULL)) BETWEEN (((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0))) AND (CASE NULL  WHEN v0.c0 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN vt1.c0 THEN vt1.c0 WHEN v0.c2 THEN '' END))  NULLS FIRST, (CASE WHEN v0.c0 THEN v0.c1 END IN ());
SELECT DISTINCT MAX(v0.c2) FROM vt1 NATURAL JOIN v0 WHERE ((((NOT (v0.c2)))IS(0x1e0c1636))) ORDER BY ((NULL) IS FALSE) ASC INTERSECT SELECT DISTINCT MAX(v0.c2) FROM vt1 NATURAL JOIN v0 WHERE ((((v0.c1, v0.c1, v0.c1, vt1.c0)) BETWEEN (((((x'', vt1.c0)) BETWEEN ((v0.c0, '-1990704281')) AND ((vt1.c1, vt1.c0))), (((v0.c0, v0.c0))<((0.25505234718503556, vt1.c1))), (~ (v0.c2)), (((v0.c0))>((0Xffffffffec038590))))) AND ((vt1.c0 COLLATE RTRIM, (((vt1.c1))<((vt1.c0))), ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)), ((v0.c1)IS NOT('-610614943')))))) ORDER BY ((NULL) IS FALSE) ASC;
SELECT * FROM vt1 WHERE ((((vt1.c1 IN ()))GLOB(((vt1.c0)<>(vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c1 IN ()))GLOB(((vt1.c0)<(vt1.c1))))) ORDER BY CAST((- (vt1.c1)) AS INTEGER) DESC  NULLS LAST LIMIT 0x1;
SELECT * FROM vt1 WHERE ((((vt1.c1 IN ()))GLOB(((vt1.c0)<>(vt1.c1)))));
SELECT ALL * FROM vt1 WHERE ((((vt1.c1 IN ()))GLOB(((vt1.c0)<(vt1.c1))))) ORDER BY CAST((- (vt1.c1)) AS INTEGER) DESC  NULLS LAST LIMIT 0x1;

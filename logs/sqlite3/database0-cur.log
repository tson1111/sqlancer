-- Time: 2021/05/19 01:09:31
-- Database: database0
-- Database version: 3.34.0
-- seed value: 1621357771643
PRAGMA cache_size = 50000; -- 1ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
CREATE VIRTUAL TABLE vt0 USING fts4(c0 UNINDEXED, matchinfo=fts3); -- 0ms;
CREATE VIRTUAL TABLE rt1 USING rtree(c0, c1, c2, c3, +c4 INT , +c5 TEXT , +c6 TEXT ); -- 1ms;
CREATE VIRTUAL TABLE vt2 USING fts5(c0 UNINDEXED, c1, tokenize = "unicode61 tokenchars '%d뼃yp'"); -- 1ms;
ANALYZE; -- 1ms;
INSERT INTO vt2(vt2, rank) VALUES('usermerge', 13); -- 1ms;
COMMIT; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '355'); -- 0ms;
INSERT INTO vt2(vt2, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
END TRANSACTION; -- 0ms;
PRAGMA checkpoint_fullfsync = true; -- 0ms;
UPDATE OR FAIL vt2 SET (c0)=(NULL); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
ANALYZE; -- 1ms;
INSERT INTO vt0(vt0) VALUES('merge=-1006256381,7');
; -- 0ms;
INSERT INTO vt2(vt2) VALUES('automerge=11'); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 8); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt2(vt2) VALUES('rebuild'); -- 0ms;
REINDEX  vt2; -- 0ms;
CREATE TEMP VIEW v0(c0, c1, c2, c3) AS SELECT DISTINCT vt2.c1, COUNT((((vt0.c0, vt2.c1, vt2.c1))<((vt2.c0, vt2.c0, vt2.c1)))) OVER (), 0.12893410339563705, IFNULL(DISTINCT ((vt2.c1)<=(vt0.c0)), CAST(vt2.c1 AS BLOB)) FROM vt2, vt0 WHERE ((((CAST(0.12893410339563705 AS NUMERIC)))>(((~ (0Xffffffffc405bf03)))))); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 3); -- 1ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT INTO vt2(vt2) VALUES('optimize'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
UPDATE OR IGNORE vt0 SET (c0)=(x''); -- 0ms;
INSERT OR REPLACE INTO vt0 VALUES (x'134b9a'), (0.12893410339563705), (-1.006256381E9), (NULL); -- 1ms;
BEGIN  TRANSACTION; -- 0ms;
COMMIT TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt2(c0) VALUES ('D5L'), (0Xffffffffc405bf03), (x'f7'); -- 1ms;
ANALYZE main; -- 1ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
INSERT OR FAIL INTO vt0 VALUES (NULL), (x'2e'), (NULL); -- 0ms;
END TRANSACTION; -- 0ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 5); -- 1ms;
INSERT INTO vt2(vt2, rank) VALUES('pgsz', '40831'); -- 0ms;
ANALYZE v0; -- 0ms;
INSERT INTO vt0(vt0) VALUES('merge=-1935470654,6');
; -- 0ms;
INSERT INTO vt2(vt2) VALUES('merge=-1935470654,7');
; -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
UPDATE OR IGNORE vt2 SET c1 = '1839189666', c1 = -1.006256381E9, c1 = x'57'; -- 0ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
PRAGMA recursive_triggers = false; -- 0ms;
PRAGMA main.incremental_vacuum; -- 0ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
PRAGMA temp.cell_size_check; -- 0ms;
PRAGMA stats; -- 0ms;
INSERT OR ROLLBACK INTO vt0 VALUES (''); -- 0ms;
PRAGMA automatic_index = true; -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 1ms;
INSERT OR IGNORE INTO vt2(c1, c0) VALUES ('1839189666', NULL), (NULL, '708305761'); -- 1ms;
COMMIT; -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '14375'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 0ms;
REINDEX  vt2; -- 0ms;
INSERT OR FAIL INTO vt0(c0) VALUES (x'd2'); -- 0ms;
INSERT OR IGNORE INTO vt2(c1, c0) VALUES (-1.006256381E9, x'fe531e'), (-941041463, NULL), ('', '708305761'); -- 1ms;
INSERT INTO vt2(vt2, rank) VALUES('crisismerge', 393297413); -- 1ms;
PRAGMA cache_size = 4474737307793778597; -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
BEGIN  TRANSACTION; -- 0ms;
ANALYZE; -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt0 SET (c0)=(NULL) WHERE ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))LIKE(CAST(vt0.c0 AS TEXT))); -- 0ms;
INSERT INTO vt2(vt2, rank) VALUES('merge', 477587929);
; -- 0ms;
INSERT OR IGNORE INTO vt2(c0) VALUES (NULL), (NULL), (''); -- 0ms;
INSERT INTO vt2(vt2, rank) VALUES('pgsz', '31298'); -- 5ms;
COMMIT TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt2(c0) VALUES (x''); -- 1ms;
INSERT INTO vt2(vt2, rank) VALUES('usermerge', 8); -- 1ms;
INSERT OR ABORT INTO vt2 VALUES (x'e2751a', '&E&'), (x'77', x''), (0Xff51a7e, NULL); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt2(vt2) VALUES('merge=1291339797,2');
; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 937903423); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '32329'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
ANALYZE; -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt0(c0) VALUES ('i'), (NULL), (0.8371558124005088); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt2(vt2, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 1ms;
INSERT INTO vt2(vt2, rank) VALUES('pgsz', '29508'); -- 1ms;
INSERT OR IGNORE INTO vt2(c1, c0) VALUES (x'71c435', x'70f5d56d'), ('1702837040', NULL); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
ANALYZE v0; -- 0ms;
COMMIT TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT * FROM v0 INNER JOIN vt2 ON COALESCE(DISTINCT CAST(v0.c0 AS NUMERIC), ((v0.c1) IS FALSE)) CROSS JOIN vt0 ON ((v0.c3)<<(0.7807732688761823)) WHERE ((((v0.c0 IN ()))<=((vt2.c1 IN (v0.c0, vt2.c1)))));
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON COALESCE(DISTINCT CAST(v0.c0 AS NUMERIC), ((v0.c1) IS FALSE)) CROSS JOIN vt0 ON ((v0.c3)<<(0.7807732688761823)) WHERE ((((((v0.c0 IN ()))<=((vt2.c1 IN (v0.c0, vt2.c1)))))AND(TRIM(DISTINCT LIKELIHOOD(v0.c1, v0.c3))))) ORDER BY json_quote(((((v0.c1)AND(v0.c2)))AND(vt2.c1))) DESC  NULLS FIRST, ((v0.c2)<=(v0.c3)) COLLATE NOCASE ASC INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON COALESCE(DISTINCT CAST(v0.c0 AS NUMERIC), ((v0.c1) IS FALSE)) CROSS JOIN vt0 ON ((v0.c3)<<(0.7807732688761823)) WHERE (v0.c3) ORDER BY json_quote(((((v0.c1)AND(v0.c2)))AND(vt2.c1))) DESC  NULLS FIRST, ((v0.c2)<=(v0.c3)) COLLATE NOCASE ASC;
SELECT * FROM v0 INNER JOIN vt2 ON COALESCE(DISTINCT CAST(v0.c0 AS NUMERIC), ((v0.c1) IS FALSE)) CROSS JOIN vt0 ON ((v0.c3)<<(0.7807732688761823)) WHERE ((((v0.c0 IN ()))<=((vt2.c1 IN (v0.c0, vt2.c1)))));
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON COALESCE(DISTINCT CAST(v0.c0 AS NUMERIC), ((v0.c1) IS FALSE)) CROSS JOIN vt0 ON ((v0.c3)<<(0.7807732688761823)) WHERE ((((((v0.c0 IN ()))<=((vt2.c1 IN (v0.c0, vt2.c1)))))AND(TRIM(DISTINCT LIKELIHOOD(v0.c1, v0.c3))))) ORDER BY json_quote(((((v0.c1)AND(v0.c2)))AND(vt2.c1))) DESC  NULLS FIRST, ((v0.c2)<=(v0.c3)) COLLATE NOCASE ASC INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON COALESCE(DISTINCT CAST(v0.c0 AS NUMERIC), ((v0.c1) IS FALSE)) CROSS JOIN vt0 ON ((v0.c3)<<(0.7807732688761823)) WHERE (v0.c3) ORDER BY json_quote(((((v0.c1)AND(v0.c2)))AND(vt2.c1))) DESC  NULLS FIRST, ((v0.c2)<=(v0.c3)) COLLATE NOCASE ASC;
SELECT ALL MIN(v0.c0) FROM vt2, v0 WHERE (((vt2.c0) NOT BETWEEN (NULL) AND (CASE WHEN v0.c3 THEN vt2.c0 WHEN v0.c1 THEN vt2.c1 WHEN v0.c1 THEN v0.c2 WHEN 'D[]' THEN v0.c1 ELSE v0.c1 END))) ORDER BY ((CAST(v0.c1 AS NUMERIC))<(CASE WHEN vt2.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 END)) DESC  NULLS LAST, CASE WHEN ((v0.c1)/(vt2.c1)) THEN json_object(v0.c3, 0.39469908384747054, v0.c3, v0.c2) ELSE ((v0.c0) BETWEEN (v0.c0) AND (v0.c2)) END ASC, CAST(((v0.c2) NOT BETWEEN (vt2.c0) AND (vt2.c0)) AS REAL) DESC;
SELECT DISTINCT MIN(v0.c0) FROM vt2, v0 WHERE (((vt2.c0) NOT BETWEEN (NULL) AND (CASE WHEN v0.c3 THEN vt2.c0 WHEN v0.c1 THEN vt2.c1 WHEN v0.c1 THEN v0.c2 WHEN 'D[]' THEN v0.c1 ELSE v0.c1 END))) ORDER BY ((CAST(v0.c1 AS NUMERIC))<(CASE WHEN vt2.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 END)) DESC  NULLS LAST, CASE WHEN ((v0.c1)/(vt2.c1)) THEN json_object(v0.c3, 0.39469908384747054, v0.c3, v0.c2) ELSE ((v0.c0) BETWEEN (v0.c0) AND (v0.c2)) END ASC, CAST(((v0.c2) NOT BETWEEN (vt2.c0) AND (vt2.c0)) AS REAL) DESC LIMIT 0x0;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c1) IS FALSE))AND(vt2.c0)));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c1) IS FALSE))AND(vt2.c0))) ORDER BY ((((json_extract('e㤥s4B', x'36', vt0.c0))OR((0x6a7af38f IN (vt2.c1, vt0.c0, vt0.c0)))))OR(vt2.c0 COLLATE RTRIM)) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((CAST(vt2.c1 AS BLOB)) NOTNULL)) ORDER BY ((((json_extract('e㤥s4B', x'36', vt0.c0))OR((1786442639 IN (vt2.c1, vt0.c0, vt0.c0)))))OR(vt2.c0 COLLATE RTRIM)) ASC LIMIT 0;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c1) IS FALSE))AND(vt2.c0)));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c1) IS FALSE))AND(vt2.c0))) ORDER BY ((((json_extract('e㤥s4B', x'36', vt0.c0))OR((0x6a7af38f IN (vt2.c1, vt0.c0, vt0.c0)))))OR(vt2.c0 COLLATE RTRIM)) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((CAST(vt2.c1 AS BLOB)) NOTNULL)) ORDER BY ((((json_extract('e㤥s4B', x'36', vt0.c0))OR((1786442639 IN (vt2.c1, vt0.c0, vt0.c0)))))OR(vt2.c0 COLLATE RTRIM)) ASC LIMIT 0;
SELECT COUNT(*) FROM vt2 INNER JOIN v0 ON ((v0.c1 COLLATE NOCASE) NOTNULL) WHERE ((((((v0.c2, vt2.c0)) NOT BETWEEN ((v0.c3, v0.c2)) AND ((v0.c3, v0.c2)))) NOT BETWEEN (CASE WHEN x'' THEN 'Xm&' END) AND (CAST(vt2.c0 AS REAL)))) ORDER BY ((vt2.c0)LIKE(CAST(vt2.c0 AS BLOB)))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2 INNER JOIN v0 ON ((v0.c1 COLLATE NOCASE) NOTNULL) WHERE ((((((((v0.c2, vt2.c0)) NOT BETWEEN ((v0.c3, v0.c2)) AND ((v0.c3, v0.c2)))) NOT BETWEEN (CASE WHEN x'' THEN 'Xm&' END) AND (CAST(vt2.c0 AS REAL))))AND(((((((((((((vt2.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c2)))OR(vt2.c1)))OR(vt2.c1)))%(vt2.c1 COLLATE NOCASE))))) ORDER BY ((vt2.c0)LIKE(CAST(vt2.c0 AS BLOB)))  NULLS LAST;
SELECT * FROM vt2 WHERE (((SQLITE_SOURCE_ID())=(((vt2.c0) IS TRUE))));
SELECT * FROM vt2 WHERE (((((SQLITE_SOURCE_ID())=(((vt2.c0) IS TRUE))))AND(((((((((((vt2.c0)AND(x'f8')))OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c1)))LIKE(((vt2.c1)IS(vt2.c1))))))) LIMIT 1;
SELECT * FROM vt2 WHERE (((SQLITE_SOURCE_ID())=(((vt2.c0) IS TRUE))));
SELECT * FROM vt2 WHERE (((((SQLITE_SOURCE_ID())=(((vt2.c0) IS TRUE))))AND(((((((((((vt2.c0)AND(x'f8')))OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c1)))LIKE(((vt2.c1)IS(vt2.c1))))))) LIMIT 1;
SELECT MIN(v0.c0) FROM vt2, v0 INNER JOIN vt0 ON x'' WHERE ((((v0.c0 IN ())) NOT NULL)) ORDER BY CAST('-787073840' AS INTEGER)  NULLS FIRST;
SELECT DISTINCT MIN(v0.c0) FROM vt2, v0 INNER JOIN vt0 ON x'' WHERE ((((((v0.c0 IN ())) NOT NULL))AND((((((vt0.c0) NOT NULL)))>=((((v0.c1)IS(vt0.c0)))))))) ORDER BY CAST('-787073840' AS INTEGER)  NULLS FIRST;
SELECT MIN(vt2.c1) FROM vt2, vt0 WHERE ((- (x'cd'))) ORDER BY (vt2.c0 IN ()), (((vt2.c1)GLOB(vt2.c0)) IN ((((vt0.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c1)))));
SELECT MIN(vt2.c1) FROM vt2, vt0 WHERE ((((- (x'cd')))AND(''))) ORDER BY (vt2.c0 IN ()), (((vt2.c1)GLOB(vt2.c0)) IN ((((vt0.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c1))))) LIMIT 0X2;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE ((- (LOWER(vt0.c0)))) ORDER BY 0xffffffffddc46084 ASC, (((CAST(vt0.c0 AS BLOB), TYPEOF(DISTINCT v0.c1), CASE vt0.c0  WHEN v0.c1 THEN '-574332796' END))<((((vt0.c0)LIKE(v0.c0)), ((v0.c3)>(v0.c3)), ('-1935470654' IN ())))) ASC;
SELECT COUNT(*) FROM v0, vt0 WHERE ((- (LOWER(vt0.c0)))) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT BETWEEN (((v0.c2)/(v0.c1))) AND (((((((1839189666)OR(v0.c0)))OR(v0.c0)))OR(v0.c2)))) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT COUNT(*) FROM v0, vt0 WHERE (json_valid(rtreenode(v0.c2, v0.c3))) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT BETWEEN (((v0.c2)/(v0.c1))) AND (((((((1839189666)OR(v0.c0)))OR(v0.c0)))OR(v0.c2)))) DESC  NULLS LAST LIMIT 0x0;
SELECT ALL MIN(v0.c1) FROM vt2, v0, vt0 WHERE (v0.c0) ORDER BY (((((vt2.c1)<<(v0.c0)), v0.c0, CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c3 WHEN vt0.c0 THEN v0.c0 WHEN vt2.c1 THEN v0.c0 ELSE vt0.c0 END))!=(((- (v0.c2)), json_type(v0.c1), vt2.c0)))  NULLS FIRST, ((((((vt2.c1)AND(vt2.c1)))OR(v0.c3)))=(v0.c2 COLLATE RTRIM));
SELECT MIN(v0.c1) FROM vt2, v0, vt0 WHERE (v0.c0) ORDER BY ((x'')&(((v0.c2)GLOB(v0.c2))));
SELECT ALL COUNT(*) FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((((vt2.c1, vt2.c0, vt0.c0, v0.c1, vt2.c0))>((v0.c1, v0.c0, v0.c0, v0.c2, vt2.c1))))GLOB(((vt2.c0)>(vt2.c0)))) WHERE (NULL);
SELECT ALL COUNT(*) FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((((vt2.c1, vt2.c0, vt0.c0, v0.c1, vt2.c0))>((v0.c1, v0.c0, v0.c0, v0.c2, vt2.c1))))GLOB(((vt2.c0)>(vt2.c0)))) WHERE (NULL) LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((((vt2.c1, vt2.c0, vt0.c0, v0.c1, vt2.c0))>((v0.c1, v0.c0, v0.c0, v0.c2, vt2.c1))))GLOB(((vt2.c0)>(vt2.c0)))) WHERE (CASE WHEN (v0.c2 IN ()) THEN (vt2.c1 IN (x'')) WHEN (((v0.c0))!=((vt2.c1))) THEN CAST(vt0.c0 AS NUMERIC) WHEN v0.c1 THEN (((v0.c2)) BETWEEN ((v0.c3)) AND ((vt2.c0))) ELSE (NOT (v0.c3)) END) LIMIT 1;
SELECT ALL * FROM vt2, vt0 CROSS JOIN v0 ON (((NOT (vt2.c1)))>=(((vt2.c1)>(v0.c3)))) WHERE ((((vt2.c0, v0.c3)) BETWEEN ((vt2.c0 COLLATE NOCASE, vt0.c0 COLLATE RTRIM)) AND ((((v0.c2)<=(vt0.c0)), v0.c0 COLLATE NOCASE)))) ORDER BY CASE (((vt0.c0, v0.c1, v0.c2, x'bf', v0.c0)) BETWEEN ((v0.c1, v0.c3, vt2.c1, v0.c3, vt2.c0)) AND ((v0.c2, NULL, v0.c2, v0.c3, vt2.c0)))  WHEN ((NULL) NOT NULL) THEN NULLIF(DISTINCT v0.c1, v0.c1) WHEN ((vt0.c0) NOT NULL) THEN ((v0.c3) IS TRUE) ELSE ((((((((vt2.c1)AND(v0.c3)))OR(v0.c2)))OR(v0.c0)))OR(v0.c2)) END ASC, TRIM(DISTINCT ((vt2.c1) NOT BETWEEN (v0.c3) AND (vt2.c0))) DESC;
SELECT * FROM vt2, vt0 CROSS JOIN v0 ON (((NOT (vt2.c1)))>=(((vt2.c1)>(v0.c3)))) WHERE ((((vt2.c0, v0.c3)) BETWEEN ((vt2.c0 COLLATE NOCASE, vt0.c0 COLLATE RTRIM)) AND ((((v0.c2)<=(vt0.c0)), v0.c0 COLLATE NOCASE)))) ORDER BY CASE (((vt0.c0, v0.c1, v0.c2, x'bf', v0.c0)) BETWEEN ((v0.c1, v0.c3, vt2.c1, v0.c3, vt2.c0)) AND ((v0.c2, NULL, v0.c2, v0.c3, vt2.c0)))  WHEN ((NULL) NOT NULL) THEN NULLIF(DISTINCT v0.c1, v0.c1) WHEN ((vt0.c0) NOT NULL) THEN ((v0.c3) IS TRUE) ELSE ((((((((vt2.c1)AND(v0.c3)))OR(v0.c2)))OR(v0.c0)))OR(v0.c2)) END ASC, TRIM(DISTINCT ((vt2.c1) NOT BETWEEN (v0.c3) AND (vt2.c0))) DESC INTERSECT SELECT * FROM vt2, vt0 NOT INDEXED CROSS JOIN v0 ON (((NOT (vt2.c1)))>=(((vt2.c1)>(v0.c3)))) WHERE (((((((((((((((((((v0.c0)OR(vt0.c0)))AND(v0.c0)))OR(v0.c3)))AND(vt0.c0)))AND(vt2.c0)))AND(v0.c1)))OR(v0.c2 COLLATE NOCASE)))AND(((vt0.c0) ISNULL))))AND(CAST(vt0.c0 AS BLOB)))) ORDER BY CASE (((vt0.c0, v0.c1, v0.c2, x'bf', v0.c0)) BETWEEN ((v0.c1, v0.c3, vt2.c1, v0.c3, vt2.c0)) AND ((v0.c2, NULL, v0.c2, v0.c3, vt2.c0)))  WHEN ((NULL) NOT NULL) THEN NULLIF(DISTINCT v0.c1, v0.c1) WHEN ((vt0.c0) NOT NULL) THEN ((v0.c3) IS TRUE) ELSE ((((((((vt2.c1)AND(v0.c3)))OR(v0.c2)))OR(v0.c0)))OR(v0.c2)) END ASC, TRIM(DISTINCT ((vt2.c1) NOT BETWEEN (v0.c3) AND (vt2.c0))) DESC;
SELECT ALL * FROM vt2, vt0 CROSS JOIN v0 ON (((NOT (vt2.c1)))>=(((vt2.c1)>(v0.c3)))) WHERE ((((vt2.c0, v0.c3)) BETWEEN ((vt2.c0 COLLATE NOCASE, vt0.c0 COLLATE RTRIM)) AND ((((v0.c2)<=(vt0.c0)), v0.c0 COLLATE NOCASE)))) ORDER BY CASE (((vt0.c0, v0.c1, v0.c2, x'bf', v0.c0)) BETWEEN ((v0.c1, v0.c3, vt2.c1, v0.c3, vt2.c0)) AND ((v0.c2, NULL, v0.c2, v0.c3, vt2.c0)))  WHEN ((NULL) NOT NULL) THEN NULLIF(DISTINCT v0.c1, v0.c1) WHEN ((vt0.c0) NOT NULL) THEN ((v0.c3) IS TRUE) ELSE ((((((((vt2.c1)AND(v0.c3)))OR(v0.c2)))OR(v0.c0)))OR(v0.c2)) END ASC, TRIM(DISTINCT ((vt2.c1) NOT BETWEEN (v0.c3) AND (vt2.c0))) DESC;
SELECT * FROM vt2, vt0 CROSS JOIN v0 ON (((NOT (vt2.c1)))>=(((vt2.c1)>(v0.c3)))) WHERE ((((vt2.c0, v0.c3)) BETWEEN ((vt2.c0 COLLATE NOCASE, vt0.c0 COLLATE RTRIM)) AND ((((v0.c2)<=(vt0.c0)), v0.c0 COLLATE NOCASE)))) ORDER BY CASE (((vt0.c0, v0.c1, v0.c2, x'bf', v0.c0)) BETWEEN ((v0.c1, v0.c3, vt2.c1, v0.c3, vt2.c0)) AND ((v0.c2, NULL, v0.c2, v0.c3, vt2.c0)))  WHEN ((NULL) NOT NULL) THEN NULLIF(DISTINCT v0.c1, v0.c1) WHEN ((vt0.c0) NOT NULL) THEN ((v0.c3) IS TRUE) ELSE ((((((((vt2.c1)AND(v0.c3)))OR(v0.c2)))OR(v0.c0)))OR(v0.c2)) END ASC, TRIM(DISTINCT ((vt2.c1) NOT BETWEEN (v0.c3) AND (vt2.c0))) DESC INTERSECT SELECT * FROM vt2, vt0 NOT INDEXED CROSS JOIN v0 ON (((NOT (vt2.c1)))>=(((vt2.c1)>(v0.c3)))) WHERE (((((((((((((((((((v0.c0)OR(vt0.c0)))AND(v0.c0)))OR(v0.c3)))AND(vt0.c0)))AND(vt2.c0)))AND(v0.c1)))OR(v0.c2 COLLATE NOCASE)))AND(((vt0.c0) ISNULL))))AND(CAST(vt0.c0 AS BLOB)))) ORDER BY CASE (((vt0.c0, v0.c1, v0.c2, x'bf', v0.c0)) BETWEEN ((v0.c1, v0.c3, vt2.c1, v0.c3, vt2.c0)) AND ((v0.c2, NULL, v0.c2, v0.c3, vt2.c0)))  WHEN ((NULL) NOT NULL) THEN NULLIF(DISTINCT v0.c1, v0.c1) WHEN ((vt0.c0) NOT NULL) THEN ((v0.c3) IS TRUE) ELSE ((((((((vt2.c1)AND(v0.c3)))OR(v0.c2)))OR(v0.c0)))OR(v0.c2)) END ASC, TRIM(DISTINCT ((vt2.c1) NOT BETWEEN (v0.c3) AND (vt2.c0))) DESC;
SELECT ALL * FROM v0 WHERE (((json_valid(v0.c3))LIKE((+ (v0.c1)))));
SELECT * FROM v0 WHERE (((json_valid(v0.c3))LIKE((+ (v0.c1))))) LIMIT 2 INTERSECT SELECT * FROM v0 WHERE (((((((((((v0.c0 COLLATE NOCASE)AND(((v0.c3)>>(v0.c1)))))AND(((v0.c0)!=(v0.c3)))))AND(v0.c0)))AND(((v0.c3) ISNULL))))OR(v0.c1 COLLATE NOCASE))) LIMIT 0X2;
SELECT ALL * FROM v0 WHERE (((json_valid(v0.c3))LIKE((+ (v0.c1)))));
SELECT * FROM v0 WHERE (((json_valid(v0.c3))LIKE((+ (v0.c1))))) LIMIT 2 INTERSECT SELECT * FROM v0 WHERE (((((((((((v0.c0 COLLATE NOCASE)AND(((v0.c3)>>(v0.c1)))))AND(((v0.c0)!=(v0.c3)))))AND(v0.c0)))AND(((v0.c3) ISNULL))))OR(v0.c1 COLLATE NOCASE))) LIMIT 0X2;
SELECT * FROM v0, vt0 WHERE (((v0.c2)OR(v0.c1)) COLLATE RTRIM COLLATE RTRIM);
SELECT ALL * FROM v0, vt0 WHERE (((v0.c2)OR(v0.c1)) COLLATE RTRIM COLLATE RTRIM) LIMIT 0X3;
SELECT * FROM v0, vt0 WHERE (((v0.c2)OR(v0.c1)) COLLATE RTRIM COLLATE RTRIM);
SELECT ALL * FROM v0, vt0 WHERE (((v0.c2)OR(v0.c1)) COLLATE RTRIM COLLATE RTRIM) LIMIT 0X3;
SELECT * FROM v0, vt2 WHERE ((+ ((v0.c2 IN (vt2.c1)))));
SELECT DISTINCT * FROM v0, vt2 WHERE ((+ ((v0.c2 IN (vt2.c1))))) ORDER BY LTRIM(((((((v0.c0)AND(-9.41041463E8)))AND(v0.c1)))AND(v0.c3)), UNLIKELY('868741710'))  NULLS LAST LIMIT 0x0;
SELECT * FROM v0, vt2 WHERE ((+ ((v0.c2 IN (vt2.c1)))));
SELECT DISTINCT * FROM v0, vt2 WHERE ((+ ((v0.c2 IN (vt2.c1))))) ORDER BY LTRIM(((((((v0.c0)AND(-9.41041463E8)))AND(v0.c1)))AND(v0.c3)), UNLIKELY('868741710'))  NULLS LAST LIMIT 0x0;
SELECT * FROM v0 WHERE (((json_insert(v0.c3, v0.c2, v0.c3, v0.c2))LIKE(LIKELY(v0.c2)))) ORDER BY ((v0.c2 COLLATE NOCASE) NOT BETWEEN (((v0.c3)||(v0.c3))) AND (CAST(v0.c3 AS REAL)));
SELECT DISTINCT * FROM v0 WHERE (((json_insert(v0.c3, v0.c2, v0.c3, v0.c2))LIKE(LIKELY(v0.c2)))) ORDER BY CASE WHEN ((v0.c2) IS FALSE) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c0 WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END END  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0 WHERE (((json_insert(v0.c3, v0.c2, v0.c3, v0.c2))LIKE(LIKELY(v0.c2)))) ORDER BY ((v0.c2 COLLATE NOCASE) NOT BETWEEN (((v0.c3)||(v0.c3))) AND (CAST(v0.c3 AS REAL)));
SELECT DISTINCT * FROM v0 WHERE (((json_insert(v0.c3, v0.c2, v0.c3, v0.c2))LIKE(LIKELY(v0.c2)))) ORDER BY CASE WHEN ((v0.c2) IS FALSE) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c0 WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END END  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0 WHERE (((v0.c0)OR(v0.c3)) COLLATE RTRIM) ORDER BY (('0.12893410339563705')<(v0.c3 COLLATE NOCASE))  NULLS LAST, ((((((((((v0.c2)AND(v0.c2)))OR(x'ae8bf93d8c6b')))OR(v0.c2)))OR(v0.c0)))OR(v0.c1)) COLLATE NOCASE  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (((((v0.c0)OR(v0.c3)) COLLATE RTRIM)AND((((v0.c3 IN ()))<(((v0.c0)||(v0.c2))))))) ORDER BY NULL ASC INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c1)%(v0.c0)) COLLATE BINARY) ORDER BY NULL ASC;
SELECT * FROM v0 WHERE (((v0.c0)OR(v0.c3)) COLLATE RTRIM) ORDER BY (('0.12893410339563705')<(v0.c3 COLLATE NOCASE))  NULLS LAST, ((((((((((v0.c2)AND(v0.c2)))OR(x'ae8bf93d8c6b')))OR(v0.c2)))OR(v0.c0)))OR(v0.c1)) COLLATE NOCASE  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (((((v0.c0)OR(v0.c3)) COLLATE RTRIM)AND((((v0.c3 IN ()))<(((v0.c0)||(v0.c2))))))) ORDER BY NULL ASC INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c1)%(v0.c0)) COLLATE BINARY) ORDER BY NULL ASC;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (CASE WHEN CAST(vt2.c0 AS REAL) THEN (vt0.c0 IN ()) WHEN ((x'') NOT NULL) THEN CAST(v0.c2 AS TEXT) WHEN ((0.2920352001684853) NOT NULL) THEN HEX(DISTINCT vt0.c0) WHEN ((vt2.c1)>(v0.c1)) THEN (vt0.c0 IN (v0.c2, vt2.c0)) ELSE ((((vt2.c1)OR(vt2.c0)))AND(v0.c1)) END);
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (((CASE WHEN CAST(vt2.c0 AS REAL) THEN (vt0.c0 IN ()) WHEN ((x'') NOT NULL) THEN CAST(v0.c2 AS TEXT) WHEN ((0.2920352001684853) NOT NULL) THEN HEX(DISTINCT vt0.c0) WHEN ((vt2.c1)>(v0.c1)) THEN (vt0.c0 IN (v0.c2, vt2.c0)) ELSE ((((vt2.c1)OR(vt2.c0)))AND(v0.c1)) END)AND(CAST(((v0.c0)=(vt2.c0)) AS NUMERIC))));
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON LIKELIHOOD(0.39469908384747054, (vt2.c0 IN (vt2.c0, vt0.c0))) WHERE (0.7807732688761823);
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON LIKELIHOOD(0.39469908384747054, (vt2.c0 IN (vt2.c0, vt0.c0))) WHERE (0.7807732688761823) ORDER BY (((CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END, ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0)), ((vt0.c0) BETWEEN (vt2.c0) AND (vt0.c0)), CASE vt0.c0  WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c0 END))<((SQLITE_COMPILEOPTION_USED(vt2.c1), CASE WHEN vt2.c1 THEN vt2.c1 WHEN '890457025' THEN vt0.c0 END, CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 ELSE 't' END, vt2.c0 COLLATE NOCASE))), (CASE WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END IN ())  NULLS FIRST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c1 END)%(((vt2.c1)<>(vt0.c0)))) ASC;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON LIKELIHOOD(0.39469908384747054, (vt2.c0 IN (vt2.c0, vt0.c0))) WHERE (0.7807732688761823);
SELECT * FROM v0, vt0 WHERE (CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN v0.c3 WHEN CAST(v0.c2 AS REAL) THEN CAST(vt0.c0 AS TEXT) WHEN (((v0.c3)) BETWEEN ((v0.c2)) AND ((vt0.c0))) THEN ((NULL) NOTNULL) WHEN v0.c3 THEN ((vt0.c0)AND(v0.c3)) END);
SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN v0.c3 WHEN CAST(v0.c2 AS REAL) THEN CAST(vt0.c0 AS TEXT) WHEN (((v0.c3)) BETWEEN ((v0.c2)) AND ((vt0.c0))) THEN ((NULL) NOTNULL) WHEN v0.c3 THEN ((vt0.c0)AND(v0.c3)) END) INTERSECT SELECT * FROM v0, vt0 WHERE (((~ (v0.c2)) IN ()));
SELECT * FROM v0, vt0 WHERE (CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN v0.c3 WHEN CAST(v0.c2 AS REAL) THEN CAST(vt0.c0 AS TEXT) WHEN (((v0.c3)) BETWEEN ((v0.c2)) AND ((vt0.c0))) THEN ((NULL) NOTNULL) WHEN v0.c3 THEN ((vt0.c0)AND(v0.c3)) END);
SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN v0.c3 WHEN CAST(v0.c2 AS REAL) THEN CAST(vt0.c0 AS TEXT) WHEN (((v0.c3)) BETWEEN ((v0.c2)) AND ((vt0.c0))) THEN ((NULL) NOTNULL) WHEN v0.c3 THEN ((vt0.c0)AND(v0.c3)) END) INTERSECT SELECT * FROM v0, vt0 WHERE (((~ (v0.c2)) IN ()));
SELECT ALL * FROM vt2 WHERE ((((((vt2.c0))>((vt2.c0))))<(UNLIKELY(vt2.c1))));
SELECT DISTINCT * FROM vt2 WHERE ((((((((vt2.c0))>((vt2.c0))))<(UNLIKELY(vt2.c1))))AND(((((((vt2.c0)==(vt2.c1)))OR(CASE WHEN vt2.c1 THEN 0.5136878169807817 WHEN x'99' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)))OR(((214129716)AND(vt2.c0))))))) ORDER BY ((x'')LIKE(((((((((((((vt2.c0)OR(NULL)))AND(0.5535893660128063)))AND(NULL)))AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1)))), ((((vt2.c1) ISNULL)) BETWEEN ((vt2.c1 IN (vt2.c1, vt2.c0))) AND (0.39469908384747054)) DESC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ((((((vt2.c0))>((vt2.c0))))<(UNLIKELY(vt2.c1))));
SELECT DISTINCT * FROM vt2 WHERE ((((((((vt2.c0))>((vt2.c0))))<(UNLIKELY(vt2.c1))))AND(((((((vt2.c0)==(vt2.c1)))OR(CASE WHEN vt2.c1 THEN 0.5136878169807817 WHEN x'99' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)))OR(((214129716)AND(vt2.c0))))))) ORDER BY ((x'')LIKE(((((((((((((vt2.c0)OR(NULL)))AND(0.5535893660128063)))AND(NULL)))AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1)))), ((((vt2.c1) ISNULL)) BETWEEN ((vt2.c1 IN (vt2.c1, vt2.c0))) AND (0.39469908384747054)) DESC  NULLS LAST;
SELECT * FROM vt2, vt0, v0 WHERE ((((vt2.c1) IS TRUE) IN (((vt2.c1)&(vt0.c0))))) ORDER BY (((v0.c3)<<(vt2.c0)) IN ())  NULLS LAST;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((((vt2.c1) IS TRUE) IN (((vt2.c1)&(vt0.c0)))))AND(((((((v0.c2)AND(v0.c3)))OR(vt2.c0)))>(CAST(vt2.c0 AS REAL)))))) ORDER BY (((v0.c3)<<(vt2.c0)) IN ())  NULLS LAST LIMIT 0X0;
SELECT * FROM vt2, vt0, v0 WHERE ((((vt2.c1) IS TRUE) IN (((vt2.c1)&(vt0.c0))))) ORDER BY (((v0.c3)<<(vt2.c0)) IN ())  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((- (vt0.c0)))>(vt0.c0))) ORDER BY (((- (vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (vt0.c0)), CAST(CAST('' AS BLOB) AS REAL) ASC;
SELECT COUNT(*) FROM vt0 WHERE ((((((- (vt0.c0)))>(vt0.c0)))AND(vt0.c0))) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))GLOB(vt0.c0))  NULLS LAST, CAST(((vt0.c0)<=(vt0.c0)) AS NUMERIC) INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c0) NOT NULL)) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))GLOB(vt0.c0))  NULLS LAST, CAST(((vt0.c0)<=(vt0.c0)) AS NUMERIC);
SELECT ALL * FROM v0 WHERE ((((((v0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c3, v0.c0))))OR((((v0.c3, v0.c1))>=((v0.c0, v0.c3)))))) ORDER BY IFNULL(DISTINCT ((v0.c3) IS TRUE), (v0.c1 IN ()))  NULLS LAST, ((v0.c3) NOT BETWEEN (((v0.c0)GLOB(v0.c1))) AND (((v0.c2) BETWEEN (v0.c3) AND (v0.c3))))  NULLS FIRST, (+ (CAST(0.672882029177375 AS INTEGER))) ASC;
SELECT ALL * FROM v0 WHERE ((((((v0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c3, v0.c0))))OR((((v0.c3, v0.c1))=((v0.c0, v0.c3)))))) ORDER BY (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)) IN ()) DESC  NULLS FIRST, CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN v0.c0 ELSE v0.c2 END COLLATE RTRIM ASC, v0.c3 ASC INTERSECT SELECT * FROM v0 WHERE ((- (v0.c0 COLLATE NOCASE))) ORDER BY (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)) IN ()) DESC  NULLS FIRST, CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN v0.c0 ELSE v0.c2 END COLLATE RTRIM ASC, v0.c3 ASC;
SELECT ALL * FROM v0 WHERE ((((((v0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c3, v0.c0))))OR((((v0.c3, v0.c1))>=((v0.c0, v0.c3)))))) ORDER BY IFNULL(DISTINCT ((v0.c3) IS TRUE), (v0.c1 IN ()))  NULLS LAST, ((v0.c3) NOT BETWEEN (((v0.c0)GLOB(v0.c1))) AND (((v0.c2) BETWEEN (v0.c3) AND (v0.c3))))  NULLS FIRST, (+ (CAST(0.672882029177375 AS INTEGER))) ASC;
SELECT ALL * FROM v0 WHERE ((((((v0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c3, v0.c0))))OR((((v0.c3, v0.c1))=((v0.c0, v0.c3)))))) ORDER BY (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)) IN ()) DESC  NULLS FIRST, CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN v0.c0 ELSE v0.c2 END COLLATE RTRIM ASC, v0.c3 ASC INTERSECT SELECT * FROM v0 WHERE ((- (v0.c0 COLLATE NOCASE))) ORDER BY (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)) IN ()) DESC  NULLS FIRST, CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN v0.c0 ELSE v0.c2 END COLLATE RTRIM ASC, v0.c3 ASC;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((v0.c3)/(((v0.c1) BETWEEN (vt0.c0) AND (v0.c3))))) ORDER BY LTRIM(((((((v0.c0)OR(vt2.c1)))OR(NULL)))AND(v0.c3)));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((v0.c3)/(((v0.c1) BETWEEN (vt0.c0) AND (v0.c3)))))AND(CAST(x'' AS REAL)))) ORDER BY (((vt2.c0 IN (v0.c3, v0.c2)))IS(((vt2.c1) BETWEEN (vt2.c0) AND ('')))) ASC, ((((v0.c0)GLOB(vt2.c1)))/(CASE vt2.c0  WHEN v0.c2 THEN v0.c0 END))  NULLS FIRST;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((v0.c3)/(((v0.c1) BETWEEN (vt0.c0) AND (v0.c3))))) ORDER BY LTRIM(((((((v0.c0)OR(vt2.c1)))OR(NULL)))AND(v0.c3)));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((v0.c3)/(((v0.c1) BETWEEN (vt0.c0) AND (v0.c3)))))AND(CAST(x'' AS REAL)))) ORDER BY (((vt2.c0 IN (v0.c3, v0.c2)))IS(((vt2.c1) BETWEEN (vt2.c0) AND ('')))) ASC, ((((v0.c0)GLOB(vt2.c1)))/(CASE vt2.c0  WHEN v0.c2 THEN v0.c0 END))  NULLS FIRST;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON CASE SQLITE_SOURCE_ID()  WHEN ((vt2.c0) ISNULL) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END WHERE (((((((((((vt2.c1) ISNULL))AND(((((((((((vt0.c0)AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))AND(NULL)))AND(vt2.c0)))))OR(CAST(x'' AS NUMERIC))))AND(CASE WHEN vt2.c1 THEN vt2.c1 END)))AND((((vt2.c1, vt0.c0))<((vt2.c1, vt0.c0))))));
SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN vt2 ON CASE SQLITE_SOURCE_ID()  WHEN ((vt2.c0) ISNULL) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END WHERE (((((((((((((vt2.c1) ISNULL))AND(((((((((((vt0.c0)AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))AND(NULL)))AND(vt2.c0)))))OR(CAST(x'' AS NUMERIC))))AND(CASE WHEN vt2.c1 THEN vt2.c1 END)))AND((((vt2.c1, vt0.c0))<((vt2.c1, vt0.c0))))))AND((+ (((vt0.c0) ISNULL)))))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN vt2 ON CASE SQLITE_SOURCE_ID()  WHEN ((vt2.c0) ISNULL) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END WHERE ((((vt2.c0 IN (vt2.c0))) BETWEEN ((+ (vt2.c1))) AND (TYPEOF(DISTINCT vt2.c1)))) LIMIT 1;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON CASE SQLITE_SOURCE_ID()  WHEN ((vt2.c0) ISNULL) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END WHERE (((((((((((vt2.c1) ISNULL))AND(((((((((((vt0.c0)AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))AND(NULL)))AND(vt2.c0)))))OR(CAST(x'' AS NUMERIC))))AND(CASE WHEN vt2.c1 THEN vt2.c1 END)))AND((((vt2.c1, vt0.c0))<((vt2.c1, vt0.c0))))));
SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN vt2 ON CASE SQLITE_SOURCE_ID()  WHEN ((vt2.c0) ISNULL) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END WHERE (((((((((((((vt2.c1) ISNULL))AND(((((((((((vt0.c0)AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))AND(NULL)))AND(vt2.c0)))))OR(CAST(x'' AS NUMERIC))))AND(CASE WHEN vt2.c1 THEN vt2.c1 END)))AND((((vt2.c1, vt0.c0))<((vt2.c1, vt0.c0))))))AND((+ (((vt0.c0) ISNULL)))))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN vt2 ON CASE SQLITE_SOURCE_ID()  WHEN ((vt2.c0) ISNULL) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END WHERE ((((vt2.c0 IN (vt2.c0))) BETWEEN ((+ (vt2.c1))) AND (TYPEOF(DISTINCT vt2.c1)))) LIMIT 1;
SELECT ALL MAX(v0.c0) FROM v0, vt0, vt2 WHERE ((((TRIM(DISTINCT v0.c1, v0.c1), ((((v0.c3)AND(v0.c2)))AND(vt2.c1))))<>((CAST(2108053427 AS TEXT), ((0xffffffffdd636e58) NOT BETWEEN (v0.c1) AND (v0.c1))))));
SELECT MAX(v0.c0) FROM v0, vt0, vt2 WHERE ((((TRIM(DISTINCT v0.c1, v0.c1), ((((v0.c3)AND(v0.c2)))AND(vt2.c1))))<((CAST(0X7da657b3 AS TEXT), ((-580686248) NOT BETWEEN (v0.c1) AND (v0.c1)))))) ORDER BY ((CASE WHEN vt2.c0 THEN v0.c2 ELSE v0.c1 END) BETWEEN (v0.c1) AND ((((v0.c0)) NOT BETWEEN ((vt2.c0)) AND ((v0.c3))))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT MAX(v0.c0) FROM v0, vt0, vt2 WHERE ((((vt2.c1 IN (vt0.c0))) NOT NULL)) ORDER BY ((CASE WHEN vt2.c0 THEN v0.c2 ELSE v0.c1 END) BETWEEN (v0.c1) AND ((((v0.c0)) NOT BETWEEN ((vt2.c0)) AND ((v0.c3))))) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CAST((x'aa' IN (vt2.c0, v0.c2)) AS NUMERIC)) ORDER BY ((('-580686248', 0.5071679303625796, (((v0.c3, v0.c3, v0.c3, v0.c3, vt2.c0))!=((v0.c0, v0.c0, vt2.c1, vt2.c0, v0.c2))), load_extension(vt0.c0)))<((NULL, CASE vt2.c1  WHEN v0.c1 THEN v0.c3 WHEN 0.26499007313964207 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN vt0.c0 END, (~ (vt0.c0)), 0.2913902935901703)))  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CAST((x'aa' IN (vt2.c0, v0.c2)) AS NUMERIC)) ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN v0.c2 WHEN vt0.c0 THEN v0.c1 WHEN vt0.c0 THEN '-551752042' END) BETWEEN (((v0.c2)!=(v0.c0))) AND (vt2.c1 COLLATE NOCASE))  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (vt0.c0) ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN v0.c2 WHEN vt0.c0 THEN v0.c1 WHEN vt0.c0 THEN '-551752042' END) BETWEEN (((v0.c2)!=(v0.c0))) AND (vt2.c1 COLLATE NOCASE))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CAST((x'aa' IN (vt2.c0, v0.c2)) AS NUMERIC)) ORDER BY ((('-580686248', 0.5071679303625796, (((v0.c3, v0.c3, v0.c3, v0.c3, vt2.c0))!=((v0.c0, v0.c0, vt2.c1, vt2.c0, v0.c2))), load_extension(vt0.c0)))<((NULL, CASE vt2.c1  WHEN v0.c1 THEN v0.c3 WHEN 0.26499007313964207 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN vt0.c0 END, (~ (vt0.c0)), 0.2913902935901703)))  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CAST((x'aa' IN (vt2.c0, v0.c2)) AS NUMERIC)) ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN v0.c2 WHEN vt0.c0 THEN v0.c1 WHEN vt0.c0 THEN '-551752042' END) BETWEEN (((v0.c2)!=(v0.c0))) AND (vt2.c1 COLLATE NOCASE))  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (vt0.c0) ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN v0.c2 WHEN vt0.c0 THEN v0.c1 WHEN vt0.c0 THEN '-551752042' END) BETWEEN (((v0.c2)!=(v0.c0))) AND (vt2.c1 COLLATE NOCASE))  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM v0, vt2 WHERE ((((- (vt2.c0)))>((v0.c2 IN (NULL, v0.c0))))) ORDER BY ((((((CASE v0.c0  WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 ELSE vt2.c1 END)AND(((((((((((((v0.c2)OR(vt2.c1)))AND(vt2.c1)))OR(v0.c1)))OR(vt2.c1)))OR(v0.c0)))OR(v0.c2)))))AND((((vt2.c1, vt2.c1))>((v0.c1, v0.c3))))))AND(HEX(DISTINCT v0.c3)))  NULLS LAST, ((((vt2.c0) NOT NULL)) NOTNULL)  NULLS FIRST, ((((((v0.c3)||(v0.c1)))OR(vt2.c0 COLLATE NOCASE)))OR(json(v0.c3))) DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0, vt2 WHERE ((((- (vt2.c0)))>((v0.c2 IN (NULL, v0.c0))))) ORDER BY CASE 0.8810662676021138  WHEN ((vt2.c1) NOTNULL) THEN ((v0.c1) IS FALSE) WHEN '868741710' THEN (((v0.c2, vt2.c0))<((v0.c1, v0.c2))) END ASC;
SELECT ALL MAX(v0.c0) FROM v0, vt2 WHERE (CAST((((v0.c0, v0.c2, '-1726882884', vt2.c1))<((v0.c0, v0.c3, '526554451', v0.c1))) AS NUMERIC));
SELECT ALL MAX(v0.c0) FROM v0, vt2 WHERE (CAST((((v0.c0, v0.c2, '-1726882884', vt2.c1))<((v0.c0, v0.c3, '526554451', v0.c1))) AS NUMERIC)) ORDER BY CAST(v0.c2 AS TEXT) DESC  NULLS FIRST, (x'855d4a' COLLATE NOCASE IN ()) DESC, ((~ (0X6a7af38f)) IN ())  NULLS FIRST LIMIT 1;
SELECT * FROM vt0, vt2, v0 WHERE (((((TYPEOF(DISTINCT -1468862807))OR((((vt0.c0, vt2.c0))>((v0.c1, vt0.c0))))))AND(vt2.c0 COLLATE RTRIM))) ORDER BY '';
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((TYPEOF(DISTINCT 0Xffffffffa872eea9))OR((((vt0.c0, vt2.c0))>((v0.c1, vt0.c0))))))AND(vt2.c0 COLLATE RTRIM))) ORDER BY '' LIMIT 0x0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN (NOT (vt0.c0)) THEN ((v0.c3)GLOB(vt0.c0)) END) ORDER BY '' LIMIT 0x0;
SELECT * FROM vt0, vt2, v0 WHERE (((((TYPEOF(DISTINCT -1468862807))OR((((vt0.c0, vt2.c0))>((v0.c1, vt0.c0))))))AND(vt2.c0 COLLATE RTRIM))) ORDER BY '';
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((TYPEOF(DISTINCT 0Xffffffffa872eea9))OR((((vt0.c0, vt2.c0))>((v0.c1, vt0.c0))))))AND(vt2.c0 COLLATE RTRIM))) ORDER BY '' LIMIT 0x0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN (NOT (vt0.c0)) THEN ((v0.c3)GLOB(vt0.c0)) END) ORDER BY '' LIMIT 0x0;
SELECT MIN(v0.c1) FROM vt0 CROSS JOIN v0 ON json_array_length(vt2.c0) CROSS JOIN vt2 ON LENGTH(vt0.c0) WHERE (CASE (((vt2.c1, vt2.c1, v0.c3)) BETWEEN ((v0.c2, vt0.c0, vt2.c1)) AND ((vt2.c0, v0.c0, v0.c0)))  WHEN v0.c0 COLLATE RTRIM THEN LIKELIHOOD(v0.c3, vt0.c0) WHEN 384613651 THEN (((v0.c3, v0.c0)) BETWEEN ((vt2.c1, v0.c1)) AND ((vt2.c0, vt0.c0))) END);
SELECT DISTINCT MIN(v0.c1) FROM vt0 CROSS JOIN v0 ON json_array_length(vt2.c0) CROSS JOIN vt2 ON LENGTH(vt0.c0) WHERE (((CASE (((vt2.c1, vt2.c1, v0.c3)) BETWEEN ((v0.c2, vt0.c0, vt2.c1)) AND ((vt2.c0, v0.c0, v0.c0)))  WHEN v0.c0 COLLATE RTRIM THEN LIKELIHOOD(v0.c3, vt0.c0) WHEN 384613651 THEN (((v0.c3, v0.c0)) BETWEEN ((vt2.c1, v0.c1)) AND ((vt2.c0, vt0.c0))) END)AND(-5.51752042E8))) ORDER BY (~ (CASE WHEN v0.c3 THEN v0.c1 END)) ASC  NULLS LAST INTERSECT SELECT DISTINCT MIN(v0.c1) FROM vt0 CROSS JOIN v0 ON json_array_length(vt2.c0) CROSS JOIN vt2 ON LENGTH(vt0.c0) WHERE ((+ (((vt2.c1)AND(vt2.c0))))) ORDER BY (~ (CASE WHEN v0.c3 THEN v0.c1 END)) ASC  NULLS LAST;
SELECT MIN(v0.c2) FROM vt2, v0 WHERE ((((vt2.c1) NOT NULL) IN ((((v0.c0)) BETWEEN ((NULL)) AND ((-1.726882884E9))))));
SELECT DISTINCT MIN(v0.c2) FROM vt2, v0 WHERE ((((((vt2.c1) NOT NULL) IN ((((v0.c0)) BETWEEN ((NULL)) AND ((-1.726882884E9))))))AND(((TOTAL_CHANGES())>=(((v0.c1)|(NULL))))))) ORDER BY (((v0.c2)) BETWEEN ((CAST(v0.c3 AS REAL))) AND (((~ (vt2.c0))))) DESC, ((ABS(DISTINCT '᩾'))<<(((v0.c1)>(v0.c2))))  NULLS LAST, ((((v0.c0) NOT NULL)) NOT BETWEEN ('33514151') AND (((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c0)))) DESC LIMIT 2 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt2, v0 WHERE (v0.c3) ORDER BY (((v0.c2)) BETWEEN ((CAST(v0.c3 AS REAL))) AND (((~ (vt2.c0))))) DESC, ((ABS(DISTINCT '᩾'))<<(((v0.c1)>(v0.c2))))  NULLS LAST, ((((v0.c0) NOT NULL)) NOT BETWEEN ('33514151') AND (((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c0)))) DESC LIMIT 0X2;
SELECT ALL * FROM v0, vt2 INNER JOIN vt0 ON UNICODE(((vt2.c1)+(vt0.c0))) WHERE (x'43fa07');
SELECT ALL * FROM v0, vt2 INNER JOIN vt0 ON UNICODE(((vt2.c1)+(vt0.c0))) WHERE (((x'43fa07')AND((((vt2.c1)&(vt2.c1)) IN (v0.c0 COLLATE BINARY))))) INTERSECT SELECT ALL * FROM v0, vt2 INNER JOIN vt0 ON UNICODE(((vt2.c1)+(vt0.c0))) WHERE (((CASE WHEN 0.2642123024574031 THEN v0.c2 WHEN x'' THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 END) IS TRUE));
SELECT ALL * FROM v0, vt2 INNER JOIN vt0 ON UNICODE(((vt2.c1)+(vt0.c0))) WHERE (x'43fa07');
SELECT ALL * FROM v0, vt2 INNER JOIN vt0 ON UNICODE(((vt2.c1)+(vt0.c0))) WHERE (((x'43fa07')AND((((vt2.c1)&(vt2.c1)) IN (v0.c0 COLLATE BINARY))))) INTERSECT SELECT ALL * FROM v0, vt2 INNER JOIN vt0 ON UNICODE(((vt2.c1)+(vt0.c0))) WHERE (((CASE WHEN 0.2642123024574031 THEN v0.c2 WHEN x'' THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 END) IS TRUE));
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE (v0.c2) ORDER BY CAST(((vt0.c0) ISNULL) AS REAL);
SELECT DISTINCT COUNT(*) FROM v0, vt2, vt0 WHERE (v0.c2) ORDER BY (((((v0.c3)>=(v0.c3)), v0.c3, ((v0.c0)<<(vt2.c1)), (- (vt2.c1))))<((((((((((((((v0.c1)OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))OR(v0.c1)), ((vt2.c1) IS FALSE), ((v0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)), json_quote('}Zl?')))) ASC  NULLS FIRST, (((0.44312673298235083)!=(vt2.c1)) IN ())  NULLS LAST;
SELECT ALL MIN(v0.c0) FROM vt2 LEFT OUTER JOIN v0 ON (((NOT (vt2.c1)))+(CAST(v0.c2 AS TEXT))) INNER JOIN vt0 ON ((CAST(vt2.c1 AS BLOB))IS NOT(((vt0.c0) NOT NULL))) WHERE (((CAST(vt0.c0 AS NUMERIC)) BETWEEN (CAST(NULL AS TEXT)) AND (CASE WHEN vt0.c0 THEN v0.c2 END))) ORDER BY (- (((((((((v0.c1)OR('576918381')))AND(v0.c1)))OR(vt0.c0)))OR(vt0.c0)))) DESC, (NULL IN ()) ASC  NULLS LAST;
SELECT MIN(v0.c0) FROM vt2 LEFT OUTER JOIN v0 ON (((NOT (vt2.c1)))+(CAST(v0.c2 AS TEXT))) INNER JOIN vt0 ON ((CAST(vt2.c1 AS BLOB))IS NOT(((vt0.c0) NOT NULL))) WHERE (((((CAST(vt0.c0 AS NUMERIC)) BETWEEN (CAST(NULL AS TEXT)) AND (CASE WHEN vt0.c0 THEN v0.c2 END)))AND((+ (((v0.c0)-('-2133440203'))))))) ORDER BY (- (((((((((v0.c1)OR('576918381')))AND(v0.c1)))OR(vt0.c0)))OR(vt0.c0)))) DESC, (NULL IN ()) ASC  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL MIN(v0.c0) FROM vt2 LEFT OUTER JOIN v0 ON (((NOT (vt2.c1)))+(CAST(v0.c2 AS TEXT))) INNER JOIN vt0 ON ((CAST(vt2.c1 AS BLOB))IS NOT(((vt0.c0) NOT NULL))) WHERE (v0.c2) ORDER BY (- (((((((((v0.c1)OR('576918381')))AND(v0.c1)))OR(vt0.c0)))OR(vt0.c0)))) DESC, (NULL IN ()) ASC  NULLS LAST LIMIT 1;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (-7.8707384E8) ORDER BY JULIANDAY((((vt2.c1, vt2.c0, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, 0.4481881142625076)) AND ((vt2.c1, vt2.c0, vt2.c0))), (NOT (vt2.c0)), ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) DESC, UNLIKELY(vt2.c0) COLLATE BINARY;
SELECT MIN(vt2.c0) FROM vt2 WHERE (((-7.8707384E8)AND(((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0))) NOT NULL)))) ORDER BY JULIANDAY((((vt2.c1, vt2.c0, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, 0.4481881142625076)) AND ((vt2.c1, vt2.c0, vt2.c0))), (NOT (vt2.c0)), ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) DESC, UNLIKELY(vt2.c0) COLLATE BINARY LIMIT 0x0;
SELECT ALL * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (((((v0.c1)OR(vt2.c0)))OR(vt2.c0)) IN (((vt0.c0)!=(vt0.c0)))) WHERE (((((vt0.c0)<=(vt2.c1))) IS FALSE));
SELECT DISTINCT * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (((((v0.c1)OR(vt2.c0)))OR(vt2.c0)) IN (((vt0.c0)!=(vt0.c0)))) WHERE (((((((vt0.c0)<=(vt2.c1))) IS FALSE))AND((((0.45939357815304416)%(v0.c2)) IN ('477587929'))))) ORDER BY ((((((((((vt0.c0 COLLATE NOCASE)AND(((((((((((v0.c2)OR(vt0.c0)))OR(NULL)))OR(v0.c0)))OR(v0.c0)))OR(v0.c1)))))AND(TOTAL_CHANGES())))AND((((vt0.c0, vt2.c1, v0.c0, v0.c3, v0.c2, v0.c1))<=((v0.c0, v0.c0, v0.c3, vt0.c0, vt2.c1, v0.c3))))))OR((((v0.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c1))))))AND(GLOB(x'', vt0.c0))) ASC, ((vt2.c0 COLLATE RTRIM) BETWEEN ((vt2.c1 IN (vt2.c1))) AND ((vt2.c0 IN (v0.c3))))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (((((v0.c1)OR(vt2.c0)))OR(vt2.c0)) IN (((vt0.c0)!=(vt0.c0)))) WHERE (((((vt0.c0)<=(vt2.c1))) IS FALSE));
SELECT DISTINCT * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (((((v0.c1)OR(vt2.c0)))OR(vt2.c0)) IN (((vt0.c0)!=(vt0.c0)))) WHERE (((((((vt0.c0)<=(vt2.c1))) IS FALSE))AND((((0.45939357815304416)%(v0.c2)) IN ('477587929'))))) ORDER BY ((((((((((vt0.c0 COLLATE NOCASE)AND(((((((((((v0.c2)OR(vt0.c0)))OR(NULL)))OR(v0.c0)))OR(v0.c0)))OR(v0.c1)))))AND(TOTAL_CHANGES())))AND((((vt0.c0, vt2.c1, v0.c0, v0.c3, v0.c2, v0.c1))<=((v0.c0, v0.c0, v0.c3, vt0.c0, vt2.c1, v0.c3))))))OR((((v0.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c1))))))AND(GLOB(x'', vt0.c0))) ASC, ((vt2.c0 COLLATE RTRIM) BETWEEN ((vt2.c1 IN (vt2.c1))) AND ((vt2.c0 IN (v0.c3))))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0 WHERE (CAST(CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN x'ce' THEN v0.c3 WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END AS REAL)) ORDER BY CASE CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN 1.291339797E9 ELSE v0.c0 END  WHEN ((v0.c2)LIKE(0.5162465773222236)) THEN v0.c1 COLLATE BINARY END DESC;
SELECT DISTINCT * FROM v0 WHERE (((CAST(CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN x'ce' THEN v0.c3 WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END AS REAL))AND(((CAST(-1e500 AS INTEGER))+(CAST(v0.c0 AS BLOB)))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) IS TRUE)  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (CAST(CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN x'ce' THEN v0.c3 WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END AS REAL)) ORDER BY CASE CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN 1.291339797E9 ELSE v0.c0 END  WHEN ((v0.c2)LIKE(0.5162465773222236)) THEN v0.c1 COLLATE BINARY END DESC;
SELECT DISTINCT * FROM v0 WHERE (((CAST(CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN x'ce' THEN v0.c3 WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END AS REAL))AND(((CAST(-1e500 AS INTEGER))+(CAST(v0.c0 AS BLOB)))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))) IS TRUE)  NULLS FIRST LIMIT 0x1;
SELECT * FROM v0, vt0 CROSS JOIN vt2 ON ('}Zl?' IN ()) WHERE (((((v0.c2)||(vt2.c0)))<<(COALESCE(vt2.c0, v0.c2)))) ORDER BY ((ABS('V67
,*vz?')) NOTNULL) ASC  NULLS FIRST, ((((v0.c0)>=(v0.c2)))IS(((((((((v0.c0)OR(v0.c2)))AND(v0.c2)))AND(vt2.c1)))AND(v0.c0))));
SELECT * FROM v0, vt0 CROSS JOIN vt2 ON ('}Zl?' IN ()) WHERE (((((v0.c2)||(vt2.c0)))<<(COALESCE(vt2.c0, v0.c2)))) ORDER BY v0.c2 ASC  NULLS LAST, ((((v0.c1) NOT NULL))=(v0.c1))  NULLS FIRST INTERSECT SELECT ALL * FROM v0, vt0 CROSS JOIN vt2 ON ('}Zl?' IN ()) WHERE ((((v0.c0, v0.c3)) BETWEEN ((vt2.c1, '᩾g)kI#㬰-]')) AND ((vt0.c0, v0.c2))) COLLATE RTRIM) ORDER BY v0.c2 ASC  NULLS LAST, ((((v0.c1) NOT NULL))=(v0.c1))  NULLS FIRST;
SELECT * FROM v0, vt0 CROSS JOIN vt2 ON ('}Zl?' IN ()) WHERE (((((v0.c2)||(vt2.c0)))<<(COALESCE(vt2.c0, v0.c2)))) ORDER BY ((ABS('V67
,*vz?')) NOTNULL) ASC  NULLS FIRST, ((((v0.c0)>=(v0.c2)))IS(((((((((v0.c0)OR(v0.c2)))AND(v0.c2)))AND(vt2.c1)))AND(v0.c0))));
SELECT * FROM v0, vt0 CROSS JOIN vt2 ON ('}Zl?' IN ()) WHERE (((((v0.c2)||(vt2.c0)))<<(COALESCE(vt2.c0, v0.c2)))) ORDER BY v0.c2 ASC  NULLS LAST, ((((v0.c1) NOT NULL))=(v0.c1))  NULLS FIRST INTERSECT SELECT ALL * FROM v0, vt0 CROSS JOIN vt2 ON ('}Zl?' IN ()) WHERE ((((v0.c0, v0.c3)) BETWEEN ((vt2.c1, '᩾g)kI#㬰-]')) AND ((vt0.c0, v0.c2))) COLLATE RTRIM) ORDER BY v0.c2 ASC  NULLS LAST, ((((v0.c1) NOT NULL))=(v0.c1))  NULLS FIRST;
SELECT ALL MIN(vt2.c1) FROM v0, vt0, vt2 WHERE (((((((v0.c3)AND(v0.c1)))OR(vt2.c0)))AND(vt2.c1)) COLLATE BINARY) ORDER BY (v0.c2 IN ()) ASC;
SELECT MIN(vt2.c1) FROM v0, vt0, vt2 WHERE (((((((v0.c3)AND(v0.c1)))OR(vt2.c0)))AND(vt2.c1)) COLLATE BINARY) ORDER BY ((CAST(vt0.c0 AS TEXT))-(CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN x'' THEN vt0.c0 END)) LIMIT 0x1 INTERSECT SELECT MIN(vt2.c1) FROM v0, vt0, vt2 WHERE ((- (CASE vt2.c0  WHEN 'ḃ3QL' THEN v0.c2 ELSE v0.c2 END))) ORDER BY ((CAST(vt0.c0 AS TEXT))-(CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN x'' THEN vt0.c0 END)) LIMIT 1;
SELECT * FROM vt2, vt0, v0 WHERE (NULL) ORDER BY CASE (('^h') NOT NULL)  WHEN ((0.2848535192601853) NOT NULL) THEN (+ (v0.c1)) WHEN vt0.c0 THEN (((vt2.c1)) BETWEEN ((vt2.c1)) AND ((vt0.c0))) END ASC, ((json_extract(vt2.c0, x'8c8b76', v0.c2, v0.c2, vt2.c1, v0.c2, v0.c0)) BETWEEN (((vt2.c1)/(x'1e'))) AND (TYPEOF(DISTINCT v0.c0))) DESC  NULLS LAST;
SELECT * FROM vt2, vt0, v0 WHERE (((NULL)AND(IFNULL(0.6566838058279596, vt2.c1)))) ORDER BY CASE ((vt2.c0) NOTNULL)  WHEN CASE v0.c2  WHEN vt2.c1 THEN vt2.c1 ELSE v0.c2 END THEN ((v0.c3) NOT BETWEEN (v0.c3) AND (0.9688666200389816)) WHEN (('-567218797')!=(vt2.c0)) THEN ((vt2.c0)&(vt2.c1)) END LIMIT 0 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (v0.c0) ORDER BY CASE ((vt2.c0) NOTNULL)  WHEN CASE v0.c2  WHEN vt2.c1 THEN vt2.c1 ELSE v0.c2 END THEN ((v0.c3) NOT BETWEEN (v0.c3) AND (0.9688666200389816)) WHEN (('-567218797')<>(vt2.c0)) THEN ((vt2.c0)&(vt2.c1)) END LIMIT 0X0;
SELECT * FROM vt2, vt0, v0 WHERE (NULL) ORDER BY CASE (('^h') NOT NULL)  WHEN ((0.2848535192601853) NOT NULL) THEN (+ (v0.c1)) WHEN vt0.c0 THEN (((vt2.c1)) BETWEEN ((vt2.c1)) AND ((vt0.c0))) END ASC, ((json_extract(vt2.c0, x'8c8b76', v0.c2, v0.c2, vt2.c1, v0.c2, v0.c0)) BETWEEN (((vt2.c1)/(x'1e'))) AND (TYPEOF(DISTINCT v0.c0))) DESC  NULLS LAST;
SELECT * FROM vt2, vt0, v0 WHERE (((NULL)AND(IFNULL(0.6566838058279596, vt2.c1)))) ORDER BY CASE ((vt2.c0) NOTNULL)  WHEN CASE v0.c2  WHEN vt2.c1 THEN vt2.c1 ELSE v0.c2 END THEN ((v0.c3) NOT BETWEEN (v0.c3) AND (0.9688666200389816)) WHEN (('-567218797')!=(vt2.c0)) THEN ((vt2.c0)&(vt2.c1)) END LIMIT 0 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (v0.c0) ORDER BY CASE ((vt2.c0) NOTNULL)  WHEN CASE v0.c2  WHEN vt2.c1 THEN vt2.c1 ELSE v0.c2 END THEN ((v0.c3) NOT BETWEEN (v0.c3) AND (0.9688666200389816)) WHEN (('-567218797')<>(vt2.c0)) THEN ((vt2.c0)&(vt2.c1)) END LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE ((((vt2.c1, vt2.c1)) NOT BETWEEN ((NULL, ((vt2.c1) ISNULL))) AND (((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c0))), ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1))))));
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c1, vt2.c1)) NOT BETWEEN ((NULL, ((vt2.c1) ISNULL))) AND (((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c0))), ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1))))))AND(((vt2.c1)<<(vt2.c0)) COLLATE NOCASE))) ORDER BY (~ (((vt2.c1)<=(vt2.c0)))) ASC, vt2.c1  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ((((vt2.c1, vt2.c1)) NOT BETWEEN ((NULL, ((vt2.c1) ISNULL))) AND (((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c0))), ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1))))));
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c1, vt2.c1)) NOT BETWEEN ((NULL, ((vt2.c1) ISNULL))) AND (((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c0))), ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1))))))AND(((vt2.c1)<<(vt2.c0)) COLLATE NOCASE))) ORDER BY (~ (((vt2.c1)<=(vt2.c0)))) ASC, vt2.c1  NULLS LAST;
SELECT * FROM vt0 CROSS JOIN vt2 ON (~ (((vt2.c0)>(vt2.c1)))) CROSS JOIN v0 ON CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN vt0.c0 THEN vt2.c1 END THEN CAST(v0.c0 AS INTEGER) WHEN v0.c1 COLLATE BINARY THEN ((-1417774340)<(0.08634741939000601)) ELSE ((v0.c0) ISNULL) END WHERE (((v0.c1) ISNULL));
SELECT ALL * FROM vt0 CROSS JOIN vt2 ON (~ (((vt2.c0)>(vt2.c1)))) CROSS JOIN v0 ON CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN vt0.c0 THEN vt2.c1 END THEN CAST(v0.c0 AS INTEGER) WHEN v0.c1 COLLATE BINARY THEN ((-1417774340)<(0.08634741939000601)) ELSE ((v0.c0) ISNULL) END WHERE (((v0.c1) ISNULL)) ORDER BY CAST((((vt2.c0, v0.c2)) NOT BETWEEN ((vt2.c1, v0.c3)) AND ((vt2.c1, vt0.c0))) AS REAL)  NULLS LAST, CAST(v0.c3 AS BLOB) COLLATE NOCASE DESC LIMIT 0X2;
SELECT * FROM vt0 CROSS JOIN vt2 ON (~ (((vt2.c0)>(vt2.c1)))) CROSS JOIN v0 ON CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN vt0.c0 THEN vt2.c1 END THEN CAST(v0.c0 AS INTEGER) WHEN v0.c1 COLLATE BINARY THEN ((-1417774340)<(0.08634741939000601)) ELSE ((v0.c0) ISNULL) END WHERE (((v0.c1) ISNULL));
SELECT ALL * FROM vt0 CROSS JOIN vt2 ON (~ (((vt2.c0)>(vt2.c1)))) CROSS JOIN v0 ON CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN vt0.c0 THEN vt2.c1 END THEN CAST(v0.c0 AS INTEGER) WHEN v0.c1 COLLATE BINARY THEN ((-1417774340)<(0.08634741939000601)) ELSE ((v0.c0) ISNULL) END WHERE (((v0.c1) ISNULL)) ORDER BY CAST((((vt2.c0, v0.c2)) NOT BETWEEN ((vt2.c1, v0.c3)) AND ((vt2.c1, vt0.c0))) AS REAL)  NULLS LAST, CAST(v0.c3 AS BLOB) COLLATE NOCASE DESC LIMIT 0X2;
SELECT ALL * FROM vt2, vt0 WHERE ((((vt2.c1)%(vt2.c1)) IN (((((((vt2.c0)AND(vt2.c1)))AND(vt0.c0)))OR(vt2.c0)))));
SELECT ALL * FROM vt2, vt0 WHERE ((((vt2.c1)%(vt2.c1)) IN (((((((vt2.c0)AND(vt2.c1)))AND(vt0.c0)))OR(vt2.c0))))) LIMIT 0;
SELECT ALL * FROM vt2, vt0 WHERE ((((vt2.c1)%(vt2.c1)) IN (((((((vt2.c0)AND(vt2.c1)))AND(vt0.c0)))OR(vt2.c0)))));
SELECT ALL * FROM vt2, vt0 WHERE ((((vt2.c1)%(vt2.c1)) IN (((((((vt2.c0)AND(vt2.c1)))AND(vt0.c0)))OR(vt2.c0))))) LIMIT 0;
SELECT * FROM v0 WHERE (CASE (v0.c3 IN ())  WHEN v0.c3 THEN '>K' WHEN TYPEOF(DISTINCT v0.c2) THEN ((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)) END);
SELECT * FROM v0 WHERE (((CASE (v0.c3 IN ())  WHEN v0.c3 THEN '>K' WHEN TYPEOF(DISTINCT v0.c2) THEN ((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)) END)AND(((((((((NULL)AND(v0.c0)))AND(v0.c2)))AND(v0.c0)))IS((((v0.c3, v0.c2, v0.c0, v0.c2))>((v0.c2, v0.c0, v0.c1, v0.c2)))))))) ORDER BY ((((((((v0.c2)|(v0.c0)))AND(v0.c3 COLLATE RTRIM)))AND(((0xffffffff8ac93a00) NOTNULL))))OR((v0.c1 IN ())))  NULLS LAST, json_insert(v0.c3, v0.c0, v0.c2) COLLATE NOCASE  NULLS FIRST INTERSECT SELECT * FROM v0 WHERE ((NOT (v0.c2))) ORDER BY ((((((((v0.c2)|(v0.c0)))AND(v0.c3 COLLATE RTRIM)))AND(((0xffffffff8ac93a00) NOTNULL))))OR((v0.c1 IN ())))  NULLS LAST, json_insert(v0.c3, v0.c0, v0.c2) COLLATE NOCASE  NULLS FIRST;
SELECT * FROM v0 WHERE (CASE (v0.c3 IN ())  WHEN v0.c3 THEN '>K' WHEN TYPEOF(DISTINCT v0.c2) THEN ((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)) END);
SELECT * FROM v0 WHERE (((CASE (v0.c3 IN ())  WHEN v0.c3 THEN '>K' WHEN TYPEOF(DISTINCT v0.c2) THEN ((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)) END)AND(((((((((NULL)AND(v0.c0)))AND(v0.c2)))AND(v0.c0)))IS((((v0.c3, v0.c2, v0.c0, v0.c2))>((v0.c2, v0.c0, v0.c1, v0.c2)))))))) ORDER BY ((((((((v0.c2)|(v0.c0)))AND(v0.c3 COLLATE RTRIM)))AND(((0xffffffff8ac93a00) NOTNULL))))OR((v0.c1 IN ())))  NULLS LAST, json_insert(v0.c3, v0.c0, v0.c2) COLLATE NOCASE  NULLS FIRST INTERSECT SELECT * FROM v0 WHERE ((NOT (v0.c2))) ORDER BY ((((((((v0.c2)|(v0.c0)))AND(v0.c3 COLLATE RTRIM)))AND(((0xffffffff8ac93a00) NOTNULL))))OR((v0.c1 IN ())))  NULLS LAST, json_insert(v0.c3, v0.c0, v0.c2) COLLATE NOCASE  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((vt2.c1 IN (((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)), 'Q'))) ORDER BY vt2.c0 DESC  NULLS FIRST, ((((vt2.c0) IS TRUE)) BETWEEN (CAST(vt2.c1 AS BLOB)) AND (((vt2.c1) NOTNULL))) ASC;
SELECT DISTINCT * FROM vt2 WHERE ((vt2.c1 IN (((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)), 'Q'))) ORDER BY vt2.c0 DESC  NULLS FIRST, ((((vt2.c0) IS TRUE)) BETWEEN (CAST(vt2.c1 AS BLOB)) AND (((vt2.c1) NOTNULL))) ASC INTERSECT SELECT DISTINCT * FROM vt2 WHERE (CAST(CASE WHEN vt2.c0 THEN vt2.c1 END AS REAL)) ORDER BY vt2.c0 DESC  NULLS FIRST, ((((vt2.c0) IS TRUE)) BETWEEN (CAST(vt2.c1 AS BLOB)) AND (((vt2.c1) NOTNULL))) ASC;
SELECT ALL * FROM vt2 WHERE ((vt2.c1 IN (((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)), 'Q'))) ORDER BY vt2.c0 DESC  NULLS FIRST, ((((vt2.c0) IS TRUE)) BETWEEN (CAST(vt2.c1 AS BLOB)) AND (((vt2.c1) NOTNULL))) ASC;
SELECT DISTINCT * FROM vt2 WHERE ((vt2.c1 IN (((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)), 'Q'))) ORDER BY vt2.c0 DESC  NULLS FIRST, ((((vt2.c0) IS TRUE)) BETWEEN (CAST(vt2.c1 AS BLOB)) AND (((vt2.c1) NOTNULL))) ASC INTERSECT SELECT DISTINCT * FROM vt2 WHERE (CAST(CASE WHEN vt2.c0 THEN vt2.c1 END AS REAL)) ORDER BY vt2.c0 DESC  NULLS FIRST, ((((vt2.c0) IS TRUE)) BETWEEN (CAST(vt2.c1 AS BLOB)) AND (((vt2.c1) NOTNULL))) ASC;
SELECT * FROM vt0, v0, vt2 WHERE (((((v0.c1) NOTNULL)) IS TRUE)) ORDER BY CASE WHEN (((vt2.c0, vt2.c0, v0.c3))<((v0.c0, vt2.c1, v0.c3))) THEN HEX(vt0.c0) ELSE vt2.c1 COLLATE RTRIM END DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c1) NOTNULL)) IS TRUE)) ORDER BY CASE WHEN (((vt2.c0, vt2.c0, v0.c3))<((v0.c0, vt2.c1, v0.c3))) THEN HEX(vt0.c0) ELSE vt2.c1 COLLATE RTRIM END DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c0)|(v0.c1)))AND(((v0.c3)LIKE(v0.c3))))) ORDER BY CASE WHEN (((vt2.c0, vt2.c0, v0.c3))<((v0.c0, vt2.c1, v0.c3))) THEN HEX(vt0.c0) ELSE vt2.c1 COLLATE RTRIM END DESC  NULLS LAST;
SELECT * FROM vt0, v0, vt2 WHERE (((((v0.c1) NOTNULL)) IS TRUE)) ORDER BY CASE WHEN (((vt2.c0, vt2.c0, v0.c3))<((v0.c0, vt2.c1, v0.c3))) THEN HEX(vt0.c0) ELSE vt2.c1 COLLATE RTRIM END DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c1) NOTNULL)) IS TRUE)) ORDER BY CASE WHEN (((vt2.c0, vt2.c0, v0.c3))<((v0.c0, vt2.c1, v0.c3))) THEN HEX(vt0.c0) ELSE vt2.c1 COLLATE RTRIM END DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c0)|(v0.c1)))AND(((v0.c3)LIKE(v0.c3))))) ORDER BY CASE WHEN (((vt2.c0, vt2.c0, v0.c3))<((v0.c0, vt2.c1, v0.c3))) THEN HEX(vt0.c0) ELSE vt2.c1 COLLATE RTRIM END DESC  NULLS LAST;
SELECT ALL MAX(vt0.c0) FROM v0, vt0 WHERE (0.5386248511963987);
SELECT ALL MAX(vt0.c0) FROM v0, vt0 WHERE (((0.5386248511963987)AND((CASE WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 END IN (((((((((((((v0.c3)AND(v0.c2)))AND(v0.c3)))OR(v0.c2)))OR(v0.c0)))AND(v0.c1)))OR(vt0.c0))))))) ORDER BY v0.c1  NULLS LAST, (- (((v0.c0)|(v0.c2)))) DESC  NULLS FIRST LIMIT 0x1;
SELECT MAX(vt2.c0) FROM vt2 WHERE (((((vt2.c1)LIKE(vt2.c1)))<=(((vt2.c1)IS NOT(vt2.c1))))) ORDER BY ((((((vt2.c0)OR(x'67')))OR(vt2.c1))) NOT BETWEEN (vt2.c1) AND (((((vt2.c0)AND(vt2.c0)))AND(vt2.c1))))  NULLS LAST;
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (((((((vt2.c1)LIKE(vt2.c1)))=(((vt2.c1)IS NOT(vt2.c1)))))AND(((CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END)>=(((((vt2.c0)AND(vt2.c1)))OR(vt2.c1))))))) ORDER BY (- (((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c1)))) ASC  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (x'32feff') ORDER BY (- (((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c1)))) ASC  NULLS LAST;
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (((-3.86582235E8) BETWEEN (TYPEOF(vt2.c0)) AND (vt2.c1 COLLATE NOCASE)));
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (((-3.86582235E8) BETWEEN (TYPEOF(vt2.c0)) AND (vt2.c1 COLLATE NOCASE))) ORDER BY (((vt2.c1 IN ()))==(0.9637382275542646)) ASC  NULLS LAST, vt2.c1 DESC  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (CAST(((vt2.c0) NOTNULL) AS INTEGER)) ORDER BY (((vt2.c1 IN ()))==(0.9637382275542646)) ASC  NULLS LAST, vt2.c1 DESC  NULLS FIRST LIMIT 2;
SELECT ALL MAX(vt2.c1) FROM vt2, vt0, v0 WHERE (((NULL) ISNULL)) ORDER BY (((+ (v0.c1))) ISNULL) ASC;
SELECT ALL MAX(vt2.c1) FROM vt2, vt0, v0 WHERE (((((NULL) ISNULL))AND(TYPEOF(vt2.c1) COLLATE BINARY))) ORDER BY (((+ (v0.c1))) ISNULL) ASC INTERSECT SELECT MAX(vt2.c1) FROM vt2, vt0, v0 WHERE ((((',?䤵G\+pḃ''', vt2.c1)) BETWEEN ((((v0.c2) IS FALSE), v0.c3)) AND ((((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c1)))OR(v0.c0)))AND(v0.c3)), ((v0.c1)IS(v0.c0)))))) ORDER BY (((+ (v0.c1))) ISNULL) ASC;
SELECT COUNT(*) FROM v0 WHERE (((((((((((v0.c2)OR(v0.c1)))OR(v0.c3)))AND(v0.c0)))AND(v0.c2))) BETWEEN ((v0.c0 IN ())) AND (((0.2622840820158293)<>(x''))))) ORDER BY CASE WHEN ((x'd5') NOT BETWEEN (v0.c1) AND (v0.c2)) THEN v0.c0 END DESC;
SELECT ALL COUNT(*) FROM v0 WHERE (((((((((((((v0.c2)OR(v0.c1)))OR(v0.c3)))AND(v0.c0)))AND(v0.c2))) BETWEEN ((v0.c0 IN ())) AND (((0.2622840820158293)<(x'')))))AND(NULL))) ORDER BY CASE WHEN ((x'd5') NOT BETWEEN (v0.c1) AND (v0.c2)) THEN v0.c0 END DESC LIMIT 2;
SELECT ALL * FROM vt0, v0 WHERE (((((NULL)+(vt0.c0)))*(CAST(v0.c0 AS INTEGER))));
SELECT ALL * FROM vt0, v0 WHERE (((((NULL)+(vt0.c0)))*(CAST(v0.c0 AS INTEGER)))) ORDER BY -1935470654 DESC LIMIT 1;
SELECT ALL * FROM vt0, v0 WHERE (((((NULL)+(vt0.c0)))*(CAST(v0.c0 AS INTEGER))));
SELECT ALL * FROM vt0, v0 WHERE (((((NULL)+(vt0.c0)))*(CAST(v0.c0 AS INTEGER)))) ORDER BY -1935470654 DESC LIMIT 1;
SELECT MIN(vt0.c0) FROM v0 LEFT OUTER JOIN vt0 ON CAST(CASE vt0.c0  WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END AS NUMERIC) WHERE (((((NULL)OR(NULL)))OR(vt0.c0))) ORDER BY (((v0.c3, v0.c3)) BETWEEN ((v0.c0 COLLATE BINARY, 'D')) AND (((+ (v0.c3)), v0.c2))), CASE ('-941041463' IN (v0.c3))  WHEN v0.c3 THEN ((vt0.c0)&(v0.c3)) WHEN highlight(v0.c0, v0.c0, v0.c2, v0.c1) THEN (((vt0.c0, vt0.c0, v0.c3, v0.c0, v0.c0, v0.c2)) BETWEEN ((vt0.c0, v0.c3, v0.c3, vt0.c0, v0.c3, v0.c3)) AND ((v0.c0, v0.c2, v0.c3, v0.c2, vt0.c0, '0.2622840820158293'))) WHEN v0.c1 THEN CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c3 THEN v0.c0 ELSE v0.c1 END WHEN CAST(v0.c0 AS REAL) THEN ((v0.c1) ISNULL) ELSE ((vt0.c0) IS FALSE) END DESC  NULLS FIRST, ABS(v0.c0) ASC;
SELECT DISTINCT MIN(vt0.c0) FROM v0 INNER JOIN vt0 ON CAST(CASE vt0.c0  WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END AS NUMERIC) WHERE (((((((NULL)OR(NULL)))OR(vt0.c0)))AND(((((v0.c2 COLLATE NOCASE)OR(v0.c1)))AND(vt0.c0))))) ORDER BY (((v0.c3, v0.c3)) BETWEEN ((v0.c0 COLLATE BINARY, 'D')) AND (((+ (v0.c3)), v0.c2))), CASE ('-941041463' IN (v0.c3))  WHEN v0.c3 THEN ((vt0.c0)&(v0.c3)) WHEN highlight(v0.c0, v0.c0, v0.c2, v0.c1) THEN (((vt0.c0, vt0.c0, v0.c3, v0.c0, v0.c0, v0.c2)) BETWEEN ((vt0.c0, v0.c3, v0.c3, vt0.c0, v0.c3, v0.c3)) AND ((v0.c0, v0.c2, v0.c3, v0.c2, vt0.c0, '0.2622840820158293'))) WHEN v0.c1 THEN CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c3 THEN v0.c0 ELSE v0.c1 END WHEN CAST(v0.c0 AS REAL) THEN ((v0.c1) ISNULL) ELSE ((vt0.c0) IS FALSE) END DESC  NULLS FIRST, ABS(v0.c0) ASC LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM v0 INNER JOIN vt0 ON CAST(CASE vt0.c0  WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END AS NUMERIC) WHERE (CAST(0xffffffffa9e192c0 AS NUMERIC)) ORDER BY (((v0.c3, v0.c3)) BETWEEN ((v0.c0 COLLATE BINARY, 'D')) AND (((+ (v0.c3)), v0.c2))), CASE ('-941041463' IN (v0.c3))  WHEN v0.c3 THEN ((vt0.c0)&(v0.c3)) WHEN highlight(v0.c0, v0.c0, v0.c2, v0.c1) THEN (((vt0.c0, vt0.c0, v0.c3, v0.c0, v0.c0, v0.c2)) BETWEEN ((vt0.c0, v0.c3, v0.c3, vt0.c0, v0.c3, v0.c3)) AND ((v0.c0, v0.c2, v0.c3, v0.c2, vt0.c0, '0.2622840820158293'))) WHEN v0.c1 THEN CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c3 THEN v0.c0 ELSE v0.c1 END WHEN CAST(v0.c0 AS REAL) THEN ((v0.c1) ISNULL) ELSE ((vt0.c0) IS FALSE) END DESC  NULLS FIRST, ABS(v0.c0) ASC LIMIT 1;
SELECT * FROM vt2 WHERE (vt2.c1) ORDER BY CASE json_array(vt2.c1, vt2.c1, vt2.c0)  WHEN vt2.c1 THEN (((vt2.c1))<((vt2.c0))) WHEN CAST(vt2.c0 AS TEXT) THEN (((vt2.c0))<=((vt2.c1))) WHEN NULL COLLATE NOCASE THEN STRFTIME(vt2.c1, '	O', vt2.c1) END ASC;
SELECT DISTINCT * FROM vt2 NOT INDEXED WHERE (vt2.c1) ORDER BY CASE json_array(vt2.c1, vt2.c1, vt2.c0)  WHEN vt2.c1 THEN (((vt2.c1))<((vt2.c0))) WHEN CAST(vt2.c0 AS TEXT) THEN (((vt2.c0))<=((vt2.c1))) WHEN NULL COLLATE NOCASE THEN STRFTIME(vt2.c1, '	O', vt2.c1) END ASC;
SELECT * FROM vt2 WHERE (vt2.c1) ORDER BY CASE json_array(vt2.c1, vt2.c1, vt2.c0)  WHEN vt2.c1 THEN (((vt2.c1))<((vt2.c0))) WHEN CAST(vt2.c0 AS TEXT) THEN (((vt2.c0))<=((vt2.c1))) WHEN NULL COLLATE NOCASE THEN STRFTIME(vt2.c1, '	O', vt2.c1) END ASC;
SELECT ALL MIN(v0.c0) FROM vt2, v0 WHERE ((((v0.c3) BETWEEN (v0.c3) AND (v0.c3)) IN (INSTR(v0.c3, vt2.c1)))) ORDER BY 0.5316537759387888 ASC, NULL ASC;
SELECT DISTINCT MIN(v0.c0) FROM vt2, v0 WHERE ((((((v0.c3) BETWEEN (v0.c3) AND (v0.c3)) IN (INSTR(v0.c3, vt2.c1))))AND(json_remove(((v0.c3) BETWEEN (vt2.c1) AND (v0.c3)), ((vt2.c1) IS FALSE), json_extract(v0.c0, v0.c1, v0.c3), CASE WHEN v0.c1 THEN v0.c1 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END, (- (vt2.c0)))))) ORDER BY load_extension(((vt2.c1) NOTNULL), ((x'') NOT BETWEEN (v0.c2) AND (vt2.c0))), LTRIM(v0.c0, v0.c1) COLLATE BINARY ASC LIMIT 0x1 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM vt2, v0 WHERE (((UNLIKELY(DISTINCT vt2.c1))||(vt2.c0 COLLATE BINARY))) ORDER BY load_extension(((vt2.c1) NOTNULL), ((x'') NOT BETWEEN (v0.c2) AND (vt2.c0))), LTRIM(v0.c0, v0.c1) COLLATE BINARY ASC LIMIT 0X1;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (((v0.c1 COLLATE NOCASE)>>(v0.c2 COLLATE RTRIM)));
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((((v0.c1 COLLATE NOCASE)>>(v0.c2 COLLATE RTRIM)))AND((((vt0.c0 COLLATE NOCASE, (((v0.c0, vt2.c1, v0.c0, v0.c2))<>((v0.c0, vt0.c0, v0.c2, v0.c3))), ((vt2.c0) IS TRUE), ((NULL)GLOB(vt0.c0))))>=((vt2.c1 COLLATE NOCASE, -567218797 COLLATE BINARY, ((vt0.c0) ISNULL), ((v0.c1)IS NOT(v0.c3)))))))) LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((CAST(vt2.c0 AS NUMERIC))%(((v0.c0)>(v0.c1))))) LIMIT 0X1;
SELECT MAX(v0.c2) FROM v0 WHERE (v0.c3);
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((v0.c3)AND(CASE WHEN CASE NULL  WHEN v0.c1 THEN '5' ELSE v0.c1 END THEN v0.c1 COLLATE BINARY END)));
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE ((((v0.c0, v0.c0, v0.c0)) NOT BETWEEN ((IFNULL(v0.c2, vt0.c0), (NOT (v0.c3)), CAST(vt0.c0 AS REAL))) AND ((((vt0.c0)GLOB(v0.c3)), CAST(0.9205797637410246 AS INTEGER), vt0.c0))));
SELECT DISTINCT MIN(v0.c1) FROM v0, vt0 WHERE ((((v0.c0, v0.c0, v0.c0)) NOT BETWEEN ((IFNULL(v0.c2, vt0.c0), (NOT (v0.c3)), CAST(vt0.c0 AS REAL))) AND ((((vt0.c0)GLOB(v0.c3)), CAST(0.9205797637410246 AS INTEGER), vt0.c0)))) ORDER BY CAST(v0.c1 AS INTEGER) COLLATE RTRIM, (NOT (v0.c1)) COLLATE BINARY ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt0 WHERE ((CAST(v0.c0 AS TEXT) IN (((v0.c1)IS NOT(v0.c1))))) ORDER BY CAST(v0.c1 AS INTEGER) COLLATE RTRIM, (NOT (v0.c1)) COLLATE BINARY ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((((v0.c0)AND(vt2.c1)), CAST(vt2.c1 AS INTEGER), (+ (v0.c2))))=((CAST(v0.c3 AS BLOB), CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN '-551752042' END, (vt2.c1 IN (v0.c1, v0.c1))))));
SELECT * FROM vt2, vt0, v0 WHERE ((((((((v0.c0)AND(vt2.c1)), CAST(vt2.c1 AS INTEGER), (+ (v0.c2))))=((CAST(v0.c3 AS BLOB), CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN '-551752042' END, (vt2.c1 IN (v0.c1))))))AND(CASE (+ (vt0.c0))  WHEN ((v0.c1) ISNULL) THEN CAST(vt0.c0 AS INTEGER) WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (v0.c1)) THEN ((v0.c1) BETWEEN (NULL) AND (v0.c3)) WHEN vt0.c0 COLLATE NOCASE THEN ((v0.c0)<=(vt2.c1)) END))) LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((((v0.c0)AND(vt2.c1)), CAST(vt2.c1 AS INTEGER), (+ (v0.c2))))=((CAST(v0.c3 AS BLOB), CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN '-551752042' END, (vt2.c1 IN (v0.c1, v0.c1))))));
SELECT * FROM vt2, vt0, v0 WHERE ((((((((v0.c0)AND(vt2.c1)), CAST(vt2.c1 AS INTEGER), (+ (v0.c2))))=((CAST(v0.c3 AS BLOB), CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN '-551752042' END, (vt2.c1 IN (v0.c1))))))AND(CASE (+ (vt0.c0))  WHEN ((v0.c1) ISNULL) THEN CAST(vt0.c0 AS INTEGER) WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (v0.c1)) THEN ((v0.c1) BETWEEN (NULL) AND (v0.c3)) WHEN vt0.c0 COLLATE NOCASE THEN ((v0.c0)<=(vt2.c1)) END))) LIMIT 0;
SELECT ALL MIN(vt0.c0) FROM vt0, v0 WHERE (((((v0.c0) IS FALSE)) IS FALSE)) ORDER BY (NOT (((((((v0.c3)AND(v0.c2)))AND(v0.c1)))AND(vt0.c0)))) DESC  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0, v0 WHERE (((((v0.c0) IS FALSE)) IS FALSE)) ORDER BY (((vt0.c0, v0.c3, v0.c0, v0.c1)) NOT BETWEEN ((TRIM(v0.c1), CAST(v0.c2 AS TEXT), ((v0.c0) NOT BETWEEN (vt0.c0) AND (v0.c3)), ((v0.c2) NOTNULL))) AND ((v0.c1 COLLATE BINARY, ((v0.c0) NOT NULL), 382198455, (v0.c3 IN ())))) ASC  NULLS LAST;
SELECT MIN(v0.c0) FROM vt0, vt2, v0 WHERE (',p');
SELECT DISTINCT MIN(v0.c0) FROM vt0, vt2, v0 WHERE (((',p')AND(((HEX(v0.c0)) BETWEEN (((vt2.c0)OR(NULL))) AND ((((vt2.c0, vt2.c0, v0.c2)) BETWEEN ((v0.c2, v0.c0, v0.c2)) AND ((v0.c1, vt2.c1, vt2.c0)))))))) ORDER BY ((((x'eff3fcc802') IS TRUE)) IS TRUE)  NULLS LAST, v0.c3 DESC, (NOT (LOWER(vt2.c0)))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM vt0, vt2, v0 WHERE (CAST(CASE WHEN vt0.c0 THEN v0.c3 WHEN vt0.c0 THEN v0.c3 END AS INTEGER)) ORDER BY ((((x'eff3fcc802') IS TRUE)) IS TRUE)  NULLS LAST, v0.c3 DESC, (NOT (LOWER(vt2.c0)))  NULLS LAST LIMIT 0X1;
SELECT * FROM v0, vt2 WHERE ('526554451');
SELECT DISTINCT * FROM v0, vt2 WHERE ('526554451') INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (((NOT (v0.c3)) IN ((((v0.c2)) NOT BETWEEN ((v0.c3)) AND ((0.2108925113409189))))));
SELECT * FROM v0, vt2 WHERE ('526554451');
SELECT DISTINCT * FROM v0, vt2 WHERE ('526554451') INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (((NOT (v0.c3)) IN ((((v0.c2)) NOT BETWEEN ((v0.c3)) AND ((0.2108925113409189))))));
SELECT * FROM vt2 CROSS JOIN vt0 ON (((v0.c0))<>((((((((((((v0.c2)OR(v0.c3)))OR(v0.c1)))AND(vt0.c0)))AND(vt2.c1)))OR(v0.c3))))) CROSS JOIN v0 ON (((v0.c3, vt2.c0)) BETWEEN ((((v0.c2)||(v0.c0)), ((vt2.c0) NOTNULL))) AND ((vt2.c0, ((vt2.c0) NOTNULL)))) WHERE ((((((vt0.c0, vt2.c0))=((v0.c1, ''))))-(((0Xffffffffd11634d0) IS TRUE)))) ORDER BY CAST(((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)) AS REAL)  NULLS FIRST;
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON (((v0.c0))!=((((((((((((v0.c2)OR(v0.c3)))OR(v0.c1)))AND(vt0.c0)))AND(vt2.c1)))OR(v0.c3))))) CROSS JOIN v0 ON (((v0.c3, vt2.c0)) BETWEEN ((((v0.c2)||(v0.c0)), ((vt2.c0) NOTNULL))) AND ((vt2.c0, ((vt2.c0) NOTNULL)))) WHERE ((((((((vt0.c0, vt2.c0))==((v0.c1, ''))))-(((-787073840) IS TRUE))))AND((((((((((((('576918381')&(v0.c1)))AND(((vt2.c1)GLOB(vt0.c0)))))AND(x'')))AND(ABS(v0.c0))))OR('1190017638')))OR((NOT (vt2.c0))))))) ORDER BY (~ ((((v0.c1, v0.c3, v0.c3, v0.c2, v0.c1)) NOT BETWEEN ((v0.c1, v0.c3, v0.c1, v0.c2, vt0.c0)) AND ((v0.c3, vt0.c0, v0.c0, v0.c2, v0.c0)))))  NULLS LAST, v0.c0 ASC  NULLS FIRST;
SELECT * FROM vt2 CROSS JOIN vt0 ON (((v0.c0))<>((((((((((((v0.c2)OR(v0.c3)))OR(v0.c1)))AND(vt0.c0)))AND(vt2.c1)))OR(v0.c3))))) CROSS JOIN v0 ON (((v0.c3, vt2.c0)) BETWEEN ((((v0.c2)||(v0.c0)), ((vt2.c0) NOTNULL))) AND ((vt2.c0, ((vt2.c0) NOTNULL)))) WHERE ((((((vt0.c0, vt2.c0))=((v0.c1, ''))))-(((0Xffffffffd11634d0) IS TRUE)))) ORDER BY CAST(((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)) AS REAL)  NULLS FIRST;
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON (((v0.c0))!=((((((((((((v0.c2)OR(v0.c3)))OR(v0.c1)))AND(vt0.c0)))AND(vt2.c1)))OR(v0.c3))))) CROSS JOIN v0 ON (((v0.c3, vt2.c0)) BETWEEN ((((v0.c2)||(v0.c0)), ((vt2.c0) NOTNULL))) AND ((vt2.c0, ((vt2.c0) NOTNULL)))) WHERE ((((((((vt0.c0, vt2.c0))==((v0.c1, ''))))-(((-787073840) IS TRUE))))AND((((((((((((('576918381')&(v0.c1)))AND(((vt2.c1)GLOB(vt0.c0)))))AND(x'')))AND(ABS(v0.c0))))OR('1190017638')))OR((NOT (vt2.c0))))))) ORDER BY (~ ((((v0.c1, v0.c3, v0.c3, v0.c2, v0.c1)) NOT BETWEEN ((v0.c1, v0.c3, v0.c1, v0.c2, vt0.c0)) AND ((v0.c3, vt0.c0, v0.c0, v0.c2, v0.c0)))))  NULLS LAST, v0.c0 ASC  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt2 WHERE ((((v0.c3)) NOT BETWEEN ((((vt2.c0)LIKE(v0.c3)))) AND ((ABS(DISTINCT NULL)))));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt2 WHERE ((((v0.c3)) NOT BETWEEN ((((vt2.c0)LIKE(v0.c3)))) AND ((ABS(DISTINCT NULL))))) ORDER BY (((((((v0.c0 IN ()))AND(((v0.c3) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR((((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))))))OR((((v0.c1, v0.c3, vt2.c0, v0.c0)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c0, -2011619333)) AND ((v0.c0, v0.c0, vt2.c1, vt2.c0))))), NULLIF(v0.c3, v0.c0) COLLATE BINARY  NULLS FIRST, v0.c2  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt2 WHERE ((((v0.c3)) NOT BETWEEN ((((vt2.c0)LIKE(v0.c3)))) AND ((ABS(DISTINCT NULL)))));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt2 WHERE ((((v0.c3)) NOT BETWEEN ((((vt2.c0)LIKE(v0.c3)))) AND ((ABS(DISTINCT NULL))))) ORDER BY (((((((v0.c0 IN ()))AND(((v0.c3) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR((((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))))))OR((((v0.c1, v0.c3, vt2.c0, v0.c0)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c0, -2011619333)) AND ((v0.c0, v0.c0, vt2.c1, vt2.c0))))), NULLIF(v0.c3, v0.c0) COLLATE BINARY  NULLS FIRST, v0.c2  NULLS FIRST;
SELECT ALL * FROM vt2, v0 WHERE (((CAST(v0.c1 AS BLOB))IS(v0.c2))) ORDER BY CASE WHEN (v0.c2 IN (vt2.c1)) THEN (- (1600896593)) END  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(v0.c1 AS BLOB))IS(v0.c2))) ORDER BY ((((vt2.c1) NOTNULL)) BETWEEN (v0.c1 COLLATE RTRIM) AND ((vt2.c1 IN (v0.c3))))  NULLS FIRST, (((((v0.c2))<=((vt2.c0))))<=(((v0.c2) IS TRUE))) ASC  NULLS LAST;
SELECT ALL * FROM vt2, v0 WHERE (((CAST(v0.c1 AS BLOB))IS(v0.c2))) ORDER BY CASE WHEN (v0.c2 IN (vt2.c1)) THEN (- (1600896593)) END  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(v0.c1 AS BLOB))IS(v0.c2))) ORDER BY ((((vt2.c1) NOTNULL)) BETWEEN (v0.c1 COLLATE RTRIM) AND ((vt2.c1 IN (v0.c3))))  NULLS FIRST, (((((v0.c2))<=((vt2.c0))))<=(((v0.c2) IS TRUE))) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE ((vt0.c0 IN (vt0.c0, vt0.c0)) COLLATE RTRIM);
SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE ((((vt0.c0 IN (vt0.c0)) COLLATE RTRIM)AND((((vt2.c0)) BETWEEN ((NULL)) AND ((((vt0.c0)IS(vt2.c0))))))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)/('5q[]~Q'))) NOT BETWEEN (x'') AND (((vt0.c0) BETWEEN (0.9454015418188614) AND (vt0.c0))))) ORDER BY ((((((((((((vt0.c0)+(0.44312673298235083)))AND((NOT (vt0.c0)))))OR(((vt0.c0)>>(0.031110792199687265)))))AND(UNICODE(vt0.c0))))OR(((vt0.c0) IS FALSE))))OR(0.9873959024305637)) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)/('5q[]~Q'))) NOT BETWEEN (x'') AND (((vt0.c0) BETWEEN (0.9454015418188614) AND (vt0.c0))))) ORDER BY ((((((((((((vt0.c0)+(0.44312673298235083)))AND((NOT (vt0.c0)))))OR(((vt0.c0)>>(0.031110792199687265)))))AND(UNICODE(vt0.c0))))OR(((vt0.c0) IS FALSE))))OR(0.9873959024305637)) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c0) ORDER BY ((((((((((((vt0.c0)+(0.44312673298235083)))AND((NOT (vt0.c0)))))OR(((vt0.c0)>>(0.031110792199687265)))))AND(UNICODE(vt0.c0))))OR(((vt0.c0) IS FALSE))))OR(0.9873959024305637)) ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)/('5q[]~Q'))) NOT BETWEEN (x'') AND (((vt0.c0) BETWEEN (0.9454015418188614) AND (vt0.c0))))) ORDER BY ((((((((((((vt0.c0)+(0.44312673298235083)))AND((NOT (vt0.c0)))))OR(((vt0.c0)>>(0.031110792199687265)))))AND(UNICODE(vt0.c0))))OR(((vt0.c0) IS FALSE))))OR(0.9873959024305637)) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)/('5q[]~Q'))) NOT BETWEEN (x'') AND (((vt0.c0) BETWEEN (0.9454015418188614) AND (vt0.c0))))) ORDER BY ((((((((((((vt0.c0)+(0.44312673298235083)))AND((NOT (vt0.c0)))))OR(((vt0.c0)>>(0.031110792199687265)))))AND(UNICODE(vt0.c0))))OR(((vt0.c0) IS FALSE))))OR(0.9873959024305637)) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (vt0.c0) ORDER BY ((((((((((((vt0.c0)+(0.44312673298235083)))AND((NOT (vt0.c0)))))OR(((vt0.c0)>>(0.031110792199687265)))))AND(UNICODE(vt0.c0))))OR(((vt0.c0) IS FALSE))))OR(0.9873959024305637)) ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM v0 NATURAL JOIN vt2 WHERE ((((v0.c0 IN (v0.c1, v0.c1)))>>(((v0.c2)+(vt2.c1)))));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt2 WHERE ((((((v0.c0 IN (v0.c1, v0.c1)))>>(((v0.c2)+(vt2.c1)))))AND(((NOT (vt2.c0)) IN (v0.c0 COLLATE RTRIM))))) ORDER BY CAST(CASE v0.c1  WHEN 2077826563 THEN vt2.c1 ELSE vt2.c1 END AS REAL) DESC  NULLS LAST, ((vt2.c0) IS FALSE) COLLATE RTRIM  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt2 WHERE ((((v0.c0 IN (v0.c1, v0.c1)))>>(((v0.c2)+(vt2.c1)))));
SELECT DISTINCT * FROM v0 NATURAL JOIN vt2 WHERE ((((((v0.c0 IN (v0.c1, v0.c1)))>>(((v0.c2)+(vt2.c1)))))AND(((NOT (vt2.c0)) IN (v0.c0 COLLATE RTRIM))))) ORDER BY CAST(CASE v0.c1  WHEN 2077826563 THEN vt2.c1 ELSE vt2.c1 END AS REAL) DESC  NULLS LAST, ((vt2.c0) IS FALSE) COLLATE RTRIM  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0, vt2 WHERE (((((((((((CAST(v0.c1 AS REAL))OR(((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c0)))))AND(v0.c1 COLLATE NOCASE)))OR(((v0.c3) BETWEEN (v0.c1) AND (v0.c1)))))AND((((x'53'))>=((v0.c3))))))OR(((v0.c1)LIKE(vt2.c0))))) ORDER BY (((- (v0.c0)))>>(v0.c3 COLLATE NOCASE));
SELECT ALL MIN(v0.c2) FROM v0, vt2 WHERE (((((((((((((CAST(v0.c1 AS REAL))OR(((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c0)))))AND(v0.c1 COLLATE NOCASE)))OR(((v0.c3) BETWEEN (v0.c1) AND (v0.c1)))))AND((((x'53'))>=((v0.c3))))))OR(((v0.c1)LIKE(vt2.c0)))))AND((((~ (v0.c3)))|(((vt2.c1)<=(vt2.c1))))))) ORDER BY (('-610673233') NOT BETWEEN (((vt2.c0)IS(v0.c1))) AND ((((vt2.c0, v0.c3))<=((vt2.c0, v0.c1))))) LIMIT 1 INTERSECT SELECT MIN(v0.c2) FROM v0, vt2 WHERE ((((vt2.c1 IN (v0.c3))) ISNULL)) ORDER BY (('-610673233') NOT BETWEEN (((vt2.c0)IS(v0.c1))) AND ((((vt2.c0, v0.c3))<=((vt2.c0, v0.c1))))) LIMIT 0X1;
SELECT COUNT(*) FROM vt0 NATURAL JOIN v0 WHERE (0.7051132046982554);
SELECT COUNT(*) FROM vt0 NATURAL JOIN v0 WHERE (((0.7051132046982554)AND(x'af'))) ORDER BY ((((((((LOWER(v0.c2))OR(vt0.c0)))AND(CAST(v0.c2 AS REAL))))AND(((v0.c3) NOTNULL))))OR(CASE WHEN v0.c2 THEN v0.c1 END)), (CASE v0.c3  WHEN v0.c0 THEN v0.c3 ELSE v0.c1 END IN (((vt0.c0)%(v0.c0)))) ASC  NULLS FIRST, (NOT (CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN vt0.c0 THEN '0.2642123024574031' WHEN v0.c0 THEN vt0.c0 END)) LIMIT 0X0;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0) NOTNULL)) IS TRUE));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((vt0.c0) NOTNULL)) IS TRUE))AND(CAST(vt0.c0 AS INTEGER) COLLATE BINARY))) ORDER BY 0Xffffffffa53a3560 DESC INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE ((NOT ((((('A')AND(vt0.c0)))OR(vt0.c0))))) ORDER BY -1522911904 DESC;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((vt0.c0) BETWEEN (v0.c3) AND (v0.c0)))AND(vt0.c0)))AND(((v0.c0) NOT NULL))));
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((vt0.c0) BETWEEN (v0.c3) AND (v0.c0)))AND(vt0.c0)))AND(((v0.c0) NOT NULL)))) ORDER BY (~ ('Auң[gh4')) COLLATE BINARY, CAST(vt2.c1 AS TEXT)  NULLS LAST, v0.c0  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((vt0.c0) BETWEEN (v0.c3) AND (v0.c0)))AND(vt0.c0)))AND(((v0.c0) NOT NULL))));
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((vt0.c0) BETWEEN (v0.c3) AND (v0.c0)))AND(vt0.c0)))AND(((v0.c0) NOT NULL)))) ORDER BY (~ ('Auң[gh4')) COLLATE BINARY, CAST(vt2.c1 AS TEXT)  NULLS LAST, v0.c0  NULLS FIRST LIMIT 0x1;
SELECT MIN(vt0.c0) FROM vt0 WHERE (TRIM(vt0.c0, vt0.c0) COLLATE NOCASE) ORDER BY (((NOT (vt0.c0)))LIKE(CAST(vt0.c0 AS REAL))) DESC  NULLS LAST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (TRIM(vt0.c0, vt0.c0) COLLATE NOCASE) ORDER BY ((((vt0.c0) NOTNULL))-(CASE WHEN vt0.c0 THEN vt0.c0 WHEN NULL THEN vt0.c0 END)) ASC  NULLS FIRST, ((vt0.c0)>>(((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE ((((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)), ((v0.c3) NOTNULL), CASE v0.c1  WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END))>=((((v0.c0)+(x'e92c')), ((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)), ((v0.c0) BETWEEN (v0.c2) AND (v0.c2)), ((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0))))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)), ((v0.c3) NOTNULL), CASE v0.c1  WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END))>((((v0.c0)+(x'e92c')), ((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)), ((v0.c0) BETWEEN (v0.c2) AND (v0.c2)), ((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0))))))AND((NOT (((v0.c3)<>(v0.c1)))))));
SELECT ALL * FROM v0, vt0 WHERE ((((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)), ((v0.c3) NOTNULL), CASE v0.c1  WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END))>=((((v0.c0)+(x'e92c')), ((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)), ((v0.c0) BETWEEN (v0.c2) AND (v0.c2)), ((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0))))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)), ((v0.c3) NOTNULL), CASE v0.c1  WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END))>((((v0.c0)+(x'e92c')), ((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)), ((v0.c0) BETWEEN (v0.c2) AND (v0.c2)), ((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0))))))AND((NOT (((v0.c3)<>(v0.c1)))))));
SELECT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (CASE MAX(vt2.c1, v0.c1, vt2.c1)  WHEN IFNULL(v0.c3, v0.c2) THEN ((vt0.c0)>>(vt2.c1)) ELSE vt0.c0 COLLATE NOCASE END) ORDER BY ((((((v0.c0)AND(v0.c0)))AND(v0.c1))) BETWEEN (((vt0.c0)>>(vt0.c0))) AND (v0.c0)) DESC  NULLS LAST, CASE 0Xffffffffec551639  WHEN v0.c2 COLLATE NOCASE THEN x'142c3347' WHEN vt0.c0 THEN v0.c0 COLLATE RTRIM END ASC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (CASE MAX(vt2.c1, v0.c1, vt2.c1)  WHEN IFNULL(v0.c3, v0.c2) THEN ((vt0.c0)>>(vt2.c1)) ELSE vt0.c0 COLLATE NOCASE END) ORDER BY ((((((v0.c0)AND(v0.c0)))AND(v0.c1))) BETWEEN (((vt0.c0)>>(vt0.c0))) AND (v0.c0)) DESC  NULLS LAST, CASE -329968071  WHEN v0.c2 COLLATE NOCASE THEN x'142c3347' WHEN vt0.c0 THEN v0.c0 COLLATE RTRIM END ASC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (CASE MAX(vt2.c1, v0.c1, vt2.c1)  WHEN IFNULL(v0.c3, v0.c2) THEN ((vt0.c0)>>(vt2.c1)) ELSE vt0.c0 COLLATE NOCASE END) ORDER BY ((((((v0.c0)AND(v0.c0)))AND(v0.c1))) BETWEEN (((vt0.c0)>>(vt0.c0))) AND (v0.c0)) DESC  NULLS LAST, CASE 0Xffffffffec551639  WHEN v0.c2 COLLATE NOCASE THEN x'142c3347' WHEN vt0.c0 THEN v0.c0 COLLATE RTRIM END ASC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (CASE MAX(vt2.c1, v0.c1, vt2.c1)  WHEN IFNULL(v0.c3, v0.c2) THEN ((vt0.c0)>>(vt2.c1)) ELSE vt0.c0 COLLATE NOCASE END) ORDER BY ((((((v0.c0)AND(v0.c0)))AND(v0.c1))) BETWEEN (((vt0.c0)>>(vt0.c0))) AND (v0.c0)) DESC  NULLS LAST, CASE -329968071  WHEN v0.c2 COLLATE NOCASE THEN x'142c3347' WHEN vt0.c0 THEN v0.c0 COLLATE RTRIM END ASC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt2, v0 WHERE (CASE WHEN v0.c1 COLLATE NOCASE THEN ((v0.c1) NOT NULL) END);
SELECT DISTINCT * FROM vt2, v0 WHERE (CASE WHEN v0.c1 COLLATE NOCASE THEN ((v0.c1) NOT NULL) END) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (vt2.c1);
SELECT * FROM vt2, v0 WHERE (CASE WHEN v0.c1 COLLATE NOCASE THEN ((v0.c1) NOT NULL) END);
SELECT DISTINCT * FROM vt2, v0 WHERE (CASE WHEN v0.c1 COLLATE NOCASE THEN ((v0.c1) NOT NULL) END) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (vt2.c1);
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((vt0.c0) ISNULL))LIKE((('D4CL
&''P') BETWEEN (v0.c2) AND (v0.c2))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))) IS FALSE) ASC;
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((((vt0.c0) ISNULL))LIKE((('D4CL
&''P') BETWEEN (v0.c2) AND (v0.c2))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))) IS FALSE) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (LIKELIHOOD(DISTINCT ((vt2.c1)IS NOT(vt2.c0)), ((v0.c3)/(vt2.c0)))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))) IS FALSE) ASC LIMIT 0X0;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((vt0.c0) ISNULL))LIKE((('D4CL
&''P') BETWEEN (v0.c2) AND (v0.c2))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))) IS FALSE) ASC;
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((((vt0.c0) ISNULL))LIKE((('D4CL
&''P') BETWEEN (v0.c2) AND (v0.c2))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))) IS FALSE) ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (LIKELIHOOD(DISTINCT ((vt2.c1)IS NOT(vt2.c0)), ((v0.c3)/(vt2.c0)))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1))) IS FALSE) ASC LIMIT 0X0;
SELECT * FROM vt0, v0 WHERE ((- (((v0.c0) ISNULL))));
SELECT DISTINCT * FROM vt0, v0 WHERE ((- (((v0.c0) ISNULL)))) ORDER BY ((CAST(v0.c2 AS INTEGER)) NOT NULL), (((0.27599954684292793)%('1646465875')) IN (json_array_length(vt0.c0, vt0.c0), vt0.c0 COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 0x2;
SELECT * FROM vt0, v0 WHERE ((- (((v0.c0) ISNULL))));
SELECT DISTINCT * FROM vt0, v0 WHERE ((- (((v0.c0) ISNULL)))) ORDER BY ((CAST(v0.c2 AS INTEGER)) NOT NULL), (((0.27599954684292793)%('1646465875')) IN (json_array_length(vt0.c0, vt0.c0), vt0.c0 COLLATE NOCASE)) DESC  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM v0, vt0, vt2 WHERE (CASE CAST(v0.c2 AS BLOB)  WHEN v0.c1 COLLATE NOCASE THEN ((((vt0.c0)AND(vt0.c0)))OR(v0.c3)) END) ORDER BY (NOT (CASE WHEN v0.c3 THEN vt2.c1 WHEN vt2.c0 THEN '-1726882884' WHEN '9' THEN vt2.c0 WHEN v0.c3 THEN vt2.c0 ELSE vt0.c0 END)), ((v0.c0 COLLATE BINARY) NOT NULL) ASC;
SELECT DISTINCT * FROM v0, vt0, vt2 NOT INDEXED WHERE (((CASE CAST(v0.c2 AS BLOB)  WHEN v0.c1 COLLATE NOCASE THEN ((((vt0.c0)AND(vt0.c0)))OR(v0.c3)) END)AND(((v0.c2)&(v0.c3)) COLLATE RTRIM))) ORDER BY LOWER(LIKE(vt2.c0, vt2.c0, '0')) ASC  NULLS FIRST, (((v0.c3 IN (v0.c2)))AND(CASE WHEN 0.7608310758664194 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 END));
SELECT ALL * FROM v0, vt0, vt2 WHERE (CASE CAST(v0.c2 AS BLOB)  WHEN v0.c1 COLLATE NOCASE THEN ((((vt0.c0)AND(vt0.c0)))OR(v0.c3)) END) ORDER BY (NOT (CASE WHEN v0.c3 THEN vt2.c1 WHEN vt2.c0 THEN '-1726882884' WHEN '9' THEN vt2.c0 WHEN v0.c3 THEN vt2.c0 ELSE vt0.c0 END)), ((v0.c0 COLLATE BINARY) NOT NULL) ASC;
SELECT DISTINCT * FROM v0, vt0, vt2 NOT INDEXED WHERE (((CASE CAST(v0.c2 AS BLOB)  WHEN v0.c1 COLLATE NOCASE THEN ((((vt0.c0)AND(vt0.c0)))OR(v0.c3)) END)AND(((v0.c2)&(v0.c3)) COLLATE RTRIM))) ORDER BY LOWER(LIKE(vt2.c0, vt2.c0, '0')) ASC  NULLS FIRST, (((v0.c3 IN (v0.c2)))AND(CASE WHEN 0.7608310758664194 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 END));
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (((vt2.c0 COLLATE NOCASE)-(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)));
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (((((vt2.c0 COLLATE NOCASE)-(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)))AND(CASE WHEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0) NOTNULL) END))) ORDER BY CAST(vt2.c0 COLLATE BINARY AS REAL), (((x'1b', ((vt2.c1)*(vt2.c1))))=((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)), '*<6<㎂DY8'))), ((vt2.c0)AND(vt2.c0)) COLLATE NOCASE  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON ((((v0.c1)<>(vt0.c0)))OR(json_object('㩦', v0.c1, v0.c2))) WHERE (CAST(((v0.c2) NOT BETWEEN (vt0.c0) AND (vt2.c0)) AS BLOB)) ORDER BY ((v0.c2) NOT BETWEEN (0xb467d2f) AND (CAST(vt2.c1 AS BLOB))) ASC  NULLS LAST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)&(-1956065535)) ASC  NULLS FIRST, 'o}혗A]	H' COLLATE BINARY ASC;
SELECT DISTINCT * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON ((((v0.c1)!=(vt0.c0)))OR(json_object('㩦', v0.c1, v0.c2))) WHERE (((CAST(((v0.c2) NOT BETWEEN (vt0.c0) AND (vt2.c0)) AS BLOB))AND((+ (((vt2.c0)<>(vt2.c0))))))) ORDER BY ((v0.c2) NOT BETWEEN (189168943) AND (CAST(vt2.c1 AS BLOB))) ASC  NULLS LAST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)&(-1956065535)) ASC  NULLS FIRST, 'o}혗A]	H' COLLATE BINARY ASC LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON ((((v0.c1)!=(vt0.c0)))OR(json_object('㩦', v0.c1, v0.c2))) WHERE ((+ (((((((v0.c3)AND(v0.c0)))AND(v0.c1)))OR(1.291339797E9))))) ORDER BY ((v0.c2) NOT BETWEEN (0Xb467d2f) AND (CAST(vt2.c1 AS BLOB))) ASC  NULLS LAST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)&(0Xffffffff8b68cf01)) ASC  NULLS FIRST, 'o}혗A]	H' COLLATE BINARY ASC LIMIT 0x4;
SELECT ALL * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON ((((v0.c1)<>(vt0.c0)))OR(json_object('㩦', v0.c1, v0.c2))) WHERE (CAST(((v0.c2) NOT BETWEEN (vt0.c0) AND (vt2.c0)) AS BLOB)) ORDER BY ((v0.c2) NOT BETWEEN (0xb467d2f) AND (CAST(vt2.c1 AS BLOB))) ASC  NULLS LAST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)&(-1956065535)) ASC  NULLS FIRST, 'o}혗A]	H' COLLATE BINARY ASC;
SELECT DISTINCT * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON ((((v0.c1)!=(vt0.c0)))OR(json_object('㩦', v0.c1, v0.c2))) WHERE (((CAST(((v0.c2) NOT BETWEEN (vt0.c0) AND (vt2.c0)) AS BLOB))AND((+ (((vt2.c0)<>(vt2.c0))))))) ORDER BY ((v0.c2) NOT BETWEEN (189168943) AND (CAST(vt2.c1 AS BLOB))) ASC  NULLS LAST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)&(-1956065535)) ASC  NULLS FIRST, 'o}혗A]	H' COLLATE BINARY ASC LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON ((((v0.c1)!=(vt0.c0)))OR(json_object('㩦', v0.c1, v0.c2))) WHERE ((+ (((((((v0.c3)AND(v0.c0)))AND(v0.c1)))OR(1.291339797E9))))) ORDER BY ((v0.c2) NOT BETWEEN (0Xb467d2f) AND (CAST(vt2.c1 AS BLOB))) ASC  NULLS LAST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)&(0Xffffffff8b68cf01)) ASC  NULLS FIRST, 'o}혗A]	H' COLLATE BINARY ASC LIMIT 0x4;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((vt2.c1)OR(x'')))OR(v0.c3)))GLOB((~ (v0.c0)))));
SELECT * FROM v0, vt0, vt2 WHERE (((((((((vt2.c1)OR(x'')))OR(v0.c3)))GLOB((~ (v0.c0)))))AND(load_extension((((v0.c0))<((v0.c0))))))) LIMIT 0X3;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((vt2.c1)OR(x'')))OR(v0.c3)))GLOB((~ (v0.c0)))));
SELECT * FROM v0, vt0, vt2 WHERE (((((((((vt2.c1)OR(x'')))OR(v0.c3)))GLOB((~ (v0.c0)))))AND(load_extension((((v0.c0))<((v0.c0))))))) LIMIT 0X3;
SELECT ALL MAX(vt2.c0) FROM v0, vt2, vt0 WHERE ((((TRIM(DISTINCT vt0.c0, vt2.c0), (((v0.c0))>((x'')))))<=(((('#{c')IS(v0.c2)), CASE 0.5071679303625796  WHEN vt0.c0 THEN v0.c3 WHEN vt2.c1 THEN vt2.c1 END)))) ORDER BY ((((v0.c1) NOTNULL)) NOT BETWEEN ('1470920427') AND (0.2920352001684853)) DESC;
SELECT DISTINCT MAX(vt2.c0) FROM v0, vt2, vt0 WHERE ((((((TRIM(DISTINCT vt0.c0, vt2.c0), (((v0.c0))>((x'')))))==(((('#{c')IS(v0.c2)), CASE 0.5071679303625796  WHEN vt0.c0 THEN v0.c3 WHEN vt2.c1 THEN vt2.c1 END))))AND(((CAST(v0.c1 AS BLOB))>(vt2.c1))))) ORDER BY ((((v0.c1) NOTNULL)) NOT BETWEEN ('1470920427') AND (0.2920352001684853)) DESC LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM v0, vt2, vt0 WHERE ((((((vt2.c0, vt2.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c0, v0.c1))))>>((((v0.c0, v0.c0)) NOT BETWEEN ((v0.c0, vt0.c0)) AND ((v0.c3, v0.c1)))))) ORDER BY ((((v0.c1) NOTNULL)) NOT BETWEEN ('1470920427') AND (0.2920352001684853)) DESC LIMIT 0x0;
SELECT MIN(v0.c0) FROM v0 WHERE (CAST(CAST(v0.c3 AS REAL) AS INTEGER)) ORDER BY ABS(CAST(v0.c2 AS BLOB)) ASC, JULIANDAY((+ (v0.c3)), (((v0.c3))<((v0.c0))), NULL, (v0.c2 IN (v0.c2, ''))), v0.c3 DESC;
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((CAST(CAST(v0.c3 AS REAL) AS INTEGER))AND(x''))) ORDER BY (- ((~ (v0.c2))))  NULLS FIRST, CASE WHEN CASE WHEN v0.c3 THEN v0.c2 ELSE v0.c3 END THEN ((((((x'f27215')AND(v0.c0)))OR(v0.c3)))AND(v0.c3)) WHEN (v0.c3 IN (v0.c0)) THEN (((v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c1, v0.c0)) AND ((v0.c0, v0.c0, v0.c2))) WHEN ((((((((((v0.c0)OR(v0.c2)))OR(v0.c0)))OR(v0.c0)))OR(v0.c3)))OR(v0.c3)) THEN (~ (v0.c2)) WHEN (((v0.c1, v0.c2, '')) BETWEEN ((v0.c2, v0.c0, v0.c1)) AND ((v0.c1, v0.c2, v0.c0))) THEN ((((((v0.c0)AND(v0.c0)))AND(v0.c2)))AND(v0.c1)) WHEN (+ (v0.c2)) THEN (((v0.c0, v0.c1))>((v0.c0, v0.c0))) WHEN (v0.c1 IN ()) THEN ((((v0.c3)OR(0.7354794367041715)))OR('-144025520')) ELSE (((v0.c2, v0.c2, NULL, NULL, v0.c1)) NOT BETWEEN ((v0.c3, v0.c3, v0.c3, v0.c0, v0.c2)) AND ((v0.c1, v0.c1, v0.c1, v0.c2, v0.c1))) END ASC LIMIT 0x3 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE ('-941041463') ORDER BY (- ((~ (v0.c2))))  NULLS FIRST, CASE WHEN CASE WHEN v0.c3 THEN v0.c2 ELSE v0.c3 END THEN ((((((x'f27215')AND(v0.c0)))OR(v0.c3)))AND(v0.c3)) WHEN (v0.c3 IN (v0.c0)) THEN (((v0.c1, v0.c1, v0.c1)) NOT BETWEEN ((v0.c2, v0.c1, v0.c0)) AND ((v0.c0, v0.c0, v0.c2))) WHEN ((((((((((v0.c0)OR(v0.c2)))OR(v0.c0)))OR(v0.c0)))OR(v0.c3)))OR(v0.c3)) THEN (~ (v0.c2)) WHEN (((v0.c1, v0.c2, '')) BETWEEN ((v0.c2, v0.c0, v0.c1)) AND ((v0.c1, v0.c2, v0.c0))) THEN ((((((v0.c0)AND(v0.c0)))AND(v0.c2)))AND(v0.c1)) WHEN (+ (v0.c2)) THEN (((v0.c0, v0.c1))>((v0.c0, v0.c0))) WHEN (v0.c1 IN ()) THEN ((((v0.c3)OR(0.7354794367041715)))OR('-144025520')) ELSE (((v0.c2, v0.c2, NULL, NULL, v0.c1)) NOT BETWEEN ((v0.c3, v0.c3, v0.c3, v0.c0, v0.c2)) AND ((v0.c1, v0.c1, v0.c1, v0.c2, v0.c1))) END ASC LIMIT 0X3;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (CAST((- (vt2.c0)) AS NUMERIC)) ORDER BY ((vt2.c1)+((vt2.c1 IN ())))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN x'' WHEN vt0.c0 THEN NULL WHEN vt2.c0 THEN vt2.c0 END)||((- (vt2.c0)))) ASC, vt2.c1  NULLS FIRST, rtreenode((((vt0.c0, vt2.c0, vt2.c1, vt0.c0))!=((vt0.c0, vt0.c0, vt0.c0, ''))), vt2.c1 COLLATE BINARY);
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (((CAST((- (vt2.c0)) AS NUMERIC))AND(NULL))) ORDER BY ((vt2.c1)+((vt2.c1 IN ())))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN x'' WHEN vt0.c0 THEN NULL WHEN vt2.c0 THEN vt2.c0 END)||((- (vt2.c0)))) ASC, vt2.c1  NULLS FIRST, rtreenode((((vt0.c0, vt2.c0, vt2.c1, vt0.c0))<>((vt0.c0, vt0.c0, vt0.c0, ''))), vt2.c1 COLLATE BINARY) LIMIT 0x0;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (CAST((- (vt2.c0)) AS NUMERIC)) ORDER BY ((vt2.c1)+((vt2.c1 IN ())))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN x'' WHEN vt0.c0 THEN NULL WHEN vt2.c0 THEN vt2.c0 END)||((- (vt2.c0)))) ASC, vt2.c1  NULLS FIRST, rtreenode((((vt0.c0, vt2.c0, vt2.c1, vt0.c0))!=((vt0.c0, vt0.c0, vt0.c0, ''))), vt2.c1 COLLATE BINARY);
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (((CAST((- (vt2.c0)) AS NUMERIC))AND(NULL))) ORDER BY ((vt2.c1)+((vt2.c1 IN ())))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN x'' WHEN vt0.c0 THEN NULL WHEN vt2.c0 THEN vt2.c0 END)||((- (vt2.c0)))) ASC, vt2.c1  NULLS FIRST, rtreenode((((vt0.c0, vt2.c0, vt2.c1, vt0.c0))<>((vt0.c0, vt0.c0, vt0.c0, ''))), vt2.c1 COLLATE BINARY) LIMIT 0x0;
SELECT * FROM vt0 WHERE (1.7976931348623157E308);
SELECT DISTINCT * FROM vt0 WHERE (1.7976931348623157E308) ORDER BY (((vt0.c0 IN (vt0.c0, vt0.c0)))/(vt0.c0 COLLATE NOCASE))  NULLS LAST;
SELECT * FROM vt0 WHERE (1.7976931348623157E308);
SELECT DISTINCT * FROM vt0 WHERE (1.7976931348623157E308) ORDER BY (((vt0.c0 IN (vt0.c0, vt0.c0)))/(vt0.c0 COLLATE NOCASE))  NULLS LAST;
SELECT COUNT(*) FROM vt0 LEFT OUTER JOIN v0 ON CASE 0X4a5d399b  WHEN (((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c1))) THEN (+ (v0.c1)) WHEN CASE WHEN vt0.c0 THEN v0.c3 ELSE vt0.c0 END THEN ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) WHEN (((v0.c0))<((v0.c2))) THEN ((((((v0.c0)OR('1470920427')))OR(v0.c1)))AND(v0.c3)) WHEN CASE v0.c0  WHEN vt0.c0 THEN v0.c1 WHEN '-551752042' THEN v0.c2 ELSE v0.c0 END THEN ((v0.c3)OR(v0.c1)) ELSE (v0.c1 IN (v0.c2)) END WHERE ('-1398626860' COLLATE NOCASE);
SELECT ALL COUNT(*) FROM vt0 INNER JOIN v0 ON CASE 0x4a5d399b  WHEN (((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c1))) THEN (+ (v0.c1)) WHEN CASE WHEN vt0.c0 THEN v0.c3 ELSE vt0.c0 END THEN ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) WHEN (((v0.c0))<((v0.c2))) THEN ((((((v0.c0)OR('1470920427')))OR(v0.c1)))AND(v0.c3)) WHEN CASE v0.c0  WHEN vt0.c0 THEN v0.c1 WHEN '-551752042' THEN v0.c2 ELSE v0.c0 END THEN ((v0.c3)OR(v0.c1)) ELSE (v0.c1 IN (v0.c2)) END WHERE ((('-1398626860' COLLATE NOCASE)AND(((v0.c3)*(v0.c2)) COLLATE NOCASE))) ORDER BY 'K'  NULLS FIRST, (((((((((((v0.c1, v0.c2, v0.c2, vt0.c0))>((v0.c0, v0.c0, v0.c0, vt0.c0))))OR(((v0.c2)||(v0.c3)))))AND(CASE v0.c3  WHEN v0.c2 THEN v0.c3 WHEN vt0.c0 THEN x'' WHEN v0.c0 THEN v0.c2 END)))OR(TYPEOF(DISTINCT v0.c3))))OR(CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE 'F+[0ꗔzj' END)) DESC  NULLS FIRST LIMIT 0x2 INTERSECT SELECT COUNT(*) FROM vt0 INNER JOIN v0 ON CASE 1247623579  WHEN (((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c1))) THEN (+ (v0.c1)) WHEN CASE WHEN vt0.c0 THEN v0.c3 ELSE vt0.c0 END THEN ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) WHEN (((v0.c0))<((v0.c2))) THEN ((((((v0.c0)OR('1470920427')))OR(v0.c1)))AND(v0.c3)) WHEN CASE v0.c0  WHEN vt0.c0 THEN v0.c1 WHEN '-551752042' THEN v0.c2 ELSE v0.c0 END THEN ((v0.c3)OR(v0.c1)) ELSE (v0.c1 IN (v0.c2)) END WHERE ((- (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))))) ORDER BY 'K'  NULLS FIRST, (((((((((((v0.c1, v0.c2, v0.c2, vt0.c0))>((v0.c0, v0.c0, v0.c0, vt0.c0))))OR(((v0.c2)||(v0.c3)))))AND(CASE v0.c3  WHEN v0.c2 THEN v0.c3 WHEN vt0.c0 THEN x'' WHEN v0.c0 THEN v0.c2 END)))OR(TYPEOF(DISTINCT v0.c3))))OR(CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE 'F+[0ꗔzj' END)) DESC  NULLS FIRST LIMIT 0x2;
SELECT COUNT(*) FROM v0 WHERE (((QUOTE(v0.c3))IS(CASE v0.c1  WHEN v0.c3 THEN v0.c2 WHEN v0.c3 THEN v0.c0 END)));
SELECT COUNT(*) FROM v0 NOT INDEXED WHERE (((((QUOTE(v0.c3))IS(CASE v0.c1  WHEN v0.c3 THEN v0.c2 WHEN v0.c3 THEN v0.c0 END)))AND(CAST('I Sub' COLLATE BINARY AS REAL)))) INTERSECT SELECT COUNT(*) FROM v0 WHERE ('-268503340');
SELECT * FROM v0 WHERE ('665660588');
SELECT * FROM v0 WHERE ('665660588') ORDER BY ((x'625d6677ae')-(load_extension(v0.c1, v0.c3))) DESC  NULLS LAST LIMIT 0x1;
SELECT * FROM v0 WHERE ('665660588');
SELECT * FROM v0 WHERE ('665660588') ORDER BY ((x'625d6677ae')-(load_extension(v0.c1, v0.c3))) DESC  NULLS LAST LIMIT 0x1;
SELECT ALL MAX(v0.c3) FROM vt0, vt2, v0 WHERE (CASE CAST(vt2.c1 AS INTEGER)  WHEN (((vt0.c0, 0Xffffffffda1fa8a5))<>((vt2.c1, vt2.c0))) THEN (NULL IN ()) ELSE (- (v0.c0)) END);
SELECT DISTINCT MAX(v0.c3) FROM vt0, vt2, v0 WHERE (((CASE CAST(vt2.c1 AS INTEGER)  WHEN (((vt0.c0, 0xffffffffda1fa8a5))<((vt2.c1, vt2.c0))) THEN (NULL IN ()) ELSE (- (v0.c0)) END)AND(((((v0.c2)==(vt2.c1)))AND(x'4016'))))) ORDER BY ((CAST(vt0.c0 AS REAL))/(0.6440489233597119))  NULLS FIRST, ((LIKELIHOOD(2017635915, v0.c3))LIKE(((vt2.c1)IS(NULL)))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT MAX(v0.c3) FROM vt0, vt2, v0 WHERE (v0.c3) ORDER BY ((CAST(vt0.c0 AS REAL))/(0.6440489233597119))  NULLS FIRST, ((LIKELIHOOD(0x7842ae4b, v0.c3))LIKE(((vt2.c1)IS(NULL)))) ASC  NULLS FIRST;
SELECT * FROM v0 WHERE ((+ ((((v0.c0))<>((v0.c3))))));
SELECT ALL * FROM v0 WHERE ((+ ((((v0.c0))!=((v0.c3)))))) INTERSECT SELECT * FROM v0 WHERE ((((v0.c3, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS REAL), ((v0.c2)AND(v0.c0)))) AND (((v0.c0 IN ()), ((NULL) NOTNULL)))));
SELECT * FROM v0 WHERE ((+ ((((v0.c0))<>((v0.c3))))));
SELECT ALL * FROM v0 WHERE ((+ ((((v0.c0))!=((v0.c3)))))) INTERSECT SELECT * FROM v0 WHERE ((((v0.c3, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS REAL), ((v0.c2)AND(v0.c0)))) AND (((v0.c0 IN ()), ((NULL) NOTNULL)))));
SELECT * FROM vt0, vt2 WHERE (CASE WHEN vt0.c0 THEN (~ (vt2.c1)) WHEN CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END THEN CASE WHEN vt2.c1 THEN vt0.c0 END END) ORDER BY COALESCE(0x75d21e7f, ((vt2.c1)<>(vt2.c1)), vt2.c0, CAST(0.48135269775712275 AS REAL));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((CASE WHEN vt0.c0 THEN (~ (vt2.c1)) WHEN CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END THEN CASE WHEN vt2.c1 THEN vt0.c0 END END)AND(NULL))) ORDER BY (((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)), CAST(vt2.c0 AS INTEGER), vt2.c0 COLLATE BINARY))>(((('607633563')>(vt2.c0)), (((vt2.c1))<=((vt2.c0))), (((vt2.c1))<=((vt2.c0)))))) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (CASE ((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1))  WHEN vt2.c0 THEN ((vt2.c1)/(vt2.c0)) WHEN ((x'b25c') NOTNULL) THEN (NOT (vt2.c0)) END) ORDER BY (((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)), CAST(vt2.c0 AS INTEGER), vt2.c0 COLLATE BINARY))>(((('607633563')>(vt2.c0)), (((vt2.c1))<=((vt2.c0))), (((vt2.c1))<=((vt2.c0)))))) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt0, vt2 WHERE (CASE WHEN vt0.c0 THEN (~ (vt2.c1)) WHEN CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END THEN CASE WHEN vt2.c1 THEN vt0.c0 END END) ORDER BY COALESCE(0x75d21e7f, ((vt2.c1)<>(vt2.c1)), vt2.c0, CAST(0.48135269775712275 AS REAL));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((CASE WHEN vt0.c0 THEN (~ (vt2.c1)) WHEN CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END THEN CASE WHEN vt2.c1 THEN vt0.c0 END END)AND(NULL))) ORDER BY (((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)), CAST(vt2.c0 AS INTEGER), vt2.c0 COLLATE BINARY))>(((('607633563')>(vt2.c0)), (((vt2.c1))<=((vt2.c0))), (((vt2.c1))<=((vt2.c0)))))) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (CASE ((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1))  WHEN vt2.c0 THEN ((vt2.c1)/(vt2.c0)) WHEN ((x'b25c') NOTNULL) THEN (NOT (vt2.c0)) END) ORDER BY (((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)), CAST(vt2.c0 AS INTEGER), vt2.c0 COLLATE BINARY))>(((('607633563')>(vt2.c0)), (((vt2.c1))<=((vt2.c0))), (((vt2.c1))<=((vt2.c0)))))) ASC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM v0 WHERE ((v0.c2 IN ()));
SELECT ALL * FROM v0 WHERE ((v0.c2 IN ())) ORDER BY ((((v0.c1) NOTNULL)) NOT NULL) ASC  NULLS LAST, (((((v0.c2, v0.c3, v0.c1))<=((v0.c2, v0.c1, v0.c0)))) NOTNULL)  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0 WHERE ((v0.c2 IN ()));
SELECT ALL * FROM v0 WHERE ((v0.c2 IN ())) ORDER BY ((((v0.c1) NOTNULL)) NOT NULL) ASC  NULLS LAST, (((((v0.c2, v0.c3, v0.c1))<=((v0.c2, v0.c1, v0.c0)))) NOTNULL)  NULLS FIRST LIMIT 1;
SELECT MIN(vt2.c1) FROM vt0 NATURAL JOIN vt2 WHERE ((((vt2.c1)<(vt2.c0)) IN ()));
SELECT DISTINCT MIN(vt2.c1) FROM vt0 NATURAL JOIN vt2 WHERE ((((vt2.c1)<(vt2.c0)) IN ())) LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt0 NATURAL JOIN vt2 WHERE (CAST(vt2.c1 COLLATE BINARY AS BLOB)) LIMIT 0;
SELECT * FROM v0, vt0 NATURAL JOIN vt2 WHERE (((((v0.c1) IS TRUE))%(((v0.c2)<>(v0.c0)))));
SELECT DISTINCT * FROM v0, vt0 NATURAL JOIN vt2 WHERE (((((v0.c1) IS TRUE))%(((v0.c2)>(v0.c0))))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (vt2.c1)) AS REAL) DESC  NULLS FIRST, 'x
!*UUDI' ASC;
SELECT * FROM v0, vt0 NATURAL JOIN vt2 WHERE (((((v0.c1) IS TRUE))%(((v0.c2)<>(v0.c0)))));
SELECT DISTINCT * FROM v0, vt0 NATURAL JOIN vt2 WHERE (((((v0.c1) IS TRUE))%(((v0.c2)>(v0.c0))))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (vt2.c1)) AS REAL) DESC  NULLS FIRST, 'x
!*UUDI' ASC;
SELECT ALL MAX(vt2.c1) FROM vt0, vt2, v0 WHERE (((((vt2.c1) IS TRUE)) NOT BETWEEN (v0.c0) AND (((vt0.c0)<(vt0.c0)))));
SELECT DISTINCT MAX(vt2.c1) FROM vt0, vt2, v0 WHERE (((((vt2.c1) IS TRUE)) NOT BETWEEN (v0.c0) AND (((vt0.c0)!=(vt0.c0))))) LIMIT 0x1;
SELECT * FROM v0 WHERE ((((0Xffffffffd43c8046 IN (v0.c1)))IS NOT((v0.c0 IN (v0.c3))))) ORDER BY v0.c1, ((NULL)<=(((v0.c1)+(v0.c3)))) ASC;
SELECT DISTINCT * FROM v0 WHERE ((((((-734232506 IN (v0.c1)))IS NOT((v0.c0 IN (v0.c3)))))AND(v0.c2))) ORDER BY ((COALESCE(DISTINCT v0.c0, v0.c3, v0.c0))&((v0.c2 IN ()))) INTERSECT SELECT DISTINCT * FROM v0 WHERE (v0.c2) ORDER BY ((COALESCE(DISTINCT v0.c0, v0.c3, v0.c0))&((v0.c2 IN ())));
SELECT * FROM v0 WHERE ((((0Xffffffffd43c8046 IN (v0.c1)))IS NOT((v0.c0 IN (v0.c3))))) ORDER BY v0.c1, ((NULL)<=(((v0.c1)+(v0.c3)))) ASC;
SELECT DISTINCT * FROM v0 WHERE ((((((-734232506 IN (v0.c1)))IS NOT((v0.c0 IN (v0.c3)))))AND(v0.c2))) ORDER BY ((COALESCE(DISTINCT v0.c0, v0.c3, v0.c0))&((v0.c2 IN ()))) INTERSECT SELECT DISTINCT * FROM v0 WHERE (v0.c2) ORDER BY ((COALESCE(DISTINCT v0.c0, v0.c3, v0.c0))&((v0.c2 IN ())));
SELECT MIN(v0.c1) FROM v0, vt2, vt0 WHERE (CASE v0.c2  WHEN v0.c3 THEN v0.c0 ELSE vt0.c0 END COLLATE RTRIM);
SELECT MIN(v0.c1) FROM v0, vt2, vt0 WHERE (((CASE v0.c2  WHEN v0.c3 THEN v0.c0 ELSE vt0.c0 END COLLATE RTRIM)AND(((((((v0.c1))<=((vt2.c0))), ((v0.c0) NOTNULL), ((vt0.c0) NOT NULL)))>((((vt0.c0) IS TRUE), v0.c0 COLLATE RTRIM, (((v0.c2))>((vt2.c1))))))))) LIMIT 0x2 INTERSECT SELECT MIN(v0.c1) FROM v0, vt2 NOT INDEXED, vt0 WHERE (CASE (~ (v0.c2))  WHEN vt2.c1 COLLATE NOCASE THEN ((vt0.c0)>=(v0.c1)) WHEN ((vt2.c0) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN 0.5535893660128063 WHEN (((v0.c1))==((vt2.c1))) THEN CAST(v0.c3 AS INTEGER) ELSE ((v0.c1) BETWEEN (v0.c1) AND (v0.c0)) END) LIMIT 0x2;
SELECT MAX(v0.c2) FROM v0, vt2 WHERE (CASE WHEN v0.c3 THEN ((v0.c3)*(v0.c2)) WHEN ((((((((0.7100278653416723)OR(x'23a7')))OR(x'8a')))OR(v0.c2)))OR(v0.c3)) THEN vt2.c1 COLLATE RTRIM WHEN (vt2.c1 IN (v0.c0, vt2.c0)) THEN ((v0.c0) BETWEEN (v0.c0) AND (v0.c2)) END);
SELECT MAX(v0.c2) FROM v0, vt2 WHERE (CASE WHEN v0.c3 THEN ((v0.c3)*(v0.c2)) WHEN ((((((((0.7100278653416723)OR(x'23a7')))OR(x'8a')))OR(v0.c2)))OR(v0.c3)) THEN vt2.c1 COLLATE RTRIM WHEN (vt2.c1 IN (v0.c0, vt2.c0)) THEN ((v0.c0) BETWEEN (v0.c0) AND (v0.c2)) END) INTERSECT SELECT MAX(v0.c2) FROM v0, vt2 WHERE ((((v0.c0)) NOT BETWEEN ((((0.20340515105157597) IS TRUE))) AND ((v0.c3 COLLATE NOCASE))));
SELECT ALL * FROM vt0, v0, vt2 WHERE (((v0.c1)GLOB(v0.c3)) COLLATE RTRIM) ORDER BY (((v0.c2, v0.c0, v0.c0, v0.c1)) NOT BETWEEN (((v0.c1 IN (v0.c3)), (- (vt2.c1)), (+ (v0.c3)), ((((v0.c3)OR(vt2.c0)))OR(v0.c3)))) AND ((vt2.c1 COLLATE NOCASE, vt0.c0, ((v0.c3)+(v0.c2)), (((v0.c0, v0.c3))<=((v0.c2, v0.c0)))))), ((((v0.c0) IS TRUE))=(NULL));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((v0.c1)GLOB(v0.c3)) COLLATE RTRIM) ORDER BY CAST(v0.c1 COLLATE NOCASE AS TEXT) DESC  NULLS LAST, ((((((((v0.c1 COLLATE BINARY)OR(CASE WHEN v0.c1 THEN v0.c1 WHEN '' THEN v0.c0 WHEN vt0.c0 THEN v0.c2 ELSE v0.c1 END)))AND(((v0.c0) IS FALSE))))AND('mZ' COLLATE NOCASE)))OR(((v0.c1) NOT BETWEEN ('') AND (v0.c2)))), (x'' COLLATE BINARY IN ()) DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (TYPEOF(((((((((v0.c1)OR(vt0.c0)))OR(x'')))AND(vt2.c1)))AND(v0.c2)))) ORDER BY CAST(v0.c1 COLLATE NOCASE AS TEXT) DESC  NULLS LAST, ((((((((v0.c1 COLLATE BINARY)OR(CASE WHEN v0.c1 THEN v0.c1 WHEN '' THEN v0.c0 WHEN vt0.c0 THEN v0.c2 ELSE v0.c1 END)))AND(((v0.c0) IS FALSE))))AND('mZ' COLLATE NOCASE)))OR(((v0.c1) NOT BETWEEN ('') AND (v0.c2)))), (x'' COLLATE BINARY IN ()) DESC LIMIT 0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((v0.c1)GLOB(v0.c3)) COLLATE RTRIM) ORDER BY (((v0.c2, v0.c0, v0.c0, v0.c1)) NOT BETWEEN (((v0.c1 IN (v0.c3)), (- (vt2.c1)), (+ (v0.c3)), ((((v0.c3)OR(vt2.c0)))OR(v0.c3)))) AND ((vt2.c1 COLLATE NOCASE, vt0.c0, ((v0.c3)+(v0.c2)), (((v0.c0, v0.c3))<=((v0.c2, v0.c0)))))), ((((v0.c0) IS TRUE))=(NULL));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((v0.c1)GLOB(v0.c3)) COLLATE RTRIM) ORDER BY CAST(v0.c1 COLLATE NOCASE AS TEXT) DESC  NULLS LAST, ((((((((v0.c1 COLLATE BINARY)OR(CASE WHEN v0.c1 THEN v0.c1 WHEN '' THEN v0.c0 WHEN vt0.c0 THEN v0.c2 ELSE v0.c1 END)))AND(((v0.c0) IS FALSE))))AND('mZ' COLLATE NOCASE)))OR(((v0.c1) NOT BETWEEN ('') AND (v0.c2)))), (x'' COLLATE BINARY IN ()) DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (TYPEOF(((((((((v0.c1)OR(vt0.c0)))OR(x'')))AND(vt2.c1)))AND(v0.c2)))) ORDER BY CAST(v0.c1 COLLATE NOCASE AS TEXT) DESC  NULLS LAST, ((((((((v0.c1 COLLATE BINARY)OR(CASE WHEN v0.c1 THEN v0.c1 WHEN '' THEN v0.c0 WHEN vt0.c0 THEN v0.c2 ELSE v0.c1 END)))AND(((v0.c0) IS FALSE))))AND('mZ' COLLATE NOCASE)))OR(((v0.c1) NOT BETWEEN ('') AND (v0.c2)))), (x'' COLLATE BINARY IN ()) DESC LIMIT 0;
SELECT ALL * FROM v0 NOT INDEXED WHERE ((((v0.c0, v0.c1, v0.c1, v0.c3)) BETWEEN ((v0.c2 COLLATE BINARY, CAST(v0.c2 AS INTEGER), v0.c2, v0.c0)) AND ((LIKE(v0.c1, v0.c0, '\'), (('-574332796') BETWEEN (v0.c0) AND (v0.c1)), (- (v0.c1)), v0.c0))));
SELECT * FROM v0 WHERE ((((v0.c0, v0.c1, v0.c1, v0.c3)) BETWEEN ((v0.c2 COLLATE BINARY, CAST(v0.c2 AS INTEGER), v0.c2, v0.c0)) AND ((LIKE(v0.c1, v0.c0, '\'), (('-574332796') BETWEEN (v0.c0) AND (v0.c1)), (- (v0.c1)), v0.c0)))) ORDER BY (((((((((('쑘')AND(load_extension(v0.c0))))AND(CAST(v0.c1 AS INTEGER))))OR(((v0.c1)GLOB(v0.c3)))))AND(((v0.c1)IS(v0.c3)))))OR(((v0.c3)OR(v0.c2)))), ((v0.c1 COLLATE NOCASE) BETWEEN (SUBSTR(v0.c2, v0.c3)) AND (('BD뷽' IN ()))) DESC LIMIT 1 INTERSECT SELECT ALL * FROM v0 WHERE ((((CAST(v0.c3 AS NUMERIC), ((v0.c2)<=(v0.c0)), CAST(x'3769eabb' AS BLOB)))>=((v0.c3, TRIM(v0.c2, NULL), (((v0.c2, v0.c0, v0.c2, v0.c0, v0.c1)) NOT BETWEEN ((v0.c0, v0.c3, v0.c2, v0.c0, v0.c0)) AND ((v0.c1, v0.c2, v0.c3, v0.c2, v0.c1))))))) ORDER BY (((((((((('쑘')AND(load_extension(v0.c0))))AND(CAST(v0.c1 AS INTEGER))))OR(((v0.c1)GLOB(v0.c3)))))AND(((v0.c1)IS(v0.c3)))))OR(((v0.c3)OR(v0.c2)))), ((v0.c1 COLLATE NOCASE) BETWEEN (SUBSTR(v0.c2, v0.c3)) AND (('BD뷽' IN ()))) DESC LIMIT 0X1;
SELECT ALL * FROM v0 NOT INDEXED WHERE ((((v0.c0, v0.c1, v0.c1, v0.c3)) BETWEEN ((v0.c2 COLLATE BINARY, CAST(v0.c2 AS INTEGER), v0.c2, v0.c0)) AND ((LIKE(v0.c1, v0.c0, '\'), (('-574332796') BETWEEN (v0.c0) AND (v0.c1)), (- (v0.c1)), v0.c0))));
SELECT * FROM v0 WHERE ((((v0.c0, v0.c1, v0.c1, v0.c3)) BETWEEN ((v0.c2 COLLATE BINARY, CAST(v0.c2 AS INTEGER), v0.c2, v0.c0)) AND ((LIKE(v0.c1, v0.c0, '\'), (('-574332796') BETWEEN (v0.c0) AND (v0.c1)), (- (v0.c1)), v0.c0)))) ORDER BY (((((((((('쑘')AND(load_extension(v0.c0))))AND(CAST(v0.c1 AS INTEGER))))OR(((v0.c1)GLOB(v0.c3)))))AND(((v0.c1)IS(v0.c3)))))OR(((v0.c3)OR(v0.c2)))), ((v0.c1 COLLATE NOCASE) BETWEEN (SUBSTR(v0.c2, v0.c3)) AND (('BD뷽' IN ()))) DESC LIMIT 1 INTERSECT SELECT ALL * FROM v0 WHERE ((((CAST(v0.c3 AS NUMERIC), ((v0.c2)<=(v0.c0)), CAST(x'3769eabb' AS BLOB)))>=((v0.c3, TRIM(v0.c2, NULL), (((v0.c2, v0.c0, v0.c2, v0.c0, v0.c1)) NOT BETWEEN ((v0.c0, v0.c3, v0.c2, v0.c0, v0.c0)) AND ((v0.c1, v0.c2, v0.c3, v0.c2, v0.c1))))))) ORDER BY (((((((((('쑘')AND(load_extension(v0.c0))))AND(CAST(v0.c1 AS INTEGER))))OR(((v0.c1)GLOB(v0.c3)))))AND(((v0.c1)IS(v0.c3)))))OR(((v0.c3)OR(v0.c2)))), ((v0.c1 COLLATE NOCASE) BETWEEN (SUBSTR(v0.c2, v0.c3)) AND (('BD뷽' IN ()))) DESC LIMIT 0X1;
SELECT ALL * FROM vt2 WHERE (((((((((CASE WHEN vt2.c0 THEN vt2.c1 END)AND((((vt2.c1, vt2.c1))==((vt2.c1, vt2.c1))))))OR(((vt2.c1)AND(vt2.c0)))))OR(NULL)))AND(vt2.c0 COLLATE BINARY)));
SELECT DISTINCT * FROM vt2 WHERE (((((((((((CASE WHEN vt2.c0 THEN vt2.c1 END)AND((((vt2.c1, vt2.c1))=((vt2.c1, vt2.c1))))))OR(((vt2.c1)AND(vt2.c0)))))OR(NULL)))AND(vt2.c0 COLLATE BINARY)))AND(((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0))) IS TRUE)))) ORDER BY ((((((((0.2920352001684853)AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c0))) BETWEEN (x'') AND (CAST(vt2.c1 AS INTEGER))) DESC, TYPEOF(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN '3o' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)  NULLS LAST, '955661194' DESC INTERSECT SELECT DISTINCT * FROM vt2 WHERE (NULL) ORDER BY ((((((((0.2920352001684853)AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c0))) BETWEEN (x'') AND (CAST(vt2.c1 AS INTEGER))) DESC, TYPEOF(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN '3o' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)  NULLS LAST, '955661194' DESC;
SELECT ALL * FROM vt2 WHERE (((((((((CASE WHEN vt2.c0 THEN vt2.c1 END)AND((((vt2.c1, vt2.c1))==((vt2.c1, vt2.c1))))))OR(((vt2.c1)AND(vt2.c0)))))OR(NULL)))AND(vt2.c0 COLLATE BINARY)));
SELECT DISTINCT * FROM vt2 WHERE (((((((((((CASE WHEN vt2.c0 THEN vt2.c1 END)AND((((vt2.c1, vt2.c1))=((vt2.c1, vt2.c1))))))OR(((vt2.c1)AND(vt2.c0)))))OR(NULL)))AND(vt2.c0 COLLATE BINARY)))AND(((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0))) IS TRUE)))) ORDER BY ((((((((0.2920352001684853)AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c0))) BETWEEN (x'') AND (CAST(vt2.c1 AS INTEGER))) DESC, TYPEOF(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN '3o' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)  NULLS LAST, '955661194' DESC INTERSECT SELECT DISTINCT * FROM vt2 WHERE (NULL) ORDER BY ((((((((0.2920352001684853)AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c0))) BETWEEN (x'') AND (CAST(vt2.c1 AS INTEGER))) DESC, TYPEOF(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN '3o' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)  NULLS LAST, '955661194' DESC;
SELECT ALL MAX(vt0.c0) FROM v0, vt2, vt0 WHERE ((~ (COALESCE(vt0.c0, v0.c1, v0.c1, '-386582235', vt2.c1)))) ORDER BY ((((((((((((vt0.c0)AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))AND(vt0.c0)))%((0.7435718392262334 IN ())))  NULLS FIRST, UPPER(((v0.c0)<<('-1872550819'))) DESC;
SELECT DISTINCT MAX(vt0.c0) FROM v0, vt2, vt0 WHERE ((((~ (COALESCE(vt0.c0, v0.c1, v0.c1, '-386582235', vt2.c1))))AND(((((v0.c2)OR(v0.c2)))GLOB(vt0.c0 COLLATE BINARY))))) ORDER BY ((((((((((((vt0.c0)AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))AND(vt0.c0)))%((0.7435718392262334 IN ())))  NULLS FIRST, UPPER(((v0.c0)<<('-1872550819'))) DESC LIMIT 0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c3) ISNULL)) IS TRUE)) ORDER BY CAST((((vt0.c0)) BETWEEN ((v0.c0)) AND ((0.2497327652228455))) AS INTEGER) DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c3) ISNULL)) IS TRUE)) ORDER BY CAST((((vt0.c0)) BETWEEN ((v0.c0)) AND ((0.2497327652228455))) AS INTEGER) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c3) ISNULL)) IS TRUE)) ORDER BY CAST((((vt0.c0)) BETWEEN ((v0.c0)) AND ((0.2497327652228455))) AS INTEGER) DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c3) ISNULL)) IS TRUE)) ORDER BY CAST((((vt0.c0)) BETWEEN ((v0.c0)) AND ((0.2497327652228455))) AS INTEGER) DESC  NULLS LAST LIMIT 1;
SELECT ALL MIN(v0.c1) FROM vt2 LEFT OUTER JOIN v0 ON NULL INNER JOIN vt0 ON ((CAST(v0.c2 AS REAL))<>(v0.c2 COLLATE NOCASE)) WHERE (((((((((((CAST(vt0.c0 AS NUMERIC))OR((vt0.c0 IN (v0.c1)))))OR(v0.c2)))OR(((vt2.c1) NOTNULL))))OR(((v0.c2) ISNULL))))AND(CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END)));
SELECT ALL MIN(v0.c1) FROM vt2 INNER JOIN v0 ON NULL INNER JOIN vt0 ON ((CAST(v0.c2 AS REAL))<>(v0.c2 COLLATE NOCASE)) WHERE (((((((((((CAST(vt0.c0 AS NUMERIC))OR((vt0.c0 IN (v0.c1)))))OR(v0.c2)))OR(((vt2.c1) NOTNULL))))OR(((v0.c2) ISNULL))))AND(CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END)));
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) COLLATE BINARY) ORDER BY vt2.c0 ASC, (vt2.c0 COLLATE BINARY IN ((((vt2.c0))<((vt2.c1)))));
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) COLLATE BINARY)AND(((vt2.c0) IS FALSE)))) ORDER BY LIKELIHOOD((~ (vt2.c0)), ((vt2.c1) NOTNULL)) DESC LIMIT 0;
SELECT MIN(vt0.c0) FROM vt0, vt2 WHERE ('-937369626') ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN 0xffffffffd11634d0 WHEN NULL THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)<<((~ (vt0.c0))))  NULLS FIRST;
SELECT MIN(vt0.c0) FROM vt0, vt2 WHERE ((('-937369626')AND(CAST(((vt2.c1) IS FALSE) AS BLOB)))) ORDER BY ((0.3236419518120929) BETWEEN (((vt2.c0) BETWEEN (vt2.c0) AND (vt0.c0))) AND (((vt0.c0) IS TRUE))) ASC  NULLS FIRST;
SELECT ALL MIN(v0.c2) FROM v0 WHERE (CASE v0.c0  WHEN v0.c1 COLLATE RTRIM THEN CASE v0.c2  WHEN NULL THEN v0.c2 ELSE v0.c3 END WHEN TYPEOF(v0.c2) THEN ((v0.c0)+(v0.c2)) ELSE ((-5.74332796E8) BETWEEN (v0.c1) AND (v0.c1)) END) ORDER BY NULL, ((((v0.c3)<<(v0.c2))) NOT BETWEEN (((v0.c0)GLOB(v0.c2))) AND (((v0.c2)*(v0.c0))))  NULLS FIRST, (NOT (LIKELY(v0.c2))) ASC  NULLS LAST;
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE (((CASE v0.c0  WHEN v0.c1 COLLATE RTRIM THEN CASE v0.c2  WHEN NULL THEN v0.c2 ELSE v0.c3 END WHEN TYPEOF(v0.c2) THEN ((v0.c0)+(v0.c2)) ELSE ((-5.74332796E8) BETWEEN (v0.c1) AND (v0.c1)) END)AND((v0.c1 IN ()) COLLATE RTRIM))) ORDER BY ((v0.c3)<(CAST(v0.c2 AS REAL)))  NULLS FIRST, (NOT (TRIM(DISTINCT v0.c2))) DESC, v0.c0 DESC LIMIT 0;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE ((((((((((v0.c0, v0.c1, v0.c1, v0.c1))>((vt0.c0, 0.7019252105488037, 0.9025381487157186, v0.c2))))OR(NULL)))OR('%U+쩢0ꅿ')))OR((v0.c1 IN ())))) ORDER BY ((v0.c2 COLLATE BINARY)||(CAST(v0.c1 AS TEXT))), (((v0.c1)||(vt2.c1)) IN ()), CASE WHEN v0.c3 THEN ((v0.c2)/(v0.c0)) END ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 NOT INDEXED WHERE ((((((((((v0.c0, v0.c1, v0.c1, v0.c1))>((vt0.c0, 0.7019252105488037, 0.9025381487157186, v0.c2))))OR(NULL)))OR('%U+쩢0ꅿ')))OR((v0.c1 IN ())))) ORDER BY ((v0.c2 COLLATE BINARY)||(CAST(v0.c1 AS TEXT))), (((v0.c1)||(vt2.c1)) IN ()), CASE WHEN v0.c3 THEN ((v0.c2)/(v0.c0)) END ASC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0 NOT INDEXED, v0 WHERE (json_quote(((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c1)))) ORDER BY ((v0.c2 COLLATE BINARY)||(CAST(v0.c1 AS TEXT))), (((v0.c1)||(vt2.c1)) IN ()), CASE WHEN v0.c3 THEN ((v0.c2)/(v0.c0)) END ASC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c0) ISNULL)) BETWEEN (COALESCE(vt0.c0, vt2.c1, vt0.c0, vt2.c1)) AND (CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY CAST(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS BLOB) ASC, (NOT ((NOT (vt2.c1)))) ASC;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c0) ISNULL)) BETWEEN (COALESCE(vt0.c0, vt2.c1, vt0.c0, vt2.c1)) AND (CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY CAST(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS BLOB) ASC, (NOT ((NOT (vt2.c1)))) ASC INTERSECT SELECT * FROM vt2, vt0 WHERE ((((~ (vt0.c0)))AND((NOT (vt2.c1))))) ORDER BY CAST(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS BLOB) ASC, (NOT ((NOT (vt2.c1)))) ASC;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c0) ISNULL)) BETWEEN (COALESCE(vt0.c0, vt2.c1, vt0.c0, vt2.c1)) AND (CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY CAST(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS BLOB) ASC, (NOT ((NOT (vt2.c1)))) ASC;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c0) ISNULL)) BETWEEN (COALESCE(vt0.c0, vt2.c1, vt0.c0, vt2.c1)) AND (CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY CAST(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS BLOB) ASC, (NOT ((NOT (vt2.c1)))) ASC INTERSECT SELECT * FROM vt2, vt0 WHERE ((((~ (vt0.c0)))AND((NOT (vt2.c1))))) ORDER BY CAST(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS BLOB) ASC, (NOT ((NOT (vt2.c1)))) ASC;
SELECT ALL * FROM v0, vt2 WHERE (((v0.c0 COLLATE NOCASE)&((((v0.c2, v0.c2, vt2.c1, vt2.c1)) BETWEEN ((v0.c2, v0.c3, v0.c0, v0.c0)) AND ((x'21', v0.c1, v0.c1, v0.c3))))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((v0.c0 COLLATE NOCASE)&((((v0.c2, v0.c2, vt2.c1, vt2.c1)) BETWEEN ((v0.c2, v0.c3, v0.c0, v0.c0)) AND ((x'21', v0.c1, v0.c1, v0.c3)))))) LIMIT 0x0;
SELECT ALL * FROM v0, vt2 WHERE (((v0.c0 COLLATE NOCASE)&((((v0.c2, v0.c2, vt2.c1, vt2.c1)) BETWEEN ((v0.c2, v0.c3, v0.c0, v0.c0)) AND ((x'21', v0.c1, v0.c1, v0.c3))))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((v0.c0 COLLATE NOCASE)&((((v0.c2, v0.c2, vt2.c1, vt2.c1)) BETWEEN ((v0.c2, v0.c3, v0.c0, v0.c0)) AND ((x'21', v0.c1, v0.c1, v0.c3)))))) LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((json_quote(vt2.c1))!=(((v0.c2)>(v0.c1)))));
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((((json_quote(vt2.c1))<>(((v0.c2)>(v0.c1)))))AND((+ (((v0.c2) NOTNULL)))))) ORDER BY (((((((v0.c3)OR(v0.c1)))OR(v0.c3)), (vt0.c0 IN (v0.c1))))<((ROUND(vt2.c1, v0.c2), CAST(v0.c1 AS BLOB))))  NULLS FIRST, x''  NULLS LAST, ((((((vt2.c1, vt0.c0, '-2127914432', v0.c2, vt2.c0, vt2.c1))<((vt2.c1, v0.c3, v0.c2, -1.607669206E9, v0.c3, 0.26499007313964207))), CAST(v0.c0 AS NUMERIC), ((vt0.c0)IS(vt2.c0)), ((((((((((((NULL)OR(vt2.c1)))OR(vt2.c0)))OR(v0.c0)))OR(vt2.c1)))AND(v0.c3)))AND(v0.c1)), (((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c0)))))>(((+ (v0.c3)), (NOT (vt2.c0)), CASE WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c3 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN '1190017638' ELSE '708305761' END, CAST(v0.c1 AS BLOB), (((v0.c2)) NOT BETWEEN ((vt0.c0)) AND ((v0.c0)))))) LIMIT 2 INTERSECT SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (IFNULL(((((((((vt0.c0)OR(v0.c3)))AND('OXiZcB}c2')))AND(v0.c0)))OR(vt2.c1)), v0.c0)) ORDER BY (((((((v0.c3)OR(v0.c1)))OR(v0.c3)), (vt0.c0 IN (v0.c1))))<((ROUND(vt2.c1, v0.c2), CAST(v0.c1 AS BLOB))))  NULLS FIRST, x''  NULLS LAST, ((((((vt2.c1, vt0.c0, '-2127914432', v0.c2, vt2.c0, vt2.c1))<((vt2.c1, v0.c3, v0.c2, -1.607669206E9, v0.c3, 0.26499007313964207))), CAST(v0.c0 AS NUMERIC), ((vt0.c0)IS(vt2.c0)), ((((((((((((NULL)OR(vt2.c1)))OR(vt2.c0)))OR(v0.c0)))OR(vt2.c1)))AND(v0.c3)))AND(v0.c1)), (((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c0)))))>(((+ (v0.c3)), (NOT (vt2.c0)), CASE WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c3 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN '1190017638' ELSE '708305761' END, CAST(v0.c1 AS BLOB), (((v0.c2)) NOT BETWEEN ((vt0.c0)) AND ((v0.c0)))))) LIMIT 0x2;
SELECT ALL MIN(v0.c1) FROM v0, vt2 WHERE (((((((((v0.c1 COLLATE RTRIM)AND(((v0.c2)IS(v0.c3)))))AND(CASE WHEN vt2.c0 THEN vt2.c1 END)))AND(((vt2.c1)/(7.9533117E8)))))OR(((vt2.c1) IS TRUE))));
SELECT DISTINCT MIN(v0.c1) FROM v0, vt2 WHERE (((((((((v0.c1 COLLATE RTRIM)AND(((v0.c2)IS(v0.c3)))))AND(CASE WHEN vt2.c0 THEN vt2.c1 END)))AND(((vt2.c1)/(7.9533117E8)))))OR(((vt2.c1) IS TRUE))));
SELECT * FROM v0 INNER JOIN vt2 ON v0.c3 WHERE (((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2))) ISNULL)) ORDER BY ((((((((v0.c1)OR(vt2.c0)))AND(vt2.c0)))OR(v0.c3))) BETWEEN ((~ (v0.c2))) AND ((((v0.c0, vt2.c1))<((NULL, v0.c3)))))  NULLS FIRST, '1947377964' ASC;
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON v0.c3 WHERE (((((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2))) ISNULL))AND(((((v0.c3)|(v0.c2))) ISNULL)))) ORDER BY ((((((((v0.c1)OR(vt2.c0)))AND(vt2.c0)))OR(v0.c3))) BETWEEN ((~ (v0.c2))) AND ((((v0.c0, vt2.c1))<((NULL, v0.c3)))))  NULLS FIRST, '1947377964' ASC INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON v0.c3 WHERE (CAST(x'41' AS REAL)) ORDER BY ((((((((v0.c1)OR(vt2.c0)))AND(vt2.c0)))OR(v0.c3))) BETWEEN ((~ (v0.c2))) AND ((((v0.c0, vt2.c1))<((NULL, v0.c3)))))  NULLS FIRST, '1947377964' ASC;
SELECT * FROM v0 INNER JOIN vt2 ON v0.c3 WHERE (((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2))) ISNULL)) ORDER BY ((((((((v0.c1)OR(vt2.c0)))AND(vt2.c0)))OR(v0.c3))) BETWEEN ((~ (v0.c2))) AND ((((v0.c0, vt2.c1))<((NULL, v0.c3)))))  NULLS FIRST, '1947377964' ASC;
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON v0.c3 WHERE (((((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2))) ISNULL))AND(((((v0.c3)|(v0.c2))) ISNULL)))) ORDER BY ((((((((v0.c1)OR(vt2.c0)))AND(vt2.c0)))OR(v0.c3))) BETWEEN ((~ (v0.c2))) AND ((((v0.c0, vt2.c1))<((NULL, v0.c3)))))  NULLS FIRST, '1947377964' ASC INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON v0.c3 WHERE (CAST(x'41' AS REAL)) ORDER BY ((((((((v0.c1)OR(vt2.c0)))AND(vt2.c0)))OR(v0.c3))) BETWEEN ((~ (v0.c2))) AND ((((v0.c0, vt2.c1))<((NULL, v0.c3)))))  NULLS FIRST, '1947377964' ASC;
SELECT ALL MIN(vt2.c0) FROM v0, vt0, vt2 WHERE ((((v0.c3, v0.c2)) BETWEEN ((v0.c0, CAST(v0.c3 AS TEXT))) AND ((v0.c1, vt2.c1 COLLATE NOCASE))));
SELECT ALL MIN(vt2.c0) FROM v0, vt0, vt2 WHERE ((((((v0.c3, v0.c2)) BETWEEN ((v0.c0, CAST(v0.c3 AS TEXT))) AND ((v0.c1, vt2.c1 COLLATE NOCASE))))AND(CAST(CAST(v0.c3 AS TEXT) AS NUMERIC)))) ORDER BY (+ (CASE v0.c1  WHEN v0.c2 THEN v0.c1 END))  NULLS LAST LIMIT 4;
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE (((((vt0.c0)<=(v0.c2)))>(CASE v0.c3  WHEN v0.c2 THEN vt2.c0 WHEN vt2.c1 THEN x'58' WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c0 END)));
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((((((vt0.c0)=(v0.c2)))>(CASE v0.c3  WHEN v0.c2 THEN vt2.c0 WHEN vt2.c1 THEN x'58' WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c0 END)))AND(((LIKELIHOOD(DISTINCT v0.c1, vt0.c0)) BETWEEN (((vt0.c0) ISNULL)) AND (((((((((((((((v0.c3)OR(vt2.c1)))OR(v0.c1)))OR(v0.c2)))AND(v0.c1)))AND(v0.c0)))OR(v0.c3)))AND(v0.c3))))))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((((v0.c0)%(v0.c1)))!=(((v0.c1)|(v0.c0)))));
SELECT COUNT(*) FROM v0 WHERE (TRIM(((v0.c1) IS FALSE), CAST(0.7435718392262334 AS NUMERIC))) ORDER BY (~ (v0.c1)) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (TRIM(((v0.c1) IS FALSE), CAST(0.7435718392262334 AS NUMERIC))) ORDER BY (((v0.c0, v0.c1)) BETWEEN ((((v0.c0) IS TRUE), 0.2108925113409189)) AND ((CASE v0.c2  WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c3 END, (((v0.c1))=((v0.c3))))))  NULLS FIRST, (((v0.c0)) BETWEEN (((NOT (v0.c3)))) AND ((CAST(v0.c2 AS NUMERIC))))  NULLS FIRST, ((((+ (NULL)), 9.55661194E8, ((v0.c0)*(v0.c3))))!=((CASE v0.c3  WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 WHEN NULL THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END, ((v0.c3)/(v0.c0)), ((v0.c2)>>(NULL))))) DESC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((+ (v0.c0))) NOTNULL)) ORDER BY (((v0.c0, v0.c1)) BETWEEN ((((v0.c0) IS TRUE), 0.2108925113409189)) AND ((CASE v0.c2  WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c3 END, (((v0.c1))=((v0.c3))))))  NULLS FIRST, (((v0.c0)) BETWEEN (((NOT (v0.c3)))) AND ((CAST(v0.c2 AS NUMERIC))))  NULLS FIRST, ((((+ (NULL)), 9.55661194E8, ((v0.c0)*(v0.c3))))<>((CASE v0.c3  WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 WHEN NULL THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END, ((v0.c3)/(v0.c0)), ((v0.c2)>>(NULL))))) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt0 LEFT OUTER JOIN v0 ON (((((((((((v0.c1, 0.8051170643003698, v0.c1))>((v0.c1, v0.c1, v0.c2))))OR(CAST(v0.c0 AS BLOB))))OR(v0.c0 COLLATE NOCASE)))AND((v0.c3 IN (vt0.c0)))))AND(((v0.c3) IS FALSE))) WHERE (TRIM(v0.c3)) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c3)) AS INTEGER)  NULLS FIRST, (((v0.c0)) BETWEEN ((v0.c2)) AND (((v0.c3 IN ('0.9873959024305637')))))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 INNER JOIN v0 ON (((((((((((v0.c1, 0.8051170643003698, v0.c1))>((v0.c1, v0.c1, v0.c2))))OR(CAST(v0.c0 AS BLOB))))OR(v0.c0 COLLATE NOCASE)))AND((v0.c3 IN (vt0.c0)))))AND(((v0.c3) IS FALSE))) WHERE (((TRIM(v0.c3))AND(vt0.c0))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c3)) AS INTEGER)  NULLS FIRST, (((v0.c0)) BETWEEN ((v0.c2)) AND (((v0.c3 IN ('0.9873959024305637')))))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 INNER JOIN v0 ON (((((((((((v0.c1, 0.8051170643003698, v0.c1))>((v0.c1, v0.c1, v0.c2))))OR(CAST(v0.c0 AS BLOB))))OR(v0.c0 COLLATE NOCASE)))AND((v0.c3 IN (vt0.c0)))))AND(((v0.c3) IS FALSE))) WHERE ((((NULL, v0.c2, v0.c1)) NOT BETWEEN (((~ (NULL)), (v0.c3 IN ()), v0.c3)) AND ((((v0.c1)AND(vt0.c0)), TRIM(v0.c2, v0.c3), (NOT (v0.c2)))))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c3)) AS INTEGER)  NULLS FIRST, (((v0.c0)) BETWEEN ((v0.c2)) AND (((v0.c3 IN ('0.9873959024305637')))))  NULLS LAST;
SELECT * FROM v0 WHERE (TOTAL_CHANGES()) ORDER BY (((((((v0.c1)OR(v0.c2)))AND(v0.c2))))<=(('D[]'))) DESC  NULLS LAST, ABS(DISTINCT CAST(0.4077157985926282 AS INTEGER));
SELECT DISTINCT * FROM v0 WHERE (((TOTAL_CHANGES())AND(((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))OR(v0.c2))) ISNULL)))) ORDER BY (((((((v0.c1)OR(v0.c2)))AND(v0.c2))))<=(('D[]'))) DESC  NULLS LAST, ABS(DISTINCT CAST(0.4077157985926282 AS INTEGER)) INTERSECT SELECT DISTINCT * FROM v0 WHERE (CASE (NOT (v0.c3))  WHEN (((v0.c0, v0.c0, v0.c3))<((0xfffffffff76a5850, v0.c0, v0.c1))) THEN v0.c2 WHEN (~ (v0.c3)) THEN json_type(v0.c3) WHEN ((v0.c3) IS TRUE) THEN v0.c0 COLLATE NOCASE END) ORDER BY (((((((v0.c1)OR(v0.c2)))AND(v0.c2))))<=(('D[]'))) DESC  NULLS LAST, ABS(DISTINCT CAST(0.4077157985926282 AS INTEGER));
SELECT * FROM v0 WHERE (TOTAL_CHANGES()) ORDER BY (((((((v0.c1)OR(v0.c2)))AND(v0.c2))))<=(('D[]'))) DESC  NULLS LAST, ABS(DISTINCT CAST(0.4077157985926282 AS INTEGER));
SELECT DISTINCT * FROM v0 WHERE (((TOTAL_CHANGES())AND(((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))OR(v0.c2))) ISNULL)))) ORDER BY (((((((v0.c1)OR(v0.c2)))AND(v0.c2))))<=(('D[]'))) DESC  NULLS LAST, ABS(DISTINCT CAST(0.4077157985926282 AS INTEGER)) INTERSECT SELECT DISTINCT * FROM v0 WHERE (CASE (NOT (v0.c3))  WHEN (((v0.c0, v0.c0, v0.c3))<((0xfffffffff76a5850, v0.c0, v0.c1))) THEN v0.c2 WHEN (~ (v0.c3)) THEN json_type(v0.c3) WHEN ((v0.c3) IS TRUE) THEN v0.c0 COLLATE NOCASE END) ORDER BY (((((((v0.c1)OR(v0.c2)))AND(v0.c2))))<=(('D[]'))) DESC  NULLS LAST, ABS(DISTINCT CAST(0.4077157985926282 AS INTEGER));
SELECT * FROM vt2 NOT INDEXED, v0, vt0 WHERE (((((((((UPPER(v0.c0))AND(((vt2.c1)>(v0.c0)))))AND(((((v0.c2)OR(v0.c1)))OR(v0.c2)))))AND(CASE WHEN vt0.c0 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c3 END)))AND(load_extension(v0.c2))));
SELECT * FROM vt2, v0, vt0 WHERE (((((((((UPPER(v0.c0))AND(((vt2.c1)>(v0.c0)))))AND(((((v0.c2)OR(v0.c1)))OR(v0.c2)))))AND(CASE WHEN vt0.c0 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c3 END)))AND(load_extension(v0.c2)))) LIMIT 2;
SELECT * FROM vt2 NOT INDEXED, v0, vt0 WHERE (((((((((UPPER(v0.c0))AND(((vt2.c1)>(v0.c0)))))AND(((((v0.c2)OR(v0.c1)))OR(v0.c2)))))AND(CASE WHEN vt0.c0 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c3 END)))AND(load_extension(v0.c2))));
SELECT * FROM vt2, v0, vt0 WHERE (((((((((UPPER(v0.c0))AND(((vt2.c1)>(v0.c0)))))AND(((((v0.c2)OR(v0.c1)))OR(v0.c2)))))AND(CASE WHEN vt0.c0 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c3 END)))AND(load_extension(v0.c2)))) LIMIT 2;
SELECT MAX(v0.c0) FROM v0 NATURAL JOIN vt0 WHERE ((((v0.c2, CASE v0.c1  WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN x'a6381d' WHEN v0.c3 THEN vt0.c0 ELSE v0.c0 END))>((((v0.c2) NOTNULL), TRIM(vt0.c0, v0.c0)))));
SELECT DISTINCT MAX(v0.c0) FROM v0 NATURAL JOIN vt0 WHERE ((((v0.c2, CASE v0.c1  WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN x'a6381d' WHEN v0.c3 THEN vt0.c0 ELSE v0.c0 END))>((((v0.c2) NOTNULL), TRIM(vt0.c0, v0.c0))))) ORDER BY v0.c3 DESC  NULLS FIRST, (((TYPEOF(DISTINCT NULL), v0.c2 COLLATE RTRIM))>((((v0.c0) NOT NULL), v0.c2 COLLATE RTRIM))) DESC;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((0.0723762534186253 IN (v0.c0)) COLLATE NOCASE);
SELECT * FROM vt2, vt0, v0 WHERE ((0.0723762534186253 IN (v0.c0)) COLLATE NOCASE) LIMIT 0x0 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (CASE WHEN (vt2.c0 IN (0.46848189259721085)) THEN CASE v0.c1  WHEN v0.c0 THEN vt0.c0 ELSE v0.c2 END ELSE CASE vt2.c0  WHEN v0.c0 THEN 0.1276477221040504 ELSE vt2.c1 END END) LIMIT 0X0;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((0.0723762534186253 IN (v0.c0)) COLLATE NOCASE);
SELECT * FROM vt2, vt0, v0 WHERE ((0.0723762534186253 IN (v0.c0)) COLLATE NOCASE) LIMIT 0x0 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (CASE WHEN (vt2.c0 IN (0.46848189259721085)) THEN CASE v0.c1  WHEN v0.c0 THEN vt0.c0 ELSE v0.c2 END ELSE CASE vt2.c0  WHEN v0.c0 THEN 0.1276477221040504 ELSE vt2.c1 END END) LIMIT 0X0;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CAST(vt0.c0 AS REAL) COLLATE NOCASE) ORDER BY ((vt0.c0 COLLATE NOCASE) BETWEEN (UPPER(vt0.c0)) AND ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)))))  NULLS FIRST, COALESCE(TRIM(vt0.c0), vt0.c0, vt0.c0 COLLATE NOCASE, ((0.16217142275629903) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CASE WHEN x'1c' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, CAST(vt0.c0 AS INTEGER))  NULLS LAST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS REAL) COLLATE NOCASE)AND(vt0.c0))) ORDER BY ((vt0.c0 COLLATE NOCASE) BETWEEN (UPPER(vt0.c0)) AND ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)))))  NULLS FIRST, COALESCE(TRIM(vt0.c0), vt0.c0, vt0.c0 COLLATE NOCASE, ((0.16217142275629903) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CASE WHEN x'1c' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, CAST(vt0.c0 AS INTEGER))  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c0)<(vt0.c0))))>((((vt0.c0)&(vt0.c0)))))) ORDER BY ((vt0.c0 COLLATE NOCASE) BETWEEN (UPPER(vt0.c0)) AND ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)))))  NULLS FIRST, COALESCE(TRIM(vt0.c0), vt0.c0, vt0.c0 COLLATE NOCASE, ((0.16217142275629903) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CASE WHEN x'1c' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, CAST(vt0.c0 AS INTEGER))  NULLS LAST LIMIT 0;
SELECT MIN(v0.c0) FROM vt2, vt0, v0 WHERE ((CASE WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN NULL WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END IN (((vt2.c1)GLOB('x')), v0.c2, (~ (v0.c0)))));
SELECT ALL MIN(v0.c0) FROM vt2, vt0, v0 WHERE ((((CASE WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN NULL WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END IN (((vt2.c1)GLOB('x')), v0.c2)))AND((((CAST(v0.c0 AS TEXT), ((vt2.c0)+(vt2.c0)), ((v0.c2)AND(vt2.c1)), json_array(v0.c0, '-567218797', v0.c2), (+ (v0.c2))))>=(((((v0.c0, vt2.c1))<((v0.c1, v0.c3))), ((vt2.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)), ((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c0)))AND(vt0.c0)))OR(v0.c2)), LTRIM(vt2.c0), CAST(vt0.c0 AS INTEGER))))))) ORDER BY ((((v0.c1)<(v0.c0)))GLOB(CASE WHEN v0.c2 THEN vt0.c0 END)) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT MIN(v0.c0) FROM vt2, vt0, v0 WHERE ((((((((((v0.c3, v0.c3, v0.c3, v0.c1, v0.c2, vt2.c1)) BETWEEN ((vt2.c0, v0.c1, vt2.c0, vt0.c0, -567218797, v0.c0)) AND ((v0.c0, vt2.c0, '0.8051170643003698', vt2.c1, v0.c1, vt2.c0))))OR((vt0.c0 IN ()))))OR(CASE v0.c3  WHEN vt2.c0 THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END)))OR(((vt2.c0) NOT BETWEEN (v0.c1) AND (v0.c3))))) ORDER BY ((((v0.c1)<(v0.c0)))GLOB(CASE WHEN v0.c2 THEN vt0.c0 END)) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c0 AS REAL) COLLATE NOCASE) ORDER BY (((vt0.c0, vt0.c0)) NOT BETWEEN ((NULLIF(DISTINCT vt0.c0, vt0.c0), CAST(vt0.c0 AS INTEGER))) AND ((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)), vt0.c0)))  NULLS FIRST, ((CAST(vt0.c0 AS TEXT)) BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND (((vt0.c0)<=(vt0.c0))));
SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS REAL) COLLATE NOCASE)AND((NOT (((x'34')AND(vt0.c0))))))) ORDER BY 'G9', vt0.c0 ASC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE ((~ (CAST(vt0.c0 AS REAL)))) ORDER BY 'G9', vt0.c0 ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c0 AS REAL) COLLATE NOCASE) ORDER BY (((vt0.c0, vt0.c0)) NOT BETWEEN ((NULLIF(DISTINCT vt0.c0, vt0.c0), CAST(vt0.c0 AS INTEGER))) AND ((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)), vt0.c0)))  NULLS FIRST, ((CAST(vt0.c0 AS TEXT)) BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND (((vt0.c0)<=(vt0.c0))));
SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS REAL) COLLATE NOCASE)AND((NOT (((x'34')AND(vt0.c0))))))) ORDER BY 'G9', vt0.c0 ASC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE ((~ (CAST(vt0.c0 AS REAL)))) ORDER BY 'G9', vt0.c0 ASC  NULLS LAST;
SELECT * FROM vt0, v0 WHERE ((((v0.c3, vt0.c0, v0.c2)) NOT BETWEEN ((((vt0.c0)>>(vt0.c0)), ((v0.c0)<=(v0.c3)), vt0.c0)) AND ((((((((((v0.c0)AND(vt0.c0)))OR(v0.c1)))OR(0.7344154568104274)))OR(vt0.c0)), CAST(v0.c3 AS BLOB), ((v0.c0) IS TRUE))))) ORDER BY (((v0.c2 IN (v0.c1)))IS(((v0.c0)AND(v0.c2)))) ASC;
SELECT * FROM vt0, v0 WHERE ((((((v0.c3, vt0.c0, v0.c2)) NOT BETWEEN ((((vt0.c0)>>(vt0.c0)), ((v0.c0)<=(v0.c3)), vt0.c0)) AND ((((((((((v0.c0)AND(vt0.c0)))OR(v0.c1)))OR(0.7344154568104274)))OR(vt0.c0)), CAST(v0.c3 AS BLOB), ((v0.c0) IS TRUE)))))AND(LIKELIHOOD(x'67', ((v0.c2)>(v0.c3)))))) ORDER BY (((v0.c2 IN (v0.c1)))IS(((v0.c0)AND(v0.c2)))) ASC INTERSECT SELECT * FROM vt0, v0 WHERE (((vt0.c0 COLLATE NOCASE)<>(v0.c1 COLLATE NOCASE))) ORDER BY (((v0.c2 IN (v0.c1)))IS(((v0.c0)AND(v0.c2)))) ASC;
SELECT * FROM vt0, v0 WHERE ((((v0.c3, vt0.c0, v0.c2)) NOT BETWEEN ((((vt0.c0)>>(vt0.c0)), ((v0.c0)<=(v0.c3)), vt0.c0)) AND ((((((((((v0.c0)AND(vt0.c0)))OR(v0.c1)))OR(0.7344154568104274)))OR(vt0.c0)), CAST(v0.c3 AS BLOB), ((v0.c0) IS TRUE))))) ORDER BY (((v0.c2 IN (v0.c1)))IS(((v0.c0)AND(v0.c2)))) ASC;
SELECT * FROM vt0, v0 WHERE ((((((v0.c3, vt0.c0, v0.c2)) NOT BETWEEN ((((vt0.c0)>>(vt0.c0)), ((v0.c0)<=(v0.c3)), vt0.c0)) AND ((((((((((v0.c0)AND(vt0.c0)))OR(v0.c1)))OR(0.7344154568104274)))OR(vt0.c0)), CAST(v0.c3 AS BLOB), ((v0.c0) IS TRUE)))))AND(LIKELIHOOD(x'67', ((v0.c2)>(v0.c3)))))) ORDER BY (((v0.c2 IN (v0.c1)))IS(((v0.c0)AND(v0.c2)))) ASC INTERSECT SELECT * FROM vt0, v0 WHERE (((vt0.c0 COLLATE NOCASE)<>(v0.c1 COLLATE NOCASE))) ORDER BY (((v0.c2 IN (v0.c1)))IS(((v0.c0)AND(v0.c2)))) ASC;
SELECT COUNT(*) FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON ((((v0.c2)LIKE(v0.c2))) IS FALSE) WHERE (CASE WHEN (vt2.c0 IN ()) THEN (((vt2.c0, vt0.c0, vt0.c0, v0.c3))!=((vt2.c1, vt2.c1, v0.c3, vt2.c0))) WHEN vt2.c0 COLLATE BINARY THEN ((vt2.c0) IS TRUE) WHEN v0.c3 THEN CAST(v0.c3 AS TEXT) END);
SELECT COUNT(*) FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON ((((v0.c2)LIKE(v0.c2))) IS FALSE) WHERE (CASE WHEN (vt2.c0 IN ()) THEN (((vt2.c0, vt0.c0, vt0.c0, v0.c3))<>((vt2.c1, vt2.c1, v0.c3, vt2.c0))) WHEN vt2.c0 COLLATE BINARY THEN ((vt2.c0) IS TRUE) WHEN v0.c3 THEN CAST(v0.c3 AS TEXT) END);
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (LIKE(((vt2.c0) IS TRUE), vt2.c0, 'M')) ORDER BY ((((vt2.c1) BETWEEN ('-433181884') AND (vt2.c0)))<(((0.9873959024305637) NOT BETWEEN (vt2.c1) AND (vt2.c0)))) DESC  NULLS LAST, vt2.c0, (((LOWER(vt2.c0), LOWER(x'fe84e9')))>((((vt2.c1)OR(vt2.c1)), vt2.c1))) ASC  NULLS FIRST;
SELECT MAX(vt2.c1) FROM vt2 WHERE (LIKE(((vt2.c0) IS TRUE), vt2.c0, 'M')) ORDER BY ((vt2.c1 COLLATE BINARY) ISNULL) DESC, (NOT (UNLIKELY(vt2.c1))) DESC  NULLS LAST LIMIT 0X2;
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE (((v0.c1)IS NOT(v0.c0)) COLLATE NOCASE) ORDER BY ((vt2.c1 COLLATE RTRIM) NOTNULL) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0, vt2, vt0 WHERE (((((v0.c1)IS NOT(v0.c0)) COLLATE NOCASE)AND(CASE WHEN CAST(NULL AS REAL) THEN (vt2.c0 IN (v0.c2)) END))) ORDER BY -1953238461  NULLS FIRST, LENGTH(NULL);
SELECT * FROM v0, vt0 WHERE (((NULL)%(TRIM(v0.c2, v0.c1))));
SELECT ALL * FROM v0, vt0 WHERE (((((NULL)%(TRIM(v0.c2, v0.c1))))AND(((((v0.c0)AND(v0.c3)))/(x'a2'))))) INTERSECT SELECT ALL * FROM v0, vt0 WHERE (HEX(((v0.c1) IS FALSE)));
SELECT * FROM v0, vt0 WHERE (((NULL)%(TRIM(v0.c2, v0.c1))));
SELECT ALL * FROM v0, vt0 WHERE (((((NULL)%(TRIM(v0.c2, v0.c1))))AND(((((v0.c0)AND(v0.c3)))/(x'a2'))))) INTERSECT SELECT ALL * FROM v0, vt0 WHERE (HEX(((v0.c1) IS FALSE)));
SELECT ALL MAX(v0.c2) FROM v0 WHERE (((v0.c3)>>(x'')) COLLATE NOCASE COLLATE BINARY) ORDER BY ((v0.c3) NOT BETWEEN (TRIM(v0.c0)) AND (UNLIKELY(DISTINCT v0.c3))) DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((v0.c3)>>(x'')) COLLATE NOCASE COLLATE BINARY)AND(CAST((NOT (v0.c1)) AS TEXT)))) ORDER BY ((((0x2437c09b)AND(v0.c1)))||(v0.c0 COLLATE BINARY))  NULLS LAST LIMIT 0x1;
SELECT * FROM vt2, vt0, v0 WHERE (v0.c1) ORDER BY ((((((v0.c0, v0.c0)) BETWEEN ((vt2.c0, v0.c0)) AND ((v0.c1, vt2.c1)))))<=((NULL)))  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((v0.c1)AND(((((vt2.c1) BETWEEN ('') AND (vt0.c0))) IS FALSE)))) ORDER BY CAST(((vt0.c0)==(v0.c0)) AS INTEGER)  NULLS LAST, (((((((((v0.c3 IN ()))OR(CAST(vt0.c0 AS REAL))))OR('1090913443')))OR(((v0.c0)IS NOT(vt2.c0)))))OR(CAST(v0.c1 AS INTEGER))) ASC  NULLS LAST INTERSECT SELECT * FROM vt2, vt0, v0 WHERE (-388835817) ORDER BY CAST(((vt0.c0)==(v0.c0)) AS INTEGER)  NULLS LAST, (((((((((v0.c3 IN ()))OR(CAST(vt0.c0 AS REAL))))OR('1090913443')))OR(((v0.c0)IS NOT(vt2.c0)))))OR(CAST(v0.c1 AS INTEGER))) ASC  NULLS LAST;
SELECT * FROM vt2, vt0, v0 WHERE (v0.c1) ORDER BY ((((((v0.c0, v0.c0)) BETWEEN ((vt2.c0, v0.c0)) AND ((v0.c1, vt2.c1)))))<=((NULL)))  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((v0.c1)AND(((((vt2.c1) BETWEEN ('') AND (vt0.c0))) IS FALSE)))) ORDER BY CAST(((vt0.c0)==(v0.c0)) AS INTEGER)  NULLS LAST, (((((((((v0.c3 IN ()))OR(CAST(vt0.c0 AS REAL))))OR('1090913443')))OR(((v0.c0)IS NOT(vt2.c0)))))OR(CAST(v0.c1 AS INTEGER))) ASC  NULLS LAST INTERSECT SELECT * FROM vt2, vt0, v0 WHERE (-388835817) ORDER BY CAST(((vt0.c0)==(v0.c0)) AS INTEGER)  NULLS LAST, (((((((((v0.c3 IN ()))OR(CAST(vt0.c0 AS REAL))))OR('1090913443')))OR(((v0.c0)IS NOT(vt2.c0)))))OR(CAST(v0.c1 AS INTEGER))) ASC  NULLS LAST;
SELECT ALL MIN(vt2.c0) FROM v0, vt2, vt0 WHERE ((((vt0.c0)) BETWEEN ((((v0.c1)OR(v0.c0)))) AND ((((v0.c2)>(vt2.c0)))))) ORDER BY (~ ((v0.c2 IN (v0.c2))))  NULLS FIRST;
SELECT DISTINCT MIN(vt2.c0) FROM v0, vt2, vt0 WHERE ((((vt0.c0)) BETWEEN ((((v0.c1)OR(v0.c0)))) AND ((((v0.c2)>(vt2.c0)))))) ORDER BY (~ ((v0.c2 IN (v0.c2))))  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((vt0.c0 COLLATE NOCASE IN (x'')));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0 COLLATE NOCASE IN (x'')))AND(vt0.c0))) LIMIT 0X4 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (vt0.c0) LIMIT 0X4;
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (CAST(CASE WHEN vt2.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN x'e7' THEN vt2.c1 END AS REAL));
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (((CAST(CASE WHEN vt2.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN x'e7' THEN vt2.c1 END AS REAL))AND(((((vt2.c0)||(v0.c0))) NOT BETWEEN (vt2.c0) AND (CAST(v0.c0 AS NUMERIC)))))) ORDER BY COALESCE(DISTINCT ((v0.c0)IS NOT(v0.c1)), 0xfffffffff6a0b416, ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c3)), CAST(v0.c2 AS INTEGER)) ASC  NULLS FIRST, ((((((((((v0.c1) IS TRUE))OR((~ (v0.c0)))))OR(vt2.c0)))OR(v0.c3)))AND(((vt2.c0)<(v0.c2))))  NULLS FIRST LIMIT 0;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (IFNULL(DISTINCT '-1478372600', CAST(v0.c0 AS TEXT)));
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (IFNULL(DISTINCT '-1478372600', CAST(v0.c0 AS TEXT))) ORDER BY ((((v0.c1)||(v0.c3)))<(((((v0.c0)AND(v0.c0)))OR(v0.c0)))) DESC, (~ (CASE v0.c2  WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN 0xfffffffff5f8310f THEN v0.c0 END));
SELECT COUNT(*) FROM v0 WHERE (((UNICODE(v0.c0))<=(((v0.c0)<<(v0.c2)))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((UNICODE(v0.c0))<(((v0.c0)<<(v0.c2)))))AND(CAST(((((((((x'1b')OR(v0.c1)))AND(v0.c0)))AND('-734232506')))OR(v0.c0)) AS REAL))));
SELECT MIN(v0.c3) FROM v0 WHERE ((NOT (CASE WHEN x'b3' THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c3 END))) ORDER BY v0.c3 DESC, v0.c1 ASC  NULLS LAST;
SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE ((NOT (CASE WHEN x'b3' THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c3 END))) ORDER BY (((v0.c3 IN ())) BETWEEN (((((((v0.c0)AND(v0.c0)))AND(NULL)))OR(v0.c2))) AND ((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c3))))) DESC  NULLS LAST, ((((v0.c2)||(v0.c1)))!=(CASE WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END));
SELECT COUNT(*) FROM v0 INNER JOIN vt2 ON (((((v0.c3, vt2.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((v0.c3, '1600896593', '1470920427')))) BETWEEN (((vt2.c0)==(v0.c3))) AND (CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END)) WHERE (((((((((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))AND(v0.c3)))AND(vt2.c1)))AND(vt2.c1)))!=(NULLIF(DISTINCT v0.c3, vt2.c1))));
SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt2 ON (((((v0.c3, vt2.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((v0.c3, '1600896593', '1470920427')))) BETWEEN (((vt2.c0)==(v0.c3))) AND (CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END)) WHERE (((((((((((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))AND(v0.c3)))AND(vt2.c1)))AND(vt2.c1)))!=(NULLIF(DISTINCT v0.c3, vt2.c1))))AND(CASE WHEN IFNULL(DISTINCT v0.c3, v0.c1) THEN UNLIKELY(v0.c1) END))) ORDER BY CASE WHEN ((v0.c0)<=(v0.c1)) THEN CAST(v0.c0 AS INTEGER) WHEN CASE vt2.c1  WHEN v0.c2 THEN vt2.c0 WHEN -5.72972978E8 THEN v0.c0 ELSE v0.c0 END THEN LOWER(v0.c1) END  NULLS FIRST, CAST((- (v0.c2)) AS BLOB) ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt2 ON (((((v0.c3, vt2.c1, v0.c0)) BETWEEN ((v0.c2, v0.c1, v0.c1)) AND ((v0.c3, '1600896593', '1470920427')))) BETWEEN (((vt2.c0)==(v0.c3))) AND (CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END)) WHERE (LAST_INSERT_ROWID()) ORDER BY CASE WHEN ((v0.c0)<=(v0.c1)) THEN CAST(v0.c0 AS INTEGER) WHEN CASE vt2.c1  WHEN v0.c2 THEN vt2.c0 WHEN -5.72972978E8 THEN v0.c0 ELSE v0.c0 END THEN LOWER(v0.c1) END  NULLS FIRST, CAST((- (v0.c2)) AS BLOB) ASC  NULLS LAST;
SELECT MAX(v0.c2) FROM v0, vt2 WHERE (((((v0.c2) NOT NULL)) NOT NULL)) ORDER BY (((~ (vt2.c1)))>(CASE v0.c0  WHEN v0.c3 THEN vt2.c1 ELSE v0.c3 END)) ASC, ((((v0.c1)&(vt2.c1))) BETWEEN (x'fe49a0') AND (((v0.c0)/(v0.c2)))) ASC  NULLS LAST;
SELECT MAX(v0.c2) FROM v0, vt2 WHERE (((((v0.c2) NOT NULL)) NOT NULL)) ORDER BY (((~ (vt2.c1)))>(CASE v0.c0  WHEN v0.c3 THEN vt2.c1 ELSE v0.c3 END)) ASC, ((((v0.c1)&(vt2.c1))) BETWEEN (x'fe49a0') AND (((v0.c0)/(v0.c2)))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL MIN(v0.c2) FROM vt0, v0 WHERE ((((CASE v0.c2  WHEN v0.c3 THEN 1831516531 WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN vt0.c0 WHEN x'e8' THEN v0.c2 WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 END))>((((vt0.c0) BETWEEN (v0.c1) AND (vt0.c0)))))) ORDER BY ((((v0.c0)OR(v0.c2)))>=(((v0.c3)OR(vt0.c0)))) ASC;
SELECT DISTINCT MIN(v0.c2) FROM vt0, v0 WHERE ((((CASE v0.c2  WHEN v0.c3 THEN 0X6d2ab973 WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN vt0.c0 WHEN x'e8' THEN v0.c2 WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 END))>((((vt0.c0) BETWEEN (v0.c1) AND (vt0.c0)))))) ORDER BY ((((v0.c0)OR(v0.c2)))>=(((v0.c3)OR(vt0.c0)))) ASC;
SELECT ALL * FROM v0 WHERE (CAST(((((v0.c3)OR(v0.c1)))AND(v0.c3)) AS TEXT)) ORDER BY ((((v0.c1)IS(v0.c0)))IS(((v0.c3) NOTNULL))), (((v0.c0)-(v0.c2)) IN (v0.c3, v0.c3 COLLATE RTRIM)) ASC;
SELECT DISTINCT * FROM v0 WHERE (CAST(((((v0.c3)OR(v0.c1)))AND(v0.c3)) AS TEXT)) ORDER BY ((((v0.c1)IS(v0.c0)))IS(((v0.c3) NOTNULL))), (((v0.c0)-(v0.c2)) IN (v0.c3, v0.c3 COLLATE RTRIM)) ASC;
SELECT ALL * FROM v0 WHERE (CAST(((((v0.c3)OR(v0.c1)))AND(v0.c3)) AS TEXT)) ORDER BY ((((v0.c1)IS(v0.c0)))IS(((v0.c3) NOTNULL))), (((v0.c0)-(v0.c2)) IN (v0.c3, v0.c3 COLLATE RTRIM)) ASC;
SELECT DISTINCT * FROM v0 WHERE (CAST(((((v0.c3)OR(v0.c1)))AND(v0.c3)) AS TEXT)) ORDER BY ((((v0.c1)IS(v0.c0)))IS(((v0.c3) NOTNULL))), (((v0.c0)-(v0.c2)) IN (v0.c3, v0.c3 COLLATE RTRIM)) ASC;
SELECT ALL MIN(v0.c3) FROM vt2, v0, vt0 WHERE (((((v0.c2)&(vt2.c0))) IS TRUE));
SELECT MIN(v0.c3) FROM vt2, v0, vt0 WHERE (((((((v0.c2)&(vt2.c0))) IS TRUE))AND((((ABS(v0.c2), CASE WHEN v0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN v0.c2 WHEN v0.c2 THEN vt0.c0 END, ((vt2.c0)<>(v0.c2)), ((vt0.c0)*(v0.c3)), CASE vt0.c0  WHEN vt2.c0 THEN 'e㤥s4B' ELSE vt2.c1 END))>=((((((vt2.c0)AND('868741710')))AND(vt2.c1)), (NOT (vt2.c1)), TRIM(DISTINCT v0.c2, v0.c2), (- (0X4cf84815)), (v0.c0 IN (x'', v0.c1)))))))) LIMIT 2 INTERSECT SELECT MIN(v0.c3) FROM vt2, v0, vt0 WHERE (((v0.c3)GLOB(v0.c1)) COLLATE BINARY) LIMIT 2;
SELECT ALL COUNT(*) FROM v0 WHERE (LIKELY(NULL)) ORDER BY v0.c0  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE (LIKELY(NULL)) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c3)))>(((v0.c0)IS(v0.c3)))) LIMIT 0x0 INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE ((((NULLIF(DISTINCT v0.c3, v0.c1), CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN v0.c3 END, (~ (v0.c3)), (((v0.c2, v0.c1)) BETWEEN ((v0.c1, v0.c3)) AND ((v0.c0, x'b5de8c')))))>((CAST(v0.c0 AS NUMERIC), CASE ''  WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN v0.c3 WHEN v0.c3 THEN v0.c1 WHEN 'FALSE' THEN v0.c1 WHEN v0.c1 THEN v0.c3 ELSE v0.c2 END, LOWER(v0.c2), ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c0)))))) ORDER BY ((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c3)))>(((v0.c0)IS(v0.c3)))) LIMIT 0;
SELECT COUNT(*) FROM v0, vt2 WHERE (CASE (~ (v0.c1))  WHEN ((vt2.c0) IS TRUE) THEN CASE WHEN v0.c1 THEN x'' WHEN vt2.c0 THEN x'' WHEN v0.c2 THEN vt2.c0 WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END WHEN vt2.c0 THEN ((vt2.c0)*(0.2656094642140162)) ELSE CASE WHEN v0.c3 THEN vt2.c1 WHEN '?9o' THEN v0.c2 END END) ORDER BY v0.c3  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt2 WHERE (((CASE (~ (v0.c1))  WHEN ((vt2.c0) IS TRUE) THEN CASE WHEN v0.c1 THEN x'' WHEN vt2.c0 THEN x'' WHEN v0.c2 THEN vt2.c0 WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END WHEN vt2.c0 THEN ((vt2.c0)*(0.2656094642140162)) ELSE CASE WHEN v0.c3 THEN vt2.c1 WHEN '?9o' THEN v0.c2 END END)AND(((((v0.c2) NOTNULL))IS NOT(vt2.c1))))) ORDER BY v0.c3  NULLS LAST LIMIT 0X1;
SELECT * FROM vt0 WHERE ((((+ (vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (vt0.c0))) ORDER BY ((NULL)LIKE('-1429548611'))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((+ (vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (vt0.c0)))AND(x'cb21fc02'))) ORDER BY ((NULL)LIKE('-1429548611'))  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE ((((((((((((vt0.c0))=((vt0.c0))))AND(((vt0.c0)|(vt0.c0)))))AND((vt0.c0 IN ()))))OR('')))AND(IFNULL(vt0.c0, vt0.c0)))) ORDER BY ((NULL)LIKE('-1429548611'))  NULLS FIRST;
SELECT * FROM vt0 WHERE ((((+ (vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (vt0.c0))) ORDER BY ((NULL)LIKE('-1429548611'))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((+ (vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (vt0.c0)))AND(x'cb21fc02'))) ORDER BY ((NULL)LIKE('-1429548611'))  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE ((((((((((((vt0.c0))=((vt0.c0))))AND(((vt0.c0)|(vt0.c0)))))AND((vt0.c0 IN ()))))OR('')))AND(IFNULL(vt0.c0, vt0.c0)))) ORDER BY ((NULL)LIKE('-1429548611'))  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0)AND(((vt0.c0) IS FALSE)))) ORDER BY ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0))) BETWEEN ((- (vt0.c0))) AND ((vt0.c0 IN (vt0.c0)))) ASC  NULLS FIRST, ((((((((vt0.c0)AND(0xffffffffdd636e58)))OR(vt0.c0)))OR(vt0.c0)))*((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((0.10198547391247059, vt0.c0, vt0.c0, vt0.c0))))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0)AND(((vt0.c0) IS FALSE))))AND(((((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND((+ (vt0.c0)))))OR(((vt0.c0) IS TRUE))))OR(vt0.c0 COLLATE RTRIM))))) ORDER BY ((('uI1B', vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOT NULL), ((vt0.c0) NOTNULL), 'N?v2.', CAST('1190017638' AS BLOB))) AND ((CAST(-5.67218797E8 AS TEXT), ((vt0.c0) ISNULL), vt0.c0, (~ (vt0.c0))))) DESC, 0.9873959024305637 ASC INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0 COLLATE BINARY))>=((((vt0.c0) NOT BETWEEN (NULL) AND (vt0.c0)))))) ORDER BY ((('uI1B', vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOT NULL), ((vt0.c0) NOTNULL), 'N?v2.', CAST('1190017638' AS BLOB))) AND ((CAST(-5.67218797E8 AS TEXT), ((vt0.c0) ISNULL), vt0.c0, (~ (vt0.c0))))) DESC, 0.9873959024305637 ASC;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((((v0.c2, 'i.*ꂙ*L', vt0.c0)) BETWEEN ((v0.c0, v0.c2, vt0.c0)) AND (('-572972978', x'', 0.6515258409859986)))) NOT NULL)) ORDER BY ((NULL COLLATE RTRIM) ISNULL)  NULLS LAST, UNLIKELY(HEX(vt2.c0));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((v0.c2, 'i.*ꂙ*L', vt0.c0)) BETWEEN ((v0.c0, v0.c2, vt0.c0)) AND (('-572972978', x'', 0.6515258409859986)))) NOT NULL)) ORDER BY x'' ASC, (- (((v0.c3)>(NULL)))) ASC  NULLS FIRST, CASE WHEN ((vt0.c0)<(vt0.c0)) THEN (vt2.c0 IN (vt2.c0)) WHEN (v0.c1 IN (0.4643409253230786)) THEN (+ (v0.c2)) END DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (LTRIM(HEX(DISTINCT vt2.c1))) ORDER BY x'' ASC, (- (((v0.c3)>(NULL)))) ASC  NULLS FIRST, CASE WHEN ((vt0.c0)<(vt0.c0)) THEN (vt2.c0 IN (vt2.c0)) WHEN (v0.c1 IN (0.4643409253230786)) THEN (+ (v0.c2)) END DESC  NULLS FIRST;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((((v0.c2, 'i.*ꂙ*L', vt0.c0)) BETWEEN ((v0.c0, v0.c2, vt0.c0)) AND (('-572972978', x'', 0.6515258409859986)))) NOT NULL)) ORDER BY ((NULL COLLATE RTRIM) ISNULL)  NULLS LAST, UNLIKELY(HEX(vt2.c0));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((v0.c2, 'i.*ꂙ*L', vt0.c0)) BETWEEN ((v0.c0, v0.c2, vt0.c0)) AND (('-572972978', x'', 0.6515258409859986)))) NOT NULL)) ORDER BY x'' ASC, (- (((v0.c3)>(NULL)))) ASC  NULLS FIRST, CASE WHEN ((vt0.c0)<(vt0.c0)) THEN (vt2.c0 IN (vt2.c0)) WHEN (v0.c1 IN (0.4643409253230786)) THEN (+ (v0.c2)) END DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (LTRIM(HEX(DISTINCT vt2.c1))) ORDER BY x'' ASC, (- (((v0.c3)>(NULL)))) ASC  NULLS FIRST, CASE WHEN ((vt0.c0)<(vt0.c0)) THEN (vt2.c0 IN (vt2.c0)) WHEN (v0.c1 IN (0.4643409253230786)) THEN (+ (v0.c2)) END DESC  NULLS FIRST;
SELECT ALL MIN(v0.c3) FROM vt0 CROSS JOIN vt2 ON -5.72972978E8 INNER JOIN v0 ON CASE WHEN CASE WHEN vt0.c0 THEN v0.c3 WHEN vt2.c1 THEN 0.822232603076992 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END THEN ((vt2.c0)OR(vt0.c0)) ELSE ((vt2.c1)>(vt2.c1)) END WHERE (NULL);
SELECT DISTINCT MIN(v0.c3) FROM vt0 CROSS JOIN vt2 ON -5.72972978E8 INNER JOIN v0 ON CASE WHEN CASE WHEN vt0.c0 THEN v0.c3 WHEN vt2.c1 THEN 0.822232603076992 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END THEN ((vt2.c0)OR(vt0.c0)) ELSE ((vt2.c1)>(vt2.c1)) END WHERE (((NULL)AND(((((vt2.c0) BETWEEN (v0.c1) AND (vt2.c1))) NOT BETWEEN (v0.c2) AND (-506705295))))) LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE (vt2.c0);
SELECT ALL * FROM vt2 WHERE (vt2.c0) ORDER BY ((((vt2.c0)/(x'')))/((((vt2.c0, vt2.c0, vt2.c1, 0.7354794367041715, vt2.c1))<=((vt2.c0, vt2.c1, vt2.c1, vt2.c0, 2138090781))))) INTERSECT SELECT ALL * FROM vt2 WHERE (((0.9873959024305637) IS TRUE)) ORDER BY ((((vt2.c0)/(x'')))/((((vt2.c0, vt2.c0, vt2.c1, 0.7354794367041715, vt2.c1))<=((vt2.c0, vt2.c1, vt2.c1, vt2.c0, 0x7f70ad1d)))));
SELECT ALL * FROM vt2 WHERE (vt2.c0);
SELECT ALL * FROM vt2 WHERE (vt2.c0) ORDER BY ((((vt2.c0)/(x'')))/((((vt2.c0, vt2.c0, vt2.c1, 0.7354794367041715, vt2.c1))<=((vt2.c0, vt2.c1, vt2.c1, vt2.c0, 2138090781))))) INTERSECT SELECT ALL * FROM vt2 WHERE (((0.9873959024305637) IS TRUE)) ORDER BY ((((vt2.c0)/(x'')))/((((vt2.c0, vt2.c0, vt2.c1, 0.7354794367041715, vt2.c1))<=((vt2.c0, vt2.c1, vt2.c1, vt2.c0, 0x7f70ad1d)))));
SELECT * FROM v0, vt0 INNER JOIN vt2 ON v0.c2 WHERE (vt2.c0 COLLATE BINARY) ORDER BY ((((v0.c0) IS FALSE)) NOT BETWEEN ((~ (v0.c0))) AND (vt0.c0)) DESC;
SELECT ALL * FROM v0, vt0 INNER JOIN vt2 ON v0.c2 WHERE (vt2.c0 COLLATE BINARY) ORDER BY (NOT (CASE v0.c0  WHEN v0.c2 THEN '-1330521423' WHEN 98982355 THEN vt2.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c1 ELSE vt0.c0 END)) DESC, 0.27638570023133135 DESC  NULLS LAST, CAST(((vt0.c0) ISNULL) AS NUMERIC), ((((vt2.c0)OR(vt0.c0)))%(((((((((((v0.c1)AND(v0.c2)))AND(vt0.c0)))OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))) DESC;
SELECT * FROM v0, vt0 INNER JOIN vt2 ON v0.c2 WHERE (vt2.c0 COLLATE BINARY) ORDER BY ((((v0.c0) IS FALSE)) NOT BETWEEN ((~ (v0.c0))) AND (vt0.c0)) DESC;
SELECT ALL * FROM v0, vt0 INNER JOIN vt2 ON v0.c2 WHERE (vt2.c0 COLLATE BINARY) ORDER BY (NOT (CASE v0.c0  WHEN v0.c2 THEN '-1330521423' WHEN 98982355 THEN vt2.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c1 ELSE vt0.c0 END)) DESC, 0.27638570023133135 DESC  NULLS LAST, CAST(((vt0.c0) ISNULL) AS NUMERIC), ((((vt2.c0)OR(vt0.c0)))%(((((((((((v0.c1)AND(v0.c2)))AND(vt0.c0)))OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))) DESC;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (((((v0.c3) NOTNULL))LIKE(v0.c0 COLLATE BINARY)));
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((((v0.c3) NOTNULL))LIKE(v0.c0 COLLATE BINARY))) LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (((((((((vt2.c1)||('뷽7⣴Rm*|')))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN NULL THEN vt2.c1 END)))AND(((((v0.c2)OR(v0.c0)))OR(v0.c3)))))OR((NOT (vt0.c0))))) LIMIT 0X0;
SELECT * FROM v0 CROSS JOIN vt2 ON ((((((json_insert(vt2.c1, vt2.c1, vt0.c0, v0.c1, 'I Sub', vt2.c1))OR((((vt2.c1, v0.c0, vt0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c0)) AND ((vt2.c1, vt0.c0, v0.c2))))))OR(((((((v0.c2)OR(vt2.c1)))OR(v0.c3)))AND(v0.c3)))))AND(TYPEOF(v0.c1))) INNER JOIN vt0 ON ((vt2.c1) NOTNULL) WHERE ((- ((+ (vt2.c1))))) ORDER BY ((((vt2.c0)<=(v0.c0)))>>(((((((((((v0.c1)AND(v0.c1)))OR(vt0.c0)))AND('-1680991631')))AND(v0.c1)))AND(v0.c3))))  NULLS LAST;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON ((((((json_insert(vt2.c1, vt2.c1, vt0.c0, v0.c1, 'I Sub', vt2.c1))OR((((vt2.c1, v0.c0, vt0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c0)) AND ((vt2.c1, vt0.c0, v0.c2))))))OR(((((((v0.c2)OR(vt2.c1)))OR(v0.c3)))AND(v0.c3)))))AND(TYPEOF(v0.c1))) INNER JOIN vt0 ON ((vt2.c1) NOTNULL) WHERE ((- ((+ (vt2.c1))))) ORDER BY ((((vt2.c0)<=(v0.c0)))>>(((((((((((v0.c1)AND(v0.c1)))OR(vt0.c0)))AND('-1680991631')))AND(v0.c1)))AND(v0.c3))))  NULLS LAST LIMIT 1;
SELECT * FROM v0 CROSS JOIN vt2 ON ((((((json_insert(vt2.c1, vt2.c1, vt0.c0, v0.c1, 'I Sub', vt2.c1))OR((((vt2.c1, v0.c0, vt0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c0)) AND ((vt2.c1, vt0.c0, v0.c2))))))OR(((((((v0.c2)OR(vt2.c1)))OR(v0.c3)))AND(v0.c3)))))AND(TYPEOF(v0.c1))) INNER JOIN vt0 ON ((vt2.c1) NOTNULL) WHERE ((- ((+ (vt2.c1))))) ORDER BY ((((vt2.c0)<=(v0.c0)))>>(((((((((((v0.c1)AND(v0.c1)))OR(vt0.c0)))AND('-1680991631')))AND(v0.c1)))AND(v0.c3))))  NULLS LAST;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON ((((((json_insert(vt2.c1, vt2.c1, vt0.c0, v0.c1, 'I Sub', vt2.c1))OR((((vt2.c1, v0.c0, vt0.c0)) BETWEEN ((v0.c0, v0.c1, v0.c0)) AND ((vt2.c1, vt0.c0, v0.c2))))))OR(((((((v0.c2)OR(vt2.c1)))OR(v0.c3)))AND(v0.c3)))))AND(TYPEOF(v0.c1))) INNER JOIN vt0 ON ((vt2.c1) NOTNULL) WHERE ((- ((+ (vt2.c1))))) ORDER BY ((((vt2.c0)<=(v0.c0)))>>(((((((((((v0.c1)AND(v0.c1)))OR(vt0.c0)))AND('-1680991631')))AND(v0.c1)))AND(v0.c3))))  NULLS LAST LIMIT 1;
SELECT ALL MAX(vt2.c1) FROM vt2, vt0 WHERE (CAST(((((((vt2.c0)OR(vt0.c0)))AND(vt2.c0)))OR(x'')) AS INTEGER)) ORDER BY CAST((~ (vt2.c0)) AS BLOB), load_extension(CASE vt0.c0  WHEN vt0.c0 THEN x'101f0fc9' END);
SELECT MAX(vt2.c1) FROM vt2, vt0 WHERE (((CAST(((((((vt2.c0)OR(vt0.c0)))AND(vt2.c0)))OR(x'')) AS INTEGER))AND(((CASE vt0.c0  WHEN vt0.c0 THEN vt2.c0 END) BETWEEN (vt0.c0) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0))))))) ORDER BY ((0xffffffffce4a4571) ISNULL), ((((((((vt2.c1)AND(vt2.c1)))OR(vt0.c0)))OR((vt0.c0 IN (vt2.c0)))))OR(CASE 'q*Uk륳'  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END)) ASC;
SELECT ALL MIN(v0.c3) FROM vt2, vt0 NOT INDEXED, v0 WHERE ((((vt2.c1)) NOT BETWEEN ((((0xffffffff8864fe81)*(v0.c3)))) AND ((((vt0.c0) BETWEEN (NULL) AND (vt2.c1)))))) ORDER BY vt2.c0 DESC, ((((v0.c3)IS(vt0.c0))) BETWEEN ((~ (vt0.c0))) AND (((v0.c1)<>(vt0.c0)))) DESC;
SELECT MIN(v0.c3) FROM vt2, vt0, v0 WHERE ((((vt2.c1)) NOT BETWEEN ((((-2006647167)*(v0.c3)))) AND ((((vt0.c0) BETWEEN (NULL) AND (vt2.c1)))))) ORDER BY vt2.c0 DESC, ((((v0.c3)IS(vt0.c0))) BETWEEN ((~ (vt0.c0))) AND (((v0.c1)<>(vt0.c0)))) DESC INTERSECT SELECT ALL MIN(v0.c3) FROM vt2, vt0, v0 WHERE ((((((((v0.c0)) NOT BETWEEN ((x'1cb976')) AND ((vt2.c0))))AND(((((((v0.c2)AND(vt2.c1)))AND(v0.c3)))OR(v0.c0)))))OR((- (vt2.c1))))) ORDER BY vt2.c0 DESC, ((((v0.c3)IS(vt0.c0))) BETWEEN ((~ (vt0.c0))) AND (((v0.c1)<>(vt0.c0)))) DESC;
SELECT MAX(v0.c2) FROM vt0, v0, vt2 WHERE (x'3656');
SELECT MAX(v0.c2) FROM vt0, v0, vt2 WHERE (x'3656') ORDER BY x'ea' ASC  NULLS LAST, '' DESC LIMIT 2 INTERSECT SELECT ALL MAX(v0.c2) FROM vt0, v0, vt2 WHERE (((vt0.c0 COLLATE RTRIM)%(x'8a34'))) ORDER BY x'ea' ASC  NULLS LAST, '' DESC LIMIT 0x2;
SELECT ALL MAX(vt2.c1) FROM vt0, vt2, v0 WHERE ((+ ((('994--2298323539259839117-8064632323267308591:295438326278816542 1571 838 -4548526287049158318T-7473820723869861943 ') IS FALSE))));
SELECT DISTINCT MAX(vt2.c1) FROM vt0, vt2, v0 WHERE ((((+ ((('994--2298323539259839117-8064632323267308591:295438326278816542 1571 838 -4548526287049158318T-7473820723869861943 ') IS FALSE))))AND(''))) ORDER BY ((((((((((((v0.c1)AND(v0.c2)))OR(v0.c3)))AND(v0.c1)))OR(v0.c2)))AND(((v0.c2)AND(v0.c3)))))OR((NOT (v0.c2)))), '526554451'  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt0, vt2, v0 WHERE (((((((CASE WHEN v0.c0 THEN vt0.c0 ELSE v0.c0 END)OR(((vt2.c1) NOTNULL))))OR(CASE WHEN v0.c2 THEN v0.c3 END)))AND(((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c0))))) ORDER BY ((((((((((((v0.c1)AND(v0.c2)))OR(v0.c3)))AND(v0.c1)))OR(v0.c2)))AND(((v0.c2)AND(v0.c3)))))OR((NOT (v0.c2)))), '526554451'  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt2 WHERE (CASE WHEN ((vt2.c1) IS FALSE) THEN ((((((((vt2.c0)AND(NULL)))AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)) END);
SELECT ALL * FROM vt2 WHERE (((CASE WHEN ((vt2.c1) IS FALSE) THEN ((((((((vt2.c0)AND(NULL)))AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)) END)AND(CASE WHEN (vt2.c1 IN ()) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) WHEN ((vt2.c1) IS TRUE) THEN vt2.c0 END))) ORDER BY NULL  NULLS FIRST, (((vt2.c1) ISNULL) IN ()), x''  NULLS FIRST LIMIT 0x3 INTERSECT SELECT ALL * FROM vt2 WHERE (LOWER(((((((vt2.c0)AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c1)))) ORDER BY NULL  NULLS FIRST, (((vt2.c1) ISNULL) IN ()), x''  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt2 WHERE (CASE WHEN ((vt2.c1) IS FALSE) THEN ((((((((vt2.c0)AND(NULL)))AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)) END);
SELECT ALL * FROM vt2 WHERE (((CASE WHEN ((vt2.c1) IS FALSE) THEN ((((((((vt2.c0)AND(NULL)))AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)) END)AND(CASE WHEN (vt2.c1 IN ()) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) WHEN ((vt2.c1) IS TRUE) THEN vt2.c0 END))) ORDER BY NULL  NULLS FIRST, (((vt2.c1) ISNULL) IN ()), x''  NULLS FIRST LIMIT 0x3 INTERSECT SELECT ALL * FROM vt2 WHERE (LOWER(((((((vt2.c0)AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c1)))) ORDER BY NULL  NULLS FIRST, (((vt2.c1) ISNULL) IN ()), x''  NULLS FIRST LIMIT 3;
SELECT * FROM vt2, vt0, v0 WHERE (vt2.c0) ORDER BY -1e500  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((vt2.c0)AND((NOT (((vt0.c0)AND(vt0.c0))))))) ORDER BY -1e500  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (SUBSTR(LIKELY(v0.c0), CAST(v0.c3 AS BLOB))) ORDER BY -1e500  NULLS FIRST LIMIT 0;
SELECT * FROM vt2, vt0, v0 WHERE (vt2.c0) ORDER BY -1e500  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((vt2.c0)AND((NOT (((vt0.c0)AND(vt0.c0))))))) ORDER BY -1e500  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (SUBSTR(LIKELY(v0.c0), CAST(v0.c3 AS BLOB))) ORDER BY -1e500  NULLS FIRST LIMIT 0;
SELECT COUNT(*) FROM vt0, vt2 LEFT OUTER JOIN v0 ON ((CASE vt0.c0  WHEN vt0.c0 THEN v0.c3 ELSE vt0.c0 END)>(((vt2.c0)AND(vt2.c0)))) WHERE ((((((v0.c3, v0.c3)) NOT BETWEEN ((vt2.c0, v0.c1)) AND ((vt0.c0, vt2.c0))))IS NOT(((v0.c2) NOT BETWEEN (vt2.c0) AND ('')))));
SELECT DISTINCT COUNT(*) FROM vt0, vt2 LEFT OUTER JOIN v0 ON ((CASE vt0.c0  WHEN vt0.c0 THEN v0.c3 ELSE vt0.c0 END)>(((vt2.c0)AND(vt2.c0)))) WHERE ((((((v0.c3, v0.c3)) NOT BETWEEN ((vt2.c0, v0.c1)) AND ((vt0.c0, vt2.c0))))IS NOT(((v0.c2) NOT BETWEEN (vt2.c0) AND (''))))) ORDER BY (v0.c0 COLLATE RTRIM IN (v0.c0)) DESC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2 LEFT OUTER JOIN v0 ON ((CASE vt0.c0  WHEN vt0.c0 THEN v0.c3 ELSE vt0.c0 END)>(((vt2.c0)AND(vt2.c0)))) WHERE (((((((json_array_length(vt2.c1, v0.c2))AND(((((vt2.c1)AND(vt2.c0)))OR(v0.c3)))))AND((((v0.c2, v0.c2))>((v0.c0, v0.c3))))))AND(((vt0.c0) NOT BETWEEN (0.7822337193029021) AND (v0.c0))))) ORDER BY (v0.c0 COLLATE RTRIM IN (v0.c0)) DESC  NULLS LAST;
SELECT ALL MAX(v0.c3) FROM v0 WHERE (CAST(((((((((v0.c3)OR(v0.c0)))AND(v0.c2)))AND(v0.c0)))OR(v0.c3)) AS NUMERIC));
SELECT MAX(v0.c3) FROM v0 WHERE (CAST(((((((((v0.c3)OR(v0.c0)))AND(v0.c2)))AND(v0.c0)))OR(v0.c3)) AS NUMERIC)) LIMIT 0x1;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (vt0.c0 COLLATE BINARY) ORDER BY (NOT ('NaN')) COLLATE NOCASE DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE BINARY)AND(((((((vt0.c0)LIKE(vt0.c0)))OR(vt0.c0)))AND(((vt0.c0) NOTNULL)))))) ORDER BY (NOT ('NaN')) COLLATE NOCASE DESC  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM vt0, vt2 WHERE ((((vt2.c0 IN (vt2.c0)))<=(((vt0.c0)>(NULL)))));
SELECT DISTINCT * FROM vt0, vt2 WHERE ((((vt2.c0 IN (vt2.c0)))<=(((vt0.c0)>(NULL))))) LIMIT 0;
SELECT ALL * FROM vt0, vt2 WHERE ((((vt2.c0 IN (vt2.c0)))<=(((vt0.c0)>(NULL)))));
SELECT DISTINCT * FROM vt0, vt2 WHERE ((((vt2.c0 IN (vt2.c0)))<=(((vt0.c0)>(NULL))))) LIMIT 0;
SELECT * FROM v0 WHERE (NULL) ORDER BY (((((((v0.c2))<=((v0.c0))))OR(((v0.c0) NOTNULL))))OR(((((((((v0.c2)AND(v0.c3)))OR(v0.c3)))OR('')))AND(v0.c0))))  NULLS LAST, CASE WHEN (~ (v0.c0)) THEN ((v0.c0)>(v0.c2)) ELSE CAST(v0.c0 AS TEXT) END ASC;
SELECT DISTINCT * FROM v0 WHERE (((NULL)AND(NULL))) ORDER BY ((CAST(v0.c1 AS INTEGER)) BETWEEN (((((((v0.c1)AND(v0.c0)))OR(v0.c0)))OR(v0.c2))) AND (((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1))))  NULLS FIRST, '-1282635533' ASC;
SELECT * FROM v0 WHERE (NULL) ORDER BY (((((((v0.c2))<=((v0.c0))))OR(((v0.c0) NOTNULL))))OR(((((((((v0.c2)AND(v0.c3)))OR(v0.c3)))OR('')))AND(v0.c0))))  NULLS LAST, CASE WHEN (~ (v0.c0)) THEN ((v0.c0)>(v0.c2)) ELSE CAST(v0.c0 AS TEXT) END ASC;
SELECT DISTINCT * FROM v0 WHERE (((NULL)AND(NULL))) ORDER BY ((CAST(v0.c1 AS INTEGER)) BETWEEN (((((((v0.c1)AND(v0.c0)))OR(v0.c0)))OR(v0.c2))) AND (((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1))))  NULLS FIRST, '-1282635533' ASC;
SELECT * FROM v0 CROSS JOIN vt0 ON QUOTE(v0.c1) COLLATE BINARY WHERE (((((((v0.c3)OR(v0.c1)))OR(vt0.c0))) NOTNULL));
SELECT * FROM v0 CROSS JOIN vt0 ON QUOTE(v0.c1) COLLATE BINARY WHERE (((((((((v0.c3)OR(v0.c1)))OR(vt0.c0))) NOTNULL))AND((((((v0.c2, v0.c0))<((v0.c0, vt0.c0))))<=(v0.c3))))) ORDER BY 'B)8 n#LAd', CAST(v0.c1 AS REAL);
SELECT * FROM v0 CROSS JOIN vt0 ON QUOTE(v0.c1) COLLATE BINARY WHERE (((((((v0.c3)OR(v0.c1)))OR(vt0.c0))) NOTNULL));
SELECT * FROM v0 CROSS JOIN vt0 ON QUOTE(v0.c1) COLLATE BINARY WHERE (((((((((v0.c3)OR(v0.c1)))OR(vt0.c0))) NOTNULL))AND((((((v0.c2, v0.c0))<((v0.c0, vt0.c0))))<=(v0.c3))))) ORDER BY 'B)8 n#LAd', CAST(v0.c1 AS REAL);
SELECT * FROM v0, vt2 WHERE ((+ (((vt2.c0) NOT NULL))));
SELECT ALL * FROM v0, vt2 WHERE ((+ (((vt2.c0) NOT NULL)))) ORDER BY (vt2.c0 IN ()) COLLATE BINARY ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM v0, vt2 NOT INDEXED WHERE (((((((((((((v0.c0)AND(v0.c0)))AND(v0.c3)))AND(v0.c1)))OR(v0.c0)))AND(v0.c1))) NOT BETWEEN (v0.c3) AND (((((((((v0.c0)OR(vt2.c1)))AND(v0.c3)))AND(vt2.c1)))AND(v0.c1))))) ORDER BY (vt2.c0 IN ()) COLLATE BINARY ASC  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0, vt2 WHERE ((+ (((vt2.c0) NOT NULL))));
SELECT ALL * FROM v0, vt2 WHERE ((+ (((vt2.c0) NOT NULL)))) ORDER BY (vt2.c0 IN ()) COLLATE BINARY ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM v0, vt2 NOT INDEXED WHERE (((((((((((((v0.c0)AND(v0.c0)))AND(v0.c3)))AND(v0.c1)))OR(v0.c0)))AND(v0.c1))) NOT BETWEEN (v0.c3) AND (((((((((v0.c0)OR(vt2.c1)))AND(v0.c3)))AND(vt2.c1)))AND(v0.c1))))) ORDER BY (vt2.c0 IN ()) COLLATE BINARY ASC  NULLS FIRST LIMIT 0X0;
SELECT COUNT(*) FROM vt0, vt2 WHERE (vt2.c0);
SELECT DISTINCT COUNT(*) FROM vt0, vt2 WHERE (((vt2.c0)AND(json((vt0.c0 IN (vt2.c0)))))) LIMIT 0X2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2 WHERE (vt0.c0) LIMIT 0x2;
SELECT ALL MIN(v0.c2) FROM vt0 LEFT OUTER JOIN v0 ON ((v0.c0) NOT NULL) COLLATE NOCASE WHERE ((- (((((((x'228d')AND(v0.c0)))AND(v0.c2)))OR('1190017638')))));
SELECT MIN(v0.c2) FROM vt0 LEFT OUTER JOIN v0 ON ((v0.c0) NOT NULL) COLLATE NOCASE WHERE ((((- (((((((x'228d')AND(v0.c0)))AND(v0.c2)))OR('1190017638')))))AND(((((vt0.c0) IS FALSE))%((((v0.c1, v0.c0, v0.c3))<((v0.c3, v0.c2, v0.c0)))))))) ORDER BY (((CAST(v0.c3 AS TEXT), v0.c0))<>((v0.c3, (vt0.c0 IN ()))))  NULLS LAST LIMIT 0x0;
SELECT * FROM vt2 WHERE ((((vt2.c0 IN ())) BETWEEN (((vt2.c0) IS FALSE)) AND (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 END)));
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c0 IN ())) BETWEEN (((vt2.c0) IS FALSE)) AND (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 END)))AND(vt2.c0))) ORDER BY (~ (vt2.c0 COLLATE RTRIM)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c1)<(vt2.c1)))*(((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c1))))) ORDER BY (~ (vt2.c0 COLLATE RTRIM)) LIMIT 0x1;
SELECT * FROM vt2 WHERE ((((vt2.c0 IN ())) BETWEEN (((vt2.c0) IS FALSE)) AND (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 END)));
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c0 IN ())) BETWEEN (((vt2.c0) IS FALSE)) AND (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 END)))AND(vt2.c0))) ORDER BY (~ (vt2.c0 COLLATE RTRIM)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c1)<(vt2.c1)))*(((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c1))))) ORDER BY (~ (vt2.c0 COLLATE RTRIM)) LIMIT 0x1;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((v0.c2 IN ()))>=('-1429548611')));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((v0.c2 IN ()))>=('-1429548611')))AND(((x'')-((((0.575141059001527))>((v0.c3)))))))) ORDER BY UNLIKELY(DISTINCT (v0.c3 IN ()))  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((v0.c2 IN ()))>=('-1429548611')));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((v0.c2 IN ()))>=('-1429548611')))AND(((x'')-((((0.575141059001527))>((v0.c3)))))))) ORDER BY UNLIKELY(DISTINCT (v0.c3 IN ()))  NULLS LAST;
SELECT COUNT(*) FROM v0 WHERE (((v0.c2) IS FALSE) COLLATE BINARY) ORDER BY (x'' IN (v0.c3)) COLLATE NOCASE DESC  NULLS LAST, ((v0.c1) NOTNULL) COLLATE BINARY;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c2) IS FALSE) COLLATE BINARY) ORDER BY x'2781' ASC, 0.15191584828525062 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (CASE WHEN CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c2 END THEN ((v0.c1)%(x'')) WHEN (v0.c2 IN ()) THEN (+ (v0.c2)) ELSE 0.9883211527325997 END) ORDER BY x'2781' ASC, 0.15191584828525062;
SELECT COUNT(*) FROM v0 WHERE (((0.05509927846959273)&(((('8kZ>cs', v0.c0))!=((v0.c2, v0.c3)))))) ORDER BY '-387031235' COLLATE NOCASE DESC;
SELECT ALL COUNT(*) FROM v0 WHERE (((0.05509927846959273)&(((('8kZ>cs', v0.c0))<((v0.c2, v0.c3)))))) ORDER BY (((v0.c3, v0.c0, v0.c3)) BETWEEN ((UPPER(DISTINCT v0.c1), LIKELY(DISTINCT v0.c0), (v0.c0 IN (NULL)))) AND (('1839189666', x'e8', (((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c0)))))) DESC, ((((v0.c2)IS(v0.c1)))<(CAST(v0.c1 AS REAL))) DESC, CAST(x'f042' AS REAL) DESC INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE ((('0.8051170643003698') ISNULL)) ORDER BY (((v0.c3, v0.c0, v0.c3)) BETWEEN ((UPPER(DISTINCT v0.c1), LIKELY(DISTINCT v0.c0), (v0.c0 IN (NULL)))) AND (('1839189666', x'e8', (((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c0)))))) DESC, ((((v0.c2)IS(v0.c1)))<(CAST(v0.c1 AS REAL))) DESC, CAST(x'f042' AS REAL) DESC;
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)))>(CAST(vt2.c0 AS NUMERIC))) WHERE (CAST((vt0.c0 IN (vt2.c1)) AS TEXT)) ORDER BY ((0.8563166161282179 COLLATE NOCASE) IS TRUE);
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)))>(CAST(vt2.c0 AS NUMERIC))) WHERE (CAST((vt0.c0 IN (vt2.c1)) AS TEXT)) ORDER BY LIKELY(DISTINCT ((((((((0Xfffffffff43a7010)OR(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))  NULLS FIRST, ((((vt2.c0)IS NOT(vt2.c1)))/(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0)))) ASC  NULLS LAST LIMIT 3 INTERSECT SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)))>(CAST(vt2.c0 AS NUMERIC))) WHERE (0.2423904930873102) ORDER BY LIKELY(DISTINCT ((((((((0Xfffffffff43a7010)OR(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))  NULLS FIRST, ((((vt2.c0)IS NOT(vt2.c1)))/(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0)))) ASC  NULLS LAST LIMIT 0x3;
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)))>(CAST(vt2.c0 AS NUMERIC))) WHERE (CAST((vt0.c0 IN (vt2.c1)) AS TEXT)) ORDER BY ((0.8563166161282179 COLLATE NOCASE) IS TRUE);
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)))>(CAST(vt2.c0 AS NUMERIC))) WHERE (CAST((vt0.c0 IN (vt2.c1)) AS TEXT)) ORDER BY LIKELY(DISTINCT ((((((((0Xfffffffff43a7010)OR(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))  NULLS FIRST, ((((vt2.c0)IS NOT(vt2.c1)))/(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0)))) ASC  NULLS LAST LIMIT 3 INTERSECT SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)))>(CAST(vt2.c0 AS NUMERIC))) WHERE (0.2423904930873102) ORDER BY LIKELY(DISTINCT ((((((((0Xfffffffff43a7010)OR(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))  NULLS FIRST, ((((vt2.c0)IS NOT(vt2.c1)))/(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0)))) ASC  NULLS LAST LIMIT 0x3;
SELECT MAX(vt2.c0) FROM vt2 WHERE ((((vt2.c1, vt2.c0)) NOT BETWEEN ((CAST(0.12939489118821834 AS INTEGER), ((vt2.c0) NOT BETWEEN (x'b1b307') AND (vt2.c0)))) AND ((((vt2.c1) NOTNULL), json_array(vt2.c1, vt2.c0, vt2.c0)))));
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE ((((((vt2.c1, vt2.c0)) NOT BETWEEN ((CAST(0.12939489118821834 AS INTEGER), ((vt2.c0) NOT BETWEEN (x'b1b307') AND (vt2.c0)))) AND ((((vt2.c1) NOTNULL), json_array(vt2.c1, vt2.c0, vt2.c0)))))AND((vt2.c1 IN (((vt2.c0)!=(vt2.c1)), (((-769760503, vt2.c1)) BETWEEN ((vt2.c0, NULL)) AND ((vt2.c0, vt2.c0)))))))) ORDER BY ('Dle>&63>' IN (CASE WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END, (vt2.c1 IN (vt2.c1)))) DESC, QUOTE(vt2.c1 COLLATE BINARY);
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((HEX(vt0.c0)) BETWEEN (((((x'a45f')OR(x'db385e')))AND(vt0.c0))) AND (UPPER(DISTINCT v0.c1)))) ORDER BY vt0.c0  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (((((HEX(vt0.c0)) BETWEEN (((((x'a45f')OR(x'db385e')))AND(vt0.c0))) AND (UPPER(DISTINCT v0.c1))))AND((+ (CASE 0.4505668757794715  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END))))) ORDER BY vt0.c0  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((v0.c2 COLLATE RTRIM)IS((0X4c91f3ed IN (v0.c1)))));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2 COLLATE RTRIM)IS((1284633581 IN (v0.c1)))))AND(((v0.c0) BETWEEN (v0.c0) AND (98818379)) COLLATE NOCASE))) ORDER BY CAST(v0.c1 AS BLOB) DESC INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c1 IN ()) IN ((((v0.c2, v0.c3)) NOT BETWEEN ((v0.c2, v0.c3)) AND ((v0.c3, v0.c2)))))) ORDER BY CAST(v0.c1 AS BLOB) DESC;
SELECT ALL * FROM v0 WHERE (((v0.c2 COLLATE RTRIM)IS((0X4c91f3ed IN (v0.c1)))));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2 COLLATE RTRIM)IS((1284633581 IN (v0.c1)))))AND(((v0.c0) BETWEEN (v0.c0) AND (98818379)) COLLATE NOCASE))) ORDER BY CAST(v0.c1 AS BLOB) DESC INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c1 IN ()) IN ((((v0.c2, v0.c3)) NOT BETWEEN ((v0.c2, v0.c3)) AND ((v0.c3, v0.c2)))))) ORDER BY CAST(v0.c1 AS BLOB) DESC;
SELECT ALL * FROM vt0 WHERE (TRIM(DISTINCT ((vt0.c0)*(vt0.c0)), ((vt0.c0)<=(vt0.c0))));
SELECT ALL * FROM vt0 WHERE (((TRIM(DISTINCT ((vt0.c0)*(vt0.c0)), ((vt0.c0)==(vt0.c0))))AND(((vt0.c0)<((((vt0.c0, '')) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0)))))))) INTERSECT SELECT ALL * FROM vt0 WHERE (LIKELY((NOT (vt0.c0))));
SELECT ALL * FROM vt0 WHERE (TRIM(DISTINCT ((vt0.c0)*(vt0.c0)), ((vt0.c0)<=(vt0.c0))));
SELECT ALL * FROM vt0 WHERE (((TRIM(DISTINCT ((vt0.c0)*(vt0.c0)), ((vt0.c0)==(vt0.c0))))AND(((vt0.c0)<((((vt0.c0, '')) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0)))))))) INTERSECT SELECT ALL * FROM vt0 WHERE (LIKELY((NOT (vt0.c0))));
SELECT COUNT(*) FROM v0 WHERE (CAST((v0.c0 IN (v0.c2, v0.c3)) AS TEXT)) ORDER BY v0.c2 ASC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (CAST((v0.c0 IN (v0.c2, v0.c3)) AS TEXT)) ORDER BY (- (((v0.c1) IS FALSE))) ASC;
SELECT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0)LIKE(vt0.c0)) AS NUMERIC));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0)LIKE(vt0.c0)) AS NUMERIC)) INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((+ (vt0.c0 COLLATE RTRIM)));
SELECT * FROM vt2 WHERE ((+ ((+ (vt2.c1)))));
SELECT ALL * FROM vt2 WHERE ((((+ ((+ (vt2.c1)))))AND(((((((vt2.c0, vt2.c1, vt2.c1))==((vt2.c0, vt2.c0, vt2.c0))), ((vt2.c0)>(vt2.c0)), vt2.c0, vt2.c1 COLLATE NOCASE))<>((vt2.c0 COLLATE RTRIM, vt2.c0, vt2.c1, ((((((((vt2.c0)AND('2077826563')))AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c1)))))))) LIMIT 0X1;
SELECT * FROM vt2 WHERE ((+ ((+ (vt2.c1)))));
SELECT ALL * FROM vt2 WHERE ((((+ ((+ (vt2.c1)))))AND(((((((vt2.c0, vt2.c1, vt2.c1))==((vt2.c0, vt2.c0, vt2.c0))), ((vt2.c0)>(vt2.c0)), vt2.c0, vt2.c1 COLLATE NOCASE))<>((vt2.c0 COLLATE RTRIM, vt2.c0, vt2.c1, ((((((((vt2.c0)AND('2077826563')))AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c1)))))))) LIMIT 0X1;
SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN vt2.c1 THEN v0.c2 ELSE v0.c2 END COLLATE RTRIM WHERE (UNICODE(vt2.c0) COLLATE RTRIM);
SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN vt2.c1 THEN v0.c2 ELSE v0.c2 END COLLATE RTRIM WHERE (UNICODE(vt2.c0) COLLATE RTRIM) ORDER BY ((CASE vt2.c1  WHEN vt2.c1 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 ELSE vt2.c0 END)|(((v0.c3) NOTNULL)))  NULLS FIRST, ((((vt2.c0) ISNULL)) ISNULL)  NULLS LAST, '' ASC INTERSECT SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN vt2.c1 THEN v0.c2 ELSE v0.c2 END COLLATE RTRIM WHERE ((((vt2.c0)) NOT BETWEEN (((vt2.c1 IN ()))) AND ((CAST('Rp}X<Be!' AS INTEGER))))) ORDER BY ((CASE vt2.c1  WHEN vt2.c1 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 ELSE vt2.c0 END)|(((v0.c3) NOTNULL)))  NULLS FIRST, ((((vt2.c0) ISNULL)) ISNULL)  NULLS LAST, '' ASC;
SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN vt2.c1 THEN v0.c2 ELSE v0.c2 END COLLATE RTRIM WHERE (UNICODE(vt2.c0) COLLATE RTRIM);
SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN vt2.c1 THEN v0.c2 ELSE v0.c2 END COLLATE RTRIM WHERE (UNICODE(vt2.c0) COLLATE RTRIM) ORDER BY ((CASE vt2.c1  WHEN vt2.c1 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 ELSE vt2.c0 END)|(((v0.c3) NOTNULL)))  NULLS FIRST, ((((vt2.c0) ISNULL)) ISNULL)  NULLS LAST, '' ASC INTERSECT SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN vt2.c1 THEN v0.c2 ELSE v0.c2 END COLLATE RTRIM WHERE ((((vt2.c0)) NOT BETWEEN (((vt2.c1 IN ()))) AND ((CAST('Rp}X<Be!' AS INTEGER))))) ORDER BY ((CASE vt2.c1  WHEN vt2.c1 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 ELSE vt2.c0 END)|(((v0.c3) NOTNULL)))  NULLS FIRST, ((((vt2.c0) ISNULL)) ISNULL)  NULLS LAST, '' ASC;
SELECT * FROM vt2 WHERE (vt2.c1);
SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1)AND(CASE vt2.c1  WHEN ((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)) THEN ((vt2.c1)LIKE(vt2.c1)) WHEN '-386582235' THEN ((vt2.c0) IS FALSE) WHEN ((((vt2.c1)AND(vt2.c1)))AND(vt2.c0)) THEN (- (vt2.c0)) WHEN (((vt2.c1))<>((vt2.c1))) THEN vt2.c0 COLLATE NOCASE END))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((NULLIF(DISTINCT vt2.c1, vt2.c1)))=((((vt2.c0)GLOB(vt2.c0)))))) LIMIT 0;
SELECT * FROM vt2 WHERE (vt2.c1);
SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1)AND(CASE vt2.c1  WHEN ((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)) THEN ((vt2.c1)LIKE(vt2.c1)) WHEN '-386582235' THEN ((vt2.c0) IS FALSE) WHEN ((((vt2.c1)AND(vt2.c1)))AND(vt2.c0)) THEN (- (vt2.c0)) WHEN (((vt2.c1))<>((vt2.c1))) THEN vt2.c0 COLLATE NOCASE END))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((NULLIF(DISTINCT vt2.c1, vt2.c1)))=((((vt2.c0)GLOB(vt2.c0)))))) LIMIT 0;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((CAST('M({' AS TEXT) IN ()));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((CAST('M({' AS TEXT) IN ())) ORDER BY ((((v0.c0)<(v0.c3))) NOTNULL) DESC LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (json_type(LIKELY(DISTINCT v0.c2))) ORDER BY ((((v0.c0)<(v0.c3))) NOTNULL) DESC LIMIT 0;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((CAST('M({' AS TEXT) IN ()));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((CAST('M({' AS TEXT) IN ())) ORDER BY ((((v0.c0)<(v0.c3))) NOTNULL) DESC LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (json_type(LIKELY(DISTINCT v0.c2))) ORDER BY ((((v0.c0)<(v0.c3))) NOTNULL) DESC LIMIT 0;
SELECT ALL * FROM vt2 WHERE ((((vt2.c1)>=(vt2.c0)) IN (((vt2.c0)>(vt2.c0)))));
SELECT ALL * FROM vt2 WHERE ((((vt2.c1)=(vt2.c0)) IN (((vt2.c0)>(vt2.c0))))) ORDER BY (+ (vt2.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt2 WHERE ((((vt2.c0, vt2.c1)) BETWEEN ((CAST(vt2.c0 AS REAL), ABS(DISTINCT vt2.c0))) AND (((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))), (((vt2.c1, vt2.c0, vt2.c0))<=((vt2.c1, vt2.c0, vt2.c0))))))) ORDER BY (+ (vt2.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt2 WHERE ((((vt2.c1)>=(vt2.c0)) IN (((vt2.c0)>(vt2.c0)))));
SELECT ALL * FROM vt2 WHERE ((((vt2.c1)=(vt2.c0)) IN (((vt2.c0)>(vt2.c0))))) ORDER BY (+ (vt2.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt2 WHERE ((((vt2.c0, vt2.c1)) BETWEEN ((CAST(vt2.c0 AS REAL), ABS(DISTINCT vt2.c0))) AND (((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))), (((vt2.c1, vt2.c0, vt2.c0))<=((vt2.c1, vt2.c0, vt2.c0))))))) ORDER BY (+ (vt2.c1)) COLLATE NOCASE  NULLS FIRST LIMIT 0X1;
SELECT MAX(vt2.c1) FROM vt2 LEFT OUTER JOIN vt0 ON (~ ((NOT (vt2.c1)))) WHERE (vt0.c0);
SELECT DISTINCT MAX(vt2.c1) FROM vt2 LEFT OUTER JOIN vt0 ON (~ ((NOT (vt2.c1)))) WHERE (((vt0.c0)AND((((((vt0.c0) IS FALSE)))==((CAST(vt2.c1 AS TEXT))))))) INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2 LEFT OUTER JOIN vt0 ON (~ ((NOT (vt2.c1)))) WHERE (CAST(LIKELIHOOD(0.8185504420821136, vt0.c0) AS REAL));
SELECT ALL * FROM vt0 WHERE (((((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.855711865185379 COLLATE BINARY)))AND((- (vt0.c0)))))AND(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)));
SELECT ALL * FROM vt0 WHERE (((((((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.855711865185379 COLLATE BINARY)))AND((- (vt0.c0)))))AND(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)))AND((((vt0.c0 IN (vt0.c0)))<<(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))))) ORDER BY (((((vt0.c0) IS FALSE)))!=((((vt0.c0)=(vt0.c0))))) DESC  NULLS LAST, vt0.c0 LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.855711865185379 COLLATE BINARY)))AND((- (vt0.c0)))))AND(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)));
SELECT ALL * FROM vt0 WHERE (((((((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.855711865185379 COLLATE BINARY)))AND((- (vt0.c0)))))AND(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)))AND((((vt0.c0 IN (vt0.c0)))<<(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))))) ORDER BY (((((vt0.c0) IS FALSE)))!=((((vt0.c0)=(vt0.c0))))) DESC  NULLS LAST, vt0.c0 LIMIT 0;
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE (((v0.c1 COLLATE NOCASE)||(((((vt0.c0)AND(vt2.c1)))AND(v0.c0)))));
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE (((v0.c1 COLLATE NOCASE)||(((((vt0.c0)AND(vt2.c1)))AND(v0.c0))))) LIMIT 0X1 INTERSECT SELECT COUNT(*) FROM v0, vt2, vt0 WHERE (((((v0.c2)*(NULL)))LIKE((((vt2.c1)) BETWEEN ((x'')) AND ((v0.c3)))))) LIMIT 0X1;
SELECT * FROM vt2 WHERE (CAST(((vt2.c1) IS TRUE) AS NUMERIC)) ORDER BY (((((((((vt2.c0, vt2.c0))>=((vt2.c0, vt2.c1))))AND(vt2.c0)))OR(LIKELY(vt2.c0))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN '2046917404' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE (((CAST(((vt2.c1) IS TRUE) AS NUMERIC))AND(vt2.c1))) ORDER BY (((((((((vt2.c0, vt2.c0))>=((vt2.c0, vt2.c1))))AND(vt2.c0)))OR(LIKELY(vt2.c0))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN '2046917404' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2 WHERE (CASE (((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))  WHEN CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END THEN ((vt2.c1) ISNULL) WHEN DATE(vt2.c1, vt2.c0, vt2.c0) THEN json(vt2.c1) WHEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)) THEN ((vt2.c1) NOT NULL) ELSE (vt2.c0 IN (vt2.c0)) END) ORDER BY (((((((((vt2.c0, vt2.c0))>=((vt2.c0, vt2.c1))))AND(vt2.c0)))OR(LIKELY(vt2.c0))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN '2046917404' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)) ASC  NULLS LAST;
SELECT * FROM vt2 WHERE (CAST(((vt2.c1) IS TRUE) AS NUMERIC)) ORDER BY (((((((((vt2.c0, vt2.c0))>=((vt2.c0, vt2.c1))))AND(vt2.c0)))OR(LIKELY(vt2.c0))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN '2046917404' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE (((CAST(((vt2.c1) IS TRUE) AS NUMERIC))AND(vt2.c1))) ORDER BY (((((((((vt2.c0, vt2.c0))>=((vt2.c0, vt2.c1))))AND(vt2.c0)))OR(LIKELY(vt2.c0))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN '2046917404' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2 WHERE (CASE (((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))  WHEN CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END THEN ((vt2.c1) ISNULL) WHEN DATE(vt2.c1, vt2.c0, vt2.c0) THEN json(vt2.c1) WHEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)) THEN ((vt2.c1) NOT NULL) ELSE (vt2.c0 IN (vt2.c0)) END) ORDER BY (((((((((vt2.c0, vt2.c0))>=((vt2.c0, vt2.c1))))AND(vt2.c0)))OR(LIKELY(vt2.c0))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN '2046917404' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)) ASC  NULLS LAST;
SELECT MAX(v0.c2) FROM vt0, vt2 NATURAL JOIN v0 WHERE (((((v0.c3) NOT BETWEEN (v0.c1) AND (vt0.c0))) NOT BETWEEN (((v0.c2) IS FALSE)) AND ((((v0.c2))<=((vt2.c0))))));
SELECT ALL MAX(v0.c2) FROM vt0, vt2 NATURAL JOIN v0 WHERE (((((v0.c3) NOT BETWEEN (v0.c1) AND (vt0.c0))) NOT BETWEEN (((v0.c2) IS FALSE)) AND ((((v0.c2))<=((vt2.c0)))))) LIMIT 0X0 INTERSECT SELECT MAX(v0.c2) FROM vt0, vt2 NATURAL JOIN v0 WHERE (((((((vt0.c0 COLLATE NOCASE)OR((NOT (vt0.c0)))))AND((((v0.c0))<=((vt2.c1))))))AND((~ (vt0.c0))))) LIMIT 0X0;
SELECT * FROM v0, vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt2.c0) AND (v0.c0))) IS TRUE));
SELECT * FROM v0, vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt2.c0) AND (v0.c0))) IS TRUE)) ORDER BY (((SUBSTR(vt2.c1, vt2.c1), ((((((((((((v0.c0)AND(vt2.c1)))AND(v0.c3)))AND(vt2.c0)))OR(v0.c1)))OR(v0.c0)))AND(v0.c3)), ((v0.c0)>=(v0.c3)), ((vt0.c0)&(v0.c0)), ((((((v0.c0)OR(x'cb13')))OR(vt2.c0)))OR(v0.c3))))!=((vt2.c1, v0.c3, (- (vt0.c0)), v0.c0, v0.c1))) DESC, v0.c0  NULLS LAST, CAST(v0.c3 AS NUMERIC) COLLATE NOCASE LIMIT 5 INTERSECT SELECT * FROM v0, vt2, vt0 WHERE ((((vt0.c0)) NOT BETWEEN ((CAST(vt0.c0 AS REAL))) AND ((((v0.c1) BETWEEN (vt0.c0) AND (v0.c1)))))) ORDER BY (((SUBSTR(vt2.c1, vt2.c1), ((((((((((((v0.c0)AND(vt2.c1)))AND(v0.c3)))AND(vt2.c0)))OR(v0.c1)))OR(v0.c0)))AND(v0.c3)), ((v0.c0)>=(v0.c3)), ((vt0.c0)&(v0.c0)), ((((((v0.c0)OR(x'cb13')))OR(vt2.c0)))OR(v0.c3))))<>((vt2.c1, v0.c3, (- (vt0.c0)), v0.c0, v0.c1))) DESC, v0.c0  NULLS LAST, CAST(v0.c3 AS NUMERIC) COLLATE NOCASE LIMIT 0x5;
SELECT * FROM v0, vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt2.c0) AND (v0.c0))) IS TRUE));
SELECT * FROM v0, vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt2.c0) AND (v0.c0))) IS TRUE)) ORDER BY (((SUBSTR(vt2.c1, vt2.c1), ((((((((((((v0.c0)AND(vt2.c1)))AND(v0.c3)))AND(vt2.c0)))OR(v0.c1)))OR(v0.c0)))AND(v0.c3)), ((v0.c0)>=(v0.c3)), ((vt0.c0)&(v0.c0)), ((((((v0.c0)OR(x'cb13')))OR(vt2.c0)))OR(v0.c3))))!=((vt2.c1, v0.c3, (- (vt0.c0)), v0.c0, v0.c1))) DESC, v0.c0  NULLS LAST, CAST(v0.c3 AS NUMERIC) COLLATE NOCASE LIMIT 5 INTERSECT SELECT * FROM v0, vt2, vt0 WHERE ((((vt0.c0)) NOT BETWEEN ((CAST(vt0.c0 AS REAL))) AND ((((v0.c1) BETWEEN (vt0.c0) AND (v0.c1)))))) ORDER BY (((SUBSTR(vt2.c1, vt2.c1), ((((((((((((v0.c0)AND(vt2.c1)))AND(v0.c3)))AND(vt2.c0)))OR(v0.c1)))OR(v0.c0)))AND(v0.c3)), ((v0.c0)>=(v0.c3)), ((vt0.c0)&(v0.c0)), ((((((v0.c0)OR(x'cb13')))OR(vt2.c0)))OR(v0.c3))))<>((vt2.c1, v0.c3, (- (vt0.c0)), v0.c0, v0.c1))) DESC, v0.c0  NULLS LAST, CAST(v0.c3 AS NUMERIC) COLLATE NOCASE LIMIT 0x5;
SELECT * FROM vt2 WHERE (((((vt2.c1)IS NOT(vt2.c1))) NOT BETWEEN ('&') AND ((~ (vt2.c1)))));
SELECT * FROM vt2 WHERE (((((vt2.c1)IS NOT(vt2.c1))) NOT BETWEEN ('&') AND ((~ (vt2.c1))))) ORDER BY CAST(((vt2.c1) IS TRUE) AS INTEGER) DESC  NULLS FIRST, ((CAST(vt2.c0 AS BLOB))%(((((((vt2.c1)OR(vt2.c1)))OR(x'')))OR(vt2.c1)))) LIMIT 2;
SELECT * FROM vt2 WHERE (((((vt2.c1)IS NOT(vt2.c1))) NOT BETWEEN ('&') AND ((~ (vt2.c1)))));
SELECT * FROM vt2 WHERE (((((vt2.c1)IS NOT(vt2.c1))) NOT BETWEEN ('&') AND ((~ (vt2.c1))))) ORDER BY CAST(((vt2.c1) IS TRUE) AS INTEGER) DESC  NULLS FIRST, ((CAST(vt2.c0 AS BLOB))%(((((((vt2.c1)OR(vt2.c1)))OR(x'')))OR(vt2.c1)))) LIMIT 2;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((- ((((v0.c3, vt2.c0, vt2.c1, v0.c1)) BETWEEN ((v0.c1, v0.c3, v0.c1, v0.c2)) AND ((vt2.c0, v0.c3, v0.c3, v0.c0))))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((- ((((v0.c3, vt2.c0, vt2.c1, v0.c1)) BETWEEN ((v0.c1, v0.c3, v0.c1, v0.c2)) AND ((vt2.c0, v0.c3, v0.c3, v0.c0)))))) ORDER BY CASE WHEN ((v0.c3)%(v0.c2)) THEN ((((vt0.c0)OR(v0.c2)))OR('-551752042')) WHEN (((v0.c3))>((v0.c0))) THEN LIKELIHOOD(v0.c1, v0.c2) WHEN (((v0.c3))>((NULL))) THEN ((v0.c1)/(v0.c3)) END, CASE WHEN ((((v0.c3)AND(v0.c1)))OR(v0.c2)) THEN x'' WHEN ((NULL) IS FALSE) THEN (((v0.c2, vt2.c0))>=((vt2.c0, v0.c0))) ELSE ((((((vt0.c0)OR(vt2.c1)))AND(NULL)))AND(vt0.c0)) END ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (0.12792904011923356) ORDER BY CASE WHEN ((v0.c3)%(v0.c2)) THEN ((((vt0.c0)OR(v0.c2)))OR('-551752042')) WHEN (((v0.c3))>((v0.c0))) THEN LIKELIHOOD(v0.c1, v0.c2) WHEN (((v0.c3))>((NULL))) THEN ((v0.c1)/(v0.c3)) END, CASE WHEN ((((v0.c3)AND(v0.c1)))OR(v0.c2)) THEN x'' WHEN ((NULL) IS FALSE) THEN (((v0.c2, vt2.c0))>=((vt2.c0, v0.c0))) ELSE ((((((vt0.c0)OR(vt2.c1)))AND(NULL)))AND(vt0.c0)) END ASC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((- ((((v0.c3, vt2.c0, vt2.c1, v0.c1)) BETWEEN ((v0.c1, v0.c3, v0.c1, v0.c2)) AND ((vt2.c0, v0.c3, v0.c3, v0.c0))))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((- ((((v0.c3, vt2.c0, vt2.c1, v0.c1)) BETWEEN ((v0.c1, v0.c3, v0.c1, v0.c2)) AND ((vt2.c0, v0.c3, v0.c3, v0.c0)))))) ORDER BY CASE WHEN ((v0.c3)%(v0.c2)) THEN ((((vt0.c0)OR(v0.c2)))OR('-551752042')) WHEN (((v0.c3))>((v0.c0))) THEN LIKELIHOOD(v0.c1, v0.c2) WHEN (((v0.c3))>((NULL))) THEN ((v0.c1)/(v0.c3)) END, CASE WHEN ((((v0.c3)AND(v0.c1)))OR(v0.c2)) THEN x'' WHEN ((NULL) IS FALSE) THEN (((v0.c2, vt2.c0))>=((vt2.c0, v0.c0))) ELSE ((((((vt0.c0)OR(vt2.c1)))AND(NULL)))AND(vt0.c0)) END ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (0.12792904011923356) ORDER BY CASE WHEN ((v0.c3)%(v0.c2)) THEN ((((vt0.c0)OR(v0.c2)))OR('-551752042')) WHEN (((v0.c3))>((v0.c0))) THEN LIKELIHOOD(v0.c1, v0.c2) WHEN (((v0.c3))>((NULL))) THEN ((v0.c1)/(v0.c3)) END, CASE WHEN ((((v0.c3)AND(v0.c1)))OR(v0.c2)) THEN x'' WHEN ((NULL) IS FALSE) THEN (((v0.c2, vt2.c0))>=((vt2.c0, v0.c0))) ELSE ((((((vt0.c0)OR(vt2.c1)))AND(NULL)))AND(vt0.c0)) END ASC  NULLS FIRST LIMIT 0;
SELECT ALL MIN(v0.c1) FROM vt0, vt2, v0 WHERE (v0.c0) ORDER BY CASE ((v0.c2) BETWEEN (vt2.c1) AND (v0.c1))  WHEN (('1014823335')IS(vt2.c0)) THEN (+ (vt2.c0)) END, ((((((((v0.c0)>>(vt0.c0)))AND(((('lB')) NOT BETWEEN (('QMx 2a鯥{}')) AND ((v0.c0))))))OR('NwjBWKf!T')))OR((('k|uTE_[B/') NOT BETWEEN (x'') AND (vt2.c1)))) DESC  NULLS LAST;
SELECT DISTINCT MIN(v0.c1) FROM vt0, vt2, v0 WHERE (v0.c0) ORDER BY CASE ((v0.c2) BETWEEN (vt2.c1) AND (v0.c1))  WHEN (('1014823335')IS(vt2.c0)) THEN (+ (vt2.c0)) END, ((((((((v0.c0)>>(vt0.c0)))AND(((('lB')) NOT BETWEEN (('QMx 2a鯥{}')) AND ((v0.c0))))))OR('NwjBWKf!T')))OR((('k|uTE_[B/') NOT BETWEEN (x'') AND (vt2.c1)))) DESC  NULLS LAST;
SELECT * FROM v0 CROSS JOIN vt2 ON (~ (json_extract(v0.c2, v0.c3, vt2.c0, v0.c1))) LEFT OUTER JOIN vt0 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (v0.c1)))IS(((v0.c3) NOTNULL))) WHERE (((((vt2.c1)/(v0.c3))) NOTNULL));
SELECT DISTINCT * FROM v0 NOT INDEXED CROSS JOIN vt2 ON (~ (json_extract(v0.c2, v0.c3, vt2.c0, v0.c1))) LEFT OUTER JOIN vt0 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (v0.c1)))IS(((v0.c3) NOTNULL))) WHERE (((((vt2.c1)/(v0.c3))) NOTNULL)) INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON (~ (json_extract(v0.c2, v0.c3, vt2.c0, v0.c1))) LEFT OUTER JOIN vt0 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (v0.c1)))IS(((v0.c3) NOTNULL))) WHERE (((v0.c2)=(CASE WHEN v0.c3 THEN 0x36a29c9b END)));
SELECT * FROM v0 CROSS JOIN vt2 ON (~ (json_extract(v0.c2, v0.c3, vt2.c0, v0.c1))) LEFT OUTER JOIN vt0 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (v0.c1)))IS(((v0.c3) NOTNULL))) WHERE (((((vt2.c1)/(v0.c3))) NOTNULL));
SELECT DISTINCT * FROM v0 NOT INDEXED CROSS JOIN vt2 ON (~ (json_extract(v0.c2, v0.c3, vt2.c0, v0.c1))) LEFT OUTER JOIN vt0 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (v0.c1)))IS(((v0.c3) NOTNULL))) WHERE (((((vt2.c1)/(v0.c3))) NOTNULL)) INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON (~ (json_extract(v0.c2, v0.c3, vt2.c0, v0.c1))) LEFT OUTER JOIN vt0 ON ((((vt2.c1) BETWEEN (vt0.c0) AND (v0.c1)))IS(((v0.c3) NOTNULL))) WHERE (((v0.c2)=(CASE WHEN v0.c3 THEN 0x36a29c9b END)));
SELECT ALL MIN(vt0.c0) FROM v0, vt0 WHERE (((0.5683105716680067) ISNULL));
SELECT DISTINCT MIN(vt0.c0) FROM v0, vt0 WHERE (((((0.5683105716680067) ISNULL))AND(((CASE WHEN v0.c2 THEN vt0.c0 WHEN v0.c1 THEN '2103859168' WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END)IS NOT(-1548503606))))) LIMIT 0X2 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM v0, vt0 WHERE (((LIKE(v0.c3, v0.c0)) NOTNULL)) LIMIT 2;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c0))==((vt2.c1))) IN (((vt0.c0)!=('p')))));
SELECT * FROM vt0, vt2 WHERE (((((((vt2.c0))==((vt2.c1))) IN (((vt0.c0)!=('p')))))AND(CAST(vt2.c1 AS REAL) COLLATE RTRIM))) LIMIT 0X5;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c0))==((vt2.c1))) IN (((vt0.c0)!=('p')))));
SELECT * FROM vt0, vt2 WHERE (((((((vt2.c0))==((vt2.c1))) IN (((vt0.c0)!=('p')))))AND(CAST(vt2.c1 AS REAL) COLLATE RTRIM))) LIMIT 0X5;
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (((v0.c3)<(v0.c1)) COLLATE NOCASE) ORDER BY (((x'', v0.c0)) BETWEEN ((CASE v0.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c3 END, (+ (v0.c0)))) AND ((0Xffffffffe54d8a0c, ((((((v0.c2)AND(vt0.c0)))OR(v0.c1)))OR(vt0.c0)))));
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (((v0.c3)<(v0.c1)) COLLATE NOCASE) ORDER BY ((CAST(vt0.c0 AS BLOB))<(CAST(vt0.c0 AS TEXT))) DESC  NULLS LAST, (- (vt0.c0)) COLLATE RTRIM ASC, (('!') NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((((v0.c2)) BETWEEN ((v0.c1)) AND ((v0.c3))))) DESC INTERSECT SELECT MIN(vt0.c0) FROM vt0, v0 WHERE ((((v0.c1)-(vt0.c0)) IN (((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3))))) ORDER BY ((CAST(vt0.c0 AS BLOB))<(CAST(vt0.c0 AS TEXT))) DESC  NULLS LAST, (- (vt0.c0)) COLLATE RTRIM ASC, (('!') NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((((v0.c2)) BETWEEN ((v0.c1)) AND ((v0.c3))))) DESC;
SELECT * FROM vt0 INNER JOIN vt2 ON ((((vt0.c0)-(vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1)))) WHERE (((vt2.c0) IS FALSE) COLLATE BINARY) ORDER BY CASE WHEN ((('V'))==((vt2.c1))) THEN (((NULL, vt2.c0, vt2.c1)) BETWEEN ((x'', vt2.c1, vt0.c0)) AND ((vt2.c1, 1165436722, vt2.c1))) WHEN ((vt2.c1) IS TRUE) THEN UPPER(vt2.c0) ELSE vt2.c0 COLLATE BINARY END ASC  NULLS LAST, STRFTIME(((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS BLOB)) DESC  NULLS LAST, (((((vt2.c0, vt2.c0, vt0.c0))=((vt2.c1, vt2.c1, vt2.c0)))) NOT NULL);
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt0.c0)-(vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1)))) WHERE (((vt2.c0) IS FALSE) COLLATE BINARY) ORDER BY CASE WHEN ((('V'))==((vt2.c1))) THEN (((NULL, vt2.c0, vt2.c1)) BETWEEN ((x'', vt2.c1, vt0.c0)) AND ((vt2.c1, 1165436722, vt2.c1))) WHEN ((vt2.c1) IS TRUE) THEN UPPER(vt2.c0) ELSE vt2.c0 COLLATE BINARY END ASC  NULLS LAST, STRFTIME(((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS BLOB)) DESC  NULLS LAST, (((((vt2.c0, vt2.c0, vt0.c0))==((vt2.c1, vt2.c1, vt2.c0)))) NOT NULL) LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt0.c0)-(vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1)))) WHERE (vt2.c0) ORDER BY CASE WHEN ((('V'))==((vt2.c1))) THEN (((NULL, vt2.c0, vt2.c1)) BETWEEN ((x'', vt2.c1, vt0.c0)) AND ((vt2.c1, 1165436722, vt2.c1))) WHEN ((vt2.c1) IS TRUE) THEN UPPER(vt2.c0) ELSE vt2.c0 COLLATE BINARY END ASC  NULLS LAST, STRFTIME(((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS BLOB)) DESC  NULLS LAST, (((((vt2.c0, vt2.c0, vt0.c0))=((vt2.c1, vt2.c1, vt2.c0)))) NOT NULL) LIMIT 0x1;
SELECT * FROM vt0 INNER JOIN vt2 ON ((((vt0.c0)-(vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1)))) WHERE (((vt2.c0) IS FALSE) COLLATE BINARY) ORDER BY CASE WHEN ((('V'))==((vt2.c1))) THEN (((NULL, vt2.c0, vt2.c1)) BETWEEN ((x'', vt2.c1, vt0.c0)) AND ((vt2.c1, 1165436722, vt2.c1))) WHEN ((vt2.c1) IS TRUE) THEN UPPER(vt2.c0) ELSE vt2.c0 COLLATE BINARY END ASC  NULLS LAST, STRFTIME(((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS BLOB)) DESC  NULLS LAST, (((((vt2.c0, vt2.c0, vt0.c0))=((vt2.c1, vt2.c1, vt2.c0)))) NOT NULL);
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt0.c0)-(vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1)))) WHERE (((vt2.c0) IS FALSE) COLLATE BINARY) ORDER BY CASE WHEN ((('V'))==((vt2.c1))) THEN (((NULL, vt2.c0, vt2.c1)) BETWEEN ((x'', vt2.c1, vt0.c0)) AND ((vt2.c1, 1165436722, vt2.c1))) WHEN ((vt2.c1) IS TRUE) THEN UPPER(vt2.c0) ELSE vt2.c0 COLLATE BINARY END ASC  NULLS LAST, STRFTIME(((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS BLOB)) DESC  NULLS LAST, (((((vt2.c0, vt2.c0, vt0.c0))==((vt2.c1, vt2.c1, vt2.c0)))) NOT NULL) LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((vt0.c0)-(vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1)))) WHERE (vt2.c0) ORDER BY CASE WHEN ((('V'))==((vt2.c1))) THEN (((NULL, vt2.c0, vt2.c1)) BETWEEN ((x'', vt2.c1, vt0.c0)) AND ((vt2.c1, 1165436722, vt2.c1))) WHEN ((vt2.c1) IS TRUE) THEN UPPER(vt2.c0) ELSE vt2.c0 COLLATE BINARY END ASC  NULLS LAST, STRFTIME(((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS BLOB)) DESC  NULLS LAST, (((((vt2.c0, vt2.c0, vt0.c0))=((vt2.c1, vt2.c1, vt2.c0)))) NOT NULL) LIMIT 0x1;
SELECT MAX(vt0.c0) FROM v0 CROSS JOIN vt0 ON v0.c2 INNER JOIN vt2 ON (((+ (v0.c2)))>(v0.c2)) WHERE ((((((((((((((+ (v0.c3)))AND((v0.c2 IN (vt2.c1)))))AND(v0.c2)))OR((((vt2.c1, v0.c2))>((v0.c0, v0.c0))))))OR(vt0.c0)))OR((NOT (vt2.c0)))))OR(v0.c1 COLLATE RTRIM)));
SELECT MAX(vt0.c0) FROM v0 CROSS JOIN vt0 ON v0.c2 INNER JOIN vt2 ON (((+ (v0.c2)))>(v0.c2)) WHERE ((((((((((((((+ (v0.c3)))AND((v0.c2 IN (vt2.c1)))))AND(v0.c2)))OR((((vt2.c1, v0.c2))>((v0.c0, v0.c0))))))OR(vt0.c0)))OR((NOT (vt2.c0)))))OR(v0.c1 COLLATE RTRIM))) LIMIT 0x1;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((v0.c3)IS NOT(vt2.c1)))AND(json_quote(v0.c0))))OR((vt2.c1 IN (vt2.c1))))) ORDER BY CAST(v0.c0 COLLATE NOCASE AS REAL) ASC, vt2.c1 ASC  NULLS LAST, 0.7168516849773884;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((v0.c3)IS NOT(vt2.c1)))AND(json_quote(v0.c0))))OR((vt2.c1 IN (vt2.c1))))) ORDER BY ((CASE WHEN vt0.c0 THEN v0.c1 WHEN 'ˇjM*RxൄJ' THEN v0.c1 ELSE vt0.c0 END) NOT BETWEEN (((vt2.c1)=(v0.c1))) AND (v0.c2 COLLATE NOCASE))  NULLS FIRST, CASE ((NULL) NOTNULL)  WHEN ((((((x'f7')AND(v0.c0)))AND(vt2.c0)))AND(v0.c0)) THEN ((((((((v0.c0)AND(vt0.c0)))AND(vt2.c0)))OR(vt0.c0)))OR(v0.c0)) WHEN ((v0.c0) IS TRUE) THEN CASE WHEN vt2.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END END  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM vt0, vt2, v0 WHERE ((('-144025520') BETWEEN ((- (v0.c3))) AND (v0.c2 COLLATE NOCASE))) ORDER BY ((CASE WHEN vt0.c0 THEN v0.c1 WHEN 'ˇjM*RxൄJ' THEN v0.c1 ELSE vt0.c0 END) NOT BETWEEN (((vt2.c1)=(v0.c1))) AND (v0.c2 COLLATE NOCASE))  NULLS FIRST, CASE ((NULL) NOTNULL)  WHEN ((((((x'f7')AND(v0.c0)))AND(vt2.c0)))AND(v0.c0)) THEN ((((((((v0.c0)AND(vt0.c0)))AND(vt2.c0)))OR(vt0.c0)))OR(v0.c0)) WHEN ((v0.c0) IS TRUE) THEN CASE WHEN vt2.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END END  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((v0.c3)IS NOT(vt2.c1)))AND(json_quote(v0.c0))))OR((vt2.c1 IN (vt2.c1))))) ORDER BY CAST(v0.c0 COLLATE NOCASE AS REAL) ASC, vt2.c1 ASC  NULLS LAST, 0.7168516849773884;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((v0.c3)IS NOT(vt2.c1)))AND(json_quote(v0.c0))))OR((vt2.c1 IN (vt2.c1))))) ORDER BY ((CASE WHEN vt0.c0 THEN v0.c1 WHEN 'ˇjM*RxൄJ' THEN v0.c1 ELSE vt0.c0 END) NOT BETWEEN (((vt2.c1)=(v0.c1))) AND (v0.c2 COLLATE NOCASE))  NULLS FIRST, CASE ((NULL) NOTNULL)  WHEN ((((((x'f7')AND(v0.c0)))AND(vt2.c0)))AND(v0.c0)) THEN ((((((((v0.c0)AND(vt0.c0)))AND(vt2.c0)))OR(vt0.c0)))OR(v0.c0)) WHEN ((v0.c0) IS TRUE) THEN CASE WHEN vt2.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END END  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM vt0, vt2, v0 WHERE ((('-144025520') BETWEEN ((- (v0.c3))) AND (v0.c2 COLLATE NOCASE))) ORDER BY ((CASE WHEN vt0.c0 THEN v0.c1 WHEN 'ˇjM*RxൄJ' THEN v0.c1 ELSE vt0.c0 END) NOT BETWEEN (((vt2.c1)=(v0.c1))) AND (v0.c2 COLLATE NOCASE))  NULLS FIRST, CASE ((NULL) NOTNULL)  WHEN ((((((x'f7')AND(v0.c0)))AND(vt2.c0)))AND(v0.c0)) THEN ((((((((v0.c0)AND(vt0.c0)))AND(vt2.c0)))OR(vt0.c0)))OR(v0.c0)) WHEN ((v0.c0) IS TRUE) THEN CASE WHEN vt2.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END END  NULLS LAST LIMIT 0;
SELECT ALL MAX(v0.c0) FROM vt2, v0 WHERE (CASE WHEN v0.c3 THEN ((vt2.c0) BETWEEN (v0.c0) AND (vt2.c1)) WHEN CAST(vt2.c0 AS REAL) THEN CASE v0.c0  WHEN vt2.c1 THEN v0.c0 WHEN -1.165434253E9 THEN vt2.c0 WHEN vt2.c0 THEN v0.c3 ELSE v0.c2 END ELSE v0.c2 COLLATE NOCASE END) ORDER BY ((UNLIKELY(x'7ab7'))IS(v0.c1))  NULLS LAST;
SELECT DISTINCT MAX(v0.c0) FROM vt2, v0 WHERE (((CASE WHEN v0.c3 THEN ((vt2.c0) BETWEEN (v0.c0) AND (vt2.c1)) WHEN CAST(vt2.c0 AS REAL) THEN CASE v0.c0  WHEN vt2.c1 THEN v0.c0 WHEN -1.165434253E9 THEN vt2.c0 WHEN vt2.c0 THEN v0.c3 ELSE v0.c2 END ELSE v0.c2 COLLATE NOCASE END)AND((((v0.c1 COLLATE BINARY, CASE v0.c3  WHEN NULL THEN vt2.c1 ELSE vt2.c1 END, ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c3))))=((((vt2.c1) BETWEEN (v0.c1) AND (v0.c1)), (((vt2.c1, v0.c3, NULL, vt2.c0))!=((v0.c3, v0.c2, x'b2654dd4', v0.c3))), UPPER(DISTINCT v0.c1))))))) ORDER BY (+ ((v0.c3 IN ()))) ASC, ((((vt2.c0)<<(v0.c3))) ISNULL);
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((((((CAST(v0.c1 AS TEXT))AND(((vt2.c0)>=(v0.c1)))))AND((vt0.c0 IN ()))))AND(CAST(v0.c0 AS INTEGER))))OR(((v0.c2) IS TRUE))) NATURAL JOIN v0 WHERE ((((((v0.c0 IN (v0.c3)))AND('WVkD7')))OR(((v0.c0)LIKE(0xffffffffb5151516)))));
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((((((CAST(v0.c1 AS TEXT))AND(((vt2.c0)>=(v0.c1)))))AND((vt0.c0 IN ()))))AND(CAST(v0.c0 AS INTEGER))))OR(((v0.c2) IS TRUE))) NATURAL JOIN v0 WHERE ((((((((v0.c0 IN (v0.c3)))AND('WVkD7')))OR(((v0.c0)LIKE(0Xffffffffb5151516)))))AND(v0.c0))) LIMIT 0;
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((((((CAST(v0.c1 AS TEXT))AND(((vt2.c0)>=(v0.c1)))))AND((vt0.c0 IN ()))))AND(CAST(v0.c0 AS INTEGER))))OR(((v0.c2) IS TRUE))) NATURAL JOIN v0 WHERE ((((((v0.c0 IN (v0.c3)))AND('WVkD7')))OR(((v0.c0)LIKE(0xffffffffb5151516)))));
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((((((((CAST(v0.c1 AS TEXT))AND(((vt2.c0)>=(v0.c1)))))AND((vt0.c0 IN ()))))AND(CAST(v0.c0 AS INTEGER))))OR(((v0.c2) IS TRUE))) NATURAL JOIN v0 WHERE ((((((((v0.c0 IN (v0.c3)))AND('WVkD7')))OR(((v0.c0)LIKE(0Xffffffffb5151516)))))AND(v0.c0))) LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c2)>=(v0.c0))) NOTNULL));
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c2)>(v0.c0))) NOTNULL));
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c2)>=(v0.c0))) NOTNULL));
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c2)>(v0.c0))) NOTNULL));
SELECT * FROM vt2 WHERE ((((((((((((vt2.c1)OR(vt2.c1)))OR(0xffffffffef9ccd22)))OR(vt2.c0)))OR(vt2.c1)), ((vt2.c1)=(vt2.c0))))!=(((((vt2.c1))<=((vt2.c0))), (vt2.c0 IN (vt2.c0)))))) ORDER BY ((((CAST(vt2.c0 AS REAL))AND('')))AND((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0)))))  NULLS FIRST, CAST((((vt2.c1, vt2.c0))<=((vt2.c1, vt2.c0))) AS TEXT) DESC  NULLS LAST;
SELECT * FROM vt2 WHERE ((((((((((((((vt2.c1)OR(vt2.c1)))OR(-274936542)))OR(vt2.c0)))OR(vt2.c1)), ((vt2.c1)=(vt2.c0))))!=(((((vt2.c1))<=((vt2.c0))), (vt2.c0 IN (vt2.c0))))))AND(((0.4311777796941849) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))) AND ((NOT (vt2.c0))))))) ORDER BY ((((CAST(vt2.c0 AS REAL))AND('')))AND((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0)))))  NULLS FIRST, CAST((((vt2.c1, vt2.c0))<=((vt2.c1, vt2.c0))) AS TEXT) DESC  NULLS LAST;
SELECT * FROM vt2 WHERE ((((((((((((vt2.c1)OR(vt2.c1)))OR(0xffffffffef9ccd22)))OR(vt2.c0)))OR(vt2.c1)), ((vt2.c1)=(vt2.c0))))!=(((((vt2.c1))<=((vt2.c0))), (vt2.c0 IN (vt2.c0)))))) ORDER BY ((((CAST(vt2.c0 AS REAL))AND('')))AND((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0)))))  NULLS FIRST, CAST((((vt2.c1, vt2.c0))<=((vt2.c1, vt2.c0))) AS TEXT) DESC  NULLS LAST;
SELECT * FROM vt2 WHERE ((((((((((((((vt2.c1)OR(vt2.c1)))OR(-274936542)))OR(vt2.c0)))OR(vt2.c1)), ((vt2.c1)=(vt2.c0))))!=(((((vt2.c1))<=((vt2.c0))), (vt2.c0 IN (vt2.c0))))))AND(((0.4311777796941849) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))) AND ((NOT (vt2.c0))))))) ORDER BY ((((CAST(vt2.c0 AS REAL))AND('')))AND((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0)))))  NULLS FIRST, CAST((((vt2.c1, vt2.c0))<=((vt2.c1, vt2.c0))) AS TEXT) DESC  NULLS LAST;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((v0.c1)OR(v0.c1)))OR(vt2.c1)))AND(vt2.c0)))OR((NOT (v0.c3)))))OR(CAST(v0.c1 AS INTEGER)))) ORDER BY ((CAST(vt0.c0 AS TEXT)) NOT NULL);
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((v0.c1)OR(v0.c1)))OR(vt2.c1)))AND(vt2.c0)))OR((NOT (v0.c3)))))OR(CAST(v0.c1 AS INTEGER)))) ORDER BY (((vt2.c0, vt2.c1)) NOT BETWEEN (((- (vt2.c0)), 0Xffffffff913231f7)) AND ((((vt2.c0)AND(v0.c0)), (vt2.c1 IN ())))) ASC  NULLS FIRST, ((vt2.c1)%((NOT (v0.c1))))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((v0.c1)OR(v0.c1)))OR(vt2.c1)))AND(vt2.c0)))OR((NOT (v0.c3)))))OR(CAST(v0.c1 AS INTEGER)))) ORDER BY ((CAST(vt0.c0 AS TEXT)) NOT NULL);
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((v0.c1)OR(v0.c1)))OR(vt2.c1)))AND(vt2.c0)))OR((NOT (v0.c3)))))OR(CAST(v0.c1 AS INTEGER)))) ORDER BY (((vt2.c0, vt2.c1)) NOT BETWEEN (((- (vt2.c0)), 0Xffffffff913231f7)) AND ((((vt2.c0)AND(v0.c0)), (vt2.c1 IN ())))) ASC  NULLS FIRST, ((vt2.c1)%((NOT (v0.c1))))  NULLS FIRST LIMIT 1;
SELECT MAX(v0.c0) FROM v0, vt0, vt2 WHERE ((('	O') NOT BETWEEN ((vt2.c1 IN (v0.c3))) AND ((NOT (vt2.c0)))));
SELECT DISTINCT MAX(v0.c0) FROM v0, vt0, vt2 WHERE ((((('	O') NOT BETWEEN ((vt2.c1 IN (v0.c3))) AND ((NOT (vt2.c0)))))AND(((vt2.c1 COLLATE RTRIM) NOT BETWEEN (((((v0.c2)OR(vt2.c1)))AND(vt0.c0))) AND ((~ (v0.c1))))))) LIMIT 0X0;
SELECT ALL * FROM v0, vt0 WHERE (((ABS(vt0.c0))GLOB(((((vt0.c0)OR(v0.c2)))OR(v0.c1))))) ORDER BY ((((+ (v0.c0)), SQLITE_COMPILEOPTION_USED(0.2680158354918778), ((v0.c0) IS FALSE), ((vt0.c0) IS TRUE), ((vt0.c0)AND(v0.c1))))<=((((v0.c1)*(v0.c3)), (((v0.c3))=((v0.c1))), NULLIF(0.8886624000749642, v0.c1), (((v0.c3))!=((v0.c3))), ((v0.c3) BETWEEN (vt0.c0) AND (v0.c2))))), CASE WHEN ((vt0.c0) NOT NULL) THEN ((((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(v0.c3)))AND(v0.c1)))AND(v0.c3)) WHEN (+ (vt0.c0)) THEN v0.c0 COLLATE NOCASE END DESC;
SELECT DISTINCT * FROM v0, vt0 WHERE (((ABS(vt0.c0))GLOB(((((vt0.c0)OR(v0.c2)))OR(v0.c1))))) ORDER BY ((((+ (v0.c0)), SQLITE_COMPILEOPTION_USED(0.2680158354918778), ((v0.c0) IS FALSE), ((vt0.c0) IS TRUE), ((vt0.c0)AND(v0.c1))))<=((((v0.c1)*(v0.c3)), (((v0.c3))=((v0.c1))), NULLIF(0.8886624000749642, v0.c1), (((v0.c3))!=((v0.c3))), ((v0.c3) BETWEEN (vt0.c0) AND (v0.c2))))), CASE WHEN ((vt0.c0) NOT NULL) THEN ((((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(v0.c3)))AND(v0.c1)))AND(v0.c3)) WHEN (+ (vt0.c0)) THEN v0.c0 COLLATE NOCASE END DESC;
SELECT ALL * FROM v0, vt0 WHERE (((ABS(vt0.c0))GLOB(((((vt0.c0)OR(v0.c2)))OR(v0.c1))))) ORDER BY ((((+ (v0.c0)), SQLITE_COMPILEOPTION_USED(0.2680158354918778), ((v0.c0) IS FALSE), ((vt0.c0) IS TRUE), ((vt0.c0)AND(v0.c1))))<=((((v0.c1)*(v0.c3)), (((v0.c3))=((v0.c1))), NULLIF(0.8886624000749642, v0.c1), (((v0.c3))!=((v0.c3))), ((v0.c3) BETWEEN (vt0.c0) AND (v0.c2))))), CASE WHEN ((vt0.c0) NOT NULL) THEN ((((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(v0.c3)))AND(v0.c1)))AND(v0.c3)) WHEN (+ (vt0.c0)) THEN v0.c0 COLLATE NOCASE END DESC;
SELECT DISTINCT * FROM v0, vt0 WHERE (((ABS(vt0.c0))GLOB(((((vt0.c0)OR(v0.c2)))OR(v0.c1))))) ORDER BY ((((+ (v0.c0)), SQLITE_COMPILEOPTION_USED(0.2680158354918778), ((v0.c0) IS FALSE), ((vt0.c0) IS TRUE), ((vt0.c0)AND(v0.c1))))<=((((v0.c1)*(v0.c3)), (((v0.c3))=((v0.c1))), NULLIF(0.8886624000749642, v0.c1), (((v0.c3))!=((v0.c3))), ((v0.c3) BETWEEN (vt0.c0) AND (v0.c2))))), CASE WHEN ((vt0.c0) NOT NULL) THEN ((((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(v0.c3)))AND(v0.c1)))AND(v0.c3)) WHEN (+ (vt0.c0)) THEN v0.c0 COLLATE NOCASE END DESC;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((CAST(v0.c1 AS NUMERIC))IS NOT(CAST(v0.c2 AS INTEGER)))) ORDER BY ((((NOT (vt2.c0)), ((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))>((v0.c1, ((v0.c2) NOT NULL)))), (NOT (ABS(DISTINCT vt2.c0)));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((CAST(v0.c1 AS NUMERIC))IS NOT(CAST(v0.c2 AS INTEGER)))) ORDER BY ((((NOT (vt2.c0)), ((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))>((v0.c1, ((v0.c2) NOT NULL)))), (NOT (ABS(DISTINCT vt2.c0))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (CASE WHEN v0.c0 THEN ((v0.c2) NOT NULL) ELSE x'c727' END) ORDER BY ((((NOT (vt2.c0)), ((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))>((v0.c1, ((v0.c2) NOT NULL)))), (NOT (ABS(DISTINCT vt2.c0))) LIMIT 0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((CAST(v0.c1 AS NUMERIC))IS NOT(CAST(v0.c2 AS INTEGER)))) ORDER BY ((((NOT (vt2.c0)), ((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))>((v0.c1, ((v0.c2) NOT NULL)))), (NOT (ABS(DISTINCT vt2.c0)));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((CAST(v0.c1 AS NUMERIC))IS NOT(CAST(v0.c2 AS INTEGER)))) ORDER BY ((((NOT (vt2.c0)), ((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))>((v0.c1, ((v0.c2) NOT NULL)))), (NOT (ABS(DISTINCT vt2.c0))) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (CASE WHEN v0.c0 THEN ((v0.c2) NOT NULL) ELSE x'c727' END) ORDER BY ((((NOT (vt2.c0)), ((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))>((v0.c1, ((v0.c2) NOT NULL)))), (NOT (ABS(DISTINCT vt2.c0))) LIMIT 0;
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON v0.c0 WHERE (((v0.c2)&(CASE WHEN v0.c1 THEN vt2.c1 ELSE vt2.c1 END))) ORDER BY CAST(v0.c0 COLLATE RTRIM AS BLOB) DESC, ((((((((((((v0.c2)AND(v0.c2)))OR(vt2.c0)))OR('\')))AND(v0.c0)))OR(vt2.c0)))%(((vt0.c0)IS(vt0.c0))))  NULLS LAST, (((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) IN ()) ASC;
SELECT DISTINCT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON v0.c0 WHERE (((v0.c2)&(CASE WHEN v0.c1 THEN vt2.c1 ELSE vt2.c1 END))) ORDER BY CAST(v0.c0 COLLATE RTRIM AS BLOB) DESC, ((((((((((((v0.c2)AND(v0.c2)))OR(vt2.c0)))OR('\')))AND(v0.c0)))OR(vt2.c0)))%(((vt0.c0)IS(vt0.c0))))  NULLS LAST, (((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) IN ()) ASC;
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON v0.c0 WHERE (((v0.c2)&(CASE WHEN v0.c1 THEN vt2.c1 ELSE vt2.c1 END))) ORDER BY CAST(v0.c0 COLLATE RTRIM AS BLOB) DESC, ((((((((((((v0.c2)AND(v0.c2)))OR(vt2.c0)))OR('\')))AND(v0.c0)))OR(vt2.c0)))%(((vt0.c0)IS(vt0.c0))))  NULLS LAST, (((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) IN ()) ASC;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) ISNULL))*(((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT * FROM vt0 WHERE (((((vt0.c0) ISNULL))*(((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) LIMIT 2;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) ISNULL))*(((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT * FROM vt0 WHERE (((((vt0.c0) ISNULL))*(((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) LIMIT 2;
SELECT MAX(v0.c3) FROM v0 WHERE (highlight(v0.c0, CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END, v0.c2, ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c3))));
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (highlight(v0.c0, CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END, v0.c2, ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c3)))) ORDER BY (NOT (MAX(v0.c1, NULL, v0.c2, ')䠕8573442369171023889 -1940944352768883717:659-73 1432:181TB', v0.c3))), JULIANDAY(((v0.c3) NOT BETWEEN (v0.c1) AND ('^u2')), (v0.c2 IN (v0.c0, '-1935470654')), ABS(DISTINCT v0.c2))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (v0.c2) ORDER BY (NOT (MAX(v0.c1, NULL, v0.c2, ')䠕8573442369171023889 -1940944352768883717:659-73 1432:181TB', v0.c3))), JULIANDAY(((v0.c3) NOT BETWEEN (v0.c1) AND ('^u2')), (v0.c2 IN (v0.c0, '-1935470654')), ABS(DISTINCT v0.c2))  NULLS LAST LIMIT 0x0;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (vt2.c0);
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((vt2.c0)AND(vt2.c1))) LIMIT 0 INTERSECT SELECT MAX(vt2.c1) FROM vt2 WHERE (((((((vt2.c0 COLLATE NOCASE)AND((vt2.c1 IN (0.960220642319812)))))OR(((vt2.c0)AND(vt2.c1)))))AND((- (vt2.c1))))) LIMIT 0;
SELECT MIN(v0.c3) FROM vt2, vt0, v0 WHERE (((LOWER(DISTINCT vt0.c0)) BETWEEN (CAST('p~lSc\\6' AS REAL)) AND (x'447e')));
SELECT DISTINCT MIN(v0.c3) FROM vt2, vt0, v0 WHERE (((LOWER(DISTINCT vt0.c0)) BETWEEN (CAST('p~lSc\\6' AS REAL)) AND (x'447e'))) ORDER BY '
g' COLLATE RTRIM DESC  NULLS LAST, ((((((v0.c3) BETWEEN (vt2.c0) AND (v0.c3)))OR(((v0.c2) IS FALSE))))OR(NULL))  NULLS FIRST, NULL  NULLS FIRST LIMIT 0x1;
SELECT * FROM v0 WHERE (CAST(CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c3 END AS NUMERIC));
SELECT DISTINCT * FROM v0 WHERE (CAST(CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c3 END AS NUMERIC));
SELECT * FROM v0 WHERE (CAST(CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c3 END AS NUMERIC));
SELECT DISTINCT * FROM v0 WHERE (CAST(CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c3 END AS NUMERIC));
SELECT ALL * FROM vt0, vt2 WHERE (vt2.c0) ORDER BY IFNULL(DISTINCT vt2.c1, (~ (vt2.c1))), ((((NULL)/(vt2.c1)))AND(((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c1)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((vt2.c0)AND((((('-537868562') NOTNULL)) BETWEEN (((vt0.c0) ISNULL)) AND ((((vt0.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))))))) ORDER BY IFNULL(DISTINCT vt2.c1, (~ (vt2.c1))), ((((NULL)/(vt2.c1)))AND(((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c1)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (vt2.c0) ORDER BY IFNULL(DISTINCT vt2.c1, (~ (vt2.c1))), ((((NULL)/(vt2.c1)))AND(((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c1)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((vt2.c0)AND((((('-537868562') NOTNULL)) BETWEEN (((vt0.c0) ISNULL)) AND ((((vt0.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))))))) ORDER BY IFNULL(DISTINCT vt2.c1, (~ (vt2.c1))), ((((NULL)/(vt2.c1)))AND(((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c1)))) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt2, v0 WHERE (((((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0))) BETWEEN (((vt2.c1) BETWEEN (v0.c2) AND (v0.c3))) AND ((v0.c3 IN (v0.c1, vt2.c0)))));
SELECT COUNT(*) FROM vt2, v0 WHERE (((((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0))) BETWEEN (((vt2.c1) BETWEEN (v0.c2) AND (v0.c3))) AND ((v0.c3 IN (v0.c1, vt2.c0))))) LIMIT 0X1 INTERSECT SELECT ALL COUNT(*) FROM vt2, v0 WHERE (((vt2.c1 COLLATE RTRIM)>(v0.c1 COLLATE BINARY))) LIMIT 1;
SELECT ALL * FROM v0, vt0 WHERE (((CAST(v0.c1 AS TEXT)) ISNULL)) ORDER BY CASE WHEN CAST(v0.c1 AS NUMERIC) THEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c2)) ELSE ((('-157240298', v0.c2, v0.c1, v0.c2))>((v0.c3, v0.c1, v0.c0, v0.c2))) END  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0 WHERE (((((CAST(v0.c1 AS TEXT)) ISNULL))AND(CAST(v0.c0 AS INTEGER)))) ORDER BY CASE WHEN CAST(v0.c1 AS NUMERIC) THEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c2)) ELSE ((('-157240298', v0.c2, v0.c1, v0.c2))>((v0.c3, v0.c1, v0.c0, v0.c2))) END  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE (((CAST(v0.c1 AS TEXT)) ISNULL)) ORDER BY CASE WHEN CAST(v0.c1 AS NUMERIC) THEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c2)) ELSE ((('-157240298', v0.c2, v0.c1, v0.c2))>((v0.c3, v0.c1, v0.c0, v0.c2))) END  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0 WHERE (((((CAST(v0.c1 AS TEXT)) ISNULL))AND(CAST(v0.c0 AS INTEGER)))) ORDER BY CASE WHEN CAST(v0.c1 AS NUMERIC) THEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c2)) ELSE ((('-157240298', v0.c2, v0.c1, v0.c2))>((v0.c3, v0.c1, v0.c0, v0.c2))) END  NULLS LAST;
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON ((CASE vt2.c1  WHEN v0.c0 THEN NULL WHEN vt2.c0 THEN v0.c1 ELSE 0x57ac76eb END) NOT BETWEEN (((v0.c3)|(vt2.c1))) AND ('j	l')) WHERE (((((vt0.c0)OR(v0.c2)))AND(v0.c0)) COLLATE NOCASE) ORDER BY ((vt0.c0)LIKE(v0.c2)) COLLATE NOCASE ASC  NULLS FIRST, (((vt2.c0, vt0.c0)) NOT BETWEEN ((NULL COLLATE RTRIM, 0X19ca0486)) AND (((+ (v0.c1)), ((vt0.c0)<>(x'5758c7')))))  NULLS FIRST;
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON ((CASE vt2.c1  WHEN v0.c0 THEN NULL WHEN vt2.c0 THEN v0.c1 ELSE 0x57ac76eb END) NOT BETWEEN (((v0.c3)|(vt2.c1))) AND ('j	l')) WHERE (((((vt0.c0)OR(v0.c2)))AND(v0.c0)) COLLATE NOCASE) ORDER BY (((((v0.c1 IN (v0.c0, v0.c0)))OR(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)))))OR(((vt2.c0) BETWEEN (v0.c0) AND (vt0.c0))))  NULLS FIRST;
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON ((CASE vt2.c1  WHEN v0.c0 THEN NULL WHEN vt2.c0 THEN v0.c1 ELSE 0x57ac76eb END) NOT BETWEEN (((v0.c3)|(vt2.c1))) AND ('j	l')) WHERE (((((vt0.c0)OR(v0.c2)))AND(v0.c0)) COLLATE NOCASE) ORDER BY ((vt0.c0)LIKE(v0.c2)) COLLATE NOCASE ASC  NULLS FIRST, (((vt2.c0, vt0.c0)) NOT BETWEEN ((NULL COLLATE RTRIM, 0X19ca0486)) AND (((+ (v0.c1)), ((vt0.c0)<>(x'5758c7')))))  NULLS FIRST;
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON ((CASE vt2.c1  WHEN v0.c0 THEN NULL WHEN vt2.c0 THEN v0.c1 ELSE 0x57ac76eb END) NOT BETWEEN (((v0.c3)|(vt2.c1))) AND ('j	l')) WHERE (((((vt0.c0)OR(v0.c2)))AND(v0.c0)) COLLATE NOCASE) ORDER BY (((((v0.c1 IN (v0.c0, v0.c0)))OR(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)))))OR(((vt2.c0) BETWEEN (v0.c0) AND (vt0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 INNER JOIN v0 ON ((NULL)=(((v0.c3) NOTNULL))) WHERE ((((~ (vt0.c0)))AND(((((((v0.c3)OR(vt0.c0)))AND(vt0.c0)))OR(v0.c0)))));
SELECT ALL * FROM vt0, vt2 INNER JOIN v0 ON ((NULL)==(((v0.c3) NOTNULL))) WHERE ((((~ (vt0.c0)))AND(((((((v0.c3)OR(vt0.c0)))AND(vt0.c0)))OR(v0.c0))))) ORDER BY (~ (CASE vt2.c0  WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt2.c1 END)) DESC, (CAST(v0.c0 AS TEXT) IN ()), ((((((v0.c0)AND(v0.c3)))OR(v0.c3)))GLOB(CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN 0.917303603074189 WHEN vt0.c0 THEN vt2.c0 WHEN v0.c3 THEN vt2.c0 WHEN x'93' THEN v0.c2 END))  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 INNER JOIN v0 ON ((NULL)=(((v0.c3) NOTNULL))) WHERE ((((~ (vt0.c0)))AND(((((((v0.c3)OR(vt0.c0)))AND(vt0.c0)))OR(v0.c0)))));
SELECT ALL * FROM vt0, vt2 INNER JOIN v0 ON ((NULL)==(((v0.c3) NOTNULL))) WHERE ((((~ (vt0.c0)))AND(((((((v0.c3)OR(vt0.c0)))AND(vt0.c0)))OR(v0.c0))))) ORDER BY (~ (CASE vt2.c0  WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt2.c1 END)) DESC, (CAST(v0.c0 AS TEXT) IN ()), ((((((v0.c0)AND(v0.c3)))OR(v0.c3)))GLOB(CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN 0.917303603074189 WHEN vt0.c0 THEN vt2.c0 WHEN v0.c3 THEN vt2.c0 WHEN x'93' THEN v0.c2 END))  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((x'', vt0.c0, vt0.c0, vt0.c0, 0x12cdb615))<((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0))) IN ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, 'UH+')) AND (('-1722448222', vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY ((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))) NOT NULL) ASC  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((x'', vt0.c0, vt0.c0, vt0.c0, 315471381))<((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0))) IN ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, 'UH+')) AND (('-1722448222', vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY (+ (vt0.c0)) DESC, ((vt0.c0 IN ()) IN ()) DESC, ((vt0.c0 COLLATE RTRIM)OR(CASE x'6e'  WHEN vt0.c0 THEN vt0.c0 ELSE 'D' END))  NULLS LAST LIMIT 0x0;
SELECT MAX(v0.c2) FROM vt0, vt2, v0 WHERE (((((v0.c0, vt2.c0, vt2.c1, v0.c3)) BETWEEN ((v0.c2, vt0.c0, NULL, v0.c3)) AND ((v0.c2, v0.c2, vt2.c1, v0.c3))) IN ())) ORDER BY vt0.c0 ASC, CASE ((v0.c1) NOTNULL)  WHEN (('385853737')-(vt2.c0)) THEN ((((((((v0.c3)AND(0x47f210f3)))OR(v0.c3)))OR(v0.c1)))AND(v0.c1)) WHEN ((v0.c0)LIKE(vt2.c0)) THEN 0x5c20f72a ELSE NULL END;
SELECT DISTINCT MAX(v0.c2) FROM vt0, vt2, v0 WHERE (((((((v0.c0, vt2.c0, vt2.c1, v0.c3)) BETWEEN ((v0.c2, vt0.c0, NULL, v0.c3)) AND ((v0.c2, v0.c2, vt2.c1, v0.c3))) IN ()))AND((((((((((vt2.c1)OR(vt0.c0)))AND(v0.c2)))AND(v0.c0)))OR(vt2.c0)) IN ())))) ORDER BY vt0.c0 ASC, CASE ((v0.c1) NOTNULL)  WHEN (('385853737')-(vt2.c0)) THEN ((((((((v0.c3)AND(0X47f210f3)))OR(v0.c3)))OR(v0.c1)))AND(v0.c1)) WHEN ((v0.c0)LIKE(vt2.c0)) THEN 1545664298 ELSE NULL END LIMIT 1 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM vt0, vt2, v0 WHERE (CAST('1190017638' AS INTEGER)) ORDER BY vt0.c0 ASC, CASE ((v0.c1) NOTNULL)  WHEN (('385853737')-(vt2.c0)) THEN ((((((((v0.c3)AND(0X47f210f3)))OR(v0.c3)))OR(v0.c1)))AND(v0.c1)) WHEN ((v0.c0)LIKE(vt2.c0)) THEN 0x5c20f72a ELSE NULL END LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt2 CROSS JOIN v0 ON v0.c2 WHERE (((CASE vt2.c0  WHEN v0.c3 THEN v0.c2 WHEN v0.c2 THEN vt2.c1 ELSE vt2.c1 END) NOTNULL)) ORDER BY (((v0.c3))<(((v0.c1 IN ('1839189666')))));
SELECT DISTINCT COUNT(*) FROM vt2 CROSS JOIN v0 ON v0.c2 WHERE (((CASE vt2.c0  WHEN v0.c3 THEN v0.c2 WHEN v0.c2 THEN vt2.c1 ELSE vt2.c1 END) NOTNULL)) ORDER BY (((v0.c3))<(((v0.c1 IN ('1839189666')))));
SELECT * FROM vt0, vt2, v0 WHERE (((v0.c3) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c0) ISNULL)))) ORDER BY CASE ((v0.c0) BETWEEN (vt2.c0) AND (vt2.c0))  WHEN json_remove(vt2.c1, vt0.c0) THEN CAST(vt2.c0 AS INTEGER) WHEN (+ (vt2.c1)) THEN vt2.c0 END ASC  NULLS LAST, ((v0.c0)|(v0.c2)) COLLATE RTRIM ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((v0.c3) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c0) ISNULL)))) ORDER BY CASE ((v0.c0) BETWEEN (vt2.c0) AND (vt2.c0))  WHEN json_remove(vt2.c1, vt0.c0) THEN CAST(vt2.c0 AS INTEGER) WHEN (+ (vt2.c1)) THEN vt2.c0 END ASC  NULLS LAST, ((v0.c0)|(v0.c2)) COLLATE RTRIM ASC  NULLS LAST;
SELECT * FROM vt0, vt2, v0 WHERE (((v0.c3) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c0) ISNULL)))) ORDER BY CASE ((v0.c0) BETWEEN (vt2.c0) AND (vt2.c0))  WHEN json_remove(vt2.c1, vt0.c0) THEN CAST(vt2.c0 AS INTEGER) WHEN (+ (vt2.c1)) THEN vt2.c0 END ASC  NULLS LAST, ((v0.c0)|(v0.c2)) COLLATE RTRIM ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((v0.c3) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c0) ISNULL)))) ORDER BY CASE ((v0.c0) BETWEEN (vt2.c0) AND (vt2.c0))  WHEN json_remove(vt2.c1, vt0.c0) THEN CAST(vt2.c0 AS INTEGER) WHEN (+ (vt2.c1)) THEN vt2.c0 END ASC  NULLS LAST, ((v0.c0)|(v0.c2)) COLLATE RTRIM ASC  NULLS LAST;
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE ((- ((((vt2.c1))<((vt2.c0))))));
SELECT MIN(vt2.c1) FROM vt2 WHERE ((((- ((((vt2.c1))<((vt2.c0))))))AND(vt2.c0))) ORDER BY vt2.c0, CAST((('1505517416')=(vt2.c1)) AS REAL) DESC LIMIT 0x0 INTERSECT SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (((vt2.c0)LIKE(((0.5683105716680067) IS FALSE)))) ORDER BY vt2.c0, CAST((('1505517416')==(vt2.c1)) AS REAL) DESC LIMIT 0x0;
SELECT ALL COUNT(*) FROM v0 WHERE (0Xfffffffff0d8b04b) ORDER BY ((v0.c0)AND(v0.c3)) COLLATE BINARY  NULLS FIRST, (CAST(v0.c3 AS REAL) IN ()) ASC, x'5b' ASC;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (0Xfffffffff0d8b04b) ORDER BY ((NULLIF(DISTINCT v0.c2, v0.c3))+('878850802'))  NULLS FIRST, ((v0.c2)<=('&')) ASC, (((v0.c0, 0.5032010521217105, v0.c0)) BETWEEN (('2068878430', (v0.c1 IN (v0.c1, v0.c0)), v0.c1 COLLATE RTRIM)) AND (((v0.c1 IN (v0.c1)), v0.c2 COLLATE NOCASE, ((v0.c2) NOTNULL)))) DESC LIMIT 1;
SELECT MIN(v0.c3) FROM vt0, v0 NATURAL JOIN vt2 WHERE ((vt2.c0 IN (((vt2.c0)>=(vt2.c1)))));
SELECT MIN(v0.c3) FROM vt0, v0 NATURAL JOIN vt2 WHERE ((vt2.c0 IN (((vt2.c0)>(vt2.c1))))) ORDER BY ((v0.c3)IS(vt2.c0)) ASC  NULLS LAST, (((v0.c3 IN ()))GLOB(v0.c3)), CAST(CASE v0.c0  WHEN x'5407cd' THEN v0.c2 WHEN v0.c3 THEN v0.c1 ELSE vt2.c1 END AS BLOB) ASC LIMIT 0x2;
SELECT COUNT(*) FROM vt0 WHERE (x'a9') ORDER BY CASE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0)=(vt0.c0)) THEN vt0.c0 END ASC;
SELECT ALL COUNT(*) FROM vt0 WHERE (((x'a9')AND(CASE WHEN CAST(vt0.c0 AS BLOB) THEN NULL WHEN 0Xffffffffa7e1d308 THEN (((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0))) WHEN CAST('sSy*' AS REAL) THEN vt0.c0 COLLATE NOCASE WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)>(vt0.c0)) ELSE ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) END))) ORDER BY ((((vt0.c0)LIKE(vt0.c0))) NOT BETWEEN (CAST(vt0.c0 AS NUMERIC)) AND (CASE vt0.c0  WHEN vt0.c0 THEN x'' ELSE vt0.c0 END)) ASC  NULLS LAST, UPPER(DISTINCT ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))) LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((((((((vt0.c0 COLLATE NOCASE)OR((vt0.c0 IN (vt0.c0)))))AND(UPPER(x''))))AND(CAST(vt0.c0 AS NUMERIC))))AND((NOT (-7.34232506E8))))) ORDER BY ((((vt0.c0)LIKE(vt0.c0))) NOT BETWEEN (CAST(vt0.c0 AS NUMERIC)) AND (CASE vt0.c0  WHEN vt0.c0 THEN x'' ELSE vt0.c0 END)) ASC  NULLS LAST, UPPER(DISTINCT ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))) LIMIT 1;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (TYPEOF(((v0.c1) NOTNULL))) ORDER BY (~ (DATE(v0.c1, v0.c0, vt0.c0)))  NULLS FIRST, ((CHAR(vt0.c0, v0.c3)) NOTNULL);
SELECT COUNT(*) FROM vt0, v0 WHERE (TYPEOF(((v0.c1) NOTNULL))) ORDER BY (~ (DATE(v0.c1, v0.c0, vt0.c0)))  NULLS FIRST, ((CHAR(vt0.c0, v0.c3)) NOTNULL) LIMIT 2 INTERSECT SELECT COUNT(*) FROM vt0, v0 NOT INDEXED WHERE (v0.c3) ORDER BY (~ (DATE(v0.c1, v0.c0, vt0.c0)))  NULLS FIRST, ((CHAR(vt0.c0, v0.c3)) NOTNULL) LIMIT 0x2;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (CAST((vt2.c1 IN ()) AS INTEGER));
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((CAST((vt2.c1 IN ()) AS INTEGER))AND('197715578'))) LIMIT 0x4 INTERSECT SELECT MAX(vt2.c1) FROM vt2 WHERE (((((vt2.c1)||(NULL))) BETWEEN (0Xffffffffc7d2edf5) AND (vt2.c1 COLLATE NOCASE))) LIMIT 0x4;
SELECT COUNT(*) FROM vt0, v0, vt2 WHERE ((((vt0.c0 IN (vt2.c0, v0.c1)))>=(CASE v0.c0  WHEN vt2.c0 THEN x'02271d' WHEN 1628220195 THEN v0.c0 ELSE vt0.c0 END))) ORDER BY (((vt2.c0)) NOT BETWEEN ((NULL)) AND ((((v0.c2)<>(vt0.c0))))), v0.c1 DESC;
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE ((((((vt0.c0 IN (vt2.c0)))==(CASE v0.c0  WHEN vt2.c0 THEN x'02271d' WHEN 0X610cab23 THEN v0.c0 ELSE vt0.c0 END)))AND(((((vt2.c0)>>(vt2.c1))) IS FALSE)))) ORDER BY (((vt2.c0)) NOT BETWEEN ((NULL)) AND ((((v0.c2)!=(vt0.c0))))), v0.c1 DESC LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (((((vt2.c1) NOT BETWEEN (vt2.c1) AND (v0.c0))) NOT BETWEEN (((v0.c2) IS FALSE)) AND (CASE WHEN v0.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 END))) ORDER BY (((vt2.c0)) NOT BETWEEN ((NULL)) AND ((((v0.c2)!=(vt0.c0))))), v0.c1 DESC LIMIT 0;
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE ((((vt2.c0, vt2.c0)) BETWEEN ((vt2.c0 COLLATE NOCASE, CASE x'04e1f3'  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN 0.08287435577663205 THEN vt2.c1 END)) AND ((((vt2.c1) BETWEEN ('Ar*4~^L') AND (vt2.c0)), (vt2.c0 IN (vt2.c1)))))) ORDER BY CAST(((vt2.c0)AND(vt2.c1)) AS NUMERIC)  NULLS LAST, (((vt2.c1 IN ())) NOTNULL) ASC  NULLS LAST, CASE (NOT (x'5d'))  WHEN ABS(DISTINCT '1195728531') THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN 'FM' THEN vt2.c0 ELSE vt2.c1 END ELSE ((vt2.c0)>=(vt2.c1)) END ASC  NULLS LAST;
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE ((((vt2.c0, vt2.c0)) BETWEEN ((vt2.c0 COLLATE NOCASE, CASE x'04e1f3'  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN 0.08287435577663205 THEN vt2.c1 END)) AND ((((vt2.c1) BETWEEN ('Ar*4~^L') AND (vt2.c0)), (vt2.c0 IN (vt2.c1)))))) ORDER BY CAST(((vt2.c0)AND(vt2.c1)) AS NUMERIC)  NULLS LAST, (((vt2.c1 IN ())) NOTNULL) ASC  NULLS LAST, CASE (NOT (x'5d'))  WHEN ABS(DISTINCT '1195728531') THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN 'FM' THEN vt2.c0 ELSE vt2.c1 END ELSE ((vt2.c0)>=(vt2.c1)) END ASC  NULLS LAST LIMIT 1;
SELECT MAX(v0.c0) FROM vt2, v0, vt0 WHERE ((((NOT (v0.c1)))|(((v0.c3)!=(vt2.c0)))));
SELECT DISTINCT MAX(v0.c0) FROM vt2, v0, vt0 WHERE ((((((NOT (v0.c1)))|(((v0.c3)<(vt2.c0)))))AND(((((((vt2.c1) ISNULL))AND(v0.c1)))AND(LIKELY(DISTINCT vt0.c0)))))) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt2, v0, vt0 WHERE (json_quote(vt2.c0) COLLATE BINARY) LIMIT 0X0;
SELECT ALL * FROM vt2, vt0 WHERE (((vt0.c0)<>(vt0.c0)) COLLATE RTRIM) ORDER BY CASE (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c1)))  WHEN ((vt0.c0) NOTNULL) THEN (0.46848189259721085 IN (vt0.c0, vt0.c0)) WHEN highlight(vt2.c0, vt0.c0, vt2.c1, vt2.c0) THEN ((vt2.c0)==(vt2.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN IFNULL(DISTINCT vt2.c0, vt2.c1) ELSE vt0.c0 END, NULL ASC  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (((((vt0.c0)<>(vt0.c0)) COLLATE RTRIM)AND(LIKELY(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c1 END)))) ORDER BY CASE (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c1)))  WHEN ((vt0.c0) NOTNULL) THEN (0.46848189259721085 IN (vt0.c0, vt0.c0)) WHEN highlight(vt2.c0, vt0.c0, vt2.c1, vt2.c0) THEN ((vt2.c0)==(vt2.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN IFNULL(DISTINCT vt2.c0, vt2.c1) ELSE vt0.c0 END, NULL ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt2, vt0 WHERE (((vt0.c0)<>(vt0.c0)) COLLATE RTRIM) ORDER BY CASE (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c1)))  WHEN ((vt0.c0) NOTNULL) THEN (0.46848189259721085 IN (vt0.c0, vt0.c0)) WHEN highlight(vt2.c0, vt0.c0, vt2.c1, vt2.c0) THEN ((vt2.c0)==(vt2.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN IFNULL(DISTINCT vt2.c0, vt2.c1) ELSE vt0.c0 END, NULL ASC  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (((((vt0.c0)<>(vt0.c0)) COLLATE RTRIM)AND(LIKELY(CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c1 END)))) ORDER BY CASE (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c1)))  WHEN ((vt0.c0) NOTNULL) THEN (0.46848189259721085 IN (vt0.c0, vt0.c0)) WHEN highlight(vt2.c0, vt0.c0, vt2.c1, vt2.c0) THEN ((vt2.c0)==(vt2.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN IFNULL(DISTINCT vt2.c0, vt2.c1) ELSE vt0.c0 END, NULL ASC  NULLS LAST LIMIT 0;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (COALESCE(((v0.c2)||(v0.c3)), ('-405289896' IN ()))) ORDER BY LENGTH(v0.c2 COLLATE BINARY), CASE (v0.c0 IN ())  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c3) ISNULL) ELSE (v0.c1 IN ()) END;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (COALESCE(((v0.c2)||(v0.c3)), ('-405289896' IN ()))) ORDER BY LENGTH(v0.c2 COLLATE BINARY), CASE (v0.c0 IN ())  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c3) ISNULL) ELSE (v0.c1 IN ()) END LIMIT 0x1 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (v0.c3) ORDER BY LENGTH(v0.c2 COLLATE BINARY), CASE (v0.c0 IN ())  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c3) ISNULL) ELSE (v0.c1 IN ()) END LIMIT 0x1;
SELECT ALL MAX(v0.c3) FROM v0 WHERE (NULL);
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (NULL) LIMIT 0x4;
SELECT COUNT(*) FROM v0, vt0 WHERE (((v0.c3)-(v0.c2)) COLLATE RTRIM) ORDER BY CAST(((((((((vt0.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c1)))OR(v0.c1)) AS NUMERIC) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE (((v0.c3)-(v0.c2)) COLLATE RTRIM) ORDER BY CAST(((((((((vt0.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c1)))OR(v0.c1)) AS NUMERIC) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM v0 WHERE ((((((((v0.c2 IN (v0.c2, v0.c0)))AND(((((v0.c0)AND(v0.c3)))AND(v0.c3)))))AND((+ (v0.c2)))))OR(LTRIM(v0.c1))));
SELECT DISTINCT * FROM v0 WHERE ((((((((((v0.c2 IN (v0.c2, v0.c0)))AND(((((v0.c0)AND(v0.c3)))AND(v0.c3)))))AND((+ (v0.c2)))))OR(LTRIM(v0.c1))))AND(((v0.c1)LIKE(v0.c0)) COLLATE RTRIM))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (LIKELIHOOD((- (0.5249321787965887)), ((v0.c3) NOTNULL))) LIMIT 2;
SELECT ALL * FROM v0 WHERE ((((((((v0.c2 IN (v0.c2, v0.c0)))AND(((((v0.c0)AND(v0.c3)))AND(v0.c3)))))AND((+ (v0.c2)))))OR(LTRIM(v0.c1))));
SELECT DISTINCT * FROM v0 WHERE ((((((((((v0.c2 IN (v0.c2, v0.c0)))AND(((((v0.c0)AND(v0.c3)))AND(v0.c3)))))AND((+ (v0.c2)))))OR(LTRIM(v0.c1))))AND(((v0.c1)LIKE(v0.c0)) COLLATE RTRIM))) LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (LIKELIHOOD((- (0.5249321787965887)), ((v0.c3) NOTNULL))) LIMIT 2;
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON CAST(((((((((v0.c3)OR(NULL)))AND(v0.c0)))AND(vt2.c1)))AND(vt2.c1)) AS NUMERIC) WHERE (((((v0.c3)AND(ABS(v0.c3))))OR(v0.c1))) ORDER BY UPPER(((v0.c3)IS NOT(vt0.c0)));
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON CAST(((((((((v0.c3)OR(NULL)))AND(v0.c0)))AND(vt2.c1)))AND(vt2.c1)) AS NUMERIC) WHERE (((((v0.c3)AND(ABS(v0.c3))))OR(v0.c1))) ORDER BY UPPER(((v0.c3)IS NOT(vt0.c0)));
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON CAST(((((((((v0.c3)OR(NULL)))AND(v0.c0)))AND(vt2.c1)))AND(vt2.c1)) AS NUMERIC) WHERE (((((v0.c3)AND(ABS(v0.c3))))OR(v0.c1))) ORDER BY UPPER(((v0.c3)IS NOT(vt0.c0)));
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON CAST(((((((((v0.c3)OR(NULL)))AND(v0.c0)))AND(vt2.c1)))AND(vt2.c1)) AS NUMERIC) WHERE (((((v0.c3)AND(ABS(v0.c3))))OR(v0.c1))) ORDER BY UPPER(((v0.c3)IS NOT(vt0.c0)));
SELECT MAX(v0.c3) FROM v0 WHERE (((((((x'd6d9')OR(((v0.c1)<=(v0.c1)))))OR(((v0.c0) BETWEEN (v0.c2) AND (v0.c2)))))AND((- (v0.c1)))));
SELECT MAX(v0.c3) FROM v0 WHERE (((((((((x'd6d9')OR(((v0.c1)<=(v0.c1)))))OR(((v0.c0) BETWEEN (v0.c2) AND (v0.c2)))))AND((- (v0.c1)))))AND(COALESCE(v0.c1, (((v0.c2, v0.c2))>((v0.c1, v0.c3))), (NULL IN (v0.c1)), v0.c0, (v0.c1 IN ()), '' COLLATE BINARY)))) ORDER BY NULL  NULLS LAST INTERSECT SELECT ALL MAX(v0.c3) FROM v0 WHERE ((((((((((((('*9')AND('-388835817')))AND(v0.c0)))AND(v0.c3)))AND(v0.c3)))OR(v0.c1)))OR('i.*ꂙ*l')) COLLATE NOCASE) ORDER BY NULL  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((NOT (NULL)) IN (((vt0.c0) BETWEEN (x'') AND ('%')), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((0.7432547810461071)))))) ORDER BY '-1318330570'  NULLS FIRST, (((((vt0.c0)) BETWEEN (('-5iv')) AND ((vt0.c0)))) NOT NULL) DESC  NULLS FIRST, ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (((vt0.c0)GLOB(vt0.c0))) AND (((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))), LIKELY(((vt0.c0) NOT NULL))  NULLS FIRST, CASE WHEN (('P6') NOT BETWEEN (vt0.c0) AND ('HC')) THEN load_extension(vt0.c0, vt0.c0) WHEN 'I))' THEN ((((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) ELSE ((vt0.c0)&(x'55df')) END  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((NOT (NULL)) IN (((vt0.c0) BETWEEN (x'') AND ('%')))))AND((((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((0Xffffffff934a838c))))&(((vt0.c0)IS NOT(vt0.c0))))))) ORDER BY '-1318330570'  NULLS FIRST, (((((vt0.c0)) BETWEEN (('-5iv')) AND ((vt0.c0)))) NOT NULL) DESC  NULLS FIRST, ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (((vt0.c0)GLOB(vt0.c0))) AND (((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))), LIKELY(((vt0.c0) NOT NULL))  NULLS FIRST, CASE WHEN (('P6') NOT BETWEEN (vt0.c0) AND ('HC')) THEN load_extension(vt0.c0, vt0.c0) WHEN 'I))' THEN ((((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) ELSE ((vt0.c0)&(x'55df')) END  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (((NOT (NULL)) IN (((vt0.c0) BETWEEN (x'') AND ('%')), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((0.7432547810461071)))))) ORDER BY '-1318330570'  NULLS FIRST, (((((vt0.c0)) BETWEEN (('-5iv')) AND ((vt0.c0)))) NOT NULL) DESC  NULLS FIRST, ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (((vt0.c0)GLOB(vt0.c0))) AND (((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))), LIKELY(((vt0.c0) NOT NULL))  NULLS FIRST, CASE WHEN (('P6') NOT BETWEEN (vt0.c0) AND ('HC')) THEN load_extension(vt0.c0, vt0.c0) WHEN 'I))' THEN ((((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) ELSE ((vt0.c0)&(x'55df')) END  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((NOT (NULL)) IN (((vt0.c0) BETWEEN (x'') AND ('%')))))AND((((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((0Xffffffff934a838c))))&(((vt0.c0)IS NOT(vt0.c0))))))) ORDER BY '-1318330570'  NULLS FIRST, (((((vt0.c0)) BETWEEN (('-5iv')) AND ((vt0.c0)))) NOT NULL) DESC  NULLS FIRST, ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (((vt0.c0)GLOB(vt0.c0))) AND (((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))), LIKELY(((vt0.c0) NOT NULL))  NULLS FIRST, CASE WHEN (('P6') NOT BETWEEN (vt0.c0) AND ('HC')) THEN load_extension(vt0.c0, vt0.c0) WHEN 'I))' THEN ((((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) ELSE ((vt0.c0)&(x'55df')) END  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt0 WHERE ((((((((+ (vt0.c0)))OR((((NULL, 0.024244574675355457)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))))OR((vt0.c0 IN ()))))AND(((vt0.c0) NOT NULL)))) ORDER BY (- (QUOTE(vt0.c0)));
SELECT * FROM vt0 WHERE ((((((((+ (vt0.c0)))OR((((NULL, 0.024244574675355457)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))))OR((vt0.c0 IN ()))))AND(((vt0.c0) NOT NULL)))) ORDER BY CASE WHEN 246293133 THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) WHEN CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN vt0.c0 COLLATE BINARY ELSE (NOT (vt0.c0)) END DESC INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c0)IS NOT(vt0.c0)) IN ())) ORDER BY CASE WHEN 246293133 THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) WHEN CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN vt0.c0 COLLATE BINARY ELSE (NOT (vt0.c0)) END DESC;
SELECT * FROM vt0 WHERE ((((((((+ (vt0.c0)))OR((((NULL, 0.024244574675355457)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))))OR((vt0.c0 IN ()))))AND(((vt0.c0) NOT NULL)))) ORDER BY (- (QUOTE(vt0.c0)));
SELECT * FROM vt0 WHERE ((((((((+ (vt0.c0)))OR((((NULL, 0.024244574675355457)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))))OR((vt0.c0 IN ()))))AND(((vt0.c0) NOT NULL)))) ORDER BY CASE WHEN 246293133 THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) WHEN CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN vt0.c0 COLLATE BINARY ELSE (NOT (vt0.c0)) END DESC INTERSECT SELECT * FROM vt0 WHERE ((((vt0.c0)IS NOT(vt0.c0)) IN ())) ORDER BY CASE WHEN 246293133 THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) WHEN CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN vt0.c0 COLLATE BINARY ELSE (NOT (vt0.c0)) END DESC;
SELECT COUNT(*) FROM vt2, vt0 WHERE ((((vt0.c0)) BETWEEN ((vt0.c0 COLLATE RTRIM)) AND ((((vt2.c0) NOT BETWEEN (0Xffffffffb0c98d5c) AND (vt2.c1)))))) ORDER BY -1218252392;
SELECT COUNT(*) FROM vt2, vt0 WHERE ((((vt0.c0)) BETWEEN ((vt0.c0 COLLATE RTRIM)) AND ((((vt2.c0) NOT BETWEEN (0xffffffffb0c98d5c) AND (vt2.c1)))))) ORDER BY -1218252392 LIMIT 2 INTERSECT SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (json_type(((vt2.c0)-(vt0.c0)))) ORDER BY -1218252392 LIMIT 2;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (CASE WHEN vt2.c1 THEN ((vt2.c1) IS TRUE) WHEN ((vt2.c0)!=(vt2.c1)) THEN COALESCE(vt2.c0, vt2.c1) WHEN LIKELY(DISTINCT vt0.c0) THEN CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END WHEN ((vt2.c0) NOTNULL) THEN ((vt2.c1) BETWEEN (vt2.c1) AND ('-268503340')) END) ORDER BY ((((NULL, vt2.c0)) BETWEEN ((vt2.c0, vt0.c0)) AND ((vt2.c1, vt0.c0))) IN ()) DESC  NULLS LAST, CAST((NOT (vt2.c1)) AS REAL)  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (((CASE WHEN vt2.c1 THEN ((vt2.c1) IS TRUE) WHEN ((vt2.c0)<(vt2.c1)) THEN COALESCE(vt2.c0, vt2.c1) WHEN LIKELY(DISTINCT vt0.c0) THEN CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END WHEN ((vt2.c0) NOTNULL) THEN ((vt2.c1) BETWEEN (vt2.c1) AND ('-268503340')) END)AND((vt2.c0 IN (vt2.c1)) COLLATE NOCASE))) ORDER BY ((((NULL, vt2.c0)) BETWEEN ((vt2.c0, vt0.c0)) AND ((vt2.c1, vt0.c0))) IN ()) DESC  NULLS LAST, CAST((NOT (vt2.c1)) AS REAL)  NULLS LAST;
SELECT COUNT(*) FROM v0 NATURAL JOIN vt0 INNER JOIN vt2 ON ((((vt0.c0)!=(v0.c0)))LIKE((NOT (vt2.c0)))) WHERE (CAST('-460184632' AS NUMERIC)) ORDER BY '-154399749';
SELECT COUNT(*) FROM v0 NATURAL JOIN vt0 INNER JOIN vt2 ON ((((vt0.c0)!=(v0.c0)))LIKE((NOT (vt2.c0)))) WHERE (CAST('-460184632' AS NUMERIC)) ORDER BY '-154399749' INTERSECT SELECT ALL COUNT(*) FROM v0 NATURAL JOIN vt0 INNER JOIN vt2 ON ((((vt0.c0)<>(v0.c0)))LIKE((NOT (vt2.c0)))) WHERE (vt2.c1) ORDER BY '-154399749';
SELECT ALL MAX(vt0.c0) FROM vt2, vt0 WHERE (CASE ((vt0.c0) NOT NULL)  WHEN ((NULL)>=(vt2.c0)) THEN (((vt2.c1, vt0.c0, vt0.c0, vt2.c0))!=((vt0.c0, vt0.c0, vt2.c1, vt0.c0))) WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt0.c0)) THEN (+ (vt0.c0)) END) ORDER BY CAST(CASE WHEN vt2.c0 THEN vt2.c0 WHEN x'04' THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 END AS TEXT) DESC, (((((vt0.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c0))))>>(2057113955));
SELECT ALL MAX(vt0.c0) FROM vt2, vt0 WHERE (CASE ((vt0.c0) NOT NULL)  WHEN ((NULL)>=(vt2.c0)) THEN (((vt2.c1, vt0.c0, vt0.c0, vt2.c0))>((vt0.c0, vt0.c0, vt2.c1, vt0.c0))) WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt0.c0)) THEN (+ (vt0.c0)) END) ORDER BY (((((((((- (vt2.c1)))AND(vt2.c0)))OR((+ (vt2.c0)))))OR((vt2.c1 IN (vt0.c0)))))OR((NOT (vt2.c1)))) DESC  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL MAX(vt0.c0) FROM vt2, vt0 WHERE ((~ (((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY (((((((((- (vt2.c1)))AND(vt2.c0)))OR((+ (vt2.c0)))))OR((vt2.c1 IN (vt0.c0)))))OR((NOT (vt2.c1)))) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) ISNULL));
SELECT DISTINCT * FROM vt0 WHERE (((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) ISNULL))AND((((- (vt0.c0)))IS((NOT (vt0.c0))))))) ORDER BY (('->d''^cey')%((NOT (vt0.c0)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)IS NOT(vt0.c0)))<((((vt0.c0, 0.2656094642140162, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY (('->d''^cey')%((NOT (vt0.c0)))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) ISNULL));
SELECT DISTINCT * FROM vt0 WHERE (((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) ISNULL))AND((((- (vt0.c0)))IS((NOT (vt0.c0))))))) ORDER BY (('->d''^cey')%((NOT (vt0.c0)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)IS NOT(vt0.c0)))<((((vt0.c0, 0.2656094642140162, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY (('->d''^cey')%((NOT (vt0.c0)))) LIMIT 1;
SELECT MAX(v0.c3) FROM v0 WHERE (((((((((0X454e15eb) NOT BETWEEN (v0.c2) AND (v0.c1)))AND((((NULL))=((v0.c0))))))OR(v0.c3)))OR((v0.c2 IN (v0.c1)))));
SELECT ALL MAX(v0.c3) FROM v0 WHERE (((((((((1162745323) NOT BETWEEN (v0.c2) AND (v0.c1)))AND((((NULL))=((v0.c0))))))OR(v0.c3)))OR((v0.c2 IN (v0.c1))))) ORDER BY CASE (+ (v0.c3))  WHEN (((v0.c3))!=((v0.c1))) THEN TRIM(v0.c0, v0.c3) WHEN CASE v0.c1  WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END THEN ((v0.c1)/(v0.c2)) END, CAST(v0.c3 COLLATE NOCASE AS BLOB) ASC, (NOT (((((((((v0.c0)OR(v0.c2)))AND(v0.c2)))AND(v0.c2)))OR(v0.c1)))) DESC  NULLS LAST LIMIT 0X1;
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c0)GLOB(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY (((vt0.c0, vt0.c0, vt0.c0)) BETWEEN (('1625988069', vt0.c0 COLLATE NOCASE, (((vt0.c0, vt0.c0, vt0.c0))>((vt0.c0, vt0.c0, vt0.c0))))) AND (((+ (vt0.c0)), (((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0))), ((vt0.c0)<<(x''))))) DESC;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0)GLOB(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)))AND(((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))<<(vt0.c0))))) ORDER BY (~ (0.6752456599976012)), ((((vt0.c0)LIKE(vt0.c0)))/(((((vt0.c0)OR(0.5427552041843192)))AND(vt0.c0))))  NULLS LAST LIMIT 0x1;
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((x'7844' IN (x'9841')));
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((((x'7844' IN (x'9841')))AND(TRIM(DISTINCT MAX(v0.c3, v0.c1, v0.c3))))) LIMIT 3 INTERSECT SELECT MIN(v0.c1) FROM v0 WHERE (((v0.c2 COLLATE BINARY)%(v0.c3))) LIMIT 0X3;
SELECT MAX(v0.c2) FROM v0, vt0, vt2 WHERE ((((v0.c0, v0.c3, v0.c3))<((v0.c2, v0.c0, vt0.c0))) COLLATE RTRIM);
SELECT DISTINCT MAX(v0.c2) FROM v0, vt0, vt2 WHERE ((((v0.c0, v0.c3, v0.c3))<((v0.c2, v0.c0, vt0.c0))) COLLATE RTRIM) ORDER BY ((CAST(vt0.c0 AS BLOB)) NOTNULL) ASC, (((vt2.c0) ISNULL) IN ()) LIMIT 2;
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (((CAST(vt0.c0 AS INTEGER)) IS FALSE)) ORDER BY (((vt2.c1, vt2.c1)) BETWEEN (((((vt0.c0, vt2.c1)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt0.c0, vt2.c1))), ((NULL)=(vt2.c1)))) AND (((vt2.c0 IN ()), vt2.c1))) DESC  NULLS LAST, ((((vt0.c0) NOTNULL)) NOT BETWEEN (vt2.c0) AND ((vt0.c0 IN ())));
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (((CAST(vt0.c0 AS INTEGER)) IS FALSE)) ORDER BY vt2.c1 LIMIT 1;
SELECT ALL * FROM vt2 CROSS JOIN v0 ON (+ (vt0.c0)) COLLATE BINARY NATURAL JOIN vt0 WHERE (((((v0.c2)>>(v0.c3)))<>((((vt2.c1, v0.c3, v0.c1))>((v0.c1, '1297875584', vt0.c0))))));
SELECT * FROM vt2 CROSS JOIN v0 ON (+ (vt0.c0)) COLLATE BINARY NATURAL JOIN vt0 WHERE (((((v0.c2)>>(v0.c3)))!=((((vt2.c1, v0.c3, v0.c1))>((v0.c1, '1297875584', vt0.c0)))))) ORDER BY ((((vt2.c1)-(vt0.c0))) ISNULL) ASC  NULLS LAST, v0.c1  NULLS LAST, (CAST(v0.c3 AS BLOB) IN ((((v0.c0, NULL, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c0, vt2.c1)) AND ((v0.c0, 'Mt', x'8c'))))) ASC  NULLS FIRST;
SELECT ALL * FROM vt2 CROSS JOIN v0 ON (+ (vt0.c0)) COLLATE BINARY NATURAL JOIN vt0 WHERE (((((v0.c2)>>(v0.c3)))<>((((vt2.c1, v0.c3, v0.c1))>((v0.c1, '1297875584', vt0.c0))))));
SELECT * FROM vt2 CROSS JOIN v0 ON (+ (vt0.c0)) COLLATE BINARY NATURAL JOIN vt0 WHERE (((((v0.c2)>>(v0.c3)))!=((((vt2.c1, v0.c3, v0.c1))>((v0.c1, '1297875584', vt0.c0)))))) ORDER BY ((((vt2.c1)-(vt0.c0))) ISNULL) ASC  NULLS LAST, v0.c1  NULLS LAST, (CAST(v0.c3 AS BLOB) IN ((((v0.c0, NULL, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c0, vt2.c1)) AND ((v0.c0, 'Mt', x'8c'))))) ASC  NULLS FIRST;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))<<(((vt2.c1) NOT NULL)))) ORDER BY ((((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))<>(((vt0.c0)&(vt2.c0))));
SELECT ALL * FROM vt0 NATURAL JOIN vt2 WHERE (((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))<<(((vt2.c1) NOT NULL))))AND((((((vt0.c0) ISNULL), vt2.c0 COLLATE NOCASE))>(((- (vt2.c1)), ((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0)))))))) ORDER BY (~ (CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c1 END)) ASC, (((vt2.c0 IN ())) IS FALSE) DESC LIMIT 0 INTERSECT SELECT ALL * FROM vt0 NATURAL JOIN vt2 WHERE (vt2.c0) ORDER BY (~ (CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c1 END)) ASC, (((vt2.c0 IN ())) IS FALSE) DESC LIMIT 0x0;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))<<(((vt2.c1) NOT NULL)))) ORDER BY ((((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))<>(((vt0.c0)&(vt2.c0))));
SELECT ALL * FROM vt0 NATURAL JOIN vt2 WHERE (((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))<<(((vt2.c1) NOT NULL))))AND((((((vt0.c0) ISNULL), vt2.c0 COLLATE NOCASE))>(((- (vt2.c1)), ((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0)))))))) ORDER BY (~ (CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c1 END)) ASC, (((vt2.c0 IN ())) IS FALSE) DESC LIMIT 0 INTERSECT SELECT ALL * FROM vt0 NATURAL JOIN vt2 WHERE (vt2.c0) ORDER BY (~ (CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c1 END)) ASC, (((vt2.c0 IN ())) IS FALSE) DESC LIMIT 0x0;
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) AS NUMERIC)) ORDER BY ((((vt2.c0) ISNULL))||(vt2.c0 COLLATE BINARY));
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) AS NUMERIC)) ORDER BY TRIM((((vt2.c0, vt2.c0, vt2.c0)) NOT BETWEEN (('-1405569928', vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0))), LOWER(DISTINCT vt2.c0)) DESC, CAST(LOWER(DISTINCT vt2.c1) AS NUMERIC), ((((vt2.c1)|(vt2.c0))) BETWEEN (CAST(vt2.c1 AS BLOB)) AND (''))  NULLS LAST;
SELECT MIN(vt2.c0) FROM v0, vt2, vt0 WHERE (-1.165434253E9) ORDER BY CAST(((vt2.c0) BETWEEN (v0.c2) AND (x'')) AS TEXT) DESC  NULLS FIRST, ((((x'24c2bd9b' COLLATE BINARY)OR(((vt2.c0)&(v0.c1)))))AND(((v0.c2) BETWEEN (v0.c2) AND (v0.c0)))) ASC;
SELECT MIN(vt2.c0) FROM v0, vt2, vt0 WHERE (((-1.165434253E9)AND(((((((LOWER(DISTINCT x'54790eccc0'))OR(v0.c1)))OR(((((v0.c1)OR(vt0.c0)))AND(vt2.c1)))))OR(CAST('-506705295' AS INTEGER)))))) ORDER BY NULL, CAST((v0.c2 IN ()) AS BLOB)  NULLS LAST;
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON ((CAST(v0.c1 AS NUMERIC))<((v0.c2 IN (vt2.c0)))) WHERE (v0.c1 COLLATE BINARY) ORDER BY ((v0.c2 COLLATE RTRIM) BETWEEN ((vt2.c1 IN (vt2.c0, v0.c0))) AND (((vt2.c0) NOTNULL))), ((CASE WHEN vt0.c0 THEN v0.c2 END) BETWEEN (((((vt2.c0)AND(0.48463391837208036)))OR(vt0.c0))) AND (((v0.c1) BETWEEN (v0.c1) AND (vt2.c1))));
SELECT * FROM vt2, v0 CROSS JOIN vt0 ON ((CAST(v0.c1 AS NUMERIC))<((v0.c2 IN (vt2.c0)))) WHERE (v0.c1 COLLATE BINARY) ORDER BY CASE WHEN v0.c0 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM COLLATE RTRIM DESC  NULLS LAST LIMIT 0x2 INTERSECT SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON ((CAST(v0.c1 AS NUMERIC))<((v0.c2 IN (vt2.c0)))) WHERE (CAST(DATETIME(v0.c3, vt2.c0, NULL) AS NUMERIC)) ORDER BY CASE WHEN v0.c0 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM COLLATE RTRIM DESC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON ((CAST(v0.c1 AS NUMERIC))<((v0.c2 IN (vt2.c0)))) WHERE (v0.c1 COLLATE BINARY) ORDER BY ((v0.c2 COLLATE RTRIM) BETWEEN ((vt2.c1 IN (vt2.c0, v0.c0))) AND (((vt2.c0) NOTNULL))), ((CASE WHEN vt0.c0 THEN v0.c2 END) BETWEEN (((((vt2.c0)AND(0.48463391837208036)))OR(vt0.c0))) AND (((v0.c1) BETWEEN (v0.c1) AND (vt2.c1))));
SELECT * FROM vt2, v0 CROSS JOIN vt0 ON ((CAST(v0.c1 AS NUMERIC))<((v0.c2 IN (vt2.c0)))) WHERE (v0.c1 COLLATE BINARY) ORDER BY CASE WHEN v0.c0 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM COLLATE RTRIM DESC  NULLS LAST LIMIT 0x2 INTERSECT SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON ((CAST(v0.c1 AS NUMERIC))<((v0.c2 IN (vt2.c0)))) WHERE (CAST(DATETIME(v0.c3, vt2.c0, NULL) AS NUMERIC)) ORDER BY CASE WHEN v0.c0 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM COLLATE RTRIM DESC  NULLS LAST LIMIT 2;
SELECT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (((((((0.6015802904256462)AND(vt2.c1)))AND(v0.c0))) ISNULL)) ORDER BY (LIKELIHOOD(vt0.c0, vt2.c0) IN (x'6a', ((((((((x'')OR(v0.c1)))OR('2017635915')))OR(vt0.c0)))AND(vt0.c0)))) DESC  NULLS LAST, (((v0.c1)>=(vt0.c0)) IN (CASE v0.c2  WHEN v0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN v0.c0 ELSE vt2.c1 END, (- (v0.c2))))  NULLS FIRST;
SELECT MIN(vt0.c0) FROM vt2, vt0, v0 NOT INDEXED WHERE (((((((0.6015802904256462)AND(vt2.c1)))AND(v0.c0))) ISNULL)) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)) THEN ((v0.c2) BETWEEN (vt0.c0) AND (vt2.c1)) WHEN CAST(vt2.c0 AS BLOB) THEN CAST(0.6696278070669723 AS NUMERIC) ELSE ((v0.c3) BETWEEN (v0.c2) AND (v0.c3)) END ASC  NULLS LAST, v0.c0 ASC INTERSECT SELECT ALL MIN(vt0.c0) FROM vt2, vt0, v0 WHERE ((+ (CAST(v0.c1 AS NUMERIC)))) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)) THEN ((v0.c2) BETWEEN (vt0.c0) AND (vt2.c1)) WHEN CAST(vt2.c0 AS BLOB) THEN CAST(0.6696278070669723 AS NUMERIC) ELSE ((v0.c3) BETWEEN (v0.c2) AND (v0.c3)) END ASC  NULLS LAST, v0.c0 ASC;
SELECT * FROM vt2, v0, vt0 WHERE (CASE vt2.c0  WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 ELSE v0.c0 END COLLATE RTRIM) ORDER BY ((CASE vt0.c0  WHEN v0.c3 THEN vt2.c1 WHEN v0.c3 THEN v0.c0 END)OR(CASE v0.c0  WHEN NULL THEN v0.c3 WHEN vt2.c1 THEN v0.c3 ELSE x'' END)) ASC  NULLS FIRST, ((((((((HEX(DISTINCT vt2.c0))OR(((v0.c3)|(v0.c2)))))AND(((((((((vt2.c1)AND(v0.c2)))OR('343201286')))AND(v0.c3)))OR(vt2.c1)))))OR(NULL)))AND(((vt2.c1) IS FALSE)))  NULLS FIRST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (CASE vt2.c0  WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 ELSE v0.c0 END COLLATE RTRIM) ORDER BY ((((((((((((607633563)>(v0.c3)))AND(((v0.c0) NOT NULL))))AND(((v0.c2)>(vt2.c0)))))AND(((((((((((x'')OR(v0.c0)))OR(vt0.c0)))AND(v0.c1)))AND(v0.c0)))OR(vt2.c0)))))AND((((vt2.c1, v0.c3, v0.c2))>=((v0.c0, vt2.c1, x''))))))OR((vt2.c0 IN (v0.c2))))  NULLS FIRST, CASE WHEN LIKELY(vt2.c0) THEN ((v0.c3)>=(v0.c0)) WHEN (NULL IN (v0.c2)) THEN ((v0.c1)>>(vt2.c0)) WHEN (((v0.c2, vt2.c1)) BETWEEN ((vt2.c1, v0.c3)) AND ((v0.c2, v0.c0))) THEN CASE v0.c1  WHEN v0.c0 THEN v0.c3 WHEN vt0.c0 THEN v0.c0 END WHEN ((vt0.c0) NOT NULL) THEN json_array_length(v0.c0, v0.c3) WHEN CAST(NULL AS INTEGER) THEN x'' ELSE json_object(vt2.c1, '-1330521423', v0.c3) END DESC  NULLS FIRST, ((((((x'add73f')OR(v0.c3)))AND(''))) NOTNULL) DESC  NULLS LAST, ((((v0.c1) IS TRUE))>>(1.831516531E9)) DESC LIMIT 2;
SELECT * FROM vt2, v0, vt0 WHERE (CASE vt2.c0  WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 ELSE v0.c0 END COLLATE RTRIM) ORDER BY ((CASE vt0.c0  WHEN v0.c3 THEN vt2.c1 WHEN v0.c3 THEN v0.c0 END)OR(CASE v0.c0  WHEN NULL THEN v0.c3 WHEN vt2.c1 THEN v0.c3 ELSE x'' END)) ASC  NULLS FIRST, ((((((((HEX(DISTINCT vt2.c0))OR(((v0.c3)|(v0.c2)))))AND(((((((((vt2.c1)AND(v0.c2)))OR('343201286')))AND(v0.c3)))OR(vt2.c1)))))OR(NULL)))AND(((vt2.c1) IS FALSE)))  NULLS FIRST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (CASE vt2.c0  WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 ELSE v0.c0 END COLLATE RTRIM) ORDER BY ((((((((((((607633563)>(v0.c3)))AND(((v0.c0) NOT NULL))))AND(((v0.c2)>(vt2.c0)))))AND(((((((((((x'')OR(v0.c0)))OR(vt0.c0)))AND(v0.c1)))AND(v0.c0)))OR(vt2.c0)))))AND((((vt2.c1, v0.c3, v0.c2))>=((v0.c0, vt2.c1, x''))))))OR((vt2.c0 IN (v0.c2))))  NULLS FIRST, CASE WHEN LIKELY(vt2.c0) THEN ((v0.c3)>=(v0.c0)) WHEN (NULL IN (v0.c2)) THEN ((v0.c1)>>(vt2.c0)) WHEN (((v0.c2, vt2.c1)) BETWEEN ((vt2.c1, v0.c3)) AND ((v0.c2, v0.c0))) THEN CASE v0.c1  WHEN v0.c0 THEN v0.c3 WHEN vt0.c0 THEN v0.c0 END WHEN ((vt0.c0) NOT NULL) THEN json_array_length(v0.c0, v0.c3) WHEN CAST(NULL AS INTEGER) THEN x'' ELSE json_object(vt2.c1, '-1330521423', v0.c3) END DESC  NULLS FIRST, ((((((x'add73f')OR(v0.c3)))AND(''))) NOTNULL) DESC  NULLS LAST, ((((v0.c1) IS TRUE))>>(1.831516531E9)) DESC LIMIT 2;
SELECT MAX(v0.c2) FROM v0 WHERE ((v0.c0 COLLATE NOCASE IN (((v0.c2) IS FALSE), NULLIF(v0.c0, x'46')))) ORDER BY (((COALESCE(DISTINCT v0.c0, v0.c1, v0.c1, v0.c1, v0.c2, v0.c0, v0.c1, v0.c3, v0.c3), ((v0.c0)GLOB(v0.c3)), ((((((((((v0.c2)AND(v0.c2)))AND(v0.c2)))AND(v0.c3)))AND(v0.c2)))AND(v0.c1)), v0.c2 COLLATE RTRIM))>(((v0.c3 IN ()), 'lw', v0.c2, ((v0.c2)>(-5.80686248E8)))))  NULLS FIRST;
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((((v0.c0 COLLATE NOCASE IN (((v0.c2) IS FALSE), NULLIF(v0.c0, x'46'))))AND(IFNULL(DISTINCT ((0.43015477911768996) NOT BETWEEN (v0.c2) AND (v0.c0)), (v0.c0 IN (v0.c3)))))) ORDER BY (((COALESCE(DISTINCT v0.c0, v0.c1, v0.c1, v0.c1, v0.c2, v0.c0, v0.c1, v0.c3, v0.c3), ((v0.c0)GLOB(v0.c3)), ((((((((((v0.c2)AND(v0.c2)))AND(v0.c2)))AND(v0.c3)))AND(v0.c2)))AND(v0.c1)), v0.c2 COLLATE RTRIM))>(((v0.c3 IN ()), 'lw', v0.c2, ((v0.c2)>(-5.80686248E8)))))  NULLS FIRST LIMIT 0x1;
SELECT COUNT(*) FROM vt2, vt0 WHERE (CAST(vt0.c0 AS INTEGER)) ORDER BY ((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)))/(((vt2.c1)>(vt0.c0)))), LTRIM(CAST(vt0.c0 AS TEXT)) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (CAST(vt0.c0 AS INTEGER)) ORDER BY CASE (~ (vt0.c0))  WHEN (- (vt0.c0)) THEN vt0.c0 COLLATE RTRIM WHEN CAST(vt2.c0 AS BLOB) THEN ((vt2.c1) IS TRUE) ELSE x'ac' END  NULLS LAST, ((COALESCE(DISTINCT vt0.c0, vt2.c0, vt0.c0))>=((NOT (vt2.c1)))) LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt2, vt0 WHERE (CASE WHEN ((vt2.c0)IS(vt2.c0)) THEN 0.023694149166923695 WHEN (vt0.c0 IN (vt2.c1)) THEN 0Xffffffffec551639 ELSE vt2.c1 END) ORDER BY CASE (~ (vt0.c0))  WHEN (- (vt0.c0)) THEN vt0.c0 COLLATE RTRIM WHEN CAST(vt2.c0 AS BLOB) THEN ((vt2.c1) IS TRUE) ELSE x'ac' END  NULLS LAST, ((COALESCE(DISTINCT vt0.c0, vt2.c0, vt0.c0))>=((NOT (vt2.c1)))) LIMIT 0X0;
SELECT MAX(v0.c0) FROM vt2 LEFT OUTER JOIN v0 ON (((NOT (vt0.c0)))GLOB((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c3))))) INNER JOIN vt0 ON (((((((+ (v0.c3)))OR(v0.c2)))AND(((((((vt2.c1)AND(vt2.c1)))OR(x'')))OR(vt2.c1)))))AND(RTRIM(vt2.c1))) WHERE (CAST(((((((vt2.c1)OR(v0.c3)))AND(v0.c1)))OR(vt0.c0)) AS TEXT));
SELECT DISTINCT MAX(v0.c0) FROM vt2 LEFT OUTER JOIN v0 ON (((NOT (vt0.c0)))GLOB((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c3))))) INNER JOIN vt0 ON (((((((+ (v0.c3)))OR(v0.c2)))AND(((((((vt2.c1)AND(vt2.c1)))OR(x'')))OR(vt2.c1)))))AND(RTRIM(vt2.c1))) WHERE (CAST(((((((vt2.c1)OR(v0.c3)))AND(v0.c1)))OR(vt0.c0)) AS TEXT));
SELECT MIN(v0.c1) FROM v0, vt2 WHERE (((v0.c0)+(vt2.c1)) COLLATE RTRIM) ORDER BY (((v0.c1 COLLATE BINARY))>=(((v0.c0 IN ())))) ASC  NULLS LAST;
SELECT MIN(v0.c1) FROM v0, vt2 WHERE (((((v0.c0)+(vt2.c1)) COLLATE RTRIM)AND((((- (vt2.c0))) NOTNULL)))) ORDER BY (((v0.c1 COLLATE BINARY))>=(((v0.c0 IN ())))) ASC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL MIN(v0.c1) FROM v0, vt2 WHERE (((v0.c3) BETWEEN (((vt2.c1) IS FALSE)) AND ((+ (v0.c2))))) ORDER BY (((v0.c1 COLLATE BINARY))>=(((v0.c0 IN ())))) ASC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt2, vt0, v0 WHERE (vt2.c0);
SELECT * FROM vt2, vt0, v0 WHERE (vt2.c0) ORDER BY ((LIKELY(v0.c1)) IS TRUE) DESC  NULLS FIRST, v0.c0  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (vt2.c0);
SELECT * FROM vt2, vt0, v0 WHERE (vt2.c0) ORDER BY ((LIKELY(v0.c1)) IS TRUE) DESC  NULLS FIRST, v0.c0  NULLS FIRST;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (((((((vt2.c1)AND(v0.c3)))OR(v0.c2)))OR(v0.c2)) COLLATE RTRIM);
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (((((((vt2.c1)AND(v0.c3)))OR(v0.c2)))OR(v0.c2)) COLLATE RTRIM) ORDER BY ((((v0.c0) BETWEEN (v0.c3) AND (v0.c2)))>=(v0.c2)) DESC  NULLS LAST, (('-1872550819')<>(((vt2.c1) NOT BETWEEN (vt2.c0) AND (v0.c3)))) DESC LIMIT 1;
SELECT ALL MAX(vt2.c1) FROM vt2 INNER JOIN vt0 ON ((((((NULL) IS FALSE))OR(((vt2.c1) IS TRUE))))AND(vt0.c0)) WHERE ((~ (((vt2.c0) NOTNULL)))) ORDER BY vt2.c0 DESC, LIKELY((~ (vt0.c0)))  NULLS LAST;
SELECT DISTINCT MAX(vt2.c1) FROM vt2 INNER JOIN vt0 ON ((((((NULL) IS FALSE))OR(((vt2.c1) IS TRUE))))AND(vt0.c0)) WHERE ((((~ (((vt2.c0) NOTNULL))))AND((((((vt2.c0, vt0.c0))<>((vt2.c0, vt2.c1))))AND(json_quote(vt0.c0)))))) ORDER BY vt2.c0 DESC, LIKELY((~ (vt0.c0)))  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2 INNER JOIN vt0 ON ((((((NULL) IS FALSE))OR(((vt2.c1) IS TRUE))))AND(vt0.c0)) WHERE (CAST(((vt2.c0)IS(vt2.c1)) AS NUMERIC)) ORDER BY vt2.c0 DESC, LIKELY((~ (vt0.c0)))  NULLS LAST;
SELECT * FROM vt2 WHERE (((vt2.c1 COLLATE NOCASE)AND(((((((vt2.c0)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1))))) ORDER BY x'9e' DESC, (+ (CAST(0.7192128116852758 AS BLOB)))  NULLS LAST, (NOT (vt2.c0)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1 COLLATE NOCASE)AND(((((((vt2.c0)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1))))) ORDER BY x'9e' DESC, (+ (CAST(0.7192128116852758 AS BLOB)))  NULLS LAST, (NOT (vt2.c0)) ASC  NULLS FIRST;
SELECT * FROM vt2 WHERE (((vt2.c1 COLLATE NOCASE)AND(((((((vt2.c0)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1))))) ORDER BY x'9e' DESC, (+ (CAST(0.7192128116852758 AS BLOB)))  NULLS LAST, (NOT (vt2.c0)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1 COLLATE NOCASE)AND(((((((vt2.c0)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1))))) ORDER BY x'9e' DESC, (+ (CAST(0.7192128116852758 AS BLOB)))  NULLS LAST, (NOT (vt2.c0)) ASC  NULLS FIRST;
SELECT ALL MAX(vt2.c1) FROM vt0, v0 CROSS JOIN vt2 ON (+ (((vt0.c0)+('wo峂t8 |')))) WHERE ((((vt2.c1)IS NOT(v0.c3)) IN ())) ORDER BY CAST(NULL AS INTEGER) DESC, ((((vt2.c0) BETWEEN (v0.c0) AND (v0.c2))) NOTNULL) DESC  NULLS LAST;
SELECT MAX(vt2.c1) FROM vt0, v0 CROSS JOIN vt2 ON (+ (((vt0.c0)+('wo峂t8 |')))) WHERE ((((((vt2.c1)IS NOT(v0.c3)) IN ()))AND((((vt0.c0)<>('cK>Q')) IN (0x402380dc))))) ORDER BY CAST(NULL AS INTEGER) DESC, ((((vt2.c0) BETWEEN (v0.c0) AND (v0.c2))) NOTNULL) DESC  NULLS LAST;
SELECT * FROM vt2, vt0, v0 WHERE ((CASE WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c0 ELSE v0.c1 END IN (((v0.c1)/(vt2.c1))))) ORDER BY UNICODE(((v0.c0)>(v0.c1))) ASC;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((CASE WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c0 ELSE v0.c1 END IN (((v0.c1)/(vt2.c1)))))AND(json_remove(vt0.c0, CASE WHEN v0.c3 THEN vt2.c0 END, DATETIME(v0.c1, vt2.c1, v0.c1, NULL))))) ORDER BY UNICODE(((v0.c0)>(v0.c1))) ASC LIMIT 1;
SELECT * FROM vt2, vt0, v0 WHERE ((CASE WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c0 ELSE v0.c1 END IN (((v0.c1)/(vt2.c1))))) ORDER BY UNICODE(((v0.c0)>(v0.c1))) ASC;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((CASE WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c0 ELSE v0.c1 END IN (((v0.c1)/(vt2.c1)))))AND(json_remove(vt0.c0, CASE WHEN v0.c3 THEN vt2.c0 END, DATETIME(v0.c1, vt2.c1, v0.c1, NULL))))) ORDER BY UNICODE(((v0.c0)>(v0.c1))) ASC LIMIT 1;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((vt2.c1 COLLATE BINARY, (((vt0.c0, vt2.c0))==((v0.c3, vt0.c0)))))>=((((vt2.c0)==(v0.c1)), ((v0.c1) NOTNULL))))) ORDER BY (((0.9656406496065746 IN (vt2.c1, NULL, vt2.c1))) NOT BETWEEN (((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c3))) AND (CAST(NULL AS BLOB)));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((vt2.c1 COLLATE BINARY, (((vt0.c0, vt2.c0))==((v0.c3, vt0.c0)))))>=((((vt2.c0)==(v0.c1)), ((v0.c1) NOTNULL))))) ORDER BY CASE WHEN ((vt2.c0) NOT NULL) THEN IFNULL(vt2.c0, v0.c1) END  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST(vt2.c1 AS BLOB) COLLATE BINARY) ORDER BY CASE WHEN ((vt2.c0) NOT NULL) THEN IFNULL(vt2.c0, v0.c1) END  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((vt2.c1 COLLATE BINARY, (((vt0.c0, vt2.c0))==((v0.c3, vt0.c0)))))>=((((vt2.c0)==(v0.c1)), ((v0.c1) NOTNULL))))) ORDER BY (((0.9656406496065746 IN (vt2.c1, NULL, vt2.c1))) NOT BETWEEN (((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c3))) AND (CAST(NULL AS BLOB)));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((vt2.c1 COLLATE BINARY, (((vt0.c0, vt2.c0))==((v0.c3, vt0.c0)))))>=((((vt2.c0)==(v0.c1)), ((v0.c1) NOTNULL))))) ORDER BY CASE WHEN ((vt2.c0) NOT NULL) THEN IFNULL(vt2.c0, v0.c1) END  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST(vt2.c1 AS BLOB) COLLATE BINARY) ORDER BY CASE WHEN ((vt2.c0) NOT NULL) THEN IFNULL(vt2.c0, v0.c1) END  NULLS FIRST LIMIT 1;
SELECT ALL MAX(vt0.c0) FROM v0, vt0, vt2 WHERE (v0.c1);
SELECT DISTINCT MAX(vt0.c0) FROM v0, vt0, vt2 WHERE (v0.c1) ORDER BY ((v0.c0)>(((vt2.c0) BETWEEN (v0.c1) AND (x'99ae'))))  NULLS FIRST LIMIT 0x6 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM v0, vt0, vt2 WHERE (((vt0.c0 IN (vt0.c0, '2Lu,')) IN ((((v0.c3, v0.c1))<>((v0.c1, 'oxizcb}c2'))), (((vt2.c1))<((vt0.c0)))))) ORDER BY ((v0.c0)>(((vt2.c0) BETWEEN (v0.c1) AND (x'99ae'))))  NULLS FIRST LIMIT 6;
SELECT ALL MIN(v0.c3) FROM vt2, vt0, v0 WHERE ((- (CASE v0.c2  WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END)));
SELECT DISTINCT MIN(v0.c3) FROM vt2, vt0, v0 WHERE ((- (CASE v0.c2  WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END))) ORDER BY (- ((+ (vt2.c0)))) DESC LIMIT 3;
SELECT COUNT(*) FROM vt2, vt0 WHERE ((('0.12939489118821834') IS FALSE));
SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE ((((('0.12939489118821834') IS FALSE))AND((((((vt0.c0)>(vt2.c1)), CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END))==((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt0.c0 END, vt2.c1 COLLATE RTRIM)))))) ORDER BY vt2.c0 DESC LIMIT 0x0;
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE (CASE (NULL IN ())  WHEN (- (vt0.c0)) THEN v0.c3 WHEN ((((vt2.c0)AND(vt0.c0)))AND(v0.c3)) THEN (((x'462b', v0.c0)) BETWEEN ((v0.c3, vt2.c1)) AND ((v0.c1, v0.c2))) END);
SELECT DISTINCT COUNT(*) FROM v0, vt2, vt0 WHERE (CASE (NULL IN ())  WHEN (- (vt0.c0)) THEN v0.c3 WHEN ((((vt2.c0)AND(vt0.c0)))AND(v0.c3)) THEN (((x'462b', v0.c0)) BETWEEN ((v0.c3, vt2.c1)) AND ((v0.c1, v0.c2))) END) ORDER BY ((CAST(v0.c3 AS TEXT))IS((v0.c0 IN ()))) DESC, CASE WHEN vt0.c0 THEN ((((((((((v0.c2)OR(v0.c1)))AND(vt0.c0)))OR(vt2.c1)))OR(v0.c1)))AND(vt2.c1)) WHEN ((v0.c1)IS NOT(vt2.c0)) THEN ((v0.c1)!=(vt2.c0)) WHEN (+ (v0.c2)) THEN ((v0.c3)>>(v0.c3)) END  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE (~ (0.8260925016516538))  WHEN (~ (vt0.c0)) THEN CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN vt0.c0 COLLATE NOCASE THEN json_patch(vt0.c0, x'') ELSE ((vt0.c0) NOT NULL) END) ORDER BY (((((vt0.c0)<>(vt0.c0))))<((SUBSTR(vt0.c0, vt0.c0)))) DESC  NULLS LAST, ((((vt0.c0)<<(vt0.c0)))<>(CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 NOT INDEXED WHERE (((CASE (~ (0.8260925016516538))  WHEN (~ (vt0.c0)) THEN CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN vt0.c0 COLLATE NOCASE THEN json_patch(vt0.c0, x'') ELSE ((vt0.c0) NOT NULL) END)AND((+ ((vt0.c0 IN ())))))) ORDER BY ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0))) IN ((((vt0.c0))>((-1.956065535E9))))) ASC;
SELECT * FROM v0, vt2, vt0 WHERE (CASE WHEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c2)) THEN (+ (v0.c0)) ELSE (((vt0.c0))==((NULL))) END) ORDER BY '' DESC, ((((v0.c3)>(vt2.c0))) IS FALSE) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CASE WHEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c2)) THEN (+ (v0.c0)) ELSE (((vt0.c0))=((NULL))) END) ORDER BY (+ (((vt0.c0) ISNULL))) ASC, CASE CAST(x'b4' AS INTEGER)  WHEN ((vt2.c0)<=(vt2.c1)) THEN (((v0.c2))!=((v0.c0))) ELSE (- (v0.c0)) END ASC;
SELECT * FROM v0, vt2, vt0 WHERE (CASE WHEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c2)) THEN (+ (v0.c0)) ELSE (((vt0.c0))==((NULL))) END) ORDER BY '' DESC, ((((v0.c3)>(vt2.c0))) IS FALSE) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CASE WHEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c2)) THEN (+ (v0.c0)) ELSE (((vt0.c0))=((NULL))) END) ORDER BY (+ (((vt0.c0) ISNULL))) ASC, CASE CAST(x'b4' AS INTEGER)  WHEN ((vt2.c0)<=(vt2.c1)) THEN (((v0.c2))!=((v0.c0))) ELSE (- (v0.c0)) END ASC;
SELECT ALL COUNT(*) FROM vt2, v0 WHERE (((((v0.c2) BETWEEN (vt2.c1) AND (v0.c2)))<<(HEX(v0.c0))));
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE (((((((v0.c2) BETWEEN (vt2.c1) AND (v0.c2)))<<(HEX(v0.c0))))AND(GLOB((((v0.c3, vt2.c0, v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, v0.c1, v0.c1, vt2.c1)) AND ((NULL, v0.c1, vt2.c1, v0.c1))), ((v0.c2)-(vt2.c1)))))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE ((- ((((vt2.c1, vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c0)) AND ((x'c0', v0.c2, vt2.c0))))));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((~ (vt2.c1)) COLLATE NOCASE) ORDER BY CASE WHEN (((v0.c2)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1))) THEN (((vt0.c0))!=((vt2.c0))) ELSE v0.c1 COLLATE NOCASE END ASC  NULLS LAST;
SELECT * FROM v0, vt2, vt0 WHERE ((((~ (vt2.c1)) COLLATE NOCASE)AND(CAST(((v0.c2)LIKE(vt2.c0)) AS BLOB)))) ORDER BY (((SQLITE_COMPILEOPTION_USED(v0.c3), v0.c1, ((((((v0.c0)AND(vt2.c1)))OR(v0.c3)))AND(vt0.c0)), ((v0.c0)+(v0.c3))))<(((+ (vt0.c0)), (~ (v0.c0)), ((v0.c3) BETWEEN (v0.c0) AND (v0.c2)), ((((((v0.c2)OR(v0.c1)))AND(0x2e445e29)))AND(v0.c1))))), v0.c3 ASC  NULLS FIRST INTERSECT SELECT * FROM v0, vt2, vt0 WHERE (((((vt0.c0) NOTNULL))&(((vt2.c0) BETWEEN (vt2.c1) AND (v0.c1))))) ORDER BY (((SQLITE_COMPILEOPTION_USED(v0.c3), v0.c1, ((((((v0.c0)AND(vt2.c1)))OR(v0.c3)))AND(vt0.c0)), ((v0.c0)+(v0.c3))))<(((+ (vt0.c0)), (~ (v0.c0)), ((v0.c3) BETWEEN (v0.c0) AND (v0.c2)), ((((((v0.c2)OR(v0.c1)))AND(0x2e445e29)))AND(v0.c1))))), v0.c3 ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((~ (vt2.c1)) COLLATE NOCASE) ORDER BY CASE WHEN (((v0.c2)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1))) THEN (((vt0.c0))!=((vt2.c0))) ELSE v0.c1 COLLATE NOCASE END ASC  NULLS LAST;
SELECT * FROM v0, vt2, vt0 WHERE ((((~ (vt2.c1)) COLLATE NOCASE)AND(CAST(((v0.c2)LIKE(vt2.c0)) AS BLOB)))) ORDER BY (((SQLITE_COMPILEOPTION_USED(v0.c3), v0.c1, ((((((v0.c0)AND(vt2.c1)))OR(v0.c3)))AND(vt0.c0)), ((v0.c0)+(v0.c3))))<(((+ (vt0.c0)), (~ (v0.c0)), ((v0.c3) BETWEEN (v0.c0) AND (v0.c2)), ((((((v0.c2)OR(v0.c1)))AND(0x2e445e29)))AND(v0.c1))))), v0.c3 ASC  NULLS FIRST INTERSECT SELECT * FROM v0, vt2, vt0 WHERE (((((vt0.c0) NOTNULL))&(((vt2.c0) BETWEEN (vt2.c1) AND (v0.c1))))) ORDER BY (((SQLITE_COMPILEOPTION_USED(v0.c3), v0.c1, ((((((v0.c0)AND(vt2.c1)))OR(v0.c3)))AND(vt0.c0)), ((v0.c0)+(v0.c3))))<(((+ (vt0.c0)), (~ (v0.c0)), ((v0.c3) BETWEEN (v0.c0) AND (v0.c2)), ((((((v0.c2)OR(v0.c1)))AND(0x2e445e29)))AND(v0.c1))))), v0.c3 ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (((json(v0.c2)) NOT NULL)) ORDER BY (LIKE('-1953238461', v0.c0) IN ())  NULLS FIRST, LIKELY(((((((1.786442639E9)OR(vt0.c0)))AND(v0.c1)))AND(vt0.c0))) ASC;
SELECT DISTINCT * FROM v0, vt0 WHERE (((json(v0.c2)) NOT NULL)) ORDER BY (((CAST(v0.c0 AS BLOB), CAST(v0.c2 AS NUMERIC), CASE vt0.c0  WHEN 'UJm' THEN v0.c2 WHEN v0.c0 THEN vt0.c0 ELSE vt0.c0 END))==(((- (vt0.c0)), ((((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c2)))OR(x'17dd70')), LTRIM(vt0.c0, v0.c3)))) ASC INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE ('0.45939357815304416') ORDER BY (((CAST(v0.c0 AS BLOB), CAST(v0.c2 AS NUMERIC), CASE vt0.c0  WHEN 'UJm' THEN v0.c2 WHEN v0.c0 THEN vt0.c0 ELSE vt0.c0 END))=(((- (vt0.c0)), ((((((((v0.c0)OR(v0.c2)))AND(v0.c1)))AND(v0.c2)))OR(x'17dd70')), LTRIM(vt0.c0, v0.c3)))) ASC;
SELECT ALL * FROM v0, vt0 WHERE (((json(v0.c2)) NOT NULL)) ORDER BY (LIKE('-1953238461', v0.c0) IN ())  NULLS FIRST, LIKELY(((((((1.786442639E9)OR(vt0.c0)))AND(v0.c1)))AND(vt0.c0))) ASC;
SELECT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (((CAST(v0.c1 AS REAL)) BETWEEN (((v0.c3) BETWEEN (vt2.c1) AND (v0.c1))) AND ((((((('Y%F')OR(vt0.c0)))AND(NULL)))OR(v0.c0))))) ORDER BY ((((vt2.c1)-(vt2.c0)))>(vt0.c0 COLLATE BINARY)) ASC, CASE ((vt0.c0) NOT BETWEEN (v0.c2) AND (vt2.c1))  WHEN x'' THEN ((vt2.c0)IS NOT(vt2.c0)) WHEN CASE vt2.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN 0Xffffffffe166e9ef THEN vt0.c0 WHEN '7' THEN 0.4099338637139208 ELSE v0.c3 END THEN ((vt0.c0)OR(v0.c2)) END  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (((((CAST(v0.c1 AS REAL)) BETWEEN (((v0.c3) BETWEEN (vt2.c1) AND (v0.c1))) AND ((((((('Y%F')OR(vt0.c0)))AND(NULL)))OR(v0.c0)))))AND(((((vt2.c1) NOT BETWEEN (v0.c2) AND (vt0.c0)))<(CASE v0.c2  WHEN v0.c3 THEN v0.c3 END))))) ORDER BY ((((vt2.c0, vt2.c0)) BETWEEN ((v0.c3, v0.c3)) AND ((v0.c1, vt2.c0))) IN (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1)))) ASC LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (((CAST(v0.c0 AS REAL))IS NOT((v0.c0 IN ())))) ORDER BY ((((vt2.c0, vt2.c0)) BETWEEN ((v0.c3, v0.c3)) AND ((v0.c1, vt2.c0))) IN (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1)))) ASC LIMIT 0X2;
SELECT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (((CAST(v0.c1 AS REAL)) BETWEEN (((v0.c3) BETWEEN (vt2.c1) AND (v0.c1))) AND ((((((('Y%F')OR(vt0.c0)))AND(NULL)))OR(v0.c0))))) ORDER BY ((((vt2.c1)-(vt2.c0)))>(vt0.c0 COLLATE BINARY)) ASC, CASE ((vt0.c0) NOT BETWEEN (v0.c2) AND (vt2.c1))  WHEN x'' THEN ((vt2.c0)IS NOT(vt2.c0)) WHEN CASE vt2.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN 0Xffffffffe166e9ef THEN vt0.c0 WHEN '7' THEN 0.4099338637139208 ELSE v0.c3 END THEN ((vt0.c0)OR(v0.c2)) END  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (((((CAST(v0.c1 AS REAL)) BETWEEN (((v0.c3) BETWEEN (vt2.c1) AND (v0.c1))) AND ((((((('Y%F')OR(vt0.c0)))AND(NULL)))OR(v0.c0)))))AND(((((vt2.c1) NOT BETWEEN (v0.c2) AND (vt0.c0)))<(CASE v0.c2  WHEN v0.c3 THEN v0.c3 END))))) ORDER BY ((((vt2.c0, vt2.c0)) BETWEEN ((v0.c3, v0.c3)) AND ((v0.c1, vt2.c0))) IN (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1)))) ASC LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (((CAST(v0.c0 AS REAL))IS NOT((v0.c0 IN ())))) ORDER BY ((((vt2.c0, vt2.c0)) BETWEEN ((v0.c3, v0.c3)) AND ((v0.c1, vt2.c0))) IN (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1)))) ASC LIMIT 0X2;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON ((((((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c2)))AND(((v0.c2)OR(vt0.c0)))))OR(0.4284493645082942)))AND(json(0.6679422335115228))) LEFT OUTER JOIN v0 ON (((+ (v0.c3)))!=(CAST(v0.c3 AS BLOB))) WHERE ('뷽7⣴Rm*|');
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON ((((((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c2)))AND(((v0.c2)OR(vt0.c0)))))OR(0.4284493645082942)))AND(json(0.6679422335115228))) LEFT OUTER JOIN v0 ON (((+ (v0.c3)))!=(CAST(v0.c3 AS BLOB))) WHERE ('뷽7⣴Rm*|') INTERSECT SELECT ALL * FROM vt0 LEFT OUTER JOIN vt2 ON ((((((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c2)))AND(((v0.c2)OR(vt0.c0)))))OR(0.4284493645082942)))AND(json(0.6679422335115228))) LEFT OUTER JOIN v0 ON (((+ (v0.c3)))!=(CAST(v0.c3 AS BLOB))) WHERE ((- (TRIM(DISTINCT v0.c0))));
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON ((((((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c2)))AND(((v0.c2)OR(vt0.c0)))))OR(0.4284493645082942)))AND(json(0.6679422335115228))) LEFT OUTER JOIN v0 ON (((+ (v0.c3)))!=(CAST(v0.c3 AS BLOB))) WHERE ('뷽7⣴Rm*|');
SELECT ALL MIN(vt2.c0) FROM vt0, vt2 WHERE ((((vt2.c0, vt0.c0, vt2.c1)) NOT BETWEEN ((((((((((vt0.c0)AND(vt2.c0)))OR(vt2.c1)))AND(NULL)))AND(vt2.c1)), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)), vt0.c0)) AND ((((vt2.c1)/(vt2.c1)), ((vt2.c0)LIKE(vt0.c0)), (- (vt0.c0))))));
SELECT DISTINCT MIN(vt2.c0) FROM vt0, vt2 WHERE ((((((vt2.c0, vt0.c0, vt2.c1)) NOT BETWEEN ((((((((((vt0.c0)AND(vt2.c0)))OR(vt2.c1)))AND(NULL)))AND(vt2.c1)), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)), vt0.c0)) AND ((((vt2.c1)/(vt2.c1)), ((vt2.c0)LIKE(vt0.c0)), (- (vt0.c0))))))AND(((((((vt2.c1)<=(x'')))OR(NULL)))OR(CASE vt2.c1  WHEN vt2.c0 THEN '-168283889' WHEN vt2.c0 THEN vt2.c1 WHEN vt0.c0 THEN '-144025520' WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c0 END))))) ORDER BY CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END AS NUMERIC)  NULLS LAST, TOTAL_CHANGES()  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt0, vt2 WHERE (((vt2.c0 COLLATE RTRIM)IS((NOT (vt2.c0))))) ORDER BY CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END AS NUMERIC)  NULLS LAST, TOTAL_CHANGES()  NULLS LAST LIMIT 1;
SELECT MAX(v0.c3) FROM v0 WHERE (((((v0.c2)) BETWEEN ((v0.c1)) AND ((v0.c1))) IN ()));
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (((((v0.c2)) BETWEEN ((v0.c1)) AND ((v0.c1))) IN ())) ORDER BY NULL DESC  NULLS FIRST, LIKE(CAST(v0.c2 AS INTEGER), ((('-287466678', v0.c3, v0.c1, v0.c2)) NOT BETWEEN ((v0.c2, v0.c1, v0.c0, v0.c1)) AND ((v0.c2, x'', v0.c0, v0.c2)))) ASC  NULLS LAST, '.㳝	fJY'  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt2, v0 WHERE ((~ (((vt2.c0) NOT NULL)))) ORDER BY '' ASC, CAST(CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 END AS REAL)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE ((((~ (((vt2.c0) NOT NULL))))AND(((((v0.c3) IS TRUE))IS NOT(v0.c2 COLLATE RTRIM))))) ORDER BY v0.c3;
SELECT * FROM vt2 INNER JOIN vt0 ON CASE WHEN ((((((v0.c3)AND(v0.c3)))AND(vt2.c1)))OR(vt2.c0)) THEN ((x'') BETWEEN (vt0.c0) AND (v0.c1)) ELSE LIKELIHOOD(DISTINCT v0.c2, v0.c3) END NATURAL JOIN v0 WHERE ((((((vt2.c1, vt2.c0))<>((v0.c2, v0.c2)))) BETWEEN ('0.917303603074189') AND (((vt2.c0)-(v0.c1)))));
SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON CASE WHEN ((((((v0.c3)AND(v0.c3)))AND(vt2.c1)))OR(vt2.c0)) THEN ((x'') BETWEEN (vt0.c0) AND (v0.c1)) ELSE LIKELIHOOD(DISTINCT v0.c2, v0.c3) END NATURAL JOIN v0 WHERE ((((((vt2.c1, vt2.c0))<>((v0.c2, v0.c2)))) BETWEEN ('0.917303603074189') AND (((vt2.c0)-(v0.c1)))));
SELECT * FROM vt2 INNER JOIN vt0 ON CASE WHEN ((((((v0.c3)AND(v0.c3)))AND(vt2.c1)))OR(vt2.c0)) THEN ((x'') BETWEEN (vt0.c0) AND (v0.c1)) ELSE LIKELIHOOD(DISTINCT v0.c2, v0.c3) END NATURAL JOIN v0 WHERE ((((((vt2.c1, vt2.c0))<>((v0.c2, v0.c2)))) BETWEEN ('0.917303603074189') AND (((vt2.c0)-(v0.c1)))));
SELECT MIN(v0.c2) FROM vt2, v0 WHERE ((((v0.c3, x'28', v0.c2)) NOT BETWEEN (((((vt2.c1, v0.c1))>((v0.c1, vt2.c1))), '', TRIM(vt2.c0))) AND (((((v0.c1, v0.c2, vt2.c1, v0.c0)) BETWEEN ((v0.c3, v0.c3, vt2.c0, vt2.c0)) AND ((0X6c3c2114, v0.c3, vt2.c1, vt2.c1))), (((vt2.c1, v0.c0))!=((v0.c1, v0.c0))), v0.c3 COLLATE BINARY)))) ORDER BY MIN((- (v0.c2)), v0.c2) ASC;
SELECT DISTINCT MIN(v0.c2) FROM vt2, v0 WHERE ((((v0.c3, x'28', v0.c2)) NOT BETWEEN (((((vt2.c1, v0.c1))>=((v0.c1, vt2.c1))), '', TRIM(vt2.c0))) AND (((((v0.c1, v0.c2, vt2.c1, v0.c0)) BETWEEN ((v0.c3, v0.c3, vt2.c0, vt2.c0)) AND ((1815879956, v0.c3, vt2.c1, vt2.c1))), (((vt2.c1, v0.c0))!=((v0.c1, v0.c0))), v0.c3 COLLATE BINARY)))) ORDER BY MIN((- (v0.c2)), v0.c2) ASC INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt2, v0 WHERE (((CAST(v0.c0 AS REAL))>(CAST(v0.c2 AS BLOB)))) ORDER BY MIN((- (v0.c2)), v0.c2) ASC;
SELECT COUNT(*) FROM v0, vt0 WHERE ((((LIKELY(v0.c2)))>=((((v0.c3) IS FALSE))))) ORDER BY CAST((('26740613')||(v0.c1)) AS BLOB), CASE ((v0.c2) IS FALSE)  WHEN v0.c1 COLLATE NOCASE THEN ((v0.c3)!=(v0.c0)) END  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0 NOT INDEXED, vt0 WHERE ((((((LIKELY(v0.c2)))>=((((v0.c3) IS FALSE)))))AND((((((v0.c2)%('0.9637382275542646')), (+ (vt0.c0)), ((v0.c0)/(v0.c3))))>((((((((v0.c1)OR(vt0.c0)))OR(vt0.c0)))OR(v0.c0)), (NOT (v0.c0)), (v0.c2 IN (v0.c3)))))))) ORDER BY (v0.c3 IN (((((v0.c1)OR(v0.c3)))OR(v0.c0)))) DESC, (v0.c2 IN ())  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE ((~ (((v0.c1)>('366136118'))))) ORDER BY (v0.c3 IN (((((v0.c1)OR(v0.c3)))OR(v0.c0)))) DESC, (v0.c2 IN ())  NULLS LAST LIMIT 1;
SELECT * FROM vt0, vt2, v0 WHERE (UPPER(DISTINCT TRIM(0X4febf9da)));
SELECT * FROM vt0, vt2, v0 WHERE (((UPPER(DISTINCT TRIM(0X4febf9da)))AND((((((((((((vt2.c1)AND('
,GGf9W-C')))OR(v0.c1)))AND(vt2.c1)))AND(vt2.c0)))AND(v0.c1)) IN ('4]\T'))))) ORDER BY v0.c2 COLLATE RTRIM LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (vt2.c1) ORDER BY v0.c2 COLLATE RTRIM LIMIT 0x0;
SELECT * FROM vt0, vt2, v0 WHERE (UPPER(DISTINCT TRIM(0X4febf9da)));
SELECT * FROM vt0, vt2, v0 WHERE (((UPPER(DISTINCT TRIM(0X4febf9da)))AND((((((((((((vt2.c1)AND('
,GGf9W-C')))OR(v0.c1)))AND(vt2.c1)))AND(vt2.c0)))AND(v0.c1)) IN ('4]\T'))))) ORDER BY v0.c2 COLLATE RTRIM LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (vt2.c1) ORDER BY v0.c2 COLLATE RTRIM LIMIT 0x0;
SELECT ALL * FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((v0.c2)%(0.23589764147070302)) IN (v0.c0 COLLATE NOCASE, CASE WHEN vt2.c0 THEN v0.c0 ELSE v0.c0 END)) WHERE (CAST(vt2.c1 AS REAL) COLLATE BINARY) ORDER BY (NOT (x'')) DESC, vt2.c0 COLLATE NOCASE DESC  NULLS LAST;
SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((v0.c2)%(0.23589764147070302)) IN (v0.c0 COLLATE NOCASE, CASE WHEN vt2.c0 THEN v0.c0 ELSE v0.c0 END)) WHERE (((CAST(vt2.c1 AS REAL) COLLATE BINARY)AND(CASE WHEN CASE vt2.c0  WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN vt2.c1 ELSE '1646465875' END THEN ((((vt2.c0)AND(vt0.c0)))OR(vt2.c0)) END))) ORDER BY 0xffffffffa53a3560 DESC  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((v0.c2)%(0.23589764147070302)) IN (v0.c0 COLLATE NOCASE, CASE WHEN vt2.c0 THEN v0.c0 ELSE v0.c0 END)) WHERE (CAST(vt2.c1 AS REAL) COLLATE BINARY) ORDER BY (NOT (x'')) DESC, vt2.c0 COLLATE NOCASE DESC  NULLS LAST;
SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((v0.c2)%(0.23589764147070302)) IN (v0.c0 COLLATE NOCASE, CASE WHEN vt2.c0 THEN v0.c0 ELSE v0.c0 END)) WHERE (((CAST(vt2.c1 AS REAL) COLLATE BINARY)AND(CASE WHEN CASE vt2.c0  WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN vt2.c1 ELSE '1646465875' END THEN ((((vt2.c0)AND(vt0.c0)))OR(vt2.c0)) END))) ORDER BY 0xffffffffa53a3560 DESC  NULLS FIRST LIMIT 0X1;
SELECT MAX(vt2.c1) FROM vt2, v0 WHERE ((((((v0.c0)>>(v0.c1)), ((v0.c1)LIKE(vt2.c1))))<(((~ (x'ae0c50')), ((0.35576372066017514) IS FALSE)))));
SELECT MAX(vt2.c1) FROM vt2, v0 WHERE ((((((v0.c0)>>(v0.c1)), ((v0.c1)LIKE(vt2.c1))))<(((~ (x'ae0c50')), ((0.35576372066017514) IS FALSE))))) ORDER BY (CASE WHEN v0.c3 THEN x'5d' WHEN v0.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 END IN ())  NULLS FIRST, ((v0.c3)&(((vt2.c1)<=(v0.c0)))) DESC, ((v0.c2 IN (v0.c3)) IN (LOWER(v0.c1), CASE WHEN v0.c1 THEN v0.c2 ELSE 0X4d94e9a9 END)) DESC  NULLS LAST, ((((0.8351610666035666) IS TRUE))+(((v0.c1)<(v0.c2)))) INTERSECT SELECT MAX(vt2.c1) FROM vt2, v0 WHERE (CAST(((vt2.c0) NOT BETWEEN (v0.c2) AND (vt2.c0)) AS TEXT)) ORDER BY (CASE WHEN v0.c3 THEN x'5d' WHEN v0.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 END IN ())  NULLS FIRST, ((v0.c3)&(((vt2.c1)<=(v0.c0)))) DESC, ((v0.c2 IN (v0.c3)) IN (LOWER(v0.c1), CASE WHEN v0.c1 THEN v0.c2 ELSE 0x4d94e9a9 END)) DESC  NULLS LAST, ((((0.8351610666035666) IS TRUE))+(((v0.c1)<(v0.c2))));
SELECT MAX(v0.c2) FROM v0, vt0 WHERE (CAST(v0.c3 AS REAL)) ORDER BY (NOT ((((v0.c3))<((v0.c3)))));
SELECT DISTINCT MAX(v0.c2) FROM v0, vt0 WHERE (CAST(v0.c3 AS REAL)) ORDER BY (NOT ((((v0.c3))<((v0.c3))))) INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt0 WHERE (((((v0.c2) BETWEEN (NULL) AND (v0.c3)))IS((+ (v0.c2))))) ORDER BY (NOT ((((v0.c3))<((v0.c3)))));
SELECT * FROM vt2 WHERE (LOWER(DISTINCT ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0))));
SELECT DISTINCT * FROM vt2 WHERE (LOWER(DISTINCT ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0)))) ORDER BY json_extract(CAST(vt2.c0 AS BLOB), (~ (vt2.c0)), CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS NUMERIC), (((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))  NULLS FIRST, ((CAST(vt2.c1 AS INTEGER)) NOT BETWEEN ((((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))) AND ((NULL IN (vt2.c1))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((MIN(NULL, vt2.c0))+(((vt2.c0)OR(vt2.c0))))) ORDER BY json_extract(CAST(vt2.c0 AS BLOB), (~ (vt2.c0)), CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS NUMERIC), (((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))  NULLS FIRST, ((CAST(vt2.c1 AS INTEGER)) NOT BETWEEN ((((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))) AND ((NULL IN (vt2.c1))))  NULLS LAST LIMIT 1;
SELECT * FROM vt2 WHERE (LOWER(DISTINCT ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0))));
SELECT DISTINCT * FROM vt2 WHERE (LOWER(DISTINCT ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0)))) ORDER BY json_extract(CAST(vt2.c0 AS BLOB), (~ (vt2.c0)), CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS NUMERIC), (((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))  NULLS FIRST, ((CAST(vt2.c1 AS INTEGER)) NOT BETWEEN ((((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))) AND ((NULL IN (vt2.c1))))  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((MIN(NULL, vt2.c0))+(((vt2.c0)OR(vt2.c0))))) ORDER BY json_extract(CAST(vt2.c0 AS BLOB), (~ (vt2.c0)), CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END, CAST(vt2.c0 AS NUMERIC), (((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))  NULLS FIRST, ((CAST(vt2.c1 AS INTEGER)) NOT BETWEEN ((((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))) AND ((NULL IN (vt2.c1))))  NULLS LAST LIMIT 1;
SELECT MIN(v0.c1) FROM v0 WHERE ((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END IN (((x'')AND(v0.c0)), (((v0.c2, v0.c2, v0.c0, v0.c3))<((v0.c3, v0.c2, v0.c3, v0.c2))))));
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END IN (((x'')AND(v0.c0)), (((v0.c2, v0.c2, v0.c0, v0.c3))<((v0.c3, v0.c2, v0.c3, v0.c2)))))) ORDER BY v0.c0 ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0 WHERE (CASE WHEN (+ (v0.c2)) THEN ((v0.c3) BETWEEN ('<') AND (v0.c2)) WHEN ((v0.c2)&(v0.c3)) THEN CAST(v0.c3 AS REAL) WHEN 0Xffffffffaa6b164f THEN (((v0.c2)) BETWEEN ((x'4be3')) AND ((v0.c0))) WHEN v0.c2 THEN CAST(v0.c2 AS TEXT) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END);
SELECT * FROM v0 WHERE (((CASE WHEN (+ (v0.c2)) THEN ((v0.c3) BETWEEN ('<') AND (v0.c2)) WHEN ((v0.c2)&(v0.c3)) THEN CAST(v0.c3 AS REAL) WHEN 0xffffffffaa6b164f THEN (((v0.c2)) BETWEEN ((x'4be3')) AND ((v0.c0))) WHEN v0.c2 THEN CAST(v0.c2 AS TEXT) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END)AND(CAST('477587929' AS INTEGER)))) INTERSECT SELECT * FROM v0 WHERE ((((((((v0.c0, v0.c1)) BETWEEN ((v0.c3, v0.c0)) AND ((NULL, v0.c3))))AND(CAST(v0.c2 AS INTEGER))))OR(((v0.c2)=(v0.c0)))));
SELECT ALL * FROM v0 WHERE (CASE WHEN (+ (v0.c2)) THEN ((v0.c3) BETWEEN ('<') AND (v0.c2)) WHEN ((v0.c2)&(v0.c3)) THEN CAST(v0.c3 AS REAL) WHEN 0Xffffffffaa6b164f THEN (((v0.c2)) BETWEEN ((x'4be3')) AND ((v0.c0))) WHEN v0.c2 THEN CAST(v0.c2 AS TEXT) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END);
SELECT * FROM v0 WHERE (((CASE WHEN (+ (v0.c2)) THEN ((v0.c3) BETWEEN ('<') AND (v0.c2)) WHEN ((v0.c2)&(v0.c3)) THEN CAST(v0.c3 AS REAL) WHEN 0xffffffffaa6b164f THEN (((v0.c2)) BETWEEN ((x'4be3')) AND ((v0.c0))) WHEN v0.c2 THEN CAST(v0.c2 AS TEXT) ELSE ((v0.c1) BETWEEN (v0.c0) AND (v0.c0)) END)AND(CAST('477587929' AS INTEGER)))) INTERSECT SELECT * FROM v0 WHERE ((((((((v0.c0, v0.c1)) BETWEEN ((v0.c3, v0.c0)) AND ((NULL, v0.c3))))AND(CAST(v0.c2 AS INTEGER))))OR(((v0.c2)=(v0.c0)))));
SELECT ALL * FROM v0 WHERE (((0.888819516724964)>((v0.c1 IN ())))) ORDER BY '-1608389168' DESC  NULLS FIRST, ((((v0.c1)>=(v0.c0))) ISNULL)  NULLS LAST, ((((v0.c1)<>(868741710))) NOT BETWEEN (((v0.c2)>(v0.c3))) AND (CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN '-574332796' WHEN v0.c1 THEN '324736096' END)) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((0.888819516724964)>((v0.c1 IN ())))) ORDER BY CAST(CAST(0.08634741939000601 AS NUMERIC) AS TEXT) ASC, ((((((v0.c1)&(v0.c3)))AND(((v0.c2)*(v0.c3)))))OR((v0.c0 IN (v0.c3, v0.c2)))) LIMIT 0X1;
SELECT ALL * FROM v0 WHERE (((0.888819516724964)>((v0.c1 IN ())))) ORDER BY '-1608389168' DESC  NULLS FIRST, ((((v0.c1)>=(v0.c0))) ISNULL)  NULLS LAST, ((((v0.c1)<>(868741710))) NOT BETWEEN (((v0.c2)>(v0.c3))) AND (CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN '-574332796' WHEN v0.c1 THEN '324736096' END)) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((0.888819516724964)>((v0.c1 IN ())))) ORDER BY CAST(CAST(0.08634741939000601 AS NUMERIC) AS TEXT) ASC, ((((((v0.c1)&(v0.c3)))AND(((v0.c2)*(v0.c3)))))OR((v0.c0 IN (v0.c3, v0.c2)))) LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (LOWER(SQLITE_VERSION())) ORDER BY (((vt0.c0 IN ()))>(vt0.c0 COLLATE BINARY));
SELECT ALL * FROM vt0 WHERE (LOWER(SQLITE_VERSION())) ORDER BY ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0))) ISNULL)  NULLS LAST, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY;
SELECT ALL * FROM vt0 WHERE (LOWER(SQLITE_VERSION())) ORDER BY (((vt0.c0 IN ()))>(vt0.c0 COLLATE BINARY));
SELECT ALL * FROM vt0 WHERE (LOWER(SQLITE_VERSION())) ORDER BY ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0))) ISNULL)  NULLS LAST, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY;
SELECT * FROM vt0, v0 WHERE (((((((((vt0.c0 COLLATE RTRIM)AND(json_insert(v0.c1, '*誂9Kc', vt0.c0, vt0.c0, v0.c2))))AND('')))AND(v0.c2)))AND(v0.c1 COLLATE NOCASE)));
SELECT ALL * FROM vt0, v0 WHERE (((((((((vt0.c0 COLLATE RTRIM)AND(json_insert(v0.c1, '*誂9Kc', vt0.c0, vt0.c0, v0.c2))))AND('')))AND(v0.c2)))AND(v0.c1 COLLATE NOCASE))) ORDER BY v0.c3 ASC, ((v0.c1 COLLATE BINARY) NOT NULL) ASC  NULLS FIRST, ((v0.c1 COLLATE NOCASE) BETWEEN (((v0.c2) NOT NULL)) AND (CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END));
SELECT * FROM vt0, v0 WHERE (((((((((vt0.c0 COLLATE RTRIM)AND(json_insert(v0.c1, '*誂9Kc', vt0.c0, vt0.c0, v0.c2))))AND('')))AND(v0.c2)))AND(v0.c1 COLLATE NOCASE)));
SELECT ALL * FROM vt0, v0 WHERE (((((((((vt0.c0 COLLATE RTRIM)AND(json_insert(v0.c1, '*誂9Kc', vt0.c0, vt0.c0, v0.c2))))AND('')))AND(v0.c2)))AND(v0.c1 COLLATE NOCASE))) ORDER BY v0.c3 ASC, ((v0.c1 COLLATE BINARY) NOT NULL) ASC  NULLS FIRST, ((v0.c1 COLLATE NOCASE) BETWEEN (((v0.c2) NOT NULL)) AND (CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END));
SELECT MAX(v0.c1) FROM v0, vt2 WHERE ((((CAST(vt2.c0 AS TEXT), ((((vt2.c0)OR(v0.c0)))OR(v0.c1)), (- (v0.c1)), ((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c2))))>((((v0.c2)IS NOT('-1417774340')), v0.c1, CAST('-386582235' AS NUMERIC), CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 ELSE vt2.c0 END)))) ORDER BY NULL COLLATE BINARY  NULLS LAST, NULLIF(x'', (- (795331170))) DESC;
SELECT DISTINCT MAX(v0.c1) FROM v0, vt2 WHERE ((((CAST(vt2.c0 AS TEXT), ((((vt2.c0)OR(v0.c0)))OR(v0.c1)), (- (v0.c1)), ((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c2))))>((((v0.c2)IS NOT('-1417774340')), v0.c1, CAST('-386582235' AS NUMERIC), CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 ELSE vt2.c0 END)))) ORDER BY NULL COLLATE BINARY  NULLS LAST, NULLIF(x'', (- (795331170))) DESC LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND((+ ((NOT (vt0.c0)))))));
SELECT ALL * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND((+ ((NOT (vt0.c0)))))));
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((vt2.c0, vt0.c0, v0.c2)) NOT BETWEEN ((CASE v0.c2  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN v0.c2 ELSE v0.c2 END, (+ (NULL)), 0.2680158354918778)) AND ((v0.c1 COLLATE RTRIM, ((vt0.c0)<(v0.c3)), CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN v0.c0 WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END)))) ORDER BY (+ (((vt2.c1) NOTNULL))) ASC  NULLS FIRST, '_HP骛--k}f' ASC;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((((vt2.c0, vt0.c0, v0.c2)) NOT BETWEEN ((CASE v0.c2  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN v0.c2 ELSE v0.c2 END, (+ (NULL)), 0.2680158354918778)) AND ((v0.c1 COLLATE RTRIM, ((vt0.c0)<(v0.c3)), CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN v0.c0 WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END))))AND(v0.c2))) ORDER BY (+ (((vt2.c1) NOTNULL))) ASC  NULLS FIRST, '_HP骛--k}f' ASC;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((vt2.c0, vt0.c0, v0.c2)) NOT BETWEEN ((CASE v0.c2  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN v0.c2 ELSE v0.c2 END, (+ (NULL)), 0.2680158354918778)) AND ((v0.c1 COLLATE RTRIM, ((vt0.c0)<(v0.c3)), CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN v0.c0 WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END)))) ORDER BY (+ (((vt2.c1) NOTNULL))) ASC  NULLS FIRST, '_HP骛--k}f' ASC;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((((vt2.c0, vt0.c0, v0.c2)) NOT BETWEEN ((CASE v0.c2  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN v0.c2 ELSE v0.c2 END, (+ (NULL)), 0.2680158354918778)) AND ((v0.c1 COLLATE RTRIM, ((vt0.c0)<(v0.c3)), CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN v0.c0 WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END))))AND(v0.c2))) ORDER BY (+ (((vt2.c1) NOTNULL))) ASC  NULLS FIRST, '_HP骛--k}f' ASC;
SELECT ALL MIN(v0.c2) FROM vt0, v0, vt2 WHERE ((v0.c3 IN (v0.c2, vt0.c0, vt0.c0)) COLLATE RTRIM);
SELECT ALL MIN(v0.c2) FROM vt0, v0, vt2 WHERE ((((v0.c3 IN (v0.c2, vt0.c0, vt0.c0)) COLLATE RTRIM)AND((~ (((((v0.c3)AND(v0.c1)))OR(v0.c1)))))));
SELECT ALL MIN(v0.c3) FROM vt0, v0 WHERE (CAST(((v0.c3) NOTNULL) AS INTEGER)) ORDER BY ((v0.c0 COLLATE NOCASE) BETWEEN (CASE v0.c3  WHEN v0.c3 THEN -1781612276 END) AND (((v0.c3)>>(v0.c3))))  NULLS FIRST;
SELECT DISTINCT MIN(v0.c3) FROM vt0, v0 WHERE (((CAST(((v0.c3) NOTNULL) AS INTEGER))AND((v0.c0 IN (UNLIKELY(vt0.c0), ((((((((v0.c0)AND(v0.c3)))OR(v0.c2)))AND(v0.c3)))OR(v0.c0))))))) ORDER BY CAST(v0.c2 COLLATE RTRIM AS INTEGER), ((json_valid(v0.c0)) ISNULL)  NULLS LAST;
SELECT * FROM v0, vt0 WHERE ((((NOT (v0.c3)))<=(vt0.c0 COLLATE RTRIM)));
SELECT ALL * FROM v0, vt0 WHERE ((((((NOT (v0.c3)))<=(vt0.c0 COLLATE RTRIM)))AND(CASE (NOT (vt0.c0))  WHEN v0.c1 COLLATE BINARY THEN CAST(vt0.c0 AS NUMERIC) END))) LIMIT 0x3 INTERSECT SELECT * FROM v0, vt0 WHERE (((LIKELY(v0.c1)) NOTNULL)) LIMIT 3;
SELECT * FROM v0, vt0 WHERE ((((NOT (v0.c3)))<=(vt0.c0 COLLATE RTRIM)));
SELECT ALL * FROM v0, vt0 WHERE ((((((NOT (v0.c3)))<=(vt0.c0 COLLATE RTRIM)))AND(CASE (NOT (vt0.c0))  WHEN v0.c1 COLLATE BINARY THEN CAST(vt0.c0 AS NUMERIC) END))) LIMIT 0x3 INTERSECT SELECT * FROM v0, vt0 WHERE (((LIKELY(v0.c1)) NOTNULL)) LIMIT 3;
SELECT * FROM v0, vt2, vt0 WHERE ((((- (vt2.c1)))<(((v0.c1)&(vt2.c1))))) ORDER BY '2126815385' DESC  NULLS FIRST, v0.c1  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((((- (vt2.c1)))<(((v0.c1)&(vt2.c1)))))AND((((('0.6696278070669723')<=(vt2.c1)))OR(x'49'))))) ORDER BY '2126815385' DESC  NULLS FIRST, v0.c1  NULLS FIRST LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((vt0.c0)LIKE(v0.c2)) COLLATE NOCASE) ORDER BY '2126815385' DESC  NULLS FIRST, v0.c1  NULLS FIRST LIMIT 2;
SELECT * FROM v0, vt2, vt0 WHERE ((((- (vt2.c1)))<(((v0.c1)&(vt2.c1))))) ORDER BY '2126815385' DESC  NULLS FIRST, v0.c1  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((((- (vt2.c1)))<(((v0.c1)&(vt2.c1)))))AND((((('0.6696278070669723')<=(vt2.c1)))OR(x'49'))))) ORDER BY '2126815385' DESC  NULLS FIRST, v0.c1  NULLS FIRST LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((vt0.c0)LIKE(v0.c2)) COLLATE NOCASE) ORDER BY '2126815385' DESC  NULLS FIRST, v0.c1  NULLS FIRST LIMIT 2;
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE ((vt2.c1 IN (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)))));
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE ((vt2.c1 IN (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2))))) ORDER BY CASE ((v0.c1) ISNULL)  WHEN vt2.c0 COLLATE BINARY THEN ((v0.c1)OR(v0.c2)) END LIMIT 1;
SELECT ALL * FROM vt0, vt2 WHERE ((vt2.c0 IN ()));
SELECT * FROM vt0, vt2 WHERE ((((vt2.c0 IN ()))AND(((((vt2.c0 IN (vt2.c0)), ((vt0.c0) NOT BETWEEN (vt2.c1) AND (NULL)), vt2.c1, ((vt2.c1) ISNULL), ((((((vt2.c1)AND(vt0.c0)))AND(vt0.c0)))AND(vt2.c0))))!=((CASE vt2.c0  WHEN '-405289896' THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END, (vt2.c0 IN (vt0.c0, vt2.c0)), (~ (vt2.c1)), vt2.c1 COLLATE RTRIM, (1.360437288E9 IN (vt0.c0, vt2.c1)))))))) ORDER BY (((((vt0.c0)>>(vt2.c0))))<((CASE vt2.c0  WHEN vt2.c0 THEN vt0.c0 END))) DESC, CASE 0.8621271405508802 COLLATE RTRIM  WHEN ((vt0.c0) NOT NULL) THEN vt2.c1 COLLATE RTRIM WHEN json_extract(0.4284493645082942, vt2.c0, vt2.c1) THEN (~ (vt0.c0)) WHEN COALESCE(vt2.c0, 0.2537671638123956, vt2.c1) THEN ((((((vt0.c0)AND(vt2.c0)))OR(vt0.c0)))OR(-635459419)) END  NULLS FIRST, (((((((((((vt0.c0)AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)) IN (vt2.c0 COLLATE RTRIM, ((((((((vt2.c0)AND('-1636851418')))AND(vt0.c0)))OR(vt2.c1)))AND(vt2.c1)))) DESC LIMIT 0x3;
SELECT ALL * FROM vt0, vt2 WHERE ((vt2.c0 IN ()));
SELECT * FROM vt0, vt2 WHERE ((((vt2.c0 IN ()))AND(((((vt2.c0 IN (vt2.c0)), ((vt0.c0) NOT BETWEEN (vt2.c1) AND (NULL)), vt2.c1, ((vt2.c1) ISNULL), ((((((vt2.c1)AND(vt0.c0)))AND(vt0.c0)))AND(vt2.c0))))!=((CASE vt2.c0  WHEN '-405289896' THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END, (vt2.c0 IN (vt0.c0, vt2.c0)), (~ (vt2.c1)), vt2.c1 COLLATE RTRIM, (1.360437288E9 IN (vt0.c0, vt2.c1)))))))) ORDER BY (((((vt0.c0)>>(vt2.c0))))<((CASE vt2.c0  WHEN vt2.c0 THEN vt0.c0 END))) DESC, CASE 0.8621271405508802 COLLATE RTRIM  WHEN ((vt0.c0) NOT NULL) THEN vt2.c1 COLLATE RTRIM WHEN json_extract(0.4284493645082942, vt2.c0, vt2.c1) THEN (~ (vt0.c0)) WHEN COALESCE(vt2.c0, 0.2537671638123956, vt2.c1) THEN ((((((vt0.c0)AND(vt2.c0)))OR(vt0.c0)))OR(-635459419)) END  NULLS FIRST, (((((((((((vt0.c0)AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)) IN (vt2.c0 COLLATE RTRIM, ((((((((vt2.c0)AND('-1636851418')))AND(vt0.c0)))OR(vt2.c1)))AND(vt2.c1)))) DESC LIMIT 0x3;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0)))>=(((vt0.c0)>=(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0)))>(((vt0.c0)>(vt0.c0))))) LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0)))>=(((vt0.c0)>=(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0)))>(((vt0.c0)>(vt0.c0))))) LIMIT 0X1;
SELECT ALL * FROM vt2 INNER JOIN v0 ON NULL NATURAL JOIN vt0 WHERE (((((v0.c1) NOT BETWEEN (v0.c0) AND (vt2.c1))) NOT BETWEEN ((vt2.c1 IN ())) AND (((((((((vt0.c0)OR(v0.c2)))AND(vt0.c0)))AND(vt0.c0)))AND(vt2.c1))))) ORDER BY ((-1541731102 IN ()) IN (v0.c3 COLLATE BINARY))  NULLS LAST;
SELECT * FROM vt2 INNER JOIN v0 ON NULL NATURAL JOIN vt0 WHERE (((((v0.c1) NOT BETWEEN (v0.c0) AND (vt2.c1))) NOT BETWEEN ((vt2.c1 IN ())) AND (((((((((vt0.c0)OR(v0.c2)))AND(vt0.c0)))AND(vt0.c0)))AND(vt2.c1))))) ORDER BY ((0xffffffffa41b0ce2 IN ()) IN (v0.c3 COLLATE BINARY))  NULLS LAST LIMIT 0X0 INTERSECT SELECT * FROM vt2 NOT INDEXED INNER JOIN v0 ON NULL NATURAL JOIN vt0 WHERE ('䕱') ORDER BY ((0Xffffffffa41b0ce2 IN ()) IN (v0.c3 COLLATE BINARY))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt2 INNER JOIN v0 ON NULL NATURAL JOIN vt0 WHERE (((((v0.c1) NOT BETWEEN (v0.c0) AND (vt2.c1))) NOT BETWEEN ((vt2.c1 IN ())) AND (((((((((vt0.c0)OR(v0.c2)))AND(vt0.c0)))AND(vt0.c0)))AND(vt2.c1))))) ORDER BY ((-1541731102 IN ()) IN (v0.c3 COLLATE BINARY))  NULLS LAST;
SELECT * FROM vt2 INNER JOIN v0 ON NULL NATURAL JOIN vt0 WHERE (((((v0.c1) NOT BETWEEN (v0.c0) AND (vt2.c1))) NOT BETWEEN ((vt2.c1 IN ())) AND (((((((((vt0.c0)OR(v0.c2)))AND(vt0.c0)))AND(vt0.c0)))AND(vt2.c1))))) ORDER BY ((0xffffffffa41b0ce2 IN ()) IN (v0.c3 COLLATE BINARY))  NULLS LAST LIMIT 0X0 INTERSECT SELECT * FROM vt2 NOT INDEXED INNER JOIN v0 ON NULL NATURAL JOIN vt0 WHERE ('䕱') ORDER BY ((0Xffffffffa41b0ce2 IN ()) IN (v0.c3 COLLATE BINARY))  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE ('n%Uw') ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN x'da' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) BETWEEN (0x7842ae4b COLLATE NOCASE) AND (vt0.c0 COLLATE RTRIM)) DESC, ('}m3	U|*' COLLATE RTRIM IN ((('') BETWEEN (vt0.c0) AND (vt0.c0))))  NULLS LAST, CAST(x'' AS TEXT);
SELECT DISTINCT * FROM vt0 WHERE ('n%Uw') ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN x'da' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) BETWEEN (0x7842ae4b COLLATE NOCASE) AND (vt0.c0 COLLATE RTRIM)) DESC, ('}m3	U|*' COLLATE RTRIM IN ((('') BETWEEN (vt0.c0) AND (vt0.c0))))  NULLS LAST, CAST(x'' AS TEXT) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(((vt0.c0)<>(vt0.c0)) AS TEXT)) ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN x'da' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) BETWEEN (2017635915 COLLATE NOCASE) AND (vt0.c0 COLLATE RTRIM)) DESC, ('}m3	U|*' COLLATE RTRIM IN ((('') BETWEEN (vt0.c0) AND (vt0.c0))))  NULLS LAST, CAST(x'' AS TEXT) LIMIT 0;
SELECT * FROM vt0 WHERE ('n%Uw') ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN x'da' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) BETWEEN (0x7842ae4b COLLATE NOCASE) AND (vt0.c0 COLLATE RTRIM)) DESC, ('}m3	U|*' COLLATE RTRIM IN ((('') BETWEEN (vt0.c0) AND (vt0.c0))))  NULLS LAST, CAST(x'' AS TEXT);
SELECT DISTINCT * FROM vt0 WHERE ('n%Uw') ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN x'da' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) BETWEEN (0x7842ae4b COLLATE NOCASE) AND (vt0.c0 COLLATE RTRIM)) DESC, ('}m3	U|*' COLLATE RTRIM IN ((('') BETWEEN (vt0.c0) AND (vt0.c0))))  NULLS LAST, CAST(x'' AS TEXT) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(((vt0.c0)<>(vt0.c0)) AS TEXT)) ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN x'da' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) BETWEEN (2017635915 COLLATE NOCASE) AND (vt0.c0 COLLATE RTRIM)) DESC, ('}m3	U|*' COLLATE RTRIM IN ((('') BETWEEN (vt0.c0) AND (vt0.c0))))  NULLS LAST, CAST(x'' AS TEXT) LIMIT 0;
SELECT MAX(vt2.c1) FROM vt0, vt2 WHERE (((((((((vt0.c0) BETWEEN (vt2.c1) AND (vt0.c0)))OR(((vt2.c1) NOTNULL))))AND(((vt0.c0)==(vt2.c1)))))OR((vt2.c1 IN (vt2.c0, vt0.c0)))));
SELECT ALL MAX(vt2.c1) FROM vt0, vt2 WHERE (((((((((vt0.c0) BETWEEN (vt2.c1) AND (vt0.c0)))OR(((vt2.c1) NOTNULL))))AND(((vt0.c0)==(vt2.c1)))))OR((vt2.c1 IN (vt2.c0, vt0.c0))))) LIMIT 0x0 INTERSECT SELECT MAX(vt2.c1) FROM vt0, vt2 WHERE (((CAST(vt2.c0 AS REAL))||(CAST(vt2.c0 AS INTEGER)))) LIMIT 0X0;
SELECT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (TYPEOF((((vt0.c0, v0.c0, x'')) BETWEEN ((vt2.c0, vt2.c1, '1165436722')) AND ((v0.c1, v0.c1, 0Xffffffff9909a17f))))) ORDER BY CASE WHEN ((vt0.c0)<<(v0.c3)) THEN ((v0.c1)==(v0.c2)) ELSE ((v0.c1)<=(vt2.c1)) END ASC, CAST((~ (v0.c3)) AS INTEGER)  NULLS LAST;
SELECT DISTINCT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (((TYPEOF((((vt0.c0, v0.c0, x'')) BETWEEN ((vt2.c0, vt2.c1, '1165436722')) AND ((v0.c1, v0.c1, -1727422081)))))AND(CAST(((v0.c2)&(v0.c3)) AS REAL)))) ORDER BY vt2.c0 DESC  NULLS LAST, 'v䙊q}⁎I^Q'  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (MAX(((v0.c2)==(vt2.c0)), '덎', ((vt0.c0) IS TRUE))) ORDER BY vt2.c0 DESC  NULLS LAST, 'v䙊q}⁎I^Q'  NULLS LAST LIMIT 0x0;
SELECT ALL MAX(v0.c1) FROM vt2, v0, vt0 WHERE (((((((((vt2.c0) IS FALSE))AND(((((((((((((v0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(v0.c0)))AND(v0.c3)))OR(0Xffffffffc7e8d8c9)))OR('382198455')))))OR((+ (vt0.c0)))))AND(((v0.c0)|(v0.c2)))));
SELECT DISTINCT MAX(v0.c1) FROM vt2, v0, vt0 WHERE (((((((((((vt2.c0) IS FALSE))AND(((((((((((((v0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(v0.c0)))AND(v0.c3)))OR(-941041463)))OR('382198455')))))OR((+ (vt0.c0)))))AND(((v0.c0)|(v0.c2)))))AND(CASE WHEN (v0.c0 IN ('<x潎+7+a(m')) THEN (((v0.c0, v0.c0, v0.c3, v0.c3)) BETWEEN ((vt0.c0, v0.c0, vt2.c0, vt0.c0)) AND ((0.39554395251267427, vt0.c0, v0.c0, '62518524'))) ELSE ((v0.c1)IS NOT(vt2.c1)) END))) INTERSECT SELECT DISTINCT MAX(v0.c1) FROM vt2, v0, vt0 WHERE (((vt2.c1 COLLATE BINARY)<<(vt0.c0)));
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((((((vt2.c1) NOT BETWEEN (v0.c1) AND (vt2.c0)))OR(((v0.c0) BETWEEN (v0.c2) AND (v0.c2)))))OR(((vt0.c0) BETWEEN (v0.c0) AND (vt2.c0)))))AND(LIKELY(vt2.c0))))AND(((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)))))OR(((((vt2.c0)OR(v0.c3)))AND(x'40')))))OR((((0.6948650957786989)) BETWEEN ((vt2.c1)) AND ((x'')))))) ORDER BY 0.9870283492507278 DESC  NULLS FIRST, (((NOT (v0.c1))) IS FALSE) DESC  NULLS FIRST, (+ (CAST(vt2.c1 AS NUMERIC))) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((((((((vt2.c1) NOT BETWEEN (v0.c1) AND (vt2.c0)))OR(((v0.c0) BETWEEN (v0.c2) AND (v0.c2)))))OR(((vt0.c0) BETWEEN (v0.c0) AND (vt2.c0)))))AND(LIKELY(vt2.c0))))AND(((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)))))OR(((((vt2.c0)OR(v0.c3)))AND(x'40')))))OR((((0.6948650957786989)) BETWEEN ((vt2.c1)) AND ((x''))))))AND((('-706876065')LIKE(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN 1.7976931348623157E308 THEN vt2.c0 ELSE v0.c0 END))))) ORDER BY 0.9870283492507278 DESC  NULLS FIRST, (((NOT (v0.c1))) IS FALSE) DESC  NULLS FIRST, (+ (CAST(vt2.c1 AS NUMERIC))) ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (CAST('-1066459166' AS REAL)) ORDER BY 0.9870283492507278 DESC  NULLS FIRST, (((NOT (v0.c1))) IS FALSE) DESC  NULLS FIRST, (+ (CAST(vt2.c1 AS NUMERIC))) ASC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((((((vt2.c1) NOT BETWEEN (v0.c1) AND (vt2.c0)))OR(((v0.c0) BETWEEN (v0.c2) AND (v0.c2)))))OR(((vt0.c0) BETWEEN (v0.c0) AND (vt2.c0)))))AND(LIKELY(vt2.c0))))AND(((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)))))OR(((((vt2.c0)OR(v0.c3)))AND(x'40')))))OR((((0.6948650957786989)) BETWEEN ((vt2.c1)) AND ((x'')))))) ORDER BY 0.9870283492507278 DESC  NULLS FIRST, (((NOT (v0.c1))) IS FALSE) DESC  NULLS FIRST, (+ (CAST(vt2.c1 AS NUMERIC))) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((((((((vt2.c1) NOT BETWEEN (v0.c1) AND (vt2.c0)))OR(((v0.c0) BETWEEN (v0.c2) AND (v0.c2)))))OR(((vt0.c0) BETWEEN (v0.c0) AND (vt2.c0)))))AND(LIKELY(vt2.c0))))AND(((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)))))OR(((((vt2.c0)OR(v0.c3)))AND(x'40')))))OR((((0.6948650957786989)) BETWEEN ((vt2.c1)) AND ((x''))))))AND((('-706876065')LIKE(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN 1.7976931348623157E308 THEN vt2.c0 ELSE v0.c0 END))))) ORDER BY 0.9870283492507278 DESC  NULLS FIRST, (((NOT (v0.c1))) IS FALSE) DESC  NULLS FIRST, (+ (CAST(vt2.c1 AS NUMERIC))) ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (CAST('-1066459166' AS REAL)) ORDER BY 0.9870283492507278 DESC  NULLS FIRST, (((NOT (v0.c1))) IS FALSE) DESC  NULLS FIRST, (+ (CAST(vt2.c1 AS NUMERIC))) ASC  NULLS FIRST LIMIT 2;
SELECT * FROM vt2, vt0 WHERE (((vt2.c0) BETWEEN (x'') AND (((vt2.c0) NOT NULL)))) ORDER BY ((((((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)) COLLATE NOCASE  NULLS FIRST, ((((vt2.c0)*(x'94'))) BETWEEN (((vt2.c1) ISNULL)) AND (NULL))  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt2.c0) BETWEEN (x'') AND (((vt2.c0) NOT NULL)))) ORDER BY ((((((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)) COLLATE NOCASE  NULLS FIRST, ((((vt2.c0)*(x'94'))) BETWEEN (((vt2.c1) ISNULL)) AND (NULL))  NULLS FIRST LIMIT 0;
SELECT * FROM vt2, vt0 WHERE (((vt2.c0) BETWEEN (x'') AND (((vt2.c0) NOT NULL)))) ORDER BY ((((((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)) COLLATE NOCASE  NULLS FIRST, ((((vt2.c0)*(x'94'))) BETWEEN (((vt2.c1) ISNULL)) AND (NULL))  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt2.c0) BETWEEN (x'') AND (((vt2.c0) NOT NULL)))) ORDER BY ((((((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)) COLLATE NOCASE  NULLS FIRST, ((((vt2.c0)*(x'94'))) BETWEEN (((vt2.c1) ISNULL)) AND (NULL))  NULLS FIRST LIMIT 0;
SELECT ALL MIN(v0.c2) FROM v0 INNER JOIN vt2 ON ((((((((((vt2.c0 COLLATE RTRIM)OR(((vt2.c0) NOT BETWEEN (v0.c0) AND ('-572972978')))))OR(CASE WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c3 END)))AND(((vt2.c0)+(vt2.c0)))))AND(((v0.c1) NOT BETWEEN (vt2.c0) AND (5.76918381E8)))))AND(((0.13026882025249575) IS FALSE))) WHERE ((((vt2.c1, v0.c2, v0.c0, v0.c3)) BETWEEN ((CASE WHEN v0.c0 THEN v0.c2 END, (NOT (x'6b')), x'', (- (vt2.c1)))) AND ((v0.c0, (NOT (v0.c3)), ((((((((((vt2.c0)AND(vt2.c1)))OR(v0.c0)))OR(v0.c1)))AND(v0.c3)))AND(v0.c2)), ((((((((v0.c1)AND(vt2.c0)))OR(v0.c1)))OR(v0.c2)))AND(x''))))));
SELECT ALL MIN(v0.c2) FROM v0 INNER JOIN vt2 ON ((((((((((vt2.c0 COLLATE RTRIM)OR(((vt2.c0) NOT BETWEEN (v0.c0) AND ('-572972978')))))OR(CASE WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c3 END)))AND(((vt2.c0)+(vt2.c0)))))AND(((v0.c1) NOT BETWEEN (vt2.c0) AND (5.76918381E8)))))AND(((0.13026882025249575) IS FALSE))) WHERE ((((vt2.c1, v0.c2, v0.c0, v0.c3)) BETWEEN ((CASE WHEN v0.c0 THEN v0.c2 END, (NOT (x'6b')), x'', (- (vt2.c1)))) AND ((v0.c0, (NOT (v0.c3)), ((((((((((vt2.c0)AND(vt2.c1)))OR(v0.c0)))OR(v0.c1)))AND(v0.c3)))AND(v0.c2)), ((((((((v0.c1)AND(vt2.c0)))OR(v0.c1)))OR(v0.c2)))AND(x'')))))) ORDER BY (((v0.c3 IN (vt2.c0, v0.c3)))<=(((v0.c3)OR(v0.c3)))) DESC, CASE WHEN 0.10426710159537556 THEN CAST(vt2.c0 AS REAL) WHEN (x'' IN (v0.c1)) THEN LTRIM(v0.c1) WHEN ((vt2.c1)&(v0.c1)) THEN ((vt2.c0)=(x'd8')) ELSE (+ (v0.c1)) END  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((vt0.c0 IN (((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))))) ORDER BY ((((+ (vt0.c0)), ((vt0.c0) IS TRUE), vt0.c0 COLLATE RTRIM))==((CASE vt0.c0  WHEN 0.5890929013973776 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, ((vt0.c0) ISNULL), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))))), ((((vt0.c0 IN (vt0.c0)), (vt0.c0 IN ())))=((CASE vt0.c0  WHEN x'62' THEN vt0.c0 ELSE vt0.c0 END, CASE WHEN vt0.c0 THEN vt0.c0 END))) ASC  NULLS LAST, '5m' COLLATE NOCASE DESC  NULLS LAST, ((vt0.c0) IS FALSE) COLLATE RTRIM  NULLS LAST;
SELECT * FROM vt0 WHERE ((vt0.c0 IN (((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))))) ORDER BY ((((+ (vt0.c0)), ((vt0.c0) IS TRUE), vt0.c0 COLLATE RTRIM))==((CASE vt0.c0  WHEN 0.5890929013973776 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, ((vt0.c0) ISNULL), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))))), ((((vt0.c0 IN (vt0.c0)), (vt0.c0 IN ())))=((CASE vt0.c0  WHEN x'62' THEN vt0.c0 ELSE vt0.c0 END, CASE WHEN vt0.c0 THEN vt0.c0 END))) ASC  NULLS LAST, '5m' COLLATE NOCASE DESC  NULLS LAST, ((vt0.c0) IS FALSE) COLLATE RTRIM  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((vt0.c0 IN (((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))))) ORDER BY ((((+ (vt0.c0)), ((vt0.c0) IS TRUE), vt0.c0 COLLATE RTRIM))==((CASE vt0.c0  WHEN 0.5890929013973776 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, ((vt0.c0) ISNULL), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))))), ((((vt0.c0 IN (vt0.c0)), (vt0.c0 IN ())))=((CASE vt0.c0  WHEN x'62' THEN vt0.c0 ELSE vt0.c0 END, CASE WHEN vt0.c0 THEN vt0.c0 END))) ASC  NULLS LAST, '5m' COLLATE NOCASE DESC  NULLS LAST, ((vt0.c0) IS FALSE) COLLATE RTRIM  NULLS LAST;
SELECT * FROM vt0 WHERE ((vt0.c0 IN (((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))))) ORDER BY ((((+ (vt0.c0)), ((vt0.c0) IS TRUE), vt0.c0 COLLATE RTRIM))==((CASE vt0.c0  WHEN 0.5890929013973776 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, ((vt0.c0) ISNULL), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))))), ((((vt0.c0 IN (vt0.c0)), (vt0.c0 IN ())))=((CASE vt0.c0  WHEN x'62' THEN vt0.c0 ELSE vt0.c0 END, CASE WHEN vt0.c0 THEN vt0.c0 END))) ASC  NULLS LAST, '5m' COLLATE NOCASE DESC  NULLS LAST, ((vt0.c0) IS FALSE) COLLATE RTRIM  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON (((((((~ (v0.c0)))AND(((v0.c3)=(v0.c0)))))OR(LENGTH(v0.c0))))AND(((v0.c0)AND(x'59')))) WHERE ((((vt2.c0, v0.c2, v0.c0)) BETWEEN ((CAST(v0.c0 AS NUMERIC), ((v0.c1)>('M')), HEX(vt2.c0))) AND ((((((x'')OR(vt0.c0)))AND(v0.c3)), (vt0.c0 IN ()), (vt2.c1 IN ()))))) ORDER BY CASE 0.7239271194995318  WHEN 0.389090469140025 THEN ((((((((((((v0.c0)AND(v0.c0)))OR(v0.c3)))AND(v0.c2)))AND(vt2.c1)))OR(v0.c0)))OR(vt2.c1)) WHEN x'335a' COLLATE BINARY THEN (v0.c3 IN (vt2.c1)) ELSE ((((((vt2.c0)OR(v0.c3)))AND(v0.c2)))AND(v0.c3)) END  NULLS FIRST;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON (((((((~ (v0.c0)))AND(((v0.c3)==(v0.c0)))))OR(LENGTH(v0.c0))))AND(((v0.c0)AND(x'59')))) WHERE ((((((vt2.c0, v0.c2, v0.c0)) BETWEEN ((CAST(v0.c0 AS NUMERIC), ((v0.c1)>('M')), HEX(vt2.c0))) AND ((((((x'')OR(vt0.c0)))AND(v0.c3)), (vt0.c0 IN ()), (vt2.c1 IN ())))))AND(CAST((v0.c0 IN ()) AS TEXT)))) ORDER BY COALESCE(((((((((v0.c0)AND(v0.c3)))OR(v0.c2)))OR(vt2.c1)))AND(v0.c3)), CASE WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE v0.c3 END, CASE WHEN v0.c1 THEN x'' END) ASC, ((((((SQLITE_SOURCE_ID())AND(CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN vt0.c0 END)))AND(((vt0.c0)%(vt0.c0)))))OR(((vt0.c0) NOT BETWEEN (v0.c0) AND (vt2.c1)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON (((((((~ (v0.c0)))AND(((v0.c3)=(v0.c0)))))OR(LENGTH(v0.c0))))AND(((v0.c0)AND(x'59')))) WHERE ((((vt2.c0, v0.c2, v0.c0)) BETWEEN ((CAST(v0.c0 AS NUMERIC), ((v0.c1)>('M')), HEX(vt2.c0))) AND ((((((x'')OR(vt0.c0)))AND(v0.c3)), (vt0.c0 IN ()), (vt2.c1 IN ()))))) ORDER BY CASE 0.7239271194995318  WHEN 0.389090469140025 THEN ((((((((((((v0.c0)AND(v0.c0)))OR(v0.c3)))AND(v0.c2)))AND(vt2.c1)))OR(v0.c0)))OR(vt2.c1)) WHEN x'335a' COLLATE BINARY THEN (v0.c3 IN (vt2.c1)) ELSE ((((((vt2.c0)OR(v0.c3)))AND(v0.c2)))AND(v0.c3)) END  NULLS FIRST;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON (((((((~ (v0.c0)))AND(((v0.c3)==(v0.c0)))))OR(LENGTH(v0.c0))))AND(((v0.c0)AND(x'59')))) WHERE ((((((vt2.c0, v0.c2, v0.c0)) BETWEEN ((CAST(v0.c0 AS NUMERIC), ((v0.c1)>('M')), HEX(vt2.c0))) AND ((((((x'')OR(vt0.c0)))AND(v0.c3)), (vt0.c0 IN ()), (vt2.c1 IN ())))))AND(CAST((v0.c0 IN ()) AS TEXT)))) ORDER BY COALESCE(((((((((v0.c0)AND(v0.c3)))OR(v0.c2)))OR(vt2.c1)))AND(v0.c3)), CASE WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE v0.c3 END, CASE WHEN v0.c1 THEN x'' END) ASC, ((((((SQLITE_SOURCE_ID())AND(CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN vt0.c0 END)))AND(((vt0.c0)%(vt0.c0)))))OR(((vt0.c0) NOT BETWEEN (v0.c0) AND (vt2.c1)))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE (vt2.c1 COLLATE BINARY) ORDER BY ((CASE WHEN v0.c1 THEN vt0.c0 ELSE '138216076' END) NOTNULL) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE (((vt2.c1 COLLATE BINARY)AND((vt0.c0 IN (((NULL)-(vt2.c1))))))) ORDER BY ((CASE WHEN v0.c1 THEN vt0.c0 ELSE '138216076' END) NOTNULL) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM v0 WHERE (v0.c0) ORDER BY (v0.c3 COLLATE BINARY IN (v0.c2 COLLATE RTRIM)) DESC, ((CAST(v0.c1 AS NUMERIC))|((+ (-190372589)))) ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (v0.c0) ORDER BY (v0.c3 COLLATE BINARY IN (v0.c2 COLLATE RTRIM)) DESC, ((CAST(v0.c1 AS NUMERIC))|((+ (-190372589)))) ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM v0 WHERE ((((v0.c1)) NOT BETWEEN ((((v0.c3)>(v0.c0)))) AND ((((((((((((((v0.c2)OR(v0.c1)))OR(v0.c3)))AND(NULL)))OR(x'')))AND(v0.c1)))OR(v0.c3)))))) ORDER BY (v0.c3 COLLATE BINARY IN (v0.c2 COLLATE RTRIM)) DESC, ((CAST(v0.c1 AS NUMERIC))|((+ (-190372589)))) ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM v0 WHERE (v0.c0) ORDER BY (v0.c3 COLLATE BINARY IN (v0.c2 COLLATE RTRIM)) DESC, ((CAST(v0.c1 AS NUMERIC))|((+ (-190372589)))) ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (v0.c0) ORDER BY (v0.c3 COLLATE BINARY IN (v0.c2 COLLATE RTRIM)) DESC, ((CAST(v0.c1 AS NUMERIC))|((+ (-190372589)))) ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT * FROM v0 WHERE ((((v0.c1)) NOT BETWEEN ((((v0.c3)>(v0.c0)))) AND ((((((((((((((v0.c2)OR(v0.c1)))OR(v0.c3)))AND(NULL)))OR(x'')))AND(v0.c1)))OR(v0.c3)))))) ORDER BY (v0.c3 COLLATE BINARY IN (v0.c2 COLLATE RTRIM)) DESC, ((CAST(v0.c1 AS NUMERIC))|((+ (-190372589)))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE (((((((((((((vt2.c1)OR((((vt2.c0, vt2.c1)) BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1))))))AND(((vt2.c0)IS NOT(vt2.c1)))))OR(((vt2.c0) ISNULL))))OR(COALESCE(vt2.c1, vt2.c1, vt2.c0))))OR('409662910')))OR(((vt2.c1)LIKE(vt2.c1)))));
SELECT DISTINCT * FROM vt2 WHERE (((((((((((((((vt2.c1)OR((((vt2.c0, vt2.c1)) BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1))))))AND(((vt2.c0)IS NOT(vt2.c1)))))OR(((vt2.c0) ISNULL))))OR(COALESCE(vt2.c1, vt2.c1, vt2.c0))))OR('409662910')))OR(((vt2.c1)LIKE(vt2.c1)))))AND(CAST(vt2.c1 AS TEXT) COLLATE NOCASE))) ORDER BY ((((vt2.c1)LIKE(vt2.c0))) IS FALSE)  NULLS LAST, (- (CASE WHEN vt2.c0 THEN vt2.c0 END)) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))<<(((vt2.c0)/(vt2.c1))))) ORDER BY ((((vt2.c1)LIKE(vt2.c0))) IS FALSE)  NULLS LAST, (- (CASE WHEN vt2.c0 THEN vt2.c0 END)) DESC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (((((((((((((vt2.c1)OR((((vt2.c0, vt2.c1)) BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1))))))AND(((vt2.c0)IS NOT(vt2.c1)))))OR(((vt2.c0) ISNULL))))OR(COALESCE(vt2.c1, vt2.c1, vt2.c0))))OR('409662910')))OR(((vt2.c1)LIKE(vt2.c1)))));
SELECT DISTINCT * FROM vt2 WHERE (((((((((((((((vt2.c1)OR((((vt2.c0, vt2.c1)) BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1))))))AND(((vt2.c0)IS NOT(vt2.c1)))))OR(((vt2.c0) ISNULL))))OR(COALESCE(vt2.c1, vt2.c1, vt2.c0))))OR('409662910')))OR(((vt2.c1)LIKE(vt2.c1)))))AND(CAST(vt2.c1 AS TEXT) COLLATE NOCASE))) ORDER BY ((((vt2.c1)LIKE(vt2.c0))) IS FALSE)  NULLS LAST, (- (CASE WHEN vt2.c0 THEN vt2.c0 END)) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))<<(((vt2.c0)/(vt2.c1))))) ORDER BY ((((vt2.c1)LIKE(vt2.c0))) IS FALSE)  NULLS LAST, (- (CASE WHEN vt2.c0 THEN vt2.c0 END)) DESC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (((('798077859')||(vt2.c0)) IN (vt2.c1 COLLATE NOCASE)));
SELECT ALL * FROM vt2 WHERE (((((('798077859')||(vt2.c0)) IN (vt2.c1 COLLATE NOCASE)))AND(CASE (((vt2.c1, vt2.c1)) BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c0)))  WHEN ((vt2.c1) BETWEEN ('571423179') AND (vt2.c0)) THEN (- (vt2.c0)) ELSE (((vt2.c0, 0.9910715131742793)) NOT BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c0))) END))) ORDER BY CASE (+ (vt2.c0))  WHEN ((vt2.c0)+(vt2.c1)) THEN CAST(vt2.c1 AS REAL) WHEN (((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, x'39')) AND ((vt2.c0, vt2.c0))) THEN ((vt2.c1)<(vt2.c0)) END  NULLS LAST, (- (vt2.c0))  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt2 WHERE (((((vt2.c1) NOT BETWEEN (x'777e') AND (vt2.c0)))AND((~ (vt2.c1))))) ORDER BY CASE (+ (vt2.c0))  WHEN ((vt2.c0)+(vt2.c1)) THEN CAST(vt2.c1 AS REAL) WHEN (((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, x'39')) AND ((vt2.c0, vt2.c0))) THEN ((vt2.c1)<(vt2.c0)) END  NULLS LAST, (- (vt2.c0))  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE (((('798077859')||(vt2.c0)) IN (vt2.c1 COLLATE NOCASE)));
SELECT ALL * FROM vt2 WHERE (((((('798077859')||(vt2.c0)) IN (vt2.c1 COLLATE NOCASE)))AND(CASE (((vt2.c1, vt2.c1)) BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c0)))  WHEN ((vt2.c1) BETWEEN ('571423179') AND (vt2.c0)) THEN (- (vt2.c0)) ELSE (((vt2.c0, 0.9910715131742793)) NOT BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c0))) END))) ORDER BY CASE (+ (vt2.c0))  WHEN ((vt2.c0)+(vt2.c1)) THEN CAST(vt2.c1 AS REAL) WHEN (((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, x'39')) AND ((vt2.c0, vt2.c0))) THEN ((vt2.c1)<(vt2.c0)) END  NULLS LAST, (- (vt2.c0))  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt2 WHERE (((((vt2.c1) NOT BETWEEN (x'777e') AND (vt2.c0)))AND((~ (vt2.c1))))) ORDER BY CASE (+ (vt2.c0))  WHEN ((vt2.c0)+(vt2.c1)) THEN CAST(vt2.c1 AS REAL) WHEN (((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, x'39')) AND ((vt2.c0, vt2.c0))) THEN ((vt2.c1)<(vt2.c0)) END  NULLS LAST, (- (vt2.c0))  NULLS LAST LIMIT 0X0;
SELECT * FROM v0, vt2, vt0 WHERE (((((v0.c1, 'o鉶MX㦛 Y5F', v0.c1)) BETWEEN ((vt2.c0, 477587929, v0.c2)) AND ((vt2.c1, vt2.c0, vt2.c0))) IN (((((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(v0.c2))))) ORDER BY (((((((('')OR(vt2.c1)))OR(v0.c2)))AND(vt2.c1)))>(NULL))  NULLS FIRST, (~ (v0.c3))  NULLS LAST, (+ ((+ (vt2.c0))))  NULLS LAST;
SELECT * FROM v0, vt2, vt0 WHERE (((((v0.c1, 'o鉶MX㦛 Y5F', v0.c1)) BETWEEN ((vt2.c0, 0x1c7769d9, v0.c2)) AND ((vt2.c1, vt2.c0, vt2.c0))) IN (((((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(v0.c2))))) ORDER BY ((v0.c0 COLLATE BINARY)=(v0.c3)), vt0.c0, ((((v0.c0)>=(vt0.c0)))&((((vt2.c1, v0.c0)) BETWEEN ((vt2.c0, v0.c2)) AND ((v0.c0, v0.c2)))));
SELECT * FROM v0, vt2, vt0 WHERE (((((v0.c1, 'o鉶MX㦛 Y5F', v0.c1)) BETWEEN ((vt2.c0, 477587929, v0.c2)) AND ((vt2.c1, vt2.c0, vt2.c0))) IN (((((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(v0.c2))))) ORDER BY (((((((('')OR(vt2.c1)))OR(v0.c2)))AND(vt2.c1)))>(NULL))  NULLS FIRST, (~ (v0.c3))  NULLS LAST, (+ ((+ (vt2.c0))))  NULLS LAST;
SELECT * FROM v0, vt2, vt0 WHERE (((((v0.c1, 'o鉶MX㦛 Y5F', v0.c1)) BETWEEN ((vt2.c0, 0x1c7769d9, v0.c2)) AND ((vt2.c1, vt2.c0, vt2.c0))) IN (((((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)))AND(v0.c2))))) ORDER BY ((v0.c0 COLLATE BINARY)=(v0.c3)), vt0.c0, ((((v0.c0)>=(vt0.c0)))&((((vt2.c1, v0.c0)) BETWEEN ((vt2.c0, v0.c2)) AND ((v0.c0, v0.c2)))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0))) NOT NULL)) ORDER BY ((vt0.c0)&(vt0.c0)) COLLATE BINARY DESC  NULLS LAST, CASE WHEN ((vt0.c0) IS FALSE) THEN vt0.c0 END ASC  NULLS FIRST, (((vt0.c0 IN (vt0.c0)))OR(0.5249321787965887));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((vt0.c0)AND(vt0.c0))) NOT NULL))AND(IFNULL(((vt0.c0)LIKE('-1129815510')), ((vt0.c0)|(vt0.c0)))))) ORDER BY ((vt0.c0)&(vt0.c0)) COLLATE BINARY DESC  NULLS LAST, CASE WHEN ((vt0.c0) IS FALSE) THEN vt0.c0 END ASC  NULLS FIRST, (((vt0.c0 IN (vt0.c0)))OR(0.5249321787965887)) LIMIT 0;
SELECT ALL * FROM vt0, v0 WHERE (ABS(DISTINCT ((vt0.c0) ISNULL)));
SELECT * FROM vt0, v0 WHERE (((ABS(DISTINCT ((vt0.c0) ISNULL)))AND(((((NOT ('296780399'))))==((CASE WHEN vt0.c0 THEN v0.c1 WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END))))));
SELECT ALL * FROM vt0, v0 WHERE (ABS(DISTINCT ((vt0.c0) ISNULL)));
SELECT * FROM vt0, v0 WHERE (((ABS(DISTINCT ((vt0.c0) ISNULL)))AND(((((NOT ('296780399'))))==((CASE WHEN vt0.c0 THEN v0.c1 WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END))))));
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE ((((((vt2.c0, vt2.c1, vt2.c0, vt2.c0))<((vt2.c0, vt2.c0, vt2.c1, vt2.c0))))<(CAST(vt2.c1 AS INTEGER))));
SELECT MAX(vt2.c0) FROM vt2 WHERE ((((((vt2.c0, vt2.c1, vt2.c0, vt2.c0))<((vt2.c0, vt2.c0, vt2.c1, vt2.c0))))<(CAST(vt2.c1 AS INTEGER)))) ORDER BY (((vt2.c0 IN (vt2.c1)))&(CASE WHEN vt2.c1 THEN vt2.c1 END)), 0.018492536426700124 ASC  NULLS LAST, ((CASE WHEN x'c669bb' THEN vt2.c1 ELSE vt2.c0 END)/(((vt2.c0) NOTNULL)));
SELECT * FROM v0, vt2 WHERE (v0.c1);
SELECT ALL * FROM v0, vt2 WHERE (((v0.c1)AND(((0x838dee2) NOT NULL)))) INTERSECT SELECT * FROM v0, vt2 WHERE ('-747149875');
SELECT * FROM v0, vt2 WHERE (v0.c1);
SELECT ALL * FROM v0, vt2 WHERE (((v0.c1)AND(((0x838dee2) NOT NULL)))) INTERSECT SELECT * FROM v0, vt2 WHERE ('-747149875');
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((LIKELIHOOD(vt2.c0, vt2.c1)) IS FALSE) WHERE (COALESCE(((vt2.c0)OR(vt2.c1)), ((((vt2.c0)AND(vt0.c0)))OR('1706507436')), 157577797));
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON ((LIKELIHOOD(vt2.c0, vt2.c1)) IS FALSE) WHERE (COALESCE(((vt2.c0)OR(vt2.c1)), ((((vt2.c0)AND(vt0.c0)))OR('1706507436')), 0x9647245)) ORDER BY NULLIF(CAST(vt2.c1 AS NUMERIC), (vt2.c0 IN ())) ASC, HEX('-405289896'), '-1224741627' DESC INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON ((LIKELIHOOD(vt2.c0, vt2.c1)) IS FALSE) WHERE ((((('0.822232603076992')AND(x'')))AND(vt2.c1 COLLATE RTRIM))) ORDER BY NULLIF(CAST(vt2.c1 AS NUMERIC), (vt2.c0 IN ())) ASC, HEX('-405289896'), '-1224741627' DESC;
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((LIKELIHOOD(vt2.c0, vt2.c1)) IS FALSE) WHERE (COALESCE(((vt2.c0)OR(vt2.c1)), ((((vt2.c0)AND(vt0.c0)))OR('1706507436')), 157577797));
SELECT MIN(v0.c3) FROM v0, vt0 WHERE (((CASE WHEN v0.c1 THEN v0.c1 END) NOT NULL));
SELECT ALL MIN(v0.c3) FROM v0, vt0 WHERE (((((CASE WHEN v0.c1 THEN v0.c1 END) NOT NULL))AND(((((v0.c3) ISNULL)) BETWEEN (((((((0.08974189539374411)AND(v0.c0)))OR(v0.c2)))AND(v0.c2))) AND (((v0.c1)=(v0.c1))))))) ORDER BY ((((v0.c1)/(v0.c1)))IS NOT((((x'114b')) BETWEEN ((vt0.c0)) AND ((v0.c2)))))  NULLS FIRST INTERSECT SELECT ALL MIN(v0.c3) FROM v0, vt0 WHERE (v0.c3) ORDER BY ((((v0.c1)/(v0.c1)))IS NOT((((x'114b')) BETWEEN ((vt0.c0)) AND ((v0.c2)))))  NULLS FIRST;
SELECT MAX(v0.c0) FROM v0 WHERE ((- (((((((v0.c2)OR(v0.c3)))AND(v0.c2)))OR(v0.c3))))) ORDER BY ((((+ (v0.c1)), ((v0.c1) NOTNULL)))!=(((NOT (v0.c2)), CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 END))) DESC  NULLS LAST, ((2.67721342E8 COLLATE NOCASE) NOT BETWEEN ((NOT (v0.c1))) AND (CAST(v0.c0 AS BLOB))) ASC;
SELECT MAX(v0.c0) FROM v0 WHERE ((((- (((((((v0.c2)OR(v0.c3)))AND(v0.c2)))OR(v0.c3)))))AND((((v0.c0, v0.c0, v0.c3))<>((v0.c3, v0.c1, v0.c0))) COLLATE RTRIM))) ORDER BY ((((+ (v0.c1)), ((v0.c1) NOTNULL)))<>(((NOT (v0.c2)), CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 END))) DESC  NULLS LAST, ((2.67721342E8 COLLATE NOCASE) NOT BETWEEN ((NOT (v0.c1))) AND (CAST(v0.c0 AS BLOB))) ASC LIMIT 2;
SELECT ALL * FROM vt2, v0 WHERE (((0.12939489118821834)OR(((vt2.c0) IS TRUE))));
SELECT DISTINCT * FROM vt2, v0 WHERE (((((0.12939489118821834)OR(((vt2.c0) IS TRUE))))AND((((v0.c1, v0.c2)) BETWEEN (((((v0.c2, v0.c2)) NOT BETWEEN (('1360437288', vt2.c0)) AND ((vt2.c0, vt2.c0))), ((v0.c1)<=(0.7805636980657734)))) AND ((((v0.c0) NOTNULL), (((v0.c3)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))))))) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((NULL)==(v0.c1)) COLLATE NOCASE);
SELECT ALL * FROM vt2, v0 WHERE (((0.12939489118821834)OR(((vt2.c0) IS TRUE))));
SELECT DISTINCT * FROM vt2, v0 WHERE (((((0.12939489118821834)OR(((vt2.c0) IS TRUE))))AND((((v0.c1, v0.c2)) BETWEEN (((((v0.c2, v0.c2)) NOT BETWEEN (('1360437288', vt2.c0)) AND ((vt2.c0, vt2.c0))), ((v0.c1)<=(0.7805636980657734)))) AND ((((v0.c0) NOTNULL), (((v0.c3)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))))))) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((NULL)==(v0.c1)) COLLATE NOCASE);
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE (v0.c1) ORDER BY (((((((v0.c3)AND(v0.c1)))AND(x'2f16')))OR(v0.c3)) IN (v0.c2, ((x'73')<=(vt2.c0))))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (((v0.c1)AND(((CASE WHEN v0.c1 THEN v0.c2 END)+(json_extract(vt2.c1, v0.c2, vt2.c0, 'mz', v0.c2)))))) ORDER BY (((((((v0.c3)AND(v0.c1)))AND(x'2f16')))OR(v0.c3)) IN (v0.c2, ((x'73')<=(vt2.c0))))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE ((((((v0.c3)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))IS(((((v0.c2)AND(v0.c0)))OR(vt0.c0))))) ORDER BY (((((((v0.c3)AND(v0.c1)))AND(x'2f16')))OR(v0.c3)) IN (v0.c2, ((x'73')<=(vt2.c0))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN (v0.c2)))!=(((0X0) NOT BETWEEN (v0.c2) AND (v0.c1))))) ORDER BY v0.c1 DESC  NULLS FIRST;
SELECT * FROM v0 WHERE ((((((v0.c2 IN (v0.c2)))<>(((0X0) NOT BETWEEN (v0.c2) AND (v0.c1)))))AND((((v0.c0) IS FALSE) IN (CAST(v0.c0 AS REAL)))))) ORDER BY v0.c1 DESC  NULLS FIRST INTERSECT SELECT * FROM v0 WHERE (CAST((((v0.c2)) BETWEEN ((v0.c3)) AND ((v0.c0))) AS BLOB)) ORDER BY v0.c1 DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN (v0.c2)))!=(((0X0) NOT BETWEEN (v0.c2) AND (v0.c1))))) ORDER BY v0.c1 DESC  NULLS FIRST;
SELECT * FROM v0 WHERE ((((((v0.c2 IN (v0.c2)))<>(((0X0) NOT BETWEEN (v0.c2) AND (v0.c1)))))AND((((v0.c0) IS FALSE) IN (CAST(v0.c0 AS REAL)))))) ORDER BY v0.c1 DESC  NULLS FIRST INTERSECT SELECT * FROM v0 WHERE (CAST((((v0.c2)) BETWEEN ((v0.c3)) AND ((v0.c0))) AS BLOB)) ORDER BY v0.c1 DESC  NULLS FIRST;
SELECT ALL MAX(v0.c3) FROM v0 WHERE ((((((v0.c0)AND(v0.c0)))AND(v0.c2)) IN ()));
SELECT ALL MAX(v0.c3) FROM v0 WHERE ((((((((v0.c0)AND(v0.c0)))AND(v0.c2)) IN ()))AND(((((((((v0.c0)AND(v0.c0)))OR(v0.c3)))AND(NULL)))OR(NULL))))) ORDER BY CAST(CASE WHEN v0.c3 THEN v0.c2 ELSE v0.c2 END AS TEXT)  NULLS FIRST, v0.c1;
SELECT ALL * FROM vt2, vt0 WHERE (((((((0.7658716169123497)||(vt2.c1)))OR(((vt2.c0) NOT NULL))))OR('-1533639412'))) ORDER BY UNICODE(CAST(vt2.c1 AS BLOB)) ASC, (+ (CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END))  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((((((0.7658716169123497)||(vt2.c1)))OR(((vt2.c0) NOT NULL))))OR('-1533639412')))AND(0.9243416392154575))) ORDER BY CAST(vt2.c0 AS TEXT) COLLATE BINARY, ((vt2.c1 COLLATE RTRIM)%(((vt0.c0) BETWEEN ('*') AND (vt2.c0))));
SELECT ALL * FROM vt2, vt0 WHERE (((((((0.7658716169123497)||(vt2.c1)))OR(((vt2.c0) NOT NULL))))OR('-1533639412'))) ORDER BY UNICODE(CAST(vt2.c1 AS BLOB)) ASC, (+ (CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END))  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((((((0.7658716169123497)||(vt2.c1)))OR(((vt2.c0) NOT NULL))))OR('-1533639412')))AND(0.9243416392154575))) ORDER BY CAST(vt2.c0 AS TEXT) COLLATE BINARY, ((vt2.c1 COLLATE RTRIM)%(((vt0.c0) BETWEEN ('*') AND (vt2.c0))));
SELECT ALL * FROM vt2 WHERE (((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1))) NOT NULL));
SELECT ALL * FROM vt2 WHERE (((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1))) NOT NULL))AND(CASE WHEN ((((((x'')OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c1)) THEN vt2.c1 END))) ORDER BY x'6f' DESC  NULLS FIRST, CAST(CAST('' AS NUMERIC) AS NUMERIC)  NULLS FIRST LIMIT 0X2 INTERSECT SELECT * FROM vt2 WHERE ((+ ((vt2.c1 IN (vt2.c0))))) ORDER BY x'6f' DESC  NULLS FIRST, CAST(CAST('' AS NUMERIC) AS NUMERIC)  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM vt2 WHERE (((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1))) NOT NULL));
SELECT ALL * FROM vt2 WHERE (((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1))) NOT NULL))AND(CASE WHEN ((((((x'')OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c1)) THEN vt2.c1 END))) ORDER BY x'6f' DESC  NULLS FIRST, CAST(CAST('' AS NUMERIC) AS NUMERIC)  NULLS FIRST LIMIT 0X2 INTERSECT SELECT * FROM vt2 WHERE ((+ ((vt2.c1 IN (vt2.c0))))) ORDER BY x'6f' DESC  NULLS FIRST, CAST(CAST('' AS NUMERIC) AS NUMERIC)  NULLS FIRST LIMIT 0x2;
SELECT * FROM v0, vt2, vt0 WHERE ((((((((vt2.c0 IN ()))AND(vt2.c1)))OR(((NULL)<=(v0.c2)))))AND(vt2.c0))) ORDER BY ((v0.c2) NOT BETWEEN (v0.c3) AND (vt2.c0)) COLLATE NOCASE DESC  NULLS LAST, (NOT (vt2.c0)) COLLATE BINARY COLLATE NOCASE;
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((((((((vt2.c0 IN ()))AND(vt2.c1)))OR(((NULL)<(v0.c2)))))AND(vt2.c0)))AND(((((v0.c3))>=((vt0.c0))) IN ((((0.5340089347002321, v0.c1)) NOT BETWEEN ((v0.c2, vt2.c0)) AND ((vt0.c0, v0.c0))), ((NULL)+(vt2.c1))))))) ORDER BY ((v0.c2) NOT BETWEEN (v0.c3) AND (vt2.c0)) COLLATE NOCASE DESC  NULLS LAST, (NOT (vt2.c0)) COLLATE BINARY COLLATE NOCASE LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((('303188562' IN (vt2.c0, v0.c2))))!=((((((v0.c2)OR(v0.c3)))AND(vt2.c1)))))) ORDER BY ((v0.c2) NOT BETWEEN (v0.c3) AND (vt2.c0)) COLLATE NOCASE DESC  NULLS LAST, (NOT (vt2.c0)) COLLATE BINARY COLLATE NOCASE LIMIT 3;
SELECT * FROM v0, vt2, vt0 WHERE ((((((((vt2.c0 IN ()))AND(vt2.c1)))OR(((NULL)<=(v0.c2)))))AND(vt2.c0))) ORDER BY ((v0.c2) NOT BETWEEN (v0.c3) AND (vt2.c0)) COLLATE NOCASE DESC  NULLS LAST, (NOT (vt2.c0)) COLLATE BINARY COLLATE NOCASE;
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((((((((vt2.c0 IN ()))AND(vt2.c1)))OR(((NULL)<(v0.c2)))))AND(vt2.c0)))AND(((((v0.c3))>=((vt0.c0))) IN ((((0.5340089347002321, v0.c1)) NOT BETWEEN ((v0.c2, vt2.c0)) AND ((vt0.c0, v0.c0))), ((NULL)+(vt2.c1))))))) ORDER BY ((v0.c2) NOT BETWEEN (v0.c3) AND (vt2.c0)) COLLATE NOCASE DESC  NULLS LAST, (NOT (vt2.c0)) COLLATE BINARY COLLATE NOCASE LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((('303188562' IN (vt2.c0, v0.c2))))!=((((((v0.c2)OR(v0.c3)))AND(vt2.c1)))))) ORDER BY ((v0.c2) NOT BETWEEN (v0.c3) AND (vt2.c0)) COLLATE NOCASE DESC  NULLS LAST, (NOT (vt2.c0)) COLLATE BINARY COLLATE NOCASE LIMIT 3;
SELECT * FROM vt0, vt2 WHERE (-7.34232506E8) ORDER BY ((vt0.c0) NOT BETWEEN (vt2.c1) AND ('')) COLLATE NOCASE ASC;
SELECT ALL * FROM vt0, vt2 WHERE (((-7.34232506E8)AND(CASE WHEN vt2.c1 THEN vt0.c0 END COLLATE BINARY))) ORDER BY ((vt0.c0) NOT BETWEEN (vt2.c1) AND ('')) COLLATE NOCASE ASC INTERSECT SELECT * FROM vt0, vt2 WHERE (vt2.c0) ORDER BY ((vt0.c0) NOT BETWEEN (vt2.c1) AND ('')) COLLATE NOCASE ASC;
SELECT * FROM vt0, vt2 WHERE (-7.34232506E8) ORDER BY ((vt0.c0) NOT BETWEEN (vt2.c1) AND ('')) COLLATE NOCASE ASC;
SELECT ALL * FROM vt0, vt2 WHERE (((-7.34232506E8)AND(CASE WHEN vt2.c1 THEN vt0.c0 END COLLATE BINARY))) ORDER BY ((vt0.c0) NOT BETWEEN (vt2.c1) AND ('')) COLLATE NOCASE ASC INTERSECT SELECT * FROM vt0, vt2 WHERE (vt2.c0) ORDER BY ((vt0.c0) NOT BETWEEN (vt2.c1) AND ('')) COLLATE NOCASE ASC;
SELECT MAX(v0.c3) FROM v0 WHERE (((v0.c0) NOT NULL));
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (((((v0.c0) NOT NULL))AND((((((((((((((v0.c0)OR(v0.c3)))OR(v0.c2)))OR(v0.c1)))AND(v0.c2)))OR(v0.c2))))<((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c1 END)))))) ORDER BY CAST(json_valid(v0.c1) AS INTEGER), (('BR㤥갠5)o)''' IN ()) IN (v0.c1)) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE ((((v0.c1)) NOT BETWEEN (((v0.c0 IN ()))) AND ((((v0.c0)IS NOT(v0.c3)))))) ORDER BY CAST(json_valid(v0.c1) AS INTEGER), (('BR㤥갠5)o)''' IN ()) IN (v0.c1)) ASC  NULLS LAST LIMIT 0;
SELECT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (v0.c0);
SELECT DISTINCT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (((v0.c0)AND((((vt0.c0) NOT NULL) IN (((((((((((((v0.c3)AND(v0.c1)))OR(vt2.c0)))OR(v0.c0)))AND(vt0.c0)))OR(v0.c0)))AND(1625988069))))))) ORDER BY (((vt0.c0, v0.c3))<((v0.c3, v0.c0))) COLLATE BINARY, ((((((vt0.c0)AND(v0.c2)))OR(v0.c3)))||(CHAR(v0.c3)))  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (((((((((((1200132367) IS FALSE))OR((~ (v0.c1)))))AND(vt2.c1)))OR(v0.c3)))AND(((vt0.c0)||(v0.c0))))) ORDER BY (((vt0.c0, v0.c3))<((v0.c3, v0.c0))) COLLATE BINARY, ((((((vt0.c0)AND(v0.c2)))OR(v0.c3)))||(CHAR(v0.c3)))  NULLS FIRST LIMIT 0X2;
SELECT COUNT(*) FROM vt2 CROSS JOIN v0 ON ((v0.c2) NOTNULL) COLLATE BINARY COLLATE NOCASE LEFT OUTER JOIN vt0 ON CAST(vt0.c0 AS REAL) WHERE (v0.c2);
SELECT DISTINCT COUNT(*) FROM vt2 CROSS JOIN v0 ON ((v0.c2) NOTNULL) COLLATE BINARY COLLATE NOCASE INNER JOIN vt0 ON CAST(vt0.c0 AS REAL) WHERE (((v0.c2)AND(((((((((((json_array_length(v0.c3, vt0.c0))OR('733345002')))OR((((3.82198455E8, v0.c2, vt0.c0, v0.c0))<((vt0.c0, vt2.c1, vt2.c1, vt2.c0))))))OR(CAST(vt2.c0 AS BLOB))))AND(NULL)))OR((((v0.c2))<=((v0.c0)))))))) ORDER BY x''  NULLS LAST, LIKELIHOOD(DISTINCT ((v0.c3)%(vt2.c0)), ((((((((((vt2.c0)AND(v0.c3)))OR(v0.c0)))AND(vt2.c1)))OR(v0.c3)))AND(v0.c0))) DESC  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt2 NATURAL JOIN v0 NATURAL JOIN vt0 WHERE (NULL);
SELECT ALL MIN(vt0.c0) FROM vt2 NATURAL JOIN v0 NATURAL JOIN vt0 WHERE (NULL) INTERSECT SELECT ALL MIN(vt0.c0) FROM vt2 NATURAL JOIN v0 NATURAL JOIN vt0 WHERE (0.5553153551890886);
SELECT ALL * FROM v0, vt2 WHERE (CASE WHEN vt2.c0 THEN v0.c3 WHEN (((v0.c3)) BETWEEN ((v0.c3)) AND ((v0.c2))) THEN (+ (vt2.c1)) END);
SELECT DISTINCT * FROM v0, vt2 WHERE (CASE WHEN vt2.c0 THEN v0.c3 WHEN (((v0.c3)) BETWEEN ((v0.c3)) AND ((v0.c2))) THEN (+ (vt2.c1)) END) ORDER BY ((((((((v0.c2)==(v0.c0)))OR((0.17110770475859716 IN ()))))OR(TRIM(v0.c3, x'7226a9'))))OR(((((((((((vt2.c0)OR(v0.c0)))OR(v0.c3)))OR(v0.c1)))OR(v0.c1)))OR(v0.c2)))) ASC  NULLS FIRST, (((v0.c2)) NOT BETWEEN ((((((((((v0.c1)AND(v0.c1)))AND(v0.c0)))AND(v0.c1)))AND(v0.c0)))) AND ((CASE WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END)));
SELECT ALL * FROM v0, vt2 WHERE (CASE WHEN vt2.c0 THEN v0.c3 WHEN (((v0.c3)) BETWEEN ((v0.c3)) AND ((v0.c2))) THEN (+ (vt2.c1)) END);
SELECT DISTINCT * FROM v0, vt2 WHERE (CASE WHEN vt2.c0 THEN v0.c3 WHEN (((v0.c3)) BETWEEN ((v0.c3)) AND ((v0.c2))) THEN (+ (vt2.c1)) END) ORDER BY ((((((((v0.c2)==(v0.c0)))OR((0.17110770475859716 IN ()))))OR(TRIM(v0.c3, x'7226a9'))))OR(((((((((((vt2.c0)OR(v0.c0)))OR(v0.c3)))OR(v0.c1)))OR(v0.c1)))OR(v0.c2)))) ASC  NULLS FIRST, (((v0.c2)) NOT BETWEEN ((((((((((v0.c1)AND(v0.c1)))AND(v0.c0)))AND(v0.c1)))AND(v0.c0)))) AND ((CASE WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END)));
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON CASE WHEN ((v0.c3)>>(vt2.c1)) THEN (v0.c1 IN (vt2.c1)) ELSE LIKELIHOOD(v0.c3, vt2.c1) END WHERE (((((((CAST(v0.c1 AS REAL))AND(v0.c3)))OR(v0.c0)))OR((((vt2.c0, vt2.c1, vt2.c0))<((-8.33993359E8, vt2.c0, vt2.c1))))));
SELECT * FROM v0 LEFT OUTER JOIN vt2 ON CASE WHEN ((v0.c3)>>(vt2.c1)) THEN (v0.c1 IN (vt2.c1)) ELSE LIKELIHOOD(v0.c3, vt2.c1) END WHERE (((((((CAST(v0.c1 AS REAL))AND(v0.c3)))OR(v0.c0)))OR((((vt2.c0, vt2.c1, vt2.c0))<((-8.33993359E8, vt2.c0, vt2.c1)))))) ORDER BY (~ (v0.c0))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON CASE WHEN ((v0.c3)>>(vt2.c1)) THEN (v0.c1 IN (vt2.c1)) ELSE LIKELIHOOD(v0.c3, vt2.c1) END WHERE (((((((CAST(v0.c1 AS REAL))AND(v0.c3)))OR(v0.c0)))OR((((vt2.c0, vt2.c1, vt2.c0))<((-8.33993359E8, vt2.c0, vt2.c1))))));
SELECT ALL * FROM vt2 WHERE (CAST(((vt2.c1) BETWEEN (0.238586546337354) AND (vt2.c0)) AS BLOB));
SELECT DISTINCT * FROM vt2 WHERE (CAST(((vt2.c1) BETWEEN (0.238586546337354) AND (vt2.c0)) AS BLOB)) ORDER BY ((((((vt2.c1))>=((vt2.c1))), CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN '1175303163' WHEN vt2.c1 THEN vt2.c0 END))<(((vt2.c0 IN ()), vt2.c0 COLLATE RTRIM))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((((((vt2.c0) IS TRUE))AND(UNLIKELY(NULL))))OR(0.20340515105157597)))OR(vt2.c1))) ORDER BY ((((((vt2.c1))>=((vt2.c1))), CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN '1175303163' WHEN vt2.c1 THEN vt2.c0 END))<(((vt2.c0 IN ()), vt2.c0 COLLATE RTRIM))) LIMIT 0;
SELECT ALL * FROM vt2 WHERE (CAST(((vt2.c1) BETWEEN (0.238586546337354) AND (vt2.c0)) AS BLOB));
SELECT DISTINCT * FROM vt2 WHERE (CAST(((vt2.c1) BETWEEN (0.238586546337354) AND (vt2.c0)) AS BLOB)) ORDER BY ((((((vt2.c1))>=((vt2.c1))), CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN '1175303163' WHEN vt2.c1 THEN vt2.c0 END))<(((vt2.c0 IN ()), vt2.c0 COLLATE RTRIM))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((((((vt2.c0) IS TRUE))AND(UNLIKELY(NULL))))OR(0.20340515105157597)))OR(vt2.c1))) ORDER BY ((((((vt2.c1))>=((vt2.c1))), CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN '1175303163' WHEN vt2.c1 THEN vt2.c0 END))<(((vt2.c0 IN ()), vt2.c0 COLLATE RTRIM))) LIMIT 0;
SELECT * FROM vt0, v0, vt2 WHERE ((((((((((vt0.c0, vt0.c0))<=(('791284222', v0.c0))))OR(CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END)))OR(v0.c1 COLLATE RTRIM)))AND('916626587'))) ORDER BY CAST(NULL AS BLOB) DESC  NULLS LAST, v0.c0 DESC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((((((((vt0.c0, vt0.c0))<=(('791284222', v0.c0))))OR(CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END)))OR(v0.c1 COLLATE RTRIM)))AND('916626587')))AND('772996211'))) ORDER BY CAST(((v0.c3)-(v0.c1)) AS TEXT), ((CAST(vt0.c0 AS TEXT)) NOT BETWEEN (CAST(vt2.c0 AS REAL)) AND (((((((((v0.c0)AND(vt0.c0)))AND(v0.c3)))OR(v0.c0)))OR(vt0.c0)))) ASC, CAST('' AS INTEGER) DESC INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((v0.c1)/(((((((((vt0.c0)AND(v0.c3)))OR(vt2.c1)))AND(v0.c0)))AND(v0.c3))))) ORDER BY CAST(((v0.c3)-(v0.c1)) AS TEXT), ((CAST(vt0.c0 AS TEXT)) NOT BETWEEN (CAST(vt2.c0 AS REAL)) AND (((((((((v0.c0)AND(vt0.c0)))AND(v0.c3)))OR(v0.c0)))OR(vt0.c0)))) ASC, CAST('' AS INTEGER) DESC;
SELECT * FROM vt0, v0, vt2 WHERE ((((((((((vt0.c0, vt0.c0))<=(('791284222', v0.c0))))OR(CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END)))OR(v0.c1 COLLATE RTRIM)))AND('916626587'))) ORDER BY CAST(NULL AS BLOB) DESC  NULLS LAST, v0.c0 DESC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((((((((vt0.c0, vt0.c0))<=(('791284222', v0.c0))))OR(CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END)))OR(v0.c1 COLLATE RTRIM)))AND('916626587')))AND('772996211'))) ORDER BY CAST(((v0.c3)-(v0.c1)) AS TEXT), ((CAST(vt0.c0 AS TEXT)) NOT BETWEEN (CAST(vt2.c0 AS REAL)) AND (((((((((v0.c0)AND(vt0.c0)))AND(v0.c3)))OR(v0.c0)))OR(vt0.c0)))) ASC, CAST('' AS INTEGER) DESC INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((v0.c1)/(((((((((vt0.c0)AND(v0.c3)))OR(vt2.c1)))AND(v0.c0)))AND(v0.c3))))) ORDER BY CAST(((v0.c3)-(v0.c1)) AS TEXT), ((CAST(vt0.c0 AS TEXT)) NOT BETWEEN (CAST(vt2.c0 AS REAL)) AND (((((((((v0.c0)AND(vt0.c0)))AND(v0.c3)))OR(v0.c0)))OR(vt0.c0)))) ASC, CAST('' AS INTEGER) DESC;
SELECT * FROM vt2 WHERE (CASE WHEN (+ (vt2.c0)) THEN (NOT (vt2.c1)) WHEN (vt2.c1 IN ()) THEN ((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)) WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (NULL)) THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END ELSE CAST(vt2.c0 AS BLOB) END);
SELECT DISTINCT * FROM vt2 WHERE (((CASE WHEN (+ (vt2.c0)) THEN (NOT (vt2.c1)) WHEN (vt2.c1 IN ()) THEN ((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)) WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (NULL)) THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END ELSE CAST(vt2.c0 AS BLOB) END)AND(((((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))) IS TRUE)))) ORDER BY load_extension((~ (vt2.c0))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (LOWER(CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN '' THEN vt2.c1 END)) ORDER BY load_extension((~ (vt2.c0))) LIMIT 0X2;
SELECT * FROM vt2 WHERE (CASE WHEN (+ (vt2.c0)) THEN (NOT (vt2.c1)) WHEN (vt2.c1 IN ()) THEN ((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)) WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (NULL)) THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END ELSE CAST(vt2.c0 AS BLOB) END);
SELECT DISTINCT * FROM vt2 WHERE (((CASE WHEN (+ (vt2.c0)) THEN (NOT (vt2.c1)) WHEN (vt2.c1 IN ()) THEN ((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)) WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (NULL)) THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END ELSE CAST(vt2.c0 AS BLOB) END)AND(((((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))) IS TRUE)))) ORDER BY load_extension((~ (vt2.c0))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (LOWER(CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN '' THEN vt2.c1 END)) ORDER BY load_extension((~ (vt2.c0))) LIMIT 0X2;
SELECT * FROM vt0, vt2 WHERE (0Xffffffffacd36546);
SELECT ALL * FROM vt0, vt2 WHERE (((-1395432122)AND((~ ((~ (vt2.c1))))))) INTERSECT SELECT ALL * FROM vt0, vt2 WHERE (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY);
SELECT * FROM vt0, vt2 WHERE (0Xffffffffacd36546);
SELECT ALL * FROM vt0, vt2 WHERE (((-1395432122)AND((~ ((~ (vt2.c1))))))) INTERSECT SELECT ALL * FROM vt0, vt2 WHERE (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY);
SELECT ALL * FROM v0 LEFT OUTER JOIN vt0 ON vt0.c0 CROSS JOIN vt2 ON ((CAST(v0.c1 AS NUMERIC))<>('-0.0')) WHERE (CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM) ORDER BY CAST(((vt2.c0)<<(vt0.c0)) AS NUMERIC), CAST(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)) AS TEXT) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 INNER JOIN vt0 ON vt0.c0 CROSS JOIN vt2 ON ((CAST(v0.c1 AS NUMERIC))<>('-0.0')) WHERE (CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM) ORDER BY 154004552 DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt0 ON vt0.c0 CROSS JOIN vt2 ON ((CAST(v0.c1 AS NUMERIC))<>('-0.0')) WHERE (CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM) ORDER BY CAST(((vt2.c0)<<(vt0.c0)) AS NUMERIC), CAST(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)) AS TEXT) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 INNER JOIN vt0 ON vt0.c0 CROSS JOIN vt2 ON ((CAST(v0.c1 AS NUMERIC))<>('-0.0')) WHERE (CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END COLLATE RTRIM) ORDER BY 154004552 DESC  NULLS FIRST LIMIT 0;
SELECT COUNT(*) FROM v0, vt0 WHERE ((((v0.c0)) BETWEEN ((((v0.c2)<<(v0.c3)))) AND ((NULL))));
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE ((((v0.c0)) BETWEEN ((((v0.c2)<<(v0.c3)))) AND ((NULL)))) INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE ((((((- (v0.c1)))AND(vt0.c0)))OR((+ (v0.c2)))));
SELECT ALL * FROM vt2, v0 NOT INDEXED WHERE ((((((((~ (v0.c0)))OR(((vt2.c0)-('42ᩱ')))))OR(((v0.c0)IS(v0.c0)))))AND(CAST(vt2.c1 AS TEXT)))) ORDER BY ((0X2437c09b) IS FALSE) ASC  NULLS FIRST, ((CAST(0.249834248181256 AS TEXT)) BETWEEN (((vt2.c0)<>(vt2.c1))) AND ('')) DESC;
SELECT DISTINCT * FROM vt2, v0 WHERE ((((((((~ (v0.c0)))OR(((vt2.c0)-('42ᩱ')))))OR(((v0.c0)IS(v0.c0)))))AND(CAST(vt2.c1 AS TEXT)))) ORDER BY ((0x2437c09b) IS FALSE) ASC  NULLS FIRST, ((CAST(0.249834248181256 AS TEXT)) BETWEEN (((vt2.c0)<>(vt2.c1))) AND ('')) DESC;
SELECT ALL * FROM vt2, v0 NOT INDEXED WHERE ((((((((~ (v0.c0)))OR(((vt2.c0)-('42ᩱ')))))OR(((v0.c0)IS(v0.c0)))))AND(CAST(vt2.c1 AS TEXT)))) ORDER BY ((0X2437c09b) IS FALSE) ASC  NULLS FIRST, ((CAST(0.249834248181256 AS TEXT)) BETWEEN (((vt2.c0)<>(vt2.c1))) AND ('')) DESC;
SELECT DISTINCT * FROM vt2, v0 WHERE ((((((((~ (v0.c0)))OR(((vt2.c0)-('42ᩱ')))))OR(((v0.c0)IS(v0.c0)))))AND(CAST(vt2.c1 AS TEXT)))) ORDER BY ((0x2437c09b) IS FALSE) ASC  NULLS FIRST, ((CAST(0.249834248181256 AS TEXT)) BETWEEN (((vt2.c0)<>(vt2.c1))) AND ('')) DESC;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((v0.c2) NOTNULL)) NOT BETWEEN ((v0.c2 IN ())) AND (CASE WHEN v0.c1 THEN v0.c3 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 ELSE v0.c3 END)) WHERE (x'49');
SELECT * FROM vt0, v0 INNER JOIN vt2 ON ((((v0.c2) NOTNULL)) NOT BETWEEN ((v0.c2 IN ())) AND (CASE WHEN v0.c1 THEN v0.c3 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 ELSE v0.c3 END)) WHERE (((x'49')AND(v0.c0))) ORDER BY CASE WHEN v0.c2 COLLATE NOCASE THEN COALESCE(0.5681139234988904, vt2.c0) ELSE UPPER(x'3e2c7ede3398') END;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((v0.c2) NOTNULL)) NOT BETWEEN ((v0.c2 IN ())) AND (CASE WHEN v0.c1 THEN v0.c3 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 ELSE v0.c3 END)) WHERE (x'49');
SELECT * FROM vt0, v0 INNER JOIN vt2 ON ((((v0.c2) NOTNULL)) NOT BETWEEN ((v0.c2 IN ())) AND (CASE WHEN v0.c1 THEN v0.c3 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 ELSE v0.c3 END)) WHERE (((x'49')AND(v0.c0))) ORDER BY CASE WHEN v0.c2 COLLATE NOCASE THEN COALESCE(0.5681139234988904, vt2.c0) ELSE UPPER(x'3e2c7ede3398') END;
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (((0.6703908272294148)%((vt0.c0 IN (vt0.c0, vt2.c0, vt2.c1))))) ORDER BY (+ (((vt0.c0) ISNULL)));
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (((((0.6703908272294148)%((vt0.c0 IN (vt0.c0, vt2.c0)))))AND(((((((((((((vt2.c0)LIKE(vt0.c0)))AND(((vt0.c0)=(vt0.c0)))))OR(((vt0.c0)LIKE(vt0.c0)))))AND(((NULL)AND(vt2.c0)))))OR(CASE 0Xffffffffa101f685  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END)))OR(((vt2.c1) NOT NULL)))))) ORDER BY (((((- (vt2.c0)))OR(x'66')))OR(((vt0.c0)<('w['))))  NULLS LAST LIMIT 0 INTERSECT SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (((x'3f')IS(vt0.c0)) COLLATE NOCASE COLLATE BINARY) ORDER BY (((((- (vt2.c0)))OR(x'66')))OR(((vt0.c0)<('w['))))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt2, v0 WHERE ((NOT ((- (v0.c2))))) ORDER BY ((CAST(v0.c3 AS BLOB)) NOT BETWEEN (CAST(v0.c0 AS REAL)) AND (CAST(vt2.c1 AS NUMERIC))) ASC, (((v0.c0 IN (v0.c0))) NOTNULL) ASC;
SELECT ALL * FROM vt2, v0 WHERE ((NOT ((- (v0.c2))))) ORDER BY (((((('2139484541')OR(v0.c1)))AND(((v0.c0)+(v0.c3)))))OR((((v0.c3))!=((v0.c1))))) LIMIT 0X1;
SELECT ALL * FROM vt2, v0 WHERE ((NOT ((- (v0.c2))))) ORDER BY ((CAST(v0.c3 AS BLOB)) NOT BETWEEN (CAST(v0.c0 AS REAL)) AND (CAST(vt2.c1 AS NUMERIC))) ASC, (((v0.c0 IN (v0.c0))) NOTNULL) ASC;
SELECT ALL * FROM vt2, v0 WHERE ((NOT ((- (v0.c2))))) ORDER BY (((((('2139484541')OR(v0.c1)))AND(((v0.c0)+(v0.c3)))))OR((((v0.c3))!=((v0.c1))))) LIMIT 0X1;
SELECT * FROM v0, vt0 WHERE ((((v0.c2, v0.c1)) NOT BETWEEN ((CAST(vt0.c0 AS BLOB), (((v0.c3, v0.c1, vt0.c0))<((v0.c0, vt0.c0, vt0.c0))))) AND (((+ (v0.c3)), v0.c3)))) ORDER BY (((CAST(v0.c3 AS REAL), ((v0.c0) IS TRUE), (vt0.c0 IN (v0.c3))))==((((v0.c0)>('-433181884')), v0.c2, ((v0.c2)>>(v0.c0)))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((((v0.c2, v0.c1)) NOT BETWEEN ((CAST(vt0.c0 AS BLOB), (((v0.c3, v0.c1, vt0.c0))!=((v0.c0, vt0.c0, vt0.c0))))) AND (((+ (v0.c3)), v0.c3))))AND((((v0.c0, v0.c2, vt0.c0)) BETWEEN ((((vt0.c0) BETWEEN (v0.c2) AND (v0.c2)), CASE v0.c2  WHEN v0.c0 THEN v0.c3 END, (NOT (v0.c2)))) AND (((((v0.c0))<=((v0.c0))), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CAST(v0.c3 AS TEXT))))))) ORDER BY v0.c2 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (CASE WHEN ((v0.c0) NOTNULL) THEN ((vt0.c0)LIKE(v0.c3)) WHEN (~ (v0.c2)) THEN (NOT (v0.c3)) WHEN ((v0.c3)%(v0.c1)) THEN v0.c2 COLLATE RTRIM ELSE v0.c0 END) ORDER BY v0.c2;
SELECT * FROM v0, vt0 WHERE ((((v0.c2, v0.c1)) NOT BETWEEN ((CAST(vt0.c0 AS BLOB), (((v0.c3, v0.c1, vt0.c0))<((v0.c0, vt0.c0, vt0.c0))))) AND (((+ (v0.c3)), v0.c3)))) ORDER BY (((CAST(v0.c3 AS REAL), ((v0.c0) IS TRUE), (vt0.c0 IN (v0.c3))))==((((v0.c0)>('-433181884')), v0.c2, ((v0.c2)>>(v0.c0)))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((((v0.c2, v0.c1)) NOT BETWEEN ((CAST(vt0.c0 AS BLOB), (((v0.c3, v0.c1, vt0.c0))!=((v0.c0, vt0.c0, vt0.c0))))) AND (((+ (v0.c3)), v0.c3))))AND((((v0.c0, v0.c2, vt0.c0)) BETWEEN ((((vt0.c0) BETWEEN (v0.c2) AND (v0.c2)), CASE v0.c2  WHEN v0.c0 THEN v0.c3 END, (NOT (v0.c2)))) AND (((((v0.c0))<=((v0.c0))), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CAST(v0.c3 AS TEXT))))))) ORDER BY v0.c2 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (CASE WHEN ((v0.c0) NOTNULL) THEN ((vt0.c0)LIKE(v0.c3)) WHEN (~ (v0.c2)) THEN (NOT (v0.c3)) WHEN ((v0.c3)%(v0.c1)) THEN v0.c2 COLLATE RTRIM ELSE v0.c0 END) ORDER BY v0.c2;
SELECT MAX(v0.c2) FROM v0, vt0 WHERE (COALESCE(((v0.c0)+(v0.c2)), v0.c0)) ORDER BY TIME((((v0.c0, v0.c3)) NOT BETWEEN ((NULL, v0.c2)) AND ((NULL, v0.c2))), ((v0.c3) IS FALSE), ((v0.c0)%(vt0.c0)), ((v0.c0)<<(0.05509927846959273)), v0.c2)  NULLS LAST;
SELECT ALL MAX(v0.c2) FROM v0, vt0 WHERE (COALESCE(((v0.c0)+(v0.c2)), v0.c0)) ORDER BY TIME((((v0.c0, v0.c3)) NOT BETWEEN ((NULL, v0.c2)) AND ((NULL, v0.c2))), ((v0.c3) IS FALSE), ((v0.c0)%(vt0.c0)), ((v0.c0)<<(0.05509927846959273)), v0.c2)  NULLS LAST LIMIT 0X1;
SELECT * FROM vt0, vt2, v0 WHERE (((((((v0.c2)LIKE(v0.c3)))AND(((v0.c1) BETWEEN (v0.c0) AND (v0.c3)))))AND((v0.c3 IN (vt2.c1, vt0.c0)))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((((((v0.c2)LIKE(v0.c3)))AND(((v0.c1) BETWEEN (v0.c0) AND (v0.c3)))))AND((v0.c3 IN (vt2.c1))))) ORDER BY ((vt2.c0) IS FALSE) DESC, -276438283  NULLS FIRST, (((vt2.c1, x'6b', vt2.c1)) NOT BETWEEN ((LIKE(v0.c1, v0.c2), ((v0.c3)-(v0.c0)), CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)) AND ((((((((vt2.c0)OR(v0.c0)))OR(vt2.c1)))AND(v0.c3)), ((vt2.c0) IS TRUE), NULL))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (vt2.c0) ORDER BY ((vt2.c0) IS FALSE) DESC, 0xffffffffef85e2f5  NULLS FIRST, (((vt2.c1, x'6b', vt2.c1)) NOT BETWEEN ((LIKE(v0.c1, v0.c2), ((v0.c3)-(v0.c0)), CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)) AND ((((((((vt2.c0)OR(v0.c0)))OR(vt2.c1)))AND(v0.c3)), ((vt2.c0) IS TRUE), NULL))) LIMIT 0x2;
SELECT * FROM vt0, vt2, v0 WHERE (((((((v0.c2)LIKE(v0.c3)))AND(((v0.c1) BETWEEN (v0.c0) AND (v0.c3)))))AND((v0.c3 IN (vt2.c1, vt0.c0)))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((((((v0.c2)LIKE(v0.c3)))AND(((v0.c1) BETWEEN (v0.c0) AND (v0.c3)))))AND((v0.c3 IN (vt2.c1))))) ORDER BY ((vt2.c0) IS FALSE) DESC, -276438283  NULLS FIRST, (((vt2.c1, x'6b', vt2.c1)) NOT BETWEEN ((LIKE(v0.c1, v0.c2), ((v0.c3)-(v0.c0)), CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)) AND ((((((((vt2.c0)OR(v0.c0)))OR(vt2.c1)))AND(v0.c3)), ((vt2.c0) IS TRUE), NULL))) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (vt2.c0) ORDER BY ((vt2.c0) IS FALSE) DESC, 0xffffffffef85e2f5  NULLS FIRST, (((vt2.c1, x'6b', vt2.c1)) NOT BETWEEN ((LIKE(v0.c1, v0.c2), ((v0.c3)-(v0.c0)), CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)) AND ((((((((vt2.c0)OR(v0.c0)))OR(vt2.c1)))AND(v0.c3)), ((vt2.c0) IS TRUE), NULL))) LIMIT 0x2;
SELECT ALL * FROM v0 WHERE (((('思#LN5f-')!=(v0.c2)) IN (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)), (((v0.c2))<((v0.c1))))));
SELECT ALL * FROM v0 WHERE (((((('思#LN5f-')<>(v0.c2)) IN (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)), (((v0.c2))<((v0.c1))))))AND(((v0.c1 COLLATE NOCASE)*(x''))))) ORDER BY (((((((v0.c0)OR(v0.c2)))AND(v0.c2)), CASE v0.c2  WHEN v0.c1 THEN NULL END))>=(('-1892106755', CAST(x'' AS TEXT)))) DESC  NULLS LAST INTERSECT SELECT * FROM v0 WHERE (v0.c3) ORDER BY (((((((v0.c0)OR(v0.c2)))AND(v0.c2)), CASE v0.c2  WHEN v0.c1 THEN NULL END))>=(('-1892106755', CAST(x'' AS TEXT)))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((('思#LN5f-')!=(v0.c2)) IN (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)), (((v0.c2))<((v0.c1))))));
SELECT ALL * FROM v0 WHERE (((((('思#LN5f-')<>(v0.c2)) IN (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)), (((v0.c2))<((v0.c1))))))AND(((v0.c1 COLLATE NOCASE)*(x''))))) ORDER BY (((((((v0.c0)OR(v0.c2)))AND(v0.c2)), CASE v0.c2  WHEN v0.c1 THEN NULL END))>=(('-1892106755', CAST(x'' AS TEXT)))) DESC  NULLS LAST INTERSECT SELECT * FROM v0 WHERE (v0.c3) ORDER BY (((((((v0.c0)OR(v0.c2)))AND(v0.c2)), CASE v0.c2  WHEN v0.c1 THEN NULL END))>=(('-1892106755', CAST(x'' AS TEXT)))) DESC  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE (((v0.c2 COLLATE RTRIM)-((v0.c1 IN ()))));
SELECT * FROM v0, vt0 WHERE (((v0.c2 COLLATE RTRIM)-((v0.c1 IN ())))) LIMIT 0 INTERSECT SELECT * FROM v0, vt0 WHERE (((v0.c3) BETWEEN (v0.c0) AND (vt0.c0)) COLLATE NOCASE) LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE (((v0.c2 COLLATE RTRIM)-((v0.c1 IN ()))));
SELECT * FROM v0, vt0 WHERE (((v0.c2 COLLATE RTRIM)-((v0.c1 IN ())))) LIMIT 0 INTERSECT SELECT * FROM v0, vt0 WHERE (((v0.c3) BETWEEN (v0.c0) AND (vt0.c0)) COLLATE NOCASE) LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, CAST(vt0.c0 AS REAL), (vt0.c0 IN (vt0.c0))))>=((0.8003845893507617, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(0.8869984572243803))))));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, CAST(vt0.c0 AS REAL), (vt0.c0 IN (vt0.c0))))==((0.8003845893507617, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(0.8869984572243803))))))AND(((((vt0.c0)>(vt0.c0))) NOT BETWEEN (('' IN (vt0.c0))) AND (vt0.c0 COLLATE NOCASE))))) ORDER BY CAST(LIKELY(DISTINCT vt0.c0) AS INTEGER) ASC, NULLIF(DISTINCT CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, vt0.c0 COLLATE RTRIM)  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, CAST(vt0.c0 AS REAL), (vt0.c0 IN (vt0.c0))))>=((0.8003845893507617, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(0.8869984572243803))))));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, CAST(vt0.c0 AS REAL), (vt0.c0 IN (vt0.c0))))==((0.8003845893507617, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(0.8869984572243803))))))AND(((((vt0.c0)>(vt0.c0))) NOT BETWEEN (('' IN (vt0.c0))) AND (vt0.c0 COLLATE NOCASE))))) ORDER BY CAST(LIKELY(DISTINCT vt0.c0) AS INTEGER) ASC, NULLIF(DISTINCT CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, vt0.c0 COLLATE RTRIM)  NULLS FIRST;
SELECT COUNT(*) FROM vt0 WHERE ((~ ('-0.0'))) ORDER BY CAST(((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) AS BLOB), vt0.c0 DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((~ ('-0.0')))AND(load_extension(vt0.c0 COLLATE BINARY, ((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))))) ORDER BY 0.4678470482501538 ASC, CASE WHEN (((vt0.c0))<=((vt0.c0))) THEN ((vt0.c0) IS TRUE) WHEN ((vt0.c0)||(vt0.c0)) THEN ((vt0.c0)+(vt0.c0)) WHEN ((vt0.c0)AND(vt0.c0)) THEN ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)) WHEN x'9d9a' THEN (- (vt0.c0)) ELSE vt0.c0 END  NULLS FIRST LIMIT 2;
SELECT COUNT(*) FROM vt2 WHERE ((vt2.c1 IN (vt2.c1)) COLLATE NOCASE);
SELECT DISTINCT COUNT(*) FROM vt2 WHERE ((((vt2.c1 IN (vt2.c1)) COLLATE NOCASE)AND(((CAST(vt2.c1 AS REAL)) NOT BETWEEN (((vt2.c0)/(vt2.c1))) AND ((vt2.c0 IN (vt2.c0))))))) LIMIT 0x0;
SELECT * FROM vt2 WHERE (((((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))OR(NULL)))OR(((NULL)AND(vt2.c1)))));
SELECT * FROM vt2 WHERE (((((((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))OR(NULL)))OR(((NULL)AND(vt2.c1)))))AND(LIKELY(DISTINCT ((((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))))) LIMIT 0;
SELECT * FROM vt2 WHERE (((((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))OR(NULL)))OR(((NULL)AND(vt2.c1)))));
SELECT * FROM vt2 WHERE (((((((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))OR(NULL)))OR(((NULL)AND(vt2.c1)))))AND(LIKELY(DISTINCT ((((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))))) LIMIT 0;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON vt2.c0 WHERE ((~ (CAST(vt2.c0 AS BLOB))));
SELECT DISTINCT * FROM vt0, v0 INNER JOIN vt2 ON vt2.c0 WHERE ((((~ (CAST(vt2.c0 AS BLOB))))AND(CAST(vt0.c0 AS INTEGER)))) ORDER BY (v0.c1 IN (v0.c0 COLLATE RTRIM, (((v0.c0))>(('1247623579'))))) DESC, HEX((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON vt2.c0 WHERE ((~ (CAST(vt2.c0 AS BLOB))));
SELECT DISTINCT * FROM vt0, v0 INNER JOIN vt2 ON vt2.c0 WHERE ((((~ (CAST(vt2.c0 AS BLOB))))AND(CAST(vt0.c0 AS INTEGER)))) ORDER BY (v0.c1 IN (v0.c0 COLLATE RTRIM, (((v0.c0))>(('1247623579'))))) DESC, HEX((((v0.c2)) BETWEEN ((v0.c0)) AND ((v0.c0))))  NULLS FIRST;
SELECT MIN(vt2.c1) FROM vt2, vt0 WHERE ((- ((((vt2.c0))>=((vt2.c1)))))) ORDER BY UPPER((((vt2.c0, vt0.c0))!=((vt2.c1, vt0.c0)))) DESC  NULLS LAST, (NOT (((vt0.c0) IS TRUE))), (((('1587481811') IS FALSE))<=(((vt2.c1) NOT BETWEEN (vt2.c0) AND ('-1892106755'))))  NULLS LAST;
SELECT DISTINCT MIN(vt2.c1) FROM vt2, vt0 WHERE ((((- ((((vt2.c0))>((vt2.c1))))))AND(((((((((((vt2.c0)OR(vt0.c0)))OR(vt2.c1)))OR(vt0.c0)))AND(vt0.c0))) IS FALSE)))) ORDER BY UPPER((((vt2.c0, vt0.c0))<>((vt2.c1, vt0.c0)))) DESC  NULLS LAST, (NOT (((vt0.c0) IS TRUE))), (((('1587481811') IS FALSE))<=(((vt2.c1) NOT BETWEEN (vt2.c0) AND ('-1892106755'))))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2, vt0 WHERE (JULIANDAY(vt2.c1, vt2.c1, 0.24784002514194414, vt2.c0) COLLATE RTRIM COLLATE BINARY) ORDER BY UPPER((((vt2.c0, vt0.c0))<>((vt2.c1, vt0.c0)))) DESC  NULLS LAST, (NOT (((vt0.c0) IS TRUE))), (((('1587481811') IS FALSE))<=(((vt2.c1) NOT BETWEEN (vt2.c0) AND ('-1892106755'))))  NULLS LAST LIMIT 0;
SELECT * FROM vt2, v0 WHERE (json_type(v0.c1 COLLATE RTRIM)) ORDER BY ((MAX(v0.c3, v0.c1, v0.c1))||(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE vt2.c1 END)) ASC, (~ (v0.c0)) COLLATE RTRIM DESC, ((((v0.c2) BETWEEN (v0.c1) AND (v0.c1)))-(v0.c3));
SELECT * FROM vt2, v0 WHERE (json_type(v0.c1 COLLATE RTRIM)) ORDER BY ((MAX(v0.c3, v0.c1, v0.c1))||(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE vt2.c1 END)) ASC, (~ (v0.c0)) COLLATE RTRIM DESC, ((((v0.c2) BETWEEN (v0.c1) AND (v0.c1)))-(v0.c3));
SELECT * FROM vt2, v0 WHERE (json_type(v0.c1 COLLATE RTRIM)) ORDER BY ((MAX(v0.c3, v0.c1, v0.c1))||(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE vt2.c1 END)) ASC, (~ (v0.c0)) COLLATE RTRIM DESC, ((((v0.c2) BETWEEN (v0.c1) AND (v0.c1)))-(v0.c3));
SELECT * FROM vt2, v0 WHERE (json_type(v0.c1 COLLATE RTRIM)) ORDER BY ((MAX(v0.c3, v0.c1, v0.c1))||(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE vt2.c1 END)) ASC, (~ (v0.c0)) COLLATE RTRIM DESC, ((((v0.c2) BETWEEN (v0.c1) AND (v0.c1)))-(v0.c3));
SELECT MAX(vt0.c0) FROM vt0, vt2 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)))GLOB(((vt0.c0) BETWEEN (vt2.c1) AND (vt0.c0)))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE (((((((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)))GLOB(((vt0.c0) BETWEEN (vt2.c1) AND (vt0.c0)))))AND(TRIM(DISTINCT (((vt0.c0, vt2.c1, x'', vt0.c0, vt2.c1))=((vt2.c0, '0.4481881142625076', vt0.c0, vt0.c0, vt2.c1))))))) ORDER BY UNLIKELY(((vt2.c1) NOT BETWEEN (0.855711865185379) AND (vt0.c0))) DESC, '-551752042' ASC;
SELECT * FROM vt2, v0 WHERE ((((((((('')/(vt2.c1)))OR(v0.c2 COLLATE NOCASE)))AND((v0.c0 IN (v0.c1)))))OR(v0.c3 COLLATE RTRIM)));
SELECT ALL * FROM vt2, v0 NOT INDEXED WHERE ((((((((((('')/(vt2.c1)))OR(v0.c2 COLLATE NOCASE)))AND((v0.c0 IN (v0.c1)))))OR(v0.c3 COLLATE RTRIM)))AND(CASE WHEN v0.c1 THEN 0.7970444311367352 END COLLATE BINARY)));
SELECT * FROM vt2, v0 WHERE ((((((((('')/(vt2.c1)))OR(v0.c2 COLLATE NOCASE)))AND((v0.c0 IN (v0.c1)))))OR(v0.c3 COLLATE RTRIM)));
SELECT ALL * FROM vt2, v0 NOT INDEXED WHERE ((((((((((('')/(vt2.c1)))OR(v0.c2 COLLATE NOCASE)))AND((v0.c0 IN (v0.c1)))))OR(v0.c3 COLLATE RTRIM)))AND(CASE WHEN v0.c1 THEN 0.7970444311367352 END COLLATE BINARY)));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((((v0.c0, v0.c3)) NOT BETWEEN ((v0.c0, vt2.c0)) AND ((v0.c2, v0.c1)))) BETWEEN (v0.c2) AND (((((((((v0.c0)AND('189168943')))AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)))));
SELECT * FROM v0, vt2, vt0 WHERE ((((((((v0.c0, v0.c3)) NOT BETWEEN ((v0.c0, vt2.c0)) AND ((v0.c2, v0.c1)))) BETWEEN (v0.c2) AND (((((((((v0.c0)AND('189168943')))AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)))))AND((v0.c2 IN (x'5b'))))) LIMIT 0 INTERSECT SELECT ALL * FROM v0, vt2, vt0 WHERE (LOWER(DISTINCT UNICODE(v0.c3))) LIMIT 0;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((((v0.c0, v0.c3)) NOT BETWEEN ((v0.c0, vt2.c0)) AND ((v0.c2, v0.c1)))) BETWEEN (v0.c2) AND (((((((((v0.c0)AND('189168943')))AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)))));
SELECT * FROM v0, vt2, vt0 WHERE ((((((((v0.c0, v0.c3)) NOT BETWEEN ((v0.c0, vt2.c0)) AND ((v0.c2, v0.c1)))) BETWEEN (v0.c2) AND (((((((((v0.c0)AND('189168943')))AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)))))AND((v0.c2 IN (x'5b'))))) LIMIT 0 INTERSECT SELECT ALL * FROM v0, vt2, vt0 WHERE (LOWER(DISTINCT UNICODE(v0.c3))) LIMIT 0;
SELECT MAX(vt2.c0) FROM v0, vt2, vt0 WHERE (vt2.c0) ORDER BY ((v0.c2 COLLATE RTRIM)IS(v0.c2)) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS TEXT) AS REAL), ((((((vt2.c0) ISNULL))AND((+ (v0.c1)))))OR((((vt2.c1, vt0.c0, v0.c1, v0.c2))>((vt2.c0, v0.c0, vt2.c0, v0.c2))))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt2.c0) FROM v0, vt2, vt0 WHERE (vt2.c0) ORDER BY ((v0.c2 COLLATE RTRIM)IS(v0.c2)) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS TEXT) AS REAL), ((((((vt2.c0) ISNULL))AND((+ (v0.c1)))))OR((((vt2.c1, vt0.c0, v0.c1, v0.c2))>((vt2.c0, v0.c0, vt2.c0, v0.c2))))) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM v0, vt2, vt0 WHERE (LIKELIHOOD(CAST(vt2.c0 AS TEXT), CASE WHEN vt0.c0 THEN vt2.c0 WHEN NULL THEN v0.c2 WHEN vt2.c1 THEN v0.c0 WHEN vt2.c1 THEN v0.c2 END)) ORDER BY ((v0.c2 COLLATE RTRIM)IS(v0.c2)) DESC  NULLS FIRST, CAST(CAST(v0.c1 AS TEXT) AS REAL), ((((((vt2.c0) ISNULL))AND((+ (v0.c1)))))OR((((vt2.c1, vt0.c0, v0.c1, v0.c2))>((vt2.c0, v0.c0, vt2.c0, v0.c2))))) DESC  NULLS FIRST LIMIT 1;
SELECT * FROM vt0 CROSS JOIN v0 ON (((~ (vt2.c1)))&(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)))) LEFT OUTER JOIN vt2 ON (NOT ((v0.c1 IN ()))) WHERE ('W');
SELECT DISTINCT * FROM vt0 CROSS JOIN v0 ON (((~ (vt2.c1)))&(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)))) INNER JOIN vt2 ON (NOT ((v0.c1 IN ()))) WHERE ((('W')AND(((((vt2.c1)|(v0.c0))) NOT BETWEEN ((('2103859168')OR(v0.c2))) AND ('|3A''}ue'))))) ORDER BY ((v0.c0)|(vt2.c0))  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 CROSS JOIN v0 ON (((~ (vt2.c1)))&(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)))) INNER JOIN vt2 ON (NOT ((v0.c1 IN ()))) WHERE ((NOT ((~ (vt2.c1))))) ORDER BY ((v0.c0)|(vt2.c0))  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt0 CROSS JOIN v0 ON (((~ (vt2.c1)))&(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)))) LEFT OUTER JOIN vt2 ON (NOT ((v0.c1 IN ()))) WHERE ('W');
SELECT DISTINCT * FROM vt0 CROSS JOIN v0 ON (((~ (vt2.c1)))&(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)))) INNER JOIN vt2 ON (NOT ((v0.c1 IN ()))) WHERE ((('W')AND(((((vt2.c1)|(v0.c0))) NOT BETWEEN ((('2103859168')OR(v0.c2))) AND ('|3A''}ue'))))) ORDER BY ((v0.c0)|(vt2.c0))  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 CROSS JOIN v0 ON (((~ (vt2.c1)))&(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)))) INNER JOIN vt2 ON (NOT ((v0.c1 IN ()))) WHERE ((NOT ((~ (vt2.c1))))) ORDER BY ((v0.c0)|(vt2.c0))  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt0, vt2, v0 WHERE (((((((0.48772983967867967)&(v0.c0)))OR((vt2.c0 IN ()))))AND(((NULL) NOT BETWEEN (v0.c3) AND (vt2.c1)))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((((((0.48772983967867967)&(v0.c0)))OR((vt2.c0 IN ()))))AND(((NULL) NOT BETWEEN (v0.c3) AND (vt2.c1))))) LIMIT 0X0;
SELECT * FROM vt0, vt2, v0 WHERE (((((((0.48772983967867967)&(v0.c0)))OR((vt2.c0 IN ()))))AND(((NULL) NOT BETWEEN (v0.c3) AND (vt2.c1)))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((((((0.48772983967867967)&(v0.c0)))OR((vt2.c0 IN ()))))AND(((NULL) NOT BETWEEN (v0.c3) AND (vt2.c1))))) LIMIT 0X0;
SELECT MAX(v0.c2) FROM vt2, v0 WHERE ((((v0.c1) BETWEEN (v0.c3) AND (v0.c0)) IN ((- (v0.c3))))) ORDER BY (((((((v0.c3)AND(v0.c0)))OR(0xffffffff89b5d236)))AND(v0.c0)) IN (vt2.c1)) DESC  NULLS FIRST, 0.9346265252109911;
SELECT DISTINCT MAX(v0.c2) FROM vt2, v0 WHERE ((((v0.c1) BETWEEN (v0.c3) AND (v0.c0)) IN ((- (v0.c3))))) ORDER BY (+ ((vt2.c1 IN ())))  NULLS FIRST LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM vt2, v0 WHERE ('') ORDER BY (+ ((vt2.c1 IN ())))  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt0, vt2 WHERE (((((((((vt0.c0)OR(vt0.c0)))OR(916626587)))AND(vt2.c1)))<<(((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)))));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((((((vt0.c0)OR(vt0.c0)))OR(916626587)))AND(vt2.c1)))<<(((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1))))) INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((CAST(vt0.c0 AS REAL))+((((vt0.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c0))))));
SELECT ALL * FROM vt0, vt2 WHERE (((((((((vt0.c0)OR(vt0.c0)))OR(916626587)))AND(vt2.c1)))<<(((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)))));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((((((vt0.c0)OR(vt0.c0)))OR(916626587)))AND(vt2.c1)))<<(((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1))))) INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((CAST(vt0.c0 AS REAL))+((((vt0.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c0))))));
SELECT ALL MIN(vt2.c1) FROM v0, vt0 NATURAL JOIN vt2 WHERE (CASE (((vt2.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c0)) AND ((0.055856907582046644, v0.c3)))  WHEN (((v0.c3))<=(('f''u'))) THEN v0.c2 ELSE CAST(vt2.c1 AS REAL) END) ORDER BY (- ((vt0.c0 IN (v0.c1)))), ((v0.c2) BETWEEN (vt2.c1) AND (v0.c0)) COLLATE NOCASE;
SELECT DISTINCT MIN(vt2.c1) FROM v0, vt0 NATURAL JOIN vt2 WHERE (((CASE (((vt2.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c0)) AND ((0.055856907582046644, v0.c3)))  WHEN (((v0.c3))<(('f''u'))) THEN v0.c2 ELSE CAST(vt2.c1 AS REAL) END)AND(((CAST(vt2.c1 AS NUMERIC)) ISNULL)))) ORDER BY ((((v0.c1)&(vt2.c1))) NOT BETWEEN (((v0.c1)&(v0.c0))) AND ((NOT (vt0.c0))))  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM v0, vt0 NATURAL JOIN vt2 WHERE ((((~ (v0.c3)))%(((vt2.c1) NOT NULL)))) ORDER BY ((((v0.c1)&(vt2.c1))) NOT BETWEEN (((v0.c1)&(v0.c0))) AND ((NOT (vt0.c0))))  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE ((((+ (vt2.c1)))<>(('-1892106755' IN (v0.c3))))) ORDER BY (((v0.c3)) NOT BETWEEN (((((vt2.c1, vt2.c1))!=((vt0.c0, vt2.c1))))) AND ((CAST(v0.c0 AS BLOB))))  NULLS LAST;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((+ (vt2.c1)))<(('-1892106755' IN (v0.c3))))) ORDER BY IFNULL(((((vt2.c0)OR(v0.c0)))AND(vt2.c0)), CASE WHEN vt0.c0 THEN v0.c3 WHEN v0.c3 THEN v0.c2 ELSE v0.c2 END) DESC, ((((v0.c0)IS NOT(v0.c3))) NOT NULL)  NULLS FIRST LIMIT 3;
SELECT * FROM v0, vt2, vt0 WHERE ((((+ (vt2.c1)))<>(('-1892106755' IN (v0.c3))))) ORDER BY (((v0.c3)) NOT BETWEEN (((((vt2.c1, vt2.c1))!=((vt0.c0, vt2.c1))))) AND ((CAST(v0.c0 AS BLOB))))  NULLS LAST;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((+ (vt2.c1)))<(('-1892106755' IN (v0.c3))))) ORDER BY IFNULL(((((vt2.c0)OR(v0.c0)))AND(vt2.c0)), CASE WHEN vt0.c0 THEN v0.c3 WHEN v0.c3 THEN v0.c2 ELSE v0.c2 END) DESC, ((((v0.c0)IS NOT(v0.c3))) NOT NULL)  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt0 WHERE (-1892106755) ORDER BY IFNULL(CAST(vt0.c0 AS TEXT), ((vt0.c0) IS FALSE)) DESC, ((((((vt0.c0)OR(2108053427)))OR(vt0.c0)))AND(vt0.c0)) COLLATE BINARY COLLATE BINARY;
SELECT DISTINCT * FROM vt0 WHERE (((-1892106755)AND((+ (((vt0.c0) ISNULL)))))) ORDER BY IFNULL(CAST(vt0.c0 AS TEXT), ((vt0.c0) IS FALSE)) DESC, ((((((vt0.c0)OR(2108053427)))OR(vt0.c0)))AND(vt0.c0)) COLLATE BINARY COLLATE BINARY;
SELECT ALL * FROM vt0 WHERE (-1892106755) ORDER BY IFNULL(CAST(vt0.c0 AS TEXT), ((vt0.c0) IS FALSE)) DESC, ((((((vt0.c0)OR(2108053427)))OR(vt0.c0)))AND(vt0.c0)) COLLATE BINARY COLLATE BINARY;
SELECT DISTINCT * FROM vt0 WHERE (((-1892106755)AND((+ (((vt0.c0) ISNULL)))))) ORDER BY IFNULL(CAST(vt0.c0 AS TEXT), ((vt0.c0) IS FALSE)) DESC, ((((((vt0.c0)OR(2108053427)))OR(vt0.c0)))AND(vt0.c0)) COLLATE BINARY COLLATE BINARY;
SELECT ALL * FROM vt0 INNER JOIN v0 ON v0.c2 CROSS JOIN vt2 ON ((vt0.c0) BETWEEN (vt2.c1) AND (v0.c0)) COLLATE NOCASE WHERE (((v0.c3 COLLATE RTRIM) BETWEEN (v0.c2 COLLATE BINARY) AND (x'81')));
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON v0.c2 CROSS JOIN vt2 ON ((vt0.c0) BETWEEN (vt2.c1) AND (v0.c0)) COLLATE NOCASE WHERE (((((v0.c3 COLLATE RTRIM) BETWEEN (v0.c2 COLLATE BINARY) AND (x'81')))AND(((((((((v0.c1 COLLATE BINARY)OR((((vt0.c0, x'16744d', vt0.c0))<((v0.c3, 0.39469908384747054, vt2.c1))))))AND(v0.c2 COLLATE BINARY)))OR(DATE(v0.c2, '189168943', v0.c0, vt0.c0))))AND(ABS(v0.c1)))))) LIMIT 0X4;
SELECT ALL * FROM vt0 INNER JOIN v0 ON v0.c2 CROSS JOIN vt2 ON ((vt0.c0) BETWEEN (vt2.c1) AND (v0.c0)) COLLATE NOCASE WHERE (((v0.c3 COLLATE RTRIM) BETWEEN (v0.c2 COLLATE BINARY) AND (x'81')));
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON v0.c2 CROSS JOIN vt2 ON ((vt0.c0) BETWEEN (vt2.c1) AND (v0.c0)) COLLATE NOCASE WHERE (((((v0.c3 COLLATE RTRIM) BETWEEN (v0.c2 COLLATE BINARY) AND (x'81')))AND(((((((((v0.c1 COLLATE BINARY)OR((((vt0.c0, x'16744d', vt0.c0))<((v0.c3, 0.39469908384747054, vt2.c1))))))AND(v0.c2 COLLATE BINARY)))OR(DATE(v0.c2, '189168943', v0.c0, vt0.c0))))AND(ABS(v0.c1)))))) LIMIT 0X4;
SELECT MIN(vt2.c1) FROM v0, vt2, vt0 WHERE ((('i') NOTNULL)) ORDER BY CASE LIKELY(v0.c3)  WHEN (((vt2.c1, v0.c3))<=((vt0.c0, v0.c2))) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c3 END WHEN ABS(vt2.c1) THEN LIKELY(v0.c0) END ASC  NULLS LAST;
SELECT DISTINCT MIN(vt2.c1) FROM v0, vt2, vt0 WHERE ((('i') NOTNULL)) ORDER BY CASE LIKELY(v0.c3)  WHEN (((vt2.c1, v0.c3))<=((vt0.c0, v0.c2))) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c3 END WHEN ABS(vt2.c1) THEN LIKELY(v0.c0) END ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM v0, vt2, vt0 WHERE (((((((((v0.c3) NOT BETWEEN (vt2.c0) AND ('-1682395901')))OR(CAST(v0.c1 AS REAL))))OR((vt2.c1 IN (v0.c0, v0.c0, v0.c3)))))OR(((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c1))))) ORDER BY CASE LIKELY(v0.c3)  WHEN (((vt2.c1, v0.c3))<=((vt0.c0, v0.c2))) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c3 END WHEN ABS(vt2.c1) THEN LIKELY(v0.c0) END ASC  NULLS LAST LIMIT 0;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (ABS(CASE v0.c2  WHEN v0.c3 THEN v0.c1 END));
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((ABS(CASE v0.c2  WHEN v0.c3 THEN v0.c1 END))AND(((((v0.c1)IS(v0.c2))) NOTNULL))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((NOT ((vt2.c0 IN ()))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((NOT ((vt2.c0 IN ()))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((NOT ((vt2.c0 IN ()))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((NOT ((vt2.c0 IN ()))));
SELECT ALL * FROM v0 WHERE (((CASE v0.c2  WHEN v0.c0 THEN v0.c3 ELSE v0.c3 END) IS TRUE)) ORDER BY ((CASE WHEN v0.c2 THEN v0.c3 WHEN x'9462' THEN v0.c1 END) NOT BETWEEN (CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN 'iev' END) AND (v0.c2 COLLATE RTRIM)), v0.c2 COLLATE BINARY  NULLS LAST, ((((((x'4e' COLLATE RTRIM)AND(x'' COLLATE BINARY)))AND(v0.c2 COLLATE RTRIM)))AND(((((v0.c0)OR(v0.c2)))OR(v0.c1)))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((CASE v0.c2  WHEN v0.c0 THEN v0.c3 ELSE v0.c3 END) IS TRUE))AND(TIME(CAST(v0.c1 AS TEXT), ((v0.c3)==(v0.c1)), ((((((((x'0f5b')AND(v0.c3)))AND(NULL)))AND(v0.c2)))OR('-739972684')), (((v0.c0, v0.c1, v0.c3, v0.c0, v0.c2))=((v0.c1, v0.c3, v0.c2, v0.c1, v0.c2))))))) ORDER BY IFNULL('1646465875', COALESCE(v0.c2, v0.c1, v0.c1, v0.c1));
SELECT ALL * FROM v0 WHERE (((CASE v0.c2  WHEN v0.c0 THEN v0.c3 ELSE v0.c3 END) IS TRUE)) ORDER BY ((CASE WHEN v0.c2 THEN v0.c3 WHEN x'9462' THEN v0.c1 END) NOT BETWEEN (CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN 'iev' END) AND (v0.c2 COLLATE RTRIM)), v0.c2 COLLATE BINARY  NULLS LAST, ((((((x'4e' COLLATE RTRIM)AND(x'' COLLATE BINARY)))AND(v0.c2 COLLATE RTRIM)))AND(((((v0.c0)OR(v0.c2)))OR(v0.c1)))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((CASE v0.c2  WHEN v0.c0 THEN v0.c3 ELSE v0.c3 END) IS TRUE))AND(TIME(CAST(v0.c1 AS TEXT), ((v0.c3)==(v0.c1)), ((((((((x'0f5b')AND(v0.c3)))AND(NULL)))AND(v0.c2)))OR('-739972684')), (((v0.c0, v0.c1, v0.c3, v0.c0, v0.c2))=((v0.c1, v0.c3, v0.c2, v0.c1, v0.c2))))))) ORDER BY IFNULL('1646465875', COALESCE(v0.c2, v0.c1, v0.c1, v0.c1));
SELECT * FROM v0, vt0 WHERE (CASE WHEN NULL THEN (v0.c3 IN ()) WHEN CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c3 END THEN ((((((((((0.016605271589885562)AND(vt0.c0)))OR(2.017635915E9)))AND(v0.c1)))AND(v0.c1)))OR(v0.c0)) WHEN CAST(vt0.c0 AS NUMERIC) THEN v0.c2 COLLATE RTRIM WHEN (NOT (v0.c1)) THEN v0.c1 ELSE ((v0.c2)%(v0.c3)) END) ORDER BY (('')==(LIKELY(v0.c2))) ASC  NULLS LAST, ((v0.c1 IN (vt0.c0)) IN ((+ (vt0.c0)), CAST(v0.c0 AS TEXT), CASE v0.c1  WHEN v0.c3 THEN v0.c1 END))  NULLS LAST, ((CASE WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN v0.c2 END) BETWEEN (((v0.c0) BETWEEN (v0.c1) AND (v0.c0))) AND (0.653097861329802)) ASC;
SELECT DISTINCT * FROM v0, vt0 WHERE (CASE WHEN NULL THEN (v0.c3 IN ()) WHEN CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c3 END THEN ((((((((((0.016605271589885562)AND(vt0.c0)))OR(2.017635915E9)))AND(v0.c1)))AND(v0.c1)))OR(v0.c0)) WHEN CAST(vt0.c0 AS NUMERIC) THEN v0.c2 COLLATE RTRIM WHEN (NOT (v0.c1)) THEN v0.c1 ELSE ((v0.c2)%(v0.c3)) END) ORDER BY ((v0.c1)<(v0.c0)) COLLATE BINARY ASC, (~ ((v0.c3 IN (v0.c2)))) DESC  NULLS LAST, ((((v0.c1)>=(0xffffffffdf1cee96))) BETWEEN (((v0.c1)>>(vt0.c0))) AND ((((v0.c2, v0.c3, vt0.c0, v0.c1))>=((0.5559858879445433, v0.c1, vt0.c0, v0.c2)))))  NULLS FIRST;
SELECT * FROM v0, vt0 WHERE (CASE WHEN NULL THEN (v0.c3 IN ()) WHEN CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c3 END THEN ((((((((((0.016605271589885562)AND(vt0.c0)))OR(2.017635915E9)))AND(v0.c1)))AND(v0.c1)))OR(v0.c0)) WHEN CAST(vt0.c0 AS NUMERIC) THEN v0.c2 COLLATE RTRIM WHEN (NOT (v0.c1)) THEN v0.c1 ELSE ((v0.c2)%(v0.c3)) END) ORDER BY (('')==(LIKELY(v0.c2))) ASC  NULLS LAST, ((v0.c1 IN (vt0.c0)) IN ((+ (vt0.c0)), CAST(v0.c0 AS TEXT), CASE v0.c1  WHEN v0.c3 THEN v0.c1 END))  NULLS LAST, ((CASE WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN v0.c2 END) BETWEEN (((v0.c0) BETWEEN (v0.c1) AND (v0.c0))) AND (0.653097861329802)) ASC;
SELECT DISTINCT * FROM v0, vt0 WHERE (CASE WHEN NULL THEN (v0.c3 IN ()) WHEN CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c3 END THEN ((((((((((0.016605271589885562)AND(vt0.c0)))OR(2.017635915E9)))AND(v0.c1)))AND(v0.c1)))OR(v0.c0)) WHEN CAST(vt0.c0 AS NUMERIC) THEN v0.c2 COLLATE RTRIM WHEN (NOT (v0.c1)) THEN v0.c1 ELSE ((v0.c2)%(v0.c3)) END) ORDER BY ((v0.c1)<(v0.c0)) COLLATE BINARY ASC, (~ ((v0.c3 IN (v0.c2)))) DESC  NULLS LAST, ((((v0.c1)>=(0xffffffffdf1cee96))) BETWEEN (((v0.c1)>>(vt0.c0))) AND ((((v0.c2, v0.c3, vt0.c0, v0.c1))>=((0.5559858879445433, v0.c1, vt0.c0, v0.c2)))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0, v0 INNER JOIN vt2 ON ((CHANGES()) BETWEEN (0.3936577412191312) AND (((vt2.c0) BETWEEN (v0.c0) AND (vt0.c0)))) WHERE ((((TYPEOF(DISTINCT NULL), CAST(vt2.c1 AS BLOB)))!=((((((0xd96a82b)OR(vt2.c1)))AND('|s')), CASE vt0.c0  WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN v0.c2 WHEN vt0.c0 THEN v0.c0 ELSE vt0.c0 END)))) ORDER BY '(6jn.䂙97' DESC;
SELECT ALL COUNT(*) FROM vt0, v0 INNER JOIN vt2 ON ((CHANGES()) BETWEEN (0.3936577412191312) AND (((vt2.c0) BETWEEN (v0.c0) AND (vt0.c0)))) WHERE ((((TYPEOF(DISTINCT NULL), CAST(vt2.c1 AS BLOB)))>((((((0Xd96a82b)OR(vt2.c1)))AND('|s')), CASE vt0.c0  WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN v0.c2 WHEN vt0.c0 THEN v0.c0 ELSE vt0.c0 END)))) ORDER BY '(6jn.䂙97' DESC LIMIT 0X0;
SELECT ALL MAX(v0.c2) FROM vt0, v0 WHERE ((- ((NOT (vt0.c0)))));
SELECT MAX(v0.c2) FROM vt0, v0 WHERE ((- ((NOT (vt0.c0))))) ORDER BY (((v0.c2, v0.c3, vt0.c0, 0.7845105119731293))>=((v0.c2, vt0.c0, v0.c1, v0.c0))) COLLATE BINARY DESC, ABS((((v0.c2))<((v0.c0))))  NULLS FIRST, CAST((((v0.c1, v0.c3, v0.c3, v0.c1)) NOT BETWEEN ((v0.c3, v0.c1, vt0.c0, v0.c0)) AND ((vt0.c0, v0.c3, v0.c0, 0x7412a12c))) AS TEXT) ASC  NULLS LAST LIMIT 0X2 INTERSECT SELECT ALL MAX(v0.c2) FROM vt0, v0 WHERE (((((vt0.c0)||(NULL))) ISNULL)) ORDER BY (((v0.c2, v0.c3, vt0.c0, 0.7845105119731293))>=((v0.c2, vt0.c0, v0.c1, v0.c0))) COLLATE BINARY DESC, ABS((((v0.c2))<((v0.c0))))  NULLS FIRST, CAST((((v0.c1, v0.c3, v0.c3, v0.c1)) NOT BETWEEN ((v0.c3, v0.c1, vt0.c0, v0.c0)) AND ((vt0.c0, v0.c3, v0.c0, 0X7412a12c))) AS TEXT) ASC  NULLS LAST LIMIT 0X2;
SELECT ALL MIN(vt2.c1) FROM vt2, v0, vt0 WHERE (CASE (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((vt2.c1)))  WHEN vt0.c0 COLLATE RTRIM THEN (((v0.c2)) NOT BETWEEN ((vt2.c1)) AND ((v0.c3))) WHEN ((((NULL)OR(v0.c0)))AND(vt0.c0)) THEN CASE v0.c0  WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c3 WHEN vt2.c0 THEN v0.c2 ELSE v0.c2 END WHEN SUBSTR(vt2.c0, vt0.c0) THEN CAST(v0.c0 AS NUMERIC) WHEN ((((((v0.c2)OR(v0.c3)))AND(vt2.c0)))OR(vt0.c0)) THEN ((vt2.c1)IS(v0.c2)) END);
SELECT DISTINCT MIN(vt2.c1) FROM vt2, v0, vt0 WHERE (((CASE (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((vt2.c1)))  WHEN vt0.c0 COLLATE RTRIM THEN (((v0.c2)) NOT BETWEEN ((vt2.c1)) AND ((v0.c3))) WHEN ((((NULL)OR(v0.c0)))AND(vt0.c0)) THEN CASE v0.c0  WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c3 WHEN vt2.c0 THEN v0.c2 ELSE v0.c2 END WHEN SUBSTR(vt2.c0, vt0.c0) THEN CAST(v0.c0 AS NUMERIC) WHEN ((((((v0.c2)OR(v0.c3)))AND(vt2.c0)))OR(vt0.c0)) THEN ((vt2.c1)IS(v0.c2)) END)AND((((v0.c1) NOTNULL) IN ())))) ORDER BY -4.33181884E8 COLLATE RTRIM, v0.c0 DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2, v0, vt0 WHERE (v0.c0) ORDER BY -4.33181884E8 COLLATE RTRIM, v0.c0 DESC  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt0, vt2 WHERE ((((vt0.c0)) NOT BETWEEN ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (NULL)))) AND (((vt2.c0 IN (vt2.c0))))));
SELECT DISTINCT * FROM vt0, vt2 WHERE ((((((vt0.c0)) NOT BETWEEN ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (NULL)))) AND (((vt2.c0 IN (vt2.c0))))))AND(CAST(((((((((((vt0.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)) AS INTEGER)))) INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (0.5023611030221758);
SELECT ALL * FROM vt0, vt2 WHERE ((((vt0.c0)) NOT BETWEEN ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (NULL)))) AND (((vt2.c0 IN (vt2.c0))))));
SELECT DISTINCT * FROM vt0, vt2 WHERE ((((((vt0.c0)) NOT BETWEEN ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (NULL)))) AND (((vt2.c0 IN (vt2.c0))))))AND(CAST(((((((((((vt0.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)) AS INTEGER)))) INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (0.5023611030221758);
SELECT MIN(v0.c2) FROM v0 CROSS JOIN vt2 ON CASE WHEN ((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c2)) THEN vt2.c0 COLLATE BINARY ELSE (NOT (vt2.c1)) END WHERE (CASE WHEN (NOT (v0.c1)) THEN load_extension(x'c7', v0.c3) WHEN ((vt2.c1) ISNULL) THEN (((vt2.c0, v0.c1, v0.c1, vt2.c1)) NOT BETWEEN ((v0.c0, vt2.c1, v0.c2, v0.c0)) AND ((v0.c1, vt2.c0, 0Xffffffff8442608f, vt2.c0))) END);
SELECT ALL MIN(v0.c2) FROM v0 CROSS JOIN vt2 ON CASE WHEN ((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c2)) THEN vt2.c0 COLLATE BINARY ELSE (NOT (vt2.c1)) END WHERE (((CASE WHEN (NOT (v0.c1)) THEN load_extension(x'c7', v0.c3) WHEN ((vt2.c1) ISNULL) THEN (((vt2.c0, v0.c1, v0.c1, vt2.c1)) NOT BETWEEN ((v0.c0, vt2.c1, v0.c2, v0.c0)) AND ((v0.c1, vt2.c0, -2076024689, vt2.c0))) END)AND(NULL))) LIMIT 0;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((vt2.c0 COLLATE BINARY) IS TRUE)) ORDER BY (((0.27795130234031706))>((x'ce00'))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((vt2.c0 COLLATE BINARY) IS TRUE)) ORDER BY (((0.27795130234031706))>((x'ce00'))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST(((vt2.c1) BETWEEN (v0.c0) AND (v0.c0)) AS BLOB)) ORDER BY (((0.27795130234031706))>((x'ce00'))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((vt2.c0 COLLATE BINARY) IS TRUE)) ORDER BY (((0.27795130234031706))>((x'ce00'))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((vt2.c0 COLLATE BINARY) IS TRUE)) ORDER BY (((0.27795130234031706))>((x'ce00'))) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST(((vt2.c1) BETWEEN (v0.c0) AND (v0.c0)) AS BLOB)) ORDER BY (((0.27795130234031706))>((x'ce00'))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (0.743805023764662);
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (0.743805023764662) INTERSECT SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((vt0.c0)LIKE((NOT (v0.c2)))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) IN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (((NULL)>=(vt0.c0)) IN ()), ((((((((CAST(vt0.c0 AS TEXT))AND(((vt0.c0)-(NULL)))))AND(((vt0.c0) NOT NULL))))OR(((('0-2s(')) NOT BETWEEN ((NULL)) AND ((vt0.c0))))))OR(vt0.c0)) ASC  NULLS LAST, ((vt0.c0)>>(((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(x'')))AND(vt0.c0))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) IN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (((NULL)>=(vt0.c0)) IN ()), ((((((((CAST(vt0.c0 AS TEXT))AND(((vt0.c0)-(NULL)))))AND(((vt0.c0) NOT NULL))))OR(((('0-2s(')) NOT BETWEEN ((NULL)) AND ((vt0.c0))))))OR(vt0.c0)) ASC  NULLS LAST, ((vt0.c0)>>(((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(x'')))AND(vt0.c0)))) LIMIT 0X0;
SELECT ALL * FROM v0, vt2 WHERE (((v0.c0) ISNULL));
SELECT ALL * FROM v0, vt2 WHERE (((((v0.c0) ISNULL))AND(NULL))) ORDER BY CAST((v0.c3 IN ()) AS TEXT), vt2.c0;
SELECT ALL * FROM v0, vt2 WHERE (((v0.c0) ISNULL));
SELECT ALL * FROM v0, vt2 WHERE (((((v0.c0) ISNULL))AND(NULL))) ORDER BY CAST((v0.c3 IN ()) AS TEXT), vt2.c0;
SELECT ALL COUNT(*) FROM v0 WHERE (SQLITE_VERSION() COLLATE BINARY);
SELECT COUNT(*) FROM v0 WHERE (((SQLITE_VERSION() COLLATE BINARY)AND(v0.c2)));
SELECT COUNT(*) FROM vt2 CROSS JOIN vt0 ON ((v0.c3) IS FALSE) NATURAL JOIN v0 WHERE (((CASE WHEN vt0.c0 THEN vt2.c1 END)/(vt2.c0 COLLATE NOCASE)));
SELECT DISTINCT COUNT(*) FROM vt2 CROSS JOIN vt0 ON ((v0.c3) IS FALSE) NATURAL JOIN v0 WHERE (((((CASE WHEN vt0.c0 THEN vt2.c1 END)/(vt2.c0 COLLATE NOCASE)))AND(vt2.c0))) ORDER BY v0.c2 COLLATE BINARY, (x'585f4c' IN (((v0.c3) BETWEEN (v0.c0) AND (v0.c0)))), ((((v0.c3) NOTNULL))=(NULL)) INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 CROSS JOIN vt0 ON ((v0.c3) IS FALSE) NATURAL JOIN v0 WHERE (((((((v0.c2)<(vt0.c0)))OR(((v0.c1)||(vt2.c1)))))AND(((((vt2.c1)OR(v0.c2)))AND(vt0.c0))))) ORDER BY v0.c2 COLLATE BINARY, (x'585f4c' IN (((v0.c3) BETWEEN (v0.c0) AND (v0.c0)))), ((((v0.c3) NOTNULL))=(NULL));
SELECT * FROM v0 INNER JOIN vt0 ON CASE WHEN ((((((((((v0.c3)AND(v0.c2)))AND(v0.c1)))AND('-1246891389')))AND(v0.c0)))AND(v0.c2)) THEN ((v0.c0) IS TRUE) ELSE ((v0.c1)IS NOT(v0.c0)) END WHERE (((v0.c3) BETWEEN (((((((v0.c3)AND(vt0.c0)))OR(vt0.c0)))AND(v0.c3))) AND (((((((v0.c2)AND(v0.c2)))OR(vt0.c0)))AND(v0.c2))))) ORDER BY CASE WHEN (v0.c3 IN ()) THEN (v0.c3 IN (v0.c3, v0.c0)) WHEN ((vt0.c0) ISNULL) THEN (- (v0.c3)) ELSE ((vt0.c0)IS NOT(v0.c3)) END  NULLS FIRST, ((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c1))) BETWEEN (CASE v0.c2  WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 END) AND (CAST(vt0.c0 AS NUMERIC))) ASC;
SELECT ALL * FROM v0 INNER JOIN vt0 ON CASE WHEN ((((((((((v0.c3)AND(v0.c2)))AND(v0.c1)))AND('-1246891389')))AND(v0.c0)))AND(v0.c2)) THEN ((v0.c0) IS TRUE) ELSE ((v0.c1)IS NOT(v0.c0)) END WHERE (((v0.c3) BETWEEN (((((((v0.c3)AND(vt0.c0)))OR(vt0.c0)))AND(v0.c3))) AND (((((((v0.c2)AND(v0.c2)))OR(vt0.c0)))AND(v0.c2))))) ORDER BY CASE WHEN (v0.c3 IN ()) THEN (v0.c3 IN (v0.c3, v0.c0)) WHEN ((vt0.c0) ISNULL) THEN (- (v0.c3)) ELSE ((vt0.c0)IS NOT(v0.c3)) END  NULLS FIRST, ((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c1))) BETWEEN (CASE v0.c2  WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 END) AND (CAST(vt0.c0 AS NUMERIC))) ASC;
SELECT * FROM v0 INNER JOIN vt0 ON CASE WHEN ((((((((((v0.c3)AND(v0.c2)))AND(v0.c1)))AND('-1246891389')))AND(v0.c0)))AND(v0.c2)) THEN ((v0.c0) IS TRUE) ELSE ((v0.c1)IS NOT(v0.c0)) END WHERE (((v0.c3) BETWEEN (((((((v0.c3)AND(vt0.c0)))OR(vt0.c0)))AND(v0.c3))) AND (((((((v0.c2)AND(v0.c2)))OR(vt0.c0)))AND(v0.c2))))) ORDER BY CASE WHEN (v0.c3 IN ()) THEN (v0.c3 IN (v0.c3, v0.c0)) WHEN ((vt0.c0) ISNULL) THEN (- (v0.c3)) ELSE ((vt0.c0)IS NOT(v0.c3)) END  NULLS FIRST, ((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c1))) BETWEEN (CASE v0.c2  WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 END) AND (CAST(vt0.c0 AS NUMERIC))) ASC;
SELECT ALL * FROM v0 INNER JOIN vt0 ON CASE WHEN ((((((((((v0.c3)AND(v0.c2)))AND(v0.c1)))AND('-1246891389')))AND(v0.c0)))AND(v0.c2)) THEN ((v0.c0) IS TRUE) ELSE ((v0.c1)IS NOT(v0.c0)) END WHERE (((v0.c3) BETWEEN (((((((v0.c3)AND(vt0.c0)))OR(vt0.c0)))AND(v0.c3))) AND (((((((v0.c2)AND(v0.c2)))OR(vt0.c0)))AND(v0.c2))))) ORDER BY CASE WHEN (v0.c3 IN ()) THEN (v0.c3 IN (v0.c3, v0.c0)) WHEN ((vt0.c0) ISNULL) THEN (- (v0.c3)) ELSE ((vt0.c0)IS NOT(v0.c3)) END  NULLS FIRST, ((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c1))) BETWEEN (CASE v0.c2  WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 END) AND (CAST(vt0.c0 AS NUMERIC))) ASC;
SELECT * FROM vt0 CROSS JOIN v0 ON ((vt2.c0 IN ()) IN ()) CROSS JOIN vt2 ON ((((((((vt2.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((((((((v0.c2)AND(v0.c3)))AND(v0.c0)))AND(v0.c1)))OR('-329968071')))))OR((+ (v0.c2)))))AND((v0.c2 IN (v0.c0)))) WHERE (0.27985506075695055);
SELECT DISTINCT * FROM vt0 CROSS JOIN v0 ON ((vt2.c0 IN ()) IN ()) CROSS JOIN vt2 ON ((((((((vt2.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((((((((v0.c2)AND(v0.c3)))AND(v0.c0)))AND(v0.c1)))OR('-329968071')))))OR((+ (v0.c2)))))AND((v0.c2 IN (v0.c0)))) WHERE (0.27985506075695055);
SELECT * FROM vt0 CROSS JOIN v0 ON ((vt2.c0 IN ()) IN ()) CROSS JOIN vt2 ON ((((((((vt2.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((((((((v0.c2)AND(v0.c3)))AND(v0.c0)))AND(v0.c1)))OR('-329968071')))))OR((+ (v0.c2)))))AND((v0.c2 IN (v0.c0)))) WHERE (0.27985506075695055);
SELECT DISTINCT * FROM vt0 CROSS JOIN v0 ON ((vt2.c0 IN ()) IN ()) CROSS JOIN vt2 ON ((((((((vt2.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((((((((v0.c2)AND(v0.c3)))AND(v0.c0)))AND(v0.c1)))OR('-329968071')))))OR((+ (v0.c2)))))AND((v0.c2 IN (v0.c0)))) WHERE (0.27985506075695055);
SELECT ALL * FROM vt0 WHERE (CASE ((vt0.c0) NOT NULL)  WHEN vt0.c0 COLLATE RTRIM THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) ELSE (vt0.c0 IN (vt0.c0)) END);
SELECT * FROM vt0 WHERE (CASE ((vt0.c0) NOT NULL)  WHEN vt0.c0 COLLATE RTRIM THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) ELSE (vt0.c0 IN (vt0.c0)) END) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (CASE ((vt0.c0) NOT NULL)  WHEN vt0.c0 COLLATE RTRIM THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) ELSE (vt0.c0 IN (vt0.c0)) END);
SELECT * FROM vt0 WHERE (CASE ((vt0.c0) NOT NULL)  WHEN vt0.c0 COLLATE RTRIM THEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) ELSE (vt0.c0 IN (vt0.c0)) END) LIMIT 0x1;
SELECT COUNT(*) FROM v0 WHERE (((((v0.c2)||(v0.c3)))+(v0.c3)));
SELECT ALL COUNT(*) FROM v0 WHERE (((((((v0.c2)||(v0.c3)))+(v0.c3)))AND((- ((((NULL, v0.c2)) NOT BETWEEN ((v0.c0, v0.c2)) AND ((v0.c2, v0.c0)))))))) ORDER BY CAST(LIKELIHOOD(v0.c3, 0.7521986040011006) AS INTEGER) ASC, ((v0.c0) NOTNULL) COLLATE NOCASE INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE (((NULL)LIKE(NULLIF(v0.c3, v0.c2)))) ORDER BY CAST(LIKELIHOOD(v0.c3, 0.7521986040011006) AS INTEGER) ASC, ((v0.c0) NOTNULL) COLLATE NOCASE;
SELECT MAX(v0.c0) FROM vt0, v0 WHERE (((CAST(vt0.c0 AS TEXT))<(CAST(vt0.c0 AS TEXT))));
SELECT ALL MAX(v0.c0) FROM vt0, v0 WHERE (((CAST(vt0.c0 AS TEXT))<(CAST(vt0.c0 AS TEXT)))) ORDER BY (((v0.c2) NOTNULL) IN (((v0.c3)>(v0.c0)), ((v0.c2)IS NOT(vt0.c0))))  NULLS LAST, (((0.35576372066017514 IN (v0.c0)))<(((v0.c0)=(v0.c1)))) DESC, ((((v0.c0)<=(v0.c3)))/(((v0.c2)<<(v0.c3)))) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT MAX(v0.c0) FROM vt0, v0 WHERE (CASE ((((((v0.c0)AND(v0.c3)))AND(v0.c3)))AND(NULL))  WHEN v0.c0 THEN vt0.c0 WHEN ((v0.c0)+(v0.c0)) THEN CAST(NULL AS BLOB) END) ORDER BY (((v0.c2) NOTNULL) IN (((v0.c3)>(v0.c0)), ((v0.c2)IS NOT(vt0.c0))))  NULLS LAST, (((0.35576372066017514 IN (v0.c0)))<(((v0.c0)==(v0.c1)))) DESC, ((((v0.c0)<=(v0.c3)))/(((v0.c2)<<(v0.c3)))) DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0, vt2 WHERE ((((vt0.c0, '526554451' COLLATE BINARY, (((vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt0.c0)))))>=((0.1140819637753624, (vt0.c0 IN ('0.855711865185379', vt2.c0)), ((((vt0.c0)OR(vt2.c1)))OR(-1840222491)))))) ORDER BY (((vt2.c1, vt2.c0)) NOT BETWEEN ((((vt0.c0)&(vt2.c1)), ((vt2.c1) IS TRUE))) AND ((((0.9232860224660351)<(vt0.c0)), CAST(vt0.c0 AS INTEGER)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0, vt2 NOT INDEXED WHERE ((((vt0.c0, '526554451' COLLATE BINARY, (((vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt0.c0)))))==((0.1140819637753624, (vt0.c0 IN ('0.855711865185379', vt2.c0)), ((((vt0.c0)OR(vt2.c1)))OR(0Xffffffff92506ee5)))))) ORDER BY (((vt2.c1, vt2.c0)) NOT BETWEEN ((((vt0.c0)&(vt2.c1)), ((vt2.c1) IS TRUE))) AND ((((0.9232860224660351)<(vt0.c0)), CAST(vt0.c0 AS INTEGER)))) ASC  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE ((((vt0.c0, '526554451' COLLATE BINARY, (((vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt0.c0)))))>=((0.1140819637753624, (vt0.c0 IN ('0.855711865185379', vt2.c0)), ((((vt0.c0)OR(vt2.c1)))OR(-1840222491)))))) ORDER BY (((vt2.c1, vt2.c0)) NOT BETWEEN ((((vt0.c0)&(vt2.c1)), ((vt2.c1) IS TRUE))) AND ((((0.9232860224660351)<(vt0.c0)), CAST(vt0.c0 AS INTEGER)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0, vt2 NOT INDEXED WHERE ((((vt0.c0, '526554451' COLLATE BINARY, (((vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt0.c0)))))==((0.1140819637753624, (vt0.c0 IN ('0.855711865185379', vt2.c0)), ((((vt0.c0)OR(vt2.c1)))OR(0Xffffffff92506ee5)))))) ORDER BY (((vt2.c1, vt2.c0)) NOT BETWEEN ((((vt0.c0)&(vt2.c1)), ((vt2.c1) IS TRUE))) AND ((((0.9232860224660351)<(vt0.c0)), CAST(vt0.c0 AS INTEGER)))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE ((- (((NULL)|(v0.c3)))));
SELECT DISTINCT * FROM v0 WHERE ((- (((NULL)|(v0.c3))))) ORDER BY v0.c1 ASC, ((NULL) NOT BETWEEN (CAST(v0.c3 AS REAL)) AND (((v0.c1)|(v0.c3)))) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(0.5835725136937094 AS REAL) COLLATE BINARY) ORDER BY v0.c1 ASC, ((NULL) NOT BETWEEN (CAST(v0.c3 AS REAL)) AND (((v0.c1)|(v0.c3)))) DESC  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE ((- (((NULL)|(v0.c3)))));
SELECT DISTINCT * FROM v0 WHERE ((- (((NULL)|(v0.c3))))) ORDER BY v0.c1 ASC, ((NULL) NOT BETWEEN (CAST(v0.c3 AS REAL)) AND (((v0.c1)|(v0.c3)))) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(0.5835725136937094 AS REAL) COLLATE BINARY) ORDER BY v0.c1 ASC, ((NULL) NOT BETWEEN (CAST(v0.c3 AS REAL)) AND (((v0.c1)|(v0.c3)))) DESC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM v0 LEFT OUTER JOIN vt0 ON ((('-567218797' IN ()))IS(((v0.c2) NOT NULL))) WHERE (-734232506);
SELECT DISTINCT COUNT(*) FROM v0 LEFT OUTER JOIN vt0 ON ((('-567218797' IN ()))IS(((v0.c2) NOT NULL))) WHERE (((-734232506)AND(((((((json_valid(v0.c3))AND(CAST(v0.c1 AS TEXT))))OR(((v0.c3) BETWEEN (v0.c0) AND (v0.c3)))))OR(((v0.c2) IS TRUE)))))) LIMIT 0X2;
SELECT ALL * FROM vt2 LEFT OUTER JOIN vt0 ON vt0.c0 NATURAL JOIN v0 WHERE ((((((v0.c1)<>(vt2.c1)), ((vt2.c1)>>(vt2.c0))))>=(((((vt2.c0, v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c2, v0.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, v0.c3, v0.c3, v0.c3))), TRIM(DISTINCT v0.c0))))) ORDER BY IFNULL((((vt2.c0)) BETWEEN ((v0.c0)) AND ((v0.c0))), ((v0.c2)<(v0.c1)))  NULLS LAST, CAST(((vt0.c0)|(vt2.c1)) AS BLOB);
SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON vt0.c0 NATURAL JOIN v0 WHERE ((((((v0.c1)<>(vt2.c1)), ((vt2.c1)>>(vt2.c0))))==(((((vt2.c0, v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c2, v0.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, v0.c3, v0.c3, v0.c3))), TRIM(DISTINCT v0.c0))))) ORDER BY IFNULL((((vt2.c0)) BETWEEN ((v0.c0)) AND ((v0.c0))), ((v0.c2)<(v0.c1)))  NULLS LAST, CAST(((vt0.c0)|(vt2.c1)) AS BLOB) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON vt0.c0 NATURAL JOIN v0 WHERE (json_valid(vt2.c0) COLLATE BINARY) ORDER BY IFNULL((((vt2.c0)) BETWEEN ((v0.c0)) AND ((v0.c0))), ((v0.c2)<(v0.c1)))  NULLS LAST, CAST(((vt0.c0)|(vt2.c1)) AS BLOB) LIMIT 0X2;
SELECT ALL * FROM vt2 LEFT OUTER JOIN vt0 ON vt0.c0 NATURAL JOIN v0 WHERE ((((((v0.c1)<>(vt2.c1)), ((vt2.c1)>>(vt2.c0))))>=(((((vt2.c0, v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c2, v0.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, v0.c3, v0.c3, v0.c3))), TRIM(DISTINCT v0.c0))))) ORDER BY IFNULL((((vt2.c0)) BETWEEN ((v0.c0)) AND ((v0.c0))), ((v0.c2)<(v0.c1)))  NULLS LAST, CAST(((vt0.c0)|(vt2.c1)) AS BLOB);
SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON vt0.c0 NATURAL JOIN v0 WHERE ((((((v0.c1)<>(vt2.c1)), ((vt2.c1)>>(vt2.c0))))==(((((vt2.c0, v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c2, v0.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, v0.c3, v0.c3, v0.c3))), TRIM(DISTINCT v0.c0))))) ORDER BY IFNULL((((vt2.c0)) BETWEEN ((v0.c0)) AND ((v0.c0))), ((v0.c2)<(v0.c1)))  NULLS LAST, CAST(((vt0.c0)|(vt2.c1)) AS BLOB) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON vt0.c0 NATURAL JOIN v0 WHERE (json_valid(vt2.c0) COLLATE BINARY) ORDER BY IFNULL((((vt2.c0)) BETWEEN ((v0.c0)) AND ((v0.c0))), ((v0.c2)<(v0.c1)))  NULLS LAST, CAST(((vt0.c0)|(vt2.c1)) AS BLOB) LIMIT 0X2;
SELECT ALL MAX(vt2.c1) FROM vt2, v0, vt0 WHERE (((v0.c2)/(((vt0.c0) BETWEEN (vt2.c1) AND (v0.c0)))));
SELECT DISTINCT MAX(vt2.c1) FROM vt2, v0, vt0 WHERE (((v0.c2)/(((vt0.c0) BETWEEN (vt2.c1) AND (v0.c0))))) ORDER BY ((CAST(563903313 AS REAL)) BETWEEN ((((vt2.c0, vt0.c0, vt0.c0)) BETWEEN ((v0.c0, vt2.c0, v0.c1)) AND ((vt2.c0, 765630797, vt0.c0)))) AND (vt0.c0)) ASC, ((x'')GLOB((+ (vt0.c0)))) LIMIT 0x1;
SELECT * FROM vt2, vt0 WHERE (0.49853292628125745) ORDER BY ((vt2.c0)LIKE(NULL)) COLLATE RTRIM ASC  NULLS LAST, TRIM(DISTINCT NULLIF(vt2.c1, vt2.c0), x'e0'), ((json_type(vt0.c0))|(CASE WHEN vt0.c0 THEN 0.8886624000749642 WHEN vt0.c0 THEN vt2.c0 ELSE vt0.c0 END)) ASC;
SELECT ALL * FROM vt2, vt0 WHERE (((0.49853292628125745)AND(((((vt0.c0) IS FALSE))GLOB(TYPEOF(DISTINCT vt0.c0)))))) ORDER BY ((vt2.c0)LIKE(NULL)) COLLATE RTRIM ASC  NULLS LAST, TRIM(DISTINCT NULLIF(vt2.c1, vt2.c0), x'e0'), ((json_type(vt0.c0))|(CASE WHEN vt0.c0 THEN 0.8886624000749642 WHEN vt0.c0 THEN vt2.c0 ELSE vt0.c0 END)) ASC;
SELECT * FROM vt2, vt0 WHERE (0.49853292628125745) ORDER BY ((vt2.c0)LIKE(NULL)) COLLATE RTRIM ASC  NULLS LAST, TRIM(DISTINCT NULLIF(vt2.c1, vt2.c0), x'e0'), ((json_type(vt0.c0))|(CASE WHEN vt0.c0 THEN 0.8886624000749642 WHEN vt0.c0 THEN vt2.c0 ELSE vt0.c0 END)) ASC;
SELECT * FROM vt2 NATURAL JOIN vt0 WHERE ((~ (vt2.c0 COLLATE RTRIM))) ORDER BY ((((vt0.c0 COLLATE BINARY)AND((((vt0.c0, vt0.c0, vt2.c1))==((vt0.c0, vt0.c0, vt2.c0))))))AND((((vt2.c1, vt2.c0))!=((vt0.c0, vt2.c1)))))  NULLS LAST, 0.7608310758664194 DESC  NULLS LAST, vt0.c0  NULLS LAST;
SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE ((~ (vt2.c0 COLLATE RTRIM))) ORDER BY CAST(('-567218797' IN ()) AS REAL), ((CAST(vt0.c0 AS TEXT))-(((vt0.c0) NOT NULL)))  NULLS LAST, vt2.c0 DESC, (((((vt2.c1)AND(vt2.c0)))AND(vt2.c0)) IN (((vt2.c1)>(vt0.c0))));
SELECT * FROM vt2 NATURAL JOIN vt0 WHERE ((~ (vt2.c0 COLLATE RTRIM))) ORDER BY ((((vt0.c0 COLLATE BINARY)AND((((vt0.c0, vt0.c0, vt2.c1))==((vt0.c0, vt0.c0, vt2.c0))))))AND((((vt2.c1, vt2.c0))!=((vt0.c0, vt2.c1)))))  NULLS LAST, 0.7608310758664194 DESC  NULLS LAST, vt0.c0  NULLS LAST;
SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE ((~ (vt2.c0 COLLATE RTRIM))) ORDER BY CAST(('-567218797' IN ()) AS REAL), ((CAST(vt0.c0 AS TEXT))-(((vt0.c0) NOT NULL)))  NULLS LAST, vt2.c0 DESC, (((((vt2.c1)AND(vt2.c0)))AND(vt2.c0)) IN (((vt2.c1)>(vt0.c0))));
SELECT MAX(v0.c2) FROM v0 WHERE (((((v0.c1)<>(v0.c2)))IS(NULLIF(DISTINCT v0.c0, v0.c1)))) ORDER BY ((((((((CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c3 END)AND((~ (v0.c2)))))AND(CASE v0.c1  WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c2 END)))OR(((v0.c0)<<(v0.c1)))))OR(((v0.c1) BETWEEN (v0.c2) AND (v0.c2)))), ((((((((v0.c0)!=(v0.c3)))AND((v0.c0 IN (v0.c0)))))AND((('%sygU㝜')>(v0.c3)))))AND(v0.c2 COLLATE NOCASE)) ASC;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((v0.c1)!=(v0.c2)))IS(NULLIF(DISTINCT v0.c0, v0.c1)))) ORDER BY ((((((((CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c3 END)AND((~ (v0.c2)))))AND(CASE v0.c1  WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c2 END)))OR(((v0.c0)<<(v0.c1)))))OR(((v0.c1) BETWEEN (v0.c2) AND (v0.c2)))), ((((((((v0.c0)<>(v0.c3)))AND((v0.c0 IN (v0.c0)))))AND((('%sygU㝜')>(v0.c3)))))AND(v0.c2 COLLATE NOCASE)) ASC LIMIT 0x2 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (CAST((v0.c3 IN ()) AS INTEGER)) ORDER BY ((((((((CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c2 ELSE v0.c3 END)AND((~ (v0.c2)))))AND(CASE v0.c1  WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c2 END)))OR(((v0.c0)<<(v0.c1)))))OR(((v0.c1) BETWEEN (v0.c2) AND (v0.c2)))), ((((((((v0.c0)<>(v0.c3)))AND((v0.c0 IN (v0.c0)))))AND((('%sygU㝜')>(v0.c3)))))AND(v0.c2 COLLATE NOCASE)) ASC LIMIT 2;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON -480369225 COLLATE NOCASE COLLATE RTRIM INNER JOIN v0 ON (((- (vt2.c1))) NOT NULL) WHERE ((((((v0.c3, v0.c3, v0.c3, v0.c0))<((vt0.c0, v0.c3, vt0.c0, v0.c2))))*(CAST(v0.c3 AS TEXT)))) ORDER BY LIKELIHOOD(NULLIF(DISTINCT v0.c2, v0.c0), ((vt2.c1)*(vt2.c1))) DESC;
SELECT ALL * FROM vt2 INNER JOIN vt0 ON 0xffffffffe35e25b7 COLLATE NOCASE COLLATE RTRIM INNER JOIN v0 ON (((- (vt2.c1))) NOT NULL) WHERE ((((((v0.c3, v0.c3, v0.c3, v0.c0))<((vt0.c0, v0.c3, vt0.c0, v0.c2))))*(CAST(v0.c3 AS TEXT)))) ORDER BY LIKELIHOOD(NULLIF(DISTINCT v0.c2, v0.c0), ((vt2.c1)*(vt2.c1))) DESC LIMIT 0x0 INTERSECT SELECT ALL * FROM vt2 INNER JOIN vt0 ON 0xffffffffe35e25b7 COLLATE NOCASE COLLATE RTRIM INNER JOIN v0 ON (((- (vt2.c1))) NOT NULL) WHERE (((((vt2.c1) NOTNULL))=((v0.c2 IN (vt2.c1))))) ORDER BY LIKELIHOOD(NULLIF(DISTINCT v0.c2, v0.c0), ((vt2.c1)*(vt2.c1))) DESC LIMIT 0;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON -480369225 COLLATE NOCASE COLLATE RTRIM INNER JOIN v0 ON (((- (vt2.c1))) NOT NULL) WHERE ((((((v0.c3, v0.c3, v0.c3, v0.c0))<((vt0.c0, v0.c3, vt0.c0, v0.c2))))*(CAST(v0.c3 AS TEXT)))) ORDER BY LIKELIHOOD(NULLIF(DISTINCT v0.c2, v0.c0), ((vt2.c1)*(vt2.c1))) DESC;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c0 COLLATE BINARY)AND((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))))OR(vt0.c0)))AND(((vt0.c0) NOTNULL))))AND((('214129716') NOTNULL))));
SELECT * FROM vt0 WHERE (((((((((((vt0.c0 COLLATE BINARY)AND((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))))OR(vt0.c0)))AND(((vt0.c0) NOTNULL))))AND((('214129716') NOTNULL))))AND(((NULL)GLOB((vt0.c0 IN ())))))) LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE (((((((((vt0.c0 COLLATE BINARY)AND((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))))OR(vt0.c0)))AND(((vt0.c0) NOTNULL))))AND((('214129716') NOTNULL))));
SELECT * FROM vt0 WHERE (((((((((((vt0.c0 COLLATE BINARY)AND((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))))OR(vt0.c0)))AND(((vt0.c0) NOTNULL))))AND((('214129716') NOTNULL))))AND(((NULL)GLOB((vt0.c0 IN ())))))) LIMIT 0X1;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON (((vt0.c0)) NOT BETWEEN ((CAST(vt2.c1 AS BLOB))) AND ((((((((((v0.c0)OR(411241245)))AND(v0.c1)))AND(v0.c1)))OR(v0.c3))))) NATURAL JOIN vt0 WHERE ((((vt2.c0 IN ()))<<(v0.c3 COLLATE RTRIM))) ORDER BY ABS(((v0.c3) IS FALSE)), HEX(v0.c1) COLLATE RTRIM;
SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON (((vt0.c0)) NOT BETWEEN ((CAST(vt2.c1 AS BLOB))) AND ((((((((((v0.c0)OR(0X18830b1d)))AND(v0.c1)))AND(v0.c1)))OR(v0.c3))))) NATURAL JOIN vt0 WHERE ((((((vt2.c0 IN ()))<<(v0.c3 COLLATE RTRIM)))AND(((vt2.c0) IS TRUE)))) ORDER BY STRFTIME(json_remove(v0.c1, v0.c1, v0.c3), CASE WHEN v0.c2 THEN v0.c2 WHEN vt0.c0 THEN v0.c2 WHEN v0.c0 THEN NULL WHEN vt2.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c3 ELSE v0.c2 END, (((vt0.c0))!=((v0.c0))), ((v0.c1)-(v0.c3)), ((vt2.c1) ISNULL)) ASC  NULLS FIRST, ((v0.c3 IN (vt0.c0)) IN ());
SELECT ALL * FROM v0 CROSS JOIN vt2 ON (((vt0.c0)) NOT BETWEEN ((CAST(vt2.c1 AS BLOB))) AND ((((((((((v0.c0)OR(411241245)))AND(v0.c1)))AND(v0.c1)))OR(v0.c3))))) NATURAL JOIN vt0 WHERE ((((vt2.c0 IN ()))<<(v0.c3 COLLATE RTRIM))) ORDER BY ABS(((v0.c3) IS FALSE)), HEX(v0.c1) COLLATE RTRIM;
SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON (((vt0.c0)) NOT BETWEEN ((CAST(vt2.c1 AS BLOB))) AND ((((((((((v0.c0)OR(0X18830b1d)))AND(v0.c1)))AND(v0.c1)))OR(v0.c3))))) NATURAL JOIN vt0 WHERE ((((((vt2.c0 IN ()))<<(v0.c3 COLLATE RTRIM)))AND(((vt2.c0) IS TRUE)))) ORDER BY STRFTIME(json_remove(v0.c1, v0.c1, v0.c3), CASE WHEN v0.c2 THEN v0.c2 WHEN vt0.c0 THEN v0.c2 WHEN v0.c0 THEN NULL WHEN vt2.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c3 ELSE v0.c2 END, (((vt0.c0))!=((v0.c0))), ((v0.c1)-(v0.c3)), ((vt2.c1) ISNULL)) ASC  NULLS FIRST, ((v0.c3 IN (vt0.c0)) IN ());
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (0.5805440482142405);
SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 WHERE (((0.5805440482142405)AND(CASE SUBSTR(vt0.c0, vt2.c0)  WHEN CAST(vt2.c1 AS TEXT) THEN vt2.c0 COLLATE NOCASE END))) LIMIT 0x2;
SELECT ALL * FROM v0 WHERE ((MIN(v0.c0, v0.c0, v0.c2, v0.c0, 0.5497786317529637, v0.c2) IN ())) ORDER BY 'wLC';
SELECT DISTINCT * FROM v0 WHERE ((MIN(v0.c0, v0.c0, v0.c2, v0.c0, 0.5497786317529637, v0.c2) IN ())) ORDER BY 'wLC' LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c0)LIKE(v0.c1)))&((('EPꅿo')LIKE(v0.c2))))) ORDER BY 'wLC' LIMIT 0X2;
SELECT ALL * FROM v0 WHERE ((MIN(v0.c0, v0.c0, v0.c2, v0.c0, 0.5497786317529637, v0.c2) IN ())) ORDER BY 'wLC';
SELECT DISTINCT * FROM v0 WHERE ((MIN(v0.c0, v0.c0, v0.c2, v0.c0, 0.5497786317529637, v0.c2) IN ())) ORDER BY 'wLC' LIMIT 2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c0)LIKE(v0.c1)))&((('EPꅿo')LIKE(v0.c2))))) ORDER BY 'wLC' LIMIT 0X2;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON CAST((~ (vt2.c1)) AS REAL) NATURAL JOIN vt0 WHERE ((((~ (v0.c1)))>=(((v0.c2) IS TRUE)))) ORDER BY CAST(vt2.c1 AS BLOB) COLLATE BINARY DESC  NULLS FIRST, (NOT (NULLIF(vt0.c0, v0.c2))) DESC;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON CAST((~ (vt2.c1)) AS REAL) NATURAL JOIN vt0 WHERE ((((((~ (v0.c1)))>(((v0.c2) IS TRUE))))AND('893851513'))) ORDER BY CAST(vt2.c1 AS BLOB) COLLATE BINARY DESC  NULLS FIRST, (NOT (NULLIF(vt0.c0, v0.c2))) DESC LIMIT 0X1;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON CAST((~ (vt2.c1)) AS REAL) NATURAL JOIN vt0 WHERE ((((~ (v0.c1)))>=(((v0.c2) IS TRUE)))) ORDER BY CAST(vt2.c1 AS BLOB) COLLATE BINARY DESC  NULLS FIRST, (NOT (NULLIF(vt0.c0, v0.c2))) DESC;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON CAST((~ (vt2.c1)) AS REAL) NATURAL JOIN vt0 WHERE ((((((~ (v0.c1)))>(((v0.c2) IS TRUE))))AND('893851513'))) ORDER BY CAST(vt2.c1 AS BLOB) COLLATE BINARY DESC  NULLS FIRST, (NOT (NULLIF(vt0.c0, v0.c2))) DESC LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt2 WHERE (CASE WHEN CAST(vt2.c0 AS NUMERIC) THEN '~5' COLLATE RTRIM END) ORDER BY ((((((((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))AND(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)))))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR(vt2.c1)) ASC  NULLS FIRST, ((ABS(vt2.c1))<(CAST(-1921540160 AS INTEGER)))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((CASE WHEN CAST(vt2.c0 AS NUMERIC) THEN '~5' COLLATE RTRIM END)AND(CAST(((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)) AS NUMERIC)))) ORDER BY ((((((((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))AND(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)))))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR(vt2.c1)) ASC  NULLS FIRST, ((ABS(vt2.c1))<(CAST(0Xffffffff8d779fc0 AS INTEGER)))  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE ((((vt2.c1, vt2.c1)) NOT BETWEEN ((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)), ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))) AND ((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)), (vt2.c0 IN (vt2.c1, vt2.c0)))))) ORDER BY ((((((((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))AND(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)))))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR(vt2.c1)) ASC  NULLS FIRST, ((ABS(vt2.c1))<(CAST(-1921540160 AS INTEGER)))  NULLS FIRST;
SELECT MIN(v0.c1) FROM vt0, v0 WHERE (CASE ('|EvT' IN (vt0.c0))  WHEN IFNULL(DISTINCT v0.c0, v0.c0) THEN '' WHEN CAST(v0.c2 AS INTEGER) THEN ((((v0.c1)OR(v0.c2)))AND(v0.c0)) WHEN ((vt0.c0) BETWEEN (v0.c1) AND (v0.c1)) THEN CAST(0.2922693987626377 AS INTEGER) WHEN (+ (v0.c3)) THEN ((((vt0.c0)AND(v0.c1)))AND(v0.c2)) END) ORDER BY ((HEX(v0.c0))>=(CASE v0.c2  WHEN vt0.c0 THEN v0.c3 END));
SELECT ALL MIN(v0.c1) FROM vt0, v0 WHERE (((CASE ('|EvT' IN (vt0.c0))  WHEN IFNULL(DISTINCT v0.c0, v0.c0) THEN '' WHEN CAST(v0.c2 AS INTEGER) THEN ((((v0.c1)OR(v0.c2)))AND(v0.c0)) WHEN ((vt0.c0) BETWEEN (v0.c1) AND (v0.c1)) THEN CAST(0.2922693987626377 AS INTEGER) WHEN (+ (v0.c3)) THEN ((((vt0.c0)AND(v0.c1)))AND(v0.c2)) END)AND(x'54'))) ORDER BY (((x'', CASE WHEN v0.c1 THEN v0.c3 WHEN vt0.c0 THEN v0.c1 ELSE vt0.c0 END, ((v0.c3)<>(v0.c0)), CAST('853848212' AS NUMERIC)))>=(((- (v0.c2)), ((vt0.c0) BETWEEN (v0.c0) AND (vt0.c0)), ((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)), v0.c1))) ASC, '''攎R\''7!~' ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL MIN(v0.c1) FROM v0, vt2, vt0 WHERE ((v0.c0 COLLATE BINARY IN ((((vt2.c1, v0.c3))==((v0.c0, v0.c1))))));
SELECT MIN(v0.c1) FROM v0, vt2, vt0 NOT INDEXED WHERE ((v0.c0 COLLATE BINARY IN ((((vt2.c1, v0.c3))=((v0.c0, v0.c1)))))) ORDER BY CASE (((vt2.c0, v0.c1, v0.c1)) BETWEEN ((v0.c3, v0.c3, vt2.c0)) AND ((vt2.c1, vt2.c1, vt0.c0)))  WHEN JULIANDAY(vt2.c0, vt2.c0, vt0.c0, v0.c1, v0.c2, vt0.c0) THEN CASE WHEN vt0.c0 THEN v0.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN '890457025' WHEN vt0.c0 THEN vt2.c1 END ELSE ((vt0.c0) NOT BETWEEN (v0.c0) AND (v0.c1)) END ASC  NULLS FIRST, LOWER(vt2.c1) ASC  NULLS FIRST, ((((v0.c0, v0.c1)) BETWEEN ((vt2.c1, vt2.c0)) AND ((v0.c1, v0.c3))) IN (v0.c0, ((0.09007675460900233) NOTNULL))) DESC  NULLS LAST, CASE (vt2.c1 IN (vt0.c0))  WHEN ((vt0.c0) ISNULL) THEN vt2.c0 COLLATE NOCASE WHEN ABS(DISTINCT v0.c3) THEN v0.c0 COLLATE BINARY END;
SELECT * FROM vt2 NATURAL JOIN vt0 WHERE (((((((((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))/(CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN 'l4%ik|' WHEN vt2.c1 THEN vt0.c0 END)));
SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE (((((((((((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))/(CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN 'l4%ik|' WHEN vt2.c1 THEN vt0.c0 END)))AND(((COALESCE(vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0, vt0.c0)) NOTNULL))));
SELECT * FROM vt2 NATURAL JOIN vt0 WHERE (((((((((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))/(CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN 'l4%ik|' WHEN vt2.c1 THEN vt0.c0 END)));
SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE (((((((((((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))/(CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN 'l4%ik|' WHEN vt2.c1 THEN vt0.c0 END)))AND(((COALESCE(vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0, vt0.c0)) NOTNULL))));
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT ALL * FROM vt0 WHERE (((vt0.c0)AND('ࢸ3jNxlmy'))) ORDER BY (((((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))%(vt0.c0))  NULLS LAST, (vt0.c0 IN ())  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL * FROM vt0 WHERE (((((((((((vt0.c0)+(vt0.c0)))OR(vt0.c0)))OR('-405289896')))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND ('-937369626')))))AND(vt0.c0 COLLATE BINARY))) ORDER BY (((((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))%(vt0.c0))  NULLS LAST, (vt0.c0 IN ())  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT ALL * FROM vt0 WHERE (((vt0.c0)AND('ࢸ3jNxlmy'))) ORDER BY (((((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))%(vt0.c0))  NULLS LAST, (vt0.c0 IN ())  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL * FROM vt0 WHERE (((((((((((vt0.c0)+(vt0.c0)))OR(vt0.c0)))OR('-405289896')))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND ('-937369626')))))AND(vt0.c0 COLLATE BINARY))) ORDER BY (((((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))%(vt0.c0))  NULLS LAST, (vt0.c0 IN ())  NULLS LAST LIMIT 1;
SELECT ALL MAX(v0.c3) FROM v0, vt0, vt2 WHERE (((((((((((((((NULL)OR(vt0.c0)))AND(vt2.c1)))OR(v0.c1)))AND(v0.c1)))OR(vt2.c1)))AND(vt2.c0)))%((~ (v0.c0)))));
SELECT DISTINCT MAX(v0.c3) FROM v0, vt0, vt2 WHERE (((((((((((((((((NULL)OR(vt0.c0)))AND(vt2.c1)))OR(v0.c1)))AND(v0.c1)))OR(vt2.c1)))AND(vt2.c0)))%((~ (v0.c0)))))AND(CASE WHEN CAST(v0.c0 AS INTEGER) THEN vt2.c0 COLLATE RTRIM ELSE ((vt2.c0) NOT NULL) END))) INTERSECT SELECT DISTINCT MAX(v0.c3) FROM v0, vt0, vt2 WHERE ((((((vt2.c1, vt2.c1))<=((vt0.c0, v0.c0)))) IS FALSE));
SELECT MIN(vt2.c0) FROM vt2 WHERE (COALESCE(DISTINCT ((((vt2.c0)AND(vt2.c1)))AND(vt2.c1)), CASE WHEN vt2.c1 THEN vt2.c0 END));
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (((COALESCE(DISTINCT ((((vt2.c0)AND(vt2.c1)))AND(vt2.c1)), CASE WHEN vt2.c1 THEN vt2.c0 END))AND(TRIM(((vt2.c0)AND(vt2.c1)), CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN 0.6496645400292832 THEN vt2.c1 ELSE vt2.c0 END))));
SELECT ALL * FROM v0 CROSS JOIN vt0 ON (((v0.c0)) BETWEEN ((((v0.c0)AND(v0.c2)))) AND (((v0.c2 IN (0.8642075254627749, x'5ed9f6'))))) WHERE (((((((0X7da657b3)AND(NULL)))OR(v0.c2)))<(((v0.c0) IS FALSE)))) ORDER BY (((((((x'' IN (vt0.c0)))OR((v0.c3 IN ()))))OR(v0.c1)))OR(vt0.c0)) ASC, CAST(ABS(v0.c2) AS NUMERIC)  NULLS LAST;
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON (((v0.c0)) BETWEEN ((((v0.c0)AND(v0.c2)))) AND (((v0.c2 IN (0.8642075254627749, x'5ed9f6'))))) WHERE (((((((0X7da657b3)AND(NULL)))OR(v0.c2)))<(((v0.c0) IS FALSE)))) ORDER BY (('0.05509927846959273') NOT BETWEEN ((vt0.c0 IN (v0.c0, v0.c0, v0.c2))) AND (((((((((((v0.c2)AND(v0.c0)))OR(0.4756199098798578)))OR(v0.c0)))OR(v0.c3)))OR(vt0.c0)))) ASC  NULLS LAST, (((((((('-1468862807')OR(v0.c0)))AND(v0.c0)))AND(vt0.c0)))>(((v0.c3)-(vt0.c0)))), x''  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON (((v0.c0)) BETWEEN ((((v0.c0)AND(v0.c2)))) AND (((v0.c2 IN (0.8642075254627749, x'5ed9f6'))))) WHERE (((LOWER(DISTINCT x'49249a0621')) IS TRUE)) ORDER BY (('0.05509927846959273') NOT BETWEEN ((vt0.c0 IN (v0.c0, v0.c0, v0.c2))) AND (((((((((((v0.c2)AND(v0.c0)))OR(0.4756199098798578)))OR(v0.c0)))OR(v0.c3)))OR(vt0.c0)))) ASC  NULLS LAST, (((((((('-1468862807')OR(v0.c0)))AND(v0.c0)))AND(vt0.c0)))>(((v0.c3)-(vt0.c0)))), x''  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON (((v0.c0)) BETWEEN ((((v0.c0)AND(v0.c2)))) AND (((v0.c2 IN (0.8642075254627749, x'5ed9f6'))))) WHERE (((((((0X7da657b3)AND(NULL)))OR(v0.c2)))<(((v0.c0) IS FALSE)))) ORDER BY (((((((x'' IN (vt0.c0)))OR((v0.c3 IN ()))))OR(v0.c1)))OR(vt0.c0)) ASC, CAST(ABS(v0.c2) AS NUMERIC)  NULLS LAST;
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON (((v0.c0)) BETWEEN ((((v0.c0)AND(v0.c2)))) AND (((v0.c2 IN (0.8642075254627749, x'5ed9f6'))))) WHERE (((((((0X7da657b3)AND(NULL)))OR(v0.c2)))<(((v0.c0) IS FALSE)))) ORDER BY (('0.05509927846959273') NOT BETWEEN ((vt0.c0 IN (v0.c0, v0.c0, v0.c2))) AND (((((((((((v0.c2)AND(v0.c0)))OR(0.4756199098798578)))OR(v0.c0)))OR(v0.c3)))OR(vt0.c0)))) ASC  NULLS LAST, (((((((('-1468862807')OR(v0.c0)))AND(v0.c0)))AND(vt0.c0)))>(((v0.c3)-(vt0.c0)))), x''  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON (((v0.c0)) BETWEEN ((((v0.c0)AND(v0.c2)))) AND (((v0.c2 IN (0.8642075254627749, x'5ed9f6'))))) WHERE (((LOWER(DISTINCT x'49249a0621')) IS TRUE)) ORDER BY (('0.05509927846959273') NOT BETWEEN ((vt0.c0 IN (v0.c0, v0.c0, v0.c2))) AND (((((((((((v0.c2)AND(v0.c0)))OR(0.4756199098798578)))OR(v0.c0)))OR(v0.c3)))OR(vt0.c0)))) ASC  NULLS LAST, (((((((('-1468862807')OR(v0.c0)))AND(v0.c0)))AND(vt0.c0)))>(((v0.c3)-(vt0.c0)))), x''  NULLS FIRST LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE ((((~ (v0.c3))) IS TRUE));
SELECT ALL COUNT(*) FROM vt0, v0 WHERE ((((((~ (v0.c3))) IS TRUE))AND(CASE v0.c2 COLLATE NOCASE  WHEN (v0.c3 IN ()) THEN ((v0.c3)*(vt0.c0)) WHEN v0.c2 THEN CAST(v0.c0 AS INTEGER) WHEN (((vt0.c0, v0.c3, v0.c1, v0.c1))=((2.67721342E8, '-1116900049', v0.c1, v0.c0))) THEN ((v0.c0) NOTNULL) ELSE ((v0.c3) BETWEEN (v0.c3) AND ('du]!
''m')) END))) ORDER BY TRIM(DISTINCT ((0.8886624000749642)*(v0.c1)))  NULLS LAST;
SELECT MIN(v0.c3) FROM vt0, v0 WHERE (((((v0.c3)>=(v0.c0))) ISNULL));
SELECT MIN(v0.c3) FROM vt0, v0 WHERE (((((v0.c3)=(v0.c0))) ISNULL)) ORDER BY rtreenode(CAST(v0.c2 AS TEXT), (~ (v0.c3))) ASC, ((((- (v0.c3))))<>((x''))) DESC  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0 LEFT OUTER JOIN vt2 ON ((CASE vt2.c1  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END) NOT NULL) WHERE ((vt2.c0 IN (v0.c2)) COLLATE NOCASE);
SELECT MIN(v0.c2) FROM v0 INNER JOIN vt2 ON ((CASE vt2.c1  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END) NOT NULL) WHERE ((vt2.c0 IN (v0.c2)) COLLATE NOCASE) ORDER BY LIKELIHOOD(DISTINCT (~ (vt2.c1)), ((v0.c1)%(vt2.c0))) DESC INTERSECT SELECT ALL MIN(v0.c2) FROM v0 INNER JOIN vt2 ON ((CASE vt2.c1  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END) NOT NULL) WHERE (((CASE WHEN v0.c1 THEN vt2.c1 WHEN vt2.c1 THEN v0.c1 WHEN vt2.c0 THEN v0.c0 WHEN vt2.c1 THEN v0.c2 ELSE vt2.c0 END)>=(((v0.c1)/(v0.c0))))) ORDER BY LIKELIHOOD(DISTINCT (~ (vt2.c1)), ((v0.c1)%(vt2.c0))) DESC;
SELECT ALL COUNT(*) FROM v0, vt2 CROSS JOIN vt0 ON (((vt2.c0)) BETWEEN ((((((vt2.c1)OR(0xff51a7e)))AND(v0.c2)))) AND ((((v0.c2) NOT NULL)))) WHERE ('x{5w');
SELECT DISTINCT COUNT(*) FROM v0, vt2 CROSS JOIN vt0 ON (((vt2.c0)) BETWEEN ((((((vt2.c1)OR(0Xff51a7e)))AND(v0.c2)))) AND ((((v0.c2) NOT NULL)))) WHERE ('x{5w') ORDER BY CAST(((v0.c1) BETWEEN (v0.c3) AND (0.27398288919173386)) AS REAL) ASC, 'c!x\7hp' LIMIT 0x1;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((0.3185868706799393 IN (vt0.c0)), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))))!=((((vt0.c0) BETWEEN (0.5518583795075163) AND (vt0.c0)), SQLITE_COMPILEOPTION_GET(vt0.c0))))) ORDER BY (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) IN (CAST(vt0.c0 AS REAL), json_valid(vt0.c0))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((((0.3185868706799393 IN (vt0.c0)), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))))!=((((vt0.c0) BETWEEN (0.5518583795075163) AND (vt0.c0)), SQLITE_COMPILEOPTION_GET(vt0.c0)))))AND(CASE vt0.c0 COLLATE BINARY  WHEN (- (vt0.c0)) THEN ((vt0.c0) IS TRUE) WHEN vt0.c0 COLLATE BINARY THEN ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)) WHEN (((vt0.c0, vt0.c0))<>((vt0.c0, vt0.c0))) THEN LIKELIHOOD(vt0.c0, vt0.c0) WHEN ((vt0.c0)>>(vt0.c0)) THEN (+ (vt0.c0)) WHEN (NOT (vt0.c0)) THEN x'fa' END))) ORDER BY (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) IN (CAST(vt0.c0 AS REAL), json_valid(vt0.c0))) DESC  NULLS FIRST;
SELECT ALL MAX(v0.c1) FROM vt0, vt2, v0 WHERE (((ABS(DISTINCT NULL))<(LIKELIHOOD(DISTINCT vt2.c0, vt2.c0))));
SELECT ALL MAX(v0.c1) FROM vt0, vt2, v0 WHERE (((((ABS(DISTINCT NULL))<(LIKELIHOOD(DISTINCT vt2.c0, vt2.c0))))AND((~ ('?sTAs(IB' COLLATE RTRIM))))) ORDER BY ((v0.c1 COLLATE BINARY) NOT BETWEEN (vt2.c1) AND (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c3)))) LIMIT 0X1;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((v0.c3 IN (v0.c3)) IN (((vt2.c1) ISNULL), (((v0.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c0))))));
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((((v0.c3 IN (v0.c3)) IN (((vt2.c1) ISNULL), (((v0.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c0))))))AND((((ABS(v0.c0), ((vt2.c1) NOT BETWEEN (v0.c1) AND (1184208053))))<=((NULL, (x'f2' IN ()))))))) ORDER BY CAST(v0.c0 AS INTEGER), (((v0.c0 IN (vt0.c0, v0.c0)))IS(((v0.c1)==(vt0.c0)))), (json_insert(vt0.c0, v0.c3, v0.c2, vt0.c0, v0.c1) IN (((((v0.c2)AND(vt0.c0)))AND(x'0ad9')))) ASC LIMIT 0;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((v0.c3 IN (v0.c3)) IN (((vt2.c1) ISNULL), (((v0.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c0))))));
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((((v0.c3 IN (v0.c3)) IN (((vt2.c1) ISNULL), (((v0.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c0))))))AND((((ABS(v0.c0), ((vt2.c1) NOT BETWEEN (v0.c1) AND (1184208053))))<=((NULL, (x'f2' IN ()))))))) ORDER BY CAST(v0.c0 AS INTEGER), (((v0.c0 IN (vt0.c0, v0.c0)))IS(((v0.c1)==(vt0.c0)))), (json_insert(vt0.c0, v0.c3, v0.c2, vt0.c0, v0.c1) IN (((((v0.c2)AND(vt0.c0)))AND(x'0ad9')))) ASC LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (CAST(('2126815385' IN (vt0.c0, vt0.c0)) AS TEXT));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST(('2126815385' IN (vt0.c0, vt0.c0)) AS TEXT))AND(CASE WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN x'' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN ((vt0.c0) IS FALSE) END))) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((0.17449997311028542) NOTNULL))OR(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))OR(vt0.c0))) LIMIT 0X2;
SELECT ALL * FROM vt2, v0 WHERE ((((((v0.c1, v0.c1)) BETWEEN ((v0.c3, v0.c3)) AND ((v0.c1, v0.c0)))) NOT BETWEEN ((vt2.c1 IN (vt2.c0, v0.c3))) AND ((vt2.c1 IN (x'db54')))));
SELECT * FROM vt2, v0 WHERE ((((((v0.c1, v0.c1)) BETWEEN ((v0.c3, v0.c3)) AND ((v0.c1, v0.c0)))) NOT BETWEEN ((vt2.c1 IN (vt2.c0, v0.c3))) AND ((vt2.c1 IN (x'db54')))));
SELECT ALL * FROM vt2, v0 WHERE ((((((v0.c1, v0.c1)) BETWEEN ((v0.c3, v0.c3)) AND ((v0.c1, v0.c0)))) NOT BETWEEN ((vt2.c1 IN (vt2.c0, v0.c3))) AND ((vt2.c1 IN (x'db54')))));
SELECT * FROM vt2, v0 WHERE ((((((v0.c1, v0.c1)) BETWEEN ((v0.c3, v0.c3)) AND ((v0.c1, v0.c0)))) NOT BETWEEN ((vt2.c1 IN (vt2.c0, v0.c3))) AND ((vt2.c1 IN (x'db54')))));
SELECT * FROM vt0, vt2, v0 WHERE (((CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN v0.c3 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c2 THEN vt2.c0 WHEN v0.c3 THEN v0.c3 ELSE vt0.c0 END)IS(((0X32982cb8)|(vt2.c1))))) ORDER BY LIKELIHOOD(DISTINCT CAST(v0.c2 AS TEXT), (+ (vt2.c1)))  NULLS FIRST, ((v0.c1) ISNULL);
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN v0.c3 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c2 THEN vt2.c0 WHEN v0.c3 THEN v0.c3 ELSE vt0.c0 END)IS(((0x32982cb8)|(vt2.c1)))))AND(HEX(DISTINCT (vt0.c0 IN (vt2.c1)))))) ORDER BY v0.c0 DESC LIMIT 3 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (NULLIF('l9ꅿYYIf*f', ((vt2.c0) ISNULL))) ORDER BY v0.c0 DESC LIMIT 3;
SELECT * FROM vt0, vt2, v0 WHERE (((CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN v0.c3 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c2 THEN vt2.c0 WHEN v0.c3 THEN v0.c3 ELSE vt0.c0 END)IS(((0X32982cb8)|(vt2.c1))))) ORDER BY LIKELIHOOD(DISTINCT CAST(v0.c2 AS TEXT), (+ (vt2.c1)))  NULLS FIRST, ((v0.c1) ISNULL);
SELECT COUNT(*) FROM v0 LEFT OUTER JOIN vt2 ON ((((v0.c2)IS(v0.c0)))LIKE((~ (NULL)))) WHERE ((((v0.c3 IN ())) BETWEEN (v0.c2) AND (((v0.c1)LIKE(v0.c0))))) ORDER BY ((COALESCE(v0.c2, v0.c3))>>(UPPER(v0.c3)));
SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt2 ON ((((v0.c2)IS(v0.c0)))LIKE((~ (NULL)))) WHERE ((((((v0.c3 IN ())) BETWEEN (v0.c2) AND (((v0.c1)LIKE(v0.c0)))))AND(TRIM(v0.c3 COLLATE RTRIM)))) ORDER BY CASE ROUND(vt2.c0, vt2.c1)  WHEN v0.c0 COLLATE NOCASE THEN v0.c2 WHEN ((((((((vt2.c0)OR(vt2.c0)))AND(v0.c2)))OR(v0.c3)))OR(v0.c1)) THEN (vt2.c0 IN (0.003012285886526578, v0.c0)) WHEN 0x6a7af38f THEN vt2.c1 END, CASE WHEN vt2.c0 THEN v0.c0 WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END COLLATE RTRIM DESC  NULLS FIRST, UNLIKELY(DISTINCT ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3))) DESC  NULLS FIRST LIMIT 3 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt2 ON ((((v0.c2)IS(v0.c0)))LIKE((~ (NULL)))) WHERE (((((((((vt2.c0)OR(v0.c2)))AND(v0.c1)))OR(v0.c3)))>>(((v0.c0) NOTNULL)))) ORDER BY CASE ROUND(vt2.c0, vt2.c1)  WHEN v0.c0 COLLATE NOCASE THEN v0.c2 WHEN ((((((((vt2.c0)OR(vt2.c0)))AND(v0.c2)))OR(v0.c3)))OR(v0.c1)) THEN (vt2.c0 IN (0.003012285886526578, v0.c0)) WHEN 1786442639 THEN vt2.c1 END, CASE WHEN vt2.c0 THEN v0.c0 WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END COLLATE RTRIM DESC  NULLS FIRST, UNLIKELY(DISTINCT ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3))) DESC  NULLS FIRST LIMIT 3;
SELECT MAX(vt0.c0) FROM vt0, vt2 WHERE ((vt0.c0 COLLATE BINARY IN ((((vt2.c0, '?聆tu3D}n', vt2.c1)) BETWEEN ((vt0.c0, vt2.c0, vt2.c0)) AND ((vt0.c0, vt2.c1, vt2.c0))), vt0.c0))) ORDER BY ((CAST(vt0.c0 AS TEXT))|(((vt2.c1)+(vt2.c1))))  NULLS LAST, ((((vt2.c0, x'c230', vt0.c0)) BETWEEN (('0.43015477911768996', vt2.c1, vt2.c0)) AND ((vt2.c0, vt2.c1, vt2.c0))) IN (vt2.c0)) ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE ((vt0.c0 COLLATE BINARY IN ((((vt2.c0, '?聆tu3D}n', vt2.c1)) BETWEEN ((vt0.c0, vt2.c0, vt2.c0)) AND ((vt0.c0, vt2.c1, vt2.c0)))))) ORDER BY ((CAST(vt0.c0 AS TEXT))|(((vt2.c1)+(vt2.c1))))  NULLS LAST, ((((vt2.c0, x'c230', vt0.c0)) BETWEEN (('0.43015477911768996', vt2.c1, vt2.c0)) AND ((vt2.c0, vt2.c1, vt2.c0))) IN (vt2.c0)) ASC  NULLS FIRST LIMIT 5 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE (CAST((~ (vt2.c0)) AS BLOB)) ORDER BY ((CAST(vt0.c0 AS TEXT))|(((vt2.c1)+(vt2.c1))))  NULLS LAST, ((((vt2.c0, x'c230', vt0.c0)) BETWEEN (('0.43015477911768996', vt2.c1, vt2.c0)) AND ((vt2.c0, vt2.c1, vt2.c0))) IN (vt2.c0)) ASC  NULLS FIRST LIMIT 0X5;
SELECT * FROM v0, vt0 WHERE (CAST(((v0.c2) BETWEEN (v0.c3) AND (NULL)) AS NUMERIC)) ORDER BY CAST((+ (v0.c1)) AS NUMERIC)  NULLS FIRST, ((((((((vt0.c0)OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))GLOB(CAST(v0.c3 AS INTEGER))) DESC  NULLS FIRST, (((v0.c2 IN (vt0.c0))) BETWEEN ((NOT (v0.c0))) AND (TYPEOF(DISTINCT v0.c1))) ASC  NULLS LAST, (((((((v0.c3 IN ()))OR(((v0.c1) BETWEEN (vt0.c0) AND ('6')))))OR(CASE vt0.c0  WHEN v0.c0 THEN '-1595015393' END)))OR(((vt0.c0)/(v0.c1)))) ASC;
SELECT * FROM v0, vt0 WHERE (CAST(((v0.c2) BETWEEN (v0.c3) AND (NULL)) AS NUMERIC)) ORDER BY CAST((+ (v0.c1)) AS NUMERIC)  NULLS FIRST, ((((((((vt0.c0)OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))GLOB(CAST(v0.c3 AS INTEGER))) DESC  NULLS FIRST, (((v0.c2 IN (vt0.c0))) BETWEEN ((NOT (v0.c0))) AND (TYPEOF(DISTINCT v0.c1))) ASC  NULLS LAST, (((((((v0.c3 IN ()))OR(((v0.c1) BETWEEN (vt0.c0) AND ('6')))))OR(CASE vt0.c0  WHEN v0.c0 THEN '-1595015393' END)))OR(((vt0.c0)/(v0.c1)))) ASC LIMIT 0X0 INTERSECT SELECT * FROM v0, vt0 WHERE (((((v0.c2)OR(v0.c1)))<>('526554451'))) ORDER BY CAST((+ (v0.c1)) AS NUMERIC)  NULLS FIRST, ((((((((vt0.c0)OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))GLOB(CAST(v0.c3 AS INTEGER))) DESC  NULLS FIRST, (((v0.c2 IN (vt0.c0))) BETWEEN ((NOT (v0.c0))) AND (TYPEOF(DISTINCT v0.c1))) ASC  NULLS LAST, (((((((v0.c3 IN ()))OR(((v0.c1) BETWEEN (vt0.c0) AND ('6')))))OR(CASE vt0.c0  WHEN v0.c0 THEN '-1595015393' END)))OR(((vt0.c0)/(v0.c1)))) ASC LIMIT 0;
SELECT * FROM v0, vt0 WHERE (CAST(((v0.c2) BETWEEN (v0.c3) AND (NULL)) AS NUMERIC)) ORDER BY CAST((+ (v0.c1)) AS NUMERIC)  NULLS FIRST, ((((((((vt0.c0)OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))GLOB(CAST(v0.c3 AS INTEGER))) DESC  NULLS FIRST, (((v0.c2 IN (vt0.c0))) BETWEEN ((NOT (v0.c0))) AND (TYPEOF(DISTINCT v0.c1))) ASC  NULLS LAST, (((((((v0.c3 IN ()))OR(((v0.c1) BETWEEN (vt0.c0) AND ('6')))))OR(CASE vt0.c0  WHEN v0.c0 THEN '-1595015393' END)))OR(((vt0.c0)/(v0.c1)))) ASC;
SELECT * FROM v0, vt0 WHERE (CAST(((v0.c2) BETWEEN (v0.c3) AND (NULL)) AS NUMERIC)) ORDER BY CAST((+ (v0.c1)) AS NUMERIC)  NULLS FIRST, ((((((((vt0.c0)OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))GLOB(CAST(v0.c3 AS INTEGER))) DESC  NULLS FIRST, (((v0.c2 IN (vt0.c0))) BETWEEN ((NOT (v0.c0))) AND (TYPEOF(DISTINCT v0.c1))) ASC  NULLS LAST, (((((((v0.c3 IN ()))OR(((v0.c1) BETWEEN (vt0.c0) AND ('6')))))OR(CASE vt0.c0  WHEN v0.c0 THEN '-1595015393' END)))OR(((vt0.c0)/(v0.c1)))) ASC LIMIT 0X0 INTERSECT SELECT * FROM v0, vt0 WHERE (((((v0.c2)OR(v0.c1)))<>('526554451'))) ORDER BY CAST((+ (v0.c1)) AS NUMERIC)  NULLS FIRST, ((((((((vt0.c0)OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))GLOB(CAST(v0.c3 AS INTEGER))) DESC  NULLS FIRST, (((v0.c2 IN (vt0.c0))) BETWEEN ((NOT (v0.c0))) AND (TYPEOF(DISTINCT v0.c1))) ASC  NULLS LAST, (((((((v0.c3 IN ()))OR(((v0.c1) BETWEEN (vt0.c0) AND ('6')))))OR(CASE vt0.c0  WHEN v0.c0 THEN '-1595015393' END)))OR(((vt0.c0)/(v0.c1)))) ASC LIMIT 0;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((v0.c2) NOTNULL))OR(json_insert(vt0.c0, vt2.c0, vt2.c1))))OR(0.7807732688761823)))AND(v0.c0 COLLATE RTRIM)))OR(((v0.c3)GLOB(v0.c3)))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((((((((v0.c2) NOTNULL))OR(json_insert(vt0.c0, vt2.c0, vt2.c1))))OR(0.7807732688761823)))AND(v0.c0 COLLATE RTRIM)))OR(((v0.c3)GLOB(v0.c3))))) INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (v0.c2);
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((((((((v0.c2) NOTNULL))OR(json_insert(vt0.c0, vt2.c0, vt2.c1))))OR(0.7807732688761823)))AND(v0.c0 COLLATE RTRIM)))OR(((v0.c3)GLOB(v0.c3)))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((((((((v0.c2) NOTNULL))OR(json_insert(vt0.c0, vt2.c0, vt2.c1))))OR(0.7807732688761823)))AND(v0.c0 COLLATE RTRIM)))OR(((v0.c3)GLOB(v0.c3))))) INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (v0.c2);
SELECT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE ((((vt0.c0)) BETWEEN ((CASE v0.c1  WHEN vt2.c1 THEN v0.c2 END)) AND ((((((((vt0.c0)OR(v0.c2)))OR(vt2.c1)))AND(v0.c2))))));
SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE ((((((vt0.c0)) BETWEEN ((CASE v0.c1  WHEN vt2.c1 THEN v0.c2 END)) AND ((((((((vt0.c0)OR(v0.c2)))OR(vt2.c1)))AND(v0.c2))))))AND((((~ (vt0.c0))) BETWEEN ((v0.c3 IN (x''))) AND (v0.c3))))) ORDER BY (((((((v0.c1)OR(v0.c1)))OR('|YoOjB')), ((vt2.c1)<<(0.033100635214157736))))<((NULL, vt2.c1 COLLATE BINARY))), (((v0.c3 IN ())) BETWEEN (v0.c2 COLLATE NOCASE) AND (v0.c0 COLLATE RTRIM)) DESC, (((+ (v0.c3))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c0) AND (x'ad'))) AND (vt2.c1 COLLATE NOCASE))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE (0.647142724793627) ORDER BY (((((((v0.c1)OR(v0.c1)))OR('|YoOjB')), ((vt2.c1)<<(0.033100635214157736))))<((NULL, vt2.c1 COLLATE BINARY))), (((v0.c3 IN ())) BETWEEN (v0.c2 COLLATE NOCASE) AND (v0.c0 COLLATE RTRIM)) DESC, (((+ (v0.c3))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c0) AND (x'ad'))) AND (vt2.c1 COLLATE NOCASE))  NULLS FIRST;
SELECT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE ((((vt0.c0)) BETWEEN ((CASE v0.c1  WHEN vt2.c1 THEN v0.c2 END)) AND ((((((((vt0.c0)OR(v0.c2)))OR(vt2.c1)))AND(v0.c2))))));
SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE ((((((vt0.c0)) BETWEEN ((CASE v0.c1  WHEN vt2.c1 THEN v0.c2 END)) AND ((((((((vt0.c0)OR(v0.c2)))OR(vt2.c1)))AND(v0.c2))))))AND((((~ (vt0.c0))) BETWEEN ((v0.c3 IN (x''))) AND (v0.c3))))) ORDER BY (((((((v0.c1)OR(v0.c1)))OR('|YoOjB')), ((vt2.c1)<<(0.033100635214157736))))<((NULL, vt2.c1 COLLATE BINARY))), (((v0.c3 IN ())) BETWEEN (v0.c2 COLLATE NOCASE) AND (v0.c0 COLLATE RTRIM)) DESC, (((+ (v0.c3))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c0) AND (x'ad'))) AND (vt2.c1 COLLATE NOCASE))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE (0.647142724793627) ORDER BY (((((((v0.c1)OR(v0.c1)))OR('|YoOjB')), ((vt2.c1)<<(0.033100635214157736))))<((NULL, vt2.c1 COLLATE BINARY))), (((v0.c3 IN ())) BETWEEN (v0.c2 COLLATE NOCASE) AND (v0.c0 COLLATE RTRIM)) DESC, (((+ (v0.c3))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c0) AND (x'ad'))) AND (vt2.c1 COLLATE NOCASE))  NULLS FIRST;
SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS INTEGER));
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c0 AS INTEGER));
SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS INTEGER));
SELECT ALL * FROM vt0 WHERE (CAST(vt0.c0 AS INTEGER));
SELECT COUNT(*) FROM vt2 WHERE (((((((NULL) IS TRUE))OR(((vt2.c1)GLOB(vt2.c0)))))OR((- (vt2.c0))))) ORDER BY CASE ((vt2.c1)<<(vt2.c1))  WHEN vt2.c1 COLLATE RTRIM THEN (vt2.c0 IN (vt2.c0)) WHEN TOTAL_CHANGES() THEN vt2.c1 WHEN json_type(vt2.c0) THEN CASE x''  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END WHEN CAST(vt2.c0 AS BLOB) THEN vt2.c1 COLLATE RTRIM ELSE vt2.c0 COLLATE NOCASE END  NULLS FIRST, (vt2.c0 IN (NULLIF(DISTINCT vt2.c0, vt2.c0)))  NULLS LAST;
SELECT COUNT(*) FROM vt2 WHERE (((((((NULL) IS TRUE))OR(((vt2.c1)GLOB(vt2.c0)))))OR((- (vt2.c0))))) ORDER BY (+ ((((vt2.c1))!=(('2046917404')))))  NULLS LAST, ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)))==((+ (vt2.c1)))) DESC  NULLS LAST, (((((((((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c1))))OR(vt2.c1 COLLATE BINARY)))OR(((vt2.c1) ISNULL))))OR(((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c0))))  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt2, v0 WHERE (IFNULL(((v0.c2) NOT BETWEEN (v0.c2) AND (vt2.c0)), ((v0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))) ORDER BY (((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c0)) IN ()) ASC  NULLS FIRST, 'l';
SELECT DISTINCT * FROM vt2, v0 WHERE (IFNULL(((v0.c2) NOT BETWEEN (v0.c2) AND (vt2.c0)), ((v0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))) ORDER BY (load_extension(vt2.c1, vt2.c1) IN (((x'6402')LIKE(v0.c3)))) ASC  NULLS FIRST, v0.c2 LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((SQLITE_COMPILEOPTION_USED(vt2.c0))LIKE(((v0.c3)OR(x'8d'))))) ORDER BY (load_extension(vt2.c1, vt2.c1) IN (((x'6402')LIKE(v0.c3)))) ASC  NULLS FIRST, v0.c2 LIMIT 1;
SELECT * FROM vt2, v0 WHERE (IFNULL(((v0.c2) NOT BETWEEN (v0.c2) AND (vt2.c0)), ((v0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))) ORDER BY (((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c0)) IN ()) ASC  NULLS FIRST, 'l';
SELECT ALL MAX(v0.c3) FROM vt0, v0 NATURAL JOIN vt2 WHERE ((NULL IN ()) COLLATE BINARY);
SELECT DISTINCT MAX(v0.c3) FROM vt0, v0 NATURAL JOIN vt2 WHERE ((NULL IN ()) COLLATE BINARY) ORDER BY ('-1445561250' IN ()) DESC  NULLS FIRST;
SELECT * FROM vt0 INNER JOIN vt2 ON (((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((NULL)))) NOT BETWEEN (CASE vt2.c0  WHEN vt2.c0 THEN 0Xfffffffff18128f4 END) AND (((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))) WHERE ((((vt2.c1)) NOT BETWEEN ((((vt2.c0) NOTNULL))) AND (((+ (vt0.c0))))));
SELECT ALL * FROM vt0 INNER JOIN vt2 ON (((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((NULL)))) NOT BETWEEN (CASE vt2.c0  WHEN vt2.c0 THEN 0xfffffffff18128f4 END) AND (((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))) WHERE ((((((vt2.c1)) NOT BETWEEN ((((vt2.c0) NOTNULL))) AND (((+ (vt0.c0))))))AND(((((((vt2.c0)OR(vt2.c0)))OR(vt0.c0)))|(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0))))))) INTERSECT SELECT ALL * FROM vt0 INNER JOIN vt2 ON (((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((NULL)))) NOT BETWEEN (CASE vt2.c0  WHEN vt2.c0 THEN -243193612 END) AND (((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))) WHERE (((vt2.c1) NOTNULL));
SELECT * FROM vt0 INNER JOIN vt2 ON (((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((NULL)))) NOT BETWEEN (CASE vt2.c0  WHEN vt2.c0 THEN 0Xfffffffff18128f4 END) AND (((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))) WHERE ((((vt2.c1)) NOT BETWEEN ((((vt2.c0) NOTNULL))) AND (((+ (vt0.c0))))));
SELECT ALL * FROM vt0 INNER JOIN vt2 ON (((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((NULL)))) NOT BETWEEN (CASE vt2.c0  WHEN vt2.c0 THEN 0xfffffffff18128f4 END) AND (((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))) WHERE ((((((vt2.c1)) NOT BETWEEN ((((vt2.c0) NOTNULL))) AND (((+ (vt0.c0))))))AND(((((((vt2.c0)OR(vt2.c0)))OR(vt0.c0)))|(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0))))))) INTERSECT SELECT ALL * FROM vt0 INNER JOIN vt2 ON (((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((NULL)))) NOT BETWEEN (CASE vt2.c0  WHEN vt2.c0 THEN -243193612 END) AND (((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))) WHERE (((vt2.c1) NOTNULL));
SELECT MAX(v0.c1) FROM vt2, v0, vt0 WHERE (1905144033);
SELECT DISTINCT MAX(v0.c1) FROM vt2, v0, vt0 WHERE (1905144033) ORDER BY CAST(CASE 0.046971117545061225  WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c2 END AS BLOB) DESC, (((vt2.c0, v0.c1, v0.c2)) NOT BETWEEN ((((((vt2.c1)AND(v0.c2)))OR(vt2.c0)), v0.c1, v0.c1)) AND ((((v0.c3) ISNULL), ((vt2.c0)<(vt2.c1)), vt0.c0 COLLATE RTRIM))) INTERSECT SELECT DISTINCT MAX(v0.c1) FROM vt2, v0, vt0 WHERE ((+ (v0.c0 COLLATE BINARY))) ORDER BY CAST(CASE 0.046971117545061225  WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c2 END AS BLOB) DESC, (((vt2.c0, v0.c1, v0.c2)) NOT BETWEEN ((((((vt2.c1)AND(v0.c2)))OR(vt2.c0)), v0.c1, v0.c1)) AND ((((v0.c3) ISNULL), ((vt2.c0)<(vt2.c1)), vt0.c0 COLLATE RTRIM)));
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON -889738859 NATURAL JOIN v0 WHERE (((v0.c1) ISNULL));
SELECT * FROM vt2 CROSS JOIN vt0 ON -889738859 NATURAL JOIN v0 WHERE (((v0.c1) ISNULL)) LIMIT 4;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON -889738859 NATURAL JOIN v0 WHERE (((v0.c1) ISNULL));
SELECT * FROM vt2 CROSS JOIN vt0 ON -889738859 NATURAL JOIN v0 WHERE (((v0.c1) ISNULL)) LIMIT 4;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON (((vt2.c1)) NOT BETWEEN ((((vt0.c0)>(vt2.c1)))) AND (((((vt2.c1, vt2.c0))<>((vt0.c0, vt0.c0)))))) WHERE ((0.767662276083186 IN ()));
SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON (((vt2.c1)) NOT BETWEEN ((((vt0.c0)>(vt2.c1)))) AND (((((vt2.c1, vt2.c0))<>((vt0.c0, vt0.c0)))))) WHERE ((0.767662276083186 IN ())) INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON (((vt2.c1)) NOT BETWEEN ((((vt0.c0)>(vt2.c1)))) AND (((((vt2.c1, vt2.c0))<>((vt0.c0, vt0.c0)))))) WHERE ((((vt0.c0, vt0.c0)) NOT BETWEEN ((((NULL)||(vt2.c1)), CAST(vt2.c0 AS TEXT))) AND ((LIKELIHOOD(vt2.c1, vt2.c1), ((vt2.c0)AND(vt2.c0))))));
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON (((vt2.c1)) NOT BETWEEN ((((vt0.c0)>(vt2.c1)))) AND (((((vt2.c1, vt2.c0))<>((vt0.c0, vt0.c0)))))) WHERE ((0.767662276083186 IN ()));
SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON (((vt2.c1)) NOT BETWEEN ((((vt0.c0)>(vt2.c1)))) AND (((((vt2.c1, vt2.c0))<>((vt0.c0, vt0.c0)))))) WHERE ((0.767662276083186 IN ())) INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON (((vt2.c1)) NOT BETWEEN ((((vt0.c0)>(vt2.c1)))) AND (((((vt2.c1, vt2.c0))<>((vt0.c0, vt0.c0)))))) WHERE ((((vt0.c0, vt0.c0)) NOT BETWEEN ((((NULL)||(vt2.c1)), CAST(vt2.c0 AS TEXT))) AND ((LIKELIHOOD(vt2.c1, vt2.c1), ((vt2.c0)AND(vt2.c0))))));
SELECT ALL * FROM vt0, vt2 WHERE ('켁AH4');
SELECT ALL * FROM vt0, vt2 WHERE ((('켁AH4')AND(((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1))) NOT BETWEEN (((vt2.c0)<<(vt0.c0))) AND ((vt2.c0 IN ()))))));
SELECT ALL * FROM vt0, vt2 WHERE ('켁AH4');
SELECT ALL * FROM vt0, vt2 WHERE ((('켁AH4')AND(((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1))) NOT BETWEEN (((vt2.c0)<<(vt0.c0))) AND ((vt2.c0 IN ()))))));
SELECT MAX(vt2.c1) FROM vt2 WHERE ((((vt2.c1)=(vt2.c1)) IN ((- ('')))));
SELECT MAX(vt2.c1) FROM vt2 WHERE ((((vt2.c1)=(vt2.c1)) IN ((- (''))))) LIMIT 0 INTERSECT SELECT MAX(vt2.c1) FROM vt2 WHERE (CASE ((vt2.c0) IS TRUE)  WHEN ((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c1)) THEN (((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c1))) END) LIMIT 0X0;
SELECT MIN(vt2.c0) FROM vt0, vt2 WHERE (((vt0.c0 COLLATE BINARY)*(((vt2.c1) ISNULL)))) ORDER BY ((((vt2.c1)<('1229900646')))LIKE(CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END));
SELECT ALL MIN(vt2.c0) FROM vt0, vt2 WHERE (((((vt0.c0 COLLATE BINARY)*(((vt2.c1) ISNULL))))AND(((vt0.c0 COLLATE BINARY)<=(((vt2.c1)>(vt2.c1))))))) ORDER BY ((((vt2.c1)<('1229900646')))LIKE(CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)) LIMIT 0 INTERSECT SELECT ALL MIN(vt2.c0) FROM vt0, vt2 WHERE (((vt2.c0)>>(((vt0.c0)>>(vt0.c0))))) ORDER BY ((((vt2.c1)<('1229900646')))LIKE(CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)) LIMIT 0X0;
SELECT * FROM vt0, vt2 WHERE (((vt2.c0)=(GLOB(vt2.c1, vt2.c0)))) ORDER BY (((vt0.c0)>(vt2.c0)) IN ())  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((vt2.c0)==(GLOB(vt2.c1, vt2.c0)))) ORDER BY CASE WHEN CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt0.c0 END THEN (0.855711865185379 IN (vt2.c1)) WHEN (((vt2.c0, vt2.c1)) NOT BETWEEN ((vt0.c0, vt2.c0)) AND ((NULL, vt2.c0))) THEN (vt0.c0 IN ()) WHEN ((vt0.c0)IS(vt2.c1)) THEN (- (vt2.c1)) ELSE (vt2.c1 IN (vt2.c1)) END DESC  NULLS FIRST, ((NULL)<=(vt2.c0 COLLATE BINARY)) ASC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE (((vt2.c0)=(GLOB(vt2.c1, vt2.c0)))) ORDER BY (((vt0.c0)>(vt2.c0)) IN ())  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE (((((((vt0.c0)>>(vt0.c0)))AND(CAST(v0.c1 AS NUMERIC))))OR(((vt2.c0)AND(v0.c2)))));
SELECT DISTINCT * FROM vt0 NOT INDEXED, v0, vt2 WHERE (((((((vt0.c0)>>(vt0.c0)))AND(CAST(v0.c1 AS NUMERIC))))OR(((vt2.c0)AND(v0.c2))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((((v0.c3) IS FALSE))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c0 ELSE vt2.c0 END)))AND(((vt2.c0)LIKE(v0.c3))))) LIMIT 0x0;
SELECT * FROM vt0, v0, vt2 WHERE (((((((vt0.c0)>>(vt0.c0)))AND(CAST(v0.c1 AS NUMERIC))))OR(((vt2.c0)AND(v0.c2)))));
SELECT DISTINCT * FROM vt0 NOT INDEXED, v0, vt2 WHERE (((((((vt0.c0)>>(vt0.c0)))AND(CAST(v0.c1 AS NUMERIC))))OR(((vt2.c0)AND(v0.c2))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((((v0.c3) IS FALSE))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c0 ELSE vt2.c0 END)))AND(((vt2.c0)LIKE(v0.c3))))) LIMIT 0x0;
SELECT ALL * FROM v0, vt0 WHERE ((('-268503340') NOTNULL));
SELECT DISTINCT * FROM v0, vt0 WHERE ((('-268503340') NOTNULL)) ORDER BY v0.c2 ASC, (- ((+ (v0.c1)))) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM v0, vt0 WHERE ((('-268503340') NOTNULL));
SELECT DISTINCT * FROM v0, vt0 WHERE ((('-268503340') NOTNULL)) ORDER BY v0.c2 ASC, (- ((+ (v0.c1)))) DESC  NULLS LAST LIMIT 1;
SELECT * FROM v0, vt2, vt0 WHERE (((vt0.c0 IN ()) IN ())) ORDER BY ((((((vt2.c1)OR(vt2.c0)))OR(vt0.c0))) NOTNULL) ASC, '0.7435718392262334';
SELECT * FROM v0, vt2, vt0 WHERE (((vt0.c0 IN ()) IN ())) ORDER BY (NOT (CAST(v0.c0 AS REAL))) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM v0, vt2, vt0 WHERE (((vt0.c0 IN ()) IN ())) ORDER BY ((((((vt2.c1)OR(vt2.c0)))OR(vt0.c0))) NOTNULL) ASC, '0.7435718392262334';
SELECT * FROM v0, vt2, vt0 WHERE (((vt0.c0 IN ()) IN ())) ORDER BY (NOT (CAST(v0.c0 AS REAL))) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt0, vt2 WHERE (((CAST(vt0.c0 AS NUMERIC))>=(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY vt2.c1 ASC  NULLS FIRST, (((~ (vt0.c0))) IS TRUE)  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((((CAST(vt0.c0 AS NUMERIC))>=(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0)))))AND(CAST(vt2.c0 AS TEXT)))) ORDER BY vt2.c1 ASC  NULLS FIRST, (((~ (vt0.c0))) IS TRUE)  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE (((CAST(vt0.c0 AS NUMERIC))>=(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY vt2.c1 ASC  NULLS FIRST, (((~ (vt0.c0))) IS TRUE)  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((((CAST(vt0.c0 AS NUMERIC))>=(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0)))))AND(CAST(vt2.c0 AS TEXT)))) ORDER BY vt2.c1 ASC  NULLS FIRST, (((~ (vt0.c0))) IS TRUE)  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (CASE v0.c2  WHEN v0.c0 THEN 0Xffffffff9261176e WHEN vt0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 ELSE NULL END COLLATE RTRIM) ORDER BY (((((v0.c1))<>((v0.c0))))<(((vt0.c0) BETWEEN (v0.c2) AND (2087839911))))  NULLS LAST, CAST(json_valid(v0.c0) AS REAL), v0.c3, CAST(v0.c2 COLLATE RTRIM AS BLOB) ASC;
SELECT DISTINCT * FROM v0, vt0 WHERE (CASE v0.c2  WHEN v0.c0 THEN 0Xffffffff9261176e WHEN vt0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 ELSE NULL END COLLATE RTRIM) ORDER BY NULL COLLATE RTRIM  NULLS FIRST, (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)) IN (CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN 'j-6B' END)) DESC, ((v0.c2) IS TRUE) COLLATE RTRIM DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (((0xffffffff914efa47)<<(((0Xfffffffff5f8310f) NOT BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY NULL COLLATE RTRIM  NULLS FIRST, (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)) IN (CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN 'j-6B' END)) DESC, ((v0.c2) IS TRUE) COLLATE RTRIM DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (CASE v0.c2  WHEN v0.c0 THEN 0Xffffffff9261176e WHEN vt0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 ELSE NULL END COLLATE RTRIM) ORDER BY (((((v0.c1))<>((v0.c0))))<(((vt0.c0) BETWEEN (v0.c2) AND (2087839911))))  NULLS LAST, CAST(json_valid(v0.c0) AS REAL), v0.c3, CAST(v0.c2 COLLATE RTRIM AS BLOB) ASC;
SELECT DISTINCT * FROM v0, vt0 WHERE (CASE v0.c2  WHEN v0.c0 THEN 0Xffffffff9261176e WHEN vt0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 ELSE NULL END COLLATE RTRIM) ORDER BY NULL COLLATE RTRIM  NULLS FIRST, (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)) IN (CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN 'j-6B' END)) DESC, ((v0.c2) IS TRUE) COLLATE RTRIM DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (((0xffffffff914efa47)<<(((0Xfffffffff5f8310f) NOT BETWEEN (v0.c0) AND (v0.c1))))) ORDER BY NULL COLLATE RTRIM  NULLS FIRST, (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c1)) IN (CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN 'j-6B' END)) DESC, ((v0.c2) IS TRUE) COLLATE RTRIM DESC  NULLS FIRST;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE ((((vt2.c0, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN (((((vt2.c1))>=((vt2.c1))), ((((((vt2.c0)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)), vt2.c1, ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)), CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE NULL END)) AND (((vt2.c0 IN (vt2.c1)), ((vt2.c1)/(vt2.c1)), (vt2.c1 IN ()), HEX(vt2.c1), ((vt2.c1)||(vt2.c1)))))) ORDER BY (- (SQLITE_VERSION())) DESC, ((((vt2.c0 IN (NULL))))<=((vt2.c0))) ASC, CASE CAST(vt2.c0 AS TEXT)  WHEN ((vt2.c0) NOT NULL) THEN ((vt2.c0)=(vt2.c0)) WHEN vt2.c1 THEN vt2.c0 COLLATE NOCASE ELSE ABS(DISTINCT vt2.c0) END DESC;
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE ((((vt2.c0, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN (((((vt2.c1))>=((vt2.c1))), ((((((vt2.c0)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)), vt2.c1, ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)), CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE NULL END)) AND (((vt2.c0 IN (vt2.c1)), ((vt2.c1)/(vt2.c1)), (vt2.c1 IN ()), HEX(vt2.c1), ((vt2.c1)||(vt2.c1)))))) ORDER BY INSTR(CAST(vt2.c1 AS INTEGER), ((vt2.c1)|(vt2.c1)))  NULLS FIRST, ((json_quote(vt2.c1))LIKE(vt2.c1 COLLATE NOCASE)) ASC LIMIT 0x2 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (json_object(NULL, CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END, CAST(vt2.c0 AS BLOB))) ORDER BY INSTR(CAST(vt2.c1 AS INTEGER), ((vt2.c1)|(vt2.c1)))  NULLS FIRST, ((json_quote(vt2.c1))LIKE(vt2.c1 COLLATE NOCASE)) ASC LIMIT 0x2;
SELECT * FROM vt2 WHERE (((((vt2.c0)*(vt2.c0))) NOT BETWEEN (vt2.c0) AND (TRIM(DISTINCT vt2.c1)))) ORDER BY NULL ASC, ((vt2.c1) BETWEEN ((NOT (vt2.c1))) AND ((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((x''))))) DESC  NULLS FIRST, ((((CASE vt2.c0  WHEN vt2.c0 THEN x'5cdb' END)OR(CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)))OR(vt2.c1)) ASC;
SELECT * FROM vt2 WHERE (((((vt2.c0)*(vt2.c0))) NOT BETWEEN (vt2.c0) AND (TRIM(DISTINCT vt2.c1)))) ORDER BY NULL ASC, ((vt2.c1) BETWEEN ((NOT (vt2.c1))) AND ((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((x''))))) DESC  NULLS FIRST, ((((CASE vt2.c0  WHEN vt2.c0 THEN x'5cdb' END)OR(CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)))OR(vt2.c1)) ASC;
SELECT * FROM vt2 WHERE (((((vt2.c0)*(vt2.c0))) NOT BETWEEN (vt2.c0) AND (TRIM(DISTINCT vt2.c1)))) ORDER BY NULL ASC, ((vt2.c1) BETWEEN ((NOT (vt2.c1))) AND ((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((x''))))) DESC  NULLS FIRST, ((((CASE vt2.c0  WHEN vt2.c0 THEN x'5cdb' END)OR(CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)))OR(vt2.c1)) ASC;
SELECT * FROM vt2 WHERE (((((vt2.c0)*(vt2.c0))) NOT BETWEEN (vt2.c0) AND (TRIM(DISTINCT vt2.c1)))) ORDER BY NULL ASC, ((vt2.c1) BETWEEN ((NOT (vt2.c1))) AND ((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((x''))))) DESC  NULLS FIRST, ((((CASE vt2.c0  WHEN vt2.c0 THEN x'5cdb' END)OR(CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)))OR(vt2.c1)) ASC;
SELECT ALL * FROM vt0 CROSS JOIN v0 ON ((CAST('204215965' AS INTEGER)) NOT BETWEEN (((v0.c0)==(vt2.c1))) AND ((v0.c1 IN (vt2.c0)))) LEFT OUTER JOIN vt2 ON CASE WHEN ((v0.c1) IS FALSE) THEN TOTAL_CHANGES() WHEN ((v0.c2)AND(v0.c2)) THEN ((((v0.c1)AND(vt0.c0)))OR(v0.c1)) WHEN vt0.c0 THEN ((0.2680158354918778) IS FALSE) WHEN CAST(v0.c1 AS NUMERIC) THEN TYPEOF(v0.c2) ELSE vt2.c1 END WHERE (((((((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((v0.c0)>=(v0.c0)))))OR('1e500')))OR(((v0.c2) IS TRUE))));
SELECT * FROM vt0 CROSS JOIN v0 ON ((CAST('204215965' AS INTEGER)) NOT BETWEEN (((v0.c0)=(vt2.c1))) AND ((v0.c1 IN (vt2.c0)))) LEFT OUTER JOIN vt2 ON CASE WHEN ((v0.c1) IS FALSE) THEN TOTAL_CHANGES() WHEN ((v0.c2)AND(v0.c2)) THEN ((((v0.c1)AND(vt0.c0)))OR(v0.c1)) WHEN vt0.c0 THEN ((0.2680158354918778) IS FALSE) WHEN CAST(v0.c1 AS NUMERIC) THEN TYPEOF(v0.c2) ELSE vt2.c1 END WHERE (((((((((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((v0.c0)>(v0.c0)))))OR('1e500')))OR(((v0.c2) IS TRUE))))AND((((((vt2.c1, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2)) AND ((vt2.c1, 0.9633832114954654))))&(((vt0.c0) NOTNULL))))));
SELECT ALL * FROM vt0 CROSS JOIN v0 ON ((CAST('204215965' AS INTEGER)) NOT BETWEEN (((v0.c0)==(vt2.c1))) AND ((v0.c1 IN (vt2.c0)))) LEFT OUTER JOIN vt2 ON CASE WHEN ((v0.c1) IS FALSE) THEN TOTAL_CHANGES() WHEN ((v0.c2)AND(v0.c2)) THEN ((((v0.c1)AND(vt0.c0)))OR(v0.c1)) WHEN vt0.c0 THEN ((0.2680158354918778) IS FALSE) WHEN CAST(v0.c1 AS NUMERIC) THEN TYPEOF(v0.c2) ELSE vt2.c1 END WHERE (((((((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((v0.c0)>=(v0.c0)))))OR('1e500')))OR(((v0.c2) IS TRUE))));
SELECT * FROM vt0 CROSS JOIN v0 ON ((CAST('204215965' AS INTEGER)) NOT BETWEEN (((v0.c0)=(vt2.c1))) AND ((v0.c1 IN (vt2.c0)))) LEFT OUTER JOIN vt2 ON CASE WHEN ((v0.c1) IS FALSE) THEN TOTAL_CHANGES() WHEN ((v0.c2)AND(v0.c2)) THEN ((((v0.c1)AND(vt0.c0)))OR(v0.c1)) WHEN vt0.c0 THEN ((0.2680158354918778) IS FALSE) WHEN CAST(v0.c1 AS NUMERIC) THEN TYPEOF(v0.c2) ELSE vt2.c1 END WHERE (((((((((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((v0.c0)>(v0.c0)))))OR('1e500')))OR(((v0.c2) IS TRUE))))AND((((((vt2.c1, v0.c0)) NOT BETWEEN ((v0.c2, v0.c2)) AND ((vt2.c1, 0.9633832114954654))))&(((vt0.c0) NOTNULL))))));
SELECT * FROM vt2, v0, vt0 WHERE ((+ (x'')));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((+ (x''))) LIMIT 0x2;
SELECT * FROM vt2, v0, vt0 WHERE ((+ (x'')));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((+ (x''))) LIMIT 0x2;
SELECT ALL * FROM vt2 WHERE (((((vt2.c0)&(vt2.c0)))=(((0x463ddc37)IS NOT('-405289896')))));
SELECT DISTINCT * FROM vt2 WHERE (((((((vt2.c0)&(vt2.c0)))==(((1178459191)IS NOT('-405289896')))))AND(TRIM(((vt2.c0)AND(vt2.c0)))))) ORDER BY CAST(((((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1)) AS NUMERIC), ((0.3904313551494135)GLOB(vt2.c0)) ASC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (((((vt2.c0)&(vt2.c0)))=(((0x463ddc37)IS NOT('-405289896')))));
SELECT DISTINCT * FROM vt2 WHERE (((((((vt2.c0)&(vt2.c0)))==(((1178459191)IS NOT('-405289896')))))AND(TRIM(((vt2.c0)AND(vt2.c0)))))) ORDER BY CAST(((((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1)) AS NUMERIC), ((0.3904313551494135)GLOB(vt2.c0)) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (CAST((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, NULL))) AS REAL)) ORDER BY 'wvkd7';
SELECT ALL * FROM vt0 WHERE (CAST((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, NULL))) AS REAL)) ORDER BY 'wvkd7' INTERSECT SELECT ALL * FROM vt0 WHERE (5.26554451E8 COLLATE NOCASE) ORDER BY 'wvkd7';
SELECT * FROM vt0 WHERE (CAST((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, NULL))) AS REAL)) ORDER BY 'wvkd7';
SELECT ALL * FROM vt0 WHERE (CAST((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, NULL))) AS REAL)) ORDER BY 'wvkd7' INTERSECT SELECT ALL * FROM vt0 WHERE (5.26554451E8 COLLATE NOCASE) ORDER BY 'wvkd7';
SELECT * FROM vt0 WHERE (UPPER(DISTINCT ((vt0.c0)*(vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (((UPPER(DISTINCT ((vt0.c0)*(vt0.c0))))AND(((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM))) LIMIT 0x0;
SELECT * FROM vt0 WHERE (UPPER(DISTINCT ((vt0.c0)*(vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (((UPPER(DISTINCT ((vt0.c0)*(vt0.c0))))AND(((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM))) LIMIT 0x0;
SELECT * FROM v0 WHERE ((STRFTIME(v0.c1, v0.c2, NULL) IN (TYPEOF(v0.c0)))) ORDER BY DATE(v0.c0, v0.c3, v0.c1) COLLATE BINARY, ((CASE WHEN v0.c0 THEN v0.c2 ELSE 'UH+' END)LIKE((- (v0.c1))));
SELECT * FROM v0 WHERE ((STRFTIME(v0.c1, v0.c2, NULL) IN (TYPEOF(v0.c0)))) ORDER BY DATE(v0.c0, v0.c3, v0.c1) COLLATE BINARY, ((CASE WHEN v0.c0 THEN v0.c2 ELSE 'UH+' END)LIKE((- (v0.c1)))) LIMIT 0;
SELECT * FROM v0 WHERE ((STRFTIME(v0.c1, v0.c2, NULL) IN (TYPEOF(v0.c0)))) ORDER BY DATE(v0.c0, v0.c3, v0.c1) COLLATE BINARY, ((CASE WHEN v0.c0 THEN v0.c2 ELSE 'UH+' END)LIKE((- (v0.c1))));
SELECT * FROM v0 WHERE ((STRFTIME(v0.c1, v0.c2, NULL) IN (TYPEOF(v0.c0)))) ORDER BY DATE(v0.c0, v0.c3, v0.c1) COLLATE BINARY, ((CASE WHEN v0.c0 THEN v0.c2 ELSE 'UH+' END)LIKE((- (v0.c1)))) LIMIT 0;
SELECT MIN(v0.c0) FROM vt0 INNER JOIN v0 ON CAST(vt2.c1 AS BLOB) COLLATE RTRIM INNER JOIN vt2 ON ((0.8316187690192488) IS FALSE) WHERE (NULL) ORDER BY (- (((v0.c0) ISNULL))) ASC  NULLS LAST, (((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0)) IN ((NOT (v0.c0)))), (~ (vt0.c0)) DESC  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM vt0 INNER JOIN v0 ON CAST(vt2.c1 AS BLOB) COLLATE RTRIM INNER JOIN vt2 ON ((0.8316187690192488) IS FALSE) WHERE (((NULL)AND(((((x'ae' IN ()), ((vt2.c0)OR(v0.c2))))<=((((v0.c1)>(v0.c3)), (- (vt0.c0)))))))) ORDER BY (- (((v0.c0) ISNULL))) ASC  NULLS LAST, (((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0)) IN ((NOT (v0.c0)))), (~ (vt0.c0)) DESC  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0 WHERE ((((v0.c1, v0.c1)) BETWEEN ((CASE v0.c1  WHEN v0.c0 THEN v0.c3 ELSE v0.c1 END, NULL)) AND (((((v0.c0)) NOT BETWEEN ((v0.c2)) AND ((v0.c3))), CASE WHEN v0.c2 THEN 'FM' END))));
SELECT ALL * FROM v0 WHERE ((((v0.c1, v0.c1)) BETWEEN ((CASE v0.c1  WHEN v0.c0 THEN v0.c3 ELSE v0.c1 END, NULL)) AND (((((v0.c0)) NOT BETWEEN ((v0.c2)) AND ((v0.c3))), CASE WHEN v0.c2 THEN 'FM' END)))) LIMIT 1;
SELECT * FROM v0 WHERE ((((v0.c1, v0.c1)) BETWEEN ((CASE v0.c1  WHEN v0.c0 THEN v0.c3 ELSE v0.c1 END, NULL)) AND (((((v0.c0)) NOT BETWEEN ((v0.c2)) AND ((v0.c3))), CASE WHEN v0.c2 THEN 'FM' END))));
SELECT ALL * FROM v0 WHERE ((((v0.c1, v0.c1)) BETWEEN ((CASE v0.c1  WHEN v0.c0 THEN v0.c3 ELSE v0.c1 END, NULL)) AND (((((v0.c0)) NOT BETWEEN ((v0.c2)) AND ((v0.c3))), CASE WHEN v0.c2 THEN 'FM' END)))) LIMIT 1;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((NOT (vt2.c0)) IN ()));
SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((((NOT (vt2.c0)) IN ()))AND(((((((v0.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)))OR(SQLITE_VERSION())))OR(json(NULL)))))) INTERSECT SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (-1320988871);
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((NOT (vt2.c0)) IN ()));
SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((((NOT (vt2.c0)) IN ()))AND(((((((v0.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)))OR(SQLITE_VERSION())))OR(json(NULL)))))) INTERSECT SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (-1320988871);
SELECT * FROM vt0 WHERE (((rtreenode(vt0.c0, vt0.c0))%('-1815351525'))) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE) DESC, ((((((vt0.c0)<>(vt0.c0)))AND(((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))))AND(0.533691105812458));
SELECT ALL * FROM vt0 WHERE (((((rtreenode(vt0.c0, vt0.c0))%('-1815351525')))AND(0.38720789161175817))) ORDER BY (- (NULL));
SELECT * FROM vt0 WHERE (((rtreenode(vt0.c0, vt0.c0))%('-1815351525'))) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE) DESC, ((((((vt0.c0)<>(vt0.c0)))AND(((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))))AND(0.533691105812458));
SELECT ALL * FROM vt0 WHERE (((((rtreenode(vt0.c0, vt0.c0))%('-1815351525')))AND(0.38720789161175817))) ORDER BY (- (NULL));
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE (((v0.c3)+(v0.c3)) COLLATE NOCASE) ORDER BY TYPEOF(DISTINCT (NOT (vt2.c0))) DESC  NULLS FIRST, (((vt2.c1, vt2.c0, vt0.c0)) BETWEEN ((((v0.c0)>(vt2.c0)), v0.c0 COLLATE NOCASE, COALESCE(NULL, v0.c2, vt2.c1))) AND (((((v0.c1, v0.c2, vt0.c0, v0.c2))>((v0.c1, vt2.c0, vt2.c1, v0.c2))), ((v0.c0)|(v0.c0)), (((v0.c1, 0.11962798872601432, v0.c0))>((vt2.c1, v0.c0, v0.c1)))))) DESC  NULLS LAST, CAST(((((((((((((((v0.c0)AND(vt2.c0)))AND(vt0.c0)))AND(v0.c0)))OR(vt2.c0)))OR(v0.c1)))AND(vt0.c0)))AND(vt2.c0)) AS REAL);
SELECT DISTINCT COUNT(*) FROM vt2, v0 NOT INDEXED, vt0 WHERE (((v0.c3)+(v0.c3)) COLLATE NOCASE) ORDER BY ((((((v0.c2)OR(CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c1 ELSE v0.c3 END)))AND((((vt2.c1)) NOT BETWEEN ((v0.c1)) AND ((vt2.c0))))))OR(CAST(v0.c2 AS NUMERIC)))  NULLS LAST, '98982355' INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((((vt2.c1)OR(vt2.c1)))<=((v0.c1 IN (0.4093983599534158))))) ORDER BY ((((((v0.c2)OR(CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c1 ELSE v0.c3 END)))AND((((vt2.c1)) NOT BETWEEN ((v0.c1)) AND ((vt2.c0))))))OR(CAST(v0.c2 AS NUMERIC)))  NULLS LAST, '98982355';
SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS BLOB)) ISNULL));
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c0 AS BLOB)) ISNULL))AND((((~ (vt0.c0)))OR(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))))) LIMIT 0X0;
SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS BLOB)) ISNULL));
SELECT ALL * FROM vt0 WHERE (((((CAST(vt0.c0 AS BLOB)) ISNULL))AND((((~ (vt0.c0)))OR(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))))) LIMIT 0X0;
SELECT MAX(v0.c2) FROM v0 CROSS JOIN vt2 ON ((((vt0.c0) NOT BETWEEN (0.9155561638802953) AND (vt2.c1)))AND(CAST(v0.c2 AS REAL))) CROSS JOIN vt0 ON ((CASE v0.c1  WHEN v0.c1 THEN '' END) NOT BETWEEN (IFNULL(DISTINCT v0.c3, v0.c1)) AND (NULL)) WHERE ((((vt2.c1, v0.c3, vt2.c1, vt0.c0)) NOT BETWEEN ((((vt2.c1) IS FALSE), CAST(v0.c2 AS REAL), (((NULL, vt2.c0))!=((v0.c3, vt0.c0))), ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))) AND ((((0.10634981623110851) NOT BETWEEN (x'82') AND (vt2.c0)), ((((vt2.c0)AND(x'992833')))AND(NULL)), ((((((v0.c1)OR(v0.c3)))OR(vt2.c1)))AND(vt2.c1)), 0.609478820417245)))) ORDER BY ((((vt0.c0)*(vt0.c0))) IS TRUE)  NULLS FIRST, ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt0.c0)))<=(((v0.c3)/(vt2.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c2) FROM v0 CROSS JOIN vt2 ON ((((vt0.c0) NOT BETWEEN (0.9155561638802953) AND (vt2.c1)))AND(CAST(v0.c2 AS REAL))) CROSS JOIN vt0 ON ((CASE v0.c1  WHEN v0.c1 THEN '' END) NOT BETWEEN (IFNULL(DISTINCT v0.c3, v0.c1)) AND (NULL)) WHERE ((((vt2.c1, v0.c3, vt2.c1, vt0.c0)) NOT BETWEEN ((((vt2.c1) IS FALSE), CAST(v0.c2 AS REAL), (((NULL, vt2.c0))<>((v0.c3, vt0.c0))), ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))) AND ((((0.10634981623110851) NOT BETWEEN (x'82') AND (vt2.c0)), ((((vt2.c0)AND(x'992833')))AND(NULL)), ((((((v0.c1)OR(v0.c3)))OR(vt2.c1)))AND(vt2.c1)), 0.609478820417245)))) ORDER BY ((((vt0.c0)*(vt0.c0))) IS TRUE)  NULLS FIRST, ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt0.c0)))<=(((v0.c3)/(vt2.c0)))) ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM v0, vt0 WHERE (CAST(CAST(vt0.c0 AS INTEGER) AS REAL));
SELECT DISTINCT * FROM v0, vt0 WHERE (((CAST(CAST(vt0.c0 AS INTEGER) AS REAL))AND(CAST(((v0.c1)!=(vt0.c0)) AS BLOB)))) ORDER BY (CAST(vt0.c0 AS TEXT) IN ()) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (CASE v0.c0  WHEN v0.c1 THEN (+ (vt0.c0)) WHEN ((v0.c0) IS TRUE) THEN CAST(v0.c0 AS REAL) WHEN (~ (v0.c0)) THEN CAST(v0.c2 AS TEXT) WHEN (v0.c1 IN (v0.c3)) THEN ((0.014654998920248352)IS(v0.c1)) END) ORDER BY (CAST(vt0.c0 AS TEXT) IN ()) ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE (CAST(CAST(vt0.c0 AS INTEGER) AS REAL));
SELECT DISTINCT * FROM v0, vt0 WHERE (((CAST(CAST(vt0.c0 AS INTEGER) AS REAL))AND(CAST(((v0.c1)!=(vt0.c0)) AS BLOB)))) ORDER BY (CAST(vt0.c0 AS TEXT) IN ()) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (CASE v0.c0  WHEN v0.c1 THEN (+ (vt0.c0)) WHEN ((v0.c0) IS TRUE) THEN CAST(v0.c0 AS REAL) WHEN (~ (v0.c0)) THEN CAST(v0.c2 AS TEXT) WHEN (v0.c1 IN (v0.c3)) THEN ((0.014654998920248352)IS(v0.c1)) END) ORDER BY (CAST(vt0.c0 AS TEXT) IN ()) ASC  NULLS LAST LIMIT 0;
SELECT ALL MIN(v0.c3) FROM v0, vt0, vt2 WHERE (CAST(((vt2.c0) BETWEEN (0.7295573804368409) AND (-1607669206)) AS TEXT));
SELECT DISTINCT MIN(v0.c3) FROM v0, vt0, vt2 WHERE (((CAST(((vt2.c0) BETWEEN (0.7295573804368409) AND (-1607669206)) AS TEXT))AND(TYPEOF(DISTINCT RTRIM(vt2.c1))))) ORDER BY ((v0.c0) BETWEEN (v0.c1) AND (v0.c0)) COLLATE BINARY ASC LIMIT 0;
SELECT * FROM vt0, vt2, v0 WHERE (vt2.c1);
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (vt2.c1) LIMIT 2;
SELECT * FROM vt0, vt2, v0 WHERE (vt2.c1);
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (vt2.c1) LIMIT 2;
SELECT ALL MIN(vt2.c1) FROM vt0, vt2 WHERE (((vt0.c0 COLLATE RTRIM) NOT BETWEEN (TRIM(vt0.c0, vt2.c0)) AND (((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY CASE WHEN (((vt2.c0, vt0.c0, vt2.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c0, vt2.c1, vt0.c0)) AND ((vt2.c1, vt2.c0, NULL, vt2.c1))) THEN (+ (vt2.c0)) WHEN (- (vt0.c0)) THEN vt2.c1 COLLATE RTRIM WHEN ((vt2.c0) BETWEEN (vt0.c0) AND (0.5495694010585677)) THEN CAST(vt0.c0 AS INTEGER) END, ((((((((((vt2.c1) BETWEEN (vt2.c1) AND (vt0.c0)))AND(x'')))OR((~ (vt2.c1)))))OR((+ (vt0.c0)))))OR((((vt0.c0, vt0.c0, vt2.c1))=((vt2.c0, vt0.c0, vt2.c1))))) DESC;
SELECT DISTINCT MIN(vt2.c1) FROM vt0, vt2 WHERE (((((vt0.c0 COLLATE RTRIM) NOT BETWEEN (TRIM(vt0.c0, vt2.c0)) AND (((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(vt2.c1))) ORDER BY CASE WHEN (((vt2.c0, vt0.c0, vt2.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c0, vt2.c1, vt0.c0)) AND ((vt2.c1, vt2.c0, NULL, vt2.c1))) THEN (+ (vt2.c0)) WHEN (- (vt0.c0)) THEN vt2.c1 COLLATE RTRIM WHEN ((vt2.c0) BETWEEN (vt0.c0) AND (0.5495694010585677)) THEN CAST(vt0.c0 AS INTEGER) END, ((((((((((vt2.c1) BETWEEN (vt2.c1) AND (vt0.c0)))AND(x'')))OR((~ (vt2.c1)))))OR((+ (vt0.c0)))))OR((((vt0.c0, vt0.c0, vt2.c1))=((vt2.c0, vt0.c0, vt2.c1))))) DESC LIMIT 4 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt0, vt2 WHERE (x'c8') ORDER BY CASE WHEN (((vt2.c0, vt0.c0, vt2.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c0, vt2.c1, vt0.c0)) AND ((vt2.c1, vt2.c0, NULL, vt2.c1))) THEN (+ (vt2.c0)) WHEN (- (vt0.c0)) THEN vt2.c1 COLLATE RTRIM WHEN ((vt2.c0) BETWEEN (vt0.c0) AND (0.5495694010585677)) THEN CAST(vt0.c0 AS INTEGER) END, ((((((((((vt2.c1) BETWEEN (vt2.c1) AND (vt0.c0)))AND(x'')))OR((~ (vt2.c1)))))OR((+ (vt0.c0)))))OR((((vt0.c0, vt0.c0, vt2.c1))==((vt2.c0, vt0.c0, vt2.c1))))) DESC LIMIT 0x4;
SELECT * FROM v0 WHERE (((((v0.c3) ISNULL)) NOT BETWEEN ((NOT (v0.c0))) AND (v0.c2)));
SELECT ALL * FROM v0 WHERE (((((v0.c3) ISNULL)) NOT BETWEEN ((NOT (v0.c0))) AND (v0.c2)));
SELECT * FROM v0 WHERE (((((v0.c3) ISNULL)) NOT BETWEEN ((NOT (v0.c0))) AND (v0.c2)));
SELECT ALL * FROM v0 WHERE (((((v0.c3) ISNULL)) NOT BETWEEN ((NOT (v0.c0))) AND (v0.c2)));
SELECT ALL MAX(vt2.c1) FROM vt0 NATURAL JOIN vt2 LEFT OUTER JOIN v0 ON ((((((vt2.c0)OR(v0.c1)))OR(v0.c2))) NOT NULL) WHERE (((((v0.c3)OR(v0.c3)))OR(vt0.c0)) COLLATE RTRIM);
SELECT DISTINCT MAX(vt2.c1) FROM vt0 NATURAL JOIN vt2 INNER JOIN v0 ON ((((((vt2.c0)OR(v0.c1)))OR(v0.c2))) NOT NULL) WHERE (((((v0.c3)OR(v0.c3)))OR(vt0.c0)) COLLATE RTRIM) INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt0 NATURAL JOIN vt2 INNER JOIN v0 ON ((((((vt2.c0)OR(v0.c1)))OR(v0.c2))) NOT NULL) WHERE (((CAST(vt2.c0 AS INTEGER)) BETWEEN ((((v0.c1, vt2.c1, vt0.c0, v0.c0, vt0.c0))<((v0.c2, v0.c3, v0.c0, v0.c0, v0.c1)))) AND ((v0.c3 IN (vt0.c0, v0.c2)))));
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (STRFTIME(((v0.c0) ISNULL), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)), CASE vt2.c1  WHEN vt2.c1 THEN 0.4773559731252338 WHEN v0.c3 THEN v0.c2 END, CAST(vt2.c1 AS BLOB)));
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (STRFTIME(((v0.c0) ISNULL), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)), CASE vt2.c1  WHEN vt2.c1 THEN 0.4773559731252338 WHEN v0.c3 THEN v0.c2 END, CAST(vt2.c1 AS BLOB))) ORDER BY (((v0.c0, vt2.c1)) BETWEEN ((v0.c0, v0.c0)) AND ((vt2.c0, vt0.c0))) COLLATE BINARY  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (vt2.c0 COLLATE BINARY) ORDER BY (((v0.c0, vt2.c1)) BETWEEN ((v0.c0, v0.c0)) AND ((vt2.c0, vt0.c0))) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (json_array_length(CAST('U' AS INTEGER), (~ (0.6714746166678156)))) ORDER BY 0.5011384588126123 COLLATE NOCASE ASC  NULLS FIRST, ((((((((((vt2.c1 COLLATE NOCASE)OR(vt0.c0)))OR(((((vt0.c0)OR(vt2.c0)))OR(vt2.c1)))))AND(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))))AND(vt0.c0)) DESC  NULLS LAST, CAST((vt0.c0 IN (vt2.c0)) AS NUMERIC) DESC  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (json_array_length(CAST('U' AS INTEGER), (~ (0.6714746166678156)))) ORDER BY (((vt2.c0)) BETWEEN ((((vt0.c0) IS TRUE))) AND ((CAST(vt2.c0 AS NUMERIC))))  NULLS FIRST, DATETIME(LIKE(vt2.c0, vt0.c0), ((((((((vt2.c0)OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)), ((vt0.c0) NOT NULL), vt2.c1, (((vt2.c0))>((vt2.c1)))) ASC INTERSECT SELECT * FROM vt2, vt0 WHERE (((((vt2.c1) BETWEEN (vt2.c1) AND (vt0.c0))) NOT NULL)) ORDER BY (((vt2.c0)) BETWEEN ((((vt0.c0) IS TRUE))) AND ((CAST(vt2.c0 AS NUMERIC))))  NULLS FIRST, DATETIME(LIKE(vt2.c0, vt0.c0), ((((((((vt2.c0)OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)), ((vt0.c0) NOT NULL), vt2.c1, (((vt2.c0))>((vt2.c1)))) ASC;
SELECT * FROM vt2, vt0 WHERE (json_array_length(CAST('U' AS INTEGER), (~ (0.6714746166678156)))) ORDER BY 0.5011384588126123 COLLATE NOCASE ASC  NULLS FIRST, ((((((((((vt2.c1 COLLATE NOCASE)OR(vt0.c0)))OR(((((vt0.c0)OR(vt2.c0)))OR(vt2.c1)))))AND(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))))AND(vt0.c0)) DESC  NULLS LAST, CAST((vt0.c0 IN (vt2.c0)) AS NUMERIC) DESC  NULLS LAST;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (CAST(CAST(vt2.c0 AS REAL) AS NUMERIC)) ORDER BY (((vt2.c1 COLLATE BINARY))<=(((NOT (vt2.c1))))) ASC  NULLS LAST, ((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)-(vt2.c1 COLLATE RTRIM));
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((CAST(CAST(vt2.c0 AS REAL) AS NUMERIC))AND(((vt2.c1) NOTNULL) COLLATE NOCASE))) ORDER BY (((vt2.c1 COLLATE BINARY))<=(((NOT (vt2.c1))))) ASC  NULLS LAST, ((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)-(vt2.c1 COLLATE RTRIM)) INTERSECT SELECT MAX(vt2.c1) FROM vt2 WHERE (((((vt2.c1) ISNULL)) BETWEEN (((vt2.c0)=(vt2.c0))) AND (x'2355'))) ORDER BY (((vt2.c1 COLLATE BINARY))<=(((NOT (vt2.c1))))) ASC  NULLS LAST, ((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)-(vt2.c1 COLLATE RTRIM));
SELECT ALL * FROM vt2, vt0 WHERE (((((((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt2.c0 COLLATE BINARY)))AND(CAST(vt2.c1 AS NUMERIC))))OR(((NULL) NOTNULL))))OR((((vt2.c0, vt0.c0, vt2.c1))>((vt2.c1, 0.5112288973557999, vt2.c0)))))) ORDER BY vt2.c1 DESC, (+ (((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)))), CAST(CAST(vt2.c0 AS BLOB) AS NUMERIC) DESC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((((((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt2.c0 COLLATE BINARY)))AND(CAST(vt2.c1 AS NUMERIC))))OR(((NULL) NOTNULL))))OR((((vt2.c0, vt0.c0, vt2.c1))>((vt2.c1, 0.5112288973557999, vt2.c0))))))AND(((((((((vt2.c1)|(vt0.c0)))OR((vt2.c0 IN ()))))AND(((((((((vt2.c0)OR(-510705599)))OR(vt2.c0)))OR(vt2.c1)))OR(vt0.c0)))))AND((+ (vt0.c0))))))) ORDER BY ((((((((((vt0.c0)OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c1)))OR(((((((vt2.c1)AND(vt0.c0)))OR('n}㩦')))OR(vt0.c0)))))OR(((((vt0.c0)AND(x'')))OR(vt2.c1)))) DESC INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (((((vt0.c0)==(vt2.c1))) IS FALSE)) ORDER BY ((((((((((vt0.c0)OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c1)))OR(((((((vt2.c1)AND(vt0.c0)))OR('n}㩦')))OR(vt0.c0)))))OR(((((vt0.c0)AND(x'')))OR(vt2.c1)))) DESC;
SELECT ALL * FROM vt2, vt0 WHERE (((((((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt2.c0 COLLATE BINARY)))AND(CAST(vt2.c1 AS NUMERIC))))OR(((NULL) NOTNULL))))OR((((vt2.c0, vt0.c0, vt2.c1))>((vt2.c1, 0.5112288973557999, vt2.c0)))))) ORDER BY vt2.c1 DESC, (+ (((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)))), CAST(CAST(vt2.c0 AS BLOB) AS NUMERIC) DESC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((((((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt2.c0 COLLATE BINARY)))AND(CAST(vt2.c1 AS NUMERIC))))OR(((NULL) NOTNULL))))OR((((vt2.c0, vt0.c0, vt2.c1))>((vt2.c1, 0.5112288973557999, vt2.c0))))))AND(((((((((vt2.c1)|(vt0.c0)))OR((vt2.c0 IN ()))))AND(((((((((vt2.c0)OR(-510705599)))OR(vt2.c0)))OR(vt2.c1)))OR(vt0.c0)))))AND((+ (vt0.c0))))))) ORDER BY ((((((((((vt0.c0)OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c1)))OR(((((((vt2.c1)AND(vt0.c0)))OR('n}㩦')))OR(vt0.c0)))))OR(((((vt0.c0)AND(x'')))OR(vt2.c1)))) DESC INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (((((vt0.c0)==(vt2.c1))) IS FALSE)) ORDER BY ((((((((((vt0.c0)OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c1)))OR(((((((vt2.c1)AND(vt0.c0)))OR('n}㩦')))OR(vt0.c0)))))OR(((((vt0.c0)AND(x'')))OR(vt2.c1)))) DESC;
SELECT COUNT(*) FROM vt0 WHERE (((((vt0.c0)GLOB(vt0.c0))) NOT BETWEEN (MIN(vt0.c0, vt0.c0)) AND ((- ('A'))))) ORDER BY CAST(CAST(vt0.c0 AS BLOB) AS NUMERIC) DESC  NULLS FIRST, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((((vt0.c0)GLOB(vt0.c0))) NOT BETWEEN (MIN(vt0.c0, vt0.c0)) AND ((- ('A')))))AND(((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))) BETWEEN (((((vt0.c0)AND(vt0.c0)))OR(vt0.c0))) AND (''))))) ORDER BY CAST(CAST(vt0.c0 AS BLOB) AS NUMERIC) DESC  NULLS FIRST, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY  NULLS LAST INTERSECT SELECT COUNT(*) FROM vt0 WHERE (load_extension(((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))) ORDER BY CAST(CAST(vt0.c0 AS BLOB) AS NUMERIC) DESC  NULLS FIRST, ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c3) NOT BETWEEN (x'') AND (v0.c3)))*(((((((v0.c1)OR(vt2.c0)))AND(0xffffffffb39040cb)))AND(98818379)))));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((((v0.c3) NOT BETWEEN (x'') AND (v0.c3)))*(((((((v0.c1)OR(vt2.c0)))AND(0Xffffffffb39040cb)))AND(0x5e3d94b))))) ORDER BY ((((v0.c3)>=(v0.c3))) BETWEEN (CAST(vt0.c0 AS BLOB)) AND (CAST(v0.c3 AS NUMERIC))) DESC LIMIT 0;
SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c3) NOT BETWEEN (x'') AND (v0.c3)))*(((((((v0.c1)OR(vt2.c0)))AND(0xffffffffb39040cb)))AND(98818379)))));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((((v0.c3) NOT BETWEEN (x'') AND (v0.c3)))*(((((((v0.c1)OR(vt2.c0)))AND(0Xffffffffb39040cb)))AND(0x5e3d94b))))) ORDER BY ((((v0.c3)>=(v0.c3))) BETWEEN (CAST(vt0.c0 AS BLOB)) AND (CAST(v0.c3 AS NUMERIC))) DESC LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE (((v0.c1)GLOB(CASE v0.c2  WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN NULL WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END))) ORDER BY LIKELIHOOD(((v0.c3)AND(v0.c1)), v0.c1 COLLATE RTRIM)  NULLS LAST, CASE WHEN -574332796 THEN (((v0.c2, '', vt0.c0, v0.c2))==((v0.c2, v0.c3, 1316088497, vt0.c0))) END  NULLS FIRST, 0.35475985498727614, ((CAST(v0.c3 AS NUMERIC))GLOB(NULLIF(0.3416852852639902, vt0.c0))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt0 WHERE (((((v0.c1)GLOB(CASE v0.c2  WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN NULL WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END)))AND((rtreenode(vt0.c0, v0.c3) IN ((v0.c2 IN (vt0.c0))))))) ORDER BY ((((((((v0.c0)>=(vt0.c0)))AND(((v0.c0)IS(v0.c3)))))AND((((vt0.c0, v0.c1, v0.c0, vt0.c0, v0.c2, NULL))>((v0.c3, NULL, v0.c3, v0.c0, v0.c3, v0.c2))))))OR((v0.c1 IN (0.6231613971037067, v0.c0)))) ASC, (((v0.c3, HEX(v0.c0)))<((((((((((((NULL)AND(vt0.c0)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c2)))AND(vt0.c0)), CAST('0.0723762534186253' AS REAL)))) DESC, CASE WHEN CAST(x'' AS INTEGER) THEN ((NULL)LIKE(v0.c1)) ELSE (~ (v0.c2)) END DESC INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (x'') ORDER BY ((((((((v0.c0)>=(vt0.c0)))AND(((v0.c0)IS(v0.c3)))))AND((((vt0.c0, v0.c1, v0.c0, vt0.c0, v0.c2, NULL))>((v0.c3, NULL, v0.c3, v0.c0, v0.c3, v0.c2))))))OR((v0.c1 IN (0.6231613971037067, v0.c0)))) ASC, (((v0.c3, HEX(v0.c0)))<((((((((((((NULL)AND(vt0.c0)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c2)))AND(vt0.c0)), CAST('0.0723762534186253' AS REAL)))) DESC, CASE WHEN CAST(x'' AS INTEGER) THEN ((NULL)LIKE(v0.c1)) ELSE (~ (v0.c2)) END DESC;
SELECT ALL * FROM v0, vt0 WHERE (((v0.c1)GLOB(CASE v0.c2  WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN NULL WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN v0.c2 END))) ORDER BY LIKELIHOOD(((v0.c3)AND(v0.c1)), v0.c1 COLLATE RTRIM)  NULLS LAST, CASE WHEN -574332796 THEN (((v0.c2, '', vt0.c0, v0.c2))==((v0.c2, v0.c3, 1316088497, vt0.c0))) END  NULLS FIRST, 0.35475985498727614, ((CAST(v0.c3 AS NUMERIC))GLOB(NULLIF(0.3416852852639902, vt0.c0))) DESC  NULLS FIRST;
SELECT ALL MIN(v0.c3) FROM v0 NATURAL JOIN vt0 NATURAL JOIN vt2 WHERE (CASE WHEN (~ (v0.c0)) THEN CAST(v0.c0 AS TEXT) WHEN (v0.c1 IN (vt0.c0, vt0.c0)) THEN (((vt2.c0))<((v0.c3))) END);
SELECT ALL MIN(v0.c3) FROM v0 NATURAL JOIN vt0 NATURAL JOIN vt2 WHERE (CASE WHEN (~ (v0.c0)) THEN CAST(v0.c0 AS TEXT) WHEN (v0.c1 IN (vt0.c0, vt0.c0)) THEN (((vt2.c0))<((v0.c3))) END) ORDER BY '' DESC INTERSECT SELECT ALL MIN(v0.c3) FROM v0 NATURAL JOIN vt0 NATURAL JOIN vt2 WHERE (((v0.c3) NOTNULL)) ORDER BY '' DESC;
SELECT ALL * FROM v0, vt2 WHERE (v0.c3);
SELECT * FROM v0, vt2 WHERE (v0.c3) LIMIT 1 INTERSECT SELECT ALL * FROM v0, vt2 WHERE ((+ (x'72eeb4'))) LIMIT 0x1;
SELECT ALL * FROM v0, vt2 WHERE (v0.c3);
SELECT * FROM v0, vt2 WHERE (v0.c3) LIMIT 1 INTERSECT SELECT ALL * FROM v0, vt2 WHERE ((+ (x'72eeb4'))) LIMIT 0x1;
SELECT * FROM vt0 CROSS JOIN v0 ON (((v0.c2)) NOT BETWEEN (((((v0.c2, vt0.c0, v0.c3))<=((v0.c3, v0.c0, v0.c3))))) AND ((((('
', NULL)) NOT BETWEEN ((v0.c3, v0.c0)) AND ((v0.c2, v0.c2)))))) WHERE (CASE ((v0.c3) BETWEEN (v0.c2) AND (v0.c3))  WHEN (v0.c3 IN ()) THEN ((((((v0.c3)AND(v0.c2)))AND(v0.c3)))AND(vt0.c0)) ELSE 0.04615539676200653 END) ORDER BY ((((v0.c1, v0.c0))=((vt0.c0, v0.c2))) IN ()) ASC, CAST((('Q')==(vt0.c0)) AS TEXT) ASC;
SELECT DISTINCT * FROM vt0 CROSS JOIN v0 ON (((v0.c2)) NOT BETWEEN (((((v0.c2, vt0.c0, v0.c3))<=((v0.c3, v0.c0, v0.c3))))) AND ((((('
', NULL)) NOT BETWEEN ((v0.c3, v0.c0)) AND ((v0.c2, v0.c2)))))) WHERE (CASE ((v0.c3) BETWEEN (v0.c2) AND (v0.c3))  WHEN (v0.c3 IN ()) THEN ((((((v0.c3)AND(v0.c2)))AND(v0.c3)))AND(vt0.c0)) ELSE 0.04615539676200653 END) ORDER BY (((- (v0.c0)))-((v0.c1 IN (v0.c0)))), json_insert(UPPER(v0.c1), ((((v0.c3)OR(v0.c1)))OR(v0.c3)), CAST(x'' AS BLOB)) DESC  NULLS FIRST, (((~ (v0.c2)))||((((v0.c1))>((v0.c0))))) ASC;
SELECT * FROM vt0 CROSS JOIN v0 ON (((v0.c2)) NOT BETWEEN (((((v0.c2, vt0.c0, v0.c3))<=((v0.c3, v0.c0, v0.c3))))) AND ((((('
', NULL)) NOT BETWEEN ((v0.c3, v0.c0)) AND ((v0.c2, v0.c2)))))) WHERE (CASE ((v0.c3) BETWEEN (v0.c2) AND (v0.c3))  WHEN (v0.c3 IN ()) THEN ((((((v0.c3)AND(v0.c2)))AND(v0.c3)))AND(vt0.c0)) ELSE 0.04615539676200653 END) ORDER BY ((((v0.c1, v0.c0))=((vt0.c0, v0.c2))) IN ()) ASC, CAST((('Q')==(vt0.c0)) AS TEXT) ASC;
SELECT ALL COUNT(*) FROM vt2 INNER JOIN vt0 ON ((((((((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)))AND(vt2.c1)))OR(vt2.c0)))/(vt2.c0 COLLATE NOCASE)) WHERE ((((vt2.c0)) BETWEEN ((((vt2.c0) IS FALSE))) AND ((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))))) ORDER BY 'D', CAST(0.7196056230008061 AS REAL) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2 INNER JOIN vt0 ON ((((((((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)))AND(vt2.c1)))OR(vt2.c0)))/(vt2.c0 COLLATE NOCASE)) WHERE ((((((vt2.c0)) BETWEEN ((((vt2.c0) IS FALSE))) AND ((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1))))))AND(vt2.c1))) ORDER BY CAST((((vt0.c0)) BETWEEN ((vt0.c0)) AND (('Q8'))) AS INTEGER)  NULLS FIRST, CASE ((vt0.c0)>(vt0.c0))  WHEN (((vt2.c1, vt2.c0))==((vt2.c0, vt0.c0))) THEN vt0.c0 COLLATE RTRIM ELSE 0.5427552041843192 END LIMIT 0x0;
SELECT * FROM v0, vt2, vt0 WHERE (vt2.c0) ORDER BY (((vt0.c0, v0.c2, vt2.c0, v0.c1)) NOT BETWEEN ((((((vt2.c1)AND(v0.c2)))AND(v0.c3)), ((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1)), ((NULL) NOT BETWEEN (v0.c2) AND (v0.c1)), CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN vt0.c0 END)) AND ((HEX(DISTINCT v0.c0), (v0.c0 IN (vt2.c1)), vt2.c0, (vt2.c0 IN (v0.c0))))) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (vt2.c0) ORDER BY (((v0.c1 IN (vt2.c0, v0.c3)))>=(v0.c1))  NULLS LAST, ((v0.c0)|(v0.c3)) COLLATE NOCASE DESC;
SELECT * FROM v0, vt2, vt0 WHERE (vt2.c0) ORDER BY (((vt0.c0, v0.c2, vt2.c0, v0.c1)) NOT BETWEEN ((((((vt2.c1)AND(v0.c2)))AND(v0.c3)), ((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1)), ((NULL) NOT BETWEEN (v0.c2) AND (v0.c1)), CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN vt0.c0 END)) AND ((HEX(DISTINCT v0.c0), (v0.c0 IN (vt2.c1)), vt2.c0, (vt2.c0 IN (v0.c0))))) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (vt2.c0) ORDER BY (((v0.c1 IN (vt2.c0, v0.c3)))>=(v0.c1))  NULLS LAST, ((v0.c0)|(v0.c3)) COLLATE NOCASE DESC;
SELECT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (((((v0.c0)AND(((((((((((vt2.c1)AND(NULL)))AND(vt0.c0)))OR(vt2.c1)))OR(vt0.c0)))OR(v0.c1)))))AND(CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END)));
SELECT ALL MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (((((v0.c0)AND(((((((((((vt2.c1)AND(NULL)))AND(vt0.c0)))OR(vt2.c1)))OR(vt0.c0)))OR(v0.c1)))))AND(CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END))) ORDER BY CASE ((v0.c2)GLOB('1082419433'))  WHEN (vt2.c0 IN (v0.c2)) THEN ((v0.c3)GLOB(vt0.c0)) WHEN v0.c2 THEN ((vt0.c0) BETWEEN (v0.c2) AND (vt2.c1)) WHEN ((vt2.c1)LIKE(v0.c1)) THEN (~ (v0.c2)) END DESC  NULLS FIRST, ((0Xffffffffe9aec35c) NOT NULL)  NULLS FIRST;
SELECT MIN(v0.c1) FROM v0 WHERE (((CASE WHEN -787434352 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 END) ISNULL));
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((CASE WHEN -787434352 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 END) ISNULL)) INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (HEX((v0.c3 IN (v0.c2))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (0.006255288928960434) ORDER BY (- (vt0.c0 COLLATE RTRIM))  NULLS FIRST, ((x'') NOT BETWEEN (vt0.c0 COLLATE NOCASE) AND (((vt0.c0)AND(vt0.c0)))) ASC  NULLS FIRST, (((vt0.c0) IS TRUE) IN ((((vt0.c0, vt0.c0))!=((vt0.c0, vt0.c0))), (+ (vt0.c0)))) DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((0.006255288928960434)AND((- ((vt0.c0 IN (vt0.c0))))))) ORDER BY CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE NOCASE, ((((((vt0.c0)AND('~te8s')))AND(0.14173200971547983))) ISNULL)  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (PRINTF(vt0.c0)) ORDER BY CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE NOCASE, ((((((vt0.c0)AND('~te8s')))AND(0.14173200971547983))) ISNULL)  NULLS FIRST;
SELECT MIN(vt0.c0) FROM v0, vt0 WHERE (((0.903345120171396)>(((v0.c2)>>(vt0.c0)))));
SELECT DISTINCT MIN(vt0.c0) FROM v0, vt0 WHERE (((((0.903345120171396)>(((v0.c2)>>(vt0.c0)))))AND(((CAST(v0.c3 AS NUMERIC))LIKE(v0.c2 COLLATE NOCASE))))) LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM v0, vt0 WHERE ((+ (NULL))) LIMIT 0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (COALESCE(vt2.c0 COLLATE BINARY, (((vt0.c0)) BETWEEN ((0.5736162891281746)) AND ((v0.c0))), CASE vt0.c0  WHEN 0.39035302520018733 THEN v0.c2 WHEN vt2.c1 THEN -1 WHEN '	' THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 ELSE vt0.c0 END, ((vt2.c1) BETWEEN (v0.c1) AND (v0.c2))));
SELECT ALL * FROM vt0, v0, vt2 WHERE (((COALESCE(vt2.c0 COLLATE BINARY, (((vt0.c0)) BETWEEN ((0.5736162891281746)) AND ((v0.c0))), CASE vt0.c0  WHEN 0.39035302520018733 THEN v0.c2 WHEN vt2.c1 THEN -1 WHEN '	' THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 ELSE vt0.c0 END, ((vt2.c1) BETWEEN (v0.c1) AND (v0.c2))))AND(((CAST(v0.c3 AS TEXT)) NOT BETWEEN (CAST(x'56' AS BLOB)) AND (((vt2.c1)GLOB(vt0.c0))))))) INTERSECT SELECT * FROM vt0, v0, vt2 WHERE (v0.c1);
SELECT ALL * FROM vt0, v0, vt2 WHERE (COALESCE(vt2.c0 COLLATE BINARY, (((vt0.c0)) BETWEEN ((0.5736162891281746)) AND ((v0.c0))), CASE vt0.c0  WHEN 0.39035302520018733 THEN v0.c2 WHEN vt2.c1 THEN -1 WHEN '	' THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 ELSE vt0.c0 END, ((vt2.c1) BETWEEN (v0.c1) AND (v0.c2))));
SELECT ALL * FROM vt0, v0, vt2 WHERE (((COALESCE(vt2.c0 COLLATE BINARY, (((vt0.c0)) BETWEEN ((0.5736162891281746)) AND ((v0.c0))), CASE vt0.c0  WHEN 0.39035302520018733 THEN v0.c2 WHEN vt2.c1 THEN -1 WHEN '	' THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 ELSE vt0.c0 END, ((vt2.c1) BETWEEN (v0.c1) AND (v0.c2))))AND(((CAST(v0.c3 AS TEXT)) NOT BETWEEN (CAST(x'56' AS BLOB)) AND (((vt2.c1)GLOB(vt0.c0))))))) INTERSECT SELECT * FROM vt0, v0, vt2 WHERE (v0.c1);
SELECT ALL COUNT(*) FROM vt0, v0, vt2 WHERE (LIKELIHOOD(DISTINCT (vt2.c1 IN ()), ((v0.c3) NOT BETWEEN ('7Q') AND ('98982355')))) ORDER BY ((((v0.c2)<=(v0.c2))) BETWEEN ((~ (v0.c2))) AND (v0.c0 COLLATE NOCASE)) DESC  NULLS LAST, ((0.8416831749925815) IS TRUE), ((((((v0.c1)AND(((((vt0.c0)AND(v0.c1)))AND(v0.c3)))))OR(CASE WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN 0.20340515105157597 WHEN v0.c3 THEN v0.c1 ELSE v0.c0 END)))AND(((vt0.c0)>(v0.c3))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (LIKELIHOOD(DISTINCT (vt2.c1 IN ()), ((v0.c3) NOT BETWEEN ('7Q') AND ('98982355')))) ORDER BY ((((v0.c2)<=(v0.c2))) BETWEEN ((~ (v0.c2))) AND (v0.c0 COLLATE NOCASE)) DESC  NULLS LAST, ((0.8416831749925815) IS TRUE), ((((((v0.c1)AND(((((vt0.c0)AND(v0.c1)))AND(v0.c3)))))OR(CASE WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN 0.20340515105157597 WHEN v0.c3 THEN v0.c1 ELSE v0.c0 END)))AND(((vt0.c0)>(v0.c3))))  NULLS FIRST LIMIT 0X2;
SELECT ALL MAX(vt2.c1) FROM vt2, v0 WHERE (CAST('*p\N' AS BLOB));
SELECT DISTINCT MAX(vt2.c1) FROM vt2, v0 WHERE (((CAST('*p\N' AS BLOB))AND(x''))) ORDER BY CAST(v0.c1 COLLATE BINARY AS INTEGER)  NULLS LAST, ((CAST(v0.c2 AS NUMERIC)) NOTNULL)  NULLS LAST, CASE vt2.c1  WHEN vt2.c0 THEN v0.c0 ELSE 'y!╺H%nVS&' END COLLATE BINARY  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2, v0 WHERE (((((v0.c0)OR(vt2.c0)))OR(v0.c2)) COLLATE BINARY) ORDER BY CAST(v0.c1 COLLATE BINARY AS INTEGER)  NULLS LAST, ((CAST(v0.c2 AS NUMERIC)) NOTNULL)  NULLS LAST, CASE vt2.c1  WHEN vt2.c0 THEN v0.c0 ELSE 'y!╺H%nVS&' END COLLATE BINARY  NULLS FIRST LIMIT 0X2;
SELECT COUNT(*) FROM v0 WHERE (((NULL COLLATE RTRIM)>(((v0.c0)<(v0.c3))))) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)))||(((v0.c1)-(v0.c2)))) ASC, x'd891'  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((NULL COLLATE RTRIM)>(((v0.c0)<(v0.c3)))))AND(json_insert((~ (v0.c1)), ((v0.c2)&(v0.c1)), ((v0.c3)LIKE(v0.c1)), ((v0.c3)>=(0.917303603074189)), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)))))) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)))||(((v0.c1)-(v0.c2)))) ASC, x'd891'  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((v0.c3) NOT NULL)) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)))||(((v0.c1)-(v0.c2)))) ASC, x'd891'  NULLS FIRST LIMIT 1;
SELECT * FROM vt0, vt2 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))<(json(vt2.c1))));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))<(json(vt2.c1)))) ORDER BY (((((vt2.c1, vt2.c0))<>((0.3064104188357246, vt2.c0))))/((- (NULL))))  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (COALESCE(DISTINCT (vt2.c1 IN (vt2.c0)), ((vt2.c0) IS FALSE))) ORDER BY (((((vt2.c1, vt2.c0))!=((0.3064104188357246, vt2.c0))))/((- (NULL))))  NULLS FIRST LIMIT 0X2;
SELECT * FROM vt0, vt2 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))<(json(vt2.c1))));
SELECT ALL * FROM vt2 WHERE ((((+ (vt2.c0)))+(vt2.c1)));
SELECT * FROM vt2 WHERE ((((((+ (vt2.c0)))+(vt2.c1)))AND((((('1623494229') IS FALSE)) NOT NULL)))) LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE ((((+ (vt2.c0)))+(vt2.c1)));
SELECT * FROM vt2 WHERE ((((((+ (vt2.c0)))+(vt2.c1)))AND((((('1623494229') IS FALSE)) NOT NULL)))) LIMIT 0X0;
SELECT ALL MAX(v0.c3) FROM vt2, vt0, v0 WHERE ((((v0.c2 IN (v0.c1))) IS FALSE));
SELECT DISTINCT MAX(v0.c3) FROM vt2, vt0, v0 WHERE ((((((v0.c2 IN (v0.c1))) IS FALSE))AND(CAST(((0.2423904930873102) NOT BETWEEN (v0.c0) AND (vt0.c0)) AS REAL)))) INTERSECT SELECT DISTINCT MAX(v0.c3) FROM vt2, vt0, v0 WHERE (0.08634741939000601);
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((((((((((((((v0.c2) BETWEEN (v0.c1) AND ('/ad+')))AND(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)))))AND(UNLIKELY(DISTINCT v0.c3))))OR(v0.c3 COLLATE NOCASE)))OR(CAST(v0.c2 AS BLOB))))AND(CASE v0.c2  WHEN v0.c3 THEN v0.c2 ELSE v0.c3 END)))AND(CAST(v0.c1 AS NUMERIC))));
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (((((((((((((((v0.c2) BETWEEN (v0.c1) AND ('/ad+')))AND(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)))))AND(UNLIKELY(DISTINCT v0.c3))))OR(v0.c3 COLLATE NOCASE)))OR(CAST(v0.c2 AS BLOB))))AND(CASE v0.c2  WHEN v0.c3 THEN v0.c2 ELSE v0.c3 END)))AND(CAST(v0.c1 AS NUMERIC)))) ORDER BY ((CASE v0.c1  WHEN v0.c0 THEN vt0.c0 ELSE v0.c0 END)*((v0.c2 IN (v0.c1)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE ('-2126153139') ORDER BY ((CASE v0.c1  WHEN v0.c0 THEN vt0.c0 ELSE v0.c0 END)*((v0.c2 IN (v0.c1))));
SELECT MIN(vt0.c0) FROM v0, vt0 WHERE (v0.c2) ORDER BY (+ ('1532236189')) DESC  NULLS FIRST, 267721342;
SELECT DISTINCT MIN(vt0.c0) FROM v0, vt0 WHERE (v0.c2) ORDER BY CAST((+ (v0.c0)) AS REAL) ASC  NULLS LAST, ((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (CASE WHEN '-269060130' THEN v0.c2 WHEN v0.c0 THEN v0.c1 END) AND (0.3874028415761879)) LIMIT 0X0;
SELECT MAX(v0.c0) FROM v0, vt0 WHERE (CASE LENGTH(v0.c3)  WHEN TRIM(DISTINCT v0.c2) THEN ((0.7822337193029021) BETWEEN (v0.c0) AND (vt0.c0)) WHEN ((0.3236419518120929) NOT BETWEEN (v0.c2) AND (v0.c2)) THEN (((v0.c3)) NOT BETWEEN ((0.16413276459559167)) AND ((v0.c3))) WHEN ((((((((0xffffffffce4a4571)OR(vt0.c0)))AND(vt0.c0)))AND(v0.c0)))AND(vt0.c0)) THEN ((v0.c0) BETWEEN (v0.c2) AND ('_ d')) WHEN v0.c2 THEN (((v0.c1))<>((x'8c'))) ELSE v0.c2 COLLATE BINARY END) ORDER BY CASE ((v0.c3)*(v0.c0))  WHEN (NOT (v0.c1)) THEN ((((v0.c2)OR(vt0.c0)))OR(v0.c2)) END ASC, (((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)) IN (((v0.c0)<<(v0.c0)), x'07'))  NULLS LAST;
SELECT ALL MAX(v0.c0) FROM v0, vt0 WHERE (((CASE LENGTH(v0.c3)  WHEN TRIM(DISTINCT v0.c2) THEN ((0.7822337193029021) BETWEEN (v0.c0) AND (vt0.c0)) WHEN ((0.3236419518120929) NOT BETWEEN (v0.c2) AND (v0.c2)) THEN (((v0.c3)) NOT BETWEEN ((0.16413276459559167)) AND ((v0.c3))) WHEN ((((((((-833993359)OR(vt0.c0)))AND(vt0.c0)))AND(v0.c0)))AND(vt0.c0)) THEN ((v0.c0) BETWEEN (v0.c2) AND ('_ d')) WHEN v0.c2 THEN (((v0.c1))>((x'8c'))) ELSE v0.c2 COLLATE BINARY END)AND(json_patch(((x'76d5fc7d')<>(v0.c1)), ((vt0.c0)<=('98982355')))))) ORDER BY ((((NULL, v0.c3))==((v0.c1, v0.c2))) IN ())  NULLS LAST;
SELECT MIN(v0.c0) FROM v0 WHERE (CAST(x'd19e' AS INTEGER)) ORDER BY ((x'') NOTNULL) ASC  NULLS FIRST;
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (CAST(x'd19e' AS INTEGER)) ORDER BY (((- (v0.c0)))LIKE(((x'')OR(v0.c0))))  NULLS LAST INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (CASE (- (v0.c3))  WHEN CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END THEN ((v0.c2)||(v0.c3)) WHEN 1.284633581E9 THEN LOWER(DISTINCT v0.c1) WHEN ((((((((v0.c1)OR(v0.c1)))OR(v0.c2)))OR(v0.c1)))OR(v0.c3)) THEN -9.37369626E8 ELSE 0.6558345880887838 END) ORDER BY (((- (v0.c0)))LIKE(((x'')OR(v0.c0))))  NULLS LAST;
SELECT ALL * FROM vt2, v0 WHERE ('J');
SELECT DISTINCT * FROM vt2, v0 WHERE ((('J')AND((((v0.c0 IN ()))/(CAST(v0.c0 AS NUMERIC)))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((((((((((v0.c1)AND(v0.c2)))AND('')))AND(0x672a6722)))AND(vt2.c1))) IS TRUE)) LIMIT 0X1;
SELECT ALL * FROM vt2, v0 WHERE ('J');
SELECT DISTINCT * FROM vt2, v0 WHERE ((('J')AND((((v0.c0 IN ()))/(CAST(v0.c0 AS NUMERIC)))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((((((((((v0.c1)AND(v0.c2)))AND('')))AND(0x672a6722)))AND(vt2.c1))) IS TRUE)) LIMIT 0X1;
SELECT * FROM v0, vt2, vt0 WHERE (((((v0.c1) NOT BETWEEN (v0.c1) AND ('0.7100278653416723'))) NOT BETWEEN (LIKE(vt0.c0, v0.c2)) AND ((~ ('-243193612'))))) ORDER BY ((((CASE vt2.c0  WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN vt0.c0 ELSE 0.16217142275629903 END)AND(v0.c3 COLLATE BINARY)))OR(((((((v0.c2)OR(x'')))OR(vt2.c1)))OR(v0.c1))));
SELECT * FROM v0, vt2, vt0 WHERE (((((((v0.c1) NOT BETWEEN (v0.c1) AND ('0.7100278653416723'))) NOT BETWEEN (LIKE(vt0.c0, v0.c2)) AND ((~ ('-243193612')))))AND((NOT ((vt2.c1 IN ())))))) ORDER BY ((((CASE vt2.c0  WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN vt0.c0 ELSE 0.16217142275629903 END)AND(v0.c3 COLLATE BINARY)))OR(((((((v0.c2)OR(x'')))OR(vt2.c1)))OR(v0.c1))));
SELECT * FROM v0, vt2, vt0 WHERE (((((v0.c1) NOT BETWEEN (v0.c1) AND ('0.7100278653416723'))) NOT BETWEEN (LIKE(vt0.c0, v0.c2)) AND ((~ ('-243193612'))))) ORDER BY ((((CASE vt2.c0  WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN vt0.c0 ELSE 0.16217142275629903 END)AND(v0.c3 COLLATE BINARY)))OR(((((((v0.c2)OR(x'')))OR(vt2.c1)))OR(v0.c1))));
SELECT * FROM v0, vt2, vt0 WHERE (((((((v0.c1) NOT BETWEEN (v0.c1) AND ('0.7100278653416723'))) NOT BETWEEN (LIKE(vt0.c0, v0.c2)) AND ((~ ('-243193612')))))AND((NOT ((vt2.c1 IN ())))))) ORDER BY ((((CASE vt2.c0  WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN vt0.c0 ELSE 0.16217142275629903 END)AND(v0.c3 COLLATE BINARY)))OR(((((((v0.c2)OR(x'')))OR(vt2.c1)))OR(v0.c1))));
SELECT ALL * FROM v0 WHERE (CASE CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END  WHEN (+ (v0.c2)) THEN (~ (v0.c0)) END) ORDER BY (((((v0.c1)OR(NULL)))OR(v0.c2)) IN ())  NULLS LAST, (((v0.c1 IN (v0.c2)))&(((v0.c0)>=(0.4284493645082942)))) ASC  NULLS FIRST, ((('319827270'))<>((((((((v0.c0)OR(v0.c3)))OR(v0.c0)))AND(v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (CASE CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END  WHEN (+ (v0.c2)) THEN (~ (v0.c0)) END) ORDER BY (((((v0.c1)OR(NULL)))OR(v0.c2)) IN ())  NULLS LAST, (((v0.c1 IN (v0.c2)))&(((v0.c0)>=(0.4284493645082942)))) ASC  NULLS FIRST, ((('319827270'))<>((((((((v0.c0)OR(v0.c3)))OR(v0.c0)))AND(v0.c0))))) LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (CASE CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END  WHEN (+ (v0.c2)) THEN (~ (v0.c0)) END) ORDER BY (((((v0.c1)OR(NULL)))OR(v0.c2)) IN ())  NULLS LAST, (((v0.c1 IN (v0.c2)))&(((v0.c0)>=(0.4284493645082942)))) ASC  NULLS FIRST, ((('319827270'))<>((((((((v0.c0)OR(v0.c3)))OR(v0.c0)))AND(v0.c0)))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((CAST(vt0.c0 AS INTEGER), ((x'e747')%(vt0.c0)), 'Q5XbZC')) AND ((((vt0.c0) IS FALSE), CASE WHEN vt0.c0 THEN vt0.c0 WHEN 765630797 THEN vt0.c0 WHEN 263518959 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, vt0.c0)))) ORDER BY x'86ae40f9' DESC  NULLS FIRST, CASE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0)+(vt0.c0)) THEN vt0.c0 ELSE HEX(vt0.c0) END DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((CAST(vt0.c0 AS INTEGER), ((x'e747')%(vt0.c0)), 'Q5XbZC')) AND ((((vt0.c0) IS FALSE), CASE WHEN vt0.c0 THEN vt0.c0 WHEN 765630797 THEN vt0.c0 WHEN 263518959 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, vt0.c0)))) ORDER BY x'86ae40f9' DESC  NULLS FIRST, CASE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0)+(vt0.c0)) THEN vt0.c0 ELSE HEX(vt0.c0) END DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0) BETWEEN ('-1881082979') AND (vt0.c0)) COLLATE BINARY) ORDER BY x'86ae40f9' DESC  NULLS FIRST, CASE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0)+(vt0.c0)) THEN vt0.c0 ELSE HEX(vt0.c0) END DESC;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((CAST(vt0.c0 AS INTEGER), ((x'e747')%(vt0.c0)), 'Q5XbZC')) AND ((((vt0.c0) IS FALSE), CASE WHEN vt0.c0 THEN vt0.c0 WHEN 765630797 THEN vt0.c0 WHEN 263518959 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, vt0.c0)))) ORDER BY x'86ae40f9' DESC  NULLS FIRST, CASE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0)+(vt0.c0)) THEN vt0.c0 ELSE HEX(vt0.c0) END DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((CAST(vt0.c0 AS INTEGER), ((x'e747')%(vt0.c0)), 'Q5XbZC')) AND ((((vt0.c0) IS FALSE), CASE WHEN vt0.c0 THEN vt0.c0 WHEN 765630797 THEN vt0.c0 WHEN 263518959 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, vt0.c0)))) ORDER BY x'86ae40f9' DESC  NULLS FIRST, CASE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0)+(vt0.c0)) THEN vt0.c0 ELSE HEX(vt0.c0) END DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0) BETWEEN ('-1881082979') AND (vt0.c0)) COLLATE BINARY) ORDER BY x'86ae40f9' DESC  NULLS FIRST, CASE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0)+(vt0.c0)) THEN vt0.c0 ELSE HEX(vt0.c0) END DESC;
SELECT * FROM v0 WHERE (((CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c3 END) BETWEEN (((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))AND(v0.c3)))AND(v0.c2))) AND (v0.c0 COLLATE RTRIM))) ORDER BY CASE HEX(v0.c0)  WHEN 0.2543539310178464 THEN ((0.1916235261072794)IS(v0.c2)) WHEN ((v0.c2)OR(v0.c0)) THEN CASE WHEN 0.3228275206868537 THEN v0.c3 ELSE 0X52051a9b END END;
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c3 END) BETWEEN (((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))AND(v0.c3)))AND(v0.c2))) AND (v0.c0 COLLATE RTRIM))) ORDER BY (((((((v0.c2 IN (v0.c0)))OR(((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c3)))))OR(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c3)))))OR(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))) DESC;
SELECT * FROM v0 WHERE (((CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c3 END) BETWEEN (((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))AND(v0.c3)))AND(v0.c2))) AND (v0.c0 COLLATE RTRIM))) ORDER BY CASE HEX(v0.c0)  WHEN 0.2543539310178464 THEN ((0.1916235261072794)IS(v0.c2)) WHEN ((v0.c2)OR(v0.c0)) THEN CASE WHEN 0.3228275206868537 THEN v0.c3 ELSE 0X52051a9b END END;
SELECT ALL * FROM v0 WHERE (((CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c3 END) BETWEEN (((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))AND(v0.c3)))AND(v0.c2))) AND (v0.c0 COLLATE RTRIM))) ORDER BY (((((((v0.c2 IN (v0.c0)))OR(((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c3)))))OR(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c3)))))OR(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))) DESC;
SELECT * FROM vt0 WHERE (0.7067697460387163);
SELECT ALL * FROM vt0 WHERE (((0.7067697460387163)AND(CAST(((((((vt0.c0)OR(vt0.c0)))OR('nsR')))OR(vt0.c0)) AS INTEGER)))) ORDER BY ((0.9992833775801361) BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND (((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((((vt0.c0) BETWEEN (vt0.c0) AND ('-1459080318')))) AND ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))) ORDER BY ((0.9992833775801361) BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND (((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE (0.7067697460387163);
SELECT ALL * FROM vt0 WHERE (((0.7067697460387163)AND(CAST(((((((vt0.c0)OR(vt0.c0)))OR('nsR')))OR(vt0.c0)) AS INTEGER)))) ORDER BY ((0.9992833775801361) BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND (((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((((vt0.c0) BETWEEN (vt0.c0) AND ('-1459080318')))) AND ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))) ORDER BY ((0.9992833775801361) BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND (((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM vt2 WHERE (CASE WHEN CAST(vt2.c1 AS TEXT) THEN ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)) END) ORDER BY 0.5683105716680067  NULLS LAST, vt2.c1  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE (((CASE WHEN CAST(vt2.c1 AS TEXT) THEN ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)) END)AND(((((((vt2.c0)OR(vt2.c1)))OR(vt2.c0))) IS TRUE)))) ORDER BY 0.5683105716680067  NULLS LAST, vt2.c1  NULLS FIRST LIMIT 1 INTERSECT SELECT * FROM vt2 WHERE (((((((((2.103859168E9)&('-431243509')))AND(CAST(vt2.c0 AS NUMERIC))))OR(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)))))OR(CAST(vt2.c0 AS INTEGER)))) ORDER BY 0.5683105716680067  NULLS LAST, vt2.c1  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt2 WHERE (CASE WHEN CAST(vt2.c1 AS TEXT) THEN ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)) END) ORDER BY 0.5683105716680067  NULLS LAST, vt2.c1  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE (((CASE WHEN CAST(vt2.c1 AS TEXT) THEN ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)) END)AND(((((((vt2.c0)OR(vt2.c1)))OR(vt2.c0))) IS TRUE)))) ORDER BY 0.5683105716680067  NULLS LAST, vt2.c1  NULLS FIRST LIMIT 1 INTERSECT SELECT * FROM vt2 WHERE (((((((((2.103859168E9)&('-431243509')))AND(CAST(vt2.c0 AS NUMERIC))))OR(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)))))OR(CAST(vt2.c0 AS INTEGER)))) ORDER BY 0.5683105716680067  NULLS LAST, vt2.c1  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt2 WHERE (((NULL)GLOB((x'a28858' IN (vt2.c1)))));
SELECT * FROM vt2 WHERE (((((NULL)GLOB((x'a28858' IN (vt2.c1)))))AND((((vt2.c1)) BETWEEN ((vt2.c1)) AND ((vt2.c0))) COLLATE BINARY))) LIMIT 0;
SELECT * FROM vt2 WHERE (((NULL)GLOB((x'a28858' IN (vt2.c1)))));
SELECT * FROM vt2 WHERE (((((NULL)GLOB((x'a28858' IN (vt2.c1)))))AND((((vt2.c1)) BETWEEN ((vt2.c1)) AND ((vt2.c0))) COLLATE BINARY))) LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c1)>(v0.c1)))%(((v0.c3) IS TRUE)))) ORDER BY (((((v0.c1, v0.c3))<=((v0.c0, v0.c3))))GLOB((v0.c2 IN ()))) DESC  NULLS FIRST;
SELECT * FROM v0, vt0 WHERE (((((v0.c1)>(v0.c1)))%(((v0.c3) IS TRUE)))) ORDER BY (((((v0.c1, v0.c3))<=((v0.c0, v0.c3))))GLOB((v0.c2 IN ()))) DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c1)>(v0.c1)))%(((v0.c3) IS TRUE)))) ORDER BY (((((v0.c1, v0.c3))<=((v0.c0, v0.c3))))GLOB((v0.c2 IN ()))) DESC  NULLS FIRST;
SELECT * FROM v0, vt0 WHERE (((((v0.c1)>(v0.c1)))%(((v0.c3) IS TRUE)))) ORDER BY (((((v0.c1, v0.c3))<=((v0.c0, v0.c3))))GLOB((v0.c2 IN ()))) DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY CAST(IFNULL(vt0.c0, vt0.c0) AS TEXT) ASC  NULLS FIRST, vt0.c0 DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(CASE CAST(vt0.c0 AS REAL)  WHEN ((x'd7')OR(0.9205797637410246)) THEN CAST(vt0.c0 AS TEXT) ELSE vt0.c0 COLLATE RTRIM END))) ORDER BY CAST(IFNULL(vt0.c0, vt0.c0) AS TEXT) ASC  NULLS FIRST, vt0.c0 DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, 'k')) BETWEEN ((((vt0.c0)>=(vt0.c0)), vt0.c0 COLLATE RTRIM, (- (vt0.c0)), vt0.c0, CAST(vt0.c0 AS INTEGER))) AND ((CAST(x'3bcd8b' AS INTEGER), 0Xffffffffb6e241bf COLLATE NOCASE, (vt0.c0 IN (vt0.c0)), vt0.c0, vt0.c0 COLLATE RTRIM)))) ORDER BY CAST(IFNULL(vt0.c0, vt0.c0) AS TEXT) ASC  NULLS FIRST, vt0.c0 DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY CAST(IFNULL(vt0.c0, vt0.c0) AS TEXT) ASC  NULLS FIRST, vt0.c0 DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(CASE CAST(vt0.c0 AS REAL)  WHEN ((x'd7')OR(0.9205797637410246)) THEN CAST(vt0.c0 AS TEXT) ELSE vt0.c0 COLLATE RTRIM END))) ORDER BY CAST(IFNULL(vt0.c0, vt0.c0) AS TEXT) ASC  NULLS FIRST, vt0.c0 DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, 'k')) BETWEEN ((((vt0.c0)>=(vt0.c0)), vt0.c0 COLLATE RTRIM, (- (vt0.c0)), vt0.c0, CAST(vt0.c0 AS INTEGER))) AND ((CAST(x'3bcd8b' AS INTEGER), 0Xffffffffb6e241bf COLLATE NOCASE, (vt0.c0 IN (vt0.c0)), vt0.c0, vt0.c0 COLLATE RTRIM)))) ORDER BY CAST(IFNULL(vt0.c0, vt0.c0) AS TEXT) ASC  NULLS FIRST, vt0.c0 DESC  NULLS LAST;
SELECT ALL MAX(v0.c2) FROM vt0, v0, vt2 WHERE ((NOT (CASE WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END))) ORDER BY '267721342' ASC, (((NOT (v0.c0))) BETWEEN ((v0.c1 IN ())) AND (CASE v0.c3  WHEN x'42c6a9' THEN v0.c0 WHEN '4]\t' THEN vt0.c0 ELSE v0.c1 END));
SELECT DISTINCT MAX(v0.c2) FROM vt0, v0, vt2 WHERE ((((NOT (CASE WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END)))AND(CAST((~ (vt2.c0)) AS INTEGER)))) ORDER BY (x'' IN (vt2.c1)) DESC, ((((v0.c1) IS TRUE))<<(((v0.c2) ISNULL)))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE (CASE ((NULL) NOT BETWEEN (v0.c2) AND (v0.c1))  WHEN ((vt0.c0)GLOB(v0.c2)) THEN ((v0.c3) IS TRUE) END) ORDER BY (((('-1478372600') NOT BETWEEN (v0.c1) AND (v0.c0))) IS FALSE) DESC, v0.c1 ASC;
SELECT * FROM v0, vt0 WHERE (CASE ((NULL) NOT BETWEEN (v0.c2) AND (v0.c1))  WHEN ((vt0.c0)GLOB(v0.c2)) THEN ((v0.c3) IS TRUE) END) ORDER BY CASE WHEN CAST(v0.c3 AS NUMERIC) THEN 0.23589764147070302 COLLATE NOCASE WHEN CAST(v0.c1 AS TEXT) THEN COALESCE(DISTINCT vt0.c0, v0.c2, vt0.c0, '(#m1)', v0.c0) WHEN ((v0.c0) NOTNULL) THEN LIKE(-375081506, v0.c2, '&') WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN vt0.c0 WHEN CAST(v0.c2 AS TEXT) THEN json_remove(vt0.c0, v0.c0) ELSE ((v0.c1) IS TRUE) END  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE (CASE ((NULL) NOT BETWEEN (v0.c2) AND (v0.c1))  WHEN ((vt0.c0)GLOB(v0.c2)) THEN ((v0.c3) IS TRUE) END) ORDER BY (((('-1478372600') NOT BETWEEN (v0.c1) AND (v0.c0))) IS FALSE) DESC, v0.c1 ASC;
SELECT * FROM v0, vt0 WHERE (CASE ((NULL) NOT BETWEEN (v0.c2) AND (v0.c1))  WHEN ((vt0.c0)GLOB(v0.c2)) THEN ((v0.c3) IS TRUE) END) ORDER BY CASE WHEN CAST(v0.c3 AS NUMERIC) THEN 0.23589764147070302 COLLATE NOCASE WHEN CAST(v0.c1 AS TEXT) THEN COALESCE(DISTINCT vt0.c0, v0.c2, vt0.c0, '(#m1)', v0.c0) WHEN ((v0.c0) NOTNULL) THEN LIKE(-375081506, v0.c2, '&') WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN vt0.c0 WHEN CAST(v0.c2 AS TEXT) THEN json_remove(vt0.c0, v0.c0) ELSE ((v0.c1) IS TRUE) END  NULLS LAST;
SELECT MAX(vt2.c0) FROM v0, vt2 WHERE ((('-388835817') NOT BETWEEN ((~ (v0.c2))) AND (vt2.c0 COLLATE NOCASE)));
SELECT ALL MAX(vt2.c0) FROM v0, vt2 WHERE ((((('-388835817') NOT BETWEEN ((~ (v0.c2))) AND (vt2.c0 COLLATE NOCASE)))AND(('89743559' IN ())))) LIMIT 2 INTERSECT SELECT ALL MAX(vt2.c0) FROM v0, vt2 WHERE (json_quote((((v0.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c1))))) LIMIT 0x2;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((vt0.c0 COLLATE RTRIM, IFNULL(DISTINCT v0.c0, v0.c2)))<((COALESCE(vt0.c0, NULL), CASE WHEN NULL THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 WHEN v0.c0 THEN v0.c1 WHEN vt0.c0 THEN '7c' ELSE v0.c0 END))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((vt0.c0 COLLATE RTRIM, IFNULL(DISTINCT v0.c0, v0.c2)))<((COALESCE(vt0.c0, NULL), CASE WHEN NULL THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 WHEN v0.c0 THEN v0.c1 WHEN vt0.c0 THEN '7c' ELSE v0.c0 END))))AND(((((vt0.c0)-(v0.c0))) BETWEEN ((vt0.c0 IN ())) AND (((vt2.c1) NOT BETWEEN (vt0.c0) AND (v0.c1))))))) INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((~ (((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0)))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((vt0.c0 COLLATE RTRIM, IFNULL(DISTINCT v0.c0, v0.c2)))<((COALESCE(vt0.c0, NULL), CASE WHEN NULL THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 WHEN v0.c0 THEN v0.c1 WHEN vt0.c0 THEN '7c' ELSE v0.c0 END))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((vt0.c0 COLLATE RTRIM, IFNULL(DISTINCT v0.c0, v0.c2)))<((COALESCE(vt0.c0, NULL), CASE WHEN NULL THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 WHEN v0.c0 THEN v0.c1 WHEN vt0.c0 THEN '7c' ELSE v0.c0 END))))AND(((((vt0.c0)-(v0.c0))) BETWEEN ((vt0.c0 IN ())) AND (((vt2.c1) NOT BETWEEN (vt0.c0) AND (v0.c1))))))) INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((~ (((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0)))));
SELECT * FROM vt0, vt2 WHERE (vt2.c1) ORDER BY ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))) NOT BETWEEN (CASE vt0.c0  WHEN vt2.c1 THEN NULL END) AND (((vt0.c0) IS TRUE))), (((NOT ('98818379'))) NOT NULL) DESC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE (((vt2.c1)AND(((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))) ISNULL)))) ORDER BY (((vt2.c1) BETWEEN (vt0.c0) AND (x'b1')) IN (('|G' IN (vt2.c0)), vt2.c0))  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE (vt2.c1) ORDER BY ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))) NOT BETWEEN (CASE vt0.c0  WHEN vt2.c1 THEN NULL END) AND (((vt0.c0) IS TRUE))), (((NOT ('98818379'))) NOT NULL) DESC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE (((vt2.c1)AND(((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))) ISNULL)))) ORDER BY (((vt2.c1) BETWEEN (vt0.c0) AND (x'b1')) IN (('|G' IN (vt2.c0)), vt2.c0))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0, v0, vt2 WHERE ((+ (((vt0.c0) IS FALSE)))) ORDER BY ((((vt2.c1) ISNULL))IS NOT((((v0.c0))<((vt0.c0))))) ASC  NULLS FIRST, DATE('M({', (((v0.c1, v0.c3))>((v0.c2, vt2.c0))), '-1218939144', (vt2.c1 IN (v0.c1))) DESC  NULLS LAST, (((NULL) NOT BETWEEN (v0.c2) AND (0xffffffffe54d8a0c)) IN ())  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0, v0, vt2 WHERE ((+ (((vt0.c0) IS FALSE)))) ORDER BY ((((vt2.c1) ISNULL))IS NOT((((v0.c0))<((vt0.c0))))) ASC  NULLS FIRST, DATE('M({', (((v0.c1, v0.c3))>((v0.c2, vt2.c0))), '-1218939144', (vt2.c1 IN (v0.c1))) DESC  NULLS LAST, (((NULL) NOT BETWEEN (v0.c2) AND (-447903220)) IN ())  NULLS FIRST LIMIT 2;
SELECT COUNT(*) FROM v0 WHERE (x'4e638a');
SELECT DISTINCT COUNT(*) FROM v0 WHERE (x'4e638a') LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (GLOB(((v0.c0) BETWEEN (v0.c2) AND (v0.c0)), ((NULL)|(v0.c0)))) LIMIT 0;
SELECT COUNT(*) FROM vt0 WHERE (LENGTH(vt0.c0));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((LENGTH(vt0.c0))AND((- ((NOT (vt0.c0)))))));
SELECT ALL * FROM vt2 WHERE (((vt2.c1 IN (vt2.c0)) IN ()));
SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c1 IN (vt2.c0)) IN ()))AND(((json_valid(vt2.c1)) BETWEEN ((((0X2c314c87, vt2.c1, vt2.c0))<=((vt2.c0, vt2.c1, vt2.c1)))) AND (CAST(vt2.c0 AS BLOB)))))) ORDER BY 0.38101694423007404 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((0Xffffffffb310d58f IN ()) IN ((((x'', vt2.c1, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c0, vt2.c1, vt2.c0, vt2.c1)) AND (('{yU㏮1[E', vt2.c1, 0Xffffffffba88e273, vt2.c0)))))) ORDER BY 0.38101694423007404;
SELECT ALL * FROM vt2 WHERE (((vt2.c1 IN (vt2.c0)) IN ()));
SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c1 IN (vt2.c0)) IN ()))AND(((json_valid(vt2.c1)) BETWEEN ((((0X2c314c87, vt2.c1, vt2.c0))<=((vt2.c0, vt2.c1, vt2.c1)))) AND (CAST(vt2.c0 AS BLOB)))))) ORDER BY 0.38101694423007404 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((0Xffffffffb310d58f IN ()) IN ((((x'', vt2.c1, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c0, vt2.c1, vt2.c0, vt2.c1)) AND (('{yU㏮1[E', vt2.c1, 0Xffffffffba88e273, vt2.c0)))))) ORDER BY 0.38101694423007404;
SELECT * FROM v0, vt0 WHERE ((((+ (v0.c0)))-(CAST(0.8241237282954725 AS BLOB)))) ORDER BY ((((((((((0.21198081513089162)<(v0.c3)))AND(((x'') IS FALSE))))AND(((v0.c1)>>(v0.c0)))))AND(x'a6')))OR((vt0.c0 IN (v0.c1)))) DESC  NULLS LAST, x'362215' ASC  NULLS LAST, v0.c2 DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE ((((+ (v0.c0)))-(CAST(0.8241237282954725 AS BLOB)))) ORDER BY ((((v0.c0) IS FALSE))-(CASE WHEN '7' THEN v0.c2 END))  NULLS LAST, (+ (CAST(v0.c1 AS BLOB))) INTERSECT SELECT ALL * FROM v0, vt0 WHERE (CASE ((v0.c1) NOTNULL)  WHEN (((NULL))==((vt0.c0))) THEN ((vt0.c0)&(v0.c0)) WHEN (+ (v0.c1)) THEN (((v0.c0, v0.c0)) BETWEEN ((NULL, v0.c0)) AND ((vt0.c0, v0.c0))) END) ORDER BY ((((v0.c0) IS FALSE))-(CASE WHEN '7' THEN v0.c2 END))  NULLS LAST, (+ (CAST(v0.c1 AS BLOB)));
SELECT * FROM v0, vt0 WHERE ((((+ (v0.c0)))-(CAST(0.8241237282954725 AS BLOB)))) ORDER BY ((((((((((0.21198081513089162)<(v0.c3)))AND(((x'') IS FALSE))))AND(((v0.c1)>>(v0.c0)))))AND(x'a6')))OR((vt0.c0 IN (v0.c1)))) DESC  NULLS LAST, x'362215' ASC  NULLS LAST, v0.c2 DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE ((((+ (v0.c0)))-(CAST(0.8241237282954725 AS BLOB)))) ORDER BY ((((v0.c0) IS FALSE))-(CASE WHEN '7' THEN v0.c2 END))  NULLS LAST, (+ (CAST(v0.c1 AS BLOB))) INTERSECT SELECT ALL * FROM v0, vt0 WHERE (CASE ((v0.c1) NOTNULL)  WHEN (((NULL))==((vt0.c0))) THEN ((vt0.c0)&(v0.c0)) WHEN (+ (v0.c1)) THEN (((v0.c0, v0.c0)) BETWEEN ((NULL, v0.c0)) AND ((vt0.c0, v0.c0))) END) ORDER BY ((((v0.c0) IS FALSE))-(CASE WHEN '7' THEN v0.c2 END))  NULLS LAST, (+ (CAST(v0.c1 AS BLOB)));
SELECT ALL MAX(vt2.c1) FROM vt2, vt0 WHERE (((((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt2.c1))) BETWEEN (vt2.c1 COLLATE BINARY) AND (((vt0.c0) ISNULL))));
SELECT MAX(vt2.c1) FROM vt2, vt0 WHERE (((((((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt2.c1))) BETWEEN (vt2.c1 COLLATE BINARY) AND (((vt0.c0) ISNULL))))AND((+ (((((vt2.c1)OR(vt2.c1)))OR(vt0.c0))))))) ORDER BY (((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt2.c1, vt0.c0)))) NOT BETWEEN (((vt2.c1)||(vt2.c1))) AND ((vt2.c0 IN (vt2.c0)))) ASC  NULLS FIRST, ((((vt2.c0)IS NOT(0.9274059666326703))) NOT BETWEEN (((vt2.c1) NOTNULL)) AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT MAX(vt2.c1) FROM vt2, vt0 WHERE ((((((NOT (vt2.c1)))OR(x'd8')))OR(CAST(vt0.c0 AS INTEGER)))) ORDER BY (((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt2.c1, vt0.c0)))) NOT BETWEEN (((vt2.c1)||(vt2.c1))) AND ((vt2.c0 IN (vt2.c0)))) ASC  NULLS FIRST, ((((vt2.c0)IS NOT(0.9274059666326703))) NOT BETWEEN (((vt2.c1) NOTNULL)) AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt2 WHERE ((NOT (ABS(vt2.c0)))) ORDER BY (((vt2.c0 IN (vt2.c1))) NOT NULL)  NULLS FIRST, (+ (vt2.c1)) COLLATE RTRIM  NULLS LAST, HEX(x'5d');
SELECT DISTINCT * FROM vt2 WHERE ((((NOT (ABS(vt2.c0))))AND((('-328784487') IS TRUE)))) ORDER BY (((vt2.c0 IN (vt2.c1))) NOT NULL)  NULLS FIRST, (+ (vt2.c1)) COLLATE RTRIM  NULLS LAST, HEX(x'5d') INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) NOT BETWEEN (CASE vt2.c1  WHEN '-197496816' THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END) AND (((((vt2.c0)OR(vt2.c0)))OR(vt2.c0))))) ORDER BY (((vt2.c0 IN (vt2.c1))) NOT NULL)  NULLS FIRST, (+ (vt2.c1)) COLLATE RTRIM  NULLS LAST, HEX(x'5d');
SELECT * FROM vt2 WHERE ((NOT (ABS(vt2.c0)))) ORDER BY (((vt2.c0 IN (vt2.c1))) NOT NULL)  NULLS FIRST, (+ (vt2.c1)) COLLATE RTRIM  NULLS LAST, HEX(x'5d');
SELECT DISTINCT * FROM vt2 WHERE ((((NOT (ABS(vt2.c0))))AND((('-328784487') IS TRUE)))) ORDER BY (((vt2.c0 IN (vt2.c1))) NOT NULL)  NULLS FIRST, (+ (vt2.c1)) COLLATE RTRIM  NULLS LAST, HEX(x'5d') INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) NOT BETWEEN (CASE vt2.c1  WHEN '-197496816' THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END) AND (((((vt2.c0)OR(vt2.c0)))OR(vt2.c0))))) ORDER BY (((vt2.c0 IN (vt2.c1))) NOT NULL)  NULLS FIRST, (+ (vt2.c1)) COLLATE RTRIM  NULLS LAST, HEX(x'5d');
SELECT * FROM vt2, vt0 WHERE (((CAST(vt2.c1 AS TEXT))||(vt2.c1)));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((CAST(vt2.c1 AS TEXT))||(vt2.c1)))AND(SUBSTR(CASE vt2.c0  WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c1 THEN NULL WHEN '-1488583014' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END, ((vt0.c0)>(vt0.c0)))))) ORDER BY 0.6515258409859986 DESC, vt2.c1 LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE ('-1969178798') ORDER BY 0.6515258409859986 DESC, vt2.c1 LIMIT 2;
SELECT * FROM vt2, vt0 WHERE (((CAST(vt2.c1 AS TEXT))||(vt2.c1)));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((CAST(vt2.c1 AS TEXT))||(vt2.c1)))AND(SUBSTR(CASE vt2.c0  WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c1 THEN NULL WHEN '-1488583014' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END, ((vt0.c0)>(vt0.c0)))))) ORDER BY 0.6515258409859986 DESC, vt2.c1 LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE ('-1969178798') ORDER BY 0.6515258409859986 DESC, vt2.c1 LIMIT 2;
SELECT ALL * FROM vt2 LEFT OUTER JOIN vt0 ON (+ (((v0.c1) NOT NULL))) INNER JOIN v0 ON ((((x'') ISNULL)) NOTNULL) WHERE ((((~ (vt2.c1))) BETWEEN (((vt2.c1) NOT BETWEEN (v0.c1) AND (vt0.c0))) AND (((vt2.c0)==(v0.c3)))));
SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN vt0 ON (+ (((v0.c1) NOT NULL))) INNER JOIN v0 ON ((((x'') ISNULL)) NOTNULL) WHERE ((((((~ (vt2.c1))) BETWEEN (((vt2.c1) NOT BETWEEN (v0.c1) AND (vt0.c0))) AND (((vt2.c0)=(v0.c3)))))AND((((v0.c3, 0xffffffff80d64935)) NOT BETWEEN ((TYPEOF(vt2.c0), ((vt2.c0) NOT BETWEEN (v0.c1) AND (vt2.c0)))) AND ((((vt0.c0) NOTNULL), SQLITE_COMPILEOPTION_USED(v0.c3))))))) ORDER BY ((((vt2.c1)<>(vt2.c0))) NOT NULL) ASC, ((- (vt2.c0)) IN ((+ (v0.c2)), ((0.7432547810461071) NOT BETWEEN (vt2.c0) AND (v0.c2)))) DESC, (((((((- (v0.c0)))AND(CAST('2031816578' AS INTEGER))))OR(((vt2.c0) BETWEEN (v0.c2) AND (v0.c2)))))OR((vt2.c1 IN (vt2.c1)))) LIMIT 0x1;
SELECT ALL * FROM vt2 LEFT OUTER JOIN vt0 ON (+ (((v0.c1) NOT NULL))) INNER JOIN v0 ON ((((x'') ISNULL)) NOTNULL) WHERE ((((~ (vt2.c1))) BETWEEN (((vt2.c1) NOT BETWEEN (v0.c1) AND (vt0.c0))) AND (((vt2.c0)==(v0.c3)))));
SELECT ALL * FROM v0, vt0, vt2 WHERE ((vt2.c0 IN (vt2.c1, vt2.c0)) COLLATE NOCASE) ORDER BY CAST((((v0.c3, v0.c3, v0.c3))>=((vt2.c1, vt0.c0, v0.c2))) AS BLOB);
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((vt2.c0 IN (vt2.c1, vt2.c0)) COLLATE NOCASE)AND(CAST((((v0.c1, v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, vt2.c1, vt0.c0)) AND ((v0.c0, 2.67721342E8, v0.c1))) AS BLOB)))) ORDER BY ((((((((((((v0.c1)AND(v0.c1)))OR(v0.c3)))AND(vt2.c0)))AND(vt2.c0)))AND(v0.c0))) ISNULL) DESC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((vt2.c0)) NOT BETWEEN ((v0.c3)) AND ((vt2.c0))))OR((~ (vt2.c0))))) ORDER BY ((((((((((((v0.c1)AND(v0.c1)))OR(v0.c3)))AND(vt2.c0)))AND(vt2.c0)))AND(v0.c0))) ISNULL) DESC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((vt2.c0 IN (vt2.c1, vt2.c0)) COLLATE NOCASE) ORDER BY CAST((((v0.c3, v0.c3, v0.c3))>=((vt2.c1, vt0.c0, v0.c2))) AS BLOB);
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((vt2.c0 IN (vt2.c1, vt2.c0)) COLLATE NOCASE)AND(CAST((((v0.c1, v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, vt2.c1, vt0.c0)) AND ((v0.c0, 2.67721342E8, v0.c1))) AS BLOB)))) ORDER BY ((((((((((((v0.c1)AND(v0.c1)))OR(v0.c3)))AND(vt2.c0)))AND(vt2.c0)))AND(v0.c0))) ISNULL) DESC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((vt2.c0)) NOT BETWEEN ((v0.c3)) AND ((vt2.c0))))OR((~ (vt2.c0))))) ORDER BY ((((((((((((v0.c1)AND(v0.c1)))OR(v0.c3)))AND(vt2.c0)))AND(vt2.c0)))AND(v0.c0))) ISNULL) DESC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (CASE WHEN ((v0.c1)&(v0.c0)) THEN TOTAL_CHANGES() WHEN CAST(v0.c2 AS TEXT) THEN (- (v0.c2)) ELSE ((v0.c0) ISNULL) END) ORDER BY ((((v0.c0)*(v0.c2)))>((('1976704639') BETWEEN (v0.c0) AND (v0.c3))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CASE WHEN ((v0.c1)&(v0.c0)) THEN TOTAL_CHANGES() WHEN CAST(v0.c2 AS TEXT) THEN (- (v0.c2)) ELSE ((v0.c0) ISNULL) END) ORDER BY (((v0.c0)=('')) IN ())  NULLS LAST, ((NOT (v0.c2)) IN (CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c3 THEN v0.c0 ELSE v0.c1 END));
SELECT ALL * FROM v0 WHERE (CASE WHEN ((v0.c1)&(v0.c0)) THEN TOTAL_CHANGES() WHEN CAST(v0.c2 AS TEXT) THEN (- (v0.c2)) ELSE ((v0.c0) ISNULL) END) ORDER BY ((((v0.c0)*(v0.c2)))>((('1976704639') BETWEEN (v0.c0) AND (v0.c3))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CASE WHEN ((v0.c1)&(v0.c0)) THEN TOTAL_CHANGES() WHEN CAST(v0.c2 AS TEXT) THEN (- (v0.c2)) ELSE ((v0.c0) ISNULL) END) ORDER BY (((v0.c0)=('')) IN ())  NULLS LAST, ((NOT (v0.c2)) IN (CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c3 THEN v0.c0 ELSE v0.c1 END));
SELECT * FROM vt2, v0, vt0 WHERE (0Xc17a570) ORDER BY CASE WHEN ((v0.c2) NOTNULL) THEN (((-1.97496816E8, vt0.c0)) NOT BETWEEN ((v0.c1, vt2.c0)) AND (('', vt2.c1))) WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOT BETWEEN (x'') AND (v0.c3)) END  NULLS LAST, ((vt0.c0)-(CAST(v0.c1 AS INTEGER)));
SELECT * FROM vt2, v0, vt0 WHERE (((0xc17a570)AND(CASE CAST(vt2.c0 AS REAL)  WHEN ((((0.5386248511963987)OR(v0.c0)))OR(0.7131002778728328)) THEN (((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt0.c0))) WHEN ((v0.c0)==(v0.c1)) THEN ((((((((((vt2.c1)AND(v0.c2)))OR(v0.c3)))OR(v0.c2)))OR(v0.c2)))AND(vt2.c0)) ELSE (vt2.c0 IN (vt2.c0)) END))) ORDER BY CASE WHEN ((v0.c2) NOTNULL) THEN (((-1.97496816E8, vt0.c0)) NOT BETWEEN ((v0.c1, vt2.c0)) AND (('', vt2.c1))) WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOT BETWEEN (x'') AND (v0.c3)) END  NULLS LAST, ((vt0.c0)-(CAST(v0.c1 AS INTEGER))) LIMIT 3 INTERSECT SELECT ALL * FROM vt2, v0, vt0 WHERE (((v0.c1) BETWEEN (vt2.c0) AND (v0.c0)) COLLATE NOCASE) ORDER BY CASE WHEN ((v0.c2) NOTNULL) THEN (((-1.97496816E8, vt0.c0)) NOT BETWEEN ((v0.c1, vt2.c0)) AND (('', vt2.c1))) WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOT BETWEEN (x'') AND (v0.c3)) END  NULLS LAST, ((vt0.c0)-(CAST(v0.c1 AS INTEGER))) LIMIT 3;
SELECT * FROM vt2, v0, vt0 WHERE (0Xc17a570) ORDER BY CASE WHEN ((v0.c2) NOTNULL) THEN (((-1.97496816E8, vt0.c0)) NOT BETWEEN ((v0.c1, vt2.c0)) AND (('', vt2.c1))) WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOT BETWEEN (x'') AND (v0.c3)) END  NULLS LAST, ((vt0.c0)-(CAST(v0.c1 AS INTEGER)));
SELECT * FROM vt2, v0, vt0 WHERE (((0xc17a570)AND(CASE CAST(vt2.c0 AS REAL)  WHEN ((((0.5386248511963987)OR(v0.c0)))OR(0.7131002778728328)) THEN (((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt0.c0))) WHEN ((v0.c0)==(v0.c1)) THEN ((((((((((vt2.c1)AND(v0.c2)))OR(v0.c3)))OR(v0.c2)))OR(v0.c2)))AND(vt2.c0)) ELSE (vt2.c0 IN (vt2.c0)) END))) ORDER BY CASE WHEN ((v0.c2) NOTNULL) THEN (((-1.97496816E8, vt0.c0)) NOT BETWEEN ((v0.c1, vt2.c0)) AND (('', vt2.c1))) WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOT BETWEEN (x'') AND (v0.c3)) END  NULLS LAST, ((vt0.c0)-(CAST(v0.c1 AS INTEGER))) LIMIT 3 INTERSECT SELECT ALL * FROM vt2, v0, vt0 WHERE (((v0.c1) BETWEEN (vt2.c0) AND (v0.c0)) COLLATE NOCASE) ORDER BY CASE WHEN ((v0.c2) NOTNULL) THEN (((-1.97496816E8, vt0.c0)) NOT BETWEEN ((v0.c1, vt2.c0)) AND (('', vt2.c1))) WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOT BETWEEN (x'') AND (v0.c3)) END  NULLS LAST, ((vt0.c0)-(CAST(v0.c1 AS INTEGER))) LIMIT 3;
SELECT * FROM vt0, vt2 WHERE (((((((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 'Q5!#Z3' END)OR((~ (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)))AND(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN NULL END))) ORDER BY CASE WHEN ((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)) THEN vt2.c1 WHEN UNLIKELY(DISTINCT vt0.c0) THEN vt2.c1 COLLATE BINARY ELSE (+ (vt2.c1)) END ASC  NULLS LAST, 0.9090552239994415 ASC, CAST(vt2.c1 AS INTEGER) COLLATE RTRIM ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((((((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 'Q5!#Z3' END)OR((~ (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)))AND(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN NULL END))) ORDER BY CASE WHEN ((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)) THEN vt2.c1 WHEN UNLIKELY(DISTINCT vt0.c0) THEN vt2.c1 COLLATE BINARY ELSE (+ (vt2.c1)) END ASC  NULLS LAST, 0.9090552239994415 ASC, CAST(vt2.c1 AS INTEGER) COLLATE RTRIM ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM vt0, vt2 WHERE ((((((vt2.c1, vt2.c0))>=((vt2.c1, vt2.c0))))IS((((vt2.c1, vt0.c0, vt2.c0, vt2.c1, vt0.c0, vt2.c0))>=((vt2.c1, vt2.c1, vt0.c0, vt0.c0, vt2.c1, vt0.c0)))))) ORDER BY CASE WHEN ((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)) THEN vt2.c1 WHEN UNLIKELY(DISTINCT vt0.c0) THEN vt2.c1 COLLATE BINARY ELSE (+ (vt2.c1)) END ASC  NULLS LAST, 0.9090552239994415 ASC, CAST(vt2.c1 AS INTEGER) COLLATE RTRIM ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt0, vt2 WHERE (((((((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 'Q5!#Z3' END)OR((~ (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)))AND(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN NULL END))) ORDER BY CASE WHEN ((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)) THEN vt2.c1 WHEN UNLIKELY(DISTINCT vt0.c0) THEN vt2.c1 COLLATE BINARY ELSE (+ (vt2.c1)) END ASC  NULLS LAST, 0.9090552239994415 ASC, CAST(vt2.c1 AS INTEGER) COLLATE RTRIM ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((((((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 'Q5!#Z3' END)OR((~ (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)))AND(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN NULL END))) ORDER BY CASE WHEN ((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)) THEN vt2.c1 WHEN UNLIKELY(DISTINCT vt0.c0) THEN vt2.c1 COLLATE BINARY ELSE (+ (vt2.c1)) END ASC  NULLS LAST, 0.9090552239994415 ASC, CAST(vt2.c1 AS INTEGER) COLLATE RTRIM ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM vt0, vt2 WHERE ((((((vt2.c1, vt2.c0))>=((vt2.c1, vt2.c0))))IS((((vt2.c1, vt0.c0, vt2.c0, vt2.c1, vt0.c0, vt2.c0))>=((vt2.c1, vt2.c1, vt0.c0, vt0.c0, vt2.c1, vt0.c0)))))) ORDER BY CASE WHEN ((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)) THEN vt2.c1 WHEN UNLIKELY(DISTINCT vt0.c0) THEN vt2.c1 COLLATE BINARY ELSE (+ (vt2.c1)) END ASC  NULLS LAST, 0.9090552239994415 ASC, CAST(vt2.c1 AS INTEGER) COLLATE RTRIM ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt2 LEFT OUTER JOIN v0 ON CASE WHEN CASE vt2.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c3 END THEN ((vt2.c1)AND(vt2.c1)) WHEN ((((vt2.c0)AND(vt2.c1)))AND(v0.c1)) THEN x'e4' COLLATE BINARY END WHERE (((v0.c2 COLLATE BINARY) NOTNULL));
SELECT DISTINCT COUNT(*) FROM vt2 INNER JOIN v0 ON CASE WHEN CASE vt2.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c3 END THEN ((vt2.c1)AND(vt2.c1)) WHEN ((((vt2.c0)AND(vt2.c1)))AND(v0.c1)) THEN x'e4' COLLATE BINARY END WHERE (((v0.c2 COLLATE BINARY) NOTNULL)) INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 INNER JOIN v0 ON CASE WHEN CASE vt2.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c3 END THEN ((vt2.c1)AND(vt2.c1)) WHEN ((((vt2.c0)AND(vt2.c1)))AND(v0.c1)) THEN x'e4' COLLATE BINARY END WHERE ((+ ((((v0.c0, vt2.c1, v0.c2, v0.c0))<((v0.c2, v0.c1, vt2.c1, vt2.c1))))));
SELECT ALL MIN(vt2.c0) FROM v0, vt2 LEFT OUTER JOIN vt0 ON ((((((((((vt0.c0)AND(6.07633563E8)))OR(v0.c3)))OR(vt0.c0)))OR(v0.c0))) BETWEEN ((~ (v0.c3))) AND ((((x'6e', vt0.c0, v0.c2, v0.c1, vt2.c0)) BETWEEN ((vt0.c0, v0.c2, v0.c0, v0.c2, vt0.c0)) AND ((v0.c2, vt2.c1, v0.c1, v0.c2, v0.c3))))) WHERE (x'ac');
SELECT ALL MIN(vt2.c0) FROM v0, vt2 INNER JOIN vt0 ON ((((((((((vt0.c0)AND(6.07633563E8)))OR(v0.c3)))OR(vt0.c0)))OR(v0.c0))) BETWEEN ((~ (v0.c3))) AND ((((x'6e', vt0.c0, v0.c2, v0.c1, vt2.c0)) BETWEEN ((vt0.c0, v0.c2, v0.c0, v0.c2, vt0.c0)) AND ((v0.c2, vt2.c1, v0.c1, v0.c2, v0.c3))))) WHERE (x'ac') LIMIT 0;
SELECT ALL * FROM vt2 WHERE (((((((((CAST(vt2.c0 AS INTEGER))OR(DATETIME(vt2.c1, vt2.c0, vt2.c0, vt2.c1, vt2.c1, vt2.c1))))OR(0.7020998675835192 COLLATE NOCASE)))OR(vt2.c0)))OR((vt2.c0 IN (vt2.c0)))));
SELECT DISTINCT * FROM vt2 WHERE (((((((((((CAST(vt2.c0 AS INTEGER))OR(DATETIME(vt2.c1, vt2.c0, vt2.c0, vt2.c1, vt2.c1, vt2.c1))))OR(0.7020998675835192 COLLATE NOCASE)))OR(vt2.c0)))OR((vt2.c0 IN (vt2.c0)))))AND(((((vt2.c0)+(vt2.c0)))GLOB(CAST(vt2.c0 AS INTEGER)))))) LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((CAST(vt2.c0 AS NUMERIC))AND(((((vt2.c0)AND(vt2.c0)))AND(x'7c')))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))))) LIMIT 0X1;
SELECT ALL * FROM vt2 WHERE (((((((((CAST(vt2.c0 AS INTEGER))OR(DATETIME(vt2.c1, vt2.c0, vt2.c0, vt2.c1, vt2.c1, vt2.c1))))OR(0.7020998675835192 COLLATE NOCASE)))OR(vt2.c0)))OR((vt2.c0 IN (vt2.c0)))));
SELECT DISTINCT * FROM vt2 WHERE (((((((((((CAST(vt2.c0 AS INTEGER))OR(DATETIME(vt2.c1, vt2.c0, vt2.c0, vt2.c1, vt2.c1, vt2.c1))))OR(0.7020998675835192 COLLATE NOCASE)))OR(vt2.c0)))OR((vt2.c0 IN (vt2.c0)))))AND(((((vt2.c0)+(vt2.c0)))GLOB(CAST(vt2.c0 AS INTEGER)))))) LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((CAST(vt2.c0 AS NUMERIC))AND(((((vt2.c0)AND(vt2.c0)))AND(x'7c')))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))))) LIMIT 0X1;
SELECT * FROM v0, vt2 WHERE ((CASE v0.c1  WHEN v0.c2 THEN v0.c3 ELSE vt2.c1 END IN ())) ORDER BY ((((((((((((((((((v0.c3)OR(vt2.c0)))AND(0.4256698403911109)))OR(v0.c2)))AND(v0.c2)))OR(vt2.c0)))AND(v0.c3)))AND(v0.c2)))AND(v0.c2)))>=(LIKELIHOOD(DISTINCT vt2.c0, v0.c1))) DESC  NULLS LAST;
SELECT ALL * FROM v0, vt2 WHERE ((CASE v0.c1  WHEN v0.c2 THEN v0.c3 ELSE vt2.c1 END IN ())) ORDER BY ((((((((((((((((((v0.c3)OR(vt2.c0)))AND(0.4256698403911109)))OR(v0.c2)))AND(v0.c2)))OR(vt2.c0)))AND(v0.c3)))AND(v0.c2)))AND(v0.c2)))>=(LIKELIHOOD(DISTINCT vt2.c0, v0.c1))) DESC  NULLS LAST LIMIT 0x2 INTERSECT SELECT * FROM v0, vt2 WHERE (CAST(((v0.c3)/(vt2.c1)) AS TEXT)) ORDER BY ((((((((((((((((((v0.c3)OR(vt2.c0)))AND(0.4256698403911109)))OR(v0.c2)))AND(v0.c2)))OR(vt2.c0)))AND(v0.c3)))AND(v0.c2)))AND(v0.c2)))>=(LIKELIHOOD(DISTINCT vt2.c0, v0.c1))) DESC  NULLS LAST LIMIT 0x2;
SELECT * FROM v0, vt2 WHERE ((CASE v0.c1  WHEN v0.c2 THEN v0.c3 ELSE vt2.c1 END IN ())) ORDER BY ((((((((((((((((((v0.c3)OR(vt2.c0)))AND(0.4256698403911109)))OR(v0.c2)))AND(v0.c2)))OR(vt2.c0)))AND(v0.c3)))AND(v0.c2)))AND(v0.c2)))>=(LIKELIHOOD(DISTINCT vt2.c0, v0.c1))) DESC  NULLS LAST;
SELECT * FROM v0 CROSS JOIN vt0 ON LOWER(((vt0.c0)>>(v0.c3))) WHERE ((~ (UNLIKELY(v0.c2))));
SELECT * FROM v0 CROSS JOIN vt0 ON LOWER(((vt0.c0)>>(v0.c3))) WHERE ((((~ (UNLIKELY(v0.c2))))AND(((((v0.c3) IS FALSE))||(CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c3 END))))) LIMIT 0X0 INTERSECT SELECT * FROM v0 CROSS JOIN vt0 ON LOWER(((vt0.c0)>>(v0.c3))) WHERE (((((v0.c2)||(v0.c2)))LIKE(((vt0.c0) NOTNULL)))) LIMIT 0;
SELECT * FROM v0 CROSS JOIN vt0 ON LOWER(((vt0.c0)>>(v0.c3))) WHERE ((~ (UNLIKELY(v0.c2))));
SELECT * FROM v0 CROSS JOIN vt0 ON LOWER(((vt0.c0)>>(v0.c3))) WHERE ((((~ (UNLIKELY(v0.c2))))AND(((((v0.c3) IS FALSE))||(CASE WHEN v0.c0 THEN v0.c1 ELSE v0.c3 END))))) LIMIT 0X0 INTERSECT SELECT * FROM v0 CROSS JOIN vt0 ON LOWER(((vt0.c0)>>(v0.c3))) WHERE (((((v0.c2)||(v0.c2)))LIKE(((vt0.c0) NOTNULL)))) LIMIT 0;
SELECT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (LTRIM(v0.c0, vt0.c0) COLLATE BINARY) ORDER BY ((((((((((CASE vt0.c0  WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN vt2.c0 THEN v0.c2 END)AND(NULL COLLATE RTRIM)))AND((NOT (vt2.c0)))))AND(vt2.c0)))OR(v0.c1 COLLATE NOCASE)))AND((((vt2.c1, v0.c2, v0.c1, v0.c3))<>((v0.c3, vt2.c1, vt2.c1, vt0.c0))))), ((json_object(v0.c3, v0.c3, v0.c2, v0.c3)) ISNULL) ASC, json_patch(vt2.c1 COLLATE NOCASE, ((vt2.c1)AND(x'f24e2f73bb'))) ASC  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (((LTRIM(v0.c0, vt0.c0) COLLATE BINARY)AND(((((vt2.c1) IS TRUE)) IS FALSE)))) ORDER BY ((((((((((CASE vt0.c0  WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN vt2.c0 THEN v0.c2 END)AND(NULL COLLATE RTRIM)))AND((NOT (vt2.c0)))))AND(vt2.c0)))OR(v0.c1 COLLATE NOCASE)))AND((((vt2.c1, v0.c2, v0.c1, v0.c3))!=((v0.c3, vt2.c1, vt2.c1, vt0.c0))))), ((json_object(v0.c3, v0.c3, v0.c2, v0.c3)) ISNULL) ASC, json_patch(vt2.c1 COLLATE NOCASE, ((vt2.c1)AND(x'f24e2f73bb'))) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (CAST(CAST(v0.c3 AS TEXT) AS REAL)) ORDER BY ((((((((((CASE vt0.c0  WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN vt2.c0 THEN v0.c2 END)AND(NULL COLLATE RTRIM)))AND((NOT (vt2.c0)))))AND(vt2.c0)))OR(v0.c1 COLLATE NOCASE)))AND((((vt2.c1, v0.c2, v0.c1, v0.c3))<>((v0.c3, vt2.c1, vt2.c1, vt0.c0))))), ((json_object(v0.c3, v0.c3, v0.c2, v0.c3)) ISNULL) ASC, json_patch(vt2.c1 COLLATE NOCASE, ((vt2.c1)AND(x'f24e2f73bb'))) ASC  NULLS LAST LIMIT 0X0;
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE ((- (CAST(v0.c3 AS INTEGER)))) ORDER BY (((vt0.c0)!=(v0.c1)) IN ())  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE ((- (CAST(v0.c3 AS INTEGER)))) ORDER BY CAST((NOT (vt0.c0)) AS REAL)  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0) NOTNULL) IN (CAST(vt0.c0 AS REAL), ((((((vt0.c0)OR('f')))OR(vt0.c0)))OR(vt0.c0)))));
SELECT * FROM vt0 WHERE ((((vt0.c0) NOTNULL) IN (CAST(vt0.c0 AS REAL), ((((((vt0.c0)OR('f')))OR(vt0.c0)))OR(vt0.c0))))) INTERSECT SELECT ALL * FROM vt0 WHERE (x'');
SELECT ALL * FROM vt0 WHERE ((((vt0.c0) NOTNULL) IN (CAST(vt0.c0 AS REAL), ((((((vt0.c0)OR('f')))OR(vt0.c0)))OR(vt0.c0)))));
SELECT * FROM vt0 WHERE ((((vt0.c0) NOTNULL) IN (CAST(vt0.c0 AS REAL), ((((((vt0.c0)OR('f')))OR(vt0.c0)))OR(vt0.c0))))) INTERSECT SELECT ALL * FROM vt0 WHERE (x'');
SELECT * FROM v0 WHERE (((((v0.c2)-('0.7822337193029021')))/(v0.c0)));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2)-('0.7822337193029021')))/(v0.c0))) ORDER BY ((NOT (v0.c0)) IN (((v0.c2)+(NULL)))), LIKELIHOOD(DISTINCT v0.c1, v0.c1) COLLATE NOCASE DESC INTERSECT SELECT DISTINCT * FROM v0 WHERE ('r1JM₅)k>D') ORDER BY ((NOT (v0.c0)) IN (((v0.c2)+(NULL)))), LIKELIHOOD(DISTINCT v0.c1, v0.c1) COLLATE NOCASE DESC;
SELECT * FROM v0 WHERE (((((v0.c2)-('0.7822337193029021')))/(v0.c0)));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c2)-('0.7822337193029021')))/(v0.c0))) ORDER BY ((NOT (v0.c0)) IN (((v0.c2)+(NULL)))), LIKELIHOOD(DISTINCT v0.c1, v0.c1) COLLATE NOCASE DESC INTERSECT SELECT DISTINCT * FROM v0 WHERE ('r1JM₅)k>D') ORDER BY ((NOT (v0.c0)) IN (((v0.c2)+(NULL)))), LIKELIHOOD(DISTINCT v0.c1, v0.c1) COLLATE NOCASE DESC;
SELECT * FROM vt2, vt0 WHERE ('/2tsj7T1\');
SELECT * FROM vt2, vt0 WHERE ((('/2tsj7T1\')AND(CAST(vt2.c1 AS INTEGER) COLLATE BINARY))) INTERSECT SELECT * FROM vt2, vt0 WHERE ((((vt2.c0, vt2.c1)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt0.c0))) COLLATE RTRIM);
SELECT * FROM vt2, vt0 WHERE ('/2tsj7T1\');
SELECT * FROM vt2, vt0 WHERE ((('/2tsj7T1\')AND(CAST(vt2.c1 AS INTEGER) COLLATE BINARY))) INTERSECT SELECT * FROM vt2, vt0 WHERE ((((vt2.c0, vt2.c1)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt0.c0))) COLLATE RTRIM);
SELECT MIN(vt0.c0) FROM vt0, vt2 WHERE ((((+ (vt2.c1))) BETWEEN (((vt2.c0) IS FALSE)) AND (('&,|' IN ()))));
SELECT MIN(vt0.c0) FROM vt0, vt2 WHERE ((((+ (vt2.c1))) BETWEEN (((vt2.c0) IS FALSE)) AND (('&,|' IN ()))));
SELECT ALL * FROM vt2, v0 WHERE (TYPEOF(PRINTF(v0.c1, v0.c2, vt2.c1)));
SELECT DISTINCT * FROM vt2, v0 WHERE (TYPEOF(PRINTF(v0.c1, v0.c2, vt2.c1))) LIMIT 0;
SELECT ALL * FROM vt2, v0 WHERE (TYPEOF(PRINTF(v0.c1, v0.c2, vt2.c1)));
SELECT DISTINCT * FROM vt2, v0 WHERE (TYPEOF(PRINTF(v0.c1, v0.c2, vt2.c1))) LIMIT 0;
SELECT ALL MAX(v0.c1) FROM vt2, v0 WHERE (((vt2.c0)OR(v0.c3)) COLLATE BINARY) ORDER BY LENGTH('-1607669206') ASC  NULLS FIRST, LIKELIHOOD(DISTINCT ((((((((v0.c2)AND(v0.c1)))AND(x'')))OR(v0.c0)))AND(v0.c3)), TRIM(v0.c1, vt2.c0));
SELECT MAX(v0.c1) FROM vt2, v0 WHERE (((vt2.c0)OR(v0.c3)) COLLATE BINARY) ORDER BY (((vt2.c1 IN ()))+(vt2.c1))  NULLS LAST INTERSECT SELECT MAX(v0.c1) FROM vt2, v0 WHERE ((+ ((((vt2.c1, v0.c2)) NOT BETWEEN ((v0.c3, vt2.c0)) AND ((vt2.c1, v0.c2)))))) ORDER BY (((vt2.c1 IN ()))+(vt2.c1))  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE ('-1599002356');
SELECT * FROM v0, vt0, vt2 WHERE ('-1599002356') ORDER BY (((v0.c1)) BETWEEN ((v0.c1 COLLATE BINARY)) AND ((CASE vt0.c0  WHEN vt2.c1 THEN vt0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c3 END)))  NULLS FIRST, vt2.c1  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM v0, vt0, vt2 WHERE (0.22905700301398546) ORDER BY (((v0.c1)) BETWEEN ((v0.c1 COLLATE BINARY)) AND ((CASE vt0.c0  WHEN vt2.c1 THEN vt0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c3 END)))  NULLS FIRST, vt2.c1  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0, vt0, vt2 WHERE ('-1599002356');
SELECT * FROM v0, vt0, vt2 WHERE ('-1599002356') ORDER BY (((v0.c1)) BETWEEN ((v0.c1 COLLATE BINARY)) AND ((CASE vt0.c0  WHEN vt2.c1 THEN vt0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c3 END)))  NULLS FIRST, vt2.c1  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM v0, vt0, vt2 WHERE (0.22905700301398546) ORDER BY (((v0.c1)) BETWEEN ((v0.c1 COLLATE BINARY)) AND ((CASE vt0.c0  WHEN vt2.c1 THEN vt0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c3 END)))  NULLS FIRST, vt2.c1  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE (((vt2.c1) NOT BETWEEN (NULLIF(DISTINCT vt2.c1, vt2.c1)) AND (1852842513)));
SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1) NOT BETWEEN (NULLIF(DISTINCT vt2.c1, vt2.c1)) AND (1852842513))) ORDER BY (((NOT (vt2.c0)))OR(((vt2.c0)*(vt2.c1)))) DESC  NULLS FIRST, (((((+ (vt2.c1)))OR(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)))))AND(vt2.c1)) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (vt2.c0) ORDER BY (((NOT (vt2.c0)))OR(((vt2.c0)*(vt2.c1)))) DESC  NULLS FIRST, (((((+ (vt2.c1)))OR(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)))))AND(vt2.c1)) ASC LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE (((vt2.c1) NOT BETWEEN (NULLIF(DISTINCT vt2.c1, vt2.c1)) AND (1852842513)));
SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1) NOT BETWEEN (NULLIF(DISTINCT vt2.c1, vt2.c1)) AND (1852842513))) ORDER BY (((NOT (vt2.c0)))OR(((vt2.c0)*(vt2.c1)))) DESC  NULLS FIRST, (((((+ (vt2.c1)))OR(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)))))AND(vt2.c1)) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (vt2.c0) ORDER BY (((NOT (vt2.c0)))OR(((vt2.c0)*(vt2.c1)))) DESC  NULLS FIRST, (((((+ (vt2.c1)))OR(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)))))AND(vt2.c1)) ASC LIMIT 0X0;
SELECT * FROM v0, vt2, vt0 WHERE (v0.c1);
SELECT * FROM v0, vt2, vt0 WHERE (v0.c1) ORDER BY (((v0.c2)) BETWEEN ((((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c3)))) AND ((CASE -1698145820  WHEN vt0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN v0.c0 WHEN vt2.c1 THEN v0.c0 ELSE x'' END))) ASC  NULLS LAST;
SELECT * FROM v0, vt2, vt0 WHERE (v0.c1);
SELECT * FROM v0, vt2, vt0 WHERE (v0.c1) ORDER BY (((v0.c2)) BETWEEN ((((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c3)))) AND ((CASE -1698145820  WHEN vt0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN v0.c0 WHEN vt2.c1 THEN v0.c0 ELSE x'' END))) ASC  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM vt0, v0 WHERE ((((((696725726) NOTNULL), 0.6067658267570618))>=((((v0.c0)>=(v0.c1)), (((v0.c3))<=((v0.c1)))))));
SELECT ALL MIN(v0.c1) FROM vt0, v0 WHERE ((((((0x298730de) NOTNULL), 0.6067658267570618))>((((v0.c0)>(v0.c1)), (((v0.c3))<=((v0.c1))))))) LIMIT 0x3 INTERSECT SELECT MIN(v0.c1) FROM vt0, v0 WHERE ((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)) IN (load_extension(v0.c0), ((v0.c3) NOTNULL)))) LIMIT 3;
SELECT * FROM vt2, v0, vt0 WHERE (CASE (((v0.c3)) BETWEEN ((vt0.c0)) AND ((v0.c2)))  WHEN (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))) THEN (vt0.c0 IN ()) ELSE vt0.c0 END);
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (CASE (((v0.c3)) BETWEEN ((vt0.c0)) AND ((v0.c2)))  WHEN (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))) THEN (vt0.c0 IN ()) ELSE vt0.c0 END) INTERSECT SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((v0.c0 IN (vt2.c0)) IN ()));
SELECT * FROM vt2, v0, vt0 WHERE (CASE (((v0.c3)) BETWEEN ((vt0.c0)) AND ((v0.c2)))  WHEN (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))) THEN (vt0.c0 IN ()) ELSE vt0.c0 END);
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (CASE (((v0.c3)) BETWEEN ((vt0.c0)) AND ((v0.c2)))  WHEN (((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))) THEN (vt0.c0 IN ()) ELSE vt0.c0 END) INTERSECT SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((v0.c0 IN (vt2.c0)) IN ()));
SELECT MIN(vt2.c1) FROM vt2 CROSS JOIN vt0 ON x'33' WHERE (((((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)AND(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0)))))OR(((vt2.c1)>(vt2.c0))))) ORDER BY CASE CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 END  WHEN (8.90457025E8 IN (vt2.c1)) THEN vt0.c0 WHEN ABS(DISTINCT vt2.c0) THEN ((vt2.c1)<=(vt2.c1)) WHEN NULL THEN ((vt2.c0) IS FALSE) ELSE vt0.c0 END  NULLS FIRST;
SELECT DISTINCT MIN(vt2.c1) FROM vt2 CROSS JOIN vt0 ON x'33' WHERE (((((((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)AND(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0)))))OR(((vt2.c1)>(vt2.c0)))))AND((((vt2.c0, '1359380232', vt2.c0)) BETWEEN ((((vt2.c0)>=(vt0.c0)), (NOT (vt2.c0)), CHAR(vt2.c0, vt0.c0, vt0.c0))) AND (((- (vt0.c0)), vt2.c0 COLLATE BINARY, CAST(vt0.c0 AS REAL))))))) ORDER BY CASE CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 END  WHEN (8.90457025E8 IN (vt2.c1)) THEN vt0.c0 WHEN ABS(DISTINCT vt2.c0) THEN ((vt2.c1)<=(vt2.c1)) WHEN NULL THEN ((vt2.c0) IS FALSE) ELSE vt0.c0 END  NULLS FIRST LIMIT 0x2;
SELECT ALL COUNT(*) FROM vt2 LEFT OUTER JOIN v0 ON CASE WHEN ((v0.c1) BETWEEN (v0.c0) AND (vt0.c0)) THEN ((vt2.c1)=('I
폽A!f<')) WHEN (v0.c1 IN (v0.c1, v0.c1)) THEN ((((((vt2.c1)OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)) WHEN LIKELIHOOD(DISTINCT vt0.c0, v0.c0) THEN 7.70310855E8 ELSE ABS(DISTINCT v0.c1) END INNER JOIN vt0 ON ((HEX(v0.c2)) BETWEEN ((((v0.c0, v0.c2, 0.6752456599976012, vt2.c1)) BETWEEN ((v0.c3, '139245396', vt2.c0, vt2.c0)) AND ((v0.c2, v0.c3, vt0.c0, vt0.c0)))) AND (((vt2.c0) BETWEEN (vt2.c0) AND (v0.c3)))) WHERE (CAST(vt2.c1 COLLATE NOCASE AS BLOB));
SELECT DISTINCT COUNT(*) FROM vt2 LEFT OUTER JOIN v0 ON CASE WHEN ((v0.c1) BETWEEN (v0.c0) AND (vt0.c0)) THEN ((vt2.c1)==('I
폽A!f<')) WHEN (v0.c1 IN (v0.c1, v0.c1)) THEN ((((((vt2.c1)OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)) WHEN LIKELIHOOD(DISTINCT vt0.c0, v0.c0) THEN 7.70310855E8 ELSE ABS(DISTINCT v0.c1) END INNER JOIN vt0 ON ((HEX(v0.c2)) BETWEEN ((((v0.c0, v0.c2, 0.6752456599976012, vt2.c1)) BETWEEN ((v0.c3, '139245396', vt2.c0, vt2.c0)) AND ((v0.c2, v0.c3, vt0.c0, vt0.c0)))) AND (((vt2.c0) BETWEEN (vt2.c0) AND (v0.c3)))) WHERE (CAST(vt2.c1 COLLATE NOCASE AS BLOB)) LIMIT 0x3 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 LEFT OUTER JOIN v0 ON CASE WHEN ((v0.c1) BETWEEN (v0.c0) AND (vt0.c0)) THEN ((vt2.c1)==('I
폽A!f<')) WHEN (v0.c1 IN (v0.c1, v0.c1)) THEN ((((((vt2.c1)OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)) WHEN LIKELIHOOD(DISTINCT vt0.c0, v0.c0) THEN 7.70310855E8 ELSE ABS(DISTINCT v0.c1) END INNER JOIN vt0 ON ((HEX(v0.c2)) BETWEEN ((((v0.c0, v0.c2, 0.6752456599976012, vt2.c1)) BETWEEN ((v0.c3, '139245396', vt2.c0, vt2.c0)) AND ((v0.c2, v0.c3, vt0.c0, vt0.c0)))) AND (((vt2.c0) BETWEEN (vt2.c0) AND (v0.c3)))) WHERE (load_extension((~ (v0.c1)), CASE WHEN vt0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN vt0.c0 THEN v0.c3 ELSE '708305761' END)) LIMIT 0x3;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (v0.c3) ORDER BY CHAR(((v0.c3)GLOB(v0.c3)))  NULLS LAST, (((~ (v0.c2)))AND(0.0909377853660499))  NULLS LAST, ((((v0.c1) BETWEEN (v0.c1) AND (v0.c3))) NOT NULL) DESC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (v0.c3) ORDER BY CHAR(((v0.c3)GLOB(v0.c3)))  NULLS LAST, (((~ (v0.c2)))AND(0.0909377853660499))  NULLS LAST, ((((v0.c1) BETWEEN (v0.c1) AND (v0.c3))) NOT NULL) DESC  NULLS FIRST LIMIT 2;
SELECT COUNT(*) FROM v0, vt0 WHERE ((NOT (((v0.c0)||(v0.c3))))) ORDER BY json_insert(((((((((((((v0.c3)OR(v0.c1)))OR(v0.c2)))OR(v0.c0)))OR(v0.c1)))AND(0.3253634580009075)))AND(v0.c0)), ((v0.c1)GLOB(v0.c3)), json_patch(v0.c2, 'W'), CASE WHEN 0.19166346829720826 THEN v0.c0 WHEN v0.c0 THEN vt0.c0 END, (+ (v0.c0))), (((v0.c3)!=(v0.c3)) IN (v0.c0)), CAST(((((v0.c1)AND(v0.c2)))AND(v0.c3)) AS INTEGER) DESC;
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE ((NOT (((v0.c0)||(v0.c3))))) ORDER BY json_insert(((((((((((((v0.c3)OR(v0.c1)))OR(v0.c2)))OR(v0.c0)))OR(v0.c1)))AND(0.3253634580009075)))AND(v0.c0)), ((v0.c1)GLOB(v0.c3)), json_patch(v0.c2, 'W'), CASE WHEN 0.19166346829720826 THEN v0.c0 WHEN v0.c0 THEN vt0.c0 END, (+ (v0.c0))), (((v0.c3)!=(v0.c3)) IN (v0.c0)), CAST(((((v0.c1)AND(v0.c2)))AND(v0.c3)) AS INTEGER) DESC LIMIT 0x3 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((((((((((v0.c0)AND(vt0.c0)))OR(v0.c3)))AND(v0.c1)))AND(v0.c0)))OR(v0.c1)) COLLATE RTRIM) ORDER BY json_insert(((((((((((((v0.c3)OR(v0.c1)))OR(v0.c2)))OR(v0.c0)))OR(v0.c1)))AND(0.3253634580009075)))AND(v0.c0)), ((v0.c1)GLOB(v0.c3)), json_patch(v0.c2, 'W'), CASE WHEN 0.19166346829720826 THEN v0.c0 WHEN v0.c0 THEN vt0.c0 END, (+ (v0.c0))), (((v0.c3)<>(v0.c3)) IN (v0.c0)), CAST(((((v0.c1)AND(v0.c2)))AND(v0.c3)) AS INTEGER) DESC LIMIT 0x3;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((((((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))AND(vt0.c0 COLLATE NOCASE)))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND(((vt0.c0)OR(vt0.c0)))))AND(vt0.c0 COLLATE BINARY))) ORDER BY LIKELY(DISTINCT UPPER(vt0.c0)) ASC  NULLS LAST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((((((((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))AND(vt0.c0 COLLATE NOCASE)))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND(((vt0.c0)OR(vt0.c0)))))AND(vt0.c0 COLLATE BINARY)))AND(CASE WHEN UPPER(vt0.c0) THEN (vt0.c0 IN ()) WHEN ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)) THEN CAST(vt0.c0 AS NUMERIC) WHEN '-1935470654' THEN (((vt0.c0, vt0.c0, x'', vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, 169200234, vt0.c0))) WHEN vt0.c0 THEN ((vt0.c0)+(0.6974828395865467)) WHEN (((vt0.c0))>=((vt0.c0))) THEN '95152107' END))) ORDER BY ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) BETWEEN (TIME('2146253173', vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND (vt0.c0))  NULLS FIRST, ((vt0.c0) NOTNULL) COLLATE NOCASE, '1839189666' DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (ROUND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (x'')), ((vt0.c0) NOT NULL))) ORDER BY ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) BETWEEN (TIME('2146253173', vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND (vt0.c0))  NULLS FIRST, ((vt0.c0) NOTNULL) COLLATE NOCASE, '1839189666' DESC  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE (CAST(vt0.c0 AS NUMERIC));
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE (((CAST(vt0.c0 AS NUMERIC))AND(v0.c1)));
SELECT ALL MIN(vt0.c0) FROM v0, vt0 WHERE (TRIM(DISTINCT CASE WHEN v0.c3 THEN v0.c1 END, v0.c0)) ORDER BY DATE(((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c2)), json_extract(v0.c2, 0.3297938934599147, vt0.c0), ((vt0.c0)-(v0.c2))) ASC, (((((vt0.c0, v0.c3, v0.c2))=((v0.c2, v0.c3, v0.c2)))) BETWEEN ((0.4643409253230786 IN (v0.c2, v0.c3))) AND (HEX(v0.c0))) DESC, ((((v0.c0) IS TRUE))+(0.200738149550867));
SELECT ALL MIN(vt0.c0) FROM v0, vt0 WHERE (((TRIM(DISTINCT CASE WHEN v0.c3 THEN v0.c1 END, v0.c0))AND(((((v0.c3)GLOB(NULL))) NOT BETWEEN (CASE WHEN v0.c3 THEN v0.c1 END) AND ((('c') ISNULL)))))) ORDER BY CASE WHEN (((v0.c0, vt0.c0, v0.c1, v0.c2))!=((v0.c2, v0.c3, v0.c0, vt0.c0))) THEN v0.c1 ELSE HEX(v0.c2) END LIMIT 1 INTERSECT SELECT ALL MIN(vt0.c0) FROM v0, vt0 WHERE ((json_array_length(v0.c0, v0.c0) IN ((((0.3025432042170326, v0.c1))<((v0.c2, v0.c1)))))) ORDER BY CASE WHEN (((v0.c0, vt0.c0, v0.c1, v0.c2))<>((v0.c2, v0.c3, v0.c0, vt0.c0))) THEN v0.c1 ELSE HEX(v0.c2) END LIMIT 1;
SELECT * FROM vt2 WHERE ((~ (vt2.c0 COLLATE NOCASE))) ORDER BY vt2.c1 DESC, vt2.c0  NULLS LAST, CAST(NULL AS TEXT)  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ((~ (vt2.c0 COLLATE NOCASE))) ORDER BY vt2.c1 DESC, vt2.c0  NULLS LAST, CAST(NULL AS TEXT)  NULLS LAST;
SELECT * FROM vt2 WHERE ((~ (vt2.c0 COLLATE NOCASE))) ORDER BY vt2.c1 DESC, vt2.c0  NULLS LAST, CAST(NULL AS TEXT)  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ((~ (vt2.c0 COLLATE NOCASE))) ORDER BY vt2.c1 DESC, vt2.c0  NULLS LAST, CAST(NULL AS TEXT)  NULLS LAST;
SELECT * FROM v0 WHERE (RTRIM(CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END)) ORDER BY v0.c0 DESC  NULLS FIRST, v0.c2;
SELECT DISTINCT * FROM v0 WHERE (((RTRIM(CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END))AND((NULL IN (CASE WHEN v0.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN x'3e33' THEN v0.c1 END))))) ORDER BY JULIANDAY((v0.c2 IN ()), ((((((v0.c1)OR(v0.c3)))AND(v0.c1)))AND(v0.c3)), (+ (v0.c0)));
SELECT * FROM v0 WHERE (RTRIM(CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END)) ORDER BY v0.c0 DESC  NULLS FIRST, v0.c2;
SELECT DISTINCT * FROM v0 WHERE (((RTRIM(CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END))AND((NULL IN (CASE WHEN v0.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 WHEN x'3e33' THEN v0.c1 END))))) ORDER BY JULIANDAY((v0.c2 IN ()), ((((((v0.c1)OR(v0.c3)))AND(v0.c1)))AND(v0.c3)), (+ (v0.c0)));
SELECT * FROM vt0, vt2 LEFT OUTER JOIN v0 ON ((((((((json_array_length(36375636))AND(((vt2.c1)||(v0.c3)))))AND(-118093794)))OR(((v0.c3)IS(vt2.c0)))))OR('-1876200723')) WHERE (CAST(CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 END AS INTEGER));
SELECT ALL * FROM vt0, vt2 LEFT OUTER JOIN v0 ON ((((((((json_array_length(0X22b0c54))AND(((vt2.c1)||(v0.c3)))))AND(-118093794)))OR(((v0.c3)IS(vt2.c0)))))OR('-1876200723')) WHERE (((CAST(CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 END AS INTEGER))AND(v0.c3))) LIMIT 0;
SELECT * FROM vt0, vt2 LEFT OUTER JOIN v0 ON ((((((((json_array_length(36375636))AND(((vt2.c1)||(v0.c3)))))AND(-118093794)))OR(((v0.c3)IS(vt2.c0)))))OR('-1876200723')) WHERE (CAST(CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 END AS INTEGER));
SELECT ALL * FROM vt0, vt2 LEFT OUTER JOIN v0 ON ((((((((json_array_length(0X22b0c54))AND(((vt2.c1)||(v0.c3)))))AND(-118093794)))OR(((v0.c3)IS(vt2.c0)))))OR('-1876200723')) WHERE (((CAST(CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 END AS INTEGER))AND(v0.c3))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (LIKELIHOOD(DISTINCT vt0.c0 COLLATE BINARY, (vt0.c0 IN (vt0.c0))));
SELECT ALL * FROM vt0 WHERE (LIKELIHOOD(DISTINCT vt0.c0 COLLATE BINARY, (vt0.c0 IN (vt0.c0))));
SELECT ALL * FROM vt0 WHERE (LIKELIHOOD(DISTINCT vt0.c0 COLLATE BINARY, (vt0.c0 IN (vt0.c0))));
SELECT ALL COUNT(*) FROM vt0 WHERE ((+ (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((+ (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(((CAST(vt0.c0 AS TEXT)) NOTNULL)))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((vt0.c0 IN ()) COLLATE BINARY);
SELECT ALL * FROM v0, vt0, vt2 WHERE (']') ORDER BY CASE WHEN v0.c3 COLLATE RTRIM THEN (((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt2.c1, v0.c1)) AND ((v0.c0, v0.c2, v0.c1))) WHEN (('NaN') NOT BETWEEN (vt2.c0) AND (v0.c1)) THEN ((v0.c3)IS(v0.c3)) END ASC, (((((v0.c1)OR(v0.c1)), ((vt2.c1) IS FALSE), v0.c1 COLLATE RTRIM))!=((((v0.c2)&(vt2.c0)), vt2.c0, CAST('Infinity' AS BLOB))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((']')AND((json_array_length(v0.c2, v0.c0) IN ('~'))))) ORDER BY ((vt2.c1)<=(vt0.c0)) COLLATE RTRIM COLLATE BINARY, CASE (NOT (v0.c1))  WHEN '-1447431013' THEN CAST(vt0.c0 AS NUMERIC) WHEN '0.7432547810461071' COLLATE NOCASE THEN (((v0.c0, vt0.c0, v0.c3, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt2.c1)) AND ((vt2.c1, v0.c0, x'087a', v0.c0))) ELSE ((v0.c1) BETWEEN (vt2.c1) AND (v0.c2)) END  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((v0.c0, v0.c1)) NOT BETWEEN (((vt2.c0 IN (v0.c2)), (NOT (vt0.c0)))) AND (((((v0.c1)) NOT BETWEEN ((0.9239922950615383)) AND ((v0.c3))), ((v0.c0)*(v0.c0)))))) ORDER BY ((vt2.c1)<=(vt0.c0)) COLLATE RTRIM COLLATE BINARY, CASE (NOT (v0.c1))  WHEN '-1447431013' THEN CAST(vt0.c0 AS NUMERIC) WHEN '0.7432547810461071' COLLATE NOCASE THEN (((v0.c0, vt0.c0, v0.c3, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt2.c1)) AND ((vt2.c1, v0.c0, x'087a', v0.c0))) ELSE ((v0.c1) BETWEEN (vt2.c1) AND (v0.c2)) END  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt0, vt2 WHERE (']') ORDER BY CASE WHEN v0.c3 COLLATE RTRIM THEN (((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt2.c1, v0.c1)) AND ((v0.c0, v0.c2, v0.c1))) WHEN (('NaN') NOT BETWEEN (vt2.c0) AND (v0.c1)) THEN ((v0.c3)IS(v0.c3)) END ASC, (((((v0.c1)OR(v0.c1)), ((vt2.c1) IS FALSE), v0.c1 COLLATE RTRIM))!=((((v0.c2)&(vt2.c0)), vt2.c0, CAST('Infinity' AS BLOB))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((']')AND((json_array_length(v0.c2, v0.c0) IN ('~'))))) ORDER BY ((vt2.c1)<=(vt0.c0)) COLLATE RTRIM COLLATE BINARY, CASE (NOT (v0.c1))  WHEN '-1447431013' THEN CAST(vt0.c0 AS NUMERIC) WHEN '0.7432547810461071' COLLATE NOCASE THEN (((v0.c0, vt0.c0, v0.c3, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt2.c1)) AND ((vt2.c1, v0.c0, x'087a', v0.c0))) ELSE ((v0.c1) BETWEEN (vt2.c1) AND (v0.c2)) END  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((v0.c0, v0.c1)) NOT BETWEEN (((vt2.c0 IN (v0.c2)), (NOT (vt0.c0)))) AND (((((v0.c1)) NOT BETWEEN ((0.9239922950615383)) AND ((v0.c3))), ((v0.c0)*(v0.c0)))))) ORDER BY ((vt2.c1)<=(vt0.c0)) COLLATE RTRIM COLLATE BINARY, CASE (NOT (v0.c1))  WHEN '-1447431013' THEN CAST(vt0.c0 AS NUMERIC) WHEN '0.7432547810461071' COLLATE NOCASE THEN (((v0.c0, vt0.c0, v0.c3, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt2.c1)) AND ((vt2.c1, v0.c0, x'087a', v0.c0))) ELSE ((v0.c1) BETWEEN (vt2.c1) AND (v0.c2)) END  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt0, vt2 WHERE ((((vt2.c1, vt2.c0)) BETWEEN (((vt0.c0 IN (vt2.c0, vt2.c1)), CAST(vt2.c1 AS REAL))) AND ((NULLIF(vt2.c0, vt2.c0), CAST(vt2.c1 AS INTEGER))))) ORDER BY ((((((vt2.c1)%(vt2.c1)))AND(((((vt2.c0)AND(vt0.c0)))OR(vt2.c0)))))AND((~ (vt0.c0))));
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ((((((vt2.c1, vt2.c0)) BETWEEN (((vt0.c0 IN (vt2.c0, vt2.c1)), CAST(vt2.c1 AS REAL))) AND ((NULLIF(vt2.c0, vt2.c0), CAST(vt2.c1 AS INTEGER)))))AND((((vt0.c0, vt2.c1)) BETWEEN ((((vt2.c1) BETWEEN (vt2.c1) AND (vt0.c0)), vt2.c0)) AND (((((vt2.c0, vt0.c0, vt2.c1)) NOT BETWEEN ((vt0.c0, vt2.c1, vt0.c0)) AND ((vt0.c0, vt2.c0, vt0.c0))), LIKELIHOOD(DISTINCT vt2.c1, vt2.c0))))))) ORDER BY UPPER(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) DESC  NULLS FIRST, (((((vt2.c1))<=((vt2.c1))))<=(vt2.c1 COLLATE RTRIM)) DESC LIMIT 1 INTERSECT SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ((NOT ((((vt2.c1))<=((vt0.c0)))))) ORDER BY UPPER(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) DESC  NULLS FIRST, (((((vt2.c1))<=((vt2.c1))))<=(vt2.c1 COLLATE RTRIM)) DESC LIMIT 1;
SELECT * FROM vt0, v0, vt2 WHERE ((x'' IN ()));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((x'' IN ())) ORDER BY ((((((((((((v0.c3 COLLATE RTRIM)AND(vt0.c0)))OR(((((((((v0.c2)OR(vt2.c0)))OR(v0.c1)))OR(vt2.c0)))OR(vt2.c1)))))AND(CASE WHEN vt2.c1 THEN v0.c0 ELSE v0.c1 END)))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END)))AND(CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 END)))AND(((((v0.c1)OR(vt2.c1)))OR(v0.c1))))  NULLS LAST, vt2.c1 COLLATE BINARY DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (SUBSTR((v0.c3 IN ()), ((v0.c3)LIKE(vt2.c0)))) ORDER BY ((((((((((((v0.c3 COLLATE RTRIM)AND(vt0.c0)))OR(((((((((v0.c2)OR(vt2.c0)))OR(v0.c1)))OR(vt2.c0)))OR(vt2.c1)))))AND(CASE WHEN vt2.c1 THEN v0.c0 ELSE v0.c1 END)))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END)))AND(CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 END)))AND(((((v0.c1)OR(vt2.c1)))OR(v0.c1))))  NULLS LAST, vt2.c1 COLLATE BINARY DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0, v0, vt2 WHERE ((x'' IN ()));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((x'' IN ())) ORDER BY ((((((((((((v0.c3 COLLATE RTRIM)AND(vt0.c0)))OR(((((((((v0.c2)OR(vt2.c0)))OR(v0.c1)))OR(vt2.c0)))OR(vt2.c1)))))AND(CASE WHEN vt2.c1 THEN v0.c0 ELSE v0.c1 END)))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END)))AND(CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 END)))AND(((((v0.c1)OR(vt2.c1)))OR(v0.c1))))  NULLS LAST, vt2.c1 COLLATE BINARY DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (SUBSTR((v0.c3 IN ()), ((v0.c3)LIKE(vt2.c0)))) ORDER BY ((((((((((((v0.c3 COLLATE RTRIM)AND(vt0.c0)))OR(((((((((v0.c2)OR(vt2.c0)))OR(v0.c1)))OR(vt2.c0)))OR(vt2.c1)))))AND(CASE WHEN vt2.c1 THEN v0.c0 ELSE v0.c1 END)))AND(CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END)))AND(CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 END)))AND(((((v0.c1)OR(vt2.c1)))OR(v0.c1))))  NULLS LAST, vt2.c1 COLLATE BINARY DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE ('*h') ORDER BY CASE WHEN ((v0.c1) BETWEEN (NULL) AND (v0.c1)) THEN (v0.c2 IN (vt0.c0)) WHEN ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c0)) THEN ((vt0.c0)<<(v0.c0)) ELSE ((v0.c2) NOT BETWEEN (vt0.c0) AND (v0.c0)) END, ((((v0.c2)<<(vt0.c0)))&(0.43769849794372706));
SELECT DISTINCT MIN(v0.c1) FROM v0, vt0 WHERE ((('*h')AND(v0.c0))) ORDER BY ((CASE WHEN v0.c3 THEN vt0.c0 ELSE v0.c3 END) NOTNULL) DESC  NULLS FIRST, (NOT (((v0.c2)>=(v0.c3)))) ASC, ((v0.c0 COLLATE RTRIM)|(v0.c2)) DESC LIMIT 0X3 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt0 WHERE (((((((v0.c3)OR(v0.c0)))OR(v0.c1)))LIKE(v0.c1))) ORDER BY ((CASE WHEN v0.c3 THEN vt0.c0 ELSE v0.c3 END) NOTNULL) DESC  NULLS FIRST, (NOT (((v0.c2)>=(v0.c3)))) ASC, ((v0.c0 COLLATE RTRIM)|(v0.c2)) DESC LIMIT 3;
SELECT * FROM v0, vt0, vt2 WHERE (((((v0.c2) NOTNULL))IS((+ (v0.c0)))));
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((v0.c2) NOTNULL))IS((+ (v0.c0))))) LIMIT 0x0;
SELECT * FROM v0, vt0, vt2 WHERE (((((v0.c2) NOTNULL))IS((+ (v0.c0)))));
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((v0.c2) NOTNULL))IS((+ (v0.c0))))) LIMIT 0x0;
SELECT * FROM vt2 WHERE ((((vt2.c1 IN ())) IS FALSE)) ORDER BY (+ (CAST(vt2.c0 AS INTEGER))), CAST((+ (vt2.c0)) AS INTEGER) ASC, ((NULL)=((((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))));
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c1 IN ())) IS FALSE))AND((((vt2.c0)) NOT BETWEEN ((((vt2.c0)>(vt2.c0)))) AND ((CASE WHEN vt2.c1 THEN vt2.c1 END)))))) ORDER BY ((NULL)>=(vt2.c1)) COLLATE BINARY  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))<<(((vt2.c1)GLOB(vt2.c1))))) ORDER BY ((NULL)>=(vt2.c1)) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt2 WHERE ((((vt2.c1 IN ())) IS FALSE)) ORDER BY (+ (CAST(vt2.c0 AS INTEGER))), CAST((+ (vt2.c0)) AS INTEGER) ASC, ((NULL)=((((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))));
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c1 IN ())) IS FALSE))AND((((vt2.c0)) NOT BETWEEN ((((vt2.c0)>(vt2.c0)))) AND ((CASE WHEN vt2.c1 THEN vt2.c1 END)))))) ORDER BY ((NULL)>=(vt2.c1)) COLLATE BINARY  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))<<(((vt2.c1)GLOB(vt2.c1))))) ORDER BY ((NULL)>=(vt2.c1)) COLLATE BINARY  NULLS LAST;
SELECT MIN(v0.c3) FROM v0 WHERE ((((x'')) BETWEEN ((((v0.c0)<=(v0.c1)))) AND ((NULL))));
SELECT ALL MIN(v0.c3) FROM v0 WHERE ((((((x'')) BETWEEN ((((v0.c0)<=(v0.c1)))) AND ((NULL))))AND((((+ (v0.c0)))*((NOT (v0.c2))))))) ORDER BY ((((((v0.c2)OR(v0.c2)))AND(v0.c2))) BETWEEN (CASE v0.c3  WHEN v0.c3 THEN v0.c1 ELSE -9954616 END) AND (v0.c3 COLLATE RTRIM)), CAST(((v0.c0) NOT NULL) AS REAL)  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL MIN(v0.c3) FROM v0 WHERE (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c2)) COLLATE NOCASE) ORDER BY ((((((v0.c2)OR(v0.c2)))AND(v0.c2))) BETWEEN (CASE v0.c3  WHEN v0.c3 THEN v0.c1 ELSE 0Xffffffffff681ac8 END) AND (v0.c3 COLLATE RTRIM)), CAST(((v0.c0) NOT NULL) AS REAL)  NULLS FIRST LIMIT 0;
SELECT * FROM vt0, vt2, v0 WHERE (((((((((((v0.c1)OR(v0.c0)))OR(v0.c1)))AND(vt0.c0)))AND(vt0.c0))) BETWEEN (vt2.c0) AND (vt2.c1))) ORDER BY (((((v0.c3, vt2.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, vt2.c1)))) NOT NULL);
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((((((((v0.c1)OR(v0.c0)))OR(v0.c1)))AND(vt0.c0)))AND(vt0.c0))) BETWEEN (vt2.c0) AND (vt2.c1)))AND(CASE (vt2.c1 IN (v0.c1, v0.c0))  WHEN (v0.c3 IN (vt2.c0, v0.c2)) THEN (((vt2.c1, vt0.c0, v0.c2)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((v0.c3, v0.c0, vt0.c0))) END))) ORDER BY (((((v0.c3, vt2.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, vt2.c1)))) NOT NULL) LIMIT 1;
SELECT * FROM vt0, vt2, v0 WHERE (((((((((((v0.c1)OR(v0.c0)))OR(v0.c1)))AND(vt0.c0)))AND(vt0.c0))) BETWEEN (vt2.c0) AND (vt2.c1))) ORDER BY (((((v0.c3, vt2.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, vt2.c1)))) NOT NULL);
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((((((((v0.c1)OR(v0.c0)))OR(v0.c1)))AND(vt0.c0)))AND(vt0.c0))) BETWEEN (vt2.c0) AND (vt2.c1)))AND(CASE (vt2.c1 IN (v0.c1, v0.c0))  WHEN (v0.c3 IN (vt2.c0, v0.c2)) THEN (((vt2.c1, vt0.c0, v0.c2)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((v0.c3, v0.c0, vt0.c0))) END))) ORDER BY (((((v0.c3, vt2.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c1, vt2.c1)))) NOT NULL) LIMIT 1;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))) COLLATE BINARY CROSS JOIN v0 ON ((((vt0.c0 IN ('382198455')), CASE WHEN vt0.c0 THEN '-2133440203' WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END))>=((((((v0.c1)AND(vt2.c0)))AND(vt2.c0)), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2))))) WHERE (((v0.c0)>=(vt2.c1)) COLLATE NOCASE) ORDER BY CASE ((((((v0.c1)OR(vt2.c0)))AND(v0.c0)))AND(vt2.c0))  WHEN CAST(vt0.c0 AS INTEGER) THEN ((((((((((vt0.c0)OR(vt2.c1)))AND(v0.c2)))AND(v0.c2)))AND(v0.c0)))AND('2146225919')) END ASC  NULLS LAST;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))) COLLATE BINARY CROSS JOIN v0 ON ((((vt0.c0 IN ('382198455')), CASE WHEN vt0.c0 THEN '-2133440203' WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END))>=((((((v0.c1)AND(vt2.c0)))AND(vt2.c0)), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2))))) WHERE (((v0.c0)>=(vt2.c1)) COLLATE NOCASE) ORDER BY CASE ((((((v0.c1)OR(vt2.c0)))AND(v0.c0)))AND(vt2.c0))  WHEN CAST(vt0.c0 AS INTEGER) THEN ((((((((((vt0.c0)OR(vt2.c1)))AND(v0.c2)))AND(v0.c2)))AND(v0.c0)))AND('2146225919')) END ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))) COLLATE BINARY CROSS JOIN v0 ON ((((vt0.c0 IN ('382198455')), CASE WHEN vt0.c0 THEN '-2133440203' WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END))>=((((((v0.c1)AND(vt2.c0)))AND(vt2.c0)), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2))))) WHERE (((v0.c0)>=(vt2.c1)) COLLATE NOCASE) ORDER BY CASE ((((((v0.c1)OR(vt2.c0)))AND(v0.c0)))AND(vt2.c0))  WHEN CAST(vt0.c0 AS INTEGER) THEN ((((((((((vt0.c0)OR(vt2.c1)))AND(v0.c2)))AND(v0.c2)))AND(v0.c0)))AND('2146225919')) END ASC  NULLS LAST;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))) COLLATE BINARY CROSS JOIN v0 ON ((((vt0.c0 IN ('382198455')), CASE WHEN vt0.c0 THEN '-2133440203' WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END))>=((((((v0.c1)AND(vt2.c0)))AND(vt2.c0)), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2))))) WHERE (((v0.c0)>=(vt2.c1)) COLLATE NOCASE) ORDER BY CASE ((((((v0.c1)OR(vt2.c0)))AND(v0.c0)))AND(vt2.c0))  WHEN CAST(vt0.c0 AS INTEGER) THEN ((((((((((vt0.c0)OR(vt2.c1)))AND(v0.c2)))AND(v0.c2)))AND(v0.c0)))AND('2146225919')) END ASC  NULLS LAST LIMIT 0x0;
SELECT ALL MAX(vt2.c1) FROM vt2 NATURAL JOIN vt0 WHERE (((CAST(vt2.c1 AS NUMERIC))-(((vt0.c0) BETWEEN (x'') AND (vt2.c0))))) ORDER BY (((((vt0.c0)OR(vt2.c0)), (('/') BETWEEN (vt2.c0) AND (vt2.c1)), (((vt0.c0, vt0.c0))=((vt2.c0, vt2.c0))), vt0.c0, vt2.c1 COLLATE RTRIM))>=((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)), (NOT (x'')), ((x'3f')AND(vt2.c1)), vt2.c0 COLLATE BINARY, (((vt0.c0))<>((vt2.c0)))))) DESC  NULLS LAST, ((vt2.c1)>(vt2.c1)) COLLATE RTRIM DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt2.c1) FROM vt2 NATURAL JOIN vt0 WHERE (((((CAST(vt2.c1 AS NUMERIC))-(((vt0.c0) BETWEEN (x'') AND (vt2.c0)))))AND(((((vt2.c1) BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN (((0.7685587825275139) ISNULL)) AND (vt0.c0 COLLATE RTRIM))))) ORDER BY (((((vt0.c0)OR(vt2.c0)), (('/') BETWEEN (vt2.c0) AND (vt2.c1)), (((vt0.c0, vt0.c0))==((vt2.c0, vt2.c0))), vt0.c0, vt2.c1 COLLATE RTRIM))>=((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)), (NOT (x'')), ((x'3f')AND(vt2.c1)), vt2.c0 COLLATE BINARY, (((vt0.c0))!=((vt2.c0)))))) DESC  NULLS LAST, ((vt2.c1)>(vt2.c1)) COLLATE RTRIM DESC  NULLS FIRST LIMIT 0X2;
SELECT * FROM vt2, v0, vt0 WHERE (v0.c3);
SELECT DISTINCT * FROM vt2, v0 NOT INDEXED, vt0 WHERE (v0.c3) ORDER BY CAST(((((((vt0.c0)OR(vt2.c0)))OR(v0.c0)))AND(0.7042363600258251)) AS INTEGER) DESC  NULLS LAST, UPPER(0x16c7e2b7 COLLATE RTRIM);
SELECT * FROM vt2, v0, vt0 WHERE (v0.c3);
SELECT DISTINCT * FROM vt2, v0 NOT INDEXED, vt0 WHERE (v0.c3) ORDER BY CAST(((((((vt0.c0)OR(vt2.c0)))OR(v0.c0)))AND(0.7042363600258251)) AS INTEGER) DESC  NULLS LAST, UPPER(0x16c7e2b7 COLLATE RTRIM);
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (CASE ((vt0.c0) IS TRUE)  WHEN (+ (vt0.c0)) THEN (((vt0.c0))!=((vt0.c0))) WHEN ((vt0.c0)<=(NULL)) THEN ((vt0.c0)/(vt0.c0)) WHEN ((vt0.c0) NOT BETWEEN (NULL) AND (vt0.c0)) THEN (('') NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN (+ (vt0.c0)) THEN (- (vt0.c0)) END) ORDER BY (- (((x'ffb0af') ISNULL))) ASC  NULLS FIRST, ((((vt0.c0)AND(((vt0.c0)>(vt0.c0)))))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) DESC;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((CASE ((vt0.c0) IS TRUE)  WHEN (+ (vt0.c0)) THEN (((vt0.c0))>((vt0.c0))) WHEN ((vt0.c0)==(NULL)) THEN ((vt0.c0)/(vt0.c0)) WHEN ((vt0.c0) NOT BETWEEN (NULL) AND (vt0.c0)) THEN (('') NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN (+ (vt0.c0)) THEN (- (vt0.c0)) END)AND((+ (vt0.c0 COLLATE NOCASE))))) ORDER BY (- (((x'ffb0af') ISNULL))) ASC  NULLS FIRST, ((((vt0.c0)AND(((vt0.c0)>(vt0.c0)))))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) DESC INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((((((((((vt0.c0))>=((vt0.c0))))AND(((vt0.c0) ISNULL))))AND(vt0.c0 COLLATE NOCASE)))AND((vt0.c0 IN ()))))AND(json_array_length(vt0.c0)))) ORDER BY (- (((x'ffb0af') ISNULL))) ASC  NULLS FIRST, ((((vt0.c0)AND(((vt0.c0)>(vt0.c0)))))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) DESC;
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE RTRIM) IS FALSE));
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE RTRIM) IS FALSE));
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE RTRIM) IS FALSE));
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE RTRIM) IS FALSE));
SELECT MAX(vt2.c0) FROM vt2, vt0, v0 WHERE (CAST((~ (v0.c0)) AS REAL));
SELECT DISTINCT MAX(vt2.c0) FROM vt2, vt0, v0 WHERE (((CAST((~ (v0.c0)) AS REAL))AND(((((vt2.c0) BETWEEN ('K') AND (vt2.c1)))AND(CAST('-2127914432' AS INTEGER)))))) ORDER BY ((v0.c3 COLLATE BINARY)!=(((v0.c3) IS FALSE))) DESC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON NULL LEFT OUTER JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 ELSE -993602160 END)) AND ((ROUND(v0.c3, vt0.c0)))) WHERE (vt2.c0) ORDER BY TYPEOF(v0.c1 COLLATE RTRIM) ASC, (((((((+ (v0.c2)))AND((+ (v0.c1)))))AND((((v0.c0))<((vt2.c0))))))AND('fPhtnB?Z'));
SELECT DISTINCT * FROM v0 LEFT OUTER JOIN vt2 ON NULL LEFT OUTER JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 ELSE 0xffffffffc4c6d590 END)) AND ((ROUND(v0.c3, vt0.c0)))) WHERE (vt2.c0) ORDER BY v0.c3 COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM v0 LEFT OUTER JOIN vt2 ON NULL LEFT OUTER JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 ELSE 0xffffffffc4c6d590 END)) AND ((ROUND(v0.c3, vt0.c0)))) WHERE (((((v0.c0)IS NOT('6몇')))>(v0.c1 COLLATE RTRIM))) ORDER BY v0.c3 COLLATE NOCASE;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON NULL LEFT OUTER JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 ELSE -993602160 END)) AND ((ROUND(v0.c3, vt0.c0)))) WHERE (vt2.c0) ORDER BY TYPEOF(v0.c1 COLLATE RTRIM) ASC, (((((((+ (v0.c2)))AND((+ (v0.c1)))))AND((((v0.c0))<((vt2.c0))))))AND('fPhtnB?Z'));
SELECT DISTINCT * FROM v0 LEFT OUTER JOIN vt2 ON NULL LEFT OUTER JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 ELSE 0xffffffffc4c6d590 END)) AND ((ROUND(v0.c3, vt0.c0)))) WHERE (vt2.c0) ORDER BY v0.c3 COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM v0 LEFT OUTER JOIN vt2 ON NULL LEFT OUTER JOIN vt0 ON (((v0.c1)) NOT BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 ELSE 0xffffffffc4c6d590 END)) AND ((ROUND(v0.c3, vt0.c0)))) WHERE (((((v0.c0)IS NOT('6몇')))>(v0.c1 COLLATE RTRIM))) ORDER BY v0.c3 COLLATE NOCASE;
SELECT ALL MAX(vt2.c1) FROM vt0, vt2, v0 WHERE ((NOT ((~ (0.5700879562368834))))) ORDER BY ((v0.c0 COLLATE BINARY)GLOB((- (vt2.c1)))), ((((vt2.c0)<=(v0.c2))) IS TRUE) ASC;
SELECT DISTINCT MAX(vt2.c1) FROM vt0, vt2, v0 WHERE ((NOT ((~ (0.5700879562368834))))) ORDER BY ((((vt2.c1, v0.c2)) BETWEEN ((v0.c3, v0.c1)) AND ((vt2.c1, vt0.c0))) IN (CAST(vt0.c0 AS REAL))) DESC LIMIT 0X1;
SELECT ALL MAX(v0.c3) FROM v0 INNER JOIN vt0 ON ((STRFTIME(vt2.c1, v0.c0, v0.c1, vt0.c0, v0.c3)) NOT NULL) NATURAL JOIN vt2 WHERE (((CASE v0.c1  WHEN 0.9461730306215901 THEN v0.c1 WHEN vt2.c0 THEN vt2.c0 END)|(CAST(vt2.c0 AS TEXT)))) ORDER BY ((vt2.c0 IN (vt2.c1)) IN (0Xffffffffaef6786b)), NULL ASC  NULLS LAST;
SELECT MAX(v0.c3) FROM v0 INNER JOIN vt0 ON ((STRFTIME(vt2.c1, v0.c0, v0.c1, vt0.c0, v0.c3)) NOT NULL) NATURAL JOIN vt2 WHERE (((((CASE v0.c1  WHEN 0.9461730306215901 THEN v0.c1 WHEN vt2.c0 THEN vt2.c0 END)|(CAST(vt2.c0 AS TEXT))))AND(CAST(((vt2.c0)!=(vt2.c1)) AS INTEGER)))) ORDER BY ((vt2.c0 IN (vt2.c1)) IN (-1359579029)), NULL ASC  NULLS LAST LIMIT 2 INTERSECT SELECT MAX(v0.c3) FROM v0 NOT INDEXED INNER JOIN vt0 ON ((STRFTIME(vt2.c1, v0.c0, v0.c1, vt0.c0, v0.c3)) NOT NULL) NATURAL JOIN vt2 WHERE (CASE vt0.c0 COLLATE NOCASE  WHEN ((('3', vt0.c0))<=((vt0.c0, v0.c1))) THEN ((vt2.c1) IS TRUE) WHEN ((vt2.c0) NOTNULL) THEN (v0.c0 IN (vt2.c1, v0.c2)) WHEN (- (vt2.c0)) THEN (- (vt2.c0)) ELSE CAST(vt0.c0 AS INTEGER) END) ORDER BY ((vt2.c0 IN (vt2.c1)) IN (-1359579029)), NULL ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt2 NATURAL JOIN vt0 WHERE (COALESCE(DISTINCT CAST(vt2.c1 AS REAL), (NOT (vt0.c0)), ((vt2.c1) BETWEEN (vt0.c0) AND (x''))));
SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE (COALESCE(DISTINCT CAST(vt2.c1 AS REAL), (NOT (vt0.c0)), ((vt2.c1) BETWEEN (vt0.c0) AND (x'')))) ORDER BY (+ (CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST, ((((((((json_array_length(vt2.c1, vt2.c0))AND(CAST(vt2.c0 AS REAL))))OR(CASE vt2.c1  WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)))OR((~ (vt2.c1)))))OR((- (vt2.c0)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE (CAST((+ (vt2.c1)) AS NUMERIC)) ORDER BY (+ (CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST, ((((((((json_array_length(vt2.c1, vt2.c0))AND(CAST(vt2.c0 AS REAL))))OR(CASE vt2.c1  WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)))OR((~ (vt2.c1)))))OR((- (vt2.c0)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt2 NATURAL JOIN vt0 WHERE (COALESCE(DISTINCT CAST(vt2.c1 AS REAL), (NOT (vt0.c0)), ((vt2.c1) BETWEEN (vt0.c0) AND (x''))));
SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE (COALESCE(DISTINCT CAST(vt2.c1 AS REAL), (NOT (vt0.c0)), ((vt2.c1) BETWEEN (vt0.c0) AND (x'')))) ORDER BY (+ (CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST, ((((((((json_array_length(vt2.c1, vt2.c0))AND(CAST(vt2.c0 AS REAL))))OR(CASE vt2.c1  WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)))OR((~ (vt2.c1)))))OR((- (vt2.c0)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE (CAST((+ (vt2.c1)) AS NUMERIC)) ORDER BY (+ (CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST, ((((((((json_array_length(vt2.c1, vt2.c0))AND(CAST(vt2.c0 AS REAL))))OR(CASE vt2.c1  WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END)))OR((~ (vt2.c1)))))OR((- (vt2.c0)))) DESC  NULLS FIRST;
SELECT MIN(v0.c3) FROM v0, vt0, vt2 WHERE (CAST(CASE WHEN v0.c3 THEN v0.c3 END AS TEXT));
SELECT ALL MIN(v0.c3) FROM v0, vt0, vt2 WHERE (CAST(CASE WHEN v0.c3 THEN v0.c3 END AS TEXT)) LIMIT 1 INTERSECT SELECT ALL MIN(v0.c3) FROM v0, vt0, vt2 WHERE (CASE WHEN (+ (x'')) THEN ((((((v0.c3)OR(v0.c2)))AND(vt2.c1)))OR(NULL)) WHEN 0.44691464233753 COLLATE NOCASE THEN CASE WHEN v0.c3 THEN v0.c3 ELSE v0.c3 END END) LIMIT 0X1;
SELECT ALL * FROM v0, vt0 WHERE ((v0.c3 IN (NULL, NULL)) COLLATE RTRIM);
SELECT DISTINCT * FROM v0, vt0 WHERE ((((v0.c3 IN (NULL, NULL)) COLLATE RTRIM)AND(1.625988069E9))) ORDER BY x'', v0.c3 DESC, CAST(((v0.c3)LIKE(vt0.c0)) AS INTEGER) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (TYPEOF(DISTINCT ((v0.c2) IS FALSE))) ORDER BY x'', v0.c3 DESC, CAST(((v0.c3)LIKE(vt0.c0)) AS INTEGER) LIMIT 0X0;
SELECT ALL * FROM v0, vt0 WHERE ((v0.c3 IN (NULL, NULL)) COLLATE RTRIM);
SELECT DISTINCT * FROM v0, vt0 WHERE ((((v0.c3 IN (NULL, NULL)) COLLATE RTRIM)AND(1.625988069E9))) ORDER BY x'', v0.c3 DESC, CAST(((v0.c3)LIKE(vt0.c0)) AS INTEGER) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (TYPEOF(DISTINCT ((v0.c2) IS FALSE))) ORDER BY x'', v0.c3 DESC, CAST(((v0.c3)LIKE(vt0.c0)) AS INTEGER) LIMIT 0X0;
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (v0.c0);
SELECT ALL * FROM vt0, v0 NATURAL JOIN vt2 WHERE (v0.c0) LIMIT 0X0;
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (v0.c0);
SELECT ALL * FROM vt0, v0 NATURAL JOIN vt2 WHERE (v0.c0) LIMIT 0X0;
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE ((+ (((vt0.c0) NOT BETWEEN (v0.c0) AND (vt2.c0)))));
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE ((((+ (((vt0.c0) NOT BETWEEN (v0.c0) AND (vt2.c0)))))AND(((vt2.c1) NOTNULL) COLLATE NOCASE))) INTERSECT SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE ((((((v0.c2) IS TRUE), (((vt2.c0)) BETWEEN ((v0.c1)) AND ((v0.c3)))))<=(((((v0.c2)) NOT BETWEEN ((0.34070468965071976)) AND ((v0.c3))), v0.c3 COLLATE BINARY))));
SELECT ALL * FROM vt0 WHERE (((vt0.c0) IS FALSE));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0) IS FALSE))AND(CAST((vt0.c0 IN ()) AS TEXT)))) ORDER BY CASE WHEN CAST(vt0.c0 AS INTEGER) THEN ((vt0.c0)/(vt0.c0)) WHEN COALESCE(DISTINCT vt0.c0, vt0.c0) THEN ((vt0.c0) IS FALSE) ELSE CAST(vt0.c0 AS NUMERIC) END  NULLS FIRST, x'9b' DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))) AND ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))) ORDER BY CASE WHEN CAST(vt0.c0 AS INTEGER) THEN ((vt0.c0)/(vt0.c0)) WHEN COALESCE(DISTINCT vt0.c0, vt0.c0) THEN ((vt0.c0) IS FALSE) ELSE CAST(vt0.c0 AS NUMERIC) END  NULLS FIRST, x'9b' DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((vt0.c0) IS FALSE));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0) IS FALSE))AND(CAST((vt0.c0 IN ()) AS TEXT)))) ORDER BY CASE WHEN CAST(vt0.c0 AS INTEGER) THEN ((vt0.c0)/(vt0.c0)) WHEN COALESCE(DISTINCT vt0.c0, vt0.c0) THEN ((vt0.c0) IS FALSE) ELSE CAST(vt0.c0 AS NUMERIC) END  NULLS FIRST, x'9b' DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))) AND ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))) ORDER BY CASE WHEN CAST(vt0.c0 AS INTEGER) THEN ((vt0.c0)/(vt0.c0)) WHEN COALESCE(DISTINCT vt0.c0, vt0.c0) THEN ((vt0.c0) IS FALSE) ELSE CAST(vt0.c0 AS NUMERIC) END  NULLS FIRST, x'9b' DESC  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c0, vt0.c0))>=((vt0.c0, vt0.c0))) COLLATE NOCASE) ORDER BY CAST(((vt0.c0) NOTNULL) AS NUMERIC) DESC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c0, vt0.c0))>=((vt0.c0, vt0.c0))) COLLATE NOCASE) ORDER BY (~ (((vt0.c0)<(vt0.c0)))) DESC  NULLS FIRST, json_remove(((vt0.c0)GLOB(vt0.c0)), vt0.c0) ASC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ('0.8371558124005088') ORDER BY (~ (((vt0.c0)<(vt0.c0)))) DESC  NULLS FIRST, json_remove(((vt0.c0)GLOB(vt0.c0)), vt0.c0) ASC  NULLS FIRST LIMIT 1;
SELECT MIN(v0.c1) FROM v0, vt0 WHERE (CAST(TIME(v0.c3, v0.c2, v0.c1, v0.c2) AS TEXT));
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE (CAST(TIME(v0.c3, v0.c2, v0.c1, v0.c2) AS TEXT)) ORDER BY CASE CAST(v0.c1 AS NUMERIC)  WHEN CAST(v0.c2 AS INTEGER) THEN vt0.c0 COLLATE RTRIM WHEN CASE WHEN v0.c0 THEN v0.c3 ELSE v0.c1 END THEN ((vt0.c0)<(v0.c2)) WHEN ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN ((vt0.c0) NOT BETWEEN (v0.c2) AND (v0.c3)) WHEN ((v0.c0)+(x'94bb')) THEN CASE WHEN v0.c0 THEN v0.c0 END END ASC, (((v0.c0)<=(v0.c0)) IN ()) INTERSECT SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE (((x'')==((((v0.c0, v0.c0)) NOT BETWEEN ((v0.c3, v0.c2)) AND ((vt0.c0, v0.c1)))))) ORDER BY CASE CAST(v0.c1 AS NUMERIC)  WHEN CAST(v0.c2 AS INTEGER) THEN vt0.c0 COLLATE RTRIM WHEN CASE WHEN v0.c0 THEN v0.c3 ELSE v0.c1 END THEN ((vt0.c0)<(v0.c2)) WHEN ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN ((vt0.c0) NOT BETWEEN (v0.c2) AND (v0.c3)) WHEN ((v0.c0)+(x'94bb')) THEN CASE WHEN v0.c0 THEN v0.c0 END END ASC, (((v0.c0)<=(v0.c0)) IN ());
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE (TYPEOF((((v0.c3, vt2.c0, vt2.c0)) BETWEEN ((vt0.c0, vt0.c0, v0.c0)) AND ((vt2.c0, v0.c0, 2.108053427E9))))) ORDER BY ((((((0X27ad2cac)AND(v0.c2)))AND(v0.c3)))IS(0.3738914102395514))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (TYPEOF((((v0.c3, vt2.c0, vt2.c0)) BETWEEN ((vt0.c0, vt0.c0, v0.c0)) AND ((vt2.c0, v0.c0, 2.108053427E9))))) ORDER BY (+ (((v0.c1)*(vt0.c0)))) ASC LIMIT 0X0;
SELECT * FROM vt0 NOT INDEXED, v0, vt2 WHERE ((+ (SQLITE_VERSION())));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((+ (SQLITE_VERSION())))AND(CAST((v0.c3 IN (v0.c3, vt2.c1, v0.c1)) AS BLOB)))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (CAST(CASE WHEN vt2.c1 THEN v0.c2 ELSE vt0.c0 END AS NUMERIC)) LIMIT 1;
SELECT * FROM vt0 NOT INDEXED, v0, vt2 WHERE ((+ (SQLITE_VERSION())));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((+ (SQLITE_VERSION())))AND(CAST((v0.c3 IN (v0.c3, vt2.c1, v0.c1)) AS BLOB)))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (CAST(CASE WHEN vt2.c1 THEN v0.c2 ELSE vt0.c0 END AS NUMERIC)) LIMIT 1;
SELECT ALL COUNT(*) FROM vt2 LEFT OUTER JOIN vt0 ON CAST(vt2.c1 COLLATE RTRIM AS NUMERIC) WHERE (((LIKELY(DISTINCT -748918165)) IS FALSE)) ORDER BY (((vt2.c0)) NOT BETWEEN ((((vt2.c0)==(vt2.c0)))) AND ((CAST(NULL AS REAL)))) ASC  NULLS FIRST, ((CAST(vt2.c0 AS TEXT)) NOTNULL)  NULLS LAST;
SELECT COUNT(*) FROM vt2 INNER JOIN vt0 ON CAST(vt2.c1 COLLATE RTRIM AS NUMERIC) WHERE (((LIKELY(DISTINCT -748918165)) IS FALSE)) ORDER BY TRIM(DISTINCT (- (vt2.c1))) DESC, LOWER((vt0.c0 IN ()))  NULLS LAST INTERSECT SELECT ALL COUNT(*) FROM vt2 INNER JOIN vt0 ON CAST(vt2.c1 COLLATE RTRIM AS NUMERIC) WHERE ((((- (vt2.c1)))<((vt0.c0 IN (vt2.c1, vt2.c0))))) ORDER BY TRIM(DISTINCT (- (vt2.c1))) DESC, LOWER((vt0.c0 IN ()))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0, v0, vt2 WHERE (CAST((NOT (v0.c0)) AS BLOB)) ORDER BY ((((((v0.c3)AND(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0)GLOB(v0.c0)))))AND(CAST(NULL AS BLOB)));
SELECT COUNT(*) FROM vt0, v0, vt2 WHERE (CAST((NOT (v0.c0)) AS BLOB)) ORDER BY ((v0.c2)/(vt2.c1)) COLLATE BINARY COLLATE RTRIM DESC  NULLS LAST, ((((vt2.c1)AND(v0.c0)))AND(v0.c0)) COLLATE NOCASE  NULLS FIRST, CAST(CAST(v0.c3 AS INTEGER) AS INTEGER)  NULLS FIRST INTERSECT SELECT COUNT(*) FROM vt0, v0, vt2 WHERE (v0.c3) ORDER BY ((v0.c2)/(vt2.c1)) COLLATE BINARY COLLATE RTRIM DESC  NULLS LAST, ((((vt2.c1)AND(v0.c0)))AND(v0.c0)) COLLATE NOCASE  NULLS FIRST, CAST(CAST(v0.c3 AS INTEGER) AS INTEGER)  NULLS FIRST;
SELECT ALL MAX(vt2.c0) FROM vt2, vt0 CROSS JOIN v0 ON (NOT (0.021275282963024944)) WHERE (0.17297549738390294);
SELECT DISTINCT MAX(vt2.c0) FROM vt2, vt0 CROSS JOIN v0 ON (NOT (0.021275282963024944)) WHERE (((0.17297549738390294)AND(NULL))) ORDER BY ((v0.c2) IS TRUE) ASC INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM vt2 NOT INDEXED, vt0 CROSS JOIN v0 ON (NOT (0.021275282963024944)) WHERE (((CASE v0.c0  WHEN v0.c1 THEN v0.c2 END)|(CASE v0.c3  WHEN x'4a9b' THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN vt2.c1 WHEN NULL THEN v0.c1 END))) ORDER BY ((v0.c2) IS TRUE) ASC;
SELECT ALL * FROM v0 WHERE (1673825515) ORDER BY CASE WHEN '952870174' THEN v0.c0 COLLATE RTRIM ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3)) END ASC, ((((CAST(v0.c3 AS REAL))AND(CAST(v0.c0 AS BLOB))))OR((NOT (v0.c0))))  NULLS LAST;
SELECT * FROM v0 WHERE (0x63c48ceb) ORDER BY CASE WHEN '952870174' THEN v0.c0 COLLATE RTRIM ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3)) END ASC, ((((CAST(v0.c3 AS REAL))AND(CAST(v0.c0 AS BLOB))))OR((NOT (v0.c0))))  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE (((((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(((v0.c1)&(v0.c3)))))OR(((v0.c1)>>(v0.c0)))))AND(((v0.c1)%(v0.c1))))) ORDER BY CASE WHEN '952870174' THEN v0.c0 COLLATE RTRIM ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3)) END ASC, ((((CAST(v0.c3 AS REAL))AND(CAST(v0.c0 AS BLOB))))OR((NOT (v0.c0))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (1673825515) ORDER BY CASE WHEN '952870174' THEN v0.c0 COLLATE RTRIM ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3)) END ASC, ((((CAST(v0.c3 AS REAL))AND(CAST(v0.c0 AS BLOB))))OR((NOT (v0.c0))))  NULLS LAST;
SELECT * FROM v0 WHERE (0x63c48ceb) ORDER BY CASE WHEN '952870174' THEN v0.c0 COLLATE RTRIM ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3)) END ASC, ((((CAST(v0.c3 AS REAL))AND(CAST(v0.c0 AS BLOB))))OR((NOT (v0.c0))))  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE (((((((((((v0.c1)AND(v0.c1)))OR(v0.c0)))AND(((v0.c1)&(v0.c3)))))OR(((v0.c1)>>(v0.c0)))))AND(((v0.c1)%(v0.c1))))) ORDER BY CASE WHEN '952870174' THEN v0.c0 COLLATE RTRIM ELSE ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3)) END ASC, ((((CAST(v0.c3 AS REAL))AND(CAST(v0.c0 AS BLOB))))OR((NOT (v0.c0))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CAST(v0.c1 AS REAL) COLLATE NOCASE);
SELECT ALL * FROM v0 WHERE (CAST(v0.c1 AS REAL) COLLATE NOCASE) LIMIT 1;
SELECT ALL * FROM v0 WHERE (CAST(v0.c1 AS REAL) COLLATE NOCASE);
SELECT ALL * FROM v0 WHERE (CAST(v0.c1 AS REAL) COLLATE NOCASE) LIMIT 1;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (LOWER(((vt2.c0)/(vt2.c1)))) ORDER BY CAST(json_insert(vt2.c1, vt2.c0, vt2.c0) AS NUMERIC), (((NULL))>=(('1165436722' COLLATE RTRIM))) ASC  NULLS LAST;
SELECT MAX(vt2.c1) FROM vt2 WHERE (((LOWER(((vt2.c0)/(vt2.c1))))AND(((((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) ISNULL)))) ORDER BY ((((vt2.c1) BETWEEN (vt2.c0) AND ('(s.8}Gm')))-(NULL))  NULLS FIRST, vt2.c0 DESC  NULLS FIRST INTERSECT SELECT MAX(vt2.c1) FROM vt2 WHERE ((((vt2.c0, (vt2.c0 IN (vt2.c1, vt2.c1)), ((vt2.c0)IS NOT(vt2.c0))))>=((((vt2.c0) IS TRUE), ((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)), ((vt2.c0) NOT NULL))))) ORDER BY ((((vt2.c1) BETWEEN (vt2.c0) AND ('(s.8}Gm')))-(NULL))  NULLS FIRST, vt2.c0 DESC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 WHERE ((((~ (vt0.c0)))IS NOT(vt2.c1 COLLATE BINARY))) ORDER BY vt0.c0;
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((~ (vt0.c0)))IS NOT(vt2.c1 COLLATE BINARY))) ORDER BY vt0.c0 LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE ((LOWER(vt2.c1) IN ('0.4284493645082942'))) ORDER BY vt0.c0 LIMIT 0X1;
SELECT ALL * FROM vt2, vt0 WHERE ((((~ (vt0.c0)))IS NOT(vt2.c1 COLLATE BINARY))) ORDER BY vt0.c0;
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((~ (vt0.c0)))IS NOT(vt2.c1 COLLATE BINARY))) ORDER BY vt0.c0 LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE ((LOWER(vt2.c1) IN ('0.4284493645082942'))) ORDER BY vt0.c0 LIMIT 0X1;
SELECT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (UPPER(((vt2.c1)LIKE(vt2.c1))));
SELECT ALL * FROM v0, vt2 NATURAL JOIN vt0 WHERE (UPPER(((vt2.c1)LIKE(vt2.c1)))) LIMIT 2;
SELECT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (UPPER(((vt2.c1)LIKE(vt2.c1))));
SELECT ALL * FROM v0, vt2 NATURAL JOIN vt0 WHERE (UPPER(((vt2.c1)LIKE(vt2.c1)))) LIMIT 2;
SELECT * FROM vt2, vt0 WHERE (CAST(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) AS REAL)) ORDER BY CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt0.c0)) AS REAL)  NULLS LAST, vt0.c0, ((((vt2.c1) BETWEEN (vt2.c0) AND (x'8821a3'))) NOT NULL)  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (CAST(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) AS REAL)) ORDER BY ((((vt0.c0) ISNULL)) BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))) ASC, (((((((((vt2.c1 IN (vt0.c0)))OR(CAST(vt2.c1 AS BLOB))))OR((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))))))AND('2077826563')))AND(((vt2.c1)*(vt0.c0)))) ASC LIMIT 2 INTERSECT SELECT * FROM vt2, vt0 WHERE ((((vt2.c1 IN ())) BETWEEN ((((vt2.c0, x'75', vt2.c0))<>((vt0.c0, vt0.c0, vt2.c1)))) AND (((x'')IS(vt2.c1))))) ORDER BY ((((vt0.c0) ISNULL)) BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))) ASC, (((((((((vt2.c1 IN (vt0.c0)))OR(CAST(vt2.c1 AS BLOB))))OR((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))))))AND('2077826563')))AND(((vt2.c1)*(vt0.c0)))) ASC LIMIT 0X2;
SELECT * FROM vt2, vt0 WHERE (CAST(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) AS REAL)) ORDER BY CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt0.c0)) AS REAL)  NULLS LAST, vt0.c0, ((((vt2.c1) BETWEEN (vt2.c0) AND (x'8821a3'))) NOT NULL)  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (CAST(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) AS REAL)) ORDER BY ((((vt0.c0) ISNULL)) BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))) ASC, (((((((((vt2.c1 IN (vt0.c0)))OR(CAST(vt2.c1 AS BLOB))))OR((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))))))AND('2077826563')))AND(((vt2.c1)*(vt0.c0)))) ASC LIMIT 2 INTERSECT SELECT * FROM vt2, vt0 WHERE ((((vt2.c1 IN ())) BETWEEN ((((vt2.c0, x'75', vt2.c0))<>((vt0.c0, vt0.c0, vt2.c1)))) AND (((x'')IS(vt2.c1))))) ORDER BY ((((vt0.c0) ISNULL)) BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))) ASC, (((((((((vt2.c1 IN (vt0.c0)))OR(CAST(vt2.c1 AS BLOB))))OR((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))))))AND('2077826563')))AND(((vt2.c1)*(vt0.c0)))) ASC LIMIT 0X2;
SELECT ALL * FROM v0 WHERE ((((v0.c0)>(v0.c0)) IN (COALESCE(DISTINCT v0.c1, v0.c2, v0.c0), ((v0.c0)||(v0.c3)))));
SELECT ALL * FROM v0 WHERE ((((((v0.c0)>(v0.c0)) IN (COALESCE(DISTINCT v0.c1, v0.c2, v0.c0))))AND(((((((v0.c1, '1165436722', v0.c2)) NOT BETWEEN ((v0.c0, v0.c3, v0.c2)) AND ((v0.c3, v0.c3, v0.c3))), (v0.c1 IN ()), (v0.c1 IN (v0.c1)), (((v0.c2))>=((v0.c3)))))<>((((((v0.c2)AND(NULL)))AND(v0.c3)), CAST(v0.c2 AS REAL), v0.c2, ((v0.c0)-(v0.c2)))))))) ORDER BY (+ ((+ (v0.c3)))) DESC  NULLS FIRST, ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))>(((v0.c2) ISNULL))) DESC LIMIT 2 INTERSECT SELECT ALL * FROM v0 WHERE (((v0.c3)<<(v0.c1)) COLLATE NOCASE) ORDER BY (+ ((+ (v0.c3)))) DESC  NULLS FIRST, ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))>(((v0.c2) ISNULL))) DESC LIMIT 0X2;
SELECT ALL * FROM v0 WHERE ((((v0.c0)>(v0.c0)) IN (COALESCE(DISTINCT v0.c1, v0.c2, v0.c0), ((v0.c0)||(v0.c3)))));
SELECT ALL * FROM v0 WHERE ((((((v0.c0)>(v0.c0)) IN (COALESCE(DISTINCT v0.c1, v0.c2, v0.c0))))AND(((((((v0.c1, '1165436722', v0.c2)) NOT BETWEEN ((v0.c0, v0.c3, v0.c2)) AND ((v0.c3, v0.c3, v0.c3))), (v0.c1 IN ()), (v0.c1 IN (v0.c1)), (((v0.c2))>=((v0.c3)))))<>((((((v0.c2)AND(NULL)))AND(v0.c3)), CAST(v0.c2 AS REAL), v0.c2, ((v0.c0)-(v0.c2)))))))) ORDER BY (+ ((+ (v0.c3)))) DESC  NULLS FIRST, ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))>(((v0.c2) ISNULL))) DESC LIMIT 2 INTERSECT SELECT ALL * FROM v0 WHERE (((v0.c3)<<(v0.c1)) COLLATE NOCASE) ORDER BY (+ ((+ (v0.c3)))) DESC  NULLS FIRST, ((((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))>(((v0.c2) ISNULL))) DESC LIMIT 0X2;
SELECT ALL * FROM v0, vt0 WHERE ((((('*') BETWEEN (v0.c2) AND (v0.c0))) IS TRUE));
SELECT * FROM v0, vt0 WHERE ((((('*') BETWEEN (v0.c2) AND (v0.c0))) IS TRUE)) ORDER BY CAST(((((((v0.c3)AND(v0.c0)))AND(v0.c2)))OR(v0.c3)) AS NUMERIC) DESC  NULLS LAST, CASE WHEN ((v0.c3)>(v0.c2)) THEN (+ (v0.c3)) WHEN (((v0.c1, v0.c0, v0.c3, vt0.c0)) NOT BETWEEN ((v0.c0, v0.c3, v0.c1, v0.c1)) AND ((vt0.c0, v0.c0, v0.c3, v0.c2))) THEN ((vt0.c0)IS(v0.c1)) ELSE (vt0.c0 IN ()) END ASC, v0.c2  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM v0, vt0 WHERE (((((v0.c2) IS TRUE)) BETWEEN ((+ (v0.c2))) AND ((- (v0.c3))))) ORDER BY CAST(((((((v0.c3)AND(v0.c0)))AND(v0.c2)))OR(v0.c3)) AS NUMERIC) DESC  NULLS LAST, CASE WHEN ((v0.c3)>(v0.c2)) THEN (+ (v0.c3)) WHEN (((v0.c1, v0.c0, v0.c3, vt0.c0)) NOT BETWEEN ((v0.c0, v0.c3, v0.c1, v0.c1)) AND ((vt0.c0, v0.c0, v0.c3, v0.c2))) THEN ((vt0.c0)IS(v0.c1)) ELSE (vt0.c0 IN ()) END ASC, v0.c2  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE ((((('*') BETWEEN (v0.c2) AND (v0.c0))) IS TRUE));
SELECT * FROM v0, vt0 WHERE ((((('*') BETWEEN (v0.c2) AND (v0.c0))) IS TRUE)) ORDER BY CAST(((((((v0.c3)AND(v0.c0)))AND(v0.c2)))OR(v0.c3)) AS NUMERIC) DESC  NULLS LAST, CASE WHEN ((v0.c3)>(v0.c2)) THEN (+ (v0.c3)) WHEN (((v0.c1, v0.c0, v0.c3, vt0.c0)) NOT BETWEEN ((v0.c0, v0.c3, v0.c1, v0.c1)) AND ((vt0.c0, v0.c0, v0.c3, v0.c2))) THEN ((vt0.c0)IS(v0.c1)) ELSE (vt0.c0 IN ()) END ASC, v0.c2  NULLS FIRST LIMIT 0X0 INTERSECT SELECT * FROM v0, vt0 WHERE (((((v0.c2) IS TRUE)) BETWEEN ((+ (v0.c2))) AND ((- (v0.c3))))) ORDER BY CAST(((((((v0.c3)AND(v0.c0)))AND(v0.c2)))OR(v0.c3)) AS NUMERIC) DESC  NULLS LAST, CASE WHEN ((v0.c3)>(v0.c2)) THEN (+ (v0.c3)) WHEN (((v0.c1, v0.c0, v0.c3, vt0.c0)) NOT BETWEEN ((v0.c0, v0.c3, v0.c1, v0.c1)) AND ((vt0.c0, v0.c0, v0.c3, v0.c2))) THEN ((vt0.c0)IS(v0.c1)) ELSE (vt0.c0 IN ()) END ASC, v0.c2  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 INNER JOIN vt2 ON ((0.6145202467451044) ISNULL) WHERE (((((vt2.c1))<((vt0.c0))) IN ())) ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c0 END) NOT NULL) ASC  NULLS LAST, CASE WHEN vt0.c0 THEN vt0.c0 WHEN CAST(vt0.c0 AS BLOB) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END ELSE ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))OR('-2116778949')) END DESC;
SELECT * FROM vt0 INNER JOIN vt2 ON ((0.6145202467451044) ISNULL) WHERE (((((vt2.c1))<((vt0.c0))) IN ())) ORDER BY ((0.4304746680050925) BETWEEN ((vt0.c0 IN ())) AND (((vt0.c0) ISNULL))) ASC, CAST((- (vt0.c0)) AS INTEGER) DESC  NULLS FIRST INTERSECT SELECT * FROM vt0 INNER JOIN vt2 ON ((0.6145202467451044) ISNULL) WHERE (((((vt0.c0) NOTNULL))>(ABS(DISTINCT vt2.c0)))) ORDER BY ((0.4304746680050925) BETWEEN ((vt0.c0 IN ())) AND (((vt0.c0) ISNULL))) ASC, CAST((- (vt0.c0)) AS INTEGER) DESC  NULLS FIRST;
SELECT * FROM vt0 INNER JOIN vt2 ON ((0.6145202467451044) ISNULL) WHERE (((((vt2.c1))<((vt0.c0))) IN ())) ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c0 END) NOT NULL) ASC  NULLS LAST, CASE WHEN vt0.c0 THEN vt0.c0 WHEN CAST(vt0.c0 AS BLOB) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END ELSE ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))OR('-2116778949')) END DESC;
SELECT * FROM vt0 INNER JOIN vt2 ON ((0.6145202467451044) ISNULL) WHERE (((((vt2.c1))<((vt0.c0))) IN ())) ORDER BY ((0.4304746680050925) BETWEEN ((vt0.c0 IN ())) AND (((vt0.c0) ISNULL))) ASC, CAST((- (vt0.c0)) AS INTEGER) DESC  NULLS FIRST INTERSECT SELECT * FROM vt0 INNER JOIN vt2 ON ((0.6145202467451044) ISNULL) WHERE (((((vt0.c0) NOTNULL))>(ABS(DISTINCT vt2.c0)))) ORDER BY ((0.4304746680050925) BETWEEN ((vt0.c0 IN ())) AND (((vt0.c0) ISNULL))) ASC, CAST((- (vt0.c0)) AS INTEGER) DESC  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE ((+ (json_valid(vt0.c0))));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((+ (json_valid(vt0.c0)))) ORDER BY ((vt2.c0)OR(0.8886624000749642)) LIMIT 0 INTERSECT SELECT * FROM vt0, v0, vt2 WHERE (((((((((vt2.c1)OR(v0.c0)))AND(vt0.c0)))AND(vt2.c0)))*(((v0.c0) BETWEEN (vt0.c0) AND (vt2.c1))))) ORDER BY ((vt2.c0)OR(0.8886624000749642)) LIMIT 0;
SELECT * FROM vt0, v0, vt2 WHERE ((+ (json_valid(vt0.c0))));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((+ (json_valid(vt0.c0)))) ORDER BY ((vt2.c0)OR(0.8886624000749642)) LIMIT 0 INTERSECT SELECT * FROM vt0, v0, vt2 WHERE (((((((((vt2.c1)OR(v0.c0)))AND(vt0.c0)))AND(vt2.c0)))*(((v0.c0) BETWEEN (vt0.c0) AND (vt2.c1))))) ORDER BY ((vt2.c0)OR(0.8886624000749642)) LIMIT 0;
SELECT * FROM vt2 NATURAL JOIN v0 WHERE (LOWER((v0.c2 IN ()))) ORDER BY '
lOc' ASC  NULLS FIRST;
SELECT * FROM vt2 NATURAL JOIN v0 WHERE (LOWER((v0.c2 IN ()))) ORDER BY '
lOc' ASC  NULLS FIRST LIMIT 0X2;
SELECT * FROM vt2 NATURAL JOIN v0 WHERE (LOWER((v0.c2 IN ()))) ORDER BY '
lOc' ASC  NULLS FIRST;
SELECT * FROM vt2 NATURAL JOIN v0 WHERE (LOWER((v0.c2 IN ()))) ORDER BY '
lOc' ASC  NULLS FIRST LIMIT 0X2;
SELECT MAX(v0.c2) FROM v0, vt0 WHERE (v0.c1);
SELECT MAX(v0.c2) FROM v0, vt0 WHERE (((v0.c1)AND(((json_array_length(v0.c1))<<(vt0.c0 COLLATE NOCASE))))) LIMIT 0x0;
SELECT ALL MIN(v0.c0) FROM v0 WHERE (CASE WHEN ABS(v0.c0) THEN (- (v0.c0)) END);
SELECT MIN(v0.c0) FROM v0 WHERE (CASE WHEN ABS(v0.c0) THEN (- (v0.c0)) END) INTERSECT SELECT MIN(v0.c0) FROM v0 WHERE (((((v0.c0 COLLATE RTRIM)OR(CASE WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END)))OR(NULL)));
SELECT * FROM v0, vt0, vt2 WHERE (CASE WHEN ((vt2.c1) ISNULL) THEN '1360437288' WHEN vt2.c0 COLLATE NOCASE THEN ((vt2.c1) NOTNULL) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND ('761724397')) THEN (- (vt0.c0)) END);
SELECT ALL * FROM v0, vt0, vt2 WHERE (((CASE WHEN ((vt2.c1) ISNULL) THEN '1360437288' WHEN vt2.c0 COLLATE NOCASE THEN ((vt2.c1) NOTNULL) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND ('761724397')) THEN (- (vt0.c0)) END)AND((((((((((((v0.c1 IN ()))AND((NOT (v0.c1)))))AND(CAST(vt2.c1 AS BLOB))))AND((~ (v0.c3)))))OR(x'')))AND(((v0.c2) NOT BETWEEN (-7.69760503E8) AND (vt2.c0)))))));
SELECT * FROM v0, vt0, vt2 WHERE (CASE WHEN ((vt2.c1) ISNULL) THEN '1360437288' WHEN vt2.c0 COLLATE NOCASE THEN ((vt2.c1) NOTNULL) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND ('761724397')) THEN (- (vt0.c0)) END);
SELECT ALL * FROM v0, vt0, vt2 WHERE (((CASE WHEN ((vt2.c1) ISNULL) THEN '1360437288' WHEN vt2.c0 COLLATE NOCASE THEN ((vt2.c1) NOTNULL) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND ('761724397')) THEN (- (vt0.c0)) END)AND((((((((((((v0.c1 IN ()))AND((NOT (v0.c1)))))AND(CAST(vt2.c1 AS BLOB))))AND((~ (v0.c3)))))OR(x'')))AND(((v0.c2) NOT BETWEEN (-7.69760503E8) AND (vt2.c0)))))));
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c2)-(v0.c3)))-(((((((NULL)AND(v0.c1)))AND(v0.c0)))OR(v0.c0))))) ORDER BY '737330255' ASC  NULLS LAST, ((NULL)*(((v0.c2)LIKE(v0.c1))))  NULLS FIRST, CAST(((v0.c1)GLOB(v0.c2)) AS TEXT)  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE (((((v0.c2)-(v0.c3)))-(((((((NULL)AND(v0.c1)))AND(v0.c0)))OR(v0.c0))))) ORDER BY '737330255' ASC  NULLS LAST, ((NULL)*(((v0.c2)LIKE(v0.c1))))  NULLS FIRST, CAST(((v0.c1)GLOB(v0.c2)) AS TEXT)  NULLS FIRST INTERSECT SELECT COUNT(*) FROM v0 WHERE (((v0.c2) IS FALSE)) ORDER BY '737330255' ASC  NULLS LAST, ((NULL)*(((v0.c2)LIKE(v0.c1))))  NULLS FIRST, CAST(((v0.c1)GLOB(v0.c2)) AS TEXT)  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt2 INNER JOIN v0 ON CASE WHEN vt2.c0 COLLATE NOCASE THEN QUOTE(v0.c1) WHEN ((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)) THEN CASE vt2.c1  WHEN v0.c2 THEN v0.c0 ELSE vt2.c0 END END WHERE (((vt2.c1)*(vt2.c1)) COLLATE RTRIM) ORDER BY ((((vt2.c0) IS TRUE)) NOT BETWEEN ((v0.c0 IN ())) AND ((((-226732928, v0.c0, v0.c3))=((v0.c1, v0.c0, vt2.c0)))))  NULLS FIRST;
SELECT COUNT(*) FROM vt2 INNER JOIN v0 ON CASE WHEN vt2.c0 COLLATE NOCASE THEN QUOTE(v0.c1) WHEN ((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)) THEN CASE vt2.c1  WHEN v0.c2 THEN v0.c0 ELSE vt2.c0 END END WHERE (((((vt2.c1)*(vt2.c1)) COLLATE RTRIM)AND(CASE WHEN ((v0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)) THEN (v0.c1 IN (v0.c3)) WHEN (v0.c0 IN (v0.c1, v0.c0)) THEN LIKELIHOOD(v0.c3, NULL) END))) ORDER BY (NOT (vt2.c1)) COLLATE BINARY ASC, NULL ASC  NULLS LAST, ((CAST(v0.c1 AS BLOB))GLOB(((v0.c2) NOT NULL))) DESC  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE (json_valid((- (vt2.c1))));
SELECT ALL * FROM vt0, vt2 WHERE (json_valid((- (vt2.c1)))) LIMIT 0X0;
SELECT ALL * FROM vt0, vt2 WHERE (json_valid((- (vt2.c1))));
SELECT ALL * FROM vt0, vt2 WHERE (json_valid((- (vt2.c1)))) LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE (((((((CAST(vt2.c1 AS BLOB))OR((((vt2.c1, vt2.c1, -551752042)) NOT BETWEEN ((vt2.c0, vt2.c0, vt2.c0)) AND ((0Xffffffffda94f284, vt2.c0, vt2.c1))))))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))))OR((vt2.c0 IN ())))) ORDER BY vt2.c0 COLLATE NOCASE ASC;
SELECT * FROM vt2 WHERE (((((((CAST(vt2.c1 AS BLOB))OR((((vt2.c1, vt2.c1, -551752042)) NOT BETWEEN ((vt2.c0, vt2.c0, vt2.c0)) AND ((-627772796, vt2.c0, vt2.c1))))))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))))OR((vt2.c0 IN ())))) ORDER BY vt2.c0 COLLATE NOCASE ASC;
SELECT ALL * FROM vt2 WHERE (((((((CAST(vt2.c1 AS BLOB))OR((((vt2.c1, vt2.c1, -551752042)) NOT BETWEEN ((vt2.c0, vt2.c0, vt2.c0)) AND ((0Xffffffffda94f284, vt2.c0, vt2.c1))))))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))))OR((vt2.c0 IN ())))) ORDER BY vt2.c0 COLLATE NOCASE ASC;
SELECT * FROM vt2 WHERE (((((((CAST(vt2.c1 AS BLOB))OR((((vt2.c1, vt2.c1, -551752042)) NOT BETWEEN ((vt2.c0, vt2.c0, vt2.c0)) AND ((-627772796, vt2.c0, vt2.c1))))))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))))OR((vt2.c0 IN ())))) ORDER BY vt2.c0 COLLATE NOCASE ASC;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))) NOT NULL)) ORDER BY LOWER(((vt0.c0)IS NOT(vt0.c0)))  NULLS LAST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 0.5032010521217105 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)>=((('P')>=(vt0.c0))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))) NOT NULL)) ORDER BY '-405289896'  NULLS LAST, (~ (vt0.c0))  NULLS FIRST INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c0, vt0.c0, NULL)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0))))AND(((vt0.c0)/(vt0.c0))))) ORDER BY '-405289896'  NULLS LAST, (~ (vt0.c0))  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE ((v0.c0 IN (v0.c3)) COLLATE RTRIM) ORDER BY (0.8451797776065351 IN ()) ASC  NULLS LAST, '-2093576982' ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 WHERE ((((v0.c0 IN (v0.c3)) COLLATE RTRIM)AND(v0.c1))) ORDER BY ((v0.c2 IN (vt2.c0, v0.c2)) IN (((v0.c2) NOT BETWEEN (v0.c2) AND ('맒EI8-,')))) ASC  NULLS FIRST LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (json_array(((((v0.c3)AND(v0.c0)))AND(v0.c1)), CASE v0.c2  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN vt2.c0 ELSE v0.c2 END, v0.c1 COLLATE BINARY)) ORDER BY ((v0.c2 IN (vt2.c0, v0.c2)) IN (((v0.c2) NOT BETWEEN (v0.c2) AND ('맒EI8-,')))) ASC  NULLS FIRST LIMIT 0x3;
SELECT * FROM v0, vt2 WHERE ((v0.c0 IN (v0.c3)) COLLATE RTRIM) ORDER BY (0.8451797776065351 IN ()) ASC  NULLS LAST, '-2093576982' ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt2, v0 WHERE (((COALESCE(v0.c3, vt2.c0)) NOTNULL)) ORDER BY ((((((((v0.c3)LIKE(v0.c1)))OR(CASE WHEN vt2.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c3 END)))AND((v0.c2 IN ()))))AND(IFNULL(v0.c2, 0.6318632499265926)))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE (((((COALESCE(v0.c3, vt2.c0)) NOTNULL))AND(((((((((((((v0.c2)%(v0.c1)))OR(IFNULL(v0.c3, v0.c0))))OR(((v0.c2)/(v0.c3)))))OR(CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 END)))OR((+ (v0.c0)))))OR((NOT (v0.c3))))))) ORDER BY ((((((((v0.c3)LIKE(v0.c1)))OR(CASE WHEN vt2.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c3 END)))AND((v0.c2 IN ()))))AND(IFNULL(v0.c2, 0.6318632499265926)))  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE (((((((vt2.c0) NOTNULL))OR(((v0.c2)GLOB(v0.c1)))))OR(TYPEOF(DISTINCT v0.c1)))) ORDER BY ((((((((v0.c3)LIKE(v0.c1)))OR(CASE WHEN vt2.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c3 END)))AND((v0.c2 IN ()))))AND(IFNULL(v0.c2, 0.6318632499265926)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0, vt2 WHERE (((((((CASE vt2.c0  WHEN v0.c3 THEN vt2.c0 ELSE '-1198193517' END)OR((+ (v0.c1)))))AND(CAST(vt2.c0 AS NUMERIC))))OR(((((v0.c1)OR(vt2.c0)))AND(v0.c1))))) ORDER BY v0.c1 ASC;
SELECT COUNT(*) FROM v0, vt2 WHERE (((((((((CASE vt2.c0  WHEN v0.c3 THEN vt2.c0 ELSE '-1198193517' END)OR((+ (v0.c1)))))AND(CAST(vt2.c0 AS NUMERIC))))OR(((((v0.c1)OR(vt2.c0)))AND(v0.c1)))))AND(v0.c2))) ORDER BY ((((v0.c3 IN (v0.c0))))==((v0.c2 COLLATE BINARY)))  NULLS FIRST LIMIT 0X2 INTERSECT SELECT COUNT(*) FROM v0, vt2 WHERE (v0.c2) ORDER BY ((((v0.c3 IN (v0.c0))))==((v0.c2 COLLATE BINARY)))  NULLS FIRST LIMIT 2;
SELECT ALL MIN(v0.c1) FROM vt2, v0 WHERE ((((~ (v0.c0))) NOT NULL)) ORDER BY ((PRINTF(v0.c0))GLOB(v0.c3))  NULLS LAST;
SELECT MIN(v0.c1) FROM vt2, v0 WHERE ((((((~ (v0.c0))) NOT NULL))AND(CASE ((v0.c3) ISNULL)  WHEN ((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2)) THEN CAST(vt2.c0 AS REAL) WHEN NULL THEN ((v0.c3)IS(vt2.c1)) WHEN LIKELY(DISTINCT v0.c2) THEN v0.c2 ELSE (~ (v0.c3)) END))) ORDER BY ((((((((((v0.c3) NOTNULL))OR(v0.c3)))OR(vt2.c1)))AND((((NULL))<((v0.c1))))))AND(json_valid(v0.c1)))  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE (CAST((2.126815385E9 IN (vt2.c0)) AS REAL));
SELECT * FROM v0, vt2 WHERE (((CAST((2.126815385E9 IN (vt2.c0)) AS REAL))AND(UNLIKELY(DISTINCT vt2.c0)))) ORDER BY ((((vt2.c1)*(v0.c1)))&(((v0.c2) BETWEEN (v0.c0) AND (NULL)))) DESC, (((v0.c1)) BETWEEN ((vt2.c0)) AND ((v0.c0))) COLLATE BINARY, ((CAST(vt2.c0 AS BLOB))>((- (v0.c2))));
SELECT * FROM v0, vt2 WHERE (CAST((2.126815385E9 IN (vt2.c0)) AS REAL));
SELECT * FROM v0, vt2 WHERE (((CAST((2.126815385E9 IN (vt2.c0)) AS REAL))AND(UNLIKELY(DISTINCT vt2.c0)))) ORDER BY ((((vt2.c1)*(v0.c1)))&(((v0.c2) BETWEEN (v0.c0) AND (NULL)))) DESC, (((v0.c1)) BETWEEN ((vt2.c0)) AND ((v0.c0))) COLLATE BINARY, ((CAST(vt2.c0 AS BLOB))>((- (v0.c2))));
SELECT MAX(vt2.c1) FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((v0.c3)<>(x'5815')) IN ()) WHERE (((vt2.c0) NOTNULL) COLLATE NOCASE);
SELECT MAX(vt2.c1) FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((v0.c3)!=(x'5815')) IN ()) WHERE (((((vt2.c0) NOTNULL) COLLATE NOCASE)AND(((vt2.c1)>>(vt0.c0)) COLLATE RTRIM COLLATE NOCASE)));
SELECT COUNT(*) FROM vt0 NATURAL JOIN v0 WHERE (((((v0.c2)OR(v0.c1))) NOTNULL));
SELECT ALL COUNT(*) FROM vt0 NATURAL JOIN v0 WHERE (((((((v0.c2)OR(v0.c1))) NOTNULL))AND(0Xffffffff993e682d))) ORDER BY (((v0.c0 IN ())) BETWEEN (((v0.c2)GLOB(vt0.c0))) AND (((v0.c1)AND(v0.c2))))  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL COUNT(*) FROM vt0 NATURAL JOIN v0 WHERE ((NOT (((v0.c2)-(v0.c2))))) ORDER BY (((v0.c0 IN ())) BETWEEN (((v0.c2)GLOB(vt0.c0))) AND (((v0.c1)AND(v0.c2))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0)))) ISNULL)) ORDER BY ((CASE vt0.c0  WHEN '1141990260' THEN vt0.c0 END) BETWEEN ((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) AND (CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) ASC, vt0.c0  NULLS LAST, (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) IN (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN '-1522911904' WHEN vt0.c0 THEN 4.77587929E8 WHEN NULL THEN vt0.c0 END));
SELECT DISTINCT * FROM vt0 WHERE ((((((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0)))) ISNULL))AND('-1341223352'))) ORDER BY ((((((((((((json_object(vt0.c0, vt0.c0))OR((vt0.c0 IN (vt0.c0, vt0.c0)))))AND(TOTAL_CHANGES())))AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, 0.8216705967925017))<((vt0.c0, x'd4', vt0.c0, vt0.c0, vt0.c0))))))AND(TRIM(vt0.c0))))OR(CASE vt0.c0  WHEN '1165436722' THEN vt0.c0 END)))OR(vt0.c0)) DESC  NULLS LAST, -282057135;
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0)))) ISNULL)) ORDER BY ((CASE vt0.c0  WHEN '1141990260' THEN vt0.c0 END) BETWEEN ((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) AND (CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) ASC, vt0.c0  NULLS LAST, (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) IN (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN '-1522911904' WHEN vt0.c0 THEN 4.77587929E8 WHEN NULL THEN vt0.c0 END));
SELECT DISTINCT * FROM vt0 WHERE ((((((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0)))) ISNULL))AND('-1341223352'))) ORDER BY ((((((((((((json_object(vt0.c0, vt0.c0))OR((vt0.c0 IN (vt0.c0, vt0.c0)))))AND(TOTAL_CHANGES())))AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, 0.8216705967925017))<((vt0.c0, x'd4', vt0.c0, vt0.c0, vt0.c0))))))AND(TRIM(vt0.c0))))OR(CASE vt0.c0  WHEN '1165436722' THEN vt0.c0 END)))OR(vt0.c0)) DESC  NULLS LAST, -282057135;
SELECT * FROM v0, vt0 WHERE (NULLIF(v0.c1 COLLATE BINARY, CAST(v0.c2 AS NUMERIC)));
SELECT ALL * FROM v0, vt0 WHERE (NULLIF(v0.c1 COLLATE BINARY, CAST(v0.c2 AS NUMERIC)));
SELECT * FROM v0, vt0 WHERE (NULLIF(v0.c1 COLLATE BINARY, CAST(v0.c2 AS NUMERIC)));
SELECT ALL * FROM v0, vt0 WHERE (NULLIF(v0.c1 COLLATE BINARY, CAST(v0.c2 AS NUMERIC)));
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (CAST(CAST(v0.c1 AS BLOB) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (((CAST(CAST(v0.c1 AS BLOB) AS NUMERIC))AND((((v0.c3 IN (vt2.c1)))&(rtreenode(vt2.c0, v0.c3))))));
SELECT * FROM vt0, v0, vt2 WHERE (x'') ORDER BY (((((((((((((v0.c1, vt2.c0)) NOT BETWEEN ((0.40348966771456707, v0.c1)) AND ((v0.c1, vt0.c0))))OR(((vt0.c0) NOTNULL))))OR(CAST(v0.c1 AS BLOB))))OR(((((v0.c2)AND(vt2.c0)))AND(v0.c0)))))AND(v0.c1)))AND(CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((x'')AND(LIKE(v0.c1, UNLIKELY(vt0.c0), '0')))) ORDER BY (((((((((((((v0.c1, vt2.c0)) NOT BETWEEN ((0.40348966771456707, v0.c1)) AND ((v0.c1, vt0.c0))))OR(((vt0.c0) NOTNULL))))OR(CAST(v0.c1 AS BLOB))))OR(((((v0.c2)AND(vt2.c0)))AND(v0.c0)))))AND(v0.c1)))AND(CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM vt0, v0, vt2 WHERE (x'') ORDER BY (((((((((((((v0.c1, vt2.c0)) NOT BETWEEN ((0.40348966771456707, v0.c1)) AND ((v0.c1, vt0.c0))))OR(((vt0.c0) NOTNULL))))OR(CAST(v0.c1 AS BLOB))))OR(((((v0.c2)AND(vt2.c0)))AND(v0.c0)))))AND(v0.c1)))AND(CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((x'')AND(LIKE(v0.c1, UNLIKELY(vt0.c0), '0')))) ORDER BY (((((((((((((v0.c1, vt2.c0)) NOT BETWEEN ((0.40348966771456707, v0.c1)) AND ((v0.c1, vt0.c0))))OR(((vt0.c0) NOTNULL))))OR(CAST(v0.c1 AS BLOB))))OR(((((v0.c2)AND(vt2.c0)))AND(v0.c0)))))AND(v0.c1)))AND(CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c1) AND (v0.c1))) IS FALSE));
SELECT * FROM v0 WHERE (((((((v0.c1) BETWEEN (v0.c1) AND (v0.c1))) IS FALSE))AND((- ((NOT (v0.c0))))))) LIMIT 0x0 INTERSECT SELECT ALL * FROM v0 WHERE (((x'018db4f7')&(0X4bee2d4d))) LIMIT 0;
SELECT * FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c1) AND (v0.c1))) IS FALSE));
SELECT * FROM v0 WHERE (((((((v0.c1) BETWEEN (v0.c1) AND (v0.c1))) IS FALSE))AND((- ((NOT (v0.c0))))))) LIMIT 0x0 INTERSECT SELECT ALL * FROM v0 WHERE (((x'018db4f7')&(0X4bee2d4d))) LIMIT 0;
SELECT COUNT(*) FROM v0 WHERE (TRIM(NULL, v0.c3) COLLATE RTRIM);
SELECT COUNT(*) FROM v0 WHERE (TRIM(NULL, v0.c3) COLLATE RTRIM) ORDER BY (CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c3 ELSE v0.c3 END IN ()) ASC  NULLS LAST, ((v0.c3) BETWEEN (v0.c2) AND ('?a')) COLLATE RTRIM DESC;
SELECT ALL MAX(v0.c2) FROM vt2 LEFT OUTER JOIN v0 ON v0.c3 WHERE (HEX(((((((((NULL)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))OR(v0.c1))));
SELECT MAX(v0.c2) FROM vt2 LEFT OUTER JOIN v0 ON v0.c3 WHERE (((HEX(((((((((NULL)AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))OR(v0.c1))))AND(CAST(((0.40461061181087077) BETWEEN (v0.c2) AND (vt2.c1)) AS TEXT)))) ORDER BY ((((((x'')AND((~ (vt2.c0)))))OR(((v0.c3)>(v0.c2)))))AND(((v0.c3) NOTNULL))), ((('GᚦvS_b'))!=(((((vt2.c1)) NOT BETWEEN ((v0.c0)) AND (('')))))) DESC, v0.c0 DESC LIMIT 0x0 INTERSECT SELECT MAX(v0.c2) FROM vt2 LEFT OUTER JOIN v0 ON v0.c3 WHERE ((v0.c0 IN ()) COLLATE RTRIM COLLATE BINARY) ORDER BY ((((((x'')AND((~ (vt2.c0)))))OR(((v0.c3)>(v0.c2)))))AND(((v0.c3) NOTNULL))), ((('GᚦvS_b'))!=(((((vt2.c1)) NOT BETWEEN ((v0.c0)) AND (('')))))) DESC, v0.c0 DESC LIMIT 0;
SELECT COUNT(*) FROM v0, vt2 WHERE (NULL);
SELECT DISTINCT COUNT(*) FROM v0, vt2 WHERE (NULL) LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (CAST(CAST(vt0.c0 AS TEXT) AS REAL));
SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE (((CAST(CAST(vt0.c0 AS TEXT) AS REAL))AND(TRIM(DISTINCT (vt0.c0 IN (vt0.c0)))))) ORDER BY CASE vt2.c1 COLLATE RTRIM  WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)) THEN ((1947377964) BETWEEN (x'1d') AND (vt0.c0)) WHEN vt2.c1 COLLATE RTRIM THEN ((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c1)) WHEN ((vt2.c1)<(vt2.c1)) THEN CASE WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END END DESC, ((JULIANDAY(vt2.c0, vt2.c1, vt0.c0)) BETWEEN ((vt0.c0 IN (x'9f2e'))) AND (vt2.c1))  NULLS FIRST, CAST(((vt2.c0)IS(vt0.c0)) AS REAL) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE (TYPEOF(((vt2.c0)*(vt2.c1)))) ORDER BY CASE vt2.c1 COLLATE RTRIM  WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)) THEN ((1947377964) BETWEEN (x'1d') AND (vt0.c0)) WHEN vt2.c1 COLLATE RTRIM THEN ((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c1)) WHEN ((vt2.c1)<(vt2.c1)) THEN CASE WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END END DESC, ((JULIANDAY(vt2.c0, vt2.c1, vt0.c0)) BETWEEN ((vt0.c0 IN (x'9f2e'))) AND (vt2.c1))  NULLS FIRST, CAST(((vt2.c0)IS(vt0.c0)) AS REAL) LIMIT 2;
SELECT * FROM vt2, vt0, v0 WHERE (((((((NULL)OR(((vt2.c0) IS FALSE))))OR(CASE v0.c0  WHEN v0.c2 THEN vt2.c1 ELSE vt2.c1 END)))AND(((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))) ORDER BY HEX(DISTINCT vt2.c0)  NULLS FIRST, ((CAST(v0.c1 AS REAL))IS NOT(vt2.c0))  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((((((NULL)OR(((vt2.c0) IS FALSE))))OR(CASE v0.c0  WHEN v0.c2 THEN vt2.c1 ELSE vt2.c1 END)))AND(((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))) ORDER BY HEX(DISTINCT vt2.c0)  NULLS FIRST, ((CAST(v0.c1 AS REAL))IS NOT(vt2.c0))  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt2, vt0, v0 WHERE (((((((NULL)OR(((vt2.c0) IS FALSE))))OR(CASE v0.c0  WHEN v0.c2 THEN vt2.c1 ELSE vt2.c1 END)))AND(((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))) ORDER BY HEX(DISTINCT vt2.c0)  NULLS FIRST, ((CAST(v0.c1 AS REAL))IS NOT(vt2.c0))  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((((((NULL)OR(((vt2.c0) IS FALSE))))OR(CASE v0.c0  WHEN v0.c2 THEN vt2.c1 ELSE vt2.c1 END)))AND(((v0.c2) BETWEEN (v0.c0) AND (v0.c3))))) ORDER BY HEX(DISTINCT vt2.c0)  NULLS FIRST, ((CAST(v0.c1 AS REAL))IS NOT(vt2.c0))  NULLS FIRST LIMIT 0x0;
SELECT COUNT(*) FROM vt0 WHERE (CAST(CAST(vt0.c0 AS REAL) AS NUMERIC));
SELECT ALL COUNT(*) FROM vt0 WHERE (CAST(CAST(vt0.c0 AS REAL) AS NUMERIC)) ORDER BY (((((vt0.c0)<<(vt0.c0)), ((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)), ((vt0.c0)!=(vt0.c0)), '0.12893410339563705', CAST(x'ae' AS NUMERIC)))<>((CAST(vt0.c0 AS TEXT), ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, (NOT ('p.')), ((vt0.c0)<(vt0.c0))))) DESC, ((((vt0.c0) ISNULL)) ISNULL) ASC  NULLS FIRST, CASE WHEN ((vt0.c0) ISNULL) THEN vt0.c0 COLLATE BINARY END DESC LIMIT 0x1;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((~ (vt0.c0)) IN ()));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((~ (vt0.c0)) IN ())) INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CAST(vt0.c0 AS TEXT) COLLATE RTRIM);
SELECT ALL * FROM vt2 WHERE (((((((((((((vt2.c0 COLLATE NOCASE)OR(((vt2.c1)%(vt2.c0)))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 END)))OR(CAST(vt2.c1 AS TEXT))))OR(((vt2.c1)-(vt2.c1)))))OR(((vt2.c0) NOTNULL))))AND(((vt2.c1)<(vt2.c0))))) ORDER BY vt2.c1 COLLATE RTRIM DESC, 0.6492935623545957, CAST(vt2.c1 AS INTEGER) DESC  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((((((((((vt2.c0 COLLATE NOCASE)OR(((vt2.c1)%(vt2.c0)))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 END)))OR(CAST(vt2.c1 AS TEXT))))OR(((vt2.c1)-(vt2.c1)))))OR(((vt2.c0) NOTNULL))))AND(((vt2.c1)<(vt2.c0))))) ORDER BY (vt2.c1 COLLATE BINARY IN ()) INTERSECT SELECT ALL * FROM vt2 WHERE (TYPEOF(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))) ORDER BY (vt2.c1 COLLATE BINARY IN ());
SELECT ALL * FROM vt2 WHERE (((((((((((((vt2.c0 COLLATE NOCASE)OR(((vt2.c1)%(vt2.c0)))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 END)))OR(CAST(vt2.c1 AS TEXT))))OR(((vt2.c1)-(vt2.c1)))))OR(((vt2.c0) NOTNULL))))AND(((vt2.c1)<(vt2.c0))))) ORDER BY vt2.c1 COLLATE RTRIM DESC, 0.6492935623545957, CAST(vt2.c1 AS INTEGER) DESC  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((((((((((vt2.c0 COLLATE NOCASE)OR(((vt2.c1)%(vt2.c0)))))OR(CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 END)))OR(CAST(vt2.c1 AS TEXT))))OR(((vt2.c1)-(vt2.c1)))))OR(((vt2.c0) NOTNULL))))AND(((vt2.c1)<(vt2.c0))))) ORDER BY (vt2.c1 COLLATE BINARY IN ()) INTERSECT SELECT ALL * FROM vt2 WHERE (TYPEOF(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))) ORDER BY (vt2.c1 COLLATE BINARY IN ());
SELECT ALL MAX(vt2.c0) FROM vt0, vt2 WHERE (COALESCE(DISTINCT ((vt2.c0) NOTNULL), vt2.c0)) ORDER BY ((vt2.c1)<<(json_array_length(vt0.c0, vt2.c1))) ASC;
SELECT DISTINCT MAX(vt2.c0) FROM vt0, vt2 WHERE (COALESCE(DISTINCT ((vt2.c0) NOTNULL), vt2.c0)) ORDER BY (+ (((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND(0x7d6657e0)))AND(vt2.c1)))) DESC;
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((0.37036548400941705)) AND ((((vt0.c0)%(0.2684242749166126))))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((vt0.c0)) BETWEEN ((0.37036548400941705)) AND ((((vt0.c0)%(0.2684242749166126)))))) ORDER BY ((((vt0.c0 COLLATE BINARY)AND((NOT (vt0.c0)))))OR((+ (vt0.c0)))), CAST(CAST(vt0.c0 AS REAL) AS INTEGER), ((((NULL)OR(((vt0.c0) NOT NULL))))AND(((vt0.c0)<=(vt0.c0)))) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((CAST(vt0.c0 AS NUMERIC) IN (((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)), TRIM(vt0.c0)))) ORDER BY ((((vt0.c0 COLLATE BINARY)AND((NOT (vt0.c0)))))OR((+ (vt0.c0)))), CAST(CAST(vt0.c0 AS REAL) AS INTEGER), ((((NULL)OR(((vt0.c0) NOT NULL))))AND(((vt0.c0)<=(vt0.c0)))) ASC;
SELECT ALL * FROM vt2, v0 WHERE (CASE WHEN ((v0.c2)OR(vt2.c1)) THEN ((vt2.c1)<=(v0.c2)) ELSE CAST(vt2.c1 AS BLOB) END) ORDER BY UPPER(GLOB(v0.c1, vt2.c1));
SELECT DISTINCT * FROM vt2, v0 WHERE (((CASE WHEN ((v0.c2)OR(vt2.c1)) THEN ((vt2.c1)==(v0.c2)) ELSE CAST(vt2.c1 AS BLOB) END)AND((((NOT (v0.c0))) BETWEEN (((v0.c3)=(vt2.c1))) AND (((((((v0.c0)AND(v0.c1)))AND(v0.c0)))OR(NULL))))))) ORDER BY UPPER(GLOB(v0.c1, vt2.c1));
SELECT ALL * FROM vt2, v0 WHERE (CASE WHEN ((v0.c2)OR(vt2.c1)) THEN ((vt2.c1)<=(v0.c2)) ELSE CAST(vt2.c1 AS BLOB) END) ORDER BY UPPER(GLOB(v0.c1, vt2.c1));
SELECT DISTINCT * FROM vt2, v0 WHERE (((CASE WHEN ((v0.c2)OR(vt2.c1)) THEN ((vt2.c1)==(v0.c2)) ELSE CAST(vt2.c1 AS BLOB) END)AND((((NOT (v0.c0))) BETWEEN (((v0.c3)=(vt2.c1))) AND (((((((v0.c0)AND(v0.c1)))AND(v0.c0)))OR(NULL))))))) ORDER BY UPPER(GLOB(v0.c1, vt2.c1));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0)>>(vt0.c0)))>((~ (vt0.c0))))) ORDER BY ((((vt0.c0) NOT NULL)) NOTNULL) DESC;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0)>>(vt0.c0)))>((~ (vt0.c0))))) ORDER BY ((((vt0.c0) NOT NULL)) NOTNULL) DESC;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN CHANGES() THEN ((v0.c0) IS TRUE) WHEN ((v0.c1)&(v0.c1)) THEN CASE v0.c2  WHEN NULL THEN vt2.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 END WHEN (vt0.c0 IN ()) THEN vt0.c0 COLLATE BINARY END);
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (CASE WHEN CHANGES() THEN ((v0.c0) IS TRUE) WHEN ((v0.c1)&(v0.c1)) THEN CASE v0.c2  WHEN NULL THEN vt2.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 END WHEN (vt0.c0 IN ()) THEN vt0.c0 COLLATE BINARY END);
SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN CHANGES() THEN ((v0.c0) IS TRUE) WHEN ((v0.c1)&(v0.c1)) THEN CASE v0.c2  WHEN NULL THEN vt2.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 END WHEN (vt0.c0 IN ()) THEN vt0.c0 COLLATE BINARY END);
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (CASE WHEN CHANGES() THEN ((v0.c0) IS TRUE) WHEN ((v0.c1)&(v0.c1)) THEN CASE v0.c2  WHEN NULL THEN vt2.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 END WHEN (vt0.c0 IN ()) THEN vt0.c0 COLLATE BINARY END);
SELECT MIN(vt0.c0) FROM vt0 WHERE (CASE 's5U~h_vL'  WHEN (NOT (vt0.c0)) THEN ((vt0.c0)<=(vt0.c0)) END) ORDER BY ((vt0.c0) IS FALSE) ASC  NULLS LAST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (CASE 's5U~h_vL'  WHEN (NOT (vt0.c0)) THEN ((vt0.c0)<=(vt0.c0)) END) ORDER BY ((vt0.c0) IS FALSE) ASC  NULLS LAST LIMIT 0;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((0.6387235912003065) NOT BETWEEN ('765630797') AND (vt0.c0)) IN (vt0.c0, vt0.c0)));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((((0.6387235912003065) NOT BETWEEN ('765630797') AND (vt0.c0)) IN (vt0.c0)))AND((~ ((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))))))) ORDER BY vt0.c0 ASC  NULLS LAST, x''  NULLS FIRST LIMIT 0x1;
SELECT MAX(v0.c3) FROM v0 WHERE (CASE ((v0.c2) BETWEEN (v0.c1) AND (v0.c1))  WHEN (v0.c2 IN ()) THEN v0.c0 WHEN ((((v0.c0)OR(v0.c0)))AND(v0.c1)) THEN 1.70283704E9 END);
SELECT ALL MAX(v0.c3) FROM v0 WHERE (CASE ((v0.c2) BETWEEN (v0.c1) AND (v0.c1))  WHEN (v0.c2 IN ()) THEN v0.c0 WHEN ((((v0.c0)OR(v0.c0)))AND(v0.c1)) THEN 1.70283704E9 END) ORDER BY (((((v0.c2))<((v0.c2)))) BETWEEN (CASE WHEN v0.c2 THEN NULL WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c3 ELSE -1165434253 END) AND (CAST(v0.c3 AS TEXT)))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CASE WHEN ((v0.c1) IS FALSE) THEN ((v0.c0) NOT BETWEEN (v0.c1) AND (x'')) WHEN vt2.c1 COLLATE BINARY THEN vt0.c0 WHEN x'80f888' THEN UNLIKELY(-5.72972978E8) WHEN (v0.c2 IN (vt0.c0)) THEN (~ (v0.c3)) WHEN ((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)) THEN CASE v0.c3  WHEN v0.c3 THEN v0.c0 ELSE vt2.c1 END END) ORDER BY ((((v0.c2)<=(vt2.c1))) BETWEEN (((v0.c0) BETWEEN (vt0.c0) AND (v0.c2))) AND (((((((v0.c2)AND(v0.c2)))OR(vt0.c0)))AND('0.4311777796941849')))), INSTR(vt2.c1, ((v0.c0) NOTNULL))  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CASE WHEN ((v0.c1) IS FALSE) THEN ((v0.c0) NOT BETWEEN (v0.c1) AND (x'')) WHEN vt2.c1 COLLATE BINARY THEN vt0.c0 WHEN x'80f888' THEN UNLIKELY(-5.72972978E8) WHEN (v0.c2 IN (vt0.c0)) THEN (~ (v0.c3)) WHEN ((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)) THEN CASE v0.c3  WHEN v0.c3 THEN v0.c0 ELSE vt2.c1 END END) ORDER BY ((((vt2.c0)-(vt0.c0)))>(((v0.c3) ISNULL))) DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt0, v0 NOT INDEXED, vt2 WHERE (((((vt2.c1) NOT BETWEEN (x'42') AND (v0.c0)))IS NOT(CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 WHEN v0.c2 THEN x'd93c3a' ELSE v0.c1 END))) ORDER BY ((((vt2.c0)-(vt0.c0)))>(((v0.c3) ISNULL))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CASE WHEN ((v0.c1) IS FALSE) THEN ((v0.c0) NOT BETWEEN (v0.c1) AND (x'')) WHEN vt2.c1 COLLATE BINARY THEN vt0.c0 WHEN x'80f888' THEN UNLIKELY(-5.72972978E8) WHEN (v0.c2 IN (vt0.c0)) THEN (~ (v0.c3)) WHEN ((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)) THEN CASE v0.c3  WHEN v0.c3 THEN v0.c0 ELSE vt2.c1 END END) ORDER BY ((((v0.c2)<=(vt2.c1))) BETWEEN (((v0.c0) BETWEEN (vt0.c0) AND (v0.c2))) AND (((((((v0.c2)AND(v0.c2)))OR(vt0.c0)))AND('0.4311777796941849')))), INSTR(vt2.c1, ((v0.c0) NOTNULL))  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CASE WHEN ((v0.c1) IS FALSE) THEN ((v0.c0) NOT BETWEEN (v0.c1) AND (x'')) WHEN vt2.c1 COLLATE BINARY THEN vt0.c0 WHEN x'80f888' THEN UNLIKELY(-5.72972978E8) WHEN (v0.c2 IN (vt0.c0)) THEN (~ (v0.c3)) WHEN ((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)) THEN CASE v0.c3  WHEN v0.c3 THEN v0.c0 ELSE vt2.c1 END END) ORDER BY ((((vt2.c0)-(vt0.c0)))>(((v0.c3) ISNULL))) DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt0, v0 NOT INDEXED, vt2 WHERE (((((vt2.c1) NOT BETWEEN (x'42') AND (v0.c0)))IS NOT(CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 WHEN v0.c2 THEN x'd93c3a' ELSE v0.c1 END))) ORDER BY ((((vt2.c0)-(vt0.c0)))>(((v0.c3) ISNULL))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL MAX(v0.c0) FROM vt2, vt0, v0 WHERE (vt0.c0) ORDER BY ((((((((((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)))AND(((vt2.c0)LIKE(v0.c2)))))AND(vt0.c0 COLLATE NOCASE)))AND((NOT (v0.c3)))))AND(v0.c0)) ASC  NULLS FIRST;
SELECT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (((vt0.c0)AND(((json_array(NULL, vt0.c0, 'cK>Q', v0.c2))+((v0.c1 IN (vt2.c1))))))) ORDER BY COALESCE(DISTINCT (v0.c0 IN ()), CAST(v0.c3 AS TEXT))  NULLS FIRST, (NOT (v0.c2)) COLLATE NOCASE DESC  NULLS FIRST, vt2.c1;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE ((((- (v0.c2)))||(((vt0.c0) NOT BETWEEN ('1690012934') AND (v0.c1))))) ORDER BY (NOT ((- (vt0.c0)))) ASC  NULLS LAST, (((v0.c1, v0.c0, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOTNULL), ((((((vt0.c0)AND(2.14129716E8)))AND(-1153140899)))AND(vt2.c0)), vt0.c0 COLLATE BINARY)) AND ((CAST(v0.c0 AS REAL), (v0.c3 IN (vt2.c1)), UPPER(DISTINCT vt2.c1)))) ASC;
SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE ((((- (v0.c2)))||(((vt0.c0) NOT BETWEEN ('1690012934') AND (v0.c1))))) ORDER BY ((((((((((((vt0.c0)AND(v0.c1)))OR(vt2.c0)))OR(vt2.c1)))AND(v0.c3)))AND(LOWER(v0.c2))))AND(UNLIKELY(v0.c3))), (+ (vt2.c0)) COLLATE BINARY COLLATE BINARY DESC, (((vt2.c0)) BETWEEN ((((((((v0.c1)AND(v0.c2)))AND(vt2.c1)))OR(v0.c3)))) AND ((v0.c0))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (((((((vt2.c0)GLOB(vt0.c0)))AND((((v0.c3)) BETWEEN ((v0.c0)) AND ((vt0.c0))))))OR((- (v0.c0))))) ORDER BY ((((((((((((vt0.c0)AND(v0.c1)))OR(vt2.c0)))OR(vt2.c1)))AND(v0.c3)))AND(LOWER(v0.c2))))AND(UNLIKELY(v0.c3))), (+ (vt2.c0)) COLLATE BINARY COLLATE BINARY DESC, (((vt2.c0)) BETWEEN ((((((((v0.c1)AND(v0.c2)))AND(vt2.c1)))OR(v0.c3)))) AND ((v0.c0))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt0, vt2 WHERE (((((x'7e') NOT BETWEEN (vt2.c0) AND (x'e6'))) NOTNULL));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((x'7e') NOT BETWEEN (vt2.c0) AND (x'e6'))) NOTNULL)) ORDER BY ((v0.c0 COLLATE RTRIM)/(vt0.c0))  NULLS LAST, ((v0.c0)/(0.16217142275629903)) DESC INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((((((((v0.c0)OR(v0.c2)))AND(v0.c3)))AND(v0.c0)))OR(vt2.c0)))IS NOT(((v0.c1)*(v0.c2))))) ORDER BY ((v0.c0 COLLATE RTRIM)/(vt0.c0))  NULLS LAST, ((v0.c0)/(0.16217142275629903)) DESC;
SELECT * FROM v0, vt0, vt2 WHERE (((((x'7e') NOT BETWEEN (vt2.c0) AND (x'e6'))) NOTNULL));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((x'7e') NOT BETWEEN (vt2.c0) AND (x'e6'))) NOTNULL)) ORDER BY ((v0.c0 COLLATE RTRIM)/(vt0.c0))  NULLS LAST, ((v0.c0)/(0.16217142275629903)) DESC INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((((((((v0.c0)OR(v0.c2)))AND(v0.c3)))AND(v0.c0)))OR(vt2.c0)))IS NOT(((v0.c1)*(v0.c2))))) ORDER BY ((v0.c0 COLLATE RTRIM)/(vt0.c0))  NULLS LAST, ((v0.c0)/(0.16217142275629903)) DESC;
SELECT MAX(vt2.c1) FROM vt2 WHERE (((((((vt2.c1)<=(vt2.c0)))OR((vt2.c1 IN (vt2.c1)))))OR(((vt2.c0)LIKE(vt2.c1)))));
SELECT MAX(vt2.c1) FROM vt2 WHERE (((((((vt2.c1)<(vt2.c0)))OR((vt2.c1 IN (vt2.c1)))))OR(((vt2.c0)LIKE(vt2.c1))))) ORDER BY ((vt2.c0) NOT BETWEEN ((NOT (vt2.c1))) AND ((((vt2.c1, x'', vt2.c1))==((vt2.c1, vt2.c0, NULL))))), (((((vt2.c0)*(vt2.c1))))>(((- (vt2.c0)))))  NULLS LAST INTERSECT SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((NOT (vt2.c0)) IN (((vt2.c1)<>(vt2.c0))))) ORDER BY ((vt2.c0) NOT BETWEEN ((NOT (vt2.c1))) AND ((((vt2.c1, x'', vt2.c1))=((vt2.c1, vt2.c0, NULL))))), (((((vt2.c0)*(vt2.c1))))>(((- (vt2.c0)))))  NULLS LAST;
SELECT COUNT(*) FROM vt2 CROSS JOIN vt0 ON ((((vt2.c1) NOT BETWEEN (v0.c1) AND (v0.c1)))GLOB((vt2.c1 IN ()))) LEFT OUTER JOIN v0 ON ((((v0.c3) NOTNULL)) NOT BETWEEN (((v0.c1)<<(vt0.c0))) AND ((((v0.c1))<((v0.c0))))) WHERE (vt2.c0) ORDER BY ((NULL)AND(0X4a5d399b))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2 CROSS JOIN vt0 ON ((((vt2.c1) NOT BETWEEN (v0.c1) AND (v0.c1)))GLOB((vt2.c1 IN ()))) INNER JOIN v0 ON ((((v0.c3) NOTNULL)) NOT BETWEEN (((v0.c1)<<(vt0.c0))) AND ((((v0.c1))<((v0.c0))))) WHERE (((vt2.c0)AND(((((vt0.c0) NOTNULL))=(((v0.c0) NOT BETWEEN (v0.c3) AND (vt2.c1))))))) ORDER BY ((NULL)AND(0x4a5d399b))  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 CROSS JOIN vt0 ON ((((vt2.c1) NOT BETWEEN (v0.c1) AND (v0.c1)))GLOB((vt2.c1 IN ()))) INNER JOIN v0 ON ((((v0.c3) NOTNULL)) NOT BETWEEN (((v0.c1)<<(vt0.c0))) AND ((((v0.c1))<((v0.c0))))) WHERE ((((((v0.c0, v0.c3, v0.c1, vt2.c1, v0.c0, v0.c1, v0.c3)) NOT BETWEEN ((v0.c0, v0.c2, vt2.c0, vt0.c0, v0.c0, v0.c3, vt2.c0)) AND ((v0.c3, v0.c1, vt2.c1, v0.c1, v0.c2, vt2.c0, x''))))<(((vt2.c0) NOTNULL)))) ORDER BY ((NULL)AND(0x4a5d399b))  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt2, vt0 CROSS JOIN v0 ON (((vt2.c1)==(v0.c0)) IN ()) WHERE (((NULL COLLATE RTRIM)&(CASE v0.c0  WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN '74' ELSE v0.c1 END)));
SELECT DISTINCT MAX(vt0.c0) FROM vt2, vt0 CROSS JOIN v0 ON (((vt2.c1)==(v0.c0)) IN ()) WHERE (((((NULL COLLATE RTRIM)&(CASE v0.c0  WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN '74' ELSE v0.c1 END)))AND(CASE ((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2))  WHEN ((v0.c2) NOT NULL) THEN MIN(vt0.c0, '-', v0.c2, vt2.c1) WHEN (+ (vt2.c1)) THEN '-635459419' WHEN CAST(v0.c2 AS NUMERIC) THEN ((v0.c1) NOT NULL) WHEN ((v0.c0)AND(v0.c3)) THEN ((v0.c0)GLOB(vt2.c0)) ELSE ((v0.c0) ISNULL) END))) ORDER BY (((-610673233)%(vt2.c0)) IN ()), ((((vt2.c0) IS TRUE)) ISNULL)  NULLS LAST LIMIT 2;
SELECT ALL MAX(vt2.c1) FROM vt2, vt0 CROSS JOIN v0 ON ((((v0.c3)AND(x'5ccb')))AND(LIKELIHOOD(v0.c2, vt2.c0))) WHERE (((vt2.c1 COLLATE NOCASE) NOT BETWEEN ((v0.c2 IN ())) AND (NULL)));
SELECT ALL MAX(vt2.c1) FROM vt2, vt0 CROSS JOIN v0 ON ((((v0.c3)AND(x'5ccb')))AND(LIKELIHOOD(v0.c2, vt2.c0))) WHERE (((vt2.c1 COLLATE NOCASE) NOT BETWEEN ((v0.c2 IN ())) AND (NULL))) LIMIT 1 INTERSECT SELECT ALL MAX(vt2.c1) FROM vt2, vt0 CROSS JOIN v0 ON ((((v0.c3)AND(x'5ccb')))AND(LIKELIHOOD(v0.c2, vt2.c0))) WHERE (((CHAR(0.9855214570007752, vt2.c1, vt0.c0, x'c843'))<=(((v0.c3)||(v0.c2))))) LIMIT 1;
SELECT ALL * FROM vt2 WHERE (CAST(NULL AS TEXT));
SELECT * FROM vt2 WHERE (((CAST(NULL AS TEXT))AND(((((((vt2.c0)OR('')))OR(vt2.c0)))IS NOT(vt2.c1 COLLATE NOCASE))))) INTERSECT SELECT * FROM vt2 WHERE (((NULL) NOT BETWEEN (((vt2.c0) NOT NULL)) AND (1291339797)));
SELECT ALL * FROM vt2 WHERE (CAST(NULL AS TEXT));
SELECT * FROM vt2 WHERE (((CAST(NULL AS TEXT))AND(((((((vt2.c0)OR('')))OR(vt2.c0)))IS NOT(vt2.c1 COLLATE NOCASE))))) INTERSECT SELECT * FROM vt2 WHERE (((NULL) NOT BETWEEN (((vt2.c0) NOT NULL)) AND (1291339797)));
SELECT ALL * FROM vt2 LEFT OUTER JOIN v0 ON ((((v0.c3)!=(vt2.c0))) IS TRUE) WHERE (((CASE WHEN v0.c3 THEN v0.c1 ELSE v0.c0 END) BETWEEN (0Xffffffff9b0b97a8) AND ((v0.c0 IN (NULL))))) ORDER BY vt2.c1  NULLS FIRST, (((((((vt2.c0, v0.c1, vt2.c1)) BETWEEN ((v0.c3, v0.c0, v0.c2)) AND ((v0.c2, vt2.c1, vt2.c1))))OR(LOWER('-2006647167'))))AND(v0.c0))  NULLS FIRST;
SELECT ALL * FROM vt2 INNER JOIN v0 ON ((((v0.c3)<>(vt2.c0))) IS TRUE) WHERE (((CASE WHEN v0.c3 THEN v0.c1 ELSE v0.c0 END) BETWEEN (0Xffffffff9b0b97a8) AND ((v0.c0 IN (NULL))))) ORDER BY NULL ASC  NULLS LAST, (v0.c0 IN ()) ASC  NULLS LAST;
SELECT ALL * FROM vt2 LEFT OUTER JOIN v0 ON ((((v0.c3)!=(vt2.c0))) IS TRUE) WHERE (((CASE WHEN v0.c3 THEN v0.c1 ELSE v0.c0 END) BETWEEN (0Xffffffff9b0b97a8) AND ((v0.c0 IN (NULL))))) ORDER BY vt2.c1  NULLS FIRST, (((((((vt2.c0, v0.c1, vt2.c1)) BETWEEN ((v0.c3, v0.c0, v0.c2)) AND ((v0.c2, vt2.c1, vt2.c1))))OR(LOWER('-2006647167'))))AND(v0.c0))  NULLS FIRST;
SELECT ALL * FROM vt2 INNER JOIN v0 ON ((((v0.c3)<>(vt2.c0))) IS TRUE) WHERE (((CASE WHEN v0.c3 THEN v0.c1 ELSE v0.c0 END) BETWEEN (0Xffffffff9b0b97a8) AND ((v0.c0 IN (NULL))))) ORDER BY NULL ASC  NULLS LAST, (v0.c0 IN ()) ASC  NULLS LAST;
SELECT * FROM vt0, v0, vt2 WHERE (((json_remove(v0.c1, vt2.c0, v0.c1)) IS FALSE));
SELECT * FROM vt0, v0, vt2 WHERE (((((json_remove(v0.c1, vt2.c0, v0.c1)) IS FALSE))AND(vt2.c1))) ORDER BY ((((((ROUND(vt2.c0, NULL))AND(((v0.c1) NOT NULL))))OR(vt2.c0 COLLATE NOCASE)))OR((((vt0.c0, vt2.c0))<(('tolNP', 0.11958436381296522))))), v0.c3 COLLATE NOCASE  NULLS FIRST, ((vt0.c0)LIKE(v0.c0)) COLLATE BINARY DESC  NULLS LAST, (NOT (CAST(v0.c1 AS TEXT))) DESC LIMIT 3;
SELECT * FROM vt0, v0, vt2 WHERE (((json_remove(v0.c1, vt2.c0, v0.c1)) IS FALSE));
SELECT * FROM vt0, v0, vt2 WHERE (((((json_remove(v0.c1, vt2.c0, v0.c1)) IS FALSE))AND(vt2.c1))) ORDER BY ((((((ROUND(vt2.c0, NULL))AND(((v0.c1) NOT NULL))))OR(vt2.c0 COLLATE NOCASE)))OR((((vt0.c0, vt2.c0))<(('tolNP', 0.11958436381296522))))), v0.c3 COLLATE NOCASE  NULLS FIRST, ((vt0.c0)LIKE(v0.c0)) COLLATE BINARY DESC  NULLS LAST, (NOT (CAST(v0.c1 AS TEXT))) DESC LIMIT 3;
SELECT ALL MIN(vt0.c0) FROM v0, vt0 LEFT OUTER JOIN vt2 ON (- (v0.c2)) COLLATE RTRIM WHERE (CAST(CAST(v0.c2 AS BLOB) AS NUMERIC));
SELECT MIN(vt0.c0) FROM v0, vt0 INNER JOIN vt2 ON (- (v0.c2)) COLLATE RTRIM WHERE (((CAST(CAST(v0.c2 AS BLOB) AS NUMERIC))AND(CAST((vt2.c1 IN (v0.c2, vt0.c0)) AS REAL)))) ORDER BY ((((((((v0.c3)OR(v0.c0)))OR(v0.c1)))AND(x'')))=((NOT (v0.c1)))), (NOT (vt2.c1 COLLATE NOCASE)), ((NULL) BETWEEN ((~ (v0.c0))) AND (CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN 0.8277434341782137 WHEN vt0.c0 THEN NULL END)) ASC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT MIN(vt0.c0) FROM v0, vt0 INNER JOIN vt2 ON (- (v0.c2)) COLLATE RTRIM WHERE (CASE ((v0.c0)<<(v0.c0))  WHEN (((v0.c3)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))) THEN ((((((((v0.c0)OR(v0.c1)))OR(v0.c3)))AND(vt2.c1)))OR(vt2.c0)) WHEN ((v0.c2) IS FALSE) THEN 0.05000766637433751 WHEN ((vt2.c0) IS FALSE) THEN ((((((vt0.c0)AND(v0.c2)))AND(vt2.c1)))AND(vt2.c0)) WHEN (((vt0.c0, 'G', vt0.c0)) BETWEEN ((vt2.c0, v0.c2, v0.c1)) AND (('', v0.c1, v0.c0))) THEN ((((((v0.c2)OR(vt2.c1)))AND(v0.c3)))AND(x'4e')) ELSE IFNULL(vt0.c0, v0.c2) END) ORDER BY ((((((((v0.c3)OR(v0.c0)))OR(v0.c1)))AND(x'')))=((NOT (v0.c1)))), (NOT (vt2.c1 COLLATE NOCASE)), ((NULL) BETWEEN ((~ (v0.c0))) AND (CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN 0.8277434341782137 WHEN vt0.c0 THEN NULL END)) ASC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (((v0.c1) NOT BETWEEN (CASE v0.c1  WHEN 1.839189666E9 THEN v0.c3 ELSE '9*~R?yￋlY' END) AND (CASE WHEN v0.c3 THEN v0.c3 END))) ORDER BY CASE CAST(v0.c0 AS REAL)  WHEN CAST(v0.c1 AS INTEGER) THEN (- (v0.c3)) WHEN (v0.c3 IN (v0.c3, v0.c1)) THEN json_extract(v0.c3, v0.c0) WHEN (v0.c3 IN (v0.c3, v0.c3)) THEN (v0.c1 IN (v0.c3)) WHEN ((v0.c1)-(v0.c0)) THEN (v0.c3 IN (v0.c0, v0.c3)) END  NULLS LAST, v0.c0 ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((v0.c1) NOT BETWEEN (CASE v0.c1  WHEN 1.839189666E9 THEN v0.c3 ELSE '9*~R?yￋlY' END) AND (CASE WHEN v0.c3 THEN v0.c3 END))) ORDER BY LOWER(((v0.c3)|(v0.c1))), CASE WHEN v0.c1 COLLATE BINARY THEN CASE v0.c2  WHEN v0.c1 THEN x'20' ELSE v0.c1 END ELSE CAST(v0.c1 AS REAL) END, (((v0.c2 IN ()))>>(v0.c1)) DESC INTERSECT SELECT * FROM v0 WHERE ((((v0.c2 IN (v0.c1)))<=((v0.c0 IN (v0.c2, v0.c2))))) ORDER BY LOWER(((v0.c3)|(v0.c1))), CASE WHEN v0.c1 COLLATE BINARY THEN CASE v0.c2  WHEN v0.c1 THEN x'20' ELSE v0.c1 END ELSE CAST(v0.c1 AS REAL) END, (((v0.c2 IN ()))>>(v0.c1)) DESC;
SELECT ALL * FROM v0 WHERE (((v0.c1) NOT BETWEEN (CASE v0.c1  WHEN 1.839189666E9 THEN v0.c3 ELSE '9*~R?yￋlY' END) AND (CASE WHEN v0.c3 THEN v0.c3 END))) ORDER BY CASE CAST(v0.c0 AS REAL)  WHEN CAST(v0.c1 AS INTEGER) THEN (- (v0.c3)) WHEN (v0.c3 IN (v0.c3, v0.c1)) THEN json_extract(v0.c3, v0.c0) WHEN (v0.c3 IN (v0.c3, v0.c3)) THEN (v0.c1 IN (v0.c3)) WHEN ((v0.c1)-(v0.c0)) THEN (v0.c3 IN (v0.c0, v0.c3)) END  NULLS LAST, v0.c0 ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((v0.c1) NOT BETWEEN (CASE v0.c1  WHEN 1.839189666E9 THEN v0.c3 ELSE '9*~R?yￋlY' END) AND (CASE WHEN v0.c3 THEN v0.c3 END))) ORDER BY LOWER(((v0.c3)|(v0.c1))), CASE WHEN v0.c1 COLLATE BINARY THEN CASE v0.c2  WHEN v0.c1 THEN x'20' ELSE v0.c1 END ELSE CAST(v0.c1 AS REAL) END, (((v0.c2 IN ()))>>(v0.c1)) DESC INTERSECT SELECT * FROM v0 WHERE ((((v0.c2 IN (v0.c1)))<=((v0.c0 IN (v0.c2, v0.c2))))) ORDER BY LOWER(((v0.c3)|(v0.c1))), CASE WHEN v0.c1 COLLATE BINARY THEN CASE v0.c2  WHEN v0.c1 THEN x'20' ELSE v0.c1 END ELSE CAST(v0.c1 AS REAL) END, (((v0.c2 IN ()))>>(v0.c1)) DESC;
SELECT COUNT(*) FROM v0, vt0 WHERE (CAST((v0.c3 IN ()) AS TEXT));
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (CAST((v0.c3 IN ()) AS TEXT)) ORDER BY ((((v0.c2) IS TRUE)) NOT NULL)  NULLS LAST, vt0.c0 ASC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((((((((v0.c0)-(v0.c2)))AND((~ (v0.c2)))))AND((((v0.c3)) BETWEEN ((v0.c1)) AND ((v0.c0))))))AND(((v0.c3)!=(v0.c3))))) ORDER BY ((((v0.c2) IS TRUE)) NOT NULL)  NULLS LAST, vt0.c0 ASC  NULLS LAST LIMIT 1;
SELECT * FROM v0, vt2, vt0 WHERE ((((v0.c3 IN (v0.c0))) NOT BETWEEN (((((((((((v0.c0)AND(vt2.c1)))AND(0.049315335699279816)))AND(vt2.c0)))OR(v0.c0)))OR(vt2.c1))) AND (((v0.c0)IS(vt2.c0)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((v0.c3 IN (v0.c0))) NOT BETWEEN (((((((((((v0.c0)AND(vt2.c1)))AND(0.049315335699279816)))AND(vt2.c0)))OR(v0.c0)))OR(vt2.c1))) AND (((v0.c0)IS(vt2.c0)))));
SELECT * FROM v0, vt2, vt0 WHERE ((((v0.c3 IN (v0.c0))) NOT BETWEEN (((((((((((v0.c0)AND(vt2.c1)))AND(0.049315335699279816)))AND(vt2.c0)))OR(v0.c0)))OR(vt2.c1))) AND (((v0.c0)IS(vt2.c0)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((v0.c3 IN (v0.c0))) NOT BETWEEN (((((((((((v0.c0)AND(vt2.c1)))AND(0.049315335699279816)))AND(vt2.c0)))OR(v0.c0)))OR(vt2.c1))) AND (((v0.c0)IS(vt2.c0)))));
SELECT ALL * FROM vt2, vt0, v0 WHERE (CASE WHEN TOTAL_CHANGES() THEN ((vt0.c0) BETWEEN (v0.c1) AND (vt2.c0)) END);
SELECT * FROM vt2, vt0, v0 WHERE (CASE WHEN TOTAL_CHANGES() THEN ((vt0.c0) BETWEEN (v0.c1) AND (vt2.c0)) END);
SELECT ALL * FROM vt2, vt0, v0 WHERE (CASE WHEN TOTAL_CHANGES() THEN ((vt0.c0) BETWEEN (v0.c1) AND (vt2.c0)) END);
SELECT * FROM vt2, vt0, v0 WHERE (CASE WHEN TOTAL_CHANGES() THEN ((vt0.c0) BETWEEN (v0.c1) AND (vt2.c0)) END);
SELECT COUNT(*) FROM vt2 WHERE (CASE WHEN vt2.c1 COLLATE RTRIM THEN (vt2.c1 IN ()) WHEN ((((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)) THEN ']' WHEN (~ ('-57248591')) THEN ((vt2.c0) NOTNULL) ELSE (vt2.c1 IN (vt2.c1, vt2.c1)) END) ORDER BY NULL  NULLS LAST, CAST(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN 5.76918381E8 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END AS BLOB)  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((CASE WHEN vt2.c1 COLLATE RTRIM THEN (vt2.c1 IN ()) WHEN ((((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)) THEN ']' WHEN (~ ('-57248591')) THEN ((vt2.c0) NOTNULL) ELSE (vt2.c1 IN (vt2.c1)) END)AND(((607633563 COLLATE NOCASE) BETWEEN (((vt2.c1) IS FALSE)) AND (((vt2.c0)<(vt2.c0))))))) ORDER BY NULL  NULLS LAST, CAST(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN 5.76918381E8 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END AS BLOB)  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0, vt2 WHERE (((vt2.c0) IS TRUE) COLLATE NOCASE);
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c0) IS TRUE) COLLATE NOCASE)AND(CASE WHEN ((vt2.c0)>=(vt2.c0)) THEN (('	xCZJ?%')%(vt0.c0)) ELSE ((vt2.c1)IS NOT(vt0.c0)) END))) ORDER BY vt2.c1, LIKELIHOOD(DISTINCT vt2.c0 COLLATE NOCASE, CASE WHEN NULL THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END)  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt0, vt2 WHERE (((vt2.c0) IS TRUE) COLLATE NOCASE);
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c0) IS TRUE) COLLATE NOCASE)AND(CASE WHEN ((vt2.c0)>=(vt2.c0)) THEN (('	xCZJ?%')%(vt0.c0)) ELSE ((vt2.c1)IS NOT(vt0.c0)) END))) ORDER BY vt2.c1, LIKELIHOOD(DISTINCT vt2.c0 COLLATE NOCASE, CASE WHEN NULL THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END)  NULLS LAST LIMIT 0x1;
SELECT COUNT(*) FROM vt2 WHERE ((- (vt2.c1)) COLLATE NOCASE) ORDER BY CASE WHEN vt2.c1 COLLATE BINARY THEN 0Xffffffffb9ff682f WHEN vt2.c0 THEN vt2.c1 COLLATE BINARY ELSE ((((vt2.c1)AND(vt2.c0)))AND(vt2.c1)) END, '|	Ii	e
d4' DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2 WHERE ((((- (vt2.c1)) COLLATE NOCASE)AND(IFNULL(vt2.c0 COLLATE BINARY, (((vt2.c0, vt2.c0))<=((vt2.c1, vt2.c1))))))) ORDER BY CASE WHEN vt2.c1 COLLATE BINARY THEN 0Xffffffffb9ff682f WHEN vt2.c0 THEN vt2.c1 COLLATE BINARY ELSE ((((vt2.c1)AND(vt2.c0)))AND(vt2.c1)) END, '|	Ii	e
d4' DESC  NULLS LAST INTERSECT SELECT COUNT(*) FROM vt2 WHERE ((((- (vt2.c0))) IS FALSE)) ORDER BY CASE WHEN vt2.c1 COLLATE BINARY THEN -1174443985 WHEN vt2.c0 THEN vt2.c1 COLLATE BINARY ELSE ((((vt2.c1)AND(vt2.c0)))AND(vt2.c1)) END, '|	Ii	e
d4' DESC  NULLS LAST;
SELECT * FROM vt0, v0 WHERE (((v0.c1)AND(NULL)) COLLATE BINARY) ORDER BY CAST(CAST(v0.c2 AS INTEGER) AS TEXT) ASC;
SELECT DISTINCT * FROM vt0, v0 WHERE (((v0.c1)AND(NULL)) COLLATE BINARY) ORDER BY ((((v0.c1 IN (v0.c2)), NULL COLLATE RTRIM))==(((~ (v0.c1)), CAST(NULL AS TEXT)))) ASC INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((((((((((CASE WHEN v0.c2 THEN v0.c2 END)OR(((v0.c2) ISNULL))))AND((v0.c3 IN (vt0.c0)))))AND((NOT (v0.c0)))))OR((v0.c1 IN ()))))OR('0.8563166161282179' COLLATE RTRIM))) ORDER BY ((((v0.c1 IN (v0.c2)), NULL COLLATE RTRIM))=(((~ (v0.c1)), CAST(NULL AS TEXT)))) ASC;
SELECT * FROM vt0, v0 WHERE (((v0.c1)AND(NULL)) COLLATE BINARY) ORDER BY CAST(CAST(v0.c2 AS INTEGER) AS TEXT) ASC;
SELECT DISTINCT * FROM vt0, v0 WHERE (((v0.c1)AND(NULL)) COLLATE BINARY) ORDER BY ((((v0.c1 IN (v0.c2)), NULL COLLATE RTRIM))==(((~ (v0.c1)), CAST(NULL AS TEXT)))) ASC INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((((((((((CASE WHEN v0.c2 THEN v0.c2 END)OR(((v0.c2) ISNULL))))AND((v0.c3 IN (vt0.c0)))))AND((NOT (v0.c0)))))OR((v0.c1 IN ()))))OR('0.8563166161282179' COLLATE RTRIM))) ORDER BY ((((v0.c1 IN (v0.c2)), NULL COLLATE RTRIM))=(((~ (v0.c1)), CAST(NULL AS TEXT)))) ASC;
SELECT MIN(v0.c1) FROM vt0, v0 WHERE ((~ (((((((((v0.c0)OR(v0.c3)))OR(vt0.c0)))OR(v0.c1)))AND(v0.c0))))) ORDER BY ((CAST(v0.c1 AS BLOB))<>(x'b636')) DESC;
SELECT ALL MIN(v0.c1) FROM vt0, v0 WHERE ((~ (((((((((v0.c0)OR(v0.c3)))OR(vt0.c0)))OR(v0.c1)))AND(v0.c0))))) ORDER BY ((NOT (v0.c2)) IN (json_array(v0.c3, v0.c3, v0.c3, v0.c0, v0.c3)))  NULLS LAST LIMIT 2 INTERSECT SELECT MIN(v0.c1) FROM vt0, v0 WHERE (1.247623579E9) ORDER BY ((NOT (v0.c2)) IN (json_array(v0.c3, v0.c3, v0.c3, v0.c0, v0.c3)))  NULLS LAST LIMIT 0x2;
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE (CAST((+ (NULL)) AS NUMERIC));
SELECT COUNT(*) FROM vt0, vt2 WHERE (((CAST((+ (NULL)) AS NUMERIC))AND((((CASE vt0.c0  WHEN x'e15cfab8' THEN vt0.c0 END, (+ (vt0.c0))))!=((0.3169836146664742, (+ (vt2.c0)))))))) LIMIT 0x3 INTERSECT SELECT ALL COUNT(*) FROM vt0, vt2 WHERE (((CAST(vt2.c1 AS TEXT)) NOT BETWEEN (vt2.c1 COLLATE BINARY) AND ((- (0.5981867927042679))))) LIMIT 3;
SELECT ALL MIN(v0.c0) FROM vt0, v0 CROSS JOIN vt2 ON ((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN -894786012 THEN vt2.c0 END)|(((((vt2.c1)AND(vt0.c0)))OR(v0.c3)))) WHERE ((NULL IN ())) ORDER BY (- (1524141245 COLLATE RTRIM)) ASC, CASE v0.c3  WHEN v0.c1 THEN vt0.c0 ELSE x'' END COLLATE NOCASE  NULLS FIRST;
SELECT DISTINCT MIN(v0.c0) FROM vt0, v0 CROSS JOIN vt2 ON ((CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN -894786012 THEN vt2.c0 END)|(((((vt2.c1)AND(vt0.c0)))OR(v0.c3)))) WHERE ((NULL IN ())) ORDER BY CAST(((v0.c3) BETWEEN (v0.c1) AND (vt0.c0)) AS NUMERIC), NULL  NULLS LAST LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt0 CROSS JOIN v0 ON CASE WHEN ((vt2.c1) IS TRUE) THEN ((((((v0.c1)OR(vt2.c1)))OR(v0.c2)))OR(v0.c0)) WHEN (~ (v0.c0)) THEN (vt2.c1 IN (v0.c3, vt2.c1)) WHEN ((v0.c3)LIKE(vt2.c1)) THEN HEX(DISTINCT v0.c2) WHEN vt2.c1 THEN (v0.c2 IN (vt2.c1)) WHEN ((vt0.c0) ISNULL) THEN 0.40394166698658485 END NATURAL JOIN vt2 WHERE (CAST(vt2.c0 AS REAL)) ORDER BY ((ABS(DISTINCT v0.c0)) BETWEEN (LTRIM(v0.c2, vt2.c0)) AND (v0.c0))  NULLS LAST;
SELECT COUNT(*) FROM vt0 CROSS JOIN v0 ON CASE WHEN ((vt2.c1) IS TRUE) THEN ((((((v0.c1)OR(vt2.c1)))OR(v0.c2)))OR(v0.c0)) WHEN (~ (v0.c0)) THEN (vt2.c1 IN (v0.c3, vt2.c1)) WHEN ((v0.c3)LIKE(vt2.c1)) THEN HEX(DISTINCT v0.c2) WHEN vt2.c1 THEN (v0.c2 IN (vt2.c1)) WHEN ((vt0.c0) ISNULL) THEN 0.40394166698658485 END NATURAL JOIN vt2 WHERE (((CAST(vt2.c0 AS REAL))AND(CAST((~ (vt0.c0)) AS INTEGER)))) ORDER BY ((ABS(DISTINCT v0.c0)) BETWEEN (LTRIM(v0.c2, vt2.c0)) AND (v0.c0))  NULLS LAST;
SELECT * FROM vt0 WHERE (CASE x''  WHEN ((vt0.c0)/(vt0.c0)) THEN (NOT (vt0.c0)) WHEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0))) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) WHEN (((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('-1522911904')) ELSE CAST(vt0.c0 AS NUMERIC) END) ORDER BY ((1.70283704E9) NOTNULL), ((((((((vt0.c0)AND(CAST(vt0.c0 AS NUMERIC))))AND((~ (vt0.c0)))))AND(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND(((x'69c988')>=(vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (CASE x''  WHEN ((vt0.c0)/(vt0.c0)) THEN (NOT (vt0.c0)) WHEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0))) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) WHEN (((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('-1522911904')) ELSE CAST(vt0.c0 AS NUMERIC) END) ORDER BY ((1.70283704E9) NOTNULL), ((((((((vt0.c0)AND(CAST(vt0.c0 AS NUMERIC))))AND((~ (vt0.c0)))))AND(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND(((x'69c988')>=(vt0.c0)))) LIMIT 4;
SELECT * FROM vt0 WHERE (CASE x''  WHEN ((vt0.c0)/(vt0.c0)) THEN (NOT (vt0.c0)) WHEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0))) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) WHEN (((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('-1522911904')) ELSE CAST(vt0.c0 AS NUMERIC) END) ORDER BY ((1.70283704E9) NOTNULL), ((((((((vt0.c0)AND(CAST(vt0.c0 AS NUMERIC))))AND((~ (vt0.c0)))))AND(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND(((x'69c988')>=(vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (CASE x''  WHEN ((vt0.c0)/(vt0.c0)) THEN (NOT (vt0.c0)) WHEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0))) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) WHEN (((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('-1522911904')) ELSE CAST(vt0.c0 AS NUMERIC) END) ORDER BY ((1.70283704E9) NOTNULL), ((((((((vt0.c0)AND(CAST(vt0.c0 AS NUMERIC))))AND((~ (vt0.c0)))))AND(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND(((x'69c988')>=(vt0.c0)))) LIMIT 4;
SELECT MIN(vt2.c0) FROM vt2 WHERE (((((((vt2.c0)*('5')))AND((- (vt2.c0)))))AND(vt2.c1))) ORDER BY ((((vt2.c0)|(vt2.c1)))GLOB(CAST(vt2.c1 AS TEXT))) DESC  NULLS LAST;
SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE (((((((vt2.c0)*('5')))AND((- (vt2.c0)))))AND(vt2.c1))) ORDER BY (((((((((((- (vt2.c0)))OR(vt2.c0)))AND((('1706316569') NOTNULL))))OR(x'' COLLATE NOCASE)))AND(DATE(vt2.c0, vt2.c0, '955661194', vt2.c0))))OR(((vt2.c0)>>(vt2.c1)))), ((vt2.c1 COLLATE NOCASE)<(CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END)) ASC LIMIT 0;
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (((((((((vt0.c0)AND(vt0.c0)))OR(vt2.c0)))OR(vt2.c0)))=((vt0.c0 IN (vt0.c0, vt2.c1)))));
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (((((((((vt0.c0)AND(vt0.c0)))OR(vt2.c0)))OR(vt2.c0)))=((vt0.c0 IN (vt0.c0, vt2.c1))))) ORDER BY vt0.c0 ASC, (((+ (vt0.c0)))AND(((vt2.c1)==(vt0.c0))))  NULLS FIRST INTERSECT SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE ((((((vt0.c0 IN ()))AND(((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))))AND(x''))) ORDER BY vt0.c0 ASC, (((+ (vt0.c0)))AND(((vt2.c1)==(vt0.c0))))  NULLS FIRST;
SELECT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0) ISNULL) AS REAL));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0) ISNULL) AS REAL)) ORDER BY ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, ((CAST(0.4099338637139208 AS REAL))GLOB((- (vt0.c0)))) ASC  NULLS LAST LIMIT 0x4;
SELECT * FROM vt2 WHERE ((vt2.c0 IN ()) COLLATE BINARY) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) NOTNULL)  NULLS FIRST, (((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)) IN (TOTAL_CHANGES())) ASC;
SELECT * FROM vt2 WHERE ((vt2.c0 IN ()) COLLATE BINARY) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) NOTNULL)  NULLS FIRST, (((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)) IN (TOTAL_CHANGES())) ASC LIMIT 2 INTERSECT SELECT * FROM vt2 WHERE (NULL) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) NOTNULL)  NULLS FIRST, (((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)) IN (TOTAL_CHANGES())) ASC LIMIT 0x2;
SELECT * FROM vt2 WHERE ((vt2.c0 IN ()) COLLATE BINARY) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) NOTNULL)  NULLS FIRST, (((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)) IN (TOTAL_CHANGES())) ASC;
SELECT * FROM vt2 WHERE ((vt2.c0 IN ()) COLLATE BINARY) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) NOTNULL)  NULLS FIRST, (((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)) IN (TOTAL_CHANGES())) ASC LIMIT 2 INTERSECT SELECT * FROM vt2 WHERE (NULL) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) NOTNULL)  NULLS FIRST, (((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)) IN (TOTAL_CHANGES())) ASC LIMIT 0x2;
SELECT * FROM vt2 WHERE (CASE vt2.c0  WHEN CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE 0Xffffffffa69ae86b END THEN vt2.c1 WHEN vt2.c0 COLLATE BINARY THEN NULL WHEN vt2.c1 COLLATE NOCASE THEN 0.33510871002154485 END) ORDER BY CAST(CAST(vt2.c1 AS INTEGER) AS TEXT);
SELECT DISTINCT * FROM vt2 WHERE (CASE vt2.c0  WHEN CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE -1499797397 END THEN vt2.c1 WHEN vt2.c0 COLLATE BINARY THEN NULL WHEN vt2.c1 COLLATE NOCASE THEN 0.33510871002154485 END) ORDER BY (CAST(vt2.c1 AS TEXT) IN (COALESCE(DISTINCT vt2.c0, vt2.c0, vt2.c1), ((vt2.c1)<(x'4f')))) DESC  NULLS FIRST, (vt2.c0 IN ()) COLLATE NOCASE ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt2 WHERE (CASE vt2.c0  WHEN CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE 0Xffffffffa69ae86b END THEN vt2.c1 WHEN vt2.c0 COLLATE BINARY THEN NULL WHEN vt2.c1 COLLATE NOCASE THEN 0.33510871002154485 END) ORDER BY CAST(CAST(vt2.c1 AS INTEGER) AS TEXT);
SELECT DISTINCT * FROM vt2 WHERE (CASE vt2.c0  WHEN CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE -1499797397 END THEN vt2.c1 WHEN vt2.c0 COLLATE BINARY THEN NULL WHEN vt2.c1 COLLATE NOCASE THEN 0.33510871002154485 END) ORDER BY (CAST(vt2.c1 AS TEXT) IN (COALESCE(DISTINCT vt2.c0, vt2.c0, vt2.c1), ((vt2.c1)<(x'4f')))) DESC  NULLS FIRST, (vt2.c0 IN ()) COLLATE NOCASE ASC  NULLS LAST LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ((~ (vt2.c1)));
SELECT COUNT(*) FROM vt0, vt2 WHERE ((((~ (vt2.c1)))AND((CAST(vt2.c0 AS INTEGER) IN (x'')))));
SELECT ALL MIN(vt2.c1) FROM vt0, vt2 WHERE (((((vt2.c0)<>(NULL)))>>(CAST(vt0.c0 AS REAL))));
SELECT DISTINCT MIN(vt2.c1) FROM vt0, vt2 NOT INDEXED WHERE (((((((vt2.c0)<(NULL)))>>(CAST(vt0.c0 AS REAL))))AND(CAST(((vt0.c0)+(vt0.c0)) AS TEXT)))) INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt0, vt2 WHERE ('dW5VTtṿ/');
SELECT * FROM vt2 WHERE ((- (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY vt2.c1, TRIM((((vt2.c0))<((vt2.c1))));
SELECT ALL * FROM vt2 WHERE ((- (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY ((CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END)<>(((vt2.c1) NOT NULL))) ASC  NULLS LAST, ((vt2.c0) BETWEEN ('g') AND (vt2.c1 COLLATE NOCASE))  NULLS LAST, (- (CAST(vt2.c1 AS REAL))) DESC;
SELECT * FROM vt2 WHERE ((- (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY vt2.c1, TRIM((((vt2.c0))<((vt2.c1))));
SELECT ALL * FROM vt2 WHERE ((- (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY ((CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END)<>(((vt2.c1) NOT NULL))) ASC  NULLS LAST, ((vt2.c0) BETWEEN ('g') AND (vt2.c1 COLLATE NOCASE))  NULLS LAST, (- (CAST(vt2.c1 AS REAL))) DESC;
SELECT MAX(vt0.c0) FROM vt0, vt2 WHERE ((+ (vt0.c0 COLLATE RTRIM))) ORDER BY (((vt2.c0)IS NOT(vt0.c0)) IN ()) DESC  NULLS LAST, x'';
SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE ((+ (vt0.c0 COLLATE RTRIM))) ORDER BY ABS(DISTINCT (vt2.c0 IN ())) ASC LIMIT 3;
SELECT ALL * FROM v0, vt0 WHERE (CASE ((v0.c2)GLOB(v0.c3))  WHEN CAST(v0.c2 AS NUMERIC) THEN (((v0.c0))<((v0.c0))) WHEN (979414173 IN (v0.c0)) THEN ((v0.c1)*(v0.c2)) WHEN ((v0.c1)-(vt0.c0)) THEN v0.c1 WHEN (v0.c3 IN ()) THEN (((v0.c1, v0.c3, v0.c0))<=((x'', v0.c1, v0.c3))) END) ORDER BY (+ (LAST_INSERT_ROWID())) DESC  NULLS FIRST;
SELECT * FROM v0 NOT INDEXED, vt0 WHERE (CASE ((v0.c2)GLOB(v0.c3))  WHEN CAST(v0.c2 AS NUMERIC) THEN (((v0.c0))<((v0.c0))) WHEN (0X3a60ac9d IN (v0.c0)) THEN ((v0.c1)*(v0.c2)) WHEN ((v0.c1)-(vt0.c0)) THEN v0.c1 WHEN (v0.c3 IN ()) THEN (((v0.c1, v0.c3, v0.c0))<((x'', v0.c1, v0.c3))) END) ORDER BY LIKELY(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN x'82' END), ((CASE WHEN vt0.c0 THEN v0.c0 ELSE 0x71b97652 END)*(LIKELIHOOD(DISTINCT v0.c1, v0.c0))) INTERSECT SELECT * FROM v0, vt0 WHERE (((((((((v0.c2)AND(v0.c3)))OR(v0.c2)))OR(((vt0.c0) NOT BETWEEN (vt0.c0) AND (v0.c1)))))AND((~ (v0.c0))))) ORDER BY LIKELY(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN x'82' END), ((CASE WHEN vt0.c0 THEN v0.c0 ELSE 1907979858 END)*(LIKELIHOOD(DISTINCT v0.c1, v0.c0)));
SELECT ALL * FROM v0, vt0 WHERE (CASE ((v0.c2)GLOB(v0.c3))  WHEN CAST(v0.c2 AS NUMERIC) THEN (((v0.c0))<((v0.c0))) WHEN (979414173 IN (v0.c0)) THEN ((v0.c1)*(v0.c2)) WHEN ((v0.c1)-(vt0.c0)) THEN v0.c1 WHEN (v0.c3 IN ()) THEN (((v0.c1, v0.c3, v0.c0))<=((x'', v0.c1, v0.c3))) END) ORDER BY (+ (LAST_INSERT_ROWID())) DESC  NULLS FIRST;
SELECT * FROM v0 NOT INDEXED, vt0 WHERE (CASE ((v0.c2)GLOB(v0.c3))  WHEN CAST(v0.c2 AS NUMERIC) THEN (((v0.c0))<((v0.c0))) WHEN (0X3a60ac9d IN (v0.c0)) THEN ((v0.c1)*(v0.c2)) WHEN ((v0.c1)-(vt0.c0)) THEN v0.c1 WHEN (v0.c3 IN ()) THEN (((v0.c1, v0.c3, v0.c0))<((x'', v0.c1, v0.c3))) END) ORDER BY LIKELY(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN x'82' END), ((CASE WHEN vt0.c0 THEN v0.c0 ELSE 0x71b97652 END)*(LIKELIHOOD(DISTINCT v0.c1, v0.c0))) INTERSECT SELECT * FROM v0, vt0 WHERE (((((((((v0.c2)AND(v0.c3)))OR(v0.c2)))OR(((vt0.c0) NOT BETWEEN (vt0.c0) AND (v0.c1)))))AND((~ (v0.c0))))) ORDER BY LIKELY(CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN x'82' END), ((CASE WHEN vt0.c0 THEN v0.c0 ELSE 1907979858 END)*(LIKELIHOOD(DISTINCT v0.c1, v0.c0)));
SELECT ALL MAX(v0.c0) FROM v0 WHERE (((((((v0.c0)OR(x'8a54')))AND(v0.c0))) NOT BETWEEN (((((((v0.c1)AND(v0.c3)))OR(v0.c3)))AND(v0.c2))) AND (TRIM(v0.c2))));
SELECT MAX(v0.c0) FROM v0 WHERE (((((((((v0.c0)OR(x'8a54')))AND(v0.c0))) NOT BETWEEN (((((((v0.c1)AND(v0.c3)))OR(v0.c3)))AND(v0.c2))) AND (TRIM(v0.c2))))AND('892394397'))) LIMIT 0;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((((((((x'0145' IN ()))OR((NOT (v0.c0)))))OR((v0.c1 IN (vt0.c0)))))AND(((v0.c1) IS TRUE)))) ORDER BY (((vt2.c0, ((vt0.c0)||(v0.c2)), ((vt2.c0) IS TRUE), ((vt0.c0)OR(vt2.c1))))==(((v0.c0 IN (v0.c1, vt0.c0, v0.c2)), MIN(v0.c0, vt2.c0, vt2.c0, vt0.c0, v0.c0), '0.2680158354918778', (vt0.c0 IN (vt2.c0)))))  NULLS LAST, (((vt2.c1, v0.c0, v0.c2, vt2.c0))<=((vt2.c1, v0.c2, vt2.c1, v0.c0))) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((((((((((x'0145' IN ()))OR((NOT (v0.c0)))))OR((v0.c1 IN (vt0.c0)))))AND(((v0.c1) IS TRUE))))AND((((0.7467107431334639) BETWEEN (vt2.c0) AND (NULL)) IN ())))) ORDER BY (- ((- (v0.c3)))), (((((v0.c3)) BETWEEN ((vt2.c1)) AND ((v0.c0))))%(LIKELIHOOD(vt0.c0, v0.c0)))  NULLS FIRST INTERSECT SELECT ALL * FROM v0, vt0, vt2 WHERE (TYPEOF(NULL)) ORDER BY (- ((- (v0.c3)))), (((((v0.c3)) BETWEEN ((vt2.c1)) AND ((v0.c0))))%(LIKELIHOOD(vt0.c0, v0.c0)))  NULLS FIRST;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((((((((x'0145' IN ()))OR((NOT (v0.c0)))))OR((v0.c1 IN (vt0.c0)))))AND(((v0.c1) IS TRUE)))) ORDER BY (((vt2.c0, ((vt0.c0)||(v0.c2)), ((vt2.c0) IS TRUE), ((vt0.c0)OR(vt2.c1))))==(((v0.c0 IN (v0.c1, vt0.c0, v0.c2)), MIN(v0.c0, vt2.c0, vt2.c0, vt0.c0, v0.c0), '0.2680158354918778', (vt0.c0 IN (vt2.c0)))))  NULLS LAST, (((vt2.c1, v0.c0, v0.c2, vt2.c0))<=((vt2.c1, v0.c2, vt2.c1, v0.c0))) COLLATE BINARY ASC  NULLS LAST;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((((((((((x'0145' IN ()))OR((NOT (v0.c0)))))OR((v0.c1 IN (vt0.c0)))))AND(((v0.c1) IS TRUE))))AND((((0.7467107431334639) BETWEEN (vt2.c0) AND (NULL)) IN ())))) ORDER BY (- ((- (v0.c3)))), (((((v0.c3)) BETWEEN ((vt2.c1)) AND ((v0.c0))))%(LIKELIHOOD(vt0.c0, v0.c0)))  NULLS FIRST INTERSECT SELECT ALL * FROM v0, vt0, vt2 WHERE (TYPEOF(NULL)) ORDER BY (- ((- (v0.c3)))), (((((v0.c3)) BETWEEN ((vt2.c1)) AND ((v0.c0))))%(LIKELIHOOD(vt0.c0, v0.c0)))  NULLS FIRST;
SELECT ALL * FROM vt0, v0 WHERE (v0.c1) ORDER BY (((v0.c1)) NOT BETWEEN ((((((v0.c1)OR(v0.c0)))OR(v0.c1)))) AND (((+ (vt0.c0)))));
SELECT ALL * FROM vt0, v0 WHERE (((v0.c1)AND(CASE WHEN v0.c0 THEN v0.c3 ELSE v0.c2 END COLLATE RTRIM))) ORDER BY (((((((((v0.c3 IN (v0.c1, '-1430190112')))AND((v0.c0 IN (v0.c3)))))OR(DATE(v0.c3, v0.c1, v0.c3, v0.c2))))AND(CAST(v0.c0 AS BLOB))))AND(((v0.c0) NOT BETWEEN (0.672882029177375) AND (v0.c2)))) DESC LIMIT 4;
SELECT ALL * FROM vt0, v0 WHERE (v0.c1) ORDER BY (((v0.c1)) NOT BETWEEN ((((((v0.c1)OR(v0.c0)))OR(v0.c1)))) AND (((+ (vt0.c0)))));
SELECT ALL * FROM vt0, v0 WHERE (((v0.c1)AND(CASE WHEN v0.c0 THEN v0.c3 ELSE v0.c2 END COLLATE RTRIM))) ORDER BY (((((((((v0.c3 IN (v0.c1, '-1430190112')))AND((v0.c0 IN (v0.c3)))))OR(DATE(v0.c3, v0.c1, v0.c3, v0.c2))))AND(CAST(v0.c0 AS BLOB))))AND(((v0.c0) NOT BETWEEN (0.672882029177375) AND (v0.c2)))) DESC LIMIT 4;
SELECT MAX(v0.c0) FROM v0 WHERE (v0.c0 COLLATE RTRIM) ORDER BY CAST(CAST(v0.c3 AS INTEGER) AS REAL)  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (((v0.c0 COLLATE RTRIM)AND(((v0.c2) IS TRUE) COLLATE NOCASE))) ORDER BY TRIM(DISTINCT ((v0.c1) NOTNULL), ((v0.c1) BETWEEN (v0.c2) AND (v0.c3))) DESC  NULLS FIRST, CAST(((v0.c2)<(v0.c1)) AS TEXT)  NULLS LAST INTERSECT SELECT ALL MAX(v0.c0) FROM v0 WHERE (CASE WHEN (((v0.c3, v0.c3, v0.c3))>((v0.c2, v0.c1, -1.97496816E8))) THEN (v0.c0 IN (v0.c0)) END) ORDER BY TRIM(DISTINCT ((v0.c1) NOTNULL), ((v0.c1) BETWEEN (v0.c2) AND (v0.c3))) DESC  NULLS FIRST, CAST(((v0.c2)<(v0.c1)) AS TEXT)  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE (v0.c2);
SELECT ALL COUNT(*) FROM v0, vt0 WHERE (((v0.c2)AND((v0.c1 IN (v0.c1, v0.c1, v0.c2, '')) COLLATE RTRIM))) LIMIT 0X1;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE ((+ ((v0.c3 IN (v0.c3))))) ORDER BY v0.c1 ASC  NULLS LAST, ((0x5d2e0b8e) ISNULL)  NULLS FIRST, ((((v0.c2)!=(v0.c2)))=((v0.c0 IN ()))) DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE ((+ ((v0.c3 IN (v0.c3))))) ORDER BY v0.c1 ASC  NULLS LAST, ((0X5d2e0b8e) ISNULL)  NULLS FIRST, ((((v0.c2)!=(v0.c2)))==((v0.c0 IN ()))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((HEX(DISTINCT vt0.c0))<<(((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0))))) ORDER BY vt0.c0  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((HEX(DISTINCT vt0.c0))<<(((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0))))) ORDER BY vt0.c0  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((x'97bd3a74')AND(((239585346) BETWEEN (NULL) AND (vt0.c0)))))AND((vt0.c0 IN ())))) ORDER BY vt0.c0  NULLS LAST LIMIT 1;
SELECT * FROM vt0, vt2 WHERE ((((((((('-1645899690')AND(CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 END)))AND(((((((((((vt2.c0)AND('')))OR(vt0.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)))))AND(vt0.c0)))AND((vt2.c0 IN (vt0.c0, vt2.c1))))) ORDER BY ((vt2.c1) NOT BETWEEN ((vt2.c0 IN (vt2.c1))) AND (((vt2.c0) NOTNULL))) ASC, ((COALESCE(vt2.c1, vt2.c1, 0.4284493645082942, vt2.c0)) ISNULL), (((- (vt0.c0)))/(ROUND(vt0.c0, vt0.c0))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE ((((((((((('-1645899690')AND(CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 END)))AND(((((((((((vt2.c0)AND('')))OR(vt0.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)))))AND(vt0.c0)))AND((vt2.c0 IN (vt0.c0, vt2.c1)))))AND(vt2.c0))) ORDER BY ((vt2.c1) NOT BETWEEN ((vt2.c0 IN (vt2.c1))) AND (((vt2.c0) NOTNULL))) ASC, ((COALESCE(vt2.c1, vt2.c1, 0.4284493645082942, vt2.c0)) ISNULL), (((- (vt0.c0)))/(ROUND(vt0.c0, vt0.c0))) ASC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE ((((((((('-1645899690')AND(CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 END)))AND(((((((((((vt2.c0)AND('')))OR(vt0.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)))))AND(vt0.c0)))AND((vt2.c0 IN (vt0.c0, vt2.c1))))) ORDER BY ((vt2.c1) NOT BETWEEN ((vt2.c0 IN (vt2.c1))) AND (((vt2.c0) NOTNULL))) ASC, ((COALESCE(vt2.c1, vt2.c1, 0.4284493645082942, vt2.c0)) ISNULL), (((- (vt0.c0)))/(ROUND(vt0.c0, vt0.c0))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE ((((((((((('-1645899690')AND(CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 END)))AND(((((((((((vt2.c0)AND('')))OR(vt0.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)))))AND(vt0.c0)))AND((vt2.c0 IN (vt0.c0, vt2.c1)))))AND(vt2.c0))) ORDER BY ((vt2.c1) NOT BETWEEN ((vt2.c0 IN (vt2.c1))) AND (((vt2.c0) NOTNULL))) ASC, ((COALESCE(vt2.c1, vt2.c1, 0.4284493645082942, vt2.c0)) ISNULL), (((- (vt0.c0)))/(ROUND(vt0.c0, vt0.c0))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt2, vt0 WHERE (CAST((vt2.c0 IN (vt2.c0)) AS NUMERIC)) ORDER BY (((vt2.c0, vt2.c0, vt0.c0, vt2.c1, vt0.c0, vt2.c1)) NOT BETWEEN (((((vt2.c1))<=((vt2.c0))), ((vt0.c0)>(vt2.c0)), CAST(vt2.c0 AS INTEGER), vt2.c1, (~ (vt2.c1)), ((vt0.c0)-(vt2.c1)))) AND ((x'b1', ((((((vt2.c0)AND(0.0723762534186253)))OR(vt2.c1)))AND(vt0.c0)), (((vt2.c0, vt0.c0, vt2.c0))>=((NULL, vt0.c0, ''))), vt2.c1, 0.39844316771604404, ((vt2.c0) ISNULL)))) DESC  NULLS FIRST, ((((((((CAST(vt0.c0 AS REAL))OR((vt2.c1 IN ()))))OR(CAST(vt2.c1 AS INTEGER))))OR(vt2.c0 COLLATE NOCASE)))OR(NULL)), NULL ASC, CAST(((((((-3.88835817E8)AND(vt2.c1)))AND(vt0.c0)))OR(vt0.c0)) AS TEXT)  NULLS FIRST;
SELECT COUNT(*) FROM vt2, vt0 WHERE (((CAST((vt2.c0 IN (vt2.c0)) AS NUMERIC))AND((((vt0.c0, vt0.c0)) NOT BETWEEN ((IFNULL(DISTINCT vt2.c1, vt0.c0), (vt0.c0 IN ()))) AND ((((((vt2.c1)AND(vt0.c0)))AND(vt0.c0)), vt2.c0 COLLATE NOCASE)))))) ORDER BY 0.8810662676021138 DESC, (- ((vt2.c0 IN (vt0.c0))))  NULLS LAST, CHAR('795331170') COLLATE RTRIM ASC LIMIT 0X1 INTERSECT SELECT COUNT(*) FROM vt2, vt0 WHERE ((((vt2.c0, vt2.c0, vt2.c1))<((vt2.c1, vt0.c0, 1962283989))) COLLATE RTRIM) ORDER BY 0.8810662676021138 DESC, (- ((vt2.c0 IN (vt0.c0))))  NULLS LAST, CHAR('795331170') COLLATE RTRIM ASC LIMIT 0x1;
SELECT * FROM vt2, vt0 WHERE ((~ (CAST(vt2.c0 AS INTEGER))));
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((~ (CAST(vt2.c0 AS INTEGER))))AND(((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END)%((NOT (vt2.c0)))))));
SELECT * FROM vt2, vt0 WHERE ((~ (CAST(vt2.c0 AS INTEGER))));
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((~ (CAST(vt2.c0 AS INTEGER))))AND(((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END)%((NOT (vt2.c0)))))));
SELECT * FROM v0, vt0, vt2 WHERE (((((CASE WHEN v0.c0 THEN v0.c3 ELSE vt2.c0 END)OR(((vt0.c0) NOT NULL))))OR((+ (v0.c2)))));
SELECT * FROM v0, vt0, vt2 WHERE (((((CASE WHEN v0.c0 THEN v0.c3 ELSE vt2.c0 END)OR(((vt0.c0) NOT NULL))))OR((+ (v0.c2))))) INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (CASE WHEN ((v0.c2)GLOB(v0.c0)) THEN ((v0.c0) IS FALSE) WHEN ((vt2.c0)AND(v0.c1)) THEN (((vt2.c1)) BETWEEN ((vt2.c1)) AND ((v0.c2))) ELSE json_array(v0.c0, v0.c0, v0.c1, v0.c1, vt2.c1) END);
SELECT * FROM v0, vt0, vt2 WHERE (((((CASE WHEN v0.c0 THEN v0.c3 ELSE vt2.c0 END)OR(((vt0.c0) NOT NULL))))OR((+ (v0.c2)))));
SELECT * FROM v0, vt0, vt2 WHERE (((((CASE WHEN v0.c0 THEN v0.c3 ELSE vt2.c0 END)OR(((vt0.c0) NOT NULL))))OR((+ (v0.c2))))) INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (CASE WHEN ((v0.c2)GLOB(v0.c0)) THEN ((v0.c0) IS FALSE) WHEN ((vt2.c0)AND(v0.c1)) THEN (((vt2.c1)) BETWEEN ((vt2.c1)) AND ((v0.c2))) ELSE json_array(v0.c0, v0.c0, v0.c1, v0.c1, vt2.c1) END);
SELECT MIN(v0.c0) FROM v0 WHERE (((CAST(v0.c0 AS TEXT)) ISNULL));
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((((CAST(v0.c0 AS TEXT)) ISNULL))AND(((((((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))AND(v0.c1)))AND((((NULL, v0.c0, '-1953238461'))<=((v0.c1, 7.70310855E8, v0.c0)))))))) ORDER BY v0.c3 DESC  NULLS LAST;
SELECT MIN(v0.c0) FROM vt0, vt2 CROSS JOIN v0 ON NULL WHERE (TYPEOF(DISTINCT ABS(498073258))) ORDER BY ((vt2.c1)>>(((vt2.c1) BETWEEN (v0.c3) AND (v0.c3))));
SELECT ALL MIN(v0.c0) FROM vt0, vt2 CROSS JOIN v0 ON NULL WHERE (TYPEOF(DISTINCT ABS(498073258))) ORDER BY ((v0.c1 IN (vt2.c1)) IN (v0.c2, (((vt2.c0))>=(('0.6440489233597119'))))) DESC INTERSECT SELECT MIN(v0.c0) FROM vt0, vt2 CROSS JOIN v0 ON NULL WHERE (v0.c3) ORDER BY ((v0.c1 IN (vt2.c1)) IN (v0.c2, (((vt2.c0))>=(('0.6440489233597119'))))) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST(v0.c1 AS INTEGER));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CAST(v0.c1 AS INTEGER))AND(((LTRIM(v0.c1, vt2.c0))AND(CASE v0.c1  WHEN v0.c2 THEN v0.c3 END))))) ORDER BY vt0.c0 DESC  NULLS LAST, (((((vt2.c0))>((v0.c0))))<=(v0.c3)) ASC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST(v0.c1 AS INTEGER));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CAST(v0.c1 AS INTEGER))AND(((LTRIM(v0.c1, vt2.c0))AND(CASE v0.c1  WHEN v0.c2 THEN v0.c3 END))))) ORDER BY vt0.c0 DESC  NULLS LAST, (((((vt2.c0))>((v0.c0))))<=(v0.c3)) ASC;
SELECT ALL * FROM vt2, v0 WHERE (0x5d324d89) ORDER BY (((v0.c0, vt2.c1)) BETWEEN ((CAST(v0.c3 AS BLOB), (v0.c2 IN (vt2.c0)))) AND ((((((vt2.c0)AND(vt2.c1)))AND(NULL)), (vt2.c0 IN (v0.c2))))) ASC, ((((vt2.c1)OR(v0.c2)))+((vt2.c1 IN (v0.c2)))) ASC;
SELECT ALL * FROM vt2, v0 WHERE (0X5d324d89) ORDER BY ((v0.c3 COLLATE NOCASE) NOT BETWEEN (CAST(v0.c2 AS INTEGER)) AND (((v0.c1)|(v0.c3)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt2, v0 WHERE (0x5d324d89) ORDER BY (((v0.c0, vt2.c1)) BETWEEN ((CAST(v0.c3 AS BLOB), (v0.c2 IN (vt2.c0)))) AND ((((((vt2.c0)AND(vt2.c1)))AND(NULL)), (vt2.c0 IN (v0.c2))))) ASC, ((((vt2.c1)OR(v0.c2)))+((vt2.c1 IN (v0.c2)))) ASC;
SELECT ALL * FROM vt2, v0 WHERE (0X5d324d89) ORDER BY ((v0.c3 COLLATE NOCASE) NOT BETWEEN (CAST(v0.c2 AS INTEGER)) AND (((v0.c1)|(v0.c3)))) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST((((x'', v0.c3))!=((v0.c0, v0.c0))) AS TEXT));
SELECT * FROM v0, vt2, vt0 WHERE (((CAST((((x'', v0.c3))>((v0.c0, v0.c0))) AS TEXT))AND(((+ (vt2.c0)) IN (CAST(v0.c0 AS TEXT)))))) ORDER BY MAX((((v0.c1))<>((v0.c2))), v0.c3 COLLATE BINARY, ((v0.c3)-(v0.c3)))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST((((x'', v0.c3))!=((v0.c0, v0.c0))) AS TEXT));
SELECT * FROM v0, vt2, vt0 WHERE (((CAST((((x'', v0.c3))>((v0.c0, v0.c0))) AS TEXT))AND(((+ (vt2.c0)) IN (CAST(v0.c0 AS TEXT)))))) ORDER BY MAX((((v0.c1))<>((v0.c2))), v0.c3 COLLATE BINARY, ((v0.c3)-(v0.c3)))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((CASE WHEN v0.c2 THEN v0.c0 END IN ())) ORDER BY CASE WHEN ((vt2.c1)%(vt0.c0)) THEN ((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c0)) END DESC  NULLS LAST, ((((v0.c0) ISNULL))/((~ (vt0.c0))))  NULLS FIRST, json_type(HEX(vt2.c0))  NULLS LAST;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((((CASE WHEN v0.c2 THEN v0.c0 END IN ()))AND((((v0.c0)) BETWEEN ((((v0.c0)==(v0.c0)))) AND ((((v0.c0)*(v0.c0)))))))) ORDER BY CASE WHEN ((vt2.c1)%(vt0.c0)) THEN ((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c0)) END DESC  NULLS LAST, ((((v0.c0) ISNULL))/((~ (vt0.c0))))  NULLS FIRST, json_type(HEX(vt2.c0))  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt0, vt2 WHERE (CASE ((((((vt0.c0)AND(v0.c1)))AND(vt2.c1)))AND(v0.c2))  WHEN CAST(vt2.c1 AS REAL) THEN ((v0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) END) ORDER BY CASE WHEN ((vt2.c1)%(vt0.c0)) THEN ((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c0)) END DESC  NULLS LAST, ((((v0.c0) ISNULL))/((~ (vt0.c0))))  NULLS FIRST, json_type(HEX(vt2.c0))  NULLS LAST;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((CASE WHEN v0.c2 THEN v0.c0 END IN ())) ORDER BY CASE WHEN ((vt2.c1)%(vt0.c0)) THEN ((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c0)) END DESC  NULLS LAST, ((((v0.c0) ISNULL))/((~ (vt0.c0))))  NULLS FIRST, json_type(HEX(vt2.c0))  NULLS LAST;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((((CASE WHEN v0.c2 THEN v0.c0 END IN ()))AND((((v0.c0)) BETWEEN ((((v0.c0)==(v0.c0)))) AND ((((v0.c0)*(v0.c0)))))))) ORDER BY CASE WHEN ((vt2.c1)%(vt0.c0)) THEN ((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c0)) END DESC  NULLS LAST, ((((v0.c0) ISNULL))/((~ (vt0.c0))))  NULLS FIRST, json_type(HEX(vt2.c0))  NULLS LAST INTERSECT SELECT ALL * FROM v0, vt0, vt2 WHERE (CASE ((((((vt0.c0)AND(v0.c1)))AND(vt2.c1)))AND(v0.c2))  WHEN CAST(vt2.c1 AS REAL) THEN ((v0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) END) ORDER BY CASE WHEN ((vt2.c1)%(vt0.c0)) THEN ((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c0)) END DESC  NULLS LAST, ((((v0.c0) ISNULL))/((~ (vt0.c0))))  NULLS FIRST, json_type(HEX(vt2.c0))  NULLS LAST;
SELECT * FROM v0, vt2, vt0 WHERE (HEX(DISTINCT ((vt0.c0) IS TRUE)));
SELECT DISTINCT * FROM v0, vt2, vt0 NOT INDEXED WHERE (((HEX(DISTINCT ((vt0.c0) IS TRUE)))AND(NULL))) INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((~ (v0.c3)) COLLATE BINARY);
SELECT * FROM v0, vt2, vt0 WHERE (HEX(DISTINCT ((vt0.c0) IS TRUE)));
SELECT DISTINCT * FROM v0, vt2, vt0 NOT INDEXED WHERE (((HEX(DISTINCT ((vt0.c0) IS TRUE)))AND(NULL))) INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((~ (v0.c3)) COLLATE BINARY);
SELECT ALL MAX(v0.c2) FROM v0, vt2, vt0 WHERE ('K#l(') ORDER BY v0.c1 ASC  NULLS LAST, '\'  NULLS FIRST;
SELECT MAX(v0.c2) FROM v0, vt2, vt0 WHERE ('K#l(') ORDER BY v0.c1 ASC  NULLS LAST, '\'  NULLS FIRST INTERSECT SELECT ALL MAX(v0.c2) FROM v0, vt2, vt0 NOT INDEXED WHERE (((((v0.c3)>>(vt2.c0))) NOTNULL)) ORDER BY v0.c1 ASC  NULLS LAST, '\'  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c3)<>(v0.c0)))LIKE((((v0.c2)) BETWEEN ((v0.c3)) AND ((v0.c2)))))) ORDER BY ((((((UNICODE(v0.c1))AND((v0.c0 IN (v0.c1, v0.c3)))))AND(CAST('' AS REAL))))OR(v0.c1)), (((((0.8698146638756858, v0.c2))=((v0.c3, v0.c0))))=(((v0.c2) NOTNULL))), ((((((((((((v0.c3)OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR('0.031110792199687265')))AND(v0.c3)))!=(CAST(0.5777833636318295 AS NUMERIC)));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c3)!=(v0.c0)))LIKE((((v0.c2)) BETWEEN ((v0.c3)) AND ((v0.c2)))))) ORDER BY ((((((UNICODE(v0.c1))AND((v0.c0 IN (v0.c1, v0.c3)))))AND(CAST('' AS REAL))))OR(v0.c1)), (((((0.8698146638756858, v0.c2))=((v0.c3, v0.c0))))==(((v0.c2) NOTNULL))), ((((((((((((v0.c3)OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR('0.031110792199687265')))AND(v0.c3)))<>(CAST(0.5777833636318295 AS NUMERIC))) LIMIT 2;
SELECT * FROM v0, vt0, vt2 WHERE (CASE WHEN ((v0.c2) NOT NULL) THEN ((vt2.c1)*(vt2.c1)) WHEN v0.c2 THEN CAST(v0.c1 AS INTEGER) WHEN ((v0.c2)IS NOT(v0.c0)) THEN ((((((((v0.c1)AND(vt2.c0)))OR(v0.c0)))AND(vt2.c0)))AND(v0.c0)) WHEN CAST(0.6478367682370283 AS NUMERIC) THEN CASE vt2.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt0.c0 END ELSE '詙y}[xLuS' END) ORDER BY (('03B⁎')IS(HEX(DISTINCT v0.c1))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((CASE WHEN ((v0.c2) NOT NULL) THEN ((vt2.c1)*(vt2.c1)) WHEN v0.c2 THEN CAST(v0.c1 AS INTEGER) WHEN ((v0.c2)IS NOT(v0.c0)) THEN ((((((((v0.c1)AND(vt2.c0)))OR(v0.c0)))AND(vt2.c0)))AND(v0.c0)) WHEN CAST(0.6478367682370283 AS NUMERIC) THEN CASE vt2.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt0.c0 END ELSE '詙y}[xLuS' END)AND(SUBSTR(((v0.c2)!=(vt0.c0)), ((v0.c1)!=(vt2.c1)))))) ORDER BY ((v0.c1)/(v0.c3)) COLLATE NOCASE DESC INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((COALESCE(DISTINCT v0.c2, v0.c2, vt0.c0, v0.c1))OR(CAST(v0.c3 AS NUMERIC))))OR(v0.c1))) ORDER BY ((v0.c1)/(v0.c3)) COLLATE NOCASE DESC;
SELECT * FROM v0, vt0, vt2 WHERE (CASE WHEN ((v0.c2) NOT NULL) THEN ((vt2.c1)*(vt2.c1)) WHEN v0.c2 THEN CAST(v0.c1 AS INTEGER) WHEN ((v0.c2)IS NOT(v0.c0)) THEN ((((((((v0.c1)AND(vt2.c0)))OR(v0.c0)))AND(vt2.c0)))AND(v0.c0)) WHEN CAST(0.6478367682370283 AS NUMERIC) THEN CASE vt2.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt0.c0 END ELSE '詙y}[xLuS' END) ORDER BY (('03B⁎')IS(HEX(DISTINCT v0.c1))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((CASE WHEN ((v0.c2) NOT NULL) THEN ((vt2.c1)*(vt2.c1)) WHEN v0.c2 THEN CAST(v0.c1 AS INTEGER) WHEN ((v0.c2)IS NOT(v0.c0)) THEN ((((((((v0.c1)AND(vt2.c0)))OR(v0.c0)))AND(vt2.c0)))AND(v0.c0)) WHEN CAST(0.6478367682370283 AS NUMERIC) THEN CASE vt2.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt0.c0 END ELSE '詙y}[xLuS' END)AND(SUBSTR(((v0.c2)!=(vt0.c0)), ((v0.c1)!=(vt2.c1)))))) ORDER BY ((v0.c1)/(v0.c3)) COLLATE NOCASE DESC INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((COALESCE(DISTINCT v0.c2, v0.c2, vt0.c0, v0.c1))OR(CAST(v0.c3 AS NUMERIC))))OR(v0.c1))) ORDER BY ((v0.c1)/(v0.c3)) COLLATE NOCASE DESC;
SELECT ALL MIN(v0.c3) FROM v0, vt0, vt2 WHERE (NULL);
SELECT DISTINCT MIN(v0.c3) FROM v0, vt0, vt2 WHERE (NULL) LIMIT 0x0;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((v0.c1 COLLATE RTRIM)GLOB('ý'))) ORDER BY '1839189666'  NULLS FIRST, ((vt2.c1 IN (vt2.c0)) IN (((((((((vt2.c1)AND(v0.c2)))OR('')))OR(v0.c3)))AND(v0.c2)))) DESC  NULLS LAST, ((LOWER(vt0.c0)) NOT BETWEEN ((+ (v0.c3))) AND ((~ (v0.c0)))) ASC, (((+ (vt2.c1))) ISNULL) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((((v0.c1 COLLATE RTRIM)GLOB('ý')))AND((((CAST(v0.c1 AS INTEGER), ((vt0.c0)==(0.7807732688761823)), vt2.c1, v0.c0, ((((vt0.c0)OR(v0.c3)))OR(v0.c2))))<=((COALESCE(DISTINCT vt2.c0, v0.c3, vt2.c1, vt0.c0), v0.c2, v0.c3, ((NULL) IS FALSE), (vt2.c1 IN (vt0.c0, vt2.c0)))))))) ORDER BY (- (vt0.c0)) COLLATE BINARY  NULLS FIRST, (((((((+ (vt0.c0)))AND(((v0.c0)>>(vt2.c0)))))OR(CASE WHEN v0.c0 THEN v0.c1 END)))AND(((vt2.c1)>>(v0.c0)))) LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((v0.c1 COLLATE RTRIM)GLOB('ý'))) ORDER BY '1839189666'  NULLS FIRST, ((vt2.c1 IN (vt2.c0)) IN (((((((((vt2.c1)AND(v0.c2)))OR('')))OR(v0.c3)))AND(v0.c2)))) DESC  NULLS LAST, ((LOWER(vt0.c0)) NOT BETWEEN ((+ (v0.c3))) AND ((~ (v0.c0)))) ASC, (((+ (vt2.c1))) ISNULL) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((((v0.c1 COLLATE RTRIM)GLOB('ý')))AND((((CAST(v0.c1 AS INTEGER), ((vt0.c0)==(0.7807732688761823)), vt2.c1, v0.c0, ((((vt0.c0)OR(v0.c3)))OR(v0.c2))))<=((COALESCE(DISTINCT vt2.c0, v0.c3, vt2.c1, vt0.c0), v0.c2, v0.c3, ((NULL) IS FALSE), (vt2.c1 IN (vt0.c0, vt2.c0)))))))) ORDER BY (- (vt0.c0)) COLLATE BINARY  NULLS FIRST, (((((((+ (vt0.c0)))AND(((v0.c0)>>(vt2.c0)))))OR(CASE WHEN v0.c0 THEN v0.c1 END)))AND(((vt2.c1)>>(v0.c0)))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY ((JULIANDAY(x'8a', vt0.c0, vt0.c0, vt0.c0))IS((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST, json_quote(vt0.c0) COLLATE NOCASE  NULLS LAST, (((vt0.c0, vt0.c0))!=((vt0.c0, vt0.c0))) COLLATE BINARY;
SELECT DISTINCT * FROM vt0 WHERE (((NULL)AND(((((((((((vt0.c0 COLLATE BINARY)OR(((vt0.c0) NOT NULL))))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN NULL THEN vt0.c0 END)))OR((vt0.c0 IN ()))))OR(((vt0.c0)==(vt0.c0)))))AND(TRIM(vt0.c0)))))) ORDER BY ((JULIANDAY(x'8a', vt0.c0, vt0.c0, vt0.c0))IS((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST, json_quote(vt0.c0) COLLATE NOCASE  NULLS LAST, (((vt0.c0, vt0.c0))!=((vt0.c0, vt0.c0))) COLLATE BINARY;
SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY ((JULIANDAY(x'8a', vt0.c0, vt0.c0, vt0.c0))IS((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST, json_quote(vt0.c0) COLLATE NOCASE  NULLS LAST, (((vt0.c0, vt0.c0))!=((vt0.c0, vt0.c0))) COLLATE BINARY;
SELECT DISTINCT * FROM vt0 WHERE (((NULL)AND(((((((((((vt0.c0 COLLATE BINARY)OR(((vt0.c0) NOT NULL))))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN NULL THEN vt0.c0 END)))OR((vt0.c0 IN ()))))OR(((vt0.c0)==(vt0.c0)))))AND(TRIM(vt0.c0)))))) ORDER BY ((JULIANDAY(x'8a', vt0.c0, vt0.c0, vt0.c0))IS((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST, json_quote(vt0.c0) COLLATE NOCASE  NULLS LAST, (((vt0.c0, vt0.c0))!=((vt0.c0, vt0.c0))) COLLATE BINARY;
SELECT * FROM vt0 CROSS JOIN v0 ON PRINTF(v0.c3) LEFT OUTER JOIN vt2 ON ((vt0.c0 COLLATE RTRIM) BETWEEN (((v0.c0)-(v0.c0))) AND (((((v0.c1)OR(v0.c2)))OR(v0.c0)))) WHERE (NULLIF(IFNULL(DISTINCT v0.c1, v0.c0), (NOT (v0.c0)))) ORDER BY v0.c0 ASC;
SELECT ALL * FROM vt0 CROSS JOIN v0 ON PRINTF(v0.c3) LEFT OUTER JOIN vt2 ON ((vt0.c0 COLLATE RTRIM) BETWEEN (((v0.c0)-(v0.c0))) AND (((((v0.c1)OR(v0.c2)))OR(v0.c0)))) WHERE (((NULLIF(IFNULL(DISTINCT v0.c1, v0.c0), (NOT (v0.c0))))AND(json_extract((NULL IN ()), (((v0.c2, vt2.c1, v0.c0)) NOT BETWEEN ((v0.c0, 0.30463560995365435, v0.c3)) AND ((v0.c3, vt0.c0, v0.c1))), v0.c3)))) ORDER BY v0.c0 ASC LIMIT 0x0;
SELECT * FROM vt0 CROSS JOIN v0 ON PRINTF(v0.c3) LEFT OUTER JOIN vt2 ON ((vt0.c0 COLLATE RTRIM) BETWEEN (((v0.c0)-(v0.c0))) AND (((((v0.c1)OR(v0.c2)))OR(v0.c0)))) WHERE (NULLIF(IFNULL(DISTINCT v0.c1, v0.c0), (NOT (v0.c0)))) ORDER BY v0.c0 ASC;
SELECT ALL * FROM vt0 CROSS JOIN v0 ON PRINTF(v0.c3) LEFT OUTER JOIN vt2 ON ((vt0.c0 COLLATE RTRIM) BETWEEN (((v0.c0)-(v0.c0))) AND (((((v0.c1)OR(v0.c2)))OR(v0.c0)))) WHERE (((NULLIF(IFNULL(DISTINCT v0.c1, v0.c0), (NOT (v0.c0))))AND(json_extract((NULL IN ()), (((v0.c2, vt2.c1, v0.c0)) NOT BETWEEN ((v0.c0, 0.30463560995365435, v0.c3)) AND ((v0.c3, vt0.c0, v0.c1))), v0.c3)))) ORDER BY v0.c0 ASC LIMIT 0x0;
SELECT MAX(vt2.c1) FROM vt2 WHERE (((CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END)LIKE(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY (((((('')AND(vt2.c0)))AND(NULL)))OR(vt2.c0)) COLLATE BINARY  NULLS LAST;
SELECT MAX(vt2.c1) FROM vt2 WHERE (((CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END)LIKE(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY NULL, (NOT (vt2.c1)) DESC LIMIT 0x2;
SELECT * FROM v0, vt2 WHERE ((((((vt2.c0))>=((v0.c0)))) BETWEEN (((v0.c0)|(v0.c3))) AND (v0.c1 COLLATE RTRIM)));
SELECT ALL * FROM v0, vt2 WHERE ((((((vt2.c0))>((v0.c0)))) BETWEEN (((v0.c0)|(v0.c3))) AND (v0.c1 COLLATE RTRIM))) ORDER BY CASE IFNULL(DISTINCT v0.c2, v0.c0)  WHEN ((v0.c3)&(vt2.c1)) THEN (v0.c3 IN (v0.c0)) ELSE (v0.c3 IN ()) END ASC  NULLS FIRST, CAST(v0.c1 COLLATE RTRIM AS BLOB), ((v0.c3 COLLATE RTRIM)GLOB(CAST(v0.c3 AS INTEGER))) DESC INTERSECT SELECT * FROM v0, vt2 WHERE (((((v0.c0) NOT BETWEEN (vt2.c0) AND (NULL)))*(STRFTIME(v0.c0, vt2.c1, vt2.c0)))) ORDER BY CASE IFNULL(DISTINCT v0.c2, v0.c0)  WHEN ((v0.c3)&(vt2.c1)) THEN (v0.c3 IN (v0.c0)) ELSE (v0.c3 IN ()) END ASC  NULLS FIRST, CAST(v0.c1 COLLATE RTRIM AS BLOB), ((v0.c3 COLLATE RTRIM)GLOB(CAST(v0.c3 AS INTEGER))) DESC;
SELECT * FROM v0, vt2 WHERE ((((((vt2.c0))>=((v0.c0)))) BETWEEN (((v0.c0)|(v0.c3))) AND (v0.c1 COLLATE RTRIM)));
SELECT ALL * FROM v0, vt2 WHERE ((((((vt2.c0))>((v0.c0)))) BETWEEN (((v0.c0)|(v0.c3))) AND (v0.c1 COLLATE RTRIM))) ORDER BY CASE IFNULL(DISTINCT v0.c2, v0.c0)  WHEN ((v0.c3)&(vt2.c1)) THEN (v0.c3 IN (v0.c0)) ELSE (v0.c3 IN ()) END ASC  NULLS FIRST, CAST(v0.c1 COLLATE RTRIM AS BLOB), ((v0.c3 COLLATE RTRIM)GLOB(CAST(v0.c3 AS INTEGER))) DESC INTERSECT SELECT * FROM v0, vt2 WHERE (((((v0.c0) NOT BETWEEN (vt2.c0) AND (NULL)))*(STRFTIME(v0.c0, vt2.c1, vt2.c0)))) ORDER BY CASE IFNULL(DISTINCT v0.c2, v0.c0)  WHEN ((v0.c3)&(vt2.c1)) THEN (v0.c3 IN (v0.c0)) ELSE (v0.c3 IN ()) END ASC  NULLS FIRST, CAST(v0.c1 COLLATE RTRIM AS BLOB), ((v0.c3 COLLATE RTRIM)GLOB(CAST(v0.c3 AS INTEGER))) DESC;
SELECT ALL * FROM vt0, vt2 WHERE ((~ (0.575141059001527)));
SELECT ALL * FROM vt0, vt2 WHERE ((~ (0.575141059001527))) ORDER BY (CAST(vt0.c0 AS BLOB) IN ())  NULLS LAST INTERSECT SELECT ALL * FROM vt0, vt2 WHERE (((CASE WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c0 END)*(((vt0.c0) ISNULL)))) ORDER BY (CAST(vt0.c0 AS BLOB) IN ())  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE ((~ (0.575141059001527)));
SELECT ALL * FROM vt0, vt2 WHERE ((~ (0.575141059001527))) ORDER BY (CAST(vt0.c0 AS BLOB) IN ())  NULLS LAST INTERSECT SELECT ALL * FROM vt0, vt2 WHERE (((CASE WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c0 END)*(((vt0.c0) ISNULL)))) ORDER BY (CAST(vt0.c0 AS BLOB) IN ())  NULLS LAST;
SELECT MIN(v0.c0) FROM vt0, v0 WHERE ((~ (vt0.c0)) COLLATE RTRIM);
SELECT MIN(v0.c0) FROM vt0, v0 WHERE ((((~ (vt0.c0)) COLLATE RTRIM)AND(v0.c3))) ORDER BY (NOT (((((((((((v0.c1)OR(v0.c2)))AND(v0.c0)))AND(v0.c1)))OR(v0.c2)))AND(v0.c2))))  NULLS FIRST, NULL  NULLS FIRST, CAST(((vt0.c0)<=(v0.c2)) AS REAL) DESC;
SELECT * FROM v0, vt2, vt0 WHERE (((((vt2.c0) NOT NULL)) BETWEEN (((vt2.c0)IS(v0.c2))) AND (((v0.c2) IS TRUE))));
SELECT * FROM v0, vt2, vt0 WHERE (((((vt2.c0) NOT NULL)) BETWEEN (((vt2.c0)IS(v0.c2))) AND (((v0.c2) IS TRUE)))) ORDER BY ((vt2.c0) NOT BETWEEN ((((vt0.c0, vt2.c0, v0.c1))<((v0.c3, vt2.c1, vt2.c1)))) AND (((vt2.c1)*(v0.c1)))) LIMIT 0X0;
SELECT * FROM v0, vt2, vt0 WHERE (((((vt2.c0) NOT NULL)) BETWEEN (((vt2.c0)IS(v0.c2))) AND (((v0.c2) IS TRUE))));
SELECT * FROM v0, vt2, vt0 WHERE (((((vt2.c0) NOT NULL)) BETWEEN (((vt2.c0)IS(v0.c2))) AND (((v0.c2) IS TRUE)))) ORDER BY ((vt2.c0) NOT BETWEEN ((((vt0.c0, vt2.c0, v0.c1))<((v0.c3, vt2.c1, vt2.c1)))) AND (((vt2.c1)*(v0.c1)))) LIMIT 0X0;
SELECT MAX(v0.c3) FROM v0, vt0 WHERE (CASE WHEN ((v0.c2) NOT NULL) THEN (((v0.c1))>((vt0.c0))) ELSE v0.c3 END);
SELECT DISTINCT MAX(v0.c3) FROM v0, vt0 WHERE (CASE WHEN ((v0.c2) NOT NULL) THEN (((v0.c1))>((vt0.c0))) ELSE v0.c3 END) ORDER BY (- (v0.c2))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN v0.c1 WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END) IS FALSE)  NULLS LAST, PRINTF(HEX(DISTINCT v0.c2), TYPEOF(vt0.c0), highlight(vt0.c0, v0.c0, v0.c3, v0.c3)) DESC INTERSECT SELECT DISTINCT MAX(v0.c3) FROM v0, vt0 WHERE (((v0.c0)LIKE(v0.c1)) COLLATE BINARY) ORDER BY (- (v0.c2))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN v0.c1 WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END) IS FALSE)  NULLS LAST, PRINTF(HEX(DISTINCT v0.c2), TYPEOF(vt0.c0), highlight(vt0.c0, v0.c0, v0.c3, v0.c3)) DESC;
SELECT ALL MAX(v0.c1) FROM v0, vt0 WHERE (((HEX(v0.c0))>>((((v0.c0))<((v0.c0)))))) ORDER BY ((((vt0.c0)==(v0.c0))) BETWEEN (((v0.c2) ISNULL)) AND (v0.c0)) DESC  NULLS FIRST;
SELECT ALL MAX(v0.c1) FROM v0, vt0 WHERE (((HEX(v0.c0))>>((((v0.c0))<((v0.c0)))))) ORDER BY ''  NULLS FIRST, (((v0.c3, v0.c2))<=((v0.c1, vt0.c0))) COLLATE BINARY LIMIT 0X1 INTERSECT SELECT ALL MAX(v0.c1) FROM v0, vt0 WHERE (((((((v0.c2 COLLATE BINARY)OR(vt0.c0 COLLATE RTRIM)))AND((((v0.c1, v0.c0, v0.c3))>=(('-1459080318', vt0.c0, v0.c1))))))AND(TRIM(v0.c0, vt0.c0)))) ORDER BY ''  NULLS FIRST, (((v0.c3, v0.c2))<=((v0.c1, vt0.c0))) COLLATE BINARY LIMIT 0x1;
SELECT * FROM vt0 WHERE (((vt0.c0) IS FALSE));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0) IS FALSE))AND(LIKE(2.138090781E9, (+ (vt0.c0)))))) ORDER BY ((((vt0.c0) NOT NULL))GLOB(CASE WHEN vt0.c0 THEN NULL ELSE vt0.c0 END)) ASC  NULLS FIRST, (((vt0.c0)+(vt0.c0)) IN (CAST(vt0.c0 AS BLOB), CASE WHEN -1.459080318E9 THEN vt0.c0 WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN '439109537' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) ASC;
SELECT * FROM vt0 WHERE (((vt0.c0) IS FALSE));
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0) IS FALSE))AND(LIKE(2.138090781E9, (+ (vt0.c0)))))) ORDER BY ((((vt0.c0) NOT NULL))GLOB(CASE WHEN vt0.c0 THEN NULL ELSE vt0.c0 END)) ASC  NULLS FIRST, (((vt0.c0)+(vt0.c0)) IN (CAST(vt0.c0 AS BLOB), CASE WHEN -1.459080318E9 THEN vt0.c0 WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN '439109537' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) ASC;
SELECT COUNT(*) FROM v0, vt2 WHERE (CASE WHEN ((vt2.c1) NOT NULL) THEN ((v0.c3) IS TRUE) END);
SELECT ALL COUNT(*) FROM v0, vt2 WHERE (CASE WHEN ((vt2.c1) NOT NULL) THEN ((v0.c3) IS TRUE) END) ORDER BY ((((v0.c2)>=(v0.c3))) BETWEEN (CAST(vt2.c1 AS NUMERIC)) AND (((v0.c3) NOT BETWEEN (x'') AND (v0.c0))))  NULLS FIRST, ((((((((CAST(vt2.c1 AS NUMERIC))OR((~ (v0.c3)))))OR(((-1938586077) NOT BETWEEN (v0.c0) AND (v0.c2)))))OR((NOT (v0.c1)))))AND(((v0.c1) NOTNULL))) DESC, ((0.5661198212849418)OR(CAST(v0.c0 AS TEXT))) INTERSECT SELECT ALL COUNT(*) FROM v0, vt2 WHERE (CAST(vt2.c0 AS INTEGER)) ORDER BY ((((v0.c2)>=(v0.c3))) BETWEEN (CAST(vt2.c1 AS NUMERIC)) AND (((v0.c3) NOT BETWEEN (x'') AND (v0.c0))))  NULLS FIRST, ((((((((CAST(vt2.c1 AS NUMERIC))OR((~ (v0.c3)))))OR(((0Xffffffff8c738623) NOT BETWEEN (v0.c0) AND (v0.c2)))))OR((NOT (v0.c1)))))AND(((v0.c1) NOTNULL))) DESC, ((0.5661198212849418)OR(CAST(v0.c0 AS TEXT)));
SELECT ALL MAX(vt2.c0) FROM v0, vt2 INNER JOIN vt0 ON '済⓴1T' WHERE (NULL);
SELECT DISTINCT MAX(vt2.c0) FROM v0, vt2 INNER JOIN vt0 ON '済⓴1T' WHERE (((NULL)AND((((0.9149605076669954)) BETWEEN ((CAST(v0.c2 AS INTEGER))) AND ((((((v0.c1)OR(vt2.c0)))OR(vt2.c1)))))))) ORDER BY (- (v0.c3 COLLATE BINARY)) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM v0, vt2 INNER JOIN vt0 ON '済⓴1T' WHERE (json_array_length(0.027666710345717438, ((0.5693281626069725)<=(v0.c3)))) ORDER BY (- (v0.c3 COLLATE BINARY)) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 NATURAL JOIN v0 WHERE (((((NULL)AND(-1.4402552E8)))AND(x'16')));
SELECT ALL * FROM vt0, vt2 NOT INDEXED NATURAL JOIN v0 WHERE (((((((NULL)AND(-1.4402552E8)))AND(x'16')))AND(CAST(((v0.c3)GLOB(vt2.c1)) AS BLOB)))) ORDER BY ((((((vt0.c0)OR(vt2.c0)))OR(vt2.c1)))IS((0.5244532924770375 IN (vt0.c0)))) ASC, (((v0.c1) BETWEEN (v0.c1) AND (vt0.c0)) IN ('0.7100278653416723'))  NULLS FIRST, ((((((((('33514151')AND(vt2.c1)))AND(vt0.c0)))OR(vt0.c0)), ((x'e5') BETWEEN (v0.c0) AND (vt2.c0))))<((((v0.c0)>=(vt0.c0)), ((v0.c3)GLOB(v0.c0))))) INTERSECT SELECT * FROM vt0, vt2 NATURAL JOIN v0 WHERE (v0.c3) ORDER BY ((((((vt0.c0)OR(vt2.c0)))OR(vt2.c1)))IS((0.5244532924770375 IN (vt0.c0)))) ASC, (((v0.c1) BETWEEN (v0.c1) AND (vt0.c0)) IN ('0.7100278653416723'))  NULLS FIRST, ((((((((('33514151')AND(vt2.c1)))AND(vt0.c0)))OR(vt0.c0)), ((x'e5') BETWEEN (v0.c0) AND (vt2.c0))))<((((v0.c0)>=(vt0.c0)), ((v0.c3)GLOB(v0.c0)))));
SELECT ALL * FROM vt0, vt2 NATURAL JOIN v0 WHERE (((((NULL)AND(-1.4402552E8)))AND(x'16')));
SELECT ALL * FROM vt0, vt2 NOT INDEXED NATURAL JOIN v0 WHERE (((((((NULL)AND(-1.4402552E8)))AND(x'16')))AND(CAST(((v0.c3)GLOB(vt2.c1)) AS BLOB)))) ORDER BY ((((((vt0.c0)OR(vt2.c0)))OR(vt2.c1)))IS((0.5244532924770375 IN (vt0.c0)))) ASC, (((v0.c1) BETWEEN (v0.c1) AND (vt0.c0)) IN ('0.7100278653416723'))  NULLS FIRST, ((((((((('33514151')AND(vt2.c1)))AND(vt0.c0)))OR(vt0.c0)), ((x'e5') BETWEEN (v0.c0) AND (vt2.c0))))<((((v0.c0)>=(vt0.c0)), ((v0.c3)GLOB(v0.c0))))) INTERSECT SELECT * FROM vt0, vt2 NATURAL JOIN v0 WHERE (v0.c3) ORDER BY ((((((vt0.c0)OR(vt2.c0)))OR(vt2.c1)))IS((0.5244532924770375 IN (vt0.c0)))) ASC, (((v0.c1) BETWEEN (v0.c1) AND (vt0.c0)) IN ('0.7100278653416723'))  NULLS FIRST, ((((((((('33514151')AND(vt2.c1)))AND(vt0.c0)))OR(vt0.c0)), ((x'e5') BETWEEN (v0.c0) AND (vt2.c0))))<((((v0.c0)>=(vt0.c0)), ((v0.c3)GLOB(v0.c0)))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((- (CAST(v0.c3 AS INTEGER)))) ORDER BY (((((((((((v0.c1 IN (vt0.c0)))AND(x'309c')))AND(CASE WHEN vt2.c0 THEN v0.c2 WHEN NULL THEN vt0.c0 WHEN v0.c0 THEN v0.c1 ELSE 'nd' END)))OR(vt0.c0 COLLATE RTRIM)))OR(((vt0.c0)+(1.090913443E9)))))OR(vt2.c1 COLLATE BINARY)) DESC, ((CAST(v0.c3 AS REAL))>=(CAST(v0.c2 AS TEXT))) DESC;
SELECT * FROM vt0, vt2, v0 WHERE ((- (CAST(v0.c3 AS INTEGER)))) ORDER BY ((((((((((((CAST(vt0.c0 AS BLOB))AND(DATETIME(x'9eb946', v0.c3, vt2.c1, v0.c0, v0.c0))))OR((v0.c1 IN (v0.c3)))))AND(CAST(vt2.c0 AS TEXT))))OR('nowm')))AND((((v0.c3, vt0.c0, v0.c1, v0.c1))>((v0.c0, x'cb', -8.33993359E8, v0.c0))))))AND(((((((v0.c2)AND(x'44')))AND(vt2.c1)))OR(v0.c3)))) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (-366212729) ORDER BY ((((((((((((CAST(vt0.c0 AS BLOB))AND(DATETIME(x'9eb946', v0.c3, vt2.c1, v0.c0, v0.c0))))OR((v0.c1 IN (v0.c3)))))AND(CAST(vt2.c0 AS TEXT))))OR('nowm')))AND((((v0.c3, vt0.c0, v0.c1, v0.c1))>((v0.c0, x'cb', -8.33993359E8, v0.c0))))))AND(((((((v0.c2)AND(x'44')))AND(vt2.c1)))OR(v0.c3)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((- (CAST(v0.c3 AS INTEGER)))) ORDER BY (((((((((((v0.c1 IN (vt0.c0)))AND(x'309c')))AND(CASE WHEN vt2.c0 THEN v0.c2 WHEN NULL THEN vt0.c0 WHEN v0.c0 THEN v0.c1 ELSE 'nd' END)))OR(vt0.c0 COLLATE RTRIM)))OR(((vt0.c0)+(1.090913443E9)))))OR(vt2.c1 COLLATE BINARY)) DESC, ((CAST(v0.c3 AS REAL))>=(CAST(v0.c2 AS TEXT))) DESC;
SELECT * FROM vt0, vt2, v0 WHERE ((- (CAST(v0.c3 AS INTEGER)))) ORDER BY ((((((((((((CAST(vt0.c0 AS BLOB))AND(DATETIME(x'9eb946', v0.c3, vt2.c1, v0.c0, v0.c0))))OR((v0.c1 IN (v0.c3)))))AND(CAST(vt2.c0 AS TEXT))))OR('nowm')))AND((((v0.c3, vt0.c0, v0.c1, v0.c1))>((v0.c0, x'cb', -8.33993359E8, v0.c0))))))AND(((((((v0.c2)AND(x'44')))AND(vt2.c1)))OR(v0.c3)))) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (-366212729) ORDER BY ((((((((((((CAST(vt0.c0 AS BLOB))AND(DATETIME(x'9eb946', v0.c3, vt2.c1, v0.c0, v0.c0))))OR((v0.c1 IN (v0.c3)))))AND(CAST(vt2.c0 AS TEXT))))OR('nowm')))AND((((v0.c3, vt0.c0, v0.c1, v0.c1))>((v0.c0, x'cb', -8.33993359E8, v0.c0))))))AND(((((((v0.c2)AND(x'44')))AND(vt2.c1)))OR(v0.c3)))) ASC  NULLS FIRST;
SELECT MAX(vt2.c0) FROM v0 LEFT OUTER JOIN vt2 ON ((((v0.c3) BETWEEN (vt2.c1) AND (v0.c3))) NOT BETWEEN (NULLIF(v0.c0, vt2.c0)) AND ((+ (vt2.c1)))) WHERE (CAST(CASE WHEN 0.8260925016516538 THEN '0.45939357815304416' WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN vt2.c0 ELSE vt2.c0 END AS REAL)) ORDER BY TYPEOF(((vt2.c0) ISNULL)) DESC, (CAST(vt2.c1 AS NUMERIC) IN ()) ASC  NULLS LAST;
SELECT DISTINCT MAX(vt2.c0) FROM v0 LEFT OUTER JOIN vt2 ON ((((v0.c3) BETWEEN (vt2.c1) AND (v0.c3))) NOT BETWEEN (NULLIF(v0.c0, vt2.c0)) AND ((+ (vt2.c1)))) WHERE (CAST(CASE WHEN 0.8260925016516538 THEN '0.45939357815304416' WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN vt2.c0 ELSE vt2.c0 END AS REAL)) ORDER BY TYPEOF(((vt2.c0) ISNULL)) DESC, (CAST(vt2.c1 AS NUMERIC) IN ()) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM v0 LEFT OUTER JOIN vt2 ON ((((v0.c3) BETWEEN (vt2.c1) AND (v0.c3))) NOT BETWEEN (NULLIF(v0.c0, vt2.c0)) AND ((+ (vt2.c1)))) WHERE (((((((v0.c3, 'q-eM)\G'))<((v0.c2, vt2.c1))), CAST(v0.c0 AS NUMERIC)))>((v0.c2 COLLATE RTRIM, v0.c3 COLLATE RTRIM)))) ORDER BY TYPEOF(((vt2.c0) ISNULL)) DESC, (CAST(vt2.c1 AS NUMERIC) IN ()) ASC  NULLS LAST LIMIT 0x2;
SELECT ALL MIN(v0.c0) FROM v0, vt0 WHERE ((((((((0.7489383044144575 IN (v0.c0, v0.c1)))OR((NOT (vt0.c0)))))AND((v0.c1 IN ()))))AND(((v0.c1) NOT NULL))));
SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE ((((((((((0.7489383044144575 IN (v0.c0, v0.c1)))OR((NOT (vt0.c0)))))AND((v0.c1 IN ()))))AND(((v0.c1) NOT NULL))))AND(((((v0.c3)GLOB(v0.c2)))>>((v0.c1 IN ())))))) LIMIT 0x2;
SELECT MAX(v0.c2) FROM vt2, v0, vt0 WHERE ((- (v0.c0))) ORDER BY CAST((~ (vt2.c0)) AS BLOB) DESC;
SELECT MAX(v0.c2) FROM vt2, v0, vt0 WHERE ((((- (v0.c0)))AND(((((x'095d') NOT BETWEEN (0xffffffff8b93f243) AND (vt2.c0))) NOT BETWEEN (COALESCE(DISTINCT v0.c2, vt2.c0)) AND (((vt2.c0) NOT BETWEEN (v0.c0) AND (v0.c2))))))) ORDER BY (((v0.c2, vt2.c1)) BETWEEN ((((vt2.c1)GLOB(v0.c2)), CAST(vt2.c0 AS REAL))) AND ((v0.c2, '-1992440165'))) DESC LIMIT 0;
SELECT ALL * FROM vt0, v0 CROSS JOIN vt2 ON x'b3' WHERE (((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c2)))AND((~ (v0.c2)))))OR(COALESCE(v0.c0, v0.c0, x'0ad4'))))AND(((vt2.c1)|(v0.c2)))))OR(((((vt2.c0)AND(vt2.c1)))OR(0.2804333234076979)))))AND(CASE v0.c1  WHEN vt0.c0 THEN vt2.c1 END)));
SELECT DISTINCT * FROM vt0, v0 CROSS JOIN vt2 ON x'b3' WHERE (((((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c2)))AND((~ (v0.c2)))))OR(COALESCE(v0.c0, v0.c0, x'0ad4'))))AND(((vt2.c1)|(v0.c2)))))OR(((((vt2.c0)AND(vt2.c1)))OR(0.2804333234076979)))))AND(CASE v0.c1  WHEN vt0.c0 THEN vt2.c1 END)))AND(CAST(((v0.c2)-(')')) AS NUMERIC)))) LIMIT 0X0;
SELECT ALL * FROM vt0, v0 CROSS JOIN vt2 ON x'b3' WHERE (((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c2)))AND((~ (v0.c2)))))OR(COALESCE(v0.c0, v0.c0, x'0ad4'))))AND(((vt2.c1)|(v0.c2)))))OR(((((vt2.c0)AND(vt2.c1)))OR(0.2804333234076979)))))AND(CASE v0.c1  WHEN vt0.c0 THEN vt2.c1 END)));
SELECT DISTINCT * FROM vt0, v0 CROSS JOIN vt2 ON x'b3' WHERE (((((((((((((((((v0.c1)AND(v0.c2)))AND(v0.c2)))AND((~ (v0.c2)))))OR(COALESCE(v0.c0, v0.c0, x'0ad4'))))AND(((vt2.c1)|(v0.c2)))))OR(((((vt2.c0)AND(vt2.c1)))OR(0.2804333234076979)))))AND(CASE v0.c1  WHEN vt0.c0 THEN vt2.c1 END)))AND(CAST(((v0.c2)-(')')) AS NUMERIC)))) LIMIT 0X0;
SELECT ALL * FROM v0, vt2 WHERE (((((v0.c0)>(v0.c3)))*(((vt2.c0)>(v0.c0)))));
SELECT ALL * FROM v0, vt2 WHERE (((((((v0.c0)>(v0.c3)))*(((vt2.c0)>(v0.c0)))))AND(CAST(json_quote(v0.c0) AS NUMERIC)))) INTERSECT SELECT * FROM v0, vt2 WHERE ((((vt2.c0)) NOT BETWEEN ((((v0.c2) IS TRUE))) AND ((CAST(vt2.c1 AS TEXT)))));
SELECT ALL * FROM v0, vt2 WHERE (((((v0.c0)>(v0.c3)))*(((vt2.c0)>(v0.c0)))));
SELECT ALL * FROM v0, vt2 WHERE (((((((v0.c0)>(v0.c3)))*(((vt2.c0)>(v0.c0)))))AND(CAST(json_quote(v0.c0) AS NUMERIC)))) INTERSECT SELECT * FROM v0, vt2 WHERE ((((vt2.c0)) NOT BETWEEN ((((v0.c2) IS TRUE))) AND ((CAST(vt2.c1 AS TEXT)))));
SELECT * FROM vt2, v0, vt0 WHERE ((((v0.c3)=(v0.c1)) IN ())) ORDER BY 'xNB*''{H'  NULLS FIRST, ((vt2.c1 IN (v0.c3, vt2.c1)) IN ())  NULLS FIRST;
SELECT * FROM vt2, v0, vt0 WHERE ((((v0.c3)==(v0.c1)) IN ())) ORDER BY 'xNB*''{H'  NULLS FIRST, ((vt2.c1 IN (v0.c3, vt2.c1)) IN ())  NULLS FIRST INTERSECT SELECT * FROM vt2, v0, vt0 WHERE ((((v0.c1)IS NOT(v0.c1)) IN ())) ORDER BY 'xNB*''{H'  NULLS FIRST, ((vt2.c1 IN (v0.c3, vt2.c1)) IN ())  NULLS FIRST;
SELECT * FROM vt2, v0, vt0 WHERE ((((v0.c3)=(v0.c1)) IN ())) ORDER BY 'xNB*''{H'  NULLS FIRST, ((vt2.c1 IN (v0.c3, vt2.c1)) IN ())  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (((((((((((v0.c3)OR(((v0.c0)LIKE(v0.c1)))))AND(((v0.c2)/(v0.c2)))))OR(((v0.c2)-(x'37f3')))))AND(CASE vt0.c0  WHEN v0.c2 THEN v0.c1 END)))OR(CASE WHEN v0.c1 THEN vt0.c0 WHEN v0.c1 THEN v0.c0 END))) ORDER BY v0.c1 DESC, (- (x'')), NULL;
SELECT ALL * FROM v0, vt0 WHERE (((((((((((((v0.c3)OR(((v0.c0)LIKE(v0.c1)))))AND(((v0.c2)/(v0.c2)))))OR(((v0.c2)-(x'37f3')))))AND(CASE vt0.c0  WHEN v0.c2 THEN v0.c1 END)))OR(CASE WHEN v0.c1 THEN vt0.c0 WHEN v0.c1 THEN v0.c0 END)))AND(json_array_length(((v0.c3)<<('')), NULL)))) ORDER BY (v0.c0 COLLATE RTRIM IN ())  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM v0, vt0 WHERE ((((((vt0.c0))>=((v0.c0))))==(((v0.c2) IS TRUE)))) ORDER BY (v0.c0 COLLATE RTRIM IN ())  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM v0, vt0 WHERE (((((((((((v0.c3)OR(((v0.c0)LIKE(v0.c1)))))AND(((v0.c2)/(v0.c2)))))OR(((v0.c2)-(x'37f3')))))AND(CASE vt0.c0  WHEN v0.c2 THEN v0.c1 END)))OR(CASE WHEN v0.c1 THEN vt0.c0 WHEN v0.c1 THEN v0.c0 END))) ORDER BY v0.c1 DESC, (- (x'')), NULL;
SELECT ALL * FROM v0, vt0 WHERE (((((((((((((v0.c3)OR(((v0.c0)LIKE(v0.c1)))))AND(((v0.c2)/(v0.c2)))))OR(((v0.c2)-(x'37f3')))))AND(CASE vt0.c0  WHEN v0.c2 THEN v0.c1 END)))OR(CASE WHEN v0.c1 THEN vt0.c0 WHEN v0.c1 THEN v0.c0 END)))AND(json_array_length(((v0.c3)<<('')), NULL)))) ORDER BY (v0.c0 COLLATE RTRIM IN ())  NULLS LAST LIMIT 1 INTERSECT SELECT * FROM v0, vt0 WHERE ((((((vt0.c0))>=((v0.c0))))==(((v0.c2) IS TRUE)))) ORDER BY (v0.c0 COLLATE RTRIM IN ())  NULLS LAST LIMIT 0x1;
SELECT * FROM v0 WHERE (v0.c0);
SELECT ALL * FROM v0 WHERE (((v0.c0)AND((((v0.c2)) BETWEEN ((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 ELSE x'cf' END)) AND (((+ (v0.c2)))))))) INTERSECT SELECT ALL * FROM v0 WHERE (CAST(v0.c0 COLLATE BINARY AS REAL));
SELECT * FROM v0 WHERE (v0.c0);
SELECT ALL * FROM v0 WHERE (((v0.c0)AND((((v0.c2)) BETWEEN ((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c0 ELSE x'cf' END)) AND (((+ (v0.c2)))))))) INTERSECT SELECT ALL * FROM v0 WHERE (CAST(v0.c0 COLLATE BINARY AS REAL));
SELECT * FROM vt2, v0, vt0 WHERE (LAST_INSERT_ROWID());
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((LAST_INSERT_ROWID())AND(CASE ((vt2.c0)<=(v0.c3))  WHEN (((v0.c3)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0))) THEN 0.7344154568104274 END))) ORDER BY json_array_length(CASE WHEN 0Xffffffffce4a4571 THEN v0.c3 WHEN vt2.c0 THEN vt2.c1 END, v0.c0 COLLATE NOCASE) ASC, (((((((~ (vt2.c1)))OR(((v0.c0)%(v0.c1)))))AND(111376969)))AND(((((vt2.c0)AND(v0.c3)))OR(vt2.c0)))) DESC, x'' COLLATE NOCASE ASC  NULLS LAST;
SELECT * FROM vt2, v0, vt0 WHERE (LAST_INSERT_ROWID());
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((LAST_INSERT_ROWID())AND(CASE ((vt2.c0)<=(v0.c3))  WHEN (((v0.c3)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0))) THEN 0.7344154568104274 END))) ORDER BY json_array_length(CASE WHEN 0Xffffffffce4a4571 THEN v0.c3 WHEN vt2.c0 THEN vt2.c1 END, v0.c0 COLLATE NOCASE) ASC, (((((((~ (vt2.c1)))OR(((v0.c0)%(v0.c1)))))AND(111376969)))AND(((((vt2.c0)AND(v0.c3)))OR(vt2.c0)))) DESC, x'' COLLATE NOCASE ASC  NULLS LAST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (IFNULL(vt2.c0, CHAR(v0.c1))) ORDER BY CASE ((v0.c1)+(vt2.c1))  WHEN v0.c3 THEN ((v0.c2) IS TRUE) WHEN CASE vt2.c0  WHEN vt0.c0 THEN v0.c1 ELSE v0.c3 END THEN TYPEOF(-610673233) ELSE ((vt0.c0)<=(v0.c0)) END, ((((((v0.c2) BETWEEN (v0.c0) AND (v0.c1)))AND(CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 END)))OR(((v0.c1) IS FALSE))) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((IFNULL(vt2.c0, CHAR(v0.c1)))AND(v0.c2))) ORDER BY CASE ((v0.c1)+(vt2.c1))  WHEN v0.c3 THEN ((v0.c2) IS TRUE) WHEN CASE vt2.c0  WHEN vt0.c0 THEN v0.c1 ELSE v0.c3 END THEN TYPEOF(-610673233) ELSE ((vt0.c0)<=(v0.c0)) END, ((((((v0.c2) BETWEEN (v0.c0) AND (v0.c1)))AND(CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 END)))OR(((v0.c1) IS FALSE))) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (IFNULL(vt2.c0, CHAR(v0.c1))) ORDER BY CASE ((v0.c1)+(vt2.c1))  WHEN v0.c3 THEN ((v0.c2) IS TRUE) WHEN CASE vt2.c0  WHEN vt0.c0 THEN v0.c1 ELSE v0.c3 END THEN TYPEOF(-610673233) ELSE ((vt0.c0)<=(v0.c0)) END, ((((((v0.c2) BETWEEN (v0.c0) AND (v0.c1)))AND(CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 END)))OR(((v0.c1) IS FALSE))) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((IFNULL(vt2.c0, CHAR(v0.c1)))AND(v0.c2))) ORDER BY CASE ((v0.c1)+(vt2.c1))  WHEN v0.c3 THEN ((v0.c2) IS TRUE) WHEN CASE vt2.c0  WHEN vt0.c0 THEN v0.c1 ELSE v0.c3 END THEN TYPEOF(-610673233) ELSE ((vt0.c0)<=(v0.c0)) END, ((((((v0.c2) BETWEEN (v0.c0) AND (v0.c1)))AND(CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 END)))OR(((v0.c1) IS FALSE))) DESC;
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE ((NOT (((v0.c2) ISNULL)))) ORDER BY (((+ (v0.c0))) ISNULL);
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE ((((NOT (((v0.c2) ISNULL))))AND((((vt2.c0)<<(vt2.c1)) IN ())))) ORDER BY (((+ (v0.c0))) ISNULL) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (CAST((+ (v0.c0)) AS BLOB)) ORDER BY (((+ (v0.c0))) ISNULL);
SELECT * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0)))AND('1197633030' COLLATE NOCASE)))OR((vt0.c0 IN (vt0.c0, vt0.c0)))));
SELECT * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0)))AND('1197633030' COLLATE NOCASE)))OR((vt0.c0 IN (vt0.c0, vt0.c0)))));
SELECT * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0)))AND('1197633030' COLLATE NOCASE)))OR((vt0.c0 IN (vt0.c0, vt0.c0)))));
SELECT * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0)))AND('1197633030' COLLATE NOCASE)))OR((vt0.c0 IN (vt0.c0, vt0.c0)))));
SELECT ALL * FROM vt2, vt0 WHERE ((- (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END))) ORDER BY LAST_INSERT_ROWID() ASC  NULLS FIRST, NULL;
SELECT DISTINCT * FROM vt2, vt0 WHERE ((- (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END))) ORDER BY CASE ((vt2.c1)!=(vt2.c0))  WHEN (vt2.c0 IN ()) THEN ((vt2.c0)||(vt2.c0)) WHEN ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) THEN UPPER(DISTINCT vt2.c0) WHEN TRIM(vt2.c0) THEN CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END END, ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN NULL THEN vt2.c0 ELSE vt2.c0 END) NOTNULL)  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (-1.726882884E9) ORDER BY CASE ((vt2.c1)!=(vt2.c0))  WHEN (vt2.c0 IN ()) THEN ((vt2.c0)||(vt2.c0)) WHEN ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) THEN UPPER(DISTINCT vt2.c0) WHEN TRIM(vt2.c0) THEN CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END END, ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN NULL THEN vt2.c0 ELSE vt2.c0 END) NOTNULL)  NULLS LAST;
SELECT ALL * FROM vt2, vt0 WHERE ((- (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END))) ORDER BY LAST_INSERT_ROWID() ASC  NULLS FIRST, NULL;
SELECT DISTINCT * FROM vt2, vt0 WHERE ((- (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END))) ORDER BY CASE ((vt2.c1)!=(vt2.c0))  WHEN (vt2.c0 IN ()) THEN ((vt2.c0)||(vt2.c0)) WHEN ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) THEN UPPER(DISTINCT vt2.c0) WHEN TRIM(vt2.c0) THEN CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END END, ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN NULL THEN vt2.c0 ELSE vt2.c0 END) NOTNULL)  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (-1.726882884E9) ORDER BY CASE ((vt2.c1)!=(vt2.c0))  WHEN (vt2.c0 IN ()) THEN ((vt2.c0)||(vt2.c0)) WHEN ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) THEN UPPER(DISTINCT vt2.c0) WHEN TRIM(vt2.c0) THEN CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END END, ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN NULL THEN vt2.c0 ELSE vt2.c0 END) NOTNULL)  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (((COALESCE(vt2.c0, v0.c0)) BETWEEN (vt0.c0) AND (LIKELY(DISTINCT v0.c2)))) ORDER BY (NOT (((vt0.c0) NOTNULL))) ASC  NULLS FIRST, vt2.c0;
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (((((COALESCE(vt2.c0, v0.c0)) BETWEEN (vt0.c0) AND (LIKELY(DISTINCT v0.c2))))AND(((((CAST(NULL AS NUMERIC))OR((v0.c0 IN (vt2.c0, v0.c0)))))OR((('')IS NOT(v0.c0))))))) ORDER BY (NOT (((vt0.c0) NOTNULL))) ASC  NULLS FIRST, vt2.c0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (CASE ((vt2.c1)==(v0.c2))  WHEN ((vt0.c0)GLOB(v0.c1)) THEN (((v0.c2, '4{'))<((vt0.c0, v0.c1))) WHEN (+ (v0.c3)) THEN v0.c2 COLLATE RTRIM WHEN ((vt2.c1)==(v0.c2)) THEN CAST(v0.c3 AS INTEGER) END) ORDER BY (NOT (((vt0.c0) NOTNULL))) ASC  NULLS FIRST, vt2.c0;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)|(vt0.c0)))-(((vt0.c0)IS(vt0.c0))))) ORDER BY load_extension(((vt0.c0) NOTNULL), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) ASC, vt0.c0, (((((vt0.c0, vt0.c0))<=((NULL, vt0.c0)))) NOT BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (UNLIKELY(DISTINCT vt0.c0))) ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((vt0.c0)|(vt0.c0)))-(((vt0.c0)IS(vt0.c0))))) ORDER BY (NULLIF(vt0.c0, vt0.c0) IN (((vt0.c0)/(x'7bd3ab6c')), vt0.c0));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)|(vt0.c0)))-(((vt0.c0)IS(vt0.c0))))) ORDER BY load_extension(((vt0.c0) NOTNULL), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) ASC, vt0.c0, (((((vt0.c0, vt0.c0))<=((NULL, vt0.c0)))) NOT BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (UNLIKELY(DISTINCT vt0.c0))) ASC  NULLS FIRST;
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (CAST('dle>&63>' AS BLOB)) AND (((v0.c2)>>(vt0.c0)))) WHERE (CASE (+ (vt2.c1))  WHEN ((v0.c3)*(vt0.c0)) THEN (~ (v0.c0)) ELSE CAST(vt2.c0 AS BLOB) END);
SELECT * FROM vt2, v0 INNER JOIN vt0 ON ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (CAST('dle>&63>' AS BLOB)) AND (((v0.c2)>>(vt0.c0)))) WHERE (((CASE (+ (vt2.c1))  WHEN ((v0.c3)*(vt0.c0)) THEN (~ (v0.c0)) ELSE CAST(vt2.c0 AS BLOB) END)AND(((v0.c0)>=(CAST(vt0.c0 AS TEXT)))))) ORDER BY (((((vt2.c0, v0.c3, vt2.c1)) NOT BETWEEN ((vt2.c0, 'rs吻p4', v0.c2)) AND ((vt2.c1, 'ˇjm*rxൄj', v0.c0)))) IS TRUE)  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt2, v0 INNER JOIN vt0 ON ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (CAST('dle>&63>' AS BLOB)) AND (((v0.c2)>>(vt0.c0)))) WHERE (((((((((((((v0.c1)OR(v0.c1)))AND(v0.c2)))AND(v0.c3)))AND('576918381')))OR(v0.c0)))GLOB(((v0.c0)=(v0.c2))))) ORDER BY (((((vt2.c0, v0.c3, vt2.c1)) NOT BETWEEN ((vt2.c0, 'rs吻p4', v0.c2)) AND ((vt2.c1, 'ˇjm*rxൄj', v0.c0)))) IS TRUE)  NULLS LAST LIMIT 0x0;
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (CAST('dle>&63>' AS BLOB)) AND (((v0.c2)>>(vt0.c0)))) WHERE (CASE (+ (vt2.c1))  WHEN ((v0.c3)*(vt0.c0)) THEN (~ (v0.c0)) ELSE CAST(vt2.c0 AS BLOB) END);
SELECT * FROM vt2, v0 INNER JOIN vt0 ON ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (CAST('dle>&63>' AS BLOB)) AND (((v0.c2)>>(vt0.c0)))) WHERE (((CASE (+ (vt2.c1))  WHEN ((v0.c3)*(vt0.c0)) THEN (~ (v0.c0)) ELSE CAST(vt2.c0 AS BLOB) END)AND(((v0.c0)>=(CAST(vt0.c0 AS TEXT)))))) ORDER BY (((((vt2.c0, v0.c3, vt2.c1)) NOT BETWEEN ((vt2.c0, 'rs吻p4', v0.c2)) AND ((vt2.c1, 'ˇjm*rxൄj', v0.c0)))) IS TRUE)  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt2, v0 INNER JOIN vt0 ON ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (CAST('dle>&63>' AS BLOB)) AND (((v0.c2)>>(vt0.c0)))) WHERE (((((((((((((v0.c1)OR(v0.c1)))AND(v0.c2)))AND(v0.c3)))AND('576918381')))OR(v0.c0)))GLOB(((v0.c0)=(v0.c2))))) ORDER BY (((((vt2.c0, v0.c3, vt2.c1)) NOT BETWEEN ((vt2.c0, 'rs吻p4', v0.c2)) AND ((vt2.c1, 'ˇjm*rxൄj', v0.c0)))) IS TRUE)  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (CAST(CAST(vt0.c0 AS NUMERIC) AS BLOB));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(CAST(vt0.c0 AS NUMERIC) AS BLOB))AND(((UPPER(DISTINCT vt0.c0))|(''))))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CAST(CAST(vt0.c0 AS NUMERIC) AS BLOB));
SELECT DISTINCT * FROM vt0 WHERE (((CAST(CAST(vt0.c0 AS NUMERIC) AS BLOB))AND(((UPPER(DISTINCT vt0.c0))|(''))))) LIMIT 1;
SELECT * FROM vt0, v0, vt2 WHERE (((((vt2.c1) IS FALSE))AND(((((0x2b359a40)OR(v0.c1)))OR(v0.c2)))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((((vt2.c1) IS FALSE))AND(((((724933184)OR(v0.c1)))OR(v0.c2)))))AND(0.48500174002745877))) LIMIT 0;
SELECT * FROM vt0, v0, vt2 WHERE (((((vt2.c1) IS FALSE))AND(((((0x2b359a40)OR(v0.c1)))OR(v0.c2)))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((((vt2.c1) IS FALSE))AND(((((724933184)OR(v0.c1)))OR(v0.c2)))))AND(0.48500174002745877))) LIMIT 0;
SELECT * FROM vt2, v0 WHERE (TIME(((v0.c0) BETWEEN (v0.c1) AND (v0.c0)), (vt2.c0 IN (v0.c0)), ((v0.c3)+(v0.c0))));
SELECT ALL * FROM vt2, v0 WHERE (((TIME(((v0.c0) BETWEEN (v0.c1) AND (v0.c0)), (vt2.c0 IN (v0.c0)), ((v0.c3)+(v0.c0))))AND(((LIKELY(vt2.c0)) NOT NULL)))) ORDER BY v0.c2 ASC  NULLS LAST, ((v0.c2 COLLATE BINARY) NOT BETWEEN ((((v0.c3, NULL))<((vt2.c0, v0.c3)))) AND (((((((((((v0.c1)AND(v0.c0)))AND(v0.c0)))AND(v0.c2)))AND(v0.c2)))AND(vt2.c0)))) DESC  NULLS FIRST, ((0.4349387064326339)GLOB((- (v0.c0))))  NULLS LAST;
SELECT * FROM vt2, v0 WHERE (TIME(((v0.c0) BETWEEN (v0.c1) AND (v0.c0)), (vt2.c0 IN (v0.c0)), ((v0.c3)+(v0.c0))));
SELECT ALL * FROM vt2, v0 WHERE (((TIME(((v0.c0) BETWEEN (v0.c1) AND (v0.c0)), (vt2.c0 IN (v0.c0)), ((v0.c3)+(v0.c0))))AND(((LIKELY(vt2.c0)) NOT NULL)))) ORDER BY v0.c2 ASC  NULLS LAST, ((v0.c2 COLLATE BINARY) NOT BETWEEN ((((v0.c3, NULL))<((vt2.c0, v0.c3)))) AND (((((((((((v0.c1)AND(v0.c0)))AND(v0.c0)))AND(v0.c2)))AND(v0.c2)))AND(vt2.c0)))) DESC  NULLS FIRST, ((0.4349387064326339)GLOB((- (v0.c0))))  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (((TRIM(DISTINCT vt2.c1, vt0.c0)) NOT BETWEEN (((vt0.c0)*(vt0.c0))) AND (MAX(vt2.c1, NULL, vt0.c0)))) ORDER BY (((((vt2.c0) NOT NULL)))<((((vt2.c0) NOT BETWEEN (vt2.c1) AND (-1444834624))))), CASE (vt2.c1 IN (vt0.c0))  WHEN ((vt0.c0)+(vt2.c0)) THEN vt2.c0 WHEN ((vt2.c1)OR(vt2.c0)) THEN '1357854107' COLLATE BINARY ELSE COALESCE(vt2.c0, x'0a', vt0.c0, vt0.c0) END ASC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((TRIM(DISTINCT vt2.c1, vt0.c0)) NOT BETWEEN (((vt0.c0)*(vt0.c0))) AND (MAX(vt2.c1, NULL, vt0.c0)))) ORDER BY 0.8185504420821136 ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (CASE WHEN (((vt2.c0, x'ba')) NOT BETWEEN ((vt2.c0, vt2.c0)) AND ((vt0.c0, '279466778'))) THEN json_patch(vt2.c1, vt2.c1) ELSE (NOT (vt0.c0)) END) ORDER BY 0.8185504420821136 ASC  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (((TRIM(DISTINCT vt2.c1, vt0.c0)) NOT BETWEEN (((vt0.c0)*(vt0.c0))) AND (MAX(vt2.c1, NULL, vt0.c0)))) ORDER BY (((((vt2.c0) NOT NULL)))<((((vt2.c0) NOT BETWEEN (vt2.c1) AND (-1444834624))))), CASE (vt2.c1 IN (vt0.c0))  WHEN ((vt0.c0)+(vt2.c0)) THEN vt2.c0 WHEN ((vt2.c1)OR(vt2.c0)) THEN '1357854107' COLLATE BINARY ELSE COALESCE(vt2.c0, x'0a', vt0.c0, vt0.c0) END ASC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((TRIM(DISTINCT vt2.c1, vt0.c0)) NOT BETWEEN (((vt0.c0)*(vt0.c0))) AND (MAX(vt2.c1, NULL, vt0.c0)))) ORDER BY 0.8185504420821136 ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (CASE WHEN (((vt2.c0, x'ba')) NOT BETWEEN ((vt2.c0, vt2.c0)) AND ((vt0.c0, '279466778'))) THEN json_patch(vt2.c1, vt2.c1) ELSE (NOT (vt0.c0)) END) ORDER BY 0.8185504420821136 ASC  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0 INNER JOIN vt0 ON CAST(v0.c2 AS BLOB) COLLATE NOCASE WHERE ((((v0.c3)) NOT BETWEEN (((v0.c2 IN (v0.c2)))) AND (((~ (v0.c2)))))) ORDER BY CASE ((v0.c0) NOTNULL)  WHEN vt0.c0 THEN v0.c3 COLLATE BINARY WHEN ((((((vt0.c0)OR(vt0.c0)))OR(v0.c3)))AND(v0.c0)) THEN ((vt0.c0) NOTNULL) WHEN PRINTF(v0.c2, vt0.c0, v0.c3, v0.c1, v0.c0, v0.c1) THEN ((v0.c1) BETWEEN (v0.c3) AND (v0.c1)) WHEN ((('-806563145', v0.c2))>((v0.c2, v0.c2))) THEN CAST(vt0.c0 AS REAL) END, (- (COALESCE(x'', v0.c1, v0.c0)));
SELECT DISTINCT MIN(v0.c2) FROM v0 INNER JOIN vt0 ON CAST(v0.c2 AS BLOB) COLLATE NOCASE WHERE ((((v0.c3)) NOT BETWEEN (((v0.c2 IN (v0.c2)))) AND (((~ (v0.c2)))))) ORDER BY ((((((((((((((((v0.c2)|(v0.c1)))AND((((x'f4cf', vt0.c0, v0.c2))!=((vt0.c0, v0.c3, v0.c0))))))OR((((((('0.39469908384747054')AND(v0.c1)))OR(v0.c1)))OR(v0.c2)))))AND((x'' IN (v0.c3)))))OR((v0.c0 IN ()))))OR(((vt0.c0) IS TRUE))))OR((NOT (v0.c1)))))AND(((v0.c2) IS FALSE)))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM v0 INNER JOIN vt0 ON CAST(v0.c2 AS BLOB) COLLATE NOCASE WHERE (CASE WHEN ((((v0.c3)AND(v0.c1)))AND(vt0.c0)) THEN (((v0.c0, v0.c3))==((vt0.c0, vt0.c0))) END) ORDER BY ((((((((((((((((v0.c2)|(v0.c1)))AND((((x'f4cf', vt0.c0, v0.c2))!=((vt0.c0, v0.c3, v0.c0))))))OR((((((('0.39469908384747054')AND(v0.c1)))OR(v0.c1)))OR(v0.c2)))))AND((x'' IN (v0.c3)))))OR((v0.c0 IN ()))))OR(((vt0.c0) IS TRUE))))OR((NOT (v0.c1)))))AND(((v0.c2) IS FALSE)))  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt0, vt2 WHERE (x'46') ORDER BY ((+ (x'3b')) IN (v0.c2, v0.c1)) ASC, (((((vt2.c1 IN (v0.c2)))AND(((v0.c2)-(v0.c0)))))OR(load_extension(vt0.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((x'46')AND(((((vt2.c1) ISNULL)) NOT BETWEEN (((NULL) ISNULL)) AND ('<bo'))))) ORDER BY ((+ (x'3b')) IN (v0.c2, v0.c1)) ASC, (((((vt2.c1 IN (v0.c2)))AND(((v0.c2)-(v0.c0)))))OR(load_extension(vt0.c0)))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt0, vt2 WHERE (x'46') ORDER BY ((+ (x'3b')) IN (v0.c2, v0.c1)) ASC, (((((vt2.c1 IN (v0.c2)))AND(((v0.c2)-(v0.c0)))))OR(load_extension(vt0.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((x'46')AND(((((vt2.c1) ISNULL)) NOT BETWEEN (((NULL) ISNULL)) AND ('<bo'))))) ORDER BY ((+ (x'3b')) IN (v0.c2, v0.c1)) ASC, (((((vt2.c1 IN (v0.c2)))AND(((v0.c2)-(v0.c0)))))OR(load_extension(vt0.c0)))  NULLS FIRST LIMIT 0;
SELECT MIN(v0.c3) FROM vt0, v0 WHERE (NULLIF(CAST(v0.c1 AS NUMERIC), '1786442639'));
SELECT DISTINCT MIN(v0.c3) FROM vt0, v0 WHERE (((NULLIF(CAST(v0.c1 AS NUMERIC), '1786442639'))AND((NOT (TYPEOF(DISTINCT v0.c3)))))) ORDER BY CAST(((v0.c1) NOT NULL) AS TEXT) ASC;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON (((vt2.c1)&(vt0.c0)) IN (((vt2.c0)GLOB(vt2.c1)))) WHERE ((((ABS(DISTINCT 0.8185504420821136)))<=((((vt2.c1)-(vt2.c1)))))) ORDER BY '214129716'  NULLS LAST, ((((vt0.c0)IS(vt0.c0))) NOT BETWEEN ('-1060090281') AND (((NULL) NOT NULL)))  NULLS FIRST, CAST(vt2.c1 COLLATE NOCASE AS INTEGER) DESC;
SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN vt0 ON (((vt2.c1)&(vt0.c0)) IN (((vt2.c0)GLOB(vt2.c1)))) WHERE ((((ABS(DISTINCT 0.8185504420821136)))<=((((vt2.c1)-(vt2.c1)))))) ORDER BY '214129716'  NULLS LAST, ((((vt0.c0)IS(vt0.c0))) NOT BETWEEN ('-1060090281') AND (((NULL) NOT NULL)))  NULLS FIRST, CAST(vt2.c1 COLLATE NOCASE AS INTEGER) DESC;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON (((vt2.c1)&(vt0.c0)) IN (((vt2.c0)GLOB(vt2.c1)))) WHERE ((((ABS(DISTINCT 0.8185504420821136)))<=((((vt2.c1)-(vt2.c1)))))) ORDER BY '214129716'  NULLS LAST, ((((vt0.c0)IS(vt0.c0))) NOT BETWEEN ('-1060090281') AND (((NULL) NOT NULL)))  NULLS FIRST, CAST(vt2.c1 COLLATE NOCASE AS INTEGER) DESC;
SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN vt0 ON (((vt2.c1)&(vt0.c0)) IN (((vt2.c0)GLOB(vt2.c1)))) WHERE ((((ABS(DISTINCT 0.8185504420821136)))<=((((vt2.c1)-(vt2.c1)))))) ORDER BY '214129716'  NULLS LAST, ((((vt0.c0)IS(vt0.c0))) NOT BETWEEN ('-1060090281') AND (((NULL) NOT NULL)))  NULLS FIRST, CAST(vt2.c1 COLLATE NOCASE AS INTEGER) DESC;
SELECT ALL * FROM vt2 INNER JOIN v0 ON (- (((v0.c1) IS TRUE))) WHERE ((((((((- (vt2.c0)))AND(((((v0.c1)OR(vt2.c1)))OR(v0.c1)))))AND(((v0.c0)<(v0.c2)))))AND((((v0.c0, v0.c1, v0.c1, v0.c3)) BETWEEN ((vt2.c1, v0.c0, '', v0.c2)) AND ((vt2.c0, '', v0.c2, v0.c0)))))) ORDER BY (((vt2.c1)) BETWEEN (('0.7807732688761823')) AND ((((vt2.c1) IS TRUE)))) DESC;
SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON (- (((v0.c1) IS TRUE))) WHERE ((((((((- (vt2.c0)))AND(((((v0.c1)OR(vt2.c1)))OR(v0.c1)))))AND(((v0.c0)<(v0.c2)))))AND((((v0.c0, v0.c1, v0.c1, v0.c3)) BETWEEN ((vt2.c1, v0.c0, '', v0.c2)) AND ((vt2.c0, '', v0.c2, v0.c0)))))) ORDER BY (((vt2.c1)) BETWEEN (('0.7807732688761823')) AND ((((vt2.c1) IS TRUE)))) DESC INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON (- (((v0.c1) IS TRUE))) WHERE ((((v0.c3)GLOB(vt2.c1)) IN (CAST(v0.c2 AS TEXT)))) ORDER BY (((vt2.c1)) BETWEEN (('0.7807732688761823')) AND ((((vt2.c1) IS TRUE)))) DESC;
SELECT ALL * FROM vt2 INNER JOIN v0 ON (- (((v0.c1) IS TRUE))) WHERE ((((((((- (vt2.c0)))AND(((((v0.c1)OR(vt2.c1)))OR(v0.c1)))))AND(((v0.c0)<(v0.c2)))))AND((((v0.c0, v0.c1, v0.c1, v0.c3)) BETWEEN ((vt2.c1, v0.c0, '', v0.c2)) AND ((vt2.c0, '', v0.c2, v0.c0)))))) ORDER BY (((vt2.c1)) BETWEEN (('0.7807732688761823')) AND ((((vt2.c1) IS TRUE)))) DESC;
SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON (- (((v0.c1) IS TRUE))) WHERE ((((((((- (vt2.c0)))AND(((((v0.c1)OR(vt2.c1)))OR(v0.c1)))))AND(((v0.c0)<(v0.c2)))))AND((((v0.c0, v0.c1, v0.c1, v0.c3)) BETWEEN ((vt2.c1, v0.c0, '', v0.c2)) AND ((vt2.c0, '', v0.c2, v0.c0)))))) ORDER BY (((vt2.c1)) BETWEEN (('0.7807732688761823')) AND ((((vt2.c1) IS TRUE)))) DESC INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON (- (((v0.c1) IS TRUE))) WHERE ((((v0.c3)GLOB(vt2.c1)) IN (CAST(v0.c2 AS TEXT)))) ORDER BY (((vt2.c1)) BETWEEN (('0.7807732688761823')) AND ((((vt2.c1) IS TRUE)))) DESC;
SELECT ALL * FROM vt0, v0, vt2 WHERE (json_array_length(v0.c1 COLLATE NOCASE, x'')) ORDER BY CAST('jf' AS REAL) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt0, v0, vt2 WHERE (((json_array_length(v0.c1 COLLATE NOCASE, x''))AND((((((((v0.c3 IN (v0.c2, vt2.c0)))OR('-777716189')))OR((v0.c2 IN ()))))OR(v0.c2 COLLATE BINARY))))) ORDER BY CAST('jf' AS REAL) COLLATE BINARY  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (json_array_length(v0.c1 COLLATE NOCASE, x'')) ORDER BY CAST('jf' AS REAL) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt0, v0, vt2 WHERE (((json_array_length(v0.c1 COLLATE NOCASE, x''))AND((((((((v0.c3 IN (v0.c2, vt2.c0)))OR('-777716189')))OR((v0.c2 IN ()))))OR(v0.c2 COLLATE BINARY))))) ORDER BY CAST('jf' AS REAL) COLLATE BINARY  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0, vt2 WHERE ((('>')%(((((vt2.c0)AND(vt2.c0)))OR(vt0.c0))))) ORDER BY ((vt0.c0) ISNULL) COLLATE RTRIM, (vt2.c0 IN (NULLIF(DISTINCT 0.02050451805071607, vt2.c0))) ASC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0, vt2 WHERE ((('>')%(((((vt2.c0)AND(vt2.c0)))OR(vt0.c0))))) ORDER BY ((vt0.c0) ISNULL) COLLATE RTRIM, (vt2.c0 IN (NULLIF(DISTINCT 0.02050451805071607, vt2.c0))) ASC INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0, vt2 WHERE (((((vt2.c0)<<(vt0.c0))) NOT NULL)) ORDER BY ((vt0.c0) ISNULL) COLLATE RTRIM, (vt2.c0 IN (NULLIF(DISTINCT 0.02050451805071607, vt2.c0))) ASC;
SELECT ALL MAX(v0.c3) FROM vt0, vt2, v0 WHERE ('') ORDER BY (~ (NULL));
SELECT ALL MAX(v0.c3) FROM vt0, vt2, v0 WHERE ((('')AND((((((((((('-2078692236')OR(v0.c3)))AND(v0.c3)))AND(NULL)))AND(v0.c3))) IS FALSE)))) ORDER BY CAST((v0.c0 IN (v0.c1, v0.c0, '1463550408')) AS INTEGER)  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL MAX(v0.c3) FROM vt0, vt2, v0 WHERE (((CASE v0.c0  WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c0 END) BETWEEN (vt2.c1) AND ((v0.c2 IN (vt2.c1))))) ORDER BY CAST((v0.c0 IN (v0.c1, v0.c0, '1463550408')) AS INTEGER)  NULLS FIRST LIMIT 0;
SELECT * FROM v0, vt2 WHERE ((((v0.c2, x'02', v0.c2, v0.c1)) NOT BETWEEN (((((vt2.c1, v0.c0, vt2.c1, v0.c1, x'e7'))>=((v0.c2, v0.c2, v0.c3, vt2.c0, v0.c2))), ((v0.c3) ISNULL), 384613651, (((v0.c3, v0.c3, v0.c2, vt2.c1)) NOT BETWEEN ((v0.c3, vt2.c0, x'd5a5e0', 0.27638570023133135)) AND ((v0.c0, v0.c0, v0.c2, v0.c2))))) AND ((x'5cf8', (- (v0.c3)), ((((((((v0.c2)AND(v0.c3)))AND(v0.c0)))OR(v0.c3)))OR(v0.c0)), CASE vt2.c1  WHEN vt2.c1 THEN v0.c2 ELSE NULL END))));
SELECT DISTINCT * FROM v0, vt2 WHERE ((((v0.c2, x'02', v0.c2, v0.c1)) NOT BETWEEN (((((vt2.c1, v0.c0, vt2.c1, v0.c1, x'e7'))>=((v0.c2, v0.c2, v0.c3, vt2.c0, v0.c2))), ((v0.c3) ISNULL), 0X16ecbd13, (((v0.c3, v0.c3, v0.c2, vt2.c1)) NOT BETWEEN ((v0.c3, vt2.c0, x'd5a5e0', 0.27638570023133135)) AND ((v0.c0, v0.c0, v0.c2, v0.c2))))) AND ((x'5cf8', (- (v0.c3)), ((((((((v0.c2)AND(v0.c3)))AND(v0.c0)))OR(v0.c3)))OR(v0.c0)), CASE vt2.c1  WHEN vt2.c1 THEN v0.c2 ELSE NULL END)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (((((vt2.c1) BETWEEN (vt2.c1) AND (v0.c3))) NOT NULL)) LIMIT 0x1;
SELECT * FROM v0, vt2 WHERE ((((v0.c2, x'02', v0.c2, v0.c1)) NOT BETWEEN (((((vt2.c1, v0.c0, vt2.c1, v0.c1, x'e7'))>=((v0.c2, v0.c2, v0.c3, vt2.c0, v0.c2))), ((v0.c3) ISNULL), 384613651, (((v0.c3, v0.c3, v0.c2, vt2.c1)) NOT BETWEEN ((v0.c3, vt2.c0, x'd5a5e0', 0.27638570023133135)) AND ((v0.c0, v0.c0, v0.c2, v0.c2))))) AND ((x'5cf8', (- (v0.c3)), ((((((((v0.c2)AND(v0.c3)))AND(v0.c0)))OR(v0.c3)))OR(v0.c0)), CASE vt2.c1  WHEN vt2.c1 THEN v0.c2 ELSE NULL END))));
SELECT DISTINCT * FROM v0, vt2 WHERE ((((v0.c2, x'02', v0.c2, v0.c1)) NOT BETWEEN (((((vt2.c1, v0.c0, vt2.c1, v0.c1, x'e7'))>=((v0.c2, v0.c2, v0.c3, vt2.c0, v0.c2))), ((v0.c3) ISNULL), 0X16ecbd13, (((v0.c3, v0.c3, v0.c2, vt2.c1)) NOT BETWEEN ((v0.c3, vt2.c0, x'd5a5e0', 0.27638570023133135)) AND ((v0.c0, v0.c0, v0.c2, v0.c2))))) AND ((x'5cf8', (- (v0.c3)), ((((((((v0.c2)AND(v0.c3)))AND(v0.c0)))OR(v0.c3)))OR(v0.c0)), CASE vt2.c1  WHEN vt2.c1 THEN v0.c2 ELSE NULL END)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (((((vt2.c1) BETWEEN (vt2.c1) AND (v0.c3))) NOT NULL)) LIMIT 0x1;
SELECT MAX(v0.c3) FROM v0 CROSS JOIN vt0 ON (~ (v0.c3 COLLATE BINARY)) WHERE (highlight((- (v0.c2)), ((vt0.c0)*(v0.c1)), CASE WHEN v0.c0 THEN vt0.c0 WHEN NULL THEN v0.c2 END, (v0.c1 IN (v0.c2)))) ORDER BY (((((v0.c0, v0.c1, v0.c2, v0.c2))>=((-1607669206, 0.1948626154066172, v0.c3, v0.c2))))LIKE(v0.c1))  NULLS FIRST, v0.c1  NULLS LAST;
SELECT DISTINCT MAX(v0.c3) FROM v0 CROSS JOIN vt0 ON (~ (v0.c3 COLLATE BINARY)) WHERE (((highlight((- (v0.c2)), ((vt0.c0)*(v0.c1)), CASE WHEN v0.c0 THEN vt0.c0 WHEN NULL THEN v0.c2 END, (v0.c1 IN (v0.c2))))AND(((((v0.c3)+(vt0.c0)))=((~ (v0.c2))))))) ORDER BY ((((v0.c0) NOTNULL)) IS TRUE)  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt2 NATURAL JOIN vt0 WHERE (CAST(((vt2.c1)/(vt2.c1)) AS INTEGER)) ORDER BY CASE WHEN ((vt0.c0) BETWEEN (NULL) AND (vt2.c0)) THEN ((vt2.c1)||(vt2.c0)) WHEN TIME(vt2.c0, vt2.c1, vt2.c0, 0.7959124490374515) THEN ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) WHEN ((vt0.c0) IS FALSE) THEN HEX(DISTINCT vt2.c1) ELSE '''' END DESC, ((((vt0.c0)OR(INSTR(vt0.c0, vt0.c0))))OR(((((((((((((((vt2.c1)OR(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0))));
SELECT COUNT(*) FROM vt2 NATURAL JOIN vt0 WHERE (((CAST(((vt2.c1)/(vt2.c1)) AS INTEGER))AND(((((NULL) IS TRUE)) NOT NULL)))) ORDER BY CASE WHEN ((vt0.c0) BETWEEN (NULL) AND (vt2.c0)) THEN ((vt2.c1)||(vt2.c0)) WHEN TIME(vt2.c0, vt2.c1, vt2.c0, 0.7959124490374515) THEN ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) WHEN ((vt0.c0) IS FALSE) THEN HEX(DISTINCT vt2.c1) ELSE '''' END DESC, ((((vt0.c0)OR(INSTR(vt0.c0, vt0.c0))))OR(((((((((((((((vt2.c1)OR(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))) INTERSECT SELECT COUNT(*) FROM vt2 NATURAL JOIN vt0 WHERE (vt2.c1) ORDER BY CASE WHEN ((vt0.c0) BETWEEN (NULL) AND (vt2.c0)) THEN ((vt2.c1)||(vt2.c0)) WHEN TIME(vt2.c0, vt2.c1, vt2.c0, 0.7959124490374515) THEN ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) WHEN ((vt0.c0) IS FALSE) THEN HEX(DISTINCT vt2.c1) ELSE '''' END DESC, ((((vt0.c0)OR(INSTR(vt0.c0, vt0.c0))))OR(((((((((((((((vt2.c1)OR(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0))));
SELECT ALL * FROM vt0, v0 WHERE ((IFNULL(vt0.c0, v0.c1) IN ()));
SELECT * FROM vt0, v0 WHERE ((IFNULL(vt0.c0, v0.c1) IN ())) ORDER BY (((vt0.c0) IS TRUE) IN ((((v0.c1, v0.c3))<=((vt0.c0, v0.c2))), UPPER(0.7435718392262334))) ASC, (((((((((v0.c1 IN ()))OR(((((((v0.c2)OR(v0.c1)))AND(v0.c1)))AND(v0.c2)))))AND((((v0.c2, v0.c1))==((v0.c1, v0.c1))))))AND(CAST(v0.c0 AS BLOB))))OR((((v0.c0))>=((v0.c2))))) ASC, vt0.c0, LIKE(((x'')||(v0.c3)), ROUND(v0.c1, v0.c1), '0') DESC INTERSECT SELECT * FROM vt0, v0 WHERE (((v0.c0 COLLATE RTRIM) NOT BETWEEN (((((v0.c1)OR(0.11624970833472204)))AND(v0.c2))) AND ((((v0.c2, v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((v0.c2, vt0.c0, v0.c2)))))) ORDER BY (((vt0.c0) IS TRUE) IN ((((v0.c1, v0.c3))<=((vt0.c0, v0.c2))), UPPER(0.7435718392262334))) ASC, (((((((((v0.c1 IN ()))OR(((((((v0.c2)OR(v0.c1)))AND(v0.c1)))AND(v0.c2)))))AND((((v0.c2, v0.c1))=((v0.c1, v0.c1))))))AND(CAST(v0.c0 AS BLOB))))OR((((v0.c0))>=((v0.c2))))) ASC, vt0.c0, LIKE(((x'')||(v0.c3)), ROUND(v0.c1, v0.c1), '0') DESC;
SELECT ALL * FROM vt0, v0 WHERE ((IFNULL(vt0.c0, v0.c1) IN ()));
SELECT * FROM vt0, v0 WHERE ((IFNULL(vt0.c0, v0.c1) IN ())) ORDER BY (((vt0.c0) IS TRUE) IN ((((v0.c1, v0.c3))<=((vt0.c0, v0.c2))), UPPER(0.7435718392262334))) ASC, (((((((((v0.c1 IN ()))OR(((((((v0.c2)OR(v0.c1)))AND(v0.c1)))AND(v0.c2)))))AND((((v0.c2, v0.c1))==((v0.c1, v0.c1))))))AND(CAST(v0.c0 AS BLOB))))OR((((v0.c0))>=((v0.c2))))) ASC, vt0.c0, LIKE(((x'')||(v0.c3)), ROUND(v0.c1, v0.c1), '0') DESC INTERSECT SELECT * FROM vt0, v0 WHERE (((v0.c0 COLLATE RTRIM) NOT BETWEEN (((((v0.c1)OR(0.11624970833472204)))AND(v0.c2))) AND ((((v0.c2, v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c2, v0.c1)) AND ((v0.c2, vt0.c0, v0.c2)))))) ORDER BY (((vt0.c0) IS TRUE) IN ((((v0.c1, v0.c3))<=((vt0.c0, v0.c2))), UPPER(0.7435718392262334))) ASC, (((((((((v0.c1 IN ()))OR(((((((v0.c2)OR(v0.c1)))AND(v0.c1)))AND(v0.c2)))))AND((((v0.c2, v0.c1))=((v0.c1, v0.c1))))))AND(CAST(v0.c0 AS BLOB))))OR((((v0.c0))>=((v0.c2))))) ASC, vt0.c0, LIKE(((x'')||(v0.c3)), ROUND(v0.c1, v0.c1), '0') DESC;
SELECT * FROM vt0 NATURAL JOIN vt2 CROSS JOIN v0 ON (- ((((vt0.c0, '㦛')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, v0.c1))))) WHERE ((v0.c3 COLLATE NOCASE IN (((vt2.c1) NOT NULL))));
SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 CROSS JOIN v0 ON (- ((((vt0.c0, '㦛')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, v0.c1))))) WHERE ((v0.c3 COLLATE NOCASE IN (((vt2.c1) NOT NULL))));
SELECT * FROM vt0 NATURAL JOIN vt2 CROSS JOIN v0 ON (- ((((vt0.c0, '㦛')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, v0.c1))))) WHERE ((v0.c3 COLLATE NOCASE IN (((vt2.c1) NOT NULL))));
SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 CROSS JOIN v0 ON (- ((((vt0.c0, '㦛')) NOT BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, v0.c1))))) WHERE ((v0.c3 COLLATE NOCASE IN (((vt2.c1) NOT NULL))));
SELECT * FROM vt2, v0 WHERE (TRIM(vt2.c1 COLLATE RTRIM, (((v0.c1))<((vt2.c0)))));
SELECT DISTINCT * FROM vt2, v0 WHERE (((TRIM(vt2.c1 COLLATE RTRIM, (((v0.c1))<((vt2.c0)))))AND(NULL))) ORDER BY (- (v0.c1)) COLLATE NOCASE ASC INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((CASE WHEN v0.c0 THEN vt2.c1 WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END)=('-198812510'))) ORDER BY (- (v0.c1)) COLLATE NOCASE ASC;
SELECT * FROM vt2, v0 WHERE (TRIM(vt2.c1 COLLATE RTRIM, (((v0.c1))<((vt2.c0)))));
SELECT DISTINCT * FROM vt2, v0 WHERE (((TRIM(vt2.c1 COLLATE RTRIM, (((v0.c1))<((vt2.c0)))))AND(NULL))) ORDER BY (- (v0.c1)) COLLATE NOCASE ASC INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((CASE WHEN v0.c0 THEN vt2.c1 WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END)=('-198812510'))) ORDER BY (- (v0.c1)) COLLATE NOCASE ASC;
SELECT MAX(v0.c2) FROM vt0, v0 WHERE ((CAST(v0.c1 AS INTEGER) IN ())) ORDER BY '-1668995550';
SELECT ALL MAX(v0.c2) FROM vt0, v0 WHERE ((((CAST(v0.c1 AS INTEGER) IN ()))AND(0.3528875695089474))) ORDER BY '-1668995550' LIMIT 0X2;
SELECT * FROM vt0, v0, vt2 WHERE ((((- (v0.c1))) BETWEEN (vt2.c1) AND (((((((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0))))) ORDER BY CASE WHEN 1733394149 THEN v0.c1 WHEN vt0.c0 THEN v0.c3 WHEN vt0.c0 THEN v0.c1 END COLLATE BINARY;
SELECT * FROM vt0, v0, vt2 WHERE ((((((- (v0.c1))) BETWEEN (vt2.c1) AND (((((((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0)))))AND(v0.c3))) ORDER BY ((((- (x'')), v0.c1 COLLATE BINARY, vt2.c1 COLLATE NOCASE))>=((x'', '&{' COLLATE NOCASE, v0.c2 COLLATE NOCASE))) ASC, CAST((vt2.c0 IN ()) AS INTEGER)  NULLS LAST LIMIT 0X2;
SELECT * FROM vt0, v0, vt2 WHERE ((((- (v0.c1))) BETWEEN (vt2.c1) AND (((((((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0))))) ORDER BY CASE WHEN 1733394149 THEN v0.c1 WHEN vt0.c0 THEN v0.c3 WHEN vt0.c0 THEN v0.c1 END COLLATE BINARY;
SELECT * FROM vt0, v0, vt2 WHERE ((((((- (v0.c1))) BETWEEN (vt2.c1) AND (((((((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0)))))AND(v0.c3))) ORDER BY ((((- (x'')), v0.c1 COLLATE BINARY, vt2.c1 COLLATE NOCASE))>=((x'', '&{' COLLATE NOCASE, v0.c2 COLLATE NOCASE))) ASC, CAST((vt2.c0 IN ()) AS INTEGER)  NULLS LAST LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE ((+ ((NOT (vt2.c0))))) ORDER BY CASE WHEN (~ (vt2.c1)) THEN LIKELIHOOD(v0.c1, vt2.c0) WHEN ((vt2.c1) NOT NULL) THEN CAST(vt0.c0 AS TEXT) WHEN ((0.46047796129737284) BETWEEN (vt0.c0) AND (v0.c3)) THEN 0.6388232248578789 WHEN ((((vt0.c0)AND(v0.c0)))OR(v0.c0)) THEN (v0.c3 IN ()) ELSE ((vt0.c0) IS TRUE) END DESC  NULLS FIRST, (v0.c3 IN ()) ASC;
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE ((+ ((NOT (vt2.c0))))) ORDER BY (((((vt2.c0, v0.c1)) NOT BETWEEN ((vt2.c1, v0.c1)) AND ((v0.c2, v0.c2))))/(((v0.c3) NOTNULL)));
SELECT ALL * FROM vt0, v0, vt2 WHERE (((CAST(v0.c0 AS BLOB))AND(((vt2.c0)>=(vt0.c0))))) ORDER BY ((((v0.c2) BETWEEN (v0.c3) AND (vt2.c1))) IS FALSE)  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE (((CAST(v0.c0 AS BLOB))AND(((vt2.c0)=(vt0.c0))))) ORDER BY ((((v0.c2) BETWEEN (v0.c3) AND (vt2.c1))) IS FALSE)  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((CAST(v0.c0 AS BLOB))AND(((vt2.c0)>=(vt0.c0))))) ORDER BY ((((v0.c2) BETWEEN (v0.c3) AND (vt2.c1))) IS FALSE)  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE (((CAST(v0.c0 AS BLOB))AND(((vt2.c0)=(vt0.c0))))) ORDER BY ((((v0.c2) BETWEEN (v0.c3) AND (vt2.c1))) IS FALSE)  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((+ (CAST(v0.c3 AS TEXT))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((+ (CAST(v0.c3 AS TEXT)))) ORDER BY CAST(((v0.c2)%(vt2.c0)) AS REAL)  NULLS LAST, (((((((((((((((+ (vt2.c0)))OR(vt0.c0 COLLATE NOCASE)))AND(-567218797)))AND(((v0.c2) IS FALSE))))OR(CAST(vt2.c0 AS BLOB))))AND(x'f8')))AND(((vt0.c0) IS TRUE))))OR(LIKELY(DISTINCT vt0.c0))) ASC, CASE ((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c3))  WHEN ((v0.c3)<=(v0.c3)) THEN (- (0.5959306056797101)) WHEN x'1e' COLLATE RTRIM THEN v0.c1 COLLATE NOCASE END ASC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((+ (CAST(v0.c3 AS TEXT))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((+ (CAST(v0.c3 AS TEXT)))) ORDER BY CAST(((v0.c2)%(vt2.c0)) AS REAL)  NULLS LAST, (((((((((((((((+ (vt2.c0)))OR(vt0.c0 COLLATE NOCASE)))AND(-567218797)))AND(((v0.c2) IS FALSE))))OR(CAST(vt2.c0 AS BLOB))))AND(x'f8')))AND(((vt0.c0) IS TRUE))))OR(LIKELY(DISTINCT vt0.c0))) ASC, CASE ((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c3))  WHEN ((v0.c3)<=(v0.c3)) THEN (- (0.5959306056797101)) WHEN x'1e' COLLATE RTRIM THEN v0.c1 COLLATE NOCASE END ASC  NULLS FIRST LIMIT 1;
SELECT * FROM vt2 WHERE ((((NULL)&(vt2.c0)) IN (vt2.c0))) ORDER BY (((((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c0))))<(((vt2.c1)|(vt2.c0))))  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((((((NULL)&(vt2.c0)) IN (vt2.c0)))AND(('bx⊢' IN ())))) ORDER BY (((((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c0))))<(((vt2.c1)|(vt2.c0))))  NULLS FIRST INTERSECT SELECT * FROM vt2 WHERE (x'42') ORDER BY (((((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c0))))<(((vt2.c1)|(vt2.c0))))  NULLS FIRST;
SELECT * FROM vt2 WHERE ((((NULL)&(vt2.c0)) IN (vt2.c0))) ORDER BY (((((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c0))))<(((vt2.c1)|(vt2.c0))))  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((((((NULL)&(vt2.c0)) IN (vt2.c0)))AND(('bx⊢' IN ())))) ORDER BY (((((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c0))))<(((vt2.c1)|(vt2.c0))))  NULLS FIRST INTERSECT SELECT * FROM vt2 WHERE (x'42') ORDER BY (((((vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c0))))<(((vt2.c1)|(vt2.c0))))  NULLS FIRST;
SELECT * FROM vt2 WHERE ((((vt2.c1)AND(vt2.c0)) IN ()));
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c1)AND(vt2.c0)) IN ()))AND(CASE WHEN ((vt2.c1) NOT NULL) THEN ((vt2.c0)||(vt2.c1)) WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) THEN (+ (vt2.c0)) WHEN vt2.c0 COLLATE NOCASE THEN (((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c0, 0.7640654206133571)) AND ((vt2.c1, vt2.c1))) END))) LIMIT 0X5;
SELECT * FROM vt2 WHERE ((((vt2.c1)AND(vt2.c0)) IN ()));
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c1)AND(vt2.c0)) IN ()))AND(CASE WHEN ((vt2.c1) NOT NULL) THEN ((vt2.c0)||(vt2.c1)) WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) THEN (+ (vt2.c0)) WHEN vt2.c0 COLLATE NOCASE THEN (((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c0, 0.7640654206133571)) AND ((vt2.c1, vt2.c1))) END))) LIMIT 0X5;
SELECT ALL * FROM vt2, vt0 WHERE (((((((((vt0.c0 COLLATE NOCASE)OR(ROUND(vt2.c0, vt2.c0))))OR(',y!\60stc')))AND(vt0.c0)))AND(CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt0.c0 END)));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((((((((vt0.c0 COLLATE NOCASE)OR(ROUND(vt2.c0, vt2.c0))))OR(',y!\60stc')))AND(vt0.c0)))AND(CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt0.c0 END)))AND((((((vt2.c0)AND(vt0.c0)))OR(vt2.c1)) IN ())))) LIMIT 0X0;
SELECT ALL * FROM vt2, vt0 WHERE (((((((((vt0.c0 COLLATE NOCASE)OR(ROUND(vt2.c0, vt2.c0))))OR(',y!\60stc')))AND(vt0.c0)))AND(CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt0.c0 END)));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((((((((vt0.c0 COLLATE NOCASE)OR(ROUND(vt2.c0, vt2.c0))))OR(',y!\60stc')))AND(vt0.c0)))AND(CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt0.c0 END)))AND((((((vt2.c0)AND(vt0.c0)))OR(vt2.c1)) IN ())))) LIMIT 0X0;
SELECT * FROM v0 WHERE (CAST(((v0.c2) IS FALSE) AS BLOB));
SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c2) IS FALSE) AS BLOB)) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c1)%(v0.c3)) COLLATE BINARY) LIMIT 0x2;
SELECT * FROM v0 WHERE (CAST(((v0.c2) IS FALSE) AS BLOB));
SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c2) IS FALSE) AS BLOB)) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((v0.c1)%(v0.c3)) COLLATE BINARY) LIMIT 0x2;
SELECT * FROM vt2 WHERE (LIKELIHOOD(DISTINCT ((vt2.c0) IS FALSE), (- (vt2.c1)))) ORDER BY (((vt2.c0 IN ())) NOTNULL);
SELECT ALL * FROM vt2 WHERE (((LIKELIHOOD(DISTINCT ((vt2.c0) IS FALSE), (- (vt2.c1))))AND(vt2.c0))) ORDER BY (((vt2.c0 IN ())) NOTNULL) LIMIT 0x0;
SELECT * FROM vt2 WHERE (LIKELIHOOD(DISTINCT ((vt2.c0) IS FALSE), (- (vt2.c1)))) ORDER BY (((vt2.c0 IN ())) NOTNULL);
SELECT ALL * FROM vt0, vt2, v0 WHERE (vt2.c0) ORDER BY v0.c1  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((vt2.c0)AND(((vt2.c0) NOT NULL) COLLATE RTRIM))) ORDER BY v0.c1  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt0, vt2, v0 WHERE (CASE WHEN TRIM(v0.c2, v0.c0) THEN CAST(v0.c1 AS BLOB) WHEN CASE WHEN v0.c1 THEN v0.c1 END THEN vt2.c0 WHEN LIKELIHOOD(vt2.c0, v0.c1) THEN v0.c0 WHEN CASE WHEN v0.c2 THEN v0.c2 END THEN '_YU' COLLATE RTRIM ELSE ((vt2.c0)IS NOT(v0.c1)) END) ORDER BY v0.c1  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0, vt2, v0 WHERE (vt2.c0) ORDER BY v0.c1  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((vt2.c0)AND(((vt2.c0) NOT NULL) COLLATE RTRIM))) ORDER BY v0.c1  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt0, vt2, v0 WHERE (CASE WHEN TRIM(v0.c2, v0.c0) THEN CAST(v0.c1 AS BLOB) WHEN CASE WHEN v0.c1 THEN v0.c1 END THEN vt2.c0 WHEN LIKELIHOOD(vt2.c0, v0.c1) THEN v0.c0 WHEN CASE WHEN v0.c2 THEN v0.c2 END THEN '_YU' COLLATE RTRIM ELSE ((vt2.c0)IS NOT(v0.c1)) END) ORDER BY v0.c1  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (CAST(((vt2.c0) BETWEEN (v0.c0) AND (v0.c1)) AS TEXT)) ORDER BY ((CASE vt2.c1  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c2 END) IS TRUE) ASC, x'5ccf' DESC, ((CASE WHEN vt0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c1 END) BETWEEN (0.622124075826554) AND (CASE WHEN vt2.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END)) ASC  NULLS LAST, CAST('708305761' COLLATE NOCASE AS TEXT);
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (CAST(((vt2.c0) BETWEEN (v0.c0) AND (v0.c1)) AS TEXT)) ORDER BY v0.c2 ASC  NULLS FIRST, '1839189666' INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (v0.c1) ORDER BY v0.c2 ASC  NULLS FIRST, '1839189666';
SELECT ALL COUNT(*) FROM vt2, v0 CROSS JOIN vt0 ON ((((vt2.c0) BETWEEN (v0.c2) AND (v0.c3))) NOT NULL) WHERE (CASE ((vt0.c0)/(vt2.c0))  WHEN CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 ELSE vt0.c0 END THEN ((v0.c0)==(vt2.c0)) WHEN ((v0.c1)|(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) ELSE CAST(v0.c3 AS INTEGER) END) ORDER BY (- ((v0.c1 IN ()))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt2, v0 CROSS JOIN vt0 ON ((((vt2.c0) BETWEEN (v0.c2) AND (v0.c3))) NOT NULL) WHERE (((CASE ((vt0.c0)/(vt2.c0))  WHEN CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 ELSE vt0.c0 END THEN ((v0.c0)==(vt2.c0)) WHEN ((v0.c1)|(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) ELSE CAST(v0.c3 AS INTEGER) END)AND(load_extension(NULLIF(vt0.c0, vt2.c0), ((((vt2.c0)OR(vt0.c0)))OR(v0.c0)))))) ORDER BY (((COALESCE(DISTINCT v0.c2, v0.c2)))=((CASE v0.c3  WHEN v0.c2 THEN v0.c3 END))) ASC  NULLS LAST, json(LAST_INSERT_ROWID()) DESC  NULLS FIRST LIMIT 0;
SELECT MAX(vt0.c0) FROM vt2, v0 NOT INDEXED, vt0 WHERE ((((v0.c2 IN (NULL))) NOT NULL));
SELECT MAX(vt0.c0) FROM vt2, v0, vt0 WHERE ((((((v0.c2 IN (NULL))) NOT NULL))AND(((((v0.c1)OR(((((((vt2.c1)AND(v0.c2)))OR(vt2.c0)))OR(v0.c1)))))OR(((vt2.c0) ISNULL)))))) ORDER BY 0xffffffffa7735336  NULLS LAST INTERSECT SELECT ALL MAX(vt0.c0) FROM vt2, v0, vt0 WHERE (CASE (((vt2.c0))>((v0.c1)))  WHEN ((((5.26554451E8)OR(vt2.c0)))OR(vt0.c0)) THEN (vt2.c0 IN (v0.c2)) ELSE (v0.c1 IN ()) END) ORDER BY 0xffffffffa7735336  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (vt2.c0 COLLATE BINARY);
SELECT * FROM vt2 WHERE (((vt2.c0 COLLATE BINARY)AND(((((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c0)))OR(CAST(vt2.c1 AS REAL))))AND(((vt2.c1) NOT BETWEEN (vt2.c1) AND (x'fd85')))))OR((('1973730233')/(vt2.c0)))))AND(vt2.c0))))) ORDER BY (- (0.6542171971907206 COLLATE RTRIM)) DESC, vt2.c0  NULLS FIRST, CASE (- (vt2.c1))  WHEN ((vt2.c1) IS FALSE) THEN ((vt2.c0)=(vt2.c1)) END LIMIT 1 INTERSECT SELECT * FROM vt2 WHERE ((((DATE(vt2.c0, vt2.c1, x'', vt2.c0), x''))!=((((vt2.c1)&(vt2.c1)), ((vt2.c1)>=(NULL)))))) ORDER BY (- (0.6542171971907206 COLLATE RTRIM)) DESC, vt2.c0  NULLS FIRST, CASE (- (vt2.c1))  WHEN ((vt2.c1) IS FALSE) THEN ((vt2.c0)=(vt2.c1)) END LIMIT 0x1;
SELECT ALL * FROM vt2 WHERE (vt2.c0 COLLATE BINARY);
SELECT * FROM vt2 WHERE (((vt2.c0 COLLATE BINARY)AND(((((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c0)))OR(CAST(vt2.c1 AS REAL))))AND(((vt2.c1) NOT BETWEEN (vt2.c1) AND (x'fd85')))))OR((('1973730233')/(vt2.c0)))))AND(vt2.c0))))) ORDER BY (- (0.6542171971907206 COLLATE RTRIM)) DESC, vt2.c0  NULLS FIRST, CASE (- (vt2.c1))  WHEN ((vt2.c1) IS FALSE) THEN ((vt2.c0)=(vt2.c1)) END LIMIT 1 INTERSECT SELECT * FROM vt2 WHERE ((((DATE(vt2.c0, vt2.c1, x'', vt2.c0), x''))!=((((vt2.c1)&(vt2.c1)), ((vt2.c1)>=(NULL)))))) ORDER BY (- (0.6542171971907206 COLLATE RTRIM)) DESC, vt2.c0  NULLS FIRST, CASE (- (vt2.c1))  WHEN ((vt2.c1) IS FALSE) THEN ((vt2.c0)=(vt2.c1)) END LIMIT 0x1;
SELECT * FROM v0, vt0 WHERE (CASE v0.c3 COLLATE RTRIM  WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOTNULL) WHEN ((v0.c0)<=(v0.c2)) THEN ((vt0.c0)<(v0.c3)) WHEN (~ (v0.c0)) THEN TRIM(v0.c0, v0.c2) ELSE '-1872550819' END) ORDER BY (((vt0.c0, v0.c0, vt0.c0)) NOT BETWEEN ((0xfb9af93, (v0.c0 IN (v0.c1)), (~ (v0.c2)))) AND ((((((((vt0.c0)OR(v0.c2)))AND(v0.c3)))OR(v0.c3)), (- (vt0.c0)), ((v0.c3)%(v0.c1)))));
SELECT ALL * FROM v0, vt0 WHERE (((CASE v0.c3 COLLATE RTRIM  WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOTNULL) WHEN ((v0.c0)==(v0.c2)) THEN ((vt0.c0)<(v0.c3)) WHEN (~ (v0.c0)) THEN TRIM(v0.c0, v0.c2) ELSE '-1872550819' END)AND(((((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))*(v0.c2 COLLATE BINARY))))) ORDER BY ((CAST(v0.c2 AS BLOB)) BETWEEN (((v0.c1)LIKE(vt0.c0))) AND ((vt0.c0 IN ()))) DESC LIMIT 0X0;
SELECT * FROM v0, vt0 WHERE (CASE v0.c3 COLLATE RTRIM  WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOTNULL) WHEN ((v0.c0)<=(v0.c2)) THEN ((vt0.c0)<(v0.c3)) WHEN (~ (v0.c0)) THEN TRIM(v0.c0, v0.c2) ELSE '-1872550819' END) ORDER BY (((vt0.c0, v0.c0, vt0.c0)) NOT BETWEEN ((0xfb9af93, (v0.c0 IN (v0.c1)), (~ (v0.c2)))) AND ((((((((vt0.c0)OR(v0.c2)))AND(v0.c3)))OR(v0.c3)), (- (vt0.c0)), ((v0.c3)%(v0.c1)))));
SELECT ALL * FROM v0, vt0 WHERE (((CASE v0.c3 COLLATE RTRIM  WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) NOTNULL) WHEN ((v0.c0)==(v0.c2)) THEN ((vt0.c0)<(v0.c3)) WHEN (~ (v0.c0)) THEN TRIM(v0.c0, v0.c2) ELSE '-1872550819' END)AND(((((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))*(v0.c2 COLLATE BINARY))))) ORDER BY ((CAST(v0.c2 AS BLOB)) BETWEEN (((v0.c1)LIKE(vt0.c0))) AND ((vt0.c0 IN ()))) DESC LIMIT 0X0;
SELECT * FROM vt2, vt0, v0 WHERE (v0.c0);
SELECT * FROM vt2, vt0, v0 WHERE (v0.c0) ORDER BY 0.4311777796941849 DESC  NULLS FIRST;
SELECT * FROM vt2, vt0, v0 WHERE (v0.c0);
SELECT * FROM vt2, vt0, v0 WHERE (v0.c0) ORDER BY 0.4311777796941849 DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 LEFT OUTER JOIN vt2 ON (((((((((((vt0.c0))==((vt2.c1))))AND(CASE vt2.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN 'rb|''N' WHEN vt0.c0 THEN v0.c2 WHEN vt2.c1 THEN vt0.c0 END)))AND(((v0.c3) NOT NULL))))OR((((vt2.c0))!=((vt0.c0))))))OR(v0.c3)) LEFT OUTER JOIN v0 ON CAST((- (vt2.c1)) AS INTEGER) WHERE (NULL);
SELECT DISTINCT COUNT(*) FROM vt0 LEFT OUTER JOIN vt2 ON (((((((((((vt0.c0))=((vt2.c1))))AND(CASE vt2.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN 'rb|''N' WHEN vt0.c0 THEN v0.c2 WHEN vt2.c1 THEN vt0.c0 END)))AND(((v0.c3) NOT NULL))))OR((((vt2.c0))!=((vt0.c0))))))OR(v0.c3)) LEFT OUTER JOIN v0 ON CAST((- (vt2.c1)) AS INTEGER) WHERE (((NULL)AND((- (NULL))))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)))<>((v0.c0 IN (vt0.c0)))), TRIM(((v0.c3)<(v0.c1))) ASC  NULLS FIRST LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ((((((vt2.c0)=(vt2.c1)), vt0.c0 COLLATE NOCASE))>=((CAST(vt0.c0 AS NUMERIC), (NOT (vt2.c0)))))) ORDER BY NULL  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ((((((((vt2.c0)==(vt2.c1)), vt0.c0 COLLATE NOCASE))==((CAST(vt0.c0 AS NUMERIC), (NOT (vt2.c0))))))AND(CASE CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END  WHEN ((vt0.c0)LIKE(vt2.c0)) THEN (vt2.c1 IN (0.9367846869115853)) END))) ORDER BY NULL  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (CAST((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) AS INTEGER));
SELECT ALL * FROM vt0 WHERE (CAST((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) AS INTEGER)) ORDER BY (((vt0.c0)*(vt0.c0)) IN ()) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CAST((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) AS INTEGER));
SELECT ALL * FROM vt0 WHERE (CAST((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) AS INTEGER)) ORDER BY (((vt0.c0)*(vt0.c0)) IN ()) LIMIT 1;
SELECT ALL * FROM v0 WHERE (json_object(v0.c1, v0.c1, v0.c1, v0.c0) COLLATE NOCASE) ORDER BY CASE v0.c3  WHEN ((v0.c1)IS('708305761')) THEN v0.c3 COLLATE RTRIM END ASC  NULLS FIRST, CAST(LOWER(v0.c1) AS REAL) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (json_object(v0.c1, v0.c1, v0.c1, v0.c0) COLLATE NOCASE) ORDER BY v0.c2 ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (json_object(v0.c1, v0.c1, v0.c1, v0.c0) COLLATE NOCASE) ORDER BY CASE v0.c3  WHEN ((v0.c1)IS('708305761')) THEN v0.c3 COLLATE RTRIM END ASC  NULLS FIRST, CAST(LOWER(v0.c1) AS REAL) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE (json_object(v0.c1, v0.c1, v0.c1, v0.c0) COLLATE NOCASE) ORDER BY v0.c2 ASC  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE (((((v0.c3)AND(v0.c3)))OR(CASE WHEN vt2.c0 THEN v0.c3 END)));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((((v0.c3)AND(v0.c3)))OR(CASE WHEN vt2.c0 THEN v0.c3 END)))AND(((((((((NULL)AND(((v0.c1) BETWEEN (vt2.c1) AND (v0.c3)))))OR(LIKELY(DISTINCT vt2.c1))))OR(1291088419)))OR(((x'')|(vt2.c0))))))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE ('+') LIMIT 0X0;
SELECT * FROM v0, vt2 WHERE (((((v0.c3)AND(v0.c3)))OR(CASE WHEN vt2.c0 THEN v0.c3 END)));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((((v0.c3)AND(v0.c3)))OR(CASE WHEN vt2.c0 THEN v0.c3 END)))AND(((((((((NULL)AND(((v0.c1) BETWEEN (vt2.c1) AND (v0.c3)))))OR(LIKELY(DISTINCT vt2.c1))))OR(1291088419)))OR(((x'')|(vt2.c0))))))) LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE ('+') LIMIT 0X0;
SELECT ALL * FROM v0, vt2 WHERE (((((v0.c0)LIKE(vt2.c0))) NOT BETWEEN (((((v0.c0)AND(v0.c0)))OR(v0.c3))) AND (vt2.c0 COLLATE BINARY))) ORDER BY -1.429548611E9 COLLATE RTRIM DESC, json_patch(v0.c0, HEX(v0.c2));
SELECT ALL * FROM v0, vt2 WHERE (((((v0.c0)LIKE(vt2.c0))) NOT BETWEEN (((((v0.c0)AND(v0.c0)))OR(v0.c3))) AND (vt2.c0 COLLATE BINARY))) ORDER BY '1707309185' ASC, ((((((vt2.c0)OR(v0.c3)))OR(v0.c3)))>>((- (vt2.c1)))) LIMIT 0X1 INTERSECT SELECT * FROM v0, vt2 WHERE ((((vt2.c0 IN (0.22835545264933987))) NOT BETWEEN (CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END) AND (IFNULL(v0.c0, v0.c1)))) ORDER BY '1707309185' ASC, ((((((vt2.c0)OR(v0.c3)))OR(v0.c3)))>>((- (vt2.c1)))) LIMIT 0X1;
SELECT ALL * FROM v0, vt2 WHERE (((((v0.c0)LIKE(vt2.c0))) NOT BETWEEN (((((v0.c0)AND(v0.c0)))OR(v0.c3))) AND (vt2.c0 COLLATE BINARY))) ORDER BY -1.429548611E9 COLLATE RTRIM DESC, json_patch(v0.c0, HEX(v0.c2));
SELECT ALL * FROM v0, vt2 WHERE (((((v0.c0)LIKE(vt2.c0))) NOT BETWEEN (((((v0.c0)AND(v0.c0)))OR(v0.c3))) AND (vt2.c0 COLLATE BINARY))) ORDER BY '1707309185' ASC, ((((((vt2.c0)OR(v0.c3)))OR(v0.c3)))>>((- (vt2.c1)))) LIMIT 0X1 INTERSECT SELECT * FROM v0, vt2 WHERE ((((vt2.c0 IN (0.22835545264933987))) NOT BETWEEN (CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END) AND (IFNULL(v0.c0, v0.c1)))) ORDER BY '1707309185' ASC, ((((((vt2.c0)OR(v0.c3)))OR(v0.c3)))>>((- (vt2.c1)))) LIMIT 0X1;
SELECT ALL MAX(vt2.c0) FROM vt0, vt2 WHERE (((CASE WHEN vt2.c0 THEN -937369626 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END) BETWEEN (((vt0.c0) IS FALSE)) AND (((vt2.c1)OR(vt2.c0)))));
SELECT MAX(vt2.c0) FROM vt0, vt2 WHERE (((CASE WHEN vt2.c0 THEN 0Xffffffffc820dfe6 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END) BETWEEN (((vt0.c0) IS FALSE)) AND (((vt2.c1)OR(vt2.c0))))) ORDER BY (((vt0.c0)) NOT BETWEEN ((vt2.c1 COLLATE BINARY)) AND ((CAST(0.3082577795799831 AS REAL)))) ASC  NULLS FIRST, (((vt0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0 COLLATE BINARY, (vt2.c0 IN (vt2.c1, '핥)')))) AND ((((((0.1030052405631755)OR(vt0.c0)))AND(vt2.c0)), 0.5850394093328565)))  NULLS FIRST INTERSECT SELECT MAX(vt2.c0) FROM vt0, vt2 WHERE (((CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END) BETWEEN (((vt2.c1)!=(x'03'))) AND (((vt2.c1)>(vt2.c0))))) ORDER BY (((vt0.c0)) NOT BETWEEN ((vt2.c1 COLLATE BINARY)) AND ((CAST(0.3082577795799831 AS REAL)))) ASC  NULLS FIRST, (((vt0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0 COLLATE BINARY, (vt2.c0 IN (vt2.c1, '핥)')))) AND ((((((0.1030052405631755)OR(vt0.c0)))AND(vt2.c0)), 0.5850394093328565)))  NULLS FIRST;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (CASE CASE v0.c1  WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END  WHEN (((v0.c0, 0xfffffffffa4120ea, v0.c1, v0.c3, v0.c3)) BETWEEN ((v0.c3, v0.c3, '-911489121', v0.c3, NULL)) AND ((v0.c0, v0.c1, v0.c0, v0.c3, v0.c2))) THEN v0.c2 COLLATE RTRIM ELSE v0.c0 END);
SELECT ALL MAX(v0.c1) FROM v0 WHERE (CASE CASE v0.c1  WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END  WHEN (((v0.c0, -96395030, v0.c1, v0.c3, v0.c3)) BETWEEN ((v0.c3, v0.c3, '-911489121', v0.c3, NULL)) AND ((v0.c0, v0.c1, v0.c0, v0.c3, v0.c2))) THEN v0.c2 COLLATE RTRIM ELSE v0.c0 END) LIMIT 0x1 INTERSECT SELECT ALL MAX(v0.c1) FROM v0 WHERE (((v0.c1)||(((v0.c1)+(v0.c2))))) LIMIT 1;
SELECT MIN(vt2.c1) FROM vt2 WHERE (CASE UNLIKELY(vt2.c1)  WHEN CAST(vt2.c1 AS BLOB) THEN vt2.c0 COLLATE NOCASE WHEN (NOT (vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) WHEN (+ (vt2.c0)) THEN ((vt2.c0)%(vt2.c0)) END);
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (CASE UNLIKELY(vt2.c1)  WHEN CAST(vt2.c1 AS BLOB) THEN vt2.c0 COLLATE NOCASE WHEN (NOT (vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) WHEN (+ (vt2.c0)) THEN ((vt2.c0)%(vt2.c0)) END) ORDER BY ((((vt2.c0)>=(vt2.c1))) BETWEEN (LIKELY(vt2.c1)) AND (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)))) ASC  NULLS LAST LIMIT 1;
SELECT ALL MIN(v0.c3) FROM vt0, v0, vt2 WHERE ((((v0.c2, vt0.c0))>((v0.c3, NULL))) COLLATE BINARY) ORDER BY ((CAST(v0.c1 AS TEXT))GLOB(TRIM(v0.c0)))  NULLS FIRST, CASE ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))  WHEN CASE vt0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c1 ELSE vt0.c0 END THEN ((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0)) END DESC, CAST(((vt2.c1)<(v0.c2)) AS TEXT) DESC;
SELECT DISTINCT MIN(v0.c3) FROM vt0, v0, vt2 WHERE ((((v0.c2, vt0.c0))>((v0.c3, NULL))) COLLATE BINARY) ORDER BY ((CAST(v0.c1 AS TEXT))GLOB(TRIM(v0.c0)))  NULLS FIRST, CASE ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))  WHEN CASE vt0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c1 ELSE vt0.c0 END THEN ((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0)) END DESC, CAST(((vt2.c1)<(v0.c2)) AS TEXT) DESC INTERSECT SELECT DISTINCT MIN(v0.c3) FROM vt0, v0, vt2 WHERE ((((v0.c3)GLOB(v0.c3)) IN (((v0.c3) NOT BETWEEN ('628566718') AND ('2108053427'))))) ORDER BY ((CAST(v0.c1 AS TEXT))GLOB(TRIM(v0.c0)))  NULLS FIRST, CASE ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))  WHEN CASE vt0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c1 ELSE vt0.c0 END THEN ((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0)) END DESC, CAST(((vt2.c1)<(v0.c2)) AS TEXT) DESC;
SELECT ALL * FROM v0, vt2 WHERE (((((vt2.c1) BETWEEN (v0.c2) AND (v0.c3))) BETWEEN (IFNULL(vt2.c1, vt2.c1)) AND (NULL)));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((vt2.c1) BETWEEN (v0.c2) AND (v0.c3))) BETWEEN (IFNULL(vt2.c1, vt2.c1)) AND (NULL))) INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE ('D7W/V');
SELECT ALL * FROM v0, vt2 WHERE (((((vt2.c1) BETWEEN (v0.c2) AND (v0.c3))) BETWEEN (IFNULL(vt2.c1, vt2.c1)) AND (NULL)));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((vt2.c1) BETWEEN (v0.c2) AND (v0.c3))) BETWEEN (IFNULL(vt2.c1, vt2.c1)) AND (NULL))) INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE ('D7W/V');
SELECT COUNT(*) FROM v0, vt0 WHERE (CAST((((vt0.c0, v0.c2, v0.c2, vt0.c0)) NOT BETWEEN ((v0.c1, v0.c3, v0.c3, vt0.c0)) AND (('515709136', v0.c2, vt0.c0, v0.c3))) AS REAL)) ORDER BY (NOT ((v0.c0 IN ()))) ASC  NULLS FIRST, TRIM(DISTINCT vt0.c0 COLLATE NOCASE)  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (CAST((((vt0.c0, v0.c2, v0.c2, vt0.c0)) NOT BETWEEN ((v0.c1, v0.c3, v0.c3, vt0.c0)) AND (('515709136', v0.c2, vt0.c0, v0.c3))) AS REAL)) ORDER BY (NOT ((v0.c0 IN ()))) ASC  NULLS FIRST, TRIM(DISTINCT vt0.c0 COLLATE NOCASE)  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((CAST(v0.c3 AS TEXT)) NOT NULL)) ORDER BY (NOT ((v0.c0 IN ()))) ASC  NULLS FIRST, TRIM(DISTINCT vt0.c0 COLLATE NOCASE)  NULLS FIRST;
SELECT * FROM vt2 WHERE (CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) AS TEXT)) ORDER BY (((vt2.c0)&(vt2.c0)) IN (IFNULL(vt2.c0, vt2.c0), ((vt2.c0) ISNULL))) ASC  NULLS LAST, (((vt2.c0 IN (vt2.c1)))>=(vt2.c0)) ASC  NULLS FIRST, CASE WHEN vt2.c1 COLLATE NOCASE THEN vt2.c0 WHEN LTRIM(vt2.c1, vt2.c1) THEN ((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)) WHEN ((vt2.c1) NOT NULL) THEN ((vt2.c0)IS(vt2.c1)) END;
SELECT DISTINCT * FROM vt2 WHERE (CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) AS TEXT)) ORDER BY (((vt2.c0)&(vt2.c0)) IN (IFNULL(vt2.c0, vt2.c0), ((vt2.c0) ISNULL))) ASC  NULLS LAST, (((vt2.c0 IN (vt2.c1)))>=(vt2.c0)) ASC  NULLS FIRST, CASE WHEN vt2.c1 COLLATE NOCASE THEN vt2.c0 WHEN LTRIM(vt2.c1, vt2.c1) THEN ((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)) WHEN ((vt2.c1) NOT NULL) THEN ((vt2.c0)IS(vt2.c1)) END LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((CAST(vt2.c0 AS INTEGER))OR(((((((vt2.c0)AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c0))))) ORDER BY (((vt2.c0)&(vt2.c0)) IN (IFNULL(vt2.c0, vt2.c0), ((vt2.c0) ISNULL))) ASC  NULLS LAST, (((vt2.c0 IN (vt2.c1)))>=(vt2.c0)) ASC  NULLS FIRST, CASE WHEN vt2.c1 COLLATE NOCASE THEN vt2.c0 WHEN LTRIM(vt2.c1, vt2.c1) THEN ((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)) WHEN ((vt2.c1) NOT NULL) THEN ((vt2.c0)IS(vt2.c1)) END LIMIT 0;
SELECT * FROM vt2 WHERE (CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) AS TEXT)) ORDER BY (((vt2.c0)&(vt2.c0)) IN (IFNULL(vt2.c0, vt2.c0), ((vt2.c0) ISNULL))) ASC  NULLS LAST, (((vt2.c0 IN (vt2.c1)))>=(vt2.c0)) ASC  NULLS FIRST, CASE WHEN vt2.c1 COLLATE NOCASE THEN vt2.c0 WHEN LTRIM(vt2.c1, vt2.c1) THEN ((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)) WHEN ((vt2.c1) NOT NULL) THEN ((vt2.c0)IS(vt2.c1)) END;
SELECT DISTINCT * FROM vt2 WHERE (CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) AS TEXT)) ORDER BY (((vt2.c0)&(vt2.c0)) IN (IFNULL(vt2.c0, vt2.c0), ((vt2.c0) ISNULL))) ASC  NULLS LAST, (((vt2.c0 IN (vt2.c1)))>=(vt2.c0)) ASC  NULLS FIRST, CASE WHEN vt2.c1 COLLATE NOCASE THEN vt2.c0 WHEN LTRIM(vt2.c1, vt2.c1) THEN ((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)) WHEN ((vt2.c1) NOT NULL) THEN ((vt2.c0)IS(vt2.c1)) END LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((CAST(vt2.c0 AS INTEGER))OR(((((((vt2.c0)AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c0))))) ORDER BY (((vt2.c0)&(vt2.c0)) IN (IFNULL(vt2.c0, vt2.c0), ((vt2.c0) ISNULL))) ASC  NULLS LAST, (((vt2.c0 IN (vt2.c1)))>=(vt2.c0)) ASC  NULLS FIRST, CASE WHEN vt2.c1 COLLATE NOCASE THEN vt2.c0 WHEN LTRIM(vt2.c1, vt2.c1) THEN ((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)) WHEN ((vt2.c1) NOT NULL) THEN ((vt2.c0)IS(vt2.c1)) END LIMIT 0;
SELECT COUNT(*) FROM vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)))LIKE((((((((((('-574332796')OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0))))) ORDER BY NULL  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (((((((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)))LIKE((((((((((('-574332796')OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))))AND((((vt2.c1, vt2.c0, vt2.c1)) BETWEEN ((vt2.c1 COLLATE RTRIM, vt2.c1, ((vt2.c0) IS FALSE))) AND ((CAST(vt0.c0 AS REAL), (vt0.c0 IN ()), (((vt0.c0, vt2.c1)) BETWEEN ((vt2.c0, 0.4733072797420086)) AND ((vt2.c1, '['))))))))) ORDER BY 'QMx 2a鯥{}', ((((((((vt2.c0)OR('1681885088')))OR(vt2.c1)))AND(vt2.c0)))||(CASE vt2.c0  WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN NULL THEN vt0.c0 END)) DESC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (CASE vt2.c0  WHEN vt2.c1 THEN 0.37656636067121063 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END COLLATE BINARY);
SELECT DISTINCT * FROM vt2 WHERE (((CASE vt2.c0  WHEN vt2.c1 THEN 0.37656636067121063 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END COLLATE BINARY)AND(LOWER(DISTINCT ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)))))) ORDER BY (((vt2.c0))>((vt2.c0))) COLLATE RTRIM DESC  NULLS LAST, (- (((((((vt2.c0)OR('1447145661')))AND('}Zl?')))AND(vt2.c1)))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((vt2.c0 IN (vt2.c0, vt2.c0)))AND(((-1446627553) NOTNULL)))) ORDER BY (((vt2.c0))>((vt2.c0))) COLLATE RTRIM DESC  NULLS LAST, (- (((((((vt2.c0)OR('1447145661')))AND('}Zl?')))AND(vt2.c1)))) LIMIT 2;
SELECT ALL * FROM vt2 WHERE (CASE vt2.c0  WHEN vt2.c1 THEN 0.37656636067121063 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END COLLATE BINARY);
SELECT DISTINCT * FROM vt2 WHERE (((CASE vt2.c0  WHEN vt2.c1 THEN 0.37656636067121063 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END COLLATE BINARY)AND(LOWER(DISTINCT ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)))))) ORDER BY (((vt2.c0))>((vt2.c0))) COLLATE RTRIM DESC  NULLS LAST, (- (((((((vt2.c0)OR('1447145661')))AND('}Zl?')))AND(vt2.c1)))) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((vt2.c0 IN (vt2.c0, vt2.c0)))AND(((-1446627553) NOTNULL)))) ORDER BY (((vt2.c0))>((vt2.c0))) COLLATE RTRIM DESC  NULLS LAST, (- (((((((vt2.c0)OR('1447145661')))AND('}Zl?')))AND(vt2.c1)))) LIMIT 2;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (CASE WHEN ((v0.c3)>(v0.c1)) THEN (((v0.c1, v0.c3)) BETWEEN ((v0.c2, v0.c0)) AND ((v0.c3, NULL))) WHEN x'' THEN TRIM(-1.165434253E9, v0.c1) ELSE v0.c1 END);
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((CASE WHEN ((v0.c3)>(v0.c1)) THEN (((v0.c1, v0.c3)) BETWEEN ((v0.c2, v0.c0)) AND ((v0.c3, NULL))) WHEN x'' THEN TRIM(-1.165434253E9, v0.c1) ELSE v0.c1 END)AND(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END COLLATE BINARY)));
SELECT MIN(v0.c1) FROM vt0, v0, vt2 WHERE (((json_extract(v0.c3, v0.c3, v0.c2)) BETWEEN (vt2.c1 COLLATE RTRIM) AND (((v0.c1)+(vt0.c0)))));
SELECT ALL MIN(v0.c1) FROM vt0, v0, vt2 WHERE (((json_extract(v0.c3, v0.c3, v0.c2)) BETWEEN (vt2.c1 COLLATE RTRIM) AND (((v0.c1)+(vt0.c0))))) ORDER BY (vt2.c1 IN ((v0.c1 IN (vt2.c0))))  NULLS FIRST;
SELECT ALL * FROM v0, vt0 LEFT OUTER JOIN vt2 ON v0.c3 WHERE ((~ (x'c3')));
SELECT ALL * FROM v0, vt0 LEFT OUTER JOIN vt2 ON v0.c3 WHERE ((((~ (x'c3')))AND(CASE v0.c2  WHEN ((v0.c2) BETWEEN (v0.c3) AND (v0.c2)) THEN ((x'')-(v0.c0)) END))) LIMIT 1;
SELECT ALL * FROM v0, vt0 LEFT OUTER JOIN vt2 ON v0.c3 WHERE ((~ (x'c3')));
SELECT ALL * FROM v0, vt0 LEFT OUTER JOIN vt2 ON v0.c3 WHERE ((((~ (x'c3')))AND(CASE v0.c2  WHEN ((v0.c2) BETWEEN (v0.c3) AND (v0.c2)) THEN ((x'')-(v0.c0)) END))) LIMIT 1;
SELECT * FROM v0 WHERE (NULL) ORDER BY MAX(x'3af5', ((v0.c2)+(v0.c3)), (v0.c2 IN ()), '') ASC;
SELECT * FROM v0 WHERE (((NULL)AND(v0.c1))) ORDER BY ((CAST(v0.c2 AS BLOB))!=(v0.c1 COLLATE BINARY)) ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM v0 WHERE (NULL) ORDER BY MAX(x'3af5', ((v0.c2)+(v0.c3)), (v0.c2 IN ()), '') ASC;
SELECT * FROM v0 WHERE (((NULL)AND(v0.c1))) ORDER BY ((CAST(v0.c2 AS BLOB))!=(v0.c1 COLLATE BINARY)) ASC  NULLS LAST LIMIT 0X1;
SELECT ALL MAX(v0.c1) FROM v0, vt2 WHERE (TYPEOF(DISTINCT CAST(v0.c2 AS REAL)));
SELECT DISTINCT MAX(v0.c1) FROM v0, vt2 WHERE (((TYPEOF(DISTINCT CAST(v0.c2 AS REAL)))AND(((((v0.c2)-(v0.c0)))IS(((v0.c3)<=(v0.c3))))))) ORDER BY vt2.c1  NULLS LAST INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0, vt2 WHERE (0.43015477911768996) ORDER BY vt2.c1  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE ((((vt0.c0 IN (v0.c1, v0.c0, v0.c0)))IS NOT(CASE vt0.c0  WHEN x'f1' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE NULL END))) ORDER BY CAST(CAST(vt2.c1 AS BLOB) AS NUMERIC)  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((vt0.c0 IN (v0.c1)))IS NOT(CASE vt0.c0  WHEN x'f1' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE NULL END))) ORDER BY ((((CHAR(v0.c3, vt2.c0))OR(((vt0.c0) NOT NULL))))AND(((v0.c1) IS FALSE))) DESC  NULLS LAST, (((((v0.c2)AND(v0.c1)))OR(v0.c1)) IN (CAST(vt2.c1 AS NUMERIC))) ASC LIMIT 0x1;
SELECT * FROM v0, vt0, vt2 WHERE ((((vt0.c0 IN (v0.c1, v0.c0, v0.c0)))IS NOT(CASE vt0.c0  WHEN x'f1' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE NULL END))) ORDER BY CAST(CAST(vt2.c1 AS BLOB) AS NUMERIC)  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((vt0.c0 IN (v0.c1)))IS NOT(CASE vt0.c0  WHEN x'f1' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE NULL END))) ORDER BY ((((CHAR(v0.c3, vt2.c0))OR(((vt0.c0) NOT NULL))))AND(((v0.c1) IS FALSE))) DESC  NULLS LAST, (((((v0.c2)AND(v0.c1)))OR(v0.c1)) IN (CAST(vt2.c1 AS NUMERIC))) ASC LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((((vt0.c0)<=(v0.c1))) BETWEEN (0.32263804881254554) AND (v0.c3 COLLATE RTRIM)));
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (((((vt0.c0)<=(v0.c1))) BETWEEN (0.32263804881254554) AND (v0.c3 COLLATE RTRIM))) ORDER BY COALESCE(DISTINCT CHANGES(), vt0.c0 COLLATE RTRIM) LIMIT 0x1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (((vt0.c0 COLLATE RTRIM)&((- (v0.c1))))) ORDER BY COALESCE(DISTINCT CHANGES(), vt0.c0 COLLATE RTRIM) LIMIT 0x1;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((((v0.c0)LIKE(vt2.c0)))*((~ (v0.c3))))) ORDER BY NULL DESC, CASE v0.c2  WHEN vt0.c0 COLLATE BINARY THEN ((v0.c0)<<(vt0.c0)) WHEN vt2.c0 THEN vt2.c0 WHEN ((((((v0.c2)OR(vt0.c0)))AND(vt0.c0)))AND(vt2.c0)) THEN NULL WHEN vt2.c0 COLLATE NOCASE THEN TRIM(v0.c3, vt2.c0) WHEN (0X7f899b82 IN (v0.c2)) THEN ((((v0.c3)OR(vt2.c0)))OR(vt2.c0)) WHEN ABS(-2013773590) THEN v0.c1 WHEN ((vt2.c1) ISNULL) THEN ((vt0.c0) IS TRUE) END  NULLS FIRST, CAST((- (v0.c0)) AS INTEGER) DESC;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((((((v0.c0)LIKE(vt2.c0)))*((~ (v0.c3)))))AND(((((v0.c1) NOTNULL))<(CAST(v0.c0 AS INTEGER)))))) ORDER BY (vt2.c0 IN (vt2.c0, vt0.c0))  NULLS LAST, (((vt2.c1)!=(vt0.c0)) IN (((((x'a9')AND(vt2.c1)))OR(v0.c0)), ((((v0.c1)OR(v0.c3)))OR(vt0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((((v0.c0)LIKE(vt2.c0)))*((~ (v0.c3))))) ORDER BY NULL DESC, CASE v0.c2  WHEN vt0.c0 COLLATE BINARY THEN ((v0.c0)<<(vt0.c0)) WHEN vt2.c0 THEN vt2.c0 WHEN ((((((v0.c2)OR(vt0.c0)))AND(vt0.c0)))AND(vt2.c0)) THEN NULL WHEN vt2.c0 COLLATE NOCASE THEN TRIM(v0.c3, vt2.c0) WHEN (0X7f899b82 IN (v0.c2)) THEN ((((v0.c3)OR(vt2.c0)))OR(vt2.c0)) WHEN ABS(-2013773590) THEN v0.c1 WHEN ((vt2.c1) ISNULL) THEN ((vt0.c0) IS TRUE) END  NULLS FIRST, CAST((- (v0.c0)) AS INTEGER) DESC;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((((((v0.c0)LIKE(vt2.c0)))*((~ (v0.c3)))))AND(((((v0.c1) NOTNULL))<(CAST(v0.c0 AS INTEGER)))))) ORDER BY (vt2.c0 IN (vt2.c0, vt0.c0))  NULLS LAST, (((vt2.c1)!=(vt0.c0)) IN (((((x'a9')AND(vt2.c1)))OR(v0.c0)), ((((v0.c1)OR(v0.c3)))OR(vt0.c0))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE (((CASE WHEN vt2.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c2 END) BETWEEN (((v0.c0)>=(NULL))) AND ((~ (v0.c3))))) ORDER BY v0.c3 DESC;
SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (((((CASE WHEN vt2.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c2 END) BETWEEN (((v0.c0)>=(NULL))) AND ((~ (v0.c3)))))AND(((((((v0.c2)OR(vt2.c0)))OR(vt0.c0)))%(((vt0.c0)&(v0.c1))))))) ORDER BY v0.c3 DESC LIMIT 0;
SELECT ALL MIN(vt0.c0) FROM vt2, vt0 WHERE (((vt2.c0) BETWEEN (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt0.c0 END) AND (NULL)));
SELECT MIN(vt0.c0) FROM vt2, vt0 WHERE (((vt2.c0) BETWEEN (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt0.c0 END) AND (NULL)));
SELECT ALL * FROM vt2 WHERE (NULL);
SELECT ALL * FROM vt2 WHERE (((NULL)AND((((vt2.c1) NOTNULL) IN (((((((((((vt2.c1)AND(NULL)))OR(vt2.c1)))OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c1)))))));
SELECT ALL * FROM vt2 WHERE (NULL);
SELECT ALL * FROM vt2 WHERE (((NULL)AND((((vt2.c1) NOTNULL) IN (((((((((((vt2.c1)AND(NULL)))OR(vt2.c1)))OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c1)))))));
SELECT * FROM v0 NATURAL JOIN vt0 WHERE ((((((v0.c2, 0.5039287397822902))<=((vt0.c0, v0.c2)))) NOTNULL)) ORDER BY CAST(json_insert('{!iH', v0.c1, v0.c2, vt0.c0) AS BLOB) DESC  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt0 WHERE ((((((((v0.c2, 0.5039287397822902))=((vt0.c0, v0.c2)))) NOTNULL))AND((((v0.c0, v0.c3)) NOT BETWEEN ((TYPEOF(DISTINCT v0.c1), ((((((((v0.c0)OR(v0.c2)))OR('')))OR(v0.c1)))OR(vt0.c0)))) AND ((v0.c0, ((((v0.c1)OR(v0.c3)))AND(v0.c1)))))))) ORDER BY (v0.c0 COLLATE BINARY IN (((vt0.c0)>(v0.c0)))) DESC  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt0 WHERE ((((((v0.c2, 0.5039287397822902))<=((vt0.c0, v0.c2)))) NOTNULL)) ORDER BY CAST(json_insert('{!iH', v0.c1, v0.c2, vt0.c0) AS BLOB) DESC  NULLS FIRST;
SELECT ALL * FROM v0 NATURAL JOIN vt0 WHERE ((((((((v0.c2, 0.5039287397822902))=((vt0.c0, v0.c2)))) NOTNULL))AND((((v0.c0, v0.c3)) NOT BETWEEN ((TYPEOF(DISTINCT v0.c1), ((((((((v0.c0)OR(v0.c2)))OR('')))OR(v0.c1)))OR(vt0.c0)))) AND ((v0.c0, ((((v0.c1)OR(v0.c3)))AND(v0.c1)))))))) ORDER BY (v0.c0 COLLATE BINARY IN (((vt0.c0)>(v0.c0)))) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt2 LEFT OUTER JOIN v0 ON ((((((((((((((v0.c2)OR(vt2.c0)))OR(v0.c1)))AND(0.4534355993804281)))AND(v0.c3)))OR((vt2.c1 IN ()))))OR(((v0.c2)%(0.7168516849773884)))))AND(CASE WHEN NULL THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)) WHERE (0.4009181390947961) ORDER BY v0.c2 DESC  NULLS FIRST, (((((v0.c3))<=((v0.c0)))) NOT BETWEEN ((((v0.c3, v0.c3)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c0, v0.c1)))) AND (1464917666)) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt2 LEFT OUTER JOIN v0 ON ((((((((((((((v0.c2)OR(vt2.c0)))OR(v0.c1)))AND(0.4534355993804281)))AND(v0.c3)))OR((vt2.c1 IN ()))))OR(((v0.c2)%(0.7168516849773884)))))AND(CASE WHEN NULL THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)) WHERE (0.4009181390947961) ORDER BY CASE WHEN (NOT (v0.c0)) THEN (NOT (v0.c1)) END ASC  NULLS LAST, CASE ((-1.57240298E8)%(v0.c0))  WHEN ((v0.c1)AND(v0.c1)) THEN v0.c1 COLLATE NOCASE ELSE (NOT (v0.c1)) END  NULLS FIRST INTERSECT SELECT COUNT(*) FROM vt2 LEFT OUTER JOIN v0 ON ((((((((((((((v0.c2)OR(vt2.c0)))OR(v0.c1)))AND(0.4534355993804281)))AND(v0.c3)))OR((vt2.c1 IN ()))))OR(((v0.c2)%(0.7168516849773884)))))AND(CASE WHEN NULL THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)) WHERE ((+ (v0.c3))) ORDER BY CASE WHEN (NOT (v0.c0)) THEN (NOT (v0.c1)) END ASC  NULLS LAST, CASE ((-1.57240298E8)%(v0.c0))  WHEN ((v0.c1)AND(v0.c1)) THEN v0.c1 COLLATE NOCASE ELSE (NOT (v0.c1)) END  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (IFNULL(DISTINCT ((v0.c2)<=(v0.c0)), ((v0.c1) BETWEEN (v0.c0) AND (vt0.c0))));
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (IFNULL(DISTINCT ((v0.c2)<=(v0.c0)), ((v0.c1) BETWEEN (v0.c0) AND (vt0.c0)))) LIMIT 1;
SELECT ALL MIN(vt2.c1) FROM vt0, v0, vt2 WHERE (((CAST(x'' AS INTEGER)) ISNULL));
SELECT ALL MIN(vt2.c1) FROM vt0, v0, vt2 WHERE (((CAST(x'' AS INTEGER)) ISNULL)) ORDER BY (vt0.c0 IN ()), ((json_insert(v0.c2, 'X~uFr', vt2.c1)) IS TRUE) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE ((((v0.c0)) BETWEEN ((CAST(v0.c3 AS INTEGER))) AND ((v0.c3))));
SELECT * FROM v0 WHERE ((((v0.c0)) BETWEEN ((CAST(v0.c3 AS INTEGER))) AND ((v0.c3)))) INTERSECT SELECT * FROM v0 WHERE ((CAST(v0.c2 AS BLOB) IN ()));
SELECT * FROM v0 WHERE ((((v0.c0)) BETWEEN ((CAST(v0.c3 AS INTEGER))) AND ((v0.c3))));
SELECT * FROM v0 WHERE ((((v0.c0)) BETWEEN ((CAST(v0.c3 AS INTEGER))) AND ((v0.c3)))) INTERSECT SELECT * FROM v0 WHERE ((CAST(v0.c2 AS BLOB) IN ()));
SELECT ALL COUNT(*) FROM vt2 NOT INDEXED, v0, vt0 WHERE (((0x30d7ccd9) ISNULL));
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((((819449049) ISNULL))AND(vt2.c1))) ORDER BY ((((((vt2.c0)IS(v0.c0)))AND(CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN NULL END)))AND('-1006256381'))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((CAST('NwjBWKf!T' AS REAL))+((~ (v0.c3))))) ORDER BY ((((((vt2.c0)IS(v0.c0)))AND(CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN NULL END)))AND('-1006256381'))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0, v0 NATURAL JOIN vt2 WHERE (v0.c1) ORDER BY ((CASE WHEN v0.c3 THEN v0.c3 WHEN v0.c0 THEN v0.c1 END)>(ROUND(v0.c3, vt2.c0)))  NULLS FIRST, UNICODE(((v0.c3)<=(v0.c0))), vt0.c0 COLLATE RTRIM  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0, v0 NATURAL JOIN vt2 WHERE (v0.c1) ORDER BY (('-523706151') NOT BETWEEN (v0.c2) AND (CAST(vt0.c0 AS REAL)))  NULLS FIRST, ((CASE WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c0 END)>(UNLIKELY(vt0.c0)))  NULLS LAST LIMIT 0x2;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (CAST(((((0Xffffffffee705e69)AND('')))AND(vt0.c0)) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (((CAST(((((-294625687)AND('')))AND(vt0.c0)) AS NUMERIC))AND(((LIKELY(v0.c1)) BETWEEN (vt0.c0 COLLATE NOCASE) AND (((((((((v0.c0)OR(vt0.c0)))AND(0.35373625252048435)))AND(v0.c1)))OR(v0.c2))))))) LIMIT 3 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE ((vt2.c0 COLLATE RTRIM IN (((((((((((v0.c0)AND(vt2.c0)))AND(v0.c3)))OR(v0.c0)))OR(vt0.c0)))OR(vt2.c0))))) LIMIT 0x3;
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE (((((v0.c3) BETWEEN (vt2.c0) AND (NULL)))*((~ (v0.c0))))) ORDER BY ((0.43015477911768996)-(v0.c0)) COLLATE BINARY;
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((((((v0.c3) BETWEEN (vt2.c0) AND (NULL)))*((~ (v0.c0)))))AND((~ ((((0.8520343803614301, vt0.c0)) NOT BETWEEN ((v0.c3, v0.c2)) AND ((vt2.c1, v0.c1)))))))) ORDER BY CAST(((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)) AS BLOB) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE ('
{') ORDER BY CAST(((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)) AS BLOB) LIMIT 0X0;
SELECT MAX(vt0.c0) FROM v0, vt2, vt0 WHERE ((((((+ (v0.c3)))AND(v0.c1 COLLATE BINARY)))OR(json_object(v0.c1, vt0.c0, vt0.c0, v0.c3, vt2.c0)))) ORDER BY (NOT ((v0.c2 IN ()))), (CAST(vt2.c1 AS INTEGER) IN (((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM v0, vt2, vt0 WHERE ((((((+ (v0.c3)))AND(v0.c1 COLLATE BINARY)))OR(json_object(v0.c1, vt0.c0, vt0.c0, v0.c3, vt2.c0)))) ORDER BY vt2.c1  NULLS LAST, (((CASE WHEN v0.c0 THEN vt2.c0 WHEN v0.c1 THEN vt2.c1 END, (v0.c2 IN (v0.c3)), ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3))))<=((CASE WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN vt2.c0 WHEN vt0.c0 THEN v0.c0 WHEN x'884e' THEN vt2.c1 END, (((vt2.c0, vt2.c0, '-1670060038', v0.c1))!=((v0.c3, vt0.c0, v0.c0, vt2.c1))), ((vt2.c0)||(v0.c1))))) INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM v0, vt2, vt0 WHERE (((((((((v0.c1) BETWEEN (vt0.c0) AND (v0.c2)))AND(CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN vt0.c0 THEN v0.c2 WHEN vt0.c0 THEN '547910281' ELSE vt0.c0 END)))OR(((NULL) NOT BETWEEN (v0.c2) AND (v0.c2)))))OR(vt2.c0 COLLATE NOCASE))) ORDER BY vt2.c1  NULLS LAST, (((CASE WHEN v0.c0 THEN vt2.c0 WHEN v0.c1 THEN vt2.c1 END, (v0.c2 IN (v0.c3)), ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3))))<=((CASE WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN vt2.c0 WHEN vt0.c0 THEN v0.c0 WHEN x'884e' THEN vt2.c1 END, (((vt2.c0, vt2.c0, '-1670060038', v0.c1))<>((v0.c3, vt0.c0, v0.c0, vt2.c1))), ((vt2.c0)||(v0.c1)))));
SELECT ALL MIN(vt2.c1) FROM v0, vt2, vt0 WHERE (CASE WHEN ((vt2.c0)<(v0.c3)) THEN (v0.c2 IN (vt2.c1)) ELSE ((v0.c0)|(v0.c0)) END);
SELECT ALL MIN(vt2.c1) FROM v0, vt2, vt0 WHERE (((CASE WHEN ((vt2.c0)<(v0.c3)) THEN (v0.c2 IN (vt2.c1)) ELSE ((v0.c0)|(v0.c0)) END)AND(0.15627903427811207))) ORDER BY json_type(x'db') ASC  NULLS FIRST, ((((((((((((((((((((v0.c3)AND(vt0.c0)))OR(vt2.c1)))OR(v0.c1)))AND(v0.c3)))OR(v0.c1)))OR(v0.c2)))AND(vt2.c0)))OR(UPPER(v0.c0))))OR(vt0.c0)))OR(((v0.c3) IS TRUE)))  NULLS FIRST;
SELECT ALL MIN(vt2.c1) FROM vt2, vt0 WHERE (((((((vt0.c0)==(vt0.c0)))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR(CHAR(vt2.c1, vt2.c0)))) ORDER BY ((IFNULL(vt2.c1, vt2.c0))|('')) ASC  NULLS LAST, ((vt2.c1 COLLATE NOCASE)<=(((vt2.c1) NOT NULL)))  NULLS FIRST;
SELECT DISTINCT MIN(vt2.c1) FROM vt2, vt0 WHERE (((((((vt0.c0)=(vt0.c0)))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR(CHAR(vt2.c1, vt2.c0)))) ORDER BY ((IFNULL(vt2.c1, vt2.c0))|('')) ASC  NULLS LAST, ((vt2.c1 COLLATE NOCASE)<=(((vt2.c1) NOT NULL)))  NULLS FIRST;
SELECT ALL MAX(v0.c1) FROM v0 LEFT OUTER JOIN vt2 ON CAST((NOT (vt2.c1)) AS NUMERIC) CROSS JOIN vt0 ON ((NOT (vt2.c1)) IN ((((v0.c2, v0.c1, 0x1f629553))<((v0.c1, v0.c2, vt2.c1))))) WHERE (((((v0.c3)/(v0.c1)))|(((v0.c2)<=(v0.c2)))));
SELECT DISTINCT MAX(v0.c1) FROM v0 NOT INDEXED INNER JOIN vt2 ON CAST((NOT (vt2.c1)) AS NUMERIC) CROSS JOIN vt0 ON ((NOT (vt2.c1)) IN ((((v0.c2, v0.c1, 0X1f629553))<((v0.c1, v0.c2, vt2.c1))))) WHERE (((((v0.c3)/(v0.c1)))|(((v0.c2)==(v0.c2))))) ORDER BY ((((((v0.c3)OR(v0.c0)))OR(v0.c1)))GLOB(NULL)) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0 INNER JOIN vt2 ON CAST((NOT (vt2.c1)) AS NUMERIC) CROSS JOIN vt0 ON ((NOT (vt2.c1)) IN ((((v0.c2, v0.c1, 526554451))<((v0.c1, v0.c2, vt2.c1))))) WHERE ((((((v0.c3, v0.c0)) NOT BETWEEN ((v0.c1, NULL)) AND ((vt2.c0, v0.c2))))-(vt0.c0 COLLATE BINARY))) ORDER BY ((((((v0.c3)OR(v0.c0)))OR(v0.c1)))GLOB(NULL)) ASC LIMIT 0;
SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c0 IN (vt0.c0, 0.5296454782199196)) IN (vt0.c0 COLLATE NOCASE)));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c0 IN (vt0.c0)) IN (vt0.c0 COLLATE NOCASE))) LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((vt0.c0)LIKE(vt0.c0)) COLLATE NOCASE COLLATE BINARY) LIMIT 0X0;
SELECT * FROM vt0, vt2, v0 WHERE ((((vt0.c0 COLLATE BINARY))=((IFNULL(vt2.c0, v0.c3)))));
SELECT * FROM vt0, vt2, v0 WHERE ((((((vt0.c0 COLLATE BINARY))==((IFNULL(vt2.c0, v0.c3)))))AND(((json_insert(vt2.c1, v0.c0, v0.c1, vt2.c1, v0.c0)) NOTNULL))));
SELECT * FROM vt0, vt2, v0 WHERE ((((vt0.c0 COLLATE BINARY))=((IFNULL(vt2.c0, v0.c3)))));
SELECT * FROM vt0, vt2, v0 WHERE ((((((vt0.c0 COLLATE BINARY))==((IFNULL(vt2.c0, v0.c3)))))AND(((json_insert(vt2.c1, v0.c0, v0.c1, vt2.c1, v0.c0)) NOTNULL))));
SELECT MAX(v0.c0) FROM v0 WHERE (x'4a');
SELECT ALL MAX(v0.c0) FROM v0 WHERE (x'4a') ORDER BY CAST(v0.c3 COLLATE BINARY AS NUMERIC), ((((((((((v0.c1)LIKE(v0.c1)))OR(CASE v0.c3  WHEN v0.c1 THEN v0.c2 END)))OR((v0.c2 IN ()))))AND(CAST(v0.c0 AS NUMERIC))))OR(load_extension(0.6134538765906676)))  NULLS FIRST, NULL LIMIT 0x2 INTERSECT SELECT MAX(v0.c0) FROM v0 WHERE (((((((((((((((((v0.c3)AND(v0.c3)))AND(v0.c2)))OR(v0.c1)))AND((((v0.c1, v0.c3, v0.c2))<=((v0.c1, v0.c2, v0.c1))))))AND((- (-1966523904)))))AND(((v0.c1) ISNULL))))OR(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)))))AND(((v0.c2)OR(v0.c0))))) ORDER BY CAST(v0.c3 COLLATE BINARY AS NUMERIC), ((((((((((v0.c1)LIKE(v0.c1)))OR(CASE v0.c3  WHEN v0.c1 THEN v0.c2 END)))OR((v0.c2 IN ()))))AND(CAST(v0.c0 AS NUMERIC))))OR(load_extension(0.6134538765906676)))  NULLS FIRST, NULL LIMIT 2;
SELECT ALL * FROM vt2, v0, vt0 WHERE (0.35928509056649915);
SELECT ALL * FROM vt2, v0, vt0 WHERE (((0.35928509056649915)AND(((CAST(v0.c2 AS TEXT)) BETWEEN (HEX(vt0.c0)) AND (((v0.c3)<=(vt0.c0))))))) ORDER BY vt2.c1 DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt2 NOT INDEXED, v0, vt0 WHERE (TRIM(CASE WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN v0.c3 WHEN vt0.c0 THEN v0.c0 END)) ORDER BY vt2.c1 DESC  NULLS LAST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (0.35928509056649915);
SELECT ALL * FROM vt2, v0, vt0 WHERE (((0.35928509056649915)AND(((CAST(v0.c2 AS TEXT)) BETWEEN (HEX(vt0.c0)) AND (((v0.c3)<=(vt0.c0))))))) ORDER BY vt2.c1 DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt2 NOT INDEXED, v0, vt0 WHERE (TRIM(CASE WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN v0.c3 WHEN vt0.c0 THEN v0.c0 END)) ORDER BY vt2.c1 DESC  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE (((((((vt0.c0)AND(vt0.c0)))OR(vt2.c0))) ISNULL));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((((vt0.c0)AND(vt0.c0)))OR(vt2.c0))) ISNULL)) LIMIT 2;
SELECT ALL * FROM vt0, vt2 WHERE (((((((vt0.c0)AND(vt0.c0)))OR(vt2.c0))) ISNULL));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((((vt0.c0)AND(vt0.c0)))OR(vt2.c0))) ISNULL)) LIMIT 2;
SELECT COUNT(*) FROM v0, vt2 WHERE (((((((((((v0.c1)IS(vt2.c0)))AND(CASE vt2.c0  WHEN v0.c2 THEN NULL END)))OR((v0.c3 IN (vt2.c0)))))AND(CAST(v0.c1 AS REAL))))AND(CAST(v0.c3 AS TEXT))));
SELECT DISTINCT COUNT(*) FROM v0, vt2 WHERE (((((((((((v0.c1)IS(vt2.c0)))AND(CASE vt2.c0  WHEN v0.c2 THEN NULL END)))OR((v0.c3 IN (vt2.c0)))))AND(CAST(v0.c1 AS REAL))))AND(CAST(v0.c3 AS TEXT)))) ORDER BY (((- (vt2.c0)))GLOB(CHANGES()))  NULLS LAST LIMIT 0X3;
SELECT * FROM v0 WHERE ((NOT (((v0.c1) BETWEEN (v0.c0) AND (v0.c2))))) ORDER BY ((TRIM(DISTINCT v0.c2, v0.c3))*(LIKELY(v0.c3))), TRIM(DISTINCT (v0.c2 IN (v0.c2)), ((v0.c1)-(v0.c1))) ASC, ((((v0.c0)<=(v0.c3)))>=(CAST(v0.c3 AS TEXT)))  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((NOT (((v0.c1) BETWEEN (v0.c0) AND (v0.c2)))))AND(CASE WHEN LIKE(v0.c0, NULL) THEN ((((((v0.c3)OR(v0.c2)))OR(x'')))OR(v0.c0)) END))) ORDER BY (((v0.c2)) BETWEEN ((((v0.c2) NOT NULL))) AND (('-635459419')))  NULLS FIRST, ((((((v0.c0) BETWEEN (v0.c3) AND (v0.c3)))OR('1291339797')))OR(NULL))  NULLS LAST;
SELECT * FROM v0 WHERE ((NOT (((v0.c1) BETWEEN (v0.c0) AND (v0.c2))))) ORDER BY ((TRIM(DISTINCT v0.c2, v0.c3))*(LIKELY(v0.c3))), TRIM(DISTINCT (v0.c2 IN (v0.c2)), ((v0.c1)-(v0.c1))) ASC, ((((v0.c0)<=(v0.c3)))>=(CAST(v0.c3 AS TEXT)))  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((NOT (((v0.c1) BETWEEN (v0.c0) AND (v0.c2)))))AND(CASE WHEN LIKE(v0.c0, NULL) THEN ((((((v0.c3)OR(v0.c2)))OR(x'')))OR(v0.c0)) END))) ORDER BY (((v0.c2)) BETWEEN ((((v0.c2) NOT NULL))) AND (('-635459419')))  NULLS FIRST, ((((((v0.c0) BETWEEN (v0.c3) AND (v0.c3)))OR('1291339797')))OR(NULL))  NULLS LAST;
SELECT ALL * FROM vt2 CROSS JOIN v0 ON (0.38217564961926465 IN ()) WHERE (UNLIKELY(v0.c2 COLLATE BINARY));
SELECT * FROM vt2 CROSS JOIN v0 ON (0.38217564961926465 IN ()) WHERE (((UNLIKELY(v0.c2 COLLATE BINARY))AND((((vt2.c0, v0.c3, vt2.c1, v0.c1)) BETWEEN ((CAST(v0.c2 AS NUMERIC), ((765630797)/(v0.c0)), (~ (v0.c3)), CASE vt2.c0  WHEN v0.c3 THEN vt2.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c3 END)) AND ((vt2.c1 COLLATE NOCASE, v0.c2 COLLATE RTRIM, (v0.c2 IN (vt2.c0)), (((v0.c3)) NOT BETWEEN ((vt2.c1)) AND ((NULL))))))))) ORDER BY (- (((((((((vt2.c0)AND(v0.c2)))AND(v0.c1)))OR(v0.c3)))OR(vt2.c0)))), ((((((json_array(vt2.c1, vt2.c1))OR(CASE WHEN vt2.c1 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 END)))OR(CASE v0.c3  WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 END)))OR('1487470256')) INTERSECT SELECT ALL * FROM vt2 CROSS JOIN v0 ON (0.38217564961926465 IN ()) WHERE ((((x'782b3c') BETWEEN (vt2.c0) AND (0.871882955174055)) IN (NULL, ((v0.c3)IS(v0.c2))))) ORDER BY (- (((((((((vt2.c0)AND(v0.c2)))AND(v0.c1)))OR(v0.c3)))OR(vt2.c0)))), ((((((json_array(vt2.c1, vt2.c1))OR(CASE WHEN vt2.c1 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 END)))OR(CASE v0.c3  WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 END)))OR('1487470256'));
SELECT ALL * FROM vt2 CROSS JOIN v0 ON (0.38217564961926465 IN ()) WHERE (UNLIKELY(v0.c2 COLLATE BINARY));
SELECT * FROM vt2 CROSS JOIN v0 ON (0.38217564961926465 IN ()) WHERE (((UNLIKELY(v0.c2 COLLATE BINARY))AND((((vt2.c0, v0.c3, vt2.c1, v0.c1)) BETWEEN ((CAST(v0.c2 AS NUMERIC), ((765630797)/(v0.c0)), (~ (v0.c3)), CASE vt2.c0  WHEN v0.c3 THEN vt2.c1 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c3 END)) AND ((vt2.c1 COLLATE NOCASE, v0.c2 COLLATE RTRIM, (v0.c2 IN (vt2.c0)), (((v0.c3)) NOT BETWEEN ((vt2.c1)) AND ((NULL))))))))) ORDER BY (- (((((((((vt2.c0)AND(v0.c2)))AND(v0.c1)))OR(v0.c3)))OR(vt2.c0)))), ((((((json_array(vt2.c1, vt2.c1))OR(CASE WHEN vt2.c1 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 END)))OR(CASE v0.c3  WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 END)))OR('1487470256')) INTERSECT SELECT ALL * FROM vt2 CROSS JOIN v0 ON (0.38217564961926465 IN ()) WHERE ((((x'782b3c') BETWEEN (vt2.c0) AND (0.871882955174055)) IN (NULL, ((v0.c3)IS(v0.c2))))) ORDER BY (- (((((((((vt2.c0)AND(v0.c2)))AND(v0.c1)))OR(v0.c3)))OR(vt2.c0)))), ((((((json_array(vt2.c1, vt2.c1))OR(CASE WHEN vt2.c1 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 END)))OR(CASE v0.c3  WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 END)))OR('1487470256'));
SELECT * FROM vt2 WHERE (((((NULLIF(DISTINCT vt2.c0, vt2.c1))AND((+ (vt2.c0)))))AND(((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))));
SELECT DISTINCT * FROM vt2 WHERE (((((((NULLIF(DISTINCT vt2.c0, vt2.c1))AND((+ (vt2.c0)))))AND(((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))))AND(NULL))) LIMIT 0X1;
SELECT * FROM vt2 WHERE (((((NULLIF(DISTINCT vt2.c0, vt2.c1))AND((+ (vt2.c0)))))AND(((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))));
SELECT DISTINCT * FROM vt2 WHERE (((((((NULLIF(DISTINCT vt2.c0, vt2.c1))AND((+ (vt2.c0)))))AND(((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))))AND(NULL))) LIMIT 0X1;
SELECT * FROM vt2, v0, vt0 WHERE (((vt2.c0) NOT BETWEEN ((~ (vt2.c1))) AND ((vt2.c0 IN ()))));
SELECT * FROM vt2, v0, vt0 WHERE (((((vt2.c0) NOT BETWEEN ((~ (vt2.c1))) AND ((vt2.c0 IN ()))))AND(((((v0.c3 COLLATE NOCASE)AND(((((((NULL)OR(v0.c3)))AND(v0.c2)))OR(v0.c1)))))OR((~ (vt2.c0))))))) ORDER BY CAST((((v0.c0, '-387031235', v0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((v0.c1, vt2.c1, vt2.c0, v0.c0, vt2.c0)) AND ((vt0.c0, 2.67721342E8, v0.c0, vt2.c1, v0.c2))) AS TEXT), (((NOT (x'e5')))GLOB(CASE x'978631'  WHEN vt2.c0 THEN vt2.c0 WHEN v0.c1 THEN -3.88835817E8 WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 END)) ASC;
SELECT * FROM vt2, v0, vt0 WHERE (((vt2.c0) NOT BETWEEN ((~ (vt2.c1))) AND ((vt2.c0 IN ()))));
SELECT * FROM vt2, v0, vt0 WHERE (((((vt2.c0) NOT BETWEEN ((~ (vt2.c1))) AND ((vt2.c0 IN ()))))AND(((((v0.c3 COLLATE NOCASE)AND(((((((NULL)OR(v0.c3)))AND(v0.c2)))OR(v0.c1)))))OR((~ (vt2.c0))))))) ORDER BY CAST((((v0.c0, '-387031235', v0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((v0.c1, vt2.c1, vt2.c0, v0.c0, vt2.c0)) AND ((vt0.c0, 2.67721342E8, v0.c0, vt2.c1, v0.c2))) AS TEXT), (((NOT (x'e5')))GLOB(CASE x'978631'  WHEN vt2.c0 THEN vt2.c0 WHEN v0.c1 THEN -3.88835817E8 WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 END)) ASC;
SELECT MAX(v0.c1) FROM vt0, v0 WHERE (CAST(((v0.c1)IS(v0.c0)) AS TEXT)) ORDER BY v0.c3, CAST(((vt0.c0)>(v0.c3)) AS REAL);
SELECT ALL MAX(v0.c1) FROM vt0, v0 WHERE (((CAST(((v0.c1)IS(v0.c0)) AS TEXT))AND(((((v0.c1)LIKE(v0.c0)))%((v0.c1 IN (vt0.c0))))))) ORDER BY v0.c3, CAST(((vt0.c0)>(v0.c3)) AS REAL) LIMIT 0 INTERSECT SELECT ALL MAX(v0.c1) FROM vt0, v0 WHERE ((+ ('Hi63+<'))) ORDER BY v0.c3, CAST(((vt0.c0)>(v0.c3)) AS REAL) LIMIT 0;
SELECT * FROM v0 WHERE ((((v0.c0 IN ()))IS((((v0.c0)) BETWEEN ((v0.c2)) AND ((v0.c3)))))) ORDER BY ((v0.c1 IN (v0.c2, v0.c0)) IN ())  NULLS LAST, CAST(CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c2 END AS TEXT) DESC  NULLS LAST;
SELECT * FROM v0 WHERE ((((((v0.c0 IN ()))IS((((v0.c0)) BETWEEN ((v0.c2)) AND ((v0.c3))))))AND((NOT (v0.c1)) COLLATE NOCASE))) ORDER BY ((((((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c0)))OR(((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c3)))))AND(((v0.c2)>=(v0.c2)))) DESC;
SELECT * FROM v0 WHERE ((((v0.c0 IN ()))IS((((v0.c0)) BETWEEN ((v0.c2)) AND ((v0.c3)))))) ORDER BY ((v0.c1 IN (v0.c2, v0.c0)) IN ())  NULLS LAST, CAST(CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c2 END AS TEXT) DESC  NULLS LAST;
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 NATURAL JOIN v0 WHERE ((((v0.c1, v0.c3)) NOT BETWEEN ((((((vt2.c1)AND(v0.c3)))AND('1927675484')), (('795331170') NOT BETWEEN (v0.c0) AND (vt0.c0)))) AND ((((v0.c3)||(v0.c1)), ((x'')OR(v0.c2))))));
SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 NATURAL JOIN v0 WHERE ((((v0.c1, v0.c3)) NOT BETWEEN ((((((vt2.c1)AND(v0.c3)))AND('1927675484')), (('795331170') NOT BETWEEN (v0.c0) AND (vt0.c0)))) AND ((((v0.c3)||(v0.c1)), ((x'')OR(v0.c2)))))) INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 NATURAL JOIN v0 WHERE ('7');
SELECT ALL * FROM vt2 WHERE (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)) COLLATE BINARY) ORDER BY CASE WHEN (((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))) THEN ((vt2.c1)IS NOT(vt2.c0)) WHEN (vt2.c1 IN ()) THEN ((vt2.c0)||(vt2.c1)) WHEN ((vt2.c0) NOTNULL) THEN ((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)) WHEN ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)) THEN CASE WHEN vt2.c0 THEN vt2.c0 ELSE NULL END WHEN vt2.c0 THEN vt2.c1 ELSE (((vt2.c1))>=((vt2.c1))) END, (((vt2.c0 IN (vt2.c0, vt2.c0)))&(json(vt2.c0)))  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)) COLLATE BINARY)AND(CASE WHEN (('3') NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN '' ELSE vt2.c0 COLLATE BINARY END))) ORDER BY ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END) ISNULL)  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2 WHERE (0.8436220934872913) ORDER BY ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END) ISNULL)  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)) COLLATE BINARY) ORDER BY CASE WHEN (((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))) THEN ((vt2.c1)IS NOT(vt2.c0)) WHEN (vt2.c1 IN ()) THEN ((vt2.c0)||(vt2.c1)) WHEN ((vt2.c0) NOTNULL) THEN ((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)) WHEN ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)) THEN CASE WHEN vt2.c0 THEN vt2.c0 ELSE NULL END WHEN vt2.c0 THEN vt2.c1 ELSE (((vt2.c1))>=((vt2.c1))) END, (((vt2.c0 IN (vt2.c0, vt2.c0)))&(json(vt2.c0)))  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt0 WHERE ((NOT (vt0.c0)));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((NOT (vt0.c0)))AND(((LIKELY(vt0.c0))%(((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(0.19332779578644976))))))) LIMIT 1;
SELECT MIN(v0.c3) FROM v0 WHERE (json_type(CASE WHEN v0.c3 THEN v0.c0 END)) ORDER BY ((((v0.c0)OR(v0.c3)))OR(v0.c1)) COLLATE BINARY, (~ (ROUND(v0.c2, NULL))) DESC  NULLS FIRST;
SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE (json_type(CASE WHEN v0.c3 THEN v0.c0 END)) ORDER BY ((((v0.c0)OR(v0.c3)))OR(v0.c1)) COLLATE BINARY, (~ (ROUND(v0.c2, NULL))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE ((((((x'7b0f', v0.c1))<>((v0.c2, v0.c0)))) IS FALSE)) ORDER BY ((((v0.c0)OR(v0.c3)))OR(v0.c1)) COLLATE BINARY, (~ (ROUND(v0.c2, NULL))) DESC  NULLS FIRST;
SELECT ALL MIN(vt2.c1) FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c0) IS FALSE) COLLATE BINARY NATURAL JOIN vt0 WHERE (((((vt0.c0)<>(v0.c3))) BETWEEN ((((NULL)) BETWEEN ((vt2.c0)) AND ((v0.c0)))) AND (vt2.c1)));
SELECT ALL MIN(vt2.c1) FROM vt2 INNER JOIN v0 ON ((v0.c0) IS FALSE) COLLATE BINARY NATURAL JOIN vt0 WHERE (((((vt0.c0)!=(v0.c3))) BETWEEN ((((NULL)) BETWEEN ((vt2.c0)) AND ((v0.c0)))) AND (vt2.c1))) ORDER BY x''  NULLS LAST, ((vt2.c1 COLLATE BINARY) BETWEEN (CASE v0.c2  WHEN v0.c0 THEN v0.c3 END) AND (((x'ba') NOTNULL))) LIMIT 2 INTERSECT SELECT ALL MIN(vt2.c1) FROM vt2 INNER JOIN v0 ON ((v0.c0) IS FALSE) COLLATE BINARY NATURAL JOIN vt0 WHERE ((-1.607669206E9 IN (CAST(vt2.c0 AS INTEGER)))) ORDER BY x''  NULLS LAST, ((vt2.c1 COLLATE BINARY) BETWEEN (CASE v0.c2  WHEN v0.c0 THEN v0.c3 END) AND (((x'ba') NOTNULL))) LIMIT 2;
SELECT * FROM v0 WHERE (((LIKELY(v0.c2)) NOT NULL)) ORDER BY ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) COLLATE NOCASE;
SELECT * FROM v0 WHERE (((LIKELY(v0.c2)) NOT NULL)) ORDER BY ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) COLLATE NOCASE;
SELECT * FROM v0 WHERE (((LIKELY(v0.c2)) NOT NULL)) ORDER BY ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) COLLATE NOCASE;
SELECT * FROM v0 WHERE (((LIKELY(v0.c2)) NOT NULL)) ORDER BY ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) COLLATE NOCASE;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (((TRIM(DISTINCT v0.c0))/(CAST(v0.c1 AS TEXT)))) ORDER BY '' ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (((((TRIM(DISTINCT v0.c0))/(CAST(v0.c1 AS TEXT))))AND(((((v0.c2) IS TRUE)) BETWEEN ((NOT (v0.c0))) AND (NULL))))) ORDER BY '' ASC  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((((vt2.c1)-(v0.c3)))<>(((((((v0.c1)OR(vt2.c0)))AND(v0.c1)))AND(v0.c2))))) ORDER BY '' ASC  NULLS FIRST;
SELECT ALL MAX(v0.c3) FROM v0, vt2 WHERE (0Xffffffffb97e0a2e) ORDER BY ((((vt2.c0) BETWEEN (v0.c2) AND (vt2.c1))) NOT BETWEEN (v0.c0) AND ((((v0.c1))=((v0.c1)))));
SELECT DISTINCT MAX(v0.c3) FROM v0, vt2 WHERE (((0xffffffffb97e0a2e)AND((((vt2.c0 IN (v0.c1)))||((- (v0.c3))))))) ORDER BY CASE WHEN ((v0.c2) IS TRUE) THEN x'' WHEN vt2.c1 COLLATE BINARY THEN 0.12074343549425126 ELSE NULL END  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt2, v0, vt0 WHERE ((((((v0.c3) IS FALSE), ((v0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0))))!=((((v0.c3) NOT NULL), (+ (v0.c0)))))) ORDER BY vt2.c0, CASE WHEN vt2.c1 THEN ((((vt2.c0)OR(v0.c0)))AND(v0.c3)) WHEN ((v0.c3)<(vt2.c1)) THEN (- (0.4515072061422166)) WHEN (+ (v0.c0)) THEN (vt2.c1 IN ()) ELSE ((vt0.c0)<=(vt2.c1)) END DESC;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((((((v0.c3) IS FALSE), ((v0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0))))>((((v0.c3) NOT NULL), (+ (v0.c0)))))) ORDER BY ((CASE vt2.c0  WHEN v0.c1 THEN v0.c3 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)GLOB((NOT (vt0.c0)))) ASC  NULLS LAST, ((('U', (+ (v0.c3))))>((((vt2.c0)GLOB(0X3f2d75f0)), ((v0.c3)/(v0.c2))))) ASC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (ABS(DISTINCT ((v0.c0)*(v0.c3)))) ORDER BY ((CASE vt2.c0  WHEN v0.c1 THEN v0.c3 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)GLOB((NOT (vt0.c0)))) ASC  NULLS LAST, ((('U', (+ (v0.c3))))>((((vt2.c0)GLOB(0x3f2d75f0)), ((v0.c3)/(v0.c2))))) ASC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt2, v0, vt0 WHERE ((((((v0.c3) IS FALSE), ((v0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0))))!=((((v0.c3) NOT NULL), (+ (v0.c0)))))) ORDER BY vt2.c0, CASE WHEN vt2.c1 THEN ((((vt2.c0)OR(v0.c0)))AND(v0.c3)) WHEN ((v0.c3)<(vt2.c1)) THEN (- (0.4515072061422166)) WHEN (+ (v0.c0)) THEN (vt2.c1 IN ()) ELSE ((vt0.c0)<=(vt2.c1)) END DESC;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((((((v0.c3) IS FALSE), ((v0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0))))>((((v0.c3) NOT NULL), (+ (v0.c0)))))) ORDER BY ((CASE vt2.c0  WHEN v0.c1 THEN v0.c3 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)GLOB((NOT (vt0.c0)))) ASC  NULLS LAST, ((('U', (+ (v0.c3))))>((((vt2.c0)GLOB(0X3f2d75f0)), ((v0.c3)/(v0.c2))))) ASC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (ABS(DISTINCT ((v0.c0)*(v0.c3)))) ORDER BY ((CASE vt2.c0  WHEN v0.c1 THEN v0.c3 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)GLOB((NOT (vt0.c0)))) ASC  NULLS LAST, ((('U', (+ (v0.c3))))>((((vt2.c0)GLOB(0x3f2d75f0)), ((v0.c3)/(v0.c2))))) ASC  NULLS FIRST LIMIT 0x1;
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE ((((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN ((x'' COLLATE BINARY, ((vt2.c0)IS NOT(v0.c3)), v0.c1)) AND ((CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END, (((vt2.c1, v0.c2)) BETWEEN ((v0.c0, vt0.c0)) AND ((NULL, vt2.c0))), ((vt0.c0)>(vt2.c1))))));
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE ((((((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN ((x'' COLLATE BINARY, ((vt2.c0)IS NOT(v0.c3)), v0.c1)) AND ((CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END, (((vt2.c1, v0.c2)) BETWEEN ((v0.c0, vt0.c0)) AND ((NULL, vt2.c0))), ((vt0.c0)!=(vt2.c1))))))AND((((vt2.c1)AND(v0.c2)) IN ())))) ORDER BY TYPEOF(DISTINCT v0.c0 COLLATE RTRIM)  NULLS FIRST, ((((v0.c0) NOT NULL)) NOT BETWEEN ((((v0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((v0.c0, v0.c2)))) AND (vt0.c0)) ASC, (((vt2.c0)) NOT BETWEEN (((NOT (v0.c3)))) AND (((((v0.c1)) BETWEEN ((vt2.c1)) AND ((v0.c3)))))) LIMIT 1;
SELECT * FROM vt0, vt2 WHERE (vt2.c1) ORDER BY ((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))) IN ()) DESC  NULLS FIRST, ((vt2.c1)+(CAST(vt2.c1 AS REAL)))  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE (((vt2.c1)AND(((((((((((((vt0.c0)AND(vt2.c1)))AND(NULL)))OR(0.5683105716680067)))AND(((vt2.c0) IS TRUE))))AND(x'65d3de')))AND(vt2.c1))))) ORDER BY vt2.c0  NULLS FIRST, CAST(vt2.c1 AS NUMERIC) ASC, ((LIKELIHOOD(DISTINCT vt2.c1, vt0.c0)) BETWEEN ((vt0.c0 IN (-1427199762, vt2.c0))) AND ((+ (vt0.c0)))) LIMIT 0x0 INTERSECT SELECT * FROM vt0, vt2 WHERE ((('2017635915') BETWEEN (((vt0.c0)<=(vt2.c0))) AND (CAST('q' AS NUMERIC)))) ORDER BY vt2.c0  NULLS FIRST, CAST(vt2.c1 AS NUMERIC) ASC, ((LIKELIHOOD(DISTINCT vt2.c1, vt0.c0)) BETWEEN ((vt0.c0 IN (0xffffffffaaeea8ee, vt2.c0))) AND ((+ (vt0.c0)))) LIMIT 0X0;
SELECT * FROM vt0, vt2 WHERE (vt2.c1) ORDER BY ((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))) IN ()) DESC  NULLS FIRST, ((vt2.c1)+(CAST(vt2.c1 AS REAL)))  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE ('⅘C');
SELECT ALL COUNT(*) FROM v0 WHERE ((('⅘C')AND((((json_valid(v0.c3)))<((((v0.c2) BETWEEN (v0.c0) AND (v0.c2))))))));
SELECT * FROM vt0, vt2 WHERE (((CAST(NULL AS REAL))<<(((('C', '0.0723762534186253'))>=((vt2.c0, vt2.c1)))))) ORDER BY (((vt2.c1 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (((vt2.c1)<(NULL))))  NULLS FIRST, NULL;
SELECT * FROM vt0, vt2 WHERE (((CAST(NULL AS REAL))<<(((('C', '0.0723762534186253'))>((vt2.c0, vt2.c1)))))) ORDER BY (((vt2.c1 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (((vt2.c1)<(NULL))))  NULLS FIRST, NULL INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ((LOWER(vt0.c0) IN (((((vt0.c0)AND('0.20340515105157597')))OR(vt2.c1))))) ORDER BY (((vt2.c1 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (((vt2.c1)<(NULL))))  NULLS FIRST, NULL;
SELECT * FROM vt0, vt2 WHERE (((CAST(NULL AS REAL))<<(((('C', '0.0723762534186253'))>=((vt2.c0, vt2.c1)))))) ORDER BY (((vt2.c1 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (((vt2.c1)<(NULL))))  NULLS FIRST, NULL;
SELECT * FROM vt0, vt2 WHERE (((CAST(NULL AS REAL))<<(((('C', '0.0723762534186253'))>((vt2.c0, vt2.c1)))))) ORDER BY (((vt2.c1 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (((vt2.c1)<(NULL))))  NULLS FIRST, NULL INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ((LOWER(vt0.c0) IN (((((vt0.c0)AND('0.20340515105157597')))OR(vt2.c1))))) ORDER BY (((vt2.c1 IN (vt0.c0))) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (((vt2.c1)<(NULL))))  NULLS FIRST, NULL;
SELECT ALL MAX(v0.c2) FROM v0 NOT INDEXED WHERE ('') ORDER BY (~ (((v0.c2)IS NOT(v0.c2)))) ASC  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ((('')AND(NULL))) ORDER BY (~ (((v0.c2)IS NOT(v0.c2)))) ASC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM v0, vt2 WHERE ((((v0.c1, v0.c2, vt2.c1)) NOT BETWEEN ((CASE v0.c1  WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END, ((v0.c1)==(v0.c3)), -1.459080318E9)) AND ((((v0.c0) BETWEEN (v0.c1) AND (vt2.c0)), NULLIF(v0.c1, v0.c2), ((((((((vt2.c0)OR(v0.c1)))AND(v0.c0)))OR(v0.c0)))OR(vt2.c1)))))) ORDER BY CAST((v0.c2 IN (v0.c1)) AS TEXT) ASC;
SELECT ALL COUNT(*) FROM v0, vt2 WHERE ((((((v0.c1, v0.c2, vt2.c1)) NOT BETWEEN ((CASE v0.c1  WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END, ((v0.c1)==(v0.c3)), -1.459080318E9)) AND ((((v0.c0) BETWEEN (v0.c1) AND (vt2.c0)), NULLIF(v0.c1, v0.c2), ((((((((vt2.c0)OR(v0.c1)))AND(v0.c0)))OR(v0.c0)))OR(vt2.c1))))))AND(((CAST(v0.c3 AS REAL))GLOB(((v0.c3) IS FALSE)))))) ORDER BY CAST((v0.c2 IN (v0.c1)) AS TEXT) ASC LIMIT 0 INTERSECT SELECT ALL COUNT(*) FROM v0, vt2 WHERE (((((((((((CASE v0.c2  WHEN vt2.c0 THEN v0.c3 WHEN x'' THEN vt2.c1 WHEN v0.c2 THEN v0.c0 WHEN vt2.c1 THEN vt2.c0 WHEN v0.c1 THEN vt2.c1 WHEN v0.c1 THEN v0.c2 END)OR((v0.c0 IN ()))))OR(v0.c3 COLLATE RTRIM)))AND((- (vt2.c1)))))AND((((('pSQtW	✲J')AND(v0.c2)))OR(v0.c3)))))OR((vt2.c1 IN ())))) ORDER BY CAST((v0.c2 IN (v0.c1)) AS TEXT) ASC LIMIT 0;
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE BINARY) BETWEEN (((vt0.c0)AND(vt0.c0))) AND (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY (((('-387031235') NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE)  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0 COLLATE BINARY) BETWEEN (((vt0.c0)AND(vt0.c0))) AND (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)))AND((((((vt0.c0 IN (vt0.c0, vt0.c0)))AND(CASE WHEN x'b01e' THEN vt0.c0 ELSE vt0.c0 END)))AND(((vt0.c0)>(x'06'))))))) ORDER BY (((('-387031235') NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((+ ('-1606106109'))) IS TRUE)) ORDER BY (((('-387031235') NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE)  NULLS FIRST;
SELECT * FROM vt0 WHERE (((vt0.c0 COLLATE BINARY) BETWEEN (((vt0.c0)AND(vt0.c0))) AND (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY (((('-387031235') NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE)  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0 COLLATE BINARY) BETWEEN (((vt0.c0)AND(vt0.c0))) AND (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)))AND((((((vt0.c0 IN (vt0.c0, vt0.c0)))AND(CASE WHEN x'b01e' THEN vt0.c0 ELSE vt0.c0 END)))AND(((vt0.c0)>(x'06'))))))) ORDER BY (((('-387031235') NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((+ ('-1606106109'))) IS TRUE)) ORDER BY (((('-387031235') NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS FALSE)  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 WHERE (x'');
SELECT DISTINCT * FROM vt2, vt0 WHERE (((x'')AND(((((((TYPEOF(DISTINCT vt2.c0))AND((vt2.c1 IN ()))))AND(CAST(vt0.c0 AS NUMERIC))))AND(vt0.c0))))) ORDER BY (('-2006647167')<=(vt2.c0)) COLLATE NOCASE  NULLS FIRST, ((HEX(DISTINCT vt2.c1)) NOT NULL);
SELECT ALL * FROM vt2, vt0 WHERE (x'');
SELECT DISTINCT * FROM vt2, vt0 WHERE (((x'')AND(((((((TYPEOF(DISTINCT vt2.c0))AND((vt2.c1 IN ()))))AND(CAST(vt0.c0 AS NUMERIC))))AND(vt0.c0))))) ORDER BY (('-2006647167')<=(vt2.c0)) COLLATE NOCASE  NULLS FIRST, ((HEX(DISTINCT vt2.c1)) NOT NULL);
SELECT MAX(v0.c0) FROM vt0 CROSS JOIN vt2 ON ((((vt0.c0) ISNULL)) IS TRUE) LEFT OUTER JOIN v0 ON CAST((v0.c2 IN ()) AS NUMERIC) WHERE (((CAST(v0.c1 AS BLOB))AND(UPPER(0xffffffffccf01972)))) ORDER BY ((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2)))>(v0.c1));
SELECT DISTINCT MAX(v0.c0) FROM vt0 CROSS JOIN vt2 ON ((((vt0.c0) ISNULL)) IS TRUE) INNER JOIN v0 ON CAST((v0.c2 IN ()) AS NUMERIC) WHERE (((((CAST(v0.c1 AS BLOB))AND(UPPER(0Xffffffffccf01972))))AND((((v0.c2 IN ()))>=(((((((v0.c2)AND(vt2.c1)))AND(vt2.c1)))OR(v0.c3))))))) ORDER BY ((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2)))>(v0.c1)) INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt0 CROSS JOIN vt2 ON ((((vt0.c0) ISNULL)) IS TRUE) INNER JOIN v0 ON CAST((v0.c2 IN ()) AS NUMERIC) WHERE (((((vt2.c1)-(vt2.c1)))||((vt2.c0 IN ())))) ORDER BY ((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2)))>(v0.c1));
SELECT * FROM vt2, v0 WHERE (CASE WHEN (vt2.c1 IN ()) THEN (+ (vt2.c1)) ELSE LOWER(v0.c0) END);
SELECT DISTINCT * FROM vt2, v0 WHERE (CASE WHEN (vt2.c1 IN ()) THEN (+ (vt2.c1)) ELSE LOWER(v0.c0) END) LIMIT 0X0;
SELECT * FROM vt2, v0 WHERE (CASE WHEN (vt2.c1 IN ()) THEN (+ (vt2.c1)) ELSE LOWER(v0.c0) END);
SELECT DISTINCT * FROM vt2, v0 WHERE (CASE WHEN (vt2.c1 IN ()) THEN (+ (vt2.c1)) ELSE LOWER(v0.c0) END) LIMIT 0X0;
SELECT ALL * FROM v0, vt2 WHERE (((v0.c1 COLLATE NOCASE) ISNULL)) ORDER BY ((json(v0.c2))AND(((vt2.c1)<>(v0.c0))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((v0.c1 COLLATE NOCASE) ISNULL))AND(vt2.c0))) ORDER BY ((json(v0.c2))AND(((vt2.c1)<>(v0.c0)))) INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (x'1efdb1') ORDER BY ((json(v0.c2))AND(((vt2.c1)!=(v0.c0))));
SELECT ALL * FROM v0, vt2 WHERE (((v0.c1 COLLATE NOCASE) ISNULL)) ORDER BY ((json(v0.c2))AND(((vt2.c1)<>(v0.c0))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((v0.c1 COLLATE NOCASE) ISNULL))AND(vt2.c0))) ORDER BY ((json(v0.c2))AND(((vt2.c1)<>(v0.c0)))) INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (x'1efdb1') ORDER BY ((json(v0.c2))AND(((vt2.c1)!=(v0.c0))));
SELECT ALL COUNT(*) FROM vt0 WHERE (CASE WHEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) THEN (vt0.c0 IN ()) END) ORDER BY ((((vt0.c0) ISNULL)) NOTNULL) ASC  NULLS LAST, NULL  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CASE WHEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) THEN (vt0.c0 IN ()) END)AND((((~ (vt0.c0))) IS FALSE)))) ORDER BY (((NOT (vt0.c0)))>((- (vt0.c0)))), ((CAST(vt0.c0 AS NUMERIC))==(((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))) ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END THEN (vt0.c0 IN (vt0.c0)) WHEN (- (vt0.c0)) THEN ((((((((vt0.c0)AND('&')))AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) ELSE CAST(vt0.c0 AS BLOB) END) ORDER BY (((NOT (vt0.c0)))>((- (vt0.c0)))), ((CAST(vt0.c0 AS NUMERIC))=(((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))) ASC  NULLS LAST;
SELECT MAX(v0.c1) FROM vt0, v0 WHERE (((((v0.c1)-(v0.c3))) BETWEEN (((((((((((0.6047149519893941)OR(v0.c3)))AND(0.7962886541743633)))OR(v0.c2)))OR(v0.c3)))OR(v0.c1))) AND ((v0.c2 IN (v0.c0, v0.c1)))));
SELECT MAX(v0.c1) FROM vt0, v0 WHERE (((((v0.c1)-(v0.c3))) BETWEEN (((((((((((0.6047149519893941)OR(v0.c3)))AND(0.7962886541743633)))OR(v0.c2)))OR(v0.c3)))OR(v0.c1))) AND ((v0.c2 IN (v0.c0, v0.c1))))) ORDER BY HEX(((vt0.c0) NOTNULL))  NULLS FIRST, ((NULL)<((((v0.c1, v0.c0)) BETWEEN ((0.10902292696333671, v0.c2)) AND ((v0.c1, v0.c3))))) DESC  NULLS FIRST INTERSECT SELECT MAX(v0.c1) FROM vt0, v0 WHERE ((((((v0.c2, v0.c3)) BETWEEN ((v0.c1, v0.c3)) AND ((v0.c0, v0.c0)))) NOT NULL)) ORDER BY HEX(((vt0.c0) NOTNULL))  NULLS FIRST, ((NULL)<((((v0.c1, v0.c0)) BETWEEN ((0.10902292696333671, v0.c2)) AND ((v0.c1, v0.c3))))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE ('161166612');
SELECT DISTINCT COUNT(*) FROM v0 WHERE ('161166612') INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (CAST(((v0.c3)IS(v0.c2)) AS BLOB));
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON ((((NOT (v0.c3))))<=((((NULL) IS FALSE)))) NATURAL JOIN vt0 WHERE (TRIM(((vt0.c0) NOT NULL))) ORDER BY (((14727476, (- (v0.c1)), (~ (vt2.c0))))<=((((((vt2.c0)OR(vt0.c0)))AND(vt2.c1)), (vt0.c0 IN (v0.c2)), ((vt0.c0)OR(v0.c0))))) DESC  NULLS LAST, (NOT (v0.c2)) COLLATE RTRIM DESC;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON ((((NOT (v0.c3))))<=((((NULL) IS FALSE)))) NATURAL JOIN vt0 WHERE (TRIM(((vt0.c0) NOT NULL))) ORDER BY (((14727476, (- (v0.c1)), (~ (vt2.c0))))<=((((((vt2.c0)OR(vt0.c0)))AND(vt2.c1)), (vt0.c0 IN (v0.c2)), ((vt0.c0)OR(v0.c0))))) DESC  NULLS LAST, (NOT (v0.c2)) COLLATE RTRIM DESC INTERSECT SELECT * FROM v0 LEFT OUTER JOIN vt2 ON ((((NOT (v0.c3))))<=((((NULL) IS FALSE)))) NATURAL JOIN vt0 WHERE (((((vt2.c1) NOTNULL))==(((vt2.c1)<=(vt0.c0))))) ORDER BY (((14727476, (- (v0.c1)), (~ (vt2.c0))))<=((((((vt2.c0)OR(vt0.c0)))AND(vt2.c1)), (vt0.c0 IN (v0.c2)), ((vt0.c0)OR(v0.c0))))) DESC  NULLS LAST, (NOT (v0.c2)) COLLATE RTRIM DESC;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON ((((NOT (v0.c3))))<=((((NULL) IS FALSE)))) NATURAL JOIN vt0 WHERE (TRIM(((vt0.c0) NOT NULL))) ORDER BY (((14727476, (- (v0.c1)), (~ (vt2.c0))))<=((((((vt2.c0)OR(vt0.c0)))AND(vt2.c1)), (vt0.c0 IN (v0.c2)), ((vt0.c0)OR(v0.c0))))) DESC  NULLS LAST, (NOT (v0.c2)) COLLATE RTRIM DESC;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON ((((NOT (v0.c3))))<=((((NULL) IS FALSE)))) NATURAL JOIN vt0 WHERE (TRIM(((vt0.c0) NOT NULL))) ORDER BY (((14727476, (- (v0.c1)), (~ (vt2.c0))))<=((((((vt2.c0)OR(vt0.c0)))AND(vt2.c1)), (vt0.c0 IN (v0.c2)), ((vt0.c0)OR(v0.c0))))) DESC  NULLS LAST, (NOT (v0.c2)) COLLATE RTRIM DESC INTERSECT SELECT * FROM v0 LEFT OUTER JOIN vt2 ON ((((NOT (v0.c3))))<=((((NULL) IS FALSE)))) NATURAL JOIN vt0 WHERE (((((vt2.c1) NOTNULL))==(((vt2.c1)<=(vt0.c0))))) ORDER BY (((14727476, (- (v0.c1)), (~ (vt2.c0))))<=((((((vt2.c0)OR(vt0.c0)))AND(vt2.c1)), (vt0.c0 IN (v0.c2)), ((vt0.c0)OR(v0.c0))))) DESC  NULLS LAST, (NOT (v0.c2)) COLLATE RTRIM DESC;
SELECT ALL * FROM vt2 NOT INDEXED, v0, vt0 WHERE (((v0.c1) BETWEEN (NULL) AND (vt0.c0)) COLLATE NOCASE) ORDER BY ((((v0.c1 COLLATE RTRIM)AND(0Xffffffffe8d2d617)))OR(((vt0.c0) BETWEEN (v0.c0) AND (v0.c2)))) DESC;
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((v0.c1) BETWEEN (NULL) AND (vt0.c0)) COLLATE NOCASE) ORDER BY ((((v0.c1 COLLATE RTRIM)AND(-388835817)))OR(((vt0.c0) BETWEEN (v0.c0) AND (v0.c2)))) DESC LIMIT 1;
SELECT ALL * FROM vt2 NOT INDEXED, v0, vt0 WHERE (((v0.c1) BETWEEN (NULL) AND (vt0.c0)) COLLATE NOCASE) ORDER BY ((((v0.c1 COLLATE RTRIM)AND(0Xffffffffe8d2d617)))OR(((vt0.c0) BETWEEN (v0.c0) AND (v0.c2)))) DESC;
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((v0.c1) BETWEEN (NULL) AND (vt0.c0)) COLLATE NOCASE) ORDER BY ((((v0.c1 COLLATE RTRIM)AND(-388835817)))OR(((vt0.c0) BETWEEN (v0.c0) AND (v0.c2)))) DESC LIMIT 1;
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c1)%(v0.c0)))AND((vt0.c0 IN ())))) ORDER BY v0.c0  NULLS FIRST, ((CASE v0.c1  WHEN v0.c2 THEN v0.c2 END) NOTNULL);
SELECT DISTINCT * FROM v0, vt0 WHERE (((((((v0.c1)%(v0.c0)))AND((vt0.c0 IN ()))))AND(((((0.7993382880294507) NOT NULL)) BETWEEN (NULL) AND ((((vt0.c0, v0.c1, v0.c0))<=((vt0.c0, v0.c0, vt0.c0)))))))) ORDER BY v0.c0  NULLS FIRST, ((CASE v0.c1  WHEN v0.c2 THEN v0.c2 END) NOTNULL) INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (x'') ORDER BY v0.c0  NULLS FIRST, ((CASE v0.c1  WHEN v0.c2 THEN v0.c2 END) NOTNULL);
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c1)%(v0.c0)))AND((vt0.c0 IN ())))) ORDER BY v0.c0  NULLS FIRST, ((CASE v0.c1  WHEN v0.c2 THEN v0.c2 END) NOTNULL);
SELECT DISTINCT * FROM v0, vt0 WHERE (((((((v0.c1)%(v0.c0)))AND((vt0.c0 IN ()))))AND(((((0.7993382880294507) NOT NULL)) BETWEEN (NULL) AND ((((vt0.c0, v0.c1, v0.c0))<=((vt0.c0, v0.c0, vt0.c0)))))))) ORDER BY v0.c0  NULLS FIRST, ((CASE v0.c1  WHEN v0.c2 THEN v0.c2 END) NOTNULL) INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (x'') ORDER BY v0.c0  NULLS FIRST, ((CASE v0.c1  WHEN v0.c2 THEN v0.c2 END) NOTNULL);
SELECT ALL MIN(v0.c3) FROM v0, vt0 WHERE (((((v0.c1) IS TRUE))!=(v0.c1 COLLATE NOCASE))) ORDER BY (((v0.c1, v0.c1, v0.c3)) NOT BETWEEN ((json_array_length(v0.c3), ((v0.c2)|(v0.c1)), ((((((((((v0.c0)AND(v0.c2)))OR(v0.c1)))OR(v0.c3)))OR(v0.c0)))OR(v0.c3)))) AND ((v0.c1 COLLATE RTRIM, ((v0.c0)<=(v0.c0)), v0.c0 COLLATE BINARY))) ASC, UPPER(((v0.c2)<=(v0.c1))) DESC;
SELECT MIN(v0.c3) FROM v0, vt0 WHERE (((((((v0.c1) IS TRUE))>(v0.c1 COLLATE NOCASE)))AND(((((v0.c2)-(v0.c0))) IS FALSE)))) ORDER BY (((v0.c1, v0.c1, v0.c3)) NOT BETWEEN ((json_array_length(v0.c3), ((v0.c2)|(v0.c1)), ((((((((((v0.c0)AND(v0.c2)))OR(v0.c1)))OR(v0.c3)))OR(v0.c0)))OR(v0.c3)))) AND ((v0.c1 COLLATE RTRIM, ((v0.c0)<=(v0.c0)), v0.c0 COLLATE BINARY))) ASC, UPPER(((v0.c2)<=(v0.c1))) DESC LIMIT 1;
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt0 ON ((((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c0))) ISNULL) INNER JOIN vt2 ON (((vt2.c1)|('N*客J')) IN (highlight(v0.c3, v0.c1, v0.c3, vt2.c0), ((v0.c1)==(v0.c1)))) WHERE (NULL) ORDER BY TRIM(DISTINCT (v0.c0 IN (vt2.c1))) ASC  NULLS FIRST, (((CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN vt2.c1 ELSE v0.c3 END, json(v0.c2), CASE WHEN NULL THEN v0.c0 WHEN x'9e59' THEN vt0.c0 END))<((((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c0)), vt2.c0 COLLATE RTRIM, ((v0.c0) BETWEEN (NULL) AND (v0.c3)))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt0 ON ((((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c0))) ISNULL) INNER JOIN vt2 ON (((vt2.c1)|('N*客J')) IN (highlight(v0.c3, v0.c1, v0.c3, vt2.c0), ((v0.c1)=(v0.c1)))) WHERE (NULL) ORDER BY (((((vt0.c0, v0.c1))=((vt2.c0, vt2.c1)))) IS FALSE) DESC, ((CAST(vt2.c1 AS INTEGER)) IS TRUE)  NULLS FIRST, (((((((((v0.c3))!=((vt2.c0))))AND((v0.c1 IN (vt0.c0, vt0.c0)))))OR((((v0.c1, 33514151, -1.727422081E9, v0.c0))==((vt2.c1, v0.c3, vt0.c0, v0.c0))))))AND(((((((((((vt2.c0)OR(vt0.c0)))AND('b7o[')))AND(x'')))OR(v0.c1)))AND(vt2.c1)))) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt0 ON ((((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c0))) ISNULL) INNER JOIN vt2 ON (((vt2.c1)|('N*客J')) IN (highlight(v0.c3, v0.c1, v0.c3, vt2.c0), ((v0.c1)=(v0.c1)))) WHERE (((LAST_INSERT_ROWID())+(((v0.c0)LIKE(vt2.c0))))) ORDER BY (((((vt0.c0, v0.c1))=((vt2.c0, vt2.c1)))) IS FALSE) DESC, ((CAST(vt2.c1 AS INTEGER)) IS TRUE)  NULLS FIRST, (((((((((v0.c3))!=((vt2.c0))))AND((v0.c1 IN (vt0.c0, vt0.c0)))))OR((((v0.c1, 0x1ff62a7, -1.727422081E9, v0.c0))=((vt2.c1, v0.c3, vt0.c0, v0.c0))))))AND(((((((((((vt2.c0)OR(vt0.c0)))AND('b7o[')))AND(x'')))OR(v0.c1)))AND(vt2.c1)))) LIMIT 1;
SELECT * FROM vt0 WHERE (SQLITE_VERSION()) ORDER BY vt0.c0 DESC;
SELECT ALL * FROM vt0 WHERE (SQLITE_VERSION()) ORDER BY vt0.c0 DESC INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c0 IN (vt0.c0)), CAST(0.3377902691529274 AS INTEGER), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((-5.72972978E8))), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN x'4e' THEN vt0.c0 ELSE vt0.c0 END, (~ (vt0.c0))))>(((vt0.c0 IN (vt0.c0)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), ((vt0.c0) NOT NULL), (vt0.c0 IN ()), vt0.c0 COLLATE NOCASE)))) ORDER BY vt0.c0 DESC;
SELECT * FROM vt0 WHERE (SQLITE_VERSION()) ORDER BY vt0.c0 DESC;
SELECT ALL * FROM vt0 WHERE (SQLITE_VERSION()) ORDER BY vt0.c0 DESC INTERSECT SELECT ALL * FROM vt0 WHERE (((((vt0.c0 IN (vt0.c0)), CAST(0.3377902691529274 AS INTEGER), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((-5.72972978E8))), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN x'4e' THEN vt0.c0 ELSE vt0.c0 END, (~ (vt0.c0))))>(((vt0.c0 IN (vt0.c0)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), ((vt0.c0) NOT NULL), (vt0.c0 IN ()), vt0.c0 COLLATE NOCASE)))) ORDER BY vt0.c0 DESC;
SELECT * FROM v0 WHERE ((((((((((((v0.c3))>=((v0.c1))))AND(((v0.c0)<<(v0.c2)))))AND(((((((v0.c3)OR(v0.c3)))OR(v0.c0)))OR(v0.c0)))))AND(v0.c3)))AND(((((((((v0.c2)AND(v0.c1)))OR(0.6668751354610258)))AND(v0.c1)))AND(v0.c0)))));
SELECT ALL * FROM v0 WHERE ((((((((((((((v0.c3))>=((v0.c1))))AND(((v0.c0)<<(v0.c2)))))AND(((((((v0.c3)OR(v0.c3)))OR(v0.c0)))OR(v0.c0)))))AND(v0.c3)))AND(((((((((v0.c2)AND(v0.c1)))OR(0.6668751354610258)))AND(v0.c1)))AND(v0.c0)))))AND((((v0.c0 IN (v0.c3, v0.c2, v0.c2))) ISNULL)))) LIMIT 1;
SELECT * FROM v0 WHERE ((((((((((((v0.c3))>=((v0.c1))))AND(((v0.c0)<<(v0.c2)))))AND(((((((v0.c3)OR(v0.c3)))OR(v0.c0)))OR(v0.c0)))))AND(v0.c3)))AND(((((((((v0.c2)AND(v0.c1)))OR(0.6668751354610258)))AND(v0.c1)))AND(v0.c0)))));
SELECT ALL * FROM v0 WHERE ((((((((((((((v0.c3))>=((v0.c1))))AND(((v0.c0)<<(v0.c2)))))AND(((((((v0.c3)OR(v0.c3)))OR(v0.c0)))OR(v0.c0)))))AND(v0.c3)))AND(((((((((v0.c2)AND(v0.c1)))OR(0.6668751354610258)))AND(v0.c1)))AND(v0.c0)))))AND((((v0.c0 IN (v0.c3, v0.c2, v0.c2))) ISNULL)))) LIMIT 1;
SELECT COUNT(*) FROM v0 WHERE ((((+ (v0.c2)))LIKE(NULL)));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((((+ (v0.c2)))LIKE(NULL)))AND((+ (CAST(v0.c3 AS NUMERIC)))))) LIMIT 0X2;
SELECT MAX(vt0.c0) FROM vt0 NATURAL JOIN vt2 CROSS JOIN v0 ON ((((CASE WHEN '-355614471' THEN vt0.c0 END)AND(CASE v0.c2  WHEN v0.c0 THEN vt0.c0 WHEN vt2.c1 THEN v0.c1 END)))OR(((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0)))) WHERE ((((((v0.c3, v0.c2, v0.c1))==((vt2.c0, v0.c2, v0.c2)))) IS FALSE)) ORDER BY CAST(DATE(v0.c3, vt2.c1, vt2.c1, v0.c0) AS BLOB), ((vt2.c0 COLLATE NOCASE)AND(((v0.c1) BETWEEN (vt2.c1) AND (vt2.c1)))) ASC, ((CAST(vt0.c0 AS INTEGER)) NOT BETWEEN ((NOT (v0.c1))) AND (((vt2.c0) BETWEEN (v0.c3) AND (v0.c1))));
SELECT ALL MAX(vt0.c0) FROM vt0 NATURAL JOIN vt2 CROSS JOIN v0 ON ((((CASE WHEN '-355614471' THEN vt0.c0 END)AND(CASE v0.c2  WHEN v0.c0 THEN vt0.c0 WHEN vt2.c1 THEN v0.c1 END)))OR(((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0)))) WHERE ((((((((v0.c3, v0.c2, v0.c1))=((vt2.c0, v0.c2, v0.c2)))) IS FALSE))AND(CAST(((v0.c1) NOT BETWEEN (v0.c0) AND (vt2.c1)) AS REAL)))) ORDER BY CAST(DATE(v0.c3, vt2.c1, vt2.c1, v0.c0) AS BLOB), ((vt2.c0 COLLATE NOCASE)AND(((v0.c1) BETWEEN (vt2.c1) AND (vt2.c1)))) ASC, ((CAST(vt0.c0 AS INTEGER)) NOT BETWEEN ((NOT (v0.c1))) AND (((vt2.c0) BETWEEN (v0.c3) AND (v0.c1)))) INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 NATURAL JOIN vt2 CROSS JOIN v0 ON ((((CASE WHEN '-355614471' THEN vt0.c0 END)AND(CASE v0.c2  WHEN v0.c0 THEN vt0.c0 WHEN vt2.c1 THEN v0.c1 END)))OR(((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0)))) WHERE (v0.c1) ORDER BY CAST(DATE(v0.c3, vt2.c1, vt2.c1, v0.c0) AS BLOB), ((vt2.c0 COLLATE NOCASE)AND(((v0.c1) BETWEEN (vt2.c1) AND (vt2.c1)))) ASC, ((CAST(vt0.c0 AS INTEGER)) NOT BETWEEN ((NOT (v0.c1))) AND (((vt2.c0) BETWEEN (v0.c3) AND (v0.c1))));
SELECT ALL MAX(v0.c1) FROM v0 INNER JOIN vt0 ON ((CASE WHEN v0.c2 THEN v0.c0 WHEN x'4ddae4' THEN vt0.c0 WHEN v0.c3 THEN v0.c0 END) BETWEEN (vt0.c0 COLLATE NOCASE) AND ((((x'0bd3')) BETWEEN ((v0.c3)) AND ((v0.c0))))) WHERE ((('') NOT BETWEEN (((v0.c3) NOT NULL)) AND (((v0.c1) ISNULL))));
SELECT MAX(v0.c1) FROM v0 INNER JOIN vt0 ON ((CASE WHEN v0.c2 THEN v0.c0 WHEN x'4ddae4' THEN vt0.c0 WHEN v0.c3 THEN v0.c0 END) BETWEEN (vt0.c0 COLLATE NOCASE) AND ((((x'0bd3')) BETWEEN ((v0.c3)) AND ((v0.c0))))) WHERE ((((('') NOT BETWEEN (((v0.c3) NOT NULL)) AND (((v0.c1) ISNULL))))AND(ABS(v0.c2))));
SELECT ALL * FROM v0, vt0 WHERE (((x'13') NOTNULL));
SELECT ALL * FROM v0, vt0 WHERE (((x'13') NOTNULL)) LIMIT 0x1 INTERSECT SELECT ALL * FROM v0, vt0 WHERE (((CASE WHEN 'y' THEN v0.c0 END) IS FALSE)) LIMIT 0x1;
SELECT ALL * FROM v0, vt0 WHERE (((x'13') NOTNULL));
SELECT ALL * FROM v0, vt0 WHERE (((x'13') NOTNULL)) LIMIT 0x1 INTERSECT SELECT ALL * FROM v0, vt0 WHERE (((CASE WHEN 'y' THEN v0.c0 END) IS FALSE)) LIMIT 0x1;
SELECT ALL * FROM vt2 WHERE (0.6144495442582903) ORDER BY json_extract(((0.002832110130108423) NOT BETWEEN (vt2.c1) AND (vt2.c0)), 0.6277438682583857, ABS(DISTINCT vt2.c1))  NULLS LAST, (((((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND (('2&~'))))AND((vt2.c0 IN (641952782, vt2.c0, vt2.c1)))))OR(((vt2.c0) NOT BETWEEN (0.9271790818460003) AND (vt2.c1))))  NULLS LAST;
SELECT * FROM vt2 WHERE (((0.6144495442582903)AND((((LIKE(vt2.c1, x'6ffa', '-'), ((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)), ((vt2.c1)==(vt2.c0)), (~ (vt2.c1)), CAST(vt2.c0 AS TEXT)))==(((((vt2.c1, vt2.c1)) BETWEEN ((vt2.c0, vt2.c0)) AND ((vt2.c0, vt2.c1))), (vt2.c1 IN (vt2.c1)), ((vt2.c1)|(vt2.c0)), ((vt2.c0) ISNULL), 0.1046273873732394)))))) ORDER BY ((NULL) NOTNULL) DESC  NULLS LAST, (- (vt2.c1)) ASC INTERSECT SELECT * FROM vt2 WHERE (((((vt2.c1)IS NOT(vt2.c0)))GLOB(CAST(vt2.c1 AS NUMERIC)))) ORDER BY ((NULL) NOTNULL) DESC  NULLS LAST, (- (vt2.c1)) ASC;
SELECT ALL * FROM vt2 WHERE (0.6144495442582903) ORDER BY json_extract(((0.002832110130108423) NOT BETWEEN (vt2.c1) AND (vt2.c0)), 0.6277438682583857, ABS(DISTINCT vt2.c1))  NULLS LAST, (((((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND (('2&~'))))AND((vt2.c0 IN (641952782, vt2.c0, vt2.c1)))))OR(((vt2.c0) NOT BETWEEN (0.9271790818460003) AND (vt2.c1))))  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0, v0 WHERE (vt0.c0);
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (((vt0.c0)AND(vt0.c0)));
SELECT * FROM vt2, vt0, v0 WHERE ('BC(
E	') ORDER BY (((((vt0.c0)GLOB(vt2.c0)), (+ (vt0.c0))))>((((((((vt2.c1)AND(v0.c1)))OR(v0.c1)))OR(vt2.c1)), json_array('', NULL, vt2.c0, v0.c0)))) ASC;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((('BC(
E	')AND((- ('1702837040'))))) ORDER BY (((((vt0.c0)GLOB(vt2.c0)), (+ (vt0.c0))))>((((((((vt2.c1)AND(v0.c1)))OR(v0.c1)))OR(vt2.c1)), json_array('', NULL, vt2.c0, v0.c0)))) ASC;
SELECT * FROM vt2, vt0, v0 WHERE ('BC(
E	') ORDER BY (((((vt0.c0)GLOB(vt2.c0)), (+ (vt0.c0))))>((((((((vt2.c1)AND(v0.c1)))OR(v0.c1)))OR(vt2.c1)), json_array('', NULL, vt2.c0, v0.c0)))) ASC;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((('BC(
E	')AND((- ('1702837040'))))) ORDER BY (((((vt0.c0)GLOB(vt2.c0)), (+ (vt0.c0))))>((((((((vt2.c1)AND(v0.c1)))OR(v0.c1)))OR(vt2.c1)), json_array('', NULL, vt2.c0, v0.c0)))) ASC;
SELECT MAX(vt2.c1) FROM vt2, vt0 WHERE ((vt0.c0 COLLATE BINARY IN ())) ORDER BY vt2.c1  NULLS FIRST, CASE CAST(vt2.c0 AS BLOB)  WHEN vt2.c1 THEN vt0.c0 COLLATE BINARY END DESC, (((vt2.c0)-(vt0.c0)) IN (IFNULL(vt0.c0, vt2.c1)));
SELECT DISTINCT MAX(vt2.c1) FROM vt2, vt0 WHERE ((vt0.c0 COLLATE BINARY IN ())) ORDER BY SQLITE_COMPILEOPTION_GET((vt0.c0 IN ()))  NULLS FIRST LIMIT 0X1;
SELECT ALL MIN(v0.c2) FROM v0 WHERE (((v0.c0 COLLATE RTRIM)==((((v0.c3))>=((v0.c2)))))) ORDER BY (((((((v0.c3, v0.c0, v0.c3))>=((v0.c1, v0.c2, v0.c3))))OR(((0.2849142478857636) NOTNULL))))AND((v0.c1 IN ())))  NULLS FIRST, (v0.c0 IN ());
SELECT MIN(v0.c2) FROM v0 WHERE (((v0.c0 COLLATE RTRIM)=((((v0.c3))==((v0.c2)))))) ORDER BY '770310855', 0.7654507498662063 DESC INTERSECT SELECT MIN(v0.c2) FROM v0 WHERE (LTRIM(CAST(v0.c2 AS NUMERIC), (+ (v0.c1)))) ORDER BY '770310855', 0.7654507498662063 DESC;
SELECT ALL * FROM vt2, vt0 WHERE (((((((vt0.c0)AND(LIKE(vt2.c1, vt2.c1))))OR(((vt2.c0)OR(vt2.c1)))))AND(((vt0.c0)IS NOT(vt2.c1))))) ORDER BY ((((vt0.c0)AND(vt2.c1))) IS TRUE)  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (((((((((vt0.c0)AND(LIKE(vt2.c1, vt2.c1))))OR(((vt2.c0)OR(vt2.c1)))))AND(((vt0.c0)IS NOT(vt2.c1)))))AND(LIKELY(DISTINCT ((vt0.c0) BETWEEN (vt2.c1) AND (vt0.c0)))))) ORDER BY ((((vt0.c0)&(vt2.c0)))LIKE(((vt2.c0) IS TRUE))) ASC LIMIT 1;
SELECT ALL * FROM vt2, vt0 WHERE (((((((vt0.c0)AND(LIKE(vt2.c1, vt2.c1))))OR(((vt2.c0)OR(vt2.c1)))))AND(((vt0.c0)IS NOT(vt2.c1))))) ORDER BY ((((vt0.c0)AND(vt2.c1))) IS TRUE)  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (((((((((vt0.c0)AND(LIKE(vt2.c1, vt2.c1))))OR(((vt2.c0)OR(vt2.c1)))))AND(((vt0.c0)IS NOT(vt2.c1)))))AND(LIKELY(DISTINCT ((vt0.c0) BETWEEN (vt2.c1) AND (vt0.c0)))))) ORDER BY ((((vt0.c0)&(vt2.c0)))LIKE(((vt2.c0) IS TRUE))) ASC LIMIT 1;
SELECT ALL MAX(v0.c2) FROM vt0 NATURAL JOIN v0 WHERE ('1603514979');
SELECT DISTINCT MAX(v0.c2) FROM vt0 NATURAL JOIN v0 WHERE ('1603514979') LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, 0.5535893660128063))==((((vt0.c0)/(vt0.c0)), (((vt0.c0, vt0.c0))<>((vt0.c0, vt0.c0))))))) ORDER BY ((((vt0.c0) IS TRUE)) NOT BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (0Xffffffffe6eb57d0)) ASC  NULLS FIRST, vt0.c0 DESC  NULLS FIRST, ((((ROUND(vt0.c0, vt0.c0))AND((NOT (vt0.c0)))))OR(((vt0.c0)-(vt0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, 0.5535893660128063))==((((vt0.c0)/(vt0.c0)), (((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))))))) ORDER BY (~ (vt0.c0)) COLLATE NOCASE ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY (~ (vt0.c0)) COLLATE NOCASE ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, 0.5535893660128063))==((((vt0.c0)/(vt0.c0)), (((vt0.c0, vt0.c0))<>((vt0.c0, vt0.c0))))))) ORDER BY ((((vt0.c0) IS TRUE)) NOT BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (0Xffffffffe6eb57d0)) ASC  NULLS FIRST, vt0.c0 DESC  NULLS FIRST, ((((ROUND(vt0.c0, vt0.c0))AND((NOT (vt0.c0)))))OR(((vt0.c0)-(vt0.c0))))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, 0.5535893660128063))==((((vt0.c0)/(vt0.c0)), (((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))))))) ORDER BY (~ (vt0.c0)) COLLATE NOCASE ASC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY (~ (vt0.c0)) COLLATE NOCASE ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (CASE IFNULL(vt0.c0, vt0.c0)  WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN highlight('', vt0.c0, vt0.c0, vt0.c0) WHEN vt0.c0 THEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, NULL))) ELSE x'8af4' END) ORDER BY CASE WHEN CAST(vt0.c0 AS NUMERIC) THEN CAST(vt0.c0 AS INTEGER) WHEN ((vt0.c0)AND(vt0.c0)) THEN ((vt0.c0)&(vt0.c0)) WHEN (vt0.c0 IN ()) THEN CAST(NULL AS BLOB) END;
SELECT DISTINCT * FROM vt0 WHERE (((CASE IFNULL(vt0.c0, vt0.c0)  WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN highlight('', vt0.c0, vt0.c0, vt0.c0) WHEN vt0.c0 THEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, NULL))) ELSE x'8af4' END)AND((((- (vt0.c0))) BETWEEN (0.5739444950459535) AND (LIKELY(vt0.c0)))))) ORDER BY CASE WHEN CAST(vt0.c0 AS NUMERIC) THEN CAST(vt0.c0 AS INTEGER) WHEN ((vt0.c0)AND(vt0.c0)) THEN ((vt0.c0)&(vt0.c0)) WHEN (vt0.c0 IN ()) THEN CAST(NULL AS BLOB) END LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((LOWER(vt0.c0))AND(vt0.c0)))AND(((vt0.c0) IS FALSE)))) ORDER BY CASE WHEN CAST(vt0.c0 AS NUMERIC) THEN CAST(vt0.c0 AS INTEGER) WHEN ((vt0.c0)AND(vt0.c0)) THEN ((vt0.c0)&(vt0.c0)) WHEN (vt0.c0 IN ()) THEN CAST(NULL AS BLOB) END LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CASE IFNULL(vt0.c0, vt0.c0)  WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN highlight('', vt0.c0, vt0.c0, vt0.c0) WHEN vt0.c0 THEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, NULL))) ELSE x'8af4' END) ORDER BY CASE WHEN CAST(vt0.c0 AS NUMERIC) THEN CAST(vt0.c0 AS INTEGER) WHEN ((vt0.c0)AND(vt0.c0)) THEN ((vt0.c0)&(vt0.c0)) WHEN (vt0.c0 IN ()) THEN CAST(NULL AS BLOB) END;
SELECT MIN(v0.c0) FROM vt2, v0, vt0 WHERE (((((((((v0.c2)AND(v0.c1)))AND(x'')))OR(v0.c1)))>=(((v0.c3) IS FALSE))));
SELECT ALL MIN(v0.c0) FROM vt2, v0, vt0 WHERE (((((((((((v0.c2)AND(v0.c1)))AND(x'')))OR(v0.c1)))>(((v0.c3) IS FALSE))))AND(vt0.c0))) ORDER BY ((CAST(v0.c0 AS TEXT)) NOT BETWEEN (((((((((v0.c2)AND(v0.c0)))OR(1.014823335E9)))AND(v0.c0)))AND(v0.c3))) AND (((v0.c1)/(vt2.c0))))  NULLS LAST, ((((+ (vt2.c0))))<>(('\A'))) ASC  NULLS FIRST INTERSECT SELECT ALL MIN(v0.c0) FROM vt2, v0, vt0 WHERE (CAST((v0.c1 IN ()) AS BLOB)) ORDER BY ((CAST(v0.c0 AS TEXT)) NOT BETWEEN (((((((((v0.c2)AND(v0.c0)))OR(1.014823335E9)))AND(v0.c0)))AND(v0.c3))) AND (((v0.c1)/(vt2.c0))))  NULLS LAST, ((((+ (vt2.c0))))!=(('\A'))) ASC  NULLS FIRST;
SELECT * FROM v0, vt0, vt2 WHERE (('v]g' IN (((vt0.c0) BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (((((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c3))))<=((((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c2))))) ASC;
SELECT ALL * FROM v0, vt0, vt2 WHERE (('v]g' IN (((vt0.c0) BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (((((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c3))))<=((((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c2))))) ASC LIMIT 1;
SELECT * FROM v0, vt0, vt2 WHERE (('v]g' IN (((vt0.c0) BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (((((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c3))))<=((((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c2))))) ASC;
SELECT ALL * FROM v0, vt0, vt2 WHERE (('v]g' IN (((vt0.c0) BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (((((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c3))))<=((((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c2))))) ASC LIMIT 1;
SELECT * FROM vt2, v0 WHERE (((((((v0.c2, v0.c2, v0.c1))<=((v0.c2, v0.c0, vt2.c1))), 0xffffffffdf1cee96, (x'' IN (vt2.c1))))>((CAST(vt2.c0 AS BLOB), ((v0.c1) IS FALSE), ((v0.c3)%(v0.c2)))))) ORDER BY ((((((((((((v0.c3)OR(v0.c0)))AND(NULL)))OR(v0.c0)))OR(vt2.c0)))AND(vt2.c1))) NOT BETWEEN ((v0.c3 IN (v0.c3))) AND (((vt2.c1)=(vt2.c0)))) ASC;
SELECT DISTINCT * FROM vt2, v0 WHERE (((((((((v0.c2, v0.c2, v0.c1))<=((v0.c2, v0.c0, vt2.c1))), -551752042, (x'' IN (vt2.c1))))>((CAST(vt2.c0 AS BLOB), ((v0.c1) IS FALSE), ((v0.c3)%(v0.c2))))))AND(json_extract(((v0.c3)AND(v0.c2)), (((v0.c2, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c1, v0.c3)) AND ((v0.c3, v0.c0, v0.c3))), ((v0.c1) ISNULL))))) ORDER BY ((((((v0.c0)AND(NULL)))OR(v0.c1))) ISNULL)  NULLS LAST LIMIT 1;
SELECT * FROM vt2, v0 WHERE (((((((v0.c2, v0.c2, v0.c1))<=((v0.c2, v0.c0, vt2.c1))), 0xffffffffdf1cee96, (x'' IN (vt2.c1))))>((CAST(vt2.c0 AS BLOB), ((v0.c1) IS FALSE), ((v0.c3)%(v0.c2)))))) ORDER BY ((((((((((((v0.c3)OR(v0.c0)))AND(NULL)))OR(v0.c0)))OR(vt2.c0)))AND(vt2.c1))) NOT BETWEEN ((v0.c3 IN (v0.c3))) AND (((vt2.c1)=(vt2.c0)))) ASC;
SELECT DISTINCT * FROM vt2, v0 WHERE (((((((((v0.c2, v0.c2, v0.c1))<=((v0.c2, v0.c0, vt2.c1))), -551752042, (x'' IN (vt2.c1))))>((CAST(vt2.c0 AS BLOB), ((v0.c1) IS FALSE), ((v0.c3)%(v0.c2))))))AND(json_extract(((v0.c3)AND(v0.c2)), (((v0.c2, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c1, v0.c3)) AND ((v0.c3, v0.c0, v0.c3))), ((v0.c1) ISNULL))))) ORDER BY ((((((v0.c0)AND(NULL)))OR(v0.c1))) ISNULL)  NULLS LAST LIMIT 1;
SELECT * FROM v0 WHERE (NULL);
SELECT ALL * FROM v0 WHERE (NULL) LIMIT 0X0 INTERSECT SELECT * FROM v0 WHERE (((((v0.c3)<>(v0.c3))) BETWEEN (v0.c2 COLLATE NOCASE) AND (CASE v0.c3  WHEN v0.c3 THEN v0.c0 END))) LIMIT 0X0;
SELECT * FROM v0 WHERE (NULL);
SELECT ALL * FROM v0 WHERE (NULL) LIMIT 0X0 INTERSECT SELECT * FROM v0 WHERE (((((v0.c3)<>(v0.c3))) BETWEEN (v0.c2 COLLATE NOCASE) AND (CASE v0.c3  WHEN v0.c3 THEN v0.c0 END))) LIMIT 0X0;
SELECT * FROM vt2 WHERE ((((((vt2.c1 IN (vt2.c0)))AND(((vt2.c0)>(vt2.c1)))))AND((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c0, vt2.c0))))));
SELECT * FROM vt2 WHERE ((((((vt2.c1 IN (vt2.c0)))AND(((vt2.c0)>(vt2.c1)))))AND((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c0, vt2.c0)))))) ORDER BY ((((vt2.c0)==(vt2.c1)))<>(((vt2.c0)/(vt2.c1)))) LIMIT 1;
SELECT * FROM vt2 WHERE ((((((vt2.c1 IN (vt2.c0)))AND(((vt2.c0)>(vt2.c1)))))AND((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c0, vt2.c0))))));
SELECT * FROM vt2 WHERE ((((((vt2.c1 IN (vt2.c0)))AND(((vt2.c0)>(vt2.c1)))))AND((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c0, vt2.c0)))))) ORDER BY ((((vt2.c0)==(vt2.c1)))<>(((vt2.c0)/(vt2.c1)))) LIMIT 1;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 END) NOT BETWEEN (((NULL)IS NOT(vt0.c0))) AND (((((vt0.c0)OR(NULL)))AND(vt0.c0))))) ORDER BY (+ (CASE vt0.c0  WHEN '8307861' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN '-1953238461' THEN vt0.c0 END)) DESC;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((CASE WHEN vt0.c0 THEN vt0.c0 END) NOT BETWEEN (((NULL)IS NOT(vt0.c0))) AND (((((vt0.c0)OR(NULL)))AND(vt0.c0)))))AND(((((((((vt0.c0)AND('-1548503606')))AND(vt0.c0)))AND(vt0.c0))) NOT BETWEEN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) AND (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))))))) ORDER BY (+ (CASE vt0.c0  WHEN '8307861' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN '-1953238461' THEN vt0.c0 END)) DESC LIMIT 0;
SELECT * FROM vt0 WHERE ((+ (((vt0.c0)>(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE ((+ (((vt0.c0)>(vt0.c0))))) ORDER BY ((((vt0.c0)&(vt0.c0)))<<(((vt0.c0)IS NOT(vt0.c0))))  NULLS LAST, (((((~ (vt0.c0)))AND(vt0.c0 COLLATE NOCASE)))OR((vt0.c0 IN (vt0.c0, vt0.c0)))) LIMIT 5;
SELECT * FROM vt0 WHERE ((+ (((vt0.c0)>(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE ((+ (((vt0.c0)>(vt0.c0))))) ORDER BY ((((vt0.c0)&(vt0.c0)))<<(((vt0.c0)IS NOT(vt0.c0))))  NULLS LAST, (((((~ (vt0.c0)))AND(vt0.c0 COLLATE NOCASE)))OR((vt0.c0 IN (vt0.c0, vt0.c0)))) LIMIT 5;
SELECT * FROM vt2 CROSS JOIN v0 ON ((((('쑘', v0.c0, vt0.c0)) BETWEEN ((v0.c1, vt2.c0, v0.c0)) AND ((v0.c0, v0.c2, ''))))/((0.6820779424149945 IN (vt0.c0)))) NATURAL JOIN vt0 WHERE (vt2.c1) ORDER BY ((((((((((CASE v0.c1  WHEN vt2.c0 THEN NULL WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c1 THEN v0.c0 END)AND(CAST(v0.c0 AS REAL))))AND(((NULL)>(v0.c3)))))AND(((v0.c1) BETWEEN (vt2.c0) AND (vt2.c0)))))AND(vt2.c0)))OR(vt0.c0 COLLATE RTRIM))  NULLS FIRST, CAST(((v0.c2) NOT NULL) AS BLOB), CASE WHEN ((v0.c2) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN LIKELIHOOD(DISTINCT vt2.c0, 0.5953017587139559) END DESC  NULLS LAST, ((vt2.c1 IN (vt0.c0, vt2.c0)) IN ());
SELECT * FROM vt2 CROSS JOIN v0 ON ((((('쑘', v0.c0, vt0.c0)) BETWEEN ((v0.c1, vt2.c0, v0.c0)) AND ((v0.c0, v0.c2, ''))))/((0.6820779424149945 IN (vt0.c0)))) NATURAL JOIN vt0 WHERE (((vt2.c1)AND(LIKE(((((((((v0.c1)OR(v0.c0)))AND(v0.c2)))AND(vt2.c0)))OR(vt2.c0)), CAST(v0.c3 AS REAL), 'B')))) ORDER BY ((((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1))) NOT BETWEEN (CASE vt2.c0  WHEN x'' THEN v0.c1 WHEN vt2.c1 THEN vt0.c0 WHEN v0.c2 THEN v0.c3 WHEN vt2.c1 THEN vt0.c0 WHEN v0.c3 THEN v0.c1 END) AND (v0.c1)) DESC LIMIT 1;
SELECT * FROM vt2 CROSS JOIN v0 ON ((((('쑘', v0.c0, vt0.c0)) BETWEEN ((v0.c1, vt2.c0, v0.c0)) AND ((v0.c0, v0.c2, ''))))/((0.6820779424149945 IN (vt0.c0)))) NATURAL JOIN vt0 WHERE (vt2.c1) ORDER BY ((((((((((CASE v0.c1  WHEN vt2.c0 THEN NULL WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c1 THEN v0.c0 END)AND(CAST(v0.c0 AS REAL))))AND(((NULL)>(v0.c3)))))AND(((v0.c1) BETWEEN (vt2.c0) AND (vt2.c0)))))AND(vt2.c0)))OR(vt0.c0 COLLATE RTRIM))  NULLS FIRST, CAST(((v0.c2) NOT NULL) AS BLOB), CASE WHEN ((v0.c2) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN LIKELIHOOD(DISTINCT vt2.c0, 0.5953017587139559) END DESC  NULLS LAST, ((vt2.c1 IN (vt0.c0, vt2.c0)) IN ());
SELECT * FROM vt0, v0, vt2 WHERE ((CAST(v0.c2 AS INTEGER) IN (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))))) ORDER BY ((UNLIKELY(DISTINCT v0.c3))<(CASE WHEN vt2.c1 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 ELSE v0.c3 END)) DESC, UNLIKELY(DATETIME(v0.c1, v0.c2, v0.c3)) ASC, CAST(CASE WHEN v0.c0 THEN vt0.c0 END AS BLOB);
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((CAST(v0.c2 AS INTEGER) IN (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))))) ORDER BY ((UNLIKELY(DISTINCT v0.c3))<(CASE WHEN vt2.c1 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 ELSE v0.c3 END)) DESC, UNLIKELY(DATETIME(v0.c1, v0.c2, v0.c3)) ASC, CAST(CASE WHEN v0.c0 THEN vt0.c0 END AS BLOB);
SELECT * FROM vt0, v0, vt2 WHERE ((CAST(v0.c2 AS INTEGER) IN (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))))) ORDER BY ((UNLIKELY(DISTINCT v0.c3))<(CASE WHEN vt2.c1 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 ELSE v0.c3 END)) DESC, UNLIKELY(DATETIME(v0.c1, v0.c2, v0.c3)) ASC, CAST(CASE WHEN v0.c0 THEN vt0.c0 END AS BLOB);
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((CAST(v0.c2 AS INTEGER) IN (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1))))) ORDER BY ((UNLIKELY(DISTINCT v0.c3))<(CASE WHEN vt2.c1 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 ELSE v0.c3 END)) DESC, UNLIKELY(DATETIME(v0.c1, v0.c2, v0.c3)) ASC, CAST(CASE WHEN v0.c0 THEN vt0.c0 END AS BLOB);
SELECT MAX(v0.c3) FROM v0, vt0, vt2 WHERE (((0.08446196480275558) BETWEEN (v0.c2) AND (v0.c0)) COLLATE RTRIM) ORDER BY (((('0.12792904011923356')OR(v0.c0)))AND(json_array_length(v0.c0))), ((((((((((((NULL)<(vt2.c1)))AND(((('-1966523904'))!=((v0.c3))))))AND(CASE WHEN vt2.c1 THEN v0.c0 END)))OR(json(vt2.c0))))AND((((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt0.c0))))))AND(((vt2.c1) NOTNULL))) ASC  NULLS LAST, (~ (((v0.c1) NOT NULL))), v0.c3 COLLATE RTRIM;
SELECT MAX(v0.c3) FROM v0, vt0, vt2 WHERE (((((0.08446196480275558) BETWEEN (v0.c2) AND (v0.c0)) COLLATE RTRIM)AND(2.14129716E8))) ORDER BY (((('0.12792904011923356')OR(v0.c0)))AND(json_array_length(v0.c0))), ((((((((((((NULL)<(vt2.c1)))AND(((('-1966523904'))!=((v0.c3))))))AND(CASE WHEN vt2.c1 THEN v0.c0 END)))OR(json(vt2.c0))))AND((((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt0.c0))))))AND(((vt2.c1) NOTNULL))) ASC  NULLS LAST, (~ (((v0.c1) NOT NULL))), v0.c3 COLLATE RTRIM LIMIT 0X2 INTERSECT SELECT MAX(v0.c3) FROM v0, vt0, vt2 WHERE ((+ (x'65')) COLLATE RTRIM) ORDER BY (((('0.12792904011923356')OR(v0.c0)))AND(json_array_length(v0.c0))), ((((((((((((NULL)<(vt2.c1)))AND(((('-1966523904'))<>((v0.c3))))))AND(CASE WHEN vt2.c1 THEN v0.c0 END)))OR(json(vt2.c0))))AND((((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt0.c0))))))AND(((vt2.c1) NOTNULL))) ASC  NULLS LAST, (~ (((v0.c1) NOT NULL))), v0.c3 COLLATE RTRIM LIMIT 2;
SELECT ALL COUNT(*) FROM v0 WHERE ((((- (v0.c1)))OR(CAST(v0.c3 AS BLOB)))) ORDER BY TYPEOF((+ (v0.c3))) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((((- (v0.c1)))OR(CAST(v0.c3 AS BLOB))))AND(CASE ((((((x'')OR(v0.c1)))OR(v0.c1)))AND(v0.c1))  WHEN (((v0.c0, v0.c2))=((v0.c3, v0.c3))) THEN v0.c1 COLLATE RTRIM WHEN load_extension(v0.c3) THEN CASE WHEN v0.c3 THEN v0.c1 END ELSE x'' END))) ORDER BY (((((v0.c3, v0.c2, v0.c1))<=((v0.c3, v0.c1, NULL))))==(((((((v0.c1)AND(v0.c3)))AND(v0.c2)))AND(v0.c1))))  NULLS LAST;
SELECT ALL MIN(vt2.c1) FROM vt2, v0, vt0 WHERE (v0.c1);
SELECT MIN(vt2.c1) FROM vt2, v0, vt0 WHERE (v0.c1);
SELECT ALL MIN(v0.c1) FROM vt2, v0, vt0 WHERE ((((((v0.c1)>(vt2.c0)), ((v0.c1)OR(vt2.c0))))!=((v0.c3, ((v0.c3)>(vt0.c0)))))) ORDER BY ((CASE WHEN vt2.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE vt2.c0 END)&(v0.c1 COLLATE NOCASE))  NULLS FIRST;
SELECT DISTINCT MIN(v0.c1) FROM vt2, v0, vt0 WHERE ((((((((v0.c1)>(vt2.c0)), ((v0.c1)OR(vt2.c0))))<((v0.c3, ((v0.c3)>(vt0.c0))))))AND(((((((((((((0.5560161349825009)OR(vt0.c0)))OR(vt2.c0)))OR(vt2.c1)))AND(((((v0.c1)OR(v0.c0)))OR(vt2.c1)))))AND(((v0.c0)+(vt0.c0)))))OR(NULL))))) ORDER BY ((CASE WHEN vt2.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE vt2.c0 END)&(v0.c1 COLLATE NOCASE))  NULLS FIRST INTERSECT SELECT DISTINCT MIN(v0.c1) FROM vt2, v0, vt0 WHERE (CAST(v0.c3 AS INTEGER) COLLATE NOCASE) ORDER BY ((CASE WHEN vt2.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE vt2.c0 END)&(v0.c1 COLLATE NOCASE))  NULLS FIRST;
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (((((((((vt2.c1) NOT NULL))OR(CAST('' AS TEXT))))OR((vt2.c1 IN (vt2.c0)))))OR((vt2.c0 IN ()))));
SELECT DISTINCT MIN(vt2.c0) FROM vt2 NOT INDEXED, vt0 WHERE (((((((((((vt2.c1) NOT NULL))OR(CAST('' AS TEXT))))OR((vt2.c1 IN (vt2.c0)))))OR((vt2.c0 IN ()))))AND(CAST(((((((vt0.c0)AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)) AS BLOB)))) ORDER BY ((vt2.c1)GLOB(vt0.c0)) DESC INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 WHERE (((CASE WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END) IS FALSE)) ORDER BY ((vt2.c1)GLOB(vt0.c0)) DESC;
SELECT * FROM v0, vt0 WHERE (((((v0.c0) ISNULL))<=(((v0.c3) IS FALSE)))) ORDER BY (NOT ((((v0.c1, v0.c3, v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1, v0.c3)) AND ((v0.c2, vt0.c0, v0.c1, v0.c1))))) ASC, (((v0.c3 IN (v0.c3))) NOT BETWEEN (((v0.c3)>(v0.c0))) AND ((- (v0.c3)))) ASC  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE (((((((v0.c0) ISNULL))<(((v0.c3) IS FALSE))))AND(((CASE WHEN v0.c1 THEN v0.c1 WHEN x'8853' THEN v0.c3 END)AND(('0.9883211527325997' IN (v0.c0))))))) ORDER BY (NOT ((((v0.c1, v0.c3, v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1, v0.c3)) AND ((v0.c2, vt0.c0, v0.c1, v0.c1))))) ASC, (((v0.c3 IN (v0.c3))) NOT BETWEEN (((v0.c3)>(v0.c0))) AND ((- (v0.c3)))) ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN ((vt0.c0)+(v0.c3)) THEN (v0.c0 IN ()) END) ORDER BY (NOT ((((v0.c1, v0.c3, v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1, v0.c3)) AND ((v0.c2, vt0.c0, v0.c1, v0.c1))))) ASC, (((v0.c3 IN (v0.c3))) NOT BETWEEN (((v0.c3)>(v0.c0))) AND ((- (v0.c3)))) ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM v0, vt0 WHERE (((((v0.c0) ISNULL))<=(((v0.c3) IS FALSE)))) ORDER BY (NOT ((((v0.c1, v0.c3, v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1, v0.c3)) AND ((v0.c2, vt0.c0, v0.c1, v0.c1))))) ASC, (((v0.c3 IN (v0.c3))) NOT BETWEEN (((v0.c3)>(v0.c0))) AND ((- (v0.c3)))) ASC  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE (((((((v0.c0) ISNULL))<(((v0.c3) IS FALSE))))AND(((CASE WHEN v0.c1 THEN v0.c1 WHEN x'8853' THEN v0.c3 END)AND(('0.9883211527325997' IN (v0.c0))))))) ORDER BY (NOT ((((v0.c1, v0.c3, v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1, v0.c3)) AND ((v0.c2, vt0.c0, v0.c1, v0.c1))))) ASC, (((v0.c3 IN (v0.c3))) NOT BETWEEN (((v0.c3)>(v0.c0))) AND ((- (v0.c3)))) ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN ((vt0.c0)+(v0.c3)) THEN (v0.c0 IN ()) END) ORDER BY (NOT ((((v0.c1, v0.c3, v0.c1, v0.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1, v0.c3)) AND ((v0.c2, vt0.c0, v0.c1, v0.c1))))) ASC, (((v0.c3 IN (v0.c3))) NOT BETWEEN (((v0.c3)>(v0.c0))) AND ((- (v0.c3)))) ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM v0 WHERE (((((v0.c3)>=(v0.c2))) NOT BETWEEN (CASE v0.c1  WHEN v0.c0 THEN v0.c3 END) AND (((((((((x'12')OR(v0.c0)))OR(v0.c0)))OR(v0.c0)))OR(-5.74332796E8)))));
SELECT * FROM v0 WHERE (((((v0.c3)>=(v0.c2))) NOT BETWEEN (CASE v0.c1  WHEN v0.c0 THEN v0.c3 END) AND (((((((((x'12')OR(v0.c0)))OR(v0.c0)))OR(v0.c0)))OR(-5.74332796E8))))) LIMIT 0X0;
SELECT * FROM v0 WHERE (((((v0.c3)>=(v0.c2))) NOT BETWEEN (CASE v0.c1  WHEN v0.c0 THEN v0.c3 END) AND (((((((((x'12')OR(v0.c0)))OR(v0.c0)))OR(v0.c0)))OR(-5.74332796E8)))));
SELECT * FROM v0 WHERE (((((v0.c3)>=(v0.c2))) NOT BETWEEN (CASE v0.c1  WHEN v0.c0 THEN v0.c3 END) AND (((((((((x'12')OR(v0.c0)))OR(v0.c0)))OR(v0.c0)))OR(-5.74332796E8))))) LIMIT 0X0;
SELECT COUNT(*) FROM v0, vt0 WHERE (CAST(((v0.c3) BETWEEN (v0.c1) AND (v0.c0)) AS REAL)) ORDER BY CAST(v0.c1 AS INTEGER) COLLATE RTRIM DESC, json(((v0.c1) BETWEEN (vt0.c0) AND (0.08843156441455002)))  NULLS FIRST, (+ ((((v0.c3, v0.c2, v0.c1)) NOT BETWEEN ((v0.c1, v0.c3, vt0.c0)) AND ((vt0.c0, v0.c0, v0.c3)))));
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((CAST(((v0.c3) BETWEEN (v0.c1) AND (v0.c0)) AS REAL))AND(((((((((((v0.c1)OR(v0.c3)))AND(v0.c0)))AND((+ (vt0.c0)))))OR('K' COLLATE NOCASE)))OR(CAST(v0.c1 AS BLOB)))))) ORDER BY CAST(v0.c1 AS INTEGER) COLLATE RTRIM DESC, json(((v0.c1) BETWEEN (vt0.c0) AND (0.08843156441455002)))  NULLS FIRST, (+ ((((v0.c3, v0.c2, v0.c1)) NOT BETWEEN ((v0.c1, v0.c3, vt0.c0)) AND ((vt0.c0, v0.c0, v0.c3)))));
SELECT ALL * FROM v0 WHERE (NULL);
SELECT DISTINCT * FROM v0 WHERE (((NULL)AND((((((v0.c3 IN ('1255738267', v0.c0)))OR(CASE WHEN 331879271 THEN v0.c0 WHEN v0.c2 THEN NULL WHEN v0.c0 THEN x'8071ee' ELSE v0.c0 END)))AND(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2))))))) ORDER BY ((((((v0.c1)OR(v0.c3)))OR(v0.c3)))/(x'')), (+ (((((((v0.c2)AND(v0.c3)))OR(v0.c2)))OR(v0.c1)))) DESC, (v0.c2 COLLATE RTRIM IN (CASE v0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)) ASC  NULLS FIRST, (+ (((((v0.c2)AND(v0.c0)))OR(v0.c3)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((0.2804362070315958)>(v0.c1))) ORDER BY ((((((v0.c1)OR(v0.c3)))OR(v0.c3)))/(x'')), (+ (((((((v0.c2)AND(v0.c3)))OR(v0.c2)))OR(v0.c1)))) DESC, (v0.c2 COLLATE RTRIM IN (CASE v0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)) ASC  NULLS FIRST, (+ (((((v0.c2)AND(v0.c0)))OR(v0.c3)))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (NULL);
SELECT DISTINCT * FROM v0 WHERE (((NULL)AND((((((v0.c3 IN ('1255738267', v0.c0)))OR(CASE WHEN 331879271 THEN v0.c0 WHEN v0.c2 THEN NULL WHEN v0.c0 THEN x'8071ee' ELSE v0.c0 END)))AND(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2))))))) ORDER BY ((((((v0.c1)OR(v0.c3)))OR(v0.c3)))/(x'')), (+ (((((((v0.c2)AND(v0.c3)))OR(v0.c2)))OR(v0.c1)))) DESC, (v0.c2 COLLATE RTRIM IN (CASE v0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)) ASC  NULLS FIRST, (+ (((((v0.c2)AND(v0.c0)))OR(v0.c3)))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((0.2804362070315958)>(v0.c1))) ORDER BY ((((((v0.c1)OR(v0.c3)))OR(v0.c3)))/(x'')), (+ (((((((v0.c2)AND(v0.c3)))OR(v0.c2)))OR(v0.c1)))) DESC, (v0.c2 COLLATE RTRIM IN (CASE v0.c0  WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)) ASC  NULLS FIRST, (+ (((((v0.c2)AND(v0.c0)))OR(v0.c3)))) DESC  NULLS LAST;
SELECT ALL MIN(v0.c2) FROM vt2, v0 WHERE ((((v0.c2) NOT BETWEEN (v0.c0) AND (vt2.c0)) IN (CASE v0.c3  WHEN v0.c1 THEN vt2.c1 ELSE v0.c3 END))) ORDER BY (v0.c1 IN ());
SELECT MIN(v0.c2) FROM vt2, v0 WHERE ((((v0.c2) NOT BETWEEN (v0.c0) AND (vt2.c0)) IN (CASE v0.c3  WHEN v0.c1 THEN vt2.c1 ELSE v0.c3 END))) ORDER BY ((ABS(v0.c2)) IS FALSE) DESC LIMIT 0X0 INTERSECT SELECT MIN(v0.c2) FROM vt2, v0 WHERE (((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c1)) COLLATE RTRIM) ORDER BY ((ABS(v0.c2)) IS FALSE) DESC LIMIT 0X0;
SELECT ALL COUNT(*) FROM v0 WHERE (((NULL)|(((((v0.c1)OR(v0.c0)))AND(v0.c2)))));
SELECT COUNT(*) FROM v0 WHERE (((NULL)|(((((v0.c1)OR(v0.c0)))AND(v0.c2))))) INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE (CAST((v0.c2 IN ()) AS TEXT));
SELECT * FROM v0, vt2 WHERE (CAST((NOT (vt2.c0)) AS BLOB)) ORDER BY (((v0.c0)GLOB(v0.c2)) IN (((vt2.c0) NOTNULL)))  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (NULL))) IS TRUE) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt2 WHERE (CAST((NOT (vt2.c0)) AS BLOB)) ORDER BY (((v0.c0)GLOB(v0.c2)) IN (((vt2.c0) NOTNULL)))  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (NULL))) IS TRUE) DESC  NULLS LAST LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (x'') ORDER BY (((v0.c0)GLOB(v0.c2)) IN (((vt2.c0) NOTNULL)))  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (NULL))) IS TRUE) DESC  NULLS LAST LIMIT 0X3;
SELECT * FROM v0, vt2 WHERE (CAST((NOT (vt2.c0)) AS BLOB)) ORDER BY (((v0.c0)GLOB(v0.c2)) IN (((vt2.c0) NOTNULL)))  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (NULL))) IS TRUE) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt2 WHERE (CAST((NOT (vt2.c0)) AS BLOB)) ORDER BY (((v0.c0)GLOB(v0.c2)) IN (((vt2.c0) NOTNULL)))  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (NULL))) IS TRUE) DESC  NULLS LAST LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (x'') ORDER BY (((v0.c0)GLOB(v0.c2)) IN (((vt2.c0) NOTNULL)))  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (NULL))) IS TRUE) DESC  NULLS LAST LIMIT 0X3;
SELECT COUNT(*) FROM vt0, vt2, v0 NOT INDEXED WHERE (vt2.c1);
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (((vt2.c1)AND((+ ((vt0.c0 IN ())))))) ORDER BY ((((((((((vt2.c1)AND(v0.c2)))OR(vt2.c1)))AND(v0.c1)))OR(vt0.c0)))>=(((v0.c3) IS TRUE)))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (((CASE WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN vt2.c1 WHEN v0.c0 THEN v0.c0 WHEN vt0.c0 THEN vt2.c1 ELSE v0.c2 END) NOT BETWEEN (((((((vt0.c0)OR(vt2.c0)))OR(v0.c0)))OR(vt2.c1))) AND (((v0.c0) NOTNULL)))) ORDER BY ((((((((((vt2.c1)AND(v0.c2)))OR(vt2.c1)))AND(v0.c1)))OR(vt0.c0)))>=(((v0.c3) IS TRUE)))  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE) ISNULL));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0 COLLATE NOCASE) ISNULL))AND(JULIANDAY(((vt0.c0) IS TRUE), (((vt0.c0))<=((vt0.c0))), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), HEX(vt0.c0), ((((((((((vt0.c0)AND('-157240298')))AND(vt0.c0)))AND(vt0.c0)))AND(868741710)))OR(vt0.c0)), ((vt0.c0)>=(vt0.c0))))));
SELECT ALL MIN(vt2.c1) FROM vt2 LEFT OUTER JOIN vt0 ON ((CAST(vt0.c0 AS TEXT)) IS TRUE) WHERE ((('-169441882')&(json_patch(vt0.c0, vt0.c0)))) ORDER BY CAST((((vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0))) AS TEXT) ASC  NULLS FIRST, CAST('-1607669206' AS TEXT) ASC  NULLS LAST, vt0.c0 ASC  NULLS LAST;
SELECT ALL MIN(vt2.c1) FROM vt2 LEFT OUTER JOIN vt0 ON ((CAST(vt0.c0 AS TEXT)) IS TRUE) WHERE ((((('-169441882')&(json_patch(vt0.c0, vt0.c0))))AND(((((((((((((vt2.c1)OR(x'92a4b3')))OR(vt2.c1)))AND(vt0.c0)))AND(vt2.c1)))AND(0x791591e7))) NOT BETWEEN (TRIM(DISTINCT vt2.c0)) AND (vt2.c0))))) ORDER BY CAST((((vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0))) AS TEXT) ASC  NULLS FIRST, CAST('-1607669206' AS TEXT) ASC  NULLS LAST, vt0.c0 ASC  NULLS LAST LIMIT 0X1;
SELECT ALL MAX(vt0.c0) FROM vt0, vt2 WHERE (((((((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND('}Nw+Ys')))OR(vt2.c1)))OR(vt2.c1)))*(((((vt2.c1)AND(vt0.c0)))OR(vt2.c1)))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE (((((((((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1)))AND('}Nw+Ys')))OR(vt2.c1)))OR(vt2.c1)))*(((((vt2.c1)AND(vt0.c0)))OR(vt2.c1)))))AND(CAST(((vt0.c0)LIKE('1e500')) AS REAL)))) LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE ((((vt2.c1 IN (0.2886993511073954)))<>(((vt2.c0)<=(vt2.c0))))) LIMIT 2;
SELECT ALL * FROM vt0, vt2 WHERE (((((((NULL, vt2.c1))<((vt2.c0, vt0.c0))), ((vt0.c0)/(vt0.c0)), ((vt0.c0)=(vt0.c0)), ((((((((0.17428224667765435)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)), HEX(vt2.c1)))=((vt2.c1 COLLATE BINARY, vt0.c0 COLLATE NOCASE, (+ (vt2.c0)), ((vt2.c1)=(NULL)), (+ (NULL)))))) ORDER BY COALESCE(CAST(vt0.c0 AS NUMERIC), ((vt2.c0) NOTNULL), (~ (-3.88835817E8)), CAST(vt2.c0 AS BLOB), (vt0.c0 IN ()))  NULLS LAST, ((((((((((vt2.c0)/('1874710629')))AND('0.7435718392262334')))AND(x'')))OR(x'7b27')))AND(0.15746825966893896)) ASC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE (((((((((NULL, vt2.c1))<((vt2.c0, vt0.c0))), ((vt0.c0)/(vt0.c0)), ((vt0.c0)==(vt0.c0)), ((((((((0.17428224667765435)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)), HEX(vt2.c1)))==((vt2.c1 COLLATE BINARY, vt0.c0 COLLATE NOCASE, (+ (vt2.c0)), ((vt2.c1)=(NULL)), (+ (NULL))))))AND(CAST(NULL AS REAL)))) ORDER BY ((((vt0.c0) IS TRUE)) IS FALSE), vt2.c1 DESC  NULLS FIRST, ((((((((vt0.c0)OR(vt2.c1)))AND(NULL)))OR(vt2.c0)))AND(vt2.c0)) COLLATE NOCASE DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt0, vt2 WHERE (((CASE NULL  WHEN vt0.c0 THEN 0.3507944054346941 WHEN vt2.c1 THEN vt0.c0 END)IS(((vt2.c0)GLOB(vt0.c0))))) ORDER BY ((((vt0.c0) IS TRUE)) IS FALSE), vt2.c1 DESC  NULLS FIRST, ((((((((vt0.c0)OR(vt2.c1)))AND(NULL)))OR(vt2.c0)))AND(vt2.c0)) COLLATE NOCASE DESC  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE (((((((NULL, vt2.c1))<((vt2.c0, vt0.c0))), ((vt0.c0)/(vt0.c0)), ((vt0.c0)=(vt0.c0)), ((((((((0.17428224667765435)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)), HEX(vt2.c1)))=((vt2.c1 COLLATE BINARY, vt0.c0 COLLATE NOCASE, (+ (vt2.c0)), ((vt2.c1)=(NULL)), (+ (NULL)))))) ORDER BY COALESCE(CAST(vt0.c0 AS NUMERIC), ((vt2.c0) NOTNULL), (~ (-3.88835817E8)), CAST(vt2.c0 AS BLOB), (vt0.c0 IN ()))  NULLS LAST, ((((((((((vt2.c0)/('1874710629')))AND('0.7435718392262334')))AND(x'')))OR(x'7b27')))AND(0.15746825966893896)) ASC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE (((((((((NULL, vt2.c1))<((vt2.c0, vt0.c0))), ((vt0.c0)/(vt0.c0)), ((vt0.c0)==(vt0.c0)), ((((((((0.17428224667765435)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)), HEX(vt2.c1)))==((vt2.c1 COLLATE BINARY, vt0.c0 COLLATE NOCASE, (+ (vt2.c0)), ((vt2.c1)=(NULL)), (+ (NULL))))))AND(CAST(NULL AS REAL)))) ORDER BY ((((vt0.c0) IS TRUE)) IS FALSE), vt2.c1 DESC  NULLS FIRST, ((((((((vt0.c0)OR(vt2.c1)))AND(NULL)))OR(vt2.c0)))AND(vt2.c0)) COLLATE NOCASE DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt0, vt2 WHERE (((CASE NULL  WHEN vt0.c0 THEN 0.3507944054346941 WHEN vt2.c1 THEN vt0.c0 END)IS(((vt2.c0)GLOB(vt0.c0))))) ORDER BY ((((vt0.c0) IS TRUE)) IS FALSE), vt2.c1 DESC  NULLS FIRST, ((((((((vt0.c0)OR(vt2.c1)))AND(NULL)))OR(vt2.c0)))AND(vt2.c0)) COLLATE NOCASE DESC  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE (((((vt0.c0 IN (vt0.c0, vt0.c0))))>=((vt2.c0))));
SELECT ALL * FROM vt0, vt2 WHERE (((((vt0.c0 IN (vt0.c0, vt0.c0))))>=((vt2.c0)))) ORDER BY (((((vt0.c0) IS FALSE), (- (vt2.c0))))=(((vt2.c0 IN ()), IFNULL(vt0.c0, vt2.c0)))) DESC, (- (((vt2.c0) NOT NULL))), ((CASE vt2.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN 0.871307085625605 ELSE NULL END)<(vt2.c1))  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((((vt0.c0 IN (vt0.c0, vt0.c0))))>=((vt2.c0))));
SELECT ALL * FROM vt0, vt2 WHERE (((((vt0.c0 IN (vt0.c0, vt0.c0))))>=((vt2.c0)))) ORDER BY (((((vt0.c0) IS FALSE), (- (vt2.c0))))=(((vt2.c0 IN ()), IFNULL(vt0.c0, vt2.c0)))) DESC, (- (((vt2.c0) NOT NULL))), ((CASE vt2.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN 0.871307085625605 ELSE NULL END)<(vt2.c1))  NULLS FIRST;
SELECT * FROM v0, vt0 WHERE (((((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)))%(((v0.c3)>(v0.c0)))));
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)))%(((v0.c3)>(v0.c0))))) ORDER BY CASE WHEN json_remove(v0.c2, 'C', v0.c1, v0.c2) THEN (~ (v0.c1)) WHEN ((vt0.c0)LIKE(0.2146399675814663)) THEN ((((vt0.c0)OR(vt0.c0)))OR(v0.c2)) ELSE (v0.c2 IN ()) END, CASE (~ ('0.4481881142625076'))  WHEN ((v0.c0)*(v0.c3)) THEN (~ (v0.c2)) END ASC, CAST((((vt0.c0))>=((v0.c1))) AS BLOB) LIMIT 0;
SELECT * FROM v0, vt0 WHERE (((((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)))%(((v0.c3)>(v0.c0)))));
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)))%(((v0.c3)>(v0.c0))))) ORDER BY CASE WHEN json_remove(v0.c2, 'C', v0.c1, v0.c2) THEN (~ (v0.c1)) WHEN ((vt0.c0)LIKE(0.2146399675814663)) THEN ((((vt0.c0)OR(vt0.c0)))OR(v0.c2)) ELSE (v0.c2 IN ()) END, CASE (~ ('0.4481881142625076'))  WHEN ((v0.c0)*(v0.c3)) THEN (~ (v0.c2)) END ASC, CAST((((vt0.c0))>=((v0.c1))) AS BLOB) LIMIT 0;
SELECT * FROM vt0 WHERE (CASE ((vt0.c0)=(vt0.c0))  WHEN (NOT (vt0.c0)) THEN CAST(vt0.c0 AS NUMERIC) WHEN ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) THEN vt0.c0 COLLATE RTRIM ELSE CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE ((vt0.c0)=(vt0.c0))  WHEN (NOT (vt0.c0)) THEN CAST(vt0.c0 AS NUMERIC) WHEN ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) THEN vt0.c0 COLLATE RTRIM ELSE CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END)AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN (((vt0.c0 IN (vt0.c0)), (('267721342')&(vt0.c0)), ((vt0.c0) NOT NULL), ((((vt0.c0)OR(0.2062842035399829)))AND(vt0.c0)), ((vt0.c0) NOT NULL))) AND (((~ (x'')), JULIANDAY(vt0.c0, 238053746, NULL, vt0.c0), 0.5728067328532089, CASE vt0.c0  WHEN '-268503340' THEN vt0.c0 WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, (- (vt0.c0)))))))) ORDER BY x''  NULLS FIRST LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY x''  NULLS FIRST LIMIT 0x2;
SELECT * FROM vt0 WHERE (CASE ((vt0.c0)=(vt0.c0))  WHEN (NOT (vt0.c0)) THEN CAST(vt0.c0 AS NUMERIC) WHEN ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) THEN vt0.c0 COLLATE RTRIM ELSE CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE ((vt0.c0)=(vt0.c0))  WHEN (NOT (vt0.c0)) THEN CAST(vt0.c0 AS NUMERIC) WHEN ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) THEN vt0.c0 COLLATE RTRIM ELSE CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END)AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN (((vt0.c0 IN (vt0.c0)), (('267721342')&(vt0.c0)), ((vt0.c0) NOT NULL), ((((vt0.c0)OR(0.2062842035399829)))AND(vt0.c0)), ((vt0.c0) NOT NULL))) AND (((~ (x'')), JULIANDAY(vt0.c0, 238053746, NULL, vt0.c0), 0.5728067328532089, CASE vt0.c0  WHEN '-268503340' THEN vt0.c0 WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, (- (vt0.c0)))))))) ORDER BY x''  NULLS FIRST LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY x''  NULLS FIRST LIMIT 0x2;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0)*(vt0.c0))) ISNULL));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((vt0.c0)*(vt0.c0))) ISNULL))AND(CAST(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) AS BLOB)))) ORDER BY (((((vt0.c0 IN ()))OR(CASE WHEN vt0.c0 THEN vt0.c0 WHEN x'92fd' THEN vt0.c0 ELSE vt0.c0 END)))AND(UNLIKELY(DISTINCT vt0.c0)))  NULLS FIRST, CAST(((vt0.c0) IS FALSE) AS TEXT)  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt0 WHERE (CAST(((((v0.c3)OR(v0.c0)))AND(v0.c0)) AS INTEGER)) ORDER BY (((((((((('Zv}⵲')AND(x'')))AND(v0.c1)))OR(v0.c1)))AND(0.7489922409056746))) BETWEEN ((((v0.c1, v0.c0, v0.c1, v0.c2))>=((x'd070f3', v0.c2, 'q', v0.c1)))) AND (((v0.c0) BETWEEN (v0.c1) AND (vt0.c0)))) DESC  NULLS LAST, (((('941422872')GLOB(v0.c0))) NOTNULL)  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt0 WHERE (((CAST(((((v0.c3)OR(v0.c0)))AND(v0.c0)) AS INTEGER))AND((('770310855')/((v0.c3 IN ())))))) ORDER BY v0.c3  NULLS LAST, load_extension(((v0.c3) BETWEEN (v0.c1) AND (vt0.c0))) ASC LIMIT 1;
SELECT ALL MAX(vt2.c1) FROM vt2 INNER JOIN vt0 ON v0.c3 NATURAL JOIN v0 WHERE (((((((((((vt2.c1)AND(v0.c0)))OR((((vt0.c0, vt0.c0, vt2.c0))>=((v0.c3, 0x6e1fcf1f, vt2.c0))))))OR(vt0.c0 COLLATE NOCASE)))OR(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0)))))OR((((vt2.c0, v0.c3, vt2.c0, v0.c0)) BETWEEN ((v0.c1, vt2.c0, NULL, v0.c0)) AND ((vt2.c0, vt2.c0, vt2.c0, vt0.c0)))))) ORDER BY ((NULL) IS TRUE)  NULLS FIRST, CAST(CAST(0x2441eb8d AS INTEGER) AS REAL) DESC;
SELECT MAX(vt2.c1) FROM vt2 INNER JOIN vt0 ON v0.c3 NATURAL JOIN v0 WHERE (((((((((((((vt2.c1)AND(v0.c0)))OR((((vt0.c0, vt0.c0, vt2.c0))=((v0.c3, 0x6e1fcf1f, vt2.c0))))))OR(vt0.c0 COLLATE NOCASE)))OR(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0)))))OR((((vt2.c0, v0.c3, vt2.c0, v0.c0)) BETWEEN ((v0.c1, vt2.c0, NULL, v0.c0)) AND ((vt2.c0, vt2.c0, vt2.c0, vt0.c0))))))AND((((((NOT (vt0.c0)))OR(((((((((((v0.c2)OR(v0.c0)))OR(v0.c3)))OR(vt2.c0)))AND(vt0.c0)))AND(-2.006647167E9)))))OR(((v0.c3) IS FALSE)))))) ORDER BY ((NULL) IS TRUE)  NULLS FIRST, CAST(CAST(0x2441eb8d AS INTEGER) AS REAL) DESC LIMIT 2;
SELECT MIN(vt2.c1) FROM vt0, v0, vt2 WHERE (DATETIME(((x'') BETWEEN (v0.c3) AND (v0.c2)), (((vt2.c1, NULL, vt2.c1))<((vt2.c0, vt2.c1, v0.c2))), (v0.c2 IN ()), ((vt0.c0) IS FALSE)));
SELECT MIN(vt2.c1) FROM vt0, v0, vt2 WHERE (DATETIME(((x'') BETWEEN (v0.c3) AND (v0.c2)), (((vt2.c1, NULL, vt2.c1))<((vt2.c0, vt2.c1, v0.c2))), (v0.c2 IN ()), ((vt0.c0) IS FALSE))) LIMIT 3;
SELECT * FROM vt0 WHERE (((((~ (vt0.c0)), ((vt0.c0) NOT NULL), ((vt0.c0) ISNULL), (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0)))))>((((vt0.c0)==(vt0.c0)), ((vt0.c0)GLOB(vt0.c0)), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))) ORDER BY ((INSTR(vt0.c0, vt0.c0)) BETWEEN ((((0.7980868553586505, vt0.c0))<>(('298146650', vt0.c0)))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN '{#nW湘' ELSE vt0.c0 END)) ASC;
SELECT ALL * FROM vt0 WHERE (((((((~ (vt0.c0)), ((vt0.c0) NOT NULL), ((vt0.c0) ISNULL), (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0)))))>((((vt0.c0)=(vt0.c0)), ((vt0.c0)GLOB(vt0.c0)), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))))AND((((vt0.c0, vt0.c0)) NOT BETWEEN (((((vt0.c0))>=((vt0.c0))), (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))) AND (((NOT (vt0.c0)), ((vt0.c0)<<(vt0.c0)))))))) ORDER BY vt0.c0;
SELECT * FROM vt0 WHERE (((((~ (vt0.c0)), ((vt0.c0) NOT NULL), ((vt0.c0) ISNULL), (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0)))))>((((vt0.c0)==(vt0.c0)), ((vt0.c0)GLOB(vt0.c0)), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))) ORDER BY ((INSTR(vt0.c0, vt0.c0)) BETWEEN ((((0.7980868553586505, vt0.c0))<>(('298146650', vt0.c0)))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN '{#nW湘' ELSE vt0.c0 END)) ASC;
SELECT ALL * FROM vt0 WHERE (((((((~ (vt0.c0)), ((vt0.c0) NOT NULL), ((vt0.c0) ISNULL), (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0)))))>((((vt0.c0)=(vt0.c0)), ((vt0.c0)GLOB(vt0.c0)), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))))AND((((vt0.c0, vt0.c0)) NOT BETWEEN (((((vt0.c0))>=((vt0.c0))), (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))) AND (((NOT (vt0.c0)), ((vt0.c0)<<(vt0.c0)))))))) ORDER BY vt0.c0;
SELECT MIN(v0.c0) FROM vt0 LEFT OUTER JOIN v0 ON ((v0.c1 COLLATE RTRIM)*((+ (vt0.c0)))) WHERE ((((((((v0.c1)AND(vt0.c0)))OR(v0.c1)))AND(v0.c3)) IN ((((v0.c2, v0.c1, NULL))<((v0.c1, v0.c0, v0.c0))))));
SELECT MIN(v0.c0) FROM vt0 INNER JOIN v0 ON ((v0.c1 COLLATE RTRIM)*((+ (vt0.c0)))) WHERE ((((((((((v0.c1)AND(vt0.c0)))OR(v0.c1)))AND(v0.c3)) IN ((((v0.c2, v0.c1, NULL))<((v0.c1, v0.c0, v0.c0))))))AND(CASE HEX(v0.c2)  WHEN ((v0.c2) NOT NULL) THEN v0.c1 WHEN ((v0.c0)||(vt0.c0)) THEN (+ (v0.c1)) ELSE ((v0.c3)>(v0.c2)) END))) INTERSECT SELECT ALL MIN(v0.c0) FROM vt0 INNER JOIN v0 ON ((v0.c1 COLLATE RTRIM)*((+ (vt0.c0)))) WHERE (CAST(((v0.c1) BETWEEN (v0.c0) AND (v0.c1)) AS TEXT));
SELECT ALL MIN(v0.c3) FROM vt2, vt0, v0 WHERE (((((v0.c0)%(vt2.c0)))GLOB(vt0.c0 COLLATE NOCASE)));
SELECT DISTINCT MIN(v0.c3) FROM vt2, vt0, v0 WHERE (((((((v0.c0)%(vt2.c0)))GLOB(vt0.c0 COLLATE NOCASE)))AND((((~ (v0.c3))) BETWEEN (((vt0.c0) NOT NULL)) AND (vt2.c0 COLLATE RTRIM))))) INTERSECT SELECT DISTINCT MIN(v0.c3) FROM vt2, vt0, v0 WHERE (vt2.c0);
SELECT ALL MAX(vt0.c0) FROM vt0 LEFT OUTER JOIN v0 ON (((0.30545691556374, CAST(v0.c0 AS NUMERIC), ((v0.c0)IS(vt2.c1))))<((((vt0.c0)AND(vt2.c1)), NULL, (('-1227604084') NOT BETWEEN (0x5f6bbe51) AND (vt2.c0))))) CROSS JOIN vt2 ON v0.c1 WHERE ((((vt0.c0 IN ())) NOT BETWEEN (((v0.c1)=(v0.c0))) AND (((v0.c0)|(v0.c3)))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 LEFT OUTER JOIN v0 ON (((0.30545691556374, CAST(v0.c0 AS NUMERIC), ((v0.c0)IS(vt2.c1))))<((((vt0.c0)AND(vt2.c1)), NULL, (('-1227604084') NOT BETWEEN (1600896593) AND (vt2.c0))))) CROSS JOIN vt2 ON v0.c1 WHERE ((((((vt0.c0 IN ())) NOT BETWEEN (((v0.c1)<=(v0.c0))) AND (((v0.c0)|(v0.c3)))))AND(((vt2.c0) IS TRUE) COLLATE RTRIM))) ORDER BY ((v0.c0 COLLATE RTRIM)>>((('') BETWEEN ('0.4643409253230786') AND (v0.c1)))), (((v0.c0) NOT BETWEEN (v0.c3) AND (vt2.c0)) IN ()) ASC  NULLS FIRST, CASE (v0.c1 IN ())  WHEN (~ (vt2.c0)) THEN CAST(v0.c1 AS REAL) WHEN CAST(vt0.c0 AS INTEGER) THEN ((((((((v0.c3)AND(NULL)))AND(v0.c2)))AND(vt2.c0)))OR(vt2.c0)) END LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 LEFT OUTER JOIN v0 ON (((0.30545691556374, CAST(v0.c0 AS NUMERIC), ((v0.c0)IS(vt2.c1))))<((((vt0.c0)AND(vt2.c1)), NULL, (('-1227604084') NOT BETWEEN (1600896593) AND (vt2.c0))))) CROSS JOIN vt2 ON v0.c1 WHERE (((COALESCE(vt2.c0, vt2.c0))*((+ (vt2.c0))))) ORDER BY ((v0.c0 COLLATE RTRIM)>>((('') BETWEEN ('0.4643409253230786') AND (v0.c1)))), (((v0.c0) NOT BETWEEN (v0.c3) AND (vt2.c0)) IN ()) ASC  NULLS FIRST, CASE (v0.c1 IN ())  WHEN (~ (vt2.c0)) THEN CAST(v0.c1 AS REAL) WHEN CAST(vt0.c0 AS INTEGER) THEN ((((((((v0.c3)AND(NULL)))AND(v0.c2)))AND(vt2.c0)))OR(vt2.c0)) END LIMIT 0x1;
SELECT * FROM vt2, v0 WHERE (CASE WHEN (v0.c3 IN (vt2.c1)) THEN (((v0.c2, x'19a6')) BETWEEN ((x'', v0.c2)) AND ((vt2.c1, v0.c0))) WHEN (('2000257590') NOT NULL) THEN '898685644' ELSE ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) END) ORDER BY highlight(((v0.c1) NOT NULL), CASE v0.c0  WHEN v0.c2 THEN v0.c3 END, ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)), TYPEOF(v0.c3));
SELECT * FROM vt2, v0 WHERE (CASE WHEN (v0.c3 IN (vt2.c1)) THEN (((v0.c2, x'19a6')) BETWEEN ((x'', v0.c2)) AND ((vt2.c1, v0.c0))) WHEN (('2000257590') NOT NULL) THEN '898685644' ELSE ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) END) ORDER BY ((((~ (v0.c3)), CASE WHEN v0.c2 THEN v0.c0 END))=(((+ (vt2.c0)), v0.c0))) DESC INTERSECT SELECT ALL * FROM vt2, v0 WHERE (((LIKELIHOOD(DISTINCT vt2.c1, v0.c2))||((~ (v0.c2))))) ORDER BY ((((~ (v0.c3)), CASE WHEN v0.c2 THEN v0.c0 END))==(((+ (vt2.c0)), v0.c0))) DESC;
SELECT * FROM vt2, v0 WHERE (CASE WHEN (v0.c3 IN (vt2.c1)) THEN (((v0.c2, x'19a6')) BETWEEN ((x'', v0.c2)) AND ((vt2.c1, v0.c0))) WHEN (('2000257590') NOT NULL) THEN '898685644' ELSE ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) END) ORDER BY highlight(((v0.c1) NOT NULL), CASE v0.c0  WHEN v0.c2 THEN v0.c3 END, ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)), TYPEOF(v0.c3));
SELECT * FROM vt2, v0 WHERE (CASE WHEN (v0.c3 IN (vt2.c1)) THEN (((v0.c2, x'19a6')) BETWEEN ((x'', v0.c2)) AND ((vt2.c1, v0.c0))) WHEN (('2000257590') NOT NULL) THEN '898685644' ELSE ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) END) ORDER BY ((((~ (v0.c3)), CASE WHEN v0.c2 THEN v0.c0 END))=(((+ (vt2.c0)), v0.c0))) DESC INTERSECT SELECT ALL * FROM vt2, v0 WHERE (((LIKELIHOOD(DISTINCT vt2.c1, v0.c2))||((~ (v0.c2))))) ORDER BY ((((~ (v0.c3)), CASE WHEN v0.c2 THEN v0.c0 END))==(((+ (vt2.c0)), v0.c0))) DESC;
SELECT COUNT(*) FROM v0 INNER JOIN vt0 ON ((CAST(vt2.c0 AS BLOB))%(((v0.c2)%(vt2.c0)))) NATURAL JOIN vt2 WHERE (0xffffffffcba30ecc) ORDER BY (((vt2.c1, vt0.c0, vt2.c1)) NOT BETWEEN ((((v0.c1)OR(v0.c0)), '0.45939357815304416', ((v0.c1)IS NOT(vt0.c0)))) AND ((((vt2.c1) NOT NULL), (NOT (v0.c0)), (~ (v0.c0))))) DESC  NULLS LAST;
SELECT COUNT(*) FROM v0 INNER JOIN vt0 ON ((CAST(vt2.c0 AS BLOB))%(((v0.c2)%(vt2.c0)))) NATURAL JOIN vt2 WHERE (((-878506292)AND((- ('ṿt	5{zv')) COLLATE BINARY))) ORDER BY (((vt2.c1, vt0.c0, vt2.c1)) NOT BETWEEN ((((v0.c1)OR(v0.c0)), '0.45939357815304416', ((v0.c1)IS NOT(vt0.c0)))) AND ((((vt2.c1) NOT NULL), (NOT (v0.c0)), (~ (v0.c0))))) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM v0 INNER JOIN vt0 ON ((CAST(vt2.c0 AS BLOB))%(((v0.c2)%(vt2.c0)))) NATURAL JOIN vt2 WHERE (((NOT (v0.c1)) IN ())) ORDER BY (((vt2.c1, vt0.c0, vt2.c1)) NOT BETWEEN ((((v0.c1)OR(v0.c0)), '0.45939357815304416', ((v0.c1)IS NOT(vt0.c0)))) AND ((((vt2.c1) NOT NULL), (NOT (v0.c0)), (~ (v0.c0))))) DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt0, vt2 WHERE (0.84220463257356);
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (0.84220463257356) ORDER BY '-1775012657';
SELECT ALL * FROM v0, vt0, vt2 WHERE (0.84220463257356);
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (0.84220463257356) ORDER BY '-1775012657';
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((0.5699803026032975 IN ())) ORDER BY vt0.c0 DESC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((0.5699803026032975 IN ()))AND(NULL))) ORDER BY (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) IN ((vt0.c0 IN ())))  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ('w1Cᆦ밑rE?W' COLLATE NOCASE) ORDER BY (((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) IN ((vt0.c0 IN ())))  NULLS LAST;
SELECT ALL MAX(vt2.c1) FROM v0, vt2, vt0 WHERE ((((vt0.c0, vt2.c0, v0.c3, v0.c1, v0.c3)) BETWEEN ((v0.c1, -1.680991631E9, NULL, vt2.c1 COLLATE NOCASE, (('2076299393') NOT NULL))) AND ((CAST(vt0.c0 AS BLOB), ((vt0.c0) NOT NULL), CASE WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN v0.c1 END, CAST(vt2.c1 AS BLOB), (vt2.c1 IN (v0.c2)))))) ORDER BY (((CASE WHEN v0.c3 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 END))=((((v0.c0) IS FALSE)))) DESC  NULLS FIRST;
SELECT ALL MAX(vt2.c1) FROM v0, vt2, vt0 WHERE ((((((vt0.c0, vt2.c0, v0.c3, v0.c1, v0.c3)) BETWEEN ((v0.c1, -1.680991631E9, NULL, vt2.c1 COLLATE NOCASE, (('2076299393') NOT NULL))) AND ((CAST(vt0.c0 AS BLOB), ((vt0.c0) NOT NULL), CASE WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN v0.c1 END, CAST(vt2.c1 AS BLOB), (vt2.c1 IN (v0.c2))))))AND(CASE (+ (98982355))  WHEN 0.7354794367041715 THEN ((v0.c2)>>(v0.c0)) WHEN (((vt2.c0, v0.c0, v0.c0))<=((vt2.c0, v0.c1, vt2.c0))) THEN (v0.c2 IN ()) WHEN CAST(vt2.c1 AS REAL) THEN vt2.c0 WHEN v0.c2 THEN ((vt2.c1) IS TRUE) END))) ORDER BY ((v0.c3 COLLATE BINARY)>=(CAST('-1784724493' AS INTEGER))), CAST(x'' AS INTEGER) INTERSECT SELECT MAX(vt2.c1) FROM v0, vt2, vt0 WHERE ((NOT (((0.010098430737263353) IS TRUE)))) ORDER BY ((v0.c3 COLLATE BINARY)>=(CAST('-1784724493' AS INTEGER))), CAST(x'' AS INTEGER);
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (json_array(CAST(v0.c0 AS TEXT), (~ (v0.c1)), ((vt0.c0) NOT NULL), ((vt0.c0)GLOB(v0.c0)), ((v0.c0)IS(v0.c2))));
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (((json_array(CAST(v0.c0 AS TEXT), (~ (v0.c1)), ((vt0.c0) NOT NULL), ((vt0.c0)GLOB(v0.c0)), ((v0.c0)IS(v0.c2))))AND((+ (CAST(v0.c0 AS REAL)))))) ORDER BY ((v0.c2)||(vt0.c0)) COLLATE NOCASE ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE ((NOT ((+ (v0.c3))))) ORDER BY ((v0.c2)||(vt0.c0)) COLLATE NOCASE ASC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt0, vt2 WHERE (((LTRIM(vt0.c0))LIKE(((((((-3.29968071E8)AND(vt2.c1)))AND(vt2.c1)))AND('-1607669206'))))) ORDER BY LIKELY(DISTINCT vt2.c1 COLLATE BINARY) DESC, 0.0723762534186253 ASC, ((((((vt2.c0)OR(((vt0.c0) NOT BETWEEN (0.027361569541690445) AND (vt2.c1)))))AND(UNLIKELY(vt0.c0))))AND(CHANGES())) ASC;
SELECT DISTINCT * FROM vt0, vt2 WHERE (((LTRIM(vt0.c0))LIKE(((((((-3.29968071E8)AND(vt2.c1)))AND(vt2.c1)))AND('-1607669206'))))) ORDER BY ((vt2.c1 COLLATE RTRIM)+(CAST(vt0.c0 AS INTEGER))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (((LTRIM(vt0.c0))LIKE(((((((-3.29968071E8)AND(vt2.c1)))AND(vt2.c1)))AND('-1607669206'))))) ORDER BY LIKELY(DISTINCT vt2.c1 COLLATE BINARY) DESC, 0.0723762534186253 ASC, ((((((vt2.c0)OR(((vt0.c0) NOT BETWEEN (0.027361569541690445) AND (vt2.c1)))))AND(UNLIKELY(vt0.c0))))AND(CHANGES())) ASC;
SELECT DISTINCT * FROM vt0, vt2 WHERE (((LTRIM(vt0.c0))LIKE(((((((-3.29968071E8)AND(vt2.c1)))AND(vt2.c1)))AND('-1607669206'))))) ORDER BY ((vt2.c1 COLLATE RTRIM)+(CAST(vt0.c0 AS INTEGER))) ASC  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE (CAST((((-1931697051))>((vt2.c0))) AS NUMERIC)) ORDER BY ((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE '5' END) NOTNULL);
SELECT * FROM vt2 WHERE (CAST((((-1931697051))>((vt2.c0))) AS NUMERIC)) ORDER BY ((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE '5' END) NOTNULL);
SELECT ALL * FROM vt2 WHERE (CAST((((-1931697051))>((vt2.c0))) AS NUMERIC)) ORDER BY ((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE '5' END) NOTNULL);
SELECT * FROM vt2 WHERE (CAST((((-1931697051))>((vt2.c0))) AS NUMERIC)) ORDER BY ((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE '5' END) NOTNULL);
SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN ((v0.c3)|(v0.c1)) THEN v0.c3 WHEN (('-769760503')/(v0.c2)) THEN v0.c0 END) ORDER BY (NOT ((v0.c2 IN (vt0.c0, vt0.c0))))  NULLS LAST, (((v0.c2, v0.c3)) BETWEEN ((DATE(v0.c1, v0.c0, v0.c2, vt0.c0), ((vt0.c0) ISNULL))) AND ((NULL, ((v0.c3) IS TRUE)))) DESC  NULLS LAST, (((CASE WHEN vt0.c0 THEN vt0.c0 END, ((v0.c3)%(v0.c1)), v0.c1))==((LIKELIHOOD(v0.c3, 0.11150069453727651), CASE NULL  WHEN v0.c3 THEN vt0.c0 END, ((v0.c2)>(v0.c0))))) ASC;
SELECT DISTINCT * FROM v0, vt0 WHERE (((CASE WHEN ((v0.c3)|(v0.c1)) THEN v0.c3 WHEN (('-769760503')/(v0.c2)) THEN v0.c0 END)AND(((((((((((v0.c3) NOTNULL))AND((((NULL, v0.c2, v0.c2))>=((v0.c0, x'fb7e', v0.c3))))))AND(((((v0.c2)AND(v0.c2)))OR(vt0.c0)))))AND((((v0.c3, vt0.c0))>=((v0.c0, v0.c1))))))OR(((((v0.c1)AND(v0.c3)))OR(vt0.c0))))))) ORDER BY CAST('-197496816' AS TEXT)  NULLS LAST, ((((v0.c2)%('	C')))IS NOT((v0.c2 IN (v0.c0, vt0.c0)))) DESC, CAST(((((((((((v0.c0)AND(vt0.c0)))OR(v0.c3)))OR(vt0.c0)))AND(v0.c2)))AND(v0.c1)) AS TEXT) INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE ((~ ((0.35999441822975475 IN ())))) ORDER BY CAST('-197496816' AS TEXT)  NULLS LAST, ((((v0.c2)%('	C')))IS NOT((v0.c2 IN (v0.c0, vt0.c0)))) DESC, CAST(((((((((((v0.c0)AND(vt0.c0)))OR(v0.c3)))OR(vt0.c0)))AND(v0.c2)))AND(v0.c1)) AS TEXT);
SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN ((v0.c3)|(v0.c1)) THEN v0.c3 WHEN (('-769760503')/(v0.c2)) THEN v0.c0 END) ORDER BY (NOT ((v0.c2 IN (vt0.c0, vt0.c0))))  NULLS LAST, (((v0.c2, v0.c3)) BETWEEN ((DATE(v0.c1, v0.c0, v0.c2, vt0.c0), ((vt0.c0) ISNULL))) AND ((NULL, ((v0.c3) IS TRUE)))) DESC  NULLS LAST, (((CASE WHEN vt0.c0 THEN vt0.c0 END, ((v0.c3)%(v0.c1)), v0.c1))==((LIKELIHOOD(v0.c3, 0.11150069453727651), CASE NULL  WHEN v0.c3 THEN vt0.c0 END, ((v0.c2)>(v0.c0))))) ASC;
SELECT DISTINCT * FROM v0, vt0 WHERE (((CASE WHEN ((v0.c3)|(v0.c1)) THEN v0.c3 WHEN (('-769760503')/(v0.c2)) THEN v0.c0 END)AND(((((((((((v0.c3) NOTNULL))AND((((NULL, v0.c2, v0.c2))>=((v0.c0, x'fb7e', v0.c3))))))AND(((((v0.c2)AND(v0.c2)))OR(vt0.c0)))))AND((((v0.c3, vt0.c0))>=((v0.c0, v0.c1))))))OR(((((v0.c1)AND(v0.c3)))OR(vt0.c0))))))) ORDER BY CAST('-197496816' AS TEXT)  NULLS LAST, ((((v0.c2)%('	C')))IS NOT((v0.c2 IN (v0.c0, vt0.c0)))) DESC, CAST(((((((((((v0.c0)AND(vt0.c0)))OR(v0.c3)))OR(vt0.c0)))AND(v0.c2)))AND(v0.c1)) AS TEXT) INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE ((~ ((0.35999441822975475 IN ())))) ORDER BY CAST('-197496816' AS TEXT)  NULLS LAST, ((((v0.c2)%('	C')))IS NOT((v0.c2 IN (v0.c0, vt0.c0)))) DESC, CAST(((((((((((v0.c0)AND(vt0.c0)))OR(v0.c3)))OR(vt0.c0)))AND(v0.c2)))AND(v0.c1)) AS TEXT);
SELECT COUNT(*) FROM vt2 WHERE (((+ (vt2.c1)) IN ()));
SELECT ALL COUNT(*) FROM vt2 WHERE (((+ (vt2.c1)) IN ())) ORDER BY NULLIF(((('v', vt2.c1, vt2.c1, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c0, vt2.c1, vt2.c1, vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c1, vt2.c0, vt2.c0, vt2.c0))), (vt2.c1 IN (vt2.c1))) ASC, ((NULL COLLATE BINARY)IS NOT(CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN ']' THEN vt2.c1 ELSE vt2.c0 END)) LIMIT 2;
SELECT * FROM vt0, v0, vt2 WHERE ((((vt0.c0 IN (x'19c7')))||((((v0.c3))<=((v0.c0))))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((vt0.c0 IN (x'19c7')))||((((v0.c3))<=((v0.c0))))));
SELECT * FROM vt0, v0, vt2 WHERE ((((vt0.c0 IN (x'19c7')))||((((v0.c3))<=((v0.c0))))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((vt0.c0 IN (x'19c7')))||((((v0.c3))<=((v0.c0))))));
SELECT * FROM vt2 WHERE (ABS(x'' COLLATE BINARY)) ORDER BY (((((vt2.c0) ISNULL)))<((vt2.c0 COLLATE BINARY)))  NULLS LAST, ((CAST(NULL AS NUMERIC)) NOTNULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE (ABS(x'' COLLATE BINARY)) ORDER BY (((vt2.c1) IS TRUE) IN (((vt2.c1) ISNULL), ((((((vt2.c1)OR(vt2.c0)))OR(NULL)))AND(vt2.c1)))), UPPER(DISTINCT CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((((((vt2.c1)&(vt2.c1)))OR(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)))AND(CAST(0.09651602830550787 AS INTEGER))))OR((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c0)))))) ORDER BY (((vt2.c1) IS TRUE) IN (((vt2.c1) ISNULL), ((((((vt2.c1)OR(vt2.c0)))OR(NULL)))AND(vt2.c1)))), UPPER(DISTINCT CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt2 WHERE (ABS(x'' COLLATE BINARY)) ORDER BY (((((vt2.c0) ISNULL)))<((vt2.c0 COLLATE BINARY)))  NULLS LAST, ((CAST(NULL AS NUMERIC)) NOTNULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE (ABS(x'' COLLATE BINARY)) ORDER BY (((vt2.c1) IS TRUE) IN (((vt2.c1) ISNULL), ((((((vt2.c1)OR(vt2.c0)))OR(NULL)))AND(vt2.c1)))), UPPER(DISTINCT CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((((((vt2.c1)&(vt2.c1)))OR(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)))AND(CAST(0.09651602830550787 AS INTEGER))))OR((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c0)))))) ORDER BY (((vt2.c1) IS TRUE) IN (((vt2.c1) ISNULL), ((((((vt2.c1)OR(vt2.c0)))OR(NULL)))AND(vt2.c1)))), UPPER(DISTINCT CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END) ASC  NULLS LAST LIMIT 0X0;
SELECT MIN(vt2.c0) FROM vt2, v0, vt0 WHERE (((CAST(v0.c0 AS TEXT)) NOT BETWEEN (v0.c2 COLLATE NOCASE) AND (((v0.c0) ISNULL))));
SELECT ALL MIN(vt2.c0) FROM vt2, v0, vt0 WHERE (((CAST(v0.c0 AS TEXT)) NOT BETWEEN (v0.c2 COLLATE NOCASE) AND (((v0.c0) ISNULL)))) ORDER BY ((CASE WHEN '1f	|' THEN v0.c0 WHEN v0.c1 THEN v0.c1 END) NOT BETWEEN (((v0.c1) IS FALSE)) AND (((vt0.c0) NOTNULL)))  NULLS LAST LIMIT 1 INTERSECT SELECT MIN(vt2.c0) FROM vt2, v0 NOT INDEXED, vt0 WHERE ((((v0.c2, vt0.c0)) BETWEEN (((vt2.c0 IN ()), COALESCE(DISTINCT vt2.c1, v0.c0, v0.c2, vt2.c0))) AND ((((v0.c1)||(v0.c0)), ABS(v0.c2))))) ORDER BY ((CASE WHEN '1f	|' THEN v0.c0 WHEN v0.c1 THEN v0.c1 END) NOT BETWEEN (((v0.c1) IS FALSE)) AND (((vt0.c0) NOTNULL)))  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt2 LEFT OUTER JOIN v0 ON v0.c2 CROSS JOIN vt0 ON (~ (((v0.c1) NOT BETWEEN (v0.c1) AND (vt0.c0)))) WHERE (((((vt0.c0)%(v0.c2))) BETWEEN (((vt2.c0)=(vt2.c1))) AND (v0.c1 COLLATE BINARY)));
SELECT * FROM vt2 INNER JOIN v0 ON v0.c2 CROSS JOIN vt0 ON (~ (((v0.c1) NOT BETWEEN (v0.c1) AND (vt0.c0)))) WHERE (((((vt0.c0)%(v0.c2))) BETWEEN (((vt2.c0)==(vt2.c1))) AND (v0.c1 COLLATE BINARY))) ORDER BY '0.7100278653416723' DESC  NULLS FIRST, ((NULLIF(v0.c0, v0.c0)) IS FALSE) ASC INTERSECT SELECT ALL * FROM vt2 INNER JOIN v0 ON v0.c2 CROSS JOIN vt0 ON (~ (((v0.c1) NOT BETWEEN (v0.c1) AND (vt0.c0)))) WHERE ((NULLIF(vt0.c0, v0.c0) IN (''))) ORDER BY '0.7100278653416723' DESC  NULLS FIRST, ((NULLIF(v0.c0, v0.c0)) IS FALSE) ASC;
SELECT ALL * FROM vt2 LEFT OUTER JOIN v0 ON v0.c2 CROSS JOIN vt0 ON (~ (((v0.c1) NOT BETWEEN (v0.c1) AND (vt0.c0)))) WHERE (((((vt0.c0)%(v0.c2))) BETWEEN (((vt2.c0)=(vt2.c1))) AND (v0.c1 COLLATE BINARY)));
SELECT * FROM vt2 INNER JOIN v0 ON v0.c2 CROSS JOIN vt0 ON (~ (((v0.c1) NOT BETWEEN (v0.c1) AND (vt0.c0)))) WHERE (((((vt0.c0)%(v0.c2))) BETWEEN (((vt2.c0)==(vt2.c1))) AND (v0.c1 COLLATE BINARY))) ORDER BY '0.7100278653416723' DESC  NULLS FIRST, ((NULLIF(v0.c0, v0.c0)) IS FALSE) ASC INTERSECT SELECT ALL * FROM vt2 INNER JOIN v0 ON v0.c2 CROSS JOIN vt0 ON (~ (((v0.c1) NOT BETWEEN (v0.c1) AND (vt0.c0)))) WHERE ((NULLIF(vt0.c0, v0.c0) IN (''))) ORDER BY '0.7100278653416723' DESC  NULLS FIRST, ((NULLIF(v0.c0, v0.c0)) IS FALSE) ASC;
SELECT * FROM vt0 WHERE ((((vt0.c0)) NOT BETWEEN (((vt0.c0 IN (vt0.c0)))) AND ((((vt0.c0)GLOB(vt0.c0)))))) ORDER BY (((('-618644197')AND((vt0.c0 IN (vt0.c0)))))AND(((NULL) BETWEEN (vt0.c0) AND (vt0.c0)))), CASE WHEN ((x'') IS FALSE) THEN CASE vt0.c0  WHEN vt0.c0 THEN '^' WHEN vt0.c0 THEN vt0.c0 END WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((NULL)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.060667016945582075)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN '摃' ELSE vt0.c0 END ASC  NULLS LAST, (((vt0.c0, DATE(vt0.c0, vt0.c0, vt0.c0), ((vt0.c0) NOT BETWEEN (0.9124631278038133) AND (0.5205481402214864)), ((vt0.c0)LIKE(0.35799466670803726)), ((vt0.c0)>>(vt0.c0))))<((CAST(vt0.c0 AS TEXT), (~ (vt0.c0)), json_valid(vt0.c0), (((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))), ((vt0.c0)>(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0)) NOT BETWEEN (((vt0.c0 IN (vt0.c0)))) AND ((((vt0.c0)GLOB(vt0.c0))))))AND(vt0.c0))) ORDER BY (((('-618644197')AND((vt0.c0 IN (vt0.c0)))))AND(((NULL) BETWEEN (vt0.c0) AND (vt0.c0)))), CASE WHEN ((x'') IS FALSE) THEN CASE vt0.c0  WHEN vt0.c0 THEN '^' WHEN vt0.c0 THEN vt0.c0 END WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((NULL)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.060667016945582075)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN '摃' ELSE vt0.c0 END ASC  NULLS LAST, (((vt0.c0, DATE(vt0.c0, vt0.c0, vt0.c0), ((vt0.c0) NOT BETWEEN (0.9124631278038133) AND (0.5205481402214864)), ((vt0.c0)LIKE(0.35799466670803726)), ((vt0.c0)>>(vt0.c0))))<((CAST(vt0.c0 AS TEXT), (~ (vt0.c0)), json_valid(vt0.c0), (((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))), ((vt0.c0)>(vt0.c0))))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0)*(vt0.c0)) IN (DATE(vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, 0.8135100416336029)))) ORDER BY (((('-618644197')AND((vt0.c0 IN (vt0.c0)))))AND(((NULL) BETWEEN (vt0.c0) AND (vt0.c0)))), CASE WHEN ((x'') IS FALSE) THEN CASE vt0.c0  WHEN vt0.c0 THEN '^' WHEN vt0.c0 THEN vt0.c0 END WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((NULL)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.060667016945582075)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN '摃' ELSE vt0.c0 END ASC  NULLS LAST, (((vt0.c0, DATE(vt0.c0, vt0.c0, vt0.c0), ((vt0.c0) NOT BETWEEN (0.9124631278038133) AND (0.5205481402214864)), ((vt0.c0)LIKE(0.35799466670803726)), ((vt0.c0)>>(vt0.c0))))<((CAST(vt0.c0 AS TEXT), (~ (vt0.c0)), json_valid(vt0.c0), (((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))), ((vt0.c0)>(vt0.c0)))));
SELECT * FROM vt0 WHERE ((((vt0.c0)) NOT BETWEEN (((vt0.c0 IN (vt0.c0)))) AND ((((vt0.c0)GLOB(vt0.c0)))))) ORDER BY (((('-618644197')AND((vt0.c0 IN (vt0.c0)))))AND(((NULL) BETWEEN (vt0.c0) AND (vt0.c0)))), CASE WHEN ((x'') IS FALSE) THEN CASE vt0.c0  WHEN vt0.c0 THEN '^' WHEN vt0.c0 THEN vt0.c0 END WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((NULL)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.060667016945582075)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN '摃' ELSE vt0.c0 END ASC  NULLS LAST, (((vt0.c0, DATE(vt0.c0, vt0.c0, vt0.c0), ((vt0.c0) NOT BETWEEN (0.9124631278038133) AND (0.5205481402214864)), ((vt0.c0)LIKE(0.35799466670803726)), ((vt0.c0)>>(vt0.c0))))<((CAST(vt0.c0 AS TEXT), (~ (vt0.c0)), json_valid(vt0.c0), (((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))), ((vt0.c0)>(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0)) NOT BETWEEN (((vt0.c0 IN (vt0.c0)))) AND ((((vt0.c0)GLOB(vt0.c0))))))AND(vt0.c0))) ORDER BY (((('-618644197')AND((vt0.c0 IN (vt0.c0)))))AND(((NULL) BETWEEN (vt0.c0) AND (vt0.c0)))), CASE WHEN ((x'') IS FALSE) THEN CASE vt0.c0  WHEN vt0.c0 THEN '^' WHEN vt0.c0 THEN vt0.c0 END WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((NULL)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.060667016945582075)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN '摃' ELSE vt0.c0 END ASC  NULLS LAST, (((vt0.c0, DATE(vt0.c0, vt0.c0, vt0.c0), ((vt0.c0) NOT BETWEEN (0.9124631278038133) AND (0.5205481402214864)), ((vt0.c0)LIKE(0.35799466670803726)), ((vt0.c0)>>(vt0.c0))))<((CAST(vt0.c0 AS TEXT), (~ (vt0.c0)), json_valid(vt0.c0), (((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))), ((vt0.c0)>(vt0.c0))))) INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0)*(vt0.c0)) IN (DATE(vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, 0.8135100416336029)))) ORDER BY (((('-618644197')AND((vt0.c0 IN (vt0.c0)))))AND(((NULL) BETWEEN (vt0.c0) AND (vt0.c0)))), CASE WHEN ((x'') IS FALSE) THEN CASE vt0.c0  WHEN vt0.c0 THEN '^' WHEN vt0.c0 THEN vt0.c0 END WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((NULL)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(0.060667016945582075)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN '摃' ELSE vt0.c0 END ASC  NULLS LAST, (((vt0.c0, DATE(vt0.c0, vt0.c0, vt0.c0), ((vt0.c0) NOT BETWEEN (0.9124631278038133) AND (0.5205481402214864)), ((vt0.c0)LIKE(0.35799466670803726)), ((vt0.c0)>>(vt0.c0))))<((CAST(vt0.c0 AS TEXT), (~ (vt0.c0)), json_valid(vt0.c0), (((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))), ((vt0.c0)>(vt0.c0)))));
SELECT ALL * FROM vt2, vt0 WHERE (0.27525127885994527);
SELECT * FROM vt2, vt0 WHERE (0.27525127885994527) ORDER BY (((vt2.c0 IN (vt2.c0))) NOT NULL) LIMIT 0x0 INTERSECT SELECT * FROM vt2, vt0 WHERE (vt0.c0) ORDER BY (((vt2.c0 IN (vt2.c0))) NOT NULL) LIMIT 0x0;
SELECT ALL * FROM vt2, vt0 WHERE (0.27525127885994527);
SELECT * FROM vt2, vt0 WHERE (0.27525127885994527) ORDER BY (((vt2.c0 IN (vt2.c0))) NOT NULL) LIMIT 0x0 INTERSECT SELECT * FROM vt2, vt0 WHERE (vt0.c0) ORDER BY (((vt2.c0 IN (vt2.c0))) NOT NULL) LIMIT 0x0;
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (PRINTF(((((((0.7230221014502402)OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c1)), CAST(vt2.c1 AS NUMERIC), ((((((x'73a416c3')OR('!\~YJ')))OR(vt2.c1)))OR(vt2.c0)), ((vt2.c1) IS FALSE), CASE WHEN 0xfffffffff5f8310f THEN x'd06fd220' ELSE vt2.c0 END));
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (PRINTF(((((((0.7230221014502402)OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c1)), CAST(vt2.c1 AS NUMERIC), ((((((x'73a416c3')OR('!\~YJ')))OR(vt2.c1)))OR(vt2.c0)), ((vt2.c1) IS FALSE), CASE WHEN -168283889 THEN x'd06fd220' ELSE vt2.c0 END)) ORDER BY IFNULL(((vt2.c1)&(vt2.c0)), -447903220), (- (vt2.c0)) COLLATE BINARY  NULLS FIRST, (((vt2.c1 IN (vt2.c1)))IS NOT(0.1569203544616874)) ASC;
SELECT * FROM vt0, v0 WHERE (CAST(CAST(v0.c0 AS INTEGER) AS INTEGER));
SELECT DISTINCT * FROM vt0, v0 WHERE (CAST(CAST(v0.c0 AS INTEGER) AS INTEGER)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (TRIM(DISTINCT vt0.c0) COLLATE NOCASE) LIMIT 0X1;
SELECT * FROM vt0, v0 WHERE (CAST(CAST(v0.c0 AS INTEGER) AS INTEGER));
SELECT DISTINCT * FROM vt0, v0 WHERE (CAST(CAST(v0.c0 AS INTEGER) AS INTEGER)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (TRIM(DISTINCT vt0.c0) COLLATE NOCASE) LIMIT 0X1;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE (0.9847997310195356);
SELECT ALL COUNT(*) FROM v0, vt0 WHERE (0.9847997310195356) LIMIT 0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((v0.c2) BETWEEN (vt2.c0) AND (v0.c1))) BETWEEN (((vt2.c0)!=(v0.c0))) AND (((v0.c1)<=(vt0.c0))))) ORDER BY PRINTF(CAST(v0.c3 AS NUMERIC)) ASC, (- (((v0.c1) BETWEEN (vt2.c1) AND (vt2.c0))))  NULLS LAST;
SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c2) BETWEEN (vt2.c0) AND (v0.c1))) BETWEEN (((vt2.c0)>(v0.c0))) AND (((v0.c1)<=(vt0.c0))))) ORDER BY ((((((((v0.c2)AND(v0.c2)))OR(v0.c2)))OR(v0.c1))) ISNULL) DESC, 0x9896787, ((((((((v0.c3)OR(v0.c1)))OR(v0.c3)))AND(v0.c0))) ISNULL) DESC LIMIT 0x0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((v0.c2) BETWEEN (vt2.c0) AND (v0.c1))) BETWEEN (((vt2.c0)!=(v0.c0))) AND (((v0.c1)<=(vt0.c0))))) ORDER BY PRINTF(CAST(v0.c3 AS NUMERIC)) ASC, (- (((v0.c1) BETWEEN (vt2.c1) AND (vt2.c0))))  NULLS LAST;
SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c2) BETWEEN (vt2.c0) AND (v0.c1))) BETWEEN (((vt2.c0)>(v0.c0))) AND (((v0.c1)<=(vt0.c0))))) ORDER BY ((((((((v0.c2)AND(v0.c2)))OR(v0.c2)))OR(v0.c1))) ISNULL) DESC, 0x9896787, ((((((((v0.c3)OR(v0.c1)))OR(v0.c3)))AND(v0.c0))) ISNULL) DESC LIMIT 0x0;
SELECT * FROM v0, vt0, vt2 WHERE (CAST(vt0.c0 AS NUMERIC));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (CAST(vt0.c0 AS NUMERIC)) ORDER BY CAST((v0.c2 IN ()) AS BLOB) ASC  NULLS LAST, ((((((((((((vt2.c1)OR(v0.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(UPPER(DISTINCT ''))))OR(((0.06423643790372113)>=(vt2.c1))))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (CAST(((v0.c0) NOT NULL) AS REAL)) ORDER BY CAST((v0.c2 IN ()) AS BLOB) ASC  NULLS LAST, ((((((((((((vt2.c1)OR(v0.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(UPPER(DISTINCT ''))))OR(((0.06423643790372113)>=(vt2.c1))))  NULLS LAST LIMIT 0x0;
SELECT * FROM v0, vt0, vt2 WHERE (CAST(vt0.c0 AS NUMERIC));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (CAST(vt0.c0 AS NUMERIC)) ORDER BY CAST((v0.c2 IN ()) AS BLOB) ASC  NULLS LAST, ((((((((((((vt2.c1)OR(v0.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(UPPER(DISTINCT ''))))OR(((0.06423643790372113)>=(vt2.c1))))  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (CAST(((v0.c0) NOT NULL) AS REAL)) ORDER BY CAST((v0.c2 IN ()) AS BLOB) ASC  NULLS LAST, ((((((((((((vt2.c1)OR(v0.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(UPPER(DISTINCT ''))))OR(((0.06423643790372113)>=(vt2.c1))))  NULLS LAST LIMIT 0x0;
SELECT MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (CAST((vt2.c1 IN (vt0.c0, v0.c3)) AS TEXT)) ORDER BY (((vt2.c0 COLLATE NOCASE))>(((+ (0.011230880764753648))))) ASC, ((NULLIF(v0.c0, 0.5048646743845115))>((vt2.c1 IN ()))) ASC  NULLS LAST, TYPEOF(((vt2.c0) BETWEEN (v0.c1) AND (x'eb')))  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (((CAST((vt2.c1 IN (vt0.c0)) AS TEXT))AND(NULL))) ORDER BY v0.c2, ((((((((vt0.c0)AND(v0.c3)))OR(vt2.c1)))AND(0.16617305787394354))) ISNULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (load_extension(UPPER(vt0.c0))) ORDER BY v0.c2, ((((((((vt0.c0)AND(v0.c3)))OR(vt2.c1)))AND(0.16617305787394354))) ISNULL) ASC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE ('[v' COLLATE NOCASE);
SELECT DISTINCT * FROM vt0, vt2 WHERE ((('[v' COLLATE NOCASE)AND(vt2.c1))) ORDER BY NULL DESC  NULLS FIRST, ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))LIKE(vt2.c0 COLLATE BINARY)) DESC  NULLS LAST LIMIT 0x1;
SELECT * FROM vt0, vt2 WHERE ('[v' COLLATE NOCASE);
SELECT DISTINCT * FROM vt0, vt2 WHERE ((('[v' COLLATE NOCASE)AND(vt2.c1))) ORDER BY NULL DESC  NULLS FIRST, ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))LIKE(vt2.c0 COLLATE BINARY)) DESC  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE ((v0.c2 IN (CAST(0.7974882704053149 AS NUMERIC), v0.c1 COLLATE NOCASE))) ORDER BY (((v0.c0 IN ()))+(((((((v0.c2)AND(6.65660588E8)))OR(v0.c0)))OR('-447903220'))))  NULLS FIRST, ((((0.7378420959382455) ISNULL)) NOT NULL) DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN (CAST(0.7974882704053149 AS NUMERIC), v0.c1 COLLATE NOCASE)))AND(CASE (v0.c1 IN ())  WHEN v0.c0 COLLATE RTRIM THEN ((0.3263987326289688)<=(v0.c0)) WHEN ((x'553635') IS TRUE) THEN (+ (v0.c3)) WHEN v0.c2 THEN (NOT (v0.c3)) WHEN ((v0.c0) NOT BETWEEN (v0.c0) AND ('')) THEN ((v0.c2)>>(v0.c1)) END))) ORDER BY (((v0.c0 IN ()))+(((((((v0.c2)AND(6.65660588E8)))OR(v0.c0)))OR('-447903220'))))  NULLS FIRST, ((((0.7378420959382455) ISNULL)) NOT NULL) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE (json_array((((x'ce06', '#{篵', v0.c3, 0X6c06332a))>((0.9883211527325997, v0.c0, v0.c2, v0.c2))), ((((((((v0.c3)AND(v0.c3)))OR(v0.c3)))AND(v0.c3)))AND(v0.c1)))) ORDER BY (((v0.c0 IN ()))+(((((((v0.c2)AND(6.65660588E8)))OR(v0.c0)))OR('-447903220'))))  NULLS FIRST, ((((0.7378420959382455) ISNULL)) NOT NULL) DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((v0.c2 IN (CAST(0.7974882704053149 AS NUMERIC), v0.c1 COLLATE NOCASE))) ORDER BY (((v0.c0 IN ()))+(((((((v0.c2)AND(6.65660588E8)))OR(v0.c0)))OR('-447903220'))))  NULLS FIRST, ((((0.7378420959382455) ISNULL)) NOT NULL) DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN (CAST(0.7974882704053149 AS NUMERIC), v0.c1 COLLATE NOCASE)))AND(CASE (v0.c1 IN ())  WHEN v0.c0 COLLATE RTRIM THEN ((0.3263987326289688)<=(v0.c0)) WHEN ((x'553635') IS TRUE) THEN (+ (v0.c3)) WHEN v0.c2 THEN (NOT (v0.c3)) WHEN ((v0.c0) NOT BETWEEN (v0.c0) AND ('')) THEN ((v0.c2)>>(v0.c1)) END))) ORDER BY (((v0.c0 IN ()))+(((((((v0.c2)AND(6.65660588E8)))OR(v0.c0)))OR('-447903220'))))  NULLS FIRST, ((((0.7378420959382455) ISNULL)) NOT NULL) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE (json_array((((x'ce06', '#{篵', v0.c3, 0X6c06332a))>((0.9883211527325997, v0.c0, v0.c2, v0.c2))), ((((((((v0.c3)AND(v0.c3)))OR(v0.c3)))AND(v0.c3)))AND(v0.c1)))) ORDER BY (((v0.c0 IN ()))+(((((((v0.c2)AND(6.65660588E8)))OR(v0.c0)))OR('-447903220'))))  NULLS FIRST, ((((0.7378420959382455) ISNULL)) NOT NULL) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt2 NATURAL JOIN v0 WHERE (((v0.c2) NOT BETWEEN (vt2.c0) AND (vt2.c0)) COLLATE RTRIM);
SELECT DISTINCT COUNT(*) FROM vt2 NATURAL JOIN v0 WHERE (((v0.c2) NOT BETWEEN (vt2.c0) AND (vt2.c0)) COLLATE RTRIM) INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 NATURAL JOIN v0 WHERE (CASE ((((((((((v0.c1)OR(vt2.c0)))AND(v0.c2)))OR(v0.c1)))OR(v0.c1)))OR(v0.c2))  WHEN v0.c0 THEN CAST(v0.c2 AS REAL) WHEN ((((((0xfffffffff7daa420)AND(vt2.c0)))AND(vt2.c1)))AND(v0.c1)) THEN '-1006256381' ELSE ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) END);
SELECT * FROM v0 WHERE ((CAST(v0.c2 AS BLOB) IN ((NOT (v0.c1))))) ORDER BY (((((((v0.c0 IN ()))AND(((v0.c3)|(v0.c0)))))OR(CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)))AND((v0.c2 IN ()))) DESC  NULLS LAST, CAST(((v0.c3)*(v0.c2)) AS NUMERIC);
SELECT ALL * FROM v0 WHERE ((CAST(v0.c2 AS BLOB) IN ((NOT (v0.c1))))) ORDER BY (((((((v0.c0 IN ()))AND(((v0.c3)|(v0.c0)))))OR(CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)))AND((v0.c2 IN ()))) DESC  NULLS LAST, CAST(((v0.c3)*(v0.c2)) AS NUMERIC) INTERSECT SELECT * FROM v0 WHERE (CAST((((v0.c2, v0.c1, v0.c3, v0.c1)) NOT BETWEEN ((v0.c0, v0.c1, v0.c3, v0.c1)) AND ((v0.c3, v0.c2, v0.c1, v0.c2))) AS INTEGER)) ORDER BY (((((((v0.c0 IN ()))AND(((v0.c3)|(v0.c0)))))OR(CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)))AND((v0.c2 IN ()))) DESC  NULLS LAST, CAST(((v0.c3)*(v0.c2)) AS NUMERIC);
SELECT * FROM v0 WHERE ((CAST(v0.c2 AS BLOB) IN ((NOT (v0.c1))))) ORDER BY (((((((v0.c0 IN ()))AND(((v0.c3)|(v0.c0)))))OR(CASE WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)))AND((v0.c2 IN ()))) DESC  NULLS LAST, CAST(((v0.c3)*(v0.c2)) AS NUMERIC);
SELECT ALL COUNT(*) FROM vt2 WHERE (((NULL)GLOB(''))) ORDER BY ((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))IS NOT(((vt2.c0) IS FALSE)))  NULLS LAST, ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) COLLATE BINARY ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((NULL)GLOB(''))) ORDER BY ((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))IS NOT(((vt2.c0) IS FALSE)))  NULLS LAST, ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) COLLATE BINARY ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE (CAST(vt2.c1 AS TEXT)) ORDER BY ((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))IS NOT(((vt2.c0) IS FALSE)))  NULLS LAST, ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) COLLATE BINARY ASC  NULLS FIRST LIMIT 0X0;
SELECT * FROM v0, vt0, vt2 WHERE (((((((vt2.c0 COLLATE BINARY)AND((v0.c3 IN (v0.c0)))))OR((- (v0.c3)))))OR((+ ('kTL*3\Ro|'))))) ORDER BY ((CASE vt2.c1  WHEN v0.c0 THEN vt0.c0 WHEN v0.c0 THEN v0.c3 END) NOT NULL) ASC, (((((v0.c3) IS TRUE)))<=((CAST(vt2.c0 AS REAL)))) ASC, ((CAST(v0.c0 AS INTEGER)) NOT BETWEEN (0.18925603540308522) AND ((v0.c2 IN ())));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((((vt2.c0 COLLATE BINARY)AND((v0.c3 IN (v0.c0)))))OR((- (v0.c3)))))OR((+ ('kTL*3\Ro|'))))) ORDER BY vt0.c0 DESC, CAST(NULL AS REAL) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((CASE v0.c1  WHEN v0.c3 THEN vt2.c1 ELSE v0.c0 END)OR(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))))OR(v0.c0 COLLATE RTRIM))) ORDER BY vt0.c0 DESC, CAST(NULL AS REAL) ASC  NULLS FIRST;
SELECT * FROM v0, vt0, vt2 WHERE (((((((vt2.c0 COLLATE BINARY)AND((v0.c3 IN (v0.c0)))))OR((- (v0.c3)))))OR((+ ('kTL*3\Ro|'))))) ORDER BY ((CASE vt2.c1  WHEN v0.c0 THEN vt0.c0 WHEN v0.c0 THEN v0.c3 END) NOT NULL) ASC, (((((v0.c3) IS TRUE)))<=((CAST(vt2.c0 AS REAL)))) ASC, ((CAST(v0.c0 AS INTEGER)) NOT BETWEEN (0.18925603540308522) AND ((v0.c2 IN ())));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((((vt2.c0 COLLATE BINARY)AND((v0.c3 IN (v0.c0)))))OR((- (v0.c3)))))OR((+ ('kTL*3\Ro|'))))) ORDER BY vt0.c0 DESC, CAST(NULL AS REAL) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((CASE v0.c1  WHEN v0.c3 THEN vt2.c1 ELSE v0.c0 END)OR(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))))OR(v0.c0 COLLATE RTRIM))) ORDER BY vt0.c0 DESC, CAST(NULL AS REAL) ASC  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE (v0.c0) ORDER BY ((((vt0.c0) IS TRUE))%(((vt2.c0) BETWEEN (vt0.c0) AND (v0.c2))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (v0.c0) ORDER BY ((((vt0.c0) IS TRUE))%(((vt2.c0) BETWEEN (vt0.c0) AND (v0.c2)))) INTERSECT SELECT DISTINCT * FROM v0 NOT INDEXED, vt2, vt0 WHERE (((((vt2.c0) NOT NULL)) BETWEEN (((v0.c2)IS NOT(v0.c2))) AND ((v0.c0 IN ())))) ORDER BY ((((vt0.c0) IS TRUE))%(((vt2.c0) BETWEEN (vt0.c0) AND (v0.c2))));
SELECT * FROM v0, vt2, vt0 WHERE (v0.c0) ORDER BY ((((vt0.c0) IS TRUE))%(((vt2.c0) BETWEEN (vt0.c0) AND (v0.c2))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (v0.c0) ORDER BY ((((vt0.c0) IS TRUE))%(((vt2.c0) BETWEEN (vt0.c0) AND (v0.c2)))) INTERSECT SELECT DISTINCT * FROM v0 NOT INDEXED, vt2, vt0 WHERE (((((vt2.c0) NOT NULL)) BETWEEN (((v0.c2)IS NOT(v0.c2))) AND ((v0.c0 IN ())))) ORDER BY ((((vt0.c0) IS TRUE))%(((vt2.c0) BETWEEN (vt0.c0) AND (v0.c2))));
SELECT MAX(v0.c2) FROM vt0 NATURAL JOIN v0 NATURAL JOIN vt2 WHERE (((((NULL)>=(v0.c1))) BETWEEN (('1106359274' IN (8.90457025E8))) AND (CASE vt2.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN x'' WHEN vt2.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c2 END)));
SELECT ALL MAX(v0.c2) FROM vt0 NATURAL JOIN v0 NATURAL JOIN vt2 WHERE (((((NULL)==(v0.c1))) BETWEEN (('1106359274' IN (8.90457025E8))) AND (CASE vt2.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN x'' WHEN vt2.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c2 END)));
SELECT ALL * FROM vt0 CROSS JOIN vt2 ON (~ (CASE WHEN v0.c3 THEN v0.c1 ELSE NULL END)) INNER JOIN v0 ON LIKELY((vt2.c1 IN (0.9972723165320404))) WHERE ((CAST(v0.c0 AS REAL) IN (((((((((vt2.c0)AND(v0.c0)))AND(v0.c2)))AND(vt2.c1)))OR(v0.c0))))) ORDER BY (~ (SUBSTR(v0.c3, x'f6'))) ASC, v0.c0 DESC;
SELECT ALL * FROM vt0 CROSS JOIN vt2 ON (~ (CASE WHEN v0.c3 THEN v0.c1 ELSE NULL END)) INNER JOIN v0 ON LIKELY((vt2.c1 IN (0.9972723165320404))) WHERE ((((CAST(v0.c0 AS REAL) IN (((((((((vt2.c0)AND(v0.c0)))AND(v0.c2)))AND(vt2.c1)))OR(v0.c0)))))AND(v0.c2 COLLATE NOCASE))) ORDER BY 0.969590325154981 COLLATE NOCASE;
SELECT ALL * FROM vt0 CROSS JOIN vt2 ON (~ (CASE WHEN v0.c3 THEN v0.c1 ELSE NULL END)) INNER JOIN v0 ON LIKELY((vt2.c1 IN (0.9972723165320404))) WHERE ((CAST(v0.c0 AS REAL) IN (((((((((vt2.c0)AND(v0.c0)))AND(v0.c2)))AND(vt2.c1)))OR(v0.c0))))) ORDER BY (~ (SUBSTR(v0.c3, x'f6'))) ASC, v0.c0 DESC;
SELECT ALL * FROM vt0 CROSS JOIN vt2 ON (~ (CASE WHEN v0.c3 THEN v0.c1 ELSE NULL END)) INNER JOIN v0 ON LIKELY((vt2.c1 IN (0.9972723165320404))) WHERE ((((CAST(v0.c0 AS REAL) IN (((((((((vt2.c0)AND(v0.c0)))AND(v0.c2)))AND(vt2.c1)))OR(v0.c0)))))AND(v0.c2 COLLATE NOCASE))) ORDER BY 0.969590325154981 COLLATE NOCASE;
SELECT * FROM vt0, v0 WHERE (((v0.c1)!=(((v0.c3)AND(v0.c1))))) ORDER BY (((((0.8810662676021138, v0.c0))==(('쑘', v0.c0)))) IS FALSE);
SELECT * FROM vt0, v0 WHERE (((v0.c1)<>(((v0.c3)AND(v0.c1))))) ORDER BY (((((0.8810662676021138, v0.c0))=(('쑘', v0.c0)))) IS FALSE);
SELECT * FROM vt0, v0 WHERE (((v0.c1)!=(((v0.c3)AND(v0.c1))))) ORDER BY (((((0.8810662676021138, v0.c0))==(('쑘', v0.c0)))) IS FALSE);
SELECT * FROM vt0, v0 WHERE (((v0.c1)<>(((v0.c3)AND(v0.c1))))) ORDER BY (((((0.8810662676021138, v0.c0))=(('쑘', v0.c0)))) IS FALSE);
SELECT ALL * FROM vt2, v0 WHERE (NULL) ORDER BY ((SQLITE_VERSION())>((- (vt2.c0)))) DESC  NULLS FIRST, ((vt2.c1)/(v0.c2)) COLLATE NOCASE;
SELECT DISTINCT * FROM vt2, v0 WHERE (((NULL)AND(((IFNULL(v0.c3, v0.c3)) IS TRUE)))) ORDER BY (+ ('348781725')) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((((v0.c1)%(v0.c0))) IS TRUE)) ORDER BY (+ ('348781725')) ASC  NULLS LAST;
SELECT ALL * FROM vt2, v0 WHERE (NULL) ORDER BY ((SQLITE_VERSION())>((- (vt2.c0)))) DESC  NULLS FIRST, ((vt2.c1)/(v0.c2)) COLLATE NOCASE;
SELECT DISTINCT * FROM vt2, v0 WHERE (((NULL)AND(((IFNULL(v0.c3, v0.c3)) IS TRUE)))) ORDER BY (+ ('348781725')) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((((v0.c1)%(v0.c0))) IS TRUE)) ORDER BY (+ ('348781725')) ASC  NULLS LAST;
SELECT * FROM vt0, v0, vt2 WHERE (CAST(vt2.c0 COLLATE NOCASE AS NUMERIC)) ORDER BY (vt2.c0 IN ()) ASC  NULLS LAST, ((((((((v0.c1) IS TRUE))OR(LENGTH(v0.c0))))OR('178570014')))OR(((vt2.c1)LIKE(v0.c2))))  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE (CAST(vt2.c0 COLLATE NOCASE AS NUMERIC)) ORDER BY ((((vt0.c0)&(v0.c1)))<=(((vt2.c1) ISNULL))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt0, v0, vt2 WHERE (CAST(vt2.c0 COLLATE NOCASE AS NUMERIC)) ORDER BY (vt2.c0 IN ()) ASC  NULLS LAST, ((((((((v0.c1) IS TRUE))OR(LENGTH(v0.c0))))OR('178570014')))OR(((vt2.c1)LIKE(v0.c2))))  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE (x'a869d4');
SELECT * FROM vt0, vt2 WHERE (((x'a869d4')AND(CAST(((vt2.c1)AND(vt2.c1)) AS REAL))));
SELECT ALL * FROM vt0, vt2 WHERE (x'a869d4');
SELECT * FROM vt0, vt2 WHERE (((x'a869d4')AND(CAST(((vt2.c1)AND(vt2.c1)) AS REAL))));
SELECT MIN(vt0.c0) FROM vt2 CROSS JOIN vt0 ON (NOT (((vt0.c0)AND(vt2.c1)))) WHERE (((+ (vt0.c0)) IN ((((vt0.c0, vt2.c0))<=((vt2.c0, vt2.c0)))))) ORDER BY (((vt2.c0)AND(vt2.c1)) IN ())  NULLS FIRST, CASE WHEN ((vt2.c0)AND(vt2.c1)) THEN vt0.c0 WHEN vt0.c0 COLLATE RTRIM THEN vt2.c1 COLLATE BINARY END  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c0) FROM vt2 CROSS JOIN vt0 ON (NOT (((vt0.c0)AND(vt2.c1)))) WHERE (((((+ (vt0.c0)) IN ((((vt0.c0, vt2.c0))<=((vt2.c0, vt2.c0))))))AND((((((vt2.c1, vt2.c0, vt2.c1, vt0.c0))>=((vt2.c0, vt0.c0, vt0.c0, vt2.c1))))||(vt0.c0))))) ORDER BY ((vt0.c0) NOT NULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt2 CROSS JOIN vt0 ON (NOT (((vt0.c0)AND(vt2.c1)))) WHERE (((0X3ed435b4) BETWEEN (((vt0.c0) NOT NULL)) AND (vt2.c1 COLLATE BINARY))) ORDER BY ((vt0.c0) NOT NULL) ASC  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE ((((v0.c1) IS TRUE) IN ())) ORDER BY (((v0.c2) IS TRUE) IN ()), ((((v0.c3)-(v0.c1))) IS TRUE);
SELECT DISTINCT * FROM vt0, v0 WHERE ((((v0.c1) IS TRUE) IN ())) ORDER BY (((v0.c2) IS TRUE) IN ()), ((((v0.c3)-(v0.c1))) IS TRUE);
SELECT ALL * FROM vt0, v0 WHERE ((((v0.c1) IS TRUE) IN ())) ORDER BY (((v0.c2) IS TRUE) IN ()), ((((v0.c3)-(v0.c1))) IS TRUE);
SELECT COUNT(*) FROM vt0 LEFT OUTER JOIN v0 ON (CAST(v0.c2 AS INTEGER) IN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN '1956192957' THEN v0.c1 WHEN v0.c0 THEN vt0.c0 END)) WHERE (((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))&((~ (v0.c2))))) ORDER BY 1190017638 DESC  NULLS FIRST, IFNULL(((v0.c3)>=(v0.c1)), (((v0.c2, v0.c1)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c3, v0.c1))));
SELECT ALL COUNT(*) FROM vt0 LEFT OUTER JOIN v0 ON (CAST(v0.c2 AS INTEGER) IN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN '1956192957' THEN v0.c1 WHEN v0.c0 THEN vt0.c0 END)) WHERE (((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))&((~ (v0.c2))))) ORDER BY (((((((((v0.c2)OR(v0.c3)))AND(v0.c0)))AND(v0.c1))))<=((CASE v0.c3  WHEN v0.c3 THEN vt0.c0 WHEN vt0.c0 THEN v0.c0 ELSE vt0.c0 END))) ASC LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt0 LEFT OUTER JOIN v0 ON (CAST(v0.c2 AS INTEGER) IN (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN '1956192957' THEN v0.c1 WHEN v0.c0 THEN vt0.c0 END)) WHERE (((CASE WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END) BETWEEN (((v0.c0)<<(v0.c0))) AND (((((v0.c2)OR(v0.c3)))AND(vt0.c0))))) ORDER BY (((((((((v0.c2)OR(v0.c3)))AND(v0.c0)))AND(v0.c1))))<=((CASE v0.c3  WHEN v0.c3 THEN vt0.c0 WHEN vt0.c0 THEN v0.c0 ELSE vt0.c0 END))) ASC LIMIT 1;
SELECT ALL MAX(v0.c0) FROM v0, vt0 WHERE (((((v0.c3) BETWEEN (v0.c3) AND (v0.c2))) IS FALSE)) ORDER BY ((CASE vt0.c0  WHEN vt0.c0 THEN v0.c3 END) NOTNULL) ASC;
SELECT DISTINCT MAX(v0.c0) FROM v0, vt0 WHERE (((((v0.c3) BETWEEN (v0.c3) AND (v0.c2))) IS FALSE)) ORDER BY (((v0.c3)LIKE(v0.c0)) IN (0X261c7034))  NULLS FIRST, v0.c1 ASC  NULLS FIRST;
SELECT * FROM v0 WHERE ((- (x''))) ORDER BY ((CAST(v0.c1 AS INTEGER)) NOTNULL);
SELECT ALL * FROM v0 WHERE ((- (x''))) ORDER BY (+ (v0.c3)) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE ((LOWER(DISTINCT v0.c3) IN (v0.c2, CAST(v0.c1 AS TEXT)))) ORDER BY (+ (v0.c3)) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE ((- (x''))) ORDER BY ((CAST(v0.c1 AS INTEGER)) NOTNULL);
SELECT ALL * FROM v0 WHERE ((- (x''))) ORDER BY (+ (v0.c3)) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM v0 WHERE ((LOWER(DISTINCT v0.c3) IN (v0.c2, CAST(v0.c1 AS TEXT)))) ORDER BY (+ (v0.c3)) DESC  NULLS FIRST;
SELECT MIN(vt2.c0) FROM vt2 WHERE ((vt2.c0 IN (NULL))) ORDER BY vt2.c0 DESC;
SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE ((((vt2.c0 IN (NULL)))AND(CASE ((vt2.c0)||(vt2.c0))  WHEN vt2.c1 THEN vt2.c0 WHEN (vt2.c1 IN ()) THEN (vt2.c1 IN (NULL)) END))) ORDER BY vt2.c0 DESC;
SELECT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (v0.c0) ORDER BY ((((((v0.c0)AND(vt2.c1)))OR(v0.c3))) NOTNULL);
SELECT DISTINCT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (((v0.c0)AND((((v0.c0 IN ())) BETWEEN (CAST(v0.c0 AS INTEGER)) AND ((vt0.c0 IN (v0.c1, v0.c2, v0.c1))))))) ORDER BY ((((((v0.c0)AND(vt2.c1)))OR(v0.c3))) NOTNULL) LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt2, vt0, v0 WHERE (((((v0.c3, vt2.c0, vt0.c0))<=((vt2.c0, NULL, vt0.c0))) IN ())) ORDER BY ((((((v0.c0)AND(vt2.c1)))OR(v0.c3))) NOTNULL) LIMIT 0X0;
SELECT MAX(v0.c3) FROM v0 WHERE (((((v0.c2)GLOB(v0.c1)))OR(ROUND(v0.c2, v0.c2))));
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (((((((v0.c2)GLOB(v0.c1)))OR(ROUND(v0.c2, v0.c2))))AND(((v0.c2 COLLATE RTRIM)OR(((v0.c1)|(v0.c0))))))) ORDER BY '-1466832301'  NULLS LAST, ((((((((((v0.c1)AND(v0.c3)))OR(v0.c2)))AND(v0.c0)))AND('yWZF#')))+(load_extension(v0.c0, v0.c2)))  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE ((('f	)p')LIKE(((((NULL)AND(v0.c2)))AND(v0.c0))))) ORDER BY '-1466832301'  NULLS LAST, ((((((((((v0.c1)AND(v0.c3)))OR(v0.c2)))AND(v0.c0)))AND('yWZF#')))+(load_extension(v0.c0, v0.c2)))  NULLS LAST LIMIT 0;
SELECT MAX(v0.c1) FROM vt0, v0, vt2 WHERE ((((((vt0.c0, v0.c3, v0.c2, v0.c3)) NOT BETWEEN ((v0.c2, vt0.c0, vt0.c0, v0.c2)) AND ((vt2.c0, vt2.c1, v0.c2, vt2.c1))))<=((((vt2.c1))>((NULL)))))) ORDER BY (((v0.c1)) BETWEEN (('98818379')) AND ((((v0.c0)<>('>Y%徨Si㒞'))))) DESC, x'71';
SELECT MAX(v0.c1) FROM vt0, v0, vt2 WHERE ((((((((vt0.c0, v0.c3, v0.c2, v0.c3)) NOT BETWEEN ((v0.c2, vt0.c0, vt0.c0, v0.c2)) AND ((vt2.c0, vt2.c1, v0.c2, vt2.c1))))<=((((vt2.c1))>((NULL))))))AND((~ (vt0.c0))))) ORDER BY (NOT (((v0.c1)>>(vt2.c0)))) INTERSECT SELECT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (((1247623579) BETWEEN (((v0.c0)IS NOT(vt2.c0))) AND (((('', vt2.c1))==((vt2.c1, v0.c2)))))) ORDER BY (NOT (((v0.c1)>>(vt2.c0))));
SELECT ALL * FROM v0 INNER JOIN vt2 ON v0.c1 WHERE ((((v0.c3 COLLATE RTRIM, ((vt2.c1) IS FALSE)))==(((vt2.c1 IN ()), CAST(v0.c2 AS BLOB)))));
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON v0.c1 WHERE ((((v0.c3 COLLATE RTRIM, ((vt2.c1) IS FALSE)))=(((vt2.c1 IN ()), CAST(v0.c2 AS BLOB))))) ORDER BY ((~ ('-1892106755')) IN (CAST(vt2.c0 AS INTEGER))) ASC  NULLS LAST, ((((((((((v0.c3)AND(v0.c3)))AND(v0.c1)))AND(v0.c2)))OR(v0.c3))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c3))) AND ((v0.c1 IN (vt2.c0)))) LIMIT 0X0;
SELECT ALL * FROM v0 INNER JOIN vt2 ON v0.c1 WHERE ((((v0.c3 COLLATE RTRIM, ((vt2.c1) IS FALSE)))==(((vt2.c1 IN ()), CAST(v0.c2 AS BLOB)))));
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON v0.c1 WHERE ((((v0.c3 COLLATE RTRIM, ((vt2.c1) IS FALSE)))=(((vt2.c1 IN ()), CAST(v0.c2 AS BLOB))))) ORDER BY ((~ ('-1892106755')) IN (CAST(vt2.c0 AS INTEGER))) ASC  NULLS LAST, ((((((((((v0.c3)AND(v0.c3)))AND(v0.c1)))AND(v0.c2)))OR(v0.c3))) BETWEEN (((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c3))) AND ((v0.c1 IN (vt2.c0)))) LIMIT 0X0;
SELECT ALL MIN(vt0.c0) FROM vt0, vt2 WHERE ((((vt0.c0)) BETWEEN ((CAST(vt0.c0 AS TEXT))) AND ((((vt0.c0)IS NOT(vt2.c0))))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0, vt2 WHERE ((((vt0.c0)) BETWEEN ((CAST(vt0.c0 AS TEXT))) AND ((((vt0.c0)IS NOT(vt2.c0)))))) INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 NOT INDEXED, vt2 WHERE (vt0.c0);
SELECT ALL MAX(vt2.c0) FROM vt2, vt0, v0 WHERE (((vt2.c0)>>(v0.c0)) COLLATE BINARY);
SELECT DISTINCT MAX(vt2.c0) FROM vt2, vt0, v0 WHERE (((((vt2.c0)>>(v0.c0)) COLLATE BINARY)AND((+ (v0.c1)) COLLATE NOCASE))) ORDER BY CAST(((v0.c1) BETWEEN (v0.c3) AND (vt2.c1)) AS TEXT) LIMIT 1;
SELECT ALL * FROM vt2 WHERE (CASE WHEN CAST(NULL AS BLOB) THEN (vt2.c0 IN (vt2.c1)) WHEN ((vt2.c1)!=(vt2.c1)) THEN vt2.c1 ELSE ((vt2.c1) NOTNULL) END);
SELECT DISTINCT * FROM vt2 WHERE (((CASE WHEN CAST(NULL AS BLOB) THEN (vt2.c0 IN (vt2.c1)) WHEN ((vt2.c1)<>(vt2.c1)) THEN vt2.c1 ELSE ((vt2.c1) NOTNULL) END)AND(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END COLLATE BINARY))) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)))>=((~ (vt2.c0)))));
SELECT ALL * FROM vt2 WHERE (CASE WHEN CAST(NULL AS BLOB) THEN (vt2.c0 IN (vt2.c1)) WHEN ((vt2.c1)!=(vt2.c1)) THEN vt2.c1 ELSE ((vt2.c1) NOTNULL) END);
SELECT DISTINCT * FROM vt2 WHERE (((CASE WHEN CAST(NULL AS BLOB) THEN (vt2.c0 IN (vt2.c1)) WHEN ((vt2.c1)<>(vt2.c1)) THEN vt2.c1 ELSE ((vt2.c1) NOTNULL) END)AND(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END COLLATE BINARY))) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)))>=((~ (vt2.c0)))));
SELECT MIN(v0.c2) FROM v0 WHERE (CAST(v0.c2 AS BLOB)) ORDER BY HEX(v0.c2), CAST(TYPEOF(v0.c2) AS TEXT) ASC  NULLS LAST;
SELECT MIN(v0.c2) FROM v0 WHERE (CAST(v0.c2 AS BLOB)) ORDER BY (((((((((((((v0.c3)) NOT BETWEEN ((v0.c2)) AND ((v0.c3))))OR(((v0.c0)&(v0.c3)))))AND((- (v0.c1)))))AND(MIN(v0.c2, v0.c2, v0.c3, v0.c0))))OR(v0.c1 COLLATE RTRIM)))OR((((v0.c2))=((v0.c0))))) ASC INTERSECT SELECT ALL MIN(v0.c2) FROM v0 WHERE ((((((x'aa') IS TRUE), CASE WHEN v0.c3 THEN v0.c2 ELSE v0.c2 END))==((((v0.c2)>=(v0.c1)), ((v0.c2)%(v0.c1)))))) ORDER BY (((((((((((((v0.c3)) NOT BETWEEN ((v0.c2)) AND ((v0.c3))))OR(((v0.c0)&(v0.c3)))))AND((- (v0.c1)))))AND(MIN(v0.c2, v0.c2, v0.c3, v0.c0))))OR(v0.c1 COLLATE RTRIM)))OR((((v0.c2))=((v0.c0))))) ASC;
SELECT ALL * FROM vt0 LEFT OUTER JOIN v0 ON 0.48463391837208036 COLLATE NOCASE WHERE (v0.c3);
SELECT * FROM vt0 INNER JOIN v0 ON 0.48463391837208036 COLLATE NOCASE WHERE (v0.c3) ORDER BY '-952293010', ABS(DISTINCT (vt0.c0 IN ())) ASC  NULLS LAST;
SELECT ALL * FROM vt0 LEFT OUTER JOIN v0 ON 0.48463391837208036 COLLATE NOCASE WHERE (v0.c3);
SELECT * FROM vt0 INNER JOIN v0 ON 0.48463391837208036 COLLATE NOCASE WHERE (v0.c3) ORDER BY '-952293010', ABS(DISTINCT (vt0.c0 IN ())) ASC  NULLS LAST;
SELECT MAX(v0.c1) FROM vt0, v0 CROSS JOIN vt2 ON (((v0.c1, NULL, v0.c0)) BETWEEN ((((vt0.c0)>(vt2.c0)), v0.c3, v0.c3 COLLATE BINARY)) AND ((((vt2.c1)*(v0.c3)), ((((((((((NULL)OR(v0.c3)))AND(vt2.c0)))AND(v0.c0)))AND(v0.c1)))AND(vt0.c0)), CASE vt2.c0  WHEN x'55f0e64f' THEN vt0.c0 END))) WHERE (TYPEOF(CAST(v0.c2 AS BLOB)));
SELECT MAX(v0.c1) FROM vt0, v0 CROSS JOIN vt2 ON (((v0.c1, NULL, v0.c0)) BETWEEN ((((vt0.c0)>(vt2.c0)), v0.c3, v0.c3 COLLATE BINARY)) AND ((((vt2.c1)*(v0.c3)), ((((((((((NULL)OR(v0.c3)))AND(vt2.c0)))AND(v0.c0)))AND(v0.c1)))AND(vt0.c0)), CASE vt2.c0  WHEN x'55f0e64f' THEN vt0.c0 END))) WHERE (TYPEOF(CAST(v0.c2 AS BLOB))) ORDER BY v0.c1 COLLATE NOCASE LIMIT 0X2;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((NOT (v0.c1))) ORDER BY (((CAST(vt0.c0 AS NUMERIC)))>=((CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN x'' ELSE vt2.c0 END))), 0X2da2994d ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((NOT (v0.c1)))AND(CAST(v0.c1 AS INTEGER) COLLATE BINARY))) ORDER BY CAST(v0.c0 AS REAL) DESC, CASE (((vt2.c1, vt2.c1))<((v0.c0, v0.c1)))  WHEN ((vt2.c1) IS FALSE) THEN ((v0.c2)|(v0.c2)) END, CAST(v0.c0 COLLATE RTRIM AS REAL) DESC LIMIT 0X0;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((NOT (v0.c1))) ORDER BY (((CAST(vt0.c0 AS NUMERIC)))>=((CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN x'' ELSE vt2.c0 END))), 0X2da2994d ASC  NULLS LAST;
SELECT MIN(vt2.c0) FROM vt2 WHERE (NULL);
SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE (NULL);
SELECT ALL * FROM vt2, vt0, v0 WHERE (CASE WHEN ((((((v0.c0)AND(v0.c0)))OR(v0.c2)))AND(vt2.c1)) THEN ((v0.c3) NOTNULL) WHEN json_quote(vt2.c1) THEN CASE v0.c2  WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN v0.c3 END END) ORDER BY ((((((((vt2.c1) NOTNULL))AND(((v0.c2)AND(v0.c0)))))AND(v0.c0)))AND(v0.c2 COLLATE NOCASE)) ASC, ((((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 END)AND(((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))))AND((NOT (v0.c0)))) DESC;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CASE WHEN ((((((v0.c0)AND(v0.c0)))OR(v0.c2)))AND(vt2.c1)) THEN ((v0.c3) NOTNULL) WHEN json_quote(vt2.c1) THEN CASE v0.c2  WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN v0.c3 END END)AND(v0.c3))) ORDER BY ((((((((vt2.c1) NOTNULL))AND(((v0.c2)AND(v0.c0)))))AND(v0.c0)))AND(v0.c2 COLLATE NOCASE)) ASC, ((((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 END)AND(((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))))AND((NOT (v0.c0)))) DESC LIMIT 1 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE ((IFNULL(DISTINCT v0.c2, v0.c0) IN ())) ORDER BY ((((((((vt2.c1) NOTNULL))AND(((v0.c2)AND(v0.c0)))))AND(v0.c0)))AND(v0.c2 COLLATE NOCASE)) ASC, ((((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 END)AND(((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))))AND((NOT (v0.c0)))) DESC LIMIT 1;
SELECT ALL * FROM vt2, vt0, v0 WHERE (CASE WHEN ((((((v0.c0)AND(v0.c0)))OR(v0.c2)))AND(vt2.c1)) THEN ((v0.c3) NOTNULL) WHEN json_quote(vt2.c1) THEN CASE v0.c2  WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN v0.c3 END END) ORDER BY ((((((((vt2.c1) NOTNULL))AND(((v0.c2)AND(v0.c0)))))AND(v0.c0)))AND(v0.c2 COLLATE NOCASE)) ASC, ((((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 END)AND(((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))))AND((NOT (v0.c0)))) DESC;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CASE WHEN ((((((v0.c0)AND(v0.c0)))OR(v0.c2)))AND(vt2.c1)) THEN ((v0.c3) NOTNULL) WHEN json_quote(vt2.c1) THEN CASE v0.c2  WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN v0.c3 END END)AND(v0.c3))) ORDER BY ((((((((vt2.c1) NOTNULL))AND(((v0.c2)AND(v0.c0)))))AND(v0.c0)))AND(v0.c2 COLLATE NOCASE)) ASC, ((((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 END)AND(((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))))AND((NOT (v0.c0)))) DESC LIMIT 1 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE ((IFNULL(DISTINCT v0.c2, v0.c0) IN ())) ORDER BY ((((((((vt2.c1) NOTNULL))AND(((v0.c2)AND(v0.c0)))))AND(v0.c0)))AND(v0.c2 COLLATE NOCASE)) ASC, ((((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 END)AND(((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))))AND((NOT (v0.c0)))) DESC LIMIT 1;
SELECT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0) NOT BETWEEN (0.024244574675355457) AND (vt0.c0)) AS REAL)) ORDER BY ((LTRIM(vt0.c0)) IS FALSE)  NULLS FIRST;
SELECT MIN(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0) NOT BETWEEN (0.024244574675355457) AND (vt0.c0)) AS REAL)) ORDER BY ((LTRIM(vt0.c0)) IS FALSE)  NULLS FIRST LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0 INNER JOIN v0 ON (((v0.c0, v0.c2)) BETWEEN (((v0.c0 IN ()), (~ (v0.c3)))) AND ((((1.786442639E9)>=(vt0.c0)), v0.c0 COLLATE BINARY))) WHERE (((CAST(v0.c0 AS REAL))>=(((v0.c0) ISNULL))));
SELECT COUNT(*) FROM vt0 INNER JOIN v0 ON (((v0.c0, v0.c2)) BETWEEN (((v0.c0 IN ()), (~ (v0.c3)))) AND ((((1.786442639E9)>=(vt0.c0)), v0.c0 COLLATE BINARY))) WHERE (((((CAST(v0.c0 AS REAL))==(((v0.c0) ISNULL))))AND(vt0.c0))) ORDER BY CASE LAST_INSERT_ROWID()  WHEN (v0.c2 IN (vt0.c0)) THEN (v0.c0 IN ()) WHEN CASE WHEN v0.c0 THEN v0.c3 END THEN NULLIF(v0.c2, vt0.c0) END DESC LIMIT 0X0;
SELECT ALL MIN(v0.c1) FROM vt2, v0, vt0 WHERE (json_patch((((vt2.c0)) NOT BETWEEN ((v0.c2)) AND ((NULL))), v0.c2 COLLATE NOCASE));
SELECT ALL MIN(v0.c1) FROM vt2, v0, vt0 WHERE (json_patch((((vt2.c0)) NOT BETWEEN ((v0.c2)) AND ((NULL))), v0.c2 COLLATE NOCASE)) ORDER BY v0.c0 ASC  NULLS FIRST, ((((((((((((vt2.c0 COLLATE BINARY)OR((((vt2.c0))>((0.0))))))AND(CASE v0.c3  WHEN vt2.c1 THEN x'a4f8' WHEN x'b60bb5' THEN vt2.c0 WHEN vt0.c0 THEN 5.26554451E8 WHEN v0.c2 THEN v0.c3 END)))AND('seconds')))OR(((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c2)))))AND((v0.c3 IN (v0.c3, v0.c1)))))AND(((v0.c0) BETWEEN (v0.c3) AND (vt0.c0)))) DESC LIMIT 0x2;
SELECT * FROM vt2, vt0, v0 WHERE (vt0.c0) ORDER BY (+ (LIKELY(vt2.c1)));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (vt0.c0) ORDER BY (+ (LIKELY(vt2.c1))) INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((+ ((vt2.c0 IN ())))) ORDER BY (+ (LIKELY(vt2.c1)));
SELECT * FROM vt2, vt0, v0 WHERE (vt0.c0) ORDER BY (+ (LIKELY(vt2.c1)));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (vt0.c0) ORDER BY (+ (LIKELY(vt2.c1))) INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((+ ((vt2.c0 IN ())))) ORDER BY (+ (LIKELY(vt2.c1)));
SELECT ALL MIN(v0.c0) FROM v0 CROSS JOIN vt2 ON CAST(LIKELIHOOD(DISTINCT vt0.c0, vt2.c0) AS TEXT) NATURAL JOIN vt0 WHERE (((((((((((v0.c1)OR(v0.c3)))AND(vt2.c1)))OR(v0.c2)))OR(v0.c2)))OR(vt2.c0)) COLLATE NOCASE) ORDER BY ((((((((((((CAST(v0.c0 AS BLOB))AND((vt0.c0 IN (v0.c2)))))OR(x'f7')))OR(((((vt2.c0)OR(vt2.c0)))OR(v0.c3)))))AND(((vt2.c0)<=(v0.c2)))))AND((((v0.c3, vt2.c0, vt2.c0)) NOT BETWEEN ((v0.c1, vt2.c1, v0.c0)) AND ((vt2.c1, x'', x''))))))AND(vt0.c0 COLLATE BINARY)), (((v0.c1) IS FALSE) IN ((~ (vt2.c0)))) ASC  NULLS LAST;
SELECT MIN(v0.c0) FROM v0 CROSS JOIN vt2 ON CAST(LIKELIHOOD(DISTINCT vt0.c0, vt2.c0) AS TEXT) NATURAL JOIN vt0 WHERE (((((((((((((v0.c1)OR(v0.c3)))AND(vt2.c1)))OR(v0.c2)))OR(v0.c2)))OR(vt2.c0)) COLLATE NOCASE)AND(((v0.c1) IS FALSE) COLLATE RTRIM))) ORDER BY CASE WHEN ((v0.c3)==(vt0.c0)) THEN ((((v0.c2)OR(v0.c0)))AND(vt0.c0)) WHEN (v0.c2 IN ()) THEN (- (v0.c3)) WHEN (NOT (vt0.c0)) THEN ((vt0.c0)%(v0.c1)) ELSE CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END END DESC LIMIT 0X0;
SELECT * FROM vt0 CROSS JOIN vt2 ON CASE WHEN CAST(v0.c2 AS NUMERIC) THEN CAST(v0.c3 AS NUMERIC) WHEN HEX(vt2.c0) THEN (+ (v0.c2)) WHEN CAST(vt2.c0 AS INTEGER) THEN CAST(vt2.c1 AS INTEGER) WHEN ((NULL) IS TRUE) THEN ((((((((vt0.c0)AND(0.7807732688761823)))AND(0.5427552041843192)))AND(vt2.c1)))AND(v0.c2)) ELSE 0.549501573291433 END INNER JOIN v0 ON CASE WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c2)AND(vt0.c0)))AND(vt2.c0)))AND(v0.c1)) WHEN v0.c0 THEN CAST(v0.c0 AS NUMERIC) ELSE ((vt0.c0)|(1.014823335E9)) END WHERE (((vt2.c1)<(v0.c0)) COLLATE NOCASE COLLATE RTRIM) ORDER BY CAST(CAST(v0.c3 AS BLOB) AS REAL);
SELECT * FROM vt0 CROSS JOIN vt2 ON CASE WHEN CAST(v0.c2 AS NUMERIC) THEN CAST(v0.c3 AS NUMERIC) WHEN HEX(vt2.c0) THEN (+ (v0.c2)) WHEN CAST(vt2.c0 AS INTEGER) THEN CAST(vt2.c1 AS INTEGER) WHEN ((NULL) IS TRUE) THEN ((((((((vt0.c0)AND(0.7807732688761823)))AND(0.5427552041843192)))AND(vt2.c1)))AND(v0.c2)) ELSE 0.549501573291433 END INNER JOIN v0 ON CASE WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c2)AND(vt0.c0)))AND(vt2.c0)))AND(v0.c1)) WHEN v0.c0 THEN CAST(v0.c0 AS NUMERIC) ELSE ((vt0.c0)|(1.014823335E9)) END WHERE (((vt2.c1)<(v0.c0)) COLLATE NOCASE COLLATE RTRIM) ORDER BY (((NULL, (('-344117549') NOT BETWEEN (vt2.c1) AND (v0.c2))))>((v0.c2, ((vt2.c1) IS FALSE)))) INTERSECT SELECT * FROM vt0 CROSS JOIN vt2 ON CASE WHEN CAST(v0.c2 AS NUMERIC) THEN CAST(v0.c3 AS NUMERIC) WHEN HEX(vt2.c0) THEN (+ (v0.c2)) WHEN CAST(vt2.c0 AS INTEGER) THEN CAST(vt2.c1 AS INTEGER) WHEN ((NULL) IS TRUE) THEN ((((((((vt0.c0)AND(0.7807732688761823)))AND(0.5427552041843192)))AND(vt2.c1)))AND(v0.c2)) ELSE 0.549501573291433 END INNER JOIN v0 ON CASE WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c2)AND(vt0.c0)))AND(vt2.c0)))AND(v0.c1)) WHEN v0.c0 THEN CAST(v0.c0 AS NUMERIC) ELSE ((vt0.c0)|(1.014823335E9)) END WHERE (NULL) ORDER BY (((NULL, (('-344117549') NOT BETWEEN (vt2.c1) AND (v0.c2))))>((v0.c2, ((vt2.c1) IS FALSE))));
SELECT * FROM vt0 CROSS JOIN vt2 ON CASE WHEN CAST(v0.c2 AS NUMERIC) THEN CAST(v0.c3 AS NUMERIC) WHEN HEX(vt2.c0) THEN (+ (v0.c2)) WHEN CAST(vt2.c0 AS INTEGER) THEN CAST(vt2.c1 AS INTEGER) WHEN ((NULL) IS TRUE) THEN ((((((((vt0.c0)AND(0.7807732688761823)))AND(0.5427552041843192)))AND(vt2.c1)))AND(v0.c2)) ELSE 0.549501573291433 END INNER JOIN v0 ON CASE WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c2)AND(vt0.c0)))AND(vt2.c0)))AND(v0.c1)) WHEN v0.c0 THEN CAST(v0.c0 AS NUMERIC) ELSE ((vt0.c0)|(1.014823335E9)) END WHERE (((vt2.c1)<(v0.c0)) COLLATE NOCASE COLLATE RTRIM) ORDER BY CAST(CAST(v0.c3 AS BLOB) AS REAL);
SELECT * FROM vt0 CROSS JOIN vt2 ON CASE WHEN CAST(v0.c2 AS NUMERIC) THEN CAST(v0.c3 AS NUMERIC) WHEN HEX(vt2.c0) THEN (+ (v0.c2)) WHEN CAST(vt2.c0 AS INTEGER) THEN CAST(vt2.c1 AS INTEGER) WHEN ((NULL) IS TRUE) THEN ((((((((vt0.c0)AND(0.7807732688761823)))AND(0.5427552041843192)))AND(vt2.c1)))AND(v0.c2)) ELSE 0.549501573291433 END INNER JOIN v0 ON CASE WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c2)AND(vt0.c0)))AND(vt2.c0)))AND(v0.c1)) WHEN v0.c0 THEN CAST(v0.c0 AS NUMERIC) ELSE ((vt0.c0)|(1.014823335E9)) END WHERE (((vt2.c1)<(v0.c0)) COLLATE NOCASE COLLATE RTRIM) ORDER BY (((NULL, (('-344117549') NOT BETWEEN (vt2.c1) AND (v0.c2))))>((v0.c2, ((vt2.c1) IS FALSE)))) INTERSECT SELECT * FROM vt0 CROSS JOIN vt2 ON CASE WHEN CAST(v0.c2 AS NUMERIC) THEN CAST(v0.c3 AS NUMERIC) WHEN HEX(vt2.c0) THEN (+ (v0.c2)) WHEN CAST(vt2.c0 AS INTEGER) THEN CAST(vt2.c1 AS INTEGER) WHEN ((NULL) IS TRUE) THEN ((((((((vt0.c0)AND(0.7807732688761823)))AND(0.5427552041843192)))AND(vt2.c1)))AND(v0.c2)) ELSE 0.549501573291433 END INNER JOIN v0 ON CASE WHEN CAST(v0.c0 AS NUMERIC) THEN ((((((v0.c2)AND(vt0.c0)))AND(vt2.c0)))AND(v0.c1)) WHEN v0.c0 THEN CAST(v0.c0 AS NUMERIC) ELSE ((vt0.c0)|(1.014823335E9)) END WHERE (NULL) ORDER BY (((NULL, (('-344117549') NOT BETWEEN (vt2.c1) AND (v0.c2))))>((v0.c2, ((vt2.c1) IS FALSE))));
SELECT * FROM vt0, vt2 WHERE ((((vt2.c1 IN (vt0.c0)))<(((vt2.c1) ISNULL)))) ORDER BY LIKE(((vt2.c1) NOT NULL), ((vt2.c1)IS(vt0.c0))), CAST(HEX(DISTINCT vt2.c0) AS TEXT) DESC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE ((((((vt2.c1 IN (vt0.c0)))<(((vt2.c1) ISNULL))))AND(((CAST(vt2.c0 AS INTEGER)) ISNULL)))) ORDER BY (((((((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)))OR(NULL)))AND(vt2.c1)) IN (((((((((vt2.c1)OR(vt0.c0)))AND(vt0.c0)))AND(vt2.c0)))AND(vt2.c1))))  NULLS FIRST LIMIT 1 INTERSECT SELECT * FROM vt0, vt2 WHERE ((((((((((~ (vt2.c0)))AND(((vt0.c0)<(vt2.c1)))))AND((- (vt2.c0)))))OR(vt2.c0 COLLATE BINARY)))AND((((vt2.c0, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c0)) AND ((vt2.c0, vt2.c1)))))) ORDER BY (((((((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)))OR(NULL)))AND(vt2.c1)) IN (((((((((vt2.c1)OR(vt0.c0)))AND(vt0.c0)))AND(vt2.c0)))AND(vt2.c1))))  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt0, vt2 WHERE ((((vt2.c1 IN (vt0.c0)))<(((vt2.c1) ISNULL)))) ORDER BY LIKE(((vt2.c1) NOT NULL), ((vt2.c1)IS(vt0.c0))), CAST(HEX(DISTINCT vt2.c0) AS TEXT) DESC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE ((((((vt2.c1 IN (vt0.c0)))<(((vt2.c1) ISNULL))))AND(((CAST(vt2.c0 AS INTEGER)) ISNULL)))) ORDER BY (((((((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)))OR(NULL)))AND(vt2.c1)) IN (((((((((vt2.c1)OR(vt0.c0)))AND(vt0.c0)))AND(vt2.c0)))AND(vt2.c1))))  NULLS FIRST LIMIT 1 INTERSECT SELECT * FROM vt0, vt2 WHERE ((((((((((~ (vt2.c0)))AND(((vt0.c0)<(vt2.c1)))))AND((- (vt2.c0)))))OR(vt2.c0 COLLATE BINARY)))AND((((vt2.c0, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c0)) AND ((vt2.c0, vt2.c1)))))) ORDER BY (((((((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)))OR(NULL)))AND(vt2.c1)) IN (((((((((vt2.c1)OR(vt0.c0)))AND(vt0.c0)))AND(vt2.c0)))AND(vt2.c1))))  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt2, vt0 WHERE (((vt0.c0)+(vt0.c0 COLLATE RTRIM)));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt0.c0)+(vt0.c0 COLLATE RTRIM))) LIMIT 0;
SELECT * FROM vt2, vt0 WHERE (((vt0.c0)+(vt0.c0 COLLATE RTRIM)));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt0.c0)+(vt0.c0 COLLATE RTRIM))) LIMIT 0;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON (- ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c0, vt2.c1))))) WHERE (((((vt0.c0)%(-1.935470654E9)))<(((vt0.c0)%(vt2.c1))))) ORDER BY (((((((((x'31', vt2.c0))>((vt2.c1, vt0.c0))))OR(((vt2.c1)||('1090913443')))))OR(((vt0.c0) NOT NULL))))AND(LTRIM(vt2.c0)))  NULLS FIRST, UPPER(CAST(0.21843300767774454 AS NUMERIC)) DESC, ((CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END) IS TRUE)  NULLS FIRST;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON (- ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c0, vt2.c1))))) WHERE (((((((vt0.c0)%(-1.935470654E9)))<(((vt0.c0)%(vt2.c1)))))AND((((vt2.c0, vt2.c0)) NOT BETWEEN (((vt2.c1 IN ()), LAST_INSERT_ROWID())) AND (((vt2.c0 IN ()), ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)))))))) ORDER BY ((vt2.c0 COLLATE RTRIM) IS TRUE) DESC  NULLS FIRST;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON (- ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c0, vt2.c1))))) WHERE (((((vt0.c0)%(-1.935470654E9)))<(((vt0.c0)%(vt2.c1))))) ORDER BY (((((((((x'31', vt2.c0))>((vt2.c1, vt0.c0))))OR(((vt2.c1)||('1090913443')))))OR(((vt0.c0) NOT NULL))))AND(LTRIM(vt2.c0)))  NULLS FIRST, UPPER(CAST(0.21843300767774454 AS NUMERIC)) DESC, ((CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END) IS TRUE)  NULLS FIRST;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON (- ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c0, vt2.c1))))) WHERE (((((((vt0.c0)%(-1.935470654E9)))<(((vt0.c0)%(vt2.c1)))))AND((((vt2.c0, vt2.c0)) NOT BETWEEN (((vt2.c1 IN ()), LAST_INSERT_ROWID())) AND (((vt2.c0 IN ()), ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)))))))) ORDER BY ((vt2.c0 COLLATE RTRIM) IS TRUE) DESC  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE (CASE WHEN (((v0.c0, vt0.c0)) NOT BETWEEN ((v0.c3, v0.c2)) AND ((v0.c1, v0.c2))) THEN (- (v0.c3)) END);
SELECT * FROM vt0, v0 WHERE (CASE WHEN (((v0.c0, vt0.c0)) NOT BETWEEN ((v0.c3, v0.c2)) AND ((v0.c1, v0.c2))) THEN (- (v0.c3)) END) ORDER BY SQLITE_VERSION() DESC INTERSECT SELECT ALL * FROM vt0, v0 WHERE (CASE v0.c0  WHEN (NOT (v0.c3)) THEN ((v0.c3)LIKE(v0.c2)) WHEN vt0.c0 THEN CASE WHEN v0.c2 THEN v0.c0 END WHEN ((0.27524214830461213) NOT NULL) THEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1)) END) ORDER BY SQLITE_VERSION() DESC;
SELECT * FROM vt0, v0 WHERE (CASE WHEN (((v0.c0, vt0.c0)) NOT BETWEEN ((v0.c3, v0.c2)) AND ((v0.c1, v0.c2))) THEN (- (v0.c3)) END);
SELECT * FROM vt0, v0 WHERE (CASE WHEN (((v0.c0, vt0.c0)) NOT BETWEEN ((v0.c3, v0.c2)) AND ((v0.c1, v0.c2))) THEN (- (v0.c3)) END) ORDER BY SQLITE_VERSION() DESC INTERSECT SELECT ALL * FROM vt0, v0 WHERE (CASE v0.c0  WHEN (NOT (v0.c3)) THEN ((v0.c3)LIKE(v0.c2)) WHEN vt0.c0 THEN CASE WHEN v0.c2 THEN v0.c0 END WHEN ((0.27524214830461213) NOT NULL) THEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1)) END) ORDER BY SQLITE_VERSION() DESC;
SELECT MAX(vt2.c1) FROM v0, vt0 LEFT OUTER JOIN vt2 ON ((CASE vt2.c0  WHEN v0.c2 THEN vt0.c0 ELSE v0.c3 END)<=(LIKELIHOOD(DISTINCT v0.c3, v0.c0))) WHERE (((((v0.c3)IS(v0.c1))) NOT BETWEEN (CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END) AND (((0Xffffffffe727a61b) NOTNULL)))) ORDER BY json_type((((v0.c1))<=((v0.c2)))) ASC, ((((0.7742440933011332) BETWEEN (v0.c2) AND (vt0.c0))) BETWEEN ((~ (v0.c2))) AND ((+ (vt2.c0))))  NULLS FIRST;
SELECT ALL MAX(vt2.c1) FROM v0, vt0 INNER JOIN vt2 ON ((CASE vt2.c0  WHEN v0.c2 THEN vt0.c0 ELSE v0.c3 END)<=(LIKELIHOOD(DISTINCT v0.c3, v0.c0))) WHERE (((((v0.c3)IS(v0.c1))) NOT BETWEEN (CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END) AND (((-416831973) NOTNULL)))) ORDER BY json_type((((v0.c1))<=((v0.c2)))) ASC, ((((0.7742440933011332) BETWEEN (v0.c2) AND (vt0.c0))) BETWEEN ((~ (v0.c2))) AND ((+ (vt2.c0))))  NULLS FIRST INTERSECT SELECT MAX(vt2.c1) FROM v0, vt0 INNER JOIN vt2 ON ((CASE vt2.c0  WHEN v0.c2 THEN vt0.c0 ELSE v0.c3 END)<=(LIKELIHOOD(DISTINCT v0.c3, v0.c0))) WHERE (((CAST(v0.c0 AS NUMERIC))GLOB(((189168943)+(v0.c2))))) ORDER BY json_type((((v0.c1))<=((v0.c2)))) ASC, ((((0.7742440933011332) BETWEEN (v0.c2) AND (vt0.c0))) BETWEEN ((~ (v0.c2))) AND ((+ (vt2.c0))))  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((vt2.c1 IN (vt0.c0))) NOT BETWEEN ((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0)))) AND (CAST(v0.c3 AS BLOB))));
SELECT * FROM vt2, vt0, v0 WHERE ((((((vt2.c1 IN (vt0.c0))) NOT BETWEEN ((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0)))) AND (CAST(v0.c3 AS BLOB))))AND((((~ (v0.c2)))GLOB(((vt0.c0) NOT BETWEEN (v0.c3) AND (vt0.c0))))))) ORDER BY ((((v0.c1) NOTNULL)) NOTNULL) ASC  NULLS FIRST, (((+ (v0.c2))) BETWEEN (CAST(v0.c3 AS TEXT)) AND (v0.c3))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((vt2.c1 IN (vt0.c0))) NOT BETWEEN ((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0)))) AND (CAST(v0.c3 AS BLOB))));
SELECT * FROM vt2, vt0, v0 WHERE ((((((vt2.c1 IN (vt0.c0))) NOT BETWEEN ((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0)))) AND (CAST(v0.c3 AS BLOB))))AND((((~ (v0.c2)))GLOB(((vt0.c0) NOT BETWEEN (v0.c3) AND (vt0.c0))))))) ORDER BY ((((v0.c1) NOTNULL)) NOTNULL) ASC  NULLS FIRST, (((+ (v0.c2))) BETWEEN (CAST(v0.c3 AS TEXT)) AND (v0.c3))  NULLS FIRST LIMIT 0;
SELECT MAX(v0.c3) FROM vt0 LEFT OUTER JOIN v0 ON CAST(((v0.c1)%(v0.c1)) AS BLOB) WHERE (((LIKELIHOOD(DISTINCT v0.c2, v0.c3))IS NOT(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)))));
SELECT MAX(v0.c3) FROM vt0 INNER JOIN v0 ON CAST(((v0.c1)%(v0.c1)) AS BLOB) WHERE (((LIKELIHOOD(DISTINCT v0.c2, v0.c3))IS NOT(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)))));
SELECT ALL MAX(v0.c2) FROM v0 LEFT OUTER JOIN vt2 ON (((v0.c3, vt2.c0)) NOT BETWEEN ((((((NULL)AND(vt2.c0)))AND(vt2.c0)), CASE v0.c1  WHEN v0.c2 THEN 0.6774602299325343 WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END)) AND (((((vt2.c0, vt2.c0, v0.c3, v0.c2, v0.c2))<=((vt2.c0, vt2.c1, v0.c2, 0.18732312220800018, v0.c1))), (v0.c1 IN ())))) WHERE ((((vt2.c1 IN (v0.c3)))LIKE(((((((((((v0.c2)OR(vt2.c0)))AND(vt2.c0)))AND(v0.c0)))OR(vt2.c0)))AND(v0.c2))))) ORDER BY json_patch((+ (NULL)), vt2.c0) DESC  NULLS LAST;
SELECT ALL MAX(v0.c2) FROM v0 LEFT OUTER JOIN vt2 ON (((v0.c3, vt2.c0)) NOT BETWEEN ((((((NULL)AND(vt2.c0)))AND(vt2.c0)), CASE v0.c1  WHEN v0.c2 THEN 0.6774602299325343 WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END)) AND (((((vt2.c0, vt2.c0, v0.c3, v0.c2, v0.c2))<=((vt2.c0, vt2.c1, v0.c2, 0.18732312220800018, v0.c1))), (v0.c1 IN ())))) WHERE ((((vt2.c1 IN (v0.c3)))LIKE(((((((((((v0.c2)OR(vt2.c0)))AND(vt2.c0)))AND(v0.c0)))OR(vt2.c0)))AND(v0.c2))))) ORDER BY json_patch((+ (NULL)), vt2.c0) DESC  NULLS LAST INTERSECT SELECT ALL MAX(v0.c2) FROM v0 LEFT OUTER JOIN vt2 ON (((v0.c3, vt2.c0)) NOT BETWEEN ((((((NULL)AND(vt2.c0)))AND(vt2.c0)), CASE v0.c1  WHEN v0.c2 THEN 0.6774602299325343 WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END)) AND (((((vt2.c0, vt2.c0, v0.c3, v0.c2, v0.c2))<=((vt2.c0, vt2.c1, v0.c2, 0.18732312220800018, v0.c1))), (v0.c1 IN ())))) WHERE ('460843263') ORDER BY json_patch((+ (NULL)), vt2.c0) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE ((CAST(x'b3' AS REAL) IN ('292248683'))) ORDER BY ((CAST(vt0.c0 AS NUMERIC))>((vt0.c0 IN (vt0.c0)))), 'f!';
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((CAST(x'b3' AS REAL) IN ('292248683')))AND(((((vt0.c0)OR(((vt0.c0)<=(vt0.c0)))))AND(vt0.c0))))) ORDER BY LIKELIHOOD(DISTINCT CAST(vt0.c0 AS REAL), (((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))))  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY vt0.c0 ASC;
SELECT * FROM vt0 WHERE (((NULL)AND(((((((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt0.c0)))AND(((vt0.c0) IS TRUE))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))))OR(CASE WHEN vt0.c0 THEN vt0.c0 END))))) ORDER BY (- (((vt0.c0) IS TRUE)))  NULLS FIRST, 0.5385090617409874 COLLATE BINARY DESC LIMIT 0X1 INTERSECT SELECT * FROM vt0 WHERE ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END IN ())) ORDER BY (- (((vt0.c0) IS TRUE)))  NULLS FIRST, 0.5385090617409874 COLLATE BINARY DESC LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY vt0.c0 ASC;
SELECT * FROM vt0 WHERE (((NULL)AND(((((((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))OR(vt0.c0)))AND(((vt0.c0) IS TRUE))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))))OR(CASE WHEN vt0.c0 THEN vt0.c0 END))))) ORDER BY (- (((vt0.c0) IS TRUE)))  NULLS FIRST, 0.5385090617409874 COLLATE BINARY DESC LIMIT 0X1 INTERSECT SELECT * FROM vt0 WHERE ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END IN ())) ORDER BY (- (((vt0.c0) IS TRUE)))  NULLS FIRST, 0.5385090617409874 COLLATE BINARY DESC LIMIT 0x1;
SELECT COUNT(*) FROM vt0, v0, vt2 WHERE (((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c0 WHEN vt2.c1 THEN vt2.c1 END) BETWEEN (((vt2.c1) NOT BETWEEN (x'8f') AND (vt2.c0))) AND (UNLIKELY(DISTINCT vt2.c0))));
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (((CASE WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c0 WHEN vt2.c1 THEN vt2.c1 END) BETWEEN (((vt2.c1) NOT BETWEEN (x'8f') AND (vt2.c0))) AND (UNLIKELY(DISTINCT vt2.c0)))) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (CASE ((vt0.c0) ISNULL)  WHEN LOWER(vt0.c0) THEN (((v0.c3, v0.c1))<(('塐j', v0.c2))) WHEN ((v0.c1)%(NULL)) THEN (~ (vt0.c0)) ELSE ((x'35')=(v0.c1)) END) LIMIT 0x0;
SELECT MIN(v0.c3) FROM vt0, v0, vt2 WHERE ((+ (vt2.c0)));
SELECT ALL MIN(v0.c3) FROM vt0, v0, vt2 WHERE ((((+ (vt2.c0)))AND((+ (((v0.c3) BETWEEN (v0.c1) AND (vt0.c0))))))) ORDER BY ((x'ca') ISNULL)  NULLS LAST, (((v0.c1, v0.c2)) NOT BETWEEN ((vt2.c0, ((((v0.c3)AND(vt2.c1)))OR(v0.c1)))) AND ((0.2108925113409189, ((((((((((vt2.c0)OR(vt2.c0)))AND(v0.c2)))OR(0.7019252105488037)))OR(v0.c2)))OR(vt0.c0))))) DESC LIMIT 1;
SELECT ALL * FROM vt2 LEFT OUTER JOIN vt0 ON CAST((vt0.c0 IN (vt2.c1)) AS INTEGER) WHERE (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END COLLATE BINARY);
SELECT * FROM vt2 INNER JOIN vt0 ON CAST((vt0.c0 IN (vt2.c1)) AS INTEGER) WHERE (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END COLLATE BINARY) ORDER BY (((vt2.c0, vt2.c1, vt2.c1)) BETWEEN (((((vt0.c0, vt2.c0))<=((vt0.c0, vt2.c1))), ((vt0.c0)%(vt0.c0)), (vt2.c0 IN (vt0.c0, vt0.c0, vt2.c0)))) AND ((((((((vt2.c0)AND(vt0.c0)))AND(vt2.c1)))OR(vt2.c0)), CAST(vt2.c1 AS NUMERIC), vt2.c0 COLLATE NOCASE)))  NULLS LAST LIMIT 0x1 INTERSECT SELECT * FROM vt2 INNER JOIN vt0 ON CAST((vt0.c0 IN (vt2.c1)) AS INTEGER) WHERE (x'b4' COLLATE RTRIM COLLATE RTRIM) ORDER BY (((vt2.c0, vt2.c1, vt2.c1)) BETWEEN (((((vt0.c0, vt2.c0))<=((vt0.c0, vt2.c1))), ((vt0.c0)%(vt0.c0)), (vt2.c0 IN (vt0.c0, vt0.c0, vt2.c0)))) AND ((((((((vt2.c0)AND(vt0.c0)))AND(vt2.c1)))OR(vt2.c0)), CAST(vt2.c1 AS NUMERIC), vt2.c0 COLLATE NOCASE)))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt2 LEFT OUTER JOIN vt0 ON CAST((vt0.c0 IN (vt2.c1)) AS INTEGER) WHERE (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END COLLATE BINARY);
SELECT * FROM vt2 INNER JOIN vt0 ON CAST((vt0.c0 IN (vt2.c1)) AS INTEGER) WHERE (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END COLLATE BINARY) ORDER BY (((vt2.c0, vt2.c1, vt2.c1)) BETWEEN (((((vt0.c0, vt2.c0))<=((vt0.c0, vt2.c1))), ((vt0.c0)%(vt0.c0)), (vt2.c0 IN (vt0.c0, vt0.c0, vt2.c0)))) AND ((((((((vt2.c0)AND(vt0.c0)))AND(vt2.c1)))OR(vt2.c0)), CAST(vt2.c1 AS NUMERIC), vt2.c0 COLLATE NOCASE)))  NULLS LAST LIMIT 0x1 INTERSECT SELECT * FROM vt2 INNER JOIN vt0 ON CAST((vt0.c0 IN (vt2.c1)) AS INTEGER) WHERE (x'b4' COLLATE RTRIM COLLATE RTRIM) ORDER BY (((vt2.c0, vt2.c1, vt2.c1)) BETWEEN (((((vt0.c0, vt2.c0))<=((vt0.c0, vt2.c1))), ((vt0.c0)%(vt0.c0)), (vt2.c0 IN (vt0.c0, vt0.c0, vt2.c0)))) AND ((((((((vt2.c0)AND(vt0.c0)))AND(vt2.c1)))OR(vt2.c0)), CAST(vt2.c1 AS NUMERIC), vt2.c0 COLLATE NOCASE)))  NULLS LAST LIMIT 0X1;
SELECT * FROM vt2 WHERE (CASE WHEN (- (vt2.c1)) THEN ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c1)) ELSE (vt2.c0 IN (vt2.c0)) END);
SELECT ALL * FROM vt2 WHERE (CASE WHEN (- (vt2.c1)) THEN ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c1)) ELSE (vt2.c0 IN (vt2.c0)) END) LIMIT 0x2;
SELECT * FROM vt2 WHERE (CASE WHEN (- (vt2.c1)) THEN ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c1)) ELSE (vt2.c0 IN (vt2.c0)) END);
SELECT ALL * FROM vt2 WHERE (CASE WHEN (- (vt2.c1)) THEN ((((((vt2.c1)OR(vt2.c0)))OR(vt2.c0)))AND(vt2.c1)) ELSE (vt2.c0 IN (vt2.c0)) END) LIMIT 0x2;
SELECT MIN(vt2.c0) FROM vt2 WHERE (((~ (vt2.c1)) IN ()));
SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE (((((~ (vt2.c1)) IN ()))AND(CAST(((vt2.c0)IS(vt2.c0)) AS REAL)))) ORDER BY ((1978039303)AND(vt2.c1)) COLLATE RTRIM LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE (((UPPER(DISTINCT vt2.c0))&(((NULL)*(vt2.c1))))) ORDER BY ((1978039303)AND(vt2.c1)) COLLATE RTRIM LIMIT 0x0;
SELECT MIN(vt2.c0) FROM vt2, vt0, v0 WHERE (((((((v0.c0)OR(vt2.c1)))AND(NULL)))*(((v0.c1)*(vt2.c0))))) ORDER BY ((v0.c3) NOT BETWEEN (vt2.c0) AND (vt2.c1)) COLLATE BINARY ASC  NULLS LAST, (CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN vt0.c0 THEN NULL WHEN vt2.c1 THEN NULL WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c0 ELSE vt0.c0 END IN (NULL, ((v0.c1)-(vt0.c0)))) DESC  NULLS LAST, MIN(CAST(v0.c3 AS BLOB), ((vt2.c1)>>(v0.c3)), 0.6191929265036129)  NULLS FIRST;
SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0, v0 WHERE (((((((((v0.c0)OR(vt2.c1)))AND(NULL)))*(((v0.c1)*(vt2.c0)))))AND((((('-990948752')AND(vt2.c0))) NOT NULL)))) ORDER BY v0.c0 DESC;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((((((((v0.c3)+(v0.c2)))OR(v0.c3 COLLATE RTRIM)))AND((((v0.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))))))OR(TYPEOF(DISTINCT 1797133573))))OR(((((((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))OR('955661194')))OR(v0.c0)))OR(v0.c3)))AND(v0.c0)))) WHERE ((NOT (v0.c1))) ORDER BY CASE (NOT (v0.c3))  WHEN (('-567218797') NOT NULL) THEN '㬰U}᩾' ELSE (v0.c1 IN ('7 vo~')) END, ((((((NULL)AND(v0.c3)))OR(vt0.c0)))<<(CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((((((((v0.c3)+(v0.c2)))OR(v0.c3 COLLATE RTRIM)))AND((((v0.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))))))OR(TYPEOF(DISTINCT 1797133573))))OR(((((((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))OR('955661194')))OR(v0.c0)))OR(v0.c3)))AND(v0.c0)))) WHERE ((((NOT (v0.c1)))AND(((v0.c3) BETWEEN (((0.9949859111708229) IS TRUE)) AND (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0))))))) ORDER BY ((((v0.c3) ISNULL))||(((vt2.c1)<=(v0.c0))))  NULLS LAST, 0.7768988692640539 COLLATE BINARY, ((CAST(v0.c3 AS NUMERIC)) ISNULL) INTERSECT SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((((((((v0.c3)+(v0.c2)))OR(v0.c3 COLLATE RTRIM)))AND((((v0.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))))))OR(TYPEOF(DISTINCT 1797133573))))OR(((((((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))OR('955661194')))OR(v0.c0)))OR(v0.c3)))AND(v0.c0)))) WHERE ((- (vt0.c0 COLLATE RTRIM))) ORDER BY ((((v0.c3) ISNULL))||(((vt2.c1)<=(v0.c0))))  NULLS LAST, 0.7768988692640539 COLLATE BINARY, ((CAST(v0.c3 AS NUMERIC)) ISNULL);
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((((((((v0.c3)+(v0.c2)))OR(v0.c3 COLLATE RTRIM)))AND((((v0.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))))))OR(TYPEOF(DISTINCT 1797133573))))OR(((((((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))OR('955661194')))OR(v0.c0)))OR(v0.c3)))AND(v0.c0)))) WHERE ((NOT (v0.c1))) ORDER BY CASE (NOT (v0.c3))  WHEN (('-567218797') NOT NULL) THEN '㬰U}᩾' ELSE (v0.c1 IN ('7 vo~')) END, ((((((NULL)AND(v0.c3)))OR(vt0.c0)))<<(CAST(vt2.c1 AS TEXT))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((((((((v0.c3)+(v0.c2)))OR(v0.c3 COLLATE RTRIM)))AND((((v0.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))))))OR(TYPEOF(DISTINCT 1797133573))))OR(((((((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))OR('955661194')))OR(v0.c0)))OR(v0.c3)))AND(v0.c0)))) WHERE ((((NOT (v0.c1)))AND(((v0.c3) BETWEEN (((0.9949859111708229) IS TRUE)) AND (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0))))))) ORDER BY ((((v0.c3) ISNULL))||(((vt2.c1)<=(v0.c0))))  NULLS LAST, 0.7768988692640539 COLLATE BINARY, ((CAST(v0.c3 AS NUMERIC)) ISNULL) INTERSECT SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((((((((v0.c3)+(v0.c2)))OR(v0.c3 COLLATE RTRIM)))AND((((v0.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))))))OR(TYPEOF(DISTINCT 1797133573))))OR(((((((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))OR('955661194')))OR(v0.c0)))OR(v0.c3)))AND(v0.c0)))) WHERE ((- (vt0.c0 COLLATE RTRIM))) ORDER BY ((((v0.c3) ISNULL))||(((vt2.c1)<=(v0.c0))))  NULLS LAST, 0.7768988692640539 COLLATE BINARY, ((CAST(v0.c3 AS NUMERIC)) ISNULL);
SELECT ALL * FROM vt2, v0 WHERE (((((vt2.c0)LIKE(vt2.c0))) NOT BETWEEN (((v0.c2)/(v0.c0))) AND (TRIM(v0.c2, v0.c2))));
SELECT DISTINCT * FROM vt2, v0 WHERE (((((vt2.c0)LIKE(vt2.c0))) NOT BETWEEN (((v0.c2)/(v0.c0))) AND (TRIM(v0.c2, v0.c2)))) ORDER BY ((vt2.c1 COLLATE RTRIM)/((~ (v0.c0))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (CASE WHEN (+ (v0.c0)) THEN ((vt2.c0)*(v0.c2)) END) ORDER BY ((vt2.c1 COLLATE RTRIM)/((~ (v0.c0))))  NULLS LAST;
SELECT ALL * FROM vt2, v0 WHERE (((((vt2.c0)LIKE(vt2.c0))) NOT BETWEEN (((v0.c2)/(v0.c0))) AND (TRIM(v0.c2, v0.c2))));
SELECT DISTINCT * FROM vt2, v0 WHERE (((((vt2.c0)LIKE(vt2.c0))) NOT BETWEEN (((v0.c2)/(v0.c0))) AND (TRIM(v0.c2, v0.c2)))) ORDER BY ((vt2.c1 COLLATE RTRIM)/((~ (v0.c0))))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (CASE WHEN (+ (v0.c0)) THEN ((vt2.c0)*(v0.c2)) END) ORDER BY ((vt2.c1 COLLATE RTRIM)/((~ (v0.c0))))  NULLS LAST;
SELECT MAX(v0.c0) FROM v0 WHERE (v0.c2) ORDER BY ((v0.c1)/(v0.c1)) COLLATE RTRIM;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (((v0.c2)AND(CAST((~ (v0.c1)) AS NUMERIC)))) ORDER BY ((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1))) IS TRUE)  NULLS LAST INTERSECT SELECT MAX(v0.c0) FROM v0 WHERE ((((+ (x'')))*(((v0.c2)|(v0.c1))))) ORDER BY ((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1))) IS TRUE)  NULLS LAST;
SELECT ALL * FROM vt2, v0 WHERE ((+ (((vt2.c0) ISNULL)))) ORDER BY ((((((((((v0.c1) BETWEEN (v0.c2) AND (v0.c0)))AND(((((((((v0.c2)AND(vt2.c0)))AND(v0.c1)))AND(vt2.c0)))AND(0.3312500303123882)))))AND(v0.c3)))AND(((vt2.c0)>('z')))))OR(vt2.c1))  NULLS LAST, (vt2.c1 IN (CAST(NULL AS REAL))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE ((((+ (((vt2.c0) ISNULL))))AND(((v0.c2) IS TRUE) COLLATE RTRIM))) ORDER BY ((((v0.c1) IS FALSE)) BETWEEN ((v0.c2 IN (vt2.c1))) AND (v0.c1)) ASC  NULLS LAST, CAST(vt2.c0 COLLATE NOCASE AS BLOB) DESC, (((v0.c3, v0.c0, v0.c1)) BETWEEN ((ROUND(v0.c1, v0.c0), v0.c1, x'')) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN 0.8233645805463438 THEN NULL END, ((v0.c0)GLOB(vt2.c1)), TRIM(DISTINCT v0.c1, v0.c0)))) DESC LIMIT 1;
SELECT ALL * FROM vt2, v0 WHERE ((+ (((vt2.c0) ISNULL)))) ORDER BY ((((((((((v0.c1) BETWEEN (v0.c2) AND (v0.c0)))AND(((((((((v0.c2)AND(vt2.c0)))AND(v0.c1)))AND(vt2.c0)))AND(0.3312500303123882)))))AND(v0.c3)))AND(((vt2.c0)>('z')))))OR(vt2.c1))  NULLS LAST, (vt2.c1 IN (CAST(NULL AS REAL))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE ((((+ (((vt2.c0) ISNULL))))AND(((v0.c2) IS TRUE) COLLATE RTRIM))) ORDER BY ((((v0.c1) IS FALSE)) BETWEEN ((v0.c2 IN (vt2.c1))) AND (v0.c1)) ASC  NULLS LAST, CAST(vt2.c0 COLLATE NOCASE AS BLOB) DESC, (((v0.c3, v0.c0, v0.c1)) BETWEEN ((ROUND(v0.c1, v0.c0), v0.c1, x'')) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN 0.8233645805463438 THEN NULL END, ((v0.c0)GLOB(vt2.c1)), TRIM(DISTINCT v0.c1, v0.c0)))) DESC LIMIT 1;
SELECT ALL MIN(vt2.c0) FROM vt0, vt2 WHERE ((((~ (vt2.c1))) NOTNULL));
SELECT ALL MIN(vt2.c0) FROM vt0, vt2 WHERE ((((((~ (vt2.c1))) NOTNULL))AND(CAST((vt0.c0 IN (vt0.c0, vt2.c0)) AS INTEGER)))) ORDER BY ((((((CAST(vt0.c0 AS BLOB))AND(CAST(vt2.c1 AS INTEGER))))AND(((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1)))))OR(((((((vt2.c0)AND(vt2.c1)))OR(vt2.c0)))AND(vt0.c0))))  NULLS LAST, (((x'', vt0.c0, vt2.c1, vt2.c1)) BETWEEN ((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 END, CAST(vt0.c0 AS TEXT), '-610673233', ((vt2.c1) ISNULL))) AND ((load_extension(vt2.c1, vt0.c0), (('6juW') IS TRUE), (((vt2.c1, vt2.c1))=((0Xffffffffb87809f9, vt0.c0))), 0.47814013367692887)))  NULLS LAST, ((- (vt2.c0)) IN (((vt0.c0) NOTNULL))) LIMIT 3;
SELECT MIN(v0.c0) FROM v0, vt2 WHERE (((x'3db8')/(CAST(v0.c3 AS BLOB))));
SELECT DISTINCT MIN(v0.c0) FROM v0, vt2 WHERE (((((x'3db8')/(CAST(v0.c3 AS BLOB))))AND(((vt2.c1)IS NOT(v0.c0)) COLLATE RTRIM))) ORDER BY (+ (((v0.c2) IS TRUE))) ASC  NULLS LAST, ((('*', ((((vt2.c0)AND(vt2.c1)))OR(vt2.c1))))>((v0.c0, CAST(v0.c1 AS INTEGER)))), 0.3259684389010796 DESC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0, vt2 WHERE (((((((vt2.c0, vt2.c1, v0.c3)) BETWEEN ((v0.c3, v0.c0, v0.c2)) AND ((v0.c0, v0.c1, vt2.c0))), ((v0.c1) BETWEEN (v0.c0) AND (v0.c0))))<((CAST(vt2.c1 AS INTEGER), (v0.c1 IN (vt2.c0, v0.c2)))))) ORDER BY (+ (((v0.c2) IS TRUE))) ASC  NULLS LAST, ((('*', ((((vt2.c0)AND(vt2.c1)))OR(vt2.c1))))>((v0.c0, CAST(v0.c1 AS INTEGER)))), 0.3259684389010796 DESC  NULLS LAST LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND ((vt0.c0 IN ()))));
SELECT COUNT(*) FROM vt0 WHERE (((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND ((vt0.c0 IN ()))))AND(0.7619736689639844))) ORDER BY (((CAST(vt0.c0 AS TEXT), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c0)+(vt0.c0))))<((((vt0.c0)<(vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)), ((x'')!=(vt0.c0))))) ASC  NULLS LAST, CASE vt0.c0  WHEN ((vt0.c0)!=(vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN ('296991373' IN ()) WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)+(vt0.c0)) WHEN ((vt0.c0)==(vt0.c0)) THEN 0Xffffffffee7721f5 WHEN vt0.c0 COLLATE NOCASE THEN (~ (vt0.c0)) WHEN (NOT (vt0.c0)) THEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) ELSE CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END  NULLS FIRST, 0Xffffffff99551f50 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE RTRIM) ORDER BY (((CAST(vt0.c0 AS TEXT), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c0)+(vt0.c0))))<((((vt0.c0)<(vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)), ((x'')!=(vt0.c0))))) ASC  NULLS LAST, CASE vt0.c0  WHEN ((vt0.c0)!=(vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN CAST(vt0.c0 AS BLOB) THEN ('296991373' IN ()) WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)+(vt0.c0)) WHEN ((vt0.c0)==(vt0.c0)) THEN 0xffffffffee7721f5 WHEN vt0.c0 COLLATE NOCASE THEN (~ (vt0.c0)) WHEN (NOT (vt0.c0)) THEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) ELSE CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END  NULLS FIRST, -1722474672;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((CASE vt0.c0  WHEN x'36b9' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))<=((vt0.c0))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((CASE vt0.c0  WHEN x'36b9' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))<((vt0.c0)))) ORDER BY 0Xffffffff9a444fb9  NULLS FIRST, (((vt0.c0, vt0.c0)) NOT BETWEEN (((((vt0.c0, vt0.c0)) NOT BETWEEN ((0.6617000351529201, vt0.c0)) AND ((NULL, vt0.c0))), TYPEOF(vt0.c0))) AND ((vt0.c0, x''))) INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((vt0.c0 COLLATE NOCASE IN ())) ORDER BY 0xffffffff9a444fb9  NULLS FIRST, (((vt0.c0, vt0.c0)) NOT BETWEEN (((((vt0.c0, vt0.c0)) NOT BETWEEN ((0.6617000351529201, vt0.c0)) AND ((NULL, vt0.c0))), TYPEOF(vt0.c0))) AND ((vt0.c0, x'')));
SELECT ALL * FROM vt2 WHERE (((((((vt2.c0 COLLATE BINARY)OR(((vt2.c0)|(vt2.c1)))))OR((+ (vt2.c1)))))AND(((((((((vt2.c0)OR(x'')))AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1))))) ORDER BY ((((LOWER(vt2.c1))OR((NOT (vt2.c1)))))OR(CAST(vt2.c0 AS NUMERIC))) DESC, ((vt2.c0 COLLATE BINARY)>(vt2.c1));
SELECT ALL * FROM vt2 WHERE (((((((vt2.c0 COLLATE BINARY)OR(((vt2.c0)|(vt2.c1)))))OR((+ (vt2.c1)))))AND(((((((((vt2.c0)OR(x'')))AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1))))) ORDER BY ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) COLLATE NOCASE, (((((((('V') NOT NULL))OR((('0.35576372066017514') NOTNULL))))OR(json_insert(vt2.c1, vt2.c0, vt2.c1, '-734232506', vt2.c0))))OR(vt2.c1 COLLATE BINARY)) ASC;
SELECT ALL * FROM vt2 WHERE (((((((vt2.c0 COLLATE BINARY)OR(((vt2.c0)|(vt2.c1)))))OR((+ (vt2.c1)))))AND(((((((((vt2.c0)OR(x'')))AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1))))) ORDER BY ((((LOWER(vt2.c1))OR((NOT (vt2.c1)))))OR(CAST(vt2.c0 AS NUMERIC))) DESC, ((vt2.c0 COLLATE BINARY)>(vt2.c1));
SELECT ALL * FROM vt2 WHERE (((((((vt2.c0 COLLATE BINARY)OR(((vt2.c0)|(vt2.c1)))))OR((+ (vt2.c1)))))AND(((((((((vt2.c0)OR(x'')))AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1))))) ORDER BY ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) COLLATE NOCASE, (((((((('V') NOT NULL))OR((('0.35576372066017514') NOTNULL))))OR(json_insert(vt2.c1, vt2.c0, vt2.c1, '-734232506', vt2.c0))))OR(vt2.c1 COLLATE BINARY)) ASC;
SELECT MAX(vt0.c0) FROM vt0, v0, vt2 WHERE ((((vt0.c0 IN ()))+(v0.c2))) ORDER BY v0.c0 COLLATE BINARY ASC  NULLS FIRST, (((((((((vt2.c0)AND(vt0.c0)))AND(v0.c2)))OR(v0.c0)), CASE v0.c0  WHEN vt0.c0 THEN '-1468862807' END))>=((((v0.c0)OR(NULL)), CASE WHEN vt0.c0 THEN vt2.c0 END))) ASC, ((v0.c1 COLLATE BINARY)*((v0.c1 IN (vt2.c1)))) ASC;
SELECT DISTINCT MAX(vt0.c0) FROM vt0, v0, vt2 WHERE ((((((vt0.c0 IN ()))+(v0.c2)))AND(((x'8c')GLOB((NOT (vt0.c0))))))) ORDER BY v0.c1 ASC LIMIT 0x0;
SELECT ALL * FROM vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))==(((vt0.c0)OR(vt2.c0)))));
SELECT * FROM vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))==(((vt0.c0)OR(vt2.c0))))) ORDER BY CASE CAST(vt2.c1 AS INTEGER)  WHEN (((vt0.c0, '-574332796', 0.8047222496231029)) NOT BETWEEN ((vt2.c0, vt2.c0, vt2.c0)) AND ((vt2.c1, vt2.c1, vt0.c0))) THEN ((vt2.c1) NOT NULL) END  NULLS FIRST, ABS(CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c1 END) DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt2, vt0 WHERE ('1360437288') ORDER BY CASE CAST(vt2.c1 AS INTEGER)  WHEN (((vt0.c0, '-574332796', 0.8047222496231029)) NOT BETWEEN ((vt2.c0, vt2.c0, vt2.c0)) AND ((vt2.c1, vt2.c1, vt0.c0))) THEN ((vt2.c1) NOT NULL) END  NULLS FIRST, ABS(CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c1 END) DESC  NULLS LAST;
SELECT ALL * FROM vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))==(((vt0.c0)OR(vt2.c0)))));
SELECT * FROM vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)))==(((vt0.c0)OR(vt2.c0))))) ORDER BY CASE CAST(vt2.c1 AS INTEGER)  WHEN (((vt0.c0, '-574332796', 0.8047222496231029)) NOT BETWEEN ((vt2.c0, vt2.c0, vt2.c0)) AND ((vt2.c1, vt2.c1, vt0.c0))) THEN ((vt2.c1) NOT NULL) END  NULLS FIRST, ABS(CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c1 END) DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt2, vt0 WHERE ('1360437288') ORDER BY CASE CAST(vt2.c1 AS INTEGER)  WHEN (((vt0.c0, '-574332796', 0.8047222496231029)) NOT BETWEEN ((vt2.c0, vt2.c0, vt2.c0)) AND ((vt2.c1, vt2.c1, vt0.c0))) THEN ((vt2.c1) NOT NULL) END  NULLS FIRST, ABS(CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c1 END) DESC  NULLS LAST;
SELECT * FROM vt0, v0 WHERE (((((vt0.c0)+(vt0.c0))) BETWEEN (((vt0.c0)>=(vt0.c0))) AND (((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3))))) ORDER BY CASE WHEN vt0.c0 THEN ((v0.c3)==(vt0.c0)) WHEN ((0X37a465b6) IS FALSE) THEN UNLIKELY(v0.c1) END DESC  NULLS LAST, v0.c1 COLLATE NOCASE  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE (((((((vt0.c0)+(vt0.c0))) BETWEEN (((vt0.c0)>=(vt0.c0))) AND (((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)))))AND(v0.c1))) ORDER BY CASE WHEN vt0.c0 THEN ((v0.c3)=(vt0.c0)) WHEN ((933520822) IS FALSE) THEN UNLIKELY(v0.c1) END DESC  NULLS LAST, v0.c1 COLLATE NOCASE  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (v0.c3) ORDER BY CASE WHEN vt0.c0 THEN ((v0.c3)=(vt0.c0)) WHEN ((933520822) IS FALSE) THEN UNLIKELY(v0.c1) END DESC  NULLS LAST, v0.c1 COLLATE NOCASE  NULLS FIRST LIMIT 2;
SELECT * FROM vt0, v0 WHERE (((((vt0.c0)+(vt0.c0))) BETWEEN (((vt0.c0)>=(vt0.c0))) AND (((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3))))) ORDER BY CASE WHEN vt0.c0 THEN ((v0.c3)==(vt0.c0)) WHEN ((0X37a465b6) IS FALSE) THEN UNLIKELY(v0.c1) END DESC  NULLS LAST, v0.c1 COLLATE NOCASE  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE (((((((vt0.c0)+(vt0.c0))) BETWEEN (((vt0.c0)>=(vt0.c0))) AND (((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)))))AND(v0.c1))) ORDER BY CASE WHEN vt0.c0 THEN ((v0.c3)=(vt0.c0)) WHEN ((933520822) IS FALSE) THEN UNLIKELY(v0.c1) END DESC  NULLS LAST, v0.c1 COLLATE NOCASE  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (v0.c3) ORDER BY CASE WHEN vt0.c0 THEN ((v0.c3)=(vt0.c0)) WHEN ((933520822) IS FALSE) THEN UNLIKELY(v0.c1) END DESC  NULLS LAST, v0.c1 COLLATE NOCASE  NULLS FIRST LIMIT 2;
SELECT ALL * FROM v0 WHERE (((NULL)/(CASE WHEN v0.c3 THEN 'NaN' WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN x'' ELSE v0.c3 END)));
SELECT DISTINCT * FROM v0 NOT INDEXED WHERE (((((NULL)/(CASE WHEN v0.c3 THEN 'NaN' WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN x'' ELSE v0.c3 END)))AND(((((v0.c0) IS TRUE))!=(v0.c3))))) ORDER BY (((NULL, v0.c1)) NOT BETWEEN (((((v0.c0, v0.c2))<=((v0.c2, v0.c1))), v0.c3 COLLATE RTRIM)) AND ((json_array_length(v0.c1), CAST(v0.c2 AS TEXT)))) DESC  NULLS FIRST, ((CAST(v0.c2 AS INTEGER)) IS TRUE) DESC INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c2)) NOT BETWEEN ((ABS(DISTINCT v0.c2))) AND ((CAST(v0.c2 AS BLOB))))) ORDER BY (((NULL, v0.c1)) NOT BETWEEN (((((v0.c0, v0.c2))<=((v0.c2, v0.c1))), v0.c3 COLLATE RTRIM)) AND ((json_array_length(v0.c1), CAST(v0.c2 AS TEXT)))) DESC  NULLS FIRST, ((CAST(v0.c2 AS INTEGER)) IS TRUE) DESC;
SELECT ALL * FROM v0 WHERE (((NULL)/(CASE WHEN v0.c3 THEN 'NaN' WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN x'' ELSE v0.c3 END)));
SELECT DISTINCT * FROM v0 NOT INDEXED WHERE (((((NULL)/(CASE WHEN v0.c3 THEN 'NaN' WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN x'' ELSE v0.c3 END)))AND(((((v0.c0) IS TRUE))!=(v0.c3))))) ORDER BY (((NULL, v0.c1)) NOT BETWEEN (((((v0.c0, v0.c2))<=((v0.c2, v0.c1))), v0.c3 COLLATE RTRIM)) AND ((json_array_length(v0.c1), CAST(v0.c2 AS TEXT)))) DESC  NULLS FIRST, ((CAST(v0.c2 AS INTEGER)) IS TRUE) DESC INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((v0.c2)) NOT BETWEEN ((ABS(DISTINCT v0.c2))) AND ((CAST(v0.c2 AS BLOB))))) ORDER BY (((NULL, v0.c1)) NOT BETWEEN (((((v0.c0, v0.c2))<=((v0.c2, v0.c1))), v0.c3 COLLATE RTRIM)) AND ((json_array_length(v0.c1), CAST(v0.c2 AS TEXT)))) DESC  NULLS FIRST, ((CAST(v0.c2 AS INTEGER)) IS TRUE) DESC;
SELECT ALL * FROM vt0 WHERE ((+ (CAST(9.8818379E7 AS NUMERIC))));
SELECT DISTINCT * FROM vt0 WHERE ((((+ (CAST(9.8818379E7 AS NUMERIC))))AND(-1.57240298E8))) LIMIT 2;
SELECT ALL * FROM vt0 WHERE ((+ (CAST(9.8818379E7 AS NUMERIC))));
SELECT DISTINCT * FROM vt0 WHERE ((((+ (CAST(9.8818379E7 AS NUMERIC))))AND(-1.57240298E8))) LIMIT 2;
SELECT * FROM vt2 WHERE (0.2554336232298333) ORDER BY ((((vt2.c0) ISNULL))&(vt2.c0 COLLATE NOCASE))  NULLS FIRST, (CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END IN (((vt2.c1) NOTNULL), ((NULL) BETWEEN (vt2.c0) AND (vt2.c1))))  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (((0.2554336232298333)AND(((((((((((vt2.c0)AND(vt2.c1)))AND('')))OR(vt2.c1)))AND(vt2.c0)))AND('1284633581')) COLLATE RTRIM))) ORDER BY (((vt2.c1, vt2.c1, x'7c', vt2.c0, vt2.c1)) NOT BETWEEN ((((vt2.c0) IS FALSE), UNLIKELY(vt2.c1), (vt2.c0 IN ()), ((vt2.c0) ISNULL), '708305761')) AND ((((vt2.c0)<(vt2.c0)), JULIANDAY('-506705295', vt2.c1, vt2.c0, vt2.c1, vt2.c0), CAST(vt2.c0 AS BLOB), vt2.c0, CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))), CAST(vt2.c0 COLLATE BINARY AS BLOB) ASC LIMIT 2;
SELECT * FROM vt2 WHERE (0.2554336232298333) ORDER BY ((((vt2.c0) ISNULL))&(vt2.c0 COLLATE NOCASE))  NULLS FIRST, (CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END IN (((vt2.c1) NOTNULL), ((NULL) BETWEEN (vt2.c0) AND (vt2.c1))))  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (((0.2554336232298333)AND(((((((((((vt2.c0)AND(vt2.c1)))AND('')))OR(vt2.c1)))AND(vt2.c0)))AND('1284633581')) COLLATE RTRIM))) ORDER BY (((vt2.c1, vt2.c1, x'7c', vt2.c0, vt2.c1)) NOT BETWEEN ((((vt2.c0) IS FALSE), UNLIKELY(vt2.c1), (vt2.c0 IN ()), ((vt2.c0) ISNULL), '708305761')) AND ((((vt2.c0)<(vt2.c0)), JULIANDAY('-506705295', vt2.c1, vt2.c0, vt2.c1, vt2.c0), CAST(vt2.c0 AS BLOB), vt2.c0, CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))), CAST(vt2.c0 COLLATE BINARY AS BLOB) ASC LIMIT 2;
SELECT ALL * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN 0.6042858325846763 THEN CASE vt2.c1  WHEN v0.c2 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END WHEN (NOT (vt0.c0)) THEN ((vt0.c0)>=(v0.c0)) WHEN (v0.c2 IN ('᩾s')) THEN CAST(v0.c1 AS INTEGER) WHEN (((vt2.c0))=((''))) THEN x'c0f3' END WHERE (((((((v0.c0 COLLATE BINARY)AND(((vt0.c0) BETWEEN (v0.c1) AND (v0.c2)))))OR(NULL)))AND(((((((((((v0.c2)OR(vt2.c1)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c3)))AND(vt2.c0))))) ORDER BY vt0.c0, ((((((((((((0.9137033410267302)<=(vt2.c1)))AND(((v0.c2) BETWEEN (0.8776409599944478) AND (vt2.c1)))))OR((NOT (v0.c2)))))AND(COALESCE(v0.c2, vt2.c1, vt0.c0, -1608781969))))OR(((v0.c3)<>(v0.c2)))))AND(((vt0.c0)IS(v0.c1))));
SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN 0.6042858325846763 THEN CASE vt2.c1  WHEN v0.c2 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END WHEN (NOT (vt0.c0)) THEN ((vt0.c0)>=(v0.c0)) WHEN (v0.c2 IN ('᩾s')) THEN CAST(v0.c1 AS INTEGER) WHEN (((vt2.c0))=((''))) THEN x'c0f3' END WHERE (((((((v0.c0 COLLATE BINARY)AND(((vt0.c0) BETWEEN (v0.c1) AND (v0.c2)))))OR(NULL)))AND(((((((((((v0.c2)OR(vt2.c1)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c3)))AND(vt2.c0))))) ORDER BY vt0.c0, ((((((((((((0.9137033410267302)<=(vt2.c1)))AND(((v0.c2) BETWEEN (0.8776409599944478) AND (vt2.c1)))))OR((NOT (v0.c2)))))AND(COALESCE(v0.c2, vt2.c1, vt0.c0, 0Xffffffffa01bef6f))))OR(((v0.c3)<>(v0.c2)))))AND(((vt0.c0)IS(v0.c1)))) INTERSECT SELECT ALL * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN 0.6042858325846763 THEN CASE vt2.c1  WHEN v0.c2 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END WHEN (NOT (vt0.c0)) THEN ((vt0.c0)>=(v0.c0)) WHEN (v0.c2 IN ('᩾s')) THEN CAST(v0.c1 AS INTEGER) WHEN (((vt2.c0))=((''))) THEN x'c0f3' END WHERE (((((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0))) NOT NULL)) ORDER BY vt0.c0, ((((((((((((0.9137033410267302)<=(vt2.c1)))AND(((v0.c2) BETWEEN (0.8776409599944478) AND (vt2.c1)))))OR((NOT (v0.c2)))))AND(COALESCE(v0.c2, vt2.c1, vt0.c0, 0xffffffffa01bef6f))))OR(((v0.c3)!=(v0.c2)))))AND(((vt0.c0)IS(v0.c1))));
SELECT ALL * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN 0.6042858325846763 THEN CASE vt2.c1  WHEN v0.c2 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END WHEN (NOT (vt0.c0)) THEN ((vt0.c0)>=(v0.c0)) WHEN (v0.c2 IN ('᩾s')) THEN CAST(v0.c1 AS INTEGER) WHEN (((vt2.c0))=((''))) THEN x'c0f3' END WHERE (((((((v0.c0 COLLATE BINARY)AND(((vt0.c0) BETWEEN (v0.c1) AND (v0.c2)))))OR(NULL)))AND(((((((((((v0.c2)OR(vt2.c1)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c3)))AND(vt2.c0))))) ORDER BY vt0.c0, ((((((((((((0.9137033410267302)<=(vt2.c1)))AND(((v0.c2) BETWEEN (0.8776409599944478) AND (vt2.c1)))))OR((NOT (v0.c2)))))AND(COALESCE(v0.c2, vt2.c1, vt0.c0, -1608781969))))OR(((v0.c3)<>(v0.c2)))))AND(((vt0.c0)IS(v0.c1))));
SELECT * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN 0.6042858325846763 THEN CASE vt2.c1  WHEN v0.c2 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END WHEN (NOT (vt0.c0)) THEN ((vt0.c0)>=(v0.c0)) WHEN (v0.c2 IN ('᩾s')) THEN CAST(v0.c1 AS INTEGER) WHEN (((vt2.c0))=((''))) THEN x'c0f3' END WHERE (((((((v0.c0 COLLATE BINARY)AND(((vt0.c0) BETWEEN (v0.c1) AND (v0.c2)))))OR(NULL)))AND(((((((((((v0.c2)OR(vt2.c1)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c3)))AND(vt2.c0))))) ORDER BY vt0.c0, ((((((((((((0.9137033410267302)<=(vt2.c1)))AND(((v0.c2) BETWEEN (0.8776409599944478) AND (vt2.c1)))))OR((NOT (v0.c2)))))AND(COALESCE(v0.c2, vt2.c1, vt0.c0, 0Xffffffffa01bef6f))))OR(((v0.c3)<>(v0.c2)))))AND(((vt0.c0)IS(v0.c1)))) INTERSECT SELECT ALL * FROM vt2, vt0 LEFT OUTER JOIN v0 ON CASE WHEN 0.6042858325846763 THEN CASE vt2.c1  WHEN v0.c2 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c0 END WHEN (NOT (vt0.c0)) THEN ((vt0.c0)>=(v0.c0)) WHEN (v0.c2 IN ('᩾s')) THEN CAST(v0.c1 AS INTEGER) WHEN (((vt2.c0))=((''))) THEN x'c0f3' END WHERE (((((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0))) NOT NULL)) ORDER BY vt0.c0, ((((((((((((0.9137033410267302)<=(vt2.c1)))AND(((v0.c2) BETWEEN (0.8776409599944478) AND (vt2.c1)))))OR((NOT (v0.c2)))))AND(COALESCE(v0.c2, vt2.c1, vt0.c0, 0xffffffffa01bef6f))))OR(((v0.c3)!=(v0.c2)))))AND(((vt0.c0)IS(v0.c1))));
SELECT ALL * FROM v0, vt2, vt0 WHERE (v0.c0) ORDER BY (((vt2.c1)) BETWEEN ((v0.c1)) AND (((- (v0.c0))))), (((NULL IN (v0.c0)))||(((((((((v0.c3)OR(v0.c0)))AND(0X2f25b890)))OR(v0.c3)))AND(v0.c1)))) ASC, CAST(v0.c1 AS NUMERIC)  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((v0.c0)AND((((v0.c0, v0.c1, vt2.c1, v0.c1, v0.c0)) NOT BETWEEN (((v0.c0 IN (v0.c3)), (~ (vt0.c0)), v0.c1, ((v0.c1) IS TRUE), (vt2.c1 IN ()))) AND ((((v0.c0) NOT NULL), (((v0.c0))=((vt0.c0))), x'ee7f', CASE vt0.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 END, (~ (v0.c0)))))))) ORDER BY ((((v0.c3) NOTNULL)) IS FALSE), ((v0.c2) BETWEEN (v0.c1) AND (v0.c1)) COLLATE RTRIM DESC, CASE vt2.c0 COLLATE NOCASE  WHEN ((v0.c2)&(vt0.c0)) THEN ((vt2.c1)IS NOT(vt0.c0)) WHEN vt2.c1 COLLATE NOCASE THEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) ELSE (+ (v0.c3)) END DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt2, vt0 WHERE (v0.c0) ORDER BY (((vt2.c1)) BETWEEN ((v0.c1)) AND (((- (v0.c0))))), (((NULL IN (v0.c0)))||(((((((((v0.c3)OR(v0.c0)))AND(0X2f25b890)))OR(v0.c3)))AND(v0.c1)))) ASC, CAST(v0.c1 AS NUMERIC)  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((v0.c0)AND((((v0.c0, v0.c1, vt2.c1, v0.c1, v0.c0)) NOT BETWEEN (((v0.c0 IN (v0.c3)), (~ (vt0.c0)), v0.c1, ((v0.c1) IS TRUE), (vt2.c1 IN ()))) AND ((((v0.c0) NOT NULL), (((v0.c0))=((vt0.c0))), x'ee7f', CASE vt0.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 END, (~ (v0.c0)))))))) ORDER BY ((((v0.c3) NOTNULL)) IS FALSE), ((v0.c2) BETWEEN (v0.c1) AND (v0.c1)) COLLATE RTRIM DESC, CASE vt2.c0 COLLATE NOCASE  WHEN ((v0.c2)&(vt0.c0)) THEN ((vt2.c1)IS NOT(vt0.c0)) WHEN vt2.c1 COLLATE NOCASE THEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) ELSE (+ (v0.c3)) END DESC  NULLS FIRST LIMIT 0;
SELECT * FROM v0, vt2 WHERE (0.706289234976422) ORDER BY CAST(CAST(v0.c2 AS BLOB) AS NUMERIC)  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE (0.706289234976422) ORDER BY NULLIF(DISTINCT (vt2.c0 IN ()), ((v0.c2)/(NULL)))  NULLS LAST, v0.c3 DESC LIMIT 0x2 INTERSECT SELECT ALL * FROM v0, vt2 WHERE (((vt2.c1) BETWEEN (v0.c3) AND (vt2.c0)) COLLATE BINARY) ORDER BY NULLIF(DISTINCT (vt2.c0 IN ()), ((v0.c2)/(NULL)))  NULLS LAST, v0.c3 DESC LIMIT 2;
SELECT * FROM v0, vt2 WHERE (0.706289234976422) ORDER BY CAST(CAST(v0.c2 AS BLOB) AS NUMERIC)  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE (0.706289234976422) ORDER BY NULLIF(DISTINCT (vt2.c0 IN ()), ((v0.c2)/(NULL)))  NULLS LAST, v0.c3 DESC LIMIT 0x2 INTERSECT SELECT ALL * FROM v0, vt2 WHERE (((vt2.c1) BETWEEN (v0.c3) AND (vt2.c0)) COLLATE BINARY) ORDER BY NULLIF(DISTINCT (vt2.c0 IN ()), ((v0.c2)/(NULL)))  NULLS LAST, v0.c3 DESC LIMIT 2;
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (CASE vt2.c1  WHEN ((0xffffffffaed1a1b6)+(vt2.c0)) THEN x'29' WHEN '-1282635533' THEN ((vt2.c1)%(vt0.c0)) WHEN HEX(DISTINCT vt0.c0) THEN ((((vt2.c0)OR('1244854158')))AND(vt2.c0)) WHEN (NOT (vt2.c0)) THEN CAST(vt0.c0 AS TEXT) END);
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (CASE vt2.c1  WHEN ((-1361993290)+(vt2.c0)) THEN x'29' WHEN '-1282635533' THEN ((vt2.c1)%(vt0.c0)) WHEN HEX(DISTINCT vt0.c0) THEN ((((vt2.c0)OR('1244854158')))AND(vt2.c0)) WHEN (NOT (vt2.c0)) THEN CAST(vt0.c0 AS TEXT) END) ORDER BY vt2.c1 DESC, (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt0.c0 END IN (((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt0 INNER JOIN vt2 ON ((CAST(vt0.c0 AS TEXT)) NOT BETWEEN ((v0.c0 IN (v0.c3))) AND (((v0.c3)&(v0.c3)))) WHERE (CASE ((((((((vt2.c1)AND(vt2.c0)))OR(v0.c3)))OR(v0.c0)))AND(vt2.c1))  WHEN (((vt2.c1)) BETWEEN ((NULL)) AND ((vt2.c1))) THEN (((0xffffffffc8893ca4))>=((vt0.c0))) END) ORDER BY ((v0.c0) NOT NULL) ASC, ((((v0.c3) ISNULL))+((+ (vt0.c0)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0 INNER JOIN vt2 ON ((CAST(vt0.c0 AS TEXT)) NOT BETWEEN ((v0.c0 IN (v0.c3))) AND (((v0.c3)&(v0.c3)))) WHERE (CASE ((((((((vt2.c1)AND(vt2.c0)))OR(v0.c3)))OR(v0.c0)))AND(vt2.c1))  WHEN (((vt2.c1)) BETWEEN ((NULL)) AND ((vt2.c1))) THEN (((0xffffffffc8893ca4))>=((vt0.c0))) END) ORDER BY ((CASE v0.c1  WHEN vt2.c1 THEN vt2.c0 WHEN vt0.c0 THEN v0.c0 ELSE v0.c2 END)<=(((v0.c3)/('0.9025381487157186')))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 INNER JOIN vt2 ON ((CAST(vt0.c0 AS TEXT)) NOT BETWEEN ((v0.c0 IN (v0.c3))) AND (((v0.c3)&(v0.c3)))) WHERE (CASE ((((((((vt2.c1)AND(vt2.c0)))OR(v0.c3)))OR(v0.c0)))AND(vt2.c1))  WHEN (((vt2.c1)) BETWEEN ((NULL)) AND ((vt2.c1))) THEN (((0xffffffffc8893ca4))>=((vt0.c0))) END) ORDER BY ((v0.c0) NOT NULL) ASC, ((((v0.c3) ISNULL))+((+ (vt0.c0)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0 INNER JOIN vt2 ON ((CAST(vt0.c0 AS TEXT)) NOT BETWEEN ((v0.c0 IN (v0.c3))) AND (((v0.c3)&(v0.c3)))) WHERE (CASE ((((((((vt2.c1)AND(vt2.c0)))OR(v0.c3)))OR(v0.c0)))AND(vt2.c1))  WHEN (((vt2.c1)) BETWEEN ((NULL)) AND ((vt2.c1))) THEN (((0xffffffffc8893ca4))>=((vt0.c0))) END) ORDER BY ((CASE v0.c1  WHEN vt2.c1 THEN vt2.c0 WHEN vt0.c0 THEN v0.c0 ELSE v0.c2 END)<=(((v0.c3)/('0.9025381487157186')))) DESC  NULLS FIRST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (CASE WHEN ((((((vt0.c0)OR(vt0.c0)))OR(vt2.c1)))OR('AUҢ[GH4')) THEN (+ (vt0.c0)) ELSE v0.c1 COLLATE RTRIM END);
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (CASE WHEN ((((((vt0.c0)OR(vt0.c0)))OR(vt2.c1)))OR('AUҢ[GH4')) THEN (+ (vt0.c0)) ELSE v0.c1 COLLATE RTRIM END) INTERSECT SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (DATE(CASE v0.c1  WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN x'4af2dc' THEN v0.c3 END, ((vt2.c1) NOT NULL), CAST(vt0.c0 AS NUMERIC), ((((v0.c0)AND(vt2.c0)))OR(v0.c3)), ((((((((v0.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt0.c0)))AND(v0.c0))));
SELECT ALL * FROM vt2, v0, vt0 WHERE (CASE WHEN ((((((vt0.c0)OR(vt0.c0)))OR(vt2.c1)))OR('AUҢ[GH4')) THEN (+ (vt0.c0)) ELSE v0.c1 COLLATE RTRIM END);
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (CASE WHEN ((((((vt0.c0)OR(vt0.c0)))OR(vt2.c1)))OR('AUҢ[GH4')) THEN (+ (vt0.c0)) ELSE v0.c1 COLLATE RTRIM END) INTERSECT SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (DATE(CASE v0.c1  WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN x'4af2dc' THEN v0.c3 END, ((vt2.c1) NOT NULL), CAST(vt0.c0 AS NUMERIC), ((((v0.c0)AND(vt2.c0)))OR(v0.c3)), ((((((((v0.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt0.c0)))AND(v0.c0))));
SELECT COUNT(*) FROM vt2 WHERE ((+ (vt2.c1)) COLLATE NOCASE);
SELECT DISTINCT COUNT(*) FROM vt2 WHERE ((((+ (vt2.c1)) COLLATE NOCASE)AND(vt2.c0))) ORDER BY (((((((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))OR(0xffffffffe67d9ba0)) IN (LIKELY(DISTINCT vt2.c0))) ASC  NULLS LAST, TYPEOF(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))) DESC  NULLS LAST LIMIT 1;
SELECT * FROM vt2 WHERE (((CASE WHEN vt2.c0 THEN vt2.c0 WHEN 'd5l' THEN vt2.c1 END)LIKE(CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END)));
SELECT DISTINCT * FROM vt2 WHERE (((CASE WHEN vt2.c0 THEN vt2.c0 WHEN 'd5l' THEN vt2.c1 END)LIKE(CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END)));
SELECT * FROM vt2 WHERE (((CASE WHEN vt2.c0 THEN vt2.c0 WHEN 'd5l' THEN vt2.c1 END)LIKE(CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END)));
SELECT DISTINCT * FROM vt2 WHERE (((CASE WHEN vt2.c0 THEN vt2.c0 WHEN 'd5l' THEN vt2.c1 END)LIKE(CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END)));
SELECT ALL * FROM v0, vt0 WHERE ((~ (((v0.c1) IS FALSE)))) ORDER BY '' ASC;
SELECT * FROM v0, vt0 WHERE ((((~ (((v0.c1) IS FALSE))))AND(CAST(((v0.c2) BETWEEN (v0.c2) AND (vt0.c0)) AS NUMERIC)))) ORDER BY '' ASC;
SELECT ALL * FROM v0, vt0 WHERE ((~ (((v0.c1) IS FALSE)))) ORDER BY '' ASC;
SELECT * FROM v0, vt0 WHERE ((((~ (((v0.c1) IS FALSE))))AND(CAST(((v0.c2) BETWEEN (v0.c2) AND (vt0.c0)) AS NUMERIC)))) ORDER BY '' ASC;
SELECT ALL * FROM vt0, vt2 WHERE (((((((((((((vt2.c0) NOT NULL))AND(((vt2.c0)|(vt2.c0)))))OR(((vt2.c1) NOTNULL))))AND(((vt2.c1)+(vt0.c0)))))AND(HEX(DISTINCT vt0.c0))))AND('2108053427'))) ORDER BY CAST((((vt0.c0, vt2.c1, vt2.c0))>((vt2.c0, vt2.c1, vt0.c0))) AS BLOB), ((vt2.c1)-(vt0.c0)) COLLATE RTRIM DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((((((((((vt2.c0) NOT NULL))AND(((vt2.c0)|(vt2.c0)))))OR(((vt2.c1) NOTNULL))))AND(((vt2.c1)+(vt0.c0)))))AND(HEX(DISTINCT vt0.c0))))AND('2108053427'))) ORDER BY CAST((((vt0.c0, vt2.c1, vt2.c0))>((vt2.c0, vt2.c1, vt0.c0))) AS BLOB), ((vt2.c1)-(vt0.c0)) COLLATE RTRIM DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE ('\') ORDER BY CAST((((vt0.c0, vt2.c1, vt2.c0))>((vt2.c0, vt2.c1, vt0.c0))) AS BLOB), ((vt2.c1)-(vt0.c0)) COLLATE RTRIM DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0, vt2 WHERE (((((((((((((vt2.c0) NOT NULL))AND(((vt2.c0)|(vt2.c0)))))OR(((vt2.c1) NOTNULL))))AND(((vt2.c1)+(vt0.c0)))))AND(HEX(DISTINCT vt0.c0))))AND('2108053427'))) ORDER BY CAST((((vt0.c0, vt2.c1, vt2.c0))>((vt2.c0, vt2.c1, vt0.c0))) AS BLOB), ((vt2.c1)-(vt0.c0)) COLLATE RTRIM DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((((((((((vt2.c0) NOT NULL))AND(((vt2.c0)|(vt2.c0)))))OR(((vt2.c1) NOTNULL))))AND(((vt2.c1)+(vt0.c0)))))AND(HEX(DISTINCT vt0.c0))))AND('2108053427'))) ORDER BY CAST((((vt0.c0, vt2.c1, vt2.c0))>((vt2.c0, vt2.c1, vt0.c0))) AS BLOB), ((vt2.c1)-(vt0.c0)) COLLATE RTRIM DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE ('\') ORDER BY CAST((((vt0.c0, vt2.c1, vt2.c0))>((vt2.c0, vt2.c1, vt0.c0))) AS BLOB), ((vt2.c1)-(vt0.c0)) COLLATE RTRIM DESC  NULLS LAST LIMIT 0;
SELECT MAX(vt2.c1) FROM vt2, vt0, v0 WHERE ((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1))))<((((v0.c2) NOTNULL))))) ORDER BY (((((v0.c3, v0.c3))!=((vt2.c1, vt2.c1))))>(LIKE(vt2.c0, vt0.c0, '-'))) ASC  NULLS LAST;
SELECT DISTINCT MAX(vt2.c1) FROM vt2, vt0, v0 WHERE ((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1))))<((((v0.c2) NOTNULL))))) ORDER BY (NOT (NULL)) DESC  NULLS FIRST, CAST(((v0.c0) IS TRUE) AS NUMERIC) DESC  NULLS FIRST, CAST(((v0.c2) BETWEEN (vt0.c0) AND (vt2.c0)) AS BLOB) LIMIT 0;
SELECT ALL MAX(v0.c2) FROM vt0, v0 WHERE (NULLIF((v0.c0 IN (vt0.c0, 'e>2
')), v0.c3 COLLATE BINARY)) ORDER BY CAST(((v0.c0) NOT BETWEEN ('揝C
T') AND (v0.c3)) AS BLOB)  NULLS FIRST, load_extension(v0.c2);
SELECT DISTINCT MAX(v0.c2) FROM vt0, v0 WHERE (((NULLIF((v0.c0 IN (vt0.c0)), v0.c3 COLLATE BINARY))AND((((+ (v0.c3)))||(((((vt0.c0)OR(vt0.c0)))AND(v0.c2))))))) ORDER BY ((((v0.c0) IS FALSE)) NOT BETWEEN (((((((((v0.c0)OR(v0.c0)))AND(v0.c0)))AND(v0.c3)))AND(v0.c0))) AND (v0.c1))  NULLS FIRST, v0.c2 ASC  NULLS FIRST, ((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c1 END)<(CASE v0.c0  WHEN vt0.c0 THEN vt0.c0 END)) DESC LIMIT 1;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT ALL * FROM vt0 WHERE (vt0.c0) INTERSECT SELECT ALL * FROM vt0 WHERE ((((((((vt0.c0, vt0.c0, vt0.c0, 0.6255420832800197))>=((vt0.c0, vt0.c0, vt0.c0, vt0.c0))))OR('✲zv')))OR(((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT ALL * FROM vt0 WHERE (vt0.c0) INTERSECT SELECT ALL * FROM vt0 WHERE ((((((((vt0.c0, vt0.c0, vt0.c0, 0.6255420832800197))>=((vt0.c0, vt0.c0, vt0.c0, vt0.c0))))OR('✲zv')))OR(((NULL) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT ALL MIN(vt2.c0) FROM v0 CROSS JOIN vt0 ON ((((v0.c3)*(v0.c2)))<=(((vt0.c0)==(vt2.c0)))) LEFT OUTER JOIN vt2 ON ((((vt0.c0) BETWEEN (v0.c3) AND (v0.c2))) NOTNULL) WHERE (((('-1444834624' COLLATE NOCASE, vt2.c1))>((((x'e776') NOT BETWEEN (0.754627670829977) AND (v0.c3)), ((vt0.c0)IS NOT(v0.c1))))));
SELECT ALL MIN(vt2.c0) FROM v0 CROSS JOIN vt0 ON ((((v0.c3)*(v0.c2)))<=(((vt0.c0)=(vt2.c0)))) INNER JOIN vt2 ON ((((vt0.c0) BETWEEN (v0.c3) AND (v0.c2))) NOTNULL) WHERE (((((('-1444834624' COLLATE NOCASE, vt2.c1))>((((x'e776') NOT BETWEEN (0.754627670829977) AND (v0.c3)), ((vt0.c0)IS NOT(v0.c1))))))AND((vt0.c0 IN ())))) LIMIT 2;
SELECT MAX(v0.c3) FROM v0 CROSS JOIN vt0 ON (((v0.c0)<(vt0.c0)) IN ()) WHERE (((((vt0.c0, vt0.c0))>=((v0.c2, v0.c3))) IN ((NOT (v0.c0))))) ORDER BY (((('LXA4')AND(((v0.c2)*(v0.c3)))))AND(((((((((((((((v0.c3)OR(v0.c2)))OR(0.4273861839072217)))AND(v0.c1)))AND(vt0.c0)))OR(v0.c1)))OR(v0.c3)))OR(v0.c1)))), CAST((v0.c2 IN (vt0.c0)) AS INTEGER)  NULLS LAST, (- ((NOT (vt0.c0)))) DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c3) FROM v0 CROSS JOIN vt0 ON (((v0.c0)<(vt0.c0)) IN ()) WHERE (((((((vt0.c0, vt0.c0))>((v0.c2, v0.c3))) IN ((NOT (v0.c0)))))AND((- (((v0.c1)+(v0.c1))))))) ORDER BY (((('LXA4')AND(((v0.c2)*(v0.c3)))))AND(((((((((((((((v0.c3)OR(v0.c2)))OR(0.4273861839072217)))AND(v0.c1)))AND(vt0.c0)))OR(v0.c1)))OR(v0.c3)))OR(v0.c1)))), CAST((v0.c2 IN (vt0.c0)) AS INTEGER)  NULLS LAST, (- ((NOT (vt0.c0)))) DESC  NULLS LAST LIMIT 2 INTERSECT SELECT DISTINCT MAX(v0.c3) FROM v0 CROSS JOIN vt0 ON (((v0.c0)<(vt0.c0)) IN ()) WHERE (0x33fe175f) ORDER BY (((('LXA4')AND(((v0.c2)*(v0.c3)))))AND(((((((((((((((v0.c3)OR(v0.c2)))OR(0.4273861839072217)))AND(v0.c1)))AND(vt0.c0)))OR(v0.c1)))OR(v0.c3)))OR(v0.c1)))), CAST((v0.c2 IN (vt0.c0)) AS INTEGER)  NULLS LAST, (- ((NOT (vt0.c0)))) DESC  NULLS LAST LIMIT 2;
SELECT * FROM vt0, v0 WHERE (x'0c') ORDER BY ((x'') BETWEEN (CAST(v0.c1 AS TEXT)) AND (((v0.c3)&(v0.c2)))) ASC, (((((((((v0.c2)OR(v0.c2)))OR(v0.c0)))OR(v0.c3)), (((2048371196, vt0.c0)) NOT BETWEEN ((v0.c0, v0.c0)) AND ((v0.c2, v0.c2))), ((v0.c1) IS FALSE), ((v0.c3) BETWEEN (v0.c0) AND (1148878585)), ABS(vt0.c0)))<=((CASE vt0.c0  WHEN v0.c3 THEN vt0.c0 ELSE v0.c0 END, SQLITE_COMPILEOPTION_GET(v0.c2), CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN v0.c2 END, TYPEOF(DISTINCT v0.c2), (- (vt0.c0)))))  NULLS LAST, ((((((((((vt0.c0)AND(((v0.c0) NOT NULL))))OR(((vt0.c0)LIKE(vt0.c0)))))OR(IFNULL(v0.c0, v0.c1))))OR(vt0.c0)))OR(ABS(vt0.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE (x'0c') ORDER BY ABS(DISTINCT v0.c1) COLLATE RTRIM ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((((((((v0.c0) IS FALSE))AND(1.360437288E9 COLLATE NOCASE)))AND(v0.c2)))AND(v0.c0 COLLATE RTRIM))) ORDER BY ABS(DISTINCT v0.c1) COLLATE RTRIM ASC  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE (x'0c') ORDER BY ((x'') BETWEEN (CAST(v0.c1 AS TEXT)) AND (((v0.c3)&(v0.c2)))) ASC, (((((((((v0.c2)OR(v0.c2)))OR(v0.c0)))OR(v0.c3)), (((2048371196, vt0.c0)) NOT BETWEEN ((v0.c0, v0.c0)) AND ((v0.c2, v0.c2))), ((v0.c1) IS FALSE), ((v0.c3) BETWEEN (v0.c0) AND (1148878585)), ABS(vt0.c0)))<=((CASE vt0.c0  WHEN v0.c3 THEN vt0.c0 ELSE v0.c0 END, SQLITE_COMPILEOPTION_GET(v0.c2), CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN v0.c2 END, TYPEOF(DISTINCT v0.c2), (- (vt0.c0)))))  NULLS LAST, ((((((((((vt0.c0)AND(((v0.c0) NOT NULL))))OR(((vt0.c0)LIKE(vt0.c0)))))OR(IFNULL(v0.c0, v0.c1))))OR(vt0.c0)))OR(ABS(vt0.c0)))  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE (x'0c') ORDER BY ABS(DISTINCT v0.c1) COLLATE RTRIM ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((((((((v0.c0) IS FALSE))AND(1.360437288E9 COLLATE NOCASE)))AND(v0.c2)))AND(v0.c0 COLLATE RTRIM))) ORDER BY ABS(DISTINCT v0.c1) COLLATE RTRIM ASC  NULLS FIRST;
SELECT MAX(v0.c3) FROM vt2 NATURAL JOIN v0 WHERE (CAST(CAST('' AS TEXT) AS INTEGER)) ORDER BY ((((vt2.c0)||(v0.c0)))>=(v0.c0)) DESC  NULLS FIRST, ((TYPEOF(DISTINCT v0.c0)) IS FALSE)  NULLS LAST;
SELECT DISTINCT MAX(v0.c3) FROM vt2 NATURAL JOIN v0 WHERE (((CAST(CAST('' AS TEXT) AS INTEGER))AND((CAST(v0.c3 AS INTEGER) IN ())))) ORDER BY ((((vt2.c0)||(v0.c0)))>=(v0.c0)) DESC  NULLS FIRST, ((TYPEOF(DISTINCT v0.c0)) IS FALSE)  NULLS LAST LIMIT 0;
SELECT * FROM vt0, vt2 INNER JOIN v0 ON json_remove((((v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, vt2.c0)) AND (('N''W', v0.c2))), v0.c0, CASE v0.c3  WHEN vt0.c0 THEN vt2.c0 WHEN '-337357934' THEN vt0.c0 ELSE v0.c3 END, ((v0.c0)==(v0.c3))) WHERE ((vt2.c1 IN ((((NULL))<>((vt0.c0))), NULL, CAST(v0.c2 AS TEXT)))) ORDER BY CASE LIKELY(x'')  WHEN UPPER(v0.c2) THEN UNLIKELY(DISTINCT v0.c3) ELSE CAST(v0.c3 AS INTEGER) END  NULLS LAST, v0.c1 ASC  NULLS LAST, (((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c3)), ((((((v0.c3)AND(vt2.c0)))AND(v0.c0)))AND(v0.c2))))>((((((v0.c3)OR(vt0.c0)))AND(vt2.c0)), ((v0.c1) IS TRUE))));
SELECT DISTINCT * FROM vt0, vt2 INNER JOIN v0 ON json_remove((((v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, vt2.c0)) AND (('N''W', v0.c2))), v0.c0, CASE v0.c3  WHEN vt0.c0 THEN vt2.c0 WHEN '-337357934' THEN vt0.c0 ELSE v0.c3 END, ((v0.c0)==(v0.c3))) WHERE ((((vt2.c1 IN ((((NULL))!=((vt0.c0))), NULL, CAST(v0.c2 AS TEXT))))AND(NULL))) ORDER BY CASE WHEN LOWER(DISTINCT vt2.c1) THEN v0.c0 WHEN ((v0.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)) THEN CASE vt2.c1  WHEN v0.c1 THEN v0.c2 WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN vt2.c1 WHEN v0.c1 THEN v0.c3 WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN '.-{be}y' WHEN v0.c2 THEN v0.c0 WHEN vt2.c1 THEN v0.c0 END WHEN vt0.c0 COLLATE RTRIM THEN vt2.c0 COLLATE BINARY WHEN ((vt0.c0)IS NOT(v0.c1)) THEN (+ (vt2.c1)) ELSE TYPEOF(DISTINCT 0Xffffffffaa524cf3) END ASC  NULLS FIRST;
SELECT * FROM vt0, vt2 INNER JOIN v0 ON json_remove((((v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, vt2.c0)) AND (('N''W', v0.c2))), v0.c0, CASE v0.c3  WHEN vt0.c0 THEN vt2.c0 WHEN '-337357934' THEN vt0.c0 ELSE v0.c3 END, ((v0.c0)==(v0.c3))) WHERE ((vt2.c1 IN ((((NULL))<>((vt0.c0))), NULL, CAST(v0.c2 AS TEXT)))) ORDER BY CASE LIKELY(x'')  WHEN UPPER(v0.c2) THEN UNLIKELY(DISTINCT v0.c3) ELSE CAST(v0.c3 AS INTEGER) END  NULLS LAST, v0.c1 ASC  NULLS LAST, (((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c3)), ((((((v0.c3)AND(vt2.c0)))AND(v0.c0)))AND(v0.c2))))>((((((v0.c3)OR(vt0.c0)))AND(vt2.c0)), ((v0.c1) IS TRUE))));
SELECT DISTINCT * FROM vt0, vt2 INNER JOIN v0 ON json_remove((((v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, vt2.c0)) AND (('N''W', v0.c2))), v0.c0, CASE v0.c3  WHEN vt0.c0 THEN vt2.c0 WHEN '-337357934' THEN vt0.c0 ELSE v0.c3 END, ((v0.c0)==(v0.c3))) WHERE ((((vt2.c1 IN ((((NULL))!=((vt0.c0))), NULL, CAST(v0.c2 AS TEXT))))AND(NULL))) ORDER BY CASE WHEN LOWER(DISTINCT vt2.c1) THEN v0.c0 WHEN ((v0.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)) THEN CASE vt2.c1  WHEN v0.c1 THEN v0.c2 WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN vt2.c1 WHEN v0.c1 THEN v0.c3 WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN '.-{be}y' WHEN v0.c2 THEN v0.c0 WHEN vt2.c1 THEN v0.c0 END WHEN vt0.c0 COLLATE RTRIM THEN vt2.c0 COLLATE BINARY WHEN ((vt0.c0)IS NOT(v0.c1)) THEN (+ (vt2.c1)) ELSE TYPEOF(DISTINCT 0Xffffffffaa524cf3) END ASC  NULLS FIRST;
SELECT * FROM v0 WHERE (0.7354794367041715) ORDER BY ((v0.c3) NOTNULL)  NULLS FIRST;
SELECT * FROM v0 WHERE (0.7354794367041715) ORDER BY ((v0.c3) NOTNULL)  NULLS FIRST LIMIT 0;
SELECT * FROM v0 WHERE (0.7354794367041715) ORDER BY ((v0.c3) NOTNULL)  NULLS FIRST;
SELECT * FROM v0 WHERE (0.7354794367041715) ORDER BY ((v0.c3) NOTNULL)  NULLS FIRST LIMIT 0;
SELECT ALL MIN(vt0.c0) FROM v0 LEFT OUTER JOIN vt0 ON ((((vt0.c0) ISNULL)) NOTNULL) WHERE (x'25e250') ORDER BY (+ (CAST(v0.c1 AS INTEGER))) ASC, (((v0.c1)-(v0.c3)) IN (((vt0.c0) IS TRUE))) DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c0) FROM v0 INNER JOIN vt0 ON ((((vt0.c0) ISNULL)) NOTNULL) WHERE (((x'25e250')AND(NULL))) ORDER BY CAST(CAST(vt0.c0 AS REAL) AS NUMERIC) ASC  NULLS LAST, (((((vt0.c0)OR(v0.c2)))OR(v0.c1)) IN ()) DESC LIMIT 0X0;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((LIKELY(vt0.c0)) NOT NULL));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((LIKELY(vt0.c0)) NOT NULL))AND(((((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(x'3849')))AND(vt0.c0)))AND(vt0.c0)) COLLATE NOCASE))) INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0)<=(vt0.c0)) AS INTEGER));
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c2) NOTNULL) COLLATE RTRIM);
SELECT COUNT(*) FROM v0 WHERE (((v0.c2) NOTNULL) COLLATE RTRIM) LIMIT 1 INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE ((v0.c3 IN ()) COLLATE NOCASE) LIMIT 1;
SELECT COUNT(*) FROM vt0 WHERE (NULL);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (NULL) ORDER BY (((vt0.c0)IS NOT('-2011619333')) IN ((((vt0.c0))=(('s]JIM'))))) ASC, CAST(((vt0.c0)>>(vt0.c0)) AS NUMERIC) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE CASE NULL  WHEN vt0.c0 THEN vt0.c0 END  WHEN CASE vt0.c0  WHEN vt0.c0 THEN '}&' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END WHEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 0.40872131788281196 END THEN vt0.c0 WHEN (vt0.c0 IN ()) THEN (+ (vt0.c0)) ELSE ((vt0.c0) ISNULL) END) ORDER BY (((vt0.c0)IS NOT('-2011619333')) IN ((((vt0.c0))==(('s]JIM'))))) ASC, CAST(((vt0.c0)>>(vt0.c0)) AS NUMERIC) ASC;
SELECT * FROM vt2, vt0, v0 WHERE (CASE WHEN v0.c1 THEN (x'' IN ()) ELSE ((((((vt2.c1)AND(v0.c2)))AND(vt2.c1)))AND('9垳.')) END);
SELECT * FROM vt2, vt0, v0 WHERE (CASE WHEN v0.c1 THEN (x'' IN ()) ELSE ((((((vt2.c1)AND(v0.c2)))AND(vt2.c1)))AND('9垳.')) END) INTERSECT SELECT * FROM vt2, vt0, v0 WHERE ((+ (((v0.c1) NOTNULL))));
SELECT * FROM vt2, vt0, v0 WHERE (CASE WHEN v0.c1 THEN (x'' IN ()) ELSE ((((((vt2.c1)AND(v0.c2)))AND(vt2.c1)))AND('9垳.')) END);
SELECT * FROM vt2, vt0, v0 WHERE (CASE WHEN v0.c1 THEN (x'' IN ()) ELSE ((((((vt2.c1)AND(v0.c2)))AND(vt2.c1)))AND('9垳.')) END) INTERSECT SELECT * FROM vt2, vt0, v0 WHERE ((+ (((v0.c1) NOTNULL))));
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))OR(SQLITE_COMPILEOPTION_USED(NULL)))) ORDER BY (~ (((vt0.c0) IS FALSE))) DESC  NULLS LAST, vt0.c0 DESC;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))OR(SQLITE_COMPILEOPTION_USED(NULL)))) ORDER BY (((vt0.c0, vt0.c0)) NOT BETWEEN ((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), CAST(vt0.c0 AS TEXT))) AND ((((x'9f') NOT NULL), CASE vt0.c0  WHEN vt0.c0 THEN 0.03782126427226151 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))  NULLS LAST, NULL COLLATE NOCASE, ((0.2887026375826506)!=(((vt0.c0) ISNULL))) ASC, ((vt0.c0)+(vt0.c0)) COLLATE BINARY  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE NOCASE) ORDER BY (((vt0.c0, vt0.c0)) NOT BETWEEN ((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), CAST(vt0.c0 AS TEXT))) AND ((((x'9f') NOT NULL), CASE vt0.c0  WHEN vt0.c0 THEN 0.03782126427226151 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))  NULLS LAST, NULL COLLATE NOCASE, ((0.2887026375826506)!=(((vt0.c0) ISNULL))) ASC, ((vt0.c0)+(vt0.c0)) COLLATE BINARY  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))OR(SQLITE_COMPILEOPTION_USED(NULL)))) ORDER BY (~ (((vt0.c0) IS FALSE))) DESC  NULLS LAST, vt0.c0 DESC;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))OR(SQLITE_COMPILEOPTION_USED(NULL)))) ORDER BY (((vt0.c0, vt0.c0)) NOT BETWEEN ((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), CAST(vt0.c0 AS TEXT))) AND ((((x'9f') NOT NULL), CASE vt0.c0  WHEN vt0.c0 THEN 0.03782126427226151 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))  NULLS LAST, NULL COLLATE NOCASE, ((0.2887026375826506)!=(((vt0.c0) ISNULL))) ASC, ((vt0.c0)+(vt0.c0)) COLLATE BINARY  NULLS FIRST INTERSECT SELECT * FROM vt0 WHERE (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE NOCASE) ORDER BY (((vt0.c0, vt0.c0)) NOT BETWEEN ((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), CAST(vt0.c0 AS TEXT))) AND ((((x'9f') NOT NULL), CASE vt0.c0  WHEN vt0.c0 THEN 0.03782126427226151 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))  NULLS LAST, NULL COLLATE NOCASE, ((0.2887026375826506)!=(((vt0.c0) ISNULL))) ASC, ((vt0.c0)+(vt0.c0)) COLLATE BINARY  NULLS FIRST;
SELECT ALL MAX(v0.c3) FROM v0 WHERE (((NULL) IS TRUE));
SELECT ALL MAX(v0.c3) FROM v0 WHERE (((((NULL) IS TRUE))AND(v0.c1))) ORDER BY CASE (+ (0.14907201535870018))  WHEN x'e983e139' COLLATE NOCASE THEN CAST(v0.c2 AS INTEGER) WHEN (v0.c3 IN (v0.c2, x'd48f', v0.c1)) THEN rtreenode(v0.c2, v0.c3) END, ((v0.c2 COLLATE BINARY) IS TRUE) LIMIT 0 INTERSECT SELECT MAX(v0.c3) FROM v0 WHERE (((CAST(v0.c3 AS REAL)) BETWEEN (v0.c0 COLLATE RTRIM) AND (((((((v0.c3)OR(v0.c1)))OR(v0.c1)))AND(v0.c2))))) ORDER BY CASE (+ (0.14907201535870018))  WHEN x'e983e139' COLLATE NOCASE THEN CAST(v0.c2 AS INTEGER) WHEN (v0.c3 IN (v0.c2, x'd48f', v0.c1)) THEN rtreenode(v0.c2, v0.c3) END, ((v0.c2 COLLATE BINARY) IS TRUE) LIMIT 0x0;
SELECT ALL MIN(v0.c3) FROM v0, vt0 WHERE (CAST(LIKELIHOOD(DISTINCT v0.c2, v0.c2) AS NUMERIC));
SELECT DISTINCT MIN(v0.c3) FROM v0, vt0 WHERE (((CAST(LIKELIHOOD(DISTINCT v0.c2, v0.c2) AS NUMERIC))AND((((NOT (v0.c0))) NOT NULL)))) ORDER BY CAST((- (v0.c0)) AS REAL)  NULLS LAST, (((vt0.c0, NULL COLLATE NOCASE, (((v0.c1, vt0.c0))<=((v0.c0, v0.c2))), v0.c1 COLLATE NOCASE))==((CAST(v0.c1 AS INTEGER), (v0.c0 IN (v0.c1, v0.c3)), ((v0.c1) NOTNULL), x'00')))  NULLS FIRST INTERSECT SELECT DISTINCT MIN(v0.c3) FROM v0, vt0 WHERE (CAST(ABS(vt0.c0) AS BLOB)) ORDER BY CAST((- (v0.c0)) AS REAL)  NULLS LAST, (((vt0.c0, NULL COLLATE NOCASE, (((v0.c1, vt0.c0))<=((v0.c0, v0.c2))), v0.c1 COLLATE NOCASE))==((CAST(v0.c1 AS INTEGER), (v0.c0 IN (v0.c1, v0.c3)), ((v0.c1) NOTNULL), x'00')))  NULLS FIRST;
SELECT ALL MAX(vt2.c1) FROM vt0, vt2 WHERE (((((((((vt2.c1)&(vt2.c1)))OR(((vt2.c0) NOT NULL))))AND(CAST(vt0.c0 AS BLOB))))AND(NULL)));
SELECT DISTINCT MAX(vt2.c1) FROM vt0, vt2 WHERE (((((((((((vt2.c1)&(vt2.c1)))OR(((vt2.c0) NOT NULL))))AND(CAST(vt0.c0 AS BLOB))))AND(NULL)))AND(((vt2.c0 COLLATE BINARY) NOTNULL)))) INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt0, vt2 WHERE ((UPPER(DISTINCT vt2.c0) IN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)), vt2.c0)));
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE ((((vt2.c1) IS FALSE) IN (((v0.c2)LIKE(v0.c3)))));
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE ((((vt2.c1) IS FALSE) IN (((v0.c2)LIKE(v0.c3))))) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((((vt2.c1)) BETWEEN ((v0.c2)) AND ((134444159))) IN (v0.c3))) LIMIT 0X0;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON TRIM(DISTINCT (v0.c3 IN ())) WHERE (CASE CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 END  WHEN ((v0.c3)==(0.10888196102973857)) THEN ((vt0.c0)<(v0.c3)) WHEN v0.c0 COLLATE RTRIM THEN CAST(v0.c3 AS BLOB) WHEN (- (v0.c2)) THEN v0.c1 COLLATE RTRIM ELSE ((v0.c3) IS FALSE) END);
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON TRIM(DISTINCT (v0.c3 IN ())) WHERE (((CASE CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 END  WHEN ((v0.c3)=(0.10888196102973857)) THEN ((vt0.c0)<(v0.c3)) WHEN v0.c0 COLLATE RTRIM THEN CAST(v0.c3 AS BLOB) WHEN (- (v0.c2)) THEN v0.c1 COLLATE RTRIM ELSE ((v0.c3) IS FALSE) END)AND(TRIM((((v0.c0))<((0Xffffffffb7d732ad))))))) LIMIT 0X3;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON TRIM(DISTINCT (v0.c3 IN ())) WHERE (CASE CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 END  WHEN ((v0.c3)==(0.10888196102973857)) THEN ((vt0.c0)<(v0.c3)) WHEN v0.c0 COLLATE RTRIM THEN CAST(v0.c3 AS BLOB) WHEN (- (v0.c2)) THEN v0.c1 COLLATE RTRIM ELSE ((v0.c3) IS FALSE) END);
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON TRIM(DISTINCT (v0.c3 IN ())) WHERE (((CASE CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 END  WHEN ((v0.c3)=(0.10888196102973857)) THEN ((vt0.c0)<(v0.c3)) WHEN v0.c0 COLLATE RTRIM THEN CAST(v0.c3 AS BLOB) WHEN (- (v0.c2)) THEN v0.c1 COLLATE RTRIM ELSE ((v0.c3) IS FALSE) END)AND(TRIM((((v0.c0))<((0Xffffffffb7d732ad))))))) LIMIT 0X3;
SELECT ALL COUNT(*) FROM vt0 CROSS JOIN vt2 ON ((((((v0.c2)OR(v0.c1)))AND(v0.c3))) NOT BETWEEN ((~ (v0.c3))) AND (SQLITE_VERSION())) INNER JOIN v0 ON ((ABS(v0.c3))<<(UNLIKELY(v0.c1))) WHERE (CAST(vt2.c1 AS TEXT));
SELECT DISTINCT COUNT(*) FROM vt0 CROSS JOIN vt2 ON ((((((v0.c2)OR(v0.c1)))AND(v0.c3))) NOT BETWEEN ((~ (v0.c3))) AND (SQLITE_VERSION())) INNER JOIN v0 ON ((ABS(v0.c3))<<(UNLIKELY(v0.c1))) WHERE (((CAST(vt2.c1 AS TEXT))AND(((((((v0.c1)OR(v0.c3)))OR(vt2.c1))) BETWEEN (v0.c1) AND (CASE vt0.c0  WHEN vt2.c0 THEN v0.c0 END))))) ORDER BY COALESCE(CAST(v0.c2 AS BLOB), (((v0.c3)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c0))), vt2.c0) ASC  NULLS FIRST LIMIT 0x3 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 CROSS JOIN vt2 ON ((((((v0.c2)OR(v0.c1)))AND(v0.c3))) NOT BETWEEN ((~ (v0.c3))) AND (SQLITE_VERSION())) INNER JOIN v0 ON ((ABS(v0.c3))<<(UNLIKELY(v0.c1))) WHERE (CAST(0.534250069329714 AS REAL) COLLATE RTRIM) ORDER BY COALESCE(CAST(v0.c2 AS BLOB), (((v0.c3)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c0))), vt2.c0) ASC  NULLS FIRST LIMIT 3;
SELECT ALL * FROM vt0, v0 WHERE (((((((((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c1)))OR(((v0.c1)<=('-1550888839')))))AND(ABS(DISTINCT vt0.c0))))AND(((v0.c1) IS FALSE))));
SELECT ALL * FROM vt0, v0 WHERE (((((((((((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c1)))OR(((v0.c1)<=('-1550888839')))))AND(ABS(DISTINCT vt0.c0))))AND(((v0.c1) IS FALSE))))AND(CAST(json_extract(v0.c1, vt0.c0) AS NUMERIC)))) INTERSECT SELECT * FROM vt0, v0 WHERE (ABS(((v0.c3)IS NOT(vt0.c0))));
SELECT ALL * FROM vt0, v0 WHERE (((((((((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c1)))OR(((v0.c1)<=('-1550888839')))))AND(ABS(DISTINCT vt0.c0))))AND(((v0.c1) IS FALSE))));
SELECT ALL * FROM vt0, v0 WHERE (((((((((((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c1)))OR(((v0.c1)<=('-1550888839')))))AND(ABS(DISTINCT vt0.c0))))AND(((v0.c1) IS FALSE))))AND(CAST(json_extract(v0.c1, vt0.c0) AS NUMERIC)))) INTERSECT SELECT * FROM vt0, v0 WHERE (ABS(((v0.c3)IS NOT(vt0.c0))));
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c0 COLLATE NOCASE, 0.9435543595310473, (+ (0.18786874959365474))))!=(((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, NULL))), vt0.c0, vt0.c0 COLLATE BINARY)))) ORDER BY ((((((((vt0.c0)<=(vt0.c0)))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))OR((((vt0.c0)) NOT BETWEEN ((0.7995820211816488)) AND ((vt0.c0))))))AND(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) DESC  NULLS FIRST, CASE WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN '#{c' END, NULLIF(DISTINCT ((vt0.c0) BETWEEN (0X38f63b8a) AND (vt0.c0)), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c0 COLLATE NOCASE, 0.9435543595310473, (+ (0.18786874959365474))))!=(((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, NULL))), vt0.c0, vt0.c0 COLLATE BINARY)))) ORDER BY ((((((((vt0.c0)<=(vt0.c0)))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))OR((((vt0.c0)) NOT BETWEEN ((0.7995820211816488)) AND ((vt0.c0))))))AND(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) DESC  NULLS FIRST, CASE WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN '#{c' END, NULLIF(DISTINCT ((vt0.c0) BETWEEN (0X38f63b8a) AND (vt0.c0)), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((vt0.c0)>(vt0.c0)) COLLATE BINARY) ORDER BY ((((((((vt0.c0)<=(vt0.c0)))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))OR((((vt0.c0)) NOT BETWEEN ((0.7995820211816488)) AND ((vt0.c0))))))AND(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) DESC  NULLS FIRST, CASE WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN '#{c' END, NULLIF(DISTINCT ((vt0.c0) BETWEEN (955661194) AND (vt0.c0)), (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) DESC  NULLS LAST LIMIT 0X0;
SELECT MIN(v0.c3) FROM vt2 LEFT OUTER JOIN v0 ON v0.c2 WHERE (CAST((- (vt2.c1)) AS NUMERIC));
SELECT DISTINCT MIN(v0.c3) FROM vt2 LEFT OUTER JOIN v0 ON v0.c2 WHERE (((CAST((- (vt2.c1)) AS NUMERIC))AND((((((((((v0.c2)OR(v0.c0)))AND(v0.c0)))OR(vt2.c0)))AND(vt2.c1)) IN (((((((((vt2.c1)OR(vt2.c0)))OR(v0.c0)))OR(v0.c0)))OR(v0.c2)), DATETIME(vt2.c0, v0.c2, v0.c0, v0.c0), ((v0.c3)&(v0.c2))))))) LIMIT 2 INTERSECT SELECT DISTINCT MIN(v0.c3) FROM vt2 LEFT OUTER JOIN v0 ON v0.c2 WHERE (((((v0.c3) IS FALSE)) NOT BETWEEN (((((v0.c1)AND(vt2.c0)))OR(v0.c3))) AND (((v0.c0)=(v0.c0))))) LIMIT 2;
SELECT COUNT(*) FROM v0 WHERE (CASE WHEN ((v0.c0) IS FALSE) THEN (((x'', v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c3, x'd58033a2'))) ELSE (((((('Y%F')OR(v0.c2)))OR(v0.c3)))OR(v0.c0)) END) ORDER BY ABS(NULL)  NULLS FIRST, NULL  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE (((CASE WHEN ((v0.c0) IS FALSE) THEN (((x'', v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c3, x'd58033a2'))) ELSE (((((('Y%F')OR(v0.c2)))OR(v0.c3)))OR(v0.c0)) END)AND(LIKELY(v0.c3) COLLATE RTRIM))) ORDER BY (~ (((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)))), (((v0.c0)) BETWEEN ((((v0.c3) ISNULL))) AND ((CAST(v0.c3 AS NUMERIC))))  NULLS LAST INTERSECT SELECT COUNT(*) FROM v0 WHERE (v0.c1) ORDER BY (~ (((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)))), (((v0.c0)) BETWEEN ((((v0.c3) ISNULL))) AND ((CAST(v0.c3 AS NUMERIC))))  NULLS LAST;
SELECT COUNT(*) FROM vt0 WHERE ('-1680991631');
SELECT COUNT(*) FROM vt0 WHERE ('-1680991631') ORDER BY LOWER(DISTINCT 0xfffffffff43a7010), CASE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (~ (vt0.c0)) WHEN (((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((NULL, vt0.c0, vt0.c0))) THEN CASE WHEN vt0.c0 THEN vt0.c0 END WHEN ((vt0.c0)%(vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN CAST(vt0.c0 AS REAL) THEN (2.67721342E8 IN ()) WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN ((vt0.c0)LIKE(vt0.c0)) ELSE (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))) END LIMIT 1 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE ((vt0.c0 IN (vt0.c0)) COLLATE NOCASE) ORDER BY LOWER(DISTINCT 0xfffffffff43a7010), CASE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (~ (vt0.c0)) WHEN (((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0, vt0.c0)) AND ((NULL, vt0.c0, vt0.c0))) THEN CASE WHEN vt0.c0 THEN vt0.c0 END WHEN ((vt0.c0)%(vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN CAST(vt0.c0 AS REAL) THEN (2.67721342E8 IN ()) WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN ((vt0.c0)LIKE(vt0.c0)) ELSE (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))) END LIMIT 1;
SELECT * FROM v0 WHERE ((((((((v0.c2 IN (v0.c0, v0.c2)))AND(((((((((((v0.c2)AND(0Xffffffff8d314316)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))AND(v0.c1)))))OR(((v0.c3)GLOB(v0.c3)))))OR((v0.c1 IN (0.6696278070669723, v0.c2, v0.c2))))) ORDER BY ((v0.c2) NOT NULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((((((v0.c2 IN (v0.c0, v0.c2)))AND(((((((((((v0.c2)AND(0xffffffff8d314316)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))AND(v0.c1)))))OR(((v0.c3)GLOB(v0.c3)))))OR((v0.c1 IN (0.6696278070669723, v0.c2, v0.c2))))) ORDER BY ((v0.c2) NOT NULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((- (v0.c1))) ORDER BY ((v0.c2) NOT NULL) ASC  NULLS LAST;
SELECT * FROM v0 WHERE ((((((((v0.c2 IN (v0.c0, v0.c2)))AND(((((((((((v0.c2)AND(0Xffffffff8d314316)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))AND(v0.c1)))))OR(((v0.c3)GLOB(v0.c3)))))OR((v0.c1 IN (0.6696278070669723, v0.c2, v0.c2))))) ORDER BY ((v0.c2) NOT NULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((((((v0.c2 IN (v0.c0, v0.c2)))AND(((((((((((v0.c2)AND(0xffffffff8d314316)))OR(v0.c2)))AND(v0.c0)))AND(v0.c2)))AND(v0.c1)))))OR(((v0.c3)GLOB(v0.c3)))))OR((v0.c1 IN (0.6696278070669723, v0.c2, v0.c2))))) ORDER BY ((v0.c2) NOT NULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((- (v0.c1))) ORDER BY ((v0.c2) NOT NULL) ASC  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE (('' IN (vt2.c0))) ORDER BY (('e[(z
?輲7K' COLLATE RTRIM) NOT BETWEEN ((((vt2.c1, vt2.c1, vt2.c1, v0.c3)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt0.c0)) AND ((v0.c3, v0.c0, vt2.c0, vt2.c0)))) AND (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)))), ((json_object(v0.c2, v0.c2)) ISNULL) DESC;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((('' IN (vt2.c0)))AND(TRIM(((v0.c1) NOTNULL))))) ORDER BY (('e[(z
?輲7K' COLLATE RTRIM) NOT BETWEEN ((((vt2.c1, vt2.c1, vt2.c1, v0.c3)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt0.c0)) AND ((v0.c3, v0.c0, vt2.c0, vt2.c0)))) AND (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)))), ((json_object(v0.c2, v0.c2)) ISNULL) DESC LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((NOT (v0.c2)) COLLATE RTRIM) ORDER BY (('e[(z
?輲7K' COLLATE RTRIM) NOT BETWEEN ((((vt2.c1, vt2.c1, vt2.c1, v0.c3)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt0.c0)) AND ((v0.c3, v0.c0, vt2.c0, vt2.c0)))) AND (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)))), ((json_object(v0.c2, v0.c2)) ISNULL) DESC LIMIT 3;
SELECT * FROM v0, vt0, vt2 WHERE (('' IN (vt2.c0))) ORDER BY (('e[(z
?輲7K' COLLATE RTRIM) NOT BETWEEN ((((vt2.c1, vt2.c1, vt2.c1, v0.c3)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt0.c0)) AND ((v0.c3, v0.c0, vt2.c0, vt2.c0)))) AND (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)))), ((json_object(v0.c2, v0.c2)) ISNULL) DESC;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((('' IN (vt2.c0)))AND(TRIM(((v0.c1) NOTNULL))))) ORDER BY (('e[(z
?輲7K' COLLATE RTRIM) NOT BETWEEN ((((vt2.c1, vt2.c1, vt2.c1, v0.c3)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt0.c0)) AND ((v0.c3, v0.c0, vt2.c0, vt2.c0)))) AND (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)))), ((json_object(v0.c2, v0.c2)) ISNULL) DESC LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((NOT (v0.c2)) COLLATE RTRIM) ORDER BY (('e[(z
?輲7K' COLLATE RTRIM) NOT BETWEEN ((((vt2.c1, vt2.c1, vt2.c1, v0.c3)) NOT BETWEEN ((v0.c1, v0.c1, vt2.c0, vt0.c0)) AND ((v0.c3, v0.c0, vt2.c0, vt2.c0)))) AND (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)))), ((json_object(v0.c2, v0.c2)) ISNULL) DESC LIMIT 3;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (- (0.32046635773823573)) WHERE (((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0))))) ORDER BY LOWER(DISTINCT CAST(NULL AS BLOB));
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON (- (0.32046635773823573)) WHERE (((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0))))) ORDER BY LIKELIHOOD(DISTINCT (NOT ('1561256705')), ((('x&/LF', vt2.c1, vt2.c1, 0Xffffffffd2bf858d)) NOT BETWEEN ((vt2.c0, vt2.c0, vt0.c0, '0.08634741939000601')) AND ((vt0.c0, vt0.c0, vt2.c1, vt0.c0)))) DESC LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON (- (0.32046635773823573)) WHERE (((((vt0.c0)|(vt2.c1))) BETWEEN (((vt2.c1) NOTNULL)) AND (CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END))) ORDER BY LIKELIHOOD(DISTINCT (NOT ('1561256705')), ((('x&/LF', vt2.c1, vt2.c1, 0xffffffffd2bf858d)) NOT BETWEEN ((vt2.c0, vt2.c0, vt0.c0, '0.08634741939000601')) AND ((vt0.c0, vt0.c0, vt2.c1, vt0.c0)))) DESC LIMIT 0x3;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (- (0.32046635773823573)) WHERE (((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0))))) ORDER BY LOWER(DISTINCT CAST(NULL AS BLOB));
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON (- (0.32046635773823573)) WHERE (((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)))GLOB(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0))))) ORDER BY LIKELIHOOD(DISTINCT (NOT ('1561256705')), ((('x&/LF', vt2.c1, vt2.c1, 0Xffffffffd2bf858d)) NOT BETWEEN ((vt2.c0, vt2.c0, vt0.c0, '0.08634741939000601')) AND ((vt0.c0, vt0.c0, vt2.c1, vt0.c0)))) DESC LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON (- (0.32046635773823573)) WHERE (((((vt0.c0)|(vt2.c1))) BETWEEN (((vt2.c1) NOTNULL)) AND (CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END))) ORDER BY LIKELIHOOD(DISTINCT (NOT ('1561256705')), ((('x&/LF', vt2.c1, vt2.c1, 0xffffffffd2bf858d)) NOT BETWEEN ((vt2.c0, vt2.c0, vt0.c0, '0.08634741939000601')) AND ((vt0.c0, vt0.c0, vt2.c1, vt0.c0)))) DESC LIMIT 0x3;
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))) COLLATE BINARY COLLATE BINARY) ORDER BY ((('0.2423904930873102' IN ())) IS TRUE) ASC;
SELECT ALL MAX(v0.c1) FROM v0 WHERE ((((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))) COLLATE BINARY COLLATE BINARY) ORDER BY ((('0.2423904930873102' IN ())) IS TRUE) ASC INTERSECT SELECT MAX(v0.c1) FROM v0 WHERE (((x'') NOT BETWEEN (((v0.c0) BETWEEN (v0.c3) AND (v0.c0))) AND (HEX(v0.c1)))) ORDER BY ((('0.2423904930873102' IN ())) IS TRUE) ASC;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CAST(CAST(vt0.c0 AS INTEGER) AS BLOB)) ORDER BY CAST('-1548503606' AS NUMERIC)  NULLS LAST, (((vt0.c0)) NOT BETWEEN (('/')) AND ((CAST(vt0.c0 AS TEXT)))) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (CAST(CAST(vt0.c0 AS INTEGER) AS BLOB)) ORDER BY CAST('-1548503606' AS NUMERIC)  NULLS LAST, (((vt0.c0)) NOT BETWEEN (('/')) AND ((CAST(vt0.c0 AS TEXT)))) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((vt0.c0 IN (-1.966523904E9))) ORDER BY CAST('-1548503606' AS NUMERIC)  NULLS LAST, (((vt0.c0)) NOT BETWEEN (('/')) AND ((CAST(vt0.c0 AS TEXT)))) DESC  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt2 WHERE ((((vt2.c0 IN ('l'))) BETWEEN (vt2.c0) AND ((('-1544112158')<(vt2.c0))))) ORDER BY vt2.c1 DESC  NULLS LAST, CAST('Q' AS BLOB);
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c0 IN ('l'))) BETWEEN (vt2.c0) AND ((('-1544112158')<(vt2.c0)))))AND(vt2.c0))) ORDER BY (((((-2.006647167E9)AND(vt2.c0)), SQLITE_COMPILEOPTION_USED(vt2.c0)))>((CASE vt2.c0  WHEN vt2.c1 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END, ((vt2.c0) ISNULL)))) ASC LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1 COLLATE RTRIM)||(((vt2.c1)/(vt2.c1))))) ORDER BY (((((-2.006647167E9)AND(vt2.c0)), SQLITE_COMPILEOPTION_USED(vt2.c0)))>((CASE vt2.c0  WHEN vt2.c1 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END, ((vt2.c0) ISNULL)))) ASC LIMIT 1;
SELECT ALL * FROM vt2 WHERE ((((vt2.c0 IN ('l'))) BETWEEN (vt2.c0) AND ((('-1544112158')<(vt2.c0))))) ORDER BY vt2.c1 DESC  NULLS LAST, CAST('Q' AS BLOB);
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c0 IN ('l'))) BETWEEN (vt2.c0) AND ((('-1544112158')<(vt2.c0)))))AND(vt2.c0))) ORDER BY (((((-2.006647167E9)AND(vt2.c0)), SQLITE_COMPILEOPTION_USED(vt2.c0)))>((CASE vt2.c0  WHEN vt2.c1 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END, ((vt2.c0) ISNULL)))) ASC LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1 COLLATE RTRIM)||(((vt2.c1)/(vt2.c1))))) ORDER BY (((((-2.006647167E9)AND(vt2.c0)), SQLITE_COMPILEOPTION_USED(vt2.c0)))>((CASE vt2.c0  WHEN vt2.c1 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END, ((vt2.c0) ISNULL)))) ASC LIMIT 1;
SELECT ALL MIN(vt2.c1) FROM vt2, vt0, v0 WHERE ((((((v0.c0, v0.c0)) BETWEEN ((vt2.c0, v0.c0)) AND ((vt0.c0, vt0.c0)))) IS FALSE));
SELECT ALL MIN(vt2.c1) FROM vt2, vt0, v0 NOT INDEXED WHERE ((((((((v0.c0, v0.c0)) BETWEEN ((vt2.c0, v0.c0)) AND ((vt0.c0, vt0.c0)))) IS FALSE))AND(vt0.c0)));
SELECT ALL * FROM v0 WHERE ((NOT (((v0.c3)<=(v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE ((((NOT (((v0.c3)<=(v0.c0)))))AND(x''))) ORDER BY (((v0.c3, v0.c1, v0.c2, v0.c0)) BETWEEN ((CASE v0.c0  WHEN v0.c3 THEN v0.c0 WHEN '1017884839' THEN v0.c0 WHEN v0.c1 THEN v0.c1 END, v0.c2 COLLATE NOCASE, v0.c1, (((v0.c0, v0.c0, v0.c0, v0.c2))<>((v0.c2, v0.c3, v0.c0, v0.c1))))) AND ((((NULL)<>(v0.c0)), ((((((((((v0.c3)AND(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0)), (- (v0.c3)), (+ (1312198648))))), ((v0.c2)<=(NULL)) COLLATE RTRIM ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c2 AS REAL))&(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0))))) ORDER BY (((v0.c3, v0.c1, v0.c2, v0.c0)) BETWEEN ((CASE v0.c0  WHEN v0.c3 THEN v0.c0 WHEN '1017884839' THEN v0.c0 WHEN v0.c1 THEN v0.c1 END, v0.c2 COLLATE NOCASE, v0.c1, (((v0.c0, v0.c0, v0.c0, v0.c2))<>((v0.c2, v0.c3, v0.c0, v0.c1))))) AND ((((NULL)<>(v0.c0)), ((((((((((v0.c3)AND(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0)), (- (v0.c3)), (+ (0x4e368ff8))))), ((v0.c2)<=(NULL)) COLLATE RTRIM ASC LIMIT 0x0;
SELECT ALL * FROM v0 WHERE ((NOT (((v0.c3)<=(v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE ((((NOT (((v0.c3)<=(v0.c0)))))AND(x''))) ORDER BY (((v0.c3, v0.c1, v0.c2, v0.c0)) BETWEEN ((CASE v0.c0  WHEN v0.c3 THEN v0.c0 WHEN '1017884839' THEN v0.c0 WHEN v0.c1 THEN v0.c1 END, v0.c2 COLLATE NOCASE, v0.c1, (((v0.c0, v0.c0, v0.c0, v0.c2))<>((v0.c2, v0.c3, v0.c0, v0.c1))))) AND ((((NULL)<>(v0.c0)), ((((((((((v0.c3)AND(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0)), (- (v0.c3)), (+ (1312198648))))), ((v0.c2)<=(NULL)) COLLATE RTRIM ASC LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c2 AS REAL))&(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0))))) ORDER BY (((v0.c3, v0.c1, v0.c2, v0.c0)) BETWEEN ((CASE v0.c0  WHEN v0.c3 THEN v0.c0 WHEN '1017884839' THEN v0.c0 WHEN v0.c1 THEN v0.c1 END, v0.c2 COLLATE NOCASE, v0.c1, (((v0.c0, v0.c0, v0.c0, v0.c2))<>((v0.c2, v0.c3, v0.c0, v0.c1))))) AND ((((NULL)<>(v0.c0)), ((((((((((v0.c3)AND(v0.c2)))AND(v0.c0)))AND(v0.c0)))AND(v0.c2)))AND(v0.c0)), (- (v0.c3)), (+ (0x4e368ff8))))), ((v0.c2)<=(NULL)) COLLATE RTRIM ASC LIMIT 0x0;
SELECT ALL MAX(v0.c1) FROM vt0, v0, vt2 WHERE (((v0.c3 IN ()) IN ()));
SELECT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (((((v0.c3 IN ()) IN ()))AND(CAST(CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 ELSE x'7a17a000' END AS TEXT)))) LIMIT 0x0 INTERSECT SELECT ALL MAX(v0.c1) FROM vt0, v0, vt2 WHERE (x'db') LIMIT 0X0;
SELECT ALL MIN(v0.c0) FROM vt2, v0, vt0 WHERE (vt0.c0);
SELECT ALL MIN(v0.c0) FROM vt2, v0, vt0 WHERE (vt0.c0) ORDER BY (((v0.c1, vt0.c0)) BETWEEN (((v0.c1 IN (v0.c3)), (((v0.c0))>=((v0.c0))))) AND ((-1680991631, ((v0.c1)GLOB(v0.c3))))) ASC, (- ((~ (v0.c0)))), (((v0.c1)) BETWEEN (((~ (vt2.c0)))) AND ((JULIANDAY(vt0.c0, vt2.c0, vt2.c1, v0.c1)))) DESC  NULLS LAST LIMIT 0X2 INTERSECT SELECT MIN(v0.c0) FROM vt2, v0, vt0 WHERE (NULL) ORDER BY (((v0.c1, vt0.c0)) BETWEEN (((v0.c1 IN (v0.c3)), (((v0.c0))>=((v0.c0))))) AND ((-1680991631, ((v0.c1)GLOB(v0.c3))))) ASC, (- ((~ (v0.c0)))), (((v0.c1)) BETWEEN (((~ (vt2.c0)))) AND ((JULIANDAY(vt0.c0, vt2.c0, vt2.c1, v0.c1)))) DESC  NULLS LAST LIMIT 0X2;
SELECT ALL MIN(vt2.c0) FROM vt2, v0, vt0 WHERE (((((v0.c2)<(vt2.c1))) IS TRUE));
SELECT ALL MIN(vt2.c0) FROM vt2, v0, vt0 WHERE (((((((v0.c2)<(vt2.c1))) IS TRUE))AND(LTRIM('-2083510432' COLLATE NOCASE)))) ORDER BY '(';
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((vt2.c1)>>(vt0.c0)) IN ()));
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((((vt2.c1)>>(vt0.c0)) IN ()))AND((~ (((v0.c2)==(v0.c0))))))) ORDER BY ((((((((((v0.c2)OR(v0.c0)))OR(vt0.c0)))AND(vt2.c1)))OR(vt2.c0))) NOT NULL)  NULLS FIRST, ((((v0.c0)||(vt2.c0))) BETWEEN (((v0.c0)==(vt0.c0))) AND (CAST(v0.c1 AS INTEGER)))  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (CASE WHEN (- (vt0.c0)) THEN v0.c3 COLLATE NOCASE WHEN ((vt0.c0)+(vt2.c0)) THEN ((vt0.c0)<=(v0.c3)) END) ORDER BY ((((((((((v0.c2)OR(v0.c0)))OR(vt0.c0)))AND(vt2.c1)))OR(vt2.c0))) NOT NULL)  NULLS FIRST, ((((v0.c0)||(vt2.c0))) BETWEEN (((v0.c0)==(vt0.c0))) AND (CAST(v0.c1 AS INTEGER)))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((vt2.c1)>>(vt0.c0)) IN ()));
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((((vt2.c1)>>(vt0.c0)) IN ()))AND((~ (((v0.c2)==(v0.c0))))))) ORDER BY ((((((((((v0.c2)OR(v0.c0)))OR(vt0.c0)))AND(vt2.c1)))OR(vt2.c0))) NOT NULL)  NULLS FIRST, ((((v0.c0)||(vt2.c0))) BETWEEN (((v0.c0)==(vt0.c0))) AND (CAST(v0.c1 AS INTEGER)))  NULLS FIRST LIMIT 0 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (CASE WHEN (- (vt0.c0)) THEN v0.c3 COLLATE NOCASE WHEN ((vt0.c0)+(vt2.c0)) THEN ((vt0.c0)<=(v0.c3)) END) ORDER BY ((((((((((v0.c2)OR(v0.c0)))OR(vt0.c0)))AND(vt2.c1)))OR(vt2.c0))) NOT NULL)  NULLS FIRST, ((((v0.c0)||(vt2.c0))) BETWEEN (((v0.c0)==(vt0.c0))) AND (CAST(v0.c1 AS INTEGER)))  NULLS FIRST LIMIT 0;
SELECT * FROM v0, vt0 WHERE (CAST((+ (v0.c1)) AS INTEGER)) ORDER BY ((((vt0.c0)||(v0.c0))) BETWEEN ((v0.c1 IN (v0.c0))) AND (vt0.c0)) ASC, '঳n_thU'  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt0 WHERE (CAST((+ (v0.c1)) AS INTEGER)) ORDER BY (((((vt0.c0, v0.c1))<=((v0.c2, v0.c2)))) NOTNULL)  NULLS LAST LIMIT 0x3;
SELECT * FROM v0, vt0 WHERE (CAST((+ (v0.c1)) AS INTEGER)) ORDER BY ((((vt0.c0)||(v0.c0))) BETWEEN ((v0.c1 IN (v0.c0))) AND (vt0.c0)) ASC, '঳n_thU'  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt0 WHERE (CAST((+ (v0.c1)) AS INTEGER)) ORDER BY (((((vt0.c0, v0.c1))<=((v0.c2, v0.c2)))) NOTNULL)  NULLS LAST LIMIT 0x3;
SELECT MAX(v0.c2) FROM v0, vt2, vt0 WHERE (((((- (vt0.c0))))>((((v0.c0) NOT BETWEEN (v0.c1) AND (vt0.c0)))))) ORDER BY DATETIME((~ (vt2.c1)), ((v0.c1) BETWEEN (v0.c1) AND (v0.c3)), NULLIF(v0.c2, v0.c0)), (NOT (((((((((((((-5.06705295E8)AND(vt2.c0)))OR(v0.c2)))AND(v0.c3)))OR(v0.c1)))AND(v0.c1)))AND(v0.c3))))  NULLS LAST, (((- (v0.c0))) BETWEEN (((((((((v0.c3)AND(0.6155209347432217)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))) AND (((0X33b398f2) BETWEEN (vt2.c1) AND (v0.c1)))) ASC;
SELECT DISTINCT MAX(v0.c2) FROM v0, vt2, vt0 WHERE (((((((- (vt0.c0))))>((((v0.c0) NOT BETWEEN (v0.c1) AND (vt0.c0))))))AND(((((v0.c1) NOTNULL))<(CASE WHEN vt2.c0 THEN vt2.c0 WHEN v0.c0 THEN vt2.c0 END))))) ORDER BY DATETIME((~ (vt2.c1)), ((v0.c1) BETWEEN (v0.c1) AND (v0.c3)), NULLIF(v0.c2, v0.c0)), (NOT (((((((((((((-5.06705295E8)AND(vt2.c0)))OR(v0.c2)))AND(v0.c3)))OR(v0.c1)))AND(v0.c1)))AND(v0.c3))))  NULLS LAST, (((- (v0.c0))) BETWEEN (((((((((v0.c3)AND(0.6155209347432217)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))) AND (((0X33b398f2) BETWEEN (vt2.c1) AND (v0.c1)))) ASC LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt2, vt0 WHERE (0Xffffffffaca2a5d4 COLLATE NOCASE) ORDER BY DATETIME((~ (vt2.c1)), ((v0.c1) BETWEEN (v0.c1) AND (v0.c3)), NULLIF(v0.c2, v0.c0)), (NOT (((((((((((((-5.06705295E8)AND(vt2.c0)))OR(v0.c2)))AND(v0.c3)))OR(v0.c1)))AND(v0.c1)))AND(v0.c3))))  NULLS LAST, (((- (v0.c0))) BETWEEN (((((((((v0.c3)AND(0.6155209347432217)))OR(v0.c0)))AND(v0.c1)))OR(v0.c0))) AND (((867408114) BETWEEN (vt2.c1) AND (v0.c1)))) ASC LIMIT 0x2;
SELECT * FROM vt0, vt2, v0 WHERE ((((((v0.c1)-(vt2.c1))))<=((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((v0.c1)-(vt2.c1))))<((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END)))) ORDER BY ((((vt0.c0)*(v0.c0))) NOT BETWEEN ((('-386582235') IS TRUE)) AND (((v0.c0) IS FALSE)))  NULLS LAST, highlight(NULL, ABS(DISTINCT vt2.c0), LOWER(v0.c1), ((x'') NOT BETWEEN (v0.c2) AND (v0.c0))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ('jPc''r+' COLLATE NOCASE) ORDER BY ((((vt0.c0)*(v0.c0))) NOT BETWEEN ((('-386582235') IS TRUE)) AND (((v0.c0) IS FALSE)))  NULLS LAST, highlight(NULL, ABS(DISTINCT vt2.c0), LOWER(v0.c1), ((x'') NOT BETWEEN (v0.c2) AND (v0.c0))) ASC  NULLS LAST;
SELECT * FROM vt0, vt2, v0 WHERE ((((((v0.c1)-(vt2.c1))))<=((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((v0.c1)-(vt2.c1))))<((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END)))) ORDER BY ((((vt0.c0)*(v0.c0))) NOT BETWEEN ((('-386582235') IS TRUE)) AND (((v0.c0) IS FALSE)))  NULLS LAST, highlight(NULL, ABS(DISTINCT vt2.c0), LOWER(v0.c1), ((x'') NOT BETWEEN (v0.c2) AND (v0.c0))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ('jPc''r+' COLLATE NOCASE) ORDER BY ((((vt0.c0)*(v0.c0))) NOT BETWEEN ((('-386582235') IS TRUE)) AND (((v0.c0) IS FALSE)))  NULLS LAST, highlight(NULL, ABS(DISTINCT vt2.c0), LOWER(v0.c1), ((x'') NOT BETWEEN (v0.c2) AND (v0.c0))) ASC  NULLS LAST;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE ((((vt2.c0 IN (vt2.c1, v0.c3))) IS TRUE)) ORDER BY CASE CASE WHEN vt0.c0 THEN v0.c0 END  WHEN LIKE(vt2.c1, vt2.c1) THEN ((v0.c2) BETWEEN (v0.c3) AND (v0.c1)) END  NULLS LAST, NULL  NULLS FIRST, ((((((((vt2.c1)&(vt0.c0)))OR(NULL)))OR(CASE v0.c3  WHEN v0.c3 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 END)))AND((+ (vt2.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE ((((vt2.c0 IN (vt2.c1))) IS TRUE)) ORDER BY ((((v0.c2)/(v0.c2)))/(((vt2.c1)*(v0.c1)))) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (vt2.c1) ORDER BY ((((v0.c2)/(v0.c2)))/(((vt2.c1)*(v0.c1)))) DESC;
SELECT * FROM v0, vt0 WHERE ((v0.c1 IN ())) ORDER BY NULL DESC;
SELECT DISTINCT * FROM v0, vt0 WHERE ((v0.c1 IN ())) ORDER BY NULL DESC;
SELECT * FROM v0, vt0 WHERE ((v0.c1 IN ())) ORDER BY NULL DESC;
SELECT DISTINCT * FROM v0, vt0 WHERE ((v0.c1 IN ())) ORDER BY NULL DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((((vt2.c0) NOT BETWEEN (vt0.c0) AND (v0.c0)))+(((((vt0.c0)OR(vt2.c0)))OR(v0.c1)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE (((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (v0.c0)))+(((((vt0.c0)OR(vt2.c0)))OR(v0.c1)))))AND(NULL COLLATE NOCASE))) ORDER BY (((((((((('-754004670')AND(vt0.c0)))AND(vt2.c0)))AND(v0.c2)))OR(vt2.c1))) BETWEEN (CASE vt2.c1  WHEN vt2.c0 THEN v0.c0 END) AND (((v0.c1)==(v0.c1)))), -769760503  NULLS LAST, CASE (((v0.c1, vt0.c0)) NOT BETWEEN ((v0.c2, v0.c3)) AND ((vt2.c0, vt2.c1)))  WHEN vt2.c1 THEN CHAR(vt2.c1, vt2.c0, v0.c2, v0.c0) WHEN vt0.c0 THEN CASE WHEN vt2.c0 THEN v0.c0 WHEN 0.8495288299181281 THEN vt2.c0 WHEN v0.c3 THEN 0.4257475064293257 ELSE vt0.c0 END ELSE CASE WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END END  NULLS LAST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((((vt2.c0) NOT BETWEEN (vt0.c0) AND (v0.c0)))+(((((vt0.c0)OR(vt2.c0)))OR(v0.c1)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE (((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (v0.c0)))+(((((vt0.c0)OR(vt2.c0)))OR(v0.c1)))))AND(NULL COLLATE NOCASE))) ORDER BY (((((((((('-754004670')AND(vt0.c0)))AND(vt2.c0)))AND(v0.c2)))OR(vt2.c1))) BETWEEN (CASE vt2.c1  WHEN vt2.c0 THEN v0.c0 END) AND (((v0.c1)==(v0.c1)))), -769760503  NULLS LAST, CASE (((v0.c1, vt0.c0)) NOT BETWEEN ((v0.c2, v0.c3)) AND ((vt2.c0, vt2.c1)))  WHEN vt2.c1 THEN CHAR(vt2.c1, vt2.c0, v0.c2, v0.c0) WHEN vt0.c0 THEN CASE WHEN vt2.c0 THEN v0.c0 WHEN 0.8495288299181281 THEN vt2.c0 WHEN v0.c3 THEN 0.4257475064293257 ELSE vt0.c0 END ELSE CASE WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END END  NULLS LAST;
SELECT COUNT(*) FROM v0, vt2 WHERE (CAST((((v0.c2, v0.c0)) NOT BETWEEN ((vt2.c1, v0.c1)) AND ((v0.c0, v0.c0))) AS INTEGER));
SELECT ALL COUNT(*) FROM v0, vt2 WHERE (CAST((((v0.c2, v0.c0)) NOT BETWEEN ((vt2.c1, v0.c1)) AND ((v0.c0, v0.c0))) AS INTEGER)) ORDER BY ',W w혗Cw', ((((v0.c1, v0.c1))>((v0.c1, v0.c2))) IN ()) LIMIT 2;
SELECT * FROM v0 WHERE (((v0.c3 COLLATE NOCASE) NOT NULL));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c3 COLLATE NOCASE) NOT NULL))AND(((v0.c2 IN (v0.c0)) IN (((v0.c3) BETWEEN (v0.c0) AND (v0.c3)))))));
SELECT * FROM v0 WHERE (((v0.c3 COLLATE NOCASE) NOT NULL));
SELECT DISTINCT * FROM v0 WHERE (((((v0.c3 COLLATE NOCASE) NOT NULL))AND(((v0.c2 IN (v0.c0)) IN (((v0.c3) BETWEEN (v0.c0) AND (v0.c3)))))));
SELECT ALL MIN(v0.c0) FROM v0 WHERE (v0.c1) ORDER BY CAST((NOT (v0.c2)) AS REAL) ASC  NULLS LAST, 0.6604410571644355;
SELECT MIN(v0.c0) FROM v0 WHERE (v0.c1) ORDER BY v0.c2 DESC  NULLS LAST, ((CAST(v0.c3 AS INTEGER)) NOT NULL) LIMIT 0X0 INTERSECT SELECT MIN(v0.c0) FROM v0 WHERE (((v0.c1)<=(v0.c3)) COLLATE RTRIM) ORDER BY v0.c2 DESC  NULLS LAST, ((CAST(v0.c3 AS INTEGER)) NOT NULL) LIMIT 0;
SELECT * FROM vt2, v0 WHERE (CAST(CAST(v0.c0 AS REAL) AS NUMERIC));
SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(CAST(v0.c0 AS REAL) AS NUMERIC))AND(((SQLITE_SOURCE_ID())>(DATETIME(v0.c3, v0.c1, vt2.c1, vt2.c1, 'yN', vt2.c0)))))) LIMIT 0x0;
SELECT * FROM vt2, v0 WHERE (CAST(CAST(v0.c0 AS REAL) AS NUMERIC));
SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(CAST(v0.c0 AS REAL) AS NUMERIC))AND(((SQLITE_SOURCE_ID())>(DATETIME(v0.c3, v0.c1, vt2.c1, vt2.c1, 'yN', vt2.c0)))))) LIMIT 0x0;
SELECT ALL * FROM vt2, vt0 WHERE (((((((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt2.c0)))OR(vt0.c0)))AND(vt2.c1)))AND(vt2.c0))) IS FALSE));
SELECT * FROM vt2, vt0 WHERE (((((((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt2.c0)))OR(vt0.c0)))AND(vt2.c1)))AND(vt2.c0))) IS FALSE));
SELECT ALL * FROM vt2, vt0 WHERE (((((((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt2.c0)))OR(vt0.c0)))AND(vt2.c1)))AND(vt2.c0))) IS FALSE));
SELECT * FROM vt2, vt0 WHERE (((((((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt2.c0)))OR(vt0.c0)))AND(vt2.c1)))AND(vt2.c0))) IS FALSE));
SELECT ALL * FROM vt0, v0 WHERE ((- (((v0.c3)<(v0.c2)))));
SELECT DISTINCT * FROM vt0, v0 WHERE ((((- (((v0.c3)<(v0.c2)))))AND(((((v0.c2) NOTNULL))<=(v0.c0))))) ORDER BY CAST((~ (vt0.c0)) AS REAL) DESC, CAST(CAST(v0.c2 AS NUMERIC) AS BLOB) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, v0 WHERE ((- (((v0.c3)<(v0.c2)))));
SELECT DISTINCT * FROM vt0, v0 WHERE ((((- (((v0.c3)<(v0.c2)))))AND(((((v0.c2) NOTNULL))<=(v0.c0))))) ORDER BY CAST((~ (vt0.c0)) AS REAL) DESC, CAST(CAST(v0.c2 AS NUMERIC) AS BLOB) ASC  NULLS FIRST;
SELECT ALL MIN(vt2.c0) FROM v0, vt2 WHERE ((+ ((((v0.c1, vt2.c0))<>((vt2.c0, vt2.c0)))))) ORDER BY ((rtreenode(v0.c3, v0.c1))AND(load_extension(v0.c2, v0.c1)))  NULLS LAST, (NOT (COALESCE(vt2.c1, v0.c3, vt2.c1, v0.c0, v0.c2, v0.c1)))  NULLS LAST;
SELECT DISTINCT MIN(vt2.c0) FROM v0, vt2 WHERE ((((+ ((((v0.c1, vt2.c0))>((vt2.c0, vt2.c0))))))AND(v0.c3))) ORDER BY ((rtreenode(v0.c3, v0.c1))AND(load_extension(v0.c2, v0.c1)))  NULLS LAST, (NOT (COALESCE(vt2.c1, v0.c3, vt2.c1, v0.c0, v0.c2, v0.c1)))  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM v0, vt2 WHERE (((v0.c1) NOTNULL)) ORDER BY ((rtreenode(v0.c3, v0.c1))AND(load_extension(v0.c2, v0.c1)))  NULLS LAST, (NOT (COALESCE(vt2.c1, v0.c3, vt2.c1, v0.c0, v0.c2, v0.c1)))  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (((((((v0.c2)OR(x'0f')))OR(v0.c0))) BETWEEN (((((((v0.c1)OR(v0.c1)))OR('a_')))OR(v0.c1))) AND (v0.c3 COLLATE NOCASE))) ORDER BY TRIM(DISTINCT v0.c0) DESC;
SELECT MIN(v0.c1) FROM v0 WHERE (((((((((v0.c2)OR(x'0f')))OR(v0.c0))) BETWEEN (((((((v0.c1)OR(v0.c1)))OR('a_')))OR(v0.c1))) AND (v0.c3 COLLATE NOCASE)))AND((((('mD')AND(((((v0.c3)AND(v0.c0)))OR(v0.c2)))))OR(0.8336934127298232))))) ORDER BY (((((((v0.c2)OR(v0.c3)))OR(v0.c0)), v0.c0 COLLATE RTRIM, (v0.c0 IN (v0.c2)), ((v0.c0) IS FALSE), v0.c2))>(((- (v0.c3)), (~ (v0.c3)), (('1090913443') NOT NULL), (((v0.c3)) BETWEEN (('')) AND ((v0.c2))), ((v0.c2) BETWEEN (v0.c0) AND (v0.c1))))) DESC  NULLS FIRST, x'' COLLATE NOCASE DESC;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON ((((~ (v0.c0))))>=(((~ (vt0.c0))))) NATURAL JOIN vt0 WHERE (SQLITE_COMPILEOPTION_GET(vt2.c1) COLLATE BINARY);
SELECT ALL * FROM v0 INNER JOIN vt2 ON ((((~ (v0.c0))))>=(((~ (vt0.c0))))) NATURAL JOIN vt0 WHERE (SQLITE_COMPILEOPTION_GET(vt2.c1) COLLATE BINARY);
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON ((((~ (v0.c0))))>=(((~ (vt0.c0))))) NATURAL JOIN vt0 WHERE (SQLITE_COMPILEOPTION_GET(vt2.c1) COLLATE BINARY);
SELECT ALL * FROM v0, vt0 WHERE ('1315360413');
SELECT * FROM v0, vt0 WHERE ((('1315360413')AND('\+-\媋5{')));
SELECT ALL * FROM v0, vt0 WHERE ('1315360413');
SELECT * FROM v0, vt0 WHERE ((('1315360413')AND('\+-\媋5{')));
SELECT * FROM v0, vt2 WHERE ((('-1899867427')IS(vt2.c0 COLLATE NOCASE)));
SELECT ALL * FROM v0, vt2 WHERE ((('-1899867427')IS(vt2.c0 COLLATE NOCASE))) ORDER BY CASE WHEN (vt2.c0 IN (v0.c1)) THEN CAST(vt2.c0 AS TEXT) WHEN (((v0.c3, v0.c3, vt2.c0))>=((vt2.c0, vt2.c1, vt2.c0))) THEN CASE WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END ELSE ((x'a8') BETWEEN (-179717903) AND (v0.c0)) END DESC  NULLS FIRST, ABS(((((v0.c1)OR(v0.c2)))AND(v0.c2))) ASC  NULLS LAST LIMIT 0X1;
SELECT * FROM v0, vt2 WHERE ((('-1899867427')IS(vt2.c0 COLLATE NOCASE)));
SELECT ALL * FROM v0, vt2 WHERE ((('-1899867427')IS(vt2.c0 COLLATE NOCASE))) ORDER BY CASE WHEN (vt2.c0 IN (v0.c1)) THEN CAST(vt2.c0 AS TEXT) WHEN (((v0.c3, v0.c3, vt2.c0))>=((vt2.c0, vt2.c1, vt2.c0))) THEN CASE WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END ELSE ((x'a8') BETWEEN (-179717903) AND (v0.c0)) END DESC  NULLS FIRST, ABS(((((v0.c1)OR(v0.c2)))AND(v0.c2))) ASC  NULLS LAST LIMIT 0X1;
SELECT MAX(v0.c1) FROM vt0, v0 WHERE (('' IN (((((((((((((((v0.c2)AND(0.3525723938407056)))OR(v0.c1)))OR(-1.7976931348623157E308)))AND(0.766306636630468)))AND(0.9957512734605789)))OR(v0.c3)))OR(vt0.c0)))));
SELECT DISTINCT MAX(v0.c1) FROM vt0, v0 WHERE (((('' IN (((((((((((((((v0.c2)AND(0.3525723938407056)))OR(v0.c1)))OR(-1.7976931348623157E308)))AND(0.766306636630468)))AND(0.9957512734605789)))OR(v0.c3)))OR(vt0.c0)))))AND(((CASE v0.c2  WHEN v0.c3 THEN v0.c2 ELSE v0.c3 END)+(vt0.c0))))) ORDER BY ((- (NULL)) IN ()) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(v0.c1) FROM vt0, v0 WHERE (CAST(CASE vt0.c0  WHEN v0.c1 THEN v0.c0 WHEN 0.4481881142625076 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END AS INTEGER)) ORDER BY ((- (NULL)) IN ()) ASC LIMIT 0;
SELECT * FROM vt2, vt0 WHERE (((vt0.c0) NOTNULL));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt0.c0) NOTNULL)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (CAST(CAST(vt2.c0 AS NUMERIC) AS TEXT)) LIMIT 2;
SELECT * FROM vt2, vt0 WHERE (((vt0.c0) NOTNULL));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt0.c0) NOTNULL)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (CAST(CAST(vt2.c0 AS NUMERIC) AS TEXT)) LIMIT 2;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((((((((vt0.c0)AND(vt0.c0)))AND('')))OR(vt0.c0)))AND(vt0.c0))) ISNULL));
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((((((vt0.c0)AND(vt0.c0)))AND('')))OR(vt0.c0)))AND(vt0.c0))) ISNULL)) ORDER BY 0.5162465773222236;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))LIKE(vt0.c0 COLLATE RTRIM))))) LIMIT 1;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))LIKE(vt0.c0 COLLATE RTRIM))))) LIMIT 1;
SELECT ALL MIN(v0.c0) FROM v0 WHERE (((('547225714')IS(v0.c2)) IN ((((v0.c1)) BETWEEN (('')) AND ((v0.c2)))))) ORDER BY (((v0.c3)*(v0.c0)) IN ((+ (v0.c1))))  NULLS FIRST, ((((v0.c0) NOTNULL))<>(((v0.c1)LIKE(v0.c2)))) DESC, CAST(((v0.c2)-(v0.c2)) AS BLOB) DESC  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM v0 WHERE (((('547225714')IS(v0.c2)) IN ((((v0.c1)) BETWEEN (('')) AND ((v0.c2)))))) ORDER BY ((((v0.c2)<<(9.16626587E8)))/((v0.c3 IN ())))  NULLS LAST, 7.65630797E8 ASC, (- (v0.c1)) COLLATE RTRIM LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (json_remove(CAST(vt0.c0 AS NUMERIC), vt0.c0, ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN NULL END)) ORDER BY ((vt0.c0)==(vt0.c0)) COLLATE BINARY DESC;
SELECT DISTINCT * FROM vt0 WHERE (((json_remove(CAST(vt0.c0 AS NUMERIC), vt0.c0, ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN NULL END))AND(CASE WHEN ((0.20971895597481538) IS FALSE) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) THEN x'7694' END))) ORDER BY ((((vt0.c0)GLOB(vt0.c0))) BETWEEN (((vt0.c0) NOT NULL)) AND (vt0.c0)), CASE 0.876621810536745  WHEN vt0.c0 THEN vt0.c0 END COLLATE NOCASE LIMIT 0;
SELECT ALL * FROM vt0 WHERE (json_remove(CAST(vt0.c0 AS NUMERIC), vt0.c0, ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN NULL END)) ORDER BY ((vt0.c0)==(vt0.c0)) COLLATE BINARY DESC;
SELECT * FROM vt2, v0, vt0 WHERE ('WsDMgmqX') ORDER BY HEX(0Xffffffffa02cea2a);
SELECT ALL * FROM vt2, v0, vt0 WHERE ((('WsDMgmqX')AND(((((((((((((v0.c0)AND(v0.c2)))OR(vt2.c1)))AND(vt2.c0)))OR(v0.c1)))OR('-800733379')))LIKE(LOWER(vt2.c1)))))) ORDER BY HEX(0xffffffffa02cea2a) INTERSECT SELECT * FROM vt2, v0, vt0 WHERE ((((~ (vt2.c0)))>=(vt2.c1 COLLATE BINARY))) ORDER BY HEX(-1607669206);
SELECT * FROM vt2, v0, vt0 WHERE ('WsDMgmqX') ORDER BY HEX(0Xffffffffa02cea2a);
SELECT ALL * FROM vt2, v0, vt0 WHERE ((('WsDMgmqX')AND(((((((((((((v0.c0)AND(v0.c2)))OR(vt2.c1)))AND(vt2.c0)))OR(v0.c1)))OR('-800733379')))LIKE(LOWER(vt2.c1)))))) ORDER BY HEX(0xffffffffa02cea2a) INTERSECT SELECT * FROM vt2, v0, vt0 WHERE ((((~ (vt2.c0)))>=(vt2.c1 COLLATE BINARY))) ORDER BY HEX(-1607669206);
SELECT ALL COUNT(*) FROM vt2 WHERE ((((vt2.c0, vt2.c0, vt2.c0, vt2.c0))<((vt2.c0, vt2.c0, vt2.c1, vt2.c1))) COLLATE BINARY) ORDER BY 0X60ea9be5 DESC;
SELECT ALL COUNT(*) FROM vt2 WHERE ((((vt2.c0, vt2.c0, vt2.c0, vt2.c0))<((vt2.c0, vt2.c0, vt2.c1, vt2.c1))) COLLATE BINARY) ORDER BY ((vt2.c0 COLLATE BINARY) NOT NULL) ASC  NULLS FIRST, (CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END IN (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)), IFNULL(DISTINCT vt2.c1, x'bda1ea'), ((((((NULL)OR(vt2.c1)))OR(vt2.c0)))AND('1494291164'))));
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (CAST(v0.c2 AS INTEGER));
SELECT ALL MIN(vt0.c0) FROM vt0, v0 WHERE (((CAST(v0.c2 AS INTEGER))AND(NULL))) ORDER BY CAST(((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)) AS BLOB) ASC, ((((v0.c3)+(x'06dc7c'))) NOT BETWEEN ((v0.c1 IN (v0.c1))) AND (NULLIF(v0.c0, v0.c0))) DESC  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM v0 NATURAL JOIN vt2 CROSS JOIN vt0 ON ((LIKELIHOOD(vt2.c0, vt0.c0))IS NOT(v0.c0)) WHERE (((v0.c2 COLLATE RTRIM)AND((((v0.c1, v0.c0))!=((v0.c3, v0.c0))))));
SELECT * FROM v0 NATURAL JOIN vt2 CROSS JOIN vt0 ON ((LIKELIHOOD(vt2.c0, vt0.c0))IS NOT(v0.c0)) WHERE (((((v0.c2 COLLATE RTRIM)AND((((v0.c1, v0.c0))<>((v0.c3, v0.c0))))))AND((((vt2.c1 IN (vt2.c1))) BETWEEN (-31264383) AND ((((vt0.c0)) BETWEEN ((v0.c0)) AND ((vt2.c0)))))))) INTERSECT SELECT * FROM v0 NATURAL JOIN vt2 CROSS JOIN vt0 ON ((LIKELIHOOD(vt2.c0, vt0.c0))IS NOT(v0.c0)) WHERE ((((- (vt2.c0))) IS TRUE));
SELECT ALL * FROM v0 NATURAL JOIN vt2 CROSS JOIN vt0 ON ((LIKELIHOOD(vt2.c0, vt0.c0))IS NOT(v0.c0)) WHERE (((v0.c2 COLLATE RTRIM)AND((((v0.c1, v0.c0))!=((v0.c3, v0.c0))))));
SELECT ALL * FROM vt2, vt0 WHERE (vt2.c1) ORDER BY CASE WHEN ((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN (1470920427 IN (vt2.c1, vt0.c0)) WHEN vt2.c0 COLLATE RTRIM THEN ((((vt2.c1)AND(vt2.c1)))OR(vt2.c0)) WHEN ((((((((0.47669095252446536)OR(NULL)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)) THEN vt0.c0 END ASC, (vt2.c0 IN (((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) ASC  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (((vt2.c1)AND((((((vt2.c1, '1842030402', vt2.c1, vt2.c0, vt0.c0)) BETWEEN ((vt0.c0, vt2.c0, vt2.c0, vt2.c1, vt2.c1)) AND ((vt2.c1, vt2.c0, vt2.c0, vt2.c0, vt0.c0)))) BETWEEN (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0))) AND (TYPEOF(vt2.c1)))))) ORDER BY (((x'56f6' IN ())) BETWEEN (vt0.c0) AND (((((((vt2.c0)AND(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)))) ASC, ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))IS NOT(vt0.c0)) INTERSECT SELECT ALL * FROM vt2, vt0 WHERE (0.35423725939716977) ORDER BY (((x'56f6' IN ())) BETWEEN (vt0.c0) AND (((((((vt2.c0)AND(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)))) ASC, ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))IS NOT(vt0.c0));
SELECT ALL * FROM vt2, vt0 WHERE (vt2.c1) ORDER BY CASE WHEN ((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN (1470920427 IN (vt2.c1, vt0.c0)) WHEN vt2.c0 COLLATE RTRIM THEN ((((vt2.c1)AND(vt2.c1)))OR(vt2.c0)) WHEN ((((((((0.47669095252446536)OR(NULL)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)) THEN vt0.c0 END ASC, (vt2.c0 IN (((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) ASC  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (((vt2.c1)AND((((((vt2.c1, '1842030402', vt2.c1, vt2.c0, vt0.c0)) BETWEEN ((vt0.c0, vt2.c0, vt2.c0, vt2.c1, vt2.c1)) AND ((vt2.c1, vt2.c0, vt2.c0, vt2.c0, vt0.c0)))) BETWEEN (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0))) AND (TYPEOF(vt2.c1)))))) ORDER BY (((x'56f6' IN ())) BETWEEN (vt0.c0) AND (((((((vt2.c0)AND(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)))) ASC, ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))IS NOT(vt0.c0)) INTERSECT SELECT ALL * FROM vt2, vt0 WHERE (0.35423725939716977) ORDER BY (((x'56f6' IN ())) BETWEEN (vt0.c0) AND (((((((vt2.c0)AND(vt2.c0)))AND(vt0.c0)))OR(vt0.c0)))) ASC, ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))IS NOT(vt0.c0));
SELECT * FROM v0 WHERE (((CASE v0.c2  WHEN '' THEN v0.c2 WHEN v0.c0 THEN v0.c1 END) NOT BETWEEN ((((v0.c1))>((v0.c2)))) AND ((NULL IN (v0.c1)))));
SELECT ALL * FROM v0 WHERE (((CASE v0.c2  WHEN '' THEN v0.c2 WHEN v0.c0 THEN v0.c1 END) NOT BETWEEN ((((v0.c1))>((v0.c2)))) AND ((NULL IN (v0.c1))))) INTERSECT SELECT * FROM v0 WHERE ('-394397011');
SELECT * FROM v0 WHERE (((CASE v0.c2  WHEN '' THEN v0.c2 WHEN v0.c0 THEN v0.c1 END) NOT BETWEEN ((((v0.c1))>((v0.c2)))) AND ((NULL IN (v0.c1)))));
SELECT ALL * FROM v0 WHERE (((CASE v0.c2  WHEN '' THEN v0.c2 WHEN v0.c0 THEN v0.c1 END) NOT BETWEEN ((((v0.c1))>((v0.c2)))) AND ((NULL IN (v0.c1))))) INTERSECT SELECT * FROM v0 WHERE ('-394397011');
SELECT * FROM v0, vt2, vt0 WHERE (((((((((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c3 END)OR(((vt0.c0)>(v0.c1)))))OR(((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))))AND((('-1522911904')<>(vt2.c1)))))AND(((v0.c2)-(v0.c3)))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((((((((((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c3 END)OR(((vt0.c0)>(v0.c1)))))OR(((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))))AND((('-1522911904')>(vt2.c1)))))AND(((v0.c2)-(v0.c3)))))AND((((((v0.c1, NULL))>((v0.c1, v0.c2))))%((((v0.c2, v0.c1))<((v0.c2, NULL)))))))) ORDER BY v0.c3 COLLATE BINARY ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 NOT INDEXED, vt2, vt0 WHERE ((((NULL IN (v0.c2))) BETWEEN (0Xffffffffc7601a4b) AND (((vt2.c1)<>(vt2.c0))))) ORDER BY v0.c3 COLLATE BINARY ASC  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt2, vt0 WHERE (((((((((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c3 END)OR(((vt0.c0)>(v0.c1)))))OR(((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))))AND((('-1522911904')<>(vt2.c1)))))AND(((v0.c2)-(v0.c3)))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((((((((((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c3 END)OR(((vt0.c0)>(v0.c1)))))OR(((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))))AND((('-1522911904')>(vt2.c1)))))AND(((v0.c2)-(v0.c3)))))AND((((((v0.c1, NULL))>((v0.c1, v0.c2))))%((((v0.c2, v0.c1))<((v0.c2, NULL)))))))) ORDER BY v0.c3 COLLATE BINARY ASC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 NOT INDEXED, vt2, vt0 WHERE ((((NULL IN (v0.c2))) BETWEEN (0Xffffffffc7601a4b) AND (((vt2.c1)<>(vt2.c0))))) ORDER BY v0.c3 COLLATE BINARY ASC  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM v0 LEFT OUTER JOIN vt0 ON ((DATE(v0.c1, v0.c1, 0.3332144936808289))IS NOT(vt0.c0 COLLATE BINARY)) WHERE (((NULL)*((- (v0.c3))))) ORDER BY ((((((((((vt0.c0)|(vt0.c0)))AND(((((v0.c0)AND(v0.c2)))OR(v0.c0)))))AND(v0.c0 COLLATE BINARY)))OR(((vt0.c0)OR(vt0.c0)))))AND(NULL)) DESC, v0.c1  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt0 ON ((DATE(v0.c1, v0.c1, 0.3332144936808289))IS NOT(vt0.c0 COLLATE BINARY)) WHERE (((NULL)*((- (v0.c3))))) ORDER BY (((v0.c0) BETWEEN (v0.c0) AND (vt0.c0)) IN (TRIM(vt0.c0), ((((((v0.c3)OR(v0.c0)))OR(v0.c0)))AND(v0.c0))))  NULLS FIRST, (0.6203640438935829 IN ((NOT (vt0.c0)))) ASC  NULLS LAST, (((((vt0.c0 IN ()))AND(((((v0.c1)AND(vt0.c0)))AND(v0.c1)))))AND(((vt0.c0)=(v0.c3)))) ASC LIMIT 1;
SELECT ALL MIN(v0.c3) FROM v0, vt2, vt0 WHERE (CAST(CAST(v0.c1 AS BLOB) AS NUMERIC)) ORDER BY (((vt0.c0)) BETWEEN ((1646465875)) AND ((vt0.c0))) COLLATE BINARY  NULLS LAST;
SELECT DISTINCT MIN(v0.c3) FROM v0, vt2, vt0 WHERE (((CAST(CAST(v0.c1 AS BLOB) AS NUMERIC))AND(CASE WHEN ((v0.c0)||(vt2.c0)) THEN CAST(vt0.c0 AS REAL) WHEN (((vt2.c1))>=((v0.c0))) THEN ((v0.c3)!=(vt2.c0)) END))) ORDER BY (((vt0.c0)) BETWEEN ((0x62231353)) AND ((vt0.c0))) COLLATE BINARY  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(v0.c3) FROM v0, vt2, vt0 WHERE ((((((v0.c1, v0.c3)) NOT BETWEEN ((vt2.c0, vt2.c1)) AND ((v0.c0, vt2.c1))))AND(CAST(x'' AS BLOB)))) ORDER BY (((vt0.c0)) BETWEEN ((0x62231353)) AND ((vt0.c0))) COLLATE BINARY  NULLS LAST LIMIT 0;
SELECT ALL MIN(v0.c0) FROM vt2, vt0 CROSS JOIN v0 ON (vt2.c0 COLLATE RTRIM IN (((v0.c1)>(vt0.c0)))) WHERE (LIKELIHOOD(DISTINCT ((((((v0.c3)AND(v0.c1)))AND(v0.c3)))AND(vt2.c0)), ((v0.c1) BETWEEN (vt2.c0) AND (vt0.c0))));
SELECT DISTINCT MIN(v0.c0) FROM vt2, vt0 CROSS JOIN v0 ON (vt2.c0 COLLATE RTRIM IN (((v0.c1)>(vt0.c0)))) WHERE (((LIKELIHOOD(DISTINCT ((((((v0.c3)AND(v0.c1)))AND(v0.c3)))AND(vt2.c0)), ((v0.c1) BETWEEN (vt2.c0) AND (vt0.c0))))AND(((v0.c0 COLLATE BINARY) NOT BETWEEN ((v0.c1 IN (v0.c1, vt0.c0))) AND (((vt2.c1)&(x'd662'))))))) ORDER BY TRIM(DISTINCT (0.5910047341969829 IN (v0.c3)), CAST(v0.c2 AS INTEGER)) INTERSECT SELECT DISTINCT MIN(v0.c0) FROM vt2, vt0 CROSS JOIN v0 ON (vt2.c0 COLLATE RTRIM IN (((v0.c1)>(vt0.c0)))) WHERE (CASE ((v0.c1)GLOB(vt2.c0))  WHEN CASE vt0.c0  WHEN vt0.c0 THEN v0.c2 ELSE v0.c1 END THEN CASE WHEN v0.c3 THEN v0.c1 END WHEN CASE WHEN vt2.c0 THEN vt2.c1 END THEN CAST(vt0.c0 AS BLOB) END) ORDER BY TRIM(DISTINCT (0.5910047341969829 IN (v0.c3)), CAST(v0.c2 AS INTEGER));
SELECT MAX(vt2.c0) FROM vt2 WHERE (((0.9768143233772199)=((((vt2.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c0)))))) ORDER BY ('t⣴''9Gn0' IN (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))  NULLS LAST, ((((vt2.c1) IS TRUE)) IS FALSE) ASC;
SELECT MAX(vt2.c0) FROM vt2 WHERE (((((0.9768143233772199)=((((vt2.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c0))))))AND(((((((((((((CAST(vt2.c0 AS REAL))OR(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR(vt2.c0 COLLATE BINARY)))AND(CAST(vt2.c1 AS TEXT))))AND(vt2.c0)))AND((vt2.c1 IN (vt2.c1)))))OR((((vt2.c1, vt2.c1)) BETWEEN ((vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c0)))))))) ORDER BY ('t⣴''9Gn0' IN (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))  NULLS LAST, ((((vt2.c1) IS TRUE)) IS FALSE) ASC INTERSECT SELECT ALL MAX(vt2.c0) FROM vt2 WHERE ((((~ (vt2.c0))) NOT BETWEEN ((((vt2.c1, vt2.c0))<=((vt2.c0, vt2.c1)))) AND (((vt2.c0)>>(vt2.c1))))) ORDER BY ('t⣴''9Gn0' IN (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))  NULLS LAST, ((((vt2.c1) IS TRUE)) IS FALSE) ASC;
SELECT MIN(v0.c3) FROM v0 WHERE (((((v0.c3) IS TRUE)) NOT BETWEEN (((v0.c2) NOT NULL)) AND (((v0.c3)>>(v0.c3))))) ORDER BY CASE WHEN v0.c3 COLLATE RTRIM THEN ((v0.c2) ISNULL) ELSE ((v0.c2)>>(v0.c0)) END, (CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c3 ELSE v0.c1 END IN (((v0.c1) BETWEEN (v0.c0) AND (v0.c2)), (v0.c3 IN (v0.c1)))) ASC  NULLS FIRST, ((((0.3114480054065837)||(v0.c1))) NOT NULL) ASC;
SELECT ALL MIN(v0.c3) FROM v0 WHERE (((((v0.c3) IS TRUE)) NOT BETWEEN (((v0.c2) NOT NULL)) AND (((v0.c3)>>(v0.c3))))) ORDER BY CASE WHEN v0.c3 COLLATE RTRIM THEN ((v0.c2) ISNULL) ELSE ((v0.c2)>>(v0.c0)) END, (CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c3 ELSE v0.c1 END IN (((v0.c1) BETWEEN (v0.c0) AND (v0.c2)), (v0.c3 IN (v0.c1)))) ASC  NULLS FIRST, ((((0.3114480054065837)||(v0.c1))) NOT NULL) ASC INTERSECT SELECT MIN(v0.c3) FROM v0 WHERE (((((((((0.7019252105488037)OR(v0.c0)))OR(v0.c0)))OR(0.9383704453787431)))>>(((((((v0.c1)OR(v0.c1)))AND(v0.c2)))OR(v0.c3))))) ORDER BY CASE WHEN v0.c3 COLLATE RTRIM THEN ((v0.c2) ISNULL) ELSE ((v0.c2)>>(v0.c0)) END, (CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c3 ELSE v0.c1 END IN (((v0.c1) BETWEEN (v0.c0) AND (v0.c2)), (v0.c3 IN (v0.c1)))) ASC  NULLS FIRST, ((((0.3114480054065837)||(v0.c1))) NOT NULL) ASC;
SELECT * FROM vt2 WHERE (((((((vt2.c0)OR(vt2.c0)))AND(((vt2.c0) BETWEEN (NULL) AND (x'')))))OR(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY ((((vt2.c1)AND(0.6454541977462812)))>=((((vt2.c1, vt2.c1, vt2.c0, 0Xffffffffbdd6a020, 2.077826563E9, vt2.c1))>=((vt2.c1, vt2.c0, vt2.c1, vt2.c1, vt2.c0, vt2.c1))))), 'l' DESC, vt2.c0 ASC;
SELECT DISTINCT * FROM vt2 WHERE (((((((((vt2.c0)OR(vt2.c0)))AND(((vt2.c0) BETWEEN (NULL) AND (x'')))))OR(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)))))AND(CASE (vt2.c0 IN ())  WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) THEN TYPEOF(DISTINCT vt2.c0) WHEN CASE vt2.c0  WHEN x'f8448c22' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END THEN (+ (vt2.c1)) END))) ORDER BY CHAR(((vt2.c0)>(vt2.c1)), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)), NULL, ((vt2.c0)>>(vt2.c1))) ASC, (CASE x'087c'  WHEN vt2.c0 THEN vt2.c0 END IN ())  NULLS FIRST, (vt2.c1 IN (0.4621258094695966 COLLATE BINARY)) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1 COLLATE RTRIM)&((+ (vt2.c1))))) ORDER BY CHAR(((vt2.c0)>(vt2.c1)), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)), NULL, ((vt2.c0)>>(vt2.c1))) ASC, (CASE x'087c'  WHEN vt2.c0 THEN vt2.c0 END IN ())  NULLS FIRST, (vt2.c1 IN (0.4621258094695966 COLLATE BINARY));
SELECT * FROM vt2 WHERE (((((((vt2.c0)OR(vt2.c0)))AND(((vt2.c0) BETWEEN (NULL) AND (x'')))))OR(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY ((((vt2.c1)AND(0.6454541977462812)))>=((((vt2.c1, vt2.c1, vt2.c0, 0Xffffffffbdd6a020, 2.077826563E9, vt2.c1))>=((vt2.c1, vt2.c0, vt2.c1, vt2.c1, vt2.c0, vt2.c1))))), 'l' DESC, vt2.c0 ASC;
SELECT DISTINCT * FROM vt2 WHERE (((((((((vt2.c0)OR(vt2.c0)))AND(((vt2.c0) BETWEEN (NULL) AND (x'')))))OR(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)))))AND(CASE (vt2.c0 IN ())  WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) THEN TYPEOF(DISTINCT vt2.c0) WHEN CASE vt2.c0  WHEN x'f8448c22' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END THEN (+ (vt2.c1)) END))) ORDER BY CHAR(((vt2.c0)>(vt2.c1)), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)), NULL, ((vt2.c0)>>(vt2.c1))) ASC, (CASE x'087c'  WHEN vt2.c0 THEN vt2.c0 END IN ())  NULLS FIRST, (vt2.c1 IN (0.4621258094695966 COLLATE BINARY)) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1 COLLATE RTRIM)&((+ (vt2.c1))))) ORDER BY CHAR(((vt2.c0)>(vt2.c1)), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)), NULL, ((vt2.c0)>>(vt2.c1))) ASC, (CASE x'087c'  WHEN vt2.c0 THEN vt2.c0 END IN ())  NULLS FIRST, (vt2.c1 IN (0.4621258094695966 COLLATE BINARY));
SELECT ALL MIN(v0.c2) FROM v0, vt0 WHERE ((('<')*(((vt0.c0)/(vt0.c0))))) ORDER BY CAST(TYPEOF(DISTINCT vt0.c0) AS BLOB) DESC;
SELECT DISTINCT MIN(v0.c2) FROM v0, vt0 WHERE ((('<')*(((vt0.c0)/(vt0.c0))))) ORDER BY CAST(TYPEOF(DISTINCT vt0.c0) AS BLOB) DESC LIMIT 0x3 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM v0, vt0 WHERE (((((vt0.c0) BETWEEN (v0.c0) AND (v0.c1)))*(vt0.c0))) ORDER BY CAST(TYPEOF(DISTINCT vt0.c0) AS BLOB) DESC LIMIT 3;
SELECT MIN(v0.c2) FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c1 COLLATE RTRIM)!=(((v0.c0) BETWEEN (v0.c0) AND (v0.c2)))) WHERE (vt2.c0 COLLATE BINARY COLLATE NOCASE) ORDER BY ((v0.c3) BETWEEN (((v0.c1)>(v0.c1))) AND (CAST(v0.c2 AS INTEGER))) ASC;
SELECT DISTINCT MIN(v0.c2) FROM vt2 INNER JOIN v0 ON ((v0.c1 COLLATE RTRIM)!=(((v0.c0) BETWEEN (v0.c0) AND (v0.c2)))) WHERE (vt2.c0 COLLATE BINARY COLLATE NOCASE) ORDER BY (((v0.c1)) BETWEEN (('-197496816')) AND (((v0.c2 IN ())))) ASC  NULLS LAST, (CASE WHEN vt2.c0 THEN vt2.c0 WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 WHEN x'0b99' THEN vt2.c0 END IN (CAST(vt2.c0 AS BLOB), ((vt2.c0)OR(v0.c1)))) DESC LIMIT 2 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt2 INNER JOIN v0 ON ((v0.c1 COLLATE RTRIM)<>(((v0.c0) BETWEEN (v0.c0) AND (v0.c2)))) WHERE ((((CAST(v0.c1 AS REAL), (NOT (vt2.c0)), (v0.c0 IN (v0.c1, vt2.c1))))>(((v0.c2 IN (v0.c1, v0.c1)), CAST(v0.c2 AS BLOB), ((((v0.c1)AND(vt2.c0)))OR(v0.c3)))))) ORDER BY (((v0.c1)) BETWEEN (('-197496816')) AND (((v0.c2 IN ())))) ASC  NULLS LAST, (CASE WHEN vt2.c0 THEN vt2.c0 WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 WHEN x'0b99' THEN vt2.c0 END IN (CAST(vt2.c0 AS BLOB), ((vt2.c0)OR(v0.c1)))) DESC LIMIT 0x2;
SELECT COUNT(*) FROM vt0, vt2 WHERE (CAST((NOT (vt0.c0)) AS TEXT));
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE (CAST((NOT (vt0.c0)) AS TEXT)) ORDER BY (((((vt0.c0, vt0.c0)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0))))<=(CASE vt2.c1  WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN x'' END)), vt2.c0 DESC;
SELECT MAX(vt0.c0) FROM vt0 WHERE (TRIM(CAST(x'2c' AS INTEGER))) ORDER BY CAST((vt0.c0 IN (x'a47ddfafac')) AS BLOB) ASC  NULLS FIRST, CASE 0.6311586304412808  WHEN (~ (vt0.c0)) THEN (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN vt0.c0 THEN ((vt0.c0)GLOB(NULL)) WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) END;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((TRIM(CAST(x'2c' AS INTEGER)))AND(CASE WHEN 0.7815900179495949 THEN (vt0.c0 IN (vt0.c0, vt0.c0)) WHEN ((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) THEN (x'48' IN (vt0.c0)) END))) ORDER BY (('''.	') ISNULL) INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (NULL) ORDER BY (('''.	') ISNULL);
SELECT MAX(v0.c0) FROM vt0, vt2, v0 WHERE (GLOB((((v0.c1, x'32', '-644375195'))>((v0.c1, -2.006647167E9, v0.c3))), '-329968071')) ORDER BY CAST(v0.c3 AS TEXT) ASC;
SELECT DISTINCT MAX(v0.c0) FROM vt0, vt2, v0 WHERE (GLOB((((v0.c1, x'32', '-644375195'))>((v0.c1, -2.006647167E9, v0.c3))), '-329968071')) ORDER BY ((vt0.c0 COLLATE BINARY)=((((v0.c1))>((vt2.c1)))))  NULLS FIRST, ((~ (NULL)) IN (('>tw' IN ()))) DESC  NULLS LAST;
SELECT * FROM v0, vt2 NOT INDEXED WHERE ((((((((+ (v0.c1)))AND(CAST(0x1f629553 AS TEXT))))OR(CAST(v0.c0 AS REAL))))AND(NULL)));
SELECT DISTINCT * FROM v0, vt2 WHERE ((((((((+ (v0.c1)))AND(CAST(526554451 AS TEXT))))OR(CAST(v0.c0 AS REAL))))AND(NULL))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE ((((vt2.c0 IN ()))&(((((vt2.c0)AND(v0.c1)))AND(x'5090'))))) LIMIT 0X1;
SELECT * FROM v0, vt2 NOT INDEXED WHERE ((((((((+ (v0.c1)))AND(CAST(0x1f629553 AS TEXT))))OR(CAST(v0.c0 AS REAL))))AND(NULL)));
SELECT DISTINCT * FROM v0, vt2 WHERE ((((((((+ (v0.c1)))AND(CAST(526554451 AS TEXT))))OR(CAST(v0.c0 AS REAL))))AND(NULL))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE ((((vt2.c0 IN ()))&(((((vt2.c0)AND(v0.c1)))AND(x'5090'))))) LIMIT 0X1;
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (CAST(ABS(DISTINCT vt0.c0) AS TEXT)) ORDER BY ((((NULL) NOT BETWEEN (v0.c0) AND (v0.c2)))>=(INSTR(x'', v0.c2)))  NULLS LAST, (CAST(v0.c3 AS NUMERIC) IN (((((((((((NULL)AND(vt2.c1)))AND('G')))AND(v0.c1)))AND(vt2.c0)))OR(vt2.c0)))) DESC, CAST(TRIM(vt0.c0) AS INTEGER)  NULLS LAST;
SELECT ALL * FROM vt0, v0 NATURAL JOIN vt2 WHERE (CAST(ABS(DISTINCT vt0.c0) AS TEXT)) ORDER BY '' DESC;
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (CAST(ABS(DISTINCT vt0.c0) AS TEXT)) ORDER BY ((((NULL) NOT BETWEEN (v0.c0) AND (v0.c2)))>=(INSTR(x'', v0.c2)))  NULLS LAST, (CAST(v0.c3 AS NUMERIC) IN (((((((((((NULL)AND(vt2.c1)))AND('G')))AND(v0.c1)))AND(vt2.c0)))OR(vt2.c0)))) DESC, CAST(TRIM(vt0.c0) AS INTEGER)  NULLS LAST;
SELECT ALL * FROM vt0, v0 NATURAL JOIN vt2 WHERE (CAST(ABS(DISTINCT vt0.c0) AS TEXT)) ORDER BY '' DESC;
SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c2) ISNULL))IS(((v0.c0)GLOB(v0.c2))))) ORDER BY TIME((((v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, vt2.c1)) AND ((vt2.c0, vt2.c0))), 0xffffffffe8d2d617, ((vt2.c0) IS TRUE), (v0.c1 IN ())) ASC, (((v0.c3)) NOT BETWEEN ((((v0.c0)-(vt2.c0)))) AND ((((((((((((v0.c3)AND(vt2.c0)))AND(v0.c0)))OR(v0.c3)))AND(v0.c2)))AND(vt2.c1))))) DESC  NULLS FIRST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((((v0.c2) ISNULL))IS(((v0.c0)GLOB(v0.c2)))))AND(((CASE vt2.c1  WHEN v0.c1 THEN vt0.c0 ELSE v0.c0 END) BETWEEN (LIKE(vt2.c0, v0.c3, '+')) AND ((vt0.c0 IN (vt2.c0))))))) ORDER BY x'7d35';
SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c2) ISNULL))IS(((v0.c0)GLOB(v0.c2))))) ORDER BY TIME((((v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, vt2.c1)) AND ((vt2.c0, vt2.c0))), 0xffffffffe8d2d617, ((vt2.c0) IS TRUE), (v0.c1 IN ())) ASC, (((v0.c3)) NOT BETWEEN ((((v0.c0)-(vt2.c0)))) AND ((((((((((((v0.c3)AND(vt2.c0)))AND(v0.c0)))OR(v0.c3)))AND(v0.c2)))AND(vt2.c1))))) DESC  NULLS FIRST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((((v0.c2) ISNULL))IS(((v0.c0)GLOB(v0.c2)))))AND(((CASE vt2.c1  WHEN v0.c1 THEN vt0.c0 ELSE v0.c0 END) BETWEEN (LIKE(vt2.c0, v0.c3, '+')) AND ((vt0.c0 IN (vt2.c0))))))) ORDER BY x'7d35';
SELECT MAX(vt0.c0) FROM v0, vt0, vt2 WHERE (CAST(UNLIKELY(DISTINCT vt2.c0) AS REAL)) ORDER BY ((((v0.c3)OR(v0.c1))) IS TRUE);
SELECT MAX(vt0.c0) FROM v0, vt0, vt2 WHERE (((CAST(UNLIKELY(DISTINCT vt2.c0) AS REAL))AND(0X73a31a16 COLLATE RTRIM))) ORDER BY ((((v0.c3)OR(v0.c1))) IS TRUE) LIMIT 0X0 INTERSECT SELECT ALL MAX(vt0.c0) FROM v0, vt0, vt2 WHERE (v0.c2) ORDER BY ((((v0.c3)OR(v0.c1))) IS TRUE) LIMIT 0;
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE (((x'')GLOB(COALESCE(DISTINCT vt2.c1, vt2.c1, vt0.c0, vt2.c0))));
SELECT COUNT(*) FROM vt0, vt2 WHERE (((((x'')GLOB(COALESCE(DISTINCT vt2.c1, vt2.c1, vt0.c0, vt2.c0))))AND(vt2.c1))) LIMIT 0X3 INTERSECT SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ((((vt2.c0, ((vt2.c0)+(vt0.c0))))<=((((vt2.c0)IS NOT(vt2.c0)), CAST(vt2.c0 AS INTEGER))))) LIMIT 0X3;
SELECT ALL MIN(vt2.c1) FROM vt0, vt2 WHERE (-2.127914432E9);
SELECT ALL MIN(vt2.c1) FROM vt0, vt2 WHERE (-2.127914432E9) ORDER BY 'Q' COLLATE BINARY  NULLS FIRST LIMIT 0x0 INTERSECT SELECT ALL MIN(vt2.c1) FROM vt0, vt2 WHERE (CASE ((vt0.c0) IS FALSE)  WHEN LOWER(vt2.c1) THEN 0.1557463469962077 COLLATE BINARY WHEN vt0.c0 COLLATE BINARY THEN HEX(vt2.c0) WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN 'FALSE' END) ORDER BY 'Q' COLLATE BINARY  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM v0, vt2 WHERE (((vt2.c0) NOT BETWEEN (v0.c2) AND (vt2.c1)) COLLATE NOCASE);
SELECT ALL * FROM v0, vt2 WHERE (((((vt2.c0) NOT BETWEEN (v0.c2) AND (vt2.c1)) COLLATE NOCASE)AND(v0.c1))) ORDER BY ((((('') NOTNULL)))<((CAST(v0.c2 AS TEXT)))) LIMIT 0X3;
SELECT ALL * FROM v0, vt2 WHERE (((vt2.c0) NOT BETWEEN (v0.c2) AND (vt2.c1)) COLLATE NOCASE);
SELECT ALL * FROM v0, vt2 WHERE (((((vt2.c0) NOT BETWEEN (v0.c2) AND (vt2.c1)) COLLATE NOCASE)AND(v0.c1))) ORDER BY ((((('') NOTNULL)))<((CAST(v0.c2 AS TEXT)))) LIMIT 0X3;
SELECT ALL MAX(v0.c0) FROM vt2, vt0, v0 WHERE (CASE CAST(v0.c3 AS INTEGER)  WHEN v0.c1 THEN ((v0.c0)>=(vt2.c0)) ELSE 0.29808425783305137 END);
SELECT DISTINCT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (CASE CAST(v0.c3 AS INTEGER)  WHEN v0.c1 THEN ((v0.c0)==(vt2.c0)) ELSE 0.29808425783305137 END) LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (x'cd') LIMIT 0;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CAST(vt0.c0 AS TEXT) COLLATE RTRIM) ORDER BY CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE BINARY  NULLS FIRST, (- (((vt0.c0)=(vt0.c0)))) DESC  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS TEXT) COLLATE RTRIM)AND(vt0.c0))) ORDER BY CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE BINARY  NULLS FIRST, (- (((vt0.c0)==(vt0.c0)))) DESC  NULLS FIRST INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((((vt0.c0) ISNULL), vt0.c0 COLLATE RTRIM, ((vt0.c0)<>(vt0.c0)))) AND ((vt0.c0, vt0.c0, vt0.c0 COLLATE RTRIM)))) ORDER BY CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE BINARY  NULLS FIRST, (- (((vt0.c0)==(vt0.c0)))) DESC  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM vt2, v0, vt0 WHERE (CASE vt2.c0  WHEN (('1589070034') ISNULL) THEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND ('98818379')) WHEN (vt2.c0 IN (vt0.c0)) THEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c3 THEN vt0.c0 WHEN vt2.c1 THEN x'' ELSE vt0.c0 END END);
SELECT DISTINCT MAX(v0.c0) FROM vt2, v0, vt0 WHERE (((CASE vt2.c0  WHEN (('1589070034') ISNULL) THEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND ('98818379')) WHEN (vt2.c0 IN (vt0.c0)) THEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN v0.c3 THEN vt0.c0 WHEN vt2.c1 THEN x'' ELSE vt0.c0 END END)AND(((((vt2.c0) ISNULL))/(((v0.c0) BETWEEN (vt2.c0) AND (vt2.c1))))))) LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt2, v0, vt0 WHERE ((((((((((((v0.c1 IN (v0.c2)))OR(v0.c1)))OR((((vt2.c1, v0.c3)) BETWEEN ((v0.c3, v0.c1)) AND ((v0.c2, vt2.c1))))))AND(((((vt0.c0)AND(vt2.c0)))AND(v0.c2)))))OR(CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c0 THEN vt2.c1 WHEN vt2.c1 THEN v0.c2 END)))OR(((((v0.c1)OR(vt2.c0)))OR(v0.c1))))) LIMIT 1;
SELECT ALL MIN(v0.c2) FROM v0 INNER JOIN vt2 ON '1014823335' COLLATE RTRIM WHERE (((0.05090725472569124)<<(v0.c0)) COLLATE BINARY COLLATE RTRIM) ORDER BY ((CASE vt2.c0  WHEN v0.c1 THEN v0.c0 END)>>(((v0.c3) IS FALSE))), CAST(CASE WHEN v0.c1 THEN '
ឺ(' ELSE v0.c3 END AS REAL)  NULLS LAST;
SELECT ALL MIN(v0.c2) FROM v0 INNER JOIN vt2 ON '1014823335' COLLATE RTRIM WHERE (((0.05090725472569124)<<(v0.c0)) COLLATE BINARY COLLATE RTRIM) ORDER BY ((CASE vt2.c0  WHEN v0.c1 THEN v0.c0 END)>>(((v0.c3) IS FALSE))), CAST(CASE WHEN v0.c1 THEN '
ឺ(' ELSE v0.c3 END AS REAL)  NULLS LAST;
SELECT ALL MIN(v0.c3) FROM v0, vt2 WHERE (((CASE WHEN vt2.c0 THEN v0.c1 ELSE v0.c2 END)AND((NOT (v0.c0))))) ORDER BY CAST(v0.c2 AS TEXT) COLLATE RTRIM, v0.c0 ASC, '4MDGm\' ASC;
SELECT ALL MIN(v0.c3) FROM v0, vt2 WHERE (((((CASE WHEN vt2.c0 THEN v0.c1 ELSE v0.c2 END)AND((NOT (v0.c0)))))AND((NULLIF(vt2.c0, v0.c1) IN ())))) ORDER BY CAST(v0.c2 AS TEXT) COLLATE RTRIM, v0.c0 ASC, '4MDGm\' ASC LIMIT 0X0;
SELECT COUNT(*) FROM vt0 WHERE (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END COLLATE BINARY) ORDER BY ((vt0.c0)*(((x'23')IS NOT(vt0.c0))))  NULLS LAST, ((((vt0.c0)/(vt0.c0))) BETWEEN (HEX(x'3b')) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)), '-1956065535';
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END COLLATE BINARY) ORDER BY ((x'ec5a35')IS('')) DESC, (- (CAST(vt0.c0 AS NUMERIC)))  NULLS FIRST LIMIT 2;
SELECT MAX(v0.c3) FROM v0, vt0 WHERE ((~ (v0.c3)));
SELECT ALL MAX(v0.c3) FROM v0, vt0 WHERE ((~ (v0.c3))) LIMIT 0;
SELECT * FROM vt0, v0, vt2 WHERE (CAST((x'3785' IN (v0.c3)) AS BLOB));
SELECT * FROM vt0, v0, vt2 WHERE (((CAST((x'3785' IN (v0.c3)) AS BLOB))AND(CAST(v0.c1 AS INTEGER)))) INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (MIN(vt2.c0 COLLATE RTRIM, ((vt2.c0) NOTNULL)));
SELECT * FROM vt0, v0, vt2 WHERE (CAST((x'3785' IN (v0.c3)) AS BLOB));
SELECT * FROM vt0, v0, vt2 WHERE (((CAST((x'3785' IN (v0.c3)) AS BLOB))AND(CAST(v0.c1 AS INTEGER)))) INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (MIN(vt2.c0 COLLATE RTRIM, ((vt2.c0) NOTNULL)));
SELECT ALL MAX(vt2.c0) FROM vt2 INNER JOIN vt0 ON CASE WHEN vt0.c0 COLLATE RTRIM THEN (- (0.4289945335198254)) ELSE (((v0.c2, vt0.c0))==((v0.c2, v0.c1))) END CROSS JOIN v0 ON (0.855711865185379 IN (NULL)) WHERE (CAST(json(vt2.c1) AS NUMERIC));
SELECT MAX(vt2.c0) FROM vt2 INNER JOIN vt0 ON CASE WHEN vt0.c0 COLLATE RTRIM THEN (- (0.4289945335198254)) ELSE (((v0.c2, vt0.c0))==((v0.c2, v0.c1))) END CROSS JOIN v0 ON (0.855711865185379 IN (NULL)) WHERE (((CAST(json(vt2.c1) AS NUMERIC))AND((- ((((v0.c3)) BETWEEN ((v0.c0)) AND ((vt2.c1)))))))) ORDER BY ((vt0.c0) NOT NULL) DESC  NULLS LAST, ((1928724660) BETWEEN (((((v0.c2)OR(v0.c1)))OR(NULL))) AND (((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)))) ASC LIMIT 0X0 INTERSECT SELECT MAX(vt2.c0) FROM vt2 INNER JOIN vt0 ON CASE WHEN vt0.c0 COLLATE RTRIM THEN (- (0.4289945335198254)) ELSE (((v0.c2, vt0.c0))==((v0.c2, v0.c1))) END CROSS JOIN v0 ON (0.855711865185379 IN (NULL)) WHERE ((+ (vt2.c1 COLLATE NOCASE))) ORDER BY ((vt0.c0) NOT NULL) DESC  NULLS LAST, ((1928724660) BETWEEN (((((v0.c2)OR(v0.c1)))OR(NULL))) AND (((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)))) ASC LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (CAST((vt0.c0 IN (vt0.c0, vt0.c0)) AS REAL)) ORDER BY (((vt0.c0 IN (vt0.c0)))OR((vt0.c0 IN ())));
SELECT * FROM vt0 WHERE (CAST((vt0.c0 IN (vt0.c0)) AS REAL)) ORDER BY (((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))+((vt0.c0 IN (vt0.c0)))) DESC;
SELECT ALL * FROM vt0 WHERE (CAST((vt0.c0 IN (vt0.c0, vt0.c0)) AS REAL)) ORDER BY (((vt0.c0 IN (vt0.c0)))OR((vt0.c0 IN ())));
SELECT * FROM vt0 WHERE (CAST((vt0.c0 IN (vt0.c0)) AS REAL)) ORDER BY (((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))+((vt0.c0 IN (vt0.c0)))) DESC;
SELECT COUNT(*) FROM v0, vt2 WHERE (((CASE WHEN v0.c3 THEN v0.c0 END)>=(vt2.c1)));
SELECT ALL COUNT(*) FROM v0, vt2 WHERE (((CASE WHEN v0.c3 THEN v0.c0 END)>=(vt2.c1))) ORDER BY ((x'68') IS TRUE) ASC  NULLS FIRST, (((((v0.c1)&(v0.c3)), ((((((v0.c1)OR(v0.c2)))OR(vt2.c0)))AND(0.023694149166923695)), CASE vt2.c0  WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN x'bce8' END))>(((('
SmjUϻ') BETWEEN (v0.c0) AND (v0.c3)), ((v0.c1) NOT NULL), (((v0.c2, v0.c2, v0.c3))<((v0.c2, v0.c0, v0.c1)))))) ASC, (((((((vt2.c1))<>((vt2.c1))))AND(CAST(vt2.c1 AS REAL))))OR((((v0.c3, v0.c1))<=((vt2.c1, v0.c2))))), (+ ((((vt2.c0))==((v0.c0))))) ASC INTERSECT SELECT ALL COUNT(*) FROM v0, vt2 WHERE (x'') ORDER BY ((x'68') IS TRUE) ASC  NULLS FIRST, (((((v0.c1)&(v0.c3)), ((((((v0.c1)OR(v0.c2)))OR(vt2.c0)))AND(0.023694149166923695)), CASE vt2.c0  WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN x'bce8' END))>(((('
SmjUϻ') BETWEEN (v0.c0) AND (v0.c3)), ((v0.c1) NOT NULL), (((v0.c2, v0.c2, v0.c3))<((v0.c2, v0.c0, v0.c1)))))) ASC, (((((((vt2.c1))<>((vt2.c1))))AND(CAST(vt2.c1 AS REAL))))OR((((v0.c3, v0.c1))<=((vt2.c1, v0.c2))))), (+ ((((vt2.c0))=((v0.c0))))) ASC;
SELECT * FROM v0 WHERE ((~ (x'30'))) ORDER BY CASE ((v0.c1)+(v0.c0))  WHEN ((v0.c1)GLOB(v0.c2)) THEN NULL WHEN CASE v0.c3  WHEN '' THEN v0.c1 END THEN (- (v0.c1)) WHEN ((v0.c1)>(v0.c0)) THEN ((v0.c1)<(v0.c1)) WHEN v0.c0 COLLATE BINARY THEN (((v0.c1))<=((v0.c0))) WHEN (v0.c2 IN (v0.c2)) THEN TRIM(v0.c0) WHEN ((v0.c1)>>(v0.c1)) THEN (((v0.c3, '0.6515258409859986')) NOT BETWEEN ((v0.c1, v0.c3)) AND ((NULL, v0.c2))) END ASC, CAST((((v0.c0)) NOT BETWEEN ((NULL)) AND (('3'))) AS NUMERIC) DESC  NULLS FIRST, CAST(v0.c3 COLLATE RTRIM AS NUMERIC) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE ((~ (x'30'))) ORDER BY CAST(v0.c3 AS TEXT) COLLATE BINARY  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE (DATETIME(HEX(DISTINCT v0.c1), UPPER(DISTINCT v0.c3), ((((((((NULL)OR(v0.c2)))OR(v0.c2)))AND(v0.c3)))OR(x'df1b')))) ORDER BY CAST(v0.c3 AS TEXT) COLLATE BINARY  NULLS LAST;
SELECT * FROM v0 WHERE ((~ (x'30'))) ORDER BY CASE ((v0.c1)+(v0.c0))  WHEN ((v0.c1)GLOB(v0.c2)) THEN NULL WHEN CASE v0.c3  WHEN '' THEN v0.c1 END THEN (- (v0.c1)) WHEN ((v0.c1)>(v0.c0)) THEN ((v0.c1)<(v0.c1)) WHEN v0.c0 COLLATE BINARY THEN (((v0.c1))<=((v0.c0))) WHEN (v0.c2 IN (v0.c2)) THEN TRIM(v0.c0) WHEN ((v0.c1)>>(v0.c1)) THEN (((v0.c3, '0.6515258409859986')) NOT BETWEEN ((v0.c1, v0.c3)) AND ((NULL, v0.c2))) END ASC, CAST((((v0.c0)) NOT BETWEEN ((NULL)) AND (('3'))) AS NUMERIC) DESC  NULLS FIRST, CAST(v0.c3 COLLATE RTRIM AS NUMERIC) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE ((~ (x'30'))) ORDER BY CAST(v0.c3 AS TEXT) COLLATE BINARY  NULLS LAST INTERSECT SELECT ALL * FROM v0 WHERE (DATETIME(HEX(DISTINCT v0.c1), UPPER(DISTINCT v0.c3), ((((((((NULL)OR(v0.c2)))OR(v0.c2)))AND(v0.c3)))OR(x'df1b')))) ORDER BY CAST(v0.c3 AS TEXT) COLLATE BINARY  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (TRIM(DISTINCT CASE x'23'  WHEN v0.c2 THEN vt2.c0 WHEN vt0.c0 THEN v0.c2 END, (('1014823335')*(vt0.c0))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((TRIM(DISTINCT CASE x'23'  WHEN v0.c2 THEN vt2.c0 WHEN vt0.c0 THEN v0.c2 END, (('1014823335')*(vt0.c0))))AND(((((vt2.c1)>=(x'2f5e'))) IS TRUE)))) INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (CASE UNICODE(vt2.c0)  WHEN vt2.c1 COLLATE NOCASE THEN ((v0.c2)<(v0.c1)) ELSE (+ (vt2.c0)) END);
SELECT ALL * FROM vt0, vt2, v0 WHERE (TRIM(DISTINCT CASE x'23'  WHEN v0.c2 THEN vt2.c0 WHEN vt0.c0 THEN v0.c2 END, (('1014823335')*(vt0.c0))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((TRIM(DISTINCT CASE x'23'  WHEN v0.c2 THEN vt2.c0 WHEN vt0.c0 THEN v0.c2 END, (('1014823335')*(vt0.c0))))AND(((((vt2.c1)>=(x'2f5e'))) IS TRUE)))) INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (CASE UNICODE(vt2.c0)  WHEN vt2.c1 COLLATE NOCASE THEN ((v0.c2)<(v0.c1)) ELSE (+ (vt2.c0)) END);
SELECT ALL * FROM v0, vt0 WHERE ((- (((vt0.c0) NOTNULL))));
SELECT ALL * FROM v0, vt0 WHERE ((((- (((vt0.c0) NOTNULL))))AND((NOT (v0.c0)) COLLATE RTRIM))) ORDER BY ((((v0.c2) NOTNULL))AND((((v0.c0, v0.c2)) BETWEEN ((v0.c3, vt0.c0)) AND ((vt0.c0, vt0.c0))))) ASC;
SELECT ALL * FROM v0, vt0 WHERE ((- (((vt0.c0) NOTNULL))));
SELECT ALL * FROM v0, vt0 WHERE ((((- (((vt0.c0) NOTNULL))))AND((NOT (v0.c0)) COLLATE RTRIM))) ORDER BY ((((v0.c2) NOTNULL))AND((((v0.c0, v0.c2)) BETWEEN ((v0.c3, vt0.c0)) AND ((vt0.c0, vt0.c0))))) ASC;
SELECT ALL * FROM v0, vt2 WHERE ((x'cade' IN ()));
SELECT * FROM v0, vt2 WHERE ((x'cade' IN ()));
SELECT ALL * FROM v0, vt2 WHERE ((x'cade' IN ()));
SELECT * FROM v0, vt2 WHERE ((x'cade' IN ()));
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((LIKELY(DISTINCT vt0.c0)) NOT NULL)) ORDER BY ((v0.c3)/(v0.c0)) COLLATE NOCASE, ((v0.c0) IS FALSE) COLLATE NOCASE  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((((LIKELY(DISTINCT vt0.c0)) NOT NULL))AND((- ((v0.c2 IN (vt0.c0))))))) ORDER BY (((((((((((((vt0.c0))>((v0.c0))))AND(((0.8287653740876983)||(v0.c3)))))OR(((vt0.c0)<(v0.c1)))))AND(((v0.c3)+(0.6337714100687757)))))OR(((v0.c0)LIKE(vt0.c0)))))AND(CASE v0.c3  WHEN vt0.c0 THEN v0.c2 ELSE v0.c3 END)), ((((v0.c0) NOT BETWEEN (v0.c0) AND ('-2006647167')))>>(((v0.c3)AND(vt0.c0)))) DESC  NULLS LAST, ((((v0.c0)<<(vt0.c0)))>(vt0.c0 COLLATE RTRIM)) DESC  NULLS FIRST;
SELECT * FROM vt0 INNER JOIN v0 ON (((v0.c2 IN (v0.c1)))<=(((vt0.c0) BETWEEN (vt2.c1) AND (v0.c2)))) CROSS JOIN vt2 ON (- (((vt2.c0) ISNULL))) WHERE (RTRIM(((v0.c0)==(v0.c0))));
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON (((v0.c2 IN (v0.c1)))<=(((vt0.c0) BETWEEN (vt2.c1) AND (v0.c2)))) CROSS JOIN vt2 ON (- (((vt2.c0) ISNULL))) WHERE (((RTRIM(((v0.c0)=(v0.c0))))AND((+ (highlight(v0.c1, vt2.c0, vt0.c0, vt2.c1)))))) ORDER BY CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c1)) AS NUMERIC) ASC, ((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c1)))>=(((vt2.c1)*(v0.c0)))) ASC  NULLS FIRST, v0.c3 ASC  NULLS FIRST, ((CASE WHEN v0.c2 THEN vt2.c1 END)OR((~ (vt0.c0)))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON (((v0.c2 IN (v0.c1)))<=(((vt0.c0) BETWEEN (vt2.c1) AND (v0.c2)))) CROSS JOIN vt2 ON (- (((vt2.c0) ISNULL))) WHERE ((- (v0.c0 COLLATE NOCASE))) ORDER BY CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c1)) AS NUMERIC) ASC, ((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c1)))>=(((vt2.c1)*(v0.c0)))) ASC  NULLS FIRST, v0.c3 ASC  NULLS FIRST, ((CASE WHEN v0.c2 THEN vt2.c1 END)OR((~ (vt0.c0)))) ASC  NULLS LAST;
SELECT * FROM vt0 INNER JOIN v0 ON (((v0.c2 IN (v0.c1)))<=(((vt0.c0) BETWEEN (vt2.c1) AND (v0.c2)))) CROSS JOIN vt2 ON (- (((vt2.c0) ISNULL))) WHERE (RTRIM(((v0.c0)==(v0.c0))));
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON (((v0.c2 IN (v0.c1)))<=(((vt0.c0) BETWEEN (vt2.c1) AND (v0.c2)))) CROSS JOIN vt2 ON (- (((vt2.c0) ISNULL))) WHERE (((RTRIM(((v0.c0)=(v0.c0))))AND((+ (highlight(v0.c1, vt2.c0, vt0.c0, vt2.c1)))))) ORDER BY CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c1)) AS NUMERIC) ASC, ((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c1)))>=(((vt2.c1)*(v0.c0)))) ASC  NULLS FIRST, v0.c3 ASC  NULLS FIRST, ((CASE WHEN v0.c2 THEN vt2.c1 END)OR((~ (vt0.c0)))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON (((v0.c2 IN (v0.c1)))<=(((vt0.c0) BETWEEN (vt2.c1) AND (v0.c2)))) CROSS JOIN vt2 ON (- (((vt2.c0) ISNULL))) WHERE ((- (v0.c0 COLLATE NOCASE))) ORDER BY CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c1)) AS NUMERIC) ASC, ((((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c1)))>=(((vt2.c1)*(v0.c0)))) ASC  NULLS FIRST, v0.c3 ASC  NULLS FIRST, ((CASE WHEN v0.c2 THEN vt2.c1 END)OR((~ (vt0.c0)))) ASC  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((vt2.c1 IN ())) NOT NULL)) ORDER BY x'35' DESC, ((v0.c0) IS FALSE) DESC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((vt2.c1 IN ())) NOT NULL)) ORDER BY x'35' DESC, ((v0.c0) IS FALSE) DESC LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((0Xffffffffc811bca0 IN ())) ORDER BY x'35' DESC, ((v0.c0) IS FALSE) DESC LIMIT 0X1;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((vt2.c1 IN ())) NOT NULL)) ORDER BY x'35' DESC, ((v0.c0) IS FALSE) DESC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((vt2.c1 IN ())) NOT NULL)) ORDER BY x'35' DESC, ((v0.c0) IS FALSE) DESC LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((0Xffffffffc811bca0 IN ())) ORDER BY x'35' DESC, ((v0.c0) IS FALSE) DESC LIMIT 0X1;
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)))IS NOT(v0.c1 COLLATE BINARY)));
SELECT COUNT(*) FROM v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)))IS NOT(v0.c1 COLLATE BINARY)));
SELECT COUNT(*) FROM vt0, v0 WHERE ((((NULL)) BETWEEN (((((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))))) AND (((+ (v0.c3)))))) ORDER BY ((((((((((((((vt0.c0)AND(vt0.c0)))OR(v0.c3)))OR(v0.c1)))OR(vt0.c0)))AND(vt0.c0)))AND(v0.c2)))GLOB(x'44')) ASC;
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE ((((((NULL)) BETWEEN (((((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))))) AND (((+ (v0.c3))))))AND((~ ((- (v0.c3))))))) ORDER BY (((v0.c1)) NOT BETWEEN (((((vt0.c0)) BETWEEN ((v0.c1)) AND ((v0.c1))))) AND (('!')))  NULLS LAST, '-941041463', v0.c1 COLLATE BINARY COLLATE NOCASE, x'' ASC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (CASE WHEN (((('1247623579')AND(v0.c3)))AND(v0.c2)) THEN ((((((v0.c3)OR(vt0.c0)))OR(v0.c1)))OR(v0.c2)) END) ORDER BY (((v0.c1)) NOT BETWEEN (((((vt0.c0)) BETWEEN ((v0.c1)) AND ((v0.c1))))) AND (('!')))  NULLS LAST, '-941041463', v0.c1 COLLATE BINARY COLLATE NOCASE, x'' ASC;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((TYPEOF(v0.c0)) NOT BETWEEN ((((v0.c0)) BETWEEN ((v0.c3)) AND ((vt0.c0)))) AND (v0.c1 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt0, v0, vt2 NOT INDEXED WHERE (((TYPEOF(v0.c0)) NOT BETWEEN ((((v0.c0)) BETWEEN ((v0.c3)) AND ((vt0.c0)))) AND (v0.c1 COLLATE NOCASE))) ORDER BY DATETIME((~ (v0.c3)), NULL, ((x'') BETWEEN (vt2.c1) AND (vt0.c0)), CAST(v0.c0 AS BLOB))  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (v0.c3) ORDER BY DATETIME((~ (v0.c3)), NULL, ((x'') BETWEEN (vt2.c1) AND (vt0.c0)), CAST(v0.c0 AS BLOB))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((TYPEOF(v0.c0)) NOT BETWEEN ((((v0.c0)) BETWEEN ((v0.c3)) AND ((vt0.c0)))) AND (v0.c1 COLLATE NOCASE)));
SELECT DISTINCT * FROM vt0, v0, vt2 NOT INDEXED WHERE (((TYPEOF(v0.c0)) NOT BETWEEN ((((v0.c0)) BETWEEN ((v0.c3)) AND ((vt0.c0)))) AND (v0.c1 COLLATE NOCASE))) ORDER BY DATETIME((~ (v0.c3)), NULL, ((x'') BETWEEN (vt2.c1) AND (vt0.c0)), CAST(v0.c0 AS BLOB))  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (v0.c3) ORDER BY DATETIME((~ (v0.c3)), NULL, ((x'') BETWEEN (vt2.c1) AND (vt0.c0)), CAST(v0.c0 AS BLOB))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0, v0 WHERE (UNLIKELY(((((((v0.c2)OR(v0.c0)))OR(v0.c0)))OR(v0.c1))));
SELECT ALL * FROM vt0, v0 WHERE (UNLIKELY(((((((v0.c2)OR(v0.c0)))OR(v0.c0)))OR(v0.c1)))) INTERSECT SELECT ALL * FROM vt0, v0 WHERE ((((((((((((vt0.c0)AND(v0.c0)))OR(v0.c1)))AND(v0.c3)))OR(v0.c1)))OR('-2019859843')) IN (CAST(v0.c0 AS INTEGER))));
SELECT ALL * FROM vt0, v0 WHERE (UNLIKELY(((((((v0.c2)OR(v0.c0)))OR(v0.c0)))OR(v0.c1))));
SELECT ALL * FROM vt0, v0 WHERE (UNLIKELY(((((((v0.c2)OR(v0.c0)))OR(v0.c0)))OR(v0.c1)))) INTERSECT SELECT ALL * FROM vt0, v0 WHERE ((((((((((((vt0.c0)AND(v0.c0)))OR(v0.c1)))AND(v0.c3)))OR(v0.c1)))OR('-2019859843')) IN (CAST(v0.c0 AS INTEGER))));
SELECT ALL MIN(vt2.c0) FROM vt0, vt2 WHERE (vt0.c0);
SELECT ALL MIN(vt2.c0) FROM vt0, vt2 WHERE (((vt0.c0)AND(vt0.c0))) ORDER BY ((((((((vt0.c0)&(vt0.c0)))AND(ABS(vt2.c0))))OR(CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c0 END)))AND(SQLITE_COMPILEOPTION_GET(vt2.c1)))  NULLS LAST, (NOT ((('1786442639')/(vt0.c0)))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (0.20528145510060758 IN ()) WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)-(NULL)) END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (0.20528145510060758 IN ()) WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)-(NULL)) END)AND(((((vt0.c0)OR(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND((((vt0.c0, vt0.c0, vt0.c0))>(('-580686248', vt0.c0, vt0.c0)))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((+ (vt0.c0)) COLLATE NOCASE) LIMIT 1;
SELECT ALL * FROM vt0 WHERE (CASE WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (0.20528145510060758 IN ()) WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)-(NULL)) END);
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (0.20528145510060758 IN ()) WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)-(NULL)) END)AND(((((vt0.c0)OR(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND((((vt0.c0, vt0.c0, vt0.c0))>(('-580686248', vt0.c0, vt0.c0)))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((+ (vt0.c0)) COLLATE NOCASE) LIMIT 1;
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE ((((((v0.c1))>=((vt0.c0))))<(CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c1 END))) ORDER BY (('0.4099338637139208') BETWEEN ((((v0.c2, v0.c2))>=((v0.c0, v0.c3)))) AND ((((v0.c0, v0.c1, v0.c3, v0.c2)) NOT BETWEEN ((v0.c3, v0.c1, v0.c1, v0.c2)) AND ((vt0.c0, v0.c3, v0.c0, vt0.c0))))) DESC  NULLS LAST, ((((v0.c0)=(v0.c0))) IS FALSE) ASC, x'';
SELECT MIN(v0.c1) FROM v0, vt0 WHERE ((((((v0.c1))>((vt0.c0))))<(CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c1 END))) ORDER BY CAST(TYPEOF(DISTINCT v0.c1) AS INTEGER);
SELECT ALL * FROM v0 WHERE (((v0.c3) BETWEEN (v0.c3) AND (v0.c0)) COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (((((v0.c3) BETWEEN (v0.c3) AND (v0.c0)) COLLATE RTRIM)AND(((((v0.c0)IS NOT(v0.c1))) ISNULL)))) ORDER BY (+ (((((((((v0.c3)OR(v0.c1)))AND(v0.c2)))OR(v0.c0)))OR(v0.c1))))  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0 WHERE (((v0.c3) BETWEEN (v0.c3) AND (v0.c0)) COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (((((v0.c3) BETWEEN (v0.c3) AND (v0.c0)) COLLATE RTRIM)AND(((((v0.c0)IS NOT(v0.c1))) ISNULL)))) ORDER BY (+ (((((((((v0.c3)OR(v0.c1)))AND(v0.c2)))OR(v0.c0)))OR(v0.c1))))  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0 COLLATE RTRIM)AND(((v0.c1) BETWEEN (v0.c3) AND (NULL)))))AND((v0.c0 IN (vt0.c0)))) LEFT OUTER JOIN vt2 ON ((((v0.c3)+(v0.c3))) NOTNULL) WHERE (CASE WHEN ((((((v0.c3)OR(vt2.c0)))AND(v0.c2)))OR(vt0.c0)) THEN (0.6946983752039193 IN (vt2.c1, v0.c2)) END);
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0 COLLATE RTRIM)AND(((v0.c1) BETWEEN (v0.c3) AND (NULL)))))AND((v0.c0 IN (vt0.c0)))) INNER JOIN vt2 ON ((((v0.c3)+(v0.c3))) NOTNULL) WHERE (CASE WHEN ((((((v0.c3)OR(vt2.c0)))AND(v0.c2)))OR(vt0.c0)) THEN (0.6946983752039193 IN (vt2.c1)) END) ORDER BY ((((v0.c3)!=(v0.c3))) NOT BETWEEN (((vt2.c1) NOT NULL)) AND (((v0.c1)&(v0.c2)))) ASC  NULLS LAST, CASE ((v0.c2)&(vt2.c1))  WHEN ABS(DISTINCT v0.c0) THEN CASE WHEN v0.c0 THEN v0.c2 WHEN x'f6b5f08e' THEN v0.c3 ELSE v0.c1 END END ASC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0 COLLATE RTRIM)AND(((v0.c1) BETWEEN (v0.c3) AND (NULL)))))AND((v0.c0 IN (vt0.c0)))) INNER JOIN vt2 ON ((((v0.c3)+(v0.c3))) NOTNULL) WHERE (((((v0.c1)OR(v0.c1)))&(((x'')|(vt2.c1))))) ORDER BY ((((v0.c3)<>(v0.c3))) NOT BETWEEN (((vt2.c1) NOT NULL)) AND (((v0.c1)&(v0.c2)))) ASC  NULLS LAST, CASE ((v0.c2)&(vt2.c1))  WHEN ABS(DISTINCT v0.c0) THEN CASE WHEN v0.c0 THEN v0.c2 WHEN x'f6b5f08e' THEN v0.c3 ELSE v0.c1 END END ASC  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0 COLLATE RTRIM)AND(((v0.c1) BETWEEN (v0.c3) AND (NULL)))))AND((v0.c0 IN (vt0.c0)))) LEFT OUTER JOIN vt2 ON ((((v0.c3)+(v0.c3))) NOTNULL) WHERE (CASE WHEN ((((((v0.c3)OR(vt2.c0)))AND(v0.c2)))OR(vt0.c0)) THEN (0.6946983752039193 IN (vt2.c1, v0.c2)) END);
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0 COLLATE RTRIM)AND(((v0.c1) BETWEEN (v0.c3) AND (NULL)))))AND((v0.c0 IN (vt0.c0)))) INNER JOIN vt2 ON ((((v0.c3)+(v0.c3))) NOTNULL) WHERE (CASE WHEN ((((((v0.c3)OR(vt2.c0)))AND(v0.c2)))OR(vt0.c0)) THEN (0.6946983752039193 IN (vt2.c1)) END) ORDER BY ((((v0.c3)!=(v0.c3))) NOT BETWEEN (((vt2.c1) NOT NULL)) AND (((v0.c1)&(v0.c2)))) ASC  NULLS LAST, CASE ((v0.c2)&(vt2.c1))  WHEN ABS(DISTINCT v0.c0) THEN CASE WHEN v0.c0 THEN v0.c2 WHEN x'f6b5f08e' THEN v0.c3 ELSE v0.c1 END END ASC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0 COLLATE RTRIM)AND(((v0.c1) BETWEEN (v0.c3) AND (NULL)))))AND((v0.c0 IN (vt0.c0)))) INNER JOIN vt2 ON ((((v0.c3)+(v0.c3))) NOTNULL) WHERE (((((v0.c1)OR(v0.c1)))&(((x'')|(vt2.c1))))) ORDER BY ((((v0.c3)<>(v0.c3))) NOT BETWEEN (((vt2.c1) NOT NULL)) AND (((v0.c1)&(v0.c2)))) ASC  NULLS LAST, CASE ((v0.c2)&(vt2.c1))  WHEN ABS(DISTINCT v0.c0) THEN CASE WHEN v0.c0 THEN v0.c2 WHEN x'f6b5f08e' THEN v0.c3 ELSE v0.c1 END END ASC  NULLS FIRST LIMIT 0X1;
SELECT MAX(vt2.c0) FROM vt2 INNER JOIN vt0 ON ((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1))) NOT BETWEEN (vt2.c0) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))) WHERE (((((vt0.c0)|(vt2.c0)))==(((((vt0.c0)OR(vt2.c1)))AND(vt2.c1))))) ORDER BY ((vt2.c1)<(((vt0.c0)*(vt0.c0))));
SELECT MAX(vt2.c0) FROM vt2 INNER JOIN vt0 ON ((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1))) NOT BETWEEN (vt2.c0) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))) WHERE (((((vt0.c0)|(vt2.c0)))=(((((vt0.c0)OR(vt2.c1)))AND(vt2.c1))))) ORDER BY vt2.c1  NULLS LAST, CASE (((((((('67773587')AND(vt2.c1)))OR(vt2.c0)))AND(vt0.c0)))AND(vt2.c1))  WHEN ((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)) THEN ((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0)) END  NULLS FIRST LIMIT 1 INTERSECT SELECT MAX(vt2.c0) FROM vt2 INNER JOIN vt0 ON ((((((vt2.c1)OR(vt2.c0)))AND(vt2.c1))) NOT BETWEEN (vt2.c0) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))) WHERE (((NULL) BETWEEN (((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))AND(vt0.c0))) AND ((((vt0.c0, vt2.c0, vt2.c1, vt0.c0, vt0.c0, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt0.c0, vt0.c0, vt2.c0, vt2.c1, vt0.c0, vt2.c0)) AND ((vt2.c1, vt2.c1, vt2.c0, vt2.c1, vt2.c0, vt2.c1, vt0.c0)))))) ORDER BY vt2.c1  NULLS LAST, CASE (((((((('67773587')AND(vt2.c1)))OR(vt2.c0)))AND(vt0.c0)))AND(vt2.c1))  WHEN ((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)) THEN ((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0)) END  NULLS FIRST LIMIT 1;
SELECT * FROM v0, vt2, vt0 WHERE (CAST((vt2.c1 IN (vt2.c0)) AS REAL)) ORDER BY CAST((('-1429548611')>>(v0.c0)) AS REAL) ASC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST((vt2.c1 IN (vt2.c0)) AS REAL)) ORDER BY CAST((('-1429548611')>>(v0.c0)) AS REAL) ASC;
SELECT * FROM v0, vt2, vt0 WHERE (CAST((vt2.c1 IN (vt2.c0)) AS REAL)) ORDER BY CAST((('-1429548611')>>(v0.c0)) AS REAL) ASC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CAST((vt2.c1 IN (vt2.c0)) AS REAL)) ORDER BY CAST((('-1429548611')>>(v0.c0)) AS REAL) ASC;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (COALESCE(DISTINCT LENGTH(v0.c0), (v0.c3 IN (vt0.c0)), ((vt2.c0) ISNULL)));
SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((COALESCE(DISTINCT LENGTH(v0.c0), (v0.c3 IN (vt0.c0)), ((vt2.c0) ISNULL)))AND(((vt2.c0)>((vt2.c0 IN ())))))) LIMIT 0x1;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (COALESCE(DISTINCT LENGTH(v0.c0), (v0.c3 IN (vt0.c0)), ((vt2.c0) ISNULL)));
SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((COALESCE(DISTINCT LENGTH(v0.c0), (v0.c3 IN (vt0.c0)), ((vt2.c0) ISNULL)))AND(((vt2.c0)>((vt2.c0 IN ())))))) LIMIT 0x1;
SELECT ALL MAX(v0.c1) FROM vt0, v0, vt2 WHERE (NULL) ORDER BY (((v0.c1, vt0.c0)) BETWEEN ((((vt2.c0) NOT NULL), (((v0.c2))=((vt0.c0))))) AND ((NULL, (~ (v0.c0)))))  NULLS LAST;
SELECT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (((NULL)AND((((v0.c1)<=(v0.c2)) IN ())))) ORDER BY (((v0.c1, vt0.c0)) BETWEEN ((((vt2.c0) NOT NULL), (((v0.c2))=((vt0.c0))))) AND ((NULL, (~ (v0.c0)))))  NULLS LAST INTERSECT SELECT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (2.077826563E9) ORDER BY (((v0.c1, vt0.c0)) BETWEEN ((((vt2.c0) NOT NULL), (((v0.c2))==((vt0.c0))))) AND ((NULL, (~ (v0.c0)))))  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE BINARY)LIKE(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (- (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)) ASC, CASE WHEN vt0.c0 THEN ((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c0)*(vt0.c0)) THEN ((vt0.c0)!=(x'ba')) WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) BETWEEN ('8LWY') AND (vt0.c0)) ELSE vt0.c0 COLLATE NOCASE END DESC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE BINARY)LIKE(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY (- (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)) ASC, CASE WHEN vt0.c0 THEN ((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c0)*(vt0.c0)) THEN ((vt0.c0)<>(x'ba')) WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0) BETWEEN ('8LWY') AND (vt0.c0)) ELSE vt0.c0 COLLATE NOCASE END DESC;
SELECT ALL * FROM vt2 WHERE (LIKELIHOOD(((vt2.c1) BETWEEN (vt2.c1) AND (x'')), vt2.c0 COLLATE NOCASE));
SELECT * FROM vt2 WHERE (((LIKELIHOOD(((vt2.c1) BETWEEN (vt2.c1) AND (x'')), vt2.c0 COLLATE NOCASE))AND(CASE vt2.c0 COLLATE NOCASE  WHEN ((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)) THEN vt2.c1 ELSE CAST(vt2.c0 AS TEXT) END))) ORDER BY PRINTF(((vt2.c1)<>(vt2.c0))), ((((vt2.c0)%(vt2.c1)))IS NOT(((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))), (((vt2.c0, vt2.c1, NULL)) NOT BETWEEN (((- (0.2511590509045333)), CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 ELSE NULL END, ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) AND ((((vt2.c1)<(vt2.c1)), CASE WHEN -1.727422081E9 THEN vt2.c0 ELSE vt2.c1 END, CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))) ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt2 WHERE (((((vt2.c0)%(vt2.c0)))<<(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END))) ORDER BY PRINTF(((vt2.c1)!=(vt2.c0))), ((((vt2.c0)%(vt2.c1)))IS NOT(((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))), (((vt2.c0, vt2.c1, NULL)) NOT BETWEEN (((- (0.2511590509045333)), CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 ELSE NULL END, ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) AND ((((vt2.c1)<(vt2.c1)), CASE WHEN -1.727422081E9 THEN vt2.c0 ELSE vt2.c1 END, CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))) ASC  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE (LIKELIHOOD(((vt2.c1) BETWEEN (vt2.c1) AND (x'')), vt2.c0 COLLATE NOCASE));
SELECT * FROM vt2 WHERE (((CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END)+((+ (vt2.c1)))));
SELECT DISTINCT * FROM vt2 WHERE (((((CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END)+((+ (vt2.c1)))))AND(0.22726439220169226)));
SELECT * FROM vt2 WHERE (((CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END)+((+ (vt2.c1)))));
SELECT DISTINCT * FROM vt2 WHERE (((((CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END)+((+ (vt2.c1)))))AND(0.22726439220169226)));
SELECT * FROM vt0 WHERE ((~ (HEX(vt0.c0)))) ORDER BY ((vt0.c0)+(((vt0.c0) IS FALSE))) DESC  NULLS FIRST, CASE WHEN load_extension(vt0.c0) THEN vt0.c0 COLLATE NOCASE ELSE ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) END DESC, (((((((((((((vt0.c0)OR(vt0.c0)))OR('214129716')))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))))<((vt0.c0 COLLATE RTRIM))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((~ (HEX(vt0.c0)))) ORDER BY (NOT (((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))) DESC  NULLS LAST, ((vt0.c0 COLLATE NOCASE)!=(CAST(vt0.c0 AS TEXT))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (NULLIF(vt0.c0, vt0.c0)) ORDER BY (NOT (((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))) DESC  NULLS LAST, ((vt0.c0 COLLATE NOCASE)!=(CAST(vt0.c0 AS TEXT))) ASC  NULLS LAST;
SELECT * FROM vt0 WHERE ((~ (HEX(vt0.c0)))) ORDER BY ((vt0.c0)+(((vt0.c0) IS FALSE))) DESC  NULLS FIRST, CASE WHEN load_extension(vt0.c0) THEN vt0.c0 COLLATE NOCASE ELSE ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) END DESC, (((((((((((((vt0.c0)OR(vt0.c0)))OR('214129716')))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))))<((vt0.c0 COLLATE RTRIM))) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE (((((((((v0.c0)AND(v0.c1)))OR(NULL)))AND('MsKkg饍')))!=((~ (vt2.c1))))) ORDER BY ((LOWER(DISTINCT vt2.c1))%((v0.c0 IN ())));
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE (((((((((v0.c0)AND(v0.c1)))OR(NULL)))AND('MsKkg饍')))<>((~ (vt2.c1))))) ORDER BY ((LOWER(DISTINCT vt2.c1))%((v0.c0 IN ()))) LIMIT 0;
SELECT * FROM vt2 WHERE ((((vt2.c1, vt2.c1, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1, ((vt2.c0) NOTNULL), ((vt2.c1)||(vt2.c0)))) AND ((NULL, vt2.c1, CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END, CAST(vt2.c0 AS TEXT)))));
SELECT * FROM vt2 WHERE ((((((vt2.c1, vt2.c1, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1, ((vt2.c0) NOTNULL), ((vt2.c1)||(vt2.c0)))) AND ((NULL, vt2.c1, CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END, CAST(vt2.c0 AS TEXT)))))AND(vt2.c1))) LIMIT 0x4;
SELECT * FROM vt2 WHERE ((((vt2.c1, vt2.c1, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1, ((vt2.c0) NOTNULL), ((vt2.c1)||(vt2.c0)))) AND ((NULL, vt2.c1, CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END, CAST(vt2.c0 AS TEXT)))));
SELECT * FROM vt2 WHERE ((((((vt2.c1, vt2.c1, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1, ((vt2.c0) NOTNULL), ((vt2.c1)||(vt2.c0)))) AND ((NULL, vt2.c1, CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END, CAST(vt2.c0 AS TEXT)))))AND(vt2.c1))) LIMIT 0x4;
SELECT ALL * FROM vt2 WHERE (((CAST(vt2.c1 AS BLOB))|(CASE vt2.c1  WHEN vt2.c0 THEN -223700063 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END))) ORDER BY (((((((vt2.c1 IN (vt2.c0)))OR(json_array(vt2.c1, vt2.c1))))OR(((vt2.c0)|(vt2.c0)))))AND(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))), ((vt2.c0) NOT NULL), CASE WHEN vt2.c0 THEN ((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)) WHEN json_patch(vt2.c1, vt2.c0) THEN vt2.c0 COLLATE RTRIM WHEN ((vt2.c1)IS(vt2.c1)) THEN 0.8011817111702896 ELSE LOWER(vt2.c1) END ASC  NULLS FIRST, CAST(((vt2.c1) NOTNULL) AS INTEGER);
SELECT * FROM vt2 WHERE (((CAST(vt2.c1 AS BLOB))|(CASE vt2.c1  WHEN vt2.c0 THEN -223700063 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END))) ORDER BY (((((((vt2.c1 IN (vt2.c0)))OR(json_array(vt2.c1, vt2.c1))))OR(((vt2.c0)|(vt2.c0)))))AND(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))), ((vt2.c0) NOT NULL), CASE WHEN vt2.c0 THEN ((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)) WHEN json_patch(vt2.c1, vt2.c0) THEN vt2.c0 COLLATE RTRIM WHEN ((vt2.c1)IS(vt2.c1)) THEN 0.8011817111702896 ELSE LOWER(vt2.c1) END ASC  NULLS FIRST, CAST(((vt2.c1) NOTNULL) AS INTEGER) INTERSECT SELECT * FROM vt2 WHERE (CAST(((vt2.c1)GLOB(vt2.c0)) AS REAL)) ORDER BY (((((((vt2.c1 IN (vt2.c0)))OR(json_array(vt2.c1, vt2.c1))))OR(((vt2.c0)|(vt2.c0)))))AND(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))), ((vt2.c0) NOT NULL), CASE WHEN vt2.c0 THEN ((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)) WHEN json_patch(vt2.c1, vt2.c0) THEN vt2.c0 COLLATE RTRIM WHEN ((vt2.c1)IS(vt2.c1)) THEN 0.8011817111702896 ELSE LOWER(vt2.c1) END ASC  NULLS FIRST, CAST(((vt2.c1) NOTNULL) AS INTEGER);
SELECT ALL * FROM vt2 WHERE (((CAST(vt2.c1 AS BLOB))|(CASE vt2.c1  WHEN vt2.c0 THEN -223700063 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END))) ORDER BY (((((((vt2.c1 IN (vt2.c0)))OR(json_array(vt2.c1, vt2.c1))))OR(((vt2.c0)|(vt2.c0)))))AND(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))), ((vt2.c0) NOT NULL), CASE WHEN vt2.c0 THEN ((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)) WHEN json_patch(vt2.c1, vt2.c0) THEN vt2.c0 COLLATE RTRIM WHEN ((vt2.c1)IS(vt2.c1)) THEN 0.8011817111702896 ELSE LOWER(vt2.c1) END ASC  NULLS FIRST, CAST(((vt2.c1) NOTNULL) AS INTEGER);
SELECT MAX(v0.c3) FROM vt0 LEFT OUTER JOIN vt2 ON (((x'bc2ebce1'))<((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1))))) CROSS JOIN v0 ON CASE WHEN ((v0.c0)||(vt0.c0)) THEN UNICODE(v0.c1) WHEN 0.9579803614837084 THEN v0.c3 END WHERE ((('0.10198547391247059')<<((((v0.c2)) BETWEEN ((x'')) AND ((v0.c3))))));
SELECT DISTINCT MAX(v0.c3) FROM vt0 INNER JOIN vt2 ON (((x'bc2ebce1'))<((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1))))) CROSS JOIN v0 ON CASE WHEN ((v0.c0)||(vt0.c0)) THEN UNICODE(v0.c1) WHEN 0.9579803614837084 THEN v0.c3 END WHERE ((((('0.10198547391247059')<<((((v0.c2)) BETWEEN ((x'')) AND ((v0.c3))))))AND(CAST(LOWER(vt2.c0) AS TEXT)))) ORDER BY (((vt0.c0, v0.c0, vt2.c1)) NOT BETWEEN (((NOT (vt0.c0)), ((v0.c1)IS(vt2.c0)), (('') NOT NULL))) AND ((((v0.c0)+(v0.c1)), x'', ((v0.c2) NOT BETWEEN (vt2.c1) AND (vt0.c0))))) ASC  NULLS LAST LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(v0.c3) FROM vt0 INNER JOIN vt2 ON (((x'bc2ebce1'))<((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1))))) CROSS JOIN v0 ON CASE WHEN ((v0.c0)||(vt0.c0)) THEN UNICODE(v0.c1) WHEN 0.9579803614837084 THEN v0.c3 END WHERE (x'fd') ORDER BY (((vt0.c0, v0.c0, vt2.c1)) NOT BETWEEN (((NOT (vt0.c0)), ((v0.c1)IS(vt2.c0)), (('') NOT NULL))) AND ((((v0.c0)+(v0.c1)), x'', ((v0.c2) NOT BETWEEN (vt2.c1) AND (vt0.c0))))) ASC  NULLS LAST LIMIT 0x1;
SELECT ALL MAX(vt0.c0) FROM vt0, vt2 WHERE ((NOT (((x'b1c425') IS FALSE)))) ORDER BY x'1d99' ASC  NULLS LAST;
SELECT MAX(vt0.c0) FROM vt0, vt2 WHERE ((((NOT (((x'b1c425') IS FALSE))))AND(vt0.c0))) ORDER BY x'1d99' ASC  NULLS LAST;
SELECT COUNT(*) FROM vt0, v0 WHERE ((((NOT (v0.c3)))<=(CASE v0.c0  WHEN v0.c0 THEN v0.c3 END)));
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE ((((NOT (v0.c3)))<=(CASE v0.c0  WHEN v0.c0 THEN v0.c3 END))) ORDER BY '()' DESC  NULLS FIRST, CAST(UNLIKELY(DISTINCT vt0.c0) AS NUMERIC)  NULLS FIRST LIMIT 0X3 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (CAST((((v0.c0, v0.c3)) NOT BETWEEN ((vt0.c0, v0.c0)) AND ((v0.c3, v0.c1))) AS BLOB)) ORDER BY '()' DESC  NULLS FIRST, CAST(UNLIKELY(DISTINCT vt0.c0) AS NUMERIC)  NULLS FIRST LIMIT 3;
SELECT ALL MIN(v0.c0) FROM v0, vt0 WHERE (UPPER(((x'') NOT NULL)));
SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE (UPPER(((x'') NOT NULL))) ORDER BY ((+ (vt0.c0)) IN ()) DESC  NULLS FIRST, ((CAST(v0.c3 AS INTEGER))<>(((vt0.c0)<(v0.c0)))) ASC, v0.c1 COLLATE NOCASE COLLATE BINARY DESC INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE (((v0.c3 COLLATE BINARY)||((((vt0.c0, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1)) AND ((v0.c2, v0.c3)))))) ORDER BY ((+ (vt0.c0)) IN ()) DESC  NULLS FIRST, ((CAST(v0.c3 AS INTEGER))!=(((vt0.c0)<(v0.c0)))) ASC, v0.c1 COLLATE NOCASE COLLATE BINARY DESC;
SELECT * FROM vt2 WHERE ((NOT (((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1))))) ORDER BY 0Xffffffffb07ba157 DESC  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) WHEN NULL THEN 0X7412a12c WHEN ((vt2.c0)>=(vt2.c0)) THEN ((vt2.c1)<<(vt2.c0)) WHEN (- (vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) WHEN ((vt2.c1) BETWEEN ('캢4䤵E') AND (x'2bef')) THEN (((((((('lw')AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)) ELSE ((vt2.c0)%(vt2.c0)) END;
SELECT ALL * FROM vt2 WHERE ((((NOT (((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))))AND((((HEX(DISTINCT vt2.c0)))<=((((vt2.c0)GLOB(vt2.c0)))))))) ORDER BY -1334075049 DESC  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) WHEN NULL THEN 0x7412a12c WHEN ((vt2.c0)>=(vt2.c0)) THEN ((vt2.c1)<<(vt2.c0)) WHEN (- (vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) WHEN ((vt2.c1) BETWEEN ('캢4䤵E') AND (x'2bef')) THEN (((((((('lw')AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)) ELSE ((vt2.c0)%(vt2.c0)) END LIMIT 3 INTERSECT SELECT ALL * FROM vt2 WHERE (NULL) ORDER BY -1334075049 DESC  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) WHEN NULL THEN 0X7412a12c WHEN ((vt2.c0)>=(vt2.c0)) THEN ((vt2.c1)<<(vt2.c0)) WHEN (- (vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) WHEN ((vt2.c1) BETWEEN ('캢4䤵E') AND (x'2bef')) THEN (((((((('lw')AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)) ELSE ((vt2.c0)%(vt2.c0)) END LIMIT 3;
SELECT * FROM vt2 WHERE ((NOT (((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1))))) ORDER BY 0Xffffffffb07ba157 DESC  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) WHEN NULL THEN 0X7412a12c WHEN ((vt2.c0)>=(vt2.c0)) THEN ((vt2.c1)<<(vt2.c0)) WHEN (- (vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) WHEN ((vt2.c1) BETWEEN ('캢4䤵E') AND (x'2bef')) THEN (((((((('lw')AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)) ELSE ((vt2.c0)%(vt2.c0)) END;
SELECT ALL * FROM vt2 WHERE ((((NOT (((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))))AND((((HEX(DISTINCT vt2.c0)))<=((((vt2.c0)GLOB(vt2.c0)))))))) ORDER BY -1334075049 DESC  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) WHEN NULL THEN 0x7412a12c WHEN ((vt2.c0)>=(vt2.c0)) THEN ((vt2.c1)<<(vt2.c0)) WHEN (- (vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) WHEN ((vt2.c1) BETWEEN ('캢4䤵E') AND (x'2bef')) THEN (((((((('lw')AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)) ELSE ((vt2.c0)%(vt2.c0)) END LIMIT 3 INTERSECT SELECT ALL * FROM vt2 WHERE (NULL) ORDER BY -1334075049 DESC  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) WHEN NULL THEN 0X7412a12c WHEN ((vt2.c0)>=(vt2.c0)) THEN ((vt2.c1)<<(vt2.c0)) WHEN (- (vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) WHEN ((vt2.c1) BETWEEN ('캢4䤵E') AND (x'2bef')) THEN (((((((('lw')AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)) ELSE ((vt2.c0)%(vt2.c0)) END LIMIT 3;
SELECT MAX(v0.c3) FROM vt0, vt2, v0 WHERE ((((NOT (v0.c1))) NOTNULL)) ORDER BY (((((v0.c2, v0.c1)) NOT BETWEEN ((vt2.c1, v0.c3)) AND (('-833993359', 1291339797))))OR(((vt2.c0)OR('oKGC]ᚈ')))) ASC  NULLS LAST, (- ((v0.c0 IN (vt0.c0)))) ASC;
SELECT MAX(v0.c3) FROM vt0, vt2, v0 WHERE ((((((NOT (v0.c1))) NOTNULL))AND((((vt2.c0) ISNULL) IN (v0.c0))))) ORDER BY ((v0.c0) BETWEEN (vt2.c0) AND (CAST(v0.c3 AS NUMERIC)))  NULLS LAST LIMIT 0X0 INTERSECT SELECT ALL MAX(v0.c3) FROM vt0, vt2, v0 WHERE (((((((NULL)OR(v0.c0)))OR(vt2.c1)))OR(v0.c0)) COLLATE BINARY) ORDER BY ((v0.c0) BETWEEN (vt2.c0) AND (CAST(v0.c3 AS NUMERIC)))  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((((((((((NULL, NULL, v0.c2, vt0.c0))<((vt0.c0, 1561768249, vt2.c0, vt2.c1))))OR(0Xffffffffc5c53851)))AND(CAST(v0.c2 AS INTEGER))))OR(((v0.c3) NOT BETWEEN (NULL) AND (v0.c1)))))OR((+ (v0.c0))))) ORDER BY (((v0.c2, v0.c3, vt2.c1)) NOT BETWEEN ((CAST(vt0.c0 AS REAL), ((v0.c1) IS FALSE), CAST(vt2.c0 AS REAL))) AND (('r)', ((v0.c2) IS TRUE), (vt2.c1 IN (v0.c1, v0.c2)))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((((((((((((NULL, NULL, v0.c2, vt0.c0))<((vt0.c0, 0X5d16b139, vt2.c0, vt2.c1))))OR(0Xffffffffc5c53851)))AND(CAST(v0.c2 AS INTEGER))))OR(((v0.c3) NOT BETWEEN (NULL) AND (v0.c1)))))OR((+ (v0.c0)))))AND((- (((v0.c0) BETWEEN (v0.c1) AND (v0.c2))))))) ORDER BY ((0.8886624000749642) ISNULL) DESC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((((((((TYPEOF(vt2.c0))AND(vt0.c0 COLLATE NOCASE)))OR(vt2.c0)))AND(LIKELIHOOD(DISTINCT v0.c1, v0.c0))))AND(vt2.c0 COLLATE NOCASE))) ORDER BY ((0.8886624000749642) ISNULL) DESC  NULLS LAST LIMIT 1;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((((((((((NULL, NULL, v0.c2, vt0.c0))<((vt0.c0, 1561768249, vt2.c0, vt2.c1))))OR(0Xffffffffc5c53851)))AND(CAST(v0.c2 AS INTEGER))))OR(((v0.c3) NOT BETWEEN (NULL) AND (v0.c1)))))OR((+ (v0.c0))))) ORDER BY (((v0.c2, v0.c3, vt2.c1)) NOT BETWEEN ((CAST(vt0.c0 AS REAL), ((v0.c1) IS FALSE), CAST(vt2.c0 AS REAL))) AND (('r)', ((v0.c2) IS TRUE), (vt2.c1 IN (v0.c1, v0.c2)))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((((((((((((NULL, NULL, v0.c2, vt0.c0))<((vt0.c0, 0X5d16b139, vt2.c0, vt2.c1))))OR(0Xffffffffc5c53851)))AND(CAST(v0.c2 AS INTEGER))))OR(((v0.c3) NOT BETWEEN (NULL) AND (v0.c1)))))OR((+ (v0.c0)))))AND((- (((v0.c0) BETWEEN (v0.c1) AND (v0.c2))))))) ORDER BY ((0.8886624000749642) ISNULL) DESC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((((((((TYPEOF(vt2.c0))AND(vt0.c0 COLLATE NOCASE)))OR(vt2.c0)))AND(LIKELIHOOD(DISTINCT v0.c1, v0.c0))))AND(vt2.c0 COLLATE NOCASE))) ORDER BY ((0.8886624000749642) ISNULL) DESC  NULLS LAST LIMIT 1;
SELECT ALL MAX(vt0.c0) FROM vt0, vt2 WHERE ('-1701930788');
SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE ((('-1701930788')AND(((vt2.c0 COLLATE NOCASE) NOT BETWEEN ((((vt0.c0, vt2.c0))<((vt2.c0, vt2.c1)))) AND ((vt2.c0 IN ())))))) ORDER BY IFNULL(DISTINCT (vt2.c0 IN ()), CAST(vt2.c0 AS BLOB))  NULLS FIRST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 END)-((('m1?IIwl')GLOB(vt2.c0)))) INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE (((((vt2.c1))<((vt2.c0))) IN (CAST(vt2.c1 AS INTEGER)))) ORDER BY IFNULL(DISTINCT (vt2.c0 IN ()), CAST(vt2.c0 AS BLOB))  NULLS FIRST, ((CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 END)-((('m1?IIwl')GLOB(vt2.c0))));
SELECT * FROM v0 WHERE (0.27638570023133135);
SELECT ALL * FROM v0 WHERE (0.27638570023133135) LIMIT 0x2 INTERSECT SELECT ALL * FROM v0 WHERE ((((v0.c1))>((v0.c1))) COLLATE RTRIM COLLATE BINARY) LIMIT 0X2;
SELECT * FROM v0 WHERE (0.27638570023133135);
SELECT ALL * FROM v0 WHERE (0.27638570023133135) LIMIT 0x2 INTERSECT SELECT ALL * FROM v0 WHERE ((((v0.c1))>((v0.c1))) COLLATE RTRIM COLLATE BINARY) LIMIT 0X2;
SELECT COUNT(*) FROM vt0 WHERE ('|') ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))IS NOT((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, ',H')) AND ((vt0.c0, vt0.c0, vt0.c0)))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((('|')AND(((((((((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)OR((NOT (vt0.c0)))))OR(vt0.c0 COLLATE RTRIM)))AND(vt0.c0 COLLATE BINARY)))AND(vt0.c0 COLLATE NOCASE)))AND((vt0.c0 IN (vt0.c0))))))) ORDER BY ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))IS NOT((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, ',H')) AND ((vt0.c0, vt0.c0, vt0.c0)))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE ((((-1393259311) BETWEEN (vt0.c0) AND (v0.c3)) IN ())) ORDER BY ((v0.c0)<<(v0.c2)) COLLATE BINARY  NULLS LAST, LIKELY(DISTINCT '-1001701621' COLLATE RTRIM)  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE ((((-1393259311) BETWEEN (vt0.c0) AND (v0.c3)) IN ())) ORDER BY ((v0.c0)<<(v0.c2)) COLLATE BINARY  NULLS LAST, LIKELY(DISTINCT '-1001701621' COLLATE RTRIM)  NULLS LAST;
SELECT COUNT(*) FROM v0, vt2 WHERE (json_array_length(CASE v0.c2  WHEN vt2.c1 THEN NULL WHEN 'p7ꅿS' THEN v0.c1 WHEN v0.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c2 END));
SELECT DISTINCT COUNT(*) FROM v0, vt2 WHERE (json_array_length(CASE v0.c2  WHEN vt2.c1 THEN NULL WHEN 'p7ꅿS' THEN v0.c1 WHEN v0.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c2 END)) ORDER BY CAST(((v0.c2)-(v0.c2)) AS REAL) ASC  NULLS LAST, ((((((((((((v0.c3)AND(v0.c3)))OR(vt2.c0)))OR(v0.c0)))OR(v0.c3)))OR(vt2.c0)))>(ABS(v0.c2)))  NULLS FIRST LIMIT 0X2;
SELECT * FROM v0 WHERE ((- (x'9b')));
SELECT * FROM v0 WHERE ((- (x'9b'))) ORDER BY rtreenode(v0.c0, CASE v0.c2  WHEN v0.c2 THEN v0.c3 ELSE x'8b' END)  NULLS FIRST, (((((((v0.c1)OR(v0.c1)))OR(v0.c3))))>=((((v0.c1) BETWEEN (v0.c1) AND (v0.c2))))) LIMIT 0X3;
SELECT * FROM v0 WHERE ((- (x'9b')));
SELECT * FROM v0 WHERE ((- (x'9b'))) ORDER BY rtreenode(v0.c0, CASE v0.c2  WHEN v0.c2 THEN v0.c3 ELSE x'8b' END)  NULLS FIRST, (((((((v0.c1)OR(v0.c1)))OR(v0.c3))))>=((((v0.c1) BETWEEN (v0.c1) AND (v0.c2))))) LIMIT 0X3;
SELECT COUNT(*) FROM vt2 WHERE (CASE WHEN QUOTE(vt2.c1) THEN 0.8279342458812285 WHEN (~ (vt2.c1)) THEN ((vt2.c1) NOTNULL) ELSE ((vt2.c0)+(vt2.c1)) END) ORDER BY (((((NOT (vt2.c0)))OR(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0) ISNULL))), CASE CAST(vt2.c1 AS INTEGER)  WHEN (((vt2.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c0))) THEN (+ (vt2.c0)) ELSE vt2.c1 COLLATE BINARY END ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (CASE WHEN QUOTE(vt2.c1) THEN 0.8279342458812285 WHEN (~ (vt2.c1)) THEN ((vt2.c1) NOTNULL) ELSE ((vt2.c0)+(vt2.c1)) END) ORDER BY (((((((vt2.c0)AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)) IN (((vt2.c1)|(vt2.c1))))  NULLS LAST, (((vt2.c0 IN (vt2.c1)))IS NOT((vt2.c1 IN (vt2.c1, vt2.c0)))) ASC  NULLS LAST;
SELECT ALL MIN(vt2.c1) FROM vt2, v0 WHERE (MAX(v0.c1, v0.c3, v0.c0, v0.c3) COLLATE BINARY);
SELECT DISTINCT MIN(vt2.c1) FROM vt2, v0 WHERE (((MAX(v0.c1, v0.c3, v0.c0, v0.c3) COLLATE BINARY)AND((- (((v0.c0)&(vt2.c1))))))) ORDER BY (vt2.c1 IN (vt2.c0)) COLLATE BINARY  NULLS FIRST, v0.c0  NULLS LAST, (((- (0.8791849149681894)))IS((v0.c0 IN (v0.c3)))) DESC LIMIT 0X0 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2, v0 WHERE (NULL) ORDER BY (vt2.c1 IN (vt2.c0)) COLLATE BINARY  NULLS FIRST, v0.c0  NULLS LAST, (((- (0.8791849149681894)))IS((v0.c0 IN (v0.c3)))) DESC LIMIT 0X0;
SELECT COUNT(*) FROM vt0, vt2 INNER JOIN v0 ON ((- (v0.c3)) IN ()) WHERE (CAST(vt2.c0 COLLATE RTRIM AS NUMERIC)) ORDER BY (~ (CAST(v0.c2 AS REAL))) DESC, (((vt2.c1))=((vt0.c0))) COLLATE BINARY ASC;
SELECT ALL COUNT(*) FROM vt0, vt2 INNER JOIN v0 ON ((- (v0.c3)) IN ()) WHERE (((CAST(vt2.c0 COLLATE RTRIM AS NUMERIC))AND('-388835817'))) ORDER BY CASE WHEN (((v0.c1))<=((vt2.c0))) THEN vt2.c1 COLLATE BINARY WHEN ((vt2.c0)%(v0.c2)) THEN ((((((vt2.c0)OR(v0.c2)))OR(v0.c1)))OR(vt2.c1)) END DESC, 0xffffffffa53a3560  NULLS LAST LIMIT 0X3 INTERSECT SELECT ALL COUNT(*) FROM vt0, vt2 INNER JOIN v0 ON ((- (v0.c3)) IN ()) WHERE (((1194602412)LIKE(vt2.c1))) ORDER BY CASE WHEN (((v0.c1))<=((vt2.c0))) THEN vt2.c1 COLLATE BINARY WHEN ((vt2.c0)%(v0.c2)) THEN ((((((vt2.c0)OR(v0.c2)))OR(v0.c1)))OR(vt2.c1)) END DESC, -1522911904  NULLS LAST LIMIT 3;
SELECT MIN(v0.c1) FROM v0 LEFT OUTER JOIN vt0 ON (('(Opm(')<=(((v0.c2)>>(v0.c0)))) WHERE (((((v0.c3) IS TRUE)) NOT BETWEEN (((((((v0.c0)OR(x'f042')))AND(v0.c3)))AND(v0.c2))) AND ((- (v0.c1)))));
SELECT MIN(v0.c1) FROM v0 INNER JOIN vt0 ON (('(Opm(')<=(((v0.c2)>>(v0.c0)))) WHERE (((((((v0.c3) IS TRUE)) NOT BETWEEN (((((((v0.c0)OR(x'f042')))AND(v0.c3)))AND(v0.c2))) AND ((- (v0.c1)))))AND(CAST(vt0.c0 COLLATE BINARY AS REAL)))) INTERSECT SELECT MIN(v0.c1) FROM v0 INNER JOIN vt0 ON (('(Opm(')<=(((v0.c2)>>(v0.c0)))) WHERE (((((v0.c0)%(v0.c0))) BETWEEN (((vt0.c0)*(v0.c0))) AND (((v0.c3)<=(v0.c0)))));
SELECT COUNT(*) FROM vt2, v0 WHERE (((((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c0))) BETWEEN ((v0.c0 IN (v0.c2))) AND (((vt2.c0)IS NOT(v0.c2))))) ORDER BY x'5d', (((- (v0.c3))) IS FALSE) ASC, x'' DESC;
SELECT COUNT(*) FROM vt2, v0 WHERE (((((((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c0))) BETWEEN ((v0.c0 IN (v0.c2))) AND (((vt2.c0)IS NOT(v0.c2)))))AND(CAST('480101677' AS TEXT)))) ORDER BY x'5d', (((- (v0.c3))) IS FALSE) ASC, x'' DESC LIMIT 0X3;
SELECT ALL MAX(v0.c2) FROM vt2, v0 WHERE (vt2.c0);
SELECT DISTINCT MAX(v0.c2) FROM vt2, v0 WHERE (vt2.c0) ORDER BY ((((vt2.c1)IS NOT('1360437288')))OR(((((v0.c3)OR(v0.c2)))AND(NULL))))  NULLS FIRST, ((v0.c2 IN ()) IN (((v0.c2)>>(v0.c1))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (CAST(((v0.c1) NOT BETWEEN (v0.c1) AND (vt0.c0)) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (CAST(((v0.c1) NOT BETWEEN (v0.c1) AND (vt0.c0)) AS NUMERIC)) ORDER BY (+ ((+ (vt2.c1))))  NULLS FIRST, ((((((((v0.c0)AND(vt2.c0)))OR(v0.c1)))AND(vt0.c0))) ISNULL) ASC LIMIT 3 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE ('526554451') ORDER BY (+ ((+ (vt2.c1))))  NULLS FIRST, ((((((((v0.c0)AND(vt2.c0)))OR(v0.c1)))AND(vt0.c0))) ISNULL) ASC LIMIT 3;
SELECT COUNT(*) FROM vt2, v0 WHERE (((CAST(vt2.c0 AS REAL)) NOT NULL)) ORDER BY 'TC_SjHB/z' COLLATE RTRIM DESC  NULLS LAST, ((((vt2.c0)>=(vt2.c1))) IS TRUE) DESC, CASE WHEN v0.c3 THEN ((v0.c2) BETWEEN (vt2.c0) AND (v0.c2)) WHEN ((v0.c1)-(0x2a6ef6da)) THEN ((v0.c1) IS TRUE) ELSE (((v0.c3)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))) END  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE (((CAST(vt2.c0 AS REAL)) NOT NULL)) ORDER BY (v0.c0 IN (NULL, v0.c3)) COLLATE NOCASE, v0.c3  NULLS FIRST LIMIT 0x2;
SELECT MAX(vt0.c0) FROM vt0 LEFT OUTER JOIN vt2 ON vt0.c0 INNER JOIN v0 ON ((((v0.c0) NOT NULL))OR((+ (v0.c3)))) WHERE (DATETIME(MIN(vt2.c1, v0.c0, v0.c3, vt2.c0), ((((vt2.c1)AND(vt0.c0)))AND(vt2.c1)), vt2.c1 COLLATE BINARY));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 INNER JOIN vt2 ON vt0.c0 INNER JOIN v0 ON ((((v0.c0) NOT NULL))OR((+ (v0.c3)))) WHERE (DATETIME(MIN(vt2.c1, v0.c0, v0.c3, vt2.c0), ((((vt2.c1)AND(vt0.c0)))AND(vt2.c1)), vt2.c1 COLLATE BINARY)) ORDER BY ((vt0.c0) NOT BETWEEN ((v0.c3 IN (v0.c1))) AND (v0.c2 COLLATE NOCASE)) ASC INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 INNER JOIN vt2 ON vt0.c0 INNER JOIN v0 ON ((((v0.c0) NOT NULL))OR((+ (v0.c3)))) WHERE (((CHAR(v0.c1, '3K')) NOT NULL)) ORDER BY ((vt0.c0) NOT BETWEEN ((v0.c3 IN (v0.c1))) AND (v0.c2 COLLATE NOCASE)) ASC;
SELECT MIN(vt0.c0) FROM vt0 WHERE (CAST((NULL IN (vt0.c0)) AS TEXT)) ORDER BY CAST(vt0.c0 COLLATE BINARY AS INTEGER);
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((CAST((NULL IN (vt0.c0)) AS TEXT))AND(((vt0.c0)IS(((vt0.c0)<=(vt0.c0))))))) ORDER BY CAST(vt0.c0 COLLATE BINARY AS INTEGER) LIMIT 3 INTERSECT SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((vt0.c0)AND(NULL)))OR(vt0.c0)))GLOB(vt0.c0 COLLATE BINARY))) ORDER BY CAST(vt0.c0 COLLATE BINARY AS INTEGER) LIMIT 3;
SELECT COUNT(*) FROM v0 WHERE (CAST((~ (x'00')) AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((CAST((~ (x'00')) AS NUMERIC))AND(UNLIKELY(0.484481988986626 COLLATE BINARY)))) ORDER BY v0.c3 DESC, (- ((('-1101213040') NOT NULL))), CASE WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c0)) WHEN CAST(v0.c2 AS NUMERIC) THEN (+ (v0.c0)) ELSE CAST(v0.c0 AS TEXT) END DESC LIMIT 0X1;
SELECT * FROM vt0 WHERE ((((((vt0.c0) ISNULL), ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0))))>(((vt0.c0 IN (vt0.c0, vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0))))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0) ISNULL), ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0))))>(((vt0.c0 IN (vt0.c0, vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))))) ORDER BY ((vt0.c0) NOTNULL) COLLATE RTRIM COLLATE NOCASE DESC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c0 AS NUMERIC) COLLATE NOCASE) ORDER BY ((vt0.c0) NOTNULL) COLLATE RTRIM COLLATE NOCASE DESC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt0 WHERE ((((((vt0.c0) ISNULL), ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0))))>(((vt0.c0 IN (vt0.c0, vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0))))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0) ISNULL), ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0))))>(((vt0.c0 IN (vt0.c0, vt0.c0)), ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))))) ORDER BY ((vt0.c0) NOTNULL) COLLATE RTRIM COLLATE NOCASE DESC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(vt0.c0 AS NUMERIC) COLLATE NOCASE) ORDER BY ((vt0.c0) NOTNULL) COLLATE RTRIM COLLATE NOCASE DESC  NULLS FIRST LIMIT 0x1;
SELECT * FROM v0, vt2 WHERE (((((((((vt2.c0)OR(v0.c0)))OR(((0.023694149166923695) NOTNULL))))OR(v0.c2)))OR(((((v0.c0)AND(v0.c0)))AND(v0.c2)))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((((((vt2.c0)OR(v0.c0)))OR(((0.023694149166923695) NOTNULL))))OR(v0.c2)))OR(((((v0.c0)AND(v0.c0)))AND(v0.c2))))) ORDER BY v0.c2 ASC, TYPEOF(DISTINCT COALESCE(v0.c1, v0.c1, vt2.c0)) ASC LIMIT 0X4 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (TYPEOF(((v0.c1) IS FALSE))) ORDER BY v0.c2 ASC, TYPEOF(DISTINCT COALESCE(v0.c1, v0.c1, vt2.c0)) ASC LIMIT 4;
SELECT * FROM v0, vt2 WHERE (((((((((vt2.c0)OR(v0.c0)))OR(((0.023694149166923695) NOTNULL))))OR(v0.c2)))OR(((((v0.c0)AND(v0.c0)))AND(v0.c2)))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((((((vt2.c0)OR(v0.c0)))OR(((0.023694149166923695) NOTNULL))))OR(v0.c2)))OR(((((v0.c0)AND(v0.c0)))AND(v0.c2))))) ORDER BY v0.c2 ASC, TYPEOF(DISTINCT COALESCE(v0.c1, v0.c1, vt2.c0)) ASC LIMIT 0X4 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (TYPEOF(((v0.c1) IS FALSE))) ORDER BY v0.c2 ASC, TYPEOF(DISTINCT COALESCE(v0.c1, v0.c1, vt2.c0)) ASC LIMIT 4;
SELECT ALL COUNT(*) FROM vt2, v0 WHERE (LIKELY(0.17699442494089923) COLLATE BINARY);
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE (((LIKELY(0.17699442494089923) COLLATE BINARY)AND(((((vt2.c0) NOTNULL))||(((v0.c3)<=(v0.c3))))))) LIMIT 0X3;
SELECT ALL MIN(vt2.c1) FROM vt0 NATURAL JOIN vt2 WHERE (((CAST(vt2.c0 AS BLOB)) NOT NULL)) ORDER BY CAST(CASE WHEN '%' THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN x'a686' THEN 0.45939357815304416 END AS TEXT) DESC, (vt2.c0 IN (CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 END)) ASC;
SELECT ALL MIN(vt2.c1) FROM vt0 NATURAL JOIN vt2 WHERE (((CAST(vt2.c0 AS BLOB)) NOT NULL)) ORDER BY ((((0.6331917594183)AND((+ (vt0.c0)))))OR((~ (vt0.c0))))  NULLS LAST, 0Xffffffffdc623cac DESC INTERSECT SELECT ALL MIN(vt2.c1) FROM vt0 NATURAL JOIN vt2 WHERE (((vt0.c0) BETWEEN (((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0))) AND ((((vt0.c0, vt2.c1, vt2.c0))<>((vt2.c1, vt0.c0, vt2.c1)))))) ORDER BY ((((0.6331917594183)AND((+ (vt0.c0)))))OR((~ (vt0.c0))))  NULLS LAST, 0xffffffffdc623cac DESC;
SELECT ALL MAX(vt2.c1) FROM vt2, v0 WHERE (((vt2.c1 IN (vt2.c1, vt2.c0)) IN (((vt2.c1)IS(v0.c3))))) ORDER BY LAST_INSERT_ROWID()  NULLS FIRST, (((+ (NULL)))||((((v0.c3)) BETWEEN ((v0.c3)) AND ((v0.c3)))))  NULLS FIRST, (((((((((('-2133440203')OR(v0.c3)))OR(vt2.c1)))OR(vt2.c0)))OR('⣴')))AND((v0.c1 IN ()))) ASC;
SELECT ALL MAX(vt2.c1) FROM vt2, v0 WHERE (((vt2.c1 IN (vt2.c1, vt2.c0)) IN (((vt2.c1)IS(v0.c3))))) ORDER BY LAST_INSERT_ROWID()  NULLS FIRST, (((+ (NULL)))||((((v0.c3)) BETWEEN ((v0.c3)) AND ((v0.c3)))))  NULLS FIRST, (((((((((('-2133440203')OR(v0.c3)))OR(vt2.c1)))OR(vt2.c0)))OR('⣴')))AND((v0.c1 IN ()))) ASC LIMIT 3;
SELECT MIN(vt0.c0) FROM vt0 WHERE (vt0.c0) ORDER BY (((vt0.c0 IN ())) NOT NULL), (NOT (x'e536')) COLLATE NOCASE ASC  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((vt0.c0)AND((CHAR('-1473453817') IN (((vt0.c0)|(vt0.c0))))))) ORDER BY CASE WHEN IFNULL(DISTINCT vt0.c0, vt0.c0) THEN UPPER(vt0.c0) WHEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END  NULLS LAST, (((vt0.c0)/(vt0.c0)) IN ()), ABS(DISTINCT (+ (vt0.c0)))  NULLS FIRST LIMIT 0X2 INTERSECT SELECT MIN(vt0.c0) FROM vt0 WHERE ((((3.82198455E8) NOT BETWEEN (-2011619333) AND (vt0.c0)) IN (vt0.c0 COLLATE NOCASE, vt0.c0 COLLATE NOCASE))) ORDER BY CASE WHEN IFNULL(DISTINCT vt0.c0, vt0.c0) THEN UPPER(vt0.c0) WHEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END  NULLS LAST, (((vt0.c0)/(vt0.c0)) IN ()), ABS(DISTINCT (+ (vt0.c0)))  NULLS FIRST LIMIT 2;
SELECT * FROM vt2 WHERE ((~ (((vt2.c0) NOTNULL))));
SELECT DISTINCT * FROM vt2 WHERE ((~ (((vt2.c0) NOTNULL)))) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN x'' THEN x'69' WHEN vt2.c1 THEN vt2.c0 END)!=(json_patch(vt2.c1, vt2.c0))));
SELECT * FROM vt2 WHERE ((~ (((vt2.c0) NOTNULL))));
SELECT DISTINCT * FROM vt2 WHERE ((~ (((vt2.c0) NOTNULL)))) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN x'' THEN x'69' WHEN vt2.c1 THEN vt2.c0 END)!=(json_patch(vt2.c1, vt2.c0))));
SELECT * FROM vt0, v0 WHERE (((((((((((((vt0.c0)||(NULL)))OR((((v0.c1, v0.c2)) NOT BETWEEN ((v0.c0, 'pQ')) AND ((v0.c0, v0.c1))))))OR(((v0.c0) IS FALSE))))AND((+ (v0.c0)))))AND(CASE vt0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN 0.5474180511382759 ELSE v0.c0 END)))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt0.c0 WHEN vt0.c0 THEN v0.c2 WHEN v0.c1 THEN vt0.c0 ELSE v0.c2 END))) ORDER BY LOWER((v0.c2 IN (v0.c3))), (v0.c0 IN (v0.c3)) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE (((((((((((((((vt0.c0)||(NULL)))OR((((v0.c1, v0.c2)) NOT BETWEEN ((v0.c0, 'pQ')) AND ((v0.c0, v0.c1))))))OR(((v0.c0) IS FALSE))))AND((+ (v0.c0)))))AND(CASE vt0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN 0.5474180511382759 ELSE v0.c0 END)))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt0.c0 WHEN vt0.c0 THEN v0.c2 WHEN v0.c1 THEN vt0.c0 ELSE v0.c2 END)))AND('622132295'))) ORDER BY ((v0.c1)&(CAST(v0.c3 AS INTEGER)))  NULLS FIRST INTERSECT SELECT ALL * FROM vt0, v0 WHERE ((((~ (v0.c3)))OR(((v0.c2)|(v0.c1))))) ORDER BY ((v0.c1)&(CAST(v0.c3 AS INTEGER)))  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE (((((((((((((vt0.c0)||(NULL)))OR((((v0.c1, v0.c2)) NOT BETWEEN ((v0.c0, 'pQ')) AND ((v0.c0, v0.c1))))))OR(((v0.c0) IS FALSE))))AND((+ (v0.c0)))))AND(CASE vt0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN 0.5474180511382759 ELSE v0.c0 END)))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt0.c0 WHEN vt0.c0 THEN v0.c2 WHEN v0.c1 THEN vt0.c0 ELSE v0.c2 END))) ORDER BY LOWER((v0.c2 IN (v0.c3))), (v0.c0 IN (v0.c3)) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE (((((((((((((((vt0.c0)||(NULL)))OR((((v0.c1, v0.c2)) NOT BETWEEN ((v0.c0, 'pQ')) AND ((v0.c0, v0.c1))))))OR(((v0.c0) IS FALSE))))AND((+ (v0.c0)))))AND(CASE vt0.c0  WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN 0.5474180511382759 ELSE v0.c0 END)))OR(CASE v0.c0  WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt0.c0 WHEN vt0.c0 THEN v0.c2 WHEN v0.c1 THEN vt0.c0 ELSE v0.c2 END)))AND('622132295'))) ORDER BY ((v0.c1)&(CAST(v0.c3 AS INTEGER)))  NULLS FIRST INTERSECT SELECT ALL * FROM vt0, v0 WHERE ((((~ (v0.c3)))OR(((v0.c2)|(v0.c1))))) ORDER BY ((v0.c1)&(CAST(v0.c3 AS INTEGER)))  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((QUOTE(x'ca') IN (-1085696835)));
SELECT DISTINCT * FROM vt2 WHERE ((((QUOTE(x'ca') IN (-1085696835)))AND(((((((((((((((((((((((NULL)OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(CASE x'3b76aa'  WHEN vt2.c0 THEN vt2.c0 END)))OR(vt2.c0)))AND(((vt2.c0)&(vt2.c1)))))OR((- (vt2.c1)))))OR((((vt2.c1, vt2.c0))<>((vt2.c0, vt2.c1))))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (x''))))))) INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((vt2.c0)LIKE(vt2.c1)) IN ()));
SELECT ALL * FROM vt2 WHERE ((QUOTE(x'ca') IN (-1085696835)));
SELECT DISTINCT * FROM vt2 WHERE ((((QUOTE(x'ca') IN (-1085696835)))AND(((((((((((((((((((((((NULL)OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(CASE x'3b76aa'  WHEN vt2.c0 THEN vt2.c0 END)))OR(vt2.c0)))AND(((vt2.c0)&(vt2.c1)))))OR((- (vt2.c1)))))OR((((vt2.c1, vt2.c0))<>((vt2.c0, vt2.c1))))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (x''))))))) INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((vt2.c0)LIKE(vt2.c1)) IN ()));
SELECT * FROM vt2 WHERE ('-2008470655');
SELECT * FROM vt2 WHERE ('-2008470655') LIMIT 2;
SELECT * FROM vt2 WHERE ('-2008470655');
SELECT * FROM vt2 WHERE ('-2008470655') LIMIT 2;
SELECT ALL * FROM vt0, v0 WHERE (((vt0.c0)&(CAST(v0.c1 AS BLOB))));
SELECT * FROM vt0, v0 WHERE (((((vt0.c0)&(CAST(v0.c1 AS BLOB))))AND(((v0.c1)AND(((vt0.c0)<<(vt0.c0)))))));
SELECT ALL * FROM vt0, v0 WHERE (((vt0.c0)&(CAST(v0.c1 AS BLOB))));
SELECT * FROM vt0, v0 WHERE (((((vt0.c0)&(CAST(v0.c1 AS BLOB))))AND(((v0.c1)AND(((vt0.c0)<<(vt0.c0)))))));
SELECT ALL COUNT(*) FROM v0, vt2 WHERE (vt2.c0 COLLATE NOCASE);
SELECT COUNT(*) FROM v0, vt2 WHERE (vt2.c0 COLLATE NOCASE) LIMIT 1 INTERSECT SELECT COUNT(*) FROM v0, vt2 WHERE (((((vt2.c1)AND(v0.c3)))OR(NULL)) COLLATE RTRIM) LIMIT 1;
SELECT * FROM v0 WHERE (v0.c2) ORDER BY (((~ (v0.c1))) NOT NULL), (((v0.c2, v0.c3, 0xffffffff9d3b7a09, 'C-YP
')) NOT BETWEEN ((v0.c1, ((v0.c1) BETWEEN (v0.c3) AND (v0.c1)), v0.c1 COLLATE NOCASE, (v0.c0 IN (v0.c1)))) AND (('795331170', ((0.20628318181577132)>>(0.7841468797747747)), 0.2848535192601853, MIN(v0.c2, v0.c1, v0.c2)))) ASC  NULLS LAST, (((v0.c2)) BETWEEN ((NULL)) AND ((CASE v0.c2  WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c3 END))) DESC;
SELECT ALL * FROM v0 WHERE (((v0.c2)AND(UNLIKELY(DISTINCT CAST(v0.c0 AS NUMERIC))))) ORDER BY (((~ (v0.c1))) NOT NULL), (((v0.c2, v0.c3, 0Xffffffff9d3b7a09, 'C-YP
')) NOT BETWEEN ((v0.c1, ((v0.c1) BETWEEN (v0.c3) AND (v0.c1)), v0.c1 COLLATE NOCASE, (v0.c0 IN (v0.c1)))) AND (('795331170', ((0.20628318181577132)>>(0.7841468797747747)), 0.2848535192601853, MIN(v0.c2, v0.c1, v0.c2)))) ASC  NULLS LAST, (((v0.c2)) BETWEEN ((NULL)) AND ((CASE v0.c2  WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c3 END))) DESC;
SELECT * FROM v0 WHERE (v0.c2) ORDER BY (((~ (v0.c1))) NOT NULL), (((v0.c2, v0.c3, 0xffffffff9d3b7a09, 'C-YP
')) NOT BETWEEN ((v0.c1, ((v0.c1) BETWEEN (v0.c3) AND (v0.c1)), v0.c1 COLLATE NOCASE, (v0.c0 IN (v0.c1)))) AND (('795331170', ((0.20628318181577132)>>(0.7841468797747747)), 0.2848535192601853, MIN(v0.c2, v0.c1, v0.c2)))) ASC  NULLS LAST, (((v0.c2)) BETWEEN ((NULL)) AND ((CASE v0.c2  WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c3 END))) DESC;
SELECT ALL * FROM v0 WHERE (((v0.c2)AND(UNLIKELY(DISTINCT CAST(v0.c0 AS NUMERIC))))) ORDER BY (((~ (v0.c1))) NOT NULL), (((v0.c2, v0.c3, 0Xffffffff9d3b7a09, 'C-YP
')) NOT BETWEEN ((v0.c1, ((v0.c1) BETWEEN (v0.c3) AND (v0.c1)), v0.c1 COLLATE NOCASE, (v0.c0 IN (v0.c1)))) AND (('795331170', ((0.20628318181577132)>>(0.7841468797747747)), 0.2848535192601853, MIN(v0.c2, v0.c1, v0.c2)))) ASC  NULLS LAST, (((v0.c2)) BETWEEN ((NULL)) AND ((CASE v0.c2  WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c3 END))) DESC;
SELECT ALL MIN(vt2.c1) FROM vt2 LEFT OUTER JOIN vt0 ON ((((((v0.c2)OR(x'')))OR(vt0.c0)))+(((vt0.c0)-(v0.c0)))) NATURAL JOIN v0 WHERE (NULL);
SELECT DISTINCT MIN(vt2.c1) FROM vt2 LEFT OUTER JOIN vt0 ON ((((((v0.c2)OR(x'')))OR(vt0.c0)))+(((vt0.c0)-(v0.c0)))) NATURAL JOIN v0 WHERE (((NULL)AND((NOT (v0.c2 COLLATE NOCASE))))) ORDER BY ((((0.2920352001684853)!=(v0.c3))) NOT BETWEEN ((('') NOT NULL)) AND ((NOT (v0.c3)))), 0.2563673639462888 ASC  NULLS FIRST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((- ((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0)))))) ORDER BY vt0.c0  NULLS LAST, (((vt0.c0) NOTNULL) IN ()) DESC  NULLS FIRST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((- ((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0))))))AND(CAST(json(vt0.c0) AS BLOB)))) ORDER BY vt0.c0  NULLS LAST, (((vt0.c0) NOTNULL) IN ()) DESC  NULLS FIRST INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (CASE WHEN vt0.c0 COLLATE BINARY THEN ((NULL) BETWEEN (vt0.c0) AND (vt0.c0)) WHEN (vt0.c0 IN ()) THEN (((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))) END) ORDER BY vt0.c0  NULLS LAST, (((vt0.c0) NOTNULL) IN ()) DESC  NULLS FIRST;
SELECT * FROM vt2, vt0, v0 WHERE ((((((((v0.c0 IN ()))AND(x'd4a3c4')))OR(NULL)))AND(((v0.c1) NOT BETWEEN (v0.c3) AND (vt0.c0)))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((((((v0.c0 IN ()))AND(x'd4a3c4')))OR(NULL)))AND(((v0.c1) NOT BETWEEN (v0.c3) AND (vt0.c0))))) ORDER BY CASE vt0.c0  WHEN 0X34fb2c20 THEN ((vt0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)) WHEN ((((((((v0.c1)AND(0.35072821899051476)))OR(vt0.c0)))AND(v0.c1)))AND(v0.c0)) THEN (vt0.c0 IN (0.9025381487157186)) WHEN ((vt2.c0)/(vt2.c0)) THEN (((x'', v0.c0))<=((v0.c2, v0.c0))) ELSE ((v0.c1)<>('5z')) END DESC  NULLS FIRST, 'Jmnpnt'  NULLS LAST LIMIT 0x0;
SELECT * FROM vt2, vt0, v0 WHERE ((((((((v0.c0 IN ()))AND(x'd4a3c4')))OR(NULL)))AND(((v0.c1) NOT BETWEEN (v0.c3) AND (vt0.c0)))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((((((v0.c0 IN ()))AND(x'd4a3c4')))OR(NULL)))AND(((v0.c1) NOT BETWEEN (v0.c3) AND (vt0.c0))))) ORDER BY CASE vt0.c0  WHEN 0X34fb2c20 THEN ((vt0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)) WHEN ((((((((v0.c1)AND(0.35072821899051476)))OR(vt0.c0)))AND(v0.c1)))AND(v0.c0)) THEN (vt0.c0 IN (0.9025381487157186)) WHEN ((vt2.c0)/(vt2.c0)) THEN (((x'', v0.c0))<=((v0.c2, v0.c0))) ELSE ((v0.c1)<>('5z')) END DESC  NULLS FIRST, 'Jmnpnt'  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE ((((~ (vt2.c1))) IS FALSE)) ORDER BY CAST(x'' AS INTEGER), TYPEOF(DISTINCT ((vt2.c1)>=(vt2.c1)))  NULLS LAST;
SELECT * FROM vt2 WHERE ((((((~ (vt2.c1))) IS FALSE))AND(((vt2.c0)&(vt2.c1)) COLLATE NOCASE))) ORDER BY CAST(x'' AS INTEGER), TYPEOF(DISTINCT ((vt2.c1)>=(vt2.c1)))  NULLS LAST INTERSECT SELECT ALL * FROM vt2 WHERE (NULL) ORDER BY CAST(x'' AS INTEGER), TYPEOF(DISTINCT ((vt2.c1)>=(vt2.c1)))  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ((((~ (vt2.c1))) IS FALSE)) ORDER BY CAST(x'' AS INTEGER), TYPEOF(DISTINCT ((vt2.c1)>=(vt2.c1)))  NULLS LAST;
SELECT * FROM vt2 WHERE ((((((~ (vt2.c1))) IS FALSE))AND(((vt2.c0)&(vt2.c1)) COLLATE NOCASE))) ORDER BY CAST(x'' AS INTEGER), TYPEOF(DISTINCT ((vt2.c1)>=(vt2.c1)))  NULLS LAST INTERSECT SELECT ALL * FROM vt2 WHERE (NULL) ORDER BY CAST(x'' AS INTEGER), TYPEOF(DISTINCT ((vt2.c1)>=(vt2.c1)))  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE (CAST(((((((v0.c3)AND(vt0.c0)))OR(v0.c1)))AND(v0.c3)) AS REAL)) ORDER BY vt0.c0, CASE WHEN vt0.c0 THEN v0.c2 END COLLATE BINARY;
SELECT DISTINCT * FROM v0, vt0 WHERE (((CAST(((((((v0.c3)AND(vt0.c0)))OR(v0.c1)))AND(v0.c3)) AS REAL))AND(((LIKELY(vt0.c0)) BETWEEN ((v0.c1 IN ())) AND (v0.c2 COLLATE RTRIM))))) ORDER BY vt0.c0, CASE WHEN vt0.c0 THEN v0.c2 END COLLATE BINARY INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (((((((v0.c3)OR(v0.c3)))AND(v0.c2)))<(v0.c3))) ORDER BY vt0.c0, CASE WHEN vt0.c0 THEN v0.c2 END COLLATE BINARY;
SELECT ALL * FROM v0, vt0 WHERE (CAST(((((((v0.c3)AND(vt0.c0)))OR(v0.c1)))AND(v0.c3)) AS REAL)) ORDER BY vt0.c0, CASE WHEN vt0.c0 THEN v0.c2 END COLLATE BINARY;
SELECT DISTINCT * FROM v0, vt0 WHERE (((CAST(((((((v0.c3)AND(vt0.c0)))OR(v0.c1)))AND(v0.c3)) AS REAL))AND(((LIKELY(vt0.c0)) BETWEEN ((v0.c1 IN ())) AND (v0.c2 COLLATE RTRIM))))) ORDER BY vt0.c0, CASE WHEN vt0.c0 THEN v0.c2 END COLLATE BINARY INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (((((((v0.c3)OR(v0.c3)))AND(v0.c2)))<(v0.c3))) ORDER BY vt0.c0, CASE WHEN vt0.c0 THEN v0.c2 END COLLATE BINARY;
SELECT ALL MAX(v0.c1) FROM vt0, v0 WHERE (((v0.c1 COLLATE BINARY)<=(CAST(v0.c0 AS BLOB)))) ORDER BY ((((v0.c1) IS TRUE))>>(CAST(v0.c1 AS REAL))) ASC;
SELECT MAX(v0.c1) FROM vt0, v0 WHERE (((((v0.c1 COLLATE BINARY)=(CAST(v0.c0 AS BLOB))))AND(((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1)))IS NOT(((v0.c2)<(v0.c2))))))) ORDER BY ((((v0.c1) IS TRUE))>>(CAST(v0.c1 AS REAL))) ASC LIMIT 0x1 INTERSECT SELECT ALL MAX(v0.c1) FROM vt0, v0 WHERE ((x'' IN ())) ORDER BY ((((v0.c1) IS TRUE))>>(CAST(v0.c1 AS REAL))) ASC LIMIT 1;
SELECT ALL * FROM vt0 WHERE ('');
SELECT DISTINCT * FROM vt0 WHERE ('') ORDER BY -1203225224  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY 0xffffffffb8483d78  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE ('');
SELECT DISTINCT * FROM vt0 WHERE ('') ORDER BY -1203225224  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY 0xffffffffb8483d78  NULLS LAST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt2 WHERE ((((x'7b' IN (vt2.c0, vt2.c1))) NOT BETWEEN (((((vt2.c0)OR(vt2.c0)))AND(vt2.c1))) AND (((vt2.c1)<(vt2.c1)))));
SELECT ALL COUNT(*) FROM vt2 WHERE ((((x'7b' IN (vt2.c0, vt2.c1))) NOT BETWEEN (((((vt2.c0)OR(vt2.c0)))AND(vt2.c1))) AND (((vt2.c1)<=(vt2.c1))))) INTERSECT SELECT ALL COUNT(*) FROM vt2 NOT INDEXED WHERE (vt2.c1);
SELECT ALL * FROM vt0, v0 CROSS JOIN vt2 ON CASE WHEN TRIM(DISTINCT v0.c2) THEN CAST(NULL AS NUMERIC) ELSE (~ (v0.c0)) END WHERE ((vt0.c0 IN (v0.c3, v0.c2)) COLLATE RTRIM) ORDER BY ((MIN(v0.c1, v0.c0, vt2.c0)) NOT BETWEEN (CASE v0.c2  WHEN v0.c1 THEN v0.c3 WHEN v0.c3 THEN v0.c0 ELSE vt0.c0 END) AND (TYPEOF(DISTINCT v0.c2))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 CROSS JOIN vt2 ON CASE WHEN TRIM(DISTINCT v0.c2) THEN CAST(NULL AS NUMERIC) ELSE (~ (v0.c0)) END WHERE ((vt0.c0 IN (v0.c3, v0.c2)) COLLATE RTRIM) ORDER BY '575640948' LIMIT 0;
SELECT ALL * FROM vt0, v0 CROSS JOIN vt2 ON CASE WHEN TRIM(DISTINCT v0.c2) THEN CAST(NULL AS NUMERIC) ELSE (~ (v0.c0)) END WHERE ((vt0.c0 IN (v0.c3, v0.c2)) COLLATE RTRIM) ORDER BY ((MIN(v0.c1, v0.c0, vt2.c0)) NOT BETWEEN (CASE v0.c2  WHEN v0.c1 THEN v0.c3 WHEN v0.c3 THEN v0.c0 ELSE vt0.c0 END) AND (TYPEOF(DISTINCT v0.c2))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 CROSS JOIN vt2 ON CASE WHEN TRIM(DISTINCT v0.c2) THEN CAST(NULL AS NUMERIC) ELSE (~ (v0.c0)) END WHERE ((vt0.c0 IN (v0.c3, v0.c2)) COLLATE RTRIM) ORDER BY '575640948' LIMIT 0;
SELECT ALL COUNT(*) FROM vt2 WHERE (vt2.c1) ORDER BY (((vt2.c0, vt2.c0, vt2.c1, vt2.c1)) NOT BETWEEN ((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1)), (NOT (vt2.c1)), (((vt2.c1, x''))>=((vt2.c1, vt2.c0))), vt2.c0)) AND ((((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)), NULLIF(vt2.c1, vt2.c1), TRIM(DISTINCT vt2.c1, ''), TRIM(vt2.c1)))) ASC  NULLS LAST, (x'ed' IN (((vt2.c1)LIKE(vt2.c0))))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (vt2.c1) ORDER BY (('}뭚')LIKE(((vt2.c0)OR(vt2.c0)))), QUOTE(((((vt2.c1)OR(vt2.c1)))AND(vt2.c0))) ASC  NULLS LAST, ((((vt2.c1)/('2046917404'))) NOT BETWEEN (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))) AND (((0X3c7cf9a7)GLOB(vt2.c0)))) DESC  NULLS LAST LIMIT 1;
SELECT MIN(v0.c1) FROM v0, vt2, vt0 WHERE (CASE WHEN CAST(v0.c0 AS REAL) THEN (((v0.c2))=((v0.c2))) WHEN (((v0.c0)) NOT BETWEEN ((vt0.c0)) AND ((v0.c0))) THEN ((((((vt0.c0)OR(v0.c0)))AND(v0.c0)))OR(vt2.c1)) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) THEN ((vt2.c0) BETWEEN (v0.c2) AND (vt2.c1)) ELSE (v0.c2 IN (v0.c1)) END);
SELECT MIN(v0.c1) FROM v0, vt2, vt0 WHERE (CASE WHEN CAST(v0.c0 AS REAL) THEN (((v0.c2))==((v0.c2))) WHEN (((v0.c0)) NOT BETWEEN ((vt0.c0)) AND ((v0.c0))) THEN ((((((vt0.c0)OR(v0.c0)))AND(v0.c0)))OR(vt2.c1)) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0)) THEN ((vt2.c0) BETWEEN (v0.c2) AND (vt2.c1)) ELSE (v0.c2 IN (v0.c1)) END) LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE (CAST(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) AS NUMERIC)) ORDER BY ((((vt2.c1) IS FALSE)) IS FALSE)  NULLS LAST, ((((((vt2.c1)/(vt2.c0)))OR(((((((((0.4099338637139208)OR(vt2.c1)))AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)))))AND(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))));
SELECT ALL * FROM vt2 WHERE (((CAST(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) AS NUMERIC))AND(((NULL)<=((((vt2.c0, vt2.c0))>=((vt2.c1, vt2.c0)))))))) ORDER BY ((vt2.c0 IN (vt2.c1)) IN ()) LIMIT 1 INTERSECT SELECT ALL * FROM vt2 WHERE (0.43389524794728196 COLLATE RTRIM) ORDER BY ((vt2.c0 IN (vt2.c1)) IN ()) LIMIT 1;
SELECT ALL * FROM vt2 WHERE (CAST(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) AS NUMERIC)) ORDER BY ((((vt2.c1) IS FALSE)) IS FALSE)  NULLS LAST, ((((((vt2.c1)/(vt2.c0)))OR(((((((((0.4099338637139208)OR(vt2.c1)))AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)))))AND(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))));
SELECT ALL * FROM vt2 WHERE (((CAST(((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) AS NUMERIC))AND(((NULL)<=((((vt2.c0, vt2.c0))>=((vt2.c1, vt2.c0)))))))) ORDER BY ((vt2.c0 IN (vt2.c1)) IN ()) LIMIT 1 INTERSECT SELECT ALL * FROM vt2 WHERE (0.43389524794728196 COLLATE RTRIM) ORDER BY ((vt2.c0 IN (vt2.c1)) IN ()) LIMIT 1;
SELECT MIN(vt2.c1) FROM vt2 WHERE ('R}i');
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE ((('R}i')AND(CAST((+ (vt2.c0)) AS INTEGER)))) ORDER BY (vt2.c1 IN ()), ((((((((((vt2.c1) NOTNULL))AND(((vt2.c1) NOTNULL))))OR((- (vt2.c1)))))AND(vt2.c0 COLLATE BINARY)))OR('Fj')) ASC INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (((CAST(vt2.c0 AS REAL)) ISNULL)) ORDER BY (vt2.c1 IN ()), ((((((((((vt2.c1) NOTNULL))AND(((vt2.c1) NOTNULL))))OR((- (vt2.c1)))))AND(vt2.c0 COLLATE BINARY)))OR('Fj')) ASC;
SELECT * FROM vt0 WHERE (COALESCE((vt0.c0 IN (vt0.c0)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), NULL, ((vt0.c0) NOTNULL), (vt0.c0 IN ())));
SELECT DISTINCT * FROM vt0 WHERE (COALESCE((vt0.c0 IN (vt0.c0)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), NULL, ((vt0.c0) NOTNULL), (vt0.c0 IN ())));
SELECT * FROM vt0 WHERE (COALESCE((vt0.c0 IN (vt0.c0)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), NULL, ((vt0.c0) NOTNULL), (vt0.c0 IN ())));
SELECT DISTINCT * FROM vt0 WHERE (COALESCE((vt0.c0 IN (vt0.c0)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), NULL, ((vt0.c0) NOTNULL), (vt0.c0 IN ())));
SELECT ALL * FROM vt0 WHERE ((vt0.c0 IN ((vt0.c0 IN ('')), vt0.c0))) ORDER BY ((0.18423635315362363) IS TRUE)  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0 IN ((vt0.c0 IN ('')), vt0.c0)))AND(((CASE WHEN NULL THEN vt0.c0 ELSE vt0.c0 END)|(vt0.c0))))) ORDER BY (((0Xfffffffffab37357)) BETWEEN ((vt0.c0)) AND ((vt0.c0))) COLLATE BINARY, (((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN (((~ (vt0.c0)), CAST(vt0.c0 AS NUMERIC), ((vt0.c0) IS FALSE), ((vt0.c0) IS FALSE))) AND ((CAST(vt0.c0 AS INTEGER), (((NULL, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))), CAST(vt0.c0 AS INTEGER), HEX(DISTINCT vt0.c0)))) DESC  NULLS LAST, HEX(DISTINCT vt0.c0) COLLATE NOCASE ASC, 0.6679422335115228;
SELECT ALL * FROM vt0 WHERE ((vt0.c0 IN ((vt0.c0 IN ('')), vt0.c0))) ORDER BY ((0.18423635315362363) IS TRUE)  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0 IN ((vt0.c0 IN ('')), vt0.c0)))AND(((CASE WHEN NULL THEN vt0.c0 ELSE vt0.c0 END)|(vt0.c0))))) ORDER BY (((0Xfffffffffab37357)) BETWEEN ((vt0.c0)) AND ((vt0.c0))) COLLATE BINARY, (((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN (((~ (vt0.c0)), CAST(vt0.c0 AS NUMERIC), ((vt0.c0) IS FALSE), ((vt0.c0) IS FALSE))) AND ((CAST(vt0.c0 AS INTEGER), (((NULL, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))), CAST(vt0.c0 AS INTEGER), HEX(DISTINCT vt0.c0)))) DESC  NULLS LAST, HEX(DISTINCT vt0.c0) COLLATE NOCASE ASC, 0.6679422335115228;
SELECT * FROM v0, vt2, vt0 WHERE (((v0.c0)LIKE(((((((((vt2.c0)AND(vt0.c0)))OR(v0.c0)))AND(v0.c1)))OR(vt2.c1))))) ORDER BY (('')%(((vt0.c0) BETWEEN (v0.c3) AND (vt2.c0))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((v0.c0)LIKE(((((((((vt2.c0)AND(vt0.c0)))OR(v0.c0)))AND(v0.c1)))OR(vt2.c1))))) ORDER BY (('')%(((vt0.c0) BETWEEN (v0.c3) AND (vt2.c0)))) LIMIT 0;
SELECT * FROM v0, vt2, vt0 WHERE (((v0.c0)LIKE(((((((((vt2.c0)AND(vt0.c0)))OR(v0.c0)))AND(v0.c1)))OR(vt2.c1))))) ORDER BY (('')%(((vt0.c0) BETWEEN (v0.c3) AND (vt2.c0))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((v0.c0)LIKE(((((((((vt2.c0)AND(vt0.c0)))OR(v0.c0)))AND(v0.c1)))OR(vt2.c1))))) ORDER BY (('')%(((vt0.c0) BETWEEN (v0.c3) AND (vt2.c0)))) LIMIT 0;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt0 ON vt0.c0 INNER JOIN vt2 ON CASE ((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))  WHEN (((vt2.c0))!=((v0.c2))) THEN 0.0 WHEN vt2.c1 COLLATE RTRIM THEN COALESCE(v0.c3, NULL, v0.c2, vt2.c0, v0.c2, vt2.c0) ELSE CASE WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END END WHERE (CASE WHEN ((vt2.c0) NOTNULL) THEN x'a76b77' END);
SELECT * FROM v0 INNER JOIN vt0 ON vt0.c0 INNER JOIN vt2 ON CASE ((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))  WHEN (((vt2.c0))<>((v0.c2))) THEN 0.0 WHEN vt2.c1 COLLATE RTRIM THEN COALESCE(v0.c3, NULL, v0.c2, vt2.c0, v0.c2, vt2.c0) ELSE CASE WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END END WHERE (CASE WHEN ((vt2.c0) NOTNULL) THEN x'a76b77' END) ORDER BY CASE WHEN LIKELY(vt2.c0) THEN vt0.c0 WHEN TYPEOF(DISTINCT vt2.c1) THEN ((((((((v0.c0)OR(v0.c0)))OR(v0.c1)))OR(vt2.c1)))OR(vt2.c0)) ELSE NULL END ASC, vt0.c0 ASC LIMIT 0;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt0 ON vt0.c0 INNER JOIN vt2 ON CASE ((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))  WHEN (((vt2.c0))!=((v0.c2))) THEN 0.0 WHEN vt2.c1 COLLATE RTRIM THEN COALESCE(v0.c3, NULL, v0.c2, vt2.c0, v0.c2, vt2.c0) ELSE CASE WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END END WHERE (CASE WHEN ((vt2.c0) NOTNULL) THEN x'a76b77' END);
SELECT * FROM v0 INNER JOIN vt0 ON vt0.c0 INNER JOIN vt2 ON CASE ((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))  WHEN (((vt2.c0))<>((v0.c2))) THEN 0.0 WHEN vt2.c1 COLLATE RTRIM THEN COALESCE(v0.c3, NULL, v0.c2, vt2.c0, v0.c2, vt2.c0) ELSE CASE WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END END WHERE (CASE WHEN ((vt2.c0) NOTNULL) THEN x'a76b77' END) ORDER BY CASE WHEN LIKELY(vt2.c0) THEN vt0.c0 WHEN TYPEOF(DISTINCT vt2.c1) THEN ((((((((v0.c0)OR(v0.c0)))OR(v0.c1)))OR(vt2.c1)))OR(vt2.c0)) ELSE NULL END ASC, vt0.c0 ASC LIMIT 0;
SELECT * FROM vt2 WHERE (CASE '0.6752456599976012'  WHEN CASE '-101885472'  WHEN NULL THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END THEN ((vt2.c0)OR(NULL)) ELSE ((((((vt2.c0)OR(NULL)))AND(vt2.c0)))OR(vt2.c0)) END) ORDER BY (((vt2.c0, vt2.c1)) NOT BETWEEN (((vt2.c1 IN (vt2.c1)), ((((((((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))) AND ((((vt2.c1) NOT BETWEEN (NULL) AND ('-2042021538')), ((((NULL)OR(vt2.c0)))OR(vt2.c1)))))  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE (((CASE '0.6752456599976012'  WHEN CASE '-101885472'  WHEN NULL THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END THEN ((vt2.c0)OR(NULL)) ELSE ((((((vt2.c0)OR(NULL)))AND(vt2.c0)))OR(vt2.c0)) END)AND((vt2.c1 IN (0.12893410339563705, vt2.c1)) COLLATE BINARY))) ORDER BY (((vt2.c0, vt2.c1)) NOT BETWEEN (((vt2.c1 IN (vt2.c1)), ((((((((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))) AND ((((vt2.c1) NOT BETWEEN (NULL) AND ('-2042021538')), ((((NULL)OR(vt2.c0)))OR(vt2.c1)))))  NULLS LAST;
SELECT * FROM vt2 WHERE (CASE '0.6752456599976012'  WHEN CASE '-101885472'  WHEN NULL THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END THEN ((vt2.c0)OR(NULL)) ELSE ((((((vt2.c0)OR(NULL)))AND(vt2.c0)))OR(vt2.c0)) END) ORDER BY (((vt2.c0, vt2.c1)) NOT BETWEEN (((vt2.c1 IN (vt2.c1)), ((((((((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))) AND ((((vt2.c1) NOT BETWEEN (NULL) AND ('-2042021538')), ((((NULL)OR(vt2.c0)))OR(vt2.c1)))))  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE (((CASE '0.6752456599976012'  WHEN CASE '-101885472'  WHEN NULL THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END THEN ((vt2.c0)OR(NULL)) ELSE ((((((vt2.c0)OR(NULL)))AND(vt2.c0)))OR(vt2.c0)) END)AND((vt2.c1 IN (0.12893410339563705, vt2.c1)) COLLATE BINARY))) ORDER BY (((vt2.c0, vt2.c1)) NOT BETWEEN (((vt2.c1 IN (vt2.c1)), ((((((((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))) AND ((((vt2.c1) NOT BETWEEN (NULL) AND ('-2042021538')), ((((NULL)OR(vt2.c0)))OR(vt2.c1)))))  NULLS LAST;
SELECT ALL * FROM v0, vt2 WHERE (ABS(vt2.c1));
SELECT ALL * FROM v0 NOT INDEXED, vt2 WHERE (ABS(vt2.c1)) ORDER BY ((ABS(v0.c1))IS((~ (v0.c3)))) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0, vt2 WHERE (ABS(vt2.c1));
SELECT ALL * FROM v0 NOT INDEXED, vt2 WHERE (ABS(vt2.c1)) ORDER BY ((ABS(v0.c1))IS((~ (v0.c3)))) ASC  NULLS LAST LIMIT 0x0;
SELECT MAX(v0.c3) FROM vt0, vt2, v0 WHERE (((v0.c3) NOT BETWEEN (((v0.c2) ISNULL)) AND (((v0.c3) BETWEEN (vt2.c1) AND (v0.c2))))) ORDER BY (((((((((- (vt2.c1)))OR(LOWER(DISTINCT v0.c2))))AND(((v0.c1)IS NOT(v0.c1)))))AND(vt0.c0 COLLATE NOCASE)))AND(v0.c3 COLLATE NOCASE)), CASE WHEN (+ (v0.c1)) THEN ((v0.c1) NOT BETWEEN (v0.c3) AND (vt2.c0)) ELSE ((v0.c2)||(v0.c0)) END DESC;
SELECT MAX(v0.c3) FROM vt0, vt2, v0 WHERE (((((v0.c3) NOT BETWEEN (((v0.c2) ISNULL)) AND (((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)))))AND(vt2.c1))) ORDER BY (((((((((- (vt2.c1)))OR(LOWER(DISTINCT v0.c2))))AND(((v0.c1)IS NOT(v0.c1)))))AND(vt0.c0 COLLATE NOCASE)))AND(v0.c3 COLLATE NOCASE)), CASE WHEN (+ (v0.c1)) THEN ((v0.c1) NOT BETWEEN (v0.c3) AND (vt2.c0)) ELSE ((v0.c2)||(v0.c0)) END DESC LIMIT 0;
SELECT MAX(vt2.c0) FROM vt2 WHERE (CAST(vt2.c0 AS INTEGER));
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (CAST(vt2.c0 AS INTEGER)) INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (SQLITE_COMPILEOPTION_GET(vt2.c0));
SELECT COUNT(*) FROM v0 WHERE (CASE WHEN ((v0.c2) IS TRUE) THEN (~ (NULL)) ELSE v0.c3 END) ORDER BY ((v0.c3) BETWEEN ((((v0.c3, 0.8023363460708292)) BETWEEN ((v0.c2, v0.c3)) AND ((0.03592441016408654, 0.2209530154083913)))) AND (CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c3 THEN x'' ELSE v0.c0 END));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((CASE WHEN ((v0.c2) IS TRUE) THEN (~ (NULL)) ELSE v0.c3 END)AND(CAST(v0.c2 AS TEXT)))) ORDER BY ((v0.c3) BETWEEN ((((v0.c3, 0.8023363460708292)) BETWEEN ((v0.c2, v0.c3)) AND ((0.03592441016408654, 0.2209530154083913)))) AND (CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c3 THEN x'' ELSE v0.c0 END)) LIMIT 1;
SELECT ALL * FROM v0, vt2 NATURAL JOIN vt0 WHERE (INSTR(((((v0.c1)OR(vt2.c1)))AND(vt0.c0)), ((vt2.c0) BETWEEN (vt2.c0) AND (vt0.c0)))) ORDER BY ((((vt2.c0)OR(x''))) BETWEEN ((0X5da9264d IN ())) AND (((((((v0.c3)AND(1079463247)))AND(vt0.c0)))AND(v0.c3)))) ASC  NULLS FIRST, ((((vt2.c1)AND(v0.c0)))AND(v0.c0)) COLLATE BINARY;
SELECT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (INSTR(((((v0.c1)OR(vt2.c1)))AND(vt0.c0)), ((vt2.c0) BETWEEN (vt2.c0) AND (vt0.c0)))) ORDER BY '-292431108' ASC  NULLS FIRST INTERSECT SELECT ALL * FROM v0, vt2 NATURAL JOIN vt0 WHERE ('1#q氮vF/yH') ORDER BY '-292431108' ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt2 NATURAL JOIN vt0 WHERE (INSTR(((((v0.c1)OR(vt2.c1)))AND(vt0.c0)), ((vt2.c0) BETWEEN (vt2.c0) AND (vt0.c0)))) ORDER BY ((((vt2.c0)OR(x''))) BETWEEN ((0X5da9264d IN ())) AND (((((((v0.c3)AND(1079463247)))AND(vt0.c0)))AND(v0.c3)))) ASC  NULLS FIRST, ((((vt2.c1)AND(v0.c0)))AND(v0.c0)) COLLATE BINARY;
SELECT * FROM v0, vt2 NATURAL JOIN vt0 WHERE (INSTR(((((v0.c1)OR(vt2.c1)))AND(vt0.c0)), ((vt2.c0) BETWEEN (vt2.c0) AND (vt0.c0)))) ORDER BY '-292431108' ASC  NULLS FIRST INTERSECT SELECT ALL * FROM v0, vt2 NATURAL JOIN vt0 WHERE ('1#q氮vF/yH') ORDER BY '-292431108' ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN CASE v0.c0  WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN vt2.c0 END THEN ((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0)) WHEN ((NULL) BETWEEN (vt2.c0) AND (v0.c1)) THEN ((v0.c1)>=(v0.c0)) WHEN (((v0.c3, v0.c2, 0.26499007313964207)) BETWEEN ((v0.c3, v0.c1, v0.c1)) AND ((vt2.c1, v0.c3, vt2.c1))) THEN ((vt2.c0) BETWEEN (v0.c1) AND (v0.c1)) END);
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((CASE WHEN CASE v0.c0  WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN vt2.c0 END THEN ((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0)) WHEN ((NULL) BETWEEN (vt2.c0) AND (v0.c1)) THEN ((v0.c1)>=(v0.c0)) WHEN (((v0.c3, v0.c2, 0.26499007313964207)) BETWEEN ((v0.c3, v0.c1, v0.c1)) AND ((vt2.c1, v0.c3, vt2.c1))) THEN ((vt2.c0) BETWEEN (v0.c1) AND (v0.c1)) END)AND(((v0.c3) ISNULL) COLLATE BINARY))) ORDER BY CASE WHEN ((v0.c1)LIKE(vt0.c0)) THEN CASE vt0.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN vt2.c1 ELSE v0.c1 END WHEN TYPEOF(DISTINCT v0.c2) THEN vt0.c0 END  NULLS FIRST, (((vt2.c1))>=((v0.c1 COLLATE RTRIM)))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((CASE x''  WHEN 0.4986256184119817 THEN vt0.c0 WHEN vt0.c0 THEN v0.c0 ELSE vt2.c0 END)>=(((vt0.c0)*(vt2.c1))))) ORDER BY CASE WHEN ((v0.c1)LIKE(vt0.c0)) THEN CASE vt0.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN vt2.c1 ELSE v0.c1 END WHEN TYPEOF(DISTINCT v0.c2) THEN vt0.c0 END  NULLS FIRST, (((vt2.c1))>=((v0.c1 COLLATE RTRIM)))  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN CASE v0.c0  WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN vt2.c0 END THEN ((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0)) WHEN ((NULL) BETWEEN (vt2.c0) AND (v0.c1)) THEN ((v0.c1)>=(v0.c0)) WHEN (((v0.c3, v0.c2, 0.26499007313964207)) BETWEEN ((v0.c3, v0.c1, v0.c1)) AND ((vt2.c1, v0.c3, vt2.c1))) THEN ((vt2.c0) BETWEEN (v0.c1) AND (v0.c1)) END);
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((CASE WHEN CASE v0.c0  WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN vt2.c0 END THEN ((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0)) WHEN ((NULL) BETWEEN (vt2.c0) AND (v0.c1)) THEN ((v0.c1)>=(v0.c0)) WHEN (((v0.c3, v0.c2, 0.26499007313964207)) BETWEEN ((v0.c3, v0.c1, v0.c1)) AND ((vt2.c1, v0.c3, vt2.c1))) THEN ((vt2.c0) BETWEEN (v0.c1) AND (v0.c1)) END)AND(((v0.c3) ISNULL) COLLATE BINARY))) ORDER BY CASE WHEN ((v0.c1)LIKE(vt0.c0)) THEN CASE vt0.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN vt2.c1 ELSE v0.c1 END WHEN TYPEOF(DISTINCT v0.c2) THEN vt0.c0 END  NULLS FIRST, (((vt2.c1))>=((v0.c1 COLLATE RTRIM)))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((CASE x''  WHEN 0.4986256184119817 THEN vt0.c0 WHEN vt0.c0 THEN v0.c0 ELSE vt2.c0 END)>=(((vt0.c0)*(vt2.c1))))) ORDER BY CASE WHEN ((v0.c1)LIKE(vt0.c0)) THEN CASE vt0.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN vt2.c1 ELSE v0.c1 END WHEN TYPEOF(DISTINCT v0.c2) THEN vt0.c0 END  NULLS FIRST, (((vt2.c1))>=((v0.c1 COLLATE RTRIM)))  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE ('0.8185504420821136');
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((('0.8185504420821136')AND((((((+ (v0.c0)))OR('-666126339')))AND(v0.c3 COLLATE RTRIM))))) INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE ((v0.c2 IN ()) COLLATE NOCASE);
SELECT COUNT(*) FROM v0 WHERE (((ABS(DISTINCT v0.c2)) NOT BETWEEN (CAST(v0.c3 AS NUMERIC)) AND (((v0.c2) NOTNULL)))) ORDER BY (- ((((v0.c1, v0.c3))<((NULL, v0.c2))))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM v0 WHERE (((ABS(DISTINCT v0.c2)) NOT BETWEEN (CAST(v0.c3 AS NUMERIC)) AND (((v0.c2) NOTNULL)))) ORDER BY (- ((((v0.c1, v0.c3))<((NULL, v0.c2))))) ASC  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c1) IS FALSE))>=(((v0.c1)-(0.3891981146454755))))) ORDER BY (- ((((v0.c1, v0.c3))<((NULL, v0.c2))))) ASC  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (0xffffffff961a6eb9))) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND ((vt0.c0 IN ()))));
SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (-1776652615))) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND ((vt0.c0 IN ())))) ORDER BY CASE CASE vt0.c0  WHEN x'' THEN vt0.c0 ELSE vt0.c0 END  WHEN 267721342 THEN ((vt0.c0)==(vt0.c0)) WHEN vt0.c0 THEN ((vt0.c0) BETWEEN (4.77587929E8) AND (vt0.c0)) END, ((vt0.c0) IS TRUE) COLLATE BINARY  NULLS LAST, (((- (vt0.c0))) ISNULL) LIMIT 0X0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE WHEN (+ (vt0.c0)) THEN (- (vt0.c0)) WHEN 0.9693589824165723 THEN vt0.c0 WHEN (+ ('-787073840')) THEN vt0.c0 END) ORDER BY CASE CASE vt0.c0  WHEN x'' THEN vt0.c0 ELSE vt0.c0 END  WHEN 267721342 THEN ((vt0.c0)=(vt0.c0)) WHEN vt0.c0 THEN ((vt0.c0) BETWEEN (4.77587929E8) AND (vt0.c0)) END, ((vt0.c0) IS TRUE) COLLATE BINARY  NULLS LAST, (((- (vt0.c0))) ISNULL) LIMIT 0x0;
SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (0xffffffff961a6eb9))) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND ((vt0.c0 IN ()))));
SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (-1776652615))) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) AND ((vt0.c0 IN ())))) ORDER BY CASE CASE vt0.c0  WHEN x'' THEN vt0.c0 ELSE vt0.c0 END  WHEN 267721342 THEN ((vt0.c0)==(vt0.c0)) WHEN vt0.c0 THEN ((vt0.c0) BETWEEN (4.77587929E8) AND (vt0.c0)) END, ((vt0.c0) IS TRUE) COLLATE BINARY  NULLS LAST, (((- (vt0.c0))) ISNULL) LIMIT 0X0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE WHEN (+ (vt0.c0)) THEN (- (vt0.c0)) WHEN 0.9693589824165723 THEN vt0.c0 WHEN (+ ('-787073840')) THEN vt0.c0 END) ORDER BY CASE CASE vt0.c0  WHEN x'' THEN vt0.c0 ELSE vt0.c0 END  WHEN 267721342 THEN ((vt0.c0)=(vt0.c0)) WHEN vt0.c0 THEN ((vt0.c0) BETWEEN (4.77587929E8) AND (vt0.c0)) END, ((vt0.c0) IS TRUE) COLLATE BINARY  NULLS LAST, (((- (vt0.c0))) ISNULL) LIMIT 0x0;
SELECT MAX(vt0.c0) FROM v0, vt2, vt0 WHERE ((((((vt0.c0, vt2.c0)) NOT BETWEEN ((v0.c0, v0.c0)) AND ((vt0.c0, v0.c2)))) BETWEEN (vt0.c0) AND (CAST(v0.c0 AS INTEGER))));
SELECT MAX(vt0.c0) FROM v0, vt2, vt0 WHERE ((((((vt0.c0, vt2.c0)) NOT BETWEEN ((v0.c0, v0.c0)) AND ((vt0.c0, v0.c2)))) BETWEEN (vt0.c0) AND (CAST(v0.c0 AS INTEGER)))) ORDER BY (+ (((((v0.c0)OR(v0.c1)))OR(v0.c0)))) ASC LIMIT 1;
SELECT * FROM vt2 CROSS JOIN vt0 ON CASE WHEN 0.0 THEN ((NULL) NOTNULL) WHEN ((((((((vt2.c0)AND(vt0.c0)))AND(x'e94a')))OR(vt2.c0)))AND(vt2.c1)) THEN ((vt0.c0)<<(vt2.c0)) END WHERE ((CAST(vt2.c0 AS NUMERIC) IN ((vt2.c1 IN (vt0.c0)), vt2.c1 COLLATE RTRIM)));
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON CASE WHEN 0.0 THEN ((NULL) NOTNULL) WHEN ((((((((vt2.c0)AND(vt0.c0)))AND(x'e94a')))OR(vt2.c0)))AND(vt2.c1)) THEN ((vt0.c0)<<(vt2.c0)) END WHERE ((((CAST(vt2.c0 AS NUMERIC) IN ((vt2.c1 IN (vt0.c0)), vt2.c1 COLLATE RTRIM)))AND(NULL))) INTERSECT SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON CASE WHEN 0.0 THEN ((NULL) NOTNULL) WHEN ((((((((vt2.c0)AND(vt0.c0)))AND(x'e94a')))OR(vt2.c0)))AND(vt2.c1)) THEN ((vt0.c0)<<(vt2.c0)) END WHERE ((((vt2.c1, vt2.c1, vt0.c0, vt2.c1, vt0.c0)) BETWEEN ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END, ((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)), IFNULL(DISTINCT vt2.c0, vt0.c0), ((((vt2.c1)OR(vt2.c1)))AND(vt2.c1)), CAST(vt0.c0 AS TEXT))) AND ((((vt2.c0) IS FALSE), vt0.c0 COLLATE NOCASE, -1014892700, (0.6808987101098785 IN (vt0.c0)), LOWER(DISTINCT vt2.c1)))));
SELECT * FROM vt2 CROSS JOIN vt0 ON CASE WHEN 0.0 THEN ((NULL) NOTNULL) WHEN ((((((((vt2.c0)AND(vt0.c0)))AND(x'e94a')))OR(vt2.c0)))AND(vt2.c1)) THEN ((vt0.c0)<<(vt2.c0)) END WHERE ((CAST(vt2.c0 AS NUMERIC) IN ((vt2.c1 IN (vt0.c0)), vt2.c1 COLLATE RTRIM)));
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON CASE WHEN 0.0 THEN ((NULL) NOTNULL) WHEN ((((((((vt2.c0)AND(vt0.c0)))AND(x'e94a')))OR(vt2.c0)))AND(vt2.c1)) THEN ((vt0.c0)<<(vt2.c0)) END WHERE ((((CAST(vt2.c0 AS NUMERIC) IN ((vt2.c1 IN (vt0.c0)), vt2.c1 COLLATE RTRIM)))AND(NULL))) INTERSECT SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON CASE WHEN 0.0 THEN ((NULL) NOTNULL) WHEN ((((((((vt2.c0)AND(vt0.c0)))AND(x'e94a')))OR(vt2.c0)))AND(vt2.c1)) THEN ((vt0.c0)<<(vt2.c0)) END WHERE ((((vt2.c1, vt2.c1, vt0.c0, vt2.c1, vt0.c0)) BETWEEN ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END, ((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)), IFNULL(DISTINCT vt2.c0, vt0.c0), ((((vt2.c1)OR(vt2.c1)))AND(vt2.c1)), CAST(vt0.c0 AS TEXT))) AND ((((vt2.c0) IS FALSE), vt0.c0 COLLATE NOCASE, -1014892700, (0.6808987101098785 IN (vt0.c0)), LOWER(DISTINCT vt2.c1)))));
SELECT MIN(v0.c2) FROM vt0, v0, vt2 WHERE ((- (NULL)));
SELECT DISTINCT MIN(v0.c2) FROM vt0, v0, vt2 WHERE ((- (NULL))) LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt0, v0, vt2 WHERE (CAST(((((((v0.c3)AND(v0.c0)))OR(v0.c1)))OR(v0.c2)) AS REAL)) LIMIT 0X0;
SELECT ALL * FROM v0, vt0 WHERE ((+ (((x'')>>(v0.c2)))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((+ (((x'')>>(v0.c2)))))AND((~ (((v0.c1)<=(vt0.c0))))))) ORDER BY CASE v0.c0  WHEN vt0.c0 THEN v0.c0 END COLLATE NOCASE  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE ((+ (((x'')>>(v0.c2)))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((+ (((x'')>>(v0.c2)))))AND((~ (((v0.c1)<=(vt0.c0))))))) ORDER BY CASE v0.c0  WHEN vt0.c0 THEN v0.c0 END COLLATE NOCASE  NULLS FIRST;
SELECT COUNT(*) FROM vt0, v0 WHERE ((((v0.c1)) NOT BETWEEN ((CASE WHEN v0.c2 THEN vt0.c0 WHEN '-1003596842' THEN v0.c0 WHEN vt0.c0 THEN v0.c1 ELSE v0.c1 END)) AND (((0.6440489233597119 IN ()))))) ORDER BY (((v0.c2)/(v0.c1)) IN (((v0.c3) IS TRUE))) ASC  NULLS LAST, ((((((((((v0.c1) NOTNULL))AND(((((vt0.c0)OR(v0.c0)))AND(vt0.c0)))))AND(((v0.c3) BETWEEN (vt0.c0) AND (v0.c3)))))AND((v0.c0 IN (vt0.c0)))))OR(v0.c2))  NULLS LAST, (((v0.c0, v0.c0)) BETWEEN ((CAST(vt0.c0 AS BLOB), CASE vt0.c0  WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END)) AND ((((v0.c0)*(v0.c3)), CAST(v0.c0 AS REAL)))) ASC;
SELECT COUNT(*) FROM vt0, v0 WHERE ((((((v0.c1)) NOT BETWEEN ((CASE WHEN v0.c2 THEN vt0.c0 WHEN '-1003596842' THEN v0.c0 WHEN vt0.c0 THEN v0.c1 ELSE v0.c1 END)) AND (((0.6440489233597119 IN ())))))AND((+ (((v0.c1)>(vt0.c0))))))) ORDER BY ((CASE WHEN v0.c0 THEN vt0.c0 WHEN v0.c0 THEN v0.c0 ELSE vt0.c0 END) IS FALSE) DESC, ((((((((((((NULL)OR(v0.c3)))OR(v0.c1)))OR(v0.c1)))AND(v0.c2)))OR((((vt0.c0, v0.c3, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0)) AND ((v0.c3, v0.c1, v0.c0))))))AND((+ (v0.c1)))) DESC  NULLS LAST, CAST((((v0.c3)) NOT BETWEEN ((x'b4')) AND ((v0.c2))) AS BLOB)  NULLS FIRST LIMIT 0X2 INTERSECT SELECT ALL COUNT(*) FROM vt0, v0 WHERE (CASE WHEN (0.625307602624371 IN (v0.c0, v0.c0)) THEN ((v0.c2)<(v0.c3)) END) ORDER BY ((CASE WHEN v0.c0 THEN vt0.c0 WHEN v0.c0 THEN v0.c0 ELSE vt0.c0 END) IS FALSE) DESC, ((((((((((((NULL)OR(v0.c3)))OR(v0.c1)))OR(v0.c1)))AND(v0.c2)))OR((((vt0.c0, v0.c3, v0.c2)) NOT BETWEEN ((v0.c2, v0.c0, v0.c0)) AND ((v0.c3, v0.c1, v0.c0))))))AND((+ (v0.c1)))) DESC  NULLS LAST, CAST((((v0.c3)) NOT BETWEEN ((x'b4')) AND ((v0.c2))) AS BLOB)  NULLS FIRST LIMIT 2;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON ((((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) WHERE (vt0.c0);
SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON ((((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) WHERE (vt0.c0) LIMIT 0x4;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON ((((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) WHERE (vt0.c0);
SELECT DISTINCT * FROM vt2 INNER JOIN vt0 ON ((((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) WHERE (vt0.c0) LIMIT 0x4;
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (((0.8185504420821136) IS FALSE)) ORDER BY CAST(((vt2.c1)%(vt2.c0)) AS BLOB)  NULLS FIRST, CASE WHEN (vt2.c1 IN (vt2.c0)) THEN CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 END WHEN (((vt0.c0, vt0.c0, vt0.c0, vt2.c0)) BETWEEN ((vt2.c1, vt0.c0, vt0.c0, vt2.c0)) AND ((vt2.c1, vt0.c0, vt0.c0, vt2.c1))) THEN (+ (vt0.c0)) ELSE vt2.c1 END ASC;
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (((((0.8185504420821136) IS FALSE))AND(((CAST(vt0.c0 AS NUMERIC)) IS TRUE)))) ORDER BY (((vt2.c0) IS TRUE) IN ()) ASC INTERSECT SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (CAST(NULL AS BLOB)) ORDER BY (((vt2.c0) IS TRUE) IN ()) ASC;
SELECT * FROM v0 WHERE ((((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c3)))) NOTNULL)) ORDER BY (- (json_patch(v0.c2, v0.c1))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c3)))) NOTNULL)) ORDER BY (+ (CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN NULL ELSE v0.c1 END))  NULLS LAST, ABS(CASE v0.c2  WHEN v0.c2 THEN v0.c0 END)  NULLS FIRST, v0.c2 LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c0))))|(v0.c3))) ORDER BY (+ (CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN NULL ELSE v0.c1 END))  NULLS LAST, ABS(CASE v0.c2  WHEN v0.c2 THEN v0.c0 END)  NULLS FIRST, v0.c2 LIMIT 1;
SELECT * FROM v0 WHERE ((((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c3)))) NOTNULL)) ORDER BY (- (json_patch(v0.c2, v0.c1))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c3)))) NOTNULL)) ORDER BY (+ (CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN NULL ELSE v0.c1 END))  NULLS LAST, ABS(CASE v0.c2  WHEN v0.c2 THEN v0.c0 END)  NULLS FIRST, v0.c2 LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c0))))|(v0.c3))) ORDER BY (+ (CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN NULL ELSE v0.c1 END))  NULLS LAST, ABS(CASE v0.c2  WHEN v0.c2 THEN v0.c0 END)  NULLS FIRST, v0.c2 LIMIT 1;
SELECT ALL * FROM vt2, v0, vt0 WHERE (x'49') ORDER BY (v0.c1 IN ()) COLLATE RTRIM DESC;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((x'49')AND((((vt2.c1) BETWEEN (v0.c2) AND (vt2.c1)) IN ())))) ORDER BY v0.c3  NULLS LAST, ((((vt2.c1)IS(NULL)))IS(v0.c2)) LIMIT 0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE ((((v0.c0, vt2.c1)) BETWEEN ((((v0.c0) ISNULL), CASE WHEN v0.c1 THEN x'663e' WHEN v0.c0 THEN v0.c2 END)) AND ((((v0.c1)OR(v0.c3)), CASE WHEN v0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN v0.c3 THEN -329968071 ELSE v0.c0 END)))) ORDER BY v0.c3  NULLS LAST, ((((vt2.c1)IS(NULL)))IS(v0.c2)) LIMIT 0x0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (x'49') ORDER BY (v0.c1 IN ()) COLLATE RTRIM DESC;
SELECT ALL * FROM vt2, v0, vt0 WHERE (CAST(v0.c1 COLLATE RTRIM AS BLOB));
SELECT ALL * FROM vt2, v0, vt0 WHERE (CAST(v0.c1 COLLATE RTRIM AS BLOB)) ORDER BY (((0.22901649074625952)IS(v0.c0)) IN ()) ASC  NULLS LAST, (NOT (((((v0.c2)OR(vt0.c0)))AND(v0.c2))))  NULLS LAST, ((((CAST(v0.c3 AS NUMERIC))AND(((v0.c1)IS NOT(vt2.c0)))))OR(((0.04473641489892133)<=(v0.c0)))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE ((((~ (v0.c0))) IS TRUE)) ORDER BY (((0.22901649074625952)IS(v0.c0)) IN ()) ASC  NULLS LAST, (NOT (((((v0.c2)OR(vt0.c0)))AND(v0.c2))))  NULLS LAST, ((((CAST(v0.c3 AS NUMERIC))AND(((v0.c1)IS NOT(vt2.c0)))))OR(((0.04473641489892133)<=(v0.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (CAST(v0.c1 COLLATE RTRIM AS BLOB));
SELECT ALL * FROM vt2, v0, vt0 WHERE (CAST(v0.c1 COLLATE RTRIM AS BLOB)) ORDER BY (((0.22901649074625952)IS(v0.c0)) IN ()) ASC  NULLS LAST, (NOT (((((v0.c2)OR(vt0.c0)))AND(v0.c2))))  NULLS LAST, ((((CAST(v0.c3 AS NUMERIC))AND(((v0.c1)IS NOT(vt2.c0)))))OR(((0.04473641489892133)<=(v0.c0)))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE ((((~ (v0.c0))) IS TRUE)) ORDER BY (((0.22901649074625952)IS(v0.c0)) IN ()) ASC  NULLS LAST, (NOT (((((v0.c2)OR(vt0.c0)))AND(v0.c2))))  NULLS LAST, ((((CAST(v0.c3 AS NUMERIC))AND(((v0.c1)IS NOT(vt2.c0)))))OR(((0.04473641489892133)<=(v0.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT MIN(vt2.c0) FROM v0, vt2, vt0 WHERE (CASE ((((((v0.c2)OR(vt2.c0)))AND(0.968274167525788)))AND(v0.c1))  WHEN CASE vt2.c0  WHEN v0.c2 THEN v0.c0 END THEN v0.c3 ELSE IFNULL(DISTINCT vt2.c0, '0.0') END) ORDER BY (((vt0.c0 IN (v0.c0, vt2.c1)))GLOB(CASE WHEN v0.c1 THEN v0.c2 END)) ASC;
SELECT MIN(vt2.c0) FROM v0, vt2, vt0 NOT INDEXED WHERE (CASE ((((((v0.c2)OR(vt2.c0)))AND(0.968274167525788)))AND(v0.c1))  WHEN CASE vt2.c0  WHEN v0.c2 THEN v0.c0 END THEN v0.c3 ELSE IFNULL(DISTINCT vt2.c0, '0.0') END) ORDER BY (((vt0.c0 IN (v0.c0, vt2.c1)))GLOB(CASE WHEN v0.c1 THEN v0.c2 END)) ASC INTERSECT SELECT MIN(vt2.c0) FROM v0, vt2 NOT INDEXED, vt0 WHERE ((((CASE v0.c3  WHEN 0.7960308810159762 THEN vt0.c0 WHEN NULL THEN 0.8886624000749642 WHEN v0.c2 THEN vt2.c1 ELSE v0.c3 END))<>((CAST(v0.c2 AS TEXT))))) ORDER BY (((vt0.c0 IN (v0.c0, vt2.c1)))GLOB(CASE WHEN v0.c1 THEN v0.c2 END)) ASC;
SELECT * FROM vt0 WHERE (CASE WHEN json_type(vt0.c0) THEN ((((((vt0.c0)OR(x'788e')))OR(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (((vt0.c0, vt0.c0, vt0.c0))<>((0x7a017b1c, vt0.c0, vt0.c0))) ELSE HEX(vt0.c0) END);
SELECT ALL * FROM vt0 WHERE (CASE WHEN json_type(vt0.c0) THEN ((((((vt0.c0)OR(x'788e')))OR(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (((vt0.c0, vt0.c0, vt0.c0))>((2046917404, vt0.c0, vt0.c0))) ELSE HEX(vt0.c0) END) LIMIT 0x4 INTERSECT SELECT ALL * FROM vt0 WHERE ((~ (CASE vt0.c0  WHEN 0Xffffffffdcf0e342 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END))) LIMIT 0X4;
SELECT * FROM vt0 WHERE (CASE WHEN json_type(vt0.c0) THEN ((((((vt0.c0)OR(x'788e')))OR(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN (((vt0.c0, vt0.c0, vt0.c0))<>((0x7a017b1c, vt0.c0, vt0.c0))) ELSE HEX(vt0.c0) END);
SELECT ALL * FROM v0, vt0 WHERE ((- (((v0.c3)|(v0.c2))))) ORDER BY (((v0.c2 IN (v0.c2, v0.c0)))*(((v0.c0)<=(v0.c3)))) ASC, ((((((((v0.c1)OR(v0.c0)))OR(vt0.c0)))OR(v0.c3))) NOT BETWEEN (((v0.c2)=(v0.c0))) AND (IFNULL(v0.c1, v0.c2))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0 WHERE ((((- (((v0.c3)|(v0.c2)))))AND((- (((v0.c2)<<(v0.c3))))))) ORDER BY (((v0.c2 IN (v0.c2, v0.c0)))*(((v0.c0)<=(v0.c3)))) ASC, ((((((((v0.c1)OR(v0.c0)))OR(vt0.c0)))OR(v0.c3))) NOT BETWEEN (((v0.c2)==(v0.c0))) AND (IFNULL(v0.c1, v0.c2))) ASC  NULLS LAST LIMIT 3;
SELECT ALL * FROM v0, vt0 WHERE ((- (((v0.c3)|(v0.c2))))) ORDER BY (((v0.c2 IN (v0.c2, v0.c0)))*(((v0.c0)<=(v0.c3)))) ASC, ((((((((v0.c1)OR(v0.c0)))OR(vt0.c0)))OR(v0.c3))) NOT BETWEEN (((v0.c2)=(v0.c0))) AND (IFNULL(v0.c1, v0.c2))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0 WHERE ((((- (((v0.c3)|(v0.c2)))))AND((- (((v0.c2)<<(v0.c3))))))) ORDER BY (((v0.c2 IN (v0.c2, v0.c0)))*(((v0.c0)<=(v0.c3)))) ASC, ((((((((v0.c1)OR(v0.c0)))OR(vt0.c0)))OR(v0.c3))) NOT BETWEEN (((v0.c2)==(v0.c0))) AND (IFNULL(v0.c1, v0.c2))) ASC  NULLS LAST LIMIT 3;
SELECT * FROM v0, vt2 WHERE (((CAST(x'f8aa' AS NUMERIC))IS NOT(((vt2.c0)<=(vt2.c1)))));
SELECT ALL * FROM v0, vt2 WHERE (((((CAST(x'f8aa' AS NUMERIC))IS NOT(((vt2.c0)<=(vt2.c1)))))AND(((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 END) IS TRUE)))) LIMIT 0x0;
SELECT * FROM v0, vt2 WHERE (((CAST(x'f8aa' AS NUMERIC))IS NOT(((vt2.c0)<=(vt2.c1)))));
SELECT ALL * FROM v0, vt2 WHERE (((((CAST(x'f8aa' AS NUMERIC))IS NOT(((vt2.c0)<=(vt2.c1)))))AND(((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 END) IS TRUE)))) LIMIT 0x0;
SELECT MAX(v0.c0) FROM vt0, v0 WHERE (((((v0.c3)GLOB(vt0.c0))) BETWEEN (0.2108925113409189) AND ((((((('-787073840')OR(vt0.c0)))OR(v0.c0)))OR(v0.c2)))));
SELECT ALL MAX(v0.c0) FROM vt0, v0 WHERE (((((((v0.c3)GLOB(vt0.c0))) BETWEEN (0.2108925113409189) AND ((((((('-787073840')OR(vt0.c0)))OR(v0.c0)))OR(v0.c2)))))AND(((CASE v0.c1  WHEN v0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)IS NOT(((v0.c2)>=(v0.c1)))))));
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (vt2.c1);
SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (vt2.c1) ORDER BY v0.c1  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (((CASE v0.c1  WHEN v0.c1 THEN vt0.c0 WHEN vt0.c0 THEN v0.c0 ELSE v0.c3 END)IS('-1866109544' COLLATE RTRIM))) ORDER BY v0.c1  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))) BETWEEN (vt2.c0) AND (CAST(vt2.c1 AS INTEGER))));
SELECT DISTINCT * FROM vt2 WHERE (((((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))) BETWEEN (vt2.c0) AND (CAST(vt2.c1 AS INTEGER))))AND((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)) IN ((vt2.c0 IN (vt2.c1))))))) LIMIT 0;
SELECT * FROM vt2 WHERE (((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))) BETWEEN (vt2.c0) AND (CAST(vt2.c1 AS INTEGER))));
SELECT DISTINCT * FROM vt2 WHERE (((((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))) BETWEEN (vt2.c0) AND (CAST(vt2.c1 AS INTEGER))))AND((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)) IN ((vt2.c0 IN (vt2.c1))))))) LIMIT 0;
SELECT ALL * FROM v0 WHERE (CASE WHEN CASE WHEN v0.c0 THEN v0.c3 END THEN (('-2061948397') IS TRUE) WHEN (- (v0.c3)) THEN v0.c3 COLLATE NOCASE END);
SELECT DISTINCT * FROM v0 WHERE (CASE WHEN CASE WHEN v0.c0 THEN v0.c3 END THEN (('-2061948397') IS TRUE) WHEN (- (v0.c3)) THEN v0.c3 COLLATE NOCASE END) ORDER BY CASE CAST(v0.c3 AS REAL)  WHEN (((v0.c2, v0.c3, NULL, v0.c1))==((v0.c3, v0.c2, v0.c2, v0.c2))) THEN (((v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c0)) AND ((v0.c2, v0.c2))) WHEN ((((v0.c3)AND(v0.c3)))OR(v0.c3)) THEN ((v0.c1)<<(v0.c0)) ELSE ((((((v0.c0)AND(v0.c3)))AND(v0.c0)))OR(v0.c1)) END DESC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CASE CAST(v0.c3 AS INTEGER)  WHEN ABS(-865297338) THEN CAST(v0.c1 AS REAL) ELSE ((((((v0.c0)AND(v0.c2)))OR(v0.c2)))OR(v0.c2)) END) ORDER BY CASE CAST(v0.c3 AS REAL)  WHEN (((v0.c2, v0.c3, NULL, v0.c1))=((v0.c3, v0.c2, v0.c2, v0.c2))) THEN (((v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c0)) AND ((v0.c2, v0.c2))) WHEN ((((v0.c3)AND(v0.c3)))OR(v0.c3)) THEN ((v0.c1)<<(v0.c0)) ELSE ((((((v0.c0)AND(v0.c3)))AND(v0.c0)))OR(v0.c1)) END DESC LIMIT 2;
SELECT ALL * FROM v0 WHERE (CASE WHEN CASE WHEN v0.c0 THEN v0.c3 END THEN (('-2061948397') IS TRUE) WHEN (- (v0.c3)) THEN v0.c3 COLLATE NOCASE END);
SELECT DISTINCT * FROM v0 WHERE (CASE WHEN CASE WHEN v0.c0 THEN v0.c3 END THEN (('-2061948397') IS TRUE) WHEN (- (v0.c3)) THEN v0.c3 COLLATE NOCASE END) ORDER BY CASE CAST(v0.c3 AS REAL)  WHEN (((v0.c2, v0.c3, NULL, v0.c1))==((v0.c3, v0.c2, v0.c2, v0.c2))) THEN (((v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c0)) AND ((v0.c2, v0.c2))) WHEN ((((v0.c3)AND(v0.c3)))OR(v0.c3)) THEN ((v0.c1)<<(v0.c0)) ELSE ((((((v0.c0)AND(v0.c3)))AND(v0.c0)))OR(v0.c1)) END DESC LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CASE CAST(v0.c3 AS INTEGER)  WHEN ABS(-865297338) THEN CAST(v0.c1 AS REAL) ELSE ((((((v0.c0)AND(v0.c2)))OR(v0.c2)))OR(v0.c2)) END) ORDER BY CASE CAST(v0.c3 AS REAL)  WHEN (((v0.c2, v0.c3, NULL, v0.c1))=((v0.c3, v0.c2, v0.c2, v0.c2))) THEN (((v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c0)) AND ((v0.c2, v0.c2))) WHEN ((((v0.c3)AND(v0.c3)))OR(v0.c3)) THEN ((v0.c1)<<(v0.c0)) ELSE ((((((v0.c0)AND(v0.c3)))AND(v0.c0)))OR(v0.c1)) END DESC LIMIT 2;
SELECT MAX(v0.c2) FROM v0 WHERE (((CASE WHEN v0.c0 THEN v0.c0 END) NOT BETWEEN (CAST(NULL AS NUMERIC)) AND (((v0.c3) IS TRUE))));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((CASE WHEN v0.c0 THEN v0.c0 END) NOT BETWEEN (CAST(NULL AS NUMERIC)) AND (((v0.c3) IS TRUE))))AND(x'cc'))) ORDER BY CAST(((((((v0.c0)AND(v0.c2)))OR(v0.c2)))AND('-405103116')) AS INTEGER)  NULLS LAST, (((((v0.c2, v0.c2, '-2077271850'))>=((v0.c1, v0.c2, v0.c0))))-('7(H.ai)A'))  NULLS FIRST, (((NOT (v0.c0)))/(v0.c0 COLLATE BINARY)) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (v0.c0) ORDER BY ((((((((v0.c2) NOTNULL))OR((vt2.c0 IN ()))))OR((NOT (v0.c0)))))OR((vt2.c1 IN ())))  NULLS FIRST, ((((((((v0.c1)OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt2.c1)) COLLATE NOCASE;
SELECT DISTINCT * FROM v0 NOT INDEXED, vt2, vt0 WHERE (((v0.c0)AND(IFNULL(DISTINCT CASE WHEN x'1f' THEN vt2.c0 WHEN 's9_GҶs㮊' THEN vt2.c1 WHEN v0.c1 THEN 'Em' END, v0.c1)))) ORDER BY ((((((((((vt2.c0) IS TRUE))AND(v0.c3 COLLATE NOCASE)))AND(((v0.c2) IS TRUE))))OR(v0.c2 COLLATE NOCASE)))OR((- (v0.c2)))) DESC, ((((-1067537482 IN ()), ((v0.c0)>>(vt2.c0)), ((((v0.c2)AND(vt0.c0)))AND(0.11301624028282076))))<((CAST(vt2.c0 AS TEXT), vt2.c1 COLLATE BINARY, (v0.c0 IN (v0.c3))))) ASC  NULLS FIRST LIMIT 0X4;
SELECT ALL * FROM v0, vt2, vt0 WHERE (v0.c0) ORDER BY ((((((((v0.c2) NOTNULL))OR((vt2.c0 IN ()))))OR((NOT (v0.c0)))))OR((vt2.c1 IN ())))  NULLS FIRST, ((((((((v0.c1)OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt2.c1)) COLLATE NOCASE;
SELECT DISTINCT * FROM v0 NOT INDEXED, vt2, vt0 WHERE (((v0.c0)AND(IFNULL(DISTINCT CASE WHEN x'1f' THEN vt2.c0 WHEN 's9_GҶs㮊' THEN vt2.c1 WHEN v0.c1 THEN 'Em' END, v0.c1)))) ORDER BY ((((((((((vt2.c0) IS TRUE))AND(v0.c3 COLLATE NOCASE)))AND(((v0.c2) IS TRUE))))OR(v0.c2 COLLATE NOCASE)))OR((- (v0.c2)))) DESC, ((((-1067537482 IN ()), ((v0.c0)>>(vt2.c0)), ((((v0.c2)AND(vt0.c0)))AND(0.11301624028282076))))<((CAST(vt2.c0 AS TEXT), vt2.c1 COLLATE BINARY, (v0.c0 IN (v0.c3))))) ASC  NULLS FIRST LIMIT 0X4;
SELECT MIN(v0.c3) FROM v0 WHERE ((((v0.c1) NOT NULL) IN ((v0.c0 IN (v0.c0)))));
SELECT ALL MIN(v0.c3) FROM v0 WHERE ((((v0.c1) NOT NULL) IN ((v0.c0 IN (v0.c0)))));
SELECT * FROM v0 WHERE (CHAR(CASE v0.c1  WHEN v0.c3 THEN '7' END, CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END, ((0.7865994150763606)%(v0.c1)), ((((((((((v0.c3)OR(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c0)))OR(v0.c2))));
SELECT ALL * FROM v0 WHERE (((CHAR(CASE v0.c1  WHEN v0.c3 THEN '7' END, CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END, ((0.7865994150763606)%(v0.c1)), ((((((((((v0.c3)OR(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c0)))OR(v0.c2))))AND((((((((((v0.c2, v0.c1))>((v0.c0, v0.c3))))OR(ABS(v0.c2))))AND((v0.c3 IN (v0.c1)))))AND(NULL))))) INTERSECT SELECT * FROM v0 WHERE ((NOT (((((((((v0.c2)AND(v0.c3)))AND(v0.c2)))OR(v0.c0)))OR(v0.c0)))));
SELECT * FROM v0 WHERE (CHAR(CASE v0.c1  WHEN v0.c3 THEN '7' END, CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END, ((0.7865994150763606)%(v0.c1)), ((((((((((v0.c3)OR(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c0)))OR(v0.c2))));
SELECT ALL * FROM v0 WHERE (((CHAR(CASE v0.c1  WHEN v0.c3 THEN '7' END, CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END, ((0.7865994150763606)%(v0.c1)), ((((((((((v0.c3)OR(v0.c1)))OR(v0.c0)))AND(v0.c2)))AND(v0.c0)))OR(v0.c2))))AND((((((((((v0.c2, v0.c1))>((v0.c0, v0.c3))))OR(ABS(v0.c2))))AND((v0.c3 IN (v0.c1)))))AND(NULL))))) INTERSECT SELECT * FROM v0 WHERE ((NOT (((((((((v0.c2)AND(v0.c3)))AND(v0.c2)))OR(v0.c0)))OR(v0.c0)))));
SELECT ALL MAX(v0.c2) FROM v0, vt2, vt0 WHERE (((v0.c3) NOT NULL)) ORDER BY (((((+ (-7.8707384E8)))AND(COALESCE(DISTINCT v0.c2, v0.c2, vt2.c1, '-qjEL}斄O', vt2.c1))))AND(((vt2.c0)*(v0.c3))))  NULLS FIRST, CAST((((v0.c1, v0.c1, v0.c3)) BETWEEN ((v0.c0, vt0.c0, v0.c1)) AND ((v0.c0, vt2.c0, vt2.c1))) AS REAL) ASC  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0, vt2, vt0 WHERE (((v0.c3) NOT NULL)) ORDER BY (((((+ (-7.8707384E8)))AND(COALESCE(DISTINCT v0.c2, v0.c2, vt2.c1, '-qjEL}斄O', vt2.c1))))AND(((vt2.c0)*(v0.c3))))  NULLS FIRST, CAST((((v0.c1, v0.c1, v0.c3)) BETWEEN ((v0.c0, vt0.c0, v0.c1)) AND ((v0.c0, vt2.c0, vt2.c1))) AS REAL) ASC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt2, vt0 WHERE (UNLIKELY(DISTINCT ((((((vt0.c0)AND(vt2.c1)))OR(v0.c1)))OR(vt2.c0)))) ORDER BY (((((+ (-7.8707384E8)))AND(COALESCE(DISTINCT v0.c2, v0.c2, vt2.c1, '-qjEL}斄O', vt2.c1))))AND(((vt2.c0)*(v0.c3))))  NULLS FIRST, CAST((((v0.c1, v0.c1, v0.c3)) BETWEEN ((v0.c0, vt0.c0, v0.c1)) AND ((v0.c0, vt2.c0, vt2.c1))) AS REAL) ASC  NULLS LAST LIMIT 0x1;
SELECT MAX(v0.c1) FROM v0, vt0, vt2 WHERE ((((((v0.c2)) BETWEEN ((v0.c1)) AND ((vt2.c1)))) NOT BETWEEN (((((vt0.c0)AND('1088640746')))AND(vt0.c0))) AND (((v0.c0)<<(vt2.c1)))));
SELECT DISTINCT MAX(v0.c1) FROM v0, vt0, vt2 WHERE ((((((v0.c2)) BETWEEN ((v0.c1)) AND ((vt2.c1)))) NOT BETWEEN (((((vt0.c0)AND('1088640746')))AND(vt0.c0))) AND (((v0.c0)<<(vt2.c1))))) ORDER BY (((v0.c1 IN (v0.c0)))>=(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) ASC, (~ (NULL)) COLLATE NOCASE ASC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((CAST(vt0.c0 AS NUMERIC) IN ()));
SELECT DISTINCT * FROM vt0 WHERE ((CAST(vt0.c0 AS NUMERIC) IN ())) ORDER BY ((((((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND(CAST(vt0.c0 AS REAL))))AND(((NULL)<(vt0.c0)))))AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0, vt0.c0, vt0.c0))))))AND(((vt0.c0) ISNULL)))  NULLS FIRST, CASE WHEN (+ (vt0.c0)) THEN (~ (NULL)) ELSE NULL COLLATE NOCASE END  NULLS LAST, vt0.c0  NULLS LAST, ((((vt0.c0)>>(vt0.c0)))<=(CAST(vt0.c0 AS TEXT))) LIMIT 0X1;
SELECT ALL * FROM vt0 WHERE ((CAST(vt0.c0 AS NUMERIC) IN ()));
SELECT DISTINCT * FROM vt0 WHERE ((CAST(vt0.c0 AS NUMERIC) IN ())) ORDER BY ((((((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND(CAST(vt0.c0 AS REAL))))AND(((NULL)<(vt0.c0)))))AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0, vt0.c0, vt0.c0))))))AND(((vt0.c0) ISNULL)))  NULLS FIRST, CASE WHEN (+ (vt0.c0)) THEN (~ (NULL)) ELSE NULL COLLATE NOCASE END  NULLS LAST, vt0.c0  NULLS LAST, ((((vt0.c0)>>(vt0.c0)))<=(CAST(vt0.c0 AS TEXT))) LIMIT 0X1;
SELECT COUNT(*) FROM vt0, vt2 WHERE (((CAST(NULL AS INTEGER))<=(((vt2.c0) IS FALSE)))) ORDER BY CASE vt2.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END COLLATE BINARY ASC  NULLS FIRST, (LIKELIHOOD(DISTINCT vt2.c1, vt2.c0) IN ()) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt0, vt2 WHERE (((((CAST(NULL AS INTEGER))<=(((vt2.c0) IS FALSE))))AND(CASE 0.4841800839787377  WHEN (vt2.c0 IN (vt2.c0)) THEN ((vt2.c0)>=(vt0.c0)) END))) ORDER BY CASE vt2.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END COLLATE BINARY ASC  NULLS FIRST, (LIKELIHOOD(DISTINCT vt2.c1, vt2.c0) IN ()) ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt0, v0 WHERE (TYPEOF(DISTINCT (((vt0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0)))));
SELECT * FROM vt0, v0 WHERE (TYPEOF(DISTINCT (((vt0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0))))) ORDER BY (((~ (v0.c3))) ISNULL)  NULLS LAST, ((((((((((v0.c3)OR(v0.c0)))OR(vt0.c0)))OR(v0.c2)))AND(v0.c1))) NOTNULL)  NULLS FIRST, HEX(DISTINCT (((v0.c3, vt0.c0, v0.c3)) BETWEEN ((v0.c3, v0.c0, v0.c0)) AND ((v0.c0, v0.c2, v0.c1))));
SELECT * FROM vt0, v0 WHERE (TYPEOF(DISTINCT (((vt0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0)))));
SELECT * FROM vt0, v0 WHERE (TYPEOF(DISTINCT (((vt0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0))))) ORDER BY (((~ (v0.c3))) ISNULL)  NULLS LAST, ((((((((((v0.c3)OR(v0.c0)))OR(vt0.c0)))OR(v0.c2)))AND(v0.c1))) NOTNULL)  NULLS FIRST, HEX(DISTINCT (((v0.c3, vt0.c0, v0.c3)) BETWEEN ((v0.c3, v0.c0, v0.c0)) AND ((v0.c0, v0.c2, v0.c1))));
SELECT ALL MIN(vt0.c0) FROM vt2 CROSS JOIN vt0 ON CASE WHEN ((((vt2.c0)AND(x'8d')))AND(vt0.c0)) THEN (((vt2.c0, vt2.c0, vt2.c0))>=((vt0.c0, vt2.c0, vt2.c0))) END WHERE ('▟{{a3饍p');
SELECT DISTINCT MIN(vt0.c0) FROM vt2 CROSS JOIN vt0 ON CASE WHEN ((((vt2.c0)AND(x'8d')))AND(vt0.c0)) THEN (((vt2.c0, vt2.c0, vt2.c0))>=((vt0.c0, vt2.c0, vt2.c0))) END WHERE ((('▟{{a3饍p')AND(CASE WHEN 'yjw' THEN '2046917404' WHEN (+ (vt2.c0)) THEN NULL WHEN ((vt2.c0)*(0.6528328379702512)) THEN ((vt2.c1)OR(vt2.c0)) WHEN ((vt0.c0)*(vt2.c1)) THEN (vt2.c0 IN ()) END))) ORDER BY CAST((+ (vt2.c1)) AS NUMERIC) DESC  NULLS FIRST, LAST_INSERT_ROWID()  NULLS LAST, ((NULL COLLATE BINARY)<<(vt2.c1 COLLATE BINARY))  NULLS LAST LIMIT 1;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE)<<(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))) ORDER BY ((((vt0.c0)OR(x'07')))IS(load_extension(vt0.c0, vt0.c0))) ASC  NULLS FIRST, ((vt0.c0) NOT BETWEEN (((vt0.c0) NOTNULL)) AND (CAST(vt0.c0 AS NUMERIC)))  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0 COLLATE NOCASE)<<(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND((((- (vt0.c0))) NOT BETWEEN (vt0.c0 COLLATE NOCASE) AND (CAST(vt0.c0 AS NUMERIC)))))) ORDER BY ((((vt0.c0)OR(x'07')))IS(load_extension(vt0.c0, vt0.c0))) ASC  NULLS FIRST, ((vt0.c0) NOT BETWEEN (((vt0.c0) NOTNULL)) AND (CAST(vt0.c0 AS NUMERIC)))  NULLS FIRST LIMIT 0x4 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((CASE '1052480027'  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) IS TRUE)) ORDER BY ((((vt0.c0)OR(x'07')))IS(load_extension(vt0.c0, vt0.c0))) ASC  NULLS FIRST, ((vt0.c0) NOT BETWEEN (((vt0.c0) NOTNULL)) AND (CAST(vt0.c0 AS NUMERIC)))  NULLS FIRST LIMIT 4;
SELECT ALL * FROM vt2 NATURAL JOIN vt0 WHERE ((((CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE NULL END, vt2.c1))>=((((vt2.c1)LIKE(vt0.c0)), NULL COLLATE RTRIM))));
SELECT ALL * FROM vt2 NATURAL JOIN vt0 WHERE ((((CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE NULL END, vt2.c1))>((((vt2.c1)LIKE(vt0.c0)), NULL COLLATE RTRIM)))) INTERSECT SELECT ALL * FROM vt2 NATURAL JOIN vt0 WHERE ((NOT (((vt2.c1)<=(vt2.c0)))));
SELECT ALL * FROM vt2 NATURAL JOIN vt0 WHERE ((((CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE NULL END, vt2.c1))>=((((vt2.c1)LIKE(vt0.c0)), NULL COLLATE RTRIM))));
SELECT ALL * FROM vt2 NATURAL JOIN vt0 WHERE ((((CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE NULL END, vt2.c1))>((((vt2.c1)LIKE(vt0.c0)), NULL COLLATE RTRIM)))) INTERSECT SELECT ALL * FROM vt2 NATURAL JOIN vt0 WHERE ((NOT (((vt2.c1)<=(vt2.c0)))));
SELECT ALL * FROM vt0 WHERE (x'2f1f');
SELECT DISTINCT * FROM vt0 WHERE (x'2f1f') ORDER BY (- ((vt0.c0 IN ()))) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt0 WHERE (x'2f1f');
SELECT DISTINCT * FROM vt0 WHERE (x'2f1f') ORDER BY (- ((vt0.c0 IN ()))) ASC  NULLS LAST LIMIT 2;
SELECT * FROM v0 NOT INDEXED, vt0 WHERE (((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)*(v0.c0)));
SELECT * FROM v0, vt0 WHERE (((((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)*(v0.c0)))AND((+ ((vt0.c0 IN (v0.c2))))))) INTERSECT SELECT ALL * FROM v0, vt0 WHERE ((((vt0.c0 IN (v0.c3, v0.c1)))IS NOT(((x'')&(v0.c2)))));
SELECT * FROM v0 NOT INDEXED, vt0 WHERE (((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)*(v0.c0)));
SELECT * FROM v0, vt0 WHERE (((((CASE WHEN v0.c2 THEN v0.c1 ELSE v0.c2 END)*(v0.c0)))AND((+ ((vt0.c0 IN (v0.c2))))))) INTERSECT SELECT ALL * FROM v0, vt0 WHERE ((((vt0.c0 IN (v0.c3, v0.c1)))IS NOT(((x'')&(v0.c2)))));
SELECT * FROM vt0 WHERE (((((NULL)LIKE(vt0.c0)))<<(vt0.c0))) ORDER BY ABS(vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((((((NULL)LIKE(vt0.c0)))<<(vt0.c0)))AND(TRIM(((vt0.c0)GLOB(vt0.c0)))))) ORDER BY ABS(vt0.c0);
SELECT * FROM vt0 WHERE (((((NULL)LIKE(vt0.c0)))<<(vt0.c0))) ORDER BY ABS(vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (((((((NULL)LIKE(vt0.c0)))<<(vt0.c0)))AND(TRIM(((vt0.c0)GLOB(vt0.c0)))))) ORDER BY ABS(vt0.c0);
SELECT ALL MAX(vt2.c1) FROM vt2 NATURAL JOIN vt0 WHERE ((json_insert(vt0.c0, vt0.c0, vt2.c1, vt2.c0, NULL, vt2.c0, vt2.c0) IN ())) ORDER BY vt2.c0 DESC  NULLS FIRST, vt2.c0 COLLATE RTRIM;
SELECT ALL MAX(vt2.c1) FROM vt2 NATURAL JOIN vt0 WHERE ((json_insert(vt0.c0, vt0.c0, vt2.c1, vt2.c0, NULL, vt2.c0, vt2.c0) IN ())) ORDER BY vt2.c0 DESC  NULLS FIRST, vt2.c0 COLLATE RTRIM;
SELECT MIN(vt0.c0) FROM vt0, v0, vt2 WHERE ((((((vt2.c0, v0.c2, v0.c1, v0.c1))>=((v0.c3, v0.c1, v0.c1, v0.c3))))!=(((('pP8qq\e', vt2.c0))>((v0.c0, v0.c3)))))) ORDER BY ((((vt2.c0)>(v0.c3)))<>(v0.c2 COLLATE BINARY)) DESC  NULLS LAST, '' DESC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0, v0, vt2 WHERE ((((((vt2.c0, v0.c2, v0.c1, v0.c1))>=((v0.c3, v0.c1, v0.c1, v0.c3))))>(((('pP8qq\e', vt2.c0))>((v0.c0, v0.c3)))))) ORDER BY ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)) COLLATE RTRIM  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0, v0, vt2 WHERE ((((vt2.c0, CAST(vt0.c0 AS TEXT)))>(('', (((v0.c3, v0.c2)) BETWEEN ((v0.c2, vt2.c1)) AND ((vt2.c0, v0.c0))))))) ORDER BY ((v0.c0) BETWEEN (v0.c0) AND (v0.c0)) COLLATE RTRIM  NULLS FIRST LIMIT 2;
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE ((((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 END))<>(((- (vt2.c1))))));
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE ((((((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 END))<(((- (vt2.c1))))))AND(((vt2.c0 COLLATE RTRIM)*((((('3')OR(vt2.c1)))OR(vt2.c1))))))) LIMIT 0x2;
SELECT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0)-(v0.c0)))<((NOT (0.44312673298235083)))) WHERE (((v0.c2 COLLATE BINARY) NOT BETWEEN (v0.c2) AND (((((((v0.c2)AND(vt0.c0)))OR(v0.c1)))AND(v0.c0)))));
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0)-(v0.c0)))<((NOT (0.44312673298235083)))) WHERE (((((v0.c2 COLLATE BINARY) NOT BETWEEN (v0.c2) AND (((((((v0.c2)AND(vt0.c0)))OR(v0.c1)))AND(v0.c0)))))AND(v0.c1))) ORDER BY ((((vt0.c0 IN ()), (+ (v0.c1))))<>((((vt0.c0)<<(v0.c0)), ((vt0.c0) IS FALSE)))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0)-(v0.c0)))<((NOT (0.44312673298235083)))) WHERE ((NOT (v0.c0))) ORDER BY ((((vt0.c0 IN ()), (+ (v0.c1))))<>((((vt0.c0)<<(v0.c0)), ((vt0.c0) IS FALSE)))) ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0)-(v0.c0)))<((NOT (0.44312673298235083)))) WHERE (((v0.c2 COLLATE BINARY) NOT BETWEEN (v0.c2) AND (((((((v0.c2)AND(vt0.c0)))OR(v0.c1)))AND(v0.c0)))));
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0)-(v0.c0)))<((NOT (0.44312673298235083)))) WHERE (((((v0.c2 COLLATE BINARY) NOT BETWEEN (v0.c2) AND (((((((v0.c2)AND(vt0.c0)))OR(v0.c1)))AND(v0.c0)))))AND(v0.c1))) ORDER BY ((((vt0.c0 IN ()), (+ (v0.c1))))<>((((vt0.c0)<<(v0.c0)), ((vt0.c0) IS FALSE)))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((((vt0.c0)-(v0.c0)))<((NOT (0.44312673298235083)))) WHERE ((NOT (v0.c0))) ORDER BY ((((vt0.c0 IN ()), (+ (v0.c1))))<>((((vt0.c0)<<(v0.c0)), ((vt0.c0) IS FALSE)))) ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt0 WHERE (((((((vt0.c0)==(vt0.c0)))AND(x'c4')))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY ((((vt0.c0)OR((+ (NULL)))))AND(vt0.c0)) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)=(vt0.c0)))AND(x'c4')))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY ((((vt0.c0)OR((+ (NULL)))))AND(vt0.c0)) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt0 WHERE (((((((vt0.c0)==(vt0.c0)))AND(x'c4')))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY ((((vt0.c0)OR((+ (NULL)))))AND(vt0.c0)) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)=(vt0.c0)))AND(x'c4')))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) ORDER BY ((((vt0.c0)OR((+ (NULL)))))AND(vt0.c0)) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0, v0 WHERE (((((v0.c1) NOTNULL))*(RTRIM(v0.c2)))) ORDER BY (((1020107220, ((vt0.c0)%(v0.c0))))!=((((vt0.c0)IS(v0.c0)), IFNULL(DISTINCT '214129716', vt0.c0)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE (((((((v0.c1) NOTNULL))*(RTRIM(v0.c2))))AND(((NULL COLLATE RTRIM) NOT NULL)))) ORDER BY (((0X3ccd99d4, ((vt0.c0)%(v0.c0))))!=((((vt0.c0)IS(v0.c0)), IFNULL(DISTINCT '214129716', vt0.c0)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((CAST('P6' AS BLOB))||(((v0.c1)%(v0.c3))))) ORDER BY (((0X3ccd99d4, ((vt0.c0)%(v0.c0))))!=((((vt0.c0)IS(v0.c0)), IFNULL(DISTINCT '214129716', vt0.c0)))) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, v0 WHERE (((((v0.c1) NOTNULL))*(RTRIM(v0.c2)))) ORDER BY (((1020107220, ((vt0.c0)%(v0.c0))))!=((((vt0.c0)IS(v0.c0)), IFNULL(DISTINCT '214129716', vt0.c0)))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE (((((((v0.c1) NOTNULL))*(RTRIM(v0.c2))))AND(((NULL COLLATE RTRIM) NOT NULL)))) ORDER BY (((0X3ccd99d4, ((vt0.c0)%(v0.c0))))!=((((vt0.c0)IS(v0.c0)), IFNULL(DISTINCT '214129716', vt0.c0)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((CAST('P6' AS BLOB))||(((v0.c1)%(v0.c3))))) ORDER BY (((0X3ccd99d4, ((vt0.c0)%(v0.c0))))!=((((vt0.c0)IS(v0.c0)), IFNULL(DISTINCT '214129716', vt0.c0)))) DESC  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE ((- (((vt0.c0)<(vt0.c0)))));
SELECT DISTINCT * FROM vt2, vt0 WHERE ((- (((vt0.c0)<(vt0.c0))))) ORDER BY ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)))>=(CAST(vt0.c0 AS REAL))) ASC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS TRUE)) ORDER BY ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)))>=(CAST(vt0.c0 AS REAL))) ASC LIMIT 1;
SELECT * FROM vt2, vt0 WHERE ((- (((vt0.c0)<(vt0.c0)))));
SELECT DISTINCT * FROM vt2, vt0 WHERE ((- (((vt0.c0)<(vt0.c0))))) ORDER BY ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)))>=(CAST(vt0.c0 AS REAL))) ASC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))) IS TRUE)) ORDER BY ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)))>=(CAST(vt0.c0 AS REAL))) ASC LIMIT 1;
SELECT ALL MIN(v0.c2) FROM v0 WHERE ((NOT (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c1)))));
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE ((NOT (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c1))))) LIMIT 3;
SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN ((v0.c2) NOT NULL) THEN UPPER(v0.c3) END) ORDER BY CASE WHEN (v0.c3 IN (vt0.c0, vt0.c0)) THEN LOWER(v0.c3) WHEN (v0.c2 IN (vt0.c0, v0.c3)) THEN ((v0.c1) BETWEEN ('1505891792') AND (v0.c1)) WHEN ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)) THEN v0.c2 COLLATE NOCASE ELSE CASE v0.c0  WHEN v0.c0 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 ELSE NULL END END;
SELECT ALL * FROM v0, vt0 WHERE (((CASE WHEN ((v0.c2) NOT NULL) THEN UPPER(v0.c3) END)AND(x''))) ORDER BY (((v0.c0 IN (v0.c3, v0.c0))) BETWEEN (v0.c3 COLLATE RTRIM) AND (vt0.c0 COLLATE RTRIM)) DESC  NULLS LAST, CAST(((v0.c0) NOTNULL) AS TEXT), '';
SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN ((v0.c2) NOT NULL) THEN UPPER(v0.c3) END) ORDER BY CASE WHEN (v0.c3 IN (vt0.c0, vt0.c0)) THEN LOWER(v0.c3) WHEN (v0.c2 IN (vt0.c0, v0.c3)) THEN ((v0.c1) BETWEEN ('1505891792') AND (v0.c1)) WHEN ((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)) THEN v0.c2 COLLATE NOCASE ELSE CASE v0.c0  WHEN v0.c0 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 ELSE NULL END END;
SELECT ALL * FROM v0, vt0 WHERE (((CASE WHEN ((v0.c2) NOT NULL) THEN UPPER(v0.c3) END)AND(x''))) ORDER BY (((v0.c0 IN (v0.c3, v0.c0))) BETWEEN (v0.c3 COLLATE RTRIM) AND (vt0.c0 COLLATE RTRIM)) DESC  NULLS LAST, CAST(((v0.c0) NOTNULL) AS TEXT), '';
SELECT ALL MAX(vt2.c0) FROM vt2, v0 WHERE (((((v0.c1)>(v0.c0))) IS TRUE));
SELECT MAX(vt2.c0) FROM vt2, v0 WHERE (((((v0.c1)>(v0.c0))) IS TRUE)) ORDER BY ((((IFNULL(DISTINCT v0.c3, vt2.c1))AND(vt2.c1)))AND('1469617908')) ASC, CASE vt2.c0  WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN v0.c3 END COLLATE BINARY  NULLS LAST INTERSECT SELECT ALL MAX(vt2.c0) FROM vt2, v0 WHERE ('4OFwe]X!') ORDER BY ((((IFNULL(DISTINCT v0.c3, vt2.c1))AND(vt2.c1)))AND('1469617908')) ASC, CASE vt2.c0  WHEN v0.c2 THEN vt2.c1 WHEN vt2.c0 THEN v0.c3 END COLLATE BINARY  NULLS LAST;
SELECT * FROM vt0, v0, vt2 WHERE ((((v0.c3)AND(v0.c2)) IN (((v0.c3) BETWEEN (vt2.c0) AND (v0.c0)))));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c3)AND(v0.c2)) IN (((v0.c3) BETWEEN (vt2.c0) AND (v0.c0)))));
SELECT * FROM vt0, v0, vt2 WHERE ((((v0.c3)AND(v0.c2)) IN (((v0.c3) BETWEEN (vt2.c0) AND (v0.c0)))));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c3)AND(v0.c2)) IN (((v0.c3) BETWEEN (vt2.c0) AND (v0.c0)))));
SELECT ALL * FROM vt0, vt2 WHERE ('');
SELECT DISTINCT * FROM vt0, vt2 WHERE ((('')AND((+ ('-1887740735'))))) LIMIT 0X4 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((vt2.c0)<<(vt0.c0)) COLLATE RTRIM) LIMIT 0X4;
SELECT ALL * FROM vt0, vt2 WHERE ('');
SELECT DISTINCT * FROM vt0, vt2 WHERE ((('')AND((+ ('-1887740735'))))) LIMIT 0X4 INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((vt2.c0)<<(vt0.c0)) COLLATE RTRIM) LIMIT 0X4;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE ((NULL IN ())) ORDER BY ((vt2.c1 COLLATE RTRIM) IS FALSE) ASC  NULLS FIRST;
SELECT MAX(vt2.c1) FROM vt2 WHERE ((((NULL IN ()))AND(((vt2.c0)<<(vt2.c1)) COLLATE NOCASE))) ORDER BY UNLIKELY(DISTINCT ((vt2.c0)AND(0.46465013650901643))) LIMIT 0x0 INTERSECT SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (UPPER(DISTINCT (vt2.c0 IN ()))) ORDER BY UNLIKELY(DISTINCT ((vt2.c0)AND(0.46465013650901643))) LIMIT 0X0;
SELECT * FROM v0, vt0, vt2 WHERE (((UNICODE(v0.c2))|('B')));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((UNICODE(v0.c2))|('B'))) ORDER BY 0.7669622623336813 COLLATE RTRIM DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (x'd1806d' COLLATE BINARY) ORDER BY 0.7669622623336813 COLLATE RTRIM DESC  NULLS FIRST;
SELECT * FROM v0, vt0, vt2 WHERE (((UNICODE(v0.c2))|('B')));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((UNICODE(v0.c2))|('B'))) ORDER BY 0.7669622623336813 COLLATE RTRIM DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (x'd1806d' COLLATE BINARY) ORDER BY 0.7669622623336813 COLLATE RTRIM DESC  NULLS FIRST;
SELECT * FROM vt2, v0, vt0 WHERE ((('') IS TRUE));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((('') IS TRUE));
SELECT * FROM vt2, v0, vt0 WHERE ((('') IS TRUE));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((('') IS TRUE));
SELECT * FROM vt2 WHERE (CAST(vt2.c0 COLLATE NOCASE AS BLOB));
SELECT * FROM vt2 WHERE (CAST(vt2.c0 COLLATE NOCASE AS BLOB)) LIMIT 0X2;
SELECT * FROM vt2 WHERE (CAST(vt2.c0 COLLATE NOCASE AS BLOB));
SELECT * FROM vt2 WHERE (CAST(vt2.c0 COLLATE NOCASE AS BLOB)) LIMIT 0X2;
SELECT ALL * FROM vt2, v0 WHERE (CAST(CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN NULL END AS TEXT)) ORDER BY v0.c1;
SELECT ALL * FROM vt2, v0 WHERE (((CAST(CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN NULL END AS TEXT))AND(((((- (vt2.c0))))<=(((NULL IN ()))))))) ORDER BY ((CAST(v0.c2 AS TEXT))LIKE(IFNULL(DISTINCT v0.c3, v0.c3))) DESC  NULLS LAST, ((CASE vt2.c0  WHEN vt2.c0 THEN v0.c1 END)>=(((v0.c1)>>(vt2.c0))))  NULLS LAST LIMIT 2 INTERSECT SELECT ALL * FROM vt2, v0 WHERE (NULL) ORDER BY ((CAST(v0.c2 AS TEXT))LIKE(IFNULL(DISTINCT v0.c3, v0.c3))) DESC  NULLS LAST, ((CASE vt2.c0  WHEN vt2.c0 THEN v0.c1 END)>=(((v0.c1)>>(vt2.c0))))  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt2, v0 WHERE (CAST(CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN NULL END AS TEXT)) ORDER BY v0.c1;
SELECT ALL * FROM vt2, v0 WHERE (((CAST(CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN NULL END AS TEXT))AND(((((- (vt2.c0))))<=(((NULL IN ()))))))) ORDER BY ((CAST(v0.c2 AS TEXT))LIKE(IFNULL(DISTINCT v0.c3, v0.c3))) DESC  NULLS LAST, ((CASE vt2.c0  WHEN vt2.c0 THEN v0.c1 END)>=(((v0.c1)>>(vt2.c0))))  NULLS LAST LIMIT 2 INTERSECT SELECT ALL * FROM vt2, v0 WHERE (NULL) ORDER BY ((CAST(v0.c2 AS TEXT))LIKE(IFNULL(DISTINCT v0.c3, v0.c3))) DESC  NULLS LAST, ((CASE vt2.c0  WHEN vt2.c0 THEN v0.c1 END)>=(((v0.c1)>>(vt2.c0))))  NULLS LAST LIMIT 2;
SELECT * FROM v0 WHERE (((((v0.c2) BETWEEN (v0.c1) AND (v0.c2)))&(CAST(v0.c3 AS BLOB)))) ORDER BY (~ (((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))) DESC;
SELECT * FROM v0 WHERE (((((v0.c2) BETWEEN (v0.c1) AND (v0.c2)))&(CAST(v0.c3 AS BLOB)))) ORDER BY (~ (((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))) DESC LIMIT 0x1;
SELECT * FROM v0 WHERE (((((v0.c2) BETWEEN (v0.c1) AND (v0.c2)))&(CAST(v0.c3 AS BLOB)))) ORDER BY (~ (((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))) DESC;
SELECT * FROM v0 WHERE (((((v0.c2) BETWEEN (v0.c1) AND (v0.c2)))&(CAST(v0.c3 AS BLOB)))) ORDER BY (~ (((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))) DESC LIMIT 0x1;
SELECT COUNT(*) FROM vt2 WHERE (CAST('?h1gebG' AS NUMERIC));
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((CAST('?h1gebG' AS NUMERIC))AND(((x'd2') NOT NULL)))) ORDER BY ((((vt2.c1) ISNULL)) NOTNULL), (((vt2.c0)) BETWEEN (((~ (vt2.c1)))) AND ((((vt2.c1)GLOB(vt2.c0))))) DESC  NULLS LAST, ((vt2.c0) IS FALSE) LIMIT 0x1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE (CHAR(((vt2.c1)IS(vt2.c0)), ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)), ABS(DISTINCT vt2.c1), CASE vt2.c1  WHEN vt2.c1 THEN '-268503340' ELSE vt2.c0 END)) ORDER BY ((((vt2.c1) ISNULL)) NOTNULL), (((vt2.c0)) BETWEEN (((~ (vt2.c1)))) AND ((((vt2.c1)GLOB(vt2.c0))))) DESC  NULLS LAST, ((vt2.c0) IS FALSE) LIMIT 1;
SELECT ALL * FROM vt2, v0, vt0 WHERE (CASE WHEN ((v0.c1) NOT NULL) THEN 0X4278ebac ELSE ((((((v0.c3)OR(vt2.c1)))OR(v0.c2)))AND(vt0.c0)) END) ORDER BY ((TYPEOF(v0.c2)) ISNULL) ASC  NULLS LAST, (CASE v0.c3  WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN vt2.c0 END IN ((+ (v0.c0)), CAST('1' AS REAL)));
SELECT ALL * FROM vt2, v0, vt0 WHERE (((CASE WHEN ((v0.c1) NOT NULL) THEN 0x4278ebac ELSE ((((((v0.c3)OR(vt2.c1)))OR(v0.c2)))AND(vt0.c0)) END)AND(CASE CASE v0.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 WHEN v0.c3 THEN 'p~lSc\\6' ELSE v0.c2 END  WHEN GLOB(v0.c0, v0.c1) THEN (- (v0.c0)) WHEN v0.c2 THEN ((((v0.c0)OR(v0.c2)))AND(vt2.c1)) WHEN ((vt2.c0)!=(vt2.c0)) THEN LOWER(v0.c3) WHEN (v0.c1 IN ()) THEN (vt2.c1 IN ()) END))) ORDER BY ((TYPEOF(v0.c2)) ISNULL) ASC  NULLS LAST, (CASE v0.c3  WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN vt2.c0 END IN ((+ (v0.c0)), CAST('1' AS REAL))) LIMIT 0x0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (((x'')OR(((((((((((v0.c3)AND(0.8051170643003698)))AND(v0.c3)))AND(v0.c2)))OR(v0.c3)))OR(v0.c0))))) ORDER BY ((TYPEOF(v0.c2)) ISNULL) ASC  NULLS LAST, (CASE v0.c3  WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN vt2.c0 END IN ((+ (v0.c0)), CAST('1' AS REAL))) LIMIT 0X0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (CASE WHEN ((v0.c1) NOT NULL) THEN 0X4278ebac ELSE ((((((v0.c3)OR(vt2.c1)))OR(v0.c2)))AND(vt0.c0)) END) ORDER BY ((TYPEOF(v0.c2)) ISNULL) ASC  NULLS LAST, (CASE v0.c3  WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN vt2.c0 END IN ((+ (v0.c0)), CAST('1' AS REAL)));
SELECT ALL * FROM vt2, v0, vt0 WHERE (((CASE WHEN ((v0.c1) NOT NULL) THEN 0x4278ebac ELSE ((((((v0.c3)OR(vt2.c1)))OR(v0.c2)))AND(vt0.c0)) END)AND(CASE CASE v0.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN vt0.c0 WHEN v0.c3 THEN 'p~lSc\\6' ELSE v0.c2 END  WHEN GLOB(v0.c0, v0.c1) THEN (- (v0.c0)) WHEN v0.c2 THEN ((((v0.c0)OR(v0.c2)))AND(vt2.c1)) WHEN ((vt2.c0)!=(vt2.c0)) THEN LOWER(v0.c3) WHEN (v0.c1 IN ()) THEN (vt2.c1 IN ()) END))) ORDER BY ((TYPEOF(v0.c2)) ISNULL) ASC  NULLS LAST, (CASE v0.c3  WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN vt2.c0 END IN ((+ (v0.c0)), CAST('1' AS REAL))) LIMIT 0x0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (((x'')OR(((((((((((v0.c3)AND(0.8051170643003698)))AND(v0.c3)))AND(v0.c2)))OR(v0.c3)))OR(v0.c0))))) ORDER BY ((TYPEOF(v0.c2)) ISNULL) ASC  NULLS LAST, (CASE v0.c3  WHEN vt2.c1 THEN v0.c2 WHEN vt2.c0 THEN vt2.c0 END IN ((+ (v0.c0)), CAST('1' AS REAL))) LIMIT 0X0;
SELECT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE ((- ((((v0.c3, NULL))>=((v0.c1, v0.c1)))))) ORDER BY (NOT (vt2.c1)), CAST(v0.c2 COLLATE NOCASE AS NUMERIC) DESC  NULLS FIRST;
SELECT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE ((- ((((v0.c3, NULL))>=((v0.c1, v0.c1)))))) ORDER BY (NOT (vt2.c1)), CAST(v0.c2 COLLATE NOCASE AS NUMERIC) DESC  NULLS FIRST LIMIT 0x3;
SELECT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE ((- ((((v0.c3, NULL))>=((v0.c1, v0.c1)))))) ORDER BY (NOT (vt2.c1)), CAST(v0.c2 COLLATE NOCASE AS NUMERIC) DESC  NULLS FIRST;
SELECT * FROM vt0 NATURAL JOIN vt2 NATURAL JOIN v0 WHERE ((- ((((v0.c3, NULL))>=((v0.c1, v0.c1)))))) ORDER BY (NOT (vt2.c1)), CAST(v0.c2 COLLATE NOCASE AS NUMERIC) DESC  NULLS FIRST LIMIT 0x3;
SELECT COUNT(*) FROM vt0, v0, vt2 WHERE (SUBSTR(((v0.c3) BETWEEN (v0.c2) AND (vt2.c1)), ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2))));
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (SUBSTR(((v0.c3) BETWEEN (v0.c2) AND (vt2.c1)), ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))) ORDER BY (((x'')) NOT BETWEEN (((- (v0.c2)))) AND (((NOT (x'67b4bcb3'))))) ASC, (- (vt0.c0)) DESC LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE ((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))) COLLATE BINARY) ORDER BY (((x'')) NOT BETWEEN (((- (v0.c2)))) AND (((NOT (x'67b4bcb3'))))) ASC, (- (vt0.c0)) DESC LIMIT 1;
SELECT ALL MAX(vt0.c0) FROM v0 NATURAL JOIN vt0 WHERE (CASE CASE WHEN v0.c3 THEN v0.c3 ELSE v0.c2 END  WHEN (v0.c3 IN ()) THEN ((v0.c3) NOT NULL) WHEN CAST(v0.c3 AS INTEGER) THEN CAST('|Y尴K聆2' AS NUMERIC) ELSE ((((v0.c3)OR(vt0.c0)))AND(vt0.c0)) END);
SELECT DISTINCT MAX(vt0.c0) FROM v0 NATURAL JOIN vt0 WHERE (((CASE CASE WHEN v0.c3 THEN v0.c3 ELSE v0.c2 END  WHEN (v0.c3 IN ()) THEN ((v0.c3) NOT NULL) WHEN CAST(v0.c3 AS INTEGER) THEN CAST('|Y尴K聆2' AS NUMERIC) ELSE ((((v0.c3)OR(vt0.c0)))AND(vt0.c0)) END)AND(((((((((v0.c2)OR(v0.c1)))OR(v0.c1)))AND(v0.c2)))AND(UPPER(v0.c0))))));
SELECT MIN(vt2.c1) FROM vt2, vt0, v0 WHERE (((vt2.c1) NOT BETWEEN (v0.c1) AND ('~㕎T')) COLLATE RTRIM);
SELECT ALL MIN(vt2.c1) FROM vt2, vt0, v0 WHERE (((((vt2.c1) NOT BETWEEN (v0.c1) AND ('~㕎T')) COLLATE RTRIM)AND(UNLIKELY(CASE v0.c1  WHEN x'' THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 ELSE 0.02263906211930533 END)))) ORDER BY ((((((v0.c1)OR(((v0.c0) BETWEEN (vt2.c1) AND (v0.c2)))))OR(CAST(vt0.c0 AS INTEGER))))AND('897493760'))  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (IFNULL(DISTINCT vt2.c0, vt0.c0) COLLATE NOCASE) ORDER BY ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))>=(((vt2.c1) ISNULL))) ASC, CAST((vt2.c0 IN ()) AS NUMERIC) DESC  NULLS FIRST, ((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))) BETWEEN (((('0.16217142275629903', vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1)) AND ((vt0.c0, vt2.c0)))) AND (vt2.c1 COLLATE NOCASE)) ASC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (IFNULL(DISTINCT vt2.c0, vt0.c0) COLLATE NOCASE) ORDER BY ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))>=(((vt2.c1) ISNULL))) ASC, CAST((vt2.c0 IN ()) AS NUMERIC) DESC  NULLS FIRST, ((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))) BETWEEN (((('0.16217142275629903', vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1)) AND ((vt0.c0, vt2.c0)))) AND (vt2.c1 COLLATE NOCASE)) ASC LIMIT 0x0;
SELECT * FROM vt2, vt0 WHERE (IFNULL(DISTINCT vt2.c0, vt0.c0) COLLATE NOCASE) ORDER BY ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))>=(((vt2.c1) ISNULL))) ASC, CAST((vt2.c0 IN ()) AS NUMERIC) DESC  NULLS FIRST, ((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))) BETWEEN (((('0.16217142275629903', vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1)) AND ((vt0.c0, vt2.c0)))) AND (vt2.c1 COLLATE NOCASE)) ASC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (IFNULL(DISTINCT vt2.c0, vt0.c0) COLLATE NOCASE) ORDER BY ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))>=(((vt2.c1) ISNULL))) ASC, CAST((vt2.c0 IN ()) AS NUMERIC) DESC  NULLS FIRST, ((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))) BETWEEN (((('0.16217142275629903', vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1)) AND ((vt0.c0, vt2.c0)))) AND (vt2.c1 COLLATE NOCASE)) ASC LIMIT 0x0;
SELECT COUNT(*) FROM vt0 NATURAL JOIN vt2 WHERE ('6') ORDER BY (NOT (LOWER(vt2.c0))) ASC  NULLS LAST, (+ (vt2.c1)) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt0 NATURAL JOIN vt2 WHERE ('6') ORDER BY (NOT (LOWER(vt2.c0))) ASC  NULLS LAST, (+ (vt2.c1)) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM vt0 NATURAL JOIN vt2 WHERE ((((((vt2.c1, vt0.c0))<=((vt2.c1, vt2.c1))))OR(((vt0.c0)%(vt2.c1))))) ORDER BY (NOT (LOWER(vt2.c0))) ASC  NULLS LAST, (+ (vt2.c1)) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL MAX(v0.c2) FROM vt0 INNER JOIN v0 ON (((vt2.c1)) BETWEEN ((((vt2.c1) ISNULL))) AND (('-1478372600'))) NATURAL JOIN vt2 WHERE (((v0.c1 COLLATE BINARY) BETWEEN (((v0.c3)|(0.01438694191151435))) AND (2.017635915E9))) ORDER BY ((CASE WHEN vt2.c0 THEN vt2.c1 WHEN 0.8200844879167247 THEN v0.c1 END) BETWEEN (CAST(vt2.c0 AS NUMERIC)) AND (x'755ec1fc' COLLATE RTRIM)) DESC, v0.c2 DESC;
SELECT ALL MAX(v0.c2) FROM vt0 INNER JOIN v0 ON (((vt2.c1)) BETWEEN ((((vt2.c1) ISNULL))) AND (('-1478372600'))) NATURAL JOIN vt2 WHERE (((v0.c1 COLLATE BINARY) BETWEEN (((v0.c3)|(0.01438694191151435))) AND (2.017635915E9))) ORDER BY ((CASE WHEN vt2.c0 THEN vt2.c1 WHEN 0.8200844879167247 THEN v0.c1 END) BETWEEN (CAST(vt2.c0 AS NUMERIC)) AND (x'755ec1fc' COLLATE RTRIM)) DESC, v0.c2 DESC LIMIT 5;
SELECT ALL * FROM vt2 WHERE (((((vt2.c0) NOTNULL)) BETWEEN ((vt2.c1 IN (vt2.c0))) AND ((vt2.c0 IN (vt2.c0))))) ORDER BY CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) AS BLOB);
SELECT ALL * FROM vt2 WHERE (((((vt2.c0) NOTNULL)) BETWEEN ((vt2.c1 IN (vt2.c0))) AND ((vt2.c0 IN (vt2.c0))))) ORDER BY CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) AS BLOB);
SELECT ALL * FROM vt2 WHERE (((((vt2.c0) NOTNULL)) BETWEEN ((vt2.c1 IN (vt2.c0))) AND ((vt2.c0 IN (vt2.c0))))) ORDER BY CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) AS BLOB);
SELECT ALL * FROM vt2 WHERE (((((vt2.c0) NOTNULL)) BETWEEN ((vt2.c1 IN (vt2.c0))) AND ((vt2.c0 IN (vt2.c0))))) ORDER BY CAST(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) AS BLOB);
SELECT MIN(v0.c2) FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((vt2.c0)||(v0.c1)) IN (CAST(v0.c1 AS INTEGER))) WHERE (INSTR(NULL, ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3))));
SELECT ALL MIN(v0.c2) FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((vt2.c0)||(v0.c1)) IN (CAST(v0.c1 AS INTEGER))) WHERE (((INSTR(NULL, ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3))))AND(((0.194552375295998)*(vt0.c0))))) ORDER BY (v0.c3 COLLATE NOCASE IN ()) ASC, vt2.c0  NULLS LAST, (CASE v0.c3  WHEN v0.c0 THEN v0.c0 WHEN 0.3743818727775493 THEN v0.c2 ELSE vt0.c0 END IN ((v0.c2 IN (v0.c0, v0.c0)))) ASC LIMIT 0 INTERSECT SELECT MIN(v0.c2) FROM vt2, vt0 LEFT OUTER JOIN v0 ON (((vt2.c0)||(v0.c1)) IN (CAST(v0.c1 AS INTEGER))) WHERE (HEX(v0.c3)) ORDER BY (v0.c3 COLLATE NOCASE IN ()) ASC, vt2.c0  NULLS LAST, (CASE v0.c3  WHEN v0.c0 THEN v0.c0 WHEN 0.3743818727775493 THEN v0.c2 ELSE vt0.c0 END IN ((v0.c2 IN (v0.c0, v0.c0)))) ASC LIMIT 0;
SELECT ALL MAX(v0.c2) FROM vt2, vt0, v0 WHERE (((((vt0.c0)) BETWEEN ((v0.c1)) AND ((vt0.c0))) IN ((((vt0.c0)) BETWEEN ((v0.c0)) AND ((vt2.c1))))));
SELECT MAX(v0.c2) FROM vt2, vt0, v0 WHERE (((((((vt0.c0)) BETWEEN ((v0.c1)) AND ((vt0.c0))) IN ((((vt0.c0)) BETWEEN ((v0.c0)) AND ((vt2.c1))))))AND((((v0.c2)) NOT BETWEEN (((+ (v0.c1)))) AND (((v0.c2 IN (vt2.c1))))))));
SELECT MIN(vt0.c0) FROM vt2, v0, vt0 WHERE (((v0.c1 IN ()) IN (CAST(v0.c3 AS TEXT), ((((((((vt0.c0)AND(v0.c2)))AND(vt0.c0)))OR(vt2.c1)))AND(v0.c2))))) ORDER BY ((((((x'c0')>(v0.c1)))AND((vt0.c0 IN (v0.c1, vt2.c1)))))OR(CAST(vt2.c1 AS TEXT)));
SELECT DISTINCT MIN(vt0.c0) FROM vt2, v0, vt0 WHERE (((v0.c1 IN ()) IN (CAST(v0.c3 AS TEXT), ((((((((vt0.c0)AND(v0.c2)))AND(vt0.c0)))OR(vt2.c1)))AND(v0.c2))))) ORDER BY ((((((x'c0')>(v0.c1)))AND((vt0.c0 IN (v0.c1, vt2.c1)))))OR(CAST(vt2.c1 AS TEXT))) LIMIT 0X2 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt2, v0, vt0 WHERE (v0.c1) ORDER BY ((((((x'c0')>(v0.c1)))AND((vt0.c0 IN (v0.c1, vt2.c1)))))OR(CAST(vt2.c1 AS TEXT))) LIMIT 0x2;
SELECT ALL MIN(vt0.c0) FROM vt0, v0 WHERE (COALESCE(DISTINCT CAST(v0.c0 AS INTEGER), ((v0.c2) NOTNULL), (vt0.c0 IN (v0.c1)), (((v0.c0))<(('-1522911904')))));
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (COALESCE(DISTINCT CAST(v0.c0 AS INTEGER), ((v0.c2) NOTNULL), (vt0.c0 IN (v0.c1)), (((v0.c0))<(('-1522911904')))));
SELECT ALL MAX(v0.c1) FROM vt0 CROSS JOIN vt2 ON 0X410604a3 INNER JOIN v0 ON 0.17738342191750334 COLLATE RTRIM WHERE ((((NOT (v0.c3))) NOTNULL)) ORDER BY (((v0.c1 COLLATE NOCASE))<=(('3[2]9|t('))), x'', (((v0.c0, v0.c3, vt2.c1, vt2.c0, vt0.c0)) NOT BETWEEN ((((((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))OR(v0.c2)))AND(v0.c0)))OR('348146811')), (- (v0.c0)), ((vt2.c0) NOTNULL), (((vt2.c0, v0.c0, vt2.c0))>((vt0.c0, '0.26499007313964207', vt0.c0))), ((vt2.c1) BETWEEN (v0.c0) AND (v0.c3)))) AND ((CASE WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END, ((v0.c0)GLOB(v0.c1)), ((vt0.c0)<<(vt2.c1)), CAST(v0.c0 AS TEXT), ((vt2.c0)>=(vt2.c0))))) DESC;
SELECT DISTINCT MAX(v0.c1) FROM vt0 CROSS JOIN vt2 ON 1090913443 INNER JOIN v0 ON 0.17738342191750334 COLLATE RTRIM WHERE ((((NOT (v0.c3))) NOTNULL)) ORDER BY (((v0.c1 COLLATE NOCASE))<=(('3[2]9|t('))), x'', (((v0.c0, v0.c3, vt2.c1, vt2.c0, vt0.c0)) NOT BETWEEN ((((((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))OR(v0.c2)))AND(v0.c0)))OR('348146811')), (- (v0.c0)), ((vt2.c0) NOTNULL), (((vt2.c0, v0.c0, vt2.c0))>((vt0.c0, '0.26499007313964207', vt0.c0))), ((vt2.c1) BETWEEN (v0.c0) AND (v0.c3)))) AND ((CASE WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END, ((v0.c0)GLOB(v0.c1)), ((vt0.c0)<<(vt2.c1)), CAST(v0.c0 AS TEXT), ((vt2.c0)>=(vt2.c0))))) DESC LIMIT 0x3;
SELECT * FROM vt0, v0 WHERE (v0.c0);
SELECT DISTINCT * FROM vt0, v0 WHERE (v0.c0) ORDER BY CAST((vt0.c0 IN (v0.c0, v0.c0)) AS NUMERIC) ASC, x'' LIMIT 2;
SELECT * FROM vt0, v0 WHERE (v0.c0);
SELECT DISTINCT * FROM vt0, v0 WHERE (v0.c0) ORDER BY CAST((vt0.c0 IN (v0.c0, v0.c0)) AS NUMERIC) ASC, x'' LIMIT 2;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((+ ((NOT (vt0.c0)))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((+ ((NOT (vt0.c0)))))AND((((~ (vt0.c0)))>>(((vt0.c0) NOT NULL)))))) ORDER BY json_remove(vt0.c0, vt0.c0, vt0.c0, vt0.c0) COLLATE NOCASE ASC, (vt0.c0 COLLATE NOCASE IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))), ((((vt0.c0)||(vt0.c0))) NOT BETWEEN (((NULL)-(vt0.c0))) AND ((vt0.c0 IN ()))) DESC LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0 COLLATE BINARY)AND(((vt0.c0)IS(vt0.c0)))))OR(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY json_remove(vt0.c0, vt0.c0, vt0.c0, vt0.c0) COLLATE NOCASE ASC, (vt0.c0 COLLATE NOCASE IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))), ((((vt0.c0)||(vt0.c0))) NOT BETWEEN (((NULL)-(vt0.c0))) AND ((vt0.c0 IN ()))) DESC LIMIT 0;
SELECT COUNT(*) FROM vt0, vt2 WHERE (((LIKELY(DISTINCT 'CLpE')) BETWEEN ('✨m') AND ((((vt2.c0, vt0.c0, vt2.c0))>=((vt2.c1, vt2.c1, vt2.c1)))))) ORDER BY NULL DESC, CAST(vt0.c0 COLLATE BINARY AS TEXT) ASC;
SELECT COUNT(*) FROM vt0, vt2 WHERE (((((LIKELY(DISTINCT 'CLpE')) BETWEEN ('✨m') AND ((((vt2.c0, vt0.c0, vt2.c0))==((vt2.c1, vt2.c1, vt2.c1))))))AND(load_extension(vt2.c0 COLLATE NOCASE, ((((((((vt0.c0)AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)))))) ORDER BY ((vt0.c0) NOTNULL) COLLATE RTRIM ASC, (((NOT (vt2.c1))) BETWEEN (CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 WHEN '-1956065535' THEN vt0.c0 ELSE vt2.c1 END) AND (((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt2.c1)))AND(vt2.c1)))AND(vt0.c0))))  NULLS LAST INTERSECT SELECT COUNT(*) FROM vt0, vt2 WHERE ((((((('!{i')AND(vt2.c1)))AND(vt2.c1)))<=((vt2.c0 IN (vt2.c0))))) ORDER BY ((vt0.c0) NOTNULL) COLLATE RTRIM ASC, (((NOT (vt2.c1))) BETWEEN (CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 WHEN '-1956065535' THEN vt0.c0 ELSE vt2.c1 END) AND (((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt2.c1)))AND(vt2.c1)))AND(vt0.c0))))  NULLS LAST;
SELECT ALL MAX(vt0.c0) FROM vt0, vt2 WHERE (((vt2.c0 COLLATE NOCASE) NOT NULL)) ORDER BY (((vt0.c0, vt2.c0)) NOT BETWEEN (((vt2.c1 IN (vt2.c1, vt0.c0)), (((vt2.c0, vt2.c0, vt0.c0, vt2.c1)) NOT BETWEEN ((vt0.c0, vt2.c0, vt0.c0, vt0.c0)) AND ((vt2.c1, vt0.c0, vt0.c0, NULL))))) AND ((vt0.c0 COLLATE BINARY, ((((((((vt2.c1)AND(vt0.c0)))AND(vt2.c1)))OR(vt0.c0)))OR('1487121526')))))  NULLS FIRST, ((CASE WHEN vt2.c0 THEN vt0.c0 WHEN '_Ⲭ#Qꉹ[z' THEN vt0.c0 END)<=(vt2.c0 COLLATE RTRIM)) ASC  NULLS FIRST, x'83' DESC;
SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2 WHERE (((((vt2.c0 COLLATE NOCASE) NOT NULL))AND((((NOT (vt2.c0))) BETWEEN (((((vt0.c0)OR(vt0.c0)))AND(vt2.c1))) AND (((vt2.c0)LIKE(vt0.c0))))))) ORDER BY CASE ((vt0.c0) ISNULL)  WHEN ((vt2.c0)|(vt0.c0)) THEN 'vo' END DESC, CAST(((vt2.c0)IS(0.3082391670441834)) AS TEXT) ASC  NULLS FIRST, CAST(vt2.c1 COLLATE NOCASE AS TEXT) ASC LIMIT 0X1;
SELECT * FROM vt0, v0, vt2 WHERE (((((v0.c1) NOT NULL)) NOT BETWEEN (((v0.c0)==(vt2.c0))) AND (((v0.c3)>=(vt2.c1))))) ORDER BY vt2.c0  NULLS FIRST, ((((v0.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) DESC  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE (((((v0.c1) NOT NULL)) NOT BETWEEN (((v0.c0)<=(vt2.c0))) AND (((v0.c3)>=(vt2.c1))))) ORDER BY vt2.c0  NULLS FIRST, ((((v0.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (((((((vt0.c0)OR(((v0.c3) IS FALSE))))AND(x'17')))OR(CASE v0.c1  WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END))) ORDER BY vt2.c0  NULLS FIRST, ((((v0.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) DESC  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE (((((v0.c1) NOT NULL)) NOT BETWEEN (((v0.c0)==(vt2.c0))) AND (((v0.c3)>=(vt2.c1))))) ORDER BY vt2.c0  NULLS FIRST, ((((v0.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) DESC  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE (((((v0.c1) NOT NULL)) NOT BETWEEN (((v0.c0)<=(vt2.c0))) AND (((v0.c3)>=(vt2.c1))))) ORDER BY vt2.c0  NULLS FIRST, ((((v0.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (((((((vt0.c0)OR(((v0.c3) IS FALSE))))AND(x'17')))OR(CASE v0.c1  WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END))) ORDER BY vt2.c0  NULLS FIRST, ((((v0.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS FALSE) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE ((- ((NOT (v0.c2)))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((- ((NOT (v0.c2))))) ORDER BY CAST(CASE v0.c3  WHEN v0.c3 THEN v0.c2 END AS BLOB), (((+ (v0.c0)))IS(((v0.c1)GLOB(v0.c3))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))+(((v0.c3) IS TRUE)))) ORDER BY CAST(CASE v0.c3  WHEN v0.c3 THEN v0.c2 END AS BLOB), (((+ (v0.c0)))IS(((v0.c1)GLOB(v0.c3))))  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE ((- ((NOT (v0.c2)))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((- ((NOT (v0.c2))))) ORDER BY CAST(CASE v0.c3  WHEN v0.c3 THEN v0.c2 END AS BLOB), (((+ (v0.c0)))IS(((v0.c1)GLOB(v0.c3))))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))+(((v0.c3) IS TRUE)))) ORDER BY CAST(CASE v0.c3  WHEN v0.c3 THEN v0.c2 END AS BLOB), (((+ (v0.c0)))IS(((v0.c1)GLOB(v0.c3))))  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CASE ((vt0.c0)+(vt0.c0))  WHEN x'1b1a' THEN json_quote(vt0.c0) WHEN LIKELY(x'') THEN 1189168769 ELSE ((vt0.c0) ISNULL) END) ORDER BY ((vt0.c0 IN ()) IN ()) ASC  NULLS FIRST, (- (vt0.c0)) COLLATE BINARY ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((CASE ((vt0.c0)+(vt0.c0))  WHEN x'1b1a' THEN json_quote(vt0.c0) WHEN LIKELY(x'') THEN 0X46e14681 ELSE ((vt0.c0) ISNULL) END)AND(((((vt0.c0)=(vt0.c0)))|(''))))) ORDER BY ((INSTR(NULL, vt0.c0))>>(CAST(vt0.c0 AS BLOB))) ASC LIMIT 1 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((((((((vt0.c0) IS FALSE))AND(vt0.c0)))AND(vt0.c0 COLLATE NOCASE)))OR(0.34043358357054243)))AND((vt0.c0 IN (vt0.c0))))) ORDER BY ((INSTR(NULL, vt0.c0))>>(CAST(vt0.c0 AS BLOB))) ASC LIMIT 0x1;
SELECT * FROM v0, vt0, vt2 WHERE ('765630797') ORDER BY 0.08153157447739401 ASC, NULL, ((((v0.c3 COLLATE BINARY)OR(v0.c3 COLLATE NOCASE)))OR('a' COLLATE RTRIM));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((('765630797')AND((((NOT (vt2.c1))) IS TRUE)))) ORDER BY COALESCE(DISTINCT (+ (v0.c3)), CHAR(v0.c3), ((vt0.c0) NOT NULL), rtreenode(vt2.c0, v0.c3));
SELECT * FROM v0, vt0, vt2 WHERE ('765630797') ORDER BY 0.08153157447739401 ASC, NULL, ((((v0.c3 COLLATE BINARY)OR(v0.c3 COLLATE NOCASE)))OR('a' COLLATE RTRIM));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((('765630797')AND((((NOT (vt2.c1))) IS TRUE)))) ORDER BY COALESCE(DISTINCT (+ (v0.c3)), CHAR(v0.c3), ((vt0.c0) NOT NULL), rtreenode(vt2.c0, v0.c3));
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(vt2.c0 AS TEXT)) BETWEEN (((vt0.c0) BETWEEN (vt2.c0) AND (v0.c2))) AND (((v0.c2) NOT BETWEEN (v0.c3) AND (vt0.c0)))));
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(vt2.c0 AS TEXT)) BETWEEN (((vt0.c0) BETWEEN (vt2.c0) AND (v0.c2))) AND (((v0.c2) NOT BETWEEN (v0.c3) AND (vt0.c0))))) ORDER BY ((((v0.c1)>(v0.c1)))=(vt0.c0)) DESC, LAST_INSERT_ROWID(), CAST((((NULL, NULL, v0.c1, v0.c0))<=((v0.c3, vt0.c0, v0.c3, vt2.c1))) AS INTEGER) ASC LIMIT 3 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (v0.c3) ORDER BY ((((v0.c1)>(v0.c1)))==(vt0.c0)) DESC, LAST_INSERT_ROWID(), CAST((((NULL, NULL, v0.c1, v0.c0))<=((v0.c3, vt0.c0, v0.c3, vt2.c1))) AS INTEGER) ASC LIMIT 3;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(vt2.c0 AS TEXT)) BETWEEN (((vt0.c0) BETWEEN (vt2.c0) AND (v0.c2))) AND (((v0.c2) NOT BETWEEN (v0.c3) AND (vt0.c0)))));
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(vt2.c0 AS TEXT)) BETWEEN (((vt0.c0) BETWEEN (vt2.c0) AND (v0.c2))) AND (((v0.c2) NOT BETWEEN (v0.c3) AND (vt0.c0))))) ORDER BY ((((v0.c1)>(v0.c1)))=(vt0.c0)) DESC, LAST_INSERT_ROWID(), CAST((((NULL, NULL, v0.c1, v0.c0))<=((v0.c3, vt0.c0, v0.c3, vt2.c1))) AS INTEGER) ASC LIMIT 3 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (v0.c3) ORDER BY ((((v0.c1)>(v0.c1)))==(vt0.c0)) DESC, LAST_INSERT_ROWID(), CAST((((NULL, NULL, v0.c1, v0.c0))<=((v0.c3, vt0.c0, v0.c3, vt2.c1))) AS INTEGER) ASC LIMIT 3;
SELECT ALL MIN(v0.c2) FROM v0 LEFT OUTER JOIN vt0 ON ((((v0.c3)/(v0.c2)))>>(v0.c0)) WHERE (json_type((((x''))>((vt0.c0))))) ORDER BY (((v0.c1 IN ()))GLOB(v0.c3 COLLATE RTRIM)), (((((((v0.c0 IN (0.9695749382311454)))OR(CAST(v0.c2 AS INTEGER))))OR(((v0.c2)>(v0.c3)))))AND(CAST(v0.c2 AS TEXT))), CAST(CASE WHEN v0.c2 THEN vt0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END AS NUMERIC)  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0 LEFT OUTER JOIN vt0 ON ((((v0.c3)/(v0.c2)))>>(v0.c0)) WHERE (json_type((((x''))>((vt0.c0))))) ORDER BY (((vt0.c0, v0.c1)) BETWEEN ((v0.c2, ('eR' IN ()))) AND ((((v0.c0)%(v0.c2)), highlight(v0.c2, v0.c3, v0.c1, v0.c3)))) ASC LIMIT 0X1 INTERSECT SELECT MIN(v0.c2) FROM v0 LEFT OUTER JOIN vt0 ON ((((v0.c3)/(v0.c2)))>>(v0.c0)) WHERE ((((v0.c2)<(v0.c2)) IN ())) ORDER BY (((vt0.c0, v0.c1)) BETWEEN ((v0.c2, ('eR' IN ()))) AND ((((v0.c0)%(v0.c2)), highlight(v0.c2, v0.c3, v0.c1, v0.c3)))) ASC LIMIT 1;
SELECT MAX(v0.c1) FROM v0 LEFT OUTER JOIN vt0 ON (v0.c3 IN ('1137142965')) COLLATE NOCASE WHERE ((+ (CASE WHEN vt0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c3 END))) ORDER BY (((v0.c2, v0.c0, vt0.c0)) BETWEEN ((vt0.c0, v0.c3, vt0.c0)) AND ((v0.c1, v0.c0, '/x.'))) COLLATE NOCASE DESC, CAST(((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)) AS NUMERIC) ASC  NULLS FIRST;
SELECT ALL MAX(v0.c1) FROM v0 LEFT OUTER JOIN vt0 ON (v0.c3 IN ('1137142965')) COLLATE NOCASE WHERE ((((+ (CASE WHEN vt0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c3 END)))AND(((vt0.c0 IN (v0.c1)) IN (CASE WHEN x'ea70' THEN v0.c0 ELSE v0.c1 END))))) ORDER BY LIKELIHOOD(DISTINCT (~ (NULL)), CAST(v0.c2 AS TEXT)) DESC  NULLS LAST, ((((v0.c0)!=(-2.127914432E9)))OR(((v0.c0) NOT NULL))) ASC  NULLS FIRST INTERSECT SELECT MAX(v0.c1) FROM v0 LEFT OUTER JOIN vt0 ON (v0.c3 IN ('1137142965')) COLLATE NOCASE WHERE (CASE WHEN CAST(v0.c2 AS NUMERIC) THEN CAST(x'' AS NUMERIC) WHEN json_array(v0.c3, v0.c0, vt0.c0) THEN v0.c1 END) ORDER BY LIKELIHOOD(DISTINCT (~ (NULL)), CAST(v0.c2 AS TEXT)) DESC  NULLS LAST, ((((v0.c0)!=(-2.127914432E9)))OR(((v0.c0) NOT NULL))) ASC  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((CAST(vt2.c1 AS BLOB) IN (vt2.c0 COLLATE NOCASE))) ORDER BY ((MAX(x'31fe1b', vt2.c1, vt2.c1)) ISNULL) DESC  NULLS FIRST, (- (((vt2.c1)IS NOT(vt2.c1))));
SELECT * FROM vt2 WHERE ((CAST(vt2.c1 AS BLOB) IN (vt2.c0 COLLATE NOCASE))) ORDER BY (((vt2.c0 IN (vt2.c1)))<<((vt2.c0 IN ())))  NULLS LAST, ((CAST(vt2.c0 AS REAL)) BETWEEN (TRIM(vt2.c0)) AND (((((((vt2.c1)OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((CAST(vt2.c1 AS BLOB) IN (vt2.c0 COLLATE NOCASE))) ORDER BY ((MAX(x'31fe1b', vt2.c1, vt2.c1)) ISNULL) DESC  NULLS FIRST, (- (((vt2.c1)IS NOT(vt2.c1))));
SELECT * FROM vt2 WHERE ((CAST(vt2.c1 AS BLOB) IN (vt2.c0 COLLATE NOCASE))) ORDER BY (((vt2.c0 IN (vt2.c1)))<<((vt2.c0 IN ())))  NULLS LAST, ((CAST(vt2.c0 AS REAL)) BETWEEN (TRIM(vt2.c0)) AND (((((((vt2.c1)OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)))) ASC  NULLS FIRST;
SELECT * FROM vt0, vt2, v0 WHERE ((((v0.c2, v0.c0, vt2.c1, vt2.c1)) BETWEEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt0.c0)))OR(v0.c3)), 'qK30z 垳', (v0.c2 IN (vt2.c1, v0.c1, vt2.c1)), (NULL IN (v0.c0, v0.c2)))) AND ((((v0.c2)%(v0.c3)), (+ (vt2.c1)), (- ('-1726882884')), (NOT (v0.c2))))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((v0.c2, v0.c0, vt2.c1, vt2.c1)) BETWEEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt0.c0)))OR(v0.c3)), 'qK30z 垳', (v0.c2 IN (vt2.c1, v0.c1, vt2.c1)), (NULL IN (v0.c0, v0.c2)))) AND ((((v0.c2)%(v0.c3)), (+ (vt2.c1)), (- ('-1726882884')), (NOT (v0.c2))))))AND(v0.c0))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (rtreenode(CASE vt2.c1  WHEN v0.c1 THEN vt2.c0 END, ((v0.c0) BETWEEN (v0.c3) AND (v0.c1)))) LIMIT 1;
SELECT * FROM vt0, vt2, v0 WHERE ((((v0.c2, v0.c0, vt2.c1, vt2.c1)) BETWEEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt0.c0)))OR(v0.c3)), 'qK30z 垳', (v0.c2 IN (vt2.c1, v0.c1, vt2.c1)), (NULL IN (v0.c0, v0.c2)))) AND ((((v0.c2)%(v0.c3)), (+ (vt2.c1)), (- ('-1726882884')), (NOT (v0.c2))))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((v0.c2, v0.c0, vt2.c1, vt2.c1)) BETWEEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt0.c0)))OR(v0.c3)), 'qK30z 垳', (v0.c2 IN (vt2.c1, v0.c1, vt2.c1)), (NULL IN (v0.c0, v0.c2)))) AND ((((v0.c2)%(v0.c3)), (+ (vt2.c1)), (- ('-1726882884')), (NOT (v0.c2))))))AND(v0.c0))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (rtreenode(CASE vt2.c1  WHEN v0.c1 THEN vt2.c0 END, ((v0.c0) BETWEEN (v0.c3) AND (v0.c1)))) LIMIT 1;
SELECT ALL * FROM v0, vt2 WHERE (((((((((CAST(v0.c1 AS REAL))OR(((vt2.c1)>>(vt2.c0)))))AND((vt2.c0 IN ()))))OR(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0) NOT NULL))));
SELECT ALL * FROM v0, vt2 WHERE (((((((((CAST(v0.c1 AS REAL))OR(((vt2.c1)>>(vt2.c0)))))AND((vt2.c0 IN ()))))OR(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0) NOT NULL)))) ORDER BY (((v0.c2, v0.c0, vt2.c1, v0.c0)) NOT BETWEEN (((- (vt2.c0)), (((v0.c2, v0.c3))>((vt2.c0, vt2.c1))), IFNULL(v0.c3, x'e5b4'), ((((((v0.c2)AND(v0.c3)))OR(0.9688666200389816)))AND(vt2.c1)))) AND (((('[訌OX')=(vt2.c0)), ((v0.c1)<=(v0.c2)), ((((v0.c1)AND(v0.c3)))OR(v0.c0)), ((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))))) LIMIT 0X0;
SELECT ALL * FROM v0, vt2 WHERE (((((((((CAST(v0.c1 AS REAL))OR(((vt2.c1)>>(vt2.c0)))))AND((vt2.c0 IN ()))))OR(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0) NOT NULL))));
SELECT ALL * FROM v0, vt2 WHERE (((((((((CAST(v0.c1 AS REAL))OR(((vt2.c1)>>(vt2.c0)))))AND((vt2.c0 IN ()))))OR(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0) NOT NULL)))) ORDER BY (((v0.c2, v0.c0, vt2.c1, v0.c0)) NOT BETWEEN (((- (vt2.c0)), (((v0.c2, v0.c3))>((vt2.c0, vt2.c1))), IFNULL(v0.c3, x'e5b4'), ((((((v0.c2)AND(v0.c3)))OR(0.9688666200389816)))AND(vt2.c1)))) AND (((('[訌OX')=(vt2.c0)), ((v0.c1)<=(v0.c2)), ((((v0.c1)AND(v0.c3)))OR(v0.c0)), ((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))))) LIMIT 0X0;
SELECT ALL COUNT(*) FROM v0 LEFT OUTER JOIN vt0 ON (- ((((v0.c2, 0.2871176896055645, vt2.c1)) NOT BETWEEN ((v0.c3, v0.c0, v0.c1)) AND ((v0.c1, v0.c2, vt0.c0))))) NATURAL JOIN vt2 WHERE (CASE WHEN ((((((vt2.c0)OR(v0.c2)))OR(vt2.c0)))AND(v0.c3)) THEN json_insert(vt0.c0, vt2.c0, vt2.c0) ELSE vt2.c0 COLLATE NOCASE END) ORDER BY ((v0.c0)+('')) COLLATE RTRIM COLLATE RTRIM DESC;
SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt0 ON (- ((((v0.c2, 0.2871176896055645, vt2.c1)) NOT BETWEEN ((v0.c3, v0.c0, v0.c1)) AND ((v0.c1, v0.c2, vt0.c0))))) NATURAL JOIN vt2 WHERE (((CASE WHEN ((((((vt2.c0)OR(v0.c2)))OR(vt2.c0)))AND(v0.c3)) THEN json_insert(vt0.c0, vt2.c0, vt2.c0) ELSE vt2.c0 COLLATE NOCASE END)AND(LOWER(v0.c2)))) ORDER BY ((v0.c0)+('')) COLLATE RTRIM COLLATE RTRIM DESC;
SELECT ALL COUNT(*) FROM v0 WHERE ((((((~ (v0.c3)))OR(TRIM(DISTINCT v0.c2, v0.c0))))AND(CAST(v0.c3 AS NUMERIC)))) ORDER BY ((CASE v0.c0  WHEN v0.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END)OR((+ (v0.c2)))) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE ((((((~ (v0.c3)))OR(TRIM(DISTINCT v0.c2, v0.c0))))AND(CAST(v0.c3 AS NUMERIC)))) ORDER BY ((((((((((((((v0.c0)OR(v0.c3)))AND(v0.c0)))AND(v0.c0)))AND('2017635915')))OR(NULLIF(v0.c3, v0.c1))))AND(x'cf00' COLLATE BINARY)))OR(CASE v0.c3  WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END))  NULLS FIRST, (- ((((v0.c0, v0.c3, v0.c3))<=((v0.c0, v0.c3, 'Iz␢팈?'))))) ASC, v0.c2 DESC  NULLS LAST LIMIT 0X1;
SELECT ALL MAX(vt2.c0) FROM vt2, v0 CROSS JOIN vt0 ON ((vt2.c1)IS NOT(v0.c1 COLLATE NOCASE)) WHERE (((((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3))) BETWEEN (1.360437288E9) AND (((vt2.c1)+(vt2.c0))))) ORDER BY ((v0.c1)/(v0.c3)) COLLATE BINARY DESC, (((CAST(v0.c3 AS NUMERIC), ((v0.c2)*(v0.c2))))<((((vt2.c0) ISNULL), ((0.4289034688645238)LIKE(vt2.c0))))) ASC, IFNULL((vt2.c0 IN (vt0.c0)), ((vt2.c1) NOT NULL)), CASE WHEN vt0.c0 THEN ((((v0.c2)OR(v0.c0)))OR(vt2.c1)) WHEN (- (v0.c1)) THEN ((((x'')AND(v0.c3)))AND(vt2.c0)) WHEN ((((((v0.c1)OR(v0.c2)))AND(vt0.c0)))OR(v0.c3)) THEN (NOT (v0.c2)) WHEN UNLIKELY(v0.c2) THEN ((v0.c1) NOTNULL) WHEN CAST(vt2.c1 AS TEXT) THEN x'' WHEN ((((((v0.c1)AND(vt2.c1)))OR(vt2.c0)))OR(vt0.c0)) THEN '795331170' END;
SELECT ALL MAX(vt2.c0) FROM vt2, v0 CROSS JOIN vt0 ON ((vt2.c1)IS NOT(v0.c1 COLLATE NOCASE)) WHERE (((((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3))) BETWEEN (1.360437288E9) AND (((vt2.c1)+(vt2.c0))))) ORDER BY ((v0.c1)/(v0.c3)) COLLATE BINARY DESC, (((CAST(v0.c3 AS NUMERIC), ((v0.c2)*(v0.c2))))<((((vt2.c0) ISNULL), ((0.4289034688645238)LIKE(vt2.c0))))) ASC, IFNULL((vt2.c0 IN (vt0.c0)), ((vt2.c1) NOT NULL)), CASE WHEN vt0.c0 THEN ((((v0.c2)OR(v0.c0)))OR(vt2.c1)) WHEN (- (v0.c1)) THEN ((((x'')AND(v0.c3)))AND(vt2.c0)) WHEN ((((((v0.c1)OR(v0.c2)))AND(vt0.c0)))OR(v0.c3)) THEN (NOT (v0.c2)) WHEN UNLIKELY(v0.c2) THEN ((v0.c1) NOTNULL) WHEN CAST(vt2.c1 AS TEXT) THEN x'' WHEN ((((((v0.c1)AND(vt2.c1)))OR(vt2.c0)))OR(vt0.c0)) THEN '795331170' END INTERSECT SELECT MAX(vt2.c0) FROM vt2, v0 CROSS JOIN vt0 ON ((vt2.c1)IS NOT(v0.c1 COLLATE NOCASE)) WHERE (v0.c1) ORDER BY ((v0.c1)/(v0.c3)) COLLATE BINARY DESC, (((CAST(v0.c3 AS NUMERIC), ((v0.c2)*(v0.c2))))<((((vt2.c0) ISNULL), ((0.4289034688645238)LIKE(vt2.c0))))) ASC, IFNULL((vt2.c0 IN (vt0.c0)), ((vt2.c1) NOT NULL)), CASE WHEN vt0.c0 THEN ((((v0.c2)OR(v0.c0)))OR(vt2.c1)) WHEN (- (v0.c1)) THEN ((((x'')AND(v0.c3)))AND(vt2.c0)) WHEN ((((((v0.c1)OR(v0.c2)))AND(vt0.c0)))OR(v0.c3)) THEN (NOT (v0.c2)) WHEN UNLIKELY(v0.c2) THEN ((v0.c1) NOTNULL) WHEN CAST(vt2.c1 AS TEXT) THEN x'' WHEN ((((((v0.c1)AND(vt2.c1)))OR(vt2.c0)))OR(vt0.c0)) THEN '795331170' END;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(((x'') NOT BETWEEN (vt0.c0) AND (vt0.c0)) AS NUMERIC)) LIMIT 0x0;
SELECT * FROM vt0 WHERE (vt0.c0);
SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST(((x'') NOT BETWEEN (vt0.c0) AND (vt0.c0)) AS NUMERIC)) LIMIT 0x0;
SELECT MIN(vt0.c0) FROM v0 CROSS JOIN vt2 ON 0.35682736773870394 INNER JOIN vt0 ON (((((vt0.c0, v0.c2)) BETWEEN ((vt0.c0, NULL)) AND ((v0.c3, v0.c2))))/(((vt2.c1) NOTNULL))) WHERE (CASE CAST(v0.c0 AS REAL)  WHEN CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END THEN ((vt0.c0)<(vt0.c0)) WHEN (v0.c0 IN ('0.7168516849773884')) THEN ((vt2.c0) IS FALSE) END) ORDER BY ((((vt2.c0)+(v0.c1)))>>(((v0.c3) IS TRUE))) DESC;
SELECT DISTINCT MIN(vt0.c0) FROM v0 CROSS JOIN vt2 ON 0.35682736773870394 INNER JOIN vt0 ON (((((vt0.c0, v0.c2)) BETWEEN ((vt0.c0, NULL)) AND ((v0.c3, v0.c2))))/(((vt2.c1) NOTNULL))) WHERE (((CASE CAST(v0.c0 AS REAL)  WHEN CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END THEN ((vt0.c0)<(vt0.c0)) WHEN (v0.c0 IN ('0.7168516849773884')) THEN ((vt2.c0) IS FALSE) END)AND((((((v0.c0, v0.c0)) NOT BETWEEN ((v0.c2, vt2.c1)) AND ((v0.c2, vt2.c0))))IS(v0.c2 COLLATE RTRIM))))) ORDER BY ((((vt2.c0)+(v0.c1)))>>(((v0.c3) IS TRUE))) DESC INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM v0 CROSS JOIN vt2 ON 0.35682736773870394 INNER JOIN vt0 ON (((((vt0.c0, v0.c2)) BETWEEN ((vt0.c0, NULL)) AND ((v0.c3, v0.c2))))/(((vt2.c1) NOTNULL))) WHERE (((v0.c2) IS FALSE) COLLATE NOCASE) ORDER BY ((((vt2.c0)+(v0.c1)))>>(((v0.c3) IS TRUE))) DESC;
SELECT * FROM v0 WHERE ((((((('x<')%(v0.c0)))AND((v0.c2 IN ()))))AND(CAST(v0.c1 AS TEXT)))) ORDER BY UNLIKELY(((v0.c1) NOT NULL))  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((((('x<')%(v0.c0)))AND((v0.c2 IN ()))))AND(CAST(v0.c1 AS TEXT)))) ORDER BY UNLIKELY(((v0.c1) NOT NULL))  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE ((((((('x<')%(v0.c0)))AND((v0.c2 IN ()))))AND(CAST(v0.c1 AS TEXT)))) ORDER BY UNLIKELY(((v0.c1) NOT NULL))  NULLS LAST;
SELECT ALL * FROM v0 WHERE ((((((('x<')%(v0.c0)))AND((v0.c2 IN ()))))AND(CAST(v0.c1 AS TEXT)))) ORDER BY UNLIKELY(((v0.c1) NOT NULL))  NULLS LAST LIMIT 0;
SELECT MAX(vt2.c0) FROM vt2, v0, vt0 WHERE (vt2.c0);
SELECT DISTINCT MAX(vt2.c0) FROM vt2, v0, vt0 WHERE (((vt2.c0)AND(((((v0.c2)>=(NULL)))IS NOT(((NULL)<=(v0.c3))))))) ORDER BY ((((v0.c3) NOT NULL))>(((vt2.c0) NOT NULL))) ASC, (((v0.c1, v0.c3)) NOT BETWEEN ((CASE WHEN vt0.c0 THEN NULL ELSE v0.c1 END, v0.c0)) AND (((((vt2.c1, vt0.c0))<>((vt2.c1, v0.c3))), (((v0.c2, v0.c2))=((vt0.c0, v0.c1)))))) ASC  NULLS LAST;
SELECT ALL MAX(vt2.c1) FROM vt2, v0 CROSS JOIN vt0 ON 0X42c0c513 WHERE ((CAST(vt2.c0 AS NUMERIC) IN (((v0.c3) NOT NULL))));
SELECT ALL MAX(vt2.c1) FROM vt2, v0 CROSS JOIN vt0 ON 0X42c0c513 WHERE ((((CAST(vt2.c0 AS NUMERIC) IN (((v0.c3) NOT NULL))))AND((- ((v0.c2 IN (v0.c0)))))));
SELECT * FROM v0, vt0 WHERE (vt0.c0) ORDER BY ((175945508 COLLATE NOCASE)-(((v0.c1) IS FALSE)));
SELECT ALL * FROM v0, vt0 WHERE (vt0.c0) ORDER BY 0.5369626314612528  NULLS LAST, (((v0.c1)) NOT BETWEEN (((((v0.c1))>((v0.c3))))) AND ((CAST(v0.c3 AS REAL)))) DESC;
SELECT * FROM v0, vt0 WHERE (vt0.c0) ORDER BY ((175945508 COLLATE NOCASE)-(((v0.c1) IS FALSE)));
SELECT ALL * FROM v0, vt0 WHERE (vt0.c0) ORDER BY 0.5369626314612528  NULLS LAST, (((v0.c1)) NOT BETWEEN (((((v0.c1))>((v0.c3))))) AND ((CAST(v0.c3 AS REAL)))) DESC;
SELECT * FROM v0, vt0 WHERE ((+ (CAST(v0.c1 AS NUMERIC)))) ORDER BY ((CAST('0.44312673298235083' AS TEXT))>((v0.c3 IN (v0.c1, v0.c1)))), ((vt0.c0)>=(((v0.c0) NOT NULL))), (~ (v0.c1))  NULLS FIRST, CAST(CAST(vt0.c0 AS NUMERIC) AS TEXT) DESC  NULLS LAST;
SELECT * FROM v0, vt0 WHERE ((+ (CAST(v0.c1 AS NUMERIC)))) ORDER BY '512682437' COLLATE NOCASE ASC, NULL;
SELECT * FROM v0, vt0 WHERE ((+ (CAST(v0.c1 AS NUMERIC)))) ORDER BY ((CAST('0.44312673298235083' AS TEXT))>((v0.c3 IN (v0.c1, v0.c1)))), ((vt0.c0)>=(((v0.c0) NOT NULL))), (~ (v0.c1))  NULLS FIRST, CAST(CAST(vt0.c0 AS NUMERIC) AS TEXT) DESC  NULLS LAST;
SELECT * FROM v0, vt0 WHERE ((+ (CAST(v0.c1 AS NUMERIC)))) ORDER BY '512682437' COLLATE NOCASE ASC, NULL;
SELECT MAX(vt2.c0) FROM vt2 CROSS JOIN v0 ON ((((((((((((vt2.c0)OR(v0.c2)))AND(v0.c1)))OR(v0.c2)))AND((((v0.c3, vt2.c1))>=((v0.c0, vt2.c0))))))OR(((v0.c3) IS TRUE))))AND(NULL)) WHERE (x'8b64');
SELECT ALL MAX(vt2.c0) FROM vt2 CROSS JOIN v0 ON ((((((((((((vt2.c0)OR(v0.c2)))AND(v0.c1)))OR(v0.c2)))AND((((v0.c3, vt2.c1))>=((v0.c0, vt2.c0))))))OR(((v0.c3) IS TRUE))))AND(NULL)) WHERE (((x'8b64')AND(((CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c0 WHEN vt2.c1 THEN v0.c0 WHEN vt2.c0 THEN v0.c2 END)-((vt2.c1 IN (v0.c0))))))) ORDER BY CAST(((vt2.c0)AND(v0.c1)) AS TEXT) LIMIT 1 INTERSECT SELECT MAX(vt2.c0) FROM vt2 CROSS JOIN v0 ON ((((((((((((vt2.c0)OR(v0.c2)))AND(v0.c1)))OR(v0.c2)))AND((((v0.c3, vt2.c1))>=((v0.c0, vt2.c0))))))OR(((v0.c3) IS TRUE))))AND(NULL)) WHERE ((((((((((((((vt2.c0, v0.c1)) NOT BETWEEN ((v0.c3, v0.c3)) AND ((v0.c0, v0.c3))))AND(((v0.c1) IS FALSE))))AND((((v0.c3, v0.c2, v0.c3)) NOT BETWEEN ((vt2.c1, vt2.c1, vt2.c0)) AND ((v0.c2, v0.c0, v0.c3))))))AND((((vt2.c1, v0.c1, v0.c3, 0.38477662190248374)) BETWEEN ((v0.c0, v0.c1, vt2.c0, v0.c1)) AND ((0.28021575736182647, x'', vt2.c0, v0.c0))))))AND(((((((v0.c0)OR(vt2.c1)))AND(0.9914201926109736)))OR(v0.c1)))))OR(((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY CAST(((vt2.c0)AND(v0.c1)) AS TEXT) LIMIT 0x1;
SELECT * FROM vt2, v0 WHERE (((((((v0.c3)OR((((vt2.c1, NULL, v0.c2)) BETWEEN (('708305761', v0.c2, v0.c2)) AND ((v0.c1, v0.c1, vt2.c1))))))OR(CAST(v0.c3 AS NUMERIC))))AND(((vt2.c0)OR(v0.c1))))) ORDER BY (((((v0.c2) NOT BETWEEN (v0.c2) AND (vt2.c1)), load_extension(vt2.c0)))>=((((((v0.c2)OR(v0.c0)))OR(v0.c1)), LIKELY(DISTINCT vt2.c1)))) DESC, (((((v0.c0))<=((vt2.c1))))GLOB(((vt2.c0)/(vt2.c0)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((((((((v0.c3)OR((((vt2.c1, NULL, v0.c2)) BETWEEN (('708305761', v0.c2, v0.c2)) AND ((v0.c1, v0.c1, vt2.c1))))))OR(CAST(v0.c3 AS NUMERIC))))AND(((vt2.c0)OR(v0.c1)))))AND(TRIM(CASE v0.c3  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)))) ORDER BY (((((v0.c2) NOT BETWEEN (v0.c2) AND (vt2.c1)), load_extension(vt2.c0)))>=((((((v0.c2)OR(v0.c0)))OR(v0.c1)), LIKELY(DISTINCT vt2.c1)))) DESC, (((((v0.c0))<=((vt2.c1))))GLOB(((vt2.c0)/(vt2.c0)))) DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt2, v0 WHERE (((((((v0.c3)OR((((vt2.c1, NULL, v0.c2)) BETWEEN (('708305761', v0.c2, v0.c2)) AND ((v0.c1, v0.c1, vt2.c1))))))OR(CAST(v0.c3 AS NUMERIC))))AND(((vt2.c0)OR(v0.c1))))) ORDER BY (((((v0.c2) NOT BETWEEN (v0.c2) AND (vt2.c1)), load_extension(vt2.c0)))>=((((((v0.c2)OR(v0.c0)))OR(v0.c1)), LIKELY(DISTINCT vt2.c1)))) DESC, (((((v0.c0))<=((vt2.c1))))GLOB(((vt2.c0)/(vt2.c0)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((((((((v0.c3)OR((((vt2.c1, NULL, v0.c2)) BETWEEN (('708305761', v0.c2, v0.c2)) AND ((v0.c1, v0.c1, vt2.c1))))))OR(CAST(v0.c3 AS NUMERIC))))AND(((vt2.c0)OR(v0.c1)))))AND(TRIM(CASE v0.c3  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)))) ORDER BY (((((v0.c2) NOT BETWEEN (v0.c2) AND (vt2.c1)), load_extension(vt2.c0)))>=((((((v0.c2)OR(v0.c0)))OR(v0.c1)), LIKELY(DISTINCT vt2.c1)))) DESC, (((((v0.c0))<=((vt2.c1))))GLOB(((vt2.c0)/(vt2.c0)))) DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt2 WHERE (CAST(((v0.c3)GLOB(v0.c0)) AS REAL)) ORDER BY '<', UPPER(((v0.c1) BETWEEN ('!') AND (vt2.c1))) ASC, (((((((vt2.c0 IN ()))OR(CAST(vt2.c1 AS BLOB))))AND(v0.c3)))AND(vt2.c1 COLLATE NOCASE)) ASC;
SELECT ALL * FROM v0, vt2 WHERE (((CAST(((v0.c3)GLOB(v0.c0)) AS REAL))AND(((((v0.c1)OR('0.48463391837208036')))AND(TYPEOF(v0.c1)))))) ORDER BY '33514151' DESC;
SELECT ALL * FROM v0, vt2 WHERE (CAST(((v0.c3)GLOB(v0.c0)) AS REAL)) ORDER BY '<', UPPER(((v0.c1) BETWEEN ('!') AND (vt2.c1))) ASC, (((((((vt2.c0 IN ()))OR(CAST(vt2.c1 AS BLOB))))AND(v0.c3)))AND(vt2.c1 COLLATE NOCASE)) ASC;
SELECT ALL * FROM v0, vt2 WHERE (((CAST(((v0.c3)GLOB(v0.c0)) AS REAL))AND(((((v0.c1)OR('0.48463391837208036')))AND(TYPEOF(v0.c1)))))) ORDER BY '33514151' DESC;
SELECT MAX(vt2.c1) FROM vt2 INNER JOIN v0 ON (((v0.c1, v0.c0)) BETWEEN ((x'' COLLATE RTRIM, 1738916790 COLLATE BINARY)) AND ((vt2.c0 COLLATE NOCASE, v0.c0 COLLATE RTRIM))) WHERE (((-268503340)IS NOT(vt2.c0 COLLATE BINARY)));
SELECT ALL MAX(vt2.c1) FROM vt2 INNER JOIN v0 ON (((v0.c1, v0.c0)) BETWEEN ((x'' COLLATE RTRIM, 0X67a5c3b6 COLLATE BINARY)) AND ((vt2.c0 COLLATE NOCASE, v0.c0 COLLATE RTRIM))) WHERE (((-268503340)IS NOT(vt2.c0 COLLATE BINARY)));
SELECT ALL MAX(v0.c0) FROM vt2, v0, vt0 WHERE (((CASE WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END) NOTNULL)) ORDER BY (~ (json_quote(vt2.c0))) DESC, (+ (((v0.c1)-(v0.c0))));
SELECT ALL MAX(v0.c0) FROM vt2, v0, vt0 WHERE (((((CASE WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END) NOTNULL))AND(((((vt0.c0)AND(vt0.c0)))OR(v0.c2)) COLLATE BINARY))) ORDER BY (~ (json_quote(vt2.c0))) DESC, (+ (((v0.c1)-(v0.c0))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0 COLLATE NOCASE, ((vt0.c0)>>(2047602043)), ((vt0.c0)=(vt0.c0)))) AND ((((vt0.c0)IS(vt0.c0)), (vt0.c0 IN ()), (- (vt0.c0))))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0 COLLATE NOCASE, ((vt0.c0)>>(2047602043)), ((vt0.c0)=(vt0.c0)))) AND ((((vt0.c0)IS(vt0.c0)), (vt0.c0 IN ()), (- (vt0.c0))))))AND(((((((((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND(LOWER(DISTINCT NULL))))AND(((0.3029267699281446)<(0x36740845)))))OR((+ (vt0.c0)))))OR(((vt0.c0)+(vt0.c0)))))OR(TIME(vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY x'eaa41756', ((((vt0.c0)!=(NULL))) NOT NULL) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST((((vt0.c0, vt0.c0, vt0.c0, x'', vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0))) AS REAL)) ORDER BY x'eaa41756', ((((vt0.c0)!=(NULL))) NOT NULL) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0 COLLATE NOCASE, ((vt0.c0)>>(2047602043)), ((vt0.c0)=(vt0.c0)))) AND ((((vt0.c0)IS(vt0.c0)), (vt0.c0 IN ()), (- (vt0.c0))))));
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt0.c0 COLLATE NOCASE, ((vt0.c0)>>(2047602043)), ((vt0.c0)=(vt0.c0)))) AND ((((vt0.c0)IS(vt0.c0)), (vt0.c0 IN ()), (- (vt0.c0))))))AND(((((((((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND(LOWER(DISTINCT NULL))))AND(((0.3029267699281446)<(0x36740845)))))OR((+ (vt0.c0)))))OR(((vt0.c0)+(vt0.c0)))))OR(TIME(vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY x'eaa41756', ((((vt0.c0)!=(NULL))) NOT NULL) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CAST((((vt0.c0, vt0.c0, vt0.c0, x'', vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0))) AS REAL)) ORDER BY x'eaa41756', ((((vt0.c0)!=(NULL))) NOT NULL) ASC  NULLS FIRST;
SELECT MIN(v0.c0) FROM v0 NATURAL JOIN vt0 WHERE ((((0.4653868340095907, ((vt0.c0)=(v0.c0))))==((TRIM(vt0.c0, vt0.c0), 0.27638570023133135)))) ORDER BY ((((v0.c1)>>(v0.c1)))>>(((((v0.c3)AND(NULL)))AND(v0.c0))))  NULLS FIRST;
SELECT MIN(v0.c0) FROM v0 NATURAL JOIN vt0 WHERE ((((0.4653868340095907, ((vt0.c0)=(v0.c0))))==((TRIM(vt0.c0, vt0.c0), 0.27638570023133135)))) ORDER BY TYPEOF(CASE WHEN v0.c3 THEN v0.c3 END) DESC;
SELECT * FROM vt2, vt0 WHERE (((((((vt2.c0) NOTNULL))AND((((vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1))))))AND(((vt2.c0)<=(vt0.c0))))) ORDER BY ((0.6108792520058948)<((('477587929') NOTNULL))) ASC  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (((((((((vt2.c0) NOTNULL))AND((((vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1))))))AND(((vt2.c0)<(vt0.c0)))))AND(LOWER(CASE vt2.c0  WHEN vt2.c1 THEN 0.5535893660128063 WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c0 THEN '/k' ELSE vt2.c0 END)))) ORDER BY ((((((((((((vt2.c0) IS FALSE))OR(((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))))OR(LIKE(vt0.c0, '쑘', '4'))))OR((vt2.c0 IN (vt2.c1, vt0.c0)))))AND(((vt2.c1) NOT NULL))))AND(((vt2.c1)&(vt2.c0)))) LIMIT 0x0 INTERSECT SELECT * FROM vt2, vt0 WHERE (((((vt2.c0) BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND (((((((((vt0.c0)AND('-665098896')))OR(vt0.c0)))OR(vt2.c0)))AND('MY&9'))))) ORDER BY ((((((((((((vt2.c0) IS FALSE))OR(((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))))OR(LIKE(vt0.c0, '쑘', '4'))))OR((vt2.c0 IN (vt2.c1, vt0.c0)))))AND(((vt2.c1) NOT NULL))))AND(((vt2.c1)&(vt2.c0)))) LIMIT 0x0;
SELECT * FROM vt2, vt0 WHERE (((((((vt2.c0) NOTNULL))AND((((vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1))))))AND(((vt2.c0)<=(vt0.c0))))) ORDER BY ((0.6108792520058948)<((('477587929') NOTNULL))) ASC  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (((((((((vt2.c0) NOTNULL))AND((((vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1))))))AND(((vt2.c0)<(vt0.c0)))))AND(LOWER(CASE vt2.c0  WHEN vt2.c1 THEN 0.5535893660128063 WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c0 THEN '/k' ELSE vt2.c0 END)))) ORDER BY ((((((((((((vt2.c0) IS FALSE))OR(((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))))OR(LIKE(vt0.c0, '쑘', '4'))))OR((vt2.c0 IN (vt2.c1, vt0.c0)))))AND(((vt2.c1) NOT NULL))))AND(((vt2.c1)&(vt2.c0)))) LIMIT 0x0 INTERSECT SELECT * FROM vt2, vt0 WHERE (((((vt2.c0) BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND (((((((((vt0.c0)AND('-665098896')))OR(vt0.c0)))OR(vt2.c0)))AND('MY&9'))))) ORDER BY ((((((((((((vt2.c0) IS FALSE))OR(((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))))OR(LIKE(vt0.c0, '쑘', '4'))))OR((vt2.c0 IN (vt2.c1, vt0.c0)))))AND(((vt2.c1) NOT NULL))))AND(((vt2.c1)&(vt2.c0)))) LIMIT 0x0;
SELECT * FROM v0, vt2, vt0 WHERE (((CASE WHEN v0.c1 THEN vt0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 END)<=(HEX(vt0.c0))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CASE WHEN v0.c1 THEN vt0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 END)<=(HEX(vt0.c0)))) INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((v0.c0 IN ((((vt2.c0, v0.c2))<=((vt2.c1, vt2.c1))))));
SELECT * FROM v0, vt2, vt0 WHERE (((CASE WHEN v0.c1 THEN vt0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 END)<=(HEX(vt0.c0))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CASE WHEN v0.c1 THEN vt0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 END)<=(HEX(vt0.c0)))) INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((v0.c0 IN ((((vt2.c0, v0.c2))<=((vt2.c1, vt2.c1))))));
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON ((~ (v0.c1)) IN ()) WHERE (((NOT (v0.c2)) IN (((vt0.c0) ISNULL)))) ORDER BY (~ (((0.9367074817668131)>=(v0.c3)))) DESC  NULLS LAST, CASE ((vt2.c0)|(v0.c3))  WHEN vt2.c0 THEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1)) WHEN (+ (x'')) THEN ((vt0.c0) NOT BETWEEN (v0.c0) AND (v0.c1)) ELSE json_extract(vt2.c1, v0.c0) END ASC;
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON ((~ (v0.c1)) IN ()) WHERE (((((NOT (v0.c2)) IN (((vt0.c0) ISNULL))))AND((((+ (vt2.c1))) NOT BETWEEN (((v0.c0)IS NOT(v0.c3))) AND (CAST(v0.c1 AS BLOB)))))) ORDER BY DATETIME((v0.c1 IN (vt0.c0)), (+ (x'ac0d')), ((((((v0.c3)OR('-1336003026')))OR(0.5162465773222236)))AND(vt2.c1))) ASC  NULLS FIRST, (~ (NULL)) DESC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON ((~ (v0.c1)) IN ()) WHERE (((NOT (v0.c2)) IN (((vt0.c0) ISNULL)))) ORDER BY (~ (((0.9367074817668131)>=(v0.c3)))) DESC  NULLS LAST, CASE ((vt2.c0)|(v0.c3))  WHEN vt2.c0 THEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1)) WHEN (+ (x'')) THEN ((vt0.c0) NOT BETWEEN (v0.c0) AND (v0.c1)) ELSE json_extract(vt2.c1, v0.c0) END ASC;
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON ((~ (v0.c1)) IN ()) WHERE (((((NOT (v0.c2)) IN (((vt0.c0) ISNULL))))AND((((+ (vt2.c1))) NOT BETWEEN (((v0.c0)IS NOT(v0.c3))) AND (CAST(v0.c1 AS BLOB)))))) ORDER BY DATETIME((v0.c1 IN (vt0.c0)), (+ (x'ac0d')), ((((((v0.c3)OR('-1336003026')))OR(0.5162465773222236)))AND(vt2.c1))) ASC  NULLS FIRST, (~ (NULL)) DESC  NULLS LAST LIMIT 2;
SELECT ALL COUNT(*) FROM v0 WHERE (TYPEOF(DISTINCT ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c1)))) ORDER BY ((v0.c2 COLLATE RTRIM) NOTNULL) ASC  NULLS FIRST, CASE (+ (v0.c1))  WHEN CASE v0.c1  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END THEN 0Xffffffffb6615617 END  NULLS LAST;
SELECT COUNT(*) FROM v0 WHERE (((TYPEOF(DISTINCT ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c1))))AND('-14833239'))) ORDER BY (((v0.c1) IS TRUE) IN ()) ASC;
SELECT * FROM vt0 INNER JOIN v0 ON ((((((((CAST(v0.c3 AS REAL))OR((((v0.c3, vt0.c0))<((v0.c2, v0.c2))))))AND(CAST(v0.c0 AS INTEGER))))OR(NULL)))AND(CAST(v0.c0 AS NUMERIC))) WHERE (v0.c1) ORDER BY ((v0.c2 IN ()) IN ()) ASC;
SELECT ALL * FROM vt0 INNER JOIN v0 ON ((((((((CAST(v0.c3 AS REAL))OR((((v0.c3, vt0.c0))<((v0.c2, v0.c2))))))AND(CAST(v0.c0 AS INTEGER))))OR(NULL)))AND(CAST(v0.c0 AS NUMERIC))) WHERE (v0.c1) ORDER BY 1165436722 ASC;
SELECT * FROM vt0 INNER JOIN v0 ON ((((((((CAST(v0.c3 AS REAL))OR((((v0.c3, vt0.c0))<((v0.c2, v0.c2))))))AND(CAST(v0.c0 AS INTEGER))))OR(NULL)))AND(CAST(v0.c0 AS NUMERIC))) WHERE (v0.c1) ORDER BY ((v0.c2 IN ()) IN ()) ASC;
SELECT MIN(v0.c2) FROM vt2, v0, vt0 WHERE (CAST((v0.c0 IN ()) AS TEXT)) ORDER BY vt2.c0 COLLATE RTRIM DESC;
SELECT DISTINCT MIN(v0.c2) FROM vt2 NOT INDEXED, v0, vt0 WHERE (((CAST((v0.c0 IN ()) AS TEXT))AND(CAST(UPPER(v0.c3) AS NUMERIC)))) ORDER BY vt2.c0 COLLATE RTRIM DESC LIMIT 0;
SELECT * FROM vt2 WHERE ((((((((vt2.c1, vt2.c1, x'', vt2.c0))<((vt2.c1, vt2.c1, vt2.c0, vt2.c0))))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (1339562550)))))AND(((((vt2.c0)OR(vt2.c0)))OR(vt2.c0))))) ORDER BY ((0.2422903789805081)+(vt2.c0 COLLATE NOCASE)), ((((((vt2.c0) BETWEEN (vt2.c0) AND (0xffffffffc4d09e92)))OR(UPPER(vt2.c1))))OR(CAST(vt2.c1 AS REAL)))  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ((((((((((vt2.c1, vt2.c1, x'', vt2.c0))<((vt2.c1, vt2.c1, vt2.c0, vt2.c0))))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (0X4fd81a36)))))AND(((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))))AND(vt2.c0))) ORDER BY ((0.2422903789805081)+(vt2.c0 COLLATE NOCASE)), ((((((vt2.c0) BETWEEN (vt2.c0) AND (-992960878)))OR(UPPER(vt2.c1))))OR(CAST(vt2.c1 AS REAL)))  NULLS LAST LIMIT 3 INTERSECT SELECT ALL * FROM vt2 WHERE (((((((NULL)OR(CASE WHEN vt2.c0 THEN vt2.c1 WHEN NULL THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END)))OR(vt2.c1)))AND(((vt2.c0)/(vt2.c0))))) ORDER BY ((0.2422903789805081)+(vt2.c0 COLLATE NOCASE)), ((((((vt2.c0) BETWEEN (vt2.c0) AND (-992960878)))OR(UPPER(vt2.c1))))OR(CAST(vt2.c1 AS REAL)))  NULLS LAST LIMIT 3;
SELECT * FROM vt2 WHERE ((((((((vt2.c1, vt2.c1, x'', vt2.c0))<((vt2.c1, vt2.c1, vt2.c0, vt2.c0))))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (1339562550)))))AND(((((vt2.c0)OR(vt2.c0)))OR(vt2.c0))))) ORDER BY ((0.2422903789805081)+(vt2.c0 COLLATE NOCASE)), ((((((vt2.c0) BETWEEN (vt2.c0) AND (0xffffffffc4d09e92)))OR(UPPER(vt2.c1))))OR(CAST(vt2.c1 AS REAL)))  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ((((((((((vt2.c1, vt2.c1, x'', vt2.c0))<((vt2.c1, vt2.c1, vt2.c0, vt2.c0))))OR(((vt2.c1) NOT BETWEEN (vt2.c0) AND (0X4fd81a36)))))AND(((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))))AND(vt2.c0))) ORDER BY ((0.2422903789805081)+(vt2.c0 COLLATE NOCASE)), ((((((vt2.c0) BETWEEN (vt2.c0) AND (-992960878)))OR(UPPER(vt2.c1))))OR(CAST(vt2.c1 AS REAL)))  NULLS LAST LIMIT 3 INTERSECT SELECT ALL * FROM vt2 WHERE (((((((NULL)OR(CASE WHEN vt2.c0 THEN vt2.c1 WHEN NULL THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END)))OR(vt2.c1)))AND(((vt2.c0)/(vt2.c0))))) ORDER BY ((0.2422903789805081)+(vt2.c0 COLLATE NOCASE)), ((((((vt2.c0) BETWEEN (vt2.c0) AND (-992960878)))OR(UPPER(vt2.c1))))OR(CAST(vt2.c1 AS REAL)))  NULLS LAST LIMIT 3;
SELECT * FROM vt2 WHERE (((((((((((((((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))OR(0X7da657b3)))OR(vt2.c0)))OR(((vt2.c1)OR(vt2.c1)))))AND(CAST(vt2.c0 AS NUMERIC))))OR(vt2.c0)))OR(vt2.c1))) ORDER BY ((((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))/(UNICODE(vt2.c1))) ASC, ((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0))) IS FALSE) DESC  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((((((((((((((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))OR(0x7da657b3)))OR(vt2.c0)))OR(((vt2.c1)OR(vt2.c1)))))AND(CAST(vt2.c0 AS NUMERIC))))OR(vt2.c0)))OR(vt2.c1)))AND(CAST(rtreenode(vt2.c0, vt2.c1) AS TEXT)))) ORDER BY ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN -1444834624 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END) NOTNULL), (NOT (((vt2.c0)>(vt2.c0)))) DESC  NULLS FIRST, (((vt2.c1, 465799599, vt2.c1))>=((vt2.c0, vt2.c1, vt2.c1))) COLLATE BINARY  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((((((((((((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))OR(0X7da657b3)))OR(vt2.c0)))OR(((vt2.c1)OR(vt2.c1)))))AND(CAST(vt2.c0 AS NUMERIC))))OR(vt2.c0)))OR(vt2.c1))) ORDER BY ((((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))/(UNICODE(vt2.c1))) ASC, ((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0))) IS FALSE) DESC  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((((((((((((((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))OR(0x7da657b3)))OR(vt2.c0)))OR(((vt2.c1)OR(vt2.c1)))))AND(CAST(vt2.c0 AS NUMERIC))))OR(vt2.c0)))OR(vt2.c1)))AND(CAST(rtreenode(vt2.c0, vt2.c1) AS TEXT)))) ORDER BY ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN -1444834624 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END) NOTNULL), (NOT (((vt2.c0)>(vt2.c0)))) DESC  NULLS FIRST, (((vt2.c1, 465799599, vt2.c1))>=((vt2.c0, vt2.c1, vt2.c1))) COLLATE BINARY  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((v0.c3) BETWEEN (v0.c0) AND (x'13')))<=((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, -1.57240298E8)) AND ((v0.c3, '1448346980')))))) ORDER BY ((CAST(v0.c1 AS REAL))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END)) ASC, (('0.7432547810461071') IS TRUE) DESC  NULLS LAST, (- (((v0.c0)||(v0.c0))))  NULLS LAST;
SELECT * FROM v0 WHERE (((((v0.c3) BETWEEN (v0.c0) AND (x'13')))<=((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, -1.57240298E8)) AND ((v0.c3, '1448346980')))))) ORDER BY ((CAST(v0.c1 AS REAL))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END)) ASC, (('0.7432547810461071') IS TRUE) DESC  NULLS LAST, (- (((v0.c0)||(v0.c0))))  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c3) BETWEEN (v0.c0) AND (x'13')))<=((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, -1.57240298E8)) AND ((v0.c3, '1448346980')))))) ORDER BY ((CAST(v0.c1 AS REAL))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END)) ASC, (('0.7432547810461071') IS TRUE) DESC  NULLS LAST, (- (((v0.c0)||(v0.c0))))  NULLS LAST;
SELECT * FROM v0 WHERE (((((v0.c3) BETWEEN (v0.c0) AND (x'13')))<=((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c1, -1.57240298E8)) AND ((v0.c3, '1448346980')))))) ORDER BY ((CAST(v0.c1 AS REAL))>=(CASE v0.c2  WHEN v0.c2 THEN v0.c3 ELSE v0.c0 END)) ASC, (('0.7432547810461071') IS TRUE) DESC  NULLS LAST, (- (((v0.c0)||(v0.c0))))  NULLS LAST;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (CAST(vt2.c1 AS BLOB)) ORDER BY ((((((vt2.c1))!=((vt2.c1))), (NOT (vt2.c0))))<=((STRFTIME(0.8260925016516538, vt2.c0, vt2.c1), (~ (vt2.c0))))) ASC;
SELECT MIN(vt2.c0) FROM vt2 WHERE (((CAST(vt2.c1 AS BLOB))AND(CASE WHEN ((((((vt2.c0)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)) THEN vt2.c0 COLLATE RTRIM WHEN (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c0, vt2.c1))) THEN CAST('432232651' AS NUMERIC) WHEN TYPEOF(vt2.c0) THEN (((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))) WHEN '8J1' THEN (((vt2.c1, 'ோW^JTu'))<((vt2.c1, vt2.c1))) END))) ORDER BY ((((vt2.c0 COLLATE BINARY)AND(NULL)))AND((NOT (vt2.c1)))) DESC, ((((vt2.c0)GLOB(vt2.c0))) BETWEEN (((vt2.c0)<=(vt2.c0))) AND (NULL)) ASC  NULLS LAST, ((((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1)))<(vt2.c1 COLLATE BINARY)) ASC  NULLS FIRST LIMIT 0X4;
SELECT * FROM vt2, v0, vt0 WHERE (v0.c2) ORDER BY LIKE(CASE v0.c2  WHEN v0.c0 THEN x'1b' WHEN v0.c0 THEN v0.c1 ELSE vt2.c0 END, ((vt0.c0) IS TRUE), ' ')  NULLS FIRST, NULL DESC  NULLS FIRST;
SELECT * FROM vt2, v0, vt0 WHERE (v0.c2) ORDER BY (CAST(v0.c1 AS INTEGER) IN ((- (vt2.c1)))), CAST(vt0.c0 AS INTEGER) COLLATE RTRIM, ((((v0.c2)<>(x'')))/(vt0.c0 COLLATE NOCASE)) ASC LIMIT 0;
SELECT * FROM vt2, v0, vt0 WHERE (v0.c2) ORDER BY LIKE(CASE v0.c2  WHEN v0.c0 THEN x'1b' WHEN v0.c0 THEN v0.c1 ELSE vt2.c0 END, ((vt0.c0) IS TRUE), ' ')  NULLS FIRST, NULL DESC  NULLS FIRST;
SELECT * FROM vt2, v0, vt0 WHERE (v0.c2) ORDER BY (CAST(v0.c1 AS INTEGER) IN ((- (vt2.c1)))), CAST(vt0.c0 AS INTEGER) COLLATE RTRIM, ((((v0.c2)<>(x'')))/(vt0.c0 COLLATE NOCASE)) ASC LIMIT 0;
SELECT ALL * FROM vt0 NATURAL JOIN v0 WHERE (((CAST(vt0.c0 AS TEXT))IS(((((((v0.c2)AND(v0.c0)))OR(vt0.c0)))OR(v0.c0))))) ORDER BY ((((v0.c3)-('-125262808')))%(((v0.c1)OR(v0.c1))))  NULLS LAST, ((v0.c3)<(v0.c0)) COLLATE RTRIM ASC;
SELECT * FROM vt0 NATURAL JOIN v0 WHERE (((((CAST(vt0.c0 AS TEXT))IS(((((((v0.c2)AND(v0.c0)))OR(vt0.c0)))OR(v0.c0)))))AND(NULL))) ORDER BY (((((('')>(vt0.c0)))AND(v0.c0 COLLATE BINARY)))AND(v0.c2 COLLATE NOCASE)) DESC, ((((((((NULL)AND(v0.c3)))OR(vt0.c0)))OR(868741710)))%((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 NATURAL JOIN v0 WHERE ((v0.c2 COLLATE RTRIM IN ())) ORDER BY (((((('')>(vt0.c0)))AND(v0.c0 COLLATE BINARY)))AND(v0.c2 COLLATE NOCASE)) DESC, ((((((((NULL)AND(v0.c3)))OR(vt0.c0)))OR(0x33c7f24e)))%((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))) DESC  NULLS LAST;
SELECT ALL * FROM vt0 NATURAL JOIN v0 WHERE (((CAST(vt0.c0 AS TEXT))IS(((((((v0.c2)AND(v0.c0)))OR(vt0.c0)))OR(v0.c0))))) ORDER BY ((((v0.c3)-('-125262808')))%(((v0.c1)OR(v0.c1))))  NULLS LAST, ((v0.c3)<(v0.c0)) COLLATE RTRIM ASC;
SELECT * FROM vt0 NATURAL JOIN v0 WHERE (((((CAST(vt0.c0 AS TEXT))IS(((((((v0.c2)AND(v0.c0)))OR(vt0.c0)))OR(v0.c0)))))AND(NULL))) ORDER BY (((((('')>(vt0.c0)))AND(v0.c0 COLLATE BINARY)))AND(v0.c2 COLLATE NOCASE)) DESC, ((((((((NULL)AND(v0.c3)))OR(vt0.c0)))OR(868741710)))%((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 NATURAL JOIN v0 WHERE ((v0.c2 COLLATE RTRIM IN ())) ORDER BY (((((('')>(vt0.c0)))AND(v0.c0 COLLATE BINARY)))AND(v0.c2 COLLATE NOCASE)) DESC, ((((((((NULL)AND(v0.c3)))OR(vt0.c0)))OR(0x33c7f24e)))%((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))))) DESC  NULLS LAST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((x'01') ISNULL))IS NOT(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN 0.859767681070158 THEN x'' ELSE vt2.c0 END)));
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((x'01') ISNULL))IS NOT(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN 0.859767681070158 THEN x'' ELSE vt2.c0 END))) ORDER BY (((v0.c0, vt0.c0)) NOT BETWEEN ((CAST('' AS TEXT), 0.2537671638123956)) AND ((((((((v0.c2)AND(v0.c2)))AND(v0.c1)))OR(vt2.c0)), (+ (v0.c2))))), vt0.c0 DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((x'01') ISNULL))IS NOT(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN 0.859767681070158 THEN x'' ELSE vt2.c0 END)));
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((x'01') ISNULL))IS NOT(CASE v0.c1  WHEN v0.c0 THEN v0.c2 WHEN 0.859767681070158 THEN x'' ELSE vt2.c0 END))) ORDER BY (((v0.c0, vt0.c0)) NOT BETWEEN ((CAST('' AS TEXT), 0.2537671638123956)) AND ((((((((v0.c2)AND(v0.c2)))AND(v0.c1)))OR(vt2.c0)), (+ (v0.c2))))), vt0.c0 DESC  NULLS FIRST LIMIT 0;
SELECT ALL MAX(vt0.c0) FROM vt2, vt0 WHERE (((((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0))) IS TRUE)) ORDER BY CAST(((vt0.c0)IS NOT(vt2.c1)) AS INTEGER) DESC  NULLS LAST, (((((vt2.c0, x'3877')) BETWEEN ((vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c1))))<(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END))  NULLS LAST;
SELECT ALL MAX(vt0.c0) FROM vt2, vt0 WHERE (((((((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0))) IS TRUE))AND((((((vt2.c0, vt2.c0, vt0.c0))<((vt0.c0, vt0.c0, vt2.c0)))) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt0.c0) AND ('3x'))) AND (((vt2.c0)IS(vt0.c0))))))) ORDER BY CAST(((vt0.c0)IS NOT(vt2.c1)) AS INTEGER) DESC  NULLS LAST, (((((vt2.c0, x'3877')) BETWEEN ((vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c1))))<(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END))  NULLS LAST INTERSECT SELECT ALL MAX(vt0.c0) FROM vt2, vt0 WHERE (vt0.c0) ORDER BY CAST(((vt0.c0)IS NOT(vt2.c1)) AS INTEGER) DESC  NULLS LAST, (((((vt2.c0, x'3877')) BETWEEN ((vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c1))))<(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END))  NULLS LAST;
SELECT ALL MIN(vt2.c1) FROM vt2, v0, vt0 WHERE (((((vt0.c0) BETWEEN (vt2.c0) AND (v0.c3)))<=((v0.c3 IN ()))));
SELECT DISTINCT MIN(vt2.c1) FROM vt2, v0, vt0 WHERE (((((vt0.c0) BETWEEN (vt2.c0) AND (v0.c3)))<=((v0.c3 IN ())))) ORDER BY 0.21701227106984922, ((((((((v0.c1)OR(NULLIF(v0.c2, vt2.c0))))OR(((((((v0.c1)OR(v0.c3)))AND(vt0.c0)))OR(v0.c2)))))OR(((v0.c3)>>(vt2.c1)))))OR(CASE vt2.c1  WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN 0.6091312051440382 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN '1Ryi㨀(o0^' ELSE vt2.c0 END)) INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2, v0, vt0 WHERE (CASE WHEN ((v0.c3) BETWEEN (v0.c2) AND (v0.c0)) THEN CAST(v0.c0 AS REAL) WHEN 0.336662628389795 THEN ((vt2.c0)<=(v0.c0)) WHEN CAST(v0.c0 AS REAL) THEN TYPEOF(vt2.c1) END) ORDER BY 0.21701227106984922, ((((((((v0.c1)OR(NULLIF(v0.c2, vt2.c0))))OR(((((((v0.c1)OR(v0.c3)))AND(vt0.c0)))OR(v0.c2)))))OR(((v0.c3)>>(vt2.c1)))))OR(CASE vt2.c1  WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN 0.6091312051440382 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN '1Ryi㨀(o0^' ELSE vt2.c0 END));
SELECT ALL * FROM v0, vt2, vt0 WHERE (CASE WHEN CASE v0.c2  WHEN v0.c1 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c2 END THEN json_array_length(v0.c3, v0.c3) WHEN (x'a9b1a9' IN ()) THEN LIKELIHOOD(vt0.c0, v0.c3) WHEN TRIM(DISTINCT v0.c2) THEN CASE WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt0.c0 END ELSE (v0.c1 IN ()) END);
SELECT * FROM v0, vt2, vt0 WHERE (((CASE WHEN CASE v0.c2  WHEN v0.c1 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c2 END THEN json_array_length(v0.c3, v0.c3) WHEN (x'a9b1a9' IN ()) THEN LIKELIHOOD(vt0.c0, v0.c3) WHEN TRIM(DISTINCT v0.c2) THEN CASE WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt0.c0 END ELSE (v0.c1 IN ()) END)AND((((v0.c1, v0.c2, v0.c1)) NOT BETWEEN (((v0.c1 IN (v0.c0)), ((((v0.c0)OR(v0.c3)))OR(vt2.c0)), json_quote(vt0.c0))) AND ((((vt0.c0)|(v0.c2)), (((vt2.c1, v0.c3))<=((v0.c0, vt2.c0))), ((vt2.c0)/(v0.c2)))))))) ORDER BY ((+ (v0.c1)) IN ()) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CASE WHEN CASE v0.c2  WHEN v0.c1 THEN vt2.c1 WHEN v0.c0 THEN v0.c2 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c2 END THEN json_array_length(v0.c3, v0.c3) WHEN (x'a9b1a9' IN ()) THEN LIKELIHOOD(vt0.c0, v0.c3) WHEN TRIM(DISTINCT v0.c2) THEN CASE WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt0.c0 END ELSE (v0.c1 IN ()) END);
SELECT * FROM vt2, v0, vt0 WHERE ((CASE WHEN vt0.c0 THEN v0.c0 ELSE v0.c3 END IN (CASE v0.c0  WHEN v0.c3 THEN v0.c0 WHEN x'' THEN v0.c0 END))) ORDER BY (NOT (CASE NULL  WHEN vt2.c1 THEN vt0.c0 END)), CAST(((98818379)<<(vt2.c1)) AS TEXT) ASC, (- (((((((((v0.c1)OR(vt2.c1)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c3)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((CASE WHEN vt0.c0 THEN v0.c0 ELSE v0.c3 END IN (CASE v0.c0  WHEN v0.c3 THEN v0.c0 WHEN x'' THEN v0.c0 END))) ORDER BY (NOT (CASE NULL  WHEN vt2.c1 THEN vt0.c0 END)), CAST(((0X5e3d94b)<<(vt2.c1)) AS TEXT) ASC, (- (((((((((v0.c1)OR(vt2.c1)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c3)))) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt2, v0, vt0 WHERE ((CASE WHEN vt0.c0 THEN v0.c0 ELSE v0.c3 END IN (CASE v0.c0  WHEN v0.c3 THEN v0.c0 WHEN x'' THEN v0.c0 END))) ORDER BY (NOT (CASE NULL  WHEN vt2.c1 THEN vt0.c0 END)), CAST(((98818379)<<(vt2.c1)) AS TEXT) ASC, (- (((((((((v0.c1)OR(vt2.c1)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c3)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((CASE WHEN vt0.c0 THEN v0.c0 ELSE v0.c3 END IN (CASE v0.c0  WHEN v0.c3 THEN v0.c0 WHEN x'' THEN v0.c0 END))) ORDER BY (NOT (CASE NULL  WHEN vt2.c1 THEN vt0.c0 END)), CAST(((0X5e3d94b)<<(vt2.c1)) AS TEXT) ASC, (- (((((((((v0.c1)OR(vt2.c1)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c3)))) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt2 WHERE (vt2.c0 COLLATE NOCASE);
SELECT * FROM vt2 WHERE (((vt2.c0 COLLATE NOCASE)AND(vt2.c0))) ORDER BY ((TIME(vt2.c0, vt2.c0, vt2.c1, vt2.c1, vt2.c1)) NOT BETWEEN ((- (vt2.c1))) AND ((((NULL))<>(('0.2622840820158293')))))  NULLS FIRST, CAST(x'' AS INTEGER) ASC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt2 WHERE (vt2.c0 COLLATE NOCASE);
SELECT * FROM vt2 WHERE (((vt2.c0 COLLATE NOCASE)AND(vt2.c0))) ORDER BY ((TIME(vt2.c0, vt2.c0, vt2.c1, vt2.c1, vt2.c1)) NOT BETWEEN ((- (vt2.c1))) AND ((((NULL))<>(('0.2622840820158293')))))  NULLS FIRST, CAST(x'' AS INTEGER) ASC  NULLS FIRST LIMIT 1;
SELECT ALL MAX(vt0.c0) FROM vt2 NATURAL JOIN vt0 INNER JOIN v0 ON (CAST(vt0.c0 AS BLOB) IN (v0.c0, ((vt0.c0) IS TRUE))) WHERE ((((+ (v0.c0))) NOTNULL));
SELECT ALL MAX(vt0.c0) FROM vt2 NATURAL JOIN vt0 INNER JOIN v0 ON (CAST(vt0.c0 AS BLOB) IN (v0.c0, ((vt0.c0) IS TRUE))) WHERE ((((((+ (v0.c0))) NOTNULL))AND(((((v0.c1) BETWEEN (v0.c3) AND (v0.c3))) NOT BETWEEN (((v0.c2) NOT BETWEEN (v0.c0) AND (vt2.c0))) AND (((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c3)))))));
SELECT ALL * FROM v0 WHERE (CAST((v0.c0 IN ()) AS BLOB));
SELECT * FROM v0 WHERE (CAST((v0.c0 IN ()) AS BLOB)) LIMIT 1;
SELECT ALL * FROM v0 WHERE (CAST((v0.c0 IN ()) AS BLOB));
SELECT * FROM v0 WHERE (CAST((v0.c0 IN ()) AS BLOB)) LIMIT 1;
SELECT * FROM vt0, vt2 WHERE (vt2.c1);
SELECT ALL * FROM vt0, vt2 WHERE (vt2.c1) LIMIT 0x2 INTERSECT SELECT * FROM vt0, vt2 WHERE (load_extension((((vt0.c0, '-268503340')) NOT BETWEEN ((vt0.c0, NULL)) AND ((vt2.c1, vt2.c1))))) LIMIT 2;
SELECT * FROM vt0, vt2 WHERE (vt2.c1);
SELECT ALL * FROM vt0, vt2 WHERE (vt2.c1) LIMIT 0x2 INTERSECT SELECT * FROM vt0, vt2 WHERE (load_extension((((vt0.c0, '-268503340')) NOT BETWEEN ((vt0.c0, NULL)) AND ((vt2.c1, vt2.c1))))) LIMIT 2;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON IFNULL(((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)), v0.c0) WHERE ('F') ORDER BY (NOT (((v0.c0)OR(vt2.c1)))) DESC  NULLS LAST, (((((v0.c2 IN ()))OR(NULL)))AND(((((v0.c3)OR(vt2.c1)))AND(v0.c2))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON IFNULL(((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)), v0.c0) WHERE ('F') ORDER BY json_insert(((v0.c1) BETWEEN (v0.c1) AND (vt2.c0)), ((v0.c2)|(0.3999587619880506)), ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3)), (((vt2.c1, vt2.c1))!=((vt2.c0, v0.c0))), CASE WHEN 0.6661490111702458 THEN v0.c3 WHEN v0.c2 THEN v0.c1 END, ((((((((vt2.c1)AND(v0.c2)))OR(v0.c2)))OR(v0.c2)))AND(vt2.c1))) INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON IFNULL(((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)), v0.c0) WHERE (CAST(CASE v0.c1  WHEN vt2.c1 THEN '-387031235' ELSE vt2.c1 END AS NUMERIC)) ORDER BY json_insert(((v0.c1) BETWEEN (v0.c1) AND (vt2.c0)), ((v0.c2)|(0.3999587619880506)), ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3)), (((vt2.c1, vt2.c1))<>((vt2.c0, v0.c0))), CASE WHEN 0.6661490111702458 THEN v0.c3 WHEN v0.c2 THEN v0.c1 END, ((((((((vt2.c1)AND(v0.c2)))OR(v0.c2)))OR(v0.c2)))AND(vt2.c1)));
SELECT ALL * FROM v0 CROSS JOIN vt2 ON IFNULL(((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)), v0.c0) WHERE ('F') ORDER BY (NOT (((v0.c0)OR(vt2.c1)))) DESC  NULLS LAST, (((((v0.c2 IN ()))OR(NULL)))AND(((((v0.c3)OR(vt2.c1)))AND(v0.c2))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON IFNULL(((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)), v0.c0) WHERE ('F') ORDER BY json_insert(((v0.c1) BETWEEN (v0.c1) AND (vt2.c0)), ((v0.c2)|(0.3999587619880506)), ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3)), (((vt2.c1, vt2.c1))!=((vt2.c0, v0.c0))), CASE WHEN 0.6661490111702458 THEN v0.c3 WHEN v0.c2 THEN v0.c1 END, ((((((((vt2.c1)AND(v0.c2)))OR(v0.c2)))OR(v0.c2)))AND(vt2.c1))) INTERSECT SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON IFNULL(((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)), v0.c0) WHERE (CAST(CASE v0.c1  WHEN vt2.c1 THEN '-387031235' ELSE vt2.c1 END AS NUMERIC)) ORDER BY json_insert(((v0.c1) BETWEEN (v0.c1) AND (vt2.c0)), ((v0.c2)|(0.3999587619880506)), ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3)), (((vt2.c1, vt2.c1))<>((vt2.c0, v0.c0))), CASE WHEN 0.6661490111702458 THEN v0.c3 WHEN v0.c2 THEN v0.c1 END, ((((((((vt2.c1)AND(v0.c2)))OR(v0.c2)))OR(v0.c2)))AND(vt2.c1)));
SELECT * FROM vt2 WHERE (vt2.c1);
SELECT * FROM vt2 WHERE (vt2.c1) ORDER BY ((vt2.c1)*(vt2.c1)) COLLATE NOCASE, ((vt2.c1 COLLATE NOCASE) NOTNULL) LIMIT 1;
SELECT * FROM vt2 WHERE (vt2.c1);
SELECT * FROM vt2 WHERE (vt2.c1) ORDER BY ((vt2.c1)*(vt2.c1)) COLLATE NOCASE, ((vt2.c1 COLLATE NOCASE) NOTNULL) LIMIT 1;
SELECT COUNT(*) FROM vt0, v0, vt2 WHERE (CASE WHEN ((v0.c2)>=(v0.c2)) THEN -386582235 ELSE ((v0.c2) NOT NULL) END);
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (((CASE WHEN ((v0.c2)>(v0.c2)) THEN 0xffffffffe8f53925 ELSE ((v0.c2) NOT NULL) END)AND((v0.c0 IN (v0.c1 COLLATE RTRIM, ((-1.330521423E9)IS(vt2.c1)))))));
SELECT ALL * FROM vt0, v0 WHERE ('I*');
SELECT DISTINCT * FROM vt0, v0 WHERE ((('I*')AND(295969637))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((((((((x'')OR(CAST(v0.c0 AS REAL))))AND(LENGTH(v0.c1))))OR(((v0.c3)-(v0.c0)))))OR(((vt0.c0)IS(v0.c0))))) LIMIT 1;
SELECT ALL * FROM vt0, v0 WHERE ('I*');
SELECT DISTINCT * FROM vt0, v0 WHERE ((('I*')AND(295969637))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((((((((x'')OR(CAST(v0.c0 AS REAL))))AND(LENGTH(v0.c1))))OR(((v0.c3)-(v0.c0)))))OR(((vt0.c0)IS(v0.c0))))) LIMIT 1;
SELECT * FROM vt2 WHERE (CASE CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END  WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0)>=('1476351881')) WHEN (((NULL)) BETWEEN ((vt2.c0)) AND ((vt2.c0))) THEN (vt2.c1 IN ()) ELSE ROUND(vt2.c0, vt2.c0) END) ORDER BY ((((CASE WHEN vt2.c0 THEN vt2.c1 WHEN '1e500' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)OR(((vt2.c1)IS(vt2.c0)))))OR((NOT (vt2.c0))));
SELECT DISTINCT * FROM vt2 WHERE (((CASE CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END  WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0)>('1476351881')) WHEN (((NULL)) BETWEEN ((vt2.c0)) AND ((vt2.c0))) THEN (vt2.c1 IN ()) ELSE ROUND(vt2.c0, vt2.c0) END)AND(((((vt2.c0)IS NOT(vt2.c1)))-(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END))))) ORDER BY ((((CASE WHEN vt2.c0 THEN vt2.c1 WHEN '1e500' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)OR(((vt2.c1)IS(vt2.c0)))))OR((NOT (vt2.c0)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((vt2.c0)LIKE(vt2.c0)) IN (CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END))) ORDER BY ((((CASE WHEN vt2.c0 THEN vt2.c1 WHEN '1e500' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)OR(((vt2.c1)IS(vt2.c0)))))OR((NOT (vt2.c0)))) LIMIT 1;
SELECT * FROM vt2 WHERE (CASE CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END  WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0)>=('1476351881')) WHEN (((NULL)) BETWEEN ((vt2.c0)) AND ((vt2.c0))) THEN (vt2.c1 IN ()) ELSE ROUND(vt2.c0, vt2.c0) END) ORDER BY ((((CASE WHEN vt2.c0 THEN vt2.c1 WHEN '1e500' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)OR(((vt2.c1)IS(vt2.c0)))))OR((NOT (vt2.c0))));
SELECT DISTINCT * FROM vt2 WHERE (((CASE CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END  WHEN ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c0)>('1476351881')) WHEN (((NULL)) BETWEEN ((vt2.c0)) AND ((vt2.c0))) THEN (vt2.c1 IN ()) ELSE ROUND(vt2.c0, vt2.c0) END)AND(((((vt2.c0)IS NOT(vt2.c1)))-(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END))))) ORDER BY ((((CASE WHEN vt2.c0 THEN vt2.c1 WHEN '1e500' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)OR(((vt2.c1)IS(vt2.c0)))))OR((NOT (vt2.c0)))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((vt2.c0)LIKE(vt2.c0)) IN (CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END))) ORDER BY ((((CASE WHEN vt2.c0 THEN vt2.c1 WHEN '1e500' THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)OR(((vt2.c1)IS(vt2.c0)))))OR((NOT (vt2.c0)))) LIMIT 1;
SELECT MIN(vt2.c1) FROM vt2 WHERE ((('0 6n|')IS NOT(vt2.c1))) ORDER BY ((((x'b67b')OR(((vt2.c0)IS(vt2.c1)))))AND((((vt2.c0))>((vt2.c0))))) DESC  NULLS FIRST, (- ((+ (vt2.c1))));
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE ((((('0 6n|')IS NOT(vt2.c1)))AND(((((CAST(NULL AS BLOB))OR(((((vt2.c0)AND(vt2.c0)))OR(vt2.c0)))))OR(UPPER(vt2.c1)))))) ORDER BY ((((x'b67b')OR(((vt2.c0)IS(vt2.c1)))))AND((((vt2.c0))>((vt2.c0))))) DESC  NULLS FIRST, (- ((+ (vt2.c1)))) LIMIT 2;
SELECT ALL MIN(v0.c3) FROM v0, vt2, vt0 WHERE (((v0.c1 COLLATE BINARY) BETWEEN (v0.c3) AND (-1.165434253E9 COLLATE NOCASE))) ORDER BY (+ ((vt2.c1 IN ())));
SELECT MIN(v0.c3) FROM v0, vt2, vt0 WHERE (((v0.c1 COLLATE BINARY) BETWEEN (v0.c3) AND (-1.165434253E9 COLLATE NOCASE))) ORDER BY (+ ((vt2.c1 IN ())));
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) COLLATE NOCASE);
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) COLLATE NOCASE) ORDER BY (((NOT (v0.c1)))&(CAST(v0.c0 AS NUMERIC)))  NULLS FIRST, (((v0.c0)IS NOT(v0.c3)) IN (DATE(v0.c1, v0.c1, v0.c0, v0.c2)))  NULLS LAST, ((((((v0.c2) IS TRUE))AND(CAST(v0.c3 AS NUMERIC))))AND(((v0.c0) IS FALSE))) DESC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE (((((((CAST(vt0.c0 AS NUMERIC))OR(((vt0.c0)LIKE(vt2.c1)))))AND(vt2.c0)))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND ('/'))))) ORDER BY CASE WHEN vt0.c0 COLLATE RTRIM THEN ((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)) END DESC  NULLS FIRST, LIKELIHOOD(DISTINCT LOWER(DISTINCT vt2.c1), vt2.c1 COLLATE BINARY);
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((((CAST(vt0.c0 AS NUMERIC))OR(((vt0.c0)LIKE(vt2.c1)))))AND(vt2.c0)))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND ('/'))))) ORDER BY CASE WHEN vt0.c0 COLLATE RTRIM THEN ((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)) END DESC  NULLS FIRST, LIKELIHOOD(DISTINCT LOWER(DISTINCT vt2.c1), vt2.c1 COLLATE BINARY) INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c1) NOT BETWEEN (x'') AND (vt0.c0))) BETWEEN ((+ (vt2.c1))) AND (vt2.c1 COLLATE NOCASE))) ORDER BY CASE WHEN vt0.c0 COLLATE RTRIM THEN ((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)) END DESC  NULLS FIRST, LIKELIHOOD(DISTINCT LOWER(DISTINCT vt2.c1), vt2.c1 COLLATE BINARY);
SELECT * FROM vt0, vt2 WHERE (((((((CAST(vt0.c0 AS NUMERIC))OR(((vt0.c0)LIKE(vt2.c1)))))AND(vt2.c0)))AND(((vt0.c0) NOT BETWEEN (vt0.c0) AND ('/'))))) ORDER BY CASE WHEN vt0.c0 COLLATE RTRIM THEN ((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)) END DESC  NULLS FIRST, LIKELIHOOD(DISTINCT LOWER(DISTINCT vt2.c1), vt2.c1 COLLATE BINARY);
SELECT ALL MIN(vt0.c0) FROM vt0, v0 WHERE (CAST(((vt0.c0) BETWEEN (vt0.c0) AND (v0.c2)) AS NUMERIC));
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (CAST(((vt0.c0) BETWEEN (vt0.c0) AND (v0.c2)) AS NUMERIC));
SELECT ALL * FROM v0, vt2 WHERE (((CASE v0.c2  WHEN vt2.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c2 END)*(((v0.c1) NOT BETWEEN (0.43617607644884837) AND (v0.c0)))));
SELECT * FROM v0, vt2 WHERE (((((CASE v0.c2  WHEN vt2.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c2 END)*(((v0.c1) NOT BETWEEN (0.43617607644884837) AND (v0.c0)))))AND(((((v0.c1) IS FALSE)) IS FALSE)))) ORDER BY 0.25299042261537696 ASC, CASE ((v0.c1)AND(v0.c0))  WHEN SQLITE_COMPILEOPTION_GET(v0.c3) THEN 0.06330153348056389 END  NULLS LAST, CASE v0.c1 COLLATE RTRIM  WHEN (((vt2.c1)) BETWEEN ((v0.c1)) AND ((vt2.c0))) THEN LAST_INSERT_ROWID() WHEN (vt2.c0 IN (v0.c2)) THEN v0.c1 END, ((((((vt2.c1)AND(v0.c2)))OR(v0.c3)))<=((+ (vt2.c0))));
SELECT ALL * FROM v0, vt2 WHERE (((CASE v0.c2  WHEN vt2.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c2 END)*(((v0.c1) NOT BETWEEN (0.43617607644884837) AND (v0.c0)))));
SELECT * FROM v0, vt2 WHERE (((((CASE v0.c2  WHEN vt2.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c2 END)*(((v0.c1) NOT BETWEEN (0.43617607644884837) AND (v0.c0)))))AND(((((v0.c1) IS FALSE)) IS FALSE)))) ORDER BY 0.25299042261537696 ASC, CASE ((v0.c1)AND(v0.c0))  WHEN SQLITE_COMPILEOPTION_GET(v0.c3) THEN 0.06330153348056389 END  NULLS LAST, CASE v0.c1 COLLATE RTRIM  WHEN (((vt2.c1)) BETWEEN ((v0.c1)) AND ((vt2.c0))) THEN LAST_INSERT_ROWID() WHEN (vt2.c0 IN (v0.c2)) THEN v0.c1 END, ((((((vt2.c1)AND(v0.c2)))OR(v0.c3)))<=((+ (vt2.c0))));
SELECT * FROM vt2, v0, vt0 WHERE ((((v0.c1) NOT BETWEEN (v0.c3) AND (vt2.c1)) IN ((((v0.c1, vt0.c0, vt2.c1, v0.c0))>((NULL, v0.c1, vt2.c0, v0.c1)))))) ORDER BY ((NULL) NOT BETWEEN (CAST(v0.c0 AS TEXT)) AND (vt2.c1));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((((v0.c1) NOT BETWEEN (v0.c3) AND (vt2.c1)) IN ((((v0.c1, vt0.c0, vt2.c1, v0.c0))>((NULL, v0.c1, vt2.c0, v0.c1))))))AND((((v0.c3) IS FALSE) IN (((v0.c0)<<(v0.c3)), (NOT (v0.c3))))))) ORDER BY (((((((((((v0.c1)) BETWEEN ((vt2.c1)) AND ((v0.c2))))AND(v0.c3 COLLATE RTRIM)))OR(CASE vt2.c0  WHEN v0.c3 THEN 0.7249870232672072 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c0 THEN v0.c1 END)))OR(v0.c2)))AND(((((vt2.c1)AND(NULL)))AND(0X2620d755))))  NULLS FIRST;
SELECT * FROM vt2, v0, vt0 WHERE ((((v0.c1) NOT BETWEEN (v0.c3) AND (vt2.c1)) IN ((((v0.c1, vt0.c0, vt2.c1, v0.c0))>((NULL, v0.c1, vt2.c0, v0.c1)))))) ORDER BY ((NULL) NOT BETWEEN (CAST(v0.c0 AS TEXT)) AND (vt2.c1));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((((v0.c1) NOT BETWEEN (v0.c3) AND (vt2.c1)) IN ((((v0.c1, vt0.c0, vt2.c1, v0.c0))>((NULL, v0.c1, vt2.c0, v0.c1))))))AND((((v0.c3) IS FALSE) IN (((v0.c0)<<(v0.c3)), (NOT (v0.c3))))))) ORDER BY (((((((((((v0.c1)) BETWEEN ((vt2.c1)) AND ((v0.c2))))AND(v0.c3 COLLATE RTRIM)))OR(CASE vt2.c0  WHEN v0.c3 THEN 0.7249870232672072 WHEN vt2.c0 THEN vt2.c0 WHEN v0.c0 THEN v0.c1 END)))OR(v0.c2)))AND(((((vt2.c1)AND(NULL)))AND(0X2620d755))))  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt0 WHERE ((((NULL)<(v0.c1)) IN (((v0.c3) NOT NULL)))) ORDER BY (- (CAST(v0.c0 AS INTEGER)))  NULLS FIRST, CASE WHEN ((v0.c2) IS FALSE) THEN (- (vt0.c0)) WHEN ((v0.c1)|(v0.c2)) THEN v0.c1 COLLATE BINARY ELSE CAST(v0.c3 AS BLOB) END;
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE ((((NULL)<(v0.c1)) IN (((v0.c3) NOT NULL)))) ORDER BY (- (CAST(v0.c0 AS INTEGER)))  NULLS FIRST, CASE WHEN ((v0.c2) IS FALSE) THEN (- (vt0.c0)) WHEN ((v0.c1)|(v0.c2)) THEN v0.c1 COLLATE BINARY ELSE CAST(v0.c3 AS BLOB) END INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((CAST(v0.c2 AS NUMERIC)) NOT BETWEEN ('477587929' COLLATE BINARY) AND (v0.c1 COLLATE RTRIM))) ORDER BY (- (CAST(v0.c0 AS INTEGER)))  NULLS FIRST, CASE WHEN ((v0.c2) IS FALSE) THEN (- (vt0.c0)) WHEN ((v0.c1)|(v0.c2)) THEN v0.c1 COLLATE BINARY ELSE CAST(v0.c3 AS BLOB) END;
SELECT COUNT(*) FROM vt2, vt0 WHERE (((((((vt2.c0) IS TRUE))AND((((vt2.c1, vt2.c0))>((vt2.c0, vt0.c0))))))OR(((vt2.c0)>(vt2.c1))))) ORDER BY ((((((((vt0.c0)AND(vt0.c0)))OR(vt2.c1)))AND(vt2.c0))) NOT BETWEEN (CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 END) AND (((((((((vt2.c0)AND(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c0)))), x'7cc2fb' ASC;
SELECT COUNT(*) FROM vt2, vt0 WHERE (((((((((vt2.c0) IS TRUE))AND((((vt2.c1, vt2.c0))>((vt2.c0, vt0.c0))))))OR(((vt2.c0)>(vt2.c1)))))AND(((-1.330521423E9) IS TRUE)))) ORDER BY ((((((((vt0.c0)AND(vt0.c0)))OR(vt2.c1)))AND(vt2.c0))) NOT BETWEEN (CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 END) AND (((((((((vt2.c0)AND(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c0)))), x'7cc2fb' ASC INTERSECT SELECT COUNT(*) FROM vt2, vt0 WHERE ((((NOT (vt2.c1)))OR(((vt2.c1)<('᩾G)KI#㬰-]'))))) ORDER BY ((((((((vt0.c0)AND(vt0.c0)))OR(vt2.c1)))AND(vt2.c0))) NOT BETWEEN (CASE vt0.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 END) AND (((((((((vt2.c0)AND(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c0)))), x'7cc2fb' ASC;
SELECT ALL * FROM v0, vt0, vt2 WHERE (CAST(((-2.133440203E9)LIKE(vt2.c1)) AS NUMERIC));
SELECT * FROM v0, vt0, vt2 WHERE (((CAST(((-2.133440203E9)LIKE(vt2.c1)) AS NUMERIC))AND(((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))AND(v0.c0)) COLLATE BINARY))) ORDER BY ((((CAST(v0.c3 AS BLOB))OR(v0.c2 COLLATE BINARY)))AND(((v0.c0)*(vt2.c0)))) DESC LIMIT 1;
SELECT ALL * FROM v0, vt0, vt2 WHERE (CAST(((-2.133440203E9)LIKE(vt2.c1)) AS NUMERIC));
SELECT * FROM v0, vt0, vt2 WHERE (((CAST(((-2.133440203E9)LIKE(vt2.c1)) AS NUMERIC))AND(((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))AND(v0.c0)) COLLATE BINARY))) ORDER BY ((((CAST(v0.c3 AS BLOB))OR(v0.c2 COLLATE BINARY)))AND(((v0.c0)*(vt2.c0)))) DESC LIMIT 1;
SELECT MIN(vt0.c0) FROM vt0 WHERE (NULL) ORDER BY ((CAST(vt0.c0 AS NUMERIC))IS(vt0.c0 COLLATE BINARY)) DESC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((NULL)AND(((CASE WHEN vt0.c0 THEN vt0.c0 END)AND(((vt0.c0) NOT NULL)))))) ORDER BY ((((CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)OR('1285320076')))AND(vt0.c0))  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) IN (vt0.c0))) ORDER BY ((((CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)OR('1285320076')))AND(vt0.c0))  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt2 WHERE (vt2.c1);
SELECT ALL * FROM vt2 WHERE (((vt2.c1)AND((('䗊') NOT BETWEEN (CAST(vt2.c1 AS NUMERIC)) AND ((vt2.c1 IN (vt2.c1)))))));
SELECT ALL * FROM vt2 WHERE (vt2.c1);
SELECT ALL * FROM vt2 WHERE (((vt2.c1)AND((('䗊') NOT BETWEEN (CAST(vt2.c1 AS NUMERIC)) AND ((vt2.c1 IN (vt2.c1)))))));
SELECT ALL COUNT(*) FROM v0 WHERE ('?');
SELECT ALL COUNT(*) FROM v0 WHERE ((('?')AND((((((v0.c1))>=((v0.c3))))|(v0.c1))))) ORDER BY ((((((((((((v0.c3)AND(v0.c1)))AND(v0.c0)))AND(v0.c3)))AND(v0.c0)))AND(v0.c2))) NOT BETWEEN (LAST_INSERT_ROWID()) AND ((+ (v0.c0))))  NULLS FIRST LIMIT 1;
SELECT ALL COUNT(*) FROM vt2 WHERE (((((vt2.c0)&(vt2.c0))) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))) AND (((vt2.c1)>>(x'54')))));
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((((((vt2.c0)&(vt2.c0))) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))) AND (((vt2.c1)>>(x'54')))))AND(((((vt2.c0)<<(vt2.c0))) NOT BETWEEN (CAST(vt2.c0 AS BLOB)) AND (((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c1))))))) LIMIT 0x1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE ((CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END IN (vt2.c0))) LIMIT 0X1;
SELECT COUNT(*) FROM v0 LEFT OUTER JOIN vt0 ON (TRIM(DISTINCT v0.c2, v0.c0) IN ()) NATURAL JOIN vt2 WHERE (LTRIM((((v0.c2)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))))) ORDER BY (((vt2.c0 IN (v0.c2)))>('G턼O')) ASC, (((NOT (v0.c0)))||(((((((v0.c2)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c1))))  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 LEFT OUTER JOIN vt0 ON (TRIM(DISTINCT v0.c2, v0.c0) IN ()) NATURAL JOIN vt2 WHERE (LTRIM((((v0.c2)) NOT BETWEEN ((vt0.c0)) AND ((v0.c2))))) ORDER BY NULL DESC, LOWER(vt0.c0) DESC  NULLS FIRST, ((x'fe' COLLATE RTRIM)<=(((v0.c3) BETWEEN (v0.c3) AND (v0.c3)))) LIMIT 0;
SELECT ALL * FROM vt2, vt0 WHERE (((((('-787386779')!=(vt2.c0))))<>((((vt0.c0) NOTNULL))))) ORDER BY (((((vt0.c0, vt2.c1)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0)))) NOT NULL)  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (((((((('-787386779')>(vt2.c0))))>((((vt0.c0) NOTNULL)))))AND(((vt2.c0)<=(CAST(vt2.c0 AS NUMERIC)))))) ORDER BY CAST((('477587929')>=(vt2.c1)) AS NUMERIC) ASC  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt2, vt0 WHERE (((((('-787386779')!=(vt2.c0))))<>((((vt0.c0) NOTNULL))))) ORDER BY (((((vt0.c0, vt2.c1)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0)))) NOT NULL)  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (((((((('-787386779')>(vt2.c0))))>((((vt0.c0) NOTNULL)))))AND(((vt2.c0)<=(CAST(vt2.c0 AS NUMERIC)))))) ORDER BY CAST((('477587929')>=(vt2.c1)) AS NUMERIC) ASC  NULLS LAST LIMIT 1;
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (SUBSTR(vt2.c0, CASE WHEN vt2.c0 THEN '-329968071' WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)) ORDER BY ((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1))) NOT NULL)  NULLS LAST, (CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN '-138246169' ELSE vt2.c1 END IN (CASE NULL  WHEN vt2.c0 THEN '''8?8yFU.' WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END, (((vt2.c0, vt2.c1))>=((vt2.c1, vt2.c1)))))  NULLS LAST;
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (SUBSTR(vt2.c0, CASE WHEN vt2.c0 THEN '-329968071' WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)) ORDER BY ((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1))) NOT NULL)  NULLS LAST, (CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN '-138246169' ELSE vt2.c1 END IN (CASE NULL  WHEN vt2.c0 THEN '''8?8yFU.' WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END, (((vt2.c0, vt2.c1))>=((vt2.c1, vt2.c1)))))  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE ((CAST(vt0.c0 AS NUMERIC) IN (CASE WHEN vt0.c0 THEN NULL END, vt2.c1 COLLATE NOCASE, (('0.672882029177375') IS FALSE)))) ORDER BY UNLIKELY(DISTINCT CAST(vt2.c1 AS TEXT))  NULLS FIRST, (((vt2.c0)) NOT BETWEEN ((((vt2.c1)%(vt0.c0)))) AND ((x''))) DESC, (- (vt0.c0 COLLATE NOCASE)) ASC  NULLS FIRST, ((((vt2.c0) BETWEEN (vt2.c0) AND (-3.88835817E8))) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0))) AND (vt2.c0 COLLATE NOCASE));
SELECT * FROM vt0, vt2 WHERE ((((CAST(vt0.c0 AS NUMERIC) IN (CASE WHEN vt0.c0 THEN NULL END, vt2.c1 COLLATE NOCASE, (('0.672882029177375') IS FALSE))))AND((((((((vt2.c1)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c1)) IN (vt2.c1, ((((((vt2.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c1))))))) ORDER BY UNLIKELY(DISTINCT CAST(vt2.c1 AS TEXT))  NULLS FIRST, (((vt2.c0)) NOT BETWEEN ((((vt2.c1)%(vt0.c0)))) AND ((x''))) DESC, (- (vt0.c0 COLLATE NOCASE)) ASC  NULLS FIRST, ((((vt2.c0) BETWEEN (vt2.c0) AND (-3.88835817E8))) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0))) AND (vt2.c0 COLLATE NOCASE)) LIMIT 0x1;
SELECT ALL * FROM vt0, vt2 WHERE ((CAST(vt0.c0 AS NUMERIC) IN (CASE WHEN vt0.c0 THEN NULL END, vt2.c1 COLLATE NOCASE, (('0.672882029177375') IS FALSE)))) ORDER BY UNLIKELY(DISTINCT CAST(vt2.c1 AS TEXT))  NULLS FIRST, (((vt2.c0)) NOT BETWEEN ((((vt2.c1)%(vt0.c0)))) AND ((x''))) DESC, (- (vt0.c0 COLLATE NOCASE)) ASC  NULLS FIRST, ((((vt2.c0) BETWEEN (vt2.c0) AND (-3.88835817E8))) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0))) AND (vt2.c0 COLLATE NOCASE));
SELECT * FROM vt0, vt2 WHERE ((((CAST(vt0.c0 AS NUMERIC) IN (CASE WHEN vt0.c0 THEN NULL END, vt2.c1 COLLATE NOCASE, (('0.672882029177375') IS FALSE))))AND((((((((vt2.c1)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c1)) IN (vt2.c1, ((((((vt2.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c1))))))) ORDER BY UNLIKELY(DISTINCT CAST(vt2.c1 AS TEXT))  NULLS FIRST, (((vt2.c0)) NOT BETWEEN ((((vt2.c1)%(vt0.c0)))) AND ((x''))) DESC, (- (vt0.c0 COLLATE NOCASE)) ASC  NULLS FIRST, ((((vt2.c0) BETWEEN (vt2.c0) AND (-3.88835817E8))) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0))) AND (vt2.c0 COLLATE NOCASE)) LIMIT 0x1;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c1)LIKE(vt0.c0))) ISNULL)) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT NULL) DESC, (((vt0.c0 IN ())) BETWEEN (UPPER(DISTINCT vt2.c1)) AND (vt0.c0));
SELECT ALL * FROM vt2, vt0 WHERE (((((((vt2.c1)LIKE(vt0.c0))) ISNULL))AND((((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, 0.448686527452994)) AND ((vt0.c0, vt0.c0))))/(CAST(vt0.c0 AS BLOB)))))) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT NULL) DESC, (((vt0.c0 IN ())) BETWEEN (UPPER(DISTINCT vt2.c1)) AND (vt0.c0)) INTERSECT SELECT ALL * FROM vt2, vt0 WHERE (((- (NULL)) IN ('', (((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1))), ((vt0.c0)<=(vt0.c0))))) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT NULL) DESC, (((vt0.c0 IN ())) BETWEEN (UPPER(DISTINCT vt2.c1)) AND (vt0.c0));
SELECT * FROM vt2, vt0 WHERE (((((vt2.c1)LIKE(vt0.c0))) ISNULL)) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT NULL) DESC, (((vt0.c0 IN ())) BETWEEN (UPPER(DISTINCT vt2.c1)) AND (vt0.c0));
SELECT ALL * FROM vt2, vt0 WHERE (((((((vt2.c1)LIKE(vt0.c0))) ISNULL))AND((((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, 0.448686527452994)) AND ((vt0.c0, vt0.c0))))/(CAST(vt0.c0 AS BLOB)))))) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT NULL) DESC, (((vt0.c0 IN ())) BETWEEN (UPPER(DISTINCT vt2.c1)) AND (vt0.c0)) INTERSECT SELECT ALL * FROM vt2, vt0 WHERE (((- (NULL)) IN ('', (((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1))), ((vt0.c0)<=(vt0.c0))))) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT NULL) DESC, (((vt0.c0 IN ())) BETWEEN (UPPER(DISTINCT vt2.c1)) AND (vt0.c0));
SELECT * FROM v0, vt2, vt0 WHERE ('1173494973') ORDER BY (- (CASE WHEN vt2.c1 THEN vt2.c0 WHEN v0.c1 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 ELSE v0.c2 END))  NULLS LAST;
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((('1173494973')AND(CASE WHEN ((vt2.c0)=(v0.c1)) THEN ((vt2.c0) BETWEEN (v0.c2) AND (v0.c3)) END))) ORDER BY CAST('1250648155' AS BLOB) ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (2.108053427E9) ORDER BY CAST('1250648155' AS BLOB) ASC  NULLS LAST LIMIT 0x1;
SELECT * FROM v0, vt2, vt0 WHERE ('1173494973') ORDER BY (- (CASE WHEN vt2.c1 THEN vt2.c0 WHEN v0.c1 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 ELSE v0.c2 END))  NULLS LAST;
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((('1173494973')AND(CASE WHEN ((vt2.c0)=(v0.c1)) THEN ((vt2.c0) BETWEEN (v0.c2) AND (v0.c3)) END))) ORDER BY CAST('1250648155' AS BLOB) ASC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (2.108053427E9) ORDER BY CAST('1250648155' AS BLOB) ASC  NULLS LAST LIMIT 0x1;
SELECT MAX(v0.c3) FROM v0 WHERE (CASE (v0.c1 IN (v0.c2, v0.c1))  WHEN ((v0.c3)<(v0.c1)) THEN CAST(v0.c2 AS BLOB) END);
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (CASE (v0.c1 IN (v0.c2, v0.c1))  WHEN ((v0.c3)<(v0.c1)) THEN CAST(v0.c2 AS BLOB) END) ORDER BY (+ (STRFTIME(v0.c0, v0.c3, v0.c2))) DESC, (~ (((v0.c0)<(v0.c2)))) ASC LIMIT 2;
SELECT ALL MIN(v0.c1) FROM vt2, v0, vt0 WHERE (((((~ (vt2.c1)), x'', 0.33142640661301415))>=((((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)), CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN NULL WHEN NULL THEN v0.c2 ELSE vt0.c0 END, (- (vt2.c0)))))) ORDER BY (((((((((((~ (vt2.c0)))AND(v0.c1 COLLATE NOCASE)))AND(CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c1 THEN vt2.c0 END)))OR(vt2.c1)))AND(vt2.c1 COLLATE RTRIM)))AND(CAST(vt2.c0 AS TEXT))), vt2.c0 DESC;
SELECT DISTINCT MIN(v0.c1) FROM vt2, v0, vt0 WHERE (((((((~ (vt2.c1)), x'', 0.33142640661301415))>((((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)), CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN NULL WHEN NULL THEN v0.c2 ELSE vt0.c0 END, (- (vt2.c0))))))AND((~ (vt2.c1 COLLATE RTRIM))))) ORDER BY (((((((((((~ (vt2.c0)))AND(v0.c1 COLLATE NOCASE)))AND(CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c1 THEN vt2.c0 END)))OR(vt2.c1)))AND(vt2.c1 COLLATE RTRIM)))AND(CAST(vt2.c0 AS TEXT))), vt2.c0 DESC LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt0, v0, vt2 WHERE (((v0.c1 COLLATE NOCASE) BETWEEN (((((((((vt2.c1)AND(v0.c3)))OR(v0.c1)))OR(vt2.c0)))AND(v0.c3))) AND ((((vt0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))))));
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (((((v0.c1 COLLATE NOCASE) BETWEEN (((((((((vt2.c1)AND(v0.c3)))OR(v0.c1)))OR(vt2.c0)))AND(v0.c3))) AND ((((vt0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))))))AND(((((-1330521423) BETWEEN (vt2.c0) AND (vt0.c0))) BETWEEN (vt0.c0) AND ((vt0.c0 IN (v0.c0))))))) ORDER BY ((((((v0.c3)AND(v0.c2)))AND(vt0.c0))) IS TRUE)  NULLS LAST, v0.c1 COLLATE NOCASE  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (((CASE vt2.c0  WHEN v0.c2 THEN 0.9367156034774673 WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN vt2.c0 END) NOTNULL)) ORDER BY ((((((v0.c3)AND(v0.c2)))AND(vt0.c0))) IS TRUE)  NULLS LAST, v0.c1 COLLATE NOCASE  NULLS LAST;
SELECT * FROM vt2 WHERE (((((NULL)||(vt2.c0)))LIKE(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)))));
SELECT ALL * FROM vt2 WHERE (((((NULL)||(vt2.c0)))LIKE(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))))) ORDER BY ((vt2.c0)/(vt2.c0)) COLLATE NOCASE ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt2 WHERE (vt2.c1) ORDER BY ((vt2.c0)/(vt2.c0)) COLLATE NOCASE ASC  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((NULL)||(vt2.c0)))LIKE(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)))));
SELECT ALL * FROM vt2 WHERE (((((NULL)||(vt2.c0)))LIKE(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))))) ORDER BY ((vt2.c0)/(vt2.c0)) COLLATE NOCASE ASC  NULLS FIRST INTERSECT SELECT ALL * FROM vt2 WHERE (vt2.c1) ORDER BY ((vt2.c0)/(vt2.c0)) COLLATE NOCASE ASC  NULLS FIRST;
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c2)/((v0.c2 IN ()))) WHERE (v0.c3) ORDER BY ((v0.c2 COLLATE NOCASE)IS NOT(((x'07')GLOB(vt2.c0)))), (CASE vt2.c1  WHEN v0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c1 END IN (((vt2.c1)&(v0.c1))))  NULLS LAST;
SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c2)/((v0.c2 IN ()))) WHERE (v0.c3) ORDER BY (((((vt2.c0, vt2.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c3, v0.c2)))) IS FALSE) ASC INTERSECT SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c2)/((v0.c2 IN ()))) WHERE (CAST(CASE WHEN v0.c2 THEN v0.c0 END AS TEXT)) ORDER BY (((((vt2.c0, vt2.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c3, v0.c2)))) IS FALSE) ASC;
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c2)/((v0.c2 IN ()))) WHERE (v0.c3) ORDER BY ((v0.c2 COLLATE NOCASE)IS NOT(((x'07')GLOB(vt2.c0)))), (CASE vt2.c1  WHEN v0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c1 END IN (((vt2.c1)&(v0.c1))))  NULLS LAST;
SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c2)/((v0.c2 IN ()))) WHERE (v0.c3) ORDER BY (((((vt2.c0, vt2.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c3, v0.c2)))) IS FALSE) ASC INTERSECT SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c2)/((v0.c2 IN ()))) WHERE (CAST(CASE WHEN v0.c2 THEN v0.c0 END AS TEXT)) ORDER BY (((((vt2.c0, vt2.c1)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((v0.c3, v0.c2)))) IS FALSE) ASC;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((v0.c2)LIKE('[/w')))OR((NOT (v0.c1)))))OR(((vt0.c0)IS(vt2.c0))))) ORDER BY NULL  NULLS LAST;
SELECT * FROM vt0, vt2, v0 WHERE (((((((v0.c2)LIKE('[/w')))OR((NOT (v0.c1)))))OR(((vt0.c0)IS(vt2.c0))))) ORDER BY NULL  NULLS LAST INTERSECT SELECT * FROM vt0, vt2, v0 WHERE (((((((((CASE WHEN vt2.c0 THEN x'' END)OR(v0.c0)))OR((vt2.c0 IN ()))))AND(((v0.c0) IS TRUE))))AND(LIKELY(0.7641463933915006)))) ORDER BY NULL  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((v0.c2)LIKE('[/w')))OR((NOT (v0.c1)))))OR(((vt0.c0)IS(vt2.c0))))) ORDER BY NULL  NULLS LAST;
SELECT * FROM vt0, vt2, v0 WHERE (((((((v0.c2)LIKE('[/w')))OR((NOT (v0.c1)))))OR(((vt0.c0)IS(vt2.c0))))) ORDER BY NULL  NULLS LAST INTERSECT SELECT * FROM vt0, vt2, v0 WHERE (((((((((CASE WHEN vt2.c0 THEN x'' END)OR(v0.c0)))OR((vt2.c0 IN ()))))AND(((v0.c0) IS TRUE))))AND(LIKELY(0.7641463933915006)))) ORDER BY NULL  NULLS LAST;
SELECT MIN(v0.c3) FROM v0 WHERE ((- ((v0.c2 IN ()))));
SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE ((((- ((v0.c2 IN ()))))AND((((+ (0X487d1869)))/(v0.c1))))) ORDER BY CASE TRIM(v0.c1)  WHEN ((v0.c2) ISNULL) THEN ((((((v0.c3)OR(v0.c2)))OR(v0.c1)))OR(v0.c2)) ELSE CAST(v0.c2 AS REAL) END ASC, (((CAST(v0.c0 AS NUMERIC), CAST(v0.c2 AS REAL), ((v0.c1)>=('-1242418047')), ((v0.c0)&(v0.c1)), (((v0.c1, v0.c0))>((v0.c2, v0.c3)))))>=((((v0.c2) BETWEEN ('1955269773') AND (v0.c0)), (v0.c3 IN (v0.c3)), (v0.c0 IN ()), ((v0.c2)*(v0.c0)), v0.c0 COLLATE RTRIM))) INTERSECT SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE (((((((((v0.c0)AND(v0.c3)))OR(v0.c3)))OR(v0.c0)))GLOB(v0.c2))) ORDER BY CASE TRIM(v0.c1)  WHEN ((v0.c2) ISNULL) THEN ((((((v0.c3)OR(v0.c2)))OR(v0.c1)))OR(v0.c2)) ELSE CAST(v0.c2 AS REAL) END ASC, (((CAST(v0.c0 AS NUMERIC), CAST(v0.c2 AS REAL), ((v0.c1)>=('-1242418047')), ((v0.c0)&(v0.c1)), (((v0.c1, v0.c0))>((v0.c2, v0.c3)))))>=((((v0.c2) BETWEEN ('1955269773') AND (v0.c0)), (v0.c3 IN (v0.c3)), (v0.c0 IN ()), ((v0.c2)*(v0.c0)), v0.c0 COLLATE RTRIM)));
SELECT ALL MAX(vt2.c1) FROM vt2 NATURAL JOIN v0 INNER JOIN vt0 ON ((CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 END) BETWEEN ((((vt0.c0)) NOT BETWEEN (('-2086197516')) AND ((NULL)))) AND (((((((vt2.c0)OR(v0.c2)))AND(0X1ba09fad)))OR(vt2.c0)))) WHERE ((((0.2857812508151617 IN ())) ISNULL)) ORDER BY ((CASE WHEN v0.c1 THEN v0.c3 END) ISNULL);
SELECT DISTINCT MAX(vt2.c1) FROM vt2 NATURAL JOIN v0 INNER JOIN vt0 ON ((CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 END) BETWEEN ((((vt0.c0)) NOT BETWEEN (('-2086197516')) AND ((NULL)))) AND (((((((vt2.c0)OR(v0.c2)))AND(0x1ba09fad)))OR(vt2.c0)))) WHERE ((((((0.2857812508151617 IN ())) ISNULL))AND(((((vt2.c1)GLOB(vt0.c0)))||(v0.c2 COLLATE NOCASE))))) ORDER BY (((((((NOT (vt2.c1)))AND((- (vt0.c0)))))OR(0.8249859797136475)))OR(((v0.c0) BETWEEN (v0.c1) AND (v0.c3)))) ASC, x'930e';
SELECT ALL * FROM vt2 WHERE (CASE vt2.c0  WHEN CAST(vt2.c1 AS INTEGER) THEN CAST(vt2.c0 AS NUMERIC) WHEN (+ (vt2.c1)) THEN TYPEOF(DISTINCT vt2.c0) END);
SELECT DISTINCT * FROM vt2 WHERE (((CASE vt2.c0  WHEN CAST(vt2.c1 AS INTEGER) THEN CAST(vt2.c0 AS NUMERIC) WHEN (+ (vt2.c1)) THEN TYPEOF(DISTINCT vt2.c0) END)AND(vt2.c0))) LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE (CASE vt2.c0  WHEN CAST(vt2.c1 AS INTEGER) THEN CAST(vt2.c0 AS NUMERIC) WHEN (+ (vt2.c1)) THEN TYPEOF(DISTINCT vt2.c0) END);
SELECT DISTINCT * FROM vt2 WHERE (((CASE vt2.c0  WHEN CAST(vt2.c1 AS INTEGER) THEN CAST(vt2.c0 AS NUMERIC) WHEN (+ (vt2.c1)) THEN TYPEOF(DISTINCT vt2.c0) END)AND(vt2.c0))) LIMIT 0x0;
SELECT * FROM v0, vt2, vt0 WHERE (CASE WHEN CAST(v0.c2 AS REAL) THEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c1)) WHEN CASE vt0.c0  WHEN vt0.c0 THEN v0.c2 END THEN DATETIME(vt0.c0, v0.c3, vt2.c1, v0.c3, v0.c1) WHEN (((((((('0.7051132046982554')OR(v0.c2)))AND(v0.c3)))AND(v0.c2)))OR(v0.c1)) THEN (((v0.c3, v0.c0)) BETWEEN ((v0.c3, v0.c0)) AND ((vt2.c0, v0.c3))) END);
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CASE WHEN CAST(v0.c2 AS REAL) THEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c1)) WHEN CASE vt0.c0  WHEN vt0.c0 THEN v0.c2 END THEN DATETIME(vt0.c0, v0.c3, vt2.c1, v0.c3, v0.c1) WHEN (((((((('0.7051132046982554')OR(v0.c2)))AND(v0.c3)))AND(v0.c2)))OR(v0.c1)) THEN (((v0.c3, v0.c0)) BETWEEN ((v0.c3, v0.c0)) AND ((vt2.c0, v0.c3))) END)AND(((TYPEOF(vt0.c0))IS(CASE WHEN v0.c2 THEN vt2.c1 END))))) ORDER BY CAST(v0.c0 AS REAL) COLLATE BINARY LIMIT 0x1;
SELECT * FROM v0, vt2, vt0 WHERE (CASE WHEN CAST(v0.c2 AS REAL) THEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c1)) WHEN CASE vt0.c0  WHEN vt0.c0 THEN v0.c2 END THEN DATETIME(vt0.c0, v0.c3, vt2.c1, v0.c3, v0.c1) WHEN (((((((('0.7051132046982554')OR(v0.c2)))AND(v0.c3)))AND(v0.c2)))OR(v0.c1)) THEN (((v0.c3, v0.c0)) BETWEEN ((v0.c3, v0.c0)) AND ((vt2.c0, v0.c3))) END);
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CASE WHEN CAST(v0.c2 AS REAL) THEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (v0.c1)) WHEN CASE vt0.c0  WHEN vt0.c0 THEN v0.c2 END THEN DATETIME(vt0.c0, v0.c3, vt2.c1, v0.c3, v0.c1) WHEN (((((((('0.7051132046982554')OR(v0.c2)))AND(v0.c3)))AND(v0.c2)))OR(v0.c1)) THEN (((v0.c3, v0.c0)) BETWEEN ((v0.c3, v0.c0)) AND ((vt2.c0, v0.c3))) END)AND(((TYPEOF(vt0.c0))IS(CASE WHEN v0.c2 THEN vt2.c1 END))))) ORDER BY CAST(v0.c0 AS REAL) COLLATE BINARY LIMIT 0x1;
SELECT * FROM v0, vt2 WHERE (COALESCE(DISTINCT v0.c1, INSTR(vt2.c1, v0.c1))) ORDER BY (- (((v0.c0)==(v0.c0)))) DESC;
SELECT ALL * FROM v0, vt2 WHERE (COALESCE(DISTINCT v0.c1, INSTR(vt2.c1, v0.c1))) ORDER BY (- (((v0.c0)==(v0.c0)))) DESC INTERSECT SELECT ALL * FROM v0, vt2 WHERE (((((v0.c2)OR('*	djyj''켁	')))OR(v0.c1)) COLLATE NOCASE) ORDER BY (- (((v0.c0)=(v0.c0)))) DESC;
SELECT * FROM v0, vt2 WHERE (COALESCE(DISTINCT v0.c1, INSTR(vt2.c1, v0.c1))) ORDER BY (- (((v0.c0)==(v0.c0)))) DESC;
SELECT ALL * FROM v0, vt2 WHERE (COALESCE(DISTINCT v0.c1, INSTR(vt2.c1, v0.c1))) ORDER BY (- (((v0.c0)==(v0.c0)))) DESC INTERSECT SELECT ALL * FROM v0, vt2 WHERE (((((v0.c2)OR('*	djyj''켁	')))OR(v0.c1)) COLLATE NOCASE) ORDER BY (- (((v0.c0)=(v0.c0)))) DESC;
SELECT ALL * FROM v0 WHERE ((((v0.c3 IN ('1044560274'))) NOTNULL));
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c3 IN ('1044560274'))) NOTNULL))AND(json_array_length(((v0.c2)-(v0.c0)))))) ORDER BY (((((v0.c3))>=((v0.c1))))IS NOT(((v0.c0) NOTNULL)))  NULLS LAST, ((v0.c0)AND(0.3319606374597245)) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((0.03806174828508091)AND(((v0.c1)+(v0.c0))))) ORDER BY (((((v0.c3))>=((v0.c1))))IS NOT(((v0.c0) NOTNULL)))  NULLS LAST, ((v0.c0)AND(0.3319606374597245)) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM v0 WHERE ((((v0.c3 IN ('1044560274'))) NOTNULL));
SELECT DISTINCT * FROM v0 WHERE ((((((v0.c3 IN ('1044560274'))) NOTNULL))AND(json_array_length(((v0.c2)-(v0.c0)))))) ORDER BY (((((v0.c3))>=((v0.c1))))IS NOT(((v0.c0) NOTNULL)))  NULLS LAST, ((v0.c0)AND(0.3319606374597245)) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((0.03806174828508091)AND(((v0.c1)+(v0.c0))))) ORDER BY (((((v0.c3))>=((v0.c1))))IS NOT(((v0.c0) NOTNULL)))  NULLS LAST, ((v0.c0)AND(0.3319606374597245)) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL MAX(vt2.c0) FROM vt0, vt2 WHERE (((((708305761) IS TRUE))-((vt2.c0 IN (vt2.c0, vt2.c0, vt0.c0))))) ORDER BY (((((vt2.c1)AND(-1.4783726E9)), (((vt0.c0))>((vt2.c1))), CAST(vt2.c1 AS TEXT)))<>((((vt0.c0) ISNULL), vt2.c1, ((vt2.c0)=(vt0.c0))))) DESC  NULLS LAST, ((('', vt2.c0 COLLATE NOCASE, (((vt0.c0, 'Y싖^K^覼WC')) NOT BETWEEN ((vt0.c0, vt2.c1)) AND ((vt0.c0, vt2.c0))), ((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0))))>=((COALESCE(vt2.c0, vt2.c0, vt2.c1), ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)), ((vt0.c0)%(vt2.c1)), ((vt2.c0) NOTNULL))));
SELECT MAX(vt2.c0) FROM vt0, vt2 WHERE (((((((708305761) IS TRUE))-((vt2.c0 IN (vt2.c0, vt2.c0, vt0.c0)))))AND((vt2.c1 IN ((vt2.c1 IN (vt2.c1, vt0.c0))))))) ORDER BY ((CAST(vt2.c0 AS INTEGER))IS NOT(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))) INTERSECT SELECT ALL MAX(vt2.c0) FROM vt0, vt2 WHERE (UPPER(DISTINCT ((((((vt2.c1)OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))) ORDER BY ((CAST(vt2.c0 AS INTEGER))IS NOT(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0))));
SELECT * FROM vt0, vt2 WHERE (((~ (vt2.c1)) IN (-1727422081)));
SELECT ALL * FROM vt0, vt2 WHERE (((~ (vt2.c1)) IN (0xffffffff9909a17f))) ORDER BY ((UPPER(DISTINCT vt0.c0)) ISNULL) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt0, vt2 WHERE (((((((CAST(vt2.c0 AS TEXT))AND(((vt2.c0)*('')))))AND(vt2.c0 COLLATE BINARY)))OR(vt2.c1))) ORDER BY ((UPPER(DISTINCT vt0.c0)) ISNULL) DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt0, vt2 WHERE (((~ (vt2.c1)) IN (-1727422081)));
SELECT ALL * FROM vt0, vt2 WHERE (((~ (vt2.c1)) IN (0xffffffff9909a17f))) ORDER BY ((UPPER(DISTINCT vt0.c0)) ISNULL) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT * FROM vt0, vt2 WHERE (((((((CAST(vt2.c0 AS TEXT))AND(((vt2.c0)*('')))))AND(vt2.c0 COLLATE BINARY)))OR(vt2.c1))) ORDER BY ((UPPER(DISTINCT vt0.c0)) ISNULL) DESC  NULLS LAST LIMIT 0;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((TRIM(vt0.c0))==(x'1e'))) ORDER BY CASE '2103859168'  WHEN vt0.c0 THEN ((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN (((0x5ec8c306, vt0.c0, vt0.c0, vt0.c0, vt0.c0))>((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0))) ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('?')) END, (((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((((((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(x'11')))OR(vt0.c0)))AND(NULL)), (vt0.c0 IN (vt0.c0, vt0.c0)), (vt0.c0 IN (vt0.c0)), ((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)), vt0.c0 COLLATE BINARY)) AND ((COALESCE(vt0.c0, vt0.c0), ((vt0.c0)IS NOT(vt0.c0)), SUBSTR(vt0.c0, vt0.c0), ((vt0.c0)-(vt0.c0)), ((vt0.c0) IS TRUE))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (((TRIM(vt0.c0))=(x'1e'))) ORDER BY CASE '2103859168'  WHEN vt0.c0 THEN ((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN (((0X5ec8c306, vt0.c0, vt0.c0, vt0.c0, vt0.c0))>((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0))) ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('?')) END, (((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((((((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(x'11')))OR(vt0.c0)))AND(NULL)), (vt0.c0 IN (vt0.c0, vt0.c0)), (vt0.c0 IN (vt0.c0)), ((((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)), vt0.c0 COLLATE BINARY)) AND ((COALESCE(vt0.c0, vt0.c0), ((vt0.c0)IS NOT(vt0.c0)), SUBSTR(vt0.c0, vt0.c0), ((vt0.c0)-(vt0.c0)), ((vt0.c0) IS TRUE))));
SELECT ALL * FROM vt0, vt2 WHERE ((((vt2.c0, vt2.c1, 9.55661194E8)) BETWEEN ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (x'75f7')), CAST(vt2.c0 AS TEXT), (+ (vt2.c1)))) AND ((CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN x'd589' THEN vt0.c0 ELSE vt0.c0 END, ((vt2.c0) BETWEEN (1.976704639E9) AND (vt2.c0)), vt2.c1))));
SELECT * FROM vt0, vt2 WHERE ((((vt2.c0, vt2.c1, 9.55661194E8)) BETWEEN ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (x'75f7')), CAST(vt2.c0 AS TEXT), (+ (vt2.c1)))) AND ((CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN x'd589' THEN vt0.c0 ELSE vt0.c0 END, ((vt2.c0) BETWEEN (1.976704639E9) AND (vt2.c0)), vt2.c1)))) LIMIT 0x1;
SELECT ALL * FROM vt0, vt2 WHERE ((((vt2.c0, vt2.c1, 9.55661194E8)) BETWEEN ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (x'75f7')), CAST(vt2.c0 AS TEXT), (+ (vt2.c1)))) AND ((CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN x'd589' THEN vt0.c0 ELSE vt0.c0 END, ((vt2.c0) BETWEEN (1.976704639E9) AND (vt2.c0)), vt2.c1))));
SELECT * FROM vt0, vt2 WHERE ((((vt2.c0, vt2.c1, 9.55661194E8)) BETWEEN ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (x'75f7')), CAST(vt2.c0 AS TEXT), (+ (vt2.c1)))) AND ((CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN x'd589' THEN vt0.c0 ELSE vt0.c0 END, ((vt2.c0) BETWEEN (1.976704639E9) AND (vt2.c0)), vt2.c1)))) LIMIT 0x1;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c0 END) NOT BETWEEN (CAST(vt2.c1 AS TEXT)) AND ((vt0.c0 IN (v0.c2))))) ORDER BY (((((((((((((('d!n')OR(vt2.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(vt2.c1)))OR((~ (vt2.c0)))))OR(((NULL) NOT BETWEEN (vt0.c0) AND (vt2.c1)))))OR((((0.0687371851882338, vt2.c0, v0.c0, vt2.c0))>=((vt0.c0, v0.c0, NULL, v0.c2)))))  NULLS LAST, TYPEOF(DISTINCT ((((((v0.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c0)));
SELECT * FROM vt0, v0, vt2 WHERE (((((CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c0 END) NOT BETWEEN (CAST(vt2.c1 AS TEXT)) AND ((vt0.c0 IN (v0.c2)))))AND((((((vt2.c1))<((v0.c1))))IS NOT(json_object(vt2.c0, v0.c3, v0.c2, vt2.c0, v0.c0)))))) ORDER BY (((((((((((((('d!n')OR(vt2.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(vt2.c1)))OR((~ (vt2.c0)))))OR(((NULL) NOT BETWEEN (vt0.c0) AND (vt2.c1)))))OR((((0.0687371851882338, vt2.c0, v0.c0, vt2.c0))>=((vt0.c0, v0.c0, NULL, v0.c2)))))  NULLS LAST, TYPEOF(DISTINCT ((((((v0.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c0))) LIMIT 1 INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c0) NOT BETWEEN (v0.c3) AND (vt0.c0)) IN ())) ORDER BY (((((((((((((('d!n')OR(vt2.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(vt2.c1)))OR((~ (vt2.c0)))))OR(((NULL) NOT BETWEEN (vt0.c0) AND (vt2.c1)))))OR((((0.0687371851882338, vt2.c0, v0.c0, vt2.c0))>=((vt0.c0, v0.c0, NULL, v0.c2)))))  NULLS LAST, TYPEOF(DISTINCT ((((((v0.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c0))) LIMIT 1;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c0 END) NOT BETWEEN (CAST(vt2.c1 AS TEXT)) AND ((vt0.c0 IN (v0.c2))))) ORDER BY (((((((((((((('d!n')OR(vt2.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(vt2.c1)))OR((~ (vt2.c0)))))OR(((NULL) NOT BETWEEN (vt0.c0) AND (vt2.c1)))))OR((((0.0687371851882338, vt2.c0, v0.c0, vt2.c0))>=((vt0.c0, v0.c0, NULL, v0.c2)))))  NULLS LAST, TYPEOF(DISTINCT ((((((v0.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c0)));
SELECT * FROM vt0, v0, vt2 WHERE (((((CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c0 END) NOT BETWEEN (CAST(vt2.c1 AS TEXT)) AND ((vt0.c0 IN (v0.c2)))))AND((((((vt2.c1))<((v0.c1))))IS NOT(json_object(vt2.c0, v0.c3, v0.c2, vt2.c0, v0.c0)))))) ORDER BY (((((((((((((('d!n')OR(vt2.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(vt2.c1)))OR((~ (vt2.c0)))))OR(((NULL) NOT BETWEEN (vt0.c0) AND (vt2.c1)))))OR((((0.0687371851882338, vt2.c0, v0.c0, vt2.c0))>=((vt0.c0, v0.c0, NULL, v0.c2)))))  NULLS LAST, TYPEOF(DISTINCT ((((((v0.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c0))) LIMIT 1 INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c0) NOT BETWEEN (v0.c3) AND (vt0.c0)) IN ())) ORDER BY (((((((((((((('d!n')OR(vt2.c1)))OR(vt0.c0)))AND(vt0.c0)))OR(vt2.c1)))OR((~ (vt2.c0)))))OR(((NULL) NOT BETWEEN (vt0.c0) AND (vt2.c1)))))OR((((0.0687371851882338, vt2.c0, v0.c0, vt2.c0))>=((vt0.c0, v0.c0, NULL, v0.c2)))))  NULLS LAST, TYPEOF(DISTINCT ((((((v0.c0)AND(v0.c0)))OR(v0.c0)))OR(v0.c0))) LIMIT 1;
SELECT ALL COUNT(*) FROM vt0 NATURAL JOIN vt2 WHERE ((((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0)))) IS FALSE));
SELECT DISTINCT COUNT(*) FROM vt0 NATURAL JOIN vt2 WHERE ((((((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0)))) IS FALSE))AND(((vt2.c0 COLLATE BINARY) NOT BETWEEN (vt2.c0) AND (UNLIKELY(DISTINCT vt0.c0)))))) LIMIT 1;
SELECT ALL * FROM vt2 WHERE (vt2.c0) ORDER BY ((((vt2.c0)*(vt2.c1)))+(vt2.c1 COLLATE BINARY))  NULLS LAST, ((CAST(vt2.c0 AS INTEGER))>(CASE WHEN vt2.c1 THEN vt2.c1 END));
SELECT * FROM vt2 WHERE (vt2.c0) ORDER BY json_object(((vt2.c1)|(vt2.c0)), ((vt2.c1) IS FALSE), vt2.c0), ((json_valid(vt2.c0)) BETWEEN (((vt2.c0)>>(vt2.c0))) AND (((vt2.c0)AND(vt2.c1))));
SELECT ALL * FROM vt2 WHERE (vt2.c0) ORDER BY ((((vt2.c0)*(vt2.c1)))+(vt2.c1 COLLATE BINARY))  NULLS LAST, ((CAST(vt2.c0 AS INTEGER))>(CASE WHEN vt2.c1 THEN vt2.c1 END));
SELECT * FROM vt2 WHERE (vt2.c0) ORDER BY json_object(((vt2.c1)|(vt2.c0)), ((vt2.c1) IS FALSE), vt2.c0), ((json_valid(vt2.c0)) BETWEEN (((vt2.c0)>>(vt2.c0))) AND (((vt2.c0)AND(vt2.c1))));
SELECT MIN(v0.c1) FROM v0, vt2 WHERE (((v0.c2)%(v0.c2)) COLLATE NOCASE COLLATE NOCASE) ORDER BY (((CASE x''  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN vt2.c1 END, v0.c1))>=((CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END, CAST(v0.c2 AS TEXT))))  NULLS FIRST, (((((vt2.c1)) NOT BETWEEN ((v0.c2)) AND ((x'')))) NOT NULL)  NULLS LAST;
SELECT DISTINCT MIN(v0.c1) FROM v0, vt2 WHERE (((v0.c2)%(v0.c2)) COLLATE NOCASE COLLATE NOCASE) ORDER BY (((CASE x''  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN vt2.c1 END, v0.c1))>=((CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END, CAST(v0.c2 AS TEXT))))  NULLS FIRST, (((((vt2.c1)) NOT BETWEEN ((v0.c2)) AND ((x'')))) NOT NULL)  NULLS LAST LIMIT 0x0;
SELECT * FROM vt2, v0 CROSS JOIN vt0 ON CASE CAST(v0.c0 AS TEXT)  WHEN v0.c1 THEN 'S\A诋x-1E7' ELSE ((vt0.c0) IS TRUE) END WHERE ((((((v0.c2, v0.c2, vt2.c1))<=((vt2.c0, v0.c1, v0.c0)))) IS FALSE)) ORDER BY (((CAST(v0.c2 AS BLOB)))==((((v0.c0) IS FALSE)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON CASE CAST(v0.c0 AS TEXT)  WHEN v0.c1 THEN 'S\A诋x-1E7' ELSE ((vt0.c0) IS TRUE) END WHERE ((((((v0.c2, v0.c2, vt2.c1))<((vt2.c0, v0.c1, v0.c0)))) IS FALSE)) ORDER BY (((CAST(v0.c2 AS BLOB)))=((((v0.c0) IS FALSE)))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON CASE CAST(v0.c0 AS TEXT)  WHEN v0.c1 THEN 'S\A诋x-1E7' ELSE ((vt0.c0) IS TRUE) END WHERE (((vt0.c0)IS(v0.c0 COLLATE NOCASE))) ORDER BY (((CAST(v0.c2 AS BLOB)))==((((v0.c0) IS FALSE)))) ASC  NULLS FIRST;
SELECT * FROM vt2, v0 CROSS JOIN vt0 ON CASE CAST(v0.c0 AS TEXT)  WHEN v0.c1 THEN 'S\A诋x-1E7' ELSE ((vt0.c0) IS TRUE) END WHERE ((((((v0.c2, v0.c2, vt2.c1))<=((vt2.c0, v0.c1, v0.c0)))) IS FALSE)) ORDER BY (((CAST(v0.c2 AS BLOB)))==((((v0.c0) IS FALSE)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON CASE CAST(v0.c0 AS TEXT)  WHEN v0.c1 THEN 'S\A诋x-1E7' ELSE ((vt0.c0) IS TRUE) END WHERE ((((((v0.c2, v0.c2, vt2.c1))<((vt2.c0, v0.c1, v0.c0)))) IS FALSE)) ORDER BY (((CAST(v0.c2 AS BLOB)))=((((v0.c0) IS FALSE)))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON CASE CAST(v0.c0 AS TEXT)  WHEN v0.c1 THEN 'S\A诋x-1E7' ELSE ((vt0.c0) IS TRUE) END WHERE (((vt0.c0)IS(v0.c0 COLLATE NOCASE))) ORDER BY (((CAST(v0.c2 AS BLOB)))==((((v0.c0) IS FALSE)))) ASC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((~ (v0.c0)) IN (((v0.c3) NOT BETWEEN (v0.c2) AND (vt0.c0)), x'' COLLATE RTRIM)));
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (((~ (v0.c0)) IN (((v0.c3) NOT BETWEEN (v0.c2) AND (vt0.c0)), x'' COLLATE RTRIM))) ORDER BY CAST(((((((((v0.c2)OR(v0.c2)))AND(v0.c1)))OR(v0.c3)))OR(v0.c0)) AS TEXT), ((NOT (v0.c3)) IN ());
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (((((((((((((vt2.c1)OR(v0.c0)))OR(v0.c2)))OR(v0.c3)))OR(((((vt0.c0)AND(vt2.c1)))OR(vt0.c0)))))OR(((('-1204624641', v0.c0, v0.c1)) BETWEEN ((v0.c0, v0.c3, vt0.c0)) AND ((vt2.c1, v0.c0, v0.c0))))))OR((vt0.c0 IN (vt2.c0)))));
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (((((((((((((((vt2.c1)OR(v0.c0)))OR(v0.c2)))OR(v0.c3)))OR(((((vt0.c0)AND(vt2.c1)))OR(vt0.c0)))))OR(((('-1204624641', v0.c0, v0.c1)) BETWEEN ((v0.c0, v0.c3, vt0.c0)) AND ((vt2.c1, v0.c0, v0.c0))))))OR((vt0.c0 IN (vt2.c0)))))AND((((((v0.c1, vt0.c0, v0.c2)) NOT BETWEEN ((v0.c1, vt2.c0, v0.c3)) AND ((vt0.c0, vt2.c1, v0.c2)))) NOT BETWEEN (665660588) AND (CAST(vt2.c0 AS NUMERIC)))))) LIMIT 1;
SELECT ALL * FROM vt2 WHERE (0.7450361872963301);
SELECT DISTINCT * FROM vt2 WHERE (0.7450361872963301) ORDER BY (((vt2.c1)LIKE(vt2.c0)) IN ()) DESC LIMIT 5 INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((~ (((vt2.c1)>=(vt2.c0))))) ORDER BY (((vt2.c1)LIKE(vt2.c0)) IN ()) DESC LIMIT 5;
SELECT ALL * FROM vt2 WHERE (0.7450361872963301);
SELECT DISTINCT * FROM vt2 WHERE (0.7450361872963301) ORDER BY (((vt2.c1)LIKE(vt2.c0)) IN ()) DESC LIMIT 5 INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((~ (((vt2.c1)>=(vt2.c0))))) ORDER BY (((vt2.c1)LIKE(vt2.c0)) IN ()) DESC LIMIT 5;
SELECT * FROM v0, vt0, vt2 WHERE ('XgL,') ORDER BY (((v0.c2)IS(vt0.c0)) IN (((((v0.c3)OR(vt2.c1)))AND(vt0.c0)))) DESC  NULLS FIRST, HEX(DISTINCT UNLIKELY(0.434871253601144))  NULLS FIRST;
SELECT * FROM v0, vt0, vt2 WHERE ('XgL,') ORDER BY (((v0.c2)IS(vt0.c0)) IN (((((v0.c3)OR(vt2.c1)))AND(vt0.c0)))) DESC  NULLS FIRST, HEX(DISTINCT UNLIKELY(0.434871253601144))  NULLS FIRST;
SELECT * FROM v0, vt0, vt2 WHERE ('XgL,') ORDER BY (((v0.c2)IS(vt0.c0)) IN (((((v0.c3)OR(vt2.c1)))AND(vt0.c0)))) DESC  NULLS FIRST, HEX(DISTINCT UNLIKELY(0.434871253601144))  NULLS FIRST;
SELECT * FROM v0, vt0, vt2 WHERE ('XgL,') ORDER BY (((v0.c2)IS(vt0.c0)) IN (((((v0.c3)OR(vt2.c1)))AND(vt0.c0)))) DESC  NULLS FIRST, HEX(DISTINCT UNLIKELY(0.434871253601144))  NULLS FIRST;
SELECT ALL * FROM vt0 LEFT OUTER JOIN vt2 ON ((((((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c0)))<=((+ (vt2.c1)))) WHERE ((NOT (((vt2.c0)>(vt2.c1)))));
SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN vt2 ON ((((((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c0)))<=((+ (vt2.c1)))) WHERE ((((NOT (((vt2.c0)>=(vt2.c1)))))AND(((vt2.c0)IS(vt2.c0)) COLLATE NOCASE)));
SELECT ALL * FROM vt0 LEFT OUTER JOIN vt2 ON ((((((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c0)))<=((+ (vt2.c1)))) WHERE ((NOT (((vt2.c0)>(vt2.c1)))));
SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN vt2 ON ((((((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c0)))<=((+ (vt2.c1)))) WHERE ((((NOT (((vt2.c0)>=(vt2.c1)))))AND(((vt2.c0)IS(vt2.c0)) COLLATE NOCASE)));
SELECT ALL COUNT(*) FROM vt0 NOT INDEXED, v0 NATURAL JOIN vt2 WHERE ((((+ (vt2.c1)))>>(((v0.c1)|(v0.c0)))));
SELECT COUNT(*) FROM vt0, v0 NATURAL JOIN vt2 WHERE ((((+ (vt2.c1)))>>(((v0.c1)|(v0.c0))))) ORDER BY ((((v0.c2)=(v0.c0))) NOTNULL)  NULLS LAST, CAST(CAST(vt0.c0 AS BLOB) AS REAL) DESC  NULLS LAST LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM vt0, v0 NATURAL JOIN vt2 WHERE (CASE WHEN CASE v0.c1  WHEN v0.c2 THEN v0.c3 WHEN 2.14129716E8 THEN v0.c2 ELSE vt2.c1 END THEN ((((v0.c2)AND(x'21aa')))OR(v0.c3)) WHEN NULL THEN CAST(v0.c3 AS REAL) ELSE v0.c1 END) ORDER BY ((((v0.c2)==(v0.c0))) NOTNULL)  NULLS LAST, CAST(CAST(vt0.c0 AS BLOB) AS REAL) DESC  NULLS LAST LIMIT 0X0;
SELECT ALL MIN(vt0.c0) FROM vt2, vt0 WHERE (HEX(((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)))OR(vt0.c0))));
SELECT MIN(vt0.c0) FROM vt2, vt0 WHERE (((HEX(((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)))OR(vt0.c0))))AND(CASE WHEN ((vt2.c0) IS FALSE) THEN CAST(vt0.c0 AS BLOB) WHEN ((vt2.c0)AND(vt0.c0)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) ELSE ((vt0.c0)<(vt2.c1)) END)));
SELECT * FROM v0 INNER JOIN vt2 ON ((x'')%(((v0.c0) NOT BETWEEN (0.9321323446592443) AND (v0.c2)))) INNER JOIN vt0 ON ((CASE v0.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c1 THEN vt2.c1 END)OR((- (vt2.c0)))) WHERE (SQLITE_SOURCE_ID());
SELECT * FROM v0 INNER JOIN vt2 ON ((x'')%(((v0.c0) NOT BETWEEN (0.9321323446592443) AND (v0.c2)))) INNER JOIN vt0 ON ((CASE v0.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c1 THEN vt2.c1 END)OR((- (vt2.c0)))) WHERE (SQLITE_SOURCE_ID()) LIMIT 0x2 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt2 ON ((x'')%(((v0.c0) NOT BETWEEN (0.9321323446592443) AND (v0.c2)))) INNER JOIN vt0 ON ((CASE v0.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c1 THEN vt2.c1 END)OR((- (vt2.c0)))) WHERE (TRIM(DISTINCT x'ad')) LIMIT 0x2;
SELECT * FROM v0 INNER JOIN vt2 ON ((x'')%(((v0.c0) NOT BETWEEN (0.9321323446592443) AND (v0.c2)))) INNER JOIN vt0 ON ((CASE v0.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c1 THEN vt2.c1 END)OR((- (vt2.c0)))) WHERE (SQLITE_SOURCE_ID());
SELECT * FROM v0 INNER JOIN vt2 ON ((x'')%(((v0.c0) NOT BETWEEN (0.9321323446592443) AND (v0.c2)))) INNER JOIN vt0 ON ((CASE v0.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c1 THEN vt2.c1 END)OR((- (vt2.c0)))) WHERE (SQLITE_SOURCE_ID()) LIMIT 0x2 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt2 ON ((x'')%(((v0.c0) NOT BETWEEN (0.9321323446592443) AND (v0.c2)))) INNER JOIN vt0 ON ((CASE v0.c0  WHEN vt2.c0 THEN v0.c0 WHEN v0.c1 THEN vt2.c1 END)OR((- (vt2.c0)))) WHERE (TRIM(DISTINCT x'ad')) LIMIT 0x2;
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE ((((vt2.c0, v0.c1, vt2.c1, vt2.c1, v0.c3, '!ᵅZ[G', v0.c1)) BETWEEN ((((v0.c2) BETWEEN (vt2.c0) AND (vt2.c0)), (((v0.c0))<((NULL))), v0.c2 COLLATE BINARY, vt2.c1 COLLATE RTRIM, ((v0.c1) IS TRUE), ((0x45772732) NOTNULL), TYPEOF(DISTINCT '-937369626'))) AND ((CASE NULL  WHEN vt2.c0 THEN v0.c3 WHEN vt0.c0 THEN 0.5535893660128063 END, (vt0.c0 IN (v0.c3, v0.c0)), v0.c2, IFNULL(v0.c1, vt0.c0), CASE v0.c2  WHEN vt2.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN NULL END, 2017635915, json_extract(vt0.c0, vt2.c1, v0.c0))))) ORDER BY (((((vt2.c1) BETWEEN (vt0.c0) AND (v0.c0)), UPPER(v0.c2), NULL))=((CASE WHEN v0.c1 THEN -4.4790322E8 ELSE vt2.c0 END, ((vt0.c0) NOTNULL), ((vt2.c1)AND(vt2.c1))))) ASC  NULLS FIRST, ((((vt2.c0) IS TRUE))<>((((v0.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1))))) ASC, (((CAST(v0.c0 AS BLOB), -1935470654, CAST(vt0.c0 AS TEXT), CASE v0.c1  WHEN vt2.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END))<=((CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN x'' THEN v0.c1 WHEN v0.c1 THEN vt2.c0 ELSE v0.c1 END, v0.c3 COLLATE BINARY, 0.5249321787965887, CHAR(vt2.c1, v0.c2)))) DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0, vt2, vt0 WHERE ((((((vt2.c0, v0.c1, vt2.c1, vt2.c1, v0.c3, '!ᵅZ[G', v0.c1)) BETWEEN ((((v0.c2) BETWEEN (vt2.c0) AND (vt2.c0)), (((v0.c0))<((NULL))), v0.c2 COLLATE BINARY, vt2.c1 COLLATE RTRIM, ((v0.c1) IS TRUE), ((1165436722) NOTNULL), TYPEOF(DISTINCT '-937369626'))) AND ((CASE NULL  WHEN vt2.c0 THEN v0.c3 WHEN vt0.c0 THEN 0.5535893660128063 END, (vt0.c0 IN (v0.c3, v0.c0)), v0.c2, IFNULL(v0.c1, vt0.c0), CASE v0.c2  WHEN vt2.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN NULL END, 0X7842ae4b, json_extract(vt0.c0, vt2.c1, v0.c0)))))AND((((v0.c1 IN ()))<=((+ (vt0.c0))))))) ORDER BY ((((v0.c1)) BETWEEN ((vt2.c1)) AND ((v0.c2))) IN ()), ((vt2.c0 IN ()) IN (((((vt2.c0)AND(v0.c3)))OR(vt2.c0))))  NULLS FIRST, (((((v0.c2, x'e663', vt2.c1, v0.c1))<=((vt2.c1, vt0.c0, v0.c3, x''))))|(vt0.c0 COLLATE BINARY)) ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN ((vt2.c0)<=(v0.c1)) THEN ((v0.c2) NOTNULL) WHEN (v0.c0 IN (vt0.c0)) THEN ((v0.c2) ISNULL) WHEN ((vt0.c0)OR(v0.c0)) THEN (v0.c2 IN ()) END);
SELECT * FROM vt0, vt2, v0 WHERE (CASE WHEN ((vt2.c0)<(v0.c1)) THEN ((v0.c2) NOTNULL) WHEN (v0.c0 IN (vt0.c0)) THEN ((v0.c2) ISNULL) WHEN ((vt0.c0)OR(v0.c0)) THEN (v0.c2 IN ()) END) ORDER BY UNLIKELY(CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c2 END)  NULLS LAST LIMIT 1;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN ((vt2.c0)<=(v0.c1)) THEN ((v0.c2) NOTNULL) WHEN (v0.c0 IN (vt0.c0)) THEN ((v0.c2) ISNULL) WHEN ((vt0.c0)OR(v0.c0)) THEN (v0.c2 IN ()) END);
SELECT * FROM vt0, vt2, v0 WHERE (CASE WHEN ((vt2.c0)<(v0.c1)) THEN ((v0.c2) NOTNULL) WHEN (v0.c0 IN (vt0.c0)) THEN ((v0.c2) ISNULL) WHEN ((vt0.c0)OR(v0.c0)) THEN (v0.c2 IN ()) END) ORDER BY UNLIKELY(CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c2 END)  NULLS LAST LIMIT 1;
SELECT MAX(v0.c1) FROM v0 WHERE (((((v0.c0)*(v0.c0))) NOT BETWEEN (((NULL)LIKE(v0.c0))) AND (((v0.c2)IS NOT(v0.c2))))) ORDER BY (+ (((v0.c1)GLOB(v0.c1))))  NULLS FIRST, ((TRIM(DISTINCT v0.c2, v0.c3))|(((v0.c1)<=(v0.c2))))  NULLS FIRST;
SELECT MAX(v0.c1) FROM v0 WHERE (((((v0.c0)*(v0.c0))) NOT BETWEEN (((NULL)LIKE(v0.c0))) AND (((v0.c2)IS NOT(v0.c2))))) ORDER BY (+ (((v0.c1)GLOB(v0.c1))))  NULLS FIRST, ((TRIM(DISTINCT v0.c2, v0.c3))|(((v0.c1)<=(v0.c2))))  NULLS FIRST LIMIT 1 INTERSECT SELECT MAX(v0.c1) FROM v0 WHERE (((NULL)>(((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY (+ (((v0.c1)GLOB(v0.c1))))  NULLS FIRST, ((TRIM(DISTINCT v0.c2, v0.c3))|(((v0.c1)<=(v0.c2))))  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(vt0.c0 AS BLOB)) NOT NULL)) ORDER BY ((((((((((PRINTF(v0.c1, v0.c3, v0.c3, vt0.c0))AND(json_insert(v0.c3, v0.c0, v0.c0, v0.c3, vt0.c0, vt0.c0))))AND(((v0.c3)==(v0.c0)))))AND(NULL)))AND((((0x47c0347f, v0.c2, vt0.c0))<=((vt0.c0, vt0.c0, v0.c1))))))AND(((-572972978) NOTNULL))), (~ (vt0.c0 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(vt0.c0 AS BLOB)) NOT NULL)) ORDER BY ((((((((((PRINTF(v0.c1, v0.c3, v0.c3, vt0.c0))AND(json_insert(v0.c3, v0.c0, v0.c0, v0.c3, vt0.c0, vt0.c0))))AND(((v0.c3)=(v0.c0)))))AND(NULL)))AND((((0X47c0347f, v0.c2, vt0.c0))<=((vt0.c0, vt0.c0, v0.c1))))))AND(((-572972978) NOTNULL))), (~ (vt0.c0 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(vt0.c0 AS BLOB)) NOT NULL)) ORDER BY ((((((((((PRINTF(v0.c1, v0.c3, v0.c3, vt0.c0))AND(json_insert(v0.c3, v0.c0, v0.c0, v0.c3, vt0.c0, vt0.c0))))AND(((v0.c3)==(v0.c0)))))AND(NULL)))AND((((0x47c0347f, v0.c2, vt0.c0))<=((vt0.c0, vt0.c0, v0.c1))))))AND(((-572972978) NOTNULL))), (~ (vt0.c0 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(vt0.c0 AS BLOB)) NOT NULL)) ORDER BY ((((((((((PRINTF(v0.c1, v0.c3, v0.c3, vt0.c0))AND(json_insert(v0.c3, v0.c0, v0.c0, v0.c3, vt0.c0, vt0.c0))))AND(((v0.c3)=(v0.c0)))))AND(NULL)))AND((((0X47c0347f, v0.c2, vt0.c0))<=((vt0.c0, vt0.c0, v0.c1))))))AND(((-572972978) NOTNULL))), (~ (vt0.c0 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE ((x'c275' IN ())) ORDER BY ((((vt0.c0)GLOB(vt0.c0))) NOT NULL), (((vt0.c0 IN (vt0.c0)))LIKE((~ (vt0.c0)))) ASC;
SELECT ALL * FROM vt0 WHERE ((x'c275' IN ())) ORDER BY ((((vt0.c0)GLOB(vt0.c0))) NOT NULL), (((vt0.c0 IN (vt0.c0)))LIKE((~ (vt0.c0)))) ASC LIMIT 0x3;
SELECT * FROM vt0 WHERE ((x'c275' IN ())) ORDER BY ((((vt0.c0)GLOB(vt0.c0))) NOT NULL), (((vt0.c0 IN (vt0.c0)))LIKE((~ (vt0.c0)))) ASC;
SELECT ALL * FROM vt0 WHERE ((x'c275' IN ())) ORDER BY ((((vt0.c0)GLOB(vt0.c0))) NOT NULL), (((vt0.c0 IN (vt0.c0)))LIKE((~ (vt0.c0)))) ASC LIMIT 0x3;
SELECT ALL MAX(vt0.c0) FROM v0, vt0, vt2 WHERE ((~ (((((v0.c1)AND(v0.c0)))AND(NULL))))) ORDER BY CASE WHEN ((vt0.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)) THEN (((vt2.c0, '-506705295', vt2.c1))<((vt2.c1, v0.c3, vt2.c0))) END DESC;
SELECT DISTINCT MAX(vt0.c0) FROM v0, vt0, vt2 WHERE ((~ (((((v0.c1)AND(v0.c0)))AND(NULL))))) ORDER BY CASE WHEN ((vt0.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)) THEN (((vt2.c0, '-506705295', vt2.c1))<((vt2.c1, v0.c3, vt2.c0))) END DESC;
SELECT * FROM vt2 WHERE ((((vt2.c0) NOT NULL) IN (CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)));
SELECT ALL * FROM vt2 WHERE ((((vt2.c0) NOT NULL) IN (CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)));
SELECT * FROM vt2 WHERE ((((vt2.c0) NOT NULL) IN (CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)));
SELECT ALL * FROM vt2 WHERE ((((vt2.c0) NOT NULL) IN (CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)));
SELECT * FROM vt0 CROSS JOIN vt2 ON ((((vt2.c0) IS TRUE)) NOT BETWEEN (((vt2.c0)IS NOT(7.08305761E8))) AND (((vt0.c0) IS FALSE))) WHERE (((((vt2.c0 IN (vt0.c0, vt2.c1, vt0.c0, NULL))))>=((LAST_INSERT_ROWID()))));
SELECT DISTINCT * FROM vt0 CROSS JOIN vt2 ON ((((vt2.c0) IS TRUE)) NOT BETWEEN (((vt2.c0)IS NOT(7.08305761E8))) AND (((vt0.c0) IS FALSE))) WHERE (((((vt2.c0 IN (vt0.c0, vt2.c1, vt0.c0, NULL))))=((LAST_INSERT_ROWID())))) ORDER BY TRIM((vt2.c1 IN ()), UNICODE(vt2.c0)) ASC  NULLS FIRST, ((CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END) NOT BETWEEN (CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c0 END) AND ('H17L基ဵ꫉3')) DESC;
SELECT * FROM vt0 CROSS JOIN vt2 ON ((((vt2.c0) IS TRUE)) NOT BETWEEN (((vt2.c0)IS NOT(7.08305761E8))) AND (((vt0.c0) IS FALSE))) WHERE (((((vt2.c0 IN (vt0.c0, vt2.c1, vt0.c0, NULL))))>=((LAST_INSERT_ROWID()))));
SELECT DISTINCT * FROM vt0 CROSS JOIN vt2 ON ((((vt2.c0) IS TRUE)) NOT BETWEEN (((vt2.c0)IS NOT(7.08305761E8))) AND (((vt0.c0) IS FALSE))) WHERE (((((vt2.c0 IN (vt0.c0, vt2.c1, vt0.c0, NULL))))=((LAST_INSERT_ROWID())))) ORDER BY TRIM((vt2.c1 IN ()), UNICODE(vt2.c0)) ASC  NULLS FIRST, ((CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END) NOT BETWEEN (CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN NULL WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c0 END) AND ('H17L基ဵ꫉3')) DESC;
SELECT * FROM vt0, v0, vt2 WHERE (vt2.c1) ORDER BY CASE (~ (vt2.c0))  WHEN (- (v0.c3)) THEN (((v0.c1, vt2.c0)) NOT BETWEEN ((v0.c3, NULL)) AND ((v0.c0, v0.c2))) END ASC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (vt2.c1) ORDER BY ((load_extension(vt0.c0, vt2.c0))IS NOT(CASE WHEN v0.c1 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c0 END)), ((((((((((((((((v0.c3)AND(vt2.c1)))OR(vt2.c0)))OR(vt0.c0)))AND(0.6310755522052562)))OR(json_quote(vt2.c1))))OR((NOT (vt2.c0)))))AND(((vt0.c0)||(v0.c2)))))AND(CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c1 END)) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((- (v0.c3))) ORDER BY ((load_extension(vt0.c0, vt2.c0))IS NOT(CASE WHEN v0.c1 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c0 END)), ((((((((((((((((v0.c3)AND(vt2.c1)))OR(vt2.c0)))OR(vt0.c0)))AND(0.6310755522052562)))OR(json_quote(vt2.c1))))OR((NOT (vt2.c0)))))AND(((vt0.c0)||(v0.c2)))))AND(CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c1 END)) ASC  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt0, v0, vt2 WHERE (vt2.c1) ORDER BY CASE (~ (vt2.c0))  WHEN (- (v0.c3)) THEN (((v0.c1, vt2.c0)) NOT BETWEEN ((v0.c3, NULL)) AND ((v0.c0, v0.c2))) END ASC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (vt2.c1) ORDER BY ((load_extension(vt0.c0, vt2.c0))IS NOT(CASE WHEN v0.c1 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c0 END)), ((((((((((((((((v0.c3)AND(vt2.c1)))OR(vt2.c0)))OR(vt0.c0)))AND(0.6310755522052562)))OR(json_quote(vt2.c1))))OR((NOT (vt2.c0)))))AND(((vt0.c0)||(v0.c2)))))AND(CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c1 END)) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((- (v0.c3))) ORDER BY ((load_extension(vt0.c0, vt2.c0))IS NOT(CASE WHEN v0.c1 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE v0.c0 END)), ((((((((((((((((v0.c3)AND(vt2.c1)))OR(vt2.c0)))OR(vt0.c0)))AND(0.6310755522052562)))OR(json_quote(vt2.c1))))OR((NOT (vt2.c0)))))AND(((vt0.c0)||(v0.c2)))))AND(CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c1 END)) ASC  NULLS FIRST LIMIT 0X1;
SELECT * FROM v0 INNER JOIN vt0 ON (+ (((vt2.c1) NOT BETWEEN (v0.c2) AND (v0.c3)))) NATURAL JOIN vt2 WHERE (CAST((v0.c0 IN (v0.c0, vt2.c1)) AS INTEGER));
SELECT ALL * FROM v0 INNER JOIN vt0 ON (+ (((vt2.c1) NOT BETWEEN (v0.c2) AND (v0.c3)))) NATURAL JOIN vt2 WHERE (((CAST((v0.c0 IN (v0.c0)) AS INTEGER))AND(json_quote(((((v0.c0)OR(v0.c0)))OR(vt2.c0)))))) ORDER BY ((((vt2.c0) IS TRUE)) BETWEEN (((vt2.c1) NOT BETWEEN (v0.c3) AND (v0.c2))) AND ((+ (vt0.c0)))) ASC, CASE LIKELIHOOD(DISTINCT vt2.c1, v0.c0)  WHEN vt0.c0 COLLATE BINARY THEN v0.c3 COLLATE BINARY WHEN vt2.c1 THEN v0.c3 COLLATE BINARY WHEN (((v0.c0))<=((vt0.c0))) THEN CAST(v0.c3 AS NUMERIC) END  NULLS FIRST LIMIT 1;
SELECT * FROM v0 INNER JOIN vt0 ON (+ (((vt2.c1) NOT BETWEEN (v0.c2) AND (v0.c3)))) NATURAL JOIN vt2 WHERE (CAST((v0.c0 IN (v0.c0, vt2.c1)) AS INTEGER));
SELECT ALL * FROM v0 INNER JOIN vt0 ON (+ (((vt2.c1) NOT BETWEEN (v0.c2) AND (v0.c3)))) NATURAL JOIN vt2 WHERE (((CAST((v0.c0 IN (v0.c0)) AS INTEGER))AND(json_quote(((((v0.c0)OR(v0.c0)))OR(vt2.c0)))))) ORDER BY ((((vt2.c0) IS TRUE)) BETWEEN (((vt2.c1) NOT BETWEEN (v0.c3) AND (v0.c2))) AND ((+ (vt0.c0)))) ASC, CASE LIKELIHOOD(DISTINCT vt2.c1, v0.c0)  WHEN vt0.c0 COLLATE BINARY THEN v0.c3 COLLATE BINARY WHEN vt2.c1 THEN v0.c3 COLLATE BINARY WHEN (((v0.c0))<=((vt0.c0))) THEN CAST(v0.c3 AS NUMERIC) END  NULLS FIRST LIMIT 1;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS INTEGER))AND(vt0.c0)));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((CAST(vt0.c0 AS INTEGER))AND(vt0.c0)))AND((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))>(((- (vt0.c0)), ((vt0.c0)&(vt0.c0)))))))) LIMIT 0X0 INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0)<=(vt0.c0))) BETWEEN ((vt0.c0 IN (vt0.c0))) AND ((- (vt0.c0))))) LIMIT 0x0;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(x'1a47')))OR(vt0.c0)))AND(vt0.c0)), CAST(vt0.c0 AS BLOB)))>=((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)), vt0.c0)))) ORDER BY ((((0.9242163713377699) NOTNULL)) IS TRUE) DESC  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(x'1a47')))OR(vt0.c0)))AND(vt0.c0)), CAST(vt0.c0 AS BLOB)))>((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)), vt0.c0))))AND(((((((vt0.c0)) BETWEEN ((x'09')) AND ((vt0.c0)))))<>((((vt0.c0)||(vt0.c0)))))))) ORDER BY ((((0.9242163713377699) NOTNULL)) IS TRUE) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE ((((('-265240606'))>=((v0.c1))) IN (CASE v0.c1  WHEN NULL THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN '526554451' THEN '0.024244574675355457' ELSE vt0.c0 END))) ORDER BY v0.c0, ((LOWER(DISTINCT 'D]2kvN^|	'))+(((v0.c2) BETWEEN (0.5287990337841547) AND (v0.c0)))) DESC  NULLS LAST;
SELECT * FROM v0, vt0 WHERE ((((('-265240606'))=((v0.c1))) IN (CASE v0.c1  WHEN NULL THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN '526554451' THEN '0.024244574675355457' ELSE vt0.c0 END))) ORDER BY v0.c0, ((LOWER(DISTINCT 'D]2kvN^|	'))+(((v0.c2) BETWEEN (0.5287990337841547) AND (v0.c0)))) DESC  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE ((((('-265240606'))>=((v0.c1))) IN (CASE v0.c1  WHEN NULL THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN '526554451' THEN '0.024244574675355457' ELSE vt0.c0 END))) ORDER BY v0.c0, ((LOWER(DISTINCT 'D]2kvN^|	'))+(((v0.c2) BETWEEN (0.5287990337841547) AND (v0.c0)))) DESC  NULLS LAST;
SELECT * FROM v0, vt0 WHERE ((((('-265240606'))=((v0.c1))) IN (CASE v0.c1  WHEN NULL THEN v0.c1 WHEN v0.c1 THEN v0.c0 WHEN '526554451' THEN '0.024244574675355457' ELSE vt0.c0 END))) ORDER BY v0.c0, ((LOWER(DISTINCT 'D]2kvN^|	'))+(((v0.c2) BETWEEN (0.5287990337841547) AND (v0.c0)))) DESC  NULLS LAST;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0)LIKE(NULL)) IN ())) ORDER BY ((vt0.c0 COLLATE NOCASE)&('-1579252246' COLLATE BINARY)) DESC  NULLS LAST, rtreenode(((vt0.c0) IS TRUE), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' END)  NULLS FIRST, (((vt0.c0, vt0.c0)) NOT BETWEEN ((CASE vt0.c0  WHEN vt0.c0 THEN -937369626 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, (+ (vt0.c0)))) AND ((((vt0.c0)AND(vt0.c0)), ((vt0.c0)=(vt0.c0)))))  NULLS FIRST, (((vt0.c0 IN (vt0.c0)))AND(((vt0.c0)<>(vt0.c0))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c0)LIKE(NULL)) IN ()))AND((~ ((+ (vt0.c0))))))) ORDER BY (~ (vt0.c0)) DESC INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0)) BETWEEN (((- (vt0.c0)))) AND (((vt0.c0 IN (vt0.c0)))))) ORDER BY (~ (vt0.c0)) DESC;
SELECT ALL * FROM v0 NATURAL JOIN vt2 WHERE (CAST(((v0.c0)&(v0.c1)) AS INTEGER)) ORDER BY LIKELY(DISTINCT ((vt2.c0) BETWEEN (v0.c0) AND (v0.c2))) ASC, CASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN vt2.c1 THEN v0.c0 ELSE vt2.c0 END THEN v0.c2 COLLATE BINARY END DESC  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt2 WHERE (((CAST(((v0.c0)&(v0.c1)) AS INTEGER))AND(((v0.c0 COLLATE NOCASE)||((((vt2.c1, vt2.c0, v0.c1))>=((v0.c1, vt2.c0, 'wo峂t8 |')))))))) ORDER BY LIKELY(DISTINCT ((vt2.c0) BETWEEN (v0.c0) AND (v0.c2))) ASC, CASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN vt2.c1 THEN v0.c0 ELSE vt2.c0 END THEN v0.c2 COLLATE BINARY END DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM v0 NATURAL JOIN vt2 WHERE (CAST(((v0.c0)&(v0.c1)) AS INTEGER)) ORDER BY LIKELY(DISTINCT ((vt2.c0) BETWEEN (v0.c0) AND (v0.c2))) ASC, CASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN vt2.c1 THEN v0.c0 ELSE vt2.c0 END THEN v0.c2 COLLATE BINARY END DESC  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt2 WHERE (((CAST(((v0.c0)&(v0.c1)) AS INTEGER))AND(((v0.c0 COLLATE NOCASE)||((((vt2.c1, vt2.c0, v0.c1))>=((v0.c1, vt2.c0, 'wo峂t8 |')))))))) ORDER BY LIKELY(DISTINCT ((vt2.c0) BETWEEN (v0.c0) AND (v0.c2))) ASC, CASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN vt2.c1 THEN v0.c0 ELSE vt2.c0 END THEN v0.c2 COLLATE BINARY END DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL MIN(vt2.c1) FROM vt2, vt0, v0 WHERE ((((v0.c3 IN ())) ISNULL)) ORDER BY (NULLIF(v0.c3, vt2.c0) IN (((v0.c2) ISNULL))) ASC  NULLS FIRST, (((vt0.c0)) BETWEEN (((x'45' IN (v0.c2)))) AND ((((v0.c0) NOT NULL))));
SELECT MIN(vt2.c1) FROM vt2, vt0, v0 WHERE ((((v0.c3 IN ())) ISNULL)) ORDER BY (NULLIF(v0.c3, vt2.c0) IN (((v0.c2) ISNULL))) ASC  NULLS FIRST, (((vt0.c0)) BETWEEN (((x'45' IN (v0.c2)))) AND ((((v0.c0) NOT NULL)))) INTERSECT SELECT MIN(vt2.c1) FROM vt2, vt0, v0 WHERE (((vt0.c0)LIKE(v0.c2)) COLLATE BINARY) ORDER BY (NULLIF(v0.c3, vt2.c0) IN (((v0.c2) ISNULL))) ASC  NULLS FIRST, (((vt0.c0)) BETWEEN (((x'45' IN (v0.c2)))) AND ((((v0.c0) NOT NULL))));
SELECT ALL * FROM vt2, vt0, v0 WHERE (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) COLLATE BINARY);
SELECT * FROM vt2, vt0, v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) COLLATE BINARY)AND(((vt0.c0 COLLATE NOCASE) ISNULL)))) ORDER BY CASE x'e4'  WHEN SQLITE_VERSION() THEN ((v0.c3) BETWEEN (v0.c0) AND (v0.c2)) END  NULLS FIRST, (((CASE v0.c1  WHEN vt0.c0 THEN vt2.c0 ELSE vt0.c0 END, ((((v0.c1)OR(v0.c0)))OR(v0.c3)), LIKELIHOOD(vt0.c0, v0.c2)))!=(((NOT (vt2.c0)), (((v0.c1, vt0.c0, v0.c0, v0.c3)) BETWEEN ((x'', vt2.c0, v0.c2, v0.c1)) AND ((v0.c2, vt0.c0, vt2.c1, vt2.c1))), NULLIF(v0.c0, v0.c3)))) DESC LIMIT 2 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE ((((v0.c1)) BETWEEN ((v0.c1)) AND (((((v0.c0, v0.c2, v0.c0, v0.c1, v0.c2)) BETWEEN ((x'be', vt0.c0, vt0.c0, vt2.c0, v0.c2)) AND ((vt2.c1, v0.c1, vt2.c1, v0.c0, vt2.c0))))))) ORDER BY CASE x'e4'  WHEN SQLITE_VERSION() THEN ((v0.c3) BETWEEN (v0.c0) AND (v0.c2)) END  NULLS FIRST, (((CASE v0.c1  WHEN vt0.c0 THEN vt2.c0 ELSE vt0.c0 END, ((((v0.c1)OR(v0.c0)))OR(v0.c3)), LIKELIHOOD(vt0.c0, v0.c2)))<>(((NOT (vt2.c0)), (((v0.c1, vt0.c0, v0.c0, v0.c3)) BETWEEN ((x'', vt2.c0, v0.c2, v0.c1)) AND ((v0.c2, vt0.c0, vt2.c1, vt2.c1))), NULLIF(v0.c0, v0.c3)))) DESC LIMIT 0X2;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) COLLATE BINARY);
SELECT * FROM vt2, vt0, v0 WHERE (((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c2)) COLLATE BINARY)AND(((vt0.c0 COLLATE NOCASE) ISNULL)))) ORDER BY CASE x'e4'  WHEN SQLITE_VERSION() THEN ((v0.c3) BETWEEN (v0.c0) AND (v0.c2)) END  NULLS FIRST, (((CASE v0.c1  WHEN vt0.c0 THEN vt2.c0 ELSE vt0.c0 END, ((((v0.c1)OR(v0.c0)))OR(v0.c3)), LIKELIHOOD(vt0.c0, v0.c2)))!=(((NOT (vt2.c0)), (((v0.c1, vt0.c0, v0.c0, v0.c3)) BETWEEN ((x'', vt2.c0, v0.c2, v0.c1)) AND ((v0.c2, vt0.c0, vt2.c1, vt2.c1))), NULLIF(v0.c0, v0.c3)))) DESC LIMIT 2 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE ((((v0.c1)) BETWEEN ((v0.c1)) AND (((((v0.c0, v0.c2, v0.c0, v0.c1, v0.c2)) BETWEEN ((x'be', vt0.c0, vt0.c0, vt2.c0, v0.c2)) AND ((vt2.c1, v0.c1, vt2.c1, v0.c0, vt2.c0))))))) ORDER BY CASE x'e4'  WHEN SQLITE_VERSION() THEN ((v0.c3) BETWEEN (v0.c0) AND (v0.c2)) END  NULLS FIRST, (((CASE v0.c1  WHEN vt0.c0 THEN vt2.c0 ELSE vt0.c0 END, ((((v0.c1)OR(v0.c0)))OR(v0.c3)), LIKELIHOOD(vt0.c0, v0.c2)))<>(((NOT (vt2.c0)), (((v0.c1, vt0.c0, v0.c0, v0.c3)) BETWEEN ((x'', vt2.c0, v0.c2, v0.c1)) AND ((v0.c2, vt0.c0, vt2.c1, vt2.c1))), NULLIF(v0.c0, v0.c3)))) DESC LIMIT 0X2;
SELECT ALL COUNT(*) FROM v0 WHERE ((((v0.c2 IN (v0.c1, v0.c2))) NOT NULL)) ORDER BY (v0.c2 COLLATE RTRIM IN (((v0.c1) IS FALSE))) DESC;
SELECT ALL COUNT(*) FROM v0 WHERE ((((v0.c2 IN (v0.c1, v0.c2))) NOT NULL)) ORDER BY (v0.c2 COLLATE RTRIM IN (((v0.c1) IS FALSE))) DESC;
SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE (((STRFTIME('᩾g)ki#㬰-]', vt2.c1, vt0.c0, vt2.c1)) BETWEEN ((((vt2.c0, '267721342', vt2.c0))>=((vt2.c1, 0.27638570023133135, vt0.c0)))) AND (CAST(vt2.c0 AS TEXT)))) ORDER BY ((vt2.c0 COLLATE BINARY)>=(LIKELY(vt2.c0))) DESC  NULLS FIRST, ((((vt0.c0) NOTNULL))>=(((vt0.c0) NOTNULL))) ASC;
SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE (((((STRFTIME('᩾g)ki#㬰-]', vt2.c1, vt0.c0, vt2.c1)) BETWEEN ((((vt2.c0, '267721342', vt2.c0))>=((vt2.c1, 0.27638570023133135, vt0.c0)))) AND (CAST(vt2.c0 AS TEXT))))AND(((((((vt2.c1)GLOB(vt2.c1)))OR(x'')))AND(((vt2.c1) IS FALSE)))))) ORDER BY ((((((((vt2.c1 COLLATE BINARY)AND((~ (vt0.c0)))))AND(ABS(vt2.c1))))OR(((vt2.c0)LIKE(vt0.c0)))))AND(((vt2.c1)>(vt2.c0))))  NULLS FIRST, '-1444834624' DESC, (((vt2.c1)) BETWEEN ((((((vt2.c1)OR(vt0.c0)))OR(vt2.c0)))) AND ((0.0543887788143943))) ASC  NULLS LAST INTERSECT SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE ((((vt0.c0 IN ()))>=(vt2.c0 COLLATE BINARY))) ORDER BY ((((((((vt2.c1 COLLATE BINARY)AND((~ (vt0.c0)))))AND(ABS(vt2.c1))))OR(((vt2.c0)LIKE(vt0.c0)))))AND(((vt2.c1)>(vt2.c0))))  NULLS FIRST, '-1444834624' DESC, (((vt2.c1)) BETWEEN ((((((vt2.c1)OR(vt0.c0)))OR(vt2.c0)))) AND ((0.0543887788143943))) ASC  NULLS LAST;
SELECT * FROM vt2 WHERE ((vt2.c1 IN (UPPER(DISTINCT vt2.c0))));
SELECT DISTINCT * FROM vt2 WHERE ((vt2.c1 IN (UPPER(DISTINCT vt2.c0))));
SELECT * FROM vt2 WHERE ((vt2.c1 IN (UPPER(DISTINCT vt2.c0))));
SELECT DISTINCT * FROM vt2 WHERE ((vt2.c1 IN (UPPER(DISTINCT vt2.c0))));
SELECT ALL COUNT(*) FROM v0, vt0 LEFT OUTER JOIN vt2 ON CAST((v0.c3 IN ()) AS TEXT) WHERE (((vt2.c0) NOT NULL) COLLATE BINARY) ORDER BY ((((((vt0.c0)AND(v0.c0)))AND(v0.c1)))>>(((((vt0.c0)OR(x'')))OR(vt0.c0)))) ASC  NULLS LAST, '#/';
SELECT COUNT(*) FROM v0, vt0 LEFT OUTER JOIN vt2 ON CAST((v0.c3 IN ()) AS TEXT) WHERE (((((vt2.c0) NOT NULL) COLLATE BINARY)AND(v0.c1))) ORDER BY ((((((((v0.c1) ISNULL))AND(CAST(vt0.c0 AS TEXT))))AND((((v0.c3, v0.c2))<=((vt0.c0, v0.c3))))))OR(UNLIKELY(v0.c3)))  NULLS LAST, (((((vt0.c0) IS TRUE), (+ (v0.c0))))<=((v0.c0, IFNULL(v0.c2, v0.c3))))  NULLS FIRST LIMIT 1;
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE (json_type(vt2.c0));
SELECT DISTINCT COUNT(*) FROM vt0, vt2 WHERE (json_type(vt2.c0)) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2 WHERE (x'');
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE ((~ ((+ (vt2.c0)))));
SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE ((~ ((+ (vt2.c0))))) LIMIT 1;
SELECT ALL * FROM v0 WHERE (x'44' COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (x'44' COLLATE RTRIM) ORDER BY ((((v0.c0)-(v0.c1)))<>(v0.c3))  NULLS FIRST, (x'' IN ()) ASC, (~ (v0.c3)) COLLATE RTRIM ASC LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE ('컝+X') ORDER BY ((((v0.c0)-(v0.c1)))<>(v0.c3))  NULLS FIRST, (x'' IN ()) ASC, (~ (v0.c3)) COLLATE RTRIM ASC LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (x'44' COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (x'44' COLLATE RTRIM) ORDER BY ((((v0.c0)-(v0.c1)))<>(v0.c3))  NULLS FIRST, (x'' IN ()) ASC, (~ (v0.c3)) COLLATE RTRIM ASC LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0 WHERE ('컝+X') ORDER BY ((((v0.c0)-(v0.c1)))<>(v0.c3))  NULLS FIRST, (x'' IN ()) ASC, (~ (v0.c3)) COLLATE RTRIM ASC LIMIT 0x1;
SELECT ALL COUNT(*) FROM vt2 WHERE (CAST(((vt2.c0) IS TRUE) AS BLOB));
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (CAST(((vt2.c0) IS TRUE) AS BLOB));
SELECT ALL * FROM vt0, v0 WHERE ((v0.c1 IN ('')) COLLATE RTRIM);
SELECT DISTINCT * FROM vt0, v0 WHERE ((((v0.c1 IN ('')) COLLATE RTRIM)AND(v0.c3)));
SELECT ALL * FROM vt0, v0 WHERE ((v0.c1 IN ('')) COLLATE RTRIM);
SELECT DISTINCT * FROM vt0, v0 WHERE ((((v0.c1 IN ('')) COLLATE RTRIM)AND(v0.c3)));
SELECT ALL * FROM v0 WHERE ((NOT ((v0.c3 IN (v0.c1))))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c2)) AS TEXT);
SELECT DISTINCT * FROM v0 WHERE ((((NOT ((v0.c3 IN (v0.c1)))))AND(((((((v0.c1)>=(v0.c0)))AND(((v0.c3)IS(v0.c3)))))AND(((v0.c1) ISNULL)))))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c2)) AS TEXT) INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))<>(((v0.c1) ISNULL)))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c2)) AS TEXT);
SELECT ALL * FROM v0 WHERE ((NOT ((v0.c3 IN (v0.c1))))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c2)) AS TEXT);
SELECT DISTINCT * FROM v0 WHERE ((((NOT ((v0.c3 IN (v0.c1)))))AND(((((((v0.c1)>=(v0.c0)))AND(((v0.c3)IS(v0.c3)))))AND(((v0.c1) ISNULL)))))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c2)) AS TEXT) INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c1) BETWEEN (v0.c3) AND (v0.c1)))<>(((v0.c1) ISNULL)))) ORDER BY CAST(((v0.c0) BETWEEN (v0.c3) AND (v0.c2)) AS TEXT);
SELECT ALL MIN(v0.c0) FROM vt2, v0, vt0 WHERE ((((vt2.c0)) BETWEEN (((NULL IN (v0.c0)))) AND (((NOT (v0.c2))))));
SELECT DISTINCT MIN(v0.c0) FROM vt2, v0, vt0 WHERE ((((vt2.c0)) BETWEEN (((NULL IN (v0.c0)))) AND (((NOT (v0.c2)))))) ORDER BY UNICODE((+ (v0.c0)))  NULLS FIRST;
SELECT ALL * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON NULL WHERE (((((((((((((((CASE WHEN v0.c0 THEN v0.c3 END)AND(v0.c1 COLLATE NOCASE)))AND(((v0.c1)<<(v0.c0)))))OR(CAST(vt2.c1 AS TEXT))))AND((- (v0.c1)))))OR(v0.c2)))OR((~ (v0.c1)))))AND(0.6735266725694862))) ORDER BY GLOB(vt2.c1 COLLATE NOCASE, CASE v0.c0  WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN vt0.c0 ELSE v0.c0 END), (+ (ABS(DISTINCT vt2.c0)));
SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON NULL WHERE (((((((((((((((((CASE WHEN v0.c0 THEN v0.c3 END)AND(v0.c1 COLLATE NOCASE)))AND(((v0.c1)<<(v0.c0)))))OR(CAST(vt2.c1 AS TEXT))))AND((- (v0.c1)))))OR(v0.c2)))OR((~ (v0.c1)))))AND(0.6735266725694862)))AND(((((vt2.c1)OR(vt2.c1 COLLATE NOCASE)))OR(LOWER(1749410417)))))) ORDER BY GLOB(vt2.c1 COLLATE NOCASE, CASE v0.c0  WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN vt0.c0 ELSE v0.c0 END), (+ (ABS(DISTINCT vt2.c0)));
SELECT ALL * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON NULL WHERE (((((((((((((((CASE WHEN v0.c0 THEN v0.c3 END)AND(v0.c1 COLLATE NOCASE)))AND(((v0.c1)<<(v0.c0)))))OR(CAST(vt2.c1 AS TEXT))))AND((- (v0.c1)))))OR(v0.c2)))OR((~ (v0.c1)))))AND(0.6735266725694862))) ORDER BY GLOB(vt2.c1 COLLATE NOCASE, CASE v0.c0  WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN vt0.c0 ELSE v0.c0 END), (+ (ABS(DISTINCT vt2.c0)));
SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON NULL WHERE (((((((((((((((((CASE WHEN v0.c0 THEN v0.c3 END)AND(v0.c1 COLLATE NOCASE)))AND(((v0.c1)<<(v0.c0)))))OR(CAST(vt2.c1 AS TEXT))))AND((- (v0.c1)))))OR(v0.c2)))OR((~ (v0.c1)))))AND(0.6735266725694862)))AND(((((vt2.c1)OR(vt2.c1 COLLATE NOCASE)))OR(LOWER(1749410417)))))) ORDER BY GLOB(vt2.c1 COLLATE NOCASE, CASE v0.c0  WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN vt0.c0 ELSE v0.c0 END), (+ (ABS(DISTINCT vt2.c0)));
SELECT ALL MIN(v0.c2) FROM vt0, v0 NOT INDEXED WHERE (((((x'7b') IS TRUE)) BETWEEN ((vt0.c0 IN (vt0.c0))) AND (((NULL) NOT NULL)))) ORDER BY ((v0.c3) NOT NULL) ASC  NULLS FIRST, TRIM(v0.c2) ASC, v0.c2 COLLATE BINARY  NULLS FIRST;
SELECT ALL MIN(v0.c2) FROM vt0, v0 WHERE (((((((x'7b') IS TRUE)) BETWEEN ((vt0.c0 IN (vt0.c0))) AND (((NULL) NOT NULL))))AND((((CASE vt0.c0  WHEN vt0.c0 THEN '1284633581' WHEN vt0.c0 THEN vt0.c0 WHEN v0.c3 THEN v0.c2 END, v0.c1 COLLATE NOCASE, ((v0.c3) IS FALSE), ((v0.c2)IS NOT(v0.c1))))<((v0.c3 COLLATE NOCASE, CAST(v0.c1 AS BLOB), v0.c2 COLLATE BINARY, CASE v0.c1  WHEN v0.c2 THEN vt0.c0 ELSE v0.c2 END)))))) ORDER BY CAST(LIKE(vt0.c0, v0.c2, '0') AS BLOB) DESC;
SELECT ALL MIN(v0.c0) FROM v0, vt2 WHERE ((((~ (vt2.c0)))OR(COALESCE(vt2.c1, v0.c3)))) ORDER BY (+ ((vt2.c1 IN (v0.c2)))) ASC  NULLS LAST;
SELECT DISTINCT MIN(v0.c0) FROM v0, vt2 WHERE ((((((~ (vt2.c0)))OR(COALESCE(vt2.c1, v0.c3))))AND((((v0.c3, v0.c3, v0.c3)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c2) AND (v0.c2)), ((v0.c1)LIKE(vt2.c1)), v0.c3)) AND ((((vt2.c0) BETWEEN (NULL) AND (v0.c3)), CAST(vt2.c1 AS BLOB), ((vt2.c1)|(v0.c3)))))))) ORDER BY (+ ((vt2.c1 IN (v0.c2)))) ASC  NULLS LAST LIMIT 0x0;
SELECT COUNT(*) FROM vt0 WHERE (((((vt0.c0) ISNULL)) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (LIKELY(vt0.c0))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((vt0.c0) ISNULL)) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (LIKELY(vt0.c0)))) LIMIT 0x0;
SELECT ALL * FROM vt2, v0 WHERE ((((v0.c3, vt2.c1)) NOT BETWEEN ((((0.05315938143585286) ISNULL), CAST(0.7051132046982554 AS TEXT))) AND (((v0.c3 IN (vt2.c0, vt2.c1, v0.c0)), NULL)))) ORDER BY (((~ (v0.c2))) NOT BETWEEN (json(v0.c2)) AND ((- (v0.c1)))) DESC;
SELECT * FROM vt2, v0 WHERE ((((v0.c3, vt2.c1)) NOT BETWEEN ((((0.05315938143585286) ISNULL), CAST(0.7051132046982554 AS TEXT))) AND (((v0.c3 IN (vt2.c0, vt2.c1, v0.c0)), NULL)))) ORDER BY (((~ (v0.c2))) NOT BETWEEN (json(v0.c2)) AND ((- (v0.c1)))) DESC LIMIT 2 INTERSECT SELECT ALL * FROM vt2, v0 WHERE (266901173) ORDER BY (((~ (v0.c2))) NOT BETWEEN (json(v0.c2)) AND ((- (v0.c1)))) DESC LIMIT 0x2;
SELECT ALL * FROM vt2, v0 WHERE ((((v0.c3, vt2.c1)) NOT BETWEEN ((((0.05315938143585286) ISNULL), CAST(0.7051132046982554 AS TEXT))) AND (((v0.c3 IN (vt2.c0, vt2.c1, v0.c0)), NULL)))) ORDER BY (((~ (v0.c2))) NOT BETWEEN (json(v0.c2)) AND ((- (v0.c1)))) DESC;
SELECT * FROM vt2, v0 WHERE ((((v0.c3, vt2.c1)) NOT BETWEEN ((((0.05315938143585286) ISNULL), CAST(0.7051132046982554 AS TEXT))) AND (((v0.c3 IN (vt2.c0, vt2.c1, v0.c0)), NULL)))) ORDER BY (((~ (v0.c2))) NOT BETWEEN (json(v0.c2)) AND ((- (v0.c1)))) DESC LIMIT 2 INTERSECT SELECT ALL * FROM vt2, v0 WHERE (266901173) ORDER BY (((~ (v0.c2))) NOT BETWEEN (json(v0.c2)) AND ((- (v0.c1)))) DESC LIMIT 0x2;
SELECT COUNT(*) FROM vt0 WHERE (((((vt0.c0)<(vt0.c0)))GLOB((NOT (NULL))))) ORDER BY (+ (vt0.c0)) COLLATE NOCASE;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0)<(vt0.c0)))GLOB((NOT (NULL))))) ORDER BY (+ (vt0.c0)) COLLATE NOCASE LIMIT 0;
SELECT MIN(v0.c2) FROM vt2, vt0, v0 WHERE (((((0.5069701815140484) NOT NULL))IS(((v0.c1)AND(vt2.c0)))));
SELECT ALL MIN(v0.c2) FROM vt2, vt0, v0 WHERE (((((0.5069701815140484) NOT NULL))IS(((v0.c1)AND(vt2.c0))))) ORDER BY (('	')LIKE(CASE vt2.c0  WHEN v0.c3 THEN '-580686248' WHEN vt2.c1 THEN v0.c2 ELSE v0.c1 END)) LIMIT 1 INTERSECT SELECT MIN(v0.c2) FROM vt2, vt0, v0 WHERE ('2008339166') ORDER BY (('	')LIKE(CASE vt2.c0  WHEN v0.c3 THEN '-580686248' WHEN vt2.c1 THEN v0.c2 ELSE v0.c1 END)) LIMIT 1;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((CAST(vt0.c0 AS NUMERIC), ((((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))AND(x'')))OR(vt0.c0)))OR(vt0.c0)), vt0.c0))>((((NULL)*(vt0.c0)), (+ (vt0.c0)), ((vt0.c0) NOTNULL))))) ORDER BY ((CAST(vt0.c0 AS BLOB)) NOTNULL) ASC, ((((((((((((((((((((-157240298)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(x'80')))OR(((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))))AND((((vt0.c0, vt0.c0, vt0.c0))=((vt0.c0, NULL, vt0.c0))))))OR(((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.5298450908584725)))))OR((((vt0.c0, vt0.c0)) BETWEEN (('?WkP
HD', vt0.c0)) AND ((vt0.c0, vt0.c0))))) ASC  NULLS FIRST, (((+ (vt0.c0)))IS NOT(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN -3.87031235E8 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN NULL THEN vt0.c0 END))  NULLS LAST;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((CAST(vt0.c0 AS NUMERIC), ((((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))AND(x'')))OR(vt0.c0)))OR(vt0.c0)), vt0.c0))>((((NULL)*(vt0.c0)), (+ (vt0.c0)), ((vt0.c0) NOTNULL))))) ORDER BY ((IFNULL(vt0.c0, vt0.c0))AND(vt0.c0 COLLATE BINARY)) ASC  NULLS FIRST, ((vt0.c0) NOT NULL) COLLATE BINARY DESC, ((vt0.c0) NOT NULL) COLLATE NOCASE INTERSECT SELECT MAX(vt0.c0) FROM vt0 NOT INDEXED WHERE ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) IN ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))=((vt0.c0, vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY ((IFNULL(vt0.c0, vt0.c0))AND(vt0.c0 COLLATE BINARY)) ASC  NULLS FIRST, ((vt0.c0) NOT NULL) COLLATE BINARY DESC, ((vt0.c0) NOT NULL) COLLATE NOCASE;
SELECT * FROM vt2, v0 WHERE (9.8818379E7) ORDER BY 0.6112162513776831;
SELECT DISTINCT * FROM vt2, v0 WHERE (((9.8818379E7)AND(((((((((((CAST(v0.c2 AS INTEGER))AND(vt2.c0)))OR(v0.c2 COLLATE NOCASE)))OR(((vt2.c0)/(vt2.c0)))))AND(CASE vt2.c1  WHEN v0.c0 THEN vt2.c1 ELSE v0.c3 END)))OR(v0.c3 COLLATE NOCASE))))) ORDER BY 0.6112162513776831 LIMIT 4;
SELECT * FROM vt2, v0 WHERE (9.8818379E7) ORDER BY 0.6112162513776831;
SELECT DISTINCT * FROM vt2, v0 WHERE (((9.8818379E7)AND(((((((((((CAST(v0.c2 AS INTEGER))AND(vt2.c0)))OR(v0.c2 COLLATE NOCASE)))OR(((vt2.c0)/(vt2.c0)))))AND(CASE vt2.c1  WHEN v0.c0 THEN vt2.c1 ELSE v0.c3 END)))OR(v0.c3 COLLATE NOCASE))))) ORDER BY 0.6112162513776831 LIMIT 4;
SELECT MAX(vt2.c0) FROM vt0 INNER JOIN v0 ON (((((v0.c3)AND(v0.c2)))AND(v0.c0)) IN ()) NATURAL JOIN vt2 WHERE ((+ (((((((((vt2.c1)OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c0)))OR(x'2f'))))) ORDER BY UNLIKELY(DISTINCT ((vt0.c0) IS TRUE)) DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt2.c0) FROM vt0 INNER JOIN v0 ON (((((v0.c3)AND(v0.c2)))AND(v0.c0)) IN ()) NATURAL JOIN vt2 WHERE ((+ (((((((((vt2.c1)OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c0)))OR(x'2f'))))) ORDER BY UNLIKELY(DISTINCT ((vt0.c0) IS TRUE)) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM vt0 INNER JOIN v0 ON (((((v0.c3)AND(v0.c2)))AND(v0.c0)) IN ()) NATURAL JOIN vt2 WHERE (CAST(CASE WHEN vt0.c0 THEN vt0.c0 ELSE v0.c3 END AS NUMERIC)) ORDER BY UNLIKELY(DISTINCT ((vt0.c0) IS TRUE)) DESC  NULLS FIRST LIMIT 0;
SELECT COUNT(*) FROM vt2 WHERE (((((((vt2.c0)AND(((vt2.c0) NOT BETWEEN (0.6015802904256462) AND (vt2.c1)))))OR(CAST(vt2.c0 AS TEXT))))OR(((vt2.c0) BETWEEN (NULL) AND (vt2.c0)))));
SELECT COUNT(*) FROM vt2 WHERE (((((((vt2.c0)AND(((vt2.c0) NOT BETWEEN (0.6015802904256462) AND (vt2.c1)))))OR(CAST(vt2.c0 AS TEXT))))OR(((vt2.c0) BETWEEN (NULL) AND (vt2.c0))))) ORDER BY 435120308, NULL  NULLS LAST, ((((vt2.c1)!=(vt2.c1))) BETWEEN (((vt2.c0) NOTNULL)) AND ((~ (vt2.c0)))) DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT COUNT(*) FROM vt2 WHERE ('{' COLLATE RTRIM) ORDER BY 0X19ef68b4, NULL  NULLS LAST, ((((vt2.c1)<>(vt2.c1))) BETWEEN (((vt2.c0) NOTNULL)) AND ((~ (vt2.c0)))) DESC  NULLS LAST LIMIT 0X0;
SELECT * FROM v0 LEFT OUTER JOIN vt2 ON ((((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))) IS TRUE) WHERE ((((((v0.c2) NOT NULL), ((v0.c0)==(v0.c0))))>((((vt2.c1)<(vt2.c1)), ((((v0.c1)OR(vt2.c1)))OR(v0.c0)))))) ORDER BY (((((((v0.c3)OR(vt2.c1)))AND(vt2.c0)))OR(v0.c1)) IN (IFNULL(vt2.c1, v0.c3), ((v0.c0)||(vt2.c0)), vt2.c1 COLLATE BINARY)) ASC  NULLS LAST;
SELECT ALL * FROM v0 INNER JOIN vt2 ON ((((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))) IS TRUE) WHERE ((((((((v0.c2) NOT NULL), ((v0.c0)=(v0.c0))))>((((vt2.c1)<(vt2.c1)), ((((v0.c1)OR(vt2.c1)))OR(v0.c0))))))AND(CASE (v0.c2 IN (vt2.c0))  WHEN (((v0.c1, vt2.c1, v0.c1, NULL, v0.c1)) BETWEEN ((vt2.c0, v0.c3, v0.c0, v0.c0, v0.c1)) AND ((vt2.c0, v0.c3, v0.c0, v0.c0, vt2.c1))) THEN ((v0.c2) NOT NULL) WHEN (((vt2.c1, v0.c1))=((v0.c0, v0.c1))) THEN v0.c1 WHEN (+ (v0.c2)) THEN CAST(vt2.c0 AS TEXT) WHEN (+ (vt2.c1)) THEN (v0.c2 IN (v0.c3)) END))) ORDER BY (+ (((((((((((v0.c3)AND(v0.c3)))OR(vt2.c0)))OR(v0.c3)))OR(v0.c3)))AND(v0.c2)))) ASC, ((((v0.c0)AND(v0.c1)))AND(vt2.c0)) COLLATE RTRIM INTERSECT SELECT ALL * FROM v0 INNER JOIN vt2 ON ((((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))) IS TRUE) WHERE (vt2.c1) ORDER BY (+ (((((((((((v0.c3)AND(v0.c3)))OR(vt2.c0)))OR(v0.c3)))OR(v0.c3)))AND(v0.c2)))) ASC, ((((v0.c0)AND(v0.c1)))AND(vt2.c0)) COLLATE RTRIM;
SELECT * FROM v0 LEFT OUTER JOIN vt2 ON ((((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))) IS TRUE) WHERE ((((((v0.c2) NOT NULL), ((v0.c0)==(v0.c0))))>((((vt2.c1)<(vt2.c1)), ((((v0.c1)OR(vt2.c1)))OR(v0.c0)))))) ORDER BY (((((((v0.c3)OR(vt2.c1)))AND(vt2.c0)))OR(v0.c1)) IN (IFNULL(vt2.c1, v0.c3), ((v0.c0)||(vt2.c0)), vt2.c1 COLLATE BINARY)) ASC  NULLS LAST;
SELECT ALL * FROM v0 INNER JOIN vt2 ON ((((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))) IS TRUE) WHERE ((((((((v0.c2) NOT NULL), ((v0.c0)=(v0.c0))))>((((vt2.c1)<(vt2.c1)), ((((v0.c1)OR(vt2.c1)))OR(v0.c0))))))AND(CASE (v0.c2 IN (vt2.c0))  WHEN (((v0.c1, vt2.c1, v0.c1, NULL, v0.c1)) BETWEEN ((vt2.c0, v0.c3, v0.c0, v0.c0, v0.c1)) AND ((vt2.c0, v0.c3, v0.c0, v0.c0, vt2.c1))) THEN ((v0.c2) NOT NULL) WHEN (((vt2.c1, v0.c1))=((v0.c0, v0.c1))) THEN v0.c1 WHEN (+ (v0.c2)) THEN CAST(vt2.c0 AS TEXT) WHEN (+ (vt2.c1)) THEN (v0.c2 IN (v0.c3)) END))) ORDER BY (+ (((((((((((v0.c3)AND(v0.c3)))OR(vt2.c0)))OR(v0.c3)))OR(v0.c3)))AND(v0.c2)))) ASC, ((((v0.c0)AND(v0.c1)))AND(vt2.c0)) COLLATE RTRIM INTERSECT SELECT ALL * FROM v0 INNER JOIN vt2 ON ((((vt2.c0) BETWEEN (v0.c2) AND (v0.c2))) IS TRUE) WHERE (vt2.c1) ORDER BY (+ (((((((((((v0.c3)AND(v0.c3)))OR(vt2.c0)))OR(v0.c3)))OR(v0.c3)))AND(v0.c2)))) ASC, ((((v0.c0)AND(v0.c1)))AND(vt2.c0)) COLLATE RTRIM;
SELECT * FROM v0, vt0, vt2 WHERE (((((vt2.c0) ISNULL))-(CAST(vt2.c0 AS NUMERIC)))) ORDER BY (((vt2.c1, v0.c2)) BETWEEN ((((((((v0.c2)AND(vt0.c0)))OR(vt2.c1)))OR(vt2.c0)), (~ (vt2.c0)))) AND ((CASE WHEN v0.c1 THEN v0.c0 WHEN NULL THEN x'a803' WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c3 END, x''))) DESC  NULLS FIRST, (((0.12705345752025077) BETWEEN (vt0.c0) AND (v0.c1)) IN ())  NULLS FIRST;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((vt2.c0) ISNULL))-(CAST(vt2.c0 AS NUMERIC)))) ORDER BY (~ ((v0.c0 IN ())))  NULLS FIRST, 'ꄬ', ((((((NULL)OR(((NULL) NOTNULL))))OR(((v0.c2)==(vt0.c0)))))AND((((vt2.c0, vt2.c1)) BETWEEN ((v0.c3, vt0.c0)) AND ((vt0.c0, v0.c2))))) ASC;
SELECT * FROM v0, vt0, vt2 WHERE (((((vt2.c0) ISNULL))-(CAST(vt2.c0 AS NUMERIC)))) ORDER BY (((vt2.c1, v0.c2)) BETWEEN ((((((((v0.c2)AND(vt0.c0)))OR(vt2.c1)))OR(vt2.c0)), (~ (vt2.c0)))) AND ((CASE WHEN v0.c1 THEN v0.c0 WHEN NULL THEN x'a803' WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c3 END, x''))) DESC  NULLS FIRST, (((0.12705345752025077) BETWEEN (vt0.c0) AND (v0.c1)) IN ())  NULLS FIRST;
SELECT * FROM vt0 WHERE ((('-1935470654' IN ()) IN ()));
SELECT ALL * FROM vt0 WHERE ((('-1935470654' IN ()) IN ())) ORDER BY (NOT (CAST(vt0.c0 AS TEXT))) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt0 WHERE ((vt0.c0 IN (((vt0.c0)AND(vt0.c0))))) ORDER BY (NOT (CAST(vt0.c0 AS TEXT))) DESC  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE ((('-1935470654' IN ()) IN ()));
SELECT ALL * FROM vt0 WHERE ((('-1935470654' IN ()) IN ())) ORDER BY (NOT (CAST(vt0.c0 AS TEXT))) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt0 WHERE ((vt0.c0 IN (((vt0.c0)AND(vt0.c0))))) ORDER BY (NOT (CAST(vt0.c0 AS TEXT))) DESC  NULLS LAST LIMIT 1;
SELECT * FROM vt2, vt0, v0 WHERE (LIKELIHOOD(v0.c0 COLLATE NOCASE, v0.c3));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (LIKELIHOOD(v0.c0 COLLATE NOCASE, v0.c3)) LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((((v0.c1)>=(vt0.c0))) NOT BETWEEN (((x'') NOT BETWEEN (v0.c2) AND (v0.c3))) AND (CASE WHEN v0.c0 THEN v0.c3 ELSE vt2.c0 END))) LIMIT 2;
SELECT * FROM vt2, vt0, v0 WHERE (LIKELIHOOD(v0.c0 COLLATE NOCASE, v0.c3));
SELECT * FROM vt0 WHERE (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) IS FALSE));
SELECT * FROM vt0 WHERE (((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) IS FALSE))AND((((((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) IN ((vt0.c0 IN ())))))) ORDER BY ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (((vt0.c0)GLOB(vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))  NULLS LAST, vt0.c0 DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (((((((((vt0.c0) NOT NULL))OR(((vt0.c0) IS FALSE))))OR(SQLITE_VERSION())))AND(LAST_INSERT_ROWID()))) ORDER BY ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (((vt0.c0)GLOB(vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))  NULLS LAST, vt0.c0 DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) IS FALSE));
SELECT * FROM vt0 WHERE (((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) IS FALSE))AND((((((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) IN ((vt0.c0 IN ())))))) ORDER BY ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (((vt0.c0)GLOB(vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))  NULLS LAST, vt0.c0 DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (((((((((vt0.c0) NOT NULL))OR(((vt0.c0) IS FALSE))))OR(SQLITE_VERSION())))AND(LAST_INSERT_ROWID()))) ORDER BY ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (((vt0.c0)GLOB(vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))  NULLS LAST, vt0.c0 DESC  NULLS LAST;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON (~ (((v0.c0)/(vt2.c0)))) WHERE (((CASE WHEN 0.5683105716680067 THEN '-1165434253' WHEN v0.c2 THEN v0.c1 ELSE vt2.c1 END) BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c1)=(v0.c2))))) ORDER BY ((((((((((CAST(vt2.c1 AS TEXT))OR(((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c1)))))AND(0.39469908384747054)))OR('')))OR((NOT (vt2.c0)))))AND(((vt2.c1) NOTNULL))) ASC, ((((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1)))/((v0.c0 IN (v0.c3, 0Xffffffffbea5dd98)))) ASC;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON (~ (((v0.c0)/(vt2.c0)))) WHERE (((((CASE WHEN 0.5683105716680067 THEN '-1165434253' WHEN v0.c2 THEN v0.c1 ELSE vt2.c1 END) BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c1)=(v0.c2)))))AND(((MAX(v0.c2, v0.c2)) NOTNULL)))) ORDER BY vt0.c0, (((((vt2.c0))=((v0.c1))))GLOB((vt0.c0 IN (0.395272058436425)))) DESC INTERSECT SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON (~ (((v0.c0)/(vt2.c0)))) WHERE ((NOT (((v0.c1)<<(v0.c3))))) ORDER BY vt0.c0, (((((vt2.c0))==((v0.c1))))GLOB((vt0.c0 IN (0.395272058436425)))) DESC;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON (~ (((v0.c0)/(vt2.c0)))) WHERE (((CASE WHEN 0.5683105716680067 THEN '-1165434253' WHEN v0.c2 THEN v0.c1 ELSE vt2.c1 END) BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c1)=(v0.c2))))) ORDER BY ((((((((((CAST(vt2.c1 AS TEXT))OR(((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c1)))))AND(0.39469908384747054)))OR('')))OR((NOT (vt2.c0)))))AND(((vt2.c1) NOTNULL))) ASC, ((((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1)))/((v0.c0 IN (v0.c3, 0Xffffffffbea5dd98)))) ASC;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON (~ (((v0.c0)/(vt2.c0)))) WHERE (((((CASE WHEN 0.5683105716680067 THEN '-1165434253' WHEN v0.c2 THEN v0.c1 ELSE vt2.c1 END) BETWEEN (v0.c1 COLLATE RTRIM) AND (((v0.c1)=(v0.c2)))))AND(((MAX(v0.c2, v0.c2)) NOTNULL)))) ORDER BY vt0.c0, (((((vt2.c0))=((v0.c1))))GLOB((vt0.c0 IN (0.395272058436425)))) DESC INTERSECT SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON (~ (((v0.c0)/(vt2.c0)))) WHERE ((NOT (((v0.c1)<<(v0.c3))))) ORDER BY vt0.c0, (((((vt2.c0))==((v0.c1))))GLOB((vt0.c0 IN (0.395272058436425)))) DESC;
SELECT * FROM vt0, vt2, v0 WHERE (((((vt2.c0)OR(vt0.c0)))OR(v0.c3)) COLLATE NOCASE);
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((vt2.c0)OR(vt0.c0)))OR(v0.c3)) COLLATE NOCASE) LIMIT 4 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((((x'f3'))==((CAST(v0.c3 AS TEXT))))) LIMIT 4;
SELECT * FROM vt0, vt2, v0 WHERE (((((vt2.c0)OR(vt0.c0)))OR(v0.c3)) COLLATE NOCASE);
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((vt2.c0)OR(vt0.c0)))OR(v0.c3)) COLLATE NOCASE) LIMIT 4 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((((x'f3'))==((CAST(v0.c3 AS TEXT))))) LIMIT 4;
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE ('-1444834624') ORDER BY LIKE(CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END, NULL) DESC, ((vt0.c0) NOT NULL) COLLATE RTRIM DESC;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE ('-1444834624') ORDER BY ((((v0.c3) BETWEEN (v0.c3) AND (v0.c0))) NOT BETWEEN (v0.c2 COLLATE NOCASE) AND (v0.c1))  NULLS LAST;
SELECT * FROM vt2 INNER JOIN vt0 ON CAST(vt2.c0 AS BLOB) COLLATE NOCASE WHERE ((~ (((vt0.c0)>=(vt2.c0)))));
SELECT * FROM vt2 INNER JOIN vt0 ON CAST(vt2.c0 AS BLOB) COLLATE NOCASE WHERE ((((~ (((vt0.c0)=(vt2.c0)))))AND((((x'67' IN ()))||(CAST(vt0.c0 AS REAL)))))) INTERSECT SELECT ALL * FROM vt2 INNER JOIN vt0 ON CAST(vt2.c0 AS BLOB) COLLATE NOCASE WHERE (((vt0.c0) NOTNULL));
SELECT * FROM vt2 INNER JOIN vt0 ON CAST(vt2.c0 AS BLOB) COLLATE NOCASE WHERE ((~ (((vt0.c0)>=(vt2.c0)))));
SELECT * FROM vt2 INNER JOIN vt0 ON CAST(vt2.c0 AS BLOB) COLLATE NOCASE WHERE ((((~ (((vt0.c0)=(vt2.c0)))))AND((((x'67' IN ()))||(CAST(vt0.c0 AS REAL)))))) INTERSECT SELECT ALL * FROM vt2 INNER JOIN vt0 ON CAST(vt2.c0 AS BLOB) COLLATE NOCASE WHERE (((vt0.c0) NOTNULL));
SELECT ALL * FROM v0 WHERE (CASE ((v0.c1)>>(v0.c3))  WHEN ((v0.c3) NOT BETWEEN (NULL) AND (x'50')) THEN (v0.c3 IN (v0.c2, x'')) WHEN v0.c2 THEN 0.300550071656318 WHEN ((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN UNLIKELY(DISTINCT v0.c3) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN ((v0.c3)>(v0.c3)) END);
SELECT ALL * FROM v0 WHERE (((CASE ((v0.c1)>>(v0.c3))  WHEN ((v0.c3) NOT BETWEEN (NULL) AND (x'50')) THEN (v0.c3 IN (v0.c2)) WHEN v0.c2 THEN 0.300550071656318 WHEN ((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN UNLIKELY(DISTINCT v0.c3) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN ((v0.c3)>(v0.c3)) END)AND((CASE WHEN v0.c0 THEN v0.c0 END IN (((v0.c0)<=(v0.c1))))))) ORDER BY CAST((v0.c2 IN ()) AS INTEGER) ASC  NULLS LAST, ((v0.c2)+(((((((((v0.c0)AND(v0.c1)))AND(v0.c0)))AND(v0.c1)))AND(v0.c3)))) DESC;
SELECT ALL * FROM v0 WHERE (CASE ((v0.c1)>>(v0.c3))  WHEN ((v0.c3) NOT BETWEEN (NULL) AND (x'50')) THEN (v0.c3 IN (v0.c2, x'')) WHEN v0.c2 THEN 0.300550071656318 WHEN ((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN UNLIKELY(DISTINCT v0.c3) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN ((v0.c3)>(v0.c3)) END);
SELECT ALL * FROM v0 WHERE (((CASE ((v0.c1)>>(v0.c3))  WHEN ((v0.c3) NOT BETWEEN (NULL) AND (x'50')) THEN (v0.c3 IN (v0.c2)) WHEN v0.c2 THEN 0.300550071656318 WHEN ((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c1)) THEN UNLIKELY(DISTINCT v0.c3) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN ((v0.c3)>(v0.c3)) END)AND((CASE WHEN v0.c0 THEN v0.c0 END IN (((v0.c0)<=(v0.c1))))))) ORDER BY CAST((v0.c2 IN ()) AS INTEGER) ASC  NULLS LAST, ((v0.c2)+(((((((((v0.c0)AND(v0.c1)))AND(v0.c0)))AND(v0.c1)))AND(v0.c3)))) DESC;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON ((vt0.c0) NOTNULL) WHERE (CAST((~ (vt0.c0)) AS BLOB));
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((vt0.c0) NOTNULL) WHERE (((CAST((~ (vt0.c0)) AS BLOB))AND((((v0.c2 IN ())) NOT BETWEEN (CASE WHEN v0.c0 THEN v0.c1 WHEN NULL THEN v0.c0 ELSE v0.c0 END) AND (CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END))))) LIMIT 0;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON ((vt0.c0) NOTNULL) WHERE (CAST((~ (vt0.c0)) AS BLOB));
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON ((vt0.c0) NOTNULL) WHERE (((CAST((~ (vt0.c0)) AS BLOB))AND((((v0.c2 IN ())) NOT BETWEEN (CASE WHEN v0.c0 THEN v0.c1 WHEN NULL THEN v0.c0 ELSE v0.c0 END) AND (CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END))))) LIMIT 0;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE ((+ (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY ((((CAST(vt2.c1 AS BLOB))OR(v0.c3)))OR(v0.c0)) ASC;
SELECT DISTINCT COUNT(*) FROM vt2, vt0 NOT INDEXED, v0 WHERE ((+ (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY ((((CAST(vt2.c1 AS BLOB))OR(v0.c3)))OR(v0.c0)) ASC;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((NOT (CAST(v0.c0 AS TEXT))));
SELECT * FROM vt0, v0, vt2 WHERE ((((NOT (CAST(v0.c0 AS TEXT))))AND(v0.c3))) ORDER BY (98982355 IN ()) COLLATE RTRIM DESC  NULLS FIRST, vt0.c0 DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (TRIM((vt2.c1 IN (vt2.c0, vt2.c0)), ((vt2.c0)IS NOT(v0.c3)))) ORDER BY (98982355 IN ()) COLLATE RTRIM DESC  NULLS FIRST, vt0.c0 DESC  NULLS FIRST;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((NOT (CAST(v0.c0 AS TEXT))));
SELECT * FROM vt0, v0, vt2 WHERE ((((NOT (CAST(v0.c0 AS TEXT))))AND(v0.c3))) ORDER BY (98982355 IN ()) COLLATE RTRIM DESC  NULLS FIRST, vt0.c0 DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (TRIM((vt2.c1 IN (vt2.c0, vt2.c0)), ((vt2.c0)IS NOT(v0.c3)))) ORDER BY (98982355 IN ()) COLLATE RTRIM DESC  NULLS FIRST, vt0.c0 DESC  NULLS FIRST;
SELECT MAX(vt2.c0) FROM vt2 WHERE (((((vt2.c0)AND(vt2.c1))) NOT BETWEEN (((vt2.c1)!=(vt2.c0))) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))))) ORDER BY CAST(HEX(DISTINCT vt2.c0) AS NUMERIC)  NULLS FIRST, x'a4'  NULLS FIRST;
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (((((((vt2.c0)AND(vt2.c1))) NOT BETWEEN (((vt2.c1)<>(vt2.c0))) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))))AND((((vt2.c1)) BETWEEN ((vt2.c1)) AND ((vt2.c1 COLLATE NOCASE)))))) ORDER BY CAST(HEX(DISTINCT vt2.c0) AS NUMERIC)  NULLS FIRST, x'a4'  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (((((vt0.c0)&(vt0.c0))) IS FALSE)) ORDER BY ((COALESCE(3.3514151E7, v0.c2, NULL, vt0.c0)) ISNULL) DESC, UNLIKELY(DISTINCT (((v0.c3, v0.c2, v0.c2, v0.c2))=((0.08327174806569393, v0.c1, v0.c2, v0.c2)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0 WHERE (((((vt0.c0)&(vt0.c0))) IS FALSE)) ORDER BY ((COALESCE(3.3514151E7, v0.c2, NULL, vt0.c0)) ISNULL) DESC, UNLIKELY(DISTINCT (((v0.c3, v0.c2, v0.c2, v0.c2))==((0.08327174806569393, v0.c1, v0.c2, v0.c2)))) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (((((v0.c3) BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (CASE v0.c2  WHEN v0.c1 THEN vt0.c0 WHEN v0.c3 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE v0.c3 END) AND ((+ (vt0.c0))))) ORDER BY ((COALESCE(3.3514151E7, v0.c2, NULL, vt0.c0)) ISNULL) DESC, UNLIKELY(DISTINCT (((v0.c3, v0.c2, v0.c2, v0.c2))=((0.08327174806569393, v0.c1, v0.c2, v0.c2)))) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM v0, vt0 WHERE (((((vt0.c0)&(vt0.c0))) IS FALSE)) ORDER BY ((COALESCE(3.3514151E7, v0.c2, NULL, vt0.c0)) ISNULL) DESC, UNLIKELY(DISTINCT (((v0.c3, v0.c2, v0.c2, v0.c2))=((0.08327174806569393, v0.c1, v0.c2, v0.c2)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0 WHERE (((((vt0.c0)&(vt0.c0))) IS FALSE)) ORDER BY ((COALESCE(3.3514151E7, v0.c2, NULL, vt0.c0)) ISNULL) DESC, UNLIKELY(DISTINCT (((v0.c3, v0.c2, v0.c2, v0.c2))==((0.08327174806569393, v0.c1, v0.c2, v0.c2)))) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (((((v0.c3) BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN (CASE v0.c2  WHEN v0.c1 THEN vt0.c0 WHEN v0.c3 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE v0.c3 END) AND ((+ (vt0.c0))))) ORDER BY ((COALESCE(3.3514151E7, v0.c2, NULL, vt0.c0)) ISNULL) DESC, UNLIKELY(DISTINCT (((v0.c3, v0.c2, v0.c2, v0.c2))=((0.08327174806569393, v0.c1, v0.c2, v0.c2)))) ASC  NULLS LAST LIMIT 2;
SELECT * FROM v0 WHERE (((((v0.c1) IS FALSE)) BETWEEN (CAST(v0.c2 AS INTEGER)) AND (0.5588176366201142))) ORDER BY (((((~ (v0.c1)))AND(((v0.c0)<=(v0.c0)))))OR(CAST(v0.c0 AS REAL))) DESC, (((v0.c3)) BETWEEN ((((v0.c1)>>(9.55661194E8)))) AND ((((v0.c1)%(v0.c2)))));
SELECT * FROM v0 WHERE (((((v0.c1) IS FALSE)) BETWEEN (CAST(v0.c2 AS INTEGER)) AND (0.5588176366201142))) ORDER BY CASE WHEN v0.c1 THEN v0.c3 COLLATE NOCASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END THEN v0.c2 COLLATE RTRIM END, (- (v0.c0)) DESC  NULLS LAST;
SELECT * FROM v0 WHERE (((((v0.c1) IS FALSE)) BETWEEN (CAST(v0.c2 AS INTEGER)) AND (0.5588176366201142))) ORDER BY (((((~ (v0.c1)))AND(((v0.c0)<=(v0.c0)))))OR(CAST(v0.c0 AS REAL))) DESC, (((v0.c3)) BETWEEN ((((v0.c1)>>(9.55661194E8)))) AND ((((v0.c1)%(v0.c2)))));
SELECT * FROM v0 WHERE (((((v0.c1) IS FALSE)) BETWEEN (CAST(v0.c2 AS INTEGER)) AND (0.5588176366201142))) ORDER BY CASE WHEN v0.c1 THEN v0.c3 COLLATE NOCASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END THEN v0.c2 COLLATE RTRIM END, (- (v0.c0)) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((((((CAST(vt0.c0 AS REAL))AND(vt0.c0 COLLATE RTRIM)))OR('>q_')))OR(CAST(vt0.c0 AS BLOB))));
SELECT * FROM vt0 WHERE (((((((CAST(vt0.c0 AS REAL))AND(vt0.c0 COLLATE RTRIM)))OR('>q_')))OR(CAST(vt0.c0 AS BLOB)))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (0xffffffff819e18f5) LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((((((CAST(vt0.c0 AS REAL))AND(vt0.c0 COLLATE RTRIM)))OR('>q_')))OR(CAST(vt0.c0 AS BLOB))));
SELECT * FROM vt0 WHERE (((((((CAST(vt0.c0 AS REAL))AND(vt0.c0 COLLATE RTRIM)))OR('>q_')))OR(CAST(vt0.c0 AS BLOB)))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (0xffffffff819e18f5) LIMIT 0;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (v0.c3) ORDER BY (+ (v0.c0))  NULLS LAST, LIKELIHOOD((((vt2.c1, v0.c0, vt0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c0, v0.c3, v0.c1)) AND ((v0.c0, v0.c1, v0.c3, v0.c0))), ((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c1))) DESC;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((v0.c3)AND(((((- (v0.c0))))>((((((((((((vt2.c0)AND(vt2.c1)))OR(v0.c0)))AND(vt2.c1)))AND(v0.c1)))OR(vt2.c0)))))))) ORDER BY ((vt2.c0) BETWEEN (v0.c2 COLLATE BINARY) AND (0.976568181478751)), ((((((vt2.c0)=(v0.c0)))OR(((vt2.c0) BETWEEN (v0.c1) AND (v0.c2)))))OR(((vt2.c1)IS NOT(vt0.c0)))) DESC, COALESCE(DISTINCT (v0.c2 IN (v0.c3, v0.c1)), ((((((v0.c3)AND(vt2.c1)))AND(v0.c2)))OR(vt0.c0)), CAST('-1956065535' AS TEXT)) DESC  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (v0.c3) ORDER BY (+ (v0.c0))  NULLS LAST, LIKELIHOOD((((vt2.c1, v0.c0, vt0.c0, v0.c0)) BETWEEN ((v0.c0, v0.c0, v0.c3, v0.c1)) AND ((v0.c0, v0.c1, v0.c3, v0.c0))), ((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c1))) DESC;
SELECT ALL COUNT(*) FROM v0 WHERE ('>lH');
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((('>lH')AND(v0.c0))) ORDER BY ((((((v0.c1) IS TRUE))AND(((v0.c1)=(v0.c2)))))AND(((v0.c1) BETWEEN (v0.c3) AND (v0.c2))))  NULLS FIRST, (+ (GLOB(v0.c2, v0.c2))) ASC  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((((v0.c1, v0.c3)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c0, v0.c3)))))>=(((- (v0.c3)))))) ORDER BY ((((((v0.c1) IS TRUE))AND(((v0.c1)=(v0.c2)))))AND(((v0.c1) BETWEEN (v0.c3) AND (v0.c2))))  NULLS FIRST, (+ (GLOB(v0.c2, v0.c2))) ASC  NULLS FIRST;
SELECT MIN(v0.c1) FROM v0 WHERE ((((((((v0.c2)OR(NULL)))AND(NULL)))OR(0Xffffffffe28b9212)) IN (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c3)), (((v0.c1))>=((v0.c2))))));
SELECT MIN(v0.c1) FROM v0 WHERE ((((((((((v0.c2)OR(NULL)))AND(NULL)))OR(0Xffffffffe28b9212)) IN (((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c3)), (((v0.c1))==((v0.c2))))))AND(CASE WHEN ((((((v0.c0)OR(v0.c2)))OR(v0.c0)))AND(v0.c0)) THEN ((v0.c1) NOT NULL) WHEN ((v0.c2) NOT BETWEEN ('795331170') AND (v0.c0)) THEN UPPER(v0.c0) WHEN HEX(v0.c1) THEN CASE v0.c2  WHEN v0.c2 THEN v0.c2 END END)));
SELECT ALL * FROM vt2 WHERE (((json_valid(vt2.c0))<<(((vt2.c1)AND(vt2.c1))))) ORDER BY (((x'', vt2.c0)) BETWEEN ((((0.7445893096870432)IS(vt2.c0)), ((vt2.c0)||(vt2.c1)))) AND ((0.6802078469128866, ((((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1))))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt2 WHERE (((json_valid(vt2.c0))<<(((vt2.c1)AND(vt2.c1))))) ORDER BY (((x'', vt2.c0)) BETWEEN ((((0.7445893096870432)IS(vt2.c0)), ((vt2.c0)||(vt2.c1)))) AND ((0.6802078469128866, ((((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1))))) DESC  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))&(vt2.c1))) ORDER BY (((x'', vt2.c0)) BETWEEN ((((0.7445893096870432)IS(vt2.c0)), ((vt2.c0)||(vt2.c1)))) AND ((0.6802078469128866, ((((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1))))) DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt2 WHERE (((json_valid(vt2.c0))<<(((vt2.c1)AND(vt2.c1))))) ORDER BY (((x'', vt2.c0)) BETWEEN ((((0.7445893096870432)IS(vt2.c0)), ((vt2.c0)||(vt2.c1)))) AND ((0.6802078469128866, ((((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1))))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt2 WHERE (((json_valid(vt2.c0))<<(((vt2.c1)AND(vt2.c1))))) ORDER BY (((x'', vt2.c0)) BETWEEN ((((0.7445893096870432)IS(vt2.c0)), ((vt2.c0)||(vt2.c1)))) AND ((0.6802078469128866, ((((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1))))) DESC  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)))&(vt2.c1))) ORDER BY (((x'', vt2.c0)) BETWEEN ((((0.7445893096870432)IS(vt2.c0)), ((vt2.c0)||(vt2.c1)))) AND ((0.6802078469128866, ((((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)))AND(vt2.c1))))) DESC  NULLS FIRST LIMIT 2;
SELECT ALL * FROM v0 WHERE (IFNULL(ROUND(v0.c2, v0.c1), (NOT (v0.c0)))) ORDER BY NULL DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((IFNULL(ROUND(v0.c2, v0.c1), (NOT (v0.c0))))AND(((v0.c2)*(0.652970091097333))))) ORDER BY (~ (((((((0.8372240442592146)OR(v0.c3)))OR(v0.c1)))OR(v0.c2))));
SELECT ALL * FROM v0 WHERE (IFNULL(ROUND(v0.c2, v0.c1), (NOT (v0.c0)))) ORDER BY NULL DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((IFNULL(ROUND(v0.c2, v0.c1), (NOT (v0.c0))))AND(((v0.c2)*(0.652970091097333))))) ORDER BY (~ (((((((0.8372240442592146)OR(v0.c3)))OR(v0.c1)))OR(v0.c2))));
SELECT * FROM vt0 CROSS JOIN v0 ON ((((((((((v0.c1)AND(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(')?'))) NOT BETWEEN (v0.c2 COLLATE RTRIM) AND (((v0.c3)/(0.5801464277288885)))) WHERE (((((v0.c0)+(v0.c0)))/(((x'')>>(v0.c0))))) ORDER BY ((((vt0.c0)%(v0.c0))) ISNULL)  NULLS LAST, ((((vt0.c0)>>(v0.c1))) IS TRUE), (((0.2886380775318511 COLLATE RTRIM, (v0.c2 IN ())))<((((((vt0.c0)OR(v0.c0)))OR(v0.c2)), ((vt0.c0) IS FALSE))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 NOT INDEXED CROSS JOIN v0 ON ((((((((((v0.c1)AND(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(')?'))) NOT BETWEEN (v0.c2 COLLATE RTRIM) AND (((v0.c3)/(0.5801464277288885)))) WHERE (((((((v0.c0)+(v0.c0)))/(((x'')>>(v0.c0)))))AND(((((v0.c2)+(vt0.c0))) ISNULL)))) ORDER BY ((((vt0.c0)%(v0.c0))) ISNULL)  NULLS LAST, ((((vt0.c0)>>(v0.c1))) IS TRUE), (((0.2886380775318511 COLLATE RTRIM, (v0.c2 IN ())))<((((((vt0.c0)OR(v0.c0)))OR(v0.c2)), ((vt0.c0) IS FALSE))))  NULLS LAST LIMIT 0x1;
SELECT * FROM vt0 CROSS JOIN v0 ON ((((((((((v0.c1)AND(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(')?'))) NOT BETWEEN (v0.c2 COLLATE RTRIM) AND (((v0.c3)/(0.5801464277288885)))) WHERE (((((v0.c0)+(v0.c0)))/(((x'')>>(v0.c0))))) ORDER BY ((((vt0.c0)%(v0.c0))) ISNULL)  NULLS LAST, ((((vt0.c0)>>(v0.c1))) IS TRUE), (((0.2886380775318511 COLLATE RTRIM, (v0.c2 IN ())))<((((((vt0.c0)OR(v0.c0)))OR(v0.c2)), ((vt0.c0) IS FALSE))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 NOT INDEXED CROSS JOIN v0 ON ((((((((((v0.c1)AND(v0.c0)))OR(v0.c2)))AND(v0.c0)))AND(')?'))) NOT BETWEEN (v0.c2 COLLATE RTRIM) AND (((v0.c3)/(0.5801464277288885)))) WHERE (((((((v0.c0)+(v0.c0)))/(((x'')>>(v0.c0)))))AND(((((v0.c2)+(vt0.c0))) ISNULL)))) ORDER BY ((((vt0.c0)%(v0.c0))) ISNULL)  NULLS LAST, ((((vt0.c0)>>(v0.c1))) IS TRUE), (((0.2886380775318511 COLLATE RTRIM, (v0.c2 IN ())))<((((((vt0.c0)OR(v0.c0)))OR(v0.c2)), ((vt0.c0) IS FALSE))))  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM v0 WHERE ('-233661639') ORDER BY CASE ((v0.c2) NOT NULL)  WHEN ((v0.c3) NOT NULL) THEN ((v0.c3)%(v0.c1)) WHEN ((v0.c2) IS FALSE) THEN (- (v0.c1)) WHEN ((v0.c2)AND(v0.c1)) THEN 0.6209314365292297 ELSE ((v0.c3) NOT BETWEEN (v0.c0) AND (x'455f')) END ASC, (((x'd3' IN (v0.c2))) ISNULL)  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((('-233661639')AND((((((v0.c3, v0.c3))!=((v0.c2, v0.c2)))) BETWEEN (v0.c1) AND (CAST(v0.c0 AS TEXT)))))) ORDER BY CASE ((v0.c2) NOT NULL)  WHEN ((v0.c3) NOT NULL) THEN ((v0.c3)%(v0.c1)) WHEN ((v0.c2) IS FALSE) THEN (- (v0.c1)) WHEN ((v0.c2)AND(v0.c1)) THEN 0.6209314365292297 ELSE ((v0.c3) NOT BETWEEN (v0.c0) AND (x'455f')) END ASC, (((x'd3' IN (v0.c2))) ISNULL)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((~ ((NOT (NULL))))) ORDER BY CASE ((v0.c2) NOT NULL)  WHEN ((v0.c3) NOT NULL) THEN ((v0.c3)%(v0.c1)) WHEN ((v0.c2) IS FALSE) THEN (- (v0.c1)) WHEN ((v0.c2)AND(v0.c1)) THEN 0.6209314365292297 ELSE ((v0.c3) NOT BETWEEN (v0.c0) AND (x'455f')) END ASC, (((x'd3' IN (v0.c2))) ISNULL)  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ('-233661639') ORDER BY CASE ((v0.c2) NOT NULL)  WHEN ((v0.c3) NOT NULL) THEN ((v0.c3)%(v0.c1)) WHEN ((v0.c2) IS FALSE) THEN (- (v0.c1)) WHEN ((v0.c2)AND(v0.c1)) THEN 0.6209314365292297 ELSE ((v0.c3) NOT BETWEEN (v0.c0) AND (x'455f')) END ASC, (((x'd3' IN (v0.c2))) ISNULL)  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((('-233661639')AND((((((v0.c3, v0.c3))!=((v0.c2, v0.c2)))) BETWEEN (v0.c1) AND (CAST(v0.c0 AS TEXT)))))) ORDER BY CASE ((v0.c2) NOT NULL)  WHEN ((v0.c3) NOT NULL) THEN ((v0.c3)%(v0.c1)) WHEN ((v0.c2) IS FALSE) THEN (- (v0.c1)) WHEN ((v0.c2)AND(v0.c1)) THEN 0.6209314365292297 ELSE ((v0.c3) NOT BETWEEN (v0.c0) AND (x'455f')) END ASC, (((x'd3' IN (v0.c2))) ISNULL)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((~ ((NOT (NULL))))) ORDER BY CASE ((v0.c2) NOT NULL)  WHEN ((v0.c3) NOT NULL) THEN ((v0.c3)%(v0.c1)) WHEN ((v0.c2) IS FALSE) THEN (- (v0.c1)) WHEN ((v0.c2)AND(v0.c1)) THEN 0.6209314365292297 ELSE ((v0.c3) NOT BETWEEN (v0.c0) AND (x'455f')) END ASC, (((x'd3' IN (v0.c2))) ISNULL)  NULLS FIRST;
SELECT MAX(v0.c3) FROM v0, vt0 WHERE (v0.c1) ORDER BY ((v0.c2 IN ()) IN (''));
SELECT MAX(v0.c3) FROM v0, vt0 WHERE (v0.c1) ORDER BY ((v0.c2 IN ()) IN (''));
SELECT * FROM vt2, v0 INNER JOIN vt0 ON 0.22391703928591844 WHERE (vt2.c1) ORDER BY CASE WHEN (((vt2.c1, vt0.c0))<>((v0.c2, vt2.c0))) THEN ((v0.c0)%(vt0.c0)) WHEN ((((((v0.c0)AND(v0.c3)))AND(vt2.c0)))OR(vt0.c0)) THEN IFNULL(v0.c2, vt0.c0) ELSE (((v0.c2)) BETWEEN ((vt2.c0)) AND ((v0.c2))) END  NULLS LAST, (- (vt2.c0)) DESC, ((v0.c0 COLLATE BINARY)/(GLOB(vt2.c1, v0.c2))) DESC;
SELECT DISTINCT * FROM vt2, v0 INNER JOIN vt0 ON 0.22391703928591844 WHERE (vt2.c1) ORDER BY vt0.c0 ASC  NULLS FIRST, ((0X57ac76eb) NOT BETWEEN (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) AND (((v0.c3) BETWEEN ('-2016205125') AND ('')))) ASC, UPPER(((v0.c2) NOT BETWEEN (vt2.c0) AND (vt2.c0)))  NULLS LAST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt2, v0 NOT INDEXED INNER JOIN vt0 ON 0.22391703928591844 WHERE (((((vt2.c0) NOT BETWEEN (v0.c0) AND (vt2.c1)))=(((v0.c0)<=(v0.c0))))) ORDER BY vt0.c0 ASC  NULLS FIRST, ((0X57ac76eb) NOT BETWEEN (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) AND (((v0.c3) BETWEEN ('-2016205125') AND ('')))) ASC, UPPER(((v0.c2) NOT BETWEEN (vt2.c0) AND (vt2.c0)))  NULLS LAST LIMIT 0X1;
SELECT * FROM vt2, v0 INNER JOIN vt0 ON 0.22391703928591844 WHERE (vt2.c1) ORDER BY CASE WHEN (((vt2.c1, vt0.c0))<>((v0.c2, vt2.c0))) THEN ((v0.c0)%(vt0.c0)) WHEN ((((((v0.c0)AND(v0.c3)))AND(vt2.c0)))OR(vt0.c0)) THEN IFNULL(v0.c2, vt0.c0) ELSE (((v0.c2)) BETWEEN ((vt2.c0)) AND ((v0.c2))) END  NULLS LAST, (- (vt2.c0)) DESC, ((v0.c0 COLLATE BINARY)/(GLOB(vt2.c1, v0.c2))) DESC;
SELECT DISTINCT * FROM vt2, v0 INNER JOIN vt0 ON 0.22391703928591844 WHERE (vt2.c1) ORDER BY vt0.c0 ASC  NULLS FIRST, ((0X57ac76eb) NOT BETWEEN (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) AND (((v0.c3) BETWEEN ('-2016205125') AND ('')))) ASC, UPPER(((v0.c2) NOT BETWEEN (vt2.c0) AND (vt2.c0)))  NULLS LAST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM vt2, v0 NOT INDEXED INNER JOIN vt0 ON 0.22391703928591844 WHERE (((((vt2.c0) NOT BETWEEN (v0.c0) AND (vt2.c1)))=(((v0.c0)<=(v0.c0))))) ORDER BY vt0.c0 ASC  NULLS FIRST, ((0X57ac76eb) NOT BETWEEN (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))) AND (((v0.c3) BETWEEN ('-2016205125') AND ('')))) ASC, UPPER(((v0.c2) NOT BETWEEN (vt2.c0) AND (vt2.c0)))  NULLS LAST LIMIT 0X1;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (json_quote(((vt0.c0)>=(vt0.c0))));
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (json_quote(((vt0.c0)==(vt0.c0)))) ORDER BY ((CASE vt2.c0  WHEN v0.c2 THEN v0.c3 ELSE v0.c1 END)AND(((((((v0.c0)OR(v0.c3)))OR(vt2.c0)))OR(vt0.c0)))), (- ((vt0.c0 IN (vt0.c0)))) ASC  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt2 WHERE (((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)/(ABS(DISTINCT vt2.c1))));
SELECT DISTINCT * FROM vt2 WHERE (((((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)/(ABS(DISTINCT vt2.c1))))AND(((((vt2.c0) IS FALSE)) NOT BETWEEN ((((vt2.c1, vt2.c1, vt2.c0))>((-572972978, vt2.c0, vt2.c1)))) AND ((x'' IN (vt2.c0)))))));
SELECT ALL * FROM vt2 WHERE (((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)/(ABS(DISTINCT vt2.c1))));
SELECT DISTINCT * FROM vt2 WHERE (((((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)/(ABS(DISTINCT vt2.c1))))AND(((((vt2.c0) IS FALSE)) NOT BETWEEN ((((vt2.c1, vt2.c1, vt2.c0))>((-572972978, vt2.c0, vt2.c1)))) AND ((x'' IN (vt2.c0)))))));
SELECT ALL * FROM v0 WHERE (((v0.c3) BETWEEN (v0.c1) AND (v0.c1)) COLLATE BINARY) ORDER BY ((LIKELY(DISTINCT v0.c0)) IS TRUE) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE (((v0.c3) BETWEEN (v0.c1) AND (v0.c1)) COLLATE BINARY) ORDER BY ((LIKELY(DISTINCT v0.c0)) IS TRUE) DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((v0.c3) BETWEEN (v0.c1) AND (v0.c1)) COLLATE BINARY) ORDER BY ((LIKELY(DISTINCT v0.c0)) IS TRUE) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE (((v0.c3) BETWEEN (v0.c1) AND (v0.c1)) COLLATE BINARY) ORDER BY ((LIKELY(DISTINCT v0.c0)) IS TRUE) DESC  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM vt2, vt0, v0 WHERE ((((((v0.c2)OR(vt2.c1)))OR(v0.c3)) IN (((vt2.c0) BETWEEN (v0.c0) AND (v0.c2)))));
SELECT DISTINCT MAX(v0.c0) FROM vt2, vt0, v0 WHERE ((((((v0.c2)OR(vt2.c1)))OR(v0.c3)) IN (((vt2.c0) BETWEEN (v0.c0) AND (v0.c2))))) ORDER BY v0.c0 DESC  NULLS LAST;
SELECT * FROM vt2 INNER JOIN vt0 ON CAST(vt0.c0 AS BLOB) WHERE (((0.9505611843141091) IS FALSE));
SELECT ALL * FROM vt2 INNER JOIN vt0 ON CAST(vt0.c0 AS BLOB) WHERE (((0.9505611843141091) IS FALSE)) ORDER BY CAST(((vt0.c0)<<(NULL)) AS TEXT) ASC, CASE CASE vt0.c0  WHEN vt2.c1 THEN vt2.c0 ELSE 0.7829815092211827 END  WHEN ((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c1)) THEN ((vt0.c0)-(vt2.c0)) END DESC LIMIT 1;
SELECT * FROM vt2 INNER JOIN vt0 ON CAST(vt0.c0 AS BLOB) WHERE (((0.9505611843141091) IS FALSE));
SELECT ALL * FROM vt2 INNER JOIN vt0 ON CAST(vt0.c0 AS BLOB) WHERE (((0.9505611843141091) IS FALSE)) ORDER BY CAST(((vt0.c0)<<(NULL)) AS TEXT) ASC, CASE CASE vt0.c0  WHEN vt2.c1 THEN vt2.c0 ELSE 0.7829815092211827 END  WHEN ((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c1)) THEN ((vt0.c0)-(vt2.c0)) END DESC LIMIT 1;
SELECT ALL * FROM vt2 WHERE ((((((vt2.c1, x'44')) BETWEEN ((vt2.c1, -335263287)) AND ((x'db9e', vt2.c0)))) NOT NULL));
SELECT DISTINCT * FROM vt2 WHERE ((((((((vt2.c1, x'44')) BETWEEN ((vt2.c1, 0Xffffffffec0449c9)) AND ((x'db9e', vt2.c0)))) NOT NULL))AND((vt2.c1 IN (vt2.c1)) COLLATE RTRIM))) LIMIT 1;
SELECT ALL * FROM vt2 WHERE ((((((vt2.c1, x'44')) BETWEEN ((vt2.c1, -335263287)) AND ((x'db9e', vt2.c0)))) NOT NULL));
SELECT DISTINCT * FROM vt2 WHERE ((((((((vt2.c1, x'44')) BETWEEN ((vt2.c1, 0Xffffffffec0449c9)) AND ((x'db9e', vt2.c0)))) NOT NULL))AND((vt2.c1 IN (vt2.c1)) COLLATE RTRIM))) LIMIT 1;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (CASE CASE WHEN vt0.c0 THEN '572128632' WHEN vt0.c0 THEN vt0.c0 END  WHEN ((((((vt2.c1)AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)) THEN (~ (vt2.c0)) WHEN CASE vt0.c0  WHEN '1947377964' THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c1 END THEN vt2.c1 COLLATE RTRIM ELSE CASE vt0.c0  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END END) ORDER BY (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END IN ()), 0xffffffffcee79ed9, vt0.c0 ASC  NULLS FIRST, vt2.c1 ASC;
SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 WHERE (CASE CASE WHEN vt0.c0 THEN '572128632' WHEN vt0.c0 THEN vt0.c0 END  WHEN ((((((vt2.c1)AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)) THEN (~ (vt2.c0)) WHEN CASE vt0.c0  WHEN '1947377964' THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c1 END THEN vt2.c1 COLLATE RTRIM ELSE CASE vt0.c0  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END END) ORDER BY CHANGES() DESC, NULLIF(vt2.c0, ((vt2.c1) IS FALSE)) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 WHERE (((((vt0.c0)OR(x'3804'))) ISNULL)) ORDER BY CHANGES() DESC, NULLIF(vt2.c0, ((vt2.c1) IS FALSE)) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (CASE CASE WHEN vt0.c0 THEN '572128632' WHEN vt0.c0 THEN vt0.c0 END  WHEN ((((((vt2.c1)AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)) THEN (~ (vt2.c0)) WHEN CASE vt0.c0  WHEN '1947377964' THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c1 END THEN vt2.c1 COLLATE RTRIM ELSE CASE vt0.c0  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END END) ORDER BY (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 END IN ()), 0xffffffffcee79ed9, vt0.c0 ASC  NULLS FIRST, vt2.c1 ASC;
SELECT MAX(vt2.c0) FROM vt2, vt0, v0 WHERE ((+ ((~ (v0.c1))))) ORDER BY ((((((vt2.c1, 0.5852284231584522, v0.c2))<((v0.c1, vt2.c0, v0.c2)))))!=((0.417461029324112))) ASC, ((((v0.c3) NOT BETWEEN (vt2.c0) AND (vt0.c0)))GLOB(CAST(vt2.c0 AS NUMERIC))) DESC  NULLS LAST;
SELECT ALL MAX(vt2.c0) FROM vt2, vt0, v0 WHERE ((((+ ((~ (v0.c1)))))AND(((((((((((v0.c3)/(v0.c0)))AND(CASE WHEN vt2.c0 THEN v0.c0 WHEN 1.600896593E9 THEN v0.c1 ELSE vt2.c0 END)))OR(((x'9a')IS(vt2.c0)))))AND(((((v0.c1)AND('382198455')))OR(vt2.c0)))))OR(v0.c2))))) ORDER BY ((((((vt2.c1, 0.5852284231584522, v0.c2))<((v0.c1, vt2.c0, v0.c2)))))<>((0.417461029324112))) ASC, ((((v0.c3) NOT BETWEEN (vt2.c0) AND (vt0.c0)))GLOB(CAST(vt2.c0 AS NUMERIC))) DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt0, v0 WHERE (((CASE v0.c0  WHEN v0.c2 THEN v0.c1 ELSE vt0.c0 END) NOT BETWEEN ((NOT (v0.c1))) AND ((v0.c0 IN (vt0.c0)))));
SELECT ALL * FROM vt0, v0 WHERE (((CASE v0.c0  WHEN v0.c2 THEN v0.c1 ELSE vt0.c0 END) NOT BETWEEN ((NOT (v0.c1))) AND ((v0.c0 IN (vt0.c0))))) LIMIT 0x3;
SELECT * FROM vt0, v0 WHERE (((CASE v0.c0  WHEN v0.c2 THEN v0.c1 ELSE vt0.c0 END) NOT BETWEEN ((NOT (v0.c1))) AND ((v0.c0 IN (vt0.c0)))));
SELECT ALL * FROM vt0, v0 WHERE (((CASE v0.c0  WHEN v0.c2 THEN v0.c1 ELSE vt0.c0 END) NOT BETWEEN ((NOT (v0.c1))) AND ((v0.c0 IN (vt0.c0))))) LIMIT 0x3;
SELECT ALL * FROM v0, vt2, vt0 WHERE ('.B' COLLATE RTRIM) ORDER BY (((vt0.c0)!=(v0.c1)) IN (('458077575' IN ())));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((('.B' COLLATE RTRIM)AND(vt0.c0))) ORDER BY CAST(((v0.c1) BETWEEN (v0.c3) AND (v0.c1)) AS BLOB) LIMIT 0X1;
SELECT ALL * FROM v0, vt2, vt0 WHERE ('.B' COLLATE RTRIM) ORDER BY (((vt0.c0)!=(v0.c1)) IN (('458077575' IN ())));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((('.B' COLLATE RTRIM)AND(vt0.c0))) ORDER BY CAST(((v0.c1) BETWEEN (v0.c3) AND (v0.c1)) AS BLOB) LIMIT 0X1;
SELECT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (vt2.c1);
SELECT DISTINCT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (vt2.c1) ORDER BY json_quote(((v0.c2)&(vt2.c0))) DESC, 0.0881935460579909 ASC, ((((0.9452602765277195)OR(v0.c0)))<(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c0)))) LIMIT 0x1;
SELECT * FROM v0 WHERE (CAST(((0.3806671300188541)&(v0.c1)) AS INTEGER));
SELECT * FROM v0 WHERE (CAST(((0.3806671300188541)&(v0.c1)) AS INTEGER)) LIMIT 0x1;
SELECT * FROM v0 WHERE (CAST(((0.3806671300188541)&(v0.c1)) AS INTEGER));
SELECT * FROM v0 WHERE (CAST(((0.3806671300188541)&(v0.c1)) AS INTEGER)) LIMIT 0x1;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (SQLITE_VERSION());
SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE (SQLITE_VERSION()) INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE ((~ (((((((vt2.c1)AND(x'd1')))AND(vt2.c1)))AND(vt2.c0)))));
SELECT ALL * FROM vt2 WHERE (((((((vt2.c0) IS TRUE))OR(((vt2.c0)+(vt2.c0)))))OR((NOT (vt2.c1))))) ORDER BY (((+ (vt2.c0))) NOTNULL), ((vt2.c1)>(((vt2.c0)>=(vt2.c0)))) DESC;
SELECT ALL * FROM vt2 WHERE (((((((vt2.c0) IS TRUE))OR(((vt2.c0)+(vt2.c0)))))OR((NOT (vt2.c1))))) ORDER BY (((((('jisO')OR(CAST(vt2.c1 AS NUMERIC))))AND((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))))OR(((vt2.c0) ISNULL))) DESC, NULL DESC INTERSECT SELECT ALL * FROM vt2 NOT INDEXED WHERE ((((0.9618937949241358)*(vt2.c1)) IN (((vt2.c0)OR(vt2.c0))))) ORDER BY (((((('jisO')OR(CAST(vt2.c1 AS NUMERIC))))AND((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))))OR(((vt2.c0) ISNULL))) DESC, NULL DESC;
SELECT ALL * FROM vt2 WHERE (((((((vt2.c0) IS TRUE))OR(((vt2.c0)+(vt2.c0)))))OR((NOT (vt2.c1))))) ORDER BY (((+ (vt2.c0))) NOTNULL), ((vt2.c1)>(((vt2.c0)>=(vt2.c0)))) DESC;
SELECT ALL * FROM vt2 WHERE (((((((vt2.c0) IS TRUE))OR(((vt2.c0)+(vt2.c0)))))OR((NOT (vt2.c1))))) ORDER BY (((((('jisO')OR(CAST(vt2.c1 AS NUMERIC))))AND((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))))OR(((vt2.c0) ISNULL))) DESC, NULL DESC INTERSECT SELECT ALL * FROM vt2 NOT INDEXED WHERE ((((0.9618937949241358)*(vt2.c1)) IN (((vt2.c0)OR(vt2.c0))))) ORDER BY (((((('jisO')OR(CAST(vt2.c1 AS NUMERIC))))AND((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))))OR(((vt2.c0) ISNULL))) DESC, NULL DESC;
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((v0.c1 COLLATE RTRIM)%('lu(Vm^7a'''))) ORDER BY (((((v0.c1) NOT NULL)))>((ABS(v0.c3)))) DESC, ((((NULL)AND(CAST(vt2.c0 AS REAL))))OR(((v0.c1) ISNULL)));
SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((v0.c1 COLLATE RTRIM)%('lu(Vm^7a''')))AND((~ ((~ (v0.c2))))))) ORDER BY (((vt0.c0 IN ())) BETWEEN (((v0.c1)<=(vt0.c0))) AND (((vt2.c1)>=(vt0.c0)))) ASC  NULLS LAST, ((x'') NOT NULL) DESC  NULLS LAST;
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((v0.c1 COLLATE RTRIM)%('lu(Vm^7a'''))) ORDER BY (((((v0.c1) NOT NULL)))>((ABS(v0.c3)))) DESC, ((((NULL)AND(CAST(vt2.c0 AS REAL))))OR(((v0.c1) ISNULL)));
SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((v0.c1 COLLATE RTRIM)%('lu(Vm^7a''')))AND((~ ((~ (v0.c2))))))) ORDER BY (((vt0.c0 IN ())) BETWEEN (((v0.c1)<=(vt0.c0))) AND (((vt2.c1)>=(vt0.c0)))) ASC  NULLS LAST, ((x'') NOT NULL) DESC  NULLS LAST;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((~ ((((x'a2ee'))<>((x'')))))) ORDER BY (((((((((vt2.c1)OR(vt2.c0)))OR(v0.c0)))AND(vt0.c0)))AND(vt2.c1)) IN ((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c0)))))  NULLS LAST, ((((((((vt0.c0)AND(v0.c0)))AND(v0.c1)))OR(v0.c0))) NOT BETWEEN (((v0.c0) NOT BETWEEN (vt2.c1) AND (v0.c2))) AND (CASE v0.c0  WHEN v0.c0 THEN '-1398626860' ELSE vt2.c0 END))  NULLS LAST;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((~ ((((x'a2ee'))<>((x'')))))) ORDER BY NULL ASC  NULLS FIRST;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((~ ((((x'a2ee'))<>((x'')))))) ORDER BY (((((((((vt2.c1)OR(vt2.c0)))OR(v0.c0)))AND(vt0.c0)))AND(vt2.c1)) IN ((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((v0.c0)))))  NULLS LAST, ((((((((vt0.c0)AND(v0.c0)))AND(v0.c1)))OR(v0.c0))) NOT BETWEEN (((v0.c0) NOT BETWEEN (vt2.c1) AND (v0.c2))) AND (CASE v0.c0  WHEN v0.c0 THEN '-1398626860' ELSE vt2.c0 END))  NULLS LAST;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((~ ((((x'a2ee'))<>((x'')))))) ORDER BY NULL ASC  NULLS FIRST;
SELECT * FROM vt2, v0 WHERE ((NOT ((v0.c3 IN (v0.c1)))));
SELECT DISTINCT * FROM vt2, v0 WHERE ((((NOT ((v0.c3 IN (v0.c1)))))AND(NULLIF(((vt2.c1) BETWEEN (NULL) AND (v0.c2)), v0.c3)))) ORDER BY ((CAST(-2.43193612E8 AS TEXT))*(((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))AND(vt2.c0)))OR(v0.c3)))) DESC  NULLS FIRST, (((0.8465033620184153 IN (v0.c1))) IS TRUE), ((NULL)>=(CHAR(0.8437624332167564, v0.c1, v0.c3, v0.c0))) ASC INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (CASE WHEN CAST(v0.c2 AS REAL) THEN ((v0.c1) NOT NULL) ELSE HEX(DISTINCT v0.c2) END) ORDER BY ((CAST(-2.43193612E8 AS TEXT))*(((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))AND(vt2.c0)))OR(v0.c3)))) DESC  NULLS FIRST, (((0.8465033620184153 IN (v0.c1))) IS TRUE), ((NULL)>=(CHAR(0.8437624332167564, v0.c1, v0.c3, v0.c0))) ASC;
SELECT * FROM vt2, v0 WHERE ((NOT ((v0.c3 IN (v0.c1)))));
SELECT DISTINCT * FROM vt2, v0 WHERE ((((NOT ((v0.c3 IN (v0.c1)))))AND(NULLIF(((vt2.c1) BETWEEN (NULL) AND (v0.c2)), v0.c3)))) ORDER BY ((CAST(-2.43193612E8 AS TEXT))*(((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))AND(vt2.c0)))OR(v0.c3)))) DESC  NULLS FIRST, (((0.8465033620184153 IN (v0.c1))) IS TRUE), ((NULL)>=(CHAR(0.8437624332167564, v0.c1, v0.c3, v0.c0))) ASC INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (CASE WHEN CAST(v0.c2 AS REAL) THEN ((v0.c1) NOT NULL) ELSE HEX(DISTINCT v0.c2) END) ORDER BY ((CAST(-2.43193612E8 AS TEXT))*(((((((((v0.c0)OR(v0.c0)))OR(v0.c2)))AND(vt2.c0)))OR(v0.c3)))) DESC  NULLS FIRST, (((0.8465033620184153 IN (v0.c1))) IS TRUE), ((NULL)>=(CHAR(0.8437624332167564, v0.c1, v0.c3, v0.c0))) ASC;
SELECT MAX(vt2.c0) FROM vt2, v0 WHERE (COALESCE(CASE v0.c3  WHEN v0.c3 THEN vt2.c0 ELSE v0.c2 END, json_quote(v0.c2))) ORDER BY (((((v0.c2))!=((vt2.c0))))IS((((vt2.c1, vt2.c0, vt2.c0))<>((v0.c3, NULL, vt2.c1))))), v0.c0 ASC;
SELECT DISTINCT MAX(vt2.c0) FROM vt2, v0 WHERE (((COALESCE(CASE v0.c3  WHEN v0.c3 THEN vt2.c0 ELSE v0.c2 END, json_quote(v0.c2)))AND(CAST(((((NULL)OR(v0.c0)))AND(vt2.c1)) AS TEXT)))) ORDER BY (((((v0.c2))<>((vt2.c0))))IS((((vt2.c1, vt2.c0, vt2.c0))!=((v0.c3, NULL, vt2.c1))))), v0.c0 ASC LIMIT 0X2 INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM vt2, v0 WHERE ((((v0.c3, v0.c2, vt2.c0, v0.c1)) NOT BETWEEN (((+ (v0.c3)), (v0.c0 IN (0X32134445)), (((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((0.5321386886541742))), ((((((vt2.c0)AND(0.7582901251444457)))OR(v0.c1)))AND(v0.c1)))) AND ((((((((((v0.c1)OR(v0.c0)))AND(v0.c2)))OR(vt2.c0)))AND(v0.c3)), vt2.c1 COLLATE NOCASE, json_array_length(vt2.c1, vt2.c1), ((((((v0.c2)AND(vt2.c0)))AND(v0.c2)))AND(v0.c0)))))) ORDER BY (((((v0.c2))<>((vt2.c0))))IS((((vt2.c1, vt2.c0, vt2.c0))!=((v0.c3, NULL, vt2.c1))))), v0.c0 ASC LIMIT 0X2;
SELECT ALL * FROM vt0 NOT INDEXED, v0 WHERE (LOWER(DISTINCT 0.5255121377660111)) ORDER BY (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) IN (((vt0.c0)|(v0.c3)))), MIN((+ (vt0.c0)), CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE vt0.c0 END, ',');
SELECT DISTINCT * FROM vt0, v0 WHERE (LOWER(DISTINCT 0.5255121377660111)) ORDER BY (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) IN (((vt0.c0)|(v0.c3)))), MIN((+ (vt0.c0)), CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE vt0.c0 END, ',') INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (LTRIM(CAST(v0.c2 AS TEXT), CAST('8bO,Doa8' AS INTEGER))) ORDER BY (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) IN (((vt0.c0)|(v0.c3)))), MIN((+ (vt0.c0)), CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE vt0.c0 END, ',');
SELECT ALL * FROM vt0 NOT INDEXED, v0 WHERE (LOWER(DISTINCT 0.5255121377660111)) ORDER BY (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) IN (((vt0.c0)|(v0.c3)))), MIN((+ (vt0.c0)), CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE vt0.c0 END, ',');
SELECT DISTINCT * FROM vt0, v0 WHERE (LOWER(DISTINCT 0.5255121377660111)) ORDER BY (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) IN (((vt0.c0)|(v0.c3)))), MIN((+ (vt0.c0)), CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE vt0.c0 END, ',') INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (LTRIM(CAST(v0.c2 AS TEXT), CAST('8bO,Doa8' AS INTEGER))) ORDER BY (((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0)) IN (((vt0.c0)|(v0.c3)))), MIN((+ (vt0.c0)), CASE v0.c2  WHEN v0.c0 THEN v0.c2 ELSE vt0.c0 END, ',');
SELECT ALL * FROM v0, vt2 WHERE (CASE v0.c2  WHEN 0.9225029907858815 THEN vt2.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN v0.c1 ELSE v0.c2 END COLLATE BINARY COLLATE NOCASE) ORDER BY v0.c2 DESC;
SELECT * FROM v0, vt2 WHERE (((CASE v0.c2  WHEN 0.9225029907858815 THEN vt2.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN v0.c1 ELSE v0.c2 END COLLATE BINARY COLLATE NOCASE)AND(CASE ((v0.c3)AND(vt2.c0))  WHEN CHAR(vt2.c1, v0.c3) THEN ((0.6207976565493853) ISNULL) WHEN ((((((v0.c3)OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)) THEN (v0.c2 IN (v0.c0, v0.c0)) ELSE (~ (v0.c0)) END))) ORDER BY ((((((v0.c2)AND(vt2.c1)))AND(v0.c3))) BETWEEN ((vt2.c1 IN (vt2.c1, v0.c3))) AND (COALESCE('}', vt2.c0))), 0.260792292597002;
SELECT ALL * FROM v0, vt2 WHERE (CASE v0.c2  WHEN 0.9225029907858815 THEN vt2.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN v0.c1 ELSE v0.c2 END COLLATE BINARY COLLATE NOCASE) ORDER BY v0.c2 DESC;
SELECT * FROM v0, vt2 WHERE (((CASE v0.c2  WHEN 0.9225029907858815 THEN vt2.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN v0.c1 ELSE v0.c2 END COLLATE BINARY COLLATE NOCASE)AND(CASE ((v0.c3)AND(vt2.c0))  WHEN CHAR(vt2.c1, v0.c3) THEN ((0.6207976565493853) ISNULL) WHEN ((((((v0.c3)OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)) THEN (v0.c2 IN (v0.c0, v0.c0)) ELSE (~ (v0.c0)) END))) ORDER BY ((((((v0.c2)AND(vt2.c1)))AND(v0.c3))) BETWEEN ((vt2.c1 IN (vt2.c1, v0.c3))) AND (COALESCE('}', vt2.c0))), 0.260792292597002;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0, vt0.c0))) NOTNULL));
SELECT * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0, vt0.c0))) NOTNULL))AND((((((((('zZ뗊ꥌ6퓆.')AND((vt0.c0 IN ()))))OR((0xffffffff985fe6d9 IN ()))))OR(((vt0.c0) NOTNULL))))OR(LIKELIHOOD(DISTINCT vt0.c0, vt0.c0)))))) ORDER BY (~ (CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST, ((vt0.c0) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 END) AND ((((vt0.c0, vt0.c0))=((vt0.c0, vt0.c0))))) INTERSECT SELECT ALL * FROM vt0 WHERE ((((((NULL)) BETWEEN ((vt0.c0)) AND ((vt0.c0)))) ISNULL)) ORDER BY (~ (CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST, ((vt0.c0) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 END) AND ((((vt0.c0, vt0.c0))=((vt0.c0, vt0.c0)))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0, vt0.c0))) NOTNULL));
SELECT * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0, vt0.c0))) NOTNULL))AND((((((((('zZ뗊ꥌ6퓆.')AND((vt0.c0 IN ()))))OR((0xffffffff985fe6d9 IN ()))))OR(((vt0.c0) NOTNULL))))OR(LIKELIHOOD(DISTINCT vt0.c0, vt0.c0)))))) ORDER BY (~ (CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST, ((vt0.c0) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 END) AND ((((vt0.c0, vt0.c0))=((vt0.c0, vt0.c0))))) INTERSECT SELECT ALL * FROM vt0 WHERE ((((((NULL)) BETWEEN ((vt0.c0)) AND ((vt0.c0)))) ISNULL)) ORDER BY (~ (CAST(vt0.c0 AS INTEGER))) DESC  NULLS FIRST, ((vt0.c0) BETWEEN (CASE WHEN vt0.c0 THEN vt0.c0 END) AND ((((vt0.c0, vt0.c0))=((vt0.c0, vt0.c0)))));
SELECT COUNT(*) FROM vt2 NATURAL JOIN vt0 WHERE (((('-614742983', vt2.c1)) NOT BETWEEN ((((((((vt2.c1)AND(vt2.c1)))OR(vt0.c0)))OR(vt0.c0)), ((vt0.c0) BETWEEN (vt2.c0) AND (0.6611263849620276)))) AND ((NULL, TRIM(vt2.c1))))) ORDER BY ((vt2.c1)-('#oe_ꂙ⑝E')) DESC;
SELECT DISTINCT COUNT(*) FROM vt2 NATURAL JOIN vt0 WHERE (((('-614742983', vt2.c1)) NOT BETWEEN ((((((((vt2.c1)AND(vt2.c1)))OR(vt0.c0)))OR(vt0.c0)), ((vt0.c0) BETWEEN (vt2.c0) AND (0.6611263849620276)))) AND ((NULL, TRIM(vt2.c1))))) ORDER BY CAST(vt2.c1 AS NUMERIC) ASC LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 NATURAL JOIN vt0 WHERE (((LOWER(DISTINCT vt2.c1)) NOT BETWEEN (((vt2.c0)<<(vt0.c0))) AND (CAST(vt2.c0 AS REAL)))) ORDER BY CAST(vt2.c1 AS NUMERIC) ASC LIMIT 0x2;
SELECT ALL MIN(vt2.c1) FROM vt2, vt0 WHERE (((CAST(vt0.c0 AS NUMERIC)) IS TRUE));
SELECT DISTINCT MIN(vt2.c1) FROM vt2, vt0 WHERE (((CAST(vt0.c0 AS NUMERIC)) IS TRUE)) LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2, vt0 WHERE (CAST(vt0.c0 AS TEXT)) LIMIT 0;
SELECT MAX(vt2.c0) FROM vt2 WHERE (((+ (vt2.c0)) IN ((vt2.c1 IN (vt2.c1))))) ORDER BY '156028485' ASC  NULLS LAST, CASE WHEN CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN 'HY3' ELSE vt2.c0 END THEN ((((((x'f969')AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)) WHEN vt2.c1 THEN CAST(vt2.c1 AS NUMERIC) WHEN vt2.c0 COLLATE NOCASE THEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)) END DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (((((+ (vt2.c0)) IN ((vt2.c1 IN (vt2.c1)))))AND(((NULL COLLATE BINARY) NOT BETWEEN (vt2.c0 COLLATE BINARY) AND (vt2.c0 COLLATE RTRIM))))) ORDER BY '156028485' ASC  NULLS LAST, CASE WHEN CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN 'HY3' ELSE vt2.c0 END THEN ((((((x'f969')AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)) WHEN vt2.c1 THEN CAST(vt2.c1 AS NUMERIC) WHEN vt2.c0 COLLATE NOCASE THEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)) END DESC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (((((vt2.c1)AND(((((vt2.c0)AND(vt2.c0)))OR(vt2.c0)))))AND(CAST(x'6c35' AS NUMERIC)))) ORDER BY '156028485' ASC  NULLS LAST, CASE WHEN CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN 'HY3' ELSE vt2.c0 END THEN ((((((x'f969')AND(vt2.c1)))OR(vt2.c1)))OR(vt2.c1)) WHEN vt2.c1 THEN CAST(vt2.c1 AS NUMERIC) WHEN vt2.c0 COLLATE NOCASE THEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)) END DESC  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM vt2, v0 WHERE ((NOT (CASE NULL  WHEN vt2.c1 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 ELSE v0.c0 END)));
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE ((NOT (CASE NULL  WHEN vt2.c1 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 ELSE v0.c0 END))) ORDER BY (((vt2.c1)) NOT BETWEEN (((~ (v0.c0)))) AND (('-830707014')))  NULLS LAST, CAST((+ (v0.c3)) AS INTEGER)  NULLS FIRST, CASE v0.c2  WHEN ((v0.c1)+(v0.c2)) THEN LOWER(vt2.c0) ELSE x'4423' END ASC;
SELECT * FROM vt0 INNER JOIN vt2 ON (((vt2.c1)%(v0.c0)) IN ((+ (vt2.c1)))) LEFT OUTER JOIN v0 ON (((vt0.c0)LIKE(v0.c0)) IN ()) WHERE ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c0 END IN ())) ORDER BY v0.c3  NULLS LAST;
SELECT ALL * FROM vt0 INNER JOIN vt2 ON (((vt2.c1)%(v0.c0)) IN ((+ (vt2.c1)))) INNER JOIN v0 ON (((vt0.c0)LIKE(v0.c0)) IN ()) WHERE ((((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c0 END IN ()))AND(((vt0.c0) IS FALSE)))) ORDER BY (- (LIKE(vt2.c1, vt2.c0, '0'))) DESC;
SELECT * FROM vt0 INNER JOIN vt2 ON (((vt2.c1)%(v0.c0)) IN ((+ (vt2.c1)))) LEFT OUTER JOIN v0 ON (((vt0.c0)LIKE(v0.c0)) IN ()) WHERE ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c0 END IN ())) ORDER BY v0.c3  NULLS LAST;
SELECT ALL * FROM vt0 INNER JOIN vt2 ON (((vt2.c1)%(v0.c0)) IN ((+ (vt2.c1)))) INNER JOIN v0 ON (((vt0.c0)LIKE(v0.c0)) IN ()) WHERE ((((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c0 END IN ()))AND(((vt0.c0) IS FALSE)))) ORDER BY (- (LIKE(vt2.c1, vt2.c0, '0'))) DESC;
SELECT MIN(vt2.c0) FROM vt0, vt2 WHERE (NULL);
SELECT DISTINCT MIN(vt2.c0) FROM vt0, vt2 WHERE (NULL) ORDER BY (vt2.c1 IN (vt2.c0)) COLLATE NOCASE  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt0, vt2 WHERE (((((((((((((vt2.c0)||(vt2.c0)))AND(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR(((vt2.c1)=(vt0.c0)))))AND(((vt0.c0)LIKE(vt2.c1)))))OR(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)))))AND(((vt2.c0)GLOB(vt0.c0))))) ORDER BY (vt2.c1 IN (vt2.c0)) COLLATE NOCASE  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE ((((((((((vt2.c0 IN (vt2.c0)))AND(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))))OR(((((((vt2.c0)AND(vt2.c0)))OR(x'5f')))OR(vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt0.c0 WHEN x'' THEN vt2.c0 ELSE vt0.c0 END)))OR(x'' COLLATE NOCASE))) ORDER BY (((vt2.c1 IN (vt2.c1))) ISNULL), ((NULL)IS((~ (vt2.c0)))) ASC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE ((((((((((vt2.c0 IN (vt2.c0)))AND(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))))OR(((((((vt2.c0)AND(vt2.c0)))OR(x'5f')))OR(vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt0.c0 WHEN x'' THEN vt2.c0 ELSE vt0.c0 END)))OR(x'' COLLATE NOCASE))) ORDER BY (((vt2.c1 IN (vt2.c1))) ISNULL), ((NULL)IS((~ (vt2.c0)))) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt0, vt2 WHERE ((((((((((vt2.c0 IN (vt2.c0)))AND(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))))OR(((((((vt2.c0)AND(vt2.c0)))OR(x'5f')))OR(vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt0.c0 WHEN x'' THEN vt2.c0 ELSE vt0.c0 END)))OR(x'' COLLATE NOCASE))) ORDER BY (((vt2.c1 IN (vt2.c1))) ISNULL), ((NULL)IS((~ (vt2.c0)))) ASC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE ((((((((((vt2.c0 IN (vt2.c0)))AND(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))))OR(((((((vt2.c0)AND(vt2.c0)))OR(x'5f')))OR(vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt0.c0 WHEN x'' THEN vt2.c0 ELSE vt0.c0 END)))OR(x'' COLLATE NOCASE))) ORDER BY (((vt2.c1 IN (vt2.c1))) ISNULL), ((NULL)IS((~ (vt2.c0)))) ASC  NULLS LAST LIMIT 2;
SELECT MAX(vt2.c1) FROM vt2 NATURAL JOIN v0 INNER JOIN vt0 ON ((((((((((((vt2.c1)OR(v0.c1)))OR(vt2.c1)))OR(vt2.c1)))AND(((v0.c0)%(vt0.c0)))))AND(v0.c1)))OR((((v0.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))))) WHERE (LAST_INSERT_ROWID());
SELECT ALL MAX(vt2.c1) FROM vt2 NATURAL JOIN v0 INNER JOIN vt0 ON ((((((((((((vt2.c1)OR(v0.c1)))OR(vt2.c1)))OR(vt2.c1)))AND(((v0.c0)%(vt0.c0)))))AND(v0.c1)))OR((((v0.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))))) WHERE (((LAST_INSERT_ROWID())AND(((((vt2.c1)OR(v0.c0)))/(((v0.c1) BETWEEN (0.8810662676021138) AND (v0.c2)))))));
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (UNICODE(((((v0.c2)AND(vt2.c1)))AND(v0.c2)))) ORDER BY TRIM(DISTINCT ((vt2.c0) IS FALSE), ((x'eb6800') NOT BETWEEN (0.25162984418237) AND (v0.c1))) ASC;
SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (UNICODE(((((v0.c2)AND(vt2.c1)))AND(v0.c2)))) ORDER BY TRIM(DISTINCT ((vt2.c0) IS FALSE), ((x'eb6800') NOT BETWEEN (0.25162984418237) AND (v0.c1))) ASC INTERSECT SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c3) AND (x'6a'))) IS FALSE)) ORDER BY TRIM(DISTINCT ((vt2.c0) IS FALSE), ((x'eb6800') NOT BETWEEN (0.25162984418237) AND (v0.c1))) ASC;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (UNICODE(((((v0.c2)AND(vt2.c1)))AND(v0.c2)))) ORDER BY TRIM(DISTINCT ((vt2.c0) IS FALSE), ((x'eb6800') NOT BETWEEN (0.25162984418237) AND (v0.c1))) ASC;
SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (UNICODE(((((v0.c2)AND(vt2.c1)))AND(v0.c2)))) ORDER BY TRIM(DISTINCT ((vt2.c0) IS FALSE), ((x'eb6800') NOT BETWEEN (0.25162984418237) AND (v0.c1))) ASC INTERSECT SELECT DISTINCT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((((v0.c2) NOT BETWEEN (v0.c3) AND (x'6a'))) IS FALSE)) ORDER BY TRIM(DISTINCT ((vt2.c0) IS FALSE), ((x'eb6800') NOT BETWEEN (0.25162984418237) AND (v0.c1))) ASC;
SELECT * FROM vt2 WHERE ((('') BETWEEN ((- (vt2.c1))) AND (NULL)));
SELECT DISTINCT * FROM vt2 WHERE ((((('') BETWEEN ((- (vt2.c1))) AND (NULL)))AND(((((((((((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN NULL END)AND(((vt2.c0)==(vt2.c1)))))AND(CAST(0.0032103397634650754 AS BLOB))))AND((~ (vt2.c0)))))OR(((vt2.c1)>>(vt2.c1)))))AND(vt2.c0 COLLATE NOCASE))))) ORDER BY ((vt2.c1 COLLATE BINARY) NOTNULL), NULL INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)IS(CAST(vt2.c1 AS TEXT)))) ORDER BY ((vt2.c1 COLLATE BINARY) NOTNULL), NULL;
SELECT * FROM vt2 WHERE ((('') BETWEEN ((- (vt2.c1))) AND (NULL)));
SELECT DISTINCT * FROM vt2 WHERE ((((('') BETWEEN ((- (vt2.c1))) AND (NULL)))AND(((((((((((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN NULL END)AND(((vt2.c0)==(vt2.c1)))))AND(CAST(0.0032103397634650754 AS BLOB))))AND((~ (vt2.c0)))))OR(((vt2.c1)>>(vt2.c1)))))AND(vt2.c0 COLLATE NOCASE))))) ORDER BY ((vt2.c1 COLLATE BINARY) NOTNULL), NULL INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)IS(CAST(vt2.c1 AS TEXT)))) ORDER BY ((vt2.c1 COLLATE BINARY) NOTNULL), NULL;
SELECT * FROM vt2 WHERE (0.2127197910759725) ORDER BY TRIM(DISTINCT CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END, vt2.c0)  NULLS LAST, ABS(CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 END);
SELECT DISTINCT * FROM vt2 WHERE (0.2127197910759725) ORDER BY TRIM(DISTINCT CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END, vt2.c0)  NULLS LAST, ABS(CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 END) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((vt2.c0 COLLATE NOCASE) BETWEEN (((NULL) NOTNULL)) AND (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END))) ORDER BY TRIM(DISTINCT CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END, vt2.c0)  NULLS LAST, ABS(CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 END);
SELECT * FROM vt2 WHERE (0.2127197910759725) ORDER BY TRIM(DISTINCT CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END, vt2.c0)  NULLS LAST, ABS(CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 END);
SELECT DISTINCT * FROM vt2 WHERE (0.2127197910759725) ORDER BY TRIM(DISTINCT CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END, vt2.c0)  NULLS LAST, ABS(CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 END) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((vt2.c0 COLLATE NOCASE) BETWEEN (((NULL) NOTNULL)) AND (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END))) ORDER BY TRIM(DISTINCT CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END, vt2.c0)  NULLS LAST, ABS(CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 END);
SELECT * FROM vt2, vt0 WHERE ((((((((((vt2.c1))==((vt2.c0))))OR(vt2.c0)))OR((~ (NULL)))))AND(vt2.c0 COLLATE RTRIM))) ORDER BY (+ (vt0.c0))  NULLS LAST, (+ (((NULL)%('d'))))  NULLS LAST, ((SQLITE_SOURCE_ID())-(((vt2.c1) NOTNULL)))  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((((((((((vt2.c1))=((vt2.c0))))OR(vt2.c0)))OR((~ (NULL)))))AND(vt2.c0 COLLATE RTRIM)))AND(vt2.c0))) ORDER BY (+ (vt0.c0))  NULLS LAST, (+ (((NULL)%('d'))))  NULLS LAST, ((SQLITE_SOURCE_ID())-(((vt2.c1) NOTNULL)))  NULLS FIRST LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (0.5316537759387888) ORDER BY (+ (vt0.c0))  NULLS LAST, (+ (((NULL)%('d'))))  NULLS LAST, ((SQLITE_SOURCE_ID())-(((vt2.c1) NOTNULL)))  NULLS FIRST LIMIT 0X3;
SELECT * FROM vt2, vt0 WHERE ((((((((((vt2.c1))==((vt2.c0))))OR(vt2.c0)))OR((~ (NULL)))))AND(vt2.c0 COLLATE RTRIM))) ORDER BY (+ (vt0.c0))  NULLS LAST, (+ (((NULL)%('d'))))  NULLS LAST, ((SQLITE_SOURCE_ID())-(((vt2.c1) NOTNULL)))  NULLS FIRST;
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((((((((((vt2.c1))=((vt2.c0))))OR(vt2.c0)))OR((~ (NULL)))))AND(vt2.c0 COLLATE RTRIM)))AND(vt2.c0))) ORDER BY (+ (vt0.c0))  NULLS LAST, (+ (((NULL)%('d'))))  NULLS LAST, ((SQLITE_SOURCE_ID())-(((vt2.c1) NOTNULL)))  NULLS FIRST LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (0.5316537759387888) ORDER BY (+ (vt0.c0))  NULLS LAST, (+ (((NULL)%('d'))))  NULLS LAST, ((SQLITE_SOURCE_ID())-(((vt2.c1) NOTNULL)))  NULLS FIRST LIMIT 0X3;
SELECT * FROM v0 WHERE (((CASE v0.c3  WHEN v0.c3 THEN v0.c3 END) IS FALSE));
SELECT * FROM v0 WHERE (((CASE v0.c3  WHEN v0.c3 THEN v0.c3 END) IS FALSE)) INTERSECT SELECT * FROM v0 WHERE (((((v0.c2)+(v0.c2)))<<(v0.c3 COLLATE NOCASE)));
SELECT * FROM v0 WHERE (((CASE v0.c3  WHEN v0.c3 THEN v0.c3 END) IS FALSE));
SELECT * FROM v0 WHERE (((CASE v0.c3  WHEN v0.c3 THEN v0.c3 END) IS FALSE)) INTERSECT SELECT * FROM v0 WHERE (((((v0.c2)+(v0.c2)))<<(v0.c3 COLLATE NOCASE)));
SELECT ALL * FROM vt0 WHERE ('');
SELECT DISTINCT * FROM vt0 WHERE ('') ORDER BY vt0.c0  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ('');
SELECT DISTINCT * FROM vt0 WHERE ('') ORDER BY vt0.c0  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((0.7761393591469311) BETWEEN (v0.c0) AND (v0.c0)) COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (((0.7761393591469311) BETWEEN (v0.c0) AND (v0.c0)) COLLATE RTRIM) ORDER BY ((v0.c0)/(v0.c1)) COLLATE NOCASE ASC, ((((((((1614603001)OR(v0.c0)))AND(v0.c2)))AND(v0.c3))) IS FALSE)  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM v0 WHERE (((0.7761393591469311) BETWEEN (v0.c0) AND (v0.c0)) COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE (((0.7761393591469311) BETWEEN (v0.c0) AND (v0.c0)) COLLATE RTRIM) ORDER BY ((v0.c0)/(v0.c1)) COLLATE NOCASE ASC, ((((((((1614603001)OR(v0.c0)))AND(v0.c2)))AND(v0.c3))) IS FALSE)  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt2, v0 WHERE ((- (((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c0))))) ORDER BY (((((v0.c2)) BETWEEN ((v0.c3)) AND ((vt2.c1)))) NOT BETWEEN ((((v0.c0, v0.c2)) BETWEEN ((v0.c1, v0.c3)) AND (('-778785764', v0.c1)))) AND (v0.c2 COLLATE NOCASE))  NULLS LAST;
SELECT * FROM vt2, v0 WHERE ((((- (((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c0)))))AND((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN ((CAST(vt2.c0 AS REAL), x'59', CASE v0.c2  WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END)) AND ((0.28326504583753975 COLLATE RTRIM, v0.c1, ((vt2.c0)||(vt2.c1)))))))) ORDER BY 0x7412a12c ASC  NULLS FIRST, ((UPPER(v0.c0)) ISNULL) ASC LIMIT 0;
SELECT * FROM vt2, v0 WHERE ((- (((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c0))))) ORDER BY (((((v0.c2)) BETWEEN ((v0.c3)) AND ((vt2.c1)))) NOT BETWEEN ((((v0.c0, v0.c2)) BETWEEN ((v0.c1, v0.c3)) AND (('-778785764', v0.c1)))) AND (v0.c2 COLLATE NOCASE))  NULLS LAST;
SELECT * FROM vt2, v0 WHERE ((((- (((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c0)))))AND((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN ((CAST(vt2.c0 AS REAL), x'59', CASE v0.c2  WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END)) AND ((0.28326504583753975 COLLATE RTRIM, v0.c1, ((vt2.c0)||(vt2.c1)))))))) ORDER BY 0x7412a12c ASC  NULLS FIRST, ((UPPER(v0.c0)) ISNULL) ASC LIMIT 0;
SELECT * FROM vt0 WHERE ((~ (CAST(vt0.c0 AS BLOB)))) ORDER BY vt0.c0 COLLATE RTRIM;
SELECT DISTINCT * FROM vt0 WHERE ((~ (CAST(vt0.c0 AS BLOB)))) ORDER BY (((vt0.c0, vt0.c0)) BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, vt0.c0 COLLATE BINARY)) AND ((json(vt0.c0), (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((x'fcb2'))))))  NULLS FIRST, CAST(x'ce' AS REAL) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (rtreenode(NULL, (vt0.c0 IN (vt0.c0)))) ORDER BY (((vt0.c0, vt0.c0)) BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, vt0.c0 COLLATE BINARY)) AND ((json(vt0.c0), (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((x'fcb2'))))))  NULLS FIRST, CAST(x'ce' AS REAL) LIMIT 0X2;
SELECT * FROM vt0 WHERE ((~ (CAST(vt0.c0 AS BLOB)))) ORDER BY vt0.c0 COLLATE RTRIM;
SELECT DISTINCT * FROM vt0 WHERE ((~ (CAST(vt0.c0 AS BLOB)))) ORDER BY (((vt0.c0, vt0.c0)) BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, vt0.c0 COLLATE BINARY)) AND ((json(vt0.c0), (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((x'fcb2'))))))  NULLS FIRST, CAST(x'ce' AS REAL) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (rtreenode(NULL, (vt0.c0 IN (vt0.c0)))) ORDER BY (((vt0.c0, vt0.c0)) BETWEEN ((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, vt0.c0 COLLATE BINARY)) AND ((json(vt0.c0), (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((x'fcb2'))))))  NULLS FIRST, CAST(x'ce' AS REAL) LIMIT 0X2;
SELECT * FROM vt0 INNER JOIN vt2 ON CAST(((((((((((((vt2.c1)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(v0.c3)))AND(vt0.c0)) AS REAL) LEFT OUTER JOIN v0 ON ((x'')IS(((NULL) NOT NULL))) WHERE (((((vt2.c1)>(0.6015802904256462))) ISNULL));
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON CAST(((((((((((((vt2.c1)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(v0.c3)))AND(vt0.c0)) AS REAL) LEFT OUTER JOIN v0 ON ((x'')IS(((NULL) NOT NULL))) WHERE (((((vt2.c1)>(0.6015802904256462))) ISNULL)) LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON CAST(((((((((((((vt2.c1)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(v0.c3)))AND(vt0.c0)) AS REAL) LEFT OUTER JOIN v0 ON ((x'')IS(((NULL) NOT NULL))) WHERE (0.19226954090587167) LIMIT 3;
SELECT * FROM vt0 INNER JOIN vt2 ON CAST(((((((((((((vt2.c1)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(v0.c3)))AND(vt0.c0)) AS REAL) LEFT OUTER JOIN v0 ON ((x'')IS(((NULL) NOT NULL))) WHERE (((((vt2.c1)>(0.6015802904256462))) ISNULL));
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON CAST(((((((((((((vt2.c1)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(v0.c3)))AND(vt0.c0)) AS REAL) LEFT OUTER JOIN v0 ON ((x'')IS(((NULL) NOT NULL))) WHERE (((((vt2.c1)>(0.6015802904256462))) ISNULL)) LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON CAST(((((((((((((vt2.c1)AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(v0.c3)))AND(vt0.c0)) AS REAL) LEFT OUTER JOIN v0 ON ((x'')IS(((NULL) NOT NULL))) WHERE (0.19226954090587167) LIMIT 3;
SELECT * FROM v0, vt2, vt0 WHERE (((CASE ''  WHEN v0.c0 THEN v0.c3 ELSE v0.c0 END) BETWEEN (v0.c1) AND (((vt2.c1)AND(vt0.c0))))) ORDER BY (+ (v0.c3 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE (((((CASE ''  WHEN v0.c0 THEN v0.c3 ELSE v0.c0 END) BETWEEN (v0.c1) AND (((vt2.c1)AND(vt0.c0)))))AND(COALESCE(LOWER(vt2.c1), (~ (v0.c3)))))) ORDER BY (v0.c2 IN ())  NULLS FIRST, CASE ((v0.c0)>(v0.c1))  WHEN ((vt2.c0)>>(vt2.c1)) THEN ((v0.c1)>=(v0.c2)) WHEN CAST(vt0.c0 AS REAL) THEN HEX(v0.c1) END, v0.c2 DESC LIMIT 0X5;
SELECT * FROM v0, vt2, vt0 WHERE (((CASE ''  WHEN v0.c0 THEN v0.c3 ELSE v0.c0 END) BETWEEN (v0.c1) AND (((vt2.c1)AND(vt0.c0))))) ORDER BY (+ (v0.c3 COLLATE NOCASE)) DESC  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE (((((CASE ''  WHEN v0.c0 THEN v0.c3 ELSE v0.c0 END) BETWEEN (v0.c1) AND (((vt2.c1)AND(vt0.c0)))))AND(COALESCE(LOWER(vt2.c1), (~ (v0.c3)))))) ORDER BY (v0.c2 IN ())  NULLS FIRST, CASE ((v0.c0)>(v0.c1))  WHEN ((vt2.c0)>>(vt2.c1)) THEN ((v0.c1)>=(v0.c2)) WHEN CAST(vt0.c0 AS REAL) THEN HEX(v0.c1) END, v0.c2 DESC LIMIT 0X5;
SELECT ALL MIN(v0.c3) FROM vt2, v0 WHERE (((((((((((((v0.c3)OR(vt2.c1)))OR(v0.c0)))OR(vt2.c0)))OR(v0.c1)))AND(((v0.c3)IS(0X2dffcedb)))))AND(CASE WHEN vt2.c0 THEN v0.c3 WHEN vt2.c1 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 WHEN v0.c0 THEN '-197496816' END)));
SELECT ALL MIN(v0.c3) FROM vt2, v0 WHERE (((((((((((((((v0.c3)OR(vt2.c1)))OR(v0.c0)))OR(vt2.c0)))OR(v0.c1)))AND(((v0.c3)IS(771739355)))))AND(CASE WHEN vt2.c0 THEN v0.c3 WHEN vt2.c1 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 WHEN v0.c0 THEN '-197496816' END)))AND(((((v0.c1) ISNULL))%(CASE WHEN vt2.c1 THEN v0.c2 WHEN NULL THEN v0.c3 END))))) LIMIT 0x0;
SELECT MAX(vt2.c0) FROM vt2, vt0, v0 WHERE (((((v0.c2)*(vt2.c1)))<>(0X7a239101))) ORDER BY DATE(((v0.c2)<<(vt2.c1)), v0.c3 COLLATE RTRIM, ((v0.c2)<<(v0.c1)), ((v0.c1) BETWEEN (v0.c2) AND (v0.c2))) DESC  NULLS LAST, CAST((v0.c1 IN (v0.c3)) AS INTEGER);
SELECT MAX(vt2.c0) FROM vt2, vt0, v0 WHERE (((((((v0.c2)*(vt2.c1)))!=(0X7a239101)))AND((+ (((v0.c2) BETWEEN (v0.c2) AND (v0.c1))))))) ORDER BY DATE(((v0.c2)<<(vt2.c1)), v0.c3 COLLATE RTRIM, ((v0.c2)<<(v0.c1)), ((v0.c1) BETWEEN (v0.c2) AND (v0.c2))) DESC  NULLS LAST, CAST((v0.c1 IN (v0.c3)) AS INTEGER);
SELECT COUNT(*) FROM vt2 WHERE ((((('1831516531')>(vt2.c0))) BETWEEN (CAST(vt2.c0 AS NUMERIC)) AND (vt2.c0))) ORDER BY ((0.7387652307385958)|(((((((((0.3991809223610011)OR(vt2.c0)))OR(x'')))OR(vt2.c1)))AND(vt2.c1)))) DESC, ((((((((((vt2.c1) NOT NULL))AND(vt2.c1)))AND((vt2.c0 IN (vt2.c1)))))AND(CAST(vt2.c0 AS NUMERIC))))OR(((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt2 WHERE ((((('1831516531')>(vt2.c0))) BETWEEN (CAST(vt2.c0 AS NUMERIC)) AND (vt2.c0))) ORDER BY ((((((((((((vt2.c1)GLOB(vt2.c1)))AND((('') IS TRUE))))AND(TRIM(DISTINCT 0.7075865743364551, vt2.c0))))OR(x'')))AND(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END)))OR(((vt2.c1) NOT NULL))) ASC  NULLS LAST LIMIT 0x1;
SELECT ALL COUNT(*) FROM v0 WHERE (((((((((((CAST(-986634945 AS INTEGER))AND(CAST(v0.c0 AS REAL))))OR(((v0.c3) ISNULL))))AND((v0.c3 IN (v0.c0, v0.c3)))))OR((((v0.c2, v0.c2))<=((v0.c3, v0.c2))))))OR(((v0.c3)%(v0.c3))))) ORDER BY (((+ (v0.c0)))OR(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))));
SELECT ALL COUNT(*) FROM v0 WHERE (((((((((((((CAST(0xffffffffc531253f AS INTEGER))AND(CAST(v0.c0 AS REAL))))OR(((v0.c3) ISNULL))))AND((v0.c3 IN (v0.c0)))))OR((((v0.c2, v0.c2))=((v0.c3, v0.c2))))))OR(((v0.c3)%(v0.c3)))))AND(CAST((v0.c0 IN ()) AS TEXT)))) ORDER BY ((((((v0.c1)OR(v0.c0)))OR(v0.c0)))IS(((v0.c2) IS FALSE)))  NULLS FIRST, ((((((v0.c1, v0.c3, v0.c3)) BETWEEN ((v0.c1, v0.c0, v0.c3)) AND ((x'07f509', v0.c1, x''))), NULL))>((SQLITE_VERSION(), ((v0.c0)<=(v0.c0)))))  NULLS LAST, ((CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN v0.c3 END) NOT BETWEEN (((v0.c2) NOTNULL)) AND (((((((((((v0.c0)AND('-1459080318')))AND(v0.c2)))AND(v0.c1)))OR(0.5136878169807817)))AND(v0.c2))))  NULLS FIRST INTERSECT SELECT COUNT(*) FROM v0 WHERE ((((v0.c3, v0.c2)) BETWEEN ((((v0.c0) IS TRUE), CAST(v0.c0 AS TEXT))) AND ((((v0.c1)+(v0.c3)), v0.c0)))) ORDER BY ((((((v0.c1)OR(v0.c0)))OR(v0.c0)))IS(((v0.c2) IS FALSE)))  NULLS FIRST, ((((((v0.c1, v0.c3, v0.c3)) BETWEEN ((v0.c1, v0.c0, v0.c3)) AND ((x'07f509', v0.c1, x''))), NULL))>((SQLITE_VERSION(), ((v0.c0)<=(v0.c0)))))  NULLS LAST, ((CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN v0.c3 END) NOT BETWEEN (((v0.c2) NOTNULL)) AND (((((((((((v0.c0)AND('-1459080318')))AND(v0.c2)))AND(v0.c1)))OR(0.5136878169807817)))AND(v0.c2))))  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE (((((v0.c2) BETWEEN (vt2.c0) AND (v0.c1)))>=(CAST(v0.c2 AS INTEGER))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((((((v0.c2) BETWEEN (vt2.c0) AND (v0.c1)))==(CAST(v0.c2 AS INTEGER))))AND((((~ (vt2.c0)))+(((vt2.c0)>(v0.c2))))))) LIMIT 0x4;
SELECT * FROM v0, vt2, vt0 WHERE (((((v0.c2) BETWEEN (vt2.c0) AND (v0.c1)))>=(CAST(v0.c2 AS INTEGER))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((((((v0.c2) BETWEEN (vt2.c0) AND (v0.c1)))==(CAST(v0.c2 AS INTEGER))))AND((((~ (vt2.c0)))+(((vt2.c0)>(v0.c2))))))) LIMIT 0x4;
SELECT ALL * FROM v0, vt0 WHERE (NULL);
SELECT DISTINCT * FROM v0, vt0 WHERE (NULL) ORDER BY CASE (+ (v0.c0))  WHEN v0.c3 THEN 'V67
,*vz?' END DESC  NULLS FIRST, CAST(v0.c2 COLLATE NOCASE AS INTEGER)  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (NULL);
SELECT DISTINCT * FROM v0, vt0 WHERE (NULL) ORDER BY CASE (+ (v0.c0))  WHEN v0.c3 THEN 'V67
,*vz?' END DESC  NULLS FIRST, CAST(v0.c2 COLLATE NOCASE AS INTEGER)  NULLS FIRST;
SELECT ALL * FROM v0, vt2 WHERE (((TRIM(DISTINCT v0.c3, v0.c2)) NOT NULL)) ORDER BY CAST(x'61' AS INTEGER) DESC, ((((((((((v0.c1) NOTNULL))OR(COALESCE(DISTINCT vt2.c0, vt2.c1))))AND(vt2.c0 COLLATE BINARY)))OR(v0.c2 COLLATE BINARY)))OR(((v0.c1)OR(v0.c2)))) ASC, (((0.5946534327346095, v0.c2)) BETWEEN ((v0.c0 COLLATE RTRIM, v0.c3)) AND ((CAST(v0.c1 AS INTEGER), UPPER(v0.c1))))  NULLS LAST;
SELECT ALL * FROM v0, vt2 WHERE (((TRIM(DISTINCT v0.c3, v0.c2)) NOT NULL)) ORDER BY (NOT (NULL)) DESC, ((((((vt2.c1)AND(v0.c3)))OR(v0.c2))) NOT BETWEEN (v0.c3 COLLATE RTRIM) AND (vt2.c0)) LIMIT 0X0 INTERSECT SELECT ALL * FROM v0, vt2 WHERE (CASE WHEN ((v0.c1)<=(x'')) THEN (('843436582') NOTNULL) WHEN v0.c0 THEN ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c0)) END) ORDER BY (NOT (NULL)) DESC, ((((((vt2.c1)AND(v0.c3)))OR(v0.c2))) NOT BETWEEN (v0.c3 COLLATE RTRIM) AND (vt2.c0)) LIMIT 0X0;
SELECT ALL * FROM v0, vt2 WHERE (((TRIM(DISTINCT v0.c3, v0.c2)) NOT NULL)) ORDER BY CAST(x'61' AS INTEGER) DESC, ((((((((((v0.c1) NOTNULL))OR(COALESCE(DISTINCT vt2.c0, vt2.c1))))AND(vt2.c0 COLLATE BINARY)))OR(v0.c2 COLLATE BINARY)))OR(((v0.c1)OR(v0.c2)))) ASC, (((0.5946534327346095, v0.c2)) BETWEEN ((v0.c0 COLLATE RTRIM, v0.c3)) AND ((CAST(v0.c1 AS INTEGER), UPPER(v0.c1))))  NULLS LAST;
SELECT ALL * FROM v0, vt2 WHERE (((TRIM(DISTINCT v0.c3, v0.c2)) NOT NULL)) ORDER BY (NOT (NULL)) DESC, ((((((vt2.c1)AND(v0.c3)))OR(v0.c2))) NOT BETWEEN (v0.c3 COLLATE RTRIM) AND (vt2.c0)) LIMIT 0X0 INTERSECT SELECT ALL * FROM v0, vt2 WHERE (CASE WHEN ((v0.c1)<=(x'')) THEN (('843436582') NOTNULL) WHEN v0.c0 THEN ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c0)) END) ORDER BY (NOT (NULL)) DESC, ((((((vt2.c1)AND(v0.c3)))OR(v0.c2))) NOT BETWEEN (v0.c3 COLLATE RTRIM) AND (vt2.c0)) LIMIT 0X0;
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (CAST(vt0.c0 COLLATE RTRIM AS NUMERIC));
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (((CAST(vt0.c0 COLLATE RTRIM AS NUMERIC))AND((CAST(vt0.c0 AS TEXT) IN ())))) LIMIT 1 INTERSECT SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE ((((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((0.615977106827581)))) IS FALSE)) LIMIT 1;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE ((~ ((- (vt0.c0)))));
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE ((((~ ((- (vt0.c0)))))AND(((((((((((((vt2.c0)||(vt2.c1)))AND(CAST(vt2.c0 AS TEXT))))OR(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)))))AND(vt2.c0 COLLATE RTRIM)))OR(((((((vt0.c0)AND(vt2.c0)))AND(vt2.c0)))OR(vt2.c1)))))OR((NOT (vt2.c0)))))));
SELECT ALL * FROM vt2 NOT INDEXED, v0, vt0 WHERE (CAST(v0.c1 AS REAL)) ORDER BY (json_remove(v0.c0, vt2.c1, vt2.c0) IN ((vt0.c0 IN (vt2.c0, -1.7976931348623157E308, vt0.c0, v0.c1)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((CAST(v0.c1 AS REAL))AND(CAST(((vt2.c1) NOT BETWEEN (v0.c1) AND (vt2.c0)) AS NUMERIC)))) ORDER BY (json_remove(v0.c0, vt2.c1, vt2.c0) IN ((vt0.c0 IN (vt2.c0, -1.7976931348623157E308, vt0.c0, v0.c1)))) DESC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (CASE CAST(v0.c1 AS TEXT)  WHEN ((vt2.c0)==(vt2.c0)) THEN (~ (vt0.c0)) WHEN (vt0.c0 IN (vt2.c0)) THEN ((((((((vt0.c0)AND(vt2.c0)))OR(v0.c2)))AND(v0.c2)))OR(v0.c3)) WHEN ((vt2.c1)-(vt2.c0)) THEN ((((((((v0.c1)OR(v0.c1)))AND(v0.c3)))OR(v0.c3)))AND(v0.c3)) ELSE ((vt0.c0)>(vt2.c1)) END) ORDER BY (json_remove(v0.c0, vt2.c1, vt2.c0) IN ((vt0.c0 IN (vt2.c0, -1.7976931348623157E308, vt0.c0, v0.c1)))) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt2 NOT INDEXED, v0, vt0 WHERE (CAST(v0.c1 AS REAL)) ORDER BY (json_remove(v0.c0, vt2.c1, vt2.c0) IN ((vt0.c0 IN (vt2.c0, -1.7976931348623157E308, vt0.c0, v0.c1)))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((CAST(v0.c1 AS REAL))AND(CAST(((vt2.c1) NOT BETWEEN (v0.c1) AND (vt2.c0)) AS NUMERIC)))) ORDER BY (json_remove(v0.c0, vt2.c1, vt2.c0) IN ((vt0.c0 IN (vt2.c0, -1.7976931348623157E308, vt0.c0, v0.c1)))) DESC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (CASE CAST(v0.c1 AS TEXT)  WHEN ((vt2.c0)==(vt2.c0)) THEN (~ (vt0.c0)) WHEN (vt0.c0 IN (vt2.c0)) THEN ((((((((vt0.c0)AND(vt2.c0)))OR(v0.c2)))AND(v0.c2)))OR(v0.c3)) WHEN ((vt2.c1)-(vt2.c0)) THEN ((((((((v0.c1)OR(v0.c1)))AND(v0.c3)))OR(v0.c3)))AND(v0.c3)) ELSE ((vt0.c0)>(vt2.c1)) END) ORDER BY (json_remove(v0.c0, vt2.c1, vt2.c0) IN ((vt0.c0 IN (vt2.c0, -1.7976931348623157E308, vt0.c0, v0.c1)))) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt0 NOT INDEXED WHERE (x'');
SELECT DISTINCT * FROM vt0 WHERE (((x'')AND((((vt0.c0))>((((vt0.c0)IS NOT(vt0.c0)))))))) ORDER BY '{N(' DESC  NULLS LAST, '2_I('  NULLS FIRST, ((vt0.c0)LIKE(vt0.c0)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT * FROM vt0 NOT INDEXED WHERE (x'');
SELECT DISTINCT * FROM vt0 WHERE (((x'')AND((((vt0.c0))>((((vt0.c0)IS NOT(vt0.c0)))))))) ORDER BY '{N(' DESC  NULLS LAST, '2_I('  NULLS FIRST, ((vt0.c0)LIKE(vt0.c0)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT * FROM vt2, vt0, v0 WHERE (((CAST(v0.c1 AS REAL)) IS TRUE)) ORDER BY ((((v0.c3)-(v0.c0)))>>((NOT (v0.c1)))) DESC  NULLS LAST, x'cd' DESC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(v0.c1 AS REAL)) IS TRUE)) ORDER BY (((~ (vt2.c0)))OR(CAST(x'2d6a2f' AS NUMERIC))) DESC  NULLS FIRST, ((((vt2.c1)*(v0.c0))) NOT BETWEEN ((((v0.c0, v0.c3, vt2.c0, vt2.c1, vt2.c0))<((vt2.c0, v0.c0, v0.c0, v0.c3, x'dc11')))) AND (v0.c2 COLLATE NOCASE)), ((TOTAL_CHANGES())=(vt2.c1 COLLATE BINARY)) DESC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt2, vt0, v0 WHERE (((CAST(v0.c1 AS REAL)) IS TRUE)) ORDER BY ((((v0.c3)-(v0.c0)))>>((NOT (v0.c1)))) DESC  NULLS LAST, x'cd' DESC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(v0.c1 AS REAL)) IS TRUE)) ORDER BY (((~ (vt2.c0)))OR(CAST(x'2d6a2f' AS NUMERIC))) DESC  NULLS FIRST, ((((vt2.c1)*(v0.c0))) NOT BETWEEN ((((v0.c0, v0.c3, vt2.c0, vt2.c1, vt2.c0))<((vt2.c0, v0.c0, v0.c0, v0.c3, x'dc11')))) AND (v0.c2 COLLATE NOCASE)), ((TOTAL_CHANGES())=(vt2.c1 COLLATE BINARY)) DESC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((((((vt0.c0) BETWEEN (vt2.c0) AND (vt0.c0)))AND(CAST(v0.c3 AS TEXT))))OR(vt0.c0)))AND((v0.c3 IN (v0.c0)))));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((((((((vt0.c0) BETWEEN (vt2.c0) AND (vt0.c0)))AND(CAST(v0.c3 AS TEXT))))OR(vt0.c0)))AND((v0.c3 IN (v0.c0))))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((((1461704281)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0)))) NOT BETWEEN (((v0.c2)AND(v0.c1))) AND ((+ (v0.c3))))) LIMIT 3;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((((((vt0.c0) BETWEEN (vt2.c0) AND (vt0.c0)))AND(CAST(v0.c3 AS TEXT))))OR(vt0.c0)))AND((v0.c3 IN (v0.c0)))));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((((((((vt0.c0) BETWEEN (vt2.c0) AND (vt0.c0)))AND(CAST(v0.c3 AS TEXT))))OR(vt0.c0)))AND((v0.c3 IN (v0.c0))))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((((1461704281)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0)))) NOT BETWEEN (((v0.c2)AND(v0.c1))) AND ((+ (v0.c3))))) LIMIT 3;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN (x'a758b9'))) IS TRUE)) ORDER BY (+ ((+ (vt0.c0))))  NULLS LAST, CASE WHEN ((vt0.c0) NOTNULL) THEN ((vt0.c0) NOT NULL) WHEN x'87' THEN CASE vt0.c0  WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END WHEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) ELSE ('1953539218' IN (NULL, vt0.c0, vt0.c0)) END DESC, (+ ((((x'a274e8'))>=((vt0.c0))))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0 IN (x'a758b9'))) IS TRUE)) ORDER BY (+ ((+ (vt0.c0))))  NULLS LAST, CASE WHEN ((vt0.c0) NOTNULL) THEN ((vt0.c0) NOT NULL) WHEN x'87' THEN CASE vt0.c0  WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END WHEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) ELSE ('1953539218' IN (NULL, vt0.c0, vt0.c0)) END DESC, (+ ((((x'a274e8'))>=((vt0.c0))))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0))) ISNULL)) ORDER BY (+ ((+ (vt0.c0))))  NULLS LAST, CASE WHEN ((vt0.c0) NOTNULL) THEN ((vt0.c0) NOT NULL) WHEN x'87' THEN CASE vt0.c0  WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END WHEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) ELSE ('1953539218' IN (NULL, vt0.c0, vt0.c0)) END DESC, (+ ((((x'a274e8'))>=((vt0.c0))))) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN (x'a758b9'))) IS TRUE)) ORDER BY (+ ((+ (vt0.c0))))  NULLS LAST, CASE WHEN ((vt0.c0) NOTNULL) THEN ((vt0.c0) NOT NULL) WHEN x'87' THEN CASE vt0.c0  WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END WHEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) ELSE ('1953539218' IN (NULL, vt0.c0, vt0.c0)) END DESC, (+ ((((x'a274e8'))>=((vt0.c0))))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE ((((vt0.c0 IN (x'a758b9'))) IS TRUE)) ORDER BY (+ ((+ (vt0.c0))))  NULLS LAST, CASE WHEN ((vt0.c0) NOTNULL) THEN ((vt0.c0) NOT NULL) WHEN x'87' THEN CASE vt0.c0  WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END WHEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) ELSE ('1953539218' IN (NULL, vt0.c0, vt0.c0)) END DESC, (+ ((((x'a274e8'))>=((vt0.c0))))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0))) ISNULL)) ORDER BY (+ ((+ (vt0.c0))))  NULLS LAST, CASE WHEN ((vt0.c0) NOTNULL) THEN ((vt0.c0) NOT NULL) WHEN x'87' THEN CASE vt0.c0  WHEN NULL THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END WHEN ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) ELSE ('1953539218' IN (NULL, vt0.c0, vt0.c0)) END DESC, (+ ((((x'a274e8'))>=((vt0.c0))))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((v0.c2 COLLATE BINARY)AND(((vt0.c0)<<(v0.c3))))) ORDER BY (- (CASE v0.c2  WHEN v0.c1 THEN NULL WHEN vt0.c0 THEN '-243193612' ELSE v0.c2 END))  NULLS LAST, ((CASE WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END)AND(v0.c2)) DESC;
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (((((v0.c2 COLLATE BINARY)AND(((vt0.c0)<<(v0.c3)))))AND(CAST((((v0.c3, v0.c0, v0.c1, v0.c0))>=((v0.c0, v0.c1, v0.c1, v0.c0))) AS REAL)))) ORDER BY (- (CASE v0.c2  WHEN v0.c1 THEN NULL WHEN vt0.c0 THEN '-243193612' ELSE v0.c2 END))  NULLS LAST, ((CASE WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END)AND(v0.c2)) DESC;
SELECT MAX(v0.c0) FROM vt0, v0 WHERE ((((v0.c1 IN ()))>=(v0.c2)));
SELECT DISTINCT MAX(v0.c0) FROM vt0, v0 WHERE ((((v0.c1 IN ()))=(v0.c2))) ORDER BY vt0.c0 ASC, (((((vt0.c0)) BETWEEN ((v0.c3)) AND ((v0.c2)))) IS FALSE)  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt0, v0 WHERE ((((v0.c2)GLOB(v0.c3)) IN ('0.5032010521217105'))) ORDER BY vt0.c0 ASC, (((((vt0.c0)) BETWEEN ((v0.c3)) AND ((v0.c2)))) IS FALSE)  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE (x'd9f3');
SELECT * FROM vt2, vt0, v0 WHERE (x'd9f3') LIMIT 0X0;
SELECT ALL * FROM vt2, vt0, v0 WHERE (x'd9f3');
SELECT * FROM vt2, vt0, v0 WHERE (x'd9f3') LIMIT 0X0;
SELECT * FROM vt0, v0, vt2 WHERE ((((v0.c0 IN (0.2507806054330106)))<<(((v0.c0) IS TRUE))));
SELECT * FROM vt0, v0, vt2 WHERE ((((((v0.c0 IN (0.2507806054330106)))<<(((v0.c0) IS TRUE))))AND(((~ (vt2.c0)) IN ())))) ORDER BY ((((v0.c1)AND(v0.c0)))||('-168283889' COLLATE NOCASE))  NULLS LAST;
SELECT * FROM vt0, v0, vt2 WHERE ((((v0.c0 IN (0.2507806054330106)))<<(((v0.c0) IS TRUE))));
SELECT * FROM vt0, v0, vt2 WHERE ((((((v0.c0 IN (0.2507806054330106)))<<(((v0.c0) IS TRUE))))AND(((~ (vt2.c0)) IN ())))) ORDER BY ((((v0.c1)AND(v0.c0)))||('-168283889' COLLATE NOCASE))  NULLS LAST;
SELECT * FROM v0, vt2 INNER JOIN vt0 ON ((vt0.c0 COLLATE BINARY)LIKE((- (vt0.c0)))) WHERE (LIKELY(CASE WHEN v0.c1 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c0 END));
SELECT * FROM v0, vt2 INNER JOIN vt0 ON ((vt0.c0 COLLATE BINARY)LIKE((- (vt0.c0)))) WHERE (LIKELY(CASE WHEN v0.c1 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c0 END)) ORDER BY CAST(((v0.c0)==(v0.c1)) AS REAL)  NULLS LAST INTERSECT SELECT * FROM v0, vt2 INNER JOIN vt0 ON ((vt0.c0 COLLATE BINARY)LIKE((- (vt0.c0)))) WHERE (((((((((v0.c2)OR(v0.c1)))AND(v0.c3)))AND(CAST(NULL AS TEXT))))AND(UNLIKELY(vt0.c0)))) ORDER BY CAST(((v0.c0)=(v0.c1)) AS REAL)  NULLS LAST;
SELECT * FROM v0, vt2 INNER JOIN vt0 ON ((vt0.c0 COLLATE BINARY)LIKE((- (vt0.c0)))) WHERE (LIKELY(CASE WHEN v0.c1 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c0 END));
SELECT * FROM v0, vt2 INNER JOIN vt0 ON ((vt0.c0 COLLATE BINARY)LIKE((- (vt0.c0)))) WHERE (LIKELY(CASE WHEN v0.c1 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c0 END)) ORDER BY CAST(((v0.c0)==(v0.c1)) AS REAL)  NULLS LAST INTERSECT SELECT * FROM v0, vt2 INNER JOIN vt0 ON ((vt0.c0 COLLATE BINARY)LIKE((- (vt0.c0)))) WHERE (((((((((v0.c2)OR(v0.c1)))AND(v0.c3)))AND(CAST(NULL AS TEXT))))AND(UNLIKELY(vt0.c0)))) ORDER BY CAST(((v0.c0)=(v0.c1)) AS REAL)  NULLS LAST;
SELECT * FROM vt0 WHERE (vt0.c0 COLLATE RTRIM) ORDER BY (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))<>((((vt0.c0)<>(vt0.c0))))) DESC, (((vt0.c0) NOT BETWEEN (0.7937400196206659) AND (944186246)) IN ((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0))), (+ (vt0.c0)))) ASC  NULLS FIRST, (vt0.c0 IN ()), -610673233  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0 COLLATE RTRIM)AND((NOT (vt0.c0 COLLATE RTRIM))))) ORDER BY (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))!=((((vt0.c0)!=(vt0.c0))))) DESC, (((vt0.c0) NOT BETWEEN (0.7937400196206659) AND (0x38472386)) IN ((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0))), (+ (vt0.c0)))) ASC  NULLS FIRST, (vt0.c0 IN ()), -610673233  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))!=((((vt0.c0)<>(vt0.c0))))) DESC, (((vt0.c0) NOT BETWEEN (0.7937400196206659) AND (0X38472386)) IN ((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0))), (+ (vt0.c0)))) ASC  NULLS FIRST, (vt0.c0 IN ()), 0xffffffffdb99ddaf  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE (vt0.c0 COLLATE RTRIM) ORDER BY (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))<>((((vt0.c0)<>(vt0.c0))))) DESC, (((vt0.c0) NOT BETWEEN (0.7937400196206659) AND (944186246)) IN ((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0))), (+ (vt0.c0)))) ASC  NULLS FIRST, (vt0.c0 IN ()), -610673233  NULLS FIRST;
SELECT ALL MAX(v0.c3) FROM v0 WHERE (CAST(((((v0.c0)OR(v0.c0)))AND(v0.c0)) AS NUMERIC)) ORDER BY (- (((v0.c1)!=(0.5074249421040693)))) DESC  NULLS FIRST, (((((((((v0.c2)OR(v0.c3)))OR(v0.c0)))AND(v0.c1)), (NOT (v0.c0))))=((((v0.c3) BETWEEN (v0.c0) AND (v0.c1)), json_type(v0.c0)))) DESC, CAST(((((v0.c2)AND(v0.c1)))AND(0.7075024778260727)) AS TEXT) DESC;
SELECT MAX(v0.c3) FROM v0 WHERE (((CAST(((((v0.c0)OR(v0.c0)))AND(v0.c0)) AS NUMERIC))AND((v0.c1 IN ()) COLLATE BINARY))) ORDER BY (- (((v0.c1)!=(0.5074249421040693)))) DESC  NULLS FIRST, (((((((((v0.c2)OR(v0.c3)))OR(v0.c0)))AND(v0.c1)), (NOT (v0.c0))))=((((v0.c3) BETWEEN (v0.c0) AND (v0.c1)), json_type(v0.c0)))) DESC, CAST(((((v0.c2)AND(v0.c1)))AND(0.7075024778260727)) AS TEXT) DESC;
SELECT ALL COUNT(*) FROM v0 WHERE (((((((((v0.c1)OR(NULL)))OR(v0.c3)))AND((v0.c3 IN (v0.c3)))))OR((v0.c3 IN (v0.c0)))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((((((v0.c1)OR(NULL)))OR(v0.c3)))AND((v0.c3 IN (v0.c3)))))OR((v0.c3 IN (v0.c0))))) ORDER BY v0.c3 DESC, (v0.c0 COLLATE BINARY IN (v0.c0, (((v0.c0, v0.c2)) BETWEEN ((v0.c2, v0.c1)) AND ((v0.c3, v0.c2))))) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((0.5007349774613575) NOT NULL)) IS TRUE)) ORDER BY v0.c3 DESC, (v0.c0 COLLATE BINARY IN (v0.c0, (((v0.c0, v0.c2)) BETWEEN ((v0.c2, v0.c1)) AND ((v0.c3, v0.c2))))) DESC  NULLS LAST LIMIT 0;
SELECT MAX(vt0.c0) FROM vt0, vt2, v0 WHERE ('') ORDER BY 0.3459925589158298, (((v0.c1)/(v0.c1)) IN (((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1))))  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0, vt2, v0 WHERE ('') ORDER BY 0.3459925589158298, (((v0.c1)/(v0.c1)) IN (((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1))))  NULLS FIRST INTERSECT SELECT MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (NULL) ORDER BY 0.3459925589158298, (((v0.c1)/(v0.c1)) IN (((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1))))  NULLS FIRST;
SELECT * FROM vt2, v0 WHERE (((((v0.c3)==(v0.c2))) NOT NULL)) ORDER BY CASE CAST(v0.c1 AS BLOB)  WHEN (((v0.c2, v0.c2, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c2, vt2.c1)) AND ((v0.c2, v0.c1, v0.c3))) THEN ((v0.c2)AND('}')) ELSE ((((((v0.c0)AND(x'')))OR(v0.c3)))AND(vt2.c0)) END;
SELECT ALL * FROM vt2, v0 WHERE (((((((v0.c3)==(v0.c2))) NOT NULL))AND((- ((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1)))))))) ORDER BY CASE CAST(v0.c1 AS BLOB)  WHEN (((v0.c2, v0.c2, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c2, vt2.c1)) AND ((v0.c2, v0.c1, v0.c3))) THEN ((v0.c2)AND('}')) ELSE ((((((v0.c0)AND(x'')))OR(v0.c3)))AND(vt2.c0)) END INTERSECT SELECT * FROM vt2, v0 WHERE (((((((v0.c0 COLLATE RTRIM)OR(CASE v0.c0  WHEN v0.c1 THEN v0.c2 END)))OR(CASE v0.c0  WHEN v0.c3 THEN v0.c3 WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)))OR(json(vt2.c0)))) ORDER BY CASE CAST(v0.c1 AS BLOB)  WHEN (((v0.c2, v0.c2, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c2, vt2.c1)) AND ((v0.c2, v0.c1, v0.c3))) THEN ((v0.c2)AND('}')) ELSE ((((((v0.c0)AND(x'')))OR(v0.c3)))AND(vt2.c0)) END;
SELECT * FROM vt2, v0 WHERE (((((v0.c3)==(v0.c2))) NOT NULL)) ORDER BY CASE CAST(v0.c1 AS BLOB)  WHEN (((v0.c2, v0.c2, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c2, vt2.c1)) AND ((v0.c2, v0.c1, v0.c3))) THEN ((v0.c2)AND('}')) ELSE ((((((v0.c0)AND(x'')))OR(v0.c3)))AND(vt2.c0)) END;
SELECT ALL * FROM vt2, v0 WHERE (((((((v0.c3)==(v0.c2))) NOT NULL))AND((- ((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c1)))))))) ORDER BY CASE CAST(v0.c1 AS BLOB)  WHEN (((v0.c2, v0.c2, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c2, vt2.c1)) AND ((v0.c2, v0.c1, v0.c3))) THEN ((v0.c2)AND('}')) ELSE ((((((v0.c0)AND(x'')))OR(v0.c3)))AND(vt2.c0)) END INTERSECT SELECT * FROM vt2, v0 WHERE (((((((v0.c0 COLLATE RTRIM)OR(CASE v0.c0  WHEN v0.c1 THEN v0.c2 END)))OR(CASE v0.c0  WHEN v0.c3 THEN v0.c3 WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)))OR(json(vt2.c0)))) ORDER BY CASE CAST(v0.c1 AS BLOB)  WHEN (((v0.c2, v0.c2, vt2.c1)) NOT BETWEEN ((vt2.c1, v0.c2, vt2.c1)) AND ((v0.c2, v0.c1, v0.c3))) THEN ((v0.c2)AND('}')) ELSE ((((((v0.c0)AND(x'')))OR(v0.c3)))AND(vt2.c0)) END;
SELECT * FROM v0, vt2 WHERE (0.8995361341325797);
SELECT DISTINCT * FROM v0, vt2 WHERE (((0.8995361341325797)AND(vt2.c1))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c0) AND (vt2.c0))) IS FALSE) LIMIT 4;
SELECT * FROM v0, vt2 WHERE (0.8995361341325797);
SELECT DISTINCT * FROM v0, vt2 WHERE (((0.8995361341325797)AND(vt2.c1))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c0) AND (vt2.c0))) IS FALSE) LIMIT 4;
SELECT ALL * FROM vt0, vt2 WHERE ((- ((vt2.c1 IN (vt2.c1, vt2.c0))))) ORDER BY (((((((((((vt0.c0 IN ()))OR(((((((vt0.c0)OR(vt2.c1)))OR(vt0.c0)))AND(vt2.c0)))))AND((+ (vt2.c0)))))OR((((vt2.c1, vt2.c0))!=((vt2.c1, x'42'))))))AND(((vt2.c1)%(x'')))))AND(x'')) DESC  NULLS LAST, ABS(((vt2.c1) ISNULL)) DESC;
SELECT * FROM vt0, vt2 WHERE ((((- ((vt2.c1 IN (vt2.c1, vt2.c0)))))AND(((((((vt0.c0)<>(vt2.c1)))OR(((vt2.c1) ISNULL))))AND((- (vt2.c0))))))) ORDER BY ((((((((HEX(DISTINCT vt0.c0))OR(vt2.c1 COLLATE NOCASE)))AND(vt0.c0)))OR(((vt2.c1) IS TRUE))))OR((+ (vt2.c0))))  NULLS FIRST, ((vt0.c0 COLLATE BINARY) ISNULL) ASC INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ('-1005799649') ORDER BY ((((((((HEX(DISTINCT vt0.c0))OR(vt2.c1 COLLATE NOCASE)))AND(vt0.c0)))OR(((vt2.c1) IS TRUE))))OR((+ (vt2.c0))))  NULLS FIRST, ((vt0.c0 COLLATE BINARY) ISNULL) ASC;
SELECT ALL * FROM vt0, vt2 WHERE ((- ((vt2.c1 IN (vt2.c1, vt2.c0))))) ORDER BY (((((((((((vt0.c0 IN ()))OR(((((((vt0.c0)OR(vt2.c1)))OR(vt0.c0)))AND(vt2.c0)))))AND((+ (vt2.c0)))))OR((((vt2.c1, vt2.c0))!=((vt2.c1, x'42'))))))AND(((vt2.c1)%(x'')))))AND(x'')) DESC  NULLS LAST, ABS(((vt2.c1) ISNULL)) DESC;
SELECT * FROM vt0, vt2 WHERE ((((- ((vt2.c1 IN (vt2.c1, vt2.c0)))))AND(((((((vt0.c0)<>(vt2.c1)))OR(((vt2.c1) ISNULL))))AND((- (vt2.c0))))))) ORDER BY ((((((((HEX(DISTINCT vt0.c0))OR(vt2.c1 COLLATE NOCASE)))AND(vt0.c0)))OR(((vt2.c1) IS TRUE))))OR((+ (vt2.c0))))  NULLS FIRST, ((vt0.c0 COLLATE BINARY) ISNULL) ASC INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ('-1005799649') ORDER BY ((((((((HEX(DISTINCT vt0.c0))OR(vt2.c1 COLLATE NOCASE)))AND(vt0.c0)))OR(((vt2.c1) IS TRUE))))OR((+ (vt2.c0))))  NULLS FIRST, ((vt0.c0 COLLATE BINARY) ISNULL) ASC;
SELECT * FROM v0, vt0 WHERE ((((((((v0.c0 IN ()))AND(v0.c2 COLLATE NOCASE)))AND(CAST(v0.c2 AS INTEGER))))OR(v0.c1 COLLATE RTRIM)));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((((((v0.c0 IN ()))AND(v0.c2 COLLATE NOCASE)))AND(CAST(v0.c2 AS INTEGER))))OR(v0.c1 COLLATE RTRIM))) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT BETWEEN (((v0.c3)IS(v0.c1))) AND (((v0.c3)>>(v0.c1))))  NULLS LAST, (((v0.c1, v0.c1, v0.c0)) BETWEEN (((((x'5f54b7'))=((v0.c2))), CAST(v0.c1 AS REAL), (0.6752456599976012 IN (v0.c2)))) AND ((((vt0.c0)<=(vt0.c0)), ((NULL) NOTNULL), (((((('BVbKxZn')OR(v0.c1)))AND(v0.c0)))OR(vt0.c0)))))  NULLS FIRST, (v0.c3 IN (NULL COLLATE NOCASE, vt0.c0))  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (CASE WHEN ((vt0.c0)GLOB(v0.c1)) THEN (((v0.c0, v0.c2)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c0, vt0.c0))) WHEN v0.c2 THEN (~ (v0.c1)) ELSE v0.c0 COLLATE NOCASE END) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT BETWEEN (((v0.c3)IS(v0.c1))) AND (((v0.c3)>>(v0.c1))))  NULLS LAST, (((v0.c1, v0.c1, v0.c0)) BETWEEN (((((x'5f54b7'))=((v0.c2))), CAST(v0.c1 AS REAL), (0.6752456599976012 IN (v0.c2)))) AND ((((vt0.c0)<=(vt0.c0)), ((NULL) NOTNULL), (((((('BVbKxZn')OR(v0.c1)))AND(v0.c0)))OR(vt0.c0)))))  NULLS FIRST, (v0.c3 IN (NULL COLLATE NOCASE, vt0.c0))  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt0 WHERE ((((((((v0.c0 IN ()))AND(v0.c2 COLLATE NOCASE)))AND(CAST(v0.c2 AS INTEGER))))OR(v0.c1 COLLATE RTRIM)));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((((((v0.c0 IN ()))AND(v0.c2 COLLATE NOCASE)))AND(CAST(v0.c2 AS INTEGER))))OR(v0.c1 COLLATE RTRIM))) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT BETWEEN (((v0.c3)IS(v0.c1))) AND (((v0.c3)>>(v0.c1))))  NULLS LAST, (((v0.c1, v0.c1, v0.c0)) BETWEEN (((((x'5f54b7'))=((v0.c2))), CAST(v0.c1 AS REAL), (0.6752456599976012 IN (v0.c2)))) AND ((((vt0.c0)<=(vt0.c0)), ((NULL) NOTNULL), (((((('BVbKxZn')OR(v0.c1)))AND(v0.c0)))OR(vt0.c0)))))  NULLS FIRST, (v0.c3 IN (NULL COLLATE NOCASE, vt0.c0))  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (CASE WHEN ((vt0.c0)GLOB(v0.c1)) THEN (((v0.c0, v0.c2)) BETWEEN ((v0.c0, v0.c2)) AND ((v0.c0, vt0.c0))) WHEN v0.c2 THEN (~ (v0.c1)) ELSE v0.c0 COLLATE NOCASE END) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) NOT BETWEEN (((v0.c3)IS(v0.c1))) AND (((v0.c3)>>(v0.c1))))  NULLS LAST, (((v0.c1, v0.c1, v0.c0)) BETWEEN (((((x'5f54b7'))=((v0.c2))), CAST(v0.c1 AS REAL), (0.6752456599976012 IN (v0.c2)))) AND ((((vt0.c0)<=(vt0.c0)), ((NULL) NOTNULL), (((((('BVbKxZn')OR(v0.c1)))AND(v0.c0)))OR(vt0.c0)))))  NULLS FIRST, (v0.c3 IN (NULL COLLATE NOCASE, vt0.c0))  NULLS LAST LIMIT 0;
SELECT MAX(v0.c1) FROM vt0, v0 WHERE (((CASE WHEN v0.c1 THEN NULL END) BETWEEN (v0.c1) AND (INSTR(v0.c2, v0.c1))));
SELECT DISTINCT MAX(v0.c1) FROM vt0, v0 WHERE (((CASE WHEN v0.c1 THEN NULL END) BETWEEN (v0.c1) AND (INSTR(v0.c2, v0.c1)))) ORDER BY CASE ((((((((v0.c0)OR(v0.c2)))OR(v0.c2)))AND(v0.c2)))AND(v0.c1))  WHEN NULL THEN (((0.4212147516551765, v0.c1, vt0.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c1)) AND ((v0.c1, NULL, v0.c3))) ELSE (NOT (v0.c3)) END ASC, (((v0.c0 IN ()))LIKE(x'bdc9'));
SELECT COUNT(*) FROM vt2, vt0 WHERE (CAST(((((vt0.c0)OR(vt0.c0)))OR(vt2.c1)) AS INTEGER)) ORDER BY vt0.c0  NULLS FIRST, (((((((vt0.c0 IN (vt2.c0)))OR((vt2.c0 IN (vt2.c1)))))OR(((vt2.c0)<(vt0.c0)))))AND(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1))))  NULLS LAST;
SELECT COUNT(*) FROM vt2, vt0 WHERE (CAST(((((vt0.c0)OR(vt0.c0)))OR(vt2.c1)) AS INTEGER)) ORDER BY vt0.c0  NULLS FIRST, (((((((vt0.c0 IN (vt2.c0)))OR((vt2.c0 IN (vt2.c1)))))OR(((vt2.c0)<(vt0.c0)))))AND(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1))))  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (((vt0.c0) IS FALSE) COLLATE NOCASE) ORDER BY vt0.c0  NULLS FIRST, (((((((vt0.c0 IN (vt2.c0)))OR((vt2.c0 IN (vt2.c1)))))OR(((vt2.c0)<(vt0.c0)))))AND(((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c1))))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt2 WHERE ((9.8818379E7 IN ())) ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END) IS TRUE)  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE ((((9.8818379E7 IN ()))AND(((('A4')) BETWEEN ((CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END)) AND ((((vt2.c0) IS FALSE))))))) ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END) IS TRUE)  NULLS LAST LIMIT 2;
SELECT ALL * FROM vt2 WHERE ((9.8818379E7 IN ())) ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END) IS TRUE)  NULLS LAST;
SELECT DISTINCT * FROM vt2 WHERE ((((9.8818379E7 IN ()))AND(((('A4')) BETWEEN ((CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END)) AND ((((vt2.c0) IS FALSE))))))) ORDER BY ((CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END) IS TRUE)  NULLS LAST LIMIT 2;
SELECT * FROM vt0 WHERE ((((((((((((((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))OR(CASE WHEN vt0.c0 THEN vt0.c0 END)))AND((vt0.c0 IN ('1976704639')))))AND(((vt0.c0) NOT NULL))))AND(CAST(vt0.c0 AS INTEGER))))OR(((vt0.c0)||(vt0.c0)))))OR((- (x'4e9d'))))) ORDER BY ((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END));
SELECT DISTINCT * FROM vt0 WHERE ((((((((((((((((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))OR(CASE WHEN vt0.c0 THEN vt0.c0 END)))AND((vt0.c0 IN ('1976704639')))))AND(((vt0.c0) NOT NULL))))AND(CAST(vt0.c0 AS INTEGER))))OR(((vt0.c0)||(vt0.c0)))))OR((- (x'4e9d')))))AND(CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 0.8246211320196503 ELSE vt0.c0 END AS BLOB)))) ORDER BY ((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)) LIMIT 0x5;
SELECT * FROM vt0 WHERE ((((((((((((((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))OR(CASE WHEN vt0.c0 THEN vt0.c0 END)))AND((vt0.c0 IN ('1976704639')))))AND(((vt0.c0) NOT NULL))))AND(CAST(vt0.c0 AS INTEGER))))OR(((vt0.c0)||(vt0.c0)))))OR((- (x'4e9d'))))) ORDER BY ((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END));
SELECT DISTINCT * FROM vt0 WHERE ((((((((((((((((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))OR(CASE WHEN vt0.c0 THEN vt0.c0 END)))AND((vt0.c0 IN ('1976704639')))))AND(((vt0.c0) NOT NULL))))AND(CAST(vt0.c0 AS INTEGER))))OR(((vt0.c0)||(vt0.c0)))))OR((- (x'4e9d')))))AND(CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 0.8246211320196503 ELSE vt0.c0 END AS BLOB)))) ORDER BY ((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))) NOT BETWEEN ((vt0.c0 IN (vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)) LIMIT 0x5;
SELECT MAX(v0.c3) FROM v0 WHERE (((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))%(-1444834624))) ORDER BY (((v0.c3)OR(v0.c3)) IN ((~ (v0.c0))));
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (((((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c0)))%(-1444834624)))AND(CAST(v0.c2 AS TEXT) COLLATE RTRIM))) ORDER BY (((v0.c3)OR(v0.c3)) IN ((~ (v0.c0)))) INTERSECT SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (LIKELIHOOD(DISTINCT (v0.c0 IN ()), (((v0.c0)) BETWEEN ((v0.c2)) AND ((v0.c2))))) ORDER BY (((v0.c3)OR(v0.c3)) IN ((~ (v0.c0))));
SELECT ALL MIN(vt0.c0) FROM vt2, v0, vt0 WHERE (((vt2.c0)/(v0.c1)) COLLATE BINARY);
SELECT ALL MIN(vt0.c0) FROM vt2, v0, vt0 WHERE (((((vt2.c0)/(v0.c1)) COLLATE BINARY)AND(0.2642123024574031))) LIMIT 1 INTERSECT SELECT MIN(vt0.c0) FROM vt2, v0, vt0 WHERE (vt0.c0) LIMIT 1;
SELECT * FROM v0, vt2 WHERE (LIKELY(DISTINCT v0.c3) COLLATE BINARY);
SELECT * FROM v0, vt2 WHERE (LIKELY(DISTINCT v0.c3) COLLATE BINARY) ORDER BY (((((0.041522664904433126, v0.c0))<((vt2.c0, NULL))))||(((v0.c2) IS TRUE))) ASC LIMIT 1;
SELECT * FROM v0, vt2 WHERE (LIKELY(DISTINCT v0.c3) COLLATE BINARY);
SELECT * FROM v0, vt2 WHERE (LIKELY(DISTINCT v0.c3) COLLATE BINARY) ORDER BY (((((0.041522664904433126, v0.c0))<((vt2.c0, NULL))))||(((v0.c2) IS TRUE))) ASC LIMIT 1;
SELECT * FROM v0 WHERE (((v0.c1 COLLATE RTRIM)IS NOT(v0.c3))) ORDER BY ((highlight(v0.c0, v0.c3, v0.c1, v0.c2))IS(v0.c3 COLLATE BINARY)), (- (((v0.c2)<(v0.c3))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 NOT INDEXED WHERE (((v0.c1 COLLATE RTRIM)IS NOT(v0.c3))) ORDER BY (((v0.c2 IN ()))<=(((((((((((((v0.c1)OR('-1330521423')))AND(v0.c1)))OR(v0.c3)))AND(v0.c1)))OR(x'')))AND(v0.c3))))  NULLS LAST, CASE (+ (v0.c2))  WHEN ((v0.c3)<('-1473119131')) THEN CAST(v0.c2 AS INTEGER) WHEN '-483860315' THEN NULL COLLATE RTRIM ELSE ((v0.c3)=(v0.c2)) END DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((((((+ (v0.c1)))AND(((((v0.c3)AND(v0.c0)))OR(v0.c1)))))AND((v0.c0 IN (v0.c1)))))OR(CAST(v0.c2 AS NUMERIC))))OR(v0.c3 COLLATE RTRIM))) ORDER BY (((v0.c2 IN ()))<=(((((((((((((v0.c1)OR('-1330521423')))AND(v0.c1)))OR(v0.c3)))AND(v0.c1)))OR(x'')))AND(v0.c3))))  NULLS LAST, CASE (+ (v0.c2))  WHEN ((v0.c3)<('-1473119131')) THEN CAST(v0.c2 AS INTEGER) WHEN '-483860315' THEN NULL COLLATE RTRIM ELSE ((v0.c3)==(v0.c2)) END DESC  NULLS LAST LIMIT 0X0;
SELECT * FROM v0 WHERE (((v0.c1 COLLATE RTRIM)IS NOT(v0.c3))) ORDER BY ((highlight(v0.c0, v0.c3, v0.c1, v0.c2))IS(v0.c3 COLLATE BINARY)), (- (((v0.c2)<(v0.c3))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 NOT INDEXED WHERE (((v0.c1 COLLATE RTRIM)IS NOT(v0.c3))) ORDER BY (((v0.c2 IN ()))<=(((((((((((((v0.c1)OR('-1330521423')))AND(v0.c1)))OR(v0.c3)))AND(v0.c1)))OR(x'')))AND(v0.c3))))  NULLS LAST, CASE (+ (v0.c2))  WHEN ((v0.c3)<('-1473119131')) THEN CAST(v0.c2 AS INTEGER) WHEN '-483860315' THEN NULL COLLATE RTRIM ELSE ((v0.c3)=(v0.c2)) END DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE ((((((((((+ (v0.c1)))AND(((((v0.c3)AND(v0.c0)))OR(v0.c1)))))AND((v0.c0 IN (v0.c1)))))OR(CAST(v0.c2 AS NUMERIC))))OR(v0.c3 COLLATE RTRIM))) ORDER BY (((v0.c2 IN ()))<=(((((((((((((v0.c1)OR('-1330521423')))AND(v0.c1)))OR(v0.c3)))AND(v0.c1)))OR(x'')))AND(v0.c3))))  NULLS LAST, CASE (+ (v0.c2))  WHEN ((v0.c3)<('-1473119131')) THEN CAST(v0.c2 AS INTEGER) WHEN '-483860315' THEN NULL COLLATE RTRIM ELSE ((v0.c3)==(v0.c2)) END DESC  NULLS LAST LIMIT 0X0;
SELECT MIN(vt0.c0) FROM vt2 INNER JOIN vt0 ON (((('-1751601234')-(v0.c2))) BETWEEN (vt2.c0 COLLATE NOCASE) AND (v0.c3 COLLATE BINARY)) NATURAL JOIN v0 WHERE (json_quote(vt2.c0 COLLATE RTRIM));
SELECT DISTINCT MIN(vt0.c0) FROM vt2 INNER JOIN vt0 ON (((('-1751601234')-(v0.c2))) BETWEEN (vt2.c0 COLLATE NOCASE) AND (v0.c3 COLLATE BINARY)) NATURAL JOIN v0 WHERE (((json_quote(vt2.c0 COLLATE RTRIM))AND(((((ABS(DISTINCT v0.c0))AND(CASE WHEN v0.c2 THEN v0.c1 WHEN vt2.c0 THEN vt0.c0 WHEN 0.17202549689116042 THEN v0.c2 WHEN 'mIꟊ' THEN vt2.c1 WHEN v0.c2 THEN x'e620' END)))OR(vt0.c0))))) ORDER BY ((((v0.c0) BETWEEN (vt2.c0) AND ('*b')))&(CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN vt2.c0 WHEN v0.c1 THEN v0.c1 ELSE vt0.c0 END)), (((((vt2.c1, vt0.c0))=((vt0.c0, v0.c1)))) NOT NULL)  NULLS FIRST, CASE WHEN 1375820340 THEN CASE WHEN vt0.c0 THEN v0.c2 END WHEN NULL THEN TRIM(DISTINCT vt2.c1) WHEN ('3vXKVm+W?' IN (NULL, v0.c0)) THEN v0.c2 END ASC, (((vt2.c1 IN (v0.c0, v0.c1))) NOT BETWEEN (((v0.c0) IS TRUE)) AND (((v0.c1)>>(vt2.c0)))) DESC  NULLS LAST;
SELECT * FROM v0 LEFT OUTER JOIN vt2 ON (+ (((v0.c3)>>('-1444834624')))) WHERE (CASE WHEN (~ (vt2.c1)) THEN (((v0.c0, v0.c0, vt2.c1, '-144025520'))==((vt2.c1, vt2.c1, vt2.c0, v0.c2))) END) ORDER BY (((v0.c2)) NOT BETWEEN (((vt2.c0 IN (v0.c3, NULL)))) AND ((CASE WHEN NULL THEN v0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE v0.c3 END))) DESC, CASE WHEN ((v0.c3)IS(v0.c2)) THEN ((((((((((v0.c3)OR(v0.c3)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c1)))OR(v0.c0)) ELSE CASE WHEN vt2.c0 THEN v0.c3 END END  NULLS LAST, (NOT (v0.c1)) COLLATE NOCASE DESC;
SELECT ALL * FROM v0 INNER JOIN vt2 ON (+ (((v0.c3)>>('-1444834624')))) WHERE (CASE WHEN (~ (vt2.c1)) THEN (((v0.c0, v0.c0, vt2.c1, '-144025520'))==((vt2.c1, vt2.c1, vt2.c0, v0.c2))) END) ORDER BY ((((((v0.c2)-(v0.c1)))OR(((((v0.c1)OR(v0.c2)))OR(v0.c0)))))OR(((((v0.c0)AND(vt2.c1)))AND('-787073840')))) DESC  NULLS FIRST, ((((vt2.c1 COLLATE NOCASE)OR(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 END)))OR((v0.c1 IN ())))  NULLS FIRST INTERSECT SELECT * FROM v0 INNER JOIN vt2 ON (+ (((v0.c3)>>('-1444834624')))) WHERE (CASE (v0.c0 IN ())  WHEN ((v0.c1)AND(v0.c1)) THEN ((v0.c2)>=(v0.c2)) WHEN ((((((((((vt2.c1)AND(vt2.c1)))AND(v0.c0)))OR(v0.c3)))AND(v0.c1)))AND(vt2.c0)) THEN ((v0.c3) IS TRUE) WHEN x'' THEN v0.c0 COLLATE RTRIM ELSE LIKELIHOOD(v0.c0, v0.c0) END) ORDER BY ((((((v0.c2)-(v0.c1)))OR(((((v0.c1)OR(v0.c2)))OR(v0.c0)))))OR(((((v0.c0)AND(vt2.c1)))AND('-787073840')))) DESC  NULLS FIRST, ((((vt2.c1 COLLATE NOCASE)OR(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 END)))OR((v0.c1 IN ())))  NULLS FIRST;
SELECT * FROM v0 LEFT OUTER JOIN vt2 ON (+ (((v0.c3)>>('-1444834624')))) WHERE (CASE WHEN (~ (vt2.c1)) THEN (((v0.c0, v0.c0, vt2.c1, '-144025520'))==((vt2.c1, vt2.c1, vt2.c0, v0.c2))) END) ORDER BY (((v0.c2)) NOT BETWEEN (((vt2.c0 IN (v0.c3, NULL)))) AND ((CASE WHEN NULL THEN v0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE v0.c3 END))) DESC, CASE WHEN ((v0.c3)IS(v0.c2)) THEN ((((((((((v0.c3)OR(v0.c3)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c1)))OR(v0.c0)) ELSE CASE WHEN vt2.c0 THEN v0.c3 END END  NULLS LAST, (NOT (v0.c1)) COLLATE NOCASE DESC;
SELECT ALL * FROM v0 INNER JOIN vt2 ON (+ (((v0.c3)>>('-1444834624')))) WHERE (CASE WHEN (~ (vt2.c1)) THEN (((v0.c0, v0.c0, vt2.c1, '-144025520'))==((vt2.c1, vt2.c1, vt2.c0, v0.c2))) END) ORDER BY ((((((v0.c2)-(v0.c1)))OR(((((v0.c1)OR(v0.c2)))OR(v0.c0)))))OR(((((v0.c0)AND(vt2.c1)))AND('-787073840')))) DESC  NULLS FIRST, ((((vt2.c1 COLLATE NOCASE)OR(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 END)))OR((v0.c1 IN ())))  NULLS FIRST INTERSECT SELECT * FROM v0 INNER JOIN vt2 ON (+ (((v0.c3)>>('-1444834624')))) WHERE (CASE (v0.c0 IN ())  WHEN ((v0.c1)AND(v0.c1)) THEN ((v0.c2)>=(v0.c2)) WHEN ((((((((((vt2.c1)AND(vt2.c1)))AND(v0.c0)))OR(v0.c3)))AND(v0.c1)))AND(vt2.c0)) THEN ((v0.c3) IS TRUE) WHEN x'' THEN v0.c0 COLLATE RTRIM ELSE LIKELIHOOD(v0.c0, v0.c0) END) ORDER BY ((((((v0.c2)-(v0.c1)))OR(((((v0.c1)OR(v0.c2)))OR(v0.c0)))))OR(((((v0.c0)AND(vt2.c1)))AND('-787073840')))) DESC  NULLS FIRST, ((((vt2.c1 COLLATE NOCASE)OR(CASE WHEN vt2.c1 THEN v0.c1 WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 END)))OR((v0.c1 IN ())))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((- (CAST(vt0.c0 AS NUMERIC))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((- (CAST(vt0.c0 AS NUMERIC))))AND((('1791120929') IS TRUE))));
SELECT ALL MIN(v0.c2) FROM vt0, v0 LEFT OUTER JOIN vt2 ON CAST(((vt2.c0) NOT NULL) AS REAL) WHERE (((CASE WHEN vt2.c1 THEN v0.c2 WHEN vt0.c0 THEN vt2.c1 ELSE v0.c1 END) IS FALSE));
SELECT DISTINCT MIN(v0.c2) FROM vt0, v0 LEFT OUTER JOIN vt2 ON CAST(((vt2.c0) NOT NULL) AS REAL) WHERE (((((CASE WHEN vt2.c1 THEN v0.c2 WHEN vt0.c0 THEN vt2.c1 ELSE v0.c1 END) IS FALSE))AND(((((((vt0.c0)*(v0.c0)))OR((((vt2.c0, v0.c2, 0x7b2ca014, vt2.c0))!=((vt2.c1, v0.c3, v0.c1, v0.c0))))))OR(((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c3))))))) ORDER BY ((v0.c0 COLLATE NOCASE)*(((v0.c2) ISNULL))) ASC, (((v0.c0, v0.c1)) NOT BETWEEN ((CAST(vt2.c0 AS BLOB), (NULL IN (vt2.c0)))) AND ((STRFTIME(vt2.c1, vt0.c0, v0.c0, vt2.c0), (vt2.c0 IN (vt2.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt0, v0 LEFT OUTER JOIN vt2 ON CAST(((vt2.c0) NOT NULL) AS REAL) WHERE (v0.c2) ORDER BY ((v0.c0 COLLATE NOCASE)*(((v0.c2) ISNULL))) ASC, (((v0.c0, v0.c1)) NOT BETWEEN ((CAST(vt2.c0 AS BLOB), (NULL IN (vt2.c0)))) AND ((STRFTIME(vt2.c1, vt0.c0, v0.c0, vt2.c0), (vt2.c0 IN (vt2.c1))))) LIMIT 0X0;
SELECT MAX(vt0.c0) FROM vt0 WHERE (CAST(CAST(x'aa' AS INTEGER) AS BLOB)) ORDER BY (((vt0.c0, vt0.c0)) BETWEEN ((LIKE(vt0.c0, vt0.c0), ((vt0.c0)IS NOT(vt0.c0)))) AND ((UPPER(vt0.c0), ((vt0.c0)>=(vt0.c0)))))  NULLS FIRST, (((CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((NULL)||(vt0.c0))))<((((vt0.c0)>>(vt0.c0)), ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0))))) DESC  NULLS FIRST, (((((((vt0.c0))==((vt0.c0))))OR((vt0.c0 IN ('69292690')))))AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))>((vt0.c0, vt0.c0, vt0.c0, vt0.c0)))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (CAST(CAST(x'aa' AS INTEGER) AS BLOB)) ORDER BY CASE CAST(vt0.c0 AS REAL)  WHEN ((vt0.c0)+(vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (((v0.c1 COLLATE RTRIM) NOT BETWEEN ((vt2.c0 IN (v0.c3, vt0.c0))) AND (((vt2.c1) NOT BETWEEN (v0.c0) AND (v0.c2))))) ORDER BY ((CAST('0.9454015418188614' AS REAL))IS NOT(((vt2.c0)!=(v0.c1))))  NULLS LAST;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (((v0.c1 COLLATE RTRIM) NOT BETWEEN ((vt2.c0 IN (v0.c3, vt0.c0))) AND (((vt2.c1) NOT BETWEEN (v0.c0) AND (v0.c2))))) ORDER BY ((CAST('0.9454015418188614' AS REAL))IS NOT(((vt2.c0)!=(v0.c1))))  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON (((vt2.c1)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)))) AND ((v0.c3))) WHERE (vt2.c1);
SELECT DISTINCT * FROM vt2, vt0 INNER JOIN v0 ON (((vt2.c1)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)))) AND ((v0.c3))) WHERE (((vt2.c1)AND((((v0.c1 IN (vt2.c0, vt2.c0))) IS FALSE)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2, vt0 INNER JOIN v0 ON (((vt2.c1)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)))) AND ((v0.c3))) WHERE ((((v0.c0)<=(vt2.c0)) IN (v0.c1 COLLATE NOCASE))) LIMIT 0X0;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON (((vt2.c1)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)))) AND ((v0.c3))) WHERE (vt2.c1);
SELECT DISTINCT * FROM vt2, vt0 INNER JOIN v0 ON (((vt2.c1)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)))) AND ((v0.c3))) WHERE (((vt2.c1)AND((((v0.c1 IN (vt2.c0, vt2.c0))) IS FALSE)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2, vt0 INNER JOIN v0 ON (((vt2.c1)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c2) AND (vt2.c1)))) AND ((v0.c3))) WHERE ((((v0.c0)<=(vt2.c0)) IN (v0.c1 COLLATE NOCASE))) LIMIT 0X0;
SELECT MIN(v0.c0) FROM vt2, v0 NATURAL JOIN vt0 WHERE (((vt2.c0 COLLATE NOCASE)-(v0.c3 COLLATE NOCASE))) ORDER BY (((+ (v0.c1))) NOTNULL) ASC  NULLS LAST, ((((v0.c3)LIKE(v0.c2)))/((((v0.c3)) NOT BETWEEN ((NULL)) AND ((vt2.c1))))) DESC;
SELECT DISTINCT MIN(v0.c0) FROM vt2, v0 NATURAL JOIN vt0 WHERE (((((vt2.c0 COLLATE NOCASE)-(v0.c3 COLLATE NOCASE)))AND(((((((((v0.c1)AND(v0.c2)))AND(vt0.c0)))OR(v0.c0))) BETWEEN ((v0.c3 IN (v0.c1))) AND (json_array_length(v0.c3)))))) ORDER BY (((vt2.c0, v0.c0, v0.c1, v0.c1, v0.c2, v0.c2)) NOT BETWEEN ((((vt2.c0)/(v0.c1)), ((v0.c1) BETWEEN (v0.c3) AND (v0.c3)), ((((((((vt2.c0)OR(v0.c0)))OR(v0.c0)))OR(vt2.c0)))AND(v0.c3)), ((((((((((vt2.c1)AND(v0.c0)))AND(v0.c0)))AND(vt2.c1)))OR(vt2.c1)))OR(v0.c1)), vt0.c0, CASE v0.c2  WHEN v0.c2 THEN NULL WHEN vt2.c1 THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN vt0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END)) AND ((((NULL)>>(vt2.c1)), ((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c1)), ((vt2.c0)IS NOT(v0.c1)), (~ (0.25758905560298906)), ((vt0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)), ((v0.c0) NOT BETWEEN (x'6e87') AND (v0.c0))))) DESC  NULLS LAST LIMIT 0x1 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM vt2, v0 NATURAL JOIN vt0 WHERE (0.21587349970715342) ORDER BY (((vt2.c0, v0.c0, v0.c1, v0.c1, v0.c2, v0.c2)) NOT BETWEEN ((((vt2.c0)/(v0.c1)), ((v0.c1) BETWEEN (v0.c3) AND (v0.c3)), ((((((((vt2.c0)OR(v0.c0)))OR(v0.c0)))OR(vt2.c0)))AND(v0.c3)), ((((((((((vt2.c1)AND(v0.c0)))AND(v0.c0)))AND(vt2.c1)))OR(vt2.c1)))OR(v0.c1)), vt0.c0, CASE v0.c2  WHEN v0.c2 THEN NULL WHEN vt2.c1 THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN vt0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c1 ELSE v0.c1 END)) AND ((((NULL)>>(vt2.c1)), ((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c1)), ((vt2.c0)IS NOT(v0.c1)), (~ (0.25758905560298906)), ((vt0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)), ((v0.c0) NOT BETWEEN (x'6e87') AND (v0.c0))))) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt0 INNER JOIN vt2 ON CASE ((((((((((((v0.c0)AND(vt2.c0)))AND(x'')))AND(v0.c0)))AND(NULL)))OR(v0.c1)))AND(v0.c2))  WHEN (v0.c2 IN (v0.c1)) THEN ((v0.c0)+(0.01038816462702874)) WHEN CAST(v0.c2 AS NUMERIC) THEN ((((((vt0.c0)OR(vt2.c1)))AND(v0.c3)))OR(v0.c0)) END LEFT OUTER JOIN v0 ON CASE WHEN CASE '-1548503606'  WHEN v0.c1 THEN vt0.c0 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END THEN (+ (vt0.c0)) ELSE CASE vt0.c0  WHEN v0.c2 THEN vt2.c0 ELSE vt2.c1 END END WHERE ((((vt0.c0, v0.c0, '-1680991631')) NOT BETWEEN ((((((v0.c0)AND(vt2.c1)))OR(vt2.c1)), ((vt2.c1) IS FALSE), v0.c0 COLLATE NOCASE)) AND (((v0.c2 IN (v0.c0)), v0.c3, vt2.c1 COLLATE NOCASE)))) ORDER BY ((v0.c0 IN ()) IN ())  NULLS LAST;
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON CASE ((((((((((((v0.c0)AND(vt2.c0)))AND(x'')))AND(v0.c0)))AND(NULL)))OR(v0.c1)))AND(v0.c2))  WHEN (v0.c2 IN (v0.c1)) THEN ((v0.c0)+(0.01038816462702874)) WHEN CAST(v0.c2 AS NUMERIC) THEN ((((((vt0.c0)OR(vt2.c1)))AND(v0.c3)))OR(v0.c0)) END INNER JOIN v0 ON CASE WHEN CASE '-1548503606'  WHEN v0.c1 THEN vt0.c0 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END THEN (+ (vt0.c0)) ELSE CASE vt0.c0  WHEN v0.c2 THEN vt2.c0 ELSE vt2.c1 END END WHERE ((((((vt0.c0, v0.c0, '-1680991631')) NOT BETWEEN ((((((v0.c0)AND(vt2.c1)))OR(vt2.c1)), ((vt2.c1) IS FALSE), v0.c0 COLLATE NOCASE)) AND (((v0.c2 IN (v0.c0)), v0.c3, vt2.c1 COLLATE NOCASE))))AND((((v0.c2 IN ())) NOT NULL)))) ORDER BY ((v0.c0 IN ()) IN ())  NULLS LAST LIMIT 0X1;
SELECT * FROM vt0 INNER JOIN vt2 ON CASE ((((((((((((v0.c0)AND(vt2.c0)))AND(x'')))AND(v0.c0)))AND(NULL)))OR(v0.c1)))AND(v0.c2))  WHEN (v0.c2 IN (v0.c1)) THEN ((v0.c0)+(0.01038816462702874)) WHEN CAST(v0.c2 AS NUMERIC) THEN ((((((vt0.c0)OR(vt2.c1)))AND(v0.c3)))OR(v0.c0)) END LEFT OUTER JOIN v0 ON CASE WHEN CASE '-1548503606'  WHEN v0.c1 THEN vt0.c0 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END THEN (+ (vt0.c0)) ELSE CASE vt0.c0  WHEN v0.c2 THEN vt2.c0 ELSE vt2.c1 END END WHERE ((((vt0.c0, v0.c0, '-1680991631')) NOT BETWEEN ((((((v0.c0)AND(vt2.c1)))OR(vt2.c1)), ((vt2.c1) IS FALSE), v0.c0 COLLATE NOCASE)) AND (((v0.c2 IN (v0.c0)), v0.c3, vt2.c1 COLLATE NOCASE)))) ORDER BY ((v0.c0 IN ()) IN ())  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c3 COLLATE NOCASE, RTRIM(v0.c3)))<=((((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)), 0.18768605319681042)))) ORDER BY v0.c3, ((((((CASE vt2.c0  WHEN vt0.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 END)OR(vt2.c0 COLLATE BINARY)))OR((NOT (v0.c2)))))AND((- (0.00687043682421995)))) ASC;
SELECT * FROM vt0, v0, vt2 WHERE ((((v0.c3 COLLATE NOCASE, RTRIM(v0.c3)))=((((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)), 0.18768605319681042)))) ORDER BY v0.c3, ((((((CASE vt2.c0  WHEN vt0.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 END)OR(vt2.c0 COLLATE BINARY)))OR((NOT (v0.c2)))))AND((- (0.00687043682421995)))) ASC INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (((((((UNICODE(v0.c3))OR(GLOB(0x75d21e7f, v0.c3))))AND((vt2.c1 IN ()))))OR(v0.c2))) ORDER BY v0.c3, ((((((CASE vt2.c0  WHEN vt0.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 END)OR(vt2.c0 COLLATE BINARY)))OR((NOT (v0.c2)))))AND((- (0.00687043682421995)))) ASC;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c3 COLLATE NOCASE, RTRIM(v0.c3)))<=((((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)), 0.18768605319681042)))) ORDER BY v0.c3, ((((((CASE vt2.c0  WHEN vt0.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 END)OR(vt2.c0 COLLATE BINARY)))OR((NOT (v0.c2)))))AND((- (0.00687043682421995)))) ASC;
SELECT * FROM vt0, v0, vt2 WHERE ((((v0.c3 COLLATE NOCASE, RTRIM(v0.c3)))=((((vt2.c1) BETWEEN (vt2.c1) AND (v0.c2)), 0.18768605319681042)))) ORDER BY v0.c3, ((((((CASE vt2.c0  WHEN vt0.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 END)OR(vt2.c0 COLLATE BINARY)))OR((NOT (v0.c2)))))AND((- (0.00687043682421995)))) ASC INTERSECT SELECT ALL * FROM vt0, v0, vt2 WHERE (((((((UNICODE(v0.c3))OR(GLOB(0x75d21e7f, v0.c3))))AND((vt2.c1 IN ()))))OR(v0.c2))) ORDER BY v0.c3, ((((((CASE vt2.c0  WHEN vt0.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 END)OR(vt2.c0 COLLATE BINARY)))OR((NOT (v0.c2)))))AND((- (0.00687043682421995)))) ASC;
SELECT ALL MIN(v0.c0) FROM v0, vt2 INNER JOIN vt0 ON CAST(((vt2.c1)IS NOT(v0.c3)) AS NUMERIC) WHERE ((((((vt2.c1))<((v0.c0))))>>(IFNULL(v0.c0, vt0.c0)))) ORDER BY NULL DESC, (NOT (CAST(vt2.c1 AS BLOB))) ASC;
SELECT DISTINCT MIN(v0.c0) FROM v0, vt2 INNER JOIN vt0 ON CAST(((vt2.c1)IS NOT(v0.c3)) AS NUMERIC) WHERE ((((((vt2.c1))<((v0.c0))))>>(IFNULL(v0.c0, vt0.c0)))) ORDER BY (~ (((vt2.c0)IS NOT(v0.c1))))  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0, vt2 INNER JOIN vt0 ON CAST(((vt2.c1)IS NOT(v0.c3)) AS NUMERIC) WHERE ('') ORDER BY (~ (((vt2.c0)IS NOT(v0.c1))))  NULLS FIRST LIMIT 0X0;
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 END COLLATE RTRIM) ORDER BY ((((((((vt2.c0)AND(vt2.c0)))OR(NULL)))AND(vt2.c1))) NOT BETWEEN (vt2.c1 COLLATE RTRIM) AND ((((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN ((vt2.c1, x'cd', vt2.c0)) AND (('	X', vt2.c1, vt2.c0))))), ((((((x'b7553a')OR(((vt2.c1) IS TRUE))))AND((vt2.c0 IN (vt2.c0, vt2.c1)))))AND((~ (vt2.c1))));
SELECT MIN(vt2.c1) FROM vt2 WHERE (((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 END COLLATE RTRIM)AND(CAST(CAST(vt2.c1 AS INTEGER) AS TEXT)))) ORDER BY ((((((((vt2.c0)AND(vt2.c0)))OR(NULL)))AND(vt2.c1))) NOT BETWEEN (vt2.c1 COLLATE RTRIM) AND ((((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN ((vt2.c1, x'cd', vt2.c0)) AND (('	X', vt2.c1, vt2.c0))))), ((((((x'b7553a')OR(((vt2.c1) IS TRUE))))AND((vt2.c0 IN (vt2.c0, vt2.c1)))))AND((~ (vt2.c1)))) LIMIT 0X2;
SELECT ALL * FROM vt2 WHERE ((+ (vt2.c1))) ORDER BY '', (NOT (vt2.c0));
SELECT DISTINCT * FROM vt2 WHERE ((((+ (vt2.c1)))AND(((vt2.c0)>=(((vt2.c0)OR(vt2.c1))))))) ORDER BY '', (NOT (vt2.c0)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((((((CAST(vt2.c1 AS TEXT))AND((((vt2.c1))<>((vt2.c1))))))OR(((vt2.c1)AND(vt2.c1)))))OR(((((((((vt2.c0)AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))))OR(SQLITE_VERSION()))) ORDER BY '', (NOT (vt2.c0)) LIMIT 1;
SELECT ALL * FROM vt2 WHERE ((+ (vt2.c1))) ORDER BY '', (NOT (vt2.c0));
SELECT DISTINCT * FROM vt2 WHERE ((((+ (vt2.c1)))AND(((vt2.c0)>=(((vt2.c0)OR(vt2.c1))))))) ORDER BY '', (NOT (vt2.c0)) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((((((((CAST(vt2.c1 AS TEXT))AND((((vt2.c1))<>((vt2.c1))))))OR(((vt2.c1)AND(vt2.c1)))))OR(((((((((vt2.c0)AND(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))OR(vt2.c0)))))OR(SQLITE_VERSION()))) ORDER BY '', (NOT (vt2.c0)) LIMIT 1;
SELECT MAX(v0.c1) FROM v0, vt0 WHERE ((((v0.c1))>((((v0.c1) ISNULL)))));
SELECT DISTINCT MAX(v0.c1) FROM v0, vt0 WHERE ((((v0.c1))>((((v0.c1) ISNULL))))) LIMIT 0;
SELECT ALL * FROM v0 NATURAL JOIN vt0 INNER JOIN vt2 ON (vt2.c0 COLLATE RTRIM IN (((vt2.c1) BETWEEN (vt2.c0) AND (v0.c0)))) WHERE (v0.c3);
SELECT * FROM v0 NATURAL JOIN vt0 INNER JOIN vt2 ON (vt2.c0 COLLATE RTRIM IN (((vt2.c1) BETWEEN (vt2.c0) AND (v0.c0)))) WHERE (((v0.c3)AND(((v0.c1) NOT NULL))));
SELECT ALL * FROM v0 NATURAL JOIN vt0 INNER JOIN vt2 ON (vt2.c0 COLLATE RTRIM IN (((vt2.c1) BETWEEN (vt2.c0) AND (v0.c0)))) WHERE (v0.c3);
SELECT * FROM v0 NATURAL JOIN vt0 INNER JOIN vt2 ON (vt2.c0 COLLATE RTRIM IN (((vt2.c1) BETWEEN (vt2.c0) AND (v0.c0)))) WHERE (((v0.c3)AND(((v0.c1) NOT NULL))));
SELECT * FROM vt2 WHERE (0.168878511363596) ORDER BY vt2.c0;
SELECT DISTINCT * FROM vt2 WHERE (((0.168878511363596)AND(((vt2.c1 COLLATE NOCASE)+(((vt2.c0)*(vt2.c1))))))) ORDER BY json_array(NULL, CAST(vt2.c0 AS INTEGER), vt2.c1 COLLATE BINARY, CAST(vt2.c1 AS TEXT)) LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1)<<(COALESCE(vt2.c0, vt2.c0, vt2.c0, vt2.c1, vt2.c1, vt2.c1)))) ORDER BY json_array(NULL, CAST(vt2.c0 AS INTEGER), vt2.c1 COLLATE BINARY, CAST(vt2.c1 AS TEXT)) LIMIT 3;
SELECT * FROM vt2 WHERE (0.168878511363596) ORDER BY vt2.c0;
SELECT DISTINCT * FROM vt2 WHERE (((0.168878511363596)AND(((vt2.c1 COLLATE NOCASE)+(((vt2.c0)*(vt2.c1))))))) ORDER BY json_array(NULL, CAST(vt2.c0 AS INTEGER), vt2.c1 COLLATE BINARY, CAST(vt2.c1 AS TEXT)) LIMIT 0x3 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1)<<(COALESCE(vt2.c0, vt2.c0, vt2.c0, vt2.c1, vt2.c1, vt2.c1)))) ORDER BY json_array(NULL, CAST(vt2.c0 AS INTEGER), vt2.c1 COLLATE BINARY, CAST(vt2.c1 AS TEXT)) LIMIT 3;
SELECT MIN(v0.c0) FROM vt2, vt0, v0 WHERE ((v0.c2 COLLATE BINARY IN ())) ORDER BY v0.c1  NULLS LAST, (((vt2.c1, v0.c3)) NOT BETWEEN ((((vt0.c0)<(v0.c1)), vt2.c0 COLLATE NOCASE)) AND ((CAST(v0.c2 AS TEXT), vt2.c1 COLLATE NOCASE))) ASC;
SELECT DISTINCT MIN(v0.c0) FROM vt2, vt0, v0 WHERE ((v0.c2 COLLATE BINARY IN ())) ORDER BY (- (((v0.c1)>>(vt0.c0))))  NULLS LAST, ((((((vt2.c0)OR(v0.c3)))AND(v0.c2)))||(LIKELY(vt2.c1))) DESC LIMIT 0x2;
SELECT ALL COUNT(*) FROM v0 WHERE (x'');
SELECT DISTINCT COUNT(*) FROM v0 WHERE (x'') ORDER BY '1674788083'  NULLS LAST, ((((v0.c3)*(v0.c3)))+(2.14129716E8)) INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))IS(0.8187743571278325))) ORDER BY '1674788083'  NULLS LAST, ((((v0.c3)*(v0.c3)))+(2.14129716E8));
SELECT COUNT(*) FROM vt2, v0 WHERE (((JULIANDAY(v0.c2, v0.c2, vt2.c0))+(ABS(v0.c2)))) ORDER BY ((vt2.c1 COLLATE BINARY) BETWEEN (((v0.c3)IS NOT(0Xffffffffc01a7cba))) AND (CAST(v0.c0 AS NUMERIC))) ASC  NULLS LAST, ((((v0.c1) NOTNULL)) NOTNULL) DESC;
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE (((((JULIANDAY(v0.c2, v0.c2, vt2.c0))+(ABS(v0.c2))))AND(((((((((NULL)OR(((v0.c0)-(x'2e')))))AND((vt2.c1 IN ()))))AND((~ (vt2.c0)))))AND(DATE(vt2.c0, NULL, v0.c2, vt2.c1, vt2.c1)))))) ORDER BY (((((vt2.c1, vt2.c1))>((v0.c2, v0.c1))))GLOB((v0.c0 IN (vt2.c1)))) ASC  NULLS FIRST, DATE(CAST(v0.c1 AS INTEGER), ((v0.c1) IS TRUE), (((v0.c0, vt2.c0, v0.c1)) BETWEEN ((vt2.c0, v0.c1, vt2.c0)) AND ((v0.c3, vt2.c1, v0.c0))))  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE (((((v0.c3) BETWEEN (v0.c0) AND (v0.c0)))|(LOWER(DISTINCT v0.c2)))) ORDER BY (((((vt2.c1, vt2.c1))>((v0.c2, v0.c1))))GLOB((v0.c0 IN (vt2.c1)))) ASC  NULLS FIRST, DATE(CAST(v0.c1 AS INTEGER), ((v0.c1) IS TRUE), (((v0.c0, vt2.c0, v0.c1)) BETWEEN ((vt2.c0, v0.c1, vt2.c0)) AND ((v0.c3, vt2.c1, v0.c0))))  NULLS FIRST LIMIT 0;
SELECT MIN(vt2.c0) FROM vt2 WHERE (vt2.c1) ORDER BY vt2.c0  NULLS FIRST, CASE CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END  WHEN (NOT (vt2.c0)) THEN vt2.c1 WHEN (+ (vt2.c0)) THEN vt2.c0 COLLATE BINARY ELSE ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END  NULLS FIRST;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (((vt2.c1)AND((((((('} C[Z\c')AND(vt2.c0)))AND(vt2.c1)))%(((vt2.c1) ISNULL)))))) ORDER BY vt2.c0  NULLS FIRST, CASE CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END  WHEN (NOT (vt2.c0)) THEN vt2.c1 WHEN (+ (vt2.c0)) THEN vt2.c0 COLLATE BINARY ELSE ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL MIN(vt2.c0) FROM vt2 WHERE ((((NOT (vt2.c0)))*((vt2.c1 IN ())))) ORDER BY vt2.c0  NULLS FIRST, CASE CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END  WHEN (NOT (vt2.c0)) THEN vt2.c1 WHEN (+ (vt2.c0)) THEN vt2.c0 COLLATE BINARY ELSE ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0)) END  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt0 INNER JOIN v0 ON STRFTIME(v0.c1, 'uX쉇酱3L', ((vt2.c0)+(vt2.c0)), 0.1276477221040504) INNER JOIN vt2 ON (CAST(vt2.c1 AS BLOB) IN ()) WHERE (CAST(v0.c3 AS BLOB) COLLATE NOCASE) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)) THEN CASE vt2.c0  WHEN x'3f' THEN vt2.c0 WHEN v0.c0 THEN v0.c2 ELSE '-1116008186' END END;
SELECT * FROM vt0 INNER JOIN v0 ON STRFTIME(v0.c1, 'uX쉇酱3L', ((vt2.c0)+(vt2.c0)), 0.1276477221040504) INNER JOIN vt2 ON (CAST(vt2.c1 AS BLOB) IN ()) WHERE (CAST(v0.c3 AS BLOB) COLLATE NOCASE) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)) THEN CASE vt2.c0  WHEN x'3f' THEN vt2.c0 WHEN v0.c0 THEN v0.c2 ELSE '-1116008186' END END LIMIT 0X0;
SELECT ALL * FROM vt0 INNER JOIN v0 ON STRFTIME(v0.c1, 'uX쉇酱3L', ((vt2.c0)+(vt2.c0)), 0.1276477221040504) INNER JOIN vt2 ON (CAST(vt2.c1 AS BLOB) IN ()) WHERE (CAST(v0.c3 AS BLOB) COLLATE NOCASE) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)) THEN CASE vt2.c0  WHEN x'3f' THEN vt2.c0 WHEN v0.c0 THEN v0.c2 ELSE '-1116008186' END END;
SELECT * FROM vt0 INNER JOIN v0 ON STRFTIME(v0.c1, 'uX쉇酱3L', ((vt2.c0)+(vt2.c0)), 0.1276477221040504) INNER JOIN vt2 ON (CAST(vt2.c1 AS BLOB) IN ()) WHERE (CAST(v0.c3 AS BLOB) COLLATE NOCASE) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)) THEN CASE vt2.c0  WHEN x'3f' THEN vt2.c0 WHEN v0.c0 THEN v0.c2 ELSE '-1116008186' END END LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE ((((HEX(vt0.c0), (((vt0.c0)) BETWEEN ((v0.c0)) AND ((v0.c2)))))>=((v0.c0 COLLATE BINARY, ((v0.c3)<(v0.c1)))))) ORDER BY ((load_extension(v0.c3, v0.c1))GLOB(((v0.c2)GLOB(v0.c0)))) DESC;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE ((((((HEX(vt0.c0), (((vt0.c0)) BETWEEN ((v0.c0)) AND ((v0.c2)))))>=((v0.c0 COLLATE BINARY, ((v0.c3)<(v0.c1))))))AND((+ ((NOT (v0.c1))))))) ORDER BY GLOB(vt0.c0, v0.c1) COLLATE BINARY;
SELECT ALL * FROM v0, vt0 WHERE ((((v0.c2)) BETWEEN (((NULL IN (v0.c1)))) AND (((((v0.c3, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, v0.c2)))))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((v0.c2)) BETWEEN (((NULL IN (v0.c1)))) AND (((((v0.c3, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, v0.c2))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (CAST((NOT (v0.c2)) AS REAL)) LIMIT 1;
SELECT ALL * FROM v0, vt0 WHERE ((((v0.c2)) BETWEEN (((NULL IN (v0.c1)))) AND (((((v0.c3, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, v0.c2)))))));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((v0.c2)) BETWEEN (((NULL IN (v0.c1)))) AND (((((v0.c3, v0.c2)) NOT BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, v0.c2))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE (CAST((NOT (v0.c2)) AS REAL)) LIMIT 1;
SELECT * FROM vt0, vt2, v0 WHERE ((((v0.c2)IS('-433181884')) IN (CAST(vt2.c0 AS BLOB), (v0.c2 IN (v0.c2)))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((v0.c2)IS('-433181884')) IN (CAST(vt2.c0 AS BLOB))))AND(CAST(v0.c3 AS NUMERIC)))) LIMIT 0X0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((CASE WHEN v0.c3 THEN v0.c0 END IN (((((vt2.c0)AND(vt0.c0)))AND(v0.c0)), (NOT (vt2.c0))))) LIMIT 0;
SELECT * FROM vt0, vt2, v0 WHERE ((((v0.c2)IS('-433181884')) IN (CAST(vt2.c0 AS BLOB), (v0.c2 IN (v0.c2)))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((v0.c2)IS('-433181884')) IN (CAST(vt2.c0 AS BLOB))))AND(CAST(v0.c3 AS NUMERIC)))) LIMIT 0X0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((CASE WHEN v0.c3 THEN v0.c0 END IN (((((vt2.c0)AND(vt0.c0)))AND(v0.c0)), (NOT (vt2.c0))))) LIMIT 0;
SELECT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (CAST(((0.023694149166923695) NOT BETWEEN (v0.c2) AND (v0.c1)) AS TEXT));
SELECT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (CAST(((0.023694149166923695) NOT BETWEEN (v0.c2) AND (v0.c1)) AS TEXT)) LIMIT 0X6;
SELECT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (CAST(((0.023694149166923695) NOT BETWEEN (v0.c2) AND (v0.c1)) AS TEXT));
SELECT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (CAST(((0.023694149166923695) NOT BETWEEN (v0.c2) AND (v0.c1)) AS TEXT)) LIMIT 0X6;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (CAST((((vt2.c1))>=((vt2.c0))) AS TEXT));
SELECT MIN(vt2.c0) FROM vt2 WHERE (((CAST((((vt2.c1))>=((vt2.c0))) AS TEXT))AND(((((CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END)OR(CASE WHEN vt2.c1 THEN vt2.c0 END)))AND(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))))))) ORDER BY x'' INTERSECT SELECT MIN(vt2.c0) FROM vt2 WHERE (NULL) ORDER BY x'';
SELECT * FROM v0 WHERE (CASE CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN v0.c2 END  WHEN ((v0.c0)IS(v0.c3)) THEN ((v0.c2)IS NOT(v0.c2)) WHEN (+ (v0.c0)) THEN ((v0.c1)IS NOT('+L)#''Mvw')) END) ORDER BY ((((0.8186621567854889, v0.c0, v0.c3, v0.c2, v0.c2))!=((v0.c2, v0.c3, v0.c2, v0.c2, v0.c1))) IN ())  NULLS LAST;
SELECT * FROM v0 WHERE (((CASE CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN v0.c2 END  WHEN ((v0.c0)IS(v0.c3)) THEN ((v0.c2)IS NOT(v0.c2)) WHEN (+ (v0.c0)) THEN ((v0.c1)IS NOT('+L)#''Mvw')) END)AND(0x36a470b6))) ORDER BY ((((0.8186621567854889, v0.c0, v0.c3, v0.c2, v0.c2))<>((v0.c2, v0.c3, v0.c2, v0.c2, v0.c1))) IN ())  NULLS LAST LIMIT 1;
SELECT * FROM v0 WHERE (CASE CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN v0.c2 END  WHEN ((v0.c0)IS(v0.c3)) THEN ((v0.c2)IS NOT(v0.c2)) WHEN (+ (v0.c0)) THEN ((v0.c1)IS NOT('+L)#''Mvw')) END) ORDER BY ((((0.8186621567854889, v0.c0, v0.c3, v0.c2, v0.c2))!=((v0.c2, v0.c3, v0.c2, v0.c2, v0.c1))) IN ())  NULLS LAST;
SELECT * FROM vt0, vt2, v0 WHERE (((((~ (vt0.c0)), v0.c3 COLLATE BINARY, ((vt0.c0)/(v0.c1))))<((x'c72e', (vt2.c0 IN (v0.c2)), ((((((((v0.c2)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)))OR(v0.c2)))))) ORDER BY (- (vt0.c0 COLLATE BINARY)), ((((((CASE v0.c0  WHEN vt2.c0 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN vt2.c1 END)AND(CAST(vt2.c1 AS TEXT))))OR(CASE WHEN vt0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)))OR(((v0.c3)<<(''))));
SELECT * FROM vt0, vt2, v0 WHERE (((((((~ (vt0.c0)), v0.c3 COLLATE BINARY, ((vt0.c0)/(v0.c1))))<((x'c72e', (vt2.c0 IN (v0.c2)), ((((((((v0.c2)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)))OR(v0.c2))))))AND(vt2.c0))) ORDER BY (- (vt0.c0 COLLATE BINARY)), ((((((CASE v0.c0  WHEN vt2.c0 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN vt2.c1 END)AND(CAST(vt2.c1 AS TEXT))))OR(CASE WHEN vt0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)))OR(((v0.c3)<<('')))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((vt0.c0)/(x'b651')), CHANGES(), ((vt2.c0) BETWEEN (0.6828941895217597) AND (vt0.c0))))<((vt0.c0 COLLATE BINARY, PRINTF(vt2.c1), ((((((vt2.c1)AND(vt2.c1)))AND(v0.c1)))AND(vt0.c0)))))) ORDER BY (- (vt0.c0 COLLATE BINARY)), ((((((CASE v0.c0  WHEN vt2.c0 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN vt2.c1 END)AND(CAST(vt2.c1 AS TEXT))))OR(CASE WHEN vt0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)))OR(((v0.c3)<<('')))) LIMIT 0;
SELECT * FROM vt0, vt2, v0 WHERE (((((~ (vt0.c0)), v0.c3 COLLATE BINARY, ((vt0.c0)/(v0.c1))))<((x'c72e', (vt2.c0 IN (v0.c2)), ((((((((v0.c2)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)))OR(v0.c2)))))) ORDER BY (- (vt0.c0 COLLATE BINARY)), ((((((CASE v0.c0  WHEN vt2.c0 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN vt2.c1 END)AND(CAST(vt2.c1 AS TEXT))))OR(CASE WHEN vt0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)))OR(((v0.c3)<<(''))));
SELECT * FROM vt0, vt2, v0 WHERE (((((((~ (vt0.c0)), v0.c3 COLLATE BINARY, ((vt0.c0)/(v0.c1))))<((x'c72e', (vt2.c0 IN (v0.c2)), ((((((((v0.c2)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)))OR(v0.c2))))))AND(vt2.c0))) ORDER BY (- (vt0.c0 COLLATE BINARY)), ((((((CASE v0.c0  WHEN vt2.c0 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN vt2.c1 END)AND(CAST(vt2.c1 AS TEXT))))OR(CASE WHEN vt0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)))OR(((v0.c3)<<('')))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((vt0.c0)/(x'b651')), CHANGES(), ((vt2.c0) BETWEEN (0.6828941895217597) AND (vt0.c0))))<((vt0.c0 COLLATE BINARY, PRINTF(vt2.c1), ((((((vt2.c1)AND(vt2.c1)))AND(v0.c1)))AND(vt0.c0)))))) ORDER BY (- (vt0.c0 COLLATE BINARY)), ((((((CASE v0.c0  WHEN vt2.c0 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN vt2.c1 END)AND(CAST(vt2.c1 AS TEXT))))OR(CASE WHEN vt0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c1 END)))OR(((v0.c3)<<('')))) LIMIT 0;
SELECT ALL * FROM v0 WHERE (((- (v0.c3)) IN ()));
SELECT DISTINCT * FROM v0 WHERE (((((- (v0.c3)) IN ()))AND((((v0.c1, v0.c0)) NOT BETWEEN ((v0.c0, ((v0.c2) BETWEEN (v0.c0) AND (v0.c1)))) AND (((((v0.c1, v0.c0, v0.c0))=((v0.c3, v0.c0, v0.c3))), v0.c1 COLLATE RTRIM)))))) LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (((- (v0.c3)) IN ()));
SELECT DISTINCT * FROM v0 WHERE (((((- (v0.c3)) IN ()))AND((((v0.c1, v0.c0)) NOT BETWEEN ((v0.c0, ((v0.c2) BETWEEN (v0.c0) AND (v0.c1)))) AND (((((v0.c1, v0.c0, v0.c0))=((v0.c3, v0.c0, v0.c3))), v0.c1 COLLATE RTRIM)))))) LIMIT 0X0;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE BINARY) NOTNULL));
SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE BINARY) NOTNULL)) ORDER BY ((((NULL) ISNULL))|(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'dc34' ELSE vt0.c0 END)) DESC  NULLS FIRST LIMIT 0x1;
SELECT MAX(v0.c0) FROM v0 WHERE (((((((((((v0.c2)OR(v0.c3)))OR(0x3a64b94c)))OR(v0.c1)))AND(v0.c1))) NOTNULL)) ORDER BY (+ (((NULL)=(v0.c2)))) ASC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c0) FROM v0 WHERE (((((((((((v0.c2)OR(v0.c3)))OR(979679564)))OR(v0.c1)))AND(v0.c1))) NOTNULL)) ORDER BY (((CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 ELSE v0.c0 END, TRIM(v0.c2)))<=(((+ (v0.c3)), ((v0.c3)*(v0.c0)))))  NULLS LAST, (((((v0.c0, v0.c3, v0.c1)) BETWEEN ((v0.c2, v0.c1, v0.c0)) AND ((v0.c0, v0.c0, v0.c2)))) NOT BETWEEN (COALESCE(DISTINCT v0.c2, v0.c3)) AND (((v0.c0)>=(v0.c1))));
SELECT ALL * FROM vt2, v0 WHERE (((((v0.c0)!=(vt2.c1)))||(((v0.c1) IS TRUE)))) ORDER BY ((((((((SUBSTR(vt2.c0, v0.c3))OR((+ (v0.c0)))))OR(v0.c3 COLLATE BINARY)))AND(((vt2.c1) BETWEEN (v0.c2) AND (vt2.c0)))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1)))), (((v0.c2 IN ())) NOTNULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((((v0.c0)!=(vt2.c1)))||(((v0.c1) IS TRUE)))) ORDER BY ((((((((SUBSTR(vt2.c0, v0.c3))OR((+ (v0.c0)))))OR(v0.c3 COLLATE BINARY)))AND(((vt2.c1) BETWEEN (v0.c2) AND (vt2.c0)))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1)))), (((v0.c2 IN ())) NOTNULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((json_remove(v0.c3, v0.c0, vt2.c0))=(CAST(vt2.c1 AS INTEGER)))) ORDER BY ((((((((SUBSTR(vt2.c0, v0.c3))OR((+ (v0.c0)))))OR(v0.c3 COLLATE BINARY)))AND(((vt2.c1) BETWEEN (v0.c2) AND (vt2.c0)))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1)))), (((v0.c2 IN ())) NOTNULL) ASC  NULLS LAST;
SELECT ALL * FROM vt2, v0 WHERE (((((v0.c0)!=(vt2.c1)))||(((v0.c1) IS TRUE)))) ORDER BY ((((((((SUBSTR(vt2.c0, v0.c3))OR((+ (v0.c0)))))OR(v0.c3 COLLATE BINARY)))AND(((vt2.c1) BETWEEN (v0.c2) AND (vt2.c0)))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1)))), (((v0.c2 IN ())) NOTNULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((((v0.c0)!=(vt2.c1)))||(((v0.c1) IS TRUE)))) ORDER BY ((((((((SUBSTR(vt2.c0, v0.c3))OR((+ (v0.c0)))))OR(v0.c3 COLLATE BINARY)))AND(((vt2.c1) BETWEEN (v0.c2) AND (vt2.c0)))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1)))), (((v0.c2 IN ())) NOTNULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((json_remove(v0.c3, v0.c0, vt2.c0))=(CAST(vt2.c1 AS INTEGER)))) ORDER BY ((((((((SUBSTR(vt2.c0, v0.c3))OR((+ (v0.c0)))))OR(v0.c3 COLLATE BINARY)))AND(((vt2.c1) BETWEEN (v0.c2) AND (vt2.c0)))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1)))), (((v0.c2 IN ())) NOTNULL) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE ((('aB(%%W''
')>((+ (vt2.c0))))) ORDER BY ((((((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c3)))AND(((((vt2.c1)AND(v0.c2)))OR(v0.c0)))))AND((((0.7042847549151111, v0.c3))!=((0.9819220592660912, v0.c2))))))AND((NOT (vt2.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE ((('aB(%%W''
')>((+ (vt2.c0))))) ORDER BY ((((((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c3)))AND(((((vt2.c1)AND(v0.c2)))OR(v0.c0)))))AND((((0.7042847549151111, v0.c3))!=((0.9819220592660912, v0.c2))))))AND((NOT (vt2.c0)))) ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (vt2.c0) ORDER BY ((((((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c3)))AND(((((vt2.c1)AND(v0.c2)))OR(v0.c0)))))AND((((0.7042847549151111, v0.c3))<>((0.9819220592660912, v0.c2))))))AND((NOT (vt2.c0)))) ASC  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM vt2 INNER JOIN v0 ON CASE WHEN (vt2.c1 IN (vt2.c0)) THEN v0.c3 WHEN ((v0.c0) BETWEEN (v0.c3) AND (vt2.c0)) THEN UNLIKELY(vt2.c1) ELSE CASE WHEN v0.c3 THEN v0.c0 END END NATURAL JOIN vt0 WHERE (NULL) ORDER BY ((v0.c3 COLLATE BINARY) NOTNULL) DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt2 INNER JOIN v0 ON CASE WHEN (vt2.c1 IN (vt2.c0)) THEN v0.c3 WHEN ((v0.c0) BETWEEN (v0.c3) AND (vt2.c0)) THEN UNLIKELY(vt2.c1) ELSE CASE WHEN v0.c3 THEN v0.c0 END END NATURAL JOIN vt0 WHERE (((NULL)AND(((((v0.c3)OR(vt2.c0)))OR(v0.c2))))) ORDER BY ((v0.c3 COLLATE BINARY) NOTNULL) DESC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON SUBSTR((- (vt2.c1)), x'7655') WHERE ((+ (vt2.c1 COLLATE BINARY))) ORDER BY TRIM(v0.c1 COLLATE RTRIM), CAST('-486973353' AS INTEGER);
SELECT DISTINCT * FROM vt2, vt0 INNER JOIN v0 ON SUBSTR((- (vt2.c1)), x'7655') WHERE ((+ (vt2.c1 COLLATE BINARY))) ORDER BY TRIM(v0.c1 COLLATE RTRIM), CAST('-486973353' AS INTEGER) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2, vt0 INNER JOIN v0 ON SUBSTR((- (vt2.c1)), x'7655') WHERE (((((((((HEX(vt0.c0))AND(((v0.c3) ISNULL))))AND(((v0.c0)<(NULL)))))OR((((vt2.c1, v0.c2, vt2.c1))<=((vt0.c0, v0.c0, v0.c1))))))OR((- (vt0.c0))))) ORDER BY TRIM(v0.c1 COLLATE RTRIM), CAST('-486973353' AS INTEGER) LIMIT 0;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON SUBSTR((- (vt2.c1)), x'7655') WHERE ((+ (vt2.c1 COLLATE BINARY))) ORDER BY TRIM(v0.c1 COLLATE RTRIM), CAST('-486973353' AS INTEGER);
SELECT DISTINCT * FROM vt2, vt0 INNER JOIN v0 ON SUBSTR((- (vt2.c1)), x'7655') WHERE ((+ (vt2.c1 COLLATE BINARY))) ORDER BY TRIM(v0.c1 COLLATE RTRIM), CAST('-486973353' AS INTEGER) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2, vt0 INNER JOIN v0 ON SUBSTR((- (vt2.c1)), x'7655') WHERE (((((((((HEX(vt0.c0))AND(((v0.c3) ISNULL))))AND(((v0.c0)<(NULL)))))OR((((vt2.c1, v0.c2, vt2.c1))<=((vt0.c0, v0.c0, v0.c1))))))OR((- (vt0.c0))))) ORDER BY TRIM(v0.c1 COLLATE RTRIM), CAST('-486973353' AS INTEGER) LIMIT 0;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE ((((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1))))>=((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)))))) ORDER BY ((((((vt2.c1)IS NOT(vt2.c0)))AND(CAST(vt2.c0 AS INTEGER))))OR(vt2.c1 COLLATE RTRIM)) ASC, (((((((NOT (vt2.c1)))AND(((vt2.c0) ISNULL))))OR((vt2.c0 IN (vt2.c1)))))AND(((vt2.c1) NOTNULL))) ASC;
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE ((((((((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1))))>=((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0))))))AND(((vt2.c1)+(vt2.c0)) COLLATE RTRIM))) ORDER BY CAST((((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c1, vt2.c1)) AND ((0.0680585670028403, vt2.c1, vt2.c1))) AS REAL), 0.9877212494937684 DESC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (((x'0f')|(((((((((vt2.c0)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0))))) ORDER BY CAST((((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c1, vt2.c1)) AND ((0.0680585670028403, vt2.c1, vt2.c1))) AS REAL), 0.9877212494937684 DESC  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE (COALESCE(DISTINCT -1.727422081E9, ((vt2.c0)>(v0.c0)))) ORDER BY CAST(CAST(v0.c3 AS BLOB) AS BLOB) ASC, ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END) NOT BETWEEN (CAST(v0.c3 AS BLOB)) AND (UPPER(v0.c1)));
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE (((COALESCE(DISTINCT -1.727422081E9, ((vt2.c0)>(v0.c0))))AND(((v0.c0) NOT BETWEEN (vt0.c0) AND ('( nW')) COLLATE RTRIM))) ORDER BY CAST(CAST(v0.c3 AS BLOB) AS BLOB) ASC, ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END) NOT BETWEEN (CAST(v0.c3 AS BLOB)) AND (UPPER(v0.c1))) LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM v0, vt2, vt0 WHERE ('0.575141059001527') ORDER BY CAST(CAST(v0.c3 AS BLOB) AS BLOB) ASC, ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN v0.c1 ELSE v0.c3 END) NOT BETWEEN (CAST(v0.c3 AS BLOB)) AND (UPPER(v0.c1))) LIMIT 0x0;
SELECT COUNT(*) FROM v0 WHERE (v0.c2) ORDER BY CAST((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c2))) AS TEXT);
SELECT DISTINCT COUNT(*) FROM v0 WHERE (v0.c2) ORDER BY CAST((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c2))) AS TEXT);
SELECT MIN(vt2.c0) FROM vt2, v0 NOT INDEXED, vt0 WHERE ((CAST(0.6946256630133808 AS NUMERIC) IN ()));
SELECT DISTINCT MIN(vt2.c0) FROM vt2, v0, vt0 WHERE ((((CAST(0.6946256630133808 AS NUMERIC) IN ()))AND((((((((v0.c0)OR(vt2.c0)))AND(vt2.c1)))AND(v0.c1)) IN (((vt2.c0) IS FALSE), ((((((vt2.c1)OR(vt0.c0)))AND(vt2.c0)))AND(v0.c1))))))) ORDER BY ((((v0.c3) IS FALSE))AND(LENGTH(x'42a120'))) ASC  NULLS LAST, IFNULL(((vt0.c0)IS NOT(v0.c1)), ((v0.c3)<(v0.c1)))  NULLS LAST, ((((vt0.c0)>=(v0.c2))) BETWEEN (((v0.c2) BETWEEN (vt0.c0) AND (vt2.c1))) AND (((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))) ASC, ('ZD0r,〥gxP' IN (((0.2784089528524616) BETWEEN (v0.c0) AND (vt0.c0)), ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))) ASC INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2, v0, vt0 WHERE ((NOT (((v0.c2)/(vt2.c0))))) ORDER BY ((((v0.c3) IS FALSE))AND(LENGTH(x'42a120'))) ASC  NULLS LAST, IFNULL(((vt0.c0)IS NOT(v0.c1)), ((v0.c3)<(v0.c1)))  NULLS LAST, ((((vt0.c0)>=(v0.c2))) BETWEEN (((v0.c2) BETWEEN (vt0.c0) AND (vt2.c1))) AND (((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))) ASC, ('ZD0r,〥gxP' IN (((0.2784089528524616) BETWEEN (v0.c0) AND (vt0.c0)), ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))) ASC;
SELECT COUNT(*) FROM vt0 WHERE (((((CAST(vt0.c0 AS NUMERIC))AND((- (vt0.c0)))))OR(CAST(vt0.c0 AS NUMERIC))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((CAST(vt0.c0 AS NUMERIC))AND((- (vt0.c0)))))OR(CAST(vt0.c0 AS NUMERIC))));
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c3)||(v0.c1)) COLLATE NOCASE WHERE (vt2.c0) ORDER BY (((CAST(v0.c2 AS NUMERIC)))>(((((v0.c3))<=((v0.c3)))))) ASC  NULLS FIRST, ((((v0.c0) BETWEEN (v0.c3) AND (v0.c2))) BETWEEN (((vt2.c0) ISNULL)) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)))) DESC  NULLS FIRST, 0.08287435577663205 COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON ((v0.c3)||(v0.c1)) COLLATE NOCASE WHERE (((vt2.c0)AND('FK'))) ORDER BY (((CAST(v0.c2 AS NUMERIC)))>(((((v0.c3))<=((v0.c3)))))) ASC  NULLS FIRST, ((((v0.c0) BETWEEN (v0.c3) AND (v0.c2))) BETWEEN (((vt2.c0) ISNULL)) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)))) DESC  NULLS FIRST, 0.08287435577663205 COLLATE BINARY  NULLS LAST;
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON ((v0.c3)||(v0.c1)) COLLATE NOCASE WHERE (vt2.c0) ORDER BY (((CAST(v0.c2 AS NUMERIC)))>(((((v0.c3))<=((v0.c3)))))) ASC  NULLS FIRST, ((((v0.c0) BETWEEN (v0.c3) AND (v0.c2))) BETWEEN (((vt2.c0) ISNULL)) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)))) DESC  NULLS FIRST, 0.08287435577663205 COLLATE BINARY  NULLS LAST;
SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON ((v0.c3)||(v0.c1)) COLLATE NOCASE WHERE (((vt2.c0)AND('FK'))) ORDER BY (((CAST(v0.c2 AS NUMERIC)))>(((((v0.c3))<=((v0.c3)))))) ASC  NULLS FIRST, ((((v0.c0) BETWEEN (v0.c3) AND (v0.c2))) BETWEEN (((vt2.c0) ISNULL)) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)))) DESC  NULLS FIRST, 0.08287435577663205 COLLATE BINARY  NULLS LAST;
SELECT * FROM vt0, v0, vt2 WHERE (IFNULL(DISTINCT ((v0.c2)&(v0.c0)), ((vt2.c1) ISNULL)));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (IFNULL(DISTINCT ((v0.c2)&(v0.c0)), ((vt2.c1) ISNULL))) LIMIT 1;
SELECT * FROM vt0, v0, vt2 WHERE (IFNULL(DISTINCT ((v0.c2)&(v0.c0)), ((vt2.c1) ISNULL)));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (IFNULL(DISTINCT ((v0.c2)&(v0.c0)), ((vt2.c1) ISNULL))) LIMIT 1;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON vt0.c0 WHERE (TYPEOF(((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))) ORDER BY (vt2.c0 IN (vt2.c0, vt2.c0)) COLLATE BINARY DESC  NULLS FIRST, CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)) AS REAL), x'1ae1';
SELECT ALL * FROM vt2 LEFT OUTER JOIN vt0 ON vt0.c0 WHERE (TYPEOF(((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))) ORDER BY (vt2.c0 IN (vt2.c0, vt2.c0)) COLLATE BINARY DESC  NULLS FIRST, CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)) AS REAL), x'1ae1' LIMIT 0x2 INTERSECT SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON vt0.c0 WHERE (CASE WHEN vt0.c0 COLLATE RTRIM THEN ((((((vt2.c1)OR(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)) ELSE ((vt2.c1) NOT BETWEEN (vt2.c0) AND (-1.872550819E9)) END) ORDER BY (vt2.c0 IN (vt2.c0, vt2.c0)) COLLATE BINARY DESC  NULLS FIRST, CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)) AS REAL), x'1ae1' LIMIT 2;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON vt0.c0 WHERE (TYPEOF(((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))) ORDER BY (vt2.c0 IN (vt2.c0, vt2.c0)) COLLATE BINARY DESC  NULLS FIRST, CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)) AS REAL), x'1ae1';
SELECT ALL * FROM vt2 LEFT OUTER JOIN vt0 ON vt0.c0 WHERE (TYPEOF(((((vt2.c0)OR(vt0.c0)))OR(vt2.c0)))) ORDER BY (vt2.c0 IN (vt2.c0, vt2.c0)) COLLATE BINARY DESC  NULLS FIRST, CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)) AS REAL), x'1ae1' LIMIT 0x2 INTERSECT SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON vt0.c0 WHERE (CASE WHEN vt0.c0 COLLATE RTRIM THEN ((((((vt2.c1)OR(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)) ELSE ((vt2.c1) NOT BETWEEN (vt2.c0) AND (-1.872550819E9)) END) ORDER BY (vt2.c0 IN (vt2.c0, vt2.c0)) COLLATE BINARY DESC  NULLS FIRST, CAST(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)) AS REAL), x'1ae1' LIMIT 2;
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON (((vt2.c0, v0.c2, v0.c1)) BETWEEN ((v0.c2, vt0.c0, vt2.c1)) AND ((vt2.c1, vt2.c0, v0.c0))) COLLATE BINARY WHERE (((((v0.c3) BETWEEN (v0.c0) AND (vt2.c0))) IS FALSE)) ORDER BY (((vt0.c0 IN (v0.c2))) IS FALSE) ASC, ((NULL) NOTNULL);
SELECT DISTINCT * FROM v0, vt0 INNER JOIN vt2 ON (((vt2.c0, v0.c2, v0.c1)) BETWEEN ((v0.c2, vt0.c0, vt2.c1)) AND ((vt2.c1, vt2.c0, v0.c0))) COLLATE BINARY WHERE (((((((v0.c3) BETWEEN (v0.c0) AND (vt2.c0))) IS FALSE))AND((((v0.c1 IN (vt2.c1, vt0.c0))) BETWEEN (((vt2.c0)>=(v0.c2))) AND ((vt2.c1 IN (vt2.c1))))))) ORDER BY CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 ELSE v0.c2 END COLLATE RTRIM  NULLS LAST;
SELECT * FROM v0, vt0 LEFT OUTER JOIN vt2 ON (((vt2.c0, v0.c2, v0.c1)) BETWEEN ((v0.c2, vt0.c0, vt2.c1)) AND ((vt2.c1, vt2.c0, v0.c0))) COLLATE BINARY WHERE (((((v0.c3) BETWEEN (v0.c0) AND (vt2.c0))) IS FALSE)) ORDER BY (((vt0.c0 IN (v0.c2))) IS FALSE) ASC, ((NULL) NOTNULL);
SELECT DISTINCT * FROM v0, vt0 INNER JOIN vt2 ON (((vt2.c0, v0.c2, v0.c1)) BETWEEN ((v0.c2, vt0.c0, vt2.c1)) AND ((vt2.c1, vt2.c0, v0.c0))) COLLATE BINARY WHERE (((((((v0.c3) BETWEEN (v0.c0) AND (vt2.c0))) IS FALSE))AND((((v0.c1 IN (vt2.c1, vt0.c0))) BETWEEN (((vt2.c0)>=(v0.c2))) AND ((vt2.c1 IN (vt2.c1))))))) ORDER BY CASE vt2.c0  WHEN vt2.c1 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 ELSE v0.c2 END COLLATE RTRIM  NULLS LAST;
SELECT ALL MIN(vt2.c1) FROM vt0 INNER JOIN vt2 ON ((((0.24775274888023557)>>(vt2.c0))) NOT BETWEEN (CAST(vt0.c0 AS BLOB)) AND (GLOB(vt2.c0, vt0.c0))) WHERE (((vt2.c0)GLOB(((vt2.c0) NOT BETWEEN (NULL) AND (vt2.c1))))) ORDER BY ((((vt2.c1, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c1, vt0.c0)) AND ((vt0.c0, 0.39983786770074814, vt0.c0))) IN (IFNULL(vt2.c0, vt0.c0))) DESC, LENGTH(vt2.c0) DESC;
SELECT MIN(vt2.c1) FROM vt0 INNER JOIN vt2 ON ((((0.24775274888023557)>>(vt2.c0))) NOT BETWEEN (CAST(vt0.c0 AS BLOB)) AND (GLOB(vt2.c0, vt0.c0))) WHERE (((vt2.c0)GLOB(((vt2.c0) NOT BETWEEN (NULL) AND (vt2.c1))))) ORDER BY ((((vt2.c1, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c1, vt0.c0)) AND ((vt0.c0, 0.39983786770074814, vt0.c0))) IN (IFNULL(vt2.c0, vt0.c0))) DESC, LENGTH(vt2.c0) DESC;
SELECT ALL MAX(vt2.c1) FROM vt2, vt0 WHERE (CASE WHEN ((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)) THEN ((vt2.c1)<>(vt2.c0)) WHEN vt0.c0 THEN (+ (vt2.c1)) WHEN ((vt2.c0) ISNULL) THEN ((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1)) WHEN CASE x'e5c2'  WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END THEN (NOT (vt0.c0)) END);
SELECT DISTINCT MAX(vt2.c1) FROM vt2, vt0 WHERE (CASE WHEN ((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)) THEN ((vt2.c1)!=(vt2.c0)) WHEN vt0.c0 THEN (+ (vt2.c1)) WHEN ((vt2.c0) ISNULL) THEN ((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1)) WHEN CASE x'e5c2'  WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END THEN (NOT (vt0.c0)) END) ORDER BY load_extension((vt2.c0 IN (vt2.c1))) ASC  NULLS FIRST, (~ ((vt0.c0 IN (vt0.c0)))) ASC, ((((((((((vt2.c0)OR('1512662648' COLLATE NOCASE)))AND(NULLIF(DISTINCT vt2.c0, vt2.c0))))OR((NOT (vt0.c0)))))OR(NULL)))AND(vt2.c1));
SELECT MAX(vt2.c1) FROM vt2, v0, vt0 WHERE ((~ ('0.0'))) ORDER BY UPPER(DISTINCT json_array_length(v0.c3))  NULLS LAST, ((CASE v0.c0  WHEN vt2.c1 THEN '-754520031' WHEN v0.c3 THEN v0.c1 END) NOTNULL) ASC  NULLS LAST;
SELECT DISTINCT MAX(vt2.c1) FROM vt2, v0, vt0 WHERE ((~ ('0.0'))) ORDER BY UPPER(DISTINCT json_array_length(v0.c3))  NULLS LAST, ((CASE v0.c0  WHEN vt2.c1 THEN '-754520031' WHEN v0.c3 THEN v0.c1 END) NOTNULL) ASC  NULLS LAST LIMIT 4 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2, v0, vt0 WHERE (((NULL)AND((((v0.c3, v0.c0, v0.c1))!=((v0.c1, '576918381', vt2.c1)))))) ORDER BY UPPER(DISTINCT json_array_length(v0.c3))  NULLS LAST, ((CASE v0.c0  WHEN vt2.c1 THEN '-754520031' WHEN v0.c3 THEN v0.c1 END) NOTNULL) ASC  NULLS LAST LIMIT 0X4;
SELECT * FROM vt2 INNER JOIN v0 ON LIKE(v0.c2 COLLATE BINARY, ((vt2.c1) NOT NULL), '(') INNER JOIN vt0 ON CASE WHEN CAST(v0.c1 AS REAL) THEN ((v0.c1)LIKE(v0.c0)) WHEN json_patch(vt2.c0, vt0.c0) THEN (('-580686248')>>(vt0.c0)) END WHERE (NULL) ORDER BY ((((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c0)))LIKE(x'7e23166b')), ((((HEX(DISTINCT v0.c3))AND((vt0.c0 IN (vt0.c0)))))AND((v0.c3 IN ()))), ((((vt0.c0) NOT NULL)) NOT BETWEEN (CASE WHEN vt2.c1 THEN NULL WHEN vt2.c1 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 WHEN v0.c1 THEN vt2.c0 WHEN '-1867720976' THEN x'4c98' WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) AND (((v0.c2) ISNULL)));
SELECT * FROM vt2 INNER JOIN v0 ON LIKE(v0.c2 COLLATE BINARY, ((vt2.c1) NOT NULL), '(') INNER JOIN vt0 ON CASE WHEN CAST(v0.c1 AS REAL) THEN ((v0.c1)LIKE(v0.c0)) WHEN json_patch(vt2.c0, vt0.c0) THEN (('-580686248')>>(vt0.c0)) END WHERE (((NULL)AND(vt2.c0))) ORDER BY ((((((v0.c0)IS NOT(v0.c1)))OR(((vt2.c0)LIKE(v0.c3)))))OR((~ (v0.c2)))) LIMIT 0x1;
SELECT * FROM vt2 INNER JOIN v0 ON LIKE(v0.c2 COLLATE BINARY, ((vt2.c1) NOT NULL), '(') INNER JOIN vt0 ON CASE WHEN CAST(v0.c1 AS REAL) THEN ((v0.c1)LIKE(v0.c0)) WHEN json_patch(vt2.c0, vt0.c0) THEN (('-580686248')>>(vt0.c0)) END WHERE (NULL) ORDER BY ((((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c0)))LIKE(x'7e23166b')), ((((HEX(DISTINCT v0.c3))AND((vt0.c0 IN (vt0.c0)))))AND((v0.c3 IN ()))), ((((vt0.c0) NOT NULL)) NOT BETWEEN (CASE WHEN vt2.c1 THEN NULL WHEN vt2.c1 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 WHEN v0.c1 THEN vt2.c0 WHEN '-1867720976' THEN x'4c98' WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) AND (((v0.c2) ISNULL)));
SELECT * FROM v0, vt2 INNER JOIN vt0 ON (((NOT (vt2.c0))) NOT NULL) WHERE ((~ (HEX(vt2.c0)))) ORDER BY CAST((~ (vt0.c0)) AS BLOB);
SELECT * FROM v0, vt2 INNER JOIN vt0 ON (((NOT (vt2.c0))) NOT NULL) WHERE ((((~ (HEX(vt2.c0))))AND(((CAST(vt0.c0 AS REAL))IS NOT(vt2.c1))))) ORDER BY ((((v0.c2)LIKE(v0.c2)))-((NOT (vt2.c1)))), (((((v0.c2, vt2.c0))>((vt0.c0, v0.c3)))) NOT BETWEEN (v0.c0 COLLATE BINARY) AND (CASE v0.c3  WHEN v0.c1 THEN v0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 END)) DESC  NULLS LAST;
SELECT * FROM v0, vt2 INNER JOIN vt0 ON (((NOT (vt2.c0))) NOT NULL) WHERE ((~ (HEX(vt2.c0)))) ORDER BY CAST((~ (vt0.c0)) AS BLOB);
SELECT * FROM v0, vt2 INNER JOIN vt0 ON (((NOT (vt2.c0))) NOT NULL) WHERE ((((~ (HEX(vt2.c0))))AND(((CAST(vt0.c0 AS REAL))IS NOT(vt2.c1))))) ORDER BY ((((v0.c2)LIKE(v0.c2)))-((NOT (vt2.c1)))), (((((v0.c2, vt2.c0))>((vt0.c0, v0.c3)))) NOT BETWEEN (v0.c0 COLLATE BINARY) AND (CASE v0.c3  WHEN v0.c1 THEN v0.c2 WHEN vt0.c0 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 END)) DESC  NULLS LAST;
SELECT MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (CAST(((v0.c2)|(vt2.c0)) AS NUMERIC));
SELECT DISTINCT MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (CAST(((v0.c2)|(vt2.c0)) AS NUMERIC)) ORDER BY ((((((((vt2.c1)AND(0.9723752197883513)))AND(vt0.c0)))AND(vt0.c0))) NOT BETWEEN ((~ (vt2.c1))) AND ((vt0.c0 IN (vt2.c0, vt2.c1)))), 'ᑺ8\' ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (CASE UPPER(v0.c3)  WHEN ((v0.c2) ISNULL) THEN SQLITE_VERSION() WHEN ((vt0.c0) ISNULL) THEN ((((v0.c2)AND(v0.c0)))OR(4.77587929E8)) WHEN (- (v0.c3)) THEN NULL ELSE CAST(v0.c0 AS BLOB) END) ORDER BY 0x4cf84815  NULLS FIRST;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (((CASE UPPER(v0.c3)  WHEN ((v0.c2) ISNULL) THEN SQLITE_VERSION() WHEN ((vt0.c0) ISNULL) THEN ((((v0.c2)AND(v0.c0)))OR(4.77587929E8)) WHEN (- (v0.c3)) THEN NULL ELSE CAST(v0.c0 AS BLOB) END)AND((((((((v0.c3)AND(v0.c3)))AND(vt0.c0)), ((vt2.c0) NOTNULL), vt2.c1 COLLATE NOCASE, CAST(v0.c1 AS REAL)))>((vt2.c0, vt2.c0 COLLATE NOCASE, ((v0.c2) NOT BETWEEN (v0.c0) AND (vt2.c1)), x'68be')))))) ORDER BY ((('[Iᩱq') IS TRUE) IN (((vt2.c0) NOT BETWEEN (v0.c2) AND (vt0.c0))))  NULLS LAST, ((((v0.c0) NOT NULL)) NOT BETWEEN (CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN vt2.c1 WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN vt2.c1 END) AND (((v0.c0)IS(vt0.c0)))) ASC LIMIT 0x4 INTERSECT SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE ((+ (vt2.c1))) ORDER BY ((('[Iᩱq') IS TRUE) IN (((vt2.c0) NOT BETWEEN (v0.c2) AND (vt0.c0))))  NULLS LAST, ((((v0.c0) NOT NULL)) NOT BETWEEN (CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN vt2.c1 WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN vt2.c1 END) AND (((v0.c0)IS(vt0.c0)))) ASC LIMIT 4;
SELECT * FROM v0 WHERE (v0.c0) ORDER BY (((((v0.c3 IN (v0.c0)))OR(((v0.c2)GLOB(v0.c0)))))OR((NULL IN ()))), CASE ((v0.c1) ISNULL)  WHEN (v0.c3 IN (v0.c1)) THEN ((v0.c1) NOT NULL) WHEN ((v0.c1)<=(v0.c3)) THEN NULL END ASC;
SELECT ALL * FROM v0 WHERE (((v0.c0)AND(((v0.c0 COLLATE BINARY)%(CAST(v0.c2 AS REAL)))))) ORDER BY (((((v0.c3 IN (v0.c0)))OR(((v0.c2)GLOB(v0.c0)))))OR((NULL IN ()))), CASE ((v0.c1) ISNULL)  WHEN (v0.c3 IN (v0.c1)) THEN ((v0.c1) NOT NULL) WHEN ((v0.c1)<=(v0.c3)) THEN NULL END ASC;
SELECT * FROM v0 WHERE (v0.c0) ORDER BY (((((v0.c3 IN (v0.c0)))OR(((v0.c2)GLOB(v0.c0)))))OR((NULL IN ()))), CASE ((v0.c1) ISNULL)  WHEN (v0.c3 IN (v0.c1)) THEN ((v0.c1) NOT NULL) WHEN ((v0.c1)<=(v0.c3)) THEN NULL END ASC;
SELECT ALL * FROM v0 WHERE (((v0.c0)AND(((v0.c0 COLLATE BINARY)%(CAST(v0.c2 AS REAL)))))) ORDER BY (((((v0.c3 IN (v0.c0)))OR(((v0.c2)GLOB(v0.c0)))))OR((NULL IN ()))), CASE ((v0.c1) ISNULL)  WHEN (v0.c3 IN (v0.c1)) THEN ((v0.c1) NOT NULL) WHEN ((v0.c1)<=(v0.c3)) THEN NULL END ASC;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CAST(UPPER(DISTINCT vt2.c0) AS BLOB));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((CAST(UPPER(DISTINCT vt2.c0) AS BLOB))AND(((NULL COLLATE BINARY)<=(HEX(v0.c2)))))) LIMIT 0X0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (CAST(UPPER(DISTINCT vt2.c0) AS BLOB));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((CAST(UPPER(DISTINCT vt2.c0) AS BLOB))AND(((NULL COLLATE BINARY)<=(HEX(v0.c2)))))) LIMIT 0X0;
SELECT MAX(vt2.c0) FROM vt2 WHERE ((((((vt2.c0, vt2.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0)))) NOT BETWEEN ((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c0)))) AND (((vt2.c1)LIKE(vt2.c1)))));
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE ((((((vt2.c0, vt2.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0)))) NOT BETWEEN ((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c0)))) AND (((vt2.c1)LIKE(vt2.c1)))));
SELECT * FROM vt0 CROSS JOIN vt2 ON ((SQLITE_COMPILEOPTION_USED(vt2.c0)) NOT BETWEEN (((v0.c0)&(v0.c0))) AND (((vt0.c0)%(vt0.c0)))) LEFT OUTER JOIN v0 ON ((((~ (v0.c2)), ('-900378693' IN (v0.c1, vt0.c0)), (+ (vt2.c0)), ((vt2.c0) IS FALSE)))<((0.8249308352045965, LAST_INSERT_ROWID(), CAST(v0.c1 AS INTEGER), (((v0.c2, vt0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0, v0.c0, v0.c1)) AND ((vt0.c0, vt2.c1, vt2.c0)))))) WHERE (((CASE v0.c3  WHEN v0.c0 THEN vt0.c0 END) NOTNULL)) ORDER BY ((CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, ((((vt0.c0)<=(vt2.c0)))-(vt2.c1 COLLATE NOCASE)) DESC  NULLS LAST;
SELECT * FROM vt0 NOT INDEXED CROSS JOIN vt2 ON ((SQLITE_COMPILEOPTION_USED(vt2.c0)) NOT BETWEEN (((v0.c0)&(v0.c0))) AND (((vt0.c0)%(vt0.c0)))) INNER JOIN v0 ON ((((~ (v0.c2)), ('-900378693' IN (v0.c1, vt0.c0)), (+ (vt2.c0)), ((vt2.c0) IS FALSE)))<((0.8249308352045965, LAST_INSERT_ROWID(), CAST(v0.c1 AS INTEGER), (((v0.c2, vt0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0, v0.c0, v0.c1)) AND ((vt0.c0, vt2.c1, vt2.c0)))))) WHERE (((CASE v0.c3  WHEN v0.c0 THEN vt0.c0 END) NOTNULL)) ORDER BY ((CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, ((((vt0.c0)<=(vt2.c0)))-(vt2.c1 COLLATE NOCASE)) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 CROSS JOIN vt2 ON ((SQLITE_COMPILEOPTION_USED(vt2.c0)) NOT BETWEEN (((v0.c0)&(v0.c0))) AND (((vt0.c0)%(vt0.c0)))) INNER JOIN v0 ON ((((~ (v0.c2)), ('-900378693' IN (v0.c1, vt0.c0)), (+ (vt2.c0)), ((vt2.c0) IS FALSE)))<((0.8249308352045965, LAST_INSERT_ROWID(), CAST(v0.c1 AS INTEGER), (((v0.c2, vt0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0, v0.c0, v0.c1)) AND ((vt0.c0, vt2.c1, vt2.c0)))))) WHERE (((v0.c2 COLLATE BINARY)=(ABS(v0.c0)))) ORDER BY ((CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, ((((vt0.c0)<=(vt2.c0)))-(vt2.c1 COLLATE NOCASE)) DESC  NULLS LAST;
SELECT * FROM vt0 CROSS JOIN vt2 ON ((SQLITE_COMPILEOPTION_USED(vt2.c0)) NOT BETWEEN (((v0.c0)&(v0.c0))) AND (((vt0.c0)%(vt0.c0)))) LEFT OUTER JOIN v0 ON ((((~ (v0.c2)), ('-900378693' IN (v0.c1, vt0.c0)), (+ (vt2.c0)), ((vt2.c0) IS FALSE)))<((0.8249308352045965, LAST_INSERT_ROWID(), CAST(v0.c1 AS INTEGER), (((v0.c2, vt0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0, v0.c0, v0.c1)) AND ((vt0.c0, vt2.c1, vt2.c0)))))) WHERE (((CASE v0.c3  WHEN v0.c0 THEN vt0.c0 END) NOTNULL)) ORDER BY ((CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, ((((vt0.c0)<=(vt2.c0)))-(vt2.c1 COLLATE NOCASE)) DESC  NULLS LAST;
SELECT * FROM vt0 NOT INDEXED CROSS JOIN vt2 ON ((SQLITE_COMPILEOPTION_USED(vt2.c0)) NOT BETWEEN (((v0.c0)&(v0.c0))) AND (((vt0.c0)%(vt0.c0)))) INNER JOIN v0 ON ((((~ (v0.c2)), ('-900378693' IN (v0.c1, vt0.c0)), (+ (vt2.c0)), ((vt2.c0) IS FALSE)))<((0.8249308352045965, LAST_INSERT_ROWID(), CAST(v0.c1 AS INTEGER), (((v0.c2, vt0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0, v0.c0, v0.c1)) AND ((vt0.c0, vt2.c1, vt2.c0)))))) WHERE (((CASE v0.c3  WHEN v0.c0 THEN vt0.c0 END) NOTNULL)) ORDER BY ((CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, ((((vt0.c0)<=(vt2.c0)))-(vt2.c1 COLLATE NOCASE)) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 CROSS JOIN vt2 ON ((SQLITE_COMPILEOPTION_USED(vt2.c0)) NOT BETWEEN (((v0.c0)&(v0.c0))) AND (((vt0.c0)%(vt0.c0)))) INNER JOIN v0 ON ((((~ (v0.c2)), ('-900378693' IN (v0.c1, vt0.c0)), (+ (vt2.c0)), ((vt2.c0) IS FALSE)))<((0.8249308352045965, LAST_INSERT_ROWID(), CAST(v0.c1 AS INTEGER), (((v0.c2, vt0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0, v0.c0, v0.c1)) AND ((vt0.c0, vt2.c1, vt2.c0)))))) WHERE (((v0.c2 COLLATE BINARY)=(ABS(v0.c0)))) ORDER BY ((CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, ((((vt0.c0)<=(vt2.c0)))-(vt2.c1 COLLATE NOCASE)) DESC  NULLS LAST;
SELECT * FROM vt2 WHERE (((vt2.c0 IN (x'0e')) IN ()));
SELECT * FROM vt2 WHERE (((vt2.c0 IN (x'0e')) IN ())) ORDER BY ((vt2.c0 COLLATE NOCASE) IS TRUE) ASC LIMIT 0 INTERSECT SELECT * FROM vt2 WHERE (CAST(vt2.c1 COLLATE NOCASE AS REAL)) ORDER BY ((vt2.c0 COLLATE NOCASE) IS TRUE) ASC LIMIT 0;
SELECT * FROM vt2 WHERE (((vt2.c0 IN (x'0e')) IN ()));
SELECT * FROM vt2 WHERE (((vt2.c0 IN (x'0e')) IN ())) ORDER BY ((vt2.c0 COLLATE NOCASE) IS TRUE) ASC LIMIT 0 INTERSECT SELECT * FROM vt2 WHERE (CAST(vt2.c1 COLLATE NOCASE AS REAL)) ORDER BY ((vt2.c0 COLLATE NOCASE) IS TRUE) ASC LIMIT 0;
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (((((vt2.c0) IS TRUE)) IS FALSE));
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (((((vt2.c0) IS TRUE)) IS FALSE)) ORDER BY 0.031472183223629435 DESC  NULLS FIRST, NULLIF(DISTINCT ((vt2.c0)>(vt2.c0)), ((((((((vt2.c1)OR(vt2.c1)))AND(x'7799e5')))AND(vt2.c0)))AND(vt2.c1))) ASC LIMIT 0;
SELECT ALL MIN(vt0.c0) FROM v0, vt0 WHERE ((((((v0.c3) ISNULL), v0.c1 COLLATE RTRIM, (((vt0.c0))>((v0.c2))), CAST(v0.c0 AS INTEGER)))<((v0.c3 COLLATE NOCASE, CAST(NULL AS TEXT), ((x'b2')IS(v0.c3)), CAST(v0.c1 AS BLOB))))) ORDER BY NULL COLLATE NOCASE, SQLITE_VERSION() ASC;
SELECT MIN(vt0.c0) FROM v0, vt0 WHERE ((((((v0.c3) ISNULL), v0.c1 COLLATE RTRIM, (((vt0.c0))>((v0.c2))), CAST(v0.c0 AS INTEGER)))<((v0.c3 COLLATE NOCASE, CAST(NULL AS TEXT), ((x'b2')IS(v0.c3)), CAST(v0.c1 AS BLOB))))) ORDER BY NULL COLLATE NOCASE, SQLITE_VERSION() ASC;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((((((vt0.c0)OR(vt2.c1)))OR(v0.c2)) IN ()));
SELECT * FROM v0, vt0, vt2 WHERE ((((((((vt0.c0)OR(vt2.c1)))OR(v0.c2)) IN ()))AND(((((vt0.c0, v0.c1)) BETWEEN ((v0.c1, vt0.c0)) AND ((vt2.c1, v0.c0))) IN (((v0.c2)GLOB(v0.c1)), (- (-572972978))))))) ORDER BY CASE WHEN ((((((v0.c1)OR(vt2.c1)))OR(v0.c0)))OR(v0.c2)) THEN (NOT (v0.c0)) WHEN 'j' THEN v0.c0 WHEN ((((vt2.c0)OR(v0.c2)))AND(v0.c1)) THEN CAST(v0.c1 AS TEXT) ELSE CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c1 ELSE v0.c0 END END INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (((((vt0.c0) NOT NULL))>(((v0.c0)>=(vt2.c1))))) ORDER BY CASE WHEN ((((((v0.c1)OR(vt2.c1)))OR(v0.c0)))OR(v0.c2)) THEN (NOT (v0.c0)) WHEN 'j' THEN v0.c0 WHEN ((((vt2.c0)OR(v0.c2)))AND(v0.c1)) THEN CAST(v0.c1 AS TEXT) ELSE CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c1 ELSE v0.c0 END END;
SELECT ALL * FROM v0, vt0, vt2 WHERE ((((((vt0.c0)OR(vt2.c1)))OR(v0.c2)) IN ()));
SELECT * FROM v0, vt0, vt2 WHERE ((((((((vt0.c0)OR(vt2.c1)))OR(v0.c2)) IN ()))AND(((((vt0.c0, v0.c1)) BETWEEN ((v0.c1, vt0.c0)) AND ((vt2.c1, v0.c0))) IN (((v0.c2)GLOB(v0.c1)), (- (-572972978))))))) ORDER BY CASE WHEN ((((((v0.c1)OR(vt2.c1)))OR(v0.c0)))OR(v0.c2)) THEN (NOT (v0.c0)) WHEN 'j' THEN v0.c0 WHEN ((((vt2.c0)OR(v0.c2)))AND(v0.c1)) THEN CAST(v0.c1 AS TEXT) ELSE CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c1 ELSE v0.c0 END END INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (((((vt0.c0) NOT NULL))>(((v0.c0)>=(vt2.c1))))) ORDER BY CASE WHEN ((((((v0.c1)OR(vt2.c1)))OR(v0.c0)))OR(v0.c2)) THEN (NOT (v0.c0)) WHEN 'j' THEN v0.c0 WHEN ((((vt2.c0)OR(v0.c2)))AND(v0.c1)) THEN CAST(v0.c1 AS TEXT) ELSE CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c1 ELSE v0.c0 END END;
SELECT ALL * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON (~ ((((v0.c3))>((vt0.c0))))) WHERE (ROUND(v0.c3, CASE v0.c2  WHEN v0.c2 THEN vt2.c0 END)) ORDER BY v0.c1 ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON (~ ((((v0.c3))>((vt0.c0))))) WHERE (ROUND(v0.c3, CASE v0.c2  WHEN v0.c2 THEN vt2.c0 END)) ORDER BY (((vt2.c0)) NOT BETWEEN (((~ (vt0.c0)))) AND (((('TRUE') BETWEEN ('S') AND (vt2.c0))))) ASC, CAST(CAST(v0.c0 AS INTEGER) AS TEXT) DESC INTERSECT SELECT DISTINCT * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON (~ ((((v0.c3))>((vt0.c0))))) WHERE ((((NOT (v0.c0))) BETWEEN (HEX(vt2.c1)) AND (vt2.c1))) ORDER BY (((vt2.c0)) NOT BETWEEN (((~ (vt0.c0)))) AND (((('TRUE') BETWEEN ('S') AND (vt2.c0))))) ASC, CAST(CAST(v0.c0 AS INTEGER) AS TEXT) DESC;
SELECT ALL * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON (~ ((((v0.c3))>((vt0.c0))))) WHERE (ROUND(v0.c3, CASE v0.c2  WHEN v0.c2 THEN vt2.c0 END)) ORDER BY v0.c1 ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON (~ ((((v0.c3))>((vt0.c0))))) WHERE (ROUND(v0.c3, CASE v0.c2  WHEN v0.c2 THEN vt2.c0 END)) ORDER BY (((vt2.c0)) NOT BETWEEN (((~ (vt0.c0)))) AND (((('TRUE') BETWEEN ('S') AND (vt2.c0))))) ASC, CAST(CAST(v0.c0 AS INTEGER) AS TEXT) DESC INTERSECT SELECT DISTINCT * FROM vt2 NATURAL JOIN v0 CROSS JOIN vt0 ON (~ ((((v0.c3))>((vt0.c0))))) WHERE ((((NOT (v0.c0))) BETWEEN (HEX(vt2.c1)) AND (vt2.c1))) ORDER BY (((vt2.c0)) NOT BETWEEN (((~ (vt0.c0)))) AND (((('TRUE') BETWEEN ('S') AND (vt2.c0))))) ASC, CAST(CAST(v0.c0 AS INTEGER) AS TEXT) DESC;
SELECT MIN(vt0.c0) FROM vt0 WHERE (DATETIME(CAST(vt0.c0 AS NUMERIC), CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, (((vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))), ('' IN (vt0.c0, vt0.c0))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (DATETIME(CAST(vt0.c0 AS NUMERIC), CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, (((vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))), ('' IN (vt0.c0, vt0.c0)))) INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END) NOT BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (((vt0.c0)+(vt0.c0)))));
SELECT ALL COUNT(*) FROM vt2 LEFT OUTER JOIN vt0 ON (((((((((vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, '643436335')) AND ((vt2.c1, vt2.c0))))AND(vt2.c0 COLLATE BINARY)))OR(CASE vt0.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN x'' END)))OR((((vt2.c1, vt2.c0, vt2.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c1, vt2.c0, vt2.c0)) AND ((vt2.c1, 0.12820276998853575, vt2.c1, vt2.c1))))) WHERE (CASE ((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt0.c0)))AND(vt2.c1))  WHEN ((((vt2.c1)OR(vt2.c1)))OR(1.090913443E9)) THEN vt0.c0 COLLATE RTRIM WHEN ((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)) THEN '-1274299866' ELSE (- (vt0.c0)) END);
SELECT DISTINCT COUNT(*) FROM vt2 INNER JOIN vt0 ON (((((((((vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, '643436335')) AND ((vt2.c1, vt2.c0))))AND(vt2.c0 COLLATE BINARY)))OR(CASE vt0.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN x'' END)))OR((((vt2.c1, vt2.c0, vt2.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c1, vt2.c0, vt2.c0)) AND ((vt2.c1, 0.12820276998853575, vt2.c1, vt2.c1))))) WHERE (((CASE ((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt0.c0)))AND(vt2.c1))  WHEN ((((vt2.c1)OR(vt2.c1)))OR(1.090913443E9)) THEN vt0.c0 COLLATE RTRIM WHEN ((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c1)) THEN '-1274299866' ELSE (- (vt0.c0)) END)AND(((CAST(vt2.c0 AS INTEGER))/(((((vt0.c0)OR(vt2.c0)))AND(vt2.c1))))))) ORDER BY ((((vt2.c1) ISNULL)) IS TRUE) INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 INNER JOIN vt0 ON (((((((((vt2.c0, vt2.c1)) NOT BETWEEN ((vt2.c1, '643436335')) AND ((vt2.c1, vt2.c0))))AND(vt2.c0 COLLATE BINARY)))OR(CASE vt0.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN x'' END)))OR((((vt2.c1, vt2.c0, vt2.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c1, vt2.c0, vt2.c0)) AND ((vt2.c1, 0.12820276998853575, vt2.c1, vt2.c1))))) WHERE ((((~ (vt0.c0)))IS NOT((vt0.c0 IN ())))) ORDER BY ((((vt2.c1) ISNULL)) IS TRUE);
SELECT ALL MAX(v0.c0) FROM v0 INNER JOIN vt0 ON ((((v0.c2) BETWEEN (v0.c3) AND (vt2.c1)))&(highlight(vt2.c1, vt2.c0, vt2.c0, vt2.c1))) NATURAL JOIN vt2 WHERE ((((vt2.c1, v0.c2)) NOT BETWEEN ((((v0.c1) IS FALSE), ((v0.c1) BETWEEN (v0.c1) AND (vt0.c0)))) AND ((NULL, vt2.c0 COLLATE BINARY))));
SELECT MAX(v0.c0) FROM v0 INNER JOIN vt0 ON ((((v0.c2) BETWEEN (v0.c3) AND (vt2.c1)))&(highlight(vt2.c1, vt2.c0, vt2.c0, vt2.c1))) NATURAL JOIN vt2 WHERE ((((vt2.c1, v0.c2)) NOT BETWEEN ((((v0.c1) IS FALSE), ((v0.c1) BETWEEN (v0.c1) AND (vt0.c0)))) AND ((NULL, vt2.c0 COLLATE BINARY)))) ORDER BY (((v0.c3 COLLATE NOCASE, ((v0.c2)>=(v0.c2))))<((((((v0.c3)OR(v0.c2)))OR(v0.c2)), (v0.c2 IN (vt2.c1))))) DESC;
SELECT ALL * FROM vt2, vt0 WHERE (((vt0.c0) NOTNULL)) ORDER BY ((((((((((((vt2.c1)OR(vt2.c1)))AND(vt0.c0)))OR(((NULL)|(vt0.c0)))))AND((((vt2.c1)) BETWEEN ((vt2.c1)) AND ((vt2.c1))))))OR(NULLIF(DISTINCT vt2.c1, vt2.c1))))OR((((vt2.c0, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c0, vt0.c0, vt2.c1)) AND ((vt2.c1, vt0.c0, vt2.c0)))));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((vt0.c0) NOTNULL))AND(vt0.c0))) ORDER BY ((((((((((((vt0.c0)*(vt2.c1)))AND((vt2.c0 IN ()))))OR(((vt0.c0) IS TRUE))))OR(((NULL) NOT BETWEEN (vt2.c1) AND (vt0.c0)))))AND((('-1469378870')||(vt2.c1)))))OR('-1468862807'))  NULLS FIRST, (('??W(
qW팈' COLLATE RTRIM) BETWEEN (vt2.c1) AND (((vt2.c1) BETWEEN (x'') AND (vt2.c1)))), (CASE WHEN vt2.c1 THEN vt2.c1 END IN ())  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt2.c1)%(vt2.c0)) COLLATE RTRIM) ORDER BY ((((((((((((vt0.c0)*(vt2.c1)))AND((vt2.c0 IN ()))))OR(((vt0.c0) IS TRUE))))OR(((NULL) NOT BETWEEN (vt2.c1) AND (vt0.c0)))))AND((('-1469378870')||(vt2.c1)))))OR('-1468862807'))  NULLS FIRST, (('??W(
qW팈' COLLATE RTRIM) BETWEEN (vt2.c1) AND (((vt2.c1) BETWEEN (x'') AND (vt2.c1)))), (CASE WHEN vt2.c1 THEN vt2.c1 END IN ())  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 WHERE (((vt0.c0) NOTNULL)) ORDER BY ((((((((((((vt2.c1)OR(vt2.c1)))AND(vt0.c0)))OR(((NULL)|(vt0.c0)))))AND((((vt2.c1)) BETWEEN ((vt2.c1)) AND ((vt2.c1))))))OR(NULLIF(DISTINCT vt2.c1, vt2.c1))))OR((((vt2.c0, vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c0, vt0.c0, vt2.c1)) AND ((vt2.c1, vt0.c0, vt2.c0)))));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((vt0.c0) NOTNULL))AND(vt0.c0))) ORDER BY ((((((((((((vt0.c0)*(vt2.c1)))AND((vt2.c0 IN ()))))OR(((vt0.c0) IS TRUE))))OR(((NULL) NOT BETWEEN (vt2.c1) AND (vt0.c0)))))AND((('-1469378870')||(vt2.c1)))))OR('-1468862807'))  NULLS FIRST, (('??W(
qW팈' COLLATE RTRIM) BETWEEN (vt2.c1) AND (((vt2.c1) BETWEEN (x'') AND (vt2.c1)))), (CASE WHEN vt2.c1 THEN vt2.c1 END IN ())  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt2.c1)%(vt2.c0)) COLLATE RTRIM) ORDER BY ((((((((((((vt0.c0)*(vt2.c1)))AND((vt2.c0 IN ()))))OR(((vt0.c0) IS TRUE))))OR(((NULL) NOT BETWEEN (vt2.c1) AND (vt0.c0)))))AND((('-1469378870')||(vt2.c1)))))OR('-1468862807'))  NULLS FIRST, (('??W(
qW팈' COLLATE RTRIM) BETWEEN (vt2.c1) AND (((vt2.c1) BETWEEN (x'') AND (vt2.c1)))), (CASE WHEN vt2.c1 THEN vt2.c1 END IN ())  NULLS FIRST;
SELECT ALL MIN(vt0.c0) FROM vt0, v0 WHERE (v0.c3) ORDER BY ((((v0.c3) IS FALSE))<(((((((v0.c1)AND(v0.c2)))AND(v0.c0)))OR(v0.c0)))) ASC, ((vt0.c0)%(vt0.c0)) COLLATE RTRIM, json_array_length((v0.c1 IN ())), RTRIM(ABS(vt0.c0)) ASC;
SELECT ALL MIN(vt0.c0) FROM vt0, v0 WHERE (((v0.c3)AND(((LTRIM(v0.c2))<<(CASE WHEN v0.c2 THEN v0.c0 END))))) ORDER BY vt0.c0, (((((((NOT (vt0.c0)))OR(CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)))AND((v0.c0 IN ()))))AND(((v0.c1)|(0.258274301087273)))) DESC INTERSECT SELECT MIN(vt0.c0) FROM vt0, v0 NOT INDEXED WHERE (((v0.c1 COLLATE RTRIM) BETWEEN (0Xffffffffc8e64596) AND (CASE v0.c0  WHEN v0.c0 THEN v0.c0 ELSE vt0.c0 END))) ORDER BY vt0.c0, (((((((NOT (vt0.c0)))OR(CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END)))AND((v0.c0 IN ()))))AND(((v0.c1)|(0.258274301087273)))) DESC;
SELECT COUNT(*) FROM v0 WHERE (((((CASE NULL  WHEN v0.c2 THEN v0.c0 WHEN '0.0723762534186253' THEN v0.c3 WHEN v0.c1 THEN v0.c0 ELSE v0.c3 END)AND(((((((((v0.c1)OR(v0.c3)))AND(v0.c1)))OR(v0.c0)))OR('T')))))OR(v0.c0))) ORDER BY (((v0.c1)) NOT BETWEEN ((((v0.c2) IS TRUE))) AND ((CASE WHEN v0.c2 THEN v0.c0 ELSE v0.c3 END))), ((((json_type(v0.c2))OR(CASE v0.c3  WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN 0.06706222929161365 END)))AND(((v0.c3) NOTNULL))), ((((v0.c3)OR(NULL))) NOT NULL);
SELECT COUNT(*) FROM v0 WHERE (((((((CASE NULL  WHEN v0.c2 THEN v0.c0 WHEN '0.0723762534186253' THEN v0.c3 WHEN v0.c1 THEN v0.c0 ELSE v0.c3 END)AND(((((((((v0.c1)OR(v0.c3)))AND(v0.c1)))OR(v0.c0)))OR('T')))))OR(v0.c0)))AND(x'4769'))) ORDER BY (((- (v0.c3)))<((v0.c0 IN ()))), ((((((v0.c1)AND(v0.c2)))AND(((v0.c0) ISNULL))))OR(CAST(v0.c2 AS TEXT))), ((((v0.c1, v0.c1, v0.c2, v0.c3)) NOT BETWEEN ((v0.c0, v0.c0, v0.c0, v0.c0)) AND ((v0.c1, 0.26204065129821574, v0.c2, v0.c2))) IN ()) ASC  NULLS LAST LIMIT 0x2 INTERSECT SELECT ALL COUNT(*) FROM v0 WHERE (v0.c2) ORDER BY (((- (v0.c3)))<((v0.c0 IN ()))), ((((((v0.c1)AND(v0.c2)))AND(((v0.c0) ISNULL))))OR(CAST(v0.c2 AS TEXT))), ((((v0.c1, v0.c1, v0.c2, v0.c3)) NOT BETWEEN ((v0.c0, v0.c0, v0.c0, v0.c0)) AND ((v0.c1, 0.26204065129821574, v0.c2, v0.c2))) IN ()) ASC  NULLS LAST LIMIT 0X2;
SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c3) ISNULL)) NOT BETWEEN ((v0.c0 IN ())) AND (((v0.c3)OR('765630797')))));
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((v0.c3) ISNULL)) NOT BETWEEN ((v0.c0 IN ())) AND (((v0.c3)OR('765630797')))));
SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c3) ISNULL)) NOT BETWEEN ((v0.c0 IN ())) AND (((v0.c3)OR('765630797')))));
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((v0.c3) ISNULL)) NOT BETWEEN ((v0.c0 IN ())) AND (((v0.c3)OR('765630797')))));
SELECT ALL * FROM v0, vt0 WHERE (UPPER(((v0.c1) BETWEEN (v0.c1) AND (v0.c3))));
SELECT * FROM v0, vt0 WHERE (((UPPER(((v0.c1) BETWEEN (v0.c1) AND (v0.c3))))AND(LOWER(((v0.c3)>(v0.c3)))))) ORDER BY CAST(((((vt0.c0)AND(v0.c1)))OR(vt0.c0)) AS BLOB) ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (UPPER(((v0.c1) BETWEEN (v0.c1) AND (v0.c3))));
SELECT * FROM v0, vt0 WHERE (((UPPER(((v0.c1) BETWEEN (v0.c1) AND (v0.c3))))AND(LOWER(((v0.c3)>(v0.c3)))))) ORDER BY CAST(((((vt0.c0)AND(v0.c1)))OR(vt0.c0)) AS BLOB) ASC  NULLS FIRST;
SELECT MAX(v0.c2) FROM v0, vt0 WHERE (((((v0.c2) IS TRUE)) BETWEEN ('WJzaif') AND (((v0.c1)|(v0.c0))))) ORDER BY CAST(((v0.c3)-(v0.c3)) AS TEXT) DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0, vt0 WHERE (((((((v0.c2) IS TRUE)) BETWEEN ('WJzaif') AND (((v0.c1)|(v0.c0)))))AND((((-1.4783726E9)IS(v0.c2)) IN (vt0.c0, (- (v0.c2))))))) ORDER BY CAST(((v0.c3)-(v0.c3)) AS TEXT) DESC  NULLS LAST INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt0 WHERE (((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c2)))%(v0.c0 COLLATE NOCASE))) ORDER BY CAST(((v0.c3)-(v0.c3)) AS TEXT) DESC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (((INSTR(vt2.c1, vt2.c1)) IS TRUE));
SELECT DISTINCT * FROM vt2 WHERE (((INSTR(vt2.c1, vt2.c1)) IS TRUE)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (vt2.c0) LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE (((INSTR(vt2.c1, vt2.c1)) IS TRUE));
SELECT DISTINCT * FROM vt2 WHERE (((INSTR(vt2.c1, vt2.c1)) IS TRUE)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (vt2.c0) LIMIT 0x0;
SELECT * FROM vt0 WHERE (CAST(x'9b' AS NUMERIC));
SELECT ALL * FROM vt0 WHERE (((CAST(x'9b' AS NUMERIC))AND(json_object(vt0.c0, x'f8', vt0.c0) COLLATE BINARY))) ORDER BY json_array_length((NOT (vt0.c0)))  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE (CAST(x'9b' AS NUMERIC));
SELECT ALL * FROM vt0 WHERE (((CAST(x'9b' AS NUMERIC))AND(json_object(vt0.c0, x'f8', vt0.c0) COLLATE BINARY))) ORDER BY json_array_length((NOT (vt0.c0)))  NULLS LAST LIMIT 1;
SELECT ALL MAX(v0.c3) FROM v0 WHERE (ROUND(((v0.c1)GLOB(v0.c0)), v0.c0 COLLATE NOCASE)) ORDER BY (((v0.c2, v0.c2)) NOT BETWEEN ((v0.c1, v0.c1)) AND (('ga', (v0.c2 IN (v0.c1))))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (ROUND(((v0.c1)GLOB(v0.c0)), v0.c0 COLLATE NOCASE)) ORDER BY (- (json_insert(v0.c1, v0.c0, '0.9637382275542646'))) ASC  NULLS FIRST, (((v0.c2, v0.c1)) BETWEEN ((TYPEOF(DISTINCT v0.c2), (((x'', v0.c2, v0.c0, v0.c2, v0.c3, v0.c1)) NOT BETWEEN ((v0.c1, v0.c1, v0.c2, v0.c1, v0.c1, v0.c0)) AND ((v0.c0, v0.c0, v0.c3, v0.c2, v0.c2, v0.c3))))) AND ((((v0.c3)/(x'')), CAST(v0.c3 AS REAL))));
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON ((CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN v0.c1 END) BETWEEN ((+ (v0.c0))) AND (v0.c3 COLLATE NOCASE)) LEFT OUTER JOIN v0 ON CASE WHEN v0.c2 THEN v0.c3 ELSE ((vt2.c0) NOT BETWEEN (vt2.c0) AND (x'4d0846')) END WHERE ((NOT (((vt0.c0)<=(vt2.c1)))));
SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN vt2 ON ((CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN v0.c1 END) BETWEEN ((+ (v0.c0))) AND (v0.c3 COLLATE NOCASE)) LEFT OUTER JOIN v0 ON CASE WHEN v0.c2 THEN v0.c3 ELSE ((vt2.c0) NOT BETWEEN (vt2.c0) AND (x'4d0846')) END WHERE ((NOT (((vt0.c0)<=(vt2.c1))))) ORDER BY (((NULL, (('U')/(vt0.c0)), v0.c2))>((v0.c0, UPPER(v0.c1), ((vt2.c0) ISNULL)))), x'' COLLATE NOCASE  NULLS LAST, (((((((vt2.c0)OR(v0.c3)))AND(-1692724346))))=((vt2.c1))) ASC INTERSECT SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN vt2 ON ((CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN v0.c1 END) BETWEEN ((+ (v0.c0))) AND (v0.c3 COLLATE NOCASE)) LEFT OUTER JOIN v0 ON CASE WHEN v0.c2 THEN v0.c3 ELSE ((vt2.c0) NOT BETWEEN (vt2.c0) AND (x'4d0846')) END WHERE (IFNULL(((((((((((vt0.c0)OR(vt2.c0)))AND(v0.c3)))OR(v0.c0)))AND(v0.c2)))OR(v0.c3)), vt2.c1 COLLATE RTRIM)) ORDER BY (((NULL, (('U')/(vt0.c0)), v0.c2))>((v0.c0, UPPER(v0.c1), ((vt2.c0) ISNULL)))), x'' COLLATE NOCASE  NULLS LAST, (((((((vt2.c0)OR(v0.c3)))AND(0Xffffffff9b1b1386))))==((vt2.c1))) ASC;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON ((CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN v0.c1 END) BETWEEN ((+ (v0.c0))) AND (v0.c3 COLLATE NOCASE)) LEFT OUTER JOIN v0 ON CASE WHEN v0.c2 THEN v0.c3 ELSE ((vt2.c0) NOT BETWEEN (vt2.c0) AND (x'4d0846')) END WHERE ((NOT (((vt0.c0)<=(vt2.c1)))));
SELECT ALL * FROM vt2, v0 WHERE (0X76add208);
SELECT DISTINCT * FROM vt2, v0 WHERE (((0X76add208)AND(((((v0.c2)|(v0.c1))) IS TRUE)))) LIMIT 0x3;
SELECT ALL * FROM vt2, v0 WHERE (0X76add208);
SELECT DISTINCT * FROM vt2, v0 WHERE (((0X76add208)AND(((((v0.c2)|(v0.c1))) IS TRUE)))) LIMIT 0x3;
SELECT * FROM v0 WHERE ((((v0.c3)OR(x'')) IN (((((((((v0.c1)AND(v0.c3)))AND(v0.c3)))AND('mA')))OR(v0.c3))))) ORDER BY ((((((CASE v0.c2  WHEN v0.c1 THEN v0.c1 ELSE v0.c3 END)AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))))OR(CAST(0.4077157985926282 AS INTEGER))))OR((NOT (v0.c0)))) DESC  NULLS LAST, TOTAL_CHANGES()  NULLS LAST, ((((((v0.c3) NOT NULL))AND(v0.c2)))OR(CASE WHEN v0.c1 THEN v0.c1 END))  NULLS FIRST;
SELECT * FROM v0 WHERE ((((v0.c3)OR(x'')) IN (((((((((v0.c1)AND(v0.c3)))AND(v0.c3)))AND('mA')))OR(v0.c3))))) ORDER BY ((((((CASE v0.c2  WHEN v0.c1 THEN v0.c1 ELSE v0.c3 END)AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))))OR(CAST(0.4077157985926282 AS INTEGER))))OR((NOT (v0.c0)))) DESC  NULLS LAST, TOTAL_CHANGES()  NULLS LAST, ((((((v0.c3) NOT NULL))AND(v0.c2)))OR(CASE WHEN v0.c1 THEN v0.c1 END))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT * FROM v0 WHERE (((((v0.c1)/(v0.c0)))LIKE(JULIANDAY(v0.c1, v0.c3, v0.c1)))) ORDER BY ((((((CASE v0.c2  WHEN v0.c1 THEN v0.c1 ELSE v0.c3 END)AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))))OR(CAST(0.4077157985926282 AS INTEGER))))OR((NOT (v0.c0)))) DESC  NULLS LAST, TOTAL_CHANGES()  NULLS LAST, ((((((v0.c3) NOT NULL))AND(v0.c2)))OR(CASE WHEN v0.c1 THEN v0.c1 END))  NULLS FIRST LIMIT 1;
SELECT * FROM v0 WHERE ((((v0.c3)OR(x'')) IN (((((((((v0.c1)AND(v0.c3)))AND(v0.c3)))AND('mA')))OR(v0.c3))))) ORDER BY ((((((CASE v0.c2  WHEN v0.c1 THEN v0.c1 ELSE v0.c3 END)AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))))OR(CAST(0.4077157985926282 AS INTEGER))))OR((NOT (v0.c0)))) DESC  NULLS LAST, TOTAL_CHANGES()  NULLS LAST, ((((((v0.c3) NOT NULL))AND(v0.c2)))OR(CASE WHEN v0.c1 THEN v0.c1 END))  NULLS FIRST;
SELECT * FROM v0 WHERE ((((v0.c3)OR(x'')) IN (((((((((v0.c1)AND(v0.c3)))AND(v0.c3)))AND('mA')))OR(v0.c3))))) ORDER BY ((((((CASE v0.c2  WHEN v0.c1 THEN v0.c1 ELSE v0.c3 END)AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))))OR(CAST(0.4077157985926282 AS INTEGER))))OR((NOT (v0.c0)))) DESC  NULLS LAST, TOTAL_CHANGES()  NULLS LAST, ((((((v0.c3) NOT NULL))AND(v0.c2)))OR(CASE WHEN v0.c1 THEN v0.c1 END))  NULLS FIRST LIMIT 0x1 INTERSECT SELECT * FROM v0 WHERE (((((v0.c1)/(v0.c0)))LIKE(JULIANDAY(v0.c1, v0.c3, v0.c1)))) ORDER BY ((((((CASE v0.c2  WHEN v0.c1 THEN v0.c1 ELSE v0.c3 END)AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))))OR(CAST(0.4077157985926282 AS INTEGER))))OR((NOT (v0.c0)))) DESC  NULLS LAST, TOTAL_CHANGES()  NULLS LAST, ((((((v0.c3) NOT NULL))AND(v0.c2)))OR(CASE WHEN v0.c1 THEN v0.c1 END))  NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE (((((((v0.c2) BETWEEN (0.9025381487157186) AND (v0.c0)))AND(((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c1)))))OR(CAST(x'' AS REAL))));
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE (((((((((v0.c2) BETWEEN (0.9025381487157186) AND (v0.c0)))AND(((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c1)))))OR(CAST(x'' AS REAL))))AND(CAST((v0.c1 IN (NULL)) AS NUMERIC)))) LIMIT 0X0;
SELECT ALL * FROM v0, vt2 WHERE (((((NULL) NOT BETWEEN (v0.c1) AND ('Kr_<I'))) IS FALSE));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((((NULL) NOT BETWEEN (v0.c1) AND ('Kr_<I'))) IS FALSE))AND((((~ (vt2.c1)))||((0.4505668757794715 IN ())))))) ORDER BY ((LIKELIHOOD(vt2.c0, v0.c2)) BETWEEN (((((((vt2.c0)OR(v0.c1)))OR(v0.c0)))OR(v0.c2))) AND (v0.c1))  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE ((((((((x'' IN ()))OR(NULLIF(DISTINCT v0.c2, v0.c2))))AND(((v0.c1)-(vt2.c1)))))OR(vt2.c1))) ORDER BY ((LIKELIHOOD(vt2.c0, v0.c2)) BETWEEN (((((((vt2.c0)OR(v0.c1)))OR(v0.c0)))OR(v0.c2))) AND (v0.c1))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0, vt2 WHERE (((((NULL) NOT BETWEEN (v0.c1) AND ('Kr_<I'))) IS FALSE));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((((NULL) NOT BETWEEN (v0.c1) AND ('Kr_<I'))) IS FALSE))AND((((~ (vt2.c1)))||((0.4505668757794715 IN ())))))) ORDER BY ((LIKELIHOOD(vt2.c0, v0.c2)) BETWEEN (((((((vt2.c0)OR(v0.c1)))OR(v0.c0)))OR(v0.c2))) AND (v0.c1))  NULLS FIRST LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE ((((((((x'' IN ()))OR(NULLIF(DISTINCT v0.c2, v0.c2))))AND(((v0.c1)-(vt2.c1)))))OR(vt2.c1))) ORDER BY ((LIKELIHOOD(vt2.c0, v0.c2)) BETWEEN (((((((vt2.c0)OR(v0.c1)))OR(v0.c0)))OR(v0.c2))) AND (v0.c1))  NULLS FIRST LIMIT 1;
SELECT * FROM vt2, v0 WHERE ('PjLknIpn') ORDER BY CASE WHEN ((vt2.c1)<(vt2.c0)) THEN (~ (NULL)) WHEN ((vt2.c0) NOTNULL) THEN ((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)) WHEN (vt2.c0 IN ()) THEN CASE WHEN v0.c0 THEN v0.c0 WHEN x'' THEN 0.22521532661349508 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c0 END WHEN json_patch(vt2.c1, v0.c1) THEN (- (v0.c0)) ELSE ((vt2.c1)OR(v0.c1)) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt2, v0 WHERE ('PjLknIpn') ORDER BY CASE WHEN ((vt2.c1)<(vt2.c0)) THEN (~ (NULL)) WHEN ((vt2.c0) NOTNULL) THEN ((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)) WHEN (vt2.c0 IN ()) THEN CASE WHEN v0.c0 THEN v0.c0 WHEN x'' THEN 0.22521532661349508 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c0 END WHEN json_patch(vt2.c1, v0.c1) THEN (- (v0.c0)) ELSE ((vt2.c1)OR(v0.c1)) END DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (TRIM(CASE v0.c2  WHEN v0.c2 THEN vt2.c0 ELSE v0.c0 END)) ORDER BY CASE WHEN ((vt2.c1)<(vt2.c0)) THEN (~ (NULL)) WHEN ((vt2.c0) NOTNULL) THEN ((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)) WHEN (vt2.c0 IN ()) THEN CASE WHEN v0.c0 THEN v0.c0 WHEN x'' THEN 0.22521532661349508 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c0 END WHEN json_patch(vt2.c1, v0.c1) THEN (- (v0.c0)) ELSE ((vt2.c1)OR(v0.c1)) END DESC  NULLS FIRST;
SELECT * FROM vt2, v0 WHERE ('PjLknIpn') ORDER BY CASE WHEN ((vt2.c1)<(vt2.c0)) THEN (~ (NULL)) WHEN ((vt2.c0) NOTNULL) THEN ((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)) WHEN (vt2.c0 IN ()) THEN CASE WHEN v0.c0 THEN v0.c0 WHEN x'' THEN 0.22521532661349508 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c0 END WHEN json_patch(vt2.c1, v0.c1) THEN (- (v0.c0)) ELSE ((vt2.c1)OR(v0.c1)) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt2, v0 WHERE ('PjLknIpn') ORDER BY CASE WHEN ((vt2.c1)<(vt2.c0)) THEN (~ (NULL)) WHEN ((vt2.c0) NOTNULL) THEN ((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)) WHEN (vt2.c0 IN ()) THEN CASE WHEN v0.c0 THEN v0.c0 WHEN x'' THEN 0.22521532661349508 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c0 END WHEN json_patch(vt2.c1, v0.c1) THEN (- (v0.c0)) ELSE ((vt2.c1)OR(v0.c1)) END DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (TRIM(CASE v0.c2  WHEN v0.c2 THEN vt2.c0 ELSE v0.c0 END)) ORDER BY CASE WHEN ((vt2.c1)<(vt2.c0)) THEN (~ (NULL)) WHEN ((vt2.c0) NOTNULL) THEN ((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)) WHEN (vt2.c0 IN ()) THEN CASE WHEN v0.c0 THEN v0.c0 WHEN x'' THEN 0.22521532661349508 WHEN vt2.c0 THEN v0.c3 ELSE vt2.c0 END WHEN json_patch(vt2.c1, v0.c1) THEN (- (v0.c0)) ELSE ((vt2.c1)OR(v0.c1)) END DESC  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt2 WHERE ((NOT (CASE WHEN v0.c2 THEN vt2.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN vt2.c1 WHEN v0.c0 THEN v0.c1 WHEN 0.90520760317938 THEN vt2.c0 END))) ORDER BY (CAST(v0.c3 AS INTEGER) IN ()), CASE ((vt2.c1)|(vt2.c0))  WHEN x'a6' THEN ((((v0.c0)OR(v0.c2)))AND(v0.c3)) WHEN NULL THEN CAST(v0.c1 AS NUMERIC) ELSE CAST(v0.c2 AS BLOB) END DESC;
SELECT ALL COUNT(*) FROM v0, vt2 WHERE ((((NOT (CASE WHEN v0.c2 THEN vt2.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN vt2.c1 WHEN v0.c0 THEN v0.c1 WHEN 0.90520760317938 THEN vt2.c0 END)))AND(((json_quote(vt2.c1)) NOTNULL)))) ORDER BY (CAST(v0.c3 AS INTEGER) IN ()), CASE ((vt2.c1)|(vt2.c0))  WHEN x'a6' THEN ((((v0.c0)OR(v0.c2)))AND(v0.c3)) WHEN NULL THEN CAST(v0.c1 AS NUMERIC) ELSE CAST(v0.c2 AS BLOB) END DESC LIMIT 2 INTERSECT SELECT ALL COUNT(*) FROM v0, vt2 WHERE (((((NULL) NOT BETWEEN (vt2.c1) AND (vt2.c0)))OR(v0.c2 COLLATE RTRIM))) ORDER BY (CAST(v0.c3 AS INTEGER) IN ()), CASE ((vt2.c1)|(vt2.c0))  WHEN x'a6' THEN ((((v0.c0)OR(v0.c2)))AND(v0.c3)) WHEN NULL THEN CAST(v0.c1 AS NUMERIC) ELSE CAST(v0.c2 AS BLOB) END DESC LIMIT 0x2;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((CAST(vt2.c1 AS INTEGER))>=(CAST(vt2.c0 AS BLOB))));
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (((((CAST(vt2.c1 AS INTEGER))>=(CAST(vt2.c0 AS BLOB))))AND(((((((((((((((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))AND(LIKELIHOOD(vt2.c1, vt2.c0))))AND((((vt2.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c0))))))AND(vt2.c1)))AND(TRIM(vt2.c1, vt2.c1))))OR((vt2.c1 IN ()))))AND(CAST(vt2.c0 AS BLOB)))))) ORDER BY ((vt2.c1) BETWEEN ((+ (vt2.c0))) AND (LOWER(DISTINCT vt2.c0)))  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (vt2.c0) ORDER BY ((vt2.c1) BETWEEN ((+ (vt2.c0))) AND (LOWER(DISTINCT vt2.c0)))  NULLS FIRST LIMIT 0x2;
SELECT ALL MIN(vt2.c1) FROM vt2 LEFT OUTER JOIN vt0 ON (((vt0.c0, vt2.c0)) NOT BETWEEN ((((vt0.c0)>>(vt2.c0)), ((((((vt2.c1)OR(v0.c0)))OR(v0.c1)))OR('-1961109876')))) AND ((((v0.c2) NOTNULL), (v0.c3 IN (v0.c2, v0.c2))))) CROSS JOIN v0 ON v0.c3 WHERE (CASE 1014823335  WHEN NULL THEN ((vt2.c0)<(v0.c1)) ELSE (((v0.c3)) BETWEEN ((v0.c0)) AND ((vt0.c0))) END);
SELECT DISTINCT MIN(vt2.c1) FROM vt2 INNER JOIN vt0 ON (((vt0.c0, vt2.c0)) NOT BETWEEN ((((vt0.c0)>>(vt2.c0)), ((((((vt2.c1)OR(v0.c0)))OR(v0.c1)))OR('-1961109876')))) AND ((((v0.c2) NOTNULL), (v0.c3 IN (v0.c2, v0.c2))))) CROSS JOIN v0 ON v0.c3 WHERE (((CASE 1014823335  WHEN NULL THEN ((vt2.c0)<(v0.c1)) ELSE (((v0.c3)) BETWEEN ((v0.c0)) AND ((vt0.c0))) END)AND((- (((vt2.c0) NOTNULL)))))) INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2 INNER JOIN vt0 ON (((vt0.c0, vt2.c0)) NOT BETWEEN ((((vt0.c0)>>(vt2.c0)), ((((((vt2.c1)OR(v0.c0)))OR(v0.c1)))OR('-1961109876')))) AND ((((v0.c2) NOTNULL), (v0.c3 IN (v0.c2, v0.c2))))) CROSS JOIN v0 ON v0.c3 WHERE (TRIM(((v0.c0)<=(v0.c1))));
SELECT COUNT(*) FROM v0 LEFT OUTER JOIN vt0 ON ((v0.c0) NOT NULL) WHERE ((NOT (((vt0.c0) IS FALSE)))) ORDER BY ((((vt0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))<<((vt0.c0 IN (v0.c1)))) ASC;
SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt0 ON ((v0.c0) NOT NULL) WHERE ((NOT (((vt0.c0) IS FALSE)))) ORDER BY ((((vt0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))<<((vt0.c0 IN (v0.c1)))) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt0 ON ((v0.c0) NOT NULL) WHERE (((((v0.c2)=(vt0.c0)))>=(TRIM(v0.c0, v0.c3)))) ORDER BY ((((vt0.c0) NOT BETWEEN (v0.c2) AND (v0.c2)))<<((vt0.c0 IN (v0.c1)))) ASC;
SELECT * FROM vt2 WHERE (((vt2.c0 COLLATE RTRIM)||(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))));
SELECT ALL * FROM vt2 WHERE (((vt2.c0 COLLATE RTRIM)||(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))));
SELECT * FROM vt2 WHERE (((vt2.c0 COLLATE RTRIM)||(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))));
SELECT ALL * FROM vt2 WHERE (((vt2.c0 COLLATE RTRIM)||(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))));
SELECT MIN(vt2.c0) FROM vt2, v0, vt0 WHERE (((((((((v0.c3) IS FALSE))AND((((v0.c0, vt2.c0, vt2.c0, v0.c3, vt0.c0)) NOT BETWEEN ((vt2.c0, vt0.c0, vt2.c0, v0.c0, v0.c0)) AND ((v0.c2, v0.c2, vt0.c0, vt0.c0, vt2.c1))))))OR(v0.c0 COLLATE NOCASE)))OR(((vt0.c0)<(vt2.c0))))) ORDER BY NULL COLLATE RTRIM, NULL DESC, CAST(((vt0.c0)*(v0.c1)) AS TEXT);
SELECT DISTINCT MIN(vt2.c0) FROM vt2, v0, vt0 WHERE (((((((((v0.c3) IS FALSE))AND((((v0.c0, vt2.c0, vt2.c0, v0.c3, vt0.c0)) NOT BETWEEN ((vt2.c0, vt0.c0, vt2.c0, v0.c0, v0.c0)) AND ((v0.c2, v0.c2, vt0.c0, vt0.c0, vt2.c1))))))OR(v0.c0 COLLATE NOCASE)))OR(((vt0.c0)<(vt2.c0))))) ORDER BY ((vt0.c0 COLLATE RTRIM) ISNULL)  NULLS LAST, ((((((((v0.c2) NOT BETWEEN (v0.c3) AND (0.758655920034398)))AND(((vt2.c0) IS TRUE))))AND(((v0.c2)LIKE(vt2.c1)))))AND(((((((((((v0.c1)OR('	')))OR(0X2f67ca62)))AND(v0.c3)))OR(v0.c0)))OR(vt2.c0)))) ASC  NULLS FIRST, (vt0.c0 IN (v0.c0, v0.c1)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE ('0.7822337193029021' COLLATE RTRIM);
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((('0.7822337193029021' COLLATE RTRIM)AND(CASE WHEN CAST(v0.c1 AS INTEGER) THEN (- (v0.c3)) ELSE CASE v0.c3  WHEN 'D+f_^ivA6' THEN x'' WHEN v0.c1 THEN 1419665892 WHEN vt2.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END END))) ORDER BY TYPEOF('-1680991631') ASC  NULLS FIRST, (((((((((((((vt2.c0)) NOT BETWEEN ((v0.c2)) AND ((v0.c0))))OR((v0.c3 IN (vt0.c0, v0.c3, v0.c0)))))AND(((v0.c0)>>('-1163659545')))))OR(((((((((((((vt2.c1)AND(vt2.c0)))AND(vt2.c1)))OR(v0.c1)))AND(vt0.c0)))OR(vt0.c0)))AND(v0.c2)))))AND(((vt0.c0)/(vt0.c0)))))OR(TIME(vt2.c1, vt2.c1, v0.c0, v0.c3, v0.c2, v0.c2))), ((NULL)+(vt2.c1))  NULLS LAST, (NOT (((v0.c0)+(vt2.c1)))) ASC  NULLS FIRST LIMIT 0x3;
SELECT * FROM v0, vt2, vt0 WHERE ('0.7822337193029021' COLLATE RTRIM);
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((('0.7822337193029021' COLLATE RTRIM)AND(CASE WHEN CAST(v0.c1 AS INTEGER) THEN (- (v0.c3)) ELSE CASE v0.c3  WHEN 'D+f_^ivA6' THEN x'' WHEN v0.c1 THEN 1419665892 WHEN vt2.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END END))) ORDER BY TYPEOF('-1680991631') ASC  NULLS FIRST, (((((((((((((vt2.c0)) NOT BETWEEN ((v0.c2)) AND ((v0.c0))))OR((v0.c3 IN (vt0.c0, v0.c3, v0.c0)))))AND(((v0.c0)>>('-1163659545')))))OR(((((((((((((vt2.c1)AND(vt2.c0)))AND(vt2.c1)))OR(v0.c1)))AND(vt0.c0)))OR(vt0.c0)))AND(v0.c2)))))AND(((vt0.c0)/(vt0.c0)))))OR(TIME(vt2.c1, vt2.c1, v0.c0, v0.c3, v0.c2, v0.c2))), ((NULL)+(vt2.c1))  NULLS LAST, (NOT (((v0.c0)+(vt2.c1)))) ASC  NULLS FIRST LIMIT 0x3;
SELECT * FROM vt0, v0, vt2 WHERE (((((((v0.c2)OR(vt2.c0)))AND(v0.c2)))OR(((v0.c1) BETWEEN (v0.c0) AND (vt2.c1)))));
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((((v0.c2)OR(vt2.c0)))AND(v0.c2)))OR(((v0.c1) BETWEEN (v0.c0) AND (vt2.c1))))) LIMIT 0X1;
SELECT * FROM vt0, v0, vt2 WHERE (((((((v0.c2)OR(vt2.c0)))AND(v0.c2)))OR(((v0.c1) BETWEEN (v0.c0) AND (vt2.c1)))));
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((((v0.c2)OR(vt2.c0)))AND(v0.c2)))OR(((v0.c1) BETWEEN (v0.c0) AND (vt2.c1))))) LIMIT 0X1;
SELECT COUNT(*) FROM vt2, v0 WHERE ((CASE -5.80686248E8  WHEN v0.c3 THEN NULL WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN v0.c3 ELSE 0.04276486104226773 END IN (((((((v0.c1)AND('770310855')))AND(v0.c1)))OR(v0.c1)), (v0.c2 IN ())))) ORDER BY 0X3c305812 ASC, ((CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c1 THEN v0.c0 WHEN vt2.c1 THEN v0.c3 WHEN 0.1055034354012675 THEN v0.c1 END)AND(CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN x'fe' WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN '-1456454795' ELSE v0.c1 END)) ASC  NULLS LAST, ((vt2.c0 COLLATE NOCASE) IS TRUE);
SELECT COUNT(*) FROM vt2, v0 WHERE ((((CASE -5.80686248E8  WHEN v0.c3 THEN NULL WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN v0.c3 ELSE 0.04276486104226773 END IN (((((((v0.c1)AND('770310855')))AND(v0.c1)))OR(v0.c1)), (v0.c2 IN ()))))AND(LIKELIHOOD(((vt2.c0) BETWEEN (v0.c1) AND (v0.c2)), CAST(v0.c2 AS REAL))))) ORDER BY 0X3c305812 ASC, ((CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c1 THEN v0.c0 WHEN vt2.c1 THEN v0.c3 WHEN 0.1055034354012675 THEN v0.c1 END)AND(CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN x'fe' WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN '-1456454795' ELSE v0.c1 END)) ASC  NULLS LAST, ((vt2.c0 COLLATE NOCASE) IS TRUE) LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt2, v0 WHERE ((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1)) IN ((v0.c1 IN (v0.c1)), 0xffffffffddc46084))) ORDER BY 0X3c305812 ASC, ((CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c1 THEN v0.c0 WHEN vt2.c1 THEN v0.c3 WHEN 0.1055034354012675 THEN v0.c1 END)AND(CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN v0.c2 THEN x'fe' WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN '-1456454795' ELSE v0.c1 END)) ASC  NULLS LAST, ((vt2.c0 COLLATE NOCASE) IS TRUE) LIMIT 0x1;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((('1903436638') ISNULL)))<>((((vt0.c0)||(vt0.c0)))))) ORDER BY (((vt0.c0 IN (vt0.c0, vt0.c0, vt0.c0))) IS FALSE) DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((('1903436638') ISNULL)))<((((vt0.c0)||(vt0.c0)))))) ORDER BY ((vt0.c0) ISNULL)  NULLS LAST, ((((NOT (vt0.c0))))<((CAST('-610673233' AS NUMERIC))))  NULLS LAST LIMIT 0X0;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))-(((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST, (((vt0.c0)<<(-1548503606)) IN (0.08287435577663205, ((vt0.c0)||(vt0.c0)))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c0)AND(0.4545268333688167))) ORDER BY ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))-(((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST, (((vt0.c0)<<(0Xffffffffa3b3b5ca)) IN (0.08287435577663205, ((vt0.c0)||(vt0.c0)))) DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE ((NOT (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'c726' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))) ORDER BY ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))-(((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST, (((vt0.c0)<<(-1548503606)) IN (0.08287435577663205, ((vt0.c0)||(vt0.c0)))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))-(((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST, (((vt0.c0)<<(-1548503606)) IN (0.08287435577663205, ((vt0.c0)||(vt0.c0)))) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((vt0.c0)AND(0.4545268333688167))) ORDER BY ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))-(((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST, (((vt0.c0)<<(0Xffffffffa3b3b5ca)) IN (0.08287435577663205, ((vt0.c0)||(vt0.c0)))) DESC  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE ((NOT (CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'c726' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))) ORDER BY ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))-(((vt0.c0)IS NOT(vt0.c0)))) ASC  NULLS FIRST, (((vt0.c0)<<(-1548503606)) IN (0.08287435577663205, ((vt0.c0)||(vt0.c0)))) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (v0.c2) ORDER BY (~ (vt2.c0)) DESC, ((((v0.c2)IS(vt2.c1)))AND((((NULL, ''))>((v0.c1, vt2.c0)))));
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (((v0.c2)AND(((((((v0.c2))<=((v0.c1)))))<((v0.c3 COLLATE NOCASE)))))) ORDER BY CAST(UPPER(NULL) AS TEXT) DESC  NULLS LAST, CASE ((vt2.c0)<=(v0.c2))  WHEN vt2.c1 THEN CASE WHEN vt0.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c0 ELSE vt0.c0 END END  NULLS FIRST LIMIT 3 INTERSECT SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (CAST(vt2.c0 AS REAL) COLLATE BINARY) ORDER BY CAST(UPPER(NULL) AS TEXT) DESC  NULLS LAST, CASE ((vt2.c0)<=(v0.c2))  WHEN vt2.c1 THEN CASE WHEN vt0.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c0 ELSE vt0.c0 END END  NULLS FIRST LIMIT 3;
SELECT * FROM vt0, vt2, v0 WHERE (json_extract((vt2.c0 IN (v0.c3)), ((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((v0.c2) BETWEEN (v0.c3) AND (vt0.c0)))) ORDER BY ((v0.c2) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (x'56'))  NULLS LAST, (- (SQLITE_COMPILEOPTION_GET(v0.c1)));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((json_extract((vt2.c0 IN (v0.c3)), ((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((v0.c2) BETWEEN (v0.c3) AND (vt0.c0))))AND((+ (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))))))) ORDER BY ((v0.c2) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (x'56'))  NULLS LAST, (- (SQLITE_COMPILEOPTION_GET(v0.c1))) LIMIT 1;
SELECT * FROM vt0, vt2, v0 WHERE (json_extract((vt2.c0 IN (v0.c3)), ((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((v0.c2) BETWEEN (v0.c3) AND (vt0.c0)))) ORDER BY ((v0.c2) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (x'56'))  NULLS LAST, (- (SQLITE_COMPILEOPTION_GET(v0.c1)));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((json_extract((vt2.c0 IN (v0.c3)), ((((vt0.c0)AND(vt2.c1)))AND(vt2.c1)), ((v0.c2) BETWEEN (v0.c3) AND (vt0.c0))))AND((+ (((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0))))))) ORDER BY ((v0.c2) BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (x'56'))  NULLS LAST, (- (SQLITE_COMPILEOPTION_GET(v0.c1))) LIMIT 1;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON vt2.c1 WHERE ((((((((- (vt2.c0)))AND(((v0.c1) NOT NULL))))AND((- (v0.c2)))))AND(LAST_INSERT_ROWID())));
SELECT ALL * FROM v0 CROSS JOIN vt2 ON vt2.c1 WHERE ((((((((- (vt2.c0)))AND(((v0.c1) NOT NULL))))AND((- (v0.c2)))))AND(LAST_INSERT_ROWID()))) ORDER BY (((((vt2.c1))!=((v0.c1))))|(CAST(vt2.c1 AS TEXT)))  NULLS LAST, v0.c2  NULLS FIRST, ((((((((((PRINTF(vt2.c0, vt2.c0))OR(x'16')))AND((((vt2.c1, 3.82198455E8, vt2.c1, v0.c3, v0.c1))=((v0.c1, vt2.c0, v0.c1, 0.09531514565658372, v0.c3))))))OR(((v0.c2)IS NOT(NULL)))))OR((((v0.c2, v0.c2, v0.c1))>=((-1.330521423E9, vt2.c0, v0.c2))))))AND(v0.c1)) ASC INTERSECT SELECT ALL * FROM v0 CROSS JOIN vt2 ON vt2.c1 WHERE (((((((((((((((vt2.c0)<>(v0.c3)))AND((((vt2.c1))=((NULL))))))AND((((v0.c3, v0.c3, vt2.c1))>((vt2.c1, v0.c0, v0.c1))))))OR(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c1)))))AND((v0.c2 IN ()))))OR(((vt2.c1)&(v0.c1)))))OR(v0.c1 COLLATE BINARY))) ORDER BY (((((vt2.c1))!=((v0.c1))))|(CAST(vt2.c1 AS TEXT)))  NULLS LAST, v0.c2  NULLS FIRST, ((((((((((PRINTF(vt2.c0, vt2.c0))OR(x'16')))AND((((vt2.c1, 3.82198455E8, vt2.c1, v0.c3, v0.c1))=((v0.c1, vt2.c0, v0.c1, 0.09531514565658372, v0.c3))))))OR(((v0.c2)IS NOT(NULL)))))OR((((v0.c2, v0.c2, v0.c1))>=((-1.330521423E9, vt2.c0, v0.c2))))))AND(v0.c1)) ASC;
SELECT ALL * FROM v0 CROSS JOIN vt2 ON vt2.c1 WHERE ((((((((- (vt2.c0)))AND(((v0.c1) NOT NULL))))AND((- (v0.c2)))))AND(LAST_INSERT_ROWID())));
SELECT ALL * FROM v0 CROSS JOIN vt2 ON vt2.c1 WHERE ((((((((- (vt2.c0)))AND(((v0.c1) NOT NULL))))AND((- (v0.c2)))))AND(LAST_INSERT_ROWID()))) ORDER BY (((((vt2.c1))!=((v0.c1))))|(CAST(vt2.c1 AS TEXT)))  NULLS LAST, v0.c2  NULLS FIRST, ((((((((((PRINTF(vt2.c0, vt2.c0))OR(x'16')))AND((((vt2.c1, 3.82198455E8, vt2.c1, v0.c3, v0.c1))=((v0.c1, vt2.c0, v0.c1, 0.09531514565658372, v0.c3))))))OR(((v0.c2)IS NOT(NULL)))))OR((((v0.c2, v0.c2, v0.c1))>=((-1.330521423E9, vt2.c0, v0.c2))))))AND(v0.c1)) ASC INTERSECT SELECT ALL * FROM v0 CROSS JOIN vt2 ON vt2.c1 WHERE (((((((((((((((vt2.c0)<>(v0.c3)))AND((((vt2.c1))=((NULL))))))AND((((v0.c3, v0.c3, vt2.c1))>((vt2.c1, v0.c0, v0.c1))))))OR(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c1)))))AND((v0.c2 IN ()))))OR(((vt2.c1)&(v0.c1)))))OR(v0.c1 COLLATE BINARY))) ORDER BY (((((vt2.c1))!=((v0.c1))))|(CAST(vt2.c1 AS TEXT)))  NULLS LAST, v0.c2  NULLS FIRST, ((((((((((PRINTF(vt2.c0, vt2.c0))OR(x'16')))AND((((vt2.c1, 3.82198455E8, vt2.c1, v0.c3, v0.c1))=((v0.c1, vt2.c0, v0.c1, 0.09531514565658372, v0.c3))))))OR(((v0.c2)IS NOT(NULL)))))OR((((v0.c2, v0.c2, v0.c1))>=((-1.330521423E9, vt2.c0, v0.c2))))))AND(v0.c1)) ASC;
SELECT MIN(vt0.c0) FROM vt0, vt2, v0 WHERE (CAST(CAST(v0.c2 AS TEXT) AS REAL));
SELECT MIN(vt0.c0) FROM vt0, vt2, v0 WHERE (((CAST(CAST(v0.c2 AS TEXT) AS REAL))AND((+ (vt0.c0)) COLLATE NOCASE COLLATE BINARY))) ORDER BY GLOB(((v0.c1) BETWEEN (NULL) AND (v0.c2)), v0.c2) ASC, CASE v0.c0  WHEN v0.c0 THEN vt2.c0 WHEN '-1478372600' THEN v0.c2 WHEN vt2.c1 THEN vt0.c0 END COLLATE RTRIM LIMIT 0x0 INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0, vt2, v0 WHERE (((((((((((((v0.c3)OR(v0.c0)))OR(v0.c3)))OR(vt0.c0)))AND(((v0.c3)/(vt0.c0)))))OR('0.9873959024305637')))AND((((v0.c2))>((vt2.c1)))))) ORDER BY GLOB(((v0.c1) BETWEEN (NULL) AND (v0.c2)), v0.c2) ASC, CASE v0.c0  WHEN v0.c0 THEN vt2.c0 WHEN '-1478372600' THEN v0.c2 WHEN vt2.c1 THEN vt0.c0 END COLLATE RTRIM LIMIT 0X0;
SELECT * FROM vt0, vt2, v0 WHERE ((NOT (vt2.c0 COLLATE NOCASE))) ORDER BY (NOT ((NULL IN (vt2.c1, v0.c0))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((NOT (vt2.c0 COLLATE NOCASE)))AND((((((v0.c2) NOT NULL), ((v0.c3)<(x'')), CAST(v0.c2 AS REAL), ((vt2.c1)*(v0.c3))))<((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt2.c0 ELSE vt2.c1 END, vt2.c0, ((vt0.c0)%(vt0.c0)), ((((((((v0.c1)AND(vt2.c0)))AND(v0.c0)))OR(vt0.c0)))AND(vt2.c0)))))))) ORDER BY ((((x'' COLLATE NOCASE)OR(v0.c2)))OR(CAST(v0.c1 AS TEXT))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (CAST(CASE vt2.c0  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN NULL WHEN v0.c3 THEN vt0.c0 WHEN vt0.c0 THEN v0.c3 WHEN vt0.c0 THEN v0.c1 END AS REAL)) ORDER BY ((((x'' COLLATE NOCASE)OR(v0.c2)))OR(CAST(v0.c1 AS TEXT))) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt0, vt2, v0 WHERE ((NOT (vt2.c0 COLLATE NOCASE))) ORDER BY (NOT ((NULL IN (vt2.c1, v0.c0))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((NOT (vt2.c0 COLLATE NOCASE)))AND((((((v0.c2) NOT NULL), ((v0.c3)<(x'')), CAST(v0.c2 AS REAL), ((vt2.c1)*(v0.c3))))<((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt2.c0 ELSE vt2.c1 END, vt2.c0, ((vt0.c0)%(vt0.c0)), ((((((((v0.c1)AND(vt2.c0)))AND(v0.c0)))OR(vt0.c0)))AND(vt2.c0)))))))) ORDER BY ((((x'' COLLATE NOCASE)OR(v0.c2)))OR(CAST(v0.c1 AS TEXT))) ASC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (CAST(CASE vt2.c0  WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN NULL WHEN v0.c3 THEN vt0.c0 WHEN vt0.c0 THEN v0.c3 WHEN vt0.c0 THEN v0.c1 END AS REAL)) ORDER BY ((((x'' COLLATE NOCASE)OR(v0.c2)))OR(CAST(v0.c1 AS TEXT))) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt2, vt0 WHERE (COALESCE(SQLITE_COMPILEOPTION_GET(vt2.c0), ((vt0.c0) NOT BETWEEN (0.0422139577626488) AND (vt2.c0)), ((vt2.c0)>>(vt2.c0)), COALESCE(vt2.c0, vt0.c0, vt2.c0, vt2.c1))) ORDER BY ABS(DISTINCT (((vt2.c0)) NOT BETWEEN ((-7.8707384E8)) AND ((vt2.c1)))) DESC  NULLS FIRST, CAST(0xfffffffff18128f4 AS NUMERIC) COLLATE NOCASE DESC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (COALESCE(SQLITE_COMPILEOPTION_GET(vt2.c0), ((vt0.c0) NOT BETWEEN (0.0422139577626488) AND (vt2.c0)), ((vt2.c0)>>(vt2.c0)), COALESCE(vt2.c0, vt0.c0, vt2.c0, vt2.c1))) ORDER BY (((- (vt2.c1)))>(((vt2.c0)%(vt0.c0)))) DESC;
SELECT * FROM vt2, vt0 WHERE (COALESCE(SQLITE_COMPILEOPTION_GET(vt2.c0), ((vt0.c0) NOT BETWEEN (0.0422139577626488) AND (vt2.c0)), ((vt2.c0)>>(vt2.c0)), COALESCE(vt2.c0, vt0.c0, vt2.c0, vt2.c1))) ORDER BY ABS(DISTINCT (((vt2.c0)) NOT BETWEEN ((-7.8707384E8)) AND ((vt2.c1)))) DESC  NULLS FIRST, CAST(0xfffffffff18128f4 AS NUMERIC) COLLATE NOCASE DESC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (COALESCE(SQLITE_COMPILEOPTION_GET(vt2.c0), ((vt0.c0) NOT BETWEEN (0.0422139577626488) AND (vt2.c0)), ((vt2.c0)>>(vt2.c0)), COALESCE(vt2.c0, vt0.c0, vt2.c0, vt2.c1))) ORDER BY (((- (vt2.c1)))>(((vt2.c0)%(vt0.c0)))) DESC;
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON CAST((v0.c0 IN ()) AS INTEGER) WHERE ((((((v0.c1, vt2.c0, vt2.c0))<((vt2.c0, v0.c0, v0.c0))))<=(GLOB(vt2.c0, vt2.c1))));
SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON CAST((v0.c0 IN ()) AS INTEGER) WHERE ((((((((v0.c1, vt2.c0, vt2.c0))<((vt2.c0, v0.c0, v0.c0))))<=(GLOB(vt2.c0, vt2.c1))))AND((NOT (CASE v0.c0  WHEN 'k~' THEN v0.c2 WHEN v0.c1 THEN v0.c3 WHEN vt2.c1 THEN v0.c2 ELSE v0.c1 END))))) ORDER BY ROUND(((((((((((v0.c3)OR('G]0[')))OR(v0.c2)))AND(v0.c2)))AND(v0.c2)))AND(v0.c3)), (v0.c2 IN (v0.c0))) DESC  NULLS LAST, ((json_extract(v0.c1, vt2.c0, v0.c3))%((((vt2.c0, vt2.c1, -433181884, v0.c3)) NOT BETWEEN ((vt2.c1, v0.c0, v0.c0, x'7321')) AND ((vt2.c1, '214129716', v0.c3, v0.c1))))) INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON CAST((v0.c0 IN ()) AS INTEGER) WHERE ((- (CAST(v0.c2 AS REAL)))) ORDER BY ROUND(((((((((((v0.c3)OR('G]0[')))OR(v0.c2)))AND(v0.c2)))AND(v0.c2)))AND(v0.c3)), (v0.c2 IN (v0.c0))) DESC  NULLS LAST, ((json_extract(v0.c1, vt2.c0, v0.c3))%((((vt2.c0, vt2.c1, -433181884, v0.c3)) NOT BETWEEN ((vt2.c1, v0.c0, v0.c0, x'7321')) AND ((vt2.c1, '214129716', v0.c3, v0.c1)))));
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON CAST((v0.c0 IN ()) AS INTEGER) WHERE ((((((v0.c1, vt2.c0, vt2.c0))<((vt2.c0, v0.c0, v0.c0))))<=(GLOB(vt2.c0, vt2.c1))));
SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON CAST((v0.c0 IN ()) AS INTEGER) WHERE ((((((((v0.c1, vt2.c0, vt2.c0))<((vt2.c0, v0.c0, v0.c0))))<=(GLOB(vt2.c0, vt2.c1))))AND((NOT (CASE v0.c0  WHEN 'k~' THEN v0.c2 WHEN v0.c1 THEN v0.c3 WHEN vt2.c1 THEN v0.c2 ELSE v0.c1 END))))) ORDER BY ROUND(((((((((((v0.c3)OR('G]0[')))OR(v0.c2)))AND(v0.c2)))AND(v0.c2)))AND(v0.c3)), (v0.c2 IN (v0.c0))) DESC  NULLS LAST, ((json_extract(v0.c1, vt2.c0, v0.c3))%((((vt2.c0, vt2.c1, -433181884, v0.c3)) NOT BETWEEN ((vt2.c1, v0.c0, v0.c0, x'7321')) AND ((vt2.c1, '214129716', v0.c3, v0.c1))))) INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON CAST((v0.c0 IN ()) AS INTEGER) WHERE ((- (CAST(v0.c2 AS REAL)))) ORDER BY ROUND(((((((((((v0.c3)OR('G]0[')))OR(v0.c2)))AND(v0.c2)))AND(v0.c2)))AND(v0.c3)), (v0.c2 IN (v0.c0))) DESC  NULLS LAST, ((json_extract(v0.c1, vt2.c0, v0.c3))%((((vt2.c0, vt2.c1, -433181884, v0.c3)) NOT BETWEEN ((vt2.c1, v0.c0, v0.c0, x'7321')) AND ((vt2.c1, '214129716', v0.c3, v0.c1)))));
SELECT ALL MAX(vt2.c0) FROM vt2 NOT INDEXED WHERE (((((((((vt2.c0) IS TRUE))AND(vt2.c0)))AND('+Wgwk')))OR((- (vt2.c0)))));
SELECT MAX(vt2.c0) FROM vt2 WHERE (((((((((((vt2.c0) IS TRUE))AND(vt2.c0)))AND('+Wgwk')))OR((- (vt2.c0)))))AND('128633290'))) ORDER BY '-574332796' DESC, (((vt2.c0 IN ())) NOT NULL) ASC INTERSECT SELECT MAX(vt2.c0) FROM vt2 WHERE (((vt2.c1 COLLATE NOCASE)GLOB(((((((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c1))))) ORDER BY '-574332796' DESC, (((vt2.c0 IN ())) NOT NULL) ASC;
SELECT * FROM vt2, v0 WHERE ((+ (CASE WHEN '-2006647167' THEN 0.27722967750846383 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 END))) ORDER BY (((v0.c1, v0.c1, 0.724256192596806, NULL)) BETWEEN (((NOT (vt2.c0)), NULL, (((vt2.c0, v0.c2))<=((vt2.c1, vt2.c1))), 0Xffffffffa18356e2)) AND ((v0.c2 COLLATE RTRIM, ((((v0.c1)AND(vt2.c0)))OR(v0.c1)), (v0.c1 IN (v0.c1)), vt2.c1))) ASC  NULLS LAST, (((((((((v0.c1 IN ()))OR(TYPEOF(NULL))))AND(((0.21826382423020374) BETWEEN (v0.c0) AND (vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt2.c0 ELSE 'qU65asE #' END)))OR(((-1587787033)>>(v0.c0))));
SELECT DISTINCT * FROM vt2, v0 WHERE ((((+ (CASE WHEN '-2006647167' THEN 0.27722967750846383 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 END)))AND((+ ((~ (vt2.c0))))))) ORDER BY (((v0.c1, v0.c1, 0.724256192596806, NULL)) BETWEEN (((NOT (vt2.c0)), NULL, (((vt2.c0, v0.c2))<=((vt2.c1, vt2.c1))), 0Xffffffffa18356e2)) AND ((v0.c2 COLLATE RTRIM, ((((v0.c1)AND(vt2.c0)))OR(v0.c1)), (v0.c1 IN (v0.c1)), vt2.c1))) ASC  NULLS LAST, (((((((((v0.c1 IN ()))OR(TYPEOF(NULL))))AND(((0.21826382423020374) BETWEEN (v0.c0) AND (vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt2.c0 ELSE 'qU65asE #' END)))OR(((-1587787033)>>(v0.c0)))) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((INSTR(v0.c2, v0.c3))*(CAST(v0.c3 AS BLOB)))) ORDER BY (((v0.c1, v0.c1, 0.724256192596806, NULL)) BETWEEN (((NOT (vt2.c0)), NULL, (((vt2.c0, v0.c2))<=((vt2.c1, vt2.c1))), -1585228062)) AND ((v0.c2 COLLATE RTRIM, ((((v0.c1)AND(vt2.c0)))OR(v0.c1)), (v0.c1 IN (v0.c1)), vt2.c1))) ASC  NULLS LAST, (((((((((v0.c1 IN ()))OR(TYPEOF(NULL))))AND(((0.21826382423020374) BETWEEN (v0.c0) AND (vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt2.c0 ELSE 'qU65asE #' END)))OR(((0xffffffffa15c4ae7)>>(v0.c0))));
SELECT * FROM vt2, v0 WHERE ((+ (CASE WHEN '-2006647167' THEN 0.27722967750846383 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 END))) ORDER BY (((v0.c1, v0.c1, 0.724256192596806, NULL)) BETWEEN (((NOT (vt2.c0)), NULL, (((vt2.c0, v0.c2))<=((vt2.c1, vt2.c1))), 0Xffffffffa18356e2)) AND ((v0.c2 COLLATE RTRIM, ((((v0.c1)AND(vt2.c0)))OR(v0.c1)), (v0.c1 IN (v0.c1)), vt2.c1))) ASC  NULLS LAST, (((((((((v0.c1 IN ()))OR(TYPEOF(NULL))))AND(((0.21826382423020374) BETWEEN (v0.c0) AND (vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt2.c0 ELSE 'qU65asE #' END)))OR(((-1587787033)>>(v0.c0))));
SELECT DISTINCT * FROM vt2, v0 WHERE ((((+ (CASE WHEN '-2006647167' THEN 0.27722967750846383 WHEN v0.c2 THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 END)))AND((+ ((~ (vt2.c0))))))) ORDER BY (((v0.c1, v0.c1, 0.724256192596806, NULL)) BETWEEN (((NOT (vt2.c0)), NULL, (((vt2.c0, v0.c2))<=((vt2.c1, vt2.c1))), 0Xffffffffa18356e2)) AND ((v0.c2 COLLATE RTRIM, ((((v0.c1)AND(vt2.c0)))OR(v0.c1)), (v0.c1 IN (v0.c1)), vt2.c1))) ASC  NULLS LAST, (((((((((v0.c1 IN ()))OR(TYPEOF(NULL))))AND(((0.21826382423020374) BETWEEN (v0.c0) AND (vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt2.c0 ELSE 'qU65asE #' END)))OR(((-1587787033)>>(v0.c0)))) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((INSTR(v0.c2, v0.c3))*(CAST(v0.c3 AS BLOB)))) ORDER BY (((v0.c1, v0.c1, 0.724256192596806, NULL)) BETWEEN (((NOT (vt2.c0)), NULL, (((vt2.c0, v0.c2))<=((vt2.c1, vt2.c1))), -1585228062)) AND ((v0.c2 COLLATE RTRIM, ((((v0.c1)AND(vt2.c0)))OR(v0.c1)), (v0.c1 IN (v0.c1)), vt2.c1))) ASC  NULLS LAST, (((((((((v0.c1 IN ()))OR(TYPEOF(NULL))))AND(((0.21826382423020374) BETWEEN (v0.c0) AND (vt2.c0)))))AND(CASE WHEN vt2.c0 THEN vt2.c0 ELSE 'qU65asE #' END)))OR(((0xffffffffa15c4ae7)>>(v0.c0))));
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE (CASE ((x'f2')LIKE(vt2.c1))  WHEN (v0.c3 IN (v0.c2, vt2.c1)) THEN ((v0.c2)<(vt2.c1)) END);
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE (CASE ((x'f2')LIKE(vt2.c1))  WHEN (v0.c3 IN (v0.c2)) THEN ((v0.c2)<(vt2.c1)) END) ORDER BY v0.c2 LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt2, v0, vt0 NOT INDEXED WHERE ((((UPPER(DISTINCT v0.c1), (((v0.c2))>=((vt2.c0))), ((((((((((((0.8658225766340236)OR(vt2.c1)))AND(v0.c3)))OR(v0.c1)))AND(v0.c2)))OR(vt2.c0)))AND(vt0.c0))))<=((NULL COLLATE BINARY, vt2.c0 COLLATE BINARY, '')))) ORDER BY v0.c2 LIMIT 1;
SELECT MIN(v0.c1) FROM vt2, v0 WHERE (LENGTH((- (v0.c0)))) ORDER BY ((((((((vt2.c1)AND(v0.c3)))AND(vt2.c1)))OR(v0.c2))) ISNULL) ASC;
SELECT MIN(v0.c1) FROM vt2, v0 WHERE (((LENGTH((- (v0.c0))))AND((((v0.c1 IN (vt2.c0))) NOT BETWEEN (((v0.c0) NOTNULL)) AND ((NOT (vt2.c0))))))) ORDER BY ((((((((vt2.c1)AND(v0.c3)))AND(vt2.c1)))OR(v0.c2))) ISNULL) ASC LIMIT 0 INTERSECT SELECT MIN(v0.c1) FROM vt2, v0 WHERE (CASE ((((((((v0.c0)AND(v0.c1)))OR(v0.c0)))AND(x'13')))AND(v0.c2))  WHEN ((vt2.c0) BETWEEN (v0.c2) AND (v0.c0)) THEN COALESCE(DISTINCT v0.c2, vt2.c1, v0.c0, 0.39554395251267427) ELSE 0.10228446331945973 END) ORDER BY ((((((((vt2.c1)AND(v0.c3)))AND(vt2.c1)))OR(v0.c2))) ISNULL) ASC LIMIT 0;
SELECT COUNT(*) FROM vt0, v0 WHERE (((CASE vt0.c0  WHEN v0.c2 THEN v0.c1 WHEN vt0.c0 THEN v0.c3 END) BETWEEN (((0Xffffffffe98f2865) NOT BETWEEN (v0.c1) AND (v0.c2))) AND (((v0.c0)+(v0.c1))))) ORDER BY ((CAST(vt0.c0 AS REAL))*(CAST(v0.c1 AS BLOB))) DESC;
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE (((((CASE vt0.c0  WHEN v0.c2 THEN v0.c1 WHEN vt0.c0 THEN v0.c3 END) BETWEEN (((0xffffffffe98f2865) NOT BETWEEN (v0.c1) AND (v0.c2))) AND (((v0.c0)+(v0.c1)))))AND(v0.c3))) ORDER BY ((CAST(vt0.c0 AS REAL))*(CAST(v0.c1 AS BLOB))) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE ((((NOT (v0.c1)))OR(((v0.c1) NOT NULL)))) ORDER BY ((CAST(vt0.c0 AS REAL))*(CAST(v0.c1 AS BLOB))) DESC;
SELECT MIN(vt0.c0) FROM vt2, vt0 WHERE (CASE vt2.c0  WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END COLLATE NOCASE) ORDER BY HEX(DISTINCT NULL COLLATE NOCASE)  NULLS FIRST, (((0.2533352113636629 COLLATE RTRIM))>=((json_patch(vt2.c0, vt2.c1))))  NULLS LAST, ((vt2.c0)=(CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END)) ASC  NULLS LAST;
SELECT DISTINCT MIN(vt0.c0) FROM vt2, vt0 WHERE (((CASE vt2.c0  WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END COLLATE NOCASE)AND(CAST(((((((vt2.c0)AND(vt0.c0)))AND(vt2.c1)))OR(NULL)) AS INTEGER)))) ORDER BY UPPER((('(')+(vt2.c0))) INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt2, vt0 WHERE ((((vt0.c0, vt2.c0)) NOT BETWEEN (('-1774302408', NULLIF(DISTINCT 0xfffffffffb9a403f, vt2.c0))) AND ((((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0)), vt2.c0 COLLATE NOCASE)))) ORDER BY UPPER((('(')+(vt2.c0)));
SELECT ALL * FROM v0, vt2 WHERE ((((v0.c3, v0.c1, vt2.c0, vt2.c1)) NOT BETWEEN (((x'' IN (vt2.c1)), ((((((NULL)OR(v0.c3)))AND(v0.c0)))AND(v0.c1)), vt2.c1, v0.c2)) AND ((((v0.c0)>>(v0.c2)), (((v0.c0, v0.c2)) NOT BETWEEN ((v0.c0, vt2.c0)) AND (('>5}e2', v0.c3))), SQLITE_COMPILEOPTION_GET(v0.c1), CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c1 END))));
SELECT * FROM v0, vt2 WHERE ((((((v0.c3, v0.c1, vt2.c0, vt2.c1)) NOT BETWEEN (((x'' IN (vt2.c1)), ((((((NULL)OR(v0.c3)))AND(v0.c0)))AND(v0.c1)), vt2.c1, v0.c2)) AND ((((v0.c0)>>(v0.c2)), (((v0.c0, v0.c2)) NOT BETWEEN ((v0.c0, vt2.c0)) AND (('>5}e2', v0.c3))), SQLITE_COMPILEOPTION_GET(v0.c1), CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c1 END))))AND(0.43015477911768996))) ORDER BY (((((vt2.c1) NOT BETWEEN (v0.c1) AND (v0.c0)), ((v0.c3)<=(v0.c2)), SQLITE_COMPILEOPTION_USED(NULL)))<=((((v0.c0) BETWEEN (v0.c1) AND (NULL)), v0.c2, ABS('ed!ol8+B/')))), ((NULL) NOT BETWEEN (v0.c0) AND (((v0.c3) IS FALSE))) ASC LIMIT 1 INTERSECT SELECT * FROM v0, vt2 WHERE ((((((x'5b3b5c4b')AND(v0.c3))))>=((((vt2.c1) IS TRUE))))) ORDER BY (((((vt2.c1) NOT BETWEEN (v0.c1) AND (v0.c0)), ((v0.c3)<=(v0.c2)), SQLITE_COMPILEOPTION_USED(NULL)))<=((((v0.c0) BETWEEN (v0.c1) AND (NULL)), v0.c2, ABS('ed!ol8+B/')))), ((NULL) NOT BETWEEN (v0.c0) AND (((v0.c3) IS FALSE))) ASC LIMIT 1;
SELECT ALL * FROM v0, vt2 WHERE ((((v0.c3, v0.c1, vt2.c0, vt2.c1)) NOT BETWEEN (((x'' IN (vt2.c1)), ((((((NULL)OR(v0.c3)))AND(v0.c0)))AND(v0.c1)), vt2.c1, v0.c2)) AND ((((v0.c0)>>(v0.c2)), (((v0.c0, v0.c2)) NOT BETWEEN ((v0.c0, vt2.c0)) AND (('>5}e2', v0.c3))), SQLITE_COMPILEOPTION_GET(v0.c1), CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c1 END))));
SELECT * FROM v0, vt2 WHERE ((((((v0.c3, v0.c1, vt2.c0, vt2.c1)) NOT BETWEEN (((x'' IN (vt2.c1)), ((((((NULL)OR(v0.c3)))AND(v0.c0)))AND(v0.c1)), vt2.c1, v0.c2)) AND ((((v0.c0)>>(v0.c2)), (((v0.c0, v0.c2)) NOT BETWEEN ((v0.c0, vt2.c0)) AND (('>5}e2', v0.c3))), SQLITE_COMPILEOPTION_GET(v0.c1), CASE WHEN vt2.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c1 END))))AND(0.43015477911768996))) ORDER BY (((((vt2.c1) NOT BETWEEN (v0.c1) AND (v0.c0)), ((v0.c3)<=(v0.c2)), SQLITE_COMPILEOPTION_USED(NULL)))<=((((v0.c0) BETWEEN (v0.c1) AND (NULL)), v0.c2, ABS('ed!ol8+B/')))), ((NULL) NOT BETWEEN (v0.c0) AND (((v0.c3) IS FALSE))) ASC LIMIT 1 INTERSECT SELECT * FROM v0, vt2 WHERE ((((((x'5b3b5c4b')AND(v0.c3))))>=((((vt2.c1) IS TRUE))))) ORDER BY (((((vt2.c1) NOT BETWEEN (v0.c1) AND (v0.c0)), ((v0.c3)<=(v0.c2)), SQLITE_COMPILEOPTION_USED(NULL)))<=((((v0.c0) BETWEEN (v0.c1) AND (NULL)), v0.c2, ABS('ed!ol8+B/')))), ((NULL) NOT BETWEEN (v0.c0) AND (((v0.c3) IS FALSE))) ASC LIMIT 1;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((vt0.c0)) NOT BETWEEN ((((v0.c2)*(v0.c0)))) AND ((x'08'))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((vt0.c0)) NOT BETWEEN ((((v0.c2)*(v0.c0)))) AND ((x'08')))) INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CASE vt2.c0  WHEN v0.c1 THEN vt2.c0 END) NOT BETWEEN (-1.444834624E9) AND (((v0.c3)GLOB(v0.c0)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((vt0.c0)) NOT BETWEEN ((((v0.c2)*(v0.c0)))) AND ((x'08'))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((vt0.c0)) NOT BETWEEN ((((v0.c2)*(v0.c0)))) AND ((x'08')))) INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CASE vt2.c0  WHEN v0.c1 THEN vt2.c0 END) NOT BETWEEN (-1.444834624E9) AND (((v0.c3)GLOB(v0.c0)))));
SELECT COUNT(*) FROM v0, vt2 WHERE (x'dba3' COLLATE NOCASE) ORDER BY rtreenode(((vt2.c1) NOT NULL), v0.c0 COLLATE NOCASE), (((v0.c0, v0.c1, vt2.c0)) NOT BETWEEN ((((v0.c2)IS(vt2.c0)), (('p')IS(vt2.c1)), CASE v0.c3  WHEN v0.c0 THEN vt2.c0 END)) AND (((+ (vt2.c0)), x'cd04', ((vt2.c1) NOTNULL))))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0, vt2 WHERE (((x'dba3' COLLATE NOCASE)AND(CAST((v0.c2 IN ()) AS TEXT)))) ORDER BY rtreenode(((vt2.c1) NOT NULL), v0.c0 COLLATE NOCASE), (((v0.c0, v0.c1, vt2.c0)) NOT BETWEEN ((((v0.c2)IS(vt2.c0)), (('p')IS(vt2.c1)), CASE v0.c3  WHEN v0.c0 THEN vt2.c0 END)) AND (((+ (vt2.c0)), x'cd04', ((vt2.c1) NOTNULL))))  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt2 WHERE ('689385187') ORDER BY rtreenode(((vt2.c1) NOT NULL), v0.c0 COLLATE NOCASE), (((v0.c0, v0.c1, vt2.c0)) NOT BETWEEN ((((v0.c2)IS(vt2.c0)), (('p')IS(vt2.c1)), CASE v0.c3  WHEN v0.c0 THEN vt2.c0 END)) AND (((+ (vt2.c0)), x'cd04', ((vt2.c1) NOTNULL))))  NULLS LAST;
SELECT ALL * FROM vt2, v0 NATURAL JOIN vt0 WHERE (vt2.c0) ORDER BY (((v0.c1 COLLATE RTRIM, 1874532482, (((vt0.c0, v0.c0))>=(('382198455', vt2.c1))), ((((vt0.c0)AND(v0.c1)))AND(vt2.c0))))!=((CAST(vt0.c0 AS BLOB), (((v0.c1, vt0.c0))>=((v0.c2, vt2.c0))), ((v0.c1)<=(v0.c0)), vt2.c1)));
SELECT ALL * FROM vt2, v0 NATURAL JOIN vt0 WHERE (((vt2.c0)AND(1126127630))) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c1) AND (2.126815385E9))) NOT NULL) DESC;
SELECT ALL * FROM vt2, v0 NATURAL JOIN vt0 WHERE (vt2.c0) ORDER BY (((v0.c1 COLLATE RTRIM, 1874532482, (((vt0.c0, v0.c0))>=(('382198455', vt2.c1))), ((((vt0.c0)AND(v0.c1)))AND(vt2.c0))))!=((CAST(vt0.c0 AS BLOB), (((v0.c1, vt0.c0))>=((v0.c2, vt2.c0))), ((v0.c1)<=(v0.c0)), vt2.c1)));
SELECT ALL * FROM vt2, v0 NATURAL JOIN vt0 WHERE (((vt2.c0)AND(1126127630))) ORDER BY ((((v0.c1) NOT BETWEEN (v0.c1) AND (2.126815385E9))) NOT NULL) DESC;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)AND(((vt0.c0)=(vt0.c0)))))AND(NULLIF(DISTINCT x'a1fc', vt0.c0))))AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((NULL, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, '', vt0.c0))))))OR((+ (vt0.c0)))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((((((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)AND(((vt0.c0)=(vt0.c0)))))AND(NULLIF(DISTINCT x'a1fc', vt0.c0))))AND((((vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((NULL, vt0.c0, vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0, '', vt0.c0))))))OR((+ (vt0.c0)))))AND((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) IN ((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))))));
SELECT ALL * FROM vt0, v0 WHERE (CAST(NULL AS INTEGER));
SELECT DISTINCT * FROM vt0, v0 WHERE (CAST(NULL AS INTEGER)) INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE ((((((v0.c1, vt0.c0))>=((NULL, v0.c3))))OR(NULL)));
SELECT ALL * FROM vt0, v0 WHERE (CAST(NULL AS INTEGER));
SELECT DISTINCT * FROM vt0, v0 WHERE (CAST(NULL AS INTEGER)) INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE ((((((v0.c1, vt0.c0))>=((NULL, v0.c3))))OR(NULL)));
SELECT ALL MIN(v0.c3) FROM v0 WHERE (v0.c3 COLLATE RTRIM);
SELECT MIN(v0.c3) FROM v0 WHERE (((v0.c3 COLLATE RTRIM)AND(x''))) INTERSECT SELECT MIN(v0.c3) FROM v0 WHERE (((CASE v0.c2  WHEN v0.c0 THEN v0.c3 ELSE v0.c3 END) NOT NULL));
SELECT MIN(vt2.c1) FROM v0, vt2, vt0 WHERE (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) COLLATE RTRIM) ORDER BY (((vt0.c0 IN (v0.c1)))<(v0.c2 COLLATE RTRIM)) ASC  NULLS LAST, json_array_length(CAST(v0.c0 AS NUMERIC), ABS(vt2.c0)) DESC  NULLS FIRST;
SELECT DISTINCT MIN(vt2.c1) FROM v0, vt2, vt0 WHERE (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c1)) COLLATE RTRIM) ORDER BY vt2.c0 DESC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM v0, vt2, vt0 WHERE (((((((((CASE vt0.c0  WHEN vt0.c0 THEN v0.c1 WHEN vt0.c0 THEN vt2.c0 END)AND(((v0.c3) NOT BETWEEN (vt0.c0) AND (vt2.c1)))))OR(CAST(vt2.c0 AS INTEGER))))AND(vt2.c1)))OR(((vt0.c0)&(vt2.c1))))) ORDER BY vt2.c0 DESC  NULLS LAST;
SELECT MIN(vt0.c0) FROM v0, vt0 WHERE (CAST((((v0.c3, vt0.c0)) BETWEEN ((vt0.c0, v0.c2)) AND ((v0.c3, v0.c3))) AS REAL)) ORDER BY CHANGES()  NULLS FIRST, ((IFNULL(v0.c2, vt0.c0)) NOT NULL)  NULLS LAST;
SELECT MIN(vt0.c0) FROM v0, vt0 WHERE (CAST((((v0.c3, vt0.c0)) BETWEEN ((vt0.c0, v0.c2)) AND ((v0.c3, v0.c3))) AS REAL)) ORDER BY CHANGES()  NULLS FIRST, ((IFNULL(v0.c2, vt0.c0)) NOT NULL)  NULLS LAST LIMIT 0X0;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE)+(CAST(vt0.c0 AS INTEGER)))) ORDER BY CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE NOCASE, ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('q嶱<hA')) COLLATE NOCASE  NULLS LAST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE)+(CAST(vt0.c0 AS INTEGER)))) ORDER BY CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE NOCASE, ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('q嶱<hA')) COLLATE NOCASE  NULLS LAST INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c0)AND(NULL)))AND(vt0.c0)))OR(-9.41041463E8))) NOT BETWEEN ((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) AND (DATETIME(vt0.c0, vt0.c0, vt0.c0, vt0.c0)))) ORDER BY CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE NOCASE, ((vt0.c0) NOT BETWEEN (vt0.c0) AND ('q嶱<hA')) COLLATE NOCASE  NULLS LAST;
SELECT * FROM vt2 WHERE (CASE WHEN vt2.c0 THEN CASE WHEN NULL THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END ELSE NULL END);
SELECT ALL * FROM vt2 WHERE (((CASE WHEN vt2.c0 THEN CASE WHEN NULL THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END ELSE NULL END)AND(NULL))) INTERSECT SELECT * FROM vt2 WHERE (vt2.c1);
SELECT * FROM vt2 WHERE (CASE WHEN vt2.c0 THEN CASE WHEN NULL THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END ELSE NULL END);
SELECT ALL * FROM vt2 WHERE (((CASE WHEN vt2.c0 THEN CASE WHEN NULL THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END ELSE NULL END)AND(NULL))) INTERSECT SELECT * FROM vt2 WHERE (vt2.c1);
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE ('-2009566884') ORDER BY (((vt0.c0, '-168283889', v0.c1, vt0.c0))<=((vt0.c0, vt2.c1, v0.c2, '-787073840'))) COLLATE RTRIM, '0.2920352001684853' DESC  NULLS LAST, (v0.c3 COLLATE BINARY IN (v0.c0))  NULLS LAST;
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE ((('-2009566884')AND(((GLOB(vt2.c1, vt2.c1))*(((x'43') BETWEEN (v0.c1) AND (vt2.c0))))))) ORDER BY vt2.c0 DESC;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (((((((((vt0.c0)OR(vt2.c0)))AND(vt2.c1)))OR(NULL))) BETWEEN ((((vt0.c0))<>((vt0.c0)))) AND ((vt0.c0 IN (x'')))));
SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE (((((((((((vt0.c0)OR(vt2.c0)))AND(vt2.c1)))OR(NULL))) BETWEEN ((((vt0.c0))>((vt0.c0)))) AND ((vt0.c0 IN (x'')))))AND((((vt2.c1, '770310855', vt2.c1)) NOT BETWEEN ((CAST(vt2.c1 AS BLOB), CAST(vt0.c0 AS BLOB), vt2.c1)) AND (('1625988069', -1.4402552E8, vt0.c0 COLLATE NOCASE)))))) ORDER BY (((((((((vt0.c0 IN ()))AND((vt2.c0 IN (vt2.c0)))))OR(((((((((vt2.c1)AND(vt0.c0)))OR(vt2.c1)))OR(vt0.c0)))AND(vt2.c0)))))OR(vt2.c1)))AND((+ (vt2.c1)))), CASE CASE WHEN vt2.c0 THEN vt2.c0 WHEN NULL THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END  WHEN (- (vt0.c0)) THEN (~ (vt0.c0)) WHEN vt0.c0 THEN (+ (vt2.c0)) ELSE CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END END DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE (CASE WHEN SQLITE_COMPILEOPTION_USED(vt2.c0) THEN vt2.c0 END) ORDER BY (((((((((vt0.c0 IN ()))AND((vt2.c0 IN (vt2.c0)))))OR(((((((((vt2.c1)AND(vt0.c0)))OR(vt2.c1)))OR(vt0.c0)))AND(vt2.c0)))))OR(vt2.c1)))AND((+ (vt2.c1)))), CASE CASE WHEN vt2.c0 THEN vt2.c0 WHEN NULL THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END  WHEN (- (vt0.c0)) THEN (~ (vt0.c0)) WHEN vt0.c0 THEN (+ (vt2.c0)) ELSE CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END END DESC;
SELECT * FROM vt0 LEFT OUTER JOIN v0 ON vt0.c0 LEFT OUTER JOIN vt2 ON ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)))<<(((((v0.c1)AND(v0.c3)))AND(NULL)))) WHERE (CASE WHEN v0.c1 COLLATE BINARY THEN (+ (vt0.c0)) WHEN (- (NULL)) THEN (~ (v0.c1)) ELSE ((NULL) BETWEEN (vt0.c0) AND (v0.c0)) END);
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON vt0.c0 LEFT OUTER JOIN vt2 ON ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)))<<(((((v0.c1)AND(v0.c3)))AND(NULL)))) WHERE (CASE WHEN v0.c1 COLLATE BINARY THEN (+ (vt0.c0)) WHEN (- (NULL)) THEN (~ (v0.c1)) ELSE ((NULL) BETWEEN (vt0.c0) AND (v0.c0)) END);
SELECT * FROM vt0 LEFT OUTER JOIN v0 ON vt0.c0 LEFT OUTER JOIN vt2 ON ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)))<<(((((v0.c1)AND(v0.c3)))AND(NULL)))) WHERE (CASE WHEN v0.c1 COLLATE BINARY THEN (+ (vt0.c0)) WHEN (- (NULL)) THEN (~ (v0.c1)) ELSE ((NULL) BETWEEN (vt0.c0) AND (v0.c0)) END);
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON vt0.c0 LEFT OUTER JOIN vt2 ON ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)))<<(((((v0.c1)AND(v0.c3)))AND(NULL)))) WHERE (CASE WHEN v0.c1 COLLATE BINARY THEN (+ (vt0.c0)) WHEN (- (NULL)) THEN (~ (v0.c1)) ELSE ((NULL) BETWEEN (vt0.c0) AND (v0.c0)) END);
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS INTEGER)) NOT BETWEEN (((((vt0.c0)OR(vt0.c0)))AND(vt0.c0))) AND ((((vt0.c0)) BETWEEN ((x'68d849')) AND ((-1.680991631E9))))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((CAST(vt0.c0 AS INTEGER)) NOT BETWEEN (((((vt0.c0)OR(vt0.c0)))AND(vt0.c0))) AND ((((vt0.c0)) BETWEEN ((x'68d849')) AND ((-1.680991631E9))))))AND(vt0.c0))) ORDER BY CASE CASE WHEN vt0.c0 THEN vt0.c0 END  WHEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) THEN (('0.960220642319812')<(vt0.c0)) END, vt0.c0  NULLS FIRST, x'80'  NULLS LAST LIMIT 0 INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0)IS((vt0.c0 IN (vt0.c0, vt0.c0))))) ORDER BY CASE CASE WHEN vt0.c0 THEN vt0.c0 END  WHEN ((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) THEN (('0.960220642319812')<(vt0.c0)) END, vt0.c0  NULLS FIRST, x'80'  NULLS LAST LIMIT 0X0;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE (ABS(((v0.c2)=(v0.c1))));
SELECT COUNT(*) FROM v0, vt0 WHERE (((ABS(((v0.c2)==(v0.c1))))AND(((((((v0.c3)AND(vt0.c0)))AND(vt0.c0)))&(((v0.c1) NOT BETWEEN (v0.c0) AND (vt0.c0))))))) ORDER BY ((((v0.c0)%(v0.c1)))<<(CAST(v0.c0 AS BLOB))) DESC  NULLS LAST, ((((v0.c1) ISNULL))>(((vt0.c0)==(v0.c2)))) ASC  NULLS LAST LIMIT 0X2;
SELECT * FROM v0 CROSS JOIN vt0 ON (((((vt2.c1) NOT BETWEEN (vt0.c0) AND ('K')), CAST(0.8371558124005088 AS BLOB), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1))))<((((vt2.c0) IS TRUE), ((v0.c1)-(v0.c0)), CASE vt0.c0  WHEN v0.c0 THEN v0.c0 ELSE vt0.c0 END))) LEFT OUTER JOIN vt2 ON ((((((v0.c1)OR(((v0.c0)AND(vt0.c0)))))OR(((vt2.c1)-(vt0.c0)))))AND((- (v0.c3)))) WHERE ((((vt2.c1, v0.c3, vt0.c0, vt2.c1, v0.c0, v0.c3)) BETWEEN (((((9.8818379E7))>((v0.c3))), (~ (NULL)), json_insert(v0.c1, v0.c0, vt2.c0), ((vt2.c0)-('98818379')), CAST(v0.c3 AS REAL), (NOT (-5.51752042E8)))) AND ((((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)))AND(v0.c3)), ((((((((((v0.c3)AND(v0.c0)))OR(v0.c0)))OR('1165436722')))AND(vt2.c0)))OR(v0.c0)), (~ (vt0.c0)), x'', ((v0.c2) BETWEEN (v0.c0) AND (vt2.c1)), (- (vt0.c0)))))) ORDER BY ((('1063775764', vt0.c0, NULL)) NOT BETWEEN ((CAST(v0.c0 AS REAL), ((v0.c0) IS TRUE), ((((((v0.c1)AND(v0.c1)))AND(vt2.c1)))OR(v0.c3)))) AND ((((v0.c1) NOT NULL), (((vt0.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c1))), CAST(v0.c1 AS TEXT)))) ASC  NULLS FIRST, LTRIM(COALESCE(v0.c1, v0.c1, v0.c1, -1681448721), 0.5529263540679537) ASC;
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON (((((vt2.c1) NOT BETWEEN (vt0.c0) AND ('K')), CAST(0.8371558124005088 AS BLOB), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1))))<((((vt2.c0) IS TRUE), ((v0.c1)-(v0.c0)), CASE vt0.c0  WHEN v0.c0 THEN v0.c0 ELSE vt0.c0 END))) INNER JOIN vt2 ON ((((((v0.c1)OR(((v0.c0)AND(vt0.c0)))))OR(((vt2.c1)-(vt0.c0)))))AND((- (v0.c3)))) WHERE ((((vt2.c1, v0.c3, vt0.c0, vt2.c1, v0.c0, v0.c3)) BETWEEN (((((9.8818379E7))>((v0.c3))), (~ (NULL)), json_insert(v0.c1, v0.c0, vt2.c0), ((vt2.c0)-('98818379')), CAST(v0.c3 AS REAL), (NOT (-5.51752042E8)))) AND ((((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)))AND(v0.c3)), ((((((((((v0.c3)AND(v0.c0)))OR(v0.c0)))OR('1165436722')))AND(vt2.c0)))OR(v0.c0)), (~ (vt0.c0)), x'', ((v0.c2) BETWEEN (v0.c0) AND (vt2.c1)), (- (vt0.c0)))))) ORDER BY ((('1063775764', vt0.c0, NULL)) NOT BETWEEN ((CAST(v0.c0 AS REAL), ((v0.c0) IS TRUE), ((((((v0.c1)AND(v0.c1)))AND(vt2.c1)))OR(v0.c3)))) AND ((((v0.c1) NOT NULL), (((vt0.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c1))), CAST(v0.c1 AS TEXT)))) ASC  NULLS FIRST, LTRIM(COALESCE(v0.c1, v0.c1, v0.c1, -1681448721), 0.5529263540679537) ASC LIMIT 0x1;
SELECT * FROM v0 CROSS JOIN vt0 ON (((((vt2.c1) NOT BETWEEN (vt0.c0) AND ('K')), CAST(0.8371558124005088 AS BLOB), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1))))<((((vt2.c0) IS TRUE), ((v0.c1)-(v0.c0)), CASE vt0.c0  WHEN v0.c0 THEN v0.c0 ELSE vt0.c0 END))) LEFT OUTER JOIN vt2 ON ((((((v0.c1)OR(((v0.c0)AND(vt0.c0)))))OR(((vt2.c1)-(vt0.c0)))))AND((- (v0.c3)))) WHERE ((((vt2.c1, v0.c3, vt0.c0, vt2.c1, v0.c0, v0.c3)) BETWEEN (((((9.8818379E7))>((v0.c3))), (~ (NULL)), json_insert(v0.c1, v0.c0, vt2.c0), ((vt2.c0)-('98818379')), CAST(v0.c3 AS REAL), (NOT (-5.51752042E8)))) AND ((((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)))AND(v0.c3)), ((((((((((v0.c3)AND(v0.c0)))OR(v0.c0)))OR('1165436722')))AND(vt2.c0)))OR(v0.c0)), (~ (vt0.c0)), x'', ((v0.c2) BETWEEN (v0.c0) AND (vt2.c1)), (- (vt0.c0)))))) ORDER BY ((('1063775764', vt0.c0, NULL)) NOT BETWEEN ((CAST(v0.c0 AS REAL), ((v0.c0) IS TRUE), ((((((v0.c1)AND(v0.c1)))AND(vt2.c1)))OR(v0.c3)))) AND ((((v0.c1) NOT NULL), (((vt0.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c1))), CAST(v0.c1 AS TEXT)))) ASC  NULLS FIRST, LTRIM(COALESCE(v0.c1, v0.c1, v0.c1, -1681448721), 0.5529263540679537) ASC;
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON (((((vt2.c1) NOT BETWEEN (vt0.c0) AND ('K')), CAST(0.8371558124005088 AS BLOB), ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1))))<((((vt2.c0) IS TRUE), ((v0.c1)-(v0.c0)), CASE vt0.c0  WHEN v0.c0 THEN v0.c0 ELSE vt0.c0 END))) INNER JOIN vt2 ON ((((((v0.c1)OR(((v0.c0)AND(vt0.c0)))))OR(((vt2.c1)-(vt0.c0)))))AND((- (v0.c3)))) WHERE ((((vt2.c1, v0.c3, vt0.c0, vt2.c1, v0.c0, v0.c3)) BETWEEN (((((9.8818379E7))>((v0.c3))), (~ (NULL)), json_insert(v0.c1, v0.c0, vt2.c0), ((vt2.c0)-('98818379')), CAST(v0.c3 AS REAL), (NOT (-5.51752042E8)))) AND ((((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)))AND(v0.c3)), ((((((((((v0.c3)AND(v0.c0)))OR(v0.c0)))OR('1165436722')))AND(vt2.c0)))OR(v0.c0)), (~ (vt0.c0)), x'', ((v0.c2) BETWEEN (v0.c0) AND (vt2.c1)), (- (vt0.c0)))))) ORDER BY ((('1063775764', vt0.c0, NULL)) NOT BETWEEN ((CAST(v0.c0 AS REAL), ((v0.c0) IS TRUE), ((((((v0.c1)AND(v0.c1)))AND(vt2.c1)))OR(v0.c3)))) AND ((((v0.c1) NOT NULL), (((vt0.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c1))), CAST(v0.c1 AS TEXT)))) ASC  NULLS FIRST, LTRIM(COALESCE(v0.c1, v0.c1, v0.c1, -1681448721), 0.5529263540679537) ASC LIMIT 0x1;
SELECT * FROM vt2, v0 CROSS JOIN vt0 ON ((((vt2.c1) BETWEEN (v0.c0) AND (v0.c0)))|((- (vt2.c0)))) WHERE ('');
SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON ((((vt2.c1) BETWEEN (v0.c0) AND (v0.c0)))|((- (vt2.c0)))) WHERE ((('')AND(CAST(((vt2.c0)IS(vt2.c1)) AS NUMERIC)))) LIMIT 0;
SELECT * FROM vt2, v0 CROSS JOIN vt0 ON ((((vt2.c1) BETWEEN (v0.c0) AND (v0.c0)))|((- (vt2.c0)))) WHERE ('');
SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON ((((vt2.c1) BETWEEN (v0.c0) AND (v0.c0)))|((- (vt2.c0)))) WHERE ((('')AND(CAST(((vt2.c0)IS(vt2.c1)) AS NUMERIC)))) LIMIT 0;
SELECT ALL * FROM vt2 WHERE ((json_array_length(vt2.c1) IN (vt2.c0 COLLATE RTRIM))) ORDER BY ((((vt2.c0) ISNULL))%((((vt2.c0, 0.008748462345323116))=((vt2.c1, vt2.c1))))) ASC  NULLS LAST, 0.2768633112218709  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((json_array_length(vt2.c1) IN (vt2.c0 COLLATE RTRIM))) ORDER BY ((((vt2.c0) ISNULL))%((((vt2.c0, 0.008748462345323116))==((vt2.c1, vt2.c1))))) ASC  NULLS LAST, 0.2768633112218709  NULLS FIRST INTERSECT SELECT * FROM vt2 WHERE (((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1))) ISNULL)) ORDER BY ((((vt2.c0) ISNULL))%((((vt2.c0, 0.008748462345323116))=((vt2.c1, vt2.c1))))) ASC  NULLS LAST, 0.2768633112218709  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((json_array_length(vt2.c1) IN (vt2.c0 COLLATE RTRIM))) ORDER BY ((((vt2.c0) ISNULL))%((((vt2.c0, 0.008748462345323116))=((vt2.c1, vt2.c1))))) ASC  NULLS LAST, 0.2768633112218709  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM v0, vt0 WHERE (CASE WHEN '-682712396' THEN CASE WHEN vt0.c0 THEN v0.c0 ELSE v0.c0 END WHEN ((v0.c2) IS TRUE) THEN (((v0.c1, v0.c0, v0.c3)) BETWEEN ((v0.c1, v0.c0, vt0.c0)) AND ((v0.c0, v0.c2, v0.c0))) ELSE vt0.c0 END) ORDER BY CASE WHEN 'R.' THEN (((v0.c2, v0.c2)) NOT BETWEEN ((v0.c3, v0.c0)) AND ((x'dfe1', vt0.c0))) ELSE (((v0.c3, 0Xf15d9a2))==((vt0.c0, v0.c2))) END  NULLS FIRST;
SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE (CASE WHEN '-682712396' THEN CASE WHEN vt0.c0 THEN v0.c0 ELSE v0.c0 END WHEN ((v0.c2) IS TRUE) THEN (((v0.c1, v0.c0, v0.c3)) BETWEEN ((v0.c1, v0.c0, vt0.c0)) AND ((v0.c0, v0.c2, v0.c0))) ELSE vt0.c0 END) ORDER BY ((((v0.c2)OR((+ (v0.c2)))))OR(v0.c0)) ASC  NULLS LAST, SQLITE_COMPILEOPTION_USED(((v0.c2)LIKE(v0.c0))) LIMIT 0X2 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE (CAST(((v0.c0)-(v0.c0)) AS TEXT)) ORDER BY ((((v0.c2)OR((+ (v0.c2)))))OR(v0.c0)) ASC  NULLS LAST, SQLITE_COMPILEOPTION_USED(((v0.c2)LIKE(v0.c0))) LIMIT 0X2;
SELECT * FROM v0, vt0, vt2 WHERE ((((NOT (v0.c2)))=(((v0.c2) NOT NULL)))) ORDER BY CASE WHEN TYPEOF(DISTINCT v0.c2) THEN (((v0.c1, vt2.c0, v0.c0))>((0xfffffffff6a0b416, vt2.c1, v0.c1))) WHEN ((vt2.c0) ISNULL) THEN vt2.c1 COLLATE BINARY ELSE (('#i-R綟J\%') NOTNULL) END ASC  NULLS FIRST, ((+ (v0.c3)) IN (((vt2.c1) NOTNULL)))  NULLS FIRST, ((((vt2.c0) ISNULL)) BETWEEN (((v0.c0) IS FALSE)) AND ((NOT (0.6695073727075488)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((NOT (v0.c2)))==(((v0.c2) NOT NULL))))AND(((vt2.c0 COLLATE RTRIM) NOT NULL)))) ORDER BY CASE WHEN TYPEOF(DISTINCT v0.c2) THEN (((v0.c1, vt2.c0, v0.c0))>((0xfffffffff6a0b416, vt2.c1, v0.c1))) WHEN ((vt2.c0) ISNULL) THEN vt2.c1 COLLATE BINARY ELSE (('#i-R綟J\%') NOTNULL) END ASC  NULLS FIRST, ((+ (v0.c3)) IN (((vt2.c1) NOTNULL)))  NULLS FIRST, ((((vt2.c0) ISNULL)) BETWEEN (((v0.c0) IS FALSE)) AND ((NOT (0.6695073727075488)))) ASC  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE ((((NOT (v0.c2)))=(((v0.c2) NOT NULL)))) ORDER BY CASE WHEN TYPEOF(DISTINCT v0.c2) THEN (((v0.c1, vt2.c0, v0.c0))>((0xfffffffff6a0b416, vt2.c1, v0.c1))) WHEN ((vt2.c0) ISNULL) THEN vt2.c1 COLLATE BINARY ELSE (('#i-R綟J\%') NOTNULL) END ASC  NULLS FIRST, ((+ (v0.c3)) IN (((vt2.c1) NOTNULL)))  NULLS FIRST, ((((vt2.c0) ISNULL)) BETWEEN (((v0.c0) IS FALSE)) AND ((NOT (0.6695073727075488)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((NOT (v0.c2)))==(((v0.c2) NOT NULL))))AND(((vt2.c0 COLLATE RTRIM) NOT NULL)))) ORDER BY CASE WHEN TYPEOF(DISTINCT v0.c2) THEN (((v0.c1, vt2.c0, v0.c0))>((0xfffffffff6a0b416, vt2.c1, v0.c1))) WHEN ((vt2.c0) ISNULL) THEN vt2.c1 COLLATE BINARY ELSE (('#i-R綟J\%') NOTNULL) END ASC  NULLS FIRST, ((+ (v0.c3)) IN (((vt2.c1) NOTNULL)))  NULLS FIRST, ((((vt2.c0) ISNULL)) BETWEEN (((v0.c0) IS FALSE)) AND ((NOT (0.6695073727075488)))) ASC  NULLS LAST;
SELECT * FROM v0, vt2 WHERE (((((((v0.c2)>=(v0.c0)))OR(((vt2.c1)IS NOT(vt2.c1)))))AND(((((v0.c2)AND(v0.c1)))OR(v0.c1))))) ORDER BY (NOT (v0.c1 COLLATE NOCASE)) ASC  NULLS LAST, ((((((vt2.c1)GLOB(v0.c1)))AND(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0)<<(v0.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 WHERE (((((((v0.c2)>(v0.c0)))OR(((vt2.c1)IS NOT(vt2.c1)))))AND(((((v0.c2)AND(v0.c1)))OR(v0.c1))))) ORDER BY (NOT (v0.c1 COLLATE NOCASE)) ASC  NULLS LAST, ((((((vt2.c1)GLOB(v0.c1)))AND(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0)<<(v0.c1)))) ASC  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE (((((((v0.c2)>=(v0.c0)))OR(((vt2.c1)IS NOT(vt2.c1)))))AND(((((v0.c2)AND(v0.c1)))OR(v0.c1))))) ORDER BY (NOT (v0.c1 COLLATE NOCASE)) ASC  NULLS LAST, ((((((vt2.c1)GLOB(v0.c1)))AND(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0)<<(v0.c1)))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 WHERE (((((((v0.c2)>(v0.c0)))OR(((vt2.c1)IS NOT(vt2.c1)))))AND(((((v0.c2)AND(v0.c1)))OR(v0.c1))))) ORDER BY (NOT (v0.c1 COLLATE NOCASE)) ASC  NULLS LAST, ((((((vt2.c1)GLOB(v0.c1)))AND(vt2.c0 COLLATE RTRIM)))AND(((vt2.c0)<<(v0.c1)))) ASC  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN 'dw6fW' THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END) NOT BETWEEN (vt2.c1) AND (((vt2.c1) NOT NULL)))) ORDER BY v0.c3 ASC;
SELECT DISTINCT * FROM v0, vt2 WHERE (((((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN 'dw6fW' THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END) NOT BETWEEN (vt2.c1) AND (((vt2.c1) NOT NULL))))AND(((CAST(v0.c1 AS BLOB)) IS TRUE)))) ORDER BY v0.c3 ASC INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (x'266d') ORDER BY v0.c3 ASC;
SELECT * FROM v0, vt2 WHERE (((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN 'dw6fW' THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END) NOT BETWEEN (vt2.c1) AND (((vt2.c1) NOT NULL)))) ORDER BY v0.c3 ASC;
SELECT DISTINCT * FROM v0, vt2 WHERE (((((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 WHEN 'dw6fW' THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END) NOT BETWEEN (vt2.c1) AND (((vt2.c1) NOT NULL))))AND(((CAST(v0.c1 AS BLOB)) IS TRUE)))) ORDER BY v0.c3 ASC INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (x'266d') ORDER BY v0.c3 ASC;
SELECT ALL * FROM v0, vt0 WHERE (CAST(((v0.c2) ISNULL) AS INTEGER)) ORDER BY json_array(((v0.c1)LIKE(v0.c0)), NULL), ((CASE v0.c2  WHEN v0.c2 THEN '?9o' ELSE v0.c1 END) IS FALSE) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (CAST(((v0.c2) ISNULL) AS INTEGER)) ORDER BY json_array(((v0.c1)LIKE(v0.c0)), NULL), ((CASE v0.c2  WHEN v0.c2 THEN '?9o' ELSE v0.c1 END) IS FALSE) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM v0, vt0 WHERE (((v0.c1) ISNULL) COLLATE BINARY) ORDER BY json_array(((v0.c1)LIKE(v0.c0)), NULL), ((CASE v0.c2  WHEN v0.c2 THEN '?9o' ELSE v0.c1 END) IS FALSE) DESC  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0, vt0 WHERE (CAST(((v0.c2) ISNULL) AS INTEGER)) ORDER BY json_array(((v0.c1)LIKE(v0.c0)), NULL), ((CASE v0.c2  WHEN v0.c2 THEN '?9o' ELSE v0.c1 END) IS FALSE) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt0 WHERE (CAST(((v0.c2) ISNULL) AS INTEGER)) ORDER BY json_array(((v0.c1)LIKE(v0.c0)), NULL), ((CASE v0.c2  WHEN v0.c2 THEN '?9o' ELSE v0.c1 END) IS FALSE) DESC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM v0, vt0 WHERE (((v0.c1) ISNULL) COLLATE BINARY) ORDER BY json_array(((v0.c1)LIKE(v0.c0)), NULL), ((CASE v0.c2  WHEN v0.c2 THEN '?9o' ELSE v0.c1 END) IS FALSE) DESC  NULLS FIRST LIMIT 1;
SELECT * FROM v0 WHERE (((((0.32507575700869895)-(v0.c2))) IS FALSE)) ORDER BY CASE 0.7105953835895759  WHEN ((v0.c3)AND(v0.c1)) THEN v0.c1 COLLATE NOCASE WHEN ((v0.c3) IS TRUE) THEN ((v0.c2) BETWEEN (v0.c2) AND (x'06')) WHEN (v0.c3 IN ()) THEN NULL WHEN CASE WHEN v0.c1 THEN v0.c3 END THEN (+ (v0.c3)) END DESC  NULLS LAST, CASE WHEN x'84' THEN (NOT (v0.c2)) WHEN v0.c2 THEN ((((((((((v0.c3)AND(v0.c3)))OR(v0.c3)))OR(v0.c2)))AND(v0.c2)))OR(v0.c0)) WHEN ']c~' THEN (((v0.c0))>((v0.c0))) ELSE x'' END;
SELECT ALL * FROM v0 WHERE (((((0.32507575700869895)-(v0.c2))) IS FALSE)) ORDER BY CASE 0.7105953835895759  WHEN ((v0.c3)AND(v0.c1)) THEN v0.c1 COLLATE NOCASE WHEN ((v0.c3) IS TRUE) THEN ((v0.c2) BETWEEN (v0.c2) AND (x'06')) WHEN (v0.c3 IN ()) THEN NULL WHEN CASE WHEN v0.c1 THEN v0.c3 END THEN (+ (v0.c3)) END DESC  NULLS LAST, CASE WHEN x'84' THEN (NOT (v0.c2)) WHEN v0.c2 THEN ((((((((((v0.c3)AND(v0.c3)))OR(v0.c3)))OR(v0.c2)))AND(v0.c2)))OR(v0.c0)) WHEN ']c~' THEN (((v0.c0))>((v0.c0))) ELSE x'' END LIMIT 0x1;
SELECT * FROM v0 WHERE (((((0.32507575700869895)-(v0.c2))) IS FALSE)) ORDER BY CASE 0.7105953835895759  WHEN ((v0.c3)AND(v0.c1)) THEN v0.c1 COLLATE NOCASE WHEN ((v0.c3) IS TRUE) THEN ((v0.c2) BETWEEN (v0.c2) AND (x'06')) WHEN (v0.c3 IN ()) THEN NULL WHEN CASE WHEN v0.c1 THEN v0.c3 END THEN (+ (v0.c3)) END DESC  NULLS LAST, CASE WHEN x'84' THEN (NOT (v0.c2)) WHEN v0.c2 THEN ((((((((((v0.c3)AND(v0.c3)))OR(v0.c3)))OR(v0.c2)))AND(v0.c2)))OR(v0.c0)) WHEN ']c~' THEN (((v0.c0))>((v0.c0))) ELSE x'' END;
SELECT ALL * FROM v0 WHERE (((((0.32507575700869895)-(v0.c2))) IS FALSE)) ORDER BY CASE 0.7105953835895759  WHEN ((v0.c3)AND(v0.c1)) THEN v0.c1 COLLATE NOCASE WHEN ((v0.c3) IS TRUE) THEN ((v0.c2) BETWEEN (v0.c2) AND (x'06')) WHEN (v0.c3 IN ()) THEN NULL WHEN CASE WHEN v0.c1 THEN v0.c3 END THEN (+ (v0.c3)) END DESC  NULLS LAST, CASE WHEN x'84' THEN (NOT (v0.c2)) WHEN v0.c2 THEN ((((((((((v0.c3)AND(v0.c3)))OR(v0.c3)))OR(v0.c2)))AND(v0.c2)))OR(v0.c0)) WHEN ']c~' THEN (((v0.c0))>((v0.c0))) ELSE x'' END LIMIT 0x1;
SELECT * FROM vt2 CROSS JOIN vt0 ON (~ (((v0.c0) NOT NULL))) NATURAL JOIN v0 WHERE ((NULL IN ())) ORDER BY COALESCE(DISTINCT ((vt2.c1)|(vt2.c0)), (~ (v0.c3))) ASC, (((((((((((((vt2.c1, v0.c2))>=((v0.c3, v0.c1))))OR(((((((((NULL)AND(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(v0.c3)))))OR((((v0.c3))=((v0.c2))))))OR(v0.c0 COLLATE NOCASE)))AND(v0.c1 COLLATE BINARY)))AND(((vt0.c0) ISNULL))) ASC;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (~ (((v0.c0) NOT NULL))) NATURAL JOIN v0 WHERE ((((NULL IN ()))AND((((((((((((((vt2.c0, v0.c3)) NOT BETWEEN ((v0.c1, v0.c3)) AND ((v0.c1, NULL))))OR(STRFTIME(v0.c3, v0.c1, vt0.c0, v0.c3))))OR(CAST(v0.c3 AS TEXT))))AND(CAST(vt2.c0 AS TEXT))))OR(((v0.c0) NOT BETWEEN (0.409014818745731) AND (v0.c0)))))OR(CAST(vt2.c1 AS BLOB)))))) ORDER BY COALESCE(DISTINCT ((vt2.c1)|(vt2.c0)), (~ (v0.c3))) ASC, (((((((((((((vt2.c1, v0.c2))>=((v0.c3, v0.c1))))OR(((((((((NULL)AND(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(v0.c3)))))OR((((v0.c3))==((v0.c2))))))OR(v0.c0 COLLATE NOCASE)))AND(v0.c1 COLLATE BINARY)))AND(((vt0.c0) ISNULL))) ASC INTERSECT SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (~ (((v0.c0) NOT NULL))) NATURAL JOIN v0 WHERE (((((((x'84' COLLATE RTRIM)AND(vt2.c1 COLLATE NOCASE)))AND(((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c1)))))AND(CASE WHEN v0.c1 THEN vt2.c0 END))) ORDER BY COALESCE(DISTINCT ((vt2.c1)|(vt2.c0)), (~ (v0.c3))) ASC, (((((((((((((vt2.c1, v0.c2))>=((v0.c3, v0.c1))))OR(((((((((NULL)AND(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(v0.c3)))))OR((((v0.c3))==((v0.c2))))))OR(v0.c0 COLLATE NOCASE)))AND(v0.c1 COLLATE BINARY)))AND(((vt0.c0) ISNULL))) ASC;
SELECT * FROM vt2 CROSS JOIN vt0 ON (~ (((v0.c0) NOT NULL))) NATURAL JOIN v0 WHERE ((NULL IN ())) ORDER BY COALESCE(DISTINCT ((vt2.c1)|(vt2.c0)), (~ (v0.c3))) ASC, (((((((((((((vt2.c1, v0.c2))>=((v0.c3, v0.c1))))OR(((((((((NULL)AND(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(v0.c3)))))OR((((v0.c3))=((v0.c2))))))OR(v0.c0 COLLATE NOCASE)))AND(v0.c1 COLLATE BINARY)))AND(((vt0.c0) ISNULL))) ASC;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (~ (((v0.c0) NOT NULL))) NATURAL JOIN v0 WHERE ((((NULL IN ()))AND((((((((((((((vt2.c0, v0.c3)) NOT BETWEEN ((v0.c1, v0.c3)) AND ((v0.c1, NULL))))OR(STRFTIME(v0.c3, v0.c1, vt0.c0, v0.c3))))OR(CAST(v0.c3 AS TEXT))))AND(CAST(vt2.c0 AS TEXT))))OR(((v0.c0) NOT BETWEEN (0.409014818745731) AND (v0.c0)))))OR(CAST(vt2.c1 AS BLOB)))))) ORDER BY COALESCE(DISTINCT ((vt2.c1)|(vt2.c0)), (~ (v0.c3))) ASC, (((((((((((((vt2.c1, v0.c2))>=((v0.c3, v0.c1))))OR(((((((((NULL)AND(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(v0.c3)))))OR((((v0.c3))==((v0.c2))))))OR(v0.c0 COLLATE NOCASE)))AND(v0.c1 COLLATE BINARY)))AND(((vt0.c0) ISNULL))) ASC INTERSECT SELECT ALL * FROM vt2 CROSS JOIN vt0 ON (~ (((v0.c0) NOT NULL))) NATURAL JOIN v0 WHERE (((((((x'84' COLLATE RTRIM)AND(vt2.c1 COLLATE NOCASE)))AND(((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c1)))))AND(CASE WHEN v0.c1 THEN vt2.c0 END))) ORDER BY COALESCE(DISTINCT ((vt2.c1)|(vt2.c0)), (~ (v0.c3))) ASC, (((((((((((((vt2.c1, v0.c2))>=((v0.c3, v0.c1))))OR(((((((((NULL)AND(vt0.c0)))AND(vt0.c0)))OR(v0.c2)))OR(v0.c3)))))OR((((v0.c3))==((v0.c2))))))OR(v0.c0 COLLATE NOCASE)))AND(v0.c1 COLLATE BINARY)))AND(((vt0.c0) ISNULL))) ASC;
SELECT MAX(vt2.c1) FROM v0, vt2 WHERE (-1.4783726E9) ORDER BY ((((((((vt2.c0)<=(vt2.c1)))OR(TRIM(DISTINCT v0.c2))))OR(((vt2.c1) BETWEEN (v0.c1) AND (v0.c3)))))AND(((((((((v0.c3)OR(v0.c0)))OR('-1417774340')))OR(v0.c3)))AND(v0.c1)))) ASC  NULLS FIRST, ((((((((v0.c3)||(v0.c2)))OR(vt2.c1 COLLATE BINARY)))AND(((v0.c1)IS NOT(vt2.c0)))))AND((((vt2.c0, v0.c2, vt2.c0))>((v0.c1, v0.c1, v0.c0))))) ASC;
SELECT DISTINCT MAX(vt2.c1) FROM v0 NOT INDEXED, vt2 WHERE (((-1.4783726E9)AND(vt2.c0))) ORDER BY ((((((((vt2.c0)<=(vt2.c1)))OR(TRIM(DISTINCT v0.c2))))OR(((vt2.c1) BETWEEN (v0.c1) AND (v0.c3)))))AND(((((((((v0.c3)OR(v0.c0)))OR('-1417774340')))OR(v0.c3)))AND(v0.c1)))) ASC  NULLS FIRST, ((((((((v0.c3)||(v0.c2)))OR(vt2.c1 COLLATE BINARY)))AND(((v0.c1)IS NOT(vt2.c0)))))AND((((vt2.c0, v0.c2, vt2.c0))>((v0.c1, v0.c1, v0.c0))))) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM v0, vt2 NOT INDEXED WHERE ((((v0.c3 IN (v0.c2))) IS FALSE)) ORDER BY ((((((((vt2.c0)<=(vt2.c1)))OR(TRIM(DISTINCT v0.c2))))OR(((vt2.c1) BETWEEN (v0.c1) AND (v0.c3)))))AND(((((((((v0.c3)OR(v0.c0)))OR('-1417774340')))OR(v0.c3)))AND(v0.c1)))) ASC  NULLS FIRST, ((((((((v0.c3)||(v0.c2)))OR(vt2.c1 COLLATE BINARY)))AND(((v0.c1)IS NOT(vt2.c0)))))AND((((vt2.c0, v0.c2, vt2.c0))>((v0.c1, v0.c1, v0.c0))))) ASC LIMIT 0;
SELECT COUNT(*) FROM v0 WHERE (((((((((((((((((((v0.c0)OR(v0.c3)))OR(v0.c0)))AND(0.20000660300611495)))OR(v0.c3)))OR((0.430431489658224 IN ()))))OR(((((v0.c0)AND(v0.c2)))OR(v0.c0)))))OR(((v0.c1)*(v0.c3)))))AND(v0.c3 COLLATE RTRIM)))AND(((((((((((0.7435718392262334)OR(v0.c1)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c1))))) ORDER BY LTRIM(((((((((v0.c2)OR(v0.c0)))AND(v0.c2)))OR(v0.c0)))OR(v0.c3)), (((v0.c2)) BETWEEN ((v0.c1)) AND ((v0.c0))))  NULLS FIRST, CASE ((v0.c3) NOT NULL)  WHEN ((((v0.c3)AND(v0.c2)))OR(v0.c2)) THEN ((v0.c2)>=(0.46294786760602924)) WHEN CASE v0.c2  WHEN v0.c3 THEN v0.c3 ELSE v0.c3 END THEN v0.c0 WHEN ((v0.c3)>=(v0.c3)) THEN v0.c3 WHEN ((v0.c2) NOT NULL) THEN (+ (v0.c3)) END ASC  NULLS LAST, ((((((v0.c2)AND(v0.c0)))AND(v0.c2)))OR(v0.c0)) COLLATE RTRIM COLLATE RTRIM  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 WHERE (((((((((((((((((((((v0.c0)OR(v0.c3)))OR(v0.c0)))AND(0.20000660300611495)))OR(v0.c3)))OR((0.430431489658224 IN ()))))OR(((((v0.c0)AND(v0.c2)))OR(v0.c0)))))OR(((v0.c1)*(v0.c3)))))AND(v0.c3 COLLATE RTRIM)))AND(((((((((((0.7435718392262334)OR(v0.c1)))OR(v0.c0)))AND(v0.c0)))AND(v0.c1)))OR(v0.c1)))))AND((((((+ (v0.c3)))AND(NULL)))OR(v0.c3))))) ORDER BY LTRIM(((((((((v0.c2)OR(v0.c0)))AND(v0.c2)))OR(v0.c0)))OR(v0.c3)), (((v0.c2)) BETWEEN ((v0.c1)) AND ((v0.c0))))  NULLS FIRST, CASE ((v0.c3) NOT NULL)  WHEN ((((v0.c3)AND(v0.c2)))OR(v0.c2)) THEN ((v0.c2)>=(0.46294786760602924)) WHEN CASE v0.c2  WHEN v0.c3 THEN v0.c3 ELSE v0.c3 END THEN v0.c0 WHEN ((v0.c3)>=(v0.c3)) THEN v0.c3 WHEN ((v0.c2) NOT NULL) THEN (+ (v0.c3)) END ASC  NULLS LAST, ((((((v0.c2)AND(v0.c0)))AND(v0.c2)))OR(v0.c0)) COLLATE RTRIM COLLATE RTRIM  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((vt0.c0)/((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, NULL, NULL)) AND ((vt0.c0, vt0.c0, vt0.c0))))));
SELECT ALL * FROM vt0 WHERE (((vt0.c0)/((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, NULL, NULL)) AND ((vt0.c0, vt0.c0, vt0.c0)))))) LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (MIN(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), GLOB(vt0.c0, vt0.c0))) LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (((vt0.c0)/((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, NULL, NULL)) AND ((vt0.c0, vt0.c0, vt0.c0))))));
SELECT ALL * FROM vt0 WHERE (((vt0.c0)/((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, NULL, NULL)) AND ((vt0.c0, vt0.c0, vt0.c0)))))) LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (MIN(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), GLOB(vt0.c0, vt0.c0))) LIMIT 0X0;
SELECT * FROM vt2, v0 WHERE ((((vt2.c0, ((v0.c2) BETWEEN (v0.c1) AND (v0.c2)), ((((NULL)AND(NULL)))AND(v0.c2))))<=((((((((((v0.c0)OR(vt2.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c2)), ((v0.c0) IS FALSE), CASE v0.c1  WHEN 0.16888963122711964 THEN v0.c0 WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 END))));
SELECT * FROM vt2, v0 WHERE ((((((vt2.c0, ((v0.c2) BETWEEN (v0.c1) AND (v0.c2)), ((((NULL)AND(NULL)))AND(v0.c2))))=((((((((((v0.c0)OR(vt2.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c2)), ((v0.c0) IS FALSE), CASE v0.c1  WHEN 0.16888963122711964 THEN v0.c0 WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 END))))AND((((((v0.c1, v0.c0, v0.c0)) BETWEEN ((vt2.c1, vt2.c1, vt2.c0)) AND ((v0.c2, v0.c0, v0.c3))))<((- (v0.c0))))))) ORDER BY ((((((vt2.c1)<>(v0.c1)))OR(((v0.c1)AND('655103376')))))OR(QUOTE(v0.c0))), ((CAST(vt2.c1 AS TEXT))<=(v0.c3)) ASC, v0.c1 DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt2, v0 WHERE (((((CASE vt2.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 END)AND(CAST(v0.c1 AS TEXT))))OR(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN x'' WHEN vt2.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END))) ORDER BY ((((((vt2.c1)<>(v0.c1)))OR(((v0.c1)AND('655103376')))))OR(QUOTE(v0.c0))), ((CAST(vt2.c1 AS TEXT))<=(v0.c3)) ASC, v0.c1 DESC  NULLS FIRST;
SELECT * FROM vt2, v0 WHERE ((((vt2.c0, ((v0.c2) BETWEEN (v0.c1) AND (v0.c2)), ((((NULL)AND(NULL)))AND(v0.c2))))<=((((((((((v0.c0)OR(vt2.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c2)), ((v0.c0) IS FALSE), CASE v0.c1  WHEN 0.16888963122711964 THEN v0.c0 WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 END))));
SELECT * FROM vt2, v0 WHERE ((((((vt2.c0, ((v0.c2) BETWEEN (v0.c1) AND (v0.c2)), ((((NULL)AND(NULL)))AND(v0.c2))))=((((((((((v0.c0)OR(vt2.c0)))AND(v0.c1)))OR(v0.c1)))AND(v0.c2)), ((v0.c0) IS FALSE), CASE v0.c1  WHEN 0.16888963122711964 THEN v0.c0 WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 END))))AND((((((v0.c1, v0.c0, v0.c0)) BETWEEN ((vt2.c1, vt2.c1, vt2.c0)) AND ((v0.c2, v0.c0, v0.c3))))<((- (v0.c0))))))) ORDER BY ((((((vt2.c1)<>(v0.c1)))OR(((v0.c1)AND('655103376')))))OR(QUOTE(v0.c0))), ((CAST(vt2.c1 AS TEXT))<=(v0.c3)) ASC, v0.c1 DESC  NULLS FIRST INTERSECT SELECT ALL * FROM vt2, v0 WHERE (((((CASE vt2.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 END)AND(CAST(v0.c1 AS TEXT))))OR(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN x'' WHEN vt2.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END))) ORDER BY ((((((vt2.c1)<>(v0.c1)))OR(((v0.c1)AND('655103376')))))OR(QUOTE(v0.c0))), ((CAST(vt2.c1 AS TEXT))<=(v0.c3)) ASC, v0.c1 DESC  NULLS FIRST;
SELECT * FROM vt0, vt2, v0 WHERE (TRIM(((v0.c1)IS NOT(vt2.c0))));
SELECT DISTINCT * FROM vt0, vt2, v0 NOT INDEXED WHERE (TRIM(((v0.c1)IS NOT(vt2.c0)))) ORDER BY (((((vt2.c1, v0.c1, vt0.c0))<>((vt2.c1, '-1026104804', v0.c1))))IS NOT(COALESCE(v0.c0, v0.c2))) DESC  NULLS FIRST, v0.c0 COLLATE BINARY COLLATE BINARY COLLATE BINARY  NULLS LAST, CASE ((vt2.c1) IS FALSE)  WHEN ((vt2.c1)IS NOT(v0.c2)) THEN HEX(v0.c3) ELSE (v0.c1 IN (v0.c1)) END  NULLS LAST, (((('-1322690000')OR(vt2.c1)))OR(CAST(v0.c2 AS REAL))) DESC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((v0.c1, 7.08305761E8)) BETWEEN ((((vt0.c0) NOT NULL), (NOT (v0.c3)))) AND ((CASE WHEN v0.c1 THEN vt2.c1 WHEN vt0.c0 THEN v0.c0 WHEN vt2.c1 THEN v0.c3 END, v0.c3 COLLATE NOCASE)))) ORDER BY (((((vt2.c1, v0.c1, vt0.c0))<>((vt2.c1, '-1026104804', v0.c1))))IS NOT(COALESCE(v0.c0, v0.c2))) DESC  NULLS FIRST, v0.c0 COLLATE BINARY COLLATE BINARY COLLATE BINARY  NULLS LAST, CASE ((vt2.c1) IS FALSE)  WHEN ((vt2.c1)IS NOT(v0.c2)) THEN HEX(v0.c3) ELSE (v0.c1 IN (v0.c1)) END  NULLS LAST, (((('-1322690000')OR(vt2.c1)))OR(CAST(v0.c2 AS REAL))) DESC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt0, vt2, v0 WHERE (TRIM(((v0.c1)IS NOT(vt2.c0))));
SELECT DISTINCT * FROM vt0, vt2, v0 NOT INDEXED WHERE (TRIM(((v0.c1)IS NOT(vt2.c0)))) ORDER BY (((((vt2.c1, v0.c1, vt0.c0))<>((vt2.c1, '-1026104804', v0.c1))))IS NOT(COALESCE(v0.c0, v0.c2))) DESC  NULLS FIRST, v0.c0 COLLATE BINARY COLLATE BINARY COLLATE BINARY  NULLS LAST, CASE ((vt2.c1) IS FALSE)  WHEN ((vt2.c1)IS NOT(v0.c2)) THEN HEX(v0.c3) ELSE (v0.c1 IN (v0.c1)) END  NULLS LAST, (((('-1322690000')OR(vt2.c1)))OR(CAST(v0.c2 AS REAL))) DESC  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((v0.c1, 7.08305761E8)) BETWEEN ((((vt0.c0) NOT NULL), (NOT (v0.c3)))) AND ((CASE WHEN v0.c1 THEN vt2.c1 WHEN vt0.c0 THEN v0.c0 WHEN vt2.c1 THEN v0.c3 END, v0.c3 COLLATE NOCASE)))) ORDER BY (((((vt2.c1, v0.c1, vt0.c0))<>((vt2.c1, '-1026104804', v0.c1))))IS NOT(COALESCE(v0.c0, v0.c2))) DESC  NULLS FIRST, v0.c0 COLLATE BINARY COLLATE BINARY COLLATE BINARY  NULLS LAST, CASE ((vt2.c1) IS FALSE)  WHEN ((vt2.c1)IS NOT(v0.c2)) THEN HEX(v0.c3) ELSE (v0.c1 IN (v0.c1)) END  NULLS LAST, (((('-1322690000')OR(vt2.c1)))OR(CAST(v0.c2 AS REAL))) DESC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt0, v0, vt2 WHERE (((v0.c0) NOT BETWEEN (NULL) AND (TRIM(DISTINCT vt2.c0))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((v0.c0) NOT BETWEEN (NULL) AND (TRIM(DISTINCT vt2.c0)))) ORDER BY CASE WHEN (vt0.c0 IN (v0.c1, vt2.c1)) THEN v0.c1 WHEN (((vt0.c0)) BETWEEN (('795331170')) AND ((vt2.c0))) THEN NULL WHEN ((v0.c3)GLOB(v0.c1)) THEN json_quote(vt2.c0) WHEN (+ (x'')) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)) END DESC  NULLS FIRST, (((v0.c3)) BETWEEN ((((vt0.c0) NOT NULL))) AND ((CASE vt2.c1  WHEN v0.c1 THEN v0.c1 ELSE v0.c2 END))), (((v0.c3)<<(vt2.c0)) IN (v0.c3, ((vt2.c0) IS FALSE))) LIMIT 0;
SELECT * FROM vt0, v0, vt2 WHERE (((v0.c0) NOT BETWEEN (NULL) AND (TRIM(DISTINCT vt2.c0))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((v0.c0) NOT BETWEEN (NULL) AND (TRIM(DISTINCT vt2.c0)))) ORDER BY CASE WHEN (vt0.c0 IN (v0.c1, vt2.c1)) THEN v0.c1 WHEN (((vt0.c0)) BETWEEN (('795331170')) AND ((vt2.c0))) THEN NULL WHEN ((v0.c3)GLOB(v0.c1)) THEN json_quote(vt2.c0) WHEN (+ (x'')) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (v0.c0)) END DESC  NULLS FIRST, (((v0.c3)) BETWEEN ((((vt0.c0) NOT NULL))) AND ((CASE vt2.c1  WHEN v0.c1 THEN v0.c1 ELSE v0.c2 END))), (((v0.c3)<<(vt2.c0)) IN (v0.c3, ((vt2.c0) IS FALSE))) LIMIT 0;
SELECT ALL MIN(v0.c2) FROM vt0, v0, vt2 WHERE (((TRIM(DISTINCT '')) BETWEEN (((vt0.c0)|(v0.c2))) AND (CAST(vt2.c1 AS INTEGER)))) ORDER BY vt0.c0  NULLS LAST;
SELECT DISTINCT MIN(v0.c2) FROM vt0, v0, vt2 WHERE (((TRIM(DISTINCT '')) BETWEEN (((vt0.c0)|(v0.c2))) AND (CAST(vt2.c1 AS INTEGER)))) ORDER BY vt0.c0  NULLS LAST LIMIT 0;
SELECT * FROM vt0, vt2 WHERE (((((((((((vt0.c0)OR(vt2.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c1))) NOT BETWEEN (LIKE(vt2.c1, vt2.c1)) AND ((((vt2.c0, vt0.c0, vt2.c0, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) AND ((vt0.c0, vt2.c1, vt2.c0, vt2.c0, vt0.c0)))))) ORDER BY CASE '-zf[<Y'  WHEN ((((((((((vt2.c0)OR(vt2.c1)))OR('5{MPw')))OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)) THEN ((((vt2.c1)AND(vt0.c0)))AND(vt2.c0)) ELSE CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c1 END END;
SELECT ALL * FROM vt0, vt2 WHERE (((((((((((vt0.c0)OR(vt2.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c1))) NOT BETWEEN (LIKE(vt2.c1, vt2.c1)) AND ((((vt2.c0, vt0.c0, vt2.c0, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) AND ((vt0.c0, vt2.c1, vt2.c0, vt2.c0, vt0.c0)))))) ORDER BY (((((vt0.c0, vt2.c1, vt2.c1, vt0.c0)) BETWEEN ((vt2.c1, vt0.c0, vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c1, vt2.c1, vt2.c1))))/(((vt2.c1)IS(vt2.c1)))) DESC, CASE CASE WHEN vt0.c0 THEN NULL WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c0 END  WHEN ((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)) THEN vt2.c0 ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) END DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt0, vt2 WHERE (((((NULL)GLOB(NULL))) NOT BETWEEN (vt2.c0) AND (vt2.c0))) ORDER BY (((((vt0.c0, vt2.c1, vt2.c1, vt0.c0)) BETWEEN ((vt2.c1, vt0.c0, vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c1, vt2.c1, vt2.c1))))/(((vt2.c1)IS(vt2.c1)))) DESC, CASE CASE WHEN vt0.c0 THEN NULL WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c0 END  WHEN ((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)) THEN vt2.c0 ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) END DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0, vt2 WHERE (((((((((((vt0.c0)OR(vt2.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c1))) NOT BETWEEN (LIKE(vt2.c1, vt2.c1)) AND ((((vt2.c0, vt0.c0, vt2.c0, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) AND ((vt0.c0, vt2.c1, vt2.c0, vt2.c0, vt0.c0)))))) ORDER BY CASE '-zf[<Y'  WHEN ((((((((((vt2.c0)OR(vt2.c1)))OR('5{MPw')))OR(vt2.c1)))OR(vt2.c1)))OR(vt2.c0)) THEN ((((vt2.c1)AND(vt0.c0)))AND(vt2.c0)) ELSE CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c1 END END;
SELECT ALL * FROM vt0, vt2 WHERE (((((((((((vt0.c0)OR(vt2.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c1))) NOT BETWEEN (LIKE(vt2.c1, vt2.c1)) AND ((((vt2.c0, vt0.c0, vt2.c0, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) AND ((vt0.c0, vt2.c1, vt2.c0, vt2.c0, vt0.c0)))))) ORDER BY (((((vt0.c0, vt2.c1, vt2.c1, vt0.c0)) BETWEEN ((vt2.c1, vt0.c0, vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c1, vt2.c1, vt2.c1))))/(((vt2.c1)IS(vt2.c1)))) DESC, CASE CASE WHEN vt0.c0 THEN NULL WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c0 END  WHEN ((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)) THEN vt2.c0 ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) END DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT * FROM vt0, vt2 WHERE (((((NULL)GLOB(NULL))) NOT BETWEEN (vt2.c0) AND (vt2.c0))) ORDER BY (((((vt0.c0, vt2.c1, vt2.c1, vt0.c0)) BETWEEN ((vt2.c1, vt0.c0, vt2.c0, vt0.c0)) AND ((vt2.c1, vt2.c1, vt2.c1, vt2.c1))))/(((vt2.c1)IS(vt2.c1)))) DESC, CASE CASE WHEN vt0.c0 THEN NULL WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c0 END  WHEN ((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c1)))AND(vt0.c0)) THEN vt2.c0 ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) END DESC  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE ((+ (((vt2.c0)<(v0.c2)))));
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE ((+ (((vt2.c0)<(v0.c2))))) ORDER BY CAST(ROUND(vt2.c1, v0.c0) AS INTEGER)  NULLS FIRST;
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (((((vt2.c0) ISNULL)) IS TRUE)) ORDER BY CASE vt2.c0 COLLATE RTRIM  WHEN CAST(vt2.c1 AS BLOB) THEN ((vt2.c0)/(vt2.c1)) ELSE vt2.c0 END ASC;
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (((((vt2.c0) ISNULL)) IS TRUE)) ORDER BY CASE vt2.c0 COLLATE RTRIM  WHEN CAST(vt2.c1 AS BLOB) THEN ((vt2.c0)/(vt2.c1)) ELSE vt2.c0 END ASC INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (CAST((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1))) AS NUMERIC)) ORDER BY CASE vt2.c0 COLLATE RTRIM  WHEN CAST(vt2.c1 AS BLOB) THEN ((vt2.c0)/(vt2.c1)) ELSE vt2.c0 END ASC;
SELECT MIN(v0.c2) FROM v0, vt0, vt2 WHERE (((((((vt0.c0) BETWEEN (vt2.c1) AND (v0.c1)))AND((- (v0.c0)))))OR((((v0.c1, vt0.c0))>=((v0.c3, v0.c2))))));
SELECT MIN(v0.c2) FROM v0, vt0, vt2 WHERE (((((((((vt0.c0) BETWEEN (vt2.c1) AND (v0.c1)))AND((- (v0.c0)))))OR((((v0.c1, vt0.c0))>((v0.c3, v0.c2))))))AND(vt2.c1))) ORDER BY ((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 END)>(((((((((((vt0.c0)OR(v0.c2)))AND(vt0.c0)))OR(v0.c0)))OR(v0.c0)))AND(vt2.c0)))) ASC  NULLS LAST, (+ ((vt0.c0 IN (v0.c2)))) LIMIT 0x0 INTERSECT SELECT MIN(v0.c2) FROM v0, vt0, vt2 WHERE ((- (vt2.c1 COLLATE BINARY))) ORDER BY ((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 END)>(((((((((((vt0.c0)OR(v0.c2)))AND(vt0.c0)))OR(v0.c0)))OR(v0.c0)))AND(vt2.c0)))) ASC  NULLS LAST, (+ ((vt0.c0 IN (v0.c2)))) LIMIT 0;
SELECT * FROM vt0 WHERE (((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))>>(vt0.c0 COLLATE NOCASE)));
SELECT * FROM vt0 WHERE (((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))>>(vt0.c0 COLLATE NOCASE)))AND((- (((vt0.c0)>('0.4284493645082942'))))))) ORDER BY ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))>>(vt0.c0 COLLATE NOCASE)));
SELECT * FROM vt0 WHERE (((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))>>(vt0.c0 COLLATE NOCASE)))AND((- (((vt0.c0)>('0.4284493645082942'))))))) ORDER BY ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY  NULLS FIRST;
SELECT ALL MAX(v0.c2) FROM v0 WHERE (UPPER(DISTINCT ((((((v0.c0)OR(v0.c0)))AND(v0.c0)))OR(v0.c3))));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((UPPER(DISTINCT ((((((v0.c0)OR(v0.c0)))AND(v0.c0)))OR(v0.c3))))AND(x'c284'))) LIMIT 3 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE (((((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3))) NOTNULL)) LIMIT 3;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (CASE WHEN (vt0.c0 IN (vt0.c0)) THEN vt0.c0 WHEN '0.7100278653416723' THEN vt0.c0 COLLATE BINARY WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN ((NULL) NOT BETWEEN (x'') AND (x'')) THEN vt0.c0 COLLATE BINARY END) ORDER BY ((vt0.c0)|(vt0.c0)) COLLATE NOCASE DESC  NULLS LAST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((CASE WHEN (vt0.c0 IN (vt0.c0)) THEN vt0.c0 WHEN '0.7100278653416723' THEN vt0.c0 COLLATE BINARY WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN ((NULL) NOT BETWEEN (x'') AND (x'')) THEN vt0.c0 COLLATE BINARY END)AND(x''))) ORDER BY (((((vt0.c0, NULL))<=((vt0.c0, vt0.c0))))!=(((vt0.c0)+(vt0.c0)))), NULL INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (vt0.c0) ORDER BY (((((vt0.c0, NULL))<=((vt0.c0, vt0.c0))))!=(((vt0.c0)+(vt0.c0)))), NULL;
SELECT MIN(v0.c0) FROM vt0, v0, vt2 WHERE ((((~ (v0.c3)))&(NULLIF(v0.c3, vt0.c0))));
SELECT ALL MIN(v0.c0) FROM vt0, v0, vt2 WHERE ((((((~ (v0.c3)))&(NULLIF(v0.c3, vt0.c0))))AND(((('FcR', vt2.c0, vt2.c0, v0.c3)) NOT BETWEEN ((((((((vt2.c0)AND(v0.c2)))OR(x'')))OR(v0.c3)), ((((0.24306223377854386)OR(v0.c0)))OR(v0.c0)), CAST(v0.c1 AS BLOB), ((((((vt2.c0)AND(v0.c2)))OR(v0.c3)))AND(v0.c0)))) AND ((((((((vt0.c0)OR(v0.c1)))AND(v0.c3)))AND(0.5948304952020104)), ((((v0.c3)AND(v0.c3)))AND(v0.c2)), v0.c3, CAST(v0.c3 AS REAL)))))));
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (((((((((((((('gRvt8JXl'))<>((vt2.c1))))AND(GLOB(NULL, vt2.c1))))AND(((((((NULL)AND(x'')))AND('}')))AND(0.9025381487157186)))))OR(((((v0.c1)AND(v0.c3)))OR(v0.c1)))))OR((v0.c2 IN ()))))OR(vt2.c1 COLLATE BINARY))) ORDER BY v0.c1 ASC  NULLS LAST;
SELECT COUNT(*) FROM vt0, vt2, v0 NOT INDEXED WHERE (((((((((((((('gRvt8JXl'))>((vt2.c1))))AND(GLOB(NULL, vt2.c1))))AND(((((((NULL)AND(x'')))AND('}')))AND(0.9025381487157186)))))OR(((((v0.c1)AND(v0.c3)))OR(v0.c1)))))OR((v0.c2 IN ()))))OR(vt2.c1 COLLATE BINARY))) ORDER BY v0.c1 ASC  NULLS LAST LIMIT 4;
SELECT * FROM v0, vt2, vt0 WHERE ((((((vt2.c0, v0.c1))<((v0.c3, v0.c0)))) NOT NULL));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((((((vt2.c0, v0.c1))<((v0.c3, v0.c0)))) NOT NULL))AND((((v0.c0))>=((CASE WHEN vt2.c1 THEN v0.c0 WHEN vt0.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c1 WHEN vt0.c0 THEN v0.c0 END)))))) INTERSECT SELECT * FROM v0, vt2, vt0 WHERE (LIKELIHOOD(v0.c0 COLLATE BINARY, CAST(v0.c0 AS NUMERIC)));
SELECT * FROM v0, vt2, vt0 WHERE ((((((vt2.c0, v0.c1))<((v0.c3, v0.c0)))) NOT NULL));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((((((vt2.c0, v0.c1))<((v0.c3, v0.c0)))) NOT NULL))AND((((v0.c0))>=((CASE WHEN vt2.c1 THEN v0.c0 WHEN vt0.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c1 WHEN vt0.c0 THEN v0.c0 END)))))) INTERSECT SELECT * FROM v0, vt2, vt0 WHERE (LIKELIHOOD(v0.c0 COLLATE BINARY, CAST(v0.c0 AS NUMERIC)));
SELECT * FROM vt2, vt0 NOT INDEXED WHERE ((((((('n}') BETWEEN (vt0.c0) AND (vt2.c0)))OR(((vt2.c0) IS TRUE))))AND(((vt2.c1)>(vt2.c1)))));
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((((((('n}') BETWEEN (vt0.c0) AND (vt2.c0)))OR(((vt2.c0) IS TRUE))))AND(((vt2.c1)>(vt2.c1)))))AND(((((((((vt0.c0)AND(vt0.c0)))AND(vt2.c0)))OR(vt2.c1))) BETWEEN (vt2.c0 COLLATE BINARY) AND (x'ddc6'))))) ORDER BY ((((((((vt2.c1) NOT BETWEEN (vt2.c1) AND ('1')))AND(((vt0.c0)IS NOT(vt2.c0)))))OR(vt2.c1 COLLATE RTRIM)))AND(((vt2.c1)&(vt0.c0)))) ASC LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 WHEN x'18' THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 WHEN 'n' THEN vt2.c0 END COLLATE NOCASE) ORDER BY ((((((((vt2.c1) NOT BETWEEN (vt2.c1) AND ('1')))AND(((vt0.c0)IS NOT(vt2.c0)))))OR(vt2.c1 COLLATE RTRIM)))AND(((vt2.c1)&(vt0.c0)))) ASC LIMIT 0X3;
SELECT * FROM vt2, vt0 NOT INDEXED WHERE ((((((('n}') BETWEEN (vt0.c0) AND (vt2.c0)))OR(((vt2.c0) IS TRUE))))AND(((vt2.c1)>(vt2.c1)))));
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((((((('n}') BETWEEN (vt0.c0) AND (vt2.c0)))OR(((vt2.c0) IS TRUE))))AND(((vt2.c1)>(vt2.c1)))))AND(((((((((vt0.c0)AND(vt0.c0)))AND(vt2.c0)))OR(vt2.c1))) BETWEEN (vt2.c0 COLLATE BINARY) AND (x'ddc6'))))) ORDER BY ((((((((vt2.c1) NOT BETWEEN (vt2.c1) AND ('1')))AND(((vt0.c0)IS NOT(vt2.c0)))))OR(vt2.c1 COLLATE RTRIM)))AND(((vt2.c1)&(vt0.c0)))) ASC LIMIT 0X3 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 WHEN x'18' THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 WHEN 'n' THEN vt2.c0 END COLLATE NOCASE) ORDER BY ((((((((vt2.c1) NOT BETWEEN (vt2.c1) AND ('1')))AND(((vt0.c0)IS NOT(vt2.c0)))))OR(vt2.c1 COLLATE RTRIM)))AND(((vt2.c1)&(vt0.c0)))) ASC LIMIT 0X3;
SELECT * FROM vt0, vt2 WHERE (0xffffffff8a692a23) ORDER BY (NOT ((vt2.c0 IN (vt2.c0, vt2.c0))));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((-1972819421)AND(((((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)))OR(vt0.c0))) IS TRUE)))) ORDER BY (NOT ((vt2.c0 IN (vt2.c0, vt2.c0))));
SELECT * FROM vt0, vt2 WHERE (0xffffffff8a692a23) ORDER BY (NOT ((vt2.c0 IN (vt2.c0, vt2.c0))));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((-1972819421)AND(((((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)))OR(vt0.c0))) IS TRUE)))) ORDER BY (NOT ((vt2.c0 IN (vt2.c0, vt2.c0))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((LIKELIHOOD(DISTINCT vt0.c0, vt0.c0) IN ()));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((LIKELIHOOD(DISTINCT vt0.c0, vt0.c0) IN ())) ORDER BY ((((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))==((vt0.c0, vt0.c0, vt0.c0, NULL)))))>((((vt0.c0) NOT BETWEEN (vt0.c0) AND ('-388835817'))))) DESC, CAST(COALESCE(vt0.c0, vt0.c0, vt0.c0) AS INTEGER) DESC, (+ (((vt0.c0)%(vt0.c0)))) ASC LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN CAST('}Zl?' AS TEXT) THEN ((v0.c3) BETWEEN (v0.c2) AND (vt0.c0)) WHEN ((((v0.c0)AND(vt0.c0)))OR(v0.c0)) THEN ((vt0.c0) IS FALSE) ELSE (NULL IN (v0.c3)) END);
SELECT ALL * FROM v0, vt0 WHERE (((CASE WHEN CAST('}Zl?' AS TEXT) THEN ((v0.c3) BETWEEN (v0.c2) AND (vt0.c0)) WHEN ((((v0.c0)AND(vt0.c0)))OR(v0.c0)) THEN ((vt0.c0) IS FALSE) ELSE (NULL IN (v0.c3)) END)AND((v0.c1 IN (v0.c1)) COLLATE BINARY))) ORDER BY (((v0.c1)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c0) AND ('35')))) AND (((((v0.c3, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c3)) AND ((NULL, v0.c1, vt0.c0)))))) ASC, x'ee'  NULLS LAST LIMIT 0x1 INTERSECT SELECT * FROM v0, vt0 WHERE (((613584127) ISNULL) COLLATE RTRIM) ORDER BY (((v0.c1)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c0) AND ('35')))) AND (((((v0.c3, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c3)) AND ((NULL, v0.c1, vt0.c0)))))) ASC, x'ee'  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM v0, vt0 WHERE (CASE WHEN CAST('}Zl?' AS TEXT) THEN ((v0.c3) BETWEEN (v0.c2) AND (vt0.c0)) WHEN ((((v0.c0)AND(vt0.c0)))OR(v0.c0)) THEN ((vt0.c0) IS FALSE) ELSE (NULL IN (v0.c3)) END);
SELECT ALL * FROM v0, vt0 WHERE (((CASE WHEN CAST('}Zl?' AS TEXT) THEN ((v0.c3) BETWEEN (v0.c2) AND (vt0.c0)) WHEN ((((v0.c0)AND(vt0.c0)))OR(v0.c0)) THEN ((vt0.c0) IS FALSE) ELSE (NULL IN (v0.c3)) END)AND((v0.c1 IN (v0.c1)) COLLATE BINARY))) ORDER BY (((v0.c1)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c0) AND ('35')))) AND (((((v0.c3, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c3)) AND ((NULL, v0.c1, vt0.c0)))))) ASC, x'ee'  NULLS LAST LIMIT 0x1 INTERSECT SELECT * FROM v0, vt0 WHERE (((613584127) ISNULL) COLLATE RTRIM) ORDER BY (((v0.c1)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c0) AND ('35')))) AND (((((v0.c3, v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, v0.c0, v0.c3)) AND ((NULL, v0.c1, vt0.c0)))))) ASC, x'ee'  NULLS LAST LIMIT 0X1;
SELECT * FROM v0 INNER JOIN vt2 ON CASE WHEN NULL THEN ((vt0.c0)<<(v0.c0)) END NATURAL JOIN vt0 WHERE ((((- (v0.c2)))||(((v0.c0)>=(v0.c0)))));
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON CASE WHEN NULL THEN ((vt0.c0)<<(v0.c0)) END NATURAL JOIN vt0 WHERE ((((- (v0.c2)))||(((v0.c0)=(v0.c0))))) ORDER BY (~ (v0.c0)) ASC, (((((((vt0.c0))!=((NULL))))OR((((v0.c0, v0.c0, v0.c1)) BETWEEN ((vt2.c1, v0.c3, v0.c0)) AND ((vt0.c0, v0.c0, vt0.c0))))))OR(NULL)) DESC;
SELECT * FROM v0 INNER JOIN vt2 ON CASE WHEN NULL THEN ((vt0.c0)<<(v0.c0)) END NATURAL JOIN vt0 WHERE ((((- (v0.c2)))||(((v0.c0)>=(v0.c0)))));
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON CASE WHEN NULL THEN ((vt0.c0)<<(v0.c0)) END NATURAL JOIN vt0 WHERE ((((- (v0.c2)))||(((v0.c0)=(v0.c0))))) ORDER BY (~ (v0.c0)) ASC, (((((((vt0.c0))!=((NULL))))OR((((v0.c0, v0.c0, v0.c1)) BETWEEN ((vt2.c1, v0.c3, v0.c0)) AND ((vt0.c0, v0.c0, vt0.c0))))))OR(NULL)) DESC;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c0 COLLATE NOCASE THEN (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) THEN '0' END) ORDER BY LOWER(DISTINCT ((vt0.c0)<('765630797'))) DESC;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c0 COLLATE NOCASE THEN (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) THEN '0' END) ORDER BY ((((((CASE WHEN x'0cac' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN 0.597707448567937 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN x'48' THEN vt0.c0 END)OR(((vt0.c0) NOTNULL))))OR(CAST(vt0.c0 AS TEXT))))OR(((vt0.c0)/(vt0.c0))))  NULLS LAST LIMIT 0x3 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))) IN ())) ORDER BY ((((((CASE WHEN x'0cac' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN 0.597707448567937 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN x'48' THEN vt0.c0 END)OR(((vt0.c0) NOTNULL))))OR(CAST(vt0.c0 AS TEXT))))OR(((vt0.c0)/(vt0.c0))))  NULLS LAST LIMIT 3;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c0 COLLATE NOCASE THEN (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) THEN '0' END) ORDER BY LOWER(DISTINCT ((vt0.c0)<('765630797'))) DESC;
SELECT ALL * FROM vt0 WHERE (CASE WHEN vt0.c0 COLLATE NOCASE THEN (((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))) WHEN ((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) THEN '0' END) ORDER BY ((((((CASE WHEN x'0cac' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN 0.597707448567937 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN x'48' THEN vt0.c0 END)OR(((vt0.c0) NOTNULL))))OR(CAST(vt0.c0 AS TEXT))))OR(((vt0.c0)/(vt0.c0))))  NULLS LAST LIMIT 0x3 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))) IN ())) ORDER BY ((((((CASE WHEN x'0cac' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN 0.597707448567937 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN x'48' THEN vt0.c0 END)OR(((vt0.c0) NOTNULL))))OR(CAST(vt0.c0 AS TEXT))))OR(((vt0.c0)/(vt0.c0))))  NULLS LAST LIMIT 3;
SELECT * FROM v0, vt0, vt2 WHERE ('-1124068445') ORDER BY ((((((((vt2.c0)LIKE(vt0.c0)))OR((('O5 횛H')<=(v0.c1)))))OR(0Xffffffffc52f57ac)))AND(CASE v0.c2  WHEN 0.3695133495733812 THEN v0.c2 WHEN vt0.c0 THEN v0.c3 WHEN 0.23589764147070302 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 END)), (((0x42bce175, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), NULL)) AND ((NULL, x'')));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((('-1124068445')AND((((v0.c3) IS FALSE) IN ())))) ORDER BY ((((((((vt2.c0)LIKE(vt0.c0)))OR((('O5 횛H')<=(v0.c1)))))OR(0xffffffffc52f57ac)))AND(CASE v0.c2  WHEN 0.3695133495733812 THEN v0.c2 WHEN vt0.c0 THEN v0.c3 WHEN 0.23589764147070302 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 END)), (((1119674741, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), NULL)) AND ((NULL, x''))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((vt2.c0, v0.c0, v0.c2, NULL)) BETWEEN ((vt2.c0, vt2.c0, vt2.c1, vt2.c0)) AND (('3o', v0.c3, v0.c2, v0.c0))))<<(v0.c2))) ORDER BY ((((((((vt2.c0)LIKE(vt0.c0)))OR((('O5 횛H')<=(v0.c1)))))OR(-986753108)))AND(CASE v0.c2  WHEN 0.3695133495733812 THEN v0.c2 WHEN vt0.c0 THEN v0.c3 WHEN 0.23589764147070302 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 END)), (((1119674741, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), NULL)) AND ((NULL, x''))) LIMIT 3;
SELECT * FROM v0, vt0, vt2 WHERE ('-1124068445') ORDER BY ((((((((vt2.c0)LIKE(vt0.c0)))OR((('O5 횛H')<=(v0.c1)))))OR(0Xffffffffc52f57ac)))AND(CASE v0.c2  WHEN 0.3695133495733812 THEN v0.c2 WHEN vt0.c0 THEN v0.c3 WHEN 0.23589764147070302 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 END)), (((0x42bce175, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), NULL)) AND ((NULL, x'')));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((('-1124068445')AND((((v0.c3) IS FALSE) IN ())))) ORDER BY ((((((((vt2.c0)LIKE(vt0.c0)))OR((('O5 횛H')<=(v0.c1)))))OR(0xffffffffc52f57ac)))AND(CASE v0.c2  WHEN 0.3695133495733812 THEN v0.c2 WHEN vt0.c0 THEN v0.c3 WHEN 0.23589764147070302 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 END)), (((1119674741, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), NULL)) AND ((NULL, x''))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((vt2.c0, v0.c0, v0.c2, NULL)) BETWEEN ((vt2.c0, vt2.c0, vt2.c1, vt2.c0)) AND (('3o', v0.c3, v0.c2, v0.c0))))<<(v0.c2))) ORDER BY ((((((((vt2.c0)LIKE(vt0.c0)))OR((('O5 횛H')<=(v0.c1)))))OR(-986753108)))AND(CASE v0.c2  WHEN 0.3695133495733812 THEN v0.c2 WHEN vt0.c0 THEN v0.c3 WHEN 0.23589764147070302 THEN vt0.c0 WHEN v0.c0 THEN vt2.c1 END)), (((1119674741, v0.c2)) NOT BETWEEN ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)), NULL)) AND ((NULL, x''))) LIMIT 3;
SELECT MIN(vt0.c0) FROM vt2 LEFT OUTER JOIN vt0 ON ((((v0.c1)<=(v0.c2))) NOT BETWEEN (0.8288159084208765) AND (v0.c3 COLLATE BINARY)) CROSS JOIN v0 ON ((((((((((((v0.c2) NOT NULL))AND(((v0.c0)|(vt2.c0)))))OR((~ (vt2.c1)))))AND(vt0.c0 COLLATE RTRIM)))AND(vt0.c0 COLLATE RTRIM)))OR(((x'ba')<>(v0.c1)))) WHERE (((v0.c1) NOTNULL) COLLATE NOCASE);
SELECT DISTINCT MIN(vt0.c0) FROM vt2 LEFT OUTER JOIN vt0 ON ((((v0.c1)<=(v0.c2))) NOT BETWEEN (0.8288159084208765) AND (v0.c3 COLLATE BINARY)) CROSS JOIN v0 ON ((((((((((((v0.c2) NOT NULL))AND(((v0.c0)|(vt2.c0)))))OR((~ (vt2.c1)))))AND(vt0.c0 COLLATE RTRIM)))AND(vt0.c0 COLLATE RTRIM)))OR(((x'ba')<>(v0.c1)))) WHERE (((v0.c1) NOTNULL) COLLATE NOCASE) ORDER BY vt2.c0 DESC  NULLS LAST, (((((((((v0.c1)AND('쑘')))OR(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)) IN ()) LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt2 LEFT OUTER JOIN vt0 ON ((((v0.c1)<=(v0.c2))) NOT BETWEEN (0.8288159084208765) AND (v0.c3 COLLATE BINARY)) CROSS JOIN v0 ON ((((((((((((v0.c2) NOT NULL))AND(((v0.c0)|(vt2.c0)))))OR((~ (vt2.c1)))))AND(vt0.c0 COLLATE RTRIM)))AND(vt0.c0 COLLATE RTRIM)))OR(((x'ba')!=(v0.c1)))) WHERE (json_remove(CASE vt0.c0  WHEN vt0.c0 THEN v0.c1 END, vt0.c0 COLLATE NOCASE)) ORDER BY vt2.c0 DESC  NULLS LAST, (((((((((v0.c1)AND('쑘')))OR(vt0.c0)))OR(vt2.c0)))OR(vt0.c0)) IN ()) LIMIT 1;
SELECT MIN(v0.c2) FROM vt0, v0, vt2 WHERE ((((vt2.c1 IN ())) BETWEEN ((~ (v0.c2))) AND (CASE WHEN v0.c1 THEN vt2.c1 WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN vt2.c0 WHEN vt0.c0 THEN v0.c0 WHEN vt2.c1 THEN vt2.c1 END))) ORDER BY TOTAL_CHANGES() COLLATE BINARY DESC;
SELECT DISTINCT MIN(v0.c2) FROM vt0, v0, vt2 WHERE ((((vt2.c1 IN ())) BETWEEN ((~ (v0.c2))) AND (CASE WHEN v0.c1 THEN vt2.c1 WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN vt2.c0 WHEN vt0.c0 THEN v0.c0 WHEN vt2.c1 THEN vt2.c1 END))) ORDER BY TOTAL_CHANGES() COLLATE BINARY DESC LIMIT 0 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt0, v0, vt2 WHERE (((CAST(v0.c1 AS INTEGER)) BETWEEN ((((vt2.c0)) NOT BETWEEN ((v0.c1)) AND ((v0.c2)))) AND (((v0.c2)AND(vt0.c0))))) ORDER BY TOTAL_CHANGES() COLLATE BINARY DESC LIMIT 0X0;
SELECT ALL * FROM v0 WHERE ((v0.c2 IN ())) ORDER BY ((v0.c2 IN (v0.c0)) IN ()) DESC, CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 END THEN ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)) WHEN (((v0.c2, v0.c0))<=((v0.c3, v0.c2))) THEN CAST(v0.c1 AS BLOB) ELSE ((v0.c1)OR(v0.c1)) END ASC, ((CASE v0.c1  WHEN v0.c0 THEN v0.c1 END) IS TRUE)  NULLS LAST, (~ (((((((((v0.c0)AND(v0.c3)))AND(v0.c2)))AND(v0.c0)))OR(-218300121)))) DESC;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN ()))AND((((v0.c3)/(v0.c3)) IN (((v0.c0)>(0.03267743792732858)), ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2))))))) ORDER BY (+ ((v0.c3 IN ())))  NULLS FIRST, ((CASE v0.c3  WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN 0x498a022d WHEN v0.c2 THEN v0.c0 END)<=((- (v0.c2))))  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (ROUND(IFNULL(v0.c2, v0.c2), NULL)) ORDER BY (+ ((v0.c3 IN ())))  NULLS FIRST, ((CASE v0.c3  WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN 0X498a022d WHEN v0.c2 THEN v0.c0 END)<=((- (v0.c2))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0 WHERE ((v0.c2 IN ())) ORDER BY ((v0.c2 IN (v0.c0)) IN ()) DESC, CASE WHEN CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 END THEN ((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c3)) WHEN (((v0.c2, v0.c0))<=((v0.c3, v0.c2))) THEN CAST(v0.c1 AS BLOB) ELSE ((v0.c1)OR(v0.c1)) END ASC, ((CASE v0.c1  WHEN v0.c0 THEN v0.c1 END) IS TRUE)  NULLS LAST, (~ (((((((((v0.c0)AND(v0.c3)))AND(v0.c2)))AND(v0.c0)))OR(-218300121)))) DESC;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE ((((vt2.c1 IN ())) NOT BETWEEN ('sB>Q') AND ((((vt2.c0, vt2.c0))<>((vt2.c0, vt2.c0)))))) ORDER BY ((((vt2.c0)<=(vt2.c1))) NOT BETWEEN ((- (vt2.c1))) AND ((NOT (vt2.c0))));
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE ((((vt2.c1 IN ())) NOT BETWEEN ('sB>Q') AND ((((vt2.c0, vt2.c0))<>((vt2.c0, vt2.c0)))))) ORDER BY CAST(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) AS TEXT) DESC  NULLS LAST, (((vt2.c1)-(vt2.c1)) IN ()) LIMIT 0 INTERSECT SELECT ALL MIN(vt2.c0) FROM vt2 WHERE ((((vt2.c0, vt2.c0))!=((vt2.c0, vt2.c0))) COLLATE NOCASE) ORDER BY CAST(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) AS TEXT) DESC  NULLS LAST, (((vt2.c1)-(vt2.c1)) IN ()) LIMIT 0;
SELECT ALL MIN(v0.c3) FROM vt0 CROSS JOIN v0 ON (((((vt0.c0, vt0.c0)) NOT BETWEEN ((v0.c0, vt0.c0)) AND ((v0.c2, v0.c3)))) NOTNULL) WHERE ((- (((vt0.c0) IS TRUE))));
SELECT DISTINCT MIN(v0.c3) FROM vt0 CROSS JOIN v0 ON (((((vt0.c0, vt0.c0)) NOT BETWEEN ((v0.c0, vt0.c0)) AND ((v0.c2, v0.c3)))) NOTNULL) WHERE ((- (((vt0.c0) IS TRUE)))) ORDER BY CASE WHEN ((vt0.c0)>(v0.c3)) THEN CAST(v0.c2 AS BLOB) WHEN 0.07602949281484861 THEN INSTR(vt0.c0, 0.9774643640842823) WHEN ((((((v0.c0)AND(v0.c0)))AND(v0.c2)))OR(v0.c2)) THEN ((((((((v0.c2)AND(v0.c0)))OR(v0.c0)))AND(v0.c1)))AND(vt0.c0)) ELSE (NOT (vt0.c0)) END, ((((v0.c0)==(v0.c0)))+(v0.c0 COLLATE NOCASE)) LIMIT 3;
SELECT COUNT(*) FROM v0 INNER JOIN vt2 ON ((((((vt2.c0)OR(v0.c2)))AND(((v0.c3)&(vt0.c0)))))OR(((v0.c1)!=(v0.c0)))) NATURAL JOIN vt0 WHERE (UNLIKELY(DISTINCT ((v0.c3) BETWEEN (v0.c0) AND (vt2.c0))));
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt2 ON ((((((vt2.c0)OR(v0.c2)))AND(((v0.c3)&(vt0.c0)))))OR(((v0.c1)<>(v0.c0)))) NATURAL JOIN vt0 WHERE (((UNLIKELY(DISTINCT ((v0.c3) BETWEEN (v0.c0) AND (vt2.c0))))AND(UNLIKELY(DISTINCT ((v0.c2) NOT NULL))))) ORDER BY ((((vt0.c0) NOT BETWEEN (v0.c1) AND (v0.c1))) IS FALSE)  NULLS FIRST, (NOT (v0.c2))  NULLS LAST LIMIT 0X2;
SELECT * FROM vt0 WHERE ((+ ('')) COLLATE RTRIM);
SELECT DISTINCT * FROM vt0 WHERE ((((+ ('')) COLLATE RTRIM)AND(vt0.c0)));
SELECT * FROM vt0 WHERE ((+ ('')) COLLATE RTRIM);
SELECT DISTINCT * FROM vt0 WHERE ((((+ ('')) COLLATE RTRIM)AND(vt0.c0)));
SELECT ALL MAX(vt0.c0) FROM v0, vt0, vt2 WHERE ((~ ('7驀}0z')));
SELECT DISTINCT MAX(vt0.c0) FROM v0, vt0, vt2 WHERE ((~ ('7驀}0z'))) ORDER BY 'kc3' ASC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (((((vt2.c1)=(vt2.c1)))%((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1))))));
SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c1)==(vt2.c1)))%((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1)))))) ORDER BY '-2127914432', '탻V[!vJXv' LIMIT 0;
SELECT ALL * FROM vt2 WHERE (((((vt2.c1)=(vt2.c1)))%((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1))))));
SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c1)==(vt2.c1)))%((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1)))))) ORDER BY '-2127914432', '탻V[!vJXv' LIMIT 0;
SELECT * FROM vt0 WHERE ((NOT (((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY (((~ (vt0.c0))) IS TRUE) DESC, (vt0.c0 IN (vt0.c0)) COLLATE RTRIM ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((NOT (((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY (((~ (vt0.c0))) IS TRUE) DESC, (vt0.c0 IN (vt0.c0)) COLLATE RTRIM ASC  NULLS LAST;
SELECT * FROM vt0 WHERE ((NOT (((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY (((~ (vt0.c0))) IS TRUE) DESC, (vt0.c0 IN (vt0.c0)) COLLATE RTRIM ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((NOT (((((vt0.c0)AND(vt0.c0)))AND(vt0.c0))))) ORDER BY (((~ (vt0.c0))) IS TRUE) DESC, (vt0.c0 IN (vt0.c0)) COLLATE RTRIM ASC  NULLS LAST;
SELECT * FROM v0, vt0 INNER JOIN vt2 ON ((((CASE v0.c0  WHEN v0.c0 THEN vt2.c1 ELSE v0.c1 END)AND((((vt2.c0, v0.c3, v0.c0)) NOT BETWEEN ((v0.c0, vt2.c0, '49/&堧')) AND ((vt2.c0, v0.c3, v0.c1))))))OR(((((((((((vt2.c1)OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))AND(0.608801644006482)))AND(v0.c1)))) WHERE (CASE WHEN TYPEOF(vt0.c0) THEN CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN '-1858631026' THEN vt2.c0 END END);
SELECT DISTINCT * FROM v0, vt0 INNER JOIN vt2 ON ((((CASE v0.c0  WHEN v0.c0 THEN vt2.c1 ELSE v0.c1 END)AND((((vt2.c0, v0.c3, v0.c0)) NOT BETWEEN ((v0.c0, vt2.c0, '49/&堧')) AND ((vt2.c0, v0.c3, v0.c1))))))OR(((((((((((vt2.c1)OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))AND(0.608801644006482)))AND(v0.c1)))) WHERE (((CASE WHEN TYPEOF(vt0.c0) THEN CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN '-1858631026' THEN vt2.c0 END END)AND((((vt2.c0)) BETWEEN ((CASE WHEN v0.c3 THEN 0.388553984956694 WHEN vt2.c0 THEN v0.c2 END)) AND ((((v0.c3) IS TRUE))))))) LIMIT 0;
SELECT * FROM v0, vt0 INNER JOIN vt2 ON ((((CASE v0.c0  WHEN v0.c0 THEN vt2.c1 ELSE v0.c1 END)AND((((vt2.c0, v0.c3, v0.c0)) NOT BETWEEN ((v0.c0, vt2.c0, '49/&堧')) AND ((vt2.c0, v0.c3, v0.c1))))))OR(((((((((((vt2.c1)OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))AND(0.608801644006482)))AND(v0.c1)))) WHERE (CASE WHEN TYPEOF(vt0.c0) THEN CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN '-1858631026' THEN vt2.c0 END END);
SELECT DISTINCT * FROM v0, vt0 INNER JOIN vt2 ON ((((CASE v0.c0  WHEN v0.c0 THEN vt2.c1 ELSE v0.c1 END)AND((((vt2.c0, v0.c3, v0.c0)) NOT BETWEEN ((v0.c0, vt2.c0, '49/&堧')) AND ((vt2.c0, v0.c3, v0.c1))))))OR(((((((((((vt2.c1)OR(v0.c2)))AND(v0.c2)))OR(v0.c1)))AND(0.608801644006482)))AND(v0.c1)))) WHERE (((CASE WHEN TYPEOF(vt0.c0) THEN CASE v0.c3  WHEN v0.c1 THEN vt2.c0 WHEN '-1858631026' THEN vt2.c0 END END)AND((((vt2.c0)) BETWEEN ((CASE WHEN v0.c3 THEN 0.388553984956694 WHEN vt2.c0 THEN v0.c2 END)) AND ((((v0.c3) IS TRUE))))))) LIMIT 0;
SELECT ALL * FROM vt2, vt0 WHERE ((((NOT (vt2.c1))) NOTNULL));
SELECT ALL * FROM vt2, vt0 WHERE ((((NOT (vt2.c1))) NOTNULL));
SELECT ALL * FROM vt2, vt0 WHERE ((((NOT (vt2.c1))) NOTNULL));
SELECT ALL * FROM vt2, vt0 WHERE ((((NOT (vt2.c1))) NOTNULL));
SELECT ALL MIN(vt0.c0) FROM vt0, vt2 WHERE (vt2.c1) ORDER BY ((((((vt0.c0)OR(((vt0.c0)>>(vt2.c1)))))OR((((vt0.c0)) BETWEEN ((vt2.c0)) AND ((vt0.c0))))))AND(SQLITE_COMPILEOPTION_USED(vt0.c0))) DESC  NULLS LAST, ((((vt0.c0) IS FALSE)) IS TRUE) DESC  NULLS LAST, CAST(((vt2.c1)|(vt2.c1)) AS REAL)  NULLS LAST;
SELECT MIN(vt0.c0) FROM vt0, vt2 WHERE (vt2.c1) ORDER BY ((((((vt0.c0)OR(((vt0.c0)>>(vt2.c1)))))OR((((vt0.c0)) BETWEEN ((vt2.c0)) AND ((vt0.c0))))))AND(SQLITE_COMPILEOPTION_USED(vt0.c0))) DESC  NULLS LAST, ((((vt0.c0) IS FALSE)) IS TRUE) DESC  NULLS LAST, CAST(((vt2.c1)|(vt2.c1)) AS REAL)  NULLS LAST LIMIT 2;
SELECT COUNT(*) FROM vt0 WHERE (0Xfffffffff76a5850);
SELECT ALL COUNT(*) FROM vt0 WHERE (((0Xfffffffff76a5850)AND((('1444195736')<<(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))))) LIMIT 0;
SELECT ALL * FROM vt0, v0 WHERE ((- (v0.c0)) COLLATE BINARY);
SELECT ALL * FROM vt0, v0 WHERE ((((- (v0.c0)) COLLATE BINARY)AND(((((vt0.c0)IS NOT(v0.c1)))+(v0.c0 COLLATE BINARY))))) LIMIT 0X3;
SELECT ALL * FROM vt0, v0 WHERE ((- (v0.c0)) COLLATE BINARY);
SELECT ALL * FROM vt0, v0 WHERE ((((- (v0.c0)) COLLATE BINARY)AND(((((vt0.c0)IS NOT(v0.c1)))+(v0.c0 COLLATE BINARY))))) LIMIT 0X3;
SELECT ALL COUNT(*) FROM vt2 WHERE (CASE WHEN ((vt2.c0)==(vt2.c1)) THEN ((NULL) IS TRUE) WHEN ((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)) THEN (NOT (vt2.c1)) ELSE ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)) END);
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (CASE WHEN ((vt2.c0)=(vt2.c1)) THEN ((NULL) IS TRUE) WHEN ((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)) THEN (NOT (vt2.c1)) ELSE ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)) END) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE (vt2.c0 COLLATE BINARY) LIMIT 0x2;
SELECT ALL COUNT(*) FROM vt2 WHERE (((ABS(DISTINCT vt2.c0))/(((vt2.c0)==(vt2.c0)))));
SELECT ALL COUNT(*) FROM vt2 WHERE (((((ABS(DISTINCT vt2.c0))/(((vt2.c0)=(vt2.c0)))))AND((((vt2.c1, vt2.c0, 0Xffffffffc7e8d8c9)) BETWEEN (((~ (vt2.c1)), CASE x''  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END, (NOT ('')))) AND ((json_array(vt2.c1, vt2.c0), ((vt2.c0) ISNULL), (('1622485149')%(vt2.c0)))))))) INTERSECT SELECT ALL COUNT(*) FROM vt2 WHERE ((+ ((((vt2.c0))<=((vt2.c0))))));
SELECT MIN(v0.c3) FROM v0 WHERE ((((CAST(v0.c1 AS TEXT), (v0.c3 IN (NULL))))>=((v0.c3 COLLATE BINARY, (0.16217142275629903 IN ())))));
SELECT MIN(v0.c3) FROM v0 WHERE ((((CAST(v0.c1 AS TEXT), (v0.c3 IN (NULL))))>=((v0.c3 COLLATE BINARY, (0.16217142275629903 IN ())))));
SELECT * FROM v0, vt2 WHERE ((((v0.c0 IN (vt2.c0)))-(((vt2.c0)|('-572972978'))))) ORDER BY CASE (- (v0.c2))  WHEN 0.6679422335115228 THEN ((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))OR(v0.c3)))OR(vt2.c0)) WHEN CAST(v0.c3 AS REAL) THEN CAST(v0.c0 AS INTEGER) WHEN CASE vt2.c0  WHEN vt2.c0 THEN x'' WHEN vt2.c1 THEN v0.c1 END THEN ((vt2.c0) BETWEEN (v0.c1) AND (v0.c1)) END  NULLS LAST, ((((((((((vt2.c0)AND(vt2.c1)))AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))<<(((vt2.c0) IS TRUE))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 WHERE ((((((v0.c0 IN (vt2.c0)))-(((vt2.c0)|('-572972978')))))AND('0.6752456599976012'))) ORDER BY (~ (((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))) DESC  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE ((((v0.c0 IN (vt2.c0)))-(((vt2.c0)|('-572972978'))))) ORDER BY CASE (- (v0.c2))  WHEN 0.6679422335115228 THEN ((((((((v0.c1)AND(v0.c2)))AND(v0.c1)))OR(v0.c3)))OR(vt2.c0)) WHEN CAST(v0.c3 AS REAL) THEN CAST(v0.c0 AS INTEGER) WHEN CASE vt2.c0  WHEN vt2.c0 THEN x'' WHEN vt2.c1 THEN v0.c1 END THEN ((vt2.c0) BETWEEN (v0.c1) AND (v0.c1)) END  NULLS LAST, ((((((((((vt2.c0)AND(vt2.c1)))AND(v0.c1)))OR(v0.c2)))AND(v0.c0)))<<(((vt2.c0) IS TRUE))) ASC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 WHERE ((((((v0.c0 IN (vt2.c0)))-(((vt2.c0)|('-572972978')))))AND('0.6752456599976012'))) ORDER BY (~ (((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)))) DESC  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE (((((vt0.c0)<<(0.35635233619209583)))&((((v0.c3))<=(('0.20340515105157597')))))) ORDER BY (+ (v0.c3 COLLATE BINARY))  NULLS FIRST, ((((CASE WHEN v0.c0 THEN '1096647076' ELSE v0.c1 END)OR(SQLITE_SOURCE_ID())))OR(((((((vt0.c0)OR(v0.c3)))AND(v0.c3)))OR(v0.c1))));
SELECT ALL * FROM vt0, v0 WHERE (((((vt0.c0)<<(0.35635233619209583)))&((((v0.c3))==(('0.20340515105157597')))))) ORDER BY (+ (v0.c3 COLLATE BINARY))  NULLS FIRST, ((((CASE WHEN v0.c0 THEN '1096647076' ELSE v0.c1 END)OR(SQLITE_SOURCE_ID())))OR(((((((vt0.c0)OR(v0.c3)))AND(v0.c3)))OR(v0.c1))));
SELECT * FROM vt0, v0 WHERE (((((vt0.c0)<<(0.35635233619209583)))&((((v0.c3))<=(('0.20340515105157597')))))) ORDER BY (+ (v0.c3 COLLATE BINARY))  NULLS FIRST, ((((CASE WHEN v0.c0 THEN '1096647076' ELSE v0.c1 END)OR(SQLITE_SOURCE_ID())))OR(((((((vt0.c0)OR(v0.c3)))AND(v0.c3)))OR(v0.c1))));
SELECT ALL * FROM vt0, v0 WHERE (((((vt0.c0)<<(0.35635233619209583)))&((((v0.c3))==(('0.20340515105157597')))))) ORDER BY (+ (v0.c3 COLLATE BINARY))  NULLS FIRST, ((((CASE WHEN v0.c0 THEN '1096647076' ELSE v0.c1 END)OR(SQLITE_SOURCE_ID())))OR(((((((vt0.c0)OR(v0.c3)))AND(v0.c3)))OR(v0.c1))));
SELECT * FROM vt2, vt0, v0 WHERE (((CAST('' AS REAL))<(((vt0.c0)>>(vt0.c0)))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((CAST('' AS REAL))<(((vt0.c0)>>(vt0.c0))))) ORDER BY (((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c2))) COLLATE NOCASE ASC, (- (CASE v0.c2  WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN vt2.c1 WHEN 0.6347950112716775 THEN v0.c2 WHEN v0.c3 THEN v0.c0 END)) DESC LIMIT 0X0;
SELECT * FROM vt2, vt0, v0 WHERE (((CAST('' AS REAL))<(((vt0.c0)>>(vt0.c0)))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((CAST('' AS REAL))<(((vt0.c0)>>(vt0.c0))))) ORDER BY (((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c2))) COLLATE NOCASE ASC, (- (CASE v0.c2  WHEN vt2.c1 THEN v0.c0 WHEN v0.c3 THEN vt2.c1 WHEN v0.c1 THEN vt2.c1 WHEN 0.6347950112716775 THEN v0.c2 WHEN v0.c3 THEN v0.c0 END)) DESC LIMIT 0X0;
SELECT ALL * FROM v0, vt0 WHERE (vt0.c0);
SELECT ALL * FROM v0, vt0 WHERE (vt0.c0) ORDER BY (((((v0.c3)%(0.738097048838535)), -2142571445))<=((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)), 'K'))) ASC, ((((v0.c0)IS NOT(vt0.c0)))<((v0.c1 IN (v0.c2)))) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM v0, vt0 WHERE (vt0.c0);
SELECT ALL * FROM v0, vt0 WHERE (vt0.c0) ORDER BY (((((v0.c3)%(0.738097048838535)), -2142571445))<=((((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c1)), 'K'))) ASC, ((((v0.c0)IS NOT(vt0.c0)))<((v0.c1 IN (v0.c2)))) ASC  NULLS LAST LIMIT 2;
SELECT ALL * FROM v0 WHERE (((((v0.c3)AND(v0.c0))) NOT NULL)) ORDER BY ((((v0.c1)>>(v0.c2)))%((((v0.c2, v0.c3, v0.c2, v0.c1))<((v0.c3, v0.c3, v0.c2, v0.c2))))), CASE (((v0.c3, v0.c1)) BETWEEN ((v0.c0, 0.5890893124456047)) AND ((v0.c1, v0.c1)))  WHEN v0.c0 COLLATE NOCASE THEN ((v0.c2)==(v0.c1)) ELSE CAST(v0.c2 AS NUMERIC) END, (((IFNULL(DISTINCT v0.c2, x'5d4c')))==((((v0.c1)LIKE(v0.c3))))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((((v0.c3)AND(v0.c0))) NOT NULL)) ORDER BY ((((v0.c1)>>(v0.c2)))%((((v0.c2, v0.c3, v0.c2, v0.c1))<((v0.c3, v0.c3, v0.c2, v0.c2))))), CASE (((v0.c3, v0.c1)) BETWEEN ((v0.c0, 0.5890893124456047)) AND ((v0.c1, v0.c1)))  WHEN v0.c0 COLLATE NOCASE THEN ((v0.c2)==(v0.c1)) ELSE CAST(v0.c2 AS NUMERIC) END, (((IFNULL(DISTINCT v0.c2, x'5d4c')))==((((v0.c1)LIKE(v0.c3))))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c2)>(v0.c2)) AS BLOB)) ORDER BY ((((v0.c1)>>(v0.c2)))%((((v0.c2, v0.c3, v0.c2, v0.c1))<((v0.c3, v0.c3, v0.c2, v0.c2))))), CASE (((v0.c3, v0.c1)) BETWEEN ((v0.c0, 0.5890893124456047)) AND ((v0.c1, v0.c1)))  WHEN v0.c0 COLLATE NOCASE THEN ((v0.c2)==(v0.c1)) ELSE CAST(v0.c2 AS NUMERIC) END, (((IFNULL(DISTINCT v0.c2, x'5d4c')))=((((v0.c1)LIKE(v0.c3))))) DESC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((((v0.c3)AND(v0.c0))) NOT NULL)) ORDER BY ((((v0.c1)>>(v0.c2)))%((((v0.c2, v0.c3, v0.c2, v0.c1))<((v0.c3, v0.c3, v0.c2, v0.c2))))), CASE (((v0.c3, v0.c1)) BETWEEN ((v0.c0, 0.5890893124456047)) AND ((v0.c1, v0.c1)))  WHEN v0.c0 COLLATE NOCASE THEN ((v0.c2)==(v0.c1)) ELSE CAST(v0.c2 AS NUMERIC) END, (((IFNULL(DISTINCT v0.c2, x'5d4c')))==((((v0.c1)LIKE(v0.c3))))) DESC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((((v0.c3)AND(v0.c0))) NOT NULL)) ORDER BY ((((v0.c1)>>(v0.c2)))%((((v0.c2, v0.c3, v0.c2, v0.c1))<((v0.c3, v0.c3, v0.c2, v0.c2))))), CASE (((v0.c3, v0.c1)) BETWEEN ((v0.c0, 0.5890893124456047)) AND ((v0.c1, v0.c1)))  WHEN v0.c0 COLLATE NOCASE THEN ((v0.c2)==(v0.c1)) ELSE CAST(v0.c2 AS NUMERIC) END, (((IFNULL(DISTINCT v0.c2, x'5d4c')))==((((v0.c1)LIKE(v0.c3))))) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c2)>(v0.c2)) AS BLOB)) ORDER BY ((((v0.c1)>>(v0.c2)))%((((v0.c2, v0.c3, v0.c2, v0.c1))<((v0.c3, v0.c3, v0.c2, v0.c2))))), CASE (((v0.c3, v0.c1)) BETWEEN ((v0.c0, 0.5890893124456047)) AND ((v0.c1, v0.c1)))  WHEN v0.c0 COLLATE NOCASE THEN ((v0.c2)==(v0.c1)) ELSE CAST(v0.c2 AS NUMERIC) END, (((IFNULL(DISTINCT v0.c2, x'5d4c')))=((((v0.c1)LIKE(v0.c3))))) DESC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE (((0.7701635616376612) IS TRUE));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((0.7701635616376612) IS TRUE)) ORDER BY (((vt0.c0, vt0.c0, vt2.c1)) BETWEEN ((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)), ((vt0.c0)<<('0.6515258409859986')), LTRIM(vt0.c0, vt2.c0))) AND (((vt0.c0 IN ()), (NOT (0.48463391837208036)), vt0.c0))), ((CAST(vt2.c0 AS TEXT))&(((vt2.c1) NOT NULL))) INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c0) NOT NULL))/(((vt2.c0) IS TRUE)))) ORDER BY (((vt0.c0, vt0.c0, vt2.c1)) BETWEEN ((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)), ((vt0.c0)<<('0.6515258409859986')), LTRIM(vt0.c0, vt2.c0))) AND (((vt0.c0 IN ()), (NOT (0.48463391837208036)), vt0.c0))), ((CAST(vt2.c0 AS TEXT))&(((vt2.c1) NOT NULL)));
SELECT * FROM vt0, vt2 WHERE (((0.7701635616376612) IS TRUE));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((0.7701635616376612) IS TRUE)) ORDER BY (((vt0.c0, vt0.c0, vt2.c1)) BETWEEN ((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)), ((vt0.c0)<<('0.6515258409859986')), LTRIM(vt0.c0, vt2.c0))) AND (((vt0.c0 IN ()), (NOT (0.48463391837208036)), vt0.c0))), ((CAST(vt2.c0 AS TEXT))&(((vt2.c1) NOT NULL))) INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c0) NOT NULL))/(((vt2.c0) IS TRUE)))) ORDER BY (((vt0.c0, vt0.c0, vt2.c1)) BETWEEN ((((((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c1)), ((vt0.c0)<<('0.6515258409859986')), LTRIM(vt0.c0, vt2.c0))) AND (((vt0.c0 IN ()), (NOT (0.48463391837208036)), vt0.c0))), ((CAST(vt2.c0 AS TEXT))&(((vt2.c1) NOT NULL)));
SELECT ALL MAX(v0.c3) FROM vt0, v0 WHERE (-1180513680) ORDER BY 0.1276477221040504 DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c3) FROM vt0, v0 WHERE (((0xffffffffb9a2ca70)AND(CAST(((vt0.c0)>(vt0.c0)) AS INTEGER)))) ORDER BY (CASE v0.c2  WHEN v0.c1 THEN v0.c0 ELSE vt0.c0 END IN ()) ASC LIMIT 0x2 INTERSECT SELECT DISTINCT MAX(v0.c3) FROM vt0, v0 WHERE (v0.c2) ORDER BY (CASE v0.c2  WHEN v0.c1 THEN v0.c0 ELSE vt0.c0 END IN ()) ASC LIMIT 0X2;
SELECT ALL COUNT(*) FROM v0, vt0 LEFT OUTER JOIN vt2 ON v0.c1 WHERE (((((((((((((v0.c0)OR(NULL)))AND(vt0.c0)))AND(v0.c2)))AND(v0.c0)))AND(v0.c2)))+(((((vt2.c0)AND(v0.c0)))OR(vt2.c1))))) ORDER BY (((((((v0.c3 IN (vt2.c0)))OR(((vt0.c0) IS TRUE))))OR((((vt0.c0, '^''ID!5'))>=((0.5193219274494748, vt0.c0))))))OR(CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN x'' WHEN v0.c1 THEN vt2.c1 ELSE vt0.c0 END)) DESC, CAST((((NULL))>((v0.c1))) AS REAL), ABS(DISTINCT (v0.c3 IN (vt0.c0, v0.c3)))  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0, vt0 INNER JOIN vt2 ON v0.c1 WHERE (((((((((((((v0.c0)OR(NULL)))AND(vt0.c0)))AND(v0.c2)))AND(v0.c0)))AND(v0.c2)))+(((((vt2.c0)AND(v0.c0)))OR(vt2.c1))))) ORDER BY (((((((v0.c3 IN (vt2.c0)))OR(((vt0.c0) IS TRUE))))OR((((vt0.c0, '^''ID!5'))>=((0.5193219274494748, vt0.c0))))))OR(CASE v0.c2  WHEN v0.c3 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 WHEN v0.c0 THEN vt0.c0 WHEN v0.c2 THEN x'' WHEN v0.c1 THEN vt2.c1 ELSE vt0.c0 END)) DESC, CAST((((NULL))>((v0.c1))) AS REAL), ABS(DISTINCT (v0.c3 IN (vt0.c0, v0.c3)))  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt2 NATURAL JOIN vt0 WHERE ((NOT ('v _zspr{')));
SELECT ALL * FROM v0 NATURAL JOIN vt2 NATURAL JOIN vt0 WHERE ((((NOT ('v _zspr{')))AND(((CASE WHEN v0.c3 THEN 1470920427 WHEN v0.c1 THEN v0.c0 END) IS TRUE)))) ORDER BY (((v0.c2 IN (vt2.c1)))AND(((vt2.c0)IS NOT(vt2.c0)))), ((CAST(vt0.c0 AS BLOB)) BETWEEN (LIKELIHOOD(v0.c0, vt2.c0)) AND (0.1462372833710731)) LIMIT 0;
SELECT * FROM v0 NATURAL JOIN vt2 NATURAL JOIN vt0 WHERE ((NOT ('v _zspr{')));
SELECT ALL * FROM v0 NATURAL JOIN vt2 NATURAL JOIN vt0 WHERE ((((NOT ('v _zspr{')))AND(((CASE WHEN v0.c3 THEN 1470920427 WHEN v0.c1 THEN v0.c0 END) IS TRUE)))) ORDER BY (((v0.c2 IN (vt2.c1)))AND(((vt2.c0)IS NOT(vt2.c0)))), ((CAST(vt0.c0 AS BLOB)) BETWEEN (LIKELIHOOD(v0.c0, vt2.c0)) AND (0.1462372833710731)) LIMIT 0;
SELECT ALL MAX(vt2.c0) FROM vt2, v0, vt0 WHERE (((v0.c3) BETWEEN (((v0.c1)<(0xffffffff8b68cf01))) AND (CASE v0.c2  WHEN v0.c1 THEN vt2.c1 WHEN 2094677133 THEN v0.c3 WHEN NULL THEN vt2.c1 END))) ORDER BY (((0x1c7c09cb, 3.82198455E8)) BETWEEN ((((v0.c3) BETWEEN (v0.c2) AND (v0.c2)), (0xffffffff82715652 IN (vt0.c0, v0.c2)))) AND ((((v0.c2)/(v0.c3)), ((v0.c3) NOTNULL))))  NULLS LAST, 0.4077157985926282;
SELECT DISTINCT MAX(vt2.c0) FROM vt2, v0, vt0 WHERE (((((v0.c3) BETWEEN (((v0.c1)<(0Xffffffff8b68cf01))) AND (CASE v0.c2  WHEN v0.c1 THEN vt2.c1 WHEN 2094677133 THEN v0.c3 WHEN NULL THEN vt2.c1 END)))AND(((0.6201728698162052) BETWEEN ((v0.c2 IN (v0.c3))) AND (v0.c1))))) ORDER BY (((477891019, 3.82198455E8)) BETWEEN ((((v0.c3) BETWEEN (v0.c2) AND (v0.c2)), (0Xffffffff82715652 IN (vt0.c0, v0.c2)))) AND ((((v0.c2)/(v0.c3)), ((v0.c3) NOTNULL))))  NULLS LAST, 0.4077157985926282;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((LIKELIHOOD(DISTINCT v0.c1, v0.c2)) NOT BETWEEN (v0.c0) AND (((v0.c1)<(v0.c0))))) ORDER BY ((NULL)!=(v0.c1 COLLATE BINARY))  NULLS LAST;
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE (((LIKELIHOOD(DISTINCT v0.c1, v0.c2)) NOT BETWEEN (v0.c0) AND (((v0.c1)<(v0.c0))))) ORDER BY CASE v0.c3  WHEN v0.c0 THEN CAST(v0.c0 AS REAL) END  NULLS FIRST, (((v0.c0 IN ())) NOT BETWEEN (LIKELY(v0.c3)) AND (((v0.c1)AND(v0.c3)))) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0 NOT INDEXED WHERE (((CAST(v0.c3 AS INTEGER))||(v0.c2 COLLATE RTRIM))) ORDER BY CASE v0.c3  WHEN v0.c0 THEN CAST(v0.c0 AS REAL) END  NULLS FIRST, (((v0.c0 IN ())) NOT BETWEEN (LIKELY(v0.c3)) AND (((v0.c1)AND(v0.c3)))) ASC LIMIT 0;
SELECT ALL * FROM v0 WHERE ((+ (CASE v0.c2  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 END))) ORDER BY ((COALESCE(v0.c0, v0.c2, v0.c3, v0.c0))>=(CASE WHEN NULL THEN v0.c1 ELSE v0.c1 END))  NULLS FIRST, ((CASE WHEN v0.c2 THEN v0.c2 ELSE 0.8190533776255464 END)IS((v0.c3 IN (v0.c1, v0.c0))));
SELECT DISTINCT * FROM v0 WHERE ((+ (CASE v0.c2  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 END))) ORDER BY ((COALESCE(v0.c0, v0.c2, v0.c3, v0.c0))>=(CASE WHEN NULL THEN v0.c1 ELSE v0.c1 END))  NULLS FIRST, ((CASE WHEN v0.c2 THEN v0.c2 ELSE 0.8190533776255464 END)IS((v0.c3 IN (v0.c1, v0.c0))));
SELECT ALL * FROM v0 WHERE ((+ (CASE v0.c2  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 END))) ORDER BY ((COALESCE(v0.c0, v0.c2, v0.c3, v0.c0))>=(CASE WHEN NULL THEN v0.c1 ELSE v0.c1 END))  NULLS FIRST, ((CASE WHEN v0.c2 THEN v0.c2 ELSE 0.8190533776255464 END)IS((v0.c3 IN (v0.c1, v0.c0))));
SELECT DISTINCT * FROM v0 WHERE ((+ (CASE v0.c2  WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c0 END))) ORDER BY ((COALESCE(v0.c0, v0.c2, v0.c3, v0.c0))>=(CASE WHEN NULL THEN v0.c1 ELSE v0.c1 END))  NULLS FIRST, ((CASE WHEN v0.c2 THEN v0.c2 ELSE 0.8190533776255464 END)IS((v0.c3 IN (v0.c1, v0.c0))));
SELECT ALL COUNT(*) FROM vt2 WHERE (((-477908340) BETWEEN ((NOT (vt2.c0))) AND (CAST(vt2.c0 AS REAL)))) ORDER BY DATE((((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c0, 0.9025381487157186, vt2.c0)) AND ((vt2.c1, vt2.c1, vt2.c0))), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)), 0.0247533544445262, CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END, (~ (vt2.c1))) DESC, CASE WHEN vt2.c1 COLLATE NOCASE THEN IFNULL(vt2.c1, vt2.c1) WHEN CAST(vt2.c0 AS TEXT) THEN ((vt2.c1)/(vt2.c0)) ELSE vt2.c1 COLLATE BINARY END DESC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((0xffffffffe383b28c) BETWEEN ((NOT (vt2.c0))) AND (CAST(vt2.c0 AS REAL)))) ORDER BY ((- (vt2.c1)) IN ((- (vt2.c1)))) ASC  NULLS FIRST, (vt2.c1 COLLATE BINARY IN ()) INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE (CASE ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))  WHEN (+ (vt2.c1)) THEN SQLITE_COMPILEOPTION_USED(vt2.c0) ELSE UNICODE(1989687533) END) ORDER BY ((- (vt2.c1)) IN ((- (vt2.c1)))) ASC  NULLS FIRST, (vt2.c1 COLLATE BINARY IN ());
SELECT * FROM vt2 WHERE (((vt2.c1) BETWEEN (((vt2.c1)<(vt2.c1))) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND ('㩦')))));
SELECT ALL * FROM vt2 WHERE (((((vt2.c1) BETWEEN (((vt2.c1)<(vt2.c1))) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND ('㩦')))))AND((((vt2.c0, vt2.c1)) BETWEEN ((((vt2.c1)|(vt2.c1)), (vt2.c0 IN (vt2.c0, vt2.c0, vt2.c1)))) AND ((CAST(vt2.c1 AS BLOB), ((vt2.c1)>=(vt2.c0)))))))) ORDER BY (NULL IN ()) ASC LIMIT 0x0;
SELECT * FROM vt2 WHERE (((vt2.c1) BETWEEN (((vt2.c1)<(vt2.c1))) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND ('㩦')))));
SELECT ALL * FROM vt2 WHERE (((((vt2.c1) BETWEEN (((vt2.c1)<(vt2.c1))) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND ('㩦')))))AND((((vt2.c0, vt2.c1)) BETWEEN ((((vt2.c1)|(vt2.c1)), (vt2.c0 IN (vt2.c0, vt2.c0, vt2.c1)))) AND ((CAST(vt2.c1 AS BLOB), ((vt2.c1)>=(vt2.c0)))))))) ORDER BY (NULL IN ()) ASC LIMIT 0x0;
SELECT ALL MAX(v0.c3) FROM vt0 NATURAL JOIN v0 WHERE (CASE CASE v0.c3  WHEN v0.c3 THEN v0.c3 END  WHEN ((v0.c3) IS FALSE) THEN (NOT (0.76844311752633)) END);
SELECT ALL MAX(v0.c3) FROM vt0 NATURAL JOIN v0 WHERE (((CASE CASE v0.c3  WHEN v0.c3 THEN v0.c3 END  WHEN ((v0.c3) IS FALSE) THEN (NOT (0.76844311752633)) END)AND(ABS((NOT (v0.c1)))))) INTERSECT SELECT ALL MAX(v0.c3) FROM vt0 NATURAL JOIN v0 WHERE (((((((((v0.c0)=(v0.c2)))OR((((vt0.c0, v0.c0, v0.c3, v0.c0, '')) NOT BETWEEN ((v0.c1, v0.c0, v0.c1, vt0.c0, v0.c3)) AND ((v0.c1, v0.c0, vt0.c0, v0.c0, v0.c2))))))AND(vt0.c0 COLLATE RTRIM)))OR((v0.c3 IN (NULL)))));
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (x'd9');
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (((x'd9')AND(((((vt0.c0)<<(vt2.c1)))IS(((((((v0.c3)OR(vt0.c0)))AND(0xffffffffe8d2d617)))AND(v0.c1))))))) ORDER BY ((CAST(0Xfffffffff6a0b416 AS BLOB)) BETWEEN (CAST(v0.c0 AS INTEGER)) AND ((((v0.c3, v0.c2))>=((vt2.c0, v0.c1))))) LIMIT 0x1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (v0.c2) ORDER BY ((CAST(-157240298 AS BLOB)) BETWEEN (CAST(v0.c0 AS INTEGER)) AND ((((v0.c3, v0.c2))>=((vt2.c0, v0.c1))))) LIMIT 1;
SELECT ALL MAX(vt0.c0) FROM vt0, vt2 CROSS JOIN v0 ON NULL WHERE (((v0.c1) IS TRUE) COLLATE BINARY);
SELECT MAX(vt0.c0) FROM vt0, vt2 CROSS JOIN v0 ON NULL WHERE (((v0.c1) IS TRUE) COLLATE BINARY) ORDER BY ((v0.c3 COLLATE RTRIM)*(CASE WHEN vt0.c0 THEN 0.9617959078351569 WHEN vt2.c1 THEN v0.c3 WHEN vt2.c0 THEN v0.c1 END))  NULLS LAST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CASE v0.c2 COLLATE RTRIM  WHEN (+ (v0.c3)) THEN ((((((v0.c2)OR(v0.c3)))AND(vt2.c0)))OR(vt2.c0)) END) ORDER BY ((MAX(v0.c3, vt0.c0, '1360437288', v0.c3, '115760753'))IS NOT((((vt2.c0, v0.c3))<((v0.c0, 2.077826563E9))))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CASE v0.c2 COLLATE RTRIM  WHEN (+ (v0.c3)) THEN ((((((v0.c2)OR(v0.c3)))AND(vt2.c0)))OR(vt2.c0)) END) ORDER BY ((MAX(v0.c3, vt0.c0, '1360437288', v0.c3, '115760753'))IS NOT((((vt2.c0, v0.c3))<((v0.c0, 2.077826563E9))))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CASE v0.c2 COLLATE RTRIM  WHEN (+ (v0.c3)) THEN ((((((v0.c2)OR(v0.c3)))AND(vt2.c0)))OR(vt2.c0)) END) ORDER BY ((MAX(v0.c3, vt0.c0, '1360437288', v0.c3, '115760753'))IS NOT((((vt2.c0, v0.c3))<((v0.c0, 2.077826563E9))))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (CASE v0.c2 COLLATE RTRIM  WHEN (+ (v0.c3)) THEN ((((((v0.c2)OR(v0.c3)))AND(vt2.c0)))OR(vt2.c0)) END) ORDER BY ((MAX(v0.c3, vt0.c0, '1360437288', v0.c3, '115760753'))IS NOT((((vt2.c0, v0.c3))<((v0.c0, 2.077826563E9))))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0, vt2 WHERE ((vt2.c1 IN ()) COLLATE NOCASE) ORDER BY vt0.c0 COLLATE BINARY;
SELECT DISTINCT * FROM vt0, vt2 WHERE ((vt2.c1 IN ()) COLLATE NOCASE) ORDER BY vt0.c0 COLLATE BINARY;
SELECT ALL * FROM vt0, vt2 WHERE ((vt2.c1 IN ()) COLLATE NOCASE) ORDER BY vt0.c0 COLLATE BINARY;
SELECT DISTINCT * FROM vt0, vt2 WHERE ((vt2.c1 IN ()) COLLATE NOCASE) ORDER BY vt0.c0 COLLATE BINARY;
SELECT COUNT(*) FROM vt0, v0, vt2 WHERE ((- ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((v0.c2, v0.c3, v0.c1)) AND ((v0.c2, v0.c1, v0.c0)))))) ORDER BY ((((((vt0.c0) NOTNULL))AND((vt2.c1 IN (vt2.c0, v0.c0)))))OR(vt0.c0 COLLATE RTRIM)) DESC;
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE ((((- ((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((v0.c2, v0.c3, v0.c1)) AND ((v0.c2, v0.c1, v0.c0))))))AND(v0.c2))) ORDER BY ((((((vt0.c0) NOTNULL))AND((vt2.c1 IN (vt2.c0, v0.c0)))))OR(vt0.c0 COLLATE RTRIM)) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE ((NOT (CAST(v0.c2 AS REAL)))) ORDER BY ((((((vt0.c0) NOTNULL))AND((vt2.c1 IN (vt2.c0, v0.c0)))))OR(vt0.c0 COLLATE RTRIM)) DESC;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN ())) NOT BETWEEN (v0.c3 COLLATE RTRIM) AND (x'7713')));
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN ())) NOT BETWEEN (v0.c3 COLLATE RTRIM) AND (x'7713'))) ORDER BY ((CAST(v0.c2 AS BLOB))&(CAST(v0.c3 AS INTEGER)))  NULLS LAST, v0.c3  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY ((CAST(v0.c2 AS BLOB))&(CAST(v0.c3 AS INTEGER)))  NULLS LAST, v0.c3  NULLS FIRST LIMIT 1;
SELECT ALL * FROM v0 WHERE ((((v0.c2 IN ())) NOT BETWEEN (v0.c3 COLLATE RTRIM) AND (x'7713')));
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN ())) NOT BETWEEN (v0.c3 COLLATE RTRIM) AND (x'7713'))) ORDER BY ((CAST(v0.c2 AS BLOB))&(CAST(v0.c3 AS INTEGER)))  NULLS LAST, v0.c3  NULLS FIRST LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (v0.c1) ORDER BY ((CAST(v0.c2 AS BLOB))&(CAST(v0.c3 AS INTEGER)))  NULLS LAST, v0.c3  NULLS FIRST LIMIT 1;
SELECT * FROM v0 INNER JOIN vt0 ON 0.9452630476939854 WHERE (HEX(DISTINCT ((v0.c3)GLOB(vt0.c0)))) ORDER BY (- (v0.c2)) COLLATE RTRIM  NULLS FIRST;
SELECT ALL * FROM v0 INNER JOIN vt0 ON 0.9452630476939854 WHERE (HEX(DISTINCT ((v0.c3)GLOB(vt0.c0)))) ORDER BY 0Xffffffffcaa36d51 ASC  NULLS LAST, CAST(UPPER(DISTINCT v0.c1) AS INTEGER), TRIM(DISTINCT ((v0.c0) NOTNULL)) INTERSECT SELECT ALL * FROM v0 INNER JOIN vt0 ON 0.9452630476939854 WHERE ((((~ (v0.c0)))>>((v0.c2 IN (v0.c0))))) ORDER BY 0xffffffffcaa36d51 ASC  NULLS LAST, CAST(UPPER(DISTINCT v0.c1) AS INTEGER), TRIM(DISTINCT ((v0.c0) NOTNULL));
SELECT * FROM v0 INNER JOIN vt0 ON 0.9452630476939854 WHERE (HEX(DISTINCT ((v0.c3)GLOB(vt0.c0)))) ORDER BY (- (v0.c2)) COLLATE RTRIM  NULLS FIRST;
SELECT ALL * FROM v0 INNER JOIN vt0 ON 0.9452630476939854 WHERE (HEX(DISTINCT ((v0.c3)GLOB(vt0.c0)))) ORDER BY 0Xffffffffcaa36d51 ASC  NULLS LAST, CAST(UPPER(DISTINCT v0.c1) AS INTEGER), TRIM(DISTINCT ((v0.c0) NOTNULL)) INTERSECT SELECT ALL * FROM v0 INNER JOIN vt0 ON 0.9452630476939854 WHERE ((((~ (v0.c0)))>>((v0.c2 IN (v0.c0))))) ORDER BY 0xffffffffcaa36d51 ASC  NULLS LAST, CAST(UPPER(DISTINCT v0.c1) AS INTEGER), TRIM(DISTINCT ((v0.c0) NOTNULL));
SELECT * FROM v0 WHERE ((- (NULL)));
SELECT DISTINCT * FROM v0 WHERE ((((- (NULL)))AND(((((- (v0.c0))))<=((v0.c2 COLLATE RTRIM))))));
SELECT * FROM v0 WHERE ((- (NULL)));
SELECT DISTINCT * FROM v0 WHERE ((((- (NULL)))AND(((((- (v0.c0))))<=((v0.c2 COLLATE RTRIM))))));
SELECT ALL * FROM v0 WHERE (v0.c2) ORDER BY (CAST(v0.c1 AS NUMERIC) IN (CASE WHEN '0.5535893660128063' THEN v0.c0 END));
SELECT DISTINCT * FROM v0 WHERE (((v0.c2)AND(((((v0.c0)<('-635459419'))) BETWEEN (((v0.c2) BETWEEN (0.7907158232775082) AND (v0.c2))) AND (v0.c1))))) ORDER BY CASE v0.c0  WHEN ((v0.c1)IS NOT(v0.c1)) THEN (((NULL, v0.c0)) BETWEEN ((v0.c2, v0.c1)) AND ((v0.c2, v0.c3))) ELSE ((v0.c1) ISNULL) END ASC  NULLS LAST, CASE v0.c3 COLLATE BINARY  WHEN CASE v0.c1  WHEN v0.c1 THEN v0.c0 END THEN ((v0.c3) NOT BETWEEN (v0.c3) AND (0.49560845665905817)) ELSE (v0.c3 IN (v0.c2)) END  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (v0.c2) ORDER BY (CAST(v0.c1 AS NUMERIC) IN (CASE WHEN '0.5535893660128063' THEN v0.c0 END));
SELECT DISTINCT * FROM v0 WHERE (((v0.c2)AND(((((v0.c0)<('-635459419'))) BETWEEN (((v0.c2) BETWEEN (0.7907158232775082) AND (v0.c2))) AND (v0.c1))))) ORDER BY CASE v0.c0  WHEN ((v0.c1)IS NOT(v0.c1)) THEN (((NULL, v0.c0)) BETWEEN ((v0.c2, v0.c1)) AND ((v0.c2, v0.c3))) ELSE ((v0.c1) ISNULL) END ASC  NULLS LAST, CASE v0.c3 COLLATE BINARY  WHEN CASE v0.c1  WHEN v0.c1 THEN v0.c0 END THEN ((v0.c3) NOT BETWEEN (v0.c3) AND (0.49560845665905817)) ELSE (v0.c3 IN (v0.c2)) END  NULLS FIRST;
SELECT MIN(v0.c1) FROM vt2 NOT INDEXED, v0, vt0 WHERE (NULLIF(x'34f3', ((v0.c0) ISNULL)));
SELECT DISTINCT MIN(v0.c1) FROM vt2, v0, vt0 WHERE (((NULLIF(x'34f3', ((v0.c0) ISNULL)))AND(CAST((+ (vt0.c0)) AS NUMERIC))));
SELECT MAX(v0.c1) FROM v0 WHERE ((((NOT (v0.c3)))&((((x'6a3cde'))<((v0.c3))))));
SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((((((NOT (v0.c3)))&((((x'6a3cde'))<((v0.c3))))))AND(UNICODE((~ (v0.c0)))))) ORDER BY (((((v0.c3)) BETWEEN ((v0.c0)) AND ((v0.c2))))/(0.04913247426719625)) INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0 WHERE ((((((v0.c2))<((v0.c0))))+(((v0.c2) NOT NULL)))) ORDER BY (((((v0.c3)) BETWEEN ((v0.c0)) AND ((v0.c2))))/(0.04913247426719625));
SELECT COUNT(*) FROM vt2 WHERE (UNLIKELY(vt2.c0 COLLATE NOCASE)) ORDER BY CAST((((vt2.c1, vt2.c0))<=((vt2.c0, vt2.c0))) AS INTEGER)  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((UNLIKELY(vt2.c0 COLLATE NOCASE))AND(((((((UPPER(vt2.c1))AND((+ (vt2.c0)))))AND(vt2.c0)))AND(((((vt2.c1)AND('쑘')))AND(vt2.c1))))))) ORDER BY ((((vt2.c1, vt2.c0, vt2.c1))=((vt2.c0, vt2.c1, vt2.c0))) IN (NULL)) DESC  NULLS FIRST, (((vt2.c1 IN (vt2.c0, vt2.c0))) ISNULL) ASC LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((((vt2.c0)!=('2笜m2/'))) BETWEEN (((vt2.c1) NOT NULL)) AND ((+ (vt2.c0))))) ORDER BY ((((vt2.c1, vt2.c0, vt2.c1))==((vt2.c0, vt2.c1, vt2.c0))) IN (NULL)) DESC  NULLS FIRST, (((vt2.c1 IN (vt2.c0, vt2.c0))) ISNULL) ASC LIMIT 0X1;
SELECT * FROM vt0 WHERE ((vt0.c0 IN (vt0.c0)) COLLATE BINARY) ORDER BY ((vt0.c0)<(vt0.c0)) COLLATE RTRIM ASC;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0)) COLLATE BINARY)AND(CAST(((vt0.c0)>(vt0.c0)) AS INTEGER)))) ORDER BY ((vt0.c0)<(vt0.c0)) COLLATE RTRIM ASC;
SELECT * FROM vt0 WHERE ((vt0.c0 IN (vt0.c0)) COLLATE BINARY) ORDER BY ((vt0.c0)<(vt0.c0)) COLLATE RTRIM ASC;
SELECT * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0)) COLLATE BINARY)AND(CAST(((vt0.c0)>(vt0.c0)) AS INTEGER)))) ORDER BY ((vt0.c0)<(vt0.c0)) COLLATE RTRIM ASC;
SELECT COUNT(*) FROM vt0, vt2 WHERE (x'3a') ORDER BY ((CAST(vt2.c0 AS BLOB)) BETWEEN (((vt2.c0)GLOB(vt2.c1))) AND ((((vt0.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c0)))))  NULLS FIRST, CASE WHEN NULL THEN (('cG')&(vt0.c0)) WHEN ((((1.014823335E9)OR(vt2.c0)))AND(vt0.c0)) THEN TYPEOF(DISTINCT vt2.c1) WHEN (((vt0.c0, vt2.c1))<((vt2.c1, vt0.c0))) THEN ((x'0fb633') BETWEEN (vt2.c0) AND (vt0.c0)) WHEN CAST(vt2.c1 AS NUMERIC) THEN (- (vt2.c0)) WHEN vt0.c0 THEN vt2.c1 COLLATE RTRIM END  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE (((x'3a')AND(TRIM(((vt2.c0) NOT BETWEEN ('1090913443') AND ('33514151')))))) ORDER BY ((CAST(vt2.c0 AS BLOB)) BETWEEN (((vt2.c0)GLOB(vt2.c1))) AND ((((vt0.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c0)))))  NULLS FIRST, CASE WHEN NULL THEN (('cG')&(vt0.c0)) WHEN ((((1.014823335E9)OR(vt2.c0)))AND(vt0.c0)) THEN TYPEOF(DISTINCT vt2.c1) WHEN (((vt0.c0, vt2.c1))<((vt2.c1, vt0.c0))) THEN ((x'0fb633') BETWEEN (vt2.c0) AND (vt0.c0)) WHEN CAST(vt2.c1 AS NUMERIC) THEN (- (vt2.c0)) WHEN vt0.c0 THEN vt2.c1 COLLATE RTRIM END  NULLS LAST LIMIT 1;
SELECT ALL * FROM v0, vt2 WHERE (CASE ((v0.c3)<<(NULL))  WHEN (~ (v0.c2)) THEN v0.c3 COLLATE BINARY END) ORDER BY LOWER(((((((((v0.c0)AND(v0.c1)))OR(v0.c1)))AND(v0.c1)))OR(vt2.c0)))  NULLS LAST, ((((((((CAST(vt2.c0 AS REAL))OR(CAST(v0.c2 AS NUMERIC))))OR(((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c3)))))AND((('鰏!笜<ꂙ፭z,*')>(v0.c3)))))OR(((vt2.c1)IS(v0.c0)))) ASC;
SELECT * FROM v0, vt2 WHERE (CASE ((v0.c3)<<(NULL))  WHEN (~ (v0.c2)) THEN v0.c3 COLLATE BINARY END) ORDER BY LOWER(((((((((v0.c0)AND(v0.c1)))OR(v0.c1)))AND(v0.c1)))OR(vt2.c0)))  NULLS LAST, ((((((((CAST(vt2.c0 AS REAL))OR(CAST(v0.c2 AS NUMERIC))))OR(((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c3)))))AND((('鰏!笜<ꂙ፭z,*')>(v0.c3)))))OR(((vt2.c1)IS(v0.c0)))) ASC LIMIT 0x2;
SELECT ALL * FROM v0, vt2 WHERE (CASE ((v0.c3)<<(NULL))  WHEN (~ (v0.c2)) THEN v0.c3 COLLATE BINARY END) ORDER BY LOWER(((((((((v0.c0)AND(v0.c1)))OR(v0.c1)))AND(v0.c1)))OR(vt2.c0)))  NULLS LAST, ((((((((CAST(vt2.c0 AS REAL))OR(CAST(v0.c2 AS NUMERIC))))OR(((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c3)))))AND((('鰏!笜<ꂙ፭z,*')>(v0.c3)))))OR(((vt2.c1)IS(v0.c0)))) ASC;
SELECT * FROM v0, vt2 WHERE (CASE ((v0.c3)<<(NULL))  WHEN (~ (v0.c2)) THEN v0.c3 COLLATE BINARY END) ORDER BY LOWER(((((((((v0.c0)AND(v0.c1)))OR(v0.c1)))AND(v0.c1)))OR(vt2.c0)))  NULLS LAST, ((((((((CAST(vt2.c0 AS REAL))OR(CAST(v0.c2 AS NUMERIC))))OR(((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c3)))))AND((('鰏!笜<ꂙ፭z,*')>(v0.c3)))))OR(((vt2.c1)IS(v0.c0)))) ASC LIMIT 0x2;
SELECT ALL * FROM v0, vt2 WHERE (((CAST(v0.c0 AS TEXT))/(((v0.c2)GLOB(v0.c0))))) ORDER BY ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 ELSE vt2.c0 END)!=(-433181884))  NULLS FIRST, ((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c1)))<(((vt2.c1)<=(v0.c1)))) ASC;
SELECT * FROM v0, vt2 WHERE (((CAST(v0.c0 AS TEXT))/(((v0.c2)GLOB(v0.c0))))) ORDER BY ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 ELSE vt2.c0 END)<>(0xffffffffe62e2b44))  NULLS FIRST, ((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c1)))<(((vt2.c1)<=(v0.c1)))) ASC INTERSECT SELECT ALL * FROM v0, vt2 WHERE (((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c3 THEN vt2.c0 ELSE vt2.c1 END) BETWEEN (1934943092) AND (MIN(vt2.c0, v0.c1)))) ORDER BY ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 ELSE vt2.c0 END)<>(0xffffffffe62e2b44))  NULLS FIRST, ((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c1)))<(((vt2.c1)<=(v0.c1)))) ASC;
SELECT ALL * FROM v0, vt2 WHERE (((CAST(v0.c0 AS TEXT))/(((v0.c2)GLOB(v0.c0))))) ORDER BY ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 ELSE vt2.c0 END)!=(-433181884))  NULLS FIRST, ((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c1)))<(((vt2.c1)<=(v0.c1)))) ASC;
SELECT * FROM v0, vt2 WHERE (((CAST(v0.c0 AS TEXT))/(((v0.c2)GLOB(v0.c0))))) ORDER BY ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 ELSE vt2.c0 END)<>(0xffffffffe62e2b44))  NULLS FIRST, ((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c1)))<(((vt2.c1)<=(v0.c1)))) ASC INTERSECT SELECT ALL * FROM v0, vt2 WHERE (((CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c3 THEN vt2.c0 ELSE vt2.c1 END) BETWEEN (1934943092) AND (MIN(vt2.c0, v0.c1)))) ORDER BY ((CASE vt2.c1  WHEN v0.c2 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 ELSE vt2.c0 END)<>(0xffffffffe62e2b44))  NULLS FIRST, ((((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c1)))<(((vt2.c1)<=(v0.c1)))) ASC;
SELECT ALL MAX(v0.c0) FROM vt0, v0 WHERE (((((v0.c0) IS TRUE))LIKE(((((v0.c0)AND(v0.c2)))AND(vt0.c0)))));
SELECT DISTINCT MAX(v0.c0) FROM vt0, v0 WHERE (((((((v0.c0) IS TRUE))LIKE(((((v0.c0)AND(v0.c2)))AND(vt0.c0)))))AND((((v0.c3 IN (v0.c3)))>>(((v0.c3)<<(vt0.c0))))))) ORDER BY 0.7051132046982554 DESC  NULLS LAST LIMIT 0x3 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt0, v0 WHERE (NULLIF((NOT (v0.c0)), vt0.c0)) ORDER BY 0.7051132046982554 DESC  NULLS LAST LIMIT 3;
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE (((((v0.c1) ISNULL)) NOT BETWEEN (((vt0.c0) NOT BETWEEN (v0.c1) AND (v0.c1))) AND ((((v0.c0))>=((v0.c0)))))) ORDER BY (((((v0.c3, v0.c0))<=((v0.c0, v0.c3))))||(((v0.c2) IS FALSE)))  NULLS FIRST, x'94' COLLATE RTRIM ASC  NULLS LAST;
SELECT MIN(v0.c1) FROM v0, vt0 WHERE (((((v0.c1) ISNULL)) NOT BETWEEN (((vt0.c0) NOT BETWEEN (v0.c1) AND (v0.c1))) AND ((((v0.c0))>=((v0.c0)))))) ORDER BY (- (x'1d9f7c')) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE ((((((((v0.c2, v0.c1, v0.c1, v0.c1, '-1191783871', v0.c0))<(('-1935470654', v0.c3, v0.c1, x'cc7e', vt0.c0, v0.c1))))OR((NOT (v0.c3)))))OR(((0.949178410316468) IS FALSE)))) ORDER BY (- (x'1d9f7c')) DESC  NULLS LAST LIMIT 0;
SELECT MAX(v0.c2) FROM vt2, vt0 INNER JOIN v0 ON CASE NULLIF(v0.c0, 's')  WHEN (NOT (v0.c3)) THEN (((vt0.c0, vt0.c0, v0.c2))==((v0.c3, v0.c3, vt2.c0))) WHEN (v0.c1 IN (v0.c2)) THEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1)) WHEN v0.c2 COLLATE BINARY THEN ((2.077826563E9) IS FALSE) ELSE CASE v0.c1  WHEN v0.c3 THEN vt2.c0 WHEN x'' THEN -2.011619333E9 ELSE vt2.c0 END END WHERE (HEX(((((v0.c2)AND(v0.c2)))AND(v0.c3)))) ORDER BY CAST(1341368206 AS NUMERIC)  NULLS LAST, CAST(((v0.c1)<>(vt2.c1)) AS BLOB);
SELECT MAX(v0.c2) FROM vt2, vt0 INNER JOIN v0 ON CASE NULLIF(v0.c0, 's')  WHEN (NOT (v0.c3)) THEN (((vt0.c0, vt0.c0, v0.c2))=((v0.c3, v0.c3, vt2.c0))) WHEN (v0.c1 IN (v0.c2)) THEN ((v0.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1)) WHEN v0.c2 COLLATE BINARY THEN ((2.077826563E9) IS FALSE) ELSE CASE v0.c1  WHEN v0.c3 THEN vt2.c0 WHEN x'' THEN -2.011619333E9 ELSE vt2.c0 END END WHERE (((HEX(((((v0.c2)AND(v0.c2)))AND(v0.c3))))AND((((((((NOT (v0.c2)))OR(((v0.c2)|(vt0.c0)))))OR(((0xffffffffe432f78c)LIKE(v0.c3)))))AND('-382178448'))))) ORDER BY ABS(DISTINCT '⸷*')  NULLS FIRST, ((((((155787397)AND(v0.c1)))OR(vt0.c0)))>>(((vt2.c1) BETWEEN (v0.c1) AND (vt0.c0)))) ASC  NULLS LAST LIMIT 0x0;
SELECT * FROM vt2, vt0, v0 WHERE (((((vt2.c0)||(vt2.c0)))=(CAST(vt0.c0 AS REAL)))) ORDER BY NULLIF(v0.c0, ((v0.c0)>(v0.c3))) DESC  NULLS LAST, ((((vt0.c0) BETWEEN (vt2.c0) AND (v0.c1))) NOT NULL) DESC  NULLS LAST;
SELECT * FROM vt2, vt0, v0 WHERE (((((vt2.c0)||(vt2.c0)))==(CAST(vt0.c0 AS REAL)))) ORDER BY ((((v0.c1) NOTNULL))!=(json_insert(v0.c0, v0.c3, v0.c1))), CAST(CAST(v0.c2 AS TEXT) AS NUMERIC) ASC LIMIT 1;
SELECT * FROM vt2, vt0, v0 WHERE (((((vt2.c0)||(vt2.c0)))=(CAST(vt0.c0 AS REAL)))) ORDER BY NULLIF(v0.c0, ((v0.c0)>(v0.c3))) DESC  NULLS LAST, ((((vt0.c0) BETWEEN (vt2.c0) AND (v0.c1))) NOT NULL) DESC  NULLS LAST;
SELECT * FROM vt2, vt0, v0 WHERE (((((vt2.c0)||(vt2.c0)))==(CAST(vt0.c0 AS REAL)))) ORDER BY ((((v0.c1) NOTNULL))!=(json_insert(v0.c0, v0.c3, v0.c1))), CAST(CAST(v0.c2 AS TEXT) AS NUMERIC) ASC LIMIT 1;
SELECT ALL * FROM vt2 WHERE (CASE ((vt2.c1)||(vt2.c1))  WHEN vt2.c1 THEN ((x'') ISNULL) WHEN (((NULL)) BETWEEN ((vt2.c0)) AND ((vt2.c1))) THEN CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN '0.023694149166923695' WHEN vt2.c1 THEN vt2.c0 END END) ORDER BY CASE WHEN (vt2.c0 IN ()) THEN ((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) WHEN ((vt2.c1)%(vt2.c0)) THEN ((((((((((NULL)OR(vt2.c1)))OR(NULL)))OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c1)) WHEN ((vt2.c0) NOT NULL) THEN vt2.c1 COLLATE NOCASE ELSE CAST(vt2.c0 AS REAL) END ASC, (((vt2.c1, NULL)) BETWEEN ((0.7130135542574904, vt2.c0)) AND ((CAST(vt2.c1 AS BLOB), UNLIKELY(-787073840))));
SELECT DISTINCT * FROM vt2 WHERE (CASE ((vt2.c1)||(vt2.c1))  WHEN vt2.c1 THEN ((x'') ISNULL) WHEN (((NULL)) BETWEEN ((vt2.c0)) AND ((vt2.c1))) THEN CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN '0.023694149166923695' WHEN vt2.c1 THEN vt2.c0 END END) ORDER BY (NOT (vt2.c0)) COLLATE BINARY COLLATE RTRIM, CASE WHEN ((((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c1)) THEN (vt2.c1 IN (vt2.c0, vt2.c0)) END ASC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt2 WHERE (CASE ((vt2.c1)||(vt2.c1))  WHEN vt2.c1 THEN ((x'') ISNULL) WHEN (((NULL)) BETWEEN ((vt2.c0)) AND ((vt2.c1))) THEN CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN '0.023694149166923695' WHEN vt2.c1 THEN vt2.c0 END END) ORDER BY CASE WHEN (vt2.c0 IN ()) THEN ((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) WHEN ((vt2.c1)%(vt2.c0)) THEN ((((((((((NULL)OR(vt2.c1)))OR(NULL)))OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c1)) WHEN ((vt2.c0) NOT NULL) THEN vt2.c1 COLLATE NOCASE ELSE CAST(vt2.c0 AS REAL) END ASC, (((vt2.c1, NULL)) BETWEEN ((0.7130135542574904, vt2.c0)) AND ((CAST(vt2.c1 AS BLOB), UNLIKELY(-787073840))));
SELECT DISTINCT * FROM vt2 WHERE (CASE ((vt2.c1)||(vt2.c1))  WHEN vt2.c1 THEN ((x'') ISNULL) WHEN (((NULL)) BETWEEN ((vt2.c0)) AND ((vt2.c1))) THEN CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN '0.023694149166923695' WHEN vt2.c1 THEN vt2.c0 END END) ORDER BY (NOT (vt2.c0)) COLLATE BINARY COLLATE RTRIM, CASE WHEN ((((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c1)) THEN (vt2.c1 IN (vt2.c0, vt2.c0)) END ASC  NULLS LAST LIMIT 0;
SELECT * FROM vt2, vt0, v0 WHERE (CASE ((vt0.c0) BETWEEN (0.7782687021320462) AND (vt2.c1))  WHEN ((vt2.c1)/(v0.c2)) THEN ((v0.c2) BETWEEN (v0.c3) AND (vt2.c1)) END);
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((CASE ((vt0.c0) BETWEEN (0.7782687021320462) AND (vt2.c1))  WHEN ((vt2.c1)/(v0.c2)) THEN ((v0.c2) BETWEEN (v0.c3) AND (vt2.c1)) END)AND((((~ (v0.c2))) BETWEEN ((NOT (vt2.c1))) AND (NULL))))) ORDER BY ((v0.c0 COLLATE NOCASE) NOTNULL);
SELECT * FROM vt2, vt0, v0 WHERE (CASE ((vt0.c0) BETWEEN (0.7782687021320462) AND (vt2.c1))  WHEN ((vt2.c1)/(v0.c2)) THEN ((v0.c2) BETWEEN (v0.c3) AND (vt2.c1)) END);
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((CASE ((vt0.c0) BETWEEN (0.7782687021320462) AND (vt2.c1))  WHEN ((vt2.c1)/(v0.c2)) THEN ((v0.c2) BETWEEN (v0.c3) AND (vt2.c1)) END)AND((((~ (v0.c2))) BETWEEN ((NOT (vt2.c1))) AND (NULL))))) ORDER BY ((v0.c0 COLLATE NOCASE) NOTNULL);
SELECT * FROM vt0, vt2, v0 WHERE ((((((vt2.c1, v0.c2))>=((vt2.c0, vt0.c0)))) ISNULL)) ORDER BY ((vt2.c0)GLOB(v0.c2)) COLLATE NOCASE ASC;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((((vt2.c1, v0.c2))>((vt2.c0, vt0.c0)))) ISNULL))AND(((vt0.c0) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (vt2.c0))) AND (CAST('-1504449791' AS REAL)))))) ORDER BY ((((0.2590398224630066)OR((v0.c3 IN (vt2.c0)))))AND(0.5344055996417424)) DESC  NULLS LAST;
SELECT * FROM vt0, vt2, v0 WHERE ((((((vt2.c1, v0.c2))>=((vt2.c0, vt0.c0)))) ISNULL)) ORDER BY ((vt2.c0)GLOB(v0.c2)) COLLATE NOCASE ASC;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((((vt2.c1, v0.c2))>((vt2.c0, vt0.c0)))) ISNULL))AND(((vt0.c0) NOT BETWEEN (((v0.c2) BETWEEN (v0.c0) AND (vt2.c0))) AND (CAST('-1504449791' AS REAL)))))) ORDER BY ((((0.2590398224630066)OR((v0.c3 IN (vt2.c0)))))AND(0.5344055996417424)) DESC  NULLS LAST;
SELECT ALL MIN(v0.c0) FROM v0, vt2 WHERE (((((((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c1)))OR(v0.c2 COLLATE NOCASE)))OR((vt2.c0 IN ()))));
SELECT MIN(v0.c0) FROM v0, vt2 WHERE (((((((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c1)))OR(v0.c2 COLLATE NOCASE)))OR((vt2.c0 IN ())))) ORDER BY ((((((((((v0.c3)OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)))AND(v0.c0)))<(vt2.c0 COLLATE NOCASE))  NULLS FIRST, ((((((((((v0.c3)OR(NULL)))OR(CAST(v0.c0 AS TEXT))))AND((NOT (v0.c1)))))AND(CASE WHEN v0.c3 THEN v0.c3 END)))AND(v0.c3)), ((0.7737787458374504)>=(CASE vt2.c1  WHEN vt2.c1 THEN v0.c3 ELSE v0.c1 END))  NULLS FIRST INTERSECT SELECT ALL MIN(v0.c0) FROM v0, vt2 WHERE (ABS(DISTINCT v0.c2)) ORDER BY ((((((((((v0.c3)OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)))AND(v0.c0)))<(vt2.c0 COLLATE NOCASE))  NULLS FIRST, ((((((((((v0.c3)OR(NULL)))OR(CAST(v0.c0 AS TEXT))))AND((NOT (v0.c1)))))AND(CASE WHEN v0.c3 THEN v0.c3 END)))AND(v0.c3)), ((0.7737787458374504)>=(CASE vt2.c1  WHEN vt2.c1 THEN v0.c3 ELSE v0.c1 END))  NULLS FIRST;
SELECT ALL COUNT(*) FROM vt0, v0 INNER JOIN vt2 ON ((((TYPEOF('55764381'))OR((- (v0.c1)))))OR(((vt0.c0)>(v0.c3)))) WHERE (((v0.c0)+(v0.c1)) COLLATE RTRIM) ORDER BY 0x16ecbd13 DESC  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0, v0 INNER JOIN vt2 ON ((((TYPEOF('55764381'))OR((- (v0.c1)))))OR(((vt0.c0)>(v0.c3)))) WHERE (((((v0.c0)+(v0.c1)) COLLATE RTRIM)AND(LOWER(DISTINCT (v0.c1 IN (v0.c2, x'4644d0')))))) ORDER BY NULL, ((((((((vt2.c1)OR(vt2.c0)))AND(CAST(v0.c3 AS INTEGER))))OR(0.818255337647808)))OR(CASE '-1522911904'  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c0 WHEN vt0.c0 THEN v0.c2 WHEN v0.c3 THEN v0.c1 WHEN x'e2' THEN vt2.c1 WHEN v0.c2 THEN vt0.c0 WHEN '6<' THEN v0.c2 ELSE vt2.c1 END)) ASC  NULLS FIRST, (((vt2.c1 IN (v0.c0, v0.c1)))IS(vt0.c0 COLLATE NOCASE))  NULLS FIRST, LIKELIHOOD((((v0.c1)) BETWEEN ((v0.c1)) AND ((vt2.c1))), LOWER(DISTINCT v0.c2)) DESC  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM v0, vt0 NATURAL JOIN vt2 WHERE (((v0.c3 COLLATE NOCASE)>(v0.c1 COLLATE RTRIM)));
SELECT * FROM v0, vt0 NATURAL JOIN vt2 WHERE (((v0.c3 COLLATE NOCASE)>(v0.c1 COLLATE RTRIM))) INTERSECT SELECT * FROM v0, vt0 NATURAL JOIN vt2 WHERE ((((((vt2.c0, '-2088996673')) BETWEEN ((vt2.c1, v0.c0)) AND ((vt0.c0, vt0.c0)))) BETWEEN (v0.c3) AND ((v0.c2 IN (vt0.c0)))));
SELECT ALL * FROM v0, vt0 NATURAL JOIN vt2 WHERE (((v0.c3 COLLATE NOCASE)>(v0.c1 COLLATE RTRIM)));
SELECT * FROM v0, vt0 NATURAL JOIN vt2 WHERE (((v0.c3 COLLATE NOCASE)>(v0.c1 COLLATE RTRIM))) INTERSECT SELECT * FROM v0, vt0 NATURAL JOIN vt2 WHERE ((((((vt2.c0, '-2088996673')) BETWEEN ((vt2.c1, v0.c0)) AND ((vt0.c0, vt0.c0)))) BETWEEN (v0.c3) AND ((v0.c2 IN (vt0.c0)))));
SELECT COUNT(*) FROM vt0 CROSS JOIN v0 ON (((vt2.c1) NOTNULL) IN (CASE WHEN '' THEN vt2.c1 ELSE vt2.c0 END)) INNER JOIN vt2 ON v0.c0 COLLATE NOCASE WHERE (CASE ((v0.c0) NOT BETWEEN (v0.c3) AND (vt2.c0))  WHEN ((v0.c2)IS NOT(vt0.c0)) THEN 0.2570523345440776 END) ORDER BY (((v0.c3, v0.c0, vt2.c0)) NOT BETWEEN ((v0.c2, CASE v0.c0  WHEN vt2.c1 THEN v0.c0 END, CASE WHEN vt2.c0 THEN x'ce' WHEN vt2.c1 THEN NULL WHEN v0.c3 THEN vt2.c1 ELSE v0.c2 END)) AND ((((vt0.c0)<=(v0.c2)), ((((((((v0.c2)OR(v0.c3)))OR(v0.c0)))AND(vt2.c1)))AND(v0.c3)), ((v0.c0)*(v0.c1)))));
SELECT ALL COUNT(*) FROM vt0 CROSS JOIN v0 ON (((vt2.c1) NOTNULL) IN (CASE WHEN '' THEN vt2.c1 ELSE vt2.c0 END)) INNER JOIN vt2 ON v0.c0 COLLATE NOCASE WHERE (CASE ((v0.c0) NOT BETWEEN (v0.c3) AND (vt2.c0))  WHEN ((v0.c2)IS NOT(vt0.c0)) THEN 0.2570523345440776 END) ORDER BY (((v0.c3, v0.c0, vt2.c0)) NOT BETWEEN ((v0.c2, CASE v0.c0  WHEN vt2.c1 THEN v0.c0 END, CASE WHEN vt2.c0 THEN x'ce' WHEN vt2.c1 THEN NULL WHEN v0.c3 THEN vt2.c1 ELSE v0.c2 END)) AND ((((vt0.c0)<=(v0.c2)), ((((((((v0.c2)OR(v0.c3)))OR(v0.c0)))AND(vt2.c1)))AND(v0.c3)), ((v0.c0)*(v0.c1))))) LIMIT 0x2;
SELECT MAX(vt0.c0) FROM vt0, vt2 WHERE (TYPEOF(DISTINCT vt2.c0) COLLATE BINARY);
SELECT ALL MAX(vt0.c0) FROM vt0, vt2 WHERE (TYPEOF(DISTINCT vt2.c0) COLLATE BINARY) ORDER BY (((NOT (vt2.c1)))LIKE(((vt2.c1)<=(vt0.c0))))  NULLS FIRST, CAST(vt2.c1 COLLATE NOCASE AS TEXT) LIMIT 0x2 INTERSECT SELECT MAX(vt0.c0) FROM vt0, vt2 WHERE (vt0.c0) ORDER BY (((NOT (vt2.c1)))LIKE(((vt2.c1)<=(vt0.c0))))  NULLS FIRST, CAST(vt2.c1 COLLATE NOCASE AS TEXT) LIMIT 2;
SELECT ALL MAX(v0.c3) FROM v0, vt2, vt0 WHERE ((((v0.c2 IN (v0.c3))) NOT BETWEEN (CASE vt2.c0  WHEN v0.c3 THEN vt2.c1 ELSE vt2.c1 END) AND (v0.c1 COLLATE BINARY))) ORDER BY (((- (x'')))<(((((((((vt2.c0)AND(v0.c0)))AND(vt2.c0)))AND('cV')))OR(v0.c2))))  NULLS LAST, NULL COLLATE NOCASE, (- (CAST(v0.c0 AS TEXT))) ASC  NULLS LAST;
SELECT ALL MAX(v0.c3) FROM v0, vt2, vt0 WHERE ((((v0.c2 IN (v0.c3))) NOT BETWEEN (CASE vt2.c0  WHEN v0.c3 THEN vt2.c1 ELSE vt2.c1 END) AND (v0.c1 COLLATE BINARY))) ORDER BY (((- (x'')))<(((((((((vt2.c0)AND(v0.c0)))AND(vt2.c0)))AND('cV')))OR(v0.c2))))  NULLS LAST, NULL COLLATE NOCASE, (- (CAST(v0.c0 AS TEXT))) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt0, v0 WHERE (CAST(v0.c1 AS NUMERIC) COLLATE NOCASE) ORDER BY CAST((- (v0.c3)) AS BLOB)  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE (((CAST(v0.c1 AS NUMERIC) COLLATE NOCASE)AND(TYPEOF(((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c3)))))) ORDER BY CAST((- (v0.c3)) AS BLOB)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE ((((((v0.c3)+(v0.c0))))==(((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c2, v0.c3)) AND ((v0.c1, v0.c0))))))) ORDER BY CAST((- (v0.c3)) AS BLOB)  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE (CAST(v0.c1 AS NUMERIC) COLLATE NOCASE) ORDER BY CAST((- (v0.c3)) AS BLOB)  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE (((CAST(v0.c1 AS NUMERIC) COLLATE NOCASE)AND(TYPEOF(((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c3)))))) ORDER BY CAST((- (v0.c3)) AS BLOB)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE ((((((v0.c3)+(v0.c0))))==(((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c2, v0.c3)) AND ((v0.c1, v0.c0))))))) ORDER BY CAST((- (v0.c3)) AS BLOB)  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE (TRIM(DISTINCT (~ (vt2.c0)), (((vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c0, vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0, vt2.c0, vt2.c1, NULL)))));
SELECT ALL * FROM vt2 WHERE (TRIM(DISTINCT (~ (vt2.c0)), (((vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c0, vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0, vt2.c0, vt2.c1, NULL)))));
SELECT ALL * FROM vt2 WHERE (TRIM(DISTINCT (~ (vt2.c0)), (((vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c0, vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0, vt2.c0, vt2.c1, NULL)))));
SELECT ALL * FROM vt2 WHERE (TRIM(DISTINCT (~ (vt2.c0)), (((vt2.c1, vt2.c1, vt2.c1, vt2.c0, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c0, vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0, vt2.c0, vt2.c1, NULL)))));
SELECT ALL MIN(v0.c1) FROM v0 WHERE (0.8843623471006294);
SELECT MIN(v0.c1) FROM v0 WHERE (0.8843623471006294) ORDER BY ((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) COLLATE RTRIM ASC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE (x'8ed2') ORDER BY (vt0.c0 COLLATE BINARY IN ())  NULLS LAST, json_insert(CASE v0.c3  WHEN vt0.c0 THEN v0.c1 ELSE v0.c3 END, ((v0.c3) IS FALSE), x'24'), ((2130690479) BETWEEN (((vt0.c0) NOTNULL)) AND (TYPEOF(vt0.c0)));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (x'8ed2') ORDER BY CASE WHEN TOTAL_CHANGES() THEN HEX(DISTINCT vt2.c0) ELSE (vt2.c0 IN (vt2.c1)) END ASC, ((((v0.c0) ISNULL))%(CASE v0.c2  WHEN v0.c2 THEN vt0.c0 WHEN v0.c2 THEN vt2.c0 WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c2 ELSE vt0.c0 END))  NULLS FIRST LIMIT 0X2 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (CASE vt2.c1 COLLATE RTRIM  WHEN (v0.c2 IN (vt2.c1)) THEN (NOT (vt2.c1)) ELSE ((v0.c2)||(v0.c3)) END) ORDER BY CASE WHEN TOTAL_CHANGES() THEN HEX(DISTINCT vt2.c0) ELSE (vt2.c0 IN (vt2.c1)) END ASC, ((((v0.c0) ISNULL))%(CASE v0.c2  WHEN v0.c2 THEN vt0.c0 WHEN v0.c2 THEN vt2.c0 WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c2 ELSE vt0.c0 END))  NULLS FIRST LIMIT 0x2;
SELECT ALL * FROM v0, vt2, vt0 WHERE (x'8ed2') ORDER BY (vt0.c0 COLLATE BINARY IN ())  NULLS LAST, json_insert(CASE v0.c3  WHEN vt0.c0 THEN v0.c1 ELSE v0.c3 END, ((v0.c3) IS FALSE), x'24'), ((2130690479) BETWEEN (((vt0.c0) NOTNULL)) AND (TYPEOF(vt0.c0)));
SELECT ALL COUNT(*) FROM vt0, v0, vt2 WHERE ((((v0.c3)) BETWEEN ((((v0.c0) NOTNULL))) AND ((((vt0.c0) NOT BETWEEN (v0.c3) AND (vt0.c0))))));
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE ((((v0.c3)) BETWEEN ((((v0.c0) NOTNULL))) AND ((((vt0.c0) NOT BETWEEN (v0.c3) AND (vt0.c0))))));
SELECT ALL MAX(vt2.c0) FROM vt2, v0 WHERE (CAST(((v0.c0)+(v0.c2)) AS NUMERIC)) ORDER BY CAST(((v0.c3)>=(v0.c3)) AS REAL)  NULLS LAST;
SELECT DISTINCT MAX(vt2.c0) FROM vt2, v0 WHERE (CAST(((v0.c0)+(v0.c2)) AS NUMERIC)) ORDER BY CAST(((v0.c3)>=(v0.c3)) AS REAL)  NULLS LAST LIMIT 3;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON CASE (vt2.c1 IN (v0.c2))  WHEN (NOT (v0.c1)) THEN ((v0.c3)LIKE(v0.c0)) WHEN (v0.c1 IN (v0.c0, v0.c1)) THEN ((v0.c0) BETWEEN (v0.c1) AND (NULL)) ELSE CASE WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END END WHERE (v0.c2);
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON CASE (vt2.c1 IN (v0.c2))  WHEN (NOT (v0.c1)) THEN ((v0.c3)LIKE(v0.c0)) WHEN (v0.c1 IN (v0.c0, v0.c1)) THEN ((v0.c0) BETWEEN (v0.c1) AND (NULL)) ELSE CASE WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END END WHERE (v0.c2) ORDER BY (((((((((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))))AND(((v0.c3)|(v0.c2)))))AND(((vt2.c1)<<(vt2.c0)))))AND((((v0.c0))<((v0.c2))))) INTERSECT SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON CASE (vt2.c1 IN (v0.c2))  WHEN (NOT (v0.c1)) THEN ((v0.c3)LIKE(v0.c0)) WHEN (v0.c1 IN (v0.c0, v0.c1)) THEN ((v0.c0) BETWEEN (v0.c1) AND (NULL)) ELSE CASE WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END END WHERE (json_array(NULL, (+ (vt2.c0)))) ORDER BY (((((((((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))))AND(((v0.c3)|(v0.c2)))))AND(((vt2.c1)<<(vt2.c0)))))AND((((v0.c0))<((v0.c2)))));
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON CASE (vt2.c1 IN (v0.c2))  WHEN (NOT (v0.c1)) THEN ((v0.c3)LIKE(v0.c0)) WHEN (v0.c1 IN (v0.c0, v0.c1)) THEN ((v0.c0) BETWEEN (v0.c1) AND (NULL)) ELSE CASE WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END END WHERE (v0.c2);
SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON CASE (vt2.c1 IN (v0.c2))  WHEN (NOT (v0.c1)) THEN ((v0.c3)LIKE(v0.c0)) WHEN (v0.c1 IN (v0.c0, v0.c1)) THEN ((v0.c0) BETWEEN (v0.c1) AND (NULL)) ELSE CASE WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END END WHERE (v0.c2) ORDER BY (((((((((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))))AND(((v0.c3)|(v0.c2)))))AND(((vt2.c1)<<(vt2.c0)))))AND((((v0.c0))<((v0.c2))))) INTERSECT SELECT ALL * FROM v0 LEFT OUTER JOIN vt2 ON CASE (vt2.c1 IN (v0.c2))  WHEN (NOT (v0.c1)) THEN ((v0.c3)LIKE(v0.c0)) WHEN (v0.c1 IN (v0.c0, v0.c1)) THEN ((v0.c0) BETWEEN (v0.c1) AND (NULL)) ELSE CASE WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END END WHERE (json_array(NULL, (+ (vt2.c0)))) ORDER BY (((((((((v0.c1)) BETWEEN ((v0.c1)) AND ((v0.c0))))AND(((v0.c3)|(v0.c2)))))AND(((vt2.c1)<<(vt2.c0)))))AND((((v0.c0))<((v0.c2)))));
SELECT * FROM vt2, v0 WHERE (((CAST(v0.c2 AS INTEGER))%((v0.c1 IN (v0.c3))))) ORDER BY UPPER(DISTINCT '98818379') DESC;
SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(v0.c2 AS INTEGER))%((v0.c1 IN (v0.c3))))) ORDER BY UPPER(DISTINCT '98818379') DESC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (IFNULL(vt2.c0, v0.c2) COLLATE RTRIM) ORDER BY UPPER(DISTINCT '98818379') DESC LIMIT 1;
SELECT * FROM vt2, v0 WHERE (((CAST(v0.c2 AS INTEGER))%((v0.c1 IN (v0.c3))))) ORDER BY UPPER(DISTINCT '98818379') DESC;
SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(v0.c2 AS INTEGER))%((v0.c1 IN (v0.c3))))) ORDER BY UPPER(DISTINCT '98818379') DESC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (IFNULL(vt2.c0, v0.c2) COLLATE RTRIM) ORDER BY UPPER(DISTINCT '98818379') DESC LIMIT 1;
SELECT * FROM vt0, vt2 WHERE (LIKELIHOOD(DISTINCT (vt0.c0 IN (vt2.c0)), ((vt0.c0)OR(vt0.c0))));
SELECT * FROM vt0, vt2 WHERE (LIKELIHOOD(DISTINCT (vt0.c0 IN (vt2.c0)), ((vt0.c0)OR(vt0.c0)))) LIMIT 2;
SELECT * FROM vt0, vt2 WHERE (LIKELIHOOD(DISTINCT (vt0.c0 IN (vt2.c0)), ((vt0.c0)OR(vt0.c0))));
SELECT ALL MIN(v0.c3) FROM v0 WHERE (x'') ORDER BY CAST(v0.c0 AS INTEGER) COLLATE BINARY ASC, ((CAST(v0.c1 AS REAL)) IS FALSE)  NULLS FIRST;
SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE (x'') ORDER BY CAST(v0.c0 AS INTEGER) COLLATE BINARY ASC, ((CAST(v0.c1 AS REAL)) IS FALSE)  NULLS FIRST LIMIT 0X2;
SELECT ALL * FROM vt0 WHERE (((vt0.c0) BETWEEN (((vt0.c0) NOTNULL)) AND (((vt0.c0)GLOB(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0) BETWEEN (((vt0.c0) NOTNULL)) AND (((vt0.c0)GLOB(vt0.c0))))) LIMIT 0x0;
SELECT ALL * FROM vt0 WHERE (((vt0.c0) BETWEEN (((vt0.c0) NOTNULL)) AND (((vt0.c0)GLOB(vt0.c0)))));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0) BETWEEN (((vt0.c0) NOTNULL)) AND (((vt0.c0)GLOB(vt0.c0))))) LIMIT 0x0;
SELECT ALL MIN(v0.c1) FROM vt0, v0, vt2 WHERE (CAST(((v0.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0)) AS INTEGER));
SELECT ALL MIN(v0.c1) FROM vt0, v0, vt2 WHERE (((CAST(((v0.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0)) AS INTEGER))AND(CASE WHEN (NULL IN ()) THEN ((v0.c3)!=(0.7100278653416723)) WHEN (NOT (v0.c1)) THEN ((v0.c3)||(v0.c0)) WHEN (vt0.c0 IN ()) THEN ((NULL)<(0.08634741939000601)) END))) ORDER BY json_array_length((+ (v0.c0)), LIKE(vt2.c1, v0.c1)), ((rtreenode(vt2.c0, vt0.c0))>=((~ (vt2.c1)))) DESC LIMIT 1;
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt2 ON ((((v0.c3) NOT NULL))+(rtreenode(x'a4e32ece5f', v0.c3))) WHERE (((((((((((v0.c2)OR(vt2.c1)))AND(((0Xff51a7e) NOT NULL))))OR((~ (v0.c0)))))AND(v0.c1)))AND((~ (v0.c2)))));
SELECT COUNT(*) FROM v0 INNER JOIN vt2 ON ((((v0.c3) NOT NULL))+(rtreenode(x'a4e32ece5f', v0.c3))) WHERE (((((((((((((v0.c2)OR(vt2.c1)))AND(((0xff51a7e) NOT NULL))))OR((~ (v0.c0)))))AND(v0.c1)))AND((~ (v0.c2)))))AND(json((v0.c2 IN (v0.c1)))))) INTERSECT SELECT COUNT(*) FROM v0 INNER JOIN vt2 ON ((((v0.c3) NOT NULL))+(rtreenode(x'a4e32ece5f', v0.c3))) WHERE (NULL);
SELECT MIN(vt0.c0) FROM v0, vt2, vt0 WHERE (((((vt2.c1)AND(v0.c2))) IS TRUE)) ORDER BY ((((v0.c3)<(v0.c1))) NOT BETWEEN (v0.c2) AND (v0.c3)) DESC  NULLS LAST, ((0.9473345090114447 COLLATE NOCASE)<=((((vt0.c0, v0.c0, vt2.c0))>=((v0.c0, vt0.c0, v0.c2))))) ASC;
SELECT MIN(vt0.c0) FROM v0, vt2, vt0 WHERE (((((((vt2.c1)AND(v0.c2))) IS TRUE))AND((((v0.c1 IN ()))>=(((0.8769130280331063) BETWEEN (v0.c0) AND (v0.c3))))))) ORDER BY ((((v0.c3)<(v0.c1))) NOT BETWEEN (v0.c2) AND (v0.c3)) DESC  NULLS LAST, ((0.9473345090114447 COLLATE NOCASE)<=((((vt0.c0, v0.c0, vt2.c0))>=((v0.c0, vt0.c0, v0.c2))))) ASC LIMIT 0x3 INTERSECT SELECT ALL MIN(vt0.c0) FROM v0, vt2, vt0 WHERE (TRIM(((((v0.c2)AND(v0.c3)))AND(vt2.c1)), (v0.c2 IN (v0.c2)))) ORDER BY ((((v0.c3)<(v0.c1))) NOT BETWEEN (v0.c2) AND (v0.c3)) DESC  NULLS LAST, ((0.9473345090114447 COLLATE NOCASE)<=((((vt0.c0, v0.c0, vt2.c0))>=((v0.c0, vt0.c0, v0.c2))))) ASC LIMIT 3;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON (((vt0.c0)) BETWEEN ((((v0.c3) IS FALSE))) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c0 END))) WHERE ((+ ((v0.c0 IN ()))));
SELECT * FROM v0 CROSS JOIN vt0 ON (((vt0.c0)) BETWEEN ((((v0.c3) IS FALSE))) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c0 END))) WHERE ((((+ ((v0.c0 IN ()))))AND((((~ (v0.c1)))<<(CAST(v0.c3 AS REAL)))))) INTERSECT SELECT * FROM v0 CROSS JOIN vt0 ON (((vt0.c0)) BETWEEN ((((v0.c3) IS FALSE))) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c0 END))) WHERE (IFNULL(((v0.c2) NOT BETWEEN (v0.c1) AND (vt0.c0)), ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))));
SELECT ALL * FROM v0 CROSS JOIN vt0 ON (((vt0.c0)) BETWEEN ((((v0.c3) IS FALSE))) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c0 END))) WHERE ((+ ((v0.c0 IN ()))));
SELECT * FROM v0 CROSS JOIN vt0 ON (((vt0.c0)) BETWEEN ((((v0.c3) IS FALSE))) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c0 END))) WHERE ((((+ ((v0.c0 IN ()))))AND((((~ (v0.c1)))<<(CAST(v0.c3 AS REAL)))))) INTERSECT SELECT * FROM v0 CROSS JOIN vt0 ON (((vt0.c0)) BETWEEN ((((v0.c3) IS FALSE))) AND ((CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c0 END))) WHERE (IFNULL(((v0.c2) NOT BETWEEN (v0.c1) AND (vt0.c0)), ((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0))));
SELECT ALL MIN(v0.c3) FROM vt2 CROSS JOIN v0 ON TOTAL_CHANGES() WHERE (((CASE vt2.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN vt2.c1 ELSE v0.c1 END)GLOB(CASE WHEN vt2.c0 THEN v0.c1 END)));
SELECT MIN(v0.c3) FROM vt2 CROSS JOIN v0 ON TOTAL_CHANGES() WHERE (((CASE vt2.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN vt2.c1 ELSE v0.c1 END)GLOB(CASE WHEN vt2.c0 THEN v0.c1 END))) ORDER BY ((((vt2.c0) IS FALSE)) NOTNULL) DESC, ((((((((v0.c0 COLLATE BINARY)AND('')))AND((~ (vt2.c1)))))AND(((vt2.c0) ISNULL))))OR(('-1141311935' IN (v0.c2)))) ASC LIMIT 0X3;
SELECT ALL MIN(v0.c0) FROM v0, vt0 WHERE ((NOT ((NOT (vt0.c0)))));
SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE ((((NOT ((NOT (vt0.c0)))))AND((((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))GLOB(STRFTIME(v0.c1, v0.c1, v0.c0)))))) ORDER BY vt0.c0  NULLS LAST, CAST(((v0.c2) BETWEEN (vt0.c0) AND (0.8264875580423897)) AS REAL)  NULLS FIRST INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE (((('渌nSZ#' IN ('-909525804')))LIKE(((v0.c1) ISNULL)))) ORDER BY vt0.c0  NULLS LAST, CAST(((v0.c2) BETWEEN (vt0.c0) AND (0.8264875580423897)) AS REAL)  NULLS FIRST;
SELECT MAX(v0.c1) FROM v0 NATURAL JOIN vt0 WHERE (CAST(0.4144551111130331 AS REAL)) ORDER BY x'ab', (((v0.c0, (v0.c0 IN (0.9334634447246649, v0.c2)), (NOT (v0.c0)), (vt0.c0 IN (v0.c2)), UPPER(v0.c3)))=((((v0.c3) IS FALSE), ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)), (((v0.c1, '-1444834624')) NOT BETWEEN ((v0.c2, x'aac4c3')) AND ((v0.c1, 0xffffffffd84505d4))), v0.c2, TRIM(v0.c1)))) DESC  NULLS FIRST, CAST(((v0.c0) ISNULL) AS NUMERIC);
SELECT MAX(v0.c1) FROM v0 NATURAL JOIN vt0 WHERE (((CAST(0.4144551111130331 AS REAL))AND((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((((v0.c1)LIKE(v0.c1)))))))) ORDER BY x'ab', (((v0.c0, (v0.c0 IN (0.9334634447246649, v0.c2)), (NOT (v0.c0)), (vt0.c0 IN (v0.c2)), UPPER(v0.c3)))==((((v0.c3) IS FALSE), ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)), (((v0.c1, '-1444834624')) NOT BETWEEN ((v0.c2, x'aac4c3')) AND ((v0.c1, -666565164))), v0.c2, TRIM(v0.c1)))) DESC  NULLS FIRST, CAST(((v0.c0) ISNULL) AS NUMERIC) LIMIT 0X1 INTERSECT SELECT ALL MAX(v0.c1) FROM v0 NATURAL JOIN vt0 WHERE ((vt0.c0 IN ((((v0.c1, vt0.c0, 9.8982355E7))<((vt0.c0, v0.c3, x'a9b036d0')))))) ORDER BY x'ab', (((v0.c0, (v0.c0 IN (0.9334634447246649, v0.c2)), (NOT (v0.c0)), (vt0.c0 IN (v0.c2)), UPPER(v0.c3)))==((((v0.c3) IS FALSE), ((v0.c0) BETWEEN (v0.c1) AND (v0.c2)), (((v0.c1, '-1444834624')) NOT BETWEEN ((v0.c2, x'aac4c3')) AND ((v0.c1, 0xffffffffd84505d4))), v0.c2, TRIM(v0.c1)))) DESC  NULLS FIRST, CAST(((v0.c0) ISNULL) AS NUMERIC) LIMIT 0x1;
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON MAX(((((((((vt2.c1)OR(vt2.c1)))OR(v0.c1)))OR(v0.c1)))AND(v0.c1)), (+ (v0.c2)), (((vt0.c0, v0.c3, NULL, v0.c1)) NOT BETWEEN ((v0.c1, vt0.c0, vt2.c1, vt2.c1)) AND ((v0.c0, vt2.c0, v0.c3, vt2.c0)))) WHERE (v0.c1 COLLATE RTRIM);
SELECT * FROM vt2, v0 INNER JOIN vt0 ON MAX(((((((((vt2.c1)OR(vt2.c1)))OR(v0.c1)))OR(v0.c1)))AND(v0.c1)), (+ (v0.c2)), (((vt0.c0, v0.c3, NULL, v0.c1)) NOT BETWEEN ((v0.c1, vt0.c0, vt2.c1, vt2.c1)) AND ((v0.c0, vt2.c0, v0.c3, vt2.c0)))) WHERE (v0.c1 COLLATE RTRIM) ORDER BY ((((((((vt2.c0)OR(v0.c2)))AND(v0.c3)))AND(vt2.c0))) NOT BETWEEN ((v0.c0 IN ())) AND ((- (v0.c3)))), NULL DESC, (+ (((vt2.c1)<(''))))  NULLS FIRST;
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON MAX(((((((((vt2.c1)OR(vt2.c1)))OR(v0.c1)))OR(v0.c1)))AND(v0.c1)), (+ (v0.c2)), (((vt0.c0, v0.c3, NULL, v0.c1)) NOT BETWEEN ((v0.c1, vt0.c0, vt2.c1, vt2.c1)) AND ((v0.c0, vt2.c0, v0.c3, vt2.c0)))) WHERE (v0.c1 COLLATE RTRIM);
SELECT * FROM vt2, v0 INNER JOIN vt0 ON MAX(((((((((vt2.c1)OR(vt2.c1)))OR(v0.c1)))OR(v0.c1)))AND(v0.c1)), (+ (v0.c2)), (((vt0.c0, v0.c3, NULL, v0.c1)) NOT BETWEEN ((v0.c1, vt0.c0, vt2.c1, vt2.c1)) AND ((v0.c0, vt2.c0, v0.c3, vt2.c0)))) WHERE (v0.c1 COLLATE RTRIM) ORDER BY ((((((((vt2.c0)OR(v0.c2)))AND(v0.c3)))AND(vt2.c0))) NOT BETWEEN ((v0.c0 IN ())) AND ((- (v0.c3)))), NULL DESC, (+ (((vt2.c1)<(''))))  NULLS FIRST;
SELECT * FROM vt2 WHERE (0.39466756038808004);
SELECT * FROM vt2 WHERE (((0.39466756038808004)AND(CAST(vt2.c1 AS NUMERIC) COLLATE BINARY))) ORDER BY CAST((- (vt2.c0)) AS NUMERIC) DESC, (NOT (((vt2.c1) NOTNULL))) DESC  NULLS FIRST, (~ (CAST(vt2.c1 AS REAL))) ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt2 WHERE (0.39466756038808004);
SELECT * FROM vt2 WHERE (((0.39466756038808004)AND(CAST(vt2.c1 AS NUMERIC) COLLATE BINARY))) ORDER BY CAST((- (vt2.c0)) AS NUMERIC) DESC, (NOT (((vt2.c1) NOTNULL))) DESC  NULLS FIRST, (~ (CAST(vt2.c1 AS REAL))) ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0 LEFT OUTER JOIN vt0 ON ((v0.c1) IS TRUE) LEFT OUTER JOIN vt2 ON ((vt0.c0 COLLATE BINARY) BETWEEN (CAST(vt2.c0 AS NUMERIC)) AND ((- (vt2.c0)))) WHERE ((((((((((((('gt')AND(v0.c1)))AND(vt2.c1)))OR(vt2.c1)))OR(vt0.c0)))AND((((vt2.c0, v0.c1, v0.c2))!=((vt2.c0, v0.c2, vt0.c0))))))OR((- (v0.c2))))) ORDER BY (((+ (v0.c0)))<<(((((v0.c2)OR(vt2.c1)))AND(vt0.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 INNER JOIN vt0 ON ((v0.c1) IS TRUE) LEFT OUTER JOIN vt2 ON ((vt0.c0 COLLATE BINARY) BETWEEN (CAST(vt2.c0 AS NUMERIC)) AND ((- (vt2.c0)))) WHERE ((((((((((((('gt')AND(v0.c1)))AND(vt2.c1)))OR(vt2.c1)))OR(vt0.c0)))AND((((vt2.c0, v0.c1, v0.c2))>((vt2.c0, v0.c2, vt0.c0))))))OR((- (v0.c2))))) ORDER BY (((+ (v0.c0)))<<(((((v0.c2)OR(vt2.c1)))AND(vt0.c0))))  NULLS FIRST LIMIT 0;
SELECT * FROM v0 LEFT OUTER JOIN vt0 ON ((v0.c1) IS TRUE) LEFT OUTER JOIN vt2 ON ((vt0.c0 COLLATE BINARY) BETWEEN (CAST(vt2.c0 AS NUMERIC)) AND ((- (vt2.c0)))) WHERE ((((((((((((('gt')AND(v0.c1)))AND(vt2.c1)))OR(vt2.c1)))OR(vt0.c0)))AND((((vt2.c0, v0.c1, v0.c2))!=((vt2.c0, v0.c2, vt0.c0))))))OR((- (v0.c2))))) ORDER BY (((+ (v0.c0)))<<(((((v0.c2)OR(vt2.c1)))AND(vt0.c0))))  NULLS FIRST;
SELECT DISTINCT * FROM v0 INNER JOIN vt0 ON ((v0.c1) IS TRUE) LEFT OUTER JOIN vt2 ON ((vt0.c0 COLLATE BINARY) BETWEEN (CAST(vt2.c0 AS NUMERIC)) AND ((- (vt2.c0)))) WHERE ((((((((((((('gt')AND(v0.c1)))AND(vt2.c1)))OR(vt2.c1)))OR(vt0.c0)))AND((((vt2.c0, v0.c1, v0.c2))>((vt2.c0, v0.c2, vt0.c0))))))OR((- (v0.c2))))) ORDER BY (((+ (v0.c0)))<<(((((v0.c2)OR(vt2.c1)))AND(vt0.c0))))  NULLS FIRST LIMIT 0;
SELECT * FROM v0 CROSS JOIN vt2 ON 0.8563180984604724 WHERE (((((((((((((vt2.c0) BETWEEN (v0.c3) AND (v0.c3)))AND(CAST(vt2.c0 AS NUMERIC))))AND(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))))OR((((vt2.c0)) NOT BETWEEN ((0Xffffffffd8bfb5e9)) AND ((v0.c1))))))AND((((v0.c1, vt2.c1, v0.c1)) BETWEEN ((v0.c3, v0.c2, vt2.c1)) AND ((v0.c2, v0.c3, v0.c0))))))AND((((v0.c2))>=((v0.c3))))));
SELECT ALL * FROM v0 CROSS JOIN vt2 ON 0.8563180984604724 WHERE (((((((((((((vt2.c0) BETWEEN (v0.c3) AND (v0.c3)))AND(CAST(vt2.c0 AS NUMERIC))))AND(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))))OR((((vt2.c0)) NOT BETWEEN ((0Xffffffffd8bfb5e9)) AND ((v0.c1))))))AND((((v0.c1, vt2.c1, v0.c1)) BETWEEN ((v0.c3, v0.c2, vt2.c1)) AND ((v0.c2, v0.c3, v0.c0))))))AND((((v0.c2))>((v0.c3)))))) ORDER BY '-1478372600' ASC  NULLS LAST, TRIM(((vt2.c0) IS FALSE), vt2.c0 COLLATE NOCASE), (- (CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 END)) ASC  NULLS FIRST, ((((((((((v0.c0)AND(vt2.c1)))AND(vt2.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c1)) COLLATE RTRIM  NULLS LAST INTERSECT SELECT * FROM v0 CROSS JOIN vt2 ON 0.8563180984604724 WHERE (0.1280003222893139) ORDER BY '-1478372600' ASC  NULLS LAST, TRIM(((vt2.c0) IS FALSE), vt2.c0 COLLATE NOCASE), (- (CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 END)) ASC  NULLS FIRST, ((((((((((v0.c0)AND(vt2.c1)))AND(vt2.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c1)) COLLATE RTRIM  NULLS LAST;
SELECT * FROM v0 CROSS JOIN vt2 ON 0.8563180984604724 WHERE (((((((((((((vt2.c0) BETWEEN (v0.c3) AND (v0.c3)))AND(CAST(vt2.c0 AS NUMERIC))))AND(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))))OR((((vt2.c0)) NOT BETWEEN ((0Xffffffffd8bfb5e9)) AND ((v0.c1))))))AND((((v0.c1, vt2.c1, v0.c1)) BETWEEN ((v0.c3, v0.c2, vt2.c1)) AND ((v0.c2, v0.c3, v0.c0))))))AND((((v0.c2))>=((v0.c3))))));
SELECT ALL * FROM v0 CROSS JOIN vt2 ON 0.8563180984604724 WHERE (((((((((((((vt2.c0) BETWEEN (v0.c3) AND (v0.c3)))AND(CAST(vt2.c0 AS NUMERIC))))AND(((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))))OR((((vt2.c0)) NOT BETWEEN ((0Xffffffffd8bfb5e9)) AND ((v0.c1))))))AND((((v0.c1, vt2.c1, v0.c1)) BETWEEN ((v0.c3, v0.c2, vt2.c1)) AND ((v0.c2, v0.c3, v0.c0))))))AND((((v0.c2))>((v0.c3)))))) ORDER BY '-1478372600' ASC  NULLS LAST, TRIM(((vt2.c0) IS FALSE), vt2.c0 COLLATE NOCASE), (- (CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 END)) ASC  NULLS FIRST, ((((((((((v0.c0)AND(vt2.c1)))AND(vt2.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c1)) COLLATE RTRIM  NULLS LAST INTERSECT SELECT * FROM v0 CROSS JOIN vt2 ON 0.8563180984604724 WHERE (0.1280003222893139) ORDER BY '-1478372600' ASC  NULLS LAST, TRIM(((vt2.c0) IS FALSE), vt2.c0 COLLATE NOCASE), (- (CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN v0.c0 END)) ASC  NULLS FIRST, ((((((((((v0.c0)AND(vt2.c1)))AND(vt2.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c1)) COLLATE RTRIM  NULLS LAST;
SELECT ALL MAX(vt2.c0) FROM v0, vt2 WHERE (((((- (v0.c2)), ((((((v0.c1)AND(v0.c2)))OR(vt2.c1)))AND(vt2.c0)), ((v0.c1) NOT NULL)))>=((((('', vt2.c1, v0.c0, v0.c3, v0.c2))==((v0.c1, vt2.c0, v0.c2, v0.c3, vt2.c1))), CASE v0.c2  WHEN vt2.c1 THEN v0.c2 WHEN v0.c2 THEN '|﬑~' END, (((vt2.c1, vt2.c0, v0.c2, v0.c1, v0.c2, v0.c0)) BETWEEN ((NULL, v0.c0, v0.c1, vt2.c1, v0.c1, vt2.c0)) AND ((v0.c3, v0.c0, v0.c0, v0.c0, 0X62231353, 0Xffffffffcb6829df)))))));
SELECT DISTINCT MAX(vt2.c0) FROM v0, vt2 WHERE (((((((- (v0.c2)), ((((((v0.c1)AND(v0.c2)))OR(vt2.c1)))AND(vt2.c0)), ((v0.c1) NOT NULL)))>=((((('', vt2.c1, v0.c0, v0.c3, v0.c2))=((v0.c1, vt2.c0, v0.c2, v0.c3, vt2.c1))), CASE v0.c2  WHEN vt2.c1 THEN v0.c2 WHEN v0.c2 THEN '|﬑~' END, (((vt2.c1, vt2.c0, v0.c2, v0.c1, v0.c2, v0.c0)) BETWEEN ((NULL, v0.c0, v0.c1, vt2.c1, v0.c1, vt2.c0)) AND ((v0.c3, v0.c0, v0.c0, v0.c0, 1646465875, -882365985)))))))AND((((vt2.c0)>=(v0.c2)) IN ((- (vt2.c0))))))) LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((('')) BETWEEN ((v0.c3)) AND ((((((906982824)AND(vt2.c0)))AND(v0.c2))))));
SELECT * FROM vt2, vt0, v0 WHERE (((('')) BETWEEN ((v0.c3)) AND ((((((906982824)AND(vt2.c0)))AND(v0.c2)))))) LIMIT 1;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((('')) BETWEEN ((v0.c3)) AND ((((((906982824)AND(vt2.c0)))AND(v0.c2))))));
SELECT * FROM vt2, vt0, v0 WHERE (((('')) BETWEEN ((v0.c3)) AND ((((((906982824)AND(vt2.c0)))AND(v0.c2)))))) LIMIT 1;
SELECT MIN(v0.c1) FROM vt0, vt2, v0 WHERE ((((v0.c0 IN (v0.c0, v0.c1))) NOT NULL));
SELECT MIN(v0.c1) FROM vt0, vt2, v0 WHERE ((((((v0.c0 IN (v0.c0, v0.c1))) NOT NULL))AND(((((((((vt2.c1)+(vt2.c0)))OR(CASE v0.c1  WHEN vt0.c0 THEN vt0.c0 END)))OR(CAST(v0.c3 AS REAL))))AND(((0.38398572135026865) IS TRUE))))));
SELECT ALL MAX(v0.c0) FROM v0 WHERE (((((v0.c3) BETWEEN (v0.c1) AND (v0.c2)))OR(((((v0.c2)OR(v0.c3)))AND(v0.c0)))));
SELECT MAX(v0.c0) FROM v0 WHERE (((((v0.c3) BETWEEN (v0.c1) AND (v0.c2)))OR(((((v0.c2)OR(v0.c3)))AND(v0.c0))))) ORDER BY CASE (v0.c2 IN (v0.c3))  WHEN (v0.c1 IN (v0.c2)) THEN ((0.41908509209070044) NOT NULL) END ASC  NULLS FIRST, -5.67218797E8, ((CAST(v0.c3 AS REAL))IS(((v0.c0) ISNULL)))  NULLS LAST LIMIT 0x0 INTERSECT SELECT ALL MAX(v0.c0) FROM v0 WHERE ((((((((v0.c0, v0.c2, v0.c2, v0.c1))<=((v0.c1, v0.c0, v0.c3, 0.798796088250524))))AND(NULLIF(v0.c2, NULL))))AND(CAST(v0.c3 AS TEXT)))) ORDER BY CASE (v0.c2 IN (v0.c3))  WHEN (v0.c1 IN (v0.c2)) THEN ((0.41908509209070044) NOT NULL) END ASC  NULLS FIRST, -5.67218797E8, ((CAST(v0.c3 AS REAL))IS(((v0.c0) ISNULL)))  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((vt2.c0) IS TRUE) IN ('-1844406347', (vt2.c0 IN (v0.c0, vt2.c1, vt2.c0)))) WHERE (((((v0.c3)>>(v0.c3)))<(v0.c2 COLLATE NOCASE)));
SELECT ALL * FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((vt2.c0) IS TRUE) IN ('-1844406347', (vt2.c0 IN (v0.c0, vt2.c1, vt2.c0)))) WHERE (((((((v0.c3)>>(v0.c3)))<(v0.c2 COLLATE NOCASE)))AND((+ (vt2.c0)) COLLATE BINARY))) ORDER BY ((((((((((((vt2.c0)|(v0.c1)))OR(vt2.c0)))AND(MIN(vt2.c0, vt0.c0, vt2.c1))))OR(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(CASE WHEN vt2.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 END)))AND(((vt0.c0)-(v0.c2)))) INTERSECT SELECT ALL * FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((vt2.c0) IS TRUE) IN ('-1844406347', (vt2.c0 IN (v0.c0, vt2.c1, vt2.c0)))) WHERE (-2132903346) ORDER BY ((((((((((((vt2.c0)|(v0.c1)))OR(vt2.c0)))AND(MIN(vt2.c0, vt0.c0, vt2.c1))))OR(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(CASE WHEN vt2.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 END)))AND(((vt0.c0)-(v0.c2))));
SELECT ALL * FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((vt2.c0) IS TRUE) IN ('-1844406347', (vt2.c0 IN (v0.c0, vt2.c1, vt2.c0)))) WHERE (((((v0.c3)>>(v0.c3)))<(v0.c2 COLLATE NOCASE)));
SELECT ALL * FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((vt2.c0) IS TRUE) IN ('-1844406347', (vt2.c0 IN (v0.c0, vt2.c1, vt2.c0)))) WHERE (((((((v0.c3)>>(v0.c3)))<(v0.c2 COLLATE NOCASE)))AND((+ (vt2.c0)) COLLATE BINARY))) ORDER BY ((((((((((((vt2.c0)|(v0.c1)))OR(vt2.c0)))AND(MIN(vt2.c0, vt0.c0, vt2.c1))))OR(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(CASE WHEN vt2.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 END)))AND(((vt0.c0)-(v0.c2)))) INTERSECT SELECT ALL * FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((vt2.c0) IS TRUE) IN ('-1844406347', (vt2.c0 IN (v0.c0, vt2.c1, vt2.c0)))) WHERE (-2132903346) ORDER BY ((((((((((((vt2.c0)|(v0.c1)))OR(vt2.c0)))AND(MIN(vt2.c0, vt0.c0, vt2.c1))))OR(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))OR(CASE WHEN vt2.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN vt2.c0 END)))AND(((vt0.c0)-(v0.c2))));
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE (((CAST(v0.c2 AS REAL)) ISNULL));
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE (((((CAST(v0.c2 AS REAL)) ISNULL))AND((((((v0.c0, v0.c1, 9.55661194E8))!=((vt2.c1, vt2.c0, vt0.c0))))AND(x'ee'))))) INTERSECT SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE ((((+ (v0.c2))) IS TRUE));
SELECT ALL * FROM vt0, v0 WHERE ((((NOT (v0.c3))) ISNULL)) ORDER BY CASE WHEN ((v0.c2)GLOB(v0.c2)) THEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) WHEN v0.c1 THEN v0.c2 ELSE (v0.c1 IN (v0.c1)) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE ((((((NOT (v0.c3))) ISNULL))AND((((((v0.c1 IN (v0.c3)))OR(NULL)))OR((+ (-941041463))))))) ORDER BY CASE ((v0.c0) BETWEEN (v0.c2) AND (v0.c0))  WHEN ((v0.c0)+(vt0.c0)) THEN ((v0.c2)IS NOT(v0.c1)) WHEN (v0.c2 IN ()) THEN rtreenode(v0.c0, v0.c3) WHEN CAST(v0.c3 AS TEXT) THEN (+ (v0.c1)) ELSE CAST(v0.c1 AS BLOB) END, ((((v0.c1)/(vt0.c0))) BETWEEN (vt0.c0) AND ((~ (v0.c1))))  NULLS LAST, json_insert(((v0.c2) ISNULL), (((vt0.c0))<>((v0.c2))), CASE WHEN vt0.c0 THEN '-1712915188' END);
SELECT ALL * FROM vt0, v0 WHERE ((((NOT (v0.c3))) ISNULL)) ORDER BY CASE WHEN ((v0.c2)GLOB(v0.c2)) THEN ((vt0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) WHEN v0.c1 THEN v0.c2 ELSE (v0.c1 IN (v0.c1)) END DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE ((((((NOT (v0.c3))) ISNULL))AND((((((v0.c1 IN (v0.c3)))OR(NULL)))OR((+ (-941041463))))))) ORDER BY CASE ((v0.c0) BETWEEN (v0.c2) AND (v0.c0))  WHEN ((v0.c0)+(vt0.c0)) THEN ((v0.c2)IS NOT(v0.c1)) WHEN (v0.c2 IN ()) THEN rtreenode(v0.c0, v0.c3) WHEN CAST(v0.c3 AS TEXT) THEN (+ (v0.c1)) ELSE CAST(v0.c1 AS BLOB) END, ((((v0.c1)/(vt0.c0))) BETWEEN (vt0.c0) AND ((~ (v0.c1))))  NULLS LAST, json_insert(((v0.c2) ISNULL), (((vt0.c0))<>((v0.c2))), CASE WHEN vt0.c0 THEN '-1712915188' END);
SELECT MIN(vt0.c0) FROM vt0 WHERE ((- (((0.3294699120307655)|(vt0.c0))))) ORDER BY ((vt0.c0)<((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))), (((((vt0.c0)LIKE(vt0.c0)), CAST(vt0.c0 AS BLOB)))<=(((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))), ((vt0.c0) BETWEEN (vt0.c0) AND (NULL))))) DESC;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((- (((0.3294699120307655)|(vt0.c0))))) ORDER BY ((vt0.c0)<((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))), (((((vt0.c0)LIKE(vt0.c0)), CAST(vt0.c0 AS BLOB)))<=(((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))), ((vt0.c0) BETWEEN (vt0.c0) AND (NULL))))) DESC INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE RTRIM) ISNULL)) ORDER BY ((vt0.c0)<((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))))), (((((vt0.c0)LIKE(vt0.c0)), CAST(vt0.c0 AS BLOB)))<=(((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))), ((vt0.c0) BETWEEN (vt0.c0) AND (NULL))))) DESC;
SELECT ALL * FROM vt2 NOT INDEXED, v0, vt0 WHERE (CASE v0.c1  WHEN ((vt2.c1)+(v0.c3)) THEN vt0.c0 COLLATE RTRIM WHEN NULL THEN CAST(vt0.c0 AS REAL) WHEN ((v0.c3)<>(vt2.c0)) THEN ((v0.c1)<>(vt0.c0)) WHEN ((vt2.c1) BETWEEN ('q*Uk륳') AND (vt2.c0)) THEN CAST(v0.c1 AS INTEGER) END);
SELECT ALL * FROM vt2, v0, vt0 WHERE (((CASE v0.c1  WHEN ((vt2.c1)+(v0.c3)) THEN vt0.c0 COLLATE RTRIM WHEN NULL THEN CAST(vt0.c0 AS REAL) WHEN ((v0.c3)<(vt2.c0)) THEN ((v0.c1)<(vt0.c0)) WHEN ((vt2.c1) BETWEEN ('q*Uk륳') AND (vt2.c0)) THEN CAST(v0.c1 AS INTEGER) END)AND((NOT (','))))) INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (CAST((((((('z')OR(vt2.c0)))AND(v0.c3)))OR(v0.c3)) AS REAL));
SELECT ALL * FROM vt2 NOT INDEXED, v0, vt0 WHERE (CASE v0.c1  WHEN ((vt2.c1)+(v0.c3)) THEN vt0.c0 COLLATE RTRIM WHEN NULL THEN CAST(vt0.c0 AS REAL) WHEN ((v0.c3)<>(vt2.c0)) THEN ((v0.c1)<>(vt0.c0)) WHEN ((vt2.c1) BETWEEN ('q*Uk륳') AND (vt2.c0)) THEN CAST(v0.c1 AS INTEGER) END);
SELECT ALL * FROM vt2, v0, vt0 WHERE (((CASE v0.c1  WHEN ((vt2.c1)+(v0.c3)) THEN vt0.c0 COLLATE RTRIM WHEN NULL THEN CAST(vt0.c0 AS REAL) WHEN ((v0.c3)<(vt2.c0)) THEN ((v0.c1)<(vt0.c0)) WHEN ((vt2.c1) BETWEEN ('q*Uk륳') AND (vt2.c0)) THEN CAST(v0.c1 AS INTEGER) END)AND((NOT (','))))) INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (CAST((((((('z')OR(vt2.c0)))AND(v0.c3)))OR(v0.c3)) AS REAL));
SELECT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (((+ (v0.c2)) IN ()));
SELECT DISTINCT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (((+ (v0.c2)) IN ())) LIMIT 0;
SELECT * FROM vt2, v0, vt0 WHERE (CASE WHEN v0.c0 THEN ((((((v0.c0)AND(v0.c2)))OR(v0.c0)))AND(vt0.c0)) END) ORDER BY ((v0.c3 IN ()) IN ());
SELECT ALL * FROM vt2, v0, vt0 WHERE (((CASE WHEN v0.c0 THEN ((((((v0.c0)AND(v0.c2)))OR(v0.c0)))AND(vt0.c0)) END)AND(0.48463391837208036))) ORDER BY v0.c1, CASE ((vt0.c0) NOT NULL)  WHEN ((vt0.c0)>=(vt0.c0)) THEN v0.c0 COLLATE BINARY ELSE ((vt2.c1)*(vt2.c1)) END DESC LIMIT 0X2;
SELECT * FROM vt2, v0, vt0 WHERE (CASE WHEN v0.c0 THEN ((((((v0.c0)AND(v0.c2)))OR(v0.c0)))AND(vt0.c0)) END) ORDER BY ((v0.c3 IN ()) IN ());
SELECT COUNT(*) FROM v0 WHERE (v0.c2) ORDER BY v0.c2 DESC, ((v0.c3)GLOB((v0.c3 IN (v0.c3, v0.c3)))) DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE (((v0.c2)AND(CAST(v0.c3 AS INTEGER)))) ORDER BY v0.c2 DESC, ((v0.c3)GLOB((v0.c3 IN (v0.c3, v0.c3)))) DESC  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (vt0.c0 COLLATE NOCASE);
SELECT MIN(vt0.c0) FROM vt0 WHERE (((vt0.c0 COLLATE NOCASE)AND((((vt0.c0, vt0.c0)) NOT BETWEEN ((((((((((NULL)AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)), LOWER(vt0.c0))) AND ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), x'63')))))) LIMIT 0x0 INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((+ (vt0.c0)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))<=((CASE WHEN vt0.c0 THEN vt0.c0 END, CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)))) LIMIT 0;
SELECT * FROM v0, vt0, vt2 WHERE ((((vt2.c1 IN ()))>((((v0.c2)) BETWEEN ((vt2.c1)) AND ((0xffffffffb29edc9e))))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((vt2.c1 IN ()))>((((v0.c2)) BETWEEN ((vt2.c1)) AND ((0xffffffffb29edc9e)))))) ORDER BY COALESCE(((vt0.c0) BETWEEN (v0.c1) AND (vt2.c1)), ((v0.c1)LIKE(v0.c3)), CAST(v0.c2 AS NUMERIC), (- (v0.c2))), ((((vt0.c0) IS TRUE)) NOT BETWEEN ((((v0.c1, v0.c2)) NOT BETWEEN ((vt0.c0, v0.c2)) AND ((v0.c0, vt2.c0)))) AND (((v0.c2)OR(v0.c0)))), ((((v0.c2)LIKE(vt0.c0))) NOTNULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((vt2.c1 IN ())) NOT BETWEEN (((vt2.c1)IS NOT(vt2.c1))) AND ((v0.c0 IN (vt2.c0))))) ORDER BY COALESCE(((vt0.c0) BETWEEN (v0.c1) AND (vt2.c1)), ((v0.c1)LIKE(v0.c3)), CAST(v0.c2 AS NUMERIC), (- (v0.c2))), ((((vt0.c0) IS TRUE)) NOT BETWEEN ((((v0.c1, v0.c2)) NOT BETWEEN ((vt0.c0, v0.c2)) AND ((v0.c0, vt2.c0)))) AND (((v0.c2)OR(v0.c0)))), ((((v0.c2)LIKE(vt0.c0))) NOTNULL) ASC  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE ((((vt2.c1 IN ()))>((((v0.c2)) BETWEEN ((vt2.c1)) AND ((0xffffffffb29edc9e))))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((vt2.c1 IN ()))>((((v0.c2)) BETWEEN ((vt2.c1)) AND ((0xffffffffb29edc9e)))))) ORDER BY COALESCE(((vt0.c0) BETWEEN (v0.c1) AND (vt2.c1)), ((v0.c1)LIKE(v0.c3)), CAST(v0.c2 AS NUMERIC), (- (v0.c2))), ((((vt0.c0) IS TRUE)) NOT BETWEEN ((((v0.c1, v0.c2)) NOT BETWEEN ((vt0.c0, v0.c2)) AND ((v0.c0, vt2.c0)))) AND (((v0.c2)OR(v0.c0)))), ((((v0.c2)LIKE(vt0.c0))) NOTNULL) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((vt2.c1 IN ())) NOT BETWEEN (((vt2.c1)IS NOT(vt2.c1))) AND ((v0.c0 IN (vt2.c0))))) ORDER BY COALESCE(((vt0.c0) BETWEEN (v0.c1) AND (vt2.c1)), ((v0.c1)LIKE(v0.c3)), CAST(v0.c2 AS NUMERIC), (- (v0.c2))), ((((vt0.c0) IS TRUE)) NOT BETWEEN ((((v0.c1, v0.c2)) NOT BETWEEN ((vt0.c0, v0.c2)) AND ((v0.c0, vt2.c0)))) AND (((v0.c2)OR(v0.c0)))), ((((v0.c2)LIKE(vt0.c0))) NOTNULL) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2, v0 WHERE (HEX(((vt2.c1)>(v0.c2)))) ORDER BY ABS(v0.c2)  NULLS LAST, x'89a05a';
SELECT COUNT(*) FROM vt2, v0 WHERE (HEX(((vt2.c1)>(v0.c2)))) ORDER BY ABS(v0.c2)  NULLS LAST, x'89a05a' INTERSECT SELECT COUNT(*) FROM vt2, v0 WHERE (((vt2.c0 IN ()) IN ())) ORDER BY ABS(v0.c2)  NULLS LAST, x'89a05a';
SELECT ALL MIN(vt0.c0) FROM vt2 INNER JOIN vt0 ON ((((((vt2.c1)AND(v0.c1)))AND(v0.c3)))<>(((v0.c3)LIKE(v0.c1)))) LEFT OUTER JOIN v0 ON ((((((((v0.c0)%(vt0.c0)))OR(((vt0.c0) IS FALSE))))AND((((v0.c2, v0.c3))<=((NULL, vt2.c0))))))OR(0.1732542614452336)) WHERE (UPPER(DISTINCT ((v0.c3) NOT NULL)));
SELECT DISTINCT MIN(vt0.c0) FROM vt2 INNER JOIN vt0 ON ((((((vt2.c1)AND(v0.c1)))AND(v0.c3)))<>(((v0.c3)LIKE(v0.c1)))) INNER JOIN v0 ON ((((((((v0.c0)%(vt0.c0)))OR(((vt0.c0) IS FALSE))))AND((((v0.c2, v0.c3))<=((NULL, vt2.c0))))))OR(0.1732542614452336)) WHERE (UPPER(DISTINCT ((v0.c3) NOT NULL))) ORDER BY CAST(NULLIF(vt2.c0, vt2.c1) AS NUMERIC) LIMIT 3;
SELECT * FROM v0, vt2 WHERE (((NULLIF(DISTINCT vt2.c1, v0.c1)) NOT BETWEEN ((v0.c0 IN (v0.c3, v0.c3))) AND (((v0.c3)!=(vt2.c1)))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((NULLIF(DISTINCT vt2.c1, v0.c1)) NOT BETWEEN ((v0.c0 IN (v0.c3, v0.c3))) AND (((v0.c3)<>(vt2.c1)))))AND((+ (v0.c2)) COLLATE NOCASE))) ORDER BY ((((v0.c3) NOT BETWEEN (x'5c') AND (vt2.c1))) NOT BETWEEN (CASE WHEN v0.c3 THEN v0.c0 ELSE v0.c1 END) AND (NULLIF(DISTINCT v0.c1, vt2.c1))) ASC, CAST(CAST(vt2.c0 AS REAL) AS INTEGER) ASC LIMIT 0x0;
SELECT * FROM v0, vt2 WHERE (((NULLIF(DISTINCT vt2.c1, v0.c1)) NOT BETWEEN ((v0.c0 IN (v0.c3, v0.c3))) AND (((v0.c3)!=(vt2.c1)))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((((NULLIF(DISTINCT vt2.c1, v0.c1)) NOT BETWEEN ((v0.c0 IN (v0.c3, v0.c3))) AND (((v0.c3)<>(vt2.c1)))))AND((+ (v0.c2)) COLLATE NOCASE))) ORDER BY ((((v0.c3) NOT BETWEEN (x'5c') AND (vt2.c1))) NOT BETWEEN (CASE WHEN v0.c3 THEN v0.c0 ELSE v0.c1 END) AND (NULLIF(DISTINCT v0.c1, vt2.c1))) ASC, CAST(CAST(vt2.c0 AS REAL) AS INTEGER) ASC LIMIT 0x0;
SELECT * FROM vt0 WHERE (((LIKELIHOOD(DISTINCT vt0.c0, 'n)'))IS NOT(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((LIKELIHOOD(DISTINCT vt0.c0, 'n)'))IS NOT(vt0.c0))) ORDER BY ((vt0.c0)-(vt0.c0)) COLLATE RTRIM  NULLS FIRST, CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE NOCASE LIMIT 0X2;
SELECT * FROM vt0 WHERE (((LIKELIHOOD(DISTINCT vt0.c0, 'n)'))IS NOT(vt0.c0)));
SELECT ALL MAX(vt0.c0) FROM vt0, vt2 WHERE ((~ (((((((((((((vt2.c0)OR(vt2.c1)))OR(vt0.c0)))AND(vt2.c0)))OR(x'')))OR(vt2.c1)))AND(vt0.c0))))) ORDER BY ((CASE '୻Ei9'  WHEN vt2.c0 THEN vt0.c0 WHEN x'590e3b' THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN x'' ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, (CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 END IN ('1090913443')) DESC, (((('䄞' COLLATE NOCASE)OR(((0.5323925151511328) NOT NULL))))AND((vt2.c0 IN (vt2.c1))))  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0, vt2 WHERE ((((~ (((((((((((((vt2.c0)OR(vt2.c1)))OR(vt0.c0)))AND(vt2.c0)))OR(x'')))OR(vt2.c1)))AND(vt0.c0)))))AND((((CAST(vt2.c1 AS BLOB), ((vt2.c0)<=(vt2.c0)), ((vt0.c0)&(vt2.c0))))>=((UNICODE(vt0.c0), x'', CAST(vt2.c0 AS TEXT))))))) ORDER BY ((CASE '୻Ei9'  WHEN vt2.c0 THEN vt0.c0 WHEN x'590e3b' THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN x'' ELSE vt0.c0 END) IS FALSE)  NULLS FIRST, (CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 END IN ('1090913443')) DESC, (((('䄞' COLLATE NOCASE)OR(((0.5323925151511328) NOT NULL))))AND((vt2.c0 IN (vt2.c1))))  NULLS FIRST LIMIT 0;
SELECT * FROM vt0, vt2 WHERE (CAST(CAST(vt2.c0 AS BLOB) AS NUMERIC));
SELECT * FROM vt0, vt2 WHERE (((CAST(CAST(vt2.c0 AS BLOB) AS NUMERIC))AND(((vt2.c0) ISNULL) COLLATE NOCASE))) ORDER BY (((vt2.c0, vt2.c1, vt2.c1))=((vt2.c1, vt2.c1, vt2.c1))) COLLATE RTRIM DESC  NULLS LAST, (((vt2.c1 IN (vt2.c1)))>>(vt0.c0)) INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ((CAST(vt2.c0 AS TEXT) IN ())) ORDER BY (((vt2.c0, vt2.c1, vt2.c1))=((vt2.c1, vt2.c1, vt2.c1))) COLLATE RTRIM DESC  NULLS LAST, (((vt2.c1 IN (vt2.c1)))>>(vt0.c0));
SELECT * FROM vt0, vt2 WHERE (CAST(CAST(vt2.c0 AS BLOB) AS NUMERIC));
SELECT * FROM vt0, vt2 WHERE (((CAST(CAST(vt2.c0 AS BLOB) AS NUMERIC))AND(((vt2.c0) ISNULL) COLLATE NOCASE))) ORDER BY (((vt2.c0, vt2.c1, vt2.c1))=((vt2.c1, vt2.c1, vt2.c1))) COLLATE RTRIM DESC  NULLS LAST, (((vt2.c1 IN (vt2.c1)))>>(vt0.c0)) INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ((CAST(vt2.c0 AS TEXT) IN ())) ORDER BY (((vt2.c0, vt2.c1, vt2.c1))=((vt2.c1, vt2.c1, vt2.c1))) COLLATE RTRIM DESC  NULLS LAST, (((vt2.c1 IN (vt2.c1)))>>(vt0.c0));
SELECT * FROM vt0 WHERE (x'' COLLATE BINARY);
SELECT DISTINCT * FROM vt0 WHERE (((x'' COLLATE BINARY)AND((((+ (vt0.c0))) NOT BETWEEN (NULLIF(vt0.c0, vt0.c0)) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)))));
SELECT * FROM vt0 WHERE (x'' COLLATE BINARY);
SELECT DISTINCT * FROM vt0 WHERE (((x'' COLLATE BINARY)AND((((+ (vt0.c0))) NOT BETWEEN (NULLIF(vt0.c0, vt0.c0)) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)))));
SELECT * FROM vt2, vt0 WHERE (((- (vt0.c0)) IN (((vt2.c1) NOTNULL))));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((- (vt0.c0)) IN (((vt2.c1) NOTNULL))))AND(CAST('dle>&63>' AS NUMERIC) COLLATE NOCASE COLLATE RTRIM)));
SELECT * FROM vt2, vt0 WHERE (((- (vt0.c0)) IN (((vt2.c1) NOTNULL))));
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((- (vt0.c0)) IN (((vt2.c1) NOTNULL))))AND(CAST('dle>&63>' AS NUMERIC) COLLATE NOCASE COLLATE RTRIM)));
SELECT * FROM vt0 WHERE ((+ ((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0))))));
SELECT * FROM vt0 WHERE ((+ ((((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0)))))) ORDER BY ((vt0.c0) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ('a')) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt0 WHERE ((+ ((((vt0.c0, vt0.c0))<=((vt0.c0, vt0.c0))))));
SELECT * FROM vt0 WHERE ((+ ((((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0)))))) ORDER BY ((vt0.c0) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ('a')) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM v0, vt0, vt2 WHERE (((((v0.c1)<<(v0.c0))) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3))) AND (CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END))) ORDER BY (+ (CASE vt0.c0  WHEN v0.c0 THEN 'T' WHEN v0.c2 THEN vt2.c0 ELSE v0.c1 END))  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE (((((((v0.c1)<<(v0.c0))) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3))) AND (CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END)))AND(((((vt2.c0)%(vt2.c0))) IS FALSE)))) ORDER BY (+ (CASE vt0.c0  WHEN v0.c0 THEN 'T' WHEN v0.c2 THEN vt2.c0 ELSE v0.c1 END))  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE (((((v0.c1)<<(v0.c0))) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3))) AND (CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END))) ORDER BY (+ (CASE vt0.c0  WHEN v0.c0 THEN 'T' WHEN v0.c2 THEN vt2.c0 ELSE v0.c1 END))  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE (((((((v0.c1)<<(v0.c0))) NOT BETWEEN (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3))) AND (CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c1 END)))AND(((((vt2.c0)%(vt2.c0))) IS FALSE)))) ORDER BY (+ (CASE vt0.c0  WHEN v0.c0 THEN 'T' WHEN v0.c2 THEN vt2.c0 ELSE v0.c1 END))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((vt0.c0) NOT NULL))<(CASE WHEN vt0.c0 THEN NULL END)));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((vt0.c0) NOT NULL))<(CASE WHEN vt0.c0 THEN NULL END)))AND(CASE WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN NULL ELSE CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 't驹' END END))) ORDER BY (~ (vt0.c0)) ASC LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CAST(((vt0.c0)OR(NULL)) AS TEXT)) ORDER BY (~ (vt0.c0)) ASC LIMIT 0;
SELECT ALL * FROM vt2, v0 WHERE (((((v0.c0) IS FALSE)) ISNULL)) ORDER BY ((v0.c2)IS NOT(v0.c1)) COLLATE NOCASE, ((x'') NOTNULL);
SELECT DISTINCT * FROM vt2, v0 NOT INDEXED WHERE (((((((v0.c0) IS FALSE)) ISNULL))AND((+ (NULL))))) ORDER BY ((v0.c2)IS NOT(v0.c1)) COLLATE NOCASE, ((x'') NOTNULL) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (NULL) ORDER BY ((v0.c2)IS NOT(v0.c1)) COLLATE NOCASE, ((x'') NOTNULL);
SELECT ALL * FROM vt2, v0 WHERE (((((v0.c0) IS FALSE)) ISNULL)) ORDER BY ((v0.c2)IS NOT(v0.c1)) COLLATE NOCASE, ((x'') NOTNULL);
SELECT DISTINCT * FROM vt2, v0 NOT INDEXED WHERE (((((((v0.c0) IS FALSE)) ISNULL))AND((+ (NULL))))) ORDER BY ((v0.c2)IS NOT(v0.c1)) COLLATE NOCASE, ((x'') NOTNULL) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (NULL) ORDER BY ((v0.c2)IS NOT(v0.c1)) COLLATE NOCASE, ((x'') NOTNULL);
SELECT COUNT(*) FROM vt0, vt2 WHERE (vt2.c1) ORDER BY ((vt2.c0) ISNULL) COLLATE BINARY COLLATE NOCASE, (((- (vt2.c1))) BETWEEN (((vt2.c1)GLOB(NULL))) AND (TRIM(DISTINCT vt2.c0, vt2.c0))), (((((('0.6752456599976012')AND(vt2.c1)))OR(vt0.c0)))>>(IFNULL(vt0.c0, vt2.c0))) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt0, vt2 WHERE (vt2.c1) ORDER BY ((((x'') IS TRUE))&((vt2.c0 IN (vt0.c0)))) ASC, vt2.c0 ASC  NULLS FIRST, ((((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0)))GLOB((vt2.c1 IN (vt0.c0))))  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2 WHERE (((vt2.c0) BETWEEN ((~ (vt2.c1))) AND (CAST(vt0.c0 AS TEXT)))) ORDER BY ((((x'') IS TRUE))&((vt2.c0 IN (vt0.c0)))) ASC, vt2.c0 ASC  NULLS FIRST, ((((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0)))GLOB((vt2.c1 IN (vt0.c0))))  NULLS FIRST LIMIT 1;
SELECT ALL MIN(v0.c0) FROM v0 WHERE (UNLIKELY(DISTINCT ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c1)))) ORDER BY CAST(v0.c3 COLLATE NOCASE AS BLOB) ASC  NULLS LAST;
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (UNLIKELY(DISTINCT ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c1)))) ORDER BY CAST(v0.c3 COLLATE NOCASE AS BLOB) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM v0 WHERE (NULL);
SELECT ALL * FROM v0 WHERE (((NULL)AND(((((v0.c0) ISNULL)) BETWEEN (((v0.c2)/(v0.c3))) AND ((2.017635915E9 IN (v0.c1))))))) ORDER BY (+ (UPPER(v0.c3)))  NULLS FIRST, ((((v0.c0) IS TRUE)) NOT NULL), ((v0.c0)||((v0.c0 IN (v0.c1)))) DESC LIMIT 0X3;
SELECT * FROM v0 WHERE (NULL);
SELECT ALL * FROM v0 WHERE (((NULL)AND(((((v0.c0) ISNULL)) BETWEEN (((v0.c2)/(v0.c3))) AND ((2.017635915E9 IN (v0.c1))))))) ORDER BY (+ (UPPER(v0.c3)))  NULLS FIRST, ((((v0.c0) IS TRUE)) NOT NULL), ((v0.c0)||((v0.c0 IN (v0.c1)))) DESC LIMIT 0X3;
SELECT ALL MIN(v0.c0) FROM vt2, vt0, v0 WHERE (((v0.c3)>=(v0.c3)) COLLATE BINARY) ORDER BY (((v0.c3 IN (v0.c1, v0.c0)))==(v0.c3)) ASC, (~ (vt2.c1));
SELECT MIN(v0.c0) FROM vt2, vt0, v0 WHERE (((v0.c3)=(v0.c3)) COLLATE BINARY) ORDER BY (((v0.c3 IN (v0.c1, v0.c0)))=(v0.c3)) ASC, (~ (vt2.c1)) INTERSECT SELECT ALL MIN(v0.c0) FROM vt2, vt0, v0 WHERE ((((((((vt2.c1 IN ()))OR(((((((v0.c0)OR(vt2.c0)))OR(v0.c1)))AND(v0.c1)))))OR(x'ae')))AND(TRIM(vt0.c0)))) ORDER BY (((v0.c3 IN (v0.c1, v0.c0)))==(v0.c3)) ASC, (~ (vt2.c1));
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON x'16c4' WHERE (TRIM(DISTINCT ((((((v0.c0)AND(vt2.c1)))OR(v0.c1)))AND(vt0.c0))));
SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON x'16c4' WHERE (((TRIM(DISTINCT ((((((v0.c0)AND(vt2.c1)))OR(v0.c1)))AND(vt0.c0))))AND((((vt0.c0 IN (vt2.c1))) BETWEEN (((((((((x'')AND(vt0.c0)))AND(v0.c3)))OR(vt0.c0)))AND(vt0.c0))) AND (x'21'))))) LIMIT 0x3;
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON x'16c4' WHERE (TRIM(DISTINCT ((((((v0.c0)AND(vt2.c1)))OR(v0.c1)))AND(vt0.c0))));
SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON x'16c4' WHERE (((TRIM(DISTINCT ((((((v0.c0)AND(vt2.c1)))OR(v0.c1)))AND(vt0.c0))))AND((((vt0.c0 IN (vt2.c1))) BETWEEN (((((((((x'')AND(vt0.c0)))AND(v0.c3)))OR(vt0.c0)))AND(vt0.c0))) AND (x'21'))))) LIMIT 0x3;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE (vt0.c0) ORDER BY CASE WHEN NULL THEN (((v0.c0, v0.c0)) BETWEEN ((NULL, vt0.c0)) AND ((vt0.c0, v0.c1))) ELSE v0.c2 COLLATE RTRIM END;
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((vt0.c0)AND(LOWER(DISTINCT ((v0.c0) ISNULL))))) ORDER BY v0.c0, LAST_INSERT_ROWID()  NULLS FIRST, (- (CAST(v0.c2 AS NUMERIC))) ASC  NULLS FIRST, ((((CAST(v0.c2 AS INTEGER))AND(v0.c2 COLLATE BINARY)))AND(v0.c2)) INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((v0.c3) NOT NULL)) ORDER BY v0.c0, LAST_INSERT_ROWID()  NULLS FIRST, (- (CAST(v0.c2 AS NUMERIC))) ASC  NULLS FIRST, ((((CAST(v0.c2 AS INTEGER))AND(v0.c2 COLLATE BINARY)))AND(v0.c2));
SELECT MIN(vt0.c0) FROM vt2, vt0 WHERE ((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c0))) COLLATE NOCASE) ORDER BY ((((vt0.c0, vt2.c0)) BETWEEN ((vt2.c1, vt0.c0)) AND (('-1332839368', vt2.c1))) IN (CAST(vt2.c1 AS BLOB))) DESC, ((((((vt2.c1)AND(vt2.c1)))AND(vt2.c0))) ISNULL)  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (0.8447559937409534) AND (vt2.c1)) THEN (vt2.c1 IN (vt2.c0, vt2.c0)) WHEN CAST(vt2.c0 AS REAL) THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN 0.8260925016516538 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END WHEN x'' THEN ((vt0.c0) IS FALSE) END DESC  NULLS FIRST;
SELECT ALL MIN(vt0.c0) FROM vt2, vt0 WHERE ((((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((vt2.c0))) COLLATE NOCASE)AND(((454087738)>=(CAST(vt0.c0 AS NUMERIC)))))) ORDER BY ((((vt0.c0, vt2.c0)) BETWEEN ((vt2.c1, vt0.c0)) AND (('-1332839368', vt2.c1))) IN (CAST(vt2.c1 AS BLOB))) DESC, ((((((vt2.c1)AND(vt2.c1)))AND(vt2.c0))) ISNULL)  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (0.8447559937409534) AND (vt2.c1)) THEN (vt2.c1 IN (vt2.c0, vt2.c0)) WHEN CAST(vt2.c0 AS REAL) THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN 0.8260925016516538 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END WHEN x'' THEN ((vt0.c0) IS FALSE) END DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT MIN(vt0.c0) FROM vt2, vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c0, vt2.c0)) BETWEEN ((vt2.c1, vt0.c0)) AND (('-1332839368', vt2.c1))) IN (CAST(vt2.c1 AS BLOB))) DESC, ((((((vt2.c1)AND(vt2.c1)))AND(vt2.c0))) ISNULL)  NULLS LAST, CASE WHEN ((vt2.c0) NOT BETWEEN (0.8447559937409534) AND (vt2.c1)) THEN (vt2.c1 IN (vt2.c0, vt2.c0)) WHEN CAST(vt2.c0 AS REAL) THEN CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN 0.8260925016516538 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c1 END WHEN x'' THEN ((vt0.c0) IS FALSE) END DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0 WHERE ((+ (LOWER(vt0.c0))));
SELECT COUNT(*) FROM vt0 WHERE ((+ (LOWER(vt0.c0)))) LIMIT 0X1;
SELECT ALL * FROM vt2 WHERE (vt2.c1) ORDER BY LIKE((vt2.c0 IN ()), ((vt2.c1) NOTNULL), '0') DESC  NULLS LAST;
SELECT * FROM vt2 WHERE (((vt2.c1)AND(CAST('-1607669206' AS NUMERIC)))) ORDER BY 'L-', ABS(CASE vt2.c1  WHEN '%' THEN 'Q\T<^' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt2 WHERE (vt2.c1) ORDER BY 'L-', ABS(CASE vt2.c1  WHEN '%' THEN 'Q\T<^' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END) DESC  NULLS LAST LIMIT 0x1;
SELECT ALL * FROM vt2 WHERE (vt2.c1) ORDER BY LIKE((vt2.c0 IN ()), ((vt2.c1) NOTNULL), '0') DESC  NULLS LAST;
SELECT * FROM vt2 WHERE (((vt2.c1)AND(CAST('-1607669206' AS NUMERIC)))) ORDER BY 'L-', ABS(CASE vt2.c1  WHEN '%' THEN 'Q\T<^' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt2 WHERE (vt2.c1) ORDER BY 'L-', ABS(CASE vt2.c1  WHEN '%' THEN 'Q\T<^' WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END) DESC  NULLS LAST LIMIT 0x1;
SELECT * FROM vt0 WHERE ((- (vt0.c0)) COLLATE RTRIM COLLATE BINARY);
SELECT * FROM vt0 WHERE ((((- (vt0.c0)) COLLATE RTRIM COLLATE BINARY)AND((~ (((((vt0.c0)AND(vt0.c0)))OR(vt0.c0))))))) INTERSECT SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS TEXT));
SELECT * FROM vt0 WHERE ((- (vt0.c0)) COLLATE RTRIM COLLATE BINARY);
SELECT * FROM vt0 WHERE ((((- (vt0.c0)) COLLATE RTRIM COLLATE BINARY)AND((~ (((((vt0.c0)AND(vt0.c0)))OR(vt0.c0))))))) INTERSECT SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS TEXT));
SELECT MIN(vt2.c1) FROM vt0, vt2, v0 WHERE ((+ (v0.c3 COLLATE BINARY))) ORDER BY (~ (LIKELY(DISTINCT NULL)))  NULLS LAST;
SELECT DISTINCT MIN(vt2.c1) FROM vt0, vt2, v0 WHERE ((((+ (v0.c3 COLLATE BINARY)))AND((~ (CAST(v0.c1 AS BLOB)))))) ORDER BY ((COALESCE(v0.c3, x'', v0.c0, v0.c0))GLOB(v0.c1)) ASC  NULLS FIRST, (((v0.c0)<>(vt0.c0)) IN ((((v0.c3, v0.c2, v0.c3)) BETWEEN ((vt2.c1, v0.c2, vt2.c0)) AND ((v0.c0, vt2.c1, vt2.c0))), (+ (vt0.c0)))) ASC LIMIT 1;
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (CASE WHEN (~ (vt0.c0)) THEN v0.c1 ELSE (+ (v0.c2)) END) ORDER BY ((((vt2.c1) BETWEEN (v0.c0) AND (v0.c1))) BETWEEN ((((v0.c1))<>((vt2.c1)))) AND (COALESCE(DISTINCT vt0.c0, vt0.c0, v0.c2, vt0.c0, v0.c1, vt0.c0, '')));
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (CASE WHEN (~ (vt0.c0)) THEN v0.c1 ELSE (+ (v0.c2)) END) ORDER BY ((0.7218902940250062)*(((v0.c1) IS FALSE))) ASC INTERSECT SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (CASE vt0.c0  WHEN v0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c3 END COLLATE RTRIM) ORDER BY ((0.7218902940250062)*(((v0.c1) IS FALSE))) ASC;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CAST(((((v0.c1)OR(v0.c1)))AND(v0.c0)) AS BLOB));
SELECT ALL * FROM vt0, vt2, v0 WHERE (((CAST(((((v0.c1)OR(v0.c1)))AND(v0.c0)) AS BLOB))AND((((v0.c0, vt2.c1, vt0.c0, v0.c0, vt2.c1)) BETWEEN (((((v0.c0, v0.c1, v0.c3))>((vt2.c0, v0.c3, v0.c1))), ((((v0.c0)AND(vt0.c0)))OR(v0.c3)), (~ (v0.c0)), TRIM(v0.c3), ((((vt2.c1)OR(v0.c0)))AND(v0.c0)))) AND ((((v0.c0) NOT BETWEEN (vt0.c0) AND (v0.c0)), ((v0.c1)<=(vt0.c0)), (~ (vt2.c1)), (v0.c0 IN (v0.c2)), (vt2.c0 IN (vt0.c0, vt2.c1)))))))) ORDER BY v0.c1 ASC  NULLS FIRST, (~ (((v0.c3) ISNULL)))  NULLS FIRST, TYPEOF(((((((((((v0.c1)OR('')))OR('-955318532')))OR(vt0.c0)))AND(v0.c1)))AND(vt2.c0)))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CAST(((((v0.c1)OR(v0.c1)))AND(v0.c0)) AS BLOB));
SELECT ALL * FROM vt0, vt2, v0 WHERE (((CAST(((((v0.c1)OR(v0.c1)))AND(v0.c0)) AS BLOB))AND((((v0.c0, vt2.c1, vt0.c0, v0.c0, vt2.c1)) BETWEEN (((((v0.c0, v0.c1, v0.c3))>((vt2.c0, v0.c3, v0.c1))), ((((v0.c0)AND(vt0.c0)))OR(v0.c3)), (~ (v0.c0)), TRIM(v0.c3), ((((vt2.c1)OR(v0.c0)))AND(v0.c0)))) AND ((((v0.c0) NOT BETWEEN (vt0.c0) AND (v0.c0)), ((v0.c1)<=(vt0.c0)), (~ (vt2.c1)), (v0.c0 IN (v0.c2)), (vt2.c0 IN (vt0.c0, vt2.c1)))))))) ORDER BY v0.c1 ASC  NULLS FIRST, (~ (((v0.c3) ISNULL)))  NULLS FIRST, TYPEOF(((((((((((v0.c1)OR('')))OR('-955318532')))OR(vt0.c0)))AND(v0.c1)))AND(vt2.c0)))  NULLS LAST LIMIT 0x0;
SELECT ALL MIN(v0.c1) FROM vt2, v0 WHERE (CASE CAST(0.8367302450571473 AS REAL)  WHEN (vt2.c0 IN (v0.c0, vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) ELSE ((v0.c0)IS(0.575141059001527)) END);
SELECT ALL MIN(v0.c1) FROM vt2, v0 WHERE (CASE CAST(0.8367302450571473 AS REAL)  WHEN (vt2.c0 IN (v0.c0, vt2.c1)) THEN ((vt2.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) ELSE ((v0.c0)IS(0.575141059001527)) END) ORDER BY (((vt2.c0 IN (v0.c1)))OR(((v0.c1)IS NOT(v0.c2))))  NULLS FIRST LIMIT 1 INTERSECT SELECT MIN(v0.c1) FROM vt2, v0 WHERE ((CAST(6.65660588E8 AS TEXT) IN ((((v0.c3)) NOT BETWEEN ((v0.c2)) AND ((v0.c1))), CASE v0.c3  WHEN vt2.c0 THEN v0.c0 END))) ORDER BY (((vt2.c0 IN (v0.c1)))OR(((v0.c1)IS NOT(v0.c2))))  NULLS FIRST LIMIT 1;
SELECT * FROM v0, vt0, vt2 WHERE ((((((vt0.c0, v0.c1)) NOT BETWEEN ((v0.c2, vt0.c0)) AND ((v0.c3, v0.c1))))|(v0.c2)));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((vt0.c0, v0.c1)) NOT BETWEEN ((v0.c2, vt0.c0)) AND ((v0.c3, v0.c1))))|(v0.c2)));
SELECT * FROM v0, vt0, vt2 WHERE ((((((vt0.c0, v0.c1)) NOT BETWEEN ((v0.c2, vt0.c0)) AND ((v0.c3, v0.c1))))|(v0.c2)));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((vt0.c0, v0.c1)) NOT BETWEEN ((v0.c2, vt0.c0)) AND ((v0.c3, v0.c1))))|(v0.c2)));
SELECT MIN(v0.c3) FROM vt0, vt2, v0 WHERE ((- (((v0.c2) NOT BETWEEN (vt2.c1) AND (vt2.c0))))) ORDER BY CAST(HEX(v0.c0) AS TEXT) DESC;
SELECT MIN(v0.c3) FROM vt0, vt2, v0 WHERE ((((- (((v0.c2) NOT BETWEEN (vt2.c1) AND (vt2.c0)))))AND(((load_extension(v0.c1, vt2.c0)) BETWEEN (CAST(vt2.c0 AS BLOB)) AND (((((v0.c0)AND('-12993656')))AND(v0.c3))))))) ORDER BY (((v0.c3) NOT BETWEEN (vt2.c0) AND (v0.c2)) IN (CAST(v0.c1 AS INTEGER))) DESC  NULLS FIRST LIMIT 2;
SELECT ALL COUNT(*) FROM vt0, v0, vt2 WHERE (CAST(CHAR(v0.c1) AS REAL));
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (((CAST(CHAR(v0.c1) AS REAL))AND((((vt0.c0 IN (vt2.c1, v0.c1))) BETWEEN (NULL COLLATE RTRIM) AND (((((((vt2.c1)OR(vt2.c1)))AND(v0.c3)))OR(vt0.c0))))))) INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE ((((NOT (vt2.c1)))&(CAST(v0.c0 AS TEXT))));
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON ((((v0.c0)IS(vt0.c0)))GLOB(((v0.c0)<=(vt2.c1)))) CROSS JOIN v0 ON vt2.c1 WHERE ((((((+ (0.7869500109466089)))OR((- (v0.c3)))))AND(NULLIF(v0.c2, v0.c0)))) ORDER BY (((vt2.c1 COLLATE BINARY))<=((CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END))) ASC, CAST(vt0.c0 AS NUMERIC) COLLATE NOCASE DESC;
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON ((((v0.c0)IS(vt0.c0)))GLOB(((v0.c0)<=(vt2.c1)))) CROSS JOIN v0 ON vt2.c1 WHERE ((((((((+ (0.7869500109466089)))OR((- (v0.c3)))))AND(NULLIF(v0.c2, v0.c0))))AND(vt2.c1))) ORDER BY (HEX(DISTINCT v0.c2) IN (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)))) ASC, CAST(v0.c1 COLLATE BINARY AS NUMERIC) DESC  NULLS FIRST;
SELECT ALL * FROM vt2 CROSS JOIN vt0 ON ((((v0.c0)IS(vt0.c0)))GLOB(((v0.c0)<=(vt2.c1)))) CROSS JOIN v0 ON vt2.c1 WHERE ((((((+ (0.7869500109466089)))OR((- (v0.c3)))))AND(NULLIF(v0.c2, v0.c0)))) ORDER BY (((vt2.c1 COLLATE BINARY))<=((CASE WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END))) ASC, CAST(vt0.c0 AS NUMERIC) COLLATE NOCASE DESC;
SELECT DISTINCT * FROM vt2 CROSS JOIN vt0 ON ((((v0.c0)IS(vt0.c0)))GLOB(((v0.c0)<=(vt2.c1)))) CROSS JOIN v0 ON vt2.c1 WHERE ((((((((+ (0.7869500109466089)))OR((- (v0.c3)))))AND(NULLIF(v0.c2, v0.c0))))AND(vt2.c1))) ORDER BY (HEX(DISTINCT v0.c2) IN (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)))) ASC, CAST(v0.c1 COLLATE BINARY AS NUMERIC) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 NATURAL JOIN v0 WHERE (UPPER(vt0.c0 COLLATE BINARY));
SELECT ALL * FROM vt0, vt2 NATURAL JOIN v0 WHERE (UPPER(vt0.c0 COLLATE BINARY)) LIMIT 0X1 INTERSECT SELECT * FROM vt0, vt2 NATURAL JOIN v0 WHERE (x'c2') LIMIT 0X1;
SELECT ALL * FROM vt0, vt2 NATURAL JOIN v0 WHERE (UPPER(vt0.c0 COLLATE BINARY));
SELECT ALL * FROM vt0, vt2 NATURAL JOIN v0 WHERE (UPPER(vt0.c0 COLLATE BINARY)) LIMIT 0X1 INTERSECT SELECT * FROM vt0, vt2 NATURAL JOIN v0 WHERE (x'c2') LIMIT 0X1;
SELECT ALL MAX(vt2.c1) FROM vt0, vt2, v0 WHERE (v0.c2);
SELECT ALL MAX(vt2.c1) FROM vt0, vt2, v0 WHERE (v0.c2) ORDER BY vt2.c0  NULLS LAST LIMIT 0x1 INTERSECT SELECT MAX(vt2.c1) FROM vt0, vt2, v0 WHERE (((CASE v0.c0  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN x'' WHEN vt0.c0 THEN vt2.c0 WHEN vt0.c0 THEN v0.c1 WHEN vt2.c1 THEN -2127914432 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN vt0.c0 ELSE v0.c3 END) NOTNULL)) ORDER BY vt2.c0  NULLS LAST LIMIT 0x1;
SELECT * FROM vt0, v0 WHERE (v0.c1 COLLATE RTRIM);
SELECT DISTINCT * FROM vt0, v0 WHERE (v0.c1 COLLATE RTRIM) ORDER BY (((((((v0.c1)AND(v0.c2)))OR(v0.c1))))<=(((((v0.c3, vt0.c0, v0.c3)) BETWEEN (('uO', v0.c2, vt0.c0)) AND ((v0.c0, '', v0.c1)))))) DESC, ((((v0.c2)<=(v0.c1)))IS(CASE v0.c2  WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN NULL END)), ((((((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3)))AND(CAST(vt0.c0 AS NUMERIC))))AND((((v0.c1, v0.c3))<((v0.c3, v0.c1))))))AND('-853362505'))  NULLS FIRST LIMIT 0;
SELECT * FROM vt0, v0 WHERE (v0.c1 COLLATE RTRIM);
SELECT DISTINCT * FROM vt0, v0 WHERE (v0.c1 COLLATE RTRIM) ORDER BY (((((((v0.c1)AND(v0.c2)))OR(v0.c1))))<=(((((v0.c3, vt0.c0, v0.c3)) BETWEEN (('uO', v0.c2, vt0.c0)) AND ((v0.c0, '', v0.c1)))))) DESC, ((((v0.c2)<=(v0.c1)))IS(CASE v0.c2  WHEN v0.c3 THEN v0.c2 WHEN v0.c0 THEN NULL END)), ((((((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3)))AND(CAST(vt0.c0 AS NUMERIC))))AND((((v0.c1, v0.c3))<((v0.c3, v0.c1))))))AND('-853362505'))  NULLS FIRST LIMIT 0;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((vt0.c0 IN ()) COLLATE BINARY);
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0 IN ()) COLLATE BINARY)AND(CAST(UNLIKELY(vt0.c0) AS REAL)))) ORDER BY (((((((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))))AND(((((((((vt0.c0)OR(vt0.c0)))AND(x'c9820db9')))OR(vt0.c0)))OR(vt0.c0)))))AND(vt0.c0)) ASC  NULLS LAST, ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (((vt0.c0)/(vt0.c0))) AND ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((0.9684965620773064))))) DESC LIMIT 2 INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS NUMERIC)) BETWEEN (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) AND (NULL))) ORDER BY (((((((vt0.c0, vt0.c0))>((vt0.c0, vt0.c0))))AND(((((((((vt0.c0)OR(vt0.c0)))AND(x'c9820db9')))OR(vt0.c0)))OR(vt0.c0)))))AND(vt0.c0)) ASC  NULLS LAST, ((CAST(vt0.c0 AS REAL)) NOT BETWEEN (((vt0.c0)/(vt0.c0))) AND ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((0.9684965620773064))))) DESC LIMIT 2;
SELECT ALL MAX(v0.c0) FROM vt2, v0 WHERE (((v0.c2)%(vt2.c1)) COLLATE NOCASE);
SELECT DISTINCT MAX(v0.c0) FROM vt2, v0 WHERE (((v0.c2)%(vt2.c1)) COLLATE NOCASE) ORDER BY ((((v0.c0) BETWEEN (v0.c3) AND (v0.c1)))=((- (v0.c1)))) DESC INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt2, v0 WHERE ((- ((v0.c2 IN (vt2.c0))))) ORDER BY ((((v0.c0) BETWEEN (v0.c3) AND (v0.c1)))=((- (v0.c1)))) DESC;
SELECT ALL * FROM v0 INNER JOIN vt0 ON ((CAST(v0.c0 AS INTEGER)) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((((v0.c0, v0.c3, v0.c3, v0.c3, v0.c2, NULL)) NOT BETWEEN ((v0.c1, v0.c2, v0.c0, 214129716, v0.c2, vt0.c0)) AND ((v0.c3, v0.c3, v0.c1, v0.c2, v0.c1, v0.c2))))) WHERE ((- (((v0.c2) BETWEEN (v0.c2) AND (v0.c2))))) ORDER BY IFNULL(DISTINCT '#' COLLATE BINARY, x'0b')  NULLS LAST, CASE TRIM(x'0cf6', v0.c2)  WHEN CAST(vt0.c0 AS INTEGER) THEN CAST(v0.c1 AS TEXT) WHEN CASE v0.c0  WHEN v0.c3 THEN vt0.c0 WHEN x'' THEN v0.c0 END THEN x'' ELSE CASE v0.c2  WHEN '-1330521423' THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END END DESC;
SELECT ALL * FROM v0 INNER JOIN vt0 ON ((CAST(v0.c0 AS INTEGER)) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((((v0.c0, v0.c3, v0.c3, v0.c3, v0.c2, NULL)) NOT BETWEEN ((v0.c1, v0.c2, v0.c0, 214129716, v0.c2, vt0.c0)) AND ((v0.c3, v0.c3, v0.c1, v0.c2, v0.c1, v0.c2))))) WHERE ((((- (((v0.c2) BETWEEN (v0.c2) AND (v0.c2)))))AND(((((((((CASE WHEN v0.c1 THEN NULL END)AND(((vt0.c0) NOTNULL))))AND(((((((vt0.c0)AND(vt0.c0)))OR(v0.c0)))OR(NULL)))))AND(((v0.c0) IS TRUE))))OR(CAST(v0.c3 AS BLOB)))))) ORDER BY IFNULL(DISTINCT '#' COLLATE BINARY, x'0b')  NULLS LAST, CASE TRIM(x'0cf6', v0.c2)  WHEN CAST(vt0.c0 AS INTEGER) THEN CAST(v0.c1 AS TEXT) WHEN CASE v0.c0  WHEN v0.c3 THEN vt0.c0 WHEN x'' THEN v0.c0 END THEN x'' ELSE CASE v0.c2  WHEN '-1330521423' THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END END DESC LIMIT 2 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt0 ON ((CAST(v0.c0 AS INTEGER)) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((((v0.c0, v0.c3, v0.c3, v0.c3, v0.c2, NULL)) NOT BETWEEN ((v0.c1, v0.c2, v0.c0, 0xcc35c34, v0.c2, vt0.c0)) AND ((v0.c3, v0.c3, v0.c1, v0.c2, v0.c1, v0.c2))))) WHERE (((LOWER(v0.c2)) BETWEEN (0xffffffffe8d2d617) AND (0.7160549490045605))) ORDER BY IFNULL(DISTINCT '#' COLLATE BINARY, x'0b')  NULLS LAST, CASE TRIM(x'0cf6', v0.c2)  WHEN CAST(vt0.c0 AS INTEGER) THEN CAST(v0.c1 AS TEXT) WHEN CASE v0.c0  WHEN v0.c3 THEN vt0.c0 WHEN x'' THEN v0.c0 END THEN x'' ELSE CASE v0.c2  WHEN '-1330521423' THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END END DESC LIMIT 0X2;
SELECT ALL * FROM v0 INNER JOIN vt0 ON ((CAST(v0.c0 AS INTEGER)) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((((v0.c0, v0.c3, v0.c3, v0.c3, v0.c2, NULL)) NOT BETWEEN ((v0.c1, v0.c2, v0.c0, 214129716, v0.c2, vt0.c0)) AND ((v0.c3, v0.c3, v0.c1, v0.c2, v0.c1, v0.c2))))) WHERE ((- (((v0.c2) BETWEEN (v0.c2) AND (v0.c2))))) ORDER BY IFNULL(DISTINCT '#' COLLATE BINARY, x'0b')  NULLS LAST, CASE TRIM(x'0cf6', v0.c2)  WHEN CAST(vt0.c0 AS INTEGER) THEN CAST(v0.c1 AS TEXT) WHEN CASE v0.c0  WHEN v0.c3 THEN vt0.c0 WHEN x'' THEN v0.c0 END THEN x'' ELSE CASE v0.c2  WHEN '-1330521423' THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END END DESC;
SELECT ALL * FROM v0 INNER JOIN vt0 ON ((CAST(v0.c0 AS INTEGER)) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((((v0.c0, v0.c3, v0.c3, v0.c3, v0.c2, NULL)) NOT BETWEEN ((v0.c1, v0.c2, v0.c0, 214129716, v0.c2, vt0.c0)) AND ((v0.c3, v0.c3, v0.c1, v0.c2, v0.c1, v0.c2))))) WHERE ((((- (((v0.c2) BETWEEN (v0.c2) AND (v0.c2)))))AND(((((((((CASE WHEN v0.c1 THEN NULL END)AND(((vt0.c0) NOTNULL))))AND(((((((vt0.c0)AND(vt0.c0)))OR(v0.c0)))OR(NULL)))))AND(((v0.c0) IS TRUE))))OR(CAST(v0.c3 AS BLOB)))))) ORDER BY IFNULL(DISTINCT '#' COLLATE BINARY, x'0b')  NULLS LAST, CASE TRIM(x'0cf6', v0.c2)  WHEN CAST(vt0.c0 AS INTEGER) THEN CAST(v0.c1 AS TEXT) WHEN CASE v0.c0  WHEN v0.c3 THEN vt0.c0 WHEN x'' THEN v0.c0 END THEN x'' ELSE CASE v0.c2  WHEN '-1330521423' THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END END DESC LIMIT 2 INTERSECT SELECT ALL * FROM v0 INNER JOIN vt0 ON ((CAST(v0.c0 AS INTEGER)) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((((v0.c0, v0.c3, v0.c3, v0.c3, v0.c2, NULL)) NOT BETWEEN ((v0.c1, v0.c2, v0.c0, 0xcc35c34, v0.c2, vt0.c0)) AND ((v0.c3, v0.c3, v0.c1, v0.c2, v0.c1, v0.c2))))) WHERE (((LOWER(v0.c2)) BETWEEN (0xffffffffe8d2d617) AND (0.7160549490045605))) ORDER BY IFNULL(DISTINCT '#' COLLATE BINARY, x'0b')  NULLS LAST, CASE TRIM(x'0cf6', v0.c2)  WHEN CAST(vt0.c0 AS INTEGER) THEN CAST(v0.c1 AS TEXT) WHEN CASE v0.c0  WHEN v0.c3 THEN vt0.c0 WHEN x'' THEN v0.c0 END THEN x'' ELSE CASE v0.c2  WHEN '-1330521423' THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END END DESC LIMIT 0X2;
SELECT * FROM v0 WHERE (0xffffffffe5b67314) ORDER BY ((((v0.c1)/(v0.c3))) BETWEEN (((((((v0.c1)OR(v0.c0)))AND(NULL)))AND(v0.c2))) AND ((v0.c3 IN ()))) ASC, v0.c0, ((((v0.c0) NOT BETWEEN (0.34312493594042626) AND (v0.c1))) NOTNULL) DESC;
SELECT DISTINCT * FROM v0 WHERE (((-441027820)AND(((CAST(v0.c2 AS TEXT))*(HEX(v0.c1)))))) ORDER BY ((((v0.c1)/(v0.c3))) BETWEEN (((((((v0.c1)OR(v0.c0)))AND(NULL)))AND(v0.c2))) AND ((v0.c3 IN ()))) ASC, v0.c0, ((((v0.c0) NOT BETWEEN (0.34312493594042626) AND (v0.c1))) NOTNULL) DESC LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 WHERE ('-1878464791') ORDER BY ((((v0.c1)/(v0.c3))) BETWEEN (((((((v0.c1)OR(v0.c0)))AND(NULL)))AND(v0.c2))) AND ((v0.c3 IN ()))) ASC, v0.c0, ((((v0.c0) NOT BETWEEN (0.34312493594042626) AND (v0.c1))) NOTNULL) DESC LIMIT 1;
SELECT * FROM v0 WHERE (0xffffffffe5b67314) ORDER BY ((((v0.c1)/(v0.c3))) BETWEEN (((((((v0.c1)OR(v0.c0)))AND(NULL)))AND(v0.c2))) AND ((v0.c3 IN ()))) ASC, v0.c0, ((((v0.c0) NOT BETWEEN (0.34312493594042626) AND (v0.c1))) NOTNULL) DESC;
SELECT DISTINCT * FROM v0 WHERE (((-441027820)AND(((CAST(v0.c2 AS TEXT))*(HEX(v0.c1)))))) ORDER BY ((((v0.c1)/(v0.c3))) BETWEEN (((((((v0.c1)OR(v0.c0)))AND(NULL)))AND(v0.c2))) AND ((v0.c3 IN ()))) ASC, v0.c0, ((((v0.c0) NOT BETWEEN (0.34312493594042626) AND (v0.c1))) NOTNULL) DESC LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 WHERE ('-1878464791') ORDER BY ((((v0.c1)/(v0.c3))) BETWEEN (((((((v0.c1)OR(v0.c0)))AND(NULL)))AND(v0.c2))) AND ((v0.c3 IN ()))) ASC, v0.c0, ((((v0.c0) NOT BETWEEN (0.34312493594042626) AND (v0.c1))) NOTNULL) DESC LIMIT 1;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE ((((vt2.c1)) BETWEEN ((CAST(vt0.c0 AS INTEGER))) AND ((vt2.c0)))) ORDER BY CAST(TRIM(DISTINCT v0.c0, v0.c3) AS REAL) ASC;
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE ((((((vt2.c1)) BETWEEN ((CAST(vt0.c0 AS INTEGER))) AND ((vt2.c0))))AND(v0.c1))) ORDER BY ((((0.1603528191524375)AND(vt2.c0)))OR(v0.c3)) COLLATE RTRIM DESC, CAST(v0.c1 AS TEXT) COLLATE BINARY INTERSECT SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE (0.7435718392262334) ORDER BY ((((0.1603528191524375)AND(vt2.c0)))OR(v0.c3)) COLLATE RTRIM DESC, CAST(v0.c1 AS TEXT) COLLATE BINARY;
SELECT ALL * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (- (((v0.c3) BETWEEN (v0.c2) AND (v0.c0)))) WHERE ((((v0.c1)) BETWEEN (((('-44110725')*(vt2.c1)))) AND ((((vt2.c1) NOTNULL)))));
SELECT ALL * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (- (((v0.c3) BETWEEN (v0.c2) AND (v0.c0)))) WHERE ((((v0.c1)) BETWEEN (((('-44110725')*(vt2.c1)))) AND ((((vt2.c1) NOTNULL))))) ORDER BY ((CAST(vt2.c1 AS REAL)) NOT BETWEEN (0Xffffffffb0b1dab1) AND (((vt0.c0) IS TRUE))) INTERSECT SELECT ALL * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (- (((v0.c3) BETWEEN (v0.c2) AND (v0.c0)))) WHERE ((CAST(v0.c1 AS NUMERIC) IN ())) ORDER BY ((CAST(vt2.c1 AS REAL)) NOT BETWEEN (-1330521423) AND (((vt0.c0) IS TRUE)));
SELECT ALL * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (- (((v0.c3) BETWEEN (v0.c2) AND (v0.c0)))) WHERE ((((v0.c1)) BETWEEN (((('-44110725')*(vt2.c1)))) AND ((((vt2.c1) NOTNULL)))));
SELECT ALL * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (- (((v0.c3) BETWEEN (v0.c2) AND (v0.c0)))) WHERE ((((v0.c1)) BETWEEN (((('-44110725')*(vt2.c1)))) AND ((((vt2.c1) NOTNULL))))) ORDER BY ((CAST(vt2.c1 AS REAL)) NOT BETWEEN (0Xffffffffb0b1dab1) AND (((vt0.c0) IS TRUE))) INTERSECT SELECT ALL * FROM vt0, v0 LEFT OUTER JOIN vt2 ON (- (((v0.c3) BETWEEN (v0.c2) AND (v0.c0)))) WHERE ((CAST(v0.c1 AS NUMERIC) IN ())) ORDER BY ((CAST(vt2.c1 AS REAL)) NOT BETWEEN (-1330521423) AND (((vt0.c0) IS TRUE)));
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE (NULL) ORDER BY CHANGES() DESC  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE (((NULL)AND((((vt2.c1))=(('/bl￝0'))) COLLATE RTRIM))) ORDER BY CHANGES() DESC  NULLS FIRST LIMIT 3;
SELECT * FROM v0 NATURAL JOIN vt2 WHERE (((((json_array_length(v0.c2))AND((v0.c1 IN (vt2.c1)))))OR(CAST(vt2.c1 AS BLOB)))) ORDER BY ((HEX(v0.c1))>(((v0.c0) NOT BETWEEN (v0.c1) AND (vt2.c1))))  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt2 WHERE (((((json_array_length(v0.c2))AND((v0.c1 IN (vt2.c1)))))OR(CAST(vt2.c1 AS BLOB)))) ORDER BY ((HEX(v0.c1))>(((v0.c0) NOT BETWEEN (v0.c1) AND (vt2.c1))))  NULLS FIRST LIMIT 0x3;
SELECT * FROM v0 NATURAL JOIN vt2 WHERE (((((json_array_length(v0.c2))AND((v0.c1 IN (vt2.c1)))))OR(CAST(vt2.c1 AS BLOB)))) ORDER BY ((HEX(v0.c1))>(((v0.c0) NOT BETWEEN (v0.c1) AND (vt2.c1))))  NULLS FIRST;
SELECT * FROM v0 NATURAL JOIN vt2 WHERE (((((json_array_length(v0.c2))AND((v0.c1 IN (vt2.c1)))))OR(CAST(vt2.c1 AS BLOB)))) ORDER BY ((HEX(v0.c1))>(((v0.c0) NOT BETWEEN (v0.c1) AND (vt2.c1))))  NULLS FIRST LIMIT 0x3;
SELECT ALL * FROM vt2, v0 WHERE (((UNLIKELY(x'')) NOT BETWEEN ((vt2.c0 IN (v0.c3))) AND (CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN '->d''^cey' THEN v0.c1 WHEN x'2001' THEN v0.c3 ELSE vt2.c0 END))) ORDER BY ABS(v0.c3 COLLATE RTRIM), CASE WHEN CASE v0.c3  WHEN vt2.c0 THEN 0.5360685194260087 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN 0.5192603260485863 ELSE v0.c1 END THEN (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((v0.c3))) END  NULLS LAST, v0.c0 ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((UNLIKELY(x'')) NOT BETWEEN ((vt2.c0 IN (v0.c3))) AND (CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN '->d''^cey' THEN v0.c1 WHEN x'2001' THEN v0.c3 ELSE vt2.c0 END))) ORDER BY ABS(v0.c3 COLLATE RTRIM), CASE WHEN CASE v0.c3  WHEN vt2.c0 THEN 0.5360685194260087 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN 0.5192603260485863 ELSE v0.c1 END THEN (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((v0.c3))) END  NULLS LAST, v0.c0 ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (CAST(v0.c3 AS NUMERIC) COLLATE RTRIM) ORDER BY ABS(v0.c3 COLLATE RTRIM), CASE WHEN CASE v0.c3  WHEN vt2.c0 THEN 0.5360685194260087 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN 0.5192603260485863 ELSE v0.c1 END THEN (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((v0.c3))) END  NULLS LAST, v0.c0 ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt2, v0 WHERE (((UNLIKELY(x'')) NOT BETWEEN ((vt2.c0 IN (v0.c3))) AND (CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN '->d''^cey' THEN v0.c1 WHEN x'2001' THEN v0.c3 ELSE vt2.c0 END))) ORDER BY ABS(v0.c3 COLLATE RTRIM), CASE WHEN CASE v0.c3  WHEN vt2.c0 THEN 0.5360685194260087 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN 0.5192603260485863 ELSE v0.c1 END THEN (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((v0.c3))) END  NULLS LAST, v0.c0 ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((UNLIKELY(x'')) NOT BETWEEN ((vt2.c0 IN (v0.c3))) AND (CASE vt2.c0  WHEN v0.c0 THEN v0.c3 WHEN '->d''^cey' THEN v0.c1 WHEN x'2001' THEN v0.c3 ELSE vt2.c0 END))) ORDER BY ABS(v0.c3 COLLATE RTRIM), CASE WHEN CASE v0.c3  WHEN vt2.c0 THEN 0.5360685194260087 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN 0.5192603260485863 ELSE v0.c1 END THEN (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((v0.c3))) END  NULLS LAST, v0.c0 ASC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (CAST(v0.c3 AS NUMERIC) COLLATE RTRIM) ORDER BY ABS(v0.c3 COLLATE RTRIM), CASE WHEN CASE v0.c3  WHEN vt2.c0 THEN 0.5360685194260087 WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN 0.5192603260485863 ELSE v0.c1 END THEN (((vt2.c0)) BETWEEN ((vt2.c1)) AND ((v0.c3))) END  NULLS LAST, v0.c0 ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))AND(CASE WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)));
SELECT ALL * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))AND(CASE WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)));
SELECT ALL * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))AND(CASE WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)));
SELECT ALL * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))AND(CASE WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)));
SELECT ALL * FROM vt2, vt0, v0 WHERE ((v0.c2 IN (v0.c3)) COLLATE BINARY) ORDER BY ((((((((((vt2.c0)OR(vt0.c0)))AND(v0.c2)))OR(vt2.c0)))AND(vt2.c1))) IS TRUE);
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((v0.c2 IN (v0.c3)) COLLATE BINARY)AND((((((((vt2.c1, vt2.c1)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2, vt2.c0))))OR(((v0.c2) NOTNULL))))AND((+ (vt2.c0))))))) ORDER BY ((((((((((vt2.c0)OR(vt0.c0)))AND(v0.c2)))OR(vt2.c0)))AND(vt2.c1))) IS TRUE) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((x'')>>(vt2.c1 COLLATE RTRIM))) ORDER BY ((((((((((vt2.c0)OR(vt0.c0)))AND(v0.c2)))OR(vt2.c0)))AND(vt2.c1))) IS TRUE) LIMIT 2;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((v0.c2 IN (v0.c3)) COLLATE BINARY) ORDER BY ((((((((((vt2.c0)OR(vt0.c0)))AND(v0.c2)))OR(vt2.c0)))AND(vt2.c1))) IS TRUE);
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((v0.c2 IN (v0.c3)) COLLATE BINARY)AND((((((((vt2.c1, vt2.c1)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2, vt2.c0))))OR(((v0.c2) NOTNULL))))AND((+ (vt2.c0))))))) ORDER BY ((((((((((vt2.c0)OR(vt0.c0)))AND(v0.c2)))OR(vt2.c0)))AND(vt2.c1))) IS TRUE) LIMIT 0x2 INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((x'')>>(vt2.c1 COLLATE RTRIM))) ORDER BY ((((((((((vt2.c0)OR(vt0.c0)))AND(v0.c2)))OR(vt2.c0)))AND(vt2.c1))) IS TRUE) LIMIT 2;
SELECT * FROM vt2, v0 WHERE (TRIM(vt2.c1) COLLATE BINARY);
SELECT DISTINCT * FROM vt2, v0 WHERE (((TRIM(vt2.c1) COLLATE BINARY)AND(CAST(((v0.c1)||(v0.c3)) AS NUMERIC))));
SELECT * FROM vt2, v0 WHERE (TRIM(vt2.c1) COLLATE BINARY);
SELECT DISTINCT * FROM vt2, v0 WHERE (((TRIM(vt2.c1) COLLATE BINARY)AND(CAST(((v0.c1)||(v0.c3)) AS NUMERIC))));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE ((((0.31109226187576555, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, '-1547858955', NULL, vt0.c0)) AND ((CHANGES(), vt0.c0 COLLATE BINARY, CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c0)OR(vt0.c0))))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((0.31109226187576555, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY, '-1547858955', NULL, vt0.c0)) AND ((CHANGES(), vt0.c0 COLLATE BINARY, CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END, ((vt0.c0)OR(vt0.c0)))))) ORDER BY CASE WHEN ((vt0.c0)LIKE(vt0.c0)) THEN x'82ac20' COLLATE RTRIM END DESC  NULLS LAST INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ('') ORDER BY CASE WHEN ((vt0.c0)LIKE(vt0.c0)) THEN x'82ac20' COLLATE RTRIM END DESC  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (ABS(((((((x'31ec')OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((ABS(((((((x'31ec')OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0))))AND((((vt0.c0)) NOT BETWEEN ((x'39')) AND ((vt0.c0))) COLLATE BINARY))) ORDER BY CAST((((vt0.c0))>((vt0.c0))) AS BLOB), CAST(((vt0.c0)|(vt0.c0)) AS BLOB) DESC;
SELECT * FROM vt0 WHERE ((((('f,o')LIKE(vt0.c0))) IS TRUE)) ORDER BY vt0.c0 ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((('f,o')LIKE(vt0.c0))) IS TRUE))AND(vt0.c0 COLLATE BINARY COLLATE RTRIM))) ORDER BY CASE LIKE(vt0.c0, vt0.c0, '0')  WHEN NULLIF(DISTINCT vt0.c0, vt0.c0) THEN vt0.c0 COLLATE RTRIM WHEN CAST(vt0.c0 AS INTEGER) THEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END ASC  NULLS FIRST, CAST(vt0.c0 AS INTEGER) LIMIT 1;
SELECT * FROM vt0 WHERE ((((('f,o')LIKE(vt0.c0))) IS TRUE)) ORDER BY vt0.c0 ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE ((((((('f,o')LIKE(vt0.c0))) IS TRUE))AND(vt0.c0 COLLATE BINARY COLLATE RTRIM))) ORDER BY CASE LIKE(vt0.c0, vt0.c0, '0')  WHEN NULLIF(DISTINCT vt0.c0, vt0.c0) THEN vt0.c0 COLLATE RTRIM WHEN CAST(vt0.c0 AS INTEGER) THEN CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END ASC  NULLS FIRST, CAST(vt0.c0 AS INTEGER) LIMIT 1;
SELECT ALL MIN(v0.c3) FROM vt0 LEFT OUTER JOIN v0 ON LIKELY(DISTINCT ((v0.c1) BETWEEN (v0.c2) AND (v0.c2))) WHERE (v0.c0);
SELECT MIN(v0.c3) FROM vt0 LEFT OUTER JOIN v0 ON LIKELY(DISTINCT ((v0.c1) BETWEEN (v0.c2) AND (v0.c2))) WHERE (((v0.c0)AND(CASE WHEN ((v0.c2)OR(v0.c0)) THEN CASE v0.c0  WHEN v0.c2 THEN 0.5897853466294962 WHEN v0.c0 THEN v0.c1 ELSE vt0.c0 END END)));
SELECT ALL COUNT(*) FROM v0 WHERE ((v0.c1 COLLATE BINARY IN (((((((((((((((v0.c0)OR(x'')))OR(v0.c1)))AND(v0.c3)))AND(v0.c0)))AND(0Xffffffffacff78ef)))OR(v0.c3)))AND(v0.c2)))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((v0.c1 COLLATE BINARY IN (((((((((((((((v0.c0)OR(x'')))OR(v0.c1)))AND(v0.c3)))AND(v0.c0)))AND(0Xffffffffacff78ef)))OR(v0.c3)))AND(v0.c2))))) ORDER BY ((((((((((v0.c3)OR(v0.c0)))OR(v0.c2)))AND(v0.c1)))OR(v0.c2))) NOT NULL) LIMIT 0;
SELECT MAX(vt2.c1) FROM vt2, v0, vt0 WHERE (LOWER(DISTINCT v0.c2) COLLATE RTRIM);
SELECT MAX(vt2.c1) FROM vt2, v0, vt0 WHERE (LOWER(DISTINCT v0.c2) COLLATE RTRIM) ORDER BY (v0.c3 IN (v0.c1, '1165436722')) COLLATE RTRIM  NULLS FIRST, ((((vt0.c0)|('')))<=(((((((((((v0.c3)OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0)))OR(vt2.c1)))AND(vt2.c0)))) ASC INTERSECT SELECT MAX(vt2.c1) FROM vt2, v0, vt0 WHERE (((((0.5150026268332484) NOTNULL))/(MAX(vt0.c0, '', vt2.c0)))) ORDER BY (v0.c3 IN (v0.c1, '1165436722')) COLLATE RTRIM  NULLS FIRST, ((((vt0.c0)|('')))<=(((((((((((v0.c3)OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0)))OR(vt2.c1)))AND(vt2.c0)))) ASC;
SELECT ALL * FROM v0 WHERE (TYPEOF(DISTINCT CAST(v0.c3 AS INTEGER)));
SELECT DISTINCT * FROM v0 WHERE (TYPEOF(DISTINCT CAST(v0.c3 AS INTEGER))) LIMIT 0;
SELECT ALL * FROM v0 WHERE (TYPEOF(DISTINCT CAST(v0.c3 AS INTEGER)));
SELECT DISTINCT * FROM v0 WHERE (TYPEOF(DISTINCT CAST(v0.c3 AS INTEGER))) LIMIT 0;
SELECT MIN(v0.c0) FROM vt2, v0, vt0 WHERE (CAST(vt0.c0 AS REAL) COLLATE RTRIM) ORDER BY ((((v0.c1)<<('-833993359'))) BETWEEN (vt0.c0) AND (vt2.c0 COLLATE BINARY)) ASC;
SELECT ALL MIN(v0.c0) FROM vt2, v0, vt0 WHERE (((CAST(vt0.c0 AS REAL) COLLATE RTRIM)AND(NULL))) ORDER BY ((((v0.c1)<<('-833993359'))) BETWEEN (vt0.c0) AND (vt2.c0 COLLATE BINARY)) ASC;
SELECT * FROM v0, vt2 LEFT OUTER JOIN vt0 ON ((v0.c0 COLLATE BINARY)<>(CAST(v0.c2 AS REAL))) WHERE ((('QK
')-(((v0.c2) BETWEEN (vt2.c0) AND (vt0.c0))))) ORDER BY ((((((((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c3)))OR(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(NULLIF(v0.c3, vt0.c0))))AND(LAST_INSERT_ROWID())), ((((((((((((((LOWER(x'62fec673'))OR(CHANGES())))OR((v0.c2 IN (v0.c0)))))AND(((v0.c0)<(v0.c0)))))OR((+ (vt2.c1)))))OR(((vt2.c0)IS(v0.c1)))))AND((vt2.c0 IN (v0.c2)))))AND(0Xfffffffff18128f4 COLLATE BINARY)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 LEFT OUTER JOIN vt0 ON ((v0.c0 COLLATE BINARY)<>(CAST(v0.c2 AS REAL))) WHERE ((((('QK
')-(((v0.c2) BETWEEN (vt2.c0) AND (vt0.c0)))))AND(v0.c2))) ORDER BY ((((((((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c3)))OR(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(NULLIF(v0.c3, vt0.c0))))AND(LAST_INSERT_ROWID())), ((((((((((((((LOWER(x'62fec673'))OR(CHANGES())))OR((v0.c2 IN (v0.c0)))))AND(((v0.c0)<(v0.c0)))))OR((+ (vt2.c1)))))OR(((vt2.c0)IS(v0.c1)))))AND((vt2.c0 IN (v0.c2)))))AND(0Xfffffffff18128f4 COLLATE BINARY)) DESC  NULLS FIRST;
SELECT * FROM v0, vt2 LEFT OUTER JOIN vt0 ON ((v0.c0 COLLATE BINARY)<>(CAST(v0.c2 AS REAL))) WHERE ((('QK
')-(((v0.c2) BETWEEN (vt2.c0) AND (vt0.c0))))) ORDER BY ((((((((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c3)))OR(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(NULLIF(v0.c3, vt0.c0))))AND(LAST_INSERT_ROWID())), ((((((((((((((LOWER(x'62fec673'))OR(CHANGES())))OR((v0.c2 IN (v0.c0)))))AND(((v0.c0)<(v0.c0)))))OR((+ (vt2.c1)))))OR(((vt2.c0)IS(v0.c1)))))AND((vt2.c0 IN (v0.c2)))))AND(0Xfffffffff18128f4 COLLATE BINARY)) DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 LEFT OUTER JOIN vt0 ON ((v0.c0 COLLATE BINARY)<>(CAST(v0.c2 AS REAL))) WHERE ((((('QK
')-(((v0.c2) BETWEEN (vt2.c0) AND (vt0.c0)))))AND(v0.c2))) ORDER BY ((((((((v0.c0) NOT BETWEEN (vt2.c0) AND (v0.c3)))OR(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c2)))))AND(NULLIF(v0.c3, vt0.c0))))AND(LAST_INSERT_ROWID())), ((((((((((((((LOWER(x'62fec673'))OR(CHANGES())))OR((v0.c2 IN (v0.c0)))))AND(((v0.c0)<(v0.c0)))))OR((+ (vt2.c1)))))OR(((vt2.c0)IS(v0.c1)))))AND((vt2.c0 IN (v0.c2)))))AND(0Xfffffffff18128f4 COLLATE BINARY)) DESC  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE (((NULLIF(vt2.c1, vt2.c0)) BETWEEN (1947377964) AND (vt2.c1 COLLATE NOCASE))) ORDER BY (vt2.c0 COLLATE NOCASE IN (((vt0.c0)/(vt2.c0)))) DESC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((NULLIF(vt2.c1, vt2.c0)) BETWEEN (0X7412a12c) AND (vt2.c1 COLLATE NOCASE)))AND('>V\'))) ORDER BY ((NOT (x'0704')) IN ()) ASC, ((((((((vt2.c0)AND(vt2.c1)))OR(vt2.c1)))AND((vt2.c0 IN ()))))AND((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((vt0.c0)))));
SELECT * FROM vt2, vt0 WHERE (((NULLIF(vt2.c1, vt2.c0)) BETWEEN (1947377964) AND (vt2.c1 COLLATE NOCASE))) ORDER BY (vt2.c0 COLLATE NOCASE IN (((vt0.c0)/(vt2.c0)))) DESC;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((NULLIF(vt2.c1, vt2.c0)) BETWEEN (0X7412a12c) AND (vt2.c1 COLLATE NOCASE)))AND('>V\'))) ORDER BY ((NOT (x'0704')) IN ()) ASC, ((((((((vt2.c0)AND(vt2.c1)))OR(vt2.c1)))AND((vt2.c0 IN ()))))AND((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((vt0.c0)))));
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON ((CAST(v0.c2 AS BLOB)) BETWEEN ((v0.c1 IN ())) AND ((vt2.c0 IN ()))) WHERE (CAST(CASE WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN v0.c1 END AS INTEGER));
SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN v0 ON ((CAST(v0.c2 AS BLOB)) BETWEEN ((v0.c1 IN ())) AND ((vt2.c0 IN ()))) WHERE (CAST(CASE WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN v0.c1 END AS INTEGER)) ORDER BY (((NOT (v0.c3))) IS FALSE), TYPEOF(CAST(v0.c3 AS BLOB)) ASC, ((((((((((((v0.c0) BETWEEN (v0.c2) AND (x'')))AND(((v0.c2)/(v0.c2)))))OR(((v0.c1)<=(v0.c2)))))OR(((((v0.c3)AND(v0.c2)))OR(v0.c0)))))AND((NOT (v0.c3)))))AND(NULLIF(0.21117156732987274, v0.c1))) DESC INTERSECT SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN v0 ON ((CAST(v0.c2 AS BLOB)) BETWEEN ((v0.c1 IN ())) AND ((vt2.c0 IN ()))) WHERE (((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 ELSE NULL END) NOT BETWEEN (v0.c2) AND ((NOT (v0.c2))))) ORDER BY (((NOT (v0.c3))) IS FALSE), TYPEOF(CAST(v0.c3 AS BLOB)) ASC, ((((((((((((v0.c0) BETWEEN (v0.c2) AND (x'')))AND(((v0.c2)/(v0.c2)))))OR(((v0.c1)<=(v0.c2)))))OR(((((v0.c3)AND(v0.c2)))OR(v0.c0)))))AND((NOT (v0.c3)))))AND(NULLIF(0.21117156732987274, v0.c1))) DESC;
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON ((CAST(v0.c2 AS BLOB)) BETWEEN ((v0.c1 IN ())) AND ((vt2.c0 IN ()))) WHERE (CAST(CASE WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN v0.c1 END AS INTEGER));
SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN v0 ON ((CAST(v0.c2 AS BLOB)) BETWEEN ((v0.c1 IN ())) AND ((vt2.c0 IN ()))) WHERE (CAST(CASE WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN v0.c1 END AS INTEGER)) ORDER BY (((NOT (v0.c3))) IS FALSE), TYPEOF(CAST(v0.c3 AS BLOB)) ASC, ((((((((((((v0.c0) BETWEEN (v0.c2) AND (x'')))AND(((v0.c2)/(v0.c2)))))OR(((v0.c1)<=(v0.c2)))))OR(((((v0.c3)AND(v0.c2)))OR(v0.c0)))))AND((NOT (v0.c3)))))AND(NULLIF(0.21117156732987274, v0.c1))) DESC INTERSECT SELECT DISTINCT * FROM vt2 LEFT OUTER JOIN v0 ON ((CAST(v0.c2 AS BLOB)) BETWEEN ((v0.c1 IN ())) AND ((vt2.c0 IN ()))) WHERE (((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c0 THEN vt2.c0 ELSE NULL END) NOT BETWEEN (v0.c2) AND ((NOT (v0.c2))))) ORDER BY (((NOT (v0.c3))) IS FALSE), TYPEOF(CAST(v0.c3 AS BLOB)) ASC, ((((((((((((v0.c0) BETWEEN (v0.c2) AND (x'')))AND(((v0.c2)/(v0.c2)))))OR(((v0.c1)<=(v0.c2)))))OR(((((v0.c3)AND(v0.c2)))OR(v0.c0)))))AND((NOT (v0.c3)))))AND(NULLIF(0.21117156732987274, v0.c1))) DESC;
SELECT ALL MIN(vt0.c0) FROM v0, vt0, vt2 WHERE (((- (v0.c1)) IN (((v0.c0)OR(v0.c0)))));
SELECT DISTINCT MIN(vt0.c0) FROM v0, vt0, vt2 WHERE (((- (v0.c1)) IN (((v0.c0)OR(v0.c0))))) ORDER BY v0.c2  NULLS FIRST INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM v0, vt0, vt2 WHERE (CHANGES()) ORDER BY v0.c2  NULLS FIRST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0) NOT NULL));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0) NOT NULL));
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (vt2.c1) ORDER BY (NOT ((~ (vt2.c1))))  NULLS FIRST, vt2.c1  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE (vt2.c1) ORDER BY (((+ (vt2.c0))) IS TRUE), CAST(IFNULL(vt0.c0, vt0.c0) AS BLOB) DESC  NULLS LAST LIMIT 5 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE (((0.8584779622366194) NOT BETWEEN (vt0.c0) AND (vt2.c0)) COLLATE RTRIM) ORDER BY (((+ (vt2.c0))) IS TRUE), CAST(IFNULL(vt0.c0, vt0.c0) AS BLOB) DESC  NULLS LAST LIMIT 5;
SELECT COUNT(*) FROM vt2 CROSS JOIN v0 ON rtreenode(((v0.c1) NOT BETWEEN (v0.c2) AND ('p')), HEX(v0.c2)) WHERE ((((v0.c2)) BETWEEN ((((vt2.c0) NOTNULL))) AND ((vt2.c1))));
SELECT COUNT(*) FROM vt2 CROSS JOIN v0 ON rtreenode(((v0.c1) NOT BETWEEN (v0.c2) AND ('p')), HEX(v0.c2)) WHERE ((((v0.c2)) BETWEEN ((((vt2.c0) NOTNULL))) AND ((vt2.c1)))) ORDER BY ((((((((v0.c1 COLLATE BINARY)OR(CASE vt2.c0  WHEN v0.c1 THEN vt2.c1 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN v0.c0 ELSE v0.c2 END)))AND((((0.888708325840219))<((vt2.c0))))))OR(((v0.c1) ISNULL))))OR(((((v0.c0)OR(v0.c2)))AND('806707789')))) LIMIT 0X0;
SELECT MAX(vt2.c0) FROM vt2 WHERE (((((+ (vt2.c0)), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))))<((CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN x'' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END, vt2.c0 COLLATE BINARY)))) ORDER BY STRFTIME(vt2.c0, NULLIF(x'19e30f', vt2.c0), vt2.c0 COLLATE NOCASE) DESC, vt2.c0 ASC  NULLS FIRST;
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (((((+ (vt2.c0)), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))))<((CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN x'' THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END, vt2.c0 COLLATE BINARY)))) ORDER BY CASE HEX(DISTINCT vt2.c1)  WHEN json(vt2.c0) THEN (((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))) WHEN ((vt2.c1)>>(vt2.c0)) THEN vt2.c0 COLLATE RTRIM WHEN ((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)) THEN CAST(vt2.c1 AS INTEGER) WHEN vt2.c1 THEN rtreenode(vt2.c0, vt2.c1) WHEN NULL THEN '189168943' WHEN '-115279217' THEN CAST(vt2.c0 AS INTEGER) END  NULLS FIRST LIMIT 0x2;
SELECT ALL MIN(v0.c1) FROM v0 WHERE (((CAST(v0.c2 AS TEXT)) NOT BETWEEN (LOWER(v0.c3)) AND ((((v0.c3, v0.c2)) NOT BETWEEN ((v0.c1, v0.c3)) AND ((v0.c2, v0.c2))))));
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE (((((CAST(v0.c2 AS TEXT)) NOT BETWEEN (LOWER(v0.c3)) AND ((((v0.c3, v0.c2)) NOT BETWEEN ((v0.c1, v0.c3)) AND ((v0.c2, v0.c2))))))AND((((v0.c1, (v0.c3 IN ()), v0.c0, (v0.c2 IN (v0.c0)), (v0.c3 IN ()), ((v0.c0)LIKE('-1006256381'))))<((((v0.c2) BETWEEN (v0.c0) AND (v0.c3)), -447903220, v0.c1, (((''))>((v0.c2))), ((v0.c2)IS(v0.c3)), ((((((((v0.c1)OR(v0.c3)))AND(v0.c3)))OR(v0.c0)))OR(v0.c2)))))))) ORDER BY (((json_array(v0.c2, v0.c2, v0.c0)))<=((((v0.c3)<(v0.c3))))) DESC  NULLS FIRST, v0.c3 ASC;
SELECT ALL * FROM vt2 WHERE ((NOT (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END)));
SELECT * FROM vt2 WHERE ((NOT (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))) INTERSECT SELECT * FROM vt2 WHERE ((('oM')-(((((NULL)AND(vt2.c1)))OR(vt2.c0)))));
SELECT ALL * FROM vt2 WHERE ((NOT (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END)));
SELECT * FROM vt2 WHERE ((NOT (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 END))) INTERSECT SELECT * FROM vt2 WHERE ((('oM')-(((((NULL)AND(vt2.c1)))OR(vt2.c0)))));
SELECT ALL * FROM v0 WHERE (CAST((v0.c0 IN (v0.c0)) AS NUMERIC));
SELECT DISTINCT * FROM v0 WHERE (CAST((v0.c0 IN (v0.c0)) AS NUMERIC)) LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (CAST((v0.c0 IN (v0.c0)) AS NUMERIC));
SELECT DISTINCT * FROM v0 WHERE (CAST((v0.c0 IN (v0.c0)) AS NUMERIC)) LIMIT 0x1;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((UPPER(vt2.c1))IS((vt2.c1 IN ()))));
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (((((UPPER(vt2.c1))IS((vt2.c1 IN ()))))AND((((vt2.c1 IN (vt2.c1))) ISNULL)))) INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (((((((((vt2.c1)<(vt2.c1)))OR((((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0))))))AND((vt2.c0 IN ()))))AND(CAST(vt2.c0 AS TEXT))));
SELECT MIN(vt2.c0) FROM vt0, vt2 WHERE ((vt2.c1 COLLATE RTRIM IN (((vt2.c1)IS(vt2.c0))))) ORDER BY CAST((NOT (vt2.c1)) AS REAL)  NULLS FIRST, (((((vt2.c1)OR(vt0.c0)))OR(vt0.c0)) IN ('416029335')) ASC;
SELECT MIN(vt2.c0) FROM vt0, vt2 WHERE ((vt2.c1 COLLATE RTRIM IN (((vt2.c1)IS(vt2.c0))))) ORDER BY CAST((NOT (vt2.c1)) AS REAL)  NULLS FIRST, (((((vt2.c1)OR(vt0.c0)))OR(vt0.c0)) IN ('416029335')) ASC LIMIT 0 INTERSECT SELECT MIN(vt2.c0) FROM vt0, vt2 WHERE (CASE vt2.c1  WHEN CAST(vt2.c0 AS NUMERIC) THEN ((vt2.c1)>=(vt2.c1)) END) ORDER BY CAST((NOT (vt2.c1)) AS REAL)  NULLS FIRST, (((((vt2.c1)OR(vt0.c0)))OR(vt0.c0)) IN ('416029335')) ASC LIMIT 0;
SELECT * FROM v0 WHERE ((NOT (v0.c2)) COLLATE NOCASE) ORDER BY (- (LOWER(DISTINCT v0.c1))), CAST((v0.c1 IN (v0.c2)) AS REAL) DESC;
SELECT * FROM v0 WHERE ((NOT (v0.c2)) COLLATE NOCASE) ORDER BY (- (LOWER(DISTINCT v0.c1))), CAST((v0.c1 IN (v0.c2)) AS REAL) DESC LIMIT 2 INTERSECT SELECT ALL * FROM v0 WHERE (CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN v0.c3 END COLLATE RTRIM) ORDER BY (- (LOWER(DISTINCT v0.c1))), CAST((v0.c1 IN (v0.c2)) AS REAL) DESC LIMIT 2;
SELECT * FROM v0 WHERE ((NOT (v0.c2)) COLLATE NOCASE) ORDER BY (- (LOWER(DISTINCT v0.c1))), CAST((v0.c1 IN (v0.c2)) AS REAL) DESC;
SELECT * FROM v0 WHERE ((NOT (v0.c2)) COLLATE NOCASE) ORDER BY (- (LOWER(DISTINCT v0.c1))), CAST((v0.c1 IN (v0.c2)) AS REAL) DESC LIMIT 2 INTERSECT SELECT ALL * FROM v0 WHERE (CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN v0.c3 END COLLATE RTRIM) ORDER BY (- (LOWER(DISTINCT v0.c1))), CAST((v0.c1 IN (v0.c2)) AS REAL) DESC LIMIT 2;
SELECT ALL MAX(vt0.c0) FROM vt0 CROSS JOIN vt2 ON vt0.c0 WHERE (((((vt2.c1)>(vt0.c0)))<<(((vt2.c0)LIKE(vt2.c0)))));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 CROSS JOIN vt2 ON vt0.c0 WHERE (((((((vt2.c1)>(vt0.c0)))<<(((vt2.c0)LIKE(vt2.c0)))))AND(((((((((((((vt0.c0)AND(vt2.c0)))OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))GLOB(((((((((vt2.c1)AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0))))))) ORDER BY (((vt2.c1) ISNULL) IN (CAST(vt0.c0 AS BLOB), ((vt2.c0) NOT NULL), NULL)) ASC  NULLS FIRST LIMIT 0x4;
SELECT * FROM v0, vt0 WHERE (v0.c2) ORDER BY (+ (v0.c0)) ASC, x'';
SELECT DISTINCT * FROM v0, vt0 WHERE (((v0.c2)AND(CASE WHEN '' THEN v0.c2 END))) ORDER BY TRIM((NOT (v0.c1)), 0xffffffffe8f53925)  NULLS FIRST, ((((vt0.c0) NOTNULL)) IS FALSE)  NULLS LAST, '' ASC  NULLS LAST;
SELECT * FROM v0, vt0 WHERE (v0.c2) ORDER BY (+ (v0.c0)) ASC, x'';
SELECT DISTINCT * FROM v0, vt0 WHERE (((v0.c2)AND(CASE WHEN '' THEN v0.c2 END))) ORDER BY TRIM((NOT (v0.c1)), 0xffffffffe8f53925)  NULLS FIRST, ((((vt0.c0) NOTNULL)) IS FALSE)  NULLS LAST, '' ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0, v0 INNER JOIN vt2 ON (((v0.c2)) NOT BETWEEN ((v0.c2)) AND (((~ (vt2.c0))))) WHERE (v0.c2) ORDER BY v0.c1 DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt0, v0 INNER JOIN vt2 ON (((v0.c2)) NOT BETWEEN ((v0.c2)) AND (((~ (vt2.c0))))) WHERE (((v0.c2)AND(x'' COLLATE RTRIM))) ORDER BY v0.c1 DESC  NULLS FIRST INTERSECT SELECT COUNT(*) FROM vt0, v0 INNER JOIN vt2 ON (((v0.c2)) NOT BETWEEN ((v0.c2)) AND (((~ (vt2.c0))))) WHERE (((v0.c3)%(((x'586983') IS TRUE)))) ORDER BY v0.c1 DESC  NULLS FIRST;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY CAST(((vt0.c0) NOTNULL) AS INTEGER)  NULLS FIRST, ((CAST(vt0.c0 AS BLOB))*(((vt0.c0)+(vt0.c0)))), (((((((('')AND(((vt0.c0) IS TRUE))))OR(IFNULL(DISTINCT vt0.c0, vt0.c0))))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))OR('1600896593'));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END AS REAL)))) ORDER BY vt0.c0  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS BLOB))+(((vt0.c0) NOTNULL)))) ORDER BY vt0.c0  NULLS FIRST;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY CAST(((vt0.c0) NOTNULL) AS INTEGER)  NULLS FIRST, ((CAST(vt0.c0 AS BLOB))*(((vt0.c0)+(vt0.c0)))), (((((((('')AND(((vt0.c0) IS TRUE))))OR(IFNULL(DISTINCT vt0.c0, vt0.c0))))OR(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))OR('1600896593'));
SELECT DISTINCT * FROM vt0 WHERE (((vt0.c0)AND(CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END AS REAL)))) ORDER BY vt0.c0  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS BLOB))+(((vt0.c0) NOTNULL)))) ORDER BY vt0.c0  NULLS FIRST;
SELECT ALL MAX(v0.c1) FROM v0 WHERE (((((v0.c1) NOTNULL)) IS FALSE)) ORDER BY CAST(v0.c0 COLLATE RTRIM AS REAL) ASC  NULLS LAST, NULL ASC;
SELECT MAX(v0.c1) FROM v0 WHERE (((((((v0.c1) NOTNULL)) IS FALSE))AND(((CAST(v0.c1 AS BLOB)) NOT NULL)))) ORDER BY ((-1727422081 COLLATE RTRIM) NOTNULL) ASC  NULLS FIRST, (((('nx*FsHDg')/('1013588357'))) NOT BETWEEN (CAST(v0.c2 AS BLOB)) AND (((((((v0.c0)AND(v0.c1)))AND(v0.c1)))OR('D189 8')))) LIMIT 1 INTERSECT SELECT ALL MAX(v0.c1) FROM v0 WHERE (0.26499007313964207) ORDER BY ((-1727422081 COLLATE RTRIM) NOTNULL) ASC  NULLS FIRST, (((('nx*FsHDg')/('1013588357'))) NOT BETWEEN (CAST(v0.c2 AS BLOB)) AND (((((((v0.c0)AND(v0.c1)))AND(v0.c1)))OR('D189 8')))) LIMIT 0x1;
SELECT MAX(v0.c2) FROM v0 WHERE ((+ (UNLIKELY(DISTINCT v0.c3)))) ORDER BY (((((v0.c3, v0.c3, v0.c0))<=((v0.c2, v0.c0, v0.c3)))) IS TRUE) ASC  NULLS LAST;
SELECT ALL MAX(v0.c2) FROM v0 WHERE ((((+ (UNLIKELY(DISTINCT v0.c3))))AND((((NOT (v0.c3))) ISNULL)))) ORDER BY v0.c1 DESC  NULLS LAST;
SELECT MAX(v0.c3) FROM v0, vt2 WHERE ((- (PRINTF(v0.c2)))) ORDER BY CAST((NOT ('0.05509927846959273')) AS TEXT) DESC  NULLS LAST, ((((v0.c3)<<(v0.c2))) NOT BETWEEN (CASE WHEN NULL THEN v0.c2 WHEN v0.c3 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END) AND ((((v0.c2, v0.c0, v0.c0)) BETWEEN ((v0.c1, v0.c2, v0.c0)) AND ((v0.c2, vt2.c0, v0.c1)))))  NULLS FIRST, ((vt2.c0 COLLATE RTRIM)||(0.9365710529299053)) ASC  NULLS FIRST, ((vt2.c1) IS TRUE) COLLATE NOCASE;
SELECT ALL MAX(v0.c3) FROM v0, vt2 WHERE ((- (PRINTF(v0.c2)))) ORDER BY CAST((NOT ('0.05509927846959273')) AS TEXT) DESC  NULLS LAST, ((((v0.c3)<<(v0.c2))) NOT BETWEEN (CASE WHEN NULL THEN v0.c2 WHEN v0.c3 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END) AND ((((v0.c2, v0.c0, v0.c0)) BETWEEN ((v0.c1, v0.c2, v0.c0)) AND ((v0.c2, vt2.c0, v0.c1)))))  NULLS FIRST, ((vt2.c0 COLLATE RTRIM)||(0.9365710529299053)) ASC  NULLS FIRST, ((vt2.c1) IS TRUE) COLLATE NOCASE;
SELECT ALL * FROM v0 WHERE (((((((v0.c1)OR(v0.c2 COLLATE RTRIM)))AND((v0.c3 IN (v0.c0)))))AND(((x'1b785afc') NOT BETWEEN (v0.c3) AND (v0.c2)))));
SELECT * FROM v0 WHERE (((((((v0.c1)OR(v0.c2 COLLATE RTRIM)))AND((v0.c3 IN (v0.c0)))))AND(((x'1b785afc') NOT BETWEEN (v0.c3) AND (v0.c2))))) ORDER BY CASE WHEN LIKELIHOOD(DISTINCT v0.c3, v0.c0) THEN v0.c1 COLLATE RTRIM WHEN v0.c2 THEN ((((v0.c2)OR(v0.c3)))OR(v0.c2)) END DESC, CAST((v0.c0 IN (v0.c1)) AS INTEGER)  NULLS FIRST, ((LIKELIHOOD(DISTINCT v0.c2, v0.c0)) NOTNULL)  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((((((v0.c1)OR(v0.c2 COLLATE RTRIM)))AND((v0.c3 IN (v0.c0)))))AND(((x'1b785afc') NOT BETWEEN (v0.c3) AND (v0.c2)))));
SELECT * FROM v0 WHERE (((((((v0.c1)OR(v0.c2 COLLATE RTRIM)))AND((v0.c3 IN (v0.c0)))))AND(((x'1b785afc') NOT BETWEEN (v0.c3) AND (v0.c2))))) ORDER BY CASE WHEN LIKELIHOOD(DISTINCT v0.c3, v0.c0) THEN v0.c1 COLLATE RTRIM WHEN v0.c2 THEN ((((v0.c2)OR(v0.c3)))OR(v0.c2)) END DESC, CAST((v0.c0 IN (v0.c1)) AS INTEGER)  NULLS FIRST, ((LIKELIHOOD(DISTINCT v0.c2, v0.c0)) NOTNULL)  NULLS FIRST;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (vt2.c1);
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (((vt2.c1)AND(((((x'2bf7')|(vt2.c0))) ISNULL)))) INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (TIME(NULL, vt2.c0, (- (vt2.c0)), vt2.c0 COLLATE NOCASE, (('-1953238461') IS TRUE)));
SELECT ALL * FROM vt2, vt0 WHERE (((((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0))) NOT BETWEEN ((~ (0.18774413983928284))) AND ((('FALSE')*(x''))))) ORDER BY (((vt0.c0, vt0.c0, vt2.c0, '-867047329')) BETWEEN ((((vt0.c0)&('-448587907')), (vt0.c0 IN ()), (((vt2.c0, vt2.c1, vt0.c0, vt2.c0, vt2.c1))>=((vt0.c0, vt0.c0, vt2.c0, vt0.c0, vt0.c0))), ((((((vt2.c0)AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))) AND ((x'', vt2.c0, '477587929', (vt2.c1 IN (vt0.c0, vt2.c0, vt2.c0))))) ASC  NULLS FIRST, vt0.c0;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0))) NOT BETWEEN ((~ (0.18774413983928284))) AND ((('FALSE')*(x''))))) ORDER BY (((vt0.c0, vt0.c0, vt2.c0, '-867047329')) BETWEEN ((((vt0.c0)&('-448587907')), (vt0.c0 IN ()), (((vt2.c0, vt2.c1, vt0.c0, vt2.c0, vt2.c1))>=((vt0.c0, vt0.c0, vt2.c0, vt0.c0, vt0.c0))), ((((((vt2.c0)AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))) AND ((x'', vt2.c0, '477587929', (vt2.c1 IN (vt0.c0, vt2.c0, vt2.c0))))) ASC  NULLS FIRST, vt0.c0;
SELECT ALL * FROM vt2, vt0 WHERE (((((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0))) NOT BETWEEN ((~ (0.18774413983928284))) AND ((('FALSE')*(x''))))) ORDER BY (((vt0.c0, vt0.c0, vt2.c0, '-867047329')) BETWEEN ((((vt0.c0)&('-448587907')), (vt0.c0 IN ()), (((vt2.c0, vt2.c1, vt0.c0, vt2.c0, vt2.c1))>=((vt0.c0, vt0.c0, vt2.c0, vt0.c0, vt0.c0))), ((((((vt2.c0)AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))) AND ((x'', vt2.c0, '477587929', (vt2.c1 IN (vt0.c0, vt2.c0, vt2.c0))))) ASC  NULLS FIRST, vt0.c0;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0))) NOT BETWEEN ((~ (0.18774413983928284))) AND ((('FALSE')*(x''))))) ORDER BY (((vt0.c0, vt0.c0, vt2.c0, '-867047329')) BETWEEN ((((vt0.c0)&('-448587907')), (vt0.c0 IN ()), (((vt2.c0, vt2.c1, vt0.c0, vt2.c0, vt2.c1))>=((vt0.c0, vt0.c0, vt2.c0, vt0.c0, vt0.c0))), ((((((vt2.c0)AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c1)))) AND ((x'', vt2.c0, '477587929', (vt2.c1 IN (vt0.c0, vt2.c0, vt2.c0))))) ASC  NULLS FIRST, vt0.c0;
SELECT MIN(v0.c3) FROM v0 WHERE (CAST(v0.c2 COLLATE BINARY AS NUMERIC));
SELECT MIN(v0.c3) FROM v0 WHERE (CAST(v0.c2 COLLATE BINARY AS NUMERIC)) LIMIT 0;
SELECT ALL COUNT(*) FROM vt2, v0 WHERE ((~ (CASE WHEN v0.c0 THEN v0.c0 ELSE vt2.c0 END)));
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE ((~ (CASE WHEN v0.c0 THEN v0.c0 ELSE vt2.c0 END))) ORDER BY ((CASE WHEN v0.c1 THEN x'' WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 WHEN v0.c0 THEN v0.c3 WHEN '816008624' THEN vt2.c1 END)AND(((vt2.c0)<(vt2.c0)))) ASC, CAST(CAST(x'' AS NUMERIC) AS BLOB);
SELECT ALL * FROM vt2 WHERE (LIKELIHOOD(CAST(vt2.c0 AS TEXT), vt2.c0 COLLATE NOCASE)) ORDER BY ((((vt2.c1)AND(vt2.c0)))AND(0.672882029177375)) COLLATE BINARY DESC;
SELECT ALL * FROM vt2 WHERE (((LIKELIHOOD(CAST(vt2.c0 AS TEXT), vt2.c0 COLLATE NOCASE))AND(vt2.c1))) ORDER BY ((((vt2.c1)AND(vt2.c0)))AND(0.672882029177375)) COLLATE BINARY DESC;
SELECT ALL * FROM vt2 WHERE (LIKELIHOOD(CAST(vt2.c0 AS TEXT), vt2.c0 COLLATE NOCASE)) ORDER BY ((((vt2.c1)AND(vt2.c0)))AND(0.672882029177375)) COLLATE BINARY DESC;
SELECT * FROM vt2 CROSS JOIN v0 ON ((((((v0.c3)AND(v0.c0)))AND(vt2.c0)))OR(v0.c2)) COLLATE BINARY WHERE (TIME(((v0.c3)LIKE('-1573526713')), (((vt2.c0, v0.c2, v0.c1)) NOT BETWEEN ((v0.c2, v0.c3, v0.c1)) AND ((vt2.c1, v0.c1, v0.c2))), (vt2.c0 IN (x'')), (NOT (NULL))));
SELECT * FROM vt2 CROSS JOIN v0 ON ((((((v0.c3)AND(v0.c0)))AND(vt2.c0)))OR(v0.c2)) COLLATE BINARY WHERE (((TIME(((v0.c3)LIKE('-1573526713')), (((vt2.c0, v0.c2, v0.c1)) NOT BETWEEN ((v0.c2, v0.c3, v0.c1)) AND ((vt2.c1, v0.c1, v0.c2))), (vt2.c0 IN (x'')), (NOT (NULL))))AND(UNLIKELY(v0.c1) COLLATE RTRIM))) ORDER BY (NOT (vt2.c0))  NULLS LAST;
SELECT * FROM vt2 CROSS JOIN v0 ON ((((((v0.c3)AND(v0.c0)))AND(vt2.c0)))OR(v0.c2)) COLLATE BINARY WHERE (TIME(((v0.c3)LIKE('-1573526713')), (((vt2.c0, v0.c2, v0.c1)) NOT BETWEEN ((v0.c2, v0.c3, v0.c1)) AND ((vt2.c1, v0.c1, v0.c2))), (vt2.c0 IN (x'')), (NOT (NULL))));
SELECT * FROM vt2 CROSS JOIN v0 ON ((((((v0.c3)AND(v0.c0)))AND(vt2.c0)))OR(v0.c2)) COLLATE BINARY WHERE (((TIME(((v0.c3)LIKE('-1573526713')), (((vt2.c0, v0.c2, v0.c1)) NOT BETWEEN ((v0.c2, v0.c3, v0.c1)) AND ((vt2.c1, v0.c1, v0.c2))), (vt2.c0 IN (x'')), (NOT (NULL))))AND(UNLIKELY(v0.c1) COLLATE RTRIM))) ORDER BY (NOT (vt2.c0))  NULLS LAST;
SELECT ALL MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (CASE WHEN v0.c1 THEN ((((((v0.c2)AND(vt2.c0)))AND(0xfffffffff0c361f3)))AND(v0.c2)) WHEN ((((((vt2.c1)AND(vt0.c0)))OR(v0.c2)))AND(v0.c2)) THEN v0.c3 COLLATE RTRIM WHEN ((vt2.c1)<<(v0.c3)) THEN (('#\R')-(vt2.c1)) WHEN ((v0.c0) NOTNULL) THEN CASE WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 END WHEN ((vt0.c0) NOT NULL) THEN v0.c0 WHEN 0.8351610666035666 THEN TRIM(DISTINCT vt2.c1, vt2.c0) END);
SELECT ALL MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (((CASE WHEN v0.c1 THEN ((((((v0.c2)AND(vt2.c0)))AND(0xfffffffff0c361f3)))AND(v0.c2)) WHEN ((((((vt2.c1)AND(vt0.c0)))OR(v0.c2)))AND(v0.c2)) THEN v0.c3 COLLATE RTRIM WHEN ((vt2.c1)<<(v0.c3)) THEN (('#\R')-(vt2.c1)) WHEN ((v0.c0) NOTNULL) THEN CASE WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 END WHEN ((vt0.c0) NOT NULL) THEN v0.c0 WHEN 0.8351610666035666 THEN TRIM(DISTINCT vt2.c1, vt2.c0) END)AND(((v0.c3 COLLATE NOCASE)=((((v0.c0, vt2.c0, v0.c1))==((NULL, vt0.c0, v0.c2)))))))) ORDER BY LENGTH((((v0.c2, '1176016219', v0.c3, NULL, v0.c1))>=((v0.c3, vt2.c0, v0.c1, v0.c3, v0.c2)))), LIKELIHOOD(DISTINCT v0.c2, v0.c1) COLLATE BINARY  NULLS FIRST, load_extension(v0.c1 COLLATE NOCASE) LIMIT 0X1 INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0, vt2, v0 WHERE (NULLIF(DISTINCT vt2.c0, vt2.c0) COLLATE NOCASE) ORDER BY LENGTH((((v0.c2, '1176016219', v0.c3, NULL, v0.c1))>=((v0.c3, vt2.c0, v0.c1, v0.c3, v0.c2)))), LIKELIHOOD(DISTINCT v0.c2, v0.c1) COLLATE BINARY  NULLS FIRST, load_extension(v0.c1 COLLATE NOCASE) LIMIT 0x1;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CAST(x'ee' AS NUMERIC));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CAST(x'ee' AS NUMERIC)) ORDER BY CAST(((vt0.c0) NOT BETWEEN (NULL) AND (vt0.c0)) AS INTEGER) DESC, '_N' ASC;
SELECT MIN(v0.c2) FROM v0 WHERE ((((((((v0.c1)OR(v0.c3)))AND(v0.c2))))=(((((NULL)) BETWEEN ((v0.c1)) AND ((v0.c0)))))));
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE ((((((((v0.c1)OR(v0.c3)))AND(v0.c2))))==(((((NULL)) BETWEEN ((v0.c1)) AND ((v0.c0))))))) ORDER BY x'' DESC  NULLS LAST, ((v0.c2 COLLATE RTRIM) NOT BETWEEN (((v0.c1) IS TRUE)) AND (((v0.c0) ISNULL))) LIMIT 0X4;
SELECT ALL MIN(v0.c0) FROM v0, vt2 WHERE (((CASE WHEN v0.c2 THEN vt2.c1 END)<<(v0.c0)));
SELECT DISTINCT MIN(v0.c0) FROM v0, vt2 WHERE (((CASE WHEN v0.c2 THEN vt2.c1 END)<<(v0.c0))) ORDER BY (- (UPPER(DISTINCT v0.c0)))  NULLS FIRST;
SELECT ALL * FROM v0, vt2 WHERE (((vt2.c0) NOT BETWEEN (v0.c1) AND (vt2.c0)) COLLATE RTRIM) ORDER BY CAST(((vt2.c0)<(v0.c0)) AS INTEGER) ASC;
SELECT ALL * FROM v0, vt2 WHERE (((vt2.c0) NOT BETWEEN (v0.c1) AND (vt2.c0)) COLLATE RTRIM) ORDER BY CAST(((vt2.c0)<(v0.c0)) AS INTEGER) ASC LIMIT 1;
SELECT ALL * FROM v0, vt2 WHERE (((vt2.c0) NOT BETWEEN (v0.c1) AND (vt2.c0)) COLLATE RTRIM) ORDER BY CAST(((vt2.c0)<(v0.c0)) AS INTEGER) ASC;
SELECT ALL * FROM v0, vt2 WHERE (((vt2.c0) NOT BETWEEN (v0.c1) AND (vt2.c0)) COLLATE RTRIM) ORDER BY CAST(((vt2.c0)<(v0.c0)) AS INTEGER) ASC LIMIT 1;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(0.7836912234200487 AS NUMERIC))!=(((vt0.c0)|(vt0.c0)))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((CAST(0.7836912234200487 AS NUMERIC))<(((vt0.c0)|(vt0.c0))))) ORDER BY CAST(CASE vt2.c1  WHEN vt0.c0 THEN v0.c0 WHEN v0.c0 THEN NULL ELSE v0.c2 END AS INTEGER) DESC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(0.7836912234200487 AS NUMERIC))!=(((vt0.c0)|(vt0.c0)))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (((CAST(0.7836912234200487 AS NUMERIC))<(((vt0.c0)|(vt0.c0))))) ORDER BY CAST(CASE vt2.c1  WHEN vt0.c0 THEN v0.c0 WHEN v0.c0 THEN NULL ELSE v0.c2 END AS INTEGER) DESC  NULLS FIRST;
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((((vt0.c0) NOT BETWEEN (0.7002674259243615) AND (0.8902951339166542)))AND(vt0.c0 COLLATE RTRIM)))OR(LOWER(v0.c1))));
SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((((vt0.c0) NOT BETWEEN (0.7002674259243615) AND (0.8902951339166542)))AND(vt0.c0 COLLATE RTRIM)))OR(LOWER(v0.c1)))) INTERSECT SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((CASE v0.c1  WHEN NULL THEN vt2.c0 ELSE v0.c2 END)OR(TRIM(v0.c3, vt2.c0))));
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((((vt0.c0) NOT BETWEEN (0.7002674259243615) AND (0.8902951339166542)))AND(vt0.c0 COLLATE RTRIM)))OR(LOWER(v0.c1))));
SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((((vt0.c0) NOT BETWEEN (0.7002674259243615) AND (0.8902951339166542)))AND(vt0.c0 COLLATE RTRIM)))OR(LOWER(v0.c1)))) INTERSECT SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((CASE v0.c1  WHEN NULL THEN vt2.c0 ELSE v0.c2 END)OR(TRIM(v0.c3, vt2.c0))));
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (CASE WHEN CAST(vt2.c1 AS REAL) THEN ((vt2.c1)IS NOT(vt2.c1)) WHEN CASE WHEN vt2.c0 THEN 0.8371558124005088 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END THEN (- (vt2.c1)) ELSE CAST(vt2.c1 AS REAL) END);
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (CASE WHEN CAST(vt2.c1 AS REAL) THEN ((vt2.c1)IS NOT(vt2.c1)) WHEN CASE WHEN vt2.c0 THEN 0.8371558124005088 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END THEN (- (vt2.c1)) ELSE CAST(vt2.c1 AS REAL) END) ORDER BY 0.28898083268769015 DESC  NULLS FIRST, '{u⧢' LIMIT 0 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (((((((vt2.c1)AND(vt2.c1)))AND(vt2.c1))) IS TRUE)) ORDER BY 0.28898083268769015 DESC  NULLS FIRST, '{u⧢' LIMIT 0x0;
SELECT COUNT(*) FROM vt2 WHERE ((~ (vt2.c1)) COLLATE NOCASE) ORDER BY HEX(((vt2.c0) NOT BETWEEN (x'6dfc') AND (vt2.c1)))  NULLS LAST;
SELECT COUNT(*) FROM vt2 WHERE ((~ (vt2.c1)) COLLATE NOCASE) ORDER BY ((-1560041564) NOT BETWEEN (((((vt2.c1)OR(vt2.c1)))OR(vt2.c0))) AND (((((((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)))AND(0xffffffffc820dfe6)))) DESC  NULLS LAST, ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c0))) NOT BETWEEN (TRIM(DISTINCT '-1165434253', vt2.c1)) AND (CAST(vt2.c0 AS INTEGER))), (vt2.c1 IN ()) COLLATE NOCASE ASC;
SELECT ALL MAX(v0.c1) FROM vt2, vt0, v0 WHERE (((CAST(x'' AS BLOB)) NOT NULL));
SELECT DISTINCT MAX(v0.c1) FROM vt2, vt0, v0 WHERE (((CAST(x'' AS BLOB)) NOT NULL)) LIMIT 0x1;
SELECT * FROM vt2, v0 WHERE ('?%9');
SELECT ALL * FROM vt2, v0 WHERE ('?%9') LIMIT 0;
SELECT * FROM vt2, v0 WHERE ('?%9');
SELECT ALL * FROM vt2, v0 WHERE ('?%9') LIMIT 0;
SELECT * FROM vt0 WHERE (((((('1625988069')) BETWEEN ((vt0.c0)) AND ((vt0.c0)))) NOT BETWEEN ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((0Xfffffffff43a7010)))) AND ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND (('?#N', vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY (((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))&('1976704639'));
SELECT * FROM vt0 WHERE (((((((('1625988069')) BETWEEN ((vt0.c0)) AND ((vt0.c0)))) NOT BETWEEN ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((-197496816)))) AND ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND (('?#N', vt0.c0, vt0.c0, vt0.c0))))))AND((((((x'06')<=(vt0.c0)), LOWER(DISTINCT vt0.c0), vt0.c0))>=((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)), vt0.c0, ((vt0.c0)%(vt0.c0)))))))) ORDER BY (((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))&('1976704639'));
SELECT * FROM vt0 WHERE (((((('1625988069')) BETWEEN ((vt0.c0)) AND ((vt0.c0)))) NOT BETWEEN ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((0Xfffffffff43a7010)))) AND ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND (('?#N', vt0.c0, vt0.c0, vt0.c0)))))) ORDER BY (((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))&('1976704639'));
SELECT * FROM vt0 WHERE (((((((('1625988069')) BETWEEN ((vt0.c0)) AND ((vt0.c0)))) NOT BETWEEN ((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((-197496816)))) AND ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) AND (('?#N', vt0.c0, vt0.c0, vt0.c0))))))AND((((((x'06')<=(vt0.c0)), LOWER(DISTINCT vt0.c0), vt0.c0))>=((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)), vt0.c0, ((vt0.c0)%(vt0.c0)))))))) ORDER BY (((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))&('1976704639'));
SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS REAL))>>(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY vt0.c0 DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS REAL))>>(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY (((vt0.c0, vt0.c0)) NOT BETWEEN ((ABS(vt0.c0), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)) AND ((vt0.c0 COLLATE BINARY, 0.5560344775307406))), (((x'' IN ())) NOT BETWEEN ((+ (vt0.c0))) AND (CAST(vt0.c0 AS NUMERIC)))  NULLS FIRST;
SELECT * FROM vt0 WHERE (((CAST(vt0.c0 AS REAL))>>(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY vt0.c0 DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS REAL))>>(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY (((vt0.c0, vt0.c0)) NOT BETWEEN ((ABS(vt0.c0), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)) AND ((vt0.c0 COLLATE BINARY, 0.5560344775307406))), (((x'' IN ())) NOT BETWEEN ((+ (vt0.c0))) AND (CAST(vt0.c0 AS NUMERIC)))  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((((((((CAST(vt0.c0 AS BLOB))AND(((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))))OR((- (vt0.c0)))))AND(-416655991)))OR(vt0.c0 COLLATE BINARY)))OR(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((((((((((((CAST(vt0.c0 AS BLOB))AND(((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))))OR((- (vt0.c0)))))AND(-416655991)))OR(vt0.c0 COLLATE BINARY)))OR(vt0.c0)))AND(CASE ((vt0.c0) IS FALSE)  WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (0X28b0ab85)) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN (vt0.c0 IN (vt0.c0)) END))) LIMIT 0x1;
SELECT ALL * FROM vt0 WHERE (((((((((((CAST(vt0.c0 AS BLOB))AND(((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))))OR((- (vt0.c0)))))AND(-416655991)))OR(vt0.c0 COLLATE BINARY)))OR(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((((((((((((CAST(vt0.c0 AS BLOB))AND(((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))))OR((- (vt0.c0)))))AND(-416655991)))OR(vt0.c0 COLLATE BINARY)))OR(vt0.c0)))AND(CASE ((vt0.c0) IS FALSE)  WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (0X28b0ab85)) THEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) WHEN CASE WHEN vt0.c0 THEN vt0.c0 END THEN (vt0.c0 IN (vt0.c0)) END))) LIMIT 0x1;
SELECT MIN(vt2.c0) FROM vt2 WHERE (((vt2.c0)<=(x'c497'))) ORDER BY ((- (vt2.c0)) IN (((vt2.c0)LIKE(vt2.c1)))) ASC  NULLS FIRST, ((CASE WHEN x'ee36' THEN 0.6901394955191038 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c1 END)<(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)))) DESC  NULLS LAST;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (((((vt2.c0)<=(x'c497')))AND((vt2.c0 COLLATE BINARY IN (CAST(vt2.c1 AS TEXT)))))) ORDER BY 0.19597303007149014 DESC, ((((vt2.c1) NOTNULL)) NOT NULL) DESC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT MIN(vt2.c0) FROM vt2 WHERE (((CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END) BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1))) AND (((vt2.c0) IS FALSE)))) ORDER BY 0.19597303007149014 DESC, ((((vt2.c1) NOTNULL)) NOT NULL) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0 LEFT OUTER JOIN v0 ON (((v0.c2 COLLATE BINARY, ((v0.c3)>=(v0.c2)), 0.10357720078815658 COLLATE RTRIM, (- (vt0.c0)), v0.c2 COLLATE NOCASE))<((vt2.c0, (3.3514151E7 IN (vt2.c1, vt2.c1)), CASE vt2.c1  WHEN v0.c2 THEN v0.c3 WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END, ((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)), x'f414'))) LEFT OUTER JOIN vt2 ON LIKELIHOOD(DISTINCT ((((((v0.c0)AND(vt0.c0)))OR(v0.c0)))AND(v0.c3)), ((vt0.c0) NOTNULL)) WHERE ((~ (TYPEOF(vt0.c0)))) ORDER BY ((((vt2.c1)AND((NOT (v0.c3)))))OR(((v0.c1)+(v0.c1)))) DESC, ((((v0.c3) IS FALSE)) NOT BETWEEN (vt2.c1) AND ((((('x
!*uudi')OR(NULL)))OR(vt2.c0)))), (((vt2.c1, v0.c0, 0Xffffffff8ca30fc2)) BETWEEN ((((((((((((0.5364726724149421)OR(x'88')))OR(vt0.c0)))AND(vt0.c0)))OR(v0.c1)))AND(v0.c1)), v0.c2, ((v0.c2)OR(vt2.c0)))) AND ((((((v0.c0)OR(v0.c3)))OR(v0.c0)), (v0.c1 IN (v0.c0)), CAST(vt2.c1 AS INTEGER)))) ASC;
SELECT ALL COUNT(*) FROM vt0 INNER JOIN v0 ON (((v0.c2 COLLATE BINARY, ((v0.c3)>=(v0.c2)), 0.10357720078815658 COLLATE RTRIM, (- (vt0.c0)), v0.c2 COLLATE NOCASE))<((vt2.c0, (3.3514151E7 IN (vt2.c1, vt2.c1)), CASE vt2.c1  WHEN v0.c2 THEN v0.c3 WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END, ((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)), x'f414'))) LEFT OUTER JOIN vt2 ON LIKELIHOOD(DISTINCT ((((((v0.c0)AND(vt0.c0)))OR(v0.c0)))AND(v0.c3)), ((vt0.c0) NOTNULL)) WHERE ((~ (TYPEOF(vt0.c0)))) ORDER BY ((((vt2.c1)AND((NOT (v0.c3)))))OR(((v0.c1)+(v0.c1)))) DESC, ((((v0.c3) IS FALSE)) NOT BETWEEN (vt2.c1) AND ((((('x
!*uudi')OR(NULL)))OR(vt2.c0)))), (((vt2.c1, v0.c0, 0Xffffffff8ca30fc2)) BETWEEN ((((((((((((0.5364726724149421)OR(x'88')))OR(vt0.c0)))AND(vt0.c0)))OR(v0.c1)))AND(v0.c1)), v0.c2, ((v0.c2)OR(vt2.c0)))) AND ((((((v0.c0)OR(v0.c3)))OR(v0.c0)), (v0.c1 IN (v0.c0)), CAST(vt2.c1 AS INTEGER)))) ASC INTERSECT SELECT COUNT(*) FROM vt0 INNER JOIN v0 ON (((v0.c2 COLLATE BINARY, ((v0.c3)>=(v0.c2)), 0.10357720078815658 COLLATE RTRIM, (- (vt0.c0)), v0.c2 COLLATE NOCASE))<((vt2.c0, (3.3514151E7 IN (vt2.c1, vt2.c1)), CASE vt2.c1  WHEN v0.c2 THEN v0.c3 WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END, ((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)), x'f414'))) LEFT OUTER JOIN vt2 ON LIKELIHOOD(DISTINCT ((((((v0.c0)AND(vt0.c0)))OR(v0.c0)))AND(v0.c3)), ((vt0.c0) NOTNULL)) WHERE ((((- (v0.c0)))OR((+ (v0.c0))))) ORDER BY ((((vt2.c1)AND((NOT (v0.c3)))))OR(((v0.c1)+(v0.c1)))) DESC, ((((v0.c3) IS FALSE)) NOT BETWEEN (vt2.c1) AND ((((('x
!*uudi')OR(NULL)))OR(vt2.c0)))), (((vt2.c1, v0.c0, 0Xffffffff8ca30fc2)) BETWEEN ((((((((((((0.5364726724149421)OR(x'88')))OR(vt0.c0)))AND(vt0.c0)))OR(v0.c1)))AND(v0.c1)), v0.c2, ((v0.c2)OR(vt2.c0)))) AND ((((((v0.c0)OR(v0.c3)))OR(v0.c0)), (v0.c1 IN (v0.c0)), CAST(vt2.c1 AS INTEGER)))) ASC;
SELECT ALL * FROM vt2, v0 WHERE (TRIM((~ (v0.c0)), ((((((((vt2.c0)AND(vt2.c0)))OR(v0.c3)))OR(v0.c2)))AND(v0.c3)))) ORDER BY CAST(v0.c3 COLLATE BINARY AS REAL) DESC  NULLS LAST, (((((((((((v0.c1, v0.c2, vt2.c1, vt2.c1))>((vt2.c0, x'314b4bde', vt2.c0, vt2.c1))))OR(((vt2.c0) ISNULL))))OR(x'')))AND((((v0.c3, vt2.c1))>=((v0.c1, v0.c0))))))OR(((vt2.c0)OR(v0.c2))))  NULLS FIRST, UNLIKELY(DISTINCT (+ (v0.c3)))  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (TRIM((~ (v0.c0)), ((((((((vt2.c0)AND(vt2.c0)))OR(v0.c3)))OR(v0.c2)))AND(v0.c3)))) ORDER BY CAST(v0.c3 COLLATE BINARY AS REAL) DESC  NULLS LAST, (((((((((((v0.c1, v0.c2, vt2.c1, vt2.c1))>((vt2.c0, x'314b4bde', vt2.c0, vt2.c1))))OR(((vt2.c0) ISNULL))))OR(x'')))AND((((v0.c3, vt2.c1))>=((v0.c1, v0.c0))))))OR(((vt2.c0)OR(v0.c2))))  NULLS FIRST, UNLIKELY(DISTINCT (+ (v0.c3)))  NULLS LAST;
SELECT ALL * FROM vt2, v0 WHERE (TRIM((~ (v0.c0)), ((((((((vt2.c0)AND(vt2.c0)))OR(v0.c3)))OR(v0.c2)))AND(v0.c3)))) ORDER BY CAST(v0.c3 COLLATE BINARY AS REAL) DESC  NULLS LAST, (((((((((((v0.c1, v0.c2, vt2.c1, vt2.c1))>((vt2.c0, x'314b4bde', vt2.c0, vt2.c1))))OR(((vt2.c0) ISNULL))))OR(x'')))AND((((v0.c3, vt2.c1))>=((v0.c1, v0.c0))))))OR(((vt2.c0)OR(v0.c2))))  NULLS FIRST, UNLIKELY(DISTINCT (+ (v0.c3)))  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (TRIM((~ (v0.c0)), ((((((((vt2.c0)AND(vt2.c0)))OR(v0.c3)))OR(v0.c2)))AND(v0.c3)))) ORDER BY CAST(v0.c3 COLLATE BINARY AS REAL) DESC  NULLS LAST, (((((((((((v0.c1, v0.c2, vt2.c1, vt2.c1))>((vt2.c0, x'314b4bde', vt2.c0, vt2.c1))))OR(((vt2.c0) ISNULL))))OR(x'')))AND((((v0.c3, vt2.c1))>=((v0.c1, v0.c0))))))OR(((vt2.c0)OR(v0.c2))))  NULLS FIRST, UNLIKELY(DISTINCT (+ (v0.c3)))  NULLS LAST;
SELECT * FROM v0, vt0 WHERE (((((((v0.c2)==(0.06890734669914611)))OR(UPPER(v0.c1))))AND('1247621022')));
SELECT DISTINCT * FROM v0, vt0 WHERE (((((((((v0.c2)==(0.06890734669914611)))OR(UPPER(v0.c1))))AND('1247621022')))AND((v0.c2 IN (vt0.c0)) COLLATE NOCASE))) ORDER BY (((vt0.c0, v0.c2, v0.c3)) NOT BETWEEN ((((vt0.c0) ISNULL), ((v0.c3)!=(v0.c0)), ((((vt0.c0)AND(v0.c2)))OR(v0.c1)))) AND ((TYPEOF(DISTINCT v0.c2), NULL, json_patch(v0.c3, vt0.c0)))) ASC  NULLS FIRST, UNICODE(0Xffffffffab7e7afc) ASC, (((((vt0.c0, v0.c1, v0.c3))<=((NULL, v0.c3, vt0.c0)))) NOT NULL)  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE ((~ (((((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(x'')))AND(v0.c0)))AND(vt0.c0)))AND(vt0.c0))))) ORDER BY (((vt0.c0, v0.c2, v0.c3)) NOT BETWEEN ((((vt0.c0) ISNULL), ((v0.c3)!=(v0.c0)), ((((vt0.c0)AND(v0.c2)))OR(v0.c1)))) AND ((TYPEOF(DISTINCT v0.c2), NULL, json_patch(v0.c3, vt0.c0)))) ASC  NULLS FIRST, UNICODE(0xffffffffab7e7afc) ASC, (((((vt0.c0, v0.c1, v0.c3))<=((NULL, v0.c3, vt0.c0)))) NOT NULL)  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt0 WHERE (((((((v0.c2)==(0.06890734669914611)))OR(UPPER(v0.c1))))AND('1247621022')));
SELECT DISTINCT * FROM v0, vt0 WHERE (((((((((v0.c2)==(0.06890734669914611)))OR(UPPER(v0.c1))))AND('1247621022')))AND((v0.c2 IN (vt0.c0)) COLLATE NOCASE))) ORDER BY (((vt0.c0, v0.c2, v0.c3)) NOT BETWEEN ((((vt0.c0) ISNULL), ((v0.c3)!=(v0.c0)), ((((vt0.c0)AND(v0.c2)))OR(v0.c1)))) AND ((TYPEOF(DISTINCT v0.c2), NULL, json_patch(v0.c3, vt0.c0)))) ASC  NULLS FIRST, UNICODE(0Xffffffffab7e7afc) ASC, (((((vt0.c0, v0.c1, v0.c3))<=((NULL, v0.c3, vt0.c0)))) NOT NULL)  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE ((~ (((((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(x'')))AND(v0.c0)))AND(vt0.c0)))AND(vt0.c0))))) ORDER BY (((vt0.c0, v0.c2, v0.c3)) NOT BETWEEN ((((vt0.c0) ISNULL), ((v0.c3)!=(v0.c0)), ((((vt0.c0)AND(v0.c2)))OR(v0.c1)))) AND ((TYPEOF(DISTINCT v0.c2), NULL, json_patch(v0.c3, vt0.c0)))) ASC  NULLS FIRST, UNICODE(0xffffffffab7e7afc) ASC, (((((vt0.c0, v0.c1, v0.c3))<=((NULL, v0.c3, vt0.c0)))) NOT NULL)  NULLS LAST LIMIT 0;
SELECT ALL MIN(v0.c1) FROM v0, vt2 WHERE ((CAST(vt2.c0 AS REAL) IN (LIKELY(vt2.c1), (v0.c3 IN ()))));
SELECT DISTINCT MIN(v0.c1) FROM v0, vt2 WHERE ((((CAST(vt2.c0 AS REAL) IN (LIKELY(vt2.c1), (v0.c3 IN ()))))AND(((((vt2.c1)&(vt2.c1))) NOT NULL)))) ORDER BY (((vt2.c1 IN ())) NOT BETWEEN ((- (vt2.c1))) AND ((v0.c1 IN (v0.c2)))) DESC  NULLS FIRST LIMIT 0X1;
SELECT ALL * FROM v0 WHERE ((+ (((((((((((v0.c2)AND(v0.c3)))OR(v0.c1)))OR(v0.c3)))AND(v0.c2)))OR(x'')))));
SELECT DISTINCT * FROM v0 WHERE ((+ (((((((((((v0.c2)AND(v0.c3)))OR(v0.c1)))OR(v0.c3)))AND(v0.c2)))OR(x''))))) ORDER BY (((((('609927945')OR(((((((((v0.c2)AND(v0.c3)))AND(v0.c3)))AND(v0.c1)))OR(v0.c2)))))AND(((v0.c3)<=(v0.c1)))))AND(((v0.c0) IS FALSE))) ASC;
SELECT ALL * FROM v0 WHERE ((+ (((((((((((v0.c2)AND(v0.c3)))OR(v0.c1)))OR(v0.c3)))AND(v0.c2)))OR(x'')))));
SELECT DISTINCT * FROM v0 WHERE ((+ (((((((((((v0.c2)AND(v0.c3)))OR(v0.c1)))OR(v0.c3)))AND(v0.c2)))OR(x''))))) ORDER BY (((((('609927945')OR(((((((((v0.c2)AND(v0.c3)))AND(v0.c3)))AND(v0.c1)))OR(v0.c2)))))AND(((v0.c3)<=(v0.c1)))))AND(((v0.c0) IS FALSE))) ASC;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (vt0.c0) ORDER BY ((NULL)<(((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))), ((vt0.c0)>((vt0.c0 IN ()))) ASC  NULLS FIRST, (NOT ((((vt0.c0, vt0.c0))>=(('-1872550819', vt0.c0)))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (vt0.c0) ORDER BY (((((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) IN ((vt0.c0 IN ())))  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE (((((v0.c0 IN (v0.c3, v0.c3))))>(((~ (vt2.c0)))))) ORDER BY CASE WHEN 0Xcc35c34 THEN CAST(v0.c2 AS NUMERIC) WHEN ((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)) THEN CASE WHEN v0.c2 THEN vt2.c1 WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN v0.c2 WHEN vt2.c1 THEN v0.c1 ELSE v0.c2 END WHEN CASE vt2.c1  WHEN v0.c1 THEN v0.c3 WHEN v0.c1 THEN vt2.c0 ELSE x'22' END THEN CASE v0.c0  WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN vt2.c1 THEN vt0.c0 WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN -734232506 END WHEN ((vt0.c0)>(vt0.c0)) THEN '-501554083' COLLATE NOCASE END ASC, ((((v0.c3) BETWEEN (vt2.c1) AND (NULL))) ISNULL) DESC, ('歉j-Infinityx' IN (((vt2.c1) BETWEEN (vt2.c0) AND (v0.c1))));
SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (((((v0.c0 IN (v0.c3, v0.c3))))>(((~ (vt2.c0)))))) ORDER BY ((CASE WHEN vt2.c1 THEN v0.c3 END) IS TRUE) DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (((((vt2.c0) IS FALSE))AND(((vt2.c1)-(v0.c1))))) ORDER BY ((CASE WHEN vt2.c1 THEN v0.c3 END) IS TRUE) DESC  NULLS LAST LIMIT 0;
SELECT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (0.37765834051048874) ORDER BY CASE CASE v0.c3  WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN vt2.c1 ELSE '2,f' END  WHEN ((v0.c2)+(v0.c2)) THEN ((vt2.c0)=(vt2.c0)) ELSE ((v0.c0) NOTNULL) END ASC, CASE v0.c0  WHEN '-1165434253' THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c1 END COLLATE BINARY DESC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (0.37765834051048874) ORDER BY CASE CASE v0.c3  WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN vt2.c1 ELSE '2,f' END  WHEN ((v0.c2)+(v0.c2)) THEN ((vt2.c0)==(vt2.c0)) ELSE ((v0.c0) NOTNULL) END ASC, CASE v0.c0  WHEN '-1165434253' THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c1 END COLLATE BINARY DESC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT MAX(v0.c1) FROM vt0, v0, vt2 WHERE (-1961580373) ORDER BY CASE CASE v0.c3  WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN vt2.c1 ELSE '2,f' END  WHEN ((v0.c2)+(v0.c2)) THEN ((vt2.c0)==(vt2.c0)) ELSE ((v0.c0) NOTNULL) END ASC, CASE v0.c0  WHEN '-1165434253' THEN vt2.c0 WHEN vt2.c0 THEN v0.c2 ELSE v0.c1 END COLLATE BINARY DESC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (SQLITE_VERSION());
SELECT * FROM vt2, v0, vt0 WHERE (((SQLITE_VERSION())AND(LOWER(DISTINCT vt2.c1) COLLATE NOCASE))) ORDER BY highlight(CAST(vt0.c0 AS TEXT), v0.c2 COLLATE BINARY, ((v0.c2)*(v0.c1)), SQLITE_COMPILEOPTION_GET('
E<')) DESC  NULLS FIRST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (SQLITE_VERSION());
SELECT * FROM vt2, v0, vt0 WHERE (((SQLITE_VERSION())AND(LOWER(DISTINCT vt2.c1) COLLATE NOCASE))) ORDER BY highlight(CAST(vt0.c0 AS TEXT), v0.c2 COLLATE BINARY, ((v0.c2)*(v0.c1)), SQLITE_COMPILEOPTION_GET('
E<')) DESC  NULLS FIRST;
SELECT ALL * FROM vt0, v0 WHERE ((v0.c0 IN ())) ORDER BY (((((((((((~ (v0.c0)))AND(CAST(vt0.c0 AS NUMERIC))))AND(CASE WHEN vt0.c0 THEN v0.c1 END)))AND(v0.c2)))AND(UPPER(v0.c2))))OR(json_type(v0.c2))), ((((vt0.c0)>(v0.c3))) BETWEEN ((v0.c3 IN (v0.c2, x'3b49'))) AND (NULL COLLATE RTRIM));
SELECT ALL * FROM vt0, v0 WHERE ((v0.c0 IN ())) ORDER BY (((((((((((~ (v0.c0)))AND(CAST(vt0.c0 AS NUMERIC))))AND(CASE WHEN vt0.c0 THEN v0.c1 END)))AND(v0.c2)))AND(UPPER(v0.c2))))OR(json_type(v0.c2))), ((((vt0.c0)>(v0.c3))) BETWEEN ((v0.c3 IN (v0.c2, x'3b49'))) AND (NULL COLLATE RTRIM)) INTERSECT SELECT ALL * FROM vt0, v0 WHERE (CASE WHEN v0.c3 THEN v0.c1 ELSE v0.c0 END COLLATE NOCASE) ORDER BY (((((((((((~ (v0.c0)))AND(CAST(vt0.c0 AS NUMERIC))))AND(CASE WHEN vt0.c0 THEN v0.c1 END)))AND(v0.c2)))AND(UPPER(v0.c2))))OR(json_type(v0.c2))), ((((vt0.c0)>(v0.c3))) BETWEEN ((v0.c3 IN (v0.c2, x'3b49'))) AND (NULL COLLATE RTRIM));
SELECT ALL * FROM vt0, v0 WHERE ((v0.c0 IN ())) ORDER BY (((((((((((~ (v0.c0)))AND(CAST(vt0.c0 AS NUMERIC))))AND(CASE WHEN vt0.c0 THEN v0.c1 END)))AND(v0.c2)))AND(UPPER(v0.c2))))OR(json_type(v0.c2))), ((((vt0.c0)>(v0.c3))) BETWEEN ((v0.c3 IN (v0.c2, x'3b49'))) AND (NULL COLLATE RTRIM));
SELECT ALL * FROM vt0, v0 WHERE ((v0.c0 IN ())) ORDER BY (((((((((((~ (v0.c0)))AND(CAST(vt0.c0 AS NUMERIC))))AND(CASE WHEN vt0.c0 THEN v0.c1 END)))AND(v0.c2)))AND(UPPER(v0.c2))))OR(json_type(v0.c2))), ((((vt0.c0)>(v0.c3))) BETWEEN ((v0.c3 IN (v0.c2, x'3b49'))) AND (NULL COLLATE RTRIM)) INTERSECT SELECT ALL * FROM vt0, v0 WHERE (CASE WHEN v0.c3 THEN v0.c1 ELSE v0.c0 END COLLATE NOCASE) ORDER BY (((((((((((~ (v0.c0)))AND(CAST(vt0.c0 AS NUMERIC))))AND(CASE WHEN vt0.c0 THEN v0.c1 END)))AND(v0.c2)))AND(UPPER(v0.c2))))OR(json_type(v0.c2))), ((((vt0.c0)>(v0.c3))) BETWEEN ((v0.c3 IN (v0.c2, x'3b49'))) AND (NULL COLLATE RTRIM));
SELECT ALL * FROM vt2, v0 WHERE (((((NULL)<=(-1508875463))) NOT NULL));
SELECT DISTINCT * FROM vt2, v0 WHERE (((((((NULL)<=(0xffffffffa6106339))) NOT NULL))AND((((vt2.c0, v0.c3)) NOT BETWEEN ((((vt2.c1) IS FALSE), (((v0.c2))>((vt2.c0))))) AND (((((vt2.c1))<((v0.c2))), v0.c2 COLLATE NOCASE)))))) ORDER BY ((v0.c1 COLLATE BINARY)<=((+ (vt2.c1)))), ((('y' IN ()))||(((vt2.c1) NOT BETWEEN (v0.c3) AND (x'f2d7')))) ASC INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE ((((NOT (v0.c2)))AND((0.5368857602257637 IN ('?
4Y9j>'))))) ORDER BY ((v0.c1 COLLATE BINARY)<=((+ (vt2.c1)))), ((('y' IN ()))||(((vt2.c1) NOT BETWEEN (v0.c3) AND (x'f2d7')))) ASC;
SELECT ALL * FROM vt2, v0 WHERE (((((NULL)<=(-1508875463))) NOT NULL));
SELECT DISTINCT * FROM vt2, v0 WHERE (((((((NULL)<=(0xffffffffa6106339))) NOT NULL))AND((((vt2.c0, v0.c3)) NOT BETWEEN ((((vt2.c1) IS FALSE), (((v0.c2))>((vt2.c0))))) AND (((((vt2.c1))<((v0.c2))), v0.c2 COLLATE NOCASE)))))) ORDER BY ((v0.c1 COLLATE BINARY)<=((+ (vt2.c1)))), ((('y' IN ()))||(((vt2.c1) NOT BETWEEN (v0.c3) AND (x'f2d7')))) ASC INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE ((((NOT (v0.c2)))AND((0.5368857602257637 IN ('?
4Y9j>'))))) ORDER BY ((v0.c1 COLLATE BINARY)<=((+ (vt2.c1)))), ((('y' IN ()))||(((vt2.c1) NOT BETWEEN (v0.c3) AND (x'f2d7')))) ASC;
SELECT * FROM v0, vt2 WHERE (v0.c2);
SELECT ALL * FROM v0, vt2 WHERE (v0.c2) ORDER BY (- (((v0.c2)>(v0.c1)))) INTERSECT SELECT * FROM v0, vt2 WHERE (CAST(CAST(v0.c3 AS TEXT) AS TEXT)) ORDER BY (- (((v0.c2)>(v0.c1))));
SELECT * FROM v0, vt2 WHERE (v0.c2);
SELECT ALL * FROM v0, vt2 WHERE (v0.c2) ORDER BY (- (((v0.c2)>(v0.c1)))) INTERSECT SELECT * FROM v0, vt2 WHERE (CAST(CAST(v0.c3 AS TEXT) AS TEXT)) ORDER BY (- (((v0.c2)>(v0.c1))));
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (json_array(((x'') NOT BETWEEN (v0.c2) AND (v0.c3)), (~ (v0.c2)), ((((((((v0.c0)AND(v0.c2)))AND(v0.c2)))OR(v0.c2)))OR(v0.c2))));
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (((json_array(((x'') NOT BETWEEN (v0.c2) AND (v0.c3)), (~ (v0.c2)), ((((((((v0.c0)AND(v0.c2)))AND(v0.c2)))OR(v0.c2)))OR(v0.c2))))AND(CAST(((v0.c3) IS FALSE) AS INTEGER))));
SELECT ALL * FROM v0 WHERE (v0.c3);
SELECT * FROM v0 WHERE (v0.c3);
SELECT ALL * FROM v0 WHERE (v0.c3);
SELECT * FROM v0 WHERE (v0.c3);
SELECT COUNT(*) FROM vt2, v0 WHERE ((((v0.c0 IN ())) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND ((((NULL, vt2.c1, vt2.c0)) NOT BETWEEN ((0.8984637944769236, v0.c3, v0.c0)) AND ((62299617, v0.c1, v0.c3))))));
SELECT COUNT(*) FROM vt2, v0 WHERE ((((((v0.c0 IN ())) NOT BETWEEN (v0.c1 COLLATE RTRIM) AND ((((NULL, vt2.c1, vt2.c0)) NOT BETWEEN ((0.8984637944769236, v0.c3, v0.c0)) AND ((62299617, v0.c1, v0.c3))))))AND(((((((v0.c0)OR(v0.c3)))AND('Y?n7L'))) BETWEEN ((+ (v0.c0))) AND (CAST(vt2.c0 AS BLOB)))))) ORDER BY ((v0.c3) IS FALSE) COLLATE NOCASE DESC  NULLS LAST, ((((v0.c1) BETWEEN (v0.c2) AND (v0.c3)))<(0.6026076711735104)) ASC  NULLS FIRST, (((v0.c3, v0.c2, v0.c0, v0.c2))!=((vt2.c0, vt2.c1, v0.c2, v0.c2))) COLLATE RTRIM  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL COUNT(*) FROM vt2, v0 WHERE ((((UPPER(v0.c0)))>(((((((((((('1286738256')AND(vt2.c0)))AND(vt2.c1)))OR(v0.c1)))OR(v0.c2)))AND(v0.c3)))))) ORDER BY ((v0.c3) IS FALSE) COLLATE NOCASE DESC  NULLS LAST, ((((v0.c1) BETWEEN (v0.c2) AND (v0.c3)))<(0.6026076711735104)) ASC  NULLS FIRST, (((v0.c3, v0.c2, v0.c0, v0.c2))!=((vt2.c0, vt2.c1, v0.c2, v0.c2))) COLLATE RTRIM  NULLS FIRST LIMIT 0x1;
SELECT * FROM v0, vt0, vt2 WHERE (((CAST(vt2.c0 AS INTEGER))==(((vt2.c0)AND(vt2.c0))))) ORDER BY ((vt2.c0 COLLATE RTRIM) IS FALSE) ASC  NULLS LAST, CAST((v0.c3 IN (x'49')) AS REAL) DESC;
SELECT * FROM v0, vt0, vt2 NOT INDEXED WHERE (((((CAST(vt2.c0 AS INTEGER))==(((vt2.c0)AND(vt2.c0)))))AND(((NULL) NOT NULL)))) ORDER BY ((vt2.c0 COLLATE RTRIM) IS FALSE) ASC  NULLS LAST, CAST((v0.c3 IN (x'49')) AS REAL) DESC LIMIT 0 INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (((((vt0.c0)<=(v0.c0)))>(((v0.c1) IS TRUE)))) ORDER BY ((vt2.c0 COLLATE RTRIM) IS FALSE) ASC  NULLS LAST, CAST((v0.c3 IN (x'49')) AS REAL) DESC LIMIT 0x0;
SELECT * FROM v0, vt0, vt2 WHERE (((CAST(vt2.c0 AS INTEGER))==(((vt2.c0)AND(vt2.c0))))) ORDER BY ((vt2.c0 COLLATE RTRIM) IS FALSE) ASC  NULLS LAST, CAST((v0.c3 IN (x'49')) AS REAL) DESC;
SELECT * FROM v0, vt0, vt2 NOT INDEXED WHERE (((((CAST(vt2.c0 AS INTEGER))==(((vt2.c0)AND(vt2.c0)))))AND(((NULL) NOT NULL)))) ORDER BY ((vt2.c0 COLLATE RTRIM) IS FALSE) ASC  NULLS LAST, CAST((v0.c3 IN (x'49')) AS REAL) DESC LIMIT 0 INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (((((vt0.c0)<=(v0.c0)))>(((v0.c1) IS TRUE)))) ORDER BY ((vt2.c0 COLLATE RTRIM) IS FALSE) ASC  NULLS LAST, CAST((v0.c3 IN (x'49')) AS REAL) DESC LIMIT 0x0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (IFNULL(DISTINCT vt2.c0 COLLATE RTRIM, (((vt2.c1))>=((v0.c1))))) ORDER BY ((((((((((((vt0.c0)OR(0.859386632818574)))OR(v0.c2)))AND(vt2.c1)))OR(v0.c1)))OR(v0.c1)))&(v0.c3 COLLATE NOCASE)) ASC;
SELECT * FROM vt2, v0, vt0 WHERE (IFNULL(DISTINCT vt2.c0 COLLATE RTRIM, (((vt2.c1))=((v0.c1))))) ORDER BY ((LOWER(vt2.c0)) IS TRUE)  NULLS FIRST;
SELECT ALL * FROM vt2, v0, vt0 WHERE (IFNULL(DISTINCT vt2.c0 COLLATE RTRIM, (((vt2.c1))>=((v0.c1))))) ORDER BY ((((((((((((vt0.c0)OR(0.859386632818574)))OR(v0.c2)))AND(vt2.c1)))OR(v0.c1)))OR(v0.c1)))&(v0.c3 COLLATE NOCASE)) ASC;
SELECT * FROM vt2, v0, vt0 WHERE (IFNULL(DISTINCT vt2.c0 COLLATE RTRIM, (((vt2.c1))=((v0.c1))))) ORDER BY ((LOWER(vt2.c0)) IS TRUE)  NULLS FIRST;
SELECT MIN(v0.c0) FROM v0 WHERE (LTRIM(''));
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((LTRIM(''))AND(((((x'')*(v0.c1)))-(CASE WHEN v0.c0 THEN v0.c1 END)))));
SELECT MAX(v0.c0) FROM vt0, v0 WHERE ((((v0.c1) ISNULL) IN (((v0.c0)*(916626587)), (v0.c3 IN ()))));
SELECT DISTINCT MAX(v0.c0) FROM vt0, v0 WHERE ((((((v0.c1) ISNULL) IN (((v0.c0)*(0x36a29c9b)), (v0.c3 IN ()))))AND(CAST((v0.c3 IN (v0.c0, 0.7608310758664194)) AS BLOB)))) ORDER BY (((v0.c2, vt0.c0, v0.c0)) BETWEEN ((((x'')/(v0.c0)), (v0.c3 IN (v0.c2)), LIKELY(DISTINCT v0.c3))) AND (((((v0.c3, vt0.c0, v0.c2, v0.c1, vt0.c0)) NOT BETWEEN ((v0.c0, vt0.c0, v0.c3, v0.c3, v0.c1)) AND ((v0.c0, v0.c1, vt0.c0, v0.c2, vt0.c0))), vt0.c0, (((v0.c3, v0.c1, v0.c0))<>((v0.c2, v0.c0, v0.c0)))))) LIMIT 0;
SELECT ALL MAX(vt0.c0) FROM vt2, vt0 WHERE (CAST(((vt0.c0)=(vt2.c0)) AS BLOB));
SELECT MAX(vt0.c0) FROM vt2, vt0 WHERE (((CAST(((vt0.c0)=(vt2.c0)) AS BLOB))AND((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), ((vt2.c1)GLOB(vt0.c0)), vt2.c0 COLLATE BINARY))<=((((vt0.c0)!=(vt2.c1)), (~ (vt2.c0)), (((vt2.c1)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))))))) ORDER BY ((((((vt2.c1)>=(vt2.c0)))AND(x'3d')))AND(vt2.c1)) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((+ (v0.c0 COLLATE BINARY)));
SELECT * FROM v0 WHERE ((((+ (v0.c0 COLLATE BINARY)))AND(((((x'')<<(v0.c2)))>(((v0.c2) BETWEEN (v0.c3) AND (v0.c3))))))) ORDER BY CASE x'ce'  WHEN ((((((((v0.c2)AND(v0.c3)))OR(v0.c2)))OR(v0.c3)))AND(v0.c3)) THEN (+ (v0.c1)) END LIMIT 0X3;
SELECT ALL * FROM v0 WHERE ((+ (v0.c0 COLLATE BINARY)));
SELECT * FROM v0 WHERE ((((+ (v0.c0 COLLATE BINARY)))AND(((((x'')<<(v0.c2)))>(((v0.c2) BETWEEN (v0.c3) AND (v0.c3))))))) ORDER BY CASE x'ce'  WHEN ((((((((v0.c2)AND(v0.c3)))OR(v0.c2)))OR(v0.c3)))AND(v0.c3)) THEN (+ (v0.c1)) END LIMIT 0X3;
SELECT ALL MIN(v0.c0) FROM vt0, v0, vt2 WHERE (((((((v0.c2 COLLATE BINARY)AND(TRIM(v0.c2))))AND((((v0.c3)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))))))AND(((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2))))) ORDER BY (+ (((((vt2.c0)OR(v0.c3)))OR(v0.c1))))  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM vt0, v0, vt2 WHERE (((((((((v0.c2 COLLATE BINARY)AND(TRIM(v0.c2))))AND((((v0.c3)) NOT BETWEEN ((v0.c0)) AND ((v0.c2))))))AND(((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))))AND((((v0.c0) NOT NULL) IN ())))) ORDER BY (+ (((((vt2.c0)OR(v0.c3)))OR(v0.c1))))  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((vt0.c0) BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END) AND (((vt0.c0) BETWEEN (x'') AND (vt0.c0))))) ORDER BY vt0.c0  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((vt0.c0) BETWEEN (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END) AND (((vt0.c0) BETWEEN (x'') AND (vt0.c0)))))AND(((((vt0.c0) NOT NULL)) NOTNULL)))) ORDER BY vt0.c0  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CAST(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS REAL)) ORDER BY vt0.c0  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM vt0 LEFT OUTER JOIN v0 ON LOWER(CASE WHEN v0.c1 THEN v0.c0 WHEN x'' THEN vt2.c0 WHEN v0.c3 THEN vt0.c0 WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END) INNER JOIN vt2 ON ((CASE WHEN vt0.c0 THEN v0.c0 ELSE vt2.c1 END) ISNULL) WHERE (json(((((((((((vt2.c0)OR(vt2.c0)))AND(vt2.c1)))AND(v0.c1)))OR(vt0.c0)))AND(v0.c1))));
SELECT DISTINCT COUNT(*) FROM vt0 INNER JOIN v0 ON LOWER(CASE WHEN v0.c1 THEN v0.c0 WHEN x'' THEN vt2.c0 WHEN v0.c3 THEN vt0.c0 WHEN v0.c1 THEN v0.c2 ELSE vt2.c1 END) INNER JOIN vt2 ON ((CASE WHEN vt0.c0 THEN v0.c0 ELSE vt2.c1 END) ISNULL) WHERE (json(((((((((((vt2.c0)OR(vt2.c0)))AND(vt2.c1)))AND(v0.c1)))OR(vt0.c0)))AND(v0.c1)))) ORDER BY ((CAST(v0.c3 AS REAL)) NOT NULL)  NULLS LAST, x'5b' DESC;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE ((((~ (v0.c1)))*(((((v0.c3)AND(v0.c1)))OR(vt0.c0)))));
SELECT ALL COUNT(*) FROM v0, vt0 WHERE ((((((~ (v0.c1)))*(((((v0.c3)AND(v0.c1)))OR(vt0.c0)))))AND((CAST(vt0.c0 AS INTEGER) IN (CAST(v0.c2 AS NUMERIC)))))) LIMIT 0x1 INTERSECT SELECT COUNT(*) FROM v0, vt0 WHERE (CASE ((v0.c0)+(vt0.c0))  WHEN ((vt0.c0) BETWEEN (v0.c3) AND (v0.c3)) THEN v0.c3 END) LIMIT 0x1;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(v0.c2 AS TEXT))AND('-1398626860')));
SELECT * FROM vt0, v0 WHERE (((CAST(v0.c2 AS TEXT))AND('-1398626860'))) ORDER BY (CAST(vt0.c0 AS INTEGER) IN (CAST(733089305 AS BLOB))) INTERSECT SELECT ALL * FROM vt0, v0 WHERE (CASE UNICODE(v0.c3)  WHEN ((v0.c2)GLOB(v0.c1)) THEN CAST(v0.c2 AS TEXT) WHEN ((v0.c1)IS NOT(vt0.c0)) THEN (('鰂')-(v0.c2)) WHEN ((vt0.c0) IS TRUE) THEN (+ ('')) WHEN v0.c0 COLLATE RTRIM THEN ((vt0.c0) BETWEEN ('z6]a&Y1-v') AND (vt0.c0)) END) ORDER BY (CAST(vt0.c0 AS INTEGER) IN (CAST(733089305 AS BLOB)));
SELECT ALL * FROM vt0, v0 WHERE (((CAST(v0.c2 AS TEXT))AND('-1398626860')));
SELECT * FROM vt0, v0 WHERE (((CAST(v0.c2 AS TEXT))AND('-1398626860'))) ORDER BY (CAST(vt0.c0 AS INTEGER) IN (CAST(733089305 AS BLOB))) INTERSECT SELECT ALL * FROM vt0, v0 WHERE (CASE UNICODE(v0.c3)  WHEN ((v0.c2)GLOB(v0.c1)) THEN CAST(v0.c2 AS TEXT) WHEN ((v0.c1)IS NOT(vt0.c0)) THEN (('鰂')-(v0.c2)) WHEN ((vt0.c0) IS TRUE) THEN (+ ('')) WHEN v0.c0 COLLATE RTRIM THEN ((vt0.c0) BETWEEN ('z6]a&Y1-v') AND (vt0.c0)) END) ORDER BY (CAST(vt0.c0 AS INTEGER) IN (CAST(733089305 AS BLOB)));
SELECT ALL * FROM v0, vt0, vt2 WHERE (x'');
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((x'')AND(vt0.c0))) INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (v0.c0);
SELECT ALL * FROM v0, vt0, vt2 WHERE (x'');
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((x'')AND(vt0.c0))) INTERSECT SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (v0.c0);
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (((((((((((vt0.c0) NOTNULL))AND(vt0.c0)))AND(((vt2.c0)LIKE(0Xffffffffe442101c)))))OR(((((((vt0.c0)OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)))))AND(CAST(vt0.c0 AS INTEGER)))) ORDER BY (((vt0.c0 IN (vt0.c0, vt0.c0))) NOT BETWEEN (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) AND (CAST(vt0.c0 AS NUMERIC))) DESC, vt0.c0 COLLATE BINARY ASC;
SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 WHERE (((((((((((((vt0.c0) NOTNULL))AND(vt0.c0)))AND(((vt2.c0)LIKE(-465432548)))))OR(((((((vt0.c0)OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)))))AND(CAST(vt0.c0 AS INTEGER))))AND(((((((vt0.c0)AND(vt0.c0 COLLATE NOCASE)))AND((0.15550589810867765 IN (vt0.c0, vt0.c0)))))AND(((vt2.c1) BETWEEN (x'') AND (vt2.c1))))))) ORDER BY (((vt0.c0 IN (vt0.c0, vt0.c0))) NOT BETWEEN (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) AND (CAST(vt0.c0 AS NUMERIC))) DESC, vt0.c0 COLLATE BINARY ASC LIMIT 2 INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 WHERE (STRFTIME(0xffffffffde30ed93, CAST(vt2.c0 AS INTEGER), ((vt2.c1) NOTNULL), CAST('+KL}b' AS TEXT))) ORDER BY (((vt0.c0 IN (vt0.c0, vt0.c0))) NOT BETWEEN (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))) AND (CAST(vt0.c0 AS NUMERIC))) DESC, vt0.c0 COLLATE BINARY ASC LIMIT 0X2;
SELECT * FROM vt2, vt0 WHERE (((((CASE vt2.c0  WHEN vt0.c0 THEN NULL END)OR((NOT (vt0.c0)))))AND(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY JULIANDAY(((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(x'')), vt0.c0, ((vt2.c0)OR(vt0.c0))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((((CASE vt2.c0  WHEN vt0.c0 THEN NULL END)OR((NOT (vt0.c0)))))AND(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))))AND(((((((CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 END)OR(((((((vt2.c0)AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))))OR(((NULL)/(vt0.c0)))))AND((NOT (vt0.c0))))))) ORDER BY JULIANDAY(((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(x'')), vt0.c0, ((vt2.c0)OR(vt0.c0))) ASC  NULLS LAST LIMIT 0X0;
SELECT * FROM vt2, vt0 WHERE (((((CASE vt2.c0  WHEN vt0.c0 THEN NULL END)OR((NOT (vt0.c0)))))AND(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0))))) ORDER BY JULIANDAY(((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(x'')), vt0.c0, ((vt2.c0)OR(vt0.c0))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, vt0 WHERE (((((((CASE vt2.c0  WHEN vt0.c0 THEN NULL END)OR((NOT (vt0.c0)))))AND(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))))AND(((((((CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 END)OR(((((((vt2.c0)AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))))OR(((NULL)/(vt0.c0)))))AND((NOT (vt0.c0))))))) ORDER BY JULIANDAY(((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(x'')), vt0.c0, ((vt2.c0)OR(vt0.c0))) ASC  NULLS LAST LIMIT 0X0;
SELECT COUNT(*) FROM vt2 WHERE ((((vt2.c1, vt2.c1)) NOT BETWEEN ((CAST(vt2.c0 AS NUMERIC), LIKE(vt2.c0, vt2.c1, '5'))) AND ((((vt2.c0)*(vt2.c0)), CAST(vt2.c0 AS TEXT))))) ORDER BY json_patch(vt2.c0, ((vt2.c1)||(vt2.c1))) DESC, x'59'  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2 WHERE ((((vt2.c1, vt2.c1)) NOT BETWEEN ((CAST(vt2.c0 AS NUMERIC), LIKE(vt2.c0, vt2.c1, '5'))) AND ((((vt2.c0)*(vt2.c0)), CAST(vt2.c0 AS TEXT))))) ORDER BY json_patch(vt2.c0, ((vt2.c1)||(vt2.c1))) DESC, x'59'  NULLS LAST INTERSECT SELECT COUNT(*) FROM vt2 WHERE (((((vt2.c1)IS(vt2.c0))) IS TRUE)) ORDER BY json_patch(vt2.c0, ((vt2.c1)||(vt2.c1))) DESC, x'59'  NULLS LAST;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0)GLOB(vt0.c0)))&((((vt0.c0))>=((vt0.c0)))))) ORDER BY CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE RTRIM, ((vt0.c0)%('n+*')) COLLATE BINARY DESC  NULLS LAST, vt0.c0;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((vt0.c0)GLOB(vt0.c0)))&((((vt0.c0))>=((vt0.c0))))))AND(0.05772068560275634))) ORDER BY CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE RTRIM, ((vt0.c0)%('n+*')) COLLATE BINARY DESC  NULLS LAST, vt0.c0 LIMIT 0X1 INTERSECT SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0) IS FALSE)) NOT BETWEEN (((vt0.c0)>>(vt0.c0))) AND (((((((((vt0.c0)AND(NULL)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0))))) ORDER BY CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN x'' WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE RTRIM, ((vt0.c0)%('n+*')) COLLATE BINARY DESC  NULLS LAST, vt0.c0 LIMIT 1;
SELECT * FROM v0, vt0, vt2 WHERE (('-1561718402' IN (v0.c3, '-1607669206')) COLLATE BINARY);
SELECT * FROM v0, vt0, vt2 WHERE (('-1561718402' IN (v0.c3, '-1607669206')) COLLATE BINARY) ORDER BY 'q*uk륳' COLLATE NOCASE DESC INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (((vt2.c1)>=(v0.c0)) COLLATE RTRIM COLLATE RTRIM) ORDER BY 'q*uk륳' COLLATE NOCASE DESC;
SELECT * FROM v0, vt0, vt2 WHERE (('-1561718402' IN (v0.c3, '-1607669206')) COLLATE BINARY);
SELECT * FROM v0, vt0, vt2 WHERE (('-1561718402' IN (v0.c3, '-1607669206')) COLLATE BINARY) ORDER BY 'q*uk륳' COLLATE NOCASE DESC INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (((vt2.c1)>=(v0.c0)) COLLATE RTRIM COLLATE RTRIM) ORDER BY 'q*uk륳' COLLATE NOCASE DESC;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((vt0.c0, vt0.c0)) BETWEEN ((((vt0.c0) BETWEEN (vt0.c0) AND ('sle鯥G')), ((vt0.c0)<<(vt0.c0)))) AND ((PRINTF(vt0.c0, vt0.c0, vt0.c0), TRIM(DISTINCT vt0.c0, vt0.c0))))) ORDER BY (((vt0.c0)) NOT BETWEEN ((vt0.c0 COLLATE BINARY)) AND (((vt0.c0 IN (vt0.c0))))) DESC;
SELECT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c0, vt0.c0)) BETWEEN ((((vt0.c0) BETWEEN (vt0.c0) AND ('sle鯥G')), ((vt0.c0)<<(vt0.c0)))) AND ((PRINTF(vt0.c0, vt0.c0, vt0.c0), TRIM(DISTINCT vt0.c0, vt0.c0)))))AND(((((((((CAST(vt0.c0 AS BLOB))OR((vt0.c0 IN (NULL)))))OR((vt0.c0 IN (vt0.c0)))))OR((vt0.c0 IN (vt0.c0)))))OR(vt0.c0 COLLATE NOCASE))))) ORDER BY CASE WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) THEN CASE WHEN vt0.c0 THEN vt0.c0 END WHEN vt0.c0 COLLATE NOCASE THEN ((vt0.c0)&(vt0.c0)) ELSE ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) END  NULLS FIRST, CASE WHEN CAST(vt0.c0 AS NUMERIC) THEN CAST('^	8)9hE' AS REAL) END DESC  NULLS FIRST;
SELECT * FROM v0 CROSS JOIN vt2 ON ((CAST(x'' AS TEXT)) ISNULL) WHERE (((SQLITE_VERSION()) IS TRUE)) ORDER BY vt2.c1 DESC  NULLS FIRST, (~ (vt2.c0 COLLATE RTRIM))  NULLS FIRST;
SELECT * FROM v0 CROSS JOIN vt2 ON ((CAST(x'' AS TEXT)) ISNULL) WHERE (((SQLITE_VERSION()) IS TRUE)) ORDER BY ((((((((((vt2.c1) NOT BETWEEN (vt2.c0) AND (v0.c0)))AND(((x'721b')||(v0.c1)))))AND(v0.c2)))OR(((v0.c3) ISNULL))))AND('382198455')) DESC, (((NOT (vt2.c1))) BETWEEN ((((v0.c0)) BETWEEN (('?')) AND ((v0.c3)))) AND ((((v0.c3))<=((x''))))) ASC LIMIT 0;
SELECT * FROM v0 CROSS JOIN vt2 ON ((CAST(x'' AS TEXT)) ISNULL) WHERE (((SQLITE_VERSION()) IS TRUE)) ORDER BY vt2.c1 DESC  NULLS FIRST, (~ (vt2.c0 COLLATE RTRIM))  NULLS FIRST;
SELECT * FROM v0 CROSS JOIN vt2 ON ((CAST(x'' AS TEXT)) ISNULL) WHERE (((SQLITE_VERSION()) IS TRUE)) ORDER BY ((((((((((vt2.c1) NOT BETWEEN (vt2.c0) AND (v0.c0)))AND(((x'721b')||(v0.c1)))))AND(v0.c2)))OR(((v0.c3) ISNULL))))AND('382198455')) DESC, (((NOT (vt2.c1))) BETWEEN ((((v0.c0)) BETWEEN (('?')) AND ((v0.c3)))) AND ((((v0.c3))<=((x''))))) ASC LIMIT 0;
SELECT ALL MIN(v0.c3) FROM vt2, v0, vt0 WHERE (((((((v0.c0)LIKE(vt2.c0)))OR(((vt0.c0) NOTNULL))))AND(CAST(v0.c3 AS BLOB))));
SELECT ALL MIN(v0.c3) FROM vt2, v0, vt0 WHERE (((((((((v0.c0)LIKE(vt2.c0)))OR(((vt0.c0) NOTNULL))))AND(CAST(v0.c3 AS BLOB))))AND((~ (((vt2.c1) NOTNULL)))))) ORDER BY (((vt2.c0, v0.c2, vt2.c0)) BETWEEN (((v0.c0 IN (v0.c0, vt2.c1)), ((v0.c3)<=(vt0.c0)), '573753185')) AND ((vt2.c0, (v0.c2 IN (vt2.c1)), CAST(v0.c3 AS NUMERIC)))) ASC  NULLS FIRST, CASE ((v0.c2) NOT NULL)  WHEN (((vt0.c0)) NOT BETWEEN ((v0.c3)) AND ((vt2.c0))) THEN ((((((v0.c0)AND(vt2.c1)))AND(vt2.c1)))AND(v0.c3)) ELSE v0.c0 END ASC INTERSECT SELECT MIN(v0.c3) FROM vt2, v0, vt0 WHERE ('n&鈂') ORDER BY (((vt2.c0, v0.c2, vt2.c0)) BETWEEN (((v0.c0 IN (v0.c0, vt2.c1)), ((v0.c3)<=(vt0.c0)), '573753185')) AND ((vt2.c0, (v0.c2 IN (vt2.c1)), CAST(v0.c3 AS NUMERIC)))) ASC  NULLS FIRST, CASE ((v0.c2) NOT NULL)  WHEN (((vt0.c0)) NOT BETWEEN ((v0.c3)) AND ((vt2.c0))) THEN ((((((v0.c0)AND(vt2.c1)))AND(vt2.c1)))AND(v0.c3)) ELSE v0.c0 END ASC;
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON vt2.c0 WHERE (CAST(((vt2.c0)>(vt2.c0)) AS REAL));
SELECT ALL * FROM vt2 INNER JOIN v0 ON vt2.c0 WHERE (CAST(((vt2.c0)>(vt2.c0)) AS REAL));
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON vt2.c0 WHERE (CAST(((vt2.c0)>(vt2.c0)) AS REAL));
SELECT ALL * FROM vt2 INNER JOIN v0 ON vt2.c0 WHERE (CAST(((vt2.c0)>(vt2.c0)) AS REAL));
SELECT ALL MAX(v0.c0) FROM vt2, vt0, v0 WHERE (vt0.c0);
SELECT DISTINCT MAX(v0.c0) FROM vt2, vt0, v0 WHERE (((vt0.c0)AND('92183698'))) LIMIT 4 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt2, vt0, v0 WHERE ((vt2.c0 IN ((v0.c1 IN ())))) LIMIT 4;
SELECT * FROM vt0, vt2 WHERE (TYPEOF(vt2.c0)) ORDER BY CASE WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)||(vt0.c0)) WHEN (+ (vt2.c0)) THEN (((vt2.c1, vt2.c1))>((vt0.c0, vt2.c1))) WHEN ((vt2.c1)>>(vt2.c1)) THEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)) ELSE vt2.c1 COLLATE NOCASE END DESC, ((((vt0.c0)%(vt2.c1))) ISNULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0, vt2 WHERE (((TYPEOF(vt2.c0))AND(NULL))) ORDER BY CASE WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)||(vt0.c0)) WHEN (+ (vt2.c0)) THEN (((vt2.c1, vt2.c1))>((vt0.c0, vt2.c1))) WHEN ((vt2.c1)>>(vt2.c1)) THEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)) ELSE vt2.c1 COLLATE NOCASE END DESC, ((((vt0.c0)%(vt2.c1))) ISNULL) ASC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE (TYPEOF(vt2.c0)) ORDER BY CASE WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)||(vt0.c0)) WHEN (+ (vt2.c0)) THEN (((vt2.c1, vt2.c1))>((vt0.c0, vt2.c1))) WHEN ((vt2.c1)>>(vt2.c1)) THEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)) ELSE vt2.c1 COLLATE NOCASE END DESC, ((((vt0.c0)%(vt2.c1))) ISNULL) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0, vt2 WHERE (((TYPEOF(vt2.c0))AND(NULL))) ORDER BY CASE WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)||(vt0.c0)) WHEN (+ (vt2.c0)) THEN (((vt2.c1, vt2.c1))>((vt0.c0, vt2.c1))) WHEN ((vt2.c1)>>(vt2.c1)) THEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c0)) ELSE vt2.c1 COLLATE NOCASE END DESC, ((((vt0.c0)%(vt2.c1))) ISNULL) ASC  NULLS LAST;
SELECT MIN(vt2.c1) FROM vt0, vt2, v0 WHERE ((((((((v0.c3))<=((vt2.c0))))OR((vt2.c1 IN (v0.c1)))))OR(NULLIF(vt2.c0, v0.c2))));
SELECT MIN(vt2.c1) FROM vt0, vt2, v0 WHERE ((((((((((v0.c3))==((vt2.c0))))OR((vt2.c1 IN (v0.c1)))))OR(NULLIF(vt2.c0, v0.c2))))AND(((vt0.c0) NOT NULL)))) INTERSECT SELECT ALL MIN(vt2.c1) FROM vt0, vt2, v0 WHERE (((((((((((((0xffffffffd6dc0f7f)>>(vt2.c1)))OR(CAST(0.2510149384041971 AS BLOB))))AND(((v0.c0)<=(v0.c0)))))OR(((v0.c0) ISNULL))))AND(v0.c2)))AND(((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c2)))));
SELECT MIN(v0.c2) FROM v0, vt0, vt2 WHERE (HEX(DISTINCT (+ (v0.c3))));
SELECT DISTINCT MIN(v0.c2) FROM v0, vt0, vt2 WHERE (((HEX(DISTINCT (+ (v0.c3))))AND(TRIM(((((v0.c2)AND(v0.c3)))OR(vt2.c0)))))) LIMIT 0;
SELECT MAX(vt2.c1) FROM vt2 WHERE (json_quote(vt2.c1) COLLATE BINARY) ORDER BY (((~ (vt2.c1)))AND(CAST(vt2.c0 AS INTEGER)));
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (json_quote(vt2.c1) COLLATE BINARY) ORDER BY ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) COLLATE NOCASE  NULLS LAST INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END) NOT BETWEEN (((vt2.c1) ISNULL)) AND (CAST(vt2.c1 AS BLOB)))) ORDER BY ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) COLLATE NOCASE  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE (LIKELIHOOD(DISTINCT ((v0.c0) NOT NULL), (((v0.c2, v0.c3, v0.c1)) BETWEEN ((v0.c3, v0.c3, v0.c3)) AND ((v0.c0, v0.c0, vt0.c0))))) ORDER BY ((x'') NOT BETWEEN (((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0))) AND (((v0.c2)>=(v0.c1))))  NULLS LAST, ((((v0.c1 IN (v0.c3))))<(((~ (v0.c1)))))  NULLS LAST, (- (((v0.c0)IS(v0.c1))));
SELECT * FROM v0, vt0 WHERE (LIKELIHOOD(DISTINCT ((v0.c0) NOT NULL), (((v0.c2, v0.c3, v0.c1)) BETWEEN ((v0.c3, v0.c3, v0.c3)) AND ((v0.c0, v0.c0, vt0.c0))))) ORDER BY ((x'') NOT BETWEEN (((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0))) AND (((v0.c2)>=(v0.c1))))  NULLS LAST, ((((v0.c1 IN (v0.c3))))<(((~ (v0.c1)))))  NULLS LAST, (- (((v0.c0)IS(v0.c1))));
SELECT ALL * FROM v0, vt0 WHERE (LIKELIHOOD(DISTINCT ((v0.c0) NOT NULL), (((v0.c2, v0.c3, v0.c1)) BETWEEN ((v0.c3, v0.c3, v0.c3)) AND ((v0.c0, v0.c0, vt0.c0))))) ORDER BY ((x'') NOT BETWEEN (((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c0))) AND (((v0.c2)>=(v0.c1))))  NULLS LAST, ((((v0.c1 IN (v0.c3))))<(((~ (v0.c1)))))  NULLS LAST, (- (((v0.c0)IS(v0.c1))));
SELECT ALL * FROM vt0, v0, vt2 WHERE (NULL);
SELECT * FROM vt0, v0, vt2 WHERE (NULL) ORDER BY CASE WHEN (v0.c0 IN (v0.c3, v0.c1)) THEN ((vt2.c1)<<(v0.c0)) ELSE ((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)) END  NULLS FIRST, (+ (v0.c1)) DESC LIMIT 0x0 INTERSECT SELECT * FROM vt0, v0, vt2 WHERE (0.2531796275375987) ORDER BY CASE WHEN (v0.c0 IN (v0.c3, v0.c1)) THEN ((vt2.c1)<<(v0.c0)) ELSE ((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)) END  NULLS FIRST, (+ (v0.c1)) DESC LIMIT 0X0;
SELECT ALL * FROM vt0, v0, vt2 WHERE (NULL);
SELECT * FROM vt0, v0, vt2 WHERE (NULL) ORDER BY CASE WHEN (v0.c0 IN (v0.c3, v0.c1)) THEN ((vt2.c1)<<(v0.c0)) ELSE ((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)) END  NULLS FIRST, (+ (v0.c1)) DESC LIMIT 0x0 INTERSECT SELECT * FROM vt0, v0, vt2 WHERE (0.2531796275375987) ORDER BY CASE WHEN (v0.c0 IN (v0.c3, v0.c1)) THEN ((vt2.c1)<<(v0.c0)) ELSE ((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)) END  NULLS FIRST, (+ (v0.c1)) DESC LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE (LOWER(((vt2.c0) IS TRUE))) ORDER BY vt2.c0  NULLS LAST, ((+ (vt2.c1)) IN (LIKE(vt2.c1, vt2.c1, 'L'))) DESC, 0Xffffffffe15f9d46 DESC;
SELECT * FROM vt2 WHERE (((LOWER(((vt2.c0) IS TRUE)))AND(((((vt2.c0) NOT NULL)) BETWEEN ((((vt2.c1, NULL, vt2.c0, 7.08305761E8)) BETWEEN ((vt2.c1, vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c0, vt2.c1, x'aa')))) AND (CAST(vt2.c1 AS INTEGER)))))) ORDER BY vt2.c0  NULLS LAST, ((+ (vt2.c1)) IN (LIKE(vt2.c1, vt2.c1, 'L'))) DESC, -513827514 DESC LIMIT 0X2 INTERSECT SELECT ALL * FROM vt2 WHERE ((((NULL, vt2.c0))==((vt2.c1, vt2.c1))) COLLATE BINARY) ORDER BY vt2.c0  NULLS LAST, ((+ (vt2.c1)) IN (LIKE(vt2.c1, vt2.c1, 'L'))) DESC, 0xffffffffe15f9d46 DESC LIMIT 0x2;
SELECT ALL * FROM vt2 WHERE (LOWER(((vt2.c0) IS TRUE))) ORDER BY vt2.c0  NULLS LAST, ((+ (vt2.c1)) IN (LIKE(vt2.c1, vt2.c1, 'L'))) DESC, 0Xffffffffe15f9d46 DESC;
SELECT * FROM vt2 WHERE (((LOWER(((vt2.c0) IS TRUE)))AND(((((vt2.c0) NOT NULL)) BETWEEN ((((vt2.c1, NULL, vt2.c0, 7.08305761E8)) BETWEEN ((vt2.c1, vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c0, vt2.c0, vt2.c1, x'aa')))) AND (CAST(vt2.c1 AS INTEGER)))))) ORDER BY vt2.c0  NULLS LAST, ((+ (vt2.c1)) IN (LIKE(vt2.c1, vt2.c1, 'L'))) DESC, -513827514 DESC LIMIT 0X2 INTERSECT SELECT ALL * FROM vt2 WHERE ((((NULL, vt2.c0))==((vt2.c1, vt2.c1))) COLLATE BINARY) ORDER BY vt2.c0  NULLS LAST, ((+ (vt2.c1)) IN (LIKE(vt2.c1, vt2.c1, 'L'))) DESC, 0xffffffffe15f9d46 DESC LIMIT 0x2;
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON ((((((((v0.c3)OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0))) NOT NULL) WHERE (v0.c3) ORDER BY (- ((v0.c0 IN ()))), ((((((((((v0.c0) ISNULL))OR(((x'')&(v0.c3)))))AND('gH')))OR((- (v0.c3)))))OR(CASE WHEN v0.c1 THEN v0.c3 ELSE v0.c3 END)) DESC  NULLS FIRST;
SELECT ALL * FROM vt2 LEFT OUTER JOIN v0 ON ((((((((v0.c3)OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0))) NOT NULL) WHERE (((v0.c3)AND((((((v0.c0) NOT BETWEEN (vt2.c1) AND (v0.c0)), ((v0.c2) IS TRUE)))<=((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)), (('-727545619')IS NOT(v0.c2)))))))) ORDER BY (- ((v0.c0 IN ()))), ((((((((((v0.c0) ISNULL))OR(((x'')&(v0.c3)))))AND('gH')))OR((- (v0.c3)))))OR(CASE WHEN v0.c1 THEN v0.c3 ELSE v0.c3 END)) DESC  NULLS FIRST;
SELECT * FROM vt2 LEFT OUTER JOIN v0 ON ((((((((v0.c3)OR(vt2.c0)))AND(vt2.c1)))AND(v0.c0))) NOT NULL) WHERE (v0.c3) ORDER BY (- ((v0.c0 IN ()))), ((((((((((v0.c0) ISNULL))OR(((x'')&(v0.c3)))))AND('gH')))OR((- (v0.c3)))))OR(CASE WHEN v0.c1 THEN v0.c3 ELSE v0.c3 END)) DESC  NULLS FIRST;
SELECT * FROM vt0 NOT INDEXED, vt2, v0 WHERE ((- ((((v0.c1, vt2.c0)) BETWEEN ((vt0.c0, v0.c3)) AND ((vt0.c0, vt2.c1))))));
SELECT * FROM vt0, vt2, v0 WHERE ((- ((((v0.c1, vt2.c0)) BETWEEN ((vt0.c0, v0.c3)) AND ((vt0.c0, vt2.c1)))))) ORDER BY ((((vt0.c0)<('')))+(vt2.c1 COLLATE RTRIM)) ASC;
SELECT * FROM vt0 NOT INDEXED, vt2, v0 WHERE ((- ((((v0.c1, vt2.c0)) BETWEEN ((vt0.c0, v0.c3)) AND ((vt0.c0, vt2.c1))))));
SELECT * FROM vt0, vt2, v0 WHERE ((- ((((v0.c1, vt2.c0)) BETWEEN ((vt0.c0, v0.c3)) AND ((vt0.c0, vt2.c1)))))) ORDER BY ((((vt0.c0)<('')))+(vt2.c1 COLLATE RTRIM)) ASC;
SELECT MAX(vt0.c0) FROM vt0, vt2 WHERE (((vt0.c0)AND(vt2.c0)) COLLATE NOCASE);
SELECT ALL MAX(vt0.c0) FROM vt0, vt2 WHERE (((((vt0.c0)AND(vt2.c0)) COLLATE NOCASE)AND(((((vt2.c1)AND((((vt0.c0, vt2.c0, vt2.c1, vt2.c1, '-610673233')) BETWEEN ((vt0.c0, vt2.c1, vt2.c0, vt2.c1, vt2.c1)) AND ((vt0.c0, vt2.c0, vt2.c0, vt0.c0, vt0.c0))))))OR(json_remove(vt2.c1, vt2.c0, vt2.c0, vt2.c0)))))) ORDER BY ((vt2.c0 COLLATE BINARY) ISNULL)  NULLS FIRST LIMIT 0x0;
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((~ (((v0.c3) NOTNULL)))) ORDER BY ((v0.c1 COLLATE BINARY)GLOB('-1522911904'))  NULLS LAST, ((((((v0.c0)AND(v0.c1)))OR(v0.c2))) BETWEEN (v0.c0 COLLATE RTRIM) AND (CAST(v0.c3 AS REAL))) DESC  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((~ (((v0.c3) NOTNULL)))) ORDER BY ((v0.c1 COLLATE BINARY)GLOB('-1522911904'))  NULLS LAST, ((((((v0.c0)AND(v0.c1)))OR(v0.c2))) BETWEEN (v0.c0 COLLATE RTRIM) AND (CAST(v0.c3 AS REAL))) DESC  NULLS LAST INTERSECT SELECT ALL MIN(v0.c1) FROM v0 WHERE (((((NULL)|(v0.c2)))AND(((((((((v0.c3)AND(v0.c2)))OR(v0.c3)))OR(v0.c3)))OR(v0.c1))))) ORDER BY ((v0.c1 COLLATE BINARY)GLOB('-1522911904'))  NULLS LAST, ((((((v0.c0)AND(v0.c1)))OR(v0.c2))) BETWEEN (v0.c0 COLLATE RTRIM) AND (CAST(v0.c3 AS REAL))) DESC  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE (((0x2da2994d) NOT BETWEEN (COALESCE(vt2.c0, vt2.c1, vt0.c0)) AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0))))) ORDER BY 0.3238717029238507 COLLATE RTRIM COLLATE RTRIM DESC, CAST(((vt2.c1)>(vt2.c0)) AS INTEGER);
SELECT * FROM vt0, vt2 WHERE (((0x2da2994d) NOT BETWEEN (COALESCE(vt2.c0, vt2.c1, vt0.c0)) AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0))))) ORDER BY 0.3238717029238507 COLLATE RTRIM COLLATE RTRIM DESC, CAST(((vt2.c1)>(vt2.c0)) AS INTEGER) INTERSECT SELECT * FROM vt0, vt2 WHERE (((((((((vt0.c0)AND(vt2.c0)))OR(vt2.c1)))OR('>M')))-(('+(F볉b' IN (vt2.c1))))) ORDER BY 0.3238717029238507 COLLATE RTRIM COLLATE RTRIM DESC, CAST(((vt2.c1)>(vt2.c0)) AS INTEGER);
SELECT ALL * FROM vt0, vt2 WHERE (((0x2da2994d) NOT BETWEEN (COALESCE(vt2.c0, vt2.c1, vt0.c0)) AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0))))) ORDER BY 0.3238717029238507 COLLATE RTRIM COLLATE RTRIM DESC, CAST(((vt2.c1)>(vt2.c0)) AS INTEGER);
SELECT * FROM vt0, vt2 WHERE (((0x2da2994d) NOT BETWEEN (COALESCE(vt2.c0, vt2.c1, vt0.c0)) AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0))))) ORDER BY 0.3238717029238507 COLLATE RTRIM COLLATE RTRIM DESC, CAST(((vt2.c1)>(vt2.c0)) AS INTEGER) INTERSECT SELECT * FROM vt0, vt2 WHERE (((((((((vt0.c0)AND(vt2.c0)))OR(vt2.c1)))OR('>M')))-(('+(F볉b' IN (vt2.c1))))) ORDER BY 0.3238717029238507 COLLATE RTRIM COLLATE RTRIM DESC, CAST(((vt2.c1)>(vt2.c0)) AS INTEGER);
SELECT * FROM vt0, vt2, v0 WHERE ((+ (vt2.c0 COLLATE RTRIM))) ORDER BY (~ (((((x'1081')AND(v0.c2)))AND(v0.c0))))  NULLS LAST, x'17';
SELECT ALL * FROM vt0, vt2, v0 WHERE ((+ (vt2.c0 COLLATE RTRIM))) ORDER BY (~ (((((x'1081')AND(v0.c2)))AND(v0.c0))))  NULLS LAST, x'17' LIMIT 0X0;
SELECT * FROM vt0, vt2, v0 WHERE ((+ (vt2.c0 COLLATE RTRIM))) ORDER BY (~ (((((x'1081')AND(v0.c2)))AND(v0.c0))))  NULLS LAST, x'17';
SELECT ALL * FROM vt0, vt2, v0 WHERE ((+ (vt2.c0 COLLATE RTRIM))) ORDER BY (~ (((((x'1081')AND(v0.c2)))AND(v0.c0))))  NULLS LAST, x'17' LIMIT 0X0;
SELECT * FROM vt0 NOT INDEXED, v0 WHERE ((((vt0.c0 IN ())) NOT NULL));
SELECT DISTINCT * FROM vt0, v0 WHERE ((((vt0.c0 IN ())) NOT NULL)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE ((((- ('%?66]Z'))) ISNULL)) LIMIT 0X2;
SELECT * FROM vt0 NOT INDEXED, v0 WHERE ((((vt0.c0 IN ())) NOT NULL));
SELECT DISTINCT * FROM vt0, v0 WHERE ((((vt0.c0 IN ())) NOT NULL)) LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE ((((- ('%?66]Z'))) ISNULL)) LIMIT 0X2;
SELECT ALL MAX(v0.c3) FROM v0, vt2 WHERE (CASE WHEN CASE vt2.c1  WHEN v0.c1 THEN v0.c2 END THEN ((NULL) IS FALSE) WHEN ((v0.c3)>=(vt2.c1)) THEN ((v0.c2) BETWEEN (v0.c1) AND (x'f579')) WHEN ((vt2.c0) BETWEEN (v0.c2) AND (vt2.c0)) THEN CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN NULL WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 END ELSE (v0.c2 IN (vt2.c1, vt2.c0)) END);
SELECT DISTINCT MAX(v0.c3) FROM v0, vt2 WHERE (CASE WHEN CASE vt2.c1  WHEN v0.c1 THEN v0.c2 END THEN ((NULL) IS FALSE) WHEN ((v0.c3)>(vt2.c1)) THEN ((v0.c2) BETWEEN (v0.c1) AND (x'f579')) WHEN ((vt2.c0) BETWEEN (v0.c2) AND (vt2.c0)) THEN CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN NULL WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN vt2.c1 END ELSE (v0.c2 IN (vt2.c1, vt2.c0)) END) LIMIT 2 INTERSECT SELECT DISTINCT MAX(v0.c3) FROM v0, vt2 WHERE (0.24649082510169895) LIMIT 0x2;
SELECT * FROM vt2, vt0 WHERE (0.781334977324033) ORDER BY (CAST(vt2.c1 AS INTEGER) IN ((vt2.c0 IN (vt0.c0, vt2.c1)), ((((((((vt2.c0)OR(vt2.c0)))OR(vt0.c0)))AND('384893809')))AND(vt2.c1)))), ((vt2.c1)||(vt0.c0)) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (0.781334977324033) ORDER BY (((+ (vt2.c1)))<=(vt2.c0));
SELECT * FROM vt2, vt0 WHERE (0.781334977324033) ORDER BY (CAST(vt2.c1 AS INTEGER) IN ((vt2.c0 IN (vt0.c0, vt2.c1)), ((((((((vt2.c0)OR(vt2.c0)))OR(vt0.c0)))AND('384893809')))AND(vt2.c1)))), ((vt2.c1)||(vt0.c0)) COLLATE BINARY  NULLS LAST;
SELECT * FROM vt2, vt0 WHERE (0.781334977324033) ORDER BY (((+ (vt2.c1)))<=(vt2.c0));
SELECT MIN(vt0.c0) FROM vt2 NATURAL JOIN vt0 LEFT OUTER JOIN v0 ON CAST(load_extension(NULL) AS INTEGER) WHERE ((((vt2.c1)>>(v0.c0)) IN (((v0.c1) BETWEEN (v0.c1) AND (v0.c3)), vt0.c0)));
SELECT DISTINCT MIN(vt0.c0) FROM vt2 NATURAL JOIN vt0 LEFT OUTER JOIN v0 ON CAST(load_extension(NULL) AS INTEGER) WHERE ((((vt2.c1)>>(v0.c0)) IN (((v0.c1) BETWEEN (v0.c1) AND (v0.c3))))) LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt2 NATURAL JOIN vt0 LEFT OUTER JOIN v0 ON CAST(load_extension(NULL) AS INTEGER) WHERE (((((v0.c0)>(NULL))) ISNULL)) LIMIT 0;
SELECT * FROM v0, vt2, vt0 WHERE ((((((v0.c0)) BETWEEN ((vt0.c0)) AND ((v0.c0))))*(((v0.c2) ISNULL))));
SELECT * FROM v0, vt2, vt0 WHERE ((((((v0.c0)) BETWEEN ((vt0.c0)) AND ((v0.c0))))*(((v0.c2) ISNULL)))) LIMIT 0X1 INTERSECT SELECT ALL * FROM v0, vt2, vt0 WHERE (((((((((vt0.c0)AND(v0.c1)))OR(v0.c2)))AND(v0.c3))) ISNULL)) LIMIT 0x1;
SELECT * FROM v0, vt2, vt0 WHERE ((((((v0.c0)) BETWEEN ((vt0.c0)) AND ((v0.c0))))*(((v0.c2) ISNULL))));
SELECT * FROM v0, vt2, vt0 WHERE ((((((v0.c0)) BETWEEN ((vt0.c0)) AND ((v0.c0))))*(((v0.c2) ISNULL)))) LIMIT 0X1 INTERSECT SELECT ALL * FROM v0, vt2, vt0 WHERE (((((((((vt0.c0)AND(v0.c1)))OR(v0.c2)))AND(v0.c3))) ISNULL)) LIMIT 0x1;
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE ((((vt0.c0, vt2.c0)) BETWEEN (((v0.c1 IN (-1771223710, vt2.c1, v0.c1)), (~ (vt2.c0)))) AND ((((v0.c1) IS FALSE), ((v0.c3)AND(v0.c2))))));
SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE ((((vt0.c0, vt2.c0)) BETWEEN (((v0.c1 IN (0xffffffff966d4562, vt2.c1, v0.c1)), (~ (vt2.c0)))) AND ((((v0.c1) IS FALSE), ((v0.c3)AND(v0.c2)))))) LIMIT 0X1;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (vt2.c1);
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (vt2.c1) INTERSECT SELECT MIN(vt2.c0) FROM vt2 WHERE (CASE WHEN '' THEN (- (vt2.c1)) WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (0x61b9d78f)) THEN vt2.c0 COLLATE NOCASE END);
SELECT MIN(vt0.c0) FROM vt0, vt2 LEFT OUTER JOIN v0 ON ((CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 END)AND(v0.c1)) WHERE (v0.c3) ORDER BY v0.c0;
SELECT ALL MIN(vt0.c0) FROM vt0, vt2 INNER JOIN v0 ON ((CASE WHEN v0.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c0 END)AND(v0.c1)) WHERE (((v0.c3)AND(((((((((((vt2.c1)OR(NULL)))OR(v0.c3)))OR(v0.c0)))AND(v0.c1))) NOT NULL)))) ORDER BY v0.c0;
SELECT MIN(vt2.c1) FROM vt2 WHERE (0.5337678024596136);
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE (((0.5337678024596136)AND(LIKELIHOOD((vt2.c0 IN ()), '-476577119'))));
SELECT * FROM vt0, v0 WHERE (((((((((((((((v0.c2)*(v0.c0)))AND(((v0.c2)!=(v0.c0)))))OR(((v0.c2)-(v0.c2)))))AND(v0.c3)))AND(v0.c2 COLLATE BINARY)))AND((v0.c0 IN (v0.c1)))))OR((((vt0.c0, v0.c1, v0.c3)) BETWEEN ((v0.c3, v0.c0, v0.c0)) AND ((v0.c3, vt0.c0, v0.c0)))))) ORDER BY (((v0.c2))>=(((v0.c0 IN (v0.c1))))) ASC, (((v0.c0, v0.c2, vt0.c0)) BETWEEN ((v0.c2 COLLATE BINARY, ((v0.c0)%(v0.c2)), NULL)) AND ((CAST(v0.c1 AS REAL), ((v0.c3)|(0.9118897082569811)), (v0.c0 IN (v0.c0))))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0, v0 WHERE (((((((((((((((v0.c2)*(v0.c0)))AND(((v0.c2)!=(v0.c0)))))OR(((v0.c2)-(v0.c2)))))AND(v0.c3)))AND(v0.c2 COLLATE BINARY)))AND((v0.c0 IN (v0.c1)))))OR((((vt0.c0, v0.c1, v0.c3)) BETWEEN ((v0.c3, v0.c0, v0.c0)) AND ((v0.c3, vt0.c0, v0.c0)))))) ORDER BY (((v0.c2))>=(((v0.c0 IN (v0.c1))))) ASC, (((v0.c0, v0.c2, vt0.c0)) BETWEEN ((v0.c2 COLLATE BINARY, ((v0.c0)%(v0.c2)), NULL)) AND ((CAST(v0.c1 AS REAL), ((v0.c3)|(0.9118897082569811)), (v0.c0 IN (v0.c0))))) DESC  NULLS LAST;
SELECT * FROM vt0, v0 WHERE (((((((((((((((v0.c2)*(v0.c0)))AND(((v0.c2)!=(v0.c0)))))OR(((v0.c2)-(v0.c2)))))AND(v0.c3)))AND(v0.c2 COLLATE BINARY)))AND((v0.c0 IN (v0.c1)))))OR((((vt0.c0, v0.c1, v0.c3)) BETWEEN ((v0.c3, v0.c0, v0.c0)) AND ((v0.c3, vt0.c0, v0.c0)))))) ORDER BY (((v0.c2))>=(((v0.c0 IN (v0.c1))))) ASC, (((v0.c0, v0.c2, vt0.c0)) BETWEEN ((v0.c2 COLLATE BINARY, ((v0.c0)%(v0.c2)), NULL)) AND ((CAST(v0.c1 AS REAL), ((v0.c3)|(0.9118897082569811)), (v0.c0 IN (v0.c0))))) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0, v0 WHERE (((((((((((((((v0.c2)*(v0.c0)))AND(((v0.c2)!=(v0.c0)))))OR(((v0.c2)-(v0.c2)))))AND(v0.c3)))AND(v0.c2 COLLATE BINARY)))AND((v0.c0 IN (v0.c1)))))OR((((vt0.c0, v0.c1, v0.c3)) BETWEEN ((v0.c3, v0.c0, v0.c0)) AND ((v0.c3, vt0.c0, v0.c0)))))) ORDER BY (((v0.c2))>=(((v0.c0 IN (v0.c1))))) ASC, (((v0.c0, v0.c2, vt0.c0)) BETWEEN ((v0.c2 COLLATE BINARY, ((v0.c0)%(v0.c2)), NULL)) AND ((CAST(v0.c1 AS REAL), ((v0.c3)|(0.9118897082569811)), (v0.c0 IN (v0.c0))))) DESC  NULLS LAST;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((((NULL)) NOT BETWEEN ((CAST(NULL AS TEXT))) AND ((vt0.c0)))) ORDER BY ((vt0.c0)+(((((((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))) ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((NULL)) NOT BETWEEN ((CAST(NULL AS TEXT))) AND ((vt0.c0)))) ORDER BY CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS INTEGER) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((vt2.c1)+(vt2.c0)) IN (((vt2.c1) BETWEEN (v0.c0) AND (vt0.c0)), (v0.c2 IN (vt2.c0)))));
SELECT * FROM vt2, vt0, v0 WHERE ((((vt2.c1)+(vt2.c0)) IN (((vt2.c1) BETWEEN (v0.c0) AND (vt0.c0)), (v0.c2 IN (vt2.c0))))) LIMIT 0x0;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((vt2.c1)+(vt2.c0)) IN (((vt2.c1) BETWEEN (v0.c0) AND (vt0.c0)), (v0.c2 IN (vt2.c0)))));
SELECT * FROM vt2, vt0, v0 WHERE ((((vt2.c1)+(vt2.c0)) IN (((vt2.c1) BETWEEN (v0.c0) AND (vt0.c0)), (v0.c2 IN (vt2.c0))))) LIMIT 0x0;
SELECT * FROM vt0 WHERE (((x'c58a') ISNULL) COLLATE RTRIM);
SELECT ALL * FROM vt0 WHERE (((((x'c58a') ISNULL) COLLATE RTRIM)AND((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CAST(vt0.c0 AS NUMERIC), ((vt0.c0) ISNULL)))<=(((((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))), CAST(vt0.c0 AS BLOB), CASE vt0.c0  WHEN vt0.c0 THEN '-2011619333' END)))))) LIMIT 0X2;
SELECT * FROM vt0 WHERE (((x'c58a') ISNULL) COLLATE RTRIM);
SELECT ALL * FROM vt0 WHERE (((((x'c58a') ISNULL) COLLATE RTRIM)AND((((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)), CAST(vt0.c0 AS NUMERIC), ((vt0.c0) ISNULL)))<=(((((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))), CAST(vt0.c0 AS BLOB), CASE vt0.c0  WHEN vt0.c0 THEN '-2011619333' END)))))) LIMIT 0X2;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) COLLATE BINARY COLLATE RTRIM) ORDER BY NULL, ((((vt0.c0) NOT NULL))AND(HEX(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) COLLATE BINARY COLLATE RTRIM)AND((((vt0.c0)!=(vt0.c0)) IN ((vt0.c0 IN (vt0.c0, vt0.c0))))))) ORDER BY LOWER(x'd5') ASC  NULLS LAST, ((((((LIKELIHOOD(0.2678048050214864, x''))AND(((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))))OR(CASE vt0.c0  WHEN vt0.c0 THEN 'm熑df''d' WHEN vt0.c0 THEN vt0.c0 END)))OR(7.08305761E8)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((CAST(vt0.c0 AS REAL) IN ())) ORDER BY LOWER(x'd5') ASC  NULLS LAST, ((((((LIKELIHOOD(0.2678048050214864, x''))AND(((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))))OR(CASE vt0.c0  WHEN vt0.c0 THEN 'm熑df''d' WHEN vt0.c0 THEN vt0.c0 END)))OR(7.08305761E8)) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) COLLATE BINARY COLLATE RTRIM) ORDER BY NULL, ((((vt0.c0) NOT NULL))AND(HEX(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) COLLATE BINARY COLLATE RTRIM)AND((((vt0.c0)!=(vt0.c0)) IN ((vt0.c0 IN (vt0.c0, vt0.c0))))))) ORDER BY LOWER(x'd5') ASC  NULLS LAST, ((((((LIKELIHOOD(0.2678048050214864, x''))AND(((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))))OR(CASE vt0.c0  WHEN vt0.c0 THEN 'm熑df''d' WHEN vt0.c0 THEN vt0.c0 END)))OR(7.08305761E8)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((CAST(vt0.c0 AS REAL) IN ())) ORDER BY LOWER(x'd5') ASC  NULLS LAST, ((((((LIKELIHOOD(0.2678048050214864, x''))AND(((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))))OR(CASE vt0.c0  WHEN vt0.c0 THEN 'm熑df''d' WHEN vt0.c0 THEN vt0.c0 END)))OR(7.08305761E8)) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 WHEN 0.3770871810421853 THEN vt2.c1 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END) IS FALSE) LEFT OUTER JOIN v0 ON ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))<>(((vt0.c0)-(vt0.c0)))) WHERE (((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c2))) BETWEEN (((((((((v0.c2)OR(v0.c1)))AND(v0.c0)))OR(v0.c3)))OR(v0.c2))) AND ((((v0.c2, v0.c3))<((v0.c0, vt0.c0)))))) ORDER BY ((((((((vt2.c0)OR(v0.c3)))AND('2103859168')))AND(vt2.c1)))IS NOT(LOWER(v0.c2))) ASC;
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON ((CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 WHEN 0.3770871810421853 THEN vt2.c1 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END) IS FALSE) LEFT OUTER JOIN v0 ON ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))<>(((vt0.c0)-(vt0.c0)))) WHERE (((((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c2))) BETWEEN (((((((((v0.c2)OR(v0.c1)))AND(v0.c0)))OR(v0.c3)))OR(v0.c2))) AND ((((v0.c2, v0.c3))<((v0.c0, vt0.c0))))))AND(((TIME(vt0.c0, '', vt2.c1, v0.c3, vt0.c0, v0.c2)) BETWEEN (CASE WHEN vt2.c0 THEN v0.c2 END) AND ((((vt0.c0, v0.c3))<((v0.c0, vt2.c0)))))))) ORDER BY ((((HEX(v0.c3))AND(((((((v0.c0)AND(vt2.c1)))OR(v0.c1)))AND(vt2.c0)))))OR(CASE v0.c2  WHEN x'' THEN vt0.c0 ELSE v0.c1 END)) ASC, ((highlight(v0.c2, vt0.c0, v0.c1, vt2.c0)) NOT NULL) INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON ((CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 WHEN 0.3770871810421853 THEN vt2.c1 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END) IS FALSE) LEFT OUTER JOIN v0 ON ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))!=(((vt0.c0)-(vt0.c0)))) WHERE ((- (((v0.c3)<(v0.c2))))) ORDER BY ((((HEX(v0.c3))AND(((((((v0.c0)AND(vt2.c1)))OR(v0.c1)))AND(vt2.c0)))))OR(CASE v0.c2  WHEN x'' THEN vt0.c0 ELSE v0.c1 END)) ASC, ((highlight(v0.c2, vt0.c0, v0.c1, vt2.c0)) NOT NULL);
SELECT ALL * FROM vt0 INNER JOIN vt2 ON ((CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 WHEN 0.3770871810421853 THEN vt2.c1 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END) IS FALSE) LEFT OUTER JOIN v0 ON ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))<>(((vt0.c0)-(vt0.c0)))) WHERE (((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c2))) BETWEEN (((((((((v0.c2)OR(v0.c1)))AND(v0.c0)))OR(v0.c3)))OR(v0.c2))) AND ((((v0.c2, v0.c3))<((v0.c0, vt0.c0)))))) ORDER BY ((((((((vt2.c0)OR(v0.c3)))AND('2103859168')))AND(vt2.c1)))IS NOT(LOWER(v0.c2))) ASC;
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON ((CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 WHEN 0.3770871810421853 THEN vt2.c1 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END) IS FALSE) LEFT OUTER JOIN v0 ON ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))<>(((vt0.c0)-(vt0.c0)))) WHERE (((((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c2))) BETWEEN (((((((((v0.c2)OR(v0.c1)))AND(v0.c0)))OR(v0.c3)))OR(v0.c2))) AND ((((v0.c2, v0.c3))<((v0.c0, vt0.c0))))))AND(((TIME(vt0.c0, '', vt2.c1, v0.c3, vt0.c0, v0.c2)) BETWEEN (CASE WHEN vt2.c0 THEN v0.c2 END) AND ((((vt0.c0, v0.c3))<((v0.c0, vt2.c0)))))))) ORDER BY ((((HEX(v0.c3))AND(((((((v0.c0)AND(vt2.c1)))OR(v0.c1)))AND(vt2.c0)))))OR(CASE v0.c2  WHEN x'' THEN vt0.c0 ELSE v0.c1 END)) ASC, ((highlight(v0.c2, vt0.c0, v0.c1, vt2.c0)) NOT NULL) INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON ((CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN v0.c1 WHEN 0.3770871810421853 THEN vt2.c1 WHEN v0.c3 THEN v0.c3 ELSE v0.c1 END) IS FALSE) LEFT OUTER JOIN v0 ON ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))!=(((vt0.c0)-(vt0.c0)))) WHERE ((- (((v0.c3)<(v0.c2))))) ORDER BY ((((HEX(v0.c3))AND(((((((v0.c0)AND(vt2.c1)))OR(v0.c1)))AND(vt2.c0)))))OR(CASE v0.c2  WHEN x'' THEN vt0.c0 ELSE v0.c1 END)) ASC, ((highlight(v0.c2, vt0.c0, v0.c1, vt2.c0)) NOT NULL);
SELECT COUNT(*) FROM vt0, vt2 CROSS JOIN v0 ON NULL WHERE (((((((((vt0.c0)AND(x'74')))AND(vt0.c0)))OR(vt0.c0)))<=(((vt2.c0) IS TRUE))));
SELECT ALL COUNT(*) FROM vt0, vt2 CROSS JOIN v0 ON NULL WHERE (((((((((vt0.c0)AND(x'74')))AND(vt0.c0)))OR(vt0.c0)))<=(((vt2.c0) IS TRUE)))) ORDER BY ((((((((((((((((((((vt2.c0)OR(v0.c1)))AND(v0.c3)))OR(vt2.c1)))AND(v0.c1)))AND(0.739271015800826)))OR(vt2.c0)))AND(((((vt2.c0)AND(v0.c0)))OR(v0.c3)))))AND(CASE WHEN vt0.c0 THEN vt0.c0 END)))OR(((vt0.c0) NOT BETWEEN (vt0.c0) AND (x'')))))AND(((v0.c0)>=(v0.c1)))) DESC  NULLS FIRST, ((CAST(v0.c3 AS INTEGER))==(CASE vt2.c1  WHEN vt0.c0 THEN v0.c3 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN v0.c1 ELSE vt2.c1 END)) DESC;
SELECT ALL * FROM v0, vt2, vt0 WHERE (((((((vt0.c0) NOT NULL))OR(CASE vt2.c0  WHEN vt2.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt2.c0 ELSE v0.c0 END)))OR(((0x6d9fcea2)GLOB(v0.c0)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE (((((((vt0.c0) NOT NULL))OR(CASE vt2.c0  WHEN vt2.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt2.c0 ELSE v0.c0 END)))OR(((1839189666)GLOB(v0.c0))))) INTERSECT SELECT * FROM v0, vt2, vt0 WHERE ((vt2.c1 IN ()) COLLATE RTRIM);
SELECT ALL * FROM v0, vt2, vt0 WHERE (((((((vt0.c0) NOT NULL))OR(CASE vt2.c0  WHEN vt2.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt2.c0 ELSE v0.c0 END)))OR(((0x6d9fcea2)GLOB(v0.c0)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE (((((((vt0.c0) NOT NULL))OR(CASE vt2.c0  WHEN vt2.c0 THEN v0.c2 WHEN v0.c2 THEN vt2.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt2.c0 ELSE v0.c0 END)))OR(((1839189666)GLOB(v0.c0))))) INTERSECT SELECT * FROM v0, vt2, vt0 WHERE ((vt2.c1 IN ()) COLLATE RTRIM);
SELECT ALL * FROM v0 NATURAL JOIN vt0 LEFT OUTER JOIN vt2 ON vt2.c1 WHERE (SUBSTR(CASE WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE v0.c3 END, CAST(v0.c1 AS REAL)));
SELECT * FROM v0 NATURAL JOIN vt0 LEFT OUTER JOIN vt2 ON vt2.c1 WHERE (((SUBSTR(CASE WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE v0.c3 END, CAST(v0.c1 AS REAL)))AND(((((vt2.c1) NOTNULL)) IS FALSE)))) ORDER BY (((((vt0.c0)>(v0.c0)), ((((((((x'25')AND(v0.c0)))OR(vt2.c0)))AND(v0.c3)))OR(v0.c1)), (((vt2.c0, vt0.c0, vt2.c1))>=((v0.c2, vt0.c0, v0.c1)))))<((CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 END, ((vt2.c0) IS TRUE), (v0.c0 IN (v0.c3))))), ((((0.8709915247736055) BETWEEN (vt0.c0) AND (v0.c1))) NOT BETWEEN (vt2.c0 COLLATE RTRIM) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (vt0.c0)))) DESC LIMIT 0X1;
SELECT ALL * FROM v0 NATURAL JOIN vt0 LEFT OUTER JOIN vt2 ON vt2.c1 WHERE (SUBSTR(CASE WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE v0.c3 END, CAST(v0.c1 AS REAL)));
SELECT * FROM v0 NATURAL JOIN vt0 LEFT OUTER JOIN vt2 ON vt2.c1 WHERE (((SUBSTR(CASE WHEN v0.c3 THEN vt0.c0 WHEN vt2.c0 THEN v0.c3 ELSE v0.c3 END, CAST(v0.c1 AS REAL)))AND(((((vt2.c1) NOTNULL)) IS FALSE)))) ORDER BY (((((vt0.c0)>(v0.c0)), ((((((((x'25')AND(v0.c0)))OR(vt2.c0)))AND(v0.c3)))OR(v0.c1)), (((vt2.c0, vt0.c0, vt2.c1))>=((v0.c2, vt0.c0, v0.c1)))))<((CASE WHEN v0.c2 THEN v0.c0 WHEN vt2.c0 THEN vt2.c1 END, ((vt2.c0) IS TRUE), (v0.c0 IN (v0.c3))))), ((((0.8709915247736055) BETWEEN (vt0.c0) AND (v0.c1))) NOT BETWEEN (vt2.c0 COLLATE RTRIM) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (vt0.c0)))) DESC LIMIT 0X1;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (CASE WHEN ((((((NULL)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) THEN CASE '&E&'  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN 'ps~Kg' WHEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((0.39115024439907964, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0))) THEN x'ba' WHEN (vt0.c0 IN ()) THEN (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, 0.9367326386180468))) ELSE (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))) END);
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (CASE WHEN ((((((NULL)AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) THEN CASE '&E&'  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END THEN 'ps~Kg' WHEN (((vt0.c0, vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((0.39115024439907964, vt0.c0, vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0, vt0.c0))) THEN x'ba' WHEN (vt0.c0 IN ()) THEN (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, 0.9367326386180468))) ELSE (((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))) END) ORDER BY (((vt0.c0 IN ()))>>(((vt0.c0)<<(vt0.c0)))) DESC, vt0.c0 COLLATE NOCASE  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), (0X225a17df IN ())))==((INSTR(vt0.c0, vt0.c0), CAST(vt0.c0 AS BLOB))))) ORDER BY (((vt0.c0 IN ()))>>(((vt0.c0)<<(vt0.c0)))) DESC, vt0.c0 COLLATE NOCASE  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE ((((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c3 END))<=((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c3)))))) ORDER BY ((((((((v0.c1)OR(v0.c2)))OR(v0.c1)))OR(v0.c3))) NOT BETWEEN (((-329968071) BETWEEN (v0.c3) AND (v0.c3))) AND (((v0.c0) BETWEEN (v0.c0) AND (v0.c0))));
SELECT DISTINCT * FROM v0 WHERE ((((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c3 END))<=((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c3)))))) ORDER BY (((v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, (((v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c3)) AND ((v0.c0, v0.c2))))) AND ((v0.c2 COLLATE RTRIM, (- (v0.c0)))))  NULLS LAST, (((((('-1787789095')OR(v0.c3)))AND(v0.c2)))=(TRIM(0.7644248096660352, v0.c1))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((NOT ((NOT (v0.c3))))) ORDER BY (((v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, (((v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c3)) AND ((v0.c0, v0.c2))))) AND ((v0.c2 COLLATE RTRIM, (- (v0.c0)))))  NULLS LAST, (((((('-1787789095')OR(v0.c3)))AND(v0.c2)))==(TRIM(0.7644248096660352, v0.c1))) DESC  NULLS FIRST;
SELECT * FROM v0 WHERE ((((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c3 END))<=((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c3)))))) ORDER BY ((((((((v0.c1)OR(v0.c2)))OR(v0.c1)))OR(v0.c3))) NOT BETWEEN (((-329968071) BETWEEN (v0.c3) AND (v0.c3))) AND (((v0.c0) BETWEEN (v0.c0) AND (v0.c0))));
SELECT DISTINCT * FROM v0 WHERE ((((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE v0.c3 END))<=((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c3)))))) ORDER BY (((v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, (((v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c3)) AND ((v0.c0, v0.c2))))) AND ((v0.c2 COLLATE RTRIM, (- (v0.c0)))))  NULLS LAST, (((((('-1787789095')OR(v0.c3)))AND(v0.c2)))=(TRIM(0.7644248096660352, v0.c1))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM v0 WHERE ((NOT ((NOT (v0.c3))))) ORDER BY (((v0.c2, v0.c0)) NOT BETWEEN ((v0.c2, (((v0.c1, v0.c1)) BETWEEN ((v0.c2, v0.c3)) AND ((v0.c0, v0.c2))))) AND ((v0.c2 COLLATE RTRIM, (- (v0.c0)))))  NULLS LAST, (((((('-1787789095')OR(v0.c3)))AND(v0.c2)))==(TRIM(0.7644248096660352, v0.c1))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((vt2.c1, v0.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), (NOT ('-1046752756')))) AND ((TRIM(DISTINCT v0.c2, v0.c2), vt0.c0))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((vt2.c1, v0.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), (NOT ('-1046752756')))) AND ((TRIM(DISTINCT v0.c2, v0.c2), vt0.c0)))) ORDER BY (v0.c0 COLLATE RTRIM IN ((+ (v0.c0)), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c3)))) ASC  NULLS FIRST, ((((((((((((((v0.c0)AND(vt2.c1)))AND(vt0.c0)))OR(v0.c2)))OR(vt0.c0)))AND(v0.c0)))OR(v0.c0)))|(CAST(v0.c0 AS INTEGER))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ('564389303') ORDER BY (v0.c0 COLLATE RTRIM IN ((+ (v0.c0)), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c3)))) ASC  NULLS FIRST, ((((((((((((((v0.c0)AND(vt2.c1)))AND(vt0.c0)))OR(v0.c2)))OR(vt0.c0)))AND(v0.c0)))OR(v0.c0)))|(CAST(v0.c0 AS INTEGER))) LIMIT 0X0;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((((vt2.c1, v0.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), (NOT ('-1046752756')))) AND ((TRIM(DISTINCT v0.c2, v0.c2), vt0.c0))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((vt2.c1, v0.c1)) NOT BETWEEN ((((v0.c2) IS TRUE), (NOT ('-1046752756')))) AND ((TRIM(DISTINCT v0.c2, v0.c2), vt0.c0)))) ORDER BY (v0.c0 COLLATE RTRIM IN ((+ (v0.c0)), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c3)))) ASC  NULLS FIRST, ((((((((((((((v0.c0)AND(vt2.c1)))AND(vt0.c0)))OR(v0.c2)))OR(vt0.c0)))AND(v0.c0)))OR(v0.c0)))|(CAST(v0.c0 AS INTEGER))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ('564389303') ORDER BY (v0.c0 COLLATE RTRIM IN ((+ (v0.c0)), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (v0.c3)))) ASC  NULLS FIRST, ((((((((((((((v0.c0)AND(vt2.c1)))AND(vt0.c0)))OR(v0.c2)))OR(vt0.c0)))AND(v0.c0)))OR(v0.c0)))|(CAST(v0.c0 AS INTEGER))) LIMIT 0X0;
SELECT ALL * FROM vt0, v0 WHERE (CASE CASE WHEN vt0.c0 THEN v0.c1 END  WHEN CAST(v0.c3 AS BLOB) THEN LTRIM(v0.c3) WHEN TRIM(DISTINCT NULL, v0.c3) THEN ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c2)) WHEN x'' THEN v0.c3 WHEN ((v0.c0) ISNULL) THEN ((v0.c1)LIKE(v0.c1)) WHEN ((v0.c1)>=(NULL)) THEN NULL ELSE ((v0.c3)>(v0.c1)) END) ORDER BY DATETIME(((v0.c0) IS TRUE), ((vt0.c0)LIKE(v0.c2)), CAST(v0.c0 AS REAL))  NULLS FIRST, ((CAST(v0.c0 AS NUMERIC))GLOB(((((vt0.c0)OR(v0.c1)))OR(v0.c3)))) ASC, (((v0.c1))==((v0.c2))) COLLATE BINARY  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE (CASE CASE WHEN vt0.c0 THEN v0.c1 END  WHEN CAST(v0.c3 AS BLOB) THEN LTRIM(v0.c3) WHEN TRIM(DISTINCT NULL, v0.c3) THEN ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c2)) WHEN x'' THEN v0.c3 WHEN ((v0.c0) ISNULL) THEN ((v0.c1)LIKE(v0.c1)) WHEN ((v0.c1)>=(NULL)) THEN NULL ELSE ((v0.c3)>(v0.c1)) END) ORDER BY CASE v0.c0  WHEN v0.c2 THEN v0.c0 END COLLATE NOCASE ASC  NULLS FIRST, (+ (((v0.c3)%(v0.c2))))  NULLS LAST INTERSECT SELECT ALL * FROM vt0, v0 WHERE (((vt0.c0) NOT NULL)) ORDER BY CASE v0.c0  WHEN v0.c2 THEN v0.c0 END COLLATE NOCASE ASC  NULLS FIRST, (+ (((v0.c3)%(v0.c2))))  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE (CASE CASE WHEN vt0.c0 THEN v0.c1 END  WHEN CAST(v0.c3 AS BLOB) THEN LTRIM(v0.c3) WHEN TRIM(DISTINCT NULL, v0.c3) THEN ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c2)) WHEN x'' THEN v0.c3 WHEN ((v0.c0) ISNULL) THEN ((v0.c1)LIKE(v0.c1)) WHEN ((v0.c1)>=(NULL)) THEN NULL ELSE ((v0.c3)>(v0.c1)) END) ORDER BY DATETIME(((v0.c0) IS TRUE), ((vt0.c0)LIKE(v0.c2)), CAST(v0.c0 AS REAL))  NULLS FIRST, ((CAST(v0.c0 AS NUMERIC))GLOB(((((vt0.c0)OR(v0.c1)))OR(v0.c3)))) ASC, (((v0.c1))==((v0.c2))) COLLATE BINARY  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE (CASE CASE WHEN vt0.c0 THEN v0.c1 END  WHEN CAST(v0.c3 AS BLOB) THEN LTRIM(v0.c3) WHEN TRIM(DISTINCT NULL, v0.c3) THEN ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c2)) WHEN x'' THEN v0.c3 WHEN ((v0.c0) ISNULL) THEN ((v0.c1)LIKE(v0.c1)) WHEN ((v0.c1)>=(NULL)) THEN NULL ELSE ((v0.c3)>(v0.c1)) END) ORDER BY CASE v0.c0  WHEN v0.c2 THEN v0.c0 END COLLATE NOCASE ASC  NULLS FIRST, (+ (((v0.c3)%(v0.c2))))  NULLS LAST INTERSECT SELECT ALL * FROM vt0, v0 WHERE (((vt0.c0) NOT NULL)) ORDER BY CASE v0.c0  WHEN v0.c2 THEN v0.c0 END COLLATE NOCASE ASC  NULLS FIRST, (+ (((v0.c3)%(v0.c2))))  NULLS LAST;
SELECT ALL MAX(vt2.c1) FROM vt0, v0, vt2 WHERE ((((((((v0.c3, vt2.c0)) BETWEEN ((v0.c2, v0.c3)) AND ((v0.c0, vt0.c0))))AND((((v0.c0, v0.c2, v0.c1)) BETWEEN ((vt2.c1, v0.c3, '-21486797')) AND ((vt2.c0, v0.c1, v0.c1))))))AND(v0.c3 COLLATE NOCASE)));
SELECT DISTINCT MAX(vt2.c1) FROM vt0, v0, vt2 WHERE ((((((((((v0.c3, vt2.c0)) BETWEEN ((v0.c2, v0.c3)) AND ((v0.c0, vt0.c0))))AND((((v0.c0, v0.c2, v0.c1)) BETWEEN ((vt2.c1, v0.c3, '-21486797')) AND ((vt2.c0, v0.c1, v0.c1))))))AND(v0.c3 COLLATE NOCASE)))AND((((((((vt0.c0 IN (vt2.c0)))AND(CAST(v0.c1 AS BLOB))))AND(((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3)))))OR((((v0.c1, v0.c1)) NOT BETWEEN ((v0.c1, vt0.c0)) AND ((vt0.c0, vt2.c0)))))))) ORDER BY (vt0.c0 IN ()) COLLATE BINARY ASC  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt0, v0, vt2 WHERE (highlight(((((((v0.c2)AND(v0.c3)))AND(v0.c1)))AND(v0.c2)), ((vt2.c0) NOT NULL), v0.c0 COLLATE NOCASE, vt0.c0)) ORDER BY (vt0.c0 IN ()) COLLATE BINARY ASC  NULLS FIRST LIMIT 2;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (((TRIM(DISTINCT vt2.c1, vt0.c0)) IS FALSE)) ORDER BY ((NOT ('')) IN (vt0.c0 COLLATE BINARY))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (((TRIM(DISTINCT vt2.c1, vt0.c0)) IS FALSE)) ORDER BY ((NOT ('')) IN (vt0.c0 COLLATE BINARY))  NULLS LAST LIMIT 0X1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (((CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN v0.c2 END)>=(vt0.c0 COLLATE NOCASE))) ORDER BY ((NOT ('')) IN (vt0.c0 COLLATE BINARY))  NULLS LAST LIMIT 0X1;
SELECT * FROM vt2, v0, vt0 WHERE (CASE WHEN (vt0.c0 IN (v0.c3)) THEN ((v0.c2)+(vt2.c0)) WHEN ((v0.c3)IS NOT('1190017638')) THEN ((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)) ELSE (NOT (vt2.c1)) END);
SELECT * FROM vt2, v0, vt0 WHERE (((CASE WHEN (vt0.c0 IN (v0.c3)) THEN ((v0.c2)+(vt2.c0)) WHEN ((v0.c3)IS NOT('1190017638')) THEN ((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)) ELSE (NOT (vt2.c1)) END)AND(CASE ((v0.c1)IS NOT(vt2.c1))  WHEN v0.c0 COLLATE BINARY THEN ((v0.c3)<=(vt2.c0)) ELSE CASE v0.c1  WHEN v0.c3 THEN v0.c3 ELSE v0.c2 END END))) ORDER BY MIN(((vt0.c0)<(v0.c1)), ((vt0.c0)|(v0.c3)), HEX(DISTINCT v0.c2), v0.c1, ((v0.c1)>=(v0.c3)), (vt2.c0 IN (v0.c1)), v0.c0 COLLATE RTRIM, (- (vt2.c0))), CAST(TRIM(DISTINCT 0.599435632535552) AS TEXT) DESC LIMIT 2 INTERSECT SELECT ALL * FROM vt2, v0, vt0 WHERE (((((0.4049184943979073) IS TRUE))/((NOT (v0.c0))))) ORDER BY MIN(((vt0.c0)<(v0.c1)), ((vt0.c0)|(v0.c3)), HEX(DISTINCT v0.c2), v0.c1, ((v0.c1)>=(v0.c3)), (vt2.c0 IN (v0.c1)), v0.c0 COLLATE RTRIM, (- (vt2.c0))), CAST(TRIM(DISTINCT 0.599435632535552) AS TEXT) DESC LIMIT 0x2;
SELECT * FROM vt2, v0, vt0 WHERE (CASE WHEN (vt0.c0 IN (v0.c3)) THEN ((v0.c2)+(vt2.c0)) WHEN ((v0.c3)IS NOT('1190017638')) THEN ((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)) ELSE (NOT (vt2.c1)) END);
SELECT * FROM vt2, v0, vt0 WHERE (((CASE WHEN (vt0.c0 IN (v0.c3)) THEN ((v0.c2)+(vt2.c0)) WHEN ((v0.c3)IS NOT('1190017638')) THEN ((((vt2.c1)AND(vt2.c0)))OR(vt2.c1)) ELSE (NOT (vt2.c1)) END)AND(CASE ((v0.c1)IS NOT(vt2.c1))  WHEN v0.c0 COLLATE BINARY THEN ((v0.c3)<=(vt2.c0)) ELSE CASE v0.c1  WHEN v0.c3 THEN v0.c3 ELSE v0.c2 END END))) ORDER BY MIN(((vt0.c0)<(v0.c1)), ((vt0.c0)|(v0.c3)), HEX(DISTINCT v0.c2), v0.c1, ((v0.c1)>=(v0.c3)), (vt2.c0 IN (v0.c1)), v0.c0 COLLATE RTRIM, (- (vt2.c0))), CAST(TRIM(DISTINCT 0.599435632535552) AS TEXT) DESC LIMIT 2 INTERSECT SELECT ALL * FROM vt2, v0, vt0 WHERE (((((0.4049184943979073) IS TRUE))/((NOT (v0.c0))))) ORDER BY MIN(((vt0.c0)<(v0.c1)), ((vt0.c0)|(v0.c3)), HEX(DISTINCT v0.c2), v0.c1, ((v0.c1)>=(v0.c3)), (vt2.c0 IN (v0.c1)), v0.c0 COLLATE RTRIM, (- (vt2.c0))), CAST(TRIM(DISTINCT 0.599435632535552) AS TEXT) DESC LIMIT 0x2;
SELECT ALL * FROM vt2 WHERE ((((vt2.c1 COLLATE RTRIM, ((vt2.c1)%(vt2.c0)), (~ (vt2.c0)), (((vt2.c1, vt2.c1, vt2.c0, vt2.c0))<=((vt2.c1, vt2.c0, vt2.c0, vt2.c1)))))<>((((vt2.c0)||(vt2.c0)), ((vt2.c0) ISNULL), ((((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)), (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1, vt2.c0)) AND ((vt2.c0, vt2.c0, vt2.c1)))))));
SELECT ALL * FROM vt2 WHERE ((((((vt2.c1 COLLATE RTRIM, ((vt2.c1)%(vt2.c0)), (~ (vt2.c0)), (((vt2.c1, vt2.c1, vt2.c0, vt2.c0))==((vt2.c1, vt2.c0, vt2.c0, vt2.c1)))))<>((((vt2.c0)||(vt2.c0)), ((vt2.c0) ISNULL), ((((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)), (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1, vt2.c0)) AND ((vt2.c0, vt2.c0, vt2.c1)))))))AND(SQLITE_VERSION()))) ORDER BY ((0.8886624000749642) IS FALSE) LIMIT 0;
SELECT ALL * FROM vt2 WHERE ((((vt2.c1 COLLATE RTRIM, ((vt2.c1)%(vt2.c0)), (~ (vt2.c0)), (((vt2.c1, vt2.c1, vt2.c0, vt2.c0))<=((vt2.c1, vt2.c0, vt2.c0, vt2.c1)))))<>((((vt2.c0)||(vt2.c0)), ((vt2.c0) ISNULL), ((((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)), (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1, vt2.c0)) AND ((vt2.c0, vt2.c0, vt2.c1)))))));
SELECT ALL * FROM vt2 WHERE ((((((vt2.c1 COLLATE RTRIM, ((vt2.c1)%(vt2.c0)), (~ (vt2.c0)), (((vt2.c1, vt2.c1, vt2.c0, vt2.c0))==((vt2.c1, vt2.c0, vt2.c0, vt2.c1)))))<>((((vt2.c0)||(vt2.c0)), ((vt2.c0) ISNULL), ((((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(vt2.c0)), (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c1, vt2.c1, vt2.c0)) AND ((vt2.c0, vt2.c0, vt2.c1)))))))AND(SQLITE_VERSION()))) ORDER BY ((0.8886624000749642) IS FALSE) LIMIT 0;
SELECT MIN(v0.c3) FROM v0, vt0 WHERE (((DATETIME(x'', 754595407, 'c4')) BETWEEN (((((((((v0.c3)AND(v0.c1)))OR(vt0.c0)))OR(v0.c1)))OR(vt0.c0))) AND (v0.c3))) ORDER BY ((CASE WHEN v0.c0 THEN 'QV' END)/(v0.c0 COLLATE NOCASE)) DESC, v0.c1 ASC;
SELECT ALL MIN(v0.c3) FROM v0, vt0 WHERE (((((DATETIME(x'', 0X2cfa364f, 'c4')) BETWEEN (((((((((v0.c3)AND(v0.c1)))OR(vt0.c0)))OR(v0.c1)))OR(vt0.c0))) AND (v0.c3)))AND(vt0.c0))) ORDER BY ((CASE WHEN v0.c0 THEN 'QV' END)/(v0.c0 COLLATE NOCASE)) DESC, v0.c1 ASC;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((('-2118027055')OR(vt0.c0)))AND(v0.c1)))OR(v0.c3)) IN ()));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((((((('-2118027055')OR(vt0.c0)))AND(v0.c1)))OR(v0.c3)) IN ()));
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((('-2118027055')OR(vt0.c0)))AND(v0.c1)))OR(v0.c3)) IN ()));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (((((((('-2118027055')OR(vt0.c0)))AND(v0.c1)))OR(v0.c3)) IN ()));
SELECT MIN(v0.c1) FROM v0 WHERE (x'') ORDER BY (((((v0.c3, 0.15245624917056055)) BETWEEN ((v0.c3, '')) AND (('%w', v0.c0)))) BETWEEN ('UR') AND (CAST(v0.c2 AS REAL)));
SELECT MIN(v0.c1) FROM v0 WHERE (((x'')AND('{8Vz#kG'))) ORDER BY (((((v0.c3, 0.15245624917056055)) BETWEEN ((v0.c3, '')) AND (('%w', v0.c0)))) BETWEEN ('UR') AND (CAST(v0.c2 AS REAL))) LIMIT 0;
SELECT ALL * FROM vt2 WHERE (((((((((vt2.c1)=(vt2.c0)))AND(((((((vt2.c0)AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))))AND('-833993359')))OR((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0))))));
SELECT DISTINCT * FROM vt2 WHERE (((((((((vt2.c1)==(vt2.c0)))AND(((((((vt2.c0)AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))))AND('-833993359')))OR((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0)))))) LIMIT 3;
SELECT ALL * FROM vt2 WHERE (((((((((vt2.c1)=(vt2.c0)))AND(((((((vt2.c0)AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))))AND('-833993359')))OR((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0))))));
SELECT DISTINCT * FROM vt2 WHERE (((((((((vt2.c1)==(vt2.c0)))AND(((((((vt2.c0)AND(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))))AND('-833993359')))OR((((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c0)))))) LIMIT 3;
SELECT * FROM vt2, vt0, v0 WHERE (((CAST(x'58' AS NUMERIC))<(CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END))) ORDER BY NULL, (((CAST(v0.c0 AS REAL)))<>((NULL)));
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(x'58' AS NUMERIC))<(CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END))) ORDER BY NULL, (((CAST(v0.c0 AS REAL)))<>((NULL))) INTERSECT SELECT * FROM vt2, vt0, v0 WHERE (((v0.c2)IS NOT(v0.c1)) COLLATE BINARY) ORDER BY NULL, (((CAST(v0.c0 AS REAL)))<>((NULL)));
SELECT * FROM vt2, vt0, v0 WHERE (((CAST(x'58' AS NUMERIC))<(CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END))) ORDER BY NULL, (((CAST(v0.c0 AS REAL)))<>((NULL)));
SELECT ALL * FROM vt2, vt0, v0 WHERE (((CAST(x'58' AS NUMERIC))<(CASE WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c1 ELSE v0.c0 END))) ORDER BY NULL, (((CAST(v0.c0 AS REAL)))<>((NULL))) INTERSECT SELECT * FROM vt2, vt0, v0 WHERE (((v0.c2)IS NOT(v0.c1)) COLLATE BINARY) ORDER BY NULL, (((CAST(v0.c0 AS REAL)))<>((NULL)));
SELECT ALL MAX(v0.c1) FROM vt0, vt2, v0 WHERE (CASE WHEN vt2.c0 THEN v0.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END COLLATE BINARY);
SELECT MAX(v0.c1) FROM vt0, vt2, v0 WHERE (((CASE WHEN vt2.c0 THEN v0.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END COLLATE BINARY)AND((((v0.c2, NULL, vt2.c0)) BETWEEN ((((x'96970c') NOT BETWEEN (v0.c0) AND (v0.c2)), LIKELIHOOD(vt2.c0, vt2.c1), ((v0.c1) NOT BETWEEN (v0.c3) AND (vt0.c0)))) AND ((((((((((((((((vt0.c0)OR(v0.c1)))AND(v0.c2)))OR(NULL)))OR(vt2.c1)))OR(v0.c0)))OR(v0.c3)))AND(v0.c2)), (((v0.c3, vt0.c0, v0.c0))!=((v0.c2, vt0.c0, vt2.c1))), CASE ''  WHEN '1284633581' THEN v0.c1 END)))))) INTERSECT SELECT ALL MAX(v0.c1) FROM vt0, vt2, v0 WHERE (vt2.c1);
SELECT * FROM vt0 WHERE (INSTR(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END));
SELECT DISTINCT * FROM vt0 WHERE (((INSTR(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))AND(((CAST(vt0.c0 AS TEXT))&(((vt0.c0)<(vt0.c0))))))) ORDER BY (CAST(vt0.c0 AS BLOB) IN ()) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (INSTR(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END));
SELECT DISTINCT * FROM vt0 WHERE (((INSTR(((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)), CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))AND(((CAST(vt0.c0 AS TEXT))&(((vt0.c0)<(vt0.c0))))))) ORDER BY (CAST(vt0.c0 AS BLOB) IN ()) DESC  NULLS LAST;
SELECT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (v0.c0) ORDER BY CAST(CAST(v0.c2 AS INTEGER) AS BLOB) DESC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((v0.c0)AND(CAST(CAST(v0.c0 AS TEXT) AS TEXT)))) ORDER BY CASE (((vt0.c0, vt2.c1, vt2.c0))=((v0.c2, v0.c1, v0.c0)))  WHEN ((vt0.c0)<(vt2.c1)) THEN ((v0.c3)IS(vt2.c0)) WHEN (+ (vt2.c1)) THEN v0.c1 ELSE ((v0.c0) IS FALSE) END ASC  NULLS LAST;
SELECT * FROM vt2, vt0 NATURAL JOIN v0 WHERE (v0.c0) ORDER BY CAST(CAST(v0.c2 AS INTEGER) AS BLOB) DESC  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 NATURAL JOIN v0 WHERE (((v0.c0)AND(CAST(CAST(v0.c0 AS TEXT) AS TEXT)))) ORDER BY CASE (((vt0.c0, vt2.c1, vt2.c0))=((v0.c2, v0.c1, v0.c0)))  WHEN ((vt0.c0)<(vt2.c1)) THEN ((v0.c3)IS(vt2.c0)) WHEN (+ (vt2.c1)) THEN v0.c1 ELSE ((v0.c0) IS FALSE) END ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0, vt0.c0))) BETWEEN ((vt0.c0 IN ())) AND ((- (vt0.c0))))) ORDER BY CAST((+ (vt0.c0)) AS NUMERIC)  NULLS LAST, ((((UNICODE(vt0.c0))AND(CAST(vt0.c0 AS BLOB))))AND(((-268503340) IS FALSE))) ASC, 0.7019252105488037;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0, vt0.c0))) BETWEEN ((vt0.c0 IN ())) AND ((- (vt0.c0)))))AND(highlight(RTRIM(vt0.c0), vt0.c0 COLLATE BINARY, (((vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))), vt0.c0)))) ORDER BY ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))+(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))) ASC INTERSECT SELECT COUNT(*) FROM vt0 WHERE ('') ORDER BY ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))+(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))) ASC;
SELECT ALL COUNT(*) FROM v0 WHERE ((((NOT (v0.c0))) NOT BETWEEN (v0.c3 COLLATE BINARY) AND (CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN NULL THEN NULL ELSE v0.c3 END))) ORDER BY ((CAST(v0.c1 AS BLOB)) NOT BETWEEN (((v0.c1)=(v0.c3))) AND ((v0.c2 IN (v0.c0)))), ((CAST(v0.c3 AS BLOB)) BETWEEN (((NULL) BETWEEN (v0.c2) AND ('3St~]o'))) AND ((NOT (v0.c2))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((NOT (v0.c0))) NOT BETWEEN (v0.c3 COLLATE BINARY) AND (CASE v0.c2  WHEN v0.c2 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN NULL THEN NULL ELSE v0.c3 END))) ORDER BY ((CAST(v0.c1 AS BLOB)) NOT BETWEEN (((v0.c1)==(v0.c3))) AND ((v0.c2 IN (v0.c0)))), ((CAST(v0.c3 AS BLOB)) BETWEEN (((NULL) BETWEEN (v0.c2) AND ('3St~]o'))) AND ((NOT (v0.c2)))) LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE ((v0.c2 IN ())) ORDER BY ((CAST(v0.c1 AS BLOB)) NOT BETWEEN (((v0.c1)=(v0.c3))) AND ((v0.c2 IN (v0.c0)))), ((CAST(v0.c3 AS BLOB)) BETWEEN (((NULL) BETWEEN (v0.c2) AND ('3St~]o'))) AND ((NOT (v0.c2)))) LIMIT 2;
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON (((((((0.9681134037712047)AND(vt0.c0)))AND(v0.c3)), (vt2.c1 IN (v0.c0, vt2.c1))))<>((((vt2.c0)|(v0.c1)), (~ (v0.c0))))) WHERE ((v0.c3 IN ((('7130899') IS FALSE))));
SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON (((((((0.9681134037712047)AND(vt0.c0)))AND(v0.c3)), (vt2.c1 IN (v0.c0, vt2.c1))))<>((((vt2.c0)|(v0.c1)), (~ (v0.c0))))) WHERE ((v0.c3 IN ((('7130899') IS FALSE)))) ORDER BY ((((vt0.c0) NOT NULL)) BETWEEN (((((((((v0.c2)AND(vt2.c0)))OR(vt2.c0)))OR(v0.c2)))OR(v0.c1))) AND (v0.c1 COLLATE RTRIM)) DESC INTERSECT SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON (((((((0.9681134037712047)AND(vt0.c0)))AND(v0.c3)), (vt2.c1 IN (v0.c0, vt2.c1))))!=((((vt2.c0)|(v0.c1)), (~ (v0.c0))))) WHERE (((((((vt2.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))OR(((v0.c2) ISNULL))))AND((v0.c0 IN (NULL))))) ORDER BY ((((vt0.c0) NOT NULL)) BETWEEN (((((((((v0.c2)AND(vt2.c0)))OR(vt2.c0)))OR(v0.c2)))OR(v0.c1))) AND (v0.c1 COLLATE RTRIM)) DESC;
SELECT ALL * FROM vt2, v0 CROSS JOIN vt0 ON (((((((0.9681134037712047)AND(vt0.c0)))AND(v0.c3)), (vt2.c1 IN (v0.c0, vt2.c1))))<>((((vt2.c0)|(v0.c1)), (~ (v0.c0))))) WHERE ((v0.c3 IN ((('7130899') IS FALSE))));
SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON (((((((0.9681134037712047)AND(vt0.c0)))AND(v0.c3)), (vt2.c1 IN (v0.c0, vt2.c1))))<>((((vt2.c0)|(v0.c1)), (~ (v0.c0))))) WHERE ((v0.c3 IN ((('7130899') IS FALSE)))) ORDER BY ((((vt0.c0) NOT NULL)) BETWEEN (((((((((v0.c2)AND(vt2.c0)))OR(vt2.c0)))OR(v0.c2)))OR(v0.c1))) AND (v0.c1 COLLATE RTRIM)) DESC INTERSECT SELECT DISTINCT * FROM vt2, v0 CROSS JOIN vt0 ON (((((((0.9681134037712047)AND(vt0.c0)))AND(v0.c3)), (vt2.c1 IN (v0.c0, vt2.c1))))!=((((vt2.c0)|(v0.c1)), (~ (v0.c0))))) WHERE (((((((vt2.c1) NOT BETWEEN (v0.c0) AND (v0.c1)))OR(((v0.c2) ISNULL))))AND((v0.c0 IN (NULL))))) ORDER BY ((((vt0.c0) NOT NULL)) BETWEEN (((((((((v0.c2)AND(vt2.c0)))OR(vt2.c0)))OR(v0.c2)))OR(v0.c1))) AND (v0.c1 COLLATE RTRIM)) DESC;
SELECT COUNT(*) FROM vt2, vt0 WHERE (vt0.c0 COLLATE BINARY) ORDER BY (0.7568268780257993 IN (CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END, vt2.c0 COLLATE RTRIM));
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE (vt0.c0 COLLATE BINARY) ORDER BY (0.7568268780257993 IN (CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END, vt2.c0 COLLATE RTRIM)) INTERSECT SELECT ALL COUNT(*) FROM vt2, vt0 WHERE ((((vt0.c0 IN (vt0.c0, vt2.c1))) BETWEEN (((('1839189666', vt2.c1)) NOT BETWEEN ((vt2.c0, 0.7666634061092129)) AND ((vt2.c0, vt2.c0)))) AND ((NOT (vt2.c1))))) ORDER BY (0.7568268780257993 IN (CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END, vt2.c0 COLLATE RTRIM));
SELECT ALL MIN(v0.c3) FROM v0 WHERE (json(v0.c0) COLLATE NOCASE);
SELECT MIN(v0.c3) FROM v0 WHERE (json(v0.c0) COLLATE NOCASE) ORDER BY 0.43464700818608826 LIMIT 0x0 INTERSECT SELECT MIN(v0.c3) FROM v0 WHERE (CASE WHEN CAST(v0.c0 AS BLOB) THEN v0.c3 COLLATE BINARY WHEN CAST(v0.c3 AS NUMERIC) THEN ((x'')/(v0.c3)) ELSE LOWER(v0.c3) END) ORDER BY 0.43464700818608826 LIMIT 0X0;
SELECT ALL MIN(v0.c0) FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((vt2.c1, v0.c3)) BETWEEN ((((vt2.c1) ISNULL), (vt2.c1 IN (vt2.c0)))) AND ((((v0.c3)AND(v0.c0)), ((vt2.c1)<(vt2.c1))))) WHERE ((((vt2.c1, vt2.c1)) NOT BETWEEN ((((v0.c0)&(v0.c2)), v0.c3 COLLATE NOCASE)) AND ((UPPER(DISTINCT v0.c3), CAST(v0.c1 AS BLOB))))) ORDER BY CASE ((v0.c1)-(vt2.c0))  WHEN ((v0.c1) BETWEEN (vt0.c0) AND (v0.c0)) THEN (+ (vt2.c1)) WHEN CASE v0.c1  WHEN NULL THEN x'' END THEN 'Ar*4~^L' END  NULLS FIRST, (NOT (((2.138090781E9)IS(v0.c1)))) DESC  NULLS LAST, ((((v0.c2) BETWEEN (vt2.c0) AND (v0.c3)))>(CASE v0.c3  WHEN vt2.c1 THEN v0.c0 WHEN v0.c2 THEN vt2.c1 WHEN v0.c3 THEN vt0.c0 END))  NULLS LAST;
SELECT DISTINCT MIN(v0.c0) FROM vt2, v0 INNER JOIN vt0 ON (((vt2.c1, v0.c3)) BETWEEN ((((vt2.c1) ISNULL), (vt2.c1 IN (vt2.c0)))) AND ((((v0.c3)AND(v0.c0)), ((vt2.c1)<(vt2.c1))))) WHERE ((((vt2.c1, vt2.c1)) NOT BETWEEN ((((v0.c0)&(v0.c2)), v0.c3 COLLATE NOCASE)) AND ((UPPER(DISTINCT v0.c3), CAST(v0.c1 AS BLOB))))) ORDER BY (~ ((v0.c2 IN (vt2.c1)))) ASC, (((((v0.c1, v0.c1))<>((v0.c3, vt2.c0)))) BETWEEN (((v0.c3)=(v0.c2))) AND (((v0.c2) NOT NULL)))  NULLS LAST;
SELECT * FROM vt0, vt2, v0 WHERE ('xU');
SELECT * FROM vt0, vt2, v0 WHERE ((('xU')AND(CAST(LIKELY(DISTINCT vt2.c0) AS REAL)))) ORDER BY ((((((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c2)))AND((- (v0.c1)))))AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))) DESC LIMIT 0X2 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (((TRIM(DISTINCT 0.44922453321700384, v0.c1))%(vt2.c1 COLLATE NOCASE))) ORDER BY ((((((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c2)))AND((- (v0.c1)))))AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))) DESC LIMIT 0x2;
SELECT * FROM vt0, vt2, v0 WHERE ('xU');
SELECT * FROM vt0, vt2, v0 WHERE ((('xU')AND(CAST(LIKELY(DISTINCT vt2.c0) AS REAL)))) ORDER BY ((((((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c2)))AND((- (v0.c1)))))AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))) DESC LIMIT 0X2 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE (((TRIM(DISTINCT 0.44922453321700384, v0.c1))%(vt2.c1 COLLATE NOCASE))) ORDER BY ((((((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c2)))AND((- (v0.c1)))))AND(((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c3)))) DESC LIMIT 0x2;
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (CASE (('g>X')<<(vt0.c0))  WHEN x'7b3e02' THEN ((vt0.c0) NOT NULL) WHEN CAST(vt0.c0 AS BLOB) THEN vt0.c0 WHEN (vt0.c0 IN ()) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END ELSE json_array(vt0.c0, vt0.c0, vt0.c0) END) ORDER BY ((((vt0.c0)>>(vt0.c0))) BETWEEN ((- (vt0.c0))) AND (NULL))  NULLS FIRST;
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((CASE (('g>X')<<(vt0.c0))  WHEN x'7b3e02' THEN ((vt0.c0) NOT NULL) WHEN CAST(vt0.c0 AS BLOB) THEN vt0.c0 WHEN (vt0.c0 IN ()) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END ELSE json_array(vt0.c0, vt0.c0, vt0.c0) END)AND(CASE vt0.c0  WHEN CAST(vt0.c0 AS INTEGER) THEN ABS(DISTINCT vt0.c0) ELSE 0.8146308500539607 END))) ORDER BY (0Xffffffffe456578d IN ()) DESC LIMIT 1 INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0, NULL))) NOT BETWEEN (((vt0.c0) ISNULL)) AND (((vt0.c0) IS FALSE)))) ORDER BY (-464103539 IN ()) DESC LIMIT 0x1;
SELECT * FROM v0 CROSS JOIN vt2 ON ((vt2.c1) NOT BETWEEN (((x'')+(v0.c3))) AND (vt2.c1 COLLATE NOCASE)) WHERE ((((v0.c2 IN ())) NOT NULL)) ORDER BY QUOTE((~ (v0.c2)))  NULLS LAST;
SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON ((vt2.c1) NOT BETWEEN (((x'')+(v0.c3))) AND (vt2.c1 COLLATE NOCASE)) WHERE ((((((v0.c2 IN ())) NOT NULL))AND(CASE ((v0.c1) NOT NULL)  WHEN v0.c0 THEN (+ (v0.c2)) WHEN v0.c3 COLLATE NOCASE THEN ((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) END))) ORDER BY (('TRUE')==(0.8860344773406862)) ASC  NULLS LAST, vt2.c0 COLLATE NOCASE DESC  NULLS LAST;
SELECT * FROM v0 CROSS JOIN vt2 ON ((vt2.c1) NOT BETWEEN (((x'')+(v0.c3))) AND (vt2.c1 COLLATE NOCASE)) WHERE ((((v0.c2 IN ())) NOT NULL)) ORDER BY QUOTE((~ (v0.c2)))  NULLS LAST;
SELECT DISTINCT * FROM v0 CROSS JOIN vt2 ON ((vt2.c1) NOT BETWEEN (((x'')+(v0.c3))) AND (vt2.c1 COLLATE NOCASE)) WHERE ((((((v0.c2 IN ())) NOT NULL))AND(CASE ((v0.c1) NOT NULL)  WHEN v0.c0 THEN (+ (v0.c2)) WHEN v0.c3 COLLATE NOCASE THEN ((vt2.c0) NOT BETWEEN (v0.c3) AND (v0.c3)) END))) ORDER BY (('TRUE')==(0.8860344773406862)) ASC  NULLS LAST, vt2.c0 COLLATE NOCASE DESC  NULLS LAST;
SELECT * FROM v0 WHERE ((v0.c1 IN ()) COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE ((v0.c1 IN ()) COLLATE RTRIM) ORDER BY ((CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN NULL THEN v0.c1 END)!=((((v0.c0, v0.c1, v0.c1, v0.c0))<=((v0.c3, v0.c2, v0.c2, v0.c2))))), ((CAST(v0.c3 AS NUMERIC)) NOT BETWEEN (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))) AND ((v0.c3 IN (v0.c2, v0.c3, v0.c0)))) DESC  NULLS FIRST, 0X6a7af38f ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c2 COLLATE BINARY)OR(CASE '-1966523904'  WHEN x'' THEN v0.c1 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)))AND(CAST(0.6758494299923359 AS REAL)))) ORDER BY ((CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN NULL THEN v0.c1 END)<>((((v0.c0, v0.c1, v0.c1, v0.c0))<=((v0.c3, v0.c2, v0.c2, v0.c2))))), ((CAST(v0.c3 AS NUMERIC)) NOT BETWEEN (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))) AND ((v0.c3 IN (v0.c2, v0.c3, v0.c0)))) DESC  NULLS FIRST, 0x6a7af38f ASC  NULLS LAST;
SELECT * FROM v0 WHERE ((v0.c1 IN ()) COLLATE RTRIM);
SELECT DISTINCT * FROM v0 WHERE ((v0.c1 IN ()) COLLATE RTRIM) ORDER BY ((CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN NULL THEN v0.c1 END)!=((((v0.c0, v0.c1, v0.c1, v0.c0))<=((v0.c3, v0.c2, v0.c2, v0.c2))))), ((CAST(v0.c3 AS NUMERIC)) NOT BETWEEN (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))) AND ((v0.c3 IN (v0.c2, v0.c3, v0.c0)))) DESC  NULLS FIRST, 0X6a7af38f ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((v0.c2 COLLATE BINARY)OR(CASE '-1966523904'  WHEN x'' THEN v0.c1 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END)))AND(CAST(0.6758494299923359 AS REAL)))) ORDER BY ((CASE WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c1 WHEN NULL THEN v0.c1 END)<>((((v0.c0, v0.c1, v0.c1, v0.c0))<=((v0.c3, v0.c2, v0.c2, v0.c2))))), ((CAST(v0.c3 AS NUMERIC)) NOT BETWEEN (((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c1))) AND ((v0.c3 IN (v0.c2, v0.c3, v0.c0)))) DESC  NULLS FIRST, 0x6a7af38f ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((CASE 0.552021402109489  WHEN v0.c1 THEN v0.c3 WHEN v0.c3 THEN v0.c2 END)>=(TYPEOF(v0.c0))));
SELECT DISTINCT * FROM v0 WHERE (((((CASE 0.552021402109489  WHEN v0.c1 THEN v0.c3 WHEN v0.c3 THEN v0.c2 END)>=(TYPEOF(v0.c0))))AND(CAST((((v0.c1, NULL))<=((v0.c1, v0.c3))) AS INTEGER)))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((('-941041463'))<(((('-847250232') BETWEEN (v0.c1) AND (v0.c2)))))) LIMIT 0X1;
SELECT ALL * FROM v0 WHERE (((CASE 0.552021402109489  WHEN v0.c1 THEN v0.c3 WHEN v0.c3 THEN v0.c2 END)>=(TYPEOF(v0.c0))));
SELECT DISTINCT * FROM v0 WHERE (((((CASE 0.552021402109489  WHEN v0.c1 THEN v0.c3 WHEN v0.c3 THEN v0.c2 END)>=(TYPEOF(v0.c0))))AND(CAST((((v0.c1, NULL))<=((v0.c1, v0.c3))) AS INTEGER)))) LIMIT 0X1 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((('-941041463'))<(((('-847250232') BETWEEN (v0.c1) AND (v0.c2)))))) LIMIT 0X1;
SELECT MIN(v0.c1) FROM v0, vt2, vt0 WHERE (((v0.c2)==(v0.c0)) COLLATE BINARY);
SELECT DISTINCT MIN(v0.c1) FROM v0, vt2, vt0 WHERE (((v0.c2)==(v0.c0)) COLLATE BINARY) ORDER BY ((((0.06990333418482597)LIKE(vt2.c1))) BETWEEN (NULL) AND (0x7412a12c))  NULLS LAST, (- ((vt2.c1 IN (x'2ae35e')))) ASC INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0, vt2, vt0 WHERE (((((('0.5427552041843192') NOT BETWEEN (vt2.c0) AND (v0.c0)), CASE '1702837040'  WHEN vt0.c0 THEN v0.c3 WHEN vt2.c0 THEN v0.c1 WHEN vt2.c0 THEN v0.c1 ELSE v0.c3 END, ((((v0.c3)OR(v0.c3)))OR(v0.c3)), (+ (vt2.c0)), TRIM(DISTINCT v0.c0)))>=((((v0.c2)IS(vt2.c1)), v0.c0 COLLATE RTRIM, CAST(vt0.c0 AS REAL), ((vt2.c1)==(NULL)), (vt2.c0 IN (vt2.c1)))))) ORDER BY ((((0.06990333418482597)LIKE(vt2.c1))) BETWEEN (NULL) AND (1947377964))  NULLS LAST, (- ((vt2.c1 IN (x'2ae35e')))) ASC;
SELECT MIN(vt2.c1) FROM vt2 WHERE (vt2.c0);
SELECT ALL MIN(vt2.c1) FROM vt2 WHERE (vt2.c0);
SELECT MIN(vt0.c0) FROM vt2, v0 LEFT OUTER JOIN vt0 ON CAST(ABS(DISTINCT vt2.c1) AS TEXT) WHERE ((+ (((v0.c0)>>(v0.c1)))));
SELECT DISTINCT MIN(vt0.c0) FROM vt2, v0 LEFT OUTER JOIN vt0 ON CAST(ABS(DISTINCT vt2.c1) AS TEXT) WHERE ((((+ (((v0.c0)>>(v0.c1)))))AND((+ (LIKELY(DISTINCT vt2.c0)))))) ORDER BY (v0.c2 IN (NULLIF('5K', vt2.c1)))  NULLS LAST, ((((((v0.c0)OR(vt0.c0)))OR(v0.c1)))AND(((v0.c0)>>(v0.c0)))) DESC, v0.c3 COLLATE BINARY  NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM vt0, v0 WHERE ((NOT (CASE WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 END)));
SELECT ALL COUNT(*) FROM vt0, v0 WHERE ((NOT (CASE WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 END))) INTERSECT SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((((vt0.c0) NOT BETWEEN (v0.c0) AND (7.70310855E8))) NOT BETWEEN ((((v0.c1, v0.c3, v0.c0)) NOT BETWEEN ((v0.c3, v0.c0, v0.c1)) AND ((v0.c3, v0.c0, v0.c0)))) AND (((((((((v0.c2)OR(v0.c1)))OR(v0.c1)))OR(v0.c1)))OR(v0.c3)))));
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE (((((((v0.c0)AND(vt2.c1)))AND(v0.c2)))AND(v0.c0)) COLLATE RTRIM);
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE (((((((((v0.c0)AND(vt2.c1)))AND(v0.c2)))AND(v0.c0)) COLLATE RTRIM)AND('Zp蟉-S>&y'))) ORDER BY ((((((((((((((((((vt2.c1)AND(vt2.c1)))OR(NULL)))AND(v0.c0)))AND(v0.c1)))AND(v0.c0)))AND(v0.c0)))OR(CAST(NULL AS REAL))))AND(CASE v0.c2  WHEN 0.5610744026370794 THEN vt0.c0 ELSE NULL END)))OR(((((((((vt2.c1)OR(v0.c0)))OR(v0.c0)))OR(vt0.c0)))OR(vt2.c0)))), ((((vt2.c0)>(vt2.c0))) BETWEEN (((x'40') BETWEEN (']') AND (v0.c3))) AND (((vt2.c0) NOT BETWEEN (v0.c1) AND (NULL)))) DESC  NULLS FIRST;
SELECT * FROM vt2, v0, vt0 WHERE ((((((((v0.c3)AND(v0.c3)))AND(v0.c3))))<=(((~ (v0.c3))))));
SELECT ALL * FROM vt2, v0, vt0 WHERE ((((((((((v0.c3)AND(v0.c3)))AND(v0.c3))))=(((~ (v0.c3))))))AND(x''))) ORDER BY ((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))>((vt2.c1 IN (v0.c3)))) DESC INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c3) NOT BETWEEN (v0.c0) AND (vt2.c0)))<>(CASE WHEN v0.c2 THEN v0.c0 WHEN vt0.c0 THEN v0.c1 WHEN v0.c2 THEN vt2.c1 ELSE v0.c1 END))) ORDER BY ((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))>((vt2.c1 IN (v0.c3)))) DESC;
SELECT * FROM vt2, v0, vt0 WHERE ((((((((v0.c3)AND(v0.c3)))AND(v0.c3))))<=(((~ (v0.c3))))));
SELECT ALL * FROM vt2, v0, vt0 WHERE ((((((((((v0.c3)AND(v0.c3)))AND(v0.c3))))=(((~ (v0.c3))))))AND(x''))) ORDER BY ((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))>((vt2.c1 IN (v0.c3)))) DESC INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (((((v0.c3) NOT BETWEEN (v0.c0) AND (vt2.c0)))<>(CASE WHEN v0.c2 THEN v0.c0 WHEN vt0.c0 THEN v0.c1 WHEN v0.c2 THEN vt2.c1 ELSE v0.c1 END))) ORDER BY ((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c2)))>((vt2.c1 IN (v0.c3)))) DESC;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE ((((+ (vt2.c0)))>=(CAST(vt2.c0 AS REAL)))) ORDER BY ((vt2.c0 COLLATE NOCASE)*(vt2.c0 COLLATE NOCASE))  NULLS LAST, LTRIM(vt2.c1 COLLATE RTRIM, CAST(vt2.c1 AS BLOB)) ASC  NULLS LAST;
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE ((((((+ (vt2.c0)))>=(CAST(vt2.c0 AS REAL))))AND(CAST(CASE WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END AS BLOB)))) ORDER BY ((vt2.c0 COLLATE NOCASE)*(vt2.c0 COLLATE NOCASE))  NULLS LAST, LTRIM(vt2.c1 COLLATE RTRIM, CAST(vt2.c1 AS BLOB)) ASC  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE (0Xffffffff8ac93a00) ORDER BY ((vt0.c0 COLLATE NOCASE) IS TRUE) DESC;
SELECT MIN(v0.c1) FROM v0, vt0 WHERE (((0xffffffff8ac93a00)AND(((((v0.c2)<=(v0.c2)))>=(((v0.c1)>=(v0.c3))))))) ORDER BY ((vt0.c0 COLLATE NOCASE) IS TRUE) DESC;
SELECT ALL MAX(v0.c3) FROM v0 WHERE (((((COALESCE(DISTINCT v0.c0, v0.c3, v0.c3, v0.c1))AND(load_extension(v0.c1, v0.c3))))AND(0.04540268784909274))) ORDER BY (((NULL) ISNULL) IN (0xffffffffcfe60a6c)) DESC  NULLS FIRST;
SELECT MAX(v0.c3) FROM v0 WHERE (((((COALESCE(DISTINCT v0.c0, v0.c3, v0.c3, v0.c1))AND(load_extension(v0.c1, v0.c3))))AND(0.04540268784909274))) ORDER BY (((NULL) ISNULL) IN (0xffffffffcfe60a6c)) DESC  NULLS FIRST INTERSECT SELECT ALL MAX(v0.c3) FROM v0 WHERE (0.1068123538658754) ORDER BY (((NULL) ISNULL) IN (0Xffffffffcfe60a6c)) DESC  NULLS FIRST;
SELECT MIN(v0.c0) FROM v0 WHERE ((((((v0.c3))==((v0.c3))))%((~ (v0.c1)))));
SELECT ALL MIN(v0.c0) FROM v0 WHERE ((((((((v0.c3))==((v0.c3))))%((~ (v0.c1)))))AND(((((((((0xffffffff8dc16993) NOT BETWEEN (v0.c0) AND (v0.c3)))OR(CAST(v0.c1 AS INTEGER))))AND(v0.c1)))OR(v0.c2 COLLATE BINARY))))) LIMIT 1 INTERSECT SELECT MIN(v0.c0) FROM v0 WHERE (((CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c0 THEN v0.c0 END)<>(((v0.c0)>(x'6cbb20'))))) LIMIT 0x1;
SELECT MIN(v0.c3) FROM v0 WHERE (((CASE 0.051022021341896484  WHEN v0.c3 THEN v0.c1 WHEN v0.c3 THEN v0.c3 WHEN v0.c3 THEN v0.c0 END) IS TRUE)) ORDER BY ((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN 0.8864025597621317 END) IS TRUE) DESC  NULLS LAST;
SELECT MIN(v0.c3) FROM v0 WHERE (((CASE 0.051022021341896484  WHEN v0.c3 THEN v0.c1 WHEN v0.c3 THEN v0.c3 WHEN v0.c3 THEN v0.c0 END) IS TRUE)) ORDER BY ((CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN 0.8864025597621317 END) IS TRUE) DESC  NULLS LAST;
SELECT ALL * FROM v0, vt0 WHERE ((v0.c1 IN (x'c003db')));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((v0.c1 IN (x'c003db')))AND(((((((((((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))OR((x'65' IN ()))))OR(((v0.c1) BETWEEN (v0.c1) AND (v0.c1)))))OR((v0.c0 IN (v0.c1)))))OR(CASE WHEN v0.c3 THEN v0.c2 END))))) ORDER BY (~ (v0.c2)) COLLATE RTRIM ASC, ((json(v0.c3))!=(LOWER(v0.c0))) ASC  NULLS FIRST, ((((((((((((((0.6704595400296182)AND(v0.c2)))AND(v0.c1)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c0)))OR(NULL))) BETWEEN ((- (v0.c3))) AND ((('4s4cB^hJ')IS(vt0.c0)))) ASC INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE ((((((((v0.c2 IN ()))AND(CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN x'' ELSE v0.c2 END)))OR(CASE v0.c0  WHEN vt0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)))OR(((v0.c1)!=(NULL))))) ORDER BY (~ (v0.c2)) COLLATE RTRIM ASC, ((json(v0.c3))<>(LOWER(v0.c0))) ASC  NULLS FIRST, ((((((((((((((0.6704595400296182)AND(v0.c2)))AND(v0.c1)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c0)))OR(NULL))) BETWEEN ((- (v0.c3))) AND ((('4s4cB^hJ')IS(vt0.c0)))) ASC;
SELECT ALL * FROM v0, vt0 WHERE ((v0.c1 IN (x'c003db')));
SELECT DISTINCT * FROM v0, vt0 WHERE ((((v0.c1 IN (x'c003db')))AND(((((((((((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1)))OR((x'65' IN ()))))OR(((v0.c1) BETWEEN (v0.c1) AND (v0.c1)))))OR((v0.c0 IN (v0.c1)))))OR(CASE WHEN v0.c3 THEN v0.c2 END))))) ORDER BY (~ (v0.c2)) COLLATE RTRIM ASC, ((json(v0.c3))!=(LOWER(v0.c0))) ASC  NULLS FIRST, ((((((((((((((0.6704595400296182)AND(v0.c2)))AND(v0.c1)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c0)))OR(NULL))) BETWEEN ((- (v0.c3))) AND ((('4s4cB^hJ')IS(vt0.c0)))) ASC INTERSECT SELECT DISTINCT * FROM v0, vt0 WHERE ((((((((v0.c2 IN ()))AND(CASE v0.c1  WHEN v0.c1 THEN v0.c1 WHEN v0.c3 THEN x'' ELSE v0.c2 END)))OR(CASE v0.c0  WHEN vt0.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)))OR(((v0.c1)!=(NULL))))) ORDER BY (~ (v0.c2)) COLLATE RTRIM ASC, ((json(v0.c3))<>(LOWER(v0.c0))) ASC  NULLS FIRST, ((((((((((((((0.6704595400296182)AND(v0.c2)))AND(v0.c1)))OR(v0.c1)))AND(vt0.c0)))OR(v0.c0)))OR(NULL))) BETWEEN ((- (v0.c3))) AND ((('4s4cB^hJ')IS(vt0.c0)))) ASC;
SELECT ALL MAX(v0.c3) FROM vt0 INNER JOIN v0 ON v0.c1 WHERE (CASE ((v0.c3)LIKE(v0.c1))  WHEN ((((((v0.c3)OR(vt0.c0)))OR(v0.c3)))OR(v0.c1)) THEN (('+D3铧CF') IS FALSE) ELSE ((v0.c1)AND(v0.c0)) END);
SELECT DISTINCT MAX(v0.c3) FROM vt0 INNER JOIN v0 ON v0.c1 WHERE (((CASE ((v0.c3)LIKE(v0.c1))  WHEN ((((((v0.c3)OR(vt0.c0)))OR(v0.c3)))OR(v0.c1)) THEN (('+D3铧CF') IS FALSE) ELSE ((v0.c1)AND(v0.c0)) END)AND(CAST(((vt0.c0) BETWEEN (NULL) AND (v0.c0)) AS NUMERIC)))) LIMIT 1 INTERSECT SELECT DISTINCT MAX(v0.c3) FROM vt0 INNER JOIN v0 ON v0.c1 WHERE (x'') LIMIT 1;
SELECT * FROM vt2, v0 WHERE (((((v0.c0)||(v0.c0)))||((+ (v0.c1)))));
SELECT DISTINCT * FROM vt2, v0 NOT INDEXED WHERE (((((((v0.c0)||(v0.c0)))||((+ (v0.c1)))))AND(((v0.c2)%(vt2.c0)) COLLATE RTRIM))) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(v0.c3 AS BLOB)) ISNULL));
SELECT * FROM vt2, v0 WHERE (((((v0.c0)||(v0.c0)))||((+ (v0.c1)))));
SELECT DISTINCT * FROM vt2, v0 NOT INDEXED WHERE (((((((v0.c0)||(v0.c0)))||((+ (v0.c1)))))AND(((v0.c2)%(vt2.c0)) COLLATE RTRIM))) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(v0.c3 AS BLOB)) ISNULL));
SELECT ALL * FROM v0, vt2 WHERE (((vt2.c0)OR(((v0.c0) BETWEEN (vt2.c1) AND (vt2.c0)))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((vt2.c0)OR(((v0.c0) BETWEEN (vt2.c1) AND (vt2.c0)))));
SELECT ALL * FROM v0, vt2 WHERE (((vt2.c0)OR(((v0.c0) BETWEEN (vt2.c1) AND (vt2.c0)))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((vt2.c0)OR(((v0.c0) BETWEEN (vt2.c1) AND (vt2.c0)))));
SELECT MIN(vt0.c0) FROM vt0, v0 WHERE (x'');
SELECT DISTINCT MIN(vt0.c0) FROM vt0, v0 WHERE (x'') INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0, v0 WHERE (CAST(CASE v0.c2  WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN v0.c3 END AS INTEGER));
SELECT ALL * FROM v0, vt0, vt2 WHERE (((vt2.c0 IN ()) IN ()));
SELECT ALL * FROM v0, vt0, vt2 WHERE (((vt2.c0 IN ()) IN ())) LIMIT 4;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((vt2.c0 IN ()) IN ()));
SELECT ALL * FROM v0, vt0, vt2 WHERE (((vt2.c0 IN ()) IN ())) LIMIT 4;
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE ((('334928922') NOT BETWEEN (((((v0.c2)OR(vt0.c0)))AND(v0.c0))) AND ((v0.c0 IN (vt2.c0, v0.c1, vt2.c1, x''))))) ORDER BY ((((vt2.c0)IS NOT(v0.c2))) ISNULL), CASE ((v0.c1) IS FALSE)  WHEN ((vt0.c0)>=(-1229948732)) THEN ((((v0.c3)OR(v0.c0)))AND(vt2.c0)) WHEN ((((((((((((v0.c1)AND(v0.c2)))OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)))AND(vt2.c1)) THEN (v0.c3 IN ()) ELSE (vt2.c0 IN (vt0.c0)) END  NULLS LAST, (((v0.c2 COLLATE BINARY))>((NULL)));
SELECT DISTINCT COUNT(*) FROM v0, vt2, vt0 WHERE ((('334928922') NOT BETWEEN (((((v0.c2)OR(vt0.c0)))AND(v0.c0))) AND ((v0.c0 IN (vt2.c0, v0.c1, vt2.c1, x''))))) ORDER BY ((((vt2.c0)IS NOT(v0.c2))) ISNULL), CASE ((v0.c1) IS FALSE)  WHEN ((vt0.c0)>=(-1229948732)) THEN ((((v0.c3)OR(v0.c0)))AND(vt2.c0)) WHEN ((((((((((((v0.c1)AND(v0.c2)))OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(vt0.c0)))AND(vt2.c1)) THEN (v0.c3 IN ()) ELSE (vt2.c0 IN (vt0.c0)) END  NULLS LAST, (((v0.c2 COLLATE BINARY))>((NULL))) LIMIT 0;
SELECT ALL * FROM vt2, vt0, v0 WHERE (RTRIM(0xffffffffaac44ff0)) ORDER BY ((((vt0.c0)AND(vt2.c1)))AND(v0.c1)) COLLATE BINARY, LTRIM(v0.c3, v0.c3) COLLATE NOCASE DESC  NULLS LAST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((RTRIM(0Xffffffffaac44ff0))AND(CASE WHEN ((v0.c1)<>(v0.c2)) THEN (v0.c2 IN (v0.c2, x'')) WHEN ((v0.c3)/(v0.c3)) THEN NULLIF(DISTINCT v0.c0, v0.c3) END))) ORDER BY ((((((v0.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c0)) COLLATE BINARY  NULLS FIRST, json_array(v0.c2, CASE WHEN v0.c0 THEN 0.39394201630915604 WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN vt0.c0 WHEN vt0.c0 THEN v0.c0 ELSE vt2.c0 END)  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (RTRIM(0xffffffffaac44ff0)) ORDER BY ((((vt0.c0)AND(vt2.c1)))AND(v0.c1)) COLLATE BINARY, LTRIM(v0.c3, v0.c3) COLLATE NOCASE DESC  NULLS LAST;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((RTRIM(0Xffffffffaac44ff0))AND(CASE WHEN ((v0.c1)<>(v0.c2)) THEN (v0.c2 IN (v0.c2, x'')) WHEN ((v0.c3)/(v0.c3)) THEN NULLIF(DISTINCT v0.c0, v0.c3) END))) ORDER BY ((((((v0.c1)AND(vt0.c0)))OR(vt0.c0)))OR(vt2.c0)) COLLATE BINARY  NULLS FIRST, json_array(v0.c2, CASE WHEN v0.c0 THEN 0.39394201630915604 WHEN v0.c2 THEN v0.c3 WHEN v0.c2 THEN vt0.c0 WHEN vt0.c0 THEN v0.c0 ELSE vt2.c0 END)  NULLS FIRST;
SELECT ALL * FROM vt2 INNER JOIN vt0 ON CASE (((vt2.c0, vt0.c0, vt0.c0))<=((vt0.c0, vt2.c1, vt0.c0)))  WHEN (('%M')*(vt2.c0)) THEN ((((vt2.c1)OR(NULL)))AND(vt2.c1)) END WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN NULL ELSE vt2.c0 END) NOT NULL));
SELECT ALL * FROM vt2 INNER JOIN vt0 ON CASE (((vt2.c0, vt0.c0, vt0.c0))<=((vt0.c0, vt2.c1, vt0.c0)))  WHEN (('%M')*(vt2.c0)) THEN ((((vt2.c1)OR(NULL)))AND(vt2.c1)) END WHERE (((((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN NULL ELSE vt2.c0 END) NOT NULL))AND((((((((vt2.c1, vt2.c1)) NOT BETWEEN ((5.76918381E8, vt2.c0)) AND ((vt2.c1, vt2.c1))))OR((- (0.7051132046982554)))))AND(((vt2.c1) NOT NULL)))))) ORDER BY TYPEOF('-1194074638') DESC LIMIT 0x0;
SELECT ALL * FROM vt2 INNER JOIN vt0 ON CASE (((vt2.c0, vt0.c0, vt0.c0))<=((vt0.c0, vt2.c1, vt0.c0)))  WHEN (('%M')*(vt2.c0)) THEN ((((vt2.c1)OR(NULL)))AND(vt2.c1)) END WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN NULL ELSE vt2.c0 END) NOT NULL));
SELECT ALL * FROM vt2 INNER JOIN vt0 ON CASE (((vt2.c0, vt0.c0, vt0.c0))<=((vt0.c0, vt2.c1, vt0.c0)))  WHEN (('%M')*(vt2.c0)) THEN ((((vt2.c1)OR(NULL)))AND(vt2.c1)) END WHERE (((((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN NULL ELSE vt2.c0 END) NOT NULL))AND((((((((vt2.c1, vt2.c1)) NOT BETWEEN ((5.76918381E8, vt2.c0)) AND ((vt2.c1, vt2.c1))))OR((- (0.7051132046982554)))))AND(((vt2.c1) NOT NULL)))))) ORDER BY TYPEOF('-1194074638') DESC LIMIT 0x0;
SELECT ALL * FROM vt0, vt2, v0 NOT INDEXED WHERE ((((((((((v0.c3)OR(v0.c3)))OR(v0.c3)))AND(vt2.c1)))OR(vt0.c0)) IN ((-1290648097 IN (vt0.c0, x''))))) ORDER BY CAST(((v0.c3) NOT BETWEEN (v0.c3) AND (vt0.c0)) AS NUMERIC) DESC;
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((((((v0.c3)OR(v0.c3)))OR(v0.c3)))AND(vt2.c1)))OR(vt0.c0)) IN ((-1290648097 IN (vt0.c0, x''))))) ORDER BY ((((((((CAST(vt0.c0 AS REAL))OR(vt2.c0)))OR(((v0.c0)>=(v0.c0)))))OR(NULL)))AND((v0.c3 IN (vt2.c0, v0.c2)))), (((v0.c2 IN (v0.c0)))>=(((vt2.c1)!=(0.49047296799980644))))  NULLS FIRST;
SELECT ALL * FROM vt0, vt2, v0 NOT INDEXED WHERE ((((((((((v0.c3)OR(v0.c3)))OR(v0.c3)))AND(vt2.c1)))OR(vt0.c0)) IN ((-1290648097 IN (vt0.c0, x''))))) ORDER BY CAST(((v0.c3) NOT BETWEEN (v0.c3) AND (vt0.c0)) AS NUMERIC) DESC;
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((((((v0.c3)OR(v0.c3)))OR(v0.c3)))AND(vt2.c1)))OR(vt0.c0)) IN ((-1290648097 IN (vt0.c0, x''))))) ORDER BY ((((((((CAST(vt0.c0 AS REAL))OR(vt2.c0)))OR(((v0.c0)>=(v0.c0)))))OR(NULL)))AND((v0.c3 IN (vt2.c0, v0.c2)))), (((v0.c2 IN (v0.c0)))>=(((vt2.c1)!=(0.49047296799980644))))  NULLS FIRST;
SELECT ALL * FROM vt0, v0 WHERE ('') ORDER BY (((v0.c1, v0.c0, v0.c0, v0.c1)) BETWEEN ((CASE WHEN v0.c0 THEN 0.9781497036001476 WHEN 0.15407558977379798 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, ((((((((((v0.c2)OR(v0.c2)))OR(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(0X2d691ecb)), (('%쑘Aq')IS(v0.c2)), v0.c3)) AND ((TOTAL_CHANGES(), (((v0.c2, v0.c3)) BETWEEN ((vt0.c0, '-197496816')) AND ((v0.c2, v0.c2))), -1.522911904E9, LIKELIHOOD(v0.c0, vt0.c0)))) ASC  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE ('') ORDER BY (((v0.c1, v0.c0, v0.c0, v0.c1)) BETWEEN ((CASE WHEN v0.c0 THEN 0.9781497036001476 WHEN 0.15407558977379798 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, ((((((((((v0.c2)OR(v0.c2)))OR(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(0X2d691ecb)), (('%쑘Aq')IS(v0.c2)), v0.c3)) AND ((TOTAL_CHANGES(), (((v0.c2, v0.c3)) BETWEEN ((vt0.c0, '-197496816')) AND ((v0.c2, v0.c2))), -1.522911904E9, LIKELIHOOD(v0.c0, vt0.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, v0 WHERE ('') ORDER BY (((v0.c1, v0.c0, v0.c0, v0.c1)) BETWEEN ((CASE WHEN v0.c0 THEN 0.9781497036001476 WHEN 0.15407558977379798 THEN v0.c1 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END, ((((((((((v0.c2)OR(v0.c2)))OR(v0.c1)))OR(v0.c1)))AND(v0.c3)))AND(0X2d691ecb)), (('%쑘Aq')IS(v0.c2)), v0.c3)) AND ((TOTAL_CHANGES(), (((v0.c2, v0.c3)) BETWEEN ((vt0.c0, '-197496816')) AND ((v0.c2, v0.c2))), -1.522911904E9, LIKELIHOOD(v0.c0, vt0.c0)))) ASC  NULLS FIRST;
SELECT MAX(vt0.c0) FROM vt0, v0, vt2 WHERE (((TRIM(vt0.c0, v0.c3)) NOTNULL)) ORDER BY (((ABS(DISTINCT vt2.c0), (~ (v0.c0))))>=((UPPER(v0.c0), CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt0.c0 THEN v0.c1 WHEN vt0.c0 THEN v0.c2 END))) DESC;
SELECT DISTINCT MAX(vt0.c0) FROM vt0, v0, vt2 WHERE (((TRIM(vt0.c0, v0.c3)) NOTNULL)) ORDER BY NULL ASC LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0, v0, vt2 WHERE (vt0.c0) ORDER BY NULL ASC LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((((('.kC ''95')AND((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))))AND(((vt0.c0)<<(vt0.c0)))))OR(((vt0.c0) NOT NULL)))) ORDER BY ((((((((((vt0.c0)AND(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND('-506705295')))AND(((vt0.c0) ISNULL)))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((((((('.kC ''95')AND((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))))AND(((vt0.c0)<<(vt0.c0)))))OR(((vt0.c0) NOT NULL))))AND((LOWER(DISTINCT -7.69760503E8) IN (vt0.c0, (~ (vt0.c0))))))) ORDER BY ((((((((((vt0.c0)AND(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND('-506705295')))AND(((vt0.c0) ISNULL)))  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY ((((((((((vt0.c0)AND(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND('-506705295')))AND(((vt0.c0) ISNULL)))  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((((((('.kC ''95')AND((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))))AND(((vt0.c0)<<(vt0.c0)))))OR(((vt0.c0) NOT NULL)))) ORDER BY ((((((((((vt0.c0)AND(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND('-506705295')))AND(((vt0.c0) ISNULL)))  NULLS LAST;
SELECT * FROM vt0 WHERE ((((((((('.kC ''95')AND((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))))AND(((vt0.c0)<<(vt0.c0)))))OR(((vt0.c0) NOT NULL))))AND((LOWER(DISTINCT -7.69760503E8) IN (vt0.c0, (~ (vt0.c0))))))) ORDER BY ((((((((((vt0.c0)AND(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND('-506705295')))AND(((vt0.c0) ISNULL)))  NULLS LAST INTERSECT SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY ((((((((((vt0.c0)AND(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND('-506705295')))AND(((vt0.c0) ISNULL)))  NULLS LAST;
SELECT COUNT(*) FROM v0 LEFT OUTER JOIN vt0 ON ((- ('673421955')) IN ()) INNER JOIN vt2 ON (((v0.c0, v0.c2))>((vt2.c1, vt2.c1))) COLLATE NOCASE COLLATE RTRIM WHERE ((((~ (v0.c0)))=(SQLITE_VERSION()))) ORDER BY (((0Xe5fde88) NOTNULL) IN (NULL))  NULLS LAST;
SELECT COUNT(*) FROM v0 INNER JOIN vt0 ON ((- ('673421955')) IN ()) INNER JOIN vt2 ON (((v0.c0, v0.c2))>((vt2.c1, vt2.c1))) COLLATE NOCASE COLLATE RTRIM WHERE ((((~ (v0.c0)))==(SQLITE_VERSION()))) ORDER BY (((0xe5fde88) NOTNULL) IN (NULL))  NULLS LAST INTERSECT SELECT COUNT(*) FROM v0 INNER JOIN vt0 ON ((- ('673421955')) IN ()) INNER JOIN vt2 ON (((v0.c0, v0.c2))>((vt2.c1, vt2.c1))) COLLATE NOCASE COLLATE RTRIM WHERE (((((0.09468102521437582, v0.c3)) BETWEEN ((v0.c2, vt0.c0)) AND ((v0.c3, v0.c0))) IN (CAST(x'88' AS NUMERIC)))) ORDER BY (((0Xe5fde88) NOTNULL) IN (NULL))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((vt0.c0, vt0.c0))==((vt0.c0, vt0.c0))) COLLATE RTRIM) ORDER BY (((vt0.c0)|(vt0.c0)) IN ((vt0.c0 IN ()), ((vt0.c0)LIKE(0.14004329480924937))));
SELECT COUNT(*) FROM vt0 WHERE ((((vt0.c0, vt0.c0))==((vt0.c0, vt0.c0))) COLLATE RTRIM) ORDER BY (((vt0.c0)|(vt0.c0)) IN ((vt0.c0 IN ()), ((vt0.c0)LIKE(0.14004329480924937)))) LIMIT 1 INTERSECT SELECT COUNT(*) FROM vt0 WHERE (((CAST(1.947377964E9 AS BLOB)) NOTNULL)) ORDER BY (((vt0.c0)|(vt0.c0)) IN ((vt0.c0 IN ()), ((vt0.c0)LIKE(0.14004329480924937)))) LIMIT 0x1;
SELECT ALL * FROM vt2 WHERE (UPPER(DISTINCT vt2.c0));
SELECT ALL * FROM vt2 WHERE (((UPPER(DISTINCT vt2.c0))AND(((((((vt2.c1))>((vt2.c1)))))>((((vt2.c1) NOT BETWEEN (0.3864612499389497) AND (x'')))))))) ORDER BY (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 END IN ((- (vt2.c1))))  NULLS LAST, ((COALESCE(vt2.c1, vt2.c1)) ISNULL) DESC LIMIT 2;
SELECT ALL * FROM vt2 WHERE (UPPER(DISTINCT vt2.c0));
SELECT ALL * FROM vt2 WHERE (((UPPER(DISTINCT vt2.c0))AND(((((((vt2.c1))>((vt2.c1)))))>((((vt2.c1) NOT BETWEEN (0.3864612499389497) AND (x'')))))))) ORDER BY (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c1 END IN ((- (vt2.c1))))  NULLS LAST, ((COALESCE(vt2.c1, vt2.c1)) ISNULL) DESC LIMIT 2;
SELECT * FROM vt2 NATURAL JOIN v0 WHERE ((((v0.c1)IS(vt2.c0)) IN (v0.c3))) ORDER BY (~ (LOWER(vt2.c1))) ASC, (NOT (v0.c1)) COLLATE NOCASE DESC;
SELECT * FROM vt2 NATURAL JOIN v0 WHERE ((((((v0.c1)IS(vt2.c0)) IN (v0.c3)))AND(CASE WHEN CASE v0.c2  WHEN v0.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 END THEN (((vt2.c0))==((vt2.c0))) WHEN '*hoL㮊쀻鯥롫' THEN ((vt2.c0) NOT BETWEEN (v0.c0) AND (v0.c1)) WHEN (vt2.c1 IN (v0.c2, v0.c3)) THEN (((v0.c0, v0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((v0.c3, vt2.c1))) END))) ORDER BY (~ (LOWER(vt2.c1))) ASC, (NOT (v0.c1)) COLLATE NOCASE DESC;
SELECT * FROM vt2 NATURAL JOIN v0 WHERE ((((v0.c1)IS(vt2.c0)) IN (v0.c3))) ORDER BY (~ (LOWER(vt2.c1))) ASC, (NOT (v0.c1)) COLLATE NOCASE DESC;
SELECT * FROM vt2 NATURAL JOIN v0 WHERE ((((((v0.c1)IS(vt2.c0)) IN (v0.c3)))AND(CASE WHEN CASE v0.c2  WHEN v0.c1 THEN v0.c3 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 END THEN (((vt2.c0))==((vt2.c0))) WHEN '*hoL㮊쀻鯥롫' THEN ((vt2.c0) NOT BETWEEN (v0.c0) AND (v0.c1)) WHEN (vt2.c1 IN (v0.c2, v0.c3)) THEN (((v0.c0, v0.c0)) BETWEEN ((vt2.c1, vt2.c0)) AND ((v0.c3, vt2.c1))) END))) ORDER BY (~ (LOWER(vt2.c1))) ASC, (NOT (v0.c1)) COLLATE NOCASE DESC;
SELECT ALL MIN(v0.c1) FROM vt0, vt2, v0 WHERE (((((((((((v0.c0)AND(v0.c2)))OR(vt0.c0)))OR((((v0.c3))>((vt0.c0))))))OR(SQLITE_SOURCE_ID())))OR(((v0.c3)<=('㝧')))));
SELECT DISTINCT MIN(v0.c1) FROM vt0, vt2, v0 WHERE (((((((((((((v0.c0)AND(v0.c2)))OR(vt0.c0)))OR((((v0.c3))>((vt0.c0))))))OR(SQLITE_SOURCE_ID())))OR(((v0.c3)<=('㝧')))))AND(((CAST(v0.c1 AS NUMERIC))+(UPPER(DISTINCT vt0.c0)))))) LIMIT 0x0;
SELECT MIN(v0.c2) FROM v0 WHERE ((((v0.c2, v0.c3, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c0)||(v0.c2)), load_extension(v0.c3), ((v0.c3)IS NOT(v0.c1)), (((v0.c0, v0.c3, v0.c3, v0.c1)) NOT BETWEEN ((v0.c2, 0.17421736503576368, v0.c2, v0.c3)) AND ((v0.c0, v0.c1, '-1872550819', x''))))) AND ((((v0.c1) ISNULL), v0.c3, CAST(v0.c3 AS BLOB), CASE WHEN v0.c3 THEN v0.c0 END)))) ORDER BY (((v0.c3, v0.c0, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS REAL), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END, ((((((0.7420798741114776)AND(v0.c3)))OR(v0.c1)))AND(v0.c2)))) AND ((LOWER(v0.c3), (- (v0.c1)), ((v0.c3)-(v0.c0))))) DESC  NULLS FIRST, ABS(DISTINCT CASE v0.c0  WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c1 END) DESC  NULLS FIRST, ((v0.c0 IN (v0.c0)) IN (((((((v0.c0)OR(v0.c0)))AND(v0.c0)))OR('3o')))) ASC  NULLS LAST;
SELECT ALL MIN(v0.c2) FROM v0 WHERE ((((((v0.c2, v0.c3, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c0)||(v0.c2)), load_extension(v0.c3), ((v0.c3)IS NOT(v0.c1)), (((v0.c0, v0.c3, v0.c3, v0.c1)) NOT BETWEEN ((v0.c2, 0.17421736503576368, v0.c2, v0.c3)) AND ((v0.c0, v0.c1, '-1872550819', x''))))) AND ((((v0.c1) ISNULL), v0.c3, CAST(v0.c3 AS BLOB), CASE WHEN v0.c3 THEN v0.c0 END))))AND((((- (v0.c0))) NOT NULL)))) ORDER BY (((v0.c3, v0.c0, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS REAL), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END, ((((((0.7420798741114776)AND(v0.c3)))OR(v0.c1)))AND(v0.c2)))) AND ((LOWER(v0.c3), (- (v0.c1)), ((v0.c3)-(v0.c0))))) DESC  NULLS FIRST, ABS(DISTINCT CASE v0.c0  WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c1 END) DESC  NULLS FIRST, ((v0.c0 IN (v0.c0)) IN (((((((v0.c0)OR(v0.c0)))AND(v0.c0)))OR('3o')))) ASC  NULLS LAST LIMIT 0X0 INTERSECT SELECT MIN(v0.c2) FROM v0 WHERE (((CASE WHEN x'1c' THEN v0.c0 ELSE v0.c1 END) BETWEEN (((((((((((v0.c2)AND(v0.c2)))AND(v0.c0)))OR(x'67cbf606')))AND('-1439875336')))OR(v0.c0))) AND ((~ (v0.c3))))) ORDER BY (((v0.c3, v0.c0, v0.c0)) NOT BETWEEN ((CAST(v0.c1 AS REAL), CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END, ((((((0.7420798741114776)AND(v0.c3)))OR(v0.c1)))AND(v0.c2)))) AND ((LOWER(v0.c3), (- (v0.c1)), ((v0.c3)-(v0.c0))))) DESC  NULLS FIRST, ABS(DISTINCT CASE v0.c0  WHEN v0.c1 THEN v0.c3 WHEN v0.c0 THEN v0.c1 END) DESC  NULLS FIRST, ((v0.c0 IN (v0.c0)) IN (((((((v0.c0)OR(v0.c0)))AND(v0.c0)))OR('3o')))) ASC  NULLS LAST LIMIT 0;
SELECT * FROM v0, vt2, vt0 WHERE (CAST('4]\t' AS INTEGER));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (CAST('4]\t' AS INTEGER));
SELECT * FROM v0, vt2, vt0 WHERE (CAST('4]\t' AS INTEGER));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (CAST('4]\t' AS INTEGER));
SELECT * FROM vt2, v0, vt0 WHERE ((((vt2.c1 IN ())) BETWEEN ('') AND (((v0.c0)>(vt0.c0)))));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((vt2.c1 IN ())) BETWEEN ('') AND (((v0.c0)>(vt0.c0))))) ORDER BY ((v0.c2)%((((vt2.c1, vt0.c0, v0.c3)) NOT BETWEEN ((0x2f67ca62, 'ឱ
%趧4Lj0f', v0.c0)) AND (('', vt2.c1, v0.c2))))), CAST(((v0.c3) NOT BETWEEN (vt2.c0) AND (vt0.c0)) AS TEXT) LIMIT 1;
SELECT * FROM vt2, v0, vt0 WHERE ((((vt2.c1 IN ())) BETWEEN ('') AND (((v0.c0)>(vt0.c0)))));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((vt2.c1 IN ())) BETWEEN ('') AND (((v0.c0)>(vt0.c0))))) ORDER BY ((v0.c2)%((((vt2.c1, vt0.c0, v0.c3)) NOT BETWEEN ((0x2f67ca62, 'ឱ
%趧4Lj0f', v0.c0)) AND (('', vt2.c1, v0.c2))))), CAST(((v0.c3) NOT BETWEEN (vt2.c0) AND (vt0.c0)) AS TEXT) LIMIT 1;
SELECT ALL * FROM vt2 WHERE (((((vt2.c0)+(vt2.c0)))>>(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY CASE (((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c1)))  WHEN (('') ISNULL) THEN ((((((vt2.c0)AND(vt2.c1)))OR('890457025')))OR(x'42')) WHEN ((vt2.c0)<<(vt2.c1)) THEN (vt2.c0 IN (vt2.c0)) WHEN (((x'19d3'))!=((vt2.c0))) THEN (((vt2.c1)) BETWEEN ((vt2.c0)) AND ((NULL))) WHEN vt2.c0 THEN CAST(vt2.c1 AS TEXT) WHEN (NOT (vt2.c1)) THEN ABS(DISTINCT vt2.c0) END, CASE WHEN ((vt2.c0)>=(vt2.c1)) THEN CAST(vt2.c1 AS TEXT) WHEN vt2.c0 THEN ((vt2.c1)IS(vt2.c0)) ELSE CAST(vt2.c1 AS REAL) END DESC;
SELECT * FROM vt2 WHERE (((((vt2.c0)+(vt2.c0)))>>(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL) DESC, (((((((~ (vt2.c0)))OR((~ (NULL)))))AND(((0.6645090830112746) NOT NULL))))OR((NOT (vt2.c0)))) LIMIT 0 INTERSECT SELECT * FROM vt2 WHERE (vt2.c0) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL) DESC, (((((((~ (vt2.c0)))OR((~ (NULL)))))AND(((0.6645090830112746) NOT NULL))))OR((NOT (vt2.c0)))) LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE (((((vt2.c0)+(vt2.c0)))>>(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY CASE (((vt2.c1, vt2.c1)) NOT BETWEEN ((vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c1)))  WHEN (('') ISNULL) THEN ((((((vt2.c0)AND(vt2.c1)))OR('890457025')))OR(x'42')) WHEN ((vt2.c0)<<(vt2.c1)) THEN (vt2.c0 IN (vt2.c0)) WHEN (((x'19d3'))!=((vt2.c0))) THEN (((vt2.c1)) BETWEEN ((vt2.c0)) AND ((NULL))) WHEN vt2.c0 THEN CAST(vt2.c1 AS TEXT) WHEN (NOT (vt2.c1)) THEN ABS(DISTINCT vt2.c0) END, CASE WHEN ((vt2.c0)>=(vt2.c1)) THEN CAST(vt2.c1 AS TEXT) WHEN vt2.c0 THEN ((vt2.c1)IS(vt2.c0)) ELSE CAST(vt2.c1 AS REAL) END DESC;
SELECT * FROM vt2 WHERE (((((vt2.c0)+(vt2.c0)))>>(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL) DESC, (((((((~ (vt2.c0)))OR((~ (NULL)))))AND(((0.6645090830112746) NOT NULL))))OR((NOT (vt2.c0)))) LIMIT 0 INTERSECT SELECT * FROM vt2 WHERE (vt2.c0) ORDER BY ((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL) DESC, (((((((~ (vt2.c0)))OR((~ (NULL)))))AND(((0.6645090830112746) NOT NULL))))OR((NOT (vt2.c0)))) LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0, vt2 LEFT OUTER JOIN v0 ON CASE ((vt0.c0) NOT BETWEEN (vt2.c0) AND (v0.c3))  WHEN (v0.c3 IN (vt2.c1)) THEN (vt2.c0 IN ()) WHEN highlight(vt0.c0, v0.c0, v0.c0, vt2.c1) THEN ((((((vt0.c0)OR(vt2.c1)))OR(v0.c3)))OR(vt2.c1)) ELSE 0.07302781119217672 END WHERE (((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1))) NOT NULL)) ORDER BY (((((((((((+ (v0.c3)))OR(((v0.c1) BETWEEN (vt2.c1) AND (vt2.c1)))))AND(((vt0.c0)-(v0.c2)))))AND((((v0.c2, v0.c3))>=((v0.c3, v0.c2))))))AND(CASE WHEN v0.c3 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c0 END)))OR((((vt0.c0, vt2.c1)) BETWEEN ((v0.c2, v0.c1)) AND ((v0.c2, v0.c3)))));
SELECT ALL COUNT(*) FROM vt0, vt2 INNER JOIN v0 ON CASE ((vt0.c0) NOT BETWEEN (vt2.c0) AND (v0.c3))  WHEN (v0.c3 IN (vt2.c1)) THEN (vt2.c0 IN ()) WHEN highlight(vt0.c0, v0.c0, v0.c0, vt2.c1) THEN ((((((vt0.c0)OR(vt2.c1)))OR(v0.c3)))OR(vt2.c1)) ELSE 0.07302781119217672 END WHERE (((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1))) NOT NULL)) ORDER BY (+ (CAST(vt2.c1 AS NUMERIC))) ASC LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt0, vt2 INNER JOIN v0 ON CASE ((vt0.c0) NOT BETWEEN (vt2.c0) AND (v0.c3))  WHEN (v0.c3 IN (vt2.c1)) THEN (vt2.c0 IN ()) WHEN highlight(vt0.c0, v0.c0, v0.c0, vt2.c1) THEN ((((((vt0.c0)OR(vt2.c1)))OR(v0.c3)))OR(vt2.c1)) ELSE 0.07302781119217672 END WHERE ((((NULL)) BETWEEN (((((v0.c2)) NOT BETWEEN ((NULL)) AND ((v0.c0))))) AND ((CAST(v0.c0 AS INTEGER))))) ORDER BY (+ (CAST(vt2.c1 AS NUMERIC))) ASC LIMIT 0;
SELECT ALL * FROM vt0, vt2 WHERE ((((vt0.c0)IS NOT(vt2.c0)) IN ((((vt2.c1, vt2.c0))<((vt2.c0, vt0.c0)))))) ORDER BY ((vt2.c1)GLOB('1383223210'))  NULLS FIRST, CAST(CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c1 END AS NUMERIC)  NULLS FIRST;
SELECT DISTINCT * FROM vt0, vt2 WHERE ((((((vt0.c0)IS NOT(vt2.c0)) IN ((((vt2.c1, vt2.c0))<((vt2.c0, vt0.c0))))))AND((- (((vt0.c0) ISNULL)))))) ORDER BY CASE WHEN ((vt2.c1) BETWEEN ('2138090781') AND (NULL)) THEN ((vt2.c1) IS FALSE) ELSE ((vt2.c1)*(0.2622840820158293)) END, '', CAST(-4.33181884E8 AS NUMERIC) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((vt0.c0 COLLATE RTRIM)/(NULL))) ORDER BY CASE WHEN ((vt2.c1) BETWEEN ('2138090781') AND (NULL)) THEN ((vt2.c1) IS FALSE) ELSE ((vt2.c1)*(0.2622840820158293)) END, '', CAST(-4.33181884E8 AS NUMERIC) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE ((((vt0.c0)IS NOT(vt2.c0)) IN ((((vt2.c1, vt2.c0))<((vt2.c0, vt0.c0)))))) ORDER BY ((vt2.c1)GLOB('1383223210'))  NULLS FIRST, CAST(CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 ELSE vt2.c1 END AS NUMERIC)  NULLS FIRST;
SELECT DISTINCT * FROM vt0, vt2 WHERE ((((((vt0.c0)IS NOT(vt2.c0)) IN ((((vt2.c1, vt2.c0))<((vt2.c0, vt0.c0))))))AND((- (((vt0.c0) ISNULL)))))) ORDER BY CASE WHEN ((vt2.c1) BETWEEN ('2138090781') AND (NULL)) THEN ((vt2.c1) IS FALSE) ELSE ((vt2.c1)*(0.2622840820158293)) END, '', CAST(-4.33181884E8 AS NUMERIC) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((vt0.c0 COLLATE RTRIM)/(NULL))) ORDER BY CASE WHEN ((vt2.c1) BETWEEN ('2138090781') AND (NULL)) THEN ((vt2.c1) IS FALSE) ELSE ((vt2.c1)*(0.2622840820158293)) END, '', CAST(-4.33181884E8 AS NUMERIC) ASC  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM vt2, vt0, v0 WHERE (((((v0.c2) ISNULL))>(((vt2.c0) NOT NULL)))) ORDER BY ((429083119)IS NOT(1215125029)) DESC, (~ (v0.c2 COLLATE RTRIM)) ASC  NULLS LAST;
SELECT DISTINCT MIN(v0.c0) FROM vt2, vt0, v0 WHERE (((((v0.c2) ISNULL))>(((vt2.c0) NOT NULL)))) ORDER BY ((v0.c0)OR(v0.c1)) COLLATE NOCASE ASC LIMIT 0;
SELECT * FROM vt2 NOT INDEXED, v0, vt0 WHERE ((((((v0.c3)IS(vt2.c1)), (+ (vt2.c1)), (((v0.c1, v0.c2, vt2.c0))<=((v0.c2, vt2.c0, v0.c1)))))>=((((((v0.c2)OR(v0.c0)))AND(v0.c0)), ((((v0.c1)OR(v0.c3)))OR(vt2.c1)), (((0.7354794367041715, vt2.c0)) BETWEEN ((vt2.c1, v0.c0)) AND ((v0.c3, vt2.c1)))))));
SELECT ALL * FROM vt2, v0, vt0 WHERE ((((((v0.c3)IS(vt2.c1)), (+ (vt2.c1)), (((v0.c1, v0.c2, vt2.c0))<=((v0.c2, vt2.c0, v0.c1)))))>((((((v0.c2)OR(v0.c0)))AND(v0.c0)), ((((v0.c1)OR(v0.c3)))OR(vt2.c1)), (((0.7354794367041715, vt2.c0)) BETWEEN ((vt2.c1, v0.c0)) AND ((v0.c3, vt2.c1))))))) LIMIT 0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (((v0.c0)&(0Xffffffffb8147879)) COLLATE NOCASE) LIMIT 0x0;
SELECT * FROM vt2 NOT INDEXED, v0, vt0 WHERE ((((((v0.c3)IS(vt2.c1)), (+ (vt2.c1)), (((v0.c1, v0.c2, vt2.c0))<=((v0.c2, vt2.c0, v0.c1)))))>=((((((v0.c2)OR(v0.c0)))AND(v0.c0)), ((((v0.c1)OR(v0.c3)))OR(vt2.c1)), (((0.7354794367041715, vt2.c0)) BETWEEN ((vt2.c1, v0.c0)) AND ((v0.c3, vt2.c1)))))));
SELECT ALL * FROM vt2, v0, vt0 WHERE ((((((v0.c3)IS(vt2.c1)), (+ (vt2.c1)), (((v0.c1, v0.c2, vt2.c0))<=((v0.c2, vt2.c0, v0.c1)))))>((((((v0.c2)OR(v0.c0)))AND(v0.c0)), ((((v0.c1)OR(v0.c3)))OR(vt2.c1)), (((0.7354794367041715, vt2.c0)) BETWEEN ((vt2.c1, v0.c0)) AND ((v0.c3, vt2.c1))))))) LIMIT 0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (((v0.c0)&(0Xffffffffb8147879)) COLLATE NOCASE) LIMIT 0x0;
SELECT ALL * FROM v0 WHERE ((((v0.c0, v0.c1)) NOT BETWEEN ((UNLIKELY(v0.c2), (+ (v0.c0)))) AND ((((v0.c0) IS FALSE), ((v0.c3)%(v0.c3))))));
SELECT DISTINCT * FROM v0 WHERE ((((v0.c0, v0.c1)) NOT BETWEEN ((UNLIKELY(v0.c2), (+ (v0.c0)))) AND ((((v0.c0) IS FALSE), ((v0.c3)%(v0.c3)))))) LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(UNICODE(v0.c3) AS BLOB)) LIMIT 4;
SELECT ALL * FROM v0 WHERE ((((v0.c0, v0.c1)) NOT BETWEEN ((UNLIKELY(v0.c2), (+ (v0.c0)))) AND ((((v0.c0) IS FALSE), ((v0.c3)%(v0.c3))))));
SELECT DISTINCT * FROM v0 WHERE ((((v0.c0, v0.c1)) NOT BETWEEN ((UNLIKELY(v0.c2), (+ (v0.c0)))) AND ((((v0.c0) IS FALSE), ((v0.c3)%(v0.c3)))))) LIMIT 0x4 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(UNICODE(v0.c3) AS BLOB)) LIMIT 4;
SELECT * FROM vt2 WHERE ((((((vt2.c1) NOT NULL), vt2.c1, CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END, (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0)))))<=(((((vt2.c1, vt2.c0))!=((vt2.c0, vt2.c0))), ((-7.34232506E8) BETWEEN (vt2.c1) AND ('-386582235')), ((vt2.c0)-(vt2.c0)), (NOT (NULL)))))) ORDER BY 0.1969649221836467 COLLATE RTRIM ASC  NULLS FIRST, (((- (vt2.c1))) NOT BETWEEN ((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1)))) AND (vt2.c1 COLLATE RTRIM)) DESC;
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c1) NOT NULL), vt2.c1, CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END, (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0)))))==(((((vt2.c1, vt2.c0))<>((vt2.c0, vt2.c0))), ((-7.34232506E8) BETWEEN (vt2.c1) AND ('-386582235')), ((vt2.c0)-(vt2.c0)), (NOT (NULL)))))) ORDER BY ((((((((((LIKE('p', vt2.c1, '-'))OR((vt2.c1 IN ()))))OR(vt2.c1 COLLATE BINARY)))OR(((x'b8') NOT NULL))))AND(vt2.c0)))AND(CAST(vt2.c0 AS NUMERIC))) LIMIT 0;
SELECT * FROM vt2 WHERE ((((((vt2.c1) NOT NULL), vt2.c1, CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END, (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0)))))<=(((((vt2.c1, vt2.c0))!=((vt2.c0, vt2.c0))), ((-7.34232506E8) BETWEEN (vt2.c1) AND ('-386582235')), ((vt2.c0)-(vt2.c0)), (NOT (NULL)))))) ORDER BY 0.1969649221836467 COLLATE RTRIM ASC  NULLS FIRST, (((- (vt2.c1))) NOT BETWEEN ((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt2.c1)))) AND (vt2.c1 COLLATE RTRIM)) DESC;
SELECT DISTINCT * FROM vt2 WHERE ((((((vt2.c1) NOT NULL), vt2.c1, CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END, (((vt2.c0, vt2.c1, vt2.c0)) BETWEEN ((vt2.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0)))))==(((((vt2.c1, vt2.c0))<>((vt2.c0, vt2.c0))), ((-7.34232506E8) BETWEEN (vt2.c1) AND ('-386582235')), ((vt2.c0)-(vt2.c0)), (NOT (NULL)))))) ORDER BY ((((((((((LIKE('p', vt2.c1, '-'))OR((vt2.c1 IN ()))))OR(vt2.c1 COLLATE BINARY)))OR(((x'b8') NOT NULL))))AND(vt2.c0)))AND(CAST(vt2.c0 AS NUMERIC))) LIMIT 0;
SELECT * FROM vt0 INNER JOIN vt2 ON ((((((((((v0.c3)OR(v0.c2)))AND(NULL)))AND('-654655691')))OR(vt2.c0))) IS FALSE) NATURAL JOIN v0 WHERE (x'88') ORDER BY (((v0.c1, v0.c3, vt0.c0)) BETWEEN ((CAST(vt0.c0 AS INTEGER), CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN '' END, v0.c3)) AND (('#e2J|塆f' COLLATE BINARY, v0.c3, vt0.c0))) ASC;
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON ((((((((((v0.c3)OR(v0.c2)))AND(NULL)))AND('-654655691')))OR(vt2.c0))) IS FALSE) NATURAL JOIN v0 WHERE (x'88') ORDER BY ((ROUND(vt2.c1, '-386582235')) BETWEEN (((NULL) NOT BETWEEN (v0.c1) AND (v0.c3))) AND ((+ (vt2.c1)))) ASC  NULLS FIRST LIMIT 0X2;
SELECT * FROM vt0 INNER JOIN vt2 ON ((((((((((v0.c3)OR(v0.c2)))AND(NULL)))AND('-654655691')))OR(vt2.c0))) IS FALSE) NATURAL JOIN v0 WHERE (x'88') ORDER BY (((v0.c1, v0.c3, vt0.c0)) BETWEEN ((CAST(vt0.c0 AS INTEGER), CASE WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN '' END, v0.c3)) AND (('#e2J|塆f' COLLATE BINARY, v0.c3, vt0.c0))) ASC;
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON ((((((((((v0.c3)OR(v0.c2)))AND(NULL)))AND('-654655691')))OR(vt2.c0))) IS FALSE) NATURAL JOIN v0 WHERE (x'88') ORDER BY ((ROUND(vt2.c1, '-386582235')) BETWEEN (((NULL) NOT BETWEEN (v0.c1) AND (v0.c3))) AND ((+ (vt2.c1)))) ASC  NULLS FIRST LIMIT 0X2;
SELECT ALL MAX(v0.c3) FROM v0, vt2 WHERE (v0.c3) ORDER BY ((CASE vt2.c0  WHEN v0.c2 THEN -6.35459419E8 WHEN v0.c3 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN v0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c0 ELSE x'5e32' END)+('-277115074')), CAST(vt2.c1 AS REAL) COLLATE BINARY  NULLS LAST;
SELECT MAX(v0.c3) FROM v0, vt2 WHERE (v0.c3) ORDER BY ((CASE vt2.c0  WHEN v0.c2 THEN -6.35459419E8 WHEN v0.c3 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN v0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c0 ELSE x'5e32' END)+('-277115074')), CAST(vt2.c1 AS REAL) COLLATE BINARY  NULLS LAST INTERSECT SELECT MAX(v0.c3) FROM v0, vt2 WHERE (((v0.c2)AND(v0.c1)) COLLATE NOCASE) ORDER BY ((CASE vt2.c0  WHEN v0.c2 THEN -6.35459419E8 WHEN v0.c3 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN v0.c0 THEN vt2.c0 WHEN vt2.c1 THEN v0.c0 ELSE x'5e32' END)+('-277115074')), CAST(vt2.c1 AS REAL) COLLATE BINARY  NULLS LAST;
SELECT ALL MAX(v0.c1) FROM v0, vt0, vt2 WHERE ((((v0.c0)<=(v0.c0)) IN (CASE v0.c2  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt0.c0 WHEN v0.c3 THEN v0.c1 END)));
SELECT DISTINCT MAX(v0.c1) FROM v0, vt0, vt2 WHERE ((((((v0.c0)<=(v0.c0)) IN (CASE v0.c2  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt0.c0 WHEN v0.c3 THEN v0.c1 END)))AND((((vt0.c0, NULL, vt0.c0, v0.c1))<=((vt0.c0, 0.4284493645082942, 'Mᗬ8E%u5C', v0.c0))) COLLATE BINARY COLLATE BINARY))) ORDER BY (((v0.c0, v0.c0, vt0.c0, v0.c1, vt2.c1)) BETWEEN ((((((NULL)OR(v0.c0)))AND(v0.c2)), (((0.8621271405508802, v0.c1))<=((vt2.c1, v0.c0))), NULL, ((((((vt2.c0)OR(vt0.c0)))AND(v0.c3)))OR(v0.c0)), CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN 0Xffffffff9ab3ae2d WHEN vt2.c0 THEN v0.c3 WHEN v0.c3 THEN vt2.c0 WHEN vt2.c1 THEN v0.c1 ELSE vt2.c1 END)) AND ((0X74a96d5, v0.c0, DATETIME(v0.c3, v0.c1, vt0.c0, vt2.c0, vt2.c0), CASE WHEN v0.c2 THEN v0.c2 WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c1 ELSE vt0.c0 END, ((v0.c1) NOT NULL)))), ((('536560865', v0.c1)) BETWEEN (((((v0.c3, v0.c1))!=((v0.c3, vt2.c1))), ((vt0.c0)<(v0.c0)))) AND ((x'8d77', CAST(v0.c0 AS BLOB))))  NULLS FIRST;
SELECT ALL * FROM vt2, v0 WHERE ((((((((v0.c2)AND(v0.c1)))OR(vt2.c1)), vt2.c0 COLLATE NOCASE))<(((((('-243193612')AND(vt2.c1)))AND(v0.c1)), (+ (v0.c1))))));
SELECT ALL * FROM vt2, v0 WHERE ((((((((((v0.c2)AND(v0.c1)))OR(vt2.c1)), vt2.c0 COLLATE NOCASE))<(((((('-243193612')AND(vt2.c1)))AND(v0.c1)), (+ (v0.c1))))))AND(((v0.c0 COLLATE NOCASE) NOT BETWEEN ((v0.c2 IN (vt2.c1))) AND ((((v0.c2, v0.c1))<>((x'dc', vt2.c1))))))));
SELECT ALL * FROM vt2, v0 WHERE ((((((((v0.c2)AND(v0.c1)))OR(vt2.c1)), vt2.c0 COLLATE NOCASE))<(((((('-243193612')AND(vt2.c1)))AND(v0.c1)), (+ (v0.c1))))));
SELECT ALL * FROM vt2, v0 WHERE ((((((((((v0.c2)AND(v0.c1)))OR(vt2.c1)), vt2.c0 COLLATE NOCASE))<(((((('-243193612')AND(vt2.c1)))AND(v0.c1)), (+ (v0.c1))))))AND(((v0.c0 COLLATE NOCASE) NOT BETWEEN ((v0.c2 IN (vt2.c1))) AND ((((v0.c2, v0.c1))<>((x'dc', vt2.c1))))))));
SELECT ALL COUNT(*) FROM vt0 WHERE ((+ ((((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))))));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((+ ((((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0))))))AND(((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))/((vt0.c0 IN (vt0.c0))))))) ORDER BY (((vt0.c0))>((vt0.c0))) COLLATE BINARY  NULLS LAST, ((('s+9XQ')) NOT BETWEEN (((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((x'c0fb1c', 0.708858592151944, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0))))) AND ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0))))) LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))), UPPER(DISTINCT vt0.c0), (~ (vt0.c0)), vt0.c0))<((CAST(vt0.c0 AS BLOB), ((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)), ((vt0.c0) NOT BETWEEN (vt0.c0) AND (0.36482614520355994)), ((vt0.c0)+(vt0.c0)))))) ORDER BY (((vt0.c0))>((vt0.c0))) COLLATE BINARY  NULLS LAST, ((('s+9XQ')) NOT BETWEEN (((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((x'c0fb1c', 0.708858592151944, vt0.c0)) AND ((vt0.c0, vt0.c0, vt0.c0))))) AND ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0))))) LIMIT 0;
SELECT MAX(v0.c2) FROM vt0, vt2, v0 WHERE (((v0.c2)<(v0.c2)));
SELECT DISTINCT MAX(v0.c2) FROM vt0, vt2, v0 WHERE (((((v0.c2)<(v0.c2)))AND(vt0.c0))) ORDER BY CAST(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 ELSE 0.7592612771838159 END AS NUMERIC) DESC, CAST(((v0.c3)&(x'4d68')) AS INTEGER) ASC LIMIT 0X0 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM vt0, vt2, v0 WHERE (((((('#(ꢥ5M8h')OR(v0.c1)))OR(vt0.c0)) IN ((((vt2.c0, v0.c3, vt0.c0))<=((v0.c2, vt2.c1, v0.c1)))))) ORDER BY CAST(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 ELSE 0.7592612771838159 END AS NUMERIC) DESC, CAST(((v0.c3)&(x'4d68')) AS INTEGER) ASC LIMIT 0;
SELECT MIN(vt2.c0) FROM vt2 WHERE ((((vt2.c1 IN (vt2.c1))) NOT BETWEEN ((((vt2.c0, vt2.c0, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c0, 0.13946666217527381, '-833993359', 'IX]')) AND ((vt2.c1, vt2.c1, x'6bcc4e', vt2.c1)))) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND ('-610673233'))))) ORDER BY vt2.c0;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE ((((((vt2.c1 IN (vt2.c1))) NOT BETWEEN ((((vt2.c0, vt2.c0, vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c0, 0.13946666217527381, '-833993359', 'IX]')) AND ((vt2.c1, vt2.c1, x'6bcc4e', vt2.c1)))) AND (((vt2.c0) NOT BETWEEN (vt2.c1) AND ('-610673233')))))AND(HEX(DISTINCT (NOT (vt2.c0)))))) ORDER BY vt2.c0;
SELECT MIN(vt2.c0) FROM vt2 WHERE ((((vt2.c1) NOT BETWEEN (1553571233) AND (vt2.c1)) IN (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN NULL WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END, (vt2.c1 IN (vt2.c0))))) ORDER BY (((((((- (vt2.c0)))OR((('hx?')*(vt2.c1)))))AND((- (vt2.c0)))))OR(LOWER(vt2.c1)));
SELECT MIN(vt2.c0) FROM vt2 WHERE ((((((vt2.c1) NOT BETWEEN (0X5c999da1) AND (vt2.c1)) IN (CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN NULL WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END, (vt2.c1 IN (vt2.c0)))))AND(((HEX(vt2.c0))IS NOT(TRIM(DISTINCT vt2.c0, vt2.c1)))))) ORDER BY LIKELIHOOD(DISTINCT vt2.c0 COLLATE NOCASE, CAST(vt2.c1 AS INTEGER)) LIMIT 0X0 INTERSECT SELECT MIN(vt2.c0) FROM vt2 WHERE (CAST(((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c1)) AS TEXT)) ORDER BY LIKELIHOOD(DISTINCT vt2.c0 COLLATE NOCASE, CAST(vt2.c1 AS INTEGER)) LIMIT 0;
SELECT MAX(v0.c2) FROM v0 WHERE ((+ (v0.c0 COLLATE BINARY)));
SELECT DISTINCT MAX(v0.c2) FROM v0 WHERE ((((+ (v0.c0 COLLATE BINARY)))AND(CAST(v0.c1 AS TEXT))));
SELECT ALL * FROM vt0, vt2 WHERE (vt2.c1) ORDER BY vt0.c0 DESC;
SELECT ALL * FROM vt0, vt2 WHERE (vt2.c1) ORDER BY COALESCE(DISTINCT ((vt2.c1)>>(NULL)), CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END, (((vt2.c0, vt0.c0, vt2.c0))<=(('419167528', 0Xb467d2f, vt2.c1))), (vt2.c1 IN ()), vt0.c0 COLLATE NOCASE)  NULLS FIRST, vt2.c1 DESC  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE (vt2.c1) ORDER BY vt0.c0 DESC;
SELECT ALL * FROM vt0, vt2 WHERE (vt2.c1) ORDER BY COALESCE(DISTINCT ((vt2.c1)>>(NULL)), CASE vt2.c0  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END, (((vt2.c0, vt0.c0, vt2.c0))<=(('419167528', 0Xb467d2f, vt2.c1))), (vt2.c1 IN ()), vt0.c0 COLLATE NOCASE)  NULLS FIRST, vt2.c1 DESC  NULLS LAST;
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE ((~ (NULL)));
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE ((~ (NULL))) ORDER BY CAST((((NULL, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c0)) AND ((vt2.c0, vt2.c1))) AS TEXT) DESC  NULLS LAST LIMIT 1;
SELECT * FROM v0, vt2, vt0 WHERE (v0.c1);
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((v0.c1)AND((~ ('N?V2.'))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((v0.c3)) BETWEEN (((('-1165434253') IS TRUE))) AND ((CAST(vt2.c1 AS BLOB))))) LIMIT 0X1;
SELECT * FROM v0, vt2, vt0 WHERE (v0.c1);
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((v0.c1)AND((~ ('N?V2.'))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((((v0.c3)) BETWEEN (((('-1165434253') IS TRUE))) AND ((CAST(vt2.c1 AS BLOB))))) LIMIT 0X1;
SELECT * FROM v0 WHERE ((((v0.c3, v0.c3, v0.c1, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c3) AND ('%Sdk')), 1.646465875E9, ((v0.c3) NOTNULL), CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END, (v0.c0 IN (x'b4')))) AND (((NOT (v0.c1)), UPPER(DISTINCT v0.c2), ((v0.c1)<(v0.c3)), CAST(v0.c0 AS BLOB), ((v0.c2) NOT NULL)))));
SELECT DISTINCT * FROM v0 WHERE ((((v0.c3, v0.c3, v0.c1, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c3) AND ('%Sdk')), 1.646465875E9, ((v0.c3) NOTNULL), CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END, (v0.c0 IN (x'b4')))) AND (((NOT (v0.c1)), UPPER(DISTINCT v0.c2), ((v0.c1)<(v0.c3)), CAST(v0.c0 AS BLOB), ((v0.c2) NOT NULL))))) LIMIT 0x0;
SELECT * FROM v0 WHERE ((((v0.c3, v0.c3, v0.c1, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c3) AND ('%Sdk')), 1.646465875E9, ((v0.c3) NOTNULL), CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END, (v0.c0 IN (x'b4')))) AND (((NOT (v0.c1)), UPPER(DISTINCT v0.c2), ((v0.c1)<(v0.c3)), CAST(v0.c0 AS BLOB), ((v0.c2) NOT NULL)))));
SELECT DISTINCT * FROM v0 WHERE ((((v0.c3, v0.c3, v0.c1, v0.c2, v0.c2)) NOT BETWEEN ((((v0.c3) BETWEEN (v0.c3) AND ('%Sdk')), 1.646465875E9, ((v0.c3) NOTNULL), CASE v0.c3  WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c0 END, (v0.c0 IN (x'b4')))) AND (((NOT (v0.c1)), UPPER(DISTINCT v0.c2), ((v0.c1)<(v0.c3)), CAST(v0.c0 AS BLOB), ((v0.c2) NOT NULL))))) LIMIT 0x0;
SELECT * FROM v0 LEFT OUTER JOIN vt2 ON ((CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c3 END) ISNULL) WHERE (0.39469908384747054);
SELECT ALL * FROM v0 INNER JOIN vt2 ON ((CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c3 END) ISNULL) WHERE (0.39469908384747054) INTERSECT SELECT ALL * FROM v0 INNER JOIN vt2 ON ((CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c3 END) ISNULL) WHERE (((vt2.c1)IS NOT(v0.c2)) COLLATE BINARY);
SELECT * FROM v0 LEFT OUTER JOIN vt2 ON ((CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c3 END) ISNULL) WHERE (0.39469908384747054);
SELECT ALL * FROM v0 INNER JOIN vt2 ON ((CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c3 END) ISNULL) WHERE (0.39469908384747054) INTERSECT SELECT ALL * FROM v0 INNER JOIN vt2 ON ((CASE v0.c1  WHEN v0.c0 THEN v0.c0 ELSE v0.c3 END) ISNULL) WHERE (((vt2.c1)IS NOT(v0.c2)) COLLATE BINARY);
SELECT MIN(vt0.c0) FROM v0, vt0 WHERE (((v0.c1)>>(((((((vt0.c0)OR(v0.c1)))AND(v0.c2)))OR(vt0.c0)))));
SELECT DISTINCT MIN(vt0.c0) FROM v0, vt0 WHERE (((v0.c1)>>(((((((vt0.c0)OR(v0.c1)))AND(v0.c2)))OR(vt0.c0))))) LIMIT 1;
SELECT ALL * FROM vt0 WHERE ((COALESCE(vt0.c0, vt0.c0, vt0.c0) IN (vt0.c0, ((vt0.c0)OR(vt0.c0)), x''))) ORDER BY ((vt0.c0)<=(vt0.c0)) COLLATE NOCASE DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((COALESCE(vt0.c0, vt0.c0, vt0.c0) IN (vt0.c0, ((vt0.c0)OR(vt0.c0)), x'')))AND(((CAST(vt0.c0 AS REAL))<(x''))))) ORDER BY CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS INTEGER)  NULLS FIRST, CASE WHEN ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN SUBSTR(vt0.c0, vt0.c0) THEN CAST(vt0.c0 AS BLOB) WHEN ((NULL) IS TRUE) THEN CAST(vt0.c0 AS INTEGER) END, CAST(x'' AS BLOB) DESC  NULLS LAST LIMIT 0x3;
SELECT ALL * FROM vt0 WHERE ((COALESCE(vt0.c0, vt0.c0, vt0.c0) IN (vt0.c0, ((vt0.c0)OR(vt0.c0)), x''))) ORDER BY ((vt0.c0)<=(vt0.c0)) COLLATE NOCASE DESC;
SELECT DISTINCT * FROM vt0 WHERE ((((COALESCE(vt0.c0, vt0.c0, vt0.c0) IN (vt0.c0, ((vt0.c0)OR(vt0.c0)), x'')))AND(((CAST(vt0.c0 AS REAL))<(x''))))) ORDER BY CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END AS INTEGER)  NULLS FIRST, CASE WHEN ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) WHEN SUBSTR(vt0.c0, vt0.c0) THEN CAST(vt0.c0 AS BLOB) WHEN ((NULL) IS TRUE) THEN CAST(vt0.c0 AS INTEGER) END, CAST(x'' AS BLOB) DESC  NULLS LAST LIMIT 0x3;
SELECT ALL MIN(vt2.c0) FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1)))IS((- (v0.c1)))));
SELECT ALL MIN(vt2.c0) FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((v0.c3) NOT BETWEEN (v0.c3) AND (v0.c1)))IS((- (v0.c1))))) ORDER BY CASE WHEN (((v0.c2, v0.c3, vt0.c0))<=((v0.c2, v0.c2, v0.c1))) THEN ((0xffffffffa9e192c0)||(vt2.c1)) WHEN (vt0.c0 IN (v0.c1)) THEN ((((((v0.c3)OR(v0.c3)))OR(v0.c3)))AND(vt0.c0)) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN vt2.c0 COLLATE BINARY ELSE ((vt2.c0) BETWEEN (vt0.c0) AND (v0.c2)) END ASC, CAST(((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c0)) AS TEXT)  NULLS FIRST INTERSECT SELECT ALL MIN(vt2.c0) FROM vt0, v0 NATURAL JOIN vt2 WHERE ((- (ROUND(v0.c0, vt0.c0)))) ORDER BY CASE WHEN (((v0.c2, v0.c3, vt0.c0))<=((v0.c2, v0.c2, v0.c1))) THEN ((-1444834624)||(vt2.c1)) WHEN (vt0.c0 IN (v0.c1)) THEN ((((((v0.c3)OR(v0.c3)))OR(v0.c3)))AND(vt0.c0)) WHEN ((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN vt2.c0 COLLATE BINARY ELSE ((vt2.c0) BETWEEN (vt0.c0) AND (v0.c2)) END ASC, CAST(((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c0)) AS TEXT)  NULLS FIRST;
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((((v0.c2) BETWEEN (vt0.c0) AND (v0.c3)), ((((((((v0.c0)OR(vt2.c1)))AND(v0.c0)))AND(v0.c1)))OR(vt2.c0))))>=((1646465875, ((vt0.c0) BETWEEN (v0.c0) AND (vt2.c0))))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((((((v0.c2) BETWEEN (vt0.c0) AND (v0.c3)), ((((((((v0.c0)OR(vt2.c1)))AND(v0.c0)))AND(v0.c1)))OR(vt2.c0))))>=((0X62231353, ((vt0.c0) BETWEEN (v0.c0) AND (vt2.c0))))))AND(((v0.c3)|(v0.c1))))) INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (LIKE((((x'64', v0.c0, x''))>((vt2.c1, v0.c0, vt0.c0))), ((v0.c3)IS(v0.c1))));
SELECT ALL * FROM vt2, vt0, v0 WHERE ((((((v0.c2) BETWEEN (vt0.c0) AND (v0.c3)), ((((((((v0.c0)OR(vt2.c1)))AND(v0.c0)))AND(v0.c1)))OR(vt2.c0))))>=((1646465875, ((vt0.c0) BETWEEN (v0.c0) AND (vt2.c0))))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((((((v0.c2) BETWEEN (vt0.c0) AND (v0.c3)), ((((((((v0.c0)OR(vt2.c1)))AND(v0.c0)))AND(v0.c1)))OR(vt2.c0))))>=((0X62231353, ((vt0.c0) BETWEEN (v0.c0) AND (vt2.c0))))))AND(((v0.c3)|(v0.c1))))) INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (LIKE((((x'64', v0.c0, x''))>((vt2.c1, v0.c0, vt0.c0))), ((v0.c3)IS(v0.c1))));
SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE (((((0.7691570968606407) BETWEEN (vt2.c0) AND (vt2.c1)))/(CASE vt2.c1  WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN 0xffffffff9526a78b ELSE x'55' END))) ORDER BY (((((((('184892527')AND(vt2.c0)))OR(vt2.c1)))OR(vt0.c0))) IS TRUE)  NULLS FIRST, (((((((('')AND(((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))OR(vt0.c0)))OR(vt0.c0)))))AND('ma(㇁<')))AND(CASE vt2.c1  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END)))AND(CAST(vt0.c0 AS INTEGER))) DESC;
SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE (((((((0.7691570968606407) BETWEEN (vt2.c0) AND (vt2.c1)))/(CASE vt2.c1  WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN 0xffffffff9526a78b ELSE x'55' END)))AND((~ (IFNULL(vt2.c1, vt0.c0)))))) ORDER BY (((vt0.c0, vt0.c0, vt2.c0, vt2.c0)) NOT BETWEEN ((LIKELIHOOD(vt0.c0, vt0.c0), ((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0)), (((vt0.c0))>((vt2.c0))), 'z#UUsu蛋')) AND (((- (vt2.c0)), 0.6274309708856924, ((vt2.c1)IS NOT(vt2.c1)), ((vt0.c0)*(vt2.c1))))) LIMIT 0x1 INTERSECT SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE (vt0.c0) ORDER BY (((vt0.c0, vt0.c0, vt2.c0, vt2.c0)) NOT BETWEEN ((LIKELIHOOD(vt0.c0, vt0.c0), ((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0)), (((vt0.c0))>((vt2.c0))), 'z#UUsu蛋')) AND (((- (vt2.c0)), 0.6274309708856924, ((vt2.c1)IS NOT(vt2.c1)), ((vt0.c0)*(vt2.c1))))) LIMIT 1;
SELECT ALL MIN(vt2.c0) FROM vt0 INNER JOIN v0 ON ((v0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE NOCASE LEFT OUTER JOIN vt2 ON ((((v0.c3)>>(v0.c0)))<>(((((((((v0.c0)AND(vt2.c1)))OR(0.35949040507446095)))OR(vt2.c0)))OR(v0.c1)))) WHERE (((CAST(vt2.c1 AS REAL)) NOT BETWEEN ((((v0.c3, v0.c1))<((x'', vt0.c0)))) AND ((665660588 IN (vt2.c0, v0.c2)))));
SELECT DISTINCT MIN(vt2.c0) FROM vt0 INNER JOIN v0 ON ((v0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE NOCASE LEFT OUTER JOIN vt2 ON ((((v0.c3)>>(v0.c0)))<>(((((((((v0.c0)AND(vt2.c1)))OR(0.35949040507446095)))OR(vt2.c0)))OR(v0.c1)))) WHERE (((((CAST(vt2.c1 AS REAL)) NOT BETWEEN ((((v0.c3, v0.c1))<((x'', vt0.c0)))) AND ((0x27ad2cac IN (vt2.c0, v0.c2)))))AND(((v0.c1)<(v0.c3)) COLLATE RTRIM))) INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt0 INNER JOIN v0 ON ((v0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE NOCASE LEFT OUTER JOIN vt2 ON ((((v0.c3)>>(v0.c0)))!=(((((((((v0.c0)AND(vt2.c1)))OR(0.35949040507446095)))OR(vt2.c0)))OR(v0.c1)))) WHERE (((((((vt2.c1)OR(vt2.c1)))OR(vt2.c0)))>>(((((((0.79799629452636)AND(vt0.c0)))OR(x'27e6')))OR(vt2.c1)))));
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (CAST(vt0.c0 AS NUMERIC)) ORDER BY CAST(v0.c0 AS TEXT) COLLATE BINARY;
SELECT COUNT(*) FROM vt0, v0 WHERE (((CAST(vt0.c0 AS NUMERIC))AND((- ((('0.23589764147070302')LIKE(v0.c2))))))) ORDER BY CAST(v0.c0 AS TEXT) COLLATE BINARY INTERSECT SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((((v0.c2) BETWEEN (v0.c1) AND (v0.c0)))<>(CASE v0.c0  WHEN 0.8900048706643645 THEN '-1089625740' ELSE vt0.c0 END))) ORDER BY CAST(v0.c0 AS TEXT) COLLATE BINARY;
SELECT * FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)OR(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)OR(vt0.c0))) ORDER BY ((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND(TRIM(DISTINCT vt0.c0))))OR((((vt0.c0, vt0.c0))=((vt0.c0, -1486891871)))))  NULLS LAST, ((UPPER(vt0.c0)) BETWEEN (0.14364115256907362) AND ((- (vt0.c0))))  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((vt0.c0 IN ()) COLLATE NOCASE) ORDER BY ((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND(TRIM(DISTINCT vt0.c0))))OR((((vt0.c0, vt0.c0))=((vt0.c0, -1486891871)))))  NULLS LAST, ((UPPER(vt0.c0)) BETWEEN (0.14364115256907362) AND ((- (vt0.c0))))  NULLS LAST LIMIT 0X0;
SELECT * FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)OR(vt0.c0)));
SELECT DISTINCT * FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)OR(vt0.c0))) ORDER BY ((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND(TRIM(DISTINCT vt0.c0))))OR((((vt0.c0, vt0.c0))=((vt0.c0, -1486891871)))))  NULLS LAST, ((UPPER(vt0.c0)) BETWEEN (0.14364115256907362) AND ((- (vt0.c0))))  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE ((vt0.c0 IN ()) COLLATE NOCASE) ORDER BY ((((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))AND(TRIM(DISTINCT vt0.c0))))OR((((vt0.c0, vt0.c0))=((vt0.c0, -1486891871)))))  NULLS LAST, ((UPPER(vt0.c0)) BETWEEN (0.14364115256907362) AND ((- (vt0.c0))))  NULLS LAST LIMIT 0X0;
SELECT ALL MAX(v0.c0) FROM v0, vt2, vt0 WHERE (((vt0.c0 COLLATE BINARY) IS FALSE));
SELECT MAX(v0.c0) FROM v0, vt2, vt0 WHERE (((((vt0.c0 COLLATE BINARY) IS FALSE))AND(CASE WHEN ((vt2.c1)LIKE(v0.c3)) THEN (+ (vt0.c0)) WHEN ((v0.c1)&(v0.c3)) THEN ((vt0.c0)=(vt0.c0)) ELSE (v0.c0 IN ()) END))) ORDER BY ((((((((((vt0.c0)OR(v0.c0)))OR(v0.c0)))AND(v0.c3)))AND(v0.c3)))>>((vt2.c1 IN ()))) DESC, ((x'')%('->d''^cey'))  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt2 LEFT OUTER JOIN vt0 ON (((CASE v0.c0  WHEN x'' THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN vt2.c0 WHEN vt2.c1 THEN v0.c2 END, (~ (v0.c0)), CAST(vt2.c0 AS NUMERIC)))<>((((vt2.c0) NOTNULL), ((vt2.c0) NOT NULL), CAST(v0.c3 AS BLOB)))) LEFT OUTER JOIN v0 ON ((191405833) NOT BETWEEN ((+ (vt0.c0))) AND (((v0.c0) NOTNULL))) WHERE (((UNLIKELY(vt2.c1))<(((v0.c1) IS FALSE)))) ORDER BY (((vt0.c0, ((((vt0.c0)OR(vt2.c0)))OR(0.5706275564211356)), CAST(vt0.c0 AS TEXT)))=(((((vt2.c0, vt2.c0, vt0.c0, vt2.c0))=((v0.c0, v0.c0, v0.c1, v0.c3))), (- (v0.c1)), ((v0.c1)<>(v0.c3))))) ASC  NULLS LAST, CAST(v0.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2 INNER JOIN vt0 ON (((CASE v0.c0  WHEN x'' THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN vt2.c0 WHEN vt2.c1 THEN v0.c2 END, (~ (v0.c0)), CAST(vt2.c0 AS NUMERIC)))!=((((vt2.c0) NOTNULL), ((vt2.c0) NOT NULL), CAST(v0.c3 AS BLOB)))) LEFT OUTER JOIN v0 ON ((0xb689f09) NOT BETWEEN ((+ (vt0.c0))) AND (((v0.c0) NOTNULL))) WHERE (((UNLIKELY(vt2.c1))<(((v0.c1) IS FALSE)))) ORDER BY (((vt0.c0, ((((vt0.c0)OR(vt2.c0)))OR(0.5706275564211356)), CAST(vt0.c0 AS TEXT)))=(((((vt2.c0, vt2.c0, vt0.c0, vt2.c0))==((v0.c0, v0.c0, v0.c1, v0.c3))), (- (v0.c1)), ((v0.c1)!=(v0.c3))))) ASC  NULLS LAST, CAST(v0.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 INNER JOIN vt0 ON (((CASE v0.c0  WHEN x'' THEN v0.c0 WHEN v0.c1 THEN vt2.c0 WHEN v0.c3 THEN vt2.c0 WHEN vt2.c1 THEN v0.c2 END, (~ (v0.c0)), CAST(vt2.c0 AS NUMERIC)))!=((((vt2.c0) NOTNULL), ((vt2.c0) NOT NULL), CAST(v0.c3 AS BLOB)))) LEFT OUTER JOIN v0 ON ((191405833) NOT BETWEEN ((+ (vt0.c0))) AND (((v0.c0) NOTNULL))) WHERE (((((NULL) IS FALSE))>=((v0.c2 IN (v0.c3))))) ORDER BY (((vt0.c0, ((((vt0.c0)OR(vt2.c0)))OR(0.5706275564211356)), CAST(vt0.c0 AS TEXT)))==(((((vt2.c0, vt2.c0, vt0.c0, vt2.c0))=((v0.c0, v0.c0, v0.c1, v0.c3))), (- (v0.c1)), ((v0.c1)!=(v0.c3))))) ASC  NULLS LAST, CAST(v0.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0 NATURAL JOIN v0 WHERE ((('-1086364486') IS TRUE));
SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 WHERE ((('-1086364486') IS TRUE)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 WHERE ((((CAST('0.6752456599976012' AS INTEGER), vt0.c0 COLLATE BINARY))>=(((((v0.c2))>((v0.c3))), (v0.c2 IN (v0.c1, v0.c2)))))) LIMIT 0;
SELECT ALL * FROM vt0 NATURAL JOIN v0 WHERE ((('-1086364486') IS TRUE));
SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 WHERE ((('-1086364486') IS TRUE)) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 WHERE ((((CAST('0.6752456599976012' AS INTEGER), vt0.c0 COLLATE BINARY))>=(((((v0.c2))>((v0.c3))), (v0.c2 IN (v0.c1, v0.c2)))))) LIMIT 0;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE ((- (v0.c2))) ORDER BY ((vt2.c1)OR(v0.c3)) COLLATE BINARY DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE ((- (v0.c2))) ORDER BY ((vt2.c1)OR(v0.c3)) COLLATE BINARY DESC  NULLS FIRST;
SELECT * FROM vt2 WHERE ((((((vt2.c1))>=((vt2.c0)))) IS FALSE));
SELECT * FROM vt2 WHERE ((((((vt2.c1))>((vt2.c0)))) IS FALSE)) ORDER BY ((vt2.c1) ISNULL), ((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c1))) NOT NULL) ASC, CAST((((vt2.c0, x'd2', vt2.c0)) BETWEEN ((vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0))) AS TEXT) ASC  NULLS FIRST LIMIT 0;
SELECT * FROM vt2 WHERE ((((((vt2.c1))>=((vt2.c0)))) IS FALSE));
SELECT * FROM vt2 WHERE ((((((vt2.c1))>((vt2.c0)))) IS FALSE)) ORDER BY ((vt2.c1) ISNULL), ((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c1))) NOT NULL) ASC, CAST((((vt2.c0, x'd2', vt2.c0)) BETWEEN ((vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0))) AS TEXT) ASC  NULLS FIRST LIMIT 0;
SELECT ALL MIN(v0.c1) FROM vt2, v0 WHERE ((('-1680991631') BETWEEN (((v0.c2) BETWEEN (v0.c1) AND (v0.c0))) AND (((((v0.c1)AND(v0.c1)))AND(v0.c2)))));
SELECT MIN(v0.c1) FROM vt2, v0 WHERE ((((('-1680991631') BETWEEN (((v0.c2) BETWEEN (v0.c1) AND (v0.c0))) AND (((((v0.c1)AND(v0.c1)))AND(v0.c2)))))AND(''))) ORDER BY ((((((v0.c2)OR(vt2.c1)))AND(v0.c3)))OR(v0.c3)) COLLATE RTRIM DESC INTERSECT SELECT MIN(v0.c1) FROM vt2, v0 WHERE ((((v0.c0)) NOT BETWEEN ((CASE WHEN v0.c1 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 ELSE vt2.c0 END)) AND (((vt2.c0 IN (vt2.c1)))))) ORDER BY ((((((v0.c2)OR(vt2.c1)))AND(v0.c3)))OR(v0.c3)) COLLATE RTRIM DESC;
SELECT ALL * FROM vt0 WHERE (((vt0.c0) IS TRUE) COLLATE RTRIM);
SELECT * FROM vt0 WHERE (((vt0.c0) IS TRUE) COLLATE RTRIM) LIMIT 0X0 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0)IS(vt0.c0))) NOT BETWEEN (((vt0.c0) IS TRUE)) AND (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) LIMIT 0X0;
SELECT ALL * FROM vt0 WHERE (((vt0.c0) IS TRUE) COLLATE RTRIM);
SELECT * FROM vt0 WHERE (((vt0.c0) IS TRUE) COLLATE RTRIM) LIMIT 0X0 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0)IS(vt0.c0))) NOT BETWEEN (((vt0.c0) IS TRUE)) AND (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))))) LIMIT 0X0;
SELECT * FROM v0, vt2 WHERE (ABS(v0.c2) COLLATE RTRIM);
SELECT * FROM v0, vt2 WHERE (((ABS(v0.c2) COLLATE RTRIM)AND((((~ (v0.c3)))>=((+ (vt2.c0))))))) INTERSECT SELECT ALL * FROM v0, vt2 WHERE (COALESCE(CASE WHEN vt2.c0 THEN vt2.c1 WHEN v0.c0 THEN vt2.c1 WHEN '1791815720' THEN v0.c1 END, (v0.c1 IN (v0.c3)), CAST(v0.c2 AS NUMERIC)));
SELECT * FROM v0, vt2 WHERE (ABS(v0.c2) COLLATE RTRIM);
SELECT * FROM v0, vt2 WHERE (((ABS(v0.c2) COLLATE RTRIM)AND((((~ (v0.c3)))>=((+ (vt2.c0))))))) INTERSECT SELECT ALL * FROM v0, vt2 WHERE (COALESCE(CASE WHEN vt2.c0 THEN vt2.c1 WHEN v0.c0 THEN vt2.c1 WHEN '1791815720' THEN v0.c1 END, (v0.c1 IN (v0.c3)), CAST(v0.c2 AS NUMERIC)));
SELECT ALL COUNT(*) FROM v0 WHERE (((((v0.c0) BETWEEN (v0.c2) AND (v0.c3)))IS NOT(v0.c0)));
SELECT DISTINCT COUNT(*) FROM v0 WHERE (((((v0.c0) BETWEEN (v0.c2) AND (v0.c3)))IS NOT(v0.c0))) ORDER BY ((((((v0.c0)AND(v0.c1 COLLATE BINARY)))AND(v0.c2 COLLATE NOCASE)))OR(((v0.c3) NOT BETWEEN (v0.c0) AND (v0.c3)))) ASC, v0.c1 DESC LIMIT 0;
SELECT ALL COUNT(*) FROM vt2, v0 CROSS JOIN vt0 ON LOWER(DISTINCT ((v0.c1) IS FALSE)) WHERE (((CAST(v0.c1 AS TEXT))AND(((((((((v0.c2)AND(vt2.c1)))AND(vt0.c0)))OR(v0.c3)))AND(v0.c3))))) ORDER BY (((((v0.c3)) NOT BETWEEN (('-')) AND ((vt0.c0))))==(((NULL) BETWEEN (x'') AND (0Xffffffff9bce1a71))));
SELECT ALL COUNT(*) FROM vt2, v0 CROSS JOIN vt0 ON LOWER(DISTINCT ((v0.c1) IS FALSE)) WHERE (((CAST(v0.c1 AS TEXT))AND(((((((((v0.c2)AND(vt2.c1)))AND(vt0.c0)))OR(v0.c3)))AND(v0.c3))))) ORDER BY INSTR(((vt2.c1)|(vt2.c1)), ((v0.c3)<=(v0.c0)))  NULLS LAST, CASE ((v0.c1) ISNULL)  WHEN (+ (v0.c0)) THEN CAST(vt2.c0 AS REAL) ELSE ((vt0.c0) NOTNULL) END LIMIT 0x0 INTERSECT SELECT COUNT(*) FROM vt2, v0 CROSS JOIN vt0 ON LOWER(DISTINCT ((v0.c1) IS FALSE)) WHERE (((NULL)/(((v0.c1) NOT NULL)))) ORDER BY INSTR(((vt2.c1)|(vt2.c1)), ((v0.c3)<=(v0.c0)))  NULLS LAST, CASE ((v0.c1) ISNULL)  WHEN (+ (v0.c0)) THEN CAST(vt2.c0 AS REAL) ELSE ((vt0.c0) NOTNULL) END LIMIT 0;
SELECT MIN(vt2.c1) FROM vt2, v0 WHERE (((CAST(v0.c0 AS NUMERIC))/(((v0.c3)<=(vt2.c1))))) ORDER BY v0.c3  NULLS FIRST;
SELECT DISTINCT MIN(vt2.c1) FROM vt2, v0 WHERE (((((CAST(v0.c0 AS NUMERIC))/(((v0.c3)<=(vt2.c1)))))AND(((('-0]{?<ՠ0{' COLLATE NOCASE, x'5a', v0.c0))<=((((vt2.c0)||(v0.c0)), (vt2.c1 IN ()), ((vt2.c0)%(vt2.c0)))))))) ORDER BY v0.c3  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt2.c1) FROM vt2, v0 WHERE (((vt2.c1 COLLATE BINARY) BETWEEN (((v0.c2)/(v0.c2))) AND (CAST(x'' AS INTEGER)))) ORDER BY v0.c3  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE ((((vt2.c0, vt0.c0)) NOT BETWEEN ((((vt2.c0)>(vt2.c0)), (0.8129067804303851 IN (vt0.c0)))) AND (((((vt2.c0, vt2.c0, vt0.c0, vt0.c0)) BETWEEN (('ꌟEm', vt2.c0, vt0.c0, vt2.c0)) AND ((vt2.c0, vt0.c0, vt2.c0, vt2.c0))), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))))));
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE ((((((vt2.c0, vt0.c0)) NOT BETWEEN ((((vt2.c0)>(vt2.c0)), (0.8129067804303851 IN (vt0.c0)))) AND (((((vt2.c0, vt2.c0, vt0.c0, vt0.c0)) BETWEEN (('ꌟEm', vt2.c0, vt0.c0, vt2.c0)) AND ((vt2.c0, vt0.c0, vt2.c0, vt2.c0))), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))))))AND((~ (((vt2.c1) NOTNULL)))))) ORDER BY x'' ASC  NULLS FIRST, ((((vt0.c0) NOT NULL)) IS FALSE)  NULLS FIRST LIMIT 4;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE ((((vt2.c0, vt0.c0)) NOT BETWEEN ((((vt2.c0)>(vt2.c0)), (0.8129067804303851 IN (vt0.c0)))) AND (((((vt2.c0, vt2.c0, vt0.c0, vt0.c0)) BETWEEN (('ꌟEm', vt2.c0, vt0.c0, vt2.c0)) AND ((vt2.c0, vt0.c0, vt2.c0, vt2.c0))), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))))));
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE ((((((vt2.c0, vt0.c0)) NOT BETWEEN ((((vt2.c0)>(vt2.c0)), (0.8129067804303851 IN (vt0.c0)))) AND (((((vt2.c0, vt2.c0, vt0.c0, vt0.c0)) BETWEEN (('ꌟEm', vt2.c0, vt0.c0, vt2.c0)) AND ((vt2.c0, vt0.c0, vt2.c0, vt2.c0))), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))))))AND((~ (((vt2.c1) NOTNULL)))))) ORDER BY x'' ASC  NULLS FIRST, ((((vt0.c0) NOT NULL)) IS FALSE)  NULLS FIRST LIMIT 4;
SELECT ALL MIN(v0.c0) FROM vt2 INNER JOIN vt0 ON ((((((((((((((vt0.c0)AND(v0.c1)))AND(v0.c3)))AND(vt2.c0)))AND(v0.c2)))OR(vt0.c0)))AND(NULL))) BETWEEN (((v0.c0) BETWEEN (v0.c2) AND ('708305761'))) AND (CAST(vt2.c1 AS TEXT))) NATURAL JOIN v0 WHERE (CAST(((v0.c1) NOTNULL) AS TEXT));
SELECT DISTINCT MIN(v0.c0) FROM vt2 INNER JOIN vt0 ON ((((((((((((((vt0.c0)AND(v0.c1)))AND(v0.c3)))AND(vt2.c0)))AND(v0.c2)))OR(vt0.c0)))AND(NULL))) BETWEEN (((v0.c0) BETWEEN (v0.c2) AND ('708305761'))) AND (CAST(vt2.c1 AS TEXT))) NATURAL JOIN v0 WHERE (CAST(((v0.c1) NOTNULL) AS TEXT)) INTERSECT SELECT DISTINCT MIN(v0.c0) FROM vt2 INNER JOIN vt0 ON ((((((((((((((vt0.c0)AND(v0.c1)))AND(v0.c3)))AND(vt2.c0)))AND(v0.c2)))OR(vt0.c0)))AND(NULL))) BETWEEN (((v0.c0) BETWEEN (v0.c2) AND ('708305761'))) AND (CAST(vt2.c1 AS TEXT))) NATURAL JOIN v0 WHERE (1699440266 COLLATE RTRIM COLLATE NOCASE COLLATE NOCASE);
SELECT ALL MIN(v0.c1) FROM vt0, vt2, v0 WHERE ((((((v0.c2 IN (vt2.c0)))OR(v0.c2)))AND(v0.c0 COLLATE NOCASE))) ORDER BY x'' ASC  NULLS LAST, ((((((vt2.c1)) NOT BETWEEN ((v0.c1)) AND ((vt2.c1))), ((x'')/(v0.c3)), ((NULL) BETWEEN (v0.c1) AND (vt2.c1)), v0.c2, CAST(vt0.c0 AS TEXT)))>(((v0.c0 IN (NULL, vt0.c0)), LOWER(DISTINCT vt2.c1), (NOT (v0.c0)), ((vt2.c0)IS(vt0.c0)), v0.c1 COLLATE NOCASE))) ASC  NULLS FIRST;
SELECT ALL MIN(v0.c1) FROM vt0, vt2, v0 WHERE ((((((((v0.c2 IN (vt2.c0)))OR(v0.c2)))AND(v0.c0 COLLATE NOCASE)))AND((((vt0.c0, vt2.c0)) BETWEEN ((CASE vt0.c0  WHEN v0.c0 THEN vt2.c1 WHEN vt2.c0 THEN v0.c1 END, CAST(v0.c3 AS BLOB))) AND (((v0.c0 IN (vt2.c0, v0.c2)), CASE WHEN vt2.c1 THEN x'6c' ELSE v0.c1 END)))))) ORDER BY (((((vt0.c0, NULL, 0x67d4e76a, 0xffffffffb0023721, vt0.c0))<((vt0.c0, v0.c0, vt2.c0, v0.c1, vt2.c1))))*(((((((v0.c0)AND(v0.c3)))OR(vt2.c1)))OR(v0.c0)))) DESC  NULLS LAST, v0.c0 ASC LIMIT 0x1;
SELECT COUNT(*) FROM vt0, v0, vt2 WHERE (((((vt2.c1)==(vt2.c0))) NOT BETWEEN (((vt2.c0) NOTNULL)) AND ((- (vt2.c0)))));
SELECT DISTINCT COUNT(*) FROM vt0, v0, vt2 WHERE (((((vt2.c1)==(vt2.c0))) NOT BETWEEN (((vt2.c0) NOTNULL)) AND ((- (vt2.c0))))) LIMIT 0x0;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (((CAST(vt2.c0 AS REAL))GLOB(-2023787270))) ORDER BY CASE WHEN 'H>^G&F渤^' THEN (('1380355063')=(vt2.c1)) WHEN CAST(vt0.c0 AS NUMERIC) THEN json_type(vt2.c1) ELSE ((((vt2.c0)OR(vt2.c0)))AND(vt0.c0)) END  NULLS LAST, LIKE(((vt0.c0)-(vt0.c0)), ((((NULL)OR(vt2.c0)))OR(vt2.c0)), 'j') DESC  NULLS LAST, ((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))OR(CAST(vt2.c0 AS BLOB))))AND((NOT (vt2.c1))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 WHERE (((((CAST(vt2.c0 AS REAL))GLOB(0Xffffffff875f74fa)))AND((((LIKELIHOOD(vt2.c1, vt2.c1), ((((((((((((vt2.c1)OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)), (vt0.c0 IN (vt2.c1))))>=((SQLITE_COMPILEOPTION_GET(vt2.c0), CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END, (((vt0.c0))>(('猪'))))))))) ORDER BY CASE WHEN 'H>^G&F渤^' THEN (('1380355063')==(vt2.c1)) WHEN CAST(vt0.c0 AS NUMERIC) THEN json_type(vt2.c1) ELSE ((((vt2.c0)OR(vt2.c0)))AND(vt0.c0)) END  NULLS LAST, LIKE(((vt0.c0)-(vt0.c0)), ((((NULL)OR(vt2.c0)))OR(vt2.c0)), 'j') DESC  NULLS LAST, ((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))OR(CAST(vt2.c0 AS BLOB))))AND((NOT (vt2.c1))))  NULLS LAST LIMIT 0x0;
SELECT * FROM vt0 NATURAL JOIN vt2 WHERE (((CAST(vt2.c0 AS REAL))GLOB(-2023787270))) ORDER BY CASE WHEN 'H>^G&F渤^' THEN (('1380355063')=(vt2.c1)) WHEN CAST(vt0.c0 AS NUMERIC) THEN json_type(vt2.c1) ELSE ((((vt2.c0)OR(vt2.c0)))AND(vt0.c0)) END  NULLS LAST, LIKE(((vt0.c0)-(vt0.c0)), ((((NULL)OR(vt2.c0)))OR(vt2.c0)), 'j') DESC  NULLS LAST, ((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))OR(CAST(vt2.c0 AS BLOB))))AND((NOT (vt2.c1))))  NULLS LAST;
SELECT DISTINCT * FROM vt0 NATURAL JOIN vt2 WHERE (((((CAST(vt2.c0 AS REAL))GLOB(0Xffffffff875f74fa)))AND((((LIKELIHOOD(vt2.c1, vt2.c1), ((((((((((((vt2.c1)OR(vt0.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c0)), (vt0.c0 IN (vt2.c1))))>=((SQLITE_COMPILEOPTION_GET(vt2.c0), CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END, (((vt0.c0))>(('猪'))))))))) ORDER BY CASE WHEN 'H>^G&F渤^' THEN (('1380355063')==(vt2.c1)) WHEN CAST(vt0.c0 AS NUMERIC) THEN json_type(vt2.c1) ELSE ((((vt2.c0)OR(vt2.c0)))AND(vt0.c0)) END  NULLS LAST, LIKE(((vt0.c0)-(vt0.c0)), ((((NULL)OR(vt2.c0)))OR(vt2.c0)), 'j') DESC  NULLS LAST, ((((((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt2.c0)))OR(CAST(vt2.c0 AS BLOB))))AND((NOT (vt2.c1))))  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE (CAST((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((0X49460f4d))) AS REAL));
SELECT DISTINCT * FROM vt2 WHERE (CAST((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((0X49460f4d))) AS REAL)) INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((('O' COLLATE RTRIM) IS TRUE));
SELECT ALL * FROM vt2 WHERE (CAST((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((0X49460f4d))) AS REAL));
SELECT DISTINCT * FROM vt2 WHERE (CAST((((vt2.c0)) BETWEEN ((vt2.c0)) AND ((0X49460f4d))) AS REAL)) INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((('O' COLLATE RTRIM) IS TRUE));
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (((v0.c3) ISNULL));
SELECT DISTINCT COUNT(*) FROM vt0, vt2, v0 WHERE (((((v0.c3) ISNULL))AND((NOT (((v0.c1) BETWEEN (v0.c1) AND (v0.c1))))))) ORDER BY ((((((-941041463)>=(vt2.c0)))OR(v0.c1)))AND(((v0.c3)&('F''37')))) ASC LIMIT 0x0;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c0)AND(((NULL)%(vt0.c0)))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))))AND(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN '' WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY ABS(x'') ASC;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((((((((vt0.c0)AND(((NULL)%(vt0.c0)))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))))AND(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)))AND(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN '' WHEN vt0.c0 THEN vt0.c0 END)))AND(((((vt0.c0) NOT NULL)) BETWEEN (0.44901020397004365) AND (CAST(NULL AS NUMERIC)))))) ORDER BY ABS(x'') ASC INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE ((- (((vt0.c0) NOTNULL)))) ORDER BY ABS(x'') ASC;
SELECT * FROM vt0, v0 WHERE ((((v0.c0, vt0.c0))>((v0.c0, v0.c2))) COLLATE NOCASE) ORDER BY ((CASE WHEN v0.c2 THEN vt0.c0 WHEN v0.c2 THEN vt0.c0 END) BETWEEN ((((v0.c0, vt0.c0))<((v0.c1, '')))) AND (CAST(v0.c2 AS REAL))) ASC, ((LIKELY(DISTINCT v0.c0)) IS FALSE) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE ((((((v0.c0, vt0.c0))>((v0.c0, v0.c2))) COLLATE NOCASE)AND((NOT (((v0.c3) BETWEEN (v0.c1) AND (vt0.c0))))))) ORDER BY ((CASE WHEN v0.c2 THEN vt0.c0 WHEN v0.c2 THEN vt0.c0 END) BETWEEN ((((v0.c0, vt0.c0))<((v0.c1, '')))) AND (CAST(v0.c2 AS REAL))) ASC, ((LIKELY(DISTINCT v0.c0)) IS FALSE) ASC  NULLS FIRST;
SELECT * FROM vt0, v0 WHERE ((((v0.c0, vt0.c0))>((v0.c0, v0.c2))) COLLATE NOCASE) ORDER BY ((CASE WHEN v0.c2 THEN vt0.c0 WHEN v0.c2 THEN vt0.c0 END) BETWEEN ((((v0.c0, vt0.c0))<((v0.c1, '')))) AND (CAST(v0.c2 AS REAL))) ASC, ((LIKELY(DISTINCT v0.c0)) IS FALSE) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0, v0 WHERE ((((((v0.c0, vt0.c0))>((v0.c0, v0.c2))) COLLATE NOCASE)AND((NOT (((v0.c3) BETWEEN (v0.c1) AND (vt0.c0))))))) ORDER BY ((CASE WHEN v0.c2 THEN vt0.c0 WHEN v0.c2 THEN vt0.c0 END) BETWEEN ((((v0.c0, vt0.c0))<((v0.c1, '')))) AND (CAST(v0.c2 AS REAL))) ASC, ((LIKELY(DISTINCT v0.c0)) IS FALSE) ASC  NULLS FIRST;
SELECT * FROM vt2 WHERE ((~ (vt2.c0 COLLATE BINARY)));
SELECT * FROM vt2 WHERE ((((~ (vt2.c0 COLLATE BINARY)))AND(CASE CAST(vt2.c1 AS REAL)  WHEN vt2.c1 COLLATE RTRIM THEN ((((((vt2.c0)AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)) WHEN (((vt2.c1))!=((vt2.c1))) THEN NULL WHEN vt2.c1 COLLATE RTRIM THEN vt2.c0 END))) ORDER BY CAST(vt2.c1 AS NUMERIC) COLLATE NOCASE  NULLS LAST, CASE (vt2.c0 IN ())  WHEN 'Mt' THEN COALESCE(vt2.c1, vt2.c0, vt2.c0, 0X4d3c260) ELSE (NOT (vt2.c0)) END ASC, (((vt2.c0) NOTNULL) IN ()), 0.17356369842592212 DESC INTERSECT SELECT * FROM vt2 WHERE (TYPEOF(((((((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)))OR(x'e2')))OR(vt2.c0)))OR('')))OR(vt2.c0)))) ORDER BY CAST(vt2.c1 AS NUMERIC) COLLATE NOCASE  NULLS LAST, CASE (vt2.c0 IN ())  WHEN 'Mt' THEN COALESCE(vt2.c1, vt2.c0, vt2.c0, 80986720) ELSE (NOT (vt2.c0)) END ASC, (((vt2.c0) NOTNULL) IN ()), 0.17356369842592212 DESC;
SELECT * FROM vt2 WHERE ((~ (vt2.c0 COLLATE BINARY)));
SELECT * FROM vt2 WHERE ((((~ (vt2.c0 COLLATE BINARY)))AND(CASE CAST(vt2.c1 AS REAL)  WHEN vt2.c1 COLLATE RTRIM THEN ((((((vt2.c0)AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)) WHEN (((vt2.c1))!=((vt2.c1))) THEN NULL WHEN vt2.c1 COLLATE RTRIM THEN vt2.c0 END))) ORDER BY CAST(vt2.c1 AS NUMERIC) COLLATE NOCASE  NULLS LAST, CASE (vt2.c0 IN ())  WHEN 'Mt' THEN COALESCE(vt2.c1, vt2.c0, vt2.c0, 0X4d3c260) ELSE (NOT (vt2.c0)) END ASC, (((vt2.c0) NOTNULL) IN ()), 0.17356369842592212 DESC INTERSECT SELECT * FROM vt2 WHERE (TYPEOF(((((((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)))OR(x'e2')))OR(vt2.c0)))OR('')))OR(vt2.c0)))) ORDER BY CAST(vt2.c1 AS NUMERIC) COLLATE NOCASE  NULLS LAST, CASE (vt2.c0 IN ())  WHEN 'Mt' THEN COALESCE(vt2.c1, vt2.c0, vt2.c0, 80986720) ELSE (NOT (vt2.c0)) END ASC, (((vt2.c0) NOTNULL) IN ()), 0.17356369842592212 DESC;
SELECT MAX(vt2.c1) FROM vt2 WHERE ((((((((+ (vt2.c1)))AND(((vt2.c1)|(vt2.c1)))))AND(x'')))AND(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)));
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE ((((((((+ (vt2.c1)))AND(((vt2.c1)|(vt2.c1)))))AND(x'')))AND(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END))) ORDER BY ((((CHANGES())OR(NULL)))OR((NOT (vt2.c0)))) DESC  NULLS FIRST LIMIT 0X2 INTERSECT SELECT MAX(vt2.c1) FROM vt2 WHERE (((LIKELY(vt2.c1))>>(((vt2.c1)<<(vt2.c0))))) ORDER BY ((((CHANGES())OR(NULL)))OR((NOT (vt2.c0)))) DESC  NULLS FIRST LIMIT 0x2;
SELECT ALL MIN(v0.c3) FROM v0, vt2 WHERE (CASE LIKELY(vt2.c0)  WHEN ((v0.c2)>(vt2.c1)) THEN CAST(vt2.c0 AS TEXT) WHEN v0.c0 COLLATE RTRIM THEN x'' WHEN CASE WHEN 1.090913443E9 THEN vt2.c0 END THEN '0.855711865185379' COLLATE RTRIM WHEN v0.c1 COLLATE NOCASE THEN TYPEOF(1839189666) END);
SELECT ALL MIN(v0.c3) FROM v0, vt2 WHERE (CASE LIKELY(vt2.c0)  WHEN ((v0.c2)>(vt2.c1)) THEN CAST(vt2.c0 AS TEXT) WHEN v0.c0 COLLATE RTRIM THEN x'' WHEN CASE WHEN 1.090913443E9 THEN vt2.c0 END THEN '0.855711865185379' COLLATE RTRIM WHEN v0.c1 COLLATE NOCASE THEN TYPEOF(0x6d9fcea2) END) ORDER BY CAST(-221345677 AS INTEGER) COLLATE RTRIM  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CAST(((v0.c2)AND(v0.c2)) AS TEXT)) ORDER BY ((json_array_length(v0.c1)) NOT BETWEEN (v0.c3) AND (((v0.c3)|(v0.c1)))) DESC, v0.c2  NULLS LAST;
SELECT * FROM v0 WHERE (((CAST(((v0.c2)AND(v0.c2)) AS TEXT))AND(((((((((UNLIKELY(v0.c0))OR((+ (v0.c2)))))AND(CAST(v0.c0 AS BLOB))))OR(((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c3)))))OR(((('.Op95', '^')) BETWEEN ((v0.c2, v0.c0)) AND ((v0.c1, v0.c2)))))))) ORDER BY ((json_array_length(v0.c1)) NOT BETWEEN (v0.c3) AND (((v0.c3)|(v0.c1)))) DESC, v0.c2  NULLS LAST INTERSECT SELECT * FROM v0 WHERE ((((~ (v0.c1)))|(v0.c3))) ORDER BY ((json_array_length(v0.c1)) NOT BETWEEN (v0.c3) AND (((v0.c3)|(v0.c1)))) DESC, v0.c2  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CAST(((v0.c2)AND(v0.c2)) AS TEXT)) ORDER BY ((json_array_length(v0.c1)) NOT BETWEEN (v0.c3) AND (((v0.c3)|(v0.c1)))) DESC, v0.c2  NULLS LAST;
SELECT * FROM v0 WHERE (((CAST(((v0.c2)AND(v0.c2)) AS TEXT))AND(((((((((UNLIKELY(v0.c0))OR((+ (v0.c2)))))AND(CAST(v0.c0 AS BLOB))))OR(((v0.c1) NOT BETWEEN (v0.c3) AND (v0.c3)))))OR(((('.Op95', '^')) BETWEEN ((v0.c2, v0.c0)) AND ((v0.c1, v0.c2)))))))) ORDER BY ((json_array_length(v0.c1)) NOT BETWEEN (v0.c3) AND (((v0.c3)|(v0.c1)))) DESC, v0.c2  NULLS LAST INTERSECT SELECT * FROM v0 WHERE ((((~ (v0.c1)))|(v0.c3))) ORDER BY ((json_array_length(v0.c1)) NOT BETWEEN (v0.c3) AND (((v0.c3)|(v0.c1)))) DESC, v0.c2  NULLS LAST;
SELECT MAX(v0.c2) FROM vt0, vt2, v0 WHERE ((~ (vt2.c1))) ORDER BY ((((+ (v0.c3))))=((HEX(DISTINCT v0.c2))))  NULLS LAST, v0.c3;
SELECT MAX(v0.c2) FROM vt0, vt2, v0 WHERE ((~ (vt2.c1))) ORDER BY ((((+ (v0.c3))))=((HEX(DISTINCT v0.c2))))  NULLS LAST, v0.c3 LIMIT 1;
SELECT MAX(vt2.c0) FROM vt2 WHERE (vt2.c1);
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (((vt2.c1)AND(CAST(((vt2.c1)|(vt2.c1)) AS REAL)))) ORDER BY STRFTIME(vt2.c0, vt2.c0, vt2.c1, vt2.c0) COLLATE BINARY ASC, ((UPPER(vt2.c1)) IS TRUE);
SELECT * FROM v0, vt2 WHERE (0.980704088775018) ORDER BY (~ ((((v0.c1)) BETWEEN ((vt2.c0)) AND ((v0.c2))))) DESC  NULLS LAST, (((((v0.c0, v0.c0))==((v0.c0, vt2.c0)))) BETWEEN (((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c2))) AND (((v0.c0) NOT BETWEEN (x'ea') AND (vt2.c1))));
SELECT ALL * FROM v0, vt2 WHERE (((0.980704088775018)AND((((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((v0.c0)))) IS TRUE)))) ORDER BY 201717734 DESC  NULLS LAST INTERSECT SELECT * FROM v0, vt2 WHERE (((8.6874171E8)-(-8.33993359E8))) ORDER BY 201717734 DESC  NULLS LAST;
SELECT * FROM v0, vt2 WHERE (0.980704088775018) ORDER BY (~ ((((v0.c1)) BETWEEN ((vt2.c0)) AND ((v0.c2))))) DESC  NULLS LAST, (((((v0.c0, v0.c0))==((v0.c0, vt2.c0)))) BETWEEN (((v0.c2) NOT BETWEEN (vt2.c0) AND (v0.c2))) AND (((v0.c0) NOT BETWEEN (x'ea') AND (vt2.c1))));
SELECT ALL * FROM v0, vt2 WHERE (((0.980704088775018)AND((((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((v0.c0)))) IS TRUE)))) ORDER BY 201717734 DESC  NULLS LAST INTERSECT SELECT * FROM v0, vt2 WHERE (((8.6874171E8)-(-8.33993359E8))) ORDER BY 201717734 DESC  NULLS LAST;
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE (((((v0.c2) NOTNULL)) BETWEEN ((vt2.c0 IN ())) AND ((((vt2.c1, v0.c0, v0.c2, '1292702719')) BETWEEN ((vt2.c0, v0.c1, vt2.c1, v0.c1)) AND ((vt0.c0, vt2.c0, v0.c2, v0.c1)))))) ORDER BY (NOT ((((vt2.c1))<((0.8185504420821136))))) ASC  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (((((v0.c2) NOTNULL)) BETWEEN ((vt2.c0 IN ())) AND ((((vt2.c1, v0.c0, v0.c2, '1292702719')) BETWEEN ((vt2.c0, v0.c1, vt2.c1, v0.c1)) AND ((vt0.c0, vt2.c0, v0.c2, v0.c1)))))) ORDER BY (NOT ((((vt2.c1))<((0.8185504420821136))))) ASC  NULLS LAST INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (v0.c1) ORDER BY (NOT ((((vt2.c1))<((0.8185504420821136))))) ASC  NULLS LAST;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((0.8714247357521895) IS FALSE)) ORDER BY (CASE vt0.c0  WHEN x'ae41' THEN vt0.c0 ELSE vt0.c0 END IN (MIN(vt0.c0, vt0.c0, vt0.c0)))  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((0.8714247357521895) IS FALSE)) ORDER BY NULL ASC, CAST(CAST(x'' AS TEXT) AS TEXT) ASC;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c1)<=(vt2.c1))) BETWEEN ('33514151') AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY (((vt0.c0 IN (vt2.c0, vt2.c1))) NOT NULL);
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c1)<=(vt2.c1))) BETWEEN ('33514151') AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY ((CASE vt2.c0  WHEN '1056709318' THEN vt0.c0 END) BETWEEN ((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1)))) AND ((- (vt0.c0)))) ASC, ((((((((((((vt0.c0)AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(vt0.c0)))OR(vt2.c0))) IS FALSE)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((1391894784) BETWEEN (TYPEOF(DISTINCT vt2.c1)) AND ((vt2.c0 IN ())))) ORDER BY ((CASE vt2.c0  WHEN '1056709318' THEN vt0.c0 END) BETWEEN ((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1)))) AND ((- (vt0.c0)))) ASC, ((((((((((((vt0.c0)AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(vt0.c0)))OR(vt2.c0))) IS FALSE)  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c1)<=(vt2.c1))) BETWEEN ('33514151') AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY (((vt0.c0 IN (vt2.c0, vt2.c1))) NOT NULL);
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c1)<=(vt2.c1))) BETWEEN ('33514151') AND (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY ((CASE vt2.c0  WHEN '1056709318' THEN vt0.c0 END) BETWEEN ((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1)))) AND ((- (vt0.c0)))) ASC, ((((((((((((vt0.c0)AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(vt0.c0)))OR(vt2.c0))) IS FALSE)  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE (((1391894784) BETWEEN (TYPEOF(DISTINCT vt2.c1)) AND ((vt2.c0 IN ())))) ORDER BY ((CASE vt2.c0  WHEN '1056709318' THEN vt0.c0 END) BETWEEN ((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c1)))) AND ((- (vt0.c0)))) ASC, ((((((((((((vt0.c0)AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c0)))AND(vt0.c0)))OR(vt2.c0))) IS FALSE)  NULLS FIRST;
SELECT MAX(v0.c2) FROM v0, vt2, vt0 WHERE ((((x'') ISNULL) IN (((v0.c1) IS FALSE))));
SELECT DISTINCT MAX(v0.c2) FROM v0, vt2, vt0 WHERE ((((((x'') ISNULL) IN (((v0.c1) IS FALSE))))AND((- (((v0.c1) BETWEEN (v0.c2) AND (vt2.c1))))))) ORDER BY ((-1.727422081E9) ISNULL) DESC, 0.7807732688761823  NULLS LAST INTERSECT SELECT DISTINCT MAX(v0.c2) FROM v0, vt2, vt0 WHERE (CAST((((vt2.c0))>=((''))) AS REAL)) ORDER BY ((-1.727422081E9) ISNULL) DESC, 0.7807732688761823  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 LEFT OUTER JOIN vt2 ON ((((v0.c0) NOT BETWEEN ('TRUE') AND (vt2.c1))) NOTNULL) INNER JOIN vt0 ON ((vt0.c0) NOT BETWEEN (CAST(vt2.c1 AS BLOB)) AND ((NOT (v0.c0)))) WHERE (CAST('Er' AS REAL)) ORDER BY (((vt2.c1, v0.c1, v0.c0)) NOT BETWEEN ((vt0.c0, v0.c1, 0.8260884269565593)) AND ((vt0.c0, x'83', v0.c2))) COLLATE BINARY ASC, ((IFNULL(v0.c2, v0.c0))<(json_extract(vt2.c1, vt0.c0))) ASC, (NOT (0.03375900231375717))  NULLS FIRST;
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt2 ON ((((v0.c0) NOT BETWEEN ('TRUE') AND (vt2.c1))) NOTNULL) INNER JOIN vt0 ON ((vt0.c0) NOT BETWEEN (CAST(vt2.c1 AS BLOB)) AND ((NOT (v0.c0)))) WHERE (CAST('Er' AS REAL)) ORDER BY (((vt2.c1, v0.c1, v0.c0)) NOT BETWEEN ((vt0.c0, v0.c1, 0.8260884269565593)) AND ((vt0.c0, x'83', v0.c2))) COLLATE BINARY ASC, ((IFNULL(v0.c2, v0.c0))<(json_extract(vt2.c1, vt0.c0))) ASC, (NOT (0.03375900231375717))  NULLS FIRST;
SELECT MAX(v0.c2) FROM v0, vt2, vt0 WHERE (((v0.c0) NOTNULL) COLLATE NOCASE) ORDER BY CASE vt0.c0 COLLATE BINARY  WHEN '1284633581' THEN ((vt0.c0) BETWEEN (v0.c3) AND (v0.c2)) WHEN CAST(NULL AS TEXT) THEN ((vt0.c0)>(v0.c0)) END ASC, ((((v0.c2)<>(v0.c1))) BETWEEN (((x'11') NOT BETWEEN (v0.c1) AND (v0.c3))) AND (NULL))  NULLS LAST;
SELECT ALL MAX(v0.c2) FROM v0, vt2, vt0 WHERE (((v0.c0) NOTNULL) COLLATE NOCASE) ORDER BY ((v0.c3 IN ()) IN ()), (((((vt2.c0))<=((v0.c3)))) NOT BETWEEN ((vt0.c0 IN ())) AND (CAST(v0.c3 AS INTEGER)))  NULLS LAST LIMIT 0;
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE (x'fc') ORDER BY (((v0.c2, v0.c3)) BETWEEN ((vt2.c0 COLLATE RTRIM, ((vt2.c1) NOTNULL))) AND (('-1165434253', CAST(v0.c0 AS INTEGER)))) ASC  NULLS LAST, 'LpK';
SELECT COUNT(*) FROM v0, vt2, vt0 WHERE (((x'fc')AND((~ (((v0.c3)&(vt2.c1))))))) ORDER BY (((v0.c2, v0.c3)) BETWEEN ((vt2.c0 COLLATE RTRIM, ((vt2.c1) NOTNULL))) AND (('-1165434253', CAST(v0.c0 AS INTEGER)))) ASC  NULLS LAST, 'LpK' LIMIT 0x2;
SELECT MAX(vt0.c0) FROM vt0 WHERE (((((((vt0.c0)OR(vt0.c0)))AND(((vt0.c0)<>('-1006256381')))))OR((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE (((((((((vt0.c0)OR(vt0.c0)))AND(((vt0.c0)<>('-1006256381')))))OR((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0))))))AND(CAST(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END AS REAL)))) LIMIT 3;
SELECT ALL * FROM vt0 INNER JOIN v0 ON CAST(LIKELY(v0.c2) AS TEXT) NATURAL JOIN vt2 WHERE (CAST(v0.c1 COLLATE BINARY AS REAL)) ORDER BY 0.23969567288651195 ASC  NULLS FIRST;
SELECT * FROM vt0 INNER JOIN v0 ON CAST(LIKELY(v0.c2) AS TEXT) NATURAL JOIN vt2 WHERE (CAST(v0.c1 COLLATE BINARY AS REAL)) ORDER BY 0.23969567288651195 ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt0 INNER JOIN v0 ON CAST(LIKELY(v0.c2) AS TEXT) NATURAL JOIN vt2 WHERE (((((((vt2.c0, v0.c1, vt0.c0)) NOT BETWEEN ((vt2.c1, v0.c2, vt2.c0)) AND ((vt2.c0, v0.c0, v0.c0))), (NOT (vt0.c0))))>=((((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c3)), '	e뭩')))) ORDER BY 0.23969567288651195 ASC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt0 INNER JOIN v0 ON CAST(LIKELY(v0.c2) AS TEXT) NATURAL JOIN vt2 WHERE (CAST(v0.c1 COLLATE BINARY AS REAL)) ORDER BY 0.23969567288651195 ASC  NULLS FIRST;
SELECT * FROM vt0 INNER JOIN v0 ON CAST(LIKELY(v0.c2) AS TEXT) NATURAL JOIN vt2 WHERE (CAST(v0.c1 COLLATE BINARY AS REAL)) ORDER BY 0.23969567288651195 ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT ALL * FROM vt0 INNER JOIN v0 ON CAST(LIKELY(v0.c2) AS TEXT) NATURAL JOIN vt2 WHERE (((((((vt2.c0, v0.c1, vt0.c0)) NOT BETWEEN ((vt2.c1, v0.c2, vt2.c0)) AND ((vt2.c0, v0.c0, v0.c0))), (NOT (vt0.c0))))>=((((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c3)), '	e뭩')))) ORDER BY 0.23969567288651195 ASC  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt2, v0 WHERE ((v0.c2 IN ()) COLLATE RTRIM) ORDER BY (UPPER(DISTINCT vt2.c1) IN ((((vt2.c0, vt2.c1)) BETWEEN ((v0.c0, v0.c0)) AND ((vt2.c1, v0.c1))), (v0.c1 IN (v0.c3, v0.c3)), 0.4368736615039488, ((v0.c0) NOT BETWEEN (NULL) AND (v0.c0)))) DESC  NULLS FIRST, (((UNLIKELY(DISTINCT v0.c2), (((vt2.c0, vt2.c1, v0.c0, vt2.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c0, v0.c1)) AND ((v0.c1, vt2.c0, vt2.c0, vt2.c1))), 0.960366360625052))=(((+ (v0.c0)), (NOT (vt2.c1)), ((vt2.c1) IS TRUE)))) ASC  NULLS LAST;
SELECT * FROM vt2, v0 WHERE ((v0.c2 IN ()) COLLATE RTRIM) ORDER BY (UPPER(DISTINCT vt2.c1) IN ((((vt2.c0, vt2.c1)) BETWEEN ((v0.c0, v0.c0)) AND ((vt2.c1, v0.c1))), (v0.c1 IN (v0.c3, v0.c3)), 0.4368736615039488, ((v0.c0) NOT BETWEEN (NULL) AND (v0.c0)))) DESC  NULLS FIRST, (((UNLIKELY(DISTINCT v0.c2), (((vt2.c0, vt2.c1, v0.c0, vt2.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c0, v0.c1)) AND ((v0.c1, vt2.c0, vt2.c0, vt2.c1))), 0.960366360625052))=(((+ (v0.c0)), (NOT (vt2.c1)), ((vt2.c1) IS TRUE)))) ASC  NULLS LAST LIMIT 0x1;
SELECT * FROM vt2, v0 WHERE ((v0.c2 IN ()) COLLATE RTRIM) ORDER BY (UPPER(DISTINCT vt2.c1) IN ((((vt2.c0, vt2.c1)) BETWEEN ((v0.c0, v0.c0)) AND ((vt2.c1, v0.c1))), (v0.c1 IN (v0.c3, v0.c3)), 0.4368736615039488, ((v0.c0) NOT BETWEEN (NULL) AND (v0.c0)))) DESC  NULLS FIRST, (((UNLIKELY(DISTINCT v0.c2), (((vt2.c0, vt2.c1, v0.c0, vt2.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c0, v0.c1)) AND ((v0.c1, vt2.c0, vt2.c0, vt2.c1))), 0.960366360625052))=(((+ (v0.c0)), (NOT (vt2.c1)), ((vt2.c1) IS TRUE)))) ASC  NULLS LAST;
SELECT * FROM vt2, v0 WHERE ((v0.c2 IN ()) COLLATE RTRIM) ORDER BY (UPPER(DISTINCT vt2.c1) IN ((((vt2.c0, vt2.c1)) BETWEEN ((v0.c0, v0.c0)) AND ((vt2.c1, v0.c1))), (v0.c1 IN (v0.c3, v0.c3)), 0.4368736615039488, ((v0.c0) NOT BETWEEN (NULL) AND (v0.c0)))) DESC  NULLS FIRST, (((UNLIKELY(DISTINCT v0.c2), (((vt2.c0, vt2.c1, v0.c0, vt2.c0)) NOT BETWEEN ((v0.c1, v0.c1, v0.c0, v0.c1)) AND ((v0.c1, vt2.c0, vt2.c0, vt2.c1))), 0.960366360625052))=(((+ (v0.c0)), (NOT (vt2.c1)), ((vt2.c1) IS TRUE)))) ASC  NULLS LAST LIMIT 0x1;
SELECT * FROM vt0 LEFT OUTER JOIN v0 ON ((((vt2.c0)*(v0.c1))) NOT BETWEEN (((v0.c0) BETWEEN (0.5386248511963987) AND (v0.c2))) AND ((NOT (v0.c2)))) INNER JOIN vt2 ON ((CAST(0.6252216085866287 AS BLOB))<(((((((((v0.c2)AND(v0.c0)))OR(v0.c1)))AND(v0.c1)))OR(vt0.c0)))) WHERE (CAST(CAST(0.27638570023133135 AS BLOB) AS INTEGER));
SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN v0 ON ((((vt2.c0)*(v0.c1))) NOT BETWEEN (((v0.c0) BETWEEN (0.5386248511963987) AND (v0.c2))) AND ((NOT (v0.c2)))) INNER JOIN vt2 ON ((CAST(0.6252216085866287 AS BLOB))<(((((((((v0.c2)AND(v0.c0)))OR(v0.c1)))AND(v0.c1)))OR(vt0.c0)))) WHERE (((CAST(CAST(0.27638570023133135 AS BLOB) AS INTEGER))AND(CAST(CASE vt0.c0  WHEN vt2.c0 THEN v0.c2 WHEN vt2.c1 THEN v0.c3 WHEN vt0.c0 THEN v0.c1 END AS TEXT)))) INTERSECT SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN v0 ON ((((vt2.c0)*(v0.c1))) NOT BETWEEN (((v0.c0) BETWEEN (0.5386248511963987) AND (v0.c2))) AND ((NOT (v0.c2)))) INNER JOIN vt2 ON ((CAST(0.6252216085866287 AS BLOB))<(((((((((v0.c2)AND(v0.c0)))OR(v0.c1)))AND(v0.c1)))OR(vt0.c0)))) WHERE (((((vt0.c0) BETWEEN (vt2.c0) AND (vt2.c0)))-((v0.c3 IN (0.6087319421837094, v0.c3)))));
SELECT * FROM vt0 LEFT OUTER JOIN v0 ON ((((vt2.c0)*(v0.c1))) NOT BETWEEN (((v0.c0) BETWEEN (0.5386248511963987) AND (v0.c2))) AND ((NOT (v0.c2)))) INNER JOIN vt2 ON ((CAST(0.6252216085866287 AS BLOB))<(((((((((v0.c2)AND(v0.c0)))OR(v0.c1)))AND(v0.c1)))OR(vt0.c0)))) WHERE (CAST(CAST(0.27638570023133135 AS BLOB) AS INTEGER));
SELECT ALL * FROM vt0, v0 WHERE ('d' COLLATE RTRIM) ORDER BY v0.c0 ASC  NULLS FIRST, ((COALESCE(v0.c0, v0.c3)) ISNULL) ASC;
SELECT * FROM vt0, v0 WHERE ('d' COLLATE RTRIM) ORDER BY v0.c0 ASC  NULLS FIRST, ((COALESCE(v0.c0, v0.c3)) ISNULL) ASC INTERSECT SELECT * FROM vt0, v0 WHERE (CASE ((v0.c2)<=(v0.c2))  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c1)) ELSE NULL END) ORDER BY v0.c0 ASC  NULLS FIRST, ((COALESCE(v0.c0, v0.c3)) ISNULL) ASC;
SELECT ALL * FROM vt0, v0 WHERE ('d' COLLATE RTRIM) ORDER BY v0.c0 ASC  NULLS FIRST, ((COALESCE(v0.c0, v0.c3)) ISNULL) ASC;
SELECT * FROM vt0, v0 WHERE ('d' COLLATE RTRIM) ORDER BY v0.c0 ASC  NULLS FIRST, ((COALESCE(v0.c0, v0.c3)) ISNULL) ASC INTERSECT SELECT * FROM vt0, v0 WHERE (CASE ((v0.c2)<=(v0.c2))  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c1)) ELSE NULL END) ORDER BY v0.c0 ASC  NULLS FIRST, ((COALESCE(v0.c0, v0.c3)) ISNULL) ASC;
SELECT MIN(v0.c3) FROM v0 WHERE (CASE ((((((((((v0.c1)AND(v0.c2)))AND(v0.c2)))OR(v0.c2)))AND(v0.c2)))OR(v0.c1))  WHEN v0.c3 THEN (- (v0.c3)) WHEN ((v0.c3) BETWEEN ('630780227') AND (0.42951403877231065)) THEN CASE WHEN v0.c0 THEN v0.c3 ELSE v0.c2 END END) ORDER BY ((((x'be39', v0.c1)) BETWEEN ((v0.c2, v0.c3)) AND ((v0.c2, v0.c1))) IN ())  NULLS FIRST;
SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE (((CASE ((((((((((v0.c1)AND(v0.c2)))AND(v0.c2)))OR(v0.c2)))AND(v0.c2)))OR(v0.c1))  WHEN v0.c3 THEN (- (v0.c3)) WHEN ((v0.c3) BETWEEN ('630780227') AND (0.42951403877231065)) THEN CASE WHEN v0.c0 THEN v0.c3 ELSE v0.c2 END END)AND((~ ((v0.c0 IN ())))))) ORDER BY ((((x'be39', v0.c1)) BETWEEN ((v0.c2, v0.c3)) AND ((v0.c2, v0.c1))) IN ())  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE (COALESCE(CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c0 END, vt2.c1, v0.c0 COLLATE NOCASE));
SELECT * FROM v0, vt2, vt0 WHERE (((COALESCE(CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c0 END, vt2.c1, v0.c0 COLLATE NOCASE))AND((NOT (CAST(v0.c2 AS REAL)))))) ORDER BY CAST(vt2.c1 AS NUMERIC) DESC, ((vt0.c0)LIKE(vt2.c1)) COLLATE RTRIM, ((CAST(vt0.c0 AS BLOB)) ISNULL)  NULLS FIRST LIMIT 0X3;
SELECT * FROM v0, vt2, vt0 WHERE (COALESCE(CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c0 END, vt2.c1, v0.c0 COLLATE NOCASE));
SELECT * FROM v0, vt2, vt0 WHERE (((COALESCE(CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c0 END, vt2.c1, v0.c0 COLLATE NOCASE))AND((NOT (CAST(v0.c2 AS REAL)))))) ORDER BY CAST(vt2.c1 AS NUMERIC) DESC, ((vt0.c0)LIKE(vt2.c1)) COLLATE RTRIM, ((CAST(vt0.c0 AS BLOB)) ISNULL)  NULLS FIRST LIMIT 0X3;
SELECT MAX(v0.c0) FROM v0, vt2 WHERE (((0.5942121031674594)+(((((-1727422081)AND(v0.c0)))OR(v0.c1)))));
SELECT MAX(v0.c0) FROM v0, vt2 WHERE (((((0.5942121031674594)+(((((0xffffffff9909a17f)AND(v0.c0)))OR(v0.c1)))))AND((((((v0.c1, v0.c3, '+0U1', v0.c0))==(('0.27599954684292793', v0.c0, v0.c1, v0.c1))))<<((v0.c1 IN ())))))) INTERSECT SELECT ALL MAX(v0.c0) FROM v0, vt2 WHERE (((CAST(x'd1' AS TEXT))IS(x'f9')));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c1 IN (v0.c1))) IS TRUE)) ORDER BY ('0.2848535192601853' IN ()) DESC  NULLS FIRST, CASE vt2.c0  WHEN x'ff7625aa' THEN (~ (vt2.c1)) WHEN vt2.c1 COLLATE RTRIM THEN TRIM(DISTINCT vt2.c1) WHEN ((vt2.c0) IS FALSE) THEN ((v0.c1) NOT NULL) END;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((v0.c1 IN (v0.c1))) IS TRUE))AND(((v0.c2 COLLATE BINARY)||(v0.c0))))) ORDER BY ('0.2848535192601853' IN ()) DESC  NULLS FIRST, CASE vt2.c0  WHEN x'ff7625aa' THEN (~ (vt2.c1)) WHEN vt2.c1 COLLATE RTRIM THEN TRIM(DISTINCT vt2.c1) WHEN ((vt2.c0) IS FALSE) THEN ((v0.c1) NOT NULL) END;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c1 IN (v0.c1))) IS TRUE)) ORDER BY ('0.2848535192601853' IN ()) DESC  NULLS FIRST, CASE vt2.c0  WHEN x'ff7625aa' THEN (~ (vt2.c1)) WHEN vt2.c1 COLLATE RTRIM THEN TRIM(DISTINCT vt2.c1) WHEN ((vt2.c0) IS FALSE) THEN ((v0.c1) NOT NULL) END;
SELECT MIN(vt0.c0) FROM vt0 NOT INDEXED WHERE (((((vt0.c0)-(vt0.c0)))+(((vt0.c0) ISNULL))));
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((vt0.c0)-(vt0.c0)))+(((vt0.c0) ISNULL)))) ORDER BY CASE ((vt0.c0)AND(vt0.c0))  WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN json(vt0.c0) THEN (NOT (vt0.c0)) WHEN (vt0.c0 IN ()) THEN (+ (vt0.c0)) WHEN ((vt0.c0)LIKE('')) THEN ((vt0.c0)>(vt0.c0)) END  NULLS FIRST, ((vt0.c0) NOTNULL) COLLATE NOCASE  NULLS LAST;
SELECT MIN(vt2.c0) FROM vt2 CROSS JOIN vt0 ON CASE WHEN '515048936' COLLATE RTRIM THEN SQLITE_COMPILEOPTION_USED(vt2.c0) WHEN ((vt2.c0)|(vt2.c1)) THEN (- (vt0.c0)) WHEN ((((vt2.c0)AND(vt2.c0)))AND(vt2.c0)) THEN CAST(vt2.c0 AS NUMERIC) WHEN ((((((vt0.c0)AND(NULL)))OR(vt2.c1)))OR(vt2.c0)) THEN '-387031235' END WHERE (CAST((vt0.c0 IN (vt0.c0)) AS NUMERIC));
SELECT MIN(vt2.c0) FROM vt2 CROSS JOIN vt0 ON CASE WHEN '515048936' COLLATE RTRIM THEN SQLITE_COMPILEOPTION_USED(vt2.c0) WHEN ((vt2.c0)|(vt2.c1)) THEN (- (vt0.c0)) WHEN ((((vt2.c0)AND(vt2.c0)))AND(vt2.c0)) THEN CAST(vt2.c0 AS NUMERIC) WHEN ((((((vt0.c0)AND(NULL)))OR(vt2.c1)))OR(vt2.c0)) THEN '-387031235' END WHERE (((CAST((vt0.c0 IN (vt0.c0)) AS NUMERIC))AND((((CASE vt2.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 END, ((vt2.c0) BETWEEN (0.2423904930873102) AND (vt2.c1)), CASE WHEN vt0.c0 THEN 'k' WHEN vt0.c0 THEN vt2.c1 END))<>((CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 END, CAST(vt2.c1 AS BLOB), vt0.c0))))));
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((CAST(vt0.c0 AS NUMERIC))<=(((v0.c3)|(v0.c2)))));
SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((CAST(vt0.c0 AS NUMERIC))<=(((v0.c3)|(v0.c2))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((vt2.c1)IS(v0.c1)))>=((((v0.c3, v0.c1, vt2.c0))<=((vt2.c1, '!PW<Q', vt0.c0)))))) LIMIT 0;
SELECT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((CAST(vt0.c0 AS NUMERIC))<=(((v0.c3)|(v0.c2)))));
SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((CAST(vt0.c0 AS NUMERIC))<=(((v0.c3)|(v0.c2))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((vt2.c1)IS(v0.c1)))>=((((v0.c3, v0.c1, vt2.c0))<=((vt2.c1, '!PW<Q', vt0.c0)))))) LIMIT 0;
SELECT MAX(v0.c3) FROM v0 LEFT OUTER JOIN vt2 ON ((((((v0.c1)AND((NOT (v0.c1)))))AND(vt2.c0 COLLATE BINARY)))AND((~ (v0.c0)))) WHERE ((((((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))) NOT BETWEEN ((+ (v0.c3))) AND (v0.c2)));
SELECT DISTINCT MAX(v0.c3) FROM v0 INNER JOIN vt2 ON ((((((v0.c1)AND((NOT (v0.c1)))))AND(vt2.c0 COLLATE BINARY)))AND((~ (v0.c0)))) WHERE ((((((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0)))) NOT BETWEEN ((+ (v0.c3))) AND (v0.c2))) ORDER BY ((((vt2.c1) IS TRUE))==((((v0.c2, v0.c1, v0.c0))<=((vt2.c1, v0.c2, v0.c2))))) ASC  NULLS LAST, ((((v0.c3)OR(v0.c0)))AND(vt2.c1)) COLLATE NOCASE ASC  NULLS FIRST, ((v0.c0)<=(v0.c1 COLLATE NOCASE))  NULLS LAST;
SELECT ALL * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON ((vt0.c0)-(vt0.c0)) COLLATE BINARY WHERE ((((((v0.c0, vt2.c1, '5q[]~)')) BETWEEN ((v0.c1, vt2.c0, '1702837040')) AND ((v0.c2, v0.c2, vt2.c0)))) NOT BETWEEN (ABS(vt2.c1)) AND (CASE 'Q*'  WHEN vt0.c0 THEN vt2.c0 END)));
SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON ((vt0.c0)-(vt0.c0)) COLLATE BINARY WHERE ((((((((v0.c0, vt2.c1, '5q[]~)')) BETWEEN ((v0.c1, vt2.c0, '1702837040')) AND ((v0.c2, v0.c2, vt2.c0)))) NOT BETWEEN (ABS(vt2.c1)) AND (CASE 'Q*'  WHEN vt0.c0 THEN vt2.c0 END)))AND(CAST(v0.c2 AS NUMERIC)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON ((vt0.c0)-(vt0.c0)) COLLATE BINARY WHERE (((LTRIM(v0.c1, vt2.c0)) NOTNULL)) LIMIT 0;
SELECT ALL * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON ((vt0.c0)-(vt0.c0)) COLLATE BINARY WHERE ((((((v0.c0, vt2.c1, '5q[]~)')) BETWEEN ((v0.c1, vt2.c0, '1702837040')) AND ((v0.c2, v0.c2, vt2.c0)))) NOT BETWEEN (ABS(vt2.c1)) AND (CASE 'Q*'  WHEN vt0.c0 THEN vt2.c0 END)));
SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON ((vt0.c0)-(vt0.c0)) COLLATE BINARY WHERE ((((((((v0.c0, vt2.c1, '5q[]~)')) BETWEEN ((v0.c1, vt2.c0, '1702837040')) AND ((v0.c2, v0.c2, vt2.c0)))) NOT BETWEEN (ABS(vt2.c1)) AND (CASE 'Q*'  WHEN vt0.c0 THEN vt2.c0 END)))AND(CAST(v0.c2 AS NUMERIC)))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 LEFT OUTER JOIN vt2 ON ((vt0.c0)-(vt0.c0)) COLLATE BINARY WHERE (((LTRIM(v0.c1, vt2.c0)) NOTNULL)) LIMIT 0;
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE (CAST(v0.c1 AS BLOB) COLLATE BINARY);
SELECT DISTINCT COUNT(*) FROM v0, vt2, vt0 WHERE (((CAST(v0.c1 AS BLOB) COLLATE BINARY)AND(NULL))) ORDER BY ((0.5890975387282265)&((NOT (vt2.c0)))) DESC LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt2, v0 WHERE ((COALESCE(v0.c2, vt2.c1) IN (v0.c0 COLLATE BINARY))) ORDER BY (- (((((v0.c1)OR(v0.c3)))AND(v0.c2))))  NULLS FIRST;
SELECT COUNT(*) FROM vt2, v0 WHERE ((((COALESCE(v0.c2, vt2.c1) IN (v0.c0 COLLATE BINARY)))AND((((v0.c1)||(x'5dd6')) IN ())))) ORDER BY NULL  NULLS FIRST;
SELECT COUNT(*) FROM vt2, vt0 WHERE (((((CASE vt2.c1  WHEN -9.41041463E8 THEN vt0.c0 END)OR(((vt2.c1)IS NOT(vt2.c1)))))AND(-3.88835817E8))) ORDER BY CAST(CAST(vt0.c0 AS TEXT) AS INTEGER) DESC, CASE WHEN ((((((vt2.c0)AND(vt2.c0)))OR('<W')))AND(x'01eb5c4916')) THEN (((vt2.c1, vt0.c0, vt2.c0)) BETWEEN ((vt0.c0, vt0.c0, vt2.c0)) AND ((vt0.c0, 'Gx', vt0.c0))) ELSE (NOT (vt0.c0)) END  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2, vt0 WHERE (((((((CASE vt2.c1  WHEN -9.41041463E8 THEN vt0.c0 END)OR(((vt2.c1)IS NOT(vt2.c1)))))AND(-3.88835817E8)))AND(SQLITE_VERSION()))) ORDER BY ((CAST(vt2.c0 AS BLOB)) NOT BETWEEN (((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))) AND (INSTR(vt2.c0, vt0.c0))) DESC, ((CASE WHEN vt2.c0 THEN vt2.c1 END) IS TRUE) DESC;
SELECT ALL COUNT(*) FROM vt2, v0 WHERE (CAST((v0.c0 IN (vt2.c0)) AS BLOB));
SELECT COUNT(*) FROM vt2, v0 WHERE (CAST((v0.c0 IN (vt2.c0)) AS BLOB)) ORDER BY '430031154' DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL COUNT(*) FROM vt2, v0 WHERE (((((vt2.c1) NOT BETWEEN (v0.c3) AND (v0.c1))) BETWEEN (((vt2.c1) NOTNULL)) AND (CASE WHEN v0.c2 THEN vt2.c0 WHEN v0.c3 THEN v0.c2 ELSE vt2.c1 END))) ORDER BY '430031154' DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM vt2, v0 WHERE (v0.c1);
SELECT DISTINCT * FROM vt2, v0 WHERE (v0.c1) ORDER BY (- (CAST(v0.c1 AS BLOB))) ASC, (v0.c3 IN ()) COLLATE RTRIM  NULLS LAST, (((vt2.c0, vt2.c0)) NOT BETWEEN ((CAST(v0.c1 AS BLOB), CASE WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)) AND ((((v0.c2)LIKE(vt2.c1)), v0.c0 COLLATE BINARY))) DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE ((CASE vt2.c0  WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 END IN (((v0.c2)AND(v0.c1)), ((v0.c1)LIKE('eJ喥ag㬶I'))))) ORDER BY (- (CAST(v0.c1 AS BLOB))) ASC, (v0.c3 IN ()) COLLATE RTRIM  NULLS LAST, (((vt2.c0, vt2.c0)) NOT BETWEEN ((CAST(v0.c1 AS BLOB), CASE WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)) AND ((((v0.c2)LIKE(vt2.c1)), v0.c0 COLLATE BINARY))) DESC LIMIT 0X0;
SELECT * FROM vt2, v0 WHERE (v0.c1);
SELECT DISTINCT * FROM vt2, v0 WHERE (v0.c1) ORDER BY (- (CAST(v0.c1 AS BLOB))) ASC, (v0.c3 IN ()) COLLATE RTRIM  NULLS LAST, (((vt2.c0, vt2.c0)) NOT BETWEEN ((CAST(v0.c1 AS BLOB), CASE WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)) AND ((((v0.c2)LIKE(vt2.c1)), v0.c0 COLLATE BINARY))) DESC LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE ((CASE vt2.c0  WHEN vt2.c1 THEN v0.c3 WHEN v0.c1 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 END IN (((v0.c2)AND(v0.c1)), ((v0.c1)LIKE('eJ喥ag㬶I'))))) ORDER BY (- (CAST(v0.c1 AS BLOB))) ASC, (v0.c3 IN ()) COLLATE RTRIM  NULLS LAST, (((vt2.c0, vt2.c0)) NOT BETWEEN ((CAST(v0.c1 AS BLOB), CASE WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END)) AND ((((v0.c2)LIKE(vt2.c1)), v0.c0 COLLATE BINARY))) DESC LIMIT 0X0;
SELECT * FROM v0 WHERE ((+ (CAST(v0.c2 AS NUMERIC)))) ORDER BY CASE WHEN (~ (v0.c2)) THEN v0.c2 WHEN ((v0.c0)+(v0.c1)) THEN (- (v0.c1)) WHEN (- (v0.c0)) THEN ((v0.c3)>(v0.c1)) END  NULLS FIRST, CASE ((v0.c0) IS FALSE)  WHEN CAST(x'' AS NUMERIC) THEN v0.c1 ELSE (0x1223f270 IN (v0.c2)) END ASC;
SELECT ALL * FROM v0 WHERE ((((+ (CAST(v0.c2 AS NUMERIC))))AND(((((((((NULL)OR(((v0.c0) ISNULL))))AND(v0.c1 COLLATE BINARY)))OR(((v0.c3) NOT BETWEEN (v0.c3) AND (x'87')))))OR(v0.c0))))) ORDER BY CASE WHEN (~ (v0.c2)) THEN v0.c2 WHEN ((v0.c0)+(v0.c1)) THEN (- (v0.c1)) WHEN (- (v0.c0)) THEN ((v0.c3)>(v0.c1)) END  NULLS FIRST, CASE ((v0.c0) IS FALSE)  WHEN CAST(x'' AS NUMERIC) THEN v0.c1 ELSE (0x1223f270 IN (v0.c2)) END ASC LIMIT 4 INTERSECT SELECT ALL * FROM v0 WHERE ((((((v0.c3) NOTNULL), ((v0.c1) BETWEEN (v0.c1) AND (x'ae')), TRIM(DISTINCT v0.c2, v0.c1)))<=((CAST(v0.c0 AS REAL), ((v0.c2) BETWEEN (v0.c1) AND (v0.c1)), (+ (v0.c3)))))) ORDER BY CASE WHEN (~ (v0.c2)) THEN v0.c2 WHEN ((v0.c0)+(v0.c1)) THEN (- (v0.c1)) WHEN (- (v0.c0)) THEN ((v0.c3)>(v0.c1)) END  NULLS FIRST, CASE ((v0.c0) IS FALSE)  WHEN CAST(x'' AS NUMERIC) THEN v0.c1 ELSE (304345712 IN (v0.c2)) END ASC LIMIT 0X4;
SELECT * FROM v0 WHERE ((+ (CAST(v0.c2 AS NUMERIC)))) ORDER BY CASE WHEN (~ (v0.c2)) THEN v0.c2 WHEN ((v0.c0)+(v0.c1)) THEN (- (v0.c1)) WHEN (- (v0.c0)) THEN ((v0.c3)>(v0.c1)) END  NULLS FIRST, CASE ((v0.c0) IS FALSE)  WHEN CAST(x'' AS NUMERIC) THEN v0.c1 ELSE (0x1223f270 IN (v0.c2)) END ASC;
SELECT ALL * FROM v0 WHERE ((((+ (CAST(v0.c2 AS NUMERIC))))AND(((((((((NULL)OR(((v0.c0) ISNULL))))AND(v0.c1 COLLATE BINARY)))OR(((v0.c3) NOT BETWEEN (v0.c3) AND (x'87')))))OR(v0.c0))))) ORDER BY CASE WHEN (~ (v0.c2)) THEN v0.c2 WHEN ((v0.c0)+(v0.c1)) THEN (- (v0.c1)) WHEN (- (v0.c0)) THEN ((v0.c3)>(v0.c1)) END  NULLS FIRST, CASE ((v0.c0) IS FALSE)  WHEN CAST(x'' AS NUMERIC) THEN v0.c1 ELSE (0x1223f270 IN (v0.c2)) END ASC LIMIT 4 INTERSECT SELECT ALL * FROM v0 WHERE ((((((v0.c3) NOTNULL), ((v0.c1) BETWEEN (v0.c1) AND (x'ae')), TRIM(DISTINCT v0.c2, v0.c1)))<=((CAST(v0.c0 AS REAL), ((v0.c2) BETWEEN (v0.c1) AND (v0.c1)), (+ (v0.c3)))))) ORDER BY CASE WHEN (~ (v0.c2)) THEN v0.c2 WHEN ((v0.c0)+(v0.c1)) THEN (- (v0.c1)) WHEN (- (v0.c0)) THEN ((v0.c3)>(v0.c1)) END  NULLS FIRST, CASE ((v0.c0) IS FALSE)  WHEN CAST(x'' AS NUMERIC) THEN v0.c1 ELSE (304345712 IN (v0.c2)) END ASC LIMIT 0X4;
SELECT MAX(v0.c3) FROM vt2 LEFT OUTER JOIN v0 ON v0.c3 NATURAL JOIN vt0 WHERE (json_array_length(((x'e9')-(vt2.c1)))) ORDER BY (((v0.c1)) BETWEEN ((((vt2.c0) BETWEEN (vt2.c0) AND (v0.c0)))) AND ((((((((v0.c1)OR(vt2.c1)))AND(vt0.c0)))AND(v0.c0)))))  NULLS LAST, ((CAST(vt2.c1 AS TEXT)) IS FALSE)  NULLS FIRST;
SELECT MAX(v0.c3) FROM vt2 LEFT OUTER JOIN v0 ON v0.c3 NATURAL JOIN vt0 WHERE (json_array_length(((x'e9')-(vt2.c1)))) ORDER BY (+ (v0.c2))  NULLS LAST, (v0.c0 IN ((((vt2.c1, v0.c2))<((vt2.c1, vt0.c0))))) INTERSECT SELECT MAX(v0.c3) FROM vt2 LEFT OUTER JOIN v0 ON v0.c3 NATURAL JOIN vt0 WHERE (((v0.c1) NOT BETWEEN (((0.7943399374185435) NOT BETWEEN (vt2.c0) AND (v0.c3))) AND (((v0.c2) ISNULL)))) ORDER BY (+ (v0.c2))  NULLS LAST, (v0.c0 IN ((((vt2.c1, v0.c2))<((vt2.c1, vt0.c0)))));
SELECT ALL * FROM vt0, v0 WHERE (x'49b2') ORDER BY (((v0.c3, v0.c1))!=((v0.c1, v0.c3))) COLLATE BINARY  NULLS FIRST, (((((((((((((((('')OR(v0.c1)))OR(v0.c0)))AND(v0.c0)))OR('S,')))OR(v0.c2 COLLATE RTRIM)))OR(CAST(v0.c3 AS TEXT))))OR(TYPEOF(vt0.c0))))OR(x'bb0a0c')) DESC;
SELECT DISTINCT * FROM vt0, v0 WHERE (((x'49b2')AND(CASE WHEN ((NULL) IS TRUE) THEN ((vt0.c0) ISNULL) WHEN ((v0.c0) IS TRUE) THEN CAST(v0.c3 AS TEXT) END))) ORDER BY (((v0.c3, v0.c1))<>((v0.c1, v0.c3))) COLLATE BINARY  NULLS FIRST, (((((((((((((((('')OR(v0.c1)))OR(v0.c0)))AND(v0.c0)))OR('S,')))OR(v0.c2 COLLATE RTRIM)))OR(CAST(v0.c3 AS TEXT))))OR(TYPEOF(vt0.c0))))OR(x'bb0a0c')) DESC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (CASE (((v0.c1, v0.c2, v0.c3))<((v0.c3, '<	m', v0.c0)))  WHEN ((((((((((v0.c1)OR(v0.c3)))OR(vt0.c0)))AND(x'')))OR(v0.c3)))AND(v0.c3)) THEN LIKE(v0.c3, v0.c0) WHEN ((v0.c3)%(v0.c1)) THEN NULL COLLATE NOCASE WHEN ((0.42306515884202256)>(v0.c3)) THEN ((v0.c1)+(vt0.c0)) ELSE ((v0.c3) IS FALSE) END) ORDER BY (((v0.c3, v0.c1))<>((v0.c1, v0.c3))) COLLATE BINARY  NULLS FIRST, (((((((((((((((('')OR(v0.c1)))OR(v0.c0)))AND(v0.c0)))OR('S,')))OR(v0.c2 COLLATE RTRIM)))OR(CAST(v0.c3 AS TEXT))))OR(TYPEOF(vt0.c0))))OR(x'bb0a0c')) DESC LIMIT 1;
SELECT ALL * FROM vt0, v0 WHERE (x'49b2') ORDER BY (((v0.c3, v0.c1))!=((v0.c1, v0.c3))) COLLATE BINARY  NULLS FIRST, (((((((((((((((('')OR(v0.c1)))OR(v0.c0)))AND(v0.c0)))OR('S,')))OR(v0.c2 COLLATE RTRIM)))OR(CAST(v0.c3 AS TEXT))))OR(TYPEOF(vt0.c0))))OR(x'bb0a0c')) DESC;
SELECT DISTINCT * FROM vt0, v0 WHERE (((x'49b2')AND(CASE WHEN ((NULL) IS TRUE) THEN ((vt0.c0) ISNULL) WHEN ((v0.c0) IS TRUE) THEN CAST(v0.c3 AS TEXT) END))) ORDER BY (((v0.c3, v0.c1))<>((v0.c1, v0.c3))) COLLATE BINARY  NULLS FIRST, (((((((((((((((('')OR(v0.c1)))OR(v0.c0)))AND(v0.c0)))OR('S,')))OR(v0.c2 COLLATE RTRIM)))OR(CAST(v0.c3 AS TEXT))))OR(TYPEOF(vt0.c0))))OR(x'bb0a0c')) DESC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (CASE (((v0.c1, v0.c2, v0.c3))<((v0.c3, '<	m', v0.c0)))  WHEN ((((((((((v0.c1)OR(v0.c3)))OR(vt0.c0)))AND(x'')))OR(v0.c3)))AND(v0.c3)) THEN LIKE(v0.c3, v0.c0) WHEN ((v0.c3)%(v0.c1)) THEN NULL COLLATE NOCASE WHEN ((0.42306515884202256)>(v0.c3)) THEN ((v0.c1)+(vt0.c0)) ELSE ((v0.c3) IS FALSE) END) ORDER BY (((v0.c3, v0.c1))<>((v0.c1, v0.c3))) COLLATE BINARY  NULLS FIRST, (((((((((((((((('')OR(v0.c1)))OR(v0.c0)))AND(v0.c0)))OR('S,')))OR(v0.c2 COLLATE RTRIM)))OR(CAST(v0.c3 AS TEXT))))OR(TYPEOF(vt0.c0))))OR(x'bb0a0c')) DESC LIMIT 1;
SELECT ALL COUNT(*) FROM v0 WHERE (CASE WHEN ((v0.c0)<(v0.c1)) THEN (NOT (v0.c3)) END) ORDER BY ((v0.c0)|(((((((v0.c0)AND(v0.c3)))OR(v0.c2)))AND(v0.c1))))  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE (((CASE WHEN ((v0.c0)<(v0.c1)) THEN (NOT (v0.c3)) END)AND(CASE WHEN v0.c3 COLLATE NOCASE THEN ((v0.c3) ISNULL) ELSE v0.c0 COLLATE BINARY END))) ORDER BY ((v0.c0)|(((((((v0.c0)AND(v0.c3)))OR(v0.c2)))AND(v0.c1))))  NULLS LAST LIMIT 0X1;
SELECT COUNT(*) FROM vt0, vt2 LEFT OUTER JOIN v0 ON 0.3729684961959836 WHERE (((((((vt2.c0) ISNULL))OR(CASE vt2.c0  WHEN 0.9282172759197032 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 ELSE v0.c3 END)))OR(((vt2.c0)<(0x213b445b))))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c3))) IS FALSE)  NULLS FIRST, CAST(v0.c3 COLLATE NOCASE AS BLOB), (CASE WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN vt0.c0 WHEN '0.05509927846959273' THEN vt0.c0 ELSE x'5ca24561' END IN ())  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt0, vt2 LEFT OUTER JOIN v0 ON 0.3729684961959836 WHERE (((((((vt2.c0) ISNULL))OR(CASE vt2.c0  WHEN 0.9282172759197032 THEN vt2.c1 WHEN v0.c3 THEN vt2.c1 ELSE v0.c3 END)))OR(((vt2.c0)<(557532251))))) ORDER BY TYPEOF(((vt2.c0)>=(v0.c0)))  NULLS LAST LIMIT 0X4 INTERSECT SELECT DISTINCT COUNT(*) FROM vt0, vt2 LEFT OUTER JOIN v0 ON 0.3729684961959836 WHERE (((((v0.c2) NOT NULL)) NOT BETWEEN (0.31427281667946116) AND ((- (vt2.c0))))) ORDER BY TYPEOF(((vt2.c0)>=(v0.c0)))  NULLS LAST LIMIT 4;
SELECT COUNT(*) FROM vt2 WHERE ((NOT (NULL COLLATE NOCASE))) ORDER BY CAST((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c0)) AND ((0.04841496776836629, vt2.c0))) AS BLOB)  NULLS FIRST, vt2.c0 DESC;
SELECT ALL COUNT(*) FROM vt2 NOT INDEXED WHERE ((((NOT (NULL COLLATE NOCASE)))AND(CAST(((vt2.c1)!=(vt2.c1)) AS NUMERIC)))) ORDER BY ((vt2.c0) BETWEEN (vt2.c1) AND (NULL)) COLLATE BINARY ASC  NULLS FIRST, CAST('-329968071' COLLATE BINARY AS TEXT) DESC;
SELECT COUNT(*) FROM vt0 WHERE (vt0.c0);
SELECT COUNT(*) FROM vt0 WHERE (((vt0.c0)AND(vt0.c0))) ORDER BY ((((vt0.c0)%(vt0.c0))) NOT BETWEEN ((('56652276') IS FALSE)) AND (((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))), CASE WHEN ((((((((vt0.c0)AND(x'')))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) THEN (vt0.c0 IN (vt0.c0, vt0.c0)) WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN json_array_length(vt0.c0) ELSE MIN(vt0.c0, vt0.c0, vt0.c0) END  NULLS LAST, (NOT (((vt0.c0) IS TRUE))) DESC  NULLS FIRST INTERSECT SELECT COUNT(*) FROM vt0 WHERE (((x'bed78508')<<(CASE WHEN vt0.c0 THEN vt0.c0 END))) ORDER BY ((((vt0.c0)%(vt0.c0))) NOT BETWEEN ((('56652276') IS FALSE)) AND (((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))), CASE WHEN ((((((((vt0.c0)AND(x'')))OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)) THEN (vt0.c0 IN (vt0.c0, vt0.c0)) WHEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN json_array_length(vt0.c0) ELSE MIN(vt0.c0, vt0.c0, vt0.c0) END  NULLS LAST, (NOT (((vt0.c0) IS TRUE))) DESC  NULLS FIRST;
SELECT ALL MIN(v0.c1) FROM v0, vt0 INNER JOIN vt2 ON (vt2.c1 IN ()) WHERE ((((((v0.c2)>>(v0.c3)), ((vt0.c0)||(v0.c3))))=(((vt2.c1 IN (v0.c0)), v0.c3))));
SELECT MIN(v0.c1) FROM v0, vt0 INNER JOIN vt2 ON (vt2.c1 IN ()) WHERE ((((((((v0.c2)>>(v0.c3)), ((vt0.c0)||(v0.c3))))==(((vt2.c1 IN (v0.c0)), v0.c3))))AND(NULLIF(DISTINCT CASE v0.c1  WHEN v0.c2 THEN 1.625988069E9 END, '1291339797')))) LIMIT 0 INTERSECT SELECT ALL MIN(v0.c1) FROM v0, vt0 INNER JOIN vt2 ON (vt2.c1 IN ()) WHERE ((~ (((vt2.c1) IS TRUE)))) LIMIT 0;
SELECT ALL * FROM v0, vt2 WHERE (json_array_length(('1236466489' IN (x'5b'))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((json_array_length(('1236466489' IN (x'5b'))))AND(CAST(HEX(DISTINCT vt2.c1) AS NUMERIC)))) ORDER BY ((v0.c3 IN ()) IN ());
SELECT ALL * FROM v0, vt2 WHERE (json_array_length(('1236466489' IN (x'5b'))));
SELECT DISTINCT * FROM v0, vt2 WHERE (((json_array_length(('1236466489' IN (x'5b'))))AND(CAST(HEX(DISTINCT vt2.c1) AS NUMERIC)))) ORDER BY ((v0.c3 IN ()) IN ());
SELECT ALL MAX(v0.c3) FROM v0 WHERE (((((((((v0.c3)||('Dle>&63>')))OR(CASE v0.c1  WHEN v0.c2 THEN v0.c3 ELSE v0.c3 END)))OR(NULL)))AND(((v0.c0)AND(v0.c0)))));
SELECT DISTINCT MAX(v0.c3) FROM v0 WHERE (((((((((((v0.c3)||('Dle>&63>')))OR(CASE v0.c1  WHEN v0.c2 THEN v0.c3 ELSE v0.c3 END)))OR(NULL)))AND(((v0.c0)AND(v0.c0)))))AND(((((((v0.c3)AND(v0.c1)))AND(v0.c1)))AND(v0.c2)) COLLATE RTRIM))) ORDER BY CASE CASE x'13e074'  WHEN v0.c1 THEN NULL WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c2 ELSE v0.c0 END  WHEN ((v0.c0) BETWEEN (v0.c2) AND (x'd6')) THEN HEX(NULL) WHEN (((v0.c1, v0.c3, x'')) BETWEEN ((v0.c1, v0.c3, v0.c1)) AND ((v0.c0, v0.c1, v0.c2))) THEN ((v0.c1) NOT NULL) WHEN ((v0.c2) ISNULL) THEN ((v0.c3)<<(0.024244574675355457)) ELSE (((v0.c3)) NOT BETWEEN (('-1006256381')) AND ((v0.c2))) END, ((((((v0.c1, v0.c2))<((v0.c1, v0.c0)))))>=(((((v0.c0)) BETWEEN ((v0.c3)) AND ((v0.c2))))))  NULLS LAST, CAST(v0.c2 AS TEXT) ASC;
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE (((vt2.c1) BETWEEN ((((v0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0, v0.c0)) AND ((vt2.c1, vt0.c0)))) AND (((((((((((((v0.c0)AND(v0.c1)))AND('-388835817')))OR(v0.c0)))OR(v0.c3)))OR(v0.c1)))AND(vt2.c0))))) ORDER BY CASE WHEN ((vt2.c0)&(0Xb467d2f)) THEN (((vt2.c1, v0.c3, vt0.c0, vt2.c0, v0.c1)) BETWEEN ((vt0.c0, vt2.c1, vt2.c1, v0.c2, v0.c2)) AND ((v0.c3, v0.c3, v0.c3, v0.c2, v0.c0))) WHEN ((v0.c3)GLOB(v0.c3)) THEN (- (vt0.c0)) ELSE ((v0.c2) BETWEEN (v0.c0) AND (v0.c1)) END  NULLS LAST, ((('795331170', x'49', vt2.c0)) NOT BETWEEN ((v0.c0, v0.c2, CASE v0.c2  WHEN v0.c1 THEN vt0.c0 WHEN vt0.c0 THEN '' WHEN vt0.c0 THEN vt2.c1 END)) AND ((((((((vt2.c0)OR(v0.c3)))OR(v0.c0)))AND(v0.c0)), NULL, CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN v0.c1 END))) ASC;
SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (((vt2.c1) BETWEEN ((((v0.c0, vt2.c1)) NOT BETWEEN ((vt2.c0, v0.c0)) AND ((vt2.c1, vt0.c0)))) AND (((((((((((((v0.c0)AND(v0.c1)))AND('-388835817')))OR(v0.c0)))OR(v0.c3)))OR(v0.c1)))AND(vt2.c0))))) ORDER BY CASE WHEN ((vt2.c0)&(0xb467d2f)) THEN (((vt2.c1, v0.c3, vt0.c0, vt2.c0, v0.c1)) BETWEEN ((vt0.c0, vt2.c1, vt2.c1, v0.c2, v0.c2)) AND ((v0.c3, v0.c3, v0.c3, v0.c2, v0.c0))) WHEN ((v0.c3)GLOB(v0.c3)) THEN (- (vt0.c0)) ELSE ((v0.c2) BETWEEN (v0.c0) AND (v0.c1)) END  NULLS LAST, ((('795331170', x'49', vt2.c0)) NOT BETWEEN ((v0.c0, v0.c2, CASE v0.c2  WHEN v0.c1 THEN vt0.c0 WHEN vt0.c0 THEN '' WHEN vt0.c0 THEN vt2.c1 END)) AND ((((((((vt2.c0)OR(v0.c3)))OR(v0.c0)))AND(v0.c0)), NULL, CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN v0.c1 END))) ASC LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE ((((v0.c1) BETWEEN (v0.c1) AND (vt0.c0)) IN ())) ORDER BY CASE WHEN ((vt2.c0)&(0xb467d2f)) THEN (((vt2.c1, v0.c3, vt0.c0, vt2.c0, v0.c1)) BETWEEN ((vt0.c0, vt2.c1, vt2.c1, v0.c2, v0.c2)) AND ((v0.c3, v0.c3, v0.c3, v0.c2, v0.c0))) WHEN ((v0.c3)GLOB(v0.c3)) THEN (- (vt0.c0)) ELSE ((v0.c2) BETWEEN (v0.c0) AND (v0.c1)) END  NULLS LAST, ((('795331170', x'49', vt2.c0)) NOT BETWEEN ((v0.c0, v0.c2, CASE v0.c2  WHEN v0.c1 THEN vt0.c0 WHEN vt0.c0 THEN '' WHEN vt0.c0 THEN vt2.c1 END)) AND ((((((((vt2.c0)OR(v0.c3)))OR(v0.c0)))AND(v0.c0)), NULL, CASE vt2.c1  WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN v0.c1 END))) ASC LIMIT 0;
SELECT * FROM vt2 CROSS JOIN v0 ON ((COALESCE(v0.c3, v0.c1))%('1433071193')) INNER JOIN vt0 ON (+ (v0.c0)) WHERE (((((vt2.c1) NOT BETWEEN ('bC') AND (vt0.c0)))*(v0.c3)));
SELECT ALL * FROM vt2 CROSS JOIN v0 ON ((COALESCE(v0.c3, v0.c1))%('1433071193')) INNER JOIN vt0 ON (+ (v0.c0)) WHERE (((((vt2.c1) NOT BETWEEN ('bC') AND (vt0.c0)))*(v0.c3))) INTERSECT SELECT * FROM vt2 CROSS JOIN v0 ON ((COALESCE(v0.c3, v0.c1))%('1433071193')) INNER JOIN vt0 ON (+ (v0.c0)) WHERE ((((vt0.c0, v0.c0)) NOT BETWEEN ((((vt0.c0) NOTNULL), (((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((v0.c3))))) AND ((((0.30960035199802494) IS TRUE), ((v0.c0) ISNULL)))));
SELECT * FROM vt2 CROSS JOIN v0 ON ((COALESCE(v0.c3, v0.c1))%('1433071193')) INNER JOIN vt0 ON (+ (v0.c0)) WHERE (((((vt2.c1) NOT BETWEEN ('bC') AND (vt0.c0)))*(v0.c3)));
SELECT ALL * FROM vt2 CROSS JOIN v0 ON ((COALESCE(v0.c3, v0.c1))%('1433071193')) INNER JOIN vt0 ON (+ (v0.c0)) WHERE (((((vt2.c1) NOT BETWEEN ('bC') AND (vt0.c0)))*(v0.c3))) INTERSECT SELECT * FROM vt2 CROSS JOIN v0 ON ((COALESCE(v0.c3, v0.c1))%('1433071193')) INNER JOIN vt0 ON (+ (v0.c0)) WHERE ((((vt0.c0, v0.c0)) NOT BETWEEN ((((vt0.c0) NOTNULL), (((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((v0.c3))))) AND ((((0.30960035199802494) IS TRUE), ((v0.c0) ISNULL)))));
SELECT MIN(v0.c1) FROM vt0, v0 WHERE ((((v0.c0, v0.c3, v0.c0)) BETWEEN ((((v0.c2) BETWEEN (v0.c3) AND (v0.c3)), v0.c1, (~ (vt0.c0)))) AND ((((v0.c2)IS NOT(vt0.c0)), ((((((((((v0.c2)OR(v0.c1)))AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))AND(v0.c3)), vt0.c0 COLLATE BINARY))));
SELECT ALL MIN(v0.c1) FROM vt0, v0 WHERE ((((((v0.c0, v0.c3, v0.c0)) BETWEEN ((((v0.c2) BETWEEN (v0.c3) AND (v0.c3)), v0.c1, (~ (vt0.c0)))) AND ((((v0.c2)IS NOT(vt0.c0)), ((((((((((v0.c2)OR(v0.c1)))AND(v0.c0)))OR(v0.c0)))AND(v0.c0)))AND(v0.c3)), vt0.c0 COLLATE BINARY))))AND((((((((('E3	䝊⬲
')OR((NOT (v0.c0)))))AND(((v0.c1) IS TRUE))))AND('868741710')))OR(((v0.c2) NOTNULL)))))) ORDER BY ((- (v0.c3)) IN ((((v0.c3, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c0, v0.c1))), ((v0.c1)>(v0.c2)))) INTERSECT SELECT ALL MIN(v0.c1) FROM vt0, v0 WHERE (TRIM(((((((((v0.c1)OR(v0.c0)))AND(vt0.c0)))AND(v0.c1)))AND(v0.c2)))) ORDER BY ((- (v0.c3)) IN ((((v0.c3, v0.c2)) BETWEEN ((v0.c1, v0.c0)) AND ((v0.c0, v0.c1))), ((v0.c1)>(v0.c2))));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c1 IN ()))+(((v0.c1)<(0.6079238317849214)))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((v0.c1 IN ()))+(((v0.c1)<(-0.3920761682150786)))))AND(vt0.c0))) ORDER BY CASE ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1))  WHEN (((vt2.c1, v0.c1)) NOT BETWEEN ((v0.c0, vt2.c0)) AND ((vt2.c0, vt2.c0))) THEN vt2.c1 COLLATE NOCASE WHEN CAST(vt2.c1 AS NUMERIC) THEN ((((((((vt0.c0)AND(vt2.c1)))OR(v0.c2)))AND(v0.c3)))AND(vt0.c0)) END ASC, ((((v0.c3)IS NOT(v0.c2)))>(((vt0.c0)%(v0.c3)))) ASC, ((CAST(vt2.c0 AS REAL)) NOT BETWEEN (JULIANDAY(v0.c2, vt2.c0, v0.c0)) AND (CAST(vt2.c0 AS INTEGER))) DESC INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((v0.c2, 'dB)*pO')) BETWEEN (('	ᘹ쑘wY>', v0.c1)) AND ((vt2.c1, v0.c3))) COLLATE BINARY) ORDER BY CASE ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1))  WHEN (((vt2.c1, v0.c1)) NOT BETWEEN ((v0.c0, vt2.c0)) AND ((vt2.c0, vt2.c0))) THEN vt2.c1 COLLATE NOCASE WHEN CAST(vt2.c1 AS NUMERIC) THEN ((((((((vt0.c0)AND(vt2.c1)))OR(v0.c2)))AND(v0.c3)))AND(vt0.c0)) END ASC, ((((v0.c3)IS NOT(v0.c2)))>(((vt0.c0)%(v0.c3)))) ASC, ((CAST(vt2.c0 AS REAL)) NOT BETWEEN (JULIANDAY(v0.c2, vt2.c0, v0.c0)) AND (CAST(vt2.c0 AS INTEGER))) DESC;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c1 IN ()))+(((v0.c1)<(0.6079238317849214)))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((v0.c1 IN ()))+(((v0.c1)<(-0.3920761682150786)))))AND(vt0.c0))) ORDER BY CASE ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1))  WHEN (((vt2.c1, v0.c1)) NOT BETWEEN ((v0.c0, vt2.c0)) AND ((vt2.c0, vt2.c0))) THEN vt2.c1 COLLATE NOCASE WHEN CAST(vt2.c1 AS NUMERIC) THEN ((((((((vt0.c0)AND(vt2.c1)))OR(v0.c2)))AND(v0.c3)))AND(vt0.c0)) END ASC, ((((v0.c3)IS NOT(v0.c2)))>(((vt0.c0)%(v0.c3)))) ASC, ((CAST(vt2.c0 AS REAL)) NOT BETWEEN (JULIANDAY(v0.c2, vt2.c0, v0.c0)) AND (CAST(vt2.c0 AS INTEGER))) DESC INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((v0.c2, 'dB)*pO')) BETWEEN (('	ᘹ쑘wY>', v0.c1)) AND ((vt2.c1, v0.c3))) COLLATE BINARY) ORDER BY CASE ((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c1))  WHEN (((vt2.c1, v0.c1)) NOT BETWEEN ((v0.c0, vt2.c0)) AND ((vt2.c0, vt2.c0))) THEN vt2.c1 COLLATE NOCASE WHEN CAST(vt2.c1 AS NUMERIC) THEN ((((((((vt0.c0)AND(vt2.c1)))OR(v0.c2)))AND(v0.c3)))AND(vt0.c0)) END ASC, ((((v0.c3)IS NOT(v0.c2)))>(((vt0.c0)%(v0.c3)))) ASC, ((CAST(vt2.c0 AS REAL)) NOT BETWEEN (JULIANDAY(v0.c2, vt2.c0, v0.c0)) AND (CAST(vt2.c0 AS INTEGER))) DESC;
SELECT ALL COUNT(*) FROM vt2, v0 WHERE (vt2.c1);
SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE (vt2.c1) INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0 WHERE ((((((((vt2.c1)OR(v0.c1)))AND(v0.c1)))AND(v0.c2)) IN (vt2.c0 COLLATE BINARY)));
SELECT ALL * FROM vt0, vt2 WHERE (((((vt2.c1)>>(vt2.c1)))IS NOT(((vt2.c1) NOT BETWEEN (0.1443683318434057) AND (vt2.c0))))) ORDER BY ((((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL)  NULLS LAST, (((CAST(vt2.c1 AS REAL)))<((vt2.c0))), ((((vt0.c0)*(vt0.c0))) IS TRUE) DESC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c1)>>(vt2.c1)))IS NOT(((vt2.c1) NOT BETWEEN (0.1443683318434057) AND (vt2.c0))))) ORDER BY ((((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL)  NULLS LAST, (((CAST(vt2.c1 AS REAL)))<((vt2.c0))), ((((vt0.c0)*(vt0.c0))) IS TRUE) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt0, vt2 WHERE (((vt0.c0 COLLATE BINARY) NOTNULL)) ORDER BY ((((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL)  NULLS LAST, (((CAST(vt2.c1 AS REAL)))<((vt2.c0))), ((((vt0.c0)*(vt0.c0))) IS TRUE) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0, vt2 WHERE (((((vt2.c1)>>(vt2.c1)))IS NOT(((vt2.c1) NOT BETWEEN (0.1443683318434057) AND (vt2.c0))))) ORDER BY ((((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL)  NULLS LAST, (((CAST(vt2.c1 AS REAL)))<((vt2.c0))), ((((vt0.c0)*(vt0.c0))) IS TRUE) DESC  NULLS LAST;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c1)>>(vt2.c1)))IS NOT(((vt2.c1) NOT BETWEEN (0.1443683318434057) AND (vt2.c0))))) ORDER BY ((((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL)  NULLS LAST, (((CAST(vt2.c1 AS REAL)))<((vt2.c0))), ((((vt0.c0)*(vt0.c0))) IS TRUE) DESC  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt0, vt2 WHERE (((vt0.c0 COLLATE BINARY) NOTNULL)) ORDER BY ((((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) NOT NULL)  NULLS LAST, (((CAST(vt2.c1 AS REAL)))<((vt2.c0))), ((((vt0.c0)*(vt0.c0))) IS TRUE) DESC  NULLS LAST LIMIT 0X1;
SELECT ALL MAX(vt2.c0) FROM vt0, vt2 NATURAL JOIN v0 WHERE (CASE WHEN vt2.c1 COLLATE BINARY THEN vt0.c0 WHEN NULLIF(DISTINCT v0.c2, vt2.c0) THEN CAST(vt2.c0 AS BLOB) WHEN ((v0.c3)||(v0.c3)) THEN (- (v0.c1)) WHEN v0.c0 THEN '-447903220' WHEN v0.c2 COLLATE BINARY THEN ((((((v0.c1)AND(v0.c1)))AND(v0.c3)))AND(vt2.c1)) ELSE 0.46848189259721085 END) ORDER BY LTRIM(((((vt2.c1)OR(vt0.c0)))AND(v0.c2)), vt2.c1 COLLATE BINARY)  NULLS FIRST;
SELECT ALL MAX(vt2.c0) FROM vt0, vt2 NOT INDEXED NATURAL JOIN v0 WHERE (((CASE WHEN vt2.c1 COLLATE BINARY THEN vt0.c0 WHEN NULLIF(DISTINCT v0.c2, vt2.c0) THEN CAST(vt2.c0 AS BLOB) WHEN ((v0.c3)||(v0.c3)) THEN (- (v0.c1)) WHEN v0.c0 THEN '-447903220' WHEN v0.c2 COLLATE BINARY THEN ((((((v0.c1)AND(v0.c1)))AND(v0.c3)))AND(vt2.c1)) ELSE 0.46848189259721085 END)AND(CAST(CAST(vt2.c0 AS BLOB) AS BLOB)))) ORDER BY LTRIM(((((vt2.c1)OR(vt0.c0)))AND(v0.c2)), vt2.c1 COLLATE BINARY)  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt0, v0 WHERE ((v0.c1 COLLATE NOCASE IN (CAST(v0.c3 AS NUMERIC)))) ORDER BY ((((7.70310855E8)IS NOT(v0.c0))) IS TRUE)  NULLS FIRST, CAST(LTRIM(v0.c0, vt0.c0) AS BLOB)  NULLS FIRST, (CASE v0.c1  WHEN vt0.c0 THEN v0.c0 ELSE vt0.c0 END IN (((v0.c1) IS FALSE)))  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE ((v0.c1 COLLATE NOCASE IN (CAST(v0.c3 AS NUMERIC)))) ORDER BY CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c2) AND ('0.2423904930873102')) THEN v0.c2 COLLATE BINARY WHEN ((v0.c0)>=(v0.c2)) THEN ((v0.c2)<<(v0.c3)) WHEN TRIM(v0.c2) THEN x'd6' END DESC  NULLS FIRST, (((v0.c1) IS FALSE) IN (((vt0.c0)OR('')), CAST(v0.c1 AS NUMERIC))) DESC LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0, v0 WHERE (((('sI5' IN (x'')))IS(((v0.c1)/(v0.c3))))) ORDER BY CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c2) AND ('0.2423904930873102')) THEN v0.c2 COLLATE BINARY WHEN ((v0.c0)>=(v0.c2)) THEN ((v0.c2)<<(v0.c3)) WHEN TRIM(v0.c2) THEN x'd6' END DESC  NULLS FIRST, (((v0.c1) IS FALSE) IN (((vt0.c0)OR('')), CAST(v0.c1 AS NUMERIC))) DESC LIMIT 1;
SELECT ALL * FROM vt0, v0 WHERE ((v0.c1 COLLATE NOCASE IN (CAST(v0.c3 AS NUMERIC)))) ORDER BY ((((7.70310855E8)IS NOT(v0.c0))) IS TRUE)  NULLS FIRST, CAST(LTRIM(v0.c0, vt0.c0) AS BLOB)  NULLS FIRST, (CASE v0.c1  WHEN vt0.c0 THEN v0.c0 ELSE vt0.c0 END IN (((v0.c1) IS FALSE)))  NULLS LAST;
SELECT ALL * FROM vt0, v0 WHERE ((v0.c1 COLLATE NOCASE IN (CAST(v0.c3 AS NUMERIC)))) ORDER BY CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c2) AND ('0.2423904930873102')) THEN v0.c2 COLLATE BINARY WHEN ((v0.c0)>=(v0.c2)) THEN ((v0.c2)<<(v0.c3)) WHEN TRIM(v0.c2) THEN x'd6' END DESC  NULLS FIRST, (((v0.c1) IS FALSE) IN (((vt0.c0)OR('')), CAST(v0.c1 AS NUMERIC))) DESC LIMIT 0x1 INTERSECT SELECT ALL * FROM vt0, v0 WHERE (((('sI5' IN (x'')))IS(((v0.c1)/(v0.c3))))) ORDER BY CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c2) AND ('0.2423904930873102')) THEN v0.c2 COLLATE BINARY WHEN ((v0.c0)>=(v0.c2)) THEN ((v0.c2)<<(v0.c3)) WHEN TRIM(v0.c2) THEN x'd6' END DESC  NULLS FIRST, (((v0.c1) IS FALSE) IN (((vt0.c0)OR('')), CAST(v0.c1 AS NUMERIC))) DESC LIMIT 1;
SELECT * FROM v0 WHERE ((((((((v0.c2)OR(v0.c1)))AND(v0.c1)))OR(v0.c3)) IN ()));
SELECT ALL * FROM v0 WHERE ((((((((v0.c2)OR(v0.c1)))AND(v0.c1)))OR(v0.c3)) IN ())) LIMIT 0X1 INTERSECT SELECT * FROM v0 WHERE (((((((((v0.c1) ISNULL))AND(((v0.c3) BETWEEN (0.5961249633929745) AND (v0.c2)))))AND(v0.c1 COLLATE BINARY)))OR(((v0.c1) NOT BETWEEN (v0.c3) AND (x'a93bca0f'))))) LIMIT 0x1;
SELECT * FROM v0 WHERE ((((((((v0.c2)OR(v0.c1)))AND(v0.c1)))OR(v0.c3)) IN ()));
SELECT ALL * FROM v0 WHERE ((((((((v0.c2)OR(v0.c1)))AND(v0.c1)))OR(v0.c3)) IN ())) LIMIT 0X1 INTERSECT SELECT * FROM v0 WHERE (((((((((v0.c1) ISNULL))AND(((v0.c3) BETWEEN (0.5961249633929745) AND (v0.c2)))))AND(v0.c1 COLLATE BINARY)))OR(((v0.c1) NOT BETWEEN (v0.c3) AND (x'a93bca0f'))))) LIMIT 0x1;
SELECT * FROM vt2, v0, vt0 WHERE ((~ (((v0.c0)IS('c')))));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((~ (((v0.c0)IS('c')))))AND((- (vt0.c0 COLLATE BINARY)))));
SELECT * FROM vt2, v0, vt0 WHERE ((~ (((v0.c0)IS('c')))));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE ((((~ (((v0.c0)IS('c')))))AND((- (vt0.c0 COLLATE BINARY)))));
SELECT * FROM v0, vt0, vt2 WHERE ((((((((v0.c2)AND(vt2.c0)))OR(vt2.c0)))OR(v0.c0)) IN ('1247623579' COLLATE NOCASE, v0.c0, ((((((v0.c3)AND(vt2.c0)))AND(v0.c1)))OR(v0.c1)))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((((((v0.c2)AND(vt2.c0)))OR(vt2.c0)))OR(v0.c0)) IN ('1247623579' COLLATE NOCASE, v0.c0, ((((((v0.c3)AND(vt2.c0)))AND(v0.c1)))OR(v0.c1)))))AND(((((((((((((v0.c2)AND(vt0.c0)))AND(vt2.c0)))OR(v0.c0)))AND(vt0.c0)))OR('331686360')))OR(v0.c3)) COLLATE RTRIM))) ORDER BY v0.c0  NULLS LAST, (((((((((v0.c3, v0.c2, v0.c0, vt2.c1, vt2.c1, v0.c1, vt2.c0))>((v0.c0, v0.c0, v0.c2, v0.c0, v0.c1, vt0.c0, v0.c0))))AND((~ (v0.c0)))))AND(vt0.c0)))AND(CASE vt0.c0  WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN vt0.c0 WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END))  NULLS LAST;
SELECT * FROM v0, vt0, vt2 WHERE ((((((((v0.c2)AND(vt2.c0)))OR(vt2.c0)))OR(v0.c0)) IN ('1247623579' COLLATE NOCASE, v0.c0, ((((((v0.c3)AND(vt2.c0)))AND(v0.c1)))OR(v0.c1)))));
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE ((((((((((v0.c2)AND(vt2.c0)))OR(vt2.c0)))OR(v0.c0)) IN ('1247623579' COLLATE NOCASE, v0.c0, ((((((v0.c3)AND(vt2.c0)))AND(v0.c1)))OR(v0.c1)))))AND(((((((((((((v0.c2)AND(vt0.c0)))AND(vt2.c0)))OR(v0.c0)))AND(vt0.c0)))OR('331686360')))OR(v0.c3)) COLLATE RTRIM))) ORDER BY v0.c0  NULLS LAST, (((((((((v0.c3, v0.c2, v0.c0, vt2.c1, vt2.c1, v0.c1, vt2.c0))>((v0.c0, v0.c0, v0.c2, v0.c0, v0.c1, vt0.c0, v0.c0))))AND((~ (v0.c0)))))AND(vt0.c0)))AND(CASE vt0.c0  WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN vt0.c0 WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN v0.c1 WHEN v0.c1 THEN v0.c1 END))  NULLS LAST;
SELECT * FROM vt2 WHERE (((vt2.c1)LIKE(vt2.c0 COLLATE BINARY)));
SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1)LIKE(vt2.c0 COLLATE BINARY))) ORDER BY CASE WHEN (+ (vt2.c1)) THEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)) WHEN -1424052390 THEN vt2.c0 COLLATE RTRIM WHEN CASE vt2.c0  WHEN '^<!d' THEN vt2.c1 END THEN ((vt2.c0)IS(NULL)) END ASC  NULLS LAST, ((vt2.c1) NOT NULL) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (CAST(vt2.c0 AS TEXT) COLLATE NOCASE) ORDER BY CASE WHEN (+ (vt2.c1)) THEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)) WHEN -1424052390 THEN vt2.c0 COLLATE RTRIM WHEN CASE vt2.c0  WHEN '^<!d' THEN vt2.c1 END THEN ((vt2.c0)IS(NULL)) END ASC  NULLS LAST, ((vt2.c1) NOT NULL) DESC  NULLS LAST LIMIT 0;
SELECT * FROM vt2 WHERE (((vt2.c1)LIKE(vt2.c0 COLLATE BINARY)));
SELECT DISTINCT * FROM vt2 WHERE (((vt2.c1)LIKE(vt2.c0 COLLATE BINARY))) ORDER BY CASE WHEN (+ (vt2.c1)) THEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)) WHEN -1424052390 THEN vt2.c0 COLLATE RTRIM WHEN CASE vt2.c0  WHEN '^<!d' THEN vt2.c1 END THEN ((vt2.c0)IS(NULL)) END ASC  NULLS LAST, ((vt2.c1) NOT NULL) DESC  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (CAST(vt2.c0 AS TEXT) COLLATE NOCASE) ORDER BY CASE WHEN (+ (vt2.c1)) THEN ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)) WHEN -1424052390 THEN vt2.c0 COLLATE RTRIM WHEN CASE vt2.c0  WHEN '^<!d' THEN vt2.c1 END THEN ((vt2.c0)IS(NULL)) END ASC  NULLS LAST, ((vt2.c1) NOT NULL) DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c0)<(vt0.c0)) AS REAL));
SELECT DISTINCT * FROM vt0 WHERE (CAST(((vt0.c0)<(vt0.c0)) AS REAL));
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c0)<(vt0.c0)) AS REAL));
SELECT DISTINCT * FROM vt0 WHERE (CAST(((vt0.c0)<(vt0.c0)) AS REAL));
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (vt0.c0);
SELECT ALL MIN(vt0.c0) FROM vt0 WHERE (vt0.c0) LIMIT 0X0;
SELECT ALL * FROM vt0, vt2, v0 WHERE (0Xffffffff84471c72) ORDER BY '-890964289' DESC  NULLS FIRST, 0.4077157985926282, ((v0.c2) BETWEEN (vt2.c0) AND (vt2.c1)) COLLATE BINARY DESC  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (0Xffffffff84471c72) ORDER BY (v0.c3 IN ()), -1.57240298E8 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((TRIM(vt0.c0) IN ())) ORDER BY (v0.c3 IN ()), -1.57240298E8;
SELECT ALL * FROM vt0, vt2, v0 WHERE (0Xffffffff84471c72) ORDER BY '-890964289' DESC  NULLS FIRST, 0.4077157985926282, ((v0.c2) BETWEEN (vt2.c0) AND (vt2.c1)) COLLATE BINARY DESC  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (0Xffffffff84471c72) ORDER BY (v0.c3 IN ()), -1.57240298E8 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((TRIM(vt0.c0) IN ())) ORDER BY (v0.c3 IN ()), -1.57240298E8;
SELECT ALL MAX(v0.c1) FROM vt0, vt2 NATURAL JOIN v0 WHERE (((vt2.c0) BETWEEN (v0.c1) AND (vt0.c0)) COLLATE BINARY) ORDER BY (((v0.c1)) BETWEEN ((((v0.c2) BETWEEN (0.3424372059248758) AND (v0.c2)))) AND ((CAST(vt0.c0 AS NUMERIC)))) DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c1) FROM vt0, vt2 NATURAL JOIN v0 WHERE (((((vt2.c0) BETWEEN (v0.c1) AND (vt0.c0)) COLLATE BINARY)AND((((SQLITE_SOURCE_ID(), IFNULL(DISTINCT vt2.c1, v0.c0)))>=((((((v0.c1)OR(v0.c1)))OR(v0.c0)), CASE x''  WHEN v0.c0 THEN vt2.c1 WHEN 'pp' THEN v0.c0 WHEN vt0.c0 THEN v0.c3 END)))))) ORDER BY (((v0.c1)) BETWEEN ((((v0.c2) BETWEEN (0.3424372059248758) AND (v0.c2)))) AND ((CAST(vt0.c0 AS NUMERIC)))) DESC  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(v0.c1) FROM vt0, vt2 NATURAL JOIN v0 WHERE (((((((((vt2.c1)AND(NULL)))AND(vt2.c0)))AND(vt2.c0))) BETWEEN (((vt2.c0)<=('eS.(_'))) AND ((NOT (v0.c3))))) ORDER BY (((v0.c1)) BETWEEN ((((v0.c2) BETWEEN (0.3424372059248758) AND (v0.c2)))) AND ((CAST(vt0.c0 AS NUMERIC)))) DESC  NULLS LAST LIMIT 0;
SELECT ALL MIN(vt0.c0) FROM vt0 INNER JOIN v0 ON ((((x'') NOTNULL))<<(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN vt2.c0 END)) LEFT OUTER JOIN vt2 ON ((((((((((((((v0.c1)LIKE(vt2.c0)))AND((vt2.c1 IN ()))))AND(((v0.c3) BETWEEN (v0.c3) AND (v0.c1)))))OR((((v0.c0, vt0.c0))=((vt2.c0, vt2.c0))))))AND(CASE v0.c2  WHEN v0.c3 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 END)))AND((x'18' IN (v0.c0)))))OR(((vt2.c1) ISNULL))) WHERE ('y㎈Qg*z') ORDER BY (((- (v0.c0))) NOT BETWEEN (((vt0.c0) IS FALSE)) AND ((('n
1')==(vt2.c1))));
SELECT ALL MIN(vt0.c0) FROM vt0 INNER JOIN v0 ON ((((x'') NOTNULL))<<(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN vt2.c0 END)) LEFT OUTER JOIN vt2 ON ((((((((((((((v0.c1)LIKE(vt2.c0)))AND((vt2.c1 IN ()))))AND(((v0.c3) BETWEEN (v0.c3) AND (v0.c1)))))OR((((v0.c0, vt0.c0))==((vt2.c0, vt2.c0))))))AND(CASE v0.c2  WHEN v0.c3 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN v0.c1 END)))AND((x'18' IN (v0.c0)))))OR(((vt2.c1) ISNULL))) WHERE ((('y㎈Qg*z')AND((((((NULL)|(vt2.c1)), CAST(v0.c1 AS REAL), ((vt2.c0)*('WVkD7'))))>=((x'', (vt2.c1 IN (vt0.c0)), ((vt0.c0) IS TRUE))))))) ORDER BY (((- (v0.c0))) NOT BETWEEN (((vt0.c0) IS FALSE)) AND ((('n
1')==(vt2.c1))));
SELECT * FROM vt2, vt0 INNER JOIN v0 ON CAST('-708003391' AS INTEGER) WHERE (CASE ((vt2.c0)>=(v0.c0))  WHEN ((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN IFNULL(vt0.c0, vt2.c1) WHEN (- (v0.c2)) THEN ((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)) WHEN ((v0.c0)/(vt0.c0)) THEN NULL END) ORDER BY NULL  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON CAST('-708003391' AS INTEGER) WHERE (CASE ((vt2.c0)>=(v0.c0))  WHEN ((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN IFNULL(vt0.c0, vt2.c1) WHEN (- (v0.c2)) THEN ((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)) WHEN ((v0.c0)/(vt0.c0)) THEN NULL END) ORDER BY NULL  NULLS FIRST;
SELECT * FROM vt2, vt0 INNER JOIN v0 ON CAST('-708003391' AS INTEGER) WHERE (CASE ((vt2.c0)>=(v0.c0))  WHEN ((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN IFNULL(vt0.c0, vt2.c1) WHEN (- (v0.c2)) THEN ((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)) WHEN ((v0.c0)/(vt0.c0)) THEN NULL END) ORDER BY NULL  NULLS FIRST;
SELECT ALL * FROM vt2, vt0 INNER JOIN v0 ON CAST('-708003391' AS INTEGER) WHERE (CASE ((vt2.c0)>=(v0.c0))  WHEN ((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN IFNULL(vt0.c0, vt2.c1) WHEN (- (v0.c2)) THEN ((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)) WHEN ((v0.c0)/(vt0.c0)) THEN NULL END) ORDER BY NULL  NULLS FIRST;
SELECT MIN(v0.c3) FROM v0 CROSS JOIN vt2 ON v0.c2 WHERE ((+ (((vt2.c0)AND(vt2.c1))))) ORDER BY TRIM(((v0.c2) BETWEEN (v0.c2) AND (v0.c3)), ((v0.c3) IS TRUE)) DESC, CHAR(x'', ((x'f1e9') NOT BETWEEN (vt2.c0) AND (vt2.c0)), v0.c2, v0.c2) DESC  NULLS FIRST;
SELECT MIN(v0.c3) FROM v0 CROSS JOIN vt2 ON v0.c2 WHERE ((+ (((vt2.c0)AND(vt2.c1))))) ORDER BY v0.c0, ((((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((v0.c3))) IN (CASE WHEN v0.c3 THEN v0.c1 WHEN v0.c3 THEN vt2.c1 ELSE vt2.c1 END, v0.c3))  NULLS FIRST, (+ ((NOT (v0.c2))));
SELECT MIN(vt0.c0) FROM vt0, vt2 WHERE (((((((((((CASE WHEN vt2.c0 THEN vt2.c0 END)AND(CAST(vt0.c0 AS NUMERIC))))AND(vt2.c0 COLLATE RTRIM)))OR(((vt2.c1) ISNULL))))OR(((vt0.c0)*(vt2.c0)))))OR(((vt2.c0) NOT BETWEEN (vt2.c0) AND (x'')))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0, vt2 WHERE (((((((((((CASE WHEN vt2.c0 THEN vt2.c0 END)AND(CAST(vt0.c0 AS NUMERIC))))AND(vt2.c0 COLLATE RTRIM)))OR(((vt2.c1) ISNULL))))OR(((vt0.c0)*(vt2.c0)))))OR(((vt2.c0) NOT BETWEEN (vt2.c0) AND (x''))))) INTERSECT SELECT DISTINCT MIN(vt0.c0) FROM vt0, vt2 WHERE (CASE WHEN (vt0.c0 IN ()) THEN vt2.c1 END);
SELECT * FROM v0 WHERE (CAST(((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3)) AS NUMERIC));
SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3)) AS NUMERIC)) ORDER BY v0.c3 ASC  NULLS LAST;
SELECT * FROM v0 WHERE (CAST(((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3)) AS NUMERIC));
SELECT DISTINCT * FROM v0 WHERE (CAST(((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c3)) AS NUMERIC)) ORDER BY v0.c3 ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (CASE v0.c1  WHEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c3)) THEN v0.c0 COLLATE RTRIM END);
SELECT DISTINCT * FROM v0 WHERE (CASE v0.c1  WHEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c3)) THEN v0.c0 COLLATE RTRIM END) ORDER BY NULL  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM v0 WHERE (CASE v0.c1  WHEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c3)) THEN v0.c0 COLLATE RTRIM END);
SELECT DISTINCT * FROM v0 WHERE (CASE v0.c1  WHEN ((v0.c0) BETWEEN (v0.c1) AND (v0.c3)) THEN v0.c0 COLLATE RTRIM END) ORDER BY NULL  NULLS LAST LIMIT 0X1;
SELECT * FROM vt2, v0 INNER JOIN vt0 ON x'b537' WHERE ((CAST(0.7313217068115142 AS REAL) IN ())) ORDER BY ((((((((((((v0.c3)<>(v0.c0)))AND(IFNULL(v0.c3, vt2.c1))))AND(((0x5c69573)<(v0.c0)))))OR((- (vt2.c0)))))AND(CAST(v0.c0 AS REAL))))AND(vt2.c0 COLLATE RTRIM)), (((v0.c2 IN ())) IS TRUE) DESC;
SELECT DISTINCT * FROM vt2, v0 INNER JOIN vt0 ON x'b537' WHERE ((CAST(0.7313217068115142 AS REAL) IN ())) ORDER BY ((((((((((((v0.c3)!=(v0.c0)))AND(IFNULL(v0.c3, vt2.c1))))AND(((96900467)<(v0.c0)))))OR((- (vt2.c0)))))AND(CAST(v0.c0 AS REAL))))AND(vt2.c0 COLLATE RTRIM)), (((v0.c2 IN ())) IS TRUE) DESC LIMIT 0X0;
SELECT * FROM vt2, v0 INNER JOIN vt0 ON x'b537' WHERE ((CAST(0.7313217068115142 AS REAL) IN ())) ORDER BY ((((((((((((v0.c3)<>(v0.c0)))AND(IFNULL(v0.c3, vt2.c1))))AND(((0x5c69573)<(v0.c0)))))OR((- (vt2.c0)))))AND(CAST(v0.c0 AS REAL))))AND(vt2.c0 COLLATE RTRIM)), (((v0.c2 IN ())) IS TRUE) DESC;
SELECT DISTINCT * FROM vt2, v0 INNER JOIN vt0 ON x'b537' WHERE ((CAST(0.7313217068115142 AS REAL) IN ())) ORDER BY ((((((((((((v0.c3)!=(v0.c0)))AND(IFNULL(v0.c3, vt2.c1))))AND(((96900467)<(v0.c0)))))OR((- (vt2.c0)))))AND(CAST(v0.c0 AS REAL))))AND(vt2.c0 COLLATE RTRIM)), (((v0.c2 IN ())) IS TRUE) DESC LIMIT 0X0;
SELECT * FROM vt0, v0, vt2 WHERE ((CASE WHEN v0.c1 THEN '0.08634741939000601' WHEN vt2.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c0 END IN (((v0.c3) NOT NULL)))) ORDER BY (((vt2.c0)) BETWEEN ((CASE WHEN '1793678660' THEN v0.c2 WHEN v0.c0 THEN v0.c3 WHEN 0.01564647384506823 THEN vt2.c0 WHEN '6K8' THEN v0.c0 ELSE vt0.c0 END)) AND ((((vt0.c0) IS TRUE)))) DESC  NULLS FIRST, ((((vt0.c0)<=('%'))) IS TRUE) ASC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((CASE WHEN v0.c1 THEN '0.08634741939000601' WHEN vt2.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c0 END IN (((v0.c3) NOT NULL)))) ORDER BY ((((NULL)AND(((x'36') BETWEEN (v0.c2) AND (v0.c2)))))AND(((((((((v0.c1)AND(vt2.c0)))OR(v0.c3)))OR(vt2.c0)))OR(v0.c3)))) DESC, CASE WHEN (+ (v0.c2)) THEN ((v0.c0) NOT NULL) ELSE vt2.c0 COLLATE RTRIM END  NULLS FIRST LIMIT 0x0;
SELECT * FROM vt0, v0, vt2 WHERE ((CASE WHEN v0.c1 THEN '0.08634741939000601' WHEN vt2.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c0 END IN (((v0.c3) NOT NULL)))) ORDER BY (((vt2.c0)) BETWEEN ((CASE WHEN '1793678660' THEN v0.c2 WHEN v0.c0 THEN v0.c3 WHEN 0.01564647384506823 THEN vt2.c0 WHEN '6K8' THEN v0.c0 ELSE vt0.c0 END)) AND ((((vt0.c0) IS TRUE)))) DESC  NULLS FIRST, ((((vt0.c0)<=('%'))) IS TRUE) ASC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((CASE WHEN v0.c1 THEN '0.08634741939000601' WHEN vt2.c0 THEN v0.c2 WHEN vt2.c0 THEN v0.c0 END IN (((v0.c3) NOT NULL)))) ORDER BY ((((NULL)AND(((x'36') BETWEEN (v0.c2) AND (v0.c2)))))AND(((((((((v0.c1)AND(vt2.c0)))OR(v0.c3)))OR(vt2.c0)))OR(v0.c3)))) DESC, CASE WHEN (+ (v0.c2)) THEN ((v0.c0) NOT NULL) ELSE vt2.c0 COLLATE RTRIM END  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt2, vt0 WHERE ((~ (vt2.c1)) COLLATE NOCASE);
SELECT ALL * FROM vt2, vt0 WHERE ((~ (vt2.c1)) COLLATE NOCASE) LIMIT 0;
SELECT ALL * FROM vt2, vt0 WHERE ((~ (vt2.c1)) COLLATE NOCASE);
SELECT ALL * FROM vt2, vt0 WHERE ((~ (vt2.c1)) COLLATE NOCASE) LIMIT 0;
SELECT ALL * FROM vt0, vt2, v0 NOT INDEXED WHERE (NULLIF(((v0.c3)>(v0.c2)), load_extension(vt2.c1)));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (NULLIF(((v0.c3)>(v0.c2)), load_extension(vt2.c1))) ORDER BY ((CASE WHEN v0.c3 THEN vt2.c0 WHEN v0.c3 THEN vt0.c0 WHEN v0.c3 THEN vt2.c0 END) NOTNULL) DESC  NULLS LAST, (((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c0 THEN v0.c3 END, (((x'', vt2.c1, vt0.c0))<((vt0.c0, v0.c2, v0.c1))), CAST(vt0.c0 AS INTEGER)))>=((((vt0.c0)<(v0.c1)), (((v0.c0)) NOT BETWEEN ((vt2.c0)) AND ((v0.c1))), v0.c2)));
SELECT ALL * FROM vt0, vt2, v0 NOT INDEXED WHERE (NULLIF(((v0.c3)>(v0.c2)), load_extension(vt2.c1)));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (NULLIF(((v0.c3)>(v0.c2)), load_extension(vt2.c1))) ORDER BY ((CASE WHEN v0.c3 THEN vt2.c0 WHEN v0.c3 THEN vt0.c0 WHEN v0.c3 THEN vt2.c0 END) NOTNULL) DESC  NULLS LAST, (((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c0 THEN v0.c3 END, (((x'', vt2.c1, vt0.c0))<((vt0.c0, v0.c2, v0.c1))), CAST(vt0.c0 AS INTEGER)))>=((((vt0.c0)<(v0.c1)), (((v0.c0)) NOT BETWEEN ((vt2.c0)) AND ((v0.c1))), v0.c2)));
SELECT ALL * FROM vt2 WHERE ((CASE 0.2497327652228455  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END IN ())) ORDER BY CAST(CAST(vt2.c1 AS TEXT) AS NUMERIC), ((((((((((vt2.c0)/(vt2.c1)))AND(((vt2.c1)&(vt2.c1)))))OR(CAST(vt2.c0 AS TEXT))))AND((NOT (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)) DESC, (((vt2.c0 IN (vt2.c0)))&((((0.8816403149836833)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1)))));
SELECT DISTINCT * FROM vt2 WHERE ((((CASE 0.2497327652228455  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END IN ()))AND('-734232506'))) ORDER BY CAST(CAST(vt2.c1 AS TEXT) AS NUMERIC), ((((((((((vt2.c0)/(vt2.c1)))AND(((vt2.c1)&(vt2.c1)))))OR(CAST(vt2.c0 AS TEXT))))AND((NOT (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)) DESC, (((vt2.c0 IN (vt2.c0)))&((((0.8816403149836833)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (CASE WHEN HEX(DISTINCT vt2.c1) THEN ((((((0.6874228699793334)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)) END) ORDER BY CAST(CAST(vt2.c1 AS TEXT) AS NUMERIC), ((((((((((vt2.c0)/(vt2.c1)))AND(((vt2.c1)&(vt2.c1)))))OR(CAST(vt2.c0 AS TEXT))))AND((NOT (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)) DESC, (((vt2.c0 IN (vt2.c0)))&((((0.8816403149836833)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1)))));
SELECT ALL * FROM vt2 WHERE ((CASE 0.2497327652228455  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END IN ())) ORDER BY CAST(CAST(vt2.c1 AS TEXT) AS NUMERIC), ((((((((((vt2.c0)/(vt2.c1)))AND(((vt2.c1)&(vt2.c1)))))OR(CAST(vt2.c0 AS TEXT))))AND((NOT (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)) DESC, (((vt2.c0 IN (vt2.c0)))&((((0.8816403149836833)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1)))));
SELECT DISTINCT * FROM vt2 WHERE ((((CASE 0.2497327652228455  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c1 END IN ()))AND('-734232506'))) ORDER BY CAST(CAST(vt2.c1 AS TEXT) AS NUMERIC), ((((((((((vt2.c0)/(vt2.c1)))AND(((vt2.c1)&(vt2.c1)))))OR(CAST(vt2.c0 AS TEXT))))AND((NOT (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)) DESC, (((vt2.c0 IN (vt2.c0)))&((((0.8816403149836833)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))) INTERSECT SELECT DISTINCT * FROM vt2 WHERE (CASE WHEN HEX(DISTINCT vt2.c1) THEN ((((((0.6874228699793334)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)) END) ORDER BY CAST(CAST(vt2.c1 AS TEXT) AS NUMERIC), ((((((((((vt2.c0)/(vt2.c1)))AND(((vt2.c1)&(vt2.c1)))))OR(CAST(vt2.c0 AS TEXT))))AND((NOT (vt2.c0)))))AND(vt2.c1 COLLATE RTRIM)) DESC, (((vt2.c0 IN (vt2.c0)))&((((0.8816403149836833)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1)))));
SELECT ALL MAX(v0.c1) FROM vt2, v0 WHERE ((((v0.c3) IS TRUE) IN ()));
SELECT ALL MAX(v0.c1) FROM vt2, v0 WHERE ((((((v0.c3) IS TRUE) IN ()))AND((((((vt2.c0)LIKE(NULL)), ((v0.c3) IS FALSE), x'a4a329' COLLATE NOCASE))>((CAST(0X627e16c7 AS REAL), CASE v0.c3  WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN v0.c3 ELSE v0.c0 END, v0.c1)))))) ORDER BY CAST(v0.c1 COLLATE NOCASE AS NUMERIC) ASC  NULLS FIRST LIMIT 0X0 INTERSECT SELECT MAX(v0.c1) FROM vt2, v0 WHERE ((~ (LIKELIHOOD(vt2.c1, v0.c1)))) ORDER BY CAST(v0.c1 COLLATE NOCASE AS NUMERIC) ASC  NULLS FIRST LIMIT 0;
SELECT ALL MIN(v0.c3) FROM v0 WHERE (((CASE v0.c0  WHEN v0.c0 THEN v0.c0 ELSE v0.c2 END) NOT BETWEEN (v0.c3 COLLATE NOCASE) AND ((v0.c2 IN ()))));
SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE (((((CASE v0.c0  WHEN v0.c0 THEN v0.c0 ELSE v0.c2 END) NOT BETWEEN (v0.c3 COLLATE NOCASE) AND ((v0.c2 IN ()))))AND(((v0.c3)/(((((((v0.c3)OR(v0.c2)))AND(v0.c2)))AND(v0.c1))))))) ORDER BY STRFTIME(((v0.c1) BETWEEN (v0.c1) AND (v0.c0)), '♦', 1131392369)  NULLS FIRST, CASE ((v0.c1)*(v0.c2))  WHEN ((((((v0.c3)AND(v0.c0)))OR(v0.c2)))OR(v0.c1)) THEN '4' WHEN '18895348' THEN 0.9603853269764853 WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN ((v0.c0)/(v0.c1)) WHEN ((v0.c1)||(v0.c2)) THEN CAST(v0.c1 AS NUMERIC) ELSE (((v0.c1, v0.c1, v0.c1))<=((v0.c3, v0.c3, v0.c0))) END DESC INTERSECT SELECT DISTINCT MIN(v0.c3) FROM v0 WHERE (TRIM(DISTINCT ((((((((((v0.c0)OR(v0.c1)))AND(v0.c2)))OR(v0.c2)))AND(v0.c0)))OR(v0.c3)), CASE v0.c1  WHEN v0.c2 THEN v0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN v0.c2 ELSE v0.c0 END)) ORDER BY STRFTIME(((v0.c1) BETWEEN (v0.c1) AND (v0.c0)), '♦', 1131392369)  NULLS FIRST, CASE ((v0.c1)*(v0.c2))  WHEN ((((((v0.c3)AND(v0.c0)))OR(v0.c2)))OR(v0.c1)) THEN '4' WHEN '18895348' THEN 0.9603853269764853 WHEN ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) THEN ((v0.c0)/(v0.c1)) WHEN ((v0.c1)||(v0.c2)) THEN CAST(v0.c1 AS NUMERIC) ELSE (((v0.c1, v0.c1, v0.c1))<=((v0.c3, v0.c3, v0.c0))) END DESC;
SELECT ALL MIN(vt0.c0) FROM vt0, vt2 WHERE (((((vt2.c1)+(vt0.c0)))LIKE((vt0.c0 IN ())))) ORDER BY (CASE WHEN vt2.c1 THEN vt0.c0 ELSE NULL END IN (CAST(vt2.c1 AS REAL)));
SELECT DISTINCT MIN(vt0.c0) FROM vt0, vt2 WHERE (((((vt2.c1)+(vt0.c0)))LIKE((vt0.c0 IN ())))) ORDER BY (('' COLLATE BINARY) NOTNULL) DESC;
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (vt2.c0);
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (vt2.c0);
SELECT * FROM v0 NATURAL JOIN vt0 WHERE (',\?1') ORDER BY ((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))AND(CASE v0.c3  WHEN vt0.c0 THEN v0.c2 ELSE vt0.c0 END)) DESC, CASE v0.c1  WHEN v0.c3 THEN v0.c3 END COLLATE NOCASE  NULLS LAST;
SELECT ALL * FROM v0 NATURAL JOIN vt0 WHERE (',\?1') ORDER BY ((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))AND(CASE v0.c3  WHEN vt0.c0 THEN v0.c2 ELSE vt0.c0 END)) DESC, CASE v0.c1  WHEN v0.c3 THEN v0.c3 END COLLATE NOCASE  NULLS LAST INTERSECT SELECT ALL * FROM v0 NATURAL JOIN vt0 WHERE ((((v0.c3, v0.c2, vt0.c0, v0.c3, v0.c3, NULL)) NOT BETWEEN ((v0.c0, CAST(v0.c2 AS REAL), (v0.c2 IN ()), ((vt0.c0) IS TRUE), UNLIKELY(vt0.c0), 0Xffffffffddc46084)) AND ((TRIM(DISTINCT v0.c3, v0.c1), DATE(v0.c1, v0.c1, v0.c0), (+ (v0.c3)), ((v0.c0)|(vt0.c0)), json_quote(vt0.c0), CAST(v0.c3 AS TEXT))))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))AND(CASE v0.c3  WHEN vt0.c0 THEN v0.c2 ELSE vt0.c0 END)) DESC, CASE v0.c1  WHEN v0.c3 THEN v0.c3 END COLLATE NOCASE  NULLS LAST;
SELECT * FROM v0 NATURAL JOIN vt0 WHERE (',\?1') ORDER BY ((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))AND(CASE v0.c3  WHEN vt0.c0 THEN v0.c2 ELSE vt0.c0 END)) DESC, CASE v0.c1  WHEN v0.c3 THEN v0.c3 END COLLATE NOCASE  NULLS LAST;
SELECT ALL * FROM v0 NATURAL JOIN vt0 WHERE (',\?1') ORDER BY ((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))AND(CASE v0.c3  WHEN vt0.c0 THEN v0.c2 ELSE vt0.c0 END)) DESC, CASE v0.c1  WHEN v0.c3 THEN v0.c3 END COLLATE NOCASE  NULLS LAST INTERSECT SELECT ALL * FROM v0 NATURAL JOIN vt0 WHERE ((((v0.c3, v0.c2, vt0.c0, v0.c3, v0.c3, NULL)) NOT BETWEEN ((v0.c0, CAST(v0.c2 AS REAL), (v0.c2 IN ()), ((vt0.c0) IS TRUE), UNLIKELY(vt0.c0), 0Xffffffffddc46084)) AND ((TRIM(DISTINCT v0.c3, v0.c1), DATE(v0.c1, v0.c1, v0.c0), (+ (v0.c3)), ((v0.c0)|(vt0.c0)), json_quote(vt0.c0), CAST(v0.c3 AS TEXT))))) ORDER BY ((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c2)))AND(CASE v0.c3  WHEN vt0.c0 THEN v0.c2 ELSE vt0.c0 END)) DESC, CASE v0.c1  WHEN v0.c3 THEN v0.c3 END COLLATE NOCASE  NULLS LAST;
SELECT ALL MIN(vt2.c0) FROM vt2, vt0 WHERE (vt0.c0) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) THEN ((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt0.c0)))OR(vt2.c0)) WHEN (- (vt2.c0)) THEN (vt2.c1 IN (vt2.c0, vt2.c0)) WHEN vt0.c0 THEN (vt2.c0 IN ()) END DESC  NULLS FIRST, ((((vt0.c0) BETWEEN ('-260182606') AND (vt2.c1))) IS TRUE) DESC;
SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 WHERE (((vt0.c0)AND(0.4311777796941849))) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) THEN ((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt0.c0)))OR(vt2.c0)) WHEN (- (vt2.c0)) THEN (vt2.c1 IN (vt2.c0, vt2.c0)) WHEN vt0.c0 THEN (vt2.c0 IN ()) END DESC  NULLS FIRST, ((((vt0.c0) BETWEEN ('-260182606') AND (vt2.c1))) IS TRUE) DESC LIMIT 0X1 INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 WHERE ((((NULL IN (vt2.c1)))<<((((vt0.c0, vt2.c0)) NOT BETWEEN ((vt2.c1, vt0.c0)) AND ((vt2.c0, vt2.c1)))))) ORDER BY CASE WHEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) THEN ((((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt0.c0)))OR(vt2.c0)) WHEN (- (vt2.c0)) THEN (vt2.c1 IN (vt2.c0, vt2.c0)) WHEN vt0.c0 THEN (vt2.c0 IN ()) END DESC  NULLS FIRST, ((((vt0.c0) BETWEEN ('-260182606') AND (vt2.c1))) IS TRUE) DESC LIMIT 1;
SELECT ALL MAX(v0.c3) FROM v0 WHERE ((~ (((v0.c0)&(NULL))))) ORDER BY CAST(((v0.c3)||(v0.c3)) AS INTEGER), ((((((v0.c1) BETWEEN (0.9555048494163475) AND (v0.c3)))OR(((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c1)))))AND(TYPEOF(DISTINCT 1235379178))) DESC  NULLS LAST;
SELECT ALL MAX(v0.c3) FROM v0 WHERE ((((~ (((v0.c0)&(NULL)))))AND((((v0.c1)*(v0.c3)) IN (v0.c1 COLLATE NOCASE, x'6c828b'))))) ORDER BY CAST(((v0.c3)||(v0.c3)) AS INTEGER), ((((((v0.c1) BETWEEN (0.9555048494163475) AND (v0.c3)))OR(((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c1)))))AND(TYPEOF(DISTINCT 1235379178))) DESC  NULLS LAST LIMIT 0X1 INTERSECT SELECT MAX(v0.c3) FROM v0 WHERE ((((v0.c2 IN ()))-(v0.c2))) ORDER BY CAST(((v0.c3)||(v0.c3)) AS INTEGER), ((((((v0.c1) BETWEEN (0.9555048494163475) AND (v0.c3)))OR(((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c1)))))AND(TYPEOF(DISTINCT 1235379178))) DESC  NULLS LAST LIMIT 1;
SELECT MAX(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0) IS FALSE) AS NUMERIC));
SELECT MAX(vt0.c0) FROM vt0 WHERE (CAST(((vt0.c0) IS FALSE) AS NUMERIC)) LIMIT 0x2 INTERSECT SELECT MAX(vt0.c0) FROM vt0 WHERE (LIKELY(DISTINCT CAST(NULL AS REAL))) LIMIT 0x2;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((vt0.c0 COLLATE RTRIM) NOT NULL));
SELECT ALL * FROM vt2, vt0, v0 WHERE (((((vt0.c0 COLLATE RTRIM) NOT NULL))AND(((CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN NULL END)OR(CAST(vt0.c0 AS REAL)))))) LIMIT 0 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (CAST(v0.c1 COLLATE NOCASE AS NUMERIC)) LIMIT 0x0;
SELECT ALL * FROM vt2, vt0, v0 WHERE (((vt0.c0 COLLATE RTRIM) NOT NULL));
SELECT ALL * FROM vt2, vt0, v0 WHERE (((((vt0.c0 COLLATE RTRIM) NOT NULL))AND(((CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c1 THEN NULL END)OR(CAST(vt0.c0 AS REAL)))))) LIMIT 0 INTERSECT SELECT ALL * FROM vt2, vt0, v0 WHERE (CAST(v0.c1 COLLATE NOCASE AS NUMERIC)) LIMIT 0x0;
SELECT MAX(vt0.c0) FROM vt2, vt0 WHERE ((CAST(vt2.c1 AS INTEGER) IN ()));
SELECT DISTINCT MAX(vt0.c0) FROM vt2, vt0 WHERE ((CAST(vt2.c1 AS INTEGER) IN ())) LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt2, vt0 WHERE (INSTR((vt2.c1 IN (vt2.c0, vt2.c1)), ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) LIMIT 0X0;
SELECT * FROM vt2, v0, vt0 WHERE (((((x'')IS NOT(v0.c0)))>=(v0.c1)));
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((((x'')IS NOT(v0.c0)))>=(v0.c1)))AND(((((v0.c1 IN ()), CAST(vt0.c0 AS NUMERIC)))<((((((((v0.c3)AND(v0.c1)))AND(vt2.c1)))AND(vt2.c0)), (((v0.c3))==((v0.c3))))))))) LIMIT 0x5;
SELECT * FROM vt2, v0, vt0 WHERE (((((x'')IS NOT(v0.c0)))>=(v0.c1)));
SELECT ALL * FROM vt2, v0, vt0 WHERE (((((((x'')IS NOT(v0.c0)))>=(v0.c1)))AND(((((v0.c1 IN ()), CAST(vt0.c0 AS NUMERIC)))<((((((((v0.c3)AND(v0.c1)))AND(vt2.c1)))AND(vt2.c0)), (((v0.c3))==((v0.c3))))))))) LIMIT 0x5;
SELECT ALL MIN(v0.c1) FROM v0, vt2 WHERE ((+ ((+ (vt2.c1))))) ORDER BY vt2.c0 DESC;
SELECT DISTINCT MIN(v0.c1) FROM v0, vt2 WHERE ((+ ((+ (vt2.c1))))) ORDER BY ((+ (v0.c0)) IN ((v0.c1 IN (vt2.c1)), (((v0.c2))==((v0.c1))))) DESC;
SELECT * FROM vt0, v0 WHERE (((vt0.c0)>(v0.c0)) COLLATE NOCASE);
SELECT ALL * FROM vt0, v0 WHERE (((vt0.c0)>(v0.c0)) COLLATE NOCASE);
SELECT * FROM vt0, v0 WHERE (((vt0.c0)>(v0.c0)) COLLATE NOCASE);
SELECT ALL * FROM vt0, v0 WHERE (((vt0.c0)>(v0.c0)) COLLATE NOCASE);
SELECT * FROM vt2 WHERE ((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, '-1478372600')) AND ((vt2.c0, vt2.c1))) COLLATE RTRIM);
SELECT ALL * FROM vt2 WHERE ((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, '-1478372600')) AND ((vt2.c0, vt2.c1))) COLLATE RTRIM) LIMIT 0X1 INTERSECT SELECT * FROM vt2 WHERE (TYPEOF(((vt2.c1) NOT NULL))) LIMIT 0x1;
SELECT * FROM vt2 WHERE ((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, '-1478372600')) AND ((vt2.c0, vt2.c1))) COLLATE RTRIM);
SELECT ALL * FROM vt2 WHERE ((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, '-1478372600')) AND ((vt2.c0, vt2.c1))) COLLATE RTRIM) LIMIT 0X1 INTERSECT SELECT * FROM vt2 WHERE (TYPEOF(((vt2.c1) NOT NULL))) LIMIT 0x1;
SELECT ALL * FROM v0, vt0 WHERE (v0.c1);
SELECT DISTINCT * FROM v0, vt0 WHERE (((v0.c1)AND(((v0.c3) NOTNULL)))) ORDER BY ((IFNULL(v0.c2, v0.c1))LIKE((v0.c1 IN (v0.c0, 0.2642123024574031)))) ASC;
SELECT ALL * FROM v0, vt0 WHERE (v0.c1);
SELECT DISTINCT * FROM v0, vt0 WHERE (((v0.c1)AND(((v0.c3) NOTNULL)))) ORDER BY ((IFNULL(v0.c2, v0.c1))LIKE((v0.c1 IN (v0.c0, 0.2642123024574031)))) ASC;
SELECT MIN(vt0.c0) FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((((((((((v0.c3))>((v0.c2))))AND(v0.c1)))AND(((v0.c1)<=(0.8763425964436258)))))OR(NULL)))OR(CAST(v0.c0 AS NUMERIC))) WHERE (CAST(CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 ELSE vt2.c0 END AS NUMERIC)) ORDER BY '' ASC, ((((v0.c3)-('-25226522'))) NOT NULL) DESC;
SELECT ALL MIN(vt0.c0) FROM vt2, v0 LEFT OUTER JOIN vt0 ON (((((((((((v0.c3))>((v0.c2))))AND(v0.c1)))AND(((v0.c1)<=(0.8763425964436258)))))OR(NULL)))OR(CAST(v0.c0 AS NUMERIC))) WHERE (((CAST(CASE vt2.c1  WHEN v0.c2 THEN vt2.c1 ELSE vt2.c0 END AS NUMERIC))AND(CASE CASE WHEN v0.c0 THEN vt0.c0 WHEN vt2.c1 THEN v0.c0 ELSE v0.c3 END  WHEN ((vt0.c0)||(vt2.c1)) THEN ((((v0.c2)OR('HNR虹''JP')))OR(vt0.c0)) WHEN (((v0.c3, v0.c0, vt2.c0)) BETWEEN ((vt0.c0, vt0.c0, v0.c1)) AND ((v0.c0, v0.c2, v0.c3))) THEN (- (vt2.c1)) WHEN ((vt2.c1)<<(vt0.c0)) THEN vt0.c0 END))) ORDER BY (- (((0.5074748151795619) NOT NULL))), CASE WHEN ((v0.c2) ISNULL) THEN CAST(vt2.c0 AS TEXT) WHEN (~ (v0.c3)) THEN ((((((v0.c3)AND(vt0.c0)))OR(vt2.c0)))AND(v0.c1)) WHEN (((v0.c3, '1204735637')) BETWEEN ((v0.c0, vt2.c1)) AND ((vt0.c0, vt2.c0))) THEN (((vt2.c0, NULL)) NOT BETWEEN ((v0.c1, vt0.c0)) AND ((vt2.c1, vt0.c0))) END  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((((+ (vt2.c0)))<(((vt2.c1)+(vt2.c0))))) ORDER BY ((((SQLITE_COMPILEOPTION_USED(vt2.c1))AND(((vt2.c1) IS TRUE))))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) DESC  NULLS FIRST, (x'' IN ())  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE ((((+ (vt2.c0)))<(((vt2.c1)+(vt2.c0))))) ORDER BY ((((SQLITE_COMPILEOPTION_USED(vt2.c1))AND(((vt2.c1) IS TRUE))))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) DESC  NULLS FIRST, (x'' IN ())  NULLS FIRST LIMIT 0x1 INTERSECT SELECT * FROM vt2 WHERE ((+ (((vt2.c0) NOT NULL)))) ORDER BY ((((SQLITE_COMPILEOPTION_USED(vt2.c1))AND(((vt2.c1) IS TRUE))))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) DESC  NULLS FIRST, (x'' IN ())  NULLS FIRST LIMIT 0x1;
SELECT ALL * FROM vt2 WHERE ((((+ (vt2.c0)))<(((vt2.c1)+(vt2.c0))))) ORDER BY ((((SQLITE_COMPILEOPTION_USED(vt2.c1))AND(((vt2.c1) IS TRUE))))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) DESC  NULLS FIRST, (x'' IN ())  NULLS FIRST;
SELECT ALL * FROM v0 NOT INDEXED, vt0 WHERE ('');
SELECT DISTINCT * FROM v0, vt0 WHERE ((('')AND('')));
SELECT ALL * FROM v0 NOT INDEXED, vt0 WHERE ('');
SELECT DISTINCT * FROM v0, vt0 WHERE ((('')AND('')));
SELECT ALL * FROM v0 WHERE ((((((('583363495') IS TRUE))OR(v0.c3)))AND(0.2422630000030055)));
SELECT * FROM v0 WHERE ((((((('583363495') IS TRUE))OR(v0.c3)))AND(0.2422630000030055))) INTERSECT SELECT ALL * FROM v0 WHERE ((+ (((v0.c3) IS TRUE))));
SELECT ALL * FROM v0 WHERE ((((((('583363495') IS TRUE))OR(v0.c3)))AND(0.2422630000030055)));
SELECT * FROM v0 WHERE ((((((('583363495') IS TRUE))OR(v0.c3)))AND(0.2422630000030055))) INTERSECT SELECT ALL * FROM v0 WHERE ((+ (((v0.c3) IS TRUE))));
SELECT * FROM v0 WHERE ((((v0.c2 IN ()))-((((v0.c3, NULL))<((v0.c3, v0.c2)))))) ORDER BY '612711888' DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN ()))-((((v0.c3, NULL))<((v0.c3, v0.c2)))))) ORDER BY CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c2 END COLLATE BINARY ASC  NULLS FIRST, CAST(((v0.c0) ISNULL) AS REAL);
SELECT * FROM v0 WHERE ((((v0.c2 IN ()))-((((v0.c3, NULL))<((v0.c3, v0.c2)))))) ORDER BY '612711888' DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0 WHERE ((((v0.c2 IN ()))-((((v0.c3, NULL))<((v0.c3, v0.c2)))))) ORDER BY CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c2 END COLLATE BINARY ASC  NULLS FIRST, CAST(((v0.c0) ISNULL) AS REAL);
SELECT ALL MIN(vt2.c0) FROM vt0, vt2 WHERE (((CASE vt0.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 END)IS(((vt0.c0)IS(vt0.c0))))) ORDER BY x'c89c35'  NULLS LAST;
SELECT MIN(vt2.c0) FROM vt0, vt2 WHERE (((((CASE vt0.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 END)IS(((vt0.c0)IS(vt0.c0)))))AND(CASE CAST(vt2.c1 AS INTEGER)  WHEN (vt2.c1 IN ()) THEN ((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) WHEN (- (vt2.c1)) THEN (vt2.c0 IN (vt2.c1)) ELSE vt0.c0 END))) ORDER BY COALESCE(DISTINCT (vt0.c0 IN (vt2.c0)), CAST(vt2.c1 AS BLOB), (+ (vt0.c0)), LOWER(DISTINCT vt2.c1), CAST(vt2.c0 AS INTEGER)) DESC, CHANGES() ASC  NULLS FIRST;
SELECT * FROM vt0, v0 INNER JOIN vt2 ON ((((vt0.c0) NOT NULL))>=(CAST(vt2.c0 AS TEXT))) WHERE (x'') ORDER BY ((CASE v0.c1  WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN v0.c2 WHEN vt2.c1 THEN '' END)*('-320443720'))  NULLS FIRST, ((NULL) ISNULL)  NULLS FIRST;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((vt0.c0) NOT NULL))>=(CAST(vt2.c0 AS TEXT))) WHERE (x'') ORDER BY ((CASE v0.c1  WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN v0.c2 WHEN vt2.c1 THEN '' END)*('-320443720'))  NULLS FIRST, ((NULL) ISNULL)  NULLS FIRST;
SELECT * FROM vt0, v0 INNER JOIN vt2 ON ((((vt0.c0) NOT NULL))>=(CAST(vt2.c0 AS TEXT))) WHERE (x'') ORDER BY ((CASE v0.c1  WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN v0.c2 WHEN vt2.c1 THEN '' END)*('-320443720'))  NULLS FIRST, ((NULL) ISNULL)  NULLS FIRST;
SELECT ALL * FROM vt0, v0 INNER JOIN vt2 ON ((((vt0.c0) NOT NULL))>=(CAST(vt2.c0 AS TEXT))) WHERE (x'') ORDER BY ((CASE v0.c1  WHEN v0.c1 THEN vt0.c0 WHEN v0.c2 THEN v0.c1 WHEN vt2.c1 THEN v0.c2 WHEN vt2.c1 THEN '' END)*('-320443720'))  NULLS FIRST, ((NULL) ISNULL)  NULLS FIRST;
SELECT * FROM vt0 WHERE (((((vt0.c0)<<(vt0.c0))) ISNULL)) ORDER BY CASE WHEN (((vt0.c0))<=((vt0.c0))) THEN ((vt0.c0)LIKE(vt0.c0)) WHEN CAST(vt0.c0 AS TEXT) THEN (((vt0.c0))!=((vt0.c0))) ELSE LIKELY(vt0.c0) END, x'd314' DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)<<(vt0.c0))) ISNULL)) ORDER BY CASE WHEN (((vt0.c0))<=((vt0.c0))) THEN ((vt0.c0)LIKE(vt0.c0)) WHEN CAST(vt0.c0 AS TEXT) THEN (((vt0.c0))<>((vt0.c0))) ELSE LIKELY(vt0.c0) END, x'd314' DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE WHEN (((vt0.c0))<=((vt0.c0))) THEN ((vt0.c0)LIKE(vt0.c0)) WHEN CAST(vt0.c0 AS TEXT) THEN (((vt0.c0))<>((vt0.c0))) ELSE LIKELY(vt0.c0) END, x'd314' DESC;
SELECT * FROM vt0 WHERE (((((vt0.c0)<<(vt0.c0))) ISNULL)) ORDER BY CASE WHEN (((vt0.c0))<=((vt0.c0))) THEN ((vt0.c0)LIKE(vt0.c0)) WHEN CAST(vt0.c0 AS TEXT) THEN (((vt0.c0))!=((vt0.c0))) ELSE LIKELY(vt0.c0) END, x'd314' DESC;
SELECT DISTINCT * FROM vt0 WHERE (((((vt0.c0)<<(vt0.c0))) ISNULL)) ORDER BY CASE WHEN (((vt0.c0))<=((vt0.c0))) THEN ((vt0.c0)LIKE(vt0.c0)) WHEN CAST(vt0.c0 AS TEXT) THEN (((vt0.c0))<>((vt0.c0))) ELSE LIKELY(vt0.c0) END, x'd314' DESC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE WHEN (((vt0.c0))<=((vt0.c0))) THEN ((vt0.c0)LIKE(vt0.c0)) WHEN CAST(vt0.c0 AS TEXT) THEN (((vt0.c0))<>((vt0.c0))) ELSE LIKELY(vt0.c0) END, x'd314' DESC;
SELECT ALL MAX(vt2.c0) FROM vt0, vt2 WHERE ((((~ (vt0.c0)))&(((vt0.c0)LIKE(0.6679422335115228)))));
SELECT DISTINCT MAX(vt2.c0) FROM vt0, vt2 WHERE ((((~ (vt0.c0)))&(((vt0.c0)LIKE(0.6679422335115228))))) LIMIT 0;
SELECT MAX(vt2.c0) FROM vt2 WHERE ('-2127914432');
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE ('-2127914432');
SELECT * FROM vt2, vt0 NOT INDEXED WHERE ((('슈') BETWEEN ((vt2.c0 IN ())) AND (((vt0.c0)>(vt2.c1)))));
SELECT * FROM vt2, vt0 WHERE ((('슈') BETWEEN ((vt2.c0 IN ())) AND (((vt0.c0)>(vt2.c1))))) ORDER BY ((((((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))OR(CASE WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c0 END)))AND((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))))OR((((((('637748985')AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c0)))) ASC LIMIT 0x1 INTERSECT SELECT * FROM vt2, vt0 WHERE (((vt0.c0 COLLATE NOCASE)*(((vt0.c0)IS NOT(vt2.c1))))) ORDER BY ((((((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))OR(CASE WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c0 END)))AND((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))))OR((((((('637748985')AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c0)))) ASC LIMIT 0X1;
SELECT * FROM vt2, vt0 NOT INDEXED WHERE ((('슈') BETWEEN ((vt2.c0 IN ())) AND (((vt0.c0)>(vt2.c1)))));
SELECT * FROM vt2, vt0 WHERE ((('슈') BETWEEN ((vt2.c0 IN ())) AND (((vt0.c0)>(vt2.c1))))) ORDER BY ((((((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))OR(CASE WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c0 END)))AND((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))))OR((((((('637748985')AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c0)))) ASC LIMIT 0x1 INTERSECT SELECT * FROM vt2, vt0 WHERE (((vt0.c0 COLLATE NOCASE)*(((vt0.c0)IS NOT(vt2.c1))))) ORDER BY ((((((((((((vt2.c1)OR(vt2.c0)))AND(vt2.c0)))OR(vt2.c0)))OR(CASE WHEN vt2.c0 THEN vt0.c0 ELSE vt2.c0 END)))AND((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))))OR((((((('637748985')AND(vt0.c0)))OR(vt2.c0)))AND(vt2.c0)))) ASC LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 END)+((- (vt0.c0)))));
SELECT ALL COUNT(*) FROM vt0 WHERE (((((CASE WHEN vt0.c0 THEN vt0.c0 END)+((- (vt0.c0)))))AND(vt0.c0))) ORDER BY (((vt0.c0)) BETWEEN ((((vt0.c0)<(vt0.c0)))) AND ((((vt0.c0)IS NOT(vt0.c0)))))  NULLS LAST, (vt0.c0 IN ()) COLLATE BINARY COLLATE NOCASE ASC, (NOT ('[t'))  NULLS LAST LIMIT 2;
SELECT MIN(v0.c2) FROM vt2, v0, vt0 WHERE (((((vt0.c0) NOT BETWEEN ('-1258014265') AND (vt0.c0)))GLOB(((v0.c3)IS(v0.c2)))));
SELECT DISTINCT MIN(v0.c2) FROM vt2, v0, vt0 WHERE (((((((vt0.c0) NOT BETWEEN ('-1258014265') AND (vt0.c0)))GLOB(((v0.c3)IS(v0.c2)))))AND(((CAST(x'' AS INTEGER)) ISNULL)))) LIMIT 1 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM vt2, v0, vt0 WHERE (((((((((v0.c3) NOT NULL))OR(v0.c2 COLLATE NOCASE)))AND((v0.c0 IN (v0.c2, '708305761')))))OR((((v0.c3))=((v0.c1)))))) LIMIT 1;
SELECT * FROM vt2 INNER JOIN v0 ON (((v0.c1, vt0.c0)) NOT BETWEEN ((NULL, CAST(vt0.c0 AS INTEGER))) AND ((x'1bbb', ((v0.c3) IS TRUE)))) INNER JOIN vt0 ON ((('-1956065535', ((vt2.c1)%(vt0.c0)), ((((v0.c2)OR(v0.c0)))AND(vt2.c1))))!=((((v0.c0)<=(v0.c3)), ((((NULL)AND(vt2.c1)))AND(v0.c3)), v0.c0 COLLATE RTRIM))) WHERE ((NOT (vt2.c0))) ORDER BY ((((((vt0.c0)>=(v0.c2)))OR((((v0.c2, v0.c1, 0.6265788730819449, v0.c3)) NOT BETWEEN ((vt2.c0, v0.c1, vt2.c0, vt2.c0)) AND ((v0.c2, vt2.c1, v0.c2, vt2.c1))))))OR(((v0.c3) BETWEEN (v0.c0) AND (v0.c0)))) ASC;
SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON (((v0.c1, vt0.c0)) NOT BETWEEN ((NULL, CAST(vt0.c0 AS INTEGER))) AND ((x'1bbb', ((v0.c3) IS TRUE)))) INNER JOIN vt0 ON ((('-1956065535', ((vt2.c1)%(vt0.c0)), ((((v0.c2)OR(v0.c0)))AND(vt2.c1))))<>((((v0.c0)<=(v0.c3)), ((((NULL)AND(vt2.c1)))AND(v0.c3)), v0.c0 COLLATE RTRIM))) WHERE ((((NOT (vt2.c0)))AND(x'f7'))) ORDER BY ((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)))>=(((v0.c3)OR(vt2.c0)))) DESC  NULLS FIRST, (v0.c2 IN (v0.c1, v0.c0)) COLLATE BINARY  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON (((v0.c1, vt0.c0)) NOT BETWEEN ((NULL, CAST(vt0.c0 AS INTEGER))) AND ((x'1bbb', ((v0.c3) IS TRUE)))) INNER JOIN vt0 ON ((('-1956065535', ((vt2.c1)%(vt0.c0)), ((((v0.c2)OR(v0.c0)))AND(vt2.c1))))<>((((v0.c0)<=(v0.c3)), ((((NULL)AND(vt2.c1)))AND(v0.c3)), v0.c0 COLLATE RTRIM))) WHERE (((v0.c0) NOT BETWEEN (NULL) AND (v0.c1)) COLLATE RTRIM) ORDER BY ((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)))>=(((v0.c3)OR(vt2.c0)))) DESC  NULLS FIRST, (v0.c2 IN (v0.c1, v0.c0)) COLLATE BINARY  NULLS FIRST;
SELECT * FROM vt2 INNER JOIN v0 ON (((v0.c1, vt0.c0)) NOT BETWEEN ((NULL, CAST(vt0.c0 AS INTEGER))) AND ((x'1bbb', ((v0.c3) IS TRUE)))) INNER JOIN vt0 ON ((('-1956065535', ((vt2.c1)%(vt0.c0)), ((((v0.c2)OR(v0.c0)))AND(vt2.c1))))!=((((v0.c0)<=(v0.c3)), ((((NULL)AND(vt2.c1)))AND(v0.c3)), v0.c0 COLLATE RTRIM))) WHERE ((NOT (vt2.c0))) ORDER BY ((((((vt0.c0)>=(v0.c2)))OR((((v0.c2, v0.c1, 0.6265788730819449, v0.c3)) NOT BETWEEN ((vt2.c0, v0.c1, vt2.c0, vt2.c0)) AND ((v0.c2, vt2.c1, v0.c2, vt2.c1))))))OR(((v0.c3) BETWEEN (v0.c0) AND (v0.c0)))) ASC;
SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON (((v0.c1, vt0.c0)) NOT BETWEEN ((NULL, CAST(vt0.c0 AS INTEGER))) AND ((x'1bbb', ((v0.c3) IS TRUE)))) INNER JOIN vt0 ON ((('-1956065535', ((vt2.c1)%(vt0.c0)), ((((v0.c2)OR(v0.c0)))AND(vt2.c1))))<>((((v0.c0)<=(v0.c3)), ((((NULL)AND(vt2.c1)))AND(v0.c3)), v0.c0 COLLATE RTRIM))) WHERE ((((NOT (vt2.c0)))AND(x'f7'))) ORDER BY ((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)))>=(((v0.c3)OR(vt2.c0)))) DESC  NULLS FIRST, (v0.c2 IN (v0.c1, v0.c0)) COLLATE BINARY  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt2 INNER JOIN v0 ON (((v0.c1, vt0.c0)) NOT BETWEEN ((NULL, CAST(vt0.c0 AS INTEGER))) AND ((x'1bbb', ((v0.c3) IS TRUE)))) INNER JOIN vt0 ON ((('-1956065535', ((vt2.c1)%(vt0.c0)), ((((v0.c2)OR(v0.c0)))AND(vt2.c1))))<>((((v0.c0)<=(v0.c3)), ((((NULL)AND(vt2.c1)))AND(v0.c3)), v0.c0 COLLATE RTRIM))) WHERE (((v0.c0) NOT BETWEEN (NULL) AND (v0.c1)) COLLATE RTRIM) ORDER BY ((((v0.c1) NOT BETWEEN (vt2.c0) AND (v0.c1)))>=(((v0.c3)OR(vt2.c0)))) DESC  NULLS FIRST, (v0.c2 IN (v0.c1, v0.c0)) COLLATE BINARY  NULLS FIRST;
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE (CAST(((v0.c1)%('f+[0ꗔzj')) AS NUMERIC)) ORDER BY (CASE WHEN v0.c3 THEN v0.c2 ELSE v0.c0 END IN (((vt2.c0)<>(vt2.c1)), ('v_KCk50S' IN (v0.c1)), ((vt2.c1)+(v0.c3)))), ((((v0.c1) BETWEEN (vt0.c0) AND (v0.c3))) NOTNULL) ASC, ((((((CHAR(v0.c1, vt2.c1, vt0.c0))OR(CASE vt2.c1  WHEN v0.c1 THEN v0.c3 END)))OR(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))))OR(UNLIKELY(DISTINCT vt2.c1)))  NULLS FIRST;
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (CAST(((v0.c1)%('f+[0ꗔzj')) AS NUMERIC)) ORDER BY CAST(NULL COLLATE RTRIM AS BLOB) DESC LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE ('.') ORDER BY CAST(NULL COLLATE RTRIM AS BLOB) DESC LIMIT 0x0;
SELECT ALL MIN(vt0.c0) FROM vt2 NATURAL JOIN vt0 WHERE (CASE WHEN vt2.c0 THEN vt2.c1 END COLLATE RTRIM);
SELECT ALL MIN(vt0.c0) FROM vt2 NATURAL JOIN vt0 WHERE (CASE WHEN vt2.c0 THEN vt2.c1 END COLLATE RTRIM);
SELECT * FROM v0, vt2 INNER JOIN vt0 ON CASE IFNULL(DISTINCT vt2.c0, v0.c1)  WHEN '獵}' THEN '0.12893410339563705' WHEN (vt2.c0 IN (vt2.c1)) THEN CASE WHEN v0.c3 THEN v0.c2 END WHEN CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c2 END THEN (~ (v0.c3)) ELSE TYPEOF(v0.c3) END WHERE (CASE ((v0.c3) BETWEEN (vt2.c1) AND (vt0.c0))  WHEN x'e7ae766aba' THEN CASE WHEN v0.c3 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 ELSE vt2.c1 END WHEN '' THEN ((v0.c0)OR(vt2.c0)) WHEN ((v0.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN (v0.c2 IN (v0.c1)) END);
SELECT * FROM v0, vt2 INNER JOIN vt0 ON CASE IFNULL(DISTINCT vt2.c0, v0.c1)  WHEN '獵}' THEN '0.12893410339563705' WHEN (vt2.c0 IN (vt2.c1)) THEN CASE WHEN v0.c3 THEN v0.c2 END WHEN CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c2 END THEN (~ (v0.c3)) ELSE TYPEOF(v0.c3) END WHERE (((CASE ((v0.c3) BETWEEN (vt2.c1) AND (vt0.c0))  WHEN x'e7ae766aba' THEN CASE WHEN v0.c3 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 ELSE vt2.c1 END WHEN '' THEN ((v0.c0)OR(vt2.c0)) WHEN ((v0.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN (v0.c2 IN (v0.c1)) END)AND(((((vt2.c0) IS TRUE))>=(((((((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))OR(vt0.c0)))OR(v0.c3))))))) ORDER BY (((v0.c2, ''))=((v0.c2, vt2.c0))) COLLATE BINARY ASC, CAST((v0.c3 IN (v0.c2)) AS NUMERIC) DESC  NULLS LAST;
SELECT * FROM v0, vt2 INNER JOIN vt0 ON CASE IFNULL(DISTINCT vt2.c0, v0.c1)  WHEN '獵}' THEN '0.12893410339563705' WHEN (vt2.c0 IN (vt2.c1)) THEN CASE WHEN v0.c3 THEN v0.c2 END WHEN CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c2 END THEN (~ (v0.c3)) ELSE TYPEOF(v0.c3) END WHERE (CASE ((v0.c3) BETWEEN (vt2.c1) AND (vt0.c0))  WHEN x'e7ae766aba' THEN CASE WHEN v0.c3 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 ELSE vt2.c1 END WHEN '' THEN ((v0.c0)OR(vt2.c0)) WHEN ((v0.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN (v0.c2 IN (v0.c1)) END);
SELECT * FROM v0, vt2 INNER JOIN vt0 ON CASE IFNULL(DISTINCT vt2.c0, v0.c1)  WHEN '獵}' THEN '0.12893410339563705' WHEN (vt2.c0 IN (vt2.c1)) THEN CASE WHEN v0.c3 THEN v0.c2 END WHEN CASE v0.c1  WHEN v0.c3 THEN v0.c3 WHEN v0.c1 THEN v0.c1 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c2 END THEN (~ (v0.c3)) ELSE TYPEOF(v0.c3) END WHERE (((CASE ((v0.c3) BETWEEN (vt2.c1) AND (vt0.c0))  WHEN x'e7ae766aba' THEN CASE WHEN v0.c3 THEN vt2.c1 WHEN v0.c3 THEN vt2.c0 WHEN v0.c2 THEN v0.c2 ELSE vt2.c1 END WHEN '' THEN ((v0.c0)OR(vt2.c0)) WHEN ((v0.c1) NOT BETWEEN (vt2.c1) AND (vt2.c1)) THEN (v0.c2 IN (v0.c1)) END)AND(((((vt2.c0) IS TRUE))>=(((((((((((vt0.c0)OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c1)))OR(vt0.c0)))OR(v0.c3))))))) ORDER BY (((v0.c2, ''))=((v0.c2, vt2.c0))) COLLATE BINARY ASC, CAST((v0.c3 IN (v0.c2)) AS NUMERIC) DESC  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c0) NOT BETWEEN ('0.4099338637139208') AND (x'51')))OR(json_extract(v0.c0, NULL)))) ORDER BY (((vt2.c1)) NOT BETWEEN ((CAST(v0.c3 AS INTEGER))) AND ((((((((((((((vt2.c0)OR(v0.c2)))AND(v0.c3)))AND(vt0.c0)))AND(vt2.c1)))OR(NULL)))AND('-298335975'))))) DESC  NULLS LAST, (((v0.c2, v0.c2, x'384ede')) BETWEEN ((CAST(vt2.c1 AS REAL), CAST(vt2.c1 AS BLOB), vt2.c1 COLLATE BINARY)) AND (((+ (v0.c0)), ((((vt2.c1)AND(v0.c2)))OR(vt2.c0)), ((v0.c2)-(v0.c2))))) DESC, (((v0.c2 IN ())) BETWEEN (CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END) AND (NULL)) ASC;
SELECT * FROM vt0, v0, vt2 WHERE (((((v0.c0) NOT BETWEEN ('0.4099338637139208') AND (x'51')))OR(json_extract(v0.c0, NULL)))) ORDER BY ((vt2.c0) ISNULL) COLLATE BINARY DESC  NULLS FIRST, CASE 0xfffffffff6a0b416  WHEN v0.c1 COLLATE NOCASE THEN vt0.c0 ELSE IFNULL(v0.c1, v0.c2) END ASC;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((((v0.c0) NOT BETWEEN ('0.4099338637139208') AND (x'51')))OR(json_extract(v0.c0, NULL)))) ORDER BY (((vt2.c1)) NOT BETWEEN ((CAST(v0.c3 AS INTEGER))) AND ((((((((((((((vt2.c0)OR(v0.c2)))AND(v0.c3)))AND(vt0.c0)))AND(vt2.c1)))OR(NULL)))AND('-298335975'))))) DESC  NULLS LAST, (((v0.c2, v0.c2, x'384ede')) BETWEEN ((CAST(vt2.c1 AS REAL), CAST(vt2.c1 AS BLOB), vt2.c1 COLLATE BINARY)) AND (((+ (v0.c0)), ((((vt2.c1)AND(v0.c2)))OR(vt2.c0)), ((v0.c2)-(v0.c2))))) DESC, (((v0.c2 IN ())) BETWEEN (CASE v0.c1  WHEN v0.c0 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 ELSE v0.c2 END) AND (NULL)) ASC;
SELECT * FROM vt0, v0, vt2 WHERE (((((v0.c0) NOT BETWEEN ('0.4099338637139208') AND (x'51')))OR(json_extract(v0.c0, NULL)))) ORDER BY ((vt2.c0) ISNULL) COLLATE BINARY DESC  NULLS FIRST, CASE 0xfffffffff6a0b416  WHEN v0.c1 COLLATE NOCASE THEN vt0.c0 ELSE IFNULL(v0.c1, v0.c2) END ASC;
SELECT COUNT(*) FROM vt0 NATURAL JOIN v0 WHERE (((LAST_INSERT_ROWID())GLOB(v0.c1 COLLATE NOCASE)));
SELECT DISTINCT COUNT(*) FROM vt0 NATURAL JOIN v0 WHERE (((LAST_INSERT_ROWID())GLOB(v0.c1 COLLATE NOCASE)));
SELECT MAX(vt2.c0) FROM vt2 WHERE ((~ (((vt2.c0)==(vt2.c1)))));
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE ((~ (((vt2.c0)=(vt2.c1))))) ORDER BY vt2.c1  NULLS LAST, ((vt2.c0) IS TRUE)  NULLS FIRST INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (x'9b') ORDER BY vt2.c1  NULLS LAST, ((vt2.c0) IS TRUE)  NULLS FIRST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((CASE NULL  WHEN vt0.c0 THEN 0.12792904011923356 WHEN vt2.c0 THEN vt0.c0 END) NOT NULL)) ORDER BY CAST(v0.c3 AS BLOB) COLLATE BINARY ASC  NULLS FIRST, ((CASE vt2.c0  WHEN v0.c1 THEN vt2.c0 WHEN NULL THEN v0.c3 ELSE v0.c2 END)/((NOT (vt2.c0))));
SELECT ALL * FROM vt0, vt2, v0 WHERE (((CASE NULL  WHEN vt0.c0 THEN 0.12792904011923356 WHEN vt2.c0 THEN vt0.c0 END) NOT NULL)) ORDER BY ((vt2.c1 COLLATE RTRIM)LIKE(HEX(v0.c1))) ASC  NULLS FIRST, (+ (((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)))) DESC LIMIT 1;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((CASE NULL  WHEN vt0.c0 THEN 0.12792904011923356 WHEN vt2.c0 THEN vt0.c0 END) NOT NULL)) ORDER BY CAST(v0.c3 AS BLOB) COLLATE BINARY ASC  NULLS FIRST, ((CASE vt2.c0  WHEN v0.c1 THEN vt2.c0 WHEN NULL THEN v0.c3 ELSE v0.c2 END)/((NOT (vt2.c0))));
SELECT ALL * FROM vt0, vt2, v0 WHERE (((CASE NULL  WHEN vt0.c0 THEN 0.12792904011923356 WHEN vt2.c0 THEN vt0.c0 END) NOT NULL)) ORDER BY ((vt2.c1 COLLATE RTRIM)LIKE(HEX(v0.c1))) ASC  NULLS FIRST, (+ (((v0.c0) NOT BETWEEN (v0.c3) AND (v0.c3)))) DESC LIMIT 1;
SELECT * FROM vt0 INNER JOIN vt2 ON NULL WHERE (CASE (('^')<>(vt0.c0))  WHEN CASE vt2.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END THEN CASE vt2.c0  WHEN vt0.c0 THEN 0xffffffff9ddec29c WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 END WHEN 0xffffffffe8ee5f3d THEN ((vt0.c0)AND(vt2.c0)) WHEN (vt2.c1 IN (vt2.c1, vt2.c0, vt2.c0)) THEN CAST(vt2.c1 AS BLOB) END);
SELECT * FROM vt0 INNER JOIN vt2 ON NULL WHERE (CASE (('^')>(vt0.c0))  WHEN CASE vt2.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END THEN CASE vt2.c0  WHEN vt0.c0 THEN -1646345572 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 END WHEN 0xffffffffe8ee5f3d THEN ((vt0.c0)AND(vt2.c0)) WHEN (vt2.c1 IN (vt2.c1, vt2.c0, vt2.c0)) THEN CAST(vt2.c1 AS BLOB) END) ORDER BY -551752042 DESC  NULLS LAST, ((((vt2.c0) BETWEEN (vt2.c1) AND (vt0.c0)))LIKE(vt0.c0 COLLATE RTRIM))  NULLS FIRST INTERSECT SELECT * FROM vt0 INNER JOIN vt2 ON NULL WHERE ((((((vt2.c0, vt0.c0, vt2.c0)) BETWEEN ((vt2.c1, 8.90457025E8, vt2.c0)) AND ((vt0.c0, vt0.c0, vt2.c1)))) BETWEEN ((- (vt0.c0))) AND (((-610673233) BETWEEN (vt2.c1) AND (vt0.c0))))) ORDER BY -551752042 DESC  NULLS LAST, ((((vt2.c0) BETWEEN (vt2.c1) AND (vt0.c0)))LIKE(vt0.c0 COLLATE RTRIM))  NULLS FIRST;
SELECT * FROM vt0 INNER JOIN vt2 ON NULL WHERE (CASE (('^')<>(vt0.c0))  WHEN CASE vt2.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END THEN CASE vt2.c0  WHEN vt0.c0 THEN 0xffffffff9ddec29c WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 END WHEN 0xffffffffe8ee5f3d THEN ((vt0.c0)AND(vt2.c0)) WHEN (vt2.c1 IN (vt2.c1, vt2.c0, vt2.c0)) THEN CAST(vt2.c1 AS BLOB) END);
SELECT * FROM vt0 INNER JOIN vt2 ON NULL WHERE (CASE (('^')>(vt0.c0))  WHEN CASE vt2.c1  WHEN vt0.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END THEN CASE vt2.c0  WHEN vt0.c0 THEN -1646345572 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 END WHEN 0xffffffffe8ee5f3d THEN ((vt0.c0)AND(vt2.c0)) WHEN (vt2.c1 IN (vt2.c1, vt2.c0, vt2.c0)) THEN CAST(vt2.c1 AS BLOB) END) ORDER BY -551752042 DESC  NULLS LAST, ((((vt2.c0) BETWEEN (vt2.c1) AND (vt0.c0)))LIKE(vt0.c0 COLLATE RTRIM))  NULLS FIRST INTERSECT SELECT * FROM vt0 INNER JOIN vt2 ON NULL WHERE ((((((vt2.c0, vt0.c0, vt2.c0)) BETWEEN ((vt2.c1, 8.90457025E8, vt2.c0)) AND ((vt0.c0, vt0.c0, vt2.c1)))) BETWEEN ((- (vt0.c0))) AND (((-610673233) BETWEEN (vt2.c1) AND (vt0.c0))))) ORDER BY -551752042 DESC  NULLS LAST, ((((vt2.c0) BETWEEN (vt2.c1) AND (vt0.c0)))LIKE(vt0.c0 COLLATE RTRIM))  NULLS FIRST;
SELECT COUNT(*) FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((((((((v0.c3)AND(vt2.c0)))OR(v0.c3)))OR(v0.c3)))OR(v0.c3)))>>(((v0.c1)GLOB(v0.c0))))) ORDER BY UNICODE(CAST(v0.c2 AS NUMERIC)) ASC  NULLS LAST, (((v0.c0)) BETWEEN ((((vt2.c1) NOT NULL))) AND (((v0.c3 IN ()))))  NULLS LAST, TYPEOF((v0.c1 IN (vt2.c1, v0.c2))) DESC;
SELECT COUNT(*) FROM vt0, v0 NATURAL JOIN vt2 WHERE (((((((((((((v0.c3)AND(vt2.c0)))OR(v0.c3)))OR(v0.c3)))OR(v0.c3)))>>(((v0.c1)GLOB(v0.c0)))))AND(((((((vt0.c0)LIKE(v0.c3)))AND(((((((((((((vt2.c1)AND(v0.c2)))AND(vt2.c0)))AND(v0.c1)))AND(v0.c0)))OR(v0.c0)))OR(vt0.c0)))))OR((((v0.c2))<((vt2.c1)))))))) ORDER BY ((((vt2.c0) NOT BETWEEN (v0.c3) AND (vt2.c1))) BETWEEN (((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) AND ((((v0.c0, vt2.c0))>((vt2.c1, NULL))))) DESC, ((((((v0.c3) BETWEEN (NULL) AND (v0.c3)))AND(v0.c0 COLLATE RTRIM)))AND((+ (vt0.c0)))) DESC LIMIT 0X0 INTERSECT SELECT COUNT(*) FROM vt0, v0 NATURAL JOIN vt2 WHERE ((((((vt0.c0) BETWEEN (v0.c1) AND ('2086565289')), (+ (v0.c0)), CASE 0.2920352001684853  WHEN v0.c1 THEN vt2.c1 END))>=((((((((((((((v0.c2)AND(v0.c2)))OR(v0.c3)))AND(vt2.c0)))AND(vt2.c1)))AND(v0.c3)))AND(vt2.c1)), CAST(v0.c0 AS INTEGER), ((vt0.c0)OR(vt2.c0)))))) ORDER BY ((((vt2.c0) NOT BETWEEN (v0.c3) AND (vt2.c1))) BETWEEN (((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) AND ((((v0.c0, vt2.c0))>((vt2.c1, NULL))))) DESC, ((((((v0.c3) BETWEEN (NULL) AND (v0.c3)))AND(v0.c0 COLLATE RTRIM)))AND((+ (vt0.c0)))) DESC LIMIT 0;
SELECT * FROM v0 WHERE (((((((v0.c0)AND(v0.c2)))AND(v0.c2)))*((v0.c1 IN (v0.c0))))) ORDER BY (((v0.c2)) NOT BETWEEN ((((v0.c2) NOT NULL))) AND ((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE '0.08634741939000601' END))), ((((((HEX(DISTINCT v0.c2))AND((v0.c1 IN (v0.c2)))))OR((((v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c2)) AND ((v0.c1, v0.c3, v0.c1))))))AND(((v0.c3)IS NOT(v0.c2)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c0)AND(v0.c2)))AND(v0.c2)))*((v0.c1 IN (v0.c0))))) ORDER BY (((v0.c2)) NOT BETWEEN ((((v0.c2) NOT NULL))) AND ((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE '0.08634741939000601' END))), ((((((HEX(DISTINCT v0.c2))AND((v0.c1 IN (v0.c2)))))OR((((v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c2)) AND ((v0.c1, v0.c3, v0.c1))))))AND(((v0.c3)IS NOT(v0.c2)))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((LIKELIHOOD(v0.c3, v0.c2))%(IFNULL(v0.c2, v0.c2)))) ORDER BY (((v0.c2)) NOT BETWEEN ((((v0.c2) NOT NULL))) AND ((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE '0.08634741939000601' END))), ((((((HEX(DISTINCT v0.c2))AND((v0.c1 IN (v0.c2)))))OR((((v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c2)) AND ((v0.c1, v0.c3, v0.c1))))))AND(((v0.c3)IS NOT(v0.c2)))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((((v0.c0)AND(v0.c2)))AND(v0.c2)))*((v0.c1 IN (v0.c0))))) ORDER BY (((v0.c2)) NOT BETWEEN ((((v0.c2) NOT NULL))) AND ((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE '0.08634741939000601' END))), ((((((HEX(DISTINCT v0.c2))AND((v0.c1 IN (v0.c2)))))OR((((v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c2)) AND ((v0.c1, v0.c3, v0.c1))))))AND(((v0.c3)IS NOT(v0.c2)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((((((v0.c0)AND(v0.c2)))AND(v0.c2)))*((v0.c1 IN (v0.c0))))) ORDER BY (((v0.c2)) NOT BETWEEN ((((v0.c2) NOT NULL))) AND ((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE '0.08634741939000601' END))), ((((((HEX(DISTINCT v0.c2))AND((v0.c1 IN (v0.c2)))))OR((((v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c2)) AND ((v0.c1, v0.c3, v0.c1))))))AND(((v0.c3)IS NOT(v0.c2)))) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0 WHERE (((LIKELIHOOD(v0.c3, v0.c2))%(IFNULL(v0.c2, v0.c2)))) ORDER BY (((v0.c2)) NOT BETWEEN ((((v0.c2) NOT NULL))) AND ((CASE WHEN v0.c2 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c0 WHEN v0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE '0.08634741939000601' END))), ((((((HEX(DISTINCT v0.c2))AND((v0.c1 IN (v0.c2)))))OR((((v0.c0, v0.c2, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c2)) AND ((v0.c1, v0.c3, v0.c1))))))AND(((v0.c3)IS NOT(v0.c2)))) ASC  NULLS LAST;
SELECT COUNT(*) FROM v0 WHERE ((v0.c3 COLLATE BINARY IN (load_extension(v0.c2, v0.c0), ((v0.c3)>(0Xffffffff82a409a4)))));
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((v0.c3 COLLATE BINARY IN (load_extension(v0.c2, v0.c0))))AND(((((((((((((v0.c3) NOT NULL))OR(((((v0.c3)AND(v0.c1)))OR(v0.c0)))))AND(((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c1)))))OR(((v0.c1) BETWEEN (v0.c2) AND (v0.c3)))))AND(v0.c2)))OR(highlight('-1797748744', v0.c3, v0.c0, v0.c2)))))) INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (HEX(DISTINCT (((0.08287435577663205))>=((v0.c0)))));
SELECT * FROM v0 WHERE (v0.c1);
SELECT DISTINCT * FROM v0 WHERE (((v0.c1)AND((+ (v0.c3)) COLLATE NOCASE))) ORDER BY v0.c3 DESC, ((v0.c1)IS(v0.c2)) COLLATE BINARY LIMIT 0;
SELECT * FROM v0 WHERE (v0.c1);
SELECT DISTINCT * FROM v0 WHERE (((v0.c1)AND((+ (v0.c3)) COLLATE NOCASE))) ORDER BY v0.c3 DESC, ((v0.c1)IS(v0.c2)) COLLATE BINARY LIMIT 0;
SELECT * FROM v0 WHERE ((((((((v0.c1)OR(v0.c3)))OR(0.8728218574607441)))AND(v0.c1)) IN ())) ORDER BY IFNULL(v0.c3, v0.c2) COLLATE RTRIM  NULLS FIRST, DATETIME(v0.c2, v0.c1, v0.c1) COLLATE RTRIM DESC;
SELECT ALL * FROM v0 WHERE ((((((((((v0.c1)OR(v0.c3)))OR(0.8728218574607441)))AND(v0.c1)) IN ()))AND(((v0.c3) IS FALSE) COLLATE NOCASE))) ORDER BY ((((((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3)))OR(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)))))AND(v0.c1 COLLATE RTRIM)))AND(((v0.c3)+(v0.c0)))) ASC, CASE CASE v0.c1  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE 'c68쵠' END  WHEN json_valid(v0.c1) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c2)) END  NULLS LAST INTERSECT SELECT * FROM v0 WHERE ('0-8i') ORDER BY ((((((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3)))OR(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)))))AND(v0.c1 COLLATE RTRIM)))AND(((v0.c3)+(v0.c0)))) ASC, CASE CASE v0.c1  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE 'c68쵠' END  WHEN json_valid(v0.c1) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c2)) END  NULLS LAST;
SELECT * FROM v0 WHERE ((((((((v0.c1)OR(v0.c3)))OR(0.8728218574607441)))AND(v0.c1)) IN ())) ORDER BY IFNULL(v0.c3, v0.c2) COLLATE RTRIM  NULLS FIRST, DATETIME(v0.c2, v0.c1, v0.c1) COLLATE RTRIM DESC;
SELECT ALL * FROM v0 WHERE ((((((((((v0.c1)OR(v0.c3)))OR(0.8728218574607441)))AND(v0.c1)) IN ()))AND(((v0.c3) IS FALSE) COLLATE NOCASE))) ORDER BY ((((((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3)))OR(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)))))AND(v0.c1 COLLATE RTRIM)))AND(((v0.c3)+(v0.c0)))) ASC, CASE CASE v0.c1  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE 'c68쵠' END  WHEN json_valid(v0.c1) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c2)) END  NULLS LAST INTERSECT SELECT * FROM v0 WHERE ('0-8i') ORDER BY ((((((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c3)))OR(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c2)))))AND(v0.c1 COLLATE RTRIM)))AND(((v0.c3)+(v0.c0)))) ASC, CASE CASE v0.c1  WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c1 ELSE 'c68쵠' END  WHEN json_valid(v0.c1) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (v0.c2)) END  NULLS LAST;
SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS REAL)) ORDER BY vt0.c0 ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS REAL))AND(LOWER(DISTINCT json(vt0.c0))))) ORDER BY ((json_array_length(vt0.c0))-(-551752042)) ASC, CASE WHEN (vt0.c0 IN ()) THEN IFNULL(vt0.c0, vt0.c0) ELSE (((vt0.c0, vt0.c0))>=((vt0.c0, vt0.c0))) END  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (x'65' COLLATE BINARY) ORDER BY ((json_array_length(vt0.c0))-(0Xffffffffdf1cee96)) ASC, CASE WHEN (vt0.c0 IN ()) THEN IFNULL(vt0.c0, vt0.c0) ELSE (((vt0.c0, vt0.c0))>=((vt0.c0, vt0.c0))) END  NULLS LAST LIMIT 0;
SELECT * FROM vt0 WHERE (CAST(vt0.c0 AS REAL)) ORDER BY vt0.c0 ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(vt0.c0 AS REAL))AND(LOWER(DISTINCT json(vt0.c0))))) ORDER BY ((json_array_length(vt0.c0))-(-551752042)) ASC, CASE WHEN (vt0.c0 IN ()) THEN IFNULL(vt0.c0, vt0.c0) ELSE (((vt0.c0, vt0.c0))>=((vt0.c0, vt0.c0))) END  NULLS LAST LIMIT 0x0 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (x'65' COLLATE BINARY) ORDER BY ((json_array_length(vt0.c0))-(0Xffffffffdf1cee96)) ASC, CASE WHEN (vt0.c0 IN ()) THEN IFNULL(vt0.c0, vt0.c0) ELSE (((vt0.c0, vt0.c0))>=((vt0.c0, vt0.c0))) END  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM vt2, vt0 NATURAL JOIN v0 WHERE ((((v0.c2, vt2.c1)) BETWEEN ((((((0Xffffffffa5436d6e)AND(v0.c2)))AND(vt2.c0)), vt0.c0)) AND ((v0.c2 COLLATE NOCASE, ((v0.c3)LIKE(vt2.c1)))))) ORDER BY (((((((((vt2.c0 IN (v0.c0)))OR(json_array_length(vt0.c0))))AND(CASE WHEN v0.c1 THEN vt2.c1 WHEN v0.c1 THEN v0.c1 ELSE vt2.c1 END)))OR('-574332796')))AND(((((((((v0.c0)OR(vt0.c0)))OR(v0.c0)))OR(vt0.c0)))OR(vt2.c1))))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt2, vt0 NATURAL JOIN v0 WHERE ((((((v0.c2, vt2.c1)) BETWEEN ((((((0Xffffffffa5436d6e)AND(v0.c2)))AND(vt2.c0)), vt0.c0)) AND ((v0.c2 COLLATE NOCASE, ((v0.c3)LIKE(vt2.c1))))))AND((((vt0.c0) IS FALSE) IN ((~ (vt0.c0))))))) ORDER BY (((((((((vt2.c0 IN (v0.c0)))OR(json_array_length(vt0.c0))))AND(CASE WHEN v0.c1 THEN vt2.c1 WHEN v0.c1 THEN v0.c1 ELSE vt2.c1 END)))OR('-574332796')))AND(((((((((v0.c0)OR(vt0.c0)))OR(v0.c0)))OR(vt0.c0)))OR(vt2.c1))))  NULLS LAST;
SELECT ALL MIN(v0.c0) FROM vt0, v0 WHERE (((- (v0.c2)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (v0.c1)))));
SELECT DISTINCT MIN(v0.c0) FROM vt0, v0 WHERE (((- (v0.c2)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (v0.c1))))) ORDER BY x'86' DESC, ((v0.c2) NOT BETWEEN (((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c3))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)))) DESC, (vt0.c0 IN (v0.c1)) DESC  NULLS FIRST LIMIT 0x2 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM vt0, v0 WHERE (vt0.c0) ORDER BY x'86' DESC, ((v0.c2) NOT BETWEEN (((v0.c3) NOT BETWEEN (vt0.c0) AND (v0.c3))) AND (((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c0)))) DESC, (vt0.c0 IN (v0.c1)) DESC  NULLS FIRST LIMIT 0x2;
SELECT MIN(vt2.c0) FROM vt2 WHERE (json_array_length(((vt2.c0)<>(vt2.c0)))) ORDER BY ((((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c1))) NOT BETWEEN (json(vt2.c0)) AND (vt2.c1 COLLATE BINARY))  NULLS FIRST, CASE ((vt2.c1) IS TRUE)  WHEN DATE(vt2.c0, vt2.c1, vt2.c0) THEN CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END WHEN (~ (vt2.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0)) END;
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (json_array_length(((vt2.c0)<>(vt2.c0)))) ORDER BY vt2.c1, TRIM(CAST(x'c9c3556c' AS INTEGER)) DESC LIMIT 1;
SELECT MIN(vt0.c0) FROM v0, vt0 WHERE (((((v0.c0)AND(v0.c3)))*((NOT (v0.c0))))) ORDER BY ((CAST(v0.c3 AS TEXT)) NOT BETWEEN (((v0.c3)+(vt0.c0))) AND (RTRIM(v0.c0))) DESC, CASE WHEN (((v0.c1, v0.c1, v0.c1, vt0.c0)) BETWEEN ((vt0.c0, v0.c3, v0.c1, vt0.c0)) AND ((v0.c3, v0.c1, v0.c2, v0.c1))) THEN v0.c0 COLLATE NOCASE WHEN ((((((v0.c3)AND(v0.c3)))OR(v0.c3)))OR(vt0.c0)) THEN v0.c3 COLLATE NOCASE END  NULLS LAST, ((((NULL)=(v0.c0)))>=(0X3c45c7fe))  NULLS FIRST;
SELECT ALL MIN(vt0.c0) FROM v0, vt0 WHERE (((((v0.c0)AND(v0.c3)))*((NOT (v0.c0))))) ORDER BY ((TRIM(DISTINCT v0.c1)) IS TRUE) ASC, (((((v0.c3 IN ()))OR((~ (v0.c0)))))AND((~ (v0.c2)))) ASC  NULLS FIRST, CASE WHEN v0.c0 COLLATE NOCASE THEN CASE v0.c3  WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c3 WHEN v0.c3 THEN v0.c2 WHEN v0.c3 THEN v0.c0 END WHEN ((((((((v0.c0)OR(v0.c3)))AND(v0.c2)))AND(v0.c0)))AND(v0.c3)) THEN ((vt0.c0) NOTNULL) WHEN (((v0.c2, v0.c0)) BETWEEN ((v0.c1, v0.c0)) AND ((vt0.c0, vt0.c0))) THEN (- (v0.c0)) ELSE ((v0.c3) ISNULL) END;
SELECT ALL MAX(v0.c2) FROM vt2, v0 WHERE ((+ (vt2.c1 COLLATE RTRIM)));
SELECT DISTINCT MAX(v0.c2) FROM vt2, v0 WHERE ((+ (vt2.c1 COLLATE RTRIM))) ORDER BY CAST((((v0.c3))<=((vt2.c1))) AS REAL)  NULLS LAST, (('1646465875') BETWEEN (v0.c3) AND (v0.c3)) COLLATE NOCASE ASC  NULLS LAST;
SELECT * FROM vt2 WHERE (((((vt2.c1) NOT BETWEEN (vt2.c1) AND ('0.5136878169807817'))) BETWEEN (vt2.c0) AND (CAST(vt2.c0 AS BLOB))));
SELECT * FROM vt2 WHERE (((((((vt2.c1) NOT BETWEEN (vt2.c1) AND ('0.5136878169807817'))) BETWEEN (vt2.c0) AND (CAST(vt2.c0 AS BLOB))))AND((((vt2.c1, vt2.c1, vt2.c1, vt2.c0)) BETWEEN ((vt2.c0, TRIM(DISTINCT vt2.c1, vt2.c0), vt2.c0 COLLATE NOCASE, ((vt2.c0)AND(vt2.c1)))) AND ((((0.7817843138651376) NOT BETWEEN (vt2.c1) AND (vt2.c1)), vt2.c0 COLLATE BINARY, (~ (vt2.c0)), ((vt2.c1) BETWEEN ('/Dq*(X&觲') AND (vt2.c1)))))))) LIMIT 0 INTERSECT SELECT ALL * FROM vt2 WHERE (CASE (- (vt2.c0))  WHEN ((-2.133440203E9) NOTNULL) THEN ((vt2.c1)*(vt2.c1)) WHEN vt2.c0 COLLATE RTRIM THEN vt2.c0 ELSE ((vt2.c0)&(vt2.c1)) END) LIMIT 0;
SELECT * FROM vt2 WHERE (((((vt2.c1) NOT BETWEEN (vt2.c1) AND ('0.5136878169807817'))) BETWEEN (vt2.c0) AND (CAST(vt2.c0 AS BLOB))));
SELECT * FROM vt2 WHERE (((((((vt2.c1) NOT BETWEEN (vt2.c1) AND ('0.5136878169807817'))) BETWEEN (vt2.c0) AND (CAST(vt2.c0 AS BLOB))))AND((((vt2.c1, vt2.c1, vt2.c1, vt2.c0)) BETWEEN ((vt2.c0, TRIM(DISTINCT vt2.c1, vt2.c0), vt2.c0 COLLATE NOCASE, ((vt2.c0)AND(vt2.c1)))) AND ((((0.7817843138651376) NOT BETWEEN (vt2.c1) AND (vt2.c1)), vt2.c0 COLLATE BINARY, (~ (vt2.c0)), ((vt2.c1) BETWEEN ('/Dq*(X&觲') AND (vt2.c1)))))))) LIMIT 0 INTERSECT SELECT ALL * FROM vt2 WHERE (CASE (- (vt2.c0))  WHEN ((-2.133440203E9) NOTNULL) THEN ((vt2.c1)*(vt2.c1)) WHEN vt2.c0 COLLATE RTRIM THEN vt2.c0 ELSE ((vt2.c0)&(vt2.c1)) END) LIMIT 0;
SELECT MIN(vt2.c0) FROM vt2, vt0 WHERE (x'');
SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 WHERE (((x'')AND(((ABS(DISTINCT vt2.c1)) NOT BETWEEN (vt2.c1) AND ((vt2.c0 IN ())))))) LIMIT 0X2 INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2, vt0 WHERE ((((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))))<((vt0.c0 IN ())))) LIMIT 0x2;
SELECT ALL * FROM vt0 LEFT OUTER JOIN v0 ON ((((((((v0.c3)AND(vt2.c0)))AND(v0.c2)))OR(vt2.c0))) NOT NULL) INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (v0.c3) AND (vt0.c0)))<=((NOT (vt2.c1)))) WHERE ((((((((- (vt0.c0)))OR((~ (v0.c1)))))OR(((v0.c0) IS FALSE))))OR((NOT (v0.c0))))) ORDER BY ((((vt2.c0 COLLATE NOCASE)OR((((x'0ca6', v0.c3, vt2.c1)) BETWEEN ((vt0.c0, vt2.c1, v0.c1)) AND ((NULL, v0.c1, 999030765))))))OR(((v0.c2)|(vt2.c1))))  NULLS FIRST, (((((v0.c3, vt2.c0, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c0)) AND ((NULL, NULL, v0.c0))))||(v0.c1)) ASC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN v0 ON ((((((((v0.c3)AND(vt2.c0)))AND(v0.c2)))OR(vt2.c0))) NOT NULL) INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (v0.c3) AND (vt0.c0)))<=((NOT (vt2.c1)))) WHERE ((((((((- (vt0.c0)))OR((~ (v0.c1)))))OR(((v0.c0) IS FALSE))))OR((NOT (v0.c0))))) ORDER BY ((((vt2.c0 COLLATE NOCASE)OR((((x'0ca6', v0.c3, vt2.c1)) BETWEEN ((vt0.c0, vt2.c1, v0.c1)) AND ((NULL, v0.c1, 0X3b8bffed))))))OR(((v0.c2)|(vt2.c1))))  NULLS FIRST, (((((v0.c3, vt2.c0, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c0)) AND ((NULL, NULL, v0.c0))))||(v0.c1)) ASC  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 LEFT OUTER JOIN v0 ON ((((((((v0.c3)AND(vt2.c0)))AND(v0.c2)))OR(vt2.c0))) NOT NULL) INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (v0.c3) AND (vt0.c0)))<=((NOT (vt2.c1)))) WHERE ('130356714') ORDER BY ((((vt2.c0 COLLATE NOCASE)OR((((x'0ca6', v0.c3, vt2.c1)) BETWEEN ((vt0.c0, vt2.c1, v0.c1)) AND ((NULL, v0.c1, 0x3b8bffed))))))OR(((v0.c2)|(vt2.c1))))  NULLS FIRST, (((((v0.c3, vt2.c0, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c0)) AND ((NULL, NULL, v0.c0))))||(v0.c1)) ASC  NULLS FIRST;
SELECT ALL * FROM vt0 LEFT OUTER JOIN v0 ON ((((((((v0.c3)AND(vt2.c0)))AND(v0.c2)))OR(vt2.c0))) NOT NULL) INNER JOIN vt2 ON ((((vt2.c1) BETWEEN (v0.c3) AND (vt0.c0)))<=((NOT (vt2.c1)))) WHERE ((((((((- (vt0.c0)))OR((~ (v0.c1)))))OR(((v0.c0) IS FALSE))))OR((NOT (v0.c0))))) ORDER BY ((((vt2.c0 COLLATE NOCASE)OR((((x'0ca6', v0.c3, vt2.c1)) BETWEEN ((vt0.c0, vt2.c1, v0.c1)) AND ((NULL, v0.c1, 999030765))))))OR(((v0.c2)|(vt2.c1))))  NULLS FIRST, (((((v0.c3, vt2.c0, v0.c3)) NOT BETWEEN ((v0.c3, v0.c3, v0.c0)) AND ((NULL, NULL, v0.c0))))||(v0.c1)) ASC  NULLS FIRST;
SELECT ALL MAX(vt2.c1) FROM vt2, vt0 WHERE (((((vt2.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, x'97')) AND ((vt2.c0, vt0.c0))) IN ())) ORDER BY (((vt2.c0 IN (vt2.c0, vt2.c1))) NOT NULL);
SELECT DISTINCT MAX(vt2.c1) FROM vt2, vt0 WHERE (((((vt2.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, x'97')) AND ((vt2.c0, vt0.c0))) IN ())) ORDER BY ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) COLLATE BINARY  NULLS LAST, ((((vt0.c0)-(vt0.c0)))AND(((((((vt2.c1)OR(0.960220642319812)))AND(vt2.c0)))OR(vt2.c1))))  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT MAX(vt2.c1) FROM vt2, vt0 WHERE (CAST(CAST('%' AS NUMERIC) AS TEXT)) ORDER BY ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) COLLATE BINARY  NULLS LAST, ((((vt0.c0)-(vt0.c0)))AND(((((((vt2.c1)OR(0.960220642319812)))AND(vt2.c0)))OR(vt2.c1))))  NULLS FIRST LIMIT 0x0;
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (COALESCE(DISTINCT CAST(vt0.c0 AS NUMERIC), ((vt0.c0)>=(v0.c2))));
SELECT ALL COUNT(*) FROM vt0, v0 WHERE (COALESCE(DISTINCT CAST(vt0.c0 AS NUMERIC), ((vt0.c0)>=(v0.c2)))) LIMIT 0x1 INTERSECT SELECT ALL COUNT(*) FROM vt0, v0 WHERE (((((v0.c3) IS FALSE)) NOTNULL)) LIMIT 0x1;
SELECT ALL * FROM v0 WHERE (CAST(((v0.c1)IS NOT(v0.c3)) AS INTEGER)) ORDER BY LIKELIHOOD(CAST(v0.c2 AS BLOB), '') DESC  NULLS LAST, ((((v0.c0, v0.c2, x'fca91513'))!=(('1646465875', v0.c0, v0.c3))) IN ()), (((v0.c1)>(v0.c3)) IN ()) DESC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE (((CAST(((v0.c1)IS NOT(v0.c3)) AS INTEGER))AND((((~ (v0.c1)))IS NOT(((((((v0.c3)OR(NULL)))OR(v0.c2)))OR(v0.c3))))))) ORDER BY (((v0.c0 COLLATE NOCASE))>=((v0.c0))), '1492825982'  NULLS LAST, CAST(((v0.c2)OR(v0.c2)) AS INTEGER) ASC  NULLS LAST LIMIT 0x0;
SELECT ALL * FROM v0 WHERE (CAST(((v0.c1)IS NOT(v0.c3)) AS INTEGER)) ORDER BY LIKELIHOOD(CAST(v0.c2 AS BLOB), '') DESC  NULLS LAST, ((((v0.c0, v0.c2, x'fca91513'))!=(('1646465875', v0.c0, v0.c3))) IN ()), (((v0.c1)>(v0.c3)) IN ()) DESC  NULLS FIRST;
SELECT ALL MIN(v0.c0) FROM vt0, v0 WHERE (((((v0.c1)OR(v0.c0)))|(NULL COLLATE NOCASE))) ORDER BY (((vt0.c0, v0.c2)) BETWEEN ((v0.c3 COLLATE NOCASE, CASE WHEN x'' THEN v0.c1 WHEN v0.c2 THEN x'' END)) AND (((+ (v0.c2)), ((v0.c3)*(-1253474963))))) ASC;
SELECT DISTINCT MIN(v0.c0) FROM vt0, v0 WHERE (((((v0.c1)OR(v0.c0)))|(NULL COLLATE NOCASE))) ORDER BY ((CASE v0.c0  WHEN x'' THEN v0.c3 WHEN v0.c0 THEN '-567218797' WHEN v0.c0 THEN v0.c2 END)<=((+ (v0.c3)))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MIN(v0.c0) FROM vt0, v0 WHERE (((((((CAST(vt0.c0 AS INTEGER))AND((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))))))AND((~ (v0.c1)))))OR((v0.c0 IN (v0.c1, v0.c0))))) ORDER BY ((CASE v0.c0  WHEN x'' THEN v0.c3 WHEN v0.c0 THEN '-567218797' WHEN v0.c0 THEN v0.c2 END)<=((+ (v0.c3)))) DESC  NULLS FIRST;
SELECT COUNT(*) FROM vt2 WHERE ((((((vt2.c0) IS FALSE)))<=((((vt2.c1) NOT NULL)))));
SELECT ALL COUNT(*) FROM vt2 WHERE ((((((vt2.c0) IS FALSE)))==((((vt2.c1) NOT NULL))))) ORDER BY CAST(vt2.c1 AS TEXT) ASC  NULLS LAST, CAST(((vt2.c0)/(vt2.c0)) AS REAL) ASC  NULLS LAST, ((((vt2.c1) ISNULL))>(CAST(vt2.c1 AS NUMERIC))), (NOT ((- (vt2.c1)))) LIMIT 0X0;
SELECT COUNT(*) FROM vt0 WHERE (CAST((((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))) AS BLOB)) ORDER BY (((vt0.c0) BETWEEN ('0.7192128116852758') AND (vt0.c0)) IN ()) ASC  NULLS FIRST, CASE WHEN CAST(vt0.c0 AS BLOB) THEN x'' ELSE ((vt0.c0)-(vt0.c0)) END;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (CAST((((vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c0))) AS BLOB)) ORDER BY (((vt0.c0)%(vt0.c0)) IN ()) ASC  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((~ (CAST(vt0.c0 AS TEXT)))) ORDER BY (((vt0.c0)%(vt0.c0)) IN ()) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (vt2.c0);
SELECT ALL * FROM vt0, vt2, v0 WHERE (vt2.c0) ORDER BY NULL, (((((v0.c3))<((vt2.c1))))<(((vt2.c1)*(vt2.c1)))), (((((v0.c1, v0.c2)) NOT BETWEEN ((NULL, vt2.c0)) AND ((vt0.c0, v0.c3)))) IS FALSE)  NULLS LAST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (vt2.c0);
SELECT ALL * FROM vt0, vt2, v0 WHERE (vt2.c0) ORDER BY NULL, (((((v0.c3))<((vt2.c1))))<(((vt2.c1)*(vt2.c1)))), (((((v0.c1, v0.c2)) NOT BETWEEN ((NULL, vt2.c0)) AND ((vt0.c0, v0.c3)))) IS FALSE)  NULLS LAST;
SELECT ALL MIN(v0.c1) FROM vt0, v0, vt2 WHERE (((('526554451') ISNULL) IN (vt2.c0 COLLATE NOCASE, '9B<')));
SELECT DISTINCT MIN(v0.c1) FROM vt0, v0, vt2 WHERE (((((('526554451') ISNULL) IN (vt2.c0 COLLATE NOCASE)))AND(CASE WHEN CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 WHEN v0.c3 THEN v0.c3 ELSE vt0.c0 END THEN ((vt2.c0) NOT BETWEEN (v0.c1) AND (vt0.c0)) END))) ORDER BY ((((((((v0.c1)-(v0.c0)))OR(UNLIKELY(DISTINCT vt2.c1))))AND((- (vt2.c0)))))OR(0.9994487742281205)) ASC  NULLS LAST, ((json(vt0.c0))>>(((vt2.c1) IS FALSE))) DESC LIMIT 0 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM vt0, v0, vt2 WHERE (((v0.c1 IN (v0.c0)) IN ())) ORDER BY ((((((((v0.c1)-(v0.c0)))OR(UNLIKELY(DISTINCT vt2.c1))))AND((- (vt2.c0)))))OR(0.9994487742281205)) ASC  NULLS LAST, ((json(vt0.c0))>>(((vt2.c1) IS FALSE))) DESC LIMIT 0x0;
SELECT MIN(v0.c3) FROM vt2, v0 WHERE (GLOB(NULLIF(vt2.c1, x''), v0.c1)) ORDER BY 1.839189666E9  NULLS FIRST, CASE WHEN ((v0.c2)<>(v0.c0)) THEN (('1152360453') BETWEEN (v0.c2) AND (vt2.c0)) ELSE ((((v0.c3)OR(v0.c2)))AND(v0.c0)) END, (((v0.c0)) BETWEEN ((vt2.c1)) AND ((((v0.c1)=(1646465875))))) ASC  NULLS FIRST, '' COLLATE BINARY DESC;
SELECT MIN(v0.c3) FROM vt2, v0 WHERE (GLOB(NULLIF(vt2.c1, x''), v0.c1)) ORDER BY ((CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 ELSE vt2.c1 END) BETWEEN (((((v0.c1)AND(v0.c3)))AND(v0.c0))) AND (((v0.c1)|(0.6130133019060054)))) DESC INTERSECT SELECT ALL MIN(v0.c3) FROM vt2, v0 WHERE ((267721342 IN (v0.c2))) ORDER BY ((CASE WHEN v0.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 ELSE vt2.c1 END) BETWEEN (((((v0.c1)AND(v0.c3)))AND(v0.c0))) AND (((v0.c1)|(0.6130133019060054)))) DESC;
SELECT ALL * FROM v0 WHERE ((((+ (v0.c1)))!=(CAST(v0.c3 AS REAL)))) ORDER BY v0.c1;
SELECT ALL * FROM v0 NOT INDEXED WHERE ((((((+ (v0.c1)))>(CAST(v0.c3 AS REAL))))AND(((((((v0.c2)OR(v0.c2)))AND(v0.c3))) NOT NULL)))) ORDER BY v0.c1 INTERSECT SELECT ALL * FROM v0 WHERE (((CASE v0.c2  WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN v0.c0 ELSE v0.c3 END)>=((('665660588') BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY v0.c1;
SELECT ALL * FROM v0 WHERE ((((+ (v0.c1)))!=(CAST(v0.c3 AS REAL)))) ORDER BY v0.c1;
SELECT ALL * FROM v0 NOT INDEXED WHERE ((((((+ (v0.c1)))>(CAST(v0.c3 AS REAL))))AND(((((((v0.c2)OR(v0.c2)))AND(v0.c3))) NOT NULL)))) ORDER BY v0.c1 INTERSECT SELECT ALL * FROM v0 WHERE (((CASE v0.c2  WHEN v0.c3 THEN v0.c3 WHEN v0.c2 THEN v0.c0 ELSE v0.c3 END)>=((('665660588') BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY v0.c1;
SELECT ALL MIN(v0.c0) FROM vt0, v0 NOT INDEXED WHERE (json_extract(((vt0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)), 0xffffffffc162e8fb)) ORDER BY CAST(((((((vt0.c0)OR(v0.c1)))AND(vt0.c0)))OR(v0.c3)) AS BLOB) ASC, CAST((NOT (v0.c3)) AS NUMERIC)  NULLS LAST;
SELECT MIN(v0.c0) FROM vt0, v0 WHERE (((json_extract(((vt0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)), 0Xffffffffc162e8fb))AND((((('256809955') IS FALSE))==(CAST(v0.c3 AS BLOB)))))) ORDER BY CAST(((((((vt0.c0)OR(v0.c1)))AND(vt0.c0)))OR(v0.c3)) AS BLOB) ASC, CAST((NOT (v0.c3)) AS NUMERIC)  NULLS LAST;
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c0)IS NOT(vt0.c0))) BETWEEN (((vt0.c0) NOT NULL)) AND ((vt0.c0 IN (vt0.c0)))) DESC  NULLS LAST, ((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) COLLATE BINARY DESC;
SELECT ALL * FROM vt0 WHERE (((vt0.c0)AND((((NOT (vt0.c0)))>=(((vt0.c0) IS TRUE)))))) ORDER BY ((vt0.c0 COLLATE RTRIM)-(HEX(vt0.c0))) ASC, ((((vt0.c0)<('795331170'))) IS FALSE) INTERSECT SELECT * FROM vt0 WHERE ((((((((((('1342146618')AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0 COLLATE BINARY)))AND(x''))) ORDER BY ((vt0.c0 COLLATE RTRIM)-(HEX(vt0.c0))) ASC, ((((vt0.c0)<('795331170'))) IS FALSE);
SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((vt0.c0)IS NOT(vt0.c0))) BETWEEN (((vt0.c0) NOT NULL)) AND ((vt0.c0 IN (vt0.c0)))) DESC  NULLS LAST, ((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) COLLATE BINARY DESC;
SELECT ALL * FROM vt0 WHERE (((vt0.c0)AND((((NOT (vt0.c0)))>=(((vt0.c0) IS TRUE)))))) ORDER BY ((vt0.c0 COLLATE RTRIM)-(HEX(vt0.c0))) ASC, ((((vt0.c0)<('795331170'))) IS FALSE) INTERSECT SELECT * FROM vt0 WHERE ((((((((((('1342146618')AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0 COLLATE BINARY)))AND(x''))) ORDER BY ((vt0.c0 COLLATE RTRIM)-(HEX(vt0.c0))) ASC, ((((vt0.c0)<('795331170'))) IS FALSE);
SELECT MAX(vt0.c0) FROM vt2 NATURAL JOIN vt0 CROSS JOIN v0 ON CAST(v0.c3 COLLATE RTRIM AS INTEGER) WHERE (CASE TRIM(v0.c1, 2.108053427E9)  WHEN 0.3629697295522929 THEN vt2.c1 COLLATE RTRIM END) ORDER BY CASE ((v0.c0)>=(v0.c2))  WHEN ((v0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN CAST(v0.c2 AS TEXT) ELSE (- (v0.c0)) END ASC  NULLS FIRST, ((vt2.c1)OR(v0.c1)) COLLATE BINARY COLLATE RTRIM DESC  NULLS LAST;
SELECT DISTINCT MAX(vt0.c0) FROM vt2 NATURAL JOIN vt0 CROSS JOIN v0 ON CAST(v0.c3 COLLATE RTRIM AS INTEGER) WHERE (((CASE TRIM(v0.c1, 2.108053427E9)  WHEN 0.3629697295522929 THEN vt2.c1 COLLATE RTRIM END)AND(((((((((v0.c1) NOT BETWEEN (vt2.c1) AND (v0.c2)))OR((((vt2.c0)) BETWEEN ((v0.c2)) AND ((v0.c0))))))OR((+ (v0.c1)))))OR(0.3236082122495024))))) ORDER BY ((1247623579) BETWEEN (CAST(v0.c3 AS INTEGER)) AND (vt0.c0))  NULLS LAST LIMIT 0;
SELECT ALL MAX(v0.c0) FROM vt0, v0, vt2 WHERE (vt2.c0);
SELECT DISTINCT MAX(v0.c0) FROM vt0, v0, vt2 WHERE (((vt2.c0)AND((+ (((vt2.c1) BETWEEN (vt2.c1) AND (v0.c0))))))) LIMIT 1 INTERSECT SELECT DISTINCT MAX(v0.c0) FROM vt0, v0, vt2 WHERE (((((((v0.c2)==(v0.c3)))AND(((vt2.c0) NOT BETWEEN (vt2.c1) AND (0X4df0a808)))))AND((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((-2.43193612E8)))))) LIMIT 0x1;
SELECT * FROM v0, vt0, vt2 WHERE (CASE (vt2.c1 IN (0.024244574675355457))  WHEN (((vt2.c0, v0.c1, vt2.c0)) NOT BETWEEN ((vt0.c0, v0.c2, vt2.c0)) AND ((vt0.c0, 0.7100278653416723, v0.c3))) THEN ((v0.c2) NOTNULL) ELSE LIKELY(v0.c1) END);
SELECT * FROM v0, vt0, vt2 WHERE (((CASE (vt2.c1 IN (0.024244574675355457))  WHEN (((vt2.c0, v0.c1, vt2.c0)) NOT BETWEEN ((vt0.c0, v0.c2, vt2.c0)) AND ((vt0.c0, 0.7100278653416723, v0.c3))) THEN ((v0.c2) NOTNULL) ELSE LIKELY(v0.c1) END)AND((((- (vt2.c1))) NOTNULL)))) ORDER BY ((ABS(DISTINCT v0.c3)) NOT BETWEEN ((+ (vt2.c0))) AND ((((vt2.c1)) BETWEEN ((v0.c1)) AND ((vt2.c0))))) INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (CAST('K' AS TEXT)) ORDER BY ((ABS(DISTINCT v0.c3)) NOT BETWEEN ((+ (vt2.c0))) AND ((((vt2.c1)) BETWEEN ((v0.c1)) AND ((vt2.c0)))));
SELECT * FROM v0, vt0, vt2 WHERE (CASE (vt2.c1 IN (0.024244574675355457))  WHEN (((vt2.c0, v0.c1, vt2.c0)) NOT BETWEEN ((vt0.c0, v0.c2, vt2.c0)) AND ((vt0.c0, 0.7100278653416723, v0.c3))) THEN ((v0.c2) NOTNULL) ELSE LIKELY(v0.c1) END);
SELECT * FROM v0, vt0, vt2 WHERE (((CASE (vt2.c1 IN (0.024244574675355457))  WHEN (((vt2.c0, v0.c1, vt2.c0)) NOT BETWEEN ((vt0.c0, v0.c2, vt2.c0)) AND ((vt0.c0, 0.7100278653416723, v0.c3))) THEN ((v0.c2) NOTNULL) ELSE LIKELY(v0.c1) END)AND((((- (vt2.c1))) NOTNULL)))) ORDER BY ((ABS(DISTINCT v0.c3)) NOT BETWEEN ((+ (vt2.c0))) AND ((((vt2.c1)) BETWEEN ((v0.c1)) AND ((vt2.c0))))) INTERSECT SELECT * FROM v0, vt0, vt2 WHERE (CAST('K' AS TEXT)) ORDER BY ((ABS(DISTINCT v0.c3)) NOT BETWEEN ((+ (vt2.c0))) AND ((((vt2.c1)) BETWEEN ((v0.c1)) AND ((vt2.c0)))));
SELECT ALL * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0, vt0.c0))) NOTNULL));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0, vt0.c0))) NOTNULL))AND(((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM))) LIMIT 0X0 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN ((((vt0.c0, vt0.c0)) NOT BETWEEN ((0xffffffffacb9ceac, vt0.c0)) AND ((vt0.c0, vt0.c0)))) AND (((vt0.c0) NOTNULL)))) LIMIT 0;
SELECT ALL * FROM vt0 WHERE ((((vt0.c0 IN (vt0.c0, vt0.c0))) NOTNULL));
SELECT ALL * FROM vt0 WHERE ((((((vt0.c0 IN (vt0.c0, vt0.c0))) NOTNULL))AND(((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM))) LIMIT 0X0 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) BETWEEN ((((vt0.c0, vt0.c0)) NOT BETWEEN ((0xffffffffacb9ceac, vt0.c0)) AND ((vt0.c0, vt0.c0)))) AND (((vt0.c0) NOTNULL)))) LIMIT 0;
SELECT ALL COUNT(*) FROM vt2, v0, vt0 WHERE (((((v0.c1) ISNULL))|(CAST(vt0.c0 AS BLOB))));
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((((v0.c1) ISNULL))|(CAST(vt0.c0 AS BLOB)))) ORDER BY (CASE WHEN vt2.c1 THEN vt2.c0 END IN (vt2.c0)), ((((v0.c2)<<(v0.c1)))*(((v0.c0)*(NULL))));
SELECT ALL COUNT(*) FROM v0, vt2, vt0 WHERE (((((((v0.c3)OR(vt2.c0)))OR('-1398246357'))) NOTNULL)) ORDER BY ((((v0.c1) NOT NULL)) BETWEEN ((((v0.c3))>((x'67')))) AND (v0.c3 COLLATE NOCASE));
SELECT DISTINCT COUNT(*) FROM v0, vt2, vt0 WHERE (((((((v0.c3)OR(vt2.c0)))OR('-1398246357'))) NOTNULL)) ORDER BY CASE v0.c3  WHEN v0.c0 COLLATE BINARY THEN (v0.c2 IN ()) END INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt2, vt0 WHERE ((((((vt0.c0) BETWEEN (vt2.c1) AND (v0.c1)), 0.4163937367386539, v0.c2, (((0.13288601143034906)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0)))))>((LIKELIHOOD(v0.c3, v0.c2), CAST(vt2.c1 AS REAL), ((v0.c1)>(vt2.c0)), ((v0.c1) NOT NULL))))) ORDER BY CASE v0.c3  WHEN v0.c0 COLLATE BINARY THEN (v0.c2 IN ()) END;
SELECT * FROM v0 WHERE ('b-~k<MqL');
SELECT DISTINCT * FROM v0 WHERE ((('b-~k<MqL')AND(((((((v0.c0) NOT NULL))AND(((v0.c0)/(v0.c1)))))OR(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c0 WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END))))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CASE WHEN ((v0.c2) IS FALSE) THEN v0.c0 COLLATE BINARY WHEN v0.c3 THEN ((((((v0.c3)OR(v0.c3)))AND(v0.c3)))OR(v0.c2)) END) LIMIT 0x3;
SELECT * FROM v0 WHERE ('b-~k<MqL');
SELECT DISTINCT * FROM v0 WHERE ((('b-~k<MqL')AND(((((((v0.c0) NOT NULL))AND(((v0.c0)/(v0.c1)))))OR(CASE WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c0 WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END))))) LIMIT 3 INTERSECT SELECT DISTINCT * FROM v0 WHERE (CASE WHEN ((v0.c2) IS FALSE) THEN v0.c0 COLLATE BINARY WHEN v0.c3 THEN ((((((v0.c3)OR(v0.c3)))AND(v0.c3)))OR(v0.c2)) END) LIMIT 0x3;
SELECT MIN(vt2.c1) FROM vt2, vt0, v0 WHERE ((~ (''))) ORDER BY ((CASE WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END)&(((vt2.c1) NOT BETWEEN (v0.c2) AND (vt0.c0)))) ASC, (('[^F貇a}bx!')>(((v0.c3) NOT BETWEEN (vt2.c0) AND (vt0.c0)))), ((LOWER(vt0.c0))OR(CASE WHEN v0.c0 THEN v0.c1 WHEN vt2.c1 THEN vt2.c1 ELSE NULL END)) DESC;
SELECT ALL MIN(vt2.c1) FROM vt2, vt0, v0 WHERE ((~ (''))) ORDER BY ((((vt0.c0)-(vt0.c0)))GLOB(CAST(v0.c1 AS TEXT))) DESC  NULLS LAST, (vt2.c1 IN (v0.c2)) COLLATE RTRIM DESC  NULLS LAST INTERSECT SELECT MIN(vt2.c1) FROM vt2, vt0, v0 WHERE ((+ (v0.c3)) COLLATE RTRIM) ORDER BY ((((vt0.c0)-(vt0.c0)))GLOB(CAST(v0.c1 AS TEXT))) DESC  NULLS LAST, (vt2.c1 IN (v0.c2)) COLLATE RTRIM DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE (((TRIM(DISTINCT vt0.c0, vt0.c0))<((- (vt0.c0)))));
SELECT ALL * FROM vt0 WHERE (((TRIM(DISTINCT vt0.c0, vt0.c0))<((- (vt0.c0))))) ORDER BY ((x'')||(CAST(vt0.c0 AS REAL))) ASC  NULLS LAST, (- (vt0.c0)) COLLATE RTRIM;
SELECT ALL * FROM vt0 WHERE (((TRIM(DISTINCT vt0.c0, vt0.c0))<((- (vt0.c0)))));
SELECT ALL * FROM vt0 WHERE (((TRIM(DISTINCT vt0.c0, vt0.c0))<((- (vt0.c0))))) ORDER BY ((x'')||(CAST(vt0.c0 AS REAL))) ASC  NULLS LAST, (- (vt0.c0)) COLLATE RTRIM;
SELECT * FROM vt0 WHERE (CAST(((vt0.c0)*(vt0.c0)) AS INTEGER)) ORDER BY ((x'f330')<>(((vt0.c0)>(vt0.c0))))  NULLS FIRST, (((vt0.c0) NOT BETWEEN ('>') AND (vt0.c0)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(((vt0.c0)*(vt0.c0)) AS INTEGER))AND(CASE WHEN vt0.c0 THEN (vt0.c0 IN (vt0.c0)) ELSE ((1152309732) IS TRUE) END))) ORDER BY ((x'f330')<>(((vt0.c0)>(vt0.c0))))  NULLS FIRST, (((vt0.c0) NOT BETWEEN ('>') AND (vt0.c0)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (LTRIM((vt0.c0 IN (vt0.c0)))) ORDER BY ((x'f330')!=(((vt0.c0)>(vt0.c0))))  NULLS FIRST, (((vt0.c0) NOT BETWEEN ('>') AND (vt0.c0)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) ASC;
SELECT * FROM vt0 WHERE (CAST(((vt0.c0)*(vt0.c0)) AS INTEGER)) ORDER BY ((x'f330')<>(((vt0.c0)>(vt0.c0))))  NULLS FIRST, (((vt0.c0) NOT BETWEEN ('>') AND (vt0.c0)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) ASC;
SELECT DISTINCT * FROM vt0 WHERE (((CAST(((vt0.c0)*(vt0.c0)) AS INTEGER))AND(CASE WHEN vt0.c0 THEN (vt0.c0 IN (vt0.c0)) ELSE ((1152309732) IS TRUE) END))) ORDER BY ((x'f330')<>(((vt0.c0)>(vt0.c0))))  NULLS FIRST, (((vt0.c0) NOT BETWEEN ('>') AND (vt0.c0)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) ASC INTERSECT SELECT DISTINCT * FROM vt0 WHERE (LTRIM((vt0.c0 IN (vt0.c0)))) ORDER BY ((x'f330')!=(((vt0.c0)>(vt0.c0))))  NULLS FIRST, (((vt0.c0) NOT BETWEEN ('>') AND (vt0.c0)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))) ASC;
SELECT ALL * FROM vt0, vt2 WHERE (((((vt2.c1)+(vt0.c0))) NOT BETWEEN (CAST(vt2.c1 AS REAL)) AND (vt2.c1 COLLATE BINARY))) ORDER BY vt2.c1, (TRIM(vt2.c1) IN ()) DESC  NULLS LAST, ((vt2.c1 IN ()) IN (('792089365' IN (vt2.c1)), ((vt0.c0)>>(vt0.c0))))  NULLS FIRST, ((JULIANDAY(vt0.c0, vt2.c1, vt0.c0, vt2.c1)) BETWEEN ('890457025') AND ((((vt2.c1, vt0.c0, vt0.c0))<>(('890457025', vt2.c0, vt0.c0)))))  NULLS FIRST;
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((vt2.c1)+(vt0.c0))) NOT BETWEEN (CAST(vt2.c1 AS REAL)) AND (vt2.c1 COLLATE BINARY))) ORDER BY (NULL IN ())  NULLS LAST, LOWER(DISTINCT ((vt2.c1)+(vt2.c1)))  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0, vt2 WHERE ((NOT (((vt2.c1)LIKE(vt2.c1))))) ORDER BY (NULL IN ())  NULLS LAST, LOWER(DISTINCT ((vt2.c1)+(vt2.c1)))  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE (((((vt2.c1)+(vt0.c0))) NOT BETWEEN (CAST(vt2.c1 AS REAL)) AND (vt2.c1 COLLATE BINARY))) ORDER BY vt2.c1, (TRIM(vt2.c1) IN ()) DESC  NULLS LAST, ((vt2.c1 IN ()) IN (('792089365' IN (vt2.c1)), ((vt0.c0)>>(vt0.c0))))  NULLS FIRST, ((JULIANDAY(vt0.c0, vt2.c1, vt0.c0, vt2.c1)) BETWEEN ('890457025') AND ((((vt2.c1, vt0.c0, vt0.c0))<>(('890457025', vt2.c0, vt0.c0)))))  NULLS FIRST;
SELECT * FROM vt2, v0 WHERE (((((v0.c0 COLLATE RTRIM)OR((vt2.c0 IN (vt2.c0, vt2.c0)))))OR((v0.c3 IN (v0.c1, v0.c0))))) ORDER BY UPPER(((((((((v0.c2)AND(vt2.c1)))AND(v0.c2)))AND(v0.c2)))AND(v0.c3))) ASC  NULLS FIRST, (((v0.c1 COLLATE BINARY, vt2.c1 COLLATE BINARY, (((v0.c1, v0.c3))>=((v0.c2, v0.c2))), v0.c1 COLLATE RTRIM))>(((v0.c2 IN (v0.c1)), ((vt2.c1) NOT BETWEEN (v0.c3) AND (v0.c2)), ((NULL)<(vt2.c0)), ((('23714197')) BETWEEN ((vt2.c0)) AND ((v0.c2)))))) DESC;
SELECT DISTINCT * FROM vt2, v0 WHERE (((((v0.c0 COLLATE RTRIM)OR((vt2.c0 IN (vt2.c0, vt2.c0)))))OR((v0.c3 IN (v0.c1, v0.c0))))) ORDER BY (((v0.c2, v0.c1)) NOT BETWEEN ((IFNULL(v0.c0, vt2.c0), (+ (v0.c2)))) AND ((vt2.c0, ((vt2.c0)-(v0.c1))))) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (CASE vt2.c0  WHEN CAST(2053708906 AS TEXT) THEN CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN x'819b' WHEN vt2.c0 THEN v0.c1 END ELSE (v0.c0 IN (vt2.c1, vt2.c0)) END) ORDER BY (((v0.c2, v0.c1)) NOT BETWEEN ((IFNULL(v0.c0, vt2.c0), (+ (v0.c2)))) AND ((vt2.c0, ((vt2.c0)-(v0.c1)))));
SELECT * FROM vt2, v0 WHERE (((((v0.c0 COLLATE RTRIM)OR((vt2.c0 IN (vt2.c0, vt2.c0)))))OR((v0.c3 IN (v0.c1, v0.c0))))) ORDER BY UPPER(((((((((v0.c2)AND(vt2.c1)))AND(v0.c2)))AND(v0.c2)))AND(v0.c3))) ASC  NULLS FIRST, (((v0.c1 COLLATE BINARY, vt2.c1 COLLATE BINARY, (((v0.c1, v0.c3))>=((v0.c2, v0.c2))), v0.c1 COLLATE RTRIM))>(((v0.c2 IN (v0.c1)), ((vt2.c1) NOT BETWEEN (v0.c3) AND (v0.c2)), ((NULL)<(vt2.c0)), ((('23714197')) BETWEEN ((vt2.c0)) AND ((v0.c2)))))) DESC;
SELECT DISTINCT * FROM vt2, v0 WHERE (((((v0.c0 COLLATE RTRIM)OR((vt2.c0 IN (vt2.c0, vt2.c0)))))OR((v0.c3 IN (v0.c1, v0.c0))))) ORDER BY (((v0.c2, v0.c1)) NOT BETWEEN ((IFNULL(v0.c0, vt2.c0), (+ (v0.c2)))) AND ((vt2.c0, ((vt2.c0)-(v0.c1))))) INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (CASE vt2.c0  WHEN CAST(2053708906 AS TEXT) THEN CASE WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN x'819b' WHEN vt2.c0 THEN v0.c1 END ELSE (v0.c0 IN (vt2.c1, vt2.c0)) END) ORDER BY (((v0.c2, v0.c1)) NOT BETWEEN ((IFNULL(v0.c0, vt2.c0), (+ (v0.c2)))) AND ((vt2.c0, ((vt2.c0)-(v0.c1)))));
SELECT ALL * FROM v0 CROSS JOIN vt0 ON (CAST(x'b8' AS REAL) IN (CHANGES(), (v0.c3 IN ()))) NATURAL JOIN vt2 WHERE (((((((((((((v0.c2) NOT BETWEEN (v0.c2) AND (NULL)))OR(((((((0.007463853722733171)AND(v0.c2)))OR(v0.c0)))AND(vt0.c0)))))OR(((((((((((((v0.c0)OR('-1068765063')))AND(v0.c2)))AND(vt2.c0)))OR(v0.c3)))OR(vt2.c0)))AND(vt2.c0)))))OR(x'80')))OR(CASE WHEN 0Xffffffffe7d7c458 THEN v0.c3 WHEN '1093498728' THEN v0.c0 END)))OR(v0.c3))) ORDER BY (((('-0.0') BETWEEN (v0.c0) AND (v0.c1)))&((((v0.c0)) BETWEEN ((vt2.c0)) AND ((v0.c1))))) ASC;
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON (CAST(x'b8' AS REAL) IN (CHANGES(), (v0.c3 IN ()))) NATURAL JOIN vt2 WHERE (((((((((((((v0.c2) NOT BETWEEN (v0.c2) AND (NULL)))OR(((((((0.007463853722733171)AND(v0.c2)))OR(v0.c0)))AND(vt0.c0)))))OR(((((((((((((v0.c0)OR('-1068765063')))AND(v0.c2)))AND(vt2.c0)))OR(v0.c3)))OR(vt2.c0)))AND(vt2.c0)))))OR(x'80')))OR(CASE WHEN -405289896 THEN v0.c3 WHEN '1093498728' THEN v0.c0 END)))OR(v0.c3))) ORDER BY (((('-0.0') BETWEEN (v0.c0) AND (v0.c1)))&((((v0.c0)) BETWEEN ((vt2.c0)) AND ((v0.c1))))) ASC;
SELECT ALL * FROM v0 CROSS JOIN vt0 ON (CAST(x'b8' AS REAL) IN (CHANGES(), (v0.c3 IN ()))) NATURAL JOIN vt2 WHERE (((((((((((((v0.c2) NOT BETWEEN (v0.c2) AND (NULL)))OR(((((((0.007463853722733171)AND(v0.c2)))OR(v0.c0)))AND(vt0.c0)))))OR(((((((((((((v0.c0)OR('-1068765063')))AND(v0.c2)))AND(vt2.c0)))OR(v0.c3)))OR(vt2.c0)))AND(vt2.c0)))))OR(x'80')))OR(CASE WHEN 0Xffffffffe7d7c458 THEN v0.c3 WHEN '1093498728' THEN v0.c0 END)))OR(v0.c3))) ORDER BY (((('-0.0') BETWEEN (v0.c0) AND (v0.c1)))&((((v0.c0)) BETWEEN ((vt2.c0)) AND ((v0.c1))))) ASC;
SELECT DISTINCT * FROM v0 CROSS JOIN vt0 ON (CAST(x'b8' AS REAL) IN (CHANGES(), (v0.c3 IN ()))) NATURAL JOIN vt2 WHERE (((((((((((((v0.c2) NOT BETWEEN (v0.c2) AND (NULL)))OR(((((((0.007463853722733171)AND(v0.c2)))OR(v0.c0)))AND(vt0.c0)))))OR(((((((((((((v0.c0)OR('-1068765063')))AND(v0.c2)))AND(vt2.c0)))OR(v0.c3)))OR(vt2.c0)))AND(vt2.c0)))))OR(x'80')))OR(CASE WHEN -405289896 THEN v0.c3 WHEN '1093498728' THEN v0.c0 END)))OR(v0.c3))) ORDER BY (((('-0.0') BETWEEN (v0.c0) AND (v0.c1)))&((((v0.c0)) BETWEEN ((vt2.c0)) AND ((v0.c1))))) ASC;
SELECT * FROM v0 WHERE ((((((v0.c2)) BETWEEN ((v0.c1)) AND ((0.8897853408455619))))>=(CASE WHEN v0.c1 THEN v0.c2 END))) ORDER BY CAST(v0.c0 COLLATE BINARY AS REAL) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((((((v0.c2)) BETWEEN ((v0.c1)) AND ((0.8897853408455619))))>(CASE WHEN v0.c1 THEN v0.c2 END))) ORDER BY CAST(v0.c0 COLLATE BINARY AS REAL) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM v0 WHERE (((((v0.c2)>(v0.c3))) NOT BETWEEN ((((v0.c3, v0.c1)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2, v0.c1)))) AND (CAST(v0.c2 AS NUMERIC)))) ORDER BY CAST(v0.c0 COLLATE BINARY AS REAL) ASC  NULLS FIRST LIMIT 1;
SELECT * FROM v0 WHERE ((((((v0.c2)) BETWEEN ((v0.c1)) AND ((0.8897853408455619))))>=(CASE WHEN v0.c1 THEN v0.c2 END))) ORDER BY CAST(v0.c0 COLLATE BINARY AS REAL) ASC  NULLS FIRST;
SELECT ALL * FROM v0 WHERE ((((((v0.c2)) BETWEEN ((v0.c1)) AND ((0.8897853408455619))))>(CASE WHEN v0.c1 THEN v0.c2 END))) ORDER BY CAST(v0.c0 COLLATE BINARY AS REAL) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM v0 WHERE (((((v0.c2)>(v0.c3))) NOT BETWEEN ((((v0.c3, v0.c1)) NOT BETWEEN ((v0.c1, v0.c2)) AND ((v0.c2, v0.c1)))) AND (CAST(v0.c2 AS NUMERIC)))) ORDER BY CAST(v0.c0 COLLATE BINARY AS REAL) ASC  NULLS FIRST LIMIT 1;
SELECT ALL MAX(v0.c2) FROM vt0 LEFT OUTER JOIN v0 ON CASE v0.c3 COLLATE BINARY  WHEN PRINTF(v0.c1) THEN ((v0.c1)>=(v0.c3)) ELSE (('-1865332966') NOTNULL) END WHERE (((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)))AND((v0.c3 IN ()))));
SELECT DISTINCT MAX(v0.c2) FROM vt0 LEFT OUTER JOIN v0 ON CASE v0.c3 COLLATE BINARY  WHEN PRINTF(v0.c1) THEN ((v0.c1)>=(v0.c3)) ELSE (('-1865332966') NOTNULL) END WHERE (((((((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c0)))AND((v0.c3 IN ()))))AND(CAST(0.10938198840322577 AS REAL))));
SELECT * FROM vt0 WHERE ((((vt0.c0)OR(vt0.c0)) IN ())) ORDER BY LIKELY(DISTINCT CAST(vt0.c0 AS REAL)) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0)OR(vt0.c0)) IN ()))AND(((x'' COLLATE BINARY)<<((NOT (vt0.c0))))))) ORDER BY LIKELY(DISTINCT CAST(vt0.c0 AS REAL)) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE ((((vt0.c0)OR(vt0.c0)) IN ())) ORDER BY LIKELY(DISTINCT CAST(vt0.c0 AS REAL)) DESC  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE ((((((vt0.c0)OR(vt0.c0)) IN ()))AND(((x'' COLLATE BINARY)<<((NOT (vt0.c0))))))) ORDER BY LIKELY(DISTINCT CAST(vt0.c0 AS REAL)) DESC  NULLS LAST;
SELECT COUNT(*) FROM vt2 WHERE ((((((vt2.c0)LIKE(vt2.c0)), ((vt2.c1)-(vt2.c1))))!=((((vt2.c0) NOT NULL), vt2.c1 COLLATE RTRIM))));
SELECT DISTINCT COUNT(*) FROM vt2 WHERE ((((((vt2.c0)LIKE(vt2.c0)), ((vt2.c1)-(vt2.c1))))<((((vt2.c0) NOT NULL), vt2.c1 COLLATE RTRIM)))) ORDER BY CASE ('0.5535893660128063' IN (vt2.c1, vt2.c1))  WHEN ((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)) THEN CAST(vt2.c1 AS TEXT) WHEN (((vt2.c1, 0xfffffffff18128f4)) BETWEEN ((vt2.c0, vt2.c0)) AND ((vt2.c0, vt2.c1))) THEN CAST(vt2.c1 AS BLOB) ELSE vt2.c0 COLLATE NOCASE END DESC  NULLS LAST, ((((vt2.c1)IS(vt2.c0)))>>((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1)))))  NULLS FIRST, (((CASE vt2.c1  WHEN vt2.c0 THEN x'36' WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END, vt2.c1))==((((vt2.c1)||(vt2.c0)), x'c0')))  NULLS FIRST LIMIT 0x0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE (CAST(vt2.c0 AS NUMERIC) COLLATE BINARY) ORDER BY CASE ('0.5535893660128063' IN (vt2.c1, vt2.c1))  WHEN ((((((((vt2.c1)OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)) THEN CAST(vt2.c1 AS TEXT) WHEN (((vt2.c1, 0xfffffffff18128f4)) BETWEEN ((vt2.c0, vt2.c0)) AND ((vt2.c0, vt2.c1))) THEN CAST(vt2.c1 AS BLOB) ELSE vt2.c0 COLLATE NOCASE END DESC  NULLS LAST, ((((vt2.c1)IS(vt2.c0)))>>((((vt2.c1, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c0)) AND ((vt2.c1, vt2.c1)))))  NULLS FIRST, (((CASE vt2.c1  WHEN vt2.c0 THEN x'36' WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END, vt2.c1))==((((vt2.c1)||(vt2.c0)), x'c0')))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0 WHERE (((((x'2058')!=(vt0.c0)))<>(CAST(0xffffffffd457ad54 AS BLOB))));
SELECT * FROM vt0 WHERE (((((x'2058')>(vt0.c0)))<(CAST(0Xffffffffd457ad54 AS BLOB)))) INTERSECT SELECT * FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) NOT NULL));
SELECT ALL * FROM vt0 WHERE (((((x'2058')!=(vt0.c0)))<>(CAST(0xffffffffd457ad54 AS BLOB))));
SELECT * FROM vt0 WHERE (((((x'2058')>(vt0.c0)))<(CAST(0Xffffffffd457ad54 AS BLOB)))) INTERSECT SELECT * FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) NOT NULL));
SELECT ALL MAX(v0.c2) FROM vt0, v0, vt2 WHERE (CASE (- (vt2.c0))  WHEN v0.c0 THEN ((vt0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)) END);
SELECT DISTINCT MAX(v0.c2) FROM vt0, v0, vt2 WHERE (((CASE (- (vt2.c0))  WHEN v0.c0 THEN ((vt0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)) END)AND(CAST(CAST(vt2.c0 AS TEXT) AS NUMERIC)))) LIMIT 0 INTERSECT SELECT DISTINCT MAX(v0.c2) FROM vt0, v0, vt2 WHERE (CASE NULL  WHEN ((v0.c0) NOTNULL) THEN (NOT (v0.c2)) WHEN ((v0.c1)|(vt0.c0)) THEN LOWER(vt2.c1) WHEN CASE WHEN v0.c3 THEN v0.c2 ELSE vt2.c0 END THEN load_extension(v0.c2, vt0.c0) WHEN (+ (vt0.c0)) THEN (v0.c1 IN (NULL)) ELSE ((((((((v0.c2)AND(v0.c3)))OR(v0.c3)))AND(vt2.c1)))OR(vt0.c0)) END) LIMIT 0;
SELECT ALL COUNT(*) FROM vt0 WHERE (x'91') ORDER BY (((vt0.c0) IS TRUE) IN (vt0.c0 COLLATE BINARY)) DESC, ((((((NULL)AND((vt0.c0 IN (vt0.c0)))))OR(((vt0.c0)+(vt0.c0)))))AND(6.65660588E8)) ASC, ((LIKELIHOOD(vt0.c0, vt0.c0))GLOB(((vt0.c0) NOT BETWEEN (-7.69760503E8) AND (vt0.c0)))) DESC;
SELECT COUNT(*) FROM vt0 WHERE (x'91') ORDER BY (vt0.c0 IN (0.6136983949862349)) COLLATE RTRIM DESC, ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)) COLLATE NOCASE;
SELECT ALL * FROM v0, vt0 WHERE ((('1222110422')=(((v0.c1) BETWEEN (vt0.c0) AND (v0.c1))))) ORDER BY ((TYPEOF(DISTINCT '916626587'))&(v0.c3)) DESC, (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)) IN ())  NULLS LAST;
SELECT * FROM v0, vt0 WHERE ((('1222110422')=(((v0.c1) BETWEEN (vt0.c0) AND (v0.c1))))) ORDER BY NULL LIMIT 0 INTERSECT SELECT * FROM v0, vt0 WHERE (CASE v0.c2 COLLATE RTRIM  WHEN (vt0.c0 IN ()) THEN (v0.c0 IN ()) WHEN v0.c0 THEN ((vt0.c0)<(v0.c1)) WHEN ((v0.c3)<(v0.c1)) THEN CASE WHEN vt0.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN NULL WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END ELSE ((v0.c3) NOTNULL) END) ORDER BY NULL LIMIT 0x0;
SELECT ALL * FROM v0, vt0 WHERE ((('1222110422')=(((v0.c1) BETWEEN (vt0.c0) AND (v0.c1))))) ORDER BY ((TYPEOF(DISTINCT '916626587'))&(v0.c3)) DESC, (((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2)) IN ())  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 NATURAL JOIN vt0 LEFT OUTER JOIN vt2 ON LIKE(((((x'')OR(v0.c0)))AND(v0.c2)), ((vt2.c0) IS TRUE)) WHERE ('^') ORDER BY (((vt2.c0, x'd4f4')) NOT BETWEEN ((v0.c1, ((((((((vt2.c0)OR(vt2.c1)))OR(NULL)))OR(x'')))OR(v0.c2)))) AND ((NULL, v0.c2 COLLATE BINARY)))  NULLS LAST, ((LAST_INSERT_ROWID())+(((vt2.c1) ISNULL))) ASC  NULLS FIRST, ((((((v0.c3, vt2.c1, v0.c2))>((vt2.c1, vt2.c0, v0.c1))), ((v0.c1) IS FALSE), (+ (v0.c3))))>((TYPEOF(DISTINCT v0.c1), CASE vt2.c1  WHEN vt2.c0 THEN v0.c2 ELSE '' END, ((vt0.c0) NOT NULL))))  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 NATURAL JOIN vt0 LEFT OUTER JOIN vt2 ON LIKE(((((x'')OR(v0.c0)))AND(v0.c2)), ((vt2.c0) IS TRUE)) WHERE ('^') ORDER BY (((vt2.c0, x'd4f4')) NOT BETWEEN ((v0.c1, ((((((((vt2.c0)OR(vt2.c1)))OR(NULL)))OR(x'')))OR(v0.c2)))) AND ((NULL, v0.c2 COLLATE BINARY)))  NULLS LAST, ((LAST_INSERT_ROWID())+(((vt2.c1) ISNULL))) ASC  NULLS FIRST, ((((((v0.c3, vt2.c1, v0.c2))>((vt2.c1, vt2.c0, v0.c1))), ((v0.c1) IS FALSE), (+ (v0.c3))))>((TYPEOF(DISTINCT v0.c1), CASE vt2.c1  WHEN vt2.c0 THEN v0.c2 ELSE '' END, ((vt0.c0) NOT NULL))))  NULLS LAST LIMIT 4;
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE (CHANGES());
SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE (((CHANGES())AND(((+ (v0.c1)) IN (((v0.c3)GLOB(v0.c0)), (((vt2.c1, vt2.c0, v0.c2, vt0.c0))<>((vt2.c0, vt2.c0, vt2.c0, v0.c3))), ((v0.c0)IS NOT(vt0.c0))))))) ORDER BY ((NULL) NOT BETWEEN (v0.c2) AND (((((vt2.c0)OR(v0.c1)))OR(v0.c0)))) DESC, (('+4') BETWEEN (CAST(v0.c0 AS INTEGER)) AND (((((((vt2.c0)OR(vt2.c1)))OR(vt2.c0)))AND(v0.c0)))) ASC LIMIT 0X0 INTERSECT SELECT ALL COUNT(*) FROM v0, vt0, vt2 WHERE (((((v0.c0, v0.c3)) NOT BETWEEN ((v0.c3, v0.c0)) AND ((v0.c1, v0.c3))) IN ())) ORDER BY ((NULL) NOT BETWEEN (v0.c2) AND (((((vt2.c0)OR(v0.c1)))OR(v0.c0)))) DESC, (('+4') BETWEEN (CAST(v0.c0 AS INTEGER)) AND (((((((vt2.c0)OR(vt2.c1)))OR(vt2.c0)))AND(v0.c0)))) ASC LIMIT 0;
SELECT * FROM vt2, v0 WHERE (((SQLITE_VERSION()) BETWEEN (((vt2.c1) NOT NULL)) AND (((vt2.c1)AND(v0.c0)))));
SELECT DISTINCT * FROM vt2, v0 WHERE (((SQLITE_VERSION()) BETWEEN (((vt2.c1) NOT NULL)) AND (((vt2.c1)AND(v0.c0))))) ORDER BY (~ ('ED\૎')), vt2.c1 LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE ((((((vt2.c1)<(vt2.c0)), v0.c1 COLLATE NOCASE))>=((CAST(vt2.c1 AS BLOB), 'M({')))) ORDER BY (~ ('ED\૎')), vt2.c1 LIMIT 0x1;
SELECT * FROM vt2, v0 WHERE (((SQLITE_VERSION()) BETWEEN (((vt2.c1) NOT NULL)) AND (((vt2.c1)AND(v0.c0)))));
SELECT DISTINCT * FROM vt2, v0 WHERE (((SQLITE_VERSION()) BETWEEN (((vt2.c1) NOT NULL)) AND (((vt2.c1)AND(v0.c0))))) ORDER BY (~ ('ED\૎')), vt2.c1 LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE ((((((vt2.c1)<(vt2.c0)), v0.c1 COLLATE NOCASE))>=((CAST(vt2.c1 AS BLOB), 'M({')))) ORDER BY (~ ('ED\૎')), vt2.c1 LIMIT 0x1;
SELECT * FROM vt2, v0, vt0 WHERE (v0.c0) ORDER BY (- (0x6d9fcea2)) DESC;
SELECT ALL * FROM vt2, v0, vt0 WHERE (v0.c0) ORDER BY (- (1839189666)) DESC LIMIT 0X0;
SELECT * FROM vt2, v0, vt0 WHERE (v0.c0) ORDER BY (- (0x6d9fcea2)) DESC;
SELECT ALL MIN(vt2.c1) FROM vt2, vt0 WHERE (2.046917404E9);
SELECT MIN(vt2.c1) FROM vt2, vt0 WHERE (((2.046917404E9)AND((+ (vt2.c1))))) ORDER BY ((('-168283889', vt0.c0, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)), 0x657f3b30, ((vt0.c0)GLOB(vt0.c0)))) AND (((NOT (vt2.c0)), CAST(vt2.c1 AS TEXT), vt2.c0)))  NULLS FIRST LIMIT 2 INTERSECT SELECT MIN(vt2.c1) FROM vt2, vt0 WHERE ((((vt2.c0)) BETWEEN ((CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c0 END)) AND (((vt2.c1 IN (vt0.c0)))))) ORDER BY ((('-168283889', vt0.c0, vt0.c0)) NOT BETWEEN ((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)), 0x657f3b30, ((vt0.c0)GLOB(vt0.c0)))) AND (((NOT (vt2.c0)), CAST(vt2.c1 AS TEXT), vt2.c0)))  NULLS FIRST LIMIT 2;
SELECT COUNT(*) FROM vt2, v0, vt0 WHERE (((CASE vt2.c1  WHEN v0.c1 THEN vt0.c0 WHEN NULL THEN v0.c2 WHEN x'89945c' THEN vt2.c0 END)|((((vt0.c0)) BETWEEN ((v0.c3)) AND ((v0.c0)))))) ORDER BY CAST(CAST(v0.c3 AS INTEGER) AS NUMERIC) ASC  NULLS FIRST, (((v0.c1)) BETWEEN (((((0.15319025719930845, v0.c2, v0.c3))<((NULL, v0.c1, v0.c3))))) AND ((((vt0.c0)IS('365555319'))))), CAST(UPPER(DISTINCT v0.c2) AS TEXT) DESC;
SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((((CASE vt2.c1  WHEN v0.c1 THEN vt0.c0 WHEN NULL THEN v0.c2 WHEN x'89945c' THEN vt2.c0 END)|((((vt0.c0)) BETWEEN ((v0.c3)) AND ((v0.c0))))))AND(CASE WHEN 'U' THEN (+ (v0.c3)) WHEN ((vt0.c0)-(vt0.c0)) THEN (v0.c3 IN (vt2.c0)) END))) ORDER BY CAST(CAST(v0.c3 AS INTEGER) AS NUMERIC) ASC  NULLS FIRST, (((v0.c1)) BETWEEN (((((0.15319025719930845, v0.c2, v0.c3))<((NULL, v0.c1, v0.c3))))) AND ((((vt0.c0)IS('365555319'))))), CAST(UPPER(DISTINCT v0.c2) AS TEXT) DESC LIMIT 2 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, v0, vt0 WHERE (((LIKE(x'', vt0.c0))GLOB(((v0.c0) IS FALSE)))) ORDER BY CAST(CAST(v0.c3 AS INTEGER) AS NUMERIC) ASC  NULLS FIRST, (((v0.c1)) BETWEEN (((((0.15319025719930845, v0.c2, v0.c3))<((NULL, v0.c1, v0.c3))))) AND ((((vt0.c0)IS('365555319'))))), CAST(UPPER(DISTINCT v0.c2) AS TEXT) DESC LIMIT 0X2;
SELECT ALL MIN(vt2.c0) FROM v0, vt2 LEFT OUTER JOIN vt0 ON (((NOT (vt2.c1)))+(CAST('-904139488' AS NUMERIC))) WHERE (CAST(((-839460999)<<(x'65b4b5')) AS INTEGER));
SELECT MIN(vt2.c0) FROM v0, vt2 INNER JOIN vt0 ON (((NOT (vt2.c1)))+(CAST('-904139488' AS NUMERIC))) WHERE (((CAST(((0Xffffffffcdf6d779)<<(x'65b4b5')) AS INTEGER))AND((((v0.c0)) NOT BETWEEN (((v0.c0 IN (v0.c0)))) AND (((+ (v0.c2)))))))) LIMIT 3 INTERSECT SELECT ALL MIN(vt2.c0) FROM v0, vt2 INNER JOIN vt0 ON (((NOT (vt2.c1)))+(CAST('-904139488' AS NUMERIC))) WHERE ((+ ((NOT (v0.c1))))) LIMIT 0X3;
SELECT ALL COUNT(*) FROM v0 WHERE ((((((v0.c2, v0.c2, 0.3724734889411895)) NOT BETWEEN ((v0.c0, v0.c1, v0.c2)) AND ((v0.c2, v0.c0, v0.c1))))AND(CASE v0.c1  WHEN '&e&' THEN v0.c3 WHEN v0.c1 THEN '-1924414019' ELSE v0.c1 END)));
SELECT COUNT(*) FROM v0 WHERE ((((((((v0.c2, v0.c2, 0.3724734889411895)) NOT BETWEEN ((v0.c0, v0.c1, v0.c2)) AND ((v0.c2, v0.c0, v0.c1))))AND(CASE v0.c1  WHEN '&e&' THEN v0.c3 WHEN v0.c1 THEN '-1924414019' ELSE v0.c1 END)))AND(CASE LOWER(v0.c0)  WHEN v0.c0 THEN (+ (v0.c3)) WHEN ((v0.c3) BETWEEN (v0.c2) AND (v0.c1)) THEN (((v0.c1)) BETWEEN ((v0.c3)) AND ((v0.c0))) WHEN v0.c3 COLLATE RTRIM THEN MIN(v0.c2, v0.c2, v0.c2, v0.c0) WHEN LOWER(v0.c0) THEN (v0.c1 IN (v0.c3)) ELSE 0.9130904298176651 END))) ORDER BY ((v0.c3 COLLATE RTRIM) ISNULL) DESC, CAST(x'' AS REAL)  NULLS LAST, ((((v0.c3)||(v0.c2)))-(v0.c2 COLLATE BINARY)) DESC LIMIT 0X1;
SELECT ALL * FROM v0 INNER JOIN vt0 ON (CASE WHEN v0.c3 THEN vt2.c0 END IN ()) CROSS JOIN vt2 ON CASE WHEN vt0.c0 COLLATE RTRIM THEN (- (v0.c2)) WHEN 'T5<M' THEN ((vt2.c1)IS(v0.c0)) ELSE ((((((((vt0.c0)AND(v0.c1)))AND(v0.c2)))OR(vt0.c0)))OR(NULL)) END WHERE (CASE WHEN (v0.c2 IN ()) THEN NULL WHEN v0.c2 THEN RTRIM(vt0.c0) ELSE ((v0.c2)<>(1.831516531E9)) END);
SELECT DISTINCT * FROM v0 INNER JOIN vt0 ON (CASE WHEN v0.c3 THEN vt2.c0 END IN ()) CROSS JOIN vt2 ON CASE WHEN vt0.c0 COLLATE RTRIM THEN (- (v0.c2)) WHEN 'T5<M' THEN ((vt2.c1)IS(v0.c0)) ELSE ((((((((vt0.c0)AND(v0.c1)))AND(v0.c2)))OR(vt0.c0)))OR(NULL)) END WHERE (((CASE WHEN (v0.c2 IN ()) THEN NULL WHEN v0.c2 THEN RTRIM(vt0.c0) ELSE ((v0.c2)<(1.831516531E9)) END)AND(((-1.956065535E9)GLOB(((((((vt2.c0)OR(vt0.c0)))AND(v0.c0)))AND(v0.c2))))))) LIMIT 1;
SELECT ALL * FROM v0 INNER JOIN vt0 ON (CASE WHEN v0.c3 THEN vt2.c0 END IN ()) CROSS JOIN vt2 ON CASE WHEN vt0.c0 COLLATE RTRIM THEN (- (v0.c2)) WHEN 'T5<M' THEN ((vt2.c1)IS(v0.c0)) ELSE ((((((((vt0.c0)AND(v0.c1)))AND(v0.c2)))OR(vt0.c0)))OR(NULL)) END WHERE (CASE WHEN (v0.c2 IN ()) THEN NULL WHEN v0.c2 THEN RTRIM(vt0.c0) ELSE ((v0.c2)<>(1.831516531E9)) END);
SELECT DISTINCT * FROM v0 INNER JOIN vt0 ON (CASE WHEN v0.c3 THEN vt2.c0 END IN ()) CROSS JOIN vt2 ON CASE WHEN vt0.c0 COLLATE RTRIM THEN (- (v0.c2)) WHEN 'T5<M' THEN ((vt2.c1)IS(v0.c0)) ELSE ((((((((vt0.c0)AND(v0.c1)))AND(v0.c2)))OR(vt0.c0)))OR(NULL)) END WHERE (((CASE WHEN (v0.c2 IN ()) THEN NULL WHEN v0.c2 THEN RTRIM(vt0.c0) ELSE ((v0.c2)<(1.831516531E9)) END)AND(((-1.956065535E9)GLOB(((((((vt2.c0)OR(vt0.c0)))AND(v0.c0)))AND(v0.c2))))))) LIMIT 1;
SELECT COUNT(*) FROM v0, vt0, vt2 WHERE (CAST(((v0.c2)<=('770310855')) AS TEXT));
SELECT DISTINCT COUNT(*) FROM v0, vt0, vt2 WHERE (((CAST(((v0.c2)<('770310855')) AS TEXT))AND(((((((vt2.c0)AND(v0.c0)))AND(vt2.c0)))-(json_insert(vt2.c1, v0.c2, NULL)))))) ORDER BY ((((v0.c3 COLLATE RTRIM)OR((((vt0.c0, v0.c0, v0.c3)) NOT BETWEEN ((v0.c3, v0.c1, v0.c1)) AND ((v0.c1, vt2.c1, v0.c1))))))AND((+ (v0.c0)))) ASC  NULLS LAST, vt2.c1  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM vt2, vt0, v0 WHERE ((- (TYPEOF(v0.c1))));
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE ((- (TYPEOF(v0.c1)))) ORDER BY CASE WHEN NULL THEN (vt2.c0 IN (v0.c1)) END ASC  NULLS FIRST, CAST((vt2.c1 IN ()) AS REAL);
SELECT * FROM vt2, v0, vt0 WHERE (((vt0.c0 COLLATE RTRIM) BETWEEN (((vt0.c0)IS(vt2.c1))) AND (0.844623817438827)));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((vt0.c0 COLLATE RTRIM) BETWEEN (((vt0.c0)IS(vt2.c1))) AND (0.844623817438827)));
SELECT * FROM vt2, v0, vt0 WHERE (((vt0.c0 COLLATE RTRIM) BETWEEN (((vt0.c0)IS(vt2.c1))) AND (0.844623817438827)));
SELECT DISTINCT * FROM vt2, v0, vt0 WHERE (((vt0.c0 COLLATE RTRIM) BETWEEN (((vt0.c0)IS(vt2.c1))) AND (0.844623817438827)));
SELECT ALL MIN(vt2.c0) FROM vt2 WHERE (((((((((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)))OR(CASE vt2.c1  WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt2.c1 END)))OR(HEX(vt2.c1))))OR(((NULL)<>(vt2.c1))))) ORDER BY (((((((((vt2.c0, 'Q.g]Zri.', vt2.c1))!=((vt2.c1, vt2.c0, vt2.c0))))AND(CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)))OR((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))))OR(((vt2.c1) NOT BETWEEN ('鋀') AND (vt2.c1)))) DESC  NULLS FIRST, (((~ (vt2.c0)))OR(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) ASC  NULLS FIRST;
SELECT MIN(vt2.c0) FROM vt2 WHERE (((((((((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)))OR(CASE vt2.c1  WHEN vt2.c0 THEN NULL WHEN vt2.c0 THEN vt2.c1 END)))OR(HEX(vt2.c1))))OR(((NULL)<(vt2.c1))))) ORDER BY (((((((((vt2.c0, 'Q.g]Zri.', vt2.c1))<>((vt2.c1, vt2.c0, vt2.c0))))AND(CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 END)))OR((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c1))))))OR(((vt2.c1) NOT BETWEEN ('鋀') AND (vt2.c1)))) DESC  NULLS FIRST, (((~ (vt2.c0)))OR(((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1)))) ASC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE ((CAST(vt0.c0 AS INTEGER) IN (x'db553da7', COALESCE(DISTINCT vt2.c1, vt2.c1, vt2.c0, -7.69760503E8, vt2.c0), ((vt2.c0) IS TRUE))));
SELECT * FROM vt0, vt2 WHERE ((((CAST(vt0.c0 AS INTEGER) IN (x'db553da7', COALESCE(DISTINCT vt2.c1, vt2.c1, vt2.c0, -7.69760503E8, vt2.c0), ((vt2.c0) IS TRUE))))AND(((vt2.c0) ISNULL)))) ORDER BY ((((vt2.c1) NOTNULL)) NOT BETWEEN (ABS(DISTINCT vt2.c0)) AND (((((((((vt2.c1)AND(vt0.c0)))OR(x'59')))OR(vt0.c0)))OR(vt0.c0))))  NULLS FIRST, ((((((((vt0.c0)>(vt0.c0)))AND(((vt0.c0) ISNULL))))AND(((0.43985309193459243)IS NOT(vt0.c0)))))OR(((vt2.c0)LIKE(vt0.c0)))) LIMIT 2 INTERSECT SELECT * FROM vt0, vt2 WHERE ((((vt2.c0)) NOT BETWEEN (((vt0.c0 IN ()))) AND ((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)))))) ORDER BY ((((vt2.c1) NOTNULL)) NOT BETWEEN (ABS(DISTINCT vt2.c0)) AND (((((((((vt2.c1)AND(vt0.c0)))OR(x'59')))OR(vt0.c0)))OR(vt0.c0))))  NULLS FIRST, ((((((((vt0.c0)>(vt0.c0)))AND(((vt0.c0) ISNULL))))AND(((0.43985309193459243)IS NOT(vt0.c0)))))OR(((vt2.c0)LIKE(vt0.c0)))) LIMIT 0x2;
SELECT * FROM vt0, vt2 WHERE ((CAST(vt0.c0 AS INTEGER) IN (x'db553da7', COALESCE(DISTINCT vt2.c1, vt2.c1, vt2.c0, -7.69760503E8, vt2.c0), ((vt2.c0) IS TRUE))));
SELECT * FROM vt0, vt2 WHERE ((((CAST(vt0.c0 AS INTEGER) IN (x'db553da7', COALESCE(DISTINCT vt2.c1, vt2.c1, vt2.c0, -7.69760503E8, vt2.c0), ((vt2.c0) IS TRUE))))AND(((vt2.c0) ISNULL)))) ORDER BY ((((vt2.c1) NOTNULL)) NOT BETWEEN (ABS(DISTINCT vt2.c0)) AND (((((((((vt2.c1)AND(vt0.c0)))OR(x'59')))OR(vt0.c0)))OR(vt0.c0))))  NULLS FIRST, ((((((((vt0.c0)>(vt0.c0)))AND(((vt0.c0) ISNULL))))AND(((0.43985309193459243)IS NOT(vt0.c0)))))OR(((vt2.c0)LIKE(vt0.c0)))) LIMIT 2 INTERSECT SELECT * FROM vt0, vt2 WHERE ((((vt2.c0)) NOT BETWEEN (((vt0.c0 IN ()))) AND ((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)))))) ORDER BY ((((vt2.c1) NOTNULL)) NOT BETWEEN (ABS(DISTINCT vt2.c0)) AND (((((((((vt2.c1)AND(vt0.c0)))OR(x'59')))OR(vt0.c0)))OR(vt0.c0))))  NULLS FIRST, ((((((((vt0.c0)>(vt0.c0)))AND(((vt0.c0) ISNULL))))AND(((0.43985309193459243)IS NOT(vt0.c0)))))OR(((vt2.c0)LIKE(vt0.c0)))) LIMIT 0x2;
SELECT ALL * FROM vt0 NATURAL JOIN v0 WHERE ((((((vt0.c0, v0.c0)) BETWEEN ((v0.c0, vt0.c0)) AND ((vt0.c0, v0.c3))))<(ABS(DISTINCT v0.c0)))) ORDER BY ((((v0.c2) NOT NULL))==((v0.c0 IN ()))), (((v0.c1, 'z,', x'e677', v0.c1)) NOT BETWEEN (((v0.c0 IN ()), 0.8028947599876838, ((v0.c1)|(v0.c3)), json_patch(v0.c2, v0.c3))) AND ((CAST(v0.c3 AS REAL), ((((v0.c0)AND(v0.c2)))AND(v0.c3)), v0.c2, ((((((vt0.c0)AND(v0.c3)))AND(v0.c1)))AND(v0.c1)))));
SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 WHERE ((((((vt0.c0, v0.c0)) BETWEEN ((v0.c0, vt0.c0)) AND ((vt0.c0, v0.c3))))<(ABS(DISTINCT v0.c0)))) ORDER BY ((((v0.c2) NOT NULL))=((v0.c0 IN ()))), (((v0.c1, 'z,', x'e677', v0.c1)) NOT BETWEEN (((v0.c0 IN ()), 0.8028947599876838, ((v0.c1)|(v0.c3)), json_patch(v0.c2, v0.c3))) AND ((CAST(v0.c3 AS REAL), ((((v0.c0)AND(v0.c2)))AND(v0.c3)), v0.c2, ((((((vt0.c0)AND(v0.c3)))AND(v0.c1)))AND(v0.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 WHERE (((((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))AND(((((v0.c0)AND(v0.c1)))OR(v0.c0)))))AND(((((v0.c3)AND(v0.c0)))OR(v0.c0))))) ORDER BY ((((v0.c2) NOT NULL))==((v0.c0 IN ()))), (((v0.c1, 'z,', x'e677', v0.c1)) NOT BETWEEN (((v0.c0 IN ()), 0.8028947599876838, ((v0.c1)|(v0.c3)), json_patch(v0.c2, v0.c3))) AND ((CAST(v0.c3 AS REAL), ((((v0.c0)AND(v0.c2)))AND(v0.c3)), v0.c2, ((((((vt0.c0)AND(v0.c3)))AND(v0.c1)))AND(v0.c1))))) LIMIT 0x0;
SELECT ALL * FROM vt0 NATURAL JOIN v0 WHERE ((((((vt0.c0, v0.c0)) BETWEEN ((v0.c0, vt0.c0)) AND ((vt0.c0, v0.c3))))<(ABS(DISTINCT v0.c0)))) ORDER BY ((((v0.c2) NOT NULL))==((v0.c0 IN ()))), (((v0.c1, 'z,', x'e677', v0.c1)) NOT BETWEEN (((v0.c0 IN ()), 0.8028947599876838, ((v0.c1)|(v0.c3)), json_patch(v0.c2, v0.c3))) AND ((CAST(v0.c3 AS REAL), ((((v0.c0)AND(v0.c2)))AND(v0.c3)), v0.c2, ((((((vt0.c0)AND(v0.c3)))AND(v0.c1)))AND(v0.c1)))));
SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 WHERE ((((((vt0.c0, v0.c0)) BETWEEN ((v0.c0, vt0.c0)) AND ((vt0.c0, v0.c3))))<(ABS(DISTINCT v0.c0)))) ORDER BY ((((v0.c2) NOT NULL))=((v0.c0 IN ()))), (((v0.c1, 'z,', x'e677', v0.c1)) NOT BETWEEN (((v0.c0 IN ()), 0.8028947599876838, ((v0.c1)|(v0.c3)), json_patch(v0.c2, v0.c3))) AND ((CAST(v0.c3 AS REAL), ((((v0.c0)AND(v0.c2)))AND(v0.c3)), v0.c2, ((((((vt0.c0)AND(v0.c3)))AND(v0.c1)))AND(v0.c1))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt0 NATURAL JOIN v0 WHERE (((((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))AND(((((v0.c0)AND(v0.c1)))OR(v0.c0)))))AND(((((v0.c3)AND(v0.c0)))OR(v0.c0))))) ORDER BY ((((v0.c2) NOT NULL))==((v0.c0 IN ()))), (((v0.c1, 'z,', x'e677', v0.c1)) NOT BETWEEN (((v0.c0 IN ()), 0.8028947599876838, ((v0.c1)|(v0.c3)), json_patch(v0.c2, v0.c3))) AND ((CAST(v0.c3 AS REAL), ((((v0.c0)AND(v0.c2)))AND(v0.c3)), v0.c2, ((((((vt0.c0)AND(v0.c3)))AND(v0.c1)))AND(v0.c1))))) LIMIT 0x0;
SELECT MIN(v0.c0) FROM v0 WHERE (((v0.c1)>=(v0.c3)) COLLATE NOCASE);
SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (((v0.c1)>=(v0.c3)) COLLATE NOCASE) ORDER BY v0.c1  NULLS FIRST, ((((v0.c3)/(v0.c3)))=(v0.c3 COLLATE NOCASE)) ASC INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0 WHERE (UNLIKELY((((v0.c1, v0.c1, v0.c1)) BETWEEN ((v0.c1, v0.c0, v0.c0)) AND ((v0.c3, v0.c0, v0.c0))))) ORDER BY v0.c1  NULLS FIRST, ((((v0.c3)/(v0.c3)))==(v0.c3 COLLATE NOCASE)) ASC;
SELECT ALL * FROM v0, vt0 WHERE (CAST(CAST(vt0.c0 AS REAL) AS REAL)) ORDER BY CHANGES()  NULLS FIRST, v0.c2 ASC  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN ((((v0.c2, vt0.c0))!=((v0.c2, vt0.c0)))) AND ((('g') NOT BETWEEN (v0.c2) AND (v0.c1)))) ASC;
SELECT * FROM v0, vt0 WHERE (((CAST(CAST(vt0.c0 AS REAL) AS REAL))AND(TYPEOF(DISTINCT ((v0.c1)*(v0.c2)))))) ORDER BY CHANGES()  NULLS FIRST, v0.c2 ASC  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN ((((v0.c2, vt0.c0))!=((v0.c2, vt0.c0)))) AND ((('g') NOT BETWEEN (v0.c2) AND (v0.c1)))) ASC;
SELECT ALL * FROM v0, vt0 WHERE (CAST(CAST(vt0.c0 AS REAL) AS REAL)) ORDER BY CHANGES()  NULLS FIRST, v0.c2 ASC  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN ((((v0.c2, vt0.c0))!=((v0.c2, vt0.c0)))) AND ((('g') NOT BETWEEN (v0.c2) AND (v0.c1)))) ASC;
SELECT * FROM v0, vt0 WHERE (((CAST(CAST(vt0.c0 AS REAL) AS REAL))AND(TYPEOF(DISTINCT ((v0.c1)*(v0.c2)))))) ORDER BY CHANGES()  NULLS FIRST, v0.c2 ASC  NULLS LAST, ((((v0.c1) NOT BETWEEN (v0.c0) AND (v0.c2))) BETWEEN ((((v0.c2, vt0.c0))!=((v0.c2, vt0.c0)))) AND ((('g') NOT BETWEEN (v0.c2) AND (v0.c1)))) ASC;
SELECT MIN(vt0.c0) FROM vt0 WHERE (((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0))) BETWEEN ('512052163') AND (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))));
SELECT DISTINCT MIN(vt0.c0) FROM vt0 WHERE (((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0))) BETWEEN ('512052163') AND (((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))))AND(((CAST(vt0.c0 AS REAL))IS(CASE WHEN vt0.c0 THEN 0.009058053228699015 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))))) ORDER BY ((((vt0.c0)<(NULL))) IS FALSE)  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE (v0.c3 COLLATE RTRIM) ORDER BY (((('-2127914432') IS FALSE))&(((v0.c1) IS TRUE)))  NULLS LAST, ((TYPEOF(DISTINCT v0.c0)) IS TRUE);
SELECT ALL * FROM v0, vt2, vt0 WHERE (((v0.c3 COLLATE RTRIM)AND(LIKELIHOOD(DISTINCT ((v0.c0) NOT BETWEEN (1702837040) AND (vt0.c0)), NULL)))) ORDER BY 'qTn'  NULLS FIRST;
SELECT * FROM v0, vt2, vt0 WHERE (v0.c3 COLLATE RTRIM) ORDER BY (((('-2127914432') IS FALSE))&(((v0.c1) IS TRUE)))  NULLS LAST, ((TYPEOF(DISTINCT v0.c0)) IS TRUE);
SELECT ALL * FROM v0, vt2, vt0 WHERE (((v0.c3 COLLATE RTRIM)AND(LIKELIHOOD(DISTINCT ((v0.c0) NOT BETWEEN (1702837040) AND (vt0.c0)), NULL)))) ORDER BY 'qTn'  NULLS FIRST;
SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY INSTR(json_valid(vt0.c0), vt0.c0 COLLATE BINARY)  NULLS LAST, CASE WHEN ((0.7192128116852758)<>(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) END;
SELECT DISTINCT * FROM vt0 WHERE (NULL) ORDER BY INSTR(json_valid(vt0.c0), vt0.c0 COLLATE BINARY)  NULLS LAST, CASE WHEN ((0.7192128116852758)<>(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) END;
SELECT ALL * FROM vt0 WHERE (NULL) ORDER BY INSTR(json_valid(vt0.c0), vt0.c0 COLLATE BINARY)  NULLS LAST, CASE WHEN ((0.7192128116852758)<>(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) END;
SELECT DISTINCT * FROM vt0 WHERE (NULL) ORDER BY INSTR(json_valid(vt0.c0), vt0.c0 COLLATE BINARY)  NULLS LAST, CASE WHEN ((0.7192128116852758)<>(vt0.c0)) THEN (vt0.c0 IN (vt0.c0)) END;
SELECT ALL * FROM vt2, v0 WHERE (CAST(((NULL) NOTNULL) AS BLOB)) ORDER BY ((((((((v0.c3)||(vt2.c1)))OR(CASE WHEN v0.c2 THEN v0.c1 WHEN vt2.c0 THEN v0.c0 WHEN v0.c0 THEN NULL END)))AND((((v0.c2, ''))>((vt2.c0, v0.c2))))))OR(v0.c2 COLLATE BINARY))  NULLS FIRST, TIME(vt2.c0, v0.c3, vt2.c1, v0.c2) COLLATE NOCASE ASC  NULLS FIRST, (~ (((((((((v0.c3)AND(v0.c3)))AND(v0.c0)))OR(v0.c0)))AND(v0.c1)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(((NULL) NOTNULL) AS BLOB))AND(CAST(v0.c1 AS TEXT) COLLATE NOCASE))) ORDER BY RTRIM(QUOTE(v0.c3)) ASC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((((v0.c0) IS TRUE)) IS FALSE)) ORDER BY RTRIM(QUOTE(v0.c3)) ASC LIMIT 0x1;
SELECT ALL * FROM vt2, v0 WHERE (CAST(((NULL) NOTNULL) AS BLOB)) ORDER BY ((((((((v0.c3)||(vt2.c1)))OR(CASE WHEN v0.c2 THEN v0.c1 WHEN vt2.c0 THEN v0.c0 WHEN v0.c0 THEN NULL END)))AND((((v0.c2, ''))>((vt2.c0, v0.c2))))))OR(v0.c2 COLLATE BINARY))  NULLS FIRST, TIME(vt2.c0, v0.c3, vt2.c1, v0.c2) COLLATE NOCASE ASC  NULLS FIRST, (~ (((((((((v0.c3)AND(v0.c3)))AND(v0.c0)))OR(v0.c0)))AND(v0.c1)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt2, v0 WHERE (((CAST(((NULL) NOTNULL) AS BLOB))AND(CAST(v0.c1 AS TEXT) COLLATE NOCASE))) ORDER BY RTRIM(QUOTE(v0.c3)) ASC LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (((((v0.c0) IS TRUE)) IS FALSE)) ORDER BY RTRIM(QUOTE(v0.c3)) ASC LIMIT 0x1;
SELECT * FROM vt2, vt0, v0 WHERE ((((v0.c1)OR(v0.c1)) IN (((v0.c1) ISNULL)))) ORDER BY 1270330294 ASC, ((NULL)>>(vt2.c1)) COLLATE NOCASE;
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE ((((((v0.c1)OR(v0.c1)) IN (((v0.c1) ISNULL))))AND('Y*l<P'))) ORDER BY 0X4bb7b3b6 ASC, ((NULL)>>(vt2.c1)) COLLATE NOCASE INTERSECT SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (NULL) ORDER BY 1270330294 ASC, ((NULL)>>(vt2.c1)) COLLATE NOCASE;
SELECT * FROM vt2, vt0, v0 WHERE ((((v0.c1)OR(v0.c1)) IN (((v0.c1) ISNULL)))) ORDER BY 1270330294 ASC, ((NULL)>>(vt2.c1)) COLLATE NOCASE;
SELECT ALL * FROM v0 WHERE ((~ (((v0.c2)==(v0.c2))))) ORDER BY (((((((((((NULL IN (v0.c1, v0.c0, v0.c2)))AND((((v0.c3))<=((v0.c0))))))AND(((((v0.c0)OR(v0.c2)))OR(v0.c0)))))OR(((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c0)))))OR(v0.c0 COLLATE BINARY)))OR((((v0.c1, v0.c3, v0.c1))<>((v0.c0, v0.c0, v0.c3))))) DESC;
SELECT ALL * FROM v0 WHERE ((((~ (((v0.c2)==(v0.c2)))))AND(CAST(((((v0.c1)AND(v0.c2)))AND(v0.c2)) AS TEXT)))) ORDER BY (((((((((((NULL IN (v0.c1, v0.c0, v0.c2)))AND((((v0.c3))<=((v0.c0))))))AND(((((v0.c0)OR(v0.c2)))OR(v0.c0)))))OR(((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c0)))))OR(v0.c0 COLLATE BINARY)))OR((((v0.c1, v0.c3, v0.c1))<>((v0.c0, v0.c0, v0.c3))))) DESC LIMIT 0X0;
SELECT ALL * FROM v0 WHERE ((~ (((v0.c2)==(v0.c2))))) ORDER BY (((((((((((NULL IN (v0.c1, v0.c0, v0.c2)))AND((((v0.c3))<=((v0.c0))))))AND(((((v0.c0)OR(v0.c2)))OR(v0.c0)))))OR(((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c0)))))OR(v0.c0 COLLATE BINARY)))OR((((v0.c1, v0.c3, v0.c1))<>((v0.c0, v0.c0, v0.c3))))) DESC;
SELECT ALL * FROM v0 WHERE ((((~ (((v0.c2)==(v0.c2)))))AND(CAST(((((v0.c1)AND(v0.c2)))AND(v0.c2)) AS TEXT)))) ORDER BY (((((((((((NULL IN (v0.c1, v0.c0, v0.c2)))AND((((v0.c3))<=((v0.c0))))))AND(((((v0.c0)OR(v0.c2)))OR(v0.c0)))))OR(((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c0)))))OR(v0.c0 COLLATE BINARY)))OR((((v0.c1, v0.c3, v0.c1))<>((v0.c0, v0.c0, v0.c3))))) DESC LIMIT 0X0;
SELECT MAX(vt2.c1) FROM vt0, vt2 WHERE (vt0.c0);
SELECT ALL MAX(vt2.c1) FROM vt0, vt2 WHERE (((vt0.c0)AND(((((vt2.c0)/(vt2.c1)))|(COALESCE(DISTINCT vt2.c1, vt2.c0))))));
SELECT * FROM v0 WHERE (((v0.c1) IS TRUE));
SELECT DISTINCT * FROM v0 WHERE (((v0.c1) IS TRUE)) ORDER BY UNLIKELY(DISTINCT ((((v0.c0)OR('C3r#')))AND(v0.c2))) DESC  NULLS FIRST, rtreenode(((NULL)%(v0.c3)), CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END) DESC  NULLS FIRST LIMIT 0x3;
SELECT * FROM v0 WHERE (((v0.c1) IS TRUE));
SELECT DISTINCT * FROM v0 WHERE (((v0.c1) IS TRUE)) ORDER BY UNLIKELY(DISTINCT ((((v0.c0)OR('C3r#')))AND(v0.c2))) DESC  NULLS FIRST, rtreenode(((NULL)%(v0.c3)), CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c2 END) DESC  NULLS FIRST LIMIT 0x3;
SELECT COUNT(*) FROM vt0, v0 WHERE (v0.c2);
SELECT COUNT(*) FROM vt0, v0 WHERE (v0.c2) INTERSECT SELECT COUNT(*) FROM vt0, v0 WHERE ((~ (((v0.c0) IS TRUE))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (CAST(((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) AS BLOB)) ORDER BY ((UNLIKELY(DISTINCT vt0.c0))>=(((vt0.c0)GLOB(vt0.c0))))  NULLS FIRST, (- (((vt0.c0) NOTNULL))) ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (CAST(((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)) AS BLOB)) ORDER BY ((UNLIKELY(DISTINCT vt0.c0))>=(((vt0.c0)GLOB(vt0.c0))))  NULLS FIRST, (- (((vt0.c0) NOTNULL))) ASC  NULLS FIRST LIMIT 0 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((CAST(vt0.c0 AS BLOB)) ISNULL)) ORDER BY ((UNLIKELY(DISTINCT vt0.c0))>=(((vt0.c0)GLOB(vt0.c0))))  NULLS FIRST, (- (((vt0.c0) NOTNULL))) ASC  NULLS FIRST LIMIT 0X0;
SELECT MIN(v0.c1) FROM vt2, vt0, v0 WHERE (((vt2.c1) NOT BETWEEN (((((vt2.c0)AND(v0.c2)))OR(v0.c0))) AND (v0.c2)));
SELECT DISTINCT MIN(v0.c1) FROM vt2, vt0, v0 WHERE (((vt2.c1) NOT BETWEEN (((((vt2.c0)AND(v0.c2)))OR(v0.c0))) AND (v0.c2))) ORDER BY vt2.c1 DESC, ((((((((vt0.c0)%(v0.c1)))AND((((v0.c1))>((vt2.c0))))))AND(((v0.c3) NOT BETWEEN (v0.c1) AND (vt2.c0)))))OR((NOT (NULL)))) DESC  NULLS LAST, (((((vt0.c0)) BETWEEN ((v0.c1)) AND ((v0.c3)))) IS TRUE) DESC  NULLS FIRST;
SELECT MIN(v0.c1) FROM v0, vt0 WHERE ((((vt0.c0, v0.c3)) BETWEEN (((((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))), CASE vt0.c0  WHEN v0.c2 THEN v0.c1 END)) AND ((((v0.c2) IS FALSE), IFNULL(v0.c0, v0.c3))))) ORDER BY ((((v0.c3))=((vt0.c0))) IN ());
SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE ((((vt0.c0, v0.c3)) BETWEEN (((((v0.c2)) NOT BETWEEN ((v0.c1)) AND ((v0.c1))), CASE vt0.c0  WHEN v0.c2 THEN v0.c1 END)) AND ((((v0.c2) IS FALSE), IFNULL(v0.c0, v0.c3))))) ORDER BY (('Z!meꀿSC')>=(v0.c1)) COLLATE BINARY ASC INTERSECT SELECT ALL MIN(v0.c1) FROM v0, vt0 WHERE (vt0.c0) ORDER BY (('Z!meꀿSC')>=(v0.c1)) COLLATE BINARY ASC;
SELECT * FROM v0, vt2 WHERE ((- (((vt2.c0) BETWEEN (v0.c3) AND (v0.c2))))) ORDER BY ((((((((vt2.c0)OR(vt2.c0)))AND(NULL)))AND(vt2.c1)))OR((((vt2.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c2))))) DESC, CASE WHEN v0.c1 THEN vt2.c1 END COLLATE NOCASE;
SELECT ALL * FROM v0, vt2 WHERE ((((- (((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)))))AND(CASE (~ (v0.c0))  WHEN (((vt2.c0))!=((vt2.c1))) THEN COALESCE(DISTINCT v0.c3, 1.7976931348623157E308, v0.c3) ELSE 0xffffffffd0d44b3d END))) ORDER BY ((vt2.c0) IS FALSE) DESC  NULLS FIRST;
SELECT * FROM v0, vt2 WHERE ((- (((vt2.c0) BETWEEN (v0.c3) AND (v0.c2))))) ORDER BY ((((((((vt2.c0)OR(vt2.c0)))AND(NULL)))AND(vt2.c1)))OR((((vt2.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c2))))) DESC, CASE WHEN v0.c1 THEN vt2.c1 END COLLATE NOCASE;
SELECT ALL * FROM v0, vt2 WHERE ((((- (((vt2.c0) BETWEEN (v0.c3) AND (v0.c2)))))AND(CASE (~ (v0.c0))  WHEN (((vt2.c0))!=((vt2.c1))) THEN COALESCE(DISTINCT v0.c3, 1.7976931348623157E308, v0.c3) ELSE 0xffffffffd0d44b3d END))) ORDER BY ((vt2.c0) IS FALSE) DESC  NULLS FIRST;
SELECT MIN(v0.c0) FROM v0 WHERE ((v0.c3 IN (NULL)) COLLATE RTRIM);
SELECT MIN(v0.c0) FROM v0 WHERE ((v0.c3 IN (NULL)) COLLATE RTRIM) LIMIT 0x0;
SELECT MAX(v0.c0) FROM vt0, v0, vt2 WHERE (v0.c1) ORDER BY LTRIM(((((((((v0.c0)AND(NULL)))AND(v0.c2)))AND(vt2.c1)))AND(vt2.c1)), ((vt2.c1)/(v0.c3))) DESC  NULLS LAST, CAST((((v0.c1, vt0.c0)) BETWEEN ((vt0.c0, v0.c1)) AND ((vt2.c1, '-0.0'))) AS INTEGER) DESC, vt2.c0;
SELECT ALL MAX(v0.c0) FROM vt0, v0, vt2 WHERE (v0.c1) ORDER BY CAST(vt0.c0 AS TEXT) DESC;
SELECT MAX(vt2.c0) FROM vt0, vt2, v0 WHERE (CAST((v0.c2 IN ()) AS INTEGER)) ORDER BY (NOT (NULL)), (+ (((v0.c3) BETWEEN (v0.c2) AND (NULL)))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(vt2.c0) FROM vt0, vt2, v0 WHERE (CAST((v0.c2 IN ()) AS INTEGER)) ORDER BY (NOT (NULL)), (+ (((v0.c3) BETWEEN (v0.c2) AND (NULL)))) DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM v0, vt2 LEFT OUTER JOIN vt0 ON CASE WHEN (((vt2.c1, v0.c2, vt2.c0, v0.c1, vt2.c1))<(('', vt0.c0, x'', v0.c2, vt0.c0))) THEN (v0.c3 IN ()) WHEN (~ (v0.c1)) THEN x'' ELSE ((vt2.c1) NOT NULL) END WHERE ('隵{r[') ORDER BY (((((v0.c3)) BETWEEN ((vt2.c0)) AND ((v0.c3)))) NOT BETWEEN (((v0.c3) BETWEEN (v0.c3) AND (vt2.c0))) AND (((v0.c3)||('-1006256381'))));
SELECT DISTINCT * FROM v0, vt2 LEFT OUTER JOIN vt0 ON CASE WHEN (((vt2.c1, v0.c2, vt2.c0, v0.c1, vt2.c1))<(('', vt0.c0, x'', v0.c2, vt0.c0))) THEN (v0.c3 IN ()) WHEN (~ (v0.c1)) THEN x'' ELSE ((vt2.c1) NOT NULL) END WHERE ((('隵{r[')AND(CAST(CAST(v0.c3 AS TEXT) AS TEXT)))) ORDER BY (((((v0.c3)) BETWEEN ((vt2.c0)) AND ((v0.c3)))) NOT BETWEEN (((v0.c3) BETWEEN (v0.c3) AND (vt2.c0))) AND (((v0.c3)||('-1006256381')))) LIMIT 0;
SELECT ALL * FROM v0, vt2 LEFT OUTER JOIN vt0 ON CASE WHEN (((vt2.c1, v0.c2, vt2.c0, v0.c1, vt2.c1))<(('', vt0.c0, x'', v0.c2, vt0.c0))) THEN (v0.c3 IN ()) WHEN (~ (v0.c1)) THEN x'' ELSE ((vt2.c1) NOT NULL) END WHERE ('隵{r[') ORDER BY (((((v0.c3)) BETWEEN ((vt2.c0)) AND ((v0.c3)))) NOT BETWEEN (((v0.c3) BETWEEN (v0.c3) AND (vt2.c0))) AND (((v0.c3)||('-1006256381'))));
SELECT DISTINCT * FROM v0, vt2 LEFT OUTER JOIN vt0 ON CASE WHEN (((vt2.c1, v0.c2, vt2.c0, v0.c1, vt2.c1))<(('', vt0.c0, x'', v0.c2, vt0.c0))) THEN (v0.c3 IN ()) WHEN (~ (v0.c1)) THEN x'' ELSE ((vt2.c1) NOT NULL) END WHERE ((('隵{r[')AND(CAST(CAST(v0.c3 AS TEXT) AS TEXT)))) ORDER BY (((((v0.c3)) BETWEEN ((vt2.c0)) AND ((v0.c3)))) NOT BETWEEN (((v0.c3) BETWEEN (v0.c3) AND (vt2.c0))) AND (((v0.c3)||('-1006256381')))) LIMIT 0;
SELECT COUNT(*) FROM v0, vt0 WHERE (CAST((NOT (vt0.c0)) AS NUMERIC)) ORDER BY (+ (((vt0.c0)*(vt0.c0)))) DESC, (((v0.c0)!=(v0.c1)) IN (((((((NULL)OR(v0.c3)))AND(x'3f8f9b26')))OR(vt0.c0)))) ASC;
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((CAST((NOT (vt0.c0)) AS NUMERIC))AND(CAST((NOT (vt0.c0)) AS BLOB)))) ORDER BY (+ (((vt0.c0)*(vt0.c0)))) DESC, (((v0.c0)!=(v0.c1)) IN (((((((NULL)OR(v0.c3)))AND(x'3f8f9b26')))OR(vt0.c0)))) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE ((((v0.c0, v0.c1)) BETWEEN ((vt0.c0, v0.c1)) AND ((vt0.c0, v0.c3))) COLLATE NOCASE) ORDER BY (+ (((vt0.c0)*(vt0.c0)))) DESC, (((v0.c0)<>(v0.c1)) IN (((((((NULL)OR(v0.c3)))AND(x'3f8f9b26')))OR(vt0.c0)))) ASC;
SELECT * FROM vt2 WHERE (((vt2.c0 IN (x'91', NULL)) IN ())) ORDER BY (NOT (x'')) DESC, (((((vt2.c1)>(vt2.c1)), ((((vt2.c0)OR(vt2.c1)))OR(vt2.c1))))!=((((vt2.c0) IS FALSE), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))))) DESC;
SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c0 IN (x'91', NULL)) IN ()))AND(((LOWER(vt2.c1)) IS FALSE)))) ORDER BY 'X' DESC  NULLS LAST, (- ('1165436722')) ASC, ((((vt2.c0, vt2.c1))=((vt2.c1, vt2.c0))) IN (CASE WHEN vt2.c0 THEN vt2.c1 END))  NULLS LAST LIMIT 0x3;
SELECT * FROM vt2 WHERE (((vt2.c0 IN (x'91', NULL)) IN ())) ORDER BY (NOT (x'')) DESC, (((((vt2.c1)>(vt2.c1)), ((((vt2.c0)OR(vt2.c1)))OR(vt2.c1))))!=((((vt2.c0) IS FALSE), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))))) DESC;
SELECT DISTINCT * FROM vt2 WHERE (((((vt2.c0 IN (x'91', NULL)) IN ()))AND(((LOWER(vt2.c1)) IS FALSE)))) ORDER BY 'X' DESC  NULLS LAST, (- ('1165436722')) ASC, ((((vt2.c0, vt2.c1))=((vt2.c1, vt2.c0))) IN (CASE WHEN vt2.c0 THEN vt2.c1 END))  NULLS LAST LIMIT 0x3;
SELECT * FROM vt0 NATURAL JOIN v0 NATURAL JOIN vt2 WHERE ((((((NOT (vt2.c1)))AND('' COLLATE NOCASE)))OR(vt0.c0)));
SELECT ALL * FROM vt0 NATURAL JOIN v0 NATURAL JOIN vt2 WHERE ((((((NOT (vt2.c1)))AND('' COLLATE NOCASE)))OR(vt0.c0))) ORDER BY ((((((vt2.c1 COLLATE RTRIM)AND(((v0.c1)>>(v0.c1)))))AND(((vt0.c0) NOTNULL))))OR((vt0.c0 IN (vt2.c0, vt2.c0))))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN vt2.c0 ELSE v0.c1 END) IS FALSE)  NULLS FIRST, (((vt0.c0, vt2.c1)) NOT BETWEEN ((0.3498957839934249, ((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)))) AND ((((vt0.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)), ((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))))) LIMIT 1;
SELECT * FROM vt0 NATURAL JOIN v0 NATURAL JOIN vt2 WHERE ((((((NOT (vt2.c1)))AND('' COLLATE NOCASE)))OR(vt0.c0)));
SELECT ALL * FROM vt0 NATURAL JOIN v0 NATURAL JOIN vt2 WHERE ((((((NOT (vt2.c1)))AND('' COLLATE NOCASE)))OR(vt0.c0))) ORDER BY ((((((vt2.c1 COLLATE RTRIM)AND(((v0.c1)>>(v0.c1)))))AND(((vt0.c0) NOTNULL))))OR((vt0.c0 IN (vt2.c0, vt2.c0))))  NULLS FIRST, ((CASE WHEN vt0.c0 THEN vt2.c0 ELSE v0.c1 END) IS FALSE)  NULLS FIRST, (((vt0.c0, vt2.c1)) NOT BETWEEN ((0.3498957839934249, ((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)))) AND ((((vt0.c0) NOT BETWEEN (vt2.c1) AND (v0.c2)), ((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))))) LIMIT 1;
SELECT ALL * FROM v0, vt0, vt2 WHERE (DATE((vt2.c1 IN (v0.c0, vt0.c0)), CASE WHEN vt2.c1 THEN v0.c3 END, (~ ('1494485247')), ((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0)), ABS(DISTINCT v0.c1)));
SELECT * FROM v0, vt0, vt2 WHERE (((DATE((vt2.c1 IN (v0.c0, vt0.c0)), CASE WHEN vt2.c1 THEN v0.c3 END, (~ ('1494485247')), ((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0)), ABS(DISTINCT v0.c1)))AND(((v0.c3) IS TRUE)))) LIMIT 2 INTERSECT SELECT ALL * FROM v0, vt0, vt2 WHERE (CASE WHEN (+ (v0.c2)) THEN ((vt0.c0)AND(v0.c0)) ELSE ((((((vt2.c0)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)) END) LIMIT 2;
SELECT ALL * FROM v0, vt0, vt2 WHERE (DATE((vt2.c1 IN (v0.c0, vt0.c0)), CASE WHEN vt2.c1 THEN v0.c3 END, (~ ('1494485247')), ((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0)), ABS(DISTINCT v0.c1)));
SELECT * FROM v0, vt0, vt2 WHERE (((DATE((vt2.c1 IN (v0.c0, vt0.c0)), CASE WHEN vt2.c1 THEN v0.c3 END, (~ ('1494485247')), ((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0)), ABS(DISTINCT v0.c1)))AND(((v0.c3) IS TRUE)))) LIMIT 2 INTERSECT SELECT ALL * FROM v0, vt0, vt2 WHERE (CASE WHEN (+ (v0.c2)) THEN ((vt0.c0)AND(v0.c0)) ELSE ((((((vt2.c0)AND(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)) END) LIMIT 2;
SELECT * FROM vt0 WHERE (((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))>(((vt0.c0)<>(vt0.c0))))) ORDER BY vt0.c0, ((NULL) NOTNULL) COLLATE NOCASE DESC;
SELECT * FROM vt0 WHERE (((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))>(((vt0.c0)>(vt0.c0)))))AND(((~ (vt0.c0)) IN (((((vt0.c0)AND('d4cl
&''p')))AND(vt0.c0))))))) ORDER BY vt0.c0, ((NULL) NOTNULL) COLLATE NOCASE DESC LIMIT 1;
SELECT * FROM vt0 WHERE (((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))>(((vt0.c0)<>(vt0.c0))))) ORDER BY vt0.c0, ((NULL) NOTNULL) COLLATE NOCASE DESC;
SELECT * FROM vt0 WHERE (((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))>(((vt0.c0)>(vt0.c0)))))AND(((~ (vt0.c0)) IN (((((vt0.c0)AND('d4cl
&''p')))AND(vt0.c0))))))) ORDER BY vt0.c0, ((NULL) NOTNULL) COLLATE NOCASE DESC LIMIT 1;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE ((vt0.c0 COLLATE NOCASE IN (((vt0.c0)*(v0.c1))))) ORDER BY (((((((((((+ (x'27')))AND(((((((v0.c1)AND(vt2.c0)))OR(v0.c0)))OR(v0.c3)))))OR(CASE vt0.c0  WHEN v0.c0 THEN vt2.c0 ELSE vt0.c0 END)))AND(IFNULL(DISTINCT v0.c0, v0.c0))))AND(((vt0.c0)<<(x'')))))OR(NULL)), ((((((IFNULL(DISTINCT '-1065093422', vt2.c0))OR(highlight(vt0.c0, vt0.c0, v0.c3, vt2.c1))))OR(((((v0.c3)OR(v0.c3)))AND(v0.c1)))))AND(CASE v0.c2  WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN x'1a' THEN v0.c0 WHEN -1.726882884E9 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END)) ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE ((((vt0.c0 COLLATE NOCASE IN (((vt0.c0)*(v0.c1)))))AND(CAST((((vt2.c0, v0.c3)) BETWEEN ((v0.c2, vt0.c0)) AND ((v0.c1, v0.c1))) AS INTEGER)))) ORDER BY (((((((((((+ (x'27')))AND(((((((v0.c1)AND(vt2.c0)))OR(v0.c0)))OR(v0.c3)))))OR(CASE vt0.c0  WHEN v0.c0 THEN vt2.c0 ELSE vt0.c0 END)))AND(IFNULL(DISTINCT v0.c0, v0.c0))))AND(((vt0.c0)<<(x'')))))OR(NULL)), ((((((IFNULL(DISTINCT '-1065093422', vt2.c0))OR(highlight(vt0.c0, vt0.c0, v0.c3, vt2.c1))))OR(((((v0.c3)OR(v0.c3)))AND(v0.c1)))))AND(CASE v0.c2  WHEN vt2.c0 THEN v0.c3 WHEN v0.c1 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 WHEN x'1a' THEN v0.c0 WHEN -1.726882884E9 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END)) ASC  NULLS FIRST LIMIT 0x1;
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON CASE WHEN ((vt2.c1) ISNULL) THEN ((vt2.c1)>=(vt2.c1)) WHEN ((vt2.c0)=(vt2.c1)) THEN (vt2.c0 IN (vt2.c1)) WHEN ((vt2.c0)OR(vt2.c0)) THEN (((('-1468862807')OR(vt2.c0)))OR(vt2.c0)) ELSE ((x'488670')IS NOT(x'')) END WHERE ((CASE WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END IN ()));
SELECT ALL * FROM vt2 INNER JOIN vt0 ON CASE WHEN ((vt2.c1) ISNULL) THEN ((vt2.c1)>=(vt2.c1)) WHEN ((vt2.c0)=(vt2.c1)) THEN (vt2.c0 IN (vt2.c1)) WHEN ((vt2.c0)OR(vt2.c0)) THEN (((('-1468862807')OR(vt2.c0)))OR(vt2.c0)) ELSE ((x'488670')IS NOT(x'')) END WHERE ((((CASE WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END IN ()))AND((((vt0.c0, vt0.c0, vt0.c0, vt2.c1, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, ((x'41ae72') IS FALSE), CASE vt2.c1  WHEN 0.7089861308517214 THEN vt2.c0 ELSE vt2.c1 END, ((vt2.c1)>(vt2.c1)), CAST(vt2.c1 AS INTEGER), (((vt2.c0, vt0.c0, vt2.c0, vt0.c0))>((vt2.c0, vt2.c0, NULL, vt0.c0))))) AND (((('477587929')*(vt0.c0)), x'', vt2.c1 COLLATE RTRIM, CAST(vt2.c0 AS NUMERIC), ((vt2.c1) IS TRUE), vt2.c1 COLLATE NOCASE))))));
SELECT * FROM vt2 LEFT OUTER JOIN vt0 ON CASE WHEN ((vt2.c1) ISNULL) THEN ((vt2.c1)>=(vt2.c1)) WHEN ((vt2.c0)=(vt2.c1)) THEN (vt2.c0 IN (vt2.c1)) WHEN ((vt2.c0)OR(vt2.c0)) THEN (((('-1468862807')OR(vt2.c0)))OR(vt2.c0)) ELSE ((x'488670')IS NOT(x'')) END WHERE ((CASE WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END IN ()));
SELECT ALL * FROM vt2 INNER JOIN vt0 ON CASE WHEN ((vt2.c1) ISNULL) THEN ((vt2.c1)>=(vt2.c1)) WHEN ((vt2.c0)=(vt2.c1)) THEN (vt2.c0 IN (vt2.c1)) WHEN ((vt2.c0)OR(vt2.c0)) THEN (((('-1468862807')OR(vt2.c0)))OR(vt2.c0)) ELSE ((x'488670')IS NOT(x'')) END WHERE ((((CASE WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END IN ()))AND((((vt0.c0, vt0.c0, vt0.c0, vt2.c1, vt0.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, ((x'41ae72') IS FALSE), CASE vt2.c1  WHEN 0.7089861308517214 THEN vt2.c0 ELSE vt2.c1 END, ((vt2.c1)>(vt2.c1)), CAST(vt2.c1 AS INTEGER), (((vt2.c0, vt0.c0, vt2.c0, vt0.c0))>((vt2.c0, vt2.c0, NULL, vt0.c0))))) AND (((('477587929')*(vt0.c0)), x'', vt2.c1 COLLATE RTRIM, CAST(vt2.c0 AS NUMERIC), ((vt2.c1) IS TRUE), vt2.c1 COLLATE NOCASE))))));
SELECT MIN(v0.c2) FROM v0 WHERE (CAST((+ ('-2026919306')) AS TEXT));
SELECT ALL MIN(v0.c2) FROM v0 NOT INDEXED WHERE (((CAST((+ ('-2026919306')) AS TEXT))AND(v0.c3))) LIMIT 0;
SELECT ALL MIN(v0.c3) FROM vt2, vt0, v0 WHERE (v0.c2) ORDER BY ((((vt2.c1) IS FALSE)) NOTNULL) ASC;
SELECT DISTINCT MIN(v0.c3) FROM vt2, vt0, v0 WHERE (((v0.c2)AND(((((v0.c0) BETWEEN (v0.c1) AND (vt2.c0))) NOTNULL)))) ORDER BY ((((vt2.c1) IS FALSE)) NOTNULL) ASC;
SELECT * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))>>((vt2.c0 IN ())))) ORDER BY ((((((((((vt2.c1)GLOB(vt2.c1)))AND(CAST(vt2.c1 AS REAL))))OR('1782073417')))OR((+ (vt2.c0)))))OR(((vt2.c0) ISNULL)))  NULLS FIRST;
SELECT * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))>>((vt2.c0 IN ())))) ORDER BY (- (vt2.c0)) COLLATE NOCASE, CASE WHEN CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN x'' END THEN vt2.c0 COLLATE RTRIM WHEN (((vt2.c1))>((vt2.c1))) THEN (((vt2.c0, vt2.c1))=((NULL, vt2.c1))) WHEN ((vt2.c0)GLOB(vt2.c0)) THEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) WHEN vt2.c0 THEN x'' COLLATE RTRIM END, -7.69760503E8 ASC;
SELECT * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))>>((vt2.c0 IN ())))) ORDER BY ((((((((((vt2.c1)GLOB(vt2.c1)))AND(CAST(vt2.c1 AS REAL))))OR('1782073417')))OR((+ (vt2.c0)))))OR(((vt2.c0) ISNULL)))  NULLS FIRST;
SELECT * FROM vt2 WHERE (((CAST(vt2.c1 AS TEXT))>>((vt2.c0 IN ())))) ORDER BY (- (vt2.c0)) COLLATE NOCASE, CASE WHEN CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN x'' END THEN vt2.c0 COLLATE RTRIM WHEN (((vt2.c1))>((vt2.c1))) THEN (((vt2.c0, vt2.c1))=((NULL, vt2.c1))) WHEN ((vt2.c0)GLOB(vt2.c0)) THEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) WHEN vt2.c0 THEN x'' COLLATE RTRIM END, -7.69760503E8 ASC;
SELECT COUNT(*) FROM vt2 WHERE (CASE vt2.c1  WHEN (((vt2.c1))<=((vt2.c0))) THEN COALESCE(vt2.c0, vt2.c1, x'6a', vt2.c1, vt2.c1) END) ORDER BY json_insert(LIKE(vt2.c0, vt2.c0, 'n'), CAST(vt2.c0 AS REAL), ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)), x'18b842'), 'Ac_uK頞e' ASC  NULLS FIRST;
SELECT COUNT(*) FROM vt2 WHERE (CASE vt2.c1  WHEN (((vt2.c1))<=((vt2.c0))) THEN COALESCE(vt2.c0, vt2.c1, x'6a', vt2.c1, vt2.c1) END) ORDER BY json_insert(LIKE(vt2.c0, vt2.c0, 'n'), CAST(vt2.c0 AS REAL), ((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)), x'18b842'), 'Ac_uK頞e' ASC  NULLS FIRST LIMIT 3;
SELECT MAX(v0.c1) FROM v0, vt0, vt2 WHERE (((CAST(v0.c2 AS TEXT))<>(((0.4130861331149648) NOT NULL)))) ORDER BY ((v0.c0) NOTNULL) COLLATE RTRIM ASC  NULLS LAST, (((v0.c2, vt2.c0, v0.c2)) NOT BETWEEN ((CAST(vt2.c1 AS REAL), LIKELY(DISTINCT v0.c3), CASE WHEN v0.c2 THEN vt0.c0 ELSE v0.c1 END)) AND (((- (vt0.c0)), ((((vt2.c1)OR(v0.c0)))OR(0.4456681252402477)), v0.c2 COLLATE RTRIM))) DESC, json_remove((v0.c2 IN (vt0.c0)), ((vt0.c0) BETWEEN (v0.c0) AND (v0.c3))) DESC  NULLS FIRST;
SELECT DISTINCT MAX(v0.c1) FROM v0, vt0, vt2 WHERE (((CAST(v0.c2 AS TEXT))!=(((0.4130861331149648) NOT NULL)))) ORDER BY ((v0.c0) NOTNULL) COLLATE RTRIM ASC  NULLS LAST, (((v0.c2, vt2.c0, v0.c2)) NOT BETWEEN ((CAST(vt2.c1 AS REAL), LIKELY(DISTINCT v0.c3), CASE WHEN v0.c2 THEN vt0.c0 ELSE v0.c1 END)) AND (((- (vt0.c0)), ((((vt2.c1)OR(v0.c0)))OR(0.4456681252402477)), v0.c2 COLLATE RTRIM))) DESC, json_remove((v0.c2 IN (vt0.c0)), ((vt0.c0) BETWEEN (v0.c0) AND (v0.c3))) DESC  NULLS FIRST INTERSECT SELECT DISTINCT MAX(v0.c1) FROM v0, vt0, vt2 WHERE ((~ ((~ (vt0.c0))))) ORDER BY ((v0.c0) NOTNULL) COLLATE RTRIM ASC  NULLS LAST, (((v0.c2, vt2.c0, v0.c2)) NOT BETWEEN ((CAST(vt2.c1 AS REAL), LIKELY(DISTINCT v0.c3), CASE WHEN v0.c2 THEN vt0.c0 ELSE v0.c1 END)) AND (((- (vt0.c0)), ((((vt2.c1)OR(v0.c0)))OR(0.4456681252402477)), v0.c2 COLLATE RTRIM))) DESC, json_remove((v0.c2 IN (vt0.c0)), ((vt0.c0) BETWEEN (v0.c0) AND (v0.c3))) DESC  NULLS FIRST;
SELECT ALL * FROM v0, vt2 WHERE ((('5q[]~Q')>>(((v0.c3)GLOB(vt2.c0)))));
SELECT ALL * FROM v0, vt2 WHERE ((((('5q[]~Q')>>(((v0.c3)GLOB(vt2.c0)))))AND(GLOB(((vt2.c1)<<(vt2.c1)), CAST(v0.c3 AS TEXT))))) LIMIT 2;
SELECT ALL * FROM v0, vt2 WHERE ((('5q[]~Q')>>(((v0.c3)GLOB(vt2.c0)))));
SELECT ALL * FROM v0, vt2 WHERE ((((('5q[]~Q')>>(((v0.c3)GLOB(vt2.c0)))))AND(GLOB(((vt2.c1)<<(vt2.c1)), CAST(v0.c3 AS TEXT))))) LIMIT 2;
SELECT ALL * FROM vt2 WHERE ('-1346194363') ORDER BY ((3.3514151E7)<<(CAST(vt2.c0 AS TEXT))) DESC  NULLS FIRST, CAST(((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)))OR(x'')))AND(vt2.c0)) AS NUMERIC) ASC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ('-1346194363') ORDER BY ((3.3514151E7)<<(CAST(vt2.c0 AS TEXT))) DESC  NULLS FIRST, CAST(((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)))OR(x'')))AND(vt2.c0)) AS NUMERIC) ASC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ('-1346194363') ORDER BY ((3.3514151E7)<<(CAST(vt2.c0 AS TEXT))) DESC  NULLS FIRST, CAST(((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)))OR(x'')))AND(vt2.c0)) AS NUMERIC) ASC  NULLS LAST;
SELECT ALL * FROM vt2 WHERE ('-1346194363') ORDER BY ((3.3514151E7)<<(CAST(vt2.c0 AS TEXT))) DESC  NULLS FIRST, CAST(((((((((((vt2.c0)AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c1)))OR(x'')))AND(vt2.c0)) AS NUMERIC) ASC  NULLS LAST;
SELECT ALL * FROM vt0, vt2 WHERE (((vt2.c1)/(vt2.c0)) COLLATE BINARY) ORDER BY ((((((vt0.c0)OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)) COLLATE BINARY DESC  NULLS FIRST, CAST(CAST(vt2.c0 AS TEXT) AS REAL) DESC, ((((((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)))OR((((vt2.c1, vt2.c1, vt0.c0, vt2.c1, x'c2', vt2.c1)) BETWEEN ((vt0.c0, -1.68283889E8, vt2.c1, vt0.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0, vt2.c0, vt2.c0, vt2.c0))))))AND('' COLLATE NOCASE)))AND((vt2.c1 IN ()))) DESC  NULLS LAST, ((((vt2.c1) NOT BETWEEN (vt0.c0) AND (x'12'))) IS FALSE) DESC  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE (((((vt2.c1)/(vt2.c0)) COLLATE BINARY)AND((~ (NULL))))) ORDER BY 'd', vt0.c0 LIMIT 0X1 INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ((CAST(vt2.c0 AS NUMERIC) IN (((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1))))) ORDER BY 'd', vt0.c0 LIMIT 0x1;
SELECT ALL * FROM vt0, vt2 WHERE (((vt2.c1)/(vt2.c0)) COLLATE BINARY) ORDER BY ((((((vt0.c0)OR(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)) COLLATE BINARY DESC  NULLS FIRST, CAST(CAST(vt2.c0 AS TEXT) AS REAL) DESC, ((((((((((((vt2.c0)OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)))OR((((vt2.c1, vt2.c1, vt0.c0, vt2.c1, x'c2', vt2.c1)) BETWEEN ((vt0.c0, -1.68283889E8, vt2.c1, vt0.c0, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c0, vt2.c0, vt2.c0, vt2.c0))))))AND('' COLLATE NOCASE)))AND((vt2.c1 IN ()))) DESC  NULLS LAST, ((((vt2.c1) NOT BETWEEN (vt0.c0) AND (x'12'))) IS FALSE) DESC  NULLS FIRST;
SELECT MAX(v0.c2) FROM v0 WHERE (((v0.c2 COLLATE RTRIM)OR(v0.c2))) ORDER BY ((~ (v0.c3)) IN ()), UNLIKELY(DISTINCT CASE v0.c0  WHEN v0.c3 THEN v0.c2 WHEN v0.c3 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c0 END), CASE ((v0.c0)<<(v0.c3))  WHEN ((((v0.c2)AND('C}
q.Jt2')))OR(v0.c2)) THEN ((v0.c3)>(0.9063051828652547)) WHEN (v0.c2 IN ()) THEN ((v0.c2) IS TRUE) WHEN ((v0.c0)%(v0.c3)) THEN ((v0.c0)<=(v0.c3)) END;
SELECT MAX(v0.c2) FROM v0 WHERE (((((v0.c2 COLLATE RTRIM)OR(v0.c2)))AND(HEX(TRIM(v0.c2))))) ORDER BY ((v0.c3)LIKE(v0.c1)) DESC, CASE (((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c3)))  WHEN ((v0.c2)||(v0.c0)) THEN x'6b' WHEN CAST(v0.c1 AS TEXT) THEN CAST(v0.c2 AS REAL) END DESC  NULLS LAST LIMIT 0x0;
SELECT MIN(v0.c0) FROM vt0 NOT INDEXED, v0 LEFT OUTER JOIN vt2 ON ((NULLIF(v0.c1, vt2.c0))/(vt0.c0)) WHERE (((((('-1478372600', vt0.c0, vt2.c1, vt0.c0, vt2.c1))<>((vt2.c1, v0.c3, v0.c0, v0.c1, v0.c3))))<((((vt0.c0, vt2.c1, v0.c2, vt0.c0))==((vt0.c0, v0.c2, vt2.c1, v0.c3))))));
SELECT ALL MIN(v0.c0) FROM vt0, v0 LEFT OUTER JOIN vt2 ON ((NULLIF(v0.c1, vt2.c0))/(vt0.c0)) WHERE (((((((('-1478372600', vt0.c0, vt2.c1, vt0.c0, vt2.c1))<>((vt2.c1, v0.c3, v0.c0, v0.c1, v0.c3))))<((((vt0.c0, vt2.c1, v0.c2, vt0.c0))=((vt0.c0, v0.c2, vt2.c1, v0.c3))))))AND(NULL))) ORDER BY 0.2999691873083915 LIMIT 0x1 INTERSECT SELECT MIN(v0.c0) FROM vt0, v0 LEFT OUTER JOIN vt2 ON ((NULLIF(v0.c1, vt2.c0))/(vt0.c0)) WHERE (((((0.9562367823035323)AND(vt2.c1)))OR(vt0.c0)) COLLATE BINARY) ORDER BY 0.2999691873083915 LIMIT 1;
SELECT ALL COUNT(*) FROM v0 CROSS JOIN vt0 ON ((CASE vt0.c0  WHEN v0.c0 THEN v0.c2 END)-(0.765400562254609)) WHERE (((v0.c3)/(v0.c2)));
SELECT ALL COUNT(*) FROM v0 CROSS JOIN vt0 ON ((CASE vt0.c0  WHEN v0.c0 THEN v0.c2 END)-(0.765400562254609)) WHERE (((v0.c3)/(v0.c2))) INTERSECT SELECT COUNT(*) FROM v0 CROSS JOIN vt0 ON ((CASE vt0.c0  WHEN v0.c0 THEN v0.c2 END)-(0.765400562254609)) WHERE (((v0.c1) BETWEEN (v0.c1) AND (v0.c2)) COLLATE NOCASE);
SELECT ALL * FROM vt2, v0, vt0 WHERE ((((v0.c0) IS TRUE) IN ()));
SELECT * FROM vt2, v0 NOT INDEXED, vt0 WHERE ((((((v0.c0) IS TRUE) IN ()))AND(vt2.c1))) LIMIT 0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (CAST(CASE v0.c2  WHEN vt0.c0 THEN v0.c3 END AS NUMERIC)) LIMIT 0;
SELECT ALL * FROM vt2, v0, vt0 WHERE ((((v0.c0) IS TRUE) IN ()));
SELECT * FROM vt2, v0 NOT INDEXED, vt0 WHERE ((((((v0.c0) IS TRUE) IN ()))AND(vt2.c1))) LIMIT 0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (CAST(CASE v0.c2  WHEN vt0.c0 THEN v0.c3 END AS NUMERIC)) LIMIT 0;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c1 COLLATE NOCASE)OR((vt2.c1 IN ('Bclㄏpf')))))OR(vt2.c1))) ORDER BY ((vt2.c0 COLLATE NOCASE)>(((vt0.c0)<<(vt2.c1)))), CASE ((vt2.c0)*(vt2.c1))  WHEN vt0.c0 THEN (- (vt0.c0)) ELSE (vt2.c0 IN ()) END DESC  NULLS FIRST;
SELECT * FROM vt2, vt0 NOT INDEXED WHERE (((((((vt2.c1 COLLATE NOCASE)OR((vt2.c1 IN ('Bclㄏpf')))))OR(vt2.c1)))AND(CASE json_remove(x'f2', vt2.c1, vt0.c0)  WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c1)<=(vt0.c0)) ELSE json_object(x'', vt2.c0, vt2.c0) END))) ORDER BY ((vt2.c0 COLLATE NOCASE)>(((vt0.c0)<<(vt2.c1)))), CASE ((vt2.c0)*(vt2.c1))  WHEN vt0.c0 THEN (- (vt0.c0)) ELSE (vt2.c0 IN ()) END DESC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT * FROM vt2, vt0 WHERE (CASE ((vt2.c0) IS FALSE)  WHEN CASE vt2.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END THEN ((vt2.c1)GLOB(vt0.c0)) WHEN CASE 0.018970226506161314  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END THEN vt2.c1 COLLATE BINARY WHEN CAST(vt2.c0 AS INTEGER) THEN CAST(0.3112234667060483 AS INTEGER) END) ORDER BY ((vt2.c0 COLLATE NOCASE)>(((vt0.c0)<<(vt2.c1)))), CASE ((vt2.c0)*(vt2.c1))  WHEN vt0.c0 THEN (- (vt0.c0)) ELSE (vt2.c0 IN ()) END DESC  NULLS FIRST LIMIT 1;
SELECT * FROM vt2, vt0 WHERE (((((vt2.c1 COLLATE NOCASE)OR((vt2.c1 IN ('Bclㄏpf')))))OR(vt2.c1))) ORDER BY ((vt2.c0 COLLATE NOCASE)>(((vt0.c0)<<(vt2.c1)))), CASE ((vt2.c0)*(vt2.c1))  WHEN vt0.c0 THEN (- (vt0.c0)) ELSE (vt2.c0 IN ()) END DESC  NULLS FIRST;
SELECT * FROM vt2, vt0 NOT INDEXED WHERE (((((((vt2.c1 COLLATE NOCASE)OR((vt2.c1 IN ('Bclㄏpf')))))OR(vt2.c1)))AND(CASE json_remove(x'f2', vt2.c1, vt0.c0)  WHEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) THEN ((vt2.c1)<=(vt0.c0)) ELSE json_object(x'', vt2.c0, vt2.c0) END))) ORDER BY ((vt2.c0 COLLATE NOCASE)>(((vt0.c0)<<(vt2.c1)))), CASE ((vt2.c0)*(vt2.c1))  WHEN vt0.c0 THEN (- (vt0.c0)) ELSE (vt2.c0 IN ()) END DESC  NULLS FIRST LIMIT 0X1 INTERSECT SELECT * FROM vt2, vt0 WHERE (CASE ((vt2.c0) IS FALSE)  WHEN CASE vt2.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt2.c0 END THEN ((vt2.c1)GLOB(vt0.c0)) WHEN CASE 0.018970226506161314  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END THEN vt2.c1 COLLATE BINARY WHEN CAST(vt2.c0 AS INTEGER) THEN CAST(0.3112234667060483 AS INTEGER) END) ORDER BY ((vt2.c0 COLLATE NOCASE)>(((vt0.c0)<<(vt2.c1)))), CASE ((vt2.c0)*(vt2.c1))  WHEN vt0.c0 THEN (- (vt0.c0)) ELSE (vt2.c0 IN ()) END DESC  NULLS FIRST LIMIT 1;
SELECT ALL COUNT(*) FROM vt0 WHERE ((((NULL))>((vt0.c0)))) ORDER BY (((+ (vt0.c0)))AND(CASE WHEN vt0.c0 THEN vt0.c0 END)) ASC  NULLS FIRST, ((vt0.c0) NOT NULL);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((((((NULL))>((vt0.c0))))AND(CASE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0))  WHEN ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)) THEN CAST(vt0.c0 AS BLOB) WHEN vt0.c0 COLLATE RTRIM THEN ((vt0.c0)>(vt0.c0)) ELSE CAST(0.25178876432942987 AS TEXT) END))) ORDER BY ((COALESCE(DISTINCT vt0.c0, vt0.c0, vt0.c0)) IS FALSE)  NULLS FIRST INTERSECT SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((CAST(vt0.c0 AS TEXT))>=(vt0.c0 COLLATE NOCASE))) ORDER BY ((COALESCE(DISTINCT vt0.c0, vt0.c0, vt0.c0)) IS FALSE)  NULLS FIRST;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(vt0.c0 AS BLOB))LIKE(HEX(DISTINCT v0.c0)))) ORDER BY ((CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN x'f0' ELSE v0.c2 END) NOT BETWEEN ('&XZ+)') AND (CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)) ASC;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(vt0.c0 AS BLOB))LIKE(HEX(DISTINCT v0.c0)))) ORDER BY ((CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN x'f0' ELSE v0.c2 END) NOT BETWEEN ('&XZ+)') AND (CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)) ASC INTERSECT SELECT * FROM vt0, v0 WHERE (((((vt0.c0)IS(v0.c2)))%(CAST(v0.c2 AS REAL)))) ORDER BY ((CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN x'f0' ELSE v0.c2 END) NOT BETWEEN ('&XZ+)') AND (CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)) ASC;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(vt0.c0 AS BLOB))LIKE(HEX(DISTINCT v0.c0)))) ORDER BY ((CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN x'f0' ELSE v0.c2 END) NOT BETWEEN ('&XZ+)') AND (CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)) ASC;
SELECT ALL * FROM vt0, v0 WHERE (((CAST(vt0.c0 AS BLOB))LIKE(HEX(DISTINCT v0.c0)))) ORDER BY ((CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN x'f0' ELSE v0.c2 END) NOT BETWEEN ('&XZ+)') AND (CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)) ASC INTERSECT SELECT * FROM vt0, v0 WHERE (((((vt0.c0)IS(v0.c2)))%(CAST(v0.c2 AS REAL)))) ORDER BY ((CASE v0.c0  WHEN v0.c0 THEN v0.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN x'f0' ELSE v0.c2 END) NOT BETWEEN ('&XZ+)') AND (CASE WHEN v0.c3 THEN v0.c0 WHEN v0.c0 THEN v0.c2 END)) ASC;
SELECT COUNT(*) FROM vt0 WHERE (UPPER(vt0.c0) COLLATE NOCASE);
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((UPPER(vt0.c0) COLLATE NOCASE)AND(((((((vt0.c0) NOTNULL))OR((vt0.c0 IN ()))))OR(x'8c1ef1'))))) ORDER BY (((vt0.c0 IN ()))+((~ (vt0.c0)))) DESC  NULLS FIRST, ((((vt0.c0) NOT NULL))<<(((vt0.c0) NOT BETWEEN (vt0.c0) AND ('O抧&I'))))  NULLS FIRST LIMIT 0X3;
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE ((((((vt2.c1, -447724484))<=((vt2.c0, vt2.c0)))) NOT BETWEEN (((vt2.c0) NOT NULL)) AND ((+ (vt2.c1))))) ORDER BY (((vt2.c0 IN (vt2.c1, vt2.c0))) IS TRUE) DESC  NULLS LAST;
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE ((((((vt2.c1, -447724484))<=((vt2.c0, vt2.c0)))) NOT BETWEEN (((vt2.c0) NOT NULL)) AND ((+ (vt2.c1))))) ORDER BY (((vt2.c0 IN (vt2.c1, vt2.c0))) IS TRUE) DESC  NULLS LAST LIMIT 0X1 INTERSECT SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (((((((vt2.c1)AND(vt2.c0)))AND(vt2.c1))) IS FALSE)) ORDER BY (((vt2.c0 IN (vt2.c1, vt2.c0))) IS TRUE) DESC  NULLS LAST LIMIT 0X1;
SELECT * FROM v0, vt2, vt0 WHERE (vt2.c0);
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (vt2.c0) ORDER BY ((v0.c3 COLLATE NOCASE) IS FALSE) DESC, (((((v0.c3)AND(vt0.c0)))AND(v0.c3)) IN ((('873046267')-(v0.c1))));
SELECT * FROM v0, vt2, vt0 WHERE (vt2.c0);
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (vt2.c0) ORDER BY ((v0.c3 COLLATE NOCASE) IS FALSE) DESC, (((((v0.c3)AND(vt0.c0)))AND(v0.c3)) IN ((('873046267')-(v0.c1))));
SELECT ALL COUNT(*) FROM vt2 WHERE ((((vt2.c0, vt2.c0)) BETWEEN ((NULLIF(DISTINCT vt2.c1, vt2.c0), CASE WHEN x'53' THEN vt2.c1 ELSE vt2.c0 END)) AND (((vt2.c1 IN ()), ((vt2.c0) BETWEEN ('0.46848189259721085') AND (vt2.c0)))))) ORDER BY ((((((((vt2.c0)AND(vt2.c1)))AND(vt2.c1)))AND(vt2.c1))) IS FALSE) DESC, NULL DESC;
SELECT ALL COUNT(*) FROM vt2 WHERE ((((vt2.c0, vt2.c0)) BETWEEN ((NULLIF(DISTINCT vt2.c1, vt2.c0), CASE WHEN x'53' THEN vt2.c1 ELSE vt2.c0 END)) AND (((vt2.c1 IN ()), ((vt2.c0) BETWEEN ('0.46848189259721085') AND (vt2.c0)))))) ORDER BY (NOT (((x'ac') NOT BETWEEN (vt2.c1) AND (vt2.c1))))  NULLS LAST, 'g盫' DESC;
SELECT ALL * FROM vt2 WHERE (((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END) BETWEEN (vt2.c1) AND ((vt2.c1 IN ())))) ORDER BY vt2.c1  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END) BETWEEN (vt2.c1) AND ((vt2.c1 IN ()))))AND((NOT (CAST(vt2.c1 AS NUMERIC)))))) ORDER BY vt2.c1  NULLS FIRST INTERSECT SELECT * FROM vt2 WHERE (((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1))) ISNULL)) ORDER BY vt2.c1  NULLS FIRST;
SELECT ALL * FROM vt2 WHERE (((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END) BETWEEN (vt2.c1) AND ((vt2.c1 IN ())))) ORDER BY vt2.c1  NULLS FIRST;
SELECT * FROM vt2 WHERE (((((CASE vt2.c1  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c0 END) BETWEEN (vt2.c1) AND ((vt2.c1 IN ()))))AND((NOT (CAST(vt2.c1 AS NUMERIC)))))) ORDER BY vt2.c1  NULLS FIRST INTERSECT SELECT * FROM vt2 WHERE (((((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c1))) ISNULL)) ORDER BY vt2.c1  NULLS FIRST;
SELECT MIN(v0.c2) FROM v0, vt0 WHERE ((CAST(v0.c0 AS NUMERIC) IN (CAST(v0.c1 AS TEXT))));
SELECT DISTINCT MIN(v0.c2) FROM v0, vt0 WHERE ((CAST(v0.c0 AS NUMERIC) IN (CAST(v0.c1 AS TEXT)))) INTERSECT SELECT DISTINCT MIN(v0.c2) FROM v0, vt0 WHERE (((vt0.c0 COLLATE NOCASE)IS(CASE WHEN v0.c0 THEN NULL WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c2 END)));
SELECT MIN(vt2.c0) FROM vt2 WHERE ((((((((((NULL)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))OR(((vt2.c0) NOT NULL))))OR(vt2.c1 COLLATE RTRIM)))OR(LIKELIHOOD(DISTINCT vt2.c0, vt2.c0))));
SELECT DISTINCT MIN(vt2.c0) FROM vt2 WHERE ((((((((((((NULL)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))))OR(((vt2.c0) NOT NULL))))OR(vt2.c1 COLLATE RTRIM)))OR(LIKELIHOOD(DISTINCT vt2.c0, vt2.c0))))AND('' COLLATE BINARY))) ORDER BY CAST(CAST(vt2.c0 AS BLOB) AS INTEGER), ((((vt2.c0)AND(vt2.c1)))AND(vt2.c0)) COLLATE NOCASE  NULLS FIRST, ((CAST(vt2.c0 AS TEXT))<(((((((vt2.c0)OR(vt2.c1)))AND(vt2.c1)))OR(vt2.c1)))), ((CAST(vt2.c1 AS TEXT))=('8w~'));
SELECT MAX(vt2.c0) FROM vt2 WHERE (CAST((((((((('0.16217142275629903')AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)) AS INTEGER)) ORDER BY ((((((((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))AND((NOT (vt2.c0)))))AND(LIKELY(vt2.c1))))AND(vt2.c0 COLLATE RTRIM))  NULLS FIRST;
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (CAST((((((((('0.16217142275629903')AND(vt2.c0)))OR(vt2.c0)))AND(vt2.c1)))OR(vt2.c0)) AS INTEGER)) ORDER BY ((((((((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))AND((NOT (vt2.c0)))))AND(LIKELY(vt2.c1))))AND(vt2.c0 COLLATE RTRIM))  NULLS FIRST LIMIT 5 INTERSECT SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (NULLIF(((vt2.c1)*(vt2.c0)), ((vt2.c0)<>(vt2.c0)))) ORDER BY ((((((((((((((vt2.c1)AND(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))AND(vt2.c0)))AND((NOT (vt2.c0)))))AND(LIKELY(vt2.c1))))AND(vt2.c0 COLLATE RTRIM))  NULLS FIRST LIMIT 5;
SELECT ALL * FROM v0 INNER JOIN vt0 ON (((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c1)) IN (((((((v0.c3)OR(vt0.c0)))AND(v0.c2)))AND(v0.c3)), (v0.c0 IN ()))) WHERE ((NOT (v0.c0)) COLLATE BINARY);
SELECT ALL * FROM v0 INNER JOIN vt0 ON (((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c1)) IN (((((((v0.c3)OR(vt0.c0)))AND(v0.c2)))AND(v0.c3)), (v0.c0 IN ()))) WHERE ((((NOT (v0.c0)) COLLATE BINARY)AND(CASE WHEN '-2011832699' THEN ((((((((v0.c2)OR(v0.c3)))AND(0.9273425989756995)))OR(vt0.c0)))AND(v0.c1)) WHEN v0.c0 COLLATE BINARY THEN v0.c2 ELSE CAST(v0.c2 AS BLOB) END))) INTERSECT SELECT ALL * FROM v0 INNER JOIN vt0 ON (((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c1)) IN (((((((v0.c3)OR(vt0.c0)))AND(v0.c2)))AND(v0.c3)), (v0.c0 IN ()))) WHERE (((((v0.c1) BETWEEN (v0.c1) AND ('c^')))AND(((((v0.c3)OR(v0.c2)))AND(v0.c2)))));
SELECT ALL * FROM v0 INNER JOIN vt0 ON (((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c1)) IN (((((((v0.c3)OR(vt0.c0)))AND(v0.c2)))AND(v0.c3)), (v0.c0 IN ()))) WHERE ((NOT (v0.c0)) COLLATE BINARY);
SELECT ALL * FROM v0 INNER JOIN vt0 ON (((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c1)) IN (((((((v0.c3)OR(vt0.c0)))AND(v0.c2)))AND(v0.c3)), (v0.c0 IN ()))) WHERE ((((NOT (v0.c0)) COLLATE BINARY)AND(CASE WHEN '-2011832699' THEN ((((((((v0.c2)OR(v0.c3)))AND(0.9273425989756995)))OR(vt0.c0)))AND(v0.c1)) WHEN v0.c0 COLLATE BINARY THEN v0.c2 ELSE CAST(v0.c2 AS BLOB) END))) INTERSECT SELECT ALL * FROM v0 INNER JOIN vt0 ON (((((((((v0.c0)AND(vt0.c0)))AND(v0.c2)))AND(vt0.c0)))AND(v0.c1)) IN (((((((v0.c3)OR(vt0.c0)))AND(v0.c2)))AND(v0.c3)), (v0.c0 IN ()))) WHERE (((((v0.c1) BETWEEN (v0.c1) AND ('c^')))AND(((((v0.c3)OR(v0.c2)))AND(v0.c2)))));
SELECT ALL * FROM vt0 WHERE (((((((vt0.c0)OR(vt0.c0)))OR(x''))) NOT BETWEEN (0.2578101913040284) AND (((vt0.c0)OR(vt0.c0))))) ORDER BY (+ (vt0.c0))  NULLS FIRST, (~ ((vt0.c0 IN ()))), CAST(((vt0.c0)*(vt0.c0)) AS TEXT)  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)OR(vt0.c0)))OR(x''))) NOT BETWEEN (0.2578101913040284) AND (((vt0.c0)OR(vt0.c0))))) ORDER BY MIN(((((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)), ((vt0.c0)||(vt0.c0)), ((vt0.c0)*(0.31399808394511186)), ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), (((vt0.c0, vt0.c0, vt0.c0))>=((vt0.c0, vt0.c0, vt0.c0))), CAST(vt0.c0 AS INTEGER)) ASC  NULLS FIRST, (((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))GLOB(NULL))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0 WHERE (((((((vt0.c0)OR(vt0.c0)))OR(x''))) NOT BETWEEN (0.2578101913040284) AND (((vt0.c0)OR(vt0.c0))))) ORDER BY (+ (vt0.c0))  NULLS FIRST, (~ ((vt0.c0 IN ()))), CAST(((vt0.c0)*(vt0.c0)) AS TEXT)  NULLS LAST;
SELECT DISTINCT * FROM vt0 WHERE (((((((vt0.c0)OR(vt0.c0)))OR(x''))) NOT BETWEEN (0.2578101913040284) AND (((vt0.c0)OR(vt0.c0))))) ORDER BY MIN(((((((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c0)))OR(vt0.c0)), ((vt0.c0)||(vt0.c0)), ((vt0.c0)*(0.31399808394511186)), ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)), (((vt0.c0, vt0.c0, vt0.c0))>=((vt0.c0, vt0.c0, vt0.c0))), CAST(vt0.c0 AS INTEGER)) ASC  NULLS FIRST, (((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt0.c0))))GLOB(NULL))  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt2 WHERE ((- ((((vt2.c1, vt2.c1, vt2.c0))!=((vt2.c1, '8i뼃', vt2.c0)))))) ORDER BY LOWER(DISTINCT NULL) ASC, CASE ((vt2.c1) ISNULL)  WHEN TRIM(DISTINCT vt2.c1) THEN (+ (vt2.c1)) ELSE ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c1)) END ASC;
SELECT DISTINCT * FROM vt2 WHERE ((- ((((vt2.c1, vt2.c1, vt2.c0))!=((vt2.c1, '8i뼃', vt2.c0)))))) ORDER BY LOWER(DISTINCT NULL) ASC, CASE ((vt2.c1) ISNULL)  WHEN TRIM(DISTINCT vt2.c1) THEN (+ (vt2.c1)) ELSE ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c1)) END ASC LIMIT 0x0;
SELECT ALL * FROM vt2 WHERE ((- ((((vt2.c1, vt2.c1, vt2.c0))!=((vt2.c1, '8i뼃', vt2.c0)))))) ORDER BY LOWER(DISTINCT NULL) ASC, CASE ((vt2.c1) ISNULL)  WHEN TRIM(DISTINCT vt2.c1) THEN (+ (vt2.c1)) ELSE ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c1)) END ASC;
SELECT DISTINCT * FROM vt2 WHERE ((- ((((vt2.c1, vt2.c1, vt2.c0))!=((vt2.c1, '8i뼃', vt2.c0)))))) ORDER BY LOWER(DISTINCT NULL) ASC, CASE ((vt2.c1) ISNULL)  WHEN TRIM(DISTINCT vt2.c1) THEN (+ (vt2.c1)) ELSE ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c1)) END ASC LIMIT 0x0;
SELECT ALL MAX(vt0.c0) FROM vt2, v0, vt0 WHERE (((v0.c2)>>((vt2.c0 IN (vt0.c0))))) ORDER BY TYPEOF(CASE WHEN vt2.c1 THEN v0.c0 WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN vt2.c0 WHEN vt0.c0 THEN 470435357 END) DESC  NULLS FIRST, (((v0.c0 COLLATE NOCASE))==(((((((('-1559314750')OR(v0.c2)))OR(v0.c0)))AND(vt0.c0)))))  NULLS LAST;
SELECT DISTINCT MAX(vt0.c0) FROM vt2, v0, vt0 WHERE (((((v0.c2)>>((vt2.c0 IN (vt0.c0)))))AND((((- (NULL)))GLOB(LENGTH(vt0.c0)))))) ORDER BY (((v0.c3 IN (v0.c1, vt2.c1)))<=(x'3c'))  NULLS FIRST, CAST(((vt2.c1) NOT NULL) AS REAL), (((v0.c1)) BETWEEN ((((v0.c1)IS(vt0.c0)))) AND ((CAST(v0.c1 AS INTEGER)))) DESC  NULLS LAST;
SELECT * FROM vt2 WHERE ('^rq' COLLATE BINARY) ORDER BY ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))) IS TRUE)  NULLS LAST, (((vt2.c1)-(vt2.c0)) IN (vt2.c1, ((vt2.c1)-(NULL)))) ASC;
SELECT DISTINCT * FROM vt2 WHERE ('^rq' COLLATE BINARY) ORDER BY ((CAST(vt2.c0 AS REAL))|(((0.4311777796941849)||(vt2.c1)))) DESC  NULLS FIRST, (- (((vt2.c1)*(-5.74332796E8)))) ASC LIMIT 0X2;
SELECT * FROM vt2 WHERE ('^rq' COLLATE BINARY) ORDER BY ((((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))) IS TRUE)  NULLS LAST, (((vt2.c1)-(vt2.c0)) IN (vt2.c1, ((vt2.c1)-(NULL)))) ASC;
SELECT DISTINCT * FROM vt2 WHERE ('^rq' COLLATE BINARY) ORDER BY ((CAST(vt2.c0 AS REAL))|(((0.4311777796941849)||(vt2.c1)))) DESC  NULLS FIRST, (- (((vt2.c1)*(-5.74332796E8)))) ASC LIMIT 0X2;
SELECT * FROM v0, vt0 WHERE (((CAST(v0.c3 AS NUMERIC))IS NOT(v0.c2 COLLATE BINARY)));
SELECT * FROM v0, vt0 WHERE (((((CAST(v0.c3 AS NUMERIC))IS NOT(v0.c2 COLLATE BINARY)))AND(NULL))) LIMIT 1;
SELECT * FROM v0, vt0 WHERE (((CAST(v0.c3 AS NUMERIC))IS NOT(v0.c2 COLLATE BINARY)));
SELECT * FROM v0, vt0 WHERE (((((CAST(v0.c3 AS NUMERIC))IS NOT(v0.c2 COLLATE BINARY)))AND(NULL))) LIMIT 1;
SELECT * FROM vt0, v0, vt2 WHERE (CASE WHEN CASE vt2.c1  WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c0 END THEN CAST(NULL AS TEXT) WHEN CAST(vt0.c0 AS TEXT) THEN v0.c2 WHEN TYPEOF(vt2.c1) THEN ((vt2.c1)*(vt2.c1)) END);
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (CASE WHEN CASE vt2.c1  WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c0 END THEN CAST(NULL AS TEXT) WHEN CAST(vt0.c0 AS TEXT) THEN v0.c2 WHEN TYPEOF(vt2.c1) THEN ((vt2.c1)*(vt2.c1)) END) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((v0.c2)||(v0.c1)) IN (vt0.c0 COLLATE NOCASE, ((v0.c3) NOT BETWEEN (v0.c2) AND (vt2.c1))))) LIMIT 0X1;
SELECT * FROM vt0, v0, vt2 WHERE (CASE WHEN CASE vt2.c1  WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c0 END THEN CAST(NULL AS TEXT) WHEN CAST(vt0.c0 AS TEXT) THEN v0.c2 WHEN TYPEOF(vt2.c1) THEN ((vt2.c1)*(vt2.c1)) END);
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (CASE WHEN CASE vt2.c1  WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN v0.c0 THEN v0.c0 END THEN CAST(NULL AS TEXT) WHEN CAST(vt0.c0 AS TEXT) THEN v0.c2 WHEN TYPEOF(vt2.c1) THEN ((vt2.c1)*(vt2.c1)) END) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((v0.c2)||(v0.c1)) IN (vt0.c0 COLLATE NOCASE, ((v0.c3) NOT BETWEEN (v0.c2) AND (vt2.c1))))) LIMIT 0X1;
SELECT ALL MAX(v0.c1) FROM vt0, v0, vt2 WHERE ((~ (CASE WHEN vt2.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 ELSE v0.c1 END))) ORDER BY vt0.c0 ASC, (~ (((vt0.c0) IS TRUE))) ASC  NULLS FIRST, TOTAL_CHANGES() ASC;
SELECT ALL MAX(v0.c1) FROM vt0, v0, vt2 WHERE ((((~ (CASE WHEN vt2.c0 THEN vt0.c0 WHEN v0.c2 THEN v0.c3 WHEN v0.c3 THEN vt2.c1 ELSE v0.c1 END)))AND((+ (((v0.c3) NOT NULL)))))) ORDER BY vt0.c0 ASC  NULLS FIRST, (ABS(v0.c2) IN ((+ (v0.c0)), v0.c2)) LIMIT 3 INTERSECT SELECT ALL MAX(v0.c1) FROM vt0, v0, vt2 WHERE (((((v0.c1)<<(0.5446931170757159))) BETWEEN (CAST(0.6566838058279596 AS BLOB)) AND (((vt0.c0) IS FALSE)))) ORDER BY vt0.c0 ASC  NULLS FIRST, (ABS(v0.c2) IN ((+ (v0.c0)), v0.c2)) LIMIT 3;
SELECT ALL * FROM vt0, vt2 WHERE (((- (0Xffffffffa9e192c0)) IN (((vt2.c0)<<(vt2.c0)))));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((- (-1444834624)) IN (((vt2.c0)<<(vt2.c0)))))AND(CASE WHEN ((vt2.c1)||(vt0.c0)) THEN '*U' WHEN json_array(vt2.c1, vt2.c0) THEN (NOT (vt2.c0)) END))) LIMIT 3;
SELECT ALL * FROM vt0, vt2 WHERE (((- (0Xffffffffa9e192c0)) IN (((vt2.c0)<<(vt2.c0)))));
SELECT DISTINCT * FROM vt0, vt2 WHERE (((((- (-1444834624)) IN (((vt2.c0)<<(vt2.c0)))))AND(CASE WHEN ((vt2.c1)||(vt0.c0)) THEN '*U' WHEN json_array(vt2.c1, vt2.c0) THEN (NOT (vt2.c0)) END))) LIMIT 3;
SELECT ALL MAX(vt2.c1) FROM v0 NATURAL JOIN vt2 WHERE (((CASE WHEN v0.c3 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN 'L' END)*(1.7976931348623157E308)));
SELECT ALL MAX(vt2.c1) FROM v0 NATURAL JOIN vt2 WHERE (((((CASE WHEN v0.c3 THEN vt2.c0 WHEN vt2.c1 THEN v0.c3 WHEN v0.c3 THEN 'L' END)*(1.7976931348623157E308)))AND((((v0.c3, vt2.c0)) BETWEEN (((('-1872550819') IS TRUE), ((v0.c0)>(v0.c0)))) AND ((CAST(v0.c3 AS REAL), (((v0.c1, v0.c0)) BETWEEN ((v0.c1, v0.c1)) AND ((v0.c3, vt2.c1)))))))));
SELECT MAX(v0.c2) FROM v0 NATURAL JOIN vt2 LEFT OUTER JOIN vt0 ON LIKE(0.7297008883523822, CASE WHEN v0.c2 THEN x'09' END) WHERE (CAST(CAST(v0.c1 AS NUMERIC) AS TEXT)) ORDER BY ((((v0.c0)+(v0.c1)))OR(IFNULL(DISTINCT vt2.c0, v0.c1))), '-388835817' DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c2) FROM v0 NATURAL JOIN vt2 INNER JOIN vt0 ON LIKE(0.7297008883523822, CASE WHEN v0.c2 THEN x'09' END) WHERE (CAST(CAST(v0.c1 AS NUMERIC) AS TEXT)) ORDER BY ((((v0.c0)+(v0.c1)))OR(IFNULL(DISTINCT vt2.c0, v0.c1))), '-388835817' DESC  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE (((((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)))OR((v0.c1 IN (v0.c1)))))OR(CAST(v0.c2 AS TEXT)))) ORDER BY (((CASE WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN NULL THEN v0.c1 END, CAST(v0.c3 AS TEXT), CAST(v0.c0 AS TEXT), ((v0.c2) BETWEEN (v0.c1) AND (v0.c2))))>(((v0.c0 IN ()), (v0.c2 IN (v0.c2)), CASE v0.c0  WHEN v0.c2 THEN v0.c2 ELSE v0.c2 END, v0.c2 COLLATE NOCASE)))  NULLS FIRST, (((((v0.c1)<(v0.c0)), v0.c1 COLLATE BINARY))<=(((((v0.c0, v0.c3))=((v0.c1, v0.c1))), ((v0.c2) NOT BETWEEN (v0.c1) AND (v0.c2))))) ASC  NULLS FIRST, '-76904582';
SELECT ALL COUNT(*) FROM v0 WHERE (((((((((v0.c2) NOT BETWEEN (v0.c0) AND (v0.c0)))OR((v0.c1 IN (v0.c1)))))OR(CAST(v0.c2 AS TEXT))))AND(((((((v0.c3)OR(0.470909537825851)))AND(((v0.c1)>>(v0.c1)))))OR(v0.c3))))) ORDER BY v0.c2  NULLS FIRST INTERSECT SELECT COUNT(*) FROM v0 WHERE (CAST(v0.c1 AS REAL) COLLATE BINARY) ORDER BY v0.c2  NULLS FIRST;
SELECT * FROM vt0, v0, vt2 WHERE (((((((v0.c1)AND(v0.c2)))AND(vt2.c1)))OR(vt2.c0)) COLLATE BINARY COLLATE BINARY) ORDER BY ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (v0.c0))) IS FALSE) DESC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((((v0.c1)AND(v0.c2)))AND(vt2.c1)))OR(vt2.c0)) COLLATE BINARY COLLATE BINARY) ORDER BY ROUND(load_extension(v0.c3, vt0.c0), 0.8356693425333583) ASC LIMIT 4 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((v0.c3)AND(NULL))) BETWEEN (TRIM(v0.c2)) AND (CAST(vt2.c0 AS REAL)))) ORDER BY ROUND(load_extension(v0.c3, vt0.c0), 0.8356693425333583) ASC LIMIT 0x4;
SELECT * FROM vt0, v0, vt2 WHERE (((((((v0.c1)AND(v0.c2)))AND(vt2.c1)))OR(vt2.c0)) COLLATE BINARY COLLATE BINARY) ORDER BY ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (v0.c0))) IS FALSE) DESC;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((((v0.c1)AND(v0.c2)))AND(vt2.c1)))OR(vt2.c0)) COLLATE BINARY COLLATE BINARY) ORDER BY ROUND(load_extension(v0.c3, vt0.c0), 0.8356693425333583) ASC LIMIT 4 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((v0.c3)AND(NULL))) BETWEEN (TRIM(v0.c2)) AND (CAST(vt2.c0 AS REAL)))) ORDER BY ROUND(load_extension(v0.c3, vt0.c0), 0.8356693425333583) ASC LIMIT 0x4;
SELECT COUNT(*) FROM vt0 CROSS JOIN vt2 ON (((((((((((((vt0.c0, '')) NOT BETWEEN ((v0.c2, v0.c3)) AND ((v0.c0, vt0.c0))))OR(CASE v0.c3  WHEN '4m' THEN v0.c0 WHEN '1014823335' THEN '-1299224679' WHEN vt2.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END)))AND(CAST(vt2.c1 AS NUMERIC))))OR(CAST(NULL AS REAL))))AND((vt2.c0 IN (v0.c1)))))AND(v0.c2 COLLATE NOCASE)) LEFT OUTER JOIN v0 ON (((((vt0.c0)<=('+')), ((vt2.c1) ISNULL)))>=((NULL COLLATE NOCASE, (NOT (v0.c0))))) WHERE (((vt2.c1)&(((v0.c3) BETWEEN (v0.c2) AND (v0.c3))))) ORDER BY (((UPPER(DISTINCT vt0.c0), (((v0.c1, vt0.c0, v0.c1)) NOT BETWEEN ((x'', v0.c2, v0.c0)) AND ((v0.c0, vt0.c0, v0.c2))), ((v0.c1) BETWEEN (v0.c0) AND (vt0.c0)), (- (vt2.c1))))>=((x'a5eaf1ee8e', ((v0.c0) BETWEEN (v0.c3) AND (vt0.c0)), ((vt2.c0)&('4]\T')), ((v0.c3)|(vt2.c0))))) DESC  NULLS LAST, (((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN (('0.27599954684292793' COLLATE NOCASE, (v0.c0 IN (v0.c2, v0.c0, v0.c3)), (v0.c2 IN ('1742702845')))) AND ((((((((((vt0.c0)OR(vt0.c0)))OR(v0.c2)))AND(v0.c0)))OR(vt0.c0)), (((vt2.c0, v0.c2)) NOT BETWEEN ((vt2.c1, v0.c3)) AND ((vt2.c1, vt2.c0))), (~ (vt0.c0)))));
SELECT COUNT(*) FROM vt0 CROSS JOIN vt2 ON (((((((((((((vt0.c0, '')) NOT BETWEEN ((v0.c2, v0.c3)) AND ((v0.c0, vt0.c0))))OR(CASE v0.c3  WHEN '4m' THEN v0.c0 WHEN '1014823335' THEN '-1299224679' WHEN vt2.c0 THEN v0.c0 WHEN v0.c0 THEN v0.c0 END)))AND(CAST(vt2.c1 AS NUMERIC))))OR(CAST(NULL AS REAL))))AND((vt2.c0 IN (v0.c1)))))AND(v0.c2 COLLATE NOCASE)) INNER JOIN v0 ON (((((vt0.c0)<=('+')), ((vt2.c1) ISNULL)))>=((NULL COLLATE NOCASE, (NOT (v0.c0))))) WHERE (((vt2.c1)&(((v0.c3) BETWEEN (v0.c2) AND (v0.c3))))) ORDER BY (((UPPER(DISTINCT vt0.c0), (((v0.c1, vt0.c0, v0.c1)) NOT BETWEEN ((x'', v0.c2, v0.c0)) AND ((v0.c0, vt0.c0, v0.c2))), ((v0.c1) BETWEEN (v0.c0) AND (vt0.c0)), (- (vt2.c1))))>=((x'a5eaf1ee8e', ((v0.c0) BETWEEN (v0.c3) AND (vt0.c0)), ((vt2.c0)&('4]\T')), ((v0.c3)|(vt2.c0))))) DESC  NULLS LAST, (((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN (('0.27599954684292793' COLLATE NOCASE, (v0.c0 IN (v0.c2, v0.c0, v0.c3)), (v0.c2 IN ('1742702845')))) AND ((((((((((vt0.c0)OR(vt0.c0)))OR(v0.c2)))AND(v0.c0)))OR(vt0.c0)), (((vt2.c0, v0.c2)) NOT BETWEEN ((vt2.c1, v0.c3)) AND ((vt2.c1, vt2.c0))), (~ (vt0.c0))))) LIMIT 0X0;
SELECT ALL COUNT(*) FROM v0, vt0 WHERE (((v0.c2)>=(((vt0.c0) ISNULL))));
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (((((v0.c2)>(((vt0.c0) ISNULL))))AND((- (((v0.c3) NOT BETWEEN ('-886903944') AND (v0.c2))))))) LIMIT 0;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt0 ON '' WHERE (TRIM(((vt0.c0) BETWEEN (vt0.c0) AND (v0.c1))));
SELECT * FROM v0 INNER JOIN vt0 ON '' WHERE (((TRIM(((vt0.c0) BETWEEN (vt0.c0) AND (v0.c1))))AND(((v0.c3) ISNULL)))) LIMIT 0X2;
SELECT ALL * FROM v0 LEFT OUTER JOIN vt0 ON '' WHERE (TRIM(((vt0.c0) BETWEEN (vt0.c0) AND (v0.c1))));
SELECT * FROM v0 INNER JOIN vt0 ON '' WHERE (((TRIM(((vt0.c0) BETWEEN (vt0.c0) AND (v0.c1))))AND(((v0.c3) ISNULL)))) LIMIT 0X2;
SELECT ALL COUNT(*) FROM vt2 INNER JOIN vt0 ON (((((vt2.c1) NOT BETWEEN (v0.c3) AND (vt0.c0))))>=((((vt0.c0)>=(vt2.c1))))) CROSS JOIN v0 ON ((((((v0.c3)OR((v0.c3 IN (vt0.c0, vt2.c1)))))OR(CAST(v0.c1 AS BLOB))))AND(HEX(v0.c2))) WHERE (v0.c1);
SELECT DISTINCT COUNT(*) FROM vt2 INNER JOIN vt0 ON (((((vt2.c1) NOT BETWEEN (v0.c3) AND (vt0.c0))))>=((((vt0.c0)>=(vt2.c1))))) CROSS JOIN v0 ON ((((((v0.c3)OR((v0.c3 IN (vt0.c0, vt2.c1)))))OR(CAST(v0.c1 AS BLOB))))AND(HEX(v0.c2))) WHERE (((v0.c1)AND(vt2.c0))) ORDER BY ((CASE v0.c2  WHEN '8f' THEN v0.c1 WHEN v0.c2 THEN v0.c3 END) NOT BETWEEN (((v0.c0) NOT BETWEEN (v0.c3) AND (vt2.c1))) AND (json_remove(v0.c0, v0.c3))) DESC  NULLS FIRST, (vt0.c0 IN (NULL)) COLLATE RTRIM ASC, (((NOT (0Xffffffff8da4e2ba))) NOTNULL) DESC INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 INNER JOIN vt0 ON (((((vt2.c1) NOT BETWEEN (v0.c3) AND (vt0.c0))))>=((((vt0.c0)>=(vt2.c1))))) CROSS JOIN v0 ON ((((((v0.c3)OR((v0.c3 IN (vt0.c0, vt2.c1)))))OR(CAST(v0.c1 AS BLOB))))AND(HEX(v0.c2))) WHERE (CASE WHEN CAST(v0.c0 AS INTEGER) THEN CASE vt0.c0  WHEN vt2.c1 THEN v0.c3 ELSE v0.c1 END WHEN v0.c3 COLLATE BINARY THEN (+ (v0.c3)) WHEN (- (v0.c1)) THEN ((v0.c3) NOT NULL) END) ORDER BY ((CASE v0.c2  WHEN '8f' THEN v0.c1 WHEN v0.c2 THEN v0.c3 END) NOT BETWEEN (((v0.c0) NOT BETWEEN (v0.c3) AND (vt2.c1))) AND (json_remove(v0.c0, v0.c3))) DESC  NULLS FIRST, (vt0.c0 IN (NULL)) COLLATE RTRIM ASC, (((NOT (-1918573894))) NOTNULL) DESC;
SELECT ALL COUNT(*) FROM v0 NATURAL JOIN vt2 LEFT OUTER JOIN vt0 ON CAST(vt2.c0 AS TEXT) COLLATE RTRIM WHERE (((((((((((((((((v0.c1)AND(v0.c0)))AND(v0.c3)))OR(v0.c0)))OR(v0.c2)))OR(((vt2.c0) ISNULL))))OR(0X2b272103)))OR(CASE v0.c3  WHEN vt2.c0 THEN vt2.c1 WHEN 'Uc!3 Y61' THEN v0.c2 WHEN v0.c1 THEN vt2.c0 ELSE vt2.c0 END)))AND(x'7bb2bb'))) ORDER BY (NOT (x'242e18')), CAST(((((v0.c1)AND(vt2.c0)))AND(v0.c2)) AS TEXT);
SELECT DISTINCT COUNT(*) FROM v0 NATURAL JOIN vt2 INNER JOIN vt0 ON CAST(vt2.c0 AS TEXT) COLLATE RTRIM WHERE (((((((((((((((((v0.c1)AND(v0.c0)))AND(v0.c3)))OR(v0.c0)))OR(v0.c2)))OR(((vt2.c0) ISNULL))))OR(723984643)))OR(CASE v0.c3  WHEN vt2.c0 THEN vt2.c1 WHEN 'Uc!3 Y61' THEN v0.c2 WHEN v0.c1 THEN vt2.c0 ELSE vt2.c0 END)))AND(x'7bb2bb'))) ORDER BY (NOT (x'242e18')), CAST(((((v0.c1)AND(vt2.c0)))AND(v0.c2)) AS TEXT) LIMIT 0x3;
SELECT ALL COUNT(*) FROM vt2 WHERE (((((vt2.c1) NOT NULL)) ISNULL)) ORDER BY (+ (((vt2.c1) IS FALSE)));
SELECT ALL COUNT(*) FROM vt2 WHERE (((((vt2.c1) NOT NULL)) ISNULL)) ORDER BY (+ (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0)))) ASC  NULLS FIRST LIMIT 2;
SELECT ALL MIN(v0.c2) FROM vt2, vt0, v0 WHERE (CASE WHEN ((vt0.c0) NOTNULL) THEN (- (v0.c0)) WHEN (NOT (v0.c0)) THEN TRIM(v0.c3, vt0.c0) WHEN vt0.c0 COLLATE BINARY THEN ((vt0.c0) NOTNULL) WHEN (((vt2.c1, vt2.c0, v0.c1, v0.c2, v0.c2)) BETWEEN ((vt2.c1, v0.c1, v0.c0, v0.c3, vt2.c0)) AND ((v0.c2, vt2.c0, x'd5dd4c', vt2.c0, vt0.c0))) THEN v0.c2 COLLATE NOCASE END);
SELECT DISTINCT MIN(v0.c2) FROM vt2, vt0, v0 NOT INDEXED WHERE (((CASE WHEN ((vt0.c0) NOTNULL) THEN (- (v0.c0)) WHEN (NOT (v0.c0)) THEN TRIM(v0.c3, vt0.c0) WHEN vt0.c0 COLLATE BINARY THEN ((vt0.c0) NOTNULL) WHEN (((vt2.c1, vt2.c0, v0.c1, v0.c2, v0.c2)) BETWEEN ((vt2.c1, v0.c1, v0.c0, v0.c3, vt2.c0)) AND ((v0.c2, vt2.c0, x'd5dd4c', vt2.c0, vt0.c0))) THEN v0.c2 COLLATE NOCASE END)AND(((0xffffffff8477ed90)GLOB(CAST(v0.c2 AS BLOB)))))) ORDER BY ((v0.c2)-((vt0.c0 IN ()))), TRIM(DISTINCT ((vt2.c0)+(v0.c1)), SQLITE_COMPILEOPTION_USED('246233512'))  NULLS FIRST, NULL LIMIT 0X0;
SELECT MIN(vt2.c1) FROM vt2 INNER JOIN v0 ON (((v0.c0 IN ('-1989711181')))/(x'fb9d')) LEFT OUTER JOIN vt0 ON (- (v0.c3)) COLLATE RTRIM WHERE (v0.c1) ORDER BY (((((v0.c3, vt2.c1, v0.c2, vt0.c0, v0.c3)) BETWEEN ((vt0.c0, 'c#1', vt0.c0, vt0.c0, vt2.c0)) AND ((v0.c2, vt2.c0, v0.c3, vt2.c1, vt2.c0))))||(v0.c1 COLLATE NOCASE)), ((((v0.c1) IS TRUE)) NOT BETWEEN ((NOT (v0.c2))) AND ((vt2.c0 IN ()))) ASC;
SELECT DISTINCT MIN(vt2.c1) FROM vt2 INNER JOIN v0 ON (((v0.c0 IN ('-1989711181')))/(x'fb9d')) LEFT OUTER JOIN vt0 ON (- (v0.c3)) COLLATE RTRIM WHERE (((v0.c1)AND(((v0.c1)/(vt2.c1 COLLATE BINARY))))) ORDER BY (((((v0.c3, vt2.c1, v0.c2, vt0.c0, v0.c3)) BETWEEN ((vt0.c0, 'c#1', vt0.c0, vt0.c0, vt2.c0)) AND ((v0.c2, vt2.c0, v0.c3, vt2.c1, vt2.c0))))||(v0.c1 COLLATE NOCASE)), ((((v0.c1) IS TRUE)) NOT BETWEEN ((NOT (v0.c2))) AND ((vt2.c0 IN ()))) ASC LIMIT 0X0;
SELECT ALL MAX(v0.c0) FROM v0 WHERE (v0.c1);
SELECT MAX(v0.c0) FROM v0 WHERE (v0.c1) ORDER BY ((v0.c1) NOT BETWEEN (((((((v0.c1)OR(v0.c0)))AND(v0.c0)))AND(''))) AND (LTRIM(v0.c1, v0.c2)))  NULLS LAST, COALESCE(CASE v0.c1  WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END, ((((((v0.c3)AND(v0.c2)))AND(v0.c1)))OR(v0.c1)), (- (v0.c3)), (- (v0.c2))) LIMIT 0X0;
SELECT * FROM v0 INNER JOIN vt2 ON CAST(((v0.c3)/(vt2.c0)) AS TEXT) WHERE (((vt2.c0 COLLATE NOCASE)<<(((v0.c1) NOT BETWEEN (x'3d30') AND (v0.c2))))) ORDER BY x'';
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON CAST(((v0.c3)/(vt2.c0)) AS TEXT) WHERE (((((vt2.c0 COLLATE NOCASE)<<(((v0.c1) NOT BETWEEN (x'3d30') AND (v0.c2)))))AND(NULL))) ORDER BY ((CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 ELSE vt2.c1 END) NOT BETWEEN (CAST(NULL AS NUMERIC)) AND (vt2.c1)) DESC, CASE WHEN LIKELY(DISTINCT v0.c0) THEN ((vt2.c0) ISNULL) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c3)) THEN CAST(v0.c3 AS REAL) ELSE ((v0.c0) BETWEEN (v0.c2) AND (vt2.c1)) END DESC INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON CAST(((v0.c3)/(vt2.c0)) AS TEXT) WHERE ((NOT (json(vt2.c1)))) ORDER BY ((CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 ELSE vt2.c1 END) NOT BETWEEN (CAST(NULL AS NUMERIC)) AND (vt2.c1)) DESC, CASE WHEN LIKELY(DISTINCT v0.c0) THEN ((vt2.c0) ISNULL) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c3)) THEN CAST(v0.c3 AS REAL) ELSE ((v0.c0) BETWEEN (v0.c2) AND (vt2.c1)) END DESC;
SELECT * FROM v0 INNER JOIN vt2 ON CAST(((v0.c3)/(vt2.c0)) AS TEXT) WHERE (((vt2.c0 COLLATE NOCASE)<<(((v0.c1) NOT BETWEEN (x'3d30') AND (v0.c2))))) ORDER BY x'';
SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON CAST(((v0.c3)/(vt2.c0)) AS TEXT) WHERE (((((vt2.c0 COLLATE NOCASE)<<(((v0.c1) NOT BETWEEN (x'3d30') AND (v0.c2)))))AND(NULL))) ORDER BY ((CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 ELSE vt2.c1 END) NOT BETWEEN (CAST(NULL AS NUMERIC)) AND (vt2.c1)) DESC, CASE WHEN LIKELY(DISTINCT v0.c0) THEN ((vt2.c0) ISNULL) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c3)) THEN CAST(v0.c3 AS REAL) ELSE ((v0.c0) BETWEEN (v0.c2) AND (vt2.c1)) END DESC INTERSECT SELECT DISTINCT * FROM v0 INNER JOIN vt2 ON CAST(((v0.c3)/(vt2.c0)) AS TEXT) WHERE ((NOT (json(vt2.c1)))) ORDER BY ((CASE WHEN v0.c3 THEN v0.c2 WHEN vt2.c0 THEN v0.c1 ELSE vt2.c1 END) NOT BETWEEN (CAST(NULL AS NUMERIC)) AND (vt2.c1)) DESC, CASE WHEN LIKELY(DISTINCT v0.c0) THEN ((vt2.c0) ISNULL) WHEN ((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c3)) THEN CAST(v0.c3 AS REAL) ELSE ((v0.c0) BETWEEN (v0.c2) AND (vt2.c1)) END DESC;
SELECT * FROM vt2 NATURAL JOIN vt0 WHERE ((((+ (vt2.c1)))<<(CASE WHEN vt0.c0 THEN x'be' ELSE vt0.c0 END))) ORDER BY JULIANDAY(((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)), CAST(vt0.c0 AS NUMERIC), vt2.c1 COLLATE BINARY)  NULLS LAST, LOWER((((0.3270935108578914))=((vt2.c0))))  NULLS LAST, (('7팈}''T') BETWEEN (((vt2.c1)||(vt2.c0))) AND ((vt2.c1 IN (vt0.c0)))) DESC, vt2.c0 ASC;
SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE ((((+ (vt2.c1)))<<(CASE WHEN vt0.c0 THEN x'be' ELSE vt0.c0 END))) ORDER BY JULIANDAY(((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)), CAST(vt0.c0 AS NUMERIC), vt2.c1 COLLATE BINARY)  NULLS LAST, LOWER((((0.3270935108578914))=((vt2.c0))))  NULLS LAST, (('7팈}''T') BETWEEN (((vt2.c1)||(vt2.c0))) AND ((vt2.c1 IN (vt0.c0)))) DESC, vt2.c0 ASC LIMIT 0X1;
SELECT * FROM vt2 NATURAL JOIN vt0 WHERE ((((+ (vt2.c1)))<<(CASE WHEN vt0.c0 THEN x'be' ELSE vt0.c0 END))) ORDER BY JULIANDAY(((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)), CAST(vt0.c0 AS NUMERIC), vt2.c1 COLLATE BINARY)  NULLS LAST, LOWER((((0.3270935108578914))=((vt2.c0))))  NULLS LAST, (('7팈}''T') BETWEEN (((vt2.c1)||(vt2.c0))) AND ((vt2.c1 IN (vt0.c0)))) DESC, vt2.c0 ASC;
SELECT DISTINCT * FROM vt2 NATURAL JOIN vt0 WHERE ((((+ (vt2.c1)))<<(CASE WHEN vt0.c0 THEN x'be' ELSE vt0.c0 END))) ORDER BY JULIANDAY(((((vt0.c0)OR(vt2.c1)))OR(vt2.c1)), CAST(vt0.c0 AS NUMERIC), vt2.c1 COLLATE BINARY)  NULLS LAST, LOWER((((0.3270935108578914))=((vt2.c0))))  NULLS LAST, (('7팈}''T') BETWEEN (((vt2.c1)||(vt2.c0))) AND ((vt2.c1 IN (vt0.c0)))) DESC, vt2.c0 ASC LIMIT 0X1;
SELECT * FROM vt0, v0 WHERE (((((v0.c2)<(v0.c1)))=(x'2bad')));
SELECT ALL * FROM vt0, v0 WHERE (((((v0.c2)<(v0.c1)))==(x'2bad'))) INTERSECT SELECT ALL * FROM vt0, v0 WHERE (NULLIF(CAST(v0.c0 AS INTEGER), CASE v0.c0  WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END));
SELECT * FROM vt0, v0 WHERE (((((v0.c2)<(v0.c1)))=(x'2bad')));
SELECT ALL * FROM vt0, v0 WHERE (((((v0.c2)<(v0.c1)))==(x'2bad'))) INTERSECT SELECT ALL * FROM vt0, v0 WHERE (NULLIF(CAST(v0.c0 AS INTEGER), CASE v0.c0  WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END));
SELECT MIN(vt2.c0) FROM vt0, vt2 WHERE ((((((((NOT (vt2.c1)))OR(((((vt2.c1)AND(vt2.c0)))OR(x'3d')))))AND((vt2.c1 IN ()))))AND(vt2.c1 COLLATE RTRIM)));
SELECT DISTINCT MIN(vt2.c0) FROM vt0, vt2 WHERE ((((((((NOT (vt2.c1)))OR(((((vt2.c1)AND(vt2.c0)))OR(x'3d')))))AND((vt2.c1 IN ()))))AND(vt2.c1 COLLATE RTRIM))) INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt0, vt2 WHERE (CASE ((vt2.c0)>=(vt2.c1))  WHEN vt2.c0 COLLATE NOCASE THEN CAST(1409278108 AS INTEGER) END);
SELECT * FROM vt0, v0, vt2 WHERE ((((((v0.c3, v0.c2, vt0.c0)) BETWEEN ((v0.c0, vt2.c1, vt2.c1)) AND ((vt2.c1, v0.c0, v0.c2)))) BETWEEN (((((((((((((vt2.c1)OR(v0.c1)))AND(vt2.c0)))AND(v0.c0)))OR(vt2.c1)))AND(']a#![PB')))OR(v0.c2))) AND (((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1))))) ORDER BY json_array_length(x'5b'), NULL, ((v0.c0)||(v0.c3)) COLLATE BINARY DESC  NULLS FIRST;
SELECT ALL * FROM vt0 NOT INDEXED, v0, vt2 WHERE ((((((((v0.c3, v0.c2, vt0.c0)) BETWEEN ((v0.c0, vt2.c1, vt2.c1)) AND ((vt2.c1, v0.c0, v0.c2)))) BETWEEN (((((((((((((vt2.c1)OR(v0.c1)))AND(vt2.c0)))AND(v0.c0)))OR(vt2.c1)))AND(']a#![PB')))OR(v0.c2))) AND (((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1)))))AND(((CAST(v0.c1 AS NUMERIC)) BETWEEN (((v0.c0)%(v0.c1))) AND (v0.c3 COLLATE NOCASE))))) ORDER BY x'07a99e2d' INTERSECT SELECT * FROM vt0, v0, vt2 WHERE ((((~ (v0.c1))) BETWEEN ((+ (v0.c0))) AND (((v0.c1) ISNULL)))) ORDER BY x'07a99e2d';
SELECT * FROM vt0, v0, vt2 WHERE ((((((v0.c3, v0.c2, vt0.c0)) BETWEEN ((v0.c0, vt2.c1, vt2.c1)) AND ((vt2.c1, v0.c0, v0.c2)))) BETWEEN (((((((((((((vt2.c1)OR(v0.c1)))AND(vt2.c0)))AND(v0.c0)))OR(vt2.c1)))AND(']a#![PB')))OR(v0.c2))) AND (((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1))))) ORDER BY json_array_length(x'5b'), NULL, ((v0.c0)||(v0.c3)) COLLATE BINARY DESC  NULLS FIRST;
SELECT ALL * FROM vt0 NOT INDEXED, v0, vt2 WHERE ((((((((v0.c3, v0.c2, vt0.c0)) BETWEEN ((v0.c0, vt2.c1, vt2.c1)) AND ((vt2.c1, v0.c0, v0.c2)))) BETWEEN (((((((((((((vt2.c1)OR(v0.c1)))AND(vt2.c0)))AND(v0.c0)))OR(vt2.c1)))AND(']a#![PB')))OR(v0.c2))) AND (((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1)))))AND(((CAST(v0.c1 AS NUMERIC)) BETWEEN (((v0.c0)%(v0.c1))) AND (v0.c3 COLLATE NOCASE))))) ORDER BY x'07a99e2d' INTERSECT SELECT * FROM vt0, v0, vt2 WHERE ((((~ (v0.c1))) BETWEEN ((+ (v0.c0))) AND (((v0.c1) ISNULL)))) ORDER BY x'07a99e2d';
SELECT * FROM vt0, vt2, v0 WHERE ((('2126815385')IS NOT(CAST(NULL AS TEXT)))) ORDER BY (((~ (v0.c0)))IS((~ (vt2.c0)))) ASC;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((('2126815385')IS NOT(CAST(NULL AS TEXT))))AND((((vt2.c1, vt2.c1)) BETWEEN ((CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END, (~ (v0.c1)))) AND (((v0.c0 IN (v0.c1)), CASE WHEN vt2.c0 THEN vt0.c0 END)))))) ORDER BY (((~ (v0.c0)))IS((~ (vt2.c0)))) ASC;
SELECT * FROM vt0, vt2, v0 WHERE ((('2126815385')IS NOT(CAST(NULL AS TEXT)))) ORDER BY (((~ (v0.c0)))IS((~ (vt2.c0)))) ASC;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((('2126815385')IS NOT(CAST(NULL AS TEXT))))AND((((vt2.c1, vt2.c1)) BETWEEN ((CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END, (~ (v0.c1)))) AND (((v0.c0 IN (v0.c1)), CASE WHEN vt2.c0 THEN vt0.c0 END)))))) ORDER BY (((~ (v0.c0)))IS((~ (vt2.c0)))) ASC;
SELECT ALL * FROM vt2, vt0 WHERE ((TRIM(DISTINCT vt0.c0) IN ())) ORDER BY ((CAST(vt2.c0 AS NUMERIC))>>(SQLITE_COMPILEOPTION_USED(NULL))), (NOT (CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END))  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE ((TRIM(DISTINCT vt0.c0) IN ())) ORDER BY ((CAST(vt2.c0 AS NUMERIC))>>(SQLITE_COMPILEOPTION_USED(NULL))), (NOT (CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END))  NULLS FIRST LIMIT 2;
SELECT ALL * FROM vt2, vt0 WHERE ((TRIM(DISTINCT vt0.c0) IN ())) ORDER BY ((CAST(vt2.c0 AS NUMERIC))>>(SQLITE_COMPILEOPTION_USED(NULL))), (NOT (CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END))  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE ((TRIM(DISTINCT vt0.c0) IN ())) ORDER BY ((CAST(vt2.c0 AS NUMERIC))>>(SQLITE_COMPILEOPTION_USED(NULL))), (NOT (CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END))  NULLS FIRST LIMIT 2;
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ((NOT (CASE WHEN vt2.c0 THEN 0.6533712862531051 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN 'mZ' WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)));
SELECT DISTINCT COUNT(*) FROM vt0, vt2 WHERE ((((NOT (CASE WHEN vt2.c0 THEN 0.6533712862531051 WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c0 THEN 'mZ' WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c1 END)))AND(CAST(((vt0.c0) NOT BETWEEN (x'7c') AND (vt0.c0)) AS NUMERIC)))) ORDER BY x'f1' DESC  NULLS FIRST;
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (((((vt2.c1)>>(NULL)))-(((vt2.c0)OR(vt2.c0)))));
SELECT ALL MAX(vt2.c0) FROM vt2 WHERE (((((((vt2.c1)>>(NULL)))-(((vt2.c0)OR(vt2.c0)))))AND(TYPEOF(6.07633563E8))));
SELECT * FROM v0, vt2, vt0 WHERE (CASE v0.c3 COLLATE BINARY  WHEN ((vt2.c0)AND(v0.c1)) THEN (vt2.c1 IN (v0.c3)) END) ORDER BY (((0X2f7ced56, ((v0.c1) BETWEEN (v0.c1) AND (v0.c3))))!=((((vt2.c0)<=(v0.c1)), ((((v0.c3)AND(v0.c3)))AND(v0.c1)))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CASE v0.c3 COLLATE BINARY  WHEN ((vt2.c0)AND(v0.c1)) THEN (vt2.c1 IN (v0.c3)) END)AND(LIKELIHOOD(((((((((NULL)AND(v0.c1)))AND(v0.c2)))OR(vt2.c0)))OR(vt2.c1)), CAST(vt2.c0 AS INTEGER))))) ORDER BY (((v0.c1 IN (v0.c1, vt2.c0)))>=(((vt0.c0)==('214129716')))) ASC  NULLS LAST, CAST((NOT (v0.c1)) AS INTEGER) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((+ ((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c3, vt2.c0)) AND ((-1.330521423E9, vt2.c0)))))) ORDER BY (((v0.c1 IN (v0.c1, vt2.c0)))>=(((vt0.c0)==('214129716')))) ASC  NULLS LAST, CAST((NOT (v0.c1)) AS INTEGER) ASC  NULLS LAST;
SELECT * FROM v0, vt2, vt0 WHERE (CASE v0.c3 COLLATE BINARY  WHEN ((vt2.c0)AND(v0.c1)) THEN (vt2.c1 IN (v0.c3)) END) ORDER BY (((0X2f7ced56, ((v0.c1) BETWEEN (v0.c1) AND (v0.c3))))!=((((vt2.c0)<=(v0.c1)), ((((v0.c3)AND(v0.c3)))AND(v0.c1)))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((CASE v0.c3 COLLATE BINARY  WHEN ((vt2.c0)AND(v0.c1)) THEN (vt2.c1 IN (v0.c3)) END)AND(LIKELIHOOD(((((((((NULL)AND(v0.c1)))AND(v0.c2)))OR(vt2.c0)))OR(vt2.c1)), CAST(vt2.c0 AS INTEGER))))) ORDER BY (((v0.c1 IN (v0.c1, vt2.c0)))>=(((vt0.c0)==('214129716')))) ASC  NULLS LAST, CAST((NOT (v0.c1)) AS INTEGER) ASC  NULLS LAST INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE ((+ ((((v0.c0, v0.c2)) NOT BETWEEN ((v0.c3, vt2.c0)) AND ((-1.330521423E9, vt2.c0)))))) ORDER BY (((v0.c1 IN (v0.c1, vt2.c0)))>=(((vt0.c0)==('214129716')))) ASC  NULLS LAST, CAST((NOT (v0.c1)) AS INTEGER) ASC  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (HEX(DISTINCT (((v0.c3, v0.c0, v0.c1))<>((v0.c0, v0.c2, v0.c1)))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (HEX(DISTINCT (((v0.c3, v0.c0, v0.c1))>((v0.c0, v0.c2, v0.c1))))) ORDER BY ((((vt0.c0 COLLATE NOCASE)AND(CASE v0.c0  WHEN v0.c0 THEN vt0.c0 END)))AND(0.8371558124005088 COLLATE BINARY))  NULLS LAST, (- (vt2.c0))  NULLS LAST;
SELECT ALL * FROM vt0, v0, vt2 WHERE (HEX(DISTINCT (((v0.c3, v0.c0, v0.c1))<>((v0.c0, v0.c2, v0.c1)))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (HEX(DISTINCT (((v0.c3, v0.c0, v0.c1))>((v0.c0, v0.c2, v0.c1))))) ORDER BY ((((vt0.c0 COLLATE NOCASE)AND(CASE v0.c0  WHEN v0.c0 THEN vt0.c0 END)))AND(0.8371558124005088 COLLATE BINARY))  NULLS LAST, (- (vt2.c0))  NULLS LAST;
SELECT ALL MIN(vt2.c0) FROM vt2, v0 WHERE ((+ ((~ (vt2.c0)))));
SELECT ALL MIN(vt2.c0) FROM vt2, v0 WHERE ((((+ ((~ (vt2.c0)))))AND('9%0^}2DHJ'))) ORDER BY ((((TRIM(vt2.c1))AND(((vt2.c0)<=(vt2.c1)))))AND((NOT (v0.c1))))  NULLS FIRST LIMIT 0;
SELECT ALL COUNT(*) FROM vt2 WHERE ((((vt2.c0 IN ())) BETWEEN (((vt2.c0)>=(x'9c'))) AND (NULL)));
SELECT DISTINCT COUNT(*) FROM vt2 WHERE ((((vt2.c0 IN ())) BETWEEN (((vt2.c0)=(x'9c'))) AND (NULL))) ORDER BY (((vt2.c1)) BETWEEN ((CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END)) AND ((CAST(vt2.c0 AS REAL))))  NULLS FIRST, json(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))) DESC, CAST((vt2.c1 IN (vt2.c1, vt2.c0)) AS NUMERIC)  NULLS LAST LIMIT 0X0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2 WHERE (((vt2.c0)AND(vt2.c0)) COLLATE BINARY) ORDER BY (((vt2.c1)) BETWEEN ((CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 END)) AND ((CAST(vt2.c0 AS REAL))))  NULLS FIRST, json(((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1))) DESC, CAST((vt2.c1 IN (vt2.c1, vt2.c0)) AS NUMERIC)  NULLS LAST LIMIT 0;
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c0) IS TRUE))&(v0.c0 COLLATE NOCASE)));
SELECT DISTINCT * FROM v0, vt0 WHERE (((((v0.c0) IS TRUE))&(v0.c0 COLLATE NOCASE)));
SELECT ALL * FROM v0, vt0 WHERE (((((v0.c0) IS TRUE))&(v0.c0 COLLATE NOCASE)));
SELECT DISTINCT * FROM v0, vt0 WHERE (((((v0.c0) IS TRUE))&(v0.c0 COLLATE NOCASE)));
SELECT MAX(v0.c0) FROM vt0 INNER JOIN v0 ON v0.c3 LEFT OUTER JOIN vt2 ON ((((CASE v0.c2  WHEN v0.c2 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN v0.c1 THEN v0.c0 END)OR((v0.c2 IN ()))))AND(CAST(v0.c1 AS BLOB))) WHERE ((((v0.c2)-('932368584')) IN ())) ORDER BY (((('OR	>')GLOB(v0.c2))) IS TRUE) DESC, CAST(NULLIF(DISTINCT v0.c3, vt2.c0) AS BLOB)  NULLS FIRST, NULL  NULLS LAST;
SELECT ALL MAX(v0.c0) FROM vt0 INNER JOIN v0 ON v0.c3 INNER JOIN vt2 ON ((((CASE v0.c2  WHEN v0.c2 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN v0.c1 THEN v0.c0 END)OR((v0.c2 IN ()))))AND(CAST(v0.c1 AS BLOB))) WHERE ((((((v0.c2)-('932368584')) IN ()))AND(x'5e'))) ORDER BY (v0.c3 IN ()) ASC  NULLS LAST, v0.c1 INTERSECT SELECT ALL MAX(v0.c0) FROM vt0 INNER JOIN v0 ON v0.c3 INNER JOIN vt2 ON ((((CASE v0.c2  WHEN v0.c2 THEN NULL WHEN vt2.c0 THEN vt2.c0 WHEN v0.c1 THEN v0.c0 END)OR((v0.c2 IN ()))))AND(CAST(v0.c1 AS BLOB))) WHERE ((((((((('6') NOT BETWEEN (v0.c1) AND ('0.27599954684292793')))OR((v0.c2 IN (v0.c0)))))OR(((v0.c3)>>(v0.c1)))))OR((v0.c3 IN ())))) ORDER BY (v0.c3 IN ()) ASC  NULLS LAST, v0.c1;
SELECT ALL * FROM vt0, vt2 WHERE ((((CAST(vt2.c0 AS TEXT), (((vt2.c0, vt0.c0))!=((vt2.c0, vt2.c1))), CAST(vt0.c0 AS NUMERIC)))<(((vt2.c1 IN (0.9757220249680452)), vt2.c0 COLLATE NOCASE, CAST(vt2.c0 AS REAL)))));
SELECT DISTINCT * FROM vt0, vt2 WHERE ((((CAST(vt2.c0 AS TEXT), (((vt2.c0, vt0.c0))!=((vt2.c0, vt2.c1))), CAST(vt0.c0 AS NUMERIC)))<(((vt2.c1 IN (0.9757220249680452)), vt2.c0 COLLATE NOCASE, CAST(vt2.c0 AS REAL))))) LIMIT 0X1;
SELECT ALL * FROM vt0, vt2 WHERE ((((CAST(vt2.c0 AS TEXT), (((vt2.c0, vt0.c0))!=((vt2.c0, vt2.c1))), CAST(vt0.c0 AS NUMERIC)))<(((vt2.c1 IN (0.9757220249680452)), vt2.c0 COLLATE NOCASE, CAST(vt2.c0 AS REAL)))));
SELECT DISTINCT * FROM vt0, vt2 WHERE ((((CAST(vt2.c0 AS TEXT), (((vt2.c0, vt0.c0))!=((vt2.c0, vt2.c1))), CAST(vt0.c0 AS NUMERIC)))<(((vt2.c1 IN (0.9757220249680452)), vt2.c0 COLLATE NOCASE, CAST(vt2.c0 AS REAL))))) LIMIT 0X1;
SELECT MAX(v0.c1) FROM vt2, vt0, v0 WHERE ((('ww')<=(((((vt2.c1)AND(vt0.c0)))OR(vt0.c0))))) ORDER BY (((v0.c1, v0.c3)) NOT BETWEEN ((LOWER(DISTINCT vt2.c1), ((v0.c1)==(vt0.c0)))) AND ((((((vt0.c0)OR(v0.c0)))AND(vt2.c1)), CASE WHEN v0.c2 THEN v0.c0 WHEN v0.c3 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c1 END))), CASE WHEN ((((((vt2.c1)AND(v0.c0)))OR(v0.c2)))OR(vt0.c0)) THEN TYPEOF(DISTINCT v0.c2) WHEN UPPER(DISTINCT v0.c0) THEN (+ (v0.c1)) WHEN vt0.c0 COLLATE NOCASE THEN (((v0.c1, v0.c0, v0.c1, vt0.c0))=((vt2.c1, v0.c1, vt2.c1, v0.c3))) END ASC, (CASE v0.c0  WHEN 0Xffffffff8b93f243 THEN vt0.c0 WHEN v0.c1 THEN v0.c2 WHEN v0.c1 THEN v0.c3 ELSE v0.c0 END IN (((v0.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0))));
SELECT DISTINCT MAX(v0.c1) FROM vt2, vt0, v0 WHERE ((((('ww')<=(((((vt2.c1)AND(vt0.c0)))OR(vt0.c0)))))AND((v0.c0 IN (vt0.c0)) COLLATE RTRIM))) ORDER BY CASE ((vt2.c1)+(v0.c2))  WHEN CASE WHEN v0.c3 THEN v0.c3 WHEN vt2.c0 THEN vt0.c0 ELSE v0.c0 END THEN v0.c1 COLLATE NOCASE WHEN ((v0.c2) NOT NULL) THEN v0.c3 END, (v0.c3 IN (v0.c2, vt2.c1)) COLLATE RTRIM ASC  NULLS LAST, ((vt2.c1)>=(vt0.c0)) COLLATE RTRIM ASC;
SELECT MIN(v0.c0) FROM vt0, v0 INNER JOIN vt2 ON (((vt2.c0 IN (v0.c2))) NOT BETWEEN ((vt0.c0 IN (v0.c2))) AND (((v0.c2)=(v0.c3)))) WHERE ((((vt2.c1)AND(vt0.c0)) IN ())) ORDER BY (((((v0.c3, v0.c1, -1846378045)) NOT BETWEEN ((vt2.c0, v0.c2, vt0.c0)) AND ((v0.c0, vt2.c0, vt0.c0))))LIKE(SQLITE_COMPILEOPTION_USED(v0.c1))) DESC, ((0.6696278070669723)OR(CASE WHEN v0.c2 THEN vt0.c0 WHEN vt2.c0 THEN v0.c1 ELSE v0.c2 END)) ASC  NULLS FIRST, 0x5116a028;
SELECT DISTINCT MIN(v0.c0) FROM vt0, v0 INNER JOIN vt2 ON (((vt2.c0 IN (v0.c2))) NOT BETWEEN ((vt0.c0 IN (v0.c2))) AND (((v0.c2)=(v0.c3)))) WHERE ((((((vt2.c1)AND(vt0.c0)) IN ()))AND((+ (((v0.c2)-(v0.c3))))))) ORDER BY ((((v0.c3) IS TRUE))*(((v0.c1)<(vt2.c0)))), ((v0.c0 COLLATE RTRIM)GLOB(v0.c2 COLLATE NOCASE)), (((v0.c3 IN (v0.c1)))|(CAST(vt0.c0 AS INTEGER))) ASC;
SELECT ALL MAX(vt2.c0) FROM vt0, vt2 LEFT OUTER JOIN v0 ON (~ (json_type(vt0.c0))) WHERE (CAST((- (v0.c0)) AS TEXT)) ORDER BY CAST(((((((((((v0.c1)OR(vt0.c0)))AND(v0.c1)))OR(v0.c0)))OR(v0.c2)))OR(v0.c0)) AS NUMERIC) ASC, v0.c2;
SELECT DISTINCT MAX(vt2.c0) FROM vt0, vt2 INNER JOIN v0 ON (~ (json_type(vt0.c0))) WHERE (((CAST((- (v0.c0)) AS TEXT))AND(v0.c0))) ORDER BY CAST(((((((((((v0.c1)OR(vt0.c0)))AND(v0.c1)))OR(v0.c0)))OR(v0.c2)))OR(v0.c0)) AS NUMERIC) ASC, v0.c2 LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt0 LEFT OUTER JOIN vt2 ON ((((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))OR(vt0.c0)))AND(((0.09877856547363306)-(vt2.c0)))) WHERE (((((((vt0.c0)AND(MIN(vt2.c0, vt2.c1, vt0.c0, vt2.c0, vt0.c0))))OR((- (0.8538150935471701)))))AND(((vt2.c1)&(vt2.c0)))));
SELECT DISTINCT COUNT(*) FROM vt0 LEFT OUTER JOIN vt2 ON ((((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)))OR(vt0.c0)))AND(((0.09877856547363306)-(vt2.c0)))) WHERE (((((((vt0.c0)AND(MIN(vt2.c0, vt2.c1, vt0.c0, vt2.c0, vt0.c0))))OR((- (0.8538150935471701)))))AND(((vt2.c1)&(vt2.c0))))) ORDER BY (((((((('-1953238461')||(NULL)))OR('-1393949064' COLLATE RTRIM)))AND(((vt2.c0) NOT NULL))))AND((((vt2.c0, vt2.c0, vt0.c0))<((vt2.c1, vt2.c0, vt0.c0)))))  NULLS LAST, (+ (vt0.c0)) DESC  NULLS LAST LIMIT 0;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((CASE WHEN vt2.c1 THEN v0.c2 END) IS FALSE)) ORDER BY v0.c0 DESC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((CASE WHEN vt2.c1 THEN v0.c2 END) IS FALSE))AND(((v0.c0)>(vt2.c0)) COLLATE RTRIM))) ORDER BY COALESCE(vt2.c1 COLLATE RTRIM, (((v0.c2)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))), vt2.c1, ((vt0.c0)+(v0.c2)))  NULLS FIRST, (- ((v0.c1 IN (v0.c1, vt0.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((0.919466136759923, vt0.c0)) BETWEEN ((v0.c2, v0.c1)) AND (('oZ', v0.c0))))IS(((v0.c1) BETWEEN (vt2.c1) AND (v0.c2))))) ORDER BY COALESCE(vt2.c1 COLLATE RTRIM, (((v0.c2)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))), vt2.c1, ((vt0.c0)+(v0.c2)))  NULLS FIRST, (- ((v0.c1 IN (v0.c1, vt0.c0))))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((CASE WHEN vt2.c1 THEN v0.c2 END) IS FALSE)) ORDER BY v0.c0 DESC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((CASE WHEN vt2.c1 THEN v0.c2 END) IS FALSE))AND(((v0.c0)>(vt2.c0)) COLLATE RTRIM))) ORDER BY COALESCE(vt2.c1 COLLATE RTRIM, (((v0.c2)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))), vt2.c1, ((vt0.c0)+(v0.c2)))  NULLS FIRST, (- ((v0.c1 IN (v0.c1, vt0.c0))))  NULLS LAST LIMIT 1 INTERSECT SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((0.919466136759923, vt0.c0)) BETWEEN ((v0.c2, v0.c1)) AND (('oZ', v0.c0))))IS(((v0.c1) BETWEEN (vt2.c1) AND (v0.c2))))) ORDER BY COALESCE(vt2.c1 COLLATE RTRIM, (((v0.c2)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))), vt2.c1, ((vt0.c0)+(v0.c2)))  NULLS FIRST, (- ((v0.c1 IN (v0.c1, vt0.c0))))  NULLS LAST LIMIT 0X1;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c3 THEN v0.c0 ELSE vt0.c0 END THEN ((vt2.c0) ISNULL) WHEN (+ (vt2.c1)) THEN ((v0.c1)LIKE(vt0.c0)) END) ORDER BY CAST(((vt2.c0)<(vt0.c0)) AS BLOB)  NULLS FIRST;
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (CASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c3 THEN v0.c0 ELSE vt0.c0 END THEN ((vt2.c0) ISNULL) WHEN (+ (vt2.c1)) THEN ((v0.c1)LIKE(vt0.c0)) END) ORDER BY CAST(((vt2.c0)<(vt0.c0)) AS BLOB)  NULLS FIRST LIMIT 1;
SELECT ALL * FROM vt0, vt2, v0 WHERE (CASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c3 THEN v0.c0 ELSE vt0.c0 END THEN ((vt2.c0) ISNULL) WHEN (+ (vt2.c1)) THEN ((v0.c1)LIKE(vt0.c0)) END) ORDER BY CAST(((vt2.c0)<(vt0.c0)) AS BLOB)  NULLS FIRST;
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (CASE WHEN CASE WHEN v0.c3 THEN v0.c2 WHEN v0.c3 THEN v0.c0 ELSE vt0.c0 END THEN ((vt2.c0) ISNULL) WHEN (+ (vt2.c1)) THEN ((v0.c1)LIKE(vt0.c0)) END) ORDER BY CAST(((vt2.c0)<(vt0.c0)) AS BLOB)  NULLS FIRST LIMIT 1;
SELECT * FROM vt2 WHERE (1.090913443E9);
SELECT * FROM vt2 WHERE (1.090913443E9) LIMIT 0X1;
SELECT * FROM vt2 WHERE (1.090913443E9);
SELECT * FROM vt2 WHERE (1.090913443E9) LIMIT 0X1;
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((vt2.c0)AND(v0.c2)))|(((((vt2.c1)OR(v0.c2)))AND(v0.c0)))));
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((vt2.c0)AND(v0.c2)))|(((((vt2.c1)OR(v0.c2)))AND(v0.c0)))))AND((LIKELIHOOD(0.3254156352748012, NULL) IN (((v0.c0) NOTNULL), ((vt2.c0) NOT BETWEEN (v0.c2) AND (v0.c1))))))) INTERSECT SELECT * FROM vt0, vt2, v0 WHERE (((((((((((v0.c0)AND(v0.c0)))OR(v0.c3)))OR(v0.c3)))AND(0.4420443092150801)))-(((x'e2')||(v0.c2)))));
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((vt2.c0)AND(v0.c2)))|(((((vt2.c1)OR(v0.c2)))AND(v0.c0)))));
SELECT ALL * FROM vt0, vt2, v0 WHERE (((((((vt2.c0)AND(v0.c2)))|(((((vt2.c1)OR(v0.c2)))AND(v0.c0)))))AND((LIKELIHOOD(0.3254156352748012, NULL) IN (((v0.c0) NOTNULL), ((vt2.c0) NOT BETWEEN (v0.c2) AND (v0.c1))))))) INTERSECT SELECT * FROM vt0, vt2, v0 WHERE (((((((((((v0.c0)AND(v0.c0)))OR(v0.c3)))OR(v0.c3)))AND(0.4420443092150801)))-(((x'e2')||(v0.c2)))));
SELECT ALL * FROM vt0 LEFT OUTER JOIN v0 ON (NOT (v0.c2 COLLATE NOCASE)) LEFT OUTER JOIN vt2 ON SUBSTR(SUBSTR(v0.c3, vt2.c1), ((v0.c0) NOT NULL)) WHERE (UNLIKELY(vt2.c0) COLLATE BINARY);
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON (NOT (v0.c2 COLLATE NOCASE)) LEFT OUTER JOIN vt2 ON SUBSTR(SUBSTR(v0.c3, vt2.c1), ((v0.c0) NOT NULL)) WHERE (((UNLIKELY(vt2.c0) COLLATE BINARY)AND(((CASE WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END) ISNULL)))) ORDER BY ((v0.c0 COLLATE BINARY) IS TRUE) ASC, (NOT (((v0.c0) ISNULL))) ASC, CASE (916626587 IN ())  WHEN CASE v0.c2  WHEN -1.97496816E8 THEN vt2.c0 END THEN (x'd118' IN ()) WHEN ((v0.c3)GLOB(v0.c1)) THEN CASE v0.c3  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN v0.c0 THEN '' ELSE v0.c3 END ELSE ((((((v0.c2)AND(v0.c0)))AND(vt0.c0)))AND(vt2.c1)) END  NULLS LAST;
SELECT ALL * FROM vt0 LEFT OUTER JOIN v0 ON (NOT (v0.c2 COLLATE NOCASE)) LEFT OUTER JOIN vt2 ON SUBSTR(SUBSTR(v0.c3, vt2.c1), ((v0.c0) NOT NULL)) WHERE (UNLIKELY(vt2.c0) COLLATE BINARY);
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON (NOT (v0.c2 COLLATE NOCASE)) LEFT OUTER JOIN vt2 ON SUBSTR(SUBSTR(v0.c3, vt2.c1), ((v0.c0) NOT NULL)) WHERE (((UNLIKELY(vt2.c0) COLLATE BINARY)AND(((CASE WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END) ISNULL)))) ORDER BY ((v0.c0 COLLATE BINARY) IS TRUE) ASC, (NOT (((v0.c0) ISNULL))) ASC, CASE (916626587 IN ())  WHEN CASE v0.c2  WHEN -1.97496816E8 THEN vt2.c0 END THEN (x'd118' IN ()) WHEN ((v0.c3)GLOB(v0.c1)) THEN CASE v0.c3  WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 WHEN v0.c0 THEN '' ELSE v0.c3 END ELSE ((((((v0.c2)AND(v0.c0)))AND(vt0.c0)))AND(vt2.c1)) END  NULLS LAST;
SELECT ALL MIN(v0.c0) FROM vt0 CROSS JOIN v0 ON 0X657f3b30 WHERE (STRFTIME((((NULL))<((v0.c3))), ((((((((((((v0.c2)AND(v0.c2)))OR(0xffffffffe5ff155f)))AND(v0.c2)))OR(v0.c2)))OR(vt0.c0)))AND(v0.c2)), CAST(v0.c2 AS NUMERIC), UNLIKELY(DISTINCT vt0.c0)));
SELECT DISTINCT MIN(v0.c0) FROM vt0 CROSS JOIN v0 ON 1702837040 WHERE (((STRFTIME((((NULL))<((v0.c3))), ((((((((((((v0.c2)AND(v0.c2)))OR(-436267681)))AND(v0.c2)))OR(v0.c2)))OR(vt0.c0)))AND(v0.c2)), CAST(v0.c2 AS NUMERIC), UNLIKELY(DISTINCT vt0.c0)))AND((((((vt0.c0, v0.c1, v0.c1))>=((v0.c2, v0.c0, v0.c2))))<(((v0.c1) BETWEEN (vt0.c0) AND (v0.c0))))))) ORDER BY (((v0.c0)*(v0.c1)) IN (((v0.c2)/(v0.c3))))  NULLS LAST, ((vt0.c0) IS FALSE)  NULLS LAST;
SELECT * FROM vt0 LEFT OUTER JOIN v0 ON 0Xffffffffde30ed93 LEFT OUTER JOIN vt2 ON 'f+[0ꗔzj' WHERE (CASE (- (v0.c3))  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c3)OR(v0.c0)) ELSE CAST(v0.c3 AS REAL) END);
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON 0xffffffffde30ed93 LEFT OUTER JOIN vt2 ON 'f+[0ꗔzj' WHERE (((CASE (- (v0.c3))  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c3)OR(v0.c0)) ELSE CAST(v0.c3 AS REAL) END)AND(((UNLIKELY(v0.c3)) NOT BETWEEN (((vt2.c1) NOT BETWEEN (NULL) AND (v0.c1))) AND ((v0.c3 IN (vt0.c0))))))) ORDER BY (~ (((((((v0.c2)OR('-567218797')))OR(v0.c2)))AND(v0.c2)))), (((((vt2.c1)AND(v0.c0)))OR(v0.c2)) IN (((vt2.c1)>(vt2.c0)), ((v0.c2)<<(v0.c3)), v0.c1 COLLATE BINARY))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON -567218797 LEFT OUTER JOIN vt2 ON 'f+[0ꗔzj' WHERE (((CASE WHEN vt2.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 WHEN 0x7c7bfc20 THEN v0.c0 WHEN v0.c1 THEN v0.c3 ELSE v0.c0 END) BETWEEN (((v0.c1)GLOB(v0.c1))) AND (((vt2.c1) NOTNULL)))) ORDER BY (~ (((((((v0.c2)OR('-567218797')))OR(v0.c2)))AND(v0.c2)))), (((((vt2.c1)AND(v0.c0)))OR(v0.c2)) IN (((vt2.c1)>(vt2.c0)), ((v0.c2)<<(v0.c3)), v0.c1 COLLATE BINARY))  NULLS FIRST;
SELECT * FROM vt0 LEFT OUTER JOIN v0 ON 0Xffffffffde30ed93 LEFT OUTER JOIN vt2 ON 'f+[0ꗔzj' WHERE (CASE (- (v0.c3))  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c3)OR(v0.c0)) ELSE CAST(v0.c3 AS REAL) END);
SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON 0xffffffffde30ed93 LEFT OUTER JOIN vt2 ON 'f+[0ꗔzj' WHERE (((CASE (- (v0.c3))  WHEN CAST(v0.c2 AS REAL) THEN ((v0.c3)OR(v0.c0)) ELSE CAST(v0.c3 AS REAL) END)AND(((UNLIKELY(v0.c3)) NOT BETWEEN (((vt2.c1) NOT BETWEEN (NULL) AND (v0.c1))) AND ((v0.c3 IN (vt0.c0))))))) ORDER BY (~ (((((((v0.c2)OR('-567218797')))OR(v0.c2)))AND(v0.c2)))), (((((vt2.c1)AND(v0.c0)))OR(v0.c2)) IN (((vt2.c1)>(vt2.c0)), ((v0.c2)<<(v0.c3)), v0.c1 COLLATE BINARY))  NULLS FIRST INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN v0 ON -567218797 LEFT OUTER JOIN vt2 ON 'f+[0ꗔzj' WHERE (((CASE WHEN vt2.c0 THEN vt2.c1 WHEN v0.c2 THEN v0.c2 WHEN 0x7c7bfc20 THEN v0.c0 WHEN v0.c1 THEN v0.c3 ELSE v0.c0 END) BETWEEN (((v0.c1)GLOB(v0.c1))) AND (((vt2.c1) NOTNULL)))) ORDER BY (~ (((((((v0.c2)OR('-567218797')))OR(v0.c2)))AND(v0.c2)))), (((((vt2.c1)AND(v0.c0)))OR(v0.c2)) IN (((vt2.c1)>(vt2.c0)), ((v0.c2)<<(v0.c3)), v0.c1 COLLATE BINARY))  NULLS FIRST;
SELECT COUNT(*) FROM v0, vt2 WHERE ((((vt2.c1)) BETWEEN ((((((v0.c0)AND(v0.c2)))OR(v0.c0)))) AND ((HEX('NwjBWKf!T')))));
SELECT DISTINCT COUNT(*) FROM v0, vt2 WHERE ((((((vt2.c1)) BETWEEN ((((((v0.c0)AND(v0.c2)))OR(v0.c0)))) AND ((HEX('NwjBWKf!T')))))AND((((v0.c1)>=(vt2.c1)) IN (((vt2.c1)<(vt2.c1))))))) ORDER BY ((((v0.c1) BETWEEN (v0.c0) AND (vt2.c0))) IS TRUE) ASC  NULLS FIRST, ((((((v0.c2)OR(v0.c1)))AND(vt2.c0))) BETWEEN (((v0.c2) IS FALSE)) AND (((vt2.c0)||(vt2.c1))));
SELECT MIN(vt2.c1) FROM vt2 WHERE ((- (CAST(vt2.c0 AS TEXT)))) ORDER BY NULL DESC, ((((((vt2.c1 COLLATE RTRIM)AND(LIKELIHOOD(vt2.c1, x'7c'))))AND(((vt2.c1)>=(vt2.c1)))))OR(((vt2.c1)||(vt2.c0)))) ASC;
SELECT DISTINCT MIN(vt2.c1) FROM vt2 WHERE ((- (CAST(vt2.c0 AS TEXT)))) ORDER BY ((((vt2.c1) NOTNULL)) IS FALSE) LIMIT 0X2;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (CAST(CASE vt2.c1  WHEN v0.c3 THEN v0.c2 WHEN v0.c2 THEN v0.c1 ELSE vt2.c1 END AS BLOB)) ORDER BY CAST(vt0.c0 COLLATE NOCASE AS NUMERIC) ASC  NULLS LAST, ((vt0.c0 COLLATE NOCASE) NOT BETWEEN (CAST(v0.c0 AS TEXT)) AND (NULL))  NULLS LAST, CASE v0.c3  WHEN vt2.c0 COLLATE NOCASE THEN '0.9873959024305637' WHEN CASE vt2.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END THEN ((v0.c0) IS FALSE) WHEN (vt2.c0 IN (vt2.c1)) THEN ((0.46848189259721085) NOT BETWEEN (v0.c0) AND (v0.c1)) END;
SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (((CAST(CASE vt2.c1  WHEN v0.c3 THEN v0.c2 WHEN v0.c2 THEN v0.c1 ELSE vt2.c1 END AS BLOB))AND((NOT ((v0.c1 IN ())))))) ORDER BY (((+ (vt2.c0)))LIKE(v0.c1)) LIMIT 0x1 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (CAST(((vt2.c0) BETWEEN (v0.c1) AND (v0.c2)) AS REAL)) ORDER BY (((+ (vt2.c0)))LIKE(v0.c1)) LIMIT 0X1;
SELECT * FROM vt2 WHERE (((((vt2.c0) NOT NULL)) NOT NULL));
SELECT DISTINCT * FROM vt2 NOT INDEXED WHERE (((((vt2.c0) NOT NULL)) NOT NULL)) INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((vt2.c0)) NOT BETWEEN (((((vt2.c0, vt2.c1, '7', vt2.c0)) BETWEEN ((vt2.c1, vt2.c0, vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c1, vt2.c0, 'W8D>N'))))) AND (((((vt2.c1, vt2.c1))<>((vt2.c1, vt2.c1)))))));
SELECT * FROM vt2 WHERE (((((vt2.c0) NOT NULL)) NOT NULL));
SELECT DISTINCT * FROM vt2 NOT INDEXED WHERE (((((vt2.c0) NOT NULL)) NOT NULL)) INTERSECT SELECT DISTINCT * FROM vt2 WHERE ((((vt2.c0)) NOT BETWEEN (((((vt2.c0, vt2.c1, '7', vt2.c0)) BETWEEN ((vt2.c1, vt2.c0, vt2.c1, vt2.c1)) AND ((vt2.c0, vt2.c1, vt2.c0, 'W8D>N'))))) AND (((((vt2.c1, vt2.c1))<>((vt2.c1, vt2.c1)))))));
SELECT * FROM vt2, vt0, v0 WHERE (((((v0.c2 IN ())))<>((v0.c3 COLLATE BINARY)))) ORDER BY ((v0.c3 COLLATE NOCASE)IS(((((vt0.c0)OR(vt2.c1)))OR(v0.c2))));
SELECT DISTINCT * FROM vt2, vt0, v0 NOT INDEXED WHERE (((((v0.c2 IN ())))>((v0.c3 COLLATE BINARY)))) ORDER BY ((v0.c3 COLLATE NOCASE)IS(((((vt0.c0)OR(vt2.c1)))OR(v0.c2)))) LIMIT 0x1;
SELECT * FROM vt2, vt0, v0 WHERE (((((v0.c2 IN ())))<>((v0.c3 COLLATE BINARY)))) ORDER BY ((v0.c3 COLLATE NOCASE)IS(((((vt0.c0)OR(vt2.c1)))OR(v0.c2))));
SELECT DISTINCT * FROM vt2, vt0, v0 NOT INDEXED WHERE (((((v0.c2 IN ())))>((v0.c3 COLLATE BINARY)))) ORDER BY ((v0.c3 COLLATE NOCASE)IS(((((vt0.c0)OR(vt2.c1)))OR(v0.c2)))) LIMIT 0x1;
SELECT ALL COUNT(*) FROM v0 WHERE ((+ (CASE v0.c2  WHEN v0.c2 THEN v0.c3 ELSE v0.c2 END))) ORDER BY ((- (v0.c2)) IN ()), v0.c0  NULLS LAST;
SELECT DISTINCT COUNT(*) FROM v0 WHERE ((((+ (CASE v0.c2  WHEN v0.c2 THEN v0.c3 ELSE v0.c2 END)))AND(LOWER(((v0.c3)-(v0.c1)))))) ORDER BY IFNULL(DISTINCT x'2e', v0.c1) COLLATE NOCASE ASC, (((v0.c2 IN ())) NOT BETWEEN ((v0.c0 IN (v0.c1))) AND (((NULL)>>(0.7318959401328076)))) DESC, (((((v0.c2) NOTNULL)))<(((('UNU/O㻷TXn')&(v0.c1))))) LIMIT 1 INTERSECT SELECT DISTINCT COUNT(*) FROM v0 WHERE (CAST(((v0.c0)<(v0.c1)) AS BLOB)) ORDER BY IFNULL(DISTINCT x'2e', v0.c1) COLLATE NOCASE ASC, (((v0.c2 IN ())) NOT BETWEEN ((v0.c0 IN (v0.c1))) AND (((NULL)>>(0.7318959401328076)))) DESC, (((((v0.c2) NOTNULL)))<(((('UNU/O㻷TXn')&(v0.c1))))) LIMIT 1;
SELECT ALL * FROM v0 WHERE (v0.c0 COLLATE RTRIM) ORDER BY v0.c0 ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((v0.c0 COLLATE RTRIM)AND(((CAST(v0.c3 AS BLOB))/(x'256d'))))) ORDER BY (((((((v0.c1)AND(v0.c2)))OR(v0.c3)), v0.c2))==((CASE 0x3c7cf9a7  WHEN v0.c0 THEN v0.c1 END, UNLIKELY(v0.c0)))) ASC  NULLS FIRST, ((((((((v0.c3)AND(NULL)))OR(v0.c0)))OR(v0.c3))) ISNULL) DESC, 0xffffffff8ca30fc2 LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((((v0.c2)==(v0.c3)))AND(((((((((0Xffffffffc405bf03)AND(v0.c0)))OR(v0.c3)))AND(v0.c1)))AND(v0.c0)))))AND(((v0.c1) NOTNULL)))) ORDER BY (((((((v0.c1)AND(v0.c2)))OR(v0.c3)), v0.c2))==((CASE 0X3c7cf9a7  WHEN v0.c0 THEN v0.c1 END, UNLIKELY(v0.c0)))) ASC  NULLS FIRST, ((((((((v0.c3)AND(NULL)))OR(v0.c0)))OR(v0.c3))) ISNULL) DESC, -1935470654 LIMIT 0X0;
SELECT ALL * FROM v0 WHERE (v0.c0 COLLATE RTRIM) ORDER BY v0.c0 ASC  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((v0.c0 COLLATE RTRIM)AND(((CAST(v0.c3 AS BLOB))/(x'256d'))))) ORDER BY (((((((v0.c1)AND(v0.c2)))OR(v0.c3)), v0.c2))==((CASE 0x3c7cf9a7  WHEN v0.c0 THEN v0.c1 END, UNLIKELY(v0.c0)))) ASC  NULLS FIRST, ((((((((v0.c3)AND(NULL)))OR(v0.c0)))OR(v0.c3))) ISNULL) DESC, 0xffffffff8ca30fc2 LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (((((((v0.c2)==(v0.c3)))AND(((((((((0Xffffffffc405bf03)AND(v0.c0)))OR(v0.c3)))AND(v0.c1)))AND(v0.c0)))))AND(((v0.c1) NOTNULL)))) ORDER BY (((((((v0.c1)AND(v0.c2)))OR(v0.c3)), v0.c2))==((CASE 0X3c7cf9a7  WHEN v0.c0 THEN v0.c1 END, UNLIKELY(v0.c0)))) ASC  NULLS FIRST, ((((((((v0.c3)AND(NULL)))OR(v0.c0)))OR(v0.c3))) ISNULL) DESC, -1935470654 LIMIT 0X0;
SELECT ALL COUNT(*) FROM vt0 WHERE (((CAST(vt0.c0 AS NUMERIC))GLOB(vt0.c0))) ORDER BY ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY COLLATE NOCASE ASC  NULLS FIRST, (((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) IS FALSE) ASC  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 WHERE (((((CAST(vt0.c0 AS NUMERIC))GLOB(vt0.c0)))AND(CASE WHEN ((vt0.c0)>=(vt0.c0)) THEN '-1935470654' WHEN ((x'48ada580') BETWEEN (vt0.c0) AND (vt0.c0)) THEN ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)) ELSE vt0.c0 END))) ORDER BY ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY COLLATE NOCASE ASC  NULLS FIRST, (((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) IS FALSE) ASC  NULLS LAST LIMIT 0X1 INTERSECT SELECT ALL COUNT(*) FROM vt0 WHERE (((CASE vt0.c0  WHEN '' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)>((vt0.c0 IN (vt0.c0))))) ORDER BY ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) COLLATE BINARY COLLATE NOCASE ASC  NULLS FIRST, (((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) IS FALSE) ASC  NULLS LAST LIMIT 1;
SELECT * FROM vt0 WHERE (0.4383139150766179);
SELECT * FROM vt0 WHERE (((0.4383139150766179)AND(vt0.c0))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE ((vt0.c0)%(vt0.c0))  WHEN UNLIKELY(DISTINCT vt0.c0) THEN ((vt0.c0)IS(vt0.c0)) ELSE ((vt0.c0) IS TRUE) END) LIMIT 0x0;
SELECT * FROM vt0 WHERE (0.4383139150766179);
SELECT * FROM vt0 WHERE (((0.4383139150766179)AND(vt0.c0))) LIMIT 0 INTERSECT SELECT ALL * FROM vt0 WHERE (CASE ((vt0.c0)%(vt0.c0))  WHEN UNLIKELY(DISTINCT vt0.c0) THEN ((vt0.c0)IS(vt0.c0)) ELSE ((vt0.c0) IS TRUE) END) LIMIT 0x0;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c0 IN (v0.c0, vt2.c1))) ISNULL));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((v0.c0 IN (v0.c0))) ISNULL))AND((((+ (v0.c0))) NOT BETWEEN (IFNULL(DISTINCT v0.c0, x'')) AND (((((((((v0.c2)OR(v0.c2)))AND(v0.c0)))OR(v0.c2)))AND(x'3b')))))));
SELECT ALL * FROM vt0, v0, vt2 WHERE ((((v0.c0 IN (v0.c0, vt2.c1))) ISNULL));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((((((v0.c0 IN (v0.c0))) ISNULL))AND((((+ (v0.c0))) NOT BETWEEN (IFNULL(DISTINCT v0.c0, x'')) AND (((((((((v0.c2)OR(v0.c2)))AND(v0.c0)))OR(v0.c2)))AND(x'3b')))))));
SELECT ALL COUNT(*) FROM vt0, v0 WHERE ((((v0.c1 IN ())) IS TRUE));
SELECT DISTINCT COUNT(*) FROM vt0, v0 WHERE ((((v0.c1 IN ())) IS TRUE)) LIMIT 2;
SELECT * FROM v0 WHERE (((((-996848020) ISNULL))&(((v0.c0)<>(v0.c2)))));
SELECT DISTINCT * FROM v0 WHERE (((((-996848020) ISNULL))&(((v0.c0)<(v0.c2))))) ORDER BY CASE WHEN ((v0.c0)IS NOT(v0.c3)) THEN ((v0.c3)AND(v0.c2)) WHEN v0.c0 THEN COALESCE(v0.c3, v0.c2) ELSE ((v0.c3) BETWEEN (v0.c3) AND ('-139269436')) END LIMIT 0X1;
SELECT * FROM v0 WHERE (((((-996848020) ISNULL))&(((v0.c0)<>(v0.c2)))));
SELECT DISTINCT * FROM v0 WHERE (((((-996848020) ISNULL))&(((v0.c0)<(v0.c2))))) ORDER BY CASE WHEN ((v0.c0)IS NOT(v0.c3)) THEN ((v0.c3)AND(v0.c2)) WHEN v0.c0 THEN COALESCE(v0.c3, v0.c2) ELSE ((v0.c3) BETWEEN (v0.c3) AND ('-139269436')) END LIMIT 0X1;
SELECT ALL COUNT(*) FROM vt0 WHERE (vt0.c0);
SELECT ALL COUNT(*) FROM vt0 NOT INDEXED WHERE (vt0.c0) ORDER BY (((~ (vt0.c0)))IS NOT(((((((((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)))OR(vt0.c0))))  NULLS LAST, 0.7051132046982554, (CAST(vt0.c0 AS INTEGER) IN ((((vt0.c0, vt0.c0)) NOT BETWEEN (('yH}亟3M', vt0.c0)) AND ((vt0.c0, vt0.c0)))))  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt0, v0 WHERE (LIKELY(LIKELY(vt0.c0)));
SELECT DISTINCT * FROM vt0, v0 WHERE (LIKELY(LIKELY(vt0.c0))) LIMIT 0X2;
SELECT ALL * FROM vt0, v0 WHERE (LIKELY(LIKELY(vt0.c0)));
SELECT DISTINCT * FROM vt0, v0 WHERE (LIKELY(LIKELY(vt0.c0))) LIMIT 0X2;
SELECT ALL COUNT(*) FROM v0 CROSS JOIN vt2 ON (+ (v0.c0)) COLLATE BINARY INNER JOIN vt0 ON ((CAST(vt2.c1 AS NUMERIC))IS(CAST(vt0.c0 AS NUMERIC))) WHERE (((((((((((((v0.c2)AND(v0.c0)))OR(v0.c2)))OR(vt0.c0)))OR(v0.c1)))OR(vt0.c0))) BETWEEN (((vt2.c0) NOT BETWEEN (vt0.c0) AND (v0.c2))) AND ('0.16217142275629903'))) ORDER BY (((((((~ (v0.c0)))AND(CASE vt2.c0  WHEN vt2.c0 THEN '738993246' ELSE v0.c0 END)))AND(vt0.c0 COLLATE BINARY)))OR(CASE WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c1 ELSE vt0.c0 END))  NULLS LAST, x'd8', CAST(NULL AS NUMERIC) ASC;
SELECT DISTINCT COUNT(*) FROM v0 CROSS JOIN vt2 ON (+ (v0.c0)) COLLATE BINARY INNER JOIN vt0 ON ((CAST(vt2.c1 AS NUMERIC))IS(CAST(vt0.c0 AS NUMERIC))) WHERE (((((((((((((((v0.c2)AND(v0.c0)))OR(v0.c2)))OR(vt0.c0)))OR(v0.c1)))OR(vt0.c0))) BETWEEN (((vt2.c0) NOT BETWEEN (vt0.c0) AND (v0.c2))) AND ('0.16217142275629903')))AND(CAST(((v0.c3) IS FALSE) AS NUMERIC)))) ORDER BY (((((((~ (v0.c0)))AND(CASE vt2.c0  WHEN vt2.c0 THEN '738993246' ELSE v0.c0 END)))AND(vt0.c0 COLLATE BINARY)))OR(CASE WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c1 ELSE vt0.c0 END))  NULLS LAST, x'd8', CAST(NULL AS NUMERIC) ASC INTERSECT SELECT DISTINCT COUNT(*) FROM v0 CROSS JOIN vt2 ON (+ (v0.c0)) COLLATE BINARY INNER JOIN vt0 ON ((CAST(vt2.c1 AS NUMERIC))IS(CAST(vt0.c0 AS NUMERIC))) WHERE (((CASE vt0.c0  WHEN vt2.c1 THEN vt0.c0 END) BETWEEN (((vt2.c0)%(v0.c0))) AND (CASE WHEN vt2.c0 THEN v0.c1 WHEN v0.c2 THEN vt2.c1 END))) ORDER BY (((((((~ (v0.c0)))AND(CASE vt2.c0  WHEN vt2.c0 THEN '738993246' ELSE v0.c0 END)))AND(vt0.c0 COLLATE BINARY)))OR(CASE WHEN v0.c1 THEN vt2.c0 WHEN vt2.c0 THEN v0.c1 ELSE vt0.c0 END))  NULLS LAST, x'd8', CAST(NULL AS NUMERIC) ASC;
SELECT MIN(v0.c3) FROM v0 LEFT OUTER JOIN vt0 ON ((MAX(vt0.c0, vt2.c1))IS(json_array(v0.c3, vt2.c0, vt2.c0))) CROSS JOIN vt2 ON ((((vt0.c0)OR(v0.c1)))GLOB(CAST(vt2.c1 AS INTEGER))) WHERE (vt2.c0) ORDER BY ((v0.c3 COLLATE RTRIM) NOT NULL), v0.c1 DESC;
SELECT MIN(v0.c3) FROM v0 INNER JOIN vt0 ON ((MAX(vt0.c0, vt2.c1))IS(json_array(v0.c3, vt2.c0, vt2.c0))) CROSS JOIN vt2 ON ((((vt0.c0)OR(v0.c1)))GLOB(CAST(vt2.c1 AS INTEGER))) WHERE (((vt2.c0)AND((((((((((((v0.c1))<=(('w7o'))))OR(((x'') BETWEEN (v0.c3) AND (vt2.c1)))))OR(v0.c0)))OR(((v0.c3) BETWEEN (v0.c0) AND (v0.c1)))))OR(((vt2.c0) NOTNULL)))))) ORDER BY ((v0.c3 COLLATE RTRIM) NOT NULL), v0.c1 DESC LIMIT 1 INTERSECT SELECT MIN(v0.c3) FROM v0 INNER JOIN vt0 ON ((MAX(vt0.c0, vt2.c1))IS(json_array(v0.c3, vt2.c0, vt2.c0))) CROSS JOIN vt2 ON ((((vt0.c0)OR(v0.c1)))GLOB(CAST(vt2.c1 AS INTEGER))) WHERE (((((vt0.c0)|(vt2.c1)))<=(v0.c0))) ORDER BY ((v0.c3 COLLATE RTRIM) NOT NULL), v0.c1 DESC LIMIT 1;
SELECT COUNT(*) FROM vt2 INNER JOIN vt0 ON json_quote((vt0.c0 IN (vt2.c1, vt0.c0))) WHERE (((vt2.c0)LIKE(vt0.c0)) COLLATE BINARY COLLATE BINARY);
SELECT ALL COUNT(*) FROM vt2 INNER JOIN vt0 ON json_quote((vt0.c0 IN (vt2.c1, vt0.c0))) WHERE (((vt2.c0)LIKE(vt0.c0)) COLLATE BINARY COLLATE BINARY);
SELECT MAX(vt0.c0) FROM vt0 LEFT OUTER JOIN vt2 ON NULL WHERE (LIKE(TRIM(vt2.c1, vt2.c0), vt2.c0 COLLATE RTRIM, 'X'));
SELECT DISTINCT MAX(vt0.c0) FROM vt0 INNER JOIN vt2 ON NULL WHERE (LIKE(TRIM(vt2.c1, vt2.c0), vt2.c0 COLLATE RTRIM, 'X')) ORDER BY (((vt0.c0 IN (vt2.c1)))&(((vt2.c1)%(vt2.c0))))  NULLS FIRST, (~ (vt0.c0 COLLATE RTRIM)), ((vt0.c0)/(vt0.c0)) COLLATE RTRIM ASC  NULLS FIRST LIMIT 0X0;
SELECT ALL * FROM vt0, v0 WHERE ((((((v0.c0) ISNULL)))>=((((v0.c0)%(v0.c1)))))) ORDER BY (~ (0.8510724940730833)) DESC;
SELECT * FROM vt0, v0 WHERE ((((((v0.c0) ISNULL)))>((((v0.c0)%(v0.c1)))))) ORDER BY (~ (0.8510724940730833)) DESC;
SELECT ALL * FROM vt0, v0 WHERE ((((((v0.c0) ISNULL)))>=((((v0.c0)%(v0.c1)))))) ORDER BY (~ (0.8510724940730833)) DESC;
SELECT * FROM vt0, v0 WHERE ((((((v0.c0) ISNULL)))>((((v0.c0)%(v0.c1)))))) ORDER BY (~ (0.8510724940730833)) DESC;
SELECT ALL COUNT(*) FROM vt0, vt2, v0 WHERE (((vt2.c1) NOT NULL)) ORDER BY (((CAST(v0.c3 AS BLOB), ((v0.c2) BETWEEN (vt2.c0) AND (vt2.c0)), v0.c0 COLLATE NOCASE, (v0.c0 IN (vt2.c0, vt0.c0))))>=((((((((((((((vt2.c0)OR(v0.c0)))OR(NULL)))AND(v0.c1)))OR(x'')))AND(v0.c3)))OR(v0.c2)), ((v0.c0)>>(vt2.c0)), ((NULL)-(vt2.c1)), ((x'a5')<(vt2.c1))))) ASC  NULLS LAST;
SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (((((vt2.c1) NOT NULL))AND(((CASE v0.c2  WHEN vt2.c1 THEN v0.c0 END) NOT BETWEEN (((vt2.c1)>>(NULL))) AND (((vt0.c0)+(v0.c1))))))) ORDER BY (- (CAST(v0.c2 AS NUMERIC)))  NULLS LAST INTERSECT SELECT COUNT(*) FROM vt0, vt2, v0 WHERE (((CASE vt2.c0  WHEN vt2.c0 THEN v0.c1 ELSE v0.c1 END)<=(vt2.c0))) ORDER BY (- (CAST(v0.c2 AS NUMERIC)))  NULLS LAST;
SELECT MAX(v0.c0) FROM vt2, v0 WHERE ((NOT ((~ (NULL)))));
SELECT ALL MAX(v0.c0) FROM vt2, v0 WHERE ((NOT ((~ (NULL)))));
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON CAST((vt2.c1 IN (v0.c2)) AS REAL) WHERE (((((((((((v0.c1) NOTNULL))OR(((v0.c0)==(v0.c1)))))AND(CAST(vt2.c1 AS INTEGER))))AND((NOT (vt0.c0)))))OR(((v0.c2)/(v0.c2)))));
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON CAST((vt2.c1 IN (v0.c2)) AS REAL) WHERE (((((((((((v0.c1) NOTNULL))OR(((v0.c0)=(v0.c1)))))AND(CAST(vt2.c1 AS INTEGER))))AND((NOT (vt0.c0)))))OR(((v0.c2)/(v0.c2))))) ORDER BY (- (((vt2.c1)AND(v0.c2)))) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt2, v0 LEFT OUTER JOIN vt0 ON CAST((vt2.c1 IN (v0.c2)) AS REAL) WHERE (((CAST(v0.c2 AS NUMERIC))>(((v0.c1) IS FALSE)))) ORDER BY (- (((vt2.c1)AND(v0.c2)))) ASC  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON CAST((vt2.c1 IN (v0.c2)) AS REAL) WHERE (((((((((((v0.c1) NOTNULL))OR(((v0.c0)==(v0.c1)))))AND(CAST(vt2.c1 AS INTEGER))))AND((NOT (vt0.c0)))))OR(((v0.c2)/(v0.c2)))));
SELECT * FROM vt2, v0 LEFT OUTER JOIN vt0 ON CAST((vt2.c1 IN (v0.c2)) AS REAL) WHERE (((((((((((v0.c1) NOTNULL))OR(((v0.c0)=(v0.c1)))))AND(CAST(vt2.c1 AS INTEGER))))AND((NOT (vt0.c0)))))OR(((v0.c2)/(v0.c2))))) ORDER BY (- (((vt2.c1)AND(v0.c2)))) ASC  NULLS FIRST LIMIT 1 INTERSECT SELECT ALL * FROM vt2, v0 LEFT OUTER JOIN vt0 ON CAST((vt2.c1 IN (v0.c2)) AS REAL) WHERE (((CAST(v0.c2 AS NUMERIC))>(((v0.c1) IS FALSE)))) ORDER BY (- (((vt2.c1)AND(v0.c2)))) ASC  NULLS FIRST LIMIT 0X1;
SELECT * FROM vt0, vt2 WHERE ('s7sk
');
SELECT ALL * FROM vt0, vt2 WHERE ('s7sk
') ORDER BY CAST(((vt2.c0) IS FALSE) AS NUMERIC), (((CAST(vt0.c0 AS TEXT)))>=(((NOT (vt2.c1))))) ASC LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ((~ (CAST(x'f517' AS REAL)))) ORDER BY CAST(((vt2.c0) IS FALSE) AS NUMERIC), (((CAST(vt0.c0 AS TEXT)))>=(((NOT (vt2.c1))))) ASC LIMIT 0;
SELECT * FROM vt0, vt2 WHERE ('s7sk
');
SELECT ALL * FROM vt0, vt2 WHERE ('s7sk
') ORDER BY CAST(((vt2.c0) IS FALSE) AS NUMERIC), (((CAST(vt0.c0 AS TEXT)))>=(((NOT (vt2.c1))))) ASC LIMIT 0 INTERSECT SELECT ALL * FROM vt0, vt2 WHERE ((~ (CAST(x'f517' AS REAL)))) ORDER BY CAST(((vt2.c0) IS FALSE) AS NUMERIC), (((CAST(vt0.c0 AS TEXT)))>=(((NOT (vt2.c1))))) ASC LIMIT 0;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((CASE v0.c1  WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN 0.6817661923129966 ELSE v0.c3 END IN (NULL, ((vt2.c1)+(v0.c2)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((CASE v0.c1  WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN 0.6817661923129966 ELSE v0.c3 END IN (NULL, ((vt2.c1)+(v0.c2))))) LIMIT 0X2;
SELECT ALL * FROM v0, vt2, vt0 WHERE ((CASE v0.c1  WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN 0.6817661923129966 ELSE v0.c3 END IN (NULL, ((vt2.c1)+(v0.c2)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE ((CASE v0.c1  WHEN v0.c3 THEN v0.c1 WHEN vt2.c0 THEN 0.6817661923129966 ELSE v0.c3 END IN (NULL, ((vt2.c1)+(v0.c2))))) LIMIT 0X2;
SELECT MIN(v0.c0) FROM v0, vt0 WHERE (CAST((v0.c3 IN (v0.c2, v0.c0)) AS BLOB));
SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE (CAST((v0.c3 IN (v0.c2, v0.c0)) AS BLOB)) ORDER BY ((((((vt0.c0)OR(v0.c1)))AND(v0.c0))) BETWEEN ((+ (v0.c0))) AND (NULL)) ASC  NULLS FIRST, (v0.c2 IN (v0.c2, v0.c3)) COLLATE RTRIM, json_array_length(vt0.c0) COLLATE RTRIM COLLATE BINARY DESC LIMIT 0X0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((CAST(v0.c1 AS INTEGER))IS(v0.c0)));
SELECT * FROM vt2, v0, vt0 WHERE (((((CAST(v0.c1 AS INTEGER))IS(v0.c0)))AND(CAST(((vt2.c1) NOT NULL) AS BLOB)))) ORDER BY CAST(((v0.c2) NOT NULL) AS INTEGER)  NULLS FIRST, ((v0.c1) IS TRUE)  NULLS LAST, ((((vt2.c0)OR((v0.c2 IN (v0.c3, v0.c2)))))AND((+ (v0.c0)))) ASC, CAST(vt2.c0 COLLATE BINARY AS INTEGER) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (((CAST(v0.c0 AS NUMERIC))IS(HEX(vt2.c1)))) ORDER BY CAST(((v0.c2) NOT NULL) AS INTEGER)  NULLS FIRST, ((v0.c1) IS TRUE)  NULLS LAST, ((((vt2.c0)OR((v0.c2 IN (v0.c3, v0.c2)))))AND((+ (v0.c0)))) ASC, CAST(vt2.c0 COLLATE BINARY AS INTEGER) DESC  NULLS FIRST LIMIT 0x0;
SELECT ALL * FROM vt2, v0, vt0 WHERE (((CAST(v0.c1 AS INTEGER))IS(v0.c0)));
SELECT * FROM vt2, v0, vt0 WHERE (((((CAST(v0.c1 AS INTEGER))IS(v0.c0)))AND(CAST(((vt2.c1) NOT NULL) AS BLOB)))) ORDER BY CAST(((v0.c2) NOT NULL) AS INTEGER)  NULLS FIRST, ((v0.c1) IS TRUE)  NULLS LAST, ((((vt2.c0)OR((v0.c2 IN (v0.c3, v0.c2)))))AND((+ (v0.c0)))) ASC, CAST(vt2.c0 COLLATE BINARY AS INTEGER) DESC  NULLS FIRST LIMIT 0x0 INTERSECT SELECT * FROM vt2, v0, vt0 WHERE (((CAST(v0.c0 AS NUMERIC))IS(HEX(vt2.c1)))) ORDER BY CAST(((v0.c2) NOT NULL) AS INTEGER)  NULLS FIRST, ((v0.c1) IS TRUE)  NULLS LAST, ((((vt2.c0)OR((v0.c2 IN (v0.c3, v0.c2)))))AND((+ (v0.c0)))) ASC, CAST(vt2.c0 COLLATE BINARY AS INTEGER) DESC  NULLS FIRST LIMIT 0x0;
SELECT * FROM v0, vt2 WHERE (((LIKELY(DISTINCT v0.c1))=(CASE WHEN vt2.c0 THEN 0xfffffffff82c59d1 WHEN vt2.c0 THEN v0.c2 WHEN 0x1fbbbe66 THEN vt2.c0 ELSE 0.7692681980508119 END))) ORDER BY (~ (vt2.c1)), ((((vt2.c0)%(v0.c3)))/(CAST(v0.c2 AS REAL))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 WHERE (((((LIKELY(DISTINCT v0.c1))=(CASE WHEN vt2.c0 THEN -131311151 WHEN vt2.c0 THEN v0.c2 WHEN 0X1fbbbe66 THEN vt2.c0 ELSE 0.7692681980508119 END)))AND(((((v0.c2)>>(v0.c0)))LIKE(((NULL)OR(v0.c1))))))) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN (((v0.c2) NOTNULL)) AND (vt2.c1))  NULLS FIRST, (((NOT (vt2.c0))) BETWEEN (((v0.c3) NOT BETWEEN (v0.c0) AND (vt2.c0))) AND (((v0.c2) NOT NULL))) DESC INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (CAST((((((((((((('饍 ')AND(v0.c0)))OR(0xffffffffcd8d0d16)))OR(v0.c2)))AND(v0.c3)))AND(v0.c3)))AND(vt2.c0)) AS REAL)) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN (((v0.c2) NOTNULL)) AND (vt2.c1))  NULLS FIRST, (((NOT (vt2.c0))) BETWEEN (((v0.c3) NOT BETWEEN (v0.c0) AND (vt2.c0))) AND (((v0.c2) NOT NULL))) DESC;
SELECT * FROM v0, vt2 WHERE (((LIKELY(DISTINCT v0.c1))=(CASE WHEN vt2.c0 THEN 0xfffffffff82c59d1 WHEN vt2.c0 THEN v0.c2 WHEN 0x1fbbbe66 THEN vt2.c0 ELSE 0.7692681980508119 END))) ORDER BY (~ (vt2.c1)), ((((vt2.c0)%(v0.c3)))/(CAST(v0.c2 AS REAL))) DESC  NULLS FIRST;
SELECT DISTINCT * FROM v0, vt2 WHERE (((((LIKELY(DISTINCT v0.c1))=(CASE WHEN vt2.c0 THEN -131311151 WHEN vt2.c0 THEN v0.c2 WHEN 0X1fbbbe66 THEN vt2.c0 ELSE 0.7692681980508119 END)))AND(((((v0.c2)>>(v0.c0)))LIKE(((NULL)OR(v0.c1))))))) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN (((v0.c2) NOTNULL)) AND (vt2.c1))  NULLS FIRST, (((NOT (vt2.c0))) BETWEEN (((v0.c3) NOT BETWEEN (v0.c0) AND (vt2.c0))) AND (((v0.c2) NOT NULL))) DESC INTERSECT SELECT DISTINCT * FROM v0, vt2 WHERE (CAST((((((((((((('饍 ')AND(v0.c0)))OR(0xffffffffcd8d0d16)))OR(v0.c2)))AND(v0.c3)))AND(v0.c3)))AND(vt2.c0)) AS REAL)) ORDER BY ((CAST(v0.c0 AS TEXT)) BETWEEN (((v0.c2) NOTNULL)) AND (vt2.c1))  NULLS FIRST, (((NOT (vt2.c0))) BETWEEN (((v0.c3) NOT BETWEEN (v0.c0) AND (vt2.c0))) AND (((v0.c2) NOT NULL))) DESC;
SELECT ALL * FROM vt0 NATURAL JOIN v0 INNER JOIN vt2 ON IFNULL(DISTINCT (~ (vt2.c1)), CAST(v0.c2 AS REAL)) WHERE (((((((CAST(v0.c1 AS NUMERIC))AND(((((v0.c1)OR(v0.c3)))AND(x'')))))OR(CASE WHEN vt2.c0 THEN '0.6015802904256462' WHEN v0.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 ELSE v0.c3 END)))AND((vt0.c0 IN ()))));
SELECT * FROM vt0 NATURAL JOIN v0 INNER JOIN vt2 ON IFNULL(DISTINCT (~ (vt2.c1)), CAST(v0.c2 AS REAL)) WHERE (((((((((CAST(v0.c1 AS NUMERIC))AND(((((v0.c1)OR(v0.c3)))AND(x'')))))OR(CASE WHEN vt2.c0 THEN '0.6015802904256462' WHEN v0.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 ELSE v0.c3 END)))AND((vt0.c0 IN ()))))AND((((((((((+ (v0.c1)))AND(CASE vt2.c0  WHEN v0.c3 THEN v0.c1 END)))OR(CAST(v0.c3 AS NUMERIC))))OR(((vt2.c0) BETWEEN (vt0.c0) AND (vt0.c0)))))OR((v0.c3 IN (vt2.c0))))))) ORDER BY ((vt2.c0) NOT BETWEEN (v0.c1) AND ((vt2.c0 IN (v0.c3)))) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 NATURAL JOIN v0 INNER JOIN vt2 ON IFNULL(DISTINCT (~ (vt2.c1)), CAST(v0.c2 AS REAL)) WHERE ((((((vt2.c1)AND(v0.c2)))AND(v0.c3)) IN (-1450021716 COLLATE RTRIM))) ORDER BY ((vt2.c0) NOT BETWEEN (v0.c1) AND ((vt2.c0 IN (v0.c3)))) DESC  NULLS LAST;
SELECT ALL * FROM vt0 NATURAL JOIN v0 INNER JOIN vt2 ON IFNULL(DISTINCT (~ (vt2.c1)), CAST(v0.c2 AS REAL)) WHERE (((((((CAST(v0.c1 AS NUMERIC))AND(((((v0.c1)OR(v0.c3)))AND(x'')))))OR(CASE WHEN vt2.c0 THEN '0.6015802904256462' WHEN v0.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 ELSE v0.c3 END)))AND((vt0.c0 IN ()))));
SELECT * FROM vt0 NATURAL JOIN v0 INNER JOIN vt2 ON IFNULL(DISTINCT (~ (vt2.c1)), CAST(v0.c2 AS REAL)) WHERE (((((((((CAST(v0.c1 AS NUMERIC))AND(((((v0.c1)OR(v0.c3)))AND(x'')))))OR(CASE WHEN vt2.c0 THEN '0.6015802904256462' WHEN v0.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 ELSE v0.c3 END)))AND((vt0.c0 IN ()))))AND((((((((((+ (v0.c1)))AND(CASE vt2.c0  WHEN v0.c3 THEN v0.c1 END)))OR(CAST(v0.c3 AS NUMERIC))))OR(((vt2.c0) BETWEEN (vt0.c0) AND (vt0.c0)))))OR((v0.c3 IN (vt2.c0))))))) ORDER BY ((vt2.c0) NOT BETWEEN (v0.c1) AND ((vt2.c0 IN (v0.c3)))) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 NATURAL JOIN v0 INNER JOIN vt2 ON IFNULL(DISTINCT (~ (vt2.c1)), CAST(v0.c2 AS REAL)) WHERE ((((((vt2.c1)AND(v0.c2)))AND(v0.c3)) IN (-1450021716 COLLATE RTRIM))) ORDER BY ((vt2.c0) NOT BETWEEN (v0.c1) AND ((vt2.c0 IN (v0.c3)))) DESC  NULLS LAST;
SELECT MAX(vt0.c0) FROM vt0, v0, vt2 WHERE ((((v0.c3)) NOT BETWEEN ((((((((((vt2.c1)OR(vt2.c0)))AND(vt0.c0)))OR(v0.c1)))OR(v0.c1)))) AND ((((vt2.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))))) ORDER BY UNLIKELY(vt0.c0) ASC  NULLS FIRST;
SELECT DISTINCT MAX(vt0.c0) FROM vt0, v0, vt2 WHERE ((((v0.c3)) NOT BETWEEN ((((((((((vt2.c1)OR(vt2.c0)))AND(vt0.c0)))OR(v0.c1)))OR(v0.c1)))) AND ((((vt2.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))))) ORDER BY (((v0.c0)) BETWEEN ((v0.c2)) AND ((vt2.c1 COLLATE RTRIM))) LIMIT 2 INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM vt0, v0, vt2 WHERE ('') ORDER BY (((v0.c0)) BETWEEN ((v0.c2)) AND ((vt2.c1 COLLATE RTRIM))) LIMIT 2;
SELECT MIN(vt2.c0) FROM v0, vt2, vt0 WHERE (((v0.c1 IN ()) IN ()));
SELECT DISTINCT MIN(vt2.c0) FROM v0, vt2, vt0 WHERE (((((v0.c1 IN ()) IN ()))AND(x'edd024'))) INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM v0, vt2 NOT INDEXED, vt0 WHERE (((((((CAST(vt2.c0 AS BLOB))AND(v0.c1)))OR(CASE WHEN vt0.c0 THEN v0.c3 WHEN v0.c0 THEN v0.c1 WHEN x'07' THEN v0.c3 ELSE v0.c3 END)))OR((v0.c2 IN (v0.c2)))));
SELECT ALL COUNT(*) FROM vt0 WHERE (108260511) ORDER BY CAST(vt0.c0 COLLATE RTRIM AS INTEGER)  NULLS FIRST, (CASE vt0.c0  WHEN ',X' THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 'S#R.(#78*' END IN (0Xffffffff9063245d, ((vt0.c0)>=(vt0.c0)))) DESC  NULLS LAST, (NOT ('||U')) DESC;
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (((0X673ec9f)AND(((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)==(vt0.c0))))) ORDER BY (- (vt0.c0))  NULLS FIRST, CAST((((vt0.c0, vt0.c0, vt0.c0))>=(('1423227927', vt0.c0, vt0.c0))) AS BLOB)  NULLS LAST;
SELECT ALL * FROM vt2 WHERE (CASE CASE '1702837040'  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 END  WHEN '' THEN CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END WHEN (~ (vt2.c0)) THEN ((vt2.c1)%(vt2.c0)) ELSE (('456904830') BETWEEN (vt2.c0) AND (vt2.c1)) END);
SELECT ALL * FROM vt2 WHERE (((CASE CASE '1702837040'  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 END  WHEN '' THEN CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END WHEN (~ (vt2.c0)) THEN ((vt2.c1)%(vt2.c0)) ELSE (('456904830') BETWEEN (vt2.c0) AND (vt2.c1)) END)AND(((CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 END) BETWEEN ((((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c1)))) AND (CAST(vt2.c1 AS NUMERIC)))))) LIMIT 0x1;
SELECT ALL * FROM vt2 WHERE (CASE CASE '1702837040'  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 END  WHEN '' THEN CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END WHEN (~ (vt2.c0)) THEN ((vt2.c1)%(vt2.c0)) ELSE (('456904830') BETWEEN (vt2.c0) AND (vt2.c1)) END);
SELECT ALL * FROM vt2 WHERE (((CASE CASE '1702837040'  WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 END  WHEN '' THEN CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END WHEN (~ (vt2.c0)) THEN ((vt2.c1)%(vt2.c0)) ELSE (('456904830') BETWEEN (vt2.c0) AND (vt2.c1)) END)AND(((CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 END) BETWEEN ((((vt2.c1, vt2.c0, vt2.c0)) NOT BETWEEN ((vt2.c1, vt2.c0, vt2.c1)) AND ((vt2.c1, vt2.c1, vt2.c1)))) AND (CAST(vt2.c1 AS NUMERIC)))))) LIMIT 0x1;
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON (((vt0.c0) NOTNULL) IN (CASE '1707495942'  WHEN vt2.c1 THEN 3.82198455E8 WHEN -937369626 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)) WHERE (CASE WHEN UNLIKELY(DISTINCT vt0.c0) THEN ((vt2.c0)LIKE(vt0.c0)) WHEN 0.5373816410141934 THEN CASE vt2.c1  WHEN vt2.c1 THEN 0.4960245431324799 WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c0 END ELSE ((vt0.c0)&(vt2.c0)) END);
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON (((vt0.c0) NOTNULL) IN (CASE '1707495942'  WHEN vt2.c1 THEN 3.82198455E8 WHEN -937369626 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)) WHERE (((CASE WHEN UNLIKELY(DISTINCT vt0.c0) THEN ((vt2.c0)LIKE(vt0.c0)) WHEN 0.5373816410141934 THEN CASE vt2.c1  WHEN vt2.c1 THEN 0.4960245431324799 WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c0 END ELSE ((vt0.c0)&(vt2.c0)) END)AND(((((~ (vt2.c0))))>=((CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 END)))))) INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON (((vt0.c0) NOTNULL) IN (CASE '1707495942'  WHEN vt2.c1 THEN 3.82198455E8 WHEN -937369626 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)) WHERE ((((vt0.c0)) NOT BETWEEN ((vt2.c1)) AND ((CASE vt2.c1  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c0 END))));
SELECT * FROM vt0 LEFT OUTER JOIN vt2 ON (((vt0.c0) NOTNULL) IN (CASE '1707495942'  WHEN vt2.c1 THEN 3.82198455E8 WHEN -937369626 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)) WHERE (CASE WHEN UNLIKELY(DISTINCT vt0.c0) THEN ((vt2.c0)LIKE(vt0.c0)) WHEN 0.5373816410141934 THEN CASE vt2.c1  WHEN vt2.c1 THEN 0.4960245431324799 WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c0 END ELSE ((vt0.c0)&(vt2.c0)) END);
SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON (((vt0.c0) NOTNULL) IN (CASE '1707495942'  WHEN vt2.c1 THEN 3.82198455E8 WHEN -937369626 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)) WHERE (((CASE WHEN UNLIKELY(DISTINCT vt0.c0) THEN ((vt2.c0)LIKE(vt0.c0)) WHEN 0.5373816410141934 THEN CASE vt2.c1  WHEN vt2.c1 THEN 0.4960245431324799 WHEN vt0.c0 THEN vt2.c0 WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c0 END ELSE ((vt0.c0)&(vt2.c0)) END)AND(((((~ (vt2.c0))))>=((CASE WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 END)))))) INTERSECT SELECT DISTINCT * FROM vt0 INNER JOIN vt2 ON (((vt0.c0) NOTNULL) IN (CASE '1707495942'  WHEN vt2.c1 THEN 3.82198455E8 WHEN -937369626 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c0 END)) WHERE ((((vt0.c0)) NOT BETWEEN ((vt2.c1)) AND ((CASE vt2.c1  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c0 END))));
SELECT MAX(vt0.c0) FROM vt0 WHERE (((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) NOT NULL)) ORDER BY ((((((((vt0.c0 COLLATE RTRIM)AND(CASE WHEN vt0.c0 THEN 0.15792505246608557 END)))OR(('ug(' IN (0Xffffffffdb99ddaf)))))OR(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)))OR(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))), TOTAL_CHANGES() ASC, ((json_type(vt0.c0))<=(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) ASC;
SELECT DISTINCT MAX(vt0.c0) FROM vt0 WHERE (((((CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) NOT NULL))AND(CASE WHEN ((vt0.c0) NOTNULL) THEN (- (vt0.c0)) WHEN (vt0.c0 IN (vt0.c0)) THEN (+ (vt0.c0)) WHEN ((((vt0.c0)AND(vt0.c0)))AND(vt0.c0)) THEN '748096430' WHEN 0.34089269615436757 THEN ((vt0.c0) NOT BETWEEN (0.08986633047938875) AND (vt0.c0)) END))) ORDER BY ((((((((vt0.c0 COLLATE RTRIM)AND(CASE WHEN vt0.c0 THEN 0.15792505246608557 END)))OR(('ug(' IN (0Xffffffffdb99ddaf)))))OR(CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END)))OR(((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))), TOTAL_CHANGES() ASC, ((json_type(vt0.c0))<=(CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)) ASC LIMIT 2;
SELECT ALL MIN(v0.c2) FROM v0 WHERE (NULL) ORDER BY ((v0.c1)==(NULL))  NULLS FIRST;
SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE (NULL) ORDER BY ((((v0.c2)GLOB(v0.c2))) BETWEEN (CASE WHEN v0.c3 THEN v0.c3 WHEN v0.c3 THEN v0.c1 END) AND (v0.c3)) DESC, ((((v0.c0)OR(((v0.c0) ISNULL))))OR(((NULL)&(v0.c0)))) DESC LIMIT 0x2 INTERSECT SELECT DISTINCT MIN(v0.c2) FROM v0 WHERE ((NOT (((v0.c1) BETWEEN (v0.c0) AND (v0.c0))))) ORDER BY ((((v0.c2)GLOB(v0.c2))) BETWEEN (CASE WHEN v0.c3 THEN v0.c3 WHEN v0.c3 THEN v0.c1 END) AND (v0.c3)) DESC, ((((v0.c0)OR(((v0.c0) ISNULL))))OR(((NULL)&(v0.c0)))) DESC LIMIT 2;
SELECT ALL COUNT(*) FROM vt2, vt0 WHERE ((vt2.c1 COLLATE BINARY IN (vt2.c1))) ORDER BY ((((((vt2.c0)>(vt2.c0)))OR(vt0.c0)))OR(((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))) ASC, ((((((vt0.c0)AND(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) COLLATE RTRIM ASC  NULLS LAST;
SELECT COUNT(*) FROM vt2, vt0 WHERE ((vt2.c1 COLLATE BINARY IN (vt2.c1))) ORDER BY ((((((vt2.c0)>(vt2.c0)))OR(vt0.c0)))OR(((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))) ASC, ((((((vt0.c0)AND(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) COLLATE RTRIM ASC  NULLS LAST INTERSECT SELECT COUNT(*) FROM vt2, vt0 WHERE (((((((((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)))OR(((vt2.c1) NOTNULL))))OR(vt2.c1 COLLATE NOCASE)))AND(vt2.c1))) ORDER BY ((((((vt2.c0)>(vt2.c0)))OR(vt0.c0)))OR(((((vt2.c0)OR(vt2.c0)))OR(vt2.c0)))) ASC, ((((((vt0.c0)AND(vt2.c0)))OR(vt2.c1)))AND(vt2.c0)) COLLATE RTRIM ASC  NULLS LAST;
SELECT ALL MAX(v0.c1) FROM vt0, v0 WHERE (((CASE NULL  WHEN v0.c3 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END)<>(((v0.c3) NOTNULL)))) ORDER BY ((v0.c1)+(462555423));
SELECT MAX(v0.c1) FROM vt0, v0 WHERE (((((CASE NULL  WHEN v0.c3 THEN v0.c2 WHEN v0.c2 THEN v0.c0 END)>(((v0.c3) NOTNULL))))AND((((v0.c2, ((v0.c3) NOT BETWEEN (v0.c2) AND (v0.c0))))>=((((vt0.c0) BETWEEN (v0.c1) AND (v0.c0)), (((vt0.c0)) BETWEEN ((v0.c3)) AND ((NULL))))))))) ORDER BY CAST(((((v0.c3)OR(v0.c0)))OR(v0.c1)) AS REAL) DESC LIMIT 0X2;
SELECT COUNT(*) FROM vt2, vt0 NATURAL JOIN v0 WHERE (((HEX(v0.c3))LIKE((~ (vt2.c0)))));
SELECT COUNT(*) FROM vt2, vt0 NATURAL JOIN v0 WHERE (((((HEX(v0.c3))LIKE((~ (vt2.c0)))))AND(vt2.c0))) ORDER BY v0.c0 DESC  NULLS FIRST, ((((vt2.c0)/(vt2.c1)))AND((((vt2.c0)) NOT BETWEEN ((vt2.c0)) AND ((v0.c1))))) LIMIT 0X0;
SELECT * FROM v0 WHERE (CAST((((v0.c3, v0.c2, v0.c0))>=((v0.c2, v0.c0, NULL))) AS NUMERIC));
SELECT DISTINCT * FROM v0 WHERE (((CAST((((v0.c3, v0.c2, v0.c0))>=((v0.c2, v0.c0, NULL))) AS NUMERIC))AND(((CAST(v0.c3 AS NUMERIC)) IS TRUE)))) ORDER BY ((((json_remove(v0.c3, 0.4311777796941849))AND((~ (v0.c0)))))OR(0.44853387859574423)) ASC  NULLS LAST, (v0.c3 IN ());
SELECT * FROM v0 WHERE (CAST((((v0.c3, v0.c2, v0.c0))>=((v0.c2, v0.c0, NULL))) AS NUMERIC));
SELECT DISTINCT * FROM v0 WHERE (((CAST((((v0.c3, v0.c2, v0.c0))>=((v0.c2, v0.c0, NULL))) AS NUMERIC))AND(((CAST(v0.c3 AS NUMERIC)) IS TRUE)))) ORDER BY ((((json_remove(v0.c3, 0.4311777796941849))AND((~ (v0.c0)))))OR(0.44853387859574423)) ASC  NULLS LAST, (v0.c3 IN ());
SELECT * FROM vt0, v0 WHERE (LAST_INSERT_ROWID());
SELECT * FROM vt0, v0 WHERE (((LAST_INSERT_ROWID())AND(CAST(v0.c2 COLLATE BINARY AS TEXT))));
SELECT * FROM vt0, v0 WHERE (LAST_INSERT_ROWID());
SELECT * FROM vt0, v0 WHERE (((LAST_INSERT_ROWID())AND(CAST(v0.c2 COLLATE BINARY AS TEXT))));
SELECT ALL * FROM vt0, v0 WHERE (NULL);
SELECT * FROM vt0, v0 WHERE (NULL) LIMIT 0X2 INTERSECT SELECT ALL * FROM vt0, v0 WHERE (v0.c1) LIMIT 0x2;
SELECT ALL * FROM vt0, v0 WHERE (NULL);
SELECT * FROM vt0, v0 WHERE (NULL) LIMIT 0X2 INTERSECT SELECT ALL * FROM vt0, v0 WHERE (v0.c1) LIMIT 0x2;
SELECT COUNT(*) FROM vt2, vt0, v0 WHERE (CASE WHEN CASE WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN 0.024244574675355457 WHEN vt2.c1 THEN vt0.c0 END THEN ((((((((v0.c1)AND(NULL)))AND(vt0.c0)))OR(vt2.c0)))OR(vt2.c1)) ELSE ((v0.c1) NOT BETWEEN (v0.c0) AND ('e4')) END);
SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (CASE WHEN CASE WHEN vt0.c0 THEN v0.c1 WHEN vt2.c0 THEN 0.024244574675355457 WHEN vt2.c1 THEN vt0.c0 END THEN ((((((((v0.c1)AND(NULL)))AND(vt0.c0)))OR(vt2.c0)))OR(vt2.c1)) ELSE ((v0.c1) NOT BETWEEN (v0.c0) AND ('e4')) END) LIMIT 0 INTERSECT SELECT DISTINCT COUNT(*) FROM vt2, vt0, v0 WHERE (CASE WHEN NULL THEN ((((((((((v0.c3)OR(v0.c0)))AND(v0.c0)))OR(vt2.c1)))OR(v0.c3)))AND(v0.c1)) ELSE ((((v0.c0)AND(0.3711098481693169)))OR(v0.c3)) END) LIMIT 0X0;
SELECT ALL MAX(v0.c3) FROM vt0 NATURAL JOIN v0 WHERE ((1536071321 IN (((((((((v0.c0)AND(v0.c2)))AND(vt0.c0)))AND(v0.c1)))AND(vt0.c0)))));
SELECT ALL MAX(v0.c3) FROM vt0 NATURAL JOIN v0 WHERE ((((1536071321 IN (((((((((v0.c0)AND(v0.c2)))AND(vt0.c0)))AND(v0.c1)))AND(vt0.c0)))))AND(((((vt0.c0)<=(0.4653782948490184))) NOT BETWEEN (((v0.c0)>=(v0.c1))) AND (((v0.c1)-(v0.c0))))))) ORDER BY v0.c0  NULLS FIRST, ((((v0.c0)IS(v0.c0)))<(((vt0.c0)LIKE(v0.c2)))), ((json_valid(v0.c0)) NOT BETWEEN (CASE v0.c1  WHEN v0.c2 THEN v0.c2 WHEN vt0.c0 THEN v0.c1 WHEN v0.c0 THEN v0.c1 ELSE v0.c3 END) AND ((((x'352a')) NOT BETWEEN ((0.15065020866797252)) AND ((v0.c1))))) LIMIT 0X6;
SELECT * FROM vt2, v0 WHERE ((((((((((v0.c2 IN ()))AND(v0.c2)))AND(((vt2.c1) NOTNULL))))AND((vt2.c1 IN ()))))AND(x'29'))) ORDER BY (((CAST(v0.c1 AS NUMERIC)))=((((v0.c0) NOTNULL)))), CASE WHEN CAST(v0.c1 AS NUMERIC) THEN ((v0.c0) IS TRUE) WHEN v0.c0 COLLATE RTRIM THEN (('')<=(vt2.c0)) WHEN LIKE(v0.c3, v0.c0) THEN ((v0.c0)==(vt2.c0)) END DESC;
SELECT DISTINCT * FROM vt2, v0 WHERE ((((((((((v0.c2 IN ()))AND(v0.c2)))AND(((vt2.c1) NOTNULL))))AND((vt2.c1 IN ()))))AND(x'29'))) ORDER BY ((v0.c1) NOT NULL) COLLATE NOCASE LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (v0.c2) ORDER BY ((v0.c1) NOT NULL) COLLATE NOCASE LIMIT 0X3;
SELECT * FROM vt2, v0 WHERE ((((((((((v0.c2 IN ()))AND(v0.c2)))AND(((vt2.c1) NOTNULL))))AND((vt2.c1 IN ()))))AND(x'29'))) ORDER BY (((CAST(v0.c1 AS NUMERIC)))=((((v0.c0) NOTNULL)))), CASE WHEN CAST(v0.c1 AS NUMERIC) THEN ((v0.c0) IS TRUE) WHEN v0.c0 COLLATE RTRIM THEN (('')<=(vt2.c0)) WHEN LIKE(v0.c3, v0.c0) THEN ((v0.c0)==(vt2.c0)) END DESC;
SELECT DISTINCT * FROM vt2, v0 WHERE ((((((((((v0.c2 IN ()))AND(v0.c2)))AND(((vt2.c1) NOTNULL))))AND((vt2.c1 IN ()))))AND(x'29'))) ORDER BY ((v0.c1) NOT NULL) COLLATE NOCASE LIMIT 3 INTERSECT SELECT DISTINCT * FROM vt2, v0 WHERE (v0.c2) ORDER BY ((v0.c1) NOT NULL) COLLATE NOCASE LIMIT 0X3;
SELECT ALL * FROM vt0 WHERE ((vt0.c0 COLLATE RTRIM IN ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))!=((vt0.c0, vt0.c0, vt0.c0, '-992791945'))), LOWER(DISTINCT vt0.c0))));
SELECT * FROM vt0 WHERE ((((vt0.c0 COLLATE RTRIM IN ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))<>((vt0.c0, vt0.c0, vt0.c0, '-992791945'))))))AND(((CAST(vt0.c0 AS NUMERIC))>=(NULL))))) ORDER BY ((((((((vt0.c0)OR(NULL)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM ASC  NULLS FIRST, ((((vt0.c0) ISNULL))*((NOT (0.6364651283145288)))) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((((((vt0.c0)OR(NULL)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM ASC  NULLS FIRST, ((((vt0.c0) ISNULL))*((NOT (0.6364651283145288)))) DESC  NULLS LAST;
SELECT ALL * FROM vt0 WHERE ((vt0.c0 COLLATE RTRIM IN ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))!=((vt0.c0, vt0.c0, vt0.c0, '-992791945'))), LOWER(DISTINCT vt0.c0))));
SELECT * FROM vt0 WHERE ((((vt0.c0 COLLATE RTRIM IN ((((vt0.c0, vt0.c0, vt0.c0, vt0.c0))<>((vt0.c0, vt0.c0, vt0.c0, '-992791945'))))))AND(((CAST(vt0.c0 AS NUMERIC))>=(NULL))))) ORDER BY ((((((((vt0.c0)OR(NULL)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM ASC  NULLS FIRST, ((((vt0.c0) ISNULL))*((NOT (0.6364651283145288)))) DESC  NULLS LAST INTERSECT SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY ((((((((vt0.c0)OR(NULL)))AND(vt0.c0)))OR(vt0.c0)))AND(vt0.c0)) COLLATE RTRIM ASC  NULLS FIRST, ((((vt0.c0) ISNULL))*((NOT (0.6364651283145288)))) DESC  NULLS LAST;
SELECT MIN(v0.c1) FROM v0 WHERE ((((((v0.c3)>=(v0.c0))))<>((((v0.c3) IS FALSE)))));
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE ((((((v0.c3)>=(v0.c0))))>((((v0.c3) IS FALSE))))) LIMIT 0X3;
SELECT * FROM vt2, vt0 WHERE ((~ ((vt0.c0 IN (vt2.c1)))));
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((~ ((vt0.c0 IN (vt2.c1)))))AND(((((((((vt2.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c1))) NOT NULL))));
SELECT * FROM vt2, vt0 WHERE ((~ ((vt0.c0 IN (vt2.c1)))));
SELECT DISTINCT * FROM vt2, vt0 WHERE ((((~ ((vt0.c0 IN (vt2.c1)))))AND(((((((((vt2.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt2.c1))) NOT NULL))));
SELECT * FROM v0 WHERE ((NOT (NULL)));
SELECT ALL * FROM v0 WHERE ((NOT (NULL))) ORDER BY ((((NULL) IS TRUE)) NOT BETWEEN ((((('-208881130')AND('477587929')))OR(v0.c1))) AND (((',tv')|(v0.c3)))), CAST('' COLLATE NOCASE AS REAL)  NULLS LAST LIMIT 0X1;
SELECT * FROM v0 WHERE ((NOT (NULL)));
SELECT ALL * FROM v0 WHERE ((NOT (NULL))) ORDER BY ((((NULL) IS TRUE)) NOT BETWEEN ((((('-208881130')AND('477587929')))OR(v0.c1))) AND (((',tv')|(v0.c3)))), CAST('' COLLATE NOCASE AS REAL)  NULLS LAST LIMIT 0X1;
SELECT * FROM v0 WHERE (((((((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)))OR(((((((x'')OR(v0.c2)))AND(v0.c1)))OR(v0.c0)))))OR(((v0.c2)<(v0.c0)))))AND(((((((((v0.c0)OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (((((((((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)))OR(((((((x'')OR(v0.c2)))AND(v0.c1)))OR(v0.c0)))))OR(((v0.c2)<(v0.c0)))))AND(((((((((v0.c0)OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))))AND(NULL))) INTERSECT SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c0 AS REAL))IS(((v0.c1)>=(v0.c1)))));
SELECT * FROM v0 WHERE (((((((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)))OR(((((((x'')OR(v0.c2)))AND(v0.c1)))OR(v0.c0)))))OR(((v0.c2)<(v0.c0)))))AND(((((((((v0.c0)OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))));
SELECT DISTINCT * FROM v0 WHERE (((((((((((v0.c2) NOT BETWEEN (v0.c3) AND (v0.c1)))OR(((((((x'')OR(v0.c2)))AND(v0.c1)))OR(v0.c0)))))OR(((v0.c2)<(v0.c0)))))AND(((((((((v0.c0)OR(v0.c1)))AND(v0.c1)))OR(v0.c2)))OR(v0.c0)))))AND(NULL))) INTERSECT SELECT DISTINCT * FROM v0 WHERE (((CAST(v0.c0 AS REAL))IS(((v0.c1)>=(v0.c1)))));
SELECT ALL * FROM v0, vt0 WHERE (SQLITE_VERSION());
SELECT * FROM v0, vt0 WHERE (((SQLITE_VERSION())AND(((((((vt0.c0)OR(x'1e')))OR(v0.c2)))<((((v0.c0, v0.c1, v0.c1))>((v0.c1, v0.c3, v0.c2)))))))) ORDER BY ((CASE v0.c2  WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c3 THEN v0.c2 END)GLOB('382198455')), (~ ((v0.c3 IN (v0.c1)))) DESC  NULLS LAST LIMIT 0x2 INTERSECT SELECT * FROM v0, vt0 WHERE (((((v0.c2) BETWEEN (vt0.c0) AND (-348448924))) ISNULL)) ORDER BY ((CASE v0.c2  WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c3 THEN v0.c2 END)GLOB('382198455')), (~ ((v0.c3 IN (v0.c1)))) DESC  NULLS LAST LIMIT 0x2;
SELECT ALL * FROM v0, vt0 WHERE (SQLITE_VERSION());
SELECT * FROM v0, vt0 WHERE (((SQLITE_VERSION())AND(((((((vt0.c0)OR(x'1e')))OR(v0.c2)))<((((v0.c0, v0.c1, v0.c1))>((v0.c1, v0.c3, v0.c2)))))))) ORDER BY ((CASE v0.c2  WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c3 THEN v0.c2 END)GLOB('382198455')), (~ ((v0.c3 IN (v0.c1)))) DESC  NULLS LAST LIMIT 0x2 INTERSECT SELECT * FROM v0, vt0 WHERE (((((v0.c2) BETWEEN (vt0.c0) AND (-348448924))) ISNULL)) ORDER BY ((CASE v0.c2  WHEN v0.c2 THEN vt0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c3 THEN v0.c2 END)GLOB('382198455')), (~ ((v0.c3 IN (v0.c1)))) DESC  NULLS LAST LIMIT 0x2;
SELECT MAX(v0.c0) FROM v0, vt2, vt0 WHERE (((((((((NULLIF(vt2.c0, vt2.c1))OR(((vt2.c1) NOT BETWEEN (v0.c0) AND (vt2.c1)))))AND((+ ('1677340777')))))AND(((v0.c2) NOT BETWEEN (vt2.c1) AND (vt2.c1)))))OR('1257615901' COLLATE NOCASE))) ORDER BY (((((((v0.c1)OR(vt0.c0)))OR(vt2.c1))))>((((((v0.c1)AND(vt2.c1)))OR(vt0.c0))))) ASC  NULLS LAST;
SELECT DISTINCT MAX(v0.c0) FROM v0, vt2, vt0 WHERE (((((((((((NULLIF(vt2.c0, vt2.c1))OR(((vt2.c1) NOT BETWEEN (v0.c0) AND (vt2.c1)))))AND((+ ('1677340777')))))AND(((v0.c2) NOT BETWEEN (vt2.c1) AND (vt2.c1)))))OR('1257615901' COLLATE NOCASE)))AND(-5.80686248E8 COLLATE BINARY))) ORDER BY (((((((v0.c1)OR(vt0.c0)))OR(vt2.c1))))>((((((v0.c1)AND(vt2.c1)))OR(vt0.c0))))) ASC  NULLS LAST;
SELECT MAX(v0.c3) FROM vt2 NATURAL JOIN v0 WHERE (((((v0.c2)!=(v0.c3))) ISNULL));
SELECT DISTINCT MAX(v0.c3) FROM vt2 NATURAL JOIN v0 WHERE (((((v0.c2)<>(v0.c3))) ISNULL)) LIMIT 2;
SELECT ALL * FROM vt2, v0 WHERE ((+ (((v0.c0)=(v0.c1))))) ORDER BY ((CAST(vt2.c0 AS BLOB)) NOTNULL) DESC, ((0xffffffff80d64935)+(((vt2.c1)OR(vt2.c0)))) ASC  NULLS FIRST, (((('-567218797')OR(((vt2.c1) NOT BETWEEN (vt2.c1) AND (v0.c3)))))AND(CAST(v0.c1 AS BLOB)));
SELECT * FROM vt2 NOT INDEXED, v0 WHERE ((((+ (((v0.c0)=(v0.c1)))))AND((((((v0.c1))>((v0.c1)))) NOT BETWEEN ('954854679') AND (((((((((vt2.c1)AND(vt2.c1)))AND(v0.c3)))AND(v0.c1)))OR(vt2.c0))))))) ORDER BY ((CAST(vt2.c0 AS BLOB)) NOTNULL) DESC, ((-2133440203)+(((vt2.c1)OR(vt2.c0)))) ASC  NULLS FIRST, (((('-567218797')OR(((vt2.c1) NOT BETWEEN (vt2.c1) AND (v0.c3)))))AND(CAST(v0.c1 AS BLOB))) LIMIT 0;
SELECT ALL * FROM vt2, v0 WHERE ((+ (((v0.c0)=(v0.c1))))) ORDER BY ((CAST(vt2.c0 AS BLOB)) NOTNULL) DESC, ((0xffffffff80d64935)+(((vt2.c1)OR(vt2.c0)))) ASC  NULLS FIRST, (((('-567218797')OR(((vt2.c1) NOT BETWEEN (vt2.c1) AND (v0.c3)))))AND(CAST(v0.c1 AS BLOB)));
SELECT * FROM vt2 NOT INDEXED, v0 WHERE ((((+ (((v0.c0)=(v0.c1)))))AND((((((v0.c1))>((v0.c1)))) NOT BETWEEN ('954854679') AND (((((((((vt2.c1)AND(vt2.c1)))AND(v0.c3)))AND(v0.c1)))OR(vt2.c0))))))) ORDER BY ((CAST(vt2.c0 AS BLOB)) NOTNULL) DESC, ((-2133440203)+(((vt2.c1)OR(vt2.c0)))) ASC  NULLS FIRST, (((('-567218797')OR(((vt2.c1) NOT BETWEEN (vt2.c1) AND (v0.c3)))))AND(CAST(v0.c1 AS BLOB))) LIMIT 0;
SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE (CASE WHEN vt2.c0 THEN vt2.c0 WHEN CAST(vt2.c1 AS NUMERIC) THEN ((0.6925641635687169)*(vt0.c0)) WHEN ((((vt2.c1)OR(vt2.c1)))OR(vt0.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0)) ELSE ((((((vt2.c1)AND(vt2.c1)))AND(NULL)))AND(vt2.c1)) END);
SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE (CASE WHEN vt2.c0 THEN vt2.c0 WHEN CAST(vt2.c1 AS NUMERIC) THEN ((0.6925641635687169)*(vt0.c0)) WHEN ((((vt2.c1)OR(vt2.c1)))OR(vt0.c0)) THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c0)) ELSE ((((((vt2.c1)AND(vt2.c1)))AND(NULL)))AND(vt2.c1)) END) INTERSECT SELECT MIN(vt2.c1) FROM vt0, vt2 WHERE (((CAST(vt2.c0 AS BLOB))+(((((((vt0.c0)OR(vt0.c0)))AND(vt2.c1)))AND(vt2.c1)))));
SELECT MIN(v0.c1) FROM v0, vt2 WHERE (((((v0.c1)AND(v0.c2))) BETWEEN (((v0.c1)+(vt2.c0))) AND ((v0.c0 IN ())))) ORDER BY CAST(((0.5329905243728174)>>(v0.c0)) AS NUMERIC) DESC;
SELECT DISTINCT MIN(v0.c1) FROM v0, vt2 WHERE (((((((v0.c1)AND(v0.c2))) BETWEEN (((v0.c1)+(vt2.c0))) AND ((v0.c0 IN ()))))AND(vt2.c1))) ORDER BY HEX(DISTINCT CAST(vt2.c1 AS BLOB)) DESC  NULLS LAST, (- ((NOT (v0.c3)))) DESC  NULLS LAST, vt2.c1  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE ((((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((vt2.c1, vt0.c0, vt2.c0))))<<(((vt0.c0) IS FALSE)))) ORDER BY (((((vt2.c1)%(vt2.c1))))<=(((+ (vt2.c0))))) DESC, (CAST(vt2.c0 AS BLOB) IN (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE ((((((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((vt2.c1, vt0.c0, vt2.c0))))<<(((vt0.c0) IS FALSE))))AND(CAST(((vt0.c0)IS NOT(vt2.c1)) AS BLOB)))) ORDER BY vt0.c0  NULLS FIRST;
SELECT * FROM vt0, vt2 WHERE ((((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((vt2.c1, vt0.c0, vt2.c0))))<<(((vt0.c0) IS FALSE)))) ORDER BY (((((vt2.c1)%(vt2.c1))))<=(((+ (vt2.c0))))) DESC, (CAST(vt2.c0 AS BLOB) IN (((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt0.c0)))) ASC  NULLS FIRST;
SELECT ALL * FROM vt0, vt2 WHERE ((((((((vt0.c0, vt0.c0, vt0.c0)) BETWEEN ((vt2.c1, vt2.c0, vt0.c0)) AND ((vt2.c1, vt0.c0, vt2.c0))))<<(((vt0.c0) IS FALSE))))AND(CAST(((vt0.c0)IS NOT(vt2.c1)) AS BLOB)))) ORDER BY vt0.c0  NULLS FIRST;
SELECT COUNT(*) FROM vt2, v0 WHERE (LIKELY(v0.c3));
SELECT COUNT(*) FROM vt2, v0 WHERE (LIKELY(v0.c3)) ORDER BY ((((v0.c3) NOT BETWEEN (v0.c3) AND (vt2.c1)))&(CASE v0.c0  WHEN NULL THEN v0.c2 ELSE v0.c2 END))  NULLS FIRST, (((('-1060360014') IS TRUE))IS NOT((- (v0.c2)))) ASC  NULLS FIRST INTERSECT SELECT ALL COUNT(*) FROM vt2, v0 WHERE ((((NOT (vt2.c0))) IS FALSE)) ORDER BY ((((v0.c3) NOT BETWEEN (v0.c3) AND (vt2.c1)))&(CASE v0.c0  WHEN NULL THEN v0.c2 ELSE v0.c2 END))  NULLS FIRST, (((('-1060360014') IS TRUE))IS NOT((- (v0.c2)))) ASC  NULLS FIRST;
SELECT ALL MAX(v0.c0) FROM vt2 NOT INDEXED, v0, vt0 WHERE ((('0.9656406496065746') NOTNULL)) ORDER BY ((((NULL) BETWEEN (v0.c3) AND (vt0.c0)))<=(vt2.c0)), ((ROUND(vt2.c1, vt0.c0)) BETWEEN ((- (v0.c0))) AND (((v0.c0)==(v0.c2))))  NULLS FIRST, ((((((v0.c3)AND(v0.c0)))OR(vt2.c1)))|((((vt2.c1))<=((vt0.c0)))))  NULLS LAST;
SELECT DISTINCT MAX(v0.c0) FROM vt2, v0, vt0 WHERE ((((('0.9656406496065746') NOTNULL))AND(highlight(((v0.c1)OR(vt2.c0)), v0.c2, vt2.c1, ((vt2.c1) IS TRUE))))) ORDER BY ((((NULL) BETWEEN (v0.c3) AND (vt0.c0)))<=(vt2.c0)), ((ROUND(vt2.c1, vt0.c0)) BETWEEN ((- (v0.c0))) AND (((v0.c0)=(v0.c2))))  NULLS FIRST, ((((((v0.c3)AND(v0.c0)))OR(vt2.c1)))|((((vt2.c1))<=((vt0.c0)))))  NULLS LAST LIMIT 0X0;
SELECT ALL * FROM vt2 WHERE (((((vt2.c1)<<(vt2.c1)))%(x'2567')));
SELECT DISTINCT * FROM vt2 WHERE (((((((vt2.c1)<<(vt2.c1)))%(x'2567')))AND((~ (CAST(vt2.c1 AS BLOB)))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (NULL) LIMIT 0;
SELECT ALL * FROM vt2 WHERE (((((vt2.c1)<<(vt2.c1)))%(x'2567')));
SELECT DISTINCT * FROM vt2 WHERE (((((((vt2.c1)<<(vt2.c1)))%(x'2567')))AND((~ (CAST(vt2.c1 AS BLOB)))))) LIMIT 0 INTERSECT SELECT DISTINCT * FROM vt2 WHERE (NULL) LIMIT 0;
SELECT * FROM vt0, v0 WHERE (CAST(LIKELIHOOD(DISTINCT '-386582235', vt0.c0) AS REAL)) ORDER BY ((((((((v0.c2)AND(vt0.c0)))AND(v0.c1)))OR(v0.c0))) BETWEEN (((v0.c1)<=('2066793088'))) AND (((((((((v0.c3)AND(v0.c2)))AND('1839189666')))AND(vt0.c0)))OR(v0.c2)))) ASC  NULLS LAST;
SELECT DISTINCT * FROM vt0, v0 WHERE (CAST(LIKELIHOOD(DISTINCT '-386582235', vt0.c0) AS REAL)) ORDER BY (SQLITE_COMPILEOPTION_GET(v0.c3) IN ()), ((((vt0.c0) BETWEEN (v0.c3) AND (x'c5cfde3e')))>>(vt0.c0 COLLATE NOCASE)) DESC, TRIM(DISTINCT (((v0.c3))<=((vt0.c0))), (- (vt0.c0))), CAST(NULL COLLATE BINARY AS TEXT) DESC  NULLS LAST INTERSECT SELECT DISTINCT * FROM vt0, v0 WHERE (((CASE v0.c3  WHEN v0.c0 THEN v0.c3 WHEN vt0.c0 THEN v0.c3 END) IS FALSE)) ORDER BY (SQLITE_COMPILEOPTION_GET(v0.c3) IN ()), ((((vt0.c0) BETWEEN (v0.c3) AND (x'c5cfde3e')))>>(vt0.c0 COLLATE NOCASE)) DESC, TRIM(DISTINCT (((v0.c3))<=((vt0.c0))), (- (vt0.c0))), CAST(NULL COLLATE BINARY AS TEXT) DESC  NULLS LAST;
SELECT * FROM vt0, v0 WHERE (CAST(LIKELIHOOD(DISTINCT '-386582235', vt0.c0) AS REAL)) ORDER BY ((((((((v0.c2)AND(vt0.c0)))AND(v0.c1)))OR(v0.c0))) BETWEEN (((v0.c1)<=('2066793088'))) AND (((((((((v0.c3)AND(v0.c2)))AND('1839189666')))AND(vt0.c0)))OR(v0.c2)))) ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((0x1e69aed9) NOT BETWEEN (CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END) AND (x'8e'))) ORDER BY (CAST(v0.c3 AS NUMERIC) IN (CAST(v0.c1 AS INTEGER)))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((((0X1e69aed9) NOT BETWEEN (CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END) AND (x'8e')))AND(((v0.c0) NOT NULL)))) ORDER BY (CAST(v0.c3 AS NUMERIC) IN (CAST(v0.c1 AS INTEGER)))  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (UPPER(CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN -157240298 WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c1 END)) ORDER BY (CAST(v0.c3 AS NUMERIC) IN (CAST(v0.c1 AS INTEGER)))  NULLS LAST LIMIT 0;
SELECT * FROM v0 WHERE (((0x1e69aed9) NOT BETWEEN (CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END) AND (x'8e'))) ORDER BY (CAST(v0.c3 AS NUMERIC) IN (CAST(v0.c1 AS INTEGER)))  NULLS LAST;
SELECT DISTINCT * FROM v0 WHERE (((((0X1e69aed9) NOT BETWEEN (CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c0 END) AND (x'8e')))AND(((v0.c0) NOT NULL)))) ORDER BY (CAST(v0.c3 AS NUMERIC) IN (CAST(v0.c1 AS INTEGER)))  NULLS LAST LIMIT 0 INTERSECT SELECT DISTINCT * FROM v0 WHERE (UPPER(CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN -157240298 WHEN v0.c1 THEN v0.c2 WHEN v0.c3 THEN v0.c1 END)) ORDER BY (CAST(v0.c3 AS NUMERIC) IN (CAST(v0.c1 AS INTEGER)))  NULLS LAST LIMIT 0;
SELECT COUNT(*) FROM v0, vt2 WHERE (CAST((v0.c1 IN ()) AS INTEGER)) ORDER BY v0.c3 DESC  NULLS FIRST, ((((NULL)AND(HEX(v0.c0))))OR(CAST(vt2.c0 AS REAL))) ASC  NULLS LAST, (((vt2.c1 IN ())) BETWEEN ((v0.c2 IN (v0.c3))) AND (((vt2.c1) IS TRUE)));
SELECT COUNT(*) FROM v0, vt2 WHERE (CAST((v0.c1 IN ()) AS INTEGER)) ORDER BY ((((((((((v0.c2) IS TRUE))AND(NULL)))AND('-2052977277')))AND(CASE WHEN vt2.c0 THEN x'' END)))OR(vt2.c1 COLLATE RTRIM))  NULLS LAST, (((v0.c3 IN ('-168283889', NULL, v0.c0))) NOT BETWEEN (x'') AND (CASE WHEN v0.c3 THEN vt2.c1 ELSE '1543983825' END)) LIMIT 0;
SELECT ALL * FROM vt0, v0 NOT INDEXED, vt2 WHERE (ABS('361699562'));
SELECT DISTINCT * FROM vt0 NOT INDEXED, v0, vt2 WHERE (((ABS('361699562'))AND((rtreenode(NULL, v0.c3) IN ())))) LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((- (((((v0.c0)AND(vt0.c0)))OR(vt2.c0))))) LIMIT 1;
SELECT ALL * FROM vt0, v0 NOT INDEXED, vt2 WHERE (ABS('361699562'));
SELECT DISTINCT * FROM vt0 NOT INDEXED, v0, vt2 WHERE (((ABS('361699562'))AND((rtreenode(NULL, v0.c3) IN ())))) LIMIT 0x1 INTERSECT SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((- (((((v0.c0)AND(vt0.c0)))OR(vt2.c0))))) LIMIT 1;
SELECT ALL * FROM vt0 INNER JOIN v0 ON CASE (~ (vt0.c0))  WHEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)) THEN (NOT (v0.c1)) WHEN v0.c2 COLLATE NOCASE THEN ((v0.c3)IS NOT(NULL)) END WHERE ((((NOT (v0.c0)))|(((((v0.c3)AND(v0.c3)))OR(v0.c0)))));
SELECT ALL * FROM vt0 INNER JOIN v0 ON CASE (~ (vt0.c0))  WHEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)) THEN (NOT (v0.c1)) WHEN v0.c2 COLLATE NOCASE THEN ((v0.c3)IS NOT(NULL)) END WHERE ((((((NOT (v0.c0)))|(((((v0.c3)AND(v0.c3)))OR(v0.c0)))))AND(((((vt0.c0) ISNULL)) BETWEEN ((v0.c3 IN (vt0.c0))) AND (vt0.c0))))) ORDER BY CASE WHEN ((((((((x'be')AND(v0.c3)))AND(v0.c3)))OR(v0.c0)))AND(v0.c3)) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (vt0.c0)) WHEN ((((((x'87')OR(v0.c1)))OR(v0.c1)))OR(v0.c1)) THEN SQLITE_SOURCE_ID() END, (+ (((v0.c1) NOT BETWEEN (vt0.c0) AND ('V67
,*vz?')))) LIMIT 1 INTERSECT SELECT ALL * FROM vt0 INNER JOIN v0 ON CASE (~ (vt0.c0))  WHEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)) THEN (NOT (v0.c1)) WHEN v0.c2 COLLATE NOCASE THEN ((v0.c3)IS NOT(NULL)) END WHERE (x'' COLLATE BINARY COLLATE BINARY) ORDER BY CASE WHEN ((((((((x'be')AND(v0.c3)))AND(v0.c3)))OR(v0.c0)))AND(v0.c3)) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (vt0.c0)) WHEN ((((((x'87')OR(v0.c1)))OR(v0.c1)))OR(v0.c1)) THEN SQLITE_SOURCE_ID() END, (+ (((v0.c1) NOT BETWEEN (vt0.c0) AND ('V67
,*vz?')))) LIMIT 0x1;
SELECT ALL * FROM vt0 INNER JOIN v0 ON CASE (~ (vt0.c0))  WHEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)) THEN (NOT (v0.c1)) WHEN v0.c2 COLLATE NOCASE THEN ((v0.c3)IS NOT(NULL)) END WHERE ((((NOT (v0.c0)))|(((((v0.c3)AND(v0.c3)))OR(v0.c0)))));
SELECT ALL * FROM vt0 INNER JOIN v0 ON CASE (~ (vt0.c0))  WHEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)) THEN (NOT (v0.c1)) WHEN v0.c2 COLLATE NOCASE THEN ((v0.c3)IS NOT(NULL)) END WHERE ((((((NOT (v0.c0)))|(((((v0.c3)AND(v0.c3)))OR(v0.c0)))))AND(((((vt0.c0) ISNULL)) BETWEEN ((v0.c3 IN (vt0.c0))) AND (vt0.c0))))) ORDER BY CASE WHEN ((((((((x'be')AND(v0.c3)))AND(v0.c3)))OR(v0.c0)))AND(v0.c3)) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (vt0.c0)) WHEN ((((((x'87')OR(v0.c1)))OR(v0.c1)))OR(v0.c1)) THEN SQLITE_SOURCE_ID() END, (+ (((v0.c1) NOT BETWEEN (vt0.c0) AND ('V67
,*vz?')))) LIMIT 1 INTERSECT SELECT ALL * FROM vt0 INNER JOIN v0 ON CASE (~ (vt0.c0))  WHEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c0)) THEN (NOT (v0.c1)) WHEN v0.c2 COLLATE NOCASE THEN ((v0.c3)IS NOT(NULL)) END WHERE (x'' COLLATE BINARY COLLATE BINARY) ORDER BY CASE WHEN ((((((((x'be')AND(v0.c3)))AND(v0.c3)))OR(v0.c0)))AND(v0.c3)) THEN ((v0.c3) NOT BETWEEN (v0.c1) AND (vt0.c0)) WHEN ((((((x'87')OR(v0.c1)))OR(v0.c1)))OR(v0.c1)) THEN SQLITE_SOURCE_ID() END, (+ (((v0.c1) NOT BETWEEN (vt0.c0) AND ('V67
,*vz?')))) LIMIT 0x1;
SELECT MAX(vt2.c0) FROM vt2 WHERE (((((vt2.c0) IS TRUE)) NOTNULL)) ORDER BY ((((((((((((vt2.c0)-('-769760503')))OR(((vt2.c1) IS FALSE))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)))))OR(x'b8404b' COLLATE NOCASE)))AND((vt2.c1 IN (vt2.c0)))))OR(vt2.c1)) ASC  NULLS LAST, ((vt2.c0 COLLATE NOCASE)-(((vt2.c1)=(vt2.c1)))) ASC;
SELECT DISTINCT MAX(vt2.c0) FROM vt2 WHERE (((((((vt2.c0) IS TRUE)) NOTNULL))AND(CASE ((vt2.c1)IS NOT(vt2.c1))  WHEN ((vt2.c1)+(vt2.c1)) THEN (- (vt2.c1)) WHEN vt2.c0 COLLATE BINARY THEN CASE WHEN vt2.c1 THEN vt2.c0 END WHEN ((vt2.c0) IS FALSE) THEN ((vt2.c1) NOT BETWEEN (0.6871846889772585) AND (vt2.c0)) END))) ORDER BY json_array_length((((vt2.c0, vt2.c0, vt2.c1))>((vt2.c1, vt2.c1, vt2.c1)))) ASC  NULLS LAST, CASE WHEN (+ (vt2.c1)) THEN ((vt2.c0) NOT NULL) ELSE NULL COLLATE BINARY END DESC LIMIT 0X2;
SELECT MAX(vt2.c0) FROM v0, vt2, vt0 WHERE ((((- (v0.c3)))/(CASE v0.c1  WHEN v0.c1 THEN vt0.c0 WHEN vt2.c0 THEN '921842007' ELSE vt2.c1 END))) ORDER BY CASE WHEN vt2.c0 THEN CASE vt2.c0  WHEN vt2.c1 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c1 END WHEN (vt0.c0 IN ()) THEN JULIANDAY(vt2.c0, vt2.c0, x'f1') WHEN ((v0.c2) IS TRUE) THEN (+ (v0.c0)) ELSE ((vt2.c0) NOT NULL) END, ((((vt2.c1) NOTNULL)) IS FALSE);
SELECT DISTINCT MAX(vt2.c0) FROM v0, vt2, vt0 WHERE ((((((- (v0.c3)))/(CASE v0.c1  WHEN v0.c1 THEN vt0.c0 WHEN vt2.c0 THEN '921842007' ELSE vt2.c1 END)))AND((((((vt2.c1)|(vt2.c0)), ((vt2.c0)<<(vt0.c0)), (- (v0.c2))))>((((v0.c2)<=(v0.c2)), CAST(vt2.c0 AS TEXT), LOWER(DISTINCT v0.c3))))))) ORDER BY ((CASE vt2.c1  WHEN NULL THEN v0.c3 ELSE v0.c2 END) ISNULL)  NULLS FIRST, ((((((v0.c1)AND(v0.c0)))OR(v0.c3))) BETWEEN (vt2.c1 COLLATE BINARY) AND (((((((v0.c1)AND(0.9305950430632224)))AND(v0.c3)))OR('Y')))) LIMIT 2;
SELECT MAX(vt2.c1) FROM vt2 WHERE ((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN (((((vt2.c1))<=((vt2.c0))), ((vt2.c0)IS(vt2.c0)), (vt2.c0 IN ()))) AND ((0.484074122266809, vt2.c1, 'm')))) ORDER BY (((vt2.c0, vt2.c1)) BETWEEN ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)), ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)))) AND ((TRIM(DISTINCT vt2.c0), ((vt2.c1) NOTNULL)))), '埠5' DESC  NULLS LAST, 0.125946568826795;
SELECT MAX(vt2.c1) FROM vt2 WHERE ((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN (((((vt2.c1))<=((vt2.c0))), ((vt2.c0)IS(vt2.c0)), (vt2.c0 IN ()))) AND ((0.484074122266809, vt2.c1, 'm')))) ORDER BY (((vt2.c0 IN ()))>=(COALESCE(vt2.c1, vt2.c0, vt2.c1)))  NULLS LAST INTERSECT SELECT ALL MAX(vt2.c1) FROM vt2 WHERE ((((CASE vt2.c0  WHEN vt2.c1 THEN x'fddaf6' WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE '526554451' END, (+ (vt2.c1)), ((vt2.c0)&(vt2.c0))))>=(('Zu' COLLATE BINARY, ((vt2.c1) ISNULL), CAST(vt2.c0 AS TEXT))))) ORDER BY (((vt2.c0 IN ()))>=(COALESCE(vt2.c1, vt2.c0, vt2.c1)))  NULLS LAST;
SELECT ALL COUNT(*) FROM vt0 CROSS JOIN v0 ON ((((((((((vt0.c0)|(vt0.c0)))AND((('zVLRk') NOT BETWEEN (v0.c3) AND (v0.c0)))))OR(CAST(0Xffffffffddc46084 AS TEXT))))OR(((v0.c1)IS(v0.c3)))))AND(((((v0.c2)OR(v0.c2)))OR(NULL)))) WHERE (((NULL) ISNULL)) ORDER BY 0.2360585990432461 DESC  NULLS LAST;
SELECT COUNT(*) FROM vt0 CROSS JOIN v0 ON ((((((((((vt0.c0)|(vt0.c0)))AND((('zVLRk') NOT BETWEEN (v0.c3) AND (v0.c0)))))OR(CAST(0xffffffffddc46084 AS TEXT))))OR(((v0.c1)IS(v0.c3)))))AND(((((v0.c2)OR(v0.c2)))OR(NULL)))) WHERE (((NULL) ISNULL)) ORDER BY 0.2360585990432461 DESC  NULLS LAST;
SELECT * FROM vt2 WHERE ((((x'29') NOT BETWEEN (vt2.c1) AND (vt2.c1)) IN (UNLIKELY(vt2.c1), (- (vt2.c1))))) ORDER BY ((((((CAST(vt2.c0 AS BLOB))OR((vt2.c0 IN (vt2.c1, vt2.c0)))))AND(CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END)))OR(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END));
SELECT DISTINCT * FROM vt2 WHERE ((((x'29') NOT BETWEEN (vt2.c1) AND (vt2.c1)) IN (UNLIKELY(vt2.c1), (- (vt2.c1))))) ORDER BY ((((((CAST(vt2.c0 AS BLOB))OR((vt2.c0 IN (vt2.c1, vt2.c0)))))AND(CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END)))OR(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END)) LIMIT 2;
SELECT * FROM vt2 WHERE ((((x'29') NOT BETWEEN (vt2.c1) AND (vt2.c1)) IN (UNLIKELY(vt2.c1), (- (vt2.c1))))) ORDER BY ((((((CAST(vt2.c0 AS BLOB))OR((vt2.c0 IN (vt2.c1, vt2.c0)))))AND(CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END)))OR(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END));
SELECT DISTINCT * FROM vt2 WHERE ((((x'29') NOT BETWEEN (vt2.c1) AND (vt2.c1)) IN (UNLIKELY(vt2.c1), (- (vt2.c1))))) ORDER BY ((((((CAST(vt2.c0 AS BLOB))OR((vt2.c0 IN (vt2.c1, vt2.c0)))))AND(CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END)))OR(CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c0 END)) LIMIT 2;
SELECT * FROM vt0 WHERE (GLOB((('267721342') BETWEEN (vt0.c0) AND (vt0.c0)), ((vt0.c0)>(vt0.c0)))) ORDER BY ((vt0.c0) BETWEEN (((vt0.c0)IS(vt0.c0))) AND ((((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0)))))  NULLS FIRST, vt0.c0;
SELECT DISTINCT * FROM vt0 WHERE (GLOB((('267721342') BETWEEN (vt0.c0) AND (vt0.c0)), ((vt0.c0)>(vt0.c0)))) ORDER BY CASE (- (vt0.c0))  WHEN ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN ((vt0.c0)<=(vt0.c0)) THEN ((vt0.c0)<(vt0.c0)) ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE (- (vt0.c0))  WHEN ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN ((vt0.c0)<=(vt0.c0)) THEN ((vt0.c0)<(vt0.c0)) ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END;
SELECT * FROM vt0 WHERE (GLOB((('267721342') BETWEEN (vt0.c0) AND (vt0.c0)), ((vt0.c0)>(vt0.c0)))) ORDER BY ((vt0.c0) BETWEEN (((vt0.c0)IS(vt0.c0))) AND ((((vt0.c0, vt0.c0))<((vt0.c0, vt0.c0)))))  NULLS FIRST, vt0.c0;
SELECT DISTINCT * FROM vt0 WHERE (GLOB((('267721342') BETWEEN (vt0.c0) AND (vt0.c0)), ((vt0.c0)>(vt0.c0)))) ORDER BY CASE (- (vt0.c0))  WHEN ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN ((vt0.c0)<=(vt0.c0)) THEN ((vt0.c0)<(vt0.c0)) ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END INTERSECT SELECT DISTINCT * FROM vt0 WHERE (vt0.c0) ORDER BY CASE (- (vt0.c0))  WHEN ((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)) THEN CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END WHEN ((vt0.c0)<=(vt0.c0)) THEN ((vt0.c0)<(vt0.c0)) ELSE ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END;
SELECT * FROM v0 WHERE (((((v0.c2)GLOB(-1429548611)))||(json_remove(v0.c0, v0.c0, v0.c3)))) ORDER BY ((TRIM(v0.c0))LIKE(v0.c3 COLLATE NOCASE)) ASC;
SELECT ALL * FROM v0 WHERE (((((v0.c2)GLOB(-1429548611)))||(json_remove(v0.c0, v0.c0, v0.c3)))) ORDER BY ((((v0.c0)%(NULL))) ISNULL) ASC, (((((v0.c2) BETWEEN (v0.c0) AND (v0.c0)), TRIM(DISTINCT v0.c1, 0.2913902935901703)))>((CAST(v0.c3 AS REAL), v0.c0 COLLATE BINARY)))  NULLS LAST LIMIT 1;
SELECT * FROM v0 WHERE (((((v0.c2)GLOB(-1429548611)))||(json_remove(v0.c0, v0.c0, v0.c3)))) ORDER BY ((TRIM(v0.c0))LIKE(v0.c3 COLLATE NOCASE)) ASC;
SELECT ALL * FROM v0 WHERE (((((v0.c2)GLOB(-1429548611)))||(json_remove(v0.c0, v0.c0, v0.c3)))) ORDER BY ((((v0.c0)%(NULL))) ISNULL) ASC, (((((v0.c2) BETWEEN (v0.c0) AND (v0.c0)), TRIM(DISTINCT v0.c1, 0.2913902935901703)))>((CAST(v0.c3 AS REAL), v0.c0 COLLATE BINARY)))  NULLS LAST LIMIT 1;
SELECT * FROM v0, vt0 WHERE (((CAST(v0.c1 AS NUMERIC)) NOT BETWEEN (v0.c3 COLLATE NOCASE) AND (v0.c2 COLLATE NOCASE))) ORDER BY vt0.c0  NULLS FIRST, NULL ASC  NULLS LAST;
SELECT * FROM v0, vt0 WHERE (((((CAST(v0.c1 AS NUMERIC)) NOT BETWEEN (v0.c3 COLLATE NOCASE) AND (v0.c2 COLLATE NOCASE)))AND(((CAST(v0.c2 AS TEXT)) IS TRUE)))) ORDER BY ((((((v0.c1)>>(v0.c2)))OR((((vt0.c0, v0.c2)) BETWEEN ((v0.c0, NULL)) AND ((v0.c2, v0.c3))))))OR(((v0.c1)>=(v0.c2)))) ASC LIMIT 0x2 INTERSECT SELECT * FROM v0, vt0 WHERE (vt0.c0 COLLATE BINARY COLLATE NOCASE) ORDER BY ((((((v0.c1)>>(v0.c2)))OR((((vt0.c0, v0.c2)) BETWEEN ((v0.c0, NULL)) AND ((v0.c2, v0.c3))))))OR(((v0.c1)>=(v0.c2)))) ASC LIMIT 2;
SELECT * FROM v0, vt0 WHERE (((CAST(v0.c1 AS NUMERIC)) NOT BETWEEN (v0.c3 COLLATE NOCASE) AND (v0.c2 COLLATE NOCASE))) ORDER BY vt0.c0  NULLS FIRST, NULL ASC  NULLS LAST;
SELECT * FROM v0, vt0 WHERE (((((CAST(v0.c1 AS NUMERIC)) NOT BETWEEN (v0.c3 COLLATE NOCASE) AND (v0.c2 COLLATE NOCASE)))AND(((CAST(v0.c2 AS TEXT)) IS TRUE)))) ORDER BY ((((((v0.c1)>>(v0.c2)))OR((((vt0.c0, v0.c2)) BETWEEN ((v0.c0, NULL)) AND ((v0.c2, v0.c3))))))OR(((v0.c1)>=(v0.c2)))) ASC LIMIT 0x2 INTERSECT SELECT * FROM v0, vt0 WHERE (vt0.c0 COLLATE BINARY COLLATE NOCASE) ORDER BY ((((((v0.c1)>>(v0.c2)))OR((((vt0.c0, v0.c2)) BETWEEN ((v0.c0, NULL)) AND ((v0.c2, v0.c3))))))OR(((v0.c1)>=(v0.c2)))) ASC LIMIT 2;
SELECT ALL * FROM vt0, vt2, v0 WHERE (LOWER(CASE -0.0  WHEN x'2b95f0' THEN vt0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (LOWER(CASE -0.0  WHEN x'2b95f0' THEN vt0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END));
SELECT ALL * FROM vt0, vt2, v0 WHERE (LOWER(CASE -0.0  WHEN x'2b95f0' THEN vt0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (LOWER(CASE -0.0  WHEN x'2b95f0' THEN vt0.c0 WHEN v0.c1 THEN v0.c1 ELSE v0.c1 END));
SELECT ALL MAX(v0.c3) FROM vt0, vt2, v0 WHERE (((((((v0.c2 COLLATE NOCASE)OR(vt2.c1 COLLATE NOCASE)))AND(((NULL)<=(v0.c3)))))OR(CAST(v0.c2 AS INTEGER)))) ORDER BY ((((((vt2.c1) NOT NULL))AND((x'' IN (v0.c1)))))AND((v0.c1 IN (vt0.c0)))) DESC  NULLS LAST;
SELECT DISTINCT MAX(v0.c3) FROM vt0, vt2, v0 WHERE (((((((v0.c2 COLLATE NOCASE)OR(vt2.c1 COLLATE NOCASE)))AND(((NULL)=(v0.c3)))))OR(CAST(v0.c2 AS INTEGER)))) ORDER BY ((CAST(v0.c1 AS TEXT)) BETWEEN (((v0.c1) BETWEEN ('0.4481881142625076') AND (vt2.c1))) AND ((v0.c3 IN ())));
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ('SW<69') ORDER BY CAST((NOT (vt2.c1)) AS REAL)  NULLS FIRST, (((vt2.c0)) NOT BETWEEN (((('0.7344154568104274') BETWEEN (vt2.c1) AND (vt2.c0)))) AND ((((vt2.c0)<>(vt0.c0)))));
SELECT ALL COUNT(*) FROM vt0, vt2 WHERE ((('SW<69')AND((NOT (LIKELY(DISTINCT NULL)))))) ORDER BY CAST((NOT (vt2.c1)) AS REAL)  NULLS FIRST, (((vt2.c0)) NOT BETWEEN (((('0.7344154568104274') BETWEEN (vt2.c1) AND (vt2.c0)))) AND ((((vt2.c0)!=(vt0.c0))))) LIMIT 1;
SELECT * FROM vt0 WHERE (((CASE WHEN 0.6186827239738678 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN 0.27599954684292793 THEN vt0.c0 END) BETWEEN (((vt0.c0)OR(vt0.c0))) AND (CAST(vt0.c0 AS REAL)))) ORDER BY UNLIKELY(CAST(vt0.c0 AS INTEGER)) ASC  NULLS LAST, (((vt0.c0) ISNULL) IN ()) ASC, TYPEOF(DISTINCT ((NULL)LIKE(vt0.c0))) DESC;
SELECT ALL * FROM vt0 WHERE (((CASE WHEN 0.6186827239738678 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN 0.27599954684292793 THEN vt0.c0 END) BETWEEN (((vt0.c0)OR(vt0.c0))) AND (CAST(vt0.c0 AS REAL)))) ORDER BY UNLIKELY(CAST(vt0.c0 AS INTEGER)) ASC  NULLS LAST, (((vt0.c0) ISNULL) IN ()) ASC, TYPEOF(DISTINCT ((NULL)LIKE(vt0.c0))) DESC LIMIT 2 INTERSECT SELECT * FROM vt0 WHERE (((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))==(((vt0.c0)AND(vt0.c0))))) ORDER BY UNLIKELY(CAST(vt0.c0 AS INTEGER)) ASC  NULLS LAST, (((vt0.c0) ISNULL) IN ()) ASC, TYPEOF(DISTINCT ((NULL)LIKE(vt0.c0))) DESC LIMIT 0x2;
SELECT * FROM vt0 WHERE (((CASE WHEN 0.6186827239738678 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN 0.27599954684292793 THEN vt0.c0 END) BETWEEN (((vt0.c0)OR(vt0.c0))) AND (CAST(vt0.c0 AS REAL)))) ORDER BY UNLIKELY(CAST(vt0.c0 AS INTEGER)) ASC  NULLS LAST, (((vt0.c0) ISNULL) IN ()) ASC, TYPEOF(DISTINCT ((NULL)LIKE(vt0.c0))) DESC;
SELECT ALL MIN(v0.c3) FROM v0, vt2 NATURAL JOIN vt0 WHERE ((((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)) IN (((vt2.c0) BETWEEN (v0.c1) AND (vt2.c0)))));
SELECT ALL MIN(v0.c3) FROM v0, vt2 NATURAL JOIN vt0 WHERE ((((v0.c3) BETWEEN (vt2.c1) AND (v0.c1)) IN (((vt2.c0) BETWEEN (v0.c1) AND (vt2.c0)))));
SELECT ALL MIN(v0.c1) FROM v0 WHERE ((v0.c2 IN (CAST(v0.c2 AS TEXT)))) ORDER BY ((x'e353') IS FALSE);
SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE ((v0.c2 IN (CAST(v0.c2 AS TEXT)))) ORDER BY ((v0.c2) BETWEEN (((v0.c1) BETWEEN (x'2a') AND (v0.c3))) AND (v0.c3)) DESC LIMIT 1 INTERSECT SELECT DISTINCT MIN(v0.c1) FROM v0 WHERE ('zTA') ORDER BY ((v0.c2) BETWEEN (((v0.c1) BETWEEN (x'2a') AND (v0.c3))) AND (v0.c3)) DESC LIMIT 0x1;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((v0.c2 COLLATE RTRIM)>>(CAST(v0.c3 AS BLOB)))) ORDER BY 0.3927420828547109  NULLS LAST, v0.c3;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((v0.c2 COLLATE RTRIM)>>(CAST(v0.c3 AS BLOB))))AND((((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)) IN (v0.c1 COLLATE BINARY))))) ORDER BY 1.831516531E9  NULLS LAST LIMIT 0X3;
SELECT ALL * FROM vt0, v0, vt2 WHERE (((v0.c2 COLLATE RTRIM)>>(CAST(v0.c3 AS BLOB)))) ORDER BY 0.3927420828547109  NULLS LAST, v0.c3;
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE (((((v0.c2 COLLATE RTRIM)>>(CAST(v0.c3 AS BLOB))))AND((((v0.c3) BETWEEN (vt2.c1) AND (v0.c2)) IN (v0.c1 COLLATE BINARY))))) ORDER BY 1.831516531E9  NULLS LAST LIMIT 0X3;
SELECT * FROM vt0 WHERE (LIKELIHOOD(((vt0.c0) NOT NULL), (+ (vt0.c0)))) ORDER BY vt0.c0 ASC, ((((((((((vt0.c0)OR(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND(vt0.c0))) IS TRUE) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (((LIKELIHOOD(((vt0.c0) NOT NULL), (+ (vt0.c0))))AND(HEX(vt0.c0 COLLATE NOCASE)))) ORDER BY vt0.c0 ASC, ((((((((((vt0.c0)OR(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND(vt0.c0))) IS TRUE) DESC  NULLS FIRST LIMIT 2 INTERSECT SELECT DISTINCT * FROM vt0 WHERE (CASE WHEN vt0.c0 COLLATE BINARY THEN (~ (vt0.c0)) WHEN vt0.c0 THEN vt0.c0 COLLATE BINARY WHEN ((((vt0.c0)AND(vt0.c0)))OR(vt0.c0)) THEN ((vt0.c0) ISNULL) ELSE ((vt0.c0)==(vt0.c0)) END) ORDER BY vt0.c0 ASC, ((((((((((vt0.c0)OR(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND(vt0.c0))) IS TRUE) DESC  NULLS FIRST LIMIT 2;
SELECT * FROM vt0 WHERE (LIKELIHOOD(((vt0.c0) NOT NULL), (+ (vt0.c0)))) ORDER BY vt0.c0 ASC, ((((((((((vt0.c0)OR(vt0.c0)))AND(NULL)))AND(vt0.c0)))AND(vt0.c0))) IS TRUE) DESC  NULLS FIRST;
SELECT * FROM v0 INNER JOIN vt2 ON CAST((v0.c2 IN ()) AS REAL) WHERE (vt2.c0);
SELECT * FROM v0 INNER JOIN vt2 ON CAST((v0.c2 IN ()) AS REAL) WHERE (((vt2.c0)AND(vt2.c1))) INTERSECT SELECT * FROM v0 INNER JOIN vt2 ON CAST((v0.c2 IN ()) AS REAL) WHERE (((((v0.c1, vt2.c0, v0.c2, 189168943))>=((v0.c3, v0.c0, vt2.c1, vt2.c0))) IN (((v0.c3)AND(v0.c2)), IFNULL(DISTINCT v0.c3, -1678165439))));
SELECT * FROM v0 INNER JOIN vt2 ON CAST((v0.c2 IN ()) AS REAL) WHERE (vt2.c0);
SELECT * FROM v0 INNER JOIN vt2 ON CAST((v0.c2 IN ()) AS REAL) WHERE (((vt2.c0)AND(vt2.c1))) INTERSECT SELECT * FROM v0 INNER JOIN vt2 ON CAST((v0.c2 IN ()) AS REAL) WHERE (((((v0.c1, vt2.c0, v0.c2, 189168943))>=((v0.c3, v0.c0, vt2.c1, vt2.c0))) IN (((v0.c3)AND(v0.c2)), IFNULL(DISTINCT v0.c3, -1678165439))));
SELECT ALL MIN(v0.c1) FROM vt2, v0, vt0 WHERE ((+ ((- (v0.c2))))) ORDER BY ((((v0.c2)==(vt0.c0)))*((((vt2.c0)) NOT BETWEEN ((v0.c0)) AND ((-168283889)))))  NULLS FIRST, CAST(((((((v0.c0)AND(vt0.c0)))AND(v0.c3)))OR(v0.c1)) AS INTEGER)  NULLS FIRST, vt0.c0  NULLS FIRST;
SELECT ALL MIN(v0.c1) FROM vt2, v0, vt0 WHERE ((((+ ((- (v0.c2)))))AND(((((v0.c2) ISNULL))GLOB(((v0.c0)=(vt2.c1))))))) ORDER BY ((((v0.c2)=(vt0.c0)))*((((vt2.c0)) NOT BETWEEN ((v0.c0)) AND ((0xfffffffff5f8310f)))))  NULLS FIRST, CAST(((((((v0.c0)AND(vt0.c0)))AND(v0.c3)))OR(v0.c1)) AS INTEGER)  NULLS FIRST, vt0.c0  NULLS FIRST LIMIT 0X1;
SELECT MIN(v0.c3) FROM v0 CROSS JOIN vt2 ON (((v0.c2))>=((vt2.c0))) COLLATE RTRIM NATURAL JOIN vt0 WHERE ((((~ (vt2.c0)))IS((NOT (vt2.c1)))));
SELECT ALL MIN(v0.c3) FROM v0 CROSS JOIN vt2 ON (((v0.c2))>=((vt2.c0))) COLLATE RTRIM NATURAL JOIN vt0 WHERE ((((~ (vt2.c0)))IS((NOT (vt2.c1))))) ORDER BY ('(gC槙6#M㿄' IN (((vt2.c1)-(vt2.c1)), (+ (v0.c0))))  NULLS FIRST LIMIT 3 INTERSECT SELECT MIN(v0.c3) FROM v0 CROSS JOIN vt2 ON (((v0.c2))>=((vt2.c0))) COLLATE RTRIM NATURAL JOIN vt0 WHERE (((CASE WHEN v0.c2 THEN vt0.c0 WHEN vt2.c1 THEN v0.c2 WHEN vt0.c0 THEN v0.c2 END)<(CAST(vt2.c0 AS REAL)))) ORDER BY ('(gC槙6#M㿄' IN (((vt2.c1)-(vt2.c1)), (+ (v0.c0))))  NULLS FIRST LIMIT 3;
SELECT MIN(v0.c3) FROM vt2, v0 LEFT OUTER JOIN vt0 ON ((((vt2.c1)>=(vt2.c1))) BETWEEN (LOWER(vt2.c1)) AND (x'77777a')) WHERE (((((v0.c3) NOTNULL)) NOT NULL)) ORDER BY ((vt2.c1)||(((v0.c1) NOT BETWEEN (vt0.c0) AND (vt2.c0)))) ASC  NULLS LAST, NULLIF(CAST(vt2.c1 AS INTEGER), ((x'')AND(vt2.c0))) DESC, (((((0.6080559016321312)OR('')))OR(vt2.c0)) IN (load_extension(0.720714923499379, v0.c1)))  NULLS FIRST;
SELECT DISTINCT MIN(v0.c3) FROM vt2, v0 LEFT OUTER JOIN vt0 ON ((((vt2.c1)>=(vt2.c1))) BETWEEN (LOWER(vt2.c1)) AND (x'77777a')) WHERE (((((v0.c3) NOTNULL)) NOT NULL)) ORDER BY (- (CAST(vt2.c0 AS BLOB))) DESC  NULLS FIRST, TRIM((('318365341') ISNULL))  NULLS LAST INTERSECT SELECT DISTINCT MIN(v0.c3) FROM vt2, v0 LEFT OUTER JOIN vt0 ON ((((vt2.c1)>=(vt2.c1))) BETWEEN (LOWER(vt2.c1)) AND (x'77777a')) WHERE ((((CAST(v0.c3 AS NUMERIC), ((vt2.c1)>(v0.c2))))>=((((vt2.c0) NOTNULL), ((NULL)+(vt2.c1)))))) ORDER BY (- (CAST(vt2.c0 AS BLOB))) DESC  NULLS FIRST, TRIM((('318365341') ISNULL))  NULLS LAST;
SELECT ALL COUNT(*) FROM v0 WHERE (-624019942) ORDER BY ((((((((((((v0.c3)OR(v0.c1)))AND(v0.c3)))OR(v0.c1)))OR(v0.c1)))OR(CAST(v0.c2 AS INTEGER))))OR(CAST(v0.c2 AS BLOB))) DESC;
SELECT ALL COUNT(*) FROM v0 WHERE (((0xffffffffdace361a)AND(v0.c0))) ORDER BY ((v0.c0 COLLATE RTRIM) NOTNULL), ((((((v0.c3)AND(v0.c3)))AND(v0.c3))) BETWEEN (v0.c3) AND (CAST(v0.c2 AS NUMERIC))) DESC LIMIT 0x1;
SELECT ALL * FROM vt2, vt0 WHERE ((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((((((x'b6')OR(vt0.c0)))OR(vt2.c1)))))) ORDER BY (((~ (vt0.c0))) NOT NULL) ASC  NULLS FIRST, ((vt2.c1)OR(vt2.c1)) COLLATE NOCASE ASC, (((vt2.c1) NOTNULL) IN (x'57023825'));
SELECT ALL * FROM vt2, vt0 WHERE ((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((((((x'b6')OR(vt0.c0)))OR(vt2.c1)))))) ORDER BY (((~ (vt0.c0))) NOT NULL) ASC  NULLS FIRST, ((vt2.c1)OR(vt2.c1)) COLLATE NOCASE ASC, (((vt2.c1) NOTNULL) IN (x'57023825')) LIMIT 4 INTERSECT SELECT * FROM vt2, vt0 WHERE ((vt0.c0 COLLATE RTRIM IN ((((vt2.c0))!=((vt2.c0))), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))))) ORDER BY (((~ (vt0.c0))) NOT NULL) ASC  NULLS FIRST, ((vt2.c1)OR(vt2.c1)) COLLATE NOCASE ASC, (((vt2.c1) NOTNULL) IN (x'57023825')) LIMIT 4;
SELECT ALL * FROM vt2, vt0 WHERE ((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((((((x'b6')OR(vt0.c0)))OR(vt2.c1)))))) ORDER BY (((~ (vt0.c0))) NOT NULL) ASC  NULLS FIRST, ((vt2.c1)OR(vt2.c1)) COLLATE NOCASE ASC, (((vt2.c1) NOTNULL) IN (x'57023825'));
SELECT ALL * FROM vt2, vt0 WHERE ((((vt2.c0)) NOT BETWEEN ((vt2.c1)) AND ((((((x'b6')OR(vt0.c0)))OR(vt2.c1)))))) ORDER BY (((~ (vt0.c0))) NOT NULL) ASC  NULLS FIRST, ((vt2.c1)OR(vt2.c1)) COLLATE NOCASE ASC, (((vt2.c1) NOTNULL) IN (x'57023825')) LIMIT 4 INTERSECT SELECT * FROM vt2, vt0 WHERE ((vt0.c0 COLLATE RTRIM IN ((((vt2.c0))!=((vt2.c0))), ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0))))) ORDER BY (((~ (vt0.c0))) NOT NULL) ASC  NULLS FIRST, ((vt2.c1)OR(vt2.c1)) COLLATE NOCASE ASC, (((vt2.c1) NOTNULL) IN (x'57023825')) LIMIT 4;
SELECT * FROM vt2, vt0, v0 WHERE (COALESCE(DISTINCT ((vt2.c0) IS TRUE), vt2.c0 COLLATE BINARY, ((v0.c2) BETWEEN (vt2.c0) AND (v0.c0)), (- (vt2.c1))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (COALESCE(DISTINCT ((vt2.c0) IS TRUE), vt2.c0 COLLATE BINARY, ((v0.c2) BETWEEN (vt2.c0) AND (v0.c0)), (- (vt2.c1)))) ORDER BY LIKE((NOT (vt2.c0)), ((vt0.c0) NOT BETWEEN (v0.c2) AND (vt0.c0)))  NULLS LAST;
SELECT * FROM vt2, vt0, v0 WHERE (COALESCE(DISTINCT ((vt2.c0) IS TRUE), vt2.c0 COLLATE BINARY, ((v0.c2) BETWEEN (vt2.c0) AND (v0.c0)), (- (vt2.c1))));
SELECT DISTINCT * FROM vt2, vt0, v0 WHERE (COALESCE(DISTINCT ((vt2.c0) IS TRUE), vt2.c0 COLLATE BINARY, ((v0.c2) BETWEEN (vt2.c0) AND (v0.c0)), (- (vt2.c1)))) ORDER BY LIKE((NOT (vt2.c0)), ((vt0.c0) NOT BETWEEN (v0.c2) AND (vt0.c0)))  NULLS LAST;
SELECT MAX(v0.c0) FROM vt0, v0, vt2 WHERE ((((((v0.c0, v0.c1)) NOT BETWEEN ((v0.c2, x'a334')) AND ((vt2.c0, v0.c2)))) NOT BETWEEN (((v0.c0)/(vt2.c1))) AND (((v0.c3) NOT NULL))));
SELECT MAX(v0.c0) FROM vt0, v0, vt2 WHERE ((((((v0.c0, v0.c1)) NOT BETWEEN ((v0.c2, x'a334')) AND ((vt2.c0, v0.c2)))) NOT BETWEEN (((v0.c0)/(vt2.c1))) AND (((v0.c3) NOT NULL)))) ORDER BY ((CASE v0.c1  WHEN v0.c3 THEN v0.c1 WHEN v0.c2 THEN vt0.c0 WHEN v0.c2 THEN v0.c2 ELSE v0.c0 END)*(((((((((v0.c0)OR(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))OR(v0.c0)))) ASC, ((((v0.c3) NOT BETWEEN (vt2.c1) AND (vt2.c1))) ISNULL) DESC LIMIT 2;
SELECT ALL MAX(v0.c3) FROM v0 CROSS JOIN vt2 ON NULL LEFT OUTER JOIN vt0 ON NULL WHERE (((((((((v0.c3) NOT NULL))OR(((x'') BETWEEN (vt2.c1) AND (vt0.c0)))))AND(UNLIKELY(vt2.c1))))AND(((vt0.c0)<>(v0.c0))))) ORDER BY ((v0.c2)<=(((v0.c2) IS FALSE))) DESC, CAST(NULL AS INTEGER) ASC;
SELECT DISTINCT MAX(v0.c3) FROM v0 CROSS JOIN vt2 ON NULL INNER JOIN vt0 ON NULL WHERE (((((((((((v0.c3) NOT NULL))OR(((x'') BETWEEN (vt2.c1) AND (vt0.c0)))))AND(UNLIKELY(vt2.c1))))AND(((vt0.c0)>(v0.c0)))))AND(((((v0.c1) ISNULL)) NOT BETWEEN (((v0.c0)%(v0.c3))) AND ((- (v0.c2))))))) ORDER BY LIKELIHOOD(vt0.c0, v0.c0) COLLATE NOCASE ASC, ((DATE(v0.c0, v0.c3, vt0.c0)) IS TRUE) ASC LIMIT 3;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((- (((vt2.c1)%(vt0.c0)))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((- (((vt2.c1)%(vt0.c0))))) ORDER BY v0.c0 ASC  NULLS LAST, (((v0.c2)) NOT BETWEEN ((((v0.c1) IS TRUE))) AND ((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c3 ELSE v0.c1 END))) DESC;
SELECT ALL * FROM vt0, v0, vt2 WHERE ((- (((vt2.c1)%(vt0.c0)))));
SELECT DISTINCT * FROM vt0, v0, vt2 WHERE ((- (((vt2.c1)%(vt0.c0))))) ORDER BY v0.c0 ASC  NULLS LAST, (((v0.c2)) NOT BETWEEN ((((v0.c1) IS TRUE))) AND ((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN v0.c3 ELSE v0.c1 END))) DESC;
SELECT ALL MAX(vt0.c0) FROM v0 NATURAL JOIN vt2 LEFT OUTER JOIN vt0 ON CAST(((vt2.c0) NOT NULL) AS BLOB) WHERE (UPPER(v0.c3));
SELECT DISTINCT MAX(vt0.c0) FROM v0 NATURAL JOIN vt2 LEFT OUTER JOIN vt0 ON CAST(((vt2.c0) NOT NULL) AS BLOB) WHERE (UPPER(v0.c3)) ORDER BY (+ (((NULL)IS NOT(v0.c0)))) ASC, ((((((((vt0.c0)AND(CASE WHEN v0.c3 THEN x'f3' WHEN vt0.c0 THEN v0.c0 END)))AND(((((((((((v0.c3)AND(v0.c3)))AND(v0.c3)))OR(v0.c2)))AND(NULL)))AND(vt2.c0)))))AND((- (v0.c0)))))OR(vt2.c1)), -572972978 ASC INTERSECT SELECT DISTINCT MAX(vt0.c0) FROM v0 NATURAL JOIN vt2 LEFT OUTER JOIN vt0 ON CAST(((vt2.c0) NOT NULL) AS BLOB) WHERE (((CAST(vt0.c0 AS TEXT))<(CAST(v0.c2 AS NUMERIC)))) ORDER BY (+ (((NULL)IS NOT(v0.c0)))) ASC, ((((((((vt0.c0)AND(CASE WHEN v0.c3 THEN x'f3' WHEN vt0.c0 THEN v0.c0 END)))AND(((((((((((v0.c3)AND(v0.c3)))AND(v0.c3)))OR(v0.c2)))AND(NULL)))AND(vt2.c0)))))AND((- (v0.c0)))))OR(vt2.c1)), 0xffffffffddd9204e ASC;
SELECT ALL MIN(vt2.c1) FROM v0, vt2, vt0 WHERE (((((((v0.c3)+(vt2.c1)))AND((vt0.c0 IN ()))))AND(((v0.c0) ISNULL)))) ORDER BY ((((vt2.c0, vt2.c1, vt0.c0, v0.c3, v0.c3)) NOT BETWEEN ((vt2.c1, vt2.c0, NULL, vt2.c1, v0.c0)) AND ((NULL, v0.c3, vt2.c0, 0.3236419518120929, v0.c0))) IN ()) ASC  NULLS LAST;
SELECT DISTINCT MIN(vt2.c1) FROM v0, vt2, vt0 WHERE (((((((((v0.c3)+(vt2.c1)))AND((vt0.c0 IN ()))))AND(((v0.c0) ISNULL))))AND(((v0.c0) NOTNULL)))) ORDER BY ((((vt2.c0, vt2.c1, vt0.c0, v0.c3, v0.c3)) NOT BETWEEN ((vt2.c1, vt2.c0, NULL, vt2.c1, v0.c0)) AND ((NULL, v0.c3, vt2.c0, 0.3236419518120929, v0.c0))) IN ()) ASC  NULLS LAST;
SELECT * FROM v0, vt2 WHERE ((((((v0.c2, v0.c3, vt2.c0))==((v0.c0, vt2.c1, vt2.c1)))) NOTNULL));
SELECT * FROM v0, vt2 WHERE ((((((((v0.c2, v0.c3, vt2.c0))=((v0.c0, vt2.c1, vt2.c1)))) NOTNULL))AND((NOT (((v0.c3)LIKE(vt2.c1))))))) INTERSECT SELECT * FROM v0, vt2 WHERE (CASE WHEN (~ (v0.c2)) THEN (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c1)) AND ((v0.c3, v0.c2))) WHEN ((v0.c2) ISNULL) THEN (~ (vt2.c0)) END);
SELECT * FROM v0, vt2 WHERE ((((((v0.c2, v0.c3, vt2.c0))==((v0.c0, vt2.c1, vt2.c1)))) NOTNULL));
SELECT * FROM v0, vt2 WHERE ((((((((v0.c2, v0.c3, vt2.c0))=((v0.c0, vt2.c1, vt2.c1)))) NOTNULL))AND((NOT (((v0.c3)LIKE(vt2.c1))))))) INTERSECT SELECT * FROM v0, vt2 WHERE (CASE WHEN (~ (v0.c2)) THEN (((v0.c2, v0.c1)) BETWEEN ((v0.c0, v0.c1)) AND ((v0.c3, v0.c2))) WHEN ((v0.c2) ISNULL) THEN (~ (vt2.c0)) END);
SELECT ALL * FROM v0, vt2, vt0 WHERE (LIKELIHOOD(DISTINCT ((v0.c0)<<(v0.c3)), (- (vt2.c0))));
SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (LIKELIHOOD(DISTINCT ((v0.c0)<<(v0.c3)), (- (vt2.c0)))) INTERSECT SELECT DISTINCT * FROM v0, vt2, vt0 WHERE (((((((v0.c0)OR(v0.c2)))OR(vt0.c0))) NOT BETWEEN (-1935470654) AND (((v0.c1)<(vt0.c0)))));
SELECT ALL * FROM v0, vt2, vt0 WHERE (LIKELIHOOD(DISTINCT ((v0.c0)<<(v0.c3)), (- (vt2.c0))));
SELECT COUNT(*) FROM vt0 WHERE (json(json_quote(vt0.c0)));
SELECT DISTINCT COUNT(*) FROM vt0 WHERE (json(json_quote(vt0.c0))) ORDER BY ROUND(0.8734569116312437, IFNULL(vt0.c0, vt0.c0)) ASC  NULLS LAST, ((((((((((x'1739')OR(((vt0.c0) BETWEEN (vt0.c0) AND (1.470920427E9)))))OR(((vt0.c0)||(vt0.c0)))))AND(vt0.c0 COLLATE NOCASE)))OR((0.0743509906090074 IN (vt0.c0)))))OR(((vt0.c0) NOTNULL)))  NULLS FIRST LIMIT 0x1;
SELECT COUNT(*) FROM vt2 CROSS JOIN vt0 ON vt2.c1 WHERE (vt2.c0 COLLATE NOCASE) ORDER BY ((((vt2.c0) ISNULL)) NOTNULL)  NULLS LAST, (0.7312887488153242 IN ((vt0.c0 IN (vt0.c0)))) DESC  NULLS FIRST, CASE (((vt0.c0))<=((vt2.c1)))  WHEN (NOT (vt2.c0)) THEN ((vt0.c0)IS(vt2.c1)) ELSE ((NULL)OR(vt2.c1)) END;
SELECT COUNT(*) FROM vt2 CROSS JOIN vt0 ON vt2.c1 WHERE (vt2.c0 COLLATE NOCASE) ORDER BY ((((vt2.c0) ISNULL)) NOTNULL)  NULLS LAST, (0.7312887488153242 IN ((vt0.c0 IN (vt0.c0)))) DESC  NULLS FIRST, CASE (((vt0.c0))<=((vt2.c1)))  WHEN (NOT (vt2.c0)) THEN ((vt0.c0)IS(vt2.c1)) ELSE ((NULL)OR(vt2.c1)) END;
SELECT MAX(vt2.c1) FROM vt2 WHERE (CAST(CAST(vt2.c0 AS TEXT) AS INTEGER));
SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((CAST(CAST(vt2.c0 AS TEXT) AS INTEGER))AND((((((vt2.c0, vt2.c0, vt2.c1)) NOT BETWEEN (('1738971888', x'', vt2.c1)) AND ((vt2.c0, vt2.c0, vt2.c1))))>=((vt2.c0 IN (vt2.c0))))))) INTERSECT SELECT ALL MAX(vt2.c1) FROM vt2 WHERE (((vt2.c1 COLLATE NOCASE) NOT NULL));
SELECT ALL * FROM vt0 WHERE ((((0xffffffffce4a4571)) NOT BETWEEN (((~ (vt0.c0)))) AND (((+ (vt0.c0))))));
SELECT * FROM vt0 WHERE ((((((-833993359)) NOT BETWEEN (((~ (vt0.c0)))) AND (((+ (vt0.c0))))))AND((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((((vt0.c0)!=(vt0.c0)), ((vt0.c0)GLOB(0xffffffff9909a17f)), vt0.c0)) AND ((json(vt0.c0), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 0x37499a37 END, CAST(NULL AS BLOB))))))) INTERSECT SELECT * FROM vt0 WHERE (0.2075164019702711);
SELECT ALL * FROM vt0 WHERE ((((0xffffffffce4a4571)) NOT BETWEEN (((~ (vt0.c0)))) AND (((+ (vt0.c0))))));
SELECT * FROM vt0 WHERE ((((((-833993359)) NOT BETWEEN (((~ (vt0.c0)))) AND (((+ (vt0.c0))))))AND((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((((vt0.c0)!=(vt0.c0)), ((vt0.c0)GLOB(0xffffffff9909a17f)), vt0.c0)) AND ((json(vt0.c0), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 0x37499a37 END, CAST(NULL AS BLOB))))))) INTERSECT SELECT * FROM vt0 WHERE (0.2075164019702711);
SELECT ALL COUNT(*) FROM vt2 INNER JOIN v0 ON (v0.c2 IN (v0.c1)) COLLATE RTRIM INNER JOIN vt0 ON ((((vt0.c0) ISNULL))<>(((x'8829') NOT NULL))) WHERE (((CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN v0.c2 END) BETWEEN ((v0.c2 IN ())) AND (LOWER(v0.c2))));
SELECT COUNT(*) FROM vt2 INNER JOIN v0 ON (v0.c2 IN (v0.c1)) COLLATE RTRIM INNER JOIN vt0 ON ((((vt0.c0) ISNULL))!=(((x'8829') NOT NULL))) WHERE (((CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c0 THEN v0.c2 END) BETWEEN ((v0.c2 IN ())) AND (LOWER(v0.c2)))) ORDER BY ((((~ (v0.c0))))<=((((v0.c0) BETWEEN (v0.c1) AND (vt0.c0))))) ASC, LIKELY(NULL), (((v0.c2) NOT BETWEEN (vt2.c1) AND (v0.c2)) IN ())  NULLS LAST LIMIT 0X1;
SELECT MAX(vt2.c1) FROM v0, vt2 WHERE (((v0.c3)GLOB(vt2.c0)) COLLATE BINARY) ORDER BY 0.2181403447700273 ASC, v0.c0  NULLS FIRST;
SELECT MAX(vt2.c1) FROM v0, vt2 WHERE (((v0.c3)GLOB(vt2.c0)) COLLATE BINARY) ORDER BY UPPER(DISTINCT ((v0.c2)=(x'8a71')))  NULLS FIRST INTERSECT SELECT ALL MAX(vt2.c1) FROM v0, vt2 WHERE ((((v0.c0)) NOT BETWEEN ((((v0.c1) ISNULL))) AND ((((((v0.c2)OR('1698528684')))OR(v0.c1)))))) ORDER BY UPPER(DISTINCT ((v0.c2)=(x'8a71')))  NULLS FIRST;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((vt2.c1)/(v0.c2))) NOT BETWEEN (((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0))) AND ((- (v0.c2))))) ORDER BY vt2.c1 ASC, vt2.c1 ASC;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((vt2.c1)/(v0.c2))) NOT BETWEEN (((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0))) AND ((- (v0.c2))))) ORDER BY vt2.c1 ASC, vt2.c1 ASC;
SELECT ALL * FROM v0, vt0, vt2 WHERE (((((vt2.c1)/(v0.c2))) NOT BETWEEN (((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0))) AND ((- (v0.c2))))) ORDER BY vt2.c1 ASC, vt2.c1 ASC;
SELECT DISTINCT * FROM v0, vt0, vt2 WHERE (((((vt2.c1)/(v0.c2))) NOT BETWEEN (((v0.c3) NOT BETWEEN (vt2.c1) AND (v0.c0))) AND ((- (v0.c2))))) ORDER BY vt2.c1 ASC, vt2.c1 ASC;
SELECT ALL MIN(vt2.c1) FROM vt2 CROSS JOIN vt0 ON ((TYPEOF(DISTINCT vt2.c1))|(IFNULL(DISTINCT vt2.c1, vt0.c0))) WHERE (TRIM((((1284633581)) NOT BETWEEN ((vt2.c0)) AND ((0.5793985226716803))))) ORDER BY (((vt0.c0) NOTNULL) IN (CASE WHEN vt0.c0 THEN vt2.c0 WHEN 0X2af24ce8 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c0 THEN vt2.c0 END)) DESC  NULLS FIRST, CASE NULL  WHEN (((vt2.c0, vt0.c0, vt0.c0))<((vt2.c1, vt2.c1, vt2.c0))) THEN (vt2.c1 IN (0.70689056726797)) ELSE (((vt0.c0, vt0.c0, vt2.c1)) BETWEEN ((vt0.c0, vt2.c1, vt2.c1)) AND ((NULL, NULL, vt0.c0))) END;
SELECT ALL MIN(vt2.c1) FROM vt2 CROSS JOIN vt0 ON ((TYPEOF(DISTINCT vt2.c1))|(IFNULL(DISTINCT vt2.c1, vt0.c0))) WHERE (TRIM((((1284633581)) NOT BETWEEN ((vt2.c0)) AND ((0.5793985226716803))))) ORDER BY CASE WHEN (((vt2.c1))<=((NULL))) THEN (((vt2.c1, vt0.c0))!=((vt2.c1, x'3e52'))) WHEN UNLIKELY(DISTINCT vt0.c0) THEN (vt2.c1 IN ()) WHEN CAST(vt0.c0 AS BLOB) THEN CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END WHEN (- (vt2.c0)) THEN (((vt0.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))) END  NULLS LAST, CASE (((((((((('-1966523904')AND(vt2.c1)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c0))  WHEN CASE WHEN vt2.c1 THEN '6' WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END THEN ((('0.5249321787965887')) NOT BETWEEN ((vt0.c0)) AND ((vt2.c0))) END ASC INTERSECT SELECT MIN(vt2.c1) FROM vt2 CROSS JOIN vt0 ON ((TYPEOF(DISTINCT vt2.c1))|(IFNULL(DISTINCT vt2.c1, vt0.c0))) WHERE (CAST(((((((((vt2.c1)OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c1)))AND(vt2.c1)) AS INTEGER)) ORDER BY CASE WHEN (((vt2.c1))<=((NULL))) THEN (((vt2.c1, vt0.c0))!=((vt2.c1, x'3e52'))) WHEN UNLIKELY(DISTINCT vt0.c0) THEN (vt2.c1 IN ()) WHEN CAST(vt0.c0 AS BLOB) THEN CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END WHEN (- (vt2.c0)) THEN (((vt0.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))) END  NULLS LAST, CASE (((((((((('-1966523904')AND(vt2.c1)))AND(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt2.c0))  WHEN CASE WHEN vt2.c1 THEN '6' WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END THEN ((('0.5249321787965887')) NOT BETWEEN ((vt0.c0)) AND ((vt2.c0))) END ASC;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((vt2.c1, vt2.c1))<=((v0.c3, x'')))) NOTNULL));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((((vt2.c1, vt2.c1))<=((v0.c3, x'')))) NOTNULL))AND(((((- (v0.c3)), CAST(NULL AS NUMERIC)))<=((CASE WHEN vt2.c0 THEN vt2.c1 END, COALESCE(v0.c0, v0.c2, v0.c1, v0.c3)))))));
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((vt2.c1, vt2.c1))<=((v0.c3, x'')))) NOTNULL));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((((vt2.c1, vt2.c1))<=((v0.c3, x'')))) NOTNULL))AND(((((- (v0.c3)), CAST(NULL AS NUMERIC)))<=((CASE WHEN vt2.c0 THEN vt2.c1 END, COALESCE(v0.c0, v0.c2, v0.c1, v0.c3)))))));
SELECT * FROM vt0 WHERE (ABS(DISTINCT ((vt0.c0)GLOB(vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (((ABS(DISTINCT ((vt0.c0)GLOB(vt0.c0))))AND(((((((((vt0.c0) NOT NULL))OR(vt0.c0 COLLATE BINARY)))AND((+ (vt0.c0)))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))))))) LIMIT 0X0;
SELECT * FROM vt0 WHERE (ABS(DISTINCT ((vt0.c0)GLOB(vt0.c0))));
SELECT DISTINCT * FROM vt0 WHERE (((ABS(DISTINCT ((vt0.c0)GLOB(vt0.c0))))AND(((((((((vt0.c0) NOT NULL))OR(vt0.c0 COLLATE BINARY)))AND((+ (vt0.c0)))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))))))) LIMIT 0X0;
SELECT ALL * FROM vt2, v0 WHERE (((((((((UNLIKELY(DISTINCT v0.c3))AND(((vt2.c1) BETWEEN (v0.c3) AND (vt2.c0)))))AND((x'' IN (vt2.c1)))))AND(((((((NULL)AND(v0.c2)))AND(v0.c3)))AND('0.4505668757794715')))))OR(CASE vt2.c1  WHEN v0.c0 THEN v0.c1 END)));
SELECT DISTINCT * FROM vt2, v0 WHERE (((((((((((UNLIKELY(DISTINCT v0.c3))AND(((vt2.c1) BETWEEN (v0.c3) AND (vt2.c0)))))AND((x'' IN (vt2.c1)))))AND(((((((NULL)AND(v0.c2)))AND(v0.c3)))AND('0.4505668757794715')))))OR(CASE vt2.c1  WHEN v0.c0 THEN v0.c1 END)))AND(0.2595516450693488))) LIMIT 1;
SELECT ALL * FROM vt2, v0 WHERE (((((((((UNLIKELY(DISTINCT v0.c3))AND(((vt2.c1) BETWEEN (v0.c3) AND (vt2.c0)))))AND((x'' IN (vt2.c1)))))AND(((((((NULL)AND(v0.c2)))AND(v0.c3)))AND('0.4505668757794715')))))OR(CASE vt2.c1  WHEN v0.c0 THEN v0.c1 END)));
SELECT DISTINCT * FROM vt2, v0 WHERE (((((((((((UNLIKELY(DISTINCT v0.c3))AND(((vt2.c1) BETWEEN (v0.c3) AND (vt2.c0)))))AND((x'' IN (vt2.c1)))))AND(((((((NULL)AND(v0.c2)))AND(v0.c3)))AND('0.4505668757794715')))))OR(CASE vt2.c1  WHEN v0.c0 THEN v0.c1 END)))AND(0.2595516450693488))) LIMIT 1;
SELECT ALL MIN(vt2.c0) FROM vt2, v0 WHERE (NULLIF(DISTINCT ((v0.c0)||(v0.c2)), ((v0.c2)&(vt2.c0))));
SELECT DISTINCT MIN(vt2.c0) FROM vt2, v0 WHERE (NULLIF(DISTINCT ((v0.c0)||(v0.c2)), ((v0.c2)&(vt2.c0)))) ORDER BY ((v0.c0) ISNULL) COLLATE NOCASE DESC, (((v0.c3) BETWEEN (vt2.c1) AND (v0.c3)) IN ()) DESC LIMIT 0x0 INTERSECT SELECT DISTINCT MIN(vt2.c0) FROM vt2, v0 WHERE ((((v0.c1, v0.c1)) BETWEEN ((CASE WHEN v0.c2 THEN vt2.c0 ELSE v0.c3 END, (v0.c2 IN (v0.c2, v0.c0)))) AND (((+ (vt2.c0)), ((v0.c2)<<(v0.c2)))))) ORDER BY ((v0.c0) ISNULL) COLLATE NOCASE DESC, (((v0.c3) BETWEEN (vt2.c1) AND (v0.c3)) IN ()) DESC LIMIT 0X0;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((v0.c1)LIKE(v0.c1))))<=((CASE WHEN vt0.c0 THEN v0.c3 END))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((((v0.c1)LIKE(v0.c1))))<=((CASE WHEN vt0.c0 THEN v0.c3 END))))AND(((((((((((vt0.c0)OR(vt2.c1)))OR(v0.c0)))AND(v0.c0)))AND(v0.c2))) BETWEEN (CASE WHEN vt2.c1 THEN -1591792550 WHEN v0.c2 THEN '0.7100278653416723' END) AND (((v0.c0)GLOB(vt2.c0))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (CASE ((v0.c3)&(v0.c3))  WHEN (~ (1.947377964E9)) THEN TRIM(DISTINCT vt0.c0) ELSE ((((((((v0.c2)AND(v0.c3)))AND(v0.c3)))OR(vt2.c1)))OR(v0.c0)) END) LIMIT 1;
SELECT ALL * FROM vt0, vt2, v0 WHERE ((((((v0.c1)LIKE(v0.c1))))<=((CASE WHEN vt0.c0 THEN v0.c3 END))));
SELECT DISTINCT * FROM vt0, vt2, v0 WHERE ((((((((v0.c1)LIKE(v0.c1))))<=((CASE WHEN vt0.c0 THEN v0.c3 END))))AND(((((((((((vt0.c0)OR(vt2.c1)))OR(v0.c0)))AND(v0.c0)))AND(v0.c2))) BETWEEN (CASE WHEN vt2.c1 THEN -1591792550 WHEN v0.c2 THEN '0.7100278653416723' END) AND (((v0.c0)GLOB(vt2.c0))))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt0, vt2, v0 WHERE (CASE ((v0.c3)&(v0.c3))  WHEN (~ (1.947377964E9)) THEN TRIM(DISTINCT vt0.c0) ELSE ((((((((v0.c2)AND(v0.c3)))AND(v0.c3)))OR(vt2.c1)))OR(v0.c0)) END) LIMIT 1;
SELECT ALL MIN(v0.c2) FROM vt0, vt2, v0 WHERE ((- ((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, v0.c2)) AND ((v0.c1, v0.c1)))))) ORDER BY (~ (((v0.c2)<(vt2.c0))))  NULLS LAST, (((v0.c0, vt0.c0, vt2.c1))==((vt0.c0, vt2.c0, vt2.c0))) COLLATE RTRIM DESC  NULLS FIRST;
SELECT ALL MIN(v0.c2) FROM vt0, vt2, v0 WHERE ((((- ((((vt0.c0, vt0.c0)) BETWEEN ((vt0.c0, v0.c2)) AND ((v0.c1, v0.c1))))))AND(GLOB(CASE vt0.c0  WHEN v0.c3 THEN v0.c2 WHEN v0.c1 THEN NULL WHEN '-1268541900' THEN vt2.c0 ELSE v0.c1 END, HEX(vt2.c1))))) ORDER BY (~ (((v0.c2)<(vt2.c0))))  NULLS LAST, (((v0.c0, vt0.c0, vt2.c1))==((vt0.c0, vt2.c0, vt2.c0))) COLLATE RTRIM DESC  NULLS FIRST LIMIT 0;
SELECT ALL * FROM vt2 WHERE (vt2.c1 COLLATE NOCASE) ORDER BY ((((vt2.c0)LIKE(vt2.c1)))>>(vt2.c1 COLLATE NOCASE));
SELECT * FROM vt2 WHERE (vt2.c1 COLLATE NOCASE) ORDER BY ((((vt2.c0)LIKE(vt2.c1)))>>(vt2.c1 COLLATE NOCASE)) LIMIT 4 INTERSECT SELECT ALL * FROM vt2 WHERE (CASE vt2.c0  WHEN CAST(vt2.c0 AS NUMERIC) THEN (((vt2.c0, vt2.c0))!=((vt2.c1, vt2.c0))) WHEN (((vt2.c0))<=((vt2.c1))) THEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) END) ORDER BY ((((vt2.c0)LIKE(vt2.c1)))>>(vt2.c1 COLLATE NOCASE)) LIMIT 4;
SELECT ALL * FROM vt2 WHERE (vt2.c1 COLLATE NOCASE) ORDER BY ((((vt2.c0)LIKE(vt2.c1)))>>(vt2.c1 COLLATE NOCASE));
SELECT * FROM vt2 WHERE (vt2.c1 COLLATE NOCASE) ORDER BY ((((vt2.c0)LIKE(vt2.c1)))>>(vt2.c1 COLLATE NOCASE)) LIMIT 4 INTERSECT SELECT ALL * FROM vt2 WHERE (CASE vt2.c0  WHEN CAST(vt2.c0 AS NUMERIC) THEN (((vt2.c0, vt2.c0))!=((vt2.c1, vt2.c0))) WHEN (((vt2.c0))<=((vt2.c1))) THEN ((vt2.c0) NOT BETWEEN (vt2.c1) AND (vt2.c0)) END) ORDER BY ((((vt2.c0)LIKE(vt2.c1)))>>(vt2.c1 COLLATE NOCASE)) LIMIT 4;
SELECT ALL COUNT(*) FROM v0 INNER JOIN vt2 ON x'' NATURAL JOIN vt0 WHERE ((((((vt0.c0, v0.c2)) NOT BETWEEN ((vt0.c0, v0.c1)) AND ((v0.c0, v0.c1))))IS NOT((((vt2.c0, v0.c1))>((v0.c0, v0.c2))))));
SELECT DISTINCT COUNT(*) FROM v0 INNER JOIN vt2 ON x'' NATURAL JOIN vt0 WHERE ((((((((vt0.c0, v0.c2)) NOT BETWEEN ((vt0.c0, v0.c1)) AND ((v0.c0, v0.c1))))IS NOT((((vt2.c0, v0.c1))>((v0.c0, v0.c2))))))AND(((((((((((((v0.c1)AND(v0.c2)))AND(v0.c2)))AND(v0.c2)))OR(vt2.c1)))OR(CHAR(v0.c3, v0.c3, vt0.c0))))OR(CASE WHEN v0.c3 THEN vt0.c0 WHEN v0.c3 THEN v0.c0 WHEN v0.c3 THEN vt2.c1 END))))) ORDER BY ((((((vt2.c0, v0.c0)) NOT BETWEEN ((vt2.c1, v0.c2)) AND ((v0.c3, v0.c0)))))>((v0.c3 COLLATE NOCASE)))  NULLS FIRST, ((((vt2.c0)+(v0.c3))) NOT NULL) ASC  NULLS LAST LIMIT 4;
SELECT ALL * FROM v0 WHERE (v0.c2);
SELECT DISTINCT * FROM v0 WHERE (((v0.c2)AND((((- (v0.c0)))>>(CASE WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END))))) INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(ABS(v0.c3) AS REAL));
SELECT ALL * FROM v0 WHERE (v0.c2);
SELECT DISTINCT * FROM v0 WHERE (((v0.c2)AND((((- (v0.c0)))>>(CASE WHEN v0.c3 THEN v0.c2 ELSE v0.c1 END))))) INTERSECT SELECT DISTINCT * FROM v0 WHERE (CAST(ABS(v0.c3) AS REAL));
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) AS TEXT)) ORDER BY (+ (vt0.c0 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((CAST(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) AS TEXT))AND(((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND((- (vt0.c0))))))) ORDER BY ((vt0.c0 IN (vt0.c0, vt0.c0)) IN ((('')-(vt0.c0))))  NULLS LAST, (((vt0.c0)) NOT BETWEEN ((((vt0.c0) IS TRUE))) AND ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))) ASC, CASE WHEN ((vt0.c0) IS TRUE) THEN rtreenode(vt0.c0, vt0.c0) WHEN ((vt0.c0) IS TRUE) THEN CAST(vt0.c0 AS REAL) END DESC LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY ((vt0.c0 IN (vt0.c0, vt0.c0)) IN ((('')-(vt0.c0))))  NULLS LAST, (((vt0.c0)) NOT BETWEEN ((((vt0.c0) IS TRUE))) AND ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))) ASC, CASE WHEN ((vt0.c0) IS TRUE) THEN rtreenode(vt0.c0, vt0.c0) WHEN ((vt0.c0) IS TRUE) THEN CAST(vt0.c0 AS REAL) END DESC LIMIT 0;
SELECT ALL * FROM vt0 WHERE (CAST(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) AS TEXT)) ORDER BY (+ (vt0.c0 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT * FROM vt0 WHERE (((CAST(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)) AS TEXT))AND(((((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND((- (vt0.c0))))))) ORDER BY ((vt0.c0 IN (vt0.c0, vt0.c0)) IN ((('')-(vt0.c0))))  NULLS LAST, (((vt0.c0)) NOT BETWEEN ((((vt0.c0) IS TRUE))) AND ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))) ASC, CASE WHEN ((vt0.c0) IS TRUE) THEN rtreenode(vt0.c0, vt0.c0) WHEN ((vt0.c0) IS TRUE) THEN CAST(vt0.c0 AS REAL) END DESC LIMIT 0 INTERSECT SELECT * FROM vt0 WHERE (vt0.c0) ORDER BY ((vt0.c0 IN (vt0.c0, vt0.c0)) IN ((('')-(vt0.c0))))  NULLS LAST, (((vt0.c0)) NOT BETWEEN ((((vt0.c0) IS TRUE))) AND ((CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END))) ASC, CASE WHEN ((vt0.c0) IS TRUE) THEN rtreenode(vt0.c0, vt0.c0) WHEN ((vt0.c0) IS TRUE) THEN CAST(vt0.c0 AS REAL) END DESC LIMIT 0;
SELECT ALL MAX(vt2.c1) FROM vt2 NATURAL JOIN vt0 WHERE ((((((vt0.c0 IN (vt0.c0, vt2.c0)))OR(((vt2.c0)<=(vt0.c0)))))AND(json_array_length(vt2.c1))));
SELECT ALL MAX(vt2.c1) FROM vt2 NATURAL JOIN vt0 WHERE ((((((((vt0.c0 IN (vt0.c0, vt2.c0)))OR(((vt2.c0)<=(vt0.c0)))))AND(json_array_length(vt2.c1))))AND(((vt2.c1) NOT BETWEEN (((vt2.c0)LIKE(vt0.c0))) AND (((((vt2.c1)AND(vt2.c0)))AND(vt2.c1))))))) ORDER BY ((((((315882702) NOT BETWEEN (vt2.c0) AND (vt0.c0)))AND(CAST(vt0.c0 AS INTEGER))))AND(LTRIM(vt2.c1, vt2.c1))), ((((vt0.c0)||(vt2.c1))) IS TRUE)  NULLS FIRST, ((vt0.c0) ISNULL) ASC LIMIT 0x0 INTERSECT SELECT ALL MAX(vt2.c1) FROM vt2 NATURAL JOIN vt0 WHERE ((HEX(DISTINCT vt0.c0) IN (((((((vt2.c1)AND(vt2.c1)))AND(vt2.c1)))AND(NULL)), (((vt0.c0, vt0.c0, vt2.c1)) NOT BETWEEN ((vt0.c0, x'', vt2.c0)) AND ((vt2.c0, vt2.c1, vt0.c0)))))) ORDER BY ((((((315882702) NOT BETWEEN (vt2.c0) AND (vt0.c0)))AND(CAST(vt0.c0 AS INTEGER))))AND(LTRIM(vt2.c1, vt2.c1))), ((((vt0.c0)||(vt2.c1))) IS TRUE)  NULLS FIRST, ((vt0.c0) ISNULL) ASC LIMIT 0X0;
SELECT COUNT(*) FROM vt2 WHERE (CASE WHEN x'0b' THEN HEX(vt2.c1) WHEN CAST(vt2.c0 AS REAL) THEN ((vt2.c0)<=(vt2.c0)) END);
SELECT ALL COUNT(*) FROM vt2 WHERE (((CASE WHEN x'0b' THEN HEX(vt2.c1) WHEN CAST(vt2.c0 AS REAL) THEN ((vt2.c0)<(vt2.c0)) END)AND(SQLITE_VERSION()))) ORDER BY vt2.c1  NULLS LAST, TYPEOF(DISTINCT CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 END)  NULLS FIRST LIMIT 0 INTERSECT SELECT COUNT(*) FROM vt2 WHERE (((HEX(vt2.c1))>((('{)},-<n.') ISNULL)))) ORDER BY vt2.c1  NULLS LAST, TYPEOF(DISTINCT CASE vt2.c0  WHEN vt2.c0 THEN vt2.c1 END)  NULLS FIRST LIMIT 0;
SELECT MIN(v0.c0) FROM v0, vt0 WHERE (((CASE v0.c1  WHEN vt0.c0 THEN v0.c0 END)-((((('1190017638')OR(v0.c1)))AND(v0.c1))))) ORDER BY ((((((((v0.c2)OR(vt0.c0)))AND(v0.c3)))OR(v0.c3))) BETWEEN (((v0.c0) NOT BETWEEN (vt0.c0) AND (v0.c0))) AND (v0.c2)) ASC  NULLS FIRST;
SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE (((((CASE v0.c1  WHEN vt0.c0 THEN v0.c0 END)-((((('1190017638')OR(v0.c1)))AND(v0.c1)))))AND(v0.c3))) ORDER BY ((v0.c2) NOT BETWEEN (vt0.c0) AND (v0.c3)) COLLATE RTRIM, vt0.c0 LIMIT 0 INTERSECT SELECT DISTINCT MIN(v0.c0) FROM v0, vt0 WHERE (((((v0.c0)<=(v0.c0))) BETWEEN (TRIM(vt0.c0)) AND (((vt0.c0) IS TRUE)))) ORDER BY ((v0.c2) NOT BETWEEN (vt0.c0) AND (v0.c3)) COLLATE RTRIM, vt0.c0 LIMIT 0x0;
SELECT ALL MIN(v0.c3) FROM v0 WHERE (((v0.c3 COLLATE RTRIM)IS(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0))))) ORDER BY (((~ (v0.c1))) IS TRUE) DESC  NULLS FIRST;
SELECT ALL MIN(v0.c3) FROM v0 WHERE (((((v0.c3 COLLATE RTRIM)IS(((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c0)))))AND(((0.17638965467390544) ISNULL)))) ORDER BY (((~ (v0.c1))) IS TRUE) DESC  NULLS FIRST INTERSECT SELECT ALL MIN(v0.c3) FROM v0 WHERE ((((CASE v0.c3  WHEN v0.c0 THEN v0.c3 ELSE v0.c3 END, ((v0.c0) IS TRUE), ((((v0.c0)OR(v0.c3)))AND(v0.c3))))!=(((('980491451')IS NOT(0.02595004632841358)), (v0.c3 IN (x'51b0', v0.c1, v0.c3)), ((v0.c1) ISNULL))))) ORDER BY (((~ (v0.c1))) IS TRUE) DESC  NULLS FIRST;
SELECT MAX(v0.c1) FROM vt2, v0 WHERE ((CASE 0.12893410339563705  WHEN vt2.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE vt2.c1 END IN (((((((((0.8471169242467689)AND(v0.c0)))AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c0))))) ORDER BY '-1507084098' DESC  NULLS LAST, (((((1.839189666E9)OR(vt2.c0)))OR(v0.c3)) IN ((NOT (v0.c2)))) ASC;
SELECT ALL MAX(v0.c1) FROM vt2, v0 WHERE ((((CASE 0.12893410339563705  WHEN vt2.c1 THEN v0.c2 WHEN v0.c2 THEN v0.c3 WHEN v0.c0 THEN v0.c1 ELSE vt2.c1 END IN (((((((((0.8471169242467689)AND(v0.c0)))AND(vt2.c0)))AND(vt2.c1)))AND(vt2.c0)))))AND(CAST(json_quote(v0.c0) AS INTEGER)))) ORDER BY ((vt2.c1) IS FALSE), ((CAST(v0.c2 AS TEXT))IS NOT(((vt2.c0) IS FALSE))) ASC  NULLS LAST LIMIT 1 INTERSECT SELECT MAX(v0.c1) FROM vt2, v0 WHERE ((- (((v0.c2)>=(v0.c0))))) ORDER BY ((vt2.c1) IS FALSE), ((CAST(v0.c2 AS TEXT))IS NOT(((vt2.c0) IS FALSE))) ASC  NULLS LAST LIMIT 0x1;
SELECT * FROM v0 NATURAL JOIN vt2 CROSS JOIN vt0 ON CAST(((v0.c0)|(v0.c1)) AS INTEGER) WHERE (CASE WHEN ((v0.c2)<<(v0.c2)) THEN v0.c3 COLLATE RTRIM ELSE CAST(vt0.c0 AS BLOB) END);
SELECT DISTINCT * FROM v0 NATURAL JOIN vt2 CROSS JOIN vt0 ON CAST(((v0.c0)|(v0.c1)) AS INTEGER) WHERE (((CASE WHEN ((v0.c2)<<(v0.c2)) THEN v0.c3 COLLATE RTRIM ELSE CAST(vt0.c0 AS BLOB) END)AND((- (v0.c1))))) ORDER BY HEX(v0.c3) COLLATE RTRIM  NULLS LAST LIMIT 0x2;
SELECT * FROM v0 NATURAL JOIN vt2 CROSS JOIN vt0 ON CAST(((v0.c0)|(v0.c1)) AS INTEGER) WHERE (CASE WHEN ((v0.c2)<<(v0.c2)) THEN v0.c3 COLLATE RTRIM ELSE CAST(vt0.c0 AS BLOB) END);
SELECT DISTINCT * FROM v0 NATURAL JOIN vt2 CROSS JOIN vt0 ON CAST(((v0.c0)|(v0.c1)) AS INTEGER) WHERE (((CASE WHEN ((v0.c2)<<(v0.c2)) THEN v0.c3 COLLATE RTRIM ELSE CAST(vt0.c0 AS BLOB) END)AND((- (v0.c1))))) ORDER BY HEX(v0.c3) COLLATE RTRIM  NULLS LAST LIMIT 0x2;
SELECT * FROM vt2, vt0 WHERE (x'');
SELECT DISTINCT * FROM vt2, vt0 WHERE (((x'')AND(((x'' COLLATE NOCASE)-(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt0.c0 WHEN x'05c020' THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE 'DVTm>1' END))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt2.c1) BETWEEN ('') AND (vt2.c1)) COLLATE RTRIM) LIMIT 0X1;
SELECT * FROM vt2, vt0 WHERE (x'');
SELECT DISTINCT * FROM vt2, vt0 WHERE (((x'')AND(((x'' COLLATE NOCASE)-(CASE WHEN vt2.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 WHEN vt2.c0 THEN vt0.c0 WHEN x'05c020' THEN vt0.c0 WHEN vt2.c0 THEN vt2.c1 ELSE 'DVTm>1' END))))) LIMIT 1 INTERSECT SELECT DISTINCT * FROM vt2, vt0 WHERE (((vt2.c1) BETWEEN ('') AND (vt2.c1)) COLLATE RTRIM) LIMIT 0X1;
SELECT * FROM vt2, vt0 WHERE ((- ((+ (vt0.c0)))));
SELECT ALL * FROM vt2, vt0 WHERE ((- ((+ (vt0.c0))))) ORDER BY CAST(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)) AS NUMERIC)  NULLS FIRST INTERSECT SELECT * FROM vt2, vt0 WHERE ((((CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END))<=((GLOB(vt2.c1, vt2.c0))))) ORDER BY CAST(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)) AS NUMERIC)  NULLS FIRST;
SELECT * FROM vt2, vt0 WHERE ((- ((+ (vt0.c0)))));
SELECT ALL * FROM vt2, vt0 WHERE ((- ((+ (vt0.c0))))) ORDER BY CAST(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)) AS NUMERIC)  NULLS FIRST INTERSECT SELECT * FROM vt2, vt0 WHERE ((((CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c1 END))<=((GLOB(vt2.c1, vt2.c0))))) ORDER BY CAST(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0)) AS NUMERIC)  NULLS FIRST;
SELECT ALL * FROM vt0, v0 WHERE (((((((v0.c2)>=(v0.c2)))OR(((v0.c0)<=(0.3954516442412471)))))AND(((vt0.c0) IS TRUE))));
SELECT * FROM vt0, v0 WHERE (((((((v0.c2)>(v0.c2)))OR(((v0.c0)<=(0.3954516442412471)))))AND(((vt0.c0) IS TRUE)))) ORDER BY CASE ((v0.c1)GLOB(v0.c0))  WHEN vt0.c0 THEN v0.c2 COLLATE BINARY ELSE (NOT (vt0.c0)) END DESC, CASE x'e3'  WHEN (v0.c2 IN (x'')) THEN (v0.c3 IN (v0.c2)) WHEN 'H' THEN NULL ELSE UPPER(DISTINCT vt0.c0) END ASC;
SELECT ALL * FROM vt0, v0 WHERE (((((((v0.c2)>=(v0.c2)))OR(((v0.c0)<=(0.3954516442412471)))))AND(((vt0.c0) IS TRUE))));
SELECT * FROM vt0, v0 WHERE (((((((v0.c2)>(v0.c2)))OR(((v0.c0)<=(0.3954516442412471)))))AND(((vt0.c0) IS TRUE)))) ORDER BY CASE ((v0.c1)GLOB(v0.c0))  WHEN vt0.c0 THEN v0.c2 COLLATE BINARY ELSE (NOT (vt0.c0)) END DESC, CASE x'e3'  WHEN (v0.c2 IN (x'')) THEN (v0.c3 IN (v0.c2)) WHEN 'H' THEN NULL ELSE UPPER(DISTINCT vt0.c0) END ASC;
SELECT ALL * FROM v0 WHERE (((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (CAST(v0.c3 AS INTEGER)) AND (v0.c0 COLLATE BINARY))) ORDER BY json_remove(((v0.c0)GLOB(v0.c1)), ((-2.43193612E8) NOT NULL), CASE WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 WHEN 0.32021947530959394 THEN v0.c2 END, ((v0.c3)&(0.01974304337506616))) ASC, v0.c1 COLLATE NOCASE COLLATE RTRIM ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (CAST(v0.c3 AS INTEGER)) AND (v0.c0 COLLATE BINARY)))AND((NOT (((v0.c2) NOT BETWEEN (NULL) AND (v0.c0))))))) ORDER BY json_remove(((v0.c0)GLOB(v0.c1)), ((-2.43193612E8) NOT NULL), CASE WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 WHEN 0.32021947530959394 THEN v0.c2 END, ((v0.c3)&(0.01974304337506616))) ASC, v0.c1 COLLATE NOCASE COLLATE RTRIM ASC  NULLS LAST;
SELECT ALL * FROM v0 WHERE (((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (CAST(v0.c3 AS INTEGER)) AND (v0.c0 COLLATE BINARY))) ORDER BY json_remove(((v0.c0)GLOB(v0.c1)), ((-2.43193612E8) NOT NULL), CASE WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 WHEN 0.32021947530959394 THEN v0.c2 END, ((v0.c3)&(0.01974304337506616))) ASC, v0.c1 COLLATE NOCASE COLLATE RTRIM ASC  NULLS LAST;
SELECT * FROM v0 WHERE (((((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (CAST(v0.c3 AS INTEGER)) AND (v0.c0 COLLATE BINARY)))AND((NOT (((v0.c2) NOT BETWEEN (NULL) AND (v0.c0))))))) ORDER BY json_remove(((v0.c0)GLOB(v0.c1)), ((-2.43193612E8) NOT NULL), CASE WHEN v0.c1 THEN v0.c3 WHEN v0.c2 THEN v0.c2 WHEN v0.c3 THEN v0.c2 WHEN 0.32021947530959394 THEN v0.c2 END, ((v0.c3)&(0.01974304337506616))) ASC, v0.c1 COLLATE NOCASE COLLATE RTRIM ASC  NULLS LAST;
SELECT * FROM vt0 WHERE (json_extract(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 1358428122 END, (+ (vt0.c0)), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, (vt0.c0 IN (vt0.c0)))) ORDER BY CASE ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))  WHEN ((((vt0.c0)OR('	')))OR(vt0.c0)) THEN ((((((vt0.c0)AND(vt0.c0)))OR(NULL)))OR(vt0.c0)) END ASC, (((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) ISNULL) DESC  NULLS FIRST;
SELECT DISTINCT * FROM vt0 WHERE (json_extract(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 1358428122 END, (+ (vt0.c0)), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, (vt0.c0 IN (vt0.c0)))) ORDER BY CASE ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))  WHEN ((((vt0.c0)OR('	')))OR(vt0.c0)) THEN ((((((vt0.c0)AND(vt0.c0)))OR(NULL)))OR(vt0.c0)) END ASC, (((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) ISNULL) DESC  NULLS FIRST LIMIT 0;
SELECT * FROM vt0 WHERE (json_extract(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN 1358428122 END, (+ (vt0.c0)), CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END, (vt0.c0 IN (vt0.c0)))) ORDER BY CASE ((((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))OR(vt0.c0))  WHEN ((((vt0.c0)OR('	')))OR(vt0.c0)) THEN ((((((vt0.c0)AND(vt0.c0)))OR(NULL)))OR(vt0.c0)) END ASC, (((((vt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c0)))) ISNULL) DESC  NULLS FIRST;
SELECT * FROM vt2 WHERE (((vt2.c0) NOT BETWEEN (vt2.c1) AND ((NOT (vt2.c0)))));
SELECT * FROM vt2 WHERE (((((vt2.c0) NOT BETWEEN (vt2.c1) AND ((NOT (vt2.c0)))))AND(CAST((+ (vt2.c1)) AS REAL)))) ORDER BY (+ (NULL)) COLLATE NOCASE, ((((vt2.c0)|(vt2.c1)))!=((x'' IN ()))) ASC LIMIT 1;
SELECT * FROM vt2 WHERE (((vt2.c0) NOT BETWEEN (vt2.c1) AND ((NOT (vt2.c0)))));
SELECT * FROM vt2 WHERE (((((vt2.c0) NOT BETWEEN (vt2.c1) AND ((NOT (vt2.c0)))))AND(CAST((+ (vt2.c1)) AS REAL)))) ORDER BY (+ (NULL)) COLLATE NOCASE, ((((vt2.c0)|(vt2.c1)))!=((x'' IN ()))) ASC LIMIT 1;
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((- (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END)));
SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((- (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END))) INTERSECT SELECT ALL MAX(vt0.c0) FROM vt0 WHERE ((DATE(NULL, vt0.c0, vt0.c0, vt0.c0, vt0.c0) IN (IFNULL(vt0.c0, vt0.c0), ((vt0.c0)LIKE(vt0.c0)))));
SELECT MIN(vt2.c1) FROM v0, vt2 WHERE (((((((((((v0.c1) BETWEEN (v0.c0) AND (0X4c91f3ed)))OR((NOT (v0.c2)))))OR(CASE WHEN v0.c3 THEN vt2.c1 WHEN vt2.c0 THEN v0.c1 ELSE v0.c2 END)))AND(((('1090913443'))<((v0.c2))))))AND(((v0.c0)|(v0.c1)))));
SELECT MIN(vt2.c1) FROM v0, vt2 WHERE (((((((((((((v0.c1) BETWEEN (v0.c0) AND (1284633581)))OR((NOT (v0.c2)))))OR(CASE WHEN v0.c3 THEN vt2.c1 WHEN vt2.c0 THEN v0.c1 ELSE v0.c2 END)))AND(((('1090913443'))<((v0.c2))))))AND(((v0.c0)|(v0.c1)))))AND(CAST(CAST(v0.c2 AS TEXT) AS INTEGER)))) LIMIT 0X3 INTERSECT SELECT ALL MIN(vt2.c1) FROM v0, vt2 WHERE (((+ (v0.c0)) IN ())) LIMIT 0X3;
SELECT MAX(vt2.c1) FROM vt2 WHERE (0.30936303784737795);
SELECT DISTINCT MAX(vt2.c1) FROM vt2 WHERE (((0.30936303784737795)AND(CASE 1.247623579E9  WHEN ((vt2.c0) NOT NULL) THEN vt2.c0 WHEN ((vt2.c0)GLOB(vt2.c0)) THEN ((vt2.c0)IS(vt2.c1)) WHEN ((vt2.c0)AND(vt2.c1)) THEN (NOT (vt2.c0)) WHEN ((((vt2.c1)AND(vt2.c0)))OR(vt2.c0)) THEN ((vt2.c1) NOT BETWEEN (vt2.c0) AND (vt2.c1)) ELSE vt2.c1 COLLATE NOCASE END))) ORDER BY ((CASE WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt2.c0 END) ISNULL) ASC LIMIT 1;
